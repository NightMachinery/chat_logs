[00:01:32] <saturn2> http://metamodular.com/CLOS-MOP/funcallable-instances.html
[00:02:58] <saturn2> according to this, there is no other way to set the funcallable-instance-function than calling set-funcallable-instance-function on each instance
[00:05:18] *** Quits: tyson2 (~user@198.98.115.227) (Quit: ERC (IRC client for Emacs 27.2))
[00:06:10] <Josh_2> Yes this is what I read
[00:09:25] *** Joins: CptJimKirk (~user@70-57-27-195.hlrn.qwest.net)
[00:09:34] *** Joins: tyson2 (~user@198.98.115.227)
[00:12:38] *** Quits: terrorjack (~terrorjac@2a05:d012:f4:f400:3981:7d7e:56ee:2dd9) (Quit: The Lounge - https://thelounge.chat)
[00:14:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:15:34] <copec> Are there any stats on quicklisp library popularity?
[00:16:03] *** Quits: eddof13 (~textual@187.212.196.138) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:19:03] <mfiano> (ql:system-appropos "stats")
[00:19:11] <mfiano> err (ql:system-apropos "stats")
[00:20:14] <copec> appropos is too much apropos
[00:26:46] *** Quits: tyson2 (~user@198.98.115.227) (Quit: ERC (IRC client for Emacs 27.2))
[00:36:27] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[00:42:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:43:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:45:31] *** Lord_of_Life_ is now known as Lord_of_Life
[00:47:09] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[00:49:16] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e473:ba5e:85e3:6828) (Ping timeout: 245 seconds)
[01:10:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:15:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[01:17:20] *** Quits: cosimone (~user@93-44-187-87.ip98.fastwebnet.it) (Ping timeout: 246 seconds)
[01:23:47] *** Quits: pve (~pve@37-33-97-122.bb.dnainternet.fi) (Quit: leaving)
[01:24:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:27:28] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[01:41:51] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[01:42:43] <hendursaga> Anyone aware of some CL equivalent to this? https://github.com/jgoizueta/sys_cmd
[01:43:18] <hendursaga> Basically a DSL for 'building up' commands + their arguments to be called on a shell
[01:43:38] <Josh_2> concatenate 'string ?
[01:43:50] <Josh_2> :joy:
[01:43:51] <mfiano> Sounds like format with a lexically bound stream
[01:44:27] <mfiano> or just WRITE, heh
[01:45:39] *** Quits: gaqwas (~john@dynamic-077-002-015-109.77.2.pool.telefonica.de) (Ping timeout: 265 seconds)
[01:46:04] <hendursaga> Hmm, I was thinking more like getopt, but in reverse..
[01:48:21] <Alfr> hendursaga, you're after the escaping part of it? Maybe uiop:escape-shell-command fits your needs?
[01:50:37] <hendursaga> Alfr: like, some kind of macro that takes something say unix-opts might use to parse command-line arguments, but instead of parsing, generate a function that would take in arguments and then output the string of the resulting command to call externally..
[01:51:10] <copec> hendursaga, I would google using common lisp as shell, I bet that would link to lots of useful things
[01:52:19] <hendursaga> copec: I've looked at a few ones, like inferior-shell
[01:52:52] <Alfr> hendursaga, I don't understand what that function is supposed to do. Query a user for the arguments separately?
[01:54:40] <hendursaga> Alfr: no, assist in programmatically creating shell commands to run
[01:54:42] * copec reading https://ambrevar.xyz/lisp-repl-shell/
[01:55:49] <Alfr> hendursaga, as for fuzzing or completion?
[01:57:11] <hendursaga> Alfr: no, more like, config management/sysadmin stuff
[02:06:36] *** Joins: CptKirk23 (~CptKirk@70-57-27-195.hlrn.qwest.net)
[02:06:54] *** Quits: CptJimKirk (~user@70-57-27-195.hlrn.qwest.net) (Remote host closed the connection)
[02:08:08] *** Joins: CptKirk (~user@70-57-27-195.hlrn.qwest.net)
[02:08:33] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[02:09:36] <copec> Someone should do saltstack in CL
[02:10:33] <copec> I use it as an example of building up a language into a DSL for my fellow sysadmins
[02:11:47] <Alfr> hendursaga, from that package's description and the listed examples, I don't see how that project you linked does anything more than (except for being really verbose): (let ((s (uiop:escape-shell-command '("echo" "arg1" "arg  with  spaces")))) (uiop:run-program s :force-shell t :output 'string))
[02:13:18] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 250 seconds)
[02:14:29] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[02:19:04] *** Quits: frgo (~frgo@p200300deef0cee001d6a41243919a152.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:19:32] *** Joins: frgo (~frgo@p200300deef0cee001d6a41243919a152.dip0.t-ipconnect.de)
[02:22:31] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:27:32] *** Joins: akoana (~ah@user/akoana)
[02:37:30] *** Joins: igemnace (~ian@user/igemnace)
[02:47:05] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[02:51:37] <Psybur> Are FORMAT directives turing complete?
[02:58:13] <Nilby> Psybur: Yes, if you allow nesting of them, they have the same properties as lambda calculus.
[02:59:37] <Psybur> Nice, format succ's
[03:00:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:01:01] <Psybur> I cant find any articles on this though :<
[03:11:02] <edgar-rft> Psybur: if no skilled Lisp archaeologists show up in the next minutes, you can try yourself here -> http://www.softwarepreservation.org/projects/LISP/
[03:12:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:18:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[03:19:56] <Nilby> Psybur: The requirements for lambda calculus are fairly low. Anything that allows variable substitution and function application. Literal encapulation can be used in place of recursive function application, but of course it's quite tedious to construct things.
[03:20:24] <Nilby> http://t3x.org/clc/index.html has a lot of helpful examples
[03:21:05] <Nilby> Specifically I think you could adaped http://t3x.org/clc/lcred.html to use format.
[03:21:21] <Nilby> s/adaped/adapt
[03:21:46] *** Quits: random-nick (~random-ni@87.116.178.45) (Ping timeout: 245 seconds)
[03:29:23] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[03:32:27] <dieggsy> does allegro CL have a strptime equivalent ?
[03:35:53] <edgar-rft> what does strptime do?
[03:38:03] <dieggsy> edgar-rft: it's like strftime, the other way around. e.g. if you give it "2018-12-01" and "%Y-%m-%d" it would spit out a date time object
[03:38:16] <dieggsy> as opposed to giving it some date time object and the format to spit out a string
[03:38:42] <dieggsy> idk why i've suddenly taking to using "spit out" instead of return, it's rather icky sorry lol
[03:40:23] <edgar-rft> don't know about allegro but local-time might have such a thing -> https://www.cliki.net/local-time
[03:41:41] <dieggsy> edgar-rft: hmm, thanks, i'll take a look
[03:42:23] <dieggsy> i try to avoid using extra deps where possible but good grief do we need a proper date/time handling library
[03:42:32] <edgar-rft> the local-time docs -> https://common-lisp.net/project/local-time/manual.html
[03:43:11] <dieggsy> we have a bunch of hacked together ways of detecting and converting date formats across several files and it's .... less than ideal
[03:44:00] <dieggsy> hmmm, it doesn't seem to i guess
[03:44:28] <edgar-rft> I also try to keep external dependencies as low as possible but writing your own time/date handling rather quickly becomes an enterprise in itself :-)
[03:50:56] <dieggsy> yeah, it's awful
[03:51:16] <dieggsy> there's multiple functions that do the same things, none doing it particularly well or strictly validly lol
[03:54:06] *** Parts: akoana (~ah@user/akoana) ()
[03:54:15] <edgar-rft> another fun is that in most networks every computer uses its own built-in hardware clock for the time and the clocks are rather seldom synchronized with each other
[03:55:34] <dieggsy> we're normally working on the timescale of days
[03:56:19] <dieggsy> but i've been doing some tests and who knows how allegro is interpreting (date-time "20-800") lol. "20-200" is the 200th day of 2020...800 ... wraps around maybe? lol
[03:57:55] <Nilby> There was a good date/time string parser on old lisp machines, but it's much much harder to do now, since you have to know and allow locale and language and cultural specific formats, calendars, etc, and also things like do you allow things like 2 leap seconds?
[03:58:51] <mfiano> There is a Common Lisp book dedicated to calendrical calculations on my bookshelf I've been meaning to read.
[04:02:00] <dieggsy> Lol, so "20-800" is doing 800 mod 365 and using that as the year day
[04:02:19] <dieggsy> this appears undocumented
[04:02:27] <dieggsy> er, that  number* as the day
[04:03:05] *** Quits: hisacro (~OBSD@my.displ.nl) (Ping timeout: 264 seconds)
[04:07:11] <mfiano> Here it is. Well, apparently there is a newer edition now, but I don't know what is different: https://www.amazon.com/Calendrical-Calculations-Nachum-Dershowitz/dp/0521702380
[04:07:32] <mfiano> One review: "However, some of the calculations are very complicated and it was difficult to translate these from the LISP listings in the book into PHP or Javascript."...
[04:10:18] <jcowan> Just handling the Gregorian calendar and its near relatives is hard enough.  Mayan, fuggedaboudit.
[04:10:37] <jcowan> To say nothing of Martian
[04:13:57] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:16:12] *** Quits: CptKirk23 (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[04:16:17] *** Quits: CptKirk (~user@70-57-27-195.hlrn.qwest.net) (Ping timeout: 264 seconds)
[04:16:35] <Nilby> It's quite a bit of work to parse "2021年  9月 28日 火曜日" and "mar. 28 sept. 2021" and "Tue 28 Sep 2021" and "22 صفر 1443"
[04:17:30] *** Joins: hisacro (~OBSD@my.displ.nl)
[04:19:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[04:21:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Read error: Connection reset by peer)
[04:22:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:23:09] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[04:23:11] <jcowan> Date parsing is the hardest part, but date formatting is no joke either
[04:24:47] <dieggsy> 🤦 we have is-someformat-date and also someotherformat-date-p
[04:30:20] <jcowan> THere are just so *many* parameters, some of which are locale-specific, others situation-specific.  The U.S. is an m-d-y locale, but there are many ways to write it: September 28, 2021 or Seo, 28, 2021 or 9/28/2021 or 9/28/21 or 9-28-21 ...
[04:31:05] <jcowan> also 9 or <space>9
[04:31:35] <jcowan> s/9/09
[04:32:08] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:32:19] <mfiano> See period delimiters on occasion, too.
[04:33:56] <seok-> could someone teach me what semaphores are, or point me to a resource please
[04:34:05] <seok-> are they like locked variables
[04:37:29] <seok-> oh I thought this was #clschool
[04:37:32] <seok-> sorry, my bad
[04:37:46] <hayley> A semaphore can be used as a mutex (but not a very good mutex).
[04:38:33] <seok-> nice, a resource came up when I looked up mutex
[04:38:35] <seok-> thank you
[04:38:55] <hayley> It can be used to count the number of some resource available, and have threads wait until resources are available.
[04:39:13] <seok-> resource as in, threads ?
[04:39:42] <seok-> I'm confused about these terms
[04:40:08] <hayley> Well, a lock prevents concurrent access to one "resource", like a shared database. You could use a semaphore for more "resources", like elements in a queue.
[04:40:18] <mfiano> anything that is accessed with multiple processes
[04:41:25] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:43:55] <seok-> Can I understand semaphores as just a thread-safe integer variable which counts the number of threads working on a function ?
[04:44:25] <mfiano> Not really
[04:44:35] <mfiano> A semaphore is more abstract than that.
[04:44:38] <hayley> Sort of, but the operations are more limited.
[04:44:47] <mfiano> A binary semaphore is like a mutex
[04:45:10] <mfiano> Infact they are the same, but their use is different
[04:45:12] <hayley> You can release a resource and increment the counter, or acquire by trying to decrement the counter if it is positive, or waiting if it is not.
[04:45:49] <seok-> what use case is there for semaphores over thread-locking variables ?
[04:46:49] <hayley> As I said, you can handle multiple resources, like multiple elements in a thread-safe queue, with a semaphore.
[04:46:51] <mfiano> a thread-locked variable is a concrete use of an abstract binary semaphore
[04:47:05] <seok-> ah
[04:47:29] <seok-> so the difference would be that, locking a variable will apply only to that one resource
[04:47:45] <seok-> wheras semaphores can be used to make a whole function thread-safe ?
[04:47:53] <mfiano> which is also a mutex, but a semphore is more general, because in a mutex for example, only the thing that locked a resource should unlock it
[04:48:25] <mfiano> a semaphore can be how one implements a software mutex
[04:48:54] <seok-> mfiano: oh, that is true
[04:49:50] <seok-> so you can have multiple threads accessing a semaphore, and it is still thread-safe
[04:51:14] <mfiano> Sure, afaik.
[04:52:04] * mfiano doesn't do much multi-threaded programming these days, and when i do, i cheat and reach for lparallel, or "hardware mutex" atomics.
[05:15:52] <hayley> I've only really used semaphores indirectly through thread-safe queues, and occasionally I do nitty-gritty concurrent stuff.
[05:17:38] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:20:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[05:20:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[05:20:32] <akater[m]> Is there a codified Lisp indentation style guide?  In particular, I'm interested in line splits.  E.g. there is a practice of keeping “then” on the same line as “if” sometimes but it's sort of unofficial.  I can't find any document that would consistently describe various Lisp indentation practices.
[05:22:44] <hayley> I know in the SICL style there is a linebreak in (loop for x in xs <linebreak> do ...) but it is not mentioned in the Specification.
[05:22:46] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b022:c3a0:ebbe:5388:789c:892)
[05:22:58] <moon-child> akater[m]: line splits are a matter of personal style, and the complexity of the expressions in question
[05:23:40] <moon-child> if the condition and the true branch of an if are simple and short, I would put them on the same line.  If either is complex or contains many terms, I would put them on different lines
[05:25:36] <moon-child> (and if all are quite simple, put the else branch on the same line as well.  Ditto the body of a loop, contra hayley's note re sicl style guide)
[05:26:04] <hayley> (Also, this is in contrast to (loop for x in xs do <linebreak> ...))
[05:26:31] <akater[m]> moon-child: I still wonder if there's any text describing Lisp indentation practices.  There is personal style but there also is accumulated experience.
[05:27:54] <akater[m]> Keeping forms concise both horizontally and vertically by using whitespace wisely seems to be recognized as a virtue — again, only informally.
[05:28:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[05:30:05] <moon-child> fair enough.  I don't know of any such text
[05:31:25] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:d480:3919:61b7:3376)
[05:51:54] <White_Flame> akater[m]: it kinda depends if the implementation does:
[05:52:00] <White_Flame> (def* if (test then &optional else) ...), or
[05:52:13] <White_Flame> (def* if (test &body then-and-else) ...)
[05:52:44] <White_Flame> the &body form will indent only 2 spaces or so, while the non-&body tends to indent in line with the 2nd element of the list (eg, the test)
[05:54:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:54:24] <White_Flame> regarding linebreaks, the major thing is that open parens shouldn't end a line, and closing parens shouldn't begin a line
[05:54:51] <White_Flame> but that's just pervasive tribal knowledge
[05:58:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[06:02:53] *** Joins: gko (~user@user/gko)
[06:09:41] *** Quits: prxq (~quassel@x4db4ceac.dyn.telefonica.de) (Ping timeout: 252 seconds)
[06:09:51] *** Joins: prxq (~quassel@x4dbdc5f0.dyn.telefonica.de)
[06:10:00] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Quit: ERC (IRC client for Emacs 28.0.50))
[06:30:49] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[06:31:03] *** Quits: hirez (~hirez@104.128.237.40) (Quit: Later)
[06:31:45] <beach> Good morning everyone!
[06:33:56] <mfiano> I would urge against putting a loop clause at the end of a line, such as DO. That just makes reading harder.
[06:34:39] <beach> I agree.  LOOP keywords should start the lines.
[06:35:00] <mfiano> Yes, keywords. Sorry, it's late.
[06:35:34] <White_Flame> if I have multiple WITH or FORs, I often do (loop <nl> for ... <nl> for ... ) to keep the header forms aligned
[06:36:23] <mfiano> But here the second "..." is at the end of the line, so it's fine, assuming "..." doesn't end in a keyword.
[06:36:56] <beach> White_Flame: Why would they not be aligned without the newline?
[06:37:11] <mfiano> Oh I see. Yeah I don't like that style.
[06:37:36] <mfiano> I would prefer to have binding form variables aligned for easy scanning.
[06:38:39] <beach> SLIME indentation does a good job on LOOP indentation.
[06:38:56] <beach> Er, slime-indentation I  think the contribution is called.
[06:39:29] <hayley> I put the first loop clause on the first line of a LOOP form, so (loop for ... <nl> for ... <nl> ...) The number of possible LOOP styles is huge.
[06:39:30] <mfiano> It even indents :when/:do and similar things that indicate nesting, assuming some SLIME variable is set, and you use keyword-interned keywords.
[06:40:11] <hayley> It works if you use any symbols with the appropriate names, from experience.
[06:40:41] <mfiano> Oh yes it does. I'm thinking of something else.
[06:41:20] <mfiano> What I was thinking of, is it will align the ":" of keyword-interned symbols on adjacent lines, with some lisp-mode variable set.
[06:41:47] <mfiano> Which is handy for LOOP, with keyword-interned symbols, to be more readable, like a property list with keyword symbol keys.
[06:42:17] <White_Flame> hm, this must have changed in recent years
[06:42:18] <mfiano> I forget what that variable is called, or if it is now set by default (it's been like 10 years since I know for a fact it was not the default)
[06:42:41] <White_Flame> beach: and yeah, I have code that did not align without the newline
[06:43:16] <White_Flame> where every loop keyword within the form is &body-indented, not aligned to the (loop <term> ...) term
[06:43:50] <White_Flame> (if/else/when/etc does bump the indentation though)
[06:45:15] <beach> White_Flame: All that works right with slime-indentation.
[06:46:05] <White_Flame> yep, it does now
[06:46:36] <beach> But, yes, I agree, for other constructs I sometimes need to add a newline to get things to line up, mostly due to the brokenness of the Emacs indentation algorithm.
[06:46:46] <White_Flame> probably had different setups, manual slime installation, etc going on before
[06:50:32] <mfiano> As mentioned, using keyword-symbol LOOP keywords does help Emacs' lisp-mode indentation algorithm in certain situations.
[06:54:52] *** Joins: karlosz (~karlosz@12.196.174.98)
[07:11:44] <dieggsy> FWIW i found this, which is rather sweet and simple https://github.com/mohe2015/schule/blob/818c0499cb6904ec5ef6d325f4636410b7fa5913/src/libc.lisp
[07:11:46] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:12:15] <dieggsy> i was leaning towards FFI anyway but i've not actually used CFFI so it certainly expedites things to find someone's already had your exact idea lol
[07:12:23] *** Quits: yewscion (~yewscion@2604:ca00:15c:b8dd::e60:89c6) (Ping timeout: 265 seconds)
[07:25:07] *** Joins: semz (~none@user/semz)
[07:27:19] <mfiano> dieggsy: You would be losing a lot of the benefits of Common Lisp by punting to foreign code.
[07:28:12] <dieggsy> mfiano: ? for the isolated case of turning date strings into unix time?
[07:28:48] <dieggsy> there's no built-in way to do it. there's a periods library that has a strptime but it's weirdly too permissive
[07:29:20] <mfiano> Yes. You can no longer guarantee that a conforming program will run N decades from now, or currently on other operating systems, such as Mezzano. Instead, use local-time.
[07:29:22] <dieggsy> I could certainly try and write my own CL strptime but that feels even more like reinventing the wheel
[07:29:43] <dieggsy> mfiano: local-time doesn't handle custom string formats, unless i missed that part of the docs
[07:29:53] <dieggsy> parsing* custom string formats
[07:30:10] <mfiano> How many do you need? Parsing into the canonical form is an option.
[07:31:13] <dieggsy> mfiano: it's not about amount - i have strings like "YY.DDD" that I need turned into some lisp time object or unix time
[07:31:34] <dieggsy> as far as i can tell local time doesn't have the option for custom formats
[07:31:43] <mfiano> Seems straightforward.
[07:32:03] <dieggsy> mfiano: Sure, I could regexp it
[07:32:07] <dieggsy> there are other formats
[07:32:13] <dieggsy> it's exactly the sort of thing strptime is for lol
[07:32:52] <dieggsy> I was already writing a bunch of regex to handle all the cases, but i also have to validate the dates etc.
[07:33:40] <dieggsy> "write your own date parsing library" is historically a pretty solid way of shooting oneself in the foot though
[07:34:35] <dieggsy> so I was just looking at other options. perhaps strptime through CFFI isn't a good option then. but i always like to look at "short of writing it myself, what's the best alternative"
[07:35:52] <mfiano> Well lazy is easy until it has to be rewritten when foreign dependencies change.
[07:36:01] <mfiano> Or support more hosts
[07:36:22] <mfiano> Common Lisp as a host-agnostic image is the language's greatest feature!
[07:36:38] <mfiano> Stop being lazy and write code to do what you want and save yourself some time.
[07:36:46] <dieggsy> Respectfully, I disagree that it's "lazy" to not write everything yourself/investigate the alternatives, especially given that I mentioned I was already going down that path
[07:37:50] <dieggsy> What kind of an engineer would I be if i couldn't make the best use of the tools at my disposal, heh. Write my own tools too, sure. But they're not mutually exclusive
[07:37:55] <mfiano> I and many others make an effort to ensure no transitive dependency is using needless foreign code. You do what you wish though.
[07:38:10] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[07:38:11] <dieggsy> you make a good point about portability though so that's certainly something to consider
[07:38:45] <dieggsy> At the same time, there is FAR too much code in our codebase where someone went "i'll just do it myself" and it's a hot mess so
[07:39:08] <dieggsy> inb4 "just don't suck at coding" jajaja
[07:39:19] <mfiano> Good architecture is another issue altogether.
[07:39:31] <dieggsy> good implementation, even
[07:39:33] <mfiano> Take a look at projects like beach's SICL some time.
[07:39:50] <mfiano> For inspiration on good code and conforming, portable Common Lisp.
[07:40:29] *** Quits: jealousmonk (~user@2804:431:e7c5:e827:5c1c:24ea:7fec:c9e5) (Quit: ERC (IRC client for Emacs 27.1))
[07:40:59] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 252 seconds)
[07:41:27] <dieggsy> this codebase is FAR past that jajaja
[07:41:48] <dieggsy> i'm doing my best to steer us right though, and i think i agree haphazardly introducing an FFI dependency doesn't do that so
[07:41:56] <dieggsy> consider me convinced-ish
[07:43:13] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Remote host closed the connection)
[07:43:37] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[07:44:09] <mfiano> Sure. It just pains me when people _needlessly_ use foreign code. It only hurts the Lisp ecosystem and annoys the purists (read: most of us :)). I'm sure beach and others will chime in with more reasons when they've had their coffee.
[07:44:50] <dieggsy> Well, i'm certainly more of a pragmatist than a purist, but you can be one and the other, and in some cases you have to be one to be the other
[07:45:21] <mfiano> I've been working on a game engine for approximately 10 years now, and if I had to use foreign code, I would probably just use C, heh.
[07:45:50] <dieggsy> I enjoy hearing opinions in any case, even (especially?) those I might not initially be inclined to agree with. I've no real ego about my programming lmao
[07:47:09] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[07:48:29] <mfiano> This isn't to say that foreign code isn't useful at times, though.
[07:48:41] <dieggsy> Of course it is
[07:49:28] <dieggsy> As a chicken schemer at heart, foreign code is one of the major selling points there
[07:49:42] <dieggsy> I'm aware this ain't chicken though
[07:49:54] <dieggsy> I've done some CL too
[07:49:59] <mfiano> For example, in my domain, game development, whenver I interface with the OS for I/O I must use C at some level, whether it's a syscall, or some hardware abstraction layer. In my case, the only foreign code I use is SDL, and it's largely unavoidable mostly due to GPU manufacturers releasing binary blob drivers.
[07:51:07] <moon-child> mfiano: you don't need sdl necessarily; there is e.g. clx
[07:51:11] <mfiano> This does limit the machines that can run my code, but SDL is pretty widespread and touches everything that has a GPU driver available for it anyway, so I don't mind. It does mean though that I am at the mercy of the project unless I write an abstraction layer.
[07:51:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:51:36] <moon-child> (though obviously gl you need to touch foreigns for)
[07:51:38] <mfiano> Which I actually have in testing, where I can switch to eg; glop
[07:52:10] <mfiano> Sadly, clx is not useful to me as X itself does not provide some things needed.
[07:52:32] <mfiano> It was also buggy and crashed my X server with my driver the last time I tried it.
[07:53:33] <moon-child> because _clx_ is buggy the x _server_ crashed?
[07:53:34] <moon-child> :D
[07:54:19] <mfiano> Yes, it happened reliably when I dragged a window, and my X server usually runs for months at a time without an issue. :)
[07:55:30] <mfiano> I admit I haven't tried in about a year, but I don't really have a reason to anyway.
[07:55:50] <dieggsy> The other thing is you don't always have full control over your code, e.g. we depend on proprietary  databases etc. anyway
[08:04:53] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 264 seconds)
[08:08:13] <mfiano> I hope it's Franz's stuff :)
[08:08:49] <dieggsy> some of it is
[08:15:13] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[08:17:07] <beach> The only thing I can add, or rather emphasize, is that FFI solutions tend to benefit only the individual, whereas if that individual spent a little bit more time to create or add to a pure Common Lisp library, we would collectively benefit.
[08:19:40] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[08:20:12] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[08:22:20] <mfiano> Ah, yes, well put.
[08:25:42] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[08:27:09] <mfiano> I suppose sometimes an individual is a team, in which case, the decision to depend on foreign code should be more carefully weighed, and knowledge of the entire team's working environment and compatibility/issues with said foreign library in that environment.
[08:28:32] *** Joins: rgherdt (~rgherdt@95.90.244.86)
[08:29:35] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 246 seconds)
[08:30:03] <mfiano> and of course, the same considerations for the customer's environment!
[08:30:26] <mfiano> Whereas with a pure solution, none of that needs to be taken into account.
[08:34:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[08:35:31] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 245 seconds)
[08:36:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:48:18] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[08:48:50] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[08:48:57] *** Joins: yewscion (~yewscion@2604:ca00:14a:1099::460:12d0)
[08:49:46] *** Joins: yewscion_ (~yewscion@64.9.247.158)
[08:51:47] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:52:12] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[08:52:19] *** Joins: karlosz (~karlosz@12.196.174.98)
[08:52:31] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:53:29] *** Quits: yewscion (~yewscion@2604:ca00:14a:1099::460:12d0) (Ping timeout: 264 seconds)
[08:54:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[08:54:16] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[08:54:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[09:04:59] <beach> mfiano: Indeed.
[09:08:05] *** Joins: sndr (~sander@user/sander)
[09:08:26] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[09:08:48] *** sndr is now known as sander
[09:11:57] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[09:18:20] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b022:c3a0:ebbe:5388:789c:892)
[09:20:31] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b022:c3a0:ebbe:5388:789c:892) (Ping timeout: 245 seconds)
[09:22:53] *** Quits: yewscion_ (~yewscion@64.9.247.158) (Ping timeout: 264 seconds)
[09:27:06] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:30:08] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 246 seconds)
[09:33:20] <lisp123> If anybody wants an Emacs shortcut to re-run the expression entered into the SLIME REPL (useful for re-running tests), you can use this (thanks pjb for parts of the code): https://pastebin.com/NJ7CE4Lx
[09:33:41] <lisp123> s/the expression/the last expression
[09:36:02] <beach> What's wrong with M-p?
[09:36:56] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[09:36:57] <lisp123> M-p is from within the REPL, this can be used from any buffer (so saves having to switch to the REPL and back) -- I may be mistaken though and there is some other way
[09:37:10] <beach> I see.
[09:38:26] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[09:38:37] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 268 seconds)
[09:39:35] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[09:39:45] *** Joins: shka (~herr@109.231.6.176)
[09:52:28] *** Joins: gaqwas (~john@dynamic-095-117-023-001.95.117.pool.telefonica.de)
[09:53:58] *** Joins: pve (~pve@178-55-21-169.bb.dnainternet.fi)
[10:24:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 246 seconds)
[10:24:31] *** Joins: amb007 (~a_bakic@198.132.22.93.rev.sfr.net)
[10:29:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[10:30:13] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[10:34:29] *** Joins: karlosz (~karlosz@12.196.174.98)
[10:41:28] *** Joins: igemnace_ (~ian@user/igemnace)
[10:41:37] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[10:46:52] *** Joins: notzmv (~zmv@user/notzmv)
[10:53:25] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[11:18:37] *** Quits: amb007 (~a_bakic@198.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:19:07] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:21:49] *** Joins: lotuseater (~user@b2b-78-94-235-194.unitymedia.biz)
[11:25:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:29:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:34:17] *** Quits: gaqwas (~john@dynamic-095-117-023-001.95.117.pool.telefonica.de) (Ping timeout: 264 seconds)
[11:35:55] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[11:36:12] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[11:36:31] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[11:37:34] *** Joins: selwyn (~selwyn@user/selwyn)
[11:38:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:25] *** Joins: adabsurdum (~ad-absurd@229.sub-174-210-130.myvzw.com)
[11:44:32] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b022:c3a0:ebbe:5388:789c:892) (Ping timeout: 246 seconds)
[11:45:17] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[11:48:22] *** Quits: dre (~dre@2001:8003:c932:c301:c3b5:3d4:768d:4c71) (Ping timeout: 265 seconds)
[11:52:17] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065) (Quit: Bridge terminating on SIGTERM)
[11:52:18] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Quit: Bridge terminating on SIGTERM)
[11:52:19] *** Quits: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7) (Quit: Bridge terminating on SIGTERM)
[11:52:25] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Quit: Bridge terminating on SIGTERM)
[11:52:27] *** Quits: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d) (Quit: Bridge terminating on SIGTERM)
[11:52:27] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[11:52:28] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[11:52:30] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[11:52:34] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Quit: Bridge terminating on SIGTERM)
[11:52:34] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Bridge terminating on SIGTERM)
[11:55:28] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[12:05:59] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[12:05:59] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[12:05:59] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[12:05:59] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[12:05:59] *** Joins: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d)
[12:05:59] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[12:05:59] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[12:05:59] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[12:05:59] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[12:05:59] *** Joins: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065)
[12:05:59] *** Joins: hayley (~theemacss@user/hayley)
[12:05:59] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[12:05:59] *** Joins: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7)
[12:05:59] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[12:05:59] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[12:05:59] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[12:05:59] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[12:05:59] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[12:06:11] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[12:06:11] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[12:06:12] *** Joins: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4)
[12:06:13] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[12:09:27] *** Quits: lotuseater (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[12:14:00] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[12:14:18] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:14:22] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Remote host closed the connection)
[12:14:38] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:22:56] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[12:23:12] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:24:21] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Client Quit)
[12:24:37] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:25:19] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:52:53] *** Quits: adabsurdum (~ad-absurd@229.sub-174-210-130.myvzw.com) (Ping timeout: 264 seconds)
[12:54:16] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 245 seconds)
[13:21:55] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:37:36] *** Quits: mindlessmaniac (~mindlessm@178.76.183.114) (Ping timeout: 245 seconds)
[13:38:53] *** Joins: mindlessmaniac (~mindlessm@178.76.183.114)
[13:43:40] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[14:08:51] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 245 seconds)
[14:09:33] *** Joins: amb007 (~a_bakic@230.132.22.93.rev.sfr.net)
[14:18:43] *** Joins: random-nick (~random-ni@87.116.183.117)
[14:19:04] *** Quits: frgo (~frgo@p200300deef0cee001d6a41243919a152.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:19:32] *** Joins: frgo (~frgo@p200300deef0cee00656286f7b8b79341.dip0.t-ipconnect.de)
[14:29:17] *** Joins: selwyn (~selwyn@user/selwyn)
[14:38:51] *** Quits: amb007 (~a_bakic@230.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:39:18] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:54:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:05:03] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[15:14:30] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:18:14] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:29:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:32:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[15:37:33] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[15:41:20] *** Quits: igemnace_ (~ian@user/igemnace) (Quit: WeeChat 3.2.1)
[15:45:21] <lisp123> pjb: Is there a way to use both IBCL & CL-STEPPER together? I tried it and it seems to work, but I have to resolve some conflicts during the ASDF load process (which may just be some incorrect setup on my end)
[15:59:17] *** Joins: Bike (~Glossina@71.69.170.70)
[15:59:17] *** ChanServ sets mode: +o Bike
[16:00:49] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:04:44] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[16:22:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[16:24:47] *** Joins: aeth (~aeth@user/aeth)
[16:26:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[16:39:47] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Ping timeout: 240 seconds)
[16:40:01] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Ping timeout: 268 seconds)
[16:46:31] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[16:49:03] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b00a:a1d4:6fe8:e066:cf1d:e681)
[16:51:07] *** Joins: CptKirk (~CptKirk@71-211-254-90.hlrn.qwest.net)
[16:51:46] *** Quits: andreyorst (~andreyors@2.92.125.243) (Ping timeout: 245 seconds)
[16:54:59] *** Quits: Posterdati (~posterdat@host-95-235-15-123.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[16:57:09] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[16:57:38] *** Joins: srhm (~srhm@user/srhm)
[16:59:14] *** Joins: jealousmonk (~user@2804:431:e7c5:e827:5c1c:24ea:7fec:c9e5)
[17:07:12] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[17:12:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[17:12:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:14:44] *** Joins: andreyorst (~andreyors@2.92.125.242)
[17:27:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:27:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:28:28] *** Joins: cosimone` (~user@93-47-228-163.ip115.fastwebnet.it)
[17:30:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[17:37:41] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:41:05] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[17:44:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[17:45:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[17:47:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:48:58] <Fade> aaaaand Bell has a transit hiccup.
[17:49:14] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[17:49:23] <beach> Who is "Bell"?
[17:49:25] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[17:49:47] <edgar-rft> Hells Bells
[17:51:00] <Fade> Bell is the conglomeration of telecommunications companies (the baby bells) that resulted from the US federal government breaking up AT&T
[17:51:06] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[17:51:31] <beach> Most of the world probably doesn't care.
[17:51:34] <Fade> they share a lot of deep infrastructure, still.
[17:52:04] <Fade> anyhow, I was just commenting on the network resets that cascaded through the channel.
[17:52:13] <beach> Ah, I see now.
[17:52:47] <beach> Though, I didn't see any such resets.
[17:54:04] <Fade> perhaps your client ignores the messages. they can get quite noisy, but I usually enable them.
[17:54:34] <beach> Or maybe I am far away from any Bell.
[17:55:46] <edgar-rft> Let's ask on ##astronomy what they know about the Bell transit and its hiccups
[17:57:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:00:13] <Fade> i suspect backbone architecture is out of scope for #commonlisp, so I'll shaddap now.
[18:00:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:00:47] *** Quits: frgo (~frgo@p200300deef0cee00656286f7b8b79341.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:00:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[18:01:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:01:46] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[18:03:53] *** Quits: cosimone` (~user@93-47-228-163.ip115.fastwebnet.it) (Remote host closed the connection)
[18:04:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:21:35] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[18:21:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[18:22:06] *** Joins: srhm (~srhm@user/srhm)
[18:22:36] *** Joins: arcsech[m] (~arcsechma@2001:470:69fc:105::1:797)
[18:26:17] *** arcsech[m] is now known as Arcsech
[18:54:05] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:04:32] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:04:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:08:47] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b00a:a1d4:6fe8:e066:cf1d:e681) (Quit: Leaving)
[19:10:04] <pjb> lisp123: indeed, since CL-STEPPER replaces CL, and IBCL shadows some symbols from CL, and replaces CL too, (but in a hidden manner),  you would have to make an IBCL-STEPPER package that chooses carefully its symbols from one or the other.  And  since there are some collisions, eg. DEFUN you will have to merge the functionalities by definiting our own IBCL-STEPPER:DEFUN (similarly, DEFGENERIC, DEFMETHOD, etc).
[19:10:43] <pjb> lisp123: note: if you wanted to use CLIM, you'd also have to merge the behaviors, CLIM shadows CL:defclass and CL:defmethod…
[19:10:44] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[19:10:52] <beach> pjb: Did you mean for that to go in #clschool?
[19:11:13] <pjb> No, here, lisp123 asked it here at <14:15:21>.
[19:11:19] <beach> OK.
[19:11:42] <pjb> And it's rather advanced, for a beginner ;-)
[19:11:55] *** Joins: eddof13 (~textual@177.241.59.113)
[19:11:57] <lisp123> pjb & beach: Thanks :) Yes asked it here as its useful for all imo too :)
[19:22:00] <pjb> lisp123: It looks nice.
[19:28:50] <lisp123> pjb: Thanks!
[19:31:48] *** Joins: rotateq (~user@p200300e78715be00fdfeed040e17b750.dip0.t-ipconnect.de)
[19:44:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[19:44:30] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:48:06] *** Joins: lisp123_ (~lisp123@45.86.202.96)
[19:48:48] *** Quits: lisp123_ (~lisp123@45.86.202.96) (Client Quit)
[19:49:41] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[19:51:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[19:58:03] *** Quits: eddof13 (~textual@177.241.59.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:58:56] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[20:00:02] <saltrocklamp[m]> eric: thanks for doing that!! i also managed to get c2ffi working in the meantime
[20:02:38] *** Joins: eddof13 (~textual@177.241.59.113)
[20:03:01] <rotateq> saltrocklamp[m]: oh for what's c2ffi? :) i just know cffi
[20:03:18] <saltrocklamp[m]> https://github.com/rpav/c2ffi
[20:03:24] <rotateq> thanks
[20:03:49] <rotateq> and of course i know the nickname of something else, c2mop ^^
[20:10:40] *** Quits: eddof13 (~textual@177.241.59.113) (Remote host closed the connection)
[20:11:53] <rotateq> So I remembered today how to escape when (setq *read-base* 36) was accidentally written.
[20:12:05] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Ping timeout: 264 seconds)
[20:12:10] *** Quits: CptKirk (~CptKirk@71-211-254-90.hlrn.qwest.net) (Ping timeout: 256 seconds)
[20:13:16] <Arcsech> And how is that?
[20:13:39] <rotateq> shall I say it now or do you want to try first?
[20:14:01] <rotateq> Arcsech: and nice nickname btw :)
[20:15:14] <kagevf> pjb: and lisp123: that command would be even more useful if it got the last command from the currently active repl ... exercise left for the user, I guess :) it's a good start, though :)
[20:16:37] <etimmons> salt rock lamp: Nice! I had some issues getting c2ffi working, but can't remember them at the moment
[20:18:02] <rotateq> hmm salt rock lamp, sounds like a variation of the game scissors, paper, rock, lizard, spock
[20:18:09] <pjb> rotateq: || and .
[20:18:19] <rotateq> pjb: heh!
[20:18:20] <pjb> (|SETF| |*READ-BASE*| 10.)
[20:18:34] <rotateq> i wanted to let him try first :P
[20:18:41] <Arcsech> Thanks rotateq :)
[20:18:50] <pjb> Oops.  You should have announced a quizz.
[20:18:51] <Arcsech> I couldn't figure it out but I'm newish to CL
[20:18:53] <Arcsech> :p
[20:19:04] <rotateq> it's even possible with (|SETF| *read-base* 10.) for me in SBCL
[20:19:10] <saltrocklamp[m]> rotateq: it's one of these :) https://i.ebayimg.com/images/i/262430307343-0-1/s-l1000.jpg
[20:19:17] <rotateq> Arcsech: oh nice
[20:19:21] <pjb> Indeed. since *…-…* is not number syntax.
[20:19:38] <rotateq> saltrocklamp[m]: beautiful, like lava lamps
[20:19:48] <pjb> You can also escape a single letter: (\Setf *read-base* 10.)
[20:20:41] <rotateq> pjb: we had this some weeks ago in #lispcafe and gilberth told me the thing with 10. vs 10.0
[20:21:01] <rotateq> ah right, like ever more than one possibility
[20:21:20] <rotateq> there was another thing I couldn't escape but I can't remember now
[20:21:43] <Arcsech> Are the reader things CL supports by default (e.g. `|symbol name|`, `#xdeadbeef`, etc) in the hyperspec anywhere? I can't find them
[20:21:55] <rotateq> Arcsech: with the pipes around you can type your symbols like you want
[20:22:32] <Arcsech> Sure, yeah, but I'm bad at remembering things and would like a list I can reference of the built in "reader macros" or special reader symbols or whatever they're called
[20:22:39] <rotateq> oh me too
[20:22:46] <rotateq> and yes wait a moment ...
[20:23:04] <pjb> Arcsech: it's described in detail in the chapter 2.
[20:23:26] <rotateq> http://www.lispworks.com/documentation/lw51/CLHS/Body/02_dh.htm
[20:23:45] * rotateq has to be careful not pasting his local clhs links
[20:24:25] <Arcsech> Much appreciated, I think I was having difficulty b/c they're not in the symbol index (...because they're not symbols AIUI, but still)
[20:25:26] <rotateq> Arcsech: so it's opens the eyes when you realize that ", ;, (, ), ... are readmacros. but maybe you first want to learn way simpler dark magic :)
[20:25:38] <pjb> Arcsech: indeed, don't forget to read the sections before the symbols in each chapter ;-)
[20:25:59] <rotateq> yes right, they expand to something before the compiler sees anything
[20:26:29] <pjb> indeed, the only hardwired lisp syntax is for integer, floats, and symbols.  And even that could be shadowed by writing reader macros on all the characters.
[20:27:51] <rotateq> yes many are free to simulate other language's syntax
[20:28:26] <rotateq> or other useful things
[20:31:30] <Arcsech> To ask what is perhaps a silly question, why don't you see a lot more of that? e.g. with Racket, one can write a prolog clone in Racket with completely different syntax (not s-exp based), then call prolog-clone code from Racket and vice-versa. Seems like that should be possible with CL as well, but I don't recall any instances of having seen it
[20:31:51] <rotateq> oh don't worry, i ask silly questions all the time
[20:32:20] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[20:32:34] <Arcsech> I mean more from a technical standpoint than an architectural one BTW
[20:32:49] <rotateq> the first step writing the macros you need to have prologish things, like described in "On Lisp"
[20:33:28] <rotateq> not just possible, but natural
[20:34:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[20:34:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:36:05] *** Joins: aeth (~aeth@user/aeth)
[20:39:00] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:46:33] <Arcsech> Well, that was on the list of books to read already, so I guess I'll get there :p
[20:47:14] <rotateq> it's one of the good intro books, especially to get a good fundament with macros
[20:47:55] *** Joins: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net)
[20:47:58] <rotateq> like ANSI Common Lisp that is written by Paul Graham too
[20:49:27] <akater[m]> arcsech: M-x hyperspec-lookup-reader-macro
[20:50:16] <Arcsech> I've read most of Practical Common Lisp (though a bit ago now), currently reading Programming Algorithms in Lisp. I think a macro book is probably next
[20:50:21] <Arcsech> Thanks akater
[20:50:50] <rotateq> oh PAiL is the newer book by Vsevolod
[20:55:05] *** Joins: karlosz (~karlosz@47.180.55.252)
[20:56:57] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:57:30] *** Joins: srhm (~srhm@user/srhm)
[20:58:09] <Arcsech> Yeah, that one. Pretty good so far but I'm only through the chapter on arrays
[20:58:14] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[20:58:39] <Arcsech> It's definitely on the more casual end of algo textbooks but does a good job of showing how Lisp makes implementations pretty clean and easy to understand
[21:01:46] *** Joins: notzmv (~zmv@user/notzmv)
[21:10:31] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:11:08] *** Joins: amb007 (~a_bakic@230.132.22.93.rev.sfr.net)
[21:11:13] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[21:30:39] *** Quits: amb007 (~a_bakic@230.132.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[21:31:32] *** Joins: amb007 (~a_bakic@238.149.22.93.rev.sfr.net)
[21:32:12] *** Quits: mindlessmaniac (~mindlessm@178.76.183.114) (Quit: Leaving)
[21:40:31] <paule32> hello
[21:40:37] <rotateq> hi paule32 :)
[21:41:15] <paule32> i which form it is better, to describe a ic - in a list or a array or defun
[21:41:43] <rotateq> you mean integrated circuit?
[21:42:05] <paule32> in context, yes, of more than 1 port
[21:42:28] <rotateq> maybe the components as classes and then combining them with s-exprs
[21:42:56] <rotateq> this is one thing i thought about too sometime
[21:43:38] <paule32> give it more?
[21:43:39] <rotateq> ahh okay so with an array when you imagine the circuit from above with fields and some are empty
[21:43:48] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[21:44:23] <paule32> also, i would be describe a ic - and its internal build
[21:44:39] <rotateq> yes maybe writing a simple digital simulation program where you can put circuits with wires in McCLIM
[21:44:40] <paule32> then, i would add ports for io
[21:44:53] <rotateq> yes, one step at a time
[21:45:21] <paule32> mcclim, a library ?
[21:45:38] <rotateq> it's for building powerful graphical interfaces declaratively
[21:45:53] *** Joins: lisp123 (~lisp123@45.86.202.96)
[21:46:29] <rotateq> with a defined protocol like in MOP and special capabilities
[21:46:47] <paule32> free ?
[21:47:17] <rotateq> it features 100% less C or foreign libs
[21:47:40] <rotateq> and yes, McCLIM is an open version of CLIM2
[21:47:56] <paule32> ok
[21:48:19] <paule32> but i dont understand at the moment, how ic can be describe
[21:48:28] <rotateq> so one of your superclasses could be (defclass circuit () ())
[21:48:30] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[21:48:46] *** Joins: karlosz (~karlosz@47.180.55.252)
[21:48:55] <paule32> and the properties are slots ?
[21:49:19] <rotateq> yes if it makes sense, sometimes you have properties better in methods
[21:50:02] <paule32> and classes can be derivated
[21:50:23] <rotateq> like when you do (defclass triangle (shape) (x y z)) so you store the three defining points, but for example the area is computed by a method
[21:50:24] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:50:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[21:50:45] <rotateq> yes right, multiple inheritance
[21:52:20] *** X-Scale` is now known as X-Scale
[21:53:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:56:46] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[21:59:55] *** Joins: yehowshua (~yehowshua@192.24.14.195)
[22:02:51] *** Quits: amb007 (~a_bakic@238.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:03:12] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:07:43] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[22:08:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 245 seconds)
[22:09:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:09:19] <rotateq> pjb: oh now I learned that even something like #b101/10 is allowed :)
[22:11:07] <rotateq> okay makes sense, I imagine the #b, #x, #o, #r work internally in a way to set the *read-base* temporarily to the one the specify
[22:15:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[22:16:13] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:19:32] *** Joins: MarsIronPI (~MarsIronP@107.117.175.34)
[22:23:13] *** Quits: MarsIronPI (~MarsIronP@107.117.175.34) (Client Quit)
[22:28:14] *** Joins: gaqwas (~john@dynamic-095-117-023-001.95.117.pool.telefonica.de)
[22:31:29] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[22:40:04] *** Quits: yehowshua (~yehowshua@192.24.14.195) (Ping timeout: 256 seconds)
[22:47:28] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[22:53:23] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[22:56:06] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:d480:3919:61b7:3376) (Ping timeout: 250 seconds)
[22:56:58] <lisp123> kagevf: Hmmm good question :) Something like this should do the trick (will leave parts of it unsolved for the reader :) ) --> (let* ((buffer-names (loop for buffer in (buffer-list) collect (buffer-name buffer))) (new-buffer-list (remove-if-not [slime-repl-buffer-p] buffer-names))) (with-current-buffer (car (sort new-buffer-list #'string-greaterp.....
[23:00:22] *** Joins: yehowshua (~yehowshua@192.24.14.195)
[23:02:56] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Quit: Client closed)
[23:07:13] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[23:17:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:18:58] <kagevf> lisp123: that's elisp, right?
[23:19:12] *** Quits: yehowshua (~yehowshua@192.24.14.195) (Quit: Client closed)
[23:19:37] <lisp123> Yes (although it has a mistake it but pretty easy to figure it out once one tries). Let me know if you want me to write it out fully
[23:22:39] <kagevf> lisp123: would it be (easily) possible to get the list of slime connections from the *slime-connections* buffer? then one could parse for the active one ...
[23:23:42] *** Joins: MarsIronPI (~MarsIronP@107.117.175.97)
[23:23:54] <kagevf> I don't think your elisp actually determines which connection is the active one, but maybe it would be easy if it's possible to grab the same list used to render *slime-connections*
[23:24:02] <lisp123> kagevf: Have a look at the SLIME code and see if its possible, its pretty well documented
[23:24:10] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[23:24:30] <kagevf> I haven't gotten into elisp much at all, so sorry if these are obvious questions
[23:24:53] <kagevf> hmmm ... maybe there's a command to get it already ...
[23:24:56] <lisp123> kagevf: Yes, but I think its relatively trivial (that was the error), your buffer-list variable in Emacs should be already sorted so that the active one will be the earliest (so basically remove the SORT in the code above)
[23:26:18] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[23:26:56] <lisp123> No worries, I think learning SLIME is a good thing. I will send you the updated code in a few days in any case, glad you brought it up because this way it can be made implementation independent too (the earlier one was hardcoded to SBCL)...will think of the best way to do it
[23:28:01] *** Quits: MarsIronPI (~MarsIronP@107.117.175.97) (Ping timeout: 252 seconds)
[23:28:59] <kagevf> lisp123: oh, really? oh, nice ... thank you for the snippet .... I'll play around with it and see how far I can get :)
[23:30:07] <kagevf> lisp123: and looking forward to that update ... that would be a nice way to take something you've been experimenting with and get it quickly into your actual code buffer ... great idea!
[23:31:44] <lisp123> kagevf: Great :) Enjoy! Yes, I'm loving this function. Now I want to add 'clear Slime REPL' as well and some other ones so that no more switching to the REPL and back
[23:33:26] <kagevf> lisp123: btw, I just checked the output of (loop for buffer in (buffer-list) collect (buffer-name buffer)), and it appears to sort by most recently accessed
[23:34:19] <kagevf> so, IOW, if I have to slime buffers opened 1 and 2, and 1 is the active one and 2 is some other random one, if I access slime-2 then run that code, slime-2 will be at the top
[23:34:30] <kagevf> * I have 2 slime buffers
[23:35:45] <kagevf> my goal would be to have the repl that's connected to C-c C-z (slime-switch-to-output-buffer)
[23:36:35] <kagevf> even if it's not the slime repl you last accessed
[23:37:06] <lisp123> Lets chat on #slime to avoid adding too much elisp here :)
[23:39:12] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[23:43:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[23:49:47] *** Quits: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net) (Quit: Client closed)
[23:50:24] <pjb> rotateq: and  (list #C(1/2 3/4) 'and #C(#7r10/3 #12rA/5)) #| --> (#C(1/2 3/4) and #C(7/3 2)) |#
[23:51:08] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 250 seconds)
[23:52:25] *** Joins: frgo (~frgo@p200300deef0cee00b0ea14751ba29eda.dip0.t-ipconnect.de)
[23:55:51] *** Quits: pve (~pve@178-55-21-169.bb.dnainternet.fi) (Quit: leaving)
[23:56:06] <rotateq> yes
[23:57:14] *** Quits: frgo (~frgo@p200300deef0cee00b0ea14751ba29eda.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
