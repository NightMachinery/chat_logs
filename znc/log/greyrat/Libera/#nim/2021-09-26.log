[00:00:09] <FromDiscord> <haxscramper> `proc print1(s: static[string]) {.importcpp: "print1<#>()".}` is not valid as well
[00:03:49] <FromDiscord> <dom96> https://nim-lang.org/docs/manual.html#importcpp-pragma-importcpp-for-procs
[00:04:10] <FromDiscord> <dom96> works but it doesn't
[00:04:12] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3zYd
[00:04:18] <FromDiscord> <dom96> (edit) 
[00:04:36] <FromDiscord> <haxscramper> `'N` works for types, but we need values
[00:04:48] <FromDiscord> <haxscramper> The only way to get type-as-value is to use `S: static[string]`
[00:05:00] <FromDiscord> <haxscramper> `arg: static[string]` is still just a parameter value
[00:05:31] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[00:06:03] <FromDiscord> <haxscramper> This would only work for procedures, since it is not possible to `{.emit.}` in type declaration
[01:43:04] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 265 seconds)
[01:50:47] <FromDiscord> <RC> Hello, I wanted to wrap a CPP object, more specifically a `ifstream` object. How do I generate the constructor so that it can be accessed from Nim?
[02:11:34] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[02:43:51] *** Quits: max22- (~maxime@2a01cb0883359800cacb285e285b0a86.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:16:44] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[04:17:42] *** Gustavo6046 is now known as gusisabad
[04:17:51] *** gusisabad is now known as Gustavo6046
[04:33:51] *** Joins: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[04:34:21] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 250 seconds)
[05:25:49] *** Joins: neurocyte01328 (~neurocyte@212.232.84.178)
[05:25:49] *** Quits: neurocyte01328 (~neurocyte@212.232.84.178) (Changing host)
[05:25:49] *** Joins: neurocyte01328 (~neurocyte@user/neurocyte)
[05:28:04] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:28:04] *** neurocyte01328 is now known as neurocyte0132
[05:41:56] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891507350412882000/unknown.png
[05:42:02] <FromDiscord> <NullCode> whats a distinct string...
[05:42:16] <FromDiscord> <NullCode> https://nim-by-example.github.io/types/distinct↵interesting
[05:46:14] <FromDiscord> <Elegantbeef> Distinct is a fancy tool
[05:46:24] <FromDiscord> <Elegantbeef> Super easy to understand but can do some pretty nifty stuff
[05:47:21] <FromDiscord> <NullCode> yeah i can't think of a use case for this though
[05:47:25] <FromDiscord> <NullCode> (edit) "yeah ... i" 03added "but"
[05:48:05] <FromDiscord> <Elegantbeef> I assume the API gives you DllContent from a function which is why it's distinct so you cannot accidently mutate it
[05:48:25] <FromDiscord> <NullCode> no I need to supply the DllContent myself
[05:48:35] <FromDiscord> <NullCode> which is why I'm confused
[05:48:53] <FromDiscord> <NullCode> how does someone enter binary on a string
[05:49:07] <FromDiscord> <NullCode> in python you use bytes("str", 'utf-8')
[05:49:12] <FromDiscord> <NullCode> (edit) "bytes("str", 'utf-8')" => "`bytes("str", 'utf-8')`"
[05:49:18] <FromDiscord> <NullCode> (edit) "how does someone enter binary on a ... string" 03added "distinct"
[05:50:09] <FromDiscord> <Elegantbeef> `DllContent(yourString)`
[05:50:46] <FromDiscord> <NullCode> oh.
[05:50:53] <FromDiscord> <NullCode> well sorry for being a total idiot
[05:51:12] <FromDiscord> <NullCode> i wonder how the binary should look
[05:51:58] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:52:33] <FromDiscord> <Elegantbeef> What do you mean?
[05:54:35] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891510532618731580/unknown.png
[05:54:38] <FromDiscord> <NullCode> oh
[05:54:41] <FromDiscord> <NullCode> I'm sorry I get it now
[05:54:50] <FromDiscord> <NullCode> needed to dig through some examples
[05:54:59] <FromDiscord> <NullCode> you don't type in the raw binary
[05:55:08] <FromDiscord> <NullCode> you just type the name of the dll
[05:55:48] <FromDiscord> <NullCode> (for context: I'm talking about memlib https://khchen.github.io/memlib/)
[05:57:16] <FromDiscord> <Elegantbeef> something something strings are raw binary data
[06:00:16] <FromDiscord> <NullCode> yeah I've been using python for too long
[06:00:18] <FromDiscord> <NullCode> i needed this break
[06:27:29] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891518811826712576/unknown.png
[06:27:33] <FromDiscord> <NullCode> yeah well isn't that easy
[06:27:44] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[06:27:58] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[06:28:10] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891518921243508756/unknown.png
[06:30:21] <FromDiscord> <Elegantbeef> Well is pcre32 next to your file?
[06:31:33] <FromDiscord> <NullCode> I'm trying to embed pcre inside the exe
[06:31:40] <FromDiscord> <NullCode> it ofc works when it's next to it
[06:32:01] <FromDiscord> <Elegantbeef> Well i more just mean did it load the pcre32
[06:32:17] <FromDiscord> <NullCode> i don't know if it did load
[06:32:26] <FromDiscord> <NullCode> theres no error traceback or anything
[06:32:35] <FromDiscord> <NullCode> just the standard "could not load blablabla"
[06:32:48] <FromDiscord> <Elegantbeef> well you can do `static: echo dll.string.len`
[06:34:07] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891520482208264242/unknown.png
[06:34:11] <FromDiscord> <NullCode> with pcre32 next to it
[06:34:24] <FromDiscord> <NullCode> ok if i remove pcre
[06:34:27] <FromDiscord> <NullCode> it's still the same
[06:34:34] <FromDiscord> <NullCode> so the dll is there
[06:35:09] <FromDiscord> <NullCode> (edit) "" => "with `pcre32.dll` next to it"
[06:35:26] <FromDiscord> <NullCode> now that i think about it
[06:35:37] <FromDiscord> <NullCode> there should be a LibraryError exception if the dll wasnt loaded
[06:35:39] <FromDiscord> <NullCode> which isn't there
[06:35:55] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891520933074985020/unknown.png
[06:36:11] <FromDiscord> <NullCode> (edit) "pcre" => "pcre, it's still the same"
[06:36:24] <FromDiscord> <NullCode> (edit) "now" => "_ _↵now"
[06:38:12] <FromDiscord> <NullCode> which means it's loaded too
[06:38:17] <FromDiscord> <NullCode> then whats happening ;-;
[06:38:27] <FromDiscord> <Elegantbeef> Fuck if i know
[06:38:34] <FromDiscord> <NullCode> yeah this is shit
[06:38:55] <FromDiscord> <NullCode> god fucking damn i didn't know impure libs were such a hassle
[06:39:16] <FromDiscord> <Elegantbeef> They're not that bad
[06:39:33] <FromDiscord> <NullCode> trying to get everything into 1 file sucks though
[06:40:39] <FromDiscord> <NullCode> I've been at it since yesterday
[06:42:30] <FromDiscord> <NullCode> ohhhhhhhhh i see now
[06:42:40] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891522630170075187/unknown.png
[06:43:20] <FromDiscord> <NullCode> this is the standard dll not found for nim exes
[06:43:37] <FromDiscord> <NullCode> so if i can just disable this, i have a shot at getting a working executable
[06:48:32] <FromDiscord> <Yardanico> In reply to @NullCode "this is the standard": The way you're loading the DLL won't work if you want to use the re or nre modules. Instead link PCRE statically
[06:48:59] <FromDiscord> <NullCode> thats unfortunate man
[06:49:10] <FromDiscord> <NullCode> guess ill have to compile pcre then
[06:49:28] <FromDiscord> <Yardanico> You can also use the pure Nim regex library
[06:49:37] <FromDiscord> <NullCode> I'm keeping that as last resort
[06:49:41] <FromDiscord> <Yardanico> https://github.com/nitely/nim-regex
[06:49:44] <nrds> <12R2D299> 4GitHub: 7"Pure Nim regex engine. Guarantees linear time matching"
[06:49:54] <FromDiscord> <NullCode> yeah this
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:42] <FromDiscord> <NullCode> aight so here's problem with pure regex
[07:41:06] <FromDiscord> <NullCode> i wanted to practice with a file which has weird characters
[07:41:21] <FromDiscord> <NullCode>  https://media.discordapp.net/attachments/371759389889003532/891537398238969866/unknown.png
[07:41:41] <FromDiscord> <NullCode> and it seems regex lib doesn't like this kinda thing
[07:41:48] <FromDiscord> <NullCode> whereas `re` worked just fine
[07:41:59] <FromDiscord> <NullCode> (edit) "regex lib" => "`regex`"
[07:42:09] <FromDiscord> <Rika> that is not very precise is it
[07:42:13] <FromDiscord> <Rika> "not like" how?
[07:42:23] <FromDiscord> <NullCode> what
[07:42:53] <FromDiscord> <Rika> how does regex not like that?
[07:42:58] <FromDiscord> <Rika> what issues are you getting
[07:43:02] <FromDiscord> <Rika> precisely what
[07:43:10] <FromDiscord> <NullCode> sent a code paste, see https://play.nim-lang.org/#ix=3zZl
[07:43:40] <FromDiscord> <NullCode> (edit) "https://play.nim-lang.org/#ix=3zZl" => "https://play.nim-lang.org/#ix=3zZm"
[07:44:00] <FromDiscord> <Rika> disable unicode
[07:44:09] <FromDiscord> <NullCode> how
[07:44:40] <FromDiscord> <Rika> (?-u) at the start of the regex?
[07:44:45] <FromDiscord> <Rika> prolly
[07:45:35] <FromDiscord> <NullCode> yep worked flawlessly lmfao
[07:45:36] <FromDiscord> <NullCode> thanks man
[07:45:44] <FromDiscord> <NullCode> now i can use pure regex lib
[07:46:27] <FromDiscord> <NullCode> btw can you gimme a good place to learn all the regex syntax
[07:46:32] <FromDiscord> <NullCode> (edit) "btw can you gimme a good place to learn all the regex syntax ... " 03added "things"
[07:47:07] <FromDiscord> <Rika> https://nitely.github.io/nim-regex/regex.html
[07:47:18] <FromDiscord> <NullCode> this has everything?
[07:47:23] <FromDiscord> <Rika> check it
[07:47:27] <FromDiscord> <NullCode> yeah i know
[07:47:37] <FromDiscord> <NullCode> but is it all there is to regex
[07:47:48] <FromDiscord> <NullCode> (edit) "is it" => "does this place have"
[07:47:53] <FromDiscord> <NullCode> (edit) "but does this place have all there is to regex ... " 03added "syntax"
[07:47:54] <FromDiscord> <Rika> "regex" is not a single language
[07:48:04] <FromDiscord> <NullCode> it's an expression yes
[07:48:10] <FromDiscord> <Rika> no
[07:48:12] <FromDiscord> <Rika> each regex library have a subtly different syntax
[07:48:27] <FromDiscord> <NullCode> oh
[07:48:30] <FromDiscord> <Rika> so yes this is all to regex for this regex library
[07:48:36] <FromDiscord> <NullCode> i see now
[07:48:42] <FromDiscord> <NullCode> so not every regex syntax is univeral
[07:48:44] <FromDiscord> <NullCode> (edit) "univeral" => "universal"
[07:48:46] <FromDiscord> <NullCode> damn it
[07:48:47] <FromDiscord> <Rika> for `re` you would search "pcre regex"
[07:48:54] <FromDiscord> <Rika> for vim it's "vim regex"
[07:48:59] <FromDiscord> <Rika> for this its the docs of this
[07:49:04] <FromDiscord> <Rika> no
[07:49:11] <FromDiscord> <Rika> thats one pain point of regex
[07:49:23] <FromDiscord> <NullCode> yeah
[07:49:57] <FromDiscord> <NullCode> (edit) 04removed "not every" | "is" => "isn't"
[08:23:15] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[08:46:07] <FromDiscord> <ryati> hi, i am brand new to Nim. I was installed a few packages with `nimble install ...` and it seems to just add them in the global space. Is there a way to have seperate nim environments, similar to virtualenv with python??
[08:47:44] <FromDiscord> <Elegantbeef> You use a nimble file and add the version requirements to it, and it should do similar, but still "global"
[08:49:11] <FromDiscord> <Rika> no
[09:47:05] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:04:44] <FromDiscord> <pietroppeter> Never tried it but shouldn’t a nimbledeps folder do the trick? https://github.com/nim-lang/nimble#nimbles-folder-structure-and-packages
[10:04:47] <nrds> <12R2D299> 4GitHub: 7"Package manager for the Nim programming language."
[10:06:51] <FromDiscord> <Rika> Ah that’s a relatively new feature on the broken version of nimble I believe 😛
[10:07:17] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[10:13:28] <FromDiscord> <pietroppeter> Changelog says it was added in 0.12 release one year ago
[10:14:03] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[10:15:09] *** Joins: xet7 (~xet7@user/xet7)
[10:16:10] <FromDiscord> <enthus1ast> Do it the right way then and link the libraries to your executable↵(@NullCode)
[10:17:06] <FromDiscord> <NullCode> enthusiast got it fixed
[10:17:15] <FromDiscord> <NullCode> by using pure regex lib
[10:17:15] <FromDiscord> <enthus1ast> Ah ok
[10:17:25] <FromDiscord> <enthus1ast> Yes
[10:17:29] <FromDiscord> <NullCode> and disabling unicode
[10:17:41] <FromDiscord> <NullCode> last time it wasnt working cuz unicode was on
[10:17:53] <FromDiscord> <NullCode> (edit) "enthusiast" => "enthusiast," | "enthusiast,got it fixed ... " 03added "by using pure regex lib"
[10:17:54] <FromDiscord> <enthus1ast> Ah i see, good to know
[10:18:01] <FromDiscord> <NullCode> indeed
[10:21:25] <FromDiscord> <enthus1ast> I've used NSIS to distribute and install apps on windows with their dependencies. Then you also have a clean installer/uninstaller etc.
[10:31:01] <FromDiscord> <NullCode> nsis is used to create installers right?
[10:32:44] <FromDiscord> <NullCode> yeah just checked
[10:49:51] <FromDiscord> <enthus1ast> yes
[10:50:10] <FromDiscord> <enthus1ast> at least for basic stuff the installers language is quite simple
[11:55:49] <FromDiscord> <Rika> when should i use seq[byte] over string in a cryptography context?
[11:56:48] <FromDiscord> <enthus1ast> Think it does not really matter. Depends on your input / output datatypes
[11:57:44] <FromDiscord> <Rika> i ask because its a fucking pain that you cant directly convert between string <-> seq[byte] and need to cast
[11:57:47] <FromDiscord> <enthus1ast> Mratsim lectured me once that "use fitting datatypes" , though
[12:01:23] <FromDiscord> <enthus1ast> Which crypto do you use?
[12:01:40] <FromDiscord> <Rika> libsodium
[12:04:58] <FromDiscord> <cabboose> Common to use seq char
[12:05:15] <FromDiscord> <cabboose> Char reflects bytes and can be converted into string quite easily
[12:06:12] <FromDiscord> <Rika> but char doesnt tell me "this is a byte"
[12:07:02] <FromDiscord> <cabboose> No it doesn’t this is true
[12:07:23] <FromDiscord> <cabboose> In what way do you want to know it’s a byte though?
[12:08:24] <FromDiscord> <cabboose> I mean a byte is just 8 bits so anything can represent a byte for you
[12:10:06] <FromDiscord> <Rika> well in the context i mean it is specifically not a character
[12:10:14] <FromDiscord> <Rika> it is a byte, 0 to 255
[12:19:40] <FromDiscord> <cabboose> Sounds like anything that is represented by a byte can do that for you no?
[12:19:48] <FromDiscord> <cabboose> Including a char
[12:19:57] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[12:20:39] <FromDiscord> <leorize> i'd recommend openArray[byte] or seq[byte] for cases where you're dealing with raw data
[12:22:04] <FromDiscord> <leorize> char vs byte isn't about bits, it's about the semantic of the data
[12:23:34] <FromDiscord> <cabboose> Fair 😅
[12:24:25] <FromDiscord> <Elegantbeef> Personally i represent all my data as `set[0..sizeOf(desiredType)]`
[12:24:55] <FromDiscord> <haxscramper> time to `raise Defect`
[12:25:28] <FromDiscord> <Elegantbeef> Return to defect
[12:25:37] <FromDiscord> <Yardanico> return to nimrod
[12:36:41] *** Quits: ehmry (~quassel@2a03:3b40:fe:ab::1) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:37:33] *** Joins: ehmry (~quassel@2a03:3b40:fe:ab::1)
[14:51:45] <FromDiscord> <NullCode> https://stackoverflow.com/questions/33872103/nim-re-regex-modul-is-not-filling-match-group
[14:51:53] <FromDiscord> <NullCode> damn i found a q by enthusiast
[14:52:02] <FromDiscord> <NullCode> seems you ppl have been at it for quite a while
[15:01:12] <FromDiscord> <enthus1ast> today i would not try to use regex for this
[15:01:25] <FromDiscord> <enthus1ast> rather do it by hand
[15:01:56] <FromDiscord> <Rika> This kind of parsing is not best done with regex
[15:02:05] <FromDiscord> <Rika> Use something else (maybe peg?)
[15:02:43] <FromDiscord> <Rika> Oh you asked it enthusiast lol
[15:02:57] <FromDiscord> <enthus1ast> yeah back in 2015 or so
[15:03:46] <FromDiscord> <enthus1ast> the last few times i tried to use the xml/htmlparser module it failed on me... ↵parsing wild html is still challengin in nim
[15:04:17] <FromDiscord> <Rika> Well it's very loosely defined, html
[15:06:13] <FromDiscord> <enthus1ast> maybe we can wrap a good library that can repair(?) html or one could use pythons beautiful soup
[15:07:04] <NimEventer> New thread by Mantielero: Help needed - issue wrapping header with c2nim, see https://forum.nim-lang.org/t/8460
[15:07:50] <FromDiscord> <enthus1ast> https://www.html-tidy.org/    libtidy
[15:08:38] <FromDiscord> <enthus1ast> after html tidy did its thing there should be no problems to use nims xml/html parser
[15:08:50] <FromDiscord> <Rika> You mean normalise
[15:08:55] <FromDiscord> <enthus1ast> yeah
[15:10:32] <FromDiscord> <Rika> Sounds good I guess
[15:10:35] <FromDiscord> <Rika> Now to wrap it
[15:10:50] <FromDiscord> <enthus1ast> yeah would try pmunchs new lib
[15:11:00] <FromDiscord> <enthus1ast> or so
[15:11:41] <FromDiscord> <Rika> Which
[15:11:46] <FromDiscord> <Rika> Oh
[15:11:47] <FromDiscord> <Rika> That
[15:11:50] <FromDiscord> <enthus1ast> futhark
[15:11:55] <FromDiscord> <Rika> Eh if you think it's a good idea sure
[15:12:01] <FromDiscord> <enthus1ast> or maybe its interface is so simple that i can just wrap it by hand
[15:12:12] <FromDiscord> <Rika> Personally would use c2nim or something instead but
[15:12:24] <FromDiscord> <enthus1ast> yeah just want to play with this lib
[15:12:55] <FromDiscord> <xflywind> https://github.com/PMunch/futhark/issues/1
[15:14:53] <FromDiscord> <enthus1ast> think he missed clang.lib?
[15:14:53] <FromDiscord> <enthus1ast> never have done much with clang
[15:14:54] <FromDiscord> <enthus1ast> have a long list of stuff i wanna do, and to less time...
[15:26:11] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:41:15] <NimEventer> New thread by Icedquinn: Ported hashing routines: blake2s, blake2b, xxhash, see https://forum.nim-lang.org/t/8461
[16:36:58] *** Joins: arkurious (~arkurious@user/arkurious)
[16:49:33] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:27:08] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[17:27:21] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[17:27:37] *** Joins: max22- (~maxime@2a01cb0883359800493cb2ff7652c33a.ipv6.abo.wanadoo.fr)
[17:32:20] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[17:45:22] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 260 seconds)
[17:57:34] *** pch_ is now known as kinkinkijkin
[18:02:04] *** Parts: agander_m (sid407952@id-407952.tinside.irccloud.com) ()
[18:49:22] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[18:51:13] *** Joins: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de)
[19:13:55] *** Quits: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net) (Quit: leaving)
[19:34:23] *** Quits: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de) (Quit: leaving)
[19:50:50] *** Joins: KainAlive (~user@ip5f5bd0bf.dynamic.kabel-deutschland.de)
[19:59:44] <KainAlive> Hi, Nim noob here...I have a question. How do macros differ from functions and when do I use a macro instead of a function? I honestly don't quite understand it.
[20:01:17] <FromDiscord> <Rika> think of macros as functions that make code
[20:01:50] <FromDiscord> <enthus1ast> and they run on compiletime
[20:09:02] <KainAlive> Oh I see
[20:10:13] <KainAlive> So what would be a common usecase for a macro? 
[20:11:35] <FromDiscord> <NullCode> you know what, i had the same question
[20:12:16] <FromDiscord> <enthus1ast> you can transform or generate code↵(<@709044657232936960_=4bain=41live=5b=49=52=43=5d>)
[20:17:32] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3A3K
[20:18:53] <FromDiscord> <enthus1ast> and all of this at compile time. Then when the compiler(s) done their magic, there is an executable which has minimal runtime costs to execute given template
[20:20:41] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[20:21:43] <FromDiscord> <Rika> usually optimisations or nice looking languages-in-languages
[20:21:55] <FromDiscord> <Yardanico> so-called DSLs
[20:22:00] <FromDiscord> <Rika> like you can define a custom language in nim (as long as it follows nims syntax as well)
[20:22:07] <FromDiscord> <Rika> yeah i was avoiding saying "DSL"
[20:24:07] <KainAlive> Oh okay...so I could use a macro to f.e convert javascript code to native nim code? 
[20:24:13] <skrzyp> hello, anyone knows if there's any sort of simple 2D GUI library which can be directly rendered onto in-memory 2D framebuffer to be casted on fbdev? I need to prepare very tiny tool with single listbox and few dialogs for embedded linux device. At first I thought about imgui/nuklear, but they somewhat require GL context which I don't really want to open on such device 
[20:24:52] <FromDiscord> <Rika> In reply to @KainAlive "Oh okay...so I could": well not for that case since javascript and nim do not share the same syntax rules
[20:25:23] <FromDiscord> <Rika> what's wrong with GL context?
[20:25:37] <FromDiscord> <Rika> what embedded device are we talking about
[20:25:44] <FromDiscord> <Rika> is it too weak for GL? hm
[20:25:48] <FromDiscord> <enthus1ast> you could write a (extremely huge) macro that parses javascript, and output nim, sure↵(@Rika)
[20:25:58] <skrzyp> at first I really thought about changing the linux VT font to reasonably large one and switching color palette, but it seems that throwing raw VT on user seems to be unacceptable
[20:26:12] <FromDiscord> <Rika> In reply to @enthus1ast "you could write a": not directly on nim code, has to be wrapped in string
[20:26:21] <FromDiscord> <enthus1ast> yes
[20:26:48] <FromDiscord> <Gumber> In reply to @skrzyp "hello, anyone knows if": ummm
[20:26:55] <FromDiscord> <Gumber> there is....
[20:26:55] <skrzyp> @Rika: the device is [redacted] and even if there are multiple targets (including regular x86 one for testing) there's no guarantee we would have OpenGL on every of these
[20:27:05] <FromDiscord> <Gumber> https://github.com/ryankurte/micro-gui
[20:27:08] <nrds> <12R2D299> 4GitHub: 7"Minimal GUI framework for Embedded Systems"
[20:27:24] <FromDiscord> <Gumber> but I don't know if it has a hard dependency on any hardware accelerated graphics API
[20:27:38] <KainAlive> Well then js was a bad example...but I could use a macro to extend nim's existing syntax...f.e to use the "function" keyword instead of "proc"
[20:28:05] <FromDiscord> <Gumber> I mean we already have `func`
[20:28:14] <FromDiscord> <Gumber> but yes you can invent syntax with macros
[20:28:26] <FromDiscord> <Gumber> there are semantic differences b/w `func` and `proc` though
[20:28:35] <FromDiscord> <Gumber> and introducing `function` is a really really bad idea
[20:28:50] <FromDiscord> <Gumber> especially if you think anyone else is ever going to read your code
[20:29:12] <FromDiscord> <Gumber> you can also just overload operators or use templates for code substitution with or without hygeine
[20:29:14] <FromDiscord> <enthus1ast> macros operate on and generate Nim's AST ( https://en.wikipedia.org/wiki/Abstract_syntax_tree )
[20:29:33] <FromDiscord> <Gumber> and they obv execute at compile time and not runtime
[20:30:10] <FromDiscord> <Gumber> and yeah Nim can already seamlessly interop with JS, C, C++ and Obj-C
[20:30:21] <FromDiscord> <Gumber> C++ is the most dicey just because generating correct C++ is hard
[20:30:30] <FromDiscord> <Gumber> way harder than C and still more difficult than Obj-C
[20:30:57] <FromDiscord> <Gumber> and the compiler also has backends for all of those languages so you can compile Nim code to them
[20:33:40] <KainAlive> Okay but I could in theory extend Nims syntax...even tho it could be a bad idea. That's pretty cool :D
[20:34:40] <FromDiscord> <enthus1ast> ...the device is [redacted] an.... ?
[20:34:45] <FromDiscord> <enthus1ast> what is redacted?
[20:35:59] <KainAlive> And I can modify existing code...but what would be a usecase for changing exisisting nim code on compile time? 
[20:36:19] *** Joins: bulek (~bulek@2804:1b3:6080:e9c0:b052:40bf:a855:3920)
[20:36:25] <FromDiscord> <enthus1ast> you can have very dense syntax that expand to very much code
[20:36:47] <FromDiscord> <Rika> In reply to @KainAlive "Okay but I could": you cant extend nim's syntax with macros
[20:37:04] *** Quits: bulek (~bulek@2804:1b3:6080:e9c0:b052:40bf:a855:3920) (Client Quit)
[20:37:12] <FromDiscord> <Rika> you can make custom languages but as ive said they have to conform to nims syntax
[20:37:35] <FromDiscord> <Rika> In reply to @KainAlive "And I can modify": optimisation
[20:41:28] <FromDiscord> <Arathanis> In reply to @Rika "you cant extend nim's": wait, im pretty sure you can do exactly this?
[20:41:41] <FromDiscord> <Rika> In reply to @Arathanis "wait, im pretty sure": prove it.
[20:41:53] <FromDiscord> <Arathanis> the json library `%` operator
[20:42:08] <FromDiscord> <Arathanis> invalid nim syntax goes in, as long as the macro emits valid nim syntax you are fine
[20:42:09] <FromDiscord> <Rika> {:} is valid syntax
[20:42:16] <FromDiscord> <Rika> its invalid semantics
[20:42:19] <FromDiscord> <Rika> but valid syntax
[20:44:48] <FromDiscord> <Arathanis> oh i think i see what you are saying
[20:45:18] <FromDiscord> <Rika> https://nim-lang.org/docs/manual.html#macros `While macros enable advanced compile-time code transformations, they cannot change Nim's syntax.`
[20:45:44] <FromDiscord> <Arathanis> you always have to get AST nodes, which means its syntactically correct, you can't add new tokens or node types for example, but it can be meaningless semantically
[20:45:54] <FromDiscord> <Rika> yes
[20:46:03] <FromDiscord> <Arathanis> as long as the semantics are accurate when it comes out of the macro
[20:46:38] <FromDiscord> <Arathanis> too many language design words that start with s
[20:47:06] <FromDiscord> <dain> In reply to @KainAlive "And I can modify": reducing boilerplate, writing DSLs
[20:47:16] <FromDiscord> <dain> cleaner expression of the problem
[21:19:47] <FromDiscord> <Gumber> yeah sorry I should have been more clear and what I said was a misnomer
[21:20:00] <FromDiscord> <Gumber> you cant invent syntax but you can extend it
[21:20:13] <FromDiscord> <Gumber> but it still has to be valid Nim syntax
[21:20:37] <FromDiscord> <Gumber> so you can't like turn `proc` into `function` which you shouldn't do anyway
[21:20:39] <FromDiscord> <Gumber> because you break semantics
[21:21:07] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3A44
[21:21:12] <FromDiscord> <Gumber> which would be dumb because a template would be way better or just writing the proc signature or whatever
[21:21:23] <FromDiscord> <Gumber> but you're never going to turn `proc foo()` into `function foo()` via a macro
[21:21:26] <FromDiscord> <Gumber> or a template or anything
[21:21:42] <FromDiscord> <Gumber> in fact it's good that the language doesn't let you because if it did you'd break semantics
[21:28:20] <KainAlive> Okay, thank you guys for the explanations, I think I kinda understand macros now :D
[21:30:09] <FromDiscord> <deech> Creating a simple `UncheckedArray` of strings with `--gc:arc`  and the latest `devel` seems to result in memory corruption, am I doing something wrong? https://play.nim-lang.org/#ix=3A45
[21:31:32] <FromDiscord> <enthus1ast> must you not also alloc mem for the string?
[21:32:46] <FromDiscord> <deech> At the end of the `expandArc` it's destroying the memory associated with the string every time so I'm not sure why that's happening.
[21:33:58] *** Quits: KainAlive (~user@ip5f5bd0bf.dynamic.kabel-deutschland.de) (Quit: leaving)
[21:34:49] <FromDiscord> <enthus1ast> \~must you not also alloc mem for the cstring?\~
[21:41:09] <FromDiscord> <deech> Is there an existing function to convert a Nim string to a cstring? I thought `$` did that.
[21:42:20] <FromDiscord> <Yardanico> $ is a stringification operator, it case of a string it's a nop
[21:42:27] <FromDiscord> <Yardanico> $ on a string returns the string itself
[21:42:46] <FromDiscord> <Yardanico> https://nim-lang.org/docs/dollars.html#%24%2Cstring
[21:42:48] <FromDiscord> <Yardanico> try cstring(s)
[21:49:13] <FromDiscord> <deech> I did, and there's still memory corruption, `valgrind` output is at the end: https://play.nim-lang.org/#ix=3A4b
[21:53:13] <FromDiscord> <Yardanico> I'm not sure if doing that is actually safe, Nim might as well be freeing the string's memory because you're trying to deal with memory manually and automatically at the same time
[21:53:52] <FromDiscord> <Yardanico> @deech "Even though the conversion is implicit, it is not safe: The garbage collector does not consider a cstring to be a root and may collect the underlying memory. However, in practice, this almost never happens as the GC considers stack roots conservatively. One can use the builtin procs GC_ref and GC_unref to keep the string data alive for the rare cases where it does not work."
[21:54:05] <FromDiscord> <Yardanico> ofc the stack root thing doesn't apply to ARC/ORC so with them the GC might always collect strings
[21:54:18] <FromDiscord> <Yardanico> you can try using GC_ref on strings if you really want that code to work
[21:55:09] <FromDiscord> <Yardanico> ah right you can't GC_ref a string with arc
[21:59:43] <FromDiscord> <deech> Is there a std lib function to copy a nim string to a cstring?
[22:02:00] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3A4h
[22:02:46] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3A4i
[22:04:28] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3A4k
[22:05:37] <FromDiscord> <Yardanico> yes that will work
[22:05:46] <FromDiscord> <Yardanico> @deech
[22:05:56] <FromDiscord> <Yardanico> just not sure why would you need to return ptr UncheckedArray in your own code
[22:06:23] <FromDiscord> <Yardanico> if it's related to C FFI, you can just pass normal Nim arrays to C functions that expect a pointer to the start of the array
[22:06:33] <FromDiscord> <Yardanico> of course the array will have to be filled with cstrings anyway
[22:07:13] <FromDiscord> <deech> @enthus1ast Should it be `alloc(foo.len+1)`?
[22:07:16] <FromDiscord> <Yardanico> no
[22:07:20] <FromDiscord> <Yardanico> well actually yes
[22:07:21] <FromDiscord> <Yardanico> XD
[22:07:29] <FromDiscord> <enthus1ast> \:)
[22:07:36] <FromDiscord> <Yardanico> those damn null terminators
[22:08:09] <FromDiscord> <Yardanico> yeah just replace foo.len with foo.len+1 in both places, since nim strings have a null terminator in their data too
[22:17:56] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[22:19:12] <FromDiscord> <deech> Also FYI you have to use `unsafeAddr` for some reason ...
[22:19:30] *** Joins: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de)
[22:19:41] *** Quits: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de) (Client Quit)
[22:21:57] <FromDiscord> <Dylan> How do you set/get a property of JsObject?
[22:22:01] <FromDiscord> <Dylan> in the jsffi package
[22:22:19] <FromDiscord> <treeform> is there a way to ask nim to issue a hint/warning when I am using var... but let will be fine? I want to use more lets in my code but some time i use var and forget about it.
[22:25:22] *** Joins: KainAlive (~KainAlive@2a02:8109:bd40:4cc4:cb7:65e:1ab8:85d0)
[22:26:04] *** Quits: KainAlive (~KainAlive@2a02:8109:bd40:4cc4:cb7:65e:1ab8:85d0) (Client Quit)
[22:29:33] <PMunch> @treeform, not that I know..
[22:30:11] <PMunch> Would you want it for every var, or just a var that you don't actually modify after setting it initially?
[22:35:24] <FromDiscord> <Gumber> I always just start out with `let`
[22:35:35] <FromDiscord> <Gumber> unless I know I need to pass a pointer around or mutate it
[22:35:52] <FromDiscord> <Gumber> and then if can't predict that ahead of time I'll change it to a var
[22:36:09] <FromDiscord> <Gumber> but I think just defaulting to `let` will help you with that @treeform
[22:36:47] <FromDiscord> <Gumber> I just think of `var` in my head like `pointer`
[22:36:54] <FromDiscord> <Gumber> and `let` like `const`
[22:37:00] <FromDiscord> <Gumber> in  `C/C++`
[22:37:13] <FromDiscord> <Gumber> (edit) "`pointer`" => "`ptr`"
[22:44:26] <FromDiscord> <treeform> In reply to @PMunch "Would you want it": well only when its valid to turn var into a let
[22:44:52] <FromDiscord> <haxscramper> https://github.com/nim-lang/website/pull/301
[22:45:16] <FromDiscord> <treeform> In reply to @Gumber "but I think just": I am trying but I am only human.
[22:46:24] <nrds> <06Prestige99> I guess the alternative is, always use let and change it where you need it
[22:46:42] <FromDiscord> <Gumber> yeah I mean that's what I mean
[22:46:44] <FromDiscord> <Gumber> like just start with let
[22:46:51] <nrds> <06Prestige99> brute force method, sed your files to replace all var with let and fix it
[22:46:53] <FromDiscord> <Gumber> it takes practice and I know you're only human Treeform 🙂
[22:46:57] <FromDiscord> <Gumber> xD
[22:47:58] <PMunch> Sounds like a cool feature to have though
[22:48:07] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c922:9c5f:802e:695a)
[22:50:32] <FromDiscord> <Gumber> yeah
[22:50:50] <FromDiscord> <Gumber> I just think there are bigger fish to fry when it comes to static analysis / compiler features
[22:50:58] <FromDiscord> <Gumber> but it would def be a good RFC
[22:56:22] <FromDiscord> <deech> Where can I learn more about the new style concepts?
[22:58:08] <FromDiscord> <deech> Ah I see: https://github.com/nim-lang/Nim/pull/15251
[23:01:02] <nrds> <06Prestige99> https://i.imgur.com/3d2pIb6.png lol
[23:39:08] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[23:44:52] <PMunch> Is there a good way to handle `const char *` in Nim?
[23:49:27] <FromDiscord> <haxscramper> Fundamentally no, this is not possible
[23:49:46] <FromDiscord> <haxscramper> Technically there might be some workarounds
[23:50:34] <FromDiscord> <haxscramper> But there is no concept of 'const' in nim like there is in C, there are only mutable/immutable variables
[23:50:36] <FromDiscord> <haxscramper> So it is very tricky
