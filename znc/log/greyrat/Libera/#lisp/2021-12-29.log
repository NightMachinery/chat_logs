[00:01:07] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[00:05:31] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[00:08:20] *** Joins: ASau (~user@lmpc.drb.insel.de)
[00:13:06] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:18:42] *** Quits: ASau (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[00:27:52] *** Quits: xsperry (~xs@user/xsperry) ()
[00:31:01] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 240 seconds)
[00:43:43] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:48:29] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[00:48:35] *** Joins: monkey_ (~user@190.104.116.153)
[00:53:12] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[00:55:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:57:50] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[01:03:43] *** Joins: elflng (~elflng@5.28.137.182)
[01:11:48] *** Joins: monkey_ (~user@190.104.116.153)
[01:18:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:22:32] *** Joins: Brucio-39 (~Brucio-39@ip-94-114-248-79.unity-media.net)
[01:22:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:24:00] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[01:26:39] *** Joins: monkey_ (~user@190.104.116.153)
[01:27:28] *** Quits: Brucio-39 (~Brucio-39@ip-94-114-248-79.unity-media.net) (Ping timeout: 268 seconds)
[01:29:57] *** Joins: Algernon666 (~Algernon6@88.124.69.179)
[01:33:27] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:485e:1cbd:31d4:31ad)
[01:33:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:37:19] *** Quits: Algernon666 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[01:40:48] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[01:44:06] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[01:46:17] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[01:47:07] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:49bd:7bc5:78f2:8fae) (Ping timeout: 256 seconds)
[01:56:12] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Remote host closed the connection)
[01:59:00] *** Joins: notzmv (~zmv@user/notzmv)
[01:59:10] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:11:02] *** Joins: Brucio-50 (~Brucio-50@ip-94-114-248-79.unity-media.net)
[02:12:28] <yottabyte> I'm having trouble understanding the example: https://lispcookbook.github.io/cl-cookbook/files.html#reading-a-file-one-line-at-a-time, why is (read-line stream nil) in there twice? and what does ((null line)) do?
[02:15:14] <yottabyte> I'm having difficulty understanding do at all actually
[02:16:35] *** Quits: MiningMarsh (~MiningMar@user/miningmarsh) (Read error: Connection reset by peer)
[02:18:44] *** Joins: MiningMarsh (~MiningMar@user/miningmarsh)
[02:18:56] <Alfr> yottabyte, LINE is bound to the first one for the first iteration, then to the second one updates LINE before every subsequent iteration.
[02:19:25] <Alfr> yottabyte, (null foo) tests whether foo is nil.
[02:19:52] <yottabyte> oh, that's when it stops
[02:20:00] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[02:20:03] <Alfr> chls do
[02:20:14] <moon-child> clhs do
[02:20:14] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_do_do.htm
[02:20:18] <moon-child> may be clearer as: (loop for line = (read-lime stream nil) while line do (print line))
[02:20:23] <Alfr> moon-child, thanks. :)
[02:20:38] <yottabyte> yeah, I did, I find those docs very hard to read
[02:20:38] <moon-child> (aside: that was a _very_ snappy response from the bot, I am surprised)
[02:21:24] <yottabyte> that is clearer. maybe the CLHS cookbook should have that
[02:21:57] <yottabyte> so while line do has the nil check end-test-form built in?
[02:22:09] <moon-child> well.  There is an 'essential problem of LOOP' or some such, described somewhere
[02:22:33] <moon-child> yottabyte: well, alright, you may think of it rather as 'until (null line)'.  It amounts to the same thing
[02:22:40] <moon-child> NIL is false, and all that is not NIL is true
[02:23:58] *** Joins: amb007 (~a_bakic@109.245.225.179)
[02:24:59] *** Joins: xiews (~wxie@101.93.17.62)
[02:24:59] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[02:25:28] *** Parts: Brucio-50 (~Brucio-50@ip-94-114-248-79.unity-media.net) ()
[02:25:39] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[02:28:38] *** Joins: Brucio-63 (~Brucio-63@ip-94-114-248-79.unity-media.net)
[02:33:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Ping timeout: 240 seconds)
[02:39:50] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (Ping timeout: 252 seconds)
[02:40:43] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:78:1d7b:130a:7a28)
[02:40:44] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:485e:1cbd:31d4:31ad) (Read error: No route to host)
[02:41:18] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:e531:d354:8b2a:42b9)
[02:44:59] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[02:45:00] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:78:1d7b:130a:7a28) (Ping timeout: 240 seconds)
[02:57:02] *** Joins: pjb (~pjb@user/pjb)
[03:04:19] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:08:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Quit: Quit)
[03:08:25] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[03:12:57] *** Quits: xiews (~wxie@101.93.17.62) (Ping timeout: 240 seconds)
[03:15:46] *** Joins: xsperry (~xs@user/xsperry)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[03:17:42] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[03:23:11] *** Joins: xiews (~wxie@2409:891f:3e00:2a57:9f4e:73cb:eac8:4254)
[03:23:52] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:e531:d354:8b2a:42b9) (Read error: Network is unreachable)
[03:31:24] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[03:32:38] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:33:02] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[03:33:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[03:36:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1)
[03:36:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:85f4:5f76:4849:adb1) (Changing host)
[03:36:58] *** Joins: skapata (~Skapata@user/skapata)
[03:39:26] *** Quits: rito_ (~rito_gh@45.112.243.151) (Ping timeout: 268 seconds)
[03:41:25] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[03:45:44] *** lisper29 is now known as vibs29
[03:46:17] *** Quits: xiews (~wxie@2409:891f:3e00:2a57:9f4e:73cb:eac8:4254) (Read error: Connection reset by peer)
[03:46:37] *** Joins: xiews (~wxie@2409:891f:3e00:2a57:9f4e:73cb:eac8:4254)
[03:49:58] *** vibs29 is now known as lisper29
[03:50:52] *** Joins: eddof13 (~textual@2600:4040:4029:5000:4123:cda2:78c0:609c)
[04:22:49] *** Joins: morte_ (~user@190.104.116.153)
[04:26:37] *** Quits: xiews (~wxie@2409:891f:3e00:2a57:9f4e:73cb:eac8:4254) (Ping timeout: 240 seconds)
[04:31:33] *** Joins: xiews (~wxie@124.77.94.254)
[04:42:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[04:42:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:43:28] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[04:49:43] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[05:04:53] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[05:05:21] *** Quits: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[05:05:42] *** Joins: amb007 (~a_bakic@109.245.225.179)
[05:07:56] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[05:08:32] *** Joins: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs)
[05:08:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[05:32:50] *** Quits: eddof13 (~textual@2600:4040:4029:5000:4123:cda2:78c0:609c) (Quit: Textual IRC Client: www.textualapp.com)
[05:34:49] *** Joins: eddof13 (~textual@2600:4040:4029:5000:40a7:771f:cdfd:21ff)
[05:38:45] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:42:51] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650) (Ping timeout: 245 seconds)
[05:47:48] <raeda> Are there any cool programs written in ISLisp? It looks like a predominantly Japanese things, so maybe that's why I can't find anything on the English internet
[05:48:05] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[05:48:17] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[05:59:57] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[06:07:59] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[06:17:49] *** Quits: macaw (~macaw@77-255-134-52.adsl.inetia.pl) (Ping timeout: 240 seconds)
[06:30:52] *** Joins: macaw (~macaw@77-255-134-52.adsl.inetia.pl)
[06:34:35] <pjb> raeda: it's an international standard, really, and there are more European implementations than Japaneses ones.
[06:35:01] <pjb> raeda: That said, it looks like there are more implementations than actual programs written in ISO Lispâ€¦
[06:36:10] *** Joins: morte_ (~user@190.104.116.153)
[06:47:24] <raeda> pjb: haha, that's the feeling I was getting
[06:52:53] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[06:55:00] *** Joins: lalitmee__ (~lalitmee@180.94.32.14)
[06:59:35] *** Joins: livoreno (~livoreno@user/notzmv)
[07:02:00] *** Joins: lalitmee_ (~lalitmee@180.94.33.168)
[07:04:26] *** Quits: lalitmee__ (~lalitmee@180.94.32.14) (Ping timeout: 260 seconds)
[07:05:34] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[07:08:03] *** Joins: livoreno (~livoreno@user/notzmv)
[07:08:25] *** Quits: MrFantastik (~f@2607:f598:bbda:f0:997e:52bf:c319:57b5) (Quit: Leaving)
[07:20:31] *** Joins: kotshie (~kotshie@68.72.208.140)
[07:26:41] *** Quits: karlosz (~karlosz@136.56.98.53) (Ping timeout: 256 seconds)
[07:28:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:29:14] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[07:30:40] *** Joins: duncan_bayne (~user@110-174-183-113.tpgi.com.au)
[07:31:18] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[07:34:31] <duncan_bayne> Happy new year :)  I'm trying to write a test for a usocket based library, germinal.  My approach is to redefine certain special variables with a let form in the test, so I can set my own test certificate etc.  This *almost* works, but fails in the usocket handler itself because that's being called in a different context, i.e., where the special variables *aren't* shadowed.
[07:36:02] *** Quits: macaw (~macaw@77-255-134-52.adsl.inetia.pl) (Ping timeout: 240 seconds)
[07:36:20] <duncan_bayne> Is there a trick I'm missing, here, or do I need to refactor the library under test to parameterise the values to change, instead of relying on shadowed special variables?
[07:37:37] *** Joins: macaw (~macaw@77-255-134-52.adsl.inetia.pl)
[07:46:40] *** Quits: kotshie (~kotshie@68.72.208.140) (Quit: kotshie)
[07:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:57:17] *** Quits: xiews (~wxie@124.77.94.254) (Ping timeout: 256 seconds)
[07:57:26] *** Joins: kotshie (~kotshie@68.72.208.140)
[07:57:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[07:57:53] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[07:57:54] *** Joins: xiews (~wxie@2409:891f:7200:2f13:9c89:e298:4eaf:b2a5)
[07:58:13] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 250 seconds)
[07:58:32] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:02:09] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[08:06:10] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:11:28] *** Quits: lalitmee_ (~lalitmee@180.94.33.168) (Remote host closed the connection)
[08:13:37] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[08:15:57] *** Quits: xiews (~wxie@2409:891f:7200:2f13:9c89:e298:4eaf:b2a5) (Ping timeout: 240 seconds)
[08:19:25] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 268 seconds)
[08:19:55] *** Joins: xiews (~wxie@2409:891e:6a00:3106:de29:5454:384a:15fe)
[08:22:41] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[08:28:13] *** Joins: seemsycamore (seemsycamo@gateway/vpn/protonvpn/seemsycamore)
[08:34:17] *** Joins: dre (~dre@2001:8003:c932:c301:e3ff:3fa1:c907:2ee4)
[08:38:27] *** Quits: eddof13 (~textual@2600:4040:4029:5000:40a7:771f:cdfd:21ff) (Quit: Textual IRC Client: www.textualapp.com)
[08:59:01] *** Joins: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4)
[09:12:40] <jgart> What's the equivalent of iota in common lisp?
[09:12:53] *** Joins: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net)
[09:12:53] <jgart> (iota 3)
[09:13:12] <jgart> (0 1 2)
[09:13:26] <jgart> sbcl
[09:18:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[09:19:00] <sthalik> (lop for i below 3 collect i)
[09:19:08] <sthalik> s/lop/loop
[09:19:51] <sthalik> naturally, this expands into a tail-consing loop
[09:20:00] <sthalik> tagbody/go
[09:20:17] *** Parts: seemsycamore (seemsycamo@gateway/vpn/protonvpn/seemsycamore) ()
[09:25:31] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[09:26:14] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:28:11] <jgart> sthalik, thnx!
[09:29:41] <jgart> sthalik, I did this `(macroexpand '(loop for i below 12 collect i))`
[09:31:13] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:31:23] <jgart> sthalik, https://paste.sr.ht/~whereiseveryone/0cc9ce279760112c176ee21e3e01406f96cb808d
[09:31:54] <jgart> sthalik, I can't fully understand the expanded macro form though
[09:35:29] *** Joins: alfonsox (~quassel@103.92.42.90)
[09:42:28] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Read error: Connection reset by peer)
[09:42:46] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[09:46:57] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Ping timeout: 240 seconds)
[09:49:27] *** Quits: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:49:42] <sthalik> clhs tagbody
[09:49:43] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_tagbod.htm
[09:50:04] <sthalik> jgart, also, do macroexpand-all
[09:51:12] <sthalik> sb-cltl2:macroexpand-all
[09:51:13] *** Joins: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4)
[09:57:29] <sm2n> jgart: alexandria:iota
[09:57:36] <sm2n> :P
[09:58:24] <jgart> sm2n, hmm I don't have that function
[09:58:32] <jgart> Is it from some lib?
[09:58:39] <sm2n> it's in the alexandria library, yeah
[09:58:47] <jgart> ohh ok
[09:58:49] <jgart> cool
[09:58:50] <sm2n> which is a common utility library people use
[09:58:52] <jgart> thnx
[09:59:02] <jgart> yeah, I've heard of it before
[09:59:12] <jgart> haven't used it much yet
[10:01:36] *** Joins: KvL (~KvL@user/KvL)
[10:03:05] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[10:03:59] *** Joins: notzmv (~zmv@user/notzmv)
[10:05:37] *** Quits: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:06:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:29:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[10:30:27] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:38:16] *** Quits: dre (~dre@2001:8003:c932:c301:e3ff:3fa1:c907:2ee4) (Quit: Leaving)
[10:49:20] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[10:54:05] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 256 seconds)
[11:13:21] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[11:14:17] *** Quits: xiews (~wxie@2409:891e:6a00:3106:de29:5454:384a:15fe) (Ping timeout: 240 seconds)
[11:14:58] *** Joins: xiews (~wxie@2409:891e:6e27:1114:da1b:a423:c668:67fb)
[11:15:30] *** Quits: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net) (Quit: karlosz)
[11:24:03] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[11:26:12] *** Joins: amk (~amk@109.255.169.126)
[11:30:37] *** Quits: xiews (~wxie@2409:891e:6e27:1114:da1b:a423:c668:67fb) (Ping timeout: 240 seconds)
[11:30:50] *** Joins: xiews (~wxie@124.77.94.254)
[11:32:43] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 250 seconds)
[11:39:50] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[11:49:24] *** Joins: rgherdt_ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[11:54:10] *** Joins: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net)
[11:58:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[12:03:58] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:07:59] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 252 seconds)
[12:15:59] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[12:18:16] *** Joins: epony (epony@user/epony)
[12:25:58] *** Quits: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net) (Quit: karlosz)
[12:45:41] *** Joins: pjb (~pjb@user/pjb)
[12:48:57] *** Quits: Brucio-63 (~Brucio-63@ip-94-114-248-79.unity-media.net) (Ping timeout: 240 seconds)
[12:58:27] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:954d:e862:3eb8:da67)
[13:00:49] *** Joins: strajder (~strajder@user/strajder)
[13:12:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[13:22:01] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[13:26:54] *** Joins: taurinus (~taurinus@user/taurinus)
[13:30:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:35:51] <wasamasa> I had a dream where I failed to help out someone make their CL web application perform less than shitty
[13:38:17] *** Quits: Guest98 (~Guest98@83.234.93.153) (Ping timeout: 256 seconds)
[13:38:29] <madnificent> wasamasa: LoL
[13:38:43] <wasamasa> doesn't help I barely know CL
[13:38:57] <madnificent> wasamasa: So far, zero problems with lisp on web apps we're building :P
[13:39:16] <wasamasa> yeah, in the dream the person expected that the use of CL and SBCL magically makes everything fast
[13:39:30] <wasamasa> that they wouldn't have to do actual engineering
[13:41:15] *** Quits: xiews (~wxie@124.77.94.254) (Ping timeout: 256 seconds)
[13:48:33] <amazigh> ^^'
[13:48:47] <wasamasa> at least SBCL gives you some tools to help with that
[13:52:50] *** Joins: xiews (~wxie@2409:891e:6960:1652:a005:bf41:41a4:fc18)
[13:54:10] <engblom> I remeber the first program I worked on during a summer job. We were making it in Delphi and it was using mysql as storage. Everything worked really well in our manual tests. Then I decided to make a progam generating a lot of data and the program begun to crawl.
[13:54:51] <engblom> That program showed that you need to think when making SQL queries, that they are not automatically optimized to scale well.
[13:55:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:56:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:57:16] *** Lord_of_Life_ is now known as Lord_of_Life
[14:02:12] <wasamasa> yup
[14:02:22] <wasamasa> however, the knowledge how to do that exists
[14:03:35] <wasamasa> it's a problem that has been solved over and over again
[14:03:44] <wasamasa> you can even hire people to help you with it or buy their books
[14:04:09] <wasamasa> which pretty much puts SQL into the engineering camp for me
[14:06:33] <amazigh> ... 
[14:06:44] <jgart> when shoud I use defvar versus defparameter?
[14:08:02] *** Quits: sthalik (~sthalik@tunnel146824-pt.tunnel.tserv28.waw1.ipv6.he.net) (Ping timeout: 240 seconds)
[14:09:51] <jackdaniel> jgart: I'm using defvar to store things that persist during the single session (i.e a database connection, a hash table) and parameters for parameters like color, limits and such
[14:11:27] <jackdaniel> (or default values - parameters are good for that too I guess)
[14:13:45] *** Joins: rito_ (~rito_gh@45.112.243.151)
[14:19:13] <madnificent> jgart: parameters are updated when you call defparameter again, eg by recompiling the file.  Variables don't.
[14:19:47] <madnificent> Application state would belong in variables, configuration tuning would be in parameters.
[14:26:50] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[15:02:41] *** Quits: xiews (~wxie@2409:891e:6960:1652:a005:bf41:41a4:fc18) (Ping timeout: 250 seconds)
[15:04:06] *** Joins: xiews (~wxie@101.93.17.62)
[15:08:50] *** Quits: taurinus (~taurinus@user/taurinus) (Quit: nyaa~)
[15:08:53] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:954d:e862:3eb8:da67) (Ping timeout: 268 seconds)
[15:11:28] *** Joins: VincentVega (~user@212.97.4.33)
[15:12:49] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[15:17:44] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 252 seconds)
[15:32:35] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[15:32:53] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[15:33:50] *** Joins: Jing (~hedgehog@125.105.9.103)
[15:35:29] *** Quits: Jing (~hedgehog@125.105.9.103) (Client Quit)
[15:38:59] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:51:26] *** Quits: xiews (~wxie@101.93.17.62) (Ping timeout: 268 seconds)
[15:55:30] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[15:55:44] *** Joins: madage (~madage@user/madage)
[16:04:19] *** Joins: xiews (~wxie@101.93.17.62)
[16:04:59] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:10:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[16:10:38] *** Joins: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net)
[16:13:17] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 240 seconds)
[16:17:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[16:31:15] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[16:38:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:48:37] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[17:01:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[17:10:27] *** Joins: monkey_ (~user@190.104.116.153)
[17:10:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[17:12:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2)
[17:12:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:90de:bade:1639:c5d2) (Changing host)
[17:12:46] *** Joins: skapata (~Skapata@user/skapata)
[17:13:55] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:71e0:c4bf:d866:f951) (Remote host closed the connection)
[17:14:19] *** Quits: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net) (Quit: Client closed)
[17:14:21] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:71d0:995f:9252:5bc7)
[17:19:24] *** Quits: letto (~letto@188.26.158.104) (Read error: Connection reset by peer)
[17:20:12] *** Joins: letto (~letto@188.26.158.104)
[17:23:44] *** Joins: miique (~miique@181.46.139.166)
[17:25:33] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[17:29:37] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[17:30:11] *** Joins: monkey_ (~user@190.104.116.153)
[17:38:34] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:39:47] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:42:08] *** Joins: nature (~nature@45.32.235.173)
[17:43:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[17:44:18] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:50:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:02:17] *** Quits: v0|d (~user@ns1.core.gen.tr) (Ping timeout: 240 seconds)
[18:11:36] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[18:30:58] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Quit: ZNC - https://znc.in)
[18:31:25] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:35:29] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Client Quit)
[18:36:04] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[18:36:38] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:38:38] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: Lost terminal)
[18:42:02] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[18:46:57] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[18:50:07] *** Joins: xsperry (~xs@user/xsperry)
[18:53:21] *** Quits: xiews (~wxie@101.93.17.62) (Remote host closed the connection)
[19:11:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:15:27] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[19:15:39] *** Joins: madage (~madage@user/madage)
[19:19:33] *** Joins: taurinus (~taurinus@user/taurinus)
[19:50:40] *** Joins: gdd (~gdd@129.199.146.230)
[19:56:02] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[19:56:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:57:04] *** Joins: treflip (~user@user/treflip)
[20:20:04] *** Quits: taurinus (~taurinus@user/taurinus) (Quit: nyaa~)
[20:20:47] *** Joins: ajoberstar (~user@97-116-72-197.mpls.qwest.net)
[20:30:04] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[20:31:26] *** Joins: mokulus (~mokulus@user/mokulus)
[20:31:31] *** Quits: mokulus (~mokulus@user/mokulus) (Client Quit)
[20:33:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:42:59] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[20:44:00] *** Quits: alfonsox (~quassel@103.92.42.90) (Remote host closed the connection)
[20:46:09] *** Joins: Akiva (~Akiva@user/Akiva)
[20:56:15] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[20:59:27] *** Joins: livoreno (~livoreno@user/notzmv)
[20:59:45] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 268 seconds)
[21:07:58] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:12:38] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:14:57] *** Joins: megaman1237 (~mega4453@190-38-173-255.dyn.dsl.cantv.net)
[21:18:21] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[21:20:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[21:24:55] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[21:27:19] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[21:29:17] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[21:29:21] *** Joins: letto (~letto@188.26.158.104)
[21:46:25] *** Joins: fsmunoz (~fsmunoz@2001:818:e30a:6100:fc95:8b5c:6481:be01)
[21:47:27] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[22:11:06] <jgart> thnx for explaining that! is there some comparison that can be made with bindings in javascript and defvar versus defparameter?
[22:11:51] <jgart> like the differences between var, let, and const in js?
[22:13:31] <wasamasa> lol
[22:13:43] <wasamasa> JS is just screwed up about this
[22:13:50] <wasamasa> do not take it as role model for anything
[22:14:37] <yottabyte> if I (with-open-file (...) (loop ...)) and I forgot to add an until and it's just looping in slime forever, how do I stop that in emacs?
[22:14:53] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Remote host closed the connection)
[22:15:46] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:17:05] *** Quits: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[22:17:12] *** Joins: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs)
[22:20:44] <jgart> wasamasa, are you sure there are no parallels with var, let, const and defvar/defparameter?  If not js, then I'm fine with a comparison in some other language: python, ruby, haskell, ocaml, ...
[22:20:59] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[22:20:59] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[22:21:04] <wasamasa> the usual popular languages have terrible scoping/variable semantics
[22:21:17] *** Quits: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[22:21:28] <jgart> is there a parallel with scheme?
[22:21:42] *** Joins: amb007 (~a_bakic@109.245.225.179)
[22:22:14] <amazigh> jgart: scheme parameters are like python context variables, I do not know comparable concept with javascript.
[22:22:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[22:22:47] <amazigh> I do not know CL's defvar.
[22:24:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:25:28] <jgart> amazigh, thnx! you're referring to this? https://docs.python.org/3/library/contextvars.html
[22:26:37] <jgart> separate question: when should I use ' versus #' (quote versus hash quote)
[22:28:08] <jgart> scheme just has quote and quasiquote, which is used to allow unquote and unquote splice
[22:29:09] <jgart> I'm a bit confused with hash quote. I read that most of the time you'd want #'
[22:29:31] <jgart> because #' preserves lexical variables or something?
[22:34:29] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[22:34:32] *** Joins: Akiva (~Akiva@user/Akiva)
[22:34:41] <amazigh> jgart: re pydoc, yes. Except as of today, as part of the standard, Scheme parameters are oblivious of POSIX or green threads. Chez Scheme that support POSIX threads, has several kinds of paremeters (Chez does not support green threads out-of-the-box). Gambit parameters are very much like contextvars basically thread local variables for green threads.
[22:37:26] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Ping timeout: 245 seconds)
[22:39:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:41:23] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[22:42:26] <jgart> amazigh, thnx. I'm lost at thread local variables. I've read about green threads
[22:42:51] *** Quits: fsmunoz (~fsmunoz@2001:818:e30a:6100:fc95:8b5c:6481:be01) (Ping timeout: 245 seconds)
[22:46:06] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[22:46:26] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[22:46:37] <Alfr> yottabyte, in case it's still spinning, C-c C-c should enter the debugger.
[22:48:31] <Alfr> jgart, #'foo it just an other notation for the form (function foo).
[22:48:50] <Alfr> jgart, and 'foo reads the same as (quote foo).
[22:48:54] <yottabyte> it was just constantly printing. I exited emacs haha
[22:49:28] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[22:49:55] <Alfr> Oh, we're in #list here.
[22:49:57] *** Joins: amb007 (~a_bakic@87.116.175.30)
[22:50:29] <Alfr> jgart, ^ may or may not hold true for non-Common Lisp. ;)
[22:52:11] *** Quits: amb007 (~a_bakic@87.116.175.30) (Read error: Connection reset by peer)
[22:52:54] *** Joins: amb007 (~a_bakic@87.116.175.40)
[22:54:27] <jgart> does scheme use hash quote? If so, it's rare. I might have seen it once before IIRC...
[22:54:35] <jgart> ah https://docs.scheme.org/surveys/hash-quote/
[22:56:46] <jgart> (functionp #'append) =>  true
[22:56:54] <jgart> (functionp 'append) =>  false
[22:57:09] *** Quits: amb007 (~a_bakic@87.116.175.40) (Ping timeout: 256 seconds)
[22:57:21] <jgart> Alfr, thnx!
[22:58:19] *** Joins: amb007 (~a_bakic@109.245.225.179)
[23:02:40] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[23:03:29] *** Joins: amb007 (~a_bakic@87.116.175.48)
[23:05:05] <jgart> What is the purpose of `(function foo)` in common lisp?
[23:05:21] <jgart> Emacs says it is like â€˜quoteâ€™, but preferred for objects which are functions.
[23:06:40] <jgart> In scheme I can just do (quote foo) for a function. There's no differentiation between a function and any other object that can be quoted.
[23:07:18] <moon-child> jgart: foo, when evaluated, results in the value of symbol foo in the value namespace
[23:07:21] <jgart> It seems emacs lisp uses (function foo) for the byte compiler
[23:07:29] <moon-child> (function foo), when evaluated, results in the value of symbol foo in the function namespace
[23:08:08] <jgart> oh, so it's a lisp-2 thing?
[23:08:14] <moon-child> indeed
[23:08:30] <moon-child> note you can use #'foo as shorthand for (function foo)
[23:08:45] <moon-child> (just as 'foo is shorthand for (quote foo))
[23:09:13] <jgart> the need to differentiate between the two namespaces: function and variable
[23:09:37] <jgart> or should I be using/thinking value instead of variable?
[23:09:50] <moon-child> the relationship to quote in emacs comes from emacs's lack of lexical scoping.  Common lisp has lexical scoping, so they are not quite the same
[23:10:10] <moon-child> you may pass a symbol to FUNCALL or APPLY, in which case it will be looked up globally
[23:10:29] <moon-child> so given (defun f (x) (+ x 2)), (funcall 'f 3) and (funcall #'f 3) will both result in 5
[23:10:41] <jgart> doesn't modern elisp have lexical scoping now?
[23:10:58] <moon-child> but (flet ((f (x) (+ x 4))) (values (funcall 'f 3) (funcall #'f 3))) results in 5 7
[23:11:14] <moon-child> 'modern elisp have lexical scoping now'  I do not know
[23:12:08] <sham1> It has had lexical scoping for a bit now. But it's not default, no
[23:12:15] <sham1> That'd break a lot of legacy code
[23:15:02] *** Joins: trocado- (~uiop9@bl18-243-251.dsl.telepac.pt)
[23:15:57] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[23:16:21] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[23:19:18] <jgart> moon-child, `(flet ((f (x) (+ x 4))) (values (funcall 'f 3) (funcall #'f 3)))` #' looks in the lexical scope of the flet and ' looks in the global scope. Is that one way I can think about it?
[23:20:10] <moon-child> ' doesn't look anywhere
[23:20:17] <moon-child> 'f evaluates to the symbol f
[23:20:30] <moon-child> _funcall_ then looks for the corresponding function in the global scope
[23:21:05] <moon-child> #'f evaluates to a function, so it is indeed lexical
[23:22:47] <moon-child> (in particular, functions and symbols are both function designators)
[23:22:49] <jgart> so, #' is always lexical?
[23:23:02] <jgart> and ' is not
[23:23:52] <jgart> because ' or quote doesn't know/care about scope
[23:24:39] <jgart> quote only knows about the thing being a symbol without contextualizing it in a scope
[23:28:47] <dpk> jgart: the schemedoc page is talking about #"â€¦" as a notation for a string-like thing. #' is used in Scheme for syntax, a version of quote that maintains lexical hygiene
[23:29:50] <dpk> so #'x isn't the symbol x, but the identifier x, with information about whether it's bound, where, and what bindings it might possibly shadow
[23:31:16] <jgart> dpk, #' is used in the service of the macro system? you mentioned hygiene
[23:31:59] <dpk> yes, in the syntax-case macro system
[23:33:34] <jgart> which is the one that implements hygiene
[23:33:40] <dpk> all of them
[23:33:54] <moon-child> DEFMACRO is not hygienic
[23:34:02] <dpk> *all of them in Scheme
[23:34:25] <moon-child> define-macro is pretty broadly implemented, I think
[23:34:45] <moon-child> (though not standard, I guess)
[23:35:15] <jgart> guile has defmacro but I forgot now if it is an alias/macro for something in scheme or an actual implementation of lisp defmacro
[23:35:31] <dpk> the one CLers like to bitch and whine about is syntax-rules, which is a template-substitution system: nice for simple macros, and *can* do complicated macros, but gets hairy quickly. syntax-case is syntax-rules plus the ability to run arbitrary Scheme code during expansion, meaning you get everything you can do in CL macros and more (advanced pattern matching, and the ability to investigate identifiers' lexical contexts)
[23:35:34] <jgart> guile also has define-macro
[23:35:58] <dpk> you can implement defmacro in terms of syntax-case, and i think Guile does that for compatibility with older Guile code before they added hygienic macros
[23:36:02] <jgart> but guilers usually use the syntax-case hygiene system
[23:36:16] <dpk> yeah, exactly
[23:36:48] <jgart> I like the simplicity of the defmacro syntax
[23:37:40] <jgart> syntax-case hygiene macros feel a bit verbose
[23:37:57] <amazigh> try syntax-rule
[23:37:58] <jgart> but maybe whatever
[23:40:47] <jgart> amazigh, you mean syntax-rules with define-syntax to bind it?
[23:40:52] <jgart> https://www.gnu.org/software/guile/manual/html_node/Syntax-Rules.html
[23:45:24] <amazigh> yes syntax-rules
[23:45:41] *** Joins: karlosz (~karlosz@136.56.98.53)
[23:45:57] <amazigh> there is also a sugar called define-syntax-rule that looks very much like define-macro
[23:46:03] *** Joins: Josh_2 (~user@37.25.47.130)
[23:46:29] <amazigh> see section 6.8.2.3 of that page from guile 
[23:47:02] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 252 seconds)
[23:48:15] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[23:48:41] <jgart> ah yes shorthands
[23:48:46] <jgart> or sugar
[23:49:17] <amazigh> the implementation is straightforward based on syntax-rules, but I never remember it
[23:49:26] <amazigh> (fwiw, I do not write a lot of macros)
[23:51:02] <jgart> define-syntax-rule seems to be reminiscent of defmacro
[23:52:25] <jgart> me either, regarding writing macros
[23:52:54] <jgart> fun fun functions
[23:56:21] <amazigh> btw, I discovered recently that (define-syntax macro macro),  then you can do something like (macor #'(my exp one two three)) to see the result
[23:56:36] *** Joins: dlowe (~dlowe@user/dlowe)
[23:57:16] <amazigh> in the REPL
[23:57:44] <amazigh> dr racket has a step debugger for macros
[23:58:11] <amazigh> iirc, guile has something like that too, I never tried with chez, iirc, chez has trace-define-syntax 
[23:58:27] <amazigh> that will help with debugging
[23:59:20] <jgart> guile doesn't have a great debugger from what I've heard
[23:59:29] <jgart> from other guilers
