[00:11:02] <mattpatt[m]> There's a Travis job called 'MRI core jit' that runs `jruby -S rake test:mri:core:fullint`, and 'MRI core jit jdk11' that runs `jruby -S rake test:mri:core:jit`. Is the MRI core jit job justr badly named?
[00:11:24] <mattpatt[m]> Or is it badly named and in need a JDK 8 job that runs `jruby -S rake test:mri:core:jit` too?
[00:38:06] <enebo[m]> mattpatt: it is just misnamed:     :fullint => ["-X-C", "-Xjit.threshold=0", "-Xjit.background=false"],
[00:38:50] <enebo[m]> -X-C means interpreted and threshold=0 means it will go from startup interpreter to full interpreter the first time it is called
[00:40:07] <enebo[m]> HAHA this is pretty esoteric.  The label is just wrong.  MRI core full interp would be better name
[00:41:08] <enebo[m]> mattpatt: thanks for helping out with this
[01:14:45] <mattpatt[m]> enebo: wish it luck, i'm off to bed :-) https://github.com/fidothe/jruby/actions/runs/1450673803
[01:15:07] <enebo[m]> wowzers!
[01:16:10] <enebo[m]> do org accounts have limits per month?
[01:16:11] <mattpatt[m]> lots of scope for refactoring once the footgun errors are removed
[01:16:11] <enebo[m]> mattpatt: It will be cool to see this run
[01:17:45] <mattpatt[m]> enebo: https://github.com/fidothe/jruby/actions/runs/1450673803
[01:18:02] <mattpatt[m]> sorry, bad pasteboard
[01:18:03] <mattpatt[m]> https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits
[01:18:56] <mattpatt[m]> TL;DR, probably not for a public repo
[02:14:43] <headius> nice... FWIW this is the only way to get parallel execution, even though it bloats up the list of checks a ton
[02:14:48] <headius> I wish you could get parallel jobs without adding a check entry
[03:21:41] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[03:26:28] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[06:13:05] <headius> Dir.glob raises an ArgumentError if the string contains \0 ERROR
[06:13:05] <headius> Expected ArgumentError ((?-mix:nul-separated))
[06:13:05] <headius> but got: ArgumentError (string contains null byte)
[06:13:05] <headius> come on onw
[06:13:06] <headius> now
[06:14:01] <headius> I'm changing this spec, our message is clearly superior and the CRuby message seems like they forgot to change it
[06:46:30] <headius> there's a stack of Dir failures in ruby/spec that might be low-hanging fruit... encoding checks and to_path and stuff
[06:47:14] <headius> lopex: `Encoding.list includes CESU-8 encoding`
[06:47:26] <headius> only failure in Encoding, dunno if we care or not
[06:47:32] <headius> I don't know that encoding
[06:47:54] <lopex[m]> it's been for a while in mri codebase
[06:48:19] <lopex[m]> seems to be some utf variation
[06:48:24] <headius> that would make sense
[06:48:56] <lopex[m]> the impl is separate though, probably copied mostly
[06:50:44] <headius> ok
[06:52:44] <lopex[m]> from that 3.x list I heard there's another one
[06:56:31] <lopex[m]> lots's of low hanging fruits on that 3.x list though
[06:56:58] <lopex[m]> especially that string subclass one
[07:09:51] <headius> oh yeah
[07:10:18] <headius> some of that is done though, enebo hacked on making specs and tests pass for a while last spring
[07:31:49] <headius> also some easy Enumerator failures that could probably be pure-Ruby: Enumerator#produce, Enumerator::Lazy#eager (Lazy is pure Ruby already)
[07:34:56] *** Quits: kai[m] (~kaikdeorg@2001:470:69fc:105::c43) (Quit: Client limit exceeded: 20000)
[08:48:22] <headius> enebo: this change and a similar one with **opts triggers an exception in interpreter, in both cases an AIOOB
[08:48:22] <headius> https://gist.github.com/headius/32ecf9c7b669e48e34e99958fa8a8d0d
[08:49:14] <headius> that is to get Kernel#clone passing through the freeze: option to initialize_copy etc
[08:49:46] <headius> which we probably want to look at optimizing since the builtin initialize_clone and initialize_dup will now be varargs
[09:03:27] <headius> lopex: https://bugs.ruby-lang.org/issues/15931
[09:07:27] <headius> I did a pass over 2.7 and 3.0 features and updated checklists... implemented several items along the way
[09:07:28] <headius> ttfn
[11:41:16] *** Quits: richbridger (~richbridg@089144202237.atnat0011.highway.a1.net) (Ping timeout: 268 seconds)
[11:44:27] *** Joins: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net)
[15:40:35] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: puritylake[m] (~puritylak@2001:470:69fc:105::1:1904) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111) (Quit: Bridge terminating on SIGTERM)
[15:40:36] *** Quits: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: subbu[m] (~subbu@user/subbu) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: kares[m] (~karesmatr@2001:470:69fc:105::30d1) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: nirvdrum[m] (~nirvdrumm@2001:470:69fc:105::1:2b86) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: TimGitter[m]1 (~gittertim@2001:470:69fc:105::314b) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: Leonardomejiabus (~thebiglor@2001:470:69fc:105::1:3a2) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: nilsding (~nilsding@user/nilsding) (Quit: Bridge terminating on SIGTERM)
[15:40:40] *** Quits: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: edipofederle[m] (~edipofede@2001:470:69fc:105::30f1) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: TimGitter[m] (~gittertir@2001:470:69fc:105::314f) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: annabackiyam[m] (~annabacki@2001:470:69fc:105::1:2349) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: danieljrubyquest (~danieljru@2001:470:69fc:105::d505) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: jswenson[m] (~jswensonm@2001:470:69fc:105::fd45) (Quit: Bridge terminating on SIGTERM)
[15:40:42] *** Quits: CrisShupp[m] (~cshupp1ma@2001:470:69fc:105::1:374) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105) (Quit: Bridge terminating on SIGTERM)
[15:40:44] *** Quits: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: basshelal[m] (~basshelal@2001:470:69fc:105::30e7) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d) (Quit: Bridge terminating on SIGTERM)
[15:57:49] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[16:11:16] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[16:11:16] *** Joins: kai[m] (~kaikdeorg@2001:470:69fc:105::c43)
[16:11:16] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[16:11:16] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[16:11:16] *** Joins: subbu[m] (~subbu@user/subbu)
[16:11:16] *** Joins: nilsding (~nilsding@user/nilsding)
[16:11:16] *** Joins: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4)
[16:11:29] *** Joins: Leonardomejiabus (~thebiglor@2001:470:69fc:105::1:3a2)
[16:11:29] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[16:11:29] *** Joins: jswenson[m] (~jswensonm@2001:470:69fc:105::fd45)
[16:11:29] *** Joins: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c)
[16:11:29] *** Joins: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105)
[16:11:29] *** Joins: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb)
[16:11:29] *** Joins: CrisShupp[m] (~cshupp1ma@2001:470:69fc:105::1:374)
[16:11:29] *** Joins: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e)
[16:11:29] *** Joins: 068AAB7IX (~gittertim@2001:470:69fc:105::314b)
[16:11:29] *** Joins: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111)
[16:11:29] *** Joins: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118)
[16:11:29] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[16:11:29] *** Joins: annabackiyam[m] (~annabacki@2001:470:69fc:105::1:2349)
[16:11:29] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[16:11:29] *** Joins: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134)
[16:11:29] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[16:11:29] *** Joins: edipofederle[m] (~edipofede@2001:470:69fc:105::30f1)
[16:11:29] *** Joins: nirvdrum[m] (~nirvdrumm@2001:470:69fc:105::1:2b86)
[16:11:29] *** Joins: danieljrubyquest (~danieljru@2001:470:69fc:105::d505)
[16:11:29] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[16:11:29] *** Joins: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78)
[16:11:29] *** Joins: 074AACU6W (~gittertir@2001:470:69fc:105::314f)
[16:11:30] *** Joins: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b)
[16:11:30] *** Joins: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127)
[16:11:30] *** Joins: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d)
[16:11:30] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[16:11:30] *** Joins: puritylake[m] (~puritylak@2001:470:69fc:105::1:1904)
[16:11:30] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[16:11:30] *** Joins: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122)
[16:11:30] *** Joins: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d)
[16:11:30] *** Joins: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c)
[16:11:30] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[16:20:02] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Client limit exceeded: 20000)
[16:20:53] *** Quits: subbu[m] (~subbu@user/subbu) (Quit: Client limit exceeded: 20000)
[16:22:13] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Quit: Client limit exceeded: 20000)
[16:22:20] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Quit: Client limit exceeded: 20000)
[16:22:29] *** Quits: nilsding (~nilsding@user/nilsding) (Quit: Client limit exceeded: 20000)
[17:00:50] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[17:49:43] <enebo[m]> headius: I believe pass through ... is not 100%.  I removed kwargs rest and block fake vars because we are not quite right with argument passing of kwargs for 3.0 
[17:50:19] <enebo[m]> That might not be the issue here but I see it is being used
[18:27:42] <headius> I tried with **args and got a different AIOOB
[18:27:52] <headius> Just booting up with that patch if you want to try it
[18:28:25] <headius> I can look into it, just was looking for easy wins so I didn't go further
[18:39:10] <enebo[m]> *r, **k might be needed with zsuper
[19:01:28] <headius> No zsuper, just redispatches to initialize_copy
[20:12:25] <enebo[m]> err then just manually pass them and probably &b too
[20:23:19] <headius> enebo: https://gist.github.com/headius/8d58406b575de46c7c8f385dd83348ba
[20:23:23] <headius> this is with explicit passing of the original arg and kwreat
[20:23:38] <headius> kwrest
[20:23:38] <headius> it is a different error
[20:23:38] <headius> disabling RG makes it go away
[20:23:56] <enebo[m]> HAHAHAH
[20:25:14] <enebo[m]> well line_num somehow is -7
[20:25:25] <enebo[m]> I wonder how that is happening
[20:25:40] <headius> fascinating isn't it
[20:25:45] <enebo[m]> if you -Xir.print you shoudl see it go off the rails
[20:26:23] <enebo[m]> If i had to guess the parser is setting a bogus line position to a node
[20:27:08] <enebo[m]> I can try your PR out
[20:27:46] <headius> I can try to look later
[20:27:56] <enebo[m]> I will do a quick looksee
[20:28:01] <enebo[m]> That is pretty weird
[20:28:04] <headius> I won't dig into the ... since you say that is a WIP
[20:28:41] <enebo[m]> Obviously it is speficially ** causing it too
[20:28:42] <enebo[m]> since that is all you changed
[20:29:02] <enebo[m]> but I believe if this is the case you should be able to easily make a repro
[20:29:21] <enebo[m]> I am going try that quick
[20:29:53] <headius> it doesn't seem to fail in simple cases
[20:30:46] <enebo[m]> line 7 is 0-indexed location of firs tintialize_dup
[20:35:11] <enebo[m]> I am getting random AIIOBE in popScope
[20:36:26] <headius> That sounds like the error I get for ...
[20:37:11] <enebo[m]> I am on HEAD with fresh rebuild
[20:37:38] <enebo[m]> but that is pretty odd...I mean I would hope **a happens at least once on bootstrapping
[20:46:08] <enebo[m]> scopeStack[scopeIndex--] = null;
[20:46:09] <enebo[m]> scopeIndex == -7
[20:46:32] <enebo[m]> How can this happen.. we only modify this with an increment and decrement
[20:49:48] <enebo[m]> -8
[20:49:49] <enebo[m]> ok I see the AIIOBE changes with JIT on and bounces around at different small negative indices.  If I lock into startup interp and do not allow full interp is it always =8
[20:52:17] <enebo[m]> Hmm apparently bindex is written around grabbing TC private fields
[20:54:00] <enebo[m]> the initialize_copy(a, **kwargs) is where it happens just accepting the kwarg is ok
[21:01:36] <enebo[m]> a little theory forming....
[21:03:01] <enebo[m]> I see a collection of invalid gemspec errors before it dies with AAIOBE.  I am guessing those gemspec errors are raising but allowing us to decrement the scopeIndex likely because we are calling initialize_copy with kwargs and it is exploding
[21:03:48] <enebo[m]> we probably have a catch all in load
[21:06:56] <enebo[m]> we unconditionally pop but for interpret root we seem to also unconditionally push so it does not really explain it
[21:22:27] <enebo[m]> headius: https://gist.github.com/enebo/29a236ad2af3c020bc508f7d13f5e425
[21:23:12] <enebo[m]> More or less we have an recursive logic error and it runs out of stack which explains the oddity in TC
[22:26:18] <headius> Ah I see
[22:35:52] <mattpatt[m]> hey all. Can I steal some bandwidth to talk about deploys?
[22:37:20] <headius> Go for it
[22:40:42] <mattpatt[m]> deploy snapshot to sonatype every build on master / jruby-9.3 / jruby-9.2?
[22:41:30] <mattpatt[m]> deploy release to sonatype when a release is cut in Github?
[22:44:50] <mattpatt[m]> I'm also very tempted to generate the ci.yml from a Rake task, because there are a lot of very similar tasks and we probably need to declare dependencies between the deploy-snapshot job and whichever jobs we anoint as the sufficient-for-snapshot set
[22:46:03] <enebo[m]> mattpatt: I have no issues with snapshot deploying but release is more complicated
[22:46:23] <enebo[m]> in a release we also run a licensed windows installer and push to s3 and push a gem
[22:47:04] <mattpatt[m]> you can constrain jobs so they only run when you cut a release in Github
[22:47:14] <mattpatt[m]> so all those are totally doable
[22:53:43] <mattpatt[m]> assume the windows stuff is scriptable
[22:53:46] <enebo[m]> for windows installer is just means some secret key stuff so it can run
[22:53:49] <enebo[m]> and we need install4j runnable on GHA too
[22:53:50] <enebo[m]> but typically after I mvn release I close to make sure we actually close (which has been a long term historical problem whenever we change out build scripts)
[22:53:52] <enebo[m]> then I make the command to generate the installer for windows
[22:53:52] <enebo[m]> then some manual tests on windows/linux to make sure it is safe to put out
[22:53:55] <enebo[m]> This could be partially/mostly alleviated with a Rails smoke test job on windows/linux but that should also happen before we try and automate it more
[22:53:58] <enebo[m]> Other things (which really is not technically a big deal) is gem push of jruby-jars and S3 push of windows artifacts (although I do push some replicated files that are maven artifacts)
[22:54:03] <enebo[m]> I am definitely not against automating more or all of this but until we get some confidence on some sort of smoke test job (especially on windows) we cannot trust what we currently run on CI
[22:54:43] <enebo[m]> The other part of that smoke test would be installing the windows installer too although perhaps that is more wishful (we do not actually change windows installer config very often so it is probably not a huge fear)
[22:57:11] <enebo[m]> Another possibility would be just scripting more of this process until we have enough to stitch it to an automated release process as well.  Like pushing PRs to ruby-build, rvm, docker, rbenv 
[22:59:45] <mattpatt[m]> I think that formalising your release process (well, writing it down anyway) enough that we can automate it piecemeal would be the best / only way
[23:00:36] <mattpatt[m]> nibble away at the edges as confidence in those bits builds / to build confidence in those bits
[23:05:08] <mattpatt[m]> do we need to avoid pushing a snapshot build if certain of the test jobs fail?
[23:05:46] <mattpatt[m]> the travis setup looks like only push if the tests all pass
[23:09:45] <enebo[m]> https://github.com/jruby/jruby/wiki/ReleaseDocumentation
[23:10:47] <enebo[m]> mattpatt: It would be nice if they all passed but I am not sure it is a requirement
[23:12:52] <enebo[m]> I don't have a good handle on this...on one hand we typically want whoever is trying something to try our latest bits.  So regardless of test status that seems reasonable
[23:13:14] <enebo[m]> we also occasionally have flaky tests
[23:13:38] <enebo[m]> but we tend to do a lot more PR-based landing so master it typically only not green due to flakiness
[23:13:54] <enebo[m]> OR like current master it is so new we do not want to tag out failing tests yet
[23:14:57] <enebo[m]> With that said current master is not something we would say "hey come try this out".  That will likely happen after we tag stuff
[23:15:44] <mattpatt[m]> Aha, hadn't seen that wiki page. Lots to work on automating there before going anywhere near the push-release-packages button
[23:16:19] <enebo[m]> mattpatt: My only largish reservation is most release problems tend to be things outside the typical test bubble 
[23:16:48] <enebo[m]> like an installer having a glitch. build changes preventing a sonatype close.  some env difference not caught by CI
[23:17:03] <enebo[m]> but the more we could automate the better
[23:17:40] <enebo[m]> we mostly do not catch env issues so that perhaps is not a fair statement
[23:17:48] <enebo[m]> we have though
[23:18:28] <mattpatt[m]> Looks like you can hold final release for human review and pause the automation while waiting for that, so there might be a best of both worlds solution somewhere in the murk
[23:18:38] <enebo[m]> realistically we can have a one click release at one point and some of these tests will happen before that click with a dry run
[23:18:53] <enebo[m]> oh interesting
[23:19:33] <enebo[m]> Not sure that would help closing on sonatype but that would be pretty nice for everything else
[23:20:06] <enebo[m]> if we have all the bits but not the formal pushing of those bits then we could verify and finish
[23:20:10] <enebo[m]> That would be slick
[23:21:08] <enebo[m]> Actually perhaps you can push and close on sonatype but not release through an API?
[23:21:17] <enebo[m]> API/maven.  Makes sense for this very issue
