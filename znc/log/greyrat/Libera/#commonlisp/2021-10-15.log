[00:01:43] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[00:09:37] *** Quits: Lycurgus (~juan@98.4.112.204) (K-Lined)
[00:17:29] *** Quits: stack_ (~stack@pool-108-29-7-131.nycmny.fios.verizon.net) (Quit: WeeChat 2.8)
[00:21:06] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[00:21:06] *** Joins: hayley (~theemacss@user/hayley)
[00:23:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[00:39:04] *** Joins: stack_ (~stack@pool-108-29-7-131.nycmny.fios.verizon.net)
[00:43:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:43:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[00:45:23] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:c8a4:f52d:5948:d394)
[00:50:13] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[00:51:09] *** Quits: stack_ (~stack@pool-108-29-7-131.nycmny.fios.verizon.net) (Quit: WeeChat 2.8)
[00:53:56] *** Joins: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c)
[00:54:34] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:55:02] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:56:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[00:56:22] *** Lord_of_Life_ is now known as Lord_of_Life
[00:57:52] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:00:06] *** Joins: stacksmith (~stack@pool-108-29-7-131.nycmny.fios.verizon.net)
[01:02:00] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[01:02:16] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[01:03:00] *** Quits: pve (~pve@188-67-244-139.bb.dnainternet.fi) (Quit: leaving)
[01:08:58] *** Joins: beach` (~user@2a01:cb19:150:3400:c6:70c3:435f:d71d)
[01:13:28] *** Quits: beach (~user@2a01:cb19:150:3400:c969:654c:71df:64a7) (Ping timeout: 268 seconds)
[01:17:11] <skeemer> what do you use macro for? and do you think macro is the only feature which keeps Lisp apart from other programming languages like python/ruby/golang and so on ?
[01:19:42] <kagevf> skeemer: macros are for building DSL and doing syntax abstraction. In addition to macros, image based dev, conditional system, CLOS (because it's method centric instead of class centric) are some other Lisp only* features ...
[01:20:32] <kagevf> * smalltalk as image based dev, and macros can be found to some degree in other languages. I think the conditional system and clos are unique to CL, though .... other Lisps have CLOS similars, though
[01:20:45] <skeemer> what is image based dev ?
[01:20:46] <kagevf> s/smalltalk as/smalltalk has
[01:20:58] <skeemer> kagevf, conditional system???
[01:21:00] <skeemer> the cond ?
[01:21:06] <skeemer> what is special about it ?
[01:21:24] <kagevf> skeemer: IOW, "the image" is the program running in memory ... you can interact with a program while it's running and modify small parts of it without having to re-build the whole thing
[01:21:48] <kagevf> skeemer: cond is a special form that's analogous to "switch" in algol derived languages
[01:22:16] <kagevf> skeemer: the conditional system includes things like exception handling, re-starts and more ... phoe even wrote an apress book about it
[01:23:02] <skeemer> kagevf, what book ?
[01:23:14] <skeemer> sorry kagevf what does IOW stand for ?
[01:23:18] <kagevf> check out the first 3 chapters of PCL to get a taste: https://gigamonkeys.com/book/
[01:23:38] <kagevf> but if you're just starting out, I recommend reading "lisp a gentle introduction" which is free online
[01:23:45] <kagevf> IOW is short for "in other words"
[01:24:29] <kagevf> phoe's book can be found here ... the CL conditional system: https://www.apress.com/us/book/9781484261330
[01:25:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:25:35] <Catie> Seconded on Common Lisp: A Gentle Introduction to Symbolic Computation. Super helpful book when I was starting out
[01:25:40] <kagevf> go to the common lisp sub-reddit - it has a side bar with lots of great resource links
[01:25:59] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:26:07] <kagevf> also, the cookbook link in the title bar to this chat room is a great resource
[01:27:00] <kagevf> skeemer: one cool thing about image development is that you can build and change your program without having to through a complete build cycle on each step
[01:27:47] <kagevf> you can even interact with apps you've deployed if you have to ... not a best practice necessarily but come in handy if you ever need it :)
[01:27:58] <kagevf> s/come in/comes in
[01:32:21] <skeemer> kagevf, thanks i understannd now...
[01:33:01] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[01:37:34] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[01:38:04] <kagevf> skeemer: great .... do you use emacs? emacs+slime is the recommended (but not only!) environment for coding CL
[01:38:23] <skeemer> yes kagevf
[01:38:31] <skeemer> i am using emacs with evil mode + slime
[01:39:57] <kagevf> nice
[01:41:04] <kagevf> then you're on the right track
[01:42:08] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[01:43:45] *** Joins: aeth (~aeth@user/aeth)
[01:45:06] *** Quits: gaqwas (~john@dynamic-095-117-114-024.95.117.pool.telefonica.de) (Ping timeout: 245 seconds)
[01:46:37] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:47:30] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[01:50:21] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:c8a4:f52d:5948:d394) (Remote host closed the connection)
[01:51:58] <pjb> skeemer: https://www.amazon.fr/Common-Lisp-Condition-System-Mechanisms/dp/148426133X
[01:53:11] <pjb> skeemer: have a look at Casting Spels in Lisp  Conrad Barski, M.D.  http://www.lisperati.com/casting.html
[01:56:49] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:56:56] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[01:57:22] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:02:50] *** Joins: selwyn_ (~selwyn@user/selwyn)
[02:08:08] *** Quits: frgo (~frgo@p200300deef0cee006ca0cd56a384a2c0.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:08:35] *** Joins: frgo (~frgo@p200300deef0cee00c43b6570bf802e49.dip0.t-ipconnect.de)
[02:11:34] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[02:11:44] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[02:17:34] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[02:19:52] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[02:21:46] *** Joins: dre (~dre@120.156.30.159)
[02:23:46] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:24:33] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[02:29:59] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[02:30:29] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:30:49] *** Joins: igemnace (~ian@user/igemnace)
[02:35:00] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[02:48:11] *** Joins: random-nick (~random-ni@87.116.183.117)
[02:52:17] <mzan> skeemer: I found Lisp syntax very nice for macros, for these reasons
[02:52:32] <mzan> ``(some-dsl-name ....)`` is rather clear to read and explicit
[02:52:52] <mzan> Lisp syntax is "uniformly ugly" so you can add to it various macro and DSL without thinking too much.
[02:53:20] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[02:53:26] <mzan> On the contrary it is more difficult to extend a language with an infix syntax like C, C++ in good way.
[02:54:19] <mzan> On other words: every DSL in Lisp seems native, while on other languages maybe not, because you had to extend the syntax in a nice way.
[03:01:27] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[03:04:15] *** Joins: notzmv (~zmv@user/notzmv)
[03:08:31] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:10:29] <stacksmith> mzan: many people find Lisp syntax "uniformly beautiful".  It's nice for macros the same way gloves are nice for human hands - Lisp syntax is what it is primarily to allow macros to manipulate forms, don't you think?
[03:10:57] <mzan> yes
[03:18:42] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[03:26:21] *** Quits: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c) (Ping timeout: 245 seconds)
[03:31:31] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[03:34:24] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:37:19] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[03:45:26] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:48:30] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[03:59:26] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[04:01:04] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[04:06:42] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: nyaa~)
[04:08:21] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[04:13:36] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[04:31:38] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[04:36:45] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[04:43:44] *** Joins: zazzerino (~user@2600:1700:6004:8470::23)
[04:52:11] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[05:06:23] <copec> For probably the best case comparison https://docs.julialang.org/en/v1/manual/metaprogramming/
[05:09:05] <copec> Julia is implementation defined, and changes at times :-(
[05:09:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[05:10:35] *** Joins: asarch (~asarch@187.143.94.246)
[05:11:21] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[05:24:33] <asarch> Any IRC client that is viewed in the web browser?
[05:25:19] <asarch> Just like Perl's Alice?
[05:30:33] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:33:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:36:30] *** Quits: paule32 (~paule32@user/paule32) (Read error: Connection reset by peer)
[05:37:02] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 265 seconds)
[05:46:08] *** Quits: zazzerino (~user@2600:1700:6004:8470::23) (Remote host closed the connection)
[05:50:04] *** Parts: akoana (~ah@user/akoana) (Leaving)
[05:51:28] *** Quits: prxq (~quassel@x4db3dadf.dyn.telefonica.de) (Ping timeout: 252 seconds)
[05:51:34] *** Joins: zazzerino (~user@2600:1700:6004:8470::23)
[05:51:56] *** Joins: prxq (~quassel@dynamic-077-012-144-101.77.12.pool.telefonica.de)
[05:52:37] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[06:04:10] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[06:17:19] *** Joins: semz (~none@user/semz)
[06:22:16] *** beach` is now known as beach
[06:22:27] *** ChanServ sets mode: +o beach
[06:23:03] *** beach sets mode: -o beach
[06:28:56] <asarch> beach, what is your native language?
[06:30:24] <beach> Good morning everyone!
[06:31:56] <beach> asarch: Assuming by "native language", you mean the literal meaning, i.e., the one I was born into, then it is Swedish.  But my "primary" language is English.
[06:34:30] <beach> asarch: But since I live in France, I am also a fluent speaker of French.
[06:34:52] <beach> Well, I guess that doesn't automatically follow, but it's true.
[06:34:58] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[06:35:11] <asarch> ?
[06:35:33] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[06:35:54] <asarch> Oh, that's great!
[06:36:10] <beach> Person P lives in country C doesn't automatically imply that P speaks the official language of C.
[06:36:25] <asarch> The same language of Bjarne Stroustrup then
[06:36:41] <beach> I believe his native language is Danish.
[06:37:02] * asarch checks...
[06:37:51] <asarch> Yeah, you're right. Dannish, Finnish, Sweddish...
[06:38:17] <beach> WOW, HOLD ON!  Finnish is in a completely different language family.
[06:39:00] <beach> asarch: I wouldn't say "Spanish, Portuguese, Hungarian", now would I?
[06:39:38] <asarch> I didn't know
[06:40:42] <beach> Either way, it's off topic.  Now, my primary (but not "native") programming language is Common Lisp.
[06:41:27] <asarch> What other programming languages do you know?
[06:41:59] <beach> asarch: Also, you should turn on your spell checker.  It would have caught your typos in two of the languages you listed.
[06:43:04] <beach> asarch: I have been exposed to quite a few, but whether I still "know" them, is a different story.  Not important either way.
[06:43:15] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:44:43] <beach> I have been using Common Lisp almost exclusively for more than 2 decades, and the languages I used before that have evolved.
[06:44:59] <asarch> *Danish, *Swedish
[06:45:08] <beach> Good!
[06:45:13] <asarch> My mistake
[06:47:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:47:39] <asarch> What operating system do you use?
[06:48:17] <beach> Only GNU/Linux.  Unfortunately there is nothing better.
[06:48:23] *** Joins: semz (~none@user/semz)
[06:53:38] <beach> ... but I am working on it, of course.
[07:01:38] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:02:10] *** Joins: srhm (~srhm@user/srhm)
[07:03:48] <Spawns_Carpeting> are there are "must have" cl libraries for basic things like strings, lists, file handling, etc? I am thinking something like dash and s for elisp for example
[07:04:23] <asarch> What distro?
[07:04:27] <Spawns_Carpeting> elisp actually doesn't make a terrible general purpose language using those libs and cl-lib
[07:05:46] <beach> Spawns_Carpeting: If, instead of referring to Emacs Lisp, you describe what it is you want, you might get better answers.  That said, Alexandria is a general-purpose library for many things that are useful additions to basic Common Lisp.
[07:06:29] <beach> Spawns_Carpeting: I am not going to read up on dash and s to answer your question, is what I am trying to say.
[07:10:23] <beach> Spawns_Carpeting: Emacs Lisp is not a "programming language" in my vocabulary, but a "programming system".  For something to be considered a "programming language" I require it to have a specification established by an "organization" that is separate from any of the suppliers of implementations of that language.
[07:11:36] <beach> Spawns_Carpeting: This features is essential for industrial use, because there must be some kind of guarantee that the interface does not change arbitrarily over time, thereby requiring clients to catch up with changes to the programming system.
[07:12:23] <Spawns_Carpeting> right beach I understand. dash is a library that adds many highly useful utility functions for lists. Examples are map, filter, remove, take, slice, reduce, min, max, some, any, split
[07:12:25] <beach> Spawns_Carpeting: That's why, in my talks to industry, I emphasize the importance of choosing languages with an independent standard, published by some credible standards organization, like ISO, ANSI, IEEE, etc.
[07:13:03] <beach> Spawns_Carpeting: All those are in standard Common Lisp, or can be had with a small amount of code.
[07:13:15] <beach> clhs map
[07:13:15] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_map.htm
[07:13:19] <beach> clhs remove-if-not
[07:13:19] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_rm_rm.htm
[07:13:27] <beach> clhs reduce
[07:13:28] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_reduce.htm
[07:14:12] <beach> I am pretty sure Alexandria supplies most of the "missing" ones.
[07:14:39] <Spawns_Carpeting> there are probably 100s of functions that dash provides but those are just the ones I could think of. s is basically the same idea but for strings. common lisps string handling felt a little weak when I used it
[07:15:12] <beach> I don't know what to say to such a statement.
[07:15:26] <beach> It sounds to me like you think you would be better off using Emacs Lisp.
[07:15:28] *** saturn3 is now known as saturn2
[07:15:28] <Spawns_Carpeting> I didn't mean to offend lol!
[07:15:41] <beach> Oh, I am not offended.
[07:16:06] <White_Flame> Spawns_Carpeting: everything in the sequences dictionary in the spec also applies to strings
[07:16:26] <White_Flame> as strings are vectors of chars, which are sequences
[07:16:45] <Spawns_Carpeting> how can you check if a string only contains uppercase letters in cl? or what about checking if it starts or ends with a given substring?
[07:17:42] <White_Flame> (every #'predicate string)
[07:18:23] <hayley> (notany #'lower-case-p string) ; assuming you're okay with non-alphabetic characters too
[07:18:37] <beach> Spawns_Carpeting: (every #'upper-case-p <string>)
[07:18:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[07:19:37] <White_Flame> alexandria has string prefix & suffix functions
[07:19:38] <beach> Spawns_Carpeting: I know Alexandria has STARTS-WITH.  Probably also ENDS-WITH.
[07:19:43] <Spawns_Carpeting> better example, set the first letter of every word to an upper case
[07:19:45] <White_Flame> although subseq + string= does it manually
[07:20:25] <Spawns_Carpeting> yeah alexandria sounds like what I am talking about. also uiop gives many helpful functions
[07:20:28] <beach> Spawns_Carpeting: This looks like an exercise it trying to find a function that Common Lisp doesn't have but that exists i s.
[07:20:30] <White_Flame> that example sounds more regexy
[07:21:10] *** Quits: zazzerino (~user@2600:1700:6004:8470::23) (Ping timeout: 252 seconds)
[07:21:23] <Spawns_Carpeting> my only point was that cl's built in string handling is a tad weaker than what you would get with say... python
[07:21:33] <White_Flame> yes
[07:21:38] <White_Flame> it's also much older
[07:21:41] <Spawns_Carpeting> though I agree many of them are trivial to roll on your own
[07:21:54] <White_Flame> but, alexandria, split-sequence, etc libs bring things up to reasonable par
[07:22:15] <White_Flame> and yes, people tend to make their own library of one-liners for stuff like this, tuned to whatever they happen to need for their project
[07:22:49] <beach> Spawns_Carpeting: (mapc #'nstring-capitalize <strings>) or something like that.
[07:23:15] <White_Flame> you'll also find CL to have more of a mindfulness to using fewer resources, so for instance splitting & rejoining many temporary substrings isn't something normally done in the standard stuff
[07:23:30] <White_Flame> although easy enough to do with mapping operations
[07:24:58] <White_Flame> python pushes for convenience of small things
[07:25:25] <Spawns_Carpeting> oh yeah there is certainly a different philosophy which is not a bad thing
[07:26:32] <Spawns_Carpeting> fwiw I like lisp and moreso common lisp a lot. I don't want to be banished to elisp forever! lol
[07:27:58] <Spawns_Carpeting> Alexandria is in the gentoo repo as well which is highly convenient
[07:28:16] <White_Flame> you should use quicklisp for pulling down lisp libraries
[07:28:31] <White_Flame> it manages downloading & loading dependencies
[07:29:37] <Spawns_Carpeting> is there any vetting of libraries in the quicklisp repo?
[07:30:00] <Spawns_Carpeting> i doubt that lisp libraries are an extremely common source of malware but you never know
[07:31:26] <White_Flame> I believe the only testing that is done is that all tests it includes must pass, and combinations of loads must work
[07:31:59] <White_Flame> QL has a laundry list of wishlist advancements
[07:32:45] <White_Flame> however, CL in general is distributed in source form, and I haven't seen any obfuscated stuff in the wild.  So it relies by default on openness in this security regard
[07:33:05] <White_Flame> (commercial implementations themselves obv notwithstanding)
[07:33:16] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:36:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:37:00] <jcowan> beach: It's not clear to me that C# is significantly less risky than Java, even though C# has a standard (ISO 23270) and Java does not.
[07:38:52] <beach> jcowan: In case it wasn't clear, I meant that a standard is a necessary (but not sufficient) condition.
[07:39:53] <waleee> 2003 C# was a very different beast compared to what ms is pushing now
[07:40:22] <White_Flame> well, a standard can't really do anything about library ecosystem malware anyway
[07:40:38] <hayley> I'd have to check the overlap between Java specifiers and Java implementors, but I suspect there is no overlap in people (but there would be an overlap in Sun/Oracle funding both).
[07:42:21] <beach> hayley: But by having the specification owned by a company means that they can attempt to sue people who use it in ways they don't like, as Google has experienced.
[07:42:41] <hayley> The Java 17 specification has James Gosling, Bill Joy, Guy Steele, Gilad Bracha, Alex Buckley, Daniel Smith and Gavin Bierman. I know the first four wouldn't have touched JVM source - yes, true.
[07:43:17] <Spawns_Carpeting> I am actually not a huge fan of official standards wrt programming languages. I do think it's useful for truly industrial software though
[07:43:38] <beach> hayley: Of course if you are Google, you have enough means to fight it, but if you are a small company or an individual, there is no hope.
[07:43:46] <hayley> Right.
[07:43:53] <Spawns_Carpeting> but thankfully my hobby projects aren't industrial ;)
[07:45:21] <waleee> beach: what are your thoughs on the recent foundation "owned" languages?
[07:45:49] <hayley> I think there is a catch-22 though; how do you get users, if the language should not be used until it is standardised? I assume that you won't bother standardising untill you have users.
[07:47:01] *** Joins: semz (~none@user/semz)
[07:47:45] <waleee> by the amount of cash ISO et al wants for a copy of a standard I assume you also dont bother because of financial reasons
[07:48:14] <beach> waleee: I am unaware of that recent tendency.
[07:48:47] <Spawns_Carpeting> that's one of the reasons I am not a fan of standardizing languages waleee. it also makes it much more difficult for common people to actually contribute to the standard
[07:50:00] <beach> Spawns_Carpeting: Oh, but you don't want "common people" to contribute to a language definition.  They just don't have the knowledge of language design or compiler technology to understand the consequences of their "contributions".
[07:50:46] <beach> Spawns_Carpeting: We see attempts here pretty much every week of "common people" wanting to revise the Common Lisp standard, and often in ways that would then make it impossible for the compiler to generate efficient code.
[07:50:50] <hayley> Having some kinds of contributions, no matter the experience of the author, is still in conflict with having a standard which doesn't change.
[07:51:02] <beach> That too.
[07:51:11] <waleee> beach: risking haleys ire, the rust foundation and some less high profile languages
[07:51:19] <hayley> 👀
[07:51:22] <jcowan> ISLisp, ST, and some other languages solved that problem by producing a pre-standard in the public domain
[07:51:23] <beach> Spawns_Carpeting: Maybe your projects are just a hobby, but Common Lisp is designed to be industrially viable.
[07:52:24] <Spawns_Carpeting> yeah I do see your point beach, but I am not advocating for introducing every random idea that a person comes up with either! I am a fan of how python handles this with "PEPs"
[07:52:31] <beach> waleee: I mean, what is the purpose of this tendency?  Just to have an independent organization in charge of the language specification?
[07:53:08] <White_Flame> as long as there is a cut & published standard, as opposed to an arbirarily changing webpage, a spec is a spec
[07:53:20] <beach> Spawns_Carpeting: You just gave a fantastic example of a language that basically can't have a compiler that generates efficient code.  I would definitely not want that for Common Lisp.
[07:53:22] <Spawns_Carpeting> there must be some minimum level of quality no matter what the case is, otherwise it's going to become a joke really fast
[07:53:54] <Spawns_Carpeting> yeah but I don't think that's because of it not having an official standard beach
[07:55:15] <Spawns_Carpeting> I hate to be the rust dude, but rust has a similar system where people can create rfcs on github, and the team decides whether they are worth considering or not
[07:55:17] <beach> Spawns_Carpeting: Sure it is.  The official standard would preferably be established by a bunch of people who have knowledge and experience in language design and compiler technology.  When you have "common people" establishing a specification, that's when you get aberrations like Python.
[07:55:32] <waleee> in the case of the rust foundation it seems unclear, they (by comments of different core developer groups) apparently isn't directly involved in the work
[07:57:01] <Spawns_Carpeting> the language devs and maintainers are still the "gatekeepers" in regards to quality, they just aren't "official" like legal standards committees are
[07:57:10] <White_Flame> Spawns_Carpeting: one unique thing about CL is that libraries can fundamentally change the language, without needing extra support from standard implementations for those features
[07:57:11] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[07:57:13] <beach> Spawns_Carpeting: The problem here is selecting the people who are capable of screening proposals.  Apparently, for Python this is not done in a way that would be acceptable to Common Lisp, since they accept design that is impossible to implement efficiently.
[07:57:50] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:58:15] <Spawns_Carpeting> yup I agree 100% beach, screening is good, but I am not sure ISO standard committees are the best method of screening for talent
[07:58:16] <hayley> waleee: I recall Steve Klabnik found an article claiming that Rust followed principles used at Amazon, said that was definitely not the case, then some time later, he decided to ditch his book-writing efforts.
[07:59:16] <hayley> So I'm...not comfortable with the idea of having a group of large companies fund a language any more than I'd be with just one company. Though the funding isn't supposed to affect language decisions on paper.
[07:59:20] <beach> Spawns_Carpeting: I think you have an incorrect idea of how ISO (or ANSI) standard committees are created.
[07:59:53] <Spawns_Carpeting> I know it costs a non-trivial amount of money which is a non-starter for a large amount of the world
[08:00:06] <jcowan> It's only a historical accident that CL has a stable standard: most standards have a definite lifecycle
[08:00:07] <waleee> hayley: yeah, I saw that debacle, but there was some other rust teams that claimed that this wasn't the case, with varying degrees of plausability
[08:00:22] <waleee> (ie being employed by amazon etc)
[08:00:50] <Spawns_Carpeting> though participation I guess doesn't cost (or does it?), but I imagine it still requires traveling which is also not possible for everyone. I could be wrong about these things though and am welcome to being corrected :)
[08:00:51] <beach> jcowan: I am extremely grateful for that historical accident, and it is a large part of the reason it is my preferred language.
[08:01:45] <jcowan> I'm not sure when Fortran 66 features were actually removed from the standard
[08:02:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[08:03:09] <jcowan> Fortran 95, apparently
[08:21:02] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[08:31:37] *** Quits: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df) (Quit: ERC (IRC client for Emacs 27.1))
[08:35:48] *** Joins: abraham (~abraham@143.244.185.86)
[08:41:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[08:41:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:41:58] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:48:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:52:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[08:54:13] <akater[m]> beach:  Is there a collection of examples of Python features that prevent compiling it to efficient code, preferably with explanations?  A blog entry, a book, an article, anything?
[08:54:48] <beach> I don't know.  But I know that the one that allows you to add a slot to an instance is very problematic.
[08:55:29] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[08:55:31] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:00:10] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[09:04:01] <beach> I haven't looked at Python for a while, but as I recall, their "list" data type allows for insertion and deletion of elements at arbitrary positions, thereby changing the number of elements.  Not sure if they introduced a more low-level sequence type since then.
[09:05:36] <beach> But that kind of "feature" makes the complexity of element access at least O(log n) worst-case.
[09:18:18] <beach> Or, rather, either the insert/delete operations take O(n) time in which case access can be O(1), or insert/delete/access all take O(log n) at least.
[09:30:25] <Spawns_Carpeting> do you mean the list which is pretty much a vector or the actual list
[09:31:21] <Spawns_Carpeting> can't remember if there is a more conventional non-contiguous list
[09:32:57] <hayley> A vector.
[09:33:22] <hayley> I remember the lecturer thought a Python list was a linked list and said "Ah, it's like Lisp..."
[09:33:43] <Spawns_Carpeting> don't all vectors allow for insertion into arbitrary locations? that would be weird to not support
[09:34:20] <Spawns_Carpeting> ofc you have to shift elements to insert like that, but that's just how vectors work
[09:34:21] <Alfr> Spawns_Carpeting, usually replacing something at a position, insertion not so much.
[09:34:23] *** Joins: gaqwas (~john@dynamic-077-009-045-149.77.9.pool.telefonica.de)
[09:35:08] <Spawns_Carpeting> i know c++ allows the same thing at least
[09:36:34] <Alfr> Spawns_Carpeting, is it possible? Certainly, you just described how, but worst case it costs O(n^2) to insert n elements.
[09:37:01] <Spawns_Carpeting> yeah of course, but you don't have to use it if you don't need it
[09:37:43] <akater[m]> I don't get this example.  Lisp lists also allow arbitrary insertion and deletion, and random access is expensive.  So this doesn't explain how Lisp design was better than that of Python's.
[09:37:56] <Spawns_Carpeting> that's what I was wondering as well akater[m]
[09:39:07] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[09:39:59] <Alfr> akater[m], does Python really not have something like linked lists?
[09:40:28] *** Joins: srhm (~srhm@user/srhm)
[09:41:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:42:53] *** Quits: asarch (~asarch@187.143.94.246) (Quit: alice.)
[09:44:07] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[09:46:19] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[09:51:16] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[09:51:49] *** Joins: amb007 (~a_bakic@206.150.22.93.rev.sfr.net)
[09:59:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:02:39] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[10:02:39] *** Joins: kdlv6 (~kdlv@c83-251-237-81.bredband.tele2.se)
[10:02:54] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:04:12] *** Joins: sgithens_ (sid10659@id-10659.helmsley.irccloud.com)
[10:04:54] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se) (Ping timeout: 245 seconds)
[10:04:54] *** sgithens_ is now known as sgithens
[10:04:56] *** kdlv6 is now known as kdlv
[10:05:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:06:57] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[10:16:24] *** Quits: amb007 (~a_bakic@206.150.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[10:17:09] *** Joins: amb007 (~a_bakic@15.15.23.93.rev.sfr.net)
[10:24:56] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:27:08] <akater[m]> Alfr:  I know ≈nothing about Python.  Only wrote a single Python script in my life.  I was just wondering about language design principles.
[10:27:08] <akater[m]> I know it has explicit return, distinguishes between statements and expressions, makes it hard to write lambdas, one guy can change something in it in a breaking way, and it's extremely popular.  In other words, I only know very bad things about it so I'm biased.  Oh, and during my system updates, Python is the only source of trouble.
[10:27:19] *** Joins: cranium (~cranium@user/cranium)
[10:27:26] <lisp123> Did I just read Emacs Lisp, Python, Rust, all in one log on Common Lisp?
[10:27:36] *** Quits: amb007 (~a_bakic@15.15.23.93.rev.sfr.net) (Ping timeout: 245 seconds)
[10:27:54] *** Joins: amb007 (~a_bakic@243.38.22.93.rev.sfr.net)
[10:29:55] *** Joins: makomo_ (~makomo@user/makomo)
[10:30:05] *** Joins: selwyn_ (~selwyn@user/selwyn)
[10:30:06] <lisp123> Spawns* (can't get an automcomplete) - Check out Cl-PPCRE: CL-PPCRE is a high-performance regular expression library written on COMMON LISP. Benchmarks suggest that for most regular expressions CL-PPCRE is roughly twice as fast as Perl, often much faster. And Perl has one of the fastest non-lisp regular expression engines around: a highly optimised engine written in C. How is this possible? Surely Perl's low-level implementation should have
[10:30:06] <lisp123> a performance edge over anything written in a high-level language like lisp.
[10:30:09] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[10:30:26] <lisp123> How's that possible? Time to Learn Lisp ;) Ref: https://letoverlambda.com/textmode.cl/guest/chap4.html
[10:33:52] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[10:36:22] *** Quits: gaqwas (~john@dynamic-077-009-045-149.77.9.pool.telefonica.de) (Ping timeout: 252 seconds)
[10:38:01] <hayley> lisp123: The answer is "compilation"; olde PCRE would interpret something to do with the regular expression, but CL-PPCRE would "compile" it to a chain of closures. It works okay, but now new PCRE with its own compiler is faster.
[10:38:01] <akater[m]> It has since lost the speed advantage, hasn't it?
[10:38:32] <hayley> lisp123: I am biased, having written it, but https://github.com/telekons/one-more-re-nightmare is, as the name suggests, the second RE nightmare for Common Lisp.
[10:41:07] <lisp123> hayley: Oh nice, very cool. Will check it out
[10:41:07] *** Quits: amb007 (~a_bakic@243.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:41:14] *** Joins: amb007 (~a_bakic@243.38.22.93.rev.sfr.net)
[10:41:15] *** Quits: amb007 (~a_bakic@243.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:41:27] <hayley> As the README suggests, it can be up to 28× as fast on SBCL, and even up to 202× as fast on ECL (as it doesn't seem to do fast function calls, but the C compiler loves DFAs).
[10:41:37] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:44:01] <lisp123> hayley: Nice. And it has to compile for each term searched?
[10:44:13] *** Joins: pve (~pve@188-67-183-24.bb.dnainternet.fi)
[10:44:59] <hayley> Sort of. Each pair of <regular expression × string type> has to be compiled, but it's cached. And, if runtime speed is less important than compile-time speed, I plan on implementing a "interpreter" which should still be faster than walking an NFA as CL-PPCRE does.
[10:45:38] <jackdaniel> high level languages may easily outperform low level ones when the task complexity raises -- less high-level code is easier to optimize by the programmer and high level constructs may hold more meaning to the compiler then a long list of separate instructions
[10:45:44] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[10:45:46] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[10:46:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:46:13] <lisp123> Very cool stuff. It's like rocket science to get things that fast :D
[10:46:21] <jackdaniel> a cute example of that is format ~r, the task of printing numbers as names on some of code golf sites shows taht lisp is very fast with it (because it is part of the standard)
[10:46:52] <jackdaniel> while solutions written in c or other languages are slower (perhaps they could be on par, but that would require considerable amount of code)
[10:47:32] <hayley> It's a combination of things. gilberth gave me an algorithm to convert tagged regular expressions to DFAs, I then wrote a code generator, and then tweaked it until the assembly looked better.
[10:49:03] <jackdaniel> hayley: what is "break even after"?
[10:49:39] <hayley> The number of characters for which compilation + runtime of this engine is equal to that of cl-ppcre (assuming cl-ppcre compilation is free, which is approximately true).
[10:50:03] <hayley> Though I've now implemented the same LOAD-TIME-VALUE trick that CL-PPCRE uses, so it is irrelevant for constant regular expressions.
[10:50:21] <jackdaniel> I see, thanks
[10:52:53] <hayley> lisp123: It's quite simple to make a half-decent compiler for a DFA though; just write a PROG form (also, hence the name), label each state, and have a CASE form which GOes to the next state.
[10:54:43] <lisp123> hayley: Interesting, thanks for the info. I will dip my toes into learning more on it in due course
[10:56:20] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[11:00:32] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:03:35] <hayley> Eventually I want to get a bit more performance by using SIMD instructions for constant strings, and heisig has kindly added the necessary functions to SB-SIMD to make that work.
[11:04:22] <beach> akater[m]: The more "primitive" type in Common Lisp would be a vector.  And in Common Lisp you can obviously easily use built-in functions to extend the size of a vector and move elements around.
[11:08:24] <beach> My point is that the programming language should contain implementations of the primitive types and then different libraries can make different compromises with respect to complexity of operations.
[11:08:37] * hayley has had two kernel panics while trying to send that message, so lisp123 better read it.
[11:09:35] <beach> It should not be up to the language designer to have opinions on whether access should be O(1) and insertion/deletion O(n), or whether all operations should be O(log n).
[11:10:13] <lisp123> hayley: lol
[11:13:52] *** Quits: prxq (~quassel@dynamic-077-012-144-101.77.12.pool.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:14:04] <hayley> No idea why. I mean, I get crashes every so often, but not two in the space of five minutes.
[11:15:02] <jackdaniel> great performance comes at a cost! ,-)
[11:15:33] <hayley> Well...
[11:21:22] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[11:22:20] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.3)
[11:24:10] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:38:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:47] <hayley> (I think I've almost gone full circle, as kingcons's excellent articles on compiling in cl-6502 motivated me to mess around with compiling on the fly, and he starred my repository today.)
[11:39:56] <hayley> (Maybe full circle would be to compile to 6502 assembly, then compile that to Common Lisp :)
[11:42:25] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[11:43:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[11:43:33] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:43:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:45:12] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:48:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[11:49:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[11:50:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:51:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:55:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[12:05:10] <ulfvonbelow> so I know for iterating over an arbitrary sequence (list or vector) I can use (map nil function seq1 ...), is there a standard way to iterate over a particular subsequence? So like (map nil ...) but with :start and :end arguments?
[12:05:37] <Shinmera> etimmons: https://twitter.com/Shinmera/status/1448930210955599872
[12:06:03] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[12:07:18] <Shinmera> ulfvonbelow: you could abuse FIND-IF for that.
[12:07:46] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[12:07:59] <Shinmera> Though I can't say I ever had to use something like that.
[12:14:13] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:17:30] <heisig> Shinmera: Did you really just develop another build system :D
[12:17:41] <Shinmera> well, not "just" but yes
[12:17:52] <heisig> You are a legend :)
[12:18:35] <Shinmera> still needs a bunch more work to be useful.
[12:19:18] <heisig> What is the rationale behind forge?  Is it to overcome some problems of ASDF, and if so, which ones?
[12:20:08] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[12:20:26] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:20:38] <Shinmera> ASDF doesn't deal with version constraints, is by necessity in-process, can't distribute the build, and can only deal with Lisp, not other languages. It also has some other design problems that I don't like.
[12:22:39] <heisig> I agree with almost all these points.  Except the one that ASDF can only deal with Lisp.  I cheerfully build my C libraries with ASDF :)
[12:23:03] <heisig> But having parallel or even distributed builds for CL would be great.
[12:23:12] <Shinmera> Well, I tried to make ASDF work well for C and gave up.
[12:23:42] <Shinmera> the design, especially it forcing the cache of operation objects, is just not meant for it
[12:24:30] <heisig> If Forge is somewhat language agnostic, it would make an excellent replacement for CMake and the like.  C++ is in dire need of a non-broken build system.
[12:24:39] <Shinmera> it is, yes.
[12:26:00] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[12:26:00] <Shinmera> The lisp language module is about 100 lines at the moment. https://github.com/Shinmera/forge/blob/master/modules/lisp/lisp.lisp
[12:26:01] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:26:06] <heisig> I guess building Kandria is one of the intended use-cases, right?
[12:26:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:26:18] <Shinmera> Not Kandria itself, but its mods.
[12:27:09] <Shinmera> I mean, eventually I'd like it to do everything, but we'll have to first see whether it scales at all
[12:28:16] <heisig> Ooh, there will be mods?  That sounds awesome.  Good luck with everything - I hear writing a reasonable build system is a breeze :)
[12:28:31] <Shinmera> yeah....
[12:30:09] <jackdaniel> "Wow it works!" is encouraging commit message ,)
[12:30:29] <Shinmera> My commit messages are always full of confidence
[12:30:46] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[12:32:18] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:32:21] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[12:32:37] <hayley> As long as the README doesn't consist of screaming, it's probably fine.
[12:32:41] <Shinmera> If anyone wants to follow development / get involved, #shirakumo is there :)
[12:32:47] <Shinmera> hayley: oh right I should fix that
[12:34:16] <Qwnavery> Shinmera: is this what I think it is?
[12:34:33] <Shinmera> I don't know, what do you think what is?
[12:35:06] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:35:07] <jackdaniel> warcraft 3 pre-mod pirated version?
[12:35:12] <hayley> (By the way, I took another stab at optimizing the table and it's within 15% or so of Java. But one of the things is to declare (safety 0), and I'd rather see what I need to remove from (safety 1) to make it safer.)
[12:35:44] <Shinmera> hayley: cool! I'm assuming you're eliminating GC as the cause of the 15%?
[12:35:54] <hayley> (No, I still don't have a proper way of testing tables, and I think my permission to use university servers is gone.)
[12:36:22] <jackdaniel> that would explain the smoke the other day
[12:36:51] <hayley> I...have not factored in such a thing, but hypothetically it shouldn't cons unless resizing, and I don't think the benchmark provided with NBHM causes resizes that often?
[12:36:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[12:37:23] <Shinmera> Well, Java definitely has an edge on SBCL in terms of GC performance, so
[12:38:13] <Qwnavery> Wait you're the person who made portacle?? o_O
[12:38:27] <Shinmera> Sadly, yea
[12:38:49] <Qwnavery> Erm, what
[12:38:54] <hayley> Yes, right. And the Java compiler probably is a bit smarter when it warms up. FWIW I had to disable bounds checks on 42nd-at-threadmill, as SBCL didn't spot that (LOGAND INDEX (1- LENGTH)) closes INDEX under LENGTH.
[12:38:57] <Qwnavery> *what's that supposed to mean?
[12:39:31] <Shinmera> Portacle is a project that has caused me a lot of pain, and I no longer have the mental strength to sustain more of it, so it stands unmaintained.
[12:40:12] <Shinmera> hayley: might be worth reporting that to #sbcl.
[12:40:23] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[12:40:53] <hayley> I'm not aware of what bounds checking elimination SBCL can do, admittedly.
[12:41:54] <Shinmera> Well, I'd hope it can do at least some :)
[12:42:27] <Qwnavery> Shinmera: my mind has been just blown
[12:42:31] <Shinmera> Why?
[12:43:42] <Qwnavery> I didn't even know you existed until now and your presence in the lisp community is huge. :/
[12:44:07] <Shinmera> Is it? I don't really know how to evaluate that kinda thing myself.
[12:44:16] <Shinmera> I know I used to be more active years ago.
[12:44:57] <Qwnavery> ._. I'm just blind lol
[12:45:02] <hayley> You get to meet a lot of cool people on #commonlisp.
[12:45:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:45:26] <Shinmera> Plenty of implementation maintainers around here.
[12:45:43] <Shinmera> Personally I think that's a far more impressive thing than the stuff I clobber together :)
[12:46:01] <Qwnavery> Your game looks really cool aswell
[12:46:05] <Shinmera> Thanks!
[12:46:09] <Qwnavery> :D
[12:46:42] <hayley> Shinmera: From someone who was told not to be so hard on themselves yesterday: don't be so hard on yourself.
[12:46:49] * hayley continues the chain
[12:46:51] <jackdaniel> as much as I agree with all the praise Shinmera receives, I feel obligated to remind about the channel topic
[12:47:08] <Qwnavery> jackdaniel: ofcourse, apologies
[12:47:24] <ulfvonbelow> wow! THE jackdaniel? The ECL maintainer and McCLIM developer???
[12:47:44] <jackdaniel> no,  that's someone else. topic people, topic.
[12:47:44] <heisig> Praising Shinmera is very much on topic for this channel, isn't it?  Then again, we can also carry our praises to #shirakumo :)
[12:47:49] <Qwnavery> >_> wait a minute... what. are you telling me...
[12:47:54] <hayley> (:
[12:48:12] <heisig> And if you want to praise jackdaniels, you can head over to to #ecl or #clim :)
[12:48:20] <Shinmera> hayley: Actually I'm fairly certain SBCL does do bounds check elimination in some cases, eg when the vector length and index bounds are known.
[12:48:25] * Qwnavery 's mind implodes
[12:48:55] <Shinmera> hayley: Too lazy to actually check with a disassemble though :v
[12:49:11] <hayley> Wow! MaRcO hEiSiG from Petalisp?!?!?!
[12:49:28] <Qwnavery> okok I get the idea. I'll stop.
[12:51:22] * heisig blushes :)
[12:52:36] <beach> Unlikely!
[12:54:16] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[12:54:27] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:54:40] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[13:05:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[13:08:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:14:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[13:15:45] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[13:17:45] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[13:18:17] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[13:20:46] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[13:23:05] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 260 seconds)
[13:23:28] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[13:25:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Quit: Leaving)
[13:25:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 245 seconds)
[13:26:40] *** Joins: Tomte (~th@p200300db9f1a1f0044cc1bcb6ff71d9e.dip0.t-ipconnect.de)
[13:28:36] *** Quits: Tomte (~th@p200300db9f1a1f0044cc1bcb6ff71d9e.dip0.t-ipconnect.de) (Client Quit)
[13:28:44] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:29:18] *** Joins: srhm (~srhm@user/srhm)
[13:31:53] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[13:32:04] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[13:33:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[13:33:31] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[13:36:19] *** Joins: attila_lendvai_ (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[13:44:05] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[13:46:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[13:46:43] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:46:48] <akater[m]> dolist and other similar constructs are wrapped into (block nil ..).  Why not (block dolist ..) ?
[13:46:48] <akater[m]> I'm asking because I write similar macros and I tend to use specific names.  But I also want to follow conventions.  Anything wrong with (block dolist ..) and such?
[13:47:13] *** Joins: amb007 (~a_bakic@227.38.22.93.rev.sfr.net)
[13:47:35] <jackdaniel>  nothing, but this provides little utility
[13:47:53] <jackdaniel> if you do (do-akater (…) (do-akater (…) …)) you shadow the scope anyway
[13:48:22] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:49:08] *** Joins: makomo_ (~makomo@user/makomo)
[13:49:45] <jackdaniel> also (reason-wise) DO is the basic lisp iteration construct, so if you build your own iteration macros they will likely expand to do
[13:50:18] <jackdaniel> and do already introduces a block nil scope, adding one on top of that is of course a possiblity but quite unnecessary
[13:50:24] <jackdaniel> otoh loop allows you to name the block
[13:50:46] <jackdaniel> does it make sense?
[13:51:17] <heisig> And nothing prevents you from wrapping another named block around dolist.
[13:51:45] <heisig> The implicit (block nil ...) convention is just to have RETURN do the 'obvious' thing.
[13:52:00] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[13:55:16] <akater[m]> At least when loops have different names, it's better to have distinct block names.  So overall it's marginally better to have them rather than not.  And I don't expand to do (never actually learned it, and have very little motivation to).  I expand to block-let-tagbody — to prog, basically.
[13:57:07] <jackdaniel> the fun fact is that what you manually do is what do does
[14:01:03] *** Quits: amb007 (~a_bakic@227.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:02:01] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:03:59] <akater[m]> Given that block-let-tagbody is prog, it is certain that I do what prog does.  Meanwhile,
[14:03:59] <akater[m]> > do iterates over a group of statements while a test condition holds.
[14:03:59] <akater[m]> — That doesn't sound like what prog does.  But anyway, I just don't find do intuitive.
[14:04:18] <akater[m]> BTW does anybody know of an implementation of a “cons tree” walker that detects cycles and offers implicit tagbody?  I couldn't find any and wrote one but I have a hard time believing it's not there already.
[14:06:50] <jackdaniel> I mean taht it expands to block let tagbody *and* go to ensure iteration :)
[14:06:59] <jackdaniel> (and stop condition)
[14:07:02] *** Quits: frgo (~frgo@p200300deef0cee00c43b6570bf802e49.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:07:29] *** Joins: frgo (~frgo@p200300deef0cee00c43b6570bf802e49.dip0.t-ipconnect.de)
[14:13:54] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[14:20:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:21:52] *** Quits: attila_lendvai_ (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[14:26:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[14:29:57] <pjb> akater[m]: note that blocks are lexical, ie. compilation-time constructs; normally (block foo (block bar (block nil (something (return-from bar result))))) should cost the same as (block bar (something (return-from bar result))); using block nil let us use (return result)  instead of the more verbose (return-from name result).
[14:30:44] <pjb> akater[m]: in your own macros, you can let the user specify the name of the block. cf (loop named foo do (return-from foo))
[14:32:49] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[14:35:58] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[14:36:18] <akater[m]> pjb: “named” syntax is not present in standard dosmth macros the interface of which my stuff mimics most often.
[14:42:39] <pjb> you can add it.
[14:42:49] <pjb> or use nil as the standard macros.
[14:43:54] <jackdaniel> (defmacro dosmth ((elt collection &optional result-form block-name) &body body)
[14:44:20] <jackdaniel> result is usually optional, so adding one more variable at the end doesn't hurt I think
[14:45:55] <jackdaniel> s/variable/parameter/
[14:46:11] <pjb> the exact term is parameter variable ;-)
[14:48:46] <jackdaniel> glossary speaks of a parameter :P
[14:49:30] <jackdaniel> http://www.lispworks.com/documentation/HyperSpec/Body/03_dd.htm also speaks of parameters (not parameter variables)
[14:50:00] <jackdaniel> I've found only defmacro to mention "parameter variables" from quick glance
[14:58:45] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 260 seconds)
[15:00:27] *** Joins: makomo_ (~makomo@user/makomo)
[15:06:19] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[15:08:17] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[15:08:38] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[15:10:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[15:18:15] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:18:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:22:22] *** Quits: xaotuk (~xaotuk@89.110.231.41) (Ping timeout: 252 seconds)
[15:23:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[15:24:14] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[15:25:12] *** Joins: Bike (~Glossina@71.69.170.70)
[15:25:12] *** ChanServ sets mode: +o Bike
[15:34:19] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:34:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[16:01:12] *** Joins: nature (~nature@45.32.235.173)
[16:02:53] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[16:02:57] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[16:14:55] <drmeister> Where do we post job openings for Common Lisp programmers?
[16:16:32] <jackdaniel> reddit, blog post, lispjobs.com, lisp professionals mailing list
[16:16:44] <hayley> Here?
[16:17:46] <jackdaniel> and irc of course (:
[16:17:49] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:23:44] <mfiano> I was going to say to my inbox, but those are probably better options.
[16:25:13] <jackdaniel> right, you may also spam individual developers if you know them
[16:25:45] <yitzi> I don't think lispjobs.com exists anymore
[16:26:30] <jackdaniel> oh
[16:26:47] <jackdaniel> it is true, thanks
[16:26:58] <yitzi> np
[16:27:15] <jackdaniel> hm, it was lispjobs.wordpress.com; last post is from 2018 though
[16:27:51] <yitzi> Ah.
[16:31:03] <_death> ordinary job posting sites would be nice as well.. so that if I search "lisp" I get at least one posting :)
[16:31:22] *** Joins: igemnace (~ian@user/igemnace)
[16:33:36] * mfiano would like to search (and "lisp" (not "clojure"))
[16:34:35] * jackdaniel expects of some brave lisp hacker developing 90%-feature-complete job posting and browsing engine after reading this exchange
[16:38:01] * rotateq is curious
[16:54:28] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[16:58:26] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 245 seconds)
[16:59:10] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[17:02:55] *** Joins: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df)
[17:04:34] <etimmons> Shinmera: Very nice :). If you're going where I think you're going with the list of module names passed to define-project I'm very excited.
[17:04:44] <etimmons> Shinmera: ASDF's single :class argument has annoyed me a couple times in the past.
[17:05:55] <Shinmera> parsing is still done by the first listed module, but yes you can list several. one extra module I already have is to allow specifying versions based on git repo state.
[17:10:30] <etimmons> Yeah, I saw a git module in the repo! It currently looks like any module but the first does nothing (other than being loaded), but I figured that's because it's still being developed
[17:10:50] <Shinmera> I wouldn't know how to combine the parse behaviours.
[17:12:13] *** Quits: JeromeLon (~jerome@2a00:23c7:999f:3700:3b14:9f18:a45b:5700) (Ping timeout: 265 seconds)
[17:12:13] <madnificent> Is there any good infrastructure for managing processes?  Thinking of moving some heavy-hit components from Elixir to Common Lisp due to processing constraints on the former.
[17:12:20] <etimmons> Yeah, I imagine that's tricky. But I was referring to the full list of modules not being attached to the project instance. Or are they and I'm missing something?
[17:12:41] <jackdaniel> madnificent: lparallel gives you some nice concurrency constructs
[17:12:41] <Shinmera> madnificent: you mean processes in the erlang sense? As in green-thread-y things?
[17:13:20] <Shinmera> etimmons: I don't know what you mean by 'attached'
[17:14:21] <etimmons> Shinmera: In https://github.com/Shinmera/forge/blob/master/project.lisp#L143, only the first module is used; the rest are load-module'd and then discarded.
[17:14:29] <Shinmera> yes
[17:14:42] <etimmons> I was expecting all modules to either influence the project class or be shoved into a slot for the project
[17:15:08] <Shinmera> Once the project has been parsed I'm not sure what the purpose of the modules would be
[17:15:25] <Shinmera> And again, not sure how they would coordinate the class
[17:17:16] <etimmons> ohhhhhhhh. I just actually looked at the git module and answered my own question
[17:17:34] <etimmons> Looks like having the git module loaded is enough
[17:18:04] <dieggsy> jackdaniel: lparallel looks neat, thanks
[17:18:27] <etimmons> Because ensure-version has EQL specializers
[17:18:49] <jackdaniel> sure
[17:19:11] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:19:31] <Shinmera> etimmons: right. auxiliar modules so far were intended to provide extensions somewhere in the system that don't directly affect project parse behaviour.
[17:20:30] <mfiano> Shinmera, etimmons: Is there a reason you both are independently developing similar tools? Do the ideas not overlap in many ways or something? I just thought it might be better to create a suite of tools like the SICL project that can be used by anyone wishing to create a build tool.
[17:20:45] <Shinmera> mfiano: we're not, though.
[17:20:46] <etimmons> Shinmera: I was assuming those methods would be specialized on the project class and you would do some sort of dynamic mixins stuff to have all the modules influence the project class
[17:20:56] <madnificent> Shinmera: yeah, more something like that.
[17:21:08] *** Joins: zazzerino (~user@2600:1700:6004:8470::23)
[17:21:19] <Shinmera> madnificent: unfortunately to my knowledge there's no current implementation with support for lightweight threads, and doing it manually is a pain.
[17:21:25] <madnificent> jackdaniel: Looking for higher abstractions like asynchronous messenger abstractions.
[17:21:43] <Shinmera> I know there are libraries implementing mailboxes and queues and such.
[17:21:57] <mfiano> Shinmera: You fooled me then
[17:21:58] <jackdaniel> Shinmera: I think that cmucl has (had?) green threads
[17:22:17] <Shinmera> hm!
[17:22:53] <Shinmera> mfiano: etimmons is working on a ql replacement. I'm working on an ASDF replacement. We're already talking about integrating the two.
[17:22:54] <jackdaniel> ecl had (until 2010) and will have (since 2022) green threads as well
[17:23:08] <madnificent> Shinmera: Perhaps I got dragged away with it being closer than jackdaniel's idea.  We can work with worker pools.  We currently process ~5k queries per second.  The many threads in the BEAM VM have their cost for our type of workloads in terms of immutable data structures anyway.  We probably don't need over 20k open connections anyhow so I think we should be able to work with dedicated threads if need be.
[17:23:17] <Shinmera> jackdaniel: Nice, I was going to ask when that was expected to be completed
[17:23:34] <mfiano> Shinmera: I see!
[17:23:39] <jackdaniel> well, there are many things going at the same time, so they are moving slowly
[17:23:43] * jackdaniel smiles wryly
[17:24:01] <madnificent> We certainly need multithreading for the processing load.  We currently scale 24cores with 48threads very linearly and I don't see why we wouldn't be able to replicate that in Lisp when I look at the workload.
[17:24:04] <Shinmera> madnificent: Good luck! I rewrote my chat server thing in elixir since I couldn't get it stable in Lisp, but that's saying more about me than anything I imagine :)
[17:24:24] <Shinmera> jackdaniel: All too familiar with that myself
[17:24:29] <mfiano> I've been using CLPM for a couple months and have been happy. Having an ASDF alternative too would be even more welcome :)
[17:27:31] <etimmons> mfiano: Yeah, I'm pretty excited about Forge. Both it and CLPM take the approach of doing the heavy lifting outside of the development image.
[17:28:19] <jackdaniel> oh, now I'm getting excited
[17:28:38] <jackdaniel> I'm quite disappointed that asdf wants to assert itself into every final build
[17:28:54] <etimmons> jackdaniel: You're not the only one
[17:28:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:29:10] <mfiano> Exciting times in Lisp's future.
[17:29:11] <Shinmera> One of Forge's main goals is to allow building in the current image with no trace left behind of the build operation itself.
[17:29:28] <mfiano> And to think there was talk about CL dying just a little while ago in #lisp
[17:29:47] <Xach> No deader than usual
[17:29:53] <Shinmera> CL is dying, after all, have you heard when its last standard was written????
[17:30:00] <Shinmera> honestly unusable
[17:30:06] <jackdaniel> etimmons: while mere a prototype -- https://gitlab.common-lisp.net/dkochmanski/esdf (it even has asdf compat layer, I've made ql work with it)
[17:30:13] <jackdaniel> not worked on it for years though
[17:30:28] *** Joins: lisp123_ (~lisp123@45.86.202.12)
[17:30:47] <mfiano> A software eternity ago. I must jump to Python in time for the 4.x compatibility disaster
[17:31:04] <jackdaniel> Shinmera: I had a sour exchange on #lisp a few minutes ago about that ,) either way, time for me - laters
[17:31:27] <etimmons> jackdaniel: I had no idea about esdf, I'll take a look at it!
[17:31:54] <jackdaniel> etimmons: dont' take it too seriously, it didn't pass to a "usable" stage and my projects are already time-starved as they are
[17:32:28] <etimmons> Yeah, it's always fun to see others' thoughts on these things, though
[17:33:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[17:34:25] <etimmons> Xach: Total change of subject, but can you make sure Planet Lisp is pulling its feed from https://www.timmons.dev/tag/common-lisp-rss.xml ? Some day I'll probably blog about something other than Common Lisp :)
[17:37:01] <Xach> ok
[17:39:19] <madnificent> Shinmera: problem with Elixir is that you can't mutate objects.  We parse and transform SPARQL queries and the AST becomes fairly large.  Transforming that means transforming many tiny things.  I am a bit in doubt as the BEAM knows it can throw away a thread, where the Lisp runtime has to execute GC across threads once everything has been processed.
[17:39:51] <madnificent> Shinmera: Do you know of good queues and/or mailboxes libraries?  If anything has a good name, I'd love to know about it.
[17:39:52] <Shinmera> yeah
[17:39:56] <Shinmera> uuuh
[17:40:10] <Shinmera> Haven't used anything myself so I can't say, I just remember hearing of Erlang-inspired libraries.
[17:40:24] <Shinmera> doing a search on quickdocs for erlang ought to find things.
[17:40:51] <mfiano> I remember sykopomp wrote a couchdb client in Lisp way back in the day
[17:42:53] <mfiano> ahh chillax, haven't used this in a decade or more https://github.com/zkat/chillax
[17:46:22] <etimmons> Xach: Thanks! Also, not sure if you saw, but I did open a PR for a compressing stream in salza2.
[17:46:30] <Xach> etimmons: thanks for the reminder
[17:47:24] <etimmons> Xach: I also opened a PR on QL controller to try and improve dependency extraction for package-inferred-systems
[17:51:08] <madnificent> mfiano: I paired on that and wrote jsown for it at the time.  Fun times.
[17:51:38] <madnificent> Shinmera: good idea!
[17:58:34] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[18:07:08] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:3cb1:c1ee:97df:becb)
[18:07:57] <mfiano> madnificent: I remember. Though sexml is the library of yours I used the most back then :)
[18:08:22] * mfiano <-- axion
[18:09:17] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[18:11:28] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:12:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:12:25] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:3cb1:c1ee:97df:becb) (Quit: Konversation terminated!)
[18:13:44] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:d5a8:feca:7e29:db08)
[18:13:48] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[18:17:29] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Client Quit)
[18:19:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:19:49] *** Quits: lisp123_ (~lisp123@45.86.202.12) (Remote host closed the connection)
[18:27:47] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[18:27:49] *** Joins: Josh_2 (~user@37.25.47.130)
[18:28:05] <Josh_2> Hi hi
[18:28:16] <beach> Hello Josh_2.
[18:30:22] <Josh_2> Okay MOP question. I have a library that heavily relies on a metaclass I have made, however when I first load the library I have to make an instance of a class that uses my metaclass 3 times before the slots are initialize properly
[18:30:45] <Josh_2> What method call am I missing?
[18:32:43] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[18:33:05] <Josh_2> Man I get some weird behaviour with MOP until I go and recompile that specific class
[18:33:15] <scymtym> C2MOP:ENSURE-FINALIZED?
[18:33:21] <Josh_2> That might be it
[18:33:25] <Josh_2> I'll check
[18:33:25] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:33:55] <madnificent> mfiano: axion!  Yay!  Hello!
[18:34:26] <mfiano> Hello :)
[18:36:02] <Josh_2> scymtym: I think that worked, thanks
[18:36:20] <scymtym> Josh_2: sure
[18:37:14] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:37:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[18:38:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[18:39:34] *** Joins: aeth (~aeth@user/aeth)
[18:39:39] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:40:42] <Josh_2> hmm
[18:43:16] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[18:44:36] *** Joins: makomo_ (~makomo@user/makomo)
[18:46:44] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:3475:b970:7aa6:a1c7)
[18:46:44] <Josh_2> Okay now I'm really confused. When I make-instance my my repl and check the slot-values in its superclass they all look how I expect them
[18:47:04] <Josh_2> however when I make an instance of the same class within a function call none of the slot-values exist
[18:47:15] <Josh_2> they are all nil
[18:48:22] <Josh_2> after 2/3 attempts at calling the function it works
[18:48:35] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 260 seconds)
[18:50:01] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[18:54:03] <Josh_2> well my execution function is getting double called, I'll have to figure that one out
[18:55:20] <madnificent> Any benchmark comparisons including Common Lisp (SBCL preferably) containing many threads and if possible containing GC intensive workloads?
[18:55:40] <Josh_2> or not :(
[19:01:46] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[19:10:09] *** Joins: makomo (~makomo@user/makomo)
[19:11:30] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:24:59] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[19:25:48] *** Quits: raeda_ (~raeda@72.49.219.33) (Quit: Leaving)
[19:26:51] *** Joins: rogersm (~rogersm@90.166.177.48)
[19:28:06] <Shinmera> madnificent: hayley might have some stuff from her work on lockless hash tables.
[19:34:02] <madnificent> Related to netfarm perhaps? Anything is welcome hayley and I should see DMs arrive too.
[19:37:46] <Shinmera> I don't know the broader context. I wrote the initial lockless hash table implementation, and she's been hammering away at it for a while.
[19:41:25] *** Joins: JeromeLon (~jerome@185.201.63.254)
[20:01:21] *** Quits: zazzerino (~user@2600:1700:6004:8470::23) (Ping timeout: 268 seconds)
[20:04:09] <madnificent> Shinmera: was that incompatible with later SBCL releases?  I checked something about it but dismissed it for some reason.
[20:04:44] <Shinmera> ? not to my knowledge?
[20:05:06] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 265 seconds)
[20:05:09] <Shinmera> I didn't end up using it myself, so it's not on ql yet.
[20:05:28] *** Parts: Catie (~user@24.19.51.175) (Killed buffer)
[20:05:40] *** Joins: JeromeLon (~jerome@185.201.63.254)
[20:06:27] *** Joins: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84)
[20:11:11] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 264 seconds)
[20:12:28] *** Joins: JeromeLon (~jerome@185.201.63.254)
[20:16:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:20:07] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 240 seconds)
[20:20:07] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:20:27] *** Joins: amb007 (~a_bakic@195.38.22.93.rev.sfr.net)
[20:21:23] <Gnuxie> she will explain it when she wakes up, but as i understand it Threadmill only works with older versions of SBCL, and she doesn't recommend her portable hash table library over luckless yet.
[20:21:23] *** Quits: amb007 (~a_bakic@195.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:21:30] *** Joins: JeromeLon (~jerome@185.201.63.254)
[20:22:33] *** Joins: amb007 (~a_bakic@195.38.22.93.rev.sfr.net)
[20:22:52] <Shinmera> If anyone wants to pick up the slack and document the library + add some more small useful primitives like a queue and a stack, that would be great
[20:23:00] <Shinmera> *the library being Luckless.
[20:23:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[20:24:13] <Shinmera> lockless vector would also be great
[20:24:24] <Shinmera> (though probably as difficult as the hash table, so)
[20:25:43] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:27:13] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[20:27:37] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 252 seconds)
[20:28:16] <Gnuxie> Also madnificent, if you need a portable mailbox and queue library "safe-queue" by deadtrickster is good, but it isn't lockless or anything fancy iirc.
[20:30:33] <Gnuxie> https://github.com/deadtrickster/safe-queue
[20:30:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:31:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:35:11] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:3475:b970:7aa6:a1c7) (Remote host closed the connection)
[20:36:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[20:37:30] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[20:40:31] *** Joins: JeromeLon (~jerome@185.201.63.254)
[20:48:23] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 264 seconds)
[20:49:14] *** Joins: JeromeLon (~jerome@185.201.63.254)
[20:56:07] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:59:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:01:35] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 264 seconds)
[21:02:31] *** Joins: JeromeLon (~jerome@185.201.63.254)
[21:05:01] *** Quits: amb007 (~a_bakic@195.38.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:05:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:05:39] *** Joins: amb007 (~a_bakic@23.148.22.93.rev.sfr.net)
[21:05:55] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[21:10:20] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 260 seconds)
[21:10:50] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 265 seconds)
[21:12:10] *** Joins: JeromeLon (~jerome@185.201.63.254)
[21:15:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[21:16:20] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[21:16:46] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[21:19:32] *** Quits: JeromeLon (~jerome@185.201.63.254) (Ping timeout: 265 seconds)
[21:20:47] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 264 seconds)
[21:21:01] *** Quits: amb007 (~a_bakic@23.148.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:21:15] *** Joins: amb007 (~a_bakic@116.107.204.77.rev.sfr.net)
[21:27:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:32:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:33:01] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[21:34:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[21:36:35] *** Joins: aeth (~aeth@user/aeth)
[21:37:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[21:38:34] *** Quits: amb007 (~a_bakic@116.107.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:39:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:03:03] *** Joins: gaqwas (~john@dynamic-077-009-045-149.77.9.pool.telefonica.de)
[22:06:00] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[22:07:06] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:08:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:08:53] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:15:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:19:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:19:43] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:20:18] *** Joins: JeromeLon (~jerome@206.159.207.77.rev.sfr.net)
[22:38:25] <pjb> drmeister: there's a pro CL mailing list. pro@common-lisp.net
[22:38:58] <pjb> https://mailman.common-lisp.net/listinfo/pro
[22:39:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:44:02] <Josh_2> I am trying to (setf (slot-value <instance with my own superclass> 'txn) 0) and I keep getting the condition that slot is missing. I have checked both the direct and effective slots
[22:44:14] <Josh_2> its not missing. Do I have to provide a method for something like slot-value-using-class?
[22:46:16] <drmeister> jackdaniel, hayley, pjb - thank you.
[22:46:23] <White_Flame> Josh_2: package problem with 'txn?
[22:46:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:46:54] <Josh_2> ha yeh it was
[22:54:20] <pjb> Josh_2: possibly.  Do you mean <instance of a class of your own metaclass> ?
[22:54:29] <pjb> Otherwise, indeed, package.
[22:54:38] <Josh_2> It was the package
[22:54:50] <Josh_2> I thought I'd broken something, fortunately not :)
[23:07:11] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 268 seconds)
[23:09:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:12:52] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[23:13:47] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:17:00] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:17:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:20:19] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:20:27] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[23:35:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:42:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[23:43:55] *** Quits: pve (~pve@188-67-183-24.bb.dnainternet.fi) (Quit: leaving)
[23:49:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:55:33] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
