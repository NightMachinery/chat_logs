[00:01:00] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[00:02:01] *** Joins: magla (~gelignite@d536536e.access.ecotel.net)
[00:03:21] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:06:11] *** Joins: proller (~p@80.240.216.69)
[00:13:32] *** Quits: Deneb (~johnch@128.82.159.143.dyn.plus.net) (Quit: Leaving)
[00:20:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:22:19] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[00:23:05] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:7809)
[00:26:10] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[00:28:16] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 245 seconds)
[00:32:17] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 240 seconds)
[00:37:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:40:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:40:58] *** Joins: proller (~p@2a02:6b8:b081:b587::1:11)
[00:42:09] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[00:43:18] *** Quits: jokoon (~eio@2a01:e0a:542:e160:5997:2cc6:43a7:4f4e) (Quit: Leaving)
[00:43:57] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[00:44:07] *** Joins: ipe_ (~ipe@91-156-246-15.elisa-laajakaista.fi)
[00:44:35] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Ping timeout: 240 seconds)
[00:44:45] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[00:44:54] *** Quits: ipe (~ipe@91-156-246-15.elisa-laajakaista.fi) (Ping timeout: 252 seconds)
[00:54:10] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[00:54:14] *** Quits: ipe_ (~ipe@91-156-246-15.elisa-laajakaista.fi) (Remote host closed the connection)
[00:54:32] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[00:55:40] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[00:56:05] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[01:02:10] <c4017w_> I'm having a problem where using `static  inline` make my code much bigger compared using `extern` and defining the data in a separate source file. Can someone explain it? I've created a test case here: https://godbolt.org/z/svvv5W5qz  in 'ERR.h' you can uncomment the `USE_EXTERN` line and see the output size change
[01:04:36] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[01:04:57] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[01:07:12] <OnlineCop> !#
[01:07:14] <nolyc> Stringize/stringification, see <http://www.dis.com/gnu/cpp/Stringification.html>.
[01:07:26] <ville> c4017w_: are you looking at the text section or?
[01:08:16] <OnlineCop> ^ That link is giving me a "Not Found" result...
[01:08:35] <c4017w_> ville, yes it's about 1K larger when using static inline
[01:08:36] <OnlineCop> Sorry, the !# was for myself. I'm trying to understand # vs ## in #defines.
[01:08:50] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:09:05] *** test_ is now known as _flood
[01:11:41] <ville> c4017w_: where is the definition of the extern case?
[01:13:22] <ville> c4017w_: quickly looking i can't locate the definition of the variable for the extern case
[01:14:07] <c4017w_> ville, it's in ERR.cpp
[01:15:31] <ville> oh for some reason all the files were scrolled down so no code was showing
[01:16:56] <cbreak> c4017w_: static means the variable is local to a TU
[01:17:06] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:17:36] <cbreak> so each file will have its own copy of the variable
[01:17:42] <cbreak> each compiled .cpp file
[01:17:49] <c4017w_> oh
[01:17:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:18:27] <c4017w_> Is it possible to make a single copy of it when defining it in a header file?
[01:18:33] <cbreak> remove the static
[01:18:54] <cbreak> with static you request that each TU gets its own variable copy
[01:19:17] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:19:29] <c4017w_> cbreak, I get the same result without the static keyword
[01:20:52] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:21:00] <cbreak> duplicates will only be removed when linking I think
[01:21:55] <c4017w_> so I need to enable lto?
[01:22:01] <cbreak> I don't think that's needed
[01:22:33] <c4017w_> hmm well I'm not sure what to change to get it to work
[01:22:34] <cbreak> inline variables alone should solve the problem. Or defining the variable in one source file and using extern everywhere else.
[01:22:55] <cbreak> an other traditional way with older c++ versions was to define an inline function with a static function local variable, kind of a singleton
[01:23:22] <c4017w_> oh let me try that
[01:23:43] <c4017w_> I'm trying to make this a header only library. normally I would just put it in a source file and be done with it
[01:25:49] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:39] <cbreak> when I test it with your example, inline is slightly smaller than static inline, as expected
[01:27:44] <cbreak> 100 vs 32 in bss
[01:29:08] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:7941:5309:c959:b6c3)
[01:29:09] <c4017w_> I'm more worried about text and data
[01:29:30] *** Quits: jsbach (~jsbach@2a01:c22:349c:3100:92e4:b61b:fb6f:e371) (Remote host closed the connection)
[01:30:07] <c4017w_> Looks like the initialization of the map is being duplicated, not the object itself. In the assembly I see two large functions for R1::Init and R2::Init when they should be very small
[01:30:16] <c4017w_> not the data*
[01:30:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1e5:681d:af1f:ca64) (Ping timeout: 245 seconds)
[01:30:37] <cbreak> having inline instead of static inline is about solving the storage duplication
[01:30:39] <cbreak> not the code
[01:31:09] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:31:19] *** Joins: jsbach (~jsbach@2a01:c22:349c:3100:1c48:da04:eabd:52e5)
[01:31:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:31:50] <cbreak> having the definition in a header might make the compiler "optimize" and inline a ton of code for you
[01:32:06] <c4017w_> I see. So there will only be one copy of the actual string data, but the map object will still be created once per TU?
[01:33:17] <LordKalma> someone paste here my inline rant
[01:34:16] <LordKalma> found it
[01:34:17] <LordKalma> Jan 17 15:48:55 <LordKalma>	"The inline specifier (contrary to the popular belief about inlining in the compiler sense), serves to mark that a function can be defined in many TUs (as long as the definitions are identical). This usually happens via multiple header includes, so this is the place to define them. The nuanced effect of this is making
[01:34:17] <LordKalma> the definition available in the TUs the function is used, therefore indirectly helping compiler inlining."
[01:35:09] <cbreak> c4017w_: I don't think so
[01:35:23] <cbreak> but the code to access the map might be inlined
[01:35:27] <cbreak> there's just one object
[01:35:32] <cbreak> but the code is not in the object
[01:35:45] <LordKalma> `-O0` and we're discussing binaray size?
[01:35:55] <LordKalma> `-Os` exists for a reason
[01:36:08] <c4017w_> same thing with -Os
[01:36:47] *** Joins: AmR (~AmREiSa@156.199.197.9)
[01:37:26] *** Quits: jsbach (~jsbach@2a01:c22:349c:3100:1c48:da04:eabd:52e5) (Ping timeout: 245 seconds)
[01:37:33] <LordKalma> !static
[01:37:34] <nolyc> When used inside a function, the static keyword indicates that a variable is shared between all calls of the function. When used inside a class, it indicates that the variable or function is a member but is not tied to a specific instance. When used inside a namespace, it specifies internal linkage.
[01:37:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:38:05] <c4017w__> damn this network connection
[01:38:29] <c4017w__> I'm gonna try to simplify this even more to remove std::map. The assmebly is too hard to follow
[01:38:41] <cbreak> LordKalma: this is about inline variables, not inline functions
[01:39:43] <cbreak> (although I think the real problem are the implicitly inline functions that are part of map)
[01:39:55] <cbreak> c4017w__: practically, for static data, do you even need a map?
[01:40:03] <cbreak> something like a boost::flat_map might be better
[01:40:14] <cbreak> or even a dense vector if your indices are densely packed enough
[01:41:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:41:41] <c4017w__> yeah its all constant data so I eventually want to use something other than std::map. I'll check out flat map
[01:41:56] <c4017w__> But I wanted to understand what the heck is going on first
[01:43:22] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:29] *** ChanServ sets mode: +v npaperbot
[01:44:51] <LordKalma> I'km not sure you should be using maps to string views
[01:45:04] <LordKalma> you don't want string_views, you want string, right?
[01:45:12] <LordKalma> like, the actual data
[01:45:48] <c4017w__> It's constant data. I think string_view is ok?
[01:46:56] <rpav> if you're making like const/constexpr maps to/from static strings then string_view probably ok
[01:47:06] <rpav> better than char* if that were the alternative
[01:47:27] <LordKalma> yeah, I noticed using std::string makes it larger
[01:47:29] <LordKalma> interesting
[01:47:54] <rpav> well string will basically copy from already-existing string in the loaded binary to some new space
[01:48:04] <rpav> if you want to change it that's great obviously
[01:49:47] <LordKalma> I'm going to say it. Compact mappings between ints and string data is what the moc does best haha
[01:50:06] <cbreak> c4017w__: it's slightly smaller like this: https://godbolt.org/z/KE4Y3onrK ... but really, I'd use a flat map like thing
[01:50:13] <cbreak> the map overhead seems to be the main killer
[01:50:49] *** Joins: jsbach (~jsbach@2a01:c22:349c:3100:f4a0:d9be:fc7:641a)
[01:51:01] <LordKalma> we need Turner
[01:51:32] <LordKalma> he'd make some constexpr foo that would compile down to 2 asm instructions and only use the CPU registers and zero ram
[01:51:56] <LordKalma> (when he made the comodore pong game, the final binary ran on only the registers, zero ram usage, amazing, really)
[01:54:37] <c4017w__> I can't reproduce it without map, so I also think it's just a optimization/inlining fail
[01:54:51] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c) (Read error: Connection reset by peer)
[01:55:02] <LordKalma> can clang target arm?
[01:55:06] <LordKalma> have you tried it?
[01:55:09] *** Quits: AmR (~AmREiSa@156.199.197.9) (Quit: Konversation terminated!)
[01:55:15] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:7809) (Ping timeout: 256 seconds)
[01:55:50] <c4017w__> haven't tried. That's more effort than I'm willing to go through right now though
[01:56:29] *** Joins: p-i- (~Ohmu@2403:6200:8978:1f05:d955:b290:e5c0:8cc6)
[01:56:57] <cbreak> c4017w__: https://godbolt.org/z/GaE5aWbG4, with a manual hack-job of a flat map
[01:57:34] <cbreak> in proper code you'd have to handle not finding the entry :)
[01:58:04] <LordKalma>  /usr/bin/ld: cannot find -lstdc++ when trying to use clang arm on that code
[01:58:05] <LordKalma> weird
[01:58:39] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:59:22] *** Quits: jsbach (~jsbach@2a01:c22:349c:3100:f4a0:d9be:fc7:641a) (Remote host closed the connection)
[01:59:35] <LordKalma> ah it doesn't have arm linux for clang
[02:01:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:01:35] <c4017w__> cbreak, ha nice. but text is still a bit bigger with `inline` vs `extern` which is mostly what I'm worried about
[02:01:41] *** Joins: jsbach (~jsbach@2a01:c22:349c:3100:1ffd:53c0:7cdc:8dbc)
[02:02:57] <cbreak> it might still inline more.
[02:03:41] <c4017w__> LordKalma, this is for bare metal armv7 btw. Doesn't look like there's a readily available version of clang for that
[02:04:20] *** Quits: jsbach (~jsbach@2a01:c22:349c:3100:1ffd:53c0:7cdc:8dbc) (Remote host closed the connection)
[02:07:16] *** Joins: jsbach (~jsbach@2a01:c22:349c:3100:7876:1e0e:3d:7e93)
[02:07:27] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[02:08:29] *** Quits: Devtron2 (~Devtron@D4708984.rev.sefiber.dk) (Remote host closed the connection)
[02:24:51] *** Quits: jsbach (~jsbach@2a01:c22:349c:3100:7876:1e0e:3d:7e93) (Remote host closed the connection)
[02:26:52] *** Joins: jsbach (~jsbach@2a01:c22:349c:3100:1804:f68c:251c:8c5a)
[02:38:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:39:06] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:41:27] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:47:55] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[02:49:14] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:11e5:11d:3263:7873)
[02:49:57] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[02:52:00] *** Joins: markong (~kvirc@213.146.188.203)
[02:52:06] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[02:53:17] *** Joins: ferdna (~ferdna@user/ferdna)
[02:55:50] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[02:55:58] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[03:04:38] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c)
[03:07:48] *** Quits: p-i- (~Ohmu@2403:6200:8978:1f05:d955:b290:e5c0:8cc6) (Ping timeout: 240 seconds)
[03:12:17] <Hello71> if it's bare metal then you just use any clang
[03:12:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:16:29] <yolo> can I just use struct{T result, int error_code} for all my own APIs, no std::option|expect|pair|whatever? I will always do `auto [result,err]=myapi()` and just like golang, check err first for errors
[03:16:56] *** Quits: magla (~gelignite@d536536e.access.ecotel.net) (Quit: Stay safe!)
[03:16:58] <yolo> the std::opton|expect|variant|... just make me dizzy
[03:17:21] <yolo> with struct, I can even do it with C apis down the road
[03:18:34] <yolo> make it simple, but not simpler
[03:22:49] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[03:25:48] <kalven> you can
[03:26:26] <kalven> is it a good idea? maybe, maybe not
[03:27:21] <great_taste> how to do an `if constexpr(has_member(T, var))` to check if a type has a member variable?
[03:29:45] <LordKalma> it's a fun exercise in SFINAE
[03:29:50] <great_taste> nah maybe I do not need that
[03:31:33] *** Quits: proller (~p@2a02:6b8:b081:b587::1:11) (Ping timeout: 252 seconds)
[03:31:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:38:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:40:58] *** Joins: Guest5734 (~Guest@181.91.159.97)
[03:42:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[03:44:13] *** Joins: proller (~p@80.240.216.69)
[03:53:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:55:57] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 240 seconds)
[03:58:28] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[04:03:15] *** Joins: ymwm_ (~yingmanwu@27.153.164.187)
[04:07:37] <yolo> the only thing is what if I return void, I can assign, say, err=0 means good, err < 0 means error, err>0 mean good but void
[04:08:39] <yolo> or, just keep void void, don't return any struct at all, just return void, but struct can cover std::option, e.g. return a value or void
[04:09:53] *** Quits: Guest5734 (~Guest@181.91.159.97) (Remote host closed the connection)
[04:10:57] *** Joins: proller (~p@2a02:6b8:b081:b65f::1:25)
[04:11:28] <kalven> in the code I work on we have a Status type that is basically an error code + optional more info and a StatusOr<T> which is either a Status (if things went wrong), or a T
[04:12:44] <yolo> cool
[04:14:46] <yolo> llvm guys actually ack issues, fixed one of my clang-foramt issues on the spot, and was responding clang-diagnostic-erros-with-clang-tidy disable for g++
[04:15:34] <yolo> clang-format could not tell _Pragma which is a c11 standard, now should be fine
[04:17:57] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::11)
[04:19:28] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:fcdf:d7ba:7957:a89b) (Quit: Quit)
[04:20:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:20:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:21:11] *** Quits: ymwm_ (~yingmanwu@27.153.164.187) (Ping timeout: 256 seconds)
[04:23:31] *** Joins: zmt00 (~zmt00@user/zmt00)
[04:29:25] <kalven> https://godbolt.org/z/1cPzP7E1o  - clang rejects this, gcc accepts it. which one is right?
[04:31:50] <yolo> i'm sure I will never understand that code and thus will never able to write it
[04:32:13] <yolo> i must restrict my own c++ usage to easy-to-intermediate level, not that smart per se
[04:32:17] <CodePoint> kalven: they're both right.
[04:33:19] <yolo> auto l = [k] { return k; };  is this lambda, so () is optional?
[04:33:29] <kalven> yolo: specifically it's using the name from the structured binding in the lambda capture.
[04:33:41] <kalven> clang doesn't like it, but gcc is ok with it
[04:34:32] <CodePoint> there's probably some implimentation-defined behavior happening somwhere that clang and gcc differ on.
[04:35:05] <yolo> so that's a closure
[04:35:05] <CodePoint> alot of the time you'll never know unless you inspect the disassembly directly, or observe side effects.
[04:35:39] <kalven> there's no assembler to inspect since it doesn't compile..
[04:36:15] <CodePoint> yeah.  So that's another thing about implimentation-defined behavior: the compiler can choose to define it as a compiler error.
[04:36:38] <kalven> I doubt that this is implementation deifned.
[04:39:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:41:06] <yolo> I did: g++-11 -foo.cpp -s -ffreestanding -nostdlib leads to : http://ix.io/3Rn2
[04:41:28] <yolo> which has quite some context unlike the void godbolt output
[04:42:05] <CodePoint> kalven: where the hell did K and V come from?
[04:42:11] <CodePoint> I assume they're globals?
[04:42:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:43:34] <kalven> yolo: sure, but if you remove -O3 from the godbolt page you'll see a lot of extra stuff as well.. The question here isn't around the assembly.. the code as written is just a convoluted way of returning 1, which gcc optimizes it to with -O3
[04:43:45] <kalven> CodePoint: they're introduced on line 5
[04:46:04] <yolo> g++-11 -c foo.cpp -S -O3 -nostdlib -ffreestanding http://ix.io/3Rn3
[04:47:20] <CodePoint> kalven: I thought captures captured already-existing local variables...
[04:47:39] <yolo> still, unlike godbolt, my g++11 -O3 give some 'sane' assembly output
[04:47:39] <kalven> yolo: so the interesting part there is just "movl$1, %eax \n ret", the rest is just asm boilerplate
[04:48:35] <kalven> yolo: if you're interested, there's a "filter" dropdown on godbolt. you'll see that it has a bunch turned on by default
[04:48:39] <yolo> yes, my point is that -O3 gives me movl, godbolt gives a blank page
[04:50:42] <kalven> yolo: oh, this is what I see: https://i.imgur.com/EIvl7x9.png
[04:51:05] <kalven> CodePoint: https://en.cppreference.com/w/cpp/language/structured_binding
[04:51:15] <CodePoint> thanks
[04:51:53] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:7941:5309:c959:b6c3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:52:04] <yolo> got it, i took the right column as g++ the middle column as clang++ for granted, my bad
[04:53:34] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::11) (Quit: CodePoint)
[04:53:55] <yolo> c++ asm is terrible to read due to mangling comparing to c
[04:56:36] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:11e5:11d:3263:7873) (Ping timeout: 245 seconds)
[04:57:45] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:13:24] *** Quits: proller (~p@2a02:6b8:b081:b65f::1:25) (Ping timeout: 240 seconds)
[05:16:49] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:17:19] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[05:19:56] *** Joins: xkuru (~xkuru@user/xkuru)
[05:23:08] *** Joins: ferdna (~ferdna@user/ferdna)
[05:24:26] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[05:25:18] <RandomReader> [p1091] I think, which would make clang incorrect
[05:25:18] <npaperbot> P1091R3: [Core] Extending structured bindings to be more like variable declarations <https://wg21.link/p1091r3> (by Nicolas Lesser) (2019-02-18) (Related: https://wg21.link/p1091r3/github)
[05:26:28] <RandomReader> although both gcc and msvc seem to be fine with that code in '17 mode, which is also wrong
[05:26:36] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[05:26:43] <RandomReader> so maybe all 3 are just not updating varying levels of structured binding brokenness
[05:28:34] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:31:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[05:32:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[05:36:09] *** Joins: ymwm_ (~yingmanwu@27.153.164.187)
[05:37:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:40:16] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:42:28] *** Joins: darkbit (~db@136.158.8.67)
[05:43:22] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:30] *** ChanServ sets mode: +v npaperbot
[05:43:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[06:13:08] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:18:51] *** Joins: Inline__ (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de)
[06:21:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:21:29] *** Quits: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:21:36] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[06:29:22] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[06:29:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:30:07] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[06:32:04] <Alipha> great_taste: can you use c++20
[06:41:00] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:44:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:48:05] <Alipha> yolo: note that your `struct { T result; int error_code; };` will create the T object regardless of whether or not there was an error, which may be a concern if T is not a primitive. You may want to use a std::variant<T, int>
[07:00:18] <kalven> RandomReader: nice, thanks
[07:16:41] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:17:08] *** Quits: ymwm_ (~yingmanwu@27.153.164.187) (Remote host closed the connection)
[07:25:08] *** Joins: adeliktas1 (~adeliktas@i59F5F4FC.versanet.de)
[07:27:19] *** Quits: adeliktas (~adeliktas@i59F52E53.versanet.de) (Ping timeout: 256 seconds)
[07:27:19] *** adeliktas1 is now known as adeliktas
[07:29:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:40:46] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[07:41:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:42:30] *** Joins: ymwm (~yingmanwu@27.153.164.187)
[07:43:31] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[07:45:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:09:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:29:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:30:33] *** Quits: jsbach (~jsbach@2a01:c22:349c:3100:1804:f68c:251c:8c5a) (Ping timeout: 256 seconds)
[08:42:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:42:56] *** Joins: jsbach (~jsbach@2a01:c22:a9b7:9200:14d9:e1e5:ba59:a11f)
[08:43:30] *** Quits: emerent (~quassel@p200300cd570c2187ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:45:28] *** Joins: emerent (~quassel@p200300cd570c2158ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:45:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:49:33] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[08:53:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:65bc:9c86:871e:5ddb)
[08:58:12] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:65bc:9c86:871e:5ddb) (Ping timeout: 240 seconds)
[09:04:04] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:14:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:22:52] *** Joins: dockk (~dockk@nat-x097-064.reshsg.uci.edu)
[09:35:04] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[09:36:05] *** Joins: AmR (~AmREiSa@156.199.197.9)
[09:37:18] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 252 seconds)
[09:43:06] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:43:23] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:30] *** ChanServ sets mode: +v npaperbot
[09:46:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:46:53] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:85a0:c944:c308:3afa)
[10:00:34] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:32:22] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[10:41:47] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c) (Remote host closed the connection)
[10:41:54] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 272 seconds)
[10:43:47] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:44:27] *** Joins: p-i- (~Ohmu@mx-ll-183.89.32-62.dynamic.3bb.co.th)
[10:45:05] *** Quits: dockk (~dockk@nat-x097-064.reshsg.uci.edu) (Ping timeout: 256 seconds)
[10:47:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:04:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[11:05:09] *** Quits: nafen_ (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[11:08:32] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:12:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:17:41] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[11:26:25] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[11:32:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4172:78d2:b571:4448)
[11:33:50] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 272 seconds)
[11:38:54] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Quit: Ping timeout (120 seconds))
[11:41:47] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:44:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:48:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:53:50] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:57:49] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[12:01:19] *** Joins: ipe (~ipe@91-156-246-15.elisa-laajakaista.fi)
[12:02:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:04:05] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:04:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[12:06:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:08:05] *** Joins: gentooclimax (~gentoocli@63.148.22.93.rev.sfr.net)
[12:16:10] *** Joins: robod34 (Username@79.113.243.73)
[12:23:17] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[12:35:40] *** gentooclimax is now known as climax
[12:45:09] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:47:32] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[12:48:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:03:44] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:06:09] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:699e)
[13:07:20] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:07:37] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[13:10:47] *** climax is now known as gentooclimax
[13:17:17] *** Joins: paul424 (~tom@ip-5-172-232-84.multi.internet.cyfrowypolsat.pl)
[13:21:06] *** gentooclimax is now known as climax
[13:27:46] <barometz_> I'm having some trouble with boost's shared memory allocator, can't seem to get it to work with a vector of strings (+ scoped_allocator). Works fine with a vector of vector of ints, but not strings and I don't see what's wrong. Does anyone see where I'm messing up? https://godbolt.org/z/3Gehjqnrn
[13:28:49] *** Inline__ is now known as Inline
[13:31:45] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:32:00] <LordKalma> why doesn't love template errors?
[13:32:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:32:35] <barometz_> quite
[13:33:09] <barometz_> a stackoverflow post suggests it should work with boost::interprocess::string but I can't really tell why that should be necessary
[13:33:11] <LordKalma> *why
[13:33:16] <LordKalma> *who, ffs
[13:33:16] *** barometz_ is now known as barometz
[13:36:43] *** Joins: sysctl (~sysctl@88.215.77.255)
[13:39:00] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[13:41:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:43:23] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:31] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:31] *** ChanServ sets mode: +v npaperbot
[13:44:10] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[13:45:52] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:49:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:50:32] *** climax is now known as gentooclimax
[13:53:08] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[14:03:44] <ville> barometz: how would the emplace_back() try to construct the vector element: Elem{"fifty-five"} or so?
[14:05:06] <barometz> it uses std::allocator_traits<alloc>::construct internally, which (if Elem is allocator-aware) propagates the outer allocator
[14:05:56] <barometz> (or with scoped_allocator, propagates the *inner* allocator, rather)
[14:06:49] <barometz> I had the same thing working with vec<vec<int>> and assert(vec.emplace_back(5).size() == 5)
[14:07:55] <barometz> Have also confirmed that it works with boost's ipc string type which is ... annoying but good enough for my purposes (-> writing a container, wanted to demonstrate it working with a custom allocator). Still curious why it doesn't work with std::string though
[14:11:08] *** Joins: chris64 (~chris@user/chris64)
[14:12:22] <ville> yeah, i just stop paying attention when it comes to c++ standard library allocator nonsense. it's just a mess
[14:15:37] <chris64> so bad ville?
[14:18:34] <ville> chris64: it's bit annoying the way they've done it. some of it comes from trying to be very general/correct and then some of it comes from the way they decided allocators also construct and destruct things i guess
[14:19:49] <chris64> interesting, I'll keep my eyes open when I get to put my toe into an area that requires dealing with allocators :-)
[14:20:52] <ville> the decission to try to support "all the things" makes it annoying. trying to figure out what is actually being done when everything is "depends"
[14:20:59] <chris64> so far I've only relied on the default allocation behavior, glibc I guess
[14:21:33] <chris64> I see
[14:23:37] <ville> so out of all of this optionality made through templates you get fun error messages such as above
[14:24:31] <ville> so any errors you happen to make do certainly impact how fun it is to program with
[14:24:53] <chris64> meh, unclear error messages are not fun :-|
[14:25:48] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[14:32:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:32:47] *** Joins: proller (~p@2a02:6b8:b081:b481::1:a)
[14:37:41] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:37:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[14:39:09] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[14:39:45] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:43:52] <PJBoy> re last night's discussion
[14:44:07] <PJBoy> "Structured bindings cannot be captured by lambda expressions. (until C++20)" https://en.cppreference.com/w/cpp/language/structured_binding <_<
[14:44:34] <PJBoy> think it makes it pretty obvious that all the compilers were wrong
[14:44:39] <ville> still wondering why they ever accepted structured bindings
[14:45:06] *** Joins: Burgundy (~NA@86.121.143.206)
[14:45:07] <PJBoy> because structured bindings weren't made to be like real variables
[14:45:22] <PJBoy> I dunno what that's about though
[14:45:33] <ville> not sure why that would be the reason to accept the feature
[14:46:08] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:46:31] <PJBoy> [p1091] does address that a bit
[14:46:31] <npaperbot> P1091R3: [Core] Extending structured bindings to be more like variable declarations <https://wg21.link/p1091r3> (by Nicolas Lesser) (2019-02-18) (Related: https://wg21.link/p1091r3/github)
[14:46:57] <PJBoy> I read it like "we didn't have time to figure out if structured bindings should act more usefully"
[14:47:27] <PJBoy> also note that it's another add-constexpr-to-existing-feature driven paper
[14:47:44] <PJBoy> your favourite
[14:49:23] <ville> that's nice added bonus
[14:49:33] <chris64> why are structured bindings not like real variables? I'd expect them to only be syntactic sugar like this: auto tuple = doSth(); auto& first = tuple.first; auto& second = tuple.second;
[14:49:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:50:07] <chris64> including the removal of the l-value reference of course
[14:50:13] <ville> chris64:  needed a new language construct. the existing ones' gotchas were becoming too well-known
[14:51:05] <chris64> yes, but, can't the language construct still be mapped to some existing thing, like range-based for loop to iterator-based for?
[14:51:19] <veverak> chris64: nope
[14:51:38] <veverak> the motivation I am aware of is simple: bit fields
[14:51:48] <chris64> bit fields?
[14:52:13] <veverak> yes, if you not aware of what it is just google it
[14:52:32] <veverak> SB uses new construct to be able to point to bit fields
[14:52:47] <PJBoy> oh bitfields is a good point
[14:53:06] <chris64> interesting!
[14:55:12] *** Quits: paul424 (~tom@ip-5-172-232-84.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:57:23] <ville> and then structured bindings will be used as justification to allow pointers to bitfields: "every compiler already implement this: structured bindings and bit fields"
[15:00:46] *** Quits: proller (~p@2a02:6b8:b081:b481::1:a) (Ping timeout: 245 seconds)
[15:05:55] *** Quits: ymwm (~yingmanwu@27.153.164.187) (Remote host closed the connection)
[15:09:16] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:8c97:f397:35c4:afc4)
[15:10:09] *** Joins: ymwm (~yingmanwu@27.153.164.187)
[15:15:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[15:16:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:18:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[15:18:35] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:18:36] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:31:32] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:43:16] *** Quits: gentooclimax (~gentoocli@63.148.22.93.rev.sfr.net) (Quit: Konversation terminated!)
[15:46:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:47:49] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 240 seconds)
[15:50:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[15:56:28] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[15:58:05] <lxsameer> hey folks, I'm working on a shared lib and I set the default symbol visibility to hidden, how do you run you test cases in this kind of situation? should I change the visibility for the test cases?
[15:59:31] <chris64> what do you mean by default symbol visibility?
[16:02:00] <very_sneaky> lxsameer: depends on what you're trying to achieve. Normally, and there are exceptions to this, you only really want to be testing the public api, which should be exactly what your set of public symbols are - in that case, no change required
[16:03:15] <chris64> I second that. Although it's an interesting question because if so much of the library is hidden, then there might indeed be a layer below that external API that is relevant for unit testing
[16:04:03] <lxsameer> Indeed, I want to make sure that my internal stuff works as I expected too
[16:04:05] <very_sneaky> when i'm writing physics based libraries and the final output can be difficult to predict, i like to test functions not in the public api
[16:06:00] <very_sneaky> lxsameer: what's the nature of your hidden symbols? are you just saying they're private, or are you talking about symbols available on the dll/so api?
[16:07:05] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:07:47] <lxsameer> very_sneaky: I'm working on a compiler, and those internal stuff are different classes and functions that I don't expose to public directly
[16:08:12] <chris64> I'd less focus on internal/external facing API but on complexity of the associated test cases. If the test case requires too much state to be built upfront, then there might be relevant sub-components that could be tested independently
[16:08:24] <very_sneaky> lxsameer: yeah, i get that, i'm asking what you mean specifically when you say "default symbol visibility to hidden"
[16:08:37] <lxsameer> for example, I have an Env class which is like a scope, i don't expose it directly but my Namespace type that I expose, is using it
[16:09:36] <CarloWood> Theoretically you only should have to test the public API
[16:10:00] <lxsameer> very_sneaky: ahhh, I set `CMAKE_CXX_VISIBILITY_PRESET` to hidden, which means on the resulted `so` file, no symbol is visible unless I explicitly mark them to be exported
[16:10:04] <chris64> CarloWood: the question is what is public API. If you have a graphical application, do you only do GUI-interface testing? :-)
[16:10:19] <chris64> yay, throw all the unit tests out of the window
[16:10:38] <chris64> *replace public API by tested API
[16:10:42] <very_sneaky> lxsameer: gotcha, so it's the library interface, not class interface
[16:10:57] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:11:36] <CarloWood> chris64: I mean - if a library appears to be fully functional no matter what you throw at it's public interface, then it is fully functional.  I am not saying that it is practical to test like that.
[16:11:54] <chris64> likewise, you do not only want to test a compiler by feeding it with programs and assert it's output, but actually test the lexer/analysis, code generation separately
[16:12:59] <chris64> CarloWood: fair point, functional completeness is the main objective
[16:13:51] <very_sneaky> the problem is in the semantics, obviously - how do you define/identify functional completeness when you're talking about complex behaviour
[16:14:45] *** Joins: Xardas (~Xardas@149.233.51.127)
[16:15:07] <chris64> All this is basically the question of adhering to the test pyramid. (few end-to-end tests, more integration tests, most unit tests)
[16:16:08] <chris64> very_sneaky: not sure, is functional completeness the sum of all edge cases?
[16:20:00] <very_sneaky> not necessarily, when i say complex behaviour i mean behaviour that's not easily predicted
[16:26:13] <very_sneaky> how many tests are enough for confidence in consistent behaviour? one?
[16:26:16] <very_sneaky> maybe - depends
[16:26:19] *** Joins: proller (~p@2a02:6b8:0:408:2e0:4cff:fe6e:152)
[16:28:27] *** Joins: troller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[16:29:28] *** Quits: proller (~p@2a02:6b8:0:408:2e0:4cff:fe6e:152) (Client Quit)
[16:33:49] *** Joins: ymwm_ (~yingmanwu@27.153.164.97)
[16:35:10] *** Joins: jokoon (~eio@2a01:e0a:542:e160:9565:1297:552e:fcd8)
[16:36:34] *** Quits: ymwm (~yingmanwu@27.153.164.187) (Ping timeout: 272 seconds)
[16:47:06] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:50:07] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[16:50:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[17:01:45] <c4017> Can someone explain why `vals` is not being optimized away here? https://godbolt.org/z/EGeEqbWPP
[17:03:33] <very_sneaky> not sure, as a guess, because you're using argc for indexing?
[17:03:43] <very_sneaky> insert dependence on runtime invocation
[17:04:47] <c4017> I thought so too, but surely it would figure this case out? https://godbolt.org/z/h78evn9hs
[17:05:07] <very_sneaky> how does that resolve it
[17:05:24] <c4017> uint8_t is guaranteed to be within the array bounds
[17:07:09] <very_sneaky> i'm not very experienced with optimisation, but i'm not sure what optimisation you're expecting to happen - argc isn't known until runtime
[17:10:01] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:10:09] <c4017> oh wait I see what your saying. I'm actually not sure how I expected that to be optimized... Let me take another look at the original problem
[17:16:15] <c4017> well originally I was indexing the array with an enum, basically the same. I guess I wanted the compiler to convert the array to a switch statements if it's worth it like in this example: https://godbolt.org/z/bYsaK6Gvr
[17:18:43] <very_sneaky> i'm not sure what you mean - they're showing the same thing: https://godbolt.org/z/Ms44vqGGe
[17:19:15] <very_sneaky> in comparison to: https://godbolt.org/z/hTeavj33s
[17:22:03] *** Quits: ymwm_ (~yingmanwu@27.153.164.97) (Ping timeout: 256 seconds)
[17:23:29] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c)
[17:24:38] <c4017> very_sneaky, I was hoping it gets converted to a switch case something like this https://godbolt.org/z/sjv4jEjq9
[17:24:58] <c4017> So that the entire array doesn't need to exist in memory
[17:26:36] *** Quits: p-i- (~Ohmu@mx-ll-183.89.32-62.dynamic.3bb.co.th) (Ping timeout: 272 seconds)
[17:28:57] *** Quits: DrMax__ (~DrMax@132.215.96.30) (Ping timeout: 240 seconds)
[17:34:17] *** Joins: plastico (~plastico@neomutt/plastico)
[17:39:29] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::11)
[17:39:54] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 272 seconds)
[17:43:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:32] *** ChanServ sets mode: +v npaperbot
[17:44:01] *** Joins: adeliktas2 (~adeliktas@i59F5F4FC.versanet.de)
[17:45:51] *** Quits: adeliktas (~adeliktas@i59F5F4FC.versanet.de) (Ping timeout: 256 seconds)
[17:45:52] *** adeliktas2 is now known as adeliktas
[17:47:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:51:13] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:55:06] <PJBoy> c4017, https://godbolt.org/z/x4a887fE5
[17:55:28] <PJBoy> your array has external linkage, so it needs to exist in case other TUs need to reference it
[17:56:07] <PJBoy> and putting it in an anonymous namespace gives it internal linkage
[17:57:13] <LordKalma> something something "testing frameworks that have in-source tests" something something cc lxsameer
[17:57:55] <LordKalma> lxsameer, also, besides `set(CMAKE_CXX_VISIBILITY_PRESET "hidden")`, use also `set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)` :)
[17:58:08] <PJBoy> actually I'm probably talking complete non-sense
[17:58:21] <LordKalma> !grab PJBoy
[17:58:21] <nolyc> LordKalma: The operation succeeded.
[17:58:24] <PJBoy> it just doesn't include LANCHOR in the paste
[17:58:44] <c4017> PJBoy, yeah the array still exists in that example, just filtered out
[17:59:07] <c4017> I'm not sure if this type of optimization is even possible
[18:01:13] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::11) (Quit: CodePoint)
[18:03:24] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[18:04:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:10:39] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[18:12:00] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[18:12:27] *** Joins: AmR (~AmREiSa@156.199.197.9)
[18:12:44] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[18:19:29] <lxsameer> LordKalma: hey, thanks for the hint, yeas I'm setting the value for CMAKE_VISIBILITY_INLINES_HIDDEN too
[18:21:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:26:05] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[18:26:46] *** Joins: AmR (~AmREiSa@156.199.197.9)
[18:28:33] <LordKalma> Explicitly defaulted default constructor is implicitly deletedclang(-Wdefaulted-function-deleted)
[18:28:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:28:38] <LordKalma> compiler warnings are amazing
[18:28:46] <PJBoy> bahahahaha
[18:29:01] <LordKalma> explicitely defaulted -> implicitely deleted. amazing
[18:29:13] <PJBoy> I want that on a shirt
[18:29:16] <LordKalma> lxsameer doctest for example, supports in-source test definitions
[18:29:23] <LordKalma> I'm sure others too
[18:29:28] <ville> so what's your objection to it?
[18:29:38] <ville> it's all reasonable to me
[18:29:39] <cbreak> { X x; } struct X { X() = default; int & ir; };
[18:29:40] <geordi> error: use of deleted function 'X::X()'
[18:30:08] <PJBoy> don't think there's any objection to the warning
[18:30:12] <LordKalma> nothing, it's just "paradoxical" at first
[18:30:14] <LordKalma> the way it sounds
[18:31:11] <cbreak> inline int __attribute__ ((noinline)) foo() { return 2; }
[18:31:35] <PJBoy> [[gnu::noinline]] plz
[18:32:26] <LordKalma> those are different inlines, afaik
[18:33:13] <ville> yes one is about odr the other is about optimization
[18:35:31] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:38:44] <LordKalma> xutility(4122, 37): Because 'std::span<std::complex<float>, 18446744073709551615>' does not satisfy 'weakly_incrementable'
[18:38:44] <LordKalma> xutility(769, 7): Because '++__i' would be invalid: cannot increment value of type 'std::span<std::complex<float>, 18446744073709551615>'
[18:38:58] <LordKalma> wtf I can't std::ranges::copy(input, output) ?!
[18:39:15] <LordKalma> dynamic_extent is probably not weakly incrementeable
[18:39:20] <LordKalma> what's the fucking point then
[18:40:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d400:5de4:279e:c12c)
[18:40:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d400:5de4:279e:c12c) (Changing host)
[18:40:51] *** Joins: skapata (~Skapata@user/skapata)
[18:42:12] <lh_mouse> do you happen to have any ideas why it requires pressing Ctrl-C twice to make `el_gets()` return?
[18:42:30] <lh_mouse> this happens on Linux only, no matter on a terminal or over SSH.
[18:42:43] <lh_mouse> in MSYS2 on Windows there is no such issue.
[18:42:52] <lh_mouse> ah this question is about the editline library.
[18:47:13] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[18:48:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:49:48] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[18:50:20] *** Joins: AmR (~AmREiSa@156.199.197.9)
[18:51:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:51:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4172:78d2:b571:4448) (Ping timeout: 240 seconds)
[18:52:11] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:52:44] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:1f05:49c3:3805:b874:d1c) (Remote host closed the connection)
[18:55:13] <LordKalma> wow, latest VSCode update to the LSP protocol has some pretty neat stuff
[18:55:30] <LordKalma> https://i.gyazo.com/338d8ca865f0568964cb54874022d929.png
[18:55:39] <LordKalma> pretty cool annotations of the arguments of a function
[18:55:41] <PJBoy> LordKalma, ranges algorithms still use iterators for destination parameters
[18:55:53] <PJBoy> only source ranges can be ranges
[18:56:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9dbb:4095:47d4:20f0)
[18:56:25] <LordKalma> bah
[18:56:38] <PJBoy> so you gotta do `std::ranges::copy(input, begin(output));`
[18:57:56] <LordKalma> std::begin(output) or output.begin() ? fight
[18:58:24] <PJBoy> std::ranges::begin(output) would be the most flexible
[18:58:25] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[18:58:36] <PJBoy> which covers all three of the above cases
[18:58:52] *** Joins: AmR (~AmREiSa@156.199.197.9)
[18:59:37] <PJBoy> I don't agree that `begin` should be an ADL'able function like swap though
[18:59:38] <lh_mouse> oh f@ck it seems a bug in the version that was installed by apt.
[18:59:42] <PJBoy> so I go for std::begin
[18:59:58] <lh_mouse> I have compiled a new version myself and the problem is gone.
[19:00:36] <LordKalma> ADL?
[19:00:48] <PJBoy> argument dependent lookup
[19:00:51] <ville> PJBoy: don't see a reason for not
[19:01:07] *** Quits: ipe (~ipe@91-156-246-15.elisa-laajakaista.fi) (Remote host closed the connection)
[19:01:35] <PJBoy> ADL = the thing that allows `pj::T x, y; swap(x, y);` to call `pj::swap`
[19:01:49] <PJBoy> and is the basis for how operator overloads get called
[19:01:50] <ville> PJBoy: the standard has become more and more hostile to users sticking stuff into std namespace
[19:02:01] <PJBoy> yeah sticking stuff in the std namespace is bad
[19:02:09] <PJBoy> begin/end should be member functions
[19:02:14] <ville> no
[19:02:19] <PJBoy> why not?
[19:02:22] <PJBoy> ADL sucks
[19:02:40] <PJBoy> as demonstrated right now, it's confusing
[19:02:43] <LordKalma> ADL TLDR?
[19:03:18] <PJBoy> non-member functions can be found within namespaces/classes of the arguments to that function call
[19:03:40] <LordKalma> endl(std::cout); // OK: this is a function call: ADL examines std namespace because the argument of endl is in std, and finds std::endl
[19:03:44] <LordKalma> good example on cppref
[19:03:48] <ville> well i've stopped using member functions, aside from those that have to be members because the language says, but that aside still stepanov's advice is sound
[19:03:54] <PJBoy> also the namespaces and classes of template arguments
[19:03:59] <PJBoy> and a bunch of other cases
[19:04:12] <LordKalma> ville so you write C?
[19:04:13] * LordKalma runs
[19:04:28] <ville> been called worse
[19:04:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:04:57] <PJBoy> until C++20, there's never been any expectation that begin is an ADL'able function
[19:05:02] <ville> PJBoy: the advice being that you make the basis operations members that let you implement everything else as non-member
[19:05:06] <PJBoy> same with iter_swap
[19:05:11] <PJBoy> it's bizarre that those are ADL'able now
[19:05:45] <ville> PJBoy: have you read elements of programming?
[19:05:51] <PJBoy> I've heard that advice, but I don't see why you would ever agree with it
[19:05:58] <PJBoy> nah I've never read a programming book before
[19:06:48] <LordKalma> I guess it's easy to add overloads?
[19:07:08] <ville> PJBoy: at least i've the feeling, supported by some experience, that it leads to generic programming/generic functions more readily than member functions. whethe that's a goal you wish to pursue is another question
[19:07:12] <PJBoy> overload for begin() :/
[19:07:21] <LordKalma> imho the problem that I found with member functions, not that I ever considered it myself, it the one on the "explicit this" proposal
[19:07:32] <ville> PJBoy: pretty common thing to do so you get range-for syntax
[19:07:33] <LordKalma> as in, why does `this` have to be a reference?
[19:08:06] <PJBoy> why would you ever want to demand a copy?
[19:08:17] <PJBoy> the caller of a member function can make a copy if they want
[19:08:34] <LordKalma> npaperbot search explicit this Sy
[19:08:35] <npaperbot> Nothing found for: explicit, this, sy
[19:08:38] <LordKalma> npaperbot search explicit this
[19:08:39] <npaperbot> Nothing found for: explicit, this
[19:08:44] <LordKalma> I'll look it up
[19:08:53] <PJBoy> << vector(v).size(); vector v{1, 2, 3};
[19:08:54] <geordi> 3
[19:09:04] <PJBoy> hooray for random copy
[19:09:20] <LordKalma> npaperbot, search deducing this
[19:09:21] <npaperbot> P0847R7: [Core] Deducing this <https://wg21.link/p0847r7> (by Barry Revzin, Gašper Ažman, Sy Brand, Ben Deane) (2021-07-14) (Related: https://wg21.link/p0847r7/github)
[19:09:21] <npaperbot> Also: P0847R6, P0847R5, P0847R4, P0847R2, P0847R1, P0847R0, D0847R3
[19:09:26] <LordKalma> do read
[19:09:57] <PJBoy> I can make a copy inside member functions too
[19:10:12] <PJBoy> `void S::f() { auto self = *this; }`
[19:10:25] <PJBoy> and that I think should work out the same as what deducing this by-value self does
[19:13:15] <PJBoy> that said I probably would agree with the complaint that member functions make perfect forwarding / const propagating of *this more work
[19:13:29] <PJBoy> prior to C++23
[19:15:54] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[19:16:38] *** Joins: AmR (~AmREiSa@156.199.197.9)
[19:17:07] *** Quits: troller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 256 seconds)
[19:18:43] <ville> PJBoy: if you've never read a programming book then start with elements of programming
[19:19:03] <LordKalma> Compiler and text editor?
[19:19:18] <ville> (lambda calculus)
[19:19:20] <PJBoy> I'll acknowledge the recommendation
[19:19:38] <PJBoy> but wouldn't hold your breath
[19:20:04] <ville> there will be a quiz sometime next week. failing means you're banned
[19:20:44] <PJBoy> I'm sure my intuition will suffice
[19:21:25] <PJBoy> I'll think of all the bits of advice I've brushed off over the years
[19:21:52] <ville> it's not like most of the stuff in eop hasn't been presented elsewhere or wouldn't have come up in just doing programming
[19:22:08] <PJBoy> yeah that would be my expectation too
[19:22:53] <PJBoy> I can save myself time and just watch cppcon videos, then complain about them over here
[19:23:28] <ville> think you'll read faster than watch a video?
[19:23:51] <PJBoy> in a single threaded environment probably
[19:23:54] <LordKalma> Cpp con talks are unusually long for conferences
[19:24:06] <PJBoy> but I can do other stuff whilst watching cppcon, so it's "free" in a sense
[19:24:16] <LordKalma> Pycon talks are 20 minute long for example
[19:24:34] <LordKalma> And usually get much more done in the time
[19:24:45] <ville> LordKalma: so for once they beat c++?
[19:25:00] <PJBoy> yeah I can't say I enjoy the 50-60 minute cppcon runtime
[19:25:12] <PJBoy> I would if it was information dense
[19:25:20] <LordKalma> Python beats c++'s performance by 6 months hahah
[19:25:37] <ville> you just have the wrong basis libraries then
[19:25:44] <LordKalma> Perhaps
[19:26:03] <PJBoy> 6 months?
[19:26:20] <LordKalma> With c++ I still haven't decided whether dependencies are good or bad
[19:26:40] <PJBoy> what about some dependencies are good and some are bad? :/
[19:29:15] *** Joins: troller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[19:29:18] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[19:30:02] *** Joins: AmR (~AmREiSa@156.199.197.9)
[19:34:04] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[19:34:31] *** Joins: AmR (~AmREiSa@156.199.197.9)
[19:35:10] *** Joins: ymwm_ (~yingmanwu@27.153.164.97)
[19:36:53] *** Joins: Xardas (~Xardas@149.233.51.127)
[19:48:35] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:50:26] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[19:50:55] *** Joins: AmR (~AmREiSa@156.199.197.9)
[19:52:16] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:54:21] <kenanmarasli> there is a bot here for faq, right?
[19:54:25] <kenanmarasli> !help
[19:54:25] <nolyc> kenanmarasli: Use the 'list' command to list all plugins, and 'list <plugin>' to list all commands in a plugin. To show the help of a command, use 'help <command>'.
[19:54:44] <kenanmarasli> !list
[19:54:44] <nolyc> kenanmarasli: Admin, Aka, AutoMode, Channel, Config, Filter, Format, Google, Karma, Math, Misc, MoobotFactoids, Network, NickAuth, Owner, QuoteGrabs, Seen, Time, User, Utilities, and Web
[19:56:44] <PJBoy> there is not
[19:57:25] <PJBoy> aside from !faq
[19:59:37] <kenanmarasli> I remember someone using !<command> for a faq topic so I searched through its commands a bit
[20:00:29] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[20:00:55] *** Joins: AmR (~AmREiSa@156.199.197.9)
[20:02:44] <kenanmarasli> anyway, I was looking at the benefits and caveats of using `#pragma once` compared to include guards, it makes more sense to me to leave single header inclusion problem to computers, but it has drawbacks from symlinks, same code file copied to different libraries etc.
[20:03:01] <kenanmarasli> so I guess I'll use guards, since that's the standard
[20:03:56] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[20:04:56] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[20:05:08] <PJBoy> there's the hybrid approach too
[20:05:38] <PJBoy> https://en.wikipedia.org/wiki/Pragma_once is probably as good as any other discussion
[20:05:38] *** Joins: AmR (~AmREiSa@156.199.197.9)
[20:05:56] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:06:18] *** Joins: paul424 (~tom@ip-5-172-234-200.multi.internet.cyfrowypolsat.pl)
[20:09:46] <kenanmarasli> yeah I don't think the performance gained from using both is relevant anymore, for gcc at least: https://gcc.gnu.org/onlinedocs/cppinternals/Guard-Macros.html
[20:11:09] <PJBoy> on the other hand, losing easily achieved performance seems wasteful
[20:11:46] <kenanmarasli> I saw arguments about the performance `#pragma once` brings, but the main thing that draws my interest is that it is less verbose and less error-prone, for most cases anyway
[20:12:11] <PJBoy> less verbose for sure
[20:12:39] <PJBoy> less error-prone is a matter of header guard identifier collisions versus symlink confusion
[20:12:51] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:6817:68e9:fe05:d67b)
[20:12:51] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:6817:68e9:fe05:d67b) (Changing host)
[20:12:51] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:12:58] <kenanmarasli> yep that's true
[20:13:10] <PJBoy> and then performance is neither here nor there, because you can always add pragma once anyway
[20:14:35] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[20:15:33] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[20:16:00] *** Joins: AmR (~AmREiSa@156.199.197.9)
[20:16:47] <kenanmarasli> with include guards there is also the possibility of using same defs across different libs, so it is left to the programmer's responsibility
[20:18:07] *** Joins: p-i- (~Ohmu@mx-ll-183.89.32-62.dynamic.3bb.co.th)
[20:18:36] <ville> kenanmarasli: have your editor generator create it. project prefix + filename + guid is a good start
[20:19:08] <ville> you must be the unluckiest person in the world if you get a conflict with that
[20:19:27] <kenanmarasli> true that makes sense
[20:20:39] <kenanmarasli> and I guess compilers may identify multiple inclusion of same file with symlinks, but not really for duplicated files
[20:23:19] *** Joins: xkuru (~xkuru@user/xkuru)
[20:24:55] *** Quits: AmR (~AmREiSa@156.199.197.9) (Remote host closed the connection)
[20:24:56] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[20:25:22] *** Joins: AmR (~AmREiSa@156.199.197.9)
[20:26:25] <lpapp> hi, I am trying to build the LearnOpenGL github repo. This is the compilation error I am getting: https://bpa.st/3S5Q Got a clue? Offending lines are https://github.com/JoeyDeVries/LearnOpenGL/blob/master/src/8.guest/2021/1.scene/1.scene_graph/scene_graph.cpp#L101 and https://github.com/JoeyDeVries/LearnOpenGL/blob/master/includes/learnopengl/entity.h#L399
[20:26:51] <lpapp> Ah, I think it will need to create a variable?
[20:26:55] <lpapp> lvalue
[20:28:31] <lpapp> Although, I am not sure it is a good idea to take the address of an object that will go out of scope outside the function?
[20:29:50] *** Quits: AmR (~AmREiSa@156.199.197.9) (Client Quit)
[20:35:20] *** Quits: ymwm_ (~yingmanwu@27.153.164.97) (Ping timeout: 272 seconds)
[20:41:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:47:40] <ville> lpapp: that seems like they are bit half way between two ways of doing things
[20:48:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:49:16] <ville> lpapp: from the looks of the code in entity they are using std::unique_ptr, so presumably their use of plain pointer is meant for one that just expects the pointed-to-object outlive any of the pointers...
[20:49:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:50:04] <ville> lpapp: so the calling side is supposed to provide a model that outlives the entity. roughly speaking
[20:51:05] <ville> lpapp: the structure of the code in main() would let you do that if you just create the model before you call the entity ctor
[20:51:48] <lpapp> I "fixed" that, hitting this linker issue now on Mac: https://github.com/JoeyDeVries/LearnOpenGL/issues/268 any clue? I have freetype installed with brew.
[20:51:55] <ville> lpapp: model m; entity e(m); means m will be destructed after e
[20:51:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[20:52:43] <lpapp> E.g.: Undefined symbols for architecture x86_64:
[20:52:44] <lpapp> "_FT_Done_Face", referenced from:
[20:52:48] <ville> well you may have t installed, does the linker actually get told to link against it?
[20:52:52] <lpapp> not sure if anyone is C++ing on Mac here
[20:52:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:53:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[20:53:11] <lpapp> if anyone has a Mac, they could also try to build
[20:53:16] <lpapp> just clone, cmake, and make
[20:53:28] <ville> you should look at the command that gets executed for linking
[20:53:49] <lpapp> /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/cmake/data/CMake.app/Contents/bin/cmake -E cmake_link_script CMakeFiles/7.in_practice__2.text_rendering.dir/link.txt --verbose=1
[20:53:53] <lpapp> /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -g -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names CMakeFiles/7.in_practice__2.text_rendering.dir/src/7.in_practice/2.text_rendering/text_rendering.cpp.o -o
[20:53:58] <lpapp> ../bin/7.in_practice/7.in_practice__2.text_rendering   -L/Users/lpapp/Projects/LearnOpenGL/lib  -Wl,-rpath,/Users/lpapp/Projects/LearnOpenGL/lib -framework Cocoa -framework IOKit -framework OpenGL -framework CoreVideo /usr/local/lib/libglfw.dylib /usr/local/lib/libassimp.dylib libSTB_IMAGE.a libGLAD.a
[20:54:03] <lpapp> with make VERBOSE=1
[20:54:27] <lpapp> it is possible that I need to install cocoa or something
[20:54:54] <lpapp> hmm, look at this:
[20:55:16] <lpapp> https://github.com/JoeyDeVries/LearnOpenGL/blob/master/CMakeLists.txt#L34
[20:55:26] <lpapp> freetype seems to be added on Windows and Linux, but apparently not Mac?
[20:55:57] <lpapp> not sure if it should be added by something implicitly, but sounds like a cmake question to me rather than c++ at this point.
[20:55:58] <ville> there doesn't appear to be anything about freetype in that command
[20:56:58] <ville> i don't know if freetype appears as a "framework" macos, or you're supposed to link it like a regular library on other os
[20:57:26] <ville> think i've just linked it...
[20:58:56] <lpapp> ville: I honestly do not know.
[20:59:29] <lpapp> Ideally, you would do something like this:     find_package(Freetype REQUIRED)
[20:59:32] <lpapp>     target_link_libraries(main PRIVATE Freetype::Freetype)
[20:59:52] <lpapp> or better: not REQUIRED, but make it conditional and just do not build those things which require it, when not installed.
[21:10:05] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dd8:2efd:65ad:4167)
[21:10:53] *** Quits: paul424 (~tom@ip-5-172-234-200.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[21:13:22] *** Joins: ferdna (~ferdna@user/ferdna)
[21:21:44] <yolo> g++ sanitizer could 10x the binary size, but, still useful
[21:30:48] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[21:33:36] *** Joins: magla (~gelignite@55d44f73.access.ecotel.net)
[21:34:37] <cbreak> yolo: binary size shouldn't matter too much for sanitizer binaries, those aren't supposed to be deployed, just used for unit testing or similar
[21:42:37] *** Quits: troller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 240 seconds)
[21:43:07] <yolo> cbreak: of course, release build does not enable them
[21:43:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:32] *** ChanServ sets mode: +v npaperbot
[21:45:52] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[21:46:12] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:6817:68e9:fe05:d67b)
[21:46:12] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:6817:68e9:fe05:d67b) (Changing host)
[21:46:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:50:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:53:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:53:43] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[21:53:59] <lpapp> hi, is it better to ask boost related questions in #boost or is that channel not active and ask here? Happy either way.
[22:00:07] <furrymcgee> boost maybe better for developers and bug reports of the library
[22:00:36] <yolo> if c++17|c++20 what does boost bring these days
[22:02:14] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dd8:2efd:65ad:4167) (Ping timeout: 260 seconds)
[22:05:22] <ville> it does contain 100+ libraries, only minority with standard library counterparts
[22:07:50] *** Joins: evangeline (~Eleanor@178.79.105.181)
[22:19:22] *** Joins: markong (~kvirc@213.146.188.203)
[22:19:50] <lpapp> ok, thanks
[22:23:05] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:28:10] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[22:30:53] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Quit: Leaving)
[22:42:27] *** Joins: paul424 (~tom@ip-5-172-235-17.multi.internet.cyfrowypolsat.pl)
[22:50:49] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:54:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:57:41] *** Quits: ville (~ville@user/ville) (Quit: ville)
[22:59:06] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[23:02:02] *** Joins: ville (~ville@user/ville)
[23:03:39] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:10:12] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 252 seconds)
[23:12:53] *** Joins: ivii (~ivan@user/ivii)
[23:13:12] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[23:15:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:16:44] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:699e) (Quit: Leaving)
[23:19:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:21:11] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:8c97:f397:35c4:afc4) (Ping timeout: 245 seconds)
[23:21:29] *** Joins: andreasbuhr (~quassel@p548dd8d5.dip0.t-ipconnect.de)
[23:24:13] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[23:32:43] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:9565:1297:552e:fcd8)
[23:34:12] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 240 seconds)
[23:36:05] *** Quits: jokoon (~eio@2a01:e0a:542:e160:9565:1297:552e:fcd8) (Ping timeout: 256 seconds)
[23:36:23] <LordKalma> it's a shame conan doesn't have a great way to costumize builds, as in, adding compiler flags and etc
[23:36:35] <LordKalma> giving the amazing clusterfuck most build code is anyway, it's not surprising
[23:36:47] <LordKalma> but it's a shame you can't build your depencies as you'd build your own code
[23:38:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:41:09] <ville> you want to put a hat or perhaps a snazzy vest on them or something?
[23:41:40] *** Joins: Terminus (~null@user/terminus)
[23:41:58] <LordKalma> your dry humor is so amusing
[23:42:17] <LordKalma> LTO, -ffast-math? -march=skylake... etc etc
[23:42:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:42:30] <LordKalma> lots of good reasons to want to customize the flags on some build
[23:42:33] <ville> (customize)
[23:42:45] <LordKalma> ah that
[23:42:46] <LordKalma> hahah
[23:43:21] <hnOsmium0001[m]> LordKalma: can't you just set CXX_FLAGS (or whatever it's called for conan) in your profile?
[23:43:38] <hnOsmium0001[m]> and have a dedicated profile for each project. Non-ideal for sure, but it works
[23:43:45] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[23:43:51] <LordKalma> hnOsmium0001[m], well, technically yes, but it's up to the actual recipe to honor that..
[23:43:53] <LordKalma> but oh well
[23:44:13] <PJBoy> write a cmake script to apply a patch to the conan recipe
[23:44:22] <hnOsmium0001[m]> "cmake script"
[23:44:37] <ville> they are just lists!
[23:44:51] <PJBoy> write a cmake list of strings to apply a patch to the conan recipe
[23:45:11] <ville> i bet it started of as a list of source files
[23:45:16] <LordKalma> I'd just fix them upstream
[23:47:02] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Quit: This computer has gone to sleep)
[23:48:03] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[23:48:22] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Client Quit)
[23:51:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:55:11] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:9565:1297:552e:fcd8) (Quit: Leaving)
[23:55:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
