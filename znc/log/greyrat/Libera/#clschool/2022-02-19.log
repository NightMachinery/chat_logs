[00:10:28] *** Joins: ilmu1 (~ilmu@176.76.243.98)
[00:14:00] *** Quits: ilmu (~ilmu@176.76.242.103) (Ping timeout: 272 seconds)
[00:14:59] <drakonis> hmm, is there a database that's actually written in cl?
[00:26:12] <White_Flame> allegrocache?
[00:27:43] <White_Flame> also https://cliki.net/Database
[00:35:13] <drakonis> cool.
[01:13:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:14:51] *** Joins: aeth (~aeth@user/aeth)
[01:17:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[01:19:07] *** Quits: silasfox (~sbv@p200300cec712b400b45e618d2b7703c5.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[01:38:15] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:50:37] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:60ac:5115:d501:c1e2) (Ping timeout: 240 seconds)
[01:56:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:22:02] <ilmu1> how can I treat character streams as bytestreams?
[02:22:15] *** ilmu1 is now known as ilmu
[02:22:45] <ilmu> I don't want to be reading a character and converting it
[02:23:06] <ilmu> what is the difference to begin with? arent the characters represented as bytes in memory?
[02:26:07] *** Quits: tewi (~tewi@apn-31-0-1-78.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[02:32:28] <rotateq> when you open a stream you can specify (UNSIGNED-BYTE 8) as element-type and then use READ-BYTE or WRITE-BYTE with that
[02:33:16] <rotateq> and for us characters define their own class apart from integer :)
[02:36:01] <rotateq> afaik elisp for example still has no distinction on that
[02:39:21] <rotateq> in the big tradition of C ^^
[02:51:00] <ilmu> okay cool thank you
[02:53:55] <rotateq> and in the other direction of thought, when you for example use WITH-INPUT-FROM-STRING you can call READ-CHAR on that, but not READ-BYTE as it's really a character stream
[03:01:38] <rotateq> a fairly better readup would be in Common Lisp the Language 2 by Steele, from chapter 21 on
[03:04:58] <neominimum> rotateq: wow cltl2 only ~AUD$1100 on amazon!
[03:05:11] <neominimum> bargain :p
[03:09:00] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 240 seconds)
[03:13:21] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:14:13] <ilmu> wait, is it always true that I can specify :element-type?
[03:14:40] <ilmu> or is it just for files and sockets (ok so yes that is most streams but just to make sure)
[03:26:40] <rotateq> neominimum: i still need it in paper :( as most of the others
[03:28:26] <rotateq> ilmu: i would say depends what you use as an interface to those, like the WITH-OPEN-FILE macro which wraps the call to OPEN in an UNWIND-PROTECT form, so CLOSE is called too when the scope is finished
[03:30:01] <ilmu> so the issue is that everything is pushing me towards reasoning in terms of characters
[03:30:38] <rotateq> and that's bad?
[03:30:44] <ilmu> for example the make-string-...-stream (with ... input/output) doesn't seem to have any option to be treated as bytes
[03:30:51] <ilmu> idk if it's bad
[03:31:06] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:31:10] <ilmu> I just want to think in terms of bytes and am wondering what is the most ergonomic way to accomplish it
[03:31:21] <ilmu> (without pointless conversions)
[03:31:37] <rotateq> yes as strings are specified to be vectors with element-type character
[03:31:56] <ilmu> yeah okay but is there a way to make a byte stream in the same way?
[03:32:06] <rotateq> you can, by using CHAR-CODE and CODE-CHAR
[03:32:12] <ilmu> from a byte vector I mean
[03:32:47] <rotateq> nothing stops you from defining that :)
[03:33:16] <ilmu> okay I just wonder if the implementation would be any different from the one that is in terms of characters
[03:34:06] <rotateq> so having also characters opens up new ways differentiating between different stream classes
[03:34:30] <ilmu> you are basically saying; go look at the source for make-string-...-stream and change every mention of string to a bytevector, which makes me think there should already be a generalization
[03:35:02] <rotateq> in "Object-oriented Programming in CL" by Sonya Keene chapter 11 does some stuff on stream classes, as an advanced thing with CLOS
[03:35:20] <ilmu> okay, thanks for the tip, I'll look it up
[03:35:28] <rotateq> no i don't ^^ that would be just an implementation specific thing
[03:35:51] <rotateq> (but I don't know how experienced you are right now with other things)
[03:36:07] <rotateq> it's an excellent book too
[03:40:56] <ilmu> ah I'm stupid
[03:41:07] <rotateq> no why that?
[03:41:13] <ilmu> okay ofc everywhere it matters I can just set it to a bytestream
[03:41:22] <rotateq> nice
[03:41:38] <ilmu> and the one place where you don't care is in silly examples where you just make it from a string
[03:41:58] <ilmu> and then you could just do the conversion without it mattering much
[03:42:05] <ilmu> the design is always pointing the way a bit
[03:43:46] *** Joins: Oladon (~olad@98.43.81.226)
[04:19:00] *** Quits: speskk (~speskk@user/speskk) (Ping timeout: 240 seconds)
[04:59:04] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:11:37] *** Joins: Bike (~Bike@71.69.170.70)
[05:27:36] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:c52d:7d43:3699:c92e) (Quit: Konversation terminated!)
[06:26:04] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:47:14] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:57:01] *** Joins: Oladon (~olad@98.43.81.226)
[07:30:49] <beach> Good morning everyone! 
[07:32:13] <beach> lottaquestions:  Clouseau is in no way SICL specific, and you are right, SICL is not usable yet.  I use Clouseau with SBCL, but any implementation that can run McCLIM will do.
[08:08:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:15:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:17:43] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:20:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[08:25:16] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:27:55] <White_Flame> ilmu: the flexi-streams library makes the byte vs character handling more distinct.  babel is also a lib that does string<->byte vector conversion with different encodings
[08:28:45] <White_Flame> characters exist in CL as notional entities, not bytes, although they obviously have an internal numeric representation.  It is the encoding type that converts characters to bytes and back
[08:30:42] <White_Flame> eg, (char-code #\ðŸ’©) => 128169, which isn't a byte
[08:30:51] <White_Flame> (that was supposed to be a poop emoji if IRC ate it)
[08:35:14] <beach> If all I need are bytes and latin-1, with SBCL, I occasionally use the latin-1 encoding since it is valid for all codes from 0 to 255.  Then I convert to bytes using CHAR-CODE.  This trick can be useful for reading things like PGM files that contain some limited text but mostly bytes.  Then I can use READ-LINE to skip comments and READ to read the dimensions.  
[08:37:19] *** Joins: dre (~dre@2001:8003:c932:c301:147f:456a:d163:a87f)
[09:31:04] <neominimum> Is something like the following considered an idiomatic use of lists? https://pastebin.com/raw/pGFcc7ae or are there better options for obtaining O(1) appending to lists?
[09:32:32] <neominimum> I call it the 'last-first list'
[09:36:07] <beach> It looks reasonable to me.  But there are other improvements possible.
[09:36:31] <beach> First, SETF takes any number of pairs, so you can avoid PROGN in branches of IF.
[09:36:45] <beach> Second, you are not using the right number of semicolons for top-level comments. 
[09:44:12] <neominimum> Okay great, I did not know that about setf. For comments is this better? https://pastebin.com/raw/M3iTNR29
[09:45:25] <beach> Busy right now.  Sorry.
[09:46:21] <neominimum> It's no problem
[09:46:43] <neominimum> Thanks anyway :)
[09:48:20] <kagevf> neominimum: I would say 3 semi-colons like you have is right, based on what's written here: https://gigamonkeys.com/book/syntax-and-semantics.html (at the very bottom just above the footnotes)
[09:49:58] <aeth> Oh, good, that mentions 4 semicolons. That's kind of optional. Not everyone agrees with it. A lot of files just use 3 constantly throughout the top level comments.
[09:50:04] <aeth> I personally use 4
[09:50:35] <neominimum> Great! I vaguely remembered reading something like that in the past, it probably was that exact chapter.
[09:51:05] <aeth> and, yeah, that's probably where everyone first encounters the concept
[09:51:16] <aeth> but then they never see 4 semicolons again and wonder if they made it up in their mind :-p
[09:58:13] <neominimum> Heh, it's the elusive quad semicola!
[09:58:51] <kagevf> p61 in Ansi Common Lisp (pg) says similar: "four semicolons in a heading, three in a description of a function or macro, two to explain the line below, and one when a comment is on the same line as the code it applies to"
[09:59:33] <neominimum> Well it was under our noses all along
[10:00:06] <neominimum> good to know though
[10:00:10] <neominimum> cheers
[10:00:54] <kagevf> oh, and to comment out sexps you do M-; in emacs
[10:01:49] <kagevf> select the sexps you want to comment out then hit M-; and emacs will actually separate out the sexps you have selected so there's no innocent parentheses that are affected
[10:02:15] <kagevf> try it it's pretty handy
[10:04:37] <neominimum> I think that is what tripped me up because I use evil mode, so my shortcut is simply `g e` in normal mode but it only inserts two semi-colons. I wonder if there is a way to add a level to the comments just as easily.
[10:06:14] <neominimum> sorry that should be `g c`
[10:17:13] <beach> neominimum: Another thing is that you probably want to hide all that machinery behind an abstract data type.
[10:18:10] <beach> You would then create what is known as a protocol (which is a generalization of an interface) that typically (but not necessarily) uses standard classes and generic functions. 
[10:21:37] <neominimum> beach: I had wondered if it would be wise to make `lfl` a structure or a class, as a big downside of the current impl creates ambiguity as to whether a list is now a list or an lfl list.
[10:21:52] <beach> Exactly.
[10:22:18] <beach> You would then do the exact same thing that you now do, but to a list contained in a slot of the main class.
[10:26:59] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[10:27:02] <neominimum> Alright I'll take that approach then. Thank you
[10:27:20] <beach> Sure.
[11:19:38] *** Joins: shka (~herr@109.231.3.55)
[11:53:41] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[12:09:20] *** Joins: tewi (~tewi@apn-95-41-153-91.dynamic.gprs.plus.pl)
[12:10:47] *** Joins: ilmu1 (~ilmu@176.76.243.211)
[12:14:02] *** Quits: ilmu (~ilmu@176.76.243.98) (Ping timeout: 257 seconds)
[12:40:36] *** Joins: treflip (~user@user/treflip)
[12:42:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[12:44:22] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:b668:8e8:f292:8d7c)
[13:39:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[13:40:30] *** Joins: aeth (~aeth@user/aeth)
[13:55:06] *** Joins: eugercek (~user@user/eugercek)
[13:59:09] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[14:29:57] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Remote host closed the connection)
[14:31:44] *** Quits: treflip (~user@user/treflip) (Ping timeout: 256 seconds)
[15:03:33] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[15:25:52] <neominimum> Anyone know of some good examples of protocol design and layout that I could use to compare to the one I have been working on?
[15:26:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:50:44] <beach> For protocol design, you can look at Cluffer, which I am fairly proud of in that respect.
[15:51:15] <beach> https://github.com/robert-strandh/Cluffer
[15:51:28] <beach> What do you mean by "layout"?
[15:56:27] *** Joins: random-nick (~random-ni@87.116.179.129)
[16:04:20] <neominimum> Alright, Cluffer!, I'll take a look at that tomorrow morning, cheers. I should have elaborated on that (in regards to layout) but I meant how the code is organised across/within files.
[16:04:52] <beach> Oh, I see.  Cluffer is a good example for that as well.
[18:31:59] *** Joins: treflip (~user@user/treflip)
[19:28:06] *** ilmu1 is now known as ilmu
[19:39:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:40:56] *** Joins: aeth (~aeth@user/aeth)
[20:54:57] *** Joins: tane (~tane@user/tane)
[21:29:56] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 256 seconds)
[21:48:19] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:09:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:30:04] *** Joins: johnjaye (~pi@173.209.64.74)
[22:39:55] <kagevf> cluffer == cl-uffer == CL buffer? :)
[22:40:22] <johnjaye> i still get a package cl is deprecated error from my dotemacs
[22:40:48] <johnjaye> no idea why. i changed cl to "cl-lib". XD
[22:42:24] <bremner> johnjaye: probably some package you require. But not really on topic here?
[22:44:04] <johnjaye> ah. sadly humor doesn't translate well in text
[22:44:05] <kagevf> I get that error too, but AFAIK doesen't seem to affect anything
[22:44:20] <johnjaye> in this case i was responding to kagevf 
[22:44:25] <kagevf> hahaha
[22:44:43] <kagevf> it's nice having familiar CLisms available in elisp :)
[22:46:18] <johnjaye> there's even an entire manual about it. i got as far as &rest and &aux arguments before my brain melted
[22:47:36] <kagevf> &rest is very handy for macros
[22:51:29] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:32:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
