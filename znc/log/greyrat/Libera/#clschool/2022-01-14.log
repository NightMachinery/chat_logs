[00:00:22] *** Joins: johnjaye (~pi@154.6.152.74)
[00:04:27] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[00:05:34] *** Joins: nexeq (~nexeq@user/nexeq)
[00:11:19] *** Joins: Oladon (~olad@98.43.81.226)
[00:35:03] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[00:37:00] *** Joins: Oladon (~olad@98.43.81.226)
[00:39:18] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:50:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:57:15] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[00:58:09] *** Joins: nexeq (~nexeq@user/nexeq)
[01:16:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:21:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[01:28:22] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[01:29:49] *** Joins: nexeq (~nexeq@user/nexeq)
[01:36:36] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:44:24] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[01:45:06] *** Joins: nexeq (~nexeq@user/nexeq)
[01:49:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:04:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:18:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:43:17] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[03:05:13] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[03:05:53] *** Joins: nexeq (~nexeq@user/nexeq)
[03:17:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:22:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:23:13] *** Joins: Skitx (~user@2800:484:8a88:6e00:65d2:a039:831f:477e)
[03:25:52] *** Quits: nexeq (~nexeq@user/nexeq) (Remote host closed the connection)
[04:02:19] *** Joins: nexeq (nexeq@user/nexeq)
[04:02:38] *** Quits: nexeq (nexeq@user/nexeq) (Client Quit)
[04:59:42] *** Joins: Oladon (~olad@98.43.81.226)
[05:14:13] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[05:17:21] *** Quits: Skitx (~user@2800:484:8a88:6e00:65d2:a039:831f:477e) (Ping timeout: 250 seconds)
[05:19:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:21:54] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[05:24:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[05:27:34] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[06:43:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:15:56] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[07:20:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:25:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[07:27:23] *** Quits: sts-q (~sts-q@212.53.219.138) (Ping timeout: 256 seconds)
[07:29:51] *** Joins: sts-q (~sts-q@212.53.219.230)
[07:30:35] <beach> Good morning everyone! 
[07:40:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:00:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:12:34] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[08:13:15] *** Joins: gko (~user@user/gko)
[08:24:01] <rotateq> beach: Some hours ago I found another nice thing for my repertoire against the always annoying question "And what can LISP even can be used for?" (like with last time the prototyping of the C# garbage collect): https://en.wikipedia.org/wiki/Hashlife
[08:24:24] <rotateq> It mentions: "The algorithm was first described by Bill Gosper in the early 1980s while he was engaged in research at the Xerox Palo Alto Research Center. Hashlife was originally implemented on Symbolics Lisp machines with the aid of the Flavors extension."
[08:25:24] <rotateq> Bill Gosper seems to be another of those big LISP people out there who's also such kind of lovely maverick. :)
[08:28:22] <rotateq> Sorry I mistyped, it should be '"And what can LISP even be used for?"'
[08:35:12] <rotateq> Hm let me see the name for Xerox's Common Lisp implementation(s) ..
[08:36:02] <rotateq> Ah okay also Interlisp but someone mentioned it was more like an environment.
[08:52:05] <beach> Nice!
[08:52:50] <beach> You know the one from Pitman, right?
[08:53:12] <rotateq> No go ahead if you like (but I know the nhplace website).
[08:54:00] <beach> “Please don't assume Lisp is only useful for Animation and Graphics, AI, Bioinformatics, B2B and Ecommerce, Data Mining, EDA/Semiconductor applications, Expert Systems, Finance, Intelligent Agents, Knowledge Management, Mechanical CAD, Modeling and Simulation, Natural Language, Optimization, Research, Risk Analysis, Scheduling, Telecom, and Web Authoring just because these are the only things they happened to list.” 
[08:54:14] <rotateq> I wonder what Pitman and the other fellows on whom shoulders we stand do nowadays.
[08:54:50] <beach> The grammar of that sentence is strange.
[08:54:52] <rotateq> Ahh of course I know that quote! Like many others I like so much, cause they're so true and for me there's much more into those things.
[08:54:57] <beach> ... your grammar I mean.
[08:55:34] <rotateq> Yes mine of course ... sometimes I'm not exactly sure how to give a German thought into English.
[08:56:26] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[08:56:27] <rotateq> "Sometimes I wonder what the people whose work and shoulders we stand on are doing today." better?
[08:56:43] <beach> Much! :)
[08:56:46] <rotateq> oh maybe my grammar let pjb run away :)
[08:56:54] <rotateq> DeepL helps a lot in such situations!
[09:22:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:27:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[09:30:21] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:87f:3f13:7a62:d6c7)
[11:24:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:28:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[11:40:50] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[12:33:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:40:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[13:02:43] *** Joins: shka (~herr@109.231.0.226)
[13:18:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:19:38] *** Joins: lisp123_ (~lisp123@45.132.225.26)
[13:23:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:31:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:35:04] *** Quits: lisp123_ (~lisp123@45.132.225.26) (Ping timeout: 250 seconds)
[13:45:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:58:03] *** Joins: lispy (~lispy4@84.69.59.93)
[13:59:07] *** Joins: pjb (~pjb@user/pjb)
[14:01:56] <pjb> rotateq: http://franz.com/success can give some examples.
[14:16:18] <rotateq> pjb: I know that list and often send it to people. :)
[14:17:28] <rotateq> We should write Andy Gavin and ask for the ACL code of the tools with which Crash Bandicoot was made. There's a newer video with him explaining how they "hacked" the PS1 resources to get it cleverly running.
[14:47:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[14:56:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[15:04:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:44:01] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[15:47:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:50:27] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:52:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:54:39] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:02:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:03:31] *** Joins: Skitx (~user@2800:484:8a88:6e00:ec73:8a3d:4a2f:f5e8)
[17:57:43] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[18:11:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:23:26] *** Quits: chealjo (~nimiux@freeshell.de) (Remote host closed the connection)
[18:27:28] <CodeBitCookie[m]> Hello Everyone!
[18:27:48] <beach> Hello CodeBitCookie[m].
[18:27:49] <CodeBitCookie[m]> How can I turn a double-float into a single-float?
[18:28:03] <beach> Use COERCE.
[18:28:04] <CodeBitCookie[m]> (without the use of "f")
[18:28:36] <CodeBitCookie[m]> Yayyyyyy Thanks so much beach !
[18:28:43] <beach> Sure.
[18:33:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:41:17] *** Quits: Skitx (~user@2800:484:8a88:6e00:ec73:8a3d:4a2f:f5e8) (Ping timeout: 240 seconds)
[19:00:29] <edgar-rft> (coerce boat 'double-float)
[19:12:02] *** Joins: edrx (~Eduardo@2804:56c:d2f8:7700:b6a7:98b4:cce:283a)
[19:13:20] <edrx> how do I translate this - that works in Emacs Lisp - to Common Lisp? (read "(foo . \"bar\")")
[19:17:31] <lisp123> read-from-string
[19:19:44] <edrx> works! but it returns object,position
[19:19:50] <lisp123> It's fine
[19:19:58] <lisp123> That is called a multiple value
[19:20:02] <edrx> how do I drop the "position" to keep just "object"?
[19:20:03] <lisp123> but the first one is the object
[19:20:21] <edrx> I didn't know that CL had that! I use that in Lua a lot...
[19:20:36] <lisp123> if you need to access the second value, you would do something like (multiple-value-bind (object position) (read-from-string "(foo . bar)") ...)
[19:20:46] <lisp123> CL is basically perfect ;-)
[19:20:50] <edrx> I need just the first
[19:20:55] <lisp123> so yeah just call it
[19:21:01] <lisp123> try (print (read-from-string ...))
[19:21:06] <lisp123> to see what i mean
[19:22:37] <edrx> (identity (read-from-string "(foo  .  \"bar\")"))
[19:23:11] <lisp123> No need to do that
[19:23:15] <lisp123> just use the form as is
[19:23:47] <lisp123> You only see the additional values printed in the REPL but they won't be propagated up to calling functions unless there is a multiple-value-bind in place
[19:24:26] <edrx> aaah, nice!
[19:32:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:52:27] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:20:21] <random-nick> there's one more place where the multiple values are kept
[20:20:40] <random-nick> (defun a () (read-from-string "(foo . bar)"))
[20:20:47] <random-nick> (a) will still return 2 values
[20:23:50] <lisp123> yes
[20:36:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:38:02] *** Joins: johnjaye (~pi@154.6.152.74)
[20:48:03] *** Parts: drakonis (drakonis@user/drakonis) (WeeChat 3.1)
[20:53:13] *** Joins: domovod (~domovod@176.196.122.197)
[21:10:01] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:17:54] *** Joins: dra (~dra@2a04:4540:6409:9600:3465:7864:114:561c)
[21:18:53] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:87f:3f13:7a62:d6c7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:47:32] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:25:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:33:58] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[22:34:01] <seok> if a
[22:34:28] <seok> if a class inherits 2 classes which each has the same generic function defined
[22:34:43] <seok> which is called when that method invokes ?
[22:38:46] <seok> when I test this, the method runs with the class that is inherited first 
[22:38:50] <seok> is this guaranteed ?
[22:46:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:48:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:53:58] <phoe> yes
[22:54:24] <phoe> if you have (defmethod foo ((thing a)) ...) and (defmethod foo ((thing b)) ...)
[22:54:57] <phoe> then which method of FOO gets called depends only on the class precedence list of THING
[22:55:07] <phoe> in particular, whether A or B is first
[22:55:20] <phoe> or rather, which one of them is earlier in the CPL
[23:02:57] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 256 seconds)
[23:11:48] <seok> great, thank you
[23:20:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:30:46] *** Joins: Oladon (~olad@98.43.81.226)
[23:44:46] <pjb> seok: it's determined by compute-applicable-methods which returns a list of methods in the order in which they will be called.
[23:45:17] <pjb> seok: the standard methods combinations specify the order.  Other methods combinations could specify random orders.
[23:45:37] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[23:45:48] <pjb> seok: example: https://termbin.com/eixe
