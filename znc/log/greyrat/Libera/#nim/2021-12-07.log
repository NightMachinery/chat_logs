[00:03:26] <FromDiscord> <pmunch> Yup, I program exclusively in Vim. Even for C# at work, although that's a bit painful because I haven't been bothered to set up OmniSharp completely yet..
[00:03:55] <FromDiscord> <pmunch> I do need to restart vim after I first compile with Futhark IIRC though
[00:04:30] <FromDiscord> <pmunch> Not quite sure why, maybe it's nimsuggest blacklisting the macro or something ü§∑‚Äç‚ôÇÔ∏è
[00:04:49] <FromDiscord> <pmunch> I'm also using NimLSP for completions
[00:17:00] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[00:17:33] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[00:18:28] <FromDiscord> <ynfle (ynfle)> For some reason, nimlsp goes through periods of not suggesting. Any reason/anyone seen this before?
[00:19:17] <nrds> <06Prestige99> I think it's nimsuggest crashing
[00:19:21] <nrds> <06Prestige99> happens to me a lot
[00:22:29] <arkanoid> pmunch, no vscode is not picking anything from the nim in .cache/nim
[00:22:39] <arkanoid> using saem extension
[00:22:50] <arkanoid> that's using nimsuggests under the hood
[00:23:11] <arkanoid> actually I don't know if .cache/nim expected to be parsed or not, generally speaking
[00:23:35] <arkanoid> unrelated: changing "maxLoopIterationsVM" in .nims file seems ignored
[00:25:24] <arkanoid> I'm also failing to use it with nimble build
[00:27:00] *** Joins: thelarry (~thelarry@dslb-092-073-100-162.092.073.pools.vodafone-ip.de)
[00:28:44] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[00:28:47] *** Quits: thelarry (~thelarry@dslb-092-073-100-162.092.073.pools.vodafone-ip.de) (Client Quit)
[00:29:00] <arkanoid> I'm wrong, it works with nimble
[00:43:24] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[00:56:59] <FromDiscord> <geekrelief> @PMunch in Futhark's description where you compare against nimterop:"nimterop uses treesitter and performs slightly better. It is theoretically able to parse all C syntax, but the C semantics is still up to nimterop to implement. Which means it can't do macros or things like IFDEF automatically." What does "C semantics is still up to nimterop to implement" and "things like IFDEF automatically" mean?
[01:00:01] <FromDiscord> <pmunch> Ah, basically C as a syntax isn't terribly hard to parse. Getting all the words into some nice data structure. But once you throw in pre-processor stuff like IFDEF (analogous to \`when defined\` in Nim) and consider that you can have macros in C that resolves types with IFDEF logic you end up having to do a lot more than just parse the syntax of C in order to understand C.
[01:01:06] <FromDiscord> <pmunch> Think of it like finding the verb, subject, and adjectives in a sentence, but to understand the meaning of the sentence you have to understand context, sarcasm, jokes, etc.
[01:05:19] <arkanoid> pmunch, I'm trying a new thing with futhark! I'm almost there. My target is this in nim: https://gi.readthedocs.io/en/latest/writingbindings/libgirepository.html
[01:06:11] <arkanoid> sadly I have to do stuff like "cast[ptr gchar_436208013]("GLib".cstring)" I yet have to find out if there's a better thing I can do without changes in futhark
[01:06:24] <arkanoid> but json and nim went in place on first try
[01:07:02] <FromDiscord> <pmunch> \`gchar\` should be an alias for \`gchar\_\<number\>\`
[01:08:02] <FromDiscord> <pmunch> Basically those numbers are just to be able to backwards and forward declare variables. It's a bit messy, but it's so that you can provide your own definition of gchar if you wanted to, by simply defining it before calling Futhark
[01:08:47] <tk> In nim, where / how can I split something into multiple lines?
[01:09:14] <FromDiscord> <pmunch> I mean just the fact that you wanted to try another library right after getting the first one to work is a big win in my book. With the other solutions I've always sworn to myself that I would never try to wrap C in Nim again once I'm done with it!
[01:09:33] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3He4
[01:10:17] <FromDiscord> <dain> i know that max and min on floats have to be done differently to deal with `nan` but it should resolve to their special implementations either way, right?
[01:11:59] <FromDiscord> <geekrelief> In reply to @pmunch "Ah, basically C as": hmm I'd assume running the C code through a preprocessor step would deal with that.  I mean nimterop already does that.  I'd assume Futharek/clang does that too, right?
[01:12:04] <arkanoid> pmunch, you should be proud of futhark, I'm spending more time in writing that C code in newly created nim bindings than creating the nimble project and setup 7 lines of futhark (importc included!)
[01:12:39] <arkanoid> and it's taking time as I don't have autocompletion, so I have to lookup into .nim and .json what I'm looking for
[01:13:43] <arkanoid> also, instead of copypasting the whole #include list of main .h, now I've just been adding those according to the required "file" entries I found in opir json
[01:13:52] <FromDiscord> <pmunch> Geekrelief, Futhark uses Clang, which is a full blown C compiler. Essentially Clang compiles the code, and Futhark just reads out all the info it needs
[01:13:55] <FromDiscord> <geekrelief> Just FYI, I've been using a forked version of nimterop to bind The Machinery.  It took a bit to get going, but things are working out smoothly now.  Out of curiosity, I'm still interested in getting Futhark to work for me since I last tried it on Windows.
[01:15:17] <FromDiscord> <pmunch> Arkanoid, thank you, means a lot that other people seem to enjoy it as well \:) I've been using it with great luck myself. Just so much easier to use C libraries when they wrap themselves
[01:15:40] <FromDiscord> <pmunch> Hmm, what was the issues you where running into?
[01:20:04] <arkanoid> I think you should provide a flag to create symlink (or a copy) of the generated .nim file into the project. If the point of futhark is to leave the importc block within the project and not separately, it should promote interop with tools
[01:22:18] <FromDiscord> <pmunch> I was thinking of having a mode where it just spit out a Nim file without all the crazy when statements
[01:22:24] <FromDiscord> <pmunch> So that you could ship it
[01:22:50] <FromDiscord> <pmunch> I'm not sure a local copy would actually do anything that the cache file couldn't do
[01:23:05] <arkanoid> yeah, it could be easier to handle. How you control the cache? Do you check the hashed contents of the importc block?
[01:23:06] <FromDiscord> <geekrelief> sent a long message, see https://paste.rs/K87
[01:24:30] <FromDiscord> <haxscramper> Futhark was featured on "this month with nim" earlier, right? Maybe you could make note about the progress since that time
[01:24:42] <arkanoid> the problem now is that the suffix of the futhark_*.nim file changes in cache, so symlink has to be re-created every cache clear as a workaround
[01:24:52] <FromDiscord> <haxscramper> And post it again, or at least do a forum thread for this one
[01:25:50] <FromDiscord> <geekrelief> My progress on binding The Machinery. https://media.discordapp.net/attachments/371759389889003532/917534828801450014/tm-nim_first_person.mp4
[01:25:53] <arkanoid> and also I think that a lanternfish counter should be integrated in futhark for some reason
[01:27:11] <FromDiscord> <geekrelief> Weird I though mp4s were playable in discord.
[01:27:15] <FromDiscord> <geekrelief> (edit) "though" => "thought"
[01:30:34] <FromDiscord> <geekrelief> hmm maybe i's the H.265 codec that's the issue.
[01:30:46] <FromDiscord> <konsumlamm> In reply to @dain "I'm looking in the": i think it's not actually defined as `if x <= y: x else: y`, since it has a `magic` pragma‚Üµmight also just be legacy, maybe ask in #internals
[01:31:23] <FromDiscord> <Elegantbeef> You're right
[01:31:41] <FromDiscord> <Elegantbeef> Magic means it goes into the compiler and will emit platform specific code, the body might be used for the VM alone
[01:32:39] <FromDiscord> <Elegantbeef> The reason it's not a single `proc min(x, y: SomeInteger): SomeInteger {.magic: "MinI", noSideEffect.}` is beyond me
[01:34:06] <FromDiscord> <pmunch> Arkanoid, yes it essentially hashes a couple things. So if you change something and then change it back it won't have to rebuild.
[01:34:34] <arkanoid> pmunch, k, I'll use the symlink hack for now. It works
[01:34:49] <FromDiscord> <pmunch> And haxscramper, Futhark hasn't been featured in this month in Nim yet
[01:35:13] <FromDiscord> <haxscramper> Then you certainly should add it here
[01:36:10] <nrds> <06Prestige99> pmunch are you able to use compton inside of Xephyr? Seems to not composite, for me
[01:48:26] *** Joins: sagax (~sagax_nb@user/sagax)
[01:53:36] <arkanoid> what's the nim way to convert an int return into an if success clause when doing C bindings?
[01:54:52] <FromDiscord> <Elegantbeef> `if procCall() != 0:`?
[01:56:25] <arkanoid> thanks
[01:56:47] <arkanoid> and what would be the nim conversion of "(const GIArgument *)&in_args" ? not sure how to handle const here
[01:57:50] <FromDiscord> <Elegantbeef> I dont think you can, but i dont know the C semantics for const
[01:59:15] <arkanoid> mmm let's try without it, maybe it works
[02:07:58] <arkanoid> pmunch: almost there :) https://play.nim-lang.org/#ix=3Heb
[02:13:02] *** Joins: jjido (~Denis@90.213.58.125)
[02:19:50] *** Joins: thelarry (~thelarry@dslb-092-073-100-162.092.073.pools.vodafone-ip.de)
[03:00:48] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:15:34] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[03:15:53] <ehmry> is there a way to force the export of an unexported symbol in another module?
[03:16:52] <ehmry> I ned to derefing a ref to an unexported obj before acting on the type
[03:17:57] <ehmry> *need to deref
[03:18:29] <FromDiscord> <Elegantbeef> What do you mean?
[03:19:09] *** Quits: thelarry (~thelarry@dslb-092-073-100-162.092.073.pools.vodafone-ip.de) (Quit: Client closed)
[03:21:23] <ehmry> XmlNode is exported but XmlNodeObj is not, and I can't avoid dereferencing XmlNode
[03:22:57] <FromDiscord> <Elegantbeef> I dont see the issue
[03:24:41] <FromDiscord> <Elegantbeef> If you can provide a minimal code example
[03:29:49] <ehmry> nevermind, I can avoid the deref. I'm writing a hook to convert XmlNode to and from another encoding
[03:30:23] <FromDiscord> <Elegantbeef> Glad i could stand by and just be confused! üòõ
[03:30:39] <ehmry> anytime
[03:32:59] <ehmry> https://git.syndicate-lang.org/ehmry/preserves-nim/src/branch/trunk/src/preserves.nim#L639
[03:33:39] <ehmry> translating Nim types to some binary encoding
[03:35:08] <FromDiscord> <codic> Prestige: It doesn't work, Xephyr uses software rendering
[03:35:21] <FromDiscord> <codic> I saw somewhere a way to pass through the GPU but I don't remember way
[03:35:24] <FromDiscord> <codic> Where
[03:39:43] <arkanoid> does a converter act more like a template or a proc?
[03:39:52] <FromDiscord> <Elegantbeef> It's a proc
[03:40:05] <arkanoid> ok thanks
[03:40:19] <arkanoid> so I bet it's faster to make a template for frequent conversions
[03:40:41] <arkanoid> (like for C interop frequent cast)
[03:40:52] <FromDiscord> <Elegantbeef> Small procs will get inlined in release/danger builds built with -d\:lto
[03:41:17] <FromDiscord> <Elegantbeef> Guess `-d:lto` isnt needed for that but it helps
[03:41:25] <FromDiscord> <Elegantbeef> helps performance
[03:41:31] <arkanoid> well, ok, less typing
[03:42:59] <arkanoid> may I ask you a favor? I'm binding libgirepository and I'm testing it against this example here https://gi.readthedocs.io/en/latest/writingbindings/libgirepository.html , but the original example fails with SIGABRT to me
[03:43:07] <arkanoid> could you plese try to compile and run on your box?
[03:43:56] <arkanoid> I compile with "gcc example.c -o example -I/usr/include/gobject-introspection-1.0 (pkg-config --cflags --libs glib-2.0) -lgirepository-1.0"
[03:47:22] <FromDiscord> <Elegantbeef> Getting an erro it cannot find `glib-object.h`
[03:47:29] <FromDiscord> <Elegantbeef> And yes i have the package installed
[03:48:30] <FromDiscord> <Elegantbeef> Well actually it bitches about the `()`
[03:49:41] <arkanoid> sorry, I use fish shell, you have to $(...) with bash/zsh
[03:49:48] <arkanoid> my fault
[03:50:03] <FromDiscord> <Elegantbeef> Prints fine here
[03:50:50] <arkanoid> good! I've just waster 3 hours for a version mismatch
[03:50:52] <arkanoid> thanks
[03:50:59] <arkanoid> what does it print?
[03:51:01] <FromDiscord> <Elegantbeef> No problem
[03:51:04] <arkanoid> just for the sake of clarity
[03:51:07] <FromDiscord> <Elegantbeef> "Hello world"
[03:52:11] <arkanoid> no "domain", no "line 42"?
[03:52:27] <FromDiscord> <Elegantbeef> Just "hello world"
[03:52:44] <FromDiscord> <Elegantbeef> Wait a minute i'm dumb
[03:53:10] <FromDiscord> <Elegantbeef> I had a program i tested earlier that i was running cause i named the C file `test` and forgot c doesnt output a binary with that name
[03:53:25] <arkanoid> :D
[03:53:28] <FromDiscord> <Elegantbeef> Yep i also get the abort
[03:53:29] <FromDiscord> <demotomohiro> Are you trying to make a libgirepository binding in different way from gintro?‚Üµhttps://github.com/StefanSalewski/gintro
[03:54:04] <arkanoid> Elegantbeef, ok thanks, so it's just a rubbish example. Not sure
[03:55:37] <arkanoid> demotohiro, I'm just getting my hands dirty with the new automatic nim binding generator futhark, and for my experiment I've been targetting libgirepository to enable generic interfacing to gobject universe. It does work, at least it seems to apart from this bad example
[03:58:03] <FromDiscord> <demotomohiro> Nice!
[03:58:29] <arkanoid> demotomohiro, gintro is a lib that not only uses actual GIR files, but creates good nim wrappers. Mine is a raw approch to up a C interop quickly without even using GIR
[03:59:10] <arkanoid> I mean, libgirepository uses them, I'm talking about the wrapping of libgirepository
[04:03:05] <nrds> <06Prestige99> thanks @codic, I think I'll need to get that set up so I can test some things.. without having to restart my running wm after every change lol
[04:03:34] <FromDiscord> <codic> what do you need to test with compositor for? curious
[04:03:51] <FromDiscord> <codic> btw you could also run 2 x sessions, I often do that
[04:04:57] <FromDiscord> <codic> oh it seems that the opengl acceleration is in some forks, not in master
[04:05:23] <nrds> <06Prestige99> this issue https://github.com/avahe-kellenberger/nimdow/issues/189 
[04:05:46] <nrds> <06Prestige99> having windows hide in the bg when there's a fullscreen window, basically
[04:06:24] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:06:30] <FromDiscord> <codic> Oh that is an interesting feature, should implement in Worm
[04:07:02] <FromDiscord> <codic> Yeah can probably iterate over all clients except the fullscreen one and set that
[04:08:30] <nrds> <06Prestige99> There are some edge cases that need to be covered - I think I'll just "hide" the windows by moving them offscreen
[04:08:44] <nrds> <06Prestige99> but annoying to test, I'll check out xephyr forks
[04:09:05] <FromDiscord> <Elegantbeef> Does unmapping the window not solve that?
[04:09:28] <nrds> <06Prestige99> It would, just want to actually test that all edge cases work
[04:09:55] <nrds> <06Prestige99> Like if I have a fullscreen window open, and another fullscreen app starts, etc
[04:12:47] <FromDiscord> <codic> Would the past one be hidden or not?
[04:12:55] <FromDiscord> <codic> past = 1st fullscreen one
[04:13:00] <FromDiscord> <codic> In reply to @nrds "<Prestige> There are some": why not unmap?
[04:13:06] <FromDiscord> <codic> isn't unmap how you implement workspaces too?
[04:14:42] <nrds> <06Prestige99> I actually just move them offscreen to get around a weird issue I was having, it's the same way dwm handles things
[04:15:11] <nrds> <06Prestige99> If I get bored enough one day I'm going to restructure how it all works
[04:15:15] <FromDiscord> <codic> Oh huh
[04:15:17] <FromDiscord> <codic> What was the issue?
[04:15:39] <nrds> <06Prestige99> Don't recall exactly
[04:15:49] <FromDiscord> <codic> yeah weird
[04:15:58] <FromDiscord> <codic> have not had any yet
[04:26:13] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Remote host closed the connection)
[04:38:46] <arkanoid> is cstring a char* or is a char that requires .addr ?
[04:39:51] <FromDiscord> <Elegantbeef> cstring is a ptr char
[04:39:58] <arkanoid> thanks
[04:40:15] <arkanoid> sorry but I'm not a C programmer but I'm using nim to dive into it
[04:41:48] <FromDiscord> <Elegantbeef> Ah i'm very much not a C programmer either so i scream at it until it behaves
[04:43:33] <FromDiscord> <Rika> What do you need to qualify as a c programmer
[04:44:50] <FromDiscord> <Elegantbeef> Someone that likes writing and using C would be up in the qualifications imo
[04:48:24] <FromDiscord> <codic> In reply to @Elegantbeef "Someone that likes writing": You will find a shortage of C programmers
[04:48:34] <FromDiscord> <codic> There are almost no C programmers anymore by that definition lol
[04:50:14] <arkanoid> is there something already included in nim that does int to bool conversion like in C (true if i !=0 else otherwise) or I have to write my own? I know it's trivial
[04:53:04] <FromDiscord> <demotomohiro> !eval var x = 1; echo x!=0
[04:53:08] <NimBot> true
[04:55:43] <FromDiscord> <demotomohiro> !eval var x = 1; echo bool(x)
[04:55:47] <NimBot> true
[04:57:21] <FromDiscord> <demotomohiro> Anyway, Nim doesn't convert int to bool automatically.
[04:57:39] <FromDiscord> <exelotl> arkanoid: you mean implicitly? You can use converters for that, with bool as the example: https://nim-lang.org/docs/manual.html#converters
[04:58:13] <FromDiscord> <exelotl> It's not recommended to do this though :P
[04:59:04] <FromDiscord> <demotomohiro> Just writing `x != 0` would be fine.
[04:59:23] <FromDiscord> <exelotl> Yep, that's the Nim way
[05:01:53] <FromDiscord> <demotomohiro> When I learned C language long time ago, there was no bool type in C. int was used as bool type. When int value was 0, it is false, otherwise it is true.
[05:02:04] <arkanoid> how curious, using converter in my context doesn't work, but == 0 does
[05:16:02] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:20:42] <arkanoid> I've successfully wrapped and tested libgirepository via futhark! It's so easy not with futhark that I've opened an issue asking what's the proper way to deliver "raw" C bindings, and if is more convenient to distribute autogenerated .nim files or just bring futhark with the package deps: https://github.com/PMunch/futhark/issues/7
[05:46:44] <arkanoid> s/not/now
[06:06:49] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[06:07:20] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[06:14:45] <FromDiscord> <DaiChimpo> if a string contains an escape character, is there a way to print the literal? so "Hello\n" would print as "Hello\n" instead of "Hello" with a newline?
[06:16:34] <FromDiscord> <DaiChimpo> .strip(chars={'\n','\r'}) is NOT removing newlines and it's frustrating why
[06:29:41] <FromDiscord> <Mocha> If you're trying to print "Hello\n", then you can just escape the backslash: "Hello\\n". Similarly, you can use `strutils`'s `replace` to replace every `'\n'` with a `\\n`. Let me know if that works for you! @DaiChimpo
[06:29:57] <FromDiscord> <Mocha> (edit) ""Hello\\n"." => ""Hello\\\n"."
[06:30:30] <FromDiscord> <Mocha> (edit) "`'\n'`" => "`"\n"`" | "`\\n`." => "`"\\n"`."
[06:31:22] <FromDiscord> <DaiChimpo> well then I can use replace to replace every \ with a \\?
[06:31:30] <FromDiscord> <DaiChimpo> that's... a way
[06:32:15] <FromDiscord> <Mocha> no, you can't use replace to replace every `\` with `\\`; `\` is not a character on its own, `\n` is the full character.
[06:32:43] <FromDiscord> <Mocha> You'd have to replace each escaped character separately, e.g. `\n` -> `\\n` and `\r` -> `\\r`
[06:32:59] <FromDiscord> <DaiChimpo> cringe
[06:33:12] <FromDiscord> <Mocha> ..?
[06:33:43] <FromDiscord> <Mocha> That's how strings work in near every language I know of, the escape character is simply a human-friendly way to represent the newline byte.
[06:34:17] <FromDiscord> <Mocha> `\n` is itself a newline byte, if you want to replace that with a `\\n`, then it makes sense that you'd have to use `replace`
[06:34:51] <FromDiscord> <Mocha> Anyway, if you have something more constructive to say other than "cringe" then feel free
[06:37:37] <FromDiscord> <Mocha> If you are responsible for the string literals themselves, then you can always use raw string literals; however, if you are being passed a string, then `replace` is the only solution afaik.
[06:38:54] <FromDiscord> <DaiChimpo> so no conversion from string to raw string?
[06:40:45] <FromDiscord> <Mocha> No, once the string is in memory, it is simply a list of numerical values, e.g. the newline is represented as the byte `0x0a`, not as the backslash-n.
[06:41:12] <FromDiscord> <Elegantbeef> Dont know what mocha said due to the bridge but you can also do `"""Hello\n"""`
[06:41:36] <FromDiscord> <Mocha> ^ Yes if you are able to create the literals themselves then multiple ways to handle it
[06:41:36] <FromDiscord> <DaiChimpo> it's reading from file/user input, I do not control what goes into values or this is trivial
[06:41:43] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 256 seconds)
[06:41:44] <FromDiscord> <Mocha> yep, then just use replace
[06:42:00] <FromDiscord> <DaiChimpo> for every escape character
[06:42:17] <FromDiscord> <Elegantbeef> User input shouldnt be escaped
[06:43:03] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:43:43] <FromDiscord> <Mocha> They are talking about line feeds/carriage returns/tabs/other characters represented with an escape code
[06:43:54] <FromDiscord> <Mocha> E.g. a file containing newlines
[06:44:07] <FromDiscord> <Elegantbeef> Yea but those arent escape sequences
[06:44:28] <FromDiscord> <DaiChimpo> reading through I can make readfile() pass back a raw string by giving the filename as a raw string
[06:44:32] <FromDiscord> <Elegantbeef> It's just \`replace({'\\0'..'\\032'}\`\`
[06:44:59] <FromDiscord> <Mocha> Actually, there is a function in `strutils` called `escape`, hadn't thought of it yet since I've never had to use it but it should do what you want.
[06:45:16] <FromDiscord> <Mocha> Or you can use the replace with a sequence like elegantbeef suggested.
[06:45:23] <FromDiscord> <Elegantbeef> set
[06:45:26] <FromDiscord> <Mocha> (edit) "sequence like" => "setlike"
[06:45:30] <FromDiscord> <Mocha> (edit) "setlike" => "set like"
[06:45:35] <FromDiscord> <Mocha> :) my brain is totally working
[06:45:55] <FromDiscord> <Elegantbeef> Wait i guess there isnt a replace that takes a set
[06:45:57] <FromDiscord> <Elegantbeef> So i'm a dumb dumb
[06:46:05] <FromDiscord> <DaiChimpo> damn, knew it was too good to be true
[06:46:27] <FromDiscord> <Mocha>  https://media.discordapp.net/attachments/371759389889003532/917615510273798194/unknown.png
[06:46:35] <FromDiscord> <Mocha> just check `strutils`
[06:48:13] <FromDiscord> <DaiChimpo> it prints the hex, which is 100% workable. I read through strutils before asking here but must've missed this, thank you
[06:48:53] <FromDiscord> <Mocha> np! Glad there was a less painful solution than the replace.
[06:49:27] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3HeH it's not too hard to impl
[06:51:13] <FromDiscord> <Mocha> oo, Elegantbeef that doesn't quite seem to be a "replace", more like a "remove" o.o
[06:51:47] <FromDiscord> <Elegantbeef> I may or may not have misread what they wanted
[06:51:56] <FromDiscord> <Elegantbeef> Escape is indeed what they want
[06:52:31] <FromDiscord> <Rika> Lol
[07:12:48] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:03:28] <madprops> how do I echo a `ref int` ?
[08:10:18] <FromDiscord> <impbox [ftsf]> dereference it with []
[08:10:52] <FromDiscord> <retkid> ok so when using --gc:arc
[08:11:02] <FromDiscord> <retkid> is everything just bigger?
[08:11:24] <FromDiscord> <retkid> im manually dealloc every var i can but the ram usage is still insane?
[08:12:37] <FromDiscord> <impbox [ftsf]> Same code but getting higher ram usage?
[08:12:44] <FromDiscord> <retkid> well, yea
[08:12:46] <FromDiscord> <retkid> as close as it can be
[08:12:48] <FromDiscord> <Rika> If the ram usage is still insane then there is something wrong with your algorithm
[08:12:51] <FromDiscord> <retkid> cant really run with the normal gc
[08:13:25] <FromDiscord> <impbox [ftsf]> Tried orc?
[08:13:30] <FromDiscord> <impbox [ftsf]> Do you have cycles?
[08:13:32] <FromDiscord> <retkid> In reply to @Rika "If the ram usage": what are some things i should be looking for specifically
[08:13:37] <FromDiscord> <retkid> In reply to @impbox "Do you have cycles?": no?
[08:13:40] <FromDiscord> <Rika> If you are using async use orc
[08:13:41] <FromDiscord> <retkid> In reply to @impbox "Tried orc?": segfault
[08:13:59] <FromDiscord> <Rika> If you get a segfault then there is something wrong with your algorithm
[08:14:01] <FromDiscord> <impbox [ftsf]> Sounds like problems you should investigate
[08:14:17] <FromDiscord> <retkid> so when it works on arc but not orc, i'm fucking up somewhere
[08:14:20] <FromDiscord> <impbox [ftsf]> Likewise with why it won't run with normal gc
[08:14:40] <FromDiscord> <retkid> remember that lockless thing from earlier
[08:20:34] <FromDiscord> <retkid> sent a long message, see http://ix.io/3Hf0
[08:20:40] <FromDiscord> <retkid> yea thats not normal
[08:20:41] <FromDiscord> <retkid> (edit) "http://ix.io/3Hf0" => "http://ix.io/3Hf1"
[08:23:56] <FromDiscord> <retkid> alright actually
[08:23:59] <FromDiscord> <retkid> i see tons of places
[08:24:02] <FromDiscord> <retkid> everything should be a ptr\
[08:24:03] <FromDiscord> <retkid> (edit) "ptr\" => "ptr"
[08:25:35] <FromDiscord> <Rika> Pointers do not get tracked by the GC
[08:26:02] <FromDiscord> <retkid> In reply to @Rika "Pointers do not get": So I can dealloc it manually
[08:28:48] *** kayabaNerve_ is now known as kayabaNerve
[08:30:44] <FromDiscord> <Rika> Sure
[08:38:02] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[08:39:58] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[08:44:03] <FromDiscord> <retkid> is there anyway i can use code as a paramater for a function?
[08:44:09] <FromDiscord> <retkid> (edit) "paramater" => "parameter"
[08:44:31] <FromDiscord> <Elegantbeef> templates can take code, but functions can only type compilable types
[08:44:39] <FromDiscord> <Elegantbeef> take compilable types\
[08:44:51] <FromDiscord> <retkid> well i was gonna make a template anyway because i think of it like a function
[08:45:03] <FromDiscord> <Elegantbeef> Well they're not
[08:47:45] <FromDiscord> <Rika> You cannot think of a template as a function that takes in code; that is a macro (and even then you must further specify)
[08:48:39] <FromDiscord> <retkid> In reply to @Rika "You cannot think of": so marcos take code? or can you setup a template to take code?
[08:48:49] <FromDiscord> <Rika> They both take code
[08:49:32] <FromDiscord> <Rika> But a template isn‚Äôt a function, it has very limited ways to modify the code it takes as a parameter
[09:20:44] *** Joins: greaser|q (greaser@antihype.space)
[09:21:47] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[09:21:47] *** Joins: greaser|q (greaser@user/greasemonkey)
[09:21:51] *** greaser|q is now known as GreaseMonkey
[10:31:10] <FromDiscord> <Michal58> Consider this solution to todays aoc https://media.discordapp.net/attachments/371759389889003532/917672064956117002/SPOILER_unknown.png
[10:31:30] <FromDiscord> <Michal58> How hard would it be for the compiler to realise that ||numbers.mean.int|| does not depent on it and calculate it only once?
[10:31:54] <FromDiscord> <Michal58> (edit) "||numbers.mean.int||" => "||`numbers.mean.int`||" | "it" => "`it`"
[10:33:21] <FromDiscord> <Rika> It probably does in the C compiler
[10:35:07] <FromDiscord> <Michal58> no it doesn't
[10:35:24] <NimEventer> New thread by Jorjun_arch: Advent of Code Q7 Pt 2, see https://forum.nim-lang.org/t/8685
[10:44:14] <FromDiscord> <impbox [ftsf]> In reply to @Michal58 "no it doesn't": You checked the assembly?
[10:44:19] *** Joins: [R] (~rs@genoce.org)
[10:45:12] <FromDiscord> <impbox [ftsf]> And you're compiling with optimisations?
[10:46:15] <FromDiscord> <Rika> You can‚Äôt force a C compiler to store extra runtime information implicitly
[10:46:25] <FromDiscord> <Rika> So if this is a runtime thing then you must put the extra variable
[10:47:34] <FromDiscord> <Rika> In reply to @Rika "You can‚Äôt force a": Nim compiler as well
[10:48:01] <FromDiscord> <Rika> Though that‚Äôs not because ‚Äúit‚Äôs against the philosophy‚Äù it‚Äôs just it doesn‚Äôt
[10:48:12] <FromDiscord> <Rika> Most likely most people think it‚Äôs not a good idea
[10:50:43] <FromDiscord> <Michal58> In reply to @impbox "You checked the assembly?": I didn't but I did check the times. It is numbers.len times slower than if I put it in a variable.
[10:53:58] <FromDiscord> <Michal58> In reply to @Rika "Though that‚Äôs not because": I see, it might not always be desirable.. if that data would be large... but here it is just 1 int? Seems like a good tradeoff. :D
[10:55:01] <FromDiscord> <Rika> Detection is hard
[10:55:25] <FromDiscord> <Rika> Would need stronger CFA I assume
[10:55:31] <FromDiscord> <Rika> Don‚Äôt know the status of that
[10:55:31] <FromDiscord> <Michal58> In reply to @Rika "Detection is hard": Yes that's the original question
[10:55:50] <FromDiscord> <Rika> I see
[10:56:15] <FromDiscord> <Rika> I guess it‚Äôs not too difficult
[10:56:33] <FromDiscord> <Rika> But the implementation would need to be off by default
[10:57:28] <FromDiscord> <Michal58> In reply to @Rika "But the implementation would": IG some compiler flag would be nice
[10:59:47] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 265 seconds)
[10:59:52] <FromDiscord> <Michal58> In reply to @Rika "Would need stronger CFA": CFA?
[11:05:03] <FromDiscord> <Rika> Control flow analysis
[11:05:51] <FromDiscord> <Rika> I will have to go, someone else most likely knows the compiler better here
[11:06:03] <FromDiscord> <Rika> I‚Äôm tired for no obvious reason
[11:07:17] <FromDiscord> <impbox [ftsf]> Loop invariant hoisting
[11:07:27] <FromDiscord> <impbox [ftsf]> GCC should do it I believe
[11:07:45] <FromDiscord> <impbox [ftsf]> Maybe the int conversion breaks it
[11:08:36] <FromDiscord> <Michal58> In reply to @impbox "Maybe the int conversion": I will try it with numbers.sum div number.len
[11:09:52] *** Joins: jjido (~Denis@90.213.58.125)
[11:11:08] <FromDiscord> <Michal58> In reply to @impbox "GCC should do it": It should? It increases the runtime space implicitly?
[11:11:32] <FromDiscord> <impbox [ftsf]> If you have speed optimisations on
[11:12:05] <FromDiscord> <impbox [ftsf]> -floop-invariant-motion
[11:12:34] <FromDiscord> <impbox [ftsf]> -fmove-loop-invariants i mean
[11:12:47] <FromDiscord> <impbox [ftsf]> Which is enable in O1 and higher
[11:13:27] <FromDiscord> <impbox [ftsf]> But maybe there's something which is causing it to not occur
[11:14:47] *** Joins: neurocyte0132889 (~neurocyte@94.46.70.70)
[11:14:47] *** Quits: neurocyte0132889 (~neurocyte@94.46.70.70) (Changing host)
[11:14:47] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:16:28] <FromDiscord> <Rika> I didn‚Äôt think it did on O1
[11:23:40] <FromDiscord> <Rika> I‚Äôm a bit more awake now, I guess a few minutes ago I forgot that optimise flags existed
[11:31:31] <FromDiscord> <Michal58> Surely danger implies O1?
[11:31:51] <FromDiscord> <Rika> o2
[11:31:56] <FromDiscord> <Rika> It implies O2
[11:32:01] <FromDiscord> <Rika> So yes
[11:32:07] <FromDiscord> <Michal58> In reply to @Michal58 "I will try it": Doesn't work either
[11:32:23] <FromDiscord> <Michal58> In reply to @Rika "It implies O2": Yeah I meant at least o1
[11:33:06] <FromDiscord> <Rika> Bad wording on my part
[11:33:34] <FromDiscord> <Rika> Maybe it needs explicit switch
[11:40:49] <FromDiscord> <Hamid Bluri> sent a code paste, see https://paste.rs/cYv
[11:41:13] <FromDiscord> <Hamid Bluri> (edit) "https://play.nim-lang.org/#ix=3HfB" => "https://play.nim-lang.org/#ix=3HfC"
[11:44:08] <FromDiscord> <Yardanico> iterable is weird, yes
[11:44:12] <FromDiscord> <Yardanico> it only works for templates now
[11:44:52] <FromDiscord> <Elegantbeef> It has very annoying semantics but is somewhat nice
[11:45:17] <FromDiscord> <Hamid Bluri> i wanted to implement something like https://github.com/zero-functional/zero-functional without macros
[11:45:29] <FromDiscord> <Elegantbeef> No can do
[11:45:41] <FromDiscord> <Elegantbeef> Unless you use closures
[11:45:53] <FromDiscord> <Hamid Bluri> closure iterators?
[11:46:00] <FromDiscord> <Elegantbeef> Yea
[11:46:19] <FromDiscord> <Hamid Bluri> ok, i try :- \
[11:46:29] <FromDiscord> <Hamid Bluri> i'll try
[11:48:12] <FromDiscord> <Elegantbeef> Really`iterable[T]` should probably be a static generic which would allow for taking in iterators/using values
[12:17:00] *** Joins: PMunch (~PMunch@user/pmunch)
[12:44:53] <PMunch> arkanoid, you around?
[13:09:49] *** Joins: [R] (~rs@genoce.org)
[13:23:05] <FromDiscord> <frankzig> can a function work on both openArrays and HSlices?
[13:23:25] <FromDiscord> <frankzig> (trying to write generic code on iterable stuff)
[13:25:38] <FromDiscord> <Elegantbeef> What do you mean?
[13:40:52] <FromDiscord> <frankzig> sent a code paste, see https://play.nim-lang.org/#ix=3HfV
[13:41:06] <FromDiscord> <frankzig> is the a way to generalize it?
[13:41:14] <FromDiscord> <frankzig> (edit) "the" => "there"
[13:42:04] <FromDiscord> <Elegantbeef> use iterable + `items` on `openArray`
[13:42:23] <FromDiscord> <frankzig> sorry, i do not understand how...
[13:42:25] <FromDiscord> <Elegantbeef> though i guess `s[i]` isnt possible with an iterator
[13:43:53] *** Joins: lumo_e (~enrico@151.29.48.90)
[13:44:23] <FromDiscord> <Elegantbeef> It's probably just best to make two procs since there will be a lot of `when` statements
[13:44:42] <FromDiscord> <Elegantbeef> Plus it'll break the implicit openarray conversion
[13:45:27] <FromDiscord> <frankzig> this is a little sad, julia handles this much more nicely, anyway thanks! üôÇ
[13:50:40] <FromDiscord> <Hamid Bluri> you can do it with templates btw
[13:53:21] <FromDiscord> <Hamid Bluri> @frankzig
[13:53:22] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3Hg1
[13:53:55] <FromDiscord> <Hamid Bluri> it's a little dirty, i wanted to do it as fast as possible üòÑ
[14:00:06] <NimEventer> New thread by Geohuz: Need explanation of static compiling warning message, see https://forum.nim-lang.org/t/8687
[14:06:54] <FromDiscord> <Cypheriel> What's the Nim alternative to Python's `sum()`? I'm trying to do something like `sum(@[1, 2, 3])` but that doesn't seems to be working well
[14:08:33] <FromDiscord> <Elegantbeef> !eval import std/math; echo sum @[1, 2, 3]
[14:08:37] <NimBot> 6
[14:09:16] <FromDiscord> <Cypheriel> ugh... I think there are other modules fighting over `sum`
[14:10:02] <FromDiscord> <Elegantbeef> !eval import std/math echo math.sum(@[1, 2, 3])
[14:10:05] <NimBot> Compile failed: /usercode/in.nim(1, 17) Error: invalid module name: 'math echo math.sum(@[1, 2, 3])'
[14:10:07] <FromDiscord> <Cypheriel> oh. who knew one could just- yeah...
[14:10:13] <FromDiscord> <Cypheriel> oh or not \üò©
[14:10:22] <FromDiscord> <Elegantbeef> More an issue wit hthe bridge i think
[14:10:28] <FromDiscord> <Elegantbeef> Nah i left out a semi colon
[14:10:30] <FromDiscord> <Cypheriel> yeah
[14:11:01] <FromDiscord> <Solitude> In reply to @NimBot "Compile failed: /usercode/in.nim(1, 17)": wtf, you can have spaces in module names?
[14:11:06] <FromDiscord> <Solitude> or cant
[14:11:16] <FromDiscord> <Solitude> forget about it
[14:11:22] <FromDiscord> <Elegantbeef> Lol
[14:11:40] <FromDiscord> <Elegantbeef> I'm just an idiot that forgot a semicolon
[14:15:01] <FromDiscord> <Solitude> le unicode space has arrived https://media.discordapp.net/attachments/371759389889003532/917728397357096960/unknown.png
[14:16:05] <FromDiscord> <tandy> exciting \:)
[14:50:03] <arkanoid> PMunch: yeah
[15:11:52] <arkanoid> Solitude: are those ascii spaces or weird unicode space characters
[15:18:23] <PMunch> arkanoid, I saw you had some questions about Futhark :)
[15:18:53] <arkanoid> Yes, unsure about what's best for nim ecosystem 
[15:19:58] <arkanoid> Is c-like bindings a viable package on its own?
[15:22:45] <arkanoid> Futhark depends on clang, that's a quite important dependency, on the other hand it is not required once furthark has build its cache. Not sure if I delivered the question clearly enough 
[15:23:44] <PMunch> I'm typing up a reply in the repo now :)
[15:27:39] <arkanoid> Thanks!
[15:29:52] <arkanoid> Btw how it works now made me peep into the json and clear the cache manually (to re-symlink the last .nim) frequently. Not really sure if opir should stay transparent to the user
[15:31:22] <arkanoid> Actually the symlink was due to vscode not reading cache folder, so it's not really a general problem, but this also links to the delivery question 
[15:33:14] <PMunch> Not sure what you mean if Opir should stay transparent to the user
[15:34:02] <PMunch> And you're not really supposed to have to go digging in the json file and the cache. The idea is that you would use the original C documentation for writing your application, and Futhark just makes it transparently work in Nim.
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:12] <arkanoid> PMunch: I dig into the json to find out  which .h I have to add into importc section after the first one.
[15:39:25] <PMunch> Ah right
[15:39:39] <PMunch> Yes this is something that needs to be addressed
[15:40:16] <PMunch> But it shouldn't be needed after I implement either the folder-based approach or something similar
[15:41:09] <arkanoid> It is also to be considered that the smaller the nim file, the faster it is to work with
[15:41:28] <arkanoid> This is why I prefer to include only the required .h
[15:43:56] <arkanoid> Also prettifying opir output json would save some typing :)
[15:45:31] <PMunch> The Opir output isn't really intended to be read though.. However I have piped it through `jq` whenever I wanted to read it
[15:45:52] <PMunch> `cat opir.json | jq | grep "someproc"`
[15:46:16] <PMunch> Maybe `grep -C` to get some lines around it so I can see where in the object it comes from
[15:46:29] <PMunch> I guess I could also use jq to search
[15:51:57] <arkanoid> Sure, I do python3 -m json.tool, it was just to avoid some typing, pretty json is not slower than minefield one afaik
[15:53:36] <FromDiscord> <haxscramper> I want to split my projects into couple of DLLs because it takes a billion years to compile otherwise, and the worst offender is a autogenerated 16k-sloc code that barely ever changes
[15:54:24] <FromDiscord> <haxscramper> I just need to do an --app\:lib and somehow important things back? Or this is not possible, since nim can't do header declarations for procs
[15:54:44] <FromDiscord> <haxscramper> So everything would have to go through the nim-c-nim layer?
[15:55:20] <PMunch> arkanoid, it does take some work for Opir to format it, but only sligthly more work to parse, but it also takes way more space
[15:55:29] <FromDiscord> <enthus1ast> this is what i have also though about, would be super cool if there would be a fully automatic way [haxscramper](https://matrix.to/#/@haxscramper:matrix.org)
[15:55:30] <PMunch> Not that it matters terribly much these days
[15:56:32] <PMunch> @enthus1ast, it would be cool. But you would quickly run into issues with Nim features that don't exist in C
[15:56:38] <FromDiscord> <haxscramper> I wonder what would happen if I importc proc that uses nim gc types and so on
[15:56:52] <FromDiscord> <enthus1ast> but afaik there is'nt so load library, getSymAddr is the way to go
[15:57:17] <FromDiscord> <haxscramper> getSymAddr?
[15:57:21] <PMunch> `proc x(a: int or string): string = when a is string: a else: $a` for example would be tough to do over a DLL
[15:57:46] <FromDiscord> <haxscramper> Assume no generics then
[15:57:54] <FromDiscord> <enthus1ast> or define them in the forward declaration
[15:57:56] <PMunch> @haxscramper, if you use ARC it would probably work fine
[15:57:59] <FromDiscord> <haxscramper> I codegen this 16k abomination, so I can remove these things
[15:58:01] <FromDiscord> <enthus1ast> define/load
[15:58:03] <PMunch> Otherwise you need to use nimrtl I believe
[15:58:44] <FromDiscord> <haxscramper> Alright, looks like in total I would spend just as much time optimizing compilation as compiling
[16:01:47] <FromDiscord> <haxscramper> Hmmm https://github.com/genotrance/plugins that one does also look promising
[16:02:20] <FromDiscord> <haxscramper> What is a nimrtl‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:02:46] <PMunch> arkanoid, something like this can be used to list out all names and the files they come from: cat ~/.cache/nim/epaper_d/opir_134442D73E800BC4.json | jq '.[] | .name, .file'
[16:03:14] <PMunch> @haxscramper, a dynamic library containing the garbage collector that has to be used if you want to load a Nim dynamic library in a Nim project
[16:03:29] <PMunch> https://nim-lang.org/docs/nimc.html#dll-generation
[16:04:21] <PMunch> But again, if you use ARC I don't think you need that
[16:04:58] <PMunch> But who knows, ARC documentation is unfortunately quite lacking..
[16:07:37] <arkanoid> If arc adds memory cleanup at compile time asap, how can it help dealing with the code inside a dll loaded at runtime?
[16:08:17] <FromDiscord> <enthus1ast> the dll also contains cleanup code
[16:09:40] <arkanoid> Well yes, if it is an arc compiled dll
[16:11:37] *** Joins: src (~src@user/src)
[16:11:54] <arkanoid> Can nimsuggest give hints to ide from a nim .so/.dll?
[16:12:49] <NimEventer> New thread by Loczaj: For loop using iterator `..`, see https://forum.nim-lang.org/t/8689
[16:12:52] <PMunch> Nope, it needs sources
[16:17:05] *** Joins: rockcavera (~rc@192.12.112.103)
[16:17:05] *** Quits: rockcavera (~rc@192.12.112.103) (Changing host)
[16:17:05] *** Joins: rockcavera (~rc@user/rockcavera)
[16:29:43] <arkanoid> So it's up to generate the smallest possible .nim file from headers
[16:30:44] <arkanoid> The current approach where you have to explicitly write the headers that you are interested in is not wrong in this context
[16:39:08] <PMunch> Ah you're back to Futhark :P
[16:39:27] <PMunch> It's not wrong if you want the smallest possible Nim file
[16:39:34] <PMunch> But I'm not sure that is actually a goal..
[16:45:56] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[16:58:06] <arkanoid> Never changed topic
[17:21:43] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[17:23:39] *** Joins: arkurious (~arkurious@user/arkurious)
[17:25:13] *** Joins: PMunch (~PMunch@user/pmunch)
[17:28:59] *** Quits: lumo_e (~enrico@151.29.48.90) (Quit: Quit)
[17:35:07] *** Joins: xet7 (~xet7@user/xet7)
[17:35:10] <FromDiscord> <haxscramper> Can you upload an example of a `.h`, `.json` and `.nim` file, I want to take a look how they are handled for a moderately complex C libraries
[17:37:59] <arkanoid> Haxscramper, I'd be glad to send you the files, but it's better to first address what is a moderately complex c library for you.
[17:38:35] <FromDiscord> <haxscramper> just what you are working right now
[17:38:35] <arkanoid> Also, futhark imports only the symbols from an explicit list of .h, that are not handled recursively
[17:39:36] <arkanoid> Haxscramper, ok, I have apache libarrow-glib and libgirepository already rolling
[17:40:22] <arkanoid> But the imported .h (and so the size of the generated .nim) depends on the code I'm actually trying to compile 
[17:41:00] <FromDiscord> <haxscramper> I just want to take a quick look, so no need to try to make it work or anything
[17:43:25] <arkanoid> Let me explain. It's quite simple really (and it might change in the future). Now thers opir that given one or multiple .h traverses them like clang would do and generate a big json (and this includes all symbols it encounters recusrively), then futhark reads this json and generates nim code only for the symbols contained in the explicitly listed .h so it won't clutter the .nim.
[17:43:38] <arkanoid> Let me pick your poison then
[17:46:24] <arkanoid> this is just a strategy PMunch picked, and it is not wrong in my opinion, but it depends (and we're talking about it) on how it's intended to deliver futhark libs. You can join the discussion here https://github.com/PMunch/futhark/issues/7#issuecomment-987861978
[17:47:10] <PMunch> Well that's not really why it's built this way
[17:48:08] <PMunch> The reason is because Futhark would otherwise pull in everything that your library requires. Including stuff that is already defined it Nim, or stuff which might be supplied by other Nim C wrapper libraries (like e.g. posix)
[17:48:53] <FromDiscord> <haxscramper> Let me remind you of‚Üµ> Sorry, but I really fear the wrappers that come out of it, it doesn't feel like a step in the right direction.
[17:49:12] <FromDiscord> <haxscramper> I think I need to wrap something myself them
[17:49:14] <FromDiscord> <haxscramper> (edit) "them" => "then"
[17:49:23] <FromDiscord> <haxscramper> probably libgit
[17:49:49] <arkanoid> where do you preder me to send test .json and .nim?
[17:49:55] <arkanoid> s/predef/prefer
[17:50:11] <PMunch> @haxscramper, who's comment was that?
[17:50:14] <FromDiscord> <haxscramper> github gist
[17:50:19] <FromDiscord> <haxscramper> In reply to @PMunch "<@608382355454951435>, who's comment was": araq
[17:50:40] <FromDiscord> <haxscramper> about pulling the world into a wrapper - I think I have a solution to that, but it implies certain model of processing
[17:50:51] <FromDiscord> <haxscramper> Let me organize my thoughts,
[17:50:53] <PMunch> Ah.. Well he doesn't seem to like the concept of automating it to this point it seems
[17:51:11] <arkanoid> sure it's c-like interface, not nim-like, but it's something that could be used to generate nim-like wrappers
[17:51:49] <FromDiscord> <haxscramper> there are clear benefits to providing a `.nim` wrapper that is commited to the VCS, without any extra build dependencies, but it makes stuff so much more complex on the processing side
[17:51:50] <PMunch> I agree that pulling everything into a single wrapper would be a bad idea. I want to add a system in Futhark that only pulls in things defined in a certain folder, that way you can give it a specific folder to include stuff from, and a start .h file and it will wrap an entire library.
[17:52:31] <PMunch> That definitely makes it harder on the processing side, because at that point you have to convert IFDEF logic to Nim logic
[17:53:35] <PMunch> Depends of course what you're wrapping, but this can be a major source of problems with a pre-built wrapper
[17:55:29] <NimEventer> New post on r/nim by stefantalpalaru: Windows stack corruption - a journey into the bowels of the beast, see https://reddit.com/r/nim/comments/rb0ab4/windows_stack_corruption_a_journey_into_the/
[17:57:06] <NimEventer> New thread by Stefantalpalaru: Windows stack corruption - a journey into the bowels of the beast, see https://forum.nim-lang.org/t/8690
[17:58:56] <FromDiscord> <haxscramper> So, if I take the `iterator.h`, `string.h` and `vector.h`, each one of them defined in a separate header file, but string and vector import iterators, and then subsequently wrap each file, I get three different translation units, where iterator.h was visited three times. I convert all of them and then merge together in the same order as defined.
[17:59:37] <FromDiscord> <haxscramper> If I see a type/proc definition that I have already seen earlier, I only compare it structurally, to ensure there are no differences via various translation unit wrappings
[18:00:31] <FromDiscord> <haxscramper> If I introduce concept of a "library" in wrapper generator, I can also handle interproject dependencies
[18:01:09] <FromDiscord> <haxscramper> For example, imagine iterator.h was defined in the different wrappers. In that case you would probably better doing `import` for it rather than generating it from scratch
[18:01:37] <FromDiscord> <haxscramper> So I think the right approach is to try and "cut out" unnecessary parts from the translation units generated by libclang
[18:02:08] <FromDiscord> <haxscramper> there is a `isFromMainModule` or something similar check, it would allow to wrap only entries from the main file of the translation file
[18:02:11] <FromDiscord> <haxscramper> (edit) "file" => "unit"
[18:03:10] <FromDiscord> <haxscramper> This is not realiable nough, because some headers provide a toplevel dispatch into multiple smaller headers, for example `<string>` dispatches into 10+ different files, some of which are also used in the vector
[18:03:14] <PMunch> I tried that, but the problem I had with isFromMainModule is that I generate a dummy .h file which includes any defines that are used
[18:03:15] <FromDiscord> <haxscramper> and some in the iterator
[18:04:04] <PMunch> I have this in one of my projects: http://ix.io/3Hh7/
[18:04:08] <FromDiscord> <haxscramper> If I sequentially process the headers I need to either order them manually, or maybe write down dependencies manually and then do topological sorting
[18:04:35] <PMunch> That XUTIL_DEFINE_FUNCTIONS is entered into the .h dummy file and then I run Opir on the dummy file
[18:04:47] <PMunch> So isFromMainModule would give me false for all symbols
[18:05:18] <FromDiscord> <haxscramper> yes, that's why I said it is not reliable enough
[18:05:55] <PMunch> I guess in Futhark you could create individual x.nim, xutil.nim, xlib.nim, xos.nim, xcomposite.nim, xdamage.nim, damagewire.nim etc. that each just imported one .h file
[18:08:13] <FromDiscord> <haxscramper> I want to do this, instead of just one huge file
[18:08:51] <PMunch> That should be possible with Futhark right now
[18:09:01] <PMunch> Haven't tried it though
[18:09:43] <NimEventer> New Nimble package! gigi - GitIgnore Generation Interface, see https://github.com/attakei/gigi
[18:10:06] <arkanoid> haxscramper: please find here a quick example https://github.com/arkanoid87/nimarrowglib/
[18:12:20] <FromDiscord> <haxscramper> the `_452985878` parts are not from futhark, right?
[18:12:34] <PMunch> Yes they are
[18:13:36] <FromDiscord> <haxscramper> I don't quite understand the `when not declared(Garrowchunkedarrayclassproc):` sections - they exist to handle multiply type declarations in the C code?
[18:13:37] <arkanoid> in this example I've imported all the .h referenced in original "arrow-glib.h", so the generated .nim is way larger than required, as the nim code really requires just a dozen of symbols
[18:13:40] <FromDiscord> <haxscramper> forward declarations
[18:13:56] <PMunch> Basically all types have three identifiers, one which is used for arguments and fields, one which is used for the actual type definition, and one without the numbers which is tied to the definition through a `when not defined(identifier)` check
[18:15:35] <PMunch> They handle a couple things, first off if I have a procedure or type defined in Nim it won't override it (e.g. if I have posix imported and try to import a C file that includes some of the same symbols), they also allow you to manually override types by simply hand-writing their definition before the imports.
[18:15:38] <FromDiscord> <tbrekalo> how do I avoid making extra copies of the sequence with the .map procedure? or does the compiler avoid copies? https://media.discordapp.net/attachments/371759389889003532/917788949399863296/unknown.png
[18:16:25] <PMunch> So you would only use the identifier without the numbers in your actual code
[18:16:26] <FromDiscord> <haxscramper> ah, so the `.nim` is included, not imported
[18:17:02] <arkanoid> tbrekalo try zero-functional https://github.com/zero-functional/zero-functional
[18:17:09] <PMunch> Yes, the futhark `importc` either returns all that code as a NimNode, or it returns a NimNode which is an include statement for a cached file
[18:17:12] <FromDiscord> <haxscramper> Well, I do understand the reasoning, but damn the codegen looks strange
[18:17:41] <PMunch> Yeah, the codegen is a bit of a mess. But it's similar to Nims C output, it's not really meant to be human-consumable
[18:19:11] <arkanoid> and it works out of the box. PMunch so far every time I ended up with some running toy using futhark, I had never to use/cast to *_<hash> types
[18:20:00] <PMunch> Of course not :) They aren't meant to ever be used
[18:20:15] <PMunch> It's just a little trick for the compiler to be happy
[18:23:45] <arkanoid> PMunch: how different/difficult would be to generate multiple .nim files according to original .h file source of the symbol (name field in json iirc) and rebuild the import hierarchy in the header of each of them? (would this actually work?)
[18:24:41] <PMunch> Hmm, I guess that could work
[18:24:44] <arkanoid> it's actually quite similar to the lantern fish problem. Instead of counting all the fishes, you put them in buckets according to the timer/name in this context
[18:25:20] <PMunch> The only thing is that you might run into issues like circular imports (which are fine in C, but not in Nim)
[18:25:41] <FromDiscord> <haxscramper> this won't work
[18:25:51] <FromDiscord> <haxscramper> you need to build a whole graph of which fields uses what type
[18:26:00] <FromDiscord> <haxscramper> and then clusterize it into nim modules
[18:26:19] <FromDiscord> <haxscramper> the `#include` tracing is meaningless, because you can forward-declare a type in C
[18:26:19] <PMunch> Nah he just means base it off-of which .h file it originally came from
[18:26:31] <FromDiscord> <haxscramper> and use pointer to that type, while in nim you can't
[18:26:40] <PMunch> Well I only include the actual definitions in the Opir output
[18:26:51] <PMunch> So Futhark doesn't see forward decls
[18:29:34] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[18:30:28] <arkanoid> PMunch: I think it's worth leveraging on how clang handles this problem and represent it's structure fragmented in something nim likes
[18:34:14] <FromDiscord> <haxscramper> welcome to bullshit
[18:34:14] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/hWy
[18:34:53] <FromDiscord> <haxscramper> `nim c '--hint[Path]:on' --hints:on file`
[18:34:58] <FromDiscord> <haxscramper> how does this even work
[18:36:30] <PMunch> Hmm, that's odd indeed @haxscramper 
[18:37:02] <PMunch> I assume you're using Nim and not Nimskull there
[18:37:16] <FromDiscord> <haxscramper> Yes, I'm using nim
[18:37:19] <FromDiscord> <haxscramper> I do have an additional `nim.cfg` file, but it explicitly says it added the a path there
[18:37:45] <PMunch> Yeah that looks weird
[18:38:03] <PMunch> Anyways, I'm off
[18:38:12] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:40:23] <FromDiscord> <haxscramper> `nimble install --nimbleDir:(pwd)/deps/pkgs futhark`
[18:40:29] <FromDiscord> <haxscramper> `/mnt/workspace/clean-clone/hack/nim.cfg(2, 3) Error: invalid package name: /mnt/workspace/clean-clone/hack/deps/pkgs/pkgs`
[18:42:31] <FromDiscord> <tbrekalo> sent a long message, see http://ix.io/3Hhv
[18:43:06] <FromDiscord> <haxscramper> `for name, field in fieldPairs()` allows to assign to a `field` is object that you iterate on is mutable
[18:43:23] <FromDiscord> <haxscramper> so assuming fields are written in the same order you just need to loop through CSV
[18:43:35] <FromDiscord> <tbrekalo> ye
[18:43:48] <FromDiscord> <tbrekalo> I am gonna try that now then; ‚ÜµThanks @haxscramper
[18:45:49] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Hhz
[18:46:00] <FromDiscord> <haxscramper> how do I create a `generaed` file from futhark?
[18:47:07] <FromDiscord> <haxscramper> also, how do I import relative file, simple `"file.h"` does not work
[18:48:21] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3HhA
[18:53:39] <FromDiscord> <haxscramper> If I copy-paste the absolute file path it does not provide A wrapped structs anyway
[18:53:52] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3HhD
[18:54:01] <FromDiscord> <haxscramper> cache file is empty
[19:13:18] <arkanoid> haxscramper, I'm back
[19:13:40] <arkanoid> let me read your context, I might help. Not helping on internals, but I've done something
[19:14:45] <FromDiscord> <haxscramper> First I want to know how to wrap a relative file
[19:15:43] <arkanoid> can you share the .h?
[19:18:42] <FromDiscord> <haxscramper> `struct A; struct B; struct A {     struct B b; }; struct B {     struct A a; };`
[19:19:14] <arkanoid> K. One minute
[19:22:07] <FromDiscord> <haxscramper> PMunch I think you can also look into interfacing with a conan PM. It can generate `.json` with all the include paths, or create a file with gcc linkage/includepath information
[19:22:38] <arkanoid> done, it works to me
[19:23:03] <FromDiscord> <haxscramper> `conan install . --build=missing` generates file that you can then pass as `--passL:"@$(pwd)/conanbuildinfo.gcc"`
[19:23:33] <FromDiscord> <haxscramper> and I think clang can also read everything using just `@$(pwd)/conanbuildinfo.gcc` passed to command-line flags
[19:23:47] <FromDiscord> <haxscramper> `@/absolute/path/to/the.gcc`
[19:23:59] <FromDiscord> <haxscramper> In reply to @arkanoid "done, it works to": can you declare `var a: A` and `var b: B`
[19:24:16] <FromDiscord> <haxscramper> relative paths also works?
[19:26:26] <arkanoid> haxscramper: this compiles on my machine https://play.nim-lang.org/#ix=t%20wr
[19:26:55] <arkanoid> where a_and_b.h is is <nimble_proj_root>/include/a_and_b.h
[19:27:04] <FromDiscord> <haxscramper> > `#!/usr/bin/env python` ?
[19:27:09] <arkanoid> ?
[19:27:37] <arkanoid> whoa! what happened? it must be a play.nim-lang.org app issue
[19:27:40] <FromDiscord> <haxscramper> your paste is a python code with some http request
[19:28:10] <arkanoid> nope, it doesn't come from my pc, it's a backend thing
[19:28:49] <arkanoid> http://sprunge.us/ it's a pastebin service
[19:29:01] <arkanoid> possibly a component of play.nim-lang.org
[19:29:22] <arkanoid> does this work? https://play.nim-lang.org/#ix=3HhL
[19:32:06] <arkanoid> I'm also trying to do A.b = objB.addr and B.a = objA.addr, but I'm getting "Error: 'A.b' cannot be assigned to"
[19:37:48] <FromDiscord> <Pralkarz> sent a code paste, see https://play.nim-lang.org/#ix=3HhO
[19:38:42] <FromDiscord> <Yardanico> yes, you can, but there's "truthy" or "falsey" value for strings by default in nim
[19:38:52] <FromDiscord> <Yardanico> if you want to check the length, just do `if str.len > 0`
[19:39:55] <FromDiscord> <Pralkarz> In reply to @Yardanico "yes, you can, but": I actually want the truthy/falsey behavior, but `if not "":` doesn't compile.
[19:40:07] <FromDiscord> <Yardanico> because "" is not a bool
[19:40:23] <arkanoid> if you want to use a specific constant rule to transform a string into a bool, you can write your own converter, but this would apply automatically to the whole scope so use it with grain of salt
[19:40:34] <FromDiscord> <Yardanico> yes
[19:40:48] <FromDiscord> <Pralkarz> Yup, therefore my question on how I can evaluate empty string to be falsey.
[19:40:59] <FromDiscord> <Yardanico> you can write a converter
[19:41:04] <FromDiscord> <Pralkarz> In reply to @arkanoid "if you want to": Aw, I'll just stick to `if str.len > 0 `in that case.
[19:41:09] <FromDiscord> <Yardanico> but as arkanoid said, it'll apply to the whole scope implicitly
[19:41:10] <FromDiscord> <Pralkarz> (edit) "0 `in" => "0` in"
[19:41:22] <FromDiscord> <Pralkarz> All right, thanks!
[19:41:35] <arkanoid> converter toBool(s: string): bool = s.len > 0
[19:41:38] <arkanoid> for example
[19:46:57] <FromDiscord> <tbrekalo> can I generate an iterator from the seq[T]?
[19:48:52] <FromDiscord> <tbrekalo> without having to write my own closure; something like `.items` ?
[19:49:42] <FromDiscord> <haxscramper> In reply to @arkanoid "does this work? https://play.nim-lang.org/#ix=3HhL": no, it doesn't work
[19:50:03] <arkanoid> haxscramper, what error do you get?
[19:50:11] <FromDiscord> <haxscramper> same error, file not found
[19:50:42] <FromDiscord> <haxscramper> anyway, I don't care that much to spend more time on this one, so no big deal
[19:51:40] <arkanoid> tbreakalo: maybe this? https://nim-lang.org/docs/iterators.html#items.i%2Carray%5BIX%2CT%5D
[19:52:00] <arkanoid> which file?
[19:52:29] <arkanoid> ok, np. If you intend to continue, just give me a ping. Maybe I can help
[19:55:38] <FromDiscord> <tbrekalo> In reply to @arkanoid "tbreakalo: maybe this? https://nim-lang.org/docs/it": doesn't seems to work
[20:00:38] <arkanoid> tbreakalo, trivial example, but what do you mean? https://play.nim-lang.org/#ix=3HhX
[20:01:08] <FromDiscord> <spotlessapple> Is there a recommended way to add rows to a data frame in datamancer? Saw documention for columns, but having a difficult time finding info for rows
[20:03:15] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[20:07:41] <arkanoid> spotlessapple, have a look at these templates https://scinim.github.io/Datamancer/dataframe.html#18
[20:08:11] <FromDiscord> <tbrekalo> In reply to @arkanoid "tbreakalo, trivial example, but": need it as the closure iterator and want to zip it with another iterator
[20:08:30] <FromDiscord> <tbrekalo> can send you the example later today; g2g now :/
[20:09:12] <arkanoid> tbreakalo, consider this also https://github.com/zero-functional/zero-functional#zip
[20:09:17] <FromDiscord> <tbrekalo> I want to zip values from fieldPairs with seq items iterator; that's the functionality I am looking for
[20:09:50] <FromDiscord> <tbrekalo> In reply to @arkanoid "tbreakalo, consider this also": Ye; have it bookmarked; ‚ÜµWill check it out
[20:10:21] *** Joins: PMunch (~PMunch@user/pmunch)
[20:14:23] <FromDiscord> <tandy> is anyone here familiar with coro?
[20:14:27] <FromDiscord> <tandy> (coroutines)
[20:14:35] <FromDiscord> <tandy> sent a code paste, see https://play.nim-lang.org/#ix=3Hi0
[20:14:39] <FromDiscord> <tandy> i dont understand what this proc does
[20:15:50] <FromDiscord> <tandy> "how often" what?
[20:22:35] <PMunch> How often to check whether the coroutine is checked for completion I guess
[20:23:58] <PMunch> So who's ready for some AoC streaming?
[20:31:15] *** Joins: xet7 (~xet7@user/xet7)
[20:39:37] <PMunch> Stream is live: https://www.twitch.tv/pmunche
[20:43:23] *** Joins: rockcavera (~rc@192.12.114.197)
[20:43:23] *** Quits: rockcavera (~rc@192.12.114.197) (Changing host)
[20:43:23] *** Joins: rockcavera (~rc@user/rockcavera)
[20:51:06] <arkanoid> here we go again, vscode nim extension is not working for unknown reason
[20:51:16] <PMunch> Take a break and watch a stream :)
[20:54:33] <FromDiscord> <haxscramper> What extension do you most people use?
[20:54:35] <FromDiscord> <haxscramper> saem's?
[20:55:21] <FromDiscord> <dom96> whatever's the oldest
[20:55:28] <FromDiscord> <dom96> haven't tried others though, maybe they are better
[20:57:03] <Amun-Ra> haxscramper: Zaitsev's one
[20:57:40] <Amun-Ra> it's outline pretty suck tho
[20:57:46] <Amun-Ra> s*
[20:59:38] <arkanoid> I use seam, but the real issue is that it doesn't work without any log info
[20:59:59] <arkanoid> what I use to track down if it's working or not is "ps -ae | grep nimsuggest"
[21:01:07] <FromDiscord> <dom96> I don't use nimsuggest at all, only VS Code's dumb auto complete
[21:01:39] <arkanoid> what I've tracked down so far is that changing config.nims sometimes makes the extension unresponsive no matter if you revert it to previous state
[21:01:58] <Amun-Ra> I mostly use (n)vim with nim.vim plugin
[21:02:00] <arkanoid> so you have to restart, and guess
[21:02:46] <arkanoid> vim is a text editor that can be upgraded to ide, vscode is an ide that can also be an advanced text editor
[21:03:41] <arkanoid> I bet nim community will always focus in vscode or next available ide (I'm talking as neovim user too, but I'm focusing on what the community uses)
[21:10:07] <FromDiscord> <Smarc> Hm, how do you guys treat `case` statements syntactically? Do you indent the `of`'s? Do you place a colon after the `case` line?
[21:10:28] <FromDiscord> <dom96> no and no
[21:11:27] <FromDiscord> <Smarc> I also think the colon is unneccessary, but why not indenting the of's?
[21:11:43] <FromDiscord> <dom96> Because that is not how the BDFL intended it
[21:12:18] <FromDiscord> <Smarc> But if the allmighty did not intended it, why is it possible? :x
[21:12:37] <FromDiscord> <Solitude> to let you learn on your own mistakes
[21:13:07] <FromDiscord> <Smarc> I'm not worthy.
[21:13:17] <FromDiscord> <dom96> good question üôÇ
[21:22:53] <arkanoid> I'm parsing a file of X lines one by one, but I have to skip some during the task. To optimize the proc, I'm using newSeqOfCap(totalLines) to avoid reallocations, but at the end of the proc I might also end up with an empty seq in worst case. Is it better to shrink (by copy?) the seq afterwards, or let seq grow on it's own?
[21:30:46] <FromDiscord> <konsumlamm> In reply to @haxscramper "What extension do you": these days everyone recommends saem's (and it also works better ime)
[21:30:49] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[21:33:11] <PMunch> I'm still thrown by the fact that the case line doesn't need a colon...
[21:33:14] <PMunch> I always add one
[21:33:40] <PMunch> arkanoid, probably shrink at the end
[21:34:46] <arkanoid> PMunch: schrink by copy, or there's some black magic to reshape the malloc to correct size?
[21:34:53] <PMunch> Adding as you go will create progressively larger arrays to fit the memory into, and possibly trigger a lot of copies.
[21:35:12] <PMunch> No way to reshape an alloc, but do you actually need to reclaim that space right away?
[21:35:38] <PMunch> The Nim allocator might actually even be able to reuse it if you call setLen, but I kinda doubt it
[21:36:02] <arkanoid> not necessary. I opt for speed, not memory consumption. But so far I fear I'm facing too many copies so I'm focusing on that
[21:37:08] <PMunch> If you're opting for speed just run with gc:none :P
[21:37:13] <PMunch> And never release memory
[21:37:58] <PMunch> Nothing says speed like a gc:none party, because a gc:none party don't stop (until you run out of memory and crash)
[21:41:05] <FromDiscord> <Yardanico> not allocating memory is also faster than allocating memory :P
[21:41:28] <arkanoid> long live to king stack!
[21:42:50] <FromDiscord> <Hamid Bluri> In reply to @dom96 "I don't use nimsuggest": you must have a good memory üòï
[21:44:51] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:e003:e11d:22df:b459)
[21:44:53] <PMunch> Good memory?
[21:45:23] <arkanoid> he is referring about dom96 not using nimsuggest or any autocompletion thingy
[21:46:14] <PMunch> You don't need that good memory :P
[21:46:33] <PMunch> Well I guess you need to remember the names of different modules
[21:46:42] <PMunch> But you need that anyways don't you?
[21:47:56] <FromDiscord> <IsaacPaul> In reply to @hamidb80 "you must have a": I'm the same. I have terrible memory. I heavily rely on the autocomplete and ide tools when programming.
[21:48:25] <FromDiscord> <IsaacPaul> In reply to @PMunch "But you need that": Nope google will remember for you or any notes you keep lol
[21:49:10] <FromDiscord> <Hamid Bluri> In reply to @IsaacPaul "Nope google will remember": every time you code you google it ? üòÑ
[21:49:48] <FromDiscord> <Hamid Bluri> i google it and use nimsuggest togother üòÑ
[21:50:21] <FromDiscord> <IsaacPaul> Yea, well I'm always switching between kotlin, java, swift, objc. So I might have done xyz before but its long gone
[21:51:40] <arkanoid> I also rely a lot on ide tools. I have to deal daily with 5 or more ecosystems
[21:51:58] <FromDiscord> <Hamid Bluri> In reply to @arkanoid "I also rely a": omg
[21:52:20] <FromDiscord> <Hamid Bluri> youre super human
[21:52:50] *** Joins: jjido (~Denis@90.213.58.125)
[21:52:54] <PMunch> Meanwhile I'm here programming Nim and C# in Vim without much in the way of IDE tools :P
[21:53:25] <FromDiscord> <Hamid Bluri> In reply to @PMunch "Meanwhile I'm here programming": pmunch what are those red lines on your VIM üòï
[21:54:02] <arkanoid> PMunch: I was a C# programmer once, and well, it's a compiled thing. Try to mix interpreted and compiled world, with some functional in the middle. I feel stressed
[21:54:03] <PMunch> Which ones?
[21:54:07] <PMunch> The long vertical ones?
[21:54:15] <FromDiscord> <Hamid Bluri> In reply to @PMunch "The long vertical ones?": yes
[21:54:21] <arkanoid> column limit
[21:54:24] <PMunch> arkanoid, I'm not a C# dev by choice to but it that way :P
[21:54:35] <PMunch> @Hamid_Bluri, those are column limits
[21:54:56] <arkanoid> PMunch: I was a videogame programmer once, I used to do that in C# (Unity Engine mainly, but not just that)
[21:54:58] <PMunch> One at 80, and one at whatever it is that GitHub wraps at
[21:55:21] <PMunch> I've also done game programming in Nim for a job
[21:55:57] <FromDiscord> <IsaacPaul> I'm sure you're much more productive when you've internalized everything. I used to work on one code base a few years ago, and it's like you're still thinking about solutions when you're home. Now on several code bases I definitely don't even retain anything lol
[21:56:45] <arkanoid> Exactly, it's context switching
[21:56:56] <arkanoid> I get paid to context switch fast
[21:57:30] <arkanoid> once upon a time, I used to write large codebases. Now is all scripting in different languages
[21:57:34] <PMunch> Oh well, I've gotta run
[21:58:19] <FromDiscord> <Hamid Bluri> @arkanoid , did you find a solution for your async server that couldn;t recover after network corrupt?
[21:58:30] <FromDiscord> <Hamid Bluri> it was a month ago i guess
[21:59:04] <arkanoid> yes, after a quite large refactor the problem went away, but I upgraded nim in the meanwhile ... who knows
[21:59:09] <arkanoid> maybe was a bug
[21:59:31] <FromDiscord> <Hamid Bluri> that's ok : D
[22:00:22] <FromDiscord> <Hamid Bluri> pmunch i've got something for you
[22:00:23] <FromDiscord> <Hamid Bluri> https://github.com/mitchellh/advent-2021-sql
[22:00:36] <FromDiscord> <Hamid Bluri> he's a legend
[22:00:42] <PMunch> Haha, yeah I saw that on HN this morning :P
[22:02:03] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[22:05:00] <arkanoid> what?
[22:05:18] <arkanoid> :D ninja!
[22:22:57] <arkanoid> can "when" be used as expression/block?
[22:23:51] <FromDiscord> <Solitude> !eval echo (when true: 3 else: 4)
[22:23:55] <NimBot> 3
[22:24:31] <arkanoid> thanks!
[22:30:49] <arkanoid> and can I use case statement at compile time to discriminate generic parameter T?
[22:31:08] <arkanoid> I'm using a long chain of when/elif now
[22:31:59] <arkanoid> I'm getting "Error: selector must be of an ordinal type, float or string" but not sure if I'm using it correctly
[22:34:34] <arkanoid> nevermind, I've found a good way to layout the long chain
[22:34:47] <arkanoid> (using block:)
[22:52:34] <FromDiscord> <victorNine> Hi! I'm trying to compile for openWRT using the info here\: https://nivrrex-github-io.translate.goog/posts/crosscompiling-for-openwrt-with-nim/?_x_tr_sch=http&_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=no
[22:52:59] <FromDiscord> <victorNine> but I'm getting errors like mips-openwrt-linux-gcc\: error\: unrecognized argument in option '-mtune=generic'
[22:53:09] <FromDiscord> <victorNine> any idea what I'm doing wrong
[23:42:05] <arkanoid> oh dear, got a "Error: internal error: expr(skModule); unknown symbol" on nim 1.6.0
[23:48:26] *** Joins: pch_ (~pch@66.49.131.33)
[23:48:49] <arkanoid> !eval import std/sequtils; sequtils
[23:48:53] <NimBot> Compile failed: /usercode/in.nim(1, 22) Error: internal error: expr(skModule); unknown symbol
[23:49:24] <arkanoid> I know it's silly, but should this raise an internal error?
[23:49:35] <arkanoid> !eval import std/hashes; hashes
[23:49:38] <NimBot> Compile failed: /usercode/in.nim(1, 20) Error: internal error: expr(skModule); unknown symbol
[23:50:13] *** Quits: pch (~pch@66.49.131.33) (Ping timeout: 240 seconds)
