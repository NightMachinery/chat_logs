[00:05:05] <PMunch> @wsantos, lot of different ways to do it
[00:06:51] <PMunch> However with the very strict type system it's not that useful to write too many tests. Write ones that shows positive and negative use-cases, if you want to mock something you can use patchFile: https://nim-lang.org/docs/nimscript.html#patchFile%2Cstring%2Cstring%2Cstring or something similar.
[00:07:14] <FromDiscord> <Solitude> In reply to @Rika "probably something about field": think beef fixed it in devel
[00:09:16] <FromDiscord> <Rika> okay nice to know
[00:09:53] <FromDiscord> <frobnicate> In reply to @wsantos "How do you guys": I just use the standard `nimble test` stuff and do a file for each module
[00:21:45] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 252 seconds)
[00:26:56] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:108d:b8d3:fe1c:9a86)
[00:59:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[00:59:23] <NimEventer> New thread by Alexsad: Very need to understand of locks and condition, see https://forum.nim-lang.org/t/9051
[01:02:22] *** Joins: mahlon (~mahlon@martini.nu)
[01:14:10] <FromDiscord> <retkid> opinion
[01:14:19] <FromDiscord> <retkid> theres an open source steam game that costs $20
[01:14:22] <FromDiscord> <retkid> game more like software
[01:14:32] <FromDiscord> <retkid> theres bugs and i want to PR them
[01:14:38] <FromDiscord> <retkid> (edit) "them" => "them, but its developed by a big company"
[01:14:50] <FromDiscord> <retkid> should i spent time fixing their shit, when they aren't paying me and are a larger company
[01:15:08] <FromDiscord> <retkid> its also in... go...
[01:15:40] <FromDiscord> <spoon> do you need it fixed/do they offer bounties
[01:16:02] <FromDiscord> <retkid> I don't need it but its bugs and qol
[01:30:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:30:31] *** Quits: pro (~pro@user/pro) (Quit: pro)
[01:40:00] <FromDiscord> <Alea> is there any speed difference between using var and let for data that's going to be called a lot?
[01:40:24] <PMunch> Shouldn't be
[01:40:33] <PMunch> Unless the C compiler manages some optimisation on it
[01:40:38] <PMunch> But I don't think that happens
[01:44:07] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[01:48:32] <FromDiscord> <auxym> is there even a difference in the emitted C code between var and let? I didn't think so, except for var params which always use a hidden pointer
[01:51:58] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[02:00:31] <FromDiscord> <Goat> sent a code paste, see https://play.nim-lang.org/#ix=3TE9
[02:01:21] <PMunch> @auxym, there might be a different in how they are passed around in certain cases
[02:05:17] <FromDiscord> <retkid> does Nim compile to c++
[02:05:24] <FromDiscord> <retkid> or well
[02:05:25] <FromDiscord> <retkid> can
[02:05:51] <PMunch> Ypu
[02:05:54] <PMunch> Yup*
[02:06:11] <FromDiscord> <Freyr> btw retkid was it aseprite on steam you were talking about earlier?
[02:06:13] <FromDiscord> <retkid> If i have a job where i have to write c++ do you think I can pass of my C++ as not written by the nim compiler
[02:06:21] <FromDiscord> <retkid> In reply to @Equinox "btw retkid was it": no but similar
[02:06:49] <FromDiscord> <retkid> these motherfuckers wrote a function to download webcontent but didn't actually implement a seralization method for it
[02:07:03] <FromDiscord> <retkid> so when you save the project it just panics
[02:07:09] <FromDiscord> <retkid> because the url obviously cant be opened
[02:07:12] <FromDiscord> <retkid> (edit) "opened" => "opened, its not a file"
[02:07:47] <FromDiscord> <retkid> now do I make it write the file to disk and not ram, or just make it so you need to write it to ram every time you load a project 🤔 \
[02:10:19] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 260 seconds)
[02:10:49] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:14:42] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:19:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:22:09] <FromDiscord> <spoon> hm?
[02:25:41] <FromDiscord> <auxym> In reply to @retkid "If i have a": 100% no. lol.
[02:26:11] <FromDiscord> <retkid> In reply to @auxym "100% no. lol.": sad
[02:26:12] <FromDiscord> <retkid> :(
[02:26:20] <FromDiscord> <retkid> i dont wanna write c++
[02:27:20] <FromDiscord> <auxym> yeah well you're preaching to the choir 😉
[02:28:03] <FromDiscord> <spoon> what makes it unreadable? is it just the var names being stripped and its minified?
[02:28:09] <FromDiscord> <spoon> havent read converted code
[02:29:28] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:108d:b8d3:fe1c:9a86) (Remote host closed the connection)
[02:30:15] <FromDiscord> <auxym> well you can look at your local .cache/nimcache right now for the generated .c / .cpp files. Nim uses a bunch of macros for its types (NU16, NISTRING, etc), generates a bunch of vars and typedefs with random names for internal purposes, etc. its code output was never meant or designed to be consumed by a human.
[02:30:38] <FromDiscord> <spoon> yea that makes sense
[02:31:49] <FromDiscord> <retkid> In reply to @auxym "well you can look": niether were animals yet we still eat them
[02:31:52] <FromDiscord> <retkid> (edit) "niether" => "neither"
[02:32:25] <FromDiscord> <spoon> asked in #gamedev earlier but right now i want to make a proc or a method part of an object and preferably make it optional/make its default value null or something similar
[02:32:44] <FromDiscord> <retkid> ez pz
[02:32:47] <FromDiscord> <retkid> but i dont remember how
[02:32:54] <FromDiscord> <auxym> here's a random one (C backend) from my nimcache; https://pastebin.com/w9YydyMR
[02:33:10] <FromDiscord> <retkid> static N_INLINE(void, writeOOZOOZOOZOOZOnimbleZpkgsZpicostdlib4535config45fileZpicostdlibZtusb_684)(NU8 itf, NimStringV2 s);
[02:33:14] <FromDiscord> <retkid> nah i totally understand this
[02:33:16] <FromDiscord> <retkid> what you mean
[02:33:22] <FromDiscord> <retkid> yea writeOOZOOZOOZOOZOnimbleZpkgsZpicostdlib4535config45fileZpicostdlibZtusb_684
[02:33:43] <FromDiscord> <spoon> yea, i tried but i dont know the syntax, but didnt complain when i made it type proc
[02:34:00] <FromDiscord> <retkid> i would make a proc to instantiate the class
[02:34:03] <FromDiscord> <spoon> couldnt find any guides or examples online though
[02:34:09] <FromDiscord> <retkid> and if x then y = nil
[02:34:54] <FromDiscord> <auxym> In reply to @spoon "asked in <#706542664643772436> earlier": consider using std/options
[02:34:57] <FromDiscord> <spoon> well my goal is just to have weapons have the ability to have custom effects/make scriptable mod weapons that can make use of it down the line
[02:35:17] <FromDiscord> <retkid> ah
[02:35:18] <FromDiscord> <spoon> wanna see if nimscript works out
[02:35:35] <FromDiscord> <retkid> oddly enough I know how i would do that with C++
[02:35:48] <FromDiscord> <retkid> but not Nim
[02:35:56] <FromDiscord> <spoon> In reply to @auxym "consider using std/options": i tried making the argument an Option[proc] but the initialization got mad at me
[02:36:00] <FromDiscord> <retkid> so
[02:36:01] <FromDiscord> <spoon> not entirely sure how to use it
[02:36:14] <FromDiscord> <retkid> you can instantiate procs with this syntax
[02:36:38] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3TEi
[02:36:39] <FromDiscord> <retkid> like you might see in nimpy code
[02:36:46] <FromDiscord> <retkid> but i dont know if you can cast a proc to it without macros
[02:36:49] <FromDiscord> <retkid> the solution is probably macros
[02:37:17] <FromDiscord> <spoon> alternatively i can just make a weapon/specialweapon object and have them seperate
[02:37:25] <FromDiscord> <spoon> instead of using options
[02:37:35] <FromDiscord> <retkid> @Rika  feel like they'd be good at this
[02:37:37] <FromDiscord> <spoon> just need to figure out procs in objects
[02:38:12] <FromDiscord> <retkid> I would like nim's objects to be fleshed out
[02:38:19] <FromDiscord> <retkid> but also remain optionally minimal
[02:39:14] <FromDiscord> <spoon> yea, i dont need much from them
[02:40:13] <FromDiscord> <auxym> In reply to @spoon "not entirely sure how": this seems to work: https://play.nim-lang.org/#ix=3TEj
[02:40:14] <FromDiscord> <spoon> where do you think they need improvement
[02:40:40] <FromDiscord> <spoon> as long as libraries dont start turning into java
[02:41:01] <FromDiscord> <retkid> init functions
[02:41:08] <FromDiscord> <retkid> it does stuff on instanciation
[02:41:13] <FromDiscord> <retkid> (edit) "instanciation" => "instantiation"
[02:41:19] <FromDiscord> <retkid> default properties, etc
[02:41:30] <FromDiscord> <spoon> hmm
[02:41:47] <FromDiscord> <retkid> static types
[02:41:50] <FromDiscord> <retkid> i dont think they exist?
[02:41:52] <FromDiscord> <spoon> In reply to @retkid "init functions": does nim have constructors and deconstructors?
[02:42:08] <FromDiscord> <retkid> nope
[02:42:21] <FromDiscord> <spoon> In reply to @auxym "this seems to work:": not sure i get it
[02:42:28] <FromDiscord> <retkid> unless they do...
[02:42:53] <FromDiscord> <retkid> you gotta make your own
[02:42:56] <FromDiscord> <retkid> but its like kinda weird
[02:42:58] <FromDiscord> <retkid> idk
[02:43:00] <FromDiscord> <spoon> yea, i think theres =destroy
[02:43:21] <FromDiscord> <spoon> https://nim-lang.org/docs/destructors.html
[02:43:26] <FromDiscord> <spoon> this?
[02:43:44] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3TEk
[02:43:50] <FromDiscord> <retkid> because you had to write the proc seperately
[02:44:32] <FromDiscord> <auxym> In reply to @spoon "not sure i get": the point was that you can call `some` on a proc to make it into an `Option[T]` (in this case `Option[Cb]` , see the Cb typedef
[02:45:04] <FromDiscord> <spoon> ah
[02:45:35] <FromDiscord> <auxym> alternatively, `none[Cb]` would be used to signify no value
[02:46:31] <FromDiscord> <spoon> hm, ok
[02:46:43] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[02:47:28] <FromDiscord> <spoon> main problem i think i'm having is i have an object, it has variables and a proc, how do i define that proc when i initialize the object
[02:48:10] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[02:49:07] <FromDiscord> <auxym> if you change the proc for `Option[YourProcType]` it defaults to `none`.
[02:49:18] <FromDiscord> <auxym> otherwise iirc it defaults to nil
[02:50:35] <FromDiscord> <auxym> you can have a look at the std/streams module that uses this pattern a lot (procs as an object member). no with options but with nil checks: https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/streams.nim#L1
[02:51:59] <FromDiscord> <spoon> alright, i'll test something real quick
[02:52:28] *** Joins: kipukun (~kipukun@static.125.107.76.144.clients.your-server.de)
[02:54:59] <FromDiscord> <spoon> added a quick test "onHit" proc to my player object that takes an enemy as an argument, added it to my attack function and it didn't like that https://media.discordapp.net/attachments/371759389889003532/957767216886079538/unknown.png
[02:55:41] <FromDiscord> <spoon> wait nvm one sec
[02:55:56] <FromDiscord> <spoon> forgot to make it public
[02:58:33] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[02:58:59] <FromDiscord> <spoon> okay, it works!
[02:59:23] <FromDiscord> <spoon> looking at that helped, thanks
[03:01:03] <FromDiscord> <auxym> you can check for nil with isNil btw, if you want to make that proc optional and check if it's set
[03:01:25] <FromDiscord> <spoon> sent a code paste, see https://play.nim-lang.org/#ix=3TEs
[03:01:26] <FromDiscord> <spoon> here's a brief version for lurkers
[03:01:31] <FromDiscord> <spoon> lol
[03:02:34] <FromDiscord> <spoon> yea, i'll make sure to use that
[03:11:44] <FromDiscord> <spoon> syntax is pretty easy in hindsight
[03:11:47] <FromDiscord> <creikey> > Reads up to size bytes from socket into the result.↵↵I'm not sure I really understand what the nim documentation means by this part of `recv`. Will it block until all of those bytes are read in size?
[03:12:00] <FromDiscord> <creikey> https://nim-lang.org/docs/net.html#recv%2CSocket%2Cint%2Cint from this
[03:12:34] <FromDiscord> <creikey> I think for buffered sockets it waits until all of the data is received is what it means
[03:19:51] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 260 seconds)
[03:20:56] <FromDiscord> <Elegantbeef> Yes↵(@creikey)
[03:21:02] <FromDiscord> <Elegantbeef> Until data is read or timeout is achieved
[03:21:15] <FromDiscord> <Elegantbeef> @auxym\: glad to hear it wasnt pointless 😀
[03:21:25] <FromDiscord> <creikey> I'm assuming it works the same with python so I can send data between the two like this
[03:21:35] <FromDiscord> <creikey> maybe I should just be using http
[03:21:47] <FromDiscord> <Elegantbeef> What are you doing?
[03:22:03] <FromDiscord> <creikey> sending hundreds of kilobytes of json between two computers through a relay server
[03:22:16] <FromDiscord> <creikey> one of the codebases is in python the other in nim
[03:23:25] <FromDiscord> <Elegantbeef> Ok generally what i do is prefix the message with length
[03:23:41] <FromDiscord> <creikey> yeah that seems to be what everybody does
[03:23:47] <FromDiscord> <creikey> I'm not super sure about what's actually going on though
[03:23:55] <FromDiscord> <Elegantbeef> What do you mean?
[03:23:58] <FromDiscord> <creikey> if I do recv(1289129) does it like send the data in a bunch of tcp packets
[03:24:00] <FromDiscord> <creikey> like split up
[03:24:21] <FromDiscord> <Elegantbeef> I believe it does, depends on the socket setup i think
[03:25:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TEt
[03:26:08] <FromDiscord> <Elegantbeef> This way you send messages packs of 1024 but your `sock.recv` will block until you get it all or it times out
[03:26:13] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3TEu
[03:26:41] <FromDiscord> <Elegantbeef> I dont know the difference much i just use sockets and if they work i'm happy 😛
[03:26:41] <FromDiscord> <creikey>  https://media.discordapp.net/attachments/371759389889003532/957775196067086466/image.png
[03:26:55] <FromDiscord> <Elegantbeef> Well there you go
[03:27:06] <FromDiscord> <creikey> I'm very much not sure if python does the same thing though with sendv
[03:27:14] <FromDiscord> <Elegantbeef> Well test
[03:27:17] <FromDiscord> <creikey> it seems like jester for a web server seems very complicated though
[03:27:38] <FromDiscord> <Elegantbeef> Send a super large message from python to a buffered nim socket and if it gets it all it does
[03:29:32] <FromDiscord> <Elegantbeef> I'd imagine python is buffered just cause it's a high level thing
[04:09:54] <FromDiscord> <dom96> In reply to @creikey "> Reads up to": for buffered sockets, yes
[04:10:14] <FromDiscord> <dom96> See the following line in the docs: "For buffered sockets this function will attempt to read all the requested data"
[04:10:33] <FromDiscord> <dom96> the reason the docs say "up to" is because the socket might get closed during a recv
[04:10:41] <FromDiscord> <dom96> so you might get less
[04:18:39] <Amun-Ra> do I get right from nim standpoint there's no difference between those two functions? https://play.nim-lang.org/#ix=3TEH
[04:18:50] <FromDiscord> <Elegantbeef> @pietroppeter\: for nimib is there a way to get the `nbCode` to gensym symbols  so you can reuse variable/procedure names without manually annotating `gensym`?
[04:19:53] <Amun-Ra> ok, these are identical, https://godbolt.org/z/sb1exaecc
[04:20:49] <FromDiscord> <Elegantbeef> Damn it
[04:20:54] <FromDiscord> <Elegantbeef> I was going to send the godbolt link
[04:20:56] <FromDiscord> <Elegantbeef> Shame! 😛
[04:21:37] <Amun-Ra> :>
[04:21:53] <FromDiscord> <Elegantbeef> Took me longer to figure out how to share it than i'd like to admit
[04:22:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:22:22] <Amun-Ra> ;)
[04:30:17] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:42] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:34:22] <FromDiscord> <m4ul3r> til that godbolt supported nim, very cool
[04:36:51] <Amun-Ra> https://www.youtube.com/watch?v=kBAMtM5xNkM
[04:36:53] <Amun-Ra> ah, sorry
[04:37:05] <Amun-Ra> wrong window, not nim related
[04:37:39] <FromDiscord> <Elegantbeef> Interesting video selection 😛
[04:38:39] <Amun-Ra> that was something I was going to add to my to watch list but messed up the dest. tab
[04:43:51] <Amun-Ra> hmm, I guess I've found a bug in nim compiler
[04:45:12] <FromDiscord> <Elegantbeef> Hey i love nim compiler bugs
[04:46:14] <Amun-Ra> it's my third one, now I have to force myself to make a test case
[04:46:28] <FromDiscord> <Elegantbeef> Well i'll take a look at it if it's not too complex
[04:47:01] <Amun-Ra> it popped in a quite large project
[04:48:48] <FromDiscord> <Elegantbeef> What's it related to?
[04:49:16] <Amun-Ra> function pointers set to nil in const objects
[04:51:20] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:108d:b8d3:fe1c:9a86)
[04:51:21] <Amun-Ra> gimme sec
[04:53:42] <Amun-Ra> and the test case compiles
[04:56:08] <Amun-Ra> Elegantbeef: https://dpaste.com/HKV2XVZLP
[04:57:44] <Amun-Ra> I'll have to copy all the project and keep only relevant code
[04:59:18] <FromDiscord> <Elegantbeef> Oh a codegen error
[04:59:44] <FromDiscord> <Elegantbeef> How are you generating these objects?
[05:03:33] <Amun-Ra> Elegantbeef: https://dpaste.com/EC9DVMEXG
[05:06:35] <Amun-Ra> I'll make a test case tomorrow and keep you posted
[05:08:00] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:28:32] <FromDiscord> <kipukun> hello all, im getting a `Permission Denied` error with nim on freebsd 13.0. this is in the context of an HTTP request. i traced the syscalls down to a `sendto` call
[05:28:40] *** Parts: kipukun (~kipukun@static.125.107.76.144.clients.your-server.de) (Leaving)
[05:28:56] <FromDiscord> <Elegantbeef> Sounds like user permission issues perhaps
[05:30:05] <FromDiscord> <Elegantbeef> If you run the program with elevated permissions does it work?
[05:30:24] <FromDiscord> <Elegantbeef> Dont know BSD much, so just extrapolating Linux knowledge
[05:31:58] <FromDiscord> <kipukun> thats what i thought at first, but according to the man page `sendto` returns EACCES if the destination is a broadcast address.
[05:34:41] <FromDiscord> <Elegantbeef> You're doing a TCP request so it's the other part
[05:35:03] <FromDiscord> <Elegantbeef> > Write  permission is denied on the destination socket file, or search permission is denied for one of  the  directories  the  path  prefix.
[05:35:23] <FromDiscord> <Elegantbeef> Though that's 'UNIX domaiin sockets'
[05:35:55] <FromDiscord> <kipukun> i think it actually has to do with the call to redis, then it might be a permission denied on that socket.
[05:36:11] <NimEventer> New thread by Solomonthewise: Confusing behavior do to overloading of and for binary and, as well as logical and., see https://forum.nim-lang.org/t/9052
[05:40:19] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Read error: Connection reset by peer)
[05:41:04] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 272 seconds)
[05:42:10] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[05:46:12] <NimEventer> New thread by Solomonthewise: Parseint not defined for char., see https://forum.nim-lang.org/t/9053
[06:31:23] <FromDiscord> <Bubblie> How do I update nim
[06:31:28] <FromDiscord> <Bubblie> Do I just
[06:31:31] <FromDiscord> <Bubblie> Re install or
[06:31:45] <FromDiscord> <Elegantbeef> Ideally you use choosenim and then just do `choosenim update stable`
[06:32:01] <FromDiscord> <Bubblie> Oh alright let me get choosenim
[06:32:09] <FromDiscord> <Bubblie> I kinda did everything manually
[06:32:15] <FromDiscord> <Elegantbeef> Uninstall your installation before you get it
[06:32:24] <FromDiscord> <Bubblie> Also msvc is giving me a terrible time atm I hate windows
[06:32:27] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Uninstall your installation before": Alright
[06:32:57] <FromDiscord> <Bubblie> Once I get the msvc thing actually working for futhark ill make a pr cause idk if its my machine or windows being a pain in thebass
[06:33:01] <FromDiscord> <Bubblie> (edit) "thebass" => "the ass"
[06:33:15] <FromDiscord> <Bubblie> Or my dev environment
[06:33:26] <FromDiscord> <Bubblie> Its most likely windows
[07:06:45] <FromDiscord> <Girvo> Hi all!
[07:07:32] <FromDiscord> <Girvo> @ElegantBeef There is something odd with the Nim VSCode extension and choosenim on Windows haha. It doesn't pick up the compiler/tooling properly. Its weird as.
[07:07:59] <FromDiscord> <Girvo> sent a code paste, see https://paste.rs/vG8
[07:08:24] <FromDiscord> <Elegantbeef> Does it require resetting the editor?↵(@Girvo)
[07:08:44] <FromDiscord> <creikey> after choosenim updating nim all binaries are getting "the application was unable to start correctly" on windows, any way I can fix this without completely reinstalling nim?
[07:08:46] <FromDiscord> <Girvo> @ElegantBeef Nah, I've reset everything, even a completely fresh install triggers it. Some others have run into as well
[07:09:20] <FromDiscord> <Girvo> @ElegantBeef I worked aruond it by installing Nim directly myself instead, setting PATH to it, and the extension picked it up no worries
[07:10:08] <FromDiscord> <Girvo> https://github.com/saem/vscode-nim/issues/75
[07:10:37] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TEX
[07:10:46] <FromDiscord> <Girvo> Oh neat!
[07:10:47] <FromDiscord> <Girvo> Cheers
[07:11:22] <FromDiscord> <Girvo> I have 512 addresses to 1-byte storage segments of EEPROM and have all the joy of trying to store a "queue" of sorts in it lol
[07:13:07] <FromDiscord> <Elegantbeef> I totally follow yes i totally do, this is not a facetious statement
[07:13:21] <FromDiscord> <Girvo> hahaha
[07:14:08] <FromDiscord> <Elegantbeef> I'm assuming you have 512 bytes off EEPROM and you want to queue 1 byte acctions onto it
[07:14:46] <FromDiscord> <Girvo> Effectively, though the access/storage of it is... idiosyncratic 🙂
[07:15:06] <FromDiscord> <Elegantbeef> Interesting
[07:15:59] <FromDiscord> <spoon> ah nim vscode
[07:16:05] <FromDiscord> <creikey> I think my nim install is doomed
[07:16:06] <FromDiscord> <spoon> i had to switch to a different version of that
[07:16:46] <FromDiscord> <Girvo> @spoon Yeah one downside is there are two completely different extensions, too, and Saem's is superior lol. But has some bugs, of course, complicated stuff
[07:17:02] <FromDiscord> <morgan> i've been using saem's
[07:17:16] <FromDiscord> <spoon> yeah i'm using saem's too
[07:17:17] <FromDiscord> <morgan> made a few changes that got PR'd in for better regexes
[07:17:40] <FromDiscord> <spoon> why's there one above it in search
[07:18:00] <FromDiscord> <huantian> because algorithm
[07:18:43] <FromDiscord> <kipukun> @ElegantBeef to follow up, running the program as root gives the same error.
[07:18:50] <FromDiscord> <spoon> i don't think it's maintained anymore, right?
[07:18:51] <FromDiscord> <kipukun> i haven't checked the strace output yet though.
[07:20:09] <FromDiscord> <morgan> also anyone used nim before for audio plugins? there are existing c++ projects for that so one could use them with nim. curious bc if someone has done it already that could get me going faster with this. i didn't find any results with a search earlier and there's too many results for plugin on this discord for me to look thru them all. ping me if you respond
[07:21:38] <FromDiscord> <Elegantbeef> @Girvo\: what's the idiosyncratic method of accessing/pushing?
[07:22:32] <FromDiscord> <Elegantbeef> @morgan\: probably the best you're going to get https://github.com/search?q=language%3Anim+audio
[07:23:27] <FromDiscord> <Girvo> @ElegantBeef Well aside from the fact that there is about 5 different ways of approaching the same "storage", the ESP32 api's are both too high-level in terms its read/write APIs, but too low level to build nice data structures on top of it
[07:23:55] <FromDiscord> <Elegantbeef> `too low level` doubt we have Nim
[07:24:07] <FromDiscord> <Girvo> So I'm ditching most of it, aside from its "read/write blob" and handling the data myself 🙂 hence why I wanna try and pack a FIFO queue
[07:24:30] <FromDiscord> <Girvo> (edit) "So I'm ditching most of it, aside from its "read/write blob" and handling the data myself 🙂 hence why I wanna try and pack a FIFO queue ... " 03added "of (sentinel value) integers and work it it myself instead"
[07:27:25] <FromDiscord> <Girvo> now, to work out how to use a C-level attribute macro in Nim lol
[07:27:44] <FromDiscord> <Girvo> `RTC_NOINIT_ATTR uint32_t rtc_noinit_data;`
[07:28:43] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TEY
[07:28:49] <FromDiscord> <Elegantbeef> sorry latter should be `pop`
[07:28:51] <FromDiscord> <morgan> In reply to @Elegantbeef "<@277133333773811712>\: probably the best": ok so looks like nobody has done what i’m looking for
[07:29:08] <FromDiscord> <Elegantbeef> If they have they havent uploaded it publicly to github
[07:30:29] <FromDiscord> <Elegantbeef> Oh you said sentinel  value so i guess that makes that reundant and it's just a  `array[512 div T,  T]` and iterate to find `0`
[07:31:43] <FromDiscord> <Elegantbeef> Ah guess that is very naive
[07:31:48] <FromDiscord> <Girvo> @ElegantBeef Yeah pretty much 🙂 It's basically an array of ints that are the "packet type" that the modem thread iterates over, that needs to surive a crash/reboot
[07:31:51] <FromDiscord> <Elegantbeef> Since eeprom seems to be persistent storage
[07:32:12] <FromDiscord> <Girvo> Indeed! Though it turns out I don't need it in EEPROM per-se (though it will work), but in RTC Slow memory lol
[07:32:28] <FromDiscord> <Girvo> Which is literally like RAM that happens to survive a reset. Which is wild
[07:32:51] <FromDiscord> <Elegantbeef> You say that like ram cant survive a reset
[07:33:21] <FromDiscord> <Elegantbeef> Non volatile ram goes brrr, oh wait no one uses it
[07:33:27] <FromDiscord> <Girvo> haha
[07:33:54] <FromDiscord> <Girvo> NVRAM actually _does_ get used for embedded stuff sometimes
[07:34:14] <FromDiscord> <Girvo> Specifically as an EEPROM alternative!
[07:34:57] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[07:35:30] <FromDiscord> <Girvo> I'm guessing to use the `RTC_NOINIT_ATTR` C attribute macro in Nim, the simplest way would be to write a small amount of C that uses it, and bind _those_ C variables in Nim?
[07:35:55] <FromDiscord> <Elegantbeef> What is the actual macro?
[07:35:59] <LuxuryMode> I am new to Nim and wondering what people use for unit testing. I was a bit confused from the docs whether people use unittest (also saw unittest2) or testament. Also, related question: how do I import a function I've defined elsewhere into my test?
[07:36:17] <FromDiscord> <Girvo> Testament is the go-to
[07:36:33] <LuxuryMode> thanks
[07:36:33] <FromDiscord> <Girvo> I still use `unittest` but thats because I have some weird requirements working in embedded stuff
[07:36:37] <FromDiscord> <Elegantbeef> Testament, unittest and balls are the 3 most used
[07:36:50] <FromDiscord> <Elegantbeef> Eh i use unit test for my stuff though it's small stuff
[07:36:57] <FromDiscord> <Elegantbeef> > how do I import a function I've defined elsewhere into my test
[07:36:59] <FromDiscord> <Girvo> Yeah I still really like it for really simple things
[07:37:03] <FromDiscord> <Elegantbeef> You cant
[07:37:14] <FromDiscord> <Elegantbeef> If it's inside a `test` block it's gensymd and not accessible
[07:37:40] <FromDiscord> <Elegantbeef> You can work around that by using a global variable and assigning that to the proc if you want
[07:38:06] <FromDiscord> <huantian> balls is fun because balls
[07:38:07] <FromDiscord> <LuxuryMode> I see everyone's on discord so I'm here now 🙂
[07:38:26] <FromDiscord> <Elegantbeef> I'm not on discord
[07:38:26] <FromDiscord> <huantian> well not everyone is on discord
[07:38:26] <FromDiscord> <Elegantbeef> Huan isnt on discord
[07:38:27] <FromDiscord> <Elegantbeef> There is only a single discord user presently
[07:38:37] <FromDiscord> <Elegantbeef> The fucking Australian doesnt get the memo
[07:38:39] <FromDiscord> <LuxuryMode> oh
[07:38:44] <FromDiscord> <LuxuryMode> back to IRC then lol
[07:38:53] <FromDiscord> <Elegantbeef> No go to matrix!
[07:38:53] <FromDiscord> <Elegantbeef> 😛
[07:39:01] <FromDiscord> <Elegantbeef> Use what ever you prefer
[07:39:19] <FromDiscord> <Girvo> `#define RTC_NOINIT_ATTR  _SECTION_ATTR_IMPL(".rtc_noinit", COUNTER)`
[07:39:25] <FromDiscord> <Girvo> @ElegantBeef ^^
[07:40:00] <FromDiscord> <Elegantbeef> you could make a template that gensyms it that way so you'd do somethiing like `var myVar {.rtcNoInit.} = 10`
[07:40:20] <FromDiscord> <Elegantbeef> Not that i really get what that does
[07:40:22] <FromDiscord> <Girvo> Neat, yeah I'll take a crack at it
[07:40:36] <LuxuryMode> gensym = generate symbol?
[07:40:37] <FromDiscord> <Elegantbeef> code gens  it that way
[07:40:41] <FromDiscord> <Elegantbeef> That's what i meant
[07:40:42] <FromDiscord> <Elegantbeef> Yes
[07:40:55] <LuxuryMode> I can't just import a proc I've written?
[07:41:03] <FromDiscord> <Girvo> Haha it's an attribute that basically tells the ESP32 to store _that_ variable in some special memory on the real-time-clock instead of in actual RAM
[07:41:03] <FromDiscord> <Elegantbeef> `{.pragma: codegendecl"yourgenstatement here".}`
[07:41:06] <FromDiscord> <Elegantbeef> What's your code luxury
[07:41:22] <FromDiscord> <Elegantbeef> It's hard to say the issue without the code
[07:41:41] <FromDiscord> <Elegantbeef> Yea like i said a macro or pragma is the best here
[07:41:48] <FromDiscord> <Girvo> Yeah I think you're right
[07:41:50] <FromDiscord> <Girvo> Cheers!
[07:42:02] <FromDiscord> <Elegantbeef> It'll let you annotate it, and aslong as you import that C file that declares it you're fine
[07:42:12] <LuxuryMode> Right now I literally have a single proc at the top level in a file: `proc countWords(s: string): int =...` and then I have a separate `tests/` directory where I'd like to write my tests.
[07:42:22] <FromDiscord> <Elegantbeef> ah
[07:42:27] <FromDiscord> <Elegantbeef> `countWords`
[07:42:31] <FromDiscord> <Elegantbeef> You need to export procedures in Nim
[07:42:37] <FromDiscord> <Girvo> The `` marks it as exported 🙂
[07:42:52] <FromDiscord> <Elegantbeef> I thought you were talking about having a procedure declared inside a test and accessing it from other tests
[07:43:09] <LuxuryMode> hah no no
[07:43:28] <FromDiscord> <Elegantbeef> Well that solves that issue in a way that isnt a hack 😛
[07:44:01] <LuxuryMode> I assume you mean *? That symbol doesn't show up coming from Discord
[07:44:29] <FromDiscord> <Elegantbeef> Yea it's a bridge bug
[07:44:38] <FromDiscord> <Elegantbeef> it appears as greater than or equal to iirc
[07:44:50] <LuxuryMode> shows up as a blank square for me
[07:44:56] <FromDiscord> <Elegantbeef> Ah
[07:45:07] <LuxuryMode> but ok so just `proc myProc*..(arg1, arg2)...`?
[07:45:15] <FromDiscord> <Elegantbeef> Yep
[07:45:25] <LuxuryMode> didn't mean the dots before (arg1) whoops
[07:45:41] <FromDiscord> <Elegantbeef> well if you have generic params or a constrain
[07:45:47] <FromDiscord> <Elegantbeef> It's sensible accidently
[07:45:49] <LuxuryMode> that's a pretty elegant way to mark procs as public
[07:45:58] <LuxuryMode> Love that I can just look at the function and tell from itself
[07:45:58] <FromDiscord> <Elegantbeef> It's the same for all symbols
[07:46:27] <FromDiscord> <Elegantbeef> Any top level symbol can be exported with the export marker, and for objects you need to apply it to the fields you want visible outside the file
[07:46:43] <LuxuryMode> right ok
[07:47:00] <LuxuryMode> and for another noob question: how do I import it now in the test file?
[07:48:46] <FromDiscord> <Elegantbeef> `import myfilename`
[07:49:19] <FromDiscord> <Elegantbeef> assuming you have a `config.nims` that does `switch("path", "$projectDir/../src")` inside your `tests` folder
[07:49:42] <LuxuryMode> I don't :)
[07:49:57] <LuxuryMode> will add one
[07:51:23] <LuxuryMode> `Success: All tests passed` Woot!!
[07:53:41] <FromDiscord> <Elegantbeef> You're now a leet Nim programmer
[07:53:59] <FromDiscord> <huantian> I thought that happens when you write a macro
[07:54:15] <LuxuryMode> hehe indeed. Thanks for all the help
[07:54:42] <FromDiscord> <Elegantbeef> Seems like someone is doing their implementation of countwords to go against that benchmark 😛
[07:56:02] <LuxuryMode> lol no, I don't even know what that refers to. I'm just implementing some unix commands as a way to learn Nim
[07:56:32] <FromDiscord> <Elegantbeef> Ah there is a common benchmark of languages that uses countwords as the task
[07:57:01] <FromDiscord> <huantian> which benchmark is this? I only remember the times people benchmark nim against rust \:P
[07:57:06] <LuxuryMode> Right, I may have come across that recently. Showed Nim and Rust neck in neck IIRC
[07:57:27] <FromDiscord> <Elegantbeef> https://benhoyt.com/writings/count-words/ i think is the common one
[07:57:49] <FromDiscord> <Elegantbeef> Nim is 4th on there
[07:58:37] <FromDiscord> <huantian> grep is too good
[07:59:43] <LuxuryMode> Beats Rust handily
[08:00:15] <LuxuryMode> I assume there are all sorts of debates as to whether the benchmarks are fair, with people arguing you can optimize the X language implementation by doing whatever...
[08:00:39] <FromDiscord> <Elegantbeef> yea it's circlekerky
[08:00:43] <FromDiscord> <Elegantbeef> jerky even
[08:01:37] <LuxuryMode> :P
[08:02:50] <FromDiscord> <Elegantbeef> languages at the level of nim give the same performance if you have a brain
[08:03:13] <FromDiscord> <Elegantbeef> The question is the ease of doing it
[08:03:56] <FromDiscord> <huantian> I didn't check the nim code, didi t just use `CountTable`?
[08:04:08] <FromDiscord> <Elegantbeef> dont recall, think so
[08:04:21] <LuxuryMode> https://github.com/benhoyt/countwords/blob/master/optimized.nim
[08:04:32] <LuxuryMode> `from tables import initCountTable,`
[08:05:12] <FromDiscord> <huantian> from imports? is this python smh
[08:05:58] <LuxuryMode> ha didn't even notice that. Did not know you could do from imports in Nim
[08:06:11] <LuxuryMode> Is there another way to import a specific type or proc?
[08:06:45] <FromDiscord> <Elegantbeef> They're dumb generally
[08:06:53] <FromDiscord> <Elegantbeef> Idiomatic Nim just does `import module`
[08:07:12] <FromDiscord> <huantian> and uses `import module except conflict` if there's any conflicting symbols
[08:07:30] <FromDiscord> <Elegantbeef> and when importing system modules you do `std/strutils` for instance
[08:10:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:12:11] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 268 seconds)
[08:13:30] <LuxuryMode> I see
[08:15:15] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[08:15:52] <FromDiscord> <Elegantbeef> Despite appearances Nim and Python should be written differently 😛
[08:20:32] <FromDiscord> <Girvo> I almost reckon the common-ish statement of "It's like python, but fast and with a proper type system" does Nim a bit of a disservice haha
[08:20:59] <FromDiscord> <Girvo> Though that used to be more common back in the pre 1.0 days I think
[08:21:02] <FromDiscord> <Elegantbeef> A few people say that i'm not one of them
[08:21:53] <FromDiscord> <enthus1ast> i'll try to create a minimal test case, currently its quite a big codebase↵(@xflywind)
[08:23:31] <FromDiscord> <xflywind> In reply to @enthus1ast "i'll try to create": what's problem?
[08:27:40] <FromDiscord> <enthus1ast> the SIGSEGV when useing prologue
[08:28:32] <FromDiscord> <enthus1ast> but yeah i'll try to create a small testcase, have not documented the crash anywhere yet
[08:28:54] <FromDiscord> <xflywind> I see
[08:32:39] <FromDiscord> <Girvo> @ElegantBeef Whats the best reference/doc for C-level codegen? Ensuring it gets the RTC_NOINIT_ATTR  attribute macro put in front of a variable statement?
[08:33:02] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-codegendecl-pragma
[08:33:08] <FromDiscord> <Girvo> Champion
[08:33:52] <FromDiscord> <Girvo> My google-fu is weak today
[08:34:04] <FromDiscord> <Elegantbeef> Just ctrl + f the manual for random keywords 😛
[08:34:09] <FromDiscord> <Elegantbeef> Nim isnt very good to search
[08:34:32] <FromDiscord> <Girvo> Haha you're not wrong. I found some good stuff in the forum but it still wasn't quite what I was after
[08:35:04] <FromDiscord> <huantian> can't wait until in five years nim becomes the dominant programming language and google searches will be easier
[08:36:34] <FromDiscord> <Elegantbeef> Just have 8000 writeups hosted on the website problem solved
[08:37:02] <FromDiscord> <Girvo> Ah hah! It works. I have crash-proof RTC "slow" memory working 😄
[08:37:22] <FromDiscord> <Elegantbeef> I assume you're just using a pragma pragma
[08:39:06] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:41:51] <FromDiscord> <Girvo> At the moment yeah
[08:41:53] <FromDiscord> <huantian> pragma pragma pragma? pragma
[08:42:06] <FromDiscord> <Girvo> `RTC_NOINIT_ATTR NI tmain_46;`
[08:42:25] <FromDiscord> <Girvo> Pragma is grammatically the same as Buffalo, true story (note: not actually a true story)
[08:42:49] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:44:44] <FromDiscord> <huantian> pragma is such a funny word I don't know why
[08:47:00] <FromDiscord> <Girvo> Just tested it: working perfectly. I can now store variables in the ESP32's RTC memory to survive crashes/esp_restart calls. Awesome
[08:59:08] <FromDiscord> <Girvo> `result[4].add [ident"codegenDecl"]`
[08:59:31] <FromDiscord> <Girvo> How would one pass the `: "blah arguments here"` to this macro to build the pragma?
[08:59:49] <FromDiscord> <Elegantbeef> `macros.dumptree` is your friend
[09:00:23] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TF7
[09:00:58] <FromDiscord> <Elegantbeef> Need to work on micros more
[09:01:07] <FromDiscord> <Elegantbeef> This is as good as a time as any
[09:01:35] <FromDiscord> <Girvo> Dope
[09:01:38] <FromDiscord> <Girvo> Cheers
[09:02:50] <FromDiscord> <Elegantbeef> Now if only Kate was updated on my package repository
[09:04:33] <FromDiscord> <huantian> maybe just download a deb manually for now
[09:04:44] <FromDiscord> <Elegantbeef> It doesnt have any
[09:04:56] <FromDiscord> <Elegantbeef> It has appimages that have bugs it seems
[09:05:14] <FromDiscord> <huantian> that's fun
[09:05:45] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[09:05:49] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[09:05:49] *** Quits: dv2 (~dv2@2a01:4f8:c0c:b9f4::1) (*.net *.split)
[09:05:54] *** Joins: tinystoat (~squeek@user/tinystoat)
[09:06:20] *** Joins: anddam (~anddam@user/anddam)
[09:06:29] <FromDiscord> <huantian> yk I might actually switch to kate for quick editing instead of notepadqq
[09:06:39] <FromDiscord> <huantian> since I am using KDE
[09:08:18] <FromDiscord> <huantian> also notepadqq is buggy
[09:08:49] <FromDiscord> <Elegantbeef> kate + lsp is lovely for Nim so far
[09:08:54] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3TF8
[09:08:57] <FromDiscord> <Girvo> This is definitely not right hey lol
[09:09:15] <FromDiscord> <Elegantbeef> remove the `[]`
[09:09:28] <FromDiscord> <huantian> does nimslp have semantic highlighting?
[09:09:48] <FromDiscord> <Girvo> Ah!
[09:09:50] <FromDiscord> <Girvo> Perfect cheers
[09:10:02] <FromDiscord> <Elegantbeef> Dont think it does huan
[09:13:39] <FromDiscord> <Girvo> Hm I've still done something not right. Alright time for some macro debugging lol
[09:53:02] <FromDiscord> <Elegantbeef> @Girvo\: still debugging macro?
[10:56:32] *** Joins: PMunch (~PMunch@user/pmunch)
[10:59:57] *** Quits: Lord_Nightmare (znc@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[11:02:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[11:08:55] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[11:10:17] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3TFi
[11:10:52] <FromDiscord> <Elegantbeef> Well yea
[11:11:03] <FromDiscord> <enthus1ast> yea?
[11:11:05] <FromDiscord> <Elegantbeef> Yes
[11:11:13] <FromDiscord> <Elegantbeef> Gensym happens inside the compiler to the symbol
[11:11:22] <FromDiscord> <enthus1ast> it should generate nimjaTmplVar\_someRandomStuff or?
[11:11:31] <FromDiscord> <enthus1ast> s
[11:11:32] <FromDiscord> <Elegantbeef> You can or you can just use the generated symbol
[11:11:41] <FromDiscord> <Elegantbeef> What're you trying to do verbatim
[11:14:49] <FromDiscord> <enthus1ast> i need a unique variable, and its name. To create nimja templatates that does not store the result in `result` but in the generated variable.↵I need this because i've created "shorthand" templates, that does not need to be wrapped in a proc. For this i use a template that injects this random variable in the outer scope.↵But i do not want to pollute the sourrounding with a variable
[11:15:16] <FromDiscord> <enthus1ast> hard times to explain lol
[11:15:26] <FromDiscord> <enthus1ast> sent a code paste, see https://paste.rs/FxA
[11:15:43] <FromDiscord> <enthus1ast> (its rubbish i know)
[11:16:16] <FromDiscord> <Elegantbeef> I dont quite get why you need a gensym for this
[11:16:52] <FromDiscord> <enthus1ast> how would you generate a variable with a random name and also get the variable name as a string?
[11:17:26] <FromDiscord> <enthus1ast> so that it does not pollute the outer scope?
[11:17:49] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TFk
[11:19:15] <FromDiscord> <enthus1ast> so it is already unique o.0
[11:19:22] <FromDiscord> <Elegantbeef> Templates are hygenic
[11:19:30] <FromDiscord> <enthus1ast> even if i do {.inject.}
[11:19:38] <FromDiscord> <Elegantbeef> No inject makes them non hygenic
[11:19:43] <FromDiscord> <Elegantbeef> That's the entire point of inject
[11:20:04] <FromDiscord> <enthus1ast> the problem is jester in fact
[11:20:14] <FromDiscord> <enthus1ast> @"foo" is not available in the proc
[11:20:22] <FromDiscord> <enthus1ast> ok let my just try it
[11:20:39] <FromDiscord> <enthus1ast> maybe i'm overthinking this
[11:20:46] <FromDiscord> <Elegantbeef> Perhaps
[11:26:17] <FromDiscord> <enthus1ast> mh no, it needs to be injected
[11:26:32] <FromDiscord> <enthus1ast> withouth this the nimja macros cannot see the var
[11:26:40] <FromDiscord> <Elegantbeef> `block:`?
[11:27:03] <FromDiscord> <enthus1ast> mhh
[11:27:22] <FromDiscord> <enthus1ast> ah, then i must use the gensymed name of.
[11:27:39] <FromDiscord> <Elegantbeef> I dont fully see the issue, so cant help much
[11:28:23] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3TFm
[11:28:44] <FromDiscord> <enthus1ast> tmpls is a shortcut for compiling the template directly withouh wrapping in an extra proc
[11:29:07] <FromDiscord> <enthus1ast> jester does some magic to `@"name"` so its not a global
[11:29:39] <FromDiscord> <enthus1ast> so i need to change `tmpls` to a template (was a proc first)
[11:31:04] <FromDiscord> <enthus1ast> to solve this, i made the nimja macros accept an additional parameter, to set the variable name that is appended to (could be something other then `result` for example
[11:31:37] <FromDiscord> <enthus1ast> i thought the best way is to generate a unique variable name, and give this name to the nimja procs
[11:34:29] <FromDiscord> <Elegantbeef> So the issue is that jester takes an untyped statement and as such `@name` isnt replaced?
[11:34:55] <FromDiscord> <enthus1ast> `@"name"` is then not known in the nimja macros
[11:35:03] <FromDiscord> <Elegantbeef> So you need something like `templs("<h1>$#</h1>", @name)`?
[11:35:39] <FromDiscord> <enthus1ast> this could be an option, but its a semantic i do not want currently
[11:36:33] <FromDiscord> <Elegantbeef> Well you can always make you `templs` emit an overload which is what i suggested
[11:37:31] <FromDiscord> <Elegantbeef> then you just do `$1`,  `$2`... inside your string and use the Nim strutils `%` at compile time
[11:37:38] <FromDiscord> <Elegantbeef> Or runtime rather
[11:37:53] <FromDiscord> <enthus1ast> tmpls compiles nimja templates
[11:37:58] *** Joins: gsalazar (~gsalazar@132.120.90.149.rev.vodafone.pt)
[11:38:09] <FromDiscord> <Elegantbeef> I dont get how you can compile the template without the symbol in scope
[11:38:14] <FromDiscord> <Elegantbeef> So i guess i'll shush
[11:38:52] <FromDiscord> <enthus1ast> i think i cannot explain my issue correctly \:) , i'll play with it and report
[11:40:20] <FromDiscord> <Elegantbeef> Well have fun, i cannot understand a lick of the issue
[11:45:39] <FromDiscord> <enthus1ast> (i'll play with it == have to go to work first then i can play with it....)
[11:49:46] *** Quits: reversem3[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Bridge terminating on SIGTERM)
[11:55:13] *** Joins: reversem3[m] (~reversem3@2001:470:69fc:105::33d1)
[12:05:54] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:7861:551a:a8a6:1dca:688d) (Quit: Leaving)
[12:22:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:53:25] <PMunch> @enthus1ast, what you want is something like this: https://play.nim-lang.org/#ix=3TFu
[12:54:28] <PMunch> Essentially converting the genSym to a string (at least without repr) removes the hidden random part of the identifier. In general it's always better to generate Nim AST directly and not do it through building strings
[12:56:51] <PMunch> For the tmpls thing I believe you want something like this: https://play.nim-lang.org/#ix=3TFv
[12:57:36] <FromDiscord> <Elegantbeef> I have 0 clue how you've got to that answer pmunch 😛
[13:00:09] <PMunch> What do you mean?
[13:00:23] <FromDiscord> <Elegantbeef> I still dont get the problem
[13:00:48] <FromDiscord> <Elegantbeef> Also dont know if you seen but the issue with kate was just an outdate version of Kate on the ubuntu repository
[13:00:54] <FromDiscord> <Elegantbeef> So i guess it's time i move to a proper distro
[13:01:01] <PMunch> Aaah, that makes sense :P
[13:01:08] <PMunch> But no, I hadn't seen that
[13:01:16] <FromDiscord> <enthus1ast> ive fixed it during the train ride \:)
[13:01:27] <FromDiscord> <Elegantbeef> Imagine having trains
[13:01:36] <PMunch> Trains are neat
[13:02:02] <PMunch> Nice combination of comfort and speed
[13:02:12] <FromDiscord> <enthus1ast> https://play.nim-lang.org/#ix=3TFw
[13:03:08] <PMunch> Why do you need the name as a string?
[13:03:11] <FromDiscord> <Elegantbeef> Isnt that just an elaborate `asttoStr nimjaTmplsVar`?
[13:03:32] <FromDiscord> <enthus1ast> i use the string in the parser to generate code
[13:03:42] <PMunch> That sounds like a bad idea
[13:04:02] <FromDiscord> <enthus1ast> i tried to just use a NimNode but i could not have `result` as a parameter
[13:04:15] <FromDiscord> <Elegantbeef> Why cant you?
[13:04:34] <FromDiscord> <enthus1ast> its unknown
[13:05:28] <FromDiscord> <enthus1ast> yep
[13:05:30] <FromDiscord> <enthus1ast> its asttostr
[13:05:32] <FromDiscord> <enthus1ast> thank you
[13:05:43] <FromDiscord> <Elegantbeef> I suggested that earlier
[13:05:47] <FromDiscord> <Elegantbeef> You ignored me
[13:05:53] <FromDiscord> <Elegantbeef> Shame on you!
[13:06:05] <FromDiscord> <enthus1ast> what??
[13:06:08] <FromDiscord> <enthus1ast> lemme scroll up
[13:06:21] <FromDiscord> <enthus1ast> ah ye
[13:06:22] <FromDiscord> <enthus1ast> s
[13:06:25] <FromDiscord> <Elegantbeef> Literally my first example is what you used
[13:06:28] <FromDiscord> <enthus1ast> yes
[13:06:41] <FromDiscord> <enthus1ast> sorry, i read it but not read it correclty
[13:08:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[13:16:56] <PMunch> Hmm, maybe I should support both nimja and onionhammer templates in autotemplates
[13:17:21] <FromDiscord> <Elegantbeef> autotemplates?
[13:17:43] <PMunch> One of my small experiments I'm considering to make into an actual library
[13:18:07] <PMunch> https://github.com/PMunch/autotemplate
[13:19:37] <PMunch> The meat of the experiment being here: https://github.com/PMunch/autotemplate/blob/master/src/autotemplates.nim
[13:20:19] <FromDiscord> <Elegantbeef> `t.kind == nnkBracketExpr and t[0].repr == "typeDesc"` `t.typeKind == ntyTypeDesc`
[13:20:40] <PMunch> Oh right :P
[13:20:51] <PMunch> I wrote all of that in a hurry just to test if it would work
[13:21:02] <FromDiscord> <enthus1ast> nimja is onionhammer templates on steroids
[13:21:07] <FromDiscord> <Elegantbeef> also `newLit t.typeKind == ntyTypeDesc` 😛
[13:21:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[13:21:30] <FromDiscord> <enthus1ast> I've used onionhammers templates before i build nimja
[13:21:50] <PMunch> What where the things you ran into with onionhammer templates that made you write Nimja?
[13:22:09] <FromDiscord> <Elegantbeef> I dont know what these templaters are for so i'll just nod
[13:22:20] <FromDiscord> <enthus1ast> no comments
[13:22:24] <FromDiscord> <enthus1ast> strange syntax
[13:22:36] <FromDiscord> <enthus1ast> porting issues (was porting stuff from jinja2 and twig)
[13:22:43] <FromDiscord> <enthus1ast> no exends
[13:22:49] <FromDiscord> <enthus1ast> extends
[13:23:07] <FromDiscord> <enthus1ast> strange syntax is of. opinonated
[13:23:09] <PMunch> @Elegantbeef, it's just a way to drop code snippets inside a static document. Mostly to split the markdown and the content logic
[13:23:34] <PMunch> Extends is nice
[13:23:53] <PMunch> And I've only done the most trivial things, so haven't really gotten anything to say on syntax
[13:24:18] <PMunch> One thing I noticed is that Nimja seems to require more special characters than onionhammers
[13:24:42] <FromDiscord> <enthus1ast> i mean its modeled after jinja twig django templates etc
[13:24:55] <FromDiscord> <enthus1ast> i know its quite verbose, but a well known syntax
[13:25:23] <FromDiscord> <enthus1ast> so if you know one of the big template engines, you can just start with nimja
[13:25:35] <PMunch> Aah, that is probably a big pluss
[13:44:52] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:108d:b8d3:fe1c:9a86) (Remote host closed the connection)
[13:53:06] <PMunch> Hmm, for autotemplates it would be nice if it called `toHtml` for all subtypes recursively instead of just calling $
[13:53:27] <PMunch> Tried something like: https://play.nim-lang.org/#ix=3TFF
[13:53:41] <PMunch> But that fails because it just gets resolved recursively
[13:55:05] <PMunch> Ah nice, this works: https://play.nim-lang.org/#ix=3TFG
[13:55:20] <FromDiscord> <Elegantbeef> Fuck you're silly
[13:55:25] <PMunch> Silly?
[13:55:43] <FromDiscord> <Elegantbeef> Ah nvm i guess `system.$` isnt always what you want
[13:56:04] <PMunch> Haha, no I thought of that as well
[13:56:38] <PMunch> I mean the goal is to turn `SomeName.ext` into `proc toExt(x: SomeName): string` 
[13:56:51] <FromDiscord> <vindaar> PMunch\: feel free to ping me here of course for the plotly use case you have. Might be easier
[13:57:28] <PMunch> @vindaar, well basically I just wanted an easy way to get all the stuff I would need for embedding a plotly plot into a website
[13:57:51] <PMunch> Without having to reverse engineer the display functions
[13:57:58] <FromDiscord> <Elegantbeef> Hmm pmunch cant you just dp `proc toHtml(x: auto): string = $x`?
[13:58:18] <FromDiscord> <Elegantbeef> Then any type that overrides that would be dispatch upon since it'd be specialized
[13:58:37] <PMunch> @Elegantbeef, I could, but the problem is that the templating engine calls `$`
[13:59:39] <PMunch> So I need to bind `$` to `toHtml` if `toHtml` is defined for an arbitrary type, otherwise to the previously defined `$`
[14:01:27] <FromDiscord> <Rika> Your $ will only be called if nothing more specific is defined so you technically don’t need to check if to html compiles or not
[14:02:15] <PMunch> Well I need to check if `toHtml` exists for that type
[14:03:53] <FromDiscord> <Rika> What I mean is ↵$ exists -> your $ isn’t called↵Otherwise, to html exists -> calls to html↵Otherwise -> error out duh to html doesn’t exist
[14:03:56] <FromDiscord> <Rika> Right?
[14:04:33] <FromDiscord> <Rika> If to html doesn’t exist then you call $, but it’s not needed since if $ exists then your $ isn’t called
[14:04:58] <FromDiscord> <Rika> So inside your function, if to html doesn’t exist then $ doesn’t exist either so error out
[14:05:04] <PMunch> This is closer to what the actual library would look like: https://play.nim-lang.org/#ix=3TFI
[14:05:18] <FromDiscord> <Elegantbeef> Rika is right though
[14:05:26] <FromDiscord> <Elegantbeef> the generic `$` inside `toHtml` will not be used
[14:05:48] <FromDiscord> <Elegantbeef> Wait it seems like it is
[14:05:49] <FromDiscord> <Elegantbeef> That's odd
[14:06:18] <FromDiscord> <Elegantbeef> Ah nvm it is i was dumb
[14:07:12] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3TFM there
[14:07:38] <FromDiscord> <Elegantbeef> Not that this really matters, but yea
[14:07:58] <FromDiscord> <Elegantbeef> If `$` is defined for the type the `$` isnt called
[14:08:08] <FromDiscord> <Elegantbeef> Well the allias isnt needed
[14:08:33] <PMunch> Ah..
[14:08:34] <PMunch> Damn it..
[14:08:47] <FromDiscord> <Rika> Now praise me and my big brain!
[14:08:52] <FromDiscord> <Elegantbeef> You just need to specialize your `$`
[14:09:19] <FromDiscord> <vindaar> PMunch\: just put a more detailed explanation into that issue
[14:10:33] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3TFN here pmunch
[14:11:54] <PMunch> Ix isn't working for me right now and I have to go to lunch
[14:11:55] <FromDiscord> <Rika> Woah didn’t know you could shadow function declarations
[14:12:04] <PMunch> This is basically what I want to have happen: https://pastebin.com/M6nji0Dx
[14:16:09] <FromDiscord> <Elegantbeef> What i just provided should give that
[14:16:55] <FromDiscord> <Elegantbeef> we alias `$` only if `toHtml` exists and if an instance is a proc for our type
[14:17:09] <FromDiscord> <Elegantbeef> Otherwise we use `$`
[14:17:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[14:19:06] <FromDiscord> <Elegantbeef> Atleast i think it does
[14:19:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Client Quit)
[14:30:34] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[14:30:57] *** Quits: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[14:49:03] <PMunch> @Elegantbeef, the problem with your version is that I need to know all the types beforehand
[14:50:59] <PMunch> Is there any way I can undefine $?
[14:52:00] <FromDiscord> <Rika> Not without importing with exclude, and even then you will have difficulty dealing with system
[14:52:12] <PMunch> Hmm
[14:52:40] <PMunch> So there's no way I can override all $ calls in a block of code?
[14:52:49] <FromDiscord> <Rika> You should probably just change whatever template library you’re using to use to html instead of $
[14:53:08] <PMunch> That is an option..
[14:53:09] <FromDiscord> <Rika> You could probably if wrapped in a macro? Perhaps with extreme difficulty
[14:53:19] <FromDiscord> <Rika> In reply to @PMunch "That is an option..": It’s surely the easiest option
[14:53:44] <PMunch> But I kinda wanted to be able to use any templating library
[14:53:59] <PMunch> I don't really want to write my own..
[14:54:08] <FromDiscord> <Rika> Then those libraries shouldn’t use $ I’d say
[14:54:39] <PMunch> One thing I could do is to use a macro to traverse the object and generate all the `$` procedure overloads
[15:00:55] <FromDiscord> <Rika> If a type already has $ defined then you might hit an issue unless wrapped in a proc or a block perhaps?
[15:01:56] <PMunch> Well that's not an issue
[15:02:03] <PMunch> It will always be wrapped in a proc
[15:02:33] <PMunch> Basically I want to auto-generate toX given a type and a set of templates for different X's
[15:02:56] <PMunch> But if an object has a field I want that to call toHtml recursively
[15:03:01] <PMunch> Or toX rather
[15:35:29] *** Quits: reversem3[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: User was banned)
[16:11:47] <FromDiscord> <Zoom> Hey guys on Arch and derivatives! I'm writing a PKGBUILD for my program. Is it ok to `nimble -y install` for the dependencies? It forcefully overwrites the current versions this way and potentially may affect users who rely on `nimble develop` for hacking on those depencencies.
[16:14:32] <FromDiscord> <Zoom> Although, if the user didn't issue `nimble develop` directly in the nimble cache dir, the only damage is the soft links, as far a I can tell.
[16:19:02] <FromDiscord> <auxym> good question. maybe you could setup a temporary nimble path for your build? not sure if nimble supports that, lemme look
[16:20:26] <FromDiscord> <Rika> dont aur packs usually get built in fake roots anyway
[16:24:06] <FromDiscord> <auxym> yeah nimble doesn't seem to have that feature :/
[16:25:40] <FromDiscord> <auxym> would be useful to be able to set the NIMBLE_PACKAGES_DIR environment variable or something like that
[16:26:32] <PMunch> Yeah packages on Arch should be built in a fakeroot and then everything is copied over
[16:27:00] <PMunch> I believe you will get errors saying that file X already exists in filesystem if it would overwrite something
[16:27:59] <PMunch> But does your program have a runtime dependency from a Nimble package?
[16:30:28] <FromDiscord> <Zoom> It looks like does, but as far as I can tell, nimble packages got overwritten in the main cache dir.↵(@Rika)
[16:31:09] <FromDiscord> <Zoom> Runtime dependency? Nope, only build dependency↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:32:18] <FromDiscord> <Zoom> So, from what I'm seeing, nimble installs from PKBUILD `build` section (where they belong) are happening before makepkg enters fakeroot
[16:34:39] <FromDiscord> <Zoom> The other issue is with explicit version requirements in PKBUILD (i.e. `makedepends=('nim>1.4.2')`) IF nim is installed not with Pacman, but choosenim for example. The system doesn't know the version and fails to build.
[16:38:02] <PMunch> Hmm, that sounds strange
[16:39:33] <PMunch> Okay @Elegantbeef, I've got it working now
[16:40:22] <PMunch> Now it generates `toHtml`, `toCSS` etc. for the various file types you have in your folder
[16:40:56] <PMunch> And generations happens recursively, and you're able to overload with custom procedures
[16:41:45] <PMunch> Now the next big question. I want to make it easy to do something in Jester where you would return different types based on something in the query.
[16:42:07] <PMunch> Imagine we have .html and .xml files for example, or maybe .html and .rss
[16:42:54] <PMunch> I want to write something in Jester that allows me to return .html or .rss based on either the Accept header or a . postfix on the url
[16:55:30] <FromDiscord> <auxym> In reply to @Zoom "The other issue is": here's an option: enforce the dependency on system nim and then call nim using the full path like `/usr/bin/nim` or whatever
[17:06:53] <FromDiscord> <Rika> choosenim installs to ~/.nimble/bin/nim which is a shim binary (i think) to ~/.choosenim/toolchains/nim-{version}/bin/nim
[17:12:28] <FromDiscord> <Zoom> @auxym wdym? Call nim to check the version manually?
[17:13:34] <FromDiscord> <Zoom> If I drop the version info from the PKGBUILD it works fine, from what I can tell, makepkg just can't get the version info if nim was installed in some other way besides pacman
[17:14:25] *** Joins: rockcavera (~rc@192.12.112.192)
[17:14:25] *** Quits: rockcavera (~rc@192.12.112.192) (Changing host)
[17:14:25] *** Joins: rockcavera (~rc@user/rockcavera)
[17:14:30] <FromDiscord> <Zoom> [dom96](https://matrix.to/#/@dom96:matrix.org)\: do you have any thoughts on this?
[17:19:14] <FromDiscord> <auxym> In reply to @Zoom "@auxym wdym? Call nim": nah. use makedepends to make sure nim is installed at the system level, then use the full path to call the system-nim and not choosenim-nim
[17:20:25] *** Joins: reversem3[m] (~reversem3@2001:470:69fc:105::33d1)
[17:20:25] <FromDiscord> <Rika> what would that solve?
[17:21:25] <FromDiscord> <auxym> it allows you to enforce the nim version as a dependency in PKGBUILD, whether the user has choosenim or not
[17:21:50] <FromDiscord> <auxym> and it shouldn't break the user's choosenim setup as long as the choosenim path is before the system stuff in PATH, which it should
[17:26:24] *** Quits: tinystoat (~squeek@user/tinystoat) (Remote host closed the connection)
[17:27:13] <NimEventer> New thread by FabienPRI: Dynamic shared libs, see https://forum.nim-lang.org/t/9054
[17:27:27] <FromDiscord> <Zoom> Hm, in case of Arch this may be ok, since all versions (arch32, archlinuxarm) actually include `nim` as a package. But↵● system version of the compiler potentially taking precedence over choosenim↵● measly program requiring installing the compiler from the distro repo even though Nim community recommends using choosenim↵does concern me.
[17:33:12] <FromDiscord> <auxym> yeah, it's a compromise, but I don't think you can do much else and still keep a fully-automatic build
[17:34:24] <FromDiscord> <Zoom> That's not as important as the other problem with deps overwrites. At least the `nimble install` will fail as the package has a requirement for the nim version.
[17:35:11] <FromDiscord> <auxym> the alternative I guess is have a bash script that: checks the version of system nim if any, else checks for presence of choosenim, install / choose the nim version in choosenim (which is persistent, not ideal), if neither system nim or choosenim is present then install nim via pacman
[17:36:05] <FromDiscord> <auxym> doesn't the fakeroot thing mentioned by rika and pmunch solve the nimble issue? not familiar with that tbh
[17:36:12] <FromDiscord> <Zoom> Currently I'm still trying to understand where does the `makepkg` script get the version info
[17:36:39] <FromDiscord> <Zoom> https://gitlab.archlinux.org/pacman/pacman/-/blob/master/scripts/makepkg.sh.in
[17:37:48] <FromDiscord> <Zoom> Nope, you're supposed to handle the dependenies in the `build()` section of the PKGBUILD file, but it enters the fakeroot only on issuing the `install`↵(@auxym)
[17:39:45] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[17:40:34] *** neurocyte0917090 is now known as neurocyte
[17:40:56] <FromDiscord> <auxym> well you could make your `nimble install` calls in install() no?
[17:45:56] <FromDiscord> <Zoom> If I move all the nimble stuff into the `package` part of the PKGBUILD, from what I'm seeing, makepkg informs `Entering fakeroot environment...` but nimble still reports that it overwrites the libs.
[17:57:25] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Read error: Connection reset by peer)
[17:57:55] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[18:00:15] <FromDiscord> <Zoom> You know what, I'm being silly here. The core of the issue is that I'm installing deps explicitly with `nimble install` before issuing `nimble build` anyway, which does its thing to satisfy the dependencies. However, were I to not using `nimble build` for actually building the program, I'd have no way of ensuring the deps are there without overwriting them just using `nimble`. So I'm going to file an issue with nimble to add this functionali
[18:02:29] *** Joins: tinystoat (~squeek@user/tinystoat)
[18:10:05] <PMunch> @Elegantbeef, pushed my changes now: https://github.com/PMunch/autotemplate
[18:10:27] <PMunch> Now I guess I should rip out the Jester part and make it a library..
[18:21:57] <FromDiscord> <Solitude> In reply to @Zoom "You know what, I'm": why arent you using nimbleDir?
[18:28:44] *** Joins: arkurious (~arkurious@user/arkurious)
[18:32:25] <FromDiscord> <Zoom> Wouldn't it be nice to reuse packages already present in the system? We don't aim to make a reproducible clean-slate build.
[18:33:26] <FromDiscord> <Solitude> but then you get screwed by `#HEAD` pacakges installed on user system
[18:33:50] <FromDiscord> <Solitude> pretty saving a megabyte of traffic isnt worth it
[18:33:53] <FromDiscord> <Solitude> pretty sure
[18:34:26] <FromDiscord> <Solitude> and you still can reuse them on rebuilds
[18:34:27] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:38:31] <FromDiscord> <auxym> In reply to @Solitude "why arent you using": is there a way to set nimbleDir without overwriting the user's nimble.ini?
[18:38:39] <FromDiscord> <Zoom> May be it's the way. What's the most bulletproof way to issue `mkdtemp` inside `TMPDIR` on arch to set `nimbleDir`
[18:39:02] <FromDiscord> <Zoom> Yep `--nimbleDir`\: https://github.com/nim-lang/nimble#nimbles-folder-structure-and-packages
[18:39:26] <FromDiscord> <Zoom> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/958004697564860437): May be it's the way. What's the most bulletproof way to issue `mkdtemp` inside `TMPDIR` on arch to set `nimbleDir`?
[18:39:35] <FromDiscord> <Solitude> In reply to @auxym "is there a way": as a cmdline parameter
[18:40:29] <FromDiscord> <auxym> damn, that was my first idea, but nimble's README didn't mention that option, so didn't think it was possible
[18:40:36] <FromDiscord> <auxym> I do agree that is the best way
[18:41:55] <FromDiscord> <auxym> actually it is mentioned, I just suck at ctrl-f apparently
[18:43:17] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[18:53:57] <FromDiscord> <Zoom> So, do you think we should recommend this for all package maintainers? In case of arch, you can just set the `--nimbleDir="$srcdir"` This will lead to every Nim package having it's own nimble directory with a separate `packages_official.json` and `package_temp.json` totaling over 1.2MB. That's not counting duplicate package directories.
[18:54:25] <FromDiscord> <Zoom> No bueno, in my book
[19:04:10] <FromDiscord> <auxym> no worse than node's node_modules, or python having no way to install different package versions concurrently
[19:04:20] <FromDiscord> <auxym> not sure how go/rust handle it though
[19:13:18] <FromDiscord> <Solitude> In reply to @Zoom "So, do you think": thats literally nothing
[19:15:49] <FromDiscord> <Rika> In reply to @auxym "no worse than node's": way less worse than node_modules xddd
[19:17:19] <FromDiscord> <Zoom> I don't support this attitude. 640K should be enough for everything. In all seriousness, there should be a valid reason for wastefulness.↵(@Solitude)
[19:22:51] <FromDiscord> <huantian> In reply to @Zoom "So, do you think": Are you not supposed to do that? I’ve always done this for my Nim pkgbuild a
[19:22:55] <FromDiscord> <huantian> (edit) "pkgbuild a" => "pkgbuilds"
[19:24:33] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:24:47] <FromDiscord> <auxym> In reply to @Zoom "I don't support this": the valid reason is predictable build in the presence of an arbitrary, unknown config on the user's machine
[19:26:47] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[19:26:56] <FromDiscord> <Zoom> Ok, I'm convinced. Do you think a transient mount should be used then, and not package manager's cache for the unique nimble directory?
[19:27:40] <FromDiscord> <huantian> Mmmm I don’t know I just kinda copied how node packages did it, redirecting the node cache to srcdir
[19:34:41] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:34:44] <FromDiscord> <huantian> Though thinking about it, does that mean one should use a different Nim cache location?
[19:57:18] <FromDiscord> <Zoom> sent a code paste, see https://paste.rs/tQU
[20:06:52] <FromDiscord> <Solitude> In reply to @Zoom "I don't support this": arch is wasteful at every corner, you're just being consistent
[20:08:11] <nrds> <06Prestige99> Everything is wasteful nowadays
[20:12:59] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[20:49:07] <FromDiscord> <Forest> Has someone managed to convert all of CPython to Nim somehow with an automated tool?
[20:49:28] <FromDiscord> <Rika> no? why?
[20:49:33] <FromDiscord> <Forest> Is that even possible to do without a ton of manual tweaking?
[20:49:36] <FromDiscord> <Forest> Just curious
[20:51:16] <FromDiscord> <Rika> probably not?
[20:52:07] <FromDiscord> <Forest> Hm
[20:52:38] <FromDiscord> <Solitude> try it and tell us
[21:02:52] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[21:04:45] *** Joins: Lord_Nightmare (znc@user/lord-nightmare/x-3657113)
[21:08:18] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:13:19] <FromDiscord> <auxym> it's almost certainly impossible to convert all python to nim, with all the dynamic stuff, monkey patching, etc
[21:13:55] <FromDiscord> <auxym> In reply to @Solitude "arch is wasteful at": yes, I love that pacman by defaults never cleans its cache, slowly filling up your disk for yeas
[21:13:58] <FromDiscord> <auxym> years
[21:21:16] <FromDiscord> <tandy> anyone familiar with emit / importjs ?
[21:22:16] <FromDiscord> <tandy> i need to generate the following code\:↵`import { Platform, Client, LoadStatus, createNavigation, createRouter, RoomViewModel, TimelineView } from "hydrogen-view-sdk";`↵where `{ Platform, Client, LoadStatus, createNavigation, createRouter, RoomViewModel, TimelineView }` and `hydrogen-view-sdk` are parameters
[21:23:51] <FromDiscord> <tandy> my current code\:↵`func importFromModule(module, library: cstring) {.importjs: "import # from #".}`generates the following with excess quotes on the first parameter\:↵`import "{ Platform, Client, LoadStatus, createNavigation, createRouter, RoomViewModel, TimelineView }" from "hydrogen-view-sdk";`
[21:24:13] <FromDiscord> <tandy> is there a way to get rid of the quotes?
[21:24:16] <FromDiscord> <tandy> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/958046272927985724): my current code\:↵`func importFromModule(module, library: cstring) {.importjs: "import # from #".}`generates the following with excess quotes on the first parameter\:↵`import "{ Platform, Client }" from "hydrogen-view-sdk";`
[21:38:04] *** Joins: rockcavera (~rc@192.12.112.192)
[21:38:05] *** Quits: rockcavera (~rc@192.12.112.192) (Changing host)
[21:38:05] *** Joins: rockcavera (~rc@user/rockcavera)
[21:41:59] *** Joins: Guest46 (~Guest46@149.4.124.149)
[21:42:10] *** Quits: Guest46 (~Guest46@149.4.124.149) (Client Quit)
[21:48:29] *** Joins: pro (~pro@user/pro)
[22:08:36] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:108d:b8d3:fe1c:9a86)
[22:13:33] <FromDiscord> <Phil> I'll answer you anything you could ever want to know about prologue. Nim-js conversion is just a bit beyond me
[22:23:21] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[22:47:10] <FromDiscord> <tandy> hehe
[22:47:28] <FromDiscord> <tandy> i figured out how to use nim with vite, so now i just have to figure out how to generate proper js
[22:58:19] <FromDiscord> <tandy> sent a code paste, see https://paste.rs/Uod
[23:01:52] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 260 seconds)
[23:13:49] *** Joins: vicfred (~vicfred@user/vicfred)
[23:24:19] <FromDiscord> <Forest> What's be the best format for storing level data?
[23:25:02] <FromDiscord> <Forest> It'd need to be flexible so it can be generated with a tool (a level editor) but it also needs to be able to support complex logic (stuff that moves and can perhaps use JS to do stuff maybe?)
[23:36:53] <FromDiscord> <Rika> ~~json?~~
[23:41:22] <FromDiscord> <spoon> ldtk level editor uses json too
[23:43:51] <FromDiscord> <spoon> and rpgmaker, think it's a solid choice
[23:50:23] <FromDiscord> <Schelz> Does someone knows how to resolve this error for webgui library ? https://media.discordapp.net/attachments/371759389889003532/958083148418281472/unknown.png
[23:52:15] <FromDiscord> <pmunch> @Forest\: if you're looking at embedding logic into the file I guess Nimscript would be a good choice
[23:52:20] <FromDiscord> <pmunch> With macros and stuff it's flexible enough to give you pretty much any syntax you want for your normal variables. And with nimscripter it's fairly easy to throw code in there which can be called on runtime
[23:52:46] <FromDiscord> <pmunch> Certainly easier than somehow embedding a JavaScript interpreter
