[00:01:08] *** Joins: struchu (~struchu@staticline-31-183-182-79.toya.net.pl)
[00:09:36] *** Quits: struchu (~struchu@staticline-31-183-182-79.toya.net.pl) (Ping timeout: 272 seconds)
[00:10:53] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) (Remote host closed the connection)
[00:15:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1)
[00:24:12] *** Joins: mwnaylor (~user@2601:5ce:4300:5fa0::2483)
[00:33:53] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[00:43:44] <jcowan> I'm thinking that it's just an accidental fallout from reusing the keyword hierarchy system for multimethods, rather than something designed in.
[00:46:04] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[00:48:10] <technomancy> not every feature can be transducers
[01:01:01] <chujev> I wouldn't say multimethods are "reusing" hierarchies, they exist specifically for multimethods, there's no other use for them in clojure core
[01:02:13] <chujev> The Joy of Clojure has more detail and (toy) examples
[01:03:31] <chujev> re: custom hierarchies it says "Clojure maintains a global structure that holds the hierarchy information used for multimethod dispatch. By default, all the multimethod functions manipulate and operate off of the global hierarchy map directly. If you prefer to reduce these potentially confusing side effects to the global structure, then you can define a derivation hierarchy using make-hierarchy ..."
[01:03:52] *** Quits: op2 (~op@user/op2) (Ping timeout: 245 seconds)
[01:04:39] <technomancy> yeah I mean that kind of implies you have a good use case for derive
[01:04:45] <technomancy> which I've also never once seen
[01:05:57] *** Quits: makara (~sol@196.61.111.63) (Ping timeout: 245 seconds)
[01:09:33] <chujev> I guess it was more useful before Clojure had protocols
[01:10:47] <technomancy> dunno; I never use those either
[01:12:34] <jeaye> Yeah, same.
[01:12:54] <jeaye> Also never use records.
[01:14:05] *** Joins: op2 (~op@user/op2)
[01:14:38] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) (Remote host closed the connection)
[01:15:07] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[01:15:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1)
[01:17:01] <chujev> multimethods and protocols are great, I would miss them sorely
[01:24:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) (Remote host closed the connection)
[01:25:09] <technomancy> I've never run into a situation where I wanted polymorphism but the overhead of multimethods was too much
[01:26:44] <jeaye> Yep.
[01:29:01] *** Quits: turlando (~turlando@user/turlando) (Quit: No Ping reply in 180 seconds.)
[01:35:28] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[01:35:28] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[01:35:28] *** Joins: turlando (~turlando@user/turlando)
[01:36:20] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 256 seconds)
[01:38:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1)
[01:42:29] *** jackhill is now known as KM4MBG
[01:53:31] *** Quits: op2 (~op@user/op2) (Ping timeout: 258 seconds)
[01:58:28] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:18:48] *** Joins: lad (~lad@user/lad)
[02:20:19] *** Joins: emacsomancer (~emacsoman@c-98-202-136-109.hsd1.ut.comcast.net)
[02:27:48] *** Quits: cmiles741 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 252 seconds)
[02:35:35] *** Joins: paravida_ (~myChateau@71.215.86.34)
[02:37:32] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 256 seconds)
[02:49:15] <jcowan> After all, you don't need anything but functions.
[02:51:08] *** Quits: paravida_ (~myChateau@71.215.86.34) (Quit: Leaving)
[02:54:56] <technomancy> right I mean even polymorphism is like ... maybe once every 5kloc or so?
[02:58:39] <jeaye> I typically start with a map of keyword -> fn, if I'm working in a single ns, anyway. Only jump to multimethods if I want the dispatch to be extensible beyond that ns, which is not the usual case.
[02:59:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:7921:180d:4519:92d1) ()
[03:00:54] <sobel> non-functional langs utterly miss the boat on flexible dispatch, imo
[03:01:23] <technomancy> hm; how does dispatch have anything to do with FP?
[03:08:40] *** Joins: son0p- (~ff@181.136.122.143)
[03:09:04] <sobel> i don't have a great technical answer. it seems like _most_ of them do it worse than FPs.
[03:10:41] <technomancy> in fact when I think of languages with multimethods, most aren't particularly functional. Julia, CL, Dylan ... I think D too?
[03:11:29] <sobel> good to know. i don't know any of those.
[03:12:13] <technomancy> maybe it's just that mainstream languages get it wrong =)
[03:12:28] <sobel> i'm more from the C/C++/python/perl/Java kinda background. many of which have seen the light in recent years.
[03:12:40] <sobel> hah, yeah that might have been a more precise way to frame it
[03:14:24] <technomancy> in practice almost all the multimethods I've used just dispatch on literal value of the first arg
[03:15:49] <technomancy> more or less equivalent to fancy syntax for defining/invoking a map of keyword->functions
[03:17:42] <technomancy> to me multiple dispatch feels a bit like STM or commas as whitespace. neat idea that you never end up using in practice.
[03:18:57] <jeaye> Bugs me when people use commas in maps in clj.
[03:21:03] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[03:21:17] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[03:22:25] <lunik1> Julia might be best in class for multimethods
[03:22:32] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[03:22:36] <jcowan> There are a couple of proposals to add generic functions based on predicates to Scheme.  One has a single global hierarchy, the other allows independent hierarchies.  I was trying to research what the use cases for independent hierarchies might be.
[03:22:44] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[03:25:01] <technomancy> jcowan: well, if the hierarchy is mutable, it seems clear that making it global without providing an alternative is bad news, right?
[03:25:23] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 268 seconds)
[03:25:27] <technomancy> maybe I'm misunderstanding the situation
[03:27:11] <technomancy> you don't want a situation where simply loading a piece of code makes changes to a piece of state
[03:28:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[03:31:49] <jcowan> Well, it's growable at the leaves, but not *wholly* mutable (short of throwing away the world and changing the source)
[03:33:42] <technomancy> jcowan: it feels like ordering is likely to be a lot more important when dispatch is based on a series of boolean predicates vs what clojure does
[03:34:31] <technomancy> like ... does loading the method definitions in a different order give you different results then? that seems troublesome.
[03:38:41] <jcowan> No, because you specify the hierarchy between predicates yourself (of course, if you get it wrong, bad things)
[03:39:34] *** Quits: uncleyear (~ian@93.185.29.18) (Quit: Lost terminal)
[03:40:06] *** Joins: emacsoma1 (~emacsoman@136.60.128.68)
[03:40:14] <technomancy> so it's not like clojure where simply loading the defmethod adds it to the dispatch logic then
[03:41:04] *** Joins: uncleyear (~ian@93.185.29.18)
[03:42:12] *** Quits: emacsomancer (~emacsoman@c-98-202-136-109.hsd1.ut.comcast.net) (Ping timeout: 276 seconds)
[03:45:54] *** Quits: uncleyear (~ian@93.185.29.18) (Ping timeout: 240 seconds)
[03:52:15] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[04:23:40] *** Quits: rinwa (~rinwa@141.226.14.13) (Read error: Connection reset by peer)
[04:24:04] *** Joins: rinwa (~rinwa@141.226.14.13)
[05:07:10] <jcowan> It has to know which predicate to try first.
[05:47:46] *** Quits: lad (~lad@user/lad) (Ping timeout: 240 seconds)
[06:00:43] *** Joins: atw (~user@154.27.197.101)
[06:20:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[06:21:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[06:25:22] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Ping timeout: 240 seconds)
[06:35:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[08:11:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[08:16:55] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[08:56:33] *** Quits: patrix (~patrix@2400:4050:ca42:6b00:2e54:7270:e650:36e4) (Ping timeout: 255 seconds)
[09:15:32] *** KM4MBG is now known as jackhill
[09:15:33] *** Joins: patrix (~patrix@2400:4050:ca42:6b00:9cda:12ae:fbe5:ced1)
[09:24:33] *** Quits: rinwa (~rinwa@141.226.14.13) (Quit: WeeChat 1.9.1)
[09:35:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[09:36:43] *** Joins: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730)
[09:46:29] *** Quits: Null_A (~null_a@2601:645:8700:2290:2910:fbd1:f882:3730) (Remote host closed the connection)
[09:48:11] *** Joins: struchu (~struchu@staticline-31-183-182-79.toya.net.pl)
[10:23:18] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[10:23:36] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[10:42:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[10:44:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:44:48] *** Joins: uncleyear (~ian@93.185.29.18)
[10:46:58] *** Joins: makara (~sol@196.61.111.63)
[10:55:53] *** Quits: ridcully (~ridcully@p508ac428.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[10:56:10] *** Joins: ridcully (~ridcully@p508ac428.dip0.t-ipconnect.de)
[11:20:15] *** Quits: uncleyear (~ian@93.185.29.18) (Quit: Lost terminal)
[11:21:45] *** Joins: uncleyear (~ian@93.185.29.18)
[11:22:19] *** Joins: cmiles741 (~miles@068-184-030-013.res.spectrum.com)
[11:29:40] *** Quits: cmiles741 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 258 seconds)
[11:48:03] *** Quits: shredder (~user@user/shredder) (Quit: quitting)
[11:49:50] *** Joins: shredder (~user@user/shredder)
[11:51:22] *** Quits: Krish (~Krish@krishanv.xyz) (Ping timeout: 245 seconds)
[12:24:55] *** Joins: to-hu (~Thunderbi@p200300e9af3577006e0b84fffe0c009d.dip0.t-ipconnect.de)
[12:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:38] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[13:02:00] *** Quits: to-hu (~Thunderbi@p200300e9af3577006e0b84fffe0c009d.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:03:23] *** Joins: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[14:13:58] *** Quits: irq0 (~quassel@amy.irq0.org) (Ping timeout: 256 seconds)
[14:48:11] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 265 seconds)
[15:06:40] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[15:06:40] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: pinage404 (~pinage404@2001:470:69fc:105::25c) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: thmswu (~thmswu@user/thmswu) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: punnie (~punniemat@2001:470:69fc:105::1193) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: Asbjrn[m] (~asbjornol@2001:470:69fc:105::40b) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: Null_A[m] (~jasonjckn@2001:470:69fc:105::bb85) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152) (Quit: Bridge terminating on SIGTERM)
[15:06:44] *** Quits: golanv (~golanvtch@2001:470:69fc:105::54c) (Quit: Bridge terminating on SIGTERM)
[15:06:51] *** Quits: alexeimatveev[m] (~alexeimat@2001:470:69fc:105::c84c) (Quit: Bridge terminating on SIGTERM)
[15:09:23] *** Joins: thmswu (~thmswu@user/thmswu)
[15:13:04] *** Joins: pinage404 (~pinage404@2001:470:69fc:105::25c)
[15:13:04] *** Joins: punnie (~punniemat@2001:470:69fc:105::1193)
[15:13:04] *** Joins: Asbjrn[m] (~asbjornol@2001:470:69fc:105::40b)
[15:13:04] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[15:13:04] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[15:13:04] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[15:13:04] *** Joins: golanv (~golanvtch@2001:470:69fc:105::54c)
[15:13:04] *** Joins: alexeimatveev[m] (~alexeimat@2001:470:69fc:105::c84c)
[15:13:17] *** Joins: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152)
[15:13:17] *** Joins: Null_A[m] (~jasonjckn@2001:470:69fc:105::bb85)
[15:54:28] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[15:54:28] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[15:54:28] *** Joins: turlando (~turlando@user/turlando)
[16:08:26] *** Joins: coderprans (~user@150.107.177.250)
[16:28:16] *** Joins: yoonkn (~user@175.197.208.79)
[16:32:25] *** Quits: shem (~shem@saltus.discendum.com) (Ping timeout: 250 seconds)
[16:33:38] *** Joins: shem (~shem@saltus.discendum.com)
[16:37:02] *** Joins: cmiles741 (~miles@068-184-030-013.res.spectrum.com)
[16:48:20] *** Quits: mcint (mcint@user/mcint) (Ping timeout: 255 seconds)
[16:51:29] *** Quits: cmiles741 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 250 seconds)
[17:11:30] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:16:33] *** Joins: mcint (mcint@user/mcint)
[17:18:18] <sobel> . o O (web servers libraries have gotten so good and simple, but CORS and preflight requests have diligently filled that void in complexity)
[17:45:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe)
[17:48:17] <Para> sobel: That's why I've written a single CORS middleware that I keep copy-pasting everywhere; it's not pretty but supports enough things to be bearable and supports all major browsers.
[17:49:52] *** Quits: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe) (Ping timeout: 256 seconds)
[17:53:43] <sobel> i'm starting to accumulate one of those, thus the comment :)
[17:54:13] <sobel> it's far from complete. might have to implement preflights today.
[17:54:19] *** Quits: coderprans (~user@150.107.177.250) (Ping timeout: 250 seconds)
[17:55:09] <sobel> i read google is planning to quit supporting 3rd party cookies in 2023. i don't know how they're planning to fill that void, but i hope it means improving jwts
[17:56:27] *** Quits: struchu (~struchu@staticline-31-183-182-79.toya.net.pl) (Ping timeout: 258 seconds)
[18:00:34] *** Quits: pflanze (~pflanze@2001:1a88:19e:4500:a:13dd:7c09:9436) (Ping timeout: 240 seconds)
[18:01:49] <Para> They want to add that FLOIC or whatever it was called which effectively blocks everyone else but them from total tracking of all users.
[18:12:47] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[18:16:17] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:16:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:22:11] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[18:33:17] <sobel> i hear the privacy concerns in that, but i don't know how SSO is gonna work without 3rd party cookies
[18:34:06] <Para> Google is the third party.
[18:34:18] <Para> Chrome already tracks every user with unique ids which cannot be turned off.
[18:35:15] <ridcully> just switch over to google sso!  sorted!
[18:48:32] <sobel> so they don't just mean any cross-domain cookie by "3rd party cookies" then? ugh, i guess i do have two years to sort it out
[18:48:42] <sobel> and some faith that google isn't about to break the whole web
[18:50:35] *** Joins: son0p (~ff@181.136.122.143)
[18:51:08] <Para> Well, if you are the browser, the search engine and the ad salesman, isn't that all 1st party.
[18:51:47] <Para> And considering the whole thing provoked a response from just about all other major companies and EFF, I'd say Google - well, Alphabet - is aiming on breaking the whole web.
[19:21:26] *** Joins: op2 (~op@user/op2)
[19:32:27] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Ping timeout: 252 seconds)
[19:46:30] *** Quits: makara (~sol@196.61.111.63) (Ping timeout: 268 seconds)
[19:47:17] *** Joins: libertyprime (~libertypr@124.197.60.232)
[19:48:45] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[20:05:48] *** Joins: danielam (~daniel@cpe-67-247-21-112.nyc.res.rr.com)
[20:06:53] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:09:36] *** Quits: danielam (~daniel@cpe-67-247-21-112.nyc.res.rr.com) (Quit: leaving)
[20:30:24] *** Joins: lad (~lad@user/lad)
[20:32:43] <sobel> keyrighst.
[20:33:35] <sobel> i'm so dependent on their cloud but i want to protest
[20:40:43] *** Quits: libertyprime (~libertypr@124.197.60.232) (Ping timeout: 250 seconds)
[20:43:29] *** Joins: seschwar (~seschwar@user/seschwar)
[21:03:11] *** Joins: mattil (~mattilinn@87-92-17-82.bb.dnainternet.fi)
[21:48:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe)
[22:17:55] *** Joins: Guest50100 (~Guest50@c-a0c6e455.027-357-6d6c6d4.bbcust.telenor.se)
[22:36:37] *** Joins: makara (~sol@196.61.111.63)
[22:41:26] *** Quits: Null_A (~null_a@2601:645:8700:2290:44f7:81a6:341:7abe) (Remote host closed the connection)
[22:48:25] *** Quits: Guest50100 (~Guest50@c-a0c6e455.027-357-6d6c6d4.bbcust.telenor.se) (Quit: Client closed)
[23:16:53] *** Joins: kabellaa (~kabellaa@c-a0c6e455.027-357-6d6c6d4.bbcust.telenor.se)
[23:19:57] <kabellaa> Hello good clojurists, I have a question for you! Do you find that relying on vector index as a identifier for some data as a code smell? As it eventually leads to `.indexOf` usage call.
[23:21:45] <technomancy> indexOf is almost always a code smell. I don't know if "relying on vector index as an identifier" always leads to that though.
[23:24:54] <kabellaa> That's fair. Maybe it's just me or my colleagues being lazy. Thanks for your input :)
[23:25:48] *** Quits: mattil (~mattilinn@87-92-17-82.bb.dnainternet.fi) (Quit: Leaving)
[23:26:19] <jeaye> kabellaa: first, second, last, and rest are also code smells.
[23:26:54] <jeaye> Less smelly than indexOf, but still cause for suspicion.
[23:27:27] <technomancy> destructuring ftw
[23:27:38] <technomancy> well, pattern matching ftw, but sadly ... =\
[23:28:11] <jeaye> (-> foo first last) is much less clear than (-> foo :name :family) for example
[23:28:53] <kabellaa> Haskell =D 
[23:29:08] <jeaye> Assuming you had [["Jeaye"] ["Wilkerson"]] ...] instead of {:name {:given "Jeaye" :family "Wilkerson"}}
[23:29:33] <jeaye> I made that mistake _far_ too often when I started with Clojure. Thinking too much with vectors than with maps.
[23:30:09] <jeaye> Err, eoops. [["Jeaye" "Wilkerson"] ...] I mean. See! It's even harder to type.
[23:30:27] <technomancy> well, the only correct representation of a name is a single string
[23:30:33] <technomancy> but point taken in general
[23:30:41] <jeaye> I hear you.
[23:30:55] <jeaye> My wife's first name has a hyphen in it. She can't use a lot of forms.
[23:31:31] <jeaye> And she has no middle name or initial.
[23:32:09] <kabellaa> I find that is often tempting jeaye to write (def persons [{:name {:given "Jeaye" :family "Wilkerson"}, ...]) (def pet-owner-relations [{:pet-idx 1 :owner-idx 1}])
[23:32:13] <Para> I used to work with American Filipino who married a Dutch. Her name was wild.
[23:32:35] <jeaye> kabellaa: Oh no!
[23:32:52] <kabellaa> I know
[23:34:01] <kabellaa> I come from a backround where i had such a cool thing refrences and mutable data structures
[23:34:30] <jeaye> I'd probably make that (def persons {"person-id" {:name ...}}) (def pet-id->owner-id {"pet-id" "person-id"})
[23:35:25] <jeaye> Well, pet-id->person-id unless non-persons can be owners. Then you need a {:type :person :id "person-id"} in there instead.
[23:37:04] <Para> Call me crazy, I'd just model the generic relation first and then add some validation around people owning pets, not the other way around or any other less-than-Sunday-school-esque combinations :-)
[23:37:55] <jeaye> Depends how generic you want to go and what you know the scope of the project to be.
[23:38:14] <jeaye> Not gonna build a generic system when I know I have one specific use case.
[23:39:16] <Para> This could be a wonderful problem to try to solve with core.logic
[23:39:29] <Para> (yes yes I'm jesting)
[23:41:58] <kabellaa> I have the opinion that generalizing is an activity best performed when you have the domain knowledge (writing the naive solution)
[23:44:04] <kabellaa> I get a spine ting (not the good kind) when some code reviewer requests a function/data structure to be "more" generic when it's only used once or twice
[23:44:45] <kabellaa> spine tingling sensation*
[23:45:07] <Para> I still have that as well, leftovers from Java years.
[23:45:18] <Para> 20 classes for three rows of actual relevant code.
[23:45:41] <Para> I'm really happy aspect weaving hasn't infected Clojure world.
[23:46:05] <jeaye> Exactly.
[23:46:33] <jeaye> I think it's a bit easier to make that claim in other langs. Refactoring a Clojure function to be more generic is, I think, much easier than doing the same in many other langs.
[23:47:11] *** Parts: jcowan (sid325434@id-325434.charlton.irccloud.com) ()
[23:47:45] <kabellaa> My guess is that you are working on some type of collection and not on InterfaceFactoryInstanceManagerUserCreator
[23:50:32] <kabellaa> As types join the fray generics becomes templating is the only option which in turns leads to template code 
[23:55:34] *** Quits: kabellaa (~kabellaa@c-a0c6e455.027-357-6d6c6d4.bbcust.telenor.se) (Quit: Client closed)
