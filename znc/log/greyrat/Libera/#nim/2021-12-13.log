[00:01:15] *** Joins: neurocyte0132889 (~neurocyte@94.46.81.14)
[00:01:16] *** Quits: neurocyte0132889 (~neurocyte@94.46.81.14) (Changing host)
[00:01:16] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:06:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[00:10:30] <FromDiscord> <pjz> how do I turn a string into a set[char]?  I'm sure it's obvious, but I've written < 100 lines of nim so far in my life 🙂
[00:11:23] <FromDiscord> <reilly> In reply to @Xand*r*nius "how do I turn": https://nim-lang.org/docs/sets.html#toSet%2CopenArray%5BA%5D or https://nim-lang.org/docs/setutils.html#toSet.t%2Cuntyped
[00:11:41] <FromDiscord> <reilly> Oh wait, forget that first one, it's deprecated. Didn't read.
[00:11:53] <FromDiscord> <reilly> (edit) 04removed "https://nim-lang.org/docs/sets.html#toSet%2CopenArray%5BA%5D or"
[00:12:03] <FromDiscord> <pjz> sweet
[00:13:08] <FromDiscord> <nwilburn> sent a code paste, see https://play.nim-lang.org/#ix=3HTU
[00:19:02] <FromDiscord> <pjz> is there a 1.6 build for ubuntu 20.04LTS ?
[00:19:28] <FromDiscord> <pjz> I'd rather install a package than a manual install... they're so messy
[00:19:44] <FromDiscord> <Yardanico> well debian sid (unstable) has nim 1.6.0
[00:19:49] <FromDiscord> <Yardanico> so _maybe_ you can install that
[00:19:54] <FromDiscord> <Yardanico> but I'd still recommend a manual install :)
[00:20:07] <FromDiscord> <Yardanico> https://packages.debian.org/sid/amd64/nim/download
[00:36:16] *** Joins: tinytoast (~squeek@user/tinystoat)
[00:36:42] *** Quits: tinystoat (~squeek@user/tinystoat) (Read error: Connection reset by peer)
[00:44:33] <FromDiscord> <Professor Actual Factual> Anyone know of a good way of managing memory-related as side-effects? I know there was some discussion surrounding this topic on the forum a while back. Having a pragma like `{.noAllocations.}` would be great IMO. If the stdlib doesn't provide this, thats fine. How can I implement my own solution?
[00:44:50] <FromDiscord> <Yardanico> you can create your own tag and tag your functions
[00:44:57] <FromDiscord> <Yardanico> https://nim-lang.org/docs/manual.html#effect-system-tag-tracking
[00:51:11] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 268 seconds)
[00:52:28] <arkanoid> Professor Actual Factual, interesting feature, but it would require to tag all procs that allocates memory beforehand. Not sure if there's an automatic way to do that, but one idea could be to create a pragma to wrap a function and runs getOccupiedMem() as first and last op and saves the results to a log file if it differs, then use this info for further analysis
[00:53:03] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[00:53:12] <arkanoid> well, maybe it could also be possible to tacke the memory allocator and tag the malloc
[00:53:43] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[00:56:45] <arkanoid> I mean https://github.com/nim-lang/Nim/blob/version-1-6/lib/system/memalloc.nim#L90 , but not sure if there are other hooks available
[01:01:09] *** Joins: jjido (~Denis@90.213.58.125)
[01:01:38] <FromDiscord> <Professor Actual Factual> sent a code paste, see https://play.nim-lang.org/#ix=3HUj
[01:05:47] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[01:07:21] *** Joins: pch (~pch@66.49.131.33)
[01:11:07] <FromDiscord> <SivadNai> can somebody remind me, when i see an exception message from parseInt like <pre> invalid integer: 14676 </pre> and sure enough it seems to be a format issue because the string length is 11, what options to i have to reformat this
[01:14:10] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:16:12] <FromDiscord> <Yardanico> In reply to @SivadNai "can somebody remind me,": can you try doing `echo repr mystr`
[01:16:16] <FromDiscord> <Yardanico> it'll show the spaces and all stuff
[01:16:22] <FromDiscord> <Yardanico> if it's just spaces you can use `strip` from `strutils`
[01:20:13] <arkanoid> could you please explain me here why proc returns error but template does not? https://play.nim-lang.org/#ix=3HUo
[01:20:59] <FromDiscord> <Yardanico> because iterable[T] currently only works with templates
[01:21:14] <FromDiscord> <Yardanico> don't ask me for the reason, i'm not the one who made it that way
[01:21:40] <FromDiscord> <SivadNai> to take a different line in the output, '000000000017F960"\01\07\06\03\02\0"↵invalid integer: 17632`
[01:22:04] <FromDiscord> <Yardanico> In reply to @SivadNai "to take a different": i think it might be an xy problem and you're actually getting your string in a wrong way from somewhere
[01:22:07] <FromDiscord> <Yardanico> how are you getting this string?
[01:22:26] <FromDiscord> <Yardanico> sure you can  "clean" all the non-printable characters, but I think the problem is in the way you get that string
[01:22:29] <arkanoid> FINALLY I got my answer. Thanks yardanico, I've been playing a lot around this today and I couldn't undertand. The manual doesn't say that afaik
[01:23:16] <FromDiscord> <Yardanico> @arkanoid see the original pr https://github.com/nim-lang/Nim/pull/17196
[01:23:26] <FromDiscord> <SivadNai> it's a bat file which calls a powerhshell `Get-CimInstance Win32_Process -Filter "name = 'Code.exe'" | select ProcessId , CommandLine | Format-Table -AutoSize -Wrap > Code.txt`
[01:23:57] <FromDiscord> <Yardanico> very weird, but yeah, you can clean that null byte
[01:24:08] <FromDiscord> <Yardanico> but i really think that you shouldn't be getting a null character here
[01:24:11] <FromDiscord> <SivadNai> so I didn't expect to get some strange format error like that
[01:24:14] <FromDiscord> <Yardanico> and how do you get it in nim ?
[01:24:17] <FromDiscord> <Yardanico> just reading the file?
[01:24:30] <arkanoid> Yardanico: how did you find this pr so fast? I've been using advanced github search for a while looking for something like this
[01:24:42] <FromDiscord> <Yardanico> because iterable[t] has been discussed previously
[01:24:46] <FromDiscord> <Yardanico> multiple times
[01:24:57] <FromDiscord> <Yardanico> about other people being confused why it only works with templates
[01:25:25] <FromDiscord> <SivadNai> yes, just going over `for line in lines "Code.txt":`
[01:25:55] <FromDiscord> <Yardanico> then you can use https://nim-lang.org/docs/strutils.html#strip%2Cstring%2Cset%5Bchar%5D with `chars` set to `{'\0'}`
[01:26:08] <FromDiscord> <Yardanico> but as I said, try to actually find why it's adding a null byte here
[01:26:52] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3HUr
[01:27:19] <FromDiscord> <Michal58> what is the best way to create an array full of some constant (different from zero)?
[01:27:29] <FromDiscord> <Yardanico> https://nim-lang.org/docs/algorithm.html#fill%2CopenArray%5BT%5D%2CT
[01:27:37] <FromDiscord> <SivadNai> thanks, I will try that. I'd already stripped Whitespace
[01:27:44] <FromDiscord> <Yardanico> but it's not "creating" it with some value, but actually filling after creating
[01:27:58] <FromDiscord> <Yardanico> the proc itself just does a simple loop really
[01:29:55] <FromDiscord> <Michal58> thanks
[01:46:23] <FromDiscord> <huantian> In reply to @Yardanico "don't ask me for": Isn't it something something iterables aren't actually first class objecs?
[01:50:43] <arkanoid> huantian, inline iterators are something, closure iterator are something else. Closure iterators are first class afaik
[02:08:34] <FromDiscord> <nwilburn> In reply to @nwilburn "Hello again! I am": Alright just to complete this saga I think I found a bug in lib/pure/net.nim. It doesn't look like newContext was passing CVerifyPeerUseEnvVars to sslScanCertificates, so we were creating an sslContext that wasn't using our supplied `SSL_CERT_DIR` and `SSL_CERT_FILE` certificate locations. ↵↵I submitted a bug and pull request taking a jab at fixing this. <https://github.com/nim-lang/Nim/pu
[03:08:35] <FromDiscord> <evoalg> I figured out four ways to split these lines of text: https://play.nim-lang.org/#ix=3HUH ... the 3rd way might be inefficient, so the 1st or 4th way might be my fav ... but is there a short way that's still readable?
[03:11:52] <FromDiscord> <Elegantbeef> Strscans is nice
[03:11:56] <FromDiscord> <Elegantbeef> Doesnt even require splitting 😀
[03:13:22] <FromDiscord> <evoalg> oh!
[03:13:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3HUN
[03:13:41] <FromDiscord> <evoalg> I keep forgetting about that - thank you!
[03:14:02] <FromDiscord> <Elegantbeef> Alternatively you could do it yourself
[03:17:55] <FromDiscord> <AmjadHD> sent a code paste, see https://paste.rs/Ssl
[03:17:56] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3HUP
[03:18:34] <FromDiscord> <Elegantbeef> I'd imagine it'd move the memory, but i could be wrong
[03:20:47] <FromDiscord> <AmjadHD> In reply to @Elegantbeef "I'd imagine it'd move": Is there a way to check ?
[03:21:25] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3HUQ
[03:21:27] <FromDiscord> <Elegantbeef> Look where the data is
[03:22:09] <FromDiscord> <Elegantbeef> The `doStuff` method shares address which means it moves it fine, but the block method doesnt which means it deep copies the string
[03:25:07] <FromDiscord> <AmjadHD> Thanks, so isn't this an oppotunity for optimaization ?
[03:25:43] <FromDiscord> <AmjadHD> (edit) "optimaization" => "optimization"
[03:28:23] <FromDiscord> <AmjadHD> In reply to @Elegantbeef "The `doStuff` method shares": many templates and macros use a similar code, it would be wasteful to copy the block's returned expression.
[03:30:10] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:35] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:33] <FromDiscord> <Yardanico> it does move the memory @AmjadHD
[03:31:44] <FromDiscord> <Yardanico> if you check the address it's different because that's the seq header
[03:32:04] <FromDiscord> <Yardanico> ah right it only moves memory with arc
[03:32:11] <FromDiscord> <Yardanico> that's expected though, arc/orc is better with optimizations
[03:32:29] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3HUT
[03:32:37] <FromDiscord> <Yardanico> or --gc:orvc
[03:32:38] <FromDiscord> <Yardanico> (edit) "--gc:orvc" => "--gc:orc"
[03:33:57] <FromDiscord> <Yardanico> the only "overhead" is a stack allocation for the seq header, which isn't much
[03:34:24] <FromDiscord> <Elegantbeef> Ah right forgot to check arc/orc
[03:35:10] <FromDiscord> <AmjadHD> sent a code paste, see https://play.nim-lang.org/#ix=3HUV
[03:35:27] <FromDiscord> <Yardanico> yes, it's just an alias for `int`
[03:36:43] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:38:19] <FromDiscord> <AmjadHD> In reply to @Yardanico "or --gc:orc": confirmed, it moves the data with arc/orc and not without it.
[03:38:31] <FromDiscord> <Yardanico> that's to be expected, arc/orc has a lot of optimizations
[03:38:37] <FromDiscord> <Yardanico> it does data flow analysis too
[03:38:51] <FromDiscord> <Yardanico> you might want to give https://nim-lang.org/docs/destructors.html a read
[03:39:57] *** Quits: averell (~averell@user/averell) (Remote host closed the connection)
[03:40:25] <FromDiscord> <AmjadHD> In reply to @Yardanico "you might want to": I read that, it's really interresting 🙂
[03:42:18] <FromDiscord> <DMI-1407> just a silly question
[03:43:09] <FromDiscord> <DMI-1407> if i write `obj.methodName(args)` or `methodName(obj, args)`↵then can i also write `obj.methodName()` instead of `obj.methodName` ?
[03:43:28] <FromDiscord> <Yardanico> yes if methodName has an overload with 1 argument
[03:43:46] <FromDiscord> <DMI-1407> if methodname has 0 args ?
[03:44:02] <FromDiscord> <Yardanico> but then why would you call it with `obj`?
[03:44:15] <FromDiscord> <Yardanico> `obj.methodName()` means `methodName(obj)`
[03:44:25] <FromDiscord> <Sabena Sema> In reply to @DMI-1407 "if methodname has 0": its not much of a method then
[03:44:32] <FromDiscord> <DMI-1407> e.g. i wrote a length() methodto get size of whatever obj stores
[03:44:43] <FromDiscord> <DMI-1407> (edit) "methodto" => "method to"
[03:44:44] <FromDiscord> <Yardanico> yes, but it still needs the `obj` argument, no?
[03:44:44] <FromDiscord> <Sabena Sema> yeah, that would have one arg
[03:44:51] <FromDiscord> <DMI-1407> ah ok
[03:45:11] <FromDiscord> <DMI-1407> but syntax allows me to write `obj.methodName()` <-- brackets
[03:45:15] <FromDiscord> <DMI-1407> ?
[03:45:29] <FromDiscord> <Yardanico> yes, you can use parens, that's the usual way
[03:45:31] <FromDiscord> <Sabena Sema> in nim “methods” are multimethods (and rarely used) and what other langs call methods are just functions with the “self” type as the first argument
[03:45:41] <FromDiscord> <Yardanico> In reply to @Sabena Sema "in nim “methods” are": not quite correct
[03:45:55] <FromDiscord> <Yardanico> Nim has normal methods via `method`, multimethods are deprecated since 0.20 and must be enabled with a compiler flag
[03:46:07] <FromDiscord> <Sabena Sema> oh, things have changed i guess
[03:46:40] <FromDiscord> <DMI-1407> i just try to find a way to differ calls to an attributefrom an obj  vs calling a method from an obj without having to know the obj
[03:46:48] <FromDiscord> <DMI-1407> (edit) "attributefrom" => "attribute from"
[03:46:59] <FromDiscord> <DMI-1407> (in case method has just 1 arg)
[03:47:07] <FromDiscord> <DMI-1407> (edit) "arg)" => "arg (which is the obj))"
[03:47:47] <FromDiscord> <Sabena Sema> where does the vtable go?
[03:47:54] <FromDiscord> <Yardanico> not sure I understand you, but if you want to _differentiate_ between method calls vs dot access, you'll need to use https://nim-lang.github.io/Nim/manual_experimental.html#special-operators-dot-operators quite a lot
[03:48:10] <FromDiscord> <Yardanico> you'll have to override both `.()` and `.`
[03:48:19] <FromDiscord> <Yardanico> so that you can "treat" field access and calls differently
[03:48:31] <FromDiscord> <Sabena Sema> and can i use methods on a normal object if their first parameter is “ref ThatType”
[03:48:37] <FromDiscord> <Yardanico> yes
[03:48:47] <FromDiscord> <Yardanico> In reply to @Sabena Sema "where does the vtable": nim doesn't use vtables
[03:49:06] <FromDiscord> <Sabena Sema> oh, its still table based even for “normal” methods?
[03:49:25] <FromDiscord> <Yardanico> not sure what you mean by "normal" methods, but kind of yes
[03:49:31] <FromDiscord> <Yardanico> I don't know exactly how method dispatch is implemented
[03:49:48] <FromDiscord> <Yardanico> also the implementation of methods is actually much slower for arc/orc but I guess that'll be eventually fixed :D
[03:49:49] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/issues/18612
[03:50:01] <FromDiscord> <Elegantbeef> It's a big elif statement
[03:50:04] <FromDiscord> <Yardanico> as an alternative there's https://github.com/yglukhov/iface for interface-like functionality
[03:50:12] <FromDiscord> <Yardanico> In reply to @Elegantbeef "It's a big elif": not with arc/orc
[03:50:21] <FromDiscord> <Yardanico> ah, right, it still is, but a lil different
[03:51:13] <FromDiscord> <Elegantbeef> It's doing a bunch of `isObj` using the `mtype` information
[03:51:31] <FromDiscord> <Yardanico> yeah, that's with refc so it uses rtti
[03:51:40] <FromDiscord> <Yardanico> but with arc it does string comparisons :)
[03:51:53] <FromDiscord> <Sabena Sema> so can you define new methods in one dll then have code in another call them and get correct dispatch?
[03:52:16] <FromDiscord> <Yardanico> not sure that'll work, never checked
[03:52:48] <FromDiscord> <Yardanico> if i need dynamic dispatch i'll probably use https://github.com/yglukhov/iface instead of nim's `method` :)
[03:54:18] <FromDiscord> <DMI-1407> hm
[03:54:48] <FromDiscord> <Yardanico> @DMI-1407 do you really need dynamic dispatch though? if you don't use inheritance you don't need `method`
[03:54:53] <FromDiscord> <DMI-1407> i mean i have no problem with it as long as i can write `obj.len()` instead of `obj.len` if just 1 arg is passed
[03:55:17] <FromDiscord> <Yardanico> In reply to @DMI-1407 "i mean i have": you can write that, yes, but only if `len` is an actual proc/method and not a field
[03:55:17] <FromDiscord> <DMI-1407> i would like to use every single language feature if possible
[03:55:18] <FromDiscord> <Yardanico> you can't "call" fields
[03:55:21] <FromDiscord> <Yardanico> In reply to @DMI-1407 "i would like to": huh?
[03:55:33] <FromDiscord> <Yardanico> nim is not a language where you should use every single language features :)
[03:55:38] <FromDiscord> <Yardanico> (edit) "features" => "feature"
[03:55:40] <FromDiscord> <DMI-1407> why not ?
[03:55:58] <FromDiscord> <Yardanico> because some are controversial and not always good
[03:56:00] <FromDiscord> <Elegantbeef> Cause every language feature has a purpose
[03:56:07] <FromDiscord> <Yardanico> that too
[03:56:19] <FromDiscord> <Yardanico> just using every feature because it's possible is not a good idea
[03:56:22] <FromDiscord> <Yardanico> just use what you actually need
[03:56:29] <FromDiscord> <DMI-1407> yeah ofc
[03:56:45] <FromDiscord> <DMI-1407> btw
[03:56:46] <FromDiscord> <Elegantbeef> Anyway `obj.len` is just syntax sugar for `len(obj)` assuming `len` is a proc
[03:57:02] <FromDiscord> <DMI-1407> is it possible to pass functions as arguments then execute them inside another function ?
[03:57:07] <FromDiscord> <Yardanico> yes
[03:57:34] <FromDiscord> <Elegantbeef> `proc doThing(p: proc()) = p()`
[03:57:36] <FromDiscord> <Yardanico> all proc/func in nim are first class
[03:57:45] <FromDiscord> <Yardanico> so you can pass them around, assign to variables, etc
[03:58:19] <FromDiscord> <DMI-1407> ok
[04:04:20] <arkanoid> do you know if it is possible to start a zero_functional chain from an iterator?
[04:14:51] <FromDiscord> <DMI-1407> sent a code paste, see https://play.nim-lang.org/#ix=3HVc
[04:15:27] <FromDiscord> <DMI-1407> (edit) "https://play.nim-lang.org/#ix=3HVc" => "https://play.nim-lang.org/#ix=3HVd"
[04:15:32] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3HVe
[04:15:37] <FromDiscord> <Yardanico> routines are not really "tied" to object types
[04:15:52] <FromDiscord> <DMI-1407> ah hm
[04:17:20] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[04:18:31] <FromDiscord> <AmjadHD> I want to use clang as backend compiler (on windows) but when I do so it creates `.ilk` and `.pdb` files which are large, I believe it's related to incremental compilation. Does clang doing IC brings benefit ? and if not how do I disable it ? Thanks.
[04:19:10] <FromDiscord> <AmjadHD> (edit) 04removed "doing" | "brings" => "bring"
[04:22:15] <FromDiscord> <Yardanico> In reply to @AmjadHD "I want to use": .pdb is not related to IC, it's debug information
[04:22:23] <FromDiscord> <Yardanico> .ilk is for incremental linking, yes, but it's not specific to clang on windows
[04:22:30] <FromDiscord> <Yardanico> https://docs.microsoft.com/en-us/cpp/build/reference/dot-ilk-files-as-linker-input?view=msvc-170
[04:23:01] <FromDiscord> <AmjadHD> it's only generated when I use clang.
[04:23:45] <FromDiscord> <Yardanico> msvc also does the same, but mingw doesn't, yeah
[04:24:17] <FromDiscord> <AmjadHD> I tries vcc, it doesn't.
[04:24:27] <FromDiscord> <Yardanico> well it does with a flag :)
[04:24:34] <FromDiscord> <Yardanico> In reply to @Yardanico "https://docs.microsoft.com/en-us/cpp/build/referenc": did you check this
[04:24:42] <FromDiscord> <Yardanico> https://docs.microsoft.com/en-us/cpp/build/reference/incremental-link-incrementally?view=msvc-170
[04:25:05] <FromDiscord> <Sabena Sema> note that the C (or other backend) IC is completely unrelated to nim's IC
[04:26:51] <FromDiscord> <AmjadHD> In reply to @Sabena Sema "note that the C": yeah, I know, I'm asking whether it brings any speed in compiling the generated c code ?
[04:27:05] <FromDiscord> <Sabena Sema> maybe a little, it depends
[04:27:26] <FromDiscord> <Sabena Sema> I suspect nim tends to output object files that are easier for the linker to deal with that C++
[04:27:29] <FromDiscord> <Sabena Sema> (edit) "that" => "than"
[04:27:43] <FromDiscord> <Sabena Sema> it's designed to make linking faster, not compiling
[04:27:57] <FromDiscord> <AmjadHD> Okay, how do I disable it ?
[04:28:47] <FromDiscord> <Sabena Sema> `--passl:"/INCREMENTAL:NO"` probably
[04:29:18] <FromDiscord> <AmjadHD> In reply to @Sabena Sema "`--passl:"/INCREMENTAL:NO"` probably": to clang ?
[04:29:53] <FromDiscord> <Sabena Sema> clang probably uses link.exe on windows by default, so yes
[04:30:07] <FromDiscord> <Sabena Sema> are you using clang or clang-cl
[04:30:18] <FromDiscord> <AmjadHD> In reply to @Sabena Sema "are you using clang": clang.
[04:30:28] <FromDiscord> <Sabena Sema> clang may use ld
[04:30:38] <FromDiscord> <Sabena Sema> I'm surprised it outputs ilk files to be honest
[04:31:40] <FromDiscord> <AmjadHD> In reply to @Sabena Sema "I'm surprised it outputs": yeah and msvc doesn't.
[04:32:07] <FromDiscord> <Sabena Sema> there are some things that will cause msvc not to emit them
[04:32:32] <FromDiscord> <Sabena Sema> which I can no longer look up because msdn is throwing OSCP errors grrrr
[04:33:22] <FromDiscord> <creikey> https://marketplace.visualstudio.com/items?itemName=kosz78.nim&ssr=false#overview is there a way to make this extension recognize nimble packages
[04:33:36] <FromDiscord> <Sabena Sema> huh?
[04:33:38] <FromDiscord> <Sabena Sema> it should do
[04:33:50] <FromDiscord> <Sabena Sema> as long as you install them
[04:34:02] <FromDiscord> <creikey> huh it works now
[04:34:08] <FromDiscord> <creikey> wasn't working yesterday even after restarting
[04:34:30] <FromDiscord> <creikey> side note how does `import` find which file to use I've been trying to find a manual or something that explains it but can't
[04:34:52] <FromDiscord> <creikey> is there something like the PATH environment variable for which folders to look in
[04:37:39] <FromDiscord> <Elegantbeef> Somewhere a `--nimblePath` is set which lets you import files as packages, but it does `local` -\> `system` -\> `pkg` afaik
[04:37:53] <FromDiscord> <Elegantbeef> It might be in your `nim.cfg` or similar
[04:38:05] <FromDiscord> <creikey> found it `nim dump` tells you
[04:38:20] <FromDiscord> <creikey> In reply to @Elegantbeef "Somewhere a `--nimblePath` is": so nimble is something supported by the compiler it's not like its own thing
[04:38:33] <FromDiscord> <Elegantbeef> It's its own thing
[04:38:41] <FromDiscord> <Elegantbeef> `nimblePath` is just `libraryPath` really
[04:38:51] <FromDiscord> <creikey> I see
[04:39:14] <FromDiscord> <Elegantbeef> Like when you do `nimble build` it will clear the nimble path then pass only the packages specified in your nimble file
[04:39:33] <FromDiscord> <Elegantbeef> This makes it easier to have reproducible builds
[04:39:47] <FromDiscord> <creikey> nimble calls nim with paths only to the libraries specified in the .nimble file?
[04:39:58] <FromDiscord> <Elegantbeef> Yes
[04:40:15] <FromDiscord> <creikey> which files in srcDir does it compile?
[04:40:16] <FromDiscord> <Elegantbeef> So if you use a package not listed in the nimble file it'll error
[04:40:32] <FromDiscord> <creikey> In reply to @creikey "which files in srcDir": it's the file with the same name as the package right
[04:40:40] <FromDiscord> <Elegantbeef> Depends what you have setup but it looks for the file with the same name as the package
[04:40:41] <FromDiscord> <creikey> In reply to @Elegantbeef "So if you use": huh interesting
[04:40:50] <FromDiscord> <Elegantbeef> You can have multiple binaries
[04:41:03] <FromDiscord> <creikey> it's the bin = @[] just saw it
[04:41:24] <FromDiscord> <creikey> thanks for the help
[04:42:03] <FromDiscord> <Elegantbeef> No problem
[04:59:16] *** Quits: src (~src@user/src) (Quit: Leaving)
[05:02:44] <arkanoid> how can I create a seq of cstrings with size 10 chars each?
[05:03:00] <arkanoid> let's say 100 cstrings of len 10
[05:24:33] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3HVl
[05:26:13] <FromDiscord> <Elegantbeef> Well little late arkanoid but that should do you
[05:27:44] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:29:51] <arkanoid> Elegantbeef, wait, what's create, and what's the memory layout here. Damn, I'm confused now. But thanks
[05:29:56] <arkanoid> I can explore this example
[05:30:07] <FromDiscord> <Elegantbeef> create is just sugar to allocate
[05:30:23] <FromDiscord> <Elegantbeef> the memory layout is each cstring is allocated independantly
[05:31:35] <arkanoid> ok, so there's no difference from string and cstring in seq memory layout for strings
[05:31:46] <arkanoid> I was expecting something contiguous for cstrings
[05:31:54] <FromDiscord> <Elegantbeef> Well you said a seq
[05:32:30] <arkanoid> well a seq of 1000 int8 is a contiguous buffer of 8k bytes
[05:32:30] <FromDiscord> <Elegantbeef> You can have them contiguous if you want it's totally up to you
[05:32:48] <FromDiscord> <Elegantbeef> Sure but cstrings are pointers to a character
[05:33:07] <FromDiscord> <Elegantbeef> So you could have the same memory layout on the heap and just have the cstrings point to each 12 element
[05:33:27] <arkanoid> to have a sequential one? do I need seq[array[10,char]]?
[05:34:17] <FromDiscord> <Rika> Pretty much
[05:34:27] <arkanoid> thanks
[05:38:53] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Read error: Connection reset by peer)
[05:39:41] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:43:49] <arkanoid> mmm interesting, repeat(['f','o','o','b','a','r'], 100) allocates 608 bytes on the heap
[05:44:08] <arkanoid> I was expecting 8x6x1000
[05:44:15] <arkanoid> *8x6x100
[05:46:33] <arkanoid> well, also on website https://play.nim-lang.org/#ix=3HVq
[05:47:44] <FromDiscord> <Rika> repeat makes a seq of 100 ptrs to array
[05:47:58] <FromDiscord> <Rika> hm
[05:48:22] <arkanoid> my fault, I mixed bit with bytes
[05:48:48] <arkanoid> 1 chat is 8 bit, it's 1x6x100 = 600, +8 for seq len
[05:48:55] <FromDiscord> <leorize> the header of seq takes space, too
[05:48:56] <FromDiscord> <Rika> its still 200ish bytes short innit
[05:49:21] <FromDiscord> <Rika> or did i get the ptr size wrong
[05:49:24] <FromDiscord> <Rika> oh wait
[05:49:27] <FromDiscord> <Rika> no ptr since its array
[05:49:30] <arkanoid> Rika is an array, no ptr
[05:49:33] <arkanoid> exactly
[05:49:57] <FromDiscord> <Rika> i woke up under an hour ago
[05:49:59] <FromDiscord> <Rika> lol
[06:00:42] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:08:34] *** Joins: pch (~pch@66.49.131.33)
[06:09:27] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3HVx
[06:10:01] <FromDiscord> <Rika> no
[06:10:19] <FromDiscord> <Rika> actually "kinda"
[06:11:15] <FromDiscord> <that_dude> Could you elaborate please?
[06:11:55] <FromDiscord> <Rika> kinda because you can prolly use closure procedures to do this BUT it (if im right) isnt what youre looking for
[06:15:05] <FromDiscord> <Elegantbeef> Well this could be done with a macro + template but yea no can do with a proc
[06:15:28] <FromDiscord> <that_dude> From what I can see closures are close, but not quite right. I was looking something slightly more independent.
[06:15:35] <FromDiscord> <that_dude> What do you mean Elegant?
[06:15:40] <FromDiscord> <Rika> beef about to unleash hell
[06:15:59] <FromDiscord> <Elegantbeef> Like rika said
[06:16:04] <FromDiscord> <Elegantbeef> Time to go balls to the wall
[06:16:09] <FromDiscord> <that_dude> I actually was looking into macro stuff recently so this could play well with that
[06:16:11] <FromDiscord> <Rika> call would be a macro which expands to code that "analyses the outer scope then passes them into the inner proc"
[06:16:19] <FromDiscord> <Rika> but please dont do this
[06:16:21] <FromDiscord> <Elegantbeef> Nope
[06:16:25] <FromDiscord> <that_dude> >:)
[06:16:32] <FromDiscord> <that_dude> That sounds like what I need tho
[06:16:43] <FromDiscord> <that_dude> Why is that bad?
[06:17:01] <FromDiscord> <Rika> because id say its unneccesary
[06:17:12] <FromDiscord> <Rika> what reason do you have for emulating globals like this
[06:18:25] <FromDiscord> <that_dude> Well
[06:22:52] <FromDiscord> <that_dude> sent a long message, see http://ix.io/3HVy
[06:23:47] <FromDiscord> <Elegantbeef> You can wrap module functions
[06:23:49] <FromDiscord> <Rika> you can actually abuse generics
[06:23:52] <FromDiscord> <Elegantbeef> Though it's in a roundabout way
[06:23:56] <FromDiscord> <Rika> to do specificity overrides
[06:25:09] <FromDiscord> <that_dude> The thing is that I need to be able to wrap an internal library proc from my main file without causing the library to notice any differences. Is that still possible?
[06:25:27] <FromDiscord> <Elegantbeef> You cannot replace logic in a lower module
[06:25:33] <FromDiscord> <that_dude> Ah
[06:25:34] <FromDiscord> <Elegantbeef> That makes 0 sense
[06:25:44] <FromDiscord> <Elegantbeef> You could patch file or make your own fork
[06:25:59] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3HVz
[06:26:16] <FromDiscord> <Rika> In reply to @that_dude "The thing is that": what?
[06:28:41] <FromDiscord> <that_dude> https://forum.nim-lang.org/t/8652 was the example I gave when asking about it. I designed my code with some specific abstractions and rules, but merging the files undoes all of the design I did and reverts it to a previous form
[06:28:58] <FromDiscord> <Elegantbeef> I remember the post
[06:29:01] <FromDiscord> <Elegantbeef> It's a silly question
[06:29:05] <FromDiscord> <that_dude> :|
[06:29:19] <FromDiscord> <that_dude> It was just a specific thing I wanted to do
[06:29:19] <FromDiscord> <Elegantbeef> You want a proc to run but with your own logic appended
[06:29:35] <FromDiscord> <that_dude> Yeah that's one way to describe it
[06:29:35] <FromDiscord> <Elegantbeef> So you either need to make a new proc that has that
[06:29:41] <FromDiscord> <Rika> its usually called monkeypatching and its a valid idea
[06:29:45] <FromDiscord> <Elegantbeef> Or modify the source
[06:29:48] <FromDiscord> <Rika> but usually people just modify
[06:29:49] <FromDiscord> <Rika> yeah
[06:30:00] <FromDiscord> <Rika> nim isnt actor based sadly for you
[06:30:41] <FromDiscord> <that_dude> I've been trying to move away from just messing with the source because that makes it harder for me to maintain for other projects that work differently
[06:30:54] <FromDiscord> <that_dude> Ig I just want a 1 size fits all type of lib
[06:30:54] <FromDiscord> <Elegantbeef> Then shadow the function with your own
[06:31:26] <FromDiscord> <Rika> you cannot avoid modifying the source
[06:31:30] <FromDiscord> <Rika> in one way or another
[06:31:34] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3HVC
[06:31:45] <FromDiscord> <that_dude> Can you elaborate? And would that play nicely if my lib is the one to call the proc
[06:31:49] <FromDiscord> <that_dude> hmm
[06:31:58] <FromDiscord> <Elegantbeef> That code would be defined in `main.nim`
[06:32:21] <FromDiscord> <Rika> all other lib fn calls would need to be qualified
[06:32:32] <FromDiscord> <Elegantbeef> The simple fact is that you cannot modify procs that you arent declaring, so you need to reroute the logic, modify the source or copy the proc logic into your own proc using a macro
[06:33:16] <FromDiscord> <Elegantbeef> The last is doable but relatively complex
[06:33:22] *** Joins: rockcavera (~rc@192.12.112.194)
[06:33:22] *** Quits: rockcavera (~rc@192.12.112.194) (Changing host)
[06:33:22] *** Joins: rockcavera (~rc@user/rockcavera)
[06:34:06] <FromDiscord> <that_dude> Which is why I was going to use macros to create an injection table, I just didn't want to use pure globals to do so
[06:34:30] <FromDiscord> <Rika> araq said `it looked like you were complexifying things for complexity's sake`
[06:34:33] <FromDiscord> <that_dude> Because one of the design choices I made was to move away from globals for better threading support
[06:34:36] <FromDiscord> <Rika> and it really does truly seem like it is
[06:34:41] <FromDiscord> <that_dude> Kinda
[06:34:57] <FromDiscord> <Rika> simulating globals will not help you with threading
[06:34:57] <FromDiscord> <Elegantbeef> I mean you can just make the procedure a generic that takes procs/void
[06:35:15] <FromDiscord> <that_dude> I have a few constraints, and I'm trying to work around them in a manner I find to be cleaner
[06:35:25] <FromDiscord> <Rika> and this will not be clean
[06:35:44] <FromDiscord> <that_dude> I think the end result would be if I do it right
[06:35:56] <FromDiscord> <Rika> the macro will have a lot of maintenance cost in terms of time and thought
[06:36:39] <FromDiscord> <that_dude> I guess I haven't worked enough with macros to find that out, but the design I thought about and from what I've seen would be pretty clean I think
[06:38:12] <FromDiscord> <that_dude> Which brings me back to my (current) original question, Is there a way to make pseudo globals? I'm ok trying to figure it out if it requires macros
[06:38:14] <FromDiscord> <Rika> there isnt much that you can do without editing the source, the only choice boils down to "create a wrapper proc", either by macro or by hand
[06:38:52] <FromDiscord> <Elegantbeef> You might be able to make pseudo globals with  macrocache, but it's a really odd thing
[06:39:04] <FromDiscord> <that_dude> I guess the reason it has to be a macro is because the wrapper won't always apply
[06:39:06] <FromDiscord> <Elegantbeef> There is no way for them to be accessible from all modules unless declared first
[06:39:24] <FromDiscord> <Elegantbeef> Modifying source is really the most sane choice
[06:39:37] <FromDiscord> <that_dude> I'll look into that, I think that's fine.
[06:40:21] <FromDiscord> <Rika> well i at least hope you arent releasing this library or whatever youre making for public use
[06:40:43] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3HVF
[06:41:08] <FromDiscord> <Rika> else: discard not needed is it
[06:41:18] <FromDiscord> <Elegantbeef> Nope
[06:41:25] <FromDiscord> <Elegantbeef> Too use to expressions
[06:41:39] <FromDiscord> <Rika> lol thats ok
[06:42:49] <FromDiscord> <that_dude> In reply to @Rika "well i at least": I'll release it just to spite you >:D
[06:43:12] <FromDiscord> <Rika> releasing it is fine, i did say for public use
[06:43:51] <FromDiscord> <Elegantbeef> I mean i'd be interested in seeing the API cause i'm super confused how this is desired
[06:44:06] <FromDiscord> <that_dude> Yeah sorry I'm bad at conveying things
[07:30:58] *** Joins: lumo_e (~enrico@151.29.48.90)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:45] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[07:52:33] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 252 seconds)
[07:53:52] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[07:54:54] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:22:55] <NimEventer> New thread by Archnim: Nim to lib, see https://forum.nim-lang.org/t/8707
[09:05:49] *** Joins: pch (~pch@66.49.131.33)
[09:12:00] <FromDiscord> <planetis> I sound like a broken record but here we go... Does anyone know how to traverse a function chain using a macro and re-write it in nested style?
[09:12:41] <FromDiscord> <Elegantbeef> You mean inline it?
[09:12:56] <FromDiscord> <impbox [ftsf]> what's a function chain?
[09:14:55] <FromDiscord> <planetis> it's the syntax, suppose you have `x.foo().bar().baz` need to transform it into `baz(bar(foo(x)))` and also insert arguments
[09:15:50] <FromDiscord> <planetis> sounds fun, right?
[09:15:51] <FromDiscord> <impbox [ftsf]> are they not the same in nim?
[09:15:59] <FromDiscord> <Rika> They are aren’t they
[09:16:07] <FromDiscord> <Rika> Not in syntax I guess
[09:16:13] <FromDiscord> <Rika> What’s the use case
[09:17:13] <FromDiscord> <planetis> the problem is, I am trying to imitate method chaining syntax, like the `with` macro
[09:17:38] <FromDiscord> <impbox [ftsf]> @planetis if you do dumpTree on both and compare them, it shouldn't be too hard
[09:18:06] <FromDiscord> <planetis> lol famous last words
[09:18:35] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3I1H
[09:18:46] <FromDiscord> <impbox [ftsf]> you iterate through the first one and generate the second one
[09:19:21] <FromDiscord> <planetis> yeah sure but I need to come up a recursive helper proc
[09:19:45] <FromDiscord> <impbox [ftsf]> i believe in you!
[09:20:15] <FromDiscord> <planetis> alright! I'm on to it
[09:23:01] <FromDiscord> <Rika> Dot expression index one goes to call index 0, index 0 goes to index 0, unwrap, traverse into.
[09:23:18] <FromDiscord> <Rika> That’s the basic algorithm in a very terse and hard to understand sentence
[09:23:55] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[09:25:16] <FromDiscord> <valerga> why is this failing in 1.4.8 ?  https://play.nim-lang.org/#ix=3I2f
[09:25:45] <FromDiscord> <planetis> makes sense thank you↵(@Rika)
[09:26:17] <FromDiscord> <impbox [ftsf]> @valerga you need to define the hash function for Point
[09:26:21] <FromDiscord> <Rika> In reply to @valerga "why is this failing": Probably no generic hash function
[09:27:06] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/tables.html#basic-usage-hashing
[09:33:55] <FromDiscord> <valerga> i don't understand what's going on here
[09:33:57] <FromDiscord> <valerga> sent a code paste, see https://play.nim-lang.org/#ix=3I30
[09:35:07] <FromDiscord> <valerga> like what is `!&`
[09:35:44] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/hashes.html#%21%24%2CHash
[09:35:57] <FromDiscord> <impbox [ftsf]> oops, the entry below it
[09:39:15] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 252 seconds)
[09:50:31] <FromDiscord> <valerga> I see, thanks
[10:10:11] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[10:11:53] *** Joins: pch (~pch@66.49.131.33)
[10:28:54] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[10:33:27] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[10:33:48] <FromDiscord> <evoalg> How would I sort by more than one field? ... like sort by x[1] then by x[0] ?
[10:34:09] <FromDiscord> <Rika> Use a stable sort and sort twice
[10:34:13] <FromDiscord> <leorize> you can run the sort twice
[10:34:20] <FromDiscord> <evoalg> oh ok
[10:34:41] <FromDiscord> <impbox [ftsf]> sounds like you want sorted by x[1] and then if x[1] is the same sort by x[0] ?
[10:34:53] <FromDiscord> <evoalg> that's right!
[10:35:02] <FromDiscord> <Rika> Yeah sort twice
[10:35:12] <FromDiscord> <Rika> Sort by 0 first then 1
[10:35:19] <FromDiscord> <evoalg> the 2nd sort would stuff up the first sort?
[10:35:37] <FromDiscord> <Rika> It is stable aka the order will be preserved if they are the “same” to the sort
[10:35:46] <FromDiscord> <impbox [ftsf]> or something
[10:35:50] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3I6r
[10:36:42] <FromDiscord> <evoalg> Thank you!
[10:37:05] <FromDiscord> <impbox [ftsf]> i always get the comparison directions wrong so make sure it's the correct direction =)
[10:37:14] <FromDiscord> <impbox [ftsf]> might want b - a
[10:37:14] <FromDiscord> <evoalg> righty
[10:37:19] <FromDiscord> <impbox [ftsf]> i forget
[10:37:20] <FromDiscord> <leorize> I'm pretty sure you should use `cmp()` \:p
[10:37:23] <FromDiscord> <impbox [ftsf]> or that
[10:37:41] <FromDiscord> <impbox [ftsf]> cmp would be much nicer
[10:37:47] <FromDiscord> <impbox [ftsf]> but i've never used it, though i should
[10:38:03] <FromDiscord> <evoalg> hehe 😉
[10:38:44] *** Joins: pch (~pch@66.49.131.33)
[10:38:46] <FromDiscord> <leorize> nim's sort is stable, though, so you can sort twice if that's easier \:p
[10:39:54] <FromDiscord> <evoalg> hmmmm I'll have a play around
[10:41:01] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3I6t
[10:42:18] <FromDiscord> <evoalg> In reply to @impbox "https://play.nim-lang.org/#ix=3I6t": perfect - thank you!
[10:44:11] *** Quits: pch (~pch@66.49.131.33) (Quit: Leaving)
[10:47:05] *** Joins: PMunch (~PMunch@user/pmunch)
[11:15:08] <Amun-Ra> evoalg: or provide your own '<' and '==' procs
[11:22:47] <FromDiscord> <valerga> sent a code paste, see https://play.nim-lang.org/#ix=3I6v
[11:22:48] <FromDiscord> <valerga> what's a better way to do this?
[11:23:21] <PMunch> You can always do `max_x = max(max_x, p.x)`
[11:23:29] <PMunch> Instead of those ifs
[11:23:47] <PMunch> Or you can use foldl
[11:24:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3I6w
[11:25:19] <FromDiscord> <impbox [ftsf]> you should probably initialise it to -Inf if they're floats
[11:27:07] <PMunch> Something like this works: https://play.nim-lang.org/#ix=3I6x
[11:27:38] <PMunch> Of course you could define a `max` proc that takes a x/y-tuple as well, just to make the code a bit tidier
[11:28:46] <PMunch> Like this: https://play.nim-lang.org/#ix=3I6y
[11:33:10] <FromDiscord> <valerga> what if I want the extract x or y? https://play.nim-lang.org/#ix=3I6C
[11:36:01] *** Joins: tiorock (~rc@192.12.112.198)
[11:36:01] *** Quits: tiorock (~rc@192.12.112.198) (Changing host)
[11:36:01] *** Joins: tiorock (~rc@user/rockcavera)
[11:36:01] *** rockcavera is now known as Guest8742
[11:36:01] *** Quits: Guest8742 (~rc@user/rockcavera) (Killed (tungsten.libera.chat (Nickname regained by services)))
[11:36:01] *** tiorock is now known as rockcavera
[11:37:15] <FromDiscord> <leorize> provide a reference to fold into\: https://play.nim-lang.org/#ix=3I6D
[11:37:54] <FromDiscord> <leorize> it's a bit weird that the "first" parameter is at the end for that template, though
[11:39:20] <FromDiscord> <Solitude> In reply to @valerga "what's a better way": this is the best way.
[11:40:47] <FromDiscord> <Solitude> reducing line count or adding sugar doesnt mean making it better
[11:41:35] <FromDiscord> <impbox [ftsf]> if it's a common thing you do, eg. generating upper,lower bounds it makes sense to make a proc or template
[11:41:36] <FromDiscord> <valerga> yeah i can see that. Though that procedure seems frequent enough to maybe warrant some function in the std I think
[11:42:37] <FromDiscord> <valerga> I use these when generating 2d boards
[11:42:46] <FromDiscord> <valerga> so x and y
[11:43:21] <FromDiscord> <valerga> but yeah I can just make my own proc
[12:11:41] <PMunch> @Solitude, depends on what you want. More readable code? Harder to produce bugs?
[12:26:13] *** Joins: jjido (~Denis@90.213.58.125)
[12:31:43] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:03:49] *** Joins: tiorock (~rc@192.12.112.198)
[13:03:50] *** Quits: tiorock (~rc@192.12.112.198) (Changing host)
[13:03:50] *** Joins: tiorock (~rc@user/rockcavera)
[13:03:50] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (strontium.libera.chat (Nickname regained by services)))
[13:03:50] *** tiorock is now known as rockcavera
[13:33:31] <FromDiscord> <enthus1ast> what is the correct syntax in a nimble require line to install from an url with version? Im going nuts, really
[13:33:49] <FromDiscord> <enthus1ast> wasted half an hour on this o.0
[13:34:14] <FromDiscord> <Rika> Depends on what the URL is
[13:34:31] <FromDiscord> <enthus1ast> that is the issue, it should not depend↵(@Rika)
[13:34:40] <FromDiscord> <Rika> But it does
[13:34:45] <FromDiscord> <enthus1ast> it should have the same syntax as if i run nimble by hand
[13:34:52] <FromDiscord> <Rika> And it does afaik
[13:34:53] <FromDiscord> <enthus1ast> sorry im loaded @Rika
[13:35:10] <FromDiscord> <enthus1ast> nope it does not
[13:38:34] <PMunch> @Elegantbeef, you mean like: https://play.nim-lang.org/#ix=3I6y
[13:39:05] <PMunch> @enthus1ast, you mean like: requires "https://github.com/PMunch/nim-dbus#loopfix"
[13:39:17] <PMunch> Not sure how I managed to mess up that bad, wrong person, and wrong paste :P
[13:39:44] <FromDiscord> <Elegantbeef> It's a skill
[13:40:00] <FromDiscord> <enthus1ast> ok this worked\:↵↵requires "https://github.com/enthus1ast/myPkg.git == 7.0.4"
[13:40:02] <FromDiscord> <enthus1ast> yes
[13:40:26] <FromDiscord> <Elegantbeef> pmunc that PR still exists 😛
[13:42:46] <PMunch> Which PR?
[13:42:59] <FromDiscord> <Elegantbeef> For protobuf that fixes empty messages
[13:43:19] <PMunch> Yeah I know, haven't had time to look at it yet
[13:43:41] <FromDiscord> <Elegantbeef> But you have time to wrongly ping me?! 😛
[13:43:56] <PMunch> Typing your name is faster than review your PR
[13:44:17] <FromDiscord> <Elegantbeef> Not really "sod off" is fewer letters than "Elegant beef"
[13:44:30] <PMunch> Otherwise I'd either be the worlds fastest code reviewer or the worst ever typist :P
[13:45:19] <FromDiscord> <Rika> Isn't beef already at worst ever typist
[13:45:55] <FromDiscord> <Elegantbeef> Programmer\
[13:54:40] <madprops> this PR never got merged ;[ https://github.com/PMunch/nim-playground-frontend/pull/28
[13:55:37] <madprops> but I understand if it's just bad, i can close it
[13:55:50] <madprops> the toggable options might not be a great idea
[13:56:30] <madprops> but it seems to display nice on mobile
[14:05:11] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3I7j
[14:05:47] <FromDiscord> <Michal58> (edit) "https://play.nim-lang.org/#ix=3I7j" => "https://play.nim-lang.org/#ix=3I7k"
[14:06:13] <FromDiscord> <Michal58> (edit) "https://play.nim-lang.org/#ix=3I7k" => "https://play.nim-lang.org/#ix=3I7l"
[14:07:59] <FromDiscord> <valerga> `Error: undeclared identifier: 'x'`
[14:08:30] <FromDiscord> <Solitude> cringe
[14:09:42] <FromDiscord> <valerga> `var max_x = points.mapIt(it.x).max`
[14:09:47] <FromDiscord> <valerga> this works though
[14:19:38] *** Joins: Guest56 (~Guest56@188.166.241.203)
[14:21:47] *** Quits: Guest56 (~Guest56@188.166.241.203) (Client Quit)
[15:00:23] <PMunch> @madprops, hmm I remember testing that
[15:00:46] <PMunch> First off that `Options` toggle definitely needs to be more obvious
[15:00:48] <NimEventer> New Nimble package! asyncredis - Pure Nim asyncronous driver for Redis DB, see https://github.com/Q-Master/redis.nim
[15:00:58] <PMunch> Right now it doesn't look like it's even clickable
[15:08:01] <madprops> maybe an underline?
[15:09:38] *** Joins: src (~src@user/src)
[15:10:50] <PMunch> Not sure if that is enough..
[15:12:57] <madprops> "Click Here For Options" but that takes too much space
[15:13:29] <madprops> but the idea is that being able to hide the options gives more room to the editor
[15:15:42] <madprops> and that it can fit nicely on mobile
[15:18:11] <PMunch> Maybe add a hamburger menu icon?
[15:18:38] <PMunch> Or some other iconography that is commonly used for options and clickable links
[15:18:55] <madprops> ah good idea
[15:19:12] <PMunch> Maybe the Code on GitHub link should also be shown under options, and allow the entire top-right corner to be the options toggle?
[15:19:42] <madprops> doesn't fit on mobile
[15:19:53] *** Joins: lumo_e (~enrico@151.29.48.90)
[15:20:24] <madprops> is the link necessary though?
[15:20:53] <madprops> well it could fit if it uses only an icon
[15:20:53] <PMunch> Well it's nice to show people where they can help out :)
[15:21:14] <PMunch> And there was an issue where people would create issues and PRs in the old repo
[15:32:53] <FromDiscord> <planetis> so what do you guys think is a better syntax, between these two\: `with(x, get(JsonNode 9, 1).getInt())` or `%.get(x, JsonNode 9, 1).getInt() == 5` ?
[15:33:47] <FromDiscord> <Rika> neither look good
[15:34:01] <FromDiscord> <Rika> i dont understand what either do at a glance
[15:34:08] <PMunch> Same
[15:34:55] <FromDiscord> <Rika> with x get? why not just x.get?
[15:35:00] <FromDiscord> <Rika> 9, 1???
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:47] <FromDiscord> <planetis> first int is an jsonnode index, second is array index
[15:37:07] <FromDiscord> <planetis> yea the api sucks https://github.com/planetis-m/packedjson2/issues/2
[15:37:34] <FromDiscord> <planetis> that's the best i could come up with
[15:38:47] <FromDiscord> <planetis> i though it might be a little easier programming it and more consistent↵(@Rika)
[15:40:09] <FromDiscord> <planetis> problem with that lib is, we use a JsonTree that stores the nodes in a sequence and index them with a "JsonNode" type
[15:41:57] <FromDiscord> <Rika> this really isnt an intuitive api, i would like to try helping; what limitations are there
[15:41:58] <FromDiscord> <Solitude> oh, yeah, its like that . o (wtf)
[15:43:21] <FromDiscord> <planetis> I took the %. macro idea from std/wrapnils
[15:44:23] <FromDiscord> <planetis> I would have gone with https://github.com/planetis-m/jsonecs/issues/8#issuecomment-921746326 but it does have a performance penalty
[15:44:38] <FromDiscord> <planetis> and people complain that std/json is slow
[15:49:29] <FromDiscord> <planetis> I might just do another macro, get(int, tree, jroot, "key", 1, "a") and avoid all this mess
[16:25:55] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[16:32:11] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Read error: Connection reset by peer)
[16:41:51] <madprops> PMunch, sent PR mod
[17:28:20] <FromDiscord> <Michal58> In reply to @valerga "this works though": I mean it depends on the context
[17:33:15] *** Joins: Colt (~Colt@user/colt)
[17:36:01] *** Joins: jjido (~Denis@90.213.58.125)
[17:54:38] *** Joins: arkurious (~arkurious@user/arkurious)
[18:08:22] <FromDiscord> <planetis> any better? https://github.com/planetis-m/packedjson2/issues/6
[18:15:42] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:34:58] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:44:54] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[18:47:25] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 252 seconds)
[19:04:37] <FromDiscord> <planetis> i wish fusion/matching could possibly work with this, I dont want to implement that stuff, its super hard
[19:08:58] <FromDiscord> <Disciple> Is there any way to ensure procs return the value they have defined explicitly? Example: https://play.nim-lang.org/#ix=3I94
[19:11:06] <nrds> <06Prestige99> Should probably just use `result` in that case
[19:11:46] <nrds> <06Prestige99> Do you want to get warnings about unused variables?
[19:12:45] <FromDiscord> <reilly> Is there a convenient way of doing essentially the same thing as `toSeq(a..b)` except that works as expected when `a > b`? (i.e. `foo(8, 3) == @[8, 7, 6, 5, 4, 3]`)
[19:13:14] <FromDiscord> <reilly> It has to work when `a > b` and when `a < b`.
[19:14:28] <nrds> <06Prestige99> Related: https://forum.nim-lang.org/t/8689
[19:16:26] <FromDiscord> <Disciple> Prestige: my concern is just forgetting a return statement and getting default 0 values when I'm expecting actual values. Seems like it would lead to hard-to-debug issues
[19:16:27] <FromDiscord> <reilly> Go figure, I even remember reading this at some point...
[19:18:14] <nrds> <06Prestige99> Getting warnings about unused variables would probably be helpful in that case, though I don't know if we have editor support for that
[19:19:01] <nrds> <06Prestige99> Getting in the habit of using result might be a good idea though; I can't think of a time I've forgotten to return a value from a function
[19:19:57] <FromDiscord> <Rika> @Disciple use implicit returns
[19:20:04] <FromDiscord> <Rika> always
[19:20:41] <FromDiscord> <Rika> `proc a: int = if <some condition>: 0 else: 1` or so
[19:21:39] <FromDiscord> <Rika> `proc b: bool = var flag: bool; for ...: <work>; flag` or so
[19:21:50] <FromDiscord> <Rika> notably the last "statement" is actually an expression
[19:21:54] <FromDiscord> <Rika> pretty much is what they are
[19:24:29] <FromDiscord> <Disciple> What if you refactor and one of the implicit returns is removed and you don't notice? For example if I define a function that takes two arguments and one is missing I get a compiler error. I want to get one when I define a return for a proc yet forget to return anything instead of getting a default value
[19:24:48] <FromDiscord> <Rika> not a thing yet
[19:24:54] <FromDiscord> <Rika> afaik
[19:25:53] <FromDiscord> <Disciple> Ah darn
[19:26:29] <FromDiscord> <Disciple> I'll keep digging in the documentation to see if I find something
[19:58:02] *** Joins: jmdaemon (~anon@user/jmdaemon)
[19:59:05] *** Quits: jmdaemon (~anon@user/jmdaemon) (Client Quit)
[19:59:27] *** Joins: jmdaemon (~anon@142.207.63.60)
[20:03:43] *** Quits: jmdaemon (~anon@142.207.63.60) (Client Quit)
[20:04:20] *** Joins: jmdaemon (~anon@142.207.63.60)
[20:04:51] *** Quits: jmdaemon (~anon@142.207.63.60) (Client Quit)
[20:05:07] *** Joins: jmdaemon (~anon@142.207.63.60)
[20:07:00] *** Quits: jmdaemon (~anon@142.207.63.60) (Client Quit)
[20:11:17] *** Joins: jmdaemon (~anon@142.207.63.60)
[20:15:14] *** Quits: jmdaemon (~anon@142.207.63.60) (Client Quit)
[20:15:32] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[20:16:06] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Changing host)
[20:16:06] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[20:20:01] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[20:20:36] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[20:24:48] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[20:25:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[20:25:12] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[20:25:39] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[20:35:07] *** Joins: lumo_e (~enrico@151.29.48.90)
[20:36:32] <FromDiscord> <hmmm> hey can I import in A something from B and B something else from A without making a giant mess?
[20:39:50] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[20:41:07] <FromDiscord> <hmmm> nah I got hit by giant recursive module dependency error
[20:41:29] <FromDiscord> <hmmm> I guess I should just clean up the mess with napalm and then import just one module lol
[21:07:05] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: WeeChat 3.3)
[21:07:46] <FromDiscord> <Rika> circular dependencies are hairy even if you did tackle it without an extra file, as it would imply rearranging code and imports-in-between-code
[21:09:42] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:10:05] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[21:10:43] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:12:35] <FromDiscord> <hmmm> oh, so my ill advised idea of using C  to offload some cruft wasn't so bad. Well in the end since it's all spaghettis anyway, before bashing my head against imports I might as well clean up a bit and see what happens. ty Rika anyway
[21:13:21] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Remote host closed the connection)
[21:13:37] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:16:33] <FromDiscord> <enthus1ast> @hmmm\: i often do it "c style" have a header that just defines the type for every big module
[21:35:44] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: WeeChat 3.3)
[21:36:03] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:36:06] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[21:36:25] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:49:53] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: WeeChat 3.3)
[21:50:13] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:50:40] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[22:02:51] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:06:34] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[22:40:15] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[22:47:11] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:52:09] <FromDiscord> <Forest> Hi
[22:55:10] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[22:56:44] <FromDiscord> <Forest> Does anyone know of any libraries that i could look at to write a dynamic programming language?
[23:07:25] *** Joins: SebastianM (~seba@user/sebastianm)
[23:08:23] <nrds> <06Prestige99> Anyone know if there's a formal definition or test suite/spec for camelCase? Have a few weird situations, want to see what the correct casing should be
[23:18:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[23:21:33] *** Joins: noeontheend (~noeonthee@207.237.194.194)
