[00:00:13] <rpav> hrm, it should be fairly trivial to decode some dynamic structure (e.g., json) into a (known / given) tuple<Ts...>, or fail/throw while doing so right
[00:00:45] <mort> in principle, yes, in C++, probably not?
[00:00:49] <rpav> throwing should be able to take care of non-defaulting types
[00:01:20] <ville> decode? parse?
[00:01:28] <rpav> i don't see any actual barrier, i should hack up a quick test
[00:02:30] <rpav> ville: well, given parsed JSON, decode a given mapping (e.g. every element of an array) to a tuple<Ts...>, where you can of course individually decode every array element into each expected Ts...
[00:02:54] <rpav> this actually seems really straightforward
[00:03:39] <mort> supernova: to be fair, wandbox doesn't make it overly clear that something is a warning and not an error :p dark red text usually means error
[00:05:01] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:09:42] *** Joins: radu24240788 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:09:43] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:09:44] *** radu24240788 is now known as radu2424078
[00:11:11] *** Tobbi__ is now known as Tobbi
[00:13:20] *** Quits: Ghou1s (~Ghou1s@user/Ghou1s) (Quit: Leaving)
[00:15:14] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[00:15:22] *** Parts: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3) (Leaving)
[00:15:48] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:18:07] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 250 seconds)
[00:20:43] *** Joins: CaCode (~CaCode@user/cacode)
[00:21:46] <LordKalma> !fact
[00:21:48] <nolyc> LordKalma: the notation for explicit call of a destructor can be used for any scalar type name.
[00:22:25] <LordKalma> {~i()} int *i = new int(0); // this?
[00:22:25] <geordi> error: 'i' cannot be used as a function
[00:22:27] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:22:32] <LordKalma> guess not
[00:23:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:24:31] *** Joins: Simplar (~Simplar@188.163.93.76)
[00:24:42] *** Quits: supernova (~quassel@2405:9800:ba11:6207:3f7c:e6d9:860d:2551) (Ping timeout: 260 seconds)
[00:28:09] <rpav> { int i; bye(i); } template<typename T> void bye(T& v) { v.~T(); }
[00:28:09] <geordi>  
[00:29:22] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 260 seconds)
[00:29:27] <PJBoy> UB >_>
[00:29:36] <rpav> not really the point heh
[00:30:08] <PJBoy> the fact is wrong the way I read it
[00:30:23] <PJBoy> it says it can be used for any scalar type name
[00:30:30] <PJBoy> but it's when using scalar type names that it doesn't work
[00:30:31] <rpav> it seems a bit too general, because you can't write `i.~int();`
[00:30:57] <rpav> should mention templates because that's what the point is
[00:31:43] <cbreak> https://en.cppreference.com/w/cpp/memory/destroy_at ?
[00:32:36] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:37:53] *** Quits: paul424 (~tom@ip-5-172-233-220.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:39:02] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 240 seconds)
[00:39:02] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:41:22] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:44:27] *** Joins: radu24240785 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:44:29] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:44:29] *** radu24240785 is now known as radu2424078
[00:45:50] *** AbleBacon_ is now known as AbleBacon
[00:46:49] <kalven> KombuchaKip: the allocation place that you think is responsible for the leak
[00:48:37] *** Joins: badone (~badone@209.132.189.136)
[00:48:49] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:49:12] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:50:52] <rpav> https://godbolt.org/z/f57789WaW <- yeah fairly simple json->tuple, the cppref code for integer_sequence even has a std::array-to-tuple that's an easy place to start
[00:51:32] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[00:51:42] <rpav> but this is pretty neat since it means i can basically register a std::function to be called from a json array without a lot of extra stuff
[00:51:49] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:54:36] *** Joins: proller (~p@2a02:6b8:b081:1214::1:2)
[00:58:53] <PJBoy> there's a function for turning an array into a tuple
[00:59:44] <PJBoy> << t; array a{1, 2, 3}; tuple t = tuple_cat(a);
[00:59:45] <geordi> {1, 2, 3}
[01:02:36] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[01:06:51] <rpav> probably, but it's a good place to start for making similar things
[01:07:19] <rpav> in fact probably i don't need the decode_element even
[01:07:58] <rpav> yeah. this is actually a Very Nifty Thing(tm)
[01:10:40] <rpav> oh shit especially considering with CTTI stuff i don't even need to rely on parsing the source for metadata
[01:12:36] <rpav> i want to be like, "write function, use it interactively" .. the argument types can be pushed to the UI, input taken dynamically, parsed with the above, the function called with apply, and the result returned with like 1 line of extra code
[01:12:52] <rpav> something like `register("name", fun);`
[01:13:34] <rpav> granted doing this with method sets etc is slightly more work (mostly manually enumerating methods I guess), but it's a lot closer than it was back in the day
[01:14:05] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:14:10] <TheGuestMovie> guess what lets you do this easily...that's right, your favorite, Qt
[01:14:26] <rpav> not really
[01:14:30] <TheGuestMovie> slots can be invoked by name, their signature retrieved at runtime, etc
[01:15:01] <rpav> not what i'm saying, and qt relies on moc shit (which isn't necessarily the wrong solution ultimately, but unnecessary here)
[01:15:04] <TheGuestMovie> for example: QMetaObject::invokeMethod(this, "SetSnmpIntSub", Qt::QueuedConnection, Q_ARG(QString, oid), Q_ARG(int, value));
[01:15:42] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[01:16:34] <rpav> i literally want to say `std::string hello(std::string name) { return "hello " + name; }`, and with nothing more than `register("hello", &hello);`, have e.g. an icon called "hello" that pops up a dialog requesting a string, takes entry, calls the function, and shows the result
[01:17:19] <rpav> ultimately the same thing for any given object, but that's the next step
[01:17:20] *** Quits: magla (~gelignite@55d4a165.access.ecotel.net) (Quit: Stay safe!)
[01:17:42] <TheGuestMovie> ah, I see. The part about invoking the function is easy (map of string to function pointer/std::function), but how will you know that it takes a std::string in C++?
[01:18:05] <rpav> invoking the function is the hard part! ;)
[01:18:12] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[01:18:34] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87)
[01:18:34] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87) (Changing host)
[01:18:34] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:18:48] <rpav> (or at least it was pre-11 .. 17 maybe? could you implement tuple+invoke in 11? probably)
[01:19:47] <TheGuestMovie> so how is the GUI code fetching the info about "hello" that lets it know it needs a string as argument? did C++ add stuff like this?
[01:19:50] <rpav> TheGuestMovie: knowing the parameter and return types can be extracted by templates, though to be entirely fair, actually providing typenames is a compiler extension until 23
[01:19:51] <TheGuestMovie> I just upgraded to C++11, bear with me
[01:20:11] <rpav> but like, everyone does PRETTY_FUNCTION so it's easy enough to get to
[01:20:23] <rpav> ahhh, so, 11+ give you tons of new toys
[01:21:31] <rpav> you can extract the return type and parameter list with variadic templates, so you'd map that to string type names (which is the "ubiquitous compiler extension" bit), and then map those to what the ui cares about
[01:21:31] <TheGuestMovie> it's beyond my skills
[01:22:44] <rpav> maybe at the moment, it was well beyond mine for awhile too, but now all i see is redhead there, brunette there .. err, template metaprogramming stuff is actually surprisingly easy
[01:23:51] <rpav> like once you understand you're working with _types_, like `typename T` and you've got a type variable
[01:38:49] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:39:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:34] *** ChanServ sets mode: +v npaperbot
[01:43:31] <RandomReader> rpav / PJBoy - that must actually be a parse issue from somewhere else, since the standard uses examples with type aliases: https://eel.is/c++draft/class.dtor#20
[01:44:37] <RandomReader> msvc actually has no trouble with the bare types, so it doesn't seem to be an intrinsic problem, but I have no idea what rules cover it
[01:45:27] *** Joins: seninha (~seninha@user/seninha)
[01:45:50] <RandomReader> I also find it fascinating that the example scopes it, as if that's ambiguous
[01:47:52] <RandomReader> KombuchaKip - sticking with dynamic lib sounds fine, I was just running through the bits of info I could find
[01:49:16] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[01:50:49] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[01:54:13] <rpav> RandomReader: i think only actual keyword types don't work .. e.g.
[01:54:27] <rpav> { using type = int; type i; i.~type(); }
[01:54:27] <geordi>  
[01:55:23] <RandomReader> right, which usually points to "parse issue" of some kind, kind of like how you need an alias to use functional-cast notation to dodge the space in "unsigned int"
[01:55:29] <RandomReader> I just have no idea where that would come from
[01:56:27] <rpav> ah, yeah
[01:59:39] <KombuchaKip> kalven & RandomReader: Got it. It also turns out I wasn't compiling / linking with the ffmpeg I was building myself. Let me try and fix that and re-run with ASan again. Maybe I'll get a more useful stack trace this time.
[02:02:24] <RandomReader> ah, that would make sense
[02:05:41] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:07:50] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[02:10:42] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:15:41] *** Quits: proller (~p@2a02:6b8:b081:1214::1:2) (Ping timeout: 268 seconds)
[02:16:33] *** Joins: OnTheVerge (~OnTheVerg@user/OnTheVerge)
[02:22:01] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[02:26:30] *** Quits: OnTheVerge (~OnTheVerg@user/OnTheVerge) (Quit: Leaving)
[02:27:51] *** Joins: proller (~p@80.240.216.69)
[02:29:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[02:35:32] *** Joins: KhazAkar (~KhazAkar@178.43.196.230.ipv4.supernova.orange.pl)
[02:35:53] *** Quits: KhazAkar (~KhazAkar@178.43.196.230.ipv4.supernova.orange.pl) (Remote host closed the connection)
[02:51:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[02:51:57] *** Joins: seninha (~seninha@user/seninha)
[03:02:15] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:03:53] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[03:04:09] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[03:04:43] <rpav> hrm _is_ there any trivial or even straightforward way to get a tuple<Ts...> for some function signature in std
[03:04:57] *** Joins: proller (~p@80.240.216.69)
[03:05:16] <rpav> like i _can_ using a lot of my own stuff, where i can extract a parameter pack and apply it to another template, but i'm not sure _in std_
[03:14:49] <cbreak> rpav: do you need it inside some function template?
[03:15:50] <rpav> cbreak: yeah
[03:16:54] <cbreak> then I'd just write something like template<typename ... Args> void foo(void (*callable)(Args...)) { ... } or similar... I hope I got the syntax right
[03:18:00] <cbreak> maybe better: template<typename ... Args> std::tuple<Args...> foo(void (*callable)(Args...));, then you can use it like decltype(foo(func))
[03:18:39] <rpav> yeah that's how you can get it .. i have a whole set of extract_function<F> that can do various things as such, and i'm adding a bit to extract argument types as a parameter_pack<Ts...> .. but this seems way beyond std
[03:19:48] <cbreak> in terms of callable traits, https://en.cppreference.com/w/cpp/types/result_of is the only one I remember
[03:20:02] <cbreak> boost of course has a ton, ancient ones :)
[03:20:38] <rpav> actually just adding a `using arg_tuple = tuple<A...>;` will help a lot heh
[03:21:15] <rpav> cbreak: yea i originally added this to be able to "make" a std::function from any functor apparently
[03:25:59] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 250 seconds)
[03:25:59] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[03:26:23] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[03:26:26] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[03:26:26] *** Joins: Roughy (~mdaw45ns@user/roughy)
[03:27:09] *** Joins: Plazma (~Plazma@user/plazma)
[03:32:53] *** Joins: maxxe (~maxxe@user/maxxe)
[03:34:04] *** Joins: anyone (~filler@a4.inai.de)
[03:34:23] <anyone> I'm using jsoncpp. Gets me a std::string in the end that I can put whereever I want it.
[03:36:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:38:24] <RandomReader> nlohmann and rapidjson I've seen mentioned too
[03:39:46] <RandomReader> maxxe the general term for that is "serialization", and there are a ton of other options out there too.. Cap'n Proto, Protobuf, MessagePack, Cereal
[03:41:01] <RandomReader> JSON's primary reason for existence is because it could be easily run in-browser, but it's pretty lousy as a format in general, since it's inefficient and underspecified
[03:41:32] <RandomReader> you'll find other formats optimized for different use cases, whether human-readable or machine-efficient
[03:42:11] <rpav> how is it underspecified?
[03:42:29] <rpav> it's also pretty efficient in most regards
[03:42:38] <anyone> It's quite horrible in terms of Unicode
[03:43:02] <rpav> yeah but that argument is a stretch, since everything else is too, and "quite horrible" is an exaggeration
[03:43:46] <anyone> \uXXXX to represent one utfmb3 character, which is a 100% increase
[03:44:03] <rpav> in terms of space efficiency you can do a fair bit better if you can symbolicate/dedupe indices and strings, but
[03:44:53] <anyone> the problem I have with protobuf is that you need some step ahead of compilation
[03:44:53] <rpav> there are also "json-similar" formats if you want better certain things .. cbor is pretty nice for example
[03:47:15] <maxxe> RandomReader: rapidjson looks cool :)
[03:48:58] <maxxe> cross-platform too which I want
[03:49:15] <maxxe> but I will do some investigation
[03:50:46] <rpav> `const Function& f = FunctionType(&foo); f.call(v);` for some json-loaded value `v`
[03:50:54] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c514:d4dd:e381:3dae)
[03:50:54] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c514:d4dd:e381:3dae) (Changing host)
[03:50:54] *** Joins: skapata (~Skapata@user/skapata)
[03:51:00] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:51:19] <rpav> with a json-return value returned, for any function `foo`
[03:51:45] <rpav> (for any _functor_ `foo` really but yeah)
[03:51:56] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:52:15] *** Joins: shailangsa_ (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[03:56:02] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:57:19] <RandomReader> rpav - as a random example, numbers are basically left to "whatever the implementation wants"
[03:57:27] <RandomReader> e.g. https://datatracker.ietf.org/doc/html/rfc8259#section-6
[03:58:03] <RandomReader> there's this old page from someone who actually dug into parsing and validating a bunch of implementations, although some of the complaints may be out of date: https://seriot.ch/projects/parsing_json.html
[03:58:38] <RandomReader> it's just the natural result of evolving a format from "my implementation does it this way, so that's what I want" without actually defining that stuff rigorously
[03:58:55] <RandomReader> it's ok for its use cases, but in the scope of formats in general, it's pretty poor
[04:00:19] <RandomReader> "inefficient" I mean in the sense of machine parsing, just due to being text-based and forgiving for humans
[04:00:55] <RandomReader> which to be clear is true for a lot of formats, not picking on just json here
[04:03:30] <kalven> there's also https://github.com/simdjson/simdjson
[04:07:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:54] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:11:08] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:11:35] <anyone> simd? ew... https://imgflip.com/i/5xn541
[04:14:58] <kalven> yeah.. how dare they attempt to use the cpus
[04:20:01] <anyone> i'm just mega annoyed with projects that do not provide a fallback C/C++ implementation of their ASM, for the time when I _am_ on a system type the project did not envision
[04:22:00] <kalven> I believe it does have that
[04:22:18] <anyone> probably so, yes. But I was speaking more broadly.
[04:22:34] <anyone> outside of JSON parsers.
[04:22:53] <kalven> ah ok, so more like a knee jerk reaction to "simd"
[04:25:28] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:33:57] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:42:23] *** Quits: shailangsa_ (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[04:43:22] <Alipha> rpav: if it's useful at all for you: https://github.com/alipha/cpp/tree/master/function_traits Specifically, function_argument_tuple<decltype(my_function)>
[04:43:47] *** Joins: shad0w (~shad0w@user/xshadow)
[04:46:31] *** Joins: seninha (~seninha@user/seninha)
[04:47:30] *** Joins: fluter- (~fluter@user/fluter)
[04:48:45] *** Joins: xShad0w (~shad0w@user/xshadow)
[04:49:14] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 268 seconds)
[04:49:31] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 245 seconds)
[04:50:15] *** xShad0w is now known as shad0w
[04:58:23] *** Joins: frost (~frost@user/frost)
[05:04:22] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:38d0:a1a2:5189:934b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:04:33] <rpav> Alipha: ah yeah i recall you had fairly extensive ones
[05:05:22] <rpav> i've been building a collection myself, but this totally works and is actually probably a big step toward this thing i want to do
[05:05:36] <rpav> big little step
[05:09:21] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[05:12:40] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[05:31:30] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:32:33] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:855f:9909:bca8:ecc3) (Quit: Quit)
[05:34:06] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 260 seconds)
[05:39:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:35] *** ChanServ sets mode: +v npaperbot
[05:41:57] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:55:52] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[05:56:28] <KombuchaKip> kalven & RandomReader: Well, there's good news and there's bad news. I fixed the ffmpeg leak. The bad news is that was not the space leak. *sigh*
[05:56:40] <KombuchaKip> The big one, that is.
[06:06:14] <kalven> the search continues
[06:10:01] *** Joins: andreasbuhr_ (~quassel@p549db835.dip0.t-ipconnect.de)
[06:10:02] *** Quits: andreasbuhr (~quassel@p548dd563.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:15:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:17:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:20:39] *** Quits: DSpider (~DSpider@82.79.237.110) (Quit: Leaving)
[06:32:02] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:39:41] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 250 seconds)
[06:40:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:42:16] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[06:43:34] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d9cd:95:6ff7:6ae4)
[06:51:53] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Quit: See Ya Later!)
[06:52:14] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[06:52:34] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:54:06] *** Joins: Hashida (~DaSH@ro2.flokinet.is)
[06:58:37] *** Quits: Hashida (~DaSH@ro2.flokinet.is) (Client Quit)
[06:58:39] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d9cd:95:6ff7:6ae4) (Ping timeout: 252 seconds)
[06:58:45] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Quit: See Ya Later!)
[06:59:06] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[07:03:52] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[07:04:32] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Quit: See Ya Later!)
[07:04:45] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[07:10:30] *** Joins: seninha (~seninha@user/seninha)
[07:23:14] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:34:24] <KombuchaKip> kalven: Yeah, at least I managed to clean up four other leaks. Just not the important one. Ugh.
[08:03:44] *** Joins: CaCode (~CaCode@user/cacode)
[08:06:35] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:12:13] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:13:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[08:15:25] *** Joins: malloy (~jimery@116.30.222.36)
[08:26:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:32:37] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[08:33:31] *** Joins: AmR (~AmREiSa@156.207.199.106)
[08:42:48] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[08:44:44] *** Joins: malloy (~jimery@116.30.222.36)
[08:46:22] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:49:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[08:52:29] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[09:02:51] <kalven> do you have a test case you can repeat easily?
[09:02:52] *** Joins: szutt (~szutt@116.37.2.145)
[09:11:29] *** Quits: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu) (Quit: ZNC 1.8.2 - https://znc.in)
[09:12:19] *** Joins: Khoyo (~khoyo@user/khoyo)
[09:39:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:33] *** ChanServ sets mode: +v npaperbot
[09:44:21] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:02:41] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:16:52] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[10:19:29] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[10:29:41] *** Joins: callq (~callq@2409:4062:231c:7ae8:3d73:6aac:1dda:a7de)
[10:31:42] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:31:49] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[10:33:09] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[10:35:19] *** Quits: Guest19100 (~Guest19@2601:647:5280:2a50:7134:94af:76a4:94cb) (Quit: Client closed)
[10:47:08] *** Quits: BluesBoy (~bboy@user/bluesboy) (Ping timeout: 256 seconds)
[10:50:08] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:52:42] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[10:53:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:01:40] <ville> cbreak: you dealt with large files frequently and zfs? perhaps you'll find this interesting: https://neil.computer/notes/zfs-raidz2/
[11:09:16] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[11:11:23] *** Joins: malloy (~jimery@116.30.222.36)
[11:24:03] <LordKalma> !rq
[11:24:03] <nolyc> LordKalma: <PJBoy> yeah you're stupid dumb
[11:24:04] <LordKalma> morning
[11:25:15] <TinoDidriksen> Last I used it, ZFS wanted 1 GB RAM per TB of space it managed. I expect that ratio still holds.
[11:25:40] <TinoDidriksen> Ah, 8 GB + 1 GB/TB.
[11:26:16] <LordKalma> damn
[11:26:32] <LordKalma> if you want a big server you need 128gb sticks
[11:29:02] <LordKalma> ville, do you know Linus Tech Tips? they tried setting up a big bandwidth NAS and they had big problems. Wender from L1Tech, which actually knows what he talks about, tried to help but didn't manage as well
[11:29:24] <LordKalma> They even changed the kernel from interrupts to polling mode for the disks and what-not
[11:29:25] <LordKalma> a mess
[11:29:46] <LordKalma> Dunno how that situation is now. I don't watch LTT anymode
[11:29:49] <LordKalma> *anymore
[11:30:26] <cbreak> ville: neat :) I'm always running out of space on hard disk based nases though, so SSDs beyond L2Arc (or log device) probably wouldn't be affordable
[11:31:00] <LordKalma> SSDs for NAS are expensive indeed
[11:31:48] <LordKalma> a Seagate 10TB NAS drive is 250 bucks
[11:32:07] <LordKalma> So spinning rust still has that price/bit ratio :p
[11:35:24] <LordKalma> As long as you don't get scammed by WD selling you NAS drives that are actually SMR drives
[11:36:09] <LordKalma> https://www.servethehome.com/surreptitiously-swapping-smr-into-hard-drives-must-end/
[11:37:47] <johnny> LordKalma, i do not understand watching videos for tech
[11:38:28] <johnny> well unless you're actually assembling something physical that is, of course. i used one to make sure i was dissambling my laptop correctly
[11:38:52] <LordKalma> yeah, sure, follow the Verge's build guide
[11:39:22] <johnny> well you can't match the instructions they accidentally omit due to familiarity when it comes to assembly/dissambly
[11:39:42] <johnny> sometimse the written instructions are too unclear
[11:39:49] <johnny> at least with code, you can just you know.. execute it :)
[11:39:51] <LordKalma> indeed indeed
[11:40:09] <LordKalma> fortunately my laptop does have very easy disassembly of the bottom cover
[11:40:23] <LordKalma> I remember a time when you had to take out the keyboard to unscrew the bottom cover
[11:40:25] <johnny> just for ram,wifi ? or what else?
[11:40:29] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:40:44] <johnny> i had to replace a snapped off power plug mount, so i had to take it ALL THE WAY apart
[11:40:51] <LordKalma> is has a single bottom cover
[11:41:05] <LordKalma> 8 screws or something, and the plastic snaps
[11:41:06] <johnny> that'd make it easy
[11:41:27] <LordKalma> yeah
[11:41:34] <LordKalma> I had the previous model and it was easy as well
[11:41:35] <TinoDidriksen> #C++-social
[11:41:44] <johnny> so.. related to C++... oes anybody do any transcripts and/or notes from cppconf and related thingies?
[11:42:07] <LordKalma> I think those you'll have to watch :p although there's usually a git repo with the slides
[11:42:29] <johnny> TinoDidriksen, i was just pivoting it from how i don't undersatnd how people use videos (based on previously mentioned content) to wondering if anybody here uses videos for programming
[11:43:25] <johnny> LordKalma, seems kinda weird not to have a notes section. i rarely find watching talks to be that useful vs just grabbing thenotes, and then later referring to the video if anything is unclear
[11:43:58] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:44:14] <johnny> i guess for me.. the only reason to go to a programming conference ni the first place is the hallway track that's sparked from talks, but not the talks themselves
[11:44:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:44:52] <johnny> i guess i'll have to check the git repos then , and after that check out the videos if i must
[11:48:01] <RandomReader> for things like cppcon? the talks are the content, slides don't cover it and are just supporting material
[11:48:46] <RandomReader> you might be able to intuit some of it from discussions on e.g. reddit about the talks, but otherwise, I'd just use different sources entirely .. blog articles, books, etc
[11:48:57] <RandomReader> I don't think there are any current magazines anymore
[11:51:01] <johnny> i guess the only solution then, is to see what the talk titles are, and find relevant articles after checking the slides
[11:51:10] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:57:14] <ville> LordKalma: i've heard oh him, but never watch the stuff. not a system administrator
[12:02:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:818e:55b0:ddc9:c071)
[12:02:16] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:818e:55b0:ddc9:c071) (Changing host)
[12:02:16] *** Joins: skapata (~Skapata@user/skapata)
[12:07:32] *** Joins: limubs (~limubs@cgn-89-0-49-196.nc.de)
[12:09:03] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[12:09:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:15:06] *** Joins: lh_ideapad_ (~lh_mouse@mingw-w64/developer/lhmouse)
[12:15:24] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Killed (NickServ (GHOST command used by lh_ideapad_)))
[12:15:28] *** lh_ideapad_ is now known as lh_ideapad
[12:20:43] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:38:48] *** Joins: adeliktas (~adeliktas@2001:16b8:22c1:c800:fc6c:f5c3:4e96:ccc3)
[12:46:41] *** Joins: robod34 (Username@79.113.195.239)
[12:49:45] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:55:03] *** Joins: xkuru (~xkuru@user/xkuru)
[12:55:10] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 268 seconds)
[12:56:45] <maxxe> RandomReader: I decided to use protobuf ;)
[12:59:14] *** Joins: DSpider (~DSpider@82.79.237.104)
[13:04:17] <limubs> good decision
[13:04:58] <LordKalma> for a shady company, facebook has a pretty cool code base
[13:07:16] <TinoDidriksen> That's pretty common. It's not the engineers who're making the bad decisions.
[13:08:28] <ville> "they are just following orders"
[13:10:49] <ville> if you're working for facebook you're complicit. there's no wiggle room. you're enabling the whole endeavour in some way. even if you're the janitor.
[13:11:59] <antto> you should at least leave that banana peel on the floor in front of the CEO office, don't clean it off
[13:12:59] <LordKalma> Bue yeah, from React to Protobuf, pretty cool
[13:13:23] <sonOfRa> ville: isn't protobuf a google thing?
[13:13:25] <NyB> ville: by that view, there's no way you can work for any kind of company above a certain size without being "complicit" to questionable things
[13:13:32] <NyB> sonOfRa: it is...
[13:14:54] * NyB is sooo happy that protobuf3 now supports field presence...
[13:14:57] <LordKalma> I had the idea if was from facebook
[13:14:59] <LordKalma> disregard
[13:15:53] <ent58> is protobuf basically ASN.1 but fancy source autogeneration? (and all that implies)
[13:16:58] <NyB> ent58: from what I can see ASN.1 is far more complicated
[13:17:01] <sonOfRa> I haven't yet seen any explodey "oh no buffer overrun because we screwed up our protobuf parser" yet, so no, it's not like ASN.1 :D
[13:17:17] <ent58> I see
[13:17:48] <ent58> I thought it might Goog doing the NIH routine and then pushing it as the standard, like they do with chrome's features
[13:17:53] <ent58> but yeah
[13:18:03] <ent58> that is very nifty
[13:18:06] <NyB> it basically has a few basic types (string, double, int64, bool...), and then you can nest messages
[13:18:25] <LordKalma> so binary json?
[13:18:55] <NyB> it's somewhat close to JSON, I suppose
[13:19:05] <ent58> json is just baby ASN.1, so protobuf would be teenager JSON?
[13:19:22] <NyB> does ASN.1 support references?
[13:19:47] <NyB> (as in, pointers to some other place in the same object/message/...)
[13:20:18] <ent58> I'm not sure
[13:20:24] <NyB> I can't really tell from Wikipedia...
[13:20:24] <ent58> I don't think so, at least not like that
[13:21:08] <NyB> but that was one of my pet-peeves for some (all?) XML formats - you could define references to other parts of the document. No way that can go wrong :-p
[13:21:33] <ent58> what I like about ASN.1 is in-format constraints on values
[13:21:58] <ent58> I mean that's a simple thing to add onto another cross-platform data serialization format
[13:21:59] <ent58> but
[13:22:29] <ent58> hmm
[13:22:45] <NyB> ent58: in practice, that has proven to be a very very bad idea
[13:23:12] <ent58> adding on constraints, or having them?
[13:23:39] <NyB> ent58: having them as part of the serialization/deserialization engine
[13:24:49] <ent58> I can see where you may not want that, especially if they are changing over time
[13:25:26] <ent58> the application does the constraining instead
[13:26:21] <NyB> ent58: think ServiceA -> StatefulProxy -> ServiceB. If the proxy is not transparent (because it was to inspect and adjust the messages), you now have a situation where a protocol update for A & B could lead the proxy to mangle the data
[13:26:42] <ent58> yep
[13:26:58] <ent58> in that case you would have to have sane rules for dealing with mismatching constraints, and by that point
[13:27:08] <ent58> you might as well just not have them in the format
[13:27:10] <NyB> and in your average complex system a message can go through a lot of intermediate steps
[13:27:25] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:27:39] <NyB> (and don't forget storage... oof, it hurts when storage mangles your data)
[13:29:59] <ville> sonOfRa: yes it is, just tino's reasoning there
[13:30:04] <ville> NyB: yes and that is fine
[13:31:16] <NyB> ville: which part? :-)
[13:31:26] <TinoDidriksen> Oh they're definitely complicit, but they're still good engineers.
[13:31:37] <ville> TinoDidriksen: only suck as human beings
[13:31:54] <NyB> ah, the working-for-FB thing
[13:31:54] <ville> NyB: not being able to work for companies larger than X if being larger than X requires to be morally corrupt
[13:31:56] <LordKalma> in their defense, I'd want to feed my family as well
[13:33:09] *** Joins: plastico (~plastico@neomutt/plastico)
[13:33:11] <very_sneaky> i just watched a documentary in which narco traffickers gave the same reason, lol
[13:33:56] <LordKalma> there's no black and white, only grey
[13:34:08] <ville> very_sneaky: well the people who are working at facebook as engineers probably have wider employment opportunities than the people who are drug mules
[13:34:10] <NyB> ville: there are degrees in "morally corrupt". I've met people who had no issue whatsoever writing malware for the mob, or targetting software for missiles. That's not quite the same thing as writing a compression algorithm for a social media company...
[13:34:11] <anyone> and monitors suck in terms of gray switchting time :D
[13:34:39] <ent58> "someone would have wrote it for them, why not let it be me?"
[13:35:19] <LordKalma> NyB, when your employer is literally causing civil wars in southeast asia, I'd rather write missile targeting software. At least those are primarily a deterrent...
[13:35:37] <ent58> ^^^^
[13:35:58] <very_sneaky> ville: these weren't mules, they were making >1.5m/year.. "i need to work" sounds a bit hollow when what you're really saying is "i would work at this other place but i like the money here better"
[13:36:14] <very_sneaky> i guess it was refreshingly honest
[13:36:24] <LordKalma> I like money as much as the next person
[13:37:22] <ent58> Boiling down the root cause of these things becomes an exercise in creating a permanent noise floor
[13:38:12] <LordKalma> morale, even in code, is a philosophical-first question of course. For which there are only thesis, not facts. And grey everywhere...
[13:39:19] <NyB> true... I have my red line, and most people I know have one of their own. It's the ones that don't that scare me :-/
[13:39:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:34] *** ChanServ sets mode: +v npaperbot
[13:39:43] <ent58> I'd write malware to destroy malware and virally fix holes
[13:39:58] <ent58> but even doing that in a manner that won't break stuff is hard
[13:40:04] <NyB> ent58: so, vaxware :-p
[13:40:08] <ent58> vaxware :D
[13:40:22] <ent58> someone did that with the log4j exploit
[13:40:30] <ent58> it uses it and then closes the LDAP hole
[13:40:31] <NyB> yes, heard about that
[13:40:59] <NyB> that exploit is bad... we'll be seeing it for years to come :-(
[13:41:02] <LordKalma> first gen wannacry was vaxxed by buying a domain name hahah
[13:41:17] <ent58> it is comforting that you have to already be running an older broken JRE for it to occur in the wild
[13:41:44] <NyB> ent58: the people who will be affected 1y from now won't be running a new JRE either
[13:41:52] <ent58> :/
[13:41:55] <LordKalma> ent58, so... every hospital ever? :p
[13:41:59] <ent58> aaaaaaa
[13:42:10] <ent58> start vaxxing the hospitals
[13:42:22] <LordKalma> sometimes you just can't
[13:42:43] <LordKalma> even at my ${DAYTIME_JOB} we have old-ass gear that's just how it is...
[13:42:45] <MaddHatter> of all the places to run code in an environment you know nothing about, hospitals would be among my last choices
[13:42:50] <NyB> let's just say I used to have a hard time convincing customers of the value of a support contract after the initial delivery
[13:42:51] <LordKalma> and I mean stuff that runs win xp embedded
[13:43:13] <LordKalma> MaddHatter, it's more about what I just said
[13:43:25] <ent58> MaddHatter: this is precisely why I'd lose to see some research into vaxware
[13:43:31] <LordKalma> they bought an MRI machine with embedded XP in 2005 and they are stuck with it
[13:43:33] <ent58> I'd lose?!
[13:43:34] <ent58> love*
[13:43:58] <NyB> government is especially bad, because in a lot of countries they can only elicit offers for specific deliverables, not support over a period of time.
[13:44:03] <ent58> like....how you might specifically guarantee certain things about your code, what it can and cannot do
[13:44:28] <MaddHatter> how's that any different for anti-malware than the general case?
[13:44:41] <ent58> well
[13:45:01] <ville> also we're probably past the point of off-topic. probably was right from the getgo
[13:45:10] <MaddHatter> proving things about code is valuable to everyone, which is why it is being researched
[13:45:23] <ent58> you're doing this to remote machines in unknown environments, so you have to have either a really large complex payload or a lot of assumptions about your targets and code to stop when they are broken
[13:45:31] <NyB> ent58: you can't. E.g. in the log4j case, you vax-away the JNDI support and suddenly a service that was actually using the thing dies.
[13:46:00] <LordKalma> for example, at work we run this: https://www.rftesolutions.com/index.php?main_page=product_info&products_id=1019
[13:46:12] <ent58> that's where you write a log in the binary directory that says FIXME :D
[13:46:14] <LordKalma> it's a windows xp machine, would cost millions of € to replace
[13:46:24] <ent58> but yeah
[13:46:30] <NyB> it's the nature of code; users will find any and all dark corners in your system, given enough time - and they will come to depend on them
[13:47:00] *** Joins: paul424 (~tom@ip-31-0-127-231.multi.internet.cyfrowypolsat.pl)
[13:47:09] <MaddHatter> LordKalma: do I know you? The universe of people using keysight gear is not all that big.
[13:47:26] <LordKalma> keysight sells a fuck-ton of gear
[13:47:33] <ent58> lots
[13:48:49] <LordKalma> I work in a somewhat telecommunications focused research institute. Between HP/Agilent/Keysight/whatever-name-they-use-now and Tektronix we have a lot of their catalogues
[13:50:15] <MaddHatter> "users will find any and all dark corners in your system, given enough time - and they will come to depend on them" <- this. Sooo much this.
[13:51:10] <MaddHatter> I've lost count of how many hours I've spent reverse engineering bugs because things depended on the buggy behavior
[13:52:25] <MaddHatter> I've written rounding function that turn positive numbers negative, because that's what the reference implementation did (and never got tested, apparently?) and so any substitute had to work the same way
[13:53:41] <mort> Hyrum's law
[13:54:10] <MaddHatter> Never heard of it before, but yeah, absolutely
[13:56:24] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Ping timeout: 256 seconds)
[14:01:09] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[14:01:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:12:45] <AmR> Can I build boost with CMake from local zip file, If yes then How ?
[14:13:09] *** Quits: callq (~callq@2409:4062:231c:7ae8:3d73:6aac:1dda:a7de) (Ping timeout: 250 seconds)
[14:24:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:26:19] *** Joins: Lunatara (~IceChat95@172-15-9-5.lightspeed.snjsca.sbcglobal.net)
[14:28:18] *** Parts: Lunatara (~IceChat95@172-15-9-5.lightspeed.snjsca.sbcglobal.net) ()
[14:32:45] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:50] *** Quits: paul424 (~tom@ip-31-0-127-231.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[14:37:30] *** Joins: shad0w (~shad0w@user/xshadow)
[14:39:36] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[14:42:49] *** Joins: seninha (~seninha@user/seninha)
[14:43:34] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:43:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[14:46:04] *** Joins: cursey (~cursey@user/cursey)
[14:52:37] <ville> since presumably it's possible to execute arbitrary shell commands from build system generated by cmake then why not?
[14:55:28] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[14:56:51] <ville> so you would follow the steps outlined for each platform: https://www.boost.org/doc/libs/1_78_0/more/getting_started/index.html or https://www.boost.org/doc/libs/1_78_0/more/getting_started/unix-variants.html
[14:58:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[15:03:43] <PJBoy> VS Code's charm is starting to lose me with its resetting of my extension settings
[15:04:06] <anyone> reject VS Code, return to humanity
[15:04:27] <PJBoy> it's probably because I deleted the .vscode directory at some point with my svn shenanigans
[15:04:30] <PJBoy> :/
[15:05:00] <ent58> *whisper* ....vim....
[15:05:29] <anyone> "I'm afraid I have to tell you I told you so, but, ""I told you so"""
[15:05:33] <LordKalma> VScode is amaziiiingggggggggggg
[15:05:48] <PJBoy> woah there, son
[15:05:49] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:06:00] <PJBoy> it's good
[15:06:01] <LordKalma> PJBoy, yeah... don't delete .vscode :) neither the local one, neither the one in your /home
[15:06:06] <PJBoy> but it's not better than good
[15:06:13] <LordKalma> also
[15:06:19] <LordKalma> just fucking enable settings sync
[15:06:35] <PJBoy> yeah I'm dumb for forgetting the .vscode directory thing
[15:06:54] <PJBoy> idk why but I just didn't assume VS Code would need to add stuff to my project directory
[15:07:08] <PJBoy> also isn't settings sync some cloud shit?
[15:07:11] <LordKalma> ah you deleted the local settings?
[15:07:14] <PJBoy> I can't be using that for work
[15:07:16] <LordKalma> that's on you then
[15:07:23] <PJBoy> yeah
[15:07:30] <LordKalma> the cloud settings is for the global settings
[15:07:41] <PJBoy> ah so it doesn't even make a difference
[15:07:55] <PJBoy> this is
[15:08:04] <PJBoy> I like to run `svn cleanup --remove-unversioned --remove-ignored` to do a clean
[15:08:15] <TinoDidriksen> Good practice.
[15:08:19] <anyone> The fact that you still like to run svn makes for some scratching
[15:08:19] <LordKalma> if you know how to make shit properly you can even commit .vscode :p
[15:08:27] <PJBoy> I would really prefer if that .vscode directory wasn't located there to get erased
[15:08:36] <LordKalma> I love to run `git clean -xdf` like a maniac as well
[15:08:43] <LordKalma> and I've been bit by that
[15:08:55] <TinoDidriksen> Also, svn is still great. Often better than git.
[15:09:09] <ent58> *heretic*
[15:09:10] <anyone> Tell me about the latency to update something.
[15:09:22] <anyone> Tell me about merge conflicts.
[15:09:24] <ent58> I'm actually interested in why though
[15:09:35] <PJBoy> merge conflicts are identical in SVN and git aren't they?
[15:09:46] <TinoDidriksen> Merge conflicts are indeed identical.
[15:09:46] <anyone> well, merge resolution then
[15:09:53] <TinoDidriksen> Nah, resolution is also identical.
[15:10:12] <ent58> Sell me my switch to SVN
[15:10:14] <PJBoy> in both cases it's just diff and mergetool
[15:10:34] <LordKalma> real programmers edit the <<<<< manually
[15:10:42] <PJBoy> I mean sometimes
[15:10:44] <TinoDidriksen> ent58, nah, if you're using git and happy with it, then you wouldn't care about the differences.
[15:11:03] <very_sneaky> i had a horrible time with svn. my pushes would always fail
[15:11:16] <PJBoy> pushes don't fail in svn
[15:11:22] <very_sneaky> though maybe that's more the fault of tortoise svn than svn itself
[15:11:32] <very_sneaky> they did for me :\
[15:12:00] <very_sneaky> seemed to choke harder on large repos
[15:12:12] <PJBoy> that's interesting
[15:12:14] <TinoDidriksen> If others are changing things, you need to "svn up" before you can commit. But that's the same for git - need to pull before push.
[15:12:29] <PJBoy> you didn't have a poorly written svn precommit hook or anything?
[15:12:42] <very_sneaky> i was working solo, nope vanilla install
[15:12:49] <very_sneaky> though this was a few years ago now
[15:13:05] <very_sneaky> anyway, life has been much smoother since transition to git
[15:17:43] <PJBoy> happy to hear it
[15:18:01] <PJBoy> I need as many people to know git as possible to help with my git problems
[15:19:17] <very_sneaky> :P
[15:20:01] <ent58> rebaserebaserebaserebase
[15:21:11] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 250 seconds)
[15:25:27] <PJBoy> why is my VS Code cmake configure using the ninja generator ;_;
[15:27:45] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[15:29:15] <PJBoy> it isn't specified anywhere in any settings
[15:29:33] <PJBoy> but it's in the cmake command line invocation
[15:30:30] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[15:32:31] <cbreak> PJBoy: maybe that's just what vscode wants
[15:32:59] <PJBoy> they might have changed the default cmake generator in a very recent update
[15:33:05] <PJBoy> but I'd be surprised
[15:33:43] <PJBoy> last time I did this workflow it used unix makefiles as expected
[15:34:02] <PJBoy> I mean I'm pretty sure it left the -G argument unspecified
[15:36:33] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3831:16c5:17f3:e631)
[15:37:47] <cbreak> PJBoy: in the settings, there's cmake.generator, which might have been set.
[15:37:49] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) ()
[15:37:52] <PJBoy> nope
[15:37:53] <PJBoy> checked that
[15:38:07] <cbreak> so the default must have changed :)
[15:38:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:38:37] <PJBoy> I can see it's also explicitly ignoring the "configure on open" option being disabled
[15:38:52] <PJBoy> can't say I'm impressed with these settings
[15:39:30] <cbreak> for me that works
[15:39:38] <cbreak> there are user and workspace level configs for each of those
[15:39:47] <PJBoy> oh it actually didn't do configuration
[15:39:52] <PJBoy> it just said it was doing it
[15:40:13] <PJBoy> possibly just overloading the word "configuring"
[15:40:57] <PJBoy> alright I'm just gonna assume the default generator changed then
[15:41:03] <PJBoy> absolute madness
[15:41:09] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:41:46] <PJBoy> and yeah it's purely the workspace settings I'm editting
[15:42:04] *** Joins: vin (~vin@user/crash)
[15:42:28] <cbreak> not like the generator should matter much
[15:42:42] <cbreak> (other than ninja being potentially faster)
[15:43:08] <PJBoy> ninja doesn't work on our build as is
[15:43:18] <PJBoy> need to do some extra work for it
[15:43:46] *** Joins: Burgundy (~yomon@79.115.213.171)
[15:44:25] <PJBoy> currently it immediately fails when trying to build openssl
[15:44:52] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:45:03] <PJBoy> it sees that libcrypto is a dependency for something and doesn't realise it still needs to be built
[15:45:29] <cbreak> sounds like the build isn't set up correctly :(
[15:45:32] <PJBoy> so I added a `BUILD_BYPRODUCTS` argument to this ExternalProject_Add we're using
[15:45:39] <PJBoy> which is apparently a ninja specific thing you need to do
[15:45:55] <PJBoy> and that got me further
[15:46:14] <PJBoy> but now `cmake --build .` in the openssl directory doesn't work
[15:46:19] <PJBoy> even though plain `make` does
[15:46:27] <PJBoy> and that's where I knew to give up
[15:46:51] *** Joins: JohnMS_AWAY (~kvirc@89-64-84-95.dynamic.chello.pl)
[15:46:51] <cbreak> cmake --build works in the cmake build dir
[15:47:09] <cbreak> it should be out-of-tree normally
[15:47:13] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Read error: Connection reset by peer)
[15:47:29] <PJBoy> this was a openssl subdirectory in the out-of-tree build directory
[15:51:08] *** Joins: pulse (~pulse@user/pulse)
[15:51:45] <cbreak> don't think cmake --build is supposed to work there
[15:52:40] <cbreak> you'd probably want something like cmake --build . --target OpenSSL (or what ever your target is called, in the build dir)
[15:56:07] <PJBoy> ah perhaps
[15:56:11] <PJBoy> I'll try that out at some point
[15:56:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:56:58] <PJBoy> still, I wouldn't know what to change in the CMakeLists.txt to reflect that anyway
[15:57:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:57:38] <PJBoy> especially given that the non-ninja generator works fine
[16:04:09] <PJBoy> hm, clangd is completely misunderstanding this code now
[16:04:15] <PJBoy> argh what the hell is going on today
[16:09:12] <PJBoy> restart fixed that -_-
[16:10:36] <LordKalma> clangd is a bitch
[16:10:44] <LordKalma> ctrl+shift+p "reload window" does wonders
[16:10:51] <LordKalma> it needs to be restarted to pick up the file
[16:14:49] *** Joins: proller (~p@2a02:6b8:0:40c:440:1ebd:fa63:be89)
[16:18:57] <PJBoy> there must be some way to get VS Code to report all of the warnings and errors from building
[16:19:01] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[16:19:05] <PJBoy> oh nvm
[16:22:56] *** Joins: aniketgm (~Aniket@49.36.107.79)
[16:24:45] <TinoDidriksen> Having to force-reload your IDE because it's based on a web browser engine is just beautifully absurd.
[16:24:58] <LordKalma> it is, isn't it?
[16:25:09] <LordKalma> but in case the problem is the clangd extension, or its authors
[16:25:30] <LordKalma> if compile_commands.json didn't exist and you created it, it doesn't reload the clangd server
[16:25:53] <aniketgm> TinoDidriksen: is that with reference to vscode ?
[16:26:10] <TinoDidriksen> Yup, a VS Code thing.
[16:26:30] <aniketgm> yeah, i can totally relate.
[16:26:30] <ville> LordKalma: that's just clangd though, they've had patch for that sitting for 2+ years
[16:26:51] <LordKalma> yes, it's the only extension with that problem
[16:27:16] <ville> LordKalma: it's not the extension, although they could fix it as well and autorestart clangd
[16:27:29] <LordKalma> yes, it would be an easy fix from either end
[16:27:46] <LordKalma> https://i.gyazo.com/a5643785474eca348678d82c56fff088.png
[16:28:24] <ville> LordKalma: making the fix on clang's side fixes it for everyone utilizing it, and like i said they've had the patches sitting for years
[16:28:43] <LordKalma> why don't they merge it?
[16:28:57] <LordKalma> a deamond reloading on a file watcher is pretty basic stuff, no?
[16:28:58] <ville> who knows. there hasn't been comment on it in years
[16:29:15] <aniketgm> they've had lots reservations on this before.
[16:29:47] <TinoDidriksen> Or, why haven't distros added it to the batch of patches they build with. If it was important enough, then that'd also happen.
[16:29:53] <ville> and yes a file watcher is pretty basic thing to write
[16:30:01] <aniketgm> maybe someone needs to wake them again.
[16:31:17] <fiesh> how is a file watcher basic?  there's really no unified solution that is good, so you have to go for operating system specific solutions and opt in and out
[16:32:04] <LordKalma> considering we're talking aabout the lvvm code base
[16:32:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:32:09] <LordKalma> that's probably all included somewhere
[16:32:12] <ville> fiesh: that functionality is available on any os you're going to be writing code on. having some ifdefs around it is not something to be scared of. it's basic
[16:33:59] <fiesh> not saying it's not doable or shouldn't be in clangd (actually have no opinion on this), but calling code "basic" that needs to maintained and tested individually for basically every platform doesn't match my definition of basic
[16:38:05] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[16:38:35] <PJBoy> just hash the file every second
[16:38:40] <PJBoy> portable, stable
[16:39:15] <LordKalma> with std::filesystem that seems simple enough
[16:39:35] <PJBoy> I mean we're already using a integrated browser text editor, think we can afford some file hashes :)
[16:40:57] <sonOfRa> yeah, for single files that generally works well, just doesn't tend to scale for "watch these 10 directories if any file in them changed" :D
[16:41:34] <PJBoy> for sure, but this is just the one compile_commands.json
[16:41:56] <LordKalma> sonOfRa, well, I have to do that on my webpack (JS) + Docker setup because WSL2 is a bitch
[16:42:11] <LordKalma> and yeah, it's too much CPU just to have hot reload
[16:42:31] <LordKalma> WSL2 doesn't notify on file changes, you have to use watchers, and that's BS
[16:43:04] <PJBoy> that is to say, it doesn't notify on file changes made by Windows to the linux subsystem
[16:43:15] <LordKalma> yes that
[16:43:17] <PJBoy> I'm not even sure how it's possible to do that
[16:43:31] <LordKalma> still BS since it works on fucking old-ass HyperV mode
[16:43:37] <LordKalma> (and WSL1)
[16:43:56] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[16:44:10] <PJBoy> how do you access the linux filesystem from windows?
[16:44:30] <LordKalma> oh I misread what you said
[16:44:37] <LordKalma> the changes are made on the windows filesystem by windows
[16:44:41] <LordKalma> it's a docker volume mount
[16:44:57] <TinoDidriksen> WSL1 was the same filesystem, so of course it works there. WSL2 mounts remotely, which is a whole other story.
[16:45:15] <LordKalma> you can access any windows files from wsl though. /mnt/c or whatever
[16:45:23] <PJBoy> ah it's in--
[16:45:25] <PJBoy> yeah
[16:45:41] <PJBoy> that's useful
[16:45:45] <LordKalma> but yeah, I'm talking about a docker-specific thing here
[16:46:02] <PJBoy> does linux normally support file watches on mounted drives?
[16:46:02] <LordKalma> docker can link any host dir into any image dir
[16:47:02] <LordKalma> PJBoy, something to do with the inodes, iirc
[16:48:55] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:49:16] <PJBoy> well, whatever it is, I really wouldn't expect windows file changes to ever be watchable in linux
[16:50:00] <PJBoy> you have to wonder how that bug thread managed to get over 100 comments long too
[16:51:59] <LordKalma> maybe docker has some middleware
[16:51:59] <LordKalma> but as I said, I tried docker on hyperV mode and it works
[16:51:59] <LordKalma> docker on windows can use either WSL2 or HyperV
[16:51:59] <LordKalma> HyperV is slow as hell because it's a "deep vm"
[16:52:00] <LordKalma> if you get what I mean
[16:53:03] <PJBoy> maybe that's why WSL2 doesn't support it
[16:53:08] <PJBoy> would make it too slow
[16:53:10] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:54:16] <PJBoy> right, I get to write a clang-tidy file now
[16:54:28] <PJBoy> this is gonna be so much fun
[16:55:08] <PJBoy> I'm already debating whether I want to used a blacklist vs whitelist of checks
[16:55:12] <LordKalma> https://github.com/ruilvo/aether_dsp/blob/master/.clang-tidy
[16:55:14] <LordKalma> :p
[16:55:19] <PJBoy> thanks
[16:55:32] <PJBoy> IIRC your checks are much stricter than I would put up with
[16:55:34] <LordKalma> FormatStyle: file # means "read .clang-format"
[16:55:51] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:56:09] <PJBoy> huh, my firefox is hanging when trying to load that webpage
[16:56:26] <LordKalma> -llvmlibc-* is really necessary because it has checks like "omg this isn't on the llvm namespace" (it's really just for libc++ maintainers)
[16:57:21] <LordKalma> Re strict checks:  `Checks: '*,-modernize-use-trailing-return-type,-llvmlibc-*'` is a good place to start, use it, and keep adding -something to the file whenever it annoys you and you want it globally disabled
[16:57:23] <PJBoy> can't I just omit the FormatStyle?
[16:57:38] <LordKalma> you can, I think
[16:58:20] <PJBoy> why is this file format undocumented ;_;
[16:58:30] <LordKalma> Also, don't forget there's NOLINT, NOLINTNEXTLINE, and NOLINTBEGIN … NOLINTEND comments.
[16:58:50] <LordKalma> https://clang.llvm.org/extra/clang-tidy/#suppressing-undesired-diagnostics
[16:58:59] <PJBoy> not gonna be using those
[16:59:00] <LordKalma> eg. // NOLINTNEXTLINE(*-avoid-c-arrays)
[16:59:08] <LordKalma> sometimes you want an exception
[16:59:25] <PJBoy> if I can't suppress the warning another way, I'm turning off the check entirely
[16:59:39] <LordKalma> PJBoy, you expect me to document a .clang-tidy file? come'on
[16:59:53] <PJBoy> nah I expect LLVM to document their shit
[17:00:17] <LordKalma> ahhh yeah, the .clang-tidy[.yml] format doesn't have its schema anywhere
[17:00:24] *** Joins: seninha (~seninha@user/seninha)
[17:00:27] <Haohmaru> llvm_documentation.lnk (shortcut to gnu-gcc documentation)
[17:00:29] <PJBoy> .clang-tidy gets a passing mention in that page you linked
[17:00:32] <PJBoy> and I think that's it
[17:00:59] <LordKalma> if you knew how long I took to learn how to use CheckOptions: via a .clang-tidy file...
[17:01:21] <LordKalma> namely, to use these: https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html#options
[17:01:44] <PJBoy> jesus christ
[17:01:54] <PJBoy> I've got my work cut out for me haha
[17:02:06] <LordKalma> I have only readability-identifier-naming.MemberSuffix
[17:02:17] <LordKalma> but yeah, there's a lot of options
[17:02:55] <LordKalma> Also, took a couple of days to understand that MemberSuffix did the check I wanted but ClassMemberSuffix didn't
[17:03:00] <LordKalma> INSIDE A CLASS
[17:03:05] <PJBoy> fuck
[17:03:07] <PJBoy> hahahaha
[17:03:18] <PJBoy> that hurts
[17:03:47] <LordKalma> ClassMemberSuffix: When defined, the check will ensure class member names will add the suffix with the given value (regardless of casing).
[17:04:00] <LordKalma> re-reading it now, I think that checks is for nested classes
[17:04:03] * LordKalma facepalms
[17:04:20] <PJBoy> I don't think anything calls those class members
[17:04:47] <LordKalma> Since ClassMethodCase you're probably right
[17:04:51] <LordKalma> I still don't get it then
[17:05:02] <LordKalma> .MemberSuffix works and I'm going with that haha
[17:05:48] <LordKalma> OMG llvm calls it camelBack and CamelCase instead of camelCase and PascalCase
[17:05:59] <PJBoy> bah where did you even find that option?
[17:06:07] <LordKalma> https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html#readability-identifier-naming
[17:06:23] <PJBoy> oh in that subpage
[17:06:30] <PJBoy> oh man that's so much reading
[17:06:48] <LordKalma> or you mean how I learnt to use `CheckOptions:` on the YAML?
[17:06:52] <LordKalma> I think it was someone here
[17:07:01] <LordKalma> .clang-tidy's docs are SO BAD
[17:07:09] <PJBoy> they are
[17:07:19] <PJBoy> they need a cppreference section haha
[17:07:33] <LordKalma> well, not as bad as perhaps more like non-existing
[17:08:07] <LordKalma> they are only mentioned when you run `clang-tidy --help` and have the --dump-config
[17:08:39] <PJBoy> --dump-config seems to be the officially supported method of .clang-tidy generation
[17:09:04] <LordKalma> yap
[17:09:37] <LordKalma> btw don't forget "clangd.arguments": ["--clang-tidy"] in your settings.json
[17:09:54] <PJBoy> I need that?
[17:10:04] <LordKalma> to enable clang-tidy on clangd, yes
[17:10:16] <PJBoy> I doubt that
[17:10:19] * PJBoy tests
[17:10:19] *** Parts: anyone (~filler@a4.inai.de) ()
[17:10:26] <LordKalma> I have "clangd.arguments": ["--clang-tidy", "--header-insertion=never", "--suggest-missing-includes", "--pretty"] // I forget why I enabled pretty hahah
[17:10:49] <LordKalma>  "--header-insertion=never", "--suggest-missing-includes" was because it was always adding #include <qobject.h> instead of #include <QObject>>
[17:11:10] <LordKalma> so I was annoyed
[17:11:42] <PJBoy> Qt took up the extensionless header convention?
[17:12:03] <LordKalma> <QObject> <QVector> <QWidget>, etc
[17:12:05] <LordKalma> yes
[17:12:16] <PJBoy> wow they really are trying to rewrite C++ from scratch
[17:12:28] <LordKalma> <qobject.h> exists (and in fact the QObject file is just #include <qobject.h> inside)
[17:13:01] <LordKalma> but better to stick to convention. and clangd insisting on adding <qobject.h> even when qobject was clearly already in scope
[17:13:34] <LordKalma> so  "--header-insertion=never", "--suggest-missing-includes" is like "don't do it, just tell me"
[17:14:41] <PJBoy> I don't understand why the "Reload Window" VS Code option in the ctrl+shift+p menu lists Ctrl+R as a hotkey
[17:14:57] <PJBoy> Ctrl+R acts like a pseudo Ctrl+O
[17:15:55] <PJBoy> also confirmed didn't need to change any VS Code clangd options
[17:16:27] <LordKalma> PJBoy, because of this: https://i.gyazo.com/066e433dcabeffd82f8b899542c399aa.png
[17:16:29] <LordKalma> "when"
[17:16:30] <PJBoy> clang-tidy is enabled by default
[17:16:42] <LordKalma> Ctrl+R is for when you're on isDevelopment environment
[17:16:47] <LordKalma> like extension debugging
[17:16:49] <PJBoy> argh wtf man, my firefox takes like 10 seconds to open now
[17:17:14] <PJBoy> dude that's so vague
[17:17:38] <PJBoy> "isDevelopment" / "Developer"
[17:17:50] <PJBoy> nah I'm just using the coder IDE for non-development >_>
[17:18:22] <PJBoy> I swear
[17:18:29] <PJBoy> vim is looking more and more tempting
[17:22:05] <rpav> it's hard to beat a real customizable editor
[17:22:13] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:22:23] <ville> fiesh: it's basic because it requires no expertise in anything. even a programmer can do it.
[17:32:11] <PJBoy> does the clang tidy config file not support multiline strings ;_;
[17:32:36] <PJBoy> I tried the `>` token, to no avail
[17:33:15] *** Joins: Colt (~Colt@user/colt)
[17:34:00] <PJBoy> nvm
[17:34:13] <PJBoy> it's cause I wanted to move the * wildcard to the end of the list of checks
[17:34:27] *** Joins: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com)
[17:34:34] <PJBoy> which must have had the effect of overriding all the previous -options
[17:36:32] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Ping timeout (120 seconds))
[17:36:46] *** Joins: szutt (~szutt@116.37.2.145)
[17:38:50] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[17:39:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:35] *** ChanServ sets mode: +v npaperbot
[17:39:40] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[17:40:03] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:40:19] *** Quits: JohnMS_AWAY (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 252 seconds)
[17:55:52] *** Joins: Simplar (~Simplar@188.163.93.76)
[18:02:35] <PJBoy> yeah the cert checks are bizarre
[18:03:16] <PJBoy> but not all of them are bizarre, hm
[18:04:39] <LordKalma> hahah I was going back to this funny blog post from 2016
[18:04:41] <LordKalma> https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f
[18:04:47] <LordKalma> it makes a funny point about the JS ecosystem
[18:05:00] <LordKalma> but while re-reading it I found "just wait for it, we are going to do assembly in the web in a year or two."
[18:05:18] <LordKalma> little did the author knew we were going to do exactly that unironically
[18:05:29] <PJBoy> asm.js was around before 2016
[18:05:42] <PJBoy> we used it in my 2014/15 games project
[18:08:34] <urdh> yeah and https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript makes fun of it, and that's a 2014 talk
[18:08:45] <rpav> 2013 according to wikipedia and i feel like there was something before that
[18:10:09] *** Joins: jkaye (~jkaye@2601:281:8300:7530:8f84:8d09:7b68:c6ce)
[18:10:47] <ville> PJBoy: https://github.com/your-editor/yed is a relative new comer in that space of editors. looks pretty interesting. unfortunately developer documnetation is non-existent right now, so writing your own addons will be a "challenge"
[18:11:42] <PJBoy> terminal based?
[18:12:18] <PJBoy> oh you've linked this before
[18:16:42] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:18:40] <rpav> people writing text-mode stuff in 2021 heh
[18:18:52] <rpav> except as an exercise and/or cli tool
[18:19:01] <aniketgm> yed looks interesting. although, not sure more does it provide more that vim doesnOF't ?
[18:19:50] <aniketgm> rpav: ikr
[18:20:22] <aniketgm> although if you'd like some fancy stuff. you can always checkout emacs.
[18:20:51] <rpav> i already use emacs .. can't beat it for customization
[18:21:06] <aniketgm> yup. I use it too..
[18:21:24] <rpav> 👍
[18:21:33] <aniketgm> wait. are you in #emacs too.
[18:21:54] <Haohmaru> h4x0rz
[18:23:12] <LordKalma> bah I'll continue to use my browser editor
[18:23:13] <aniketgm> the thing with me is that I've been a vim user for a long time now. that habit doesn't simply go away. had to resort to evil.
[18:23:23] <aniketgm> LordKalma: :D
[18:23:51] <rpav> aniketgm: yea .. i must not be around when you are
[18:24:08] <rpav> that's what's cool about emacs; you make it work how you want
[18:24:52] <rpav> vi keys? sure; cua? sure; something else? .. my entire config hehe
[18:26:00] <aniketgm> but evil pretty much messes with the default bindings, it's difficult to find alternatives Or else create your own bindings..
[18:27:08] <aniketgm> LordKalma: wait. browser editor ?! for C++ ?
[18:27:23] <Haohmaru> one of those Electron-based crap
[18:27:41] <aniketgm> ah!
[18:28:57] <LordKalma> vscode
[18:30:32] <Haohmaru> i wonder when will they simply not release the next version as a download and instead "release" it as an online service only
[18:31:55] <rpav> isn't intellij's new thing already going in that direction
[18:33:23] <rpav> i can't even remember what it's called _or_ find it
[18:33:37] <rpav> maybe it went full cloud and evaporated
[18:34:11] <urdh> CLion?
[18:34:17] <rpav> https://blog.jetbrains.com/blog/2021/11/29/welcome-to-fleet/
[18:34:42] <urdh> wut
[18:35:15] <urdh> how many editors can one company realistically market?
[18:35:22] *** Joins: meator (~meator@user/meator)
[18:35:38] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 265 seconds)
[18:35:40] <rpav> oh maybe it only connects to remote fleet editor .. things
[18:36:01] <rpav> urdh: intellij is basically all the same editor with different flavors
[18:36:19] <rpav> different plugins etc
[18:40:30] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 268 seconds)
[18:42:03] <PJBoy> oh Jetbrains are doing VS Code now?
[18:42:31] <ville> aniketgm: you write your addons in real programming language. not some scripting sillyness
[18:48:16] <aniketgm> ville: yea. who's complaining ?
[18:49:20] <ville> aniketgm: you were wondering what's the selling point of yed
[18:57:29] <aniketgm> oh yeah. writing in C does give more flexibility. I meant, what more does it provide that vim doesn't.
[18:58:18] <rpav> PJBoy: yeah thats what it's being compared to though my guess is it's basically intellij with less stuff loaded, and a network connection
[18:58:33] <aniketgm> so let's see the yed page says: fast, layered frame management, truecolor, dynamic binding, etc. these are all provided by vim.
[19:00:35] <aniketgm> although, interesting would be the customizations that people would come. vim community doesn't allow a good change. that's why they came up with neovim
[19:00:50] <rpav> vim has a fair bit of scripting now i thought
[19:01:07] <rpav> nothing like emacs of course and not sure what neovim does
[19:01:54] <aniketgm> rpav: it's somewhat similar to what Rust is doing to C.
[19:02:56] <rpav> trying to find relevance, anywhere? ;)
[19:03:44] <aniketgm> rpav: https://www.linuxfordevices.com/tutorials/linux/vim-vs-neovim
[19:06:41] <rpav> my various simple searches aren't showing "what code you can write in neovim you can't in vim" ;/
[19:07:38] <urdh> i mean, the same is true in the C vs. Rust case
[19:07:44] <aniketgm> well, we are talking about extensions here.
[19:08:03] <rpav> nah rust clearly has a lot of constructs C doesn't
[19:08:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[19:08:12] <rpav> and a vastly more modern stdlib
[19:08:32] <rpav> if C added RAII though ;)
[19:08:51] <aniketgm> maybe the Rust vs C example wasn't appropriate here.
[19:09:07] <InPhase> rpav: C already has a full RAIM implementation in place.
[19:09:17] <LordKalma> !rust
[19:09:18] <nolyc> Rust is composed of iron oxides. In colloquial usage, the term is applied to red oxides, formed by the reaction of iron and oxygen in the presence of water or air moisture.
[19:09:20] <InPhase> Resource Acquisition Is Manual.
[19:09:27] <aniketgm> one thing I still wonder is Rust still being not standardized even after so much industry use.
[19:09:30] <urdh> rpav: but you can still write everything in both, since they are both turing complete
[19:09:30] <urdh> you
[19:09:32] <rpav> InPhase: :P
[19:09:41] <urdh> you'll just have a terrible time doing it in C
[19:09:42] <rpav> urdh: a useless comparison :P
[19:09:47] <aniketgm> LordKalma: lol
[19:10:00] <LordKalma> !c
[19:10:01] <nolyc> c is an old byte processing language without templates, exceptions, namespaces, constructors/destructors (and therefore RAII), virtual function polymorphism, references, operator/function overloading, reusable standard generic containers, or explicitly named casts.
[19:10:16] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[19:10:16] <InPhase> It is type sensitive though.
[19:10:35] <InPhase> case sensitive I mean.  Joke failed.
[19:10:50] <rpav> urdh: i mean, _yes_, but "they're both turing complete" is kinda the last-defense comparison sortof thing .. like, brainfuck is turing complete, but good luck writing much of value in that ;)
[19:11:06] <aniketgm> InPhase: no. you're on point :P
[19:11:08] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[19:11:11] <LordKalma> Rockstar is also turing complete
[19:11:20] <LordKalma> aniketgm, actually C's type system is a joke
[19:11:31] <LordKalma> it takes 30 minutes of coding in C to need a void*
[19:11:33] <rpav> wihtout a compiler, because apparently https://github.com/arthaud/c2bf :D
[19:12:01] *** Joins: yolo (~xxiao@159.89.184.51)
[19:12:17] <InPhase> LordKalma: I'm not sure that's a fair statement.  It usually doesn't take THAT long.
[19:12:26] <LordKalma> hahahah
[19:13:20] <urdh> rpav: yeah but presumably neovim has some added value over vim, just like Rust has some added value over C
[19:13:57] <urdh> (and both vim and C probably have die-hard zealots that won't use those fancy new-fangled things)
[19:14:37] <rpav> urdh: no doubt (though some of the articles indicate vim has caught up a bit?), i'm just disappointed they don't have better advertising .. assuming simple code samples are 🤔 .. but code samples to me matter like gameplay screenshots/video
[19:15:18] <urdh> also lol a c-to-brainfuck transpiler written in OCaml?
[19:15:22] <urdh> people have too much free time
[19:15:31] <rpav> srs
[19:15:55] <rpav> although now i wonder if there's a bf llvm backend
[19:16:01] <aniketgm> rpav: they caught up. but it's too late. the ship has sailed. neovim is gaining popularity.
[19:16:51] <rpav> https://github.com/shinh/elvm D:
[19:16:53] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 268 seconds)
[19:17:03] <LordKalma> I still prefer my browser editor
[19:17:28] <cart_man> So I am working through  a book. And in this book I have the following piece of code -> https://wandbox.org/permlink/eujqnBg1MUUodWkt    ... I can not figure out what the std::forward does
[19:18:01] <rpav> aniketgm: sure .. i haven't really paid attention to vim in decades though other than to know enough to use and get around over high-latency connections
[19:19:06] <InPhase> vim is my bread and butter.  neovim is that thing I install once in a while but never end up loading because of so much muscle memory for typing vim.
[19:19:49] <InPhase> Launching vim 50+ times a day for 15 years leaves a mental mark.
[19:20:21] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[19:20:24] <rpav> cart_man: it's sortof "type deduction correction" in the case of variadic templates and forwarding references, i.e. `template <typename...Ts> void foo(Ts&&...) { }`
[19:20:25] <InPhase> That's probably over 200,000 launches of vim.
[19:20:53] <rpav> cart_man: not to be confusing with rvalue references, which are T&& in the absence of a template
[19:20:56] <aniketgm> 15 years! wow.
[19:21:41] <aniketgm> InPhase: neovim and vim have same key bindings, what's the difference you felt in that regard ?
[19:22:16] <rpav> cart_man: https://en.cppreference.com/w/cpp/utility/forward if you read carefully the example `wraper` code and the bullet points at the top it explains it .. if it's unclear, don't worry until you're dealing with forwarding refs
[19:22:32] <cart_man> rpav:  ok whow whow ... which part of that made it a variadic template?
[19:22:50] <rpav> the `...` in `typename...Ts`
[19:23:05] <rpav> which you don't need to use in the arguments
[19:23:25] <InPhase> aniketgm: Nothing really.  Although it feels weird having an extra line shaved off the bottom for a second status bar.
[19:23:26] <rpav> (but often do because that's often the point)
[19:24:13] <InPhase> aniketgm: Also to really make use of it I'd have to figure out how to port my vimrc modifications over.
[19:26:02] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:26:42] <aniketgm> hmm. yeah. that's bit of a work. but once you have all the configs in place. it's pretty extensible.
[19:30:01] <cart_man> rpav:  Forwards its result ... To the calling function? So its return forward(X(y));  where X returns INT ... therefore whatever calls the Forward will have to return an INT
[19:30:23] <rpav> cart_man: don't think of it as doing anything other than mapping types
[19:33:58] <manuels> Are there any libraries which we can use to implement gitignore like ignore files for file indexing?
[19:35:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:35:32] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[19:35:44] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:37:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:50:39] <rpav> not clearly but you could probably write one fairly trivially given a globbing library and some simple line parsing
[19:53:30] *** Parts: meator (~meator@user/meator) (Leaving)
[19:53:57] <rpav> (this assumes finding a glob library compatible with the rules, and supporting exclusions, but the rules look fairly standard and it doesn't seem a huge ask)
[20:07:18] <Haohmaru> !fact
[20:07:19] <nolyc> Haohmaru: Objects of type bad_any_cast are thrown by a failed any_cast.
[20:07:41] <Haohmaru> who threw that
[20:07:52] <PJBoy> a failed any_cast
[20:08:15] <Haohmaru> vandalism
[20:14:42] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:16:47] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[20:18:40] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[20:18:49] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[20:19:37] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:23:42] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[20:23:50] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[20:23:54] *** Quits: proller (~p@2a02:6b8:0:40c:440:1ebd:fa63:be89) (Ping timeout: 265 seconds)
[20:25:48] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[20:26:34] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:37:35] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3831:16c5:17f3:e631) (Quit: Quit)
[20:40:07] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[20:40:14] <tct> given a container of strings, what is the fastest way to check whether there are duplicates? I assume the native way would be to use an std::vector or similar and iterate over it for each item encountered to check whether it exists more than one time but I´d like to understand what better options there are
[20:40:54] <tct> another approach I though of is using an std::unordered_map<std::string, std::size_t> increasing the second parameter every time I insert into it if the name exists already
[20:41:10] <tct> another approach I though of is using an std::multimap and checking that for duplicate keys
[20:41:21] <Haohmaru> i guess, it'd be good if you sort them and then any duplicates will be neighbours
[20:41:22] <ville> tct: it's always impossible to say what is "the fastest" or "the best". those sort of things depend highly on real details
[20:41:23] <tct> we talk less than 1k items
[20:41:32] <Haohmaru> another way would be to add them to one of those.. maps
[20:41:34] <tct> ville, indeed - that is why I cam here :)
[20:41:45] <ville> tct: ask u a question that can't be answered?
[20:41:52] <ville> err ask us
[20:42:08] <tct> ville, well, I get your point. I came to discuss possibilities/options so I can evaluate which one is the best fitting for my particular situation.
[20:42:09] <kalven> tct: what do you want to do if there are dupes?
[20:42:12] *** Joins: proller (~p@2a02:6b8:0:40c:df9a:5d06:33ea:266f)
[20:42:28] <tct> kalven, inform the user via a message (a validation report)
[20:42:34] <Haohmaru> kalven fire an employee ;P~
[20:43:19] <kalven> tct: so it's an error basically? you can use unordered_set. the insert function can tell you if the inserted value was already in the set or not
[20:43:48] <tct> kalven, indeed. I already had a look at std::set::insert() but then wanted to talk to you guys first
[20:45:43] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[20:45:44] <Haohmaru> ah, "set" is what i meant, not "map"
[20:46:35] <Haohmaru> !std::set
[20:46:36] <nolyc> http://en.cppreference.com/w/cpp/container/set
[20:47:25] * Haohmaru gives nolyc a GMO-free cookie
[20:47:41] *** Quits: proller (~p@2a02:6b8:0:40c:df9a:5d06:33ea:266f) (Ping timeout: 252 seconds)
[20:49:12] <MaddHatter> set is going to have to search on every insert and won't be contiguously allocated. If your algorithm is ammenable such that all the writes and all the reads occur at different times, you'll likely be better off inserting into std::vector and then std::sort-ing it
[20:49:38] <tct> reads happen all at the same time. writes are all over the place.
[20:50:22] <MaddHatter> if your reads and your writes are interleaved and you still need to detect duplicates during both, then set is where I'd look
[20:50:26] <Haohmaru> i'd just go with the vector and sort it..
[20:51:32] <MaddHatter> but really, the answer with performance is always the same: try the alternatives and test them in your actual use case
[20:51:39] <Haohmaru> hm, make an template<> AI container that uses either the vector+sort or the std::set under the hood depending on $magic
[20:54:29] <tct> thanks guys
[20:55:01] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:56:14] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[20:57:58] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[20:58:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[21:01:01] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[21:02:54] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[21:03:32] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[21:05:07] *** Joins: proller (~p@2a02:6b8:0:40c:4654:87f9:4630:168e)
[21:10:42] <cart_man> This is what I get when I try and execute  a function that resides as a member pointer in my class ->  no instance of function template "std::invoke" matches the argument list . argument types are: (std::function<void (std::string)> *, std::string)
[21:11:18] <cart_man> I can not seem to execute -> std::function<void(std::string)> *callback_ptr;   simply as callaback_ptr(some_string);
[21:11:33] <cart_man> I mean callback_ptr(some_string);
[21:12:00] <kalven> if it's a pointer then (*callback_ptr)(some_string);
[21:13:20] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:13:27] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[21:13:51] <cart_man> kalven: I tried that but -> expression preceding parentheses of apparent call must have (pointer-to-) function type
[21:14:05] <kalven> can you paste some actual code to a pastebin?
[21:19:15] <PJBoy> 'cause I ain't yo callaback ptr, no I ain't no callaback
[21:20:41] <LordKalma> std::function
[21:20:46] <LordKalma> !std::function
[21:20:47] <nolyc> http://en.cppreference.com/w/cpp/utility/functional/function
[21:20:48] <LordKalma> :D
[21:23:32] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5c9b:338b:bb4b:5779)
[21:24:06] <MaddHatter> why does std::move_only_function exist? I don't get it.
[21:24:26] <LordKalma> !std::move_only_functio
[21:24:27] <nolyc> LordKalma: Error: "std::move_only_functio" is not a valid command.
[21:24:36] <PJBoy> to enforce that you never have to pay for copying
[21:24:37] <LordKalma> !std::move_only_function
[21:24:38] <nolyc> LordKalma: Error: "std::move_only_function" is not a valid command.
[21:24:46] <MaddHatter> here: https://en.cppreference.com/w/cpp/utility/functional/move_only_function
[21:25:37] <PJBoy> [P0288]
[21:25:37] <npaperbot> P0288R9: [Library] move_only_function (was any_invocable) <https://wg21.link/p0288r9> (by Matt Calabrese, Ryan McDougall) (2021-08-27) (Related: https://wg21.link/p0288r9/github)
[21:25:58] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:26:01] <PJBoy> > provides support for cv/ref/noexcept qualified function types
[21:26:07] <PJBoy> that's potentially useful?
[21:26:55] *** Quits: limubs (~limubs@cgn-89-0-49-196.nc.de) (Ping timeout: 252 seconds)
[21:30:01] <PJBoy> { unique_ptr<string> p(new string("jazz")); auto f = [p = move(p)] { SHOW(*p); }; function fun(f); }
[21:30:01] <geordi> error: static assertion failed: function target must be copy-constructible
[21:30:25] <PJBoy> see, wouldn't it be nice if I could put that lambda capturing a move-only object into a function-like class
[21:31:41] * Haohmaru hasn't had sufficient amount of coffee to even begin to parse that ^
[21:31:44] <PJBoy> or any callable that contains a move only member
[21:33:08] <cart_man> kalven: https://wandbox.org/permlink/BGGF0XSpl5gV6I4f
[21:33:25] <MaddHatter> I can almost convince myself why f isn't copy-constructible there
[21:34:34] <PJBoy> it has a unique_ptr capture
[21:34:47] <PJBoy> equivalent to a class that has a unique_ptr data member
[21:35:21] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[21:36:55] <kalven> cart_man: https://wandbox.org/permlink/bzMjg8yuCKKI3NKl
[21:38:25] <cart_man> kalven: What did you change?
[21:39:17] <kalven> you can diff it yourself.. there were a bunch of small changes
[21:39:24] <MaddHatter> PJBoy: okay, but wouldn't it be better to just fix std::function instead of making a new thing?
[21:39:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:35] *** ChanServ sets mode: +v npaperbot
[21:40:12] *** Joins: Tokamak (~Tokamak@172.58.191.126)
[21:40:16] <MaddHatter> or another way to ask, why would I ever use std::function instead of move_only_function?
[21:44:02] *** Quits: Tokamak (~Tokamak@172.58.191.126) (Read error: Connection reset by peer)
[21:46:23] <great_taste> is there a compiler profiler that tells us what is making compilation slow?
[21:46:58] <kalven> clang can output pretty extensive profiling info
[21:47:52] <kalven> -ftime-trace
[21:49:12] <RandomReader> msvc has vcperf
[21:49:59] <Alipha> cart_man: https://wandbox.org/permlink/XmyifK5dEU0hy3kf
[21:50:53] <Alipha> cart_man: to re-iterate, std::forward forwards whether a "forwarding reference" argument was an lvalue or rvalue
[21:54:12] *** Joins: xkuru (~xkuru@user/xkuru)
[21:55:02] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:57:27] <ville> copy_or_move()
[21:59:31] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[22:02:05] <robod34> hello
[22:02:15] <Alipha> robod34: hi
[22:02:48] <robod34> i use CoCreateInstance(CLSID_WICImagingFactory, in a dll I am initializing in a process
[22:03:31] <robod34> now, if i spawn multiple threads that initialize the WIC factory
[22:03:47] <robod34> they all crash because of conflicts amongst them
[22:04:04] <robod34> i tried using CoGetClassObject(CLSID_WICImagingFactory,
[22:04:20] <robod34> but it fails to initialize
[22:05:20] <robod34> these are the params i pass to it: (CLSID_WICImagingFactory, CLSCTX_INPROC_SERVER, NULL, IID_PPV_ARGS(&m_pIWICFactory))
[22:05:25] *** Quits: proller (~p@2a02:6b8:0:40c:4654:87f9:4630:168e) (Ping timeout: 252 seconds)
[22:05:45] <robod34> what am I doing wrong?
[22:06:35] <Alipha> !give robod34 testcase
[22:06:36] <nolyc> robod34: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[22:06:49] <Alipha> you might also want to try one of the windows-specific channels
[22:06:51] <Alipha> !windows
[22:06:52] <nolyc> You should ask your Windows programming questions in #C++-general, #winapi, #windows-coding or irc://irc.efnet.org/winprog
[22:07:06] <robod34> thank you Alipha
[22:07:09] *** Joins: magla (~gelignite@55d43df6.access.ecotel.net)
[22:07:13] <robod34> however it is a dll
[22:07:52] <great_taste> ugh... changed one line in this file and it took 1 min and 41 secs to compile, a single file...
[22:08:34] <great_taste> with less than 300 lines. It's calling some template stuff so it must be that
[22:09:10] <robod34> Alipha https://paste.gg/p/anonymous/5b415f17b1d147dda87d6ca7fe7d43a8
[22:09:26] <robod34> i need to get CoGetInit function working
[22:10:26] <kalven> great_taste: the feature I mentioned lets you see how long every template instantiation takes
[22:10:27] <robod34> side note: #windows-coding is.... quite empty ^_^
[22:11:48] <great_taste> kalven I'll look into that, thanks
[22:12:16] <robod34> i need to instantiate the com object [wic factory] in a thread safe manner
[22:12:27] <robod34> how can I do it?
[22:12:49] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:3b12:6706:4ee5:604d)
[22:15:14] <Alipha> great_taste: how many headers does it include though? and your build system is set up to only recompile "what changes"?
[22:15:25] <Alipha> (or was the change in a header file?)
[22:15:55] <robod34> PJBoy, do you have any suggestion?
[22:18:28] <great_taste> Alipha it only recompiles the file that changed. The change is in the cpp file. It includes a ton of headers indirectly :P
[22:19:02] <great_taste> I could isolate this bit in a separate cpp file
[22:19:05] *** SuperNintendoSUX is now known as BucetaRosa
[22:19:36] *** Joins: paul424 (~tom@ip-31-0-123-68.multi.internet.cyfrowypolsat.pl)
[22:31:03] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:31:16] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:33:16] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[22:33:26] <cart_man> Is this possible ? -> std::function([](std::string x){std::cout << x << std::endl;})
[22:34:17] <RandomReader> robod34 - I'd start by getting the actual error message
[22:34:38] <RandomReader> at least print the hresult so you can look it up, but it'd probably be more useful to translate it directly and print
[22:34:47] <MaddHatter> {std::function([](std::string x){std::cout << x << std::endl;})}
[22:34:47] <geordi> error: expected ';' before '}' token (fix known)
[22:34:52] <MaddHatter> {std::function([](std::string x){std::cout << x << std::endl;});}
[22:34:53] <geordi>  
[22:35:05] <RandomReader> you can use _com_error if that's available, construct it and use .ErrorMessage()
[22:35:48] <RandomReader> if not, use FormatMessage instead: https://docs.microsoft.com/en-us/windows/win32/cossdk/interpreting-error-codes
[22:36:06] <RandomReader> also the debugger may interpret the error code, there's at least a tool or two in the SDK, etc
[22:37:37] *** Joins: r-g (~r-g@163.172.58.132)
[22:38:15] <MaddHatter> Just make sure to use the right flags with FormatMessage (unlike the example code on that page)
[22:38:37] <RandomReader> ...although your CoGetClassObject call looks like it's missing a param...
[22:38:58] <RandomReader> where do you expect the object to appear? :)
[22:40:38] <MaddHatter> ... because https://devblogs.microsoft.com/oldnewthing/20071128-00/?p=24353
[22:40:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8f84:8d09:7b68:c6ce) (Ping timeout: 250 seconds)
[22:43:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:770c:7340:e88b:8722)
[22:43:22] <RandomReader> actually the same would be true for CoCreateInstance, is this pseudocode or something?
[22:43:24] <robod34> RandomReader, now that i look at it, both seem to miss a param
[22:43:43] <rpav> it seems insane but i think writing a custom graphics/windowing system with mostly off-the-shelf stuff would actually be pretty doable these days
[22:43:52] <RandomReader> where are the declarations coming from that allow these to compile?
[22:44:02] <RandomReader> this is msvc with the windows sdk, right?
[22:44:20] <rpav> my thought is basically like, screen/tmux for GL/vulkan-rendered boxes
[22:44:40] <robod34> RandomReader, yes
[22:44:45] <RandomReader> hmm
[22:45:17] <robod34> the version with CoCreateInstance() is straight from a MSDN wic example
[22:47:09] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:47:29] <RandomReader> oh it's the macro, my bad
[22:47:31] <RandomReader> I forgot that was a thing
[22:47:34] <RandomReader> IID_PPV_ARGS
[22:47:52] <robod34> i can show you my main function, if it helps
[22:47:55] <robod34> yes
[22:48:01] <RandomReader> it expands to both args, so it's fine
[22:48:11] <RandomReader> back to looking at the hresult then :)
[22:52:56] <robod34> RandomReader: i get.... HRESULT -2147467262
[22:53:05] <robod34> https://paste.gg/p/anonymous/40fdaef69d624836850d2f235cce6109
[22:55:05] <robod34> how do I retrieve the error?
[22:57:01] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:643a:6fe1:69f2:5213)
[22:58:36] <robod34> RandomReader, i apologize if ask silly questions
[22:59:03] <robod34> I would not be here otherwise , asking things... so, please , help me if you know ...
[23:03:31] <RandomReader> if you're using VS, you can do Tools->Error Lookup and paste that in
[23:05:42] <ville> the recent murmurs in the python sphere makes a case for not using it for something you plan to run for a long time. things like build systems and environments
[23:05:58] <RandomReader> if you're not using VS, and don't want to add the printing code, you can manually decode it here: https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/0642cb2f-2075-4469-918c-4441e69c548a
[23:06:18] <RandomReader> or just use the related pages to find the same one: https://docs.microsoft.com/en-us/windows/win32/seccrypto/common-hresult-values
[23:08:09] <OnlineCop> A Makefile is compiling multiple gtests into .o objects, then linking those into a final binary. I want to only compile (and link/run) a single gtest right now, so I'm trying to combine the g++ options. Do the order of the flags ('-O#', '-W...', '-isystem ...', '-L...' etc.) matter?
[23:10:50] <OnlineCop> I see `-Bstatic -lgtest -Bdynamic -lpthread`. Do I need to keep those in the same order?
[23:20:52] <imMute> OnlineCop: some of them, yes.
[23:28:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:643a:6fe1:69f2:5213) (Quit: Quit)
[23:28:53] <robod34> RandomReader, thank you very much ; i use VS, yes; but it yields « messages not found »
[23:29:40] <RandomReader> that's odd, it should decode that just fine .. wonder if there's a locale thing going on
[23:30:01] <RandomReader> anyway, it translates to E_NOINTERFACE
[23:30:08] <RandomReader> in hex it's 0x80004002
[23:31:00] <RandomReader> offhand I'd guess that maybe CoGetClassObject will only provide IClassFactory, and you'd need to use that to get the more specific WIC factory, but it's been a while since I was dealing with COM
[23:36:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:39:13] <BucetaRosa> gaah windows errors
[23:39:42] <BucetaRosa> +_+ COM
[23:40:16] <mort> https://brevzin.github.io/c++/2021/12/13/optional-ref-ptr/ hey it's this topic again
[23:40:55] *** Joins: badone (~badone@209.132.189.136)
[23:41:36] <RandomReader> lol
[23:42:05] <RandomReader> base COM isn't bad .. it's some of the abstraction layered on top that gets confusing: COM+, OLE, etc
[23:42:37] <RandomReader> one of the things I dislike about Microsoft's API patterns is they tend to be a lot like C++: go for flexibility even if it's more difficult to put together the simplest operations
[23:42:48] <RandomReader> C++ stdlib*
[23:43:26] <BucetaRosa> COM is easier to use with C#
[23:43:40] <RandomReader> e.g. std::find or container.find when all you really want is container.contains()
[23:43:42] *** Quits: Cyp (~cyp@213.237.85.9) (Remote host closed the connection)
[23:44:08] *** Joins: Cyp (~cyp@213.237.85.9)
[23:44:25] *** Joins: seninha (~seninha@user/seninha)
[23:45:42] <mort> I just want "iterate over parts of this string, split by this delimiter" but that's harder than in C ffs
[23:50:34] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[23:51:54] <robod34> thank you RandomReader
[23:53:07] <rpav> OLE; there's one i haven't heard in a long time
[23:55:05] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[23:57:56] *** Joins: proller (~p@80.240.216.69)
