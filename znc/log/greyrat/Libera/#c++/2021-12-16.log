[00:01:16] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[00:02:02] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:03:47] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:04:35] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Quit: No Ping reply in 180 seconds.)
[00:05:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:08:44] *** Joins: teepee (~teepee@openscad/teepee)
[00:10:21] *** Quits: pa (~pah@user/pah) (Quit: quit.)
[00:11:11] *** Joins: pah (~pah@user/pah)
[00:12:36] *** Quits: furrymcgee (~devuan@cgn-89-1-209-93.nc.de) (Quit: leaving)
[00:13:32] *** Quits: proller (~p@2a02:6b8:b081:8003::1:3) (Ping timeout: 240 seconds)
[00:14:01] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[00:15:23] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[00:15:23] *** Quits: undephin3d (~undephin3@158.181.80.251) (Ping timeout: 252 seconds)
[00:16:58] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[00:21:35] *** pah is now known as pa
[00:24:03] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[00:25:05] *** Quits: Cahaan (~Cahaan@user/cahaan) (Read error: Connection reset by peer)
[00:25:30] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:27:11] *** Quits: pa (~pah@user/pah) (Quit: quit.)
[00:28:14] *** Joins: proller (~p@2a02:6b8:b081:8801::1:2d)
[00:28:16] *** Joins: Cahaan (~Cahaan@user/cahaan)
[00:29:31] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[00:31:24] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:32:46] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:32:56] *** Quits: DrMax_ (~DrMax@132.215.96.36) (Remote host closed the connection)
[00:33:08] *** Joins: pah (~pah@user/pah)
[00:33:46] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:35:00] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:35:13] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[00:35:39] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7bc1:436b:e88b:37f9)
[00:35:45] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[00:36:26] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:42:17] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:43:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:46:45] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[00:58:10] <CarloWood> It's for a vulkan render graph that I want to abuse C++ syntax for to hardcode into C++. Kinda like boost::... I can't remember the name :(
[00:58:58] <imMute> Hana?
[00:58:58] *** pah is now known as pa
[00:59:00] <kalven> spirit?
[00:59:10] <CarloWood> yeah
[00:59:17] <CarloWood> spirit
[00:59:57] <CarloWood> What I really want/need is to "draw" an DAG with C++ objects.
[01:00:09] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[01:00:19] <CarloWood> Maybe invent a new language that allows to do that :P.
[01:01:12] <CarloWood> README that I am writing: https://gyazo.com/9ac87ec3517fb7c691b5366864e3cc73
[01:01:44] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:02:19] <kalven> http://www.eelis.net/C++/analogliterals.xhtml
[01:02:30] <CarloWood> I saw that before.
[01:02:41] <CarloWood> It doesn't allow to draw DAG's :p
[01:03:06] <kalven> both are equally bad ideas
[01:04:15] <CarloWood> Why? A graph is often an excellent way to visualize how something works or is structured.
[01:04:47] <kalven> yes, but not so much in c++ code
[01:04:53] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 252 seconds)
[01:05:08] <CarloWood> That's cause C++ doesn't support drawing graphs with code :/
[01:05:41] <kalven> there are other reasons
[01:05:55] <CarloWood> I suppose that what I could do is write a program that allows one to draw it graphically and then generate code.
[01:06:15] <kalven> or just load it from a file
[01:06:18] <CarloWood> but well... I am not good at writing graphical programs.
[01:06:44] <CarloWood> You mean use ascii art in that file?
[01:07:13] <kalven> no, I don't think ascii art is useful here
[01:08:50] <kalven> imagine inserting another pass between PASS4 and PASS9 in your readme - do you want to get on with the work or do you want to spend a bunch of time doing busywork to make the ascii art line up?
[01:09:13] <kalven> but I think we're far from #c++ material now, so I'll shut up
[01:10:24] *** Quits: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de) (Quit: leaving)
[01:13:42] *** Quits: froggyc (~froggy@2.235.241.212) (Quit: ZNC 1.8.2 - https://znc.in)
[01:15:53] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[01:16:42] *** Joins: c4017w (~c4017@209.52.68.8)
[01:16:57] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:17:58] *** Joins: Pook (~Pook@2001:8a0:f996:1400:fca9:f418:183a:ac1)
[01:19:41] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:29:13] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:31:22] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:32:13] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:32:15] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[01:35:11] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:35:46] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:36:34] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:39:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:41] *** ChanServ sets mode: +v npaperbot
[01:40:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:44:25] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[01:44:40] *** Joins: pflanze__ (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[01:45:11] *** Quits: pflanze_ (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Read error: Connection reset by peer)
[01:49:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:53:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:57:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:00:15] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:01:12] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:01:43] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[02:02:53] *** Quits: magla (~gelignite@55d4970c.access.ecotel.net) (Quit: Stay safe!)
[02:07:08] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[02:07:39] *** Joins: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de)
[02:08:04] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[02:08:10] *** Quits: andreasbuhr (~quassel@p549db4c8.dip0.t-ipconnect.de) (Client Quit)
[02:10:12] *** Joins: undephin3d (~undephin3@158.181.80.251)
[02:10:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:14:00] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:16:22] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:18:05] *** moose`` is now known as moose
[02:32:38] *** Quits: pizdets_ (~pizdets@183.182.110.83) (Ping timeout: 250 seconds)
[02:33:59] *** Joins: pizdets (~pizdets@183.182.110.46)
[02:34:00] *** Joins: wyre_ (~wyre@user/wyre)
[02:34:17] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:35:17] *** Quits: wyre (~wyre@user/wyre) (Ping timeout: 265 seconds)
[02:35:55] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[02:36:06] *** Joins: patrick1618 (~AdminUser@194-96-167-23.adsl.highway.telekom.at)
[02:39:11] *** anyone is now known as zz
[02:39:54] *** Joins: ferdna (~ferdna@user/ferdna)
[02:40:38] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[02:41:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:42:12] *** Quits: feldim2425_ (~feldim242@dynamic-2jh5c12ho4ku74b7y2-pd01.res.v6.highway.a1.net) (Quit: ZNC 1.8.x-git-91-b00cc309 - https://znc.in)
[02:42:22] *** Joins: feldim2425 (~feldim242@dynamic-2jh5bzqjon1p3s4qfp-pd01.res.v6.highway.a1.net)
[02:56:45] *** Quits: patrick1618 (~AdminUser@194-96-167-23.adsl.highway.telekom.at) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:57:00] *** Joins: patrick1618 (~quassel@194-96-167-23.adsl.highway.telekom.at)
[03:02:04] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[03:03:34] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[03:07:19] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[03:07:40] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:13:06] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:6da9:d334:4fce:a8fc) (Quit: Client closed)
[03:14:10] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[03:15:03] <NyB> I've been playing around with templates for a while, and I realized I don't quite understand them as well as I though. Take, for example this: https://wandbox.org/permlink/N48BYyTe3jYlTKh1
[03:15:18] <NyB> What should I be looking at to figure at why it compiles?
[03:18:33] <NyB> I'm especially surprised at the is_class_v test returning true, since instantiating Bar<int> should always fail to compile...
[03:22:16] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[03:22:36] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[03:24:17] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:24:24] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Quit: Leaving)
[03:25:21] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[03:26:46] <NyB> I suppose in this case Bar is not exactly an incomplete type. I just don't know the right term for what it is :-)
[03:26:58] <NyB> s/Bar/Bar<int>/
[03:27:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:29:12] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[03:29:31] <jaakkos> NyB: seems related: https://stackoverflow.com/questions/43762072/static-assert-and-class-templates
[03:30:03] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (*.net *.split)
[03:30:03] *** Quits: feldim2425 (~feldim242@dynamic-2jh5bzqjon1p3s4qfp-pd01.res.v6.highway.a1.net) (*.net *.split)
[03:30:03] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (*.net *.split)
[03:30:03] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (*.net *.split)
[03:30:03] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7bc1:436b:e88b:37f9) (*.net *.split)
[03:30:03] *** Quits: Cahaan (~Cahaan@user/cahaan) (*.net *.split)
[03:30:03] *** Quits: zmt01 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (*.net *.split)
[03:30:03] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (*.net *.split)
[03:30:03] *** Quits: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1) (*.net *.split)
[03:30:03] *** Quits: reset (~reset@user/reset) (*.net *.split)
[03:30:03] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[03:30:03] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[03:30:03] *** Quits: minto_ (~mintograd@47.201.5.61) (*.net *.split)
[03:30:03] *** Quits: nvmd (~nvmd@user/nvmd) (*.net *.split)
[03:30:03] *** Quits: limubs (~limubs@cgn-89-0-53-192.nc.de) (*.net *.split)
[03:30:03] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (*.net *.split)
[03:30:03] *** Quits: evangeline (~Eleanor@178.79.105.181) (*.net *.split)
[03:30:03] *** Quits: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca) (*.net *.split)
[03:30:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: Kulrak (Kulrak@n122-109-28-121.rdl1.qld.optusnet.com.au) (*.net *.split)
[03:30:03] *** Quits: hackkitten (~hackkitte@94.31.103.136) (*.net *.split)
[03:30:03] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[03:30:03] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[03:30:03] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[03:30:03] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (*.net *.split)
[03:30:04] *** Quits: cpuid (~cpuid@user/cpuid) (*.net *.split)
[03:30:04] *** Quits: vin (~vin@user/crash) (*.net *.split)
[03:30:04] *** Quits: dongcarl (~dongcarl@70.107.207.192) (*.net *.split)
[03:30:04] *** Quits: fluter- (~fluter@user/fluter) (*.net *.split)
[03:30:04] *** Quits: Hawker (~pi@user/hawker) (*.net *.split)
[03:30:04] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (*.net *.split)
[03:30:04] *** Quits: w\W (code@192.99.249.211) (*.net *.split)
[03:30:04] *** Quits: ndorf_ (~nd@ob.noxio.us) (*.net *.split)
[03:30:04] *** Quits: dv2 (~dv2@eclipse.oxfordfun.com) (*.net *.split)
[03:30:04] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (*.net *.split)
[03:30:04] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[03:30:04] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[03:30:04] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[03:30:04] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[03:30:04] *** Quits: haise01 (~haise01@user/haise01) (*.net *.split)
[03:30:04] *** Quits: mukti (mukti@user/mukti) (*.net *.split)
[03:30:04] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[03:30:04] *** Quits: Latexi95 (late@banhammer.fi) (*.net *.split)
[03:30:04] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[03:30:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[03:30:05] *** Quits: osse (~osse@zsh/user/osse) (*.net *.split)
[03:30:05] *** Quits: Jonno_FTW (~come@api.carswap.me) (*.net *.split)
[03:30:05] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (*.net *.split)
[03:30:05] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[03:30:05] *** Quits: preisi (~preisi@irc.prei.si) (*.net *.split)
[03:30:05] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (*.net *.split)
[03:30:05] *** Quits: noent (~quassel@squint.a-oben.org) (*.net *.split)
[03:30:05] *** Quits: daswf852 (~daswf852@user/daswf852) (*.net *.split)
[03:30:05] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[03:30:05] *** Quits: LittleFox (littlefox@rondra.lf-net.org) (*.net *.split)
[03:30:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[03:30:05] *** Quits: Pook (~Pook@2001:8a0:f996:1400:fca9:f418:183a:ac1) (*.net *.split)
[03:30:05] *** Quits: c4017w (~c4017@209.52.68.8) (*.net *.split)
[03:30:05] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[03:30:05] *** Quits: aLeSD (~aLeSD@139.47.114.114) (*.net *.split)
[03:30:05] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[03:30:05] *** Quits: bsffffff[m] (~bsffffffm@2001:470:69fc:105::1:4c49) (*.net *.split)
[03:30:06] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (*.net *.split)
[03:30:06] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[03:30:06] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: akacrs (k7f@user/akacrs) (*.net *.split)
[03:30:06] *** Quits: DrMax (~DrMax@node-1w7jra94757g13bsjcy4kedx7.ipv6.telus.net) (*.net *.split)
[03:30:06] *** Quits: celphi_ (sid97751@helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: tcsc (sid145321@id-145321.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: headline (sid102736@id-102736.tinside.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (*.net *.split)
[03:30:06] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[03:30:06] *** Quits: ERROH (~mama@user/mama) (*.net *.split)
[03:30:06] *** Quits: gobanon (~vardan@ti0035a400-2849.bb.online.no) (*.net *.split)
[03:30:06] *** Quits: m0shbear (~nope@205.185.119.231) (*.net *.split)
[03:30:06] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[03:30:06] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[03:30:06] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[03:30:06] *** Quits: HvszrStykp (~X@81.171.62.85) (*.net *.split)
[03:30:06] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[03:30:06] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[03:30:06] *** Quits: dartmouthed (~blackunsp@li761-35.members.linode.com) (*.net *.split)
[03:30:11] *** Joins: gobanon (~vardan@ti0035a400-2849.bb.online.no)
[03:30:11] *** Joins: Jonno_FTW (~come@api.carswap.me)
[03:30:16] *** Joins: feldim2425 (~feldim242@dynamic-2jh5bzqjon1p3s4qfp-pd01.res.v6.highway.a1.net)
[03:30:16] *** Joins: Latexi95 (late@banhammer.fi)
[03:30:16] *** Joins: noent (~quassel@squint.a-oben.org)
[03:30:18] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[03:30:19] *** Joins: HvszrStykp (~X@81.171.62.85)
[03:30:21] *** Joins: Kulrak (Kulrak@n122-109-28-121.rdl1.qld.optusnet.com.au)
[03:30:22] *** Joins: DrMax (~DrMax@node-1w7jra94757fzkt36qk02mggx.ipv6.telus.net)
[03:30:24] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[03:30:27] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[03:30:28] *** Joins: Pook (~Pook@2001:8a0:f996:1400:fca9:f418:183a:ac1)
[03:30:30] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[03:30:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:30:32] *** Joins: c4017w (~c4017@209.52.68.8)
[03:30:33] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[03:30:33] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[03:30:35] *** Joins: mukti (mukti@bitcommit.io)
[03:30:35] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[03:30:38] *** Joins: unyu (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1)
[03:30:39] *** Joins: ndorf (~nd@23.95.130.20)
[03:30:40] *** Joins: preisi (~preisi@irc.prei.si)
[03:30:41] *** Joins: cpuid (~cpuid@168.119.177.116)
[03:30:42] *** Joins: traxex (~traxex@205.166.94.16)
[03:30:42] *** Joins: ERROH (~mama@89-78-6-173.dynamic.chello.pl)
[03:30:45] *** Joins: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1)
[03:30:51] *** Joins: celphi_ (sid97751@helmsley.irccloud.com)
[03:30:52] *** Joins: zoraj (~zoraj@209.126.81.159)
[03:30:55] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[03:30:56] *** Joins: tcsc (sid145321@id-145321.lymington.irccloud.com)
[03:30:59] *** Joins: Stryyker (~stryyke1@ppp118-209-97-173.hba-tec-tas-bras31.tpg.internode.on.net)
[03:31:00] *** Joins: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca)
[03:31:00] *** Joins: vin (~vin@cortana.cs.wisc.edu)
[03:31:08] *** Joins: headline (sid102736@2a03:5180:f::1:9150)
[03:31:14] *** Quits: Stryyker (~stryyke1@ppp118-209-97-173.hba-tec-tas-bras31.tpg.internode.on.net) (Changing host)
[03:31:14] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[03:31:25] *** Joins: osse (~osse@150.37-191-137.fiber.lynet.no)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:35] *** Joins: dartmouthed (~blackunsp@li761-35.members.linode.com)
[03:31:36] *** Joins: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de)
[03:31:49] *** unyu is now known as Guest6030
[03:31:56] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[03:31:59] *** ERROH is now known as Guest5149
[03:32:03] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[03:32:11] *** Quits: cpuid (~cpuid@168.119.177.116) (Changing host)
[03:32:11] *** Joins: cpuid (~cpuid@user/cpuid)
[03:32:13] *** Joins: leah2 (~leah@vuxu.org)
[03:32:22] *** vin is now known as Guest1693
[03:32:28] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[03:32:48] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[03:33:02] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:33:08] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[03:33:16] *** Joins: evangeline (~Eleanor@178.79.105.181)
[03:33:18] *** Joins: mintograde (~mintograd@47.201.5.61)
[03:33:18] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[03:33:21] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:30] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Read error: Connection reset by peer)
[03:33:30] *** Joins: Cahaan (~Cahaan@user/cahaan)
[03:33:39] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Remote host closed the connection)
[03:33:44] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:33:48] *** Joins: elemongw (~elemongw@20.107.36.50)
[03:34:03] *** Joins: LittleFox (littlefox@rondra.lf-net.org)
[03:34:14] *** Quits: celphi_ (sid97751@helmsley.irccloud.com) (Changing host)
[03:34:14] *** Joins: celphi_ (sid97751@user/celphi)
[03:34:25] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[03:34:32] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[03:34:33] *** Joins: Telvana (~capo@user/telvana)
[03:34:36] *** Joins: slavfox (~slavfox@93.158.232.111)
[03:34:42] *** Joins: haise01 (~haise01@user/haise01)
[03:34:43] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:34:47] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:34:50] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[03:35:11] *** Joins: m0shbear (~nope@205.185.119.231)
[03:35:17] *** Joins: akacrs (k7f@user/akacrs)
[03:35:21] *** Joins: Hawker (~pi@user/hawker)
[03:35:22] *** celphi_ is now known as celphi
[03:35:27] *** Joins: klys (~mdasoh@show.op8.us)
[03:35:32] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[03:35:35] *** Joins: koolazer (~koo@user/koolazer)
[03:35:37] *** Joins: webstrand (~webstrand@user/webstrand)
[03:35:44] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[03:38:23] <jaakkos> NyB: so the precondition for implicit instantiation, "context that requires a completely defined type, or when the completeness of the type affects the code", is apparently not met in your case, but the wording seems quite unhelpful at least for me.
[03:38:28] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Client Quit)
[03:38:59] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Quit: Leaving)
[03:39:10] *** Quits: patrick1618 (~quassel@194-96-167-23.adsl.highway.telekom.at) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:39:40] *** Joins: bsffffff[m] (~bsffffffm@2001:470:69fc:105::1:4c49)
[03:40:36] <jaakkos> What should you think of "completeness of the type affects the code" o_O
[03:40:51] <NyB> jaakkos: I think that's it, thanks! cppreference (where that quote comes from) has a couple more examples
[03:41:19] <NyB> e.g. getting a pointer to Bar<int> would probably also work (going to test that...)
[03:42:45] <NyB> and, indeed, it does. So the compiler won't actually try to instantiate a type to see if it's valid, unless it absolutely has to.
[03:42:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:43:39] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:43:40] <NyB> I assume I could find more details if I spent O(hours) crawling over the C++ standard, but this is good enough for me
[03:47:13] *** Quits: luca0N (~luca0N@nautilus.luca0n.com) (Quit: Leaving)
[03:47:27] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:47:27] *** Joins: luca0N (~luca0N@nautilus.luca0n.com)
[03:47:51] *** luca0N is now known as Guest7846
[03:47:57] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[03:48:19] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[03:48:23] *** Joins: dv2 (~dv2@eclipse.oxfordfun.com)
[03:48:34] *** Guest7846 is now known as luca0N
[03:49:26] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[03:49:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[03:50:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:51:17] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:51:37] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:56:36] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[03:58:39] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:59:20] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Read error: Connection reset by peer)
[04:00:05] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[04:01:24] *** Joins: treble (~treble@user/treble)
[04:02:42] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:07:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f0bc:a1a7:555f:2527) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:07:42] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:08:56] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:14:09] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[04:14:31] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[04:15:13] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:15:15] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[04:16:02] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:16:02] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:17:20] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[04:18:51] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:24:10] *** vinleod is now known as vdamewood
[04:26:26] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:27:02] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:27:24] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:28:16] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:32:11] *** phrosty is now known as scalablecory
[04:34:37] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:35:09] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:37:42] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:38:41] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 250 seconds)
[04:40:00] *** Joins: rgrinberg (~textual@187.223.209.106)
[04:41:20] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[04:43:24] *** Joins: malloy (~jimery@116.30.221.255)
[04:43:29] *** Quits: dv2 (~dv2@eclipse.oxfordfun.com) (Remote host closed the connection)
[04:44:22] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:45:52] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[04:46:36] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:50:36] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[04:53:07] *** Joins: dv2 (~dv2@eclipse.oxfordfun.com)
[04:53:16] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Ping timeout: 245 seconds)
[04:57:20] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Read error: Connection reset by peer)
[04:58:05] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf)
[04:59:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[05:04:02] *** Joins: frost (~frost@user/frost)
[05:05:51] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:08:30] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:10:56] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[05:11:45] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Client Quit)
[05:12:50] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[05:13:18] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:14:13] *** Quits: treble (~treble@user/treble) (Ping timeout: 256 seconds)
[05:15:47] *** Joins: treble (~treble@user/treble)
[05:18:45] *** Quits: undephin3d (~undephin3@158.181.80.251) (Ping timeout: 256 seconds)
[05:20:05] *** Quits: Pook (~Pook@2001:8a0:f996:1400:fca9:f418:183a:ac1) (Quit: Leaving)
[05:24:21] *** Joins: karakedi (~eAC53C340@user/karakedi)
[05:26:27] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[05:29:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:32:57] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[05:39:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:43] *** ChanServ sets mode: +v npaperbot
[05:41:23] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[05:41:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:43:04] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:52:33] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[05:53:39] *** Quits: proller (~p@2a02:6b8:b081:8801::1:2d) (Ping timeout: 250 seconds)
[05:53:59] <Gamah> is there a nice way to add arrays of ints together?
[05:54:06] <Gamah> err, vectors of ints
[05:54:13] <Gamah> no... arrays, not vectors
[05:54:52] <Gamah> so i have a = [5,5,5,5]; b=[1,1,1,1] and want to get c = a+b = [6,6,6,6]
[05:54:52] <RandomReader> "add" in what sense?
[05:55:00] <RandomReader> ah
[05:55:08] <Gamah> is there a better way than just looping over them?
[05:56:10] <RandomReader> not really, with that set of inputs
[05:57:00] <RandomReader> there's std::valarray and a few third-party matrix math libraries if that's the direction you're going, but in terms of bare arrays, looping is about as simple as it gets
[05:57:59] <Gamah> this app is so simple i'm really trying to avoid pulling in any dependancies
[05:58:07] <Gamah> looping it is..
[06:03:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:03:32] <Alipha> { int a[] = {1,2,3,5}; int b[] = {20,30,50,70}; int c[4]; std::transform(std::begin(a), std::end(a), std::begin(b), std::begin(c), std::plus<int>{}); std::cout << c; } // Gamah
[06:03:33] <geordi> {21, 32, 53, 75}
[06:04:28] <Gamah> oo....
[06:06:24] *** Joins: proller (~p@80.240.216.69)
[06:08:18] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[06:14:32] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[06:15:18] *** Joins: Enitin (~Enitin@82.102.22.85)
[06:17:07] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[06:17:51] *** Joins: reset (~reset@user/reset)
[06:18:58] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:23:43] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:28:54] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:31:32] *** Joins: jplejacq (~jplejacq@cpe-173-92-3-64.carolina.res.rr.com)
[06:39:17] *** Joins: millido (~millido@84.210.150.128)
[06:41:29] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[06:42:40] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community: https://indiedevs.net/)
[06:45:17] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[06:49:29] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:50:25] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 250 seconds)
[06:53:39] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[06:58:18] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:e7e:a40e:598b:4092)
[07:02:45] *** Quits: traxex (~traxex@205.166.94.16) (Changing host)
[07:02:45] *** Joins: traxex (~traxex@user/traxex)
[07:04:21] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[07:05:54] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[07:07:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[07:10:14] *** Joins: Enitin (~Enitin@82.102.22.86)
[07:12:07] <Gamah> when i put the function as an argument to std::thread() a whole new copy of that is made for each thread right?
[07:13:25] <kalven> it'll copy the arguments
[07:13:31] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:18:13] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[07:22:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[07:23:16] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:28:41] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[07:28:47] *** Quits: jplejacq (~jplejacq@cpe-173-92-3-64.carolina.res.rr.com) (Ping timeout: 252 seconds)
[07:38:44] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:40:36] <Gamah> but everything the function instantiates gets its own copy
[07:40:58] <Gamah> so if somefunc() is passed to the thread but somefunc has int x... each thread has it's own x right?
[07:42:09] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[07:42:37] <kalven> if you're talking about some int on the stack of the function.. yes
[07:43:02] <Gamah> good.
[07:47:17] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:48:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:51:42] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:b584:44f5:72b6:6bbf) (Read error: Connection reset by peer)
[07:53:28] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879)
[07:53:38] *** Joins: daswf852 (~daswf852@user/daswf852)
[07:54:13] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[07:59:44] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[08:04:59] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[08:09:08] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[08:09:48] *** Joins: rgrinberg (~textual@187.223.209.106)
[08:19:18] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[08:25:30] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:29:07] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Ping timeout: 268 seconds)
[08:32:21] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[08:33:45] *** pflanze__ is now known as pflanze
[08:34:38] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[08:37:31] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:38:59] <pflanze> Is there a way to have error messages from clang (or g++) pretty-printed? In particular those messages about template instantiations that take 1000 characters in a single line.
[08:40:28] <pflanze> I seem to remember there's a tool for that but can't find it in DDG.
[08:41:54] <kalven> there was stlfilt a long time ago
[08:43:59] <pflanze> There's https://github.com/pranavkantgaur/STLfilt, 4 commits, all from 2015
[08:44:38] <pflanze> How do you handle it? I just find those messages so unreadable that the only thing I can do is skip them and try to figure out the issue another way.
[08:45:54] <kalven> I find the place where the error message referes to my code and look at it
[08:50:01] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[08:50:27] <mattf> hi
[08:51:30] <InPhase> This week I had a 5000+ line template error message from a missing comma.
[08:51:56] <InPhase> C++ might undergo a lot of standards development lately, but that problem is still a serious mess.
[08:53:03] <Alipha> pflanze: you get better at it the more you look at them. But indeed, the most important thing is identifying the line number of your code that's causing the error, which may be somewhere in the middle of the error "stack trace". And then go back up to the beginning of the error message and try to understand the gist of what it's saying
[08:53:42] <Alipha> and how your code is causing it
[08:54:17] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:54:25] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[08:54:41] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[08:54:54] *** Joins: vicfred (~vicfred@user/vicfred)
[08:56:11] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 245 seconds)
[08:57:29] <pflanze> OK, thanks. Perhaps I should start integrating C++ IDE modes into Emacs so that I can have it point out the lines automatically.
[08:57:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[08:57:43] <pflanze> That would make that part faster at least.
[08:58:10] <pflanze> (Any recommendations?)
[08:59:19] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Ping timeout: 250 seconds)
[08:59:44] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[09:00:38] *** Quits: murphy_ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com) (Ping timeout: 252 seconds)
[09:01:00] *** Joins: murphy_ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com)
[09:05:30] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:06:21] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[09:08:06] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:08:57] *** Joins: Burgundy (~yomon@79.115.213.171)
[09:14:46] <ville> !give pflanze general
[09:14:47] <nolyc> pflanze: #C++-general for algorithms, libraries, practices, projects, tools etc.
[09:15:08] <pflanze> Ah, thanks!
[09:16:41] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:19:45] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[09:28:07] <ville> pflanze: if you don't join the channel can't give recommendations how to setup emacs
[09:28:19] <pflanze> OK, coming
[09:28:45] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[09:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:41] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[09:39:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:42] *** ChanServ sets mode: +v npaperbot
[09:46:04] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:46:22] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[09:46:25] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Client Quit)
[09:46:49] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Max SendQ exceeded)
[09:47:18] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:47:58] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Max SendQ exceeded)
[09:48:26] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:49:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:50:27] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:50:41] *** Joins: sonic (~sonic@user/sonic)
[09:51:56] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:55:19] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:57:18] *** Quits: segnior_ (segnior@user/segnior) (Ping timeout: 268 seconds)
[10:00:16] *** Joins: segnior (segnior@user/segnior)
[10:02:03] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:02:08] *** wyre_ is now known as wyre
[10:04:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:05:35] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[10:10:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:11:37] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 240 seconds)
[10:11:56] *** Joins: sonic (~sonic@user/sonic)
[10:12:43] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[10:13:02] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:15:07] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e546:f9c1:f549:4c7e:0:281)
[10:16:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[10:21:16] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:27:02] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 240 seconds)
[10:28:48] *** Joins: sonic (~sonic@user/sonic)
[10:31:45] *** Joins: eson123 (~sss@118.69.128.37)
[10:33:46] <eson123> i am trying to do some type detection through C++ and here is whta i tried https://hatebin.com/qnywsfbqak, but somehow it fails to work, anyone knows why ? i put the error in there too
[10:34:09] *** Joins: jancoow (~jancoow@user/jancoow)
[10:37:38] <leduyquang753> Because you cast to the wrong type and forgot to dereference it.
[10:37:46] <leduyquang753> This is super cursed code anyway.
[10:37:59] <leduyquang753> What if two of the types have the same size?
[10:38:32] <eson123> i never met the situation where twos of the types have the same, usually char is 1, char* is 8, string is 32
[10:38:44] <eson123> also how would i typecast it then
[10:38:54] <leduyquang753> It's more common than you think.
[10:39:03] <TinoDidriksen> Types often have the same size.
[10:39:16] <leduyquang753> You should be passing `&b` which is `char**`.
[10:39:24] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:39:59] <eson123> i did try that but it would still result in the same error
[10:40:00] <TinoDidriksen> << sizeof(float), sizeof(int), sizeof(double), sizeof(uint64_t) // eson123
[10:40:01] <geordi> 4, 4, 8, 8
[10:40:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[10:40:39] <eson123> awh numbers, yea numbers do have same size, that's why i only put one type of number in there :P
[10:40:40] <leduyquang753> Try to think for a few more minutes. It should be similar to what you did to the other two cases.
[10:40:42] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[10:40:46] *** Quits: osse (~osse@150.37-191-137.fiber.lynet.no) (Changing host)
[10:40:46] *** Joins: osse (~osse@zsh/user/osse)
[10:41:07] <TinoDidriksen> You simply cannot do type detection in this way.
[10:41:21] <eson123> ok then how would u do it
[10:41:25] <TinoDidriksen> You don't.
[10:41:35] <RandomReader> what's the overall goal / problem you're trying to solve?
[10:41:57] <TinoDidriksen> Nearly all types are known at compile time, and for the few that aren't you have dynamic_cast
[10:42:54] <eson123> RandomReader: nothing really, i am just trying to redo what some other languages do in C++
[10:42:58] <eson123> mess around a bit
[10:43:14] <TinoDidriksen> Runtime type detection for non-polymorphic types is not something you'll ever need. That's for reverse engineering, not normal code.
[10:43:21] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:43:40] <Learath2> Maybe you are looking for variants? (std::variant)
[10:43:45] <RandomReader> several dynamically-typed languages are written in C or C++, so you can simply look at what they do
[10:43:52] <leduyquang753> Trying to find inside C++ every feature from other languages is not a good use of your time IMO.
[10:44:07] <RandomReader> but C++ has its own tools for solving problems, so trying to replicate the specific approach of another language is not very useful
[10:44:47] <RandomReader> the advantage of creating a language is that you're creating the environment, so it can behave any way you define it to
[10:45:07] <RandomReader> existing languages already have those choices made, so it turns into a case of learning what those are
[10:46:11] <RandomReader> for your purposes, I would pick which of those things you want to explore here: finding a solution to a problem in C++, or implementing an entirely different language by using C++
[10:46:36] <RandomReader> and then pursue that explicitly
[10:46:39] <eson123> fair enough, but i am still trying to do proper typecasting to figure out what is going wrong, then maybe i will try to look at variants
[10:47:08] <RandomReader> in general, you don't cast :P
[10:47:17] <Learath2> Well this is actually a rare case of the compiler being fairly clear as long as you've learned what lvalues are :P
[10:47:45] <eson123> the "l" hints me to something on the left
[10:47:47] <TinoDidriksen> That's not proper typecasting. If you ever need to transition via void*, then you save the actual type elsewhere.
[10:48:23] <eson123> oh no, it's not the left :P
[10:48:46] <RandomReader> one of the points of having a statically-typed language like C++ is that you use that type system as much as possible .. any other situation is a particular kind of problem with a particular kind of solution, not a common/generic approach to writing effective code
[10:49:54] <RandomReader> if you're interested in exploring type erasure as a concept, then maybe consider a series like https://akrzemi1.wordpress.com/2013/11/18/type-erasure-part-i/
[10:51:13] <eson123> ok i will
[10:51:30] <leduyquang753> So gave up on your own code yet? :)
[10:52:04] <eson123> i know it's cursed but i am still trying to fix that line tho to learn a bit more about pointers
[10:52:55] <leduyquang753> Let me know when you do give up then. :P (Not quite a joke.)
[10:55:21] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[10:55:22] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:56:30] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[10:56:58] <eson123> i still don't get it, &b when b is char * then it
[10:57:14] <eson123> **b, passing it through there and do *((char*)var) will turn it back to char *
[10:57:26] <eson123> but it doesn't seem like it
[10:57:41] <leduyquang753> No `*((char*)var)` is `char&`.
[10:57:49] <Learath2> It's indeed the level of indirection that you got wrong
[10:58:11] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 256 seconds)
[10:58:22] <leduyquang753> Here is the cursed code you want to write: `static char cs[] = "char here"; *((char**)var) = cs;`.
[10:58:33] *** Joins: sonic (~sonic@user/sonic)
[11:00:46] <RandomReader> (char*)var    -> telling the compiler "var" is holding an object of type char*  (which in this case is a lie, since that's not what you put in it)
[11:01:22] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[11:01:27] <leduyquang753> That's not what the expression means.
[11:01:44] <leduyquang753> It just casts the value of `var` into a `char*`.
[11:03:09] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[11:03:17] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Ping timeout: 252 seconds)
[11:03:59] <eson123> RandomReader: ok but say in case i pass only "b" which is char* through it and then tell the compiler "var" is holding an object of type char*, it should be valid right ?
[11:04:31] <RandomReader> leduyquang753 - except var is a void*, so there is no defined conversion, it must be pointer-interconvertible with the original value: https://eel.is/c++draft/expr.static.cast#13
[11:04:56] <leduyquang753> Yes it's UB but still that's what the expression means.
[11:04:57] <RandomReader> eson123 - that part of it would be valid yes, but the rest of the code would not be
[11:05:34] <eson123> RandomReader: ok so in that case (char*)var = "hello" should be valid ?
[11:05:37] <leduyquang753> If you have `int i = 5; float x = (float)i;` you are not telling `i` contains a `float`.
[11:05:42] <eson123> if iirc, "hello" is also char* or something similar
[11:05:44] <Learath2> um, it is a useful way to look at it, might not be the best idea to be too pedantic while helping a beginner
[11:05:51] <eson123> const char* maybe
[11:05:52] <leduyquang753> `""` is `const char*`.
[11:06:44] <RandomReader> eson123 - then that part would be valid, but the rest of the code would still not be, since it would not be affecting "b" :P
[11:07:18] <leduyquang753> `(char*)var = "hello";` is still invalid because `(char*)var` is a rvalue.
[11:07:20] <eson123> hm, according to my compiler, even that part isn't valid
[11:07:39] <RandomReader> leduyquang753 - that is a defined conversion, the specific expression I was referring to is not .. I was being quite deliberate when describing it as a lie
[11:08:15] <leduyquang753> So what code snippet are you referring to as "valid" then?
[11:08:44] <RandomReader> eson123 - you're correct, that one is my mistake .. if it did work, it would still not be affecting "b" though
[11:09:28] <RandomReader> (originally I was slicing that part of the expression out of your larger one, wrapped with "*(...)", so my head was still partly there)
[11:10:08] <RandomReader> leduyquang753 - my response to you was referring to the "(float)i" conversion
[11:10:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[11:11:37] <leduyquang753> `(char*)var` is also a perfectly defined conversion.
[11:12:14] <RandomReader> eson123 - one of the things you're running into here is confusion over the levels of indirection
[11:12:30] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:51ae:332f:e744:1dea)
[11:13:25] <RandomReader> the asterisks for pointer types tend to make things noisy, it might help to break it apart in a slightly different way
[11:13:28] <Learath2> If we are being more rigorous here the issue is that casts to non-reference types result in rvalues, rvalues don't describe objects, thus can't appear on the left hand side of an assignment. In maybe more understandable terms your cast results in a value, it doesn't make sense to assign to a value
[11:13:36] <eson123> yea my pointer knowledge is still flawed
[11:13:48] <eson123> and yes this code is horrible, it's killing my brain cells slowly
[11:14:02] <Learath2> It's like doing sizeof(int) = 5; sizeof(int) describes a value, not an object, assigning 5 to it is insanity
[11:14:20] <RandomReader> for the type int*, pretend it's written "ptr2int" .. this type holds a value (just like int), and it supports operators to do specific things (just like int)
[11:14:30] <RandomReader> int holds an integer value, it supports operators like addition and subtraction
[11:14:48] <RandomReader> ptr2int holds a location value, it supports operator * to access the object at that location
[11:15:23] <RandomReader> if you stack them, then ptr2ptr2int holds a location of a ptr2int, which holds a location of an int
[11:16:02] <RandomReader> so if you applied operator * to a ptr2ptr2int, you'd get a ptr2int .. and would need to use another * to access the int
[11:17:00] <RandomReader> what this code is trying to do is give the setvar() function the location of an object in main(), so it can change that object
[11:17:02] *** Joins: rendar (~rendar@user/rendar)
[11:17:05] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:17:11] <eson123> Learath2: awh, good to know about that
[11:17:50] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:18:44] <RandomReader> maybe breaking it down in pieces to be stacked will help reason about what location you are viewing, and what object you are changing, in that code
[11:19:59] *** Joins: malloy (~jimery@116.30.221.255)
[11:19:59] <RandomReader> in general though, C++ is the sort of language you really need to get the underlying concepts behind, it's difficult to learn by just syntax and example alone .. so would recommend a book from the stackoverflow link here:
[11:20:00] <RandomReader> !basics
[11:20:01] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[11:20:58] <RandomReader> one of the other things off in your original code paste is the include for <string.h>, which is so old it pre-dates the first C++ standard from over 20 years ago
[11:21:09] <Learath2> The overarching problem here is that what you are trying requires a fair bit of knowledge about how C++ works. In my experience it's not very easy to learn C and C++ from just doing stuff. They have small gotchas everywhere, they aren't like newer languages that are almost like english
[11:21:22] <RandomReader> so whatever material you're getting this from so far, it's pretty poor, and you should definitely use better material to learn from
[11:22:36] <leduyquang753> About setting variables of any type, C++ actually lets you write that code though it's very pointless. :)
[11:22:38] <RandomReader> (this is assuming you were doing that to get std::string, which isn't actually coming from there, it's just by accident via <iostream>)
[11:23:14] <RandomReader> (the correct include is <string>, no .h, and not wrapped in extern "C")
[11:24:32] *** Quits: rahl (~rahl@102.114.205.237) (Ping timeout: 240 seconds)
[11:26:27] *** Joins: rahl (~rahl@102.114.84.162)
[11:26:35] <eson123> RandomReader: oh no, previously i used to use the function strcpy, std::string is pretty standard already
[11:26:43] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:27:10] <RandomReader> ah, ok .. I brought that up because I've still seen some "guides" floating around out there from ancient times
[11:27:34] <RandomReader> std::string is standard but it requires including <string>
[11:27:57] <RandomReader> it's only working for you by complete accident that your specific <iostream> happens to include enough of it to work .. that isn't true in general
[11:28:42] <eson123> ok
[11:28:43] <RandomReader> so just a catch to watch out for
[11:28:58] <eson123> maybe i should try some of your resources, i am still horrible at indirections and pointers
[11:29:25] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Ping timeout: 240 seconds)
[11:29:53] <RandomReader> pointers tend to take a bit in general, it's the mix of indirection concept they represent, combined with the lousy syntax for them in C++ .. but hopefully some of those links will help
[11:30:31] <RandomReader> they're really not difficult once it clicks for you
[11:30:47] <eson123> i did previously learn C and C++ is really similar so i won't mind the syntax, but yea, indirection and pointers are still some tough concepts to master
[11:31:35] <leduyquang753> (The real beast in C++ is templates.)
[11:31:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:e7e:a40e:598b:4092) (Ping timeout: 240 seconds)
[11:33:22] <ville> eson123: syntax may be similar, but there are some fundamnetal differences. which means what may be valid in one is possibly not in the other
[11:33:47] <eson123> yep i know that, the ++ gives it away already :P
[11:33:53] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:34:02] <eson123> and classes, etc..
[11:34:03] <Learath2> um, doesn't seem like you've learned C either, what you are doing here was basically C and you've demonstrated you don't get pointers at all
[11:34:21] <eson123> Learath2: learning a language and completely master it is two different things
[11:34:26] <eson123> this is the concepts that both share
[11:35:38] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[11:36:03] <ville> eson123: http://ftp.acc.umu.se/mirror/gnu.org/savannah/pgubook/ProgrammingGroundUp-1-0-booksize.pdf possibly a good read at this point. chapters 1-4 should give a fair overview of the things c and c++ try to abstract over. including memory and pointers
[11:36:42] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[11:36:51] <eson123> ok then
[11:37:00] <RandomReader> yeah you might need to "unlearn" parts of C, that was an issue I had when getting into C++ .. there are some significant differences even in the core object models between them, despite the similarities of syntax
[11:38:06] <eson123> that's funny, i didn't even know C had objects... it has structs tho :P if that is what you mean
[11:38:30] <RandomReader> no, "objects" does not mean some OOP class thing, it's the fundamental item both languages manipulate: a conceptual container around data
[11:38:35] <RandomReader> an int is an object
[11:38:47] <eson123> awh.. ok, that
[11:39:13] <ville> eson123: also pointers are objects
[11:39:35] <RandomReader> C11 definition: http://port70.net/~nsz/c/c11/n1570.html#3.15
[11:39:53] <RandomReader> and the following intro/concept material starts digging into more about what that means
[11:40:30] <RandomReader> C++current intro: https://eel.is/c++draft/intro.object#1.sentence-1
[11:41:24] <Learath2> fwiw the differences between C and C++ don't really start to crop up early on in your adventure, so imo you are free to ignore them until you are more proficient
[11:42:16] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:43:42] <RandomReader> C++ gets more strict/rigid around types and objects, in order to define abstractions a bit better .. the type of an object defines the nature of its data, what operations it supports
[11:44:04] <RandomReader> in the abstract that's just language theory, "what is an int? a thing that supports addition via operator +" etc
[11:44:44] <RandomReader> but I find it useful to keep that in mind in a general sense when reasoning about things behave, including pointers .. which are just objects that support operator*
[11:44:50] <RandomReader> so they behave like other things in the language too
[11:45:22] <RandomReader> may help, may not, just a possible way of thinking about it
[11:45:58] <Learath2> Well there are some special semantics related to pointer types except the fact that they have operator* but yes, it is indeed a useful perspective
[11:46:47] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:56:08] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:51ae:332f:e744:1dea) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:56:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[12:00:31] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:01:56] *** Quits: eson123 (~sss@118.69.128.37) (Quit: Leaving)
[12:03:19] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:75e6:90b9:a33f:f625)
[12:10:12] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[12:10:51] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:11:24] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[12:11:49] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:11:53] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[12:13:25] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[12:14:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[12:17:26] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:17:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[12:19:49] *** Quits: Guest5149 (~mama@89-78-6-173.dynamic.chello.pl) (Quit: 42)
[12:20:04] *** Joins: ERROH (~mama@user/mama)
[12:25:26] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[12:26:35] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[12:27:37] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[12:33:06] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:35:14] *** Joins: andreasbuhr (~quassel@p548ddec4.dip0.t-ipconnect.de)
[12:38:52] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (Ping timeout: 268 seconds)
[12:39:07] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[12:48:57] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:53:53] <smallville7123> can anyone help me understand this pdf so i can implement it     ? 17:38:27 ville: the best looking explanation i've seen so far is: https://www.spinellis.gr/blog/20060626/cpp.algo.pdf but never tried to implement it, so dunno if that has all the necessary details
[12:54:20] <smallville7123> implement it in my macro parser *
[12:54:29] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:56:28] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:58:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[12:59:15] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:03:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Read error: Connection reset by peer)
[13:03:55] *** Joins: adlternative (~adl@117.32.216.73)
[13:03:57] <ville> wrong channel
[13:04:45] <smallville7123> ville: ok
[13:04:52] <ville> well suppose if you wish to discuss it from the point of view of the standard it's alright
[13:05:37] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[13:05:41] <ville> but like i said not that many people really understand the details how macros are expanded to a point where they would be able to write it them selves
[13:06:03] <smallville7123> yea
[13:06:10] <PlasmaHH> or boost.pp
[13:09:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:55] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:13:45] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[13:14:30] *** Joins: limubs (~limubs@cgn-89-0-53-192.nc.de)
[13:14:46] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:14:49] *** Joins: bindu_ (~bindu@user/bindu)
[13:15:18] <smallville7123> when a function macro is expanded, its arguments are first expanded, and then it's body is expanded with the arguments, and then it is rescanned for expansion,         right?
[13:16:36] *** bindu_ is now known as bindu
[13:18:43] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Ping timeout: 256 seconds)
[13:20:28] <smallville7123> PlasmaHH: boost.pp is not a preprocessor
[13:20:31] <smallville7123> "The Boost Preprocessing library is a library of macros, with support for preprocessor metaprogramming"
[13:20:57] <PlasmaHH> smallville7123: indeed. and not many people would be able to write boost.pp
[13:21:22] <smallville7123> yup
[13:21:57] *** Quits: limubs (~limubs@cgn-89-0-53-192.nc.de) (Ping timeout: 240 seconds)
[13:22:03] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:22:19] *** Joins: bindu (~bindu@user/bindu)
[13:22:19] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:22:36] <smallville7123> also i have a strong feeling that this is happening but i want to be certain that this is actually being done    "when a function macro is expanded, its arguments are first expanded, and then it's body is expanded with the arguments, and then it is rescanned for expansion"
[13:26:32] <smallville7123> in case i have this incorrect like i currently do in that in my current implementation i have    "#define foo(bar) bar()\nfoo(int main)"    ->      bar()(int main)
[13:27:04] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[13:27:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[13:28:47] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[13:28:56] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:30:58] *** Joins: PJBoy (~PJBoy@2a00:23c7:8302:b301:99b1:d0ac:c709:a620)
[13:30:58] *** Quits: PJBoy (~PJBoy@2a00:23c7:8302:b301:99b1:d0ac:c709:a620) (Changing host)
[13:30:58] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:31:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[13:32:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:43] *** ChanServ sets mode: +v npaperbot
[13:39:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:41:02] *** Quits: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[13:42:12] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:43:36] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[13:45:03] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:47:51] * smallville7123 is not parsing functions properly at all :(
[13:48:30] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[13:49:24] *** Joins: undephin3d (~undephin3@158.181.83.179)
[13:49:44] *** Joins: Sadale (~Sadale@user/sadale)
[13:51:01] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Ping timeout: 256 seconds)
[13:51:48] *** Quits: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de) (Quit: WeeChat 3.2)
[13:51:57] *** Joins: xcm (~xcm@user/xcm)
[14:02:17] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[14:02:28] *** Joins: jibsen (~jibsen@176-20-143-151-dynamic.dk.customer.tdc.net)
[14:02:59] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[14:03:09] *** Joins: leah2 (~leah@vuxu.org)
[14:04:12] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[14:04:18] *** Joins: froggyc (~froggy@2.235.241.212)
[14:04:53] <jibsen> in the note section at https://en.cppreference.com/w/cpp/algorithm/ranges/minmax it mentions the warning is for overloads 1,2 - but as far as I can tell overload 2 (initializer list) returns values and not references?
[14:07:00] *** Quits: froggyc (~froggy@2.235.241.212) (Client Quit)
[14:08:17] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 268 seconds)
[14:12:10] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:12:48] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879)
[14:13:33] <smallville7123> would #c or #c++ be the best place to talk about the macro preprocessor
[14:15:21] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879) (Ping timeout: 245 seconds)
[14:15:42] <TinoDidriksen> #C - most here will just tell you to avoid macros.
[14:18:48] <PlasmaHH> jibsen: its a wiki, probably someone forgot to change the note when they changed the functions or something like that
[14:19:14] <leduyquang753> Well if that's for sure not right we can fix it right now.
[14:19:53] <jibsen> I am asking because I am in doubt if I read it right :)
[14:20:17] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:21:09] <leduyquang753> Looking at the history indeed the overload #2 used to write `<const T&>`.
[14:22:22] <jibsen> ah, thanks
[14:23:20] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:23:26] <leduyquang753> Fixed.
[14:24:43] *** Joins: proller (~p@80.240.216.69)
[14:25:09] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[14:27:13] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[14:28:09] *** Joins: ko (~i.am@user/marlboro)
[14:33:02] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:36:43] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:37:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:37:58] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:38:40] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:42:13] *** Joins: froggyc (~froggy@2.235.241.212)
[14:44:03] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 268 seconds)
[14:44:57] *** Joins: sbrothy (~sbrothy@192038130164.mbb.telenor.dk)
[14:45:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1de0:ae4d:2639:9c8e)
[14:45:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1de0:ae4d:2639:9c8e) (Changing host)
[14:45:25] *** Joins: skapata (~Skapata@user/skapata)
[14:45:44] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[14:54:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:56:18] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:57:00] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[14:57:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[14:57:56] *** Quits: Guest6030 (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1) (Quit: WeeChat 3.3)
[14:58:21] *** Joins: unyu (~pyon@user/pyon)
[15:00:05] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[15:00:12] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[15:03:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[15:03:46] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:04:31] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:05:25] *** Parts: nedbat (~nedbat@python/psf/nedbat) (Textual IRC Client: www.textualapp.com)
[15:06:51] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[15:08:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[15:19:37] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 240 seconds)
[15:22:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[15:22:57] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:32:17] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:35:46] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:38:39] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:41:54] *** Joins: pulse (~pulse@user/pulse)
[15:44:36] *** Joins: frost (~frost@user/frost)
[15:45:37] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:54:58] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[15:55:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[15:58:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0b2:c99d:ea0d:cee6)
[15:59:06] *** f0xb4t is now known as mac-
[16:00:47] *** Joins: seninha (~seninha@user/seninha)
[16:01:57] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 240 seconds)
[16:03:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0b2:c99d:ea0d:cee6) (Ping timeout: 268 seconds)
[16:04:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:05:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:08:48] *** Quits: adlternative (~adl@117.32.216.73) (Read error: Connection reset by peer)
[16:08:50] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: leaving)
[16:10:50] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[16:12:00] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:15:26] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:21:23] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[16:21:49] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[16:22:57] *** Joins: proller (~p@2a02:6b8:0:40c:33db:f79e:ea53:6ff6)
[16:26:11] *** Joins: nicko (~iClass@222.211.31.34)
[16:27:27] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:31:49] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:38:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[16:40:01] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:40:35] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:41:35] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[16:43:00] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:44:05] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[16:44:50] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:46:37] *** Quits: sbrothy (~sbrothy@192038130164.mbb.telenor.dk) (Quit: leaving)
[16:46:46] *** Quits: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke) (Client Quit)
[16:46:57] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:47:41] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[16:49:24] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[16:49:48] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:50:54] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:54:44] *** Joins: sbrothy (~sbrothy@192038130164.mbb.telenor.dk)
[16:56:45] *** Joins: msk (~msk@103.213.213.70)
[16:58:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[16:58:55] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:59:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[17:00:52] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[17:01:02] *** Quits: nicko (~iClass@222.211.31.34) (Quit: Konversation terminated!)
[17:01:05] <zz> Is someone able to elaborate on the matter that C++ must cater to "no guarantee that all the bytes can be safely accessed" (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103733 )?--
[17:01:23] *** Joins: nicko (~iClass@222.211.31.34)
[17:01:31] <zz> My thought would be that if a function receives a "const S &", that such S is always fully mapped..
[17:01:39] <ville> trap representations. that's always the answer
[17:02:06] <ville> unfortunatley don't think it's in this case
[17:02:38] <nicko> join tuna
[17:05:17] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:75e6:90b9:a33f:f625) (Quit: Leaving)
[17:05:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[17:05:20] <smallville7123> how could i rewrite my grammar to correctly collect my arguments separated by comma? https://gist.github.com/mgood7123/6f7b51f5a4b2318fe53ace68eab57494
[17:05:38] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:06:49] <smallville7123> zz: "You are using memcpy instead of memcmp in your testcase, which does something very different..." oof
[17:07:14] <zz> smallville7123: read to the end
[17:07:30] *** Quits: jibsen (~jibsen@176-20-143-151-dynamic.dk.customer.tdc.net) (Quit: Leaving)
[17:07:35] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[17:08:04] <smallville7123> ik :)
[17:09:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:11:40] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[17:12:30] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Quit: Leaving.)
[17:14:45] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[17:15:40] *** Quits: krzych (krzych@nroot.pl) (Remote host closed the connection)
[17:15:41] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Read error: Connection reset by peer)
[17:17:24] *** Joins: masterbuilder (~user@user/masterbuilder)
[17:19:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:19:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[17:19:59] *** Joins: krzych (krzych@nroot.pl)
[17:23:09] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[17:27:43] *** Quits: nicko (~iClass@222.211.31.34) (Quit: Konversation terminated!)
[17:29:18] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:31:34] *** Joins: pulse (~pulse@user/pulse)
[17:32:41] *** RazielZ is now known as Raziel
[17:35:38] *** Quits: sbrothy (~sbrothy@192038130164.mbb.telenor.dk) (Read error: Connection reset by peer)
[17:35:51] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[17:36:17] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[17:37:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 245 seconds)
[17:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:43] *** ChanServ sets mode: +v npaperbot
[17:43:33] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[17:43:54] *** Joins: sandal (~sandal@pool-108-21-229-216.nycmny.fios.verizon.net)
[17:44:09] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:44:36] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[17:45:58] <msk> hi
[17:47:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Remote host closed the connection)
[17:47:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:48:13] <msk> what is the correct way to initialize std::set using a C-style array eg. int arr[] = { 1, 2, 3, 4, 5, 4, 3 };
[17:48:29] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[17:48:54] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:50:32] <leduyquang753> Use iterators.
[17:50:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[17:51:40] <msk> leduyquang753: std::set uniq {arr}; // does not work
[17:51:55] <PJBoy> with its begin/end
[17:52:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:52:40] <msk> PJBoy: as in std::begin and std::end ?
[17:52:50] <PJBoy> yeah
[17:53:19] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:53:22] <msk> set::set uniq { std::begin (arr), std::end (arr) }; // does not work either.
[17:53:32] <PJBoy> { set uniq(begin(arr), end(arr)); SHOW(uniq); } int arr[] = { 1, 2, 3, 4, 5, 4, 3 };
[17:53:32] <geordi> uniq = {1, 2, 3, 4, 5}
[17:53:43] <PJBoy> because you're using the braces syntax
[17:54:03] <PJBoy> so you're telling the compiler to use the initializer_list overload
[17:54:13] <msk> PJBoy: uniform initialization is with braces syntax. is that correct ?
[17:54:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:54:32] <PJBoy> in a misleading kind of misnomer way, yeah
[17:54:58] <PJBoy> braces syntax is sometimes called uniform initialisation, but it clearly isn't generally applicable, as demonstrated above
[17:55:00] <msk> sorry i couldn't understand what you wrote.
[17:55:25] <PJBoy> so you're right that it's called that, but it's really a fallacy
[17:55:32] <msk> Ohh.
[17:55:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 252 seconds)
[17:56:48] <msk> in which situations uniform initliazation will not work ? could you be kind enough to point to a documented list ?
[17:57:10] <msk> *initialization
[17:57:31] *** Quits: sandal (~sandal@pool-108-21-229-216.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[17:57:32] <PJBoy> if the class has an initializer_list overload, that's the most prominent case
[17:57:40] <PJBoy> then parentheses vs braces is a choice
[17:57:55] <PJBoy> braces are required for aggregate initialisation until C++20
[17:58:21] <msk> is this specific to std::set only ?
[17:58:21] <PJBoy> in-class member initializers need = or braces, don't support parentheses for some reason
[17:58:21] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[17:58:31] <PJBoy> any class that has an initializer_list overload
[17:58:37] <PJBoy> so that's all the containers in stdlib
[17:59:05] <PJBoy> default function arguments can't use parentheses or braces, needing =
[17:59:11] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[17:59:45] <PJBoy> functions like `emplace` end up using parentheses syntax for initialisation under the hood
[18:00:05] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[18:00:28] <msk> are braces optional for aggregate initialization post C++20 ?
[18:00:35] <PJBoy> almost
[18:00:43] <PJBoy> generally speaking, yeah
[18:00:49] <PJBoy> but there are some unfortunate exceptions
[18:01:14] <PJBoy> std::array is a notable example
[18:02:29] <msk> in a way one has to understand container internals before attempting to use them.
[18:02:45] *** Joins: sandal (~sandal@pool-108-21-229-216.nycmny.fios.verizon.net)
[18:05:00] <PJBoy> well, my practice is to default to parentheses syntax
[18:05:19] <PJBoy> and then if you want to use braces syntax, you need to check those details about the class
[18:05:51] <PJBoy> where it's an aggregate, whether it has an initializer_list overload
[18:06:08] <PJBoy> those are the main two things I think
[18:06:35] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:06:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:08:23] <msk> well i have been using parenthesis syntax so far and it's quite nice.
[18:08:41] <msk> yep as you mention, 'check those details about the class'.
[18:08:50] <sandal> hey folks! I am attempting to add a header and cpp source file to my project, on windows, msvc, c++17, and I am getting a bunch of errors like this: 'BOOL SetCurrentDirectoryW(LPCWSTR)': cannot convert argument 1 from 'const _Elem *' to 'LPCWSTR'... I am not very familiar with windows, but this code compiles just fine when it is compiled independently of my project
[18:09:10] <msk> appreciate your help. thanks for sharing your perspective PJBoy.
[18:09:12] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[18:09:27] <PJBoy> :)
[18:11:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 268 seconds)
[18:12:29] <ville> !give sandal general
[18:12:30] <nolyc> sandal: #C++-general for algorithms, libraries, practices, projects, tools etc.
[18:13:00] <Alipha> { std::vector<int> v(3); std::vector<int> w{3}; std::cout << v, w; } // msk
[18:13:01] <geordi> {0, 0, 0}, {3}
[18:13:22] <sandal> (ty!)
[18:14:36] <ville> PJBoy: () unfortunately don't work everywhere. int x = 0; x = -1; x = (); and a bunch of others. yeah that's not initialization, sue me
[18:15:02] <PJBoy> parentheses more notably don't work for DMI
[18:15:21] <PJBoy> I'd argue those are = initialisations anyway
[18:15:24] <ville> it's better to live in a world where no type has an std::initializer_list ctor.
[18:15:28] <Alipha> msk: personally, I generally only use {} when I want the initializer_list overload (or aggregate initialization). Otherwise, I use (). But then you have to watch out for "the most vexing parse"
[18:15:32] <Alipha> !vex
[18:15:33] <nolyc> T x(); and T y(U(z)); declare functions named x and y, the latter with a parameter named z. Also, T(a); declares a variable called a.
[18:15:50] <ville> sure dmi is initialization. my use case isn't where you want to "reset" something
[18:17:23] <PJBoy> I'll give you that you can use braces for initalisation-where-you-don't-need-to-spell-out-the-type
[18:18:22] <ville> originally i was going to switch to () with 20, but kept hitting my head on too many things
[18:19:13] <PJBoy> C++20 hasn't changed how I write initialisation either
[18:22:44] <msk> Alipha: thanks for the insight.
[18:24:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:24:24] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:25:10] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:25:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:29:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 252 seconds)
[18:34:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:36:40] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[18:37:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:37:52] *** Quits: sandal (~sandal@pool-108-21-229-216.nycmny.fios.verizon.net) ()
[18:41:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:45:49] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879)
[18:46:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 260 seconds)
[18:48:41] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879) (Ping timeout: 245 seconds)
[18:49:06] *** Joins: roe__ (~roe@dyn221231.cc.lehigh.edu)
[18:49:14] *** roe__ is now known as roe_
[18:49:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:53:23] <roe_> I'm a Makefile noob.  This is the rather simple Makefile I wrote: https://wandbox.org/permlink/VPHHEVopnPbcYkqP -  The problem I'm having is instead of linking against lib<whatever>.so it's linking against lib<whatever.so.38 - So whenever lib<whatever> gets updated my code needs to be recompiled.  How can I build against the symlink lib<whatever>.so rather than the specific version?
[18:53:39] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Remote host closed the connection)
[18:57:38] <Alipha> !give roe_ general
[18:57:39] <nolyc> roe_: #C++-general for algorithms, libraries, practices, projects, tools etc.
[18:57:57] <roe_> are you saying compiling c++ is off topic for the c++ channel?
[18:58:45] <PJBoy> yeah
[18:58:49] <PJBoy> it requires a tool
[18:59:17] <PJBoy> makefiles are neither about C++ code nor about the C++ spec
[18:59:18] <PlasmaHH> makefiles is even one layer more offtopic since its not the tool that does the compiling
[19:02:39] <zz> that would put cmake on the third layer of offtopicness, since it generates a Makefile ;-)
[19:03:05] *** Joins: NEYi (~NEYi@109.251.216.38)
[19:05:20] *** Joins: xkuru (~xkuru@user/xkuru)
[19:09:58] <PJBoy> I guess they didn't actually want help in the end...
[19:10:37] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[19:12:34] <osse> #workingset (or ##workingset) deals with Make
[19:14:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:15:25] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[19:17:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:23:00] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[19:23:14] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:27:33] *** Quits: roe_ (~roe@dyn221231.cc.lehigh.edu) (Remote host closed the connection)
[19:30:17] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-8d6c-5230-cbd2-1879.inf6.spectrum.com)
[19:31:29] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:32:03] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[19:32:51] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8d6c:5230:cbd2:1879) (Ping timeout: 245 seconds)
[19:33:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d672:a7f5:a798:3393)
[19:33:24] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[19:35:21] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[19:35:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[19:36:19] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-d496-c4da-44b3-2835.inf6.spectrum.com)
[19:36:45] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:38:10] <Alipha> apparently roe_ got offended
[19:38:30] <Raziel> I would be offended too if I had to use makefiles
[19:38:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[19:39:10] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-8d6c-5230-cbd2-1879.inf6.spectrum.com) (Ping timeout: 260 seconds)
[19:39:15] <urdh> I get offended when people generate Makefiles from CMake
[19:39:27] <urdh> it's 2020+1, people
[19:39:28] <urdh> use Ninja
[19:40:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:40:18] <Raziel> well, I usually generate vs projects, on windows. but yeah, ninja's good too. or just shoving the cmake project into vs directly.
[19:41:07] <Raziel> on linux, uhhh, I dunno, I just shove it into clion? v:
[19:43:28] <PJBoy> ninja's hard to target :(
[19:43:46] <zz> ninja does two things (and that kind of goes against the composability principle), namely evaluating a highlevel language and running the {implicit Makefile and DAG}.
[19:43:59] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: Lost terminal)
[19:44:17] <zz> to be fair, with meson it's the same
[19:44:42] <PJBoy> everything does more than one thing
[19:44:44] <jkaye> Why's ninja hard to target?
[19:44:53] <PJBoy> I don't know
[19:45:13] <PJBoy> but our current project at $work without some ninja-specific tweaking
[19:45:38] <PJBoy> and it's non trivial to work out what these tweaks are
[19:45:41] <zz> According to build recipes, ninja wants python3-base. gmake does not.
[19:45:53] <Alipha> PJBoy: i've been trying hard to figure out how to identify whether or not an argument is an rvalue in c++03, but i don't think it's possible to tell the difference between a const lvalue and an rvalue :-/
[19:46:02] <zz> so there's a case to be made for bootstrap.
[19:46:23] <PJBoy> Alipha, I'm quite sure you have a const lvalue
[19:46:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:46:34] <PJBoy> possibly initialised from an rvalue
[19:48:04] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:48:41] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 245 seconds)
[19:49:23] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[19:50:37] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[19:50:39] *** Joins: jiffe (~jiffe@mail.nsab.us)
[19:57:03] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:00:49] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 250 seconds)
[20:02:08] <rpav> Alipha: you can define a type which you give the behavior of an rvalue like i did in the example, but i'm not sure if/where it falls down
[20:02:46] <rpav> i'm not terribly invested in finding out, since writing 98/03 is not necessary anymore
[20:03:44] <rpav> though really i think implementing features in terms of library is overall better than adding new language things, since it leads to a more powerful language
[20:04:23] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:04:32] <rpav> (this is of course with the stipulation that 1. you actually implement them and 2. minimal necessary language changes to make them happen, still happen, of course)
[20:08:34] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:09:58] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:12:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[20:12:46] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[20:13:32] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[20:18:55] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:20:18] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[20:23:20] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:34:59] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:03:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[21:04:29] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:04:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:05:39] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Ping timeout: 256 seconds)
[21:06:41] *** Joins: tmm88 (~tmm88@user/tmm88)
[21:09:54] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:226:6685:3dd4:7093)
[21:11:20] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[21:11:27] *** Joins: winlundn (nick@2600:3c01::f03c:92ff:fe32:c297)
[21:12:50] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[21:13:48] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:14:44] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[21:16:51] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[21:17:18] *** Joins: Atque (~Atque@user/atque)
[21:18:57] *** Quits: undephin3d (~undephin3@158.181.83.179) (Ping timeout: 240 seconds)
[21:20:50] *** Joins: reset (~reset@user/reset)
[21:22:16] *** Joins: Betal (~Betal@user/betal)
[21:23:18] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d496:c4da:44b3:2835)
[21:24:19] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[21:24:34] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:24:50] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:26:26] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-d496-c4da-44b3-2835.inf6.spectrum.com) (Ping timeout: 252 seconds)
[21:28:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:21a3:4bf2:b994:55b1)
[21:30:37] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:32:08] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:33:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:35:37] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[21:36:41] *** Joins: dtminus (~dtminus@ip5f5acaf0.dynamic.kabel-deutschland.de)
[21:39:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:43] *** ChanServ sets mode: +v npaperbot
[21:41:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:59:06] *** Quits: proller (~p@2a02:6b8:0:40c:33db:f79e:ea53:6ff6) (Ping timeout: 245 seconds)
[22:00:02] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[22:06:12] *** Quits: DrMax (~DrMax@node-1w7jra94757fzkt36qk02mggx.ipv6.telus.net) (Remote host closed the connection)
[22:07:39] *** Joins: DrMax (~DrMax@node-1w7jra94757g0eo72mt0a6p21.ipv6.telus.net)
[22:12:15] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b)
[22:15:21] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d496:c4da:44b3:2835) (Ping timeout: 245 seconds)
[22:15:55] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:16:41] *** Joins: rgrinberg (~textual@187.223.209.106)
[22:17:37] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Reconnecting)
[22:18:11] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:18:23] *** Quits: andreasbuhr (~quassel@p548ddec4.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:19:54] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[22:20:03] *** Joins: CaCode (~CaCode@user/cacode)
[22:21:48] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (zirconium.libera.chat (Nickname regained by services)))
[22:21:48] *** vinleod is now known as vdamewood
[22:27:14] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[22:34:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:37:53] *** Joins: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl)
[22:38:20] *** Joins: magla (~gelignite@55d46610.access.ecotel.net)
[22:44:31] *** Quits: dtminus (~dtminus@ip5f5acaf0.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[22:46:03] *** Quits: c4017w (~c4017@209.52.68.8) (Quit: Leaving)
[22:46:19] *** Joins: c4017w (~c4017@209.52.68.8)
[22:48:43] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[22:49:21] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[22:52:28] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:56:54] *** Quits: froggyc (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[22:57:06] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:57:16] *** Joins: froggyc (~froggy@2.235.241.212)
[22:57:37] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 240 seconds)
[22:58:52] *** Joins: proller (~p@2a02:6b8:b081:a428::1:24)
[23:01:10] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:04:41] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[23:05:40] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[23:13:45] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:15:22] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:24:54] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:25:02] *** Quits: tmm88 (~tmm88@user/tmm88) (Ping timeout: 260 seconds)
[23:28:17] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:33:02] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e546:f9c1:f549:4c7e:0:281) (Quit: Leaving)
[23:45:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 240 seconds)
[23:46:47] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:48:14] *** Joins: gothicserpent (~gothicser@204.152.215.249)
[23:50:31] <jaakkos> I wonder if allocating gcc vector types (eg. typedef uint64_t mmio_access_type __attribute__((vector_size(32)));) with new[] is guaranteed to yield 32-byte-aligned pointers?
[23:52:35] <Alipha> jaakkos: i'd ask in #c++-general
[23:53:11] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[23:53:33] <jaakkos> Ok
[23:57:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:59:46] *** Quits: gothicserpent (~gothicser@204.152.215.249) (Quit: Leaving)
