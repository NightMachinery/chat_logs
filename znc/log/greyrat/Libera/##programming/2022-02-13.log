[00:00:10] <ProfSimm> Has anyone tried mapping tokens to characters and then parsing that with regex
[00:00:14] <Hash> https://i.imgur.com/PjL7ANM.jpg
[00:00:14] <bayaz> Type: image/jpeg Size: 450.5 kB 
[00:00:16] <Hash> Painted my space bar
[00:00:34] <Hash> https://i.imgur.com/NgQI2gI.jpg Made psychedelic mushroom mechanical key caps for cherry mx
[00:00:34] <bayaz> Type: image/jpeg Size: 1.2 MB 
[00:00:44] <Hash> https://i.imgur.com/2tgB9iZ.jpg
[00:00:44] <bayaz> Type: image/jpeg Size: 1.7 MB 
[00:00:50] <user51> Hash: henry spencer's awk parser generator in awk
[00:00:57] <Hash> Next, going to embed mushroom diorama inside clear epoxy resin
[00:01:01] <user51> get it from https://code.google.com/archive/p/lawker/source/default/source
[00:01:01] <bayaz> Title: Google Code Archive - Long-term storage for Google Code Project Hosting. 
[00:01:05] <user51> search for 'aasl'
[00:01:11] <Hash> So there is gras, water, mushroom, growing inside the resin keycap
[00:01:26] <Hash> ahh I have heard of that one
[00:01:29] <Hash> Good code
[00:01:39] <user51> well, the code is older than me
[00:04:12] <user51>         gotit = ($1 == des2) ? 1 : 0
[00:04:18] <user51> this bit made me chuckle
[00:04:27] <Hash> ternary makes me eek.
[00:04:35] <Hash> nested terneary makes me erk.
[00:04:51] <ProfSimm> Hash: it's like a switch case
[00:04:58] <Hash> *nod*
[00:05:05] <Hash> condensed if, really.
[00:05:28] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[00:05:32] <Hash> Because you can't defien more than 1 case
[00:05:35] <Hash> in ternary.
[00:05:48] *** Joins: independent56 (~independe@2.26.38.138)
[00:05:49] <pulse> sure you can!
[00:05:50] <Hash> in switch case, you can have arbitrary number of cases.
[00:05:55] <pulse> it's just ugly
[00:06:00] <Hash> nested then
[00:06:02] <Hash> Make erk!
[00:06:08] <pulse> i like ternary a lot
[00:06:09] <ProfSimm> Well technically its like if elif elif elif else when you chain them
[00:06:14] <ProfSimm> But looks like a switch case
[00:06:26] <apotheon> Don't use nested ternaries in PHP.  Your face will catch fire.
[00:06:32] <pulse> but i like to write it as such https://bpa.st/MM3Q
[00:06:33] <bayaz> Title: View paste MM3Q 
[00:06:35] <Hash> Or anywehre really.
[00:06:35] <Decker> fallthrough cases :)
[00:06:40] <Hash> Keep code verbose and readable.
[00:06:46] <Hash> Dont' save a few bytes on typing.
[00:06:47] <Hash> :)
[00:06:52] <apotheon> It's *especially* bad in PHP because of utterly fucking broken precedence rules.
[00:07:14] <apotheon> PHP is kinda like cancer, or maybe herpes.
[00:07:14] <ProfSimm> apotheon: I think there's a long term plan to fix it. Maybe my grandchildren will see it
[00:07:34] <absentia> what would javascript be
[00:07:35] <apotheon> If there's any justice in the world, PHP won't last that long.
[00:07:42] <apotheon> . . . so of course it'll last that long.
[00:07:46] <absentia> lobotomy?
[00:07:46] <ProfSimm> absentia: COVID
[00:08:16] <Hash> I made custom key caps, and resin bonded to the mold.
[00:08:17] <ProfSimm> absentia: it's literally everywhere, not totally deadly but not harmless either
[00:08:28] <Hash> Chemically somehow. In some places. Ripped my mold.
[00:08:34] <Hash> No wI need another mold, and mold release spray
[00:08:42] <Hash> wish I'd heard about it before.
[00:08:53] <user51> now to figure out how to get it to work, good old README
[00:09:03] *** Joins: bnchs__ (~bnchs@41.141.153.83)
[00:09:09] *** Quits: kariosfox (~kariosfox@89.229.175.242) (Remote host closed the connection)
[00:09:21] *** Quits: b1tr0t (~bitrot@149.167.135.129) (Read error: Connection reset by peer)
[00:09:31] *** Joins: kariosfox (~kariosfox@89.229.175.242)
[00:09:54] <bnchs__> is there a good 3D math library for C
[00:10:22] <Hash> for what
[00:10:28] <Hash> cude, gl, dx?
[00:10:42] <bnchs__> opengl
[00:10:58] <Hash> https://github.com/recp/cglm
[00:10:59] <bayaz> Title: GitHub - recp/cglm: ? Highly Optimized Graphics Math (glm) for C 
[00:11:00] <Hash> Perhaps
[00:11:09] *** Quits: kariosfox (~kariosfox@89.229.175.242) (Remote host closed the connection)
[00:11:17] *** Quits: bnchs (~bnchs@41.141.4.209) (Ping timeout: 240 seconds)
[00:11:23] *** Joins: kariosfox (~kariosfox@89.229.175.242)
[00:11:24] *** Joins: newwebdev132 (~newwebdev@78.135.91.144)
[00:11:27] <Hash> ogl would most likely under c++
[00:11:40] <Hash> c99/ansi etc. isn't a lot there.
[00:12:08] <bnchs__> Hash: what do you mean
[00:12:30] <Hash> What kind of math do you need to do?
[00:12:32] <epony> it's a difficult questian ;-)
[00:12:37] *** Quits: newwebdev13 (~newwebdev@31.210.55.200) (Ping timeout: 240 seconds)
[00:12:48] <epony> let's start with natural numbers first
[00:12:54] *** Quits: moniker- (~mon@dh207-123-183.xnet.hr) (Remote host closed the connection)
[00:13:38] <Hash> https://github.com/ebassi/graphene I wonder what this is underneath
[00:13:39] <absentia> i'll start
[00:13:40] <bayaz> Title: GitHub - ebassi/graphene: A thin layer of graphic data types 
[00:13:41] <absentia> 0
[00:13:53] <Hash> At least it's got basic types
[00:13:53] <bnchs__> i don't need full 3D
[00:13:56] <epony> well, we said whole numbers
[00:14:04] <bnchs__> because i only use some of it (ortho projection) for 2D
[00:14:16] <Hash> so you need a 2D lib
[00:14:32] <Hash> Basic vector math, maybe some matrices
[00:14:39] <absentia> https://github.com/sgorsten/linalg
[00:14:40] <bayaz> Title: GitHub - sgorsten/linalg: linalg.h is a single header, public domain, short vector math library for C++ 
[00:14:43] <Hash> mostly transformations and projections.
[00:14:53] <Hash> That's c++
[00:14:54] <epony> addition
[00:14:57] <absentia> i've not actually used this
[00:15:01] <absentia> oh so it is
[00:15:03] <Hash> He specifically wanted C99/Ansi I think 
[00:15:18] <epony> ANSI C is a bit after C
[00:15:36] <epony> and then 10 years later C98
[00:15:41] <bnchs__> i just wanted it in C
[00:15:52] <epony> that's easy ;-)
[00:15:54] <Hash> https://github.com/raysan5/raylib/blob/master/src/raymath.h raymath 1.5
[00:15:55] <bayaz> Title: raylib/raymath.h at master ? raysan5/raylib 
[00:16:00] <absentia> you can write in any language you want
[00:16:02] <absentia> as long as it's C
[00:16:03] <Hash> raylib includes a C99 single-file header-only library for basic 3d math
[00:16:09] <Sqaure> I can give you one in Ruby, thats all i have. Still interested?Ã„
[00:16:28] <Hash> You might could write a simpel function lib yourself.
[00:16:32] <Sqaure> Now, whats it worth to you? 
[00:16:33] <Hash> Look at the code here
[00:16:44] <Sqaure> Accepting BC transfer
[00:16:49] <absentia> huh
[00:16:53] <Hash> It has all the basics and is barely 20 pages.
[00:17:09] *** Quits: kariosfox (~kariosfox@89.229.175.242) (Remote host closed the connection)
[00:17:18] * epony inspects visually
[00:17:29] *** Joins: kariosfox (~kariosfox@89.229.175.242)
[00:17:35] <bnchs__> ok how about i write my own with SSE optimizations
[00:17:56] <bnchs__> and deal with alignment problems
[00:18:03] <Hash> Don't forget MMX!
[00:18:20] <Hash> jk
[00:18:33] <epony> it's unforgettable.. https://en.wikipedia.org/wiki/MMIX
[00:18:33] <bayaz> Title: MMIX - Wikipedia 
[00:18:44] *** Joins: blahboybaz (~blahboyba@c-67-161-98-52.hsd1.wa.comcast.net)
[00:18:44] <bnchs__> i would use MMX
[00:18:50] <bnchs__> if i could find documentation
[00:18:57] <Hash> too old.
[00:19:00] <Hash> no longer a thing.
[00:19:21] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[00:19:27] <epony> MMIX supercedes MMXx
[00:19:41] <Hash> Yes. Different things though :)
[00:19:58] <epony> ok.. still waiting for a thesis
[00:20:03] <Hash> MMX is like pentium 3/4 days isnnit?
[00:20:14] <epony> SIMD we used to call it
[00:20:47] <epony> https://en.wikipedia.org/wiki/Single_instruction,_multiple_data#History
[00:20:47] <bayaz> Title: Single instruction, multiple data - Wikipedia 
[00:21:18] *** Joins: moniker- (~mon@dh207-123-183.xnet.hr)
[00:22:00] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[00:25:08] *** Joins: Guest62 (~Guest62@cpe-74-65-0-247.rochester.res.rr.com)
[00:25:09] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Client Quit)
[00:26:49] *** Joins: Jong (~Jong@2620:10d:c090:400::5:8039)
[00:28:21] *** Joins: newwebdev13 (~newwebdev@31.210.55.74)
[00:28:34] <Guest62> This is more of a theory type question I guess.Â  I am trying to store millions of records that don't change often.Â  It seems like a better idea to cache everything, rather than run multiple queries on millions of rows for each time a record is requested.Â  Is it fairly fast to store all the cached data just in the file system or would the disk
[00:28:34] <Guest62> index get overloaded with 300 million files?
[00:29:19] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[00:29:59] *** Quits: newwebdev132 (~newwebdev@78.135.91.144) (Ping timeout: 256 seconds)
[00:32:17] <ProfSimm> Guest62: using cache is reasonable, but the exact tradeoffs depends on the details
[00:32:19] <pyzozord> '\0' == 0 in c, right?
[00:32:34] <ProfSimm> Guest62: how often is not often, what are the queries and so on
[00:32:35] <user51> yep
[00:33:24] <user51> pyzozord: ^
[00:33:29] <pyzozord> thx
[00:33:35] <ProfSimm> Guest4960: as for storing cache on the disk, I wouldn't recommend "300 million files".
[00:33:59] <Guest62> hm
[00:34:08] <ProfSimm> Guest4960: a database is actually more efficient at storing and retrieving many small records.
[00:34:13] <deniska> 300 million files is kinda a lot
[00:34:26] <deniska> make a database with an appropriate index
[00:34:33] <deniska> if it doesn't change often, I vote for sqlite :)
[00:34:35] <ProfSimm> Guest4960: think of a file as mid-size BLOB storage
[00:35:01] <edgar-rft> Guest62: A file system usually has a fixed minimum size of a file, so that the file on disk doesn't get smaller even if it contains only one single bit of data. With 300 million mini files it's easy to run out of disk space that way.
[00:35:02] <Guest62> I'm actually using sqlite right now
[00:35:20] *** Joins: newpy (~newpy@206.168.231.90)
[00:35:34] <deniska> then maybe you just have to create an index if you didn't already
[00:35:46] <ProfSimm> Guest62: SQLite is faster than the file system for small data items
[00:35:48] <Guest62> I have indexes.Â  Getting a query is still in the ms range
[00:36:14] <ProfSimm> Guest4960: you can cache your queries, and store the cache itself in sqlite
[00:36:16] <deniska> do they get used for the queries you are making?
[00:36:28] <ProfSimm> Guest4960: what queries you run
[00:36:33] <ProfSimm> Damn it Guest62
[00:36:38] <ProfSimm> Wrong autocomplete
[00:36:43] <ProfSimm> See https://www.sqlite.org/fasterthanfs.html
[00:36:43] <bayaz> Title: 35% Faster Than The Filesystem 
[00:36:58] <newpy> is there a quick way to convert an integer into its bit number? (eg. 1 -> 0, 2 -> 1, 4 -> 2, ...)
[00:37:13] <Guest62> I was just looking at that, Prof
[00:37:33] <newpy> for now we can assume it is a specific bit number and not some combination (eg. 6 -> 2, 4)
[00:38:04] <Guest62> deniska, they should.Â  I guess I haven't tried to use explain, but I'm indexing the values I make joins and things with
[00:38:23] <ProfSimm> newpy: would a "bit number" mean counting bits until the most significant bit saying 1
[00:38:35] <user51> newpy: you want only things like 1,2,4,8,16, etc?
[00:38:45] <newpy> yea up to 128
[00:39:04] <nomagno> pyzozord: (void *)0 == NULL, '\0' == 0
[00:39:04] <newpy> 128 -> 7 that is
[00:39:08] *** Joins: Klinda (~superleag@user/klinda)
[00:39:20] <user51> does the language matter?
[00:39:32] <newpy> user51, I'm using C but I'm assuming the logic will be similar
[00:39:35] <pyzozord> nomagno: afaik there is no NULL concept in c
[00:39:50] <user51> newpy: you could use a switch
[00:39:54] <pyzozord> it's just pointer with address 0
[00:39:58] <deniska> newpy: if you actually want to tap into a CPU specific instruction, there's __builtin_clz in gcc
[00:40:26] <deniska> newpy: although I'd guess a more naive for-loop would optimize into the same instruction anyway
[00:40:29] <newpy> deniska, not that low level, I'm doing libvirt
[00:40:33] <ProfSimm> newpy: you can chain if and see if it's <= 128 then 7  if it's <= 64 then 6, <= 32, <= 16 <= 8 <= 4 <= 2 == 1
[00:40:56] <user51> a loop could also work
[00:40:57] <ProfSimm> newpy: you can also replace <= with    x & 128 
[00:41:21] <user51> but i'm also asuming the input will always be one of the numbers
[00:41:34] <newpy> less typing would be better, a switch would be pretty long
[00:41:54] <newpy> actually I'm thinking I don't even need to convert it
[00:41:56] <ProfSimm> newpy: it's 7 lines. 
[00:42:12] <newpy> true
[00:42:22] <ProfSimm> I
[00:42:26] <user51> there's also log(number)/log(2)
[00:42:28] <ProfSimm> I think there's a better way, but
[00:42:43] <ProfSimm> newpy: in these situations the best is: abstract it, i.e. do the right function, then optimize if need be
[00:42:51] *** Quits: l4s8g_ (~l4s8g@pd9e621d0.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:42:58] <ProfSimm> 1) make it work 2) make it work right ....3) make it work fast
[00:43:04] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc)
[00:43:18] <pyzozord> nomagno: NULL is a macro for 0 https://en.cppreference.com/w/c/types/NULL
[00:43:18] <bayaz> Title: NULL - cppreference.com 
[00:43:34] *** Joins: b1tr0t (~bitrot@149.167.135.129)
[00:46:57] *** Quits: user51 (~user51@176.228.38.217) (Remote host closed the connection)
[00:48:11] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:48:32] *** Joins: cybertailor_ (~cyber@gateway/tor-sasl/cybertailor)
[00:48:34] <Guest62> ProfSimm I guess long term, I'm adding more information to the database.Â  And I guess I don't know enough about how sqlite works.Â  So I have a view combining two data tables and a cross reference table.Â  My understanding is that querying using the view makes two queries, one to make the view, one to query the data in the view.Â  As I add more
[00:48:34] <Guest62> many-to-many relationships between the tables, it seems like there is a point where making the caches will be more useful.Â  Where I could make one query, then pull a file from the disk.
[00:49:11] <Guest62> so just cache every possible relationship, and only "use" the ones being requested
[00:49:45] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Ping timeout: 276 seconds)
[00:50:04] *** Quits: blahboybaz (~blahboyba@c-67-161-98-52.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[00:51:24] <deniska> Guest62: "view" is more or less a saved "select", when you query a view it doesn't make two queries, only a single one, as if you wrote the whole select instead of the name of the view
[00:51:49] <nomagno> pyzozord: for (void *) 0
[00:52:13] <nomagno> It is not required that (void *)0 == 0
[00:52:21] <nomagno> (void *0) is the null constant
[00:52:26] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[00:52:34] <nomagno> 0 could be a valid address in your system.
[00:52:54] <nomagno> s/(void *0)/(void *)0/
[00:53:20] *** Joins: zaher (~zaher@37.48.152.162)
[00:54:15] <Guest62> deniska, oh so when I do something like SELECT cola FROM myView WHERE colb = 1; it just runs a single query?Â  *Essentially* just kinda adding the WHERE colb=1 onto the view query?
[00:55:20] *** Joins: tforever (~Terabyte@85.103.104.1)
[00:55:37] <deniska> Guest62: it runs something like SELECT cola FROM (SELECT things FROM something) WHERE colb = 1, which then gets optimized to some specific query plan, probably mimicking adding WHERE colb=1 onto the view query
[00:55:53] <deniska> Guest62: (you can ask the engine to actually tell you what it's going to do)
[00:56:18] *** Quits: zaher_ (~zaher@188.160.232.66) (Ping timeout: 256 seconds)
[00:57:26] <deniska> Guest62: if a query takes longer than you think it is, either you are missing some index, or a query is actually that complex to take this time
[00:57:38] <deniska> than you think it should*
[00:57:48] *** cybertailor_ is now known as CyberTailor
[00:58:11] *** Joins: rcutler (~ryder@user/rcutler)
[00:58:36] <Guest62> well the queries aren't taking a long time now (ms range), but I only have a small portion of the data inserted into the database
[00:58:58] <deniska> if indices are used correctly, the amount of data shouldn't really affect the runtime
[00:59:25] <deniska> storing files on a filesystem also comes with a lot of consideration, like the amount of files you can reasonably have in a single directory until some operations become very inefficient is quite limited, in thousands, maybe tens of thousand
[00:59:33] *** Quits: rcutler (~ryder@user/rcutler) (Client Quit)
[00:59:57] *** Joins: rcutler (~rcutler@user/rcutler)
[01:00:29] <deniska> so you have to invent some sort of subdirectory structure
[01:01:07] *** Joins: tforever_ (~Terabyte@85.103.104.1)
[01:01:28] <deniska> if the query is actually that complex to take some noticable time, it may make sense to cache its result, but I'd rather use either the same (or maybe even some other) sqlite database, or maybe in-memory key-value storage like redis
[01:01:42] <deniska> if your process is long-lived, even a hasmap provided by your language can do
[01:02:40] <epony> dr.Hipp scratching something in the text editor "look what you made me DOOO!"  Feb12 2105<ProfSimm> Guest62: SQLite is faster than the file system for small data items
[01:03:06] *** Quits: tforever_ (~Terabyte@85.103.104.1) (Client Quit)
[01:04:06] *** Quits: tforever (~Terabyte@85.103.104.1) (Ping timeout: 272 seconds)
[01:04:20] <Guest62> well, my view query example is about as complex as the queries get.Â  It's really just retrieving information.Â  It's just the shear amount of data that has my concerned
[01:04:24] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[01:04:57] <pyzozord> nomagno: interesting point I'd need to double check int the spec
[01:04:59] <Guest62> just millions of rows
[01:05:45] <deniska> Guest62: "millions" in computer-speak is spelled as "megabytes" :)
[01:06:15] *** Quits: jaysicks (~jaysicks@185-29-82-222.pool.digikabel.hu) (Ping timeout: 256 seconds)
[01:06:42] <Guest62> well the database is in the gigabyte size.Â  1.2gb right now
[01:07:10] <deniska> this is not that big, it can fit in RAM on my phone
[01:07:31] <pyzozord> nomagno: 6.3.2.3.3 "An integer constant expression with the value 0, or such an expression cast to type
[01:07:34] <pyzozord> void *, is called a null pointer constant."
[01:08:08] <pyzozord> looks like 0 must always be the null pointer
[01:08:50] <pyzozord> but it's also true what you said that it doesn't need to equal 0
[01:08:52] <pyzozord> "If a null pointer constant is converted to a pointer type, the resulting pointer, called a null pointer, is guaranteed to compare unequal to a pointer to any object or function."
[01:08:55] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:10:05] *** Joins: baracurda (~baracurda@user/parserblabla)
[01:10:08] <pyzozord> but that's because comparing pointers to integers is nonsensical strictly speaking
[01:10:12] <pyzozord> not because it's not 0
[01:11:15] <deniska> pyzozord: `long *x = 0;` is a null pointer, but `long *y; memset(&y, 0, sizeof y);` is not a null pointer
[01:12:00] *** Quits: savolla (~quassel@95.10.239.64) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:13:07] <deniska> null pointer may have a different representation rather than all bits set to 0, but assigning 0 to a pointer makes it a null pointer, C is a bad language, pls don't program in it unless really una(void)able
[01:14:15] <pyzozord> spec says essentially "you can convert any integer to a pointer but on your own risk (aka implementation-defined)"
[01:14:19] <pyzozord> "An integer may be converted to any pointer type. Except as previously specified, the result is implementation-defined, might not be correctly aligned, might not point to an entity of the referenced type, and might be a trap representation. 67)"
[01:15:25] <deniska> I think on CP/M the actual hw address 0 was a perfectly fine address to jump to?
[01:15:35] <pyzozord> so memset(&y, 0 sizeof y) /might/ be a null pointer, but doesn't have to?
[01:16:03] <deniska> pyzozord: yes, iirc it's actual UB (as opposed to "implementation defined")
[01:16:11] *** Joins: savolla (~quassel@95.10.239.64)
[01:16:21] <deniska> well, setting it is not an UB, using it afterwards as a pointer is
[01:16:47] <pyzozord> oh so C doesn't want you to go below the concept of pointers in general
[01:16:50] <pyzozord> right it makes sense
[01:17:01] <pyzozord> makes sense memset would produce UB
[01:17:45] <pyzozord> but y = 0 should produce implementation-defined result that /might/ be a null pointer
[01:17:54] <pyzozord> not exactly sure how to interpret the spec there
[01:18:24] <epony> UB, upper bound unsolicited benumbering (undefined bestowement)
[01:18:43] *** Joins: jaysicks (~jaysicks@45.132.227.32)
[01:18:45] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:18:57] <pyzozord> uber bewilderment
[01:19:11] <deniska> pyzozord: I think the spec says that it does produce a null-pointer, but then whatever null pointer is is implementation defined
[01:19:22] <epony> unbeknownst bewilderment
[01:19:23] <deniska> it might be 0xFFFF who knows
[01:19:30] <epony> -1
[01:19:46] <epony> have to keep one for the zero and one for the negative sign
[01:19:47] <pyzozord> deniska: yeah that might be it, as long as you don't do memset stuff, and you stick with c's pointer semantics
[01:20:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:20:15] <pyzozord> *memset stuff = writing values into pointer addresses
[01:20:23] <epony> you wish ;-)
[01:20:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[01:20:42] <deniska> pyzozord: and nowadays we have this easy with a flat memory model, back in a day we had near and far pointers, uphill, both ways :)
[01:21:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:21:11] <pyzozord> I remember learning assembly when I was a kid and learning about paged memory
[01:21:18] <deniska> pyzozord: so you could easily have two pointers which had different bit-for-bit representations, but should compare equal
[01:21:26] <pyzozord> I don't remember any of it, other than it was confusing
[01:21:58] <pyzozord> deniska: how did you know what kind of pointer it was then?
[01:22:14] <pyzozord> compile time type information?
[01:22:19] <jacekowski> pyzozord: segmented memory
[01:22:23] <deniska> pyzozord: additional modifiers like near and far, yes
[01:22:35] <deniska> pyzozord: also, compilation flags to specify the default model
[01:22:40] <pyzozord> jacekowski: yeah that was it
[01:22:58] <absentia> near, far
[01:23:02] <absentia> wherever you are
[01:23:40] <adder`> hope you die in tar
[01:23:45] <jacekowski> pyzozord: problem with segmentation was that it was poorly implemented on x86
[01:23:49] *** Quits: jaysicks (~jaysicks@45.132.227.32) (Ping timeout: 256 seconds)
[01:24:12] <pyzozord> man dealing with raw memory is raw fun
[01:24:19] <jacekowski> pyzozord: original idea behind segmentation was that programs only operate within one segment and you just have to wory about offset within that segment
[01:24:35] <jacekowski> then x86 came
[01:24:40] *** Quits: rcutler (~rcutler@user/rcutler) (Quit: Leaving)
[01:24:59] <jacekowski> and registers not large enough to address whole memory
[01:25:07] <pyzozord> I think I remember you had to use two registers one to select the segment another one to select the offset
[01:25:20] <jacekowski> yes
[01:25:27] <deniska> a single register wasn't large enough to handle whole RAM in any 8 bit machine as well
[01:25:28] <pyzozord> and there were extra semantics about it, I never quite got it
[01:25:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[01:25:50] <deniska> on 6502 you had X and Y registers to access ram
[01:25:54] <jacekowski> deniska: 8 bit machines handled it differently though
[01:26:04] <pyzozord> funny that a thing I learned back then is actually obsolete now
[01:26:12] <jacekowski> you had 2 registers which were behaving like one 16 bit register
[01:26:12] *** Quits: savolla (~quassel@95.10.239.64) (Remote host closed the connection)
[01:26:16] *** Joins: tforever (~Terabyte@85.103.104.1)
[01:26:21] <deniska> somewhat similar idea, using two numbers to represent an address
[01:26:29] <pyzozord> well lots of higher level things have that property but this one is funny because it's a really low level concept that got obsolete
[01:26:38] *** Joins: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com)
[01:26:52] <c2a1> jacekowski: that existed in archs like 6502 tho
[01:26:59] <mehwork> anyone else been making 6 figures for a decade in tech and still not have 10k in the bank (not counting retirement)? :/
[01:27:15] <deniska> pyzozord: fun fact: technically x86_64 still runs in a segmented mode, but a normal OS just puts everything in a single segment
[01:27:28] <c2a1> Some platforms used the index registers as the higher/lower half to address memory
[01:27:43] <jacekowski> deniska: x86 was then only platform (as far as i know) where you could have multiple "addresses" point to same place in ram
[01:27:45] <Guest62> thanks for the advice deniska
[01:27:50] <deniska> pyzozord: that's how wine still can run win16 stuff on a 64 bit OS, although it requires messing with a security setting to allow it to mess with segment registers :)
[01:28:08] <jacekowski> deniska: as in, multiple segment selector + offset combinations would point to same bit of data
[01:28:24] <pyzozord> deniska: I thought that modern cpus just can switch "modes" for how the momory is addressed
[01:28:33] <deniska> jacekowski: some 8 bit machines had rather weird memory maps, with ROM or RAM sometimes mapped multiple times with different offsets
[01:28:43] <pyzozord> deniska: so that modern cpus have kind of hardware compat layer
[01:28:52] <deniska> jacekowski: granted 8 bit machines also kinda predate widespread use of C, so it was never a problem
[01:28:56] <c2a1> jacekowski: you mean paging?
[01:29:12] <jacekowski> c2a1: well, paging is different 
[01:29:31] <c2a1> Segmentation, my bad.
[01:29:38] <jacekowski> c2a1: yes
[01:29:45] <pyzozord> btw what's the difference between segmentation and paging
[01:29:51] <pyzozord> I got these confused too
[01:30:00] <c2a1> Huh. I never thought about that. How many risc archs use it?
[01:30:04] <jacekowski> paging is configurable and used for memory protection
[01:30:10] <deniska> pyzozord: last time we discussed something similar, I went into a deep rabbit hole whether turning on compatible (aka 32 on top of 64 bit) mode is a privileged operation or not on x86_64 :)
[01:30:21] *** Joins: analognoise (~analognoi@185.229.59.36)
[01:30:52] <jacekowski> but it depends on who you ask
[01:30:52] <deniska> you'd be able to do some rather fun stuff if it wasn't, but I think it is?
[01:30:58] <pyzozord> deniska: oww haha, yeah I get it, probably the truth is somewhere in the middle
[01:31:23] *** Quits: analognoise (~analognoi@185.229.59.36) (Max SendQ exceeded)
[01:31:52] *** Joins: analognoise (~analognoi@185.229.59.36)
[01:31:59] <deniska> you know it's fun stuff when you are skimming through intel programming manual
[01:31:59] * epony brings out the truth table charts on the board.. focus
[01:32:50] <pyzozord> deniska: actually that where I got that idea that they are harwdare supported
[01:33:00] <epony> it's the last column, not in the middle
[01:33:07] <epony> attention class..
[01:33:18] <epony> vertical truth
[01:33:38] * epony pokes the board with the pointer.. here
[01:33:58] <deniska> pyzozord: instruction encoding is incompatible between x86 and x86_64, that's why they need the whole switching modes deal
[01:34:21] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 256 seconds)
[01:34:21] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[01:34:21] *** Quits: glider (~glider@user/glider) (Quit: ZNC - https://znc.in)
[01:34:21] *** Quits: anderson (~ande@user/anderson) (Quit: bye)
[01:34:38] * tforever tries to learn x86 assembly... illegal opcode (core dumped)
[01:34:39] <pyzozord> funny because the whole point of x86_64 was to be compatible in the first place
[01:34:55] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[01:35:09] <deniska> it's mostly compatible, but it sacrifices some instructions which were deemed to be rarily used to encode 64 bit instructions
[01:35:15] <pyzozord> Assembly is awesome. Simple? Check. Fast? Check. Strongly typed? Check.
[01:35:35] <deniska> Assembly is only fast if you write fast code :P
[01:35:49] <deniska> Which is rather hard in previous ~20 years
[01:35:49] <pyzozord> well yeah that's a given
[01:36:04] <pyzozord> c++ is only fast if your compiler is smart
[01:36:11] <tforever> pyzozord: depends on the arch. 6502 assembly was meant for people whereas x86 assembly (especially after 90s) is meant for compilers
[01:36:15] <deniska> And it's not really strongly typed, at least not in a high level language sense of this word
[01:36:33] <pyzozord> and you know how to write c++ that your compiler can optimize. Too many layers
[01:36:33] <deniska> pyzozord: the fact is that most compilers are wicked smart :)
[01:36:49] <deniska> pyzozord: and they will optimize the heck out of even subpar code
[01:37:13] <pyzozord> I don't trust compilers all that much
[01:37:33] *** Joins: pavonia (~user@user/siracusa)
[01:37:34] <epony> you can, what you can't trust is interpreters
[01:37:36] <pyzozord> I don't know what is it, some psychological defact no doubt
[01:37:52] *** Joins: jaysicks (~jaysicks@194.5.48.227)
[01:38:23] <epony> it'll be good with a couple of intermediate representations (said the lawyer and left the doctor scrambling for hoses)
[01:38:27] <pyzozord> with interpreters it's different it's like, complete lack of control is obvious, there is no need to trust, you just know it's going to be bad :D
[01:38:40] <pyzozord> but compilers sell you the illusion, that's far worse
[01:38:40] *** Quits: tforever (~Terabyte@85.103.104.1) (Quit: Segmentation fault (core dumped))
[01:39:00] <epony> nah, they're solid
[01:39:12] <epony> check this computer, totally works
[01:39:38] <pyzozord> also you must learn more about your compiler to make sure it 'gets' what you mean
[01:39:59] * epony opens what is a makefile for 100
[01:40:12] <pyzozord> but I am not very fixed about these opinions, I'm kind of writing this with a bit of tongue-in-cheek
[01:40:26] <epony> tongue in cheek, accepted
[01:40:42] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[01:41:07] <epony> Tonga e Chicana is a novel from the famous 16th centiry author..
[01:42:12] *** Quits: zaher (~zaher@37.48.152.162) (Ping timeout: 256 seconds)
[01:42:21] *** Joins: glider (~glider@user/glider)
[01:42:25] <ProfSimm> Guest4960: you can save your queries in sqlite itself
[01:42:29] <deniska> pyzozord: my favorite party trick: https://godbolt.org/z/jsTe1vq1f
[01:42:30] <bayaz> Title: Compiler Explorer - C (x86-64 clang (trunk)) 
[01:42:53] <ProfSimm> Guest4960: as for performance, joining two or 5 or 10 tables isn't relevant. The specific queries and schema are
[01:42:53] <deniska> pyzozord: compiler, unlike you, knows a formula to sum numbers from 0 to N :D
[01:43:13] <ProfSimm> Guest62:  ^
[01:43:17] <epony> where N is about 1/3 of the numbers it count up to
[01:43:44] <ProfSimm> Guest62: check out CQRS, reactive programming, and the purpose and function of event-sources read models (projections)
[01:43:51] <ProfSimm> event-sourceD*
[01:44:16] <ProfSimm> Guest4960: you can project any number of read models, optimizing for any query you may have
[01:44:20] <ProfSimm> Guest62: *
[01:44:48] <pyzozord> deniska: seems the lhs has nothing to do with rhs
[01:44:58] <pyzozord> deniska: it optimized the loop out
[01:45:06] <deniska> pyzozord: yes. It replaced it with math
[01:45:18] <pyzozord> interesting even with -O1
[01:45:36] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:45:57] <pyzozord> those are impressive for sure, but my point is that you know you can relay on these
[01:46:18] <pyzozord> unless you know they will happen, which will require time to learn these and test that they are indeed used
[01:46:38] <pyzozord> otherwise you are on the mercy of the compiler and luck
[01:46:40] *** Joins: anderson (~ande@user/anderson)
[01:46:52] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:46:57] <pyzozord> s/can/can't/
[01:47:05] <deniska> pyzozord: worst case scenario a compiler writes something an asm programmer would write
[01:47:21] <deniska> pyzozord: but that's the worst case, in a typical case a compiler writes something better than that
[01:48:04] <pyzozord> my point is that worst case compiler writes worse things than a human did, because it can't infer from code enough information
[01:48:16] <pyzozord> but I can't make any examples I'm not good at this
[01:48:49] *** Joins: hlauk (~hlauk@176.33.96.72)
[01:49:16] <pyzozord> programmer must ensure that compiler can infer as much information about the code as possible and that then becomes it's own art of optimization
[01:49:18] <epony> you have very low trust in both compilers and people
[01:49:25] <pyzozord> just not for the cpu, now it's optimization for the compiler
[01:49:32] <epony> so.. low level code for you then
[01:49:57] <pyzozord> btw in real life practical scenarios compilers are greaet
[01:50:00] <pyzozord> especially for work stuff
[01:50:23] <epony> reinstated on batch job submission office ;-)
[01:50:24] <deniska> pyzozord: unless something is seriously wrong, the compiler may build suboptimal but still correct code, which likely performs faster than your average ruby VM :)
[01:50:29] <pyzozord> which rarely needs to squezee full performance out of the machine, but does often need to squeeze out full performance out of the programmer
[01:51:23] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:51:37] <deniska> pyzozord: nowadays getting good performance from a machine means making your program multithreaded, and for that asm is no much help compared to C++, because Good Things To Do are not directly exposed in either
[01:51:37] <pyzozord> deniska: yes yes, this is all highly theoretical and syntectical mambo jumbo on my side, in practice it of course is an amazing tool
[01:51:44] <pyzozord> same as garbage collectors
[01:52:07] <epony> excellent game set and match, without any irregularities, it just pauses the ball in zero state above the net
[01:52:29] * epony runs around it
[01:52:37] <epony> and game over
[01:53:07] <epony> ^ GC to you, 1 for me.
[01:53:16] <pyzozord> epony: thing is that's not the game we play ;)
[01:53:27] *** Quits: baracurda (~baracurda@user/parserblabla) (Ping timeout: 276 seconds)
[01:53:31] <epony> sure..
[01:53:49] <epony> still GC to you, 1 for me.
[01:54:08] *** Quits: jaysicks (~jaysicks@194.5.48.227) (Ping timeout: 272 seconds)
[01:54:33] <epony> (it repeats every time the GC pauses)
[01:54:54] <epony> wall street drops 20%
[01:55:20] <epony> (does not matter, you're still trading your own stock)
[01:55:44] <pyzozord> deniska: that optimiation trick is indeed impressive
[01:55:55] <pyzozord> wonder how many of these are in clang
[01:56:49] <pyzozord> I don't reall understand that assembly
[01:57:37] <deniska> pyzozord: it more or less does (n-1)*n/2 thing
[01:57:50] <tomathy> is there a highly restrictive license 
[01:58:01] <pyzozord> ooh the triangle trick
[01:58:08] <deniska> pyzozord: test and cmov are there probably to handle some edge case
[01:58:23] *** Quits: Guest62 (~Guest62@cpe-74-65-0-247.rochester.res.rr.com) (Quit: Client closed)
[01:58:40] <deniska> pyzozord: and LEA is often used for doing simple math operations which could be handled by it, because LEA is really fast
[01:58:46] <pyzozord> yes in the end math wins
[01:58:51] <pyzozord> and puzzles
[02:00:42] <deniska> pyzozord: another one is trying to calculate the amount of bits in a number makes a compiler to emit a single POPCNT instruction which does exactly that, instead of actually looping
[02:00:51] <deniska> the amount of set bits*
[02:00:52] <epony> https://en.wikipedia.org/wiki/Doctor_Matrix#Fictitious_biography
[02:00:52] <bayaz> Title: Irving Joshua Matrix - Wikipedia 
[02:03:52] <deniska> pyzozord: Godbolt has some talks about that
[02:04:00] <copier> why are nodal editors everywhere now
[02:04:17] <deniska> pyzozord: https://www.youtube.com/watch?v=bSkpMdDe4g4
[02:04:18] <bayaz> Title: CppCon 2017: Matt Godbolt ?What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid? 
[02:04:31] <pyzozord> I think I saw this one :)
[02:04:32] <epony> nodal modal.. what's the fifferenfe
[02:05:11] <epony> https://www.google.com/search?tbm=isch&q=furaffic+fark
[02:05:12] <bayaz> Title: furaffic fark - Google Search 
[02:05:35] <pyzozord> copier: vim has become more mainstream over time
[02:05:41] <epony> lies
[02:06:06] <deniska> I didn't use vim in 2010, I use vim nowadays, certainly more mainstream for me :D
[02:06:30] <pyzozord> I actually go way back with vim
[02:06:32] <deniska> the question was about nodal, not modal though
[02:06:33] <epony> you believeth, you proveth ith
[02:06:42] <deniska> not sure what nodal is
[02:06:58] <epony> you know like modal only more congenitive
[02:07:10] <pyzozord> although I wasn't that good in it. First time I saw it and learn some basic motions when I was about 16 or so
[02:07:10] <copier> pyzozord: tha's modal, not nodal
[02:07:34] <pyzozord> copier: oh you actually mean "nodal", then I don't know anything about that
[02:07:42] <copier> for example, unity
[02:07:44] <copier> blender
[02:07:46] <epony> when you were 16, vi was twice your age
[02:07:49] <copier> android jetpack compose
[02:07:59] *** Joins: hexingb (~hexingb@112.21.164.38)
[02:08:10] <pyzozord> oh you mean the flow chart thingies
[02:08:42] <pyzozord> well like you say unity and others popularized them, also they are great for people who need to program and don't want to learn programming
[02:08:45] <deniska> copier: sometimes it makes sense to model things as boxes connected by the lines
[02:08:48] <epony> jetset.nodal
[02:08:58] <epony> rafa.nodall
[02:09:36] <copier> deniska: lmao, but when is that
[02:09:42] *** Joins: jaysicks (~jaysicks@185-29-82-222.pool.digikabel.hu)
[02:09:46] <copier> epony: are those also nodal editors? or is this a joke
[02:09:58] <epony> it's a joke of some sort..
[02:10:12] <epony> probably about nodal.js
[02:10:13] <deniska> In blender you use nodes to describe what is essentially a shader, and a shader is largerly a flow of values from inputs to outputs with some transforms, so nodes make sense for it
[02:10:18] <pyzozord> you know what would be cool?
[02:10:35] <pyzozord> if programming was done in minecraft like game
[02:10:59] <epony> that actually is how programming is done, in second grade in 2020
[02:11:08] <pyzozord> so I'd be loging in and running around in a 3d world whole day setting up conveyer-belt like pipelines and stuff
[02:11:41] <pyzozord> what's cool about that is that it engages spatial reasoning part of the brain
[02:12:05] <epony> time to reach object oriented programming.. timed out
[02:12:15] <pyzozord> I feel I remember better "it's kinda there, behind that rock" rather than arbitrary wall of text
[02:13:24] <deniska> and these are legacy caves
[02:13:33] <deniska> be careful, there's lava
[02:13:35] <pyzozord> yes :D
[02:16:37] <pyzozord> can't find the right monkeyuser.com comic
[02:16:37] *** Quits: hexingb (~hexingb@112.21.164.38) (Ping timeout: 240 seconds)
[02:17:42] <pyzozord> https://www.monkeyuser.com/2018/workaround/
[02:17:43] <bayaz> Title: Workaround 
[02:18:55] <deniska> you may laugh, but mountains probably weren't there when they started :D
[02:19:05] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[02:19:28] <deniska> only a river, and a boat made perfect sense
[02:20:01] <loganlee[gnu]> hello
[02:20:02] <pyzozord> and bugs swimming in the water
[02:20:46] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[02:27:29] *** Quits: hlauk (~hlauk@176.33.96.72) (Quit: Leaving)
[02:30:21] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[02:32:50] *** Quits: pizdets_ (~pizdets@183.182.111.242) (Ping timeout: 250 seconds)
[02:33:48] *** Joins: pizdets (~pizdets@183.182.114.255)
[02:36:22] <tomathy> why does Linux Torlord hate Java
[02:38:23] *** Joins: zaher (~zaher@37.48.152.162)
[02:39:07] <apotheon> 'cause Java sucks
[02:39:18] <apotheon> just a guess
[02:39:38] <apotheon> I'm getting less and less polite about this stuff lately.
[02:39:41] *** Parts: laman1 (~laman@rego.ai) (WeeChat 3.3)
[02:40:23] <apotheon> It might have something to do with the fact that people flip their fucking lids of I try to sound "reasonable" and talk about the pros and cons.
[02:41:11] <apotheon> I should just shit all over something I think sucks and leave it at that.  Reasonable discussion is how you get hated by people on "both sides", so I'd rather go all-in on getting one side to hate/fear me or on getting both sides to hate/fear me.
[02:41:35] <tomathy> woah
[02:41:41] <apotheon> At least then I can enjoy myself while people act like giant, gaping assholes.
[02:41:42] <tomathy> but why does Java suck?
[02:42:06] <apotheon> It was created by bureaucrats.  That's probably the biggest reason.
[02:42:15] <apotheon> If you mean *how* does it suck . . .
[02:42:24] <tomathy> yes how 
[02:43:13] <tomathy> is another avenue of interest i have 
[02:44:50] <apotheon> bloated bureacratic language, bloated bureaucratic tools, bloated bureaucratic VM, shit licensing, a community with its collective head way up its collective bureaucratic ass about bureaucratic ways to write software, a community-common complete misunderstanding of every good idea that supposedly gets picked up by the community, stupid legal disputes, ponderous operational characteristics,
[02:44:56] <apotheon> security horrorshows all the time, "write once run nowhere" . . .
[02:45:10] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[02:45:12] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[02:45:26] *** Joins: flakland (~flaknet99@32.211.211.39)
[02:45:38] <apotheon> never better than about the eighth best at anything
[02:46:04] <apotheon> Its notions of OOP are bloated, bureaucratic, backward, and painful.
[02:46:34] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[02:47:10] <pyzozord> tomathy: this repo captures perfectly what's wrong with java and it's way of doing things https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition
[02:47:11] <bayaz> Title: GitHub - EnterpriseQualityCoding/FizzBuzzEnterpriseEdition: FizzBuzz Enterprise Edition is a no-nonsense implementation of FizzBuzz made by serious businessmen for serious business purposes. 
[02:47:56] <pyzozord> tomathy: of course like with any other tool you can write fairly reasonable code in it if you try harder but you will be going against the community best practices
[02:49:19] <pyzozord> my head is spinning just looking at this repoo
[02:49:30] <pyzozord> https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition/tree/uinverse/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/interfaces/factories
[02:49:31] <bayaz> Title: FizzBuzzEnterpriseEdition/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/interfaces/factories at uinverse ? EnterpriseQualityCoding/FizzBuzzEnterpriseEdition 
[02:49:44] <pyzozord> oh that was pretty spammy, sorry about that
[02:49:56] <apotheon> It's cool.
[02:50:13] <apotheon> It was beautifully illustrative.
[02:53:12] <tomathy> i program in java because it helps me think
[02:53:34] <tomathy> i'm most comfortable in java
[02:53:38] <pyzozord> here is python version of that entire repository: for i in range(1, 101): print("Fizz"*(i%3==0)+"Buzz"*(i%5==0) or str(i))
[02:53:55] <pyzozord> the difference is in philosophy
[02:54:07] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[02:54:31] *** Joins: independent56 (~independe@2.26.38.138)
[02:54:41] <pyzozord> tomathy: that's cool, some people like this approach to programming, maybe you are one of them
[02:55:10] <pyzozord> I feel I'm not smart enough to handle the java way of doing things. I need simple.
[02:56:13] <pyzozord> one man's trash is another man's treasure
[02:56:21] <tomathy> python is seen as more badass than java afaik
[02:56:33] <tomathy> they want me to learn python for my job
[02:56:38] <apotheon> tomathy: What about it helps you think and makes you feel comfortable?
[02:56:49] <apotheon> I don't like Python, either, for what it's worth.
[02:57:18] <tomathy> apotheon: i'm comfortable in it because the language i can run and compile in my terminal without worrying about anything
[02:57:19] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[02:57:43] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[02:57:54] <tomathy> javac and the virtual machine allow me to do that i think
[02:58:06] <pyzozord> many languages can do that nowadays, but it's true that java was one of the earlier ones
[02:58:22] <nomagno> Well you can do that with many other languages
[02:58:23] <apotheon> The only Python I enjoyed writing was using Flask, whose design is based on a Ruby tool called Sinatra -- and for someone familiar with both languages (e.g. me) it's obvious that Flask incentivizes writing code more like a Rubyist than like a Pythonista, to some degree.
[02:58:44] <pyzozord> (not really true, interpreted languages go all the way back)
[02:59:15] <nomagno> Go, python, kotlin, almost all lisps, C, C++, ruby, forth, pascal, fortran...
[02:59:34] <nomagno> Smalltalk is the only notable example of a language with crippled terminal support
[02:59:42] *** Joins: hexingb (~hexingb@112.21.164.38)
[02:59:55] <pyzozord> nodejs, lua
[03:00:18] <nomagno> we don't talk about JS
[03:00:23] <apotheon> My observation is that 98%+ of Java coders think programming in any context other than a full IDE is stupid, primitive, unsophisticated, backward, lowbrow, luddite-like, masochistic, evil, or otherwise doubleplusungood.
[03:00:27] <pyzozord> all jvm based ones like clojure but that could be in the "all lisps" category
[03:00:57] <apotheon> . . . so feeling comfortable writing Java in a console environments strikes me as distinctly odd.
[03:01:11] <nomagno> pyzozord: Well yeah. Really I only know of smalltalk as a GUI-only language
[03:01:24] <pyzozord> apotheon: entrtaining, but we got the idea at the second epithet
[03:01:51] <nomagno> And it's not GUI-only. It's standard library just happens to be bindings to a graphical environment :)
[03:02:06] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[03:02:10] <pyzozord> no need to go overboard, there might be people who like java, and most certainly do not fit that description
[03:03:17] <pyzozord> nomagno: I wouldn't agree about the compiled languages in your list though, based on how tomathy formulated the features he likes
[03:03:36] *** Quits: analognoise (~analognoi@185.229.59.36) (Quit: Leaving)
[03:03:55] <pyzozord> nomagno: I'd interpret it that he really don't cares for anything compiled and anything else other than the most straightforward code->run cycle
[03:04:15] <pyzozord> s/don't cares/doesn't care/
[03:04:19] <tomathy> yes that's all i care about
[03:04:26] <tomathy> IDE's are a tooling nightmare
[03:04:48] <pyzozord> python is a great one but it has some pains about packaging
[03:05:03] <pyzozord> nodejs is really not bad in that regard
[03:05:18] <nomagno> Anything with mostly centralized packaging hits my nerve
[03:05:42] <pyzozord> php, perl, lua, all these fit the bill
[03:05:52] *** Quits: kariosfox (~kariosfox@89.229.175.242) (Remote host closed the connection)
[03:06:01] <pyzozord> smalltalk will work too, also golang
[03:06:11] <pyzozord> probably ruby, but I don't know it
[03:06:23] <nomagno> Security issues left and right! Not trustless! License mixes everywhere! Possibly some spooky 4BSD-licensed library that I can't advertise!
[03:06:24] <pyzozord> and lots more interpreted languages I am not familiar with
[03:06:46] <nomagno> Cargo, NPM, pip, conda...
[03:07:01] <nomagno> I hate every one of them, honestly
[03:07:30] <nomagno> I half-tolerate CPAN because that's just HTTP with tarballs, I can painlessly host my own and it's not really part of the language
[03:07:33] <pyzozord> nither is perfect
[03:07:33] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Ping timeout: 276 seconds)
[03:07:39] <oldlaptop> nomagno: use tcl: where the lame attempt at a special language-specific package manager fell flat because nobody used it
[03:08:09] <pyzozord> I think npm is something similar actually
[03:08:18] <pyzozord> probably all of them are similar
[03:08:27] <pyzozord> although cpan might be simpler
[03:08:32] <nomagno> Issue is with monoliths, mostly
[03:08:38] <flakland> for reals, why do i have to install a python script, just run the darn thing
[03:08:50] <pyzozord> you can run it
[03:08:55] <nomagno> A complete massive monolith that everyone and their mother contributes to is kinda scary
[03:08:58] <pyzozord> but it can't be a package or something like that
[03:09:27] <pyzozord> you can do python foo.py
[03:09:43] <flakland> why can't it just be a directory, why does everything need questionable management systems
[03:09:46] <pyzozord> but yeah packaging in python is a quite a mess, very confusing, I don't really get it
[03:10:10] <pyzozord> nodejs dose it with just directories
[03:10:36] <nomagno> Unix filesystem is literally the cleanest possible system yes
[03:10:47] <pyzozord> simply each file a is a module that's it
[03:11:12] <pyzozord> but it has the annoying pain that each package seems to depend on 500mb of other packages
[03:11:50] <nomagno> pyzozord: That's not just a pain
[03:11:57] <c2a1> What do you guys think about lua
[03:11:59] <nomagno> See the legendary "leftpad" package
[03:12:00] <nomagno> Like,
[03:12:02] <nomagno> What the fuck
[03:12:22] <pyzozord> lua has a bit weird syntax
[03:12:23] <nomagno> c2a1: pretty nice but I'm unsure why it's used so much for modding/user-generated content
[03:12:26] <c2a1> Imo lua is like the sonic the hedgehog of scripting languages
[03:12:32] <flakland> lua looks like a mighty fine scripting language
[03:12:37] <c2a1> The community is very... Interesting
[03:12:38] <nomagno> It's weird, it has weird features, and it isn't even that small!
[03:12:48] <nomagno> I wouldn't pick it for modding my game, like everyone else doed
[03:12:57] <nomagno> s/doed/does/
[03:13:09] <flakland> reason being, it's simplicity
[03:13:15] <pyzozord> nomagno: well yeah now that you have your own vm, there is no point picking anything else than your own stuff
[03:13:20] <pyzozord> and make it how you like it :D
[03:13:23] <c2a1> nomagno: the api is very simple to implement in c
[03:13:36] <oldlaptop> Do you mean "to use from C"?
[03:14:09] <c2a1> Yes
[03:14:15] <nomagno> pyzozord: yeah my assembly language is slowly evolving as I add preprocessor features and fill in the reserved 16 stdlib subroutines IDs
[03:14:33] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[03:14:37] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[03:14:41] *** Parts: Joanna (uid57472@id-57472.lymington.irccloud.com) ()
[03:14:50] *** Joins: flakland (~flaknet99@32.211.211.39)
[03:14:55] * oldlaptop has noticed, lately, this strange trend to redefine "to implement FooLib" as "to accomplish the arduous and complicated task of using FooLib, almost beyond a mere 'college-educated software engineer' like you or me", rather than "to write FooLib"
[03:14:57] *** Quits: seekerm (uid209543@user/seekerm) (Quit: Connection closed for inactivity)
[03:15:10] <nomagno> Right now I have pseudo-instructions for looping, subroutines for MEMSET, MEMCPY and stack operations POP, PUSH
[03:15:31] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[03:15:42] <apotheon> hmm
[03:15:43] <nomagno> And thinking about implementing a MEMREV subroutine, that swaps around a chunk of memory with XOR swap
[03:15:52] <apotheon> I'm starting to wonder if tomathy might like Pascal or Ada.
[03:16:00] <nomagno> Would be used for popping/pushing funkiness
[03:16:05] <apotheon> maybe not Ada
[03:16:08] <c2a1> oldlaptop, what do you mean by that
[03:16:17] <tomathy> never used em
[03:16:17] <nomagno> Such as apotheon: Ada no, yeah
[03:16:18] <nomagno> It's like 100% static
[03:16:26] <tomathy> Ada probably
[03:16:30] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:16:59] <oldlaptop> c2a1: I don't see very many ways to rephrase that.
[03:17:29] <apotheon> There's a middle-of-the-road "just a programming language" design to Java that it shares in common with Pascal (especially Object Pascal, given Java essentially forces its concept of objects into every program).
[03:17:38] *** Joins: BUSY (~BUSY@user/busy)
[03:17:43] *** Quits: Akuli (~Akuli@87-94-109-79.bb.dnainternet.fi) (Quit: Akuli)
[03:17:56] <c2a1> oldlaptop: the middle part confuses me. I don't keep up with the news.
[03:18:21] <c2a1> I'm not college educated if that has anything to do with that statement
[03:18:54] <oldlaptop> Okay: /me has noticed, lately, this strange trend to redefine "to implement FooLib" as "to use FooLib" instead of "to write FooLib"
[03:19:20] <c2a1> Like, where is this trend? Corporations?
[03:19:23] <nomagno> oldlaptop: That sounds wrong
[03:19:27] <flakland> the redefiners are hard at work these days
[03:19:43] <oldlaptop> Well, *here*, about five minutes ago, for a start
[03:19:44] <c2a1> Social media and/or irc? Among novices?
[03:19:58] <c2a1> Lol okay
[03:20:06] <pyzozord> sounds wrong to me
[03:20:08] <oldlaptop> <c2a1> nomagno: the api is very simple to implement in c
[03:20:08] <oldlaptop> <oldlaptop> Do you mean "to use from C"?
[03:20:08] <oldlaptop> <c2a1> Yes
[03:20:31] <pyzozord> never heard anyone say "to implement a library" while meaning "to use a library"
[03:20:34] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:20:38] <nomagno> Oh... I did wonder what that meant
[03:20:43] <nomagno> That's horrendous!
[03:20:44] <oldlaptop> Perhaps I'm misinterpreting something, and you really did mean all along that it's very simple to write an implementation of the lua API
[03:20:45] *** Joins: off^ (~off@50.235.176.163)
[03:20:50] <c2a1> oldlaptop: you must mean this channel
[03:20:53] <apotheon> 16:50 < pyzozord> never heard anyone say "to implement a library" while meaning "to use a library"
[03:21:03] <apotheon> I have a few times and it annoys th shit out of me, because it's confusing as hell.
[03:21:17] <oldlaptop> Well, I have to say that's the first time I've noticed anyone doing that here
[03:21:28] <pyzozord> seems like something a newbie would maybe say?
[03:21:34] <apotheon> I think it might have started with some bullshit buzzwordiness.
[03:22:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:22:09] <oldlaptop> pyzozord: I would have associated it with undergrads at some stereotypical third-rate American state college with an attempted CS program
[03:22:10] *** Quits: independent56 (~independe@2.26.38.138) (Ping timeout: 272 seconds)
[03:22:24] <nomagno> How was this JavaScript feature that allows you to intercept function calls on the fly to improve compatibility called?
[03:22:32] <pyzozord> oldlaptop: can you quote what exactly sounded like that?
[03:22:42] <c2a1> oldlaptop: that I did. And I'm losing interest in doing such things very fast.
[03:22:43] <nomagno> Might be related to that mindset
[03:22:44] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[03:22:45] <oldlaptop> I already copypasted it once :|
[03:23:00] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[03:23:01] <pyzozord> oh I missed it
[03:23:32] <pyzozord> oh yeah looks like c2a1 just used it that way
[03:23:38] <oldlaptop> c2a1: I don't mean to dogpile, sorry. :(
[03:24:20] <c2a1> Well when you make accusations like that on irc people are notorious for dogpiling you
[03:24:35] <pyzozord> c2a1: hopefully not in this channel
[03:24:38] <c2a1> Not to say it wasnt true
[03:25:07] *** Joins: myon98 (~myon98@user/myon98)
[03:25:18] <pyzozord> c2a1: hope you don't feel singled out, well make mistakes all the time here
[03:25:26] <oldlaptop> nomagno: http://www.tcl-lang.org/man/tcl8.6/TclCmd/trace.htm :P
[03:25:26] <bayaz> Title: trace manual page - Tcl Built-In Commands 
[03:25:41] <oldlaptop> (tcl has COME FROM)
[03:25:50] <pyzozord> c2a1: I'm pretty sure I do the most mistakes
[03:25:55] <pyzozord> or at least the most on regular basis
[03:26:01] <nomagno> oldlaptop: I'm looking for a generic term
[03:26:01] <nomagno> Wikipedia had an entry, I'm sure...
[03:26:09] <oldlaptop> "monkey-patch"?
[03:26:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:26:23] <nomagno> No, I have found that already
[03:26:24] <nomagno> Not thay
[03:26:31] <oldlaptop> (I normally see that in a testing context.)
[03:26:48] <nomagno> not that*
[03:27:42] <nomagno> https://en.m.wikipedia.org/wiki/Polyfill_(programming)
[03:27:42] <bayaz> Title: Polyfill (programming) - Wikipedia 
[03:27:43] <nomagno> Found it!
[03:27:47] <oldlaptop> Aaaaah.
[03:28:03] <pyzozord> oh yeah very common term in web frontend dev
[03:28:25] <oldlaptop> I guess that might make some sense, in the sense that you have to drag along an implementation of some interface to use it?
[03:28:41] <pyzozord> now I wonder on the etymology of it
[03:28:51] <pyzozord> "many-fill"?
[03:28:52] <oldlaptop> but you don't implement it yourself, you let some npm thing you've never seen and never plan to see do that for you
[03:29:04] <tomathy> on british keyboard how do you do the 3rd key on the top left
[03:29:08] <tomathy> Â¬`
[03:29:09] <Nutcrawler> whats a good portable C library to make graphical programs with
[03:29:10] <tomathy> then what
[03:29:31] <oldlaptop> pyzozord: The linked wikipedia article discusses the etymology.
[03:29:31] <nomagno> Pyzozord: https://remysharp.com/2010/10/08/what-is-a-polyfill/
[03:29:31] <bayaz> Title: What is a Polyfill? 
[03:29:37] <flakland> SDL1
[03:29:49] <zvijezda> Nutcrawler, what is your definition of graphical?
[03:30:09] <Nutcrawler> gui and graphics 
[03:30:16] <oldlaptop> It strikes me that American ears might understand "bondo" a bit better
[03:30:18] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Remote host closed the connection)
[03:30:31] <oldlaptop> or maybe "bodyfill" (although the possibilities for disaster there are obvious)
[03:30:33] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:31:19] *** Joins: blahboybaz (~blahboyba@c-67-161-96-25.hsd1.wa.comcast.net)
[03:31:36] <pyzozord> "The term is based on the multipurpose filling paste brand Polyfilla"
[03:31:43] <pyzozord> as arbitrary as one can get
[03:32:10] *** Quits: xff0x (~xff0x@2001:1a81:524f:ad00:23cf:423a:2190:173f) (Ping timeout: 260 seconds)
[03:32:14] <pyzozord> but it does the job, it brings up the right image in mind
[03:32:17] <oldlaptop> as I say, an American would have made up something based on "Bondo" (which is a not entirely dissimilar product used to hide dents in cars)
[03:32:39] *** Joins: xff0x (~xff0x@2001:1a81:524f:ad00:ca8e:e915:817b:c700)
[03:33:05] <pyzozord> "bondo" would have mean absolutely nothing to my easter european ears
[03:33:25] <zvijezda> Nutcrawler, and for portability, what are you thinking about in that regard?
[03:33:27] <oldlaptop> such is the peril of brand names
[03:33:50] *** Quits: jaysicks (~jaysicks@185-29-82-222.pool.digikabel.hu) (Ping timeout: 256 seconds)
[03:35:25] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 240 seconds)
[03:36:10] <apotheon> In a way, copyfree licensing might be regarded as a polyfill providing a copyright-less API in a copyrighted world.
[03:36:26] <oldlaptop> Lawyer repellant
[03:36:50] *** Joins: jaysicks (~jaysicks@185-29-82-222.pool.digikabel.hu)
[03:36:56] <apotheon> nice
[03:36:59] <apotheon> I like that phrase.
[03:37:03] <apotheon> I should put it on t-shirts.
[03:37:26] *** Joins: duuude (~user@user/duuude)
[03:38:23] <apotheon> Nutcrawler: Are these the kinds of things you want?  http://copyfree.org/resources/works?select=toolkit
[03:38:33] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[03:38:53] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[03:40:11] <oldlaptop> Nutcrawler: I would say defining the GUI directly in C is a mistake, when you could embed Tcl/Tk (and write the GUI in Tcl, which you could then embed in a C binary if it came to that)
[03:50:34] *** Quits: martums5 (~martums@user/martums) (Read error: Connection reset by peer)
[03:51:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:52:52] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[03:54:39] *** Joins: Zeturic (~Orimendix@50-25-77-41.krmtcmta02.res.dyn.suddenlink.net)
[03:55:52] *** Joins: quartz (~user_name@user/quartz)
[04:01:27] <pulse> wxwidgets is cool
[04:02:42] *** Quits: hexingb (~hexingb@112.21.164.38) (Ping timeout: 272 seconds)
[04:03:21] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[04:03:21] *** Joins: Ramalata (~juliantp@191.44.34.70)
[04:03:29] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[04:03:34] *** Parts: Ramalata (~juliantp@191.44.34.70) ()
[04:05:45] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[04:06:56] *** Quits: freepp (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:07:53] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:09:05] <absentia> write your ui in brainfuck
[04:09:09] *** Joins: jamea (~jamea@177.239.81.39)
[04:09:43] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:12:19] *** Joins: hexingb (~hexingb@112.21.164.38)
[04:12:57] *** Quits: Jong (~Jong@2620:10d:c090:400::5:8039) (Ping timeout: 240 seconds)
[04:13:33] <loganlee[gnu]> C is cool but C++ syntax looks retarded to me
[04:13:51] *** Parts: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) ()
[04:14:06] <loganlee[gnu]> such as stl
[04:15:24] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[04:15:28] <absentia> loganlee[gnu]: you are very wise
[04:15:32] <copier> HOW DO FUNCTIONAL LANGUAGES ORGANIZE LARGE CODEBASES 
[04:15:37] <copier> CAN WE HAVE THE CONVERSATION IN ALL CAPS
[04:15:40] <copier> IT HELPS ME REMEMBER
[04:15:43] <absentia> OK
[04:16:02] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[04:18:34] *** Joins: bnchs___ (~bnchs@41.143.57.238)
[04:21:11] *** Quits: bnchs__ (~bnchs@41.141.153.83) (Ping timeout: 256 seconds)
[04:23:18] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[04:23:27] *** Quits: quartz (~user_name@user/quartz) (Ping timeout: 256 seconds)
[04:25:20] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:26] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:30:14] <nomagno> copier: I DON'T KNOW. WHY AM I SCREAMING?
[04:31:37] <shibboleth> even though you have no mouth?
[04:31:50] <shibboleth> i dunno, maybe you're a fan of harlan ellison
[04:32:37] *** Joins: zaher_ (~zaher@37.48.182.207)
[04:32:52] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[04:33:39] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:34:37] *** Quits: zaher (~zaher@37.48.152.162) (Ping timeout: 240 seconds)
[04:35:37] *** Quits: Inari (~Pinkishu@p4fe7e5a5.dip0.t-ipconnect.de) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:38:10] *** Quits: bnchs___ (~bnchs@41.143.57.238) (Ping timeout: 272 seconds)
[04:43:29] <c2a1> Shibboleth... Had to look that one up
[04:45:26] <oldlaptop> Uh... sibboleth?
[04:45:32] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[04:45:36] <absentia> off with his head!!
[04:47:09] *** Joins: jazzy2 (~jaziz@user/jaziz)
[04:48:12] <loganlee[gnu]> hello
[04:48:41] <shibboleth> absentia, don't forget about his family
[04:50:39] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 256 seconds)
[04:52:30] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[04:53:10] *** Quits: Mangy_Dog (~Mange@user/mangy-dog/x-7397214) (Ping timeout: 256 seconds)
[04:53:40] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[04:55:02] <c2a1> M1 Macs indeed look fast
[04:55:19] <c2a1> Since when did qemu have a virtual 3d capable gpu
[05:00:06] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[05:00:27] <flakland> since at lest 2.5 --> https://wiki.qemu.org/ChangeLog/2.5  "Support for passthrough of Intel integrated GPUs"   dec 2015, totaly too lazy to look for more references
[05:00:29] <bayaz> Title: ChangeLog/2.5 - QEMU 
[05:00:57] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:01:26] *** Quits: minto (~mintograd@47.201.5.61) (Quit: Leaving)
[05:01:32] *** Joins: quartz (~user_name@user/quartz)
[05:01:54] <c2a1> Wrong channel
[05:04:49] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[05:05:18] <norias> c2a1: in my experience, it takes some poking at
[05:05:39] *** Joins: martums5 (~martums@user/martums)
[05:05:45] *** Joins: junebug (~junebug@2600:1700:3db0:2540:2d12:aa64:c287:4ac7)
[05:07:18] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 272 seconds)
[05:09:22] <c2a1> norias: hmm?
[05:10:51] <c2a1> Flakland: not that one
[05:11:57] <flakland> which one?
[05:12:51] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[05:12:56] <flakland> like you can pass it /dev/dri nodes?
[05:14:17] <c2a1> Flakland: the virtio one
[05:14:48] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[05:17:18] <c2a1> Oldlaptop: my ancestors were shibboleths likely
[05:18:09] <c2a1> I saw some pictures of my settler ancestors and they looked like they could have been upper class
[05:18:33] *** Joins: rcutler (~rcutler@user/rcutler)
[05:20:06] <flakland> https://wiki.qemu.org/ChangeLog/2.4  virtio-gpu support added (wth 2d acceleration support)   
[05:20:08] <bayaz> Title: ChangeLog/2.4 - QEMU 
[05:20:34] <flakland> <= 2015 ?
[05:21:21] <c2a1> Flakland: does that use GPU passthrough?
[05:21:29] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[05:22:20] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[05:22:24] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[05:22:40] <flakland> something called virgil renderer
[05:22:54] <flakland> for 3d support
[05:23:31] *** Joins: hololeap (~hololeap@user/hololeap)
[05:23:37] <flakland> https://lwn.net/Articles/611212/
[05:23:38] <bayaz> Title: Virgil 3D: A virtual GPU [LWN.net] 
[05:26:29] <c2a1> Yeah that's it I guess. Thought there was something new that could work with different GPUs with minimal performance penalty due to an m1 linux virtualization article showing impressive benchmarks. It used something different I'm pretty sure.
[05:34:57] <c2a1> https://en.m.wikipedia.org/wiki/Macintosh_II
[05:34:57] <bayaz> Title: Macintosh II - Wikipedia 
[05:35:29] <c2a1> "Â With a 13-inch color monitor and 8-bit display card the price was aroundÂ US$7,145Â (equivalent to $16,280 in 2020)." ... What
[05:35:40] *** Quits: zaher_ (~zaher@37.48.182.207) (Ping timeout: 256 seconds)
[05:36:53] <flakland> seems fishy, they saying the appl II didn't keep up with inflation?
[05:37:26] *** Joins: vysn (~vysn@user/vysn)
[05:37:36] <oldlaptop> c2a1: A color bitmap display like that, and the hardware to drive it, was *special* at that time.
[05:37:42] *** Quits: hexingb (~hexingb@112.21.164.38) (Ping timeout: 272 seconds)
[05:38:16] <oldlaptop> not to mention how outrageously expensive memory in particular was by the standard we're used to today
[05:38:20] *** Quits: tomathy (~jenova@user/quetzl) (Ping timeout: 268 seconds)
[05:38:54] *** Joins: hexingb (~hexingb@2409:8902:7bc1:5bc3:e0e1:57f6:396f:9aa3)
[05:41:15] *** Quits: junebug (~junebug@2600:1700:3db0:2540:2d12:aa64:c287:4ac7) (Quit: Leaving)
[05:41:44] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[05:42:18] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:42:21] <c2a1> Oldlaptop: compared to a sun 3 though?
[05:42:21] <flakland> oh the macintosh II, derp. wow what a flop
[05:42:42] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:42:56] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[05:43:07] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[05:43:07] *** brabrax_ is now known as brabrax
[05:45:08] <oldlaptop> c2a1: ISTR those tended to be even more expensive at the time (?)
[05:46:10] <oldlaptop> of *course* the sun has a real OS and so on
[05:47:51] <c2a1> Interesting
[05:48:17] <c2a1> What were macs used for back then
[05:48:39] <c2a1> I have this image of an overpriced Photoshop machine stuck in my head
[05:53:22] <oldlaptop> This is cool: http://bitsavers.org/pdf/sun/Sun_Price_List_Dec88.pdf
[05:53:22] <bayaz> Type: application/pdf Size: 4.4 MB 
[05:53:25] <ornxka> what is the difference between lz4 stream and lz4 codec
[05:55:09] <oldlaptop> looks like >$14k in 1988 USD for a machine with a color display (admittedly at what was *insanely* high resolution at the time)
[05:55:34] <oldlaptop> $11,700 for the diskless model
[05:55:52] <oldlaptop> on which subject see http://catb.org/jargon/html/D/dickless-workstation.html
[05:55:53] <bayaz> Title: dickless workstation 
[05:56:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:56:09] *** Joins: Irishmanluke (~luke@50-116-44-236.ip.linodeusercontent.com)
[05:56:28] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Max SendQ exceeded)
[05:57:00] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:57:39] <oldlaptop> as for particular applications of macs in those days, weren't apple fairly early in the whole "desktop publishing" business?
[05:59:05] <oldlaptop> keep in mind that the equivalent of a "photoshop machine" was really special at the time too - to the extent such a thing could even *exist*
[05:59:38] <oldlaptop> note how proud they are in that price list of how all the color systems are capable of 8-bit color
[06:00:43] *** Joins: Cashlin (~hp@user/cashlin)
[06:01:07] <oldlaptop> (and how the resolutions get almost passable by today's standards if you're willing to tolerate one-bit-per-pixel monochrome)
[06:01:48] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Quit: Leaving)
[06:01:53] <oldlaptop> the hundreds (hundreds!) of KiB of dedicated video memory needed were outrageously costly
[06:04:24] <c2a1> Huh.
[06:04:43] <c2a1> Did OSes like sunos have tons of bugs?
[06:05:08] <c2a1> I remember early windows(and xp even) having a lot
[06:05:28] <c2a1> Like, run an old version of Netscape and suddenly bsod
[06:05:45] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[06:08:17] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[06:08:53] *** Joins: frost (~frost@user/frost)
[06:09:09] *** Joins: cliluw (~cliluw@47.147.73.223)
[06:09:49] *** Quits: Guest4960 (~moses_@user/moses/x-1166525) (Remote host closed the connection)
[06:11:43] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[06:14:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:16:40] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[06:17:19] <flakland> I-Explorer would definitely bluescreen, esp. with activeX
[06:18:07] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[06:18:15] *** Quits: c2a1 (~c2a1@2607:fb90:1c37:77f1:c87f:a466:11c5:dfc7) (Ping timeout: 256 seconds)
[06:18:16] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:18:33] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[06:20:04] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[06:23:41] *** Quits: ejjfunky (~ejjfunky2@125.164.16.140) (Remote host closed the connection)
[06:25:16] *** Quits: b1tr0t (~bitrot@149.167.135.129) (Read error: Connection reset by peer)
[06:25:36] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[06:28:03] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Remote host closed the connection)
[06:28:07] *** Quits: newwebdev13 (~newwebdev@31.210.55.74) (Quit: Leaving)
[06:28:40] *** Joins: Nintenuendo (~Nintenuen@d172-218-96-244.bchsia.telus.net)
[06:28:40] *** Quits: Nintenuendo (~Nintenuen@d172-218-96-244.bchsia.telus.net) (Changing host)
[06:28:40] *** Joins: Nintenuendo (~Nintenuen@user/Nintenuendo)
[06:29:02] *** Quits: xff0x (~xff0x@2001:1a81:524f:ad00:ca8e:e915:817b:c700) (Ping timeout: 260 seconds)
[06:29:12] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[06:29:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:29:47] *** Joins: ejjfunky (~ejjfunky2@125.164.20.201)
[06:30:50] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:61bf:cfbd:ecf1:532b)
[06:36:31] <ornxka> why my lz4 wont compress?
[06:36:43] <ornxka> decompress**
[06:41:17] *** Quits: hexingb (~hexingb@2409:8902:7bc1:5bc3:e0e1:57f6:396f:9aa3) (Ping timeout: 240 seconds)
[06:41:56] *** Joins: hexingb (~hexingb@112.21.164.38)
[06:42:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:43:59] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[06:46:26] *** Joins: monr0e (~monr0e@31.132.33.9)
[06:55:18] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[06:57:56] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[06:58:33] <Tech_8> whos going to win the superbowl
[06:58:57] <Irishmanluke> whos playing
[06:59:37] <Tech_8> los angels rams and bengals
[06:59:56] <EdFletcher> The Rams will win handily 
[07:00:56] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[07:01:42] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[07:04:07] <ornxka> update: apparently the author of my lz4 lib invented a new container format which is not compatible with the other lz4 lib i am using and that is why it doesnt work together
[07:05:22] *** Quits: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[07:07:23] *** Joins: Azem (~haise01@user/haise01)
[07:08:07] *** Joins: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net)
[07:09:06] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[07:09:27] <[itchyjunk]> I'll win the superbowl
[07:10:13] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:11:22] <loganlee[gnu]> hello
[07:11:48] <Irishmanluke> hi
[07:11:48] <loganlee[gnu]> just came back from a walk to local marketplace. had vietnamese pork roll for lunch with coke zero can
[07:11:56] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[07:12:39] <Irishmanluke> sounds good
[07:13:17] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc) (Ping timeout: 240 seconds)
[07:13:49] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc)
[07:14:18] <Irishmanluke> are you a big fan for vietnamese food
[07:14:55] <loganlee[gnu]> yep
[07:15:36] <Irishmanluke> im not too familiar with vietnamese food other than pho
[07:16:07] <loganlee[gnu]> i forgot what's it called but there's also one with rice paper roll filled with veges you dip into dark sauce
[07:17:06] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:22:36] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[07:22:49] *** Joins: flakland (~flaknet99@32.211.211.39)
[07:23:30] <Tech_8> egg roll?
[07:23:31] *** Quits: licksjp_ (~licksjp@pkos009-160.kcn.ne.jp) (Quit: Leaving...)
[07:24:03] *** Quits: Tech_8 (~Tech_8@24.51.61.131) (Quit: Client closed)
[07:24:24] <loganlee[gnu]> no it's rolled with rice paper
[07:26:00] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[07:26:34] <Trashlord> lice paper
[07:32:20] *** Quits: hexingb (~hexingb@112.21.164.38) (Ping timeout: 272 seconds)
[07:32:26] <loganlee[gnu]> i find vietnamese food is really clean tasting with a lot of herbs and clean broth
[07:33:12] <edgar-rft> paper that you dip it into dark sauce? souns to me like a toilet roll :-)
[07:38:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:41:10] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:41:43] *** Joins: Andycamp (~Andycamps@static-173-62-163-6.phlapa.fios.verizon.net)
[07:42:37] *** Quits: Andycamp (~Andycamps@static-173-62-163-6.phlapa.fios.verizon.net) (Client Quit)
[07:42:55] *** Joins: hexingb (~hexingb@112.21.164.38)
[07:44:47] <loganlee[gnu]> guys this one: https://www.recipetineats.com/vietnamese-rice-paper-rolls-spring-rolls/
[07:44:48] <bayaz> Title: Vietnamese Rice Paper Rolls 
[07:45:08] *** Joins: arschus (~arschus@wsip-184-178-59-112.ok.ok.cox.net)
[07:45:41] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[07:46:32] *** Joins: nitrix (~nitrix@user/nitrix)
[07:51:06] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[07:51:26] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[07:55:39] *** Quits: arschus (~arschus@wsip-184-178-59-112.ok.ok.cox.net) (Quit: Client closed)
[07:56:27] <InPhase> loganlee[gnu]: I think they're typically just called Vietnamese spring rolls, or "spring rolls" if you are in a Vietnamese context.  :)  Not to be confused with Chinese spring rolls that tend to have a fried crust.
[07:56:55] *** Joins: password2 (~password8@user/password2)
[07:59:21] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[08:00:02] <davros> any rust users here?
[08:00:07] *** Joins: off^ (~off@50.235.176.163)
[08:00:29] <davros> anyone know if htere's a functoin to take the contents of one collection and move it to another, give a mutable reference (assignment wont do)
[08:00:42] <davros> somethign like dst.take_from(&mut src)
[08:00:49] <davros> (context here , it's a hashmap)
[08:02:11] <chronon> ornxka, I recently had the same lz4 issue with mozlz4/jsonlz4 files, which after the 8 byte mozLz40\0 header is removed, I had expected the rest to decompress in lz4 -d
[08:02:45] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[08:03:01] <chronon> Ended up having to use a Python script that used the lz4.block.decompress method.
[08:03:56] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:05:53] <ornxka> yeah ive been messing around with lz4.block and lz4.stream but i havent quite nailed it, the stream comes from lz4net c# lib and apparently there wasnt a standardized lz4 header when it came out
[08:06:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[08:07:44] *** Quits: rcutler (~rcutler@user/rcutler) (Quit: Leaving)
[08:09:54] <ProfSimm> I'm thinking of a new concept where you grab an object and you apply a meta operator to it, and you get access to the metaobject that actually provided that object. For example var foo = 10;  if you apply the meta operator:  var bar = #foo; you get a function that returns 10 every time you call it.
[08:10:20] <ProfSimm> So it's a bit like a reference, it's a bit like a closure, but it's neither
[08:11:07] <ProfSimm> Am I missing prior art
[08:12:14] <jamea> anyone expert in curl command: https://paste.debian.net/1230710/  any advice?
[08:12:15] <Irishmanluke> Does the operator just return a constant function every time you call it?
[08:12:18] <bayaz> Title: debian Pastezone 
[08:13:02] <ProfSimm> Irishmanluke: nah
[08:13:44] <Irishmanluke> does it return a function which is equivalent to the expresion that initialized the variable?
[08:13:49] <ProfSimm> Irishmanluke: it can return a function that really does anything at all. And in this language technically everything's a function almost so
[08:14:19] <ProfSimm> Irishmanluke: it's a bit like deconstructible closure, or expression. Let me think a bit and provide an example
[08:16:18] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[08:17:11] <ProfSimm> Irishmanluke: I'm gonna use JS syntax as a crutch so it won't align 100% but imagine it like an operator that takes a closure and gives you back the first thing in the expression of that closure. For example:   var oddNumbers = () => { generator.next(); };   oddNumbers(); // 1 oddNumber(); // 3 oddNumbers(); // 5 .  var meta = #oddNumbers;  console.log(meta === generator); // true
[08:18:22] <ProfSimm> Irishmanluke: so if we think about closures as expression chains, it gives back the root of that expression, which is a more general context than what you had.
[08:18:39] <ProfSimm> Irishmanluke: while the closure acts as a "facade" over the whole thing.
[08:18:48] <ProfSimm> Irishmanluke: partial application in reverse is another way to put it
[08:18:52] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[08:19:17] <ProfSimm> unpartial unapplication. Wholesome deapplication? lel :P
[08:20:04] <ProfSimm> I had this constant struggle what if an object needs to implement two interfaces with the same name methods, which are different methods otherwise/
[08:20:34] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[08:20:42] <ProfSimm> So I thought "simple, we have a member for every interface"  foo.iface1.methods() foo.iface2.methods();  But of course that's terriblyverbose.
[08:21:05] <ProfSimm> So you'd capture the context you need in a closure and reuse it   (...a) => foo.iface1(...a);
[08:21:13] <ProfSimm> But now how do you reach foo back to see iface2?
[08:21:15] <ProfSimm> Hence, meta
[08:22:10] *** Joins: pizdets_ (~pizdets@183.182.115.101)
[08:22:50] *** Quits: pizdets (~pizdets@183.182.114.255) (Ping timeout: 256 seconds)
[08:26:32] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[08:28:26] <ProfSimm> I'm trying to make an omelet and keep the eggs whole
[08:28:42] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[08:37:39] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:38:17] *** Joins: Atque (~Atque@user/atque)
[08:39:01] <ent58> an omelette sounds delicious
[08:39:17] <ent58> cheese and onions
[08:39:36] *** Joins: mybbgirl (~mybbgirl@188.25.57.254)
[08:41:08] *** Joins: off^ (~off@50.235.176.163)
[08:42:11] <ProfSimm> Maybe not what I was hoping to get out of this discussion
[08:42:50] <ent58> I see some of it, and I remember you were talking about monads yesterday
[08:43:28] *** Quits: mybbgirl (~mybbgirl@188.25.57.254) (K-Lined)
[08:43:32] <ent58> It's not that I don't see the usefulness, but my only real experience is C, C++, and assembly language
[08:44:49] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[08:45:37] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[08:58:11] *** Joins: myusername (~myusernam@user/myusername)
[08:59:26] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[08:59:51] *** Quits: Zeturic (~Orimendix@50-25-77-41.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[09:08:44] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[09:12:59] *** Joins: b1tr0t (~bitrot@149.167.135.129)
[09:13:20] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.191)
[09:16:17] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[09:16:25] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Ping timeout: 256 seconds)
[09:17:10] *** Joins: rvalue (~rvalue@user/rvalue)
[09:18:13] *** Parts: chronon (~chronon@user/chronon) ()
[09:20:59] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[09:21:17] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[09:25:17] *** Quits: Tech_8 (~Tech_8@24.51.61.131) (Quit: Client closed)
[09:25:44] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Ping timeout: 256 seconds)
[09:26:23] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc) (Ping timeout: 256 seconds)
[09:29:21] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[09:29:43] <rindolf> ent58: i suggest you also learn python3, scheme, C#, haskell...
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:20] <rindolf> typ
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:52] <rindolf> https://en.wikipedia.org/wiki/TypeScript is also nice
[09:31:53] <bayaz> Title: TypeScript - Wikipedia 
[09:32:00] <jamea> c#  any advice?  https://paste.debian.net/1230717/   with curl i can do the job:  https://paste.debian.net/1230718/  any advice?
[09:32:59] *** Joins: duuude (~user@user/duuude)
[09:35:07] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Ping timeout: 256 seconds)
[09:37:23] *** Quits: r0073rr0r (~MyH3e@user/r0073rr0r) (Ping timeout: 256 seconds)
[09:38:59] *** Joins: r0073rr0r (~MyH3e@cable-24-135-125-115.dynamic.sbb.rs)
[09:39:00] *** Quits: r0073rr0r (~MyH3e@cable-24-135-125-115.dynamic.sbb.rs) (Changing host)
[09:39:00] *** Joins: r0073rr0r (~MyH3e@user/r0073rr0r)
[09:39:09] <rindolf> jamea: try using https://en.wikipedia.org/wiki/Wireshark
[09:39:09] <bayaz> Title: Wireshark - Wikipedia 
[09:39:11] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpxe402tlvzq17q.ipv6.telus.net) (Remote host closed the connection)
[09:39:22] <rindolf> amigojapan: here?
[09:39:33] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[09:39:53] <ent58> Out of those, Haskell is the only one that seems worth learning (Python is kind of a use-if-you-need-it language to me)
[09:40:07] <amigojapan> Hi rindolf
[09:40:15] *** Joins: shlomif (~shlomif@inkscape/dev/shlomif)
[09:40:28] <sonny> haskell must have some good marketing
[09:40:49] <ent58> I'm a fan of zero cost abstraction, but I feel a lot of modern languages don't go the other way too often
[09:41:14] <amigojapan> Haskell is a straight jacket for trying out pure functional programming
[09:41:58] *** shlomif is now known as rindolf
[09:42:11] <arahael> Haskell is worth learning, but I wouldn't say it's the only one.
[09:42:16] <amigojapan> Hi rindolf 
[09:42:23] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[09:44:15] <loganlee[gnu]> omg
[09:44:52] <rindolf> amigojapan: BTW, japan will relax its taboo against talking w strangers
[09:45:52] <amigojapan> rindolf: unlikely. It is more the case with younger people
[09:46:08] *** Quits: xff0x (~xff0x@2001:1a81:5288:ea00:61bf:cfbd:ecf1:532b) (Ping timeout: 250 seconds)
[09:46:12] <rindolf> the messiah has spoken
[09:46:21] <amigojapan> rindolf: and in Tokyo
[09:46:58] <arahael> amigojapan: Japan has a taboo against talking with strangers?
[09:47:02] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:6fee:3fb4:5f11:904c)
[09:47:09] <amigojapan> rindolf: other areas of Japan are more open
[09:47:19] <amigojapan> Yep arahael 
[09:47:39] * arahael strikes japan off the tourist list.
[09:47:47] <rindolf> amigojapan: stranger things have happened - https://www.shlomifish.org/philosophy/culture/case-for-commercial-fan-fiction/indiv-nodes/fighting_against_the_world.xhtml
[09:47:48] <bayaz> Title: Commercial Real Person Fan Fiction (RPFs), crossovers and parodies as 2021 geek/hacker imperatives for revitalising the film industry (Full Version) - Fighting Against The World 
[09:48:14] <amigojapan> arahael: usually if someone talks to you on the street it is some form of religion trying to get you to join
[09:48:30] *** Quits: hexingb (~hexingb@112.21.164.38) (Ping timeout: 272 seconds)
[09:48:32] <amigojapan> No links rindolf 
[09:48:35] <rindolf> amm
[09:49:26] <amigojapan> arahael: there are "conversation cafes" tho, where those taboos don't apply
[09:49:34] <rindolf> amigojapan: fuck you and your ouchPhone
[09:49:37] <arahael> amigojapan: That makes sense, actually, regarding the religion.
[09:49:59] <amigojapan> Calm down rindolf 
[09:50:11] *** Quits: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877) (Quit: WeeChat 2.3)
[09:50:11] <arahael> rindolf: Just so you're aware, amigojapan is an op now, plus, even if you don't know that, please avoid such language here.
[09:50:40] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[09:51:47] *** Joins: user51 (~user51@176.228.1.103)
[09:51:48] <rindolf> arahael: he is being a bastard
[09:52:38] *** Joins: Deepfriedice (~Deepfried@159.196.13.158)
[09:53:20] <ProfSimm> All right so let's change the subject. Can someone cite a language, where you can take a lamdba/closure and fetch the expression it's made of?
[09:53:41] <ProfSimm> I can cite LINQ in C# although they did it for a very restricted purpose (mapping conditions to SQL)
[09:53:43] <arahael> ProfSimm: You mean, as an AST?
[09:53:54] <ProfSimm> I'm interested in languages that implement this more generally as a paradigm.
[09:54:16] <arahael> ProfSimm: Would hiegenic macro systems or perhaps even haskell's quasi-quoter apply?
[09:54:38] <ProfSimm> arahael: sort of like an AST, yes, but in a restricted way. Everything you can't directly eval in the AST (like references to parent bindings) is evaluated. The rest is left as is. Meaning you can take this partially evaluate AST and eval it anywhere yourself
[09:54:56] <arahael> ProfSimm: I *think* Rust's macros can do that, but I haven't played with it myself.
[09:55:04] <ProfSimm> Hmm
[09:55:12] <ProfSimm> It does sound like a macro thing yeah
[09:55:15] <arahael> Julia might have some fancy thing, too.
[09:55:20] <ProfSimm> I wish languages did that more at runtime
[09:55:24] * rindolf is now playing: 11Pitch Perfect 3 _ Anna Kendrick Performs Freedom! '90 in 4K HDR-pTEmpZ79jeo.mp4 [03:36/0704:12]
[09:55:27] <arahael> And of course, the various lisps have this in various ways.
[09:55:28] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[09:55:34] <ProfSimm> arahael: yea Julia is Lisp kinda right
[09:56:45] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[09:58:40] *** Joins: hexingb (~hexingb@2409:8902:7bc5:1941:21c9:4418:12a2:f5de)
[09:58:41] <arahael> ProfSimm: I'm not sure.  It's a bit of a niche language, seems designed and preferred for by Data Scientists.
[09:59:14] <arahael> ProfSimm: As in, it's geared for the sort of environment they will be working in.  A poor choice, lets say, for writing applications in.
[10:02:03] <loganlee[gnu]> omg
[10:02:09] <loganlee[gnu]> i'm so tired now
[10:02:16] <loganlee[gnu]> learning jq
[10:02:18] *** Joins: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877)
[10:02:37] *** Quits: hexingb (~hexingb@2409:8902:7bc5:1941:21c9:4418:12a2:f5de) (Ping timeout: 240 seconds)
[10:03:12] <ProfSimm> arahael: imagine we had a world government, and it mandated "we allow only 3 programming languages to exist from now on". What do you pick
[10:03:23] <arahael> ProfSimm: Gardening. :D
[10:03:26] <ProfSimm> Ahaha
[10:03:39] <ProfSimm> "We only allow 3 types of plants to exist..."
[10:04:17] <arahael> That's a tough one.  Rice, Chilli, and...  Shallots.
[10:04:20] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:04:55] <arahael> Or maybe *potato*, chilli, and shallots.
[10:07:37] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Ping timeout: 240 seconds)
[10:08:37] <absentia> rice, beans, spinach
[10:09:25] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[10:10:18] <ProfSimm> arahael: potato is better choice. We can have fries. 
[10:10:22] <InPhase> Wheat, apple, cashew.
[10:11:12] <InPhase> You're all going to die of scurvy with those other plans.  :)
[10:11:40] <arahael> Oh, yeah.  Rice, shallots, and fingerlimes.
[10:13:29] <absentia> https://www.verywellfit.com/spinach-nutrition-facts-calories-and-health-benefits-4114717
[10:13:29] <bayaz> Title: Spinach Nutrition Facts and Health Benefits 
[10:13:35] <absentia> > Vitamin C: 24mg
[10:13:52] <absentia> per 3 cups
[10:14:41] <KillerWasp> rindolf: Please, could you disable that constant message about the music you listen to? It's too annoying, very annoying, I hate it, I hate it too much, it makes me want to destroy the world.
[10:15:57] <absentia> max edgelord achieved
[10:19:51] * ProfSimm is now playing: I Help My Sister Stuck In Washing Machine - XXX.mp4 [04:45/08:53]
[10:21:25] <KillerWasp> ProfSimm: GRRRRRRRRRRRR!!!!!!!!!!!!
[10:21:45] <rindolf> KillerWasp: try dest
[10:21:51] *** Quits: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 250 seconds)
[10:22:10] <KillerWasp> !q ProfSimm 
[10:22:24] <ProfSimm> KillerWasp: don't do it, the world needs to know.
[10:22:27] <KillerWasp> !quit ProfSimm 
[10:22:38] <KillerWasp> !quantom ProfSimm 
[10:22:55] <ProfSimm> Haha, quantom's gonna be an evergreen here I feel it
[10:23:13] <KillerWasp> :(
[10:23:17] <amigojapan> rindolf: I took you off ignore. But I won't get noticed on PM's
[10:23:38] <arahael> Heh, jokes aside, I do agree, please don't have automatic messages that mention the current song and stuff here - we have...  681 people here, imagine how noisy the place would be if we had a small fraction of people doing that constantly with their music.
[10:24:15] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[10:24:22] <rindolf> KillerWasp: try destroying iit. and it's not4every song. arahael 
[10:24:31] <ProfSimm> arahael: I was gonna say "imagine a society where everyone is constantly publishing video stream of their life 24/7" and then I remembers we had like 20 episodes about it on Black Mirror, and many people are actually doing it right now
[10:25:11] <arahael> rindolf: Eh, you know i"m deaf, to me even one song is too many! Haha.
[10:25:21] <absentia> blueposeidon
[10:25:25] <absentia> or whatever the fuck his name is
[10:25:26] <ProfSimm> Project: take video from livestreamers, feed it into deep learning network, produce more live streams
[10:25:27] <absentia> iceposeidon
[10:25:39] <absentia> publishing video of himself getting accosted by the mob at a sitdown
[10:26:13] <absentia> and accidentally catching a suicide scene live on video
[10:26:18] <rindolf> "hello NSA. hello iran!""
[10:26:27] <absentia> and recording someone randomly breaking into his home so he could appear on stream
[10:26:51] <absentia> welcome to the future
[10:27:11] <arahael> absentia: "randomly"?
[10:27:32] <absentia> arahael: yes in the strictest possible mathematical sense
[10:27:51] <ProfSimm> Wait. With all the livestreams, how come we don't have livestream of UFOs
[10:27:54] <arahael> absentia: I'll take your word for it.
[10:28:08] <arahael> ProfSimm: We have plenty of those.  Every flying object you haven't identified is a UFO!
[10:28:23] <absentia> that's what "they" want you to think!
[10:28:39] <arahael> absentia: In the strictest possible grammatical sense?
[10:28:44] <KillerWasp> I'm too beautiful, it would be a huge sin to show my face in a livestream.
[10:28:46] <absentia> arahael: as always
[10:28:52] *** Joins: off^ (~off@50.235.176.163)
[10:28:57] <arahael> absentia: I like how you think. :D
[10:29:03] <ProfSimm> arahael: yes but that's the unfun definition of it. Sort of like me being ET because I'm made of star material originating outside Earth
[10:29:14] <absentia> KillerWasp's stream gets automatically flagged for disturbing content
[10:29:17] *** Joins: baracurda (~baracurda@user/parserblabla)
[10:30:26] <rindolf> arahael: 681 ppl talking at once will  be horrible in any case :D
[10:30:53] <KillerWasp> 4am, and take cold.
[10:30:56] <arahael> ProfSimm: There is a particular comic I like, pretty much absurdist humer describing entirely normal everyday activities such as getting "sun damage" (sunburnt). I have the book but am in the process of renovating, so the book's packed away and I can't remember the name of it. :(
[10:31:27] <ProfSimm> arahael: heh
[10:32:07] <vdamewood> arahael: Reminds me of Strange Planet
[10:32:13] <arahael> rindolf: Indeed!  Now, I don't like Discord, but discord has an interesting feature: When too many people are talking, it slows down the messaging rate to one message per 5 seconds.  So people are forced to think a bit before they send and lets people read the conversation. It's pretty good.
[10:32:16] <arahael> vdamewood: That's the one!
[10:33:24] <ProfSimm> arahael: there's these series on Syfy, called Resident Alien, where Alan Tudyk is basically narrating his experience of how odd everyday life among humans is. Unfortunately the screenplay's kinda uncooked and predictable. But good concept
[10:33:25] <vdamewood> arahael: I have the children's book.
[10:33:34] <arahael> vdamewood: There's a children's book?
[10:33:50] <pyzozord> Nice, I like absurdist humor, it's the most absurd
[10:34:25] <vdamewood> arahael: Strange Planet: The Sneaking, Hiding, Vibrating Creature
[10:34:29] <arahael> ProfSimm: Nice.
[10:34:46] <arahael> vdamewood: I'll have to look at the cover again when I see it, actually let me quickly google...
[10:34:56] <vdamewood> No!
[10:34:57] <vdamewood> https://www.harpercollins.com/products/strange-planet-the-sneaking-hiding-vibrating-creature-nathan-w-pyle?variant=32940871647266
[10:35:04] <vdamewood> No google for you!
[10:35:23] <rindolf> arahael: "I wear prescription glasses so I may be half-blind, but at least I'm trying hard not to be a complete dick."
[10:35:29] <arahael> vdamewood: I think I have just 'Strange Planet'.
[10:36:30] <arahael> I think I might have to order the rest of the books!  Or even "suggest" to my wife that she buy one of them for my birthday present, anniversary, christmas present...
[10:36:42] <vdamewood> arahael: I think there's a volume 2 of the compilation book.
[10:36:54] <arahael> For this and next year, then!
[10:37:22] <amigojapan> Konnichola vdamewood 
[10:37:51] <arahael> Anyway, I'm off, still doing floor renovations - was supposed to be done this week, but we got the date wrong, it finishes next week. :(  Just want it to be over.
[10:38:09] <absentia> rindolf: i am trying hard to be a complete dick
[10:38:12] <vdamewood> amigojapan: Konnichola.
[10:38:18] <absentia> bwahahahahahahh
[10:38:25] * absentia has an asthmatic coughing fit
[10:39:11] *** Quits: maxzor (~maxzor@2a01cb04054faa00de36cc5a8e915128.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[10:39:19] <user51> damn, doing a simple expression parser with a tree instead of a stack makes shunting yard much more obvious
[10:39:19] <vdamewood> arahael: Looks like the second one doesn't say 'Volume 2' it just has a different cover (but is still an entirely different collection of comits)
[10:39:48] <rindolf> absentia: a truly noble cause
[10:39:52] <vdamewood> user51: I did mine as rdp.
[10:39:53] <user51> i've finally got an answer to "how do they come up with that stuff?"
[10:40:19] <vdamewood> arahael: comics*
[10:40:36] <absentia> rindolf: yes
[10:40:58] <absentia> it is with a heavy heart that i accept this burden
[10:41:07] <user51> vdamewood: i went with a tree, but then realized that node pointer, swap, making a child etc basically map quite well to stacks
[10:42:22] <ProfSimm> I wanted to make a language that doesn't read like garbage but has clean, intuitive syntax. Then somehow it looks like this:  range: {(first, last, step: s = 1) -> f :: x: mut first, f: {x -> n: x + s; if (n =< last) (f (n))}}
[10:42:25] <ProfSimm> I'm sad
[10:42:42] <user51> give this man a shell ^
[10:42:47] <absentia> ProfSimm: what about APL
[10:42:59] <absentia> clean as a hwhistle
[10:43:02] <ProfSimm> absentia: as you see I can achieve the same mess just using ASCII
[10:43:05] <absentia> and highly intuitive
[10:43:11] <absentia> yeah same
[10:43:18] <absentia> (!#%#9)(+ / -  ^#^&8 ++(**))
[10:44:30] <rindolf> absentia: https://memory-alpha.fandom.com/wiki/Rules_of_Acquisition â™¥
[10:44:31] <bayaz> Title: Rules of Acquisition 
[10:45:19] <absentia> > hear all, trust nothing
[10:45:21] <absentia> words to live by
[10:46:25] *** Joins: maxzor (~maxzor@2a01cb04054faa00b6ef3a907690bb56.ipv6.abo.wanadoo.fr)
[10:46:47] *** Quits: maxzor (~maxzor@2a01cb04054faa00b6ef3a907690bb56.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[10:47:02] <KillerWasp> â™¥ - Ctrl+C
[10:47:06] *** Joins: maxzor (~maxzor@2a01cb04054faa00b6ef3a907690bb56.ipv6.abo.wanadoo.fr)
[10:47:31] <KillerWasp> arahael: which comic?
[10:47:32] *** Joins: audiobirb (~audio@user/audio)
[10:47:56] <vdamewood> Well, crap. My script to send TLS certs is broken.
[10:48:05] *** Joins: Hazza (~Haxxa@125-253-30-213.ip4.superloop.com)
[10:48:13] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Ping timeout: 256 seconds)
[10:48:15] <vdamewood> KillerWasp: It's called Strange Planet.
[10:48:47] <vdamewood> KillerWasp: https://www.nathanwpyle.art
[10:48:48] <bayaz> Title: NathanWPyle 
[10:49:01] <rindolf> absentia: Â«Yoda: Matters not Sith number, <a href="https://memory-alpha.fandom.com/wiki/Little_Green_Men_(episode)">as much as short-term quarterly gains.</a>Â»
[10:49:01] <bayaz> Title: Little Green Men (episode) 
[10:49:22] <KillerWasp> like a garbage comics...
[10:49:33] <vdamewood> KillerWasp: Huh?
[10:49:36] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[10:49:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[10:49:43] <KillerWasp> i dislike it.
[10:49:52] <absentia> he's speaking in tongues!
[10:50:27] <vdamewood> KillerWasp: Well, it's fine not to like it, but there's no need to be so rude about it.
[10:50:34] *** Quits: blahboybaz (~blahboyba@c-67-161-96-25.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[10:50:47] <KillerWasp> rude?
[10:51:05] <vdamewood> You called it garbage.
[10:51:05] <KillerWasp> I was just being honest. They really are ugly.
[10:51:23] <KillerWasp> like garbages.
[10:51:37] <vdamewood> Yeah, saying it like that is pretty rude.
[10:51:49] *** Joins: teut (~teut@122.161.83.81)
[10:51:51] <KillerWasp> ....
[10:52:45] <KillerWasp> like g*****. is good now?
[10:53:01] <absentia> * ******* ********
[10:53:06] <vdamewood> Uh, no.
[10:53:21] <absentia> does the level of offence scale with the number of asterisks
[10:53:42] <KillerWasp> then which word?
[10:53:43] <absentia> if so: *******************************
[10:53:58] <KillerWasp> or how to say?
[10:54:15] <vdamewood> KillerWasp: Well, it's not about a particular word, it's the fact that your dislike is expressed as a property of the medium you dislike.
[10:54:34] <vdamewood> Though, 'garbage' is also pretty rude, so there is that.
[10:56:06] <vdamewood> KillerWasp: It would have sufficed simply to say "I dislike it." from the start.
[10:56:24] <KillerWasp> ok...
[10:57:22] <ProfSimm> OK so I'm kinda clarifying this idea for myself. What if you could decompose a closure to a tuple of two things: 1) function 2) arguments you pass to this function to replicate the closure state. And you can keep unfolding like this as far as you want
[10:57:35] <ProfSimm> Decomposable closures
[10:57:52] <ProfSimm> Breaks encapsulation, but it can be opt-in
[10:57:52] <KillerWasp> I thought i were being soft, otherwise i said those comics look like shit.
[10:58:23] <vdamewood> KillerWasp: That would have been sorse, but 'garbage' is still not soft.
[10:58:27] <vdamewood> worse*
[10:58:33] <Trashlord> "SleepSort" https://i.redd.it/q3qn5stbzih81.png LOL
[10:58:34] <bayaz> Type: image/png Size: 90.9 kB 
[10:58:36] <absentia> ProfSimm: some languages already offer this
[10:58:42] <ProfSimm> absentia: oh do they
[10:58:50] <absentia> they expose the bindings of captured variables through some object interface
[10:58:51] <ProfSimm> absentia: please name those you recall
[10:58:59] <KillerWasp> But saying I don't like it, even if it's not clear enough, is fine for chat.
[10:59:08] <absentia> ProfSimm: https://ruby-doc.org/core-2.6/Proc.html#method-i-binding
[10:59:09] <bayaz> Title: Class: Proc (Ruby 2.6) 
[10:59:23] <ProfSimm> absentia: sweet thanks
[10:59:35] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[10:59:55] <pyzozord> ProfSimm designing from first principles is great. Buy if you intend for the language to be used by other people I think there is also something to be said about leveraging user's familiarity
[11:00:33] <vdamewood> KillerWasp: Well, calling it 'garbage' doesn't offer any additional clarity.
[11:00:39] <rindolf> vdamewood: https://www.youtube.com/watch?v=KNYI3iINXrQ
[11:00:40] <bayaz> Title: Sam the Eagle versus Alice Cooper 
[11:01:29] <ProfSimm> pyzozord: I know. :( 
[11:02:07] <ProfSimm> pyzozord: I think eventually it'll be like nested russian dolls. Gotta have the compact advanced features inside, but a simple facade shell outside
[11:02:11] <ProfSimm> pyzozord: and few of thsoe
[11:02:26] <absentia> ProfSimm: https://docs.python.org/3/library/inspect.html
[11:02:26] <bayaz> Title: inspect ? Inspect live objects ? Python 3.10.2 documentation 
[11:02:28] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:02:36] <absentia> apparently there is also this in python 3.3
[11:02:47] <absentia> though i feel the python community is less tolerant of this nonsense
[11:03:14] <absentia> in particular
[11:03:16] <absentia> https://docs.python.org/3/library/inspect.html#inspect.getclosurevars
[11:03:16] <bayaz> Title: inspect ? Inspect live objects ? Python 3.10.2 documentation 
[11:03:19] <ProfSimm> absentia: well reading the full source etc. isn't my goal
[11:03:27] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[11:03:48] <absentia> ProfSimm: you can access all names in lexical scope given a funcion object in Python
[11:03:51] <ProfSimm> absentia: the idea is you wanna wrap a function's partial application as a facade, but allow people to open the facade
[11:04:01] <ProfSimm> absentia: but not allow this for arbitrary closures.
[11:04:12] <rindolf> vdamewood: the sun still shines on tel aviv
[11:04:39] *** Quits: Hazza (~Haxxa@125-253-30-213.ip4.superloop.com) (Ping timeout: 256 seconds)
[11:05:53] <absentia> i've been working on my y combinator presentation lately
[11:05:56] <absentia> want to hear my elevator pitch?
[11:06:01] <absentia> ok, here goes:
[11:06:07] <absentia> "it's like juicero, but for chocolate."
[11:06:25] <absentia> fucking genius, i know
[11:06:39] <pyzozord> that is wildly american
[11:07:44] <pyzozord> or was, looks like this company closed
[11:08:30] <ProfSimm> absentia: make it for ice-cream, makes we can sell bigger machines
[11:08:46] <ProfSimm> absentia: and throw in extra merchandize, like gloves so you don't get icecream on your hands
[11:08:47] <absentia> yeah make sure to put it on the fucking blockchain too
[11:08:59] <absentia> ProfSimm: how about a bottle of snake oil to drizzle over your sundae
[11:09:08] * ProfSimm shows venn diagram of people who like ice-cream, and people who have hands
[11:09:23] <absentia> it's a circle
[11:09:29] <ProfSimm> Precisely
[11:10:00] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Ping timeout: 256 seconds)
[11:10:43] <pyzozord> yay I think I pushed my dutch classes to the evening
[11:10:52] <pyzozord> I'm too lazy to do the homework right now
[11:10:56] <ProfSimm> absentia: wouldn't it be neat if you were given an object/closure that does what you need with a simple facade, but you can then open it up and get the API that powers it for "advanced" uses? Basically why I'm doing this closure deconstruction thing. 
[11:11:20] <ProfSimm> absentia: closures that can be opened like that would not be normal closures
[11:12:05] <ProfSimm> absentia: so basically it doesn't break encapsulation like that Python lib
[11:12:15] <ProfSimm> You need to declare it openable.
[11:12:35] <ProfSimm> Sort of like self-serviceable battery replacement, vs "warranty void if open"
[11:12:51] <rindolf> arahael: https://genius.com/The-original-caste-one-tin-soldier-lyrics
[11:12:51] <bayaz> Title: The?Original Caste ? One Tin Soldier 
[11:13:12] <absentia> ProfSimm: there is a long and storied history of languages "declaring" things to be so
[11:13:22] <absentia> "const", "mutable", "public", "private"
[11:13:37] <absentia> and an equally long history of those declarations being violated at runtime
[11:13:56] <absentia> turns out python had a point - we're all adults here, just follow the conventions and don't fuck it up. if you do, that's your problem
[11:14:23] <absentia> no static checker needed
[11:14:29] <absentia> or extra language complexity
[11:14:55] <absentia> even the venerable haskell still has `unsafePerformIO :: IO a -> a`
[11:15:07] <absentia> but at least they tell you it's barbarous
[11:16:33] *** Quits: teut (~teut@122.161.83.81) (Ping timeout: 256 seconds)
[11:16:55] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[11:16:58] <arahael> absentia: Oh, unsafePerformIO is nothing.
[11:17:10] <absentia> one moment
[11:17:21] <ProfSimm> absentia: making the declaration possible to violate is a choice by the language
[11:17:31] <user51> i get new insights when i leave the computer. how the hell does this work?
[11:17:40] <ProfSimm> absentia: soft limits have their use, but in my case it's about hard limits, that are optional
[11:18:08] <arahael> absentia: have you read about accursedUnutterablePerformIO?
[11:18:14] <absentia> arahael: that's the one
[11:18:35] <absentia> i don't understand the explanation at all
[11:18:41] <absentia> i'm not even sure the explanation fully understands
[11:19:00] <arahael> For the rest of us - the comment is awesome: https://hackage.haskell.org/package/bytestring-0.10.8.1/docs/src/Data-ByteString-Internal.html#accursedUnutterablePerformIO
[11:19:01] <bayaz> Title: Data/ByteString/Internal.hs 
[11:19:32] *** Joins: emf (~emf@2620:10d:c090:400::5:a68a)
[11:19:34] <arahael> absentia: It's something subtle with precisely how Core is evaluated, I think.
[11:19:43] <arahael> absentia: (And exactly how varies from version to version)
[11:20:03] <absentia> https://stackoverflow.com/questions/61021205/what-is-the-difference-between-unsafedupableperformio-and-accursedunutterableper
[11:20:03] <bayaz> Title: What is the difference between unsafeDupablePerformIO and accursedUnutterablePerformIO? 
[11:20:34] <absentia> actually this seems less handwavy than i remember
[11:21:19] *** Joins: roro (roro@user/roro)
[11:21:29] *** Joins: soapsudsxx (~soapsudsx@209.221.40.136)
[11:23:13] <absentia> ProfSimm: how hard are your limits
[11:23:28] <ProfSimm> absentia: absolute
[11:23:32] <absentia> ok - what if we modelled your language as a system to be attacked
[11:23:35] <absentia> what's your threat model
[11:23:47] <ProfSimm> absentia: but there's another concept.
[11:23:55] <absentia> could you defend against someone proficient with ida or radare2?
[11:24:26] <ProfSimm> absentia: the concept is that you can take a process, in the scheduler, and unravel the whole process as state and expressions
[11:24:30] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:24:33] *** Parts: adder` (~adder@user/adder) (Leaving)
[11:24:40] <absentia> a new kind of science
[11:24:42] <ProfSimm> absentia: you can't do that inside the system, no matter how much you declare things unsafe and so on
[11:24:45] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[11:24:45] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[11:24:45] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[11:25:02] <ProfSimm> absentia: but you know, the compiler and the IDE need to see the processes
[11:25:36] <ProfSimm> absentia: it's sort of like time travel as theorized by some. You can do it trivially, but not if you exist in time itself
[11:25:59] <absentia> https://hackage.haskell.org/package/tardis-0.4.1.0/docs/Control-Monad-Tardis.html
[11:25:59] <bayaz> Title: Control.Monad.Tardis 
[11:26:04] <absentia> nothing new under the sun
[11:26:09] <absentia> wooooOOOOOOOOOOOOOooo
[11:26:14] * absentia floats off into the breeze
[11:26:48] <ProfSimm> absentia: Of course
[11:27:18] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[11:27:34] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[11:27:34] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[11:29:02] <ProfSimm> absentia: in the context of it as a system to be attacked, basically you run it in the right "ring", you're good.
[11:29:29] <ProfSimm> absentia: pure functions can't do side-effects it's just the process they're running under
[11:29:49] *** Quits: nulleip (~luiz@user/nulleip) (Ping timeout: 240 seconds)
[11:29:58] <ProfSimm> context I should say
[11:30:19] *** Joins: aradesh (~aradesh@user/aradesh)
[11:32:00] *** Joins: nulleip (~luiz@user/nulleip)
[11:34:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[11:34:54] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.191) (Ping timeout: 272 seconds)
[11:35:37] *** Joins: rcutler (~rcutler@user/rcutler)
[11:37:32] *** Joins: 029AAAHVX (~l4s8g@pd9e621d0.dip0.t-ipconnect.de)
[11:38:12] *** Joins: terminalpusher (~terminalp@2a01:586:1e0e:1:24e8:c3d4:a32e:b10)
[11:38:14] <vdamewood> Yay, my CSS is still broken on my live site.
[11:38:21] <Hash> What's wrong?
[11:38:26] <Hash> What's your live site?
[11:38:34] <terminalpusher> It's a very well known font I reckon but can anyone tell me the name? https://github.com/marcofugaro/threejs-modern-app/raw/master/.github/screenshots/console.png
[11:38:35] <bayaz> Domain: raw.githubusercontent.com Type: image/png Size: 413.7 kB 
[11:38:46] <GeDaMo> "What's wrong?" It's CSS :P
[11:39:40] * vdamewood .com
[11:40:19] <vdamewood> Hash: I do a CSS trick to make prints of my site clean. Unfortunately, I still leave the margin on the side for links in the printout even if the links are gone.
[11:40:48] *** Quits: emf (~emf@2620:10d:c090:400::5:a68a) (Quit: emf)
[11:40:57] <pyzozord> I honestly don't know what's the criticizm of CSS
[11:41:14] <pyzozord> I think it's not a bad layout and style language
[11:41:17] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[11:41:23] *** Quits: roro (roro@user/roro) (Quit: roro)
[11:41:27] <pyzozord> although I don't really know any alternatives well
[11:41:51] <ProfSimm> pyzozord: it has lots of baggage, but because they keep adding stuff to it, it's kinda irrelevant
[11:42:02] <GeDaMo> I don't really know CSS, I'm just meme-ing :P
[11:42:24] <vdamewood> It's fun to razz on CSS.
[11:42:25] <ProfSimm> pyzozord: same reason why modern JS is fine
[11:42:37] <ProfSimm> Heck even modern PHP is OK
[11:42:43] <pyzozord> ah yes, humor, I can humor
[11:42:48] <ProfSimm> What is humor.
[11:43:07] <ProfSimm> Thinking you're in one context, but it's revealed you're in another.
[11:43:08] <suss> with a message
[11:43:18] <ProfSimm> Or watching someone make that context mistake.
[11:43:23] <pyzozord> https://giphy.com/gifs/frustrated-annoyed-programming-yYSSBtDgbbRzq
[11:43:23] <ProfSimm> Why is it funny when someone falls.
[11:43:24] <bayaz> Title: Frustrated Programming GIF - Find & Share on GIPHY 
[11:43:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[11:43:54] *** Joins: emf (~emf@2620:10d:c090:400::5:5ef1)
[11:44:02] *** Joins: independent56 (~independe@2.26.38.138)
[11:44:36] <ProfSimm> pyzozord: so this GIF also shows humor can be defined as two unrelated contexts that resonate unexpectedly.
[11:44:55] <Hash> I see
[11:44:56] <ProfSimm> Those curtains and CSS debugging
[11:45:29] <Hash> https://jigsaw.w3.org/css-validator/validator?uri=https%3A%2F%2Fwww.psychedelicsdaily.com%2F&profile=css3svg&usermedium=all&warning=1&vextwarning=&lang=en
[11:45:31] <bayaz> Title: W3C CSS Validator results for https://www.psychedelicsdaily.com/ (CSS level 3 + SVG) 
[11:45:35] <Hash> I have two erroras in my css
[11:45:42] <Hash> But not mine.
[11:45:49] <Hash> They are from the css lib. Peculiar.
[11:45:52] <Hash> Otherwise I'm good.
[11:46:09] <Hash> https://validator.w3.org/nu/?doc=https%3A%2F%2Fwww.psychedelicsdaily.com%2F 
[11:46:10] <bayaz> Title: Showing results for https://www.psychedelicsdaily.com/ - Nu Html Checker 
[11:46:13] <Hash> Markup is valid too
[11:46:23] <GeDaMo> It seems strange to me that "CSS library" is a thing :|
[11:46:24] <Hash> CSS was also green, valid, what the hell did I do to chagne it?
[11:46:30] <Hash> Sure it is.
[11:46:35] <Hash> Library of pre made classes.
[11:46:41] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:46:45] <Hash> Unless you like to do tedious manual work each time.
[11:47:04] <ProfSimm> GeDaMo: you can make a library out of anything
[11:47:40] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:48:38] *** Quits: b1tr0t (~bitrot@149.167.135.129) (Read error: Connection reset by peer)
[11:48:51] *** Joins: Inari (~Pinkishu@p508ef3bc.dip0.t-ipconnect.de)
[11:50:44] <ProfSimm> Why does a baby laugh when you make a funny face?
[11:50:49] <ProfSimm> What's a funny face anyway
[11:51:12] <GeDaMo> https://en.wikipedia.org/wiki/Mirror_neuron
[11:51:12] <bayaz> Title: Mirror neuron - Wikipedia 
[11:51:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:51:57] <ProfSimm> GeDaMo: that's not unique to laughter, and doesn't explain why I can make a baby laugh without laughing
[11:52:28] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[11:52:30] <ProfSimm> GeDaMo: funny face is not a laughing face
[11:52:56] *** Joins: mrig (~mrig@user/mrig)
[11:52:59] <ProfSimm> What's the evolutionary purpose of laughter, aside from "socializing" (we can socialize crying too)
[11:53:15] <Hash> https://www.youtube.com/watch?v=mymMye4purU
[11:53:16] <bayaz> Title: Why babies laugh | Caspar Addyman | TEDxBratislava 
[11:53:45] <ProfSimm> Hash: I can sum up that video as "I don't know"
[11:53:59] <Hash> you can do whatever you want to do.
[11:55:53] <ProfSimm> Hash: maybe the baby is laughing because it can comprehend the entire cosmos, and it sees how silly we are, limited by knowledge
[11:56:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[11:57:50] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Quit: Leaving)
[11:58:23] *** Quits: terminalpusher (~terminalp@2a01:586:1e0e:1:24e8:c3d4:a32e:b10) (Remote host closed the connection)
[11:58:29] <rindolf> mrig: shalom. sup?
[12:00:08] <rindolf> shavua tov too
[12:02:10] <mrig> Hello
[12:02:16] <mrig> shavua tov findolf
[12:02:37] <mrig> rindolf rather
[12:02:38] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[12:03:01] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[12:03:59] <pyzozord> findolf works too, it's rindolf when he finds something
[12:04:11] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:04:26] <ProfSimm> pyzozord: it's when he's swimming
[12:04:33] <pyzozord> and windolf when he uses windows ;)
[12:04:49] <mrig> lol
[12:06:15] <rindolf> ProfSimm: humour can disarm enemies: https://en.wikipedia.org/wiki/The_pen_is_mightier_than_the_sword
[12:06:16] <bayaz> Title: The pen is mightier than the sword - Wikipedia 
[12:06:26] <rindolf> heh
[12:06:45] <rindolf> mindolf
[12:07:13] <mrig> if you see enemies everywhere your jokes are probably not very good :D
[12:07:31] <mrig> work on the timing perhaps :)
[12:07:39] <mrig> it is all in the timing.
[12:07:46] <ejjfunky> rindolf vs gandalf.
[12:07:57] <absentia> i cast a level 5 joke
[12:08:45] <ejjfunky> ejjfunklf
[12:09:02] *** Quits: maxzor (~maxzor@2a01cb04054faa00b6ef3a907690bb56.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[12:09:15] *** ejjfunky is now known as ejjfunklf
[12:09:21] *** Joins: maxzor (~maxzor@2a01cb04054faa00b6ef3a907690bb56.ipv6.abo.wanadoo.fr)
[12:09:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[12:11:00] *** Quits: baracurda (~baracurda@user/parserblabla) (Quit: Leaving)
[12:11:02] *** Quits: inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) ()
[12:11:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:11:34] <rindolf> ejjfunky: https://www.shlomifish.org/me/rindolf/#gandalfs_reindeer
[12:11:35] <bayaz> Type: application/xhtml+xml 
[12:12:04] <KillerWasp> summonfriend ejjfunklf 
[12:12:12] <ProfSimm> We need to pass closures in as callbacks and what not. Do we really need to return closures?
[12:12:22] <ejjfunklf> one day, i shall earn a page in shlomifish's site.
[12:12:40] <absentia> rindolf: if i hack your site will you write a page about me
[12:13:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[12:13:09] *** Joins: inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[12:13:34] <GeDaMo> If you hack the site, can't you write the page yourself? :|
[12:13:47] <ejjfunklf> KillerWasp: Why doth thouest summoneth I?
[12:13:49] <mrig> ProfSimm you need closure after using JS for too long, they help you to get off of it.
[12:13:53] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.191)
[12:14:09] <KillerWasp> One day, I enter a secret room where there is a board with photos, newspaper clippings, notes, and I assume that he has some mental problem like a stalker or an obsessive. Looking at rindolf's site makes me think the same thing.
[12:14:15] <mrig> someting about the funny scope that it leaves you with.
[12:14:20] <absentia> GeDaMo: delegation
[12:14:26] <Decker> ya google-closure-compiler is kinda a nice single JAR tool that minifies JS
[12:14:28] <absentia> i only push down the first domino
[12:14:32] <ProfSimm> mrig: wut
[12:14:40] <Decker> but it doesn't handle private class fields; though chrome and firefox both do 
[12:14:49] <KillerWasp> ejjfunklf: it's a command of zandronum, a port of doom
[12:15:09] <mrig> ProfSimm oh its an involved joke, could go on to how they will lead to a bad case of monads if you are not careful.
[12:15:17] <Decker> pretty sure it does tree shaking too - to make things that aren't used go away
[12:15:24] <mrig> involved/poor
[12:15:26] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[12:15:34] <ProfSimm> mrig: I appreciate the joke, but I'm trying to save the world with my amazing language here
[12:15:39] <rindolf> absentia: send me a pullreq, but nnote http://shlomifishswiki.branchable.com/Never_Try_to_Please_Everyone/
[12:15:40] <bayaz> Title: Never Try to Please Everyone 
[12:15:41] <ent58> hey it's mrig :)
[12:16:17] <absentia> MONADS?!?!?
[12:16:20] <mrig> ProfSimm nice, you had better put some closures in there then if you want to get all the web crowd on board.
[12:16:26] <ent58> absentia ?!!!
[12:16:33] <absentia> !!!
[12:16:53] <mrig> ProfSimm are you going for dynamic or statically typed?
[12:17:15] <ejjfunklf> rindolf: is that all what it takes? A pullreq? Not some feat of magic or extraordinary bravery?!!
[12:17:29] <ProfSimm> mrig: yes
[12:18:01] <vdamewood> Yay! TLS finally works.
[12:18:13] <ent58> openssl?
[12:18:24] <rindolf> ejjfunklf: pullreqs *are* magic
[12:18:30] <ProfSimm> mrig: kidding aside, it's kinda... different. Everything is assertions, not types. But static types can be extracted from it
[12:18:35] * rindolf is now playing: 11You Gotta Be - Des'ree-r32vw4260G4.flv [02:57/0703:59]
[12:18:58] <ProfSimm> mrig: you don't write an interface for example, you write a decorator with assertions.
[12:19:26] * absentia is now playing: System of a Down - Violent Pornography
[12:19:40] <mrig> ProfSimm Oh I see, so it is compiling to types just in time or something like that?
[12:19:41] <GeDaMo> https://www.youtube.com/watch?v=hakXug2FNkc
[12:19:42] <bayaz> Title: Chris Rea - Auberge (Official Music Video) 
[12:19:53] *** Joins: zaher (~zaher@37.48.177.209)
[12:19:54] <vdamewood> ent58: Odds are that's one of many TLS implementations involved.
[12:20:22] <Decker> vdamewood TLS has worked for a long time; why is that news for you?
[12:20:28] <ent58> I've always found working directly with openssl very obtuse
[12:20:30] <ProfSimm> mrig: the "IDE" will run all the time, like smalltalk, so it'll be folding all pure exceptions (which type filters/assertions also are) and making conclusions based on their type yes
[12:20:42] <ProfSimm> mrig: eventually it can JIT a statically typed trace like JS does
[12:20:46] <ent58> Decker I assume they meant "now works on my machine"
[12:20:50] <vdamewood> Decker: Well, the part that's new is that it's working on my test site.
[12:20:55] <ProfSimm> mrig:  but this is waaaaay off. I'm doig a basic interpreter until it makes sense
[12:21:46] <vdamewood> Which means I don't have to click through a bunch of crap saying "I know the risk" blah blah, now, when I visit my test site.
[12:21:55] <absentia> my life's goal: become the first us president to be impeached thrice
[12:22:24] <mrig> ProfSimm Make certain that you get those vim bindings in early, they never really seem to work when put in as an after thought :P
[12:22:28] <absentia> i bought the white house, i'm going to use the whole white house
[12:22:32] <ejjfunklf> absentia: first you have to MAGA.
[12:23:00] <rindolf> ejjfunklf: https://en.wikipedia.org/wiki/My_Little_Pony:_Friendship_Is_Magic
[12:23:01] <bayaz> Title: My Little Pony: Friendship Is Magic - Wikipedia 
[12:23:14] <absentia> _blood_ magic
[12:23:21] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[12:23:40] <ProfSimm> mrig: I'll disappoint you here. I'm thinking about this like:   Excel is to a functional language, like a TODO/organizer/ERP system is to my language
[12:23:40] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:23:57] <absentia> so a domain-specific language
[12:24:08] <ProfSimm> No, you can make eDSL with it
[12:24:13] <ProfSimm> But point is the IDE is important.
[12:24:15] <ent58> The US has some serious introspection and self modification to perform if anyone is actually serious about "MAGA", my take
[12:24:20] <ProfSimm> Like Excel is important to an XLS file
[12:24:27] <ProfSimm> Embedded tables, process lists and so on
[12:24:37] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.191) (Ping timeout: 240 seconds)
[12:25:08] <absentia> smalltalk-ng
[12:25:09] <mrig> ProfSimm I was not expecting this to actually be in the specification, but felt a compelling urge to mention, because I am still stuck inside.
[12:25:13] <absentia> or lighttable
[12:25:14] <ent58> ProfSimm: Do you have experience modifying already existing compilers? Like say, adding a feature to C/C++?
[12:25:33] <absentia> ent58: i have asked a variant of this question in the past
[12:25:39] <ProfSimm> ent58: what... like macros and templates, or you mean more serious?
[12:26:01] <absentia> i wonder what's on the gcc issue tracker
[12:26:13] <ProfSimm> Oh you mean like patching the actual compiler
[12:26:17] <ProfSimm> No.
[12:26:20] <ent58> Yeah, more serious: on supported architectures, allowing true code-rewriting
[12:26:36] <ent58> no not just a patch, like an actual language feature/abstraction, possibly new keywords
[12:26:42] <ProfSimm> ent58: nah I'm clueless about that. But I can outsource it to LLVM if it comes to that
[12:26:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[12:27:21] <absentia> lmao
[12:27:23] <mrig> ProfSimm sounds like a cool project though, heck of a thing to build.
[12:27:32] <ProfSimm> ent58: well I write parsers, mostly data and DSLs
[12:27:36] <ent58> The issue I had when I dived into this is that LLVM doesn't have a way to support the level of information I would need without entirely blowing the standard away
[12:27:53] <ent58> you need information about the code generated after all possible optimization
[12:28:04] <ent58> to map to the original AST state
[12:28:25] <ProfSimm> mrig: I'll likely fail
[12:28:32] <ProfSimm> mrig: but I can't stop myself
[12:29:31] <ProfSimm> mrig: have you seen how ugly Excel's macros are BTW. And yet, so much power when you put them in a spreadsheet GUI in the hands of the masses.
[12:29:43] <ProfSimm> As a parser it's super basic
[12:29:45] <mrig> fail, well what is your objective, is it really to save the world by adding another language?
[12:30:09] <mrig> ProfSimm I have seen reports of the quantity of errors that excel generates due to its UI.
[12:31:09] <ProfSimm> absentia: I like the clean look on http://lighttable.com/ I might steal it
[12:31:10] <bayaz> Title: Light Table 
[12:31:59] <mrig> Far to easy to miss a column in selection and the only way to see it is if you go in and actually read the ranges manually, and when such a thing is set with the mouse, to easy to miss.
[12:32:16] <absentia> ProfSimm: lighttable is the last thing i remember doing something new with IDEs
[12:32:29] <absentia> without shelling out $5k/head-year
[12:33:15] <ProfSimm> mrig: my basic structure is essentially a nested tree of expressions, like a TODO tree, where some of the lines are labeled, and you refer to them by label. I mean literally like blocks of code and varnames. So hopefully no weird referencing confusion
[12:34:02] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[12:34:05] <ProfSimm> absentia: what do you think is most different about it
[12:34:29] <absentia> time-travel debugging, alternate ways of representing functions & relationships between them
[12:34:35] <vdamewood> arahael: I just noticed the difference. The second book is called Stranger Planet, not Strange Planet
[12:34:45] <mrig> I thought that lighttable was a raw photo editing program.
[12:35:16] <mrig> That influenced quite a few other programs by its design too.
[12:35:25] <ProfSimm> mrig: scope creep /s
[12:35:27] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:35:31] <mrig> heh
[12:35:39] <arahael> vdamewood: It's a very subtle difference, but yeah - I didn't realise it was the sequel.
[12:36:14] <ProfSimm> mrig: kidding aside this is how all my hobby projects happen. Started as a todo app. Eventually boom, I'm unifying relativity and quantum mechanics with it
[12:36:26] <absentia> https://www.kickstarter.com/projects/ibdknox/light-table
[12:36:28] <vdamewood> arahael: So, is yours Strang*er* Planet?
[12:36:39] <absentia> this was the demo that sold me
[12:36:45] <absentia> unfortunately this turned out to be vaporware
[12:37:05] <vdamewood> arahael: Also, you can be forgiven for not realizing it's the second one. It's not like there's an on-going narrative that it picks up on.
[12:37:12] <ent58> I await the day that all hardware is an advanced FPGA with completely mutable instruction sets that run at normal speed
[12:37:12] <arahael> vdamewood: I believe it's Strange planet, I need to check, not sure.
[12:37:21] <arahael> vdamewood: And indeed.
[12:37:25] <mrig> ProfSimm if you can nail spooky cache update at a distance, I'm in.
[12:37:27] <rindolf> ProfSimm: story of my life
[12:37:45] <vdamewood> arahael: It's just as unimportant a detail to me as it is to you.
[12:38:00] <ProfSimm> mrig: ironically I do. Everything is value semantics. You can't reference anything :P
[12:38:18] <absentia> the time travelling debugger concept ended up making its way into elm
[12:38:26] <ProfSimm> mrig: well I mean you can reference it... by value
[12:38:34] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-5830-81a9-b2a9-186d.res6.spectrum.com) (Quit: jarthur)
[12:38:34] <absentia> until evan decided that all of the talk about applicatives and functional programming were too complex for the unwashed masses
[12:38:40] <absentia> and dumbed everything down, emptying the community
[12:38:46] <ent58> mrig: PREFETCH :)
[12:39:12] <mrig> yes nothing that a little branch prediction cant solve, what could possibly go wrong:
[12:39:14] <mrig> ?
[12:39:19] <ProfSimm> absentia: but how can an ide implement time travel debugging if the language doesn't support it
[12:39:22] <absentia> mrig: a lot it turns out
[12:39:40] <absentia> ProfSimm: http://lighttable.com/2014/05/16/pain-we-forgot/ recording history
[12:39:41] <bayaz> Title: Light Table Blog 
[12:39:47] <ent58> a compiler that's CPU cache hint aware
[12:39:50] <mrig> Though typed in serif text, there was a lot of irony in my voice :)
[12:40:10] <ProfSimm> absentia: all right, well it's more like history travel then. I still can't kill my own grandpa
[12:40:29] <absentia> ProfSimm: you can fork history though
[12:40:37] <ProfSimm> absentia: ok so how
[12:40:39] <pyzozord> oh wow, I was wondering why my headphones are so quite, I thought maybe they finally broke
[12:40:41] <absentia> ProfSimm: git
[12:40:44] <pyzozord> turns out they weren't in my ears
[12:40:44] <ProfSimm> absentia: :P
[12:40:52] <absentia> ProfSimm: the ethereum DAO fork
[12:40:55] <absentia> ETH/ETC
[12:40:57] <ProfSimm> absentia: I thought you mean I can go back in the debugger and branch the runtime state
[12:41:02] <vdamewood> Yay! Code!
[12:41:08] <absentia> ProfSimm: well this is what they were gunning for
[12:41:11] <amigojapan> mrig: hmm a programming language that interpreted different fonts are different things may be interesting
[12:41:14] <absentia> and wrote many long blog posts about how they would do this
[12:41:19] <absentia> but the IDE itself is vaporware
[12:41:24] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 272 seconds)
[12:41:30] <ProfSimm> absentia: well I mean it's impossible without lang integration
[12:41:37] <ProfSimm> absentia: but I might read their posts
[12:41:47] <absentia> nothing is impossible in software
[12:42:07] <ProfSimm> absentia: thanks for pointing me to it, that's what I want. Be inspired by people doing different shit, whether they fail or succeed
[12:42:11] <ent58> that's more like big-stick memory hole, not time travel
[12:42:24] <amigojapan> absentia: determining if a program will halt is impossible in software
[12:42:26] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[12:42:29] <absentia> i do think we need better ways of exploring and visualizing code
[12:42:32] <absentia> amigojapan: give me an oracle
[12:43:00] <ent58> I vote we return all current software projects to assembly language with a register allocator
[12:43:00] <ejjfunklf> ProfSimm, I do different shits and failed repeatedly. I failed so often, I dont know what success is even if it hits me in the face.
[12:43:07] <ent58> my dreams will be complete
[12:43:12] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Client Quit)
[12:43:18] <amigojapan> absentia: oracle will buy your software and shred it
[12:43:19] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[12:43:23] <absentia> lmao
[12:43:41] <absentia> https://www.youtube.com/watch?v=H27rfr59RiE
[12:43:42] <bayaz> Title: Homer Simpson and Bill Gates buy out 
[12:43:48] <ent58> an oracle oracle is known as a lawyer
[12:43:55] <ProfSimm> ejjfunklf: I love you then
[12:44:01] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:44:05] <ejjfunklf> thanks
[12:44:17] <amigojapan> Hey ejjfunklf 
[12:44:19] *** ejjfunklf is now known as ejjfailurelf
[12:44:41] <ejjfailurelf> hey amigojapan
[12:45:28] *** ejjfailurelf is now known as ejjfailf
[12:46:13] <amigojapan> The weather forecast said it would be snowing now but it is raining instead :(
[12:46:44] <amigojapan> Why can't we even get that right...
[12:46:48] <ejjfailf> amigojapan, dont they use supercomputers to predict this kind of stuff?
[12:46:55] <GeDaMo> They do
[12:47:12] <amigojapan> I think so ejjfailf 
[12:47:25] <ent58> I've found the visualizer at earth.nullschool.net to be awesome
[12:47:28] <absentia> amigojapan: butterflies
[12:47:31] <amigojapan> It's still not perfect tho
[12:47:36] <ejjfailf> looks like a few 'degrees' off
[12:47:43] <GeDaMo> I like https://www.windy.com/
[12:47:43] <bayaz> Title: Windy as forecasted 
[12:48:20] <GeDaMo> If you zoom in and click on a city name, you can see a forecast
[12:48:22] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[12:48:24] <ent58> the Total Precipitable Water visualization is great for determining when it's not going to be a muggy mess outside
[12:48:42] <ent58> runs about a week into the future
[12:49:00] <ejjfailf> it's one thing to predict a light rain and a thunderstorm and a snow
[12:49:11] <mrig> amigojapan vectors are amazing, you can just about add them anywhere it would seem :)
[12:49:27] <GeDaMo> At the bottom of the forecast, there's a 'compare' button which shows forecasts from multiple models
[12:49:28] <ent58> all hail std::vector
[12:50:25] <ProfSimm> absentia: I wanna show how expressions fold/reduce when you run a function, not just values on the side like lighttable does.
[12:50:30] <ejjfailf> animation is great!
[12:50:40] *** Joins: Auron (Auron956@user/auron)
[12:50:42] <ProfSimm> absentia: might be disorienting though
[12:51:07] <ejjfailf> when it goes round and round. does that mean it's a tornado?
[12:51:14] <ProfSimm> absentia: it'll look like tetris when you fill a few lines.
[12:51:17] <ProfSimm> :P
[12:51:28] <ProfSimm> expressions collapsing into other expressions
[12:51:33] <ent58> ProfSimm: If I wanted to make my own language from the ground up, do you have any advice on good starting points?
[12:51:46] <GeDaMo> ejjfailf: on windy? If you're looking at the wind prediction, then yes
[12:51:57] <ejjfailf> GeDaMo: ok
[12:51:58] <amigojapan> ejjfailf: I don't get it, we can't predict how the weather will be in a few hours, but "we know how the universe started"
[12:52:07] <GeDaMo> On the right side, there's a vertical menu to show other weather
[12:52:15] <mrig> ent58 you could just use a complex ;)
[12:52:26] <ProfSimm> ent58: oh it's a big topic, I think you need to clarify for yourself what you don't like in existing languages (and what you like) and how you'd achieve what you want. Have you written a parser before?
[12:52:29] <ejjfailf> wow, look at the red area "go right from japan" and you see the eye of the monster
[12:52:33] <ent58> amigojapan some functions of time are more stable than others
[12:52:50] *** Joins: fuzzykef (~furrykef@ip68-229-192-239.ok.ok.cox.net)
[12:52:54] <absentia> ent58: it's easier to make statements about large-scale macro trends
[12:52:59] <absentia> than the particulars of some blue piece of rock
[12:53:00] <KillerWasp> giveme coins!!
[12:53:06] <amigojapan> ent58: how do you know those are not stable?
[12:53:12] <absentia> amigojapan: chaos theory
[12:53:17] <ent58> ^
[12:53:21] <absentia> dynamical systems being extremely sensitive to changes in initial conditions
[12:53:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[12:53:32] <absentia> "butterfly effect" and all that bullshit
[12:53:34] <mrig> all hail the imaginary number; Indispensable for al la cartesian fun!
[12:53:46] <ent58> but there's also just considering that some physical systems do not interact meaningfully with others, and so you have a fractally cascading pattern of interactions
[12:53:46] <amigojapan> absentia: it should apply to the beginning of the universe calculations too
[12:53:50] <ejjfailf> and where is the lang/lat? hmm..
[12:54:00] <ent58> where each can be treated nearly separately until you get to the beginning of the tree
[12:54:01] *** Quits: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net) (Ping timeout: 256 seconds)
[12:54:01] <ProfSimm> absentia: so wait, they got 300k and then kind of died
[12:54:07] <absentia>  absentia | ent58: it's easier to make statements about large-scale macro trends
[12:54:07] <ProfSimm> absentia: is this IDE a thing, is it maintained
[12:54:09] <absentia>  absentia | than the particulars of some blue piece of rock
[12:54:15] <absentia> ProfSimm: i have no idea
[12:54:17] <absentia> like i said, vaporware
[12:54:19] <ProfSimm> ah cool
[12:54:28] <ProfSimm> I'm noticing videos from 9 years ago
[12:54:36] <absentia> they ran out of dreams
[12:54:42] <absentia> or usd
[12:55:00] <ent58> I've written what might be considered a baby's first parser, for a small lightweight option specifying format
[12:55:21] <ent58> but I know what would go into one that's far more general
[12:55:25] * ejjfailf afk
[12:55:33] <ent58> but I don't believe I'll need something like a formal grammar
[12:55:43] *** Quits: moniker- (~mon@dh207-123-183.xnet.hr) (Remote host closed the connection)
[12:56:00] <Athas> Why would you not want a formal grammar?
[12:56:38] <GeDaMo> It doesn't hurt to have a formal grammar
[12:56:43] <ent58> err...more correctly, I wouldn't need to use a pre-existing tool to do it, like a compiler compiler
[12:57:08] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[12:57:17] <ProfSimm> ent58: I'm doing this backwards as in I started with the AST, and the syntax is a second concern. That's a way to not think about the parser until you know what the language wants to be
[12:57:18] <ent58> I take inspiration from the FASMG assembler
[12:57:42] <ent58> where you can create very expressive behavior from a powerful macro engine
[12:57:46] <ent58> but the "grammar" is...simple?
[12:57:59] <ProfSimm> It's a way
[12:58:03] <ProfSimm> Or you can make it a lisp
[12:58:13] <ProfSimm> Easy parser/grammar
[12:58:16] <ent58> Lisp seems too...uh
[12:58:24] <absentia> good
[12:58:27] <ent58> I mean I would love a C-like language
[12:58:31] <ent58> but
[12:58:40] <ProfSimm> Well, look at Julia. It looks like Python, but is Lisp internally
[12:58:49] <ProfSimm> You can grow a "lisp" into something more
[12:58:58] <ent58> hmm
[12:59:05] <absentia> there is a limit to that growth
[12:59:08] <absentia> until you lose homoiconicity
[12:59:12] <ProfSimm> 5 + 6 becomes (add 5 6) and so on
[12:59:30] <ProfSimm> absentia: well no if it compiles to predictable expressions it's fine
[12:59:34] <ent58> Yeah so absentia, you're on to something there
[12:59:35] <ProfSimm> absentia: just sugar
[12:59:51] <absentia> i am in a superposition of correctness
[12:59:54] <ent58> I want homoiconicity but at the level of compiled assembly
[13:00:05] <absentia> ent58: so wasm?
[13:00:09] <ent58> all code is actually data
[13:00:09] <absentia> their assembly language is a lisp
[13:00:18] <ent58> using bytecode is cheating
[13:00:30] <ProfSimm> It is?
[13:00:31] <ent58> for this purpose anyway
[13:00:34] <ent58> yes
[13:00:35] <ProfSimm> OK
[13:00:41] <absentia> https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format
[13:00:42] <bayaz> Title: Understanding WebAssembly text format - WebAssembly | MDN 
[13:01:05] <absentia> wasm is fascinating
[13:01:07] <ProfSimm> See WASM knows what I'm talking about. "Just make it a LISP"
[13:01:10] <absentia> i think it's still half-baked
[13:01:18] <absentia> but i have been following along for some time
[13:01:31] <absentia> lichess is confident enough to use it in production
[13:01:35] <ent58> Think C/C++ but you can have something akin to a "pure inline function" that does not compile until all possible versions of it are laid out post-optimization
[13:01:36] <absentia> though only for client-side stockfish analysis
[13:01:43] *** Quits: xff0x (~xff0x@2001:1a81:5288:ea00:6fee:3fb4:5f11:904c) (Ping timeout: 256 seconds)
[13:01:54] <ent58> and then stored efficiently so that one can replace the other, at the instruction level
[13:01:54] <arahael> Even x86 machine code is "Just bytecode".
[13:02:01] <absentia> ent58: you mean like template monomorphization?
[13:02:09] *** Joins: rsx (~dummy@ppp-188-174-158-217.dynamic.mnet-online.de)
[13:02:11] <absentia> oh post-optimization
[13:02:14] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:43ab:35e6:a5cd:7882)
[13:02:23] <absentia> all versions?
[13:02:25] <ent58> arahael while absolutely correct, it's also sort of moot
[13:02:31] <ent58> yes...so for example
[13:02:32] <Athas> arahael: unless instructions encoded as fractional bytes are hidden somewhere in the ISA!
[13:02:47] <ProfSimm> Reduceron CPU has no instruction set
[13:02:55] <absentia> no opcode
[13:02:57] <absentia> only mov
[13:03:27] <ent58> pure inline void do_it() { ++a; } mutate inline void do_it() { --a; }
[13:03:27] <ent58> leaving out a truly cohesive syntax, but the idea is
[13:03:33] <GeDaMo> https://en.wikipedia.org/wiki/Transport_triggered_architecture ?
[13:03:33] <bayaz> Title: Transport triggered architecture - Wikipedia 
[13:03:34] *** fuzzykef is now known as furrykef
[13:03:34] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[13:04:13] <arahael> ent58: How is it moot?
[13:04:17] <ent58> the act of "calling" for modification would quite literally replace the bytes, in memory, of the instruction that increments a with one that decrements
[13:04:38] <absentia> fascinating
[13:04:56] <absentia> stack overflows reified as a language feature
[13:05:21] <ent58> there are ways to make it safe, but yes this requires RWX memory
[13:06:11] <ProfSimm> Decker: I kinda did the ";" thing with return results, but in reverse:   (1, 2, 3, 4; 5, 6, 7) <-- will return 1, 2, 3, 4, and 5, 6, 7 is asking to Haskell's "where" for supplemental declarations
[13:06:20] <ProfSimm> akin*
[13:06:33] <ent58> arahael I just mean that since I have no control over the microcode translation in the normal sense, and I can't issue a direct pipeline of instructions that can never be microcoded (unless you count maybe adhering to what the manual says has direct mappings)
[13:06:55] <arahael> ent58: Ah, perhaps you could in qemu. Or rosetta2 if you were apple.
[13:06:55] <Decker> ((1, 2, 3, 4), (5, 6, 7))
[13:07:13] <arahael> ent58: I use rosetta2, incidentally.
[13:07:30] <ProfSimm> Decker: well yes, but I want some sugar so I don't end up in paren hell
[13:07:56] <ProfSimm> Decker: exact syntax pending, point is I decided absolutely I want the result first, because my sequences are queues, not stacks
[13:08:04] <ProfSimm> So first thing is first result, not last
[13:08:18] <ent58> But yeah I mean "bytecode is cheating" where bytecode is anything abstracted above the base instruction set architecture...I guess that's how I'd put it
[13:08:44] <ProfSimm> ent58: you need some opcode unless you wanna target like one CPU
[13:08:57] <absentia> rip subroutines
[13:08:59] <absentia> only inline
[13:09:05] <ent58> well this would target one CPU in the same way C does
[13:09:06] <Decker> ProfSimm that only buys you one level... 
[13:09:06] <absentia> no symbol tables
[13:09:19] <absentia> no linker
[13:09:21] <ent58> so yesn't
[13:09:24] <ProfSimm> Decker: buys me one level what
[13:09:46] <ProfSimm> Decker: oh well it adds up man
[13:09:47] <ProfSimm> :D
[13:09:48] <Decker> ((((1,2),(3,4)),(5,6)),(7,8))  +/- a )
[13:09:53] *** Joins: X-Scale` (~ARM@66.26.54.77.rev.vodafone.pt)
[13:10:16] <Decker> which is really a combination of multiple function results
[13:10:22] <Decker> and wasn't written that way
[13:10:27] <absentia> x gon' scale it to ya
[13:10:29] <absentia> he gon' scale it to ya
[13:10:37] <ent58> So, for example....some architectures can't even do what I want and have no ability to write to any regions that contain code...that's totally okay, I should wouldn't be able to use the pure inline deal
[13:10:49] <ent58> I just wouldn't *
[13:11:10] <GeDaMo> If you use a bytecode then your code is data and you can write to it :P
[13:11:10] <Decker> ent58 there's too many of those :)
[13:11:18] *** Quits: X-Scale (~ARM@31.22.166.28) (Ping timeout: 260 seconds)
[13:11:18] <absentia> e.g. non von neumann architectures
[13:11:19] *** X-Scale` is now known as X-Scale
[13:11:25] <Decker> that's why I gave up my inline replace line function (swapping ++ for -- etc)
[13:11:29] *** Joins: rtypo (~alex@user/rtypo)
[13:11:33] <Decker> (for drawing gui lines)
[13:11:45] <absentia> von noiminn
[13:12:01] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:78e9:2c9a:5431:d092) (Read error: Connection reset by peer)
[13:12:15] <Decker> von neumann changes its own operating space - that's the opposite ?
[13:12:21] <absentia> yes
[13:12:23] <absentia> harvard architecture
[13:12:33] <absentia> s/operating space/instruction space
[13:12:37] <ProfSimm> ent58: this is why it's better to start with an interpreter and then if you can JIT, fine, if not, it still runs. But you are free to choose your own semantics
[13:12:39] <Decker> ahh
[13:12:41] <ent58> Yeah that's the problem though, there are meaningful efficiency gains and speedups to be had by employing truly rewriteable code
[13:12:59] *** Joins: moniker- (~mon@dh207-123-183.xnet.hr)
[13:13:25] <ent58> imagine being able to compile "into" a running program, where the instructions are laid out as if the program had been written that way in the first place
[13:13:56] <ent58> I understand the entire path of JIT, but I mean being able to specify this as the programmer
[13:14:14] <ProfSimm> ent58: this is what homoiconicity gives ya no
[13:14:44] <ent58> On the plane of the abstract machine, yes...but there's not a single high level language that can do what I'm describing
[13:15:09] <ProfSimm> ent58: can we narrow down a bit on what that is because I'm missing the subtle parts
[13:15:24] <ProfSimm> ent58: in C# for example you can build some AST at runtime and compile it and run it
[13:16:11] <ent58> So, that's close
[13:16:34] <ent58> But it's not as expressive as having it be..say, a keyword, in C
[13:16:55] <ent58> But
[13:16:57] <ProfSimm> Sure, this is why LISP as a base is neat, because the code is the data is the syntax
[13:17:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[13:17:26] <ent58> Yes, now take that high level homoiconicity, and apply it at the assembly level
[13:17:29] <ProfSimm> I have something similar except I added named params and few other things to it
[13:17:44] <absentia> ent58: if you're changing the implementation
[13:17:50] <absentia> what does the function identifier even mean any more
[13:18:47] <absentia> and couldn't you implement this with function pointers
[13:18:52] <absentia> or `jmp`
[13:18:54] <ent58> so, it comes close to the execution side of a Quaject
[13:19:01] <absentia> what in the fresh hell
[13:19:13] <ent58> which is a term borrowed from a paper on the Synthesis Kernel
[13:19:31] <ent58> which is something that pretty much nails the idea in a system-level implementation, but not as a high level language
[13:19:36] <ent58> hand written assembly
[13:19:52] <ent58> and you're absolutely right
[13:19:56] <absentia> fuck yeah papers in ##programming
[13:19:59] <ProfSimm> ent58: what are you hoping to benefit from by working at ASM level. Why not structured code?
[13:20:29] <GeDaMo> https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.29.4871
[13:20:30] <bayaz> Title: CiteSeerX ? Synthesis: An Efficient Implementation of Fundamental Operating System Services 
[13:20:32] <ent58> that's just it ProfSimm, I don't want to work at that level. I want a C compiler to do this rewriting for me
[13:20:45] *** Joins: elgraz (~elgraz@151.65.18.229)
[13:20:50] <ProfSimm> ent58: at runtime?
[13:20:53] <ent58> at runtime
[13:21:04] <user51> i'm starting to prefer inefficient implementations, because then you know what to avoid.
[13:21:05] <ProfSimm> ent58: based on execution statistics?
[13:21:06] <KillerWasp> ProfSimm: The ASM, being unstructured, allows it to be handled freely, it has its advantages.
[13:21:23] *** Joins: kilitary (~kilitary@188.242.105.134)
[13:21:27] <ent58> it _could_ be based on that, but that's for the programmer to decide
[13:21:51] <ProfSimm> KillerWasp: well yes, but I think structured code kind of subsumed that, because structured code also has lists of expressions/statements
[13:22:03] <ProfSimm> It just also has structure
[13:22:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 256 seconds)
[13:22:20] <ProfSimm> See WASM again. It's a LISP, but it has list of commands with params too
[13:22:22] <ProfSimm> So both
[13:24:06] <ProfSimm> 5 People Who Discovered We Are In A Simulation (YouTube.com): "She discovered her flat screen TV was mysteriously replaced with an old CRT tube TV". Simulation being overly dramatic I see. Why not replace her LG smart TV with a very similar Samsung smart TV :P
[13:24:17] <pyzozord> Is it a lisp? I thought it just hsa s-expressions and that's it. Is that enough to be a lisp? i thought to be a list you need at least car and cdr
[13:24:22] <ent58> You get more control than JIT, and there's a few layers...if you have modifications that are specified at compile time, this is usually what a JIT covers (things like re-writing checks for flags, eliminating pointless branches)
[13:24:40] <absentia> pyzozord: you may be right
[13:24:43] <ProfSimm> pyzozord: well OK it's not a LISP, but what is LISP really, so many dialects. S-expr the foundational idea
[13:24:45] <GeDaMo> pyzozord: it's not a Lisp, it just uses S-expressions
[13:25:45] <ProfSimm> BTW is there a reason one of queue/stack is more efficient than the other?
[13:25:46] <ent58> but then there's incorporating code that may not exist yet at runtime, like the behavior of a scripting engine embedded into a program
[13:26:12] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753)
[13:26:17] <absentia> this is really straddling the line of JITting compilers
[13:26:19] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[13:26:22] <GeDaMo> http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html
[13:26:22] <bayaz> Title: A Neighborhood of Infinity: The Three Projections of Doctor Futamura 
[13:26:26] <ProfSimm> absentia: yeah
[13:26:40] *** Joins: teut (~teut@122.161.83.81)
[13:26:47] <absentia> futurama
[13:27:13] <ProfSimm> I think any modern language should be interpreter + jit, unless it specifically wants to run in a traditional OS kernel
[13:27:32] <ProfSimm> You don't wanna bootrstrap all that stuff in the kernel
[13:27:45] <Athas> Do you want to bootstrap it outside the kernel?
[13:27:48] <Athas> JITs are complex.
[13:27:50] <ProfSimm> Yes
[13:28:01] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[13:28:01] <ProfSimm> They're complex, but they're optional
[13:28:13] <ent58> I want both: a system language (C) but has a serious bolt-on to be able to do JIT (possible with compilers) and manual control of self-modification (new thing I want)
[13:28:15] <ProfSimm> You only need it for the hotspots
[13:28:33] <ProfSimm> Plus one day we may have also a JIT operating system
[13:28:41] <absentia> "chromium"
[13:28:41] <ProfSimm> But the kernel has to be made for it. Something like .NET 
[13:28:42] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[13:28:53] <GeDaMo> JIT operating systems have been tried a few times
[13:29:02] <Athas> I think you are ignoring implementation complexity.  For a given level of optimisation, writing an AOT compiler is much simpler than writing a JIT compiler.
[13:29:10] <ProfSimm> GeDaMo: yes, and it's successful. But there's no commercial reason to abandon Windows/macOS
[13:29:12] <GeDaMo> The Synthesis OS which I linked above is kind of one
[13:29:32] <ent58> I want the dynamics of Synthesis but in any application
[13:30:00] <GeDaMo> There was one called Taos which was a JIT VM at the base
[13:30:02] <ProfSimm> Swift actually is a compiled language that feel very high-level so
[13:30:07] <ProfSimm> There's place for both
[13:30:10] <absentia> so is haskell
[13:30:17] <absentia> tremble at the heights of mathematical abstraction
[13:30:18] <ProfSimm> Well.
[13:30:40] <ProfSimm> I have some kind of a cognitive dissonance describing non-strict language as compiled
[13:30:44] <pyzozord> I don't know, I think both very dynamic and very static languages could be cool
[13:30:47] *** Quits: rcutler (~rcutler@user/rcutler) (Quit: Leaving)
[13:30:52] <ProfSimm> It's compiled, but it's literally piling expressions at runtime 
[13:30:56] <pyzozord> what's uncool is when you try to have too much of both at once
[13:31:02] <absentia> pyzozord: as a lisp and haskell fan yes
[13:31:15] <absentia> and as someone against gradual typing also yes
[13:31:27] <absentia> don't compromise, go all in and deal with the consequences
[13:31:29] <ProfSimm> I think garbage collected languages are done wrong tho
[13:31:35] <ProfSimm> One giant heap, sucks.
[13:31:47] <absentia> some gc's are generational
[13:31:47] <ProfSimm> Either have multiple arenas, or don't do it
[13:31:52] <Athas> ProfSimm: Maybe you'd like region inference!
[13:32:09] <ProfSimm> Well inference/generations are cool. But you know what's cooler? Explicit regions
[13:32:39] <Athas> Generations are very different from regions.  But I agree a language with explicit regions would be cool.
[13:33:01] <pyzozord> My idea is that I could use the most dynamic and crazy language but only as a code generation tool that produces code that is the most static in runtime
[13:33:04] <Athas> One of my colleagues works on region-based memory management and he often bemoans the fact that the regions are not part of the surface language.
[13:33:07] <ProfSimm> Or even better, what I do (because surprise: I like what I like), single-reference objects (move semantics), and reference-counted values.
[13:33:15] <Athas> Do any languages with explicit regions exist?
[13:33:17] <ent58> What I want can be handled by essentially creating tens of copies of a function and calling them all though a function pointer, but this has serious disadvantages: locality gets destroyed, memory is wasted, and it incurs an indirect (even if predictable) jump cost every call, which is important for code running in extreme hot spots
[13:33:26] <pyzozord> lisp generating assembly, or something like that
[13:33:51] <absentia> Athas: https://lib.rs/crates/typed-arena
[13:33:51] <ProfSimm> Athas: Erlang kinda
[13:33:52] <bayaz> Title: typed-arena ? Rust memory management library // Lib.rs 
[13:33:52] <pyzozord> and in runtime no dynamism at all of any kind
[13:34:07] <GeDaMo> https://en.wikipedia.org/wiki/Game_Oriented_Assembly_Lisp
[13:34:07] <bayaz> Title: Game Oriented Assembly Lisp - Wikipedia 
[13:34:24] <Athas> absentia: that's not a language.  C++ allocators can also do a bit of that.
[13:34:42] <pyzozord> oh hmm, that's interesting
[13:34:48] <Athas> ProfSimm: well not really.  No types for one.  Although Erlang does solve the "single heap" problem very well in other ways.
[13:34:52] <absentia> as a builtin or part of the syntax?
[13:34:54] <ent58> if the transition between different function versions is infrequent (on the order of a cache invalidate) then you can hide the latency and stand to gain huge benefits
[13:34:56] <absentia> never heard of such things
[13:35:04] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:35:14] <ProfSimm> Athas:  I missed that it has to be "typed" per se. What is the benefit/feature here
[13:35:23] <absentia> and don't say as part of the stdlib
[13:35:33] *** Joins: kcrk (~kcrk@user/kcrk)
[13:35:40] <Athas> ProfSimm: I think it has to be typed or the compiler won't be able to do region-based memory management.
[13:35:47] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:f5dd:19f9:12f7:7b9d)
[13:35:51] <Athas> It needs to be able to determine the lifetimes of data.
[13:35:52] <ProfSimm> Athas: ECS (Entity Component Systems) are kinda like typed arenas. But they're manual, not automatic. Well they're automatic in Unity for example
[13:35:58] <absentia> there is no dynamic typing, dynamic languages are just unityped
[13:36:03] <absentia> they have one type: object
[13:36:15] <absentia> which is almost as good as saying nothing
[13:36:27] <GeDaMo> http://blogs.perl.org/users/ovid/2010/08/what-to-know-before-debating-type-systems.html
[13:36:28] <bayaz> Title: What to know before debating type systems | Ovid [blogs.perl.org] 
[13:36:32] <ProfSimm> Athas: also, SQL :)
[13:36:45] <ProfSimm> Athas: although we're not used to thinking about it this way
[13:38:10] *** Quits: ejjfailf (~ejjfunky2@125.164.20.201) (Remote host closed the connection)
[13:38:28] <ent58> what if you had a language that only exposed native "static" types that were capable of being executed natively...like aÂ  (SSE+ widths) qword/dword/word/byte type deal
[13:38:33] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[13:38:42] <ent58> where you subscribed to types you want at compilation time
[13:39:02] <ent58> and could build abstractions for types that do not exist to support them
[13:39:02] *** Joins: X-Scale` (~ARM@92.250.98.59)
[13:39:17] <absentia> GeDaMo: nice article
[13:39:21] <absentia> 2010, too
[13:39:32] <absentia> holy shit, turns out there's not much new under the sun
[13:39:37] *** Quits: X-Scale (~ARM@66.26.54.77.rev.vodafone.pt) (Ping timeout: 240 seconds)
[13:39:41] <ent58> say there's no 'float', so you implement one as an emulation of IEE 754 in a dword
[13:39:42] *** X-Scale` is now known as X-Scale
[13:39:48] <ent58> IEEE*
[13:40:17] <ProfSimm> ent58: isn't this kinda how it works right now
[13:40:21] <JanC> you can already do that in many languages...
[13:40:29] <Athas> Yeah, a C compiler can implement 'float' that way if it needs to.
[13:40:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:40:52] <ent58> Yeah, I was thinking more "not done by the compiler"
[13:40:57] <ent58> otherwise I completely understand
[13:41:03] <Athas> So user-defined types?
[13:41:08] *** Joins: berkhan (~berkhan@159.146.41.59)
[13:41:10] <absentia> > testing / proof
[13:41:14] <ProfSimm> ent58: we need to blur the line between compiler and runtime I think. 
[13:41:15] <absentia> tests prove the presence of bugs
[13:41:18] <absentia> static types prove their absence
[13:41:27] <absentia> another way i have seen that expressed
[13:41:32] <ProfSimm> ent58: and language and library
[13:41:50] <absentia> or maybe i should say
[13:41:57] <ProfSimm> ent58:  a language that scales is one that can evolve without some equivalent of helicopter parenting by the compiler makers
[13:42:04] <absentia> exactly what i said actually
[13:42:27] <Athas> What's wrong with having to modify a compiler?
[13:42:55] <ProfSimm> Athas: well, the fact you can't have every project written in lang X need to modify the X compiler
[13:42:58] <KillerWasp> GOAL
[13:43:04] <absentia> OLE OLE OLE OLE
[13:43:07] <JanC> if everyone is going to implement their own IEEE 754 then I would expect ~95% would be wrong though  :P
[13:43:30] <ProfSimm> Athas: maybe I'm biased. My entire thing is languages where you make eDSLs without touching the compiler
[13:43:33] *** Joins: widp (~user@124.123.104.227)
[13:43:39] <ent58> Yeah it's mostly that I want the behavior of the compiler to be specified by code to a simpler, reductionist compiler
[13:43:58] <kilitary> stfu kilitary
[13:44:10] <Athas> ProfSimm: OK, I thought by "evolve" I thought you meant making general ecosystem-wide changes to the language.  To me, language project-specific language extensibility is a different thing.
[13:44:28] <GeDaMo> ent58: languages do that, Haskell has a core language it compiles to
[13:44:46] <ent58> so it's not that all users would be given this barebones thing, it's more so that they would get a compiler where the "how to IEEE754 on X64" is literal code they can read that gets included at compile time
[13:44:52] <ProfSimm> Athas: well if you can extend the language for a project without messing with the compiler, then you also can affect the ecosystem
[13:44:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:45:34] <ProfSimm> Athas: take LINQ for example. Imagine if LINQ was not a C# compiler feature, but was just some user lib.
[13:45:45] <ProfSimm> Athas: that's the ideal scenario imho
[13:46:15] <Athas> ProfSimm: even the most extensible languages I know of tend to have "core" things that could not have been done as a mere extension.
[13:46:24] <Athas> Usually the problem is that the extensions may not be composable with other extensions.
[13:46:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[13:46:50] <ProfSimm> Athas: but of course. But it's very important to choose those core things carefully. Make them few, make them flexible. Make them customizable enough
[13:46:50] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Remote host closed the connection)
[13:46:58] <ent58> A compiler whose only job is to dynamically expose the environment to the programmer in a systematic fashion, and all following code either has pre-conceived notions on what environment they are on, or build abstractions to handle incompatible ones
[13:46:59] <Athas> There's where central language extensions (supported by the compiler) may be needed.
[13:47:19] <ProfSimm> Athas: extensions that don't compose reveal a flawed metaprogramming/macro model
[13:47:27] <GeDaMo> ent58: that sounds like an operating system :P
[13:47:43] <ent58> yeah! it kind of does
[13:48:00] *** Quits: password2 (~password8@user/password2) (Read error: No route to host)
[13:48:08] <Athas> ProfSimm: perhaps in an idealist sense, but is that a useful description if all plausible systems are then flawed?
[13:48:19] <pyzozord> sounds like smalltalk too
[13:48:32] <Athas> E.g. if you extend a language with two different object systems, they probably will not compose well.
[13:48:44] <ProfSimm> Athas: in the thing I'm doing for example this is just one function call:      sql select (a, b, c, d: e + f) from (bar, baz) where (bar id = baz id) order (foo asc)
[13:48:56] <ProfSimm> Athas: nothing in the compiler or parser knows SQL
[13:48:57] <Athas> Concurrency is another thing that you typically can't do as an extension.
[13:49:15] <ProfSimm> Athas: and because it all sits under a function it can't clash with other functions
[13:49:31] <Athas> ProfSimm: can I replace 'bar id = baz id' with a call to an arbitrary other function in your language?
[13:49:34] <ProfSimm> Athas: so there is a way. 
[13:49:51] <ProfSimm> Athas: you can, but it'll evaluate and interpolate the result inline
[13:50:22] <Athas> But that's not valid.  The predicate may involve references to names bound in the SQL statement itself.
[13:50:31] <Athas> This is what I mean by "composable".
[13:50:41] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:50:42] *** Joins: password (~password8@user/password2)
[13:51:10] <ProfSimm> Athas: you can't compose something that runs on one machine with something that runs on another. But you can extend both models and use them together in a clearly defined way
[13:51:46] <Athas> How does a "clearly defined way" arise for two extensions that are developed separately and they do not know about each other?
[13:51:55] <absentia> easily
[13:52:00] <ProfSimm> Athas: you can write custom functions to use in the SQL, but you can't just use any generic function
[13:52:14] <ProfSimm> The = itself is a function
[13:52:53] <ent58> A non-monolithic compiler
[13:53:01] <ProfSimm> Athas: the clearly defined way is that you write your query, and embed expressions explicitly
[13:53:40] <ProfSimm> Athas: i.e. let's say above I want e + f to mean not "e + f" in the tables, but "e + local var f"  then I type e + {f}
[13:53:51] <ProfSimm> Athas: it's simple, but works yes?
[13:54:30] <ProfSimm> Athas: maybe SQL is a bad example because it literally runs on an SQL server
[13:54:37] <Athas> Sure, and it's probably useful, but it is not a counterexample to my argument that language extensions tend not to compose.
[13:54:40] <ProfSimm> Athas: most functions don't reparse their arguments
[13:54:42] <rindolf> hi all. whats new?
[13:54:57] <absentia> nothing
[13:55:02] <absentia> day 9001 of covid
[13:55:17] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:55:30] <ProfSimm> Athas: I think it's not an argument about extensions composing because you can't fix this by editing the compiler
[13:55:31] <rindolf> absentia: covid isnt news
[13:55:37] <absentia> exactly
[13:56:00] <ProfSimm> Athas: the problem here is that SQL is on machine 1 and your language runs on machine 2.
[13:56:05] *** Joins: Rounin (~david@84.212.130.215)
[13:56:12] <ProfSimm> Athas: but most things can compose
[13:57:38] <ent58> if both of those extensions start from the same "what is a computer" assumption, then perhaps it could also be guaranteed that some subset of their behavior composes
[13:58:15] *** Joins: newwebdev13 (~newwebdev@31.210.55.74)
[13:58:23] <ProfSimm> ent58: well, you can improve interop between machies, but you can't solve the dependency problem.
[13:58:32] <ent58> if you start with "all memory is a huge flat array"
[13:58:37] <rindolf> absentia: https://imgur.com/gallery/yV03lZR - news
[13:58:38] <ent58> then registers get hidden
[13:59:03] <ProfSimm> ent58: if a function in your code base relies on another, which relies on another etc etc. like 10 MB code, or 100MB code, then telling machine 2 "hey run foo()" when it doesn't have that code, or even worse, when it doesn't have THE SAME VERSION of that code, is a bad idea
[13:59:09] <absentia> registers have different performance characteristics though
[13:59:38] <ProfSimm> ent58: you can tell machine 2 "run your foo()" but then you have no expectations that it works like your foo()
[13:59:44] <ent58> right, and those performance characteristics can be measured/specified (either by relative order or absolute performance)
[13:59:52] <absentia> yes
[14:00:27] <absentia> but then what do you gain from the abstraction of all memory being a huge flat array
[14:00:29] <absentia> it's flat
[14:00:32] <absentia> except for these bits here
[14:00:40] <ent58> so #include <registers> in our imaginarylang would basically be the equivalent of "importing" register behavior
[14:01:07] <ent58> and it could have it's own syntax for overriding how any memory access works
[14:01:09] *** Azem is now known as Emet-Selch
[14:01:13] <ent58> or complete manual control
[14:01:50] *** Joins: plastico (~plastico@neomutt/plastico)
[14:02:58] *** Quits: newwebdev13 (~newwebdev@31.210.55.74) (Read error: Connection reset by peer)
[14:03:15] <ent58> hmm
[14:03:18] <rindolf> absentia: i've been changing ponies in midwater
[14:03:47] <absentia> what does that even mean
[14:05:07] <ent58> I really want to try to do something like that, but at some level you have to statically specify what the environment can do, and writing the "environment compiler" is the part that needs to be done intelligently and can't rely on dynamicism
[14:05:09] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[14:06:20] <ProfSimm> ent58: what does "statically" mean, if you think about it
[14:06:35] <arahael> absentia: It means he's a very busy man.
[14:07:36] <rindolf> absentia: i've been changing ponies in midwater: changing intermediate conclusions, while retaining the same end-goal
[14:07:47] <ProfSimm> arahael: not as much as me, I'm changing planes midair
[14:08:02] <absentia> fascinating
[14:08:09] *** Joins: newwebdev13 (~newwebdev@78.135.92.22)
[14:08:26] <ent58> well, besides doing the level of hardware discovery an operating system might (and even then it needs software it doesn't already have to operate that hardware), it's just that..."what is a computer" needs to specified
[14:08:31] *** Joins: jokoon (~eio@2a01:e0a:542:e160:110a:c5de:8b6f:346f)
[14:08:31] <arahael> ProfSimm: That's almost as hard. :)
[14:09:15] <ProfSimm> arahael: not as much as Bruce Willis, he's changing movies mid-word
[14:09:22] <jokoon> do you guys know an algorithm to optimally place a list of image of arbitrary aspect ratio, to have a minimal amount of empty space?
[14:09:22] <ProfSimm> Anyway
[14:09:48] <GeDaMo> jokoon: sounds like a space packing algorithm
[14:10:10] <ProfSimm> jokoon: you can have no empty space at all if you "cover" with the image
[14:10:30] <jokoon> what do you mean by cover?
[14:10:49] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[14:10:49] <GeDaMo> https://en.wikipedia.org/wiki/Packing_problems
[14:10:50] <bayaz> Title: Packing problems - Wikipedia 
[14:11:16] <absentia> hear ye, hear ye
[14:11:20] <jokoon> any library already doing that?
[14:11:26] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:12:05] <jokoon> I have a limited amount of rectangle, about 10 or 15, Im not sure brute force is a solution
[14:12:34] <ProfSimm> jokoon: I mean can you crop the images, or is it more like Expose on macOS or TaskView on Windows
[14:12:42] <deniska> there're various packing algorithms, and tools already implementing them
[14:12:50] <jokoon> no I cannot crop and they cant overlap
[14:13:07] <ProfSimm> https://en.wikipedia.org/wiki/Bin_packing_problem
[14:13:07] <bayaz> Title: Bin packing problem - Wikipedia 
[14:13:12] <ProfSimm> https://www.gamedev.net/forums/topic.asp?topic_id=392413
[14:13:15] <bayaz> Title: Rectangle packing 
[14:13:39] <deniska> jokoon: you are probably looking for a texture packer
[14:13:41] <jokoon> I will resize them, because I want them to have similar surface areas, but I can't change their aspect ratios
[14:13:58] <ProfSimm> jokoon: the second link has a sample algorithm
[14:14:09] <ent58> it really sounds like what I want is just an extremely advanced assembler
[14:14:13] <deniska> because it's a problem common in gamedev, putting multiple sprites onto a single texture image to avoid switching between textures when running the game
[14:14:21] <absentia> https://stackoverflow.com/questions/11724066/tiling-different-size-rectangles
[14:14:21] <bayaz> Title: Tiling different size rectangles 
[14:14:25] <absentia> this sounds interesting
[14:14:32] <ProfSimm> ent58: yes but I think the question is why. The assembler is the means, what's the goaol.
[14:14:33] <ProfSimm> goal*
[14:15:18] <absentia> my competitive advantage: no longer using google, bing, nor ddg
[14:16:00] <absentia> i am actually concerned about information becoming undiscoverable
[14:16:13] <absentia> i don't have faith that google can continue to deliver on its mission of search in the long-term
[14:16:14] <ent58> the goal is scalable, expressive programs with complete control of how underlying assembly results. No limitations based on an abstract definition, subscribe-like access to native features
[14:16:16] <absentia> [/end tangent]
[14:17:04] <ent58> current languages throw away environmental knowledge and then reapply it by optimizing
[14:17:43] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[14:18:07] <ProfSimm> ent58: thing is, I don't know if you realize why they do that
[14:18:08] *** Quits: berkhan (~berkhan@159.146.41.59) (Ping timeout: 256 seconds)
[14:18:50] <ProfSimm> ent58: modern CPUs have performance characteristics you can't manually select at all. It's a mess. Like warfare. Feature is added, is gets misused, CPU adapts for the misuse, and so on and so on
[14:19:10] <absentia> let me disable these fucking spectre mitigations
[14:19:34] <absentia> so i can squeeze 2 fps more out of my vidja games
[14:19:34] <ent58> right, but what if you could actually see the machinery responsible for making a decision like that?
[14:19:43] <ent58> like...for example
[14:19:55] <ent58> choosing between add rax, 2
[14:20:03] <ProfSimm> ent58: what do you mean "see" it. If I show you a chip schematic for example, what you gonna do with it.
[14:20:08] <epony> what good is an :expressive: program that does not compile?
[14:20:10] <ent58> and lea rax, [rax + 2]
[14:20:10] *** Quits: inky_ (~inky@46.36.117.123) (Read error: Connection reset by peer)
[14:20:11] *** Quits: _inky (~inky_@46.36.117.123) (Read error: Connection reset by peer)
[14:20:20] <absentia> epony bringing the real wisdom
[14:20:22] *** Joins: haliucinas (~haliucina@5.20.153.21)
[14:20:29] <epony> and how is asm register operation an expression of expressiveness?
[14:20:43] <absentia> poc | gtfo
[14:21:11] <epony> like in one sentence you raise the claim of superb programming, and then demonstrate you're discarding that for micro-management at the machine code level
[14:21:17] <ProfSimm> ent58: my point is that CPUs have machine code that is completely unpredictable by a human being at this point. It's made by machines and machines compile to it
[14:21:23] <ent58> Trying to generalize a bit I guess, so we're not lost in the weeds, what I'm talking about is....all the decisions a modern optimizer might make in a language like C
[14:21:50] <ent58> included as visible code
[14:21:57] <ProfSimm> Our computers are made by computers
[14:22:05] <ProfSimm> And our code is made by code
[14:22:05] * epony senses you want Lisp, but you can't get it to compile all the time..
[14:22:08] <ent58> I didn't say anything about having to manually do this
[14:22:17] *** Joins: vysn (~vysn@user/vysn)
[14:22:27] <ent58> you can write an abstraction that measures these things
[14:22:40] <ProfSimm> ent58: well, can you give an example
[14:22:41] <epony> what is in the middle between Assembler and Lisp ;-)
[14:22:46] <ProfSimm> epony: WASM
[14:22:50] <ProfSimm> like literally in the middle
[14:22:57] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[14:23:02] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[14:23:08] <deniska> WAT specifically
[14:23:13] <jokoon> bin packing is on one dimension
[14:23:15] <ent58> So I'll take a specific example that I already put down
[14:23:16] <epony> in the middle of a web browser that is, but not really a good intermediate representation is it?
[14:23:31] <ent58> the difference between add rax, 2 and lea rax, [rax + 2]
[14:23:45] <ent58> the abstraction is addition
[14:23:49] *** Joins: inky_ (~inky@46.36.117.123)
[14:23:54] *** Joins: _inky (~inky_@46.36.117.123)
[14:24:02] <ent58> but the way you would "construct" this
[14:24:02] <epony> that's called different address models
[14:24:12] <epony> one is direct the other is offset
[14:24:18] <ent58> well in this case it's not even being used that way
[14:24:21] <ProfSimm> joj: https://blackpawn.com/texts/lightmaps/ here: https://github.com/juj/RectangleBinPack
[14:24:22] <bayaz> Title: Packing Lightmaps 
[14:24:22] <bayaz> Title: GitHub - juj/RectangleBinPack: Source code for performing 2d rectangular bin packing. 
[14:24:32] <epony> "what magnificent abstraction" we discovered address modes in assembler
[14:24:50] <ent58> ProfSimm is asking for a specific example
[14:24:57] *** Quits: password (~password8@user/password2) (Read error: Connection reset by peer)
[14:25:17] <ProfSimm> jokoon: https://blackpawn.com/texts/lightmaps/ here: https://github.com/juj/RectangleBinPack
[14:25:17] <bayaz> Title: Packing Lightmaps 
[14:25:17] <bayaz> Title: GitHub - juj/RectangleBinPack: Source code for performing 2d rectangular bin packing. 
[14:25:19] <epony> so now our NEW super-master-blaster abstract-scalar basic-choice of complex-data-structure.. is going to be optimised by a whole NEW address mode!
[14:25:29] <epony> with up to 200% more performance from just that ;-)
[14:25:50] <epony> and still you waste a third of that on shuffling pointers
[14:25:53] <ent58> as long as it's compatible and makes the same assumptions about the machine that the prior code did, then yes
[14:25:58] <epony> cause lists are.. pointer abusers
[14:26:22] <jokoon> Seems like doing it manually is simpler
[14:26:27] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:26:41] <epony> we're contenting your CPU like crazy on its weakest part (the stack pointers are disparately small compared to the general registers)
[14:27:10] <epony> and then we're GOING TO complain that the CPU design favours C-languages that are the perfect ASM macro-programmers
[14:27:13] <Decker> no stack pointers in wasm :)
[14:27:16] *** Joins: mickey8 (~user@user/mickey)
[14:27:17] *** Quits: Deepfriedice (~Deepfried@159.196.13.158) (Quit: Leaving)
[14:27:37] <epony> simply because we chose to use a data structure that is sub-optimal on YOUR CPUs which are hurting OUR PROGRAMMING master-level skills
[14:27:50] <ProfSimm> ent58: I didn't understand why we're discussing add vs lea
[14:27:58] <ent58> Yeah I didn't quite get to it
[14:27:58] * epony breaks truce and pokes Lisp in the eye with a toothpick
[14:27:59] <ent58> here goes
[14:28:23] <epony> now we have two defects, one pronunciation and one with vision ;-)
[14:28:28] <ent58> So you have an addition abstraction, and the point is...no matter how you specify this in the language
[14:28:41] <epony> yeah, it gets compiled away
[14:28:46] <ent58> you have "add" as an option
[14:29:08] <ProfSimm> ent58: I feel like you don't trust a compiler to use lea when it can.
[14:29:13] <ent58> and "lea" as an option, and how to use them in this context (memory/register/fpu/you name it)
[14:29:17] <epony> but you forSe yourthelf to depend on compilers that do your job in a particular way, to sell those "brand" of compilers over the others
[14:29:49] <ent58> and then
[14:29:49] <epony> hoping that the sales will be so fine, that you'll be able to fund bilding the ternary CPU of your dreams
[14:30:03] <epony> with one minor ommission ;-)
[14:30:17] <ent58> you have subprograms that can perform a unit test on these operations
[14:30:19] <nomagno> ProfSimm: Code the HWVM Way TM. No registers, everything memory mapped
[14:30:25] <ent58> and determine which one is better to use when
[14:30:35] <epony> it can't scale, and the economy of scale sold 100 billion other chips that are not ternary
[14:30:37] <nomagno> Err, epony ^
[14:30:47] <epony> erhm yes ;-)
[14:31:05] <ent58> you can define what "register pressure" is
[14:31:05] <ProfSimm> ent58: I still don't understand what the final purpose is
[14:31:06] <epony> so what's up with those lists now.. ;-)
[14:31:19] <ProfSimm> ent58: is it faster code or what?
[14:31:48] <epony> "I'm going to put my instructions in a stack" despite the CPU having all those registers sitting idle
[14:31:48] <absentia> what's the purpose of an endofunctor
[14:31:49] <ent58> taking the guts of an optimizer out of a compiler and into the hands of the programmer, so that faster code and complete control can be had no matter the architecture
[14:32:14] <nomagno> ProfSimm: some implementations of an instruction set might have a faster add instruction with registers, or have incr-2000times be faster
[14:32:16] <epony> cause "I say" it must BE lists
[14:32:21] <ProfSimm> ent58: why do you think the programmer is more qualified to optimize low-level code than the programmers who do this all day exclusively?
[14:32:32] <ent58> the programmer might not be
[14:32:37] <nomagno> You... Run timers on multiple different implementations of subroutines to figure that out I guess?
[14:32:38] <nomagno> Sounds weird
[14:32:39] <ent58> but the programmer can write code that finds out
[14:32:53] <epony> what do you CPU designers know, following the feature requests of people doing computing for computation, we want computers for abstraction and expressiveness
[14:32:57] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:32:59] <ProfSimm> ent58: ok but that's literally what compiler engineers do all day
[14:33:05] <ent58> right
[14:33:16] <epony> fine.. get that TPU and enjoy it while it lasts (limited stock, very fast 8bit CPU for you)
[14:33:25] <nomagno> ent58: and it will probably be a massive waste of resources... See machine learning. At least that gives more results than bruteforfe though
[14:33:27] <ent58> I'm not obsoleting them, but they could now write the expression of their knowledge into code that comes with your compiler
[14:33:29] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:33:45] <epony> you can live discarding its other 6 registers, while using only 2 of them all ;-)
[14:33:54] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[14:33:57] <epony> it's very fast, so you won't notice
[14:33:59] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[14:34:11] <ProfSimm> ent58: and it's a lot more complicated than running per-instruction test. CPUs bin instructions together, translate them, paralellize them, linearize them, it's a nightmare. You can't just make a unit test comparing add with lea
[14:34:18] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[14:34:23] <ent58> And all of that can be specified
[14:34:33] <ent58> the concept of caching, binning, hyperthreading
[14:34:34] <ent58> ALL of it
[14:34:38] <ent58> can be specified
[14:34:46] <ProfSimm> ent58: it is specified in the code of the compiler. What would you do with it?
[14:35:00] <epony> but then suddently "NEED" funding for dual Xeon workstation to do my SIMULATIONS of ternary processors on binary ones that run emulation and into a virtual machine my own list processor.
[14:35:08] * epony defunds ternary computers
[14:35:12] <ent58> you get back the optimization of a modern C compiler without the limitations of programming to an abstract machine
[14:35:19] <nomagno> epony: register pressure maked cracks on PC case
[14:35:19] <ent58> you eliminate an entire class of headaches
[14:35:22] <epony> big optimisation ;-)
[14:35:22] <ent58> and have more control
[14:35:27] <nomagno> s/maked/makes/
[14:35:29] <ProfSimm> ent58: control to do what
[14:35:33] <epony> no more third register
[14:35:45] <epony> no more third bit
[14:35:56] <ProfSimm> ent58: my question is simple. The compiler already does its best to make the fastest code for you. Where is it failing, and how you plan to surpass it?
[14:35:59] *** Parts: KillerWasp (~KillerWas@user/killerwasp) (YOU KIDDING ME?? YOU KIDDING MEEE???? (PC drinking beer) *kernel panic!*)
[14:36:06] <epony> yes more performance, yes many registers, yes stack pressure
[14:36:15] <ent58> So my primary goal was sidetracked about the discussion of a modular compiler
[14:36:18] *** Lord_of_Life_ is now known as Lord_of_Life
[14:36:23] <epony> no more lists in assembler ;-)
[14:36:25] <ent58> here's the bottom line
[14:36:41] *** Joins: password (~password8@user/password2)
[14:36:51] <ent58> C cannot do what I want: I cannot, in a way that behaves on implementations that would allow it, re-write code in a systematic way at runtime
[14:37:07] <ent58> in the specific way I want it done
[14:37:16] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[14:37:30] <epony> yes you want to do things that the macro-processor tells you to do on your own, write your own macros
[14:37:48] <ProfSimm> ent58: C can't rewrite code at runtime, but it's unclear why you want to rewrite code at runtime
[14:37:54] <epony> the CPU works this way, the instructions are here, you want a third bit still ;-)
[14:37:56] <nomagno> ent58: self-modifying code is only really achievable in extremely platforms-specific ways
[14:37:58] <ent58> optimization
[14:38:03] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Ping timeout: 256 seconds)
[14:38:04] <ProfSimm> ent58: it's already optimized
[14:38:12] <ent58> it's not super-optimized
[14:38:20] <rindolf> absentia: also https://twitter.com/shlomif/status/1492578702433136643
[14:38:22] *** Joins: berkhan (~berkhan@159.146.41.59)
[14:38:27] <ProfSimm> ent58: what's an example of an optimization it doesn't do
[14:38:50] <epony> one such is reproducible compilations
[14:38:55] <epony> it can't do it
[14:39:07] <epony> cause it gets into metastability of compilation
[14:39:08] <ent58> it cannot dynamically change a function at runtime to customize, at the instruction level, some aspect of it that would process something faster
[14:39:15] <ent58> a good example might be
[14:39:21] <ent58> dynamic unrolling
[14:39:29] <ent58> where you don't need to use a loop to do something
[14:39:29] <ProfSimm> ent58: JIT does that. 
[14:39:41] <epony> this little register overflowed and that little stackie got saturated ;-)
[14:39:46] <ent58> Yes, can the programmer specify it from code that doesn't already exist?
[14:39:47] <bjs> ent58: C has no way to do that because it tries to be platform independent,  if you know the platform you're on you can do it.  Linux does it for example
[14:39:54] <bjs> but it's certainly outside the usual scope of "C"
[14:40:01] <epony> no more macros for you, you can't program real CPUs
[14:40:06] <ent58> Right...that's why I want it IN C
[14:40:11] <ent58> or
[14:40:13] <ProfSimm> ent58: so you want C with JIT
[14:40:15] <ent58> my own language that does it
[14:40:16] <epony> you're not getting it ;-)
[14:40:16] <ent58> no
[14:40:23] <ProfSimm> ent58: why not
[14:40:26] <epony> you have to use C++
[14:40:40] <ent58> because JIT doesn't cover all of the use cases that supercede simple types of self-modification
[14:40:43] <ent58> for example
[14:41:03] <nomagno> To self-modify C code to C code at runtime you need a C interpreter/compiler embedded in your program
[14:41:15] <epony> yeah, self modify does not work
[14:41:15] <nomagno> So you can replace the machine code in proper places
[14:41:16] <ent58> right, and that's completely understandable
[14:41:36] <ent58> the best example I can think of
[14:41:40] <epony> you lie and pretend it is not a lie, it is just passing exection to a new copy of a changed program
[14:41:44] <epony> you can't self modify
[14:42:06] *** Quits: jokoon (~eio@2a01:e0a:542:e160:110a:c5de:8b6f:346f) (Quit: Leaving)
[14:42:10] <ent58> well, writing instruction bytes in memory from the same program would qualify
[14:42:16] <epony> you modify a clone that you run after now, so you do the complete and most significant mistake, you run data instead of instructions
[14:42:17] <ent58> but if that doesn't qualify
[14:42:21] <ent58> then nothing self modifies
[14:42:29] <epony> and you expect the CPU caches are the same thing and you can interchange them
[14:42:41] <epony> but it's not like that
[14:42:51] <bjs> ent58: CPU architectures really do have "self-modifying" code in some literal sense,  most languages don't.
[14:43:16] <ent58> Right, and why can't I use a native language feature to take advantage of that part of the CPU?
[14:43:24] <epony> that's not how the instructions you use to program it operate
[14:43:40] <epony> that is your own "speculation" without knowing the internal design
[14:43:50] <bjs> ent58: because high level languages want to be relatively platform independent, and the moment you throw optimizations in there exactly how the high-level program relates to the low-level instructions becomes fuzzy
[14:44:05] <epony> by simply experimenting you believe it is "efficient" in some way, while you're running only part of the CPU
[14:44:09] <enyc> epony: hrrm why have you stopped blogging all over freenode channels ooi?
[14:44:11] <ent58> What if you had the ability to be platform independent, and also have this feature?
[14:44:23] <bjs> ent58: how?
[14:44:27] <ent58> simple
[14:44:37] <epony> enyc, what? this is freenode renamed.
[14:44:39] <ent58> on architectures, like Harvard Architectures
[14:44:45] <ent58> that don't have the ability to do ANY of this
[14:44:49] <ent58> the feature isn't available
[14:44:49] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[14:44:57] <nomagno> epony: not true
[14:45:09] <ProfSimm> ent58: if you were serious about this kind of optimization, you're use FPGA. Nothing you do in JIT can change drastically your performance
[14:45:10] <epony> the CPU really does not operate like you believe
[14:45:10] <enyc> epony: well continuation of classic-freenode but different structure
[14:45:28] <epony> nomagno, it is true, you use a data structure that needs a different CPU
[14:45:35] <ent58> FPGAs run at a fraction of the speed of normal CPUs
[14:45:44] <ent58> but yes
[14:45:47] <ent58> that would be the endgame
[14:45:47] <bjs> enyc: I'm not sure your point;  modern CPUs aren't harvard architectures but if there were then you certainly can't do this
[14:45:51] <bjs> oops
[14:45:54] <bjs> ent58: ^ sorry
[14:45:55] <nomagno> epony was response to freenode renamed
[14:45:58] <epony> nomagno, and you expect that you can get away with it on real CPUs whining around that the CPU is flawed, while you can't really program CPUs that exist
[14:46:04] <ProfSimm> ent58: no they don't run at a fraction of the speed of modern CPUs. 
[14:46:14] <epony> nomagno, that topic does not exist ;-) like ternary processors
[14:46:22] <epony> we're in a binary CPU land
[14:46:23] <ent58> bjs..I was responding to someone that was talking about interoperability and platform-neutral code
[14:46:28] <enyc> bjs: von-neumann machines heh
[14:46:29] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[14:46:30] <ProfSimm> ent58: that's the thing, they can outperform a 3GHz CPU by running at 1/10 the clockrate
[14:46:33] <suss> wondering there is any free freenode account that let me try
[14:46:48] <nomagno> There are ternary CPUs tough!
[14:46:55] <enyc> suss: try what?
[14:46:56] <epony> oh REALLY?
[14:47:02] <nomagno> I think the USSR produced a few
[14:47:02] <ProfSimm> ent58: check out the Reduceron
[14:47:07] <nomagno> Used ferrite
[14:47:11] <epony> you think too much ;-)
[14:47:24] <epony> an extra third bit for your thinkatude
[14:47:29] <suss> enyc loggin to freenode
[14:47:49] <bjs> ent58: well, real "self-modifying" code really only happens at the machine level and exactly how/what depends on the architecture. You can take a look at JITs to see roughly how a program manages this,  but typically you can't do modification at arbitrary points
[14:47:49] <epony> "expressive" enough for you now? ;-)
[14:47:50] *** Joins: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea)
[14:48:01] <nomagno> https://en.m.wikipedia.org/wiki/Setun
[14:48:01] <epony> no such thing as self-modifying
[14:48:02] <bayaz> Title: Setun - Wikipedia 
[14:48:03] <enyc> suss: generall yyou d'net need a login, leenode now allows most in
[14:48:11] <ent58> ProfSimm so it could just be I'm out of date here, but if FPGAs can compete with modern CPUs on speed, then why not mass adopt them?
[14:48:27] <enyc> bjs: the L1-cache breaks this too i suspect ???
[14:48:31] <bjs> ent58: one solution JITs often take is to swap out whole new optimized functions
[14:48:33] <bjs> enyc: no
[14:48:33] <enyc> instruction ahead etc
[14:48:42] <enyc> bjs: ok then instructien queue ;p
[14:48:48] <ent58> bjs: the point of what I was talking about is to design a language that does not have those constraints
[14:48:49] <suss> enyc is there any bridged things for leenode here? 
[14:48:57] <nomagno> epony: take a look at that
[14:48:58] <bjs> enyc: no, I mean it means you can't do it "naively" but you can still do it and you just have to do what the architecture tells you to do 
[14:49:00] <ent58> and an in fact modify things at either arbitrary or well-defined points
[14:49:06] <ent58> can*
[14:49:08] <bjs> ent58: yes and that was why I asked "how"
[14:49:11] <epony> there are a whole series of flawed "beliefs" you call philosophy typically, which are wishful thinking really, about computing and how it "believes it works" but that's not really how it is working
[14:49:13] <ent58> So
[14:49:27] <ent58> it gets into a lot of specifics but I'll try to generalize
[14:49:33] <ProfSimm> ent58: because they're not general purpose
[14:49:34] <bjs> ent58: so something like a JIT handles this by re-compiling whole units (e.g. "functions") and swapping out the call points to point to the new thing
[14:49:44] <bjs> Wasm has a branch table for doing just that inside its JIT
[14:49:51] <ent58> Right, and the unit size doesn't necessarily have to be an entire function
[14:49:56] <ProfSimm> ent58: also energy efficiency
[14:50:05] <JanC> I don't think FPGAs beat CPUs on everything
[14:50:14] <ProfSimm> No, not on everything.
[14:50:18] <ProfSimm> Of course.
[14:50:36] <epony> so (y)"our religion" insists that we program using a ternary data structure, but the CPUs are betraying our beliefs.. and we're forever concerned there might never exist such a CPU that does not honour our religious leadership of data structure choices and abstact expressiveness of macro-programming virtual stack machines
[14:50:37] <enyc> suss: I think, ##proxmox ##videagames ##nerds  still have them, or so
[14:50:52] <enyc> not many left and keep getting junk messages
[14:51:02] <ent58> self modifying code can be more energy efficient just by brute force...you can reduce the amount of operations performed
[14:51:05] <enyc> apparently proxmox have a problem with outdated blogpost they can't get updated which refers to wrong channel
[14:51:11] <ent58> it's not much
[14:51:25] <JanC> there are CPU/FPGA combined packages though, so it should be possible to offload some stuff to the FPGA that CPUs are bad at  :)
[14:51:29] <epony> technically, there exists a #lisp channel, so you might try your CPU design skills there
[14:51:40] <enyc> ProfSimm: nor GPUs for that matter heh
[14:51:48] <epony> but when it comes to programming, you better learn how CPUs really work ;-)
[14:51:48] <ProfSimm> ent58: the idea with FPGA is you spend the time to make software fit your hardware perfectly and you have highly customizable hardware. This is basically what you want, it seems. The problem is it takes inordinate amount of time/effort to do so, and you then have basically a single-purpose CPU. 
[14:52:05] <bjs> ent58: the main problem comes when you have code between 0x1000->0x1100 and you want to replace code between 0x1010-0x1020,  you only have 0x10 bytes to play with and if your new re-written code doesn't fit exactly into that space you need some hefty surgery on your program. Typically self-modifying code at runtime is very slow, as it screws with all the modern CPUs fancy instruction prefetching and caching and speculating
[14:52:09] <epony> yeah, you will be pushed to grab the FPGA
[14:52:34] <epony> and you will discover their efficiency and performane is YET AGAIN different to what you presume and assume
[14:52:35] <ProfSimm> I think our hardware is insanely fast already
[14:52:37] <ent58> Yes, and you can calculate (if specified statically) how much slack space you will need, exactly, and where
[14:52:41] <ProfSimm> The problem is all the crap we run on it
[14:52:42] <ent58> or
[14:52:46] <ent58> if it's entirely worth it
[14:52:49] <epony> cause, you'll make the same mistake insisting that there is a 3 dimensional lattice
[14:52:57] <ProfSimm> We don't need to optimize code, we need a lot less code
[14:53:32] <ent58> this is how you get less code
[14:53:33] <epony> and you'll be usign 3 instead of 2 cells, and run into constant shifting contention believing you're commutating your CPU threads better while you're burning heat on switching
[14:54:01] *** Joins: MaboxUser (~ilhanv@122.166.135.231)
[14:54:08] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:54:12] <bjs> ent58: well this is what makes it not platform independent, in that how much space things takes can't be determined statically because each platform is different. Platforms don't have the same instructions, their instructions don't take the same amount of space, etc.  If you decide that each high-level expression in your language corresponds to a fixed chunk of instruction memory and then you'll find it really hard to do optimizations on this program
[14:54:19] <epony> and really getting a 33-66% penalty with just a single trivial mistake (for the empowerment of all ternary expressiveness belief systems)
[14:54:21] <bjs> I mean like, the standard optimizations that something like C does.
[14:54:39] <ProfSimm> Also in few decades CPUs will be 90% neural networks so yeah
[14:54:41] <ent58> right, but the idea is that all of this information would be bottom-up
[14:55:04] <ent58> you're not looking at abstract computer operations and then applying the real world on top of them
[14:55:05] * enyc ROARs
[14:55:09] <epony> you know we used to be friendes, you the abstraction programmer and we the real machines programmer
[14:55:12] <nomagno> Modern CPUs are monsters.
[14:55:17] <ent58> the operations have real world assumptions and mappings built into them from the bottom
[14:55:20] <MaboxUser> jii
[14:55:24] <MaboxUser> hii
[14:55:28] <nomagno> I'm sorry but I want to switch to plain RISC-V ASAP
[14:55:32] <JanC> the OS can also disallow self-modifying code on modern CPUs...
[14:55:32] <epony> what made you believe there is a third bit in the middle that shifts shape?
[14:55:46] <enyc> nomagno: hrrm how is RISC-V going now?
[14:55:47] <bjs> ent58: if you want it to be platform-independent you can't really start with the real-world assumptions because those assumptions are different for each platform.
[14:56:07] <Decker> JanC that's pretty flimsy :) where there's a will there's a remap memory to another address you CAN write to
[14:56:13] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[14:56:16] <ent58> there is a common subset of behavior amongst all things that compute
[14:56:35] *** Quits: MaboxUser (~ilhanv@122.166.135.231) (Client Quit)
[14:56:36] <ProfSimm> ent58: what is it
[14:56:40] <absentia> nomagno: are you a collapseOSnik?
[14:56:55] <ent58> I realize that sounds like exactly what "abstract machine" is, but it's more like a reductionist machine
[14:57:13] <ent58> picking a small operation: copying memory
[14:57:14] <epony> "the gold finger" of computing, the third bit in your binary processors, the ultimate expressiveness and paint colour, we're fashion, we're steam, we're superb and we're the future, only we have to design a couple of CPUs like we did in the 80ies, but nobody wanted to buy them from us because they were expensive and the binary ones ran faster our own ternary data is instructions is data spaghetti mess
[14:57:17] <ent58> how is it done
[14:57:21] <absentia> i wonder what happens if humanity falls from its current level of technological achievement
[14:57:22] <epony> it's not ;_)
[14:57:26] <nomagno> enyc: pretty good, they have a lot of support, there's reasonably-priced CPUs now, a few failed attempts at a fully free/open microcomputer, a lot of different interoperable specs and extensions (mostly 32 bits, 64 bits, float, privileged instruction set, unprivileged instruction set)
[14:57:32] <bjs> ent58: and if you want to add threading or concurrency this idea seems even less possible to me
[14:57:44] <absentia> supply chains collapse, euv infrastructure falls apart, expertise in compeng and chip foundries drains away
[14:57:51] <nomagno> We're getting there, there are a lot of schematics for boards that don't have any patented/proprietary components
[14:57:53] <absentia> suddenly we can't manufacture new x64 or arm chips
[14:58:03] <nomagno> BeagleV went into production shortly
[14:58:05] <ent58> well I'm not really beating anything there, C++ doesn't add threading or concurrency so much as it carefully bolts it on
[14:58:08] *** Joins: independent56 (~independe@2.26.38.138)
[14:58:11] <nomagno> Future looking bright
[14:58:12] <epony> https://en.wikipedia.org/wiki/Lisp_machines#End_of_the_Lisp_machines
[14:58:13] <bayaz> Title: Lisp machine - Wikipedia 
[14:58:18] <ent58> it may be that the approach of trying to hide concurrency is the inferior one
[14:58:26] <absentia> i think the fellows behind collapseOS have the right of it
[14:58:29] <absentia> as sad as i am to say
[14:58:35] <epony> "With the onset of the AI winter and the early beginnings of the microcomputer revolution, which would sweep away the minicomputer and workstation makers, cheaper desktop PCs soon could run Lisp programs even faster than Lisp machines, with no use of special purpose hardware. Their high profit margin hardware business eliminated, most Lisp machine makers had gone out of business by the early 90s"
[14:58:45] <absentia> good point
[14:58:52] <absentia> this will be the new era
[14:58:56] <absentia> of quantum blockchain computation
[14:58:58] <absentia> in the hypercloud
[14:59:07] <absentia> or is it the metacloud
[14:59:21] <absentia> should i start IP squatting on ortho- and para-?
[14:59:21] <epony> and that's how the extra bit that was added by confusion removed itself from the equasion, by not being able to reproduce *hybridisation* mistake
[14:59:21] <pikapika> absentia, I like how one can also brute force geometric problems with analytic techniques if all else fails
[14:59:23] <bjs> ent58: I am intrigued by your ideas, but I'm still unconvinced :P
[14:59:47] <absentia> brute force with analytic techniques?
[14:59:57] <epony> yeah, the blogshade is a ternary model of computing
[15:00:03] <pikapika> absentia, yes
[15:00:05] <epony> it wastes a lot of power for nothing ;-)
[15:00:08] <absentia> that sounds like an oxymoron
[15:00:22] <absentia> but i am no geometer
[15:00:23] <ProfSimm> ent58: computing systems are a lot more varied though. As again FPGA shows
[15:00:35] <ProfSimm> ent58: there's no common theme really
[15:00:37] <pikapika> Just assume a coordinate system centered at a convenient point, build some vectors and brute force with expresions of x,y,z
[15:00:40] <ent58> an FPGA is the ultimate playground/expression for what I want
[15:00:49] <ent58> imagine a program that writes itself to hardware
[15:00:49] <ProfSimm> ent58: and when there is, compilers address it already. 
[15:00:51] <absentia> pikapika: are we in a real-valued space?
[15:00:57] <epony> lists are not a really efficient data structures, the CPUs do not use it internally, they use binary bits and organise around separation of data and instructions
[15:01:02] <pikapika> absentia, synthetic techniques can be more elegant for many problems
[15:01:06] <absentia> because there'd be uncountably infinitely many such vectors
[15:01:10] <pikapika> But if you are unable to find a synthetic proof
[15:01:13] <ProfSimm> ent58: well we don't need to imagine it, we just use fpga ;-)
[15:01:14] <epony> that's why you have separate execution and data registers
[15:01:18] <pikapika> We can just brute force with analytical expressions
[15:01:23] <bjs> ent58: I mean normal programs are like that too,  as for sure the computer you are using right now is a von Neumann machine.
[15:01:24] <epony> and separate instruction and data cache lines
[15:01:31] <pikapika> absentia, the vector is parameterized
[15:01:32] <absentia> pikapika: what is this in response to
[15:01:34] <bjs> ent58: also writing to an FPGA is slow
[15:01:39] <absentia> quantum?
[15:01:39] <ProfSimm> ent58: however neural networks are so general purpose, it might be the new fpga sort of
[15:01:43] <absentia> because i was buzzwording
[15:01:45] <epony> and separate CPU structures for logic and preprocesing and exeuction and addition
[15:01:48] <pikapika> absentia, nothing. Just something that occured to me while trying to solve something related to spherical geometry.
[15:01:57] <absentia> fascinating
[15:02:00] <bjs> idk whether that's inherent in it,  or just that those that make FPGAs just haven't invested in doing it faster
[15:02:01] <ent58> bjs: lol. in the case of an FPGA, I'm talking about having ASIC level speed in computation
[15:02:04] <absentia> i still don't understand
[15:02:06] <nomagno> Neural networks are like FPGAs
[15:02:11] <absentia> vector parameterized over (t) say?
[15:02:19] <pikapika> absentia, "synthetic" is euclidean style proofs
[15:02:19] <absentia> v(t) = < x(t), y(t), z(t) >
[15:02:22] <epony> it's not passing via one single peephole of single execution and it does not have a third bit, and it does not work with lists internally
[15:02:25] <ent58> this is ENTIRELY based on what ProfSimm is talking about with the increased speed of FPGAs
[15:02:25] <nomagno> You aren't gonna get native performance by throwing general-purpose abstractions
[15:02:29] <epony> questions? ;-)
[15:02:40] <pikapika> "analytic" is making use of the fact a circle is x^2+y^2=r^2 or x=Rcost , y=Rsint
[15:02:42] *** Joins: yaram (~nikola@178-221-249-82.dynamic.isp.telekom.rs)
[15:02:45] <absentia> pikapika: yes
[15:02:46] <ent58> Last I checked FPGAs were nowhere near normal CPUs in raw computation speed
[15:02:49] <absentia> compass straightedge
[15:02:52] <ent58> clock rates in the sub ghz
[15:02:54] <absentia> vs. more or less formal language
[15:03:02] <pikapika> It is not a matter of formality
[15:03:11] <pikapika> Synthetic proofs are sufficiently formal for this problem
[15:03:11] <absentia> the use of algebraic expressions
[15:03:13] <nomagno> ent58: correct, but that's also because modern CPUs are bonkers overengineered
[15:03:21] <pikapika> Its just that while a synthetic proof can be quite efficient and elegant
[15:03:23] <absentia> pikapika: i think the language part is important
[15:03:25] <pikapika> it can be very hard to find
[15:03:27] <bjs> ent58: well FPGAs aren't quite as fast as normal CPUs but my point wasn't about the speed of the FPGA in running the program but in programming the FPGA
[15:03:30] <bjs> for your self-modifying things
[15:03:31] <ProfSimm> ent58: clockrate is irrelevant
[15:03:33] <absentia> the formality part of my statement is necessary but not sufficient
[15:03:36] <pikapika> but you can just pose the problem analytically
[15:03:36] <absentia> formal language
[15:03:43] *** Quits: yaram (~nikola@178-221-249-82.dynamic.isp.telekom.rs) (Client Quit)
[15:03:46] <pikapika> and just keep bashing and bashing at it regardless of how many pages it takes
[15:03:49] <absentia> not just formal and not just language but formal language
[15:04:02] <ProfSimm> ent58: the brain has cockrate of about 40-80 Hz
[15:04:08] <absentia> pikapika: you mean like mini-kanren or something?
[15:04:09] <ProfSimm> clockrate*
[15:04:13] <ent58> ProfSimm it is still relevant when your pipeline is completely full...at some stage, you can measure at what rate computations occur
[15:04:13] <pikapika> absentia, it has nothing to do with formal languages. In fact synthetic proofs were considered a gold standard of proofs for centuries
[15:04:19] <ent58> it's not a "clock" rate, so yes...not that
[15:04:22] <absentia> pikapika: yes i know this, see elements
[15:04:31] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:04:33] <nomagno> ProfSimm: sounds to me like the conscious part, rather :)
[15:04:36] <absentia> all i was saying is that your characterization of my statement as being merely about formality is not correct
[15:04:48] <pikapika> It has nothing to do with kanren
[15:04:49] <absentia> my statement was about analytic proofs often being expressed in formal _languages_
[15:05:01] <pikapika> It is just a simple fact that you can pose a synthetic geometry problem in terms of analytic expressions
[15:05:02] <absentia> compass/straightedge constructions not being what i would consider a language
[15:05:08] <absentia> pikapika: yes
[15:05:11] <pikapika> And you can generally "always" solve the latter kind of problem
[15:05:15] <absentia> ultimately you have algebraic geometry
[15:05:16] <pikapika> Just that it could be very time consuming
[15:05:23] <ProfSimm> nomagno: the trick is that the brain has a recursive clockrate
[15:05:24] <absentia> where the two find some sort of correspondence
[15:05:26] <pikapika> I don't know algebraic geometry
[15:05:28] <absentia> isomorphism?
[15:05:32] <absentia> neither do i
[15:05:37] <bjs> ent58: it's hard to measure speeds directly between FPGAs and CPUs as they won't be executing the same program, you can be far more efficient with programming the FPGA to do what you want but it probasbly won't be as fast doing it on a CPU and it won't get near ASIC levels.  But the real problem for your language is the self-modifying part
[15:05:42] <bjs> re-programming modern FPGAs is not a fast operation
[15:06:32] <absentia> hm surprised to not see euclid mentioned in the history section of the wiki for algebraic geometry
[15:06:52] <ent58> right.. FPGAs entered the discussion later, I'm talking about self modification (I'm calling it native re-writing because the conventional idea of self modification is terrible for performance)
[15:06:55] <bjs> ent58: You can sort of re-program parts of the FPGA (I've never done that, but I hear it can be done?) while others still run but then you're basically in the same position of having fixed-size chunks you can replace in/out.
[15:07:02] <ent58> on regular CPUs
[15:07:18] <ent58> using a language designed to allow you to do it in a structured fashion
[15:07:18] <nomagno> Isn't an ASIC a programmed burned onto a piece of silicon?
[15:07:30] <nomagno> Not very selfmodifiable :)
[15:08:02] <ent58> every single possible cost can be mitigated
[15:08:17] <ent58> you can hide the latency of the cache invalidate
[15:08:18] <pikapika> absentia, algebraic geometry is very modern
[15:08:25] <absentia> pikapika: how do you brute-force through an uncountably infinite set
[15:08:27] <ProfSimm> ent58: I think the bigger realization is that code doesn't have to be faster, so why focus on optimizing it.
[15:08:32] <absentia> or is this why you are bringing in analysis
[15:08:37] <pikapika> I don't think there's be any point to tracing its history to eublic
[15:08:44] <absentia> forget this tangent
[15:08:48] <ProfSimm> ent58: we've achieved sufficient speed like a decade ago
[15:08:50] <pikapika> absentia, the same way you'd solve it synthetically?
[15:08:51] <bjs> nomagno: there's a spectrum, from what are essentially "hard-wired FPGAs" to what we should really just call microprocessors
[15:08:51] <ProfSimm> Maybe more
[15:08:59] <pikapika> You know the parameters of the line or circle or triangle
[15:09:07] <absentia> so just sit and fiddle around with some ink and paper?
[15:09:11] <absentia> i suppose
[15:09:13] <ent58> "have to" is a point killer...sure, we don't have to improve the state of software at all and write everything in node.js and live happily in a browser too
[15:09:28] <absentia> i mean i could say the same about chess
[15:09:35] <absentia> just brute force your way to grand master
[15:09:45] <nomagno> No one used nodejs these days, HWVM Assembly is where it's at
[15:09:45] <absentia> the problem is about efficient search
[15:09:48] <ent58> incremental improvement is not a reason to stop
[15:09:48] <absentia> not finding the optimum
[15:10:01] <nomagno> I'm like 500 years away from being sponsored by John Carmack!
[15:10:11] <absentia> yeah exactly
[15:10:30] <pikapika> absentia, for example let us say your problem involved the circumcenter of a triangle
[15:10:39] <absentia> center of an inscribed circle?
[15:10:42] <absentia> i'm not really a geometer
[15:10:50] <pikapika> You just compute the equations of the three bisectors of the triangles sides
[15:10:55] <pikapika> And solve the 3 equations
[15:10:57] <absentia> ok
[15:11:04] <absentia> and there is exactly one solution
[15:11:06] <absentia> ?
[15:11:13] <pikapika> It is exactly equivalent to the synthetic approach
[15:11:20] <pikapika> just that you are making it easy using coordinates
[15:11:24] <pikapika> Yes
[15:11:25] <ent58> I'll have to duck out soon but fleshing these ideas out is nice
[15:11:35] <bjs> ent58: anyway, I'm interested in this language you have but I still don't see how to overcome the problem with how platform-dependent the instruction sets are
[15:11:44] <pikapika> Or even the fact there is one solution, infinite solutions or no solutions can be deduced from the form of the equations analytically
[15:11:50] <pikapika> It is exactly equivalent to the synthetic approach
[15:11:50] <pyzozord> When was the last time i said I like you guys? Keep being awesome.
[15:11:56] <pyzozord> and smart
[15:11:56] <pikapika> except that you can often brute force through problems
[15:12:02] <pikapika> instead of having to scratch your head all day
[15:12:22] <absentia> pikapika: i've certainly gotten lost in a maze of formality trying to do things analytically though
[15:12:27] <bjs> ent58: I think you'll need to give up modification at arbitrary points and instead only replace whole functions and/or fixed-size basic-blocks and also add a restriction that no thread may modify another thread's code.
[15:12:28] *** Joins: wize1 (~wize1@2601:348:8000:21e0:9d35:f153:ff02:7904)
[15:12:30] <pikapika> Where's the formality?
[15:12:39] <pikapika> Its nothing more or less formal than the synthetic approach
[15:12:41] <absentia> well here's an example
[15:12:45] <pikapika> Just a different viewpoint
[15:12:49] <absentia> prove the cauchy-schwarz inequality from the field axioms
[15:12:54] <absentia> analytically or geometrically
[15:12:57] <absentia> it's a fucking doozy
[15:13:03] <absentia> at least for my smol brain
[15:13:08] <ent58> bjs: LLVM bitcode, except bottom up
[15:13:10] * epony advertises binary model of computation again, left and right ;-)
[15:13:12] <pikapika> The triangle rule isn't a synthetic geometry problem
[15:13:15] <pikapika> in its general form
[15:13:15] <wize1> Hello
[15:13:20] <epony> the IR machines are your realm
[15:13:25] <absentia> what is the difference between synthetic and non-synthetic
[15:13:30] <epony> the R machines are mine ;-)
[15:13:32] <pikapika> So its natural you might need different techniques
[15:13:42] <pikapika> Synthetic is basically euclidean styled proofs
[15:13:54] <ent58> Â bjs: of course, "arbitrary" doesn't mean you can just start ripping out code at random
[15:14:02] <wize1> I was trying to install php my admin to my php server, but it is saying I need a mysqli extension. I thought I downloaded and installed it but it didn't work I guess.
[15:14:14] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:14:16] <absentia> what's non-synthetic geometry
[15:14:18] <absentia> anything non-euclidean?
[15:14:33] <pikapika> even so
[15:14:33] <ent58> I do have an idea for that which involves analyzing the assembly as a disassembler might and finding out where the true inputs/outputs are
[15:14:36] <pikapika> absentia, no
[15:14:40] <ent58> but
[15:14:43] <ent58> that's not part of it
[15:14:48] * absentia is learning new terminology
[15:14:51] <pikapika> Using descartes construction one gets into analytic technique
[15:15:01] <pikapika> Algebraic geometry is a different topic
[15:15:10] <pikapika> It seems it deals with algebraic surfaces and their zeros and poles
[15:15:39] <absentia> cartesian coordinates
[15:15:46] <absentia> ordered pairs from RxR
[15:15:48] <absentia> you mean
[15:15:50] <pikapika> anyhow, a proof for the triangle rule for 3 values is still not hard using the cosine addition rule
[15:15:58] <absentia> pikapika: from the field axioms
[15:16:14] <pikapika> Does a metric always emerge from a field?
[15:16:17] <pikapika> I don't think thats true
[15:16:25] <absentia> mmmm
[15:17:04] <absentia> there might be some additional constraints imposed?
[15:17:06] <absentia> one sec
[15:17:41] <absentia> ok well forget for any field
[15:17:52] <absentia> prove cauchy-schwarz from the axioms for R
[15:18:02] <absentia> associativity/commutativity of (+)/(*)
[15:18:05] <absentia> distributive law
[15:18:17] <ProfSimm> ent58: I have a theory. We should start gradually DECREASING the speed and memory amount we have on computers for a few decades and you'll notice performance won't change overall. So imagine in 2050, the average computer has 1GB RAM and runs at 1/20 the speed of a current CPU. Software same as today. And then we remove the limits
[15:18:19] <absentia> existence of identities and inverses for (+)/(*)
[15:18:23] <absentia> trichotomy
[15:18:44] <pikapika> A field's definition already involves distrbution of + over *
[15:18:44] <ent58> right
[15:18:47] <ent58> superoptimization
[15:18:50] <ent58> is how you get there
[15:18:51] <absentia> i tried to do this analytically
[15:18:53] <pikapika> and the existence of inverses of both addition and mulitplication
[15:19:00] <pikapika> and both groups are abelian
[15:19:00] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[15:19:02] <absentia> and brute forcing it i just got lost
[15:19:08] <absentia> no idea if i'm searching the right subtree or not
[15:19:11] <pikapika> But thats a lower level problem
[15:19:21] <absentia> pikapika: yes abstract algebra is too big brain for me
[15:19:23] <pikapika> Synthetic/analytic geometry already assumes the existence of the space and the metric
[15:19:25] <absentia> though i would like to learn
[15:19:29] <absentia> then i can stop handwaving about haskell
[15:19:36] <ProfSimm> We need oscillation. Computers get faster computers get slower, can't explain that!
[15:19:45] <pikapika> Learn digital signal processing and some electrical engineering
[15:19:52] <pikapika> That is much more useful to computer programming than any haskell bs
[15:19:58] <absentia> pikapika: you're right
[15:20:12] <wize1> Computers might not even be made of metal in the future. We might have organic computer components grown in a lab. In other words, bionic computer parts
[15:20:19] <absentia> pikapika: what's a good text or resource for DSP
[15:20:35] <wize1> They are already growing brains in bowls and having them play pong.
[15:20:39] <pikapika> Any acclaimed textbook should do
[15:20:46] <absentia> what are prereqs
[15:20:48] <GeDaMo> http://www.dspguide.com/pdfbook.htm
[15:20:49] <bayaz> Title: The Scientist and Engineer's Guide to Digital Signal Processing's Table of Content 
[15:20:55] <absentia> the thing is i still feel very shaky about my math
[15:21:04] <absentia> fourier started to really stretch it
[15:21:11] <pikapika> There are no prereqs, high school level knowledge is enough
[15:21:16] <absentia> rly
[15:21:20] <pikapika> Yes
[15:21:29] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[15:21:32] <wize1> A brain can store electricity the same way a battery does. This is why a human being has a life span, as does a battery. So, you can grow organic computer parts and just charge them like you would a computer. This is considered a renewable resource.
[15:21:34] <absentia> > the normal distribution
[15:21:43] <absentia> and then my brain thinks i should understand measure theory first
[15:21:58] <pikapika> There is no need
[15:22:06] <absentia> you're right
[15:22:07] <pikapika> The textbook will have enough definitions of any new topic needed
[15:22:16] <pikapika> Don't get caught in paralysis
[15:22:17] <absentia> i want to grok math
[15:22:20] <absentia> maybe that's actually what it is
[15:22:29] <pikapika> The beauty of applied fields is that you don't generally get caught in webs of paralysis
[15:22:33] <absentia> not as a professional or life skill
[15:22:39] <absentia> but just because
[15:22:43] <pikapika> You can instantly go out and calculate things
[15:22:53] <absentia> i already hack around and apply myself to boring "real world" problems
[15:23:01] <absentia> but they're exactly that
[15:23:03] <absentia> boring
[15:23:11] <pikapika> There is nothing boring about it
[15:23:22] <absentia> ever wait for your CI builds to finish?
[15:23:23] <pikapika> The fourier transform is pure magic
[15:23:38] <absentia> ah i meant in other domains, not in dsp/math
[15:23:42] <absentia> oh i see what you mean
[15:23:46] <absentia> just start mathing things out now
[15:24:01] <pikapika> You won't get any value from learning "category theory" to computer programming
[15:24:16] <absentia> you won't get any value from learning to play music
[15:24:21] <absentia> maybe it'll get you laid
[15:24:24] <absentia> but that's not my point
[15:24:36] <absentia> what's wrong with pursuing things for their own sake
[15:24:51] <absentia> like people who want to grok computers
[15:24:54] <pikapika> I am just warning you beforehand in case you got a wrong idea from functional programmers
[15:24:56] <absentia> what about groking math
[15:25:29] <absentia> pikapika: i've hand-written assembly and done working projects in functional langs
[15:25:35] <ProfSimm> absentia: I haven't learned category theory. But I've learned a lot about programming theory while trying to learn category theory
[15:25:41] <absentia> i'm sort of tired of the nitty gritty of coding
[15:25:45] <absentia> it's a lot of bullshit
[15:25:49] <absentia> and mostly fixing computers
[15:26:07] <absentia> networking is utter hell
[15:26:25] <absentia> i want to retreat into abstract domains
[15:26:29] <absentia> where everything works as expected
[15:26:36] *** Joins: Twipply (~Twipply@user/twipply)
[15:27:00] <wize1> absentia I couldn't have said it better myself.
[15:27:10] <absentia> sorry i had a red bull
[15:27:16] <absentia> i'm supposed to be doing something else with this energy
[15:27:19] * absentia implodes
[15:27:22] <ProfSimm> absentia: computers are our most abstract reality yet
[15:27:41] <vysn> how can we visualize the difference between bitwise and logical operators?
[15:27:55] <pikapika> absentia, then I doubt you'd get any meaning from doing FP
[15:28:00] <wize1> absentia, actually, you need stimulants in order to be able to even keep up with work load and motivate yourself as we get older. This is the purpose behind tea a long time ago. Older people's minds stop working as well and they need a boost.
[15:28:06] <ProfSimm> vysn: bitwise is same as logical, it just is the SIMD version
[15:28:06] <absentia> pikapika: i've already done my fair share of FP
[15:28:10] <wize1> It's similar also to how roofers and laborers use cocaine and pills.
[15:28:17] <absentia> i studied lisp in school
[15:28:26] <pikapika> absentia, yes and what did it give you? It was intellectually interesting but otherwise nothing
[15:28:27] <absentia> self-studied haskell up until the point where my brain melted from the level of abstraction
[15:28:28] <wize1> I have had 35 jobs in my life time, and I am getting tired. I'm only 31 but I feel about 50.
[15:28:38] <absentia> pikapika: why do people get absolutely shitfaced at the bar
[15:28:46] <absentia> they are in fact killing brain cells
[15:28:53] <absentia> for its own enjoyment
[15:28:57] <pikapika> Its an entertainment, sometimes an escape
[15:29:03] <absentia> yes
[15:29:25] <absentia> wize1: it's been said that caffeine catalyzed the enlightenment
[15:29:32] <wize1> Alcohol and tobacco slowly deteriorate your cells and your strength. I am ok with tea, coffee, and redbull, but all that other shit is bad.
[15:29:35] <pikapika> In that case you already know the point of what you are getting into
[15:29:37] <pikapika> So thats fine
[15:29:37] <vysn> pikapika: or a vicious circle
[15:29:45] <ProfSimm> absentia: so drinking is slow suicide
[15:29:45] <absentia> pikapika: i understand that most higher math
[15:29:48] <absentia> is utterly worthless
[15:29:48] <pikapika> Mine was just a warning for people who are mislead by fp people
[15:29:51] <wize1> Haskell looks like hell. In fact, you could spell hell from the name.
[15:30:03] <absentia> wize1: we are flesh automata animated by neurotransmitters
[15:30:07] <absentia> everything is a drug
[15:30:21] <absentia> pikapika: i've already drunk the fp kool-aid
[15:30:26] <pikapika> Higher math can be useful but indirectly in the solution of some problem. It could also turn out directly useful, but we will have wait a century or so for that.
[15:30:29] <absentia> i am too far gone, my mind is already warped
[15:30:32] <wize1> I went to the bar from age 21 to 27. 27 was when I had my realization that the people at the bar are not very smart and are also somewhat suicidal.
[15:30:38] <pikapika> After all, number theory was just a recreational topic a few centuries ago
[15:30:41] <absentia> imperative JS devs stare at me when i talk about side effects or parametric polymorphism
[15:30:50] <absentia> "why can't we just write `: any` everywhere?"
[15:30:55] <absentia> so i'm already fucked
[15:31:04] <pikapika> vysn, yes
[15:31:35] <absentia> sick of waiting for docker images to build
[15:31:35] <wize1> absentia Why not just join me in making a MUD game? LOL
[15:31:46] <absentia> wize1: as long as you don't deploy it to kubernetes
[15:31:48] <absentia> fuck
[15:31:50] <pikapika> absentia, I just realized of course you can't do with just a field
[15:31:53] <pikapika> You need an order too
[15:31:58] <pikapika> to derive the triangle rule
[15:31:58] <absentia> pikapika: i stated trichotomy
[15:32:03] <pikapika> A field mentions no order
[15:32:04] <absentia> so perhaps not just the field axioms
[15:32:13] <absentia> but field axioms + whatever order is defined by trichotomy
[15:32:16] *** Joins: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[15:32:17] <absentia> in R
[15:32:19] <wize1> I wouldn't deploy it to that. I was using thirdhosting.com as my server host.
[15:32:28] <absentia> or I guess whatever order you care to specify really
[15:32:29] <wize1> I just wrote the game in html/css/javascript
[15:32:35] <absentia> in full generality
[15:32:39] <pikapika> Is the zero really needed?
[15:32:43] <pikapika> I will have to see
[15:32:52] <absentia> you may be able to strengthen the claim
[15:32:55] <absentia> by dropping some axioms
[15:32:57] <absentia> idk
[15:32:57] <pikapika> A field will always provide a zero of course
[15:33:18] <vysn> ProfSimm: thank you
[15:33:25] <pikapika> but it is wrt to addition
[15:33:33] <pikapika> I don't know how it would interact with the distance thing
[15:33:35] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:33:44] <ProfSimm> vysn: you understand how both work right
[15:33:52] <vysn> I am trying
[15:34:06] <vysn> I have used them in practice code. 
[15:34:12] <wize1> I heard a guy say one time "There are millions of people WAY smarter than you, just out-maneuver them and work beligerantly harder and you can have a piece of the pie" I might not sit at the round table, but I might be allowed to sit in a corner somewhere in the room. :D
[15:34:14] <vysn> I just keep getting them confused with one another
[15:34:27] <absentia> wize1: there are no corners, join the circle
[15:34:49] <ProfSimm> vysn: bitwise operators work the same as logical, but it pairs each bit of the numbers, and the result is the logical operation between those two bits
[15:34:52] <wize1> Trust me when I tell you I am not that smart. I just BARELY got my adult diploma at the age of 27.
[15:34:59] <absentia> i have no diploma
[15:35:17] <absentia> fuck certification anyway
[15:35:22] <ProfSimm> vysn: while to logical operators the entire value you have is like a single bit
[15:35:23] <wize1> The only thing I can do that makes me seem really smart is that I am in the 1% of typing speed
[15:35:59] <nomagno> ProfSimm: that's boolean operators
[15:36:17] <nomagno> You also have bitwise operators AKA "actually operates on the value you give it"
[15:36:38] <wize1> https://github.com/ugidevmain/ugimu That is 3 years of hard work. The reason why there isn't much there is because part of that 3 years was just figuring out how I am going to do what I want to do.
[15:36:39] <bayaz> Title: GitHub - ugidevmain/ugimu 
[15:37:03] <ProfSimm> nomagno: logical operators work with boolean values...
[15:37:12] <wize1> Which was finally realizing that I just need to do html/css/javascript
[15:37:24] <ProfSimm> nomagno: I mean is there some context where those aren't two words tfor the same thing
[15:38:07] <upp> am i the only one who gets perpetually trolled by qtcreator?  whenever i start a new line it always indents it like 90 spaces too far so half my life is spent going back and deleting that crap
[15:39:24] <wize1> qtcreator is pretty cool and useful. However yea, it has some UX issues
[15:40:00] *** Joins: newwebdev132 (~newwebdev@78.135.92.22)
[15:40:15] <upp> yeah
[15:40:17] *** Quits: newwebdev13 (~newwebdev@78.135.92.22) (Ping timeout: 240 seconds)
[15:40:25] <rindolf> .webp + CSS -> bandwidth win
[15:40:29] <vysn> ProfSimm: That makes sense. Thank you
[15:41:35] *** Joins: Leone (~Leo@108.175.224.215)
[15:41:40] <nomagno> wize1: good job! ... I don't use JS nearly enough to be able to make something like that
[15:41:45] <nomagno> I wouldn't even know where to start!
[15:42:14] <nomagno> I guess I'd just look at docs until I can work my way around how to do X or Y but it'd be terrible coding style and possibly unidiomatic
[15:42:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[15:42:27] <wize1> my project currently isn't even that complicated. There's hardly any JS at all in there. It's mostly HTML.
[15:42:40] <wize1> But, I had to design the UI before anything to figure out how it's going to function.
[15:43:31] <wize1> I was trying to set up a server with a database and do php/sql so I can get it online and let users register, but that shit got way too complicated and it's out of my league. I'm going to just develop it locally usonly only JS and just make a simulated database of variables.
[15:43:53] <wize1> Eventually I will port it to thirdhosting.com and let them do all that crap.
[15:44:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:44:51] <rindolf> wize1: were yu being a perfectionist?
[15:45:17] <epony> "thurd"
[15:45:26] <wize1> Not at all. I just couldn't get it to work at all.
[15:45:27] *** Joins: magla (~gelignite@d536720f.access.ecotel.net)
[15:45:32] <epony> "polishing" notation
[15:46:11] <epony> and wasmspasms for the "uninitiated" (manglers of data as instructions)
[15:46:17] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:47:14] <epony> now why does SICP (Seriously Incapable of Computer Programming) sound awfully like building a stack machine all of a sudden
[15:47:34] <epony> who knows.. the third bit is indecisive
[15:47:47] <epony> L/R-shifting all "teh" time
[15:48:15] <epony> probably an artefact of incorrect ordering of instructions
[15:49:32] <pikapika> epony, it just tries to make the simple concept of a pair of pointers look like something super deep and mystical
[15:49:43] <epony> maybe
[15:49:46] <epony> but it's not ;-)
[15:50:37] *** Quits: berkhan (~berkhan@159.146.41.59) (Ping timeout: 240 seconds)
[15:50:43] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[15:51:11] *** Joins: independent56 (~independe@2.26.38.138)
[15:51:14] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[15:51:35] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Remote host closed the connection)
[15:52:18] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:52:42] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[15:53:05] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[15:53:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:54:08] <ProfSimm> https://www.youtube.com/watch?v=l9LLI0sJyQY Tiny IBM PC
[15:54:09] <bayaz> Title: This 1:10 Scale IBM PC 5150 Miniature is SUPERB 
[15:54:36] <GeDaMo> But can it run Crysis? :P
[15:54:40] <epony> I like the MMX variants more
[15:54:55] <epony> from 1997/1998 like 250nm and smaller features
[15:55:08] *** Cyp_ is now known as Cyp
[15:55:25] <epony> and 200MHz and up prerrably with 100+ MHz clock multipliers
[15:55:38] <epony> in short, 1995+ technology ;-)
[15:56:02] <epony> makes more sense for practical reuse (simulation, virtualisation, standard PC emulation etc)
[15:56:23] <epony> it's not without substance to call these PC98, PC99 and PC01 machines
[15:56:39] <epony> there are also PC04 and PC08 machines
[15:56:47] <epony> the PC12 you use mostly these days
[15:56:52] <pyzozord> Crisis still holds up graphically today
[15:57:50] <epony> games are primary "consumer" metrics applications therefore as their best "implementations" reuse the modern-at-the-time achievemnts of CPU and GPU line-ups
[15:58:26] <epony> better quality of a measurement than the previous ones "office" / "productivity" suites
[15:58:48] <deniska> epony: PC98 was its own thing in Japan though
[15:58:58] <epony> but it's not about the PC98 platform
[15:59:13] <pyzozord> games were driving personal computer advancments since the very beginning
[15:59:51] <epony> but about the PC'97 and PC'98 and PC'99 and PC'01 "standard"-specifications of machines from the MSFT WIN/DOS compatible drafts
[16:00:12] <deniska> PC'XP
[16:00:16] <epony> https://en.wikipedia.org/wiki/PC_System_Design_Guide#Versions
[16:00:16] <bayaz> Title: PC System Design Guide - Wikipedia 
[16:01:06] <epony> the PC-98 is what you have as a "standard" PC for emulation, in particular a couple of Intel / VIA chipsets
[16:01:06] <pyzozord> I think Personal Computer was perviously a specific trademark? But I meant it in the general sense
[16:01:35] <deniska> pyzozord: not only graphically, it's still fun to play
[16:01:57] <epony> it's what you "like to call it" as a micro-computer, but they vary in form factor, role and provisioning (multipath / reuse capacity)
[16:02:04] <pyzozord> I'd argue graphically it's still really good, looks better than some new releases
[16:02:57] <epony> https://en.wikipedia.org/wiki/Classes_of_computers#Microcomputers_(personal_computers)
[16:02:57] <bayaz> Title: Classes of computers - Wikipedia 
[16:03:14] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:04:08] <ProfSimm> In Python this is a string ("foo") and this is a tuple containing a string ("foo",)
[16:04:14] <ProfSimm> Isn't that stupid now
[16:05:21] <absentia> what's stupid about it
[16:05:33] <absentia> the comma?
[16:05:33] *** Quits: wize1 (~wize1@2601:348:8000:21e0:9d35:f153:ff02:7904) (Ping timeout: 256 seconds)
[16:05:34] <ProfSimm> Its subtle and weird
[16:05:41] <deniska> It's kinda awkward, sure, but less awkward than other choices would be
[16:05:59] <absentia> let's use more brackets from other unicode planes
[16:06:06] <epony> it's the same with shell scripting languages, they call it lists
[16:06:29] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:cf3:7026:9a71:c50d) (Read error: Connection reset by peer)
[16:06:50] <epony> simple dynamic programming languages improve on the list and array structures and control with them
[16:07:18] <pyzozord> not a big fan of operators
[16:07:18] <GeDaMo> Generally, lists are actually binary trees
[16:07:20] <epony> and have therefore sub-lists you call tuples (or nibbles)
[16:07:39] <pyzozord> basic arthmetic operators are ok, but rest should be keywords
[16:07:47] <absentia> GeDaMo: not if doubly linked
[16:07:55] <GeDaMo> https://en.wikipedia.org/wiki/Conc-tree_list
[16:07:56] <bayaz> Title: Conc-tree list - Wikipedia 
[16:08:03] <epony> whatever you like to call it, it's a set of values with "internal" logic that the interpreter keeps track of it as it sees fit, and exposes it to the programmer as a standard well understood data structure
[16:08:26] <absentia> good lord
[16:08:29] <absentia> is this written in fucking scala
[16:09:52] *** Joins: wize1 (~wize1@2601:348:8000:21e0:9d35:f153:ff02:7904)
[16:10:27] <nomagno> pyzozord: what do you think about the basic C operator set?
[16:10:32] <absentia> all binary trees have at least one enumeration into a list
[16:10:38] <absentia> but i still don't buy that all lists are binary trees
[16:11:14] <absentia> this looks like a completely different data structure entirely
[16:11:38] <nomagno> Bitwise: &, |, ^, ~, =, <<, >>
[16:11:38] <nomagno> Boolean: &&, ||, !=, !, ==, <, >
[16:12:04] *** Joins: savolla (~quassel@95.10.207.85)
[16:12:25] <wize1> absentia I created a channel called ugimu in libera chat if you'd like to join
[16:12:32] <pyzozord> nomagno: hitting the right spot for the most part
[16:12:49] <deniska> I kinda prefer `and` to `&&`
[16:12:57] <deniska> interestingly enough, C++ permits both :)
[16:13:06] <pyzozord> yeah and is better
[16:13:08] <nomagno> C does too
[16:13:12] <nomagno> It has a header somewherr
[16:13:14] <epony> C++ is fancier tooling so it can redefine itself
[16:13:18] <nomagno> That aliases boolean operations
[16:13:28] <pyzozord> but 1 plus 1 would be a bit weird
[16:13:30] <epony> you can use C++ to make a new language, like Java
[16:13:37] <nomagno> Also you can just do #define and &&
[16:13:47] <deniska> in some compilers it's done in quirky way so that `and` can be used in other places where `&&` is syntactically right, besides boolean expressions
[16:13:59] <epony> but you can't expect the same to be in C without placing the C++ features you need into it as libraries
[16:14:11] <nomagno> iso646.h
[16:14:20] <nomagno> That aliases a bunch of operations ^
[16:14:26] <epony> so C and C++ are almost "the same" language without and with extra features
[16:14:37] <nomagno> https://en.m.wikipedia.org/wiki/C_alternative_tokens
[16:14:38] <bayaz> Title: C alternative tokens - Wikipedia 
[16:14:39] <pyzozord> pretty much + - / * == > < 
[16:14:55] <nomagno> and	&&... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/064746a77f8a4c55395badcdfff3acc594f0814f)
[16:14:58] <absentia> just give everybody the sheffield stroke
[16:15:08] <absentia> it's up to higher levels to define everything else
[16:15:26] <absentia> sheffer
[16:16:39] <nomagno> C is also pretty self-modifying, it just doesn't have operator overloading
[16:17:20] <nomagno> ... Mostly because that would duplicate the size of the language as it would bring polymorphism, classes, inheritance, private members, constructors, destructors....
[16:17:26] <epony> that's not about the language though, it's about your own programs
[16:17:49] <epony> so you can choose to use C and do what you like from other languages, nothing to impede that
[16:17:53] *** Joins: tomathy (~jenova@user/quetzl)
[16:18:02] <epony> in fact, it's exactly how it is done ;-)
[16:18:04] <tomathy> hi everyone
[16:18:38] <nomagno> epony: this is where I complain many languages that claim C interoperability fail to implement proper struct ABI
[16:18:53] <epony> the language is about assembler macro-programming with a better interface retaining the assembler control in it
[16:19:03] <nomagno> So I'm stuck with my extra-portable struct-organized game backend not working with Emscripten
[16:19:06] <nomagno> For example
[16:19:19] <epony> so you can direct inline it then, instead of translation layers
[16:20:12] <nomagno> epony: Inlining assembly is a huge edge case that you rarely see except for OS-level tooling that needs GNU extensions, but yes
[16:20:20] *** Quits: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea) (Remote host closed the connection)
[16:20:26] <nomagno> That is a pretty common edge case, to be fair
[16:20:34] *** Joins: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea)
[16:20:34] <epony> all (most) languages build on top of the previous ones, they do not compete or discard the previous achievements, just provide more "built-in" bundled functionality and interfaces
[16:20:58] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[16:21:02] <nomagno> epony: Now why do half of all languages ignore structs in C existing?
[16:21:40] <epony> up to the language designers choices, but C structs are what you use to build object oriented programing
[16:21:47] <nomagno> Like, Godot for instance has C bindings for modules, and the class bindings for C++ are implemented on top of the C bindings, but the C bindings DON'T have getter/setter methods for structs!
[16:21:49] <epony> so it's actually used
[16:21:56] <nomagno> it's really weird
[16:22:12] <nomagno> Same with modern 'toy' languages like crystal and zig
[16:22:14] <epony> well, that some "implementation"-specific "middleware"
[16:22:20] <nomagno> And with emscripten
[16:22:25] <epony> set of libraries with framework properties / qualities
[16:23:08] <epony> so it's more of an application construction kit (engine with interface needed) prepared set of game centric sub-systems
[16:23:15] <nomagno> I can not understand emscripten NOT having struct getter/setter methods
[16:23:22] *** Joins: Klinda (~superleag@user/klinda)
[16:23:26] <nomagno> Like, they have their own LLVM backend!
[16:23:31] <epony> design "choices" of the various authoring teams
[16:23:36] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[16:24:42] <nomagno> Imaging a project controlling 100% of the API surface and knowing what the ABI is at all times, but only implementing interfaces for returning and inputting strings and ints to functions
[16:24:57] <epony> the good parts are, such complex software exercise more of the language features eventually the "framework" authors learn how to properly use these ;-)
[16:25:45] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[16:26:30] <nomagno> Speaking of emscripten, am I the only one that feels like WASM machine code is too high-level and probably needs more IR conversions in many platforms?
[16:26:52] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[16:27:08] <epony> it's probably intended to "standardise" the IR models
[16:27:24] <epony> or at least provide a known superset above them
[16:27:43] *** Joins: pulse (~pulse@user/pulse)
[16:28:02] <epony> expecting it will be like ASM is to the real machine, what this *ASM is to the intermedia representation machine
[16:28:11] <epony> cause you know there are no two IRs alike ;-0
[16:28:15] <absentia> isn't wasm the IR
[16:28:17] <nomagno> ... I'm not sure what that means, are you doing sophism again?
[16:28:34] <epony> nah, compare, GNU and LLVM and JVM IRs
[16:28:51] <nomagno> absentia: I think the IR is unsuitable to be a one-pass conversion to native code
[16:28:56] <epony> GCC and LLVM differ as IR, so does Java bytecode
[16:28:56] <nomagno> So yes it's an IR
[16:29:06] <absentia> there's multiple layers though aren't there
[16:29:08] <absentia> because isn't it
[16:29:10] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:29:11] <nomagno> But you're almost certainly going to be further compiling/transpiling it internally
[16:29:23] <absentia> high-level lang / HLL -> LLVM -> WASM -> native machine code
[16:29:25] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:29:39] <absentia> isn't that the chain
[16:29:41] <epony> then you need a layer on top of it that is macro-programming the IR with an stable language, an *ASM replacement for the virtual (intermediate) machine
[16:30:09] <absentia> so what does IR even mean in this picture
[16:30:11] <epony> so it tries to pull the skirt over the IR into the "language specified" IR
[16:30:15] <absentia> i would say both LLVM and WASM are an IR
[16:30:18] <epony> intermediate representation
[16:30:19] <nomagno> absentia yes but wasm needs to be interpreted
[16:30:26] <nomagno> When executing
[16:30:33] <absentia> what's the distinction here
[16:30:36] <absentia> doesn't bytecode need to be "interpreted"
[16:30:39] <epony> BC is interpreted too, and compiled
[16:30:41] <absentia> yes
[16:30:46] <absentia> exactly
[16:30:53] <epony> but it is prepared with a first pass interpreter
[16:30:59] <absentia> where's futurama man
[16:31:03] <absentia> I bet GeDaMo would have thoughts here
[16:31:05] <epony> that gave you the free-way to use any fancy programming
[16:31:09] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:31:12] <nomagno> I'm saying I think WASM is too abstract to be interpreted/JIT'ed in one pass
[16:31:15] <nomagno> Not a bad thing
[16:31:18] <nomagno> Just pointing it out
[16:31:29] <epony> and it did that :optimisation: away into bytecode which is an opcode specification
[16:31:48] <epony> just these opcodes specs are DIFFERENT between implementations
[16:32:02] <epony> while a lower level language is going to swallow that difference
[16:32:44] <epony> and present them as "standard"-susceptible BC (bytecode) / OC (opcode) macro programming, but for the IR / VM
[16:32:56] <epony> instead of targeting the real machine
[16:33:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[16:33:59] <nomagno> HWVM Assembly is the best IR
[16:34:03] <nomagno> Sorry, had to say it
[16:34:08] <nomagno> Cry me a river, W3C!
[16:34:09] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[16:34:14] <absentia> c is the best IR
[16:34:15] <epony> https://en.wikipedia.org/wiki/Intermediate_representation#Languages
[16:34:15] <bayaz> Title: Intermediate representation - Wikipedia 
[16:34:18] * absentia hides in a dumpster
[16:34:48] *** Joins: voidsync (~void@user/voidsync)
[16:35:33] <epony> gamers would look into  https://en.wikipedia.org/wiki/Khronos_Group#History
[16:35:33] <bayaz> Title: Khronos Group - Wikipedia 
[16:35:45] *** Joins: Cashlin (~hp@user/cashlin)
[16:35:50] <nomagno> absentia: C is a decent IR if you only use unsigned uint16_t/uint8_t for everything and never use any VLAs, anything from the stdlib, and otherwise stick to a subset of C99
[16:36:01] <nomagno> :)
[16:36:50] <epony> https://en.wikipedia.org/wiki/Model_of_computation#See_also
[16:36:50] <bayaz> Title: Model of computation - Wikipedia 
[16:37:19] <epony> https://en.wikipedia.org/wiki/Comparison_of_application_virtual_machines#Comparison_of_virtual_machines
[16:37:19] <bayaz> Title: Comparison of application virtualization software - Wikipedia 
[16:38:27] <epony> https://en.wikipedia.org/wiki/WebAssembly#Virtual_machine
[16:38:27] <bayaz> Title: WebAssembly - Wikipedia 
[16:38:29] <bjs> nomagno: well the standard Wasm implementation has both an interpreter and a compiler.  It will compile whole functions with optimizations at runtime and swap those in when it detects hot paths. I don't think Wasm even deopts.
[16:38:48] <epony> "Wasm code (binary code, i.e. bytecode) is intended to be run on a portable virtual stack machine (VM)."
[16:38:52] <bjs> Well the V8 implemnetation that is,
[16:38:55] *** Joins: learner36 (~learner36@cpef81d0fa12c13-cmf81d0fa12c10.cpe.net.cable.rogers.com)
[16:40:10] <absentia> learner36: hi
[16:40:15] <absentia> this is a better place to ask your questions
[16:40:21] <epony> https://en.wikipedia.org/wiki/P-code
[16:40:22] <bayaz> Title: Bytecode - Wikipedia 
[16:40:30] <epony> "The name bytecode stems from instruction sets that have one-byte opcodes followed by optional parameters. Intermediate representations such as bytecode may be output by programming language implementations to ease interpretation, or it may be used to reduce hardware and operating system dependence by allowing the same code to run cross-platform, on different devices. Bytecode may often be either directly executed on a virtual machine (a p-code machine, 
[16:40:30] <epony> i.e., interpreter), or it may be further compiled into machine code for better performance."
[16:40:31] <learner36> thanks, absentia
[16:40:39] <absentia> learner36: ##politics is hot garbage
[16:40:44] <absentia> i am there when i need a laugh
[16:41:09] <learner36> I'm just going to browse through some of the tutorials on the Google Cloud website, because they show you there how to setup cloud storage there and give some template code to read/write to it
[16:41:13] <bjs> nomagno: so Wasm starts, and then the first "pass" optimization is just to get some kind of machine code that's not "very" optimized but good enough. Then later on if the function becomes "hot" it will get swapped back out for an optimized version, and then that optimized version hangs around.  It's kind of a weird JIT in that sense
[16:41:24] <epony> absentia, maybe they lack "standards" in there ;-)
[16:41:34] <absentia> muahahahahahahah
[16:41:42] <absentia> learner36: just a warning since you seem fixated on GCP
[16:41:47] <learner36> what I'm wondering though, if I'm trying to create a small web application, and by small I mean with not a lot of computational overhead, or storage space requirements, and I'm trying to use like the free starter mode, but I'm sure I'll inevitably get some charges
[16:41:48] <absentia> it is by far the most complex of the cloud offerings i've tried
[16:42:00] <absentia> google engineers are brain damaged from staying up in orbit for too long
[16:42:04] <learner36> but I won't be surprised with like a $1000 invoice from Google, will I?
[16:42:12] <learner36> just out of the blue
[16:42:12] <absentia> $1000 from google?
[16:42:14] <absentia> that's cheap
[16:42:25] <learner36> yes, because I already worked through a lot of the steps
[16:42:36] <epony> roxor technology  https://en.wikipedia.org/wiki/OS-level_virtualization#Overhead
[16:42:37] <bayaz> Title: OS-level virtualization - Wikipedia 
[16:42:53] <epony> it's like bytecode only better
[16:43:01] <absentia> learner36: you can probably set billing alerts and limits
[16:43:03] <learner36> so how much would it cost to have one web application, where basically it will have a trivial amount of requests sent to it, except on one day, it will probably have thousands of requests sent to it, assuming it needs some minimal amount of storage as well
[16:43:11] <learner36> just very rough ballpark
[16:43:13] <absentia> learner36: i could do it for $5/mo
[16:43:17] <absentia> if you don't require a database
[16:43:19] <absentia> less than 10 cents
[16:43:34] <absentia> thousands of requests is fucking nothing
[16:43:56] <absentia> think simple
[16:43:58] <learner36> are you familiar with Google cloud, though? if you want to give me some workable code that's like a skeleton of what I need it to do, I'd pay you for that
[16:43:59] <absentia> stop using all this enterprise bullshit
[16:44:07] <epony> bytecode to your virtual machine, is like ktrace opcode for your kernel, and os level virtualisation but for your processes
[16:44:10] <learner36> otherwise I'm just going to try and piece it all together myself
[16:44:11] <epony> https://en.wikipedia.org/wiki/Ktrace
[16:44:12] <bayaz> Title: ktrace - Wikipedia 
[16:44:14] <absentia> holy fuck
[16:44:18] * epony blows minds
[16:44:28] <absentia> the software industry is so fucked in 30 years
[16:44:38] <user51> results of frustration: http://sprunge.us/dJoIo2 - half complete shunting yard in awk, at the cost of two scripts and a pipe :/
[16:44:57] <learner36> why do you say that absentia?
[16:44:58] <absentia> learner36: I work with GCP professionally
[16:45:06] <learner36> can I PM you?
[16:45:08] <absentia> no
[16:45:11] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[16:45:11] <epony> it's very cool, soon you'll realise your OS kernel is the ultimate bytecode/opcode portable machine
[16:45:13] <absentia> I have said all I will say on this topic
[16:45:16] <absentia> use digitalocean
[16:45:18] <absentia> stop overengineering
[16:45:26] <absentia> your max budget is $10/mo
[16:45:58] <learner36> you're not interested in selling me some basic skeletal code for GCP, eh?
[16:46:04] <absentia> "code for GCP"
[16:46:08] * absentia throws learner36 out of the deep end
[16:46:34] <epony> luckily the learner had protected himself with a rope to the neck
[16:46:35] <learner36> https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/read-write-to-cloud-storage
[16:46:37] <bayaz> Title: Reading and Writing to Cloud Storage ?|? App Engine standard environment for Python 2 ?|? Google Cloud 
[16:46:42] <learner36> right now I'm just following these sorts of tutorials
[16:46:54] <learner36> I feel like I can probably piece together the various components I need from a variety of tutorial codes
[16:46:56] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[16:47:26] <epony> the ULTIMATE bytecode engine, one that is the GRID machine of all mach"ie"ns
[16:47:46] <epony> is inside your very kernel
[16:48:10] <epony> and you're seeking it everywhere else ;-) hoping and hoping for standardisation and portability
[16:48:19] <epony> overlooking the obvious
[16:48:43] <epony> "worp wopr wopr"
[16:49:30] <absentia> IAM policies, virtual private clouds, ingresses, network load balancers, container registries, firewall rules, oh my!
[16:49:39] <absentia> not to mention the build and deployment pipeline
[16:49:50] <absentia> through in mandatory code review from three directors
[16:49:54] <absentia> ENTERPRISE SOFTWARE
[16:50:05] <absentia> hope you're up to configuring all this garbage
[16:50:15] <absentia> or you could compile an x86_64 binary and stick it on a $5 VPS
[16:50:32] <absentia> or maybe even just some JS in an object storage bucket somewhere
[16:50:49] *** Joins: bnchs (~bnchs@41.143.57.238)
[16:51:55] <epony> startwrecenterwarpriseisrealjuju
[16:53:48] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[16:54:05] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[16:54:07] <epony> need.better.op.code.s
[16:56:36] *** Joins: we3fan (~we3fan@89.185.206.82)
[16:56:47] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Remote host closed the connection)
[16:57:49] <pyzozord> ugh kill me already
[16:57:51] *** Joins: bnchs__ (~bnchs@41.143.57.238)
[16:58:11] <pyzozord> went through minihell last two weeks trying to configure a small fraction of that stuff
[16:58:27] <pyzozord> it looked way cooler from the outside
[16:59:18] <absentia> please
[16:59:22] <absentia> do the simplest things possible
[16:59:24] <epony> the programming variant of the darwin awards is probably going to be named palpatine rewards
[16:59:48] <absentia> lmao
[17:00:17] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[17:00:26] *** Quits: bnchs (~bnchs@41.143.57.238) (Ping timeout: 272 seconds)
[17:00:59] <epony> rindolf, this is how you do it, now with up to 99% less pop-culture linkatude ^
[17:01:33] <epony> concepts, humour, click-free, everything prepared for implosion
[17:04:24] <epony> https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_debug_values
[17:04:25] <bayaz> Title: Magic number (programming) - Wikipedia 
[17:05:10] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[17:09:18] <rindolf> epony: i do fanfic for good reasons
[17:10:00] <absentia> i moonlight as a writer for bojack horseman erotica
[17:12:34] <rindolf> https://en.wikipedia.org/wiki/Mashup_(web_application_hybrid) - had been done in fortran
[17:12:34] <bayaz> Title: Mashup (web application hybrid) - Wikipedia 
[17:17:27] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:17:37] <epony> the musicians in the tattouinne canteen puff bytecode smokey byteblues  http://www.openbsd.org/lyrics.html#44 "Trial of the BSD Knights"
[17:17:37] <bayaz> Title: OpenBSD: Release Songs 
[17:19:34] *** Joins: xkuru (~xkuru@user/xkuru)
[17:20:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:21:16] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:22:37] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:23:08] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[17:23:21] *** Quits: gravypod (~gravypod@user/gravypod) (Read error: Connection reset by peer)
[17:23:25] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:24:22] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[17:25:17] *** Joins: Jong (~Jong@2620:10d:c090:400::5:8039)
[17:25:26] *** Joins: gravypod (~gravypod@user/gravypod)
[17:26:01] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:27:26] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc)
[17:28:50] *** Joins: berkhan (~berkhan@159.146.41.59)
[17:28:51] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:28:57] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:29:52] *** Joins: jamea (~jamea@177.239.81.39)
[17:30:35] *** Parts: Svitkona (~Svitkona@157.245.38.135) (The Lounge - https://thelounge.chat)
[17:33:22] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 272 seconds)
[17:33:40] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[17:33:40] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[17:33:40] *** Joins: tane (~tane@user/tane)
[17:35:10] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[17:35:39] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:36:15] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:36:40] <rindolf> gambl0re: hi. https://www.youtube.com/watch?v=_FCld2UJMRg
[17:36:41] <bayaz> Title: First Aid Kit - The Gambler (Don Schlitz/Kenny Rogers cover) @ P? Sp?ret 
[17:37:21] *** Quits: teut (~teut@122.161.83.81) (Ping timeout: 256 seconds)
[17:37:26] *** Joins: Pickchea (~private@user/pickchea)
[17:37:30] *** Joins: adder` (~adder@user/adder)
[17:37:33] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[17:38:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:41:42] <pulse> rindolf, hey, you use debian, right?
[17:42:02] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[17:42:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:43:17] <rindolf> pulse: i use fedora35 mostly
[17:43:28] <pulse> oh
[17:43:35] <pulse> rindolf, with gnome?
[17:43:45] <rindolf> pulse: xfce
[17:44:15] <pulse> ok nvm, i was going to ask you something debian specific but i already figured it out in the meanwhile :p
[17:44:26] <pulse> rindolf, xfce is pretty nice
[17:44:56] *** Joins: n0cturna1 (~n0cturna1@h155173.upc-h.chello.nl)
[17:45:35] <learner36> I moonlight as an old Jewish comedy writer, although in reality, I'm a young Jewish male who can't escape by a long shot the severity of his own countenance, although my body has aged twice beyond its years, on account of the many sleepless nights fueled by benders, that are more micro tragedies than they are modestly humorous
[17:46:26] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[17:46:42] <absentia> poetry
[17:46:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:47:27] <rindolf> pulse: i'm also doing probono packager-ing for fedÂ°
[17:47:40] <rindolf> pulse: i'm also doing probono packager-ing for fedora
[17:47:43] <jamea> https://paste.debian.net/1230765/ i send data to a server, the server receive data with java in a servelt...  i receive ok the variable xAccion: String xAccion = request.getParameter("xAccion");   <------- in this case: xAccion="enviaArchivoParaCalculoCajas"  java know this value, but the jsonArray (1193 elements?) how to get this values on java?
[17:47:47] <bayaz> Title: debian Pastezone 
[17:49:09] <rindolf> learner36: i look 18y. o.
[17:49:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 272 seconds)
[17:50:08] <learner36> aww you've got the baby face going on, you'd make a good terrifying mob man whose soft appearance is in stark contrast to his ruthless ways, giving him an extra edge in matters of mixed signalling and confusing intimidation
[17:50:29] <rindolf> learner36: and i'm 44
[17:51:04] <learner36> you're so well preserved you're like a living mummy, you must take the bandages off when you get up in the morning
[17:51:49] *** Joins: inech (~inech@user/inech)
[17:53:02] <learner36> I wonder if my technique of far-fetched fantastical cover letters each more astonishing and incredible than the last is going to bear any fruit, I'm not sure if this is a gentleman, or perhaps an angry hammerhead shark
[17:53:33] <inhahe_> rindolf i'm 44 too (just turned 44 less than a week ago)
[17:53:57] <rindolf> learner36: what is thisS? star gate?
[17:54:07] *** Quits: inech (~inech@user/inech) (Client Quit)
[17:54:11] <learner36> I'm 36, hence the learner36, lifelong learner, although in all my 36 years I've only learned about 10 years worth of information
[17:54:46] <learner36> hahaha, thank you, I needed that comic relief
[17:55:03] <rindolf> inhahe_: cool
[17:56:25] <gambl0re> anyone use postgres/pgadmin?
[17:56:39] <learner36> any good programmers in here? no no no I said good programmers, not great ones
[17:57:12] <rindolf> inhahe_: mazal tov.
[17:57:22] <inhahe_> what's mazal tov?
[17:57:41] <absentia> rindolf: probably meant that for learner36 
[17:57:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:57:50] <learner36> I thought he was trying to say lamaz vote, and he was a bit dislexic
[17:58:13] <learner36> thanks rindolf
[17:58:14] <Decker> lysdexic
[17:59:05] <inhahe_> decker: https://twitter.com/movieheds/status/906969741591375872/photo/1
[17:59:57] <rindolf> inhahe_: https://duckduckgo.com/?t=ffab&q=mazal+tov&atb=v140-1&ia=definition
[17:59:58] <bayaz> Title: mazal tov at DuckDuckGo 
[18:00:00] *** Quits: vukky (~vukky@wikipedia/vukky) (Remote host closed the connection)
[18:00:16] <inhahe_> rindolf: ah thx
[18:00:20] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[18:00:26] *** Joins: vukky (~vukky@wikipedia/vukky)
[18:00:43] <rindolf> you're welcome 
[18:01:10] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:01:41] *** Quits: kilitary (~kilitary@188.242.105.134) (Remote host closed the connection)
[18:03:10] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[18:04:14] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[18:05:02] *** Joins: teut (~teut@122.161.83.81)
[18:05:49] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Client Quit)
[18:09:05] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:10:33] *** Joins: frost (~frost@user/frost)
[18:14:11] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[18:14:15] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[18:14:19] *** Joins: cliluw (~cliluw@47.147.73.223)
[18:15:35] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:16:42] <pulse> cmake really is a black hole of weirdness
[18:17:16] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[18:17:25] <pulse> really the only way they could make cmake more confusing is if the entire thing was in klingon
[18:18:18] <pyzozord> rindolf: happy birthday :)
[18:18:26] <absentia> rindolf: happy birthday
[18:18:31] <absentia> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
[18:19:24] <inhahe_> oh it's rindolf's birthday?
[18:19:28] <pyzozord> rindolf: not sure about absentia, but I was genuine
[18:20:08] <pyzozord> he mentioned half hour ago his birthday was a week ago
[18:20:15] <absentia> oh
[18:20:18] <absentia> i thought it was today
[18:20:25] *** Joins: operateur (~My_user_n@93-87-120-108.dynamic.isp.telekom.rs)
[18:20:26] <absentia> happy belated
[18:20:28] <absentia> !!!!!!!!!!!!!!!!!!!!!!!!!1
[18:21:27] <rindolf> my bday is 5 May
[18:21:42] <absentia> ????????????????????????
[18:22:00] <pyzozord> oh damn
[18:22:04] <pyzozord> it was inhahe_
[18:22:08] <inhahe_> :d
[18:22:10] * pyzozord facepalms
[18:22:21] <pyzozord> happy birthdat inhahe_
[18:22:24] <inhahe_> Ty
[18:22:34] <absentia> hookers and blow
[18:23:05] <pyzozord> that's what I get for being dyslectic and reading "15:23 < inhahe_> rindolf i'm 44 too (just turned 44 less than a week ago)"
[18:23:18] <pulse> happy bday inhahe_ :)
[18:23:23] <inhahe_> Ty:)
[18:23:32] <pulse> and rindolf 
[18:23:43] <absentia> we are all birthdayed on this blessed day :)
[18:24:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[18:24:49] * pyzozord embarassed fades into the bush behind him
[18:24:56] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:27:10] *** Joins: mrig (~mrig@user/mrig)
[18:28:13] <pyzozord> (like homer simpson in the gif :P)
[18:28:25] <pulse> i managed to make cmake work but i have no idea how
[18:28:36] <pulse> i have no idea what's going on
[18:29:00] <pulse> i just wanna write code
[18:29:29] <rindolf> pulse: gr
[18:29:40] <rindolf> pulse: gremlins ;]
[18:29:47] *** Joins: kilitary (~kilitary@188.242.105.134)
[18:30:43] <norias> pulse: what do you want to write?
[18:30:55] <pulse> a 2d map editor
[18:31:05] <norias> oh, that sounds neat
[18:31:15] <pulse> i wanna base it on wxwidgets
[18:31:17] <norias> what platform(s) are you targetting?
[18:31:21] <pulse> all of them
[18:31:27] <pulse> i mean, major desktop ones
[18:31:31] <pulse> windows/linux for starters
[18:31:36] <norias> ahh, yeah
[18:31:46] <Decker> https://flatland.herokuapp.com/ :)  needs more code ported
[18:31:50] <norias> what language?
[18:31:57] <pulse> c++
[18:31:58] <absentia> introducing: 2d map editor for solaris
[18:32:04] <pulse> hah
[18:32:11] <pulse> i did consider doing it with electron for a moment
[18:32:12] <absentia> we're targeting a very niche market segment
[18:32:19] <pulse> but that would be too easy
[18:32:35] <pulse> i want a challenge
[18:32:44] <absentia> wxwidgets eh
[18:32:48] <absentia> why that
[18:32:51] <absentia> (never used it)
[18:32:53] <norias> have you tried conan or vcpkg?
[18:32:55] <pulse> nothing better exists
[18:33:00] <pulse> norias, no
[18:33:00] <absentia> huh
[18:33:03] <inhahe_> what about Qt?
[18:33:07] <norias> pulse: i'd take a look
[18:33:14] <pulse> i have an irrational hatred towards qt that i can't shake
[18:33:16] <pulse> so no qt
[18:33:44] <pulse> plus wx uses native widgets
[18:33:45] <pulse> looks better
[18:34:00] <absentia> abstractwidgetfactorybuilder
[18:34:05] <norias> pulse: i'm very slowly poking at a thing in C++ that i'm targetting windows, linux and mac OS
[18:34:15] <norias> i'm learning that cmake on windows is tough
[18:34:24] <pulse> yeah i'm not even going to bother with cmake on windows tbh
[18:34:31] <norias> ah
[18:34:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:35:14] <norias> what are you going to use?
[18:35:19] <pulse> i like my vs projects very neatly organized and cmake just spews out a generic stub of a project
[18:35:28] <pulse> a vs solution
[18:35:42] *** Joins: bnchs___ (~bnchs@160.177.103.215)
[18:35:42] <norias> so you'll do different build systems per platform?
[18:35:43] <Decker> cmake generates folders in projects and solutions too
[18:35:47] <absentia> proposal: rename .soln files to .prob files
[18:35:48] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:36:24] *** Quits: wize1 (~wize1@2601:348:8000:21e0:9d35:f153:ff02:7904) (Quit: Client closed)
[18:36:25] <norias> pulse: i honestly don't understand the vs project structure / build process
[18:36:28] <pulse> norias, i mean most projects just bundle a .sln for windows. you open it, you build it
[18:36:53] <norias> how does it handle dependencies?
[18:36:54] <pulse> norias, the painful thing on windows is setting up a vs project, but once you do that everything just works smoothly
[18:37:08] <pulse> norias, not automatically :P
[18:37:12] <norias> yeah
[18:37:18] <Decker> https://i.ibb.co/0Gkm7pq/image.png pulse lots of folders.
[18:37:18] <bayaz> Type: image/png Size: 30.3 kB 
[18:37:21] <pulse> idk, i have to figure out that part myself too
[18:37:32] <pulse> Decker, ugh
[18:37:37] <pulse> yeah i don't like that at all
[18:37:42] <pulse> i have my own way of organizing vs projects
[18:37:44] <Decker> you want one big slab?
[18:38:03] <Decker> make up your mind
[18:38:03] <pulse> i think it will still be possible to build with cmake on windows
[18:38:19] <norias> pulse: it totally is. VS supports it
[18:38:27] <Decker> so does xcode
[18:38:36] *** Quits: bnchs__ (~bnchs@41.143.57.238) (Ping timeout: 272 seconds)
[18:38:36] <absentia> can you run X server on WSL
[18:38:44] <norias> my understanding is that cmake will generate whatever stuff VC wants
[18:38:53] <norias> dependencies are where i got stuff
[18:38:57] <absentia> tell all the windows users to run it in WSL
[18:38:59] <absentia> payback, assholes
[18:39:01] <absentia> that's for WINE
[18:39:10] <norias> and why i'm looking at conan and vcpkg
[18:39:19] <pulse> yes but the generated project lacks manual touches
[18:39:20] <norias> er, where i got stuck
[18:39:21] <pulse> it's just a generic stub
[18:39:30] <norias> i'm sure that's fixable
[18:39:34] <pulse> possibly
[18:39:48] <pulse> i'd rather bundle a hand-tuned vsproj though
[18:40:06] <norias> yeah, i'd rather have one build system to rule them all
[18:40:12] <pulse> most cross platform offer both cmake and bundle a vsproj
[18:40:15] <norias> than screw with multiple systems
[18:40:21] <pulse> so you can build without ever touching cmake
[18:40:29] <pulse> yeah i mean
[18:40:33] <pulse> building is messy af honestly
[18:40:50] <hassoon_> buildig what$
[18:40:55] <absentia> anything
[18:40:59] <hassoon_> nope, depends
[18:41:01] <norias> is the VS build system automatable?
[18:41:04] <norias> i'd assume
[18:41:05] <hassoon_> building can potentially be fun
[18:41:10] <absentia> hassoon_: you're right, apparently nix is clean af
[18:41:13] <norias> i.e. can i build it from a distance?
[18:41:32] <hassoon_> bro you're in 2022, everything is doable from distance
[18:41:47] <norias> hassoon_: doesn't seem so. 
[18:41:54] *** Joins: kilitary__ (~kilitary@188.242.105.134)
[18:41:56] <norias> windows seems like a PITA for that stuff
[18:41:57] *** Joins: hlauk (~hlauk@176.33.96.72)
[18:42:02] <deniska> As someone who almost never uses C or C++, I quite like meson
[18:42:07] <deniska> it just works, somehow
[18:42:27] <norias> deniska: noted. thanks.
[18:42:32] <hassoon_> windows ? meh
[18:42:34] <hassoon_> we have linux
[18:42:46] *** Quits: kilitary (~kilitary@188.242.105.134) (Ping timeout: 256 seconds)
[18:43:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:44:28] <norias> hassoon_: thanks for your contribution
[18:46:03] <absentia> lmfao
[18:46:06] <absentia> it's an actual solution
[18:46:11] <absentia> https://techcommunity.microsoft.com/t5/windows-dev-appconsult/running-wsl-gui-apps-on-windows-10/ba-p/1493242
[18:46:13] <bayaz> Title: Running WSL GUI Apps on Windows 10 
[18:46:20] <absentia> literally tell all the windows users to get bent
[18:46:28] <absentia> build for linux users only and let them use WSL
[18:46:41] <absentia> then fuck all the build wizardry for windows
[18:46:51] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:47:08] <pulse> what do you call the first commit
[18:47:12] <pulse> "Initial commit"?
[18:47:34] <pulse> absentia, or, build for windows and let linux users use wine ;)
[18:47:43] * absentia throws rotten tomatoes at pulse
[18:48:00] * pulse slices them with readied katana
[18:48:11] <absentia> my god
[18:48:17] * absentia cowers in fear
[18:48:48] *** Quits: operateur (~My_user_n@93-87-120-108.dynamic.isp.telekom.rs) (Quit: WeeChat 3.4)
[18:50:04] *** Quits: kilitary__ (~kilitary@188.242.105.134) (Quit: entering irc ...)
[18:50:46] <mrig> most linux users whine when asked to use window and then hit the bottle.
[18:51:31] <pulse> i find windows far better as a desktop OS
[18:51:38] *** Joins: filename (~kilitary@188.242.105.134)
[18:51:43] <pulse> i like linux but i doubt i'll ever use it as my main os again
[18:51:47] <pulse> i did at one point, for almost 7 years
[18:51:50] <pulse> then i switched back to windows
[18:51:52] <absentia> pulse: i prefer being a user of the OS, not one used by it
[18:51:58] <mrig> speaking of which, tired of all the bugs whilst using firefox of late, I figured I'd give chomeum a go, surprised that there is no way to open a panel of book marks.
[18:52:03] <absentia> w10 to me looks like a computer demanding that I update it
[18:52:04] <pulse> absentia, i don't feel used by windows at all
[18:52:05] *** Quits: filename (~kilitary@188.242.105.134) (Client Quit)
[18:52:12] *** Quits: hlauk (~hlauk@176.33.96.72) (Quit: Leaving)
[18:52:25] <absentia> pulse: if i want i can freeze a machine in time and never apt-get or emerge or pacman again
[18:52:31] <absentia> and still have it connected to the internet
[18:52:37] <absentia> cve's and all
[18:52:47] <absentia> on windows 10 it seems you are at the mercy of m$' release cycle
[18:52:48] <pulse> i mean, use what you like
[18:52:53] <absentia> yes
[18:52:56] <pulse> yes, you are at the mercy of MS
[18:53:00] <pulse> but there's benefits too
[18:53:09] <mrig> windows feels like a large clunky state machine with numerous drapes thrown over the top of it.
[18:53:11] <absentia> they seem dubious
[18:53:22] <pulse> you can run a lot more software, and the desktop is far more usable, even though linux users will never admit it
[18:53:35] <absentia> i am for sure an outlier
[18:53:35] <pulse> the one thing linux has over windows is the terminal, that's about it
[18:53:45] <absentia> i only care about the terminal
[18:53:51] *** Joins: filename (~kilitary@188.242.105.134)
[18:54:02] <absentia> the rest of the desktop is usable
[18:54:03] <mrig> pulse: but linux is the terminal, all the rest is added extras :)
[18:54:04] <absentia> to a power user
[18:54:09] <absentia> and for me, that's enough
[18:54:11] <pulse> mrig, exactly. i don't like that philosophy
[18:54:14] <absentia> but i recognize for many others it's not the case
[18:54:19] <mrig> thats kinda the point.
[18:54:40] <mrig> ah right yes, you prefer the full bells and whistles desk top.
[18:54:45] <pulse> yep
[18:54:50] <absentia> compiz-fusion
[18:54:51] <mrig> gnome was great for a while but is really buggy now.
[18:54:58] <absentia> get your hypercube virtual desktops today
[18:55:20] <mrig> not sure if the bugs are gnome or the windows server or firefox.
[18:55:21] <pulse> no linux DE comes even close to windows in terms of UX, and i should know, i've tried almost all of them now, lol
[18:55:28] <mrig> I am blaming JS for now.
[18:55:34] <absentia> that's the thing
[18:55:39] <pulse> i do like linux a lot and i think i'm gonna be using it more
[18:55:43] <absentia> stop plastering DEs over linux
[18:55:43] <pulse> but i still prefer windows
[18:55:55] <absentia> i like having just a wm
[18:55:59] <rindolf> pulse: i like fencing w light, soft 'swords': https://www.shlomifish.org/humour/bits/true-stories/socialising-with-a-young-hermione-cosplayer/
[18:55:59] <absentia> and a build-your-own approach to the desktop
[18:55:59] <bayaz> Type: application/xhtml+xml Size: 14.1 kB 
[18:56:05] <absentia> again this is a minority standpoint
[18:56:30] <absentia> i guess i am saying don't come to linux expecting a windows or mac-like "desktop" experience
[18:56:30] <pulse> also windows has a different philosophy as far as applications go. you can build an application, and it will run 20 years from now
[18:56:33] <pulse> that same binary
[18:56:45] <pulse> i can run a 20 year old binary and with a little bit of luck it works the same as it did then
[18:56:55] <pulse> on linux the philosophy is "build it yourself", but that's problematic
[18:57:14] <absentia> so statically link everything
[18:57:18] <absentia> has ELF really changed all that much
[18:57:20] <pulse> because everything changes over time. so if you want to run a 20 year old linux application, you're in for some trouble
[18:57:28] <dodo> that's a feature
[18:58:06] <pulse> i thought static building goes against the unix philosophy :P
[18:58:08] <absentia> i suppose if you're building on top of maybe GTK
[18:58:11] <absentia> you are fucked
[18:58:26] <absentia> although i don't have first-hand experience with stability/backwards compat of GTK
[18:58:30] <absentia> so maybe bad example
[18:58:36] <hassoon_> one once said.. fuck the fucking fuckers
[18:58:38] * hassoon_ hides
[18:58:38] <pulse> i mean, i do like linux. i think i'm going to be using it a lot more since i started this project. but i just prefer windows in general
[18:58:55] <absentia> sure
[18:59:05] <pulse> getting some GOG games to run on linux has been a pain in the butt
[18:59:11] <absentia> that is true
[18:59:19] <pulse> really, i spent 2 hours on one game trying to make it work, satisfying million odd dependencies
[18:59:20] <hassoon_> brah linux is far superior, it's the answer to daily computing needs
[18:59:24] <pulse> and then when it finally worked it crashed 3 minutes in
[18:59:30] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[18:59:38] <pulse> meanwhile on windows i installed it and it worked, lol
[18:59:53] <hassoon_> windows? meh it's more like a gaming system
[18:59:56] <absentia> on the flip side everyone was bitching about cyberpunk 2077 glitches and instability
[19:00:02] <pulse> hassoon_, i produce music on windows too
[19:00:05] <absentia> i was able to run it on high on linux
[19:00:05] <hassoon_> playstations and xbox's should be running windows
[19:00:06] <absentia> through proton
[19:00:07] <pulse> linux is a joke in that space
[19:00:10] <absentia> no problems
[19:00:32] <pulse> not to mention autocad, photoshop, and other professional tools
[19:00:34] <absentia> pulse: yes, linux audio is a tire fire
[19:00:47] <pulse> linux only caters to programmers, really. windows/macos cater to all professionals
[19:00:51] <absentia> gimp is approaching photoshop cs2 quality which will really fit 99% of needs
[19:00:56] <pulse> LOL
[19:01:00] * pulse falls off chair
[19:01:12] <absentia> is it not the case
[19:01:26] <pulse> idk, how old is cs2 lol
[19:01:32] <absentia> like... early 2000s
[19:01:34] <pulse> i doubt it's even at cs2 stage
[19:01:54] <absentia> CS2, may 2005
[19:02:06] <absentia> i think that's the first one that had the magic select
[19:02:09] <pulse> pretty sure cs2 already had non-destructive layers
[19:02:31] <absentia> not sure how that's different from a layer
[19:02:38] <pulse> i spoke to a gimp dev once and he said basically the reason why updates to gimp take forever is because the codebase is hairy beyond imagination
[19:02:43] <pulse> absentia, it's very different
[19:02:55] <absentia> i can't imagine photoshop's codebase is any better
[19:02:56] <pulse> non-destructive layers allow you to make things like glow effects around text etc
[19:03:01] <absentia> they probably just have fuckloads of resources to pour into it
[19:03:07] <absentia> pulse: blending options?
[19:03:10] <pulse> yeah, but that makes a difference
[19:03:12] <absentia> drop shadow/outer glow and all that?
[19:03:22] <absentia> does gimp not have those
[19:03:28] <pulse> absentia, in gimp, when i make something as simple as a button template for a game, i have to manually add shadows each time i change text
[19:03:33] <pulse> it does but see above
[19:03:39] <pulse> in photoshop all that crap is automatic
[19:03:40] <absentia> https://docs.gimp.org/en/gimp-concepts-layer-modes.html
[19:03:42] <bayaz> Title: 2.?Layer Modes 
[19:03:45] <pulse> you make one template, you change text, filters apply automatically
[19:03:51] <absentia> looks like it exists
[19:04:10] <absentia> thirty-eight layer modes
[19:04:11] <tomathy> is this bad coding https://github.com/tb991/PlayfairEncryption/blob/master/v1/Playfair.java
[19:04:12] <bayaz> Title: PlayfairEncryption/Playfair.java at master ? tb991/PlayfairEncryption 
[19:04:13] <absentia> i mean fuck
[19:04:15] <absentia> did cs2 even have that many?
[19:04:22] <pulse> absentia, https://www.gimp.org/docs/userfaq.html#when-will-gimp-support-any-kind-of-non-destructive-editing-like-adjustment-layers-layer-filters-andor-full-blown-node-based-editing
[19:04:24] <bayaz> Title: GIMP - Frequently Asked?Questions 
[19:04:33] <tomathy> i feel quite proud of it
[19:04:36] <pulse> i'm pretty sure cs2 was already way better than gimp
[19:04:43] <pulse> and today's photoshop is in a different galaxy
[19:04:55] <absentia> pulse: fine, photoshop 8 or some bullshit
[19:05:11] <absentia> tbh if i were in the creative space i'd choose neither windows nor linux
[19:05:11] <pulse> tomathy, well, you do use tabs. so that's 1 point ;)
[19:05:13] <absentia> it would be mac
[19:05:20] <absentia> which i think leads the pack by a wide margin
[19:05:22] <pulse> mac is also good yes
[19:05:28] <tomathy> yay
[19:05:46] <pulse> absentia, nah. windows is still king
[19:05:54] <pulse> all the autocad people run windows, mostly
[19:05:57] <absentia> tomathy: it's not bad
[19:06:01] <absentia> you may benefit from some for loops
[19:06:09] <tomathy> i despise for loops 
[19:06:11] <pulse> and they design your roads and your toasters
[19:06:29] <pulse> and your electric grids etc.
[19:06:34] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:06:35] <absentia> yeah and all the coked up investment bankers execute trillions in trades on M$
[19:06:45] <pulse> right
[19:06:51] <pulse> but that's how the world turns
[19:06:58] <pulse> remove windows from the world and you'll have a bad time
[19:07:02] <pulse> linux can't handle all that workload :P
[19:07:09] <tomathy> it's a completely stupid algorithm and mutates the data it encrypts
[19:07:11] *** Joins: c2a1 (~c2a1@2607:fb90:1c3a:7552:e4b:2220:78fe:4291)
[19:07:12] <absentia> just replace office365 with libre office
[19:07:15] *** Quits: we3fan (~we3fan@89.185.206.82) (Quit: Leaving)
[19:07:19] <absentia> easy
[19:07:22] <tomathy> but good for its time
[19:07:23] <pulse> that's very myopic
[19:07:31] *** Quits: terminalpusher (~terminalp@2a01:586:1e0e:1:7d2:f782:1265:49ea) (Remote host closed the connection)
[19:07:33] <absentia> it was satire
[19:07:36] <c2a1> How good is libreoffice though. As an alternative
[19:07:36] <pulse> i know
[19:07:44] *** Quits: zaher (~zaher@37.48.177.209) (Ping timeout: 272 seconds)
[19:07:51] <pulse> but i find linux users commonly misunderstand the scale of windows in professional environments
[19:08:03] <absentia> i've used skype for business
[19:08:08] <absentia> and held a vs enterprise license
[19:08:11] <pulse> they just repeat "windows bad" in a hypnotic state of mind
[19:08:22] <absentia> i actually think vs enterprise is one of the best ides around
[19:08:29] <pulse> not realizing that everything they use in daily life has at some point been designed on windows
[19:08:31] <absentia> but you will have to sacrifice your firstborn to use it as an indie
[19:08:51] <pulse> as a gamedev i don't think i'd be in the wrong if i completely ignored linux, too
[19:08:53] <c2a1> It seems like people were writing latex documents and such on unix on sunos mavhines in the 80s and early 90s
[19:08:54] <absentia> so i've gone into the windows deep end
[19:09:02] <pulse> i wanna make my editor cross platform as a personal challenge more than anything
[19:09:03] <absentia> and seen how far the contagion has spread
[19:09:10] <pulse> if i would only look from the business side i would just target windows
[19:09:13] <pulse> because gamers just use windows
[19:09:16] <absentia> that is why i must vigorously push back the forces of gates' corruption
[19:09:29] <absentia> and keep burning the light of free and libre open source software
[19:09:35] <pulse> or, you can contribute to reactos until it gets to win10 standard
[19:09:38] <pulse> and then we can all use that ;)
[19:09:40] <c2a1> SunOS(not solaris) is like the definite precursor to the modern linux/bsd distro. Same structure and simplicity and such.
[19:10:01] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[19:10:04] <absentia> pulse: this is also a way
[19:10:21] <absentia> frankly making software usable is too hard though
[19:10:29] <absentia> i'd rather focus on the easy technical bullshit
[19:10:49] <tomathy> pulse: is debugging as valid as testing? i hate testing because you tend to need libraries which introduces compatibility and stuff
[19:10:49] <absentia> actually what is reactos missing
[19:11:05] <pulse> tomathy, testing is not the same as debugging
[19:11:19] <absentia> you can (and probably should) use tests to debug though
[19:11:21] <tomathy> well testing is like the complete version of debugging
[19:11:31] <pulse> debugging is typically about finding a solution to a specific problem
[19:11:31] <absentia> no, there's more debugging than just testing
[19:11:39] <pulse> whereas testing covers a wide surface area all at once
[19:11:50] <pulse> so when you make changes to your code, you can quickly test if it conforms to your specs
[19:12:10] <absentia> lmfao they have a fucking jira
[19:12:22] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[19:12:26] <pulse> ah, jira
[19:12:32] <pulse> or as i like to call it the 7th circle of hell
[19:13:21] <absentia> what's left on their roadmap
[19:13:25] <absentia> can i play crysis on reactos
[19:13:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:13:31] <pulse> doubtful
[19:13:50] <absentia> i think wine/proton is eating reactos' lunch here
[19:13:52] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) ()
[19:13:55] <absentia> they also have the industry $$$$ flowing in
[19:14:18] <absentia> well that's in the gaming space at least
[19:14:42] *** naos_ is now known as ryanlol
[19:15:31] <pulse> i believe their main problem is drivers
[19:15:42] <c2a1> It's so strange that gnu and openbsd are rivals since they're so similar in that they're the only projects that really implicitly care about drivers being open source and hardware being documented
[19:15:45] <pulse> various incompatibilities
[19:16:17] <c2a1> No other project has done more to petition such things, not even freebsd
[19:17:27] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[19:18:02] <pulse> the linux community alone is fractured beyond what is reasonable
[19:18:20] <c2a1> Why does nvidia care so much about their driver IP I wonder.
[19:18:21] <absentia> cathedral/bazaar tradeoff
[19:18:37] <c2a1> pulse: in the desktop space because there is no aim
[19:19:08] <absentia> c2a1: competitive advantage? juicing the benchmarks?
[19:19:24] <c2a1> They're the china of operating systems. Making a better version of mac or windows? Not possible. Making a cheap replication of their UI? Definitely
[19:19:43] <pulse> too many ideologies. one advantage of windows is its users don't give a shit about ideology, we just want to get our work done
[19:19:43] <c2a1> Maybe like china they'll pull a covid. Who knows
[19:19:50] <absentia> lmfao
[19:19:54] <pulse> meanwhile the linux community is full of ideologues
[19:20:20] <absentia> perhaps it's those principles that brought it this far
[19:20:21] <pulse> maybe a more pragmatic approach would do better
[19:20:39] <pulse> maybe, but i don't see the point in implementing the same thing in 100 different ways
[19:20:48] <GeDaMo> c2a1: if Nvidia were to release the drivers, it would reveal details of their hardware
[19:20:53] <pulse> a lot of wasted effort
[19:21:15] <c2a1> absentia: how often does the average video games consumer in the pc space read benchmarks though
[19:21:39] <absentia> c2a1: in the PC space? i'd say quite a bit
[19:21:40] <c2a1> GeDaMo: like the details we've known about amd and intel for so long?
[19:21:52] <absentia> look at fucking linustechtips
[19:21:58] <absentia> all he does is talk about hardware and performance
[19:22:05] <GeDaMo> Ah but Nvidia are /better/! :P
[19:22:18] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[19:22:43] <absentia> pulse: there's also wasted effort in maintaining backwards compatibility with the rotting foundation of the M$ cathedral
[19:23:06] <pulse> absentia, massively disagreed on that one
[19:23:22] <pulse> backwards compat is the force holding that cathedral together
[19:23:27] <c2a1> absentia: maybe. I don't peecee game that much and never really did
[19:23:41] <absentia> must be a very strong force
[19:23:48] <absentia> and then again, microsoft has a lot of fucking resources
[19:24:04] <c2a1> I liked pacman and galaga when I was a kid(this was the 2000s) but staring at a screen for too long gave me migraines(which I also had lots of)
[19:24:14] *** Joins: quartz (~user_name@user/quartz)
[19:25:50] <absentia> i think we can certainly agree to disagree
[19:25:57] <c2a1> GeDaMo: their driver quality is much better than amds imo
[19:26:01] <absentia> each os is optimum in its respective domains
[19:26:14] <c2a1> AMD's old linux driver was fucking horrible
[19:26:21] <absentia> and optimizes for certain dimensions
[19:26:22] <c2a1> The one inherited from ati
[19:26:25] <absentia> which means it trades off in others
[19:26:30] <absentia> which is a pretty vacuous statement
[19:26:33] <absentia> but there it is
[19:26:43] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[19:27:27] <c2a1> I read somewhere that nvidia was an early proponent of opengl over directx which explains why they still support freebsd
[19:31:00] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[19:31:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[19:32:56] <beaky> nice i like nvidia
[19:33:17] <absentia> beaky: do you like tea
[19:33:51] <beaky> yes i like tea too though todayh i am taking a break from tae
[19:34:33] <absentia> i can't wait for
[19:34:35] *** Quits: tomathy (~jenova@user/quetzl) (Ping timeout: 250 seconds)
[19:34:35] <absentia> the fucking weather to turn
[19:34:54] <absentia> i am going stir crazy indoors
[19:35:50] <GeDaMo> What do you have, rain? Snow?
[19:36:02] <absentia> yes
[19:36:29] <absentia> we have everything here
[19:36:36] <absentia> mother nature's fine weather emporium
[19:36:47] <rindolf> pulse: https://passy.svbtle.com/building-vim-from-1993-today
[19:36:48] <bayaz> Title: Building Vim from 1993 today ? Pascal Hartig 
[19:37:08] <GeDaMo> https://www.youtube.com/watch?v=l5aZJBLAu1E ? :P
[19:37:09] <bayaz> Title: The Weather Girls - It's Raining Men (Video) 
[19:38:18] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[19:38:35] *** Joins: ThePhilgrim2 (~thephilgr@151.40.115.120)
[19:39:29] *** Joins: ejjfunky (~ejjfunky2@125.164.19.191)
[19:39:52] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.191)
[19:40:05] *** Parts: ThePhilgrim (~ThePhilgr@151.40.115.120) ()
[19:40:06] *** Joins: WhO (~V@103.240.170.227)
[19:41:35] *** Quits: berkhan (~berkhan@159.146.41.59) (Quit: Leaving for now. See you next time.)
[19:41:46] *** ThePhilgrim2 is now known as PhilgrimLime
[19:41:56] *** Joins: berkhan (~berkhan@159.146.41.59)
[19:42:18] <beaky> nice i like vim my favorite text editor
[19:42:22] *** Joins: tomathy (~jenova@user/quetzl)
[19:42:24] *** Quits: tomathy (~jenova@user/quetzl) (Client Quit)
[19:44:32] *** Quits: widp (~user@124.123.104.227) (Ping timeout: 256 seconds)
[19:45:26] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[19:46:57] <c2a1> 2022 and AIX is still maintained yet nobody ever hears about it
[19:47:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:48:28] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[19:49:19] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[19:50:42] <[itchyjunk]> https://news.ycombinator.com/item?id=30321347
[19:52:57] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[19:56:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[19:56:57] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 240 seconds)
[19:57:00] *** fling is now known as contractor
[19:57:11] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[19:58:17] *** Joins: plastico (~plastico@neomutt/plastico)
[20:00:44] *** contractor is now known as fling
[20:02:26] <rindolf> GeDaMo: all the good men are taken ;]
[20:02:39] <jamea> is possible: this json: 843,919 aa.txt cant parse because the size? is big is big  (with java)
[20:02:57] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[20:03:11] <GeDaMo> Less than a megabyte doesn't seem all that big
[20:03:28] <GeDaMo> What error message are you getting?
[20:03:38] <Athas> c2a1: what is new in the world of AIX?
[20:03:44] <pulse> 1 megabyte of json is pretty big imo
[20:04:24] *** Joins: [R] (~rs@genoce.org)
[20:05:05] <GeDaMo> I feel like most websites would disagree :|
[20:05:18] <jamea> GeDaMo generating the error
[20:05:23] <[itchyjunk]> We had to parse 4GB txt files for a tree exercise
[20:05:29] <c2a1> Athas: a lot more of its base than solaris probably
[20:05:37] <jamea> this a sample of the json https://bpa.st/QGZQ
[20:05:38] <bayaz> Title: View paste QGZQ 
[20:05:51] <deniska> is 1mb of json too big to casually serve via http to unsuspecting clients? Maybe
[20:06:02] <deniska> Is 1 mb of json too big to store and occasionally parse? No
[20:06:20] <c2a1> Athas: the hardware is supports is still pretty common I'd imagine.
[20:06:36] <Athas> POWER?
[20:06:47] <Athas> I know there was an OpenPower push, but isn't it still pretty exotic?
[20:07:22] <deniska> Everything non-x86(_64) is fairly exotic
[20:07:34] *** Joins: mrig (~mrig@user/mrig)
[20:07:40] <GeDaMo> ARM
[20:07:53] *** Joins: Twipply (~Twipply@user/twipply)
[20:08:11] *** Quits: berkhan (~berkhan@159.146.41.59) (Quit: Leaving for now. See you next time.)
[20:08:25] *** Joins: Pickchea (~private@user/pickchea)
[20:08:35] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[20:08:41] <Athas> ARM is way more used than x86-64 nowadays, I would think.
[20:09:07] <[itchyjunk]> For something specific?
[20:09:14] <[itchyjunk]> In phones, probably
[20:09:15] <Athas> No, in general.
[20:09:20] <[itchyjunk]> for all devices? doubt it
[20:09:21] <deniska> Depends. A phone/tablet with ARM? Totally ordinary. A server with ARM? Somewhat unusual. ARM desktop? U wat m8 :D
[20:09:26] <bjs> [itchyjunk]: for all devices it's almost certain
[20:09:31] <Athas> In the room I am in right now I think there is a single x86 CPU, but I can think of at least a dozen ARMs.
[20:09:33] <bjs> pretty sure my washing machine has an arm chip in it...
[20:09:51] <[itchyjunk]> intel fabs way more chips
[20:09:54] <deniska> There's only a single mainstream manufacturer making ARM laptops
[20:09:54] <[itchyjunk]> ARM sells IP
[20:10:01] <Athas> bjs: some of those might be ATmegas!
[20:10:03] <GeDaMo> Have desktop Macs moved to Apple Silicon yet?
[20:10:25] <bjs> [itchyjunk]: yes, they sell IP, which is an architecture, which people make chips and put in devices
[20:10:37] <[itchyjunk]> Who is the people though?
[20:10:40] <bjs> there's certainly far more Arm chips than x86 chips,  but counting the number of devices
[20:10:44] <bjs> [itchyjunk]: Arm's partners
[20:10:51] <[itchyjunk]> TSMC does way more than ARM
[20:11:02] <[itchyjunk]> ARM isn't majority of what TMSC makes
[20:11:10] <Athas> Samsung also produces an enormous number of processors for internal use.
[20:11:42] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[20:11:59] <Athas> But this is really interesting, actually.  There are obviously way more ARM processors made than x86 (likely an order of magnitude or more), but that's not the only way to measure the "most popular chip".
[20:12:27] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:6111:c808:a47f:41)
[20:12:32] <bjs> [itchyjunk]: sure,  but there are a *lot* of Arm chips (or chips running Arm, or however you want to put it) out there
[20:12:40] <Athas> Here's another measure: when a new line of code is written, what are the odds that it will primarily be executed on x86 versus ARM?
[20:12:42] <[itchyjunk]> Shouldn't you compare some specific ARM artitecture to x86 then?
[20:12:56] <Decker> 100%
[20:12:58] <Athas> [itchyjunk]: in those terms, x86 isn't arn architecture either.
[20:13:19] <[itchyjunk]> in any case, it feels like the comparision is off
[20:13:27] <[itchyjunk]> ARM the company compared to some subset of intel
[20:13:45] <[itchyjunk]> then we just go, ah but IoT win in volume!
[20:14:01] <deniska> it's hard to compare because historically these architectures were used in very different contexts, but these contexts are converging nowadays
[20:14:09] <Athas> I'm not assuming that all x86 processors are made by Intel.
[20:14:19] <bjs> [itchyjunk]: I'm not sure what kind of "comparison" you're looking for,  but if you just want to know the count of chips that went out with "arm" printed on them, it's an awful lot
[20:14:23] <bjs> like >100 billion
[20:14:47] <[itchyjunk]> sure, then you'ed compare that with chips with Intel printed on them or something
[20:14:56] <[itchyjunk]> if we are comparing by company name
[20:14:58] <bjs> [itchyjunk]: and that'd be orders of magnitudes less
[20:14:58] <Athas> We can restrict the discussion to "fully featured" CPUs, e.g. at least 32 bit and with an MMU.
[20:15:05] <deniska> that's at least 33x more devices than run java :D
[20:15:19] *** Quits: elgraz (~elgraz@151.65.18.229) (Remote host closed the connection)
[20:15:47] <bjs> deniska: yup because arm captures a wide market from basically the tiniest microprocessors up to the fully-fledged CPUs in your phone
[20:15:55] <bjs> most can't even run java I'd have thought :P
[20:16:11] *** Quits: Fairy (~Fairy@2001:464a:4992:0:8fa:f917:3ddb:7b76) (Ping timeout: 245 seconds)
[20:16:25] <jamea> the error on clietn side was: 500 "Internal server error) who send the json... 2) on server side the error is: "java.lang.ClassCastException: com.google.gson.JsonArray cannot be cast to com.google.gson.JsonObject"   i try receive the json with this code on server side: https://paste.debian.net/1230773/     >----- the error is on line2 ... any advice?
[20:16:29] <bayaz> Title: debian Pastezone 
[20:16:30] <jamea> *client
[20:16:30] <Athas> Java is a pretty big umbrella, and if you count "Javacard" as Java, then it runs on utterly anemic chips.
[20:17:02] <[itchyjunk]> who is manufacturing all these order of magnitude more chips for ARM?
[20:17:11] <[itchyjunk]> only so many foundries out there
[20:17:15] <Athas> Nobody is manufacturing anything _for_ ARM.
[20:17:18] *** Quits: rsx (~dummy@ppp-188-174-158-217.dynamic.mnet-online.de) (Quit: rsx)
[20:17:25] <bjs> Yes Arm just license the IP
[20:17:38] <Athas> But tons of foundries at every process node are manufacturing chips based on the ARM ISA.
[20:18:03] <Athas> TSMC is the obvious one for high end stuff, but Samsung manufactures a huge number of ARM chips for internal use in their various products.
[20:19:20] <Athas> Texas Instruments makes a lot of ARM chips in the USA.  For industrial and warfare purposes, I think.
[20:20:49] *** Joins: soapsudsxx (~soapsudsx@209.221.40.136)
[20:21:34] <[itchyjunk]> What do you mean internal use
[20:21:43] <[itchyjunk]> used inside washinmachine and what not you mean?
[20:22:06] <Athas> Yes, or everything else that needs a processor.
[20:22:13] <Athas> Monitors, whatever.
[20:22:25] <deniska> there's probably a lot of 8051's in these as well
[20:22:32] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:22:32] *** Quits: DrMax (~DrMax@node-1w7jra94757g0ehga8s43jipa.ipv6.telus.net) (Remote host closed the connection)
[20:23:44] *** Joins: DrMax (~DrMax@node-1w7jra94757g1w4i6sbnr3nph.ipv6.telus.net)
[20:26:31] <jamea> GeDaMo any advice? thx
[20:26:55] <FloridaMan> We were just talking about the Pi shortage on another channel
[20:27:14] <FloridaMan> $$$
[20:27:39] <GeDaMo> jamea: looks like the type the parser is returning is JsonArray, not JsonObject
[20:28:16] <jamea> ok, thanks.... 
[20:28:21] <jamea> i need disconnect
[20:29:00] <GeDaMo> jamea: Try using JsonValue instead of JsonObject
[20:29:31] *** Joins: kariosfox (~kariosfox@89.229.175.242)
[20:30:06] <GeDaMo> Or maybe JsonStructure
[20:30:23] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.220)
[20:31:16] <GeDaMo> What are you using 'o' for anyway? I don't see it anywhere else in this paste
[20:31:40] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d)
[20:33:16] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.191) (Ping timeout: 256 seconds)
[20:33:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[20:34:06] <jamea> also this fail:  JsonElement jelement = new JsonParser().parse(getBody(request));               JsonObject jobject = jelement.getAsJsonObject();   of course i am reading about parse jsonarray 
[20:34:39] <GeDaMo> You need to use a superclass of the objects the parser could return
[20:34:48] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[20:34:51] <GeDaMo> JsonValue or JsonStructure probably
[20:35:37] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753) (Ping timeout: 256 seconds)
[20:36:06] <jamea> ok, with this i learn and apply, then isnt big right? (if yees need pagging) the json contain 1900 records.. so so 
[20:36:28] <GeDaMo> That seems pretty small
[20:36:28] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[20:38:47] <[itchyjunk]> tried having a chip talk, getting a headache
[20:38:57] <[itchyjunk]> wtf is a "chip" anyways?
[20:38:58] *** Quits: savolla (~quassel@95.10.207.85) (Read error: Connection reset by peer)
[20:39:03] <[itchyjunk]> what's the definition of it
[20:39:07] <jamea> you say 5Mb was big right? if yes i think never  i have a json of 5mb so so 2.2mb the more big
[20:39:31] *** Joins: savolla (~quassel@95.10.207.85)
[20:40:17] *** Joins: JimmyRustles (~Haddock@cpc119394-smal16-2-0-cust17.19-1.cable.virginm.net)
[20:40:23] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[20:40:30] <JimmyRustles> is opening a file, writing to it, then closing it every 5 seconds bad for my hard drive?
[20:40:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[20:40:39] <GeDaMo> [itchyjunk]: I'd say it was a single packaged integrated circuit
[20:40:58] <GeDaMo> JimmyRustles: sounds like logging :P
[20:41:54] *** Joins: newpy (~newpy@206.168.231.90)
[20:42:54] <maxzor> are there metrics for comment lines per codes lines accepted in the industry?
[20:43:58] <EdFletcher> not that i've ever seen 
[20:44:17] <maxzor> is 10% a lot, a little? hum whatever
[20:44:29] <JimmyRustles> 10% is a lot compared to me
[20:44:37] <EdFletcher> and also, requiring a set number of comments per lines of code is just going to cause people to do the bare minimum, just like jennifier aniston's character and her flair in office space 
[20:44:50] <EdFletcher> 10% is a ton 
[20:44:51] <maxzor> hehe right...
[20:44:56] <EdFletcher> comments clutter the code and make it harder to read 
[20:44:58] <EdFletcher> use them sparingly 
[20:45:05] <EdFletcher> the code should describe itself 
[20:45:15] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:45:17] <EdFletcher> if it doesn't, refactor it before adding a bunch of comments 
[20:45:26] <newpy> I set up a basic compare function for qsort, but it doesn't seem to sort 0 values to the beginning of the array
[20:45:37] <newpy> is that normal or is there a bug somewhere?
[20:45:38] <EdFletcher> and never, ever write comments describing how things work. we can see that, it's in the code. only write comments for the "why" of things 
[20:45:58] <maxzor> I value more design decision and engaging prose in comments that your regular doxygen descriptions)
[20:46:34] *** Joins: pulse (~pulse@user/pulse)
[20:46:46] <EdFletcher> "design decision" is exactly what i mean about the describing the "why", yeah. tell readers why choices were made, why seemingly-incongruous things were done that way, etc. 
[20:46:57] <maxzor> agreed, thanks
[20:46:57] <EdFletcher> i = 10; # set i to 10 
[20:46:58] <[itchyjunk]> https://news.ycombinator.com/item?id=30301551
[20:47:05] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (Read error: No route to host)
[20:47:07] <EdFletcher> never ever write this comment 
[20:47:15] <GeDaMo> newpy: sounds like a bug
[20:47:18] <[itchyjunk]> GeDaMo, so  "microcontrollers" count as chips?
[20:48:23] <GeDaMo> Yers
[20:48:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:48:50] <GeDaMo> There all sorts of things which wouldn't count as processors that I would call chips
[20:50:08] <nomagno> Else they wouldn't be programmable
[20:50:08] <nomagno> A microcontroller contains a processor most of the time though
[20:50:23] <nomagno> If you have a non-programmable one, then I guess you have a micro-ASIC :)
[20:50:35] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[20:50:46] <GeDaMo> I'm talking about things like I/O controllers
[20:51:02] <GeDaMo> Or even just collections of logic gates
[20:51:29] <GeDaMo> https://en.wikipedia.org/wiki/7400-series_integrated_circuits
[20:51:29] <bayaz> Title: 7400-series integrated circuits - Wikipedia 
[20:52:59] <nomagno> Sounds awfully specific
[20:53:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[20:54:08] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 272 seconds)
[20:54:57] *** Joins: cliluw (~cliluw@47.147.73.223)
[20:54:57] <GeDaMo> I was trying to be general :|
[20:54:57] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[20:55:35] *** Joins: k8yun (~k8yun@user/k8yun)
[20:55:46] *** Joins: flakland (~flaknet99@32.211.211.39)
[20:58:16] <user51> i was doing shunting yard again today, and now i'm thinking if anyone prefers the first approch to handling precedence to the second http://sprunge.us/jIx82t
[20:58:26] *** Joins: mven1 (~mven@ip68-104-39-54.lv.lv.cox.net)
[20:59:12] <user51> the second approch is shorter but the first approach feels more readable
[20:59:15] <[itchyjunk]> wait, ASIC is considered non programmable?
[20:59:19] <[itchyjunk]> that does make sense i suppose
[20:59:20] <[itchyjunk]> hmm
[20:59:25] *** Quits: XV8 (~XV8@c-73-148-120-152.hsd1.va.comcast.net) (Ping timeout: 240 seconds)
[21:00:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:00:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:00:47] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 256 seconds)
[21:00:47] *** mven1 is now known as mven
[21:01:01] <user51> i guess one disadvantage of the first approach is that it will get a bit big if you add more operators
[21:01:26] *** Joins: XV8 (~XV8@2601:5cb:c001:50:51f8:84e7:9cf:e4b6)
[21:01:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:01:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:02:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:02:24] *** Joins: XV9 (~XV8@2601:5cb:c001:50:bc64:9586:eaa5:f172)
[21:02:25] <user51> that could be remedied with sorting, and maybe being easy to search in a text editor is also a nice bonus
[21:02:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:02:48] *** Quits: bnchs___ (~bnchs@160.177.103.215) (Quit: Leaving)
[21:03:14] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpxccp5z30zabdj.ipv6.telus.net)
[21:03:55] *** Joins: mithrin (~mithrin@188-167-233-152.dynamic.chello.sk)
[21:04:37] *** Joins: smoke_ (~smoke@user/smoke)
[21:05:06] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[21:05:37] *** Quits: XV8 (~XV8@2601:5cb:c001:50:51f8:84e7:9cf:e4b6) (Ping timeout: 240 seconds)
[21:06:46] *** Joins: vysn (~vysn@user/vysn)
[21:06:51] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[21:07:07] *** Joins: XV8 (~XV8@c-73-148-120-152.hsd1.va.comcast.net)
[21:08:17] *** Quits: XV9 (~XV8@2601:5cb:c001:50:bc64:9586:eaa5:f172) (Ping timeout: 240 seconds)
[21:08:48] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:f5dd:19f9:12f7:7b9d) (Quit: fe23)
[21:08:56] *** Joins: lilcoder (~whatever@118.69.128.37)
[21:09:52] <lilcoder> anyone here has self-learnt machine learning from books or sources ? can i have some recommendataions on a source for absolute beginners ? i tried that simple project of predicting house prices with regression but youtube kinda makes it unclear 
[21:11:14] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 272 seconds)
[21:11:39] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[21:11:41] <flakland> what is machine learning, the nerual net trhing?
[21:11:54] <GeDaMo> It varies
[21:12:10] <flakland> by season?
[21:12:14] <edgar-rft> why would you want to learn something yourself if a machine could learn it for you instead?
[21:12:19] <lilcoder> so far so good, i am getting famliar with training set and it kinda comes alongside with the usage of linear regression, i guess there is also neural network but that could be advanced
[21:12:24] <GeDaMo> I did a machine learning course on Coursera which was pretty good
[21:12:40] *** Joins: sheepduck_ (~sheepduck@user/sheepduck)
[21:12:48] <GeDaMo> The only thing I actually remember from it is K-means clustering though :P
[21:13:15] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.220) (Ping timeout: 256 seconds)
[21:13:20] <lilcoder> well eventually i am just trying out what ML engineers usually try at first, doing that house prices prediction thingy 
[21:13:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:13:36] <edgar-rft> GeDaMo: sounds as if the machine has learned more than you :-)
[21:13:43] <GeDaMo> Yes :
[21:13:44] <GeDaMo> :|
[21:14:11] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:14:49] <edgar-rft> that explains why the course was a 100% success :-)
[21:14:52] <lilcoder> 7-day trials :( on coursera
[21:15:09] <GeDaMo> Ah, it was free when I did it :(
[21:15:12] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[21:15:26] <GeDaMo> https://www.coursera.org/learn/machine-learning
[21:15:26] <lilcoder> well 7-day is good enough
[21:15:28] <bayaz> Title: Machine Learning 
[21:15:30] <edgar-rft> you only learn when you pay
[21:15:40] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Ping timeout: 272 seconds)
[21:15:47] <lilcoder> sometime, yes
[21:16:13] <flakland> what machine learning doesn't involve neural nets, and why do they hate meta language programmers
[21:16:17] <lilcoder> oh there is a "Full course, no cert"
[21:16:20] <lilcoder> yea good enough
[21:17:05] <GeDaMo> You might be able to find similar material elsewhere too
[21:17:51] <lilcoder> i tried youtube and it kinda sucks at explaining some mathematic relating to ML
[21:17:55] <edgar-rft> after you paid you learn that you wouln't have neeed to pay
[21:17:59] <GeDaMo> lilcoder: https://www.youtube.com/watch?v=PPLop4L2eGk&list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN
[21:18:00] <bayaz> Title: Lecture 1.1 ? What Is Machine Learning ? [ Machine Learning | Andrew Ng ] 
[21:18:53] <GeDaMo> If it's not the exact same material, it's likely to be close given it's the same person and the same university :P
[21:19:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:19:41] <lilcoder> yea that professor looks exactly the same as the guy on coursera
[21:19:51] <GeDaMo> Yeah, Andrew Ng
[21:20:03] *** Quits: kariosfox (~kariosfox@89.229.175.242) (Ping timeout: 256 seconds)
[21:20:28] <lilcoder> ok let's me see
[21:20:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:21:20] *** Quits: filename (~kilitary@188.242.105.134) (Quit: entering irc ...)
[21:21:28] *** Quits: XV8 (~XV8@c-73-148-120-152.hsd1.va.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:23:13] *** Quits: JimmyRustles (~Haddock@cpc119394-smal16-2-0-cust17.19-1.cable.virginm.net) (Ping timeout: 256 seconds)
[21:23:32] *** Joins: XV8 (~XV8@2601:5cb:c001:50:dc92:7130:8d6b:5842)
[21:23:34] *** Quits: XV8 (~XV8@2601:5cb:c001:50:dc92:7130:8d6b:5842) (Client Quit)
[21:24:06] *** Joins: filename (~kilitary@185.193.143.131)
[21:24:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[21:25:12] *** Quits: filename (~kilitary@185.193.143.131) (Read error: Connection reset by peer)
[21:27:56] <pyzozord> stupid youtube, just let me play the video
[21:28:05] <pyzozord> don't ask me for my credit card or id, wtf
[21:28:33] <pyzozord> are all my emails not enough of my personal data for you?
[21:29:19] <GeDaMo> It's never enough! :P
[21:29:39] *** Joins: filename (~kilitary@185.193.143.131)
[21:29:40] <GeDaMo> I don't get any questions like that though, are you logged in?
[21:29:50] <GeDaMo> I don't have a YT account
[21:30:22] <pyzozord> yeah I'm logged in but the video has "verify your age"
[21:30:46] <Sqaure> I often get questions from google lately "Which of these advertisers have you seen ads from lately?" As I just hammer "skip ad" i mostly have no clue what to reply.
[21:30:47] <pyzozord> when you click verify it firsts ask you to log in then it asks you to select if you want to provide your credit card or your personal id
[21:30:57] <Sqaure> from YOUTUBE.. i mean
[21:31:13] <GeDaMo> When that happens to me, I just do a search for the same title and see if there's a non-age restricted copy :P
[21:31:38] <GeDaMo> Are you not using an adblocker?
[21:31:43] *** Joins: beencubed (~beencubed@209.131.238.248)
[21:31:50] <Sqaure> i use android to watch youtube
[21:31:54] <Sqaure> tablet
[21:32:02] *** Quits: lilcoder (~whatever@118.69.128.37) (Quit: Leaving)
[21:32:05] <absentia> pollute google with misinformation
[21:32:13] <absentia> answer captcha controls correctly and corrupt the challenge
[21:32:27] <absentia> register multiple false identities
[21:32:33] <GeDaMo> I don't use Youtube on my Android phone but I believe there are apps
[21:32:39] <absentia> rah rah fight the powah
[21:32:43] <pyzozord> yeah I do use adblocker, maybe that's youtube's way to punish me
[21:32:44] <Sqaure> I wonder what they do with the info. Google HAL "-Not paying attention to our ADs, engage lackluster experience and recommend crap".
[21:33:18] *** Joins: tomathy (~jenova@user/quetzl)
[21:33:31] *** Joins: kariosfox (~kariosfox@89.229.175.242)
[21:33:37] *** Joins: Guest04 (~k@198-0-60-142-static.hfc.comcastbusiness.net)
[21:33:47] <ski> "Which of these advertisers have you seen ads from lately?" -- ads ? what ads ?
[21:33:49] <GeDaMo> I think there's one called Youtube Vanced
[21:33:50] <Guest04> you guys I'm on drugs right now. i'M so high
[21:34:02] <tomathy> Guest04: cool
[21:34:18] <GeDaMo> https://www.thegamer.com/moviepass-eye-tracking-ads/
[21:34:45] <GeDaMo> "New MoviePass App Will Use Eye Tracking To Force You To Watch Ads"
[21:34:50] * rindolf is now playing: 11The Beatles - 11Let it Be (11Blue Album 1967-1970 CD 2) [0703:52]
[21:34:50] <pyzozord> Sqaure: "... And is a felony punishable by death (by watching our ads without nonstop untily you die)"
[21:34:51] <GeDaMo> Is bayaz asleep? :|
[21:35:11] <tomathy> can i change your jukebox rindolf ?
[21:35:36] <rindolf> tomathy: no. :D
[21:35:42] <jinsun> GeDaMo: he's just ignoring you :D
[21:35:48] * rindolf is now playing: 11The Beatles - 11Here Comes the Sun (11Blue Album 1967-1970 CD 2) [0703:07]
[21:36:01] <pyzozord> it's insane how greedy bold these corporations have become
[21:36:02] <tomathy> nothign wrong with the music just wondering
[21:36:27] <GeDaMo> Companies collect personal details because they can
[21:36:36] <ski> hm .. i think it at least used to be that you could get age-restricted ones, by using a downloader
[21:36:43] <rindolf> tomathy: "let it be" is amazing
[21:37:01] <tomathy> https://www.youtube.com/watch?v=xviuC-0FwQ0 this is my fav song atm
[21:37:02] <bayaz> Title: Bee Gees - You Win Again 
[21:37:41] <flakland> who doesn't disconnect their face-facing camera? what do they do if they can't get eye tracking data, play two ads instead?
[21:37:43] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:37:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:37:55] *** Quits: Guest04 (~k@198-0-60-142-static.hfc.comcastbusiness.net) (Client Quit)
[21:37:56] <ejjfunky> rindolf: I love "let it be" -> "Imagine all the people, living in harmony!"
[21:38:17] <absentia> malthus has something to say about this
[21:38:17] <GeDaMo> The ads won't play if you're not looking at it :|
[21:38:57] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:39:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:39:18] <absentia> i reflexively avert my eyes when i contact advertising now
[21:39:22] <ejjfunky> GeDaMo: And they want to put a chip in your head. Imagine that.
[21:39:28] <absentia> i also have music in most of the time, so audio ads are also out of the question
[21:39:40] <absentia> evict corporate symbolism from your psyche
[21:39:52] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:40:03] * ski . o O ( <https://schemers.org/Miscellaneous/imagine.txt> )
[21:40:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:40:07] <absentia> shame about branding though
[21:40:11] <absentia> i guess everyone is a walking billboard these days
[21:40:13] <GeDaMo> I have a few Internet radio stations I listen to, most have no adverts
[21:40:25] <rindolf> ejjfunky: https://www.youtube.com/watch?v=xjT1q7f5ysA
[21:40:26] <bayaz> Title: Paul McCartney - C'Mon People (1993) 
[21:40:28] <GeDaMo> The only adverts I see now are on buses or bus shelters
[21:40:28] <absentia> GeDaMo: soma
[21:40:41] <absentia> di.fm also operates a good service
[21:40:45] <GeDaMo> I don't know what that is
[21:40:50] <absentia> both internet radio stations
[21:40:57] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[21:40:59] *** Quits: kariosfox (~kariosfox@89.229.175.242) (Read error: Connection reset by peer)
[21:41:01] <GeDaMo> Ah
[21:41:02] *** Joins: zaher (~zaher@37.48.177.209)
[21:41:09] *** Joins: flakland (~flaknet99@32.211.211.39)
[21:41:20] <pyzozord> ads and data collection has really gone too far
[21:41:24] <ski>   ... (Imagine all the people) (Living in parentheses) ... (Imagine those continuations) ... (Imagine all the people) (GCing all the world) ...
[21:41:29] <GeDaMo> https://www.liveradio.ie/stations/gem-radio-new-wave  https://www.liveradio.ie/stations/gem-radio-gold
[21:41:31] <bayaz> Title: Gem Radio New Wave | Live Radio 
[21:41:31] <bayaz> Title: Gem Radio Gold | Live Radio 
[21:41:53] <[itchyjunk]> radio in 2022?
[21:42:00] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:42:01] <[itchyjunk]> i get my audio through VR headset
[21:42:04] <GeDaMo> You don't like music?
[21:42:10] <[itchyjunk]> only in VR format
[21:42:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:42:15] <GeDaMo> :|
[21:42:26] * ski mostly listens to nonvocal music
[21:42:36] *** Joins: kariosfox (~kariosfox@89.229.175.242)
[21:42:48] <pulse> i mostly listen to nonmusical vocals
[21:42:51] <[itchyjunk]> lofi hiphop 
[21:43:24] <pyzozord> radio is cool
[21:43:29] <absentia> i get my music LIVE
[21:43:35] <absentia> the revolution will not be televised
[21:43:40] <pyzozord> I should listen to more radio
[21:43:46] <absentia> it will be available on twitch with 1080p and live chat for subscribers
[21:43:51] <[itchyjunk]> revolution will be televised before it even happens
[21:43:54] <[itchyjunk]> future is now
[21:44:04] * ejjfunky wants to listen to no sound music.
[21:44:13] <ski> <https://www.slayradio.org/home.php>
[21:44:13] <pyzozord> algorithms can't match human curated music 
[21:44:19] * absentia sparks a cigarette
[21:44:23] <[itchyjunk]> they can outperform it
[21:44:37] *** Joins: XV8 (~XV8@2601:5cb:c001:50:dc92:7130:8d6b:5842)
[21:44:43] *** Quits: filename (~kilitary@185.193.143.131) (Quit: entering irc ...)
[21:45:01] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:45:05] <pyzozord> in practice they never did for me, and I was a huge fan and early adopter of spotify
[21:45:19] <ski> could they predict what particular style you'd fancy, at a given occasion ?
[21:45:27] <[itchyjunk]> Yes but on average, it outperforms
[21:45:32] <[itchyjunk]> there will always be outliers
[21:45:36] <pyzozord> they focus on superficial
[21:45:45] <pyzozord> if it's not tagged they won't detect it
[21:45:56] <[itchyjunk]> ski, they can predict what type of a music in a given genere you might like
[21:45:58] <ski> superficially similar ? or superficial (?) music ?
[21:46:07] <[itchyjunk]> they generate based on generes you've already indicated to like
[21:46:09] <absentia> ejjfunky: no such thing
[21:46:12] <pyzozord> they seem poor or completley ignorant on the melody and emotions, and those are mostly the things I care about in music
[21:46:12] <absentia> see john cage, 4'33
[21:46:32] <absentia> [itchyjunk]: automated music curation is still very poor
[21:46:34] <pyzozord> it can be death metal or disco I couldn't care less what's the type
[21:46:37] * ski mostly has no idea about genrÃ©s
[21:46:38] <pyzozord> *kind
[21:46:50] <[itchyjunk]> absentia, outperforms humans generated playlists in youtube and spotify
[21:46:50] <ejjfunky> absentia: john cage is a genius. he should make more such songs.
[21:47:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:47:06] <absentia> [itchyjunk]: outperforms in what metric
[21:47:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:47:12] <pyzozord> it has to have the kind of emotional output and atmosphere that I want to enjoy at the moment
[21:47:15] <[itchyjunk]> user engagement
[21:47:19] <absentia> oh god
[21:47:23] <absentia> is that what music is now
[21:47:30] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:47:32] <[itchyjunk]> people click the playlist and keep it playing for longer
[21:47:44] <absentia> so do rats in a cage given a morphine drip
[21:47:46] <[itchyjunk]> what metric would you use to compare which music playlist is performing better?
[21:47:53] <pyzozord> no please, spotify is mcdonalds of music
[21:47:58] <pyzozord> terrible, just aweful
[21:47:58] <absentia> pyzozord: it is
[21:48:04] <absentia> it's just an endless stream of mass produced garbage
[21:48:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[21:48:06] *** Joins: aruns (~aruns@176.27.177.204)
[21:48:12] <[itchyjunk]> Spotify has the same music other platforms has.
[21:48:13] <absentia> i remember when hunting for an album was actually a process
[21:48:16] <[itchyjunk]> They don't make the music.
[21:48:18] <[itchyjunk]> They curate it.
[21:48:22] <absentia> [itchyjunk]: poorly
[21:48:25] <[itchyjunk]> Mc donalds doesn't curate the burgers
[21:48:28] <absentia> discover weekly is frequently a miss
[21:48:32] *** Joins: filename (~kilitary@185.193.143.131)
[21:48:32] <[itchyjunk]> absentia, you are entitled to your opinion
[21:48:33] <pyzozord> target group reacher, mass produced, algorithm optimized
[21:48:36] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[21:48:38] <[itchyjunk]> not worth much beyond that.
[21:48:38] <pyzozord> that's not what music is about
[21:48:50] <aruns> How do you tailor a CV / resume for a fintech developer role? My friend has said that they are currently hiring for developers at his trading firm and that I should send him my CV.
[21:48:53] <pyzozord> s/reacher/researched/
[21:49:07] <ejjfunky> Mc Donald curate animals in a farm. Just check it out on "Old McDonald has a farm"
[21:49:14] <absentia> goodhart's law writ large on the face of society
[21:49:16] *** Quits: PhilgrimLime (~thephilgr@151.40.115.120) (Remote host closed the connection)
[21:49:25] <absentia> "we improved user engagement by 40% last quarter"
[21:49:31] <pyzozord> full disclosure I do like mcdonalds sometimes
[21:49:44] <absentia> i am using spotify this very moment
[21:49:46] <pulse> i haven't been in mcdonalds in 20 years
[21:49:47] <absentia> it serves a purpose
[21:49:50] <[itchyjunk]> Shtting on a decent metric without providing an alternative is just posturing
[21:49:56] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[21:49:57] <absentia> but if i am seriously looking for music and not just something to put on in the background
[21:50:00] <[itchyjunk]> "i am too good for X" is fine snetiment
[21:50:01] <absentia> the SNR is very low
[21:50:05] <[itchyjunk]> doesn't say much about X.
[21:50:07] <aruns> Most of my experience working with financial technology in my current role is integrating different payment gateways and resolving live payment issues.
[21:50:39] *** Joins: JimmyRustles (~Haddock@cpc119394-smal16-2-0-cust17.19-1.cable.virginm.net)
[21:50:48] <absentia> aruns: if you have domain expertise or knowledge in finance that would be good to highlight
[21:50:51] <pyzozord> aruns: no idea, I'd imagine they care about correctness and performance
[21:50:54] <absentia> if you want a buzzword, "FIX"
[21:51:02] <absentia> i don't actually know what that is
[21:51:20] <absentia> https://www.fintechfutures.com/us/tag/fix-protocol/ see this floating around a lot
[21:51:22] <bayaz> Title: FIX Protocol - FinTech Futures 
[21:51:32] <ski> "just something to put on in the background" -- people do that ?
[21:51:45] <pyzozord> ski: every day
[21:51:55] <absentia> ski: absolutely
[21:52:01] <pyzozord> I had a phase where I didn't listen to absolutely anything, I should do that more
[21:52:02] <absentia> my day is filled with music, sun up till sun down
[21:52:06] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:52:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:52:33] <pyzozord> with music it's more enjoyable for sure
[21:52:36] <aruns> Thanks absentia 
[21:52:38] <ski> well, i guess i could possibly understand it, e.g. if some music, (mostly) any music, helps them go to sleep or something
[21:52:45] <pyzozord> but also kind of a bit more draining
[21:52:47] <pulse> i don't listen to music a lot but when i do it's music from old games
[21:52:51] <pulse> either that or boris brejcha
[21:53:19] <pyzozord> ski: for the last week I've been listening to glitch mob albums all working day
[21:53:23] <ski> (although, iirc, at least some people who i've chatted with, you've mentioned doing something like that, mentioned putting on particular ones)
[21:53:23] <aruns> absentia: Yeah, I usually have Bloomberg in the background, so have quite a bit of knowledge on the financial services sector.
[21:53:27] <absentia> ski: you ever hear how some people like the coffee shop ambiance
[21:53:31] <absentia> aruns: surveillance!
[21:53:34] <ejjfunky> anybody got a "coding" songs you rely on while coding?
[21:53:39] <aruns> Yup lol absentia 
[21:53:44] <ski> absentia : mhmm
[21:53:44] <aruns> Tom, Jonathan and Lisa
[21:53:57] <pulse> ejjfunky, https://www.youtube.com/watch?v=hSO2CK-T8bI
[21:53:58] <bayaz> Title: Boris Brejcha ? Corvex ? Hans Zimmer ? Hozho ? Solomun (Code Selection) 
[21:54:09] <absentia> ski: i feel it's the same thing - music serves that same purpose of predictable ambiance
[21:54:15] <absentia> no sudden noises demanding immediate attention
[21:54:17] <absentia> (usually)
[21:54:21] <aruns> absentia: I presume being good at maths would naturally help for fintech developer roles too
[21:54:23] <ski> (also, i suppose "people do that ?" wasn't so much incredulous, as wondering why)
[21:54:35] <absentia> ski: yeah i was just giving you insight into maybe why
[21:54:41] <[itchyjunk]> aruns, depends on what math and whre in fintech
[21:55:02] <pyzozord> ski: back when I was working in offices, it was a way to silence out people talking around me
[21:55:03] <ejjfunky> pulse: techno ...
[21:55:04] <[itchyjunk]> knowing about some topoligical space a lot might not help with your fintech
[21:55:04] <absentia> aruns: maybe if you want to work in quants
[21:55:13] <pulse> ejjfunky, best music for coding https://www.youtube.com/watch?v=31hh4w9OVck
[21:55:14] <bayaz> Title: Deep Organic Techno Mix | Miyagi, Elfenberg, Dominik Eulberg, Zigan Aldi, TORTEKA 
[21:55:21] <absentia> aruns: honestly in fintech all the mathy types probably have their shit packaged up into a black box
[21:55:22] *** Quits: XV8 (~XV8@2601:5cb:c001:50:dc92:7130:8d6b:5842) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:55:24] <pyzozord> ski: otherwise I was too distracted at everything around me
[21:55:26] <ski> i guess i'm more likely to loop through the same tune or album for a few hours without end (or until i've decided i've had enough)
[21:55:32] <absentia> the software devs just hook the pipes up to the black box
[21:55:33] <pyzozord> ski: however now I do it just because I enjoy it
[21:55:38] <absentia> and make sure they never leak
[21:55:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:55:47] *** Joins: Guest10 (~k@198-0-60-142-static.hfc.comcastbusiness.net)
[21:55:52] <absentia> sometimes the black box is very large...
[21:55:58] <[itchyjunk]> ski, i actively listen to music at times
[21:56:02] <pyzozord> ski: I do the same, it can be a single album whole day or week, or even a single song
[21:56:02] <[itchyjunk]> when i am in discovery phase
[21:56:08] *** Quits: Guest10 (~k@198-0-60-142-static.hfc.comcastbusiness.net) (Client Quit)
[21:56:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:56:12] <ejjfunky> pulse: for the 1st one, i won't be needing coffee with that base drum thumping like that.. lol
[21:56:12] <pyzozord> best without vocals
[21:56:13] <[itchyjunk]> and i passively listen to it when i use it for background.
[21:56:23] <ski> absentia : "no sudden noises demanding immediate attention" -- does it make a difference if it's music you know from before or not ? or it's enough if you know the general style ?
[21:56:26] *** Joins: XV8 (~XV8@2601:5cb:c001:50:dc92:7130:8d6b:5842)
[21:56:56] <ski> (ugh, open offices :( ..)
[21:56:58] <absentia> ski: if i really require focus and am not listening to the music for its own sake - i usually have unobtrusive, non-vocal, ambiant/electronic music going
[21:56:58] <pulse> ejjfunky, that's the idea
[21:57:20] <absentia> but that mode of listening is far different from me cracking open, say, Miles Davis' Kind of Blue to a glass of scotch
[21:57:23] <ski> [itchyjunk] : mhm, i see
[21:57:31] <absentia> where my focus is actually on the music and _nothing else_
[21:57:53] * ski nods to pyzozord
[21:57:58] <ejjfunky> absentia, Miles Davis. you're old school. 
[21:57:58] <absentia> sometimes a real banger shows up in my queue
[21:57:59] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[21:58:01] <absentia> and I might jam along
[21:58:05] <absentia> or explore similar music
[21:58:06] *** Quits: kariosfox (~kariosfox@89.229.175.242) (Ping timeout: 272 seconds)
[21:58:11] <[itchyjunk]> But some people will use say, hiphop/rap as ambient music.
[21:58:23] <[itchyjunk]> but curating all new music in genre like that manually is near impossible
[21:58:27] <absentia> ejjfunky: jazz is my least understood genre
[21:58:28] <[itchyjunk]> would be a full time job.
[21:58:30] <pyzozord> even metal
[21:58:35] <absentia> they have the most intricate language
[21:58:45] <[itchyjunk]> that's why ML models are so popular in those niche
[21:58:46] <ski> absentia : yea, that makes sense
[21:58:47] <pyzozord> I never understood how some programmers can listen to metal while coding
[21:58:55] <pyzozord> that is so distracting
[21:59:09] <[itchyjunk]> It's not really distracting to everyone.
[21:59:16] <absentia> i actually love listening to metal while coding
[21:59:17] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::82dc) (Ping timeout: 240 seconds)
[21:59:18] <[itchyjunk]> If you like that genre, that works as your background music.
[21:59:18] <absentia> it's a favorite
[21:59:19] <pyzozord> I suppose
[21:59:22] <absentia> but it has to be metal i've listened to before
[21:59:32] <ejjfunky> absentia, if i could code like a jazz music. I wont be need testings. :D
[21:59:44] <deniska> I can't listen to any music while writing code
[21:59:45] <[itchyjunk]> Like metallica can be fairly relaxing.
[22:00:10] <absentia> ejjfunky: i listen to electronic music so i can larp as a robot
[22:00:14] <absentia> it makes my code more correct
[22:00:18] <[itchyjunk]> deniska, i have to pause the music when i am really thinking about a problem :P
[22:00:36] <pulse> coding music -> https://www.youtube.com/watch?v=7MSFW8pZ-_4
[22:00:37] <bayaz> Title: Unreal Tournament Soundtrack (Full) 
[22:00:41] <pyzozord> sometimes me too, but very rarely actually
[22:00:41] <absentia> nice
[22:00:42] <flakland> any instrumental music can work,  unless theres saxophone yuck. one day youtube employees might let the 'instrumental jazz "without saxophone"' work, wait who ami fooling
[22:00:56] <absentia> https://www.youtube.com/watch?v=QliQ0livbeQ modtune music for a hacking video game
[22:00:57] <bayaz> Title: Uplink - Soundtrack 
[22:00:58] <pyzozord> I don't think about these kinds of problems too much, those really puzzley ones
[22:01:00] <absentia> doesn't get much better
[22:01:03] <pulse> absentia, nice, i love uplink
[22:01:08] <absentia> pulse: sweet
[22:01:13] *** Quits: 029AAAHVX (~l4s8g@pd9e621d0.dip0.t-ipconnect.de) (Quit: 029AAAHVX)
[22:01:14] <deniska> most of my programming lately consisted of a hour of thinking and then changin/adding/removing 5 lines of code :)
[22:01:21] <pulse> one of the first games i made was a half-assed uplink clone made in vb5
[22:01:22] <[itchyjunk]> like with classical music, it's not just the music, but also the preformer
[22:01:26] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d) (Read error: Connection reset by peer)
[22:01:27] <[itchyjunk]> you might like some and nother others.
[22:01:33] <[itchyjunk]> AI curates lists help with those
[22:01:38] <[itchyjunk]> hence popularity in youtube
[22:01:39] <pyzozord> the puzzley problems make my head hurt :P If I do more than few hours
[22:02:08] <absentia> [itchyjunk]: spotify seems to have trouble identifying that different releases of the same recording are actually the same song
[22:02:09] <[itchyjunk]> This for example
[22:02:09] <[itchyjunk]> https://www.youtube.com/watch?v=O0_gw2Lillg
[22:02:11] <bayaz> Title: Zolt?n Kod?ly, Sonata in B minor for solo cello, Op.8, mvt. III, performed by Sebastian B?verstam 
[22:02:13] <absentia> e.g. if a song shows up in a compilation
[22:02:16] <absentia> if a remaster is released
[22:02:16] <[itchyjunk]> without youtube, i would never have come across it.
[22:02:18] <absentia> special editions
[22:02:29] <ejjfunky> deniska, i like how you work. that's what a real programming should do it. me, im monitored for my wpm. :P
[22:02:33] <pyzozord> well depends on how puzzley they are I guess. It's kind of individual experience and how good you are with that specific kind of puzzles
[22:03:26] <ejjfunky> anything less than 30 wpm, and there'll an electric shock. then i'll sequell like a monkey while i chow down another piece of banana. :D
[22:03:31] <deniska> ejjfunky: well, that's the difference between a greenfield project and maintaining a legacy codebase
[22:03:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:04:08] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[22:04:20] <pyzozord> ejjfunky: monitored for wpm?
[22:04:25] <ejjfunky> deniska, i'd love greenfield projects even when the grass is greener on the other side of the fence.
[22:04:32] <pyzozord> that sounds really unhealthy
[22:04:38] <pyzozord> and also kind of stupid
[22:05:01] <ejjfunky> haha yea, with the analyst sitting right in front of me. not exactly electric shock but dull stares.
[22:05:12] <absentia> you have an analyst watch you code?
[22:05:15] <ski> absentia : oh, Skaven :)
[22:05:16] <absentia> jeez
[22:05:20] <ejjfunky> "you said you gonna get this done in ..."
[22:05:24] <absentia> ski: only familiar with his work through uplink
[22:05:29] <ejjfunky> absentia, yea. had.
[22:05:36] <absentia> but it sort of opened me into modtunes or modmusic or w/e
[22:05:52] <pyzozord> ejjfunky: are they aware that you cannot make accurate predictions on work you never done before, and most things you do are things you never done before?
[22:05:56] <ski> tracker music, and demoscene music
[22:06:03] <absentia> ther we go
[22:06:28] <absentia> keygens had the best music back in the day
[22:06:30] <ejjfunky> pyzozord, exactly. it's one of those analyst freshly graduated from a top tier business schools.
[22:06:49] <pyzozord> oof, that sounds like really bad PITA
[22:06:50] <absentia> ejjfunky: pad your estimates heavily
[22:07:06] <absentia> like 4x
[22:07:10] <absentia> let them negotiate it down
[22:07:13] <pyzozord> yeah
[22:07:19] <ejjfunky> they treated the coding project as one of their mba projects.
[22:07:40] <ejjfunky> also trying out that project management skills they learnt in class.
[22:07:45] <absentia> lmfao
[22:07:48] <ski> some of the mods i listen to only seem to be available on YouTube as occuring as keygen music. (although i didn't know they occured like that before. not that it's a huge surprise)
[22:07:51] <absentia> imagine if i took my book learning to the industry
[22:07:58] <absentia> "so first we're gonna sketch out a uml class diagram"
[22:08:00] <ejjfunky> they want to manage it down to the minutes.
[22:08:06] <ejjfunky> which was insane.
[22:08:11] <pyzozord> fresh grad from a top tier business school is very likely having very high opinon of themselves and very little actual understanding of how real life works
[22:08:13] <absentia> (sequence diagrams have some utility)
[22:08:18] <pyzozord> avoid at all cost
[22:08:25] <absentia> i worked with someone from oxford
[22:08:29] <absentia> that was his only distinguishing quality
[22:08:35] <absentia> mentioned it at all opportunities
[22:08:49] <ejjfunky> absentia, imagine a team like that breathing down your neck.
[22:09:09] <pyzozord> ejjfunky: sounds completly insane, I don't do less than 4h
[22:09:27] <pyzozord> ejjfunky: even if I think task will take literally 5 mintutes, my minimum resolution is 4h
[22:09:40] <pyzozord> and it grows in expnentially
[22:09:54] <WhO> what are simplest ways to open the webpage (from browser-again) i have stored into hard disk?
[22:09:55] <ejjfunky> i had it at least 12 hours a day, 6 days a week. only break was sunday.
[22:10:05] <pyzozord> 4h, 1d, 2d, 3d, week, two weeks and too big
[22:10:12] <absentia> WhO: go to your address bar
[22:10:15] <pyzozord> that's my only estimations pretty much
[22:10:16] <absentia> WhO: file:///path/to/file
[22:10:29] <absentia> instead of http://my.site.on.the.internet.and.not.on.my.hard.disk
[22:10:42] *** Quits: grogu (~quassel@user/grogu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:10:55] <ski> your browser might also have an "Open (local) File" thing
[22:10:57] *** Joins: grogu (~quassel@user/grogu)
[22:10:57] <WhO> i want to open http://blabla page of that stored page on hard-disk
[22:11:02] <ejjfunky> good thing though it lasted only a few months.
[22:11:08] <absentia> do i still have whiskey
[22:11:12] <ejjfunky> i dont know how id survived if longer.
[22:12:21] <pyzozord> i don't know anything about them but just "fresh grad from top tier business school haggling with me for minutes of my time and breathing down my neck"... This sounds so punchable
[22:12:36] <pyzozord> the very definition of punchable :P
[22:12:40] *** Joins: Zeturic (~Orimendix@50-25-77-41.krmtcmta02.res.dyn.suddenlink.net)
[22:12:40] *** Joins: kariosfox (~kariosfox@89.229.175.242)
[22:12:44] <ski> WhO : yes, try above suggestions ?
[22:13:11] <ejjfunky> pyzozord, dont punch me. im just a messenger.
[22:13:13] <GeDaMo> WhO: open your file browser, go to where you saved it, double click
[22:13:27] <WhO> ski, i dont want to open local thing, instead i want to open equivalent webpage from web
[22:13:29] <WhO> GeDaMo, 
[22:13:30] <pyzozord> ejjfunky: not you, the business grad
[22:13:50] <ejjfunky> i know. grads. and they were the employer
[22:14:04] <ski> WhO : oh, you *don't* want to open your locally stored copy ? then just go to the address from which you downloaded it ?
[22:14:05] <GeDaMo> WhO: do you know whereyou got it from?
[22:14:07] *** Joins: aruns_ (~aruns@176.27.177.204)
[22:14:23] *** aruns is now known as Guest8705
[22:14:23] *** Quits: Guest8705 (~aruns@176.27.177.204) (Killed (strontium.libera.chat (Nickname regained by services)))
[22:14:23] *** aruns_ is now known as aruns
[22:14:51] <ski> (hint : if you don't know where you got it from, then there might not be much hope)
[22:14:54] <WhO> ski, there were several pages more than 100 such stored webpages. i dont remember all of them now
[22:14:58] <WhO> GeDaMo, ^
[22:15:09] <ski> (perhaps it'd be in the history of the browser (or otherwise) from which you downloaded it)
[22:15:20] <GeDaMo> You can try opening the html file in a text editor and see if the location is mentioned
[22:15:22] <WhO> older than couple of years history
[22:15:43] <GeDaMo> Look for http: or https: 
[22:16:14] * ski usually makes an `url.txt' file to store along with such a mirrored archive, indicating source address, and possibly some other relevant data
[22:16:17] *** Quits: emf (~emf@2620:10d:c090:400::5:5ef1) (Ping timeout: 240 seconds)
[22:16:19] <pyzozord> The most frustrating thing, kids, thinking they are smarter than everyone around. Know enough to be dangerous, not enough to be helpful
[22:16:32] <absentia> pyzozord: yep
[22:16:40] <absentia> it is terrifying talking to web developers these days
[22:17:15] <pyzozord> I don't know but I don't think I was like that in my early twenties
[22:17:23] <ejjfunky> pyzozord, totally agree.
[22:17:35] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:17:40] <GeDaMo> I thought I was smarter than I actually am :P
[22:17:43] <pyzozord> I always respected more experienced people
[22:18:00] <absentia> the industry has a bias against age
[22:18:03] <absentia> and therefore experience
[22:18:09] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:18:11] <absentia> and it's very fashionable to reinvent the wheel
[22:18:23] <ski> often badly
[22:18:28] <ejjfunky> imo, mbas are taught to be slave drivers with more subtle whips.
[22:18:46] <pyzozord> that's so unfair because I always get the short end of the stick. When I was younger I was listening to more experienced people. And now the younger folks around are so arrogant towards me
[22:19:03] <absentia> pyzozord: push back
[22:19:06] <absentia> viciously expose ignorance
[22:19:11] <ejjfunky> you'd still hear the cracking and the tearing flesh.
[22:19:14] <absentia> and if it turns out you're wrong, then you've learned something
[22:19:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:19:25] <ejjfunky> feel the tearing of the flesh, i mean.
[22:19:29] *** Joins: KillerWasp (~KillerWas@user/killerwasp)
[22:20:00] <absentia> there is something satisfying about being able to socratically point someone to a flaw in their mental model
[22:20:06] <pulse> vdamewood, you here?
[22:20:07] <absentia> ... if it happens
[22:20:07] <pyzozord> I am very sensitive to even the most subtle whips
[22:20:13] <KillerWasp> hello random fervent satanic deranged guys
[22:20:14] <pyzozord> I smell them miles away
[22:20:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:20:25] <ejjfunky> pyzozord, i dont know whether it's a generational problem but my take is, it's the failing educational system.
[22:20:35] *** Joins: zetaE (~alpmons@139.47.114.154)
[22:20:39] <zetaE> greets
[22:20:44] *** Joins: hololeap (~hololeap@user/hololeap)
[22:21:01] <zetaE> a rust article in phoronix got everybody riled up in the comments
[22:21:13] <absentia> i don't mind adopting a gadfly-esque persona when people are particularly obstinate
[22:21:22] <pyzozord> ejjfunky: I think it's a combination of the z gen being more cocky on average, and me generally being less cocky than average of the y gen
[22:21:25] <KillerWasp> educational? you mean cattle factory?
[22:21:30] <GeDaMo> zetaE: were they for it or against it? :P
[22:21:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:21:56] <zetaE> for a curious into programming, what's reccomended? C or Rust?
[22:22:09] <KillerWasp> or factory of workers, whatever you like to call it.
[22:22:16] <absentia> C has historical significance and is also more dangerous
[22:22:19] <KillerWasp> zetaE: C
[22:22:21] <pulse> zetaE, C
[22:22:22] <ejjfunky> KillerWasp, i wish. At least the cattles get transformed into steaks.
[22:22:23] <KillerWasp> obiously
[22:22:23] <absentia> Rust has more "best practice" baked into the language
[22:22:28] *** Joins: suss` (~user@user/suss)
[22:22:36] <pulse> rust has no for loops :D
[22:22:39] <absentia> pulse: good
[22:22:42] <pulse> :(
[22:22:45] <KillerWasp> rust has no for programmers
[22:22:46] <absentia> muahahahahahaha
[22:22:56] <zetaE> GeDaMo: pro-C and pro-Rust stabbing each other. So I got no conclusive answer from the comments.
[22:22:57] <pulse> KillerWasp, forgrammers
[22:23:04] <user51> my assumption is that language matters less than being able to translate whatever it is you're trying to do into code
[22:23:06] <KillerWasp> ejjfunky: yes, steaks is good, lol
[22:23:16] <pulse> zetaE, flip a coin
[22:23:24] <pulse> heads = rust tails = c
[22:23:45] <user51> also, why do people get so caught up on c?
[22:23:50] <ejjfunky> absentia: another of their favorite buzzword, "best practice". they know how to say the word like they mean it while having no clue what it is.
[22:23:59] <absentia> lmao
[22:24:04] <KillerWasp> zetaE: This is not a red and yellow team type of competition, I draw from experience.
[22:24:20] *** Quits: suss (~user@user/suss) (Ping timeout: 256 seconds)
[22:24:27] <user51> pulse: flip a coin? you mean coinary search? :P
[22:24:40] <ejjfunky> "your code failed. you've been on it for a couple of hours. Are you sure you're following the best practices?"
[22:24:52] <absentia> "yeah, but the last guy sure wasn't"
[22:24:53] <pulse> every IDE should come with Clippy
[22:25:04] <deniska> user51: ever heard a person doing a terrible investment of time and/or money and then justifying it
[22:25:15] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-c0be-54b3-db2c-85e9.res6.spectrum.com)
[22:25:16] <deniska> user51: like "macbook is a really nice laptop and comes with a real unix system"
[22:25:25] <pulse> hey, macbook really is a nice laptop
[22:25:28] <pulse> i wanna get one
[22:25:49] <zetaE> my question really about Ruist is the following, wasn't ADA supposed to be a bug-free language derived from C? Then why aren't pro-Rust programming in ADA rather than making up a new language?
[22:25:53] <deniska> similarly with C, they don't want to admit they made some bad decisions :)
[22:25:59] <absentia> zetaE: good question
[22:26:09] <deniska> zetaE: ada has rather unfortunate licensing story
[22:26:14] <flakland> ALGOL -> Ada
[22:26:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:26:38] <deniska> and rust, for a lack of a better word, is somewhat less arcane
[22:26:45] <absentia> eh
[22:26:46] <ejjfunky> absentia: hehehe. yea, that's an answer for sure. :D
[22:26:48] <user51> deniska: i think starting with c definitely gave me a few bumps, but honestly speaking, in the long term i think initial language matters less
[22:27:02] <flakland> C++ -> Rust
[22:27:09] <KillerWasp> user51: I'll put it another way. Which one do you trust more? 1) In a language that had 30 years of use and evolution, its purpose is practical for programmers. 2) In a language that has appeared recently, its purpose is lucrative by companies.
[22:27:14] <deniska> user51: ah, certainly, the first language hardly matters if you decide to stick with programming for whatever reason
[22:27:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:27:37] <zetaE> ok thanks for all that said C. I trust the consensus in this channel
[22:27:38] <absentia> i don't know
[22:27:47] <absentia> there are some very wrongheaded habits you can pick up from the wrong language
[22:27:47] <deniska> (I guess it pays well, wasn't that much of the case 20 something years ago)
[22:27:53] <absentia> for example - javascript developers conflating objects with hashmaps
[22:27:57] <absentia> and not understanding what the difference is
[22:28:01] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[22:28:02] <absentia> also conflating JSON with objects
[22:28:09] <deniska> Because in js it's literally the same thing :P
[22:28:12] <user51> like, when they came up with algol, did they say "let's wait for python"? :P
[22:28:19] <absentia> deniska: but it's not true in general, which is my point
[22:28:29] <absentia> you assume particulars to hold in general because that's all you've seen
[22:28:36] <ejjfunky> for C, i find prinf to be a blessing. :D beats cout << any day << endl;
[22:28:50] <deniska> absentia: that's true for people with little experience in general
[22:28:55] <ejjfunky> opps, i forgot the std.
[22:28:58] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:29:08] <deniska> absentia: if you started with C, chances are you never saw a hashmap until you tried a better language :D
[22:29:09] <absentia> deniska: perhaps we should offer more guardrails, or better mental models to people with little experience
[22:29:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:29:31] <user51> deniska: nah, they do a hashing function in K&R
[22:29:37] <absentia> user51: was going to say
[22:29:39] <KillerWasp> deniska: yes, js, html, php, java, css, and others, and it's still a nightmare with so many bugs, it never works first time.
[22:29:46] <zetaE> I recently started understanding "printf", but the stand alone used in bash shell. It's pretty neat.
[22:30:11] <deniska> user51: a hashing function or a hashmap?
[22:30:17] <KillerWasp> It takes trying different ways until it works, if you're lucky.
[22:30:21] <ejjfunky> deniska: exactly. i think for starter, C and some modern funcational language. then you get the best of both worlds.
[22:30:37] <absentia> deniska: you construct one from the other
[22:30:54] <absentia> building a hashing function though is probably not advised
[22:31:02] <deniska> absentia: `foo = {}` here, I constructed a hashmap in 90% of languages :D
[22:31:10] <absentia> debateable
[22:31:33] * absentia is thinking of the ADT / data structure distinction again...
[22:32:02] <deniska> Dunno, I learned basics of C mostly as a historic curiousity, and, well, you are still likely to bump into C code on many occasions
[22:32:02] <absentia> for instance i can implement an object as an association list
[22:32:04] <absentia> not a hashmap
[22:32:11] <user51> deniska: yeah, 'static struct nslist *hashtab[HASHSIZE]; /* pointer table */'
[22:32:16] <absentia> you will get different asymptotics for the object operations
[22:32:19] <user51> 6.6 table lookup
[22:32:21] <absentia> but semantically it is the same
[22:32:31] <pulse> i like C because it makes computer go brrr
[22:32:33] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[22:32:37] <user51> wow, it's nice to see how this makes sense now
[22:32:51] <user51> when i first read it i had no idea what was going on
[22:33:13] <deniska> user51: so you can DIY a hashtable if you read a good book, or you can use a hashtable someone else wrote (but then adding in additional libraries in C is somewhat of a nightmare)
[22:33:31] <user51> or you can use dicts in python :P
[22:33:35] *** Joins: zaher_ (~zaher@37.48.185.200)
[22:33:37] <deniska> user51: so you'll end up avoiding using a hashmap even for usecases it's good for
[22:33:52] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[22:34:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[22:34:24] <ejjfunky> user51: python is a good choice.
[22:34:32] <deniska> You may argue that in languages with easy access to hashmaps you end up using them for things they're not really suitable for :P
[22:34:47] <deniska> But the thing about hashmaps is even if they're not good, they're still sorta ok :P
[22:34:48] <absentia> deniska: that would only further reinforce my point
[22:35:02] <absentia> which is that you can ingrain the wrong habits by learning the wrong language
[22:35:05] <rtypo> zetaE: huh, printf does work in the shell. neat, learned something
[22:35:07] <absentia> except there is no "right" language in general
[22:35:12] <deniska> and don't fail as horribly as array full scan when input grows
[22:35:13] <absentia> therefore, one should learn a plurality of langauges
[22:35:15] <absentia> QED
[22:35:16] <user51> deniska: that's a dig at my awk usage, eh? :D
[22:35:17] *** Quits: zaher (~zaher@37.48.177.209) (Ping timeout: 240 seconds)
[22:35:34] <zetaE> rtypo: you wheren't aware?
[22:35:36] <deniska> user51: awk is a fun hammer to find nails for :P
[22:35:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[22:35:56] <zetaE> *weren't
[22:36:05] <rtypo> zetaE: had no idea, I always just used echo
[22:36:13] <user51> i always felt awk needed another release, or at the very least true multidimensional arrays
[22:36:43] <deniska> user51: I guess they don't really feel like competing with perl/python/js :)
[22:36:54] <deniska> awk does its own little thing well
[22:37:26] <user51> i did a few silly things in awk, but you hit ugh fields quite fast
[22:38:02] *** zaher_ is now known as zaher
[22:38:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:39:47] <user51> oh, i did shunting yard today. but since awk blows for larger programs, i used three seperate scripts. lex|parse|calc
[22:40:37] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 240 seconds)
[22:41:25] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[22:41:34] <user51> hm, i think i can improve it, but that's exactly the ugh moments i mentioned :|
[22:44:26] <ejjfunky> Nice. Mad Headroom is getting real now.
[22:44:31] <zetaE> user51: awk with GPU offload
[22:45:03] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:03] <user51> what does that achieve?
[22:45:10] *** Joins: l4s8g (~l4s8g@pd9e621d0.dip0.t-ipconnect.de)
[22:45:16] <GeDaMo> https://github.com/simdjson/simdjson
[22:45:17] <bayaz> Title: GitHub - simdjson/simdjson: Parsing gigabytes of JSON per second 
[22:45:31] <zetaE> user51: jk, I made that up
[22:47:16] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:49:00] <GeDaMo> https://www.microsoft.com/en-us/research/publication/data-parallel-finite-state-machines/
[22:49:00] <bayaz> Title: Data-Parallel Finite-State Machines - Microsoft Research 
[22:49:26] <zetaE> GeDaMo: what does that do?
[22:49:48] *** Joins: PhilgrimLime (~thephilgr@151.40.115.120)
[22:49:49] <absentia> i need to get around to learning simd
[22:49:51] <absentia> i actually have a use case
[22:50:36] <GeDaMo> Some regex / parsing uses finite state machines, this allows them to be vectorized
[22:50:58] <absentia> encodes a state machine in a bytestring?
[22:51:35] <absentia> never seen research publication by powerpoint before
[22:51:58] <GeDaMo> There's a PDF, View Publication, top left
[22:52:10] *** Joins: merijn (~merijn@c-001-002-004.client.esciencecenter.eduvpn.nl)
[22:52:12] <GeDaMo> The Powerpoint seemed strange to me too :P
[22:52:18] *** Joins: XV9 (~XV8@2601:5cb:c001:50:e0f2:76b6:d7e0:55b)
[22:52:25] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:52:33] <absentia> do i not have the correct javascripts or something
[22:52:35] <absentia> i see no such link
[22:52:41] <ejjfunky> i respect that. they're at least eating their own dog food.
[22:52:47] <GeDaMo> https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos302-mytkowicz.pdf
[22:52:47] <bayaz> Type: application/pdf Size: 288.6 kB 
[22:52:53] <absentia> GeDaMo: thanks
[22:53:09] <GeDaMo> Just above the abstract on the left
[22:53:09] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[22:53:13] *** Joins: Atque_ (~Atque@user/atque)
[22:53:38] <absentia> oh
[22:53:43] <absentia> fuck me
[22:53:45] <ejjfunky> frankly speaking, i never understood FSM. 
[22:53:46] <GeDaMo> Yeah, weird 
[22:54:04] <ejjfunky> especially the loop that points back to itself.
[22:54:36] <user51> recursion? :P
[22:54:40] <GeDaMo> That just means repeated input
[22:54:54] <ejjfunky> GeDaMo: ic. cool.
[22:54:55] *** Quits: Atque_ (~Atque@user/atque) (Remote host closed the connection)
[22:54:56] <GeDaMo> Like a*
[22:55:03] <GeDaMo> Accept all the as
[22:55:07] *** Quits: jaysicks (~jaysicks@185-29-82-222.pool.digikabel.hu) (Remote host closed the connection)
[22:55:24] <ejjfunky> ahh ok. if you put it that way, yea. got it.
[22:55:34] *** Quits: XV8 (~XV8@2601:5cb:c001:50:dc92:7130:8d6b:5842) (Ping timeout: 260 seconds)
[22:55:35] <absentia> (probably a+ unless it's an e-nfa ;)
[22:55:51] <ejjfunky> user51, recursion. sounds fun. :D
[22:56:02] *** Joins: jaysicks (~jaysicks@185-29-82-222.pool.digikabel.hu)
[22:56:13] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:56:14] *** Joins: Atque (~Atque@user/atque)
[22:56:18] <user51> i feel the same tbh, without a solid explanation it feels like you now have 3 languages to deal with - 1. english 2. picture language 3. code
[22:56:22] <ejjfunky> absentia, now you're talking funny. :D
[22:57:08] <ejjfunky> user51: exactly. 
[22:57:15] <absentia> ejjfunky: an e-nfa is a particular kind of FSM where one input may be recognized in multiple ways (NFA), and also accepts empty strings (the e, for epsilon)
[22:57:19] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Remote host closed the connection)
[22:57:46] <ejjfunky> absentia: ic
[22:57:50] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[22:57:55] *** Quits: smoke_ (~smoke@user/smoke) (Remote host closed the connection)
[22:57:56] <absentia> though they are completely equivalent to DFAs
[22:58:15] <absentia> which are what are often presented when discussing FSMs
[22:58:16] *** Joins: yatakrad (~bangbrosy@85.236.188.43)
[22:58:24] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[22:58:31] <ejjfunky> what is DFA?
[22:58:35] *** Joins: newpy (~newpy@206.168.231.90)
[22:58:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:58:42] <absentia> ejjfunky: deterministic finite automaton
[22:58:45] <GeDaMo> https://en.wikipedia.org/wiki/Thompson%27s_construction
[22:58:46] <bayaz> Title: Thompson's construction - Wikipedia 
[22:58:51] <ejjfunky> oh ok
[22:59:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[22:59:33] *** Quits: c2a1 (~c2a1@2607:fb90:1c3a:7552:e4b:2220:78fe:4291) (Ping timeout: 256 seconds)
[22:59:41] <ejjfunky> good thing you provided that. first result on google is: Dairy Farmers of America
[22:59:50] <absentia> it's those charts you see with the circles and arrows going between them and other circles
[22:59:59] <absentia> you will see them discussed when going into how regular expressions work
[23:00:24] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:00:41] <user51> ejjfunky: and just in case, 'thompson automation awk' is from a different thompson :P
[23:01:13] *** Joins: Atque (~Atque@user/atque)
[23:01:37] <ejjfunky> absentia: this is what i hate about it. when they talk about the basics, they don't show the loop that points itself. it's when they do some examples that they showed up.
[23:01:50] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:fd0b:cec4:ff26:7e50)
[23:01:57] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Ping timeout: 240 seconds)
[23:01:58] <ejjfunky> with no explanation. like wtf. 
[23:02:10] <GeDaMo> "Regular Expression Search Algorithm" 1968, Ken Thompson https://www.import.io/wp-content/uploads/2016/01/p419-thompson.pdf
[23:02:11] <bayaz> Type: application/pdf Size: 533.4 kB 
[23:02:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[23:02:26] <zetaE> GeDaMo: intriguing article
[23:02:34] <GeDaMo> Which one? :P
[23:02:37] <zetaE> the wiki one
[23:02:57] <ejjfunky> it says "Rules" here. obviously, it's not comprehensive.
[23:03:06] <GeDaMo> https://www.drdobbs.com/architecture-and-design/regular-expressions/184410904
[23:03:08] <bayaz> Title: Regular Expressions 
[23:03:41] <user51> i spent 100 pages reading about finite automata, and all i got was a lexer..
[23:03:47] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325)
[23:03:48] *** Joins: vicfred (~vicfred@user/vicfred)
[23:04:06] <GeDaMo> https://swtch.com/~rsc/regexp/
[23:04:07] <bayaz> Title: Implementing Regular Expressions 
[23:04:14] *** Quits: vicfred (~vicfred@user/vicfred) (Remote host closed the connection)
[23:04:35] <zetaE> user51: is it a program or something?
[23:04:37] *** Joins: vicfred (~vicfred@user/vicfred)
[23:06:42] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[23:06:48] <ejjfunky> but, thanks to google, it states here: " The machine stays in the first state if any symbol other than a particular search symbol is read."
[23:07:14] <ejjfunky> i dont know how you guys managed without google. kudos to you guys who understood without using google.
[23:07:14] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:08:27] *** Quits: flakland (~flaknet99@32.211.211.39) (Remote host closed the connection)
[23:08:28] <GeDaMo> I'm pretty sure I didn't understand regular expressions before the web :P
[23:08:37] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[23:08:39] *** Joins: flakland (~flaknet99@32.211.211.39)
[23:08:42] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[23:09:11] <ejjfunky> GeDaMo: me 2. that's why i got lots of respect to programmers who'd done it without the web.
[23:09:16] <Zogatribe> prefer readable self documenting code to comments
[23:10:15] <ejjfunky> Zogatribe: google has that too. the small fee you'll have to pay, glimpses of ads.
[23:10:34] <deniska> I began programming with books and MSDN CDs :D
[23:10:44] <ejjfunky> well, your data sold to ads companies to be more specific.
[23:10:47] <zetaE> man pages info FTW!
[23:10:54] <GeDaMo> I began programming with magazines and no computer :P
[23:11:10] <ejjfunky> GeDaMo: wow. that's impressive.
[23:11:10] <zetaE> a lot of books and pdfs are based on man/info pages I realized
[23:11:22] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Ping timeout: 256 seconds)
[23:11:57] <GeDaMo> Programs were a lot simpler in the olden days :P
[23:12:25] <ejjfunky> GeDaMo, hehehe. not simpler to my feeble mind.
[23:12:46] <GeDaMo> https://www.atariarchives.org/basicgames/
[23:12:47] <bayaz> Title: Table of Contents: BASIC Computer Games 
[23:12:53] *** Quits: WhO (~V@103.240.170.227) (Quit: Leaving)
[23:12:59] <KillerWasp> i begin with qbasic.
[23:13:11] <ejjfunky> just imagine coding Doom in 1992.
[23:13:12] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[23:13:13] <deniska> back in a day you used a system from a single vendor to program against
[23:13:14] <KillerWasp> and learn with it to master by own.
[23:13:25] <deniska> not tens/hundreds like you have nowadays
[23:14:04] <ski> zetaE : are you just starting with programming ?
[23:14:12] <deniska> ejjfunky: Carmack is, well, a genius :)
[23:14:24] <ejjfunky> deniska: without a doubt!
[23:14:33] <zetaE> ski: making an attempt
[23:14:50] <deniska> His company pushed the understanding of what PCs at the time were capable of multiple times
[23:15:07] <deniska> first with NES-like sidescrollers, then WOLF, then DOOM, then QUAKE :)
[23:15:12] <GeDaMo> Picking a language to learn was also easier in the old days: you picked BASIC because that's what came on the computer :P
[23:15:37] <ejjfunky> deniska: exactly. i still wouldnt be able to code something that now even if i try to.
[23:16:17] *** Quits: xff0x (~xff0x@2001:1a81:5288:ea00:43ab:35e6:a5cd:7882) (Ping timeout: 240 seconds)
[23:16:26] *** Quits: savolla (~quassel@95.10.207.85) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:16:29] <deniska> ejjfunky: well, nowadays at least you are not constrained by performance
[23:16:40] <ski> zetaE : well, if you're choosing between C and Rust (to go to first), then i'd say C. perhaps Rust is "better" in some sense. but you'll likely not understand what it'll be yelling at you for, unless you've experienced the pain of shooting yourself in the foot, with C. now, if we're also admitting other languages, i think probably a language not as unforgiving as C might be kinder to start with (to not 
[23:16:46] <ski> get as overwhelmed with a lot of different things at the same time). that said, C is still good to look into, at some point
[23:16:47] <ejjfunky> i mean, yea, nowadays a lot of people can do game engines. but still, it's above my pay grade. :P
[23:17:25] <deniska> ejjfunky: wolfenstein rendering is a fairly simple algorithm, what makes it impressive is how well optimized they made it for the hardware it was targetting
[23:17:28] <ejjfunky> deniska: there's always a boundary that you want to push over
[23:17:33] <Zogatribe> ejjfunky: wh?
[23:17:53] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:43ab:35e6:a5cd:7882)
[23:18:07] <leonardus> Does anyone know the name of a hypothetical programming language that started with a B that was used to demonstrate the distinction between high level and low level languages?
[23:18:08] <ejjfunky> deniska, yea. it's a programmers' bad habit: we always want more than what we get. :D
[23:18:23] <ski> zetaE : as for which other language to try .. i'm less sure. some people suggest Python. i'm not that happy about it (thinking it often fosters bad habits), but it might be ok to start with
[23:18:24] <leonardus> It was in a blog post somewhere and I can't find it.
[23:18:34] <ejjfunky> that's why i think the meta thing will be a really cool thing to be at now.
[23:18:41] <ejjfunky> ogatribe: wh?
[23:18:46] <leonardus> It was also referenced in a blog post about Lisp which I also cannot find 
[23:18:56] <oldlaptop> ski: you know what? better python than java. :(
[23:19:07] <GeDaMo> leonardus: BCPL?
[23:19:12] <ski> perhaps especially considering i started with BASIC. cf. this quote :
[23:19:18] <zetaE> leonardus: do you know the lambda calculus blog?
[23:19:20] <nomagno> What would be the minimal IRC implementation I could get away with?
[23:19:23] <ski> "It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration." -- Edsger Wybe Dijkstra
[23:19:28] <leonardus> No, it wasn't a real language, it was just a fake programming language used for the sake of argument.
[23:19:30] <zetaE> leonardus: it's a place that might interest you
[23:19:35] <leonardus> The name was something like blob
[23:19:40] <Zogatribe> ejjfunky: what has google and ads got to do with prefering self documenting code to comments?
[23:19:41] <ski> (my next language was an assembler, which some might argue can be even worse)
[23:19:44] <leonardus> zetaE: I'll check it out
[23:19:50] <nomagno> Thinking about embedded a chat client into my game
[23:19:53] <ejjfunky> nomagno: terminal irc?
[23:20:03] <ski> oldlaptop : well, i'm sad to say that i would probably agree with that :(
[23:20:16] <oldlaptop> nomagno: http://tools.suckless.org/sic/
[23:20:17] <bayaz> Title: tools | suckless.org software that sucks less 
[23:20:27] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:20:27] <nomagno> ejjfunky: Implementation of any client, I guess
[23:20:28] <nomagno> The protocol is pretty simple
[23:20:30] <deniska> I started with VB6, then also used qbasic, powerbasic, freebasic, tinkered with darkbasic, vb.net, and maybe some other BASICs
[23:20:30] <absentia> i completely misremember kleene's star
[23:20:35] <absentia> jfc
[23:20:38] <nomagno> So I'll just get started and see how far I get
[23:20:47] <Zogatribe> screenshot of my IRC client: https://i.imgur.com/u9AlvAM.png
[23:20:47] <bayaz> Type: image/png Size: 347.3 kB 
[23:20:48] <GeDaMo> leonardus: oh, that's the guy who start Ycombinator
[23:20:54] <ejjfunky> ogatribe: we're talking about searching info. they're both good sources.
[23:21:15] <ejjfunky> nomagno, ic.
[23:21:34] <leonardus> Found it! http://www.paulgraham.com/avg.html?viewfullsite=1
[23:21:34] <bayaz> Title: Beating the Averages 
[23:21:58] <GeDaMo> That's it :)
[23:22:03] <ski> zetaE : personally, i'm a bit partial to functional programming languages, like Haskell,Scheme,Erlang,SML,OCaml,.. .. but often people find them a bit exotic (which imho is a bit of a shame. it's good to have a well-rounded understanding of different paradigms)
[23:22:22] <ejjfunky> nomagno, if you found it out, please let me know. i want to do an irc chat on a website.
[23:22:28] <zetaE> w00t, did lambda calculus blog disappeared??
[23:22:44] <ski> zetaE : oh, you mentioned lambda calculus. it's the prototypical functional language (but very bare-bones, and rather theoretical), from which the others sprung
[23:23:21] <zetaE> ski: there was a forum about theoretical programming languages called lambda calculus, I cannot find it anymore
[23:23:33] <GeDaMo> http://lambda-the-ultimate.org/ ?
[23:23:50] *** Parts: JimmyRustles (~Haddock@cpc119394-smal16-2-0-cust17.19-1.cable.virginm.net) ()
[23:23:50] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[23:23:53] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:24:13] <ski> LtU is a nice communal blag
[23:24:14] <zetaE> wow, duckduckgo can't find it :(
[23:24:35] <flakland> jeeves might know
[23:24:48] <zetaE> leonardus: that's the site I was saing --> http://lambda-the-ultimate.org/
[23:25:29] <ejjfunky> deniska, i'm like you. Did the basic stuffs, move on to vb.net, then got to C# and never looked back.
[23:25:29] *** Quits: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[23:26:06] *** Quits: merijn (~merijn@c-001-002-004.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:27:18] <deniska> ejjfunky: well, as a teen, I wanted to make a mod for every game I played, and civ4 used this weird little language called "python"
[23:27:18] *** Quits: PhilgrimLime (~thephilgr@151.40.115.120) (Ping timeout: 250 seconds)
[23:27:32] *** Joins: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net)
[23:27:40] *** Quits: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[23:27:54] <ejjfunky> lol, i hated python when i first saw it. 
[23:28:02] <deniska> somewhat obscure, but I heard some folks use it for unixy scripts instead of perl
[23:28:10] <Zogatribe> I still hate python
[23:28:23] *** Joins: PhilgrimLime (~thephilgr@151.40.115.120)
[23:28:31] <pulse> python is nice for data science
[23:28:51] <Zogatribe> only because all the python libraries used for data science are written in C or C++ :)
[23:28:56] <GeDaMo> I'll just mention there's a #proglangdesign channel
[23:29:00] <deniska> since then I also picked up java, lua, js, C++ (sorta), C# (just write java and fix things IDE complains about)
[23:29:05] <pulse> Zogatribe, that's beside the point though. python offers a nice interface between them
[23:29:07] <user51> zetaE: it was a joke about compiler books
[23:29:09] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Remote host closed the connection)
[23:29:23] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[23:29:33] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:29:33] <ejjfunky> deniska, yea, same here. did some other languages. stuck on php for now. lol
[23:29:38] *** Joins: linext (~linext@pool-100-1-124-107.nwrknj.fios.verizon.net)
[23:29:41] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7)
[23:29:57] <deniska> oh, yeah, I also tried some php at the time
[23:30:09] <deniska> was the easiest way to make ~dynamic web stuff~ at the time
[23:30:16] <deniska> especially if you wanted to host it for free
[23:30:20] *** Quits: myusername (~myusernam@user/myusername) (Ping timeout: 250 seconds)
[23:30:28] * ski idly recalls someone who made a mod to a game (by disassmbling the machine code, and modifying and adding to that), adding a "scripting language" which is basically a virtual kind of assembler
[23:30:29] <ejjfunky> and now node. and all that jazz about front ends. 
[23:30:38] *** Joins: Atque (~Atque@user/atque)
[23:30:38] <ski> both kinda nuts and impressive
[23:31:07] * ski at some point wanted to make a logic programming language which compiled to that virtual assembler
[23:31:33] <deniska> tinkered with node back when it was 0.1.x, wasn't too impressed
[23:31:39] <ejjfunky> deniska, yea. that used to be one of the perks.
[23:31:42] <deniska> like yeah, it's js, and it's a fast VM :)
[23:31:56] <KillerWasp> deniska: i use all BASICs that you mention, and use gw-basic, basic of C64, basic of PICAXE, and much others.
[23:32:10] <deniska> KillerWasp: never had an 8 bit machine
[23:32:28] <KillerWasp> deniska: but you still have vice. :/
[23:32:53] <Zogatribe> Sinclair BASIC is the best BASIC
[23:32:54] <ejjfunky> what i hate about node and npm is, overtime you get these packages you don't know where it came from, what they're used for, eating gigabytes of memory
[23:33:07] <GeDaMo> BBC BASIC is the best BASIC! :P
[23:33:11] <Zogatribe> pfft
[23:33:13] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[23:33:15] <KillerWasp> well, i use 8 bit machines also, and late with vice, i can say that like emulator is excellent.
[23:33:40] <deniska> ejjfunky: it's a problem specific to a lot of languages nowadays, but it's more pronounced with JS because they have a habit of making a lot of small packages depending on each other
[23:33:59] <ejjfunky> deniska, and funny thing is, sometimes, if you do look into it, you'd be like, crap, it only took these few lines to download all these?! 
[23:34:04] <deniska> ejjfunky: like a typical python project may have 50 dependencies, including transient ones, a JS project would have, dunno, 500
[23:34:13] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:7ceb:9734:fa44:10a7) (Ping timeout: 250 seconds)
[23:34:16] <KillerWasp> GeDaMo: BBC? like from telnet?
[23:34:31] <KillerWasp> i never saw it for BASIC.:/
[23:34:36] <ejjfunky> i'd still prefer python. js is just bad.
[23:34:39] <Zogatribe> BBC Micro: 1980s 8-but computer
[23:34:45] <Zogatribe> 8-bit*
[23:34:56] <deniska> KillerWasp: BBC, the TV/radio station, also made computers :P
[23:34:58] <KillerWasp> oh, now remember.
[23:35:12] <Zogatribe> well Acorn made it for the BBC
[23:35:12] <GeDaMo> The BBC licensed Acorn (later maker of ARM) to make a BBC micro
[23:35:30] <KillerWasp> i use it only by emulator like short tries.
[23:35:55] *** Quits: teut (~teut@122.161.83.81) (Quit: Client closed)
[23:36:04] <KillerWasp> i believe use BBC from Atari 800?
[23:38:46] <KillerWasp> mmmm, in the wiki only say Atari ST.
[23:38:55] <GeDaMo> https://www.youtube.com/watch?v=XXBxV6-zamM
[23:38:56] <bayaz> Title: Micro Men - 720p (2009) 
[23:38:57] <KillerWasp> poor wiki, incomplete.
[23:39:20] <GeDaMo> KillerWasp: what are you looking for?
[23:39:28] <GeDaMo> https://en.wikipedia.org/wiki/Atari_8-bit_family
[23:39:28] <bayaz> Title: Atari 8-bit family - Wikipedia 
[23:39:37] <KillerWasp> GeDaMo: about of BBC from Atari 800
[23:39:46] <GeDaMo> BBC had no connection to Atari
[23:39:58] <Zogatribe> I made a ZX Spectrum emulator in 80286 assembler
[23:39:59] <GeDaMo> https://en.wikipedia.org/wiki/Acorn_Computers
[23:39:59] <bayaz> Title: Acorn Computers - Wikipedia 
[23:40:01] <flakland> i found an old zx80 but couldn't get it to work :<
[23:40:02] <ejjfunky> hah! i found a site you can play lode runner! Dang!
[23:40:24] <KillerWasp> ejjfunky: what site? and what lode runner?
[23:40:41] <ejjfunky> KillerWasp, really old game. from the 80s.
[23:41:03] <KillerWasp> oh, suck.
[23:41:18] <ejjfunky> hehe.
[23:41:47] *** Joins: Akuli (~Akuli@82-203-160-67.bb.dnainternet.fi)
[23:41:57] <GeDaMo> https://archive.org/details/msdos_Lode_Runner_1983_1983
[23:42:00] <bayaz> Title: Lode Runner : Br?derbund Software, Inc. : Free Borrow & Streaming : Internet Archive 
[23:42:44] *** Parts: l4s8g (~l4s8g@pd9e621d0.dip0.t-ipconnect.de) (Good Bye)
[23:42:59] <KillerWasp> GeDaMo: yes, i dislike it.
[23:43:20] <KillerWasp> this type of game have ported in all systems of the world.
[23:43:38] <KillerWasp> (consoles and machines)
[23:44:32] <KillerWasp> also have cloned and hacked roms, like it's a big thing.
[23:44:33] <Zogatribe> I am kind of fond of old MS-DOS CGA games
[23:44:47] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325) (Read error: Connection reset by peer)
[23:44:47] <oldlaptop> https://apps.kde.org/kgoldrunner/
[23:44:48] <bayaz> Title: KGoldrunner 
[23:45:09] <GeDaMo> archive.org has a lot of playable old games
[23:45:29] <ski> including e.g. "Dune II: The Battle for Arrakis"
[23:45:45] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[23:46:02] <KillerWasp> i like lode runner from arcade, nes, snes, and N64.
[23:46:13] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:46:29] <KillerWasp> and maybe for gbc.
[23:46:37] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:46:58] *** Joins: quartz (~user_name@user/quartz)
[23:47:04] <KillerWasp> i also make a game based of lode runner, but with much changes.
[23:47:24] <ejjfunky> KillerWasp, now that's interesting. do you publish it somewhere?
[23:47:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[23:47:57] *** Quits: shailangsa (~shailangs@host109-159-108-227.range109-159.btcentralplus.com) (Ping timeout: 256 seconds)
[23:48:28] <KillerWasp> ejjfunky: there was a time when it was published more than 15 years ago, but now everything is obsolete and I need to update it. At that time he used Allegro 4.
[23:48:41] <KillerWasp> i used*
[23:49:19] <ejjfunky> well, might be cool to update it. give it a modern vibe.
[23:49:33] <KillerWasp> maybe one day I'll recycle it for my server and make it public.
[23:49:44] <GeDaMo> I wonder if emscripten supports Allegro
[23:49:57] <KillerWasp> GeDaMo: yes. support.
[23:50:21] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[23:50:35] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:52:51] *** Parts: aruns (~aruns@176.27.177.204) ()
[23:53:54] <GeDaMo> https://github.com/alegemaate/allegro-ts-emscripten
[23:53:55] <bayaz> Title: GitHub - alegemaate/allegro-ts-emscripten: Emscripten port of allegro 4 using allegro ts 
[23:54:09] <KillerWasp> also for A5.
[23:54:35] <KillerWasp> in tins.amarillion.org you can found some games with emscripten and allegro.
[23:55:03] <KillerWasp> but i still don't know a tutorial for make it.
