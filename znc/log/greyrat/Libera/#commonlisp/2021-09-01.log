[00:00:43] <lotuseater> oh the video is very fresh
[00:17:32] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:4c15:c040:7494:7502) (Ping timeout: 245 seconds)
[00:24:38] *** Quits: lisp123 (~lisp123@45.86.202.65) (Remote host closed the connection)
[00:25:16] *** Joins: lisp123 (~lisp123@45.86.202.65)
[00:26:34] *** Joins: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887)
[00:29:49] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 252 seconds)
[00:36:50] <moon-child> lotuseater: re ropes, the question is what do you want to do?  Apl favours small code, for which a single array will be perfectly suitable
[00:37:06] <moon-child> you _can_ do tree structures, though.  I expect a rope is doable
[00:37:54] <lotuseater> right of course, i meant for bigger editors, sorry
[00:40:15] <moon-child> you'd have to do your own memory allocator, though, which would be a pain
[00:40:21] <moon-child> to get everything contiguous
[00:40:36] <moon-child> i guess probably a freelist is appropriate?  I think ropes usually use fixed-size leaves
[00:40:45] <lotuseater> ah hm. you know :)
[00:41:10] <moon-child> maybe sort the freelist in idle time, to improve locality
[00:42:49] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[00:43:17] *** Joins: lisp123 (~lisp123@45.86.202.65)
[00:50:59] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:00:51] *** Quits: Alfr (~Alfr@user/alfr) (Killed (platinum.libera.chat (Nickname regained by services)))
[01:00:55] *** Joins: Alfr (~Alfr@user/alfr)
[01:08:06] <khoa> back
[01:08:45] <lotuseater> wb khoa
[01:08:52] *** Alfr is now known as Guest6979
[01:08:52] *** Quits: Guest6979 (~Alfr@user/alfr) (Killed (calcium.libera.chat (Nickname regained by services)))
[01:08:56] *** Joins: Alfr (~Alfr@user/alfr)
[01:11:41] <lotuseater> i like it when enclosing a vector multiple times and it returns #0A#0A...#(1 2 3) :D
[01:12:10] *** Joins: akoana (~ah@user/akoana)
[01:12:56] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[01:13:25] *** Joins: Alfr (~Alfr@user/alfr)
[01:13:55] <pjb> (make-array '() :initial-element (make-array '() :initial-element (make-array '() :initial-element #(1 2 3)))) #| --> #0A#0A#0A#(1 2 3) |#
[01:15:07] <lotuseater> yeah but that's a bit annoying to write
[01:15:33] <pjb> (defun wrap (x) (make-array '() :initial-element x)) (wrap (wrap (wrap #(1 2 3)))) #| --> #0A#0A#0A#(1 2 3) |#
[01:15:48] <lotuseater> better :)
[01:16:22] *** Alfr is now known as Guest1924
[01:16:26] *** Joins: Alfr (~Alfr@user/alfr)
[01:16:56] <pjb> (defun repeat (n fun) (if (zerop n) (function identity) (lambda (x) (funcall (repeat (- n 1) fun) (funcall fun x)) )))
[01:16:58] <pjb> (funcall (repeat 3 (function wrap)) #(1 2 3)) #| --> #0A#0A#0A#(1 2 3) |#
[01:18:35] <lotuseater> or just "⊂⊂⊂1 2 3"
[01:18:36] <pjb> With a reader macro, yes.
[01:18:36] <lotuseater> no readmacro
[01:18:36] *** Quits: pve (~pve@178-55-30-45.bb.dnainternet.fi) (Quit: leaving)
[01:18:36] *** Quits: Guest1924 (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[01:18:36] <lotuseater> but could also be implemented as such for using on its own
[01:19:07] <lotuseater> but the repeat was also what i had in mind as the "next" step
[01:19:51] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zinc.libera.chat (Nickname regained by services)))
[01:19:55] *** Joins: Alfr (~Alfr@user/alfr)
[01:20:16] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[01:20:22] <moon-child> ⊂⍣3⊢1 2 3
[01:20:23] <lotuseater> or something like iterate from Haskell, with a drop 2 $ take 3
[01:20:38] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:20:59] *** Alfr is now known as Guest4364
[01:20:59] *** Quits: Guest4364 (~Alfr@user/alfr) (Killed (sodium.libera.chat (Nickname regained by services)))
[01:21:23] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:21:24] <lotuseater> moon-child: thx, the second I didn't know yet and would have bet there's something to even fight this noisy "⊂⊂⊂" for more clarity
[01:21:44] <moon-child> ⍣ is pjb's repeat
[01:22:20] <lotuseater> there is also one op with a big circle and eyes, right?
[01:22:33] <moon-child> ⍥ or ⍤?
[01:22:43] <lotuseater> ooohh
[01:22:56] *** Joins: Alfr (~Alfr@user/alfr)
[01:23:07] <lotuseater> sry my font size is small atm so i mistaken the star as little circle first
[01:23:20] <lotuseater> then both
[01:23:23] <moon-child> np
[01:23:48] <lotuseater> :)
[01:23:49] <moon-child> ⍣ is the higher-order version of *.  ⍤ is rank and atop
[01:23:57] <moon-child> ⍥ I don't remember
[01:24:13] <moon-child> oh, over
[01:24:28] <lotuseater> okay I think I can learn that too and how to use, so don't give me up please yet
[01:24:41] <lotuseater> or it's över :P
[01:24:56] <moon-child> hehe
[01:25:04] <moon-child> over and atop are just tacit niceties.  Rank is the really important one
[01:25:24] <lotuseater> okay Umlauts are not so much used in English than German, the spelling out is funnier ^^
[01:26:02] <moon-child> ärë ẗḧëÿ ëvër üsëd?
[01:26:08] <lotuseater> hihi
[01:26:25] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[01:26:30] <lotuseater> this is one of the first exercises in Knuth's TeXbook
[01:27:08] <lotuseater> möön-child
[01:27:38] <moon-child> thé óńĺý áććéńtś Í'vé évéŕ śééń áré áćúté àǹd gràvè
[01:28:24] <lotuseater> mostly for names i think
[01:28:37] <moon-child> ah, yea, fair enough
[01:28:44] <lotuseater> or this hook for eg the small c in french
[01:29:16] <moon-child> cedilla
[01:29:36] <lotuseater> right that was it, thx
[01:29:48] <moon-child> en français: 'cédille'
[01:30:04] <lotuseater> TeX and even Unicode has you covered for all cases
[01:30:11] <moon-child> yeah
[01:30:36] <lotuseater> and more for the ones nearly never gonna happen if you don't construct them :)
[01:31:25] <lotuseater> hmm too offtopic? but it wasn't much going on right now else. but I don't want get kicked out for being more annoying than I am apparently
[01:32:28] <jcowan> moon-child: consider ancêtre, hôpital, août.
[01:32:58] <moon-child> jcowan: i should have been clearer, I meant acute and grave are the only accents I've seen used in english
[01:33:05] <jcowan> Oh.
[01:33:22] *** Alfr is now known as Guest9575
[01:33:22] *** Quits: Guest9575 (~Alfr@user/alfr) (Killed (sodium.libera.chat (Nickname regained by services)))
[01:33:24] <lotuseater> I'm honest I can never remember which is which of the two.
[01:33:26] *** Joins: Alfr (~Alfr@user/alfr)
[01:33:35] <lotuseater> by naming I mean
[01:34:29] <moon-child> 'grave' is mellow, not excitable, kind of low, and ` is pointing downward
[01:34:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[01:34:42] <lotuseater> ironic when one (not me) does very heavy intellectual stuff and pulls out in instant "difficult" things without problem from memory but such simple things not :D
[01:34:50] <moon-child> that's how I remember it, at any rate
[01:34:56] <lotuseater> ah okay
[01:35:34] <jcowan> yes, not too many of those, but some people still write entrepôt rather than entrepot or transshipment port
[01:36:12] *** Parts: aadcg (~user@78-107-221-113.broadband.corbina.ru) (ERC (IRC client for Emacs 27.2))
[01:36:37] *** Joins: aeth (~aeth@user/aeth)
[01:40:53] <lotuseater> jcowan: I don't like when people write Pál (or Paul) Erdős with the normal ö in TeXed (history) math books or articles. that's with the \H instruction for the long hungarian double strokes
[01:41:11] <jcowan> Agreed
[01:42:15] <lotuseater> but apart from it, one of my favorite mathematicians and reading about him inspired me much or in "The BOOK" by Aigner and Ziegler
[01:42:46] <lotuseater> "Another roof another proof."
[01:43:58] <lotuseater> for me in the same category of those even much more very rare maverick minds like Ramanujan or Mandelbrot
[01:45:34] *** Joins: pillton (~user@193-116-81-245.tpgi.com.au)
[01:48:23] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: Ping timeout (120 seconds))
[01:48:53] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[02:00:34] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[02:10:10] *** Joins: khrbt (~znc@user/khrbt)
[02:20:08] *** Quits: lisp123 (~lisp123@45.86.202.65) (Remote host closed the connection)
[02:20:22] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:ece8:26c7:b120:2489) (Ping timeout: 252 seconds)
[02:21:22] *** Joins: lisp123 (~lisp123@45.86.202.65)
[02:26:25] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 252 seconds)
[02:29:43] *** Quits: gaqwas (~john@dynamic-077-002-167-209.77.2.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:38:08] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[02:38:17] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[02:38:19] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:9c59:2768:9698:35ff)
[02:39:15] <Yehowshua> The last line on the following let statement doesn't work because I refer to a variable define in the let statement itself.
[02:39:16] <Yehowshua>   (let (
[02:39:17] <Yehowshua>     (pattern    "attribute")
[02:39:17] <Yehowshua>     (pat-len    (length pattern))
[02:39:18] <Yehowshua>     (end-cursor (+ start-cursor pat-len))))
[02:39:28] <Yehowshua> Is there any way around this?
[02:39:31] <Bike> clhs let*
[02:39:31] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm
[02:39:54] <Bike> "The expression for the init-form of a var can refer to vars previously bound in the let*."
[02:40:59] <Yehowshua> thx
[02:41:17] <Bike> no problem.
[02:41:19] <Yehowshua> what is specbot?
[02:41:30] <Yehowshua> clhs let*
[02:41:31] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_let_l.htm
[02:41:32] <Yehowshua> ah
[02:41:35] <Yehowshua> very cool
[02:44:33] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[02:44:47] *** Joins: montxero (~user@149.167.149.74)
[02:50:07] *** Quits: frgo (~frgo@p200300deef0cee00411730a1ad6602b6.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:50:37] *** Joins: frgo (~frgo@p200300deef0cee00411730a1ad6602b6.dip0.t-ipconnect.de)
[02:51:27] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 240 seconds)
[02:54:31] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:59:55] *** Joins: lisp123 (~lisp123@45.86.202.65)
[03:00:05] *** Joins: selwyn (~selwyn@user/selwyn)
[03:02:42] <lotuseater> Yehowshua: and when you define lexical functions you would use LABELS for that
[03:04:46] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:9c59:2768:9698:35ff) (Quit: Client closed)
[03:10:28] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 244 seconds)
[03:10:53] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 250 seconds)
[03:13:41] *** sm2n_ is now known as sm2n
[03:15:16] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:23:12] *** Quits: andreyorst (~andreyors@2.92.127.106) (Quit: WeeChat 3.2)
[03:24:35] *** Joins: andreyorst (~andreyors@2.92.127.106)
[03:26:36] *** Quits: rinwa (~user@141.226.14.13) (Remote host closed the connection)
[03:29:07] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:29:26] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[03:30:06] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 244 seconds)
[03:31:42] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 245 seconds)
[03:32:58] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 252 seconds)
[03:33:24] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[03:34:18] *** Joins: SystemFFan (~SystemFFa@188.71.213.184)
[03:34:24] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[03:34:33] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 248 seconds)
[03:34:57] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:36:29] *** Quits: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:45:06] <kagevf> (defmacro flet* ....
[03:45:06] *** Joins: lisp123 (~lisp123@45.86.202.65)
[03:49:37] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 245 seconds)
[03:51:47] *** Quits: VincentV` (~user@212.241.16.18) (Ping timeout: 245 seconds)
[03:54:29] *** Joins: selwyn (~selwyn@user/selwyn)
[03:54:33] *** Joins: amk (~amk@109.255.169.126)
[03:55:41] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:57:35] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:01:34] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:30:09] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[04:31:16] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 252 seconds)
[04:33:02] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[04:35:12] *** Quits: random-nick (~random-ni@87.116.183.125) (Ping timeout: 244 seconds)
[05:04:20] <recordgroovy> Hi, I'm looking into CFFI, and I see examples where shared objects are loaded, but not C source files. Is there a way to go about doing this?
[05:04:57] <recordgroovy> Ostensibly, I want to wrap this C snippet into a lisp function: https://wayland-book.com/surfaces/shared-memory.html
[05:05:13] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[05:05:26] *** Joins: montxero (~user@149.167.149.74)
[05:12:39] *** Joins: z3t0 (~z3t0@107-159-7-145.on.dsl.ebox.net)
[05:27:07] <pillton> recordgroovy: With CFFI, you need to produce a shared library from your C source file and use the CFFI API to access functions/symbols in the shared library.
[05:27:54] <Bike> your lisp compiler probably isn't also a C compiler, so it can't do much with source code
[05:28:31] <recordgroovy> So, I'm always going to need to compile as an intermediate step? Is it possible to do this automatically when my program is required?
[05:28:46] <recordgroovy> er, when my system is loaded?
[05:29:40] <pillton> recordgroovy: Alternatively, you can use the SFFI API which is specific to ECL. See Chapter 3.3.5 of the ECL Manual.
[05:29:45] <Bike> you could call an external C compiler program, or distribute shared objects with your source
[05:30:39] <Bike> if by "wrap this snippet" you mean you want registry_handle_global, you could write it in lisp, and call out to the wayland library your user presumably already has
[05:32:16] <recordgroovy> I meant allocate_shm_file. I suppose alternatively I could reimplement it, loading shm_open() & friends directly instea.
[05:32:20] <recordgroovy> instead*.
[05:33:05] *** Quits: SystemFFan (~SystemFFa@188.71.213.184) (Remote host closed the connection)
[05:33:35] <Bike> that's what i meant, yeah. it would be less a full "reimplementation" and more translating this C code into lisp code. cffi lets you do things that C can do like allocate automatic variables and etc.
[05:34:33] <recordgroovy> Aight, I got a roadmap, thanks
[05:57:34] *** Quits: borodust (~irc@user/borodust) (Ping timeout: 252 seconds)
[05:59:59] *** Joins: borodust (~irc@user/borodust)
[06:00:10] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[06:05:46] <saltrocklamp[m]> if you're distributing the application, i assume you'd either 1) require it as an external dependency, or 2) bundle it with your application. maybe there's a way to do 1 and fall back to 2, i'm not really sure how all that stuff works at the system level (and i assume it's all different between mac/windows/linux/bsd anyway)
[06:06:16] <saltrocklamp[m]> my package manager just does the right thing! but i really should learn how that all works..
[06:06:45] <saltrocklamp[m]> i think for the most part it's a matter of making sure you have the right shared library in a particular location on the system, right?
[06:13:04] *** Joins: pillton` (~user@118-211-30-143.tpgi.com.au)
[06:15:04] *** Quits: pillton (~user@193-116-81-245.tpgi.com.au) (Ping timeout: 260 seconds)
[06:27:31] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:29:35] *** Joins: Alfr (~Alfr@user/alfr)
[06:31:54] *** Joins: Oladon (~olad@98.43.81.226)
[06:42:40] *** Quits: pillton` (~user@118-211-30-143.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[07:23:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[07:32:01] <beach> Good morning everyone!
[07:38:45] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[07:55:54] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:08:59] *** Joins: semz (~none@user/semz)
[08:14:55] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[08:21:42] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:37:00] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 244 seconds)
[08:39:57] *** Joins: lisp123 (~lisp123@45.86.202.65)
[08:40:48] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:41:20] *** Joins: khrbt (~znc@user/khrbt)
[08:43:27] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:45:16] *** Joins: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de)
[08:45:35] *** Joins: lisp123_ (~lisp123@45.86.202.65)
[08:46:18] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 244 seconds)
[08:58:09] *** Quits: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:01:45] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:26:37] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[09:36:19] *** Joins: khrbt (~znc@user/khrbt)
[09:47:29] *** Quits: lisp123_ (~lisp123@45.86.202.65) (Read error: Connection reset by peer)
[10:10:37] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[10:16:56] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[10:32:53] *** Joins: pve (~pve@87-93-196-103.bb.dnainternet.fi)
[10:42:01] <mfiano> Could anyone tell me the correct incantation of #'find-method to retrieve an :after initialize-instance method? I am not sure what I am getting wrong here...
[10:42:30] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:43:05] <mfiano> Rubber ducked my way out of it, thanks anyway
[10:43:34] <mfiano> Note to self. Make sure you pass a generic function object, and not a designator.
[10:43:40] <moon-child> you are welcome
[10:44:52] *** Joins: gaqwas (~john@dynamic-077-002-189-054.77.2.pool.telefonica.de)
[10:45:46] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:47:17] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[10:52:22] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[10:53:10] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[10:53:14] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[10:57:39] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[10:58:03] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 244 seconds)
[11:00:09] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[11:04:26] *** Joins: shka (~herr@109.231.62.239)
[11:05:01] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[11:08:13] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[11:10:34] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[11:11:14] *** Joins: amb007 (~a_bakic@245.15.23.93.rev.sfr.net)
[11:20:40] *** Joins: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de)
[11:36:19] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:39:04] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:42:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:50:43] *** Quits: amb007 (~a_bakic@245.15.23.93.rev.sfr.net) (Ping timeout: 252 seconds)
[11:51:47] <White_Flame> hmm, swank needs the length of strings to fit in 24 bits, blows up slime otherwise
[11:52:00] *** Joins: amb007 (~a_bakic@245.15.23.93.rev.sfr.net)
[11:52:12] <White_Flame> and I think that's the rendering of the massive data object that's being printed, not a single string in my data of that size
[11:54:25] <moon-child> woh, fun
[11:55:06] <moon-child> why?
[11:57:54] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[12:01:10] *** Quits: gaqwas (~john@dynamic-077-002-189-054.77.2.pool.telefonica.de) (Ping timeout: 252 seconds)
[12:01:42] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:02:50] *** Quits: amb007 (~a_bakic@245.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:03:01] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:28:40] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:29:19] *** Joins: amb007 (~a_bakic@245.15.23.93.rev.sfr.net)
[12:30:52] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[12:30:53] *** Quits: amb007 (~a_bakic@245.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:31:13] *** Joins: amb007 (~a_bakic@245.15.23.93.rev.sfr.net)
[12:32:10] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[12:33:37] *** Quits: amb007 (~a_bakic@245.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:34:18] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:35:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:39:24] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:51:41] *** Joins: selwyn (~selwyn@user/selwyn)
[13:03:19] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[13:05:22] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[13:07:36] *** Joins: VincentVega (~user@212.241.16.18)
[13:09:08] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[13:09:40] *** Joins: scymtym (~user@ip6-2001-638-504-20d5-1000-0-0-15.VPN.Dyn.CIT-EC.NET)
[13:09:48] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 244 seconds)
[13:22:18] <scymtym> recordgroovy: thanks for the wayland book link. it looks very useful
[13:23:38] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[13:24:16] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 244 seconds)
[13:30:40] *** Joins: hayley (~theemacss@user/hayley)
[13:31:20] <hayley> Which Common Lisp compiler should I use if I want to gather statistics about the instructions generated?
[13:32:28] <hayley> Usually I would use SICL, but it does not have many optimizations applied in the compiler, so the code generated is not representative of much. I guess Clasp also uses Cleavir, come to think of it.
[13:32:51] <White_Flame> moon-child: as for the 'why', it would be encoding across the socket, though that seems arbitrarily limited compared to 32-bit length strings
[13:35:27] <scymtym> hayley: SBCL has (probably as in "can be compiled with") src/code/dyncount.lisp, but: 1) i'm not sure whether it does what you need 2) i'm not sure whether it still works
[13:37:39] <hayley> scymtym: Right, thanks. In short, I'm looking to see how frequently needed read barriers would actually be, which requires checking some instructions after load instructions too.
[13:38:19] <scymtym> hayley: i see. vop statistics are probably too coarse, then
[13:39:38] <hayley> (Specifically, I have a hunch that checking for type tests which confirm that some value is immediate, and checking if the value is loaded from immediately after, would eliminate some barriers, but without numbers it is just a hunch.)
[13:45:09] <hayley> Well, Clasp isn't an option until I rebuild it, as some shared library was updated without it. sigh
[13:53:22] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[13:53:26] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[14:02:37] *** Quits: scymtym (~user@ip6-2001-638-504-20d5-1000-0-0-15.VPN.Dyn.CIT-EC.NET) (Ping timeout: 245 seconds)
[14:12:34] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-250.prtc.net)
[14:22:29] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:22:44] *** Joins: lisposite (~me@206.255.20.143)
[14:23:54] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Remote host closed the connection)
[14:28:50] *** Joins: cosimone (~user@93-47-228-143.ip115.fastwebnet.it)
[14:37:53] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:39:55] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[14:40:30] *** Joins: khoa (~khoa@user/khoa)
[14:46:21] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:49:08] *** Quits: frgo (~frgo@p200300deef0cee00411730a1ad6602b6.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:49:37] *** Joins: frgo (~frgo@p200300deef0cee00243a9d25d68de739.dip0.t-ipconnect.de)
[14:49:44] *** Joins: silasfox (~silasfox@xdsl-85-197-57-82.nc.de)
[14:51:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:52:24] *** Joins: amb007 (~a_bakic@245.15.23.93.rev.sfr.net)
[14:59:19] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:03:29] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[15:07:37] *** Quits: amb007 (~a_bakic@245.15.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:08:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:12:48] *** Joins: Krystof (~user@81.174.155.115)
[15:13:17] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 244 seconds)
[15:13:38] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[15:18:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:23:37] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-250.prtc.net) (Ping timeout: 256 seconds)
[15:25:20] *** Quits: cosimone (~user@93-47-228-143.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[16:08:05] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[16:08:21] *** Joins: tfeb (~tfb@88.98.95.237)
[16:17:21] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:20:57] *** Quits: lisposite (~me@206.255.20.143) (Quit: WeeChat 2.8)
[16:42:11] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[17:09:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:28:14] *** Joins: Bike (~Glossina@71.69.170.70)
[17:28:14] *** ChanServ sets mode: +o Bike
[17:32:49] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[17:40:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:42:32] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[17:42:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:47:47] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 240 seconds)
[17:58:09] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:08:34] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[18:12:37] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 245 seconds)
[18:13:41] *** Joins: scymtym (~user@ip-129-70-148-204.WLAN.Dyn.CIT-EC.NET)
[18:22:35] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:28:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:32:52] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:34:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Client Quit)
[18:34:32] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:44:35] *** Joins: Everything (~Everythin@37.115.210.35)
[18:44:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[18:46:46] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:51:58] <lotuseater> waleee: I think I've seen earlier something from this J guy you linked me. He seems very capable and can explain well too imo.
[18:55:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:00:37] *** Joins: srhm (~srhm@user/srhm)
[19:01:46] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:01:54] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[19:04:04] *** Quits: VincentVega (~user@212.241.16.18) (Read error: Connection reset by peer)
[19:05:03] *** Joins: srhm (~srhm@user/srhm)
[19:06:04] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:06:38] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:07:04] *** Joins: srhm (~srhm@user/srhm)
[19:20:59] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Quit: Leaving)
[19:22:35] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[19:26:40] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:26:42] <markthom_> I can't load rutils into lispworks. "Error: Unknown module :RUTILS" it says.
[19:26:53] <markthom_> I've loaded it with quicklisp, and.. I don't know what else is necessary.
[19:27:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:28:06] <beach> How did you "load it with quicklisp"?
[19:28:17] <markthom_> (ql:quickload "rutils")
[19:28:32] <lotuseater> with SBCL? which version?
[19:28:32] <Bike> and you did that in lispworks?
[19:28:42] <markthom_> I should've mentioned, this is in the context of loading it as part of an asdf system
[19:28:42] <lotuseater> oh sry!
[19:28:55] <lotuseater> i overread the lispworks part in your first sentence
[19:29:07] <beach> markthom_: That should be enough.  What did you do to prompt the error message?
[19:29:40] <markthom_> I ran (asdf:load-system "psoatransrun") in the listener and everything went fine until the message.
[19:30:32] <markthom_> I have #:rutils as a dependency in that system.
[19:31:17] <_death> system names should be strings
[19:31:55] <beach> _death: Uninterned symbols are fine.
[19:32:56] <saltrocklamp[m]> why do some people use strings and some people use uninterned symbols?
[19:32:58] <_death> beach: hmm, you're right.. I do have systems that use them as such
[19:33:06] <ahlk> What's the difference between #:something and :something ?
[19:34:24] <_death> beach: at some point I switched to strings.. I feel that there was something more to it than style, but maybe not
[19:34:36] <markthom_> what about in require? am I also limited to use either strings or uninterned symbols there?
[19:35:05] <beach> markthom_: REQUIRE should not be, erm, required here.
[19:36:01] <beach> ahlk: #:something is turned into an uninterned symbol named SOMETHING by READ, whereas :something is turned into a symbol in the keyword package named SOMETHING.
[19:36:24] <ahlk> beach: thanks!
[19:37:02] <beach> Sure.
[19:37:18] <markthom_> I think I will ask on the lispworks mailing list. I can send a link to the project github repo there.
[19:37:29] <markthom_> thanks
[19:38:20] <_death> markthom: the error message is suspect, because it uses the term "module"..
[19:38:46] <beach> Yes, so likely REQUIRE is involved here.  Which it shouldn't be.
[19:39:00] <markthom_> I am using a require directive in one place with the ":rutils" keyword symbol
[19:39:10] <beach> You shouldn't.
[19:39:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:39:26] *** Quits: silasfox (~silasfox@xdsl-85-197-57-82.nc.de) (Quit: silasfox)
[19:39:43] <beach> Quickload or asdf:load-system should be enough.
[19:39:52] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 252 seconds)
[19:40:43] <Bike> you probably don't want to use require, except maybe to load implementation specific modules in an implementation specific way. or asdf, probably
[19:41:04] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:41:43] <Bike> what require actually does when given one argument is implementation dependent. it may use asdf or may not, and it probably won't use quicklisp.
[19:42:05] <markthom_> I've never properly understood require.
[19:42:11] <markthom_> yes, that got rid of the error
[19:42:13] <markthom_> thank you!
[19:42:45] <beach> Pleasure.
[19:43:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:46:27] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[19:46:44] <seok> #(97 98 99) does not seem to be the same as the octet vector for "abc"
[19:46:54] <seok> How do I create octet vectors ?
[19:47:16] <mfiano> (make-array n :element-type '(unsigned-byte 8))
[19:47:38] <seok> ah thank you
[19:48:00] <seok> is there no shorthand version ?
[19:48:19] <beach> seok: The subtype of the vector is not determined by its contents, but by how it was created.
[19:48:21] <mfiano> There are utilities for converting to octet vectors in both ironclad and babel
[19:48:41] <seok> ahh i see
[19:48:42] <seok> ok
[19:48:44] <seok> thank you
[19:49:12] <lotuseater> seok: the normal #( creates a simple-vector for you, so one with element-type T
[19:52:34] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[19:54:00] *** Joins: selwyn (~selwyn@user/selwyn)
[19:55:18] *** Joins: Devon (~devon@2601:184:4780:ee50::60b0)
[20:03:09] <lotuseater> hm how was that in ironclad again? they changed the #( so that you create (unsigned-byte n) vectors with #n( ? I'm not sure at the moment if that or with #{ or #[ .
[20:07:33] <lotuseater> oh right, it's #@
[20:14:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:14:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:15:04] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:17:12] <lotuseater> cl21 changes #( so that the read symbols are evaluated, not so cool
[20:17:48] <lotuseater> but surely from time to time well usable too
[20:18:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:18:23] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:21:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:22:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:24:19] *** Joins: Oladon (~olad@98.43.81.226)
[20:26:28] *** Joins: selwyn (~selwyn@user/selwyn)
[20:29:23] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:30:31] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:30:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:31:42] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:33:46] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:34:45] *** Joins: silasfox (~sbv@xdsl-85-197-57-82.nc.de)
[20:37:19] <semz> what's the point of that? might as well use `vector' then
[20:38:21] <beach> The point of what?
[20:38:31] <semz> evaluating the symbols in #(
[20:38:42] <beach> Right.
[20:38:43] <semz> it's not going to be a read-time constant that way
[20:38:54] <lotuseater> ask the dudes from the cl21 project ^^
[20:39:34] <saltrocklamp[m]> http://cl21.org/ this?
[20:39:47] <lotuseater> yes
[20:40:17] <saltrocklamp[m]> is this more than a collection of helpful libraries on top of standard common lisp?
[20:40:28] <saltrocklamp[m]> (looks very useful)
[20:40:46] <lotuseater> no various things have a different approach and called more modern
[20:41:00] <saltrocklamp[m]> nvm it literally is a quicklisp distribution
[20:41:01] <lotuseater> sure it can be
[20:41:10] <beach> saltrocklamp[m]: It says "redesigning Common Lisp"
[20:41:31] * saltrocklamp[m] sent a lisp code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/642fccf9b5dd750ceef16f62accd7c859c8fcb34
[20:41:38] <lotuseater> beach: I can imagine your opinion to that. :)
[20:41:56] <beach> lotuseater: And I am not alone.
[20:42:09] <saltrocklamp[m]> i assume this is meant to be something like an alternative standard library? so you `:use "cl21"` alongside or in addition to `:use "cl"`?
[20:42:21] <saltrocklamp[m]> * "cl21"` alongside of or in
[20:42:32] <saltrocklamp[m]> the examples shown on the homepage mostly look like a collection of useful helper macros
[20:43:12] <lotuseater> Yes I know, and that is great.
[20:43:28] <lotuseater> beach: ↑
[20:43:31] <saltrocklamp[m]> definitely seems like a controversial (deliberately) way to advertise it
[20:43:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 244 seconds)
[20:44:33] <saltrocklamp[m]> as opposed to "an extension of the common lisp standard library, to make common lisp friendlier for 21st century programmers" or something
[20:44:34] <lotuseater> so what do they do in the next century? or millennium?
[20:44:46] *** Joins: makomo (~makomo@user/makomo)
[20:45:33] <saltrocklamp[m]> they benefit from a few extra decades of hindsight and the changing preferences and needs of developers
[20:45:56] *** Joins: aeth (~aeth@user/aeth)
[20:46:16] *** Joins: karlosz (~karlosz@5.9.160.72)
[20:47:55] <beach> saltrocklamp[m]: Developers of application programs are typically notoriously incapable of language design, and giving in to their "preferences", might destroy a language completely, in that it might make it very hard to then write good optimizing compilers for it.
[20:48:13] <beach> saltrocklamp[m]: I think Python is a good example of how not to design a language.
[20:48:20] <saltrocklamp[m]> hah
[20:48:29] <lotuseater> There are many examples for this phenomena. :)
[20:48:47] <saltrocklamp[m]> i know that lisp in particular was supposedly very carefully designed to balance performance and ergonomics, at least given the constraints of computers at the time it was developed
[20:48:51] <lotuseater> but one learns also from negative examples
[20:49:04] <lotuseater> saltrocklamp[m]: Common Lisp
[20:49:12] <saltrocklamp[m]> that's what i meant, yes
[20:49:14] <saltrocklamp[m]> python was very conspicuously not designed to do anything but be comfortable for guido van rossum to use
[20:49:41] <saltrocklamp[m]> that said, most of what i see in this cl21 repo seems very innocuous
[20:49:42] <beach> Yes, and the result is that, to make it useful, you really have to writer yoru code in C.
[20:50:07] <saltrocklamp[m]> i would argue that most python code is useful without writing C extensions
[20:50:16] <lotuseater> beach: "When you listen to a UNIX shell, can you hear the C?"
[20:50:24] <beach> saltrocklamp[m]: Except that it is 50x slower than it should be.
[20:50:56] <lotuseater> saltrocklamp[m]: and how long useful? till new inconsistencies break it
[20:50:57] *** Quits: karlosz (~karlosz@5.9.160.72) (Client Quit)
[20:51:11] <beach> saltrocklamp[m]: Introducing more syntax as cl21 does make it harder to reason about macro expanders.  Because now you need to know the underlying S-expression version of each new syntax construct.
[20:51:42] *** Joins: karlosz (~karlosz@5.9.160.72)
[20:52:23] <saltrocklamp[m]> the only thing i'll say about python is that it's clearly "useful" enough to have become one of the world's top programming languages. much like java, it's a local maximum of usefulness, not a global one.
[20:52:48] *** Quits: karlosz (~karlosz@5.9.160.72) (Client Quit)
[20:52:50] <beach> saltrocklamp[m]: But what it really is, is acting as a glue between C modules.
[20:52:54] <saltrocklamp[m]> as for cl21, that's fair, although personally i already use `cl-interpol` and these other macros seem pretty intuitive to me
[20:53:23] <saltrocklamp[m]> i am consistently impressed with the discipline of lisp programmers. i've seen much more horrifying metaprogramming in much less-metaprogrammable languages.
[20:53:47] <saltrocklamp[m]> acting as glue between C modules i think is a very very valid and useful thing
[20:54:00] <saltrocklamp[m]> yes, lisp can also act as glue between C modules
[20:54:18] <beach> saltrocklamp[m]: Sure, if all you have is a bunch of C modules, glue is very useful.
[20:54:46] <beach> saltrocklamp[m]: But if you are forced to debug application code using multiple languages, one of which is an unsafe one, it is much less fun.
[20:55:16] <saltrocklamp[m]> i would bet that 90+% of python programmers never write a single line of C in their python work
[20:55:46] <lotuseater> maybe there's no (de)fun allowed ^^
[20:56:32] <lotuseater> saltrocklamp[m]: because they rely heavily on the work of others who did it before
[20:56:45] <beach> saltrocklamp[m]: Then they are probably not writing very sophisticated applications.  And that's probably true for 90% of programmers, no matter what language they use.
[20:56:58] <saltrocklamp[m]> well yeah, web servers are usually pretty simple
[20:57:10] <saltrocklamp[m]> data processing scripts, kiosk applications, twiddling bits on an arduino, etc
[20:57:44] <semz> A lot of these CL21 changes just look like minor quirks the author personally disliked. I mean, to each his own, the language supports changing those parts after all, but the whole spiel about how this is the reason CL is not popular and it Must Be Modernized in a way that casually breaks three decades of compatibility rubs me the wrong way.
[20:57:45] <saltrocklamp[m]> and "sophisticated" i think is orthogonal to "needs high performance that comes with eliminating python's high runtime overhead"
[20:58:29] <saltrocklamp[m]> i have a laundry list of reasons why CL isn't "popular" in my head and notes, and the standard library is a minor footnote at the bottom, given how a lot of these "modernizations" are only a `ql:quickload` away from being at your fingertips
[20:59:07] <beach> semz: Yes, that's totally misguided.  Everyone seems to "know" why Common Lisp is not as popular as it deserves and how to fix it.
[20:59:15] <saltrocklamp[m]> i personally do use `cl-interpol`, but i'm not about to claim that lack of shell-style string interpolation is what's keeping common lisp from being #1 on tiobe
[21:00:01] <lotuseater> it doesn't have to be
[21:00:42] <saltrocklamp[m]> https://github.com/cl21/cl21/blob/master/src/stdlib/abbr.lisp#L16-L38 i find this really really inoffensive 🤷
[21:01:56] <saltrocklamp[m]> i think this library needs to be rebranded as "an opinionated extension to the common lisp standard library"
[21:02:02] <lotuseater> yes for those who like unix style naming
[21:02:45] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[21:03:17] *** Joins: srhm (~srhm@user/srhm)
[21:03:26] <saltrocklamp[m]> overriding `#()` i think is not great
[21:03:36] <saltrocklamp[m]> it could have been `#V()` by analogy with `#H()`
[21:03:37] <lotuseater> "oh right, the 'db' stands for destructuring-bind"
[21:03:57] <lotuseater> yes maybe
[21:04:19] <saltrocklamp[m]> is there any reason why you couldn't write `let` to automatically destructure if it detects that the left-hand side of the binding isn't a standalone symbol?
[21:04:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:04:28] <saltrocklamp[m]> * couldn't write a wrapper around `let` to
[21:04:43] <saltrocklamp[m]> that's what i would personally want, in my own little opinionated kingdom
[21:05:05] <lotuseater> it's a special operator
[21:05:19] <lotuseater> or explain more how you mean it
[21:05:39] <semz> you could shadow let and define your own let macro that expands to cl:let
[21:05:58] <saltrocklamp[m]> i'd call it a different name because shadowing is bad imo, but that ^
[21:06:44] <saltrocklamp[m]> `(if (symbolp lhs) `(let ...) `(destructuring-bind ...))`
[21:06:53] <saltrocklamp[m]> s/`//
[21:08:48] <lotuseater> no it's not bad at all, ask beach about it :)
[21:08:59] *** Joins: keir (~keir@user/keir)
[21:09:08] <beach> I am no longer participating.
[21:09:23] <beach> Dinner is imminent anyway.
[21:09:37] <saltrocklamp[m]> hah, sorry to scare you off
[21:09:56] <beach> Don't worry about it.
[21:10:06] <lotuseater> Okay see you tomorrow maybe.
[21:10:47] <saltrocklamp[m]> for what it's worth, i highly value the opinion of someone who is reimplementing common lisp in common lisp
[21:11:18] <beach> Oh, that's flattering!  Thank you!
[21:11:36] <saltrocklamp[m]> i certainly didn't mean to offend. enjoy your dinner!
[21:11:57] <beach> No, no, I was not offended.  I just quit listening because I had nothing more to offer.
[21:12:31] <_death> saltrocklamp[m]: you can do that, and people have (e.g., metabang-bind).. but CL already provides constructs for ordinary programming, so maybe instead it's better to expend effort with more domain specific abstractions, and not head in the "private language" direction
[21:12:38] <lotuseater> saltrocklamp[m]: "featuring 100% less C" ^^
[21:12:53] <saltrocklamp[m]> i will look up metabang-bind, thanks :P
[21:13:33] <saltrocklamp[m]> i agree, 99% of the "fun" code i write usually gets refactored to "boring" code by the time it starts getting serious use. but i enjoy exploring programming language design quite a lot
[21:14:04] <_death> saltrocklamp[m]: sure, I think every lisper goes through these stages :)
[21:14:06] *** Joins: SystemFFan (~SystemFFa@188.70.6.7)
[21:15:15] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:15:17] <_death> (although not everyone calls his library "cl21" ;)
[21:15:48] <saltrocklamp[m]> i am admittedly not a lisp lifer, although i do enjoy using it for my little ad-hoc scripts
[21:18:59] *** Joins: selwyn (~selwyn@user/selwyn)
[21:19:45] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[21:20:10] *** Joins: selwyn (~selwyn@user/selwyn)
[21:30:16] <_death> I was reminded of https://plaster.tymoon.eu/view/2612#2612 .. for your enjoyment (google groups is evil, won't let me link to the raw message)
[21:31:33] <lotuseater> and those google groups message flows are awful to read from its not existent typesetting
[21:42:03] <_death> it was an actual thing btw.. https://common-lisp.net/project/wispylisp/
[21:47:08] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:48:34] *** Quits: scymtym (~user@ip-129-70-148-204.WLAN.Dyn.CIT-EC.NET) (Ping timeout: 252 seconds)
[21:54:10] *** Quits: Devon (~devon@2601:184:4780:ee50::60b0) (Ping timeout: 240 seconds)
[21:54:16] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:54:38] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:04:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:06:08] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[22:06:33] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:09:33] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[22:12:15] *** Joins: VincentVega (~user@212.241.16.18)
[22:12:27] *** Parts: VincentVega (~user@212.241.16.18) ()
[22:12:59] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:ddf9:80b9:e2b8:78e1)
[22:13:36] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:15:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:33:29] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 244 seconds)
[22:33:45] *** Joins: amb007 (~a_bakic@229.15.23.93.rev.sfr.net)
[22:38:21] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[22:38:45] *** Joins: srhm (~srhm@user/srhm)
[22:41:59] *** Joins: Alfr (~Alfr@user/alfr)
[22:42:53] *** Quits: keir (~keir@user/keir) (Quit: keir)
[22:43:04] *** Joins: keir (~keir@user/keir)
[22:43:10] *** Joins: Oladon (~olad@98.43.81.226)
[22:49:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:57:37] *** Joins: akoana (~ah@user/akoana)
[22:59:20] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[22:59:55] *** Joins: srhm (~srhm@user/srhm)
[23:00:31] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:08:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[23:11:20] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[23:11:44] *** Joins: srhm (~srhm@user/srhm)
[23:15:54] *** Joins: VincentVega (~user@212.241.16.18)
[23:18:50] *** Joins: qhong (~igloo@DN200ouhk.stanford.edu)
[23:25:27] *** Quits: qhong (~igloo@DN200ouhk.stanford.edu) (Ping timeout: 245 seconds)
[23:26:24] *** Joins: qhong (~igloo@DN200ouhk.stanford.edu)
[23:31:37] *** Quits: qhong (~igloo@DN200ouhk.stanford.edu) (Remote host closed the connection)
[23:31:58] *** Quits: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887) (Quit: Client closed)
[23:32:29] *** Joins: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887)
[23:33:52] *** Joins: qhong (~igloo@DN200ouhk.stanford.edu)
[23:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:37:39] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:40:55] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:45:05] *** Joins: gaqwas (~john@dynamic-077-002-189-054.77.2.pool.telefonica.de)
[23:45:18] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:48:53] *** Joins: karlosz (~karlosz@5.9.160.72)
[23:50:40] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 252 seconds)
[23:50:52] *** Quits: qhong (~igloo@DN200ouhk.stanford.edu) (Remote host closed the connection)
[23:51:13] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[23:53:56] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[23:54:12] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:56:40] *** Quits: pve (~pve@87-93-196-103.bb.dnainternet.fi) (Quit: leaving)
[23:59:22] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
