[00:02:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[00:03:05] <etimmons> Yes
[00:03:37] <saltrocklamp[m]> ty
[00:04:48] <saltrocklamp[m]> borodust: i just saw this. claw is like autowrap in that it generates everything for you?
[00:05:46] *** Joins: srhm (~srhm@user/srhm)
[00:07:53] <borodust> saltrocklamp[m]: in that sense - yes
[00:08:19] <borodust> i would go as far as to say - literally
[00:08:38] <borodust> it generates everything for me, but mostly not everyone else
[00:08:56] <borodust> although there are few exceptional ones like etimmons
[00:09:23] *** Joins: cosimone (~user@93-44-186-196.ip98.fastwebnet.it)
[00:10:35] <saltrocklamp[m]> lol
[00:10:43] <borodust> saltrocklamp[m]: don't bother with claw atm, i'm really just helping to generate bindings, and promoting :claw - it is extremely hard to get it work atm
[00:10:57] <borodust> *and NOT promoting :claw ;p
[00:11:09] <saltrocklamp[m]> well if you manage to get the libgit2 bindings working i will certainly use them
[00:11:56] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[00:12:11] <borodust> i also suggest using etimmons bindings, not the ones i generated - i'm not going to maintain them
[00:13:19] <saltrocklamp[m]> hah ok
[00:16:55] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Quit: bbiab)
[00:21:20] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[00:21:45] *** Joins: srhm (~srhm@user/srhm)
[00:22:50] <borodust> okay, added an example
[00:23:03] <borodust> that's it for this system, i guess ;p
[00:23:21] <borodust> steal everything you need from it
[00:24:50] *** Quits: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a) (Quit: Leaving)
[00:25:06] * borodust is back working on delivering common lisp games based on alien-works
[00:26:16] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[00:27:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[00:31:07] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:34:01] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:34:14] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[00:36:07] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:52:41] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:59:08] *** Quits: VincentVega (~user@185.66.254.225) (Ping timeout: 250 seconds)
[01:02:58] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (Quit: ZNC 1.6.3+deb1ubuntu0.2 - http://znc.in)
[01:03:59] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[01:12:21] *** Quits: pve (~pve@178-55-34-52.bb.dnainternet.fi) (Quit: leaving)
[01:13:40] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:15:13] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (Quit: ZNC 1.6.3+deb1ubuntu0.2 - http://znc.in)
[01:15:22] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[01:19:16] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[01:24:56] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[01:26:58] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:30:39] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Client Quit)
[01:31:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:40:02] <saltrocklamp[m]> `typedef struct Foo Foo_t` does this require _two_ groveler forms? `(ctype foo-t "Foo_t")` and `(cstruct foo "Foo" ())`?
[01:40:43] *** Joins: lisp123 (~lisp123@45.86.202.23)
[01:42:59] <lisp123> borodust: Are you using lisp-works?
[01:47:20] <borodust> lisp123: i primarily use sbcl and ccl, but sometimes check if lispworks, khm, works too, yes
[01:47:48] <lisp123> borodust: Ah okay. Thought you were using lisp-works as your main (alien-works)
[01:48:49] <borodust> i plan to maintain support for SBCL, CCL and ECL in alien-works
[01:49:22] <borodust> if at some point in time i would be able to afford lispworks - i'll certainly add it to this list ;p
[01:50:13] <lisp123> Oh I see :P Sorry I thought you were making a pun 'alien-works' = 'lisp-works'
[01:50:59] <borodust> nah, it's a pun for alien-works being a heavily lispfied layer over foreign libraries
[01:51:33] <borodust> or properly lispified, as much as possible
[01:51:39] <lisp123> Nice
[01:52:26] <borodust> https://github.com/borodust/alien-works#readme
[01:54:04] <lisp123> Nice one. Hope it goes well.
[01:54:14] <lisp123> "Non-consing in tight loops" :D
[01:54:35] <borodust> thanks!
[01:54:44] *** Joins: Bike (~Bike@71.69.170.70)
[01:54:44] *** ChanServ sets mode: +o Bike
[01:57:22] *** Joins: Oladon (~olad@98.43.81.226)
[02:00:14] *** Joins: selwyn (~selwyn@user/selwyn)
[02:02:57] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 245 seconds)
[02:07:02] *** Joins: vats (~vats@180.149.226.8)
[02:09:53] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 250 seconds)
[02:10:43] <saltrocklamp[m]> "stylobate" that's a new one on me
[02:11:25] <saltrocklamp[m]> "The immediate foundation of a row of classical columns." -- good metaphor
[02:12:00] * borodust winks
[02:22:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:31:04] *** Quits: lisp123 (~lisp123@45.86.202.23) (Quit: Leaving...)
[02:36:34] *** Joins: srhm (~srhm@user/srhm)
[02:50:59] *** Parts: hayley (~theemacss@user/hayley) ()
[02:52:06] *** Quits: frgo (~frgo@p200300deef0cee0079bf631799723ede.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:52:34] *** Joins: frgo (~frgo@p200300deef0cee0079bf631799723ede.dip0.t-ipconnect.de)
[03:02:58] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[03:07:16] *** Joins: akoana (~ah@user/akoana)
[03:17:22] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 250 seconds)
[03:18:57] <MetaYan> borodust: Thanks for the git2 example.
[03:20:27] *** Quits: cosimone (~user@93-44-186-196.ip98.fastwebnet.it) (Ping timeout: 240 seconds)
[03:26:12] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:27:14] <borodust> MetaYan: no problemo
[03:30:03] <borodust> thanks for bodge-glfw report :)
[03:32:27] *** Quits: dra (~dra@2a04:4540:641d:1e00:812b:a6f8:737:14ef) (Ping timeout: 240 seconds)
[03:34:35] <MetaYan> borodust: You're most welcome. Glad I finally nailed that one. Been tearing my hair about why it didn't find %glfw . It's used by sucle.
[03:36:18] <borodust> yeh, i've lost access to macos machine and can't check that stuff anymore
[03:46:57] <borodust> MetaYan: well, okay, lemme try to generate proper bindings for darwin, hopefully they would work ;p
[03:47:02] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[03:47:23] <borodust> actually, why not, while we are at it, i might as well just go for windows too
[03:50:12] <borodust> mingw though
[03:50:28] <borodust> claw doesn't feel well with msvc yet
[03:53:40] <MetaYan> borodust: New bindings work on Darwin. Tested with sucle.
[03:55:41] <borodust> noice!
[03:56:03] *** Quits: akoana (~ah@user/akoana) (Ping timeout: 250 seconds)
[03:58:07] *** Joins: akoana (~ah@user/akoana)
[04:05:11] <MetaYan> borodust: Found another drawin at https://github.com/borodust/bodge-chipmunk/blob/master/src/claw.lisp#L9
[04:07:47] *** Quits: gaqwas (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de) (Ping timeout: 240 seconds)
[04:16:33] <borodust> i'm a master copypaster it seems
[04:17:01] *** Joins: selwyn (~selwyn@user/selwyn)
[04:17:21] <borodust> ill grep for drawin guy across all of my projects tomorrow, thanks for heads up!)
[04:20:57] *** Quits: random-nick (~random-ni@87.116.182.72) (Ping timeout: 248 seconds)
[04:21:46] *** Quits: jhi (sid81469@tooting.irccloud.com) (Ping timeout: 268 seconds)
[04:23:04] <MetaYan> borodust: Yeah, found 20 with https://github.com/search?q=user%3Aborodust+%3Adrawin&type=code ;)
[04:23:10] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:24:27] *** Joins: jhi (sid81469@tooting.irccloud.com)
[04:27:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:33:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[04:37:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 250 seconds)
[04:37:10] *** Joins: Oladon (~olad@98.43.81.226)
[04:38:18] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[04:38:42] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[04:57:14] *** Joins: selwyn (~selwyn@user/selwyn)
[04:59:01] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 252 seconds)
[05:03:38] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[05:06:37] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[05:07:51] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[05:08:27] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[05:16:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[05:24:12] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:2fba:9963:fd86:4722) (Remote host closed the connection)
[05:24:34] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:d462:e657:ce30:705d)
[05:24:45] *** Joins: Guest93 (~Guest93@150.117.153.87)
[05:30:46] *** Quits: lottaquestions (~nick@2607:fa49:503f:6400:9cd2:19ca:9a38:1647) (Quit: Konversation terminated!)
[05:31:10] *** Joins: lottaquestions (~nick@2607:fa49:503f:6400:3dd8:9ee2:59fc:db76)
[05:43:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[06:02:27] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:d462:e657:ce30:705d) (Ping timeout: 240 seconds)
[06:18:19] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:6087:2dc0:89f0:ada0)
[06:19:54] <Yehowshua> in scheme you could have (begin list-of-actions). Is there anything like that in lisp? This could be useful if I want to do multiple things in an if statement
[06:20:18] <moon-child> progn
[06:20:28] <moon-child> cl progn is the same as scheme begin
[06:24:32] <Yehowshua> thanks
[06:36:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:59:03] <Yehowshua> it seems you have to use apply with `#'` before the function name
[06:59:18] <Yehowshua> is that correct?
[06:59:25] <Yehowshua> feels a little odd coming from scheme
[07:00:28] <Bike> yes, lisp has a separate function namespace
[07:00:53] <Bike> "#'foo" is short for "(function foo)"
[07:01:11] <Yehowshua> ah
[07:01:19] <moon-child> not in all cases, of course.  (let ((f (lambda (x) (* 2 x)))) (apply f '(3)))
[07:01:24] <Bike> which just looks up the variable as a function binding, rather than a regular value binding like you'd get from foo by itself
[07:01:36] <Bike> and yeah, you can still bind names to functions normally if you want
[07:01:42] <moon-child> in that case f is bound in the variable namespace, so you do not use #'
[07:01:56] <lotuseater> Yehowshua: I see why this seems odd to you :)
[07:02:01] <Bike> but we more often bind functions with the flet and labels special operators, which bind as functions
[07:02:37] <Yehowshua> yeah - was gonna stick with scheme - but i really needed smp threads - so common lisp it is
[07:03:47] <Yehowshua> well, specifically sbcl
[07:04:07] *** Quits: Guest93 (~Guest93@150.117.153.87) (Ping timeout: 256 seconds)
[07:04:20] <Yehowshua> why does `(let ((f (lambda (x) (* 2 x)))) (apply f '(3)))` not need `#'` ?
[07:04:27] <Bike> because let just binds as a value
[07:04:54] <Bike> you can think of there being two environments, the "value" environment and the "function" environment
[07:05:11] <Bike> you bind in the value environment with let or let* or lambda abstraction, and access it with variable names; it's the same as scheme
[07:05:32] <Bike> names in the "function" environment are instead bound by flet or labels, and accessed with the FUNCTION operator i mentioned
[07:05:50] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[07:06:03] <Bike> the fact that the value you're binding with let happens to be a function doesn't mean let binds in the function environment instead
[07:06:19] <Bike> by flet or labels or macrolet*, now that i'm thinking about it
[07:06:35] <Bike> that's an asterisk like "i forgot to say something", not part of the operator name "macrolet"
[07:06:56] <Yehowshua> gonna take a moment to digest
[07:07:39] <lotuseater> take all the time you need :)
[07:10:08] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:6087:2dc0:89f0:ada0) (Quit: Client closed)
[07:10:42] <Bike> well, ok.
[07:12:14] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:6087:2dc0:89f0:ada0)
[07:12:35] <Yehowshua> I think I'll stick with (function myfunc) instead of #'myfunc
[07:12:38] <Yehowshua> less obscure
[07:13:03] <Yehowshua> also, `format` code is not super readable
[07:13:13] <Bike> as you like.
[07:13:21] <moon-child> nothing is readable if you do not know how to read it
[07:13:23] <Bike> pretty much all format operations can be done long form.
[07:13:26] <Bike> if you want.
[07:13:31] <lotuseater> moon-child: good point :D
[07:13:34] <Bike> like as macro forms and function calls and stuff i mean.
[07:13:55] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[07:14:38] <lotuseater> Yehowshua: and the difference between FLET and LABELS is, with the former you define closures that are not aware of each other and with the latter some that are and can call each other recursively
[07:15:11] <Bike> it's let versus letrec.
[07:15:12] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[07:16:18] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[07:18:41] *** ChanServ sets mode: -o Bike
[07:22:01] <Bike> hm, what can you do with format that you can't do with another function call... print roman numerals, maybe
[07:31:20] <beach> Good morning everyone!
[07:31:53] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:6087:2dc0:89f0:ada0) (Ping timeout: 256 seconds)
[07:31:58] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:32:07] *** Quits: prxq (~quassel@x4dbe71a0.dyn.telefonica.de) (Ping timeout: 240 seconds)
[07:32:42] *** Joins: prxq (~quassel@x4db69b92.dyn.telefonica.de)
[07:33:52] <lotuseater> Hello beach :)
[07:34:14] *** Joins: Oladon (~olad@98.43.81.226)
[07:59:09] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:00:47] *** Quits: hafat (~hafat@159.146.55.244) (Ping timeout: 240 seconds)
[08:12:00] *** Joins: semz (~none@user/semz)
[08:13:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:18:22] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[08:18:52] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[08:28:16] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[09:24:31] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:36:19] *** Joins: hafat (~hafat@159.146.55.244)
[09:40:33] *** Quits: hafat (~hafat@159.146.55.244) (Ping timeout: 250 seconds)
[09:44:10] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[09:44:24] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[09:45:33] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:56:49] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[10:25:48] *** Joins: retropikzel (~retropikz@2001:999:202:2575:a87a:9c14:b5d4:6c39)
[10:37:36] <susam> Good morning, beach, lotuseater! Good morning, everyone!
[10:44:31] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:45:07] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 240 seconds)
[10:45:45] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[10:47:43] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:55:30] <beach> Hello susam.
[10:59:04] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:02:01] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[11:36:33] *** Joins: selwyn (~selwyn@user/selwyn)
[11:48:16] *** Quits: retropikzel (~retropikz@2001:999:202:2575:a87a:9c14:b5d4:6c39) (Ping timeout: 250 seconds)
[12:06:08] *** Joins: retropikzel (~retropikz@85-76-22-77-nat.elisa-mobile.fi)
[12:12:39] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[12:14:49] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[12:15:30] *** Joins: hafat (~hafat@159.146.55.244)
[12:28:52] *** Joins: vats (~vats@180.149.226.8)
[12:32:13] *** Quits: retropikzel (~retropikz@85-76-22-77-nat.elisa-mobile.fi) (Ping timeout: 252 seconds)
[12:34:06] *** Joins: retropikzel (~retropikz@2001:999:202:2575:e156:70bf:34d5:4719)
[12:34:36] *** Parts: akoana (~ah@user/akoana) ()
[12:35:49] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:51] *** Joins: pve (~pve@176-93-112-45.bb.dnainternet.fi)
[12:38:39] *** Quits: retropikzel (~retropikz@2001:999:202:2575:e156:70bf:34d5:4719) (Ping timeout: 250 seconds)
[12:39:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:46:12] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[12:46:19] *** Joins: gaqwas (~john@dynamic-095-118-099-198.95.118.pool.telefonica.de)
[12:46:48] *** Joins: makomo (~makomo@user/makomo)
[13:07:03] *** Joins: akoana (~ah@user/akoana)
[13:11:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:14:34] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[13:22:30] *** Joins: retropikzel (~retropikz@85-76-22-77-nat.elisa-mobile.fi)
[13:31:37] *** Joins: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a)
[13:32:23] *** Quits: retropikzel (~retropikz@85-76-22-77-nat.elisa-mobile.fi) (Ping timeout: 250 seconds)
[13:38:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:53:30] *** gxt_ is now known as gxt
[13:54:21] *** Quits: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a) (Quit: Leaving)
[13:54:26] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:57:04] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:00:09] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[14:03:54] *** Quits: hafat (~hafat@159.146.55.244) (Ping timeout: 250 seconds)
[14:09:05] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:ce11:4d59:4a2a:341c)
[14:43:20] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[14:44:08] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[14:47:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:49:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[14:51:19] *** Quits: frgo (~frgo@p200300deef0cee0079bf631799723ede.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:51:21] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 248 seconds)
[14:51:30] *** Joins: frgo (~frgo@p200300deef0cee0055e6682922dee2f3.dip0.t-ipconnect.de)
[14:52:01] *** Joins: amb007 (~a_bakic@84.13.23.93.rev.sfr.net)
[14:56:27] *** Joins: dra (~dra@2a04:4540:641d:4500:812b:a6f8:737:14ef)
[14:57:30] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:58:07] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (Ping timeout: 240 seconds)
[15:03:19] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:04:47] *** Quits: dra (~dra@2a04:4540:641d:4500:812b:a6f8:737:14ef) (Ping timeout: 240 seconds)
[15:09:34] *** Joins: hafat (~hafat@159.146.55.244)
[15:09:56] *** Quits: hafat (~hafat@159.146.55.244) (Client Quit)
[15:09:57] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[15:20:10] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 240 seconds)
[15:24:07] *** Quits: amb007 (~a_bakic@84.13.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[15:24:34] *** Joins: amb007 (~a_bakic@84.13.23.93.rev.sfr.net)
[15:24:45] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:27:21] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:27:40] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[15:30:40] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 240 seconds)
[15:30:56] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[15:44:11] *** Joins: random-nick (~random-ni@87.116.180.61)
[15:51:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[15:51:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:59:27] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 240 seconds)
[16:05:38] *** Quits: amb007 (~a_bakic@84.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[16:06:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:25:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[16:26:13] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:27:37] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[16:28:57] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 248 seconds)
[16:29:07] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:49:14] *** Joins: selwyn (~selwyn@user/selwyn)
[16:56:51] *** Joins: Qwnavery (~Qwnavery@115-64-142-211.tpgi.com.au)
[16:57:36] *** Quits: Qwnavery (~Qwnavery@115-64-142-211.tpgi.com.au) (Client Quit)
[17:05:37] *** Joins: shka (~herr@109.231.62.239)
[17:13:53] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[17:22:29] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 250 seconds)
[17:22:54] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[17:23:13] <lotuseater> How is your opinion to using DO, DOLIST and friends?
[17:23:52] <mfiano> Is there a format directive for numeric ordinals instead of words?
[17:23:52] <beach> I decided early on to use LOOP exclusively for SICL, because I think it is much more readable than the others.
[17:24:23] <beach> lotuseater: ↑
[17:24:33] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:24:47] <beach> lotuseater: That is also why LOOP was one of the first SICL modules I implemented.
[17:24:55] <lotuseater> beach: okay I thought something like that :)
[17:26:49] <beach> lotuseater: I don't really understand the argument that LOOP is not "Lispy".  I mean, that sounds like the essence of Lisp is about parentheses, which is a bit simplistic.
[17:27:01] <mfiano> It appears not.
[17:27:53] <lotuseater> I like LOOP, too. And must admit I got into touch with it before really getting how to use DO, DOLIST correctly.
[17:28:20] <lotuseater> And it's good the keywords can be given as real keywords. :)
[17:32:43] <lotuseater> mfiano: Could you explain (for me) a bit more the numeric ordinals and words? Just that I get it right.
[17:32:56] * mfiano rolls his ownfirst vs 1st, 2nd vs second, etc
[17:33:01] <mfiano> i roleld my own
[17:33:21] <mfiano> sorry, i'm, all over the keyboard today :/
[17:33:29] <lotuseater> cool
[17:33:44] <lotuseater> ah no problem :)
[17:33:58] <semz> mfiano: ~:R
[17:34:08] <mfiano> That is for ordinal words
[17:34:21] <lotuseater> there is still much of FORMAT I'm not well aware of (or have not yet practiced enough)
[17:34:23] <semz> oh I see
[17:34:48] <lotuseater> ah that
[17:36:44] <mfiano> (let ((x 1051)) (format nil "~d~:[~[th~;st~;nd~;rd~:;th~]~;th~]" x (< (mod (- x 10) 100) 10) (mod x 10)))
[17:36:59] <semz> ow
[17:38:01] <mfiano> i guess you could unroll the loop and lexically bind each step, or use LOOP but the power of the concise format DSL wins for this
[17:39:16] <lotuseater> maybe in an extensible FORMAT this could support other languages :)
[17:39:31] <semz> beach: I think it's not so much about parentheses as it's about the way LOOP clauses are not a single form and the lack of extensibility.
[17:39:40] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[17:40:10] <beach> DO is extensible?
[17:40:51] <semz> DO doesn't have any arbitrary restrictions as far as I can tell
[17:41:10] <semz> (at a price however)
[17:41:38] <semz> as much as I've come to like LOOP over time, ":when condition :collect expr :else :do thing" still looks out of place to me
[17:41:56] <mfiano> Then use the synonym :if
[17:42:13] <semz> :if has the same issue
[17:42:21] <mfiano> I don't see the issue
[17:42:25] <lotuseater> it's an issue?
[17:43:07] <semz> "issue", it's purely a bikeshed^W style question
[17:43:24] <akater[m]> lotuseater: `dolist` is simple.  OTOH, I still don't know how to use or read `do`.  I read and write a considerable amount of Elisp, and I encounter `do` extremely infrequently, unlike `loop` or `dolist`.
[17:43:29] <mfiano> The only issue I have with loop is it's horizontal space wastage 3 dimensional iterations.
[17:44:22] <semz> but with (if _ _ _), everything related to the if is a subform, whereas in LOOP everything is just randomly strewn across the LOOP form itself
[17:44:58] <lotuseater> akater[m]: yes okay that is the simple one
[17:45:49] * mfiano waits for the inevitable Iterate discussion, where he will go back to code
[17:46:43] <mfiano> LOOP is one of the most Lispy things we have.
[17:47:09] *** Joins: alendvai__ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[17:47:10] <beach> There is an argument in favor of DOLIST when it is applicable, namely that it is the most specific construct that will get the job done when it is applicable.
[17:47:12] <lotuseater> and i saw via macroexpansion a difference between SBCL and CCL LOOP: when defining an iterator with ":for i" the former states (declare (type real i)), the latter (declare (type number i))
[17:48:26] <beach> lotuseater:  Don't they both use MIT LOOP?  I wonder why that declaration is even necessary given the type inference.
[17:49:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:49:33] <lotuseater> I don't know. SBCL has its SB-LOOP module.
[17:49:47] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 250 seconds)
[17:50:00] <beach> Yes, but I think it is a slightly modified version of MIT LOOP.
[17:50:17] <beach> I must have written something about that in my early paper on SICL LOOP.
[17:50:56] <lotuseater> (loop :for i :from #c(1 2) :by #c(1 2) ...) ^^
[17:51:19] <beach> http://metamodular.com/SICL/loop.pdf
[17:51:22] <lotuseater> I'll look into that now again.
[17:51:35] <lotuseater> oh thx for the link :)
[17:51:40] <beach> Pleasure.
[17:52:38] <mfiano> For the illiterate https://www.youtube.com/watch?v=ZJr81DtSwUc
[17:52:39] <lotuseater> I had it already saved with the other in my CommonLisp/SICL folder.
[17:52:41] *** Quits: gaqwas (~john@dynamic-095-118-099-198.95.118.pool.telefonica.de) (Ping timeout: 248 seconds)
[17:59:02] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[17:59:31] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:00:43] *** Quits: alendvai__ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[18:01:17] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[18:07:59] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[18:09:44] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[18:11:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:12:55] <lisp123> A puzzle for you
[18:14:03] <lisp123> Write a macro (without using any reader macros) such that any expression of the form abcd.slot is converted to (obj-type-of-abcd-slot abcd)
[18:14:06] <lisp123> Can it be done?
[18:14:28] <lisp123> (and don't shoot me for suggesting it ;)!)
[18:15:33] <beach> Why would you want such a thing in the first place?  Slots are implementation details that should be used only in class definitions.
[18:16:08] <lisp123> Not something I suggest, but just curious if its possible (also I prefaced not to shoot the messenger ;))
[18:16:22] <mfiano> It wouldn't be Lisp
[18:16:34] <lisp123> But can it be done (its a puzzle)
[18:16:36] <mfiano> ( is a reader macro dispatch character
[18:17:14] <beach> In fact, I can see only two reasons why slots have names in the first place.  One is when a DEFCLASS form is re-evaluated, it must mention the same slot as before, and another one is that to mention the same slot in a subclass, it also has to be the same name.
[18:17:14] <beach>  
[18:18:55] <mfiano> beach: And it greatly annoys me that SBCL warns about slot name package variance
[18:19:14] <beach> Ah, yes, I can see why.
[18:19:23] <beach> ... why it annoys you, I mean.
[18:19:25] <mfiano> You get a style warning if 2 slots have the same SYMBOL-NAME. Uhh, isn't that what packages are for?
[18:19:35] <beach> Exactly,  I totally agree.
[18:20:25] <mfiano> I used to use uninterned symbols for classes, and i stopped when SBCL filled my compile log up
[18:20:34] <mfiano> class slots*
[18:20:42] <mfiano> because they are, as you put it, implementation details
[18:21:14] <beach> Heh, interesting, I thought about using uninterned symbols for slot names, but that's when I realized the two reasons I mentioned.
[18:21:21] <lisp123> Is that because the symbol associated with :accessor for a slot is relevant?
[18:21:32] <lisp123> (that's why the slot name is not relevant)?
[18:21:35] <mfiano> Not :accessor, but any accessor
[18:21:42] <lisp123> mfiano: Gotcha
[18:22:11] <mfiano> There are reader and writer accessors as well, and a lot does not need to have just 1 accessor. it may have 0 or more
[18:22:17] <mfiano> s/lot/slot/
[18:22:55] <lisp123> Okay to clarify my puzzle (I was trying to obscure the references to other languages ;)), if I some code such as this.slot -> can it be converted to (accessor this)
[18:22:57] <beach> lisp123: Sort of.  It's because accessors generate methods that are part of the protocol for a module, so they can be removed as accessors, and implemented differently without changing client code.
[18:23:11] <mfiano> Infact it really gets on my nerves when people use symbol names for slot names that have been exported, usually the same name as their accessors.
[18:23:14] <beach> lisp123: But once you use a slot, you have committed to an implementation detail.
[18:23:19] <mfiano> This is a big hole in your user API
[18:24:00] <lisp123> beach: Ah yes, that makes perfect sense
[18:25:10] <lisp123> mfiano: I tend to do classname-slotname for accessors
[18:25:12] <mfiano> lisp123: Sure just use ppcre or something. symbols have a string representation to manipulate any way you please, and construct whatever secondary data structure you want from that information
[18:25:29] <mfiano> Please stop
[18:25:32] <mfiano> Use packages
[18:25:50] <mfiano> That conflicts with a well-designed generic function protocol
[18:25:52] <beach> lisp123: I agree with mfiano.
[18:26:12] <lisp123> Oh I thought it was recommended practice (forgot where I read it)
[18:26:48] <beach> lisp123: It is used on older Common Lisp code, and I am guessing that the package system wasn't very well developed at the time, or at least not used so much.  Why, I don't know.
[18:27:02] <lisp123> I see, thanks
[18:28:12] <mfiano> People new to Lisp get confused about packages and why they are so useful. Not too many other languages have anything like it.
[18:28:41] <lisp123> Yes, I remember getting confused for a while
[18:28:46] <beach> lisp123: Conventions evolve (slowly), but they do evolve.  Often, it is impossibly to find the reason for a convention, and there may not be a rational reason for some conventions.
[18:29:06] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-254.prtc.net)
[18:29:45] <lisp123> beach: Agreed. Its a combination of good ideas and also widely accepted practice which is too much to change (for not enough benefit)
[18:30:07] <beach> It's the same in natural languages.  There is no particular reason for using "tooth brush" and "dental floss" over "dental brush" and "tooth floss".
[18:30:25] <mfiano> With package-local nicknames being a defacto standard now, there's really no reason to create verbose calling conventions or other hacks that languages without real packages have.
[18:30:36] <lotuseater> lisp123: and note the reader can't read "backwards". correct me please if I'm wrong but someone very capable made this clear to me some weeks ago
[18:31:50] <lisp123> beach: I find this one better than the Norvig guide commonly referenced, http://www.mohamedelafrit.com/education/ENSEIRB/lisp/standards.pdf
[18:32:01] <beach> lisp123: I know you excluded reader macros, but if you really want to translate code in a different language, you might consider using Eclector which has configuration hooks for how tokens are interpreted.
[18:32:16] <mfiano> beach told me about a parser of his that keeps a look-behind buffer or some such.
[18:32:21] <mfiano> I don't recall the details
[18:32:28] <beach> lisp123: Heh, thank you I guess.
[18:32:52] <lisp123> I increased my usage of cond a lot since reading it :)
[18:33:10] <lisp123> lotuseater: That's my understanding too
[18:34:24] <lisp123> So with the puzzle, it would require runtime reading of what type of obj "this" is - can this be done by a macro?
[18:34:29] <lotuseater> lisp123: I meant if some construct is finally and successfully read in and expanded in the normal case the information is not accessible anymore how exactly it came into existence.
[18:34:31] <beach> lisp123: I guess the link is owned by one of my former students.  One of the few in his group who understood the value of Common Lisp.
[18:35:10] <beach> lisp123: I mean, I hope you realize that I am the author of that document.
[18:35:20] <lisp123> beach: Yes of course :)
[18:35:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[18:36:33] <mfiano> and speaking of packages, and having been forced to work with blub languages lately, I have really come to appreciate them more. The cognitive break caused by file-level namespaces and imports is a chore when hopping around codebases, especially by people with no convention in place, and often the same objects are referenced with different prefices or even names in different files. It's insane.
[18:36:42] <lotuseater> lisp123: did we already talk sometime about SYMBOL-MACROLET?
[18:37:12] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:38:14] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-254.prtc.net) (Quit: Client closed)
[18:38:21] <semz> I knew I saw classname-slotname somewhere prominent, it was https://lisp-lang.org/style-guide/#clos
[18:39:26] <lotuseater> even in Haskell this is weird, it goes by file names and paths or must be as a package by one of the management systems
[18:39:34] <lisp123> lotuseater: I don't recall, but I just had a look. Looks cool
[18:40:09] <lotuseater> lisp123: it saves you sometimes too much repetition and a headache
[18:40:55] *** Joins: retropikzel (~retropikz@85-76-22-77-nat.elisa-mobile.fi)
[18:41:02] <lisp123> lotuseater: yes it seems like a nice and easy way to write less code, will play around with it
[18:41:17] <mfiano> Ah, the old problem with the Internet that anyone can try to be an authoratative source. No wonder I never heard of that "style guide".
[18:41:39] <lisp123> (p.s. I do try and keep my code as standard as possible, despite what may be implied here ;)
[18:42:02] <lisp123> semz
[18:42:40] *** Joins: VincentVega (~user@185.66.254.237)
[18:46:21] <mfiano> I just read that "style guide" anyway, and I would definitely not recommend following it for several reasons.
[18:47:42] <semz> lisp123: hm?
[18:48:14] *** Joins: raeda_ (~raeda@72.49.219.33)
[18:48:20] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[18:53:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:54:20] <lotuseater> even Google has a style guide for CL
[19:02:02] *** Joins: dekks (~dekks@host-92-3-65-17.as13285.net)
[19:04:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[19:05:17] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:09:34] <pjb> beach: lotuseater: it's not that LOOP is not lispy. It's that it's harder to parse (correctly), and to infer its semantics (correctly and conformingly; there are also enoug implementation specific parts in LOOP).  On the other hand, DO, DO*, DOTIMES, DOLIST have very simple syntax and semantics, so they can be processed automatically (in macros or tools) more easily.
[19:10:19] <pjb> So I would say, that yes, they're more lispy than loop, because you can more easily process correctly them using simple lisp list-processing functions.
[19:10:48] *** Joins: srhm (~srhm@user/srhm)
[19:11:06] <mfiano> I disagree.
[19:11:22] <pjb> But LOOP is convenient.  Also, loop with let you eat the surrounding LET forms.
[19:11:41] <pjb> LOOP WITH lets you…
[19:12:31] *** Joins: selwyn (~selwyn@user/selwyn)
[19:14:05] *** dekks is now known as _brummie
[19:16:22] <loke[m]> mfiano: It
[19:16:40] <mfiano> There are few other notable exemplary pieces of software that highlights the macro extensibility of the language. not to mention, built it, and loved or hated by everyone that uses the language.
[19:16:53] <loke[m]> mfiano: That style guide is very short, and mostly contains non-controversial things like "use WHEN instead of IF when you don't have an else part"
[19:17:28] <loke[m]> mfiano: Only controversial part is the "use one file per package". That one is just stupid. Anyway, it's a waste of time.
[19:18:38] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[19:19:34] <mfiano> It also contradicts itself, and the brevity does not do itself very well when suggesting IMPORT-FROM over USE, rather than well agreed upon alternatives.
[19:23:45] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[19:36:18] <VincentVega> It's how 'x₀ 'x0 are eql. Same for the superscript. I know about case-insensetivity, but this looks somewhat different, doesn't it? I am wondering if I can expect this behavior everywhere else besides SBCL (well, where unicode is supported anyhow). The reason I am asking is I am making a lambda reader macro, like the #` in LOL, except I was going to be using subscripts, because symbols like x0 are just ugly af.
[19:36:43] <mfiano> That is an SBCL feature. You can turn it off if you want.
[19:37:16] <mfiano> You cannot expect it everywhere.
[19:37:32] <VincentVega> mfiano: fr, any idea what's it called?
[19:38:17] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[19:38:21] <mfiano> See 7.1.2 of the manual
[19:38:49] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[19:39:21] <VincentVega> mfiano: thanks!
[19:49:48] *** Joins: lisp123_ (~lisp123@45.86.202.65)
[19:50:17] *** Joins: elf-fortrez (~elf-fortr@adsl-72-50-7-254.prtc.net)
[19:51:15] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[19:53:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[19:56:12] *** Joins: Guest40 (~Guest40@modemcable116.102-20-96.mc.videotron.ca)
[19:58:20] <borodust> MetaYan: :drawin should be fixed now across borodust projects
[19:59:15] <VincentVega> So, why does SBCL need symbol normalization? When is it useful exactly? Nice to have for visually equivalent characters, but what else? SBCL uses NFKC, and I want to disable it to use subscripts, but I am not sure what I might be losing here.
[20:05:59] *** Joins: gaqwas (~john@dynamic-095-118-099-198.95.118.pool.telefonica.de)
[20:07:07] *** Quits: _brummie (~dekks@host-92-3-65-17.as13285.net) (Quit: WeeChat 3.0)
[20:08:16] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:08:42] *** Joins: srhm (~srhm@user/srhm)
[20:10:49] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 248 seconds)
[20:11:50] *** PinealGlandOptic is now known as Everyone
[20:12:23] <mfiano> Mostly for unambiguous reading of text. Us Lisp programmers prefr to write out descriptive names for things, except those using April perhaps :)
[20:12:31] <mfiano> Also stream safety is another reason
[20:12:39] *** Everyone is now known as Everything
[20:14:15] *** Quits: Everything (~PinealGla@37.115.210.35) (Quit: leaving)
[20:14:21] <VincentVega> mfiano: stream safety? Sorry, I feel a bit lost here.
[20:14:29] *** Joins: Everything (~Everythin@37.115.210.35)
[20:15:01] <lotuseater> mfiano: haha ^^
[20:17:46] <jcowan> VincentVega: I'm not sure why you would want x0 and x sub 0 to be distinct: surely the first is a typographically imperfect use of the second.  I could see it if you also wanted to use superscripts.
[20:20:51] <VincentVega> jcowan: only to enforce the same usage project-wise, subscripts being created by a lambda-creating reader macro, but other than that I do agree with you.
[20:21:48] <VincentVega> jcowan: otherwise it's on the maintainer, which maybe isn't a big a deal
[20:23:09] <VincentVega> of course, a decent alternative is to hack emacs to show x0 as x sub 0, doesn't sound so bad in fact...
[20:25:22] <VincentVega> actually, I think I'mma go with the the emacs way, thanks all
[20:32:41] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 248 seconds)
[20:35:47] <lisp123_> VincentVega: How would you go about doin gthat?
[20:37:25] <lisp123_> I could only guess you would have to change the font characters being pointed to, but I am genuinely curious on how you would do that as I assume any change to the actual text would then feed through? Unless you are going to write a parser in Emacs that reads the input before sending it to SLIME/SWANK
[20:37:50] <lisp123_> (which doesn't sound that easy once you start working with compiled files)
[20:40:06] <VincentVega> lisp123_: with faces, it should actually be pretty simple
[20:40:27] <VincentVega> lisp123_: it doesn't modify files, just the appearance of text
[20:40:32] <lisp123_> VincentVega: Would love to see the code once you are done with it, if you don't mind :)
[20:40:53] <lisp123_> I didn't know you could replace character maps with font-lock-face
[20:41:41] <semz> buffer-display-table is also nice for that, I use Xah Lee's thing to render ^L (form feed) as a long line for instance
[20:41:59] <VincentVega> lisp123_: no prob, I am working on it now, will share it once working.
[20:42:07] <VincentVega> semz: sounds interesting, will check it out now
[20:43:33] <lisp123_> semz: Nice one, looks pretty useful
[20:44:20] <lisp123_> VincentVega: Thanks :)
[20:50:38] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[20:57:06] *** Quits: Guest40 (~Guest40@modemcable116.102-20-96.mc.videotron.ca) (Quit: Client closed)
[20:58:55] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:00:46] *** Quits: retropikzel (~retropikz@85-76-22-77-nat.elisa-mobile.fi) (Ping timeout: 250 seconds)
[21:05:19] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[21:06:40] *** Joins: khrbt (~znc@user/khrbt)
[21:11:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[21:11:27] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[21:12:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[21:12:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[21:13:01] *** Joins: aeth (~aeth@user/aeth)
[21:24:31] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:26:50] *** Quits: elf-fortrez (~elf-fortr@adsl-72-50-7-254.prtc.net) (Quit: Client closed)
[21:27:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[21:27:28] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[21:29:21] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[21:31:21] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[21:41:26] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:47:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[21:47:32] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[21:54:16] *** Joins: notzmv (~zmv@user/notzmv)
[22:19:04] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[22:24:25] <jmercouris> mfiano: i looked in the manual but couldn’t find what you meant
[22:24:30] <jmercouris> I want to profile a single call
[22:24:38] <jmercouris> And all of the things it calls
[22:24:51] <jmercouris> Anyone know of a way to do that in sbcl?
[22:25:06] <jmercouris> Flame graph doesn’t work in recent SBCLs
[22:25:15] <jmercouris> Maybe I’ll ask on #sbcl
[22:27:55] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[22:28:02] <VincentVega> Well, here's what I got so far: https://pastebin.com/HsDS4Vm4. You are probably right about it not being possible to do text replacement with font faces, not unless one loads a custom font, I think, where the 0 is replaced with ₀. Well, maybe. However, I thought that since the text lenght doesn't change, it should have been easy to do, as a special case. buffer-display-table seems to be only for characters, which would work
[22:28:02] <VincentVega> if it could account for context, which I don't think it can. The obvious other option is overlays and that's what the link does, but it's annoying in several ways, which I think may be fixed however...
[22:28:17] <VincentVega> lisp123_: ^
[22:31:46] *** Joins: rinwa (~user@141.226.14.13)
[22:35:23] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:40:53] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:ce11:4d59:4a2a:341c) (Remote host closed the connection)
[22:41:08] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:1cc:73cc:fc77:3c4a)
[22:47:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:50:27] *** Joins: karlosz (~karlosz@217.111.39.134)
[23:00:16] *** Quits: karlosz (~karlosz@217.111.39.134) (Read error: Connection reset by peer)
[23:00:23] *** Joins: karlosz_ (~karlosz@217.111.39.134)
[23:13:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[23:13:57] *** Parts: akoana (~ah@user/akoana) ()
[23:14:15] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Remote host closed the connection)
[23:14:25] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[23:14:36] *** Everything is now known as Everyone
[23:15:11] *** Quits: Everyone (~Everythin@37.115.210.35) (Quit: leaving)
[23:19:27] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[23:22:49] *** Quits: karlosz_ (~karlosz@217.111.39.134) (Quit: karlosz_)
[23:23:07] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:24:12] <lisp123_> VincentVega: Cheers!
[23:25:43] <lisp123_> VincentVega: I will experiment as well and let you know if I find something elegant
[23:35:37] *** Joins: selwyn (~selwyn@user/selwyn)
[23:36:23] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[23:36:47] *** Joins: selwyn (~selwyn@user/selwyn)
[23:43:07] <VincentVega> lisp123_: I am at this point right now: https://pastebin.com/SW0XVqsQ
[23:43:18] <VincentVega> in case it helps : )
[23:44:17] <lisp123_> VincentVega: THanks :)
[23:44:26] <lisp123_> I was looking at org mode, since they do something similar too
[23:45:11] <lisp123_> org pretty entities or something. Also perhaps worth seeing if one can create a custom face and use subscript face in these cases (where a number is at the end of a word)
[23:46:38] <lisp123_> I need to jump into something else, but this looks promising: https://mstempl.netlify.app/post/beautify-org-mode/
