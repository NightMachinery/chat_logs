[00:00:02] <seabass> one of the dependencies has a problem with Clojure specs, I'd say
[00:00:11] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[00:00:13] <seabass> what's the entire project.clj look like?
[00:00:55] <ridcully> something wrong with the ns in base64_vlq.clj
[00:01:07] <ridcully> is the `:` missing?
[00:01:45] *** Joins: matty_ma2 (~matt@129.222.239.110)
[00:02:36] <ridcully> if this is not part of the demo project, make sure to update all deps.  or else consider clojure 1.8 - which does not have spec and more likely will not complain at problems like this
[00:03:19] <karthik> Full project.clj: https://0x0.st/osxj.txt
[00:04:13] <karthik> ridcully: Thanks, I'll try with Clojure 1.8.
[00:04:47] <seabass> com.cemirck/piggieback (where the error is) is a intransitive dependency via com.cemerick/austin in project.clj 
[00:05:06] <seabass> so you could also update com.cemerick/austin to its latest version
[00:05:30] <seabass> [com.cemerick/austin "0.1.6"] in your project.clj
[00:05:31] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:05:58] <ridcully> you most likely want to update "everything" - cljsbuild needs certain cljs versions.  async fixes are most likely important.  etc...
[00:10:54] <jeaye> lein-ancient is great for keeping deps up to date.
[00:11:09] <jeaye> I run `lein ancient upgrade :all :check-clojure` pretty often.
[00:11:49] <ridcully> also antq
[00:12:48] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:12:54] <karthik> Whoa, okay, trying to understand this
[00:12:56] <wink> hmm. looking at clojure.java-time right now and this seems really weird
[00:13:20] <wink> I know the old Date stuff is broken, but outright refusing to accept a LocalDate to convert to UTC is also meh
[00:13:52] <wink> I wonder if I am supposed to extract the hours, minutes etc and reconstructing an instant now
[00:14:03] <seabass> karthik, well I'm probably about 2 months ahead of you in learning Clojure, so absolutely know how you feel :D
[00:14:18] <seabass> I'm just getting my head around deps.edn after starting with Leiningen
[00:15:16] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[00:16:39] <karthik> ridcully: Is lein-ancient the recommended way to update "everything"?
[00:16:42] <ridcully> wink: a local date does not have a time
[00:17:22] <wink> ridcully: localdate/localdatetime. I think that would be clear from context. it's only about the TZ
[00:17:23] <ridcully> karthik: i have used ancient in the past and i use antq nowadays
[00:19:00] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:19:11] <ridcully> wink: there is .atTime in java - maybe it's named the same in java-time?
[00:21:27] <ridcully> or .atStartOfDay + zoneId to get the instant
[00:23:22] <wink> nvm the docs are just very barebones
[00:23:30] <wink> found my thing in the tests. thanks though
[00:23:45] <wink> it does make sense and I was not being stupid
[00:24:03] <wink> (zoned-date-time (local-date-time 2015 10 11  21 36 42) "UTC") does exactly what I want
[00:24:15] <wink> I have  "local datetime" which I know to be UTC
[00:24:46] <wink> sometimes typed api docs would be really good :P
[00:25:06] <ridcully> so an Instant?
[00:25:23] <wink> yeah. but I didn't see how to convert localdatetime to instant
[00:25:34] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[00:25:40] <wink> or.. to zoneddatetime which is then coerced to instant I think
[00:25:46] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[00:25:46] <ridcully> .toInstant if you have a zoned-date-time
[00:25:57] <wink> yeah that is the easy part then :P
[00:26:06] <wink> local to zoned is what is not in the README
[00:27:09] <ridcully> LocalDateTime has .toInstant too
[00:29:14] <wink> it should, yea
[00:31:18] <wink> I am getting No matching field found: toInstant for class java.time.LocalDateTime though
[00:31:40] <wink> which is indeed a bit weird
[00:31:41] <ridcully> .toInstant
[00:32:11] <wink> yea. .toString and .plusSeconds work
[00:32:14] <wink> but not .toInstant
[00:35:14] <ridcully> well i think it takes a ZoneOffset anyway, which then again makes you dig up how to go from a ZoneId to that
[00:36:19] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:36:33] <wink> I mean it's solved now. 
[00:41:15] <karthik> ridcully: Is antq part of lein?
[00:42:45] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[00:43:31] <ridcully> karthik: no, it is another plugin.  lein-ancient most likely is your better pick right now (it does not support things, you don't need right now and it's easier to run/setup)
[00:48:29] <karthik> Is this the way to install lein-ancient? Edit ~/.lein/profiles.clj and add {:user {:plugins [...]}}?
[00:57:40] <karthik> jeaye: after running lein-ancient, I'm guessing I need to manually update all the dependcies in my project.clj files? How do I find the new version numbers to replace them with?
[00:58:46] <ridcully> it has an upgrade task.  from the docs `lein ancient upgrade :interactive`
[00:59:11] <ridcully> or leave that :interactive out
[00:59:29] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[01:00:53] <karthik> Cool, glad it does that. I get an error when I try it though, :cause "Tests failed"
[01:01:30] <karthik> "Exception in thread "main" java.lang.IllegalArgumentException: Can't define method not in interfaces: _setup, compiling:(cemerick/austin.clj:315:1)"
[01:01:36] <ridcully> if the tests where borked beforehand, you can switch them off
[01:01:54] <ridcully> it does run the tests by default as part of the upgrade and does not apply the update
[01:02:33] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[01:03:11] <ridcully> `lein help ancient` or `lein help ancient upgrade` should give some hints about that
[01:03:14] <karthik> Okay, I ran `lein ancient upgrade :no-tests` and it seems to have worked.
[01:03:32] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[01:04:27] *** Joins: joe_colben (~joe____co@185.190.112.211)
[01:06:04] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[01:08:14] <karthik> Nope, CIDER still doesn't launch. "error in process sentinel: Could not start nREPL server: Error loading cemerick.piggieback: Syntax error compiling at (cemerick/piggieback.clj:1:1)."
[01:08:38] <karthik> That was where the test was failing too, so that makes some sense.
[01:09:26] <jeaye> I gave you the command I run so you could copy it. :)
[01:09:30] <jeaye> "I run `lein ancient upgrade :all :check-clojure` pretty often."
[01:09:41] <karthik> Yup, that's what I ran
[01:09:53] <jeaye> It will update the project.clj for you.
[01:10:10] <jeaye> Then just restart your repl (however you do that).
[01:10:49] <jeaye> To check, but not update the project.clj, just use `check` instead of `upgrade` in that command.
[01:11:38] <karthik> jeaye: It did modify the project.clj file, everything except the clojure version.
[01:12:14] <karthik> I changed the clojure version to 1.10.3 manually and tried to run CIDER, and it failed with the error about cemerick.piggieback
[01:12:50] <karthik> (The original Clojure version in project.clj does not work with CIDER) 
[01:14:57] <karthik> I've spent way more time trying to get this project to run than I have trying to learn core.async, so I'm thinking of abandoning this demo code. I'll just look for standalone examples online and copy them into a fresh project.
[01:17:14] <ridcully> can't you copy the "example" over in a fresh project?  or do you plan to use cljs?
[01:17:42] <ridcully> i for my part know what piggieback is and i use it, but i have never heard of austin
[01:18:03] <karthik> ridcully: I'll need to figure out the dependencies for the demo code, don't know how to do that
[01:18:08] <ridcully> so my guess here is, that this is some oldschool cljs code, that did not age well
[01:18:18] <karthik> Yeah, it has cljs code in it
[01:18:48] <karthik> Here's the talk the code is for: https://www.youtube.com/watch?v=enwIIGzhahw
[01:19:44] <ridcully> why not watch the newer one ;)
[01:19:56] <karthik> Which is the newer one?
[01:19:56] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:20:18] <ridcully> afair it showed how some cruft was removed in core.async and was replaced with transducers
[01:20:21] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 268 seconds)
[01:20:49] <ridcully> https://www.youtube.com/watch?v=096pIlA3GDo this one - i only have seen it when it was new
[01:21:36] <ridcully> afair Tim also has just some clj file, that shows all the things you can do and exec along.  maybe this is the actual useful file from the first talk?
[01:21:56] <karthik> I've watched this one -- it describes patterns to avoid in core.async. It's not relevant to me at this point since I don't know how to even use it. 
[01:22:15] <karthik> The first talk has more of a tutorial flavor that I wanted to follow along with the code.
[01:22:34] <karthik> I'm liking Clojure, but this dependency tangle is killing my enthusiasm for it.
[01:23:24] <ridcully> do you have a link for the old project?
[01:23:29] <karthik> "afair Tim also has just some clj file" <-- Which talk is this?
[01:24:20] <ridcully> well it's understandable that for this example clojure is not better than the rest
[01:24:26] <TimMc> Is the dependencies issue with CIDER? Or something else?
[01:24:33] <karthik> https://github.com/halgari/clojure-conj-2013-core.async-examples.git
[01:24:33] <karthik>  
[01:24:43] <ridcully> my guess would be to get rid of the cljs stuff there - but that will just send you into another rabbit hole
[01:25:04] <karthik> TimMc: I thought it was with CIDER, but I'm not sure any more.
[01:25:53] <TimMc> I can't remember a time when people didn't complain about CIDER.
[01:26:12] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[01:26:18] <TimMc> Just run a separate lein repl or whatever and give CIDER a miss.
[01:26:22] <karthik> I'm sure there are more resources for core.async online that I can use, this repo has just eaten up my morning with nothing to show
[01:26:23] <ridcully> yes, cider needs clojure >= 1.7 or so - but austin borks because of the speced-macros
[01:26:40] <ridcully> i had suggested using clojure 1.8
[01:26:50] <karthik> I tried clojure 1.8, here's the error I got:
[01:26:54] *** Joins: schmudde (~schmudde@216.169.6.249)
[01:27:04] <ridcully> but in the end my guess is, that austin/cljs stuff is not really needed there anway
[01:27:31] <karthik> Oh it's the same error with clojure 1.8.0, with austin/cljs
[01:27:35] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[01:28:00] <karthik> It's all right folks, Brave and True has a chapter on core.async. I'll start there instead.
[01:28:36] <TimMc> And trust me, skip cider. :-P
[01:28:50] <karthik> TimMc: When it works it's sooo good
[01:30:15] <TimMc> What I do is I edit in Emacs, and then in my terminal REPL session I do (require 'some.ns :reload) and it works great.
[01:30:36] <karthik> That's good to know (the :reload keyword)
[01:30:47] <TimMc> It might even be the same number of keystrokes. :-P
[01:30:58] <ridcully> karthik: if you remove all the stuff from the project.clj , this works for me (i use cider via vim, so there might be nuances) - https://termbin.com/1cxr
[01:31:18] <karthik> Trying
[01:32:43] <karthik> ridcully: Okay that worked! I'm guessing some of the code will fail, but these are mostly isolated examples so it should be fine
[01:33:09] <karthik> Ah, all the cljs stuff will fail. No problem.
[01:33:14] *** Joins: matty_ma2 (~matt@129.222.239.110)
[01:33:52] <ridcully> since you can not run the ns anyway, it wants you to eval the things one by one.  so be careful to not run the ns at once
[01:34:32] <karthik> Why can't I run the ns?
[01:34:50] <ridcully> full of side effects
[01:35:13] *** Joins: atw (~user@2601:5c2:c500:76b0::f231)
[01:35:17] <ridcully> this is _not_ your regular clojure code.  this file is only there to be run from an editor
[01:35:17] <karthik> Do you mean the (ns cljs-examples ...)?
[01:35:36] <ridcully> you would rather see this sort of code in a user.clj file nowadays.  or inside (comment ...)
[01:35:45] <karthik> I don't see what's wrong with running https://0x0.st/os3L.txt
[01:35:54] <ridcully> that too.  you usually have on ns macro in a file at the top
[01:36:24] <ridcully> that's the point - run the form in your editor
[01:36:37] <karthik> Ah okay, you meant not to run the file at once.
[01:36:50] <ridcully> then follow the video and run all the forms one by one in the editor
[01:37:18] <karthik> Cool, that's how I've been doing things anyway.
[01:37:44] <ridcully> think of this file more like a notebook to work along.  this does not represent a clojure source file from a project
[01:38:05] <karthik> I've never seen a user.clj.
[01:38:20] <ridcully> this is just to warn you, since you are learning.  learn core.async from it, but not how to write a clojure program ;)
[01:38:34] <karthik> When I want to try something, I use lein new app x, then open core.clj and experiment.
[01:39:43] <ridcully> that is a sound approach
[01:40:09] <karthik> The most coding I've done is shell and python scripts (not a programmer by trade) so there seems to be a lot of boilerplate and tooling required to do clojure stuff
[01:41:11] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[01:42:06] <karthik> Oh, and a few emacs-lisp packages, which are also much easier to write for simple tasks (no namespaces!)
[01:43:02] <ridcully> yes, it needs some building blocks at least to download the jars and run things.  the most prominent ways are the cli-tools or leiningen.  if you want to have a more shell-ish DX, you might as well look at babashka
[01:43:55] <ridcully> if you do python the "proper way" i guess you also end up with virtual-env or whatever is used today and versions and cat herding
[01:44:59] <karthik> Started learning Clojure because I'm most familiar with emacs-lisp and wanted to write a desktop-search tool for myself. Emacs' single-threadedness and poor async capability made it a non-starter. People recommended writing CLI tools in rust/go but Lisp fits in my head better 
[01:45:17] *** Quits: atw (~user@2601:5c2:c500:76b0::f231) (Ping timeout: 240 seconds)
[01:46:10] <karthik> I wanted to install babashka from the AUR, but there was some conflict within ~/.clojure and I couldn't install both it and clojure
[01:46:58] <karthik> Yeah, I'm not touching "proper" python. For numerical computing (work stuff) Julia is much saner.
[01:48:29] <karthik> My current "desktop-search" tool is a combination of calls to locate, ripgrep and curl. Thought I could do better with clj, but I'm still figuring out the tooling a few weekends in.
[01:49:22] <TimMc> I started doing "proper" Python development two years ago when I changed jobs, and dependency management isn't all that bad. But there is a very specific way to do it right, and it's not obvious what that is if you're starting out solo. :-/
[01:49:41] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 256 seconds)
[01:49:42] <ridcully> i only wanted to say, that you usually end up with some build tool so your CI can build stuff etc.  but i'd assume, that python has way better "onboarding"
[01:50:03] <karthik> TimMc: Most of the numerical computing world uses Python so I'll have to learn it sooner or later. Just not planning to do it in my free time.
[01:50:30] <TimMc> If/when you do, 1) use a virtualend and 2) use pip-tools (not pip directly)
[01:50:38] <TimMc> *virtualenv
[01:50:56] <karthik> Folks seem to be using conda to handle this stuff.
[01:51:02] <TimMc> (pip-tools provides a dependency-lock mechanism)
[01:51:40] <TimMc> The place I work doesn't use conda so I have no idea what it is. But I'm sure there are other approaches too!
[01:52:11] <TimMc> Dependency management in Python is *highly* slapped-on-after-the-fact, not built into the language. :-/
[01:52:12] <karthik> It's a dependency manager for python favored by the numerical computing (numpy/scipy) community
[01:52:29] <TimMc> Clojure got to piggyback on Maven.
[01:53:17] *** Joins: matty_ma2 (~matt@129.222.239.110)
[01:54:20] <karthik> I find Python code very hard to understand, mostly the class abstractions. Having a much better time with Clojure.
[01:56:39] <TimMc> Yeah, Python still feels pretty awkward to me. Lots of weird gaping holes where there should be a convenient piece of functionality and it's just... inexplicably not there?
[01:56:51] <TimMc> (especially given how batteries-included it is overall)
[01:58:09] <karthik> You're probably looking at the code structure at a high level. I have trouble understanding more basic stuff, like what decorators do in context
[01:58:42] <TimMc> Oh, I mostly complain about things like "how do you add two dictionaries together non-destructively".
[01:59:02] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[01:59:32] <karthik> I do wish I could just (require 'http) in clojure without worrying about lein, setting up a project.clj etc
[01:59:33] <TimMc> oh, you're talking about reading it, not writing it
[02:00:35] <karthik> Yeah, since I don't write python code (for anything more complex than system admin/automation)
[02:02:36] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[02:04:53] *** Joins: schmudde (~schmudde@216.169.6.249)
[02:05:57] <ridcully> the jdk comes at least with one http client/server... but i am not even sure, that there is a sane way to generate json in the jdk?
[02:06:31] <ridcully> clojure core basically wraps nothing of the jdk.  it expects you pick and add a library for pretty much anything
[02:08:21] <ridcully> and it's even hard to blame the authors for that approach.  just look at the journey that Date, Calendar, Joda, and now finally java.time was.
[02:09:05] <karthik> That example went over my head, since I'm unfamiliar with the Java ecosystem
[02:09:25] <karthik> But I get the general idea. No Batteries Included is probably a good thing for larger projects
[02:09:57] <karthik> But it's harder to get a foot in the door when starting to learn the language, or when using it to solve small/toy problems
[02:11:47] <TimMc> It can also be dangerous. If you don't include good URL and HTTP handling in the stdlib, people pull in half-assed libraries or try to write it themselves.
[02:12:02] <TimMc> ...I guess Java tried, on the URL front, and still failed
[02:13:00] *** Joins: matty_ma2 (~matt@129.222.239.110)
[02:13:18] <ridcully> there are quite some wrong shaped, half depleted batteries in the jdk ;P
[02:14:24] <TimMc> bulging suspiciously, or leaking corrosive fluids
[02:14:54] <TimMc> I'm quite happy that java.time is a thing now.
[02:15:14] <TimMc> I'm not totally happy with their handling of leap seconds, but I guess close enough.
[02:16:31] <karthik> My problems are the latter (small/toy programs) so this colors my perspective. Clojure feels like an industrial strength solution, with python I just open a blank file and start typing in 'import foo's
[02:23:07] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[02:24:30] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 268 seconds)
[02:37:10] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:38:53] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 252 seconds)
[02:52:04] *** Joins: matty_ma2 (~matt@129.222.239.110)
[02:53:43] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[02:59:39] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[03:00:07] *** Joins: matty_ma2 (~matt@129.222.239.110)
[03:04:27] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:05:12] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[03:10:09] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:12:22] *** Joins: matty_ma2 (~matt@129.222.239.110)
[03:13:18] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:17:51] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[03:20:17] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[03:21:36] *** Joins: matty_ma2 (~matt@129.222.239.110)
[03:29:31] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:33:23] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:41:32] *** Joins: matty_ma2 (~matt@129.222.239.110)
[03:50:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:54:52] <sobel> karthik: i treat clojure like you treat python
[03:55:09] *** Joins: awb99 (~quassel@201.226.137.26)
[04:02:29] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 252 seconds)
[04:03:24] *** Joins: matty_ma2 (~matt@129.222.239.110)
[04:04:11] *** Joins: schmudde (~schmudde@216.169.6.249)
[04:07:22] <karthik> sobel: That sounds great. How do I do that?
[04:09:16] *** Quits: awb99 (~quassel@201.226.137.26) (Remote host closed the connection)
[04:10:23] <sobel> karthik: i keep a project that has many of the common libraries i use, so i always have a venue for playing around with stuff at the repl. by the time i know what i want, i can clone it and strip out parts i don't want to carry forward to a more "serious" codebase
[04:11:08] <karthik> So you're creating a Batteries Included environment
[04:11:10] <sobel> karthik: if it were python, i would still be creating a new folder, source tree, README, etc. i'd have to install libraries to import them.
[04:11:10] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[04:11:32] <karthik> That's cool. 
[04:11:32] <sobel> karthik: absolutely; i create a batteries-included environment that i can use to play around.
[04:12:08] <karthik> Do you have a link to this repo? I'm wondering what I'd need to get to default-python parity
[04:12:18] *** Joins: matty_ma2 (~matt@129.222.239.110)
[04:12:32] <sobel> i definitely encourage anyone to isolate a minimal batteries-included project template any time a success is achieved with an app
[04:14:08] <selfsymmetric-mu> sobel: That's good advice.
[04:14:19] <sobel> karthik: if i were starting a stub project today it would include integrant and http-kit
[04:15:03] <sobel> selfsymmetric-mu: i learned that from doing it, as well as regretting not doing it. :)
[04:15:19] <selfsymmetric-mu> sobel: Punishment and reward, the two great teachers.
[04:15:36] <selfsymmetric-mu> A company I'm applying to gave me a website to make as a coding exercise.
[04:16:09] <selfsymmetric-mu> I have not done any actual web development in a while, but I guess they want to see if I can do it, so I banged it out in Luminus and re-frame. Good experience!
[04:17:06] <sobel> nice! i am lining a shot at some re-frame soon.
[04:17:08] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:17:33] <selfsymmetric-mu> I started with Python and Django, since I know that's what they use, but it felt ugly quickly. So much boilerplate, couldn't find good documentation.
[04:18:00] <selfsymmetric-mu> I figured if I'm going to do something so intensive for free I might as well have fun.
[04:18:31] <selfsymmetric-mu> Actually working on Django at a company will be fine, I'm sure, I just don't want to learn something so heavy just for a coding exercise.
[04:19:57] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[04:20:15] <sobel> i've never really gotten that close to django. i thought flask might make my radar but that was before clojure and building good, quality servers and UIs from my own factors got priority
[04:20:33] <selfsymmetric-mu> I've made a home-bar website in Flask.
[04:20:53] <selfsymmetric-mu> I would give people the URL, it would say which cocktail recipes were available. It had progress bars and everything.
[04:21:10] <selfsymmetric-mu> "Bring amaretto and it'll unlock three drinks". Was a big hit.
[04:21:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[04:21:48] <sobel> oh, that's the Right Way to sort that data :)
[04:22:23] *** Joins: matty_ma2 (~matt@129.222.239.110)
[04:28:53] <karthik> sobel: "integrant and http-kit" <-- That was going to be my next question, what libraries do you recommend.
[04:28:57] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[04:29:25] *** Joins: matty_ma2 (~matt@129.222.239.110)
[04:30:23] <sobel> karthik: i did not decide on an authN/authZ handler library. that ended up being part of how i went with vert.x for all things web (it's an awesome toolkit)
[04:30:58] *** Joins: libertyprime (~libertypr@219-89-122-40.adsl.xtra.co.nz)
[04:34:37] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[04:36:13] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:45:10] *** Joins: matty_ma2 (~matt@129.222.239.110)
[04:46:29] *** Quits: libertyprime (~libertypr@219-89-122-40.adsl.xtra.co.nz) (Ping timeout: 256 seconds)
[04:46:39] <karthik> What's vert.x?
[04:49:32] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[04:50:51] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:55:33] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[05:02:28] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[05:14:56] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:43:17] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:cce1:27eb:b1e6:5092) (Ping timeout: 240 seconds)
[05:43:20] *** Joins: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net)
[05:45:55] *** Quits: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net) (Quit: Leaving)
[05:46:18] *** Joins: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net)
[05:47:28] *** Joins: eddof13 (~textual@2600:4040:4029:5000:3ca8:538a:9008:8d39)
[05:52:37] *** Joins: mbuf (~Shakthi@122.178.240.169)
[05:53:31] *** Quits: eddof13 (~textual@2600:4040:4029:5000:3ca8:538a:9008:8d39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:54:46] *** Joins: atw (~user@2601:5c2:c500:76b0::af04)
[06:05:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[06:21:49] *** Joins: matty_ma1 (~matt@129.222.239.110)
[06:26:13] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[06:35:21] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 245 seconds)
[06:41:57] *** Joins: schmudde (~schmudde@216.169.6.249)
[06:42:30] *** Quits: mcint (mcint@user/mcint) (Ping timeout: 265 seconds)
[06:47:03] *** Joins: mcint (mcint@user/mcint)
[07:43:21] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:212e:fc99:e71:f094)
[08:03:09] *** Joins: shiranaihito (~textual@2001-b011-4000-1fe6-450b-6646-7f6d-db32.dynamic-ip6.hinet.net)
[08:03:10] *** Joins: matty_ma1 (~matt@129.222.239.110)
[08:10:12] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[08:17:32] *** Joins: matty_ma1 (~matt@129.222.239.110)
[08:32:42] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 260 seconds)
[08:39:57] *** Quits: atw (~user@2601:5c2:c500:76b0::af04) (Ping timeout: 240 seconds)
[09:16:24] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[09:20:36] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Ping timeout: 240 seconds)
[09:48:43] <sobel> karthik: it's the Node.js model for java. reactive everything is really cool.
[09:54:39] <sobel> i like it for being minimalist. my whole web server is 15M of jars and i can run it in 64M RAM pretty happily. i'll have to give it more only when concurrent web requests (read: more users) justify it.
[09:55:32] <sobel> and now that i know how to use compose futures it's really nice to have a whole ecosystem of reactive libraries
[10:14:36] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[10:33:17] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 256 seconds)
[11:05:05] *** Joins: hexology (~hexology@user/hexology)
[11:40:46] *** Joins: joe_colben (~joe____co@185.190.112.211)
[11:54:53] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[11:55:24] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[11:56:06] *** Joins: joe_colben (~joe____co@185.190.112.211)
[12:23:20] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[12:23:53] <tatsumaru> hey guys, when writing several lines of code in the lein repl, is there a way to go back to a previous line to correct a typo, once you've pressed enter and moved to the next line?
[12:25:14] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[12:27:54] <ridcully> tatsumaru: depends on the actual repl.  e.g. rebel-readline can do that - most likely the generic answer is: no
[12:30:00] <ridcully> most users will use their editor to talk to the repl though
[12:45:27] <tatsumaru> ridcully: yeah i just prefer the repl to emacs for trying out simple exercises, still not very comfortable with all those keyboard shortcuts
[12:51:30] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[12:52:27] <tatsumaru> I noticed from these examples: https://paste.rs/OQT that when you are writing a function which destructures either vectors or lists you surround parameters with square brackets (i.e. square brackets will cover both vector and list inputs when later calling the function) however if you want to destructure a map you need to provide the map format in the parameters (which is understandable). My question is why doesn't the list require its 
[12:52:28] <tatsumaru> own format as well like this [(a b c)] but is covered by this as well [[a b c]]?
[13:04:57] <tatsumaru> also why isn't this allowed as a more concise form of the second example; https://paste.rs/ikv
[13:10:13] <jeaye> tatsumaru: Clojure is consistent in that (a b c) means calling a with b and c (or applying a to b and c, if you think that way). For any constructs of grouping things syntactically, Clojure uses []. For example, (let [a b] ...), (if-some [a b] ...), (defn [a b] ...), and so on.
[13:10:57] <jeaye> The thing after the ( is always going to be something you're invoking.
[13:11:44] <jeaye> In practice, we don't use list literals much at all, so you'll almost never see '(1 2 3) and you should never write it without very good reason.
[13:12:03] <tatsumaru> jeaye in that case what about ['(a b c)]
[13:12:55] <jeaye> With that said, to answer your question more directly, (let [[a b] ...]) is not for destructuring vectors. It's for destructuring any sequence. It's only in [] because, as I laid out above, that's what clojure uses for additional syntax when grouping things.
[13:12:59] <wink> it's pretty consistent, but careful with (conj [1 2] 3) vs (conj '(1 2) 3)
[13:14:18] <jeaye> tatsumaru: What would that offer?
[13:14:47] <jeaye> It's a pain to type, for no benefit.
[13:14:59] <tatsumaru> jeaye: just for readability sake I guess
[13:15:22] <jeaye> List literals are not a readability improvement over vector literals.
[13:15:33] <jeaye> We don't use them. Remember that. :)
[13:15:55] <tatsumaru> okay, thanks
[13:16:47] <wink> jeaye: mhm, filter seems to return that though, but I've not fully grasped when there will actually be lists and not vecs
[13:17:15] <wink> years ago I used to (vec ) everything for safety, btu it usually works, except when usign conj on the resulkt
[13:17:51] <jeaye> wink: map, filter, and others return lists because they're lazy. Even when you give them a vector, you'll get a lazy list back. This is not the same as using list literals, though.
[13:18:08] <jeaye> Clojure uses lazy sequences all over the place, behind the scenes.
[13:18:09] <wink> jeaye: "we don't use them" is ambiguous.
[13:18:28] <jeaye> No, it's not, since it immediately followed "List literals".
[13:18:50] <wink> point taken
[13:19:01] <jeaye> tatsumaru: (let [[a b] (range) [c d] (into [] (range 10))] ...)
[13:19:49] <jeaye> a and b are taken from an infinite lazy sequence. c an d are taken from a vector. But that doesn't matter. All that matters is the position of each of them in the sequence so I can pull them out.
[13:20:13] <jeaye> So we don't distinguish the type. Clojure programming focuses a lot more on data shapes than it does types.
[13:20:27] <jeaye> (and that's a very good things, once you get the hang of it)
[13:20:38] <wink> and if you notice the pitfalls :P
[13:20:47] <wink> it's mostly good, yeaj
[13:21:33] <tatsumaru> i see, thanks
[13:23:45] <tatsumaru> jeaye: and can you explain why this isn't acceptable please? https://paste.rs/ikv
[13:24:23] <jeaye> Your destructuring isn't quite right.
[13:24:32] <jeaye> The simplest way, I think, to do it is using :keys
[13:24:52] <jeaye> (defn treasurer [{:keys [lat lng]} ...)
[13:25:16] <jeaye> (defn treasurer [{:keys [:lat :lng]} ...) ; also works. Same as above
[13:25:32] <tatsumaru> jeaye: this was the original example I tried to make it more concise: https://paste.rs/RsP
[13:25:50] <jeaye> There's another syntax which is useful for renaming keys, which is what that example is using.
[13:26:16] <wink> tatsumaru: might you be mixing up keyword accessors and keyword atoms? e.g. (keyword "lat") = :lat and (:lat  {:lat 3)) = 3
[13:26:28] <jeaye> It allows you to do things like: (defn foo [{money :mny}]...) and then call it with (foo {:mny 500}) and use it as money in the defn
[13:27:01] <jeaye> tatsumaru: That example is using this renaming destructuring, but it's giving them the same names, which is pointless.
[13:27:32] <jeaye> Most of the time, you don't need renaming. So just use :keys like I showed above. That's how nearly 100% of my map destructuring looks.
[13:27:40] <tatsumaru> it's a bit confusing because in the parameter definition of the map the name comes before the keyword, but in an actual map that's passed to that function the keyword comes before the value, so it's like the map is mirrored.
[13:27:55] <wink> renaming destructuring is really confusing imho
[13:28:00] <jeaye> Agreed. Don't use that syntax, tatsumaru. :)
[13:28:14] <jeaye> (defn treasurer [{:keys [lat lng]} ...) ; this is much simpler
[13:29:07] <tatsumaru> i see, thanks
[13:29:56] <jeaye> (defn treasurer [{:keys [lat lng]}] ...) ; was missing a closing ]
[13:30:23] <jeaye> It's 2am for me.
[13:30:25] * jeaye goes to bed.
[13:35:44] *** Quits: wink (fhtagn@user/wink) (Quit: Off to see the wizard.)
[13:36:12] *** Joins: wink (fhtagn@user/wink)
[13:37:40] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:45:45] *** Joins: matty_ma1 (~matt@129.222.239.110)
[13:51:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[13:59:51] <tatsumaru> In this example the keyword :as is used to retain access to an original map: https://paste.rs/Xi5  What is the meaning of original map in that context?
[14:01:34] *** Joins: seschwar (~seschwar@user/seschwar)
[14:04:19] <wink> tatsumaru: whn you destructure with keys you don't have the original input to the fn as a var inside anymore, because you don't give it a name.
[14:04:36] <wink> tatsumaru: this just means you can access the var called treasure-location inside the function
[14:08:27] <wink> it's if you need both. you could also do a (defn r3 [treasure-location] (let [{:keys [lat lng]} treasure-location] ...
[14:09:17] <wink> can't advise you re: the style but I think the destructuring works for smallish functions but not if you're mutating a map, then you probably want the original as well
[14:09:30] <wink> then again maybe I'm doing it wrong by disassembling and reassembling maps ;)
[14:15:49] <tatsumaru> so IIUC :as allows you to load the full map into the scope of the fn as well
[14:16:38] <tatsumaru> in case you want to operate on parts of the map and the full map as well?
[14:38:59] <ridcully> correct.  real world example: you have a map, that is a configuration.  you pass the config-map to your function, that takes out some options and calls other functions also taking the configuration
[14:39:19] <ridcully> so you want to destructure the things you are interested locally and have to pass the whole thing down to something else
[14:39:35] <ridcully> note that :as also works with positional destructuring
[14:40:10] <ridcully> e.g. (let [[fst & rst :as xs] [1 2 3]] [fst rst xs])
[14:41:26] <tatsumaru> what will xs eval to in this case?
[15:26:20] <ridcully> tatsumaru: can you extrapolate it from what you know about map destructuring?
[15:37:03] *** Joins: joe_colben (~joe____co@185.190.112.211)
[15:49:07] *** Joins: matty_ma1 (~matt@129.222.239.110)
[15:53:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[16:16:06] <tatsumaru> ridcully: at first glance it seems that 1 => fst, 2 3 => rst so I am guessing [1 2 3] goes to xs ?
[16:17:26] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[16:17:43] *** Joins: matty_ma1 (~matt@129.222.239.110)
[16:18:49] *** Joins: joe_colben (~joe____co@185.190.112.211)
[16:35:40] <ridcully> correct
[16:42:54] <tatsumaru> ridcully: is it more correct to say that xs is 1 2 3 or [1 2 3], are the square brackets passed as well?
[16:56:50] <Solid> tatsumaru: xs can't be several things at once
[16:57:02] <ridcully> it is exactly [1 2 3]
[16:57:36] <ridcully> so to be accurate, rst will be '(2 3)
[17:02:20] *** Joins: joe__colben (~joe____co@185.190.112.211)
[17:04:13] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[17:06:33] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[17:19:01] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[17:22:00] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[17:24:22] <tatsumaru> ridcully: why is rst '(2 3) and not [2 3]?
[17:31:00] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[17:37:43] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[17:42:21] *** Joins: snystrom (~snystrom@cpe-98-26-26-26.nc.res.rr.com)
[17:44:38] *** Joins: matty_ma1 (~matt@129.222.239.110)
[17:46:47] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:18] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[17:55:31] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[18:00:36] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Ping timeout: 240 seconds)
[18:03:14] <Para> tatsumaru: Just curious, what do you mean by "are square brackets passed as well"?
[18:05:39] <tatsumaru> Para: It wasn't a very good question tbh. I was wondering if you are passing individually 1 2 3 to xs like you would when you are creating a vector or list (e.g. (list 1 2 3) or if you are passing the whole collection [1 2 3] as one item.
[18:05:58] <Para> Ah, yeah no, the whole collection :)
[18:06:48] <tatsumaru> it's a bit confusing that a collection is one item, but also you can access individual items within that collection. it's kind of meta.
[18:07:55] <tatsumaru> btw is there metaprogramming in clojure?
[18:08:10] <Para> It's also not lazy, in case you're wondering that. Here's an example which will eat all your memory, never completing evaluation: `(let [[& xs] (range)] xs)`
[18:08:21] <Para> So don't run that unless you want to lock your REPL :)
[18:08:47] <tatsumaru> what does (range) stand for
[18:09:05] <Para> It's a function which generates an infinite lazy sequence, by default it's one 0,1,2,3...
[18:09:18] <Para> -one, what am I typing again
[18:09:45] <Para> https://clojuredocs.org/clojure.core/range
[18:10:12] <tatsumaru> ah I see so because it's not lazy it would actually try to create an infinite list in real time?
[18:10:22] <Para> yep
[18:10:33] <tatsumaru> or is it an infinite vector
[18:10:36] <Para> Nope, seq
[18:11:04] <Para> Well, the value created by range is a seq; destructuring transfers the values into a vector.
[18:11:24] <Para> Which of course isn't very useful here, beyond benchmarking allocation speed... :)
[18:13:44] *** Quits: joe__colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[18:19:23] <ToxicFrog> tatsumaru: re metaprogramming -- that is a very broad term, so you may need to narrow down specifically what metaprogramming features you want.
[18:19:25] <ToxicFrog> (It has full macro support, but its ability to inspect and modify itself at runtime is somewhat more limited)
[18:20:07] <Para> Also, the two cardinal rules of creating macros: 1) Don't 2) if you can implement what you want as a function, use a function.
[18:20:39] <tatsumaru> Para: are there ideas that can only be implemented as macros?
[18:21:15] <Para> Probably not, depending how painful you like things to be.
[18:21:37] <tatsumaru> So judging by that logic: never use macros
[18:21:37] <Para> So the answer really is, it depends :)
[18:22:02] <ToxicFrog> I mean, there is definitely some stuff that is very simple when implemented as a macro and incredibly ugly (and, often, slow) without one
[18:22:06] <Para> Yeah, most codebases don't need custom macros for pretty much anything. There are good reasons for making your own, but it's better to exhaust all other options before that.
[18:22:10] <ToxicFrog> But don't, like, use macros everywhere just because they're cool
[18:22:52] <tatsumaru> So it's like an intuitive feeling where you are like "ok I shouldn't be trying so hard not to use a macro at this point"
[18:23:20] <Para> My only macro which survived to production was one which delayed execution of inner form so that permission check could be performed just before the actual form is evaluated. This was before I learned about core.async, so these days I'd solved that without macros... :)
[18:23:26] <ToxicFrog> (I did some stats on this last time it came up and I have a roughly 25:1 ratio of defn to defmacro in my code)
[18:24:07] <tatsumaru> do you ever just macros just for prototyping and gradually removing them for the final release?
[18:24:11] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 256 seconds)
[18:24:27] <tatsumaru> or is that not a good strategy
[18:24:43] <Para> I'd say about two thirds of macros I start to write end up getting deleted quite soon after.
[18:24:55] <ToxicFrog> (and if I remove the ones in my "playing around with macros to learn about them" sandbox it's more like 50:1)
[18:25:05] <Para> Then again my programming style is quite a shred in general :)
[18:25:23] <Para> I do take significant time to refactors things to look pretty afterwards because of this.
[18:31:12] *** Joins: joe_colben (~joe____co@185.190.112.211)
[18:31:21] <sobel> heh, my programming style is the main reason i don't stream more of my sessions
[18:33:15] *** Quits: snystrom (~snystrom@cpe-98-26-26-26.nc.res.rr.com) (Ping timeout: 256 seconds)
[18:34:34] <Para> My typing style in general has confused people across decades :) I write sentences and by proxy code non-linearly.
[18:34:59] <Para> So if I come up with a refactoring I might start whichever part is closest to cursor, go to beginning of the function, change half the symbols, jump around etc. and then bring it together.
[18:35:49] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[18:40:34] <sobel> i would be outed for premature meta-optimization
[18:41:04] <tatsumaru> sobel: Elon Musk said - the most common mistake smart people do is to optimize things that need to be deleted
[18:41:16] <sobel> possibly analysis-paralysis and scope-creep, too
[18:41:34] <sobel> tatsumaru: point taken. i'll stop trying to optimize Elon Musk.
[18:42:13] <tatsumaru> lots of Elon Musk and Paul Graham hate in the lisp community lol
[18:43:06] <Para> From my subjective POV people are generally shifting currently into "Wait, Elon Musk actually _is_ an asshole...?!" mindset.
[18:43:29] <Para> But that's not really relevant here beyond that Musk's popularity is going down, and just like with all billionaires, popularity has no meaning :)
[18:44:46] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Quit: Lost terminal)
[18:44:52] <tatsumaru> Well, whether Elon Musk is an asshole or not is irrelevant imo, the quote is still good imo.
[18:45:06] <Para> True :)
[18:45:26] <Para> Everything's a shade of grey.
[18:45:44] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[18:47:04] *** Joins: xsperry (~xs@user/xsperry)
[18:50:00] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[18:52:02] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Quit: Lost terminal)
[18:52:29] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[19:03:49] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[19:08:35] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[19:09:40] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[19:14:54] *** Joins: joe_colben (~joe____co@185.190.112.211)
[19:18:57] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[19:22:59] *** Joins: matty_ma1 (~matt@129.222.239.110)
[19:33:40] *** Joins: schmudde (~schmudde@216.169.6.249)
[19:41:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[19:46:09] *** Quits: jonys (~jonys@user/jonys) ()
[19:54:41] *** Joins: atw (~user@2601:5c2:c500:76b0::f29f)
[20:06:01] *** Quits: mbuf (~Shakthi@122.178.240.169) (Quit: Leaving)
[20:27:54] *** Joins: joe_colben (~joe____co@185.190.112.211)
[20:39:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:53:24] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[20:59:08] *** Joins: matty_ma1 (~matt@129.222.239.110)
[21:16:20] <selfsymmetric-mu> Agreed, it's a maxim I worth pondering. I haven't heard the quote before but it may have been in the context of management bureaucracy. I remember hearing something that at his companies he believed in removing process vigorously, to the point where one should always be going too far and adding ten percent back.
[21:17:32] <selfsymmetric-mu> I wonder if I need to get better at simplifying code rather than throwing it behind an abstraction.
[21:18:34] <selfsymmetric-mu> Things I learned during this year's Advent of Code: 
[21:18:35] <selfsymmetric-mu> 1. I need to use `loop` sometimes because rich context in dynamic programming can destroy recursive style
[21:19:50] <selfsymmetric-mu> …wait I didn't write this down?? I've forgotten the second thing. How embarrassing.
[21:20:59] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[21:22:25] <selfsymmetric-mu> Oh there it is. The second thing I learned is to use clojure.zip
[21:23:05] <selfsymmetric-mu> I am working on the third thing, which is trickier. It's that I don't like how long it takes me to get unstuck.
[21:25:02] <selfsymmetric-mu> What to do? I think it's to backtrack, and make things cleaner and simpler? Is it enough to add keywords, type annotations? Should I add more tests, spec things? 
[21:25:10] <Solid> dp only destroys recursive style if your stack is too smol :>
[21:26:04] <selfsymmetric-mu> Solid: Even with `recur`sive style I got hit hard by day 16.
[21:26:32] <Solid> selfsymmetric-mu: oh was that parser combinator day?
[21:26:42] <selfsymmetric-mu> Solid: That's what I _thought_!
[21:26:57] <Solid> I just solved that one in Haskell because I couldn't find a nice parser combinator lib for Clojure
[21:27:19] <selfsymmetric-mu> But there are rules which depend not just on characters, but on the SEMANTICS of those characters, i.e. one packet telling you how long another packet is.
[21:27:38] *** Joins: matty_ma2 (~matt@129.222.239.110)
[21:27:55] <selfsymmetric-mu> So with instaparse I was forced to toss calls between the parser and the transformer blehhh
[21:28:06] <selfsymmetric-mu> Indeed I should have just set up a Haskell environment and done it there. Or in Rust.
[21:28:18] <Solid> That's still parser combinator day, no?
[21:29:05] <selfsymmetric-mu> Solid: I must be rusty at my parsers. Mind if I see your code?
[21:29:16] <Solid> sure
[21:29:21] <selfsymmetric-mu> Solid: Thanks!
[21:30:17] <Solid> selfsymmetric-mu: https://github.com/slotThe/AOC-2021/blob/master/haskell/src/Day16.hs
[21:32:02] *** Joins: joe_colben (~joe____co@185.190.112.211)
[21:33:05] <selfsymmetric-mu> Solid: Right! See, your parser `pNumber` is capable of interpreting the number as you parse. That's the ticket. I don't know how to do that in instaparse.
[21:34:48] <selfsymmetric-mu> Well, well I know how to using a transformer, but then I need to shuttle half-parsed data between the transformer and the parser and it makes my brain melt.
[21:35:09] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[21:37:41] <Solid> selfsymmetric-mu: ah, I was looking at instaparse first but if I remember correctly the grammar we were given was not context-free
[21:37:59] <Solid> so I also gave up on that right away 
[21:38:33] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[21:40:52] <selfsymmetric-mu> Ah! Well put. How do you, personally, recognize something as not context-free? My pumping lemma is rusty.
[21:45:41] *** Joins: snystrom (~snystrom@cpe-98-26-26-26.nc.res.rr.com)
[21:49:00] *** Joins: matty_ma2 (~matt@129.222.239.110)
[21:53:24] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[22:04:44] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[22:09:17] *** Quits: atw (~user@2601:5c2:c500:76b0::f29f) (Ping timeout: 240 seconds)
[22:11:01] *** Joins: matty_ma2 (~matt@129.222.239.110)
[22:15:24] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[22:22:06] *** Joins: atw (~user@2601:5c2:c500:76b0::5737)
[22:43:49] *** Joins: matty_ma2 (~matt@129.222.239.110)
[22:48:15] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:49:37] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[22:49:48] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[22:50:09] *** Joins: joe_colben (~joe____co@185.190.112.211)
[22:53:51] <Solid> I think it's mostly just intuition; actually, pretty much what you said earlier: "there are rules which depend not just on characters, but on the SEMANTICS of those characters"
[23:18:11] *** Joins: matty_ma2 (~matt@129.222.239.110)
[23:21:35] <selfsymmetric-mu> Solid: Yes, I like that! Even if maybe it is actually context free since the numbers are bounded (2^11 and 2^15) and they could be enumerated, it's not PRACTICAL with instaparse's interface.
[23:22:10] <selfsymmetric-mu> I wonder how people do real parsing in Clojure. Some Java library, maybe?
[23:22:49] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:23:25] *** Quits: atw (~user@2601:5c2:c500:76b0::5737) (Ping timeout: 240 seconds)
[23:30:28] *** Quits: snystrom (~snystrom@cpe-98-26-26-26.nc.res.rr.com) (Remote host closed the connection)
[23:30:41] *** Joins: 040AAEAZJ (~snystrom@cpe-98-26-26-26.nc.res.rr.com)
[23:38:02] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:38:22] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[23:39:25] *** Joins: sailorTheCat (~sailorCat@mail2.gajsin.name)
[23:39:31] *** Joins: dustinm- (~dustinm@static.38.6.217.95.clients.your-server.de)
[23:40:11] *** Server sets mode: +nt 
[23:40:24] *** Joins: matty_ma2 (~matt@129.222.239.110)
[23:40:37] *** Joins: shiranaihito_ (~textual@2001-b011-4000-1fe6-450b-6646-7f6d-db32.dynamic-ip6.hinet.net)
[23:42:09] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:42:17] *** Joins: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[23:42:58] *** Joins: pflanze_ (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[23:42:59] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:212e:fc99:e71:f094)
[23:43:05] *** Joins: matty_ma1 (~matt@129.222.239.110)
[23:43:07] *** Joins: bbz_ (sid62109@id-62109.ilkley.irccloud.com)
[23:43:09] *** Joins: super_pizza_cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net)
[23:43:43] *** Joins: hexology- (~hexology@user/hexology)
[23:43:53] *** Quits: 040AAEAZJ (~snystrom@cpe-98-26-26-26.nc.res.rr.com) (*.net *.split)
[23:43:53] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[23:43:53] *** Quits: lxsameer (~lxsameer@user/lxsameer) (*.net *.split)
[23:43:54] *** Quits: shiranaihito (~textual@2001-b011-4000-1fe6-450b-6646-7f6d-db32.dynamic-ip6.hinet.net) (*.net *.split)
[23:43:54] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[23:43:54] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[23:43:54] *** Quits: OMGOMG_ (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[23:43:54] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[23:43:54] *** Quits: sobel (~matt@66.219.34.76) (*.net *.split)
[23:43:54] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[23:43:54] *** Quits: gaustin (sid356092@id-356092.helmsley.irccloud.com) (*.net *.split)
[23:43:55] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[23:43:55] *** Quits: spec (~spec@user/spec) (*.net *.split)
[23:43:55] *** gaustin_ is now known as gaustin
[23:43:58] *** Joins: tatsumaru1 (~tatsumaru@82.147.131.155)
[23:44:17] *** Joins: wink_ (fhtagn@user/wink)
[23:44:53] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[23:44:56] *** Joins: amk (~amk@109.255.169.126)
[23:45:12] *** Joins: lagash_ (lagash@lagash.shelltalk.net)
[23:45:14] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[23:45:31] *** Joins: Ilyu_ (~quassel@gateway/vpn/pia/ilyu)
[23:45:32] *** Joins: massimo_zaniboni (~quassel@mail.asterisell.com)
[23:45:35] *** Quits: bbz (sid62109@id-62109.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: mrmanner (29a724a13e@user/mrmanner) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: harrow (~harrow@static.38.6.217.95.clients.your-server.de) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: opqdonut_ (opqdonut@pseudo.fixme.fi) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: aphyr (~kyle@aphyr.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Spec` (~spec@user/spec) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: paul_j` (~user@67.26.169.217.in-addr.arpa) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: atw (~user@2601:5c2:c500:76b0::36e1) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: res0nat0r0 (~Fletch@dia.whatbox.ca) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Ingvix (~Ingvix@user/ingvix) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: mzan (~quassel@mail.asterisell.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: justIrresolute (~justache@user/justache) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: RendySurvage (~rendysurv@64.72.216.39) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: faxmodem (~faxmodem@82-65-124-102.subs.proxad.net) (Quit: so long and thanks for all the fish)
[23:45:37] *** Quits: ajb (~ajb@cupid.whatbox.ca) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: wink (fhtagn@user/wink) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:212e:fc99:e71:f094) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: shem (~shem@saltus.discendum.com) (Ping timeout: 240 seconds)
[23:45:38] *** bbz_ is now known as bbz
[23:45:38] *** Joins: shem_ (~shem@saltus.discendum.com)
[23:45:38] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net) (Ping timeout: 240 seconds)
[23:45:50] *** Joins: matty_matt (~matt@129.222.239.110)
[23:45:50] *** Joins: atw` (~user@2601:5c2:c500:76b0::36e1)
[23:45:51] *** Joins: spec (~spec@user/spec)
[23:46:05] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[23:46:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[23:46:14] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[23:46:23] *** Joins: leah2 (~leah@vuxu.org)
[23:46:32] *** Joins: sobel (~matt@66.219.34.76)
[23:47:08] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[23:47:14] *** Quits: joe_colben (~joe____co@185.190.112.211) (*.net *.split)
[23:47:14] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (*.net *.split)
[23:47:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[23:47:15] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (*.net *.split)
[23:47:15] *** Quits: dharrigan (~dharrigan@user/dharrigan) (*.net *.split)
[23:47:15] *** Quits: duke__ (~duke@198.20.115.180) (*.net *.split)
[23:47:15] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[23:50:17] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:52:41] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:52:41] *** Quits: gonewest818[m] (~gonewest8@2001:470:69fc:105::f38b) (Ping timeout: 252 seconds)
[23:53:14] *** Quits: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152) (Ping timeout: 252 seconds)
[23:53:27] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:53:43] *** Joins: markmarkmark (~mark@user/markmarkmark)
[23:53:59] *** Joins: schmudde1 (~schmudde@216.169.6.249)
[23:54:07] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[23:54:20] *** Quits: nivekuil (~nivekuilc@2001:470:69fc:105::d57e) (Ping timeout: 252 seconds)
[23:54:27] *** Server sets mode: +nt 
[23:55:01] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[23:56:03] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:56:17] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[23:57:04] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[23:57:12] *** Joins: snystrom1 (~snystrom@cpe-98-26-26-26.nc.res.rr.com)
[23:57:47] *** Joins: matty_ma2 (~matt@129.222.239.110)
[23:58:22] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[23:59:02] *** Joins: golanv (~golanv@2001:470:69fc:105::54c)
[23:59:47] *** Joins: harrow (~harrow@static.38.6.217.95.clients.your-server.de)
