[00:15:54] *** Joins: shimonaga (~shimonaga@199.58.81.203)
[00:15:54] *** Quits: shimonag1 (~shimonaga@199.58.81.203) (Read error: Connection reset by peer)
[00:19:18] *** Joins: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[00:20:18] <marler8997> andrewrk do you think you'd have time to review this benchmark in the next couple days (https://github.com/ziglang/gotta-go-fast/pull/21)? want to know if I should keep this issue in my head or if I should move on to other things for now
[00:21:02] <andrewrk> hi marler8997!
[00:21:19] <marler8997> hi to you too lol!
[00:21:29] <andrewrk> yes I'll prioritize this week - I need to do some other maintenance on ggf regardless
[00:22:10] <andrewrk> always appreciate benchmarks submitted to this repo - it's a great way to ensure that your use cases for zig remain fast and get faster
[00:22:43] <marler8997> very cool, you might find the issue interesting, I'm very surprised how much comptime performance can affect build times. This one function made my build go from 12 seconds to 6 minutes!
[00:23:24] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[00:26:10] *** Joins: shimonag1 (~shimonaga@199.58.81.203)
[00:26:10] *** Quits: shimonaga (~shimonaga@199.58.81.203) (Write error: Connection reset by peer)
[00:26:43] <ifreund> You're essentially benchmarking stage1's comptime evaluation here, which is known to be quite slow and use excessive memory
[00:27:24] <ifreund> I suspect that stage2 will cut those build times significantly, but I'd still expect your simpler implementation to be faster
[00:28:50] <ifreund> it's just less work for the compiler to evaluate every guid.parse() call that way
[00:31:02] *** Quits: shimonag1 (~shimonaga@199.58.81.203) (Read error: Connection reset by peer)
[00:31:09] *** Joins: shimonaga (~shimonaga@199.58.81.203)
[00:33:24] *** Quits: shimonaga (~shimonaga@199.58.81.203) (Read error: Connection reset by peer)
[00:34:12] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[00:34:34] *** Joins: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b)
[00:36:09] *** Joins: shimonaga (~shimonaga@199.58.81.203)
[00:36:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[00:37:36] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[00:41:54] <marler8997> good point, I can test stage2 as well if I knew how to call stage 2
[01:08:02] *** Quits: vladfaust (~vladfaust@93-80-188-4.broadband.corbina.ru) (Quit: Client closed)
[01:11:59] *** Quits: mikolajw (~mikolajtc@2001:470:69fc:105::3b02) (Quit: Reconnecting)
[01:12:01] <marler8997> I'm kinda weirded out.  To think if I hadn't implemented my own GUID parser, zigwin32 would have taken 6 minutes to build all this time and I would've had no idea why.
[01:12:13] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[01:12:41] *** Quits: pkap (~pkap@185.213.155.252) (Ping timeout: 256 seconds)
[01:13:59] *** Quits: mikolajw (~mikolajtc@2001:470:69fc:105::3b02) (Changing host)
[01:13:59] *** Joins: mikolajw (~mikolajtc@user/mwielgus)
[01:14:08] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:16:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:24:21] *** Quits: shankar (~shankar@172-105-56-145.ip.linodeusercontent.com) (Changing host)
[01:24:21] *** Joins: shankar (~shankar@user/shankar)
[01:24:52] <andrewrk> stage2 comptime is way faster than stage1 but it's still 20x slower than I would like it to be
[01:25:09] <andrewrk> gonna save that enhancement until we're actually shipping it tho
[01:27:44] <Franciman> andrewrk: will you add a JIT?
[01:27:51] <Franciman> *evil-face*
[01:28:01] <andrewrk> no
[01:29:46] *** Quits: shankar (~shankar@user/shankar) (Quit: leaving)
[01:36:59] *** Quits: mgxm (~mgxm@user/mgxm) (Quit: ....)
[01:37:35] <ifreund> marler8997: perhaps we'll need some kind of build time profiling for comptime code long term to address this kind of thing
[01:37:59] *** Joins: mgxm (~mgxm@user/mgxm)
[01:38:11] <ifreund> I feel like it wouldn't be terribly complex to implement
[01:39:00] <marler8997> yeah I had similar thoughts about a comptime profiler being useful
[01:39:47] <marler8997> you can't really use normal profilers because the comptime interpreter is calling all the same functions for analyzing different source code functions
[01:43:40] <andrewrk> hmm yeah maybe even the same mechanism we use to count cycles for branch quotas, we could collect into some kind of report
[01:44:22] <marler8997> ah true, we're already tracking 1 metric
[01:47:34] *** Joins: shankar (~shankar@user/shankar)
[01:54:54] *** Quits: mgxm (~mgxm@user/mgxm) (Quit: ....)
[01:55:12] *** Joins: mgxm (~mgxm@user/mgxm)
[02:01:49] *** Quits: marwan (~marwan@90.247.112.9) (Quit: Ping timeout (120 seconds))
[02:02:16] *** Joins: marwan (~marwan@90.247.112.9)
[02:02:16] <kiedtl> Does zig have something like C++'s string stream object, where I can continuously append formatted strings to a central buffer?
[02:02:57] <kiedtl> I could use ArrayList + appendSlice, but then I'd have to do the formatting myself
[02:03:30] *** Quits: shankar (~shankar@user/shankar) (Quit: leaving)
[02:04:01] *** Joins: shankar (~shankar@user/shankar)
[02:06:44] <kiedtl> Oh, looks like I can use the std.io.Writer interface, nevermind
[02:07:38] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:08:09] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:13:10] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[02:14:50] *** Quits: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b) (Quit: Leaving)
[02:16:17] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[02:18:43] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:50d4:825d:1fa2:4a98) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:29:37] <andrewrk> kiedtl, check out std.io.bufferedWriter
[02:30:00] <andrewrk> oh nvm it sounds like ArrayList.writer() is exactly what you want
[02:30:21] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:30:32] <kiedtl> Yeah, I have no idea what's the size beforehand
[02:39:14] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 268 seconds)
[02:39:45] <nektro> kiedtl: std.ArrayList(u8) has a .writer() method that become available specifically when T == u8
[02:39:56] <nektro> then you can use .writeAll and .print like normal
[02:40:17] <kiedtl> Yes, just what I mentioned. Thanks anyway :p
[02:40:47] <nektro> ah sorry just missed it, np
[03:07:14] *** Quits: frmdstryr (~jrm@172.58.206.226) (Ping timeout: 250 seconds)
[03:19:10] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Remote host closed the connection)
[03:24:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[03:27:16] *** nemith_irc is now known as nemith
[04:03:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:06:31] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:15:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:24:41] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 268 seconds)
[04:25:35] *** Joins: amk (~amk@109.255.169.126)
[04:29:30] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:c082:65ff:58b7:9270)
[04:50:12] *** Joins: rgrinberg (~textual@187.223.115.174)
[04:54:32] *** Quits: rgrinberg (~textual@187.223.115.174) (Ping timeout: 240 seconds)
[04:58:22] *** Joins: notzmv (~zmv@user/notzmv)
[05:02:17] *** Quits: thatcher (~thatcher@91.110.109.236) (Ping timeout: 240 seconds)
[05:03:17] *** Joins: thatcher (~thatcher@91.110.109.236)
[05:13:54] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[05:28:00] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:28:39] *** Joins: frmdstryr (~jrm@172.58.206.247)
[05:29:41] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[05:51:41] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:12:36] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 268 seconds)
[06:19:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:32:18] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:37:05] *** Quits: Nulo (~Nulo@user/nulo) (Ping timeout: 268 seconds)
[07:38:04] *** Quits: moog (~moog@107.126.53.225) (Remote host closed the connection)
[07:52:07] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrynjk2pys1hm18.ipv6.telus.net)
[07:57:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:04:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:c082:65ff:58b7:9270) (Ping timeout: 240 seconds)
[08:27:40] *** Quits: Arnavion (arnavion@user/arnavion) (Quit: Arnavion)
[08:33:17] *** Joins: Nulo (~Nulo@user/nulo)
[08:36:12] *** Quits: Nulo (~Nulo@user/nulo) (Read error: Connection reset by peer)
[08:36:29] *** Joins: Nulo (~Nulo@user/nulo)
[08:40:36] *** Joins: Arnavion (arnavion@user/arnavion)
[08:56:51] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[09:19:06] *** Quits: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net) (Read error: Connection reset by peer)
[09:21:39] <shankar>  /win show 1
[09:32:02] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 250 seconds)
[09:33:38] *** Joins: poqomchi (~poqomchi@user/poqomchi)
[09:49:51] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[10:29:28] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:07:26] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:09:17] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:27:15] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrynjk2pys1hm18.ipv6.telus.net) ()
[11:43:57] *** Quits: frmdstryr (~jrm@172.58.206.247) (Ping timeout: 240 seconds)
[11:46:57] *** Joins: Major_Biscuit (~MajorBisc@c-001-017-008.client.tudelft.eduvpn.nl)
[11:50:16] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 250 seconds)
[11:56:25] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[12:11:24] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:50d4:825d:1fa2:4a98)
[12:31:52] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[12:33:10] <jemius> sooooo. If I get the Zig philosophy right, such things won't happen, right?
[12:33:11] <jemius> https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/yang
[12:35:21] <ikskuh> jemius: if you don't want dead store elimination, you have to explicitly request that
[12:35:30] <ikskuh> we have a secureZero function for that
[12:36:13] <ikskuh> zig has no guarantees that writes actually ever happen
[12:36:17] <ikskuh> except for volatile memory
[12:36:28] <ikskuh> (or atomic)
[12:42:00] <jemius> But will it ever happen that Zig removes a function caller because performance-compiler-people whant to do performance-compiler-people-ish things?
[12:42:05] <jemius> *function call
[12:42:13] <ikskuh> yes+
[12:42:19] <ikskuh> that's called inlining
[12:42:41] <jemius> But the functionality will not disappear, as it does in gcc's memset() ?
[12:42:52] <ikskuh> it might
[12:42:56] <jemius> That's uncool
[12:43:00] <ikskuh> why?
[12:43:09] <ikskuh> zig is defined as a SSA style language
[12:43:12] <jemius> I already have C for such behavior
[12:43:20] <ikskuh> which has clear rules about side effects
[12:43:27] <ikskuh> and if a effect is not visible, it can be removed
[12:43:44] <ikskuh> if you want to have a defined effect, use the right tools for it
[12:43:51] <ikskuh> which, in this case, would be volatile
[12:43:57] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[12:44:07] <jemius> If a programmer explicitely commands a piece of memory being set to 0, this command should be followed. At least this is my philosophy
[12:44:13] <ikskuh> so to have the guarantee that a buffer is cleared to zero, you have to write to it as volatile memory
[12:44:30] <ikskuh> jemius: then you have a mental memory model that is distinct from the zig one
[12:44:40] <ikskuh> because in that model, every memory write has side effects
[12:45:38] <ikskuh> fn foo() void { var x: [4]u8 = ...; }
[12:45:46] <ikskuh> where is `x` stored? you can't answer this question
[12:46:08] <ikskuh> as `x` might never in RAM at any time
[12:46:43] <ikskuh> so writing 4 zeroes to it can mean that you write 4 registers or 4*u8 or 1*u32
[12:47:54] <ikskuh> on certain architectures, you can even pass this to another function as register windows instead of memory
[12:52:23] <freshcoffee> til about memset_s
[12:53:22] <riv> memset but in a sarcastic tone
[12:54:31] <jemius> ikskuh, so, for noobs: is zig's memory model identical to C's?
[12:54:51] <ikskuh> no, we don't have it fully defined yet
[12:55:34] <ikskuh> especially as we have comptime memory which is special
[12:56:02] <ikskuh> but i don't think it's a good idea to make it very much different to the C one
[12:56:35] <ikskuh> dead write elimination is a huge performance boost in general
[12:57:06] <ikskuh> and only bad in a field where people must be experts in both programming and cryptography, so i don't see a huge hazard here
[12:59:08] <nektro> given that the talk is from 2017, i wonder if llvm implements the compiler pass check
[12:59:38] <ikskuh> https://github.com/ziglang/zig/blob/master/lib/std/crypto/utils.zig#L127-L135
[12:59:55] <ikskuh> this is what we have for safely zeroing a memory block
[13:00:02] <ikskuh> which is (imho) the correct way of doing it
[13:01:19] <nektro> most of std.crypto was contributed by the author of libsodium
[13:10:22] <jemius> Is there a workaround in C around that problem besides memset_s?
[13:11:59] <freshcoffee> manual loop with pointer to volatile?
[13:12:18] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrynjk2pys1hm18.ipv6.telus.net)
[13:20:11] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:50d4:825d:1fa2:4a98) (Quit: Textual IRC Client: www.textualapp.com)
[13:21:42] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:14a1:74a:a18a:c765)
[13:25:28] <ikskuh> ↑
[13:26:12] <freshcoffee> oh neat. llvm has `!nontemporal` hint for stores
[13:31:17] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Ping timeout: 240 seconds)
[13:36:11] <jemius> At last fosdem the speaker said Zig is great because of "reduced mental load". 
[13:38:03] *** Joins: [R] (~rs@genoce.org)
[13:38:59] <devast8a> Arguably this choice of semantics does decrease mental load. If instead every memory access was always a memory access then you would be forced to consider the performance cost of every memory access.
[13:41:44] <ikskuh> yep
[13:42:01] <ikskuh> i mean, C had the keyword register for that 
[13:42:16] <ikskuh> until we introduced optimizations like store elimination
[13:42:41] <jemius> Do you folks believe that performance would be such a huge issue if compilers did not do that? (honest question)
[13:43:08] <ikskuh> yes
[13:43:19] <ikskuh> var a = 10; a = 20;
[13:43:25] <ikskuh> will suddenly have two memory writes instead of on
[13:43:26] <ikskuh> *one
[13:43:39] <ikskuh> a *= 2; // one read, one write
[13:43:44] <ikskuh> instead of a register access
[13:43:47] *** Quits: nektro (~meg@75-164-170-164.ptld.qwest.net) (Quit: WeeChat 3.1)
[13:43:51] <ikskuh> as `a` is variable in memory
[13:44:13] <ikskuh> most expressions will suddenly have double the instruction count
[13:44:17] <devast8a> Loads of optimizations become invalid under the semantics that every write is a write.
[13:46:03] <devast8a> It also implies, though to be fair isn't required, that there is a specified ordering to memory writes. Eg. `a = 10; b = 20` always happens the write to `a` happens then the write to `b` happens.
[13:47:18] <ikskuh> whereas without defined write order, you might be able to fuse those two writes into one
[13:47:21] <ikskuh> if a and b are adjacent
[13:47:46] <devast8a> Or it could be that performing b first, in a larger program, is much faster.
[13:48:58] <devast8a> You could define the semantics such that this only happens for pointers, and then the overheads will be much lower, but for some of the stuff that I've worked on these optimizations are responsible for performance doubling.
[13:50:19] <Earnestly> jemius: https://www.ralfj.de/blog/2021/11/24/ub-necessary.html - does say there should be experiments on performance cost because they don't really know
[13:51:51] <Earnestly> (Or maybe in linked article.  Somewhere anyway)
[13:52:01] <jemius> I don't know how easy I make my life by thinking so, but I tend to believe that people overshoot sometimes a bit with their optimizations, not looking at other valuable things. When I program a digital signal processor, yeah, performance! But some user space program taking one second longer to start up..?
[13:53:01] <Earnestly> openbsd and perhaps others do at least remove null check elimination
[13:53:46] <Earnestly> Even if you assert null, non-locality means it removes the check because you use value in call to strcmp, concluding argument can never be null
[13:54:28] <Earnestly> (it being gcc 11)
[13:54:35] <ifreund> If all my programs took a whole second longer to start I would be mad
[13:54:42] <ifreund> low latency makes me happy
[13:54:45] <ikskuh> what ifreund says
[13:54:55] <ikskuh> in the end, end users matter
[13:55:01] <ikskuh> and dev ux is less important than end user ux
[13:55:17] <ikskuh> if we can make programs faster, even on a low-percentile scale
[13:55:22] <ikskuh> you can gain huge things
[13:55:28] <devast8a> I just don't see the benefit in defining the semantics in this way. The few people who rely on these semantics are already in a world where very small and subtle things matter and really already ought to know that the compiler can make these changes.
[13:55:32] <ikskuh> void linux boots brilliantly fast compared to arch
[13:55:40] <ikskuh> and it makes me happy to not require suspend anymore
[13:57:33] <devast8a> Do we change other semantics of languages for increased security? Do we define that all comparisons are constant time for example?
[13:57:37] <Earnestly> ikskuh: Do you use scripts to restore previous working state?
[13:57:46] <ikskuh> nope
[13:57:47] <ikskuh> not worth 
[13:58:18] <ikskuh> i love having a clean state after booting
[13:58:21] <riv> I kind of feel like constant time stuff should just be coded in assembly
[13:58:25] <Earnestly> Hm, that's the reason I use suspend, even with fast boot, need to get everything up and running again
[13:59:00] <ikskuh> riv: we have constant time stuff in std.crypto.utils
[13:59:15] <ikskuh> Earnestly: the slowest tool to start is Thunderbird
[13:59:21] <ikskuh> and Discord
[13:59:26] <ikskuh> everthing else is already quite fast
[13:59:39] <devast8a> riv: The way things are going is to write secure code in theorem provers Coq, Agda, etc. and then extract C or Assembly programs from them.
[13:59:44] <Earnestly> devast8a: Curiously that sort of thing can be mechanical transformed from normal code, at least there is some effort to do that for Ada
[14:00:17] <riv> that sounds great - would definitely go for asm rather than c so the compiler doesn't mess up all your work
[14:00:18] <devast8a> As in to transform normal code into constant time code?
[14:00:31] <freshcoffee> re: Discord, somehow they must get money per second for twirling their logo/mascot at launch /s
[14:00:39] <ikskuh> yeah
[14:01:28] <Earnestly> devast8a: Yes, I think paper is "progress sensitive security for spark"
[14:03:41] <devast8a> Ah cool. Yeah this sort of stuff is used quite a bit in security type systems.
[14:06:03] <Earnestly> ikskuh: It's not so much time to start various things but that they return to prior state, carry on where left off
[14:06:32] <Earnestly> But can appreciate fresh start approach too
[14:06:57] <ikskuh> chrome restores all tabs/sessions, vscode last project, and all other tools i use are stateless (chat, music)
[14:10:48] <Earnestly> That works too
[14:23:27] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:29:30] *** Joins: vladfaust (~vladfaust@93-80-188-4.broadband.corbina.ru)
[14:30:01] <vladfaust> Is it possible to declare a C function in a Zig file without `@cImport`?
[14:31:39] <vladfaust> I guess no due to https://github.com/ziglang/zig/issues/1717
[14:32:01] <freshcoffee> here's one from lib/std/c.zig -> `pub extern "c" fn exit(code: c_int) noreturn;`
[14:32:50] <freshcoffee> or `pub extern "c" fn gethostname(name: [*]u8, len: usize) c_int;`
[14:33:59] <vladfaust> Ah awesome! Thank
[14:36:32] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Ping timeout: 240 seconds)
[14:39:18] <jemius> btw how are things progressing with Zig, generally speaking?
[14:39:28] <ikskuh> very well
[14:39:32] <ikskuh> stage2 makes huge progress
[14:50:05] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[15:00:05] *** Parts: riv (river@tilde.team/user/river) (WeeChat 3.4)
[15:10:06] *** Joins: koakuma (~koakuma@user/koakuma)
[15:27:19] *** Joins: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b)
[15:28:54] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrynjk2pys1hm18.ipv6.telus.net) ()
[15:39:46] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[15:39:53] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[15:42:37] *** Quits: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b) (Ping timeout: 240 seconds)
[15:45:53] <motiejus> should `lib/libc/include/arm-linux-any` be included for arm64? similarly, `arm-linux-any`?
[15:45:59] <motiejus> i.e. `arm-linux-musl`
[15:46:48] <motiejus> also, do `armeb-linux-gnueabi`, `armeb-linux-gnueabihf`, `arm-linux-gnueabi` and `arm-linux-gnueabihf` have to do anything with arm64?
[15:46:58] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[15:48:04] <motiejus> also, the `lib/libc/include` directory has both "arm64" and "aarch64", which are, to my understanding, two different conventions for the same CPU architecture
[16:03:42] *** Joins: frmdstryr (~jrm@172.58.203.172)
[16:10:08] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:54:14] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:55:47] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[17:28:50] <vladfaust> Is it possible to set `build-exe` output path? :)
[17:31:52] <ifreund> vladfaust: -femit-bin=foo
[18:00:34] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:15:35] *** Joins: arkurious (~arkurious@user/arkurious)
[18:20:09] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:20:12] *** Joins: moog (~moog@107.77.244.129)
[18:25:55] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Read error: Connection reset by peer)
[18:28:04] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 250 seconds)
[18:29:52] *** Joins: phaleth (~user@user/phaleth)
[18:50:58] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[18:52:33] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[19:03:16] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:10:45] *** Quits: segfault[m] (~repmovsb@2001:470:69fc:105::1:274e) (Quit: Client limit exceeded: 20000)
[19:12:12] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Quit: Leaving)
[19:20:49] <kiedtl> Doe zig's std have a mktemp function?
[19:20:49] *** Joins: segfault[m] (~repmovsb@2001:470:69fc:105::1:274e)
[19:20:51] <kiedtl> *Does
[19:21:05] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[19:23:27] *** Joins: Arw| (~Arwalk@aaubervilliers-652-1-19-90.w90-35.abo.wanadoo.fr)
[19:23:45] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Quit: tsmanner)
[19:23:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:24:24] *** Quits: Arw- (~Arwalk@lfbn-dij-1-1321-197.w92-141.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[19:25:32] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:27:38] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:29:59] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[19:32:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:36:36] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[19:36:36] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[19:36:36] *** Joins: tane (~tane@user/tane)
[19:36:46] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[19:40:50] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:45:02] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:47:23] *** Joins: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[19:50:09] *** Quits: vladfaust (~vladfaust@93-80-188-4.broadband.corbina.ru) (Ping timeout: 256 seconds)
[19:53:09] *** Joins: Arw- (~Arwalk@lfbn-dij-1-1310-217.w92-141.abo.wanadoo.fr)
[19:53:45] *** Quits: Arw| (~Arwalk@aaubervilliers-652-1-19-90.w90-35.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[20:05:32] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[20:10:42] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:11:30] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:17:50] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[20:35:58] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[20:46:17] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 240 seconds)
[20:46:39] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[21:02:24] <andrewrk> motiejus, no - arm and aarch64 are different, incompatible ISAs
[21:03:10] <andrewrk> kiedtl, no, mostly because of inability to make it into a cross platform abstraction
[21:03:46] <andrewrk> but have a look at std.fs.Dir.atomicFile
[21:03:55] <kiedtl> Ah, I guess because there's no standard "temp" directory for windows?
[21:04:19] <andrewrk> mm that's not exactly it. what is your use case? I can probably help guide you to the best set of API calls to accomplish your goal
[21:05:04] <kiedtl> Hm, Windows *does* have GetTempPath & friends
[21:05:44] <kiedtl> andrewrk: I just need to dump some debug-ish output to a file. Normally it'd be in ~/.cache, but I wanted to put it in /tmp/ for now
[21:06:01] <kiedtl> But for now I just put it in ./<random>.txt. Not a big deal really.
[21:08:21] <motiejus> andrewrk: how about arm64?
[21:08:28] <motiejus> I.e. arm64 vs aarch64?
[21:08:30] <andrewrk> arm64 and aarch64 are the same thing
[21:10:06] <andrewrk> kiedtl, so the main thing you want is a directory that is conventionally used for temp files, and perhaps cleaned at some later, unspecified time, so that the user has a chance to inspect the file first?
[21:10:27] <motiejus> andrewrk: should then lib/libc/include/arm64-linux-any/* be moved to lib/libc/include/aarch64-linux-any/ ?
[21:11:09] <andrewrk> motiejus, yes I think that would improve consistency. I'm guessing that linux, the upstream source for those files, uses the "arm64" convention
[21:11:21] <kiedtl> Not really -- the user could clean it but there's no expectation of them doing so. the /tmp/ thing was just a placeholder until I figured out where that directory should be, how I should determine its path, etc
[21:12:06] <andrewrk> motiejus, yeah I just confirmed - as an example, musl uses "aarch64" convention but linux uses "arm64" convention
[21:12:19] <andrewrk> for zig's purposes we should probably pick a side and then stick with it
[21:12:30] <andrewrk> related: https://github.com/ziglang/zig/issues/4663
[21:14:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:16:42] *** Joins: rgrinberg (~textual@187.223.115.174)
[21:18:53] <motiejus> andrewrk: is there a tool that creates these, or is `mv` good enough? Happy to invest some time instead of adding a workaround to the toolchain
[21:19:12] <motiejus> (I may also file a task for it, but, if relatively simple, can do a PR)
[21:19:16] <andrewrk> let me find my notes
[21:19:29] <andrewrk> a lot of the process is here: https://github.com/ziglang/zig/wiki/Updating-libc
[21:19:45] <andrewrk> ah yes I added a section for Linux recently 
[21:20:28] <andrewrk> did you run into an issue caused by the aarch64 vs arm64 thing?
[21:23:06] <motiejus> I was looking why my aarch64 builds were failing and noticed I may be missing some include directories (I need to tell bazel about these). Though adding the dirs didn't fix it
[21:23:48] <andrewrk> hmmmm
[21:24:06] <andrewrk> aarch64-linux?
[21:24:24] <motiejus> Yes
[21:25:16] <motiejus> I can paste the error if curious, but didn't isolate it (yet)
[21:31:33] *** Joins: xackus (~xackus@185.15.0.3)
[21:36:00] *** Quits: gwizon (~gwizon@ool-457f6b92.dyn.optonline.net) (Quit: Lost terminal)
[21:36:15] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[21:39:10] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[21:46:32] *** Quits: Major_Biscuit (~MajorBisc@c-001-017-008.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:46:42] *** Quits: rgrinberg (~textual@187.223.115.174) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:50:00] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 250 seconds)
[21:50:22] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[21:51:40] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:52:47] *** Joins: neceve (~quassel@2.26.93.228)
[21:54:08] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Remote host closed the connection)
[21:56:56] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:12:44] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:15:54] *** Joins: Miaourt10 (~Miaourt@static.10.244.203.116.clients.your-server.de)
[22:17:17] *** Quits: Miaourt1 (~Miaourt@static.10.244.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[22:17:17] *** Miaourt10 is now known as Miaourt1
[22:27:47] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:36:19] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[23:17:08] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[23:19:58] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Ping timeout: 268 seconds)
[23:21:43] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Client Quit)
[23:22:05] *** Joins: haliucinas (~haliucina@5.20.153.21)
[23:33:27] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[23:41:20] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[23:47:01] *** Joins: jemius (~imperator@2001:16b8:2d83:2b00:dee2:7a67:e2d7:19dd)
[23:51:28] *** Quits: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed) (Quit: Leaving)
[23:54:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[23:56:29] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:2b70:9bf7:d290:b791)
