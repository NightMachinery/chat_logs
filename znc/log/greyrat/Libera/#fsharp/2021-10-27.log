[00:50:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[00:53:07] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Client Quit)
[01:27:46] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 265 seconds)
[06:07:45] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[06:14:34] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) ()
[07:13:35] *** Joins: jinsun (~quassel@user/jinsun)
[07:40:56] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[07:42:35] *** Joins: jinsun (~quassel@user/jinsun)
[09:10:36] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[09:14:41] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[09:19:55] *** Joins: jinsun (~quassel@user/jinsun)
[09:25:56] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[10:08:19] *** Joins: kuribas (~user@ptr-25vy0i9jhzblfidtsev.18120a2.ip6.access.telenet.be)
[13:26:55] *** Joins: chao (~stenno@user/stenno)
[13:28:43] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 260 seconds)
[14:01:01] *** Joins: d[-_-]b (~stenno@user/stenno)
[14:01:14] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 260 seconds)
[14:12:45] *** Quits: d[-_-]b (~stenno@user/stenno) (Ping timeout: 260 seconds)
[14:42:19] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[14:42:19] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[14:45:34] *** Joins: ski (~ski@remote12.chalmers.se)
[14:45:34] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[14:46:25] *** Joins: d[-_-]b (~stenno@user/stenno)
[14:54:45] *** Quits: d[-_-]b (~stenno@user/stenno) (Ping timeout: 260 seconds)
[15:28:01] *** Joins: d[-_-]b (~stenno@user/stenno)
[15:29:12] *** Quits: d[-_-]b (~stenno@user/stenno) (Client Quit)
[16:05:35] *** Joins: stenno (~stenno@user/stenno)
[17:52:05] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[17:59:46] *** Joins: stenno (~stenno@user/stenno)
[18:12:49] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[18:14:06] <sonny> is there is an implicit yield in a while block? https://bpa.st/3FKQ
[18:14:25] <sonny> I am not sure if there is any relationship to sequences here, or how to use them really ...
[18:25:21] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[18:25:41] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[18:25:57] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Remote host closed the connection)
[18:26:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[18:30:56] <biberu> sonny: that won't yield anything, the while simply has a side effect
[18:32:33] <biberu> sonny: try e.g. let x = while true do printf "" <- x will be inferred as unit
[18:35:20] <sonny> ok
[18:56:38] <sonny> are c# exceptions and F# exceptions seperate?
[18:57:34] <sonny> my last task is to catch the exceptions https://bpa.st/XF5Q
[18:59:10] <biberu> sonny: the types and concept are the same, but generally you'd throw much less in f# code, and instead communicate errors via e.g. option<> or result<,>
[19:00:03] <biberu> the construct you're looking for is try..with
[19:00:31] <biberu> https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/exception-handling/the-try-with-expression
[19:02:40] <sonny> a try block with `:? System.Exception as e -> printf $"{e}"`
[19:03:01] <sonny> I could not call the e.GetMessage method
[19:06:23] <biberu> with | e -> printfn $"{e.Message}" is enough
[19:07:36] <biberu> that'll match any exception (also you don't need to type out System.Exception even if you should need the type, `exn` is enough)
[19:08:04] <sonny> thanks
[19:08:26] <sonny> I couldn't find the exception hierarchy for c# fast enough so I settled for that
[19:10:45] <biberu> System.Exception is the base, exn is an alias for that in f#
[19:10:54] <biberu> https://docs.microsoft.com/en-us/dotnet/api/system.exception?view=net-5.0
[19:20:37] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:49:47] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[22:15:01] *** Joins: Seng (~nick@hurtig.ninja)
[22:37:16] *** Quits: kuribas (~user@ptr-25vy0i9jhzblfidtsev.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[23:28:01] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[23:28:17] <sonny> what would I use when I want something like an enumerated type?
[23:39:43] <biberu> sonny: probably a discriminated union: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/discriminated-unions
[23:40:14] <biberu> there are traditional enums too
[23:41:40] <sonny> yeah, thanks 
[23:43:54] <sonny> I'm trying to wrap my head around scanners now https://bpa.st/FKBA
[23:44:01] <indomitable> mmmmm discriminated unions
[23:44:05] <indomitable> the only kind of discrimination i truly approve of 100%
[23:45:22] <sonny> instead of bool, I might just have a large function and return a type Symbol = Digit | Letter | ...
