[00:00:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:03:25] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[00:03:41] <jstoddard> I think I have a similar problem to what frodef is facing. I put together a simple Gemini client (so not HTTP per se, but using usocket and cl+ssl in any case) and don't really have a way to deal with read timeouts.
[00:04:43] <jstoddard> I haven't thought about it much, though. I'm a noob to socket programming (higher level libraries hid that stuff from me before), so I have only been worrying about getting something working for the most part. I figured I would worry about making it more robust later.
[00:04:57] <jstoddard> I appreciate the heads up that it might not be so easy...
[00:07:23] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[00:19:19] <fe[nl]ix> luis: do you want to blog/announce that CFFI issues are now on Github, or should I ?
[00:21:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:25:02] <lisp123> jstoddard: off topic, but I was JUST reading about Gemini :)
[00:26:25] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:27:36] <jstoddard> lisp123: I'm entirely new to the protocol, but putting together a client for it seemed like a simple way to try out some network programming in Common Lisp and get some practice with McCLIM while at it.
[00:28:04] <fe[nl]ix> if I were to need an HTTPS client to use in production (say a startup), I'd look into resurrecting cl-curl
[00:28:47] <lisp123> jstoddard: Nice stuff. Good luck with it (and yeah networking is always tough ;))
[00:29:18] <aeth> lisp123: the problem with JSON isn't parsing it, it's that it only really cleanly maps to languages like Lua, JSON, Python, etc. Most of the "scripting languages", excluding a few (e.g. Perl)
[00:29:39] <aeth> (not 100% there, either, though)
[00:29:46] <fe[nl]ix> drakma is nice as a simple HTTP/1.1 client, but it has major drawbacks
[00:31:49] <fe[nl]ix> aeth: one should not be obsessed with having to "cleanly map" to a language
[00:32:35] <aeth> fe[nl]ix: it just makes the task easier or harder
[00:32:59] <aeth> the problem with most JSON libraries is that if poorly designed, CL->JSON->CL->JSON is a lossy process
[00:33:23] <aeth> I suppose order isn't necessarily preserved for JSON objects, but that's not as bad as turning false into null or [] or whatever
[00:34:01] <fe[nl]ix> round-tripping is an actual problem, mapping json types to language types is hardly one
[00:34:25] <aeth> round-tripping follows, though
[00:35:00] <aeth> in particular, Common Lisp doesn't have a null while JSON does, which leads some people to use the poorly-named NIL (which is false and the empty list, but not a proper null and can't be because it's false) improperly
[00:35:24] <fe[nl]ix> you can have round-tripping by parsing each JSON type as a CLOS type, no built-in types
[00:35:39] <aeth> NIL->null or NIL->{} or NIL->[] will create the issues with CL's JSON libraries
[00:36:10] <aeth> (well, most of them)
[00:37:24] <fe[nl]ix> myjson:json-map -> {}, etc...
[00:38:16] <aeth> that abstraction just moves the issue one layer back
[00:39:00] <fe[nl]ix> there's no more issue that way
[00:39:11] <aeth> the user will still wind up with issues if they, at some point, associate NIL with null, {}, or [] instead of false unless they're very careful to distinguish between NIL-as-list (into [] or even {} if plist/alist) and NIL-as-false
[00:39:30] <aeth> the only issue is that the user is encountering that when translating it into the object rather than when translating it into JSON
[00:39:32] *** Joins: karlosz (~karlosz@136.56.98.53)
[00:40:15] <aeth> and sometimes, the user who does this will associate NIL-as-false with JSON's null, which is... not ideal if anyone other than the original user needs to see the JSON
[00:41:22] <fe[nl]ix> nope, if a library gives a strict mapping between Lisp types and JSON, the problem is gone
[00:41:40] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:41:46] <fe[nl]ix> that some people might want to use NIL instead of an empty map (or hash table), is irrelevant
[00:42:16] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:45:32] <fe[nl]ix> note that the root of the problem is the expectation that language objects be self-describing
[00:46:09] <fe[nl]ix> if you require a schema for encoding, like for protobufs, the problem goes away
[00:46:34] <fe[nl]ix> NIL will have an unambiguous encoding to the target type
[00:47:57] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[00:48:29] <drakonis> gcl has surprisingly decent documentation, wow.
[00:48:44] <drakonis> even if i'm not using gcl, its still pretty useful
[00:49:41] <etimmons> Shinmera: What's the best practice for skipping tests in parachute that signal errors. SKIP seems to still evaluate the test and if it errors (e.g., a function is missing for the implementation), parachute marks it as failing.
[00:51:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fd9c:24e7:5ea:6f47) (Ping timeout: 240 seconds)
[00:51:16] <Shinmera> Hmm
[00:52:02] <Shinmera> I think that's more of a bug
[00:52:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:52:17] <Shinmera> not that it still runs it, but that it doesn't always skip it
[00:53:04] <Shinmera> https://github.com/Shinmera/parachute/issues/36
[00:53:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:58c5:6207:2988:1b06)
[00:53:21] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:54:05] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[00:55:13] <Shinmera> Actually the issue is more nuanced, still
[00:55:36] <Shinmera> In general parachute works the way it does because it wants to avoid catching errors in the *test definition itself*
[00:56:01] <Shinmera> so anything that is not explicitly within an is/true/etc. form will bubble up and produce the warning you see
[00:56:27] <etimmons> I've seen that issue as well. But in that case, the report has a status of passed even though the summary says there's a failure
[00:56:50] <Shinmera> Oh, right, and you're using the SKIP form rather than the option
[00:57:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[00:57:16] <etimmons> If there's an explicit ERROR within a skip form, the summary will show a failure _and_ the report object will have a failure status
[00:57:18] <Shinmera> What's your simplified case?
[00:57:24] <etimmons> one sec
[00:57:40] <Shinmera> because (skip (error "foo")) should and will error and mark it failed.
[00:57:56] <Shinmera> but (skip (true (error "foo")) should not
[00:58:12] <etimmons> oh... interesting
[00:58:29] <Shinmera> again, the former is an error in the test definition as you wrote it
[00:58:40] <Shinmera> so it's a problem with your tests, not the implementation you're testing
[00:58:40] <etimmons> I'm doing the former, effectively
[00:58:49] <Shinmera> right, so there's no bug here.
[00:58:57] <Shinmera> If you want to skip that, then just use reader conditionals.
[00:59:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:00:02] <etimmons> OK, I'll do that for now.
[01:00:03] <Shinmera> alternatively, whatever form you have that's bugging out, you could potentially wrap that in (finish ...) to get the proper skip behaviour
[01:00:19] <etimmons> I think I like that better
[01:00:21] <Shinmera> note that most forms like finish/is/etc return their result, so they can still be used in normal flow.
[01:00:42] <Shinmera> err, by result I mean the resulting value of the form they wrap
[01:03:38] <etimmons> My actual use case is I have a macro with-open-tar-file and then inside the body of that macro I do a lot of tests. The error comes from deep within the code the macro inserts. (One of the libraries I use signals an error on ABCL for some non-implemented functionality)
[01:03:59] <drakonis> oh wait this isnt gcl, its the hyperspec lol
[01:04:01] <drakonis> welp
[01:04:21] <drakonis> its the hyperspec in texinfo form
[01:04:38] <etimmons> So I think I'll go the finishes route now that I know how skip is supposed to work
[01:06:30] <Shinmera> I see
[01:08:15] <jeffrey> frodef, replacing the `progn` for the `(string= scheme "https")` in dexador's `(defun-careful request` /src/backend/usocket.lisp with https://dpaste.com/64SEHPWEF makes the ssl-stream kill itself after :read-timeout of passed time
[01:08:56] <jeffrey> You could also do something like https://github.com/edicl/hunchentoot/issues/189#issuecomment-873432491
[01:14:17] <frodef> jeffrey: Thanks, that looks reasonable.
[01:15:07] <frodef> I am however somewhat disturbed by the lack of unwind-protect in any form.
[01:15:33] <phoe> frodef: is there one in WITH-GLOBAL-CONTEXT mayhaps?
[01:15:56] <phoe> the :AUTO-FREE-P suggests that it might have an UNWIND-PROTECT in its expansion
[01:17:01] *** Quits: pve (~pve@188-67-138-88.bb.dnainternet.fi) (Quit: leaving)
[01:28:52] <sm2n> drakonis: where did you get that?
[01:29:11] <frodef> phoe: that's only todo with the context object, it seems.
[01:29:15] <drakonis> in gcl's repository
[01:29:25] <phoe> frodef: todo? what do you mean?
[01:29:33] <frodef> to do
[01:29:35] <drakonis> https://git.savannah.gnu.org/cgit/gcl.git/tree/gcl/info in here
[01:30:08] <drakonis> as far as i'm concerned, it is the full spec without any alterations
[01:30:19] <frodef> phoe: it's only the context object that gets automatically freed.
[01:30:25] <drakonis> hyperspec.
[01:30:30] <phoe> frodef: I see
[01:30:50] <sm2n> oh, I see
[01:31:38] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Quit: time for bed...)
[01:32:21] <drakonis> the hyperspec chapters are labeled as chapter_<number>
[01:32:48] <drakonis> if you invoke make, it'll place the hyperspec on its own file
[01:33:13] <drakonis> i wonder how it was acquired
[01:34:39] <drakonis> https://github.com/LispLang/ansi-spec/tree/master/tex hm, here's another source for the tex files
[01:34:53] <frodef> jeffrey: btw where did you find any documentation on -deadline for CL+SSL? I looked for that and couldn't find it...
[01:41:40] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[01:41:41] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:43:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:44:23] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[01:49:17] <jeffrey> I don't think I can reproduce the full rabbit hole, but it went something like this: dex:request -> cl+ssl:make-ssl-client-stream -> (make-instance 'ssl-stream -> which has a `deadline` accessor. Also: cl+ssl:make-ssl-client-stream calls `ensure-ssl-funcall`, which applies the `deadline`. Along the way, I found https://common-lisp.net/project/cl-plus-ssl/ (of which the second mention points to support) and somewhere in parallel I stumbled
[01:49:18] <jeffrey> upon the aforementioned hunchentoot issue, of which the latter essentially does the same as the hack I wrote. Though, confirmation on how to use the `deadline` I found with an `ag` through the cl+ssl code, which has a test for the `deadline` in ssl-verify-test.lisp (in cl+ssl package) after which I knew it was the correct way.
[01:54:34] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e5a0:a671:8449:d16c)
[01:55:37] *** Quits: attila_lendvai (~alendvai@catv-176-63-14-32.catv.broadband.hu) (Ping timeout: 240 seconds)
[01:55:59] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:387d:2db3:fff8:a6ab)
[01:56:26] <frodef> actually the deadline thing errs here..
[01:59:03] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: Textual IRC Client: www.textualapp.com)
[01:59:31] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e5a0:a671:8449:d16c) (Ping timeout: 245 seconds)
[02:01:03] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[02:02:12] <frodef> ...somehow a RATIO gets passed to SB-SYS:DECODE-TIMEOUT. I find this code pretty much impossible to follow.
[02:02:37] *** Joins: dra (~dra@2a04:4540:6415:6700:4d97:d40b:359e:eb21)
[02:02:37] <nij-> Anyone aware of CL libraries that deal with "SXML"? Not the existing S-XML or XMLS. For SXML, see the following for a neat example: https://en.wikipedia.org/wiki/SXML
[02:02:48] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:03:00] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:04:56] <phoe> nij-: #'ql:system-apropos tells me about https://github.com/eadmund/cl-sxml
[02:07:19] *** Quits: dra (~dra@2a04:4540:6415:6700:4d97:d40b:359e:eb21) (Client Quit)
[02:07:22] <jeffrey> frodef, if you exclude the :read-timeout and do something like this: `(time (nth-value 1 (dex:get "https://httpbin.org/delay/13")))` you should get the same anyhow
[02:09:16] <frodef> jeffrey: apparently cl+ssl::seconds-until-deadline calculates a value using CL:/ which tends to produce a ratio. amazaing.
[02:09:55] <frodef> jeffrey: I didn
[02:10:11] <frodef> ..n't understand your "should get the same".
[02:10:43] <frodef> ..the problem goes away if you ignore network hangups, of course..?
[02:13:58] <jeffrey> nvm, I thought if I recompile without the hack and dex:get httpbin delay for 13s it would type-error the same way, but httpbin has a max of 10s delay
[02:15:09] <jeffrey> But two handler cases is fine right?
[02:15:37] <frodef> sorry, I don't follow.
[02:16:26] <jeffrey> one for https type-error and the other for http io-timeout? I mean its not great, but if it works :p
[02:17:38] <frodef> I rather suspect the fd leakage would still be an issue.
[02:18:45] *** Joins: djuber (~user@65.79.128.64)
[02:19:58] <frodef> I'm trying to remember a word.. it's the more generic concept that is similar to :around methods, only for any function..?
[02:20:23] <Krystof> advice
[02:20:31] <frodef> right, thanks
[02:20:35] * Krystof waves
[02:20:40] <frodef> hi!
[02:21:51] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[02:22:44] <frodef> No advice mechanism in sbcl, it seems.
[02:24:36] <nij-> phoe: Oh.. thanks. I apologize for my search-foo.
[02:25:11] <phoe> frodef: see some pointers in https://www.reddit.com/r/lisp/comments/4zopm5/defadvice_on_sbcl/ comments
[02:25:26] <phoe> also https://github.com/szos/cl-advice which is a portable implementation
[02:29:07] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:387d:2db3:fff8:a6ab) (Read error: Network is unreachable)
[02:35:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[02:37:26] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:38:57] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[02:45:26] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[02:46:14] *** Joins: dra (~dra@2a04:4540:6415:6700:7175:599:d6b8:58a1)
[02:51:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[02:59:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:59:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:06:26] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[03:11:31] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[03:12:34] *** Joins: mrmr (~mrmr@user/mrmr)
[03:14:54] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[03:14:57] *** Joins: igemnace (~ian@user/igemnace)
[03:15:42] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:39a4:4154:9964:3167) (Remote host closed the connection)
[03:21:35] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:23:37] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[03:29:50] *** Quits: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16) (Quit: Client quit)
[03:34:53] *** Joins: dra_ (~dra@2a04:4540:6419:b700:7175:599:d6b8:58a1)
[03:37:17] *** Quits: dra (~dra@2a04:4540:6415:6700:7175:599:d6b8:58a1) (Ping timeout: 240 seconds)
[03:38:58] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[03:42:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[03:46:34] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:50:56] *** Quits: dra_ (~dra@2a04:4540:6419:b700:7175:599:d6b8:58a1) (Quit: Leaving)
[03:52:35] *** Joins: karlosz (~karlosz@136.56.98.53)
[03:55:07] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:56:03] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[03:56:20] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Client Quit)
[03:58:33] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:59:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:05:42] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:05:56] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:10:06] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[04:11:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:15:39] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:20:07] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[04:21:58] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:25:07] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[04:33:49] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:51:05] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (#commonlisp)
[04:51:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:54:28] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[04:56:04] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:58:37] *** Joins: Everything (~Everythin@37.115.210.35)
[04:59:56] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:01:35] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:07:57] <moon-child> Alfr: 'every partition of the set corresponds to one such relation'  I think the existence of sets kinda implies that you already have at least one equivalence relation :P
[05:08:19] <moon-child> math provides such a relation, but it only works on sets (not conses, symbols, strings, ...)
[05:08:47] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[05:11:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:13:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[05:15:54] *** Joins: aeth (~aeth@user/aeth)
[05:20:54] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[05:29:14] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[05:33:41] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 245 seconds)
[05:48:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:50:12] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:04:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:34:38] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 252 seconds)
[06:55:49] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:57:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:02:48] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[07:03:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:10:28] *** Joins: notzmv (~zmv@user/notzmv)
[07:12:41] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:34] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:13:37] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[07:26:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:30:14] <ns12> nij-: HTML->STRING is somewhat similar to SXML https://gist.github.com/markasoftware/ab357f1b967b3f656d026e33fec3bc0e
[07:31:13] <beach> Good morning everyone!
[07:36:03] <ns12> Good morning beach.
[07:42:02] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[07:50:53] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[07:54:47] *** Joins: semz (~none@user/semz)
[08:04:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:06:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:09:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:12:19] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[08:12:46] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:34:52] *** Joins: Oladon (~olad@98.43.81.226)
[08:35:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:52:47] *** Joins: ldb (~user@user/ldb)
[08:54:11] *** Joins: akoana (~ah@user/akoana)
[08:54:17] *** Joins: karlosz (~karlosz@136.56.98.53)
[09:11:37] *** Quits: ldb (~user@user/ldb) (Ping timeout: 240 seconds)
[09:15:23] *** Joins: ldb (~user@user/ldb)
[09:15:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:22:06] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[09:26:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:35:43] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 256 seconds)
[09:49:09] *** Joins: s-liao23 (~s-liao@101.86.96.21)
[09:52:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:57:50] *** Quits: s-liao23 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:58:59] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[09:59:20] *** Joins: karlosz (~karlosz@136.56.98.53)
[09:59:48] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[10:01:26] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[10:02:19] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[10:05:53] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[10:13:03] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[10:16:44] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Quit: sleep)
[10:37:49] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[10:43:36] *** Joins: Jing_ (~hedgehog@2604:a840:3::103c)
[10:46:17] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Ping timeout: 240 seconds)
[10:57:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[11:06:00] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:06:03] *** Joins: sunset_NOVA (~sunset_NO@p200300f0870ab9008967795cd8053430.dip0.t-ipconnect.de)
[11:09:28] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:12:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:14:05] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[11:19:01] *** Quits: Jing_ (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:24:53] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[11:25:05] *** Joins: shka (~herr@109.231.0.226)
[11:26:38] *** Joins: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[11:27:54] *** Quits: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Client Quit)
[11:30:19] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 256 seconds)
[11:31:07] *** Joins: s-liao97 (~s-liao@101.86.96.21)
[11:32:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:46:13] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[11:47:31] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:52:17] *** Quits: s-liao97 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:58:43] *** Joins: rogersm (~rogersm@90.166.180.250)
[11:59:13] *** Joins: varjag (~user@188.95.247.249)
[12:01:06] *** Quits: srji (~srji@p5499dc4a.dip0.t-ipconnect.de) (Quit: leaving)
[12:01:36] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[12:16:24] *** Joins: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr)
[12:18:57] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[12:23:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:25:54] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[12:37:36] *** Joins: xsperry (~xs@user/xsperry)
[12:37:55] *** Quits: beach (~user@2a01:cb19:150:3400:c341:38a2:d2af:9009) (Ping timeout: 268 seconds)
[12:38:36] *** Joins: pve (~pve@178-55-174-192.bb.dnainternet.fi)
[12:45:34] *** Joins: beach (~user@2a01:cb19:150:3400:4e13:e680:ba99:cfc5)
[12:57:03] <madnificent> nij-: I wrote sexml ages ago.  It takes in a DTD and spits out forms.
[12:57:30] <madnificent> nij-: It's been used in the wild since it was written but its use will likely be discontinued.
[12:58:01] <madnificent> I strongly suspect it could also spit out helpers to allow writing the SXML syntax.
[12:58:28] <luis> fe
[12:58:41] <madnificent> It uses context oriented programming at compiletime IIRC, so I guess you could advise it to create different things.
[12:58:43] <phoe> luis: how about cu?
[12:59:10] <madnificent> o7 phoe
[12:59:42] <luis> fe[nl]ix: let me update the docs first
[13:02:00] <luis> phoe: typing Stelian's nickname on a phone is hard enough without a toddler moving about :D
[13:03:03] <phoe> :D
[13:10:12] *** Joins: beach` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[13:13:33] *** Joins: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16)
[13:14:09] *** Quits: beach (~user@2a01:cb19:150:3400:4e13:e680:ba99:cfc5) (Ping timeout: 250 seconds)
[13:15:09] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[13:15:44] *** Joins: amb007 (~a_bakic@28.37.22.93.rev.sfr.net)
[13:25:56] *** Quits: amb007 (~a_bakic@28.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:26:29] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:30:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[13:31:05] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:33:03] *** Joins: s-liao53 (~s-liao@101.86.96.21)
[13:36:34] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:37:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[13:38:34] *** Joins: amb007 (~a_bakic@28.37.22.93.rev.sfr.net)
[13:40:18] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[13:46:42] <nij-> madnificent: Thanks for sharing. Does it format the output automatically? Or just plain s-expressions?
[13:53:01] <madnificent> nij-: It's basically a thing to generate functions from a DTD so that it's easier to write HTML.  It should generate documentation if slime is available (iirc).  So you should get hints on what input is allowed.
[13:54:00] <madnificent> But then HTML5 came along and they decided that the lessons we learned shifting away from SGML were for losers and that web devs wouldn't understand simple structure anyways so it's not XML-based anymore.
[13:54:24] <moon-child> html5 is the most bizarre shit I have ever heard of
[13:54:31] <moon-child> 'let's make a standard except it's not actually a standard'
[13:55:08] <madnificent> <continued-rant>So we claim that editors should complete any symbol and it's okay to have a myriad of APIs that change whenever with bots that keep our dependencies up to date because it's such a mess, but it's absolutely impossible for an editor to insert a closing term or create a well-formed attribute, that would be far too complex</continued-rant>
[13:55:53] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:55:54] <madnificent> moon-child: Welcome to the undermining of the W3C.  For the shit it gets, it has done an amazing job at pushing our world forward.  I'm hoping we can support a bunch of their later efforts to get data back in the hands of people.
[13:56:17] <moon-child> ehhhhh??~
[13:57:10] <madnificent> The WHATWG was created to create HTML5 because the W3C didn't accept changes fast enough.  They didn't see a future in xhtml but rather wanted a more free-forming structure where it would be easier to get things accepted.
[13:57:42] <moon-child> I'm not allowed to hate whatwg and w3c both?
[13:58:08] <madnificent> moon-child: You are!  But I think the hate for the W3C is largely steered by other interests.
[13:59:12] <madnificent> The W3C has a structure in place where you can participate as an entity.  You know the cost.  It gives you single vote.  If you're big, you'll pay more, but you don't get more voting rights.  That's been a huge thorn in the eyes of some.  I think it's a sensible structure.
[14:00:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:01:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:01:52] *** Lord_of_Life_ is now known as Lord_of_Life
[14:02:11] <madnificent> Everyone interprets what they see based on what they want to see, myself included.
[14:02:26] *** Joins: gaqwas (~john@dynamic-077-002-055-235.77.2.pool.telefonica.de)
[14:04:41] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[14:06:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:09:59] *** Quits: s-liao53 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:16:48] *** Quits: amb007 (~a_bakic@28.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:17:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:21:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[14:22:24] *** Joins: biog (~user1@159.224.42.85)
[14:22:24] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:23:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:27:07] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[14:27:14] *** Joins: amb007 (~a_bakic@28.37.22.93.rev.sfr.net)
[14:50:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:52:29] *** Quits: amb007 (~a_bakic@28.37.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[14:53:25] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:55:49] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[14:58:57] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 240 seconds)
[15:04:22] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[15:13:16] *** Joins: dmgk (~dmgk@user/dmgk)
[15:13:21] *** Joins: igemnace (~ian@user/igemnace)
[15:17:53] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[15:38:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[15:38:51] *** Joins: amb007 (~a_bakic@31.245.204.77.rev.sfr.net)
[15:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[15:52:04] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[15:56:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:04:37] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[16:07:19] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f5:37d:9ac:c716:7577:64d4)
[16:12:02] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:17:39] *** Quits: amb007 (~a_bakic@31.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[16:18:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[16:21:08] *** Joins: igemnace (~ian@user/igemnace)
[16:22:17] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[16:24:55] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Read error: Connection reset by peer)
[16:30:33] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:31:25] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[16:37:59] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[16:43:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: -now)
[17:00:32] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:09:56] *** Joins: Alfr (~Alfr@user/alfr)
[17:10:29] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:16:52] *** Joins: igemnace_ (~ian@user/igemnace)
[17:18:03] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[17:20:37] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Ping timeout: 240 seconds)
[17:23:16] *** Joins: beach`` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[17:23:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:23:24] *** Joins: igemnace (~ian@user/igemnace)
[17:24:21] *** Quits: beach` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:26:03] *** Quits: igemnace_ (~ian@user/igemnace) (Ping timeout: 256 seconds)
[17:27:14] *** beach`` is now known as beach
[17:27:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:28:44] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:30:56] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:56] *** ChanServ sets mode: +o Bike
[17:31:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Ping timeout: 240 seconds)
[17:31:17] *** Joins: nij- (~jin@24-225-98-35-dynamic.midco.net)
[17:31:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:34:33] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[17:38:21] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[17:38:35] *** Joins: amb007 (~a_bakic@31.245.204.77.rev.sfr.net)
[17:42:04] *** Quits: amb007 (~a_bakic@31.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[17:42:09] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:19df:3c96:615a:7101)
[17:43:07] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:44:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:48:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:56:45] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:57:25] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[18:02:44] *** Joins: unyu (~pyon@user/pyon)
[18:03:48] *** raeda_ is now known as raeda
[18:07:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:12:01] *** Quits: sunset_NOVA (~sunset_NO@p200300f0870ab9008967795cd8053430.dip0.t-ipconnect.de) (Quit: Leaving)
[18:16:58] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[18:17:37] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:34:22] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[18:35:37] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Read error: Connection reset by peer)
[18:36:40] *** Joins: igemnace (~ian@user/igemnace)
[18:44:51] *** Quits: shka (~herr@109.231.0.226) (Read error: Connection reset by peer)
[18:46:02] *** Joins: cranium (~cranium@user/cranium)
[18:46:36] *** Quits: frodef (~frode@46.212.93.4) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:48:36] *** Joins: shka (~herr@109.231.0.226)
[18:58:42] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[18:59:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[18:59:34] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f5:37d:9ac:c716:7577:64d4) (Read error: Connection reset by peer)
[19:01:33] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[19:03:50] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:04:56] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:05:36] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[19:05:55] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:19df:3c96:615a:7101) (Remote host closed the connection)
[19:06:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:14:44] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[19:21:03] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:443f:3e79:f513:1a13)
[19:21:49] *** Quits: nij- (~jin@24-225-98-35-dynamic.midco.net) (Ping timeout: 263 seconds)
[19:25:25] *** Joins: citizenajb (~citizenaj@216.13.217.230)
[19:29:44] *** Joins: eddof13 (~textual@177.241.57.17)
[19:32:25] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[19:35:44] <citizenajb> Anyone interested in working on a non-FFI Common Lisp QUIC + HTTP/3 implementation?  It's a nice big task, but I feel like it helps keep Common Lisp relevant.  An FFI version would be OK too, but if all we do is FFI I think we miss opportunities to improve our standard components, like usocket, etc.
[19:38:12] <madnificent> The discussion on equality has shaped my thinking a littly bit.  Thank you.  It has also slightly changed my reading of provided methods.  The argument to concatenate has received a different place in my head.
[19:38:34] <phoe> citizenajb: practical question - what issue is there with having a non-CL proxy running between CL and HTTP clients, converting HTTP2 to QUIC?
[19:38:56] <beach> citizenajb: Great initiative.  This is not my domain of expertise, and I am busy with other stuff, but i hope you will get lots of help.
[19:39:09] <madnificent> citizenajb: I'm not up for the task.  I've enjoyed writing an http1.1 implementation at some point but I doubt time will permit from my end.  So far we're running Hunchentoot behind a few other services, one being nginx.
[19:39:20] <phoe> like, client → quic → proxy → http2 → CL
[19:40:52] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.3)
[19:42:05] <madnificent> phoe: Connection handshake is substantially longer.  Though with a proxy we keep the TCP connections open longer to mitigate that.
[19:42:47] <citizenajb> phoe: If the proxy is very local (so that the improvements that QUIC aims at are not relevant) I think that would work OK --- can you point me at an HTTP/3 to HTTP/2 proxy?  There is a Common Lisp HTTP/2 server (I think I saw one on github while wandering around)?
[19:42:54] <madnificent> phoe: given a different transport layer in http/3, I would expect widely different performance characteristics though.  Especially on crowded networks.
[19:43:36] <madnificent> citizenajb: nginx will accept HTTP/3.  If it forwards to a backend it negotiates with the server what protocol it should use there.
[19:43:53] <citizenajb> beach: it is not my domain of expertise either --- but because it would be a hobby project the learning of new things is an acceptable part of the project.
[19:44:27] <madnificent> I'm not sure how that works together with the push updates in http/2 and http/3.  I suspect subtle incompatibilities but I don't know.
[19:45:28] *** Joins: Mandus (~aasmundo@85.112.154.250)
[19:45:39] <beach> citizenajb: Sounds good to me.
[19:46:18] <phoe> citizenajb: haproxy and nginx have some early support for quic
[19:46:19] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[19:46:26] <citizenajb> madnificent: OK, so there is an extant solution to support Common Lisp as a web server and accept HTTP/3 through proxying, but how about as a client?  Eventually HTTP/1.1 will become stone age technology and will help sink Common Lisp with its weight.  People choose programming languages for all sorts of reasons, and one major one is "supports 'modern' stuff"
[19:47:11] <phoe> citizenajb: the general idea is that libraries only happen when somebody makes them, and people usually make them if they need them - a quic client and/or server won't be an exception
[19:47:54] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:48:05] <madnificent> citizenajb: ah, I only assumed server library.  True.  I wouldn't expect it to stick with HTTP/3 in the coming years though.  We let backwards compatibility loose in HTTP/2 and 6 years later there's already a new very disruptive kit around the block.  Given how easy it is to implement, perhaps HTTP1.1 will stick around longer than HTTP/3! XD   I generally agree and would love an HTTP/3 implementation though.
[19:49:33] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[19:50:57] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[19:51:24] <madnificent> citizenajb: I think it could be a fun project to pursue!
[19:52:57] <citizenajb> madnificent: I think so too, obviously!  I just remember how much fun it was when I was younger to work with other people on open source stuff.  Now that I'm old and use Common Lisp all day at work I kind of dropped out of the "programming for fun" camp.
[19:53:22] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) ()
[19:55:57] <semz> "Eventually HTTP/1.1 will become stone age technology and will help sink Common Lisp with its weight." I don't see this at all, honestly.
[19:56:13] <semz> Not that I'm discouraging anyone from writing support for HTTP/[23].
[19:59:02] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[19:59:43] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:00:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:00:26] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[20:01:00] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[20:02:01] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:03:34] *** Joins: alvaro121 (~aa@201.230.126.66)
[20:04:53] *** Joins: sloanr (~user@70-59-86-78.mpls.qwest.net)
[20:10:00] *** Quits: sloanr (~user@70-59-86-78.mpls.qwest.net) (Remote host closed the connection)
[20:10:13] *** Joins: sloanr (~user@70-59-86-78.mpls.qwest.net)
[20:18:58] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[20:21:54] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[20:27:28] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:29:58] *** Parts: citizenajb (~citizenaj@216.13.217.230) ()
[20:33:39] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:33:45] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 256 seconds)
[20:38:39] <random-nick> wouldn't implementing http/3 just be a matter of implementing quic (which is called a transport layer protocol but actually just uses UDP) and then implementing http/3 on top of it?
[20:38:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:38:54] <random-nick> I don't see why would you have to change things like usocket
[20:39:39] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[20:39:56] *** Joins: marcoxa (~user@2a02:587:e209:d00:bd94:ef6f:2379:fbea)
[20:42:44] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 252 seconds)
[20:43:36] *** Joins: tfb (~tfb@88.98.95.237)
[20:44:01] *** Joins: Catie (~user@user/catie)
[20:45:22] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[20:45:30] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:443f:3e79:f513:1a13)
[20:46:29] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz…)
[20:48:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:443f:3e79:f513:1a13) (Ping timeout: 245 seconds)
[20:50:15] *** Joins: marcoxa` (~user@2a02:587:e209:d00:78d2:2ef1:b1a3:e96d)
[20:50:28] *** Joins: citizenajb (~citizenaj@216.13.217.230)
[20:51:37] *** Quits: marcoxa (~user@2a02:587:e209:d00:bd94:ef6f:2379:fbea) (Ping timeout: 240 seconds)
[20:52:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:52:44] <citizenajb> random-nick: usocket isn't perfect.  It misses a few features, like auto-close on stream finalization, etc.  I'm pretty sure there is some excess copying compared with some of the direct interfaces, but I haven't looked at it in a long time.  Nothing specific to UDP or QUIC.  Just the more varied users of a library, generally the better something is...
[20:52:57] *** Quits: citizenajb (~citizenaj@216.13.217.230) (Remote host closed the connection)
[20:54:02] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:56:28] <jeosol> Good morning all!
[21:00:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:02:34] <rotateq> heyy jeosol :)
[21:03:13] <jeosol> rotateq: I am ok
[21:05:05] <rotateq> good
[21:05:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[21:12:09] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 256 seconds)
[21:13:46] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[21:20:56] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[21:35:18] *** Quits: eddof13 (~textual@177.241.57.17) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:40:50] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[21:44:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:51:27] *** Joins: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6)
[22:09:13] <sm2n> does anyone know why there is #+ecl stuff in the sbcl backend file for usocket?
[22:09:18] <sm2n> for example here: <https://github.com/usocket/usocket/blob/984329e1beb7b4a53fe90957f67bdce6529dc1a1/backend/sbcl.lisp#L28>
[22:09:49] <rotateq> maybe for bootstrapping reasons?
[22:10:39] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[22:11:02] <sm2n> hmmm... <https://github.com/usocket/usocket/blob/master/usocket.asd>
[22:11:15] *** Joins: karlosz (~karlosz@136.56.98.53)
[22:11:18] <sm2n> it appears that the ecl backend file depends on the sbcl one
[22:11:36] <sm2n> But, I don't understand why there is ecl exclusive stuff in the sbcl file
[22:12:22] <rotateq> so metabootstrapping :D
[22:13:55] <rotateq> well, maybe ask in #sbcl or #ecl
[22:14:22] <Xach> sm2n: ecl's socket system is called "sb-bsd-sockets"
[22:14:43] <Xach> oops. i don't know if that is applicable.
[22:14:51] <jackdaniel> right, ecl copied api from sbcl for reasons one would call pragmatic
[22:15:07] <jackdaniel> sbcl added some stuff later, so they are no 100% compatible
[22:15:32] <jackdaniel> sb-bsd-sockets is a nickname for the package sockets (or the other way around :)
[22:18:01] <sm2n> oh, I see, I guess it would have to be in the same file because called functions need to be in the same compilation unit or prior
[22:19:38] <sm2n> or not? I guess it's just a style thing
[22:25:48] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[22:26:04] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:27:01] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:443f:3e79:f513:1a13) (Read error: Connection reset by peer)
[22:27:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:29:24] <jackdaniel> I guess that api is still similar enough that it is not worth to duplicate code
[22:36:30] <madnificent> sm2n: You use a package in multiple files, extending its content.
[22:37:41] <madnificent> sm2n: IIUC, a package is a symbol space.  It's not a container of functions and variables, but rather a set of labels to which functions and variables can be attached.
[22:38:12] <sm2n> Yes, I understand how packages work
[22:38:27] *** Joins: Oladon (~olad@98.43.81.226)
[22:38:47] <sm2n> My initial confusion was why there was a #+(or mkcl (and ecl (not ecl-bytecmp))) in sbcl.lisp
[22:39:05] <jackdaniel> (what was exactly the point of mimicing the api)
[22:39:05] <sm2n> i.e code that does not apply to sbcl at all
[22:40:49] <sm2n> ?
[22:41:04] <jackdaniel> I was referring to my previosu statement
[22:41:28] <madnificent> sm2n: yes, I understood that question.  it seemed you were not 100% sure on packages above.  redundant info from my end :)
[22:41:40] <sm2n> oh
[22:41:44] <jackdaniel> to rephrase: "the point of mimicing the api was to make it easy enough to reuse code written for sbcl" - at least that's how I imagine the rationale of the implementer
[22:42:05] <sm2n> Yes, that makes sense.
[22:48:09] *** Joins: tfeb (~tfb@88.98.95.237)
[22:51:24] <lisp123> Is there a way to get the last character of a string without traversing it to get its LENGTH?
[22:51:49] <sm2n> Yes
[22:51:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:52:09] <sm2n> strings are vectors, and hence have O(1) random access
[22:52:20] <sm2n> (and also length)
[22:52:29] <sm2n> so (length s) on a string does not traverse it
[22:52:49] <lisp123> Gotcha. Is there any way to do it without LENGTH?
[22:53:03] <Bike> not really. why do you want to do it without length?
[22:53:18] <Bike> you could use array-dimension, but that's the same thing
[22:53:26] <lisp123> Just curious (well before it was because of the traversal non-issue, but now just curious :-)
[22:53:42] <semz> You probably need some length-related special case anyway; after all, what is the last character of a length zero string?
[22:54:03] <lisp123> ehhh thanks for reminding me, I need to fix that
[23:02:49] *** Joins: notzmv (~zmv@user/notzmv)
[23:03:15] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:06:40] <jackdaniel> the last character of "string" is g ;)
[23:06:57] <lisp123> jackdaniel: :D
[23:09:01] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[23:09:43] *** Joins: amb007 (~a_bakic@15.245.204.77.rev.sfr.net)
[23:10:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:12:26] <etimmons> jeosol: cl-tar can now create a tar file directly from the file system (preserving links and most metadata), and transparently compress it.
[23:18:27] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:18:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:24:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:25:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:34:56] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 245 seconds)
[23:38:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:44:53] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:46:02] *** Quits: marcoxa` (~user@2a02:587:e209:d00:78d2:2ef1:b1a3:e96d) (Quit: Time for bed...)
[23:46:32] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[23:56:28] *** Quits: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:57:01] *** Joins: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6)
