[00:01:27] *** Joins: Liblx (~Alex@ip4d15ff09.dynamic.kabel-deutschland.de)
[00:02:07] <SnoopJ> altendky, I don't know about aiosqlite (or db in general) but that seems reasonable, the risk associated with non-atomic operations when using a shared connection is probably higher and merits a lock.
[00:02:08] *** Joins: rookie101 (~rookie@207.154.204.166)
[00:02:19] <cluelessperson> altendky, well transactions I believe will be handled in the order they're committed,  and normally I'd think a "shared" connection would queue events or create thread safe connectors.
[00:02:34] <altendky> if you share a common connection object without your own protection then even a transaction started by one task could get other statements from other tasks interleaved in
[00:02:42] <cluelessperson> but frankly I'm a little inexperienced with databasing.
[00:03:27] <altendky> SnoopJ: seems like using a unique connection is the safe option and a lock is the optimization option.  but also i'm in a 'framework' the provides the connection to me i think so...
[00:04:13] <cluelessperson> altendky, I'd look at the documentation about how the shared connection works.  I would expect a database to be able to handle multiple interleaved commands as part of different transactions.
[00:04:19] * cluelessperson is guessing
[00:04:47] <altendky> cluelessperson: how would it know they were separate transactions?  it wouldn't be aware of the async tasks unless aiosqlite specifically implements something
[00:05:00] <SnoopJ> altendky, that would be my intuition, yea. The docs do say that it uses a request queue on the thread associated with a connection to "prevent overlapping actions," though.
[00:05:51] * cluelessperson looks up that sqlite only handles one write transaction at a time.
[00:05:51] <SnoopJ> So maybe sharing a connection between tasks isn't all that bad, since they're being submitted to that queue? It's hard to tell but maybe some part of the docs goes more into detail
[00:06:00] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[00:06:54] <altendky> so i start a transaction in task A and execute a query in A and then do an insert in B...  a queue isn't going to help that unless it's tracking the transaction start along with the task that initiated the statement
[00:07:30] <cluelessperson> "It does this by using a single, shared thread per connection. This thread executes all actions within a shared request queue to prevent overlapping actions."
[00:07:47] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 240 seconds)
[00:08:35] <SnoopJ> altendky, the "then do an insert..." is just describing a concurrent task, right, not synchronization?
[00:08:41] <altendky> sure, a queue will avoid the query from A and the insert from B to happen in parallel.  but a basic queue wouldn't cause the insert from B to wait until after the transaction from A
[00:09:09] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:09:32] <grym> somewhere, aphyr is getting interested in breaking async sqlite :)
[00:09:32] <altendky> SnoopJ: yes, A and B aren't synchronized.  just happening to overlap because, well, async.
[00:09:33] <SnoopJ> yea I think you can end up with a race on the queue there if A, B share their connection and don't synchronize somehow.
[00:09:40] *** Quits: Samian (~Sami@user/samian) (Remote host closed the connection)
[00:10:32] <cluelessperson> yeah, I'm a little confused.  My thinking is you might have to create a write transaction queue to handle writing serially when transactions are committed, but I kinda expect the library to support that.
[00:10:37] <SnoopJ> sounds less like a DB connection issue and more like a "is this program doing the right thing" issue, i.e. it sounds like you want insertB to happen definitely after queryA
[00:11:28] <altendky> right.  and the question is do i leverage the db tooling to catch it (separate connections) which is independent of tasks or threads or processes, or my own tooling for the async specific case i'm in.
[00:11:31] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[00:11:35] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:c926:49f8:c5f0:9de0)
[00:11:41] <SnoopJ> I don't think separate connections gives you that guarantee
[00:11:41] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[00:11:48] <SnoopJ> you're just racing connections instead of racing to put something in the queue
[00:12:08] <altendky> you think that separate connections will still interleave transactions?
[00:12:11] <altendky> that sounds scary
[00:12:25] <altendky> i was thinking connections would even protect against other existing code that didn't think this through
[00:12:57] <SnoopJ> if I understand what you mean, transactions themselves should be atomic in both cases, but you aren't guaranteed anything about sequences of transactions
[00:12:57] <altendky> *interleave transaction-contained statements
[00:13:20] <summonner> if you have the result of one query as an input to another, why not chain the SQL instead. Both are communicating to the DB in the same action
[00:13:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[00:13:28] <altendky> if i use a single connection for both tasks A and B then aiosqlite most likely doesn't know there are even two things going on
[00:13:38] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:13:55] <altendky> if i use a separate connection then i would expect the db to be protecting me against other code in my process (async or threaded) and other processes.
[00:14:00] *** Joins: alzgh (~alzgh@user/alzgh)
[00:14:01] <SnoopJ> yea, it just knows that when either task says "do a thing," that thing gets dumped into the queue, and the thread actually doing the work consumes from that queue
[00:14:26] <altendky> summonner: yes, that's another bit i mean to think about and look at.  but i also presume that transactions exist for not-pointless reasons.
[00:15:16] <summonner> transactions exist because you want to ensure an all-or-nothing outcome
[00:15:17] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 246 seconds)
[00:15:38] *** Joins: fikran (~fikran@user/fikran)
[00:15:47] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 240 seconds)
[00:15:48] <SnoopJ> altendky, I think the protections offered by the DB/aiosqlite are mostly about not corrupting the DB, but your concern sounds more like program correctness, i.e. that A's query does not include what B will insert
[00:16:20] <altendky> summonner: right, so presumably not all cases are covered by 'just chain the sql'
[00:16:26] *** jdmark2 is now known as jdmark
[00:16:28] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Quit: Leaving)
[00:16:49] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[00:16:54] <SnoopJ> probably not, easy enough to suppose that there's some intermediate transformation that can't be expressed in SQL
[00:17:07] <altendky> SnoopJ: agreed.  and i think there are two tools related to that.  because transactions are also about program correctness, not outright low level db corruption.
[00:17:51] <Liblx> Hello, I want to display some lines changing every x seconds in terminal. How can I get my cursor again at the top line and what method can I use to print the updates smoothely? Thanks!
[00:17:54] <summonner> reads, yes, but looking into the scrollback I can see you're talking writes. ensuring the atomicity of a post-write read should be done in a sequential sql statement, with the ; forcing the first query to complete before the next begins
[00:18:01] *** Quits: mei (~mei@user/mei) (Quit: mei)
[00:18:34] <summonner> if you're aoi write read, you have to deal with the driver deciding when to talk, the database deciding when to perform the action
[00:18:45] <altendky> summonner: i'm trying to understand very generally.
[00:19:47] <summonner> altendky, sure so chained sql is like... select x where (select y when) and sequential is like  select y when ; select x when - the second statement will only run once the first has completed and committed
[00:20:07] <SnoopJ> altendky, is the problem moreso that the two transactions A wants to perform should be sequential (who cares what B may have done, as long as A2 immediately follows A1), or do you necessarily want B to occur only after A1, A2 are finished?
[00:20:30] <tar_xvf> Liblx: if you are talking about what i think you are, at the beginning of the print line you can insert a "\r" character to move the cursor to the beginning of the current line, and make sure to remove the "\n" from the end. As for how to print updates, if you are using a loop you could check if a certain amount of time has passed, and if so print the above-mentioned lines
[00:20:50] <SnoopJ> it seems like A1, B, A2 would always be undesirable here, but I'm trying to understand if B, A1, A2 is also undesirable, or if it's alright.
[00:21:31] *** Quits: aniruddha (uid340443@2a03:5180:f:3::5:31db) (Quit: Connection closed for inactivity)
[00:22:28] <Liblx> tar_xvf: thanks, i want to go back at the top of the shown page. Lines up.
[00:22:36] <summonner> altendky, there's a third option, which may or may not be desirable, and that is reading the dataset dependent to the outcome of the first write, and filtering that into your outcome.
[00:23:22] <tar_xvf> Liblx: hmm, if you are planning on re-writing multiple lines, then I would suggest looking up which characters you should write to clear the console window, so you don't have each update show up beneath the previous
[00:23:29] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[00:23:32] <summonner> altendky, In other words, if you're going to change the values of X rows, then read them back - why not just read a dataset where the values would be returned, mash the data set and get your ultimate outcome anyway? you can aoi a write to the database in between and it won't effect the data you want
[00:23:40] <altendky> SnoopJ: my question was general so i don't have an explicit problem scenario (though i do have a pr).  but yes, the thought is that the attempt to do a1/a2 should never end up being a1/b1/a2.
[00:23:57] *** Quits: fikran (~fikran@user/fikran) (Quit: WeeChat 3.0.1)
[00:24:04] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 252 seconds)
[00:24:23] <altendky> SnoopJ: b1/a1/a2 would be fine.  they are separate async activities that could be completely independently triggered.  i just don't want them mixing db actions.
[00:24:58] <altendky> i want to be able to think about one async def without worrying what other ones might try to do to the db at 'the same time'
[00:25:01] <SnoopJ> altendky, I think you want to combine the statements in a single communication with aiosqlite then
[00:25:19] <SnoopJ> whether that's a sequence of statements (;) or chaining
[00:25:21] <Liblx> tar_xvf: oh, so i can jump over the title and only update the changing number for example? How can I do that without overwriting?
[00:25:21] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:7c23:81da:5ebd:9b10)
[00:25:31] <altendky> SnoopJ: so what's the case for transactions even existing if putting the statements in one string solves these problems?
[00:25:37] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 265 seconds)
[00:25:50] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[00:25:58] <tar_xvf> Liblx: you would have to re-write the title and everything else including the data you want to change, but that shouldn't be too difficult I think
[00:26:05] <summonner> ensuring the commit happened before you attempt a read
[00:26:11] <tar_xvf> and you could also just make the data on the very last line so you can over-write that without clearing the console
[00:26:18] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:26:52] <altendky> summonner: it may be that this topic really is completely dependent on the exact scenario and needs.  i had perhaps naively thought that 'transactions that don't lose their atomicity despite being in async' was a sufficient problem statement.  sounds like i need to think about that more.
[00:27:00] <Liblx> tar_xvf: i'll play around. thanks.
[00:27:08] <tar_xvf> no problem, best of luck Liblx
[00:27:23] <altendky> or learn more about transactions (aside from async) or something
[00:27:53] <summonner> altendky, yeah it sounds like you have an action that can only be attempted once a verified preceding step has been performed.
[00:28:26] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:28:27] *** Joins: jiffe (~jiffe@mail.nsab.us)
[00:28:32] <tar_xvf> could you solve that using something like go-lang channels? One process that recieves read and write requests in the order they were made
[00:29:05] <altendky> summonner: the code is public and i literally do not have an exact situation being discussed.  :]  i was thinking i would start with a general approach to not mixing things and only if there were performance issues or such would i then have to go and think through the nuanced details of each scenario.
[00:29:45] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[00:29:46] <SnoopJ> altendky, AIUI transactions as an abstraction exist so that the DB can do write locks where it needs them. But I'm more than a little out of my comfort zone, maybe I've made a hash of it
[00:30:53] <SnoopJ> I guess it's not just write locks, it's r/w
[00:30:55] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Remote host closed the connection)
[00:31:53] <altendky> "SQLite supports multiple simultaneous read transactions coming from separate database connections, possibly in separate threads or processes, but only one simultaneous write transaction." https://www.sqlite.org/lang_transaction.html sounds like the write transaction side is what i would expect.  you can't have different connections interleaving activity.
[00:32:14] *** Joins: emf (~emf@2620:10d:c090:400::5:2507)
[00:32:25] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[00:32:27] <altendky> with reads it doesn't really matter if they interleave.
[00:32:41] <SnoopJ> from separate connections, AIUI
[00:33:52] <SnoopJ> (I guess you couldn't do it simultaneously from one connection, heh)
[00:35:43] *** Quits: Liblx (~Alex@ip4d15ff09.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.2)
[00:36:28] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[00:36:42] <SnoopJ> altendky, I can't find corresponding discussion in aiosqlite, but sqlite3 has some reading that may be relevant to what you're pondering over: https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions
[00:37:07] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[00:38:13] *** Quits: cemotyz09 (~cemotyz09@2603-8081-6300-9e12-8024-4278-4019-3e5b.res6.spectrum.com) (Quit: Client closed)
[00:38:36] <altendky> https://github.com/omnilib/aiosqlite/issues/19#issuecomment-440838630
[00:38:53] <altendky> SnoopJ: yeah, i started into reading there and sqlite directly.  definitely more reading to be done though
[00:38:53] *** Quits: elena_re (~elena@31.173.82.95) (Read error: Connection reset by peer)
[00:39:40] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[00:39:46] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[00:40:09] <SnoopJ> altendky, that reply seems basically like what you were saying about the safety of separate connections, although I think you can still get A1, B, A2 that way *unless* A explicitly builds a transaction that includes both A1, A2
[00:40:36] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Client Quit)
[00:41:11] <SnoopJ> (either by cramming them into the same string, or by the other means described in those docs)
[00:42:00] *** Quits: Akuli (~Akuli@213.216.211.143) (Quit: Leaving)
[00:42:54] <altendky> SnoopJ: yeah, you would still use a transaction in a.  the separate connection means you don't have to worry about other async tasks interleaving their statements into your transaction.
[00:42:56] <SnoopJ> I think if you shared a connection you wouldn't really have the not-the-same-string options without your own synchronization: you'd very possibly have A and B trying to BEGIN while the other transaction is still being built
[00:43:07] <altendky> and the transaction makes you safe from other processes doing the same.
[00:43:32] <SnoopJ> yea, as long as you do take care to put A1, A2 into the same transaction (AIUI you'd nominally get them as isolated transactions?)
[00:43:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:44:36] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[00:44:51] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Remote host closed the connection)
[00:44:55] <altendky> if you have a unique connection
[00:45:07] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:30] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[00:45:44] *** Quits: emf (~emf@2620:10d:c090:400::5:2507) (Quit: emf)
[00:46:40] <SnoopJ> what I mean is that `execute(A1_stmt); execute(A2_stmt)` would give two self-contained transactions that BEGIN/END in the obvious place (I haven't looked into the details of `autocommit` mode though)
[00:46:43] <altendky> `async with self.safe_transaction() as cursor:` or whatever to get a connection and commit at the end and just do any silly inefficient thing you want in the middle with impunity...  though yeah, there's definitely more layers to this
[00:47:14] *** Joins: eniac (~eniac@gateway/tor-sasl/eniac)
[00:47:14] <altendky> if you explicitly BEGIN then you override any existing autocommitting i think and manually take control of your transaction
[00:47:39] <SnoopJ> oh, `END TRANSACTION` rather than just `END`
[00:48:54] *** Joins: kurfen (~kurfen@37.120.204.67)
[00:49:14] *** Joins: emf (~emf@2620:10d:c090:400::5:2507)
[00:49:15] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[00:49:27] *** Joins: Naan (~naan@user/naan)
[00:49:52] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2.1)
[00:50:08] *** Joins: elena_re (~elena@31.173.82.95)
[00:52:30] *** Quits: emf (~emf@2620:10d:c090:400::5:2507) (Client Quit)
[00:52:58] <altendky> or commit ends the transaction?  anyways, afk for a bit.  thanks all for the chat.  i'll see what i can internalize on a next pass here.
[00:53:11] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:53:41] <arinov> hi, can you please give me a couple high performance web servers which can natively host python apps like django or flask?
[00:54:33] <arinov> *recommended to start from
[00:55:29] <ssbr> arinov: idk, are uwsgi and gunicorn what you're looking for?
[00:56:13] <arinov> ssbr: i'll try them, thanks
[00:56:31] <SnoopJ> altendky, I believe (per that sqlite3 page) that transactions always end with COMMIT or END TRANSACTION (a synonym), and the sqlite3 module implicitly adds BEGIN for you, but requires you to .commit() to send the transaction-closing COMMIT
[00:56:59] <SnoopJ> correction: implicitly adds BEGIN to statements that modify the DB. I'm not really sure what's up with reads
[00:58:51] *** Quits: kurfen (~kurfen@37.120.204.67) (Quit: WeeChat 2.3)
[01:00:37] <SnoopJ> I think it's maybe just a lot of implicitness on the part of libsqlite3: "Any command that accesses the database...will automatically start a transaction if one is not already in effect. Automatically started transactions are committed when the last SQL statement finishes."
[01:02:57] *** Joins: emf (~emf@2620:10d:c090:400::5:2507)
[01:04:03] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[01:04:07] *** Joins: newpy (~newpy@2601:280:4381:1390:3d2d:8c18:191c:a64)
[01:04:27] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[01:04:29] *** Joins: djapo (~archangel@user/djapo)
[01:05:26] *** Joins: junktext (~junktext@109.201.152.161)
[01:05:51] <newpy> I made a function that does `return x, y`
[01:06:02] <newpy> if I then cast np.array(x) it's fine
[01:06:04] *** Quits: emf (~emf@2620:10d:c090:400::5:2507) (Client Quit)
[01:06:13] <SnoopJ> altendky, this message includes the code I have in mind and the whole issue looks like a good read: https://bugs.python.org/issue39457#msg384414
[01:06:28] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 252 seconds)
[01:06:47] <newpy> but if I try `return np.array(x), np.array(y)` it complains: ValueError: could not broadcast input array from shape (5,11) into shape (5)
[01:08:26] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[01:08:36] <SnoopJ> newpy, can you show us the complete error report? https://bpa.st/+python+pytb
[01:08:49] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:09:21] <newpy> SnoopJ, like this? https://paste.ee/p/97Qpq
[01:09:34] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[01:09:35] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:368:2f35:99d9:2851) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:09:53] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:11:22] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:11:29] *** Joins: cheater (~Username@user/cheater)
[01:11:32] <SnoopJ> huh, very strange traceback
[01:11:49] *** Joins: helloplsdohelp (~helloplsh@203-129-25-247.cb8119.syd.static.aussiebb.net)
[01:12:08] <helloplsdohelp> Hello! I followed https://stackabuse.com/brief-introduction-to-opengl-in-python-with-pyopengl/ but it says glutInit function is not defined. Installing packages freeglut3-dev or python3-opengl did not help. This is debian. Any hints?
[01:12:12] *** Joins: Samian (~Sami@user/samian)
[01:12:39] <SnoopJ> newpy, what are the types of x_train, y_train inside of walks()? That looks like they are some type with a strange __array__()
[01:13:01] <newpy> x_train is a list of np.arrays
[01:14:16] *** Joins: emf (~emf@2620:10d:c090:400::5:2507)
[01:14:21] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:15:08] <SnoopJ> and y_train?
[01:15:27] *** Joins: vd44 (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[01:15:27] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[01:16:31] *** Quits: BSaboia (~bsaboia@45.179.224.249) (Quit: This computer has gone to sleep)
[01:16:36] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[01:17:14] <Samian> SnoopJ  any idea why scalene would show gpu usage for np.unique ? https://imgur.com/a/sJMmMc6
[01:18:04] <SnoopJ> Samian, presumably the rest of that line includes some Tensor that lives on the GPU
[01:18:44] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:19:15] <SnoopJ> it's definitely copy-heavy and that would be really my only guess even if I couldn't see that column
[01:19:38] <SnoopJ> (unless you had some iterable object that did GPU-things when you iterate it)
[01:20:27] <Samian> it doesn't. it's line 891 here: https://github.com/facebookresearch/dlrm/blob/master/dlrm_data_pytorch.py
[01:20:47] <newpy> SnoopJ, I managed to pull out an x_train value that fails (by just returning x,y and then casting outside the function): https://bpa.st/TCNA
[01:22:16] <newpy> I think the issue is that when the np.arrays have a different number of columns, I can't cast x_train into an np.array
[01:22:24] <newpy> I can just keep it a list I think
[01:23:05] <Repiphany> What are you trying to do
[01:23:11] *** Quits: AutomatedTester (uid395371@selenium/developer/AutomatedTester) (Quit: Connection closed for inactivity)
[01:23:18] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[01:23:29] <Repiphany> horizontal/vertical/d-stacking?
[01:23:29] *** Quits: Jefren (~Jefren@208.104.190.51) (Ping timeout: 264 seconds)
[01:24:41] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:c557:3000:456f:7739) (Ping timeout: 264 seconds)
[01:25:10] <SnoopJ> newpy, yes, the problem is caused by the arrays being ragged. I thought that's what it was, but I think I may have tested it against a version of numpy that didn't require you to ask for objects explicitly.
[01:25:22] *** Joins: Jefren (~Jefren@70.35.67.130)
[01:25:24] <newpy> I guess d-stacking is what I imagined, but actually that would probably just complicate the rest of my code
[01:25:36] <newpy> I can just keep it as a list so I can grab a sample with x_train[i]
[01:25:56] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 245 seconds)
[01:26:19] <SnoopJ> based on the name of your function I would think that would make more sense, since the length of a "walk" may vary a good bit
[01:27:02] <SnoopJ> an alternative might be to choose an upper bound on walk length and store a sentinel value (NaN?) in empty slots
[01:28:00] *** Joins: y04nn (~y04nn@193.32.127.238)
[01:29:41] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 245 seconds)
[01:30:00] <stewie925> just finished my two rounds of interviews - turns out both are for python
[01:30:07] *** Joins: grooverman (~grooverma@177.95.12.14)
[01:30:23] *** Quits: Tas-sos (~Tas-sos@78-157-62.adsl.cyta.gr) (Ping timeout: 265 seconds)
[01:30:42] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[01:31:02] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[01:31:55] <aphysically> huh I just found out ffmpeg makes available xsd for their ffprobe output https://raw.githubusercontent.com/FFmpeg/FFmpeg/master/doc/ffprobe.xsd
[01:31:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:32:39] <aphysically> I guess I could write a script that converts the xsd into a typeddict in a .py file that I import
[01:33:07] <aphysically> or a stub file?
[01:33:52] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:31cf:4d74:8bdf:4bff) (Quit: Leaving)
[01:34:02] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 246 seconds)
[01:35:17] <aphysically> not entirely sure how stubs work, so I would have to learn that, and also the best location to put scripts that aren't part of your main project ;P
[01:35:28] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:35:40] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:35:54] <nomic> z.
[01:36:21] *** Joins: rapier (~marcos@170.233.159.1)
[01:38:22] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:38:52] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Quit: philipp64|work)
[01:41:30] *** Joins: Celeo (~Celeo@user/celeo)
[01:43:58] *** Quits: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:44:02] <SnoopJ> aphysically, "stub" usually means "type stub," which is just the type signatures of methods you'll find in some other software. I.e. I write a library that has a function `def f(x, y): return str(x+y)` but don't annotate it. Someone who wants to use my library with mypy writes a stub that declares `def f(x: int, y: int) -> str: ...`, and now mypy knows that this function accepts ints and produces a
[01:44:04] <SnoopJ> string.
[01:44:41] <aphysically> yeah, I'm trying to type the output of the JSON from ffprobe
[01:45:12] <aphysically> I think a stub file with the json type information might not be a good solution since the rest of my type information is already in the main module
[01:45:25] <aphysically> it's probably better to make a new module with the typing information and import or something
[01:45:31] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 252 seconds)
[01:45:31] *** Joins: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:45:51] *** Quits: prs (~Priyanshu@2409:4063:6e19:7eff::7248:8a04) (Remote host closed the connection)
[01:46:07] *** Quits: Celeo (~Celeo@user/celeo) (Client Quit)
[01:46:08] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[01:47:30] *** Joins: somlis (~somlis@user/somlis)
[01:47:34] <SnoopJ> oh, I didn't look at the link
[01:48:31] <SnoopJ> aphysically, if ffprobe can output XML, I would just use that xmlschema directly
[01:49:14] <SnoopJ> e.g. the `xmlschema` module provides .to_dict() once you've parsed something: https://pypi.org/project/xmlschema/
[01:49:52] <SnoopJ> weird that they provide an XML schema, but not a JSON schema
[01:50:07] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[01:50:25] <aphysically> but still I would need to make a typeddict for it if I wanted to make a strict mypy happy wouldn't I?
[01:50:29] <aphysically> yeah a bit odd, but eh
[01:50:35] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[01:50:58] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[01:51:00] *** Joins: Samian (~Sami@user/samian)
[01:51:05] <stewie925> hey guys - what would be a more efficient python code for `if a not = 1 and a not = 2 and not a = 3` other than `if a not in [2,3,4]`
[01:51:15] <SnoopJ> aphysically, I guess I'm a little confused about what you're doing. You want to validate runtime data with a static analysis tool, or...?
[01:51:27] <aphysically> yeah :)
[01:51:46] <aphysically> https://github.com/GBeauregard/pyffstream/blob/d6e3b5a2d0e8e032f88567a6017f1a92470f7714/src/pyffstream/ffmpeg.py#L343
[01:51:48] <aphysically> honestly this is probably fine
[01:51:50] <KirkMcDonald> stewie925: if a not in range(2, 5):
[01:51:56] <bjs> stewie925: I'm guessing you're about to change the question but `if 2 <= a <= 4`
[01:52:08] <stewie925> damn!!! right
[01:52:11] <bjs> KirkMcDonald's is better, if you really need them to be integers
[01:52:21] <KirkMcDonald> Eh, "better."
[01:52:26] <SnoopJ> aphysically, I guess you'd define a class of some sort, yea
[01:52:35] *** Quits: pycode (~pycode@2001:b07:5d28:551:f042:e75a:9bb3:ea30) (Ping timeout: 250 seconds)
[01:52:41] <aphysically> I can autogenerate it using the xsd I believe
[01:52:46] <aphysically> I just bundle a script to do it
[01:52:54] <SnoopJ> if you write that script, anyway :P
[01:52:57] <stewie925> bjs: KirkMcDonald:  thank you for the input!  that's one of the questions they asked in the interview
[01:53:06] <SnoopJ> I have used a library that did the equivalent thing for building classes from jsonschema before
[01:53:11] <bjs> stewie925: ah, hope it went well
[01:53:13] <SnoopJ> (it wasn't *great*, though)
[01:53:14] <stewie925> I guess my answer is correct but NOT efficient enough
[01:53:29] <SnoopJ> stewie925, "efficient enough" outside of a specific context is a grammatical error
[01:53:35] <aphysically> if I do write such a script I should look into using pydantic instead of a typeddict though maybe
[01:53:41] *** Joins: eniac_ (~eniac@gateway/tor-sasl/eniac)
[01:53:48] <bjs> stewie925: also mine is backwards I missed the not :P
[01:53:51] <stewie925> SnoopJ: hehehe
[01:54:08] <SnoopJ> stewie925, very serious! a lot of asymoptotically-efficient things perform absolutely abysmally for typical sizes
[01:54:19] <bjs> stewie925: but in practice I'd probably write what you did,  `if a not in [some things]` it might even actually be the fastest if there's only 2-3 things
[01:54:45] <aphysically> SnoopJ: yeah a lot of regex implementations don't use the state machine right?
[01:54:56] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[01:54:56] <aphysically> cause even though it's O(n) it's not necessarily great for small runs
[01:55:03] <SnoopJ> aphysically, not all regex are finite automata, if that's what you mean
[01:55:05] <bjs> aphysically: lots of regex libraries support regexes that aren't even regular :(
[01:55:10] <aphysically> yeah
[01:55:15] <SnoopJ> are mappable to*
[01:55:16] <stewie925> I hate regex
[01:55:29] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[01:55:45] *** Joins: cheater (~Username@user/cheater)
[01:55:51] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[01:55:54] <SnoopJ> the short version is that when you start adding lookaround to the problem, you break "regular" very quickly and break the desirable toolset :)
[01:56:32] <SnoopJ> using a list here has one benefit that isn't related to performance, but is important to maintenance: you can change your mind on what values you test, and even which types.
[01:56:54] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[01:56:55] *** Quits: eniac (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[01:57:34] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[01:58:16] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[01:59:35] *** Joins: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net)
[01:59:51] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[01:59:58] *** Joins: demirok (~bell@user/demirok)
[02:00:11] *** Joins: portalrat (~portalrat@user/portalrat)
[02:00:55] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[02:02:17] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[02:02:52] <bjs> I'd like to know what Python's `re` library actually is though
[02:02:58] <bjs> i doubt it's regular
[02:03:01] <aphysically> where would such a script go? in a scripts directory in the root of my project dir or something?
[02:03:18] <SnoopJ> aphysically, I usually put something like this in tools/
[02:03:22] <phy1729> bjs: even POSIX's Basic Regular Expressions aren't regular
[02:03:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:03:52] <aphysically> ah I think I've seen tools/ before yeah
[02:03:55] <SnoopJ> bjs, it used to barf hard on some inputs: https://swtch.com/~rsc/regexp/regexp1.html
[02:03:59] <SnoopJ> aphysically, CPython uses it :)
[02:04:14] <SnoopJ> well, it uses Tools/ but same thing ;)
[02:04:34] <bjs> stuff like r"(?P<ab>(a|b)+)x(?P=ab)" is surely not a regular language
[02:04:43] <bjs> but can re do matching brackets?
[02:05:11] <bjs> the above isn't regular because it's infinite but can't be pumped, I guess.
[02:06:10] <bjs> SnoopJ: efficient regex implementations is something I've never really looked at before
[02:06:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[02:06:35] <bjs> I guess they mostly lie somewhere between regular and context-free?  although they have lookaheads which aren't usually context-free...
[02:06:37] <SnoopJ> bjs, it's a great read that cleared up a lot about regex in general for me, but is at this point woefully out of date w/r/t its claims about Python.
[02:06:55] <SnoopJ> As far as the actual taxonomic classification of SRE, I have no clue :)
[02:07:00] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:07:23] *** Joins: Barones (~Barones@2804:7f3:8987:b8e9:ca77:fb84:280a:faba)
[02:07:53] * SnoopJ is only barely aware of the taxonomy itself
[02:08:40] <bjs> SnoopJ: regular is finite-state,  most programming language syntax is around context-free which only needs to keep track of a stack of previously-seen symbols to parse
[02:08:58] <bjs> regexs probably lie somewhere between,  I can't see how to build a stack out of the `re` primitives unless you can generate backrefs somehow :P
[02:09:26] <SnoopJ> I can't remember if it's capable of that cutesy prime number testing pattern
[02:09:44] <SnoopJ> (that might use backrefs)
[02:09:49] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[02:10:13] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 252 seconds)
[02:10:16] *** Joins: iogue (~iogue@gateway/tor-sasl/iogue)
[02:11:10] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Client Quit)
[02:11:33] <SnoopJ> I've always wondered about SRE's origins, it seems like it might be an interesting history.
[02:13:14] *** Joins: elias117 (~elias117@user/elias117)
[02:13:18] <elias117> guys
[02:13:20] <elias117> I got the job
[02:13:36] <SnoopJ> elias117, congrats! 🎉
[02:13:49] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:14:16] *** Quits: Organizers|Robin (~Robin_Jad@152.67.64.160) (Ping timeout: 245 seconds)
[02:14:29] <elias117> its a hige step up in pay from my old job so its pretty cool
[02:14:34] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 250 seconds)
[02:15:45] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:16:47] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[02:17:55] <elias117> thanks SnoopJ
[02:18:47] *** Joins: dre (~dre@2001:8003:c932:c301:d44a:8295:7928:835)
[02:19:53] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:21:36] <elias117> my dude
[02:21:41] <elias117> thanks for the help
[02:22:31] *** Joins: Elodin (~weechat@user/elodin)
[02:23:13] *** Joins: cmnky2 (~cmnky@user/cmnky)
[02:24:15] <stewie925> this chat room is certainly helpful
[02:26:09] *** Quits: cmnky (~cmnky@user/cmnky) (Ping timeout: 276 seconds)
[02:26:18] <stewie925> because the helpers here are all passionate about python
[02:27:09] <mefistofeles> stewie925: do you have a question about python?
[02:28:01] *** Parts: demirok (~bell@user/demirok) ()
[02:28:29] *** Quits: junktext (~junktext@109.201.152.161) (Ping timeout: 252 seconds)
[02:28:42] <mefistofeles> oh, nvm, there's context from before
[02:29:04] <stewie925> mefistofeles: not right now but I still have a ton to ask when I get there :))
[02:29:05] <mefistofeles> I thought stewie925 was going to ask something and then regreted it
[02:29:12] <mefistofeles> :)
[02:29:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[02:29:45] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[02:29:55] <elias117> what aws certification should I get
[02:30:28] <elias117> like i want to get cloud practitioner and solutions architect associate
[02:30:29] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:30:31] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[02:30:32] <elias117> but im not sure
[02:30:50] <zln> http://imgur.com/zbG9uzD How can I insert/replace values at row A with a list of tuples or objects?
[02:31:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:31:01] <zln> it's a dataframe btw
[02:31:04] <zln> :D
[02:31:13] <zln> pandas.DataFrame
[02:31:22] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:31:54] <energizer> elias117: #python-offtopic plz
[02:32:07] <stewie925> speaking of AWS,  I enrolled in Udacity fullstack course (python) and actually had some hands-on practice in AWS particularly the CloudFormation and then some
[02:32:11] <tar_xvf> elias117: also try ##aws
[02:32:26] <elias117> great idea
[02:32:33] <stewie925> :test
[02:32:59] <aphysically> SnoopJ: maybe I should first write a script to generate an initial JSON schema and then try to upstream it
[02:34:37] *** Quits: gordonjcp (~gordon@boulton.gjcp.net) (Quit: leaving)
[02:35:23] <aphysically> huh, it looks like JSON schemas are a WIP RFC https://datatracker.ietf.org/doc/html/rfc8927
[02:35:31] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 245 seconds)
[02:38:21] <aphysically> might be a barrier to upstreaming any json schema
[02:40:09] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[02:42:08] *** Joins: iflema (~ian@user/iflema)
[02:42:36] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Remote host closed the connection)
[02:43:54] *** Joins: ppw (~ppw@user/ppw)
[02:45:16] <cmnky2> if I'm adding columns to a global dataframe from within multiple threads ( each thread does some calcs, then adds a new column w/ results ) then I need to protext it with a mutex, yes ?
[02:46:08] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 246 seconds)
[02:46:27] <nedbat> cmnky2: if dataframes don't promise to be threadsafe, then yes, synchronize it somehow
[02:47:11] *** Joins: Ivii (~Ivyy@ppp-46-244-232-122.dynamic.mnet-online.de)
[02:48:05] *** Joins: Wulf (~Wulf@user/wulf)
[02:48:16] <ppw> is there a python package that takes in a list of edges and plots out a directed graph?
[02:49:06] <ppw> graphviz, I guess
[02:49:11] <KirkMcDonald> ppw: There may be, but the gold standard in this area is GraphViz.
[02:49:11] <SnoopJ> yea, graphviz is pretty good
[02:49:30] <KirkMcDonald> Whenever I need to do this, I always seem to just end up generating a dot file.
[02:49:44] <ppw> does it play nice by making sure all the text is visible and stuff?
[02:49:44] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[02:49:53] <grym> it tries real hard
[02:49:56] <KirkMcDonald> Yes.
[02:49:57] <grym> (usually, yes)
[02:50:08] <ppw> good to know. OK, I'll give it a shot.
[02:50:20] <ppw> thanks
[02:50:20] <grym> dot/graphviz is pretty foundational because it's pretty great
[02:50:50] *** Joins: emf_ (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05)
[02:50:59] <SnoopJ> there are a variety of ways graphviz will layout a rendering. They're described here: https://www.graphviz.org/docs/layouts/
[02:51:11] <KirkMcDonald> I was actually working on a project just recently in which I rendered out the label on each node *first*, then generated the dot file by providing an explicit size for each node based on that first step.
[02:51:24] <SnoopJ> but pretty much everything that does graphs well at all is probably going to include DOT in there somewhere, it's a sensible grammar.
[02:51:32] <KirkMcDonald> Then went back and filled in the actual labels after the fact.
[02:51:40] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:52:05] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:52:43] <KirkMcDonald> In other words, I was trying to just use graphviz for layout, while rendering stuff myself (as an SVG) as much as I could.
[02:53:10] *** Quits: emf (~emf@2620:10d:c090:400::5:2507) (Ping timeout: 260 seconds)
[02:53:30] <KirkMcDonald> Since I wanted, like, images and other fancy junk in there.
[02:54:49] *** Quits: mdw (~root@159.65.86.163) (Ping timeout: 252 seconds)
[02:56:22] <SnoopJ> aphysically, that document describes JTD, not JSONSchema. Does look neat. JSONSchema is versioned and you just pick the version you care about (it used to be a draft number, now it's a date reference). Latest is: https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00
[02:56:43] <SnoopJ> (json-schema.org is also a useful place to have bookmarked)
[02:57:15] <KirkMcDonald> I also just wrote up a JSON schema in this same project, heh.
[02:57:32] <aphysically> why are there competing json schemas D:
[02:57:45] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[02:57:52] <SnoopJ> aphysically, they aren't really competing, JSONSchema doesn't explicitly target codegen
[02:57:54] <KirkMcDonald> Clearly what we need is a JSON schema schema.
[02:57:58] <SnoopJ> (JTD does)
[02:58:24] *** Joins: mdw (~root@159.65.86.163)
[02:58:57] <SnoopJ> KirkMcDonald, the spec calls those meta-schemas :D
[02:59:06] <aphysically> well, I *am* generating code after all
[02:59:29] <SnoopJ> aphysically, right, JTD would be a better fit to your task. Just wanted to clarify that what you were looking at was not what you thought you were looking at.
[02:59:29] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-153-142.red.bezeqint.net)
[03:00:01] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[03:00:21] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[03:00:25] *** Joins: emerent_ (~quassel@p200300cd574855a9ba27ebfffed28a59.dip0.t-ipconnect.de)
[03:00:25] *** emerent is now known as Guest6151
[03:00:25] *** emerent_ is now known as emerent
[03:00:41] *** Quits: Guest6151 (~quassel@p200300cd574855a2ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[03:03:45] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[03:07:54] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:09:37] <Julian> nedbat: is your towncrier thing recommended for use?
[03:09:48] <Julian> nedbat: I assume you're using it yourself at least?
[03:10:59] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[03:13:28] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[03:14:16] <newdimension> urllib.parse.urlencode encodes spaces as "+" instead of %20? Does it take an argument that changes its behavior?
[03:14:41] *** Quits: rapier (~marcos@170.233.159.1) (Ping timeout: 252 seconds)
[03:15:30] *** Quits: SallyAhaj (sallyahaj@user/sallyahaj) (Quit: ZNC 1.8.2 - https://znc.in)
[03:15:32] <newdimension> To answer my own question. It's urllib.parse.urlencode(getVars, quote_via=urllib.parse.quote)
[03:18:08] <nedbat> Julian: i am using it lightly
[03:18:27] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[03:19:21] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:20:06] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:20:40] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:5435:afc4:e6b4:ce6b) (Ping timeout: 252 seconds)
[03:21:11] <Julian> nedbat: would you recommend it over the other options?
[03:21:20] <Julian> I assume you don't use towncrier because of the development stalling issues?
[03:21:23] <Julian> Or were there other things?
[03:21:36] <nedbat> Julian: towncrier was over-opinionated.
[03:21:59] <nedbat> Julian: i started scriv thinking i could get my workplace to use it.  I haven't tried to get that to happen, but i knew it would have to be more flexible than towncrier.
[03:22:07] <nedbat> Julian: and the development did not seem active
[03:22:17] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:23:06] <Julian> got it
[03:23:39] *** Joins: zebrag (~chris@user/zebrag)
[03:24:33] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[03:26:13] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:26:35] *** Joins: travaldo (~travaldo@159.203.88.148)
[03:28:05] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.9.x-nightly-20210409-e0ffdddd - https://znc.in)
[03:28:26] *** Joins: icy (~icy@user/icy)
[03:28:42] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:e57a:61d6:58d6:19aa)
[03:30:31] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[03:30:56] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[03:35:12] *** Quits: emf_ (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05) (Quit: emf_)
[03:38:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:38:46] *** Joins: Julian (~tos9@python/site-packages/Julian)
[03:40:01] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[03:40:11] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[03:40:29] *** Quits: cmnky2 (~cmnky@user/cmnky) (Remote host closed the connection)
[03:40:45] *** Joins: cmnky2 (~cmnky@user/cmnky)
[03:40:47] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[03:41:08] *** Joins: alzgh (~alzgh@user/alzgh)
[03:42:13] *** Quits: ppw (~ppw@user/ppw) (Quit: Ping timeout (120 seconds))
[03:42:45] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[03:43:06] *** Joins: ali1234 (~al@user/ali1234)
[03:43:13] *** Joins: mickey (~user@user/mickey)
[03:44:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:45:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:46:15] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:c926:49f8:c5f0:9de0) (Quit: Leaving)
[03:48:02] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[03:48:24] *** Joins: elkclone (~elkclone@user/elkclone)
[03:49:09] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:52:17] *** Quits: flokuehn (~flokuehn@mue-88-130-54-143.dsl.tropolys.de) (Ping timeout: 264 seconds)
[03:53:18] *** Quits: Barones (~Barones@2804:7f3:8987:b8e9:ca77:fb84:280a:faba) (Read error: Connection reset by peer)
[03:53:45] *** Joins: flokuehn (~flokuehn@mue-88-130-54-078.dsl.tropolys.de)
[03:55:12] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[03:55:23] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 252 seconds)
[03:55:56] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:56:50] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[04:01:40] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[04:02:30] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:7c23:81da:5ebd:9b10) (Ping timeout: 256 seconds)
[04:02:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:06:15] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[04:06:56] *** Quits: rigid- (~rigid@user/rigid) (Ping timeout: 252 seconds)
[04:07:24] *** Joins: c10l (~c10l@user/c10l)
[04:08:32] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:10:45] *** Quits: Ivii (~Ivyy@ppp-46-244-232-122.dynamic.mnet-online.de) (Remote host closed the connection)
[04:11:23] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[04:11:44] *** Joins: rigid (~rigid@user/rigid)
[04:12:12] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[04:12:40] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Client Quit)
[04:14:16] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[04:14:35] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[04:16:21] *** Joins: Fiji (~Fiji@user/fiji)
[04:16:46] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2.1)
[04:18:46] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:20:14] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:21:13] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 250 seconds)
[04:26:15] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[04:26:57] *** Joins: tg (~tg@rockylinux/infra/tg)
[04:27:01] *** Joins: nagualcode (~nagualcod@181.221.140.182)
[04:27:11] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 245 seconds)
[04:27:11] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 245 seconds)
[04:28:15] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 265 seconds)
[04:28:45] <nagualcode> how do I print the color value, from this type of nested json {‘volvo’:{‘color’:’black’, ‘engine’:’petrol’}}
[04:29:36] <nagualcode> for cars in json:    print(cars[‘color’] )     returns:  TypeError: string indices must be integers
[04:30:30] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:17] <zln> is it valid to call a function in parameter list to assign to a kwarg?
[04:31:31] <zln> well, I could just test >D
[04:31:34] <zln> nv
[04:31:44] <Repiphany> nagualcode: That's not valid json, should have double quotes
[04:32:09] <Repiphany> You need to convert from a string to a python dict with `json.loads(json_str)` or something
[04:32:48] <nagualcode> yep, it is double quoted
[04:33:24] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[04:33:29] *** Quits: newpy (~newpy@2601:280:4381:1390:3d2d:8c18:191c:a64) (Quit: Leaving)
[04:33:33] <nagualcode> it is *     ,     if i do :    for car in cars:  print(car)      I get  volvo, audio, ferrari, e so on…. But I dont know how to print the nested values
[04:34:16] <Repiphany> cars['volvo']['color']
[04:34:36] *** Joins: Atque (~Atque@user/atque)
[04:35:05] <Repiphany> `for ... in dict` only loops over the keys, not the dict items
[04:35:30] *** Joins: vlm (~vlm@user/vlm)
[04:35:57] <nagualcode> it is possible to loop ouver dict items?
[04:36:01] *** Joins: RoyK^ (~roy@user/royk)
[04:36:59] <Repiphany> `for key, value in dict.items(): print(key, value)`
[04:36:59] <zln> test this for your data, donno if it will work :p for keys in dict: print (f"{keys}: {keys.values()}")
[04:37:03] <nagualcode> I figured out, will use the key as varibles, thanks
[04:37:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[04:39:08] <zln> or as Repiphany but you need to add print(key, value.items()) since your first level values are dicts ?
[04:39:23] *** Quits: RoyK (~roy@user/royk) (Ping timeout: 252 seconds)
[04:42:34] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:43:00] *** Joins: srhm (~srhm@user/srhm)
[04:43:55] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[04:45:04] *** Joins: RoyK (~roy@user/royk)
[04:45:18] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:47:04] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:e57a:61d6:58d6:19aa) (Quit: CodePoint)
[04:48:11] *** Quits: RoyK^ (~roy@user/royk) (Ping timeout: 252 seconds)
[04:48:40] *** Quits: brettgilio (~brettgili@x-node.gq) (Remote host closed the connection)
[04:49:43] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[04:52:33] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:53:09] *** Joins: califax- (~califax@user/califx)
[04:53:45] *** Joins: Samian (~Sami@user/samian)
[04:55:38] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 246 seconds)
[04:55:50] *** Joins: brabrax (~brabrax@user/brabrax)
[04:56:18] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:56:19] *** califax- is now known as califax
[04:58:51] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[04:59:42] *** Quits: Samian (~Sami@user/samian) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:09] *** Joins: Samian (~Sami@user/samian)
[05:00:32] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[05:01:54] *** Joins: vicfred (~vicfred@user/vicfred)
[05:03:45] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[05:03:53] *** Quits: Samian (~Sami@user/samian) (Client Quit)
[05:04:18] *** Quits: nagualcode (~nagualcod@181.221.140.182) (Quit: nagualcode)
[05:04:18] *** Quits: GravitaZ (~GravitaZ2@64-203-169-228.unassigned.ntelos.net) (Ping timeout: 260 seconds)
[05:05:16] *** Joins: Trevor (~TrevorLan@user/trevorlaneray)
[05:06:26] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[05:08:57] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[05:12:01] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:14:00] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-49f9-d8e9-21a2-a096.res6.spectrum.com) (Quit: jarthur)
[05:15:26] *** Joins: srhm (~srhm@user/srhm)
[05:16:37] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:17:11] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 245 seconds)
[05:19:01] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 252 seconds)
[05:19:26] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:19:53] *** Joins: r1ch (~r1ch@user/r1ch)
[05:21:44] <altendky> SnoopJ: it's a bit troubling that there's still debate on this topic...  (regarding your bpo link)
[05:24:31] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[05:25:42] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[05:26:09] *** lukedashjr is now known as luke-jr
[05:26:59] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[05:27:18] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:32:55] *** Quits: eniac_ (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[05:33:09] *** Joins: eniac_ (~eniac@gateway/tor-sasl/eniac)
[05:33:26] *** Quits: LiftLeft (~LiftLeft@172.98.92.64) (Ping timeout: 245 seconds)
[05:33:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:33:57] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[05:34:42] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[05:34:56] *** Quits: SallyAhaj_ (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[05:35:22] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[05:36:07] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 240 seconds)
[05:38:35] *** SallyAhaj_ is now known as SallyAhaj
[05:38:50] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-153-142.red.bezeqint.net) (Ping timeout: 256 seconds)
[05:45:35] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 265 seconds)
[05:47:43] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:9de6:7cb1:acca:d016) (Read error: Connection reset by peer)
[05:48:28] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[05:54:22] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[05:55:02] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[05:59:21] *** Joins: LiftLeft (~LiftLeft@172.98.92.26)
[06:00:01] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[06:00:03] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Remote host closed the connection)
[06:00:06] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[06:00:12] *** Joins: Dotz0cat_ (~Dotz0cat@h27.174.40.162.dynamic.ip.windstream.net)
[06:01:28] *** Quits: Dotz0cat (~Dotz0cat@h171.119.90.75.dynamic.ip.windstream.net) (Ping timeout: 268 seconds)
[06:01:28] *** Dotz0cat_ is now known as Dotz0cat
[06:06:43] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[06:11:22] *** Joins: cyphase (~cyphase@user/cyphase)
[06:13:55] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[06:14:06] *** Joins: skered (~dereks@user/skered)
[06:15:56] *** Quits: gitly (~gitly@85.255.237.14) (Ping timeout: 245 seconds)
[06:16:54] <skered> For a socketserver TCPServer the TCPServer() handler is exected on a per request basis... when a client disconnects does the handler's __del__ get called?
[06:18:16] *** Joins: gitly (~gitly@148.252.128.244)
[06:26:04] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[06:27:34] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:28:37] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[06:29:21] *** Joins: nomic (~nomic@185.192.69.207)
[06:30:07] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Client Quit)
[06:32:29] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:33:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:34:15] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:34:28] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:36:12] *** Quits: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net) (Remote host closed the connection)
[06:36:27] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[06:37:01] <k_sze> Not strictly Python, but the documentation for urllib.parse.urlparse gives this pattern: 'scheme://netloc/path;parameters?query#fragment'
[06:37:21] <k_sze> I don't remember ever seeing the 'parameters' part in the wild. Does anybody know of a real world usage?
[06:38:11] *** Joins: iflema (~ian@user/iflema)
[06:39:47] *** Joins: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net)
[06:40:50] *** seednode3 is now known as seednode
[06:42:09] <energizer> k_sze: https://stackoverflow.com/a/40768572/15396299
[06:43:06] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[06:44:07] <k_sze> energizer, I don't think that's quite the same thing? That SO question is asking about the semicolon as a separator *in* the query string. The one in the urllib.parse.urlparse documentation is about some parameters *before* the query string.
[06:44:18] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[06:45:24] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 250 seconds)
[06:45:36] <energizer> k_sze: maybe. i dont think that's what it should have meant https://datatracker.ietf.org/doc/html/rfc3986
[06:46:30] <k_sze> Yeah, seems to be described here: https://datatracker.ietf.org/doc/html/rfc3986#section-3.3
[06:47:49] *** Joins: lethu (~lethu@user/lethu)
[06:48:09] <k_sze> Apparently it's also called a "matrix parameter" and it's *scoped* the path section.
[06:48:40] <k_sze> Some libraries can handle those parameters in the middle of the url, but urllib apparently can't.
[06:49:06] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[06:49:24] *** Joins: nomic (~nomic@185.192.69.207)
[06:50:59] *** Quits: tar_xvf (~tar@c-76-116-112-52.hsd1.nj.comcast.net) (Quit: Buh bye)
[06:51:22] <k_sze> e.g. JAX-RS for Java has partial support, although it doesn't do proper scoping so a URL like /mercedes/e55;color=black/2006/interior;color=tan would be ambiguous.
[06:51:22] *** Quits: elena_re (~elena@31.173.82.95) (Read error: Connection reset by peer)
[06:52:46] <energizer> there's hyperlink.rtfd.io
[06:54:02] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[06:54:59] *** Quits: et (~et@user/et) (Quit: ZNC 1.8.0 - https://znc.in)
[06:55:26] *** Joins: et (~et@user/et)
[06:55:31] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:56:46] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 245 seconds)
[06:56:46] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 245 seconds)
[06:56:46] *** jmiehe1 is now known as jmiehe
[06:57:49] *** Joins: hexenbane (~hexenbane@2806:2f0:91a1:73a8:ee60:8b6a:366b:38d7)
[07:00:27] <skered> Ok.  I think I found the answer to my question.  I need to define finish(self) and do my cleanup and call super().finish()?
[07:04:11] *** Joins: eniac__ (~eniac@gateway/tor-sasl/eniac)
[07:04:20] *** Quits: eniac_ (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[07:06:40] *** Quits: vd44 (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[07:06:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[07:07:36] *** Joins: Fiji (~Fiji@user/fiji)
[07:08:22] *** Quits: iogue (~iogue@gateway/tor-sasl/iogue) (Quit: iogue)
[07:08:54] *** Quits: eniac__ (~eniac@gateway/tor-sasl/eniac) (Ping timeout: 276 seconds)
[07:11:08] *** Quits: Trevor (~TrevorLan@user/trevorlaneray) (Ping timeout: 265 seconds)
[07:16:08] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 252 seconds)
[07:16:27] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:17:23] *** Joins: pankid (~quassel@pankid.club)
[07:20:20] <SnoopJ> altendky, I think the debate there was *mostly* about the proposed change to the meaning of the `autocommit` parameter in the module, but it did seem like there was some lack of clarity on exactly how this works at the libsqlite3 level
[07:20:40] *** Quits: r1ch (~r1ch@user/r1ch) (Quit: bye!)
[07:22:11] *** Quits: LiftLeft (~LiftLeft@172.98.92.26) (Ping timeout: 252 seconds)
[07:26:58] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com)
[07:29:17] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 246 seconds)
[07:29:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[07:29:41] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[07:31:18] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:9de6:7cb1:acca:d016)
[07:35:49] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:14] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[07:37:53] *** Joins: LiftLeft (~LiftLeft@172.98.80.38)
[07:39:47] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[07:40:08] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[07:40:43] *** Quits: p-i-_ (~Ohmu@223.206.71.80) (Remote host closed the connection)
[07:41:18] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[07:43:50] *** Joins: kib (~kib@user/kib)
[07:44:22] *** Joins: upsala (~zcb@185.213.155.160)
[07:45:30] *** Quits: lalilulelo (~lalilulel@2804:14d:7680:8ed4:943f:1af5:86eb:a6cf) (Read error: Connection reset by peer)
[07:47:32] *** Joins: Vonter (~Vonter@user/vonter)
[07:48:01] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 245 seconds)
[07:48:25] *** Joins: qlixed (~qlixed@181.44.129.13)
[07:48:25] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[07:52:04] *** Joins: teut (~teut@182.69.68.230)
[07:59:24] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[08:03:51] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 245 seconds)
[08:04:27] *** Quits: ckdCreations (~ckdCreati@147.55.133.135) (Read error: Connection reset by peer)
[08:04:46] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:04:54] *** Joins: wyclif (~wyclif@user/wyclif)
[08:05:44] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[08:05:47] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[08:05:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:06:26] *** Quits: ska (~ska@user/ska) (Ping timeout: 250 seconds)
[08:09:46] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[08:11:19] *** Quits: emerent (~quassel@p200300cd574855a9ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[08:12:32] *** Joins: emerent (~quassel@p200300cd574855a9ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:13:41] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[08:14:14] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:15:32] *** Quits: Fieldy (~no@user/fieldy) (Read error: Connection reset by peer)
[08:15:49] *** Joins: purplex_ (~purplex@user/purplex)
[08:16:35] *** Quits: purplex (~purplex@user/purplex) (Ping timeout: 260 seconds)
[08:16:46] *** purplex_ is now known as purplex
[08:21:34] *** Joins: Guddu (~Guddu@190.84.88.92)
[08:23:24] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[08:23:34] *** Joins: pdjprogrammer (~pdjprogra@24.14.26.52)
[08:26:18] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[08:27:35] <sunny93> Why sqlalchemy session.merge is so slow, 500 records, takes about 10s ?
[08:27:57] <sunny93> session.add is fast. But I need upsert.
[08:28:20] *** Joins: stranac (~stranac@195.29.239.126)
[08:29:37] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[08:33:56] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:35:01] *** Quits: hexenbane (~hexenbane@2806:2f0:91a1:73a8:ee60:8b6a:366b:38d7) (Remote host closed the connection)
[08:37:11] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[08:40:39] *** Joins: Antioch (Antioch@gateway/vpn/protonvpn/antioch)
[08:41:29] *** Quits: Antioch (Antioch@gateway/vpn/protonvpn/antioch) (Client Quit)
[08:42:12] *** Joins: Antioch (Antioch@gateway/vpn/protonvpn/antioch)
[08:42:55] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[08:43:13] *** Quits: Antioch (Antioch@gateway/vpn/protonvpn/antioch) (Client Quit)
[08:44:39] *** Joins: lazerlapin (~lazerlapi@ad001129.dynamic.ppp.asahi-net.or.jp)
[08:45:35] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:395e:a5e0:4cb1:5563)
[08:47:26] *** Quits: kib (~kib@user/kib) (Ping timeout: 252 seconds)
[08:47:36] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[08:48:01] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[08:49:19] *** Joins: kib (~kib@user/kib)
[08:51:40] *** Joins: trinity (~marvin@user/trinity)
[08:55:32] *** Joins: Darkfoe (sid402081@id-402081.helmsley.irccloud.com)
[08:57:00] *** Quits: kib (~kib@user/kib) (Read error: Connection reset by peer)
[09:01:05] *** Joins: Huitzilopochtli (~ronnie@45.64.220.161)
[09:01:36] *** Parts: trinity (~marvin@user/trinity) ()
[09:03:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:04:29] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[09:05:27] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:7c23:81da:5ebd:9b10)
[09:05:46] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:7c23:81da:5ebd:9b10) (Client Quit)
[09:10:45] *** Joins: canarts (~stranac@195.29.239.126)
[09:11:09] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:11:58] *** Joins: kib (~kib@user/kib)
[09:12:52] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:13:01] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 245 seconds)
[09:16:37] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:7198:69bc:11b9:2f9d)
[09:16:43] *** Andrew_ is now known as Andrew
[09:20:19] *** Quits: Timrit (~scott@047-012-066-084.res.spectrum.com) (Ping timeout: 252 seconds)
[09:20:26] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[09:22:50] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:7c23:81da:5ebd:9b10)
[09:23:04] *** Quits: Guddu (~Guddu@190.84.88.92) (Ping timeout: 252 seconds)
[09:23:26] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[09:23:34] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[09:23:51] *** Joins: mickey (~user@user/mickey)
[09:30:57] *** Joins: rendar (~rendar@user/rendar)
[09:32:16] *** Quits: _xor (~xor@74.215.232.67) (Quit: brb)
[09:32:37] *** Joins: _xor (~xor@74.215.232.67)
[09:34:07] *** Parts: teut (~teut@182.69.68.230) ()
[09:35:53] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:37:29] *** Quits: Jefren (~Jefren@70.35.67.130) (Ping timeout: 252 seconds)
[09:37:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:38:34] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Client Quit)
[09:39:40] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:39:51] *** Joins: manti7 (~manti7@176.10.104.94)
[09:41:20] *** Joins: Tireos (~Tireos@91.223.118.131)
[09:43:33] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Quit: Konversation terminated!)
[09:44:00] *** Joins: chenqisu12 (~uehca@183.217.200.123)
[09:44:37] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Read error: Connection reset by peer)
[09:44:50] *** Quits: purplex (~purplex@user/purplex) (Ping timeout: 265 seconds)
[09:45:00] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[09:45:17] *** chenqisu12 is now known as chenqisu1
[09:45:32] *** chenqisu1 is now known as chenqisu12
[09:45:33] *** Joins: purplex (~purplex@user/purplex)
[09:45:44] *** Quits: canarts (~stranac@195.29.239.126) (Ping timeout: 252 seconds)
[09:46:21] *** Joins: ExeciN (~ExeciN@user/nicexe)
[09:46:41] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:18] *** Joins: seednode (~seednode@user/seednode)
[09:48:20] *** Quits: chenqisu12 (~uehca@183.217.200.123) (Quit: Leaving)
[09:48:50] *** Joins: carl- (~carl-@185.103.188.130)
[09:51:05] *** Joins: chenqisu12 (~xirndc@183.217.200.123)
[09:52:53] *** Quits: LiftLeft (~LiftLeft@172.98.80.38) (Ping timeout: 252 seconds)
[09:53:33] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:53:54] <Wulf> Good Morning. How to fix this code? https://ideone.com/yvs8X9  It should print 0..9 instead of only 9.
[09:55:34] *** Joins: ubert (~Thunderbi@178.115.55.159.wireless.dyn.drei.com)
[09:57:08] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[09:58:14] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 250 seconds)
[09:59:31] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[09:59:54] *** Joins: Jefren (~Jefren@70.35.67.130)
[09:59:55] <energizer> Wulf: one awkward but standard solution is https://bpa.st/3JSA
[10:00:00] <energizer> (line 5)
[10:00:54] <jinsun> https://docs.python-guide.org/writing/gotchas/#late-binding-closures
[10:01:18] <jinsun> that has 2 solutions
[10:02:29] <energizer> "Sometimes you want your closures to behave this way. Late binding is good in lots of situations." [citation needed]
[10:05:19] <Wulf> energizer: thanks. Ugly, but should get the job done
[10:07:41] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[10:09:00] *** Joins: eniac__ (~eniac@gateway/tor-sasl/eniac)
[10:09:04] *** Joins: szymon (~ugh@staticline-31-183-189-254.toya.net.pl)
[10:09:50] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:12:42] <jinsun> energizer: if I have a global variable x, and I use that in my function, I want it to be the value at the time of function call, not at the time of definition, the same thing happens with a def inside a def, x is inside the outer def instead of global
[10:13:50] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 265 seconds)
[10:13:51] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 245 seconds)
[10:13:55] *** Joins: Timrit (~scott@047-012-066-084.res.spectrum.com)
[10:14:12] *** Joins: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de)
[10:14:30] *** Joins: pycode (~pycode@2001:b07:5d28:551:f600:878e:a789:f994)
[10:14:49] *** Quits: km (~km@user/km) (Quit: Leaving)
[10:15:33] *** Joins: zerotypic (~zerotypic@bb220-255-52-187.singnet.com.sg)
[10:16:36] <energizer> jinsun: i guess i don't fully understand the constraints. i know in some languages it works fine
[10:17:05] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:18:22] <cluelessperson> jinsun, you can use  global keyword like:    global var
[10:18:38] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:18:39] *** Joins: kosh (~kosh@user/kosh)
[10:19:31] <jinsun> cluelessperson: I know (and only needed if I am assigning to it), I was just giving example where I would want late binding
[10:19:41] *** Quits: zerotypic (~zerotypic@bb220-255-52-187.singnet.com.sg) (Ping timeout: 245 seconds)
[10:20:03] <zln> is it valid to use 'del' with  multiple variable arguments
[10:20:14] <zln> or does it take one at a time
[10:20:16] <zln> ?
[10:20:26] <energizer> zln: what happens when you try it?
[10:20:33] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[10:20:33] <cluelessperson> I assume one at a time.
[10:20:53] <jinsun> energizer: maybe if the for loop created a new scope it would work fine (not sure)? I know many other languages create a new scope for loops and python doesn't
[10:21:22] <zln> energizer: middle of a class, haven't tried it due to code not complete. Googled it but couldn't see anything specific about num of args
[10:21:49] <The-Compiler> zln, cluelessperson: https://docs.python.org/3/reference/simple_stmts.html#the-del-statement says it takes a list of targets - but like energizer said, try it and see! You can also try things interactively in the REPL, doesn't need to be part of your script.
[10:21:51] <zln> I stick with one at a time until I test it then >)
[10:21:51] <energizer> zln: make a separate file and run it
[10:22:29] <zln> why is it so hard to find correct page of python document on google?
[10:22:34] <stewie925> hey guys, how do I tell python to read a file from the same path as my python program?
[10:22:51] <zln> one needs to scroll a couple of pages sometimes
[10:23:08] <The-Compiler> zln: I searched for "python del keyword" on Startpage and this was on the first page
[10:23:29] <The-Compiler> zln: you might like https://zealdocs.org/ (or Dash if you're on macOS)
[10:23:33] *** Joins: mrwick (~mrwick@user/mrwick)
[10:23:51] <zln> energizer: The-Compiler: that's right. it's easy to test. Often thought I get extensive information when speaking with you guys :p
[10:24:00] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:24:05] <The-Compiler> hehe
[10:24:16] <energizer> >>> del __doc__, __builtins__
[10:24:33] <zln> I'll try to remember to use pydoc more :)
[10:24:40] *** Quits: gitly (~gitly@148.252.128.244) (Ping timeout: 252 seconds)
[10:25:04] <jinsun> stewie925: `pathlib.Path(__file__).parent.joinpath(filename).read_text()`
[10:25:21] <energizer> jinsun: `julia> let lst = [(()->i) for i in 1:5]; [f() for f in lst] end` does the right thing
[10:25:32] <stewie925> hi thanks, jinsun
[10:25:44] <zln> nice software The-Compiler, installing it!
[10:25:46] <stewie925> wow that's a long line :)
[10:25:47] <zln> thanks
[10:26:08] <stewie925> are you guys in OZ?
[10:26:24] <energizer> what is OZ?
[10:26:31] <stewie925> Australia
[10:26:42] *** Joins: gitly (~gitly@148.252.128.160)
[10:26:55] <stewie925> CA here and its almost midnight, and this room is still hopping
[10:27:28] <The-Compiler> stewie925: with 1200 people, you'll likely find people all over the world. I'm in Switzerland, 9am here.
[10:27:39] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[10:27:47] <stewie925> oh yeah I forgot Europe is on Earth lol
[10:27:52] <The-Compiler> :D
[10:27:56] *** Joins: brelod (~me@90.244.150.142)
[10:28:32] *** Joins: diplomatic_tyran (~Guest6@118.200.35.211)
[10:29:33] <energizer> i get the impression there's not as much asia or africa as i'd expect, but i dont really know how to check
[10:30:08] <stewie925> Im sure there are asians around - it should be around 12-2 pm there right now
[10:30:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[10:30:35] <energizer> well, i do know how to check, but it would be more effort than i want to put into it
[10:30:38] <stewie925> might still be too early for africans?
[10:30:45] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[10:31:16] <stewie925> they may be in the same time zone as the UK (give or take 2 hours?)
[10:33:47] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[10:34:33] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: restarting)
[10:34:50] *** Joins: litharge (litharge@libera/bot/litharge)
[10:35:18] *** ChanServ sets mode: +o litharge
[10:36:21] *** Joins: gusto (~Augustus@109.255.100.54)
[10:36:52] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[10:37:47] <jinsun> energizer: is that `i` from inside the comprehension available for use later in julia?
[10:38:03] <energizer> jinsun: no
[10:39:06] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:39:16] *** Quits: jazzy (~jaziz@2600:380:4557:1bb1:c061:3679:1363:3566) (Ping timeout: 245 seconds)
[10:39:24] *** Joins: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr)
[10:41:37] *** Quits: etienneme (~etienne@user/etienneme) (Quit: ZNC 1.8.2 - https://znc.in)
[10:42:11] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[10:42:40] *** Joins: mrhands (~mrhands@user/mrhands)
[10:42:45] <jinsun> hmm ok not in python also for listcomps, so maybe nothing to do with scopes
[10:45:08] <cluelessperson> The-Compiler, I came upon https://docs.python.org/3/tutorial/datastructures.html#the-del-statement  looking for that and bleh
[10:45:29] *** Joins: willow (~willow@bay.systems)
[10:46:39] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[10:47:51] *** Parts: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr) ()
[10:48:14] *** Quits: BigShip (~BigShip@user/bigship) (Ping timeout: 260 seconds)
[10:48:35] *** Joins: Ergo^ (~ergo@91.238.59.144)
[10:51:08] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[10:51:52] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:52:22] *** Joins: dvx (~dvx@185.63.97.64)
[10:52:37] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[10:54:32] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 252 seconds)
[10:54:55] <stewie925> goodnight from here
[10:55:01] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:7c23:81da:5ebd:9b10) (Quit: Client closed)
[10:55:20] *** Joins: Moyst (~moyst@user/moyst)
[10:58:14] *** Quits: Huitzilopochtli (~ronnie@45.64.220.161) (Remote host closed the connection)
[10:58:31] *** Joins: Huitzilopochtli (~ronnie@45.64.220.161)
[10:59:39] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[11:01:50] *** Joins: chele (~chele@user/chele)
[11:02:35] *** dcaro_away is now known as dcaro
[11:03:32] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[11:04:32] <azidhaka> Hi everyone, need an idea. I've got a list of strings and another, big string. How do i find which element of the list appears first in the big string?
[11:06:29] <energizer> i think i use regex for that
[11:06:33] <azidhaka> for example ['one', 'two', 'three'] and the big string is "zero one two three four". The function should return 'one'
[11:11:04] <leduyquang753> Iterate through the list of words of the string, when a word in the list is encountered, return it.
[11:11:58] <azidhaka> leduyquang753: clever
[11:12:59] <energizer> azidhaka: how long are the list and the text?
[11:13:07] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[11:13:14] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[11:13:43] <azidhaka> energizer: the list of less than 20 members, the text can be 200-300 words long
[11:14:04] <azidhaka> i was thinking about indexing the locations and getting the lowest number
[11:14:30] <energizer> yeh i'd probably just go ahead and loop it. quadratic but whatever
[11:15:49] *** Quits: aead (~aead@user/aead) (Quit: ZNC - https://znc.in)
[11:15:49] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[11:16:40] *** Joins: jkl (~jkl@user/jkl)
[11:17:06] <leduyquang753> It's linear.
[11:17:22] *** Joins: aead (~aead@user/aead)
[11:17:39] <Widdershins> regex is a good solution to this either way
[11:17:58] <leduyquang753> Nope, it's overkill and slower.
[11:18:05] <Widdershins> have you tested that
[11:18:33] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[11:18:37] <leduyquang753> No need to, it's quite obvious.
[11:18:44] <Widdershins> it's very much not
[11:19:14] *** Joins: shad (~shad@user/shad)
[11:19:19] <Widdershins> finite state automata are an excellent way to solve this problem, and regex is a very simple way to build a basic one with preexisting tools
[11:19:44] <leduyquang753> Simple way yes, but efficient no.
[11:19:48] *** Joins: rsx (~dummy@ppp-188-174-128-50.dynamic.mnet-online.de)
[11:19:53] <Widdershins> what's inefficient about it
[11:19:53] <energizer> leduyquang753: can you explain how you're thinking of it? the loop seems quadratic to me
[11:20:02] <leduyquang753> You can put the word list to find into a set.
[11:20:08] <energizer> and the regex seems definitely efficient
[11:20:19] <Widdershins> leduyquang753: what if a word appears as a substring of another word
[11:20:21] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[11:20:42] <leduyquang753> I am assuming finding whole words here.
[11:20:47] <Widdershins> you are.
[11:20:50] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[11:20:56] <Widdershins> that was never specified
[11:21:16] <Widdershins> in fact the problem says nothing about words at all
[11:21:19] <leduyquang753> "words long"
[11:21:41] <azidhaka> they are names in email bodies
[11:21:59] *** Quits: greknod2 (~grek@ppp121-45-135-247.bri-pow-que-bras31.tpg.internode.on.net) (Ping timeout: 252 seconds)
[11:22:09] <Widdershins> that may help but it doesn't make it necessarily tokenizable
[11:23:16] <Widdershins> so it's possible that the word-by-word filtering against a set you built would work well enough. it's possible it wouldn't. it would certainly make things easier
[11:23:40] *** Joins: drogas (~drogas@jump2.jet.uk)
[11:23:46] <Widdershins> but assuming that names are one word is already a pretty big leap; by and large you can't assume anything about what can and can't constitute a person's name
[11:23:57] <leduyquang753> So azidhaka specify those details then.
[11:24:04] <leduyquang753> Do you need to find subwords also.
[11:24:08] <Widdershins> they did
[11:24:24] <Widdershins> they asked the generalized question
[11:24:53] <braxas> hi, I know it won't be too difficult to code, but I'm looking for a "Progress tracker", which basically tells me how fast a batch process is running, I want to know every N seconds what the overall rate of processing is, what the rate of processing is in past N seconds, and how many items are processed, and optionally if I give an total or estimated total, how far the progress is.
[11:25:06] <leduyquang753> With more details, more tailored solutions may be formed.
[11:25:10] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:25:13] <braxas> Is there something like this that is commonly used already in python?
[11:25:16] <KirkMcDonald> braxas: tqdm may be useful.
[11:25:20] <Widdershins> braxas: tqdm might be useful
[11:25:23] <Widdershins> haha
[11:25:29] <braxas> thanks, will check it
[11:26:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:27:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:28:16] *** Quits: ubert (~Thunderbi@178.115.55.159.wireless.dyn.drei.com) (Ping timeout: 265 seconds)
[11:30:24] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:30:33] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[11:32:08] *** Quits: langAt (uid520190@user/langat) ()
[11:32:58] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[11:33:28] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[11:33:38] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[11:33:42] <lpapp> hi, is it ok to set a class member in a class-scoped auto fixture with pytest, or is that anti-pattern?
[11:34:17] <lpapp> basically, all my test methods in that test class requires this object to work with and I am now specifying this fixture for each test class method and I was wondering if I could get rid of the extra fixture parameter this way for each test method.
[11:34:48] <Widdershins> i think the right right thing to do is put that in a session fixture or something
[11:35:04] <lpapp> it is not for a session
[11:35:06] <energizer> lpapp: you know pytest doesnt need classes?
[11:35:07] <lpapp> it is only for this test class
[11:35:11] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 252 seconds)
[11:35:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:25] <lpapp> Hmm, maybe, it is pattern, not anti-pattern according to this post? https://stackoverflow.com/a/50135020
[11:35:27] <Widdershins> lpapp: a module fixture?
[11:35:43] <lpapp> class is fine
[11:36:13] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[11:36:43] <Widdershins> oh this is setting an instance method
[11:37:02] <Widdershins> sorry. setting an instance member
[11:37:16] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 252 seconds)
[11:37:19] *** Joins: BigShip (~BigShip@user/bigship)
[11:37:20] <Widdershins> i was thinking like a static member of the class. yeah that's fine
[11:37:37] <lpapp> yes, although I am not sure how it can work
[11:37:48] <lpapp> it seems that the _response attribute is not declared anywhere?
[11:37:55] <Widdershins> it never is that's just what python's like
[11:38:11] <lpapp> well, I am getting an attribute error for this
[11:38:21] <Widdershins> are you reading it before you're setting it
[11:38:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:38:41] <lpapp> no
[11:38:50] <Widdershins> what's the error then
[11:40:34] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[11:41:21] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[11:41:54] *** Quits: eniac__ (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[11:42:08] *** Joins: eniac__ (~eniac@gateway/tor-sasl/eniac)
[11:42:26] <Widdershins> lpapp: ?
[11:42:44] *** Joins: stranac (~stranac@195.29.239.126)
[11:43:11] <lpapp> sec, I am trying to make a small test bed that reproduces the problem without the proprietary code
[11:43:33] <Widdershins> i was just wondering what the error message looks like
[11:43:40] <lpapp> usual attribute error
[11:43:44] <lpapp> no such attribute on the class
[11:44:03] <Widdershins> so, sounds like you're reading it before you're setting it
[11:44:14] <lpapp> I created a test bed
[11:45:06] *** Joins: sudorm (~sudorm@lfbn-orl-1-950-89.w86-236.abo.wanadoo.fr)
[11:45:17] *** Joins: km (~km@user/km)
[11:45:18] <lpapp> Widdershins: https://bpa.st/MFSA
[11:45:37] <Widdershins> lpapp: you aren't requiring the fixture in the test
[11:45:37] <lpapp> looks like the auto fixture is not run before the first test method?
[11:45:44] <lpapp> it is auto
[11:45:52] <lpapp> that means it is required for everything implicitly.
[11:45:54] <lpapp> is it not
[11:46:13] <lpapp> https://docs.pytest.org/en/6.2.x/fixture.html#autouse-fixtures-fixtures-you-don-t-have-to-request
[11:46:40] <Widdershins> hm
[11:46:46] <lpapp> all my test methods need an object to be created to start with
[11:46:56] <lpapp> it works fine if I explicitly specify the fixture for 20+ test methods
[11:47:06] <lpapp> but it would be better to spare that extra parameter for each test method with the use of autouse
[11:47:30] <lpapp> and this would still fail: def test_foo(self, fooFixture):
[11:47:38] <Widdershins> i'm not honestly all that sure what autouse is supposed to do and if it's not working for you i would suggest doing something more normal with setup and teardown for the class itself if you want it to be class scoped
[11:47:39] <lpapp> do I not have to declare self._foo in the class?
[11:47:50] <Widdershins> if it's got the same scope as the class that makes a lot more sense here
[11:47:51] *** Joins: legola (~legola@46.235.100.217)
[11:48:23] <lpapp> I would personally not like to work with old-style unittest programming
[11:48:30] <lpapp> I am happier with fixtures, it is just that I need to work this out
[11:49:09] <Widdershins> it's... not... old-style unittest programming, it's explicit scope setup for the class's tests
[11:49:24] <lpapp> scope="class"
[11:49:26] <lpapp> ^^^
[11:49:31] <lpapp> You do not need more than that with fixtures
[11:49:36] <lpapp> no need to go back to the old unittest style
[11:49:40] <lpapp> with setup/teardown
[11:49:48] <Widdershins> you can assert that just fine when you can get it to actually run
[11:49:51] <lpapp> actually, with pytest even setup/teardown is done differently with yields.
[11:50:07] <Widdershins> i know how fixture teardown works in pytest
[11:50:20] *** Joins: Aminda- (~mikaela-@Feneas/Mikaela-)
[11:50:58] <Widdershins> why not just make it class scoped and not autouse then. just require it explicitly and return the value instead of trying to attach it to the class
[11:54:02] <Widdershins> you have a feature you're trying to use that's supposed to do something implicit but it's not doing what you expect and in fact doesn't seem to be working at all. a good way to work around that is to just be explicit
[11:54:51] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 265 seconds)
[11:55:03] <lpapp> that is what I already have. I tried to improve that :)
[11:55:34] *** Joins: iflema (~ian@user/iflema)
[11:57:06] *** Joins: merijn (~merijn@145.136.149.229)
[12:00:17] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:00:19] *** Joins: shangxiao (~davids@124.187.230.212)
[12:01:19] <varaindemian> how can I add xml to a pdf file using python?
[12:01:21] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 245 seconds)
[12:01:27] <varaindemian> I'd like to add this thing: `<img alt="" src="{$SourceURL}" style="max-height:200px;max-width:300px;height:auto;width:auto;" />`
[12:01:41] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[12:02:36] *** Quits: eniac__ (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[12:02:45] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:03:54] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[12:04:03] *** Joins: eniac__ (~eniac@gateway/tor-sasl/eniac)
[12:04:09] <The-Compiler> varaindemian: I'm guessing https://pikepdf.readthedocs.io/ could do it, but it's rather low-level, so you'll need to know how PDF works internally a bit
[12:04:27] <Widdershins> lpapp: i think you need to access the class instance through `request` for an autouse class fixture
[12:04:41] <varaindemian> The-Compiler: I don't mind to create a pdf file using only that content
[12:04:42] <Widdershins> not sure
[12:04:50] <varaindemian> The-Compiler: I mean a new pdf file
[12:05:02] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:07:36] *** Quits: Huitzilopochtli (~ronnie@45.64.220.161) (Ping timeout: 245 seconds)
[12:08:23] <varaindemian> The-Compiler: What do you think of this one? https://github.com/kelvin0/PyXML2PDF#:~:text=PyXML2PDF%20is%20a%20pure%20python,edited%20as%20an%20XML%20file.
[12:08:26] <varaindemian> kinda old
[12:09:13] <The-Compiler> varaindemian: that sounds like it's an XML-based format to generate PDFs, which doesn't sound like what you want
[12:09:15] *** Quits: sudorm (~sudorm@lfbn-orl-1-950-89.w86-236.abo.wanadoo.fr) (Quit: Leaving)
[12:09:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 245 seconds)
[12:09:16] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 245 seconds)
[12:09:17] <The-Compiler> varaindemian: what's your goal?
[12:09:36] <varaindemian> The-Compiler: to load an image once the pdf is open
[12:10:56] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 245 seconds)
[12:12:59] *** Quits: eniac__ (~eniac@gateway/tor-sasl/eniac) (Remote host closed the connection)
[12:13:11] *** Joins: eniac__ (~eniac@gateway/tor-sasl/eniac)
[12:14:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:16:19] *** Joins: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net)
[12:19:44] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:19:59] *** Quits: LuKaRo_ (~LuKaRo@p4fc32cdc.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[12:21:14] *** Joins: LuKaRo (~LuKaRo@p4fc3360e.dip0.t-ipconnect.de)
[12:21:16] <varaindemian> The-Compiler: I mean this thing: https://support.webmerge.me/hc/en-us/articles/206526876-Embed-Images-in-Your-Build-Your-Own-PDF
[12:21:25] *** Quits: KeiraT (~k@lulzsec.co.uk) (Quit: KeiraT)
[12:22:55] <The-Compiler> varaindemian: that sounds like something specific to this Formstack editor thingy and not something the PDF format would actually understand directly
[12:23:21] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Read error: Connection reset by peer)
[12:23:28] <varaindemian> The-Compiler: hmm, that means that PDF files cannot load images from externl URLs?
[12:23:48] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:25:26] <The-Compiler> varaindemian: looks like it's technically possible but (almost) no reader will support it: https://stackoverflow.com/questions/1833222/adding-external-images-to-pdf-using-itext
[12:25:50] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:27:59] *** Quits: emerent (~quassel@p200300cd574855a9ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:28:44] *** Quits: Yion (~Yion@pd95caa88.dip0.t-ipconnect.de) (Quit: Client closed)
[12:29:14] *** Joins: emerent (~quassel@p200300cd574855a9ba27ebfffed28a59.dip0.t-ipconnect.de)
[12:30:13] <varaindemian> The-Compiler: Oh I have exactly the same issue as that guy
[12:30:15] <eniac__> sum(aprox[0:int(num)])
[12:30:23] <eniac__> oops
[12:30:31] *** eniac__ is now known as eniac
[12:31:03] *** Quits: chwba (chwba@chwba.ircforever.org) (Remote host closed the connection)
[12:34:54] <varaindemian> The-Compiler: Wonder if there is any way I can use to track pdf opens
[12:35:13] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[12:37:22] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:37:54] *** Joins: arseru (uid515527@user/arseru)
[12:38:02] <arseru> Nice :D https://pdm.fming.dev/
[12:38:10] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[12:38:16] *** Quits: dre (~dre@2001:8003:c932:c301:d44a:8295:7928:835) (Quit: Leaving)
[12:41:55] <bkhl> Anyone know a good Python library that lets me do function composition where I need to make a function dynamically, that applies different functions on each field in a tuple, producing another tuple of the same length?
[12:43:13] <bkhl> Basically I want to do 'lambda x, y z: a(x), b(y), c(z)', but the length of the tuple and which function is applied to each argument varies.
[12:43:28] *** Joins: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0)
[12:43:58] <bkhl> Can do something with a list of functions and running each of course, but this is going to run millions of times, so something that composes a function that can be directly applied on each tuple would be nicer.
[12:44:16] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[12:44:24] <StyXman> I have a bytes sequence. I iterate over it, but instead of getting a bytes type, like when you iterate a str, I get an int. how can I caonvert that int back to bytes?
[12:44:32] *** rwb is now known as rb
[12:45:45] <eniac> how to limit the number contents of a list?
[12:47:37] <StyXman> eniac: like, if you add an element and you reached a count limit, it should raise an exception?
[12:47:46] <eniac> elements
[12:48:05] <eniac> i just want to know how to limit the number of elements
[12:48:06] <StyXman> you will have to implement that yourself
[12:48:25] *** Joins: arinov (~arinov@213.194.126.155)
[12:48:52] <StyXman> make a subclass of list that has a new append() and possibly __add__() methods that check for the limit
[12:48:59] <StyXman> and use that subclass all over
[12:49:20] <eniac> StyXman~ class? subclass?
[12:49:38] <eniac> _add__
[12:49:39] <eniac> ??
[12:49:43] <eniac> append???
[12:50:25] <StyXman> eniac: let me get this right
[12:50:34] <eniac> StyXman~ no.. please... stop..
[12:50:52] <StyXman> you have a list l. if you do l.append(...), it should check for a limit?
[12:51:00] *** Joins: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net)
[12:51:15] <StyXman> ptherwise, I didn't understand the problem at all, could you rephrase?
[12:51:43] <StyXman> otherwise*
[12:55:48] <hexnewbie> StyXman: The lack of bchr is somewhat regretful, but you can do bytes([53])
[12:58:07] <Repiphany> Use collections.deque with a max length
[12:59:33] <hexnewbie> eniac: deque() can have a limit, and discard the items first added, however: 1) it does NOT warn you or throw exceptions, 2) it is NOT like a list, accessing indexes is slow (i.e. O(n)), so creating a class of your own (either a list or collections.abc.MutableSequence subclass) as StyXman suggests may be better, though an overkill as to a simple function that simply checks
[13:01:21] <eniac> please... if you dont know how to answer a simple question... dont say nothing..
[13:01:55] <hexnewbie> eniac: The question is unclear
[13:01:56] <llua> pretty good way to go about asking for help
[13:02:02] <eniac> did i say class?
[13:02:08] *** Joins: greknod2 (~grek@ppp121-45-135-79.bri-pow-que-bras31.tpg.internode.on.net)
[13:02:17] <StyXman> hexnewbie: tx, so simple :)
[13:02:20] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[13:02:29] *** Quits: diplomatic_tyran (~Guest6@118.200.35.211) (Quit: Client closed)
[13:02:43] <eniac> if len(mylist) > 2:
[13:02:47] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[13:02:48] <eniac> done
[13:02:57] <eniac> kill your self!
[13:02:58] <hogarius> eniac: something like: if len(your_list) > x: # don't append to your list?
[13:03:00] *** Joins: pudup (~pudup@182.237.159.34)
[13:03:06] <StyXman> eniac: you asked how to _limit_ the number of elements
[13:03:09] <hexnewbie> eniac: And what would ‘done’ mean in this instance?
[13:03:24] <StyXman> for us it meant having a class doing that for you
[13:03:50] <StyXman> but yes, you're right, we went the wrong path, but as hexnewbie says, your question was not very clear
[13:04:31] <eniac> StyXman~ was very clear and straight!
[13:04:32] <StyXman> it could be that like me, you're not a native English speaker and the words came out skewed
[13:04:44] <eniac> StyXman~ man.. stop to talk... please..
[13:04:55] <StyXman> eniac: you can't shut me up. sorry
[13:05:06] <hexnewbie> I mean, the answer could even be list slices, or even islice(), depending.
[13:06:34] <eniac> clear
[13:06:51] <StyXman> it was clear to _you_, not for everybody
[13:06:58] <eniac> clear
[13:07:06] <StyXman> otherwise we wouldn't be in this cnofusion :)
[13:07:13] <StyXman> eniac: this is not the shell :)
[13:07:15] <eniac> just to you to know that i dont want to see YOU on my screen!
[13:07:21] <eniac> StyXman~ SHUT UP MAN! PLEASE!
[13:07:25] <StyXman> then close your ICR client :)
[13:07:33] <eniac> StyXman~ SHUT UP MAN! PLEASE!
[13:07:34] <StyXman> are you OK?
[13:07:39] <eniac> clear
[13:07:40] <eniac> clear
[13:08:06] <shangxiao> eniac: just /ignore them?
[13:08:17] <eniac> clear
[13:08:33] <shangxiao> why do you keep typing clear
[13:11:47] *** Joins: y04nn (~y04nn@193.32.127.238)
[13:12:39] *** Joins: vimart (~vimart@85.255.232.93)
[13:13:06] <jinsun_> forgot to switch to bash?
[13:14:36] <shangxiao> alles klar, herr kommisar
[13:15:55] *** Joins: szymon_ (~ugh@staticline-31-183-189-254.toya.net.pl)
[13:17:41] *** Quits: szymon (~ugh@staticline-31-183-189-254.toya.net.pl) (Ping timeout: 250 seconds)
[13:18:01] *** ChanServ sets mode: +o Yhg1s
[13:18:13] *** Yhg1s sets mode: +b *!*eniac@gateway/tor-sasl/eniac
[13:18:13] *** eniac was kicked by Yhg1s (This is not acceptable behaviour.)
[13:18:40] <Yhg1s> oh, right, no infobob.
[13:19:40] *** Yhg1s sets mode: -o Yhg1s
[13:20:55] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:21:14] *** Joins: califax (~califax@user/califx)
[13:22:29] <hexnewbie> Although they are kicked now, in the interest of science, I did make a solution to eniac's problem (only slightly embarrassed by __setitem__ here) https://bpa.st/KO6A
[13:24:32] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:25:32] <StyXman> Yhg1s: that was not necessary
[13:27:12] *** Joins: lessless (~lessless@ip.82.144.211.11.stat.volia.net)
[13:28:01] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 245 seconds)
[13:28:03] *** Parts: lessless (~lessless@ip.82.144.211.11.stat.volia.net) ()
[13:28:39] *** Quits: pudup (~pudup@182.237.159.34) (Quit: Quit)
[13:30:09] *** Joins: jamer05 (~jamer05@user/jamer05)
[13:30:22] *** Joins: RougeR (~rougex250@user/rouger)
[13:31:20] *** Joins: niv (~niv@limbo.cypherpunks.io)
[13:31:48] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:33:26] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Ping timeout: 245 seconds)
[13:34:58] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[13:36:38] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[13:37:09] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:37:11] <rendar> i think it was, there are rules...
[13:38:01] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 268 seconds)
[13:38:04] <jbe> let's be real, that was not their only problem
[13:41:39] *** Joins: oz4ga (~tim@93.90.4.233)
[13:43:05] <rendar> if you don't ban those guys, you make an injustice against everyone who behaves correctly and politely, imho
[13:43:12] <lericson> is it possible to get the code of a lambda
[13:43:17] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[13:43:38] <lericson> i guess not
[13:43:42] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Ping timeout: 260 seconds)
[13:44:46] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[13:45:05] *** Joins: pudup (~pudup@182.237.159.34)
[13:45:29] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[13:45:31] *** Quits: greknod2 (~grek@ppp121-45-135-79.bri-pow-que-bras31.tpg.internode.on.net) (Ping timeout: 245 seconds)
[13:46:01] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:95e:e654:dec6:f358)
[13:47:01] <jbe> lericson: should be possible to inspect? https://docs.python.org/3/library/inspect.html
[13:47:10] *** Joins: slav0nic (slav0nic@python.su)
[13:47:31] <lericson> i mean the actual python code
[13:47:35] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi)
[13:47:43] <lericson> but i realize that was never possible
[13:47:59] <lericson> for some reason i thought it was for normal functions
[13:48:29] *** Quits: pudup (~pudup@182.237.159.34) (Client Quit)
[13:49:39] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[13:49:41] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Ping timeout: 245 seconds)
[13:49:47] *** Joins: betuxy (~betuxy@158.181.77.59)
[13:50:11] <jinsun> lericson: inspect.getsource(your_lambda) ?
[13:50:56] <shangxiao> re old mate eniac - a warning first might be nice n fair :)
[13:51:53] <shangxiao> well I guess the kick is a warning of sorts
[13:51:55] <jinsun> or +q instead of +b
[13:52:06] <lericson> jinsun: interesting idea
[13:52:41] <jbe> imo warnings can have their place, but not when you jump immediately to "kill yourself"
[13:53:31] <hexnewbie> lericson: If that does not return the source as there's no e.g. file, one can theoretically decompile f.__code__ (the literal bytecode being in f.__code__.co_code). Though the builtin functions can only disassemble it
[13:53:38] <Zweimer> I am using auto-py-to-exe to compile my program into a executeable. Now I would like to be able to load new plugins into my executeable (they can be found for example under "/myexe/plugins/"). The plugins contain classes, that can be utilised by my main executeable. If the plugins would just be simple python-files, I would be required to have
[13:53:39] <Zweimer> python installed too, right? Is there another way of how I could do it without the need of having python installed? Is there a way of using a "precompiled plugin"?
[13:56:40] *** Joins: upsala (~zcb@185.213.155.160)
[13:59:27] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[13:59:34] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:02:14] <The-Compiler> varaindemian: probably not, most PDF readers would most likely not want to let you track the user's behavior this way
[14:03:06] <varaindemian> The-Compiler: Meanwhile I found something
[14:03:45] <varaindemian> The-Compiler: https://github.com/edwisdom/googlespoof/blob/master/embed_payload.py not sure why the output pdf doesn't execute the JS script
[14:04:08] *** dcaro is now known as dcaro_lunch
[14:04:18] *** Joins: SteveR (~SteveR@192.146.154.3)
[14:06:03] *** Joins: y04nn (~y04nn@193.32.127.238)
[14:08:53] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:09:33] *** Quits: betuxy (~betuxy@158.181.77.59) (Quit: Connection closed)
[14:09:41] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 245 seconds)
[14:11:30] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:12:53] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:13:09] *** Joins: nomic (~nomic@185.192.69.207)
[14:15:18] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[14:19:46] <The-Compiler> varaindemian: probably because a 3 year old public security hole got fixed at some point
[14:20:05] <The-Compiler> varaindemian: also, this raises quite some ethical and legal questions either way
[14:20:44] <varaindemian> The-Compiler: I know, I am not concerned about the ethical things because this will be a POC
[14:21:05] *** Joins: alzgh (~alzgh@user/alzgh)
[14:21:05] *** Quits: P1ro_ (~quassel@user/p1ro) (Read error: Connection reset by peer)
[14:21:19] *** Joins: P1ro (~quassel@user/p1ro)
[14:22:47] *** Quits: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[14:22:59] *** Joins: AutomatedTester (uid395371@selenium/developer/AutomatedTester)
[14:24:16] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[14:24:45] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[14:26:35] *** Joins: capn (~capn@user/capn)
[14:27:06] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 265 seconds)
[14:27:16] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[14:27:55] *** Joins: Organizers|Robin (~Robin_Jad@152.67.64.160)
[14:30:03] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[14:30:50] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 260 seconds)
[14:30:56] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[14:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:34:39] *** Joins: ham5urg (~ham5urg@p200300d1674296002c8dbbcb7d0d26f1.dip0.t-ipconnect.de)
[14:36:09] <ham5urg> Is it OK to use __FILE__ in an exception-message?
[14:36:35] *** Quits: legola (~legola@46.235.100.217) (Remote host closed the connection)
[14:37:50] <ham5urg> Like "Exception("Some error in " + __FILE__)"?
[14:38:40] <nedbat> ham5urg: you can, though it's __file__, and it might be a .pyc file, not a .py file
[14:38:42] <bkhl> If you want to report where an error happened, maybe better to do something with the traceback module?
[14:39:03] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[14:39:59] *** Joins: P1ro (~quassel@user/p1ro)
[14:40:45] <ham5urg> Ok, thanks, I will look into it
[14:41:31] *** Joins: y04nn (~y04nn@193.32.127.238)
[14:44:50] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[14:47:03] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[14:47:46] <hexnewbie> ham5urg: It's usually included in the traceback automatically
[14:49:15] <bkhl> Yeah, if the purpose is to raise an exception, you may be better off to use the new "raise X  from Y" thing.
[14:49:22] <bkhl> That way the whole traceback is preserved downstream.
[14:50:38] <hexnewbie> Or if you're ignoring the exception somewhere and just printing the message, you could probably add inspect.getframeinfo(exc.__traceback__.tb_frame).filename to it.
[14:50:59] <hexnewbie> __traceback__ not always being available, though
[14:51:23] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[14:51:31] *** Joins: badsektor (~badsektor@user/badsektor)
[14:51:41] <hexnewbie> I guess printing exc.__traceback__.tb_frame.f_code.co_filename and ignoring the AttributeError is kind of safer/faster
[14:52:04] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[14:52:39] *** Joins: audio (~audio@cpe-24-27-99-134.tx.res.rr.com)
[14:52:48] <jinsun> just file name is a bit unhelpful, I just dump the entire traceback with traceback.format_exc or traceback.print_exc when it is some unknown error
[14:53:09] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[14:53:26] *** Quits: merijn (~merijn@145.136.149.229) (Ping timeout: 245 seconds)
[14:53:33] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:53:40] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:53:47] *** Quits: audiocat (~audio@2603-8081-1800-1546-1420-7e7c-b9a2-7d5d.res6.spectrum.com) (Ping timeout: 246 seconds)
[14:54:59] *** Joins: JibStyle (~user@154.21.20.45)
[14:55:18] *** Joins: xiongxin (~quassel@119.123.100.167)
[14:55:19] *** Joins: audiobirb (~audio@2603-8081-1800-1546-6c09-d681-4232-ce27.res6.spectrum.com)
[14:57:20] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 260 seconds)
[14:58:08] *** Quits: audio (~audio@cpe-24-27-99-134.tx.res.rr.com) (Ping timeout: 252 seconds)
[14:58:37] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[14:58:51] *** Joins: P1ro (~quassel@user/p1ro)
[14:58:52] *** Parts: vimart (~vimart@85.255.232.93) (WeeChat 2.8)
[14:59:26] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[14:59:57] *** Joins: mike18_ (~geri@217-149-162-127.nat.highway.telekom.at)
[15:00:28] <mike18_> hi - how can i pass data to a multiprocessing.Queue() per reference - which will be used in a worker?
[15:00:38] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:01:48] <hexnewbie> mike18_: What about Queue.put() does not accomplish the goal that you want to achieve?
[15:02:02] <mike18_> yes but it seems to copy the data
[15:02:02] *** Quits: dalan6236 (~dalan@110-175-157-10.tpgi.com.au) (Read error: Connection reset by peer)
[15:02:16] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[15:02:22] <mike18_> and not pass per reference
[15:02:26] <hexnewbie> mike18_: It's not possible to not copy the data, it's processed by another process
[15:02:56] <mike18_> by another process?
[15:03:27] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[15:04:02] <hexnewbie> mike18_: multiprocessing is for spawning processes, and processing data across multiple such, and they don't share memory for you to pass objects without copying them
[15:04:20] *** Joins: dalan6236 (~dalan@110-175-157-10.tpgi.com.au)
[15:04:43] <mike18_> maybe im on the wrong track - currently i have an algo which fetches data from a server runs some algo and writes some data to s3 - i have multiple ids - those are all processed sequentially - now i want to concurrently process it.....
[15:05:00] <mike18_> @hexnewbie should i use a thread or multiprocessing?
[15:05:50] *** Quits: Allegretto (~allegrett@92-249-221-205.pool.digikabel.hu) (Ping timeout: 252 seconds)
[15:06:13] <mike18_> fetching (from server) + processing (algo) + write to s3 a single id takes now around 4-9 sec.
[15:07:37] <hexnewbie> mike18_: I do not know, that depends on what you're doing with them. But if you were using threads, queue.Queue would be a queue that should not copy the data, and uses the same API as multiprocessing.Queue (but only works across threads, or the same thread I guess?).
[15:07:54] *** Joins: m_tadeu (~quassel@bl5-182-86.dsl.telepac.pt)
[15:08:04] <mike18_> when to use multiprocessing vs threads?
[15:08:45] <StyXman> lericson: I think there are dis -> python code modules somewhere, but you won't get the original source code nice and clean, it will only be a reconstruction
[15:09:15] *** Joins: eem (~eem@user/eem)
[15:09:41] *** Quits: jamer05 (~jamer05@user/jamer05) (Ping timeout: 252 seconds)
[15:10:11] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:10:21] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca) (WeeChat 3.2)
[15:10:28] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[15:10:30] *** Joins: legola (~legola@46.235.100.217)
[15:10:42] *** Joins: y04nn (~y04nn@193.32.127.238)
[15:12:07] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:395e:a5e0:4cb1:5563) (Quit: Textual IRC Client: www.textualapp.com)
[15:12:15] <hexnewbie> mike18_: Maybe in your case, since you're already fetching the data once and wish to avoid repeatedly fetching it, you could connect multiple processes to s3 and fetch parts of the data from it?
[15:12:36] <mike18_> it fetches data from a webserver
[15:12:42] <mike18_> and output data to s3
[15:12:54] <mike18_> and in between it runs an algo to process the data
[15:13:00] *** Parts: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[15:13:19] <mike18_> right now i have a for foor for all ids -> so sequentially
[15:13:40] <hexnewbie> If you copy the original data as you received if from the web server with as little parsing as possible, copying it for multiprcessing purposes shouldn't be too expensive
[15:14:09] <mike18_> i thought each thread/process fetches the data for the id it works on - runs the algo - and writes output
[15:14:24] <hexnewbie> mike18_: That's what I was suggesting above
[15:14:34] *** Joins: nomic (~nomic@185.192.69.207)
[15:14:42] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[15:14:44] <mike18_> yeah but the question is threads or processes...?
[15:14:50] <hexnewbie> mike18_: That way, multiprocessing.Queue.put() would copy only the ID
[15:15:04] *** Joins: audio (~audio@cpe-24-27-99-134.tx.res.rr.com)
[15:15:25] <mike18_> yeah + it seems to connect to the server i need a new login for each proces
[15:15:34] *** Joins: fleabag (~sirpengi@li587-65.members.linode.com)
[15:15:45] <mike18_> should i try to start with threads first?
[15:15:51] <lericson> mike18_: will you be CPU bound? then consider writing the performance-critical pieces in something other than Python; if you will be I/O bound, then threads should be okay -- and perhaps better yet, using async
[15:16:04] <mike18_> its not cpu bound - its bound by the slow server :)
[15:16:16] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[15:16:16] <mike18_> the server takes 4-9 sec to respond with data
[15:16:24] <lericson> i would opt for async code then to avoid the absolute madness that is the threading model of concurrency
[15:16:36] <hexnewbie> mike18_: If the processing is done in Python code only, threading might not be faster than sequential processing, as the working process will hold the GIL all the time its working, leaving the others waiting. In addition, if your processing does not require shared memory, multiprocessing seems nice (ish) enough
[15:16:40] <mike18_> why async?
[15:17:04] <lericson> async is essentially what you want here, isn't it? do other things while waiting for data
[15:17:08] <mike18_> should i use async or multiprocessing?
[15:17:11] *** Quits: audiobirb (~audio@2603-8081-1800-1546-6c09-d681-4232-ce27.res6.spectrum.com) (Ping timeout: 245 seconds)
[15:17:36] <hexnewbie> Oh, if you're waiting on a server, then yeah, single thread/process with simultaneous async requests, and prayer that the server admin does not ban you from the server for making simultaneous requests that load the server 😉
[15:17:42] <mike18_> lericson: yeah fetch data concurrently from server or process algo or write output...
[15:17:44] *** Joins: mei (~mei@user/mei)
[15:17:52] *** Joins: Allegretto (~allegrett@84-236-85-140.pool.digikabel.hu)
[15:17:54] *** Joins: fredrikhl (~fhl@myrsnipa.uio.no)
[15:18:07] *** Joins: audiobirb (~audio@2603-8081-1800-1546-9f91-ebec-2821-ecd5.res6.spectrum.com)
[15:18:23] <mike18_> single thread?
[15:18:49] <mike18_> just use aysnc - or will i need a new thread except main thread?
[15:19:00] <lericson> 1 thread
[15:19:01] <lericson> 1 love
[15:19:02] <lericson> 1 life
[15:19:39] <lericson> you can find _tons_ of examples online of how to do multiple asynchronous requests then process them as they complete
[15:19:45] <lericson> in fact i think even in the python asyncio documentation
[15:19:51] <mike18_> and async processing?
[15:19:53] *** Quits: audio (~audio@cpe-24-27-99-134.tx.res.rr.com) (Ping timeout: 250 seconds)
[15:20:08] <cluelessperson> mike18_, I think multiprocessing will be useful if you're trying to utilize multiple cores,  but if you're waiting on io, threading should do fine to wait on server responses.
[15:20:19] <lericson> yes
[15:20:36] <cluelessperson> mike18_, but if the server is just waiting on io itself, you can't overcome that part of the chain unless you fix that.
[15:20:39] <lericson> and even then i would steer clear of multiprocessing simply because i hate debugging it
[15:21:09] <cluelessperson> I've never had a reason to mess with it honestly.
[15:21:12] <hexnewbie> mike18_: You fire up ten web requests (no threads), than wait for the results. Maybe aiohttp? https://docs.aiohttp.org/en/stable/
[15:21:15] <mike18_> the server does some aggregation internally before reply - thats why its 4-9 sec slow
[15:21:23] <mike18_> so i need to concurrently send req
[15:21:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[15:22:30] <cluelessperson> mike18_, I have no idea if the server is even handling that aggregation in parallel, but assuming it's a database, or each process is single threaded and or horizontally scalable it probably is.
[15:22:37] <cluelessperson> but sure.
[15:22:44] <mike18_> the database can handle concurrency
[15:22:58] <cluelessperson> I actually really like threading.
[15:23:01] <cluelessperson> I find it comfortable.
[15:23:07] <anddam> howdy, when using setuptools setup() install_requires argument with VCSs, what is the trailing  'egg' query argument used for?
[15:23:16] <lericson> it's easy to say that when you're safe and sound in GIL land, cluelessperson
[15:23:51] <mike18_> lericson: safe for?
[15:23:53] <lericson> less so when you get weird race conditions and spurious program crashes..
[15:23:54] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:24:02] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:24:04] <cluelessperson> lericson, fair.
[15:24:14] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[15:24:21] <anddam> i.e. "foo git+ssh://git@gitlab.intranet.bit4id.com/super/foo.git#egg=bar"
[15:24:26] *** Joins: P1ro (~quassel@user/p1ro)
[15:24:28] *** Joins: shad (~shad@user/shad)
[15:24:30] <mike18_> can i also do async without that http lib?
[15:24:35] <mike18_> and use another lib?
[15:24:41] <lericson> sure why not
[15:24:42] <mike18_> which doesnt offer async per default
[15:24:43] <lericson> but why would you
[15:24:46] <lericson> no
[15:24:59] <mike18_> that lib i use to fetch data doesnt offer async
[15:25:03] *** Joins: jaggz (~jaggz@user/jaggz)
[15:25:06] <jaggz> CMake Error at cmake/qt-utils.cmake:6 (include): include could not find load file: FindPythonInterpreter
[15:25:07] <lericson> threads then
[15:25:15] <jaggz> (debian (stable))
[15:25:15] <cluelessperson> mike18_, well, depends, mostly yes, but some libraries will be designed to make it easier than others.
[15:25:22] <mike18_> create multipel threads - and call that lib?
[15:25:25] <lericson> there are other approaches that are...... intrusive
[15:25:30] *** Joins: vm (~vm@user/ansible)
[15:25:30] * cluelessperson needs to learn more about asyncio
[15:25:41] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[15:25:52] <lericson> greenlet had this greenify thing that would, iirc, replace some common i/o system callers like fread() and so on
[15:26:26] <mike18_> lericson: no on what?
[15:26:34] <lericson> no, you cannot use a non-async library in an async way
[15:26:47] <mike18_> oh
[15:27:01] <lericson> asynchronous programming in python is not pre-emptive, but co-operative
[15:27:12] <mike18_> what to do than?
[15:27:12] <mike18_> yeah
[15:27:16] <lericson> threads
[15:27:19] <mike18_> what other options i have?
[15:27:26] <lericson> classic thread pool bing bang bung
[15:27:28] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[15:27:42] <mike18_> but thats fighting with GIL?
[15:27:48] <lericson> https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example
[15:27:52] <lericson> here is a literal exact example of your usecase
[15:29:12] <mike18_> ok will check
[15:29:21] <mike18_> my first idea was to spin of some worker threads
[15:29:28] <mike18_> than have a queue
[15:29:41] <mike18_> each worker call .get() fetches that id to process on
[15:29:45] <mike18_> and does its thing
[15:29:45] <lericson> use that instead, it deals wiht all that for you
[15:29:46] <jinsun> anddam: it is the "project name" apparently https://pip.pypa.io/en/stable/topics/vcs-support/#url-fragments
[15:30:11] <jaggz> locking
[15:30:12] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi)
[15:30:27] <jaggz> in python, those can .get() and interfere with each other?
[15:30:57] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:95e:e654:dec6:f358) (Quit: Client closed)
[15:31:13] <anddam> jinsun: but while that applies to pip it isn't quite the same for install_requires values, that are similar-but-not-quite-the-same
[15:31:15] *** Joins: p3hz (~p3hz@198.55.124.115.adsl.inet-telecom.org)
[15:31:46] <anddam> jinsun: specifically install_requires has already the name at the head of string while using VCS
[15:32:36] <anddam> jinsun: my issue is that while I was building a package of theirs a dependency changed its name in the setup, and the dependent build broke due to mismatch between "foo " and what the package declares as name= argument
[15:32:47] <anddam> jinsun: my question is then what is the egg= query arg for
[15:32:54] <anddam> x/then/ c/therefore/
[15:33:17] <hexnewbie> mike18_: https://bpa.st/NYJQ Firing multiple web requests is quite easy
[15:34:04] <mike18_> yeah but the lib i currently use is not written for async :)
[15:34:59] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi) (Ping timeout: 252 seconds)
[15:36:00] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:09] *** Joins: gentle (~gentle@user/gentle)
[15:36:25] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:42] <varaindemian> any idea why I can only add attachments OR a js script to this pdf? I cannot do them simultaneously
[15:37:18] <jinsun> anddam: ah okay, I though it is the same meaning for both pip and setuptools, it is "project-version" apparently for setuptools https://setuptools.pypa.io/en/latest/userguide/dependency_management.html#dependencies-that-aren-t-in-pypi
[15:37:25] <jaggz> why can't cmake find my python?
[15:37:28] <varaindemian> https://www.irccloud.com/pastebin/DPuule9O/
[15:38:25] <jaggz> I can't find where this rule comes from: grep FindPythonInterpreter  ../*
[15:38:25] <jaggz> ../CMakeLists.txt:      "${3RDPARTY_DIR}/FindPythonInterpreter"
[15:38:25] <jaggz> ../cmake/qt-utils.cmake:include(FindPythonInterpreter)
[15:38:30] <jaggz> oops.. ugly paste, sorry.
[15:39:04] *** Joins: newpy (~newpy@206.168.231.90)
[15:39:30] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[15:39:31] <newpy> what is the neatest way to assign a np.array column the value of a 1d array?
[15:40:10] <varaindemian> anyone?
[15:41:44] <Andrew> Seems to be sus
[15:43:17] *** Joins: infobob (~infobob@python/bot/infobob)
[15:44:55] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[15:46:24] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[15:47:10] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[15:48:07] *** Quits: chenqisu12 (~xirndc@183.217.200.123) (Quit: Leaving)
[15:48:37] <anddam> jinsun: "If you depend on a package that’s distributed as a single .py file, you must include an "#egg=project-version" suffix to the URL"
[15:48:44] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[15:49:02] <anddam> jinsun: since in my case the dependencies are proper setuptools package I should toss the trailing egg args
[15:50:57] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:51:07] <jinsun> anddam: but also "In the case of a VCS checkout, you should also append #egg=project-version in order to identify for what package that checkout should be used." (which actually sounds like the package name thing in pip docs)
[15:53:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:53:35] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[15:54:28] <anddam> jinsun: that makes it sounds I should not be doing "foo git+ssh://git@gitlab.fubar/foo/bar.git"  at all, with the leading project name, but just "git+ssh://git@gitlab.fubar/foo/bar.git#egg=foo"
[15:55:05] <no_gravity> I want to replace everything in a string with empty strings except patterns that match [0-9]x. So "2x oranges, 23x apples" becomes "2x23x". Is that possible with re.sub()?
[15:55:08] *** Quits: gentle (~gentle@user/gentle) (Quit: mm nope too tired :<)
[15:55:18] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Remote host closed the connection)
[15:56:50] <shangxiao> no_gravity: yep
[15:56:51] <Vornicus> I'd skip re.sub and just get the list of match groups and glom 'em together
[15:57:00] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[15:57:26] *** Joins: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr)
[15:57:29] <Vornicus> also that's [0-9]+x
[15:57:57] <no_gravity> Vornicus: I feed the regex into an application that puts it into re.sub(). I don't have control over the application. Only over the regular expression.
[15:57:57] <jinsun> anddam: hmm yes, and also that section is actually for dependency_list option and nt for install_requires, so you will have foo in install requires and the url with egg=foo in dependency_links
[15:58:20] <no_gravity> shangxiao: Are you sure? What would be the regex to accomplish that?
[15:58:51] <VaniaPy> Hello, in order to convert a DataFrame to json i see that i can use to_json() but this one i see that turns the json to string
[15:58:57] <jinsun> anddam: but it also says pip doesn't support dependency_links now, are you installing this with pip or some old way like python setup.py install
[15:58:58] <VaniaPy> is there an alternative?
[16:00:02] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[16:00:07] <anddam> jinsun: pip
[16:00:23] <grym> VaniaPy: you could json.loads the result to get a list or dict or w/e
[16:01:18] <mike18_> hi can load_url also be part of a class here? https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example
[16:01:34] <mike18_> so can i use self.load_url in executor.submit?
[16:01:46] *** Joins: nyloc (~nyloc@p4fde5e51.dip0.t-ipconnect.de)
[16:02:08] <anddam> VaniaPy: why do you want it as an object?
[16:02:51] <mike18_> bc that function i call is part of a calss
[16:02:53] <mike18_> class
[16:03:08] <bjs> mike18_: yeah
[16:03:10] <no_gravity> Here is an example: https://www.online-python.com/OqRiJgTvjZ
[16:03:19] <grym> VaniaPy: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_dict.html might be what you want
[16:03:22] <Vornicus> no_gravity: `(?<![0-9])x|(?![0-9]*x).` looks like it does the job: an x with
[16:03:31] <VaniaPy> anddam i need to access by key the values of a list
[16:03:32] <Vornicus> whups, was explaining and failboated
[16:03:33] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[16:04:06] <no_gravity> Vornicus: Wow, seems to work: https://www.online-python.com/Mg2Sryms9k
[16:04:08] <Vornicus> an x without a digit before it, or any character that does not begin a (number)x sequence
[16:04:10] <jamwil>  /away
[16:05:29] <no_gravity> Vornicus: Super cool! Thank you!
[16:05:50] <shangxiao> yeah but…
[16:05:57] <no_gravity> Vornicus: Why the dot at the end?
[16:06:05] <Vornicus> the dot is the "any character"
[16:06:14] <no_gravity> Vornicus: I know
[16:06:16] <jinsun> anddam: okay then you probably don't want dependency links, so it can be in install_requires according to this https://stackoverflow.com/a/54794506, then seems like the egg= argument is for pip and it means package name as the pip docs say ( and probably not even required)
[16:06:27] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[16:06:28] <shangxiao> the negative lookbehind only has a single digit
[16:06:55] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:fe04:b022:91be:e39)
[16:07:02] <anddam> jinsun: I am not even sure what "dependency links" actually are
[16:07:13] <Vornicus> Without it, I have "the stuff after this stuff doesn't match my required pattern" but nothing that describes "this stuff" per se
[16:07:27] <anddam> jinsun: from what I can see as long as I am using setup() this is not a (strct) pip concern, but rather setuptools'
[16:07:36] <Vornicus> shangxiao: yes.  That segment looks specifically for xs with no digit before it.
[16:07:41] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[16:07:42] <anddam> jinsun: problem is, setuptools is not clearly documented, IMHO at least
[16:08:08] <no_gravity> Vision: Oh, the dot is part of the "that" in "this or that"?
[16:08:20] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 246 seconds)
[16:08:32] <Vornicus> yes.
[16:08:35] <no_gravity> Aha
[16:08:56] <jinsun> anddam:dependency links is somee old thing that setuptools got from distutils, that you don't want to us because pip doesn't support it, but the egg= documentation for setuptools was for the case when you are using dependency links
[16:10:10] <jinsun> anddam: it is a pip concern I think, setuptools just puts the install_requires in the package, then pip has to look for it
[16:10:35] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:10:50] <anddam> jinsun: but the specs are setuptools', this would work even if installed with 'python setup.py install'
[16:12:03] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[16:13:57] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:14:42] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:14:55] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:15:20] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:15:37] *** Parts: JibStyle (~user@154.21.20.45) (a)
[16:16:41] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:17:13] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[16:17:32] <jinsun> anddam: well if you use setup.py install then it becomes setuptools concern, and if you use pip install then it is pip concern
[16:17:55] *** Joins: vali (~vali@84-115-149-71.cable.dynamic.surfer.at)
[16:17:58] <jinsun> anddam: you are using something like pkg @ link in install_requires right?
[16:18:00] <mike18_> bjs: is executor.submit copy by reference?
[16:18:18] <mike18_> lets say i want to pass an object to it
[16:18:29] <bjs> mike18_: no there's no copying when you call a function in Python
[16:18:48] <mike18_> bjs: im working on a reference than?
[16:18:48] <bjs> it's just a thread, so there's no copying there either
[16:19:00] <bjs> mike18_: like you usually are with Python and threads, yeah
[16:20:00] <mike18_> future_to_id = {executor.submit(self.thread_worker, id_obj): id_obj for id_obj in ids}
[16:20:03] <mike18_> for that
[16:20:56] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[16:22:05] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[16:22:33] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[16:22:53] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:24:50] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:25:31] <mike18_> its creating a copy somewhere
[16:25:33] <mike18_> @bjs
[16:25:37] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[16:25:40] <mike18_> i checked the address of object
[16:25:45] <bjs> mike18_: it's creating a copy of what?
[16:25:45] *** dcaro_lunch is now known as dcaro
[16:25:47] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[16:25:52] <mike18_> id_obj
[16:26:03] <bjs> mike18_: what makes you say that?
[16:26:11] <bjs> mike18_: can you share the code that shows that
[16:26:23] <mike18_> i looked at hex(id(id_obj)) in the thread and main
[16:26:33] <mike18_> their address is not the same
[16:27:09] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[16:28:13] *** Quits: lazerlapin (~lazerlapi@ad001129.dynamic.ppp.asahi-net.or.jp) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:30:19] <bjs> mike18_: can you show?  you're looping over a bunch of different ids
[16:30:25] <bjs> are you sure you'er comparing the same id_objs
[16:30:37] <mike18_> i try to create example
[16:31:12] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[16:32:46] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[16:33:19] *** Quits: xiongxin (~quassel@119.123.100.167) (Ping timeout: 252 seconds)
[16:33:51] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[16:35:07] *** Quits: ham5urg (~ham5urg@p200300d1674296002c8dbbcb7d0d26f1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:35:55] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[16:35:57] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:36:40] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[16:41:02] *** Quits: vali (~vali@84-115-149-71.cable.dynamic.surfer.at) (Quit: c-ya!)
[16:41:47] *** Joins: raxor2k (~raxor2k@78.158.232.147)
[16:42:41] <raxor2k> for i in a_list_of_dicts:  i.pop("name") works to pop from the dicts. Now how can i add "name" : "tim" to the list of dicts?
[16:43:08] <grym> raxor2k: why pop at all
[16:43:35] <grym> just reassign
[16:43:44] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[16:44:09] *** Joins: mickey (~user@user/mickey)
[16:44:25] <raxor2k> grym: but what if i want to add something else? like "surname" : ""
[16:44:26] *** Joins: vali (~vali@84-115-149-71.cable.dynamic.surfer.at)
[16:45:29] <grym> raxor2k: x = {"name":"Alice"}; x["surname"]="Smith"
[16:45:31] <grym> what's the problem
[16:46:27] <raxor2k> grym: nothing, thanks
[16:46:29] <raxor2k> <3
[16:46:45] <grym> this sort of mutability is kind of the feature of the data structure
[16:47:09] <anddam> jinsun: yes, I am. Sorry for the delayed answer
[16:48:04] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 252 seconds)
[16:48:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[16:48:40] *** Joins: vimart (~vimart@85.255.232.93)
[16:49:00] *** Joins: Barones (~Barones@2804:7f3:8987:b8e9:ca77:fb84:280a:faba)
[16:49:26] <mike18_> bjs: damm cant reproduce it....
[16:49:31] <mike18_> but the addresses are different
[16:49:47] <mike18_> what happens if i have a generator object in that object i pass to the thread?
[16:50:23] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-b04858-237.dhcp.inet.fi) (Quit: Leaving)
[16:52:30] <anddam> I remember there was a pip package allowing recursive uninstall of packages, can anyone help me figuring its name?
[16:52:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:53:02] <jinsun> anddam: okay that seems to be url as reference described in pep 440 https://www.python.org/dev/peps/pep-0440/#direct-references, and pep 508 https://www.python.org/dev/peps/pep-0508/#specification
[16:53:20] <grym> anddam: it's `rm -rf /path/to/the/venv/ && python -m venv /path/to/the/venv && /path/to/the/venv/bin/python -m pip install <target>` (:
[16:54:27] <grym> anddam: you could use something like pipdeptree to generate a list of dependent packages and then uninstall them, but there's no guarantee you won't clobber another dependendency's sub-deps, which is probably why pip doesn't do this
[16:54:38] <jinsun> anddam: and those don't say anything about egg really
[16:55:19] <theseb> anyone have sample code that successfully sends JSON data to Django server from Javascript?
[16:57:00] <bjs> mike18_: i feel like there's something else in your code that you're missing
[16:57:34] *** Quits: langdon (~langdon@fedora/langdon) (Remote host closed the connection)
[16:57:40] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:58:26] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[16:59:41] *** Quits: Tireos (~Tireos@91.223.118.131) (Ping timeout: 245 seconds)
[17:01:02] <greatgatsby> theseb, I tend to use axios (with vue):  https://github.com/axios/axios
[17:01:27] *** Joins: Tireos (~Tireos@94.158.34.36)
[17:03:33] <theseb> greatgatsby: interesting....it is a whole JS framework....IT doesn't seem to be aware of django however?  Did you have trouble bending Axios to speak Django's language?
[17:03:41] <anddam> grym: hrmm I'll go the nuke way since I have to generate the requirements.txt for this project
[17:04:09] <anddam> jinsun: yea, it's a bit of a blurry world when you want to look the nitty-gritty detail in docs
[17:06:42] *** Joins: akk (~akk@75.161.146.115)
[17:07:24] <lericson> lol my concurrent.futures.ThreadPoolExecutor business runs better with max_workers=1
[17:07:55] *** Joins: ska (~ska@user/ska)
[17:08:27] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[17:09:08] <hexnewbie> lericson: That's... um, unsurprising. It's quite some time since I even needed threads, but even when I rewrote my intensive loop in cython inside an ‘with nogil’ block, I still got barely 260% out of 400%. On normal code, well, worse results are expected
[17:09:16] *** Quits: Tireos (~Tireos@94.158.34.36) (Ping timeout: 245 seconds)
[17:09:36] <lericson> this is with the critical parts releasing the GIL
[17:09:36] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:10:05] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[17:10:33] <hexnewbie> Ah. Not good. (Also, I did do significant post-processing in pure Python afterwards, so my result was indeed expected)
[17:10:52] <lericson> honestly seems like something is not working right
[17:11:05] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:11:31] <hexnewbie> lericson: Do the CPU usage and amount of time it took tell the same story? I.e. additional threads not helping?
[17:11:40] <lericson> cpu% shoots up
[17:11:53] <lericson> execution time is marginally longer with concurrent threads
[17:12:50] <hexnewbie> So that at least rules out problems with releasing the GIL at the right spot
[17:13:12] <lericson> does it though
[17:14:32] *** Joins: Schnouki (~schnouki@user/schnouki)
[17:14:38] <grym> anddam: it's the normal pattern.
[17:15:29] <hexnewbie> lericson: Not sure, but it's far less likely. You successfully utilised more CPU%, did not experience major crash or some problem with the GIL released, hence you're releasing in a place where it seems like you should be releasing it (from first glance, at least)
[17:15:47] <lericson> hexnewbie: i'm using numba so i'm not worried about correctness
[17:16:48] <hexnewbie> Haven't used numba. Is not that releasing the GIL *for* you, without you having to worry about that?
[17:17:14] <hexnewbie> s/Is/Should/
[17:18:05] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:19:44] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[17:23:48] *** Joins: stdout (~stdout@216.163.21.11)
[17:24:46] *** Quits: vali (~vali@84-115-149-71.cable.dynamic.surfer.at) (Quit: c-ya!)
[17:25:03] *** Joins: langAt (uid520190@user/langat)
[17:26:04] <greatgatsby> theseb, you "could/should" be using something like DRF to create a REST api when you want to speak json back and forth between your frontend and backend.  This is kind of a complicated subject, so I don't want to speak in absolutes, and I don't really know the scope of your project.
[17:27:22] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[17:28:33] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[17:29:39] <greatgatsby> also, axios isn't so much a framework, as a convenience library to make rest api calls easier to deal with.  Any conformant backend should handle requests from axios.
[17:29:42] <SnoopJ> hexnewbie, numba only releases the GIL in `nogil=True` mode.
[17:29:51] *** Parts: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr) ()
[17:30:11] <SnoopJ> (it doesn't need to hold it if the JITted function can be expressed entirely in native types)
[17:30:13] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Quit: Leaving)
[17:31:01] *** Joins: jjasghar (~quassel@user/jjasghar)
[17:31:38] <lericson> which is what I do
[17:31:47] <lericson> njit(nogil=True)
[17:32:29] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 250 seconds)
[17:32:52] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[17:33:25] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:36:28] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[17:36:51] <Soni> y'all added type hints to improve debugging. everyone can agree they're ugly. how do you convince ppl to accept ugly things like type hints because they significantly improve debugging?
[17:38:31] <grym> i think they're pretty
[17:38:32] <supakeen> Tell people that nails also aren't very pretty yet useful?
[17:38:33] <grym> crisis averted
[17:38:42] *** Quits: nyloc (~nyloc@p4fde5e51.dip0.t-ipconnect.de) (Quit: Client closed)
[17:38:46] <grym> nails can also be pretty!  cut nails are lovely
[17:39:25] <Soni> grym: you should try painting your nails, it can be fun!
[17:39:31] <Soni> but uh anyway
[17:39:57] *** Parts: skered (~dereks@user/skered) ()
[17:39:59] <Soni> supakeen: what kind of nails
[17:40:12] *** Quits: vm (~vm@user/ansible) (Ping timeout: 256 seconds)
[17:40:17] <jinsun> i doesn't just help in debugging
[17:40:18] <grym> https://www.ironwirenails.com/img/cut-masonry-nail.jpg  so handsome
[17:40:25] <jinsun> *it
[17:40:44] <jinsun> it also makes vscode auto--complete much much better
[17:40:48] <SnoopJ> Soni, why do you think everyone would agree with that?
[17:40:52] <jinsun> also makes the code more readable
[17:41:05] <lericson> i hate type annotations
[17:41:12] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:41:17] <Soni> jinsun: yes, it's all very useful. but it's more syntactic/cognitive load. :p
[17:41:38] <grym> less semantic load, though
[17:41:49] <grym> "what the crap is `foo` ... oh, it's an int, great"
[17:42:01] <Soni> grym: you clearly haven't used enough generics :p
[17:42:10] <grym> Soni: i have used the correct number thank you
[17:42:37] <Soni> granted, python doesn't exactly have generics-powered metaprogramming like rust does
[17:43:06] *** Quits: stwerp (~sjt015@sub137-102.bucknell.edu) (Remote host closed the connection)
[17:43:13] * SnoopJ sees the word "clearly" used as a cudgel far more often than as description of established consensus
[17:43:20] <grym> neither does my tshirt have belt loops
[17:43:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:44:35] *** Joins: bandit_za (~bandit_za@185.195.232.173)
[17:45:07] <bjs> SnoopJ: clearly you just aren't hip and current with the conensus
[17:45:26] <SnoopJ> bjs, I am definitely not hip
[17:45:44] *** Joins: tbcr_ (~tbcr@user/tbcr)
[17:46:05] <lericson> i can see 'clearly' now the rain is gone
[17:46:25] <lericson> ccr was the original cudgellers
[17:46:43] <grym> i'm so hip, i have difficulty seeing over my own pelvis
[17:46:47] *** Quits: shad (~shad@user/shad) (Ping timeout: 250 seconds)
[17:47:13] <grym> (and oh, look, it's thursday)
[17:47:16] <Soni> anyway, point being, even something ugly can still make things clearer. but how do you tell someone that?
[17:47:27] *** Joins: qlixed (~qlixed@152.170.36.244)
[17:47:32] <lericson> i think you have to argue that it isn't ugly
[17:47:45] * SnoopJ isn't exactly clear on what the question is
[17:49:05] <Soni> also why does it feel like only Chris Angelico and Steven D'Aprano ever reply to our python-ideas posts...
[17:49:37] *** Quits: LuKaRo (~LuKaRo@p4fc3360e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:50:13] *** Joins: LuKaRo_ (~LuKaRo@p4fc32be7.dip0.t-ipconnect.de)
[17:50:26] *** Joins: nicode (~nic@2607:f2c0:951b:700:ecad:ba72:bd8f:42ec)
[17:50:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:51:01] *** Joins: kib (~kib@user/kib)
[17:51:04] *** Joins: dez (uid92154@user/dez)
[17:51:17] *** tbcr_ is now known as tbcr
[17:51:49] *** qlixed is now known as ebrizuel|do288
[17:52:16] <theseb> greatgatsby: what is DRF?
[17:52:45] <greatgatsby> https://www.django-rest-framework.org/
[17:52:56] <bjs> Soni: like any community there are a small number of regulars who reply to everything
[17:52:56] <bjs> :P
[17:53:06] <theseb> greatgatsby: ah.Djago Rest Framework
[17:53:20] * greatgatsby is afk
[17:53:24] <Soni> bjs: yeah sure but uh... where's everyone else? .-.
[17:53:34] <grym> scratching other itches
[17:53:39] *** Joins: KeiraT (~k@lulzsec.co.uk)
[17:53:50] *** Joins: NeoCore (~neocore@37.120.204.180)
[17:54:15] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[17:54:34] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 252 seconds)
[17:54:53] *** Joins: LiftLeft (~LiftLeft@172.83.47.139)
[17:54:57] *** Joins: grooverman (~grooverma@177.102.119.40)
[17:54:58] *** Quits: rwbrambler (~Thunderbi@65.183.138.202) (Read error: Connection reset by peer)
[17:55:11] *** Joins: rwbrambler (~Thunderbi@65.183.138.202)
[17:55:13] <lericson> interesting
[17:55:24] <lericson> i set parallel=True and added a numba.prange to a stupidly simple loop
[17:55:39] <lericson> now it seems 10x slower than pure python
[17:55:58] <lericson> more than that
[17:56:37] <SnoopJ> sounds curious
[17:58:45] <lericson> https://bpa.st/4RUA is the NUMBA_PARALLEL_DIAGNOSTICS
[17:59:28] * SnoopJ can't see enough of the problem to say anything useful about it
[17:59:28] *** Joins: shad (~shad@user/shad)
[17:59:52] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[18:01:54] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[18:01:57] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[18:02:52] *** Joins: junktext (~junktext@77.247.181.214)
[18:04:18] <jinsun> Soni: more load only when you have really complicated types (and that is also fixed by a good IDE), but the cons are much worse 1) can't use type checkers 2) IDE auto-complete is crap 3) less readble code
[18:04:37] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[18:04:42] <lericson> how do I know which files were installed by which package in pip?
[18:04:53] <lericson> it seems some old version of libtbb is being loaded somewhere
[18:05:34] *** Joins: Payam (~Payam@138.106.57.131)
[18:05:50] <jinsun> lericson: https://docs.python.org/3/library/importlib.metadata.html#distribution-files ?
[18:06:40] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[18:06:51] *** Joins: ppw (~ppw@user/ppw)
[18:06:59] <Payam> Hi, I m trying to use pytest to run tests in paralellel. However, I want test acts in one test file to be in sequence. but all others should be in parallell
[18:07:06] <Payam> is it possible?
[18:07:44] <ppw> multiprocessing?
[18:10:53] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:11:35] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:11:37] <SnoopJ> Payam, I don't think pytest itself lets you sequence your tests, but there's a plugin for it. A naive way to parallelize running the tests is to use the -k parameter to run only a certain suite in each process (or however you want to divide it up)
[18:12:05] <Payam> SnoopJ I use xdist. It should run them in parallell
[18:12:22] <SnoopJ> Payam, okay, now we know that too.
[18:12:51] <Payam> SnoopJ but I want all tests to be in paralell. However, I want to make an exception in one file and let test acts to be run in sequence.
[18:13:04] *** Quits: bandit_za (~bandit_za@185.195.232.173) (Ping timeout: 256 seconds)
[18:13:28] *** Joins: Macuser (~Macuser@216.30.159.201)
[18:13:48] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:13:48] <SnoopJ> and as I said, pytest has no such facility. There is a plugin for it though: https://pytest-ordering.readthedocs.io/en/develop/
[18:13:51] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:825d:ca87:abe3:b552) (Ping timeout: 245 seconds)
[18:15:47] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:16:09] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:24dc:7e16:7bd2:c476)
[18:16:10] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[18:16:31] *** Quits: cmnky2 (~cmnky@user/cmnky) (Remote host closed the connection)
[18:16:50] *** Joins: grooverman (~grooverma@177.102.119.40)
[18:16:58] *** Joins: cmnky2 (~cmnky@user/cmnky)
[18:19:09] <rendar> if my A object has another object B, e.g. self.b = B() in A's __init__, if i want to put A objects into a set just like B's, i just have implement A's __hash__ and return hash(self.b) -- right?
[18:20:12] <lericson> no
[18:20:15] <lericson> they need to compare equal also
[18:21:41] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 264 seconds)
[18:21:56] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:9842:f3f7:64ff:d6dc)
[18:21:59] *** Parts: ppw (~ppw@user/ppw) ()
[18:22:05] *** Joins: node1 (~node1@user/node1)
[18:22:18] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 260 seconds)
[18:22:31] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:23:11] *** Joins: cul8r (~cul8r@2601:8c3:4280:ae00:6d9:f5ff:fe89:5583)
[18:23:17] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[18:23:32] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[18:23:56] *** Joins: darksun (~darksun@user/darksun)
[18:24:05] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[18:24:16] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[18:24:19] <bjs> indeed __eq__ is the more important one;  the hash is just for performance really
[18:24:31] <bjs> the only constraint on the hash is `if a == b then hash(a) == hash(b)`
[18:25:16] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:25:28] <p-i-> `ctypes.util.find_library('tdjson')` is working FINE on one ubuntu box, but throwing "No such file or directory" on another. https://bpa.st/LIBQ I've checked the filesystems, and `ll /usr/local/lib` shows the same files on both boxes.
[18:27:06] *** Joins: DPA (~DPA@2a05:41c0:2:4001:2ff:1ff:fe01:10d)
[18:27:13] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[18:27:32] <rendar> right right, you need to compare the object itself, when it is into an hash table
[18:27:48] <SnoopJ> an equality test is the last step, yep
[18:27:49] *** Joins: shad (~shad@user/shad)
[18:28:14] *** Quits: p3hz (~p3hz@198.55.124.115.adsl.inet-telecom.org) (Ping timeout: 252 seconds)
[18:28:42] *** Joins: Liblx (~Alex@2a02:810c:280:59c:3980:376:af62:ed5d)
[18:28:54] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:29:45] <rendar> then `def __hash__(self): return hash(self.b)` and `def __eq__(self, other): return self.b==other.b`
[18:29:51] <lericson> bjs: or the contrapositive, if they don't have the same hash, they cannot be equal
[18:29:51] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[18:30:07] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[18:30:42] <SnoopJ> p-i-, does it work if you do `ctypes.CDLL("/usr/local/lib/libtdjson.so.1.7.8)` ?
[18:30:47] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[18:30:49] <SnoopJ> err, with the closing "
[18:30:55] <bjs> lericson: I mean that's exactly the same constraint just said differently
[18:31:25] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (Excess Flood)
[18:31:42] <lericson> yes
[18:31:55] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[18:32:20] <lericson> like i said, the contrapositive
[18:32:51] <jabberwock> TIL
[18:33:06] <lericson> nice, numba with parallel=True just freezes completely
[18:33:14] <p-i-> SnoopJ: yeah that works
[18:33:18] <lericson> such speedup
[18:33:23] *** Joins: waynew (~wayne@user/waynew)
[18:33:45] <jabberwock> Hmm. I can use `curl -b <cookie-file>` and get a valid response.. but I can't seem to authenticate with python3 using http.cookiejar and requests
[18:33:47] <lericson> man i should just listen to the little voice inside and not bother with numba
[18:33:48] <p-i-> baffled as to why `find_library` fails to find the library on one box
[18:34:16] <p-i-> Identical boxes!
[18:34:37] <p-i-> lericson: I got good value out of numba
[18:34:47] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[18:34:50] <p-i-> Didn't try anything too fancy with it tho'
[18:34:54] <jabberwock> p-i-: `import sys; print(sys.path)` on both
[18:34:56] <lericson> you probably didn't attempt the insanity that is their paralellization features
[18:35:58] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[18:38:27] *** Joins: xiongxin (~quassel@113.116.35.63)
[18:38:53] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[18:39:28] *** Quits: AutomatedTester (uid395371@selenium/developer/AutomatedTester) (Quit: Connection closed for inactivity)
[18:39:36] <p-i-> jabberwock: yeah already did. paths match.
[18:39:48] <jabberwock> p-i-: permissions maybe
[18:40:00] <jabberwock> otherwise you'll have to consult an oracle :-/
[18:40:29] <SnoopJ> I wouldn't expect find_library() to care about sys.path, it looks like on posix systems it uses dyld semantics
[18:40:37] <Soni> we do wish we could be less assertive when talking on python-ideas tho
[18:40:43] <p-i-> https://stackoverflow.com/questions/28481900/oserror-cannot-open-shared-object-file-no-such-file-or-directory-even-though-f <-- there's an answer here that says " The other obvious thing to check are whether your Python process has sufficient permission to open and read libyaafe-python.so"
[18:40:49] <Soni> it feels rude to be assertive, but it also feels like ppl are just gonna ignore it otherwise...
[18:40:59] <SnoopJ> Soni, there isn't much to discuss on the other side of assertions
[18:41:22] <jabberwock> Soni: it sounds like feelings of not being listened to are haunting you
[18:41:23] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 250 seconds)
[18:41:35] <lericson> lol
[18:41:44] <jabberwock> tell that ego "Down boy! You're beautiful"
[18:41:57] <lericson> use NUMBA_THREADING_LAYER=tbb i get a segfault
[18:42:06] <jabberwock> ego is like a lil doggy we can train. </jabbersage>
[18:42:12] <SnoopJ> oops, dyld is MacOS
[18:42:14] <bjs> Soni: it's a mailing list, people are allowed to ignore by just not replying :)
[18:42:34] <SnoopJ> non-mac POSIX looks more involved (unsurprisingly)
[18:42:35] *** Joins: han-solo (~hanish@user/han-solo)
[18:42:52] <Soni> jabberwock: we can make ppl listen. it just sucks.
[18:42:59] <jabberwock> no you can't
[18:43:09] <jabberwock> you can't "make" anyone do anything they aren't willing to do.
[18:43:34] <Soni> jabberwock: no, we can increase our odds of ppl listening
[18:43:36] <jabberwock> if someone is an arse then they probably have a good reason that I personally don't care to know
[18:43:39] <Soni> same difference tho
[18:43:50] <SnoopJ> Soni, you can, but I'm not sure the ways you think will increase the odds are actually going to increase the odds.
[18:44:21] <waveclaw> well, as long as they are alive.  Corpses make excellent listeners. Not too good on the execultion of plans other than 'be deadwood' though.
[18:45:00] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[18:45:16] <jabberwock> Soni: tbf I have no context into what you're talking about. Something about mailing lists
[18:45:17] <SnoopJ> p-i-, what does `ldconfig -p | grep tdjson` give you on each system?
[18:45:26] <jabberwock> but you seem to be relying on others to do something you are capable of doing. grab your power back
[18:45:45] *** Joins: grooverman (~grooverma@177.95.12.14)
[18:45:47] <Soni> the context is when ppl make bugs and you have to tell them they're making bugs and yes we're kinda salty about it https://mail.python.org/archives/list/python-ideas@python.org/message/CPXRLKFULB44IK57SKCYV74AMY3GXDYE/
[18:45:58] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[18:46:16] <SnoopJ> "telling" is a very good way to get people not to listen to you.
[18:46:18] *** Joins: ham5urg (~ham5urg@p200300d167429600da1a9e2f0107e997.dip0.t-ipconnect.de)
[18:46:53] <p-i-> SnoopJ: wohhhh you got it. It's empty on the failbox
[18:47:00] <jabberwock> Soni: My "a-hole" meter went off at "Let US stop you right there". That's plain aggression and using invisible people to support it
[18:47:14] <p-i-> So what might have happened?
[18:47:36] <Soni> jabberwock: it's assertiveness, but also that's not invisible ppl
[18:47:38] <bjs> Soni: what bug?
[18:47:50] <jabberwock> you can't speak for others though
[18:47:55] *** ebrizuel|do288 is now known as qlixed
[18:48:03] <Soni> bjs: raising exceptions in generators doesn't raise them until iteration
[18:48:13] <jabberwock> I'm only giving my perspective because I may not be alone. I don't know how frustrated either side is, but that text wasn't pleasant to read
[18:48:13] <SnoopJ> p-i-, ctypes is almost certainly using ldconfig to locate libraries on your system, and it doesn't know about the library. Try running `ldconfig` to rebuild the cache and then re-run the print/grep and see if it's picked up tdjson on the failing system.
[18:48:16] <bjs> Soni: well... yeah
[18:48:18] <Soni> bjs: this is very different from raising exceptions in a function that returns an iterator/generator
[18:48:23] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[18:48:26] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[18:48:34] <bjs> Soni: well kinda
[18:49:33] <jabberwock> Soni: just my 2c - if you removed "Okay let us stop you right there." then the entire tone of the response improves
[18:49:33] <p-i-> SnoopJ: boom you got it
[18:49:40] * jabberwock goes back to the slythy toves
[18:49:40] *** Quits: Organizers|Robin (~Robin_Jad@152.67.64.160) (Remote host closed the connection)
[18:49:47] <Soni> bjs: https://github.com/ganarchy/GAnarchy/blob/ganarchy/ganarchy/data.py#L289-L299
[18:50:04] <bjs> Soni: yeah I'm not sure how throwing a bunch of code at me helps
[18:50:18] <Soni> we did say "real code"
[18:50:32] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[18:50:32] <Soni> this is the full context for the code
[18:51:05] <Soni> but yes, changing it to be a generator would make code like this stop working: https://github.com/ganarchy/GAnarchy/blob/ganarchy/ganarchy/data.py#L431-L436
[18:51:16] <yolo> https://packaging.python.org/tutorials/packaging-projects/  the sample of setup.cfg: I could not find explain about the configparser format, what does `projects_urls=` followed by an indented `Bug Tracker` mean, what does `package_dir=` followed by indented `=src` mean, magic to me
[18:51:35] <SnoopJ> p-i-, does it make sense?
[18:51:46] <bjs> Soni: unless that function was also a generator
[18:52:02] <bjs> I'm not sure what your point is,  other than "generators are different to normal functions" and of course yes, nobody is disputing that
[18:52:24] <Soni> (which is definitely NOT what you'd want, but anyway)
[18:52:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[18:53:06] <SnoopJ> yolo, "package_dir is a mapping of package names and directories. An empty package name represents the “root package”"  i.e. `package_dir = <a mapping of name=val>` where `name` can be empty for the root.
[18:53:29] <SnoopJ> I believe project_urls is also a mapping
[18:54:02] <Soni> bjs: you mean like this? https://github.com/ganarchy/GAnarchy/blob/ganarchy/ganarchy/data.py#L421-L457
[18:54:26] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[18:54:57] <bjs> Soni: i don't know what point you're trying to make
[18:55:11] <p-i-> SnoopJ: What doesn't make sense to me is how one system got it right, and the other didn't. All I've done is shunted a bunch of manually executed shell commands into my deploy.sh https://bpa.st/G2XQ
[18:55:34] <SnoopJ> p-i-, how did you install tdjson on each system?
[18:55:34] <bjs> Soni: you keep making weird threads about exception handling but there never seems to be a clear point or idea or actual concrete proposal that works so idk
[18:55:37] <yolo> aren't indented lines after `whatever = ` are just multiple randome text, or they're supposed to be ` x = y` multiple line definitions?
[18:55:47] <SnoopJ> oh, I see, it's in your paste
[18:56:08] <jabberwock> Soni: I don't think 433 will ever be reached
[18:56:11] <Soni> bjs: what do you mean "never seems to be a clear point or idea or actual concrete proposal"?
[18:56:18] <jabberwock> that's raised way above
[18:56:43] <Soni> jabberwock: what do you mean?
[18:56:55] <jabberwock> n/m
[18:57:11] <jabberwock> 4222 vis-a-vis 433 confused me
[18:57:13] <jabberwock> *422
[18:58:31] <Soni> bjs: what part of the source transformation was unclear?
[18:58:35] <SnoopJ> p-i-, the linker cache wasn't aware of the library on the one system. No idea why it was aware of it on the other system, maybe the cache was rebuilt on the working once since you installed, but not on the failing one. Perhaps you can invoke ldconfig at the end of the installation to be sure tdjson makes it into the cache.
[18:59:03] <p-i-> SnoopJ: wiring that in now
[18:59:06] *** Joins: d3vyL (d3vyL@host-80-181-161-131.pool80181.interbusiness.it)
[18:59:30] *** Joins: fdan (~fdan@192.146.154.3)
[18:59:46] <jabberwock> Have any of you successfully passed a cookie text file to requests? I'm having 0 success and getting a 401, while `curl -b file` works
[18:59:49] <p-i-> You guys are a real lifeline sometimes
[19:00:49] <jabberwock> SnoopJ: nice. I remember when manually running `ldconfig` was a required step after installing any library
[19:01:25] <Soni> hmm, has anyone made anything like rust's proc macros for python?
[19:02:06] *** Joins: redrum88 (~redrum88@user/redrum88)
[19:02:20] <SnoopJ> jabberwock, well, it kinda still is, but often some package manager is doing it for you :)
[19:02:20] <nedbat> yolo: can you link us to an example of what you mean?
[19:02:22] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Quit: bye)
[19:02:42] <jabberwock> SnoopJ: yes - I stated 'manually' because it used to not be a thing
[19:02:47] <SnoopJ> oops, you did say manually
[19:02:52] <jabberwock> I mean, package managers doing it
[19:03:02] <SnoopJ> I wonder if it's invoked on boot or somesuch, that could explain the discrepancy they're seeing.
[19:03:03] * jabberwock guzzles coffee
[19:03:03] <Soni> y'know, "how do you experiment with source transformations so you don't need to deal with 'never seems to be a clear point or idea or actual concrete proposal' kinda stuff"
[19:03:04] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[19:03:05] <cul8r> jabberwock do you mean passed a path or read the text into mem then pass the str
[19:03:16] <SnoopJ> But I guess any unrelated package being installed that invokes ldconfig would suffice
[19:03:20] <bjs> Soni: for a start, the fact it's a source transformation.  Just why?  this isn't how python features are implemented :P
[19:03:49] <jabberwock> cul8r: `cookies = http.cookiejar.MozillaCookieJar('/path/to/cookie.txt'); s = requests.Session(); s.cookies = cookies;` etc
[19:03:57] *** Joins: etbcf (~etbcf@2001:8a0:7b3a:dd01:5b71:54ef:d7f1:a203)
[19:04:00] <cul8r> ah ok
[19:04:00] <jabberwock> using that approach I'm getting a 401
[19:04:03] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:04:08] <Soni> bjs: it's the easiest way to explain it. give the syntax, give the target semantics. this gives a straightforward mapping between syntax and semantics.
[19:04:25] <Soni> bjs: if we were actually implementing the "source transformation"... yeah, we wouldn't implement it as a source transformation
[19:04:54] <han-solo> jabberwock: i'm reading you need to trick the website into thinking you are browser :D
[19:05:06] <han-solo> so try adding user-agent ?
[19:05:08] <jabberwock> han-solo: yes. I didn't actually look at curl's request
[19:05:13] <jabberwock> good call
[19:05:14] <Soni> bjs: we'd make functions carry those "with" exceptions, they'd be inspectable, but more importantly the VM would check those when bubbling up an exception - BUT NOT when a "raise" opcode is executed
[19:05:15] <jabberwock> 👍
[19:06:19] <Soni> bjs: makes sense?
[19:06:33] *** Parts: etbcf (~etbcf@2001:8a0:7b3a:dd01:5b71:54ef:d7f1:a203) ()
[19:06:50] <bjs> Soni: so your proposal is to add a source transformation to Python but in a way that isn't a source transformation
[19:06:55] <bjs> yes it makes perfect sense (???)
[19:07:06] <Soni> bjs: "as if" a source transformation
[19:07:11] <bjs> Soni: it's okay
[19:07:12] <Soni> do you know anything about equivalencies
[19:07:16] <Soni> ugh
[19:07:21] *** Joins: reasonman (~brandon@cpe-24-28-68-153.austin.res.rr.com)
[19:09:22] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[19:09:28] <han-solo> jabberwock: it worked ?
[19:09:40] <Soni> we have lua code that does source transformations to implement something that is natively available in the VM, but isn't exposed in the syntax. it's less efficient, but it does have the same semantics, and makes it easier to explain. source transformations are a tool and they don't need to be the actual implementation. and we shouldn't need to be telling you out of all ppl this. :/
[19:09:56] <jabberwock> han-solo: No. I added User-Agent and Accept: */*. When I print the cookies from the file - it only prints 1, and the last one
[19:10:44] <jabberwock> One doesn't have a value. I wonder if that's why. but that seems necessary
[19:10:44] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:11:04] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[19:11:08] <bjs> Soni: I mean, I ask the simple question of what it is you're suggesting to add to the language and the answer was "a source transformation"
[19:11:13] <bjs> but ... even that wasn't true
[19:11:27] <bjs> and then you ask what *isn't* clear about your proposals? :P
[19:11:31] <SnoopJ> Soni, again: "telling" is a very good way to get people *not* to listen to you.
[19:11:32] *** Joins: zaz\ (~zaz@poneybl.eu)
[19:11:34] <Soni> it's common for rust RFCs to be described in terms of source transformations, without necessarily being implemented as a source transformation. in fact sometimes it even becomes the target AST transformation of the features the RFC claims it transforms into. :p
[19:11:50] <SnoopJ> i.e. people don't really read mailing lists for lectures, they read them for discussions
[19:11:52] *** Quits: Barones (~Barones@2804:7f3:8987:b8e9:ca77:fb84:280a:faba) (Remote host closed the connection)
[19:12:04] *** Quits: zaz\ (~zaz@poneybl.eu) (Client Quit)
[19:12:32] *** Joins: y04nn (~y04nn@193.32.127.238)
[19:13:12] *** Joins: zaz\ (~zaz@poneybl.eu)
[19:13:20] <han-solo> jabberwock: Okay
[19:13:31] <Soni> bjs: are the syntax and the target semantics clear?
[19:13:45] <Soni> like, ignoring all this talk about source transformations or implementation details
[19:13:45] <bjs> Soni: okay here's a trick you can try,  try reading your original email without the examples
[19:14:22] <Soni> bjs: oh so you're one of those "programming langauges aren't languages" ppl
[19:14:26] <bjs> !?
[19:14:30] <bjs> What
[19:14:42] *** Joins: djapo (~archangel@user/djapo)
[19:14:57] *** Joins: apteryx (~maxim@207.35.95.110)
[19:15:03] <Soni> bjs: the "examples" convey just as much meaning as the rest of the email
[19:15:05] <bjs> No I'm saying, try read your original email again but without the examples. You'll see how lacking in explanation the email was.  That's why there's this long thread with those 2 other people trying to work out what your proposal really is
[19:15:08] <apteryx> hello! are argparse arguments parsed in the order they are defined?
[19:15:29] *** Joins: shad (~shad@user/shad)
[19:15:44] *** Joins: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr)
[19:16:15] <bjs> Soni: look if you want feedback on your technical writing and an explanation as to why nobody replies to your threads...
[19:16:20] <Soni> bjs: alright, so we get to be upset at ppl not reading the... email
[19:17:04] <VaniaPy> I need to pickle a machine learning model (it's my first time) ,here's the code https://bpa.st/ITYQ
[19:17:24] <VaniaPy> which part should i pickle.dump() ? mod?
[19:17:28] <bjs> Sometimes things are obvious and clear enough you can just throw an example out (e.g. a bug report) and everything is clear.  But for a subtle new language feature you really should take care in writing, where exposition is just as important as examples
[19:17:57] <Dev0n> hi, if I have celery tasks in a flask app that calls external endpoints using the requests lib and updates database entries using sqlalch+psycopg2, am I safe to run this with a gevent loop and assign like a concurrency of 500 per cpu core?
[19:18:00] <Soni> bjs: or at least say you're not understanding the code instead of assuming you do
[19:18:25] <Soni> (and be specific)
[19:18:36] <SnoopJ> A trick I like: if I am saying something is "obvious" or "clear," there are as I see it two possibilities: 1) it is obvious/clear to my audience and what I am saying does not need to be said at all, or 2) it is not necessarily clear/obvious, and I am going to insult readers for whom this is the case.
[19:18:51] *** Quits: tbcr (~tbcr@user/tbcr) (Remote host closed the connection)
[19:19:02] <SnoopJ> I find (2) is true far more often than (1)
[19:19:05] <bjs> Soni: ah I see, I've upset you by critising your writing so you're just going to throw wild claims about my Python abilities and about how I'm "one of those people" who doesn't think programming languages are languages (Whatever that means).
[19:19:06] <Soni> and especially don't go around replacing functions with generators or vice-versa .-.
[19:19:15] *** Joins: tbcr (~tbcr@user/tbcr)
[19:19:21] <grym> VaniaPy: ideally, you should avoid pickle entirely
[19:19:28] <grym> VaniaPy: though sklearn sure does love it :(
[19:19:38] <bjs> Soni: I've seen your threads about exceptions before,  they all seem to be wanting something about disambiguating multiple different `raise`s of the same type.
[19:19:48] <bjs> I'm sure I've even said it might be a good idea if you find the right feature before
[19:20:06] *** Quits: legola (~legola@46.235.100.217) (Remote host closed the connection)
[19:20:29] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[19:21:00] *** Joins: shad (~shad@user/shad)
[19:22:44] <VaniaPy> grym hmm what's the alternative then?
[19:22:45] *** Quits: xiongxin (~quassel@113.116.35.63) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:23:37] <grym> VaniaPy: there are a lot of serialization formats available
[19:23:39] <bjs> SnoopJ: obviously it is clear that this does not need to be said, after all it is a trivial matter
[19:24:57] <gitesh> how to access a class variable(capital) in it's class's method?
[19:25:05] <SnoopJ> bjs, not my sort of trivia, to be honest, so I usually just avoid entirely
[19:25:11] <gitesh> self.CLASSVARIABLE ?
[19:25:21] <bjs> gitesh: sure
[19:25:21] <dav1d> that works
[19:25:45] <bjs> SnoopJ: i've seen people write similar phrases to what I just have :P
[19:26:00] <SnoopJ> bjs, some journals are full of little else!
[19:26:07] *** PamiPetteri is now known as xormor
[19:27:09] <bjs> SnoopJ: clearly
[19:27:12] <bjs> :D
[19:27:53] *** Quits: Liblx (~Alex@2a02:810c:280:59c:3980:376:af62:ed5d) (Quit: WeeChat 3.2)
[19:29:18] *** Joins: greedom (~greedom@2001:16b8:320e:e00:9987:4657:c170:c7d8)
[19:30:31] *** dcaro is now known as dcaro_away
[19:30:42] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:30:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[19:30:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[19:31:12] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:32:11] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[19:33:24] *** Joins: arinov (~arinov@188.72.127.3)
[19:34:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:35:31] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[19:36:12] *** Quits: VaniaPy (~VaniaPy@adsl-52.176.58.193.tellas.gr) (Quit: Connection closed)
[19:36:21] <gitesh> Hi. Here is the code ---> https://bpa.st/YL2Q
[19:36:22] <gitesh> how should I access class variable SORTED_FREQUENCIES in the method getMove
[19:36:44] <bjs> gitesh: self.SORTED_FREQUENCIES like you asked earlier
[19:36:47] <bjs> it's the same question
[19:37:08] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[19:37:13] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:37:19] *** Quits: tbcr (~tbcr@user/tbcr) (Remote host closed the connection)
[19:37:30] *** Joins: dob1 (~dob1@user/dob1)
[19:37:43] *** Joins: tbcr (~tbcr@user/tbcr)
[19:38:00] *** Joins: murd0c (~Murdoc@user/murd0c)
[19:39:27] <NoImNotNineVolt> if i except Exception as e: how can i find the actual name of the exception class that's raised?
[19:39:40] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:39:49] <bjs> NoImNotNineVolt: type(e) is the type of the exception,  and it has a .__name__ if you really need just the name
[19:40:28] <NoImNotNineVolt> perfect, thanks :)
[19:40:47] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 246 seconds)
[19:42:00] *** Quits: tbcr (~tbcr@user/tbcr) (Remote host closed the connection)
[19:42:19] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[19:44:34] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:b9b1:7286:7d07:ab17)
[19:45:01] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:45:04] <fdan> hi there, what does __name__ == '__main__'  really does
[19:45:12] <fdan> i know its going to execute the main block
[19:45:14] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:45:31] <bjs> fdan: a Python file can run for two reasons: you can run it directly `python3 file.py` or you can import it `import file`
[19:45:36] <fdan> but why cant we just use main() , and what is the need of using __name__ == '__main__'
[19:45:39] <bjs> fdan: that line should be read as "if this file was not imported"
[19:45:44] *** Joins: ar1nov (~arinov@188.72.127.3)
[19:45:47] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[19:45:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[19:46:05] *** Joins: khrbt (~znc@user/khrbt)
[19:46:07] <bjs> fdan: you can, but that line is how you tell the difference between a file that was imported or one that was run directly.  You don't always need that line,  only if you need to detect which case you're in.
[19:46:13] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[19:46:20] <fdan> i see
[19:46:34] *** Quits: raxor2k (~raxor2k@78.158.232.147) ()
[19:46:41] <SnoopJ> fdan, __name__ is set when entering a module. If it's the entrypoint of the program, it has the special value __main__. If not, it has other uses. A very common one: `logging.getLogger(__name__)` gives you a logger associated with that code.
[19:46:47] *** Joins: arin0v (~arinov@188.72.127.3)
[19:46:49] <bjs> fdan: infact you don't need a main function at all, you can just write the code directly in the file
[19:47:06] <fdan> yes
[19:47:09] <bjs> fdan: it's just nice/good practice to write a main function and do that check,  so that someone else could import your file and then run main when *they* want to
[19:47:23] *** Joins: Narrat (~omnius@p200300df5f13e73906ea56fffe2e7cdc.dip0.t-ipconnect.de)
[19:47:35] *** Quits: rwbrambler (~Thunderbi@65.183.138.202) (Quit: rwbrambler)
[19:48:00] <SnoopJ> and this leaves the actual flow of control more up to the programmer: Python always just runs the entire module, if you want that to call a function based on *how* it got to that module, you use this clause.
[19:48:02] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[19:48:15] *** Joins: tbcr (~brclark@user/tbcr)
[19:48:27] *** Quits: arinov (~arinov@188.72.127.3) (Ping timeout: 240 seconds)
[19:49:33] *** Quits: rsx (~dummy@ppp-188-174-128-50.dynamic.mnet-online.de) (Quit: rsx)
[19:49:45] *** Joins: ar1n0v (~arinov@188.72.127.3)
[19:50:29] *** Quits: ar1nov (~arinov@188.72.127.3) (Ping timeout: 264 seconds)
[19:52:01] *** Quits: arin0v (~arinov@188.72.127.3) (Ping timeout: 250 seconds)
[19:52:07] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:52:17] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 264 seconds)
[19:53:25] <gitesh> are programming in real world(I mean company) programming against test cases?
[19:54:42] <grym> gitesh: "do people in the real world use tests"? yes, absolutely
[19:54:46] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[19:54:47] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[19:55:15] <gitesh> grym: ok, that's pretty much
[19:55:34] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Remote host closed the connection)
[19:56:31] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Client Quit)
[19:58:50] *** Quits: ar1n0v (~arinov@188.72.127.3) (Ping timeout: 250 seconds)
[19:59:15] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[20:00:41] *** Quits: waynew (~wayne@user/waynew) (Quit: adios)
[20:01:04] *** Joins: ar1n0v (~arinov@31.142.82.177)
[20:01:36] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[20:02:42] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[20:03:26] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[20:04:43] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[20:04:51] *** Joins: han-solo (~hanish@user/han-solo)
[20:05:29] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Ping timeout: 264 seconds)
[20:05:51] *** Joins: Samian (~Sami@user/samian)
[20:06:27] *** Quits: qlixed (~qlixed@152.170.36.244) (Ping timeout: 240 seconds)
[20:06:54] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:07:10] *** Joins: sandb0y (~pirate@user/sandb0y)
[20:09:18] *** Quits: Jefren (~Jefren@70.35.67.130) (Ping timeout: 265 seconds)
[20:10:32] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Ping timeout: 250 seconds)
[20:10:58] *** Joins: Jefren (~Jefren@70.35.67.58)
[20:11:34] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[20:13:00] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:13:56] *** Joins: emf (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05)
[20:14:00] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:16:03] *** Joins: emf_ (~emf@2620:10d:c090:400::5:5b52)
[20:18:26] *** Quits: emf (~emf@2601:602:9401:b660:47d:d5f4:4143:7c05) (Ping timeout: 245 seconds)
[20:18:53] *** Quits: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[20:21:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:21:25] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (Ping timeout: 252 seconds)
[20:25:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:26:26] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[20:26:35] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[20:27:24] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:27:59] *** Quits: pycode (~pycode@2001:b07:5d28:551:f600:878e:a789:f994) (Ping timeout: 250 seconds)
[20:29:22] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[20:30:18] *** Joins: zaz\ (~zaz@poneybl.eu)
[20:31:16] <CrtxReavr> If I had a mix of dicts of dicts, and/or dicts of dicts of dicts, ad nauseum, and I needed a way to recurse and drop any string keys that contain "password", how would I go about that?
[20:31:28] <CrtxReavr> I need one function for any complext dict structure.
[20:32:04] <nicode> CrtxReavr have you ever done recursion?
[20:32:06] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[20:32:28] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[20:32:31] <CrtxReavr> Yeah.
[20:32:51] <CrtxReavr> I mean. . . I could write a fancy recursive function. . .
[20:33:05] <CrtxReavr> I guess I'm wondering if there's a pythonic way of doing it.
[20:33:55] <nicode> Right, so you know you could do that, but you're looking for something that already does that, something that recursively explores an object and searches out an item or items given a key.
[20:34:21] *** Joins: badsektor (~badsektor@user/badsektor)
[20:35:01] <notevil> I wonder if glom could handle that?  I'm still learning all it can do.
[20:35:01] <CrtxReavr> Correct.
[20:35:37] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[20:35:42] *** Quits: Samian (~Sami@user/samian) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:37:45] <nicode> I did a bit of searching and so far haven't found anything but writing your own recursive search. That doesn't mean it doesn't exist though.
[20:37:49] *** Joins: jinsun__ (~quassel@user/jinsun)
[20:37:50] *** Joins: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com)
[20:38:01] *** Joins: irrgit (~irrgit@192.241.175.183)
[20:38:06] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[20:38:13] *** Joins: BillyZane2 (~BillyZane@91.196.220.174)
[20:38:17] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[20:38:20] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Killed (NickServ (GHOST command used by Omega037-B)))
[20:38:26] *** Joins: szymon__ (~ugh@staticline-31-183-189-254.toya.net.pl)
[20:38:26] *** Joins: mike18 (~geri@217-149-162-127.nat.highway.telekom.at)
[20:38:28] <mike18> hi
[20:38:29] *** Quits: szymon__ (~ugh@staticline-31-183-189-254.toya.net.pl) (Remote host closed the connection)
[20:38:37] *** Joins: dbristow_ (~dbristow@user/dbristow)
[20:38:56] <nicode> Personally, I'd write a recursive function to meet the need and keep searching on the site for a cleaner solution.
[20:39:01] *** Joins: waxfire6 (~waxfire@65.119.2.240)
[20:39:02] *** Joins: mchlumsky6 (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[20:39:03] *** Joins: redrum88_ (~redrum88@user/redrum88)
[20:39:04] <nicode> CrtxReavr ^^
[20:39:11] *** Joins: vicfred_ (~vicfred@user/vicfred)
[20:39:12] <mike18> can i write that in that way? future_data = {executor.submit(self.thread_worker, dba_data): dba_data for dba_data in data.iterrows()}
[20:39:14] <nicode> on the side**
[20:39:15] <mike18> data is a dataframe
[20:39:16] *** Joins: none (~stdout@216.163.21.11)
[20:39:29] *** Joins: RabidToaster1 (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:39:41] *** Joins: sirn- (~sirn@user/sirn)
[20:39:41] *** Joins: Dotz0cat_ (~Dotz0cat@h27.174.40.162.dynamic.ip.windstream.net)
[20:39:56] *** Joins: rwb (~augh@theguntretort.com)
[20:39:57] *** Joins: daniel-k4 (~daniel-k@fsf/emeritus/daniel-k)
[20:39:59] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:40:04] *** Joins: seednode9 (~seednode@user/seednode)
[20:40:05] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[20:40:05] *** Joins: lyr2 (~lyr@user/lyr)
[20:40:07] *** Joins: djhankb8 (~djhankb@208.113.164.68)
[20:40:08] *** Joins: Raichvent_ (~Raichvent@193.123.33.210)
[20:40:10] *** Joins: mrkajetanp_ (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[20:40:19] <bjs> mike18_: sure
[20:40:23] *** Joins: Samian (~Sami@user/samian)
[20:40:25] *** Joins: rigid- (~rigid@user/rigid)
[20:40:25] *** Joins: vlm_ (~vlm@user/vlm)
[20:40:28] *** Joins: BigShip3 (~BigShip@user/bigship)
[20:40:29] *** Joins: Cyp_ (~cyp@213.237.87.7)
[20:40:35] <KirkMcDonald> CrtxReavr: Doing this recursively should not be hard.
[20:40:36] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[20:40:51] *** Joins: mgubyt_ (u@mgub.yt)
[20:40:52] *** Joins: voidcat_ (~voidcat@user/voidcat)
[20:40:56] *** Joins: dodo__ (~dodo@user/dodo)
[20:40:57] *** Joins: et_ (~et@user/et)
[20:41:03] *** Joins: cheater1__ (~Username@user/cheater)
[20:41:05] <mike18> bjs: can i than access id = int(dba_data["id"]) ?
[20:41:06] *** Quits: darksun (~darksun@user/darksun) (Killed (NickServ (GHOST command used by darksun_!~darksun@151.70.208.139)))
[20:41:16] <bjs> mike18: I guess,  if "id" is one of the columns in the row
[20:41:22] *** Joins: _0x5c (~\0x5c@miaow/nonantedeux)
[20:41:38] <bjs> mike18: the executor isn't playing a role here -- are you seeing some bug/error/crash?
[20:41:41] <mike18> enerated an exception: name 'id' is not defined ...
[20:41:43] <mike18> g
[20:41:47] *** Joins: waveform_ (~quassel@waveform.plus.com)
[20:41:48] *** Joins: dhellmann_ (~dhellmann@097-081-099-073.res.spectrum.com)
[20:41:55] <bjs> mike18: the _name_ id?  maybe you can share the code and traceback
[20:42:02] *** Joins: akaWolf1 (~akaWolf@akawolf.org)
[20:42:02] *** Joins: mefistof1les (~mefistofe@user/mefistofeles)
[20:42:05] *** Joins: n000g (~NRG@user/nrg)
[20:42:06] *** Joins: lacrymol1gy (~lacrymolo@static-228-78-25-46.ipcom.comunitel.net)
[20:42:09] <CrtxReavr> KirkMcDonald, problem is stuff like dict of dicts of lists of dicts of strings. . .
[20:42:09] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[20:42:11] *** Joins: ExeciN (~ExeciN@user/nicexe)
[20:42:14] *** Joins: ArtisticMask (~masque@user/fluffymask)
[20:42:22] *** Joins: e9 (tkk@cybertron.redlight.li)
[20:42:26] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:42:27] *** Joins: darksun (~darksun@user/darksun)
[20:42:28] *** Joins: zerotypi1 (~zerotypic@66.96.192.176)
[20:42:35] *** Joins: gerikson1 (~gerikson@user/gerikson)
[20:42:36] *** Joins: arinov (~arinov@31.142.82.177)
[20:42:39] *** Joins: Vonter_ (~Vonter@user/vonter)
[20:42:45] *** Quits: _0x5c (~\0x5c@miaow/nonantedeux) (Client Quit)
[20:42:50] *** Joins: axisys_ (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[20:42:51] *** Joins: supakeen_ (~user@python/site-packages/supakeen)
[20:42:53] *** Joins: k162_ (~k162@user/k162)
[20:42:53] *** Joins: CuriousErnestBri (~CuriousEr@user/curiousernestbro)
[20:42:54] *** Joins: upsala1 (~zcb@185.213.155.160)
[20:42:54] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[20:42:55] *** Joins: rundown (~eb0t@90.199.243.11)
[20:42:56] *** Joins: kujo3 (~kujo@188.166.12.52)
[20:42:56] *** Joins: brelod_ (~me@90.244.150.142)
[20:43:04] *** Joins: _0x5c (~\0x5c@miaow/nonantedeux)
[20:43:07] *** Quits: rb (~augh@theguntretort.com) (Killed (mercury.libera.chat (Nickname regained by services)))
[20:43:07] *** rwb is now known as rb
[20:43:39] *** Joins: Hackerpcs_1 (~user@user/hackerpcs)
[20:43:51] *** Joins: Zer0xFF_ (m-3laxwu@matrix.michaelsasser.org)
[20:44:07] <CrtxReavr> KirkMcDonald, or other various combinations thereof, and it needs to be one function, since I can't predict.
[20:44:25] <KirkMcDonald> CrtxReavr: There'll be some type-checking involved, sure.
[20:44:45] *** Quits: \\ (~\0x5c@miaow/nonantedeux) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[20:44:45] *** _0x5c is now known as \\
[20:44:53] <CrtxReavr> These will actually be json.loads()'s of complex JSON responses, if that's not obviuos.
[20:45:08] <nicode> This is a decent starting poitn but only takes into account dictionaries, you'll need to add support for arrays and such: https://www.tutorialspoint.com/How-to-recursively-iterate-a-nested-Python-dictionary
[20:45:14] <CrtxReavr> With variable depth, complextity, etc.
[20:46:09] <nicode> I'm surprised there isn't already something out there that does this.
[20:46:38] <mike18> bjs: i foiund the issue
[20:46:40] <CrtxReavr> Actually. . . maybe this will be simpler than I'm making it in my head.
[20:46:45] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[20:47:04] *** Joins: nickodd0 (~nickodd@user/nickodd)
[20:47:04] <mike18> i have to write it like that:             future_to_dba = {executor.submit(self.thread_worker, dba_data): dba_data for index, dba_data in data.iterrows()}
[20:47:11] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:47:15] <mike18> but dont know why i need the index here ?!
[20:47:22] <mike18> if i remove index it gets some issues
[20:47:36] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (*.net *.split)
[20:47:36] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (*.net *.split)
[20:47:36] *** Quits: sandb0y (~pirate@user/sandb0y) (*.net *.split)
[20:47:36] *** Quits: FluffyMask (~masque@user/fluffymask) (*.net *.split)
[20:47:36] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[20:47:36] *** Quits: ar1n0v (~arinov@31.142.82.177) (*.net *.split)
[20:47:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[20:47:36] *** Quits: djhankb (~djhankb@208.113.164.68) (*.net *.split)
[20:47:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (*.net *.split)
[20:47:36] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[20:47:36] *** Quits: redrum88 (~redrum88@user/redrum88) (*.net *.split)
[20:47:36] *** Quits: zerotypic (~zerotypic@66.96.192.176) (*.net *.split)
[20:47:36] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (*.net *.split)
[20:47:36] *** Quits: cul8r (~cul8r@2601:8c3:4280:ae00:6d9:f5ff:fe89:5583) (*.net *.split)
[20:47:36] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (*.net *.split)
[20:47:36] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (*.net *.split)
[20:47:36] *** Quits: langAt (uid520190@user/langat) (*.net *.split)
[20:47:36] *** Quits: stdout (~stdout@216.163.21.11) (*.net *.split)
[20:47:36] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (*.net *.split)
[20:47:36] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:fe04:b022:91be:e39) (*.net *.split)
[20:47:36] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[20:47:36] *** Quits: mike18_ (~geri@217-149-162-127.nat.highway.telekom.at) (*.net *.split)
[20:47:36] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (*.net *.split)
[20:47:36] *** Quits: upsala (~zcb@185.213.155.160) (*.net *.split)
[20:47:36] *** Quits: RougeR (~rougex250@user/rouger) (*.net *.split)
[20:47:36] *** Quits: szymon_ (~ugh@staticline-31-183-189-254.toya.net.pl) (*.net *.split)
[20:47:36] *** Quits: ConstantDesc (~textual@cpc158823-hari22-2-0-cust72.20-2.cable.virginm.net) (*.net *.split)
[20:47:36] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[20:47:36] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (*.net *.split)
[20:47:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (*.net *.split)
[20:47:36] *** Quits: drogas (~drogas@jump2.jet.uk) (*.net *.split)
[20:47:36] *** Quits: gusto (~Augustus@109.255.100.54) (*.net *.split)
[20:47:36] *** Quits: brelod (~me@90.244.150.142) (*.net *.split)
[20:47:36] *** Quits: seednode (~seednode@user/seednode) (*.net *.split)
[20:47:36] *** Quits: manti7 (~manti7@176.10.104.94) (*.net *.split)
[20:47:36] *** Quits: _xor (~xor@74.215.232.67) (*.net *.split)
[20:47:36] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:7198:69bc:11b9:2f9d) (*.net *.split)
[20:47:36] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[20:47:36] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[20:47:36] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (*.net *.split)
[20:47:36] *** Quits: Vonter (~Vonter@user/vonter) (*.net *.split)
[20:47:36] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:9de6:7cb1:acca:d016) (*.net *.split)
[20:47:36] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com) (*.net *.split)
[20:47:36] *** Quits: et (~et@user/et) (*.net *.split)
[20:47:36] *** Quits: Dotz0cat (~Dotz0cat@h27.174.40.162.dynamic.ip.windstream.net) (*.net *.split)
[20:47:36] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[20:47:36] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[20:47:36] *** Quits: rigid (~rigid@user/rigid) (*.net *.split)
[20:47:36] *** Quits: c10l (~c10l@user/c10l) (*.net *.split)
[20:47:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[20:47:36] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[20:47:36] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[20:47:36] *** Quits: jjasghar (~quassel@user/jjasghar) (*.net *.split)
[20:47:36] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[20:47:36] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (*.net *.split)
[20:47:36] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[20:47:36] *** Quits: kujo2 (~kujo@188.166.12.52) (*.net *.split)
[20:47:36] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[20:47:36] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[20:47:36] *** Quits: gustaf (~gerikson@user/gerikson) (*.net *.split)
[20:47:36] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[20:47:36] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[20:47:36] *** Quits: Guest8130 (~il@irc.oh1cgn.fi) (*.net *.split)
[20:47:36] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[20:47:36] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:e429:af12:c956:fdff) (*.net *.split)
[20:47:36] *** Quits: reset (~reset@user/reset) (*.net *.split)
[20:47:36] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (*.net *.split)
[20:47:36] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (*.net *.split)
[20:47:36] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[20:47:36] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (*.net *.split)
[20:47:36] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (*.net *.split)
[20:47:36] *** Quits: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net) (*.net *.split)
[20:47:36] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3d27-f9b8-30f5-ae89.res6.spectrum.com) (*.net *.split)
[20:47:36] *** Quits: decimuscorvinus_ (~jimmy@136.37.105.112) (*.net *.split)
[20:47:37] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (*.net *.split)
[20:47:37] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (*.net *.split)
[20:47:37] *** Quits: k162 (~k162@user/k162) (*.net *.split)
[20:47:37] *** Quits: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me) (*.net *.split)
[20:47:37] *** Quits: defjam (~eb0t@90.199.243.11) (*.net *.split)
[20:47:37] *** Quits: apteryx (~maxim@207.35.95.110) (*.net *.split)
[20:47:37] *** Quits: alxndr (~alexander@ybti.net) (*.net *.split)
[20:47:37] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (*.net *.split)
[20:47:37] *** Quits: swinnenb (~swinnenb@user/swinnenb) (*.net *.split)
[20:47:37] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[20:47:37] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[20:47:37] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[20:47:37] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[20:47:37] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[20:47:37] *** Quits: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153) (*.net *.split)
[20:47:37] *** Quits: dld (~davidlowr@2601:197:600:1210:b589:86d2:35c3:a95e) (*.net *.split)
[20:47:37] *** Quits: waveform (~quassel@waveform.plus.com) (*.net *.split)
[20:47:37] *** Quits: nrg (~NRG@user/nrg) (*.net *.split)
[20:47:37] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[20:47:37] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (*.net *.split)
[20:47:37] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (*.net *.split)
[20:47:37] *** Quits: voidcat (~voidcat@user/voidcat) (*.net *.split)
[20:47:37] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[20:47:37] *** Quits: lyr (~lyr@user/lyr) (*.net *.split)
[20:47:37] *** Quits: emptynine (tkk@cybertron.redlight.li) (*.net *.split)
[20:47:37] *** Quits: TML (~tml@user/tml) (*.net *.split)
[20:47:37] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[20:47:37] *** Quits: waxfire (~waxfire@65.119.2.240) (*.net *.split)
[20:47:37] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[20:47:37] *** Quits: Raichvent (~Raichvent@193.123.33.210) (*.net *.split)
[20:47:37] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (*.net *.split)
[20:47:37] *** Quits: flyback (~flyback@2601:540:8201:1e60:25f0:86e0:2201:1375) (*.net *.split)
[20:47:37] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (*.net *.split)
[20:47:37] *** Quits: EgonX_ (~EgonX@2601:2c6:47f:9c18:f9d6:48b1:5c28:31fb) (*.net *.split)
[20:47:37] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[20:47:37] *** Quits: nickodd (~nickodd@user/nickodd) (*.net *.split)
[20:47:37] *** Quits: dbristow (~dbristow@user/dbristow) (*.net *.split)
[20:47:37] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (*.net *.split)
[20:47:37] *** Quits: ballingt (sid190590@id-190590.helmsley.irccloud.com) (*.net *.split)
[20:47:37] *** Quits: NIXKnight (~NIXKnight@198.98.57.76) (*.net *.split)
[20:47:37] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (*.net *.split)
[20:47:37] *** Quits: BillyZane (~BillyZane@91.196.220.174) (*.net *.split)
[20:47:37] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de) (*.net *.split)
[20:47:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[20:47:37] *** Quits: cyberpear (uid364019@fedora/cyberpear) (*.net *.split)
[20:47:37] *** Quits: lacrymology (~lacrymolo@static-228-78-25-46.ipcom.comunitel.net) (*.net *.split)
[20:47:37] *** Quits: Hackerpcs (~user@user/hackerpcs) (*.net *.split)
[20:47:37] *** Quits: raph_ael (~raphael@user/raph-ael/x-7806685) (*.net *.split)
[20:47:37] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (*.net *.split)
[20:47:37] *** Gustavo6046_ is now known as Gustavo6046
[20:47:37] *** RabidToaster1 is now known as RabidToaster
[20:47:37] *** Dotz0cat_ is now known as Dotz0cat
[20:47:37] *** mchlumsky6 is now known as mchlumsky
[20:47:37] *** BigShip3 is now known as BigShip
[20:47:37] *** Raichvent_ is now known as Raichvent
[20:47:37] *** waxfire6 is now known as waxfire
[20:47:37] *** daniel-k4 is now known as daniel-k
[20:47:37] *** et_ is now known as et
[20:47:37] *** vlm_ is now known as vlm
[20:47:37] *** lyr2 is now known as lyr
[20:47:40] *** sirn- is now known as sirn
[20:47:42] *** redrum88_ is now known as redrum88
[20:47:43] *** cheater1__ is now known as cheater
[20:47:44] *** djhankb8 is now known as djhankb
[20:47:44] *** seednode9 is now known as seednode
[20:47:44] *** akaWolf1 is now known as akaWolf
[20:47:44] *** e9 is now known as emptynine
[20:47:46] *** lukedashjr is now known as luke-jr
[20:47:57] *** dodo__ is now known as dodo
[20:48:00] *** Joins: Dev0n (~Dev0n@user/dev0n)
[20:48:00] *** Joins: digilink (~digilink@user/digilink)
[20:48:06] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[20:48:18] <mike18> bjs: i have to write it like that: future_to_dba = {executor.submit(self.thread_worker, dba_data): dba_data for index, dba_data in data.iterrows()} ... but dont know why i need the index here ?!
[20:48:41] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[20:48:43] *** Zer0xFF_ is now known as Zer0xFF
[20:48:44] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:48:50] *** Joins: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net)
[20:49:11] *** Joins: Duckle (~Duckle@user/duckle)
[20:49:16] *** Quits: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com) (Quit: Leaving)
[20:49:35] <mike18> https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example ... how can i return data from the thread here?
[20:49:47] *** mefistof1les is now known as mefistofeles
[20:49:47] <mike18> ah it does already
[20:49:49] *** Joins: JanC (~janc@user/janc)
[20:49:56] <mike18> but what happens if there is a exception in the thread?
[20:50:10] *** Joins: Abrax- (~Abrax@user/abrax)
[20:50:13] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Killed (NickServ (GHOST command used by thekingofbandit1!thekingofb@thunix.net)))
[20:50:15] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[20:50:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:50:32] <KirkMcDonald> CrtxReavr: It's really just https://bpa.st/6HAA
[20:50:32] *** Joins: c4017__ (~c4017@2604:3d08:747f:7c90:6970:bd0b:559e:756f)
[20:50:35] *** nickodd0 is now known as nickodd
[20:50:37] *** Quits: brelod_ (~me@90.244.150.142) (Quit: leaving)
[20:50:57] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[20:51:05] *** Joins: brelod (~me@90.244.150.142)
[20:51:07] *** Joins: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[20:51:24] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[20:51:24] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Read error: Connection reset by peer)
[20:51:26] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[20:51:32] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Read error: Connection reset by peer)
[20:51:35] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Read error: Connection reset by peer)
[20:51:38] *** Quits: Samian (~Sami@user/samian) (Read error: Connection reset by peer)
[20:51:44] *** Quits: Myst (~Myst@user/myst) (Quit: Ping timeout (120 seconds))
[20:51:50] *** Quits: zwindl (~abc@user/abc) (Ping timeout: 265 seconds)
[20:51:56] *** Quits: dstein64 (~dstein64@dannyadam.com) (Excess Flood)
[20:52:01] *** Joins: p-i- (~Ohmu@223.206.71.80)
[20:52:03] *** Joins: Myst (~Myst@user/myst)
[20:52:03] *** Joins: abc_ (~abc@user/abc)
[20:52:04] *** Joins: gusto (~Augustus@109.255.100.54)
[20:52:08] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[20:52:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:52:08] *** Joins: cul8r (~cul8r@2601:8c3:4280:ae00:6d9:f5ff:fe89:5583)
[20:52:08] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[20:52:08] *** Joins: langAt (uid520190@user/langat)
[20:52:08] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:fe04:b022:91be:e39)
[20:52:08] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[20:52:08] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[20:52:08] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:7198:69bc:11b9:2f9d)
[20:52:08] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:52:08] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:9de6:7cb1:acca:d016)
[20:52:08] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com)
[20:52:08] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[20:52:08] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[20:52:08] *** Joins: Guest8130 (~il@irc.oh1cgn.fi)
[20:52:08] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:e429:af12:c956:fdff)
[20:52:08] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[20:52:08] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[20:52:08] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3d27-f9b8-30f5-ae89.res6.spectrum.com)
[20:52:08] *** Joins: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef)
[20:52:08] *** Joins: alxndr (~alexander@ybti.net)
[20:52:08] *** Joins: shurane (sid132556@id-132556.helmsley.irccloud.com)
[20:52:08] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[20:52:08] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[20:52:08] *** Joins: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[20:52:08] *** Joins: dld (~davidlowr@2601:197:600:1210:b589:86d2:35c3:a95e)
[20:52:08] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[20:52:08] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[20:52:08] *** Joins: TML (~tml@user/tml)
[20:52:08] *** Joins: flyback (~flyback@2601:540:8201:1e60:25f0:86e0:2201:1375)
[20:52:08] *** Joins: EgonX_ (~EgonX@2601:2c6:47f:9c18:f9d6:48b1:5c28:31fb)
[20:52:08] *** Joins: ballingt (sid190590@id-190590.helmsley.irccloud.com)
[20:52:08] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::81de)
[20:52:08] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[20:52:08] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[20:52:11] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Max SendQ exceeded)
[20:52:11] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Max SendQ exceeded)
[20:52:11] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Max SendQ exceeded)
[20:52:11] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Max SendQ exceeded)
[20:52:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Max SendQ exceeded)
[20:52:11] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Max SendQ exceeded)
[20:52:19] *** Quits: dgw (dgw@sopel/admin/dgw) (Ping timeout: 265 seconds)
[20:52:21] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[20:52:29] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[20:52:29] *** Joins: s1b1 (~s1b1@user/s1b1)
[20:52:52] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:53:17] *** Quits: llh (~llh@user/llh) (Ping timeout: 265 seconds)
[20:53:17] *** Quits: ToAruShiroiNeko (~eva@user/toarushiroineko) (Ping timeout: 265 seconds)
[20:53:26] *** Joins: magla (~gelignite@55d4d08c.access.ecotel.net)
[20:53:26] *** Joins: apteryx (~maxim@207.35.95.110)
[20:53:29] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[20:53:32] *** Joins: node1 (~node1@user/node1)
[20:53:39] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[20:53:41] *** Joins: jiffe (~jiffe@mail.nsab.us)
[20:53:42] <CrtxReavr> KirkMcDonald, that actually looks more complex than what I have in my head. . . but that would work too I bet. . . Let me run with what I'm thinking and we can compare notes.
[20:53:45] <CrtxReavr> Appreciate it.
[20:53:46] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Ping timeout: 265 seconds)
[20:53:46] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[20:53:46] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[20:53:46] *** Quits: c4017_ (~c4017@S0106c0943583f893.vf.shawcable.net) (Ping timeout: 265 seconds)
[20:53:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 265 seconds)
[20:53:46] *** Quits: John__ (~johnau@202.172.127.116) (Ping timeout: 265 seconds)
[20:53:46] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 265 seconds)
[20:53:46] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 265 seconds)
[20:53:57] <jinsun_> <mike18> "bjs: i have to write it like..." <- you don't need index, your row will be dba_data[1] if you don't unpack the tuple
[20:54:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:54:22] <mike18> jinsun_: ok - question to: https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example
[20:54:27] *** Joins: John__ (~johnau@202.172.127.116)
[20:54:33] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:54:36] *** Joins: dgw (dgw@sopel/admin/dgw)
[20:54:40] *** Joins: reset (~reset@user/reset)
[20:54:41] *** Quits: LiftLeft (~LiftLeft@172.83.47.139) (Read error: Connection reset by peer)
[20:54:43] <mike18> isnt it bad if the thread starts runs my operation than exists again?
[20:54:44] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[20:54:46] *** Joins: timothy (~timothy@redhat/timothy)
[20:54:47] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[20:54:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:54:52] <mike18> than another thread is started again - no?
[20:55:03] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:55:07] <bjs> mike18: no, it's a pool of threads. Let the thread pool manage the threads
[20:55:08] <bjs> that's what it's for
[20:55:33] <bjs> it will decide when to start and stop the threads
[20:55:36] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[20:55:47] *** rundown is now known as defjam
[20:55:55] *** Joins: khrbt (~znc@user/khrbt)
[20:56:07] <mike18> ok
[20:56:07] <timothy> hi, we found a weird bug by using ssl (import ssl) + multithreading when setblocking(0) is done BEFORE connect on Python 3.6, but I can't find anything on 3.7 changelog that may explain this. was it a known problem?
[20:56:25] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f169-568c-84c0-edb5.res6.spectrum.com) (Quit: jarthur)
[20:56:35] <timothy> or, is it always better to set setblocking(0) after the connect?
[20:56:39] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-5422-0cb4-aeaf-4572.res6.spectrum.com)
[20:57:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:58:03] *** Joins: newpy (~newpy@2601:280:4381:1390:305a:ce35:a10a:f73b)
[20:58:27] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[20:58:52] *** Joins: gutt__ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net)
[20:58:52] *** Joins: maharg101_ (~maharg101@savoy.force9.co.uk)
[20:58:59] *** Joins: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me)
[20:58:59] *** supakeen_ is now known as supakeen
[20:59:17] *** Joins: lifefir34 (~lifefir3@152.37.120.101)
[20:59:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:59:32] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[20:59:39] *** Quits: lifefir3 (~lifefir3@152.37.120.101) (Read error: Connection reset by peer)
[20:59:39] *** Quits: notepad (~notepad@129.159.46.243) (Read error: Connection reset by peer)
[20:59:39] *** lifefir34 is now known as lifefir3
[20:59:39] *** Quits: jgrout (~textual@pool-71-174-224-95.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[20:59:40] <newpy> if I have an m*n np.array, is there a neat way to grab a column and assign it to a variable as a column vector? (x = a[:,i] seems to reduce into a 1d array)
[20:59:42] *** Quits: junktext (~junktext@77.247.181.214) (Read error: Connection reset by peer)
[20:59:44] *** Joins: notepad5 (~notepad@129.159.46.243)
[21:00:10] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[21:00:20] *** Joins: junktext (~junktext@109.201.152.174)
[21:00:24] <newpy> worst case I guess I can just say x = a[:,i].reshape(-1,1) but that seems wordy
[21:00:28] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 252 seconds)
[21:01:01] *** Quits: mistery (~mistery@96.59.174.9) (Ping timeout: 265 seconds)
[21:01:07] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:01:16] <KirkMcDonald> newpy: a[:, i:i+1]
[21:01:24] <newpy> KirkMcDonald, ty
[21:01:47] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:387b:9fcf:63d:76d6)
[21:01:49] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Quit: Leaving)
[21:01:59] *** Quits: maharg101 (~maharg101@savoy.force9.co.uk) (Ping timeout: 265 seconds)
[21:02:08] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:02:18] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:02:28] *** Quits: gutt_ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (Ping timeout: 265 seconds)
[21:02:41] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:03:29] *** Quits: greedom (~greedom@2001:16b8:320e:e00:9987:4657:c170:c7d8) (Remote host closed the connection)
[21:03:30] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:03:32] *** Quits: helloplsdohelp (~helloplsh@203-129-25-247.cb8119.syd.static.aussiebb.net) (Remote host closed the connection)
[21:03:55] *** Quits: emf_ (~emf@2620:10d:c090:400::5:5b52) (Quit: emf_)
[21:03:56] *** Joins: helloplsdohelp (~helloplsh@203-129-25-247.cb8119.syd.static.aussiebb.net)
[21:04:29] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[21:04:57] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[21:05:17] *** Joins: devios (~devios@75-166-173-50.hlrn.qwest.net)
[21:06:06] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:06:51] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:07:03] *** Joins: int3l (~int3l@78-83-117-10.spectrumnet.bg)
[21:08:44] *** Quits: mike18 (~geri@217-149-162-127.nat.highway.telekom.at) (Remote host closed the connection)
[21:09:22] *** Joins: LiftLeft (~LiftLeft@154.21.114.169)
[21:09:30] *** Joins: phlixi_ (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de)
[21:09:41] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:09:55] <devios> I would appreciate it if anyone is willing to take a look at https://bpa.st/WUQA and help me understand why the list count method isn't returning what I expect it to return.  I'm using 3.8.10 to run the code.
[21:10:02] <SnoopJ> newpy, "1d array" and "column vector" are synonyms to me, but it sounds like you want a second dimension, and the given solution should work as long as i is positive
[21:10:25] *** Joins: dhch0 (~dhch@185.213.154.168)
[21:10:30] *** Joins: djhankb8 (~djhankb@208.113.164.68)
[21:10:41] *** Joins: seednode9 (~seednode@user/seednode)
[21:10:54] *** Joins: sco1_ (~sco1@charon.whatbox.ca)
[21:10:54] *** Joins: cmk (~cole@user/cole)
[21:10:55] <SnoopJ> (numpy doesn't really have "rows" or "columns" except in some convenience functions)
[21:10:58] *** Joins: MrAureliusR_ (~MrAureliu@user/mraureliusr)
[21:11:09] *** Joins: Foxyloxy_ (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[21:11:09] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[21:11:26] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[21:11:29] *** Joins: woky_ (~woky@li1651-31.members.linode.com)
[21:11:32] *** Joins: Magician (deepy@user/deepy)
[21:11:34] *** Joins: fartyfoam3 (~fartyfoam@178-118-118-2.access.telenet.be)
[21:11:38] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[21:11:44] *** Joins: Cyp (~cyp@213.237.87.7)
[21:11:45] <newpy> yea I wasn't sure of terminology, just wanted a compact version of x = a[:,i].reshape(-1,1)
[21:11:49] *** Joins: d3x_ (michal@bielaw.ski)
[21:11:55] *** Joins: mxp_ (~mxp@185.16.205.131)
[21:12:02] *** Joins: rvgate3 (~rvgate@user/rvgate)
[21:12:11] *** Joins: Quaack (~Quack@185.21.216.169)
[21:12:13] <newpy> seemed like my way was doing extra cpu work
[21:12:26] *** Joins: frat3rius9 (~frat3rius@host-85.14.84.172.static.3s.pl)
[21:12:28] *** Joins: strungout (znc@mutant.penguin.fyi)
[21:12:35] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[21:12:37] *** Joins: phylaz1 (~phylaz@219.92-221-176.customer.lyse.net)
[21:12:38] <SnoopJ> `x = a[:, i, np.newaxis]` is an alternative spelling
[21:12:44] *** Joins: noarb- (~noarb@user/noarb)
[21:12:49] *** dbristow_ is now known as dbristow
[21:12:51] *** Quits: MrC (Ben@mrbenc.net) (Killed (platinum.libera.chat (Nickname regained by services)))
[21:12:52] *** Joins: MrC (Ben@mrbenc.net)
[21:12:52] *** Joins: cursey- (~cursey@136-26-145-118.cab.webpass.net)
[21:12:53] *** Joins: phryk_ (~totallyno@user/phryk)
[21:12:55] *** Joins: voidcat (~voidcat@user/voidcat)
[21:12:58] <SnoopJ> reshape() isn't expensive, though.
[21:12:58] *** Joins: e9 (tkk@cybertron.redlight.li)
[21:13:07] *** Joins: poorboy_ (~poorboy@159.89.189.144)
[21:13:17] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[21:13:17] *** Joins: Wulf4 (~Wulf@user/wulf)
[21:13:22] *** Joins: Alexer- (~alexer@alexer.net)
[21:13:24] *** Joins: Exagone313 (exa@irc.moe)
[21:13:25] *** Joins: flokuehn_ (~flokuehn@mue-88-130-54-078.dsl.tropolys.de)
[21:13:25] *** Joins: samuelb (~samuelber@nata01.lip.pt)
[21:13:27] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[21:13:29] *** Joins: henbruas_ (~henbruas@ti0003a400-3211.bb.online.no)
[21:13:29] <newpy> if it's on-par maybe reshape is more explicit
[21:13:31] *** Joins: yolo_ (~xxiao@159.89.184.51)
[21:13:31] <SnoopJ> it just changes the "strides" numpy has to take over the 1D representation it keeps in memory, a few divisions
[21:13:32] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[21:13:35] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[21:13:38] *** Joins: polyrob_ (~rob@user/polyrob)
[21:13:39] *** Joins: BlessJah_ (~BlessJah@user/blessjah)
[21:13:43] *** Joins: PacKetIV (PacKetIV@user/packetiv)
[21:13:46] *** Joins: thm_ (~thomas@fedora/thm)
[21:13:47] *** Joins: JoelJoel (~jjshoe@user/joel)
[21:13:50] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[21:13:52] *** Joins: DerpGusta_ (~quassel@user/derpgusta)
[21:14:00] *** Joins: f-chymera (~chymera@ns1000526.ip-51-81-46.us)
[21:14:01] *** Joins: DXR_ (~lyrical@213.16.170.112.dsl.dyn.forthnet.gr)
[21:14:06] *** Joins: rundown (~eb0t@90.199.243.11)
[21:14:10] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[21:14:12] *** Joins: kaos02_ (~kaos02@12.186.233.220.static.exetel.com.au)
[21:14:17] *** Joins: kib_ (~kib@user/kib)
[21:14:17] *** Joins: nvz_ (~user@nvz.farted.online)
[21:14:18] *** Joins: mrhands_ (~mrhands@user/mrhands)
[21:14:20] *** Joins: randall_ (~randall@user/randall)
[21:14:21] *** Joins: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109)
[21:14:25] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[21:14:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (platinum.libera.chat (Nickname regained by services)))
[21:14:25] *** finn_elija is now known as FinnElija
[21:14:28] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: cole (~cole@user/cole) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: sco1 (~sco1@charon.whatbox.ca) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: woky (~woky@li1651-31.members.linode.com) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Ping timeout: 265 seconds)
[21:14:28] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: az (az@user/azz) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Alexer (~alexer@alexer.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: mxp (~mxp@185.16.205.131) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: mastardet (~mastardet@user/mastardet) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: d3x (michal@bielaw.ski) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Batzy (~Batzy@user/batzy) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: suffer (znc@mutant.penguin.fyi) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Exa (exa@irc.moe) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: meti (~meti@user/meti) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: petemc (~pete@vps-80fad31a.vps.ovh.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: djhankb (~djhankb@208.113.164.68) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Roey (~Roey@user/Roey) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: njt (~njt@zaph.org) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: thm (~thomas@fedora/thm) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: BlessJah (~BlessJah@user/blessjah) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: yolo (~xxiao@159.89.184.51) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: seednode (~seednode@user/seednode) (Read error: Connection reset by peer)
[21:14:29] *** Quits: defjam (~eb0t@90.199.243.11) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: emptynine (tkk@cybertron.redlight.li) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Cyp_ (~cyp@213.237.87.7) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: kib (~kib@user/kib) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: mrhands (~mrhands@user/mrhands) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: pankid (~quassel@pankid.club) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: DerpGusta (~quassel@user/derpgusta) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: rvgate (~rvgate@user/rvgate) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: Raska (~raska@phare.normalesup.org) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: doc (~doc@user/doc) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: WantToHelp (~dale@user/wanttohelp) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: dhch (~dhch@185.213.154.168) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: deepy (deepy@user/deepy) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Ping timeout: 265 seconds)
[21:14:29] *** Quits: noyb (~noyb@user/noyb) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: DXR (~lyrical@213.16.170.112.dsl.dyn.forthnet.gr) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: chymera (~chymera@ns1000526.ip-51-81-46.us) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Read error: Connection reset by peer)
[21:14:30] *** Quits: flokuehn (~flokuehn@mue-88-130-54-078.dsl.tropolys.de) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: edr (~edr@user/edr) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: dskull (~dskull@user/dskull) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: effprime (~effprime@user/effprime) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: poorboy (~poorboy@159.89.189.144) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: moto (~moto@user/moto) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: sale (~sale@ypocit.initech.link) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: nvz (~user@nvz.farted.online) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: u4t (~chat@78.ip-139-99-236.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: phryk (~totallyno@user/phryk) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Quack (~Quack@185.21.216.169) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: hodapp (~mawson@user/hodapp) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: wgwz (~wgwz@45.55.193.150) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: arinov (~arinov@31.142.82.177) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: klu (~klu@user/klu) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: jamwil (~jamwil@user/jamwil) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: randall (~randall@user/randall) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Swayze (~gryster@user/swayze) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: mkoskar (~mkoskar@user/mkoskar) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: cursey (~cursey@136-26-145-118.cab.webpass.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Balzy (~Balzy@host-79-20-148-220.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Yasumoto (~Yasumoto@136.152.37.118) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: Confusioned (~AnySomebo@pd9eeb15c.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[21:14:30] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (Quit: Goodbye)
[21:14:30] *** Quits: {HD} (~{HD}@86.106.121.213) (Read error: Connection reset by peer)
[21:14:30] *** Wulf4 is now known as Wulf
[21:14:30] *** dhch0 is now known as dhch
[21:14:30] *** frat3rius9 is now known as frat3rius
[21:14:30] *** djhankb8 is now known as djhankb
[21:14:30] *** phylaz1 is now known as phylaz
[21:14:30] *** henbruas_ is now known as henbruas
[21:14:30] *** cmk is now known as cole
[21:14:30] *** seednode9 is now known as seednode
[21:14:30] *** rvgate3 is now known as rvgate
[21:14:30] *** fartyfoam3 is now known as fartyfoam
[21:14:31] *** Quits: voidcat_ (~voidcat@user/voidcat) (Read error: Connection reset by peer)
[21:14:31] *** Joins: wgwz_ (~wgwz@45.55.193.150)
[21:14:31] *** Joins: njt_ (~njt@zaph.org)
[21:14:32] *** Joins: dskullz (~dskull@user/dskull)
[21:14:32] *** Joins: Forkk_ (~forkk@li926-228.members.linode.com)
[21:14:32] *** e9 is now known as emptynine
[21:14:33] *** Quits: mteo (francis@user/francis) (Ping timeout: 265 seconds)
[21:14:34] *** Joins: pankid_ (~quassel@pankid.club)
[21:14:35] *** Joins: moto_ (~moto@user/moto)
[21:14:37] *** polyrob_ is now known as polyrob
[21:14:38] *** Joins: seanBE_ (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[21:14:39] *** Joins: sale_ (~sale@ypocit.initech.link)
[21:14:47] *** Joins: Praise (~Fat@user/praise)
[21:14:52] *** Joins: doc (~doc@user/doc)
[21:14:55] *** Joins: arinov (~arinov@31.142.82.177)
[21:14:55] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[21:14:55] *** Quits: tonitch (~tonitch@user/tonitch) (Quit: ZNC 1.8.2 - https://znc.in)
[21:14:56] *** Joins: akaWolf (~akaWolf@akawolf.org)
[21:14:57] <han-solo> devios: only the first condition gets executed both times
[21:14:59] *** Joins: hodapp (~mawson@user/hodapp)
[21:15:02] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 265 seconds)
[21:15:02] *** Quits: InPhase (~InPhase@openscad/inphase) (Ping timeout: 265 seconds)
[21:15:02] *** njt_ is now known as njt
[21:15:05] *** Joins: meti (~meti@user/meti)
[21:15:05] *** Joins: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter)
[21:15:09] *** Joins: mteo (francis@user/francis)
[21:15:10] *** Joins: InPhase (~InPhase@openscad/inphase)
[21:15:13] *** f-chymera is now known as chymera
[21:15:13] *** Joins: jamwil (~jamwil@user/jamwil)
[21:15:14] *** Joins: Confusioned (~AnySomebo@p200300c2873b59103433ff7c3ab051d2.dip0.t-ipconnect.de)
[21:15:16] *** seanBE_ is now known as seanBE
[21:15:20] *** Joins: Yasumoto (~Yasumoto@136.152.37.118)
[21:15:21] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[21:15:22] *** Joins: Roey (~Roey@user/Roey)
[21:15:25] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[21:15:26] *** Exagone313 is now known as Exa
[21:15:27] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[21:15:31] *** Quits: nuala (~nuala@user/nuala) (Ping timeout: 265 seconds)
[21:15:31] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.28) (Ping timeout: 265 seconds)
[21:15:31] *** Quits: asd (~noname@user/asd) (Ping timeout: 265 seconds)
[21:15:32] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[21:15:38] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[21:15:38] <han-solo> but.. i got https://bpa.st/TZDA
[21:15:41] *** Joins: tonitch (~tonitch@user/tonitch)
[21:15:45] *** Joins: asd (~noname@user/asd)
[21:15:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:16:00] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[21:16:02] *** Joins: jim (~jim@about/linux/staff/jim)
[21:16:03] *** Joins: u4t (~chat@78.ip-139-99-236.net)
[21:16:04] *** dskullz is now known as dskull
[21:16:06] *** Joins: nuala (~nuala@user/nuala)
[21:16:09] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[21:16:20] *** Joins: akk (~akk@75.161.146.115)
[21:16:25] *** Joins: {HD} (~{HD}@86.106.121.213)
[21:16:29] *** Joins: effprime (~effprime@user/effprime)
[21:16:44] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:17:02] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Read error: Connection reset by peer)
[21:17:04] *** Joins: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[21:17:13] <han-solo> first time i got 1 and 2, since the list had one `2`, but with the second list also, only the first `if` block gets executed, since `TWO` and `FOUR` are both nones...so there are no `2` in the second time, hence the it print 0, 0
[21:17:16] <devios> han-solo, why is it executing only the first condition? thx for the help.
[21:17:42] <han-solo> because you are checking against `None` and both `TWO` and `FOUR` equats to `None`
[21:17:47] *** Joins: elena_re (~elena@178.176.79.2)
[21:18:12] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[21:18:26] *** Joins: mastardet (~mastardet@user/mastardet)
[21:18:43] <han-solo> try, TWOS = 2; FOURS = 4
[21:19:03] <han-solo> or something to differentiate the two
[21:19:51] <KirkMcDonald> And of course, if the category is just the value being searched for, the function can get somewhat simpler...
[21:20:25] *** Joins: nomic (~nomic@185.192.69.207)
[21:21:02] <devios> han-solo, ah ha. that makes sense. thanks so much.  i don't understand why they set up the exercises with the enumerated constants like this. really over complicates things for people like me just learning.  saw that some people defined lambda functions for each constant to do the work which is cool but so far beyond how i would approach a basic exercise as a newbie.  frustrating.
[21:21:08] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:21:21] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[21:21:51] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:22:36] *** Roey is now known as ShekeLove
[21:23:40] <stewie925> I had this question asked me during my interview yesterday - how do we read a gigabyte-sized file without memory overload.   Does `with open("gigatext.txt", "r) as f` `for line in f: `print(line)` suffice?
[21:23:58] <han-solo> sure
[21:24:01] <grym> that's how i'd naively read it knowing no other information
[21:24:02] <KirkMcDonald> stewie925: Yes. Probably.
[21:24:33] *** Joins: y04nn (~y04nn@193.32.127.238)
[21:24:37] <stewie925> hmm wonder why the interviewer asked me how - because those lines of codes are in there.  And it is a log file, not csv
[21:25:22] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[21:25:43] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[21:27:06] *** ShekeLove is now known as RoeyRescuesQed
[21:27:10] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[21:27:23] *** Joins: somlis (~somlis@user/somlis)
[21:27:39] *** Joins: dulanic (~dulanic@47.187.144.163)
[21:27:48] <stewie925> KirkMcDonald:  grym:  so the `for line in f` being an iterator helps with handling huge data
[21:28:02] <stewie925> thanks!
[21:28:18] <grym> stewie925: i would say that it is lazy, and that's what helps
[21:28:50] <grym> if you have a malicious interviewer, they'll then inform you that the length of the first line is the length of the file
[21:29:21] *** Joins: anddam (~anddam@user/anddam)
[21:29:31] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 250 seconds)
[21:29:35] <stewie925> grym: thank you!
[21:29:54] <KirkMcDonald> Or perhaps the content of the file is a single massive line, possibly preceded or followed by some number of newlines.
[21:29:58] *** Parts: d3vyL (d3vyL@host-80-181-161-131.pool80181.interbusiness.it) ()
[21:30:03] *** RoeyRescuesQed is now known as TheRoeyening
[21:30:29] <grym> in which case it's rb and cursing time :)
[21:30:29] <stewie925> KirkMcDonald:  the file is a log file with 24 hours of log data
[21:31:22] <KirkMcDonald> And then some part of the program decided that it really needed to log several gigabytes of base64-encoded data...
[21:32:21] <stewie925> KirkMcDonald: now you're taking it to a totally different dimension hehehe - how do we deal with that appropriately?
[21:32:57] <KirkMcDonald> Depends on why you're reading it.
[21:33:25] *** Quits: Jefren (~Jefren@70.35.67.58) (Ping timeout: 260 seconds)
[21:34:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:35:19] *** Joins: Jefren (~Jefren@70.35.66.187)
[21:36:54] <stewie925> so it was a trick question yesterday then
[21:37:24] <grym> no, just.. any question can be extended to more complex consdierations
[21:37:29] <grym> and watching you dance is informative :P
[21:37:36] *** Joins: fofoni (~fofoni@user/fofoni)
[21:37:39] <stewie925> ugh
[21:37:57] <grym> "good, i agree with your answer.  now, what if ..." ad nauseam
[21:38:08] <stewie925> true....
[21:38:11] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 250 seconds)
[21:38:28] <grym> because hey, well, that's what users are going to do to your issues tracker every day
[21:38:40] <stewie925> agree
[21:39:05] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[21:39:09] *** Joins: sandb0y (~pirate@user/sandb0y)
[21:39:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:39:33] <grym> in your log parsing example, for example, there are some stylistic things that i'd be watching for
[21:39:39] <grym> like "do you do business logic in the IO loop"
[21:39:49] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[21:39:58] <stewie925> oooh good question
[21:40:14] <grym> (i would very much prefer that that answer be "no", for example)
[21:40:20] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Remote host closed the connection)
[21:40:38] <stewie925> they actually presented a code listing of that log file processing and asking me which needs to be changed
[21:40:38] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[21:41:46] <stewie925> so the program is supposed to list all error logs except during the maintenance period of  4-6 am
[21:42:43] *** JoelJoel is now known as Joel
[21:42:44] <han-solo> and i wonder why i don't pass interviews... :p
[21:42:56] <stewie925> oh man :(
[21:43:26] <stewie925> lol Han-solo I hope that's not a jab :D
[21:44:20] <han-solo> oh no, it is not :D
[21:44:30] <stewie925> anyway I just realized - I only check for the hour part 4 and 6 , and forgot the minute part
[21:45:04] <stewie925> so if its 6:01 it should be OK to report any errors reported at 6:01 onwards
[21:45:06] <aphysically> huh, suddenly getting unsupported-membership-test in pylint after a refactoring
[21:45:32] <aphysically> mypy --strict is fine with it, but I'm not sure why pylint thinks it knows the type then
[21:46:17] <aphysically> I didn't know pylint could even read type hints
[21:46:17] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[21:46:23] <stewie925> I'll go walk back in my corner and figure this out (how to filter 02:00-04:00 and ignore 4:01-04:59)
[21:48:13] *** Joins: jazzy (~jaziz@2600:380:4557:1bb1:b9a8:9b17:cf07:e9b5)
[21:48:24] *** PacKetIV is now known as PocketKiller
[21:48:58] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[21:49:05] <aphysically> I guess I can just disable these pylint warnings, I don't think there's anything useful it would ever tell me that mypy wouldn't catch
[21:49:30] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[21:50:35] *** Parts: rapha (~jrs@user/rapha) (WeeChat 2.3)
[21:53:18] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[21:53:20] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:9842:f3f7:64ff:d6dc) (Quit: Textual IRC Client: www.textualapp.com)
[21:54:12] <The-Compiler> CrtxReavr: sorry, got distracted, but perhaps this? https://paste.the-compiler.org/view/99bcf8bc
[21:55:24] *** Joins: gerty (~gerty@user/gerty)
[21:56:05] *** Joins: y04nn (~y04nn@193.32.127.238)
[21:56:28] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:56:53] *** Quits: dostoyev1ky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[21:56:59] *** Joins: Akuli (~Akuli@82-203-162-233.bb.dnainternet.fi)
[21:57:08] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[21:57:18] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[21:57:27] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[21:57:43] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[21:58:14] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[21:58:18] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:58:37] *** Quits: kib_ (~kib@user/kib) (Quit: WeeChat 3.2.1)
[21:59:33] *** Joins: mike18 (~geri@216.200.232.252)
[21:59:53] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:00:01] <mike18> hi - whats the typical reason for such an error? "error_msg": "requests.exceptions.ContentDecodingError: ('Received response with content-encoding: gzip, but failed to decode it.', error('Error -3 while decompressing data: incorrect header check'))"} ?
[22:00:08] <jinsun__> aphysically: pylinnt has a typecheck checker https://pylint.pycqa.org/en/latest/technical_reference/features.html#typecheck-checker-messages, I think it doesn't use type hints it just tries to infer it from the code
[22:00:18] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[22:00:42] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[22:00:44] <aphysically> I ended up just changing the code around to avoid the pylint bug
[22:01:06] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:01:41] *** Quits: rundown (~eb0t@90.199.243.11) (Ping timeout: 252 seconds)
[22:01:41] <aphysically> ahhh now I'm getting it again
[22:01:44] *** Quits: Pandadub (~Barones@189.50.80.77) (Remote host closed the connection)
[22:02:55] <aphysically> well I tried, gonna nix the pylint warning :P
[22:03:01] *** Quits: y04nn (~y04nn@193.32.127.238) (Ping timeout: 265 seconds)
[22:03:21] *** Joins: rundown (~eb0t@90.202.46.160)
[22:03:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:03:30] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 265 seconds)
[22:03:38] *** Joins: Swayze (~gryster@user/swayze)
[22:03:41] <mike18> bjs: the thread pool improved a lot!!!
[22:03:50] <mike18> 45 min runtime to 9 min
[22:04:15] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[22:04:33] <Swayze> :-p
[22:05:47] *** Joins: elias117 (~elias117@user/elias117)
[22:07:15] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[22:07:21] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[22:08:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 265 seconds)
[22:08:31] *** vinleod is now known as vdamewood
[22:09:10] *** Joins: LucaTM (~LucaTM@user/lucatm)
[22:10:04] <mike18> bjs: the thread pool improved a lot!!! thanks
[22:10:14] <stewie925> mike18: do you mind sharing your before and after code change for thread pool?  that's something I want to learn too
[22:10:20] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Killed (NickServ (GHOST command used by thekingofbandit2!thekingofb@thunix.net)))
[22:10:31] *** Joins: c4017_ (~c4017@2604:3d08:747f:7c90:6970:bd0b:559e:756f)
[22:10:49] <mike18> stewie925: just did it liek this: https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example
[22:11:03] <mike18> before i had a for loop calling my stuff sequentially
[22:11:04] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[22:11:17] *** Joins: llh (~llh@user/llh)
[22:11:30] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[22:11:30] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Read error: Connection reset by peer)
[22:11:30] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[22:11:31] *** Quits: daaawx (~dax@2a02-a453-3298-1-6445-bac2-43ed-16f6.fixed6.kpn.net) (Read error: Connection reset by peer)
[22:11:34] <han-solo> hello, is this just user preference ? # https://bpa.st/ZX2Q
[22:11:35] *** Joins: JanC_ (~janc@user/janc)
[22:11:45] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Remote host closed the connection)
[22:11:45] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:11:48] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[22:11:57] *** Joins: km_ (~km@user/km)
[22:12:00] *** Quits: km (~km@user/km) (Remote host closed the connection)
[22:12:01] *** Quits: Knyght (sid365271@id-365271.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[22:12:01] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[22:12:01] *** Quits: circuitbone (sid355934@user/circuitbone) (Ping timeout: 252 seconds)
[22:12:12] *** Joins: Knyght (sid365271@id-365271.helmsley.irccloud.com)
[22:12:16] <han-solo> the second one seems more straight forward. Need less thinking ?
[22:12:23] *** Joins: circuitbone (sid355934@user/circuitbone)
[22:12:30] *** JanC_ is now known as JanC
[22:12:44] <stewie925> mike18: thanks!
[22:12:48] <han-solo> although, it's very small difference i guess
[22:12:54] <nedbat> han-solo: i like the 2nd one better also
[22:13:07] <han-solo> nedbat: ah, Thanks
[22:13:11] <nedbat> han-solo: (the 2-line comment version won't work)
[22:13:18] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[22:13:27] <mike18> stewie925: you can do the same example without thread pool measure how long it takes to run
[22:13:32] <mike18> and compare with thread pool
[22:13:33] <mike18> runtime
[22:13:40] *** Quits: c4017__ (~c4017@2604:3d08:747f:7c90:6970:bd0b:559e:756f) (Ping timeout: 252 seconds)
[22:13:46] <han-solo> also, write it in 2 lines ?
[22:14:10] <The-Compiler> han-solo: using try/except would be another option: https://bpa.st/4PDQ
[22:14:16] <han-solo> nedbat: aren't they equivalent ?
[22:14:46] <The-Compiler> han-solo: on the other hand I suppose UserInDB.__init__ could raise KeyError, so this might catch more than intended
[22:14:47] <han-solo> The-Compiler: ah, nice
[22:14:48] <nedbat> han-solo: oh, sorry, the two lines only replace the last line, not both lines.  yes, equivalent
[22:15:00] <han-solo> nedbat: oh, Okay :)
[22:15:30] <The-Compiler> han-solo: another one: https://bpa.st/XG3A
[22:15:51] <The-Compiler> han-solo: I personally like to handle those kind of cases early (if there's more code, less to indent), and to 'return None' explicitly
[22:15:55] *** Joins: strobelight (~quassel@c-69-180-7-202.hsd1.ga.comcast.net)
[22:16:43] <han-solo> mm, maybe best to handle failing cases first ?
[22:17:16] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[22:17:30] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:17:30] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 250 seconds)
[22:18:18] <han-solo> although i like the second version, i feel the need to explcitly return a None
[22:19:07] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[22:19:25] <jinsun__> I liked The-Compiler's v4 too, better to explicitly return None
[22:20:06] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[22:20:07] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Read error: Connection reset by peer)
[22:20:16] *** jinsun__ is now known as jinsun
[22:20:57] *** Joins: emf (~emf@2620:10d:c090:400::5:5b52)
[22:20:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Changing host)
[22:20:58] *** Joins: vdamewood (~vdamewood@somegroup/vdamewood)
[22:21:05] *** Quits: vdamewood (~vdamewood@somegroup/vdamewood) (Changing host)
[22:21:05] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:21:23] <han-solo> i see these different choices, couldn't decide which one would be best for the user and usually end up leaving inconsistent code for the next person to maintain
[22:21:23] *** Quits: elena_re (~elena@178.176.79.2) (Read error: Connection reset by peer)
[22:21:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:22:29] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[22:22:43] *** Joins: srhm (~srhm@user/srhm)
[22:23:18] <han-solo> s/user/reader/
[22:23:33] *** Joins: qlixed (~qlixed@181.44.129.13)
[22:23:51] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Quit: Leaving)
[22:24:09] *** Quits: alexyov (~alexyov@79.124.0.2) (Read error: Connection reset by peer)
[22:24:14] *** Joins: alexyov5 (~alexyov@84.22.6.244)
[22:25:26] <leitz> Is pylint a good tool to critique code?
[22:25:29] *** Quits: pdjprogrammer (~pdjprogra@24.14.26.52) (Read error: Connection reset by peer)
[22:25:36] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[22:25:36] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[22:26:06] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Ping timeout (120 seconds))
[22:26:30] <SnoopJ> leitz, it knows a lot of useful diagnostics, and it's very configurable. Best advice: try it and see what you think
[22:27:17] *** Joins: califax (~califax@user/califx)
[22:27:27] <leitz> SnoopJ, thanks! I didn't really enjoy the "rated at -20.79/10" response, but it was toy code I copied as an experiment. If pylint is a good tool, I'll use it.
[22:27:31] *** Joins: brabrax (~brabrax@user/brabrax)
[22:28:08] <SnoopJ> leitz, I have never paid attention to the score, but even that formula can be customized.
[22:28:50] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[22:29:25] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[22:29:26] <SnoopJ> I use --errors-only mode, myself, although the warnings have some value
[22:29:31] *** Joins: Karel (~Karel@ptr-9091p564tn5baind631.18120a2.ip6.access.telenet.be)
[22:30:25] *** Joins: djapo (~archangel@user/djapo)
[22:32:21] *** Quits: arinov (~arinov@31.142.82.177) (Ping timeout: 250 seconds)
[22:33:08] <energizer> leitz: yes pylint is good but it can be useful to disable some of the checks in your config file
[22:33:28] *** Joins: minip (~minip@user/minip)
[22:35:01] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[22:35:03] *** Quits: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net) (Remote host closed the connection)
[22:36:09] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 268 seconds)
[22:36:17] *** Joins: nomic (~nomic@185.192.69.207)
[22:37:18] <leitz> I have about two minutes experience with it, but am always looking for ways to improve my code.
[22:37:53] <leitz> Other languages have similar tools, but they sometimes say "Ah, ignore this. And that. Oh, we don't do that any more, either."
[22:38:10] <leitz> I think you've given me confidence in pylint, thanks!
[22:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[22:38:49] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[22:38:50] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[22:39:37] *** Quits: emf (~emf@2620:10d:c090:400::5:5b52) (Quit: emf)
[22:39:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:39:59] *** Joins: califax (~califax@user/califx)
[22:40:07] *** Joins: brabrax (~brabrax@user/brabrax)
[22:40:45] <energizer> leitz: here's a disable= list i've used https://bpa.st/LKWQ
[22:41:50] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:42:22] <energizer> in .pylintrc
[22:42:50] <energizer> generate your config file first with uh pylint --generate- or whatever its called
[22:42:53] <energizer> leitz: ^
[22:43:04] <energizer> and then edit it
[22:43:45] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[22:44:06] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[22:45:08] <Karel> When opening a bunch of large files in Python, is there any way to tell the OS "don't bother caching any of this, I'll only be randomly accessing these files"? I already added buffering=0 in open() which improved throughput 2x, I'm wondering if there are other, similar tricks I can do.
[22:46:26] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 260 seconds)
[22:47:15] *** Quits: junktext (~junktext@109.201.152.174) (Remote host closed the connection)
[22:47:16] <leitz> energizer, --generate-rcfile
[22:47:39] <CrtxReavr> Karel, I think you need to ask your OS that.
[22:47:52] <energizer> Karel: i've never done it but that's i think that's what O_DIRECT is for
[22:48:34] *** Joins: plastico (~plastico@neomutt/plastico)
[22:48:42] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[22:49:21] *** Joins: junktext (~junktext@109.201.152.178)
[22:50:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:50:35] *** Joins: pmn (~pmn@bras-base-mtrlpq4706w-grc-03-174-89-235-156.dsl.bell.ca)
[22:50:37] <Karel> CrtxReavr, Well maybe Python has/had a convenient abstraction for it like it does for so many other things!
[22:50:40] <Karel> energizer, That looks like the right keyword, thanks!
[22:50:53] <SnoopJ> yea, O_DIRECT seems the most apt
[22:51:18] <Karel> Looks like I need to give up on open() and switch to mmap, right?
[22:51:22] <pmn> which rfc, specs etc configparser supposed to follow?
[22:51:24] *** Joins: Skyfire (~pyon@user/pyon)
[22:51:25] <SnoopJ> I'm not sure if you can actually pass that with open(), you might need os.open
[22:51:33] <Karel> Yeah that's what I figured :)
[22:51:42] <SnoopJ> the doc for open() mentions passing opener=, but doesn't make it clear how you actually pass the flags :|
[22:51:51] <leitz> energizer, cool, thanks. Adding "bad-indentation" helps, since I use 2 spaces vice 4.  :)
[22:51:52] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[22:52:06] <leitz> Still haven't read PEP 8 yet.   ;)
[22:52:43] <ChrisWarrick> you should be able to tell pylint your tab size preferences
[22:53:20] <SnoopJ> leitz, once you do, this is a good follow-up: https://www.youtube.com/watch?v=wf-BqAjZb8M
[22:53:23] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 252 seconds)
[22:54:31] <Karel> SnoopJ, You can always | them in yourself I guess.
[22:54:42] <SnoopJ> Karel, in to what?
[22:54:56] <SnoopJ> open() doesn't accept flags=, which is why the doc has me confused
[22:55:21] <Karel> No it passes its own flags based on the "r"/"rb" thing
[22:55:31] <SnoopJ> those are different
[22:55:32] *** none is now known as stdout
[22:55:39] <Karel> But you can do something like "return os.open(path, flags | os.O_DIRECT)"
[22:55:57] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:56:06] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[22:56:14] <Karel> It seems there's no os.O_DIRECT on windows though :/
[22:56:29] <SnoopJ> yes, it's platform-exclusive
[22:57:23] *** Quits: Rain4 (~Rain@li958-238.members.linode.com) (Quit: The Lounge - https://thelounge.chat)
[22:57:39] <SnoopJ> oh, I see what the docs mean now, there's an example in the web docs. It _calls_ the function you give it with those args, and yea, you'd | in this one
[22:57:46] *** Joins: arinov (~arinov@213.194.126.155)
[22:58:29] *** Joins: Rain42 (~Rain@li958-238.members.linode.com)
[22:58:31] *** Joins: cheater (~Username@user/cheater)
[22:58:31] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[22:58:31] *** Joins: emf (~emf@2620:10d:c090:400::5:5b52)
[22:58:35] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[22:58:42] <Karel> Right yeah that's what I meant :)
[22:58:47] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:58:47] <SnoopJ> took me a sec :)
[22:59:07] *** nvz_ is now known as nvz
[22:59:40] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[22:59:58] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 250 seconds)
[23:00:03] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:00:29] *** Quits: gitly (~gitly@148.252.128.160) (Ping timeout: 252 seconds)
[23:00:59] *** Joins: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net)
[23:01:08] * leitz is watching a flask video.
[23:01:14] <Karel> Looks like windows has FILE_FLAG_NO_BUFFERING instead but that doesn't seem to improve throughput for me.
[23:02:33] *** Joins: gitly (~gitly@185.69.144.8)
[23:03:23] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:05:46] <Repiphany> How randomly are you accessing your files for read-buffering to have a negative effect
[23:11:00] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:11:12] <Karel> Repiphany, I have ~100 files open at the same time, each 0.2GB in size. Each file is a bunch of blocks about 1kB is size, and I repeatedly want to sample 1024 blocks from these files.
[23:11:43] <Karel> (and these blocks should be randomly sampled from all files combined)
[23:12:02] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 252 seconds)
[23:12:18] <Karel> This is part of an replay buffer for reinforcement learning
[23:13:06] <leitz> Drat, storms again. Back on later.
[23:13:24] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[23:13:40] <akk> Anybody use selenium 4 python bindings? I'm trying to find a working example for firefox profiles that doesn't spew deprecation warnings. Or is that too far off topic?
[23:13:45] <Repiphany> Could be worth investing in 20GB of ram? (if your problem doesn't scale past that)
[23:14:43] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[23:16:08] <Karel> Repiphany, Yeah I should really get to that but for now this is easier :). It looks like I currently get 20MB/s disk read speed, which is 50 batches of size 1024, which should be more then enough to keep my GPU busy!
[23:16:18] <Karel> (50 batches/s that is)
[23:16:21] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[23:17:29] *** Joins: elena_re (~elena@178.176.79.2)
[23:18:31] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[23:19:06] *** phryk_ is now known as phryk
[23:19:06] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:20:42] <SnoopJ> Karel, for that use, mmap might be worth doing on Linux, where you can call madvise() with MADV_RANDOM
[23:20:53] <SnoopJ> not sure if there is a Windows equivalent, though
[23:22:43] <p-i-> Supposing (foo, bar) = ('lizards', 42), is it possible to make a dict_from(*args) that will return {'foo': 'lizards', 'bar': 42}? i.e. can I pull out the arg-names?
[23:22:49] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:23:04] <SnoopJ> p-i-, values can be referred to by more than one name
[23:23:05] <Repiphany> dict(zip(keys, values))
[23:23:13] <grym> p-i-: that's a real bad game to want to play
[23:23:20] <grym> try to avoid it :(
[23:23:29] <Repiphany> Oh, misread question
[23:23:37] <p-i-> I find myself constantly populating dictionaries with {'foo': foo, 'bar': bar} and it is tiresome.
[23:23:52] <SnoopJ> p-i-, you may want to build them in the first place instead of doing those assignments, then.
[23:24:49] *** Joins: zebrag (~chris@user/zebrag)
[23:24:56] <p-i-> mmk looks like the idea is going against the grain.
[23:25:04] <Karel> Maybe FILE_FLAG_RANDOM_ACCESS, Now trying to get it to the right place in python :)
[23:26:25] <NoImNotNineVolt> so, anyone use boto3 to get data from aws dynamodb and have issues with numeric type fields being incorrectly retrieved as str?
[23:26:25] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Remote host closed the connection)
[23:26:44] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[23:26:48] <p-i-> How do I get the value of variable if I have the name as a string?
[23:26:49] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[23:26:55] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[23:27:06] <Wulf> p-i-: locals()["p-i-"]
[23:27:27] <p-i-> 👍
[23:27:45] <p-i-> gona write some truly terrible python code here ;)
[23:27:46] <SnoopJ> p-i-, it is, because of what I said: a value may have anywhere from zero to <arbitrarily large> names
[23:28:03] <SnoopJ> `bar = baz = 42  # what is the name of 42?`
[23:28:08] *** Joins: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net)
[23:29:04] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[23:31:45] <p-i-> dict_from = lambda locals_, names: {name: locals_[name] for name in names.split()} ; a,b = 1,2 ; D = dict_from(locals(), 'a b')  # yeah.... maybe not :):
[23:32:00] *** Quits: strobelight (~quassel@c-69-180-7-202.hsd1.ga.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:32:29] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 264 seconds)
[23:32:44] *** Joins: strobelight (~quassel@c-69-180-7-202.hsd1.ga.comcast.net)
[23:32:53] <NoImNotNineVolt> is there a less local version of locals() which contains everything in scope?
[23:33:10] <NoImNotNineVolt> e.g. something that contains <class 'int'>, even.
[23:33:24] *** Quits: niv (~niv@limbo.cypherpunks.io) (Ping timeout: 265 seconds)
[23:33:24] *** Quits: Titore (Titore@user/titore) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: ThiefMaster (thief@indico/developer/thiefmaster) (Ping timeout: 252 seconds)
[23:33:25] *** Quits: Nei (~ailin@user/nemui) (Ping timeout: 252 seconds)
[23:33:33] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[23:34:05] *** Quits: phryk (~totallyno@user/phryk) (Ping timeout: 252 seconds)
[23:34:07] *** Quits: ttkap (~ttkap@user/ttkap) (Ping timeout: 240 seconds)
[23:34:10] *** Quits: Liexei (Liexei@user/liexei) (Ping timeout: 260 seconds)
[23:34:22] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Ping timeout: 265 seconds)
[23:34:22] *** Quits: Spydar007 (~spydar007@user/spydar007) (Ping timeout: 265 seconds)
[23:34:22] *** Quits: Wegge (~wegge@user/wegge) (Ping timeout: 265 seconds)
[23:34:27] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 240 seconds)
[23:34:31] *** Quits: olasd (~olasd@softwareheritage/olasd) (Ping timeout: 252 seconds)
[23:34:31] *** Quits: lambda (~weechat@cyka.blyat.vodka) (Ping timeout: 252 seconds)
[23:34:35] *** Quits: tf (~tf@user/tf) (Ping timeout: 246 seconds)
[23:34:38] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 252 seconds)
[23:34:38] *** Quits: simplicity (~yti@user/simplicity) (Ping timeout: 252 seconds)
[23:34:45] *** Quits: Ennea (~Ennea@user/ennea) (Ping timeout: 250 seconds)
[23:34:45] *** Quits: daddy (ryan@hashbang/bdfl) (Ping timeout: 250 seconds)
[23:34:45] *** Quits: randall_ (~randall@user/randall) (Ping timeout: 260 seconds)
[23:34:47] *** Quits: MacGyver (~macgyver@user/macgyver) (Ping timeout: 240 seconds)
[23:34:48] *** Joins: Elzington (~Elzington@94.198.42.142)
[23:34:53] *** Quits: Magician (deepy@user/deepy) (Ping timeout: 264 seconds)
[23:34:57] *** Quits: xormor (leet@user/pamipetteri) (Ping timeout: 268 seconds)
[23:34:58] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (Ping timeout: 260 seconds)
[23:34:58] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Ping timeout: 260 seconds)
[23:34:58] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 260 seconds)
[23:35:04] *** Quits: anthraxx (~anthraxx@archlinux/developer/anthraxx) (Ping timeout: 252 seconds)
[23:35:12] *** Quits: jessicant (~jessica@static.172.234.251.148.clients.your-server.de) (Ping timeout: 265 seconds)
[23:35:20] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Ping timeout: 260 seconds)
[23:35:20] *** Quits: the_rat (~ratto@emily.sorcio.org) (Ping timeout: 260 seconds)
[23:35:20] *** Quits: crackerjack (crackerjac@pear.bnc4free.com) (Ping timeout: 260 seconds)
[23:35:27] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[23:35:29] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Ping timeout: 264 seconds)
[23:35:34] *** Quits: nigelb (~nigel@zeus.nigelb.me) (Ping timeout: 268 seconds)
[23:35:42] *** Joins: tf (~tf@user/tf)
[23:35:46] *** Joins: Nei (~ailin@user/nemui)
[23:35:53] *** Joins: daddy (~ryan@hashbang/bdfl)
[23:35:56] *** Joins: Ennea (~Ennea@user/ennea)
[23:36:01] *** Joins: olasd (~olasd@softwareheritage/olasd)
[23:36:12] *** Joins: randall (~randall@user/randall)
[23:36:12] *** Joins: phryk (~totallyno@user/phryk)
[23:36:20] *** Quits: magla (~gelignite@55d4d08c.access.ecotel.net) (Quit: Stay safe!)
[23:36:33] *** Joins: simplicity (~yti@user/simplicity)
[23:36:41] *** Joins: thekingofbandit (~thekingof@user/thekingofbandit)
[23:36:42] <jinsun> less local locals() is globals() I guess, but that doesn't contain builtins like int
[23:36:46] *** Joins: nigelb (~nigel@zeus.nigelb.me)
[23:36:48] *** Joins: wolfshappen (~waff@irc.furworks.de)
[23:36:58] *** Joins: the_rat (~ratto@emily.sorcio.org)
[23:37:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:37:06] *** Joins: ThiefMaster (~thief@indico/developer/thiefmaster)
[23:37:09] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[23:37:17] *** Joins: anthraxx (~anthraxx@archlinux/developer/anthraxx)
[23:37:21] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[23:37:26] *** Joins: deepy (deepy@user/deepy)
[23:37:28] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[23:37:42] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[23:37:42] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[23:37:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[23:37:42] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[23:37:42] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[23:37:42] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[23:37:42] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Read error: Connection reset by peer)
[23:37:42] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Write error: Connection reset by peer)
[23:37:42] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Write error: Connection reset by peer)
[23:37:42] *** Quits: califax (~califax@user/califx) (Write error: Connection reset by peer)
[23:37:42] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Write error: Connection reset by peer)
[23:37:42] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Write error: Connection reset by peer)
[23:37:42] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Write error: Connection reset by peer)
[23:37:42] *** Quits: cmnky2 (~cmnky@user/cmnky) (Read error: Connection reset by peer)
[23:37:42] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Read error: Connection reset by peer)
[23:37:42] *** Quits: metaace (~metaace@user/metaace) (Read error: Connection reset by peer)
[23:37:42] *** Quits: ano (~ano@user/ano) (Read error: Connection reset by peer)
[23:37:42] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Read error: Connection reset by peer)
[23:37:42] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Read error: Connection reset by peer)
[23:37:42] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Read error: Connection reset by peer)
[23:37:42] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Read error: Connection reset by peer)
[23:37:42] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[23:37:42] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[23:37:45] *** Joins: ubert (~Thunderbi@178.115.54.19.wireless.dyn.drei.com)
[23:37:48] *** Joins: MacGyver (~macgyver@user/macgyver)
[23:37:53] *** Joins: jessicant (~jessica@static.172.234.251.148.clients.your-server.de)
[23:37:53] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[23:37:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:37:56] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[23:37:56] *** Joins: metaace (~metaace@user/metaace)
[23:37:56] *** Joins: CombatVet (~c4@user/combatvet)
[23:37:56] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[23:37:56] *** Joins: califax (~califax@user/califx)
[23:38:01] *** Joins: Aminda (~sid12355@Feneas/Mikaela)
[23:38:02] *** Joins: ttkap (~ttkap@user/ttkap)
[23:38:03] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[23:38:04] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[23:38:05] *** Quits: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net) (Quit: leaving)
[23:38:13] *** Joins: Wu (~wu@173.red-83-50-192.dynamicip.rima-tde.net)
[23:38:25] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:387b:9fcf:63d:76d6) (Quit: Client closed)
[23:38:25] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[23:38:25] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:38:34] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[23:38:37] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[23:38:46] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:38:49] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[23:38:59] *** Joins: Wegge (~wegge@user/wegge)
[23:39:03] *** Joins: ano (~ano@user/ano)
[23:39:19] *** Joins: spithash (~spithash@user/spithash)
[23:39:40] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[23:39:50] <NoImNotNineVolt> jinsun: i guess that leaves me with eval()
[23:39:54] <NoImNotNineVolt> oh well.
[23:40:01] *** Joins: Liexei (Liexei@user/liexei)
[23:40:18] <SnoopJ> it leaves you checking the various places a name might live
[23:40:27] <jinsun> NoImNotNineVolt: what are you trying to do?
[23:40:38] <SnoopJ> if for some reason you are compelled to do that, anyway. ideally, you don't step into the pit of fire and snakes
[23:40:46] <NoImNotNineVolt> jinsun: powerful generic templating
[23:41:22] <NoImNotNineVolt> like, i've been using apache vtl (in python via airspeed)
[23:41:40] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[23:41:41] <NoImNotNineVolt> but i want to add support for general python expressions as well. and select python modules.
[23:41:45] <NoImNotNineVolt> e.g. time, re, etc.
[23:41:54] *** Joins: Spydar007 (~spydar007@user/spydar007)
[23:42:32] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:43:00] <NoImNotNineVolt> so i've added some preprocessor directives that get passed through eval. which seems "unsafe", except that the "users" of this system are just me.
[23:43:27] *** Joins: crackerjack (crackerjac@pear.bnc4free.com)
[23:43:30] <NoImNotNineVolt> well, there are no users, only admins. so there's no command injection concerns, the people providing input already have admin access :P
[23:43:37] <NoImNotNineVolt> so eval it is.
[23:44:38] <NoImNotNineVolt> it's already working, i just thought for a second i could use locals()[directive] rather than eval(directive). and i could, in some cases. but not others.
[23:45:07] <Karel> Is asyncio the right thing to look at if I want to start 1024 file reads in parallel and wait for all their results? I'm starting to follow some tutorials but this seems like a huge new thing to learn and you're always running code in executors, whereas I just want to replace a small component of my existing codebase.
[23:45:25] <NoImNotNineVolt> e.g. eval('int(5.5)') works fine, locals()['int(5.5)'] obviously doesn't, nor does locals()[int](5.5), because int ain't in locals.
[23:45:29] <NoImNotNineVolt> not globals, for that matter.
[23:45:34] <NoImNotNineVolt> s/not/nor/
[23:45:42] <Karel> (Right now I'm using a threadpool with 16 threads instead, which works fine but maybe it can be done with less CPU overhead?)
[23:45:43] <NoImNotNineVolt> anyway, thanks for the answers.
[23:46:59] *** Joins: Titore (Titore@user/titore)
[23:47:29] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:47:40] <SnoopJ> Karel, the answer will probably depend closely on your particular I/O setup. There's not much utility in doing lots of reads in parallel if you spend most of your time waiting on the disk itself anyway
[23:47:57] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: restarting)
[23:48:06] *** Joins: jasiek (~jps@kuweta.sanepid.org)
[23:48:12] <SnoopJ> but if your data are stored across distinct disks, maybe it *would* be advantageous
[23:48:13] *** Joins: litharge (litharge@libera/bot/litharge)
[23:48:14] *** Joins: matsaman (~matsaman@user/matsaman)
[23:48:17] *** Joins: lambda (~weechat@cyka.blyat.vodka)
[23:48:51] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[23:48:58] *** Joins: ali1234 (~al@user/ali1234)
[23:49:04] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[23:49:27] <Karel> Ah no just to be clear switching for 1 thread to 16 increased throughput massively (8x), so parallelizing does have a big advantage here.
[23:49:44] <Karel> I'm just thinking about switching from a ThreadPool to some async based thing.
[23:49:48] <SnoopJ> well, that's the real answer to any such question anyhow: measure it :)
[23:49:54] *** ChanServ sets mode: +o litharge
[23:49:58] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[23:50:16] *** km_ is now known as km
[23:50:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:50:42] <Karel> (I'm still talking about the setup from before, lots of random reads of 1kB blocks spread over many files)
[23:53:20] *** Quits: Spydar007 (~spydar007@user/spydar007) (Max SendQ exceeded)
[23:53:48] *** Joins: Betal (~Betal@user/betal)
[23:53:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[23:54:11] *** Joins: Spydar007 (~spydar007@user/spydar007)
[23:55:24] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[23:55:57] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[23:56:22] *** Joins: softwherewolf (~software@user/softwarewolf)
[23:57:33] *** Joins: y04nn (~y04nn@193.32.127.238)
[23:58:47] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 268 seconds)
[23:58:53] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[23:59:44] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
