[00:00:57] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[00:01:45] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[00:02:06] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[00:02:18] *** Quits: jkcoxson (~jkcoxson@67.199.177.214) (Remote host closed the connection)
[00:02:45] *** Joins: l4yer (~l4yer@195.181.170.210)
[00:03:09] *** Joins: TuckerBrand1997 (~TuckBrand@209.87.29.242)
[00:03:19] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[00:03:27] <Pi-sistance> oh balls, so when a while loop is no longer valid and nested under an else stement, the code doesn;t go back to the original if statement. I thought it would
[00:03:38] *** Joins: pycurious (~Adium@user/pycurious)
[00:04:11] *** Joins: Klinda (~superleag@user/klinda)
[00:05:32] <InPhase> You'd need an outer while loop for that.
[00:05:57] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[00:06:24] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[00:07:25] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[00:07:34] *** Quits: vd657777 (~vd657777@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[00:08:41] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[00:08:44] <Pi-sistance> bugger
[00:08:58] <Pi-sistance> thought I finally learnt the basics properly ffs.
[00:10:32] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:10:35] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[00:10:48] <Pi-sistance> I assume the same is true for while true or while false loops
[00:10:58] *** Quits: gitesh (uid423739@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:11:22] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[00:11:23] <Pi-sistance> oh, ofc it would be, it's the same thing really bah
[00:11:26] <Repiphany> while False isn't a loop
[00:13:39] *** Joins: INeedAHandle (~INeedAHan@user/ineedahandle)
[00:13:42] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[00:14:29] *** Quits: strugee (~strugee@strugee.net) (Quit: ZNC - http://znc.in)
[00:14:30] *** Joins: newpy (~newpy@2601:280:4381:1390:cd91:429:2740:7e5e)
[00:15:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:16:02] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[00:16:04] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 268 seconds)
[00:16:25] *** byzafk is now known as byzandula
[00:17:05] <grym> Pi-sistance: if, else don't loop, ever
[00:17:11] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[00:17:30] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[00:18:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[00:19:40] <rendar> how could i read from stdin with asyncio? but not text lines, bytes instead
[00:19:46] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:20:19] <BrenBarn> it's hard to understand what you're talking about without examples of code
[00:20:58] <bjs> rendar: you mean asynchronously?  either with a thread or something like aiofiles
[00:21:00] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[00:21:26] <rendar> bjs, yes asynchrnously.. what? an aiofile?
[00:21:33] *** Joins: strugee (~strugee@strugee.net)
[00:21:36] <bjs> rendar: the library
[00:22:05] <rendar> bjs, how come? stdin should be a pipe, and a pipe can be read/written asynchronously, while physical files can't
[00:22:18] <rendar> epoll() in linux can tell me when there is data available in stdin pipe
[00:22:23] <bjs> rendar: what do you mean "how come"?
[00:22:25] <bjs> how come what
[00:22:39] *** Joins: Harlin (~DonQixote@75-163-144-60.clsp.qwest.net)
[00:22:51] *** Joins: eichin (sid27120@tinside.irccloud.com)
[00:22:56] <rendar> aiofiles iirc, is a library to read physical files, (that epoll and others do not support) and it fakes async with secondary threads
[00:23:06] *** Quits: gitly (~gitly@148.252.128.93) (Ping timeout: 260 seconds)
[00:23:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[00:23:12] <bjs> Probably, yeah.
[00:23:22] <rendar> i don't want a secondary thread for stdin..
[00:23:26] <bjs> That technique will also work for standard streams too just fine
[00:23:53] <rendar> but i simply don't want it, if stdin is a pipe, i shouldn't need a secondary thread
[00:23:59] <bjs> rendar: ah well, then I guess you'll either need to find a library that already does exactly what you need or write one yourself using epoll
[00:24:09] <rendar> ok
[00:24:28] <bjs> rendar: isn't that just describing a reason why you don't want it?  Sure you almost never *need* a secondary thread even for just files, it's just easier to do it that way
[00:24:40] <rendar> i think that's just lame
[00:24:49] <bjs> and frankly most programs just interact with the standard streams synchronsly
[00:25:05] <bjs> rendar: is this a feeling or do you have some benchmarks to back up why someone *should* implement this for standard streams?
[00:25:13] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[00:25:21] <sickdugongo> good evening
[00:25:34] *** Quits: philectro (~quassel@2a02:2788:9a4:946:d65:84c9:717a:57c) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:25:47] <rendar> bjs, huh? nope, it's pretty common design running a process, sending it data into stdin, and waiting for response, and then doing that again and again, then that process reads stdin and does other things
[00:26:00] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[00:26:15] <bjs> rendar: nope what
[00:26:18] <rendar> bjs, it's a feeling: if OS gives you an API, just use it, exploit it
[00:27:04] *** Joins: mimmy (~mimmy@72.142.88.18)
[00:27:04] <Pi-sistance> if teh code after while false: is false, why doesnt it loop
[00:27:19] <bjs> Pi-sistance: well, `while condition:` loops so long as the condition is true
[00:27:23] <rendar> for instance node.js doesn't start a new thread to read from stdin (technically it does in Windows), because libuv does that
[00:27:26] <bjs> so if the condition is false, it never loops...
[00:27:36] *** Quits: INeedAHandle (~INeedAHan@user/ineedahandle) (Quit: Textual IRC Client: www.textualapp.com)
[00:27:52] <rendar> Pi-sistance, `if False: print("Hello")` <- same thing
[00:27:53] <sickdugongo> guys I have a question about pyinstaller: sys.executable returns the name of the executable (duh)... but how do I get a path to the current python binary running?
[00:27:59] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:29:35] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[00:30:23] *** Quits: dude-x (~textual@72.76.74.165) (Ping timeout: 250 seconds)
[00:30:52] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[00:31:04] *** Quits: newpy (~newpy@2601:280:4381:1390:cd91:429:2740:7e5e) (Quit: Leaving)
[00:32:44] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[00:33:40] <Pi-sistance> ok, well damn. also I cant have two different whiles and hope that it will switch to the other while, just tested :/
[00:34:01] <Wooble> wut
[00:34:06] <Pi-sistance> why am i sayign this here even.
[00:34:16] <Wooble> we have no idea; pastebin some code.
[00:34:32] *** Joins: gitly (~gitly@148.252.128.93)
[00:34:57] *** Joins: stockholm (~Andreas@p200300d2c709b9006c27c2e63886e17c.dip0.t-ipconnect.de)
[00:34:58] *** Quits: upsala (~zcb@185.213.155.252) (Quit: WeeChat 3.3)
[00:35:07] *** Joins: pycurious (~Adium@user/pycurious)
[00:36:02] *** Quits: strugee (~strugee@strugee.net) (Quit: ZNC - http://znc.in)
[00:36:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[00:36:19] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[00:36:32] *** Quits: hailhydra (~hailhydra@136.36.153.168) (Quit: WeeChat 3.3)
[00:36:51] *** Quits: reset (~reset@user/reset) (Quit: reset)
[00:36:56] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:50d1:715b:3051:a68) (Ping timeout: 256 seconds)
[00:37:22] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[00:37:23] *** Joins: squarecircle (~root@merkur.platinengarten.hg.tu-darmstadt.de)
[00:37:28] <squarecircle> ohai
[00:38:08] <squarecircle> I want to encrypt a lot (>100) hard drives with luks and unlock them
[00:38:11] *** Joins: Matt343 (~Matt343@c-69-181-108-8.hsd1.ca.comcast.net)
[00:38:57] <squarecircle> inb4 hacking away with bash: is there python-lib that I missed?
[00:39:22] <lambda> isn't that literally 3 lines of shell
[00:39:31] <Matt343> I have function A calling function B. I want to create a decorator for B such that it will wrap B if A doesn't have the decorator. If function A does have the decorator, the wrapper should do nothing for function B.
[00:40:01] <Matt343> Is this possible somehow? As far as i can tell, it requires that the decorator for A somehow communicate to the decorator for B that the decorator for A exists.
[00:40:07] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[00:40:09] <grym> Pi-sistance: you'll learn a lot by running your code in a debugger line by line
[00:40:10] <Matt343> I can't come up with a way that doesn't involve accessing the stack frame.
[00:41:30] *** Joins: strugee (~strugee@strugee.net)
[00:41:59] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Ping timeout: 268 seconds)
[00:42:04] *** Quits: teut (~teut@223.182.71.245) (Quit: Client closed)
[00:42:58] <squarecircle> lambda: yeah. And then you start hacking in some loggin, error handling and when you reach a thousand LOC of Bash, you gonna smash your head against the wall
[00:43:18] <lambda> squarecircle: how often do you need to do this?
[00:44:20] <squarecircle> lambda: The encryption part maybe some 3 or 5 times, the unlocking part more often
[00:44:33] <BrenBarn> Matt: well, you could have the decorator be a class and then have the other decorator use isinstance to check for the decorator class
[00:44:34] <BrenBarn> but what you're describing sounds like a dubious design
[00:44:57] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Remote host closed the connection)
[00:45:13] *** Joins: dude-x (~textual@72.76.74.165)
[00:45:21] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[00:45:23] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[00:46:06] *** Joins: AsenMx (~AsenMx@user/asenmx)
[00:46:51] *** Quits: emerent (~quassel@p200300cd573070b2ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[00:47:21] *** Joins: emerent (~quassel@p200300cd573070d3ba27ebfffed28a59.dip0.t-ipconnect.de)
[00:47:30] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:48:20] *** Quits: gloomy_desktop (~ldorigo@81.161.167.135) (Ping timeout: 246 seconds)
[00:48:56] *** Quits: Strom (strom@fedora/strom) (Ping timeout: 260 seconds)
[00:49:33] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:49:39] <Matt343> BrenBren: I'm not sure I understand, what would the B decorator use isinstance() on?
[00:50:04] *** Joins: Strom (strom@fedora/strom)
[00:50:27] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Quit: guenhael)
[00:50:44] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[00:51:13] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 268 seconds)
[00:52:03] *** Quits: modlin (modlin@user/modlin) (Remote host closed the connection)
[00:52:14] <BrenBarn> on A
[00:52:36] <BrenBarn> basically like `if isinstance(A, DecoratedClass)`...
[00:52:54] *** Joins: pigweed (~pigweed@97.119.229.243)
[00:53:10] *** Joins: pycurious (~Adium@user/pycurious)
[00:54:22] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[00:54:50] *** Quits: pigweed (~pigweed@97.119.229.243) (Client Quit)
[00:56:20] <sickdugongo> guys, let me rephrase: anyway of getting a path to the running interpreter through some kind of introspection?
[00:56:21] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[00:57:00] *** Joins: mimmy (~mimmy@72.142.88.18)
[00:57:12] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[00:57:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[00:57:43] <jwhisnant> Matt343: maybe some ideas here ... https://stackoverflow.com/questions/38017401/patch-all-functions-in-module-with-decorator
[00:57:51] *** Quits: causa_sui (~causasui@192.241.228.169) (Ping timeout: 256 seconds)
[00:57:59] *** Joins: causa_sui (~causasui@192.241.228.169)
[00:58:11] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:58:26] <Matt343> BrenBarn: I don't think my decorator would have A, it doesn't know who's calling it or from where. How would the decorator for B get A?
[00:58:35] <jwhisnant> ... but agree with BrenBarn, this does sound dubious ...
[01:00:08] <grym> sickdugongo: sys.executable?
[01:00:46] <grym> sickdugongo: or pathlib.Path(sys.executable) if you want a Path
[01:01:02] <sickdugongo> that won't work with pyinstaller, which will just point to the bundled version (so .exe or nix executable)
[01:01:13] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[01:01:17] <SpeakerToMeat> Hello all.
[01:01:24] * SpeakerToMeat bows
[01:01:35] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 264 seconds)
[01:01:36] *** Quits: mallkrampus (~mallkramp@172.93.207.90) (Ping timeout: 250 seconds)
[01:01:46] <grym> sickdugongo: as far as python is concerned, that is the right answer though
[01:02:18] <grym> sickdugongo: what are you up to that you need to know about an archive path inside the exe
[01:02:23] *** Quits: TuckerBrand1997 (~TuckBrand@209.87.29.242) (Ping timeout: 256 seconds)
[01:02:27] <grym> (perhaps there's a better way)
[01:02:46] <SpeakerToMeat> Question, I have a csv file where each row has from 2 to 4 columns... with csvreader is there any easy way to get None (or other value) for columns 3 and 4 ([2] and [3]) if they're not defined in a row?
[01:03:13] <grym> eeeew :(
[01:03:13] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:03:59] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[01:04:03] <jinsun> is it technically even a csv file if it doesn't have same number of columns thorughout?
[01:04:21] <lambda> sure, the values are comma-separated
[01:04:23] *** Joins: alzgh (~alzgh@user/alzgh)
[01:04:23] <sickdugongo> grym nothing dark. I'm helping a friend with a project. He starts a subprocess with PySide6's QProcess, passing as command "python". This doesn't work obvs because that python is not the one that the executable has been bundled with. Without rewriting his code more substantially, I wondered whether there was a way for me to start the subprocess with the current interpreter (so no os.fork and such)
[01:04:31] <KirkMcDonald> Sure. It's not like csv is a very strict format.
[01:04:42] <grym> SpeakerToMeat: i think that Just Works: https://bpa.st/JJRQ
[01:04:52] <grym> jinsun: yeah, you can have ragged csv.
[01:05:08] <jinsun> ah okay
[01:05:18] <grym> jinsun: there is the japanese postal code infohazard file, for really wild csv
[01:05:20] <tdsmith> csv is a metaformat. all strings are plausibly a csv
[01:05:25] <grym> https://www.dampfkraft.com/posuto.html
[01:05:29] <grym> jinsun: &
[01:05:50] *** Joins: Pickchea (~private@user/pickchea)
[01:06:17] <tdsmith> less of a format, more of a vibe
[01:06:39] <grym> "a format: for humans :heart_emoji:"
[01:07:11] <grym> "several thousand miniformats in a trenchcoat at formatcon"
[01:07:14] *** Joins: Shell (~shell@user/shell)
[01:08:07] <grym> sickdugongo: ah i see.  i thought the point of pyinstaller was that you could subprocess that exe and pass it arguments and stuff as if it was a 'normal program', no?
[01:08:24] *** Joins: johncc3 (~johncc3@181.93.109.69)
[01:08:44] <grym> so his subprocess.run(['python','arg','arg2']) just changes to subprocess.run(['yourpyinstaller.exe','arg','arg2']), optimistically
[01:08:50] *** Parts: Shell (~shell@user/shell) (WeeChat 3.3)
[01:09:36] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:09:46] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[01:10:02] <sickdugongo> yeah so far that's what I was forced to end up doing: basically packaging, say, main.exe, subprocess_script_1.exe and subprocess_script_2.exe, I just hoped there'd be a better way, so some subprocess.run([sys.executable, *args]) but so far no cigar :(
[01:10:15] <SpeakerToMeat> grym, Hmm ok, I'd need a DictReader... these CSV don't have header, but I can define that in the DictReader i think... thanks I'll try that
[01:10:55] <grym> sickdugongo: one big pyinstaller exe with either multiple entry_points or subcommands, maybe?
[01:11:05] *** Parts: johncc3 (~johncc3@181.93.109.69) (Leaving)
[01:11:09] <grym> SpeakerToMeat: i think it'll work fine with a (row) reader too, i just had that example handy
[01:11:23] *** Joins: johncc3_ (~johncc3@181.93.109.69)
[01:11:27] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[01:11:30] *** Joins: moose (~moose@user/moose)
[01:12:04] <sickdugongo> grym, solid idea, probably much lighter on the dependencies too... more work but likely the best of both worlds
[01:12:10] <sickdugongo> thank you
[01:12:28] <grym> SpeakerToMeat: ah, it's not quite the same actually! csv.reader won't None-pad, it just gives you lists of different lengths per row
[01:12:33] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Remote host closed the connection)
[01:12:36] <grym> sickdugongo: sweet, good luck!
[01:13:02] *** Quits: johncc3_ (~johncc3@181.93.109.69) (Client Quit)
[01:13:17] <grym> SpeakerToMeat: ehh, i like dicts better anyway :)
[01:13:30] *** Joins: anonymous (~anonymous@gateway/tor-sasl/anonymous)
[01:13:43] *** Joins: jsmock (~joern@xdsl-81-173-232-150.nc.de)
[01:14:12] <SpeakerToMeat> grym, yeah I think switching to dicts will make the code clearer. I'll do that
[01:14:45] <SpeakerToMeat> it might be anathema, but I wish python had ternary operators.
[01:14:49] <SpeakerToMeat> It does not... right?
[01:14:55] <grym> few things are more immediately annoying than magic index numbers littering my code
[01:15:05] <grym> SpeakerToMeat: theres `foo = x if y else z`
[01:15:27] <SpeakerToMeat> Oh there are now....
[01:15:41] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) ()
[01:15:43] <SpeakerToMeat> nice I'll switch this if to a ternary...
[01:15:55] <grym> just a dab'll do ya
[01:16:18] *** Joins: mallkrampus (~mallkramp@172.93.177.93)
[01:16:34] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[01:17:01] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:17:14] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[01:18:26] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[01:19:43] *** Joins: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb)
[01:20:05] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:21:54] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[01:22:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[01:23:27] *** Quits: grooverman (~grooverma@179.99.123.165) (Read error: Connection reset by peer)
[01:23:48] *** Joins: grooverman (~grooverma@177.95.12.14)
[01:24:14] *** Joins: fikran (~fikran@user/fikran)
[01:29:45] *** Parts: jsmock (~joern@xdsl-81-173-232-150.nc.de) (WeeChat 3.2)
[01:29:46] <Pi-sistance> yeah the debugger is great ty grym, I easily found a fix to my issues
[01:29:58] <grym> i live in one quite often
[01:31:13] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[01:31:46] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 245 seconds)
[01:32:04] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[01:33:51] *** Quits: mallkrampus (~mallkramp@172.93.177.93) (Ping timeout: 245 seconds)
[01:34:17] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[01:34:52] *** Joins: fofoni (~fofoni@user/fofoni)
[01:35:48] *** Quits: parv (~quass@user/parv) (Quit: parv)
[01:36:18] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[01:36:58] *** Joins: TuckerBrand1997 (~TuckBrand@209.87.29.242)
[01:37:34] <TuckerBrand1997> must i type  /msg NickServ IDENTIFY <nickname> <password>  everytime i try to connect to #python?
[01:37:49] <grym> TuckerBrand1997: you can make your client do it for you
[01:37:59] <grym> but this is a registered channel, so you won't be able to join if you don't
[01:38:11] *** Quits: fofoni (~fofoni@user/fofoni) (Client Quit)
[01:38:15] <TuckerBrand1997> how do i auto it if u don't mind telling pleae
[01:38:30] <grym> what client are you using?
[01:38:33] <TuckerBrand1997> mirc
[01:38:59] <grym> https://libera.chat/guides/mirc
[01:39:06] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[01:39:09] <grym> SASL's nicer anyway
[01:40:44] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:50d1:715b:3051:a68)
[01:41:08] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[01:41:46] *** Quits: TuckerBrand1997 (~TuckBrand@209.87.29.242) ()
[01:41:54] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:1441:e3a1:9c75:8917) (Quit: Textual IRC Client: www.textualapp.com)
[01:44:18] *** Quits: gitly (~gitly@148.252.128.93) (Ping timeout: 260 seconds)
[01:45:57] *** Joins: TuckerBrand1997 (~TuckBrand@209.87.29.242)
[01:46:18] *** Joins: Viewday118 (~Viewday@user/viewday)
[01:46:25] <TuckerBrand1997> it shows this msg whenever I connect to #python: -NickServ- This nickname is registered. Please choose a different nickname, or identify via /msg NickServ IDENTIFY TuckerBrand1997 <password>
[01:46:56] *** Quits: TuckerBrand1997 (~TuckBrand@209.87.29.242) (Client Quit)
[01:47:02] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[01:47:23] <grym> yeah, if you enable SASL that ought to stop because you'll be authed before you join
[01:47:31] *** Quits: giesen (~ggiesen@ego.giesen.me) (Ping timeout: 250 seconds)
[01:47:55] <grym> ... assuming you're the person who registered the nick, and are capable of authenticating :)
[01:48:17] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:48:18] *** Viewday118 is now known as Viewday11
[01:48:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:49:31] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:50:28] *** Joins: kosh (~kosh@user/kosh)
[01:50:31] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:51:06] *** Joins: TuckerBrand1997 (~TuckBrand@209.87.29.242)
[01:51:20] <TuckerBrand1997> grym the SASL method isn't working :/
[01:53:01] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[01:53:10] *** Quits: TuckerBrand1997 (~TuckBrand@209.87.29.242) (Client Quit)
[01:53:24] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[01:53:45] *** naranja is now known as orange
[01:54:06] *** orange is now known as naranja
[01:54:45] *** Joins: TuckerBrand1997 (~TuckBrand@209.87.29.242)
[01:55:58] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[01:56:12] <TuckerBrand1997> anyway i cna auto join #python without typing the /msg nickserv? SASL ain't working for me
[01:56:18] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 265 seconds)
[01:57:48] *** Joins: pycurious (~Adium@user/pycurious)
[01:58:15] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[02:00:42] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:00:44] <grym> TuckerBrand1997: you do have to be authenticated with nickserv to join #python.
[02:00:49] <grym> with a registered nick
[02:01:00] *** Joins: gitly (~gitly@148.252.128.93)
[02:01:07] <grym> you can retype it every time you connect, make your client send the message automatically, or use SASL auth
[02:01:11] *** Joins: ano (~ano@user/ano)
[02:01:23] <grym> #libera might be able to help you further if you're hitting trouble with SASL
[02:01:53] <enyc> TuckerBrand1997: check SASL guides on  https://libera.chat/guides/hexchat
[02:02:05] *** Joins: fofoni (~fofoni@user/fofoni)
[02:02:18] <enyc> TuckerBrand1997: correction -- https://libera.chat/guides/sasl   and indeed try #libera  or  channel for the IRC client in question
[02:02:52] <enyc> SASL works reliably for me....  Also there is an alternate CertFP mechanism that can be used instead.
[02:03:21] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:03:26] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 245 seconds)
[02:03:43] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:04:29] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[02:05:57] *** Joins: Soni (~quassel@autistic.space)
[02:07:45] <SpeakerToMeat> grym, Now, if I use a DictReader, there's any way to have, let's say, 2 to 4 fixed csv fields, and anything over that as variable entries without a specific fieldname? something like *args
[02:07:52] *** Joins: poiqwepoiqwe (uid525840@hampstead.irccloud.com)
[02:08:32] <SpeakerToMeat> Oh yes...
[02:08:36] <SpeakerToMeat> reading documentation is nice...
[02:08:40] <SpeakerToMeat> I need to use restkey
[02:10:46] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[02:10:49] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Quit: Client closed)
[02:11:20] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[02:11:50] *** Quits: Harlin (~DonQixote@75-163-144-60.clsp.qwest.net) (Ping timeout: 260 seconds)
[02:12:22] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:12:41] *** Quits: brontosaurusrex (~mua@user/brontosaurusrex) (Ping timeout: 264 seconds)
[02:12:46] <Soni> hmm we don't think we've seen habnabit talk in here in ages... hope they're okay
[02:12:55] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[02:13:57] *** Quits: damonlynch (~ngaio@static-68-235-44-57.cust.tzulo.com) (Quit: Leaving)
[02:14:11] *** Joins: brontosaurusrex (~mua@user/brontosaurusrex)
[02:20:41] *** Quits: mimmy (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[02:22:24] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Quit: Leaving)
[02:22:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:24:21] *** Quits: sickdugongo (~sickdugon@user/sickdugongo) (Quit: Leaving)
[02:24:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:24:52] *** Joins: Bakunin (~Lindis@user/lindis)
[02:26:06] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[02:27:53] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[02:28:47] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[02:29:05] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:29:55] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:30:13] *** Quits: causa_sui (~causasui@192.241.228.169) (Ping timeout: 256 seconds)
[02:30:54] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:31:21] *** Quits: TuckerBrand1997 (~TuckBrand@209.87.29.242) ()
[02:31:54] *** Joins: AsenMx (~AsenMx@user/asenmx)
[02:32:13] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[02:32:38] *** Joins: vaio (~gary@user/ghost)
[02:33:14] *** Joins: anonymous__ (~anonymous@gateway/tor-sasl/anonymous)
[02:33:17] *** Quits: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb) (Read error: Connection reset by peer)
[02:33:29] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:33:54] *** Joins: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb)
[02:34:14] *** Joins: zaphod_b (~zaphod_b@82-64-217-225.subs.proxad.net)
[02:34:39] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Ping timeout: 276 seconds)
[02:34:40] <zaphod_b> Hi there
[02:35:30] <zaphod_b> can someone please tell me why this code http://pastie.org/p/61dtW0n4KB1VpgFIjLhPss causes some output at all
[02:35:53] <zaphod_b> so OK I know it's wrong to mutate the objet being iterated
[02:36:18] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[02:36:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:36:22] <zaphod_b> but I'm looking for an example for my students, and I can't understand the behaviour of this code
[02:36:54] <zaphod_b> it's just as if the last expression in the for caused its return value to be printed
[02:36:55] *** anonymous__ is now known as anonymous
[02:37:37] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[02:37:54] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[02:38:38] <zaphod_b> same code in ipython behaves almost the same, except that there is nothing printed - which I understand better
[02:40:43] <Pi-sistance> not too important but anyone know why the last part of my code, the else is red? https://postimg.cc/5Y4m2PvB
[02:41:12] <Pi-sistance> usually signifying an error, but I dont get one, everything is fine and dandy!
[02:41:16] *** Joins: doko (~doko@2a02:8106:1a:7600:d5ce:8cc6:6007:4381)
[02:41:38] <Yhg1s> Pi-sistance: perhaps your editor thinks the 'else' can never be reached, because the 'if' and 'elifs' cover all possibilities?
[02:42:15] <Pi-sistance> the editor is dumb then cos ive seen it alternate in a debugger. weird
[02:42:59] *** Quits: ethrl (~morty@user/doforlove33) (Remote host closed the connection)
[02:43:00] <Pi-sistance> ugh, I think I was rearranging the spacing and it went red then at first, but didnt fade after I finished, guess its an unimportant cosmetic bug
[02:43:02] <Yhg1s> Pi-sistance: I'm only guessing, because you haven't shown enough information to tell if that's even possible.
[02:43:21] <Pi-sistance> yeah, fair enough. ill tr reopening the whole thing
[02:44:15] <jinsun> zaphod_b: where are you seeing stuff printed? in the python repl?
[02:44:57] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Quit: Leaving)
[02:45:08] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[02:45:20] *** Joins: shuvarek (~shuvarek@staticline-31-182-169-28.toya.net.pl)
[02:47:01] <Pi-sistance> nope it's still there, humph. seriously bothering me, ill have to ask my teacher. i cant show my code, its coursework
[02:47:13] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 256 seconds)
[02:47:22] <Pi-sistance> but it bloody works, any ideas why an editor could be wrong
[02:48:09] <grym> Pi-sistance: what editor?
[02:48:27] <Pi-sistance> jupyter notebooks
[02:50:17] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[02:50:51] *** Quits: zaphod_b (~zaphod_b@82-64-217-225.subs.proxad.net) (Quit: Client closed)
[02:51:13] <jinsun> you might be confusing what you are running and what is in your file
[02:52:12] <jinsun> with jupyter notebooks you can keep running the old non broken code in the later cells but change the previous cell to have broken code
[02:52:22] *** Joins: citizen_stig (~citizen_s@2001:982:9f64:1:c5da:bc1b:7218:a6bc)
[02:54:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[02:54:35] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[02:54:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:55:28] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[02:55:53] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:55] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:56:18] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:2d85:38b9:f7f3:5e1) (Quit: Textual IRC Client: www.textualapp.com)
[02:57:03] <grym> yeah, it's easy to stale state
[02:57:05] *** Joins: raxor2k (~raxor2k@78.158.246.35)
[02:57:24] *** Quits: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[02:58:04] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:58:24] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[02:58:51] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[02:58:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:00:04] *** Joins: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a)
[03:01:41] *** Quits: gossie (~gossie@2001:1c02:18d:2900:ab04:8a13:19b2:197e) (Ping timeout: 246 seconds)
[03:01:47] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[03:02:34] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[03:02:53] *** Quits: raxor2k (~raxor2k@78.158.246.35) ()
[03:03:05] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[03:03:12] *** Quits: AsenMx (~AsenMx@user/asenmx) (Remote host closed the connection)
[03:05:08] *** Joins: forgotmynick (uid24625@hampstead.irccloud.com)
[03:07:13] <ldericher> So, I've got this problem where I have an "Instance" consists of several "Projects". Each Instance has a unique InstanceConfig, but now I need to access that InstanceConfig inside a Project and it gets messy. Any general ideas or patterns to the rescue?
[03:07:35] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:b694:cb3e:a172:320c) (Ping timeout: 264 seconds)
[03:08:47] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 264 seconds)
[03:10:23] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:10:44] <ChrisWarrick> ldericher: Project could just have a reference to its parent Instance
[03:10:52] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[03:12:30] <Pi-sistance> nope, it does it if i paste to any cell in any notebook. c
[03:12:58] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 260 seconds)
[03:13:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5)
[03:13:34] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[03:14:01] *** Joins: monkey_ (~user@190.104.116.153)
[03:14:57] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[03:15:11] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b48a:cbb3:ddf:8b41)
[03:17:22] *** Quits: gitly (~gitly@148.252.128.93) (Ping timeout: 268 seconds)
[03:17:43] *** Joins: gossie (~gossie@2001:1c02:18d:2900:ab04:8a13:19b2:197e)
[03:17:49] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Quit: anonymous)
[03:18:23] *** Joins: anonymous (~anonymous@gateway/tor-sasl/anonymous)
[03:19:37] *** Joins: gitly (~gitly@148.252.128.93)
[03:19:41] *** Quits: subopt (~subopt@2603-8081-2302-459a-a076-3cd4-87ec-15d6.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:20:35] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[03:20:51] *** Joins: causa-sui (~causasui@192.241.228.169)
[03:21:23] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 264 seconds)
[03:23:49] *** Joins: zebrag (~chris@user/zebrag)
[03:23:55] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[03:25:06] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 260 seconds)
[03:26:00] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[03:26:09] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:1441:e3a1:9c75:8917)
[03:26:44] *** Joins: k4rt0ff31ch33t4h (~k4rt0ff3l@94-21-189-170.pool.digikabel.hu)
[03:28:19] *** Joins: Naan (~naan@user/naan)
[03:28:42] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[03:29:06] *** Quits: shuvarek (~shuvarek@staticline-31-182-169-28.toya.net.pl) (Ping timeout: 265 seconds)
[03:30:25] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[03:30:30] *** Quits: emf (~emf@2620:10d:c090:400::5:6b1) (Quit: emf)
[03:31:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[03:33:00] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:33:00] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[03:33:35] *** Joins: fikran (~fikran@user/fikran)
[03:34:01] *** Joins: jinsun___ (~quassel@user/jinsun)
[03:34:49] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 256 seconds)
[03:36:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[03:37:34] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[03:38:19] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[03:38:20] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[03:39:01] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:39:13] *** Joins: trampel (~trampel@2601:602:9c00:921:747b:6c01:3983:1464)
[03:39:27] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[03:39:53] <nomic> how do i get the stack trace i get with w in the debugger in python code
[03:40:36] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[03:41:11] *** Quits: stockholm (~Andreas@p200300d2c709b9006c27c2e63886e17c.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[03:41:36] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[03:42:03] *** Quits: montybanksnyc (~montybank@pool-108-5-238-57.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[03:43:03] <FunkyBob> import traceback
[03:43:07] *** Joins: ano (~ano@user/ano)
[03:43:10] <FunkyBob> nomic: then traceback.print_tb()
[03:43:48] <nomic> ws using  traceback.formaat_exc() whats tb()
[03:44:27] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 256 seconds)
[03:45:07] <Yhg1s> nomic: print_tb is a different function in the traceback module. https://docs.python.org/3/library/traceback.html has an overview of the different functions in the module.
[03:45:53] <nomic> ok another q.
[03:46:12] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:50d1:715b:3051:a68) (Ping timeout: 256 seconds)
[03:46:28] <nomic> how do i get .. im in a bunch of methods in a buch of classes (anywhere) n a method breaks. is there any system or underscore value that gives me the "current method name" @ the break line
[03:46:32] *** Quits: ede (~ede@user/ede) (Remote host closed the connection)
[03:47:02] <Yhg1s> nomic: what do you mean you are 'in' a method? Are you in a debugger?
[03:47:03] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[03:47:05] <nomic> this_function_name = sys._getframe(  ).f_code.co_name
[03:47:07] <nomic> ?
[03:47:11] <nomic> yes
[03:47:11] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 264 seconds)
[03:47:16] <nomic> pdb. it breeaks to opdb
[03:47:50] <nedbat> is there any reason to think that ironpython or jython will become real again in the future? I'm asking as a coverage.py maintainer
[03:48:25] <Yhg1s> nomic: debuggers normally have direct commands for this. in pdb it's 'where' or 'bt'
[03:48:43] <nomic> no i want it in the code
[03:48:45] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[03:48:53] <nomic> i want to identify "current method" in the python code
[03:48:54] <Yhg1s> nomic: okay, so _not_ in a debugger?
[03:48:54] *** Joins: stockholm (~Andreas@p200300d2c709b9006c27c2e63886e17c.dip0.t-ipconnect.de)
[03:48:56] *** Joins: ede (~ede@user/ede)
[03:49:02] <Yhg1s> nomic: in the code, you can just *look at the code*.
[03:49:06] <nomic> no.
[03:49:33] <nedbat> nomic: tell us more about what you need.  you want in `def myfunc` to have a call that will return "myfunc"?
[03:50:07] *** Joins: jazzy (~jaziz@user/jaziz)
[03:50:32] *** Joins: walrus_man (~Thunderbi@131.204.254.86)
[03:50:40] *** Quits: s0k1t (~user@68.235.43.76) (Ping timeout: 268 seconds)
[03:51:00] <sveinse> Anyone here toyed with copilot in python?
[03:51:02] <nomic> its just gonna be on a stack .. its not that obvious
[03:51:22] <nomic> the stack. which has all kinds of system stuff .. not just your  stuff
[03:51:26] *** Quits: walrus_man (~Thunderbi@131.204.254.86) (Client Quit)
[03:51:43] <nedbat> nomic: let's take a step back: tell us more about the big picture here.  What are you trying to do?
[03:51:49] <nomic> forget it
[03:51:52] <nomic> ive moved on
[03:51:55] <nomic> bye.
[03:52:09] <nedbat> nomic: ok, i hope we can help next time
[03:52:20] <nomic> u do on less obscure stuff.
[03:52:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4c46:1cbc:d9c:20c5) (Quit: Leaving)
[03:52:27] <MacGyver> Iirc you can import pdb and then just print a stacktrace randomly.
[03:52:51] <nedbat> nomic: we can help with obscure things too, we just need help understanding the problem.
[03:52:54] <MacGyver> Could be wrong though.
[03:54:05] <MacGyver> Oh and there's the traceback module.
[03:54:23] <nedbat> and the inspect module
[03:54:33] <MacGyver> But you were already pointed at that.
[03:55:11] <nedbat> it will remain a mystery
[03:57:02] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[03:57:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:58:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:00:48] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[04:01:54] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:03:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873)
[04:04:03] *** Quits: stockholm (~Andreas@p200300d2c709b9006c27c2e63886e17c.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[04:05:48] *** Joins: ano (~ano@user/ano)
[04:06:12] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[04:06:29] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[04:07:07] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 256 seconds)
[04:07:40] *** very_sneaky_ is now known as very_sneaky
[04:08:03] *** Joins: jamer05 (~u0_a369@user/jamer05)
[04:09:00] *** Joins: orion (~orion@user/orion)
[04:09:16] <orion> Hi. Is it possible to define an async lambda?
[04:09:55] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[04:10:32] <Yhg1s> orion: 'lambda' defines a function, the same kind as 'def'. There is no equivalent expression to produce 'async def' functions. It'd also be of limited utility, as you usually want 'await' to appear one or more times in an async function.
[04:11:11] <Pi-sistance> does pythn only calculate the prime root if there are multiple complex roots?
[04:11:21] <orion> Yhg1s: Thank you. Is there a way to generate an empty/do-nothing corouting?
[04:11:24] <orion> coroutine*
[04:11:35] *** Quits: Praise (~Fat@user/praise) (Quit: Vado a fare qualcosa di utile.)
[04:11:43] *** Quits: dalan62367 (~dalan@203.214.91.172) (Quit: dalan62367)
[04:11:47] <Yhg1s> orion: 'async def do_nothing(): pass'
[04:12:22] <Pi-sistance> oh, nvm. for functions, its going to vary if the closest root to the positive x axis is the real one, guess I can use certain functions
[04:12:36] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Max SendQ exceeded)
[04:13:01] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[04:13:49] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[04:14:01] *** Joins: grooverman (~grooverma@179.99.123.165)
[04:14:26] *** Joins: Praise (~Fat@user/praise)
[04:14:38] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[04:14:59] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:15:00] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[04:15:10] *** Joins: ano (~ano@user/ano)
[04:15:10] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:6528:19dc:b779:761c)
[04:15:26] *** jinsun___ is now known as jinsun
[04:16:38] *** Quits: k4rt0ff31ch33t4h (~k4rt0ff3l@94-21-189-170.pool.digikabel.hu) (Quit: leaving)
[04:17:11] *** Quits: vit (~vit@chello085216193138.chello.sk) (Ping timeout: 264 seconds)
[04:17:19] *** Quits: grooverman (~grooverma@179.99.123.165) (Client Quit)
[04:17:53] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[04:18:00] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[04:18:10] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[04:18:23] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 264 seconds)
[04:18:38] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[04:18:45] <orion> Yhg1s: Thank you
[04:18:47] *** Quits: orion (~orion@user/orion) (Quit: Leaving...)
[04:19:00] *** Joins: grooverman (~grooverma@179.99.123.165)
[04:19:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:19:23] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[04:19:43] *** Joins: Wulf (~Wulf@user/wulf)
[04:22:33] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: AA TOO NEE ZUBARALHADEEEEEEEEEEEED)
[04:23:02] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[04:23:58] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Ping timeout: 268 seconds)
[04:24:29] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:24:59] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 264 seconds)
[04:25:24] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[04:25:47] *** Joins: mdemo (~mdemo@user/mdemo22)
[04:27:50] *** Quits: trampel (~trampel@2601:602:9c00:921:747b:6c01:3983:1464) (Quit: Leaving)
[04:28:32] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[04:29:13] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[04:29:59] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[04:30:32] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:31:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 245 seconds)
[04:32:08] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[04:33:25] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:33:30] *** Joins: brabrax (~brabrax@user/brabrax)
[04:35:02] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:35:32] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[04:35:41] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 268 seconds)
[04:37:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:38:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:38:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:40:15] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[04:40:42] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[04:41:08] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:f4e8:2c2b:55b8:85b6) (Quit: Leaving)
[04:42:35] *** Joins: audiobirb (~audio@user/audio)
[04:42:47] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[04:43:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[04:43:26] *** Quits: xah37 (~manjaro-g@2603-6000-8c0b-3200-0000-0000-0000-0001.res6.spectrum.com) (Ping timeout: 245 seconds)
[04:43:46] *** Joins: Klinda (~superleag@user/klinda)
[04:44:19] *** Joins: pycurious (~Adium@user/pycurious)
[04:45:11] *** Joins: Nspace (~Nspace@user/nspace)
[04:45:25] *** Joins: subopt (~subopt@2603-8081-2302-459a-e48b-1ae1-4f74-9c2f.res6.spectrum.com)
[04:47:18] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[04:47:36] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:48:15] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[04:48:29] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 256 seconds)
[04:48:48] *** Joins: e2m4n (~ezman@user/e2m4n)
[04:49:20] *** Joins: mallkrampus (~mallkramp@172.93.207.88)
[04:49:45] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[04:50:02] *** Quits: LuKaRo (~LuKaRo@p4fc32052.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:50:13] *** Joins: sammie (~sammie@2601:183:c180:3f00:8bec:c382:3a61:2d2)
[04:50:43] *** Quits: magla (~gelignite@55d446ec.access.ecotel.net) (Quit: Stay safe!)
[04:50:45] *** Quits: jamer05 (~u0_a369@user/jamer05) (Ping timeout: 256 seconds)
[04:51:58] *** Joins: LuKaRo_ (~LuKaRo@p57b1560c.dip0.t-ipconnect.de)
[04:52:31] *** Quits: nomic (~nomic@185.192.69.224) (Quit: Leaving)
[04:53:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[04:55:11] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Remote host closed the connection)
[04:55:17] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[04:55:24] *** Joins: TuckerBrand1997 (~TuckerBra@209.161.248.138)
[04:55:41] *** Quits: subopt (~subopt@2603-8081-2302-459a-e48b-1ae1-4f74-9c2f.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:55:55] *** Quits: TuckerBrand1997 (~TuckerBra@209.161.248.138) (Client Quit)
[04:56:57] *** Joins: causa-sui (~causasui@192.241.228.169)
[04:57:23] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 264 seconds)
[04:57:30] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Ping timeout: 260 seconds)
[04:57:36] *** guenhael1 is now known as guenhael
[04:58:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:59:44] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:00:52] *** Quits: sammie (~sammie@2601:183:c180:3f00:8bec:c382:3a61:2d2) (Quit: WeeChat 3.0.1)
[05:01:31] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 256 seconds)
[05:01:43] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:04:07] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[05:06:31] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 268 seconds)
[05:08:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:684d:f603:e70f:1873) (Remote host closed the connection)
[05:08:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b)
[05:09:29] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Remote host closed the connection)
[05:10:46] *** Joins: anonymous (~anonymous@gateway/tor-sasl/anonymous)
[05:10:49] *** Quits: p-i- (~Ohmu@223.206.149.15) (Remote host closed the connection)
[05:11:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e2fc:b8df:77ad:8f5b) (Remote host closed the connection)
[05:14:21] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[05:16:26] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[05:17:27] *** Joins: newpy (~newpy@206.168.231.90)
[05:18:29] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:19:08] *** Quits: stoneware (~stoneware@user/stoneware) (Quit: The Lounge - https://thelounge.chat)
[05:19:22] *** Bakunin is now known as Pillator
[05:19:38] *** Pillator is now known as Bakunin
[05:19:56] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[05:22:07] *** Joins: stoneware (~stoneware@user/stoneware)
[05:22:31] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:6528:19dc:b779:761c) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[05:22:57] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[05:23:25] *** Joins: superboot (~agentgasm@user/superboot)
[05:23:47] *** Quits: mallkrampus (~mallkramp@172.93.207.88) (Ping timeout: 268 seconds)
[05:25:08] *** Joins: emf (~emf@63.64.162.234)
[05:25:35] *** Quits: flokuehn (~flokuehn@87.123.247.94) (Ping timeout: 264 seconds)
[05:26:13] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[05:27:26] *** Joins: flokuehn (~flokuehn@87.123.247.90)
[05:27:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:27:35] *** Quits: binary01 (~binary01@192.110.171.216) (Ping timeout: 256 seconds)
[05:28:19] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[05:29:51] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[05:29:57] *** Quits: emf (~emf@63.64.162.234) (Ping timeout: 268 seconds)
[05:31:02] *** Joins: emf (~emf@2620:10d:c090:400::5:3d2a)
[05:31:30] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[05:32:02] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[05:32:37] *** Joins: causa-sui (~causasui@192.241.228.169)
[05:34:23] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[05:34:59] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:35:55] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:38:21] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[05:38:47] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[05:41:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[05:41:19] *** Quits: emf (~emf@2620:10d:c090:400::5:3d2a) (Quit: emf)
[05:42:01] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[05:42:56] *** Joins: fikran (~fikran@user/fikran)
[05:42:59] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 264 seconds)
[05:44:07] *** Joins: pycurious (~Adium@user/pycurious)
[05:44:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:46:15] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[05:46:25] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Read error: Connection reset by peer)
[05:47:39] *** Quits: pycurious (~Adium@user/pycurious) (Read error: Connection reset by peer)
[05:48:34] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:1441:e3a1:9c75:8917) (Quit: Textual IRC Client: www.textualapp.com)
[05:48:55] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:49:39] *** Quits: Bakunin (~Lindis@user/lindis) (Ping timeout: 276 seconds)
[05:50:24] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:52:01] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:d565:7fc6:610:95fc)
[05:52:49] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[05:54:15] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[05:54:23] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:d565:7fc6:610:95fc) (Client Quit)
[05:57:35] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[05:58:08] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:483:6a56:2b1c:b224)
[05:58:40] *** Joins: binary01 (~binary01@192.110.171.216)
[05:59:38] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[05:59:45] <Samian> Hi. Anyone know how to convert np.array(([[[ 0.5000],[ 0.7311]],[[11.0000],[11.0000]]]) into np.array([[[0.5000],[11.0000]],[[0.7311],[11.0000]]])
[05:59:56] *** Joins: Sadale (~Sadale@user/sadale)
[06:00:10] <Samian> I think a transpose and flip will do it?
[06:00:27] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[06:01:00] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:483:6a56:2b1c:b224) (Client Quit)
[06:03:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[06:04:13] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2ccc:349d:194d:660c)
[06:05:02] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:05:08] <Samian> woohoo figured it out
[06:06:21] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[06:07:20] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[06:09:30] *** Joins: causa-sui (~causasui@192.241.228.169)
[06:10:01] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[06:10:46] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[06:14:01] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:a92c:1caf:472b:ab75)
[06:15:33] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:16:18] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[06:16:18] *** Quits: naranja (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[06:16:33] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:16:36] *** Quits: greentree (~greentree@pool-108-6-121-44.nycmny.fios.verizon.net) (Quit: greentree)
[06:16:46] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[06:17:26] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[06:17:26] *** brabrax_ is now known as brabrax
[06:18:12] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:2ccc:349d:194d:660c) (Quit: Textual IRC Client: www.textualapp.com)
[06:20:55] *** Quits: relentless (~relentles@user/relentless) (K-Lined)
[06:21:27] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:64ec:672:866e:b65)
[06:21:59] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[06:22:11] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:22:26] *** Joins: Kvothe (~weechat@user/elodin)
[06:22:34] *** Quits: Elodin (~weechat@user/elodin) (Read error: Connection reset by peer)
[06:23:01] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[06:23:50] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 260 seconds)
[06:24:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98)
[06:25:26] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Quit: anonymous)
[06:26:29] *** Joins: Bakunin (~Lindis@user/lindis)
[06:26:38] *** Joins: p-i- (~Ohmu@223.206.149.15)
[06:26:47] *** Quits: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb) (Read error: Connection reset by peer)
[06:27:24] *** Joins: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb)
[06:28:44] *** Quits: grooverman (~grooverma@179.99.123.165) (Quit: No Ping reply in 180 seconds.)
[06:30:01] *** Quits: Arw (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[06:30:05] *** Joins: grooverman (~grooverma@179.99.123.165)
[06:30:49] *** Joins: RiFo (~RiFo@user/rifo)
[06:32:24] *** Joins: dohtem (uid524096@user/dohtem)
[06:33:32] *** Joins: anonymous (~anonymous@gateway/tor-sasl/anonymous)
[06:33:49] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[06:33:53] *** Joins: millido (~millido@84.210.150.128)
[06:35:44] <altendky> so i've got some tests including the likes of `assert run_time < 1.5`.  big picture, how is it good to handle performance benchmarks?  small picture, https://github.com/pytest-dev/pytest-rerunfailures/issues has a heavy list of problems (reruns fixtures, not asyncio compatible (same as first thing?), can't set rerun-failure exceptions on decorator), is there something better?
[06:36:53] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:37:34] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:39:55] *** Joins: rapier (~rapier@user/rapier)
[06:39:55] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[06:40:26] <rapier> hi everyone
[06:40:39] <rapier> how can I center the string name with the code: https://bpa.st/XAKA ?
[06:40:50] <rapier> NAME*
[06:41:43] <grym> rapier: i always give up at a certain point here and just make tabulate do it https://pypi.org/project/tabulate/
[06:42:41] *** Quits: p-i- (~Ohmu@223.206.149.15) (Remote host closed the connection)
[06:42:42] <rapier> why?
[06:42:51] <rapier> and what about the challenge?
[06:42:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:43:01] <rapier> how*
[06:43:05] <grym> because it works flawlessly, i just want the data spit out nicely, and i'm lazy :)
[06:43:15] *** Joins: p-i- (~Ohmu@223.206.149.15)
[06:43:19] <rapier> ok
[06:43:22] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[06:43:23] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Quit: out of band urgency)
[06:43:44] <rapier> i want a beautifull output
[06:43:58] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:44:11] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[06:44:19] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[06:44:23] <rapier> beautiful*
[06:45:33] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:46:51] <rapier> look how beautiful the output goes out > https://image.prntscr.com/image/50aFgEarRJWd7PDr48a8XA.png
[06:47:12] <rapier> but i don't know how to center NAME
[06:47:14] *** Quits: grooverman (~grooverma@179.99.123.165) (Read error: Connection reset by peer)
[06:47:31] *** Joins: emerent_ (~quassel@p200300cd574309b6ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:47:32] *** emerent is now known as Guest6618
[06:47:32] *** emerent_ is now known as emerent
[06:47:32] <SnoopJ> rapier, if you know what the total width of the column should be, you can do e.g. `f'{"Stephen Curry":^20}'`
[06:47:39] *** Quits: Guest6618 (~quassel@p200300cd573070d3ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:47:46] <SnoopJ> where instead of 20 you'd use that known width
[06:47:47] *** Joins: grooverman (~grooverma@179.99.123.165)
[06:48:44] *** Joins: hel0 (~hel0@user/redrum88)
[06:49:04] <SnoopJ> oh, you do specify that in that paste. Yea, use '^' instead of '<'
[06:49:10] *** Joins: gitesh (uid423739@ilkley.irccloud.com)
[06:50:04] <rapier> ^ means characters length
[06:50:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:51:14] *** Quits: grooverman (~grooverma@179.99.123.165) (Client Quit)
[06:51:34] <rapier> hahaha
[06:51:36] <rapier> i got it
[06:51:38] <rapier> < left
[06:51:40] <rapier> hahaha
[06:52:33] <SnoopJ> https://docs.python.org/3/library/string.html#formatspec
[06:52:49] <rapier> snoop, you're nice, thank a lot
[06:52:50] *** Joins: grooverman (~grooverma@177.102.119.40)
[06:52:50] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[06:52:59] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: rickybob)
[06:53:14] <rapier> now it's perfect
[06:53:20] <SnoopJ> rapier, I've never seen the trick of `fmt = "some string".format; fmt(...)` before, I will have to think about that :)
[06:54:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:54:18] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[06:54:45] <rapier> this is a reason that I like to talk to people, we always can learn something new
[06:54:47] *** Quits: forgotmynick (uid24625@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:55:00] <SnoopJ> yup
[06:55:07] <p-i-> Isn't .format legacy/deprecated at this point in time?
[06:55:29] <p-i-> i.e. superceded by f-strings
[06:55:43] <altendky> no, you can't create f-strings at runtime.
[06:56:02] *** Joins: Celeo (~Celeo@user/celeo)
[06:56:57] <rapier>  look the beatiful table > https://image.prntscr.com/image/W4Z-yKJHSOq5t3Fu4r_a_A.png
[06:56:58] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 260 seconds)
[06:57:23] <rapier> p-i-, i don't know that, i'm still learning a lot about python
[06:57:29] <grym> rapier: http://0x0.st/-R8U.png this is what i wound up with
[06:57:41] <grym> yours looks real slick though
[06:58:04] <SnoopJ> p-i-, nope
[06:58:48] <rapier> grym, i'm learning, i wanted to create it by myself
[06:59:02] <grym> rapier: great!  it's fun stuff
[06:59:08] <rapier> yeah
[06:59:35] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[06:59:39] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[06:59:50] *** Joins: callq (~callq@2409:4062:2d0c:d18f:992e:9e9b:dd11:9514)
[06:59:54] *** Joins: mickey8 (~user@user/mickey)
[07:00:59] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[07:03:38] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[07:04:12] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[07:04:12] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[07:05:45] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[07:06:21] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:07:15] *** Joins: binary011 (~binary01@192.110.171.216)
[07:08:06] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[07:09:25] <rapier> grym, with tabulate i can't adjust different alignments for the header and table body
[07:09:28] <rapier> LoL
[07:09:36] *** Joins: dulanic (~dulanic@47.187.144.163)
[07:09:48] <rapier> it's not very customizable
[07:11:17] *** Quits: binary01 (~binary01@192.110.171.216) (Ping timeout: 256 seconds)
[07:11:52] <grym> rapier: ok
[07:12:22] *** Joins: causa-sui (~causasui@192.241.228.169)
[07:12:55] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[07:13:12] <rapier> i've to go back the original problem... i was running away
[07:15:25] *** Joins: bindu (~bindu@user/bindu)
[07:16:02] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[07:17:12] *** Joins: anonymeowo (~anonymeow@107.189.14.18)
[07:17:52] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 268 seconds)
[07:18:13] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[07:18:16] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[07:19:02] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:20:19] <rapier> guys, is it possible to call a function inside in another function from outside?
[07:20:57] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[07:21:05] *** Joins: anonymous (~anonymous@gateway/tor-sasl/anonymous)
[07:21:38] <grym> not in any sane way
[07:21:46] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[07:22:18] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[07:22:59] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[07:23:07] <rapier> ok
[07:23:10] <rapier> thank you
[07:23:13] <rapier> i have to go
[07:23:14] <rapier> bye
[07:24:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:24:40] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Remote host closed the connection)
[07:24:53] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[07:24:56] *** Joins: anonymous (~anonymous@gateway/tor-sasl/anonymous)
[07:26:33] *** Joins: jbox (~jbox@user/jbox)
[07:28:42] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 260 seconds)
[07:30:23] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[07:33:52] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[07:36:23] *** Quits: Matt343 (~Matt343@c-69-181-108-8.hsd1.ca.comcast.net) (Quit: Client closed)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:05] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[07:37:12] *** Quits: jbox (~jbox@user/jbox) (Quit: Leaving)
[07:38:17] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[07:38:32] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:39:01] *** Joins: anonymous__ (~anonymous@gateway/tor-sasl/anonymous)
[07:39:16] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[07:39:58] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:40:07] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[07:40:23] *** Joins: jbox (~jbox@user/jbox)
[07:40:50] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[07:41:10] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Remote host closed the connection)
[07:41:43] *** Quits: jbox (~jbox@user/jbox) (Client Quit)
[07:41:55] *** Quits: binary011 (~binary01@192.110.171.216) (Ping timeout: 268 seconds)
[07:43:08] *** anonymous__ is now known as anonymous
[07:43:24] *** Quits: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[07:46:34] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[07:46:52] *** Joins: jbox (~jbox@user/jbox)
[07:48:33] *** Joins: atlas (~jbox@user/jbox)
[07:48:55] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[07:49:10] *** Joins: grooverman (~grooverma@179.99.123.165)
[07:49:12] *** Joins: txtsd (~txtsd@user/txtsd)
[07:49:48] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:50:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[07:51:10] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[07:51:31] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 250 seconds)
[07:51:32] *** jmiehe1 is now known as jmiehe
[07:52:17] *** Joins: fikran (~fikran@user/fikran)
[07:55:21] *** Joins: arinov (~arinov@213.194.126.155)
[07:55:29] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 256 seconds)
[07:55:56] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 245 seconds)
[07:55:59] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[07:57:37] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.149-15.dynamic.3bb.co.th)
[07:58:01] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.149-15.dynamic.3bb.co.th) (Remote host closed the connection)
[07:58:06] *** Quits: p-i- (~Ohmu@223.206.149.15) (Read error: Connection reset by peer)
[07:59:06] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[07:59:55] <catern> is there a nice way to support multiple packages (e.g. independently installable and publishable to pypi) with a single setup.py?
[08:00:17] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[08:01:02] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[08:02:21] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[08:03:22] *** Joins: jinsun__ (~quassel@user/jinsun)
[08:04:35] *** Quits: jbox (~jbox@user/jbox) (Quit: Leaving)
[08:04:44] *** Quits: atlas (~jbox@user/jbox) (Quit: Leaving)
[08:04:44] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[08:05:01] *** Joins: jbox (~jbox@user/jbox)
[08:05:10] *** Quits: jbox (~jbox@user/jbox) (Remote host closed the connection)
[08:05:11] *** Joins: atlas (~jbox@user/jbox)
[08:05:58] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[08:06:37] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[08:06:58] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[08:07:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[08:15:03] <supakeen> Not that  know of.
[08:15:06] <supakeen> + I
[08:15:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[08:16:34] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[08:18:22] *** Joins: reset (~reset@user/reset)
[08:18:59] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 264 seconds)
[08:19:57] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Remote host closed the connection)
[08:20:58] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[08:22:35] *** Quits: spiderman (~spiderman@user/spiderman) (Quit: WeeChat 3.2)
[08:26:08] *** Joins: eson123 (~eson123@118.69.128.37)
[08:28:12] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c9b9-834f-44a0-976a.res6.spectrum.com)
[08:28:35] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 264 seconds)
[08:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:33:01] *** Quits: hel0 (~hel0@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[08:34:20] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[08:35:59] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-5888-6643-8838-ea36.res6.spectrum.com) (Read error: Connection reset by peer)
[08:36:51] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[08:37:20] *** Quits: zepolen_ (~zepolen@ppp-94-66-223-212.home.otenet.gr) (Ping timeout: 246 seconds)
[08:37:55] *** Joins: Abrax- (~Abrax@user/abrax)
[08:40:00] *** Quits: Phase (~phase@user/phase) (Remote host closed the connection)
[08:40:55] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 250 seconds)
[08:41:00] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[08:41:26] *** Joins: Phase (~phase@user/phase)
[08:41:49] *** Quits: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb) (Read error: Connection reset by peer)
[08:41:58] *** Joins: l4yer (~l4yer@2001:ac8:31:6e:1012:bacb:dd5d:d3cd)
[08:42:27] *** Joins: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb)
[08:43:49] *** Joins: xah37 (~manjaro-g@cpe-65-25-171-42.wi.res.rr.com)
[08:44:27] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[08:44:29] *** Abrax- is now known as Abrax
[08:45:15] *** Joins: pycurious (~Adium@user/pycurious)
[08:45:15] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[08:48:15] *** Joins: dalan62367 (~dalan@203.214.91.172)
[08:50:22] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[08:52:13] *** Quits: l4yer (~l4yer@2001:ac8:31:6e:1012:bacb:dd5d:d3cd) (Ping timeout: 268 seconds)
[08:52:14] *** Joins: pycurious (~Adium@user/pycurious)
[08:52:15] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[08:55:07] *** Joins: l4yer (~l4yer@195.181.170.210)
[08:58:08] *** Joins: sfields_ (~sfields@2605:a601:adea:7a00:876c:3f04:3987:d13a)
[08:58:44] *** Joins: teut (~teut@223.182.71.245)
[08:59:48] <teut> https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html    I m trying to use this.
[08:59:49] <teut> df.assign(AgeType = lambda y: "young" if y.Age > old_start_age else "old")
[08:59:49] <teut> and getting https://bpa.st/AYMQ
[09:00:24] <teut> seems like y is a series
[09:00:31] *** Quits: sfields (~sfields@2605:a601:adea:7a00:66bd:f7af:8a04:1b90) (Ping timeout: 245 seconds)
[09:00:38] <teut> but then how to do it?
[09:01:09] *** Joins: pro_z (~pro_z@37.214.56.218)
[09:01:48] *** Quits: sazawal (~sazawal@122.161.85.123) (Remote host closed the connection)
[09:02:16] *** Joins: sazawal (~sazawal@122.161.85.123)
[09:02:35] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[09:06:03] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[09:08:35] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[09:09:04] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[09:10:00] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:10:43] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[09:11:32] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 240 seconds)
[09:12:18] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 260 seconds)
[09:13:04] *** Joins: Maikel (~Maikel@130.61.63.136)
[09:13:19] *** Joins: analoq (~yashi@user/dies)
[09:15:47] *** Joins: causa-sui (~causasui@192.241.228.169)
[09:18:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:5f55:fe64:938c:3d98) (Ping timeout: 264 seconds)
[09:20:14] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 260 seconds)
[09:20:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:21:23] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[09:22:28] <BrenBarn> you probably want to use either `Series.map` or `np.where` depending on your preference
[09:22:45] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 256 seconds)
[09:23:16] <BrenBarn> something like `lambda y: (y.Age > old_start_age).map({True: "old", False: "young"})`
[09:24:21] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[09:25:50] *** Quits: grooverman (~grooverma@179.99.123.165) (Read error: Connection reset by peer)
[09:26:05] *** Joins: grooverman (~grooverma@179.99.123.165)
[09:26:08] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[09:26:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[09:30:49] *** Joins: zepolen (~zepolen@ppp-94-66-223-212.home.otenet.gr)
[09:31:10] <teut> thanks BrenBarn
[09:33:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:34:41] *** Joins: pycurious (~Adium@user/pycurious)
[09:35:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:37:20] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:39:11] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[09:40:07] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[09:40:18] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[09:44:16] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[09:44:47] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 264 seconds)
[09:45:16] *** Quits: encukou (quassel@nat-pool-brq-t.redhat.com) (Ping timeout: 268 seconds)
[09:45:26] *** Joins: shokohsc86 (~shokohsc@174.197.23.93.rev.sfr.net)
[09:46:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:46:30] *** Joins: Atque (~Atque@user/atque)
[09:46:33] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[09:50:31] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[09:50:42] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[09:51:05] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[09:51:41] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[09:52:46] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[09:53:58] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[09:55:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:55:50] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[09:55:53] *** Joins: cation21 (cation@user/cation)
[09:56:21] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[09:57:06] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[09:57:51] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[09:59:10] *** cation21 is now known as cation
[09:59:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:01:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[10:01:38] *** Joins: fikran (~fikran@user/fikran)
[10:02:42] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 260 seconds)
[10:03:01] *** Quits: schumaml (~schumaml@p200300e2ef1bef0053c1821a43d17d29.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[10:03:08] *** Joins: dead1 (~dead@user/dead1)
[10:03:37] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[10:04:32] *** Joins: schumaml (~schumaml@p57b7e334.dip0.t-ipconnect.de)
[10:05:05] *** Joins: djapo (~archangel@user/djapo)
[10:05:58] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[10:06:41] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[10:06:50] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 268 seconds)
[10:08:11] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[10:08:44] *** Joins: mei (~mei@user/mei)
[10:09:55] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 268 seconds)
[10:11:11] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[10:12:41] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[10:12:56] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Quit: bye)
[10:14:38] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[10:15:16] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[10:16:09] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[10:16:56] *** Joins: han-solo (~hanish@user/han-solo)
[10:17:11] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 264 seconds)
[10:19:35] *** atlas is now known as jbox
[10:19:40] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[10:19:58] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:2ea6:d5a6:e949:ecd2)
[10:20:54] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[10:22:04] *** Joins: sandb0y (~pirate@user/sandb0y)
[10:22:29] *** Joins: eis (~eis@2601:446:580:c080:20c:29ff:fe96:c172)
[10:24:56] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[10:25:06] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[10:26:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[10:26:20] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[10:30:42] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[10:31:06] *** Joins: vit (~vit@chello085216193138.chello.sk)
[10:31:38] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[10:31:40] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:33:09] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[10:35:56] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[10:38:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:41:49] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[10:42:01] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[10:43:19] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[10:43:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:44:12] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:44:27] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:48:19] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[10:48:56] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[10:50:55] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[10:51:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[10:52:01] *** Joins: aphysically (~aphysical@user/aphysically)
[10:53:15] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:54:10] *** Joins: seednode (~seednode@user/seednode)
[10:57:20] *** Joins: caveman_ (~caveman@gateway/tor-sasl/caveman)
[10:57:34] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:59:51] *** Joins: gloomy_desktop (~ldorigo@81.161.167.135)
[11:00:07] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[11:00:35] *** Joins: ali1234 (~al@user/ali1234)
[11:00:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[11:01:02] *** Joins: palasso (~palasso@user/palasso)
[11:01:33] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[11:01:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:02:29] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[11:06:10] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[11:08:10] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:a92c:1caf:472b:ab75) (Read error: Connection reset by peer)
[11:09:01] *** Quits: sazawal (~sazawal@122.161.85.123) (Remote host closed the connection)
[11:09:28] *** Joins: sazawal (~sazawal@122.161.85.123)
[11:09:54] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[11:10:35] *** Quits: dead1 (~dead@user/dead1) (Quit: Leaving)
[11:14:35] *** mermaid\Chickatr is now known as aoei\Chickatrice
[11:14:57] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[11:17:23] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:19:15] *** Joins: causa-sui (~causasui@192.241.228.169)
[11:21:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[11:21:42] *** Joins: manti7 (~manti7@176.10.104.94)
[11:24:16] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 245 seconds)
[11:25:28] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 268 seconds)
[11:26:11] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[11:28:07] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[11:28:12] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[11:36:19] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[11:40:08] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[11:40:31] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 245 seconds)
[11:40:42] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 260 seconds)
[11:41:26] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Remote host closed the connection)
[11:42:18] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:42:26] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[11:42:41] *** Joins: mickey8 (~user@user/mickey)
[11:44:34] *** Quits: bim9262 (~bim9262@user/bim9262) (Quit: ZNC - https://znc.in)
[11:44:53] *** Joins: bim9262 (~bim9262@user/bim9262)
[11:45:12] *** Quits: caveman_ (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:45:30] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[11:45:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:45:50] *** Joins: portalrat (~portalrat@user/portalrat)
[11:46:19] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[11:46:54] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[11:47:36] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[11:47:45] *** Joins: brabrax (~brabrax@user/brabrax)
[11:48:23] *** Quits: martums (~martums@user/martums) (Read error: Connection reset by peer)
[11:48:39] *** Joins: deltab (~deltab@user/deltab)
[11:49:14] *** Joins: kosh (~kosh@user/kosh)
[11:49:22] *** Joins: martums (~martums@user/martums)
[11:50:58] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[11:51:40] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[11:52:23] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[11:55:36] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Remote host closed the connection)
[11:55:51] *** Quits: MrSunshine (~MrSunshin@h-212-85-92-190.NA.cust.bahnhof.se) (Quit: Leaving)
[11:56:26] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:56:36] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[11:57:30] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[11:58:28] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[11:58:43] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[12:00:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Read error: Connection reset by peer)
[12:00:26] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:01:39] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[12:02:30] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Remote host closed the connection)
[12:03:06] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 260 seconds)
[12:03:46] *** Joins: anonymous (~anonymous@gateway/tor-sasl/anonymous)
[12:04:22] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:05:34] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[12:05:42] *** Joins: Pickchea (~private@user/pickchea)
[12:06:06] *** Joins: seednode (~seednode@user/seednode)
[12:06:22] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[12:08:13] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:08:38] *** Quits: grooverman (~grooverma@179.99.123.165) (Read error: Connection reset by peer)
[12:08:54] *** Joins: grooverman (~grooverma@177.95.12.14)
[12:09:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[12:09:40] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[12:10:32] *** Quits: teut (~teut@223.182.71.245) (Ping timeout: 256 seconds)
[12:10:59] *** Joins: fikran (~fikran@user/fikran)
[12:11:15] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[12:13:07] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:14:19] *** Joins: zaphod_b (~zaphod_b@82-64-217-225.subs.proxad.net)
[12:14:27] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[12:14:50] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[12:15:17] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[12:15:51] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:16:09] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Ping timeout: 256 seconds)
[12:16:23] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[12:17:44] <zaphod_b> asking again: when run under the regular python repl, the code here http://pastie.org/p/61dtW0n4KB1VpgFIjLhPss produces 2 lines of output, namely '3' and '2', that apparently are the results of pop(); and at the end L contains [0, 1]
[12:18:42] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:18:45] <zaphod_b> I know it's wrong to mutate the object being iterated; I am a teacher and would like to have a convincing explanation for my students
[12:19:42] *** Joins: tobybl (~tobybl@213.31.134.235)
[12:19:43] <jinsun__> L.pop returns the value that was removed from the list
[12:19:53] *** jinsun__ is now known as jinusun
[12:19:57] *** jinusun is now known as jinsun
[12:20:05] <zaphod_b> yes, but why does it get printed ?
[12:20:38] <zaphod_b> interestingly ipython does not print anything - which is easier to accpet
[12:20:54] <jinsun> because you are running in the repl, if you paste in a python file and run it won't print it
[12:21:16] <zaphod_b> yes, but why does it get printed at all ?
[12:21:18] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[12:21:57] <jinsun> between ipython and python repl, I guess python repl prints the return value of each line, but ipython treats multiline inputs differently
[12:22:06] <zaphod_b> the repl is supposed to print the result of each line
[12:22:08] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[12:22:15] <zaphod_b> the repl is **not** supposed to print the result of each line
[12:22:21] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:22:28] <zaphod_b> it is suppoed to print the result of the last line
[12:22:54] <jinsun> yes
[12:23:05] <zaphod_b> but that is not what we see here
[12:23:12] <zaphod_b> I find this super odd
[12:23:13] <deniska> I mean, the last line is inside a loop :P
[12:23:38] <jinsun> L.pop is technically the last line, ipython is treating the entire for loop as the last line
[12:25:30] <supakeen> mrm, that pastebin gives me nxdomain
[12:26:34] <supakeen> erm
[12:30:30] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[12:30:41] <jinsun> ah no last line doesn't matter, python prints the results of each line really
[12:31:14] *** Joins: upsala (~zcb@185.213.155.252)
[12:31:40] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[12:31:59] <jinsun> like inserting a line in between will also show its result
[12:32:33] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[12:32:53] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:33:40] <jinsun> which is probably fine, I don't think there is a repl must print last line only rule
[12:33:54] *** Quits: rany (~quassel@user/rany) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:35:18] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[12:36:39] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[12:37:36] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[12:37:42] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[12:38:09] <supakeen> there isn't :)
[12:38:31] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c9b9-834f-44a0-976a.res6.spectrum.com) (Quit: jarthur)
[12:38:35] <supakeen> and ipython acts magic, so one can't compare it to the normal repl
[12:39:16] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:2ea6:d5a6:e949:ecd2) (Ping timeout: 245 seconds)
[12:39:26] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[12:40:03] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:41:22] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[12:42:09] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[12:42:25] *** Joins: rany (~quassel@user/rany)
[12:42:27] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:2ea6:d5a6:e949:ecd2)
[12:44:13] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[12:44:30] *** Quits: Venhal (sid515085@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[12:45:32] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[12:45:33] *** Quits: zaphod_b (~zaphod_b@82-64-217-225.subs.proxad.net) (Quit: Client closed)
[12:47:25] *** Joins: Venhal (sid515085@uxbridge.irccloud.com)
[12:47:34] *** Joins: anonymous__ (~anonymous@gateway/tor-sasl/anonymous)
[12:47:53] *** Quits: davef (sid287421@user/davef) (Ping timeout: 256 seconds)
[12:48:09] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[12:48:30] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:48:54] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Ping timeout: 276 seconds)
[12:49:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:49:35] *** Quits: matthewwilkes (sid500242@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[12:49:36] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: eichin (sid27120@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:49:46] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 265 seconds)
[12:49:56] *** Joins: debnet (sid330295@python/afpy/debnet)
[12:50:09] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[12:50:31] *** Joins: davef (sid287421@user/davef)
[12:50:44] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 256 seconds)
[12:51:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[12:51:44] *** Joins: matthewwilkes (sid500242@uxbridge.irccloud.com)
[12:51:59] *** Quits: hogarius (hogarius@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[12:52:19] <eson123> anyone knows why Ctrl - C doesn't work on Windows cmd anymore ? my prompt doesn't detect any keyboardinterrupt
[12:52:36] <kosh> it should work fine, I use it
[12:52:37] *** Joins: r0bby (r0bby@user/r0bby)
[12:52:43] <kosh> although normally I use windows terminal
[12:53:09] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[12:53:31] <eson123> oh no i don't mean input(), input() works fine
[12:53:43] <eson123> kosh: i meant something like socket.recv()
[12:53:45] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[12:53:47] <eson123> here is what i tried https://pastebin.com/V5ZrpZY5
[12:53:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:53:58] <eson123> when you enter the loop, Ctrl - C just doesn't send any SIGINT
[12:54:18] *** Quits: r0bby (r0bby@user/r0bby) (Max SendQ exceeded)
[12:54:24] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[12:54:41] *** Joins: eichin (sid27120@tinside.irccloud.com)
[12:55:50] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[12:56:08] *** Joins: hogarius (hogarius@uxbridge.irccloud.com)
[12:56:58] *** Quits: holbrode (sid339826@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:57:11] *** Joins: bjs (sid190364@user/bjs)
[12:57:59] *** Quits: AhmedAmerican (sid470527@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[12:58:39] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 256 seconds)
[12:58:41] *** Joins: r0bby (r0bby@user/r0bby)
[12:58:52] *** Joins: holbrode (sid339826@tinside.irccloud.com)
[12:59:20] *** Joins: debnet (sid330295@python/afpy/debnet)
[12:59:34] *** Joins: AhmedAmerican (sid470527@ilkley.irccloud.com)
[13:00:47] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:00:57] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[13:02:22] *** Quits: rany (~quassel@user/rany) (Ping timeout: 260 seconds)
[13:02:41] *** Joins: rany (~quassel@user/rany)
[13:02:44] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:05:47] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[13:05:47] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[13:05:47] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[13:06:33] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[13:07:56] *** Joins: Tas-sos (~Tas-sos@ppp046176221197.access.hol.gr)
[13:08:49] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[13:09:09] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:09:12] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[13:09:34] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[13:09:37] <han-solo> eson123: that's weird, ctrl+break works for me though
[13:10:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:11:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[13:14:21] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-042.hsi5.kabel-badenwuerttemberg.de)
[13:15:56] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[13:16:09] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[13:17:58] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[13:18:24] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[13:20:10] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:20:49] *** Joins: greedom (~greedom@x59cc9bc3.dyn.telefonica.de)
[13:20:50] *** Quits: bn_work (uid268505@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:20:59] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[13:25:35] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[13:25:40] *** Joins: vlm (~vlm@user/vlm)
[13:26:14] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:27:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[13:27:09] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:27:16] <eson123> han-solo: are you on a mac ?
[13:27:20] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:29:06] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[13:29:32] *** Quits: dre (~dre@2001:8003:c932:c301:3aa0:ae93:dc87:2b3) (Ping timeout: 240 seconds)
[13:31:06] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:31:20] *** Quits: anonymous__ (~anonymous@gateway/tor-sasl/anonymous) (Remote host closed the connection)
[13:31:31] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[13:32:11] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[13:32:49] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[13:33:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:33:18] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:33:59] *** Joins: anonymous__ (~anonymous@gateway/tor-sasl/anonymous)
[13:35:00] *** Joins: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net)
[13:35:14] *** Joins: nomic (~nomic@185.192.69.224)
[13:36:03] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[13:37:11] *** Quits: onichomp (~onichomp@2806:264:4404:8301:1007:f0a0:80cc:82fb) (Ping timeout: 245 seconds)
[13:37:56] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[13:38:31] *** Joins: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739)
[13:42:41] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:42:53] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:42:53] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[13:44:38] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[13:45:49] <han-solo> eson123: nope, on windows
[13:46:05] <eson123> huh weird
[13:46:21] <han-solo> https://docs.microsoft.com/en-us/windows/console/ctrl-c-and-ctrl-break-signals # guess, something have to do with this
[13:46:21] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[13:46:30] <han-solo> ctrl+break doesn't work for you ?
[13:46:32] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[13:46:47] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:47:11] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 264 seconds)
[13:48:06] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[13:49:42] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 265 seconds)
[13:50:54] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[13:51:58] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[13:52:50] *** Joins: rendar (~rendar@user/rendar)
[13:53:18] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:53:27] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[13:54:22] <Wulf> Where can I get a list of encodings that I can apply to bytes.decode?
[13:56:31] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[13:57:19] <han-solo> Wulf: https://docs.python.org/3/library/codecs.html#standard-encodings # ?
[13:58:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:59:11] <Wulf> han-solo: isn't there some list of encodings available from python?
[13:59:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[14:00:01] <han-solo> likely, lemme check
[14:00:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:01:06] *** Quits: nomic (~nomic@185.192.69.224) (Quit: Leaving)
[14:01:10] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[14:03:26] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[14:04:20] <han-solo> Wulf: there seems to be `encodings.aliases.aliases`
[14:05:34] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[14:06:41] <Wulf> han-solo: great, thanks!
[14:07:07] <han-solo> uh, maybe that's not a complete list
[14:07:25] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:07:36] *** Quits: eson123 (~eson123@118.69.128.37) (Ping timeout: 245 seconds)
[14:08:30] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[14:10:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:10:29] *** Joins: teut (~teut@223.182.71.245)
[14:10:38] *** Joins: asa22 (~asa22@84.125.126.187.dyn.user.ono.com)
[14:10:42] <asa22> ValueError: time data '2021-01-01T08:04:10+00:00' does not match format '%Y-%m-%dT%H:%M:%S%Z'
[14:10:45] <asa22> how
[14:11:14] <Wulf> asa22: +
[14:11:22] <asa22> lemme try
[14:11:29] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[14:12:01] <asa22> negative
[14:12:06] <Wulf> asa22: dateutil.parser.parse("2021-01-01T08:04:10+00:00") --> datetime.datetime(2021, 1, 1, 8, 4, 10, tzinfo=tzutc())
[14:12:06] <asa22> ValueError: time data '2021-01-01T08:04:10+00:00' does not match format '%Y-%m-%dT%H:%M:%S+%Z
[14:12:09] *** anonymous__ is now known as anonymous
[14:12:29] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:12:36] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:13:48] *** Quits: rapier (~rapier@user/rapier) (Read error: Connection reset by peer)
[14:14:00] *** Joins: raxor2k (~raxor2k@78.158.246.35)
[14:14:05] <raxor2k> if i have a dict like this: {"name" : "tim", "age" : 22, "gender" : "male"}, is it possible to swap positions of "age" and "male", to look like this: {"name" :"tim" , "gender" : "male", "age" : 22} ?
[14:14:16] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 245 seconds)
[14:14:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:15:10] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[14:15:13] <KirkMcDonald> raxor2k: A dict is ordered by the order in which the keys were inserted.
[14:16:03] *** Quits: greedom (~greedom@x59cc9bc3.dyn.telefonica.de) (Remote host closed the connection)
[14:16:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[14:16:20] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[14:16:28] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[14:16:42] <KirkMcDonald> raxor2k: You could remove and re-add the 'age' key, and that would push it around to the back.
[14:16:50] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:17:05] <KirkMcDonald> raxor2k: Or you could make a new dict that inserts its keys in a defined order.
[14:17:10] *** Joins: greedom (~greedom@x59cc9bc3.dyn.telefonica.de)
[14:17:26] <raxor2k> Ok i see. Thanks for answer
[14:18:02] <KirkMcDonald> raxor2k: d['age'] = d.pop('age')
[14:18:22] <asa22> Wulf so this will convert a string into a datetime object?
[14:18:24] <asa22> dateutil.parser.parse()
[14:18:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[14:18:42] <asa22> and then put it in the format u showed
[14:18:44] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[14:20:13] *** Parts: ignaloidas (~ignaloida@2001:bc8:182c:1c02::1) (Leaving)
[14:20:20] *** Joins: fikran (~fikran@user/fikran)
[14:20:47] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[14:21:59] <Wulf> han-solo: thanks, solved it. Encoding is gb18030
[14:22:07] *** Quits: shokohsc86 (~shokohsc@174.197.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:22:08] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 268 seconds)
[14:23:29] <Wulf> well, more like x.encode("gb18030").decode("latin1").encode("utf-8"). But the latter part was easy :)
[14:23:40] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:24:24] *** Joins: causa-sui (~causasui@192.241.228.169)
[14:25:45] *** Joins: shokohsc86 (~shokohsc@174.197.23.93.rev.sfr.net)
[14:27:39] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:29:45] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[14:30:59] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 264 seconds)
[14:31:54] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:32:14] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:35:58] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[14:37:40] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:38:06] *** Joins: xkuru (~xkuru@user/xkuru)
[14:39:37] *** Joins: tobybl (~tobybl@213.31.134.235)
[14:40:35] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[14:41:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[14:42:07] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[14:44:06] *** Quits: gitly (~gitly@148.252.128.93) (Ping timeout: 260 seconds)
[14:45:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:46:06] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[14:46:36] *** Joins: gitly (~gitly@85.255.235.223)
[14:51:06] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[14:51:40] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[14:51:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[14:52:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:52:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:53:10] *** Joins: parv (~quass@user/parv)
[14:53:15] *** Quits: asa22 (~asa22@84.125.126.187.dyn.user.ono.com) (Quit: Client closed)
[14:56:11] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[14:57:08] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[14:59:16] *** Quits: upsala (~zcb@185.213.155.252) (Quit: WeeChat 3.3)
[14:59:45] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:01:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[15:02:59] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[15:03:19] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:05:34] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[15:08:10] *** Quits: raxor2k (~raxor2k@78.158.246.35) ()
[15:11:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:11:09] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[15:11:11] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[15:11:46] <trace987> what are there for fancy TUI libs?
[15:13:12] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[15:14:42] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[15:15:08] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:15:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:15:49] <trace987> oh no, dr. google already gives great answers
[15:15:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[15:18:05] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[15:18:12] <ChrisWarrick> trace987: urwid
[15:18:34] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[15:18:34] *** Joins: arinov (~arinov@178.240.135.64)
[15:19:17] <gitesh> Book by Al Sweigart
[15:19:18] <nedbat> trace987: textual is the newest thing, but no docs yet
[15:19:31] *** Joins: bindu (~bindu@user/bindu)
[15:19:48] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[15:20:00] <gitesh> Is there a nee book arrived which covers new stuff like python 3.10
[15:20:05] <gitesh> *new
[15:20:07] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[15:20:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:20:54] <ChrisWarrick> books based on new versions/new language features usually take years to come out
[15:21:04] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[15:21:06] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:22:07] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[15:23:48] *** Quits: TJ- (~root@about/linux/staff/tj-) (Ping timeout: 268 seconds)
[15:24:20] *** Joins: binary01 (~binary01@192.110.171.216)
[15:25:22] <han-solo> Wulf: /tu
[15:25:25] <han-solo>  👍
[15:25:39] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[15:26:02] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:28:42] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[15:30:06] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[15:30:30] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[15:30:41] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 264 seconds)
[15:30:43] *** Joins: naranja (~orange@user/orangeboxcutter)
[15:31:08] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[15:32:27] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[15:32:38] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[15:32:47] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:33:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[15:33:33] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[15:34:13] *** Joins: kosh (~kosh@user/kosh)
[15:35:03] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[15:35:26] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:35:47] *** Quits: anonymeowo (~anonymeow@107.189.14.18) (Remote host closed the connection)
[15:35:54] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] *** Joins: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b)
[15:37:22] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[15:37:53] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[15:40:00] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[15:41:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[15:43:29] *** Quits: binary01 (~binary01@192.110.171.216) (Remote host closed the connection)
[15:43:44] *** Joins: binary01 (~binary01@192.110.171.216)
[15:44:01] *** Joins: TJ- (~root@about/linux/staff/tj-)
[15:44:03] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:45:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[15:48:13] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:48:27] *** Joins: tobybl (~tobybl@213.31.134.235)
[15:50:37] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:51:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[15:52:21] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:53:41] *** Joins: qpdb (~qpdb@user/qpdb)
[15:54:35] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:55:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[15:55:27] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:55:58] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[15:57:52] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[15:59:28] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[16:01:00] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[16:01:36] *** Joins: ExeciN (~ExeciN@user/nicexe)
[16:02:49] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[16:04:30] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[16:05:44] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[16:08:44] *** Quits: Avaris (~Avaris@avar.is) (Ping timeout: 260 seconds)
[16:11:37] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[16:11:50] *** Joins: darksun (~darksun@user/darksun)
[16:12:50] *** Joins: Klinda (~superleag@user/klinda)
[16:12:54] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[16:13:00] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[16:13:18] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[16:13:18] *** Joins: de-facto (~de-facto@user/de-facto)
[16:16:35] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[16:18:03] *** Joins: Naan (~Naan@user/naan)
[16:18:59] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[16:21:20] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[16:22:36] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 245 seconds)
[16:23:30] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 260 seconds)
[16:25:50] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[16:26:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:27:12] *** Joins: greyltc (~greyltc@user/greyltc)
[16:27:23] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-042.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 264 seconds)
[16:27:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[16:27:47] <greyltc> anyone know why I can't `python -c "import pandas"`?
[16:27:57] <greyltc> https://bpa.st/ZB7Q
[16:29:41] *** Joins: fikran (~fikran@user/fikran)
[16:29:52] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[16:29:57] <ChrisWarrick> greyltc: it looks like your pandas and numpy versions aren’t compatible
[16:30:05] *** Joins: causa-sui (~causasui@192.241.228.169)
[16:30:28] *** Joins: Avaris (~Avaris@avar.is)
[16:31:15] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[16:31:26] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:31:27] <han-solo> greyltc: https://github.com/pandas-dev/pandas/issues/32056 # seems relevant
[16:32:37] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[16:33:07] *** Joins: grooverman (~grooverma@177.102.119.40)
[16:35:31] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 245 seconds)
[16:35:33] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:35:34] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[16:36:53] <greyltc> thanks! ended up being some pip --user package mucking with my OS managed packages
[16:37:08] <greyltc> `pip list --user --format freeze | xargs pip uninstall -y` fixed it
[16:37:41] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:38:31] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 256 seconds)
[16:39:07] *** Joins: Pickchea (~private@user/pickchea)
[16:39:33] *** Joins: mvdev_836 (~mvdev_836@user/mvdev-836/x-7776380)
[16:40:09] *** Joins: ST47 (~ST47@wikimedia/st47)
[16:40:15] <ChrisWarrick> (use a venv)
[16:41:03] <greyltc> yeah. that was my mistake
[16:43:18] <mvdev_836> Hi, when I paste code in PyCharm, with some >>> and ... characters at the beginning of each lines, I would like to delete these characters automatically. I can do with Replace, using regex, but I wonder whether this can be scripted for automatic execution somehow. Thanks
[16:43:46] *** Joins: sharperguy (~sharpergu@138.201.43.163)
[16:45:26] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[16:46:48] <ChrisWarrick> mvdev_836: I’d just use a column selection or such: https://www.jetbrains.com/help/pycharm/multicursor.html
[16:46:59] <jollygood2> hi. I'd appreciate if someone can tell me what's the recommended way of installing python with opencv and numpy on windows. anaconda perhaps?
[16:47:10] <ChrisWarrick> (I have absolutely no idea how to do it with the “standard” keymap, and I use JetBrains stuff every day…)
[16:47:12] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[16:47:49] <bookworm> jollygood2: miniconda... anaconda is huge
[16:48:01] <bookworm> we are talking 3GB or something along those lines
[16:48:43] <jollygood2> ok thanks!
[16:48:53] <ChrisWarrick> or perhaps just standard python?
[16:49:18] *** Quits: arinov (~arinov@178.240.135.64) (Ping timeout: 256 seconds)
[16:49:36] <bookworm> on windows? For C packages?
[16:49:42] <bookworm> masochistic?
[16:50:01] <mvdev_836> jollygood2: I'd go for standard python instal from python.org + virtual environment + pip installation of your packages
[16:51:38] <ChrisWarrick> bookworm: it’s 2021
[16:51:48] <ChrisWarrick> bookworm: installing numpy on windows is as easy as `pip install numpy
[16:51:50] <ChrisWarrick> `
[16:52:00] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[16:52:00] *** Joins: sickdugongo (~sickdugon@user/sickdugongo)
[16:52:14] <ChrisWarrick> same for `pip install opencv-python`
[16:52:18] <mvdev_836> ChrisWarrick: thanks
[16:52:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:53:41] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:54:37] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[16:54:53] *** Joins: thevishy (~thevishy@2405:201:f005:c04c:310a:f331:a3d4:27)
[16:56:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[16:56:22] <leduyquang753> Not so much to me. Had to hunt for a precompiled wheel.
[16:56:25] *** Joins: nyah (~nyah@94.6.71.219)
[16:57:38] *** Quits: poiqwepoiqwe (uid525840@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:57:43] *** Joins: magla (~gelignite@55d45814.access.ecotel.net)
[16:57:54] *** Joins: jay-m1261 (~jay-m@154.72.162.252)
[16:59:20] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[16:59:32] *** Joins: plastico (~plastico@neomutt/plastico)
[16:59:39] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:00:50] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[17:03:37] *** Quits: luva (~luva@146.70.62.252) (Quit: Byebye)
[17:04:15] *** Joins: luva (~luva@146.70.62.252)
[17:07:44] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[17:10:11] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[17:13:05] <ChrisWarrick> that depends on the packages you’re installing
[17:13:19] *** Quits: mvdev_836 (~mvdev_836@user/mvdev-836/x-7776380) (Remote host closed the connection)
[17:13:31] <ChrisWarrick> most commonly used things have windows wheels on pypi
[17:13:38] <rendar> any idea on how read stdin in binary mode with asyncio?
[17:13:47] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[17:13:53] <leduyquang753> I'm mentioning NumPy.
[17:14:02] <ChrisWarrick> leduyquang753: works for me
[17:14:03] *** Joins: de-facto (~de-facto@user/de-facto)
[17:14:27] <leduyquang753> When I tried pip it attempted to build from source which failed because my SSD cannot accomodate that collosal Visual studio.
[17:15:18] *** Joins: pwug (~pwug@user/pwug)
[17:15:49] <ChrisWarrick> leduyquang753: when and with what python version?
[17:16:03] <leduyquang753> Last month, 3.10.
[17:16:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:16:25] <ChrisWarrick> leduyquang753: https://bpa.st/4XAA
[17:16:39] <ChrisWarrick> leduyquang753: 3.10 might have been a bit too new for wheels to be available last month
[17:17:05] *** Quits: binary01 (~binary01@192.110.171.216) (Remote host closed the connection)
[17:17:19] *** Joins: binary01 (~binary01@192.110.171.216)
[17:17:40] <ChrisWarrick> it looks like the 3.10 wheels only became available on 2021-10-20
[17:18:47] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[17:19:05] *** Joins: l4yer (~l4yer@195.181.170.210)
[17:19:13] *** Joins: vats (~vats@103.158.91.90)
[17:20:27] *** Quits: l4yer (~l4yer@195.181.170.210) (Read error: Connection reset by peer)
[17:21:23] *** vvdaiwrw is now known as romainl-dejavu
[17:21:48] *** romainl-dejavu is now known as dejavu
[17:23:18] *** Joins: anonymeowo (~anonymeow@107.189.14.18)
[17:24:27] *** Joins: yaalon_ (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[17:25:28] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Read error: Connection reset by peer)
[17:26:50] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:27:03] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:28:54] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[17:29:42] <dfcnvt> I don't know if I will make sense...but is there such thing as a "one time condition" to begin printing out and when it comes back in the loop, it will ignore the condition since it's already checked the condition?
[17:31:36] *** Joins: grooverman (~grooverma@177.102.117.95)
[17:32:15] <hogarius> dfcnvt: do you mean setting a flag variable?
[17:32:56] <sveinse> I'm using asyncio.to_thread(msvcrt.getch()) and Ctrl+C doesn't interrupt the program (I get the kbd value for it returned) despite docs saying Control+C cannot be captured this way. How can I restore the Ctrl+C function in my program?
[17:33:20] <sveinse> asyncio.to_thread(msvcrt.getch) of course
[17:33:27] <dfcnvt> Like, if and when condition becomes True then it'll "lock" it permanently as a True statement despite when it looped back again and found the condition to be False -- (Continue on as True as it will run the codeblock)
[17:34:05] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[17:35:49] *** Joins: wing (~wing@122.206.190.72)
[17:36:04] *** Parts: wing (~wing@122.206.190.72) ()
[17:36:08] *** Joins: wing (~wing@122.206.190.72)
[17:36:08] *** Joins: yaalon (~yaalon@2600:100c:b050:dc20:d820:d795:97ed:a7ab)
[17:36:29] *** Joins: suqlht (~Thunderbi@183.209.142.141)
[17:36:42] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[17:37:57] *** Joins: l4yer (~l4yer@2001:ac8:20:56:1012:6b8f:3c43:380a)
[17:38:48] *** Parts: suqlht (~Thunderbi@183.209.142.141) ()
[17:38:48] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[17:39:06] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[17:40:35] *** Quits: yaalon_ (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Ping timeout: 264 seconds)
[17:40:48] *** Joins: Atque (~Atque@user/atque)
[17:41:07] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:42:00] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:42:23] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[17:42:55] <hogarius> dfcnvt: check if (condition == True) or (flag == True).  When condition becomes True, set the flag == True.   The next times through the loop, flag still equals True, so the block of code will execute.
[17:44:34] <dfcnvt> Aye, I guess I need to make two separate IF conditions, one of them is to set a flag and another is to check the flag for being True -- and if so then run the codeblock.
[17:44:37] <dfcnvt> Thanks
[17:45:38] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[17:48:39] *** Joins: lionslicer (~lionslice@2804:d41:a7a6:1300:20f4:57c3:983e:eaea)
[17:48:50] *** Quits: wing (~wing@122.206.190.72) (Ping timeout: 256 seconds)
[17:49:59] *** Joins: monkey_ (~user@190.104.116.153)
[17:50:05] *** Joins: zeden (~zeden@user/zeden)
[17:50:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[17:51:05] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[17:51:09] *** Quits: Inline (~Inline@2a02:908:1252:7a80:32fe:5fac:ae8e:a22b) (Quit: Leaving)
[17:52:30] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[17:52:54] <dfcnvt> Got it working -- thanks.   >> https://paste.ofcode.org/q9cg5m7LLzVPh3vQRF28cy
[17:53:40] *** Quits: Madda (~Madda@216.51.198.146.dyn.plus.net) (Remote host closed the connection)
[17:53:49] *** Joins: wing (~wing@122.206.190.108)
[17:55:07] *** Joins: Madda (~Madda@216.51.198.146.dyn.plus.net)
[17:55:09] <han-solo> me thinks you can remove the 4 layer nesting using `itertools.product(abc, repeat=4)` or something
[17:55:40] *** Joins: dohtem (uid524096@user/dohtem)
[17:57:37] *** Joins: wing57 (~wing@171.11.3.154)
[17:57:49] *** Joins: Bakunin (~Lindis@user/lindis)
[17:58:42] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[17:59:45] <Pi-sistance> any particular reason returning somethign in a function twice on 2 seperate lines only results in the first one being returned?
[17:59:58] <Pi-sistance> is this just how it is
[18:00:10] *** Quits: wing (~wing@122.206.190.108) (Ping timeout: 256 seconds)
[18:00:12] <han-solo> functions returns on the first return
[18:00:23] <grym> Pi-sistance: the first return that is hit ends the function
[18:00:51] <Pi-sistance> ok ty, yeah that makes sense.
[18:00:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[18:01:34] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[18:01:42] <grym> Pi-sistance: if you don't like multiple returns in a function, you can rewrite so that you return only at the end, but different code paths in the function assign different values to the name that's returned.
[18:02:42] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Ping timeout))
[18:02:56] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[18:02:59] <grym> https://bpa.st/MMLA
[18:03:37] <grym> it's something of a matter of taste as to which one makes more sense, but you'll do the same work tracing evaluation paths either way
[18:04:05] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[18:04:40] *** Joins: BlueSky (~BlueSky@user/bluesky)
[18:05:31] *** Joins: zebrag (~chris@user/zebrag)
[18:05:39] *** Joins: zaquest (~notzaques@5.130.79.72)
[18:06:10] <Pi-sistance> I see, thanks. well back to debugging mode for other stuff now.
[18:06:36] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[18:07:29] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[18:08:37] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:09:32] *** Quits: yaalon (~yaalon@2600:100c:b050:dc20:d820:d795:97ed:a7ab) (Remote host closed the connection)
[18:11:19] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[18:12:43] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com)
[18:13:09] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[18:13:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7)
[18:15:12] *** Quits: parv (~quass@user/parv) (Quit: parv)
[18:15:31] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 245 seconds)
[18:15:43] *** Joins: sammie (~sammie@2601:183:c180:3f00:99df:fece:a869:52d1)
[18:16:16] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:18:49] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[18:20:09] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[18:21:32] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[18:21:46] *** Quits: heldwin (~heldwin@user/asmodee) (Quit: Teleporting ...)
[18:22:30] *** Quits: sharperguy (~sharpergu@138.201.43.163) (Ping timeout: 260 seconds)
[18:24:12] *** Joins: sharperguy (~sharpergu@138.201.43.163)
[18:24:46] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 260 seconds)
[18:25:05] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:26:11] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[18:26:23] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3810-8d9c-60b4-f506.res6.spectrum.com)
[18:26:36] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[18:26:42] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[18:27:12] *** Joins: Bakunin (~Lindis@user/lindis)
[18:27:44] *** Quits: wing57 (~wing@171.11.3.154) (Quit: Client closed)
[18:27:51] <sveinse> According to the docs msvcrt.getch() does not intercept Ctrl+C, but it does. How can I reinject Ctrl+C into my program?
[18:27:55] *** Joins: eson123 (~eson123@118.69.128.37)
[18:27:59] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 264 seconds)
[18:28:04] <no_gravity> Hello! Reading some repo, it seems to me that you can do "from a import b" if you have a file a/__init__.py which defines a function b(). Could that be?
[18:30:07] <eson123> han-solo: yea i can't seem to locate the "break" button on my keyboard, i usually just go with Ctrl - C
[18:31:07] <han-solo> eson123: yeah, it should have worked. "just windows things", i guess ? I don't know much about this. Seems like sveinse have the same problem too
[18:31:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[18:31:47] <han-solo> eson123: could you try the virtual keyboad ?
[18:31:50] *** Joins: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com)
[18:31:52] <han-solo> keyboard*
[18:33:04] <han-solo> sveinse: https://docs.microsoft.com/en-us/windows/console/ctrl-c-and-ctrl-break-signals # could be related ?
[18:33:05] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (WeeChat 3.2)
[18:33:12] <eson123> nope, still not sending any SIGNBREAK or SIGINT signal
[18:33:42] <han-solo> mm, i have an external keyboard. ctrl+break seemed to work for the script you gave
[18:33:45] <rindolf> no_gravity: i think it should work
[18:33:56] <eson123> also according to the reference u gave me, "Ctrl - C is reported as a keyboard input" so i guess it's a character, maybe something could have disabled the ENABLE_PROCESSED_INPUT
[18:34:03] <no_gravity> rindolf: I see. Thanks.
[18:34:32] <rindolf> no_gravity: you're welcome
[18:34:33] <sveinse> I've tested it on git bash, cmd and powershell consoles and all captures Ctrl+C and returns it as a value
[18:34:35] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:34:57] <han-solo> eson123: yeah, they say if you `SetConsoleCtrlHandler` with Null and False as args, it should restore it
[18:35:00] <han-solo> didn't try much
[18:35:29] <eson123> yea i hardly deal with winapi recently as well
[18:35:39] <eson123> but even when i deal with it, i usually pick C over Python
[18:35:41] <eson123> or C++
[18:35:45] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:36:02] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[18:36:07] <eson123> sveinse: also how did u test it through python in order to retrieve it as a value ?
[18:36:15] <sveinse> My use case is that I need an async keyboard input in a program (running in windows) so I hoped msvcrt.getch() would cut it. However it intercepting Ctrl+C makes it very hard
[18:36:16] <eson123> try except is all i can think of
[18:36:44] <sveinse> eson123: https://bpa.st/RECQ
[18:36:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:36:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[18:37:22] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:37:26] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Read error: Connection reset by peer)
[18:38:24] *** Joins: yaalon_ (~yaalon@147.sub-174-246-199.myvzw.com)
[18:38:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:39:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:39:02] *** Joins: fikran (~fikran@user/fikran)
[18:39:45] <eson123> well i guess you and i can try add in some conditional statements to check whenever we send '\x03' and call the exit() function
[18:40:47] <sveinse> hmm. Is that functionally equivalent as a KeyboardInterrupt?
[18:41:06] <eson123> i just tried, it works
[18:41:11] <eson123> or os._exit(0)
[18:41:11] *** Joins: causa-sui (~causasui@192.241.228.169)
[18:41:29] <sveinse> Are there other ways to get keypress on windows?
[18:41:29] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Ping timeout: 256 seconds)
[18:41:31] <Pi-sistance> I have elif (x and y)==0: do this. only y is 0 and it's still triggering, I checked in a debugger, only y is 0, wtf
[18:41:32] *** Quits: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com) (Quit: HaMsTeRs)
[18:41:42] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[18:41:59] <ChrisWarrick> Pi-sistance: (x and y)==0   is not a shorthand for x == 0 and y == 0
[18:42:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:42:20] <eson123> sveinse: in python i think you can try the pynput module
[18:42:20] *** Joins: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com)
[18:42:30] <eson123> in other low level languages, it's easier a bit
[18:42:39] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[18:42:51] <Pi-sistance> ChrisWarrick: oh I could have sworn that worked for me before, why is it not shorthand, it seems easier?
[18:43:02] <ChrisWarrick> Pi-sistance: (x and y) is a boolean logic operation
[18:43:08] <ChrisWarrick> Pi-sistance: it might have worked by chance
[18:43:21] <eson123> or u can try keyboard library, then just basically keyboard.read_key()
[18:43:33] <ChrisWarrick> Pi-sistance: `x and y` will return `x` if `x` is falsey, `y` otherwise
[18:44:16] *** Quits: jay-m1261 (~jay-m@154.72.162.252) (Ping timeout: 245 seconds)
[18:46:01] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 256 seconds)
[18:46:28] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[18:47:08] *** Quits: binary01 (~binary01@192.110.171.216) (Remote host closed the connection)
[18:48:16] <Pi-sistance> ChrisWarrick: I dont get it, if x is 0 it's false so (x and y) evaluates to 0, if y is zero, it's false so(x and y) evaluate to zero. and iof theybre both zero, same.
[18:48:32] <Pi-sistance> I think that's the boolean logic
[18:48:34] <ChrisWarrick> Pi-sistance: not sure I understand what you mean
[18:49:14] <ChrisWarrick> Pi-sistance: print(0 and 0, 0 and 1, 1 and 0, 1 and 1)
[18:49:16] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:49:46] *** Quits: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com) (Remote host closed the connection)
[18:50:08] *** Joins: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com)
[18:50:29] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[18:53:20] *** Joins: jdw3000 (~jonathan@c-76-18-136-183.hsd1.tn.comcast.net)
[18:54:37] <Pi-sistance> ChrisWarrick: yes ty, if either or both are zero it fulfils it, damn. Also if I do print("a" and "b") it only prints the last one  regardless of what order.
[18:54:53] <ChrisWarrick> Pi-sistance: because "a" and "b" are both truthy
[18:55:36] *** Joins: akk (~akk@75.161.146.115)
[18:56:00] <Pi-sistance> it only prints b though or it prints a if I reverse the order. I dont understand the logic behind this.
[18:56:17] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[18:56:25] <sveinse> eson123: The keyboard package also intercepts Ctrl+C
[18:56:27] <Pi-sistance> ChrisWarrick: am I only supposed to use the and operator with 1 and 0?
[18:56:41] <ChrisWarrick> Pi-sistance: not necessarily
[18:56:49] <ChrisWarrick> Pi-sistance: (and the boolean values are True and False)
[18:57:21] <eson123> sveinse: well yea i guess we have to do some checking then
[18:57:23] <sveinse> So I think the best approach is to simply raise KeyboardInterrupt oneself. I don't completly like it, as the Ctrl+C functionality depends on my code, but it seems that is the way in win
[18:57:34] <eson123> or that ^ might work
[18:57:41] <eson123> but still require some conditional statement
[18:57:46] <ChrisWarrick> Pi-sistance: `x and y` returns the element which determines the truthiness of the statement. If `x` is falsey, then it returns `x`, since it can’t become truey no matter what `y` is. Otherwise, it returns `y`, which solely determines the truthiness of the expression
[18:58:04] *** Joins: hel0 (~hel0@user/redrum88)
[18:58:07] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[18:58:14] <eson123> but it's weird because it does work on bash when i try it through my Ubuntu machine
[18:58:16] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:58:22] <eson123> but not powershell or cmd
[18:58:37] <sveinse> If I am to speculate, I think maybe windows has changed its behavior and now captures Ctrl+C and the py side of this is not at fault
[18:59:26] <eson123> yes it even says that the interruption is a systematic thing in its docs but idk, han-solo made it work on his machine
[18:59:29] *** Joins: binary01 (~binary01@192.110.171.216)
[18:59:45] <eson123> just not sure which version
[19:00:11] <Pi-sistance> ChrisWarrick: yes I understand now, becasue 0 is false. I still don
[19:00:16] <sveinse> On linux, the Ctrl+C mechanism is by issuing a SIGINT by the terminal, isn't it?
[19:00:21] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[19:00:37] <eson123> yep
[19:00:48] <sveinse> So its a OS and/or terminal thing, not the (py) input device
[19:01:10] <eson123> yes but it is still weird since some people here made it work on their Windows machine
[19:01:30] <han-solo> eson123: ctrl+c didn't work for me, ctrl+break did
[19:01:31] <Pi-sistance> ChrisWarrick: yes I understand now, becasue 0 is false. I still don't t see why if print("a" and "b"), if both are considered 1, why only the last is printed, if both are truthy, shouldnt I just have 1 printed?
[19:01:34] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:01:46] <ChrisWarrick> Pi-sistance: `x and y` returns the element which determines the truthiness of the statement. If `x` is falsey, then it returns `x`, since it can’t become truey no matter what `y` is. Otherwise, it returns `y`, which solely determines the truthiness of the expression
[19:01:48] <Pi-sistance> not a or b
[19:02:05] <sveinse> eson123: yeah, and I wound't be surprised that it stopped working from a specific windows update.
[19:02:21] <grawity> if you're comparing it e.g. to C operators, python's 'and' is more like ?: than &&
[19:02:39] <eson123> only if i'm lucky enough to have the break button on my keyboard
[19:02:45] <han-solo> :)
[19:02:46] <grawity> hm no I got it the wrong way around
[19:02:51] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:02:54] *** Quits: l4yer (~l4yer@2001:ac8:20:56:1012:6b8f:3c43:380a) (Ping timeout: 265 seconds)
[19:03:00] <han-solo> but it's weird, i saw some people mention specific windows build though
[19:03:21] <Pi-sistance> ChrisWarrick: ok understood (eventually), thanks :)
[19:04:29] <sveinse> eson123, han-solo: Ctrl+break works for me to. With the notable side effect that it caused my git bash console to close.... XD  My cmd and power-shell console simply exited the python program
[19:04:59] *** Joins: nomic (~nomic@185.192.69.224)
[19:05:47] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[19:06:01] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Remote host closed the connection)
[19:06:13] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[19:06:26] *** Quits: xah37 (~manjaro-g@cpe-65-25-171-42.wi.res.rr.com) (Ping timeout: 256 seconds)
[19:06:45] <eson123> damn i really should buy a break button
[19:07:29] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Remote host closed the connection)
[19:08:30] <sveinse> I'll live with my program capturing b'\x03' and raising a KeyboardInterrupt for now
[19:11:07] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[19:11:39] <sveinse> I really love async programming. It makes concurrent program so easy to write!
[19:12:40] *** Joins: mvdev_836 (~mvdev_836@user/mvdev-836/x-7776380)
[19:13:38] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:13:50] *** Quits: sharperguy (~sharpergu@138.201.43.163) (Ping timeout: 260 seconds)
[19:14:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[19:15:38] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:15:48] *** Joins: l4yer (~l4yer@2a07-a880-3101-1041-7c64-cbb5-eb30-7d7b.pool6.ovpn.com)
[19:16:10] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[19:18:17] *** Joins: ArtfulDodger (~ArtfulDod@2a02-8440-631c-b4d9-78ba-13a3-5b05-4fb6.rev.sfr.net)
[19:18:38] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[19:19:55] <enyc> ArtfulDodger: indeed you are now in correct #python
[19:20:32] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[19:20:59] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[19:21:13] *** Joins: node1 (~node1@user/node1)
[19:21:43] <ArtfulDodger> ty enyc :D So here was my question: How do you use type annotation to refer to the same class e.g. class A: def f(self, other:A):
[19:22:02] <ChrisWarrick> ArtfulDodger: put the name in quotes
[19:22:26] <ChrisWarrick> (or from __future__ import annotations)
[19:23:20] *** Quits: HaMsTeRs (~Thunderbi@14-0-157-018.static.pccw-hkt.com) (Quit: HaMsTeRs)
[19:23:35] *** Quits: eson123 (~eson123@118.69.128.37) (Quit: Leaving)
[19:23:53] <ArtfulDodger> Ah! Is it because my Python version (3.8) does not fully support annotations then?
[19:24:17] <ChrisWarrick> I wouldn’t say “fully support annotations”
[19:24:29] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:24:43] <ChrisWarrick> but some quality-of-life improvements are in newer versions only
[19:25:35] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[19:25:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:25:52] <ArtfulDodger> OK ... hwoever it's very weird that it works when it's in quotes. Was do the quotes mean in that situation?
[19:26:38] <ChrisWarrick> ArtfulDodger: if you try to reference A directly, it doesn’t exist. But if you put it in quotes, it’s just a regular string — but then type checkers will find the symbol named A and interpret it as that
[19:27:59] <ArtfulDodger> ok ty ChrisWarrick
[19:30:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:30:58] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[19:31:16] *** Quits: yaalon_ (~yaalon@147.sub-174-246-199.myvzw.com) (Remote host closed the connection)
[19:31:34] *** Quits: luva (~luva@146.70.62.252) (Ping timeout: 260 seconds)
[19:32:40] *** Joins: luva (~luva@45.141.152.36)
[19:35:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:35:15] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[19:35:19] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[19:35:31] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:35:50] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[19:35:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:36:42] *** Quits: gitly (~gitly@85.255.235.223) (Ping timeout: 260 seconds)
[19:38:22] *** Joins: gitly (~gitly@85.255.235.223)
[19:38:49] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[19:39:07] *** Joins: causa-sui (~causasui@192.241.228.169)
[19:39:10] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[19:39:43] *** Quits: vats (~vats@103.158.91.90) (Ping timeout: 268 seconds)
[19:39:50] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Remote host closed the connection)
[19:39:51] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[19:40:03] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[19:42:08] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[19:42:47] *** Joins: Hax0r (~Hax0r@146.251.73.156)
[19:43:55] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[19:44:22] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[19:45:56] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[19:46:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:47:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:47:44] <sveinse> asyncio and twisted executes newly created tasks/deferreds in different order, https://bpa.st/66DQ. What can I do to get asyncio to behave like twisted?
[19:48:11] *** Joins: MikZyth (~MikZyth@host-174-157-66-217.spbmts.ru)
[19:49:38] *** Joins: node1 (~node1@user/node1)
[19:50:03] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[19:50:22] *** Quits: dfcnvt (~dfcnvt@gateway/vpn/pia/dfcnvt) (Quit: leaving)
[19:50:32] *** Joins: yaalon_ (~yaalon@2600:100c:b04a:ec6d:a852:803b:87b0:927a)
[19:50:57] <sveinse> The difference is subtle, but significant. In twisted its guaranteed that the task has started after the point where the task has been created, while in asyncio its not.
[19:51:47] <lionslicer> can someone help? I just started learning about functions, and I wanna know what I'm doing wrong
[19:51:54] <lionslicer> https://bpa.st/FG3A
[19:52:45] *** Joins: asa22 (~asa22@103.29.71.186)
[19:52:57] <asa22> <Response [200]>
[19:53:07] <asa22> I get this when I try to print a response in XML from a API
[19:53:12] <asa22> how do I access the actual content
[19:53:28] <teut> lionslicer  , magiician  is a string
[19:53:28] *** Quits: Hax0r (~Hax0r@146.251.73.156) (Remote host closed the connection)
[19:53:40] <teut> magician*
[19:54:00] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[19:54:16] <teut> it has no title
[19:54:16] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Ping timeout: 245 seconds)
[19:54:50] <teut>         print(magician)    do this
[19:54:55] <asa22> when API responses are in json I just .json() them but this one is in xml so idk what to do to access it
[19:54:57] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[19:55:05] <ChrisWarrick> teut: are you sure?
[19:55:17] *** Joins: Atque (~Atque@user/atque)
[19:55:23] *** Joins: Naan (~naan@user/naan)
[19:55:29] <rendar> any idea on how read stdin in binary mode with asyncio? someone suggested to use aiofile, but i don't know, any other solutions?
[19:55:31] <teut> string has a title?  let me check
[19:56:03] <teut> oh it has a title
[19:56:07] <teut> sorry mb
[19:56:11] <ChrisWarrick> lionslicer: your `make_gerat` function is never called anywhere. If it was, then it would change the reference inside the function only. What you probably want is the_great.append(…). See also https://bit.ly/pynames1
[19:57:01] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[19:57:19] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[19:58:09] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:58:13] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[19:58:19] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:58:40] *** Joins: mickey8 (~user@user/mickey)
[19:58:46] *** Quits: lionslicer (~lionslice@2804:d41:a7a6:1300:20f4:57c3:983e:eaea) (Quit: Leaving)
[19:59:24] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[19:59:32] *** Quits: nicode (~nic@2607:f2c0:958a:3d00:6940:c7c1:1805:8798) (Ping timeout: 240 seconds)
[19:59:41] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[20:00:05] <teut> https://2.python-requests.org/en/master/user/quickstart/#raw-response-content   asa22  maybe you can store the bytes to a xml file
[20:00:42] *** Joins: Anorak (~Anorak@p200300db9f14e3823cea368634f666b0.dip0.t-ipconnect.de)
[20:01:08] <asa22> oh its in byteform that why
[20:01:15] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[20:01:15] <ChrisWarrick> asa22: you might want r.text
[20:01:23] <teut> for bytes  you have .content  too
[20:01:48] <teut> can someone tell the difference between .content  and .raw?
[20:02:23] <asa22> .text worked, thanks
[20:03:05] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[20:06:53] <han-solo> teut: if i read the docs right, one may use `.raw` with `stream=True` and iterate over the chunks, to save large files i assume. `r.content` would load the entire bytes i assume
[20:07:08] <han-solo> a lot of things, i assume
[20:08:15] <teut> thanks han-solo
[20:08:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5dd-ed19-5085-fd41.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:10:00] <asa22> is there a way to access multiple positions in a string at once
[20:10:16] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[20:10:19] <asa22> without having to do [0] + [1] + [2]
[20:10:43] <asa22> something like [0~2]
[20:10:46] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:11:08] <deniska> asa22: s[0:3]
[20:11:13] <asa22> thx
[20:11:43] *** Quits: yaalon_ (~yaalon@2600:100c:b04a:ec6d:a852:803b:87b0:927a) (Remote host closed the connection)
[20:11:43] *** Joins: Atque (~Atque@user/atque)
[20:11:52] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Quit: Konversation terminated!)
[20:11:54] <Bakunin> that is correct
[20:12:40] *** Joins: Auron (~Auron956@user/auron)
[20:13:03] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[20:13:14] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[20:13:24] *** Joins: mickey8 (~user@user/mickey)
[20:13:41] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:15:33] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[20:16:00] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:18:30] *** Quits: greedom (~greedom@x59cc9bc3.dyn.telefonica.de) (Remote host closed the connection)
[20:19:10] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[20:20:04] *** Joins: greedom (~greedom@x59cc9bc3.dyn.telefonica.de)
[20:20:50] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[20:21:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:21:17] *** Quits: greedom (~greedom@x59cc9bc3.dyn.telefonica.de) (Remote host closed the connection)
[20:22:24] *** Joins: greedom (~greedom@x59cc9bc3.dyn.telefonica.de)
[20:24:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:24:26] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:24:45] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[20:25:23] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[20:26:13] *** Joins: rsx (~dummy@ppp-188-174-129-11.dynamic.mnet-online.de)
[20:26:31] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:26:32] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[20:27:54] <sveinse> In a class is it considered dirty to do do `def get(self): return self._queue.get` as opposed to `async def get(self): return await self._queue.get()` ?
[20:28:26] <ChrisWarrick> sveinse: the latter is much more obvious
[20:28:52] *** Joins: Ergo^ (~ergo@91.238.59.144)
[20:31:31] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 268 seconds)
[20:31:40] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[20:32:16] *** Quits: lastshell (~lastshell@user/lastshell) (Quit: WeeChat 3.0)
[20:32:49] <bjs> sveinse: isn't the first just wrong? if you want to `await obj.get()`
[20:33:37] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[20:34:50] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 256 seconds)
[20:35:02] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[20:35:47] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[20:35:50] *** Quits: asa22 (~asa22@103.29.71.186) (Quit: Client closed)
[20:36:43] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Client Quit)
[20:36:54] *** Joins: Zephyrus (~Zephyrus@user/zephyrus)
[20:38:54] *** Joins: e2m4n (~ezman@user/e2m4n)
[20:39:06] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:39:24] *** Joins: op0x0f05 (uid512716@tinside.irccloud.com)
[20:40:35] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[20:41:32] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[20:42:05] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:42:54] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:44:27] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[20:44:55] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:45:06] *** Quits: Anorak (~Anorak@p200300db9f14e3823cea368634f666b0.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:46:20] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[20:46:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[20:46:42] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[20:46:49] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 265 seconds)
[20:47:11] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:48:24] *** Joins: fikran (~fikran@user/fikran)
[20:49:56] *** Quits: martums (~martums@user/martums) (Read error: Connection reset by peer)
[20:50:59] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[20:52:30] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Read error: Connection reset by peer)
[20:55:24] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:55:28] <sveinse> bjs: You're right, it doesn't work. -- I thought I have tested it earlier. Since the sync fn return a function which is a coroutine function, it could be called and awaited upon. But it does not
[20:55:33] *** Joins: jess (~jess@libera/staff/jess)
[20:55:51] *** Joins: martums (~martums@user/martums)
[20:56:04] <bjs> sveinse: you can't await a coroutine function.  But maybe you getting one of the options wrong is a good argument for why you should write the other :)
[20:56:11] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[20:56:25] *** Joins: thevishy85 (~thevishy@2405:201:f005:c04c:310a:f331:a3d4:27)
[20:56:41] <sveinse> I don't remember the correct terminology: `def async fn():` is a coro? And the instance object of it a=fn() is a ?
[20:57:08] *** thevishy is now known as Guest1488
[20:57:08] *** thevishy85 is now known as thevishy
[20:57:22] <sveinse> bjs: sure, not attempting the former no more!
[20:58:49] <sveinse> fn is a coroutine, fn() is an awaitable, isn't it?
[20:58:55] *** BytesAndCoffee|a is now known as BytesAndCoffee
[20:59:53] *** Joins: MercilessDeth (~brad@136.49.59.177)
[21:00:16] <deniska> you can still do `def get(self): return self._queue.get()`
[21:00:22] *** Quits: Guest1488 (~thevishy@2405:201:f005:c04c:310a:f331:a3d4:27) (Ping timeout: 256 seconds)
[21:00:27] <deniska> it's only slightly naughty I think
[21:00:41] <sveinse> And for the completeness of my bad example: a = await (obj.get()) also works
[21:00:56] <sveinse> very ugly thou
[21:01:08] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:01:27] <deniska> await (obj.get()) and await obj.get() are equivalent
[21:02:28] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[21:02:28] <sveinse> Yeah, forget it. I forgot to save the file before running it. Pardon
[21:03:47] *** Joins: aphysically (~aphysical@user/aphysically)
[21:03:48] <sveinse> What I meant were that await obj.get()() works for my example. But eeww
[21:04:10] <deniska> now when you start having `await (await thing)` that's where my eyebrows raise
[21:04:27] <sveinse> haha, yeah
[21:05:50] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[21:06:09] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[21:09:01] *** Quits: anonymous (~anonymous@gateway/tor-sasl/anonymous) (Quit: real life is calling)
[21:09:59] *** Quits: callq (~callq@2409:4062:2d0c:d18f:992e:9e9b:dd11:9514) (Ping timeout: 264 seconds)
[21:11:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:11:52] *** Joins: bindu (~bindu@user/bindu)
[21:12:43] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[21:13:11] <teut> in the parsing step , does the compiler splits the async function into 2 functions when encountering the await keyword ?
[21:13:49] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:14:17] <Wulf> teut: while parsing? Why would it do that?
[21:14:28] <deniska> teut: not really, it just emits some special bytecode, you can look at it using dis.dis
[21:14:41] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[21:14:50] <deniska> it uses similar machinery to generator functions
[21:15:20] <deniska> (initially it used the same one, but with async generators becoming possible, new opcodes had to be invented)
[21:15:30] <teut> yeah it kinda needs to put the awaitable in a future
[21:15:38] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[21:15:55] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[21:16:08] <bjs> teut: i mean if you get `async def foo()` there is still only 1 function, "foo".
[21:16:58] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[21:17:11] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 264 seconds)
[21:17:27] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[21:17:50] <teut> =ya, I just thought that you will have to out all code before await as a callback
[21:18:00] <teut> put all code*
[21:18:02] <bjs> teut: no there is no "callback" really,  it works similarly to generators
[21:18:20] <teut> yes I know that
[21:18:33] *** Joins: defiant (~defiant@user/defiant)
[21:18:34] <bjs> teut: the function returns an object (e.g. a generator or coroutine object) which has a method which just runs the code until the next yield/await
[21:18:37] <teut> there are david beazely 's talks where he says that
[21:19:09] <teut> he does some weird stuff too   like    ` def f(): a = (yield)
[21:19:14] <bjs> that's not weird
[21:19:25] <teut> for me it is
[21:19:33] <bjs> teut: well,  that's a different statement all together :)
[21:19:52] <teut> ok , for me with my current knowledge it is
[21:20:18] <bjs> teut: yield is just an expression.  Like `yield <optional_expr>` and since it's an expression, it has a value.
[21:20:30] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[21:20:32] <teut> soyield is a system interrrupt?
[21:20:37] <bjs> (the value will be the thing sent into the generator when you ask it to run)
[21:20:39] <teut> so yield *
[21:20:45] <bjs> teut: I don't know what you mean by that?
[21:21:11] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:21:42] *** Quits: gitly (~gitly@85.255.235.223) (Ping timeout: 260 seconds)
[21:22:06] <teut> in a video  , someone asks david beazely , about this await and he says that constantly the resource checks if the IO  device is sending bytes
[21:22:53] <bjs> teut: it's hard to comment on that, it sounds like you're vaguely paraphrasing something that you vaguely remember.
[21:23:01] <teut> https://www.geeksforgeeks.org/interrupts/
[21:23:34] <bjs> But yield/await itself is just about Python functions,  they're not actually *doing* anything to do with IO or bytes or anything
[21:23:39] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[21:23:51] <bjs> perhaps david beazley was referring to a specific library and object in that instance?
[21:23:55] *** Joins: gitly (~gitly@148.252.132.164)
[21:25:44] *** Joins: monkey_ (~user@190.104.116.153)
[21:25:54] <teut> async IO is your library
[21:25:58] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[21:26:07] <teut> so its definitely related to IO
[21:26:11] <bjs> teut: asyncio is just a library, it has some functions and it calls some functions
[21:26:22] <bjs> teut: yes the _asyncio_ library is, and the asyncio library uses async def
[21:26:32] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:26:40] <bjs> that doesn't mean the async def itself cares about bytes and IO.  It's like,  there's a `requests` library that has a `def` that does HTTP stuff
[21:26:46] <bjs> but that doesn't mean functions are about HTTP
[21:26:51] <teut> IO operations are blocking and async event loop based callback model solves it
[21:27:18] <bjs> functions are just functions and you can use them in many ways.  coroutines and generators are just functions you can pause and continue
[21:27:37] <bjs> you can use those pause/continue functions to implement concurrent libraries,  and those libraries can worry about IO and bytes and all that
[21:28:09] <bjs> If you looked inside Python at what it's doing when it sees an `async def` it's not saying anything about IO or bytes.
[21:28:16] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com)
[21:28:17] <teut> you could be correct , but people connect async with IO so much that it looks like a together thing
[21:28:18] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[21:28:21] <bjs> and certainly not at the parsing step
[21:28:45] <sveinse> Technically py could do without the `async def` in the same way as generators does not need a `generator def`, but it helps a lot being explicit
[21:29:07] <bjs> teut: I am telling you how it is :)   yes `async def`s were added to the language specifically so that libraries can do that kind of thing, but that's kind of the point: it's up to the libraries to use them that way
[21:29:10] <teut> ya I want to start hacking the source code but some work comes up
[21:29:26] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[21:29:33] <teut> ya you had coroutines and futures
[21:29:37] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:29:40] <teut> its just that
[21:29:51] *** Joins: BlueSky_ (~BlueSky@user/bluesky)
[21:29:54] <bjs> libraries could use generators (or use other approaches all together) if they wanted rather than async-def.  and inside Python's source code (the parser and interpreter I mean) generators and async defs are basically the same and neither say anything about IO or bytes
[21:30:02] <bjs> They're just about running code, pausing and continuing.
[21:30:24] *** Joins: via_c7 (~orangeext@user/orangeextract)
[21:30:29] *** Parts: via_c7 (~orangeext@user/orangeextract) ()
[21:30:50] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[21:30:59] <bjs> so the parser sees `async def` and checks that it's valid, and the compiler generates code that can be paused and continued. Then the interpreter pauses and continues when you want.  Then libraries like `asyncio` use that pause/continue to implement "wait on IO and then read the bytes" or whatever.
[21:31:20] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[21:31:28] *** Joins: KombuchaKip (~kip@192.252.230.5)
[21:32:10] <teut> can you do this async stuff which "async" keyword functions like websockets?
[21:32:19] <teut> without*
[21:32:33] <bjs> teut: you can use `async def`s for whatever you want,  just like you use normal `def`s for whatever you want
[21:32:34] *** Quits: BlueSky (~BlueSky@user/bluesky) (Ping timeout: 268 seconds)
[21:32:40] *** Joins: causa-sui (~causasui@192.241.228.169)
[21:32:49] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[21:33:03] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[21:33:51] <bjs> teut: and yeah you can write libraries that don't use them.  You could write libraries that don't use functions at all if you wanted (it's probably not a good idea!)
[21:33:53] <teut> can you implement a asynchronous webserver without async functions?
[21:34:11] <bjs> Of course,  we've had webservers for many many decades
[21:34:13] <teut> just using pure functions and yield
[21:34:20] <teut> example please
[21:34:24] <deniska> teut: twisted predates async/await syntax by a decade and maybe a half
[21:34:31] <sveinse> teut: yes. That was how e.g. twisted did/does it
[21:34:35] <teut> it uses futures i think
[21:34:44] <teut> I started python in 2018/19
[21:34:55] <teut> with python*
[21:35:15] <bjs> teut: and of course you have threads, and lots of other ad-hoc concurrency mechanisms.  Any library that uses `async`/`await` today could have been written to use generators since they are basically the same technology
[21:35:28] <SnoopJ> teut, the rough outline of how you do that is "write your own event loop that switches out pausable bits of code"
[21:35:35] <teut> is async await the actor model?
[21:35:37] <bjs> instead of `async def foo(): await bar()` you would have `def foo(): yield from bar()`  (obviously the library has to be written to allow this)
[21:35:59] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[21:36:03] <sveinse> My first async program in py was written in 2009 in twisted. But in the lack of async/await, you had to rely on a callback methodoligy for async
[21:36:18] <bjs> teut: does it matter?  Who cares what a textbook defines as "the actor model",  but ... probably not? like I said async/await isn't about concurrency or IO it's just functions
[21:36:19] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:37:00] <ChrisWarrick> async/await is quite distinct from the actor model
[21:37:03] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[21:37:09] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 256 seconds)
[21:37:16] <SnoopJ> To wit: what would be the Actor?
[21:37:26] <bjs> You could *write* a library that implemented something like "the actor model" using async/await
[21:37:42] <bjs> and I'm sure people have
[21:38:07] <sveinse> I found understanding py generators a good way to wrap my mind around async coroutines
[21:38:21] *** Quits: han-solo (~hanish@user/han-solo) (Read error: Connection reset by peer)
[21:40:02] <SnoopJ> sveinse, my understanding is that they'd be a natural choice of primitive if you wanted to roll your own async because they already have a way to yield control flow
[21:40:08] *** Joins: subopt (~subopt@2603-8081-2302-459a-e48b-1ae1-4f74-9c2f.res6.spectrum.com)
[21:40:15] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Client Quit)
[21:40:20] <teut> if you have to read a file asynchronously you will have to read x bytes recursively
[21:40:33] <ChrisWarrick> teut: huh?
[21:40:34] <SnoopJ> teut, what does "read x bytes recursively" mean?
[21:41:00] <teut> for non blocking  IO
[21:41:06] *** Joins: tombobcat (~tombobcat@8.41.6.165)
[21:41:08] <bjs> teut: what does it have to do with recursion though?
[21:41:11] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[21:41:23] <teut> how will you pause the function otherwise?
[21:41:31] <bjs> teut: remember that at its core all "asynchronous" means is "don't wait"
[21:41:50] <bjs> teut: well if you want to use generators/async functions then you use the yield/await keyword to pause the function
[21:41:58] <teut> an event loop is just a while loop
[21:42:00] <bjs> yes
[21:42:11] *** Joins: nergar (~Nergar@177.225.129.174)
[21:42:13] <teut> while loop that runs functions from a queue
[21:42:16] <bjs> the functions pause themselves
[21:42:24] <bjs> generators/async-def functions that is
[21:42:29] <teut> and you can do that without recursion
[21:42:39] <teut> or yes yoeld
[21:42:43] <teut> i*
[21:42:45] <bjs> Yes recursion doesn't seem to have anything to do with this
[21:43:28] <sveinse> teut: Async IO means you send a signal to the OS with the read request that doesn't sleep. The function is then paused, giving control to the event loop while waiting for the OS to signal that the data is available and then the eventloop can "wake up" the function and resume execution.
[21:43:32] <teut> so if I am reading a file 1gb lets say   and I am also listening to mouse clicks
[21:43:53] <teut> can you do that without async and using only windows.h?
[21:43:59] <bjs> teut: sure,  how do you think async does it
[21:44:36] <bjs> teut: the async stuff is just Python code, if the loop has nothing to run it asks the OS to wait for something to happen
[21:45:30] *** Joins: mitchota (~mitchell@cpe-98-155-150-237.hawaii.res.rr.com)
[21:45:59] <bjs> teut: you may be interested in the select system call and things like epoll,  which allow Python to ask the OS to wake it up once something happens
[21:45:59] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 264 seconds)
[21:46:09] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:46:11] <bjs> (I don't know what happens on Windows, presumably there's some similar API)
[21:46:12] <sveinse> behind the scenes, the event loops keeps track of all the external events its set to listen for. E.g. timer or fileIO or network and so on. When some of these have been signalled, the event loop will wake up that specific task/function again.
[21:46:43] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:47:22] <teut> https://bpa.st/HD2A
[21:47:41] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com) (Remote host closed the connection)
[21:47:48] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[21:47:52] <teut> is it possible to implement this without asyncio?
[21:48:00] <bjs> teut: so your `read` function is just a normal Python function, there is no way to pause it. So you'd have to use threads to do things concurrently.
[21:48:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:48:29] *** Quits: tombobcat (~tombobcat@8.41.6.165) (Quit: Leaving...)
[21:48:38] <bjs> teut: if you wanted you could write an "asynchronous file io" library that didn't use async/await and would let you write read/respond_to_clicks (in a different way) to happen concurrently
[21:48:56] <teut> so to read asynchronously you will have to make an async file read function
[21:49:21] <bjs> teut: if you don't want to use threads
[21:49:30] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[21:49:44] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[21:49:55] <bjs> any time you implement a new concurrency library you have to implement the fundamental read/write functions again in your new library.
[21:50:10] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:50:11] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:50:31] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 245 seconds)
[21:50:36] *** Parts: mitchota (~mitchell@cpe-98-155-150-237.hawaii.res.rr.com) ()
[21:50:44] *** Joins: c10l (~c10l@user/c10l)
[21:50:51] <bjs> (note you don't actually have to implement file reading/writing... just that you need to write a wrapper that e.g. pauses the function until the file is ready to read or whatever)
[21:51:32] <sveinse> async file IO is a little bit tricky on some platform, as I believe its not implemented in the event loop on windows
[21:51:42] <teut> ya I think whatever I have awaited using the await till now was a library function
[21:51:49] *** Joins: Kvothe (~weechat@user/elodin)
[21:52:03] <teut> I should ve looked at the implementation of that library function
[21:52:11] <bjs> teut: yes, if you `await some_func()` then someone had to write some_func to specifically be able to be awaited
[21:52:13] *** Joins: vats (~vats@103.158.91.90)
[21:52:32] <teut> ah right, I missed this point totally
[21:52:36] <teut> thanks
[21:53:10] <teut> never realized that I never wrote this whats to be awaited
[21:54:17] <bjs> so in asyncio if you `await some_socket.read()` for example, someone had to write the `async def read` to do that.  Infact that code is here https://github.com/python/cpython/blob/3.10/Lib/asyncio/streams.py#L628
[21:55:18] *** Joins: han-solo (~hanish@user/han-solo)
[21:55:56] <teut> and isnt he using  recursion?
[21:56:08] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:56:29] <teut> and reading x bytes at a time
[21:56:51] <bjs> teut: well the function read(n) is "asynchronously read up to n bytes"
[21:56:55] <bjs> so yes it's reading n bytes at a time
[21:56:56] <teut> but thanks to you I found out that one may not return the output from yield
[21:57:16] <teut> yield can be just use to pause a function  until it returns
[21:57:24] <teut> used*
[21:57:41] <bjs> teut: the recursion is for some reason I don't quite understand,  but it only happens if you ask to wait for a negative number of bytes
[21:57:52] <bjs> so I'm just ignoring that case since it seems silly :)
[21:57:59] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:59:16] <bjs> teut: the important thing is that someone wrote it. that they used `async def` so that you can `await` it.
[21:59:23] <sveinse> BTW and a little to the side of this discussion: Many APIs provide "file-like" objects that behaves like a file does. Does it exists some notion of a standard file-like interface for async? E.g. I've seen a few using `async def aread()`
[21:59:24] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:00:00] <teut> and what would they have done if async , await syntax wasnt there?
[22:00:05] *** litharge sets mode: -b *!*@84.17.46.241
[22:00:06] <bjs> teut: used generators
[22:00:20] <teut> so replace all awaits by yield
[22:00:31] <bjs> teut: yes (or well `yield from`) but yeah
[22:00:47] <bjs> and then asyncio would have to be re-written to work with `yield` instead
[22:00:56] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[22:01:38] <teut> and you have the event loop which runs this function again and again , it fetches something , yields  and this happens infinitely
[22:01:44] <teut> till it returns?
[22:02:29] <teut> indefinitely *
[22:02:40] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[22:02:44] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[22:03:36] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[22:03:36] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Client Quit)
[22:04:08] <teut> some gap is still there but anyways got a new usecase of yield
[22:05:32] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 240 seconds)
[22:06:00] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:06:13] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:06:58] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[22:07:50] *** Quits: dbristow (~dbristow@user/dbristow) (Read error: Connection reset by peer)
[22:08:20] *** Joins: dbristow (~dbristow@user/dbristow)
[22:08:32] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[22:08:57] *** Quits: gitly (~gitly@148.252.132.164) (Ping timeout: 268 seconds)
[22:09:07] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[22:09:33] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[22:10:29] *** Joins: gitly (~gitly@85.255.236.252)
[22:10:35] *** Joins: Pickchea (~private@user/pickchea)
[22:11:05] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:11:22] <deniska> (asyncio predates async/await syntax, and initial versions used generators and `yield from`)
[22:11:52] <deniska> twisted also had utilities for using generators as coroutines
[22:14:10] <teut> once a function has yielded does the loop puts it at back of the queue?
[22:14:22] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:14:30] <teut> I am able to create some logic
[22:15:13] <teut> thats the only way it can continue
[22:15:56] *** Quits: Gerula (~Gerula@user/gerula) (Ping timeout: 245 seconds)
[22:15:59] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 264 seconds)
[22:16:34] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[22:16:37] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:17:14] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Ping timeout: 260 seconds)
[22:17:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:18:15] *** Joins: Yugi (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[22:18:53] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[22:19:34] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[22:19:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[22:20:56] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 245 seconds)
[22:21:32] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:21:54] *** Quits: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 268 seconds)
[22:24:25] *** Joins: Gerula (~Gerula@user/gerula)
[22:24:35] *** Quits: dejavu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: dejavu)
[22:24:55] <The-Compiler> anyone knows how open python.org is about hosting mailing lists for projects using Python there?
[22:25:12] *** Joins: cdown_ (~cdown@89.32.122.5)
[22:26:13] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[22:26:39] <The-Compiler> https://www.python.org/community/lists/ says "To request a new list, send e-mail to postmaster@python.org" and https://mail.python.org/archives/?count=200 has lots of stuff, so it sounds like it's an option - but my project (qutebrowser.org) is an pplication which happens to be written in Python rather than something part of the Python ecosystem directly
[22:26:42] *** Quits: rsx (~dummy@ppp-188-174-129-11.dynamic.mnet-online.de) (Quit: rsx)
[22:27:36] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 245 seconds)
[22:27:47] *** Joins: menace (~someone@user/menace)
[22:28:24] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[22:28:54] <menace> hey, i wanted to install  the pip package multiprocessing (python3) in debian stable.. it threw several errors. is this module not used any longer? or is it broken on debian? does anyone know that by chance?
[22:28:58] <Payam> Hi, Where do you get your free svg icons?
[22:29:03] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[22:29:32] <han-solo> menace: multiprocessing is in the stdlib, iirc
[22:29:39] <menace> ah
[22:29:47] *** Quits: TJ- (~root@about/linux/staff/tj-) (Ping timeout: 264 seconds)
[22:29:48] <menace> yeah an import also works
[22:29:49] <menace> funny
[22:29:49] <han-solo> you don't need to install it.# https://docs.python.org/3/library/multiprocessing.html
[22:29:53] <menace> thank you!
[22:30:22] <han-solo> also see # https://docs.python.org/3/library/concurrent.futures.html
[22:30:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:31:04] *** Joins: lionslicer (~lionslice@2804:d41:a7a6:1300:5c82:c3ba:5a37:b456)
[22:31:09] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 268 seconds)
[22:32:50] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[22:32:54] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[22:33:29] *** Joins: Gerula_ (~Gerula@user/gerula)
[22:33:30] *** Gerula is now known as Guest821
[22:33:30] *** Quits: Guest821 (~Gerula@user/gerula) (Killed (calcium.libera.chat (Nickname regained by services)))
[22:33:30] *** Gerula_ is now known as Gerula
[22:34:38] *** Joins: gitly2 (~gitly@185.69.145.21)
[22:35:25] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:35:26] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 260 seconds)
[22:36:41] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[22:36:53] *** Joins: grooverman (~grooverma@177.102.117.95)
[22:37:11] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[22:37:47] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[22:37:48] *** Quits: gitly (~gitly@85.255.236.252) (Ping timeout: 256 seconds)
[22:38:16] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:39:03] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[22:40:41] *** Quits: grooverman (~grooverma@177.102.117.95) (Client Quit)
[22:41:25] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[22:42:02] *** Joins: grooverman (~grooverma@177.102.117.95)
[22:45:34] *** Quits: pro_z (~pro_z@37.214.56.218) (Read error: Connection reset by peer)
[22:46:06] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:46:35] *** Joins: pro_z (~pro_z@37.214.34.194)
[22:47:01] *** Joins: s0k1t (~user@68.235.43.68)
[22:47:24] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:50:07] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[22:50:08] *** Joins: TJ- (~root@about/linux/staff/tj-)
[22:51:18] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[22:51:50] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Client Quit)
[22:51:52] *** Quits: nomic (~nomic@185.192.69.224) (Quit: Leaving)
[22:51:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:54:03] *** Joins: interweb (~interweb@user/interweb)
[22:54:59] *** Quits: Dan39 (~dan@user/dan39) (Ping timeout: 264 seconds)
[22:55:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[22:57:43] *** Joins: fikran (~fikran@user/fikran)
[22:58:35] *** Quits: Maikel (~Maikel@130.61.63.136) (Ping timeout: 264 seconds)
[22:58:44] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[22:59:27] *** Joins: Maikel (~Maikel@130.61.63.136)
[22:59:42] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 260 seconds)
[23:00:49] *** Joins: audiobirb (~audio@user/audio)
[23:01:35] *** Quits: anonymeowo (~anonymeow@107.189.14.18) (Ping timeout: 264 seconds)
[23:01:57] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[23:02:11] *** Joins: nomic (~nomic@185.192.69.224)
[23:02:45] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[23:02:53] *** Joins: sharperguy (~sharpergu@88.130.220.158)
[23:04:54] *** Quits: Tas-sos (~Tas-sos@ppp046176221197.access.hol.gr) (Quit: Lost terminal)
[23:04:56] *** Joins: Pixi (~Pixi@user/pixi)
[23:06:55] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 268 seconds)
[23:07:50] *** Joins: yaalon_ (~yaalon@2600:100c:b03c:4581:9198:a33e:dbf3:357c)
[23:08:56] *** gitly2 is now known as gitly
[23:10:35] *** Quits: pro_z (~pro_z@37.214.34.194) (Ping timeout: 264 seconds)
[23:11:20] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) (Ping timeout: 265 seconds)
[23:12:21] *** Quits: binary01 (~binary01@192.110.171.216) (Ping timeout: 256 seconds)
[23:12:56] *** Joins: white_magic (~white_mag@2600:1700:6ae2:a20:fc21:df35:2910:d85d)
[23:13:06] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (Remote host closed the connection)
[23:13:39] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[23:14:40] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[23:16:05] <white_magic> Anyone here have experience with SqlAlchemy 2.0 in async mode? When I try to do a SELECT query after adding and commit an object to the DB, I get this error: "Can't operate on closed transaction inside context manager.  Please complete the context manager before emitting further commands.". But I have "expire_on_commit" set to False for the
[23:16:05] <white_magic> session. So why is SqlAlchemy complaining?
[23:16:35] *** Joins: lastshell (~lastshell@user/lastshell)
[23:17:05] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[23:17:32] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[23:18:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[23:18:39] *** Quits: TJ- (~root@about/linux/staff/tj-) (Quit: WeeChat 3.3)
[23:18:51] *** Joins: upsala (~zcb@185.213.155.252)
[23:19:02] *** Quits: op0x0f05 (uid512716@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:19:31] *** Joins: TJ- (~root@about/linux/staff/tj-)
[23:22:19] *** eldritch_ is now known as eldritch
[23:23:02] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[23:24:36] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[23:24:37] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[23:25:22] <lionslicer> how do I solve this problem? I can't figure it out
[23:25:26] <lionslicer> https://bpa.st/4ZHA
[23:25:52] *** Quits: gerty (~gerty@user/gerty) (Remote host closed the connection)
[23:26:03] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (Ping timeout: 268 seconds)
[23:27:07] <ChrisWarrick> lionslicer: what are you using to learn Python?
[23:27:36] <lionslicer> I'm using a book called Python Crash Course
[23:27:38] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[23:28:42] <ChrisWarrick> lionslicer: you have a while loop with no body, that won’t even compile
[23:28:52] <ChrisWarrick> lionslicer: what would you expect that while loop to accomplish?
[23:29:07] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 268 seconds)
[23:29:13] *** Quits: yaalon_ (~yaalon@2600:100c:b03c:4581:9198:a33e:dbf3:357c) (Remote host closed the connection)
[23:29:55] *** Quits: vats (~vats@103.158.91.90) (Ping timeout: 256 seconds)
[23:30:36] *** Quits: gitly (~gitly@185.69.145.21) (Quit: WeeChat 3.3)
[23:30:50] <lionslicer> I expect it to accomplish nothing at its current state. I haven't finished the program because I'm stuck
[23:31:14] *** Quits: interweb (~interweb@user/interweb) (Quit: Leaving)
[23:31:33] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Client Quit)
[23:31:40] <ChrisWarrick> lionslicer: do you know what the difference between a for loop and a while loop is?
[23:31:50] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:64ec:672:866e:b65) (Quit: Textual IRC Client: www.textualapp.com)
[23:32:37] <han-solo> bit.ly/pyiter
[23:32:57] <han-solo> lionslicer: ^
[23:33:55] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[23:33:59] <lionslicer> the for loop takes everything in a list to work with it. the while loop does thing *while* a condition is True
[23:34:06] <lionslicer> that's what I think
[23:34:32] *** Joins: gitly (~gitly@85.255.236.225)
[23:34:51] <lionslicer> and as far as I understand, you can use a while loop as a for loop, but not the other way around
[23:35:03] <sveinse> Does anyone know if there is a one-to-many syncronization library that work both in blocking code as well as async(io)? Much like what janus is for queue
[23:35:04] *** Quits: white_magic (~white_mag@2600:1700:6ae2:a20:fc21:df35:2910:d85d) (Ping timeout: 256 seconds)
[23:35:04] *** Quits: s0k1t (~user@68.235.43.68) (Remote host closed the connection)
[23:35:44] <ghostbuster> does anyone else find it strange that python allows me to write a for loop over a list and modify the entries of the list during the loop?
[23:35:55] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[23:36:08] <ChrisWarrick> ghostbuster: depending on the definition of “modify”, perhaps you shouldn’t do that (mutating is fine)
[23:36:37] *** Joins: causa-sui (~causasui@192.241.228.169)
[23:36:58] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[23:37:00] <ghostbuster> ChrisWarrick: yeah I mean like mylist = [1]; for i in mylist: mylist.append(i+1)
[23:37:12] <ghostbuster> can cause all sorts of mayhem lol
[23:37:38] <ChrisWarrick> ghostbuster: python won’t always prevent you doing stupid stuff — but don’t do it
[23:37:40] *** Joins: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com)
[23:38:25] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 256 seconds)
[23:40:35] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[23:41:28] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[23:42:46] <ghostbuster> lol, understood
[23:42:56] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Remote host closed the connection)
[23:44:06] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:45:09] *** Quits: causa-sui (~causasui@192.241.228.169) (Ping timeout: 268 seconds)
[23:47:08] *** Joins: gerty (~gerty@user/gerty)
[23:48:38] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:50:47] *** Quits: nomic (~nomic@185.192.69.224) (Quit: Leaving)
[23:50:53] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[23:51:14] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[23:52:06] *** Quits: MJ94 (~MJ94@user/mj94) (Quit: ZNC - http://znc.in)
[23:53:34] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[23:55:31] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
