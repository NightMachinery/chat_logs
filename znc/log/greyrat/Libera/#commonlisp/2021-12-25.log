[00:04:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[00:05:48] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[00:40:37] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 240 seconds)
[00:55:29] <nij-> I see a quote in py4cl's readme: "It (py4cl) uses streams to communicate with a separate python process, the approach taken by cl4py. This is different to the CFFI approach used by burgled-batteries, but has the same goal." Does anyone know what's the approach mentioned that's used by burgled-batteries?
[00:56:52] <etimmons> nij-: Pretty sure burgled-batteries loads libpython (or whatever it's called) into your CL process
[00:58:21] <nij-> By using implementation-dependent #'load-shared-library? I didn't know that we can do that for non-C library (e.g. for SBCL)..
[01:00:37] <etimmons> cython (the canonical python implementation) is written in C
[01:03:33] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[01:25:32] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Quit: WeeChat 3.3)
[01:27:41] <phoe> nij-: no need to use implementation-dependent stuff if you use CFFI which is a compatibility library
[01:33:32] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:37:27] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[01:42:41] <nij-> phoe: Can you use CFFI to talk to python directly, without using other bindings (like cython)?
[01:42:48] <phoe> nij-: talk how exactly
[01:43:16] <phoe> either you load libpython and talk to it via CFFI or you spawn a python process or you talk to it via its standard input/output or network sockets
[01:43:39] <phoe> if you are crazy enough you can try shared or transactional memory for communication, but I don't think it's worth it for python
[01:43:52] <phoe> s/or you talk to it via/and you talk to it via/
[01:44:44] <nij-> The second way "to spawn a python process" seems new to me. How does that work?
[01:46:29] <rotateq> ehm starting in shell maybe "python3" or such? :)
[01:46:44] <phoe> nij-: uiop:launch-program
[01:46:54] <rotateq> ah okay or that :D
[01:47:21] <opalvaults[m]> couldn't easily find this info. what is the #p in this expression
[01:47:21] <opalvaults[m]>  (load (merge-pathnames #p"quicklisp/setup.lisp" (user-homedir-pathname)))
[01:47:27] <phoe> opalvaults[m]: a pathname
[01:47:53] <rotateq> opalvaults[m]: one of the standard dispatch readmacros to create a pathname from the given string
[01:47:57] <opalvaults[m]> so like #' would be evaluating a function
[01:48:24] <opalvaults[m]> dispatch readmacros, got it, to the Hyperspec!
[01:48:24] <rotateq> not evalute, it gives you the function object which is bound to the symbol
[01:48:26] *** Joins: notzmv (~zmv@user/notzmv)
[01:48:34] <phoe> opalvaults[m]: https://gigamonkeys.com/book/files-and-file-io.html also
[01:48:39] <rotateq> fast, to the hyperspec! :D
[01:49:38] <opalvaults[m]> phoe: I'm very glad common lisp doesn't use port terminology
[01:50:01] <opalvaults[m]> much easier to grok imo
[01:50:04] <Xach> i have had some interesting issues with using strings vs. pathnames when it comes to resolving pathname hosts
[01:51:05] <opalvaults[m]> I was told that you have to use Uiop, and/or implementation specific ways to get a reliable path to $HOME (~), so someone mentioned user-homedir-pathname and I assume that it's pretty unixy?
[01:52:06] <opalvaults[m]> I'm trying to make sure that I'm not going with (load "~/quicklisp/setup.lisp"), as apparently ~ is a bit nebulous to CL (although I was under the impression that ~ is POSIX)
[01:52:25] <phoe> opalvaults[m]: actually it's not unixy, it's a standard CL function
[01:52:44] <random-nick> tilde expansion is usually done by the shell on posix
[01:53:00] <phoe> you can always (merge-pathnames #p"quicklisp/setup.lisp" (user-homedir-pathname)) if you want to be cautious I think
[01:53:34] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 260 seconds)
[01:53:37] <opalvaults[m]> phoe that's what I used above yeah
[01:54:05] <pjb> opalvaults[m]: I've found that more implementations do the right thing with #P"~/foo" than with "~/foo".
[01:54:10] <opalvaults[m]> however it's not unreasonable to expect POSIX compliance for CL functions right?
[01:54:18] <pjb> but of course, using user-homedir-pathname is the most conforming.
[01:54:23] <phoe> opalvaults[m]: depends on what you mean by POSIX compliance
[01:54:30] <Xach> supporting "~/" is fairly universal these days
[01:54:40] <Xach> i don't think "~<username>/" is but i haven't checked
[01:54:42] <opalvaults[m]> ^
[01:54:46] <pjb> opalvaults[m]: yes, it's unfortunately unreasonable, to expect common behavior of CL implementations on POSIX platforms. :-(
[01:57:23] <opalvaults[m]> import os
[01:57:23] <opalvaults[m]> print(os.environ['HOME']), gets the job done in Python, as does expanding ~
[01:57:37] <opalvaults[m]> so if user-homedir=-pathname is similar, that that should suffice
[01:57:51] <opalvaults[m]> user-homedir-pathname*
[01:57:51] <etimmons> nij-: from what you quoted it seems like py4cl uses launch-program or similar to start a separate python process and communicate with it
[01:57:55] <phoe> opalvaults[m]: so does (uiop:getenv "HOME")
[01:58:08] <phoe> but it depends on 1) UIOP, 2) you running on a unixlike system
[01:58:34] <opalvaults[m]> Thankfully I never interact with non-unixlike systems ;p
[01:59:04] <opalvaults[m]> thanks for all the advice ya'll :)
[02:00:21] <rotateq> opalvaults[m]: and if, you can use #+ and #- too for giving extra options (that should be orthogonal to each other in this case)
[02:02:51] <random-nick> I'm pretty sure posix compliance would be to not perform tilde expansion when opening files and the like
[02:04:13] <random-nick> but posix mostly just talks about C functions and not about CL
[02:04:30] <random-nick> so you can't know for sure
[02:08:05] <opalvaults[m]> i'm fairly certain tilde expansion is POSIX
[02:08:30] <opalvaults[m]> see https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/V3_chap02.html#tag_18_06_01
[02:08:58] <opalvaults[m]> now whether CL conforms to that, is another discussion apparently lmao
[02:09:03] <random-nick> that's in the description of the shell language
[02:09:28] <opalvaults[m]> sh is POSIX compliant
[02:09:47] <random-nick> functions on the C side would use functions like open and the like which don't perform tilde expansion
[02:09:49] <opalvaults[m]> -- /bin/sh scripting, more accurately
[02:10:13] <random-nick> and I'm guessing the C interfaces would be more appropriate for mapping to CL's file functions
[02:10:14] <opalvaults[m]> right, however nonetheless tilde expansion is supported in most languages, including POSIX complaint shell
[02:10:36] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 240 seconds)
[02:11:34] <opalvaults[m]> I'm also unsure I would rely too much on C for just about anything as far as CL is concerned. Relying on standards and specifications is the way imo.
[02:12:28] <opalvaults[m]> Not that I'm in any way authorized to make that claim, but I've coded enough Algol related families and done enough Linux admin to be miffed at a lot of things C does.
[02:16:38] <rotateq> who isn't?
[02:16:48] <opalvaults[m]> after a bit of extra research it appears the scheme family does tilde expansion as well.
[02:17:07] <opalvaults[m]> now I'm curious because I can't find anything in hyperspec, what makes ~ so unreliable in common lisp then?
[02:17:35] <rotateq> opalvaults[m]: and we can have it at readtime with #p before anything out there is messaged
[02:18:34] <rotateq> no, it's one of those things which won't make much sense to specify too precise in the standard, like with say regular expression grammar
[02:18:48] <opalvaults[m]> okay
[02:19:03] <opalvaults[m]> well, learned something new, thanks again all :)
[02:19:09] <rotateq> nice
[02:19:30] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[02:21:01] <rotateq> or not specifying at all as it's not a special purpose "close" to hardware thing like C
[02:22:07] <phoe> opalvaults[m]: what if you're running on an OS where ~ does not denote a home directory
[02:22:15] <phoe> but, for instance, something like %HOME% does
[02:22:36] <random-nick> I think CL doesn't specify anything related to tilde expansion because of portability to different systems
[02:22:37] <phoe> it's better to leave stuff like that to implementers rather than hardcode it and risk it becoming obsolete at some point in time
[02:22:54] <White_Flame> you mean like file versions and such?
[02:22:56] <random-nick> yes, single-user systems exist
[02:23:11] <opalvaults[m]> depends on whether or not I'm developing for windows phoe
[02:23:19] <random-nick> White_Flame: well, versioned file systems are back
[02:23:28] <random-nick> but they hide the versions from regular programs
[02:23:29] <phoe> opalvaults[m]: you're developing in CL first and foremost
[02:23:31] <opalvaults[m]> which I would never do, nor would I ever cater to windows users in CL
[02:24:01] <phoe> in the general case, the less OS-specific code you need to have, the better for you
[02:24:11] <opalvaults[m]> it's kind of off-topic, but windows is the only ones that uses %% to specify home directory as an environmental variable
[02:24:18] <phoe> and lots of OS-specific code already made it into the compatibility library that UIOP is
[02:24:41] <random-nick> CL doesn't even specify what's the path separator
[02:24:46] <opalvaults[m]> right, would would make sense in otherl anguages as well like python's os module.
[02:25:02] <opalvaults[m]> so if uiop has that functionality and is standardized I don't see any reason not to use it
[02:25:21] <phoe> standardized? that's some strong words out there
[02:25:25] <opalvaults[m]> i'm looking for reliable methodology
[02:25:47] <phoe> more like "everyone uses it because it's seemingly the lesser-est evil"
[02:26:08] <opalvaults[m]> I don't see your point.
[02:26:21] <random-nick> yeah I'd rather use "widely adopted" than "standardized"
[02:26:37] <phoe> UIOP doesn't have a standard
[02:26:40] <White_Flame> or at the most, "ad hoc standard"
[02:26:44] <opalvaults[m]> POSIX specifications allow for expansion of the tilde into $HOME
[02:26:48] <phoe> there's no document that says how it should work
[02:26:54] <opalvaults[m]> If that's not a standard, then I'm unsure what is.
[02:26:55] <phoe> unlike, for example, CL
[02:27:02] <phoe> POSIX is a standard, it's a document
[02:27:08] <phoe> so is ANSI CL
[02:27:33] <opalvaults[m]> So does ANSI CL have a reliable methodology for detemrining $HOME? or expanding variables to point to it?
[02:27:35] <phoe> linux is an implementation of POSIX in a way, just like SBCL is an implementation of CL
[02:27:40] <phoe> no, it doesn't
[02:27:44] <opalvaults[m]> Okay then
[02:27:48] <phoe> it doesn't have a notion of environment variables
[02:28:09] <pjb> It doesn't say that random program should do it.  In particular, open("~/foo",O_RDONLY) definitely DOES NOT expand the tilde !!!
[02:28:10] <phoe> it only has user-homedir-pathname which is equivalent to $HOME, but nothing for other environment variables
[02:28:18] <pjb> It's NOT a feature of the kernel.
[02:28:26] <pjb> POSIX only specifies it for the shell.
[02:28:27] <opalvaults[m]> I don't see how its' relevant. The practical matter is that if someone needs a reliable methodology to point to $HOME, or %HOME%, or what have you, it's not quite unreasonable to expect a language to implement it
[02:29:11] <rotateq> opalvaults[m]: but it can be completely different from one day to another
[02:29:19] <opalvaults[m]> POSIX specifies it is allowed period. If it wasn't allowed, you wouldn't be able to do it in the shell. It's a reliable method if pointing an environment to a specific filesystem directory correct?
[02:29:32] <phoe> since ANSI CL is from 1994, UIOP and other compatibility libraries have a lot of stuff that is commonly used and differs between OSes and implementations but isn't a part of ANSI CL
[02:29:36] <pjb> opalvaults[m]: no, not a language, that was specified to work on different systems!
[02:29:41] <phoe> that's the CL way
[02:29:45] <rotateq> so it's about have something that stands the test of time really
[02:29:46] <pjb> opalvaults[m]: you may ask it from specific implementations.
[02:29:47] <random-nick> pjb: that was my point, POSIX specifies tilde expansion only in the shell language
[02:29:52] <pjb> opalvaults[m]: but not from the language.
[02:29:55] <opalvaults[m]> s/shell//bin/sh
[02:30:34] <pjb> opalvaults[m]: note how the C language has no way to get a HOME or doesn't specify  a structure in the path strings!
[02:30:35] <rotateq> even on non register-based machines we mostly have today
[02:30:41] <opalvaults[m]> I may ask the most reliable methodology in CL so that I don't create bugs where (user-homedir-pathname) doesn't resolve to rubbish on unix operating systems.
[02:30:48] <pjb> opalvaults[m]: it's not the job of C, the language, to do that.
[02:31:25] <opalvaults[m]> I think I said before, but almost every language has this. I'm aware C does not, but I don't care whata specific language does or doesn't do.
[02:31:37] <opalvaults[m]> I just want to know what won't break things for other users.
[02:31:40] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[02:31:41] <pjb> opalvaults[m]: CL implementations provide FFI, and you can therefore link to the getenv and putenv posix library functions.  #+ccl (ccl:getenv "HOME") #| --> "/Users/pjb" |#
[02:31:48] <phoe> opalvaults[m]: u-h-p won't resolve to rubbish - if it does, you are free to file a bug with the implementation :D
[02:31:54] <opalvaults[m]> Or cause issues further down the road.
[02:32:00] <rotateq> but what you said may make sense in a language which has just one impl and its spec is bound to that directly :)
[02:32:02] <phoe> clhs user-homedir-pathname
[02:32:02] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_user_h.htm
[02:32:32] <phoe> the standard specifies that the definition of a home directory is implementation-dependent, but "defined in Common Lisp to mean the directory where the user keeps personal files such as initialization files and mail."
[02:32:37] <phoe> so $HOME on all unices all right
[02:32:40] <opalvaults[m]> right, i've already read that phoe as we discussed it far further up.
[02:32:53] <phoe> you can use the UIOP's XDG functions if you want, too
[02:32:57] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[02:33:12] <random-nick> other languages probably don't perform parameter expansion and other parts of shell expansion, so bringing up posix is a weird point
[02:33:15] <opalvaults[m]> However, it still begs the question why CL decides to buck the trend of reliable tilde expansion
[02:33:35] <opalvaults[m]> I suppose it's an artifact of its time?
[02:33:36] <opalvaults[m]> I think there's no shame in admitting that.
[02:33:48] <opalvaults[m]> yes they do random-nick.
[02:34:01] <opalvaults[m]> even scheme does it.
[02:34:08] <opalvaults[m]> the least portable language in the world
[02:34:10] <opalvaults[m]> tm
[02:34:28] <phoe> opalvaults[m]: huh
[02:35:09] <phoe> does C perform tilde expansion? I haven't heard of it doing it
[02:35:14] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[02:35:29] <phoe> it would mean that C is also the least portable language in the world
[02:35:31] <random-nick> from r6rs:  Some of the procedures described in this chapter accept a file name as an argument. Valid values for such a file name include strings that name a file using the native notation of filesystem paths on an implementation's underlying operating system, and may include implementation-dependent values as well.
[02:35:57] <random-nick> seems that scheme doesn't specify tilde expansion in the specification either
[02:36:04] <phoe> but, to answer your question: standard CL does not expand tildes because standard CL has no notion of tildes
[02:36:16] <phoe> it leaves lots of pathname stuff to be defined by implementations themselves
[02:36:19] <opalvaults[m]> C does not, but as I poitned out many times before I don't think any language shoudl model itself after C :P
[02:36:27] <phoe> so, any sort of tilde expansion, too
[02:36:31] <opalvaults[m]> No it doesn't phoe. That's a weird conclusino you've drawn lmao
[02:36:37] <phoe> so, for tilde expansion and such, query your implementation
[02:36:51] <phoe> which Lisp implementation do you use?
[02:37:12] <random-nick> also, CL doesn't "buck the trend" if the trend is newer than CL
[02:37:17] <opalvaults[m]> random-nick:
[02:37:18] <opalvaults[m]> If STRING is identical to "~" or if it begins with "~/", return the argument with the "~" substituted by the current user's home directory. If the current user cannot be determined or does not exist, a condition of type (exn pathname-expand username) is raised.
[02:37:18] <opalvaults[m]> If STRING begins with "~USERNAME", return the argument with the "~USERNAME" substituted by the provided user's HOME directory. On Windows, this will be the value of the environment variables USERPROFILE or HOME (or "." if none of the variables is set). On Unix systems, the user database is consulted. If the user does not exist, a condition of type (exn pathname-expand username) is raised.
[02:37:57] <random-nick> is that from another rnrs or is that from a particular rnrs implementation's documentation?
[02:37:58] <opalvaults[m]> CL doesn't change to match the landscape? Stuck in the past?
[02:38:06] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[02:38:47] <phoe> the standard is stuck in 1994, yes, and the implementations and compatibility libraries take over from there
[02:39:14] <phoe> at least on my implementation (SBCL), the tilde in a pathname is recognized: https://plaster.tymoon.eu/view/2795#2795
[02:39:23] <phoe> (see the DIRECTORY slot which recognizes :HOME)
[02:39:24] <random-nick> SBCL manual on specifying the home directory: http://www.sbcl.org/manual/index.html#Home-Directory-Specifiers
[02:39:35] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[02:39:47] <phoe> ^
[02:39:58] <rotateq> ...
[02:40:34] <phoe> lots of pathname stuffs are implementation-dependent, so implementation manuals like this is what you should be consulting when it comes to implementation-dependent behavior
[02:40:57] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[02:41:21] <opalvaults[m]> :home is represented in namestrings by ~/ and (:home "username" by ~username/ at the start of the namestring. Tilde-characters elsewhere in namestrings represent themselves.
[02:41:21] <opalvaults[m]> Home directory specifiers are resolved to home directory of the current or specified user by native-namestring, which is used by the implementation to translate pathnames before passing them on to operating system specific routines.
[02:41:21] <opalvaults[m]> Using (:home "user") form on Windows signals an error.
[02:41:32] <opalvaults[m]> ah! so tildes are okay then
[02:41:51] <phoe> yes, that's what I've been trying to convey
[02:41:54] <opalvaults[m]> thanks SBCL
[02:42:09] <phoe> the ANSI CL standard doesn't care about tildes, it says it's implementation-defined stuff
[02:42:15] <phoe> so SBCL defines it
[02:43:42] <opalvaults[m]> well then cool, i'm glad SBCL defines tilde expansion normally
[02:44:07] <phoe> as it was said somewhere above, most implementations do
[02:44:19] <phoe> (it was Xach, probably, like 50 minutes ago?... :D)
[02:44:44] <opalvaults[m]> ah, but it was told do me that tilde was unreliable. a point that is only just now being refuted by SBCL
[02:45:00] <opalvaults[m]> I was asking for reliable methodology.
[02:45:21] <pjb> opalvaults[m]: CL defines logical pathnames. You can define a logical host named HOME with translations to the user home directory.  SO you can use logical pathnames suchas : #P"HOME:QUICKLISP;SETUP.LISP"
[02:45:25] <phoe> the way to achieve reliability in the CL world is to check which implementations are consistent in their implementation-defined behavior
[02:45:47] <phoe> so check if tildes are expanded the proper way in the most commonly used implementations, and you're golden
[02:45:55] <pjb> opalvaults[m]: these logical path will work everywhere, as long as you provide the logical pathname translation.\
[02:46:02] <opalvaults[m]> which is quite nice pjb
[02:46:26] <phoe> and wherever they don't work the same way, write a compatibility library that provides a uniform API
[02:46:35] <phoe> that's how sockets, threads, and other stuff works nowadays in the CL world.
[02:46:47] <opalvaults[m]> in the SBCL CL world?
[02:46:53] <phoe> no, in the CL world
[02:47:06] <phoe> which can use - and uses - SBCL, CCL, ECL, Clasp, ABCL, CLISP, ACL, and LW
[02:47:17] <phoe> it's broader than just SBCL.
[02:47:39] <opalvaults[m]> So wait doesn't having x number of implementations kind of defeat the purpose of standardizatino?
[02:47:40] <phoe> on another note, my amb implementation/tests/manual is sorta ready for first public reviews - https://github.com/phoe/amb
[02:47:48] <opalvaults[m]> wow i really cannot do the "ion" lmao
[02:47:55] <phoe> opalvaults[m]: what do you mean, defeat
[02:48:11] <phoe> if your code is portable ANSI CL then it runs on every of those implementations
[02:48:13] <pjb> opalvaults[m]: standardization defines a common set.  It's necessarily limited. Implementations define a superset.
[02:48:23] <pjb> Each implementation define its own superset.
[02:48:25] <phoe> doesn't having x C compilers defeat the purpose of standardizing C?
[02:49:02] <random-nick> Shinmera made a site which lists some portability libraries and their status on various CL implementations: https://portability.cl/
[02:50:27] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[02:51:25] <opalvaults[m]> phoe: are there non POSIX compliant C implementations?
[02:51:44] <opalvaults[m]> I'm not aware of any compiler that doesn't conform to at least some standard
[02:52:09] <opalvaults[m]> ie ISO C/POSIX etc
[02:52:23] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[02:52:52] <opalvaults[m]> that's a cool chart random-nick
[02:53:33] <random-nick> I've heard there are many niche embedded microprocessors which have a very poor ad-hoc C implementation as the only available programming language
[02:54:03] <random-nick> but I haven't personally done any embedded programming so I don't know from experience
[02:54:05] <phoe> opalvaults[m]: MSVC is the most famous one - see e.g. https://docs.microsoft.com/en-us/cpp/c-runtime-library/compatibility?view=msvc-170
[02:54:09] <phoe> (though that's getting offtopic)
[02:54:17] <opalvaults[m]> Ah, so another Microsoft
[02:54:47] <opalvaults[m]> Which kind of nicely goes back to your original question of asking what if a users home was %HOME%. that's not what I'd ever be concerned about, to answer your question.
[02:55:20] <phoe> well, obviously, if you assume that your code only runs on unices then don't be surprised when people complain it only runs on unices
[02:55:22] <opalvaults[m]> I don't develop, or use non-free software
[02:56:03] <opalvaults[m]> I'm not concerned with Windows users (or Unix users) that complain that whatever I write isn't cross-platform with their proprietary software.
[02:56:36] <jcowan> Vacietis is the World's Most Awesome C Compiler, but its standards compliance is a bit technical: sizeof(char) = sizeof(int) = sizeof(long) = sizeof(double) = 1.
[02:56:39] <opalvaults[m]> I perhaps should have communicated that I'm looking for reliable methodology for Unix systems, and for that I apologize for not being clear from the onset.
[02:57:22] <phoe> I'm kinda sad that you conflate "free software" with "unix" - we have Mezzano around :(
[02:57:48] <phoe> https://www.fitzsim.org/blog/?p=445
[02:57:58] <opalvaults[m]> Mezzano is great, but I think you're splitting hairs a bit.
[02:58:07] <random-nick> Haiku is also non-unix I think
[02:58:26] <phoe> and ReactOS which might want to run lisps someday\
[02:58:41] <phoe> that's exactly why pathname stuff is underspecified in the standard
[02:58:43] <opalvaults[m]> As is temple OS but you'd never run into a dev asking for reliable tilde expansion on Temple OS or haiku
[02:58:46] <opalvaults[m]> does haiku have CL?
[02:58:46] <random-nick> I think reactos might be able to run sbcl, ecl or corman
[02:58:52] <random-nick> I remember trying that out
[02:58:59] <opalvaults[m]> lmao that sounds fun
[02:59:18] <phoe> opalvaults[m]: https://discuss.haiku-os.org/t/porting-sbcl-common-lisp-to-haiku/8928/16 looks like there's some work on that
[02:59:37] <phoe> so the answer is either "yes" or "not yet"
[02:59:54] <random-nick> the home directory on mezzano is a little weird if I recall correctly
[03:00:09] <random-nick> it's a single user system so there's just one
[03:00:20] <random-nick> and it's stored on an in-memory file system
[03:00:31] <opalvaults[m]> random-nick:  is this done by the CLOSOS fellow?
[03:00:36] <opalvaults[m]> Mezzano*
[03:00:49] <phoe> random-nick: nope, CLOSOS is a different thing
[03:00:53] <opalvaults[m]> Because that was in a paper I swear I link every 5 second
[03:00:54] <phoe> although the concepts are similar, obviously
[03:01:06] <phoe> CLOSOS is Robert Strandh's thing, he goes by beach around here
[03:01:14] <phoe> whereas mezzano is a project by froggey
[03:01:17] <opalvaults[m]> ah, gotcha.
[03:01:29] <random-nick> opalvaults[m]: no, Mezzano is froggey's personal project with some contributors you'll find in #mezzano
[03:02:04] <opalvaults[m]> okay well what was a configuration setting in Nyxt turned out to be a whole discussion and I thank everyone for teaching me a bunch of new things about common lisp
[03:02:08] <random-nick> mezzano differs a lot from CLOSOS if I recall the CLOSOS document correctly
[03:03:20] <random-nick> being single user, having a hierarchical filesystem, using a (concurrent ml like?) event abstraction for IO and being more of a traditional CL implementation than SICL
[03:03:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:03:52] <random-nick> well not only for IO but for all synchronisation
[03:04:34] <opalvaults[m]> I may have to spin Mezzano at some point. The CLOSOS paper was an incredible read, so to tinker with current implementations of Lispy OS's could be a cool rabbit-hole
[03:05:44] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[03:05:57] <opalvaults[m]> also, I've forked the UltraSpec project as its currrently unmaintained. Is it a worthwhile endeavor to fix the repository? Does anyone think it would gather community participation?
[03:07:08] <opalvaults[m]> I'm not aware of anything except the proprietary HyperSpec and the book ANSI Common Lisp that is used as reference for CL
[03:07:58] <opalvaults[m]> Someone here may enlighten me to projects that have already done so in the FLOSS-sphere.
[03:08:03] <random-nick> there's the well specified common lisp project which aims to clarify the spec
[03:08:27] <random-nick> you should also checkout the online lisp meeting video about the spec
[03:08:54] <opalvaults[m]> What is thie well specified common lisp project?
[03:11:12] <random-nick> Turning dpANS into new Specification Documents - Online Lisp Meeting #12, 17.12.2021 https://www.youtube.com/watch?v=aZn8dKmXbOw
[03:11:18] <random-nick> this is the video I was referring to
[03:11:39] <random-nick> https://github.com/s-expressionists/wscl
[03:15:15] <opalvaults[m]> I'm a little confused. The original UltraSpec used Tex documents and became a mess. I'm assuming as sthat meeting was really, really new that it's something that's already underway and about to be released.
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:53] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:20:20] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Remote host closed the connection)
[03:20:40] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[03:24:34] <phoe> ultraspec was done too happily and I burned out on it badly
[03:24:49] <phoe> scymtym's work has much better foundations than I did, thankfully
[03:26:49] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 256 seconds)
[03:28:53] <opalvaults[m]> ah phoe , i should have recognized the username
[03:30:45] <opalvaults[m]> I've had luck in automating the recreation of those documents into markdown, but I get the same impression of the dpANS project (although I would have done this in Markdown for ease of community contribution + the ease of translating markdown into PDF from sites such as readthedocs.io).
[03:31:26] <opalvaults[m]> ah well.
[03:31:36] <phoe> scymtym has a working TeX parser that outputs HTML, so it should be bendable to output markdown as well
[03:31:48] <opalvaults[m]> I appreciate the hard work you put into that. It was interesting going through the documents.
[03:32:30] <phoe> well, my work is a milestone in how not to approach working on projects like that
[03:32:36] <phoe> glad that you find it useful
[03:33:28] <opalvaults[m]> It was to be my attempt at teaching myself through re-implementing referential documentation. :P
[03:34:13] <opalvaults[m]> However honestly for one person, I imagine that there's no best way to approach something of that scope if you've never done so beforehand.
[03:34:38] <opalvaults[m]> It's bound to become implementation-spaghetti eventually.
[03:35:48] <opalvaults[m]> I found the same problems documenting security procedures at work. It becomes a constant battle to automate and implement and keep up to date (and find the time to do anything in between, or get anyone to agree on any scent of nebulous-ness)
[03:57:23] *** jealousm` is now known as jealousmonk
[03:58:46] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:01:33] *** Quits: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs) (Remote host closed the connection)
[04:01:47] *** Joins: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs)
[04:16:44] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:19:15] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:505:5669:c90d:82dc) (Ping timeout: 268 seconds)
[04:20:01] *** Quits: Catie (~user@user/catie) (Quit: Headed out, take it easy!)
[04:20:34] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[04:25:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:29:09] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:31:57] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[04:35:57] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:38:35] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:44:26] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[04:47:05] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:57:20] *** Joins: karlosz (~karlosz@70.158.101.183)
[05:13:17] <hobo> does anyone here have experience with croatoan whose brain I can pick real quick?
[05:13:27] <hobo> better yet, I'll just ask
[05:14:18] <hobo> is there a concept of having focus?
[05:14:50] <hobo> if I have to windows, how does croatoan know which window is receiving keyboard events?
[05:24:51] *** Quits: karlosz (~karlosz@70.158.101.183) (Quit: karlosz)
[05:26:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[05:27:04] *** Joins: Colt (~Colt@user/colt)
[05:28:30] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[05:29:31] *** Quits: ilmu (~ilmu@176.76.240.33) (Ping timeout: 245 seconds)
[05:38:02] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[05:41:26] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[05:43:43] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[05:43:47] *** Joins: ilmu (~ilmu@176.76.240.33)
[05:46:30] *** Joins: karlosz (~karlosz@70.158.101.183)
[05:57:50] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:01:53] *** Quits: karlosz (~karlosz@70.158.101.183) (Quit: karlosz)
[06:06:42] *** Joins: karlosz (~karlosz@70.158.101.183)
[06:11:07] *** Joins: taiju (~taiju@47.177.138.210.rev.vmobile.jp)
[06:39:07] *** Quits: karlosz (~karlosz@70.158.101.183) (Quit: karlosz)
[06:45:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:157f:fad:702e:d7a) (Ping timeout: 240 seconds)
[07:01:55] *** Quits: taiju (~taiju@47.177.138.210.rev.vmobile.jp) (Read error: Connection reset by peer)
[07:02:14] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[07:07:37] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:17:37] *** Quits: amb007 (~a_bakic@cable-94-189-187-246.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[07:17:47] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[07:20:14] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[07:20:32] <susam> Merry Christmas, #commonlisp!
[07:23:00] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 268 seconds)
[07:27:55] *** Joins: akoana (~ah@user/akoana)
[07:30:49] <beach> Good morning everyone!
[07:30:59] <beach> Thanks susam.  To you too.
[07:32:06] *** Joins: rogersm (~rogersm@90.166.180.250)
[07:34:29] *** Quits: rogersm_ (~rogersm@89.130.187.152) (Ping timeout: 252 seconds)
[07:50:46] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[07:51:25] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[07:52:25] *** Joins: ilmu1 (~ilmu@176.76.240.196)
[07:53:13] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:53:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[07:55:25] *** Quits: ilmu (~ilmu@176.76.240.33) (Ping timeout: 256 seconds)
[07:55:55] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:56:23] <opalvaults[m]> mornin' beach
[08:01:52] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400)
[08:02:47] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:06:29] *** Joins: semz (~none@user/semz)
[08:12:28] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[08:17:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:33:58] *** Joins: panji (~panji@114.4.82.252)
[08:39:26] *** Joins: alfonsox (~quassel@103.92.42.192)
[08:49:00] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[08:59:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:11:48] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Quit: ERC (IRC client for Emacs 27.1))
[09:22:38] *** Quits: stacksmith (~stack@ctrl-c.club) (Ping timeout: 268 seconds)
[09:45:55] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[09:46:22] *** Quits: jstoddard (~user@189.202.78.167.cable.dyn.cableonline.com.mx) (Quit: Goodnight)
[09:46:45] <hobo> merry christmas
[09:49:16] <beach> Thanks.  To you too.
[09:50:48] *** Joins: karlosz (~karlosz@136.56.98.53)
[09:55:35] *** Joins: stacksmith (~stack@ctrl-c.club)
[10:09:01] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Ping timeout: 250 seconds)
[10:10:37] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[10:13:21] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[10:16:13] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[10:19:47] *** ilmu1 is now known as ilmu
[10:48:04] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:16:00] *** Joins: shka (~herr@109.231.0.226)
[11:27:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2cf4:5f96:7154:f400) (Ping timeout: 240 seconds)
[11:42:25] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[11:44:36] <elderK> Merry Christmas all! :)
[11:45:34] <beach> Thanks elderK.  You too.
[11:45:36] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[11:46:22] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[11:46:59] <alfonsox> Merry Christmas all.
[11:48:43] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[11:50:02] <beach> Time to start thinking about Lisp-related new year's resolutions.
[11:54:25] <flip214> _death: thanks a lot!
[11:54:30] <flip214> [6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~
[11:54:43] <hayley> Perhaps a SICL image in 2022?
[11:54:55] <flip214> sorry, terminal hang?
[11:55:09] <hayley> Hopefully I'll get into the mood to work on Netfarm again, but I'm not expecting that right now.
[11:55:13] <beach> I won't make any such promises myself.
[11:56:50] <hayley> I have holiday time, and then a semester of part-time study, so I should be able to help out though.
[11:57:08] <beach> Great!
[12:05:37] <hayley> (That said, w.r.t Netfarm, for most of 2021 I felt like everyone wanted the opposite of what I was working on. Recently I had some success sharing around some articles I wrote, but those articles have nothing to do with Netfarm.)
[12:08:36] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[12:10:28] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:17:16] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[12:19:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:24:14] <hayley> Still lots of fun to be had in any case. A friend is slowly getting closer to specifying and implementing enough of a message-sending object-oriented object-capability language, and I've been tasked with working out how to make a metacircular implementation for it. But that is not Common Lisp related (and that's the point :)
[12:36:10] *** Joins: mingus (~jan-magnu@auth-146-189.anyconnect.uib.no)
[12:42:59] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[12:46:27] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[12:50:39] *** Quits: mingus (~jan-magnu@auth-146-189.anyconnect.uib.no) (Ping timeout: 256 seconds)
[12:57:31] *** Quits: panji (~panji@114.4.82.252) (Quit: Leaving.)
[13:01:09] *** Joins: nature (~nature@45.32.235.173)
[13:05:44] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e14b:a215:a2dd:c12d)
[13:15:06] *** Parts: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) ()
[13:29:31] *** Joins: mingus (~jan-magnu@auth-146-189.anyconnect.uib.no)
[13:39:03] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[13:50:42] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[13:53:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:53:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:54:58] *** Lord_of_Life_ is now known as Lord_of_Life
[14:12:12] *** Joins: heisig (~heisig@p508b541c.dip0.t-ipconnect.de)
[14:28:12] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[14:31:57] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Read error: Connection reset by peer)
[14:33:14] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[14:37:17] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[14:38:24] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[14:50:55] *** Joins: rito_ (~rito_gh@45.112.243.69)
[15:08:13] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e14b:a215:a2dd:c12d) (Remote host closed the connection)
[15:09:54] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:d472:ac88:c89:150f)
[15:15:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:22:13] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[15:41:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:47:44] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:49:27] *** Quits: loke (~loke@junk.nocrew.org) (Quit: ZNC - http://znc.in)
[15:50:55] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[15:51:15] *** Joins: loke (~loke@junk.nocrew.org)
[15:51:31] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[15:52:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:52:46] <lisp123> Merry Xmas All!
[15:53:34] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 260 seconds)
[15:58:28] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:02:13] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:05:45] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[16:06:47] <nij-> Is there anyway to let Climacs to read elisp and be augmented by packages written in elisp? The idea is that to attract more people temporarily, and gradually replace the packages by common lisp.
[16:07:37] <rotateq> to you too lisp123
[16:08:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:09:46] <lisp123> rotateq: Any plans for today?
[16:10:11] <lisp123> nij-: I was thinking something similar, but different - write an elisp emulator in CL and port Emacs
[16:10:30] <nij-> How would that work, in principle?
[16:11:51] <lisp123> Haven't really thought it through
[16:12:01] <nij-> E.g. some elisp package has effects on emacs buffer. So at least we need to coerce emacs buffer into climacs buffer?
[16:14:06] <lisp123> I was arguing with some people on r/Emacs but they noted that most of the more advanced elisp packages are already using a CL compatability layer
[16:14:22] <nij-> That's nice.
[16:14:30] <lisp123> So I wouldn't be suprised if there is an influx of package developers in the future
[16:14:31] <random-nick> nij-: I don't think that's very feasible, you'd have to emulate a lot of emacs internals for elisp packages to work
[16:15:45] <lisp123> IMO the wins will be from adding more backends to CLIM
[16:16:08] <nij-> lisp123: what does that mean, in more concrete form?
[16:16:13] <lisp123> Let all the big companies developer GUI, just need a comptability layer
[16:17:21] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[16:17:22] <lisp123> For example, I am working a general framework for GUIs in SwiftUI (Apple), and if you create the APIs on both sides, you can have Lisp programmers write in CLIM and then have it displayed in Swift for example
[16:18:21] <nij-> Yeah lets just focus on the end effect. It's a temporary solution, just to let people switch to climacs without pain.
[16:18:48] <lisp123> The #clim guys are doing much more - canvas backends among other things. Then dbotton is doing CLOG
[16:19:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[16:19:53] <beach> nij-: (first) Climacs is not good enough.  And Second Climacs is mainly meant to be excellent for editing Common Lisp code.
[16:20:04] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:20:21] <beach> nij-: Neither one can reasonably compete with Emacs in most other areas.
[16:21:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:21:43] <nij-> :(
[16:23:22] <beach> Emacs packages rely not only on the Emacs Lisp programming language, but a lot on the architecture of Emacs, so you would have to emulate that entire architecture, which would mean you no longer have (first) Climacs or Second Climacs, but Emacs rewritten in Common Lisp.
[16:24:50] <beach> I think it is a much better strategy to make Second Climacs irresistibly good for Common Lisp programming, and then count on the users to perhaps rewrite their favorite Emacs packages for Second Climacs over time.
[16:33:38] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:34:15] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[16:41:52] *** Joins: nature (~nature@45.32.235.173)
[16:53:46] *** Joins: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[16:56:23] *** Joins: treflip (~user@user/treflip)
[16:56:46] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Read error: Connection reset by peer)
[17:00:33] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:02:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:05:05] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 256 seconds)
[17:08:06] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:10:01] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[17:10:10] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Client Quit)
[17:12:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:16:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:18:45] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:19:13] <rotateq> no why do you ask? i cooked the meal recently, maybe working on something today, wee'll see. and you?
[17:22:56] <lisp123> rotateq: Not much, might go out for dinner in a bit.
[17:25:24] <rotateq> ah okay. i made "Leberkäse" today :D totally ontopic. not.
[17:25:33] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (#commonlisp)
[17:26:36] <lisp123> rotateq: Looks tasty :) Ok back ontopic
[17:31:17] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[17:31:55] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[17:36:04] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[17:38:34] *** Joins: BerntH (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com)
[17:45:13] *** Quits: rito_ (~rito_gh@45.112.243.69) (Quit: Leaving)
[17:45:41] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[17:50:23] *** Joins: Michal (~user@80.227.170.170)
[17:50:47] *** Michal is now known as Guest4615
[17:51:02] <Guest4615> HellO!
[17:51:09] <Guest4615> Merry Christmas Lispers!
[17:51:35] <rotateq> hell⍤
[17:51:46] <rotateq> and to you :)
[17:51:51] <Guest4615> :D
[17:53:27] <rotateq> and merry lispmas ^^
[17:53:40] <Guest4615> oh thats a good one :P
[17:53:58] *** Joins: notzmv (~zmv@user/notzmv)
[17:54:06] <rotateq> i learned it yesterday from here
[17:54:57] <Guest4615> Hey so I am trying to write my own "plus" fnc which can addd a variable number of numbers
[17:55:19] <rotateq> so with &REST
[17:55:22] <Guest4615> Is there a good way?
[17:55:37] <Guest4615> Somebody told me to use APPLY
[17:55:57] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[17:56:05] <rotateq> apply what then? #'+ ?
[17:56:34] <rotateq> you can do (reduce #'+ list) or (apply #'+ list)
[17:56:52] <Guest4615> ah maybe thats it
[17:56:56] <rotateq> reduce offers some additional options like a KEY keyword
[17:56:59] *** Joins: igemnace (~ian@user/igemnace)
[17:58:23] <Guest4615> woot. apply works
[17:58:31] <Guest4615> thanks man
[17:58:44] <rotateq> maybe better opic for #clschool :) we can meet there
[17:58:56] <rotateq> s/opic/topic
[17:59:12] <Guest4615> theres a clschool channel? so cool
[17:59:45] <rotateq> yes here's often discussion about some more "advanced" topics or questions that lead to this
[18:00:12] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Quit: Leaving)
[18:00:44] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[18:01:45] *** Guest4615 is now known as dave-from-the-k
[18:05:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:07:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:5d5c:8c41:79c4:9b80)
[18:11:22] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[18:13:29] <nij-> Steele's book "Common lisp, the language." feels easier to read than CLHS. However, I've heard that there's a difference between them, i.e. they do not specify the exact same language. Should I not read Steele, as many implementations are based on CLHS but not his book?
[18:14:08] <rotateq> yes and yes, if it helps you
[18:14:17] <rotateq> and better version 2 ;)
[18:15:18] <nij-> I'm not sure if it will mislead me, as it's not the "real SPEC"..
[18:16:44] <rotateq> no it's a very good additional resource imo
[18:17:14] <random-nick> cltl1 was released in 1980 and it was the starting point for the CL spec
[18:17:16] <lisp123> Yeah its an excellent resource, well recommended
[18:17:43] <random-nick> cltl2 was released during the standardisation process and not all of its changes ended up in the CL spec
[18:17:56] <random-nick> and not all CL spec changes made its way into cltl2
[18:18:18] <rotateq> and CLtL2 in 1990 :) even covers in the end a possible implementation for backquote, for which even Steele himself(!) claims that's it is all other than trivial
[18:19:25] <nij-> I'm not sure.. so which one is the real standard?
[18:19:29] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:19:34] <rotateq> *sigh*
[18:19:50] <nij-> .. that most implementations are based on. (e.g. sbcl, ccl, ecl.. etc.)
[18:20:01] <lisp123> https://mr.gy/ansi-common-lisp/ is a readable version of the draftr
[18:20:36] <lisp123> otherwise you can buy the official standard from ANSI or read the hyperspec http://www.lispworks.com/documentation/lw50/CLHS/Front/Contents.htm
[18:20:48] <rotateq> i prefer the PDF version
[18:20:57] <random-nick> apparently implementors usually consult the hyperspec
[18:21:03] <beach> nij-: The Common Lisp HyperSpec is mostly just a HTML rendering of the standard.
[18:21:16] <nij-> beach: which standard?
[18:21:19] <random-nick> the "real standard" is an ANSI document which is not freely available
[18:21:33] <beach> nij-: The ANSI standard.
[18:21:34] <random-nick> but I doubt many people use it or even have access to it
[18:21:42] <nij-> random-nick: How expensive is it?
[18:22:16] <beach> nij-: It will be just as hard to read as the Common Lisp HyperSpec.
[18:22:46] <random-nick> there's this page linked from the cliki about differences between cltl2 and the final standard http://web.archive.org/web/20130807175341/http://bc.tech.coop/cltl2-ansi.htm
[18:22:52] <nij-> If it's the real standard, I might not care. // Does the real standard also has some difference between CLHS?
[18:22:53] <random-nick> I don't know how accurate it is
[18:23:34] <random-nick> but the clhs is the defacto standard
[18:23:36] <beach> nij-: You won't notice the difference.  There are a few bugs in the Common Lisp HyperSpec, but not many and not very important.
[18:24:07] <random-nick> and the clhs is apparently a machine processed version of a draft of the real standard
[18:26:40] <beach> Right, but as scymtym's presentation for the online Lisp meeting showed, bugs were introduced in the translation process.
[18:29:05] <nij-> Interesting.
[18:29:17] <nij-> GASP.. "SBCL is a mostly-conforming implementation of the ANSI Common Lisp standard." Ok I guess that's life.
[18:29:40] <beach> What is your problem with that phrase?
[18:32:56] <pjb> They don't guarantee 100% conformity.
[18:34:25] <beach> nij-: It can be argued that 1. It is impossible to be entirely conforming because of (minor) bugs in the standard, and 2. It is not desirable to be entirely conforming because of some (silly) bugs in the standard.
[18:44:15] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[18:45:30] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f2:707e:1cd:7b46:437b:d0a2)
[18:49:00] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[18:49:10] <phoe> 3. it might be preferable to have e.g. unicode behavior rather than strict CL conformance with regard to lowercase-uppercase character mappings
[18:51:04] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[18:52:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:54:08] *** Joins: Bike (~Bike@71.69.170.70)
[18:54:08] *** ChanServ sets mode: +o Bike
[18:54:23] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[18:56:15] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[18:56:16] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[18:56:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:56:57] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[18:57:51] *** Quits: raeda (~raeda@74.215.109.33) (Ping timeout: 256 seconds)
[18:57:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:58:10] <rotateq> yeah and not of the kind of rude trying to argue "is this the best it can do?"
[19:03:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[19:03:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[19:04:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:11:02] <semz> Afaik all deviations of CLHS from the standard are also pretty obvious. prog1 and prog2 are clearly not intended to do the exact same thing.
[19:14:58] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Read error: Connection reset by peer)
[19:15:13] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[19:29:09] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[19:30:47] <nij-> I see. This makes me more comfortable to read Cltl2. Thanks :)
[19:32:50] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[19:33:52] <semz> There is also https://groups.google.com/g/comp.lang.lisp/c/LNWHPFfnCRA/m/hj0Cv9POmg4J for differences between CLTL2 and the standard.
[19:34:11] <semz> Oh oops, that was basically posted already.
[19:46:01] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 256 seconds)
[19:48:17] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[19:52:22] *** Joins: ilmu1 (~ilmu@176.76.243.206)
[19:55:17] *** Quits: ilmu (~ilmu@176.76.240.196) (Ping timeout: 240 seconds)
[19:58:18] *** Joins: JoshYoshi (~user@37.25.47.130)
[19:59:37] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 240 seconds)
[20:01:53] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[20:03:22] *** Joins: amk (~amk@109.255.169.126)
[20:07:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:08:18] *** Joins: raeda (~raeda@74.215.109.33)
[20:13:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:16:32] *** Quits: alfonsox (~quassel@103.92.42.192) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:16:50] <nij-> After this form (https://bpa.st/ENAQ), is it correct to say that USER is a class, but USER is also an instance of a (meta)class MITO:DAO-TABLE-CLASS?
[20:17:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[20:20:45] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[20:33:52] <beach> Yes.  All classes are instances of some metaclass.
[20:34:15] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[20:34:26] <rotateq> so even the metaclasses themselves :)
[20:34:35] <beach> nij-: You can try (class-of (find-class 'user)) after you evaluate that form.
[20:34:47] <beach> rotateq: Indeed.
[20:34:49] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10ef:581c:1cd:7b46:437b:d0a2)
[20:37:09] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[20:37:22] <rotateq> All looking at the ⊤ class.
[20:38:12] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f2:707e:1cd:7b46:437b:d0a2) (Ping timeout: 240 seconds)
[20:38:14] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[20:38:42] <beach> rotateq: What?
[20:39:08] <rotateq> beach: They all have ⊤ as superclass.
[20:39:54] <beach> Yes, but this was about finding metaclasses, not superclasses.  So if you continue the CLASS-OF application, you will end up with STANDARD-CLASS.
[20:39:54] <rotateq> (just to explain what I meant surely)
[20:40:03] <rotateq> yes right ok
[20:40:50] <rotateq> but I didn't see yet the :col-type slot keyword, maybe they changed the DEFCLASS macro
[20:40:58] *** Quits: raeda (~raeda@74.215.109.33) (Ping timeout: 268 seconds)
[20:41:10] <beach> The metaclass introduced it no doubt.
[20:41:27] <rotateq> ah ok makes sense :)
[20:41:38] <beach> It probably created a subclass of STANDARD-DIRECT-SLOT-DEFINITION.
[20:41:44] <beach> mop s-d-s-d
[20:41:45] <specbot> standard-direct-slot-definition: http://metamodular.com/CLOS-MOP/class-standard-direct-slot-definition.html
[20:42:08] <rotateq> I didn't get this far till now but good to know.
[20:50:08] *** Quits: ilmu1 (~ilmu@176.76.243.206) (Read error: No route to host)
[21:04:46] *** Joins: raeda (~raeda@74.215.109.33)
[21:13:08] *** Quits: rogersm (~rogersm@90.166.180.250) (Remote host closed the connection)
[21:34:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:34:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[21:39:47] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:41:37] *** Quits: raeda (~raeda@74.215.109.33) (Ping timeout: 256 seconds)
[21:45:30] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[21:49:57] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[21:52:38] *** Joins: Bike (~Bike@71.69.170.70)
[21:52:38] *** ChanServ sets mode: +o Bike
[22:02:08] *** Quits: treflip (~user@user/treflip) (Quit: bye)
[22:08:30] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[22:19:06] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[22:19:32] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10ef:581c:1cd:7b46:437b:d0a2) (Ping timeout: 240 seconds)
[22:54:50] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:20:35] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Excess Flood)
[23:23:26] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[23:38:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[23:39:27] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:46:32] *** Joins: raeda (~raeda@74.215.109.33)
[23:52:45] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 268 seconds)
[23:57:26] *** Joins: Everything (~Everythin@37.115.210.35)
