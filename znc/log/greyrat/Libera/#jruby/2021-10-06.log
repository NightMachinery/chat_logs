[00:00:02] <headius> it's still a lot of work for every object you want to DCI though
[00:00:18] <enebo[m]1> Semanitcally this breaks DCI if it really uses prepend
[00:00:23] <enebo[m]1> I have only seen people use it with includes
[00:00:38] <headius> yeah my stuff predates prepend so unsure what I would have to change
[00:00:46] <enebo[m]1> oh wait include probably does do the same thing
[00:00:55] <enebo[m]1> why wouldn't it
[00:01:09] <enebo[m]1> I just think about it as a prepend feature because I did some work with prepend recently
[00:01:13] <headius> it should be similar though... I just cache "FooDeltaXYZ" that does runtime extends (or prepends, presumably) of X Y and Z
[00:01:33] <headius> it just keeps those temporary bottom classes handy if we do the same sequence of module includes
[00:01:55] <headius> only works if you don't proceed to add one-off methods... but it can be zero-alloc for any number of simple extends or prepends
[00:02:01] <enebo[m]1> but if you include Delta and someone later decides to include something into Delta the original thing will suddenly have it
[00:02:10] <enebo[m]1> seems like it may make DCI confusing
[00:02:12] <headius> it becomes a new meta
[00:02:17] <headius> for my logic
[00:02:27] <headius> but yeah that is a possibility
[00:02:27] <enebo[m]1> I am just talking about 3.0 semantics
[00:02:35] <enebo[m]1> not opt at all
[00:02:49] <headius> ah yeah
[00:02:56] <enebo[m]1> in 3.0 all includes/precludes go everywhere 
[00:03:03] <headius> the 3.0 changes would have to be evaluated for my opt
[00:03:10] <enebo[m]1> which is weird for DCI if you use a module in different ways
[00:03:31] <headius> yeah hmm ðŸ¤”
[00:03:44] <headius> https://tonyarcieri.com/dci-in-ruby-is-completely-broken
[00:03:46] <headius> wow 2013
[00:04:01] <enebo[m]1> yeah ancient and I wonder if they still use it
[00:04:01] <headius> how long have we been working on this thing
[00:04:37] <enebo[m]1> one company loved it and wanted the world to see how nice it made things but didn't care about how well it ran
[00:04:43] <enebo[m]1> which maybe is fine :)
[00:05:03] <enebo[m]1> I guess it depends on how much you are doing it andwhether the slowdown matters
[00:05:39] <headius> large coarse-grained DCI might be fine but I think people started trying to use it for everything that had modules include
[00:06:09] <headius> and it would probably still be better to create the amalgamated class once as a wrapper anyway
[00:06:20] <enebo[m]1> they also started doing 'include MyModule.new'
[00:06:33] <headius> torturing the class hierarchy serves nobody
[00:06:37] <enebo[m]1> or dup...
[00:06:45] <enebo[m]1> I guess we don't instantiate modules :)
[00:07:05] <enebo[m]1> we had/have an issue around this where people would expect different cvars
[00:08:08] <headius> yeah
[00:08:18] <headius> and CRuby dupes the methods too
[00:08:27] <headius> pretty sure we still do not
[00:08:39] <enebo[m]1> hmm
[00:08:40] <headius> (or at least, it used to dup the methods too)
[00:09:32] <enebo[m]1>  originalModule.cloneMethods(this);
[00:09:53] <enebo[m]1> hmm this might be fixed
[00:10:22] <enebo[m]1> we call variables and constants sync but it looks like we putAll which perhaps means new table but same value
[00:25:49] <headius> woot
[00:25:59] <headius> yeah I dunno
[00:26:02] <headius> it has been years since I looked at it
[01:17:21] *** Joins: johnphillips3141 (~johnphill@2001:470:69fc:105::1:d36)
[01:29:30] <johnphillips3141> Is there any update on jruby issue 6872 (DST root CA expired)?  Trying to find a workaround
[01:36:55] <headius> johnphillips31416: hey I just got back to current issues today
[01:37:23] <headius> I am not sure about that one yet. kares has been doing most of the maintenance of jruby-openssl but he has been occupied with real job more lately
[01:37:38] <headius> if it is blocking you I can try to help look into it tomorrow
[01:37:56] <headius> it probably broke with the most recent jruby-openssl update
[01:42:20] <johnphillips3141> Thank you, will watch the ticket for updates
[06:29:11] <byteit101[m]> Oh, that's a fun few symbols in the method name: public void __super$__rubyobj__FormattedTableCellFactory_TableCell$updateItem/* $FF was: __super$=rubyobj,FormattedTableCellFactory_TableCell$updateItem*/
[06:29:59] <byteit101[m]> Sadly, I think the super dispatch needs a bit more work: org.jruby.exceptions.NoMethodError: (NoMethodError) super: no superclass method `updateItem' for #<FormattedTableCellFactory_TableCell:0x30c7be6f>
[06:29:59] <byteit101[m]> Did you mean?  updateItem
[06:48:37] *** Quits: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140) (Ping timeout: 265 seconds)
[06:48:37] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Ping timeout: 265 seconds)
[06:48:37] *** Quits: MatrixTravelerb4 (~voyagert2@2001:470:69fc:105::22) (Ping timeout: 265 seconds)
[06:55:51] *** Joins: MatrixTravelerb4 (~voyagert2@2001:470:69fc:105::22)
[07:05:28] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[07:06:07] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[09:24:11] <kares[m]> hey, just got back from time-off this week and bumped into the jruby-openssl issue.
[09:24:11] <kares[m]> have been working on it but it seems to require porting over the certificate verification from OpenSSL 1.1
[09:24:11] <kares[m]> while jruby-openssl has this code based on OpenSSL 1.0 so it's not that easy.
[09:25:31] <kares[m]> johnphillips31416: no eta for fix delivery atm but we should be smarter towards the end of the week (assuming I will have time to work in this today/tomorrow)
[09:25:55] <kares[m]> will commnent on the public issue once I know smt solid that hasn't been mentioned before ...
[10:19:57] *** Quits: satyanash (~satyanash@143.110.247.92) (Quit: kthnxbai)
[10:20:26] *** Joins: satyanash (~satyanash@143.110.247.92)
[18:07:23] <headius> kares: I looked at a cert expiration issue some years ago but was worried about trying to fix it... I will look for your comment and see if I can help
[18:08:04] <headius> we are going to need to spike some new openssl impl at some point because maintaining the Ruby lib as well as much of the crypto guts is not sustainable anymore
[18:08:31] <headius> byteit101: ha yeah I guess so
[18:13:24] <headius> woot pattern matching: 1 file, 87 examples, 112 expectations, 1 failure, 0 errors, 0 tagged
[18:13:33] <headius> enebo: the one failure is a spec just added, Pattern matching find pattern captures both preceding and following elements to the pattern FAILED
[18:14:26] <enebo[m]1> ok
[18:24:01] <headius> this is out of the main ruby/spec repo, we'll probably want to work from there while more 3.0 specs come in
[18:36:23] <kares[m]> headius: interesting, did not realize you were looking at the same issue.
[18:36:23] <kares[m]> yeah I am not sure about the jossl maintenance - raising concerns at Elastic (the bug impacted them) but as usual no expectations.
[18:36:33] <headius> it was quite a long time ago
[18:37:03] <kares[m]> locally I ported the logic over from OpenSSL 1.1 - it's ~ 80/20 finished, realized the feature is present in 1.0 so I will try to come up with a simpler patch instead (so we could ship a patch version soonish)
[18:37:09] <headius> I was trying to figure out the algorithm that allows openssl to substitute a newer cert for an older one but it scared me because I wasn't sure how it verifies they are equivalent
[18:37:27] <headius> an older expired or revoked cert that is
[18:37:42] <kares[m]> sounds like the same thing - there's a feature flag and logic at C OpenSSL so I will follow that ...
[18:37:57] <headius> ok let me know if there's anything I can help with then
[18:38:12] <headius> there are a other issues about the same thing
[19:05:13] <headius> enebo: it always amazes me that people actually use the installer, but I guess Windows users will be Windows users: https://github.com/jruby/jruby/issues/6849
[19:11:17] <klobuczek[m]> does anyone have a hint for me how I could use a maven project from source during development instead of just having a dependency on a jar in gemspec?
[19:14:12] <headius> like putting the project's target/classes in classpath?
[19:14:30] <klobuczek[m]> yes
[19:14:31] <headius> I have generally just added logic to build the jar but I can see why you would like to skip that step
[19:15:02] <headius> adding the classes to classpath and attempting to access them directly before trying the jar might work fine
[19:15:43] <headius> it is not something I have thought to try before ðŸ¤”
[19:23:26] *** Quits: subbu (~subbu@user/subbu) (Remote host closed the connection)
[19:23:54] *** Joins: subbu (~subbu@65-128-145-175.mpls.qwest.net)
[19:24:19] *** subbu is now known as Guest1760
[19:24:58] *** Quits: Guest1760 (~subbu@65-128-145-175.mpls.qwest.net) (Changing host)
[19:24:58] *** Joins: Guest1760 (~subbu@user/subbu)
[19:26:48] *** Guest1760 is now known as subbu
[19:30:50] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[19:31:04] *** Joins: subbu (~subbu@65-128-145-175.mpls.qwest.net)
[19:31:07] *** Quits: subbu (~subbu@65-128-145-175.mpls.qwest.net) (Changing host)
[19:31:07] *** Joins: subbu (~subbu@user/subbu)
[19:42:39] <enebo[m]1> headius: I think installer is simplest for windows since it does figure out some settings for you
[19:46:03] <headius> enebo: like what?
[19:46:21] <headius> I think I have a fix for the exit! thing
[19:46:36] <headius> mostly just moves the final exeption-handling and printing outside of the runtime teardown
[19:46:39] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[19:46:42] <headius> but it is a little scary
[19:46:52] *** Joins: subbu (~subbu@65-128-145-175.mpls.qwest.net)
[19:46:52] *** Quits: subbu (~subbu@65-128-145-175.mpls.qwest.net) (Changing host)
[19:46:52] *** Joins: subbu (~subbu@user/subbu)
[19:47:49] <enebo[m]1> It sets up jruby in the path.  It makes sure there is a valid JRE available.  It does the unpacking in a place which has execution 
[19:48:10] <enebo[m]1> in theory the last one would be people just putting it in Program Files
[19:48:17] <enebo[m]1> but it is one click
[19:48:54] <headius> sure, my point though is that after doing a one-click installer they will proceed to drop into a shell and use shell commands to work with JRuby anyway
[19:48:57] <headius> the PATH issue is hard to get around because Windows makes it hard
[19:49:23] <headius> there could be a cmd script in the zip that you run to set that stuff up
[19:49:26] <enebo[m]1> yeah I personally would use the installer over a tar or zip but just because I don't have to mess with the path at all
[19:49:28] *** Joins: subbu_ (~subbu@65-128-145-175.mpls.qwest.net)
[19:49:28] *** Quits: subbu_ (~subbu@65-128-145-175.mpls.qwest.net) (Changing host)
[19:49:28] *** Joins: subbu_ (~subbu@user/subbu)
[19:49:43] *** Quits: subbu_ (~subbu@user/subbu) (Remote host closed the connection)
[19:49:48] <headius> I get it though, Windows has its own way of making you do things and it is a CLI-hostile environment
[19:49:56] <enebo[m]1> win10 (probably 7+) did improve path management with per element listing in their dialogues
[19:49:56] <headius> it is just such a difference
[19:50:00] *** Quits: subbu (~subbu@user/subbu) (Client Quit)
[19:50:12] <headius> and more for us to maintain
[19:50:14] <enebo[m]1> but even then it is not fun for me
[19:50:19] *** Joins: subbu (~subbu@65-128-145-175.mpls.qwest.net)
[19:50:19] *** Quits: subbu (~subbu@65-128-145-175.mpls.qwest.net) (Changing host)
[19:50:19] *** Joins: subbu (~subbu@user/subbu)
[19:50:25] <enebo[m]1> yeah
[19:50:57] <enebo[m]1> It would be nice to not support as many things during release but I feel this is an expected item
[19:54:53] *** Quits: subbu (~subbu@user/subbu) (Client Quit)
[19:55:20] *** Joins: subbu (~subbu@user/subbu)
[19:57:21] *** Quits: subbu (~subbu@user/subbu) (Client Quit)
[19:57:48] *** Joins: subbu (~subbu@user/subbu)
[20:24:27] <johnphillips3141> Thank you kares 
[21:16:18] <headius> man the behaviors around at_exit are always bizarre
[21:34:48] <headius> enebo: at_exit thing seems to be fixed and all tags for Kernel#at_exit/exit! and Process.exit! are gone now
[21:34:53] <headius> https://github.com/jruby/jruby/pull/6879
[22:20:42] <enebo[m]1> sweet!
[22:26:21] <headius> hmm I need a rubgems staging server to work on this gem push thing
[22:28:05] <enebo[m]1> I was thinking maybe make a bogus gem OR if it really won't succeed just rev something with a README change
[22:28:27] <headius> yeah I am just worried about it succeeding
[22:28:39] <headius> I guess I could just push pre gems or a dummy gem and yank if necessary
[22:29:01] <headius> I don't want to take up some new namespace just for testing either
[22:29:46] <enebo[m]1> just use something no one will like authenticator
[22:30:18] <enebo[m]1> joking aside remember when I think drnic was recommending everyone fork gems and just prefix the name with their username?
[22:32:03] <headius> there was some automatic github thing that turned your repo into a gem automatically
