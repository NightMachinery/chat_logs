[00:17:03] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[00:35:52] *** Quits: mattil (~mattil@87-92-27-39.bb.dnainternet.fi) (Quit: Leaving)
[01:18:14] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:c4a6:ea1c:ad13:4c8) (Quit: Leaving)
[01:28:44] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:bcc3:6a10:af0:ae25)
[01:34:26] *** Quits: jo (~jo@ip4d14868c.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[01:34:45] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[01:47:35] *** Quits: bdju (~bard@user/bdju) (Read error: Connection reset by peer)
[01:48:06] *** Joins: bdju (~bard@user/bdju)
[02:04:27] <[Coke]> reverse test.
[02:05:00] *** Parts: glguy (x@libera/staff/glguy) ()
[02:05:25] <[Coke]> so, how does the discord bridge work? I sent something on #raku there a moment ago, and the last send before that is from Friday.
[02:07:08] <discord-raku-bot> <cokebot9000#9652> Oh, it works this way.
[02:07:25] <[Coke]> So, nevermind, I'm an idiot.
[02:31:08] *** Joins: moritz_ (~moritz@tina.perlgeek.de)
[02:33:10] * [Coke] got in the weekly for deleting several lines of documentation!
[02:33:26] * [Coke] will try to do something slightly more worthy this week.
[02:33:45] *** Quits: moritz (~moritz@tina.perlgeek.de) (Ping timeout: 276 seconds)
[02:42:31] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[02:44:10] *** Quits: gordonfish- (~gordonfis@user/gordonfish) (Ping timeout: 240 seconds)
[03:06:20] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[03:15:06] <lizmat> ++[Coke] 
[04:06:21] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:06:21] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:32:57] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:36:03] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:47:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:08:05] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[05:52:29] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[06:06:26] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[06:09:03] *** Joins: Sgeo (~Sgeo@user/sgeo)
[06:24:00] *** Joins: ameameFan (~ameameFan@210.0.158.37)
[06:24:07] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[06:33:35] *** Quits: ameameFan (~ameameFan@210.0.158.37) (Quit: Connection closed)
[06:38:11] *** Quits: jess (~jess@libera/staff/jess) (Quit: jumping servers)
[06:39:05] *** Joins: jess (~jess@libera/staff/jess)
[06:40:49] <[Coke]> submitted a trivial PR to Cro, that's something, anyway.
[06:56:24] *** Joins: ameameFan (~ameameFan@n220246124237.netvigator.com)
[07:07:51] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:51:03] *** Quits: jess (~jess@libera/staff/jess) ()
[07:54:29] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[08:08:24] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Quit: ZNC 1.7.5 - https://znc.in)
[08:18:28] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[08:42:43] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[09:10:30] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:11:08] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:25:58] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:27:30] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:35:41] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:35:59] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:30:09] *** Joins: frost (~frost@59.71.240.119)
[10:32:46] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:32:46] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:32:46] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:32:46] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:32:46] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:32:46] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:32:46] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:32:46] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:32:46] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:32:46] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:32:46] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[11:32:47] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:32:47] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:32:47] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:32:47] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:32:47] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:32:47] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:32:47] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:32:47] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[11:33:07] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[11:33:10] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[11:33:57] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[11:34:10] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[11:34:19] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[11:34:26] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[11:35:12] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[11:35:27] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[11:35:49] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[11:35:52] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[11:55:04] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[12:00:41] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 248 seconds)
[12:01:02] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[12:07:08] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 268 seconds)
[12:13:47] *** Joins: dakkar (~dakkar@host-87-5-114-102.retail.telecomitalia.it)
[12:16:31] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:17:03] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[12:34:01] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[12:34:05] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[12:34:22] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[13:02:59] * lizmat clickbaits https://rakudoweekly.blog/2021/08/16/2021-33-cucumbering/
[13:33:09] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[13:34:09] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[13:34:11] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[13:35:10] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[13:35:33] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[13:42:45] *** Quits: ameameFan (~ameameFan@n220246124237.netvigator.com) (Quit: Connection closed)
[13:52:26] *** Joins: jo (~jo@ip4d14868c.dynamic.kabel-deutschland.de)
[14:34:44] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:03:58] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Quit: WeeChat 2.8)
[15:37:30] *** Joins: thundergnat (~thundergn@50-235-6-134-static.hfc.comcastbusiness.net)
[15:38:44] <thundergnat> Is there a reason that concurrency is not enabled for .first? Or maybe I am just doing it wrong...
[15:39:02] <thundergnat> m: put (^‚àû).map(1 ~ *).race.map( -> \n { next unless [eq] (2,3,4,5,6).map: { (n √ó $_).comb.sort.join }; n } ).first; say now - INIT now;
[15:39:03] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´142857‚ê§0.549896505‚ê§¬ª
[15:39:14] <thundergnat> m: put (^‚àû).map(1 ~ *).map( -> \n { next unless [eq] (2,3,4,5,6).map: { (n √ó $_).comb.sort.join }; n } ).first; say now - INIT now;
[15:39:15] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´142857‚ê§0.753836408‚ê§¬ª
[15:39:26] <thundergnat> m: put (^‚àû).map(1 ~ *).race.first( -> \n { [eq] (2,3,4,5,6).map: { (n √ó $_).comb.sort.join } } ); say now - INIT now;
[15:39:27] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´142857‚ê§1.010666259‚ê§¬ª
[15:39:39] *** Joins: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:39:40] <thundergnat> m: put (^‚àû).map(1 ~ *).first( -> \n { [eq] (2,3,4,5,6).map: { (n √ó $_).comb.sort.join } } ); say now - INIT now;
[15:39:41] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´142857‚ê§0.775302808‚ê§¬ª
[15:40:47] <thundergnat> ^^ .map and .race.map are faster than both .first and .race.first 
[15:42:21] <thundergnat> And .race.first is significantly slower than bare .first. (I know, it depends on the load, but this calculation should be heavy enough to benefit from race.)
[15:44:14] <thundergnat> Or possibly I am just confused... I would certainly not be the first time. (probably not even the first time today üôÑ)
[15:44:55] <thundergnat> I can't stick around, but I read the logs regularly.
[15:45:01] *** Quits: thundergnat (~thundergn@50-235-6-134-static.hfc.comcastbusiness.net) (Quit: Connection closed)
[16:33:08] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:34:50] <kawaii_> Hello, I have a subroutine which returns some JSON data. I'd like to iterate over each pair in the data and run the amount through my stake-int-friendly routine so the number becomes human readable - but I can't really figure out how to break down the data for iteration. https://www.irccloud.com/pastebin/UW0o3sD9/
[16:35:00] <kawaii_> example data ^ https://www.irccloud.com/pastebin/veHjkNOA/
[16:41:20] <sena_kun> kawaii_, is that me or you are doing a loop on values and stake-int-friendly returns not a pair value, and then you try to initialize a hash with those not pair values?
[16:42:21] <sena_kun> maybe you mean something like...
[16:43:08] <sena_kun> my %stakes = stakers-info<>.map({ $_<delegator> => stake-int-friendly($_<amount>) })?
[16:43:28] <kawaii_> oh, hmm, this looks like it makes more sense, let me try it :)
[16:43:56] <sena_kun> I am really not sure desugaring (unpacking?) in signatures work this way as you probably intend it to.
[16:45:57] <kawaii_> sena_kun: thank you, this works perfectly :)
[16:46:40] <sena_kun> m: sub foo { @(%( a => '12001464284108570651140', d => 'rdx1' ),) }; my %hash = do for @(foo) -> $item { $item<d> => ($item<a> * 2) }; say %hash;
[16:46:40] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´{rdx1 => 24002928568217141302280}‚ê§¬ª
[16:46:47] <sena_kun> the call to .Hash is not necessary
[16:46:52] <sena_kun> yw
[16:53:25] <kawaii_> sena_kun: am I going about trying to iterate over this in a Cro template the wrong way? `<:sub input($_)><@stakes><.amount> : <.delegator></@></:>`
[16:53:41] <kawaii_> `template 'stakes.crotmp', format-stakes;`
[16:56:13] <sena_kun> kawaii_, your template assumes you are passing a hash with `stakes => ...`, but your `format-stakes` routine returns just a hash?
[16:56:38] <sena_kun> so you probably need something like `%( stakes => format-stakes() )`?
[16:57:53] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[16:58:34] <demostanis[m]> Wouldn't Raku with Rust macros be awesome?
[17:12:23] <lizmat> why not Raku with Raku macros ?  :-)
[17:12:49] <demostanis[m]> Raku macros seem less fun than Rust's
[17:14:01] <lizmat> in their current state: yes, I agree  :-)
[17:19:36] <leont> Yeah, it's waiting for RakuAST before it gets really interesting
[17:20:07] <demostanis[m]> What's RakuAST?
[17:20:40] <leont> A big refactor that's currently in progress on how code gets transformed into bytecode
[17:22:46] <dakkar> or, more relevant to macros, a way for macros to actually look inside their arguments and make sense of them, and also a way to generate code without splicing strings together
[17:23:47] <dakkar> demostanis[m]: https://www.youtube.com/watch?v=B5-gNKRw4gY&list=PL_OYHwbArcGgqbwXzxLBDMlaa0hr9A4c0&index=8 this video explains what it is, and the current status of the project
[17:44:41] <lizmat> demostanis[m]: recommended  :-)
[17:53:36] <MasterDuke> seconded
[17:56:16] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:04:49] *** Joins: codesections (2d10c979@67.205.143.82)
[18:11:43] *** Joins: jess (~jess@libera/staff/jess)
[18:13:44] <demostanis[m]> Ahh ok. I understand. It seems like a lot of work.
[18:14:07] <dakkar> yep
[18:14:13] <dakkar> but necessary
[18:27:08] *** Joins: jaguart (~jaguart@178.171.187.81.in-addr.arpa)
[18:34:41] *** Quits: jess (~jess@libera/staff/jess) ()
[18:34:53] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[18:50:11] <lizmat> thundergnat: there is no .first on hypers yet
[18:50:13] <tellable6> lizmat, I'll pass your message to thundergnat
[18:54:54] * leont still has to watch that presentation, but it's in front of their yt queue
[19:03:43] *** Joins: tib (~tib@146.ip-193-70-41.eu)
[19:04:56] * jdv is wondering if the mem leaking will change incidently by all the new big changes
[19:06:19] * lizmat has no doubt about that.  But if it will leak more or less, that's the question  :-)
[19:06:32] *** Joins: clarkema (~clarkema@adsl-5-198-42-142.karoo.kcom.com)
[19:10:15] <tib> Hello, I'm looking for a kind volunteer to proofread a long blog post (long = 22 minutes read according to devto) and report me mistakes (technical and english). Of course it's about raku :)
[19:11:06] <gfldex> I could read it. If that proofs anything, I don't know. :)
[19:11:12] <Altreus> I can do the grammar bit
[19:21:14] *** Joins: wingfold (~wingfold@173.38.117.79)
[19:21:14] <MasterDuke> jdv: any mem leaking in particular in mind?
[19:21:46] <frost> m:say DateTime.now
[19:21:47] <evalable6> frost, rakudo-moar 289a62f4a: OUTPUT: ¬´2021-08-17T16:51:47.136597+02:00‚ê§¬ª
[19:22:15] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[19:26:43] *** Joins: mattil (~mattil@78-27-110-179.bb.dnainternet.fi)
[19:28:32] <tib> thank you a lot gfldex and Altreus I'm already on it with lizmat :) :)
[19:30:35] <jdv> yes, the very same that mr lembark ran into
[19:30:43] <jdv> i can probably repro it these days - maybe i will
[19:31:04] <jdv> i think the prevailing guess was libuv buffers or soemething now that i think about it
[19:31:12] <Altreus> :)
[19:32:56] <MasterDuke> jdv: https://github.com/rakudo/rakudo/issues/3086 ?
[19:33:02] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[19:36:33] <jdv> hmm, i don't think so.
[19:36:53] <jdv> i'll try to golf it.  i'll be back in a few hours probably...
[19:39:01] <MasterDuke> cool
[19:42:57] *** Quits: jo (~jo@ip4d14868c.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[20:29:24] <pat_js> is there a syntax to match on hash keys?
[20:30:40] <Altreus> there's .keys.grep
[20:31:03] <pat_js> m: "!foo"~~/'!' [$({:1foo,:2bar}.keys)]/
[20:31:03] <camelia> rakudo-moar 289a62f4a: ( no output )
[20:31:46] <dakkar> m: say "a" ~~ %(a=>1)
[20:31:46] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´True‚ê§¬ª
[20:31:49] <dakkar> m: say "a" ~~ %(b=>1)
[20:31:49] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´False‚ê§¬ª
[20:32:01] <pat_js> Altreus: but I want it the other way around (full keys as part of a regex, not parts of keys described by regex)
[20:34:03] <Altreus> m: "!foo" ~~ any( $({:1foo,:2bar}.keys) ); # does any work?
[20:34:03] <camelia> rakudo-moar 289a62f4a: ( no output )
[20:34:10] <Altreus> o you'd have to map maybe
[20:34:31] <Altreus> m: "!foo" ~~ any( {:1foo,:2bar}.keys.map: / $_ / ); # maybe?
[20:34:32] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´No such method '!cursor_start' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª
[20:34:50] <Altreus> eh something like that
[20:35:06] <Altreus> I anticipate you're trying to inject it into an existing regex anyway
[20:35:14] <dakkar> m: my %a=(foo=>1, bar=>2); say "!foo" ~~ /@(%a.keys)/
[20:35:14] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´ÔΩ¢fooÔΩ£‚ê§¬ª
[20:35:27] <dakkar> like that?
[20:35:37] <pat_js> m: my %a=(foo=>1, bar=>2); say "!foo" ~~ /'!'@(%a.keys)/
[20:35:38] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´ÔΩ¢!fooÔΩ£‚ê§¬ª
[20:36:07] <pat_js> yeah! thank you dakkar! did not know about the @() inside of a regex
[20:36:24] <dakkar> pat_js: the `@(%a.keys)` in that case is expanded to something like `['foo'|'bar']`
[20:36:54] <Altreus> that's an intelligent DWIM
[20:36:56] <Altreus> I like that
[20:37:05] <dakkar> https://docs.raku.org/language/regexes#Quoted_lists_are_LTM_matches plus the "normal" way to cast something to a list
[20:37:48] <dakkar> https://docs.raku.org/language/regexes#Regex_interpolation oh, it's actually mentioned at the end of this section
[20:39:11] <Altreus> "the longest-match alternation"
[20:39:18] <pat_js> That's where I should have looked better‚Ä¶ thank you again
[20:39:52] <Altreus> m: my @increasingly-edible = <food foo fo f>; say 'food' ~~ /@increasingly-edible/; 
[20:39:52] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´ÔΩ¢foodÔΩ£‚ê§¬ª
[20:39:59] <dakkar> the documentation is *vast*, I knew something like that was documented but it still took me a while to find it!
[20:40:12] <Altreus> m: say 'food' ~~ /< food foo fo f >/
[20:40:12] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´ÔΩ¢foodÔΩ£‚ê§¬ª
[20:40:17] <Altreus> ah! order not important
[20:40:51] <dakkar> Altreus: yep, lists get interpreted as `|`-alternatives, that do longest-token-matching
[20:41:03] <dakkar> m: say 'food' ~~ /[f||fo||foo||food]/
[20:41:03] <camelia> rakudo-moar 289a62f4a: OUTPUT: ¬´ÔΩ¢fÔΩ£‚ê§¬ª
[20:41:14] <dakkar> `||` does left-to-right
[20:41:23] <Altreus> aha
[20:41:40] <dakkar> I don't think there's a way to have @-interpolations do `||`, though
[20:41:56] <Altreus> Where to draw the line between "relevant here" and "go and find that out", when writing docs, is difficult
[20:42:25] <Altreus> Personally I would have at least nb'd that there were | and || lists
[20:42:29] <Altreus> "lists"
[20:42:34] <Altreus> in regex
[20:42:37] <Altreus> alternations
[20:42:57] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:42:57] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:43:35] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[20:47:29] <Altreus> oh I just realised this section is part of the | doc :D
[21:06:42] *** Quits: dakkar (~dakkar@host-87-5-114-102.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[21:27:35] *** Quits: wingfold (~wingfold@173.38.117.79) (Quit: Ping timeout (120 seconds))
[21:41:08] *** Quits: b2gills (~brad@subscriber-dhcp-cgn-64-191-7-0.wcufiber.net) (Quit: Leaving.)
[21:41:20] *** Joins: b2gills (~brad@subscriber-dhcp-cgn-64-191-7-0.wcufiber.net)
[21:55:15] *** Quits: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[22:12:10] *** Joins: MoC (~moc@user/moc)
[22:33:16] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:34:20] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:40:07] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[22:44:24] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[22:57:36] *** Quits: xinming (~xinming@115.219.36.19) (Ping timeout: 272 seconds)
[22:57:58] *** Joins: xinming (~xinming@115.219.36.19)
[23:20:20] *** Quits: avuserow (~ak@205.178.97.166) (*.net *.split)
[23:20:20] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[23:20:30] *** Joins: avuserow (~ak@205.178.97.166)
[23:20:30] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[23:22:35] <mjgardner> New blog post on using Perl modules in Raku: https://phoenixtrap.com/2021/08/17/perl-raku-best-frenemies/
[23:24:15] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[23:29:27] <lizmat> mjgardner++
[23:42:54] *** Joins: neither (~neither@46.104.128.110)
[23:45:53] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
