[00:01:44] *** Joins: klltkr (~klltkr@2a00:23c5:d198:ad01:551a:5cf9:9daf:7c2f)
[00:05:45] *** Joins: mountolive (~mountoliv@188.240.132.112)
[00:10:35] *** Joins: src (~src@user/src)
[00:11:20] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[00:13:12] *** Quits: embik (~embik@user/embik) (Quit: WeeChat 3.2)
[00:17:42] *** Joins: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it)
[00:20:27] *** Quits: lidenbrock (~lidenbroc@2804:14c:32:8120:2ce6:6f22:c05d:e4cc) (Quit: Client closed)
[00:20:49] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[00:21:58] *** Joins: badri (~badri@user/badri)
[00:21:59] *** Quits: burningserenity_ (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1006.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:26:18] *** Quits: ausserz (~ausserz@user/ausserz) (Ping timeout: 272 seconds)
[00:27:50] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[00:28:28] *** Joins: noxim (~noxim@user/noxim)
[00:28:30] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[00:30:23] *** Quits: iliaf (~iliaf@user/iluxa) (*.net *.split)
[00:30:40] *** Joins: SebastianM (~seba@user/sebastianm)
[00:30:44] *** Joins: iliaf (~iliaf@user/iluxa)
[00:31:55] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[00:32:10] *** Quits: noxim (~noxim@user/noxim) (Client Quit)
[00:32:39] *** Joins: noxim (~noxim@user/noxim)
[00:33:00] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[00:35:23] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[00:36:15] <tuskkk____> Hello, what is the simplest way to find out if all elements from one slice exist in another one?
[00:37:51] *** Joins: hotRustDeveloper (~tomoe@user-5-173-33-7.play-internet.pl)
[00:40:40] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[00:40:45] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Remote host closed the connection)
[00:41:36] *** Parts: hotRustDeveloper (~tomoe@user-5-173-33-7.play-internet.pl) ()
[00:42:37] *** Joins: pepee (~user@user/pepee)
[00:44:34] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[00:47:57] <crowbar> tuskkk____: i'd probably put all the elements from one into a map[yourType]bool then iterate the second slice checking _, ok := m[e] and returning false if you find an element that isn't in the map.  but i'm relatively new to go and i'm sure someone will jump in to correct me.
[00:48:10] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[00:48:37] <KirkMcDonald> No, that's about right. Some might suggest a `map[T]struct{}` instead, because those values take no space.
[00:48:40] <lemmi> a better type for a set is map[T]struct{}.
[00:48:55] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[00:49:11] <tuskkk____> interesting, thanks, let me try this
[00:49:20] <crowbar> thanks for the struct{} tip  *fixes some code*
[00:49:33] *** Joins: noarb (~noarb@user/noarb)
[00:50:46] *** Joins: eight_byte (~eight_byt@2a02:8070:d3c0:c700:f8dc:606c:45db:d6d5)
[00:50:50] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Remote host closed the connection)
[00:52:04] <lemmi> with map[T]bool you potentially have 3 cases to consider: 1: key isn't in the map, 2. key is in the map and false, 3. key is in the map and true. using struct{} it's either in the map or not.
[00:52:28] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[00:52:50] <fizzie> IMO, either go with the map[T]bool and the nicer-looking membership test of `foo[x]` (relying on the zero value of bool to give you false when a key does not exist, or with the map[T]struct{} and it's more complex `if _, ok := foo[x]; ok { ... }` test, but don't mix them.
[00:54:42] <KirkMcDonald> map[T]bool isn't bad, if you can take it as an invariant that "key is present but false" will never be the case.
[00:54:43] <lemmi> you can wrap these things
[00:55:30] *** Joins: Ponyo (~steph@97-113-202-220.tukw.qwest.net)
[00:55:56] <FreeBDSM> https://tour.golang.org/flowcontrol/1  `The basic for loop has three components separated by semicolons: the init statement: executed before the first iteration ... The init statement will often be a short variable declaration, and the variables declared there are visible only in the scope of the for statement.` yet  `for var i := 0; i <10; i++ { sum += i }` one gets `syntax error: var declaration not allowed in for initializer`, wh
[00:55:56] <FreeBDSM> ich contradicts the docs.
[00:57:24] <KirkMcDonald> FreeBDSM: "Short variable declaration" refers specifically to the form `i := 0`, with no `var` keyword.
[00:57:50] <foobaz> if you don't like the look of "struct{}" with the map, you can do "type void struct{}"
[00:57:57] *** Joins: badri (~badri@user/badri)
[00:58:39] <FreeBDSM> KirkMcDonald: 'X will often be a short variable declaration' != 'X is a short variable declaration'
[00:59:12] <lemmi> var foo := ... has never been a thing in go
[00:59:23] <FreeBDSM> > The init statement will often be a short variable declaration, and the variables declared there < - how to declare 2 vars inside a for loop's init statement?
[00:59:25] <lemmi> it's either var foo =, or foo :=
[00:59:29] <KirkMcDonald> Yesh, `var foo := x` just isn't valid syntax.
[00:59:42] <lemmi> FreeBDSM: x,y := 1,2
[00:59:42] <KirkMcDonald> s/Yesh/Yeah/
[00:59:45] *** Quits: klltkr (~klltkr@2a00:23c5:d198:ad01:551a:5cf9:9daf:7c2f) (Ping timeout: 244 seconds)
[01:00:08] <FreeBDSM> KirkMcDonald: try it without `:` char and you'll get the same error
[01:00:12] <icholy> FreeBDSM: init statement != all possible statements
[01:00:27] <FreeBDSM> icholy: I never claimed the opposite
[01:00:58] <icholy> FreeBDSM: this is what's valid in the init statement https://golang.org/ref/spec#SimpleStmt
[01:00:59] *** Quits: Kane (~Kane@home.yarg.fr) (Quit: Leaving)
[01:00:59] <KirkMcDonald> FreeBDSM: If you want to pick apart the grammar, that clause is specified as `SimpleStmt`, which is not a production that includes `var` declarations.
[01:01:15] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[01:01:49] *** Joins: noxim (~noxim@user/noxim)
[01:02:27] <FreeBDSM> uh, not sure I understand
[01:02:48] <KirkMcDonald> FreeBDSM: It means you can't use `var` there.
[01:03:42] <FreeBDSM> the docs make 2 claims: 1. that USUALLY init statements in for loops are 'a short variable declaration'. Should I read it instead that they are ALWAYS so?
[01:03:52] <lemmi> it can be nothing
[01:04:05] <KirkMcDonald> FreeBDSM: They can also be some other sort of statement that is not any kind of variable declaration.
[01:04:13] <KirkMcDonald> Or nothing, yeah.
[01:04:13] *** Quits: eight_byte (~eight_byt@2a02:8070:d3c0:c700:f8dc:606c:45db:d6d5) (Quit: WeeChat 3.2)
[01:04:35] <lemmi> and as it often is with introductions, it's usually ok to be only 80% precise. if you want a 100% acurate statement, see the specification
[01:05:07] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[01:05:07] <FreeBDSM> got it, thanks. So to the 2nd statement: > The init statement will often be a short variable declaration, and the variables declared there ... < - how to declare 2 vars in 1 init statement of a for loop? or that's not possible?
[01:05:22] <KirkMcDonald> for i, j := whatever() {
[01:05:24] <KirkMcDonald> Er
[01:05:35] <KirkMcDonald> for i, j := whatever(); cond; increment {
[01:06:40] <FreeBDSM> lemmi: specification is written so that one needs some instructions first in order to be able to understand what one reads there...
[01:07:33] <FreeBDSM> KirkMcDonald: thanks for the answer, but looks like there's some extra catch. I tried `for i := 0, x := 123; i < 10; i++ { ... }` and got `syntax error: unexpected :=, expecting {`
[01:07:50] <KirkMcDonald> I probably wouldn't recommend learning Go from the spec if it is your first language, but if you're already familiar with some languages and generally know how programming languages are structured, it's actually a pretty good overview of what Go is about.
[01:08:21] <KirkMcDonald> FreeBDSM: There is a difference between `i := 0, x := 123` and `i, x := 0, 123`
[01:08:38] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[01:09:16] <FreeBDSM> KirkMcDonald: what is that difference? the latter form seems to give no errors.
[01:09:31] <KirkMcDonald> The difference is that the former is not valid syntax and the latter is.
[01:09:44] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[01:09:46] <FreeBDSM> okay, got it, thanks
[01:10:14] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[01:10:15] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[01:11:39] *** Joins: SebastianM (~seba@user/sebastianm)
[01:11:44] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[01:11:45] *** Joins: klltkr (~klltkr@2a00:23c5:d198:ad01:6cb9:709d:468e:d74b)
[01:12:44] <lemmi> FreeBDSM: exactly. but my point is, these tutorials exist so you can get going quickly. to not get entangled in technicalities they need to cut corners and be less exact statements. of course everybody prefers different levels of precision, so while this page might work for the majority of new gophers, it didn't for you. this is fine. there is also the effective go document which lives between the
[01:12:45] <lemmi> tour and the specification and clears a couple of things up that might have been glanced over before
[01:14:02] <lemmi> so.. they can't be 100% correct, or they would just be the spec repeated and that isn't useful as you said yourself
[01:14:58] <FreeBDSM> lemmi: I'm a bit confused, what do you refer to when you say 'there is also the effective go document which lives between the tour and the spec'?
[01:15:14] <LambdaComplex> FreeBDSM: https://golang.org/doc/effective_go
[01:15:23] <FreeBDSM> LambdaComplex: oh, thanks
[01:15:29] <LambdaComplex> more technical than the tour, less technical than the language spec
[01:15:33] <lemmi> https://golang.org/doc/effective_go
[01:15:50] <LambdaComplex> lemmi: gotta be faster than that
[01:15:51] <lemmi> hehe, pasted without looking first :)
[01:15:54] <LambdaComplex> :P
[01:16:18] <lemmi> finger movements were already locked in, no way to abort
[01:16:54] *** Joins: SebastianM (~seba@user/sebastianm)
[01:17:02] <FreeBDSM> that's because you didn't use interrupting goroutine :)
[01:17:04] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[01:17:36] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:18:51] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[01:19:19] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[01:21:41] *** Joins: ausserz (~ausserz@user/ausserz)
[01:21:50] *** Joins: vsantana_1 (~vsantana@2804:214:8174:f9ae:e49b:c945:7057:1e)
[01:23:24] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[01:25:16] <LambdaComplex> yeah, you need to rewrite that function to take a Context
[01:25:50] *** Quits: vsantana (~vsantana@fttx-17713614824.usr.predialnet.com.br) (Ping timeout: 272 seconds)
[01:26:31] <FreeBDSM> `import ( "fmt" "math") ; var x int = 5; fmt.Println(math.Pow(x))` produces an error about wrong type, how do people even work with suck packages..?
[01:26:44] <FreeBDSM> do they convert types all the time on the go?
[01:26:53] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[01:27:50] <lemmi> keep the same type throughout
[01:27:51] <FreeBDSM> math.Pow(x,2)
[01:28:19] <FreeBDSM> lemmi: same as what? I had an int in my script, but the package expects some other type
[01:28:26] <FreeBDSM> and thus I have a problem
[01:28:48] <lemmi> in your simple example you could just have used the correct typt for math.Pow to begin with
[01:28:50] <KirkMcDonald> Looking at the package documentation would be a start. https://golang.org/pkg/math/#Pow
[01:29:16] <FreeBDSM> lemmi: that's "opinionated" to assume what's "correct" type for MY script's variable.
[01:29:46] <KirkMcDonald> The type of math.Pow's parameters isn't much of an opinion.
[01:30:10] <lemmi> FreeBDSM: then you have to convert explicitly. but best perfomance and better code is usually achieved by having consistent types to begin with
[01:30:10] <ikke> FreeBDSM: have you worked before with strongly typed languages?
[01:30:17] <FreeBDSM> KirkMcDonald: the problem is not that I don't know what type it expects (the error clearly states that float64 is expected), the problem is that it potentially makes the usage of such a package uncomfy
[01:30:24] <LtHummus> Is there a better way to handle long tests? I have a suite of unit tests and i can run them with `go test` ... no problem. One of my tests is intentionally long running (takes about 3 minutes to run) and right now, the first thing it does is look for an environment variable `RUN_LONG_TESTS` to be set and if it's set, then it runs it, otherwise it
[01:30:24] <LtHummus> calls `t.Skip()`. Is there a better way? I'd really like to check for some flag passed to `go test` (e.g. something like `go test -long`) to run them.
[01:30:38] <FreeBDSM> ikke: nope. That's why so much butthurt.
[01:31:04] <ikke> there is no implicit conversion of types (with all the gotcha's that come from that)
[01:31:24] <ikke> It's a little bit less ergonomic, but usually less space for suttle bugs
[01:31:28] <lemmi> FreeBDSM: that error is a hard lesson learned from other languages.. automatic convertions can cause a lot of damage and are hard to catch
[01:31:31] <gwd> FreeBDSM: Coming from a C / OS background, and having been bitten many times by automatic type conversions, I appreciate golang's insistence that you make all such conversions explicit.
[01:31:56] <icholy> LtHummus: https://golang.org/pkg/testing/#Short
[01:32:31] <FreeBDSM> ikke: yeah, thus my question about common practice. Do people usually just 'cave in' to the types declared in the dependent package or are explicit type conversions a common practice?
[01:32:31] <LtHummus> oooooo that's what i get for searching for "long" instead of "short" :D
[01:32:42] <KirkMcDonald> FreeBDSM: It depends.
[01:32:58] <b0nn> LtHummus: Another option is to put long running tests into their own files, which can be excluded with build constraints (I think that includes go test)
[01:33:28] <lemmi> FreeBDSM: convertions aren't always avoidable. but if you can resolve that problem by choosing a type that fits all, that's the solution to go for.
[01:33:29] <ikke> FreeBDSM: math.Pow uses floats not without reason
[01:33:48] <LtHummus> hmmm, i like that idea too...i have a makefile and `make test` will run the tests, and i guess i'd like something like `make longtest` to run the long ones, but i suppose i could do that with the makefile anyway .... hmmm
[01:33:52] <LtHummus> thanks for the food for thought
[01:34:06] <FreeBDSM> gwd: I'd rather adopt Hungary notation for variable naming, lol
[01:34:30] <ikke> FreeBDSM: that it uses floats should already tell you something
[01:35:02] <gwd> FreeBDSM: Well the point is that in C, the compiler may change it from one type to another behind your back with unexpected side effects.
[01:35:08] <FreeBDSM> ikke: that package is written for solving a more general problem than I might use it to in my script. That tells me nothing.
[01:35:22] <b0nn> LtHummus: That means that you choose where to classify which tests get run - in the Makefile, or in the build tags
[01:35:37] <ikke> FreeBDSM: that's the general idea of packages / libraries, trying to solve a problem in a generic way
[01:35:45] <icholy> with generics + the type parameter switch, it will be possible to imrove the math package for work with more types
[01:35:51] <lemmi> FreeBDSM: maybe that package doesn't fit your problem then?
[01:35:51] <LtHummus> yup, right now i have something in my Makefile like `RUN_LONG_TESTS=true go test -v ./...`
[01:35:55] <ikke> FreeBDSM: they are not written for your exact usecase
[01:35:59] <LtHummus> just wondering if there was some other way to accomplish this
[01:36:32] <icholy> s/for/to/
[01:37:39] <FreeBDSM> gwd: I understand that. I meant that with proper debug lines (that output both var's name, var's value and data type) + Hungary notation (putting data type name in the var's name) that wouldn't be much of a problem. But I am not a real programmer, I only speak a few simple languages...
[01:38:00] <FreeBDSM> lemmi: clearly it does.
[01:38:16] <bpalmer> LtHummus: go test supports -a to pass arguments to the test binary
[01:38:40] <bpalmer> LtHummus: additionally, although I haven't tried, I think go test supports the -tag parameter for adding build constraints.
[01:38:47] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:38:52] <bpalmer> Neither seem particularly better than the environment approach.
[01:39:04] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[01:39:06] <LtHummus> yeah, i think i'm going to stick with envvars for now, but i appreciate all the answers :D
[01:39:45] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Client Quit)
[01:41:00] <FreeBDSM> ikke: I understand that. It just means that since my problem may be way narrower than the one, solved by a package - using the package the regular way may introduce some extra discomfort (the need to convert data types as in the example above). But, I guess, there's just nothing to do about it other than copy specific (& alter, if needed) a specific sub-set of functions from a package, but I like it even less than converting types when
[01:41:00] <FreeBDSM> needed when using packages...
[01:41:23] *** Quits: vsantana_1 (~vsantana@2804:214:8174:f9ae:e49b:c945:7057:1e) (Quit: Leaving)
[01:41:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:42:09] *** Quits: icholy (~icholy@68.71.18.45) (Quit: leaving)
[01:42:26] <FreeBDSM> I usually don't have programs that have heavy work with math and so I 'by default' try to avoid floats for their "1 is actually not 1, but 1.0000000000001" bullshit I can never remember
[01:43:19] *** Joins: noxim80 (~noxim@user/noxim)
[01:43:59] <FreeBDSM> usually, there's less such bullshit with 'double' data type, but Go doesn't have such one
[01:44:10] <gwd> flat64
[01:44:13] <gwd> *float64
[01:44:50] <seebs> uh
[01:44:50] <FreeBDSM> hm, right, they should be the same thing
[01:45:06] <FreeBDSM> disregard my point then
[01:45:10] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[01:45:18] <seebs> i would argue that double doesn't have less of that, it has exactly the same amount usually. but also float64 is probably fine i guess.
[01:46:00] <FreeBDSM> seebs: as you see, I'm in no position to argue, since the problem comes from my lack of remembering details / understanding the topic.
[01:46:03] <seebs> anyway, usually, it makes the most sense to use the package's types. there's a math32 package someone made which is a drop-in replacement for stdlib's math but uses float32, which is sometimes handy if you're doing GL.
[01:46:12] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 250 seconds)
[01:46:15] <seebs> i think it's github.com/chewxy/math32 or something
[01:47:10] <FreeBDSM> seebs: 36 stars, that's scary
[01:47:28] <FreeBDSM> but, thanks for the link nevertheless
[01:47:31] <seebs> i use it, i doubt i've starred it, but also it's very specialized and most people would have no reason to use it.
[01:47:47] <seebs> like, i'm the only person i know whose primary work isn't video games and who actually has a reason to care.
[01:48:21] <FreeBDSM> I'm probably with the most people in this case. As I said before - I usually don't solve problems that require more math than a simple multiplication or smth.
[01:48:29] <seebs> i would also almost certainly not use math to compute x^2.
[01:48:40] <seebs> if i want x^2, i write x*x, if i want 2^x, i write 1<<x.
[01:49:22] <ikke> and x^12?
[01:49:23] <FreeBDSM> yeah, that too, but it's usually rewarding to at least glance at those packages to learn what are the instruments available to you
[01:49:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Client Quit)
[01:49:30] <LambdaComplex> if you have something like a "status" field that's getting sent as json, is it better to have that be a string? or an integer that you assign a specific meaning to?
[01:50:07] <ikke> a string is self-documenting
[01:50:53] <bpalmer> but introduces a whole bunch of concerns (encoding, localization, canonicalization)
[01:51:05] <FreeBDSM> ikke: I'd claim that 99.95% problems solutions don't go over power of 2 (or rarely 3) in math equations, but I could never prove it.
[01:51:38] <LambdaComplex> i guess my concern at that point would be "does 'foo' equal 'FOO' equal 'Foo' etc"
[01:52:22] <FreeBDSM> explicitly format it, lol. Isn't this the go-way?
[01:52:35] <FreeBDSM> (go-way sounds like 'go away', lol)
[01:52:37] *** Quits: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it) (Remote host closed the connection)
[01:52:55] <bpalmer> I'd probably favor numeric codes barring any other situation, but it also depends on who's in control of the endpoints
[01:53:09] <seebs> yeah, depends a lot on the kind of status. if you're doing HTTP, i suggest the standard status forms.
[01:53:30] <FreeBDSM> This and #golang chans should redirect to #go-away, let's start a petition.
[01:53:34] <b0nn> foo always equals strings.ToLower("Foo") and strings.ToLower("fOo") etc
[01:53:45] *** Quits: noxim80 (~noxim@user/noxim) (Quit: Client closed)
[01:53:50] <bpalmer> unless you're dealing with unicode.
[01:55:14] <b0nn> hmm, not sure there. there's a unicode.ToLower(rune)
[01:55:56] <FreeBDSM> bpalmer: strings.ToUpper("ёй") gave me correct output
[01:56:42] *** Quits: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net) (Quit: WeeChat 3.0)
[01:56:52] *** Quits: acidfu (~nicolasbo@bras-base-ctldpq2802w-grc-08-184-148-247-52.dsl.bell.ca) (Ping timeout: 272 seconds)
[01:56:53] <b0nn> Although, forefront in my mind at the moment, is the problem of graphemes (which can be comprised of multiple runes)
[01:57:15] <b0nn> Which may be what bpalmer is referring to?
[01:58:20] <bpalmer> FreeBDSM: if you don't normalize unicode strings, two strings that look identical may not compare that way; if you don't control for locale, changing case may not lead to what you expect.
[01:58:57] <bpalmer> FreeBDSM: none of these are outrageous (you just have to be precise about what you're dealing with), but general strings introduce complexity
[01:59:39] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Remote host closed the connection)
[01:59:42] <bpalmer> ascii error messages from a fixed lexicon are, of course, playing on easy mode.
[02:00:01] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[02:00:16] <FreeBDSM> bpalmer: IMO that's correct behavior. H is not Н. `strings.ToLower("H") // h`, while `strings.ToLower("Н") // н`
[02:00:52] <FreeBDSM> just like "hello" != "нello"
[02:01:29] <bpalmer> FreeBDSM: There are two different ways to specify ё
[02:01:35] <seebs> there's more than two
[02:01:37] <seebs> i think
[02:01:52] <bpalmer> sure, I should say at least two, to be safe.
[02:02:46] <bpalmer> one is a unicode codepoint that is e umlaut; one is codepoint for e followed by codepoint of 'stick an umlaut on the thing before me'
[02:03:05] <bpalmer> or maybe diaresis rather than umlaut.
[02:03:39] <FreeBDSM> diaeresis
[02:04:19] *** Joins: kinduff4 (~kinduff@user/kinduff)
[02:04:37] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[02:04:37] *** kinduff4 is now known as kinduff
[02:05:49] <FreeBDSM> homoglyph - is one of two or more graphemes, characters, or glyphs with shapes that appear identical or very similar.
[02:06:02] <FreeBDSM> so there may be multiple ё
[02:06:49] <bpalmer> that still isn't what I was talking about , but ok.
[02:06:54] *** Joins: ari (~ari@vmi500470.contaboserver.net)
[02:07:24] <FreeBDSM> well I meant to add to what you said
[02:08:15] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[02:10:20] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.1)
[02:11:11] *** Quits: Torr (~Torr@user/torr) (Read error: Connection reset by peer)
[02:11:54] *** Joins: Torr (~Torr@user/torr)
[02:15:09] *** Joins: goldfish (~goldfish@user/goldfish)
[02:18:30] *** Quits: flommi (~flommi@puck942.startdedicated.de) (Ping timeout: 252 seconds)
[02:18:43] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[02:19:48] *** Parts: danielrparks (~quassel@2600:1700:3f7b:20f:d23a:b64:ae9a:9d66) (ctrl+w)
[02:19:55] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:20:33] *** Joins: Necoro (~Necoro@user/necoro)
[02:23:59] <FreeBDSM> !paste
[02:24:02] <FreeBDSM> ?paste
[02:24:43] <b0nn> here's no channel bot
[02:24:48] <b0nn> There's*
[02:24:59] <FreeBDSM> I figured.
[02:25:00] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 244 seconds)
[02:25:05] <b0nn> play.golang.org is the best place to share code
[02:25:55] <FreeBDSM> https://play.golang.org/p/L6-b20kmro4 why does it print 0 just once? AFAIU the condition should read as '1.0 - 0.0 < 0.1' and evaluate to false so a loop should iterate (looks like it doesn't)
[02:30:02] <b0nn> while z-result < 0.1
[02:30:11] <b0nn> it's never less than 0.1
[02:30:26] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (Remote host closed the connection)
[02:31:03] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[02:31:18] <FreeBDSM> b0nn: okay, why would the program exit then?
[02:31:26] <b0nn> huh?
[02:31:38] <FreeBDSM> 0  Program exited.
[02:32:01] <b0nn> ok, so you're going to need to understand for loops
[02:32:19] <b0nn> https://tour.golang.org/flowcontrol/1
[02:32:31] <FreeBDSM> :/
[02:33:19] <FreeBDSM> aw, damn, > The loop will stop iterating once the boolean condition evaluates to false.
[02:33:25] <FreeBDSM> to false, not to true
[02:33:29] <FreeBDSM> that's weird
[02:33:52] <b0nn> Well, not so much weird as you're not used to this style of loop because Python
[02:34:03] <b0nn> Which (IMO) is weird)
[02:34:34] <Lost> I was going to say, evaluate a for loop until false is AFAIK the norm
[02:35:22] <FreeBDSM> https://tour.golang.org/flowcontrol/3 For is Go's "while"
[02:35:23] <b0nn> It's the C style syntax, which is predominant
[02:35:31] <FreeBDSM> while true do; stuff ; done
[02:35:34] <foobaz> this style of for loop comes from C and it is weird and confusing but also concise and expressive
[02:35:51] <b0nn> FreeBDSM: yes, for can be used as while
[02:37:43] *** Quits: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[02:38:00] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[02:38:17] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 272 seconds)
[02:39:24] <FreeBDSM> I think I just got confused. It is not weird at all that while loop should stop when condition expression stops being evaluated to true at all
[02:47:47] <FreeBDSM> foobaz: I think you are accurate. At least about the former part.
[02:47:57] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[02:48:28] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca)
[02:51:42] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[02:57:56] <FreeBDSM> https://play.golang.org/p/90T5nqazdP7 jeezus how stupid I am that I don't get into the syntax at all...
[02:58:31] *** Joins: badri (~badri@user/badri)
[03:00:15] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 272 seconds)
[03:04:17] <FreeBDSM> could someone show a solution for https://tour.golang.org/flowcontrol/8 without infinite loops?
[03:04:46] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[03:05:45] *** Joins: mytec (~mytec@ip68-9-156-249.ri.ri.cox.net)
[03:06:57] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[03:07:20] <Tv_> FreeBDSM: look hard at your use of `result`
[03:07:34] <Tv_> what you're comparing ain't what you're displaying
[03:12:31] <b0nn> FreeBDSM: when you declare a variable inside a loop you do what's called "shadowing"
[03:12:48] <b0nn> so, you have two /different/ 'result' variables
[03:13:59] <b0nn> if you change line 10 of your paste to be a simple assignment (and NOT a new variable creation) you get what i think you are wanting
[03:15:52] <FreeBDSM> > The init statement will often be a short variable declaration, and the variables declared there are visible only in the scope of the for statement. < Other than that I don't see any mentions about the scopes for variables
[03:16:29] <b0nn> line 8 and line 10 of your post are two different ways top declare a variable
[03:16:51] <FreeBDSM> b0nn: afaiu like 10 is assignment, not declaration
[03:17:01] <b0nn> it's a declaration
[03:17:12] <b0nn> := is shorthand that can be used inside functions
[03:17:22] <b0nn> for variable declaration
[03:17:51] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:17:56] <FreeBDSM> ah, damn it. So should've just replaced := with = on line 10
[03:18:06] <FreeBDSM> thanks, I was starting to lose my sanity
[03:19:04] <b0nn> Allowing shadowing is something that irks me some - but it gets worse in other languages where you are allowed to shadow with a different /type/
[03:19:26] *** Joins: andlabs (~andlabs@68.237.68.71)
[03:20:05] <FreeBDSM> yeah, I expected either the use of the 'outer scope' var or having a warn/error
[03:20:35] <b0nn> There's a linter that will warn you that shadowing has occured
[03:20:42] <FreeBDSM> well, IMO loops should be like functions and end up with 'return'
[03:20:48] <b0nn> But, that isn't integrated into the playground
[03:24:11] <FreeBDSM> is there 'mod' math operation in Go?
[03:24:17] <b0nn> %
[03:24:29] <FreeBDSM> isn't that's modulus?
[03:24:39] <kn100> So I've got a design question ish. I've got some code which has a struct with various fields (let's call this a model). I then have another slice of structs where each struct has a name, which is a string, and a value, which is a float, for example). The second structs name strings match the first structs fields. Is there some way other than
[03:24:39] <kn100> manually mapping I can set the values in the model to the values from the second?
[03:24:40] <b0nn> sorry, what did you mean by "mod"
[03:24:50] <FreeBDSM> |1| = |-1| = 1
[03:24:54] <kn100> If a code example would help I'm happy to prepare one
[03:25:09] <b0nn> FreeBDSM: math.Abs
[03:25:14] <alb> FreeBDSM: math.Abs
[03:25:17] <b0nn> Absolute value
[03:25:38] <FreeBDSM> func Abs(x float64) float64 {     13  	return Float64frombits(Float64bits(x) &^ (1 << 63))     14  }
[03:25:40] <FreeBDSM> jeez
[03:26:00] <FreeBDSM> func Abs(x float64) float64 { return Float64frombits(Float64bits(x) &^ (1 << 63)) }
[03:26:16] *** Quits: jolof (~jolof@user/jolof) (Quit: leaving)
[03:26:25] <b0nn> All that is doing is changing the sign bit to positive if it's negative
[03:26:43] <alb> FreeBDSM: in english people often refer to the | |  as "absolute value", and "modulo" is the remainder after a division
[03:27:05] <FreeBDSM> alb: thanks, didn't know that
[03:27:48] <alb> FreeBDSM: no worries, it was also confusing to me at first
[03:28:38] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[03:29:03] <FreeBDSM> I thought 'modulus' is pretty common / widely used
[03:29:37] *** Joins: oxum (~oxum@106.201.113.95)
[03:29:38] <Tv_> FreeBDSM: your use is #2 on https://en.wikipedia.org/wiki/Modulus#Mathematics
[03:30:05] <FreeBDSM> https://en.wikipedia.org/wiki/Absolute_value and here too
[03:30:22] <alb> FreeBDSM: I'll let the native english speakers answer that. But in programming, "mod" or "modulus" almost always refers to the remainder of a division (https://en.wikipedia.org/wiki/Modulo_operation)
[03:30:36] <FreeBDSM> modulus != modulo
[03:31:18] <FreeBDSM> modulo is remainder when dividing, and yes, 'mod usually means that too
[03:31:20] <Tv_> both are called modulus
[03:31:26] <Tv_> https://en.wikipedia.org/wiki/Modulus_(modular_arithmetic)
[03:31:28] *** Quits: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[03:32:00] <Tv_> but yes the computer use is typically modulo, but it is abbreviated as mod, which is what you said
[03:32:10] *** Joins: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net)
[03:34:24] *** Quits: dolmen (~X@91.206.7.93.rev.sfr.net) (Ping timeout: 272 seconds)
[03:39:32] *** Joins: opaulo (~ff@185.153.176.56)
[03:43:05] <seebs> i'm confused, i've never seen the abs thing called mod before.
[03:43:31] *** Joins: Snyp (~rksht@49.207.218.69)
[03:43:47] <FreeBDSM> well, module / modulus, not mod
[03:43:51] <seebs> kn100: not really, although you can sort of fake it up with some reflect.value/reflect.type thing.
[03:44:02] <Tv_> seebs: 1806...
[03:44:13] <seebs> yeah, but i've never seen it called any of those. modulus/mod are the same thing, and are remainder-after-division approximately.
[03:45:07] <seebs> there's some ambiguity when negative numbers are involved, as i recall.
[03:45:15] <Tv_> math is a hot mess of notation and terminology with everyone trying to use the same squiggles and short words
[03:45:15] <seebs> but i've never seen anyone use any of those terms for absolute value.
[03:45:19] <seebs> yeah
[03:45:28] <Tv_> what isn't crazy-abbreviated is named after a person and you just have to remember it
[03:45:40] * Tv_ wants math taught with programming language style syntax
[03:45:48] <FreeBDSM> and in 63% of cases that person is Euler
[03:47:10] <FreeBDSM> IMO, 'distance-from-zero' would leave no place for any confusion
[03:50:55] <alb> seebs: at least in spanish, "modulo" is what you call absolute value in english, and "resto" is what you call the remainder of a division
[03:50:55] *** Joins: tg (~tg@rockylinux/infra/tg)
[03:51:16] <seebs> human language was a mistake
[03:51:27] <seebs> that's a brutal false cognate
[03:52:44] *** Quits: Necoro (~Necoro@user/necoro) (Quit: WeeChat 3.1)
[03:54:07] <Tv_> not as brutal as pollution in Swedish
[03:55:08] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:57:49] *** Joins: eck0__ (~Android@047-007-119-133.res.spectrum.com)
[03:59:25] *** Joins: eck0___ (~Android@mobile-166-173-62-183.mycingular.net)
[04:00:04] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 244 seconds)
[04:01:04] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[04:02:08] *** Quits: eck0__ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 244 seconds)
[04:05:55] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:16:36] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 244 seconds)
[04:20:55] *** Joins: tomzx_ (~tomzx@ivysaur.umbreon.net)
[04:26:01] *** Parts: tomzx_ (~tomzx@ivysaur.umbreon.net) ()
[04:30:33] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[04:30:54] *** Joins: hentai (~hentai@user/hentai)
[04:30:58] *** Joins: Teckla (~Teckla@user/teckla)
[04:32:51] *** Quits: Teckla (~Teckla@user/teckla) (Client Quit)
[04:34:01] *** Joins: Teckla (~Teckla@user/teckla)
[04:35:33] *** Quits: tg (~tg@rockylinux/infra/tg) (Remote host closed the connection)
[04:37:24] *** Quits: eck0___ (~Android@mobile-166-173-62-183.mycingular.net) (Read error: Connection reset by peer)
[04:37:54] *** Joins: eck0 (~Android@071-008-102-118.res.spectrum.com)
[04:37:55] *** Quits: Snyp (~rksht@49.207.218.69) (Quit: WeeChat 3.1)
[04:38:54] *** hentai is now known as ^]
[04:39:02] *** ^] is now known as hentai
[04:39:47] *** Quits: hentai (~hentai@user/hentai) (Quit: Leaving)
[04:41:21] *** Joins: eck0__ (~Android@mobile-166-173-62-183.mycingular.net)
[04:41:58] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[04:45:18] *** Quits: eck0 (~Android@071-008-102-118.res.spectrum.com) (Ping timeout: 264 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:34] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Read error: Connection reset by peer)
[04:50:00] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[04:50:16] *** Joins: acidfu (~nicolasbo@24.114.98.218)
[04:50:37] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:52:06] *** Joins: andlabs (~andlabs@68.237.68.71)
[04:53:43] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[04:55:19] *** Quits: eck0__ (~Android@mobile-166-173-62-183.mycingular.net) (Read error: Connection reset by peer)
[04:55:41] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[04:57:13] *** Quits: acidfu (~nicolasbo@24.114.98.218) (Ping timeout: 244 seconds)
[04:57:57] *** Joins: badri (~badri@user/badri)
[05:01:20] *** welt_ is now known as welt
[05:01:34] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[05:01:54] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:03:14] *** Joins: andlabs (~andlabs@68.237.68.71)
[05:04:17] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[05:04:28] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[05:04:30] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 264 seconds)
[05:11:13] *** Joins: eck0__ (~Android@047-007-119-133.res.spectrum.com)
[05:13:09] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:13:26] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 244 seconds)
[05:13:26] *** Quits: klltkr (~klltkr@2a00:23c5:d198:ad01:6cb9:709d:468e:d74b) (Ping timeout: 244 seconds)
[05:14:28] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 272 seconds)
[05:17:18] *** Joins: klltkr (~klltkr@2a00:23c5:d198:ad01:6cb9:709d:468e:d74b)
[05:17:45] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[05:23:22] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[05:25:51] *** Joins: Guest2064 (~hentai@2a01:e0a:a5c:a070:fea1:e9b9:7a0f:3d0b)
[05:25:51] *** Quits: Guest2064 (~hentai@2a01:e0a:a5c:a070:fea1:e9b9:7a0f:3d0b) (Changing host)
[05:25:51] *** Joins: Guest2064 (~hentai@user/hentai)
[05:26:32] *** Guest2064 is now known as hentai
[05:28:21] *** Joins: badri (~badri@user/badri)
[05:29:32] *** Quits: hentai (~hentai@user/hentai) (Client Quit)
[05:36:29] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 244 seconds)
[05:37:46] *** Joins: acidfu (~nicolasbo@24.114.93.138)
[05:42:30] *** Quits: xav (~quassel@103-96-86-209.novaconnect.nz) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:42:56] *** Joins: dmang (~dmang@047-032-148-170.res.spectrum.com)
[05:43:20] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[05:44:17] *** Quits: id (hi@hellomouse/dev/cryb.jeda) (Ping timeout: 252 seconds)
[05:53:30] *** purpleid1a is now known as purpleidea
[05:56:10] *** Quits: mytec (~mytec@ip68-9-156-249.ri.ri.cox.net) (Quit: Textual IRC Client: www.textualapp.com)
[05:58:31] *** Joins: badri (~badri@user/badri)
[06:00:02] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[06:04:33] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[06:05:46] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:09:21] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[06:13:03] *** Joins: badri (~badri@user/badri)
[06:16:04] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[06:19:32] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Client Quit)
[06:19:52] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[06:30:54] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:405e:abf3:ad8d:dbcb) (Ping timeout: 264 seconds)
[06:31:37] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:bcd8:f704:fbfd:98b7)
[06:39:57] *** Quits: Guest9 (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:41:35] *** Quits: logarus (~logarus@110.140.4.230) (Ping timeout: 244 seconds)
[06:41:36] *** Joins: logarus1 (~logarus@2001:8004:1d60:82a0:fc19:6bd2:ed16:1c0d)
[06:47:39] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:48:01] *** Joins: logarus2 (~logarus@2001:8003:4d47:a500:fc19:6bd2:ed16:1c0d)
[06:51:02] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[06:51:34] *** Quits: logarus1 (~logarus@2001:8004:1d60:82a0:fc19:6bd2:ed16:1c0d) (Ping timeout: 256 seconds)
[06:51:44] *** Joins: kulak (~kulak@user/kulak)
[07:00:20] *** Quits: klltkr (~klltkr@2a00:23c5:d198:ad01:6cb9:709d:468e:d74b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:02:29] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[07:03:25] *** Joins: kulak (~kulak@user/kulak)
[07:06:04] *** Quits: badri (~badri@user/badri) (Ping timeout: 244 seconds)
[07:07:08] *** Joins: badri (~badri@user/badri)
[07:26:12] *** Quits: src (~src@user/src) (Ping timeout: 272 seconds)
[07:39:50] *** Xu_R is now known as XuMatrix
[07:39:53] *** XuMatrix is now known as Xu_R
[07:40:56] *** Joins: parnikkapore (~parnikkap@user/parnikkapore)
[07:44:34] *** Quits: acidfu (~nicolasbo@24.114.93.138) (Ping timeout: 272 seconds)
[07:46:17] *** Joins: joshbaptiste (~junya@2001:470:1f07:4d5:24::c2b5)
[07:46:27] *** Joins: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[07:47:28] *** Joins: NoName (~idk@8.20.126.58)
[07:47:47] *** Quits: joshbaptiste (~junya@2001:470:1f07:4d5:24::c2b5) (Client Quit)
[07:49:09] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[07:57:15] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[07:58:15] *** Quits: opaulo (~ff@185.153.176.56) (Ping timeout: 244 seconds)
[07:58:25] *** Joins: badri (~badri@user/badri)
[07:58:34] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[07:58:58] *** Joins: badri (~badri@user/badri)
[07:59:25] *** Joins: icebattle (~wayne@S010600fc8ddfd2b3.vc.shawcable.net)
[08:04:18] *** Quits: ac5tin (~ac5tin@user/ac5tin) (Quit: WeeChat 3.1)
[08:05:22] *** Joins: src (~src@user/src)
[08:10:46] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[08:11:38] *** Joins: kulak (~kulak@user/kulak)
[08:19:10] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:20:30] *** Joins: andlabs (~andlabs@68.237.68.71)
[08:27:04] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Remote host closed the connection)
[08:27:29] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:28:04] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:8531:9d10:e5a1:a7e0)
[08:31:28] *** Joins: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de)
[08:34:25] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 244 seconds)
[08:45:42] *** Quits: mikeputnam (~mikeputna@wilug/mikeputnam) (Ping timeout: 252 seconds)
[08:46:15] *** Quits: zanshin (~zanshin@user/zanshin) (Ping timeout: 252 seconds)
[08:47:03] *** Joins: zanshin (~zanshin@user/zanshin)
[08:47:12] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[08:49:33] *** Joins: mambang (~mambang@user/mambang)
[08:51:31] *** Joins: ac5tin (~ac5tin@user/ac5tin)
[08:52:32] *** Parts: sweb (~sweb@static.187.181.76.144.clients.your-server.de) ()
[08:55:39] *** Joins: mdel (~mdel@user/mdel)
[08:59:15] *** Quits: dmang (~dmang@047-032-148-170.res.spectrum.com) (Changing host)
[08:59:15] *** Joins: dmang (~dmang@user/dmang)
[09:00:39] *** Quits: dmang (~dmang@user/dmang) (Quit: Leaving)
[09:00:53] *** Joins: dmang (~dmang@047-032-148-170.res.spectrum.com)
[09:01:47] *** Quits: dmang (~dmang@047-032-148-170.res.spectrum.com) (Changing host)
[09:01:47] *** Joins: dmang (~dmang@user/dmang)
[09:04:34] *** Joins: SebastianM (~seba@user/sebastianm)
[09:04:41] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[09:18:48] *** Quits: souvik_ (~souvik@103.199.182.142) (Quit: Lost terminal)
[09:28:51] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[09:29:11] *** Quits: NoName (~idk@8.20.126.58) (Ping timeout: 244 seconds)
[09:37:56] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[09:40:59] *** Joins: arcanez (~arcanez@warpedreality.org)
[09:42:58] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[09:44:14] *** Joins: badri (~badri@user/badri)
[09:45:35] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[09:45:44] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[09:45:46] *** Joins: arcanez (~arcanez@warpedreality.org)
[09:47:45] *** Quits: dmang (~dmang@user/dmang) (Quit: Leaving)
[09:47:59] *** Joins: dmang (~dmang@047-032-148-170.res.spectrum.com)
[09:48:25] *** Quits: dmang (~dmang@047-032-148-170.res.spectrum.com) (Changing host)
[09:48:25] *** Joins: dmang (~dmang@user/dmang)
[09:50:06] *** Quits: badri (~badri@user/badri) (Read error: Connection reset by peer)
[09:50:30] *** Joins: badri (~badri@user/badri)
[09:51:44] *** Joins: chasmo77 (~chas77@71.63.241.168)
[09:54:41] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:56:10] *** Quits: badri (~badri@user/badri) (Read error: Connection reset by peer)
[09:56:21] *** Joins: chanceyan (~chanceyan@user/chanceyan)
[09:56:30] *** Joins: badri (~badri@user/badri)
[09:56:45] *** Quits: badri (~badri@user/badri) (Read error: Connection reset by peer)
[09:56:59] *** Joins: badri (~badri@user/badri)
[09:57:49] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[10:00:12] *** Quits: badri (~badri@user/badri) (Read error: Connection reset by peer)
[10:00:17] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[10:03:39] *** Quits: parnikkapore (~parnikkap@user/parnikkapore) (Remote host closed the connection)
[10:04:03] *** jiqiren2345 is now known as jiqiren
[10:04:55] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:05:21] *** Joins: jda (~jadra@chai.0xbad.coffee)
[10:05:31] *** Joins: badri (~badri@user/badri)
[10:05:50] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[10:07:11] *** Joins: andlabs (~andlabs@68.237.68.71)
[10:07:41] *** Quits: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com) (Quit: ZNC - https://znc.in)
[10:07:56] *** Joins: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[10:09:49] *** Quits: badri (~badri@user/badri) (Read error: Connection reset by peer)
[10:10:54] *** Joins: chasmo77 (~chas77@71.63.241.168)
[10:12:30] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[10:12:49] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[10:18:25] *** krthnz_ is now known as krthnz
[10:19:36] *** Quits: jiqiren (~jiqiren12@oh-hi.org) (Quit: leaving)
[10:20:34] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[10:20:49] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[10:21:02] *** Quits: jiqiren (~jiqiren@oh-hi.org) (Client Quit)
[10:21:35] *** Joins: Vukan (~drazen@46.235.100.178)
[10:21:43] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[10:23:19] *** Joins: jcajka_ (~jcajka@static-84-42-180-92.net.upcbroadband.cz)
[10:23:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[10:27:09] *** Joins: oxum (~oxum@106.201.113.95)
[10:31:42] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 244 seconds)
[10:43:01] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[10:43:53] *** Joins: masoudd_ (~masoudd@user/masoudd)
[10:45:20] *** Quits: chanceyan (~chanceyan@user/chanceyan) (Quit: WeeChat 3.2)
[10:50:13] <Cork> is there a sain way to get a uniq identifier (preferably a string) from an interface?
[10:50:39] <Cork> i need to stor a variable amount of ssh.Channel interfaces and be able to reference them later
[10:50:56] <Cork> (for adding and removing from the list)
[10:53:51] *** Joins: shka (~herr@109.231.62.239)
[10:58:00] *** Quits: masoudd_ (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[10:58:09] *** Joins: badri (~badri@user/badri)
[10:59:32] <rk4> sometimes pointers can serve as unique identifiers,
[11:01:22] <Cork> so one would use map[int64]ssh.channel you mean?
[11:01:24] <b0nn> yeah if reflect.TypeOf(yourInterface).Kind() is reflect.Ptr you might be able to grab the address and use it (directly or as a string)
[11:01:56] <Cork> nice, thx!
[11:02:43] *** Quits: mambang (~mambang@user/mambang) (Quit: Leaving)
[11:04:10] <KirkMcDonald> It might be possible to just use the interface values directly.
[11:04:14] *** Joins: dyslexicat (~dyslexica@176.234.11.153)
[11:04:20] *** imm__ is now known as imm_
[11:04:23] <KirkMcDonald> Depending.
[11:04:33] *** Joins: mrig (~mrig@user/mrig)
[11:08:57] *** Joins: ahmet (~ahmet@c-174-61-165-124.hsd1.wa.comcast.net)
[11:09:29] *** Quits: ahmet (~ahmet@c-174-61-165-124.hsd1.wa.comcast.net) (Client Quit)
[11:12:04] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[11:13:29] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:13:30] *** Joins: kulak (~kulak@user/kulak)
[11:13:52] *** Joins: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it)
[11:14:12] *** Quits: Vukan (~drazen@46.235.100.178) (Ping timeout: 272 seconds)
[11:15:49] *** Joins: arinov (~arinov@213.194.126.155)
[11:18:42] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[11:18:56] *** Joins: arinov (~arinov@213.194.126.155)
[11:20:03] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[11:20:29] *** Quits: fishgod_ (~evan@user/fishgod) (Quit: WeeChat 3.1)
[11:21:31] *** Parts: dyslexicat (~dyslexica@176.234.11.153) ()
[11:21:42] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[11:22:34] *** Joins: dmathieu (~textual@pop.92-184-110-70.mobile.abo.orange.fr)
[11:23:04] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[11:24:19] *** Joins: mrig (~mrig@user/mrig)
[11:24:31] *** Joins: andlabs (~andlabs@68.237.68.71)
[11:27:27] *** Quits: zkanda (~zkanda@box.makean.art) (Quit: The Lounge - https://thelounge.chat)
[11:28:12] *** Joins: zkanda (~zkanda@box.makean.art)
[11:28:21] *** Joins: fef (~thedawn@user/thedawn)
[11:28:29] *** Joins: Guest14 (~Guest14@78-56-77-125.static.zebra.lt)
[11:28:38] *** Joins: mmfood (~mmfood@45.91.21.40)
[11:30:40] *** Quits: Guest14 (~Guest14@78-56-77-125.static.zebra.lt) (Client Quit)
[11:33:37] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[11:34:05] *** Quits: arinov (~arinov@213.194.126.155) (Quit: Konversation terminated!)
[11:34:31] *** Joins: arinov (~arinov@213.194.126.155)
[11:42:41] *** Joins: arinov_ (~arinov@178.240.167.6)
[11:43:09] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[11:43:27] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[11:43:30] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 264 seconds)
[11:46:29] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Client Quit)
[11:47:32] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[11:50:42] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 264 seconds)
[11:52:13] *** Quits: dmathieu (~textual@pop.92-184-110-70.mobile.abo.orange.fr) (Ping timeout: 272 seconds)
[11:52:15] *** Joins: jespada (~jespada@90.254.242.55)
[11:55:15] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[11:55:44] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[11:56:06] *** Joins: arinov (~arinov@213.194.126.155)
[11:56:14] *** Quits: arinov_ (~arinov@178.240.167.6) (Ping timeout: 244 seconds)
[11:58:30] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 244 seconds)
[12:01:52] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[12:03:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:09:20] *** Joins: zikani03 (~Zikani@197.211.99.14)
[12:13:25] *** Joins: badri (~badri@user/badri)
[12:14:34] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[12:15:35] *** Joins: dolmen (~X@91.206.7.93.rev.sfr.net)
[12:17:03] *** Parts: zikani03 (~Zikani@197.211.99.14) ()
[12:21:45] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[12:22:58] *** Joins: Guest5 (~textual@45.131.194.90)
[12:24:18] *** Joins: dmathieu (~textual@pop.92-184-110-37.mobile.abo.orange.fr)
[12:24:46] *** Joins: oxum (~oxum@106.201.113.95)
[12:27:12] *** Quits: Guest5 (~textual@45.131.194.90) (Quit: Textual IRC Client: www.textualapp.com)
[12:27:26] *** Joins: sympt (~textual@45.131.194.90)
[12:28:14] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[12:28:46] *** Quits: sympt (~textual@45.131.194.90) (Client Quit)
[12:31:31] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 272 seconds)
[12:33:19] *** Joins: oxum (~oxum@106.201.113.95)
[12:36:25] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:39:42] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[12:40:07] *** Joins: mambang[m] (~mambang@user/mambang)
[12:43:34] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[12:45:11] *** Joins: sympt (~textual@45.131.194.90)
[12:46:14] *** Joins: asm (~alexander@user/asm)
[12:46:40] *** Quits: sympt (~textual@45.131.194.90) (Client Quit)
[12:55:24] *** Joins: Vukan (~drazen@46.235.100.178)
[12:57:27] *** Joins: sympt (~textual@45.131.194.90)
[12:57:31] *** Quits: sympt (~textual@45.131.194.90) (Client Quit)
[12:59:59] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 244 seconds)
[13:00:42] *** Joins: sympt (~textual@45.131.194.90)
[13:00:53] *** Joins: CoolerX (~CoolerX@202.164.130.0)
[13:00:58] *** Joins: davzie (sid504337@id-504337.charlton.irccloud.com)
[13:01:31] <CoolerX> Hi
[13:01:33] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[13:01:50] <davzie> alright!
[13:02:12] <CoolerX> is there a way to avoid specifying the type for members of a struct when constructing an instance of that struct?
[13:02:27] <CoolerX> I get an error saying "missing type in composite literal"
[13:03:33] <CoolerX> https://play.golang.org/p/WSOIOqN116A
[13:04:14] <ikke> remove struct
[13:04:14] <CoolerX> in that example I had to specify the type again in order to construct an instance of that struct
[13:04:21] <KirkMcDonald> CoolerX: I suggest naming that type.
[13:04:28] <CoolerX> KirkMcDonald, ik
[13:04:39] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 272 seconds)
[13:04:46] <CoolerX> I am talking about the case where you have anonymous struct member\s like that
[13:04:46] *** Quits: sympt (~textual@45.131.194.90) (Client Quit)
[13:04:47] <ikke> sorry
[13:04:50] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[13:04:51] <ikke> struct should be attached to the {
[13:05:17] <ikke> struct{..}, not struct {..}
[13:05:20] <KirkMcDonald> But otherwise, no, not for struct literals. You can elide the type for elements of slice, array, or map literals.
[13:05:23] <CoolerX> ikke, what?
[13:05:33] <ikke> https://play.golang.org/p/OdcZ-MZnQmC
[13:05:41] <CoolerX> KirkMcDonald, I can't name the type because it'
[13:05:46] <CoolerX> KirkMcDonald, I can't name the type because it's not my code
[13:05:53] <KirkMcDonald> ikke: gofmt disagrees.
[13:05:54] <CoolerX> I am just using that struct
[13:06:29] <CoolerX> ikke, isn't that what I showed?
[13:06:38] <KirkMcDonald> CoolerX: You could make a value of the type and then assign each field one at a time.
[13:06:51] *** Joins: Xjs (~jannis@user/xjs)
[13:07:10] <CoolerX> KirkMcDonald, I am trying to avoid having to specify the type at all during construction of the instance
[13:07:18] <beeza> can I somehow add new tags at runtime, say I have json tags, can I add json tags from them?
[13:07:30] <CoolerX> I think I need to make a func NewStruct()
[13:07:39] <ikke> CoolerX: did you execute the example I gave?
[13:07:49] <ikke> you had struct { Group: ... }
[13:08:03] <CoolerX> ikke, your sample gives the same output as my sample
[13:08:33] <KirkMcDonald> CoolerX: https://play.golang.org/p/0Bi5woOOeu_r
[13:08:59] <CoolerX> KirkMcDonald, hmm
[13:10:06] <CoolerX> yeah that works but not sure if that fits the code style for our repo
[13:11:15] *** Joins: fbrx (~fbrx@2001:b07:6477:f4a6:1633:cab2:f240:f7c6)
[13:11:18] <CoolerX> this might be a little bit better https://play.golang.org/p/BCdogSL0F0K
[13:11:27] <CoolerX> at least the variable isn't exposed
[13:12:03] <KirkMcDonald> Isolating this to a NewStruct() function seems like a good idea.
[13:12:13] <CoolerX> yeah
[13:12:18] <CoolerX> thx
[13:12:43] <CoolerX> KirkMcDonald, I was surprised Go compiler couldn't infer the type of that inner struct
[13:14:54] <CoolerX> especially since anonymous structs are allowed
[13:15:42] <KirkMcDonald> I'm not sure what the rationale is for allowing this for slices, arrays, and maps, but not structs.
[13:16:31] *** Quits: Vukan (~drazen@46.235.100.178) (Ping timeout: 244 seconds)
[13:18:01] <sztanpet> probably some grammar ambiguity
[13:20:24] <KirkMcDonald> I'm not sure. The actual grammar is the same, regardless of what type of composite literal it is.
[13:22:35] <KirkMcDonald> There should be to ambigutity in terms of which element in the literal applies to which field of the struct, which means that inferring the type should not be a problem.
[13:22:45] <KirkMcDonald> s/to/no/
[13:24:41] <CoolerX> KirkMcDonald, could be because of readability?
[13:24:54] <CoolerX> if you have a very nested construction
[13:25:08] *** Joins: dyslexicat (~dyslexica@176.234.11.153)
[13:26:58] *** Quits: kwilczynski (sid379192@id-379192.highgate.irccloud.com) (Changing host)
[13:26:58] *** Joins: kwilczynski (sid379192@user/kwilczynski)
[13:28:28] *** Joins: opaulo (~ff@185.153.176.155)
[13:35:26] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[13:35:26] *** Joins: alip (~alip@chesswob.org)
[13:36:05] *** Quits: alip (~alip@chesswob.org) (Changing host)
[13:36:05] *** Joins: alip (~alip@exherbo/developer/alip)
[13:46:25] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Remote host closed the connection)
[13:52:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[13:52:48] *** Quits: CoolerX (~CoolerX@202.164.130.0) (Quit: Leaving)
[13:57:45] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Quit: mikoto-chan)
[13:58:42] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[14:04:22] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 244 seconds)
[14:06:49] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:07:16] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[14:08:46] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[14:10:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[14:10:34] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[14:10:44] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[14:13:36] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:14:38] *** Joins: warl (~warl@c-73-222-73-243.hsd1.ca.comcast.net)
[14:15:00] *** Joins: lehmrob (~rd7@p5dca864b.dip0.t-ipconnect.de)
[14:20:24] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Quit: mikoto-chan)
[14:20:55] *** Joins: masoudd_ (~masoudd@user/masoudd)
[14:23:28] *** Quits: warl (~warl@c-73-222-73-243.hsd1.ca.comcast.net) (Changing host)
[14:23:28] *** Joins: warl (~warl@user/warl)
[14:24:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[14:24:43] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 244 seconds)
[14:29:35] *** masoudd_ is now known as masoudd
[14:29:58] *** Quits: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it) (Remote host closed the connection)
[14:30:24] *** Quits: dmathieu (~textual@pop.92-184-110-37.mobile.abo.orange.fr) (Ping timeout: 244 seconds)
[14:32:56] *** Joins: someone235 (uid419897@id-419897.charlton.irccloud.com)
[14:33:13] *** masoudd is now known as masoudd_
[14:34:33] *** masoudd_ is now known as masoudd
[14:38:52] <b0nn> Og fmt.Sprint - create a string; fmt.Print - write to Standard Out; fmt.Fprint - write to the supplied writer
[14:39:20] <b0nn> I don't recall using Fprint (although I may have and just never paid attention)
[14:45:26] *** Joins: arinov (~arinov@212.156.215.30)
[14:46:07] *** Joins: wark (~warl@c-73-222-73-243.hsd1.ca.comcast.net)
[14:46:37] *** Quits: wark (~warl@c-73-222-73-243.hsd1.ca.comcast.net) (Changing host)
[14:46:38] *** Joins: wark (~warl@user/warl)
[14:49:08] *** wark is now known as warl_
[14:50:57] *** Parts: ThiefMaster (thief@indico/developer/thiefmaster) ()
[14:54:28] <beeza> would it be very controversial to make a MyClass.New method instead of NewMyClass function?
[14:55:03] *** Joins: vptr (~vptr@user/vptr)
[14:56:26] <bpalmer> it wouldn't work the way you're thinking, I suspect.
[14:56:43] <beeza> Why not?
[14:56:46] <bpalmer> x := MyClass{}.New() ?
[14:57:23] <bpalmer> go doesn't have 'static methods' like C++ or Python.
[14:58:50] <beeza> Maybe &MyClass.New() ?
[14:59:14] *** warl is now known as alienwarlock
[14:59:44] <ikke> beeza: you already need an instance to call the method on, defeating the purpose
[14:59:55] <mrig> you could go for package.New() if there is only one type of object that the package provides.
[14:59:55] <sztanpet> it could work as a package
[15:00:16] <ikke> That would just be a new function
[15:00:41] <beeza> ikke: do I though? methods with ptr receivers can work on nil objects AFAIK
[15:00:51] *** Joins: SincereFox (uid337158@user/sincerefox)
[15:01:25] <sztanpet> but why would you do it that way
[15:01:35] *** Quits: alienwarlock (~warl@user/warl) (Quit: Client closed)
[15:02:19] <beeza> I would rather call &MyClass.New() than NewMyClass - it also reduces the possibility for some errors
[15:02:38] <beeza> Like NewMyClass could return something unexpected
[15:02:52] <beeza> actually I guess both can
[15:02:57] <beeza> I guess i just like how it looks more
[15:03:02] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Remote host closed the connection)
[15:03:13] <mrig> hotthing.New() <- returns either a concrete type a reference or an interface.
[15:03:24] <sztanpet> but than you have already created MyClass at that point
[15:03:27] <mrig> But careful with it, it is hot!
[15:03:29] <sztanpet> so why call it New
[15:04:11] <bpalmer> beeza: yes, you could use a pointer receiver and nil, but ... x := ((*MyClass)nil).New() ?
[15:04:24] <sztanpet> it seems like unnecessary steps to avoid calling a simple function
[15:04:24] <beeza> yeah, that looks a bit nasty
[15:04:28] <ikke> This does not work: https://play.golang.org/p/Gd70d2pUvtA
[15:05:10] <sztanpet> relax and stop fighting the language is my advice
[15:07:08] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[15:07:09] <mrig> bezza this is an option : https://play.golang.org/p/AVKjRlgmYgl
[15:07:55] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[15:08:04] <bpalmer> sorry, it should be ((*MyClass)(nil)).New . Forgot some parens
[15:10:38] *** Quits: warl_ (~warl@user/warl) (Quit: Leaving)
[15:12:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[15:12:50] *** Joins: alienwarlock (~warl@user/warl)
[15:14:02] *** Joins: badri (~badri@user/badri)
[15:16:29] <beeza> bpalmer: yes, but yeah I guess best to not :)
[15:16:33] <beeza> thanks for help though
[15:17:03] <mrig> kung := Fu().WaxOn(i).WaxOff(j) <- a loaded statement.
[15:17:50] <mrig> kung.ExplodingFist() <- see!
[15:18:30] * mrig erm, Sorry ... Returns to interface.
[15:22:45] *** Joins: dmathieu (~textual@pop.92-184-110-37.mobile.abo.orange.fr)
[15:28:17] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Updating details, brb)
[15:28:25] *** Joins: SincereFox (uid337158@user/sincerefox)
[15:29:37] *** Quits: arinov (~arinov@212.156.215.30) (Ping timeout: 244 seconds)
[15:31:05] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[15:31:14] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[15:31:24] *** Joins: badri (~badri@user/badri)
[15:34:10] *** Quits: thing (~thing@user/thing) (Ping timeout: 252 seconds)
[15:35:08] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[15:35:57] <beeza> Is there some convention/interface for making a type decodable from string?
[15:36:16] *** Joins: thing (~thing@user/thing)
[15:36:43] <bpalmer> if that string is json or xml, yes.
[15:37:08] <bpalmer> See encoding/json  in the standard library, for example.
[15:37:31] <Sam> There's text unmarshaler: https://pkg.go.dev/encoding#TextUnmarshaler
[15:37:58] <Sam> or for actual strings people often call the method or function 'Parse'
[15:38:24] <beeza> 🤔 I think TextUnmarshaller may be best
[15:38:35] <beeza> thanks
[15:38:41] *** Joins: warl (~warl@2601:647:5e80:45bc:f9e6:ed06:8056:ef7c)
[15:38:42] *** Quits: warl (~warl@2601:647:5e80:45bc:f9e6:ed06:8056:ef7c) (Changing host)
[15:38:42] *** Joins: warl (~warl@user/warl)
[15:40:58] <beeza> but not sure I like that it works from byte[], will maybe just use UnmarshalString,
[15:42:13] *** Quits: alienwarlock (~warl@user/warl) (Ping timeout: 244 seconds)
[15:42:29] <fizzie> The encoding.TextUnmarshaler interface is also what "encoding/json" (and probably others) will check for as the next fallback, after the more specific json.Unmarshaler one, when figuring out how to unmarshal a JSON string into a value that implements it.
[15:42:51] *** Joins: dyslexic1t (~dyslexica@ymir.whatbox.ca)
[15:45:50] *** Quits: dyslexicat (~dyslexica@176.234.11.153) (Ping timeout: 244 seconds)
[15:46:37] *** Joins: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it)
[15:47:50] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[15:49:07] *** Quits: dyslexic1t (~dyslexica@ymir.whatbox.ca) (Ping timeout: 272 seconds)
[15:50:09] *** Joins: larkfisherman (~larkfishe@217.75.204.126)
[15:50:31] *** Joins: noxim (~noxim@user/noxim)
[15:52:59] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[15:55:15] <beeza> okay let me just live with byte[]
[15:57:16] *** Quits: mrig (~mrig@user/mrig) (Quit: freenode)
[15:58:14] *** Joins: mrig (~mrig@user/mrig)
[15:58:30] *** Quits: larkfisherman (~larkfishe@217.75.204.126) (Quit: Leaving)
[15:58:39] *** Joins: fef (~thedawn@user/thedawn)
[15:59:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Read error: Connection reset by peer)
[16:02:12] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[16:03:25] *** sshow_ is now known as sshow
[16:03:35] *** Joins: arinov (~arinov@213.194.126.155)
[16:04:05] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[16:04:40] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:05:11] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[16:05:36] *** Joins: noxim (~noxim@user/noxim)
[16:07:53] *** Joins: casastorta (~vedran.kr@2001:a61:4cc:1501:801b:5409:e74e:5d8f)
[16:07:57] <beeza> something which is very unatural to me is this interface naming, like TextMarshaler - I get it is how it is, but it seems like TextMarshalable would be much more appropriate for the interfae name
[16:09:32] <bpalmer> something that implements TextMarshaler can marshal. Just like someone that implements Babysitter can babysit.
[16:09:39] <bpalmer> If that makes it feel more natural.
[16:09:55] <Sam> Interfaces are actions, a marshaler marshals, not values. A marshalable would be the vale that is marshalable.
[16:11:50] *** Quits: casastorta (~vedran.kr@2001:a61:4cc:1501:801b:5409:e74e:5d8f) (Quit: WeeChat 3.2)
[16:11:55] <beeza> But are the things on which you will call MarshalText not be the value?
[16:12:27] <Sam> yes, but not the interface
[16:12:47] <Sam> a msmarshalable implements a marshaler
[16:13:43] <Sam> English is just confusing and how we apply it here may not be an exact analogy, I wouldn't worry about it too much :)
[16:15:06] *** Quits: dolmen (~X@91.206.7.93.rev.sfr.net) (Quit: Leaving)
[16:16:49] <ikke> An interface describes actions you can do, not the data itself
[16:17:39] <bpalmer> Marshalable makes more sense in a Java-like world where types have to opt in to an interface.
[16:17:51] <bpalmer> An empty interface that doesn't represent actions makes sense there.
[16:18:20] <bpalmer> (although go can use tagging interfaces in some patterns, usually with a very specifically named function as the 'action')
[16:19:23] *** Joins: longsleep (~quassel@2a02:c207:3001:216:1000::1)
[16:19:43] *** Quits: badri (~badri@user/badri) (Ping timeout: 272 seconds)
[16:20:34] *** Joins: badri (~badri@user/badri)
[16:21:22] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 272 seconds)
[16:22:51] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[16:24:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 244 seconds)
[16:25:13] *** Joins: yoonkn (~user@175.197.208.79)
[16:25:31] *** Joins: youthlin (~youthlin@240e:b1:e401:4::12)
[16:26:06] *** Quits: src (~src@user/src) (Ping timeout: 264 seconds)
[16:28:52] *** Joins: burningserenity_ (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1006.inf6.spectrum.com)
[16:32:29] <mrig> beeza: I've just come across this format, which I think is quite:  thing := new(somepack.Action).Init(w, data, 1, 2, 3)
[16:36:08] *** Joins: Joene (~Joene@213.224.16.26)
[16:37:35] *** Quits: arinov (~arinov@213.194.126.155) (Read error: Connection reset by peer)
[16:43:21] <beeza> mrig: thanks, it is interesting yes
[16:43:33] <beeza> will note it
[16:45:12] *** Joins: andlabs (~andlabs@68.237.68.71)
[16:56:10] *** marlinc_ is now known as marlinc
[17:01:45] *** Joins: azidhaka (~azidhaka@gateway.videnov.bg)
[17:04:47] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[17:10:25] *** Quits: vptr (~vptr@user/vptr) (Remote host closed the connection)
[17:10:36] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Quit: I quit)
[17:11:04] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[17:17:03] *** Joins: davide1 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9)
[17:20:24] *** Joins: sord937_ (~sord937@gateway/tor-sasl/sord937)
[17:20:27] *** Quits: fbrx (~fbrx@2001:b07:6477:f4a6:1633:cab2:f240:f7c6) (Changing host)
[17:20:27] *** Joins: fbrx (~fbrx@user/fbrx)
[17:20:50] *** Parts: davide1 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9) ()
[17:20:57] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[17:22:45] *** Joins: ni730w1 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9)
[17:23:00] *** Joins: dyslexic1t (~dyslexica@ymir.whatbox.ca)
[17:23:42] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 264 seconds)
[17:24:01] *** Parts: ni730w1 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9) ()
[17:27:26] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:28:29] *** Quits: badri (~badri@user/badri) (Remote host closed the connection)
[17:28:42] *** Joins: k3rn31 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9)
[17:30:24] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:31:15] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:33:35] *** Quits: youthlin (~youthlin@240e:b1:e401:4::12) (Quit: Client closed)
[17:34:51] *** Joins: larkfisherman (~larkfishe@217.75.204.126)
[17:35:08] *** Joins: eck0___ (~Android@mobile-166-173-63-82.mycingular.net)
[17:38:15] *** Quits: eck0__ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 272 seconds)
[17:43:33] *** Joins: acidfu (~nicolasbo@24.114.80.12)
[17:45:12] *** kadobanana is now known as mud
[17:48:19] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:48:29] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[17:48:45] *** Joins: Torr (~Torr@user/torr)
[17:50:06] *** Quits: opaulo (~ff@185.153.176.155) (Ping timeout: 264 seconds)
[17:50:42] *** Parts: Joene (~Joene@213.224.16.26) ()
[17:52:49] *** Joins: Joene (~Joene@213.224.16.26)
[17:53:00] *** Quits: Joene (~Joene@213.224.16.26) (Client Quit)
[17:53:10] *** Joins: Joene (~Joene@213.224.16.26)
[17:53:19] *** Quits: Joene (~Joene@213.224.16.26) (Client Quit)
[17:53:24] *** Joins: Joene_ (~Joene@213.224.16.26)
[17:54:26] *** Joins: ventic (~ventic@3v.fi)
[17:56:06] *** Quits: kissen (~kissen@user/kissen) (Ping timeout: 264 seconds)
[17:56:06] *** Quits: welt (~welt@willow.spiderden.net) (Ping timeout: 264 seconds)
[17:56:22] *** Joins: welt (~welt@willow.spiderden.net)
[17:56:40] *** Joins: kissen (~kissen@mail.hacks.moe)
[17:56:40] *** Quits: kissen (~kissen@mail.hacks.moe) (Changing host)
[17:56:40] *** Joins: kissen (~kissen@user/kissen)
[17:57:36] *** Joins: mambang (~mambang@user/mambang)
[18:00:31] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[18:00:57] *** Joins: c10l (~c10l@89.34.167.207)
[18:02:14] *** Joins: ventic^ (ircbouncer@3v.fi)
[18:02:23] *** Joins: SebastianM (~seba@user/sebastianm)
[18:02:32] *** Quits: eck0___ (~Android@mobile-166-173-63-82.mycingular.net) (Read error: Connection reset by peer)
[18:02:46] *** Quits: ventic (~ventic@3v.fi) (Ping timeout: 265 seconds)
[18:03:17] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[18:04:24] *** Joins: arcatech (~arcatech@user/arcatech)
[18:04:26] *** Joins: icholy (~icholy@68.71.18.45)
[18:04:29] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[18:05:21] *** ventic^ is now known as ventic
[18:06:48] *** Joins: Guest74 (~Guest74@2a00:23c7:da05:4f00:e506:f74c:5e36:abcc)
[18:07:07] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[18:12:16] *** Quits: Guest74 (~Guest74@2a00:23c7:da05:4f00:e506:f74c:5e36:abcc) (Quit: Client closed)
[18:13:15] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:13:21] *** Quits: mambang (~mambang@user/mambang) (Quit: Leaving)
[18:13:57] *** Quits: larkfisherman (~larkfishe@217.75.204.126) (Quit: Leaving)
[18:17:47] *** Joins: SebastianM (~seba@user/sebastianm)
[18:21:38] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Quit: leaving)
[18:23:15] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[18:30:35] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[18:31:29] *** Joins: Xjs (~jannis@user/xjs)
[18:39:09] *** Joins: Vukan (~drazen@46.235.100.178)
[18:39:30] *** Quits: dmathieu (~textual@pop.92-184-110-37.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:40:15] *** Quits: Xjs (~jannis@user/xjs) (Read error: Connection reset by peer)
[18:40:41] *** Joins: Xjs (~jannis@user/xjs)
[18:44:09] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:44:20] *** Joins: oxum (~oxum@106.201.113.95)
[18:45:53] *** Quits: jcajka_ (~jcajka@static-84-42-180-92.net.upcbroadband.cz) (Quit: Leaving)
[18:46:58] *** Joins: arcatech (~arcatech@user/arcatech)
[18:48:23] *** Joins: andlabs (~andlabs@68.237.68.71)
[18:49:19] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 268 seconds)
[18:52:04] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 265 seconds)
[18:52:05] *** Joins: eagleflo (~aku@eagleflow.fi)
[18:53:38] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[18:54:09] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:54:23] *** Joins: fef (~thedawn@user/thedawn)
[18:56:43] *** Quits: Joene_ (~Joene@213.224.16.26) (Ping timeout: 268 seconds)
[18:57:52] *** Quits: Vukan (~drazen@46.235.100.178) (Ping timeout: 265 seconds)
[18:58:32] *** Joins: Joene_ (~Joene@213.224.16.26)
[18:58:43] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[19:02:59] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[19:03:32] *** Joins: dyslexicat (~dyslexica@176.234.11.153)
[19:06:06] *** Joins: SebastianM (~seba@user/sebastianm)
[19:06:34] *** Quits: dyslexic1t (~dyslexica@ymir.whatbox.ca) (Ping timeout: 265 seconds)
[19:07:06] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[19:08:09] *** Joins: larkfisherman (~larkfishe@217.75.204.126)
[19:10:04] *** Quits: lehmrob (~rd7@p5dca864b.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:10:18] *** Quits: SebastianM (~seba@user/sebastianm) (Ping timeout: 240 seconds)
[19:10:31] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1002.inf6.spectrum.com) (Ping timeout: 272 seconds)
[19:12:49] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:13:33] *** Joins: burningserenity (~burningse@143.244.34.140)
[19:17:28] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[19:20:58] *** Joins: dmathieu (~textual@pop.92-184-110-223.mobile.abo.orange.fr)
[19:24:02] *** Joins: fef (~thedawn@user/thedawn)
[19:25:07] *** Joins: ef (~thedawn@user/thedawn)
[19:25:08] *** Quits: ef (~thedawn@user/thedawn) (Client Quit)
[19:26:52] *** Quits: Joene_ (~Joene@213.224.16.26) (Ping timeout: 265 seconds)
[19:28:19] *** Joins: acidfoo- (~nicolasbo@96.125.207.152)
[19:28:28] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[19:29:56] *** Joins: deafpiano (~tomlazar@cpe-65-26-56-76.wi.res.rr.com)
[19:30:01] *** Quits: acidfu (~nicolasbo@24.114.80.12) (Ping timeout: 268 seconds)
[19:30:43] *** Quits: larkfisherman (~larkfishe@217.75.204.126) (Remote host closed the connection)
[19:33:39] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[19:34:38] *** Quits: dmathieu (~textual@pop.92-184-110-223.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:43:34] *** Joins: jannis (~jannis@user/xjs)
[19:44:04] *** Joins: ni730w1 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9)
[19:44:32] *** Joins: welt_ (~welt@willow.spiderden.net)
[19:44:41] *** Joins: ventic^ (ircbouncer@3v.fi)
[19:44:48] *** Joins: burnings- (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1002.inf6.spectrum.com)
[19:45:03] *** Quits: burningserenity (~burningse@143.244.34.140) (Ping timeout: 265 seconds)
[19:45:03] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Read error: Connection reset by peer)
[19:45:04] *** Quits: dyslexicat (~dyslexica@176.234.11.153) (Ping timeout: 265 seconds)
[19:45:04] *** Quits: ventic (ircbouncer@3v.fi) (Ping timeout: 265 seconds)
[19:45:04] *** Quits: k3rn31 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9) (Ping timeout: 265 seconds)
[19:45:04] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 265 seconds)
[19:45:04] *** Quits: welt (~welt@willow.spiderden.net) (Ping timeout: 265 seconds)
[19:45:04] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 265 seconds)
[19:45:04] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 265 seconds)
[19:45:43] *** Quits: icholy (~icholy@68.71.18.45) (Ping timeout: 265 seconds)
[19:45:45] *** Joins: dyslexicat (~dyslexica@176.234.11.153)
[19:46:03] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[19:46:08] <Tv_> mrig: eww
[19:46:16] *** Joins: icholy (~icholy@68.71.18.45)
[19:46:19] *** Joins: dmathieu (~textual@pop.92-184-110-223.mobile.abo.orange.fr)
[19:46:23] <Tv_> init functions are just simply nasty
[19:46:30] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 250 seconds)
[19:46:58] <Tv_> &somepack.Action{w: w, data: data, blahblah}
[19:47:16] <Tv_> or if the fields are private, somepack.NewAction(w, data, blahblah)
[19:47:59] <mrig> Reading this in tgpl as I ponder writing a ringbuffer for a sort functions; It is used to initialise a tabwriter in there.
[19:48:03] <nevivurn> That looks odd, yeah. Why bother making a separate .Init() method if everyone will have to create & initialize it anyway?
[19:49:23] <mrig> For a small concise utility such as a tabwriter I suppse.
[19:49:45] <Tv_> huh what? https://pkg.go.dev/text/tabwriter#NewWriter
[19:50:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[19:50:22] <bpalmer> nothing wrong with init functions; they can help ensure invariants are met, or at least detected.
[19:50:41] <Tv_> that Init method should have probably been called Reset instead. i believe it is meant for when you want to share the same instance across multiple uses
[19:50:48] <nevivurn> In that case, why not just use a New...() funtion?
[19:51:21] <Tv_> compare with https://golang.org/pkg/bufio/#Writer.Reset
[19:52:09] <Tv_> to generalize from that to "use init functions to initialize new objects" is very much the wrong lesson
[19:52:34] *** ventic^ is now known as ventic
[19:52:50] <mrig> https://golang.org/pkg/text/tabwriter/#example_Writer_Init
[19:53:08] <Tv_> which demonstrates exactly the rare case i talked about
[19:55:34] *** Joins: Guest50 (~Guest50@191.111.215.230)
[19:56:10] *** Parts: Guest50 (~Guest50@191.111.215.230) ()
[19:56:19] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[19:56:35] <mrig> The Init function is setting the writer there it would seem.
[19:56:40] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[19:57:21] <Tv_> 09:20 <Tv_> that Init method should have probably been called Reset instead. i believe it is meant for when you want to share the same instance across multiple uses
[19:57:29] <Tv_> 09:22 <Tv_> to generalize from that to "use init functions to initialize new objects" is very much the wrong lesson
[19:57:47] <Tv_> mrig: please think about & respond to that part, if it's still unclear
[19:59:25] <mrig> Oh I never suggested that be the case, was simply reflecting upon the fact that I'd just come across it in my digest.
[19:59:34] <mrig> coincidentally.
[20:01:27] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:03:56] *** Quits: dyslexicat (~dyslexica@176.234.11.153) (Ping timeout: 268 seconds)
[20:05:47] *** Joins: SebastianM (~seba@user/sebastianm)
[20:07:06] *** Quits: acidfoo- (~nicolasbo@96.125.207.152) (Ping timeout: 240 seconds)
[20:07:54] *** Joins: dg (dgl@dg.wtf)
[20:08:48] *** Joins: dyslexicat (~dyslexica@176.234.11.153)
[20:10:47] *** Quits: dyslexicat (~dyslexica@176.234.11.153) (Client Quit)
[20:11:54] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[20:13:15] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:14:16] *** Joins: noxim (~noxim@user/noxim)
[20:14:18] *** Quits: dmathieu (~textual@pop.92-184-110-223.mobile.abo.orange.fr) (Ping timeout: 240 seconds)
[20:14:55] *** Joins: pepee (~user@user/pepee)
[20:15:27] *** Joins: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de)
[20:17:06] *** Quits: jannis (~jannis@user/xjs) (Ping timeout: 240 seconds)
[20:19:04] *** Joins: Xjs (~jannis@user/xjs)
[20:19:09] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[20:19:32] *** Joins: NoName_ (~idk@8.20.127.195)
[20:19:44] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[20:19:48] *** Joins: fef (~thedawn@user/thedawn)
[20:20:09] *** Joins: pgloor (~petergloo@mix.cubus.space)
[20:20:37] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:22:49] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[20:26:51] *** Quits: pgloor (~petergloo@mix.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[20:27:28] *** Joins: pgloor (~petergloo@mix.cubus.space)
[20:33:30] <seds> hey all, i have a struct B with struct A embedded into it. when I typecast my interface to struct B, it seems that i get an empty restul. does go allow typecasting and retrieving the embedded data back? https://play.golang.org/p/yUT1zdQ4CXM
[20:33:40] *** Quits: nevivurn (~nevivurn@120.50.75.170) (Changing host)
[20:33:40] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[20:34:05] <seebs> "typecast" is not a thing
[20:34:08] <Tv_> seds: don't ignore errors
[20:34:35] <Tv_> seds: that type assertion is returning "not ok" because what you put in is not what you ask to take out
[20:34:38] <seebs> Anyway, the issue you're having is that a *B isn't a B.
[20:35:23] <seds> oh right!
[20:35:34] <seds> nice, i see my error now
[20:35:38] <seds> thanks!
[20:36:14] *** Joins: iateadonut (~dan@121.177.17.154)
[20:37:58] *** Quits: ni730w1 (~davide@2001:b07:6473:a66d:e375:a7d7:b27a:d4a9) (Quit: WeeChat 2.9)
[20:40:26] <iateadonut> https://play.golang.org/p/ANqugqXhApb
[20:40:56] <iateadonut> how could i modify type servJson, so that it could take JSON as an argument to serve?
[20:41:59] <Sam> iateadonut: it's not clear to me what you're trying to do, servJson does not need to be a HandlerFunc and a Handler
[20:42:06] <Sam> Maybe you could explain what you're trying to do with that type?
[20:42:30] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[20:42:57] <iateadonut> no, i see it now, thanks.
[20:43:11] <iateadonut> i see that it doesn't have to be a HandlerFunc.
[20:43:17] <iateadonut> thank you.
[20:43:58] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:45:48] *** Quits: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it) (Quit: Leaving.)
[20:47:01] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:49:48] *** Parts: iateadonut (~dan@121.177.17.154) ()
[20:50:03] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[20:52:19] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[20:54:28] *** Joins: acidfoo- (~nicolasbo@24.114.81.115)
[20:55:17] *** Joins: fishgod (~evan@user/fishgod)
[20:57:08] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[20:57:24] *** Joins: tomlazar (~tomlazar@cpe-65-26-56-76.wi.res.rr.com)
[20:57:34] *** Quits: tomlazar (~tomlazar@cpe-65-26-56-76.wi.res.rr.com) (Client Quit)
[20:57:44] *** Quits: fishgod (~evan@user/fishgod) (Client Quit)
[21:01:27] *** Joins: dmathieu (~textual@pop.92-184-110-223.mobile.abo.orange.fr)
[21:06:18] *** Quits: acidfoo- (~nicolasbo@24.114.81.115) (Ping timeout: 240 seconds)
[21:14:06] *** Joins: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63)
[21:15:01] *** Quits: fbrx (~fbrx@user/fbrx) (Quit: Leaving)
[21:18:10] *** Quits: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63) (Client Quit)
[21:18:32] *** Joins: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63)
[21:21:11] *** Joins: ni730w1 (~davide@2001:b07:6473:a66d:e72:9942:39b:3042)
[21:22:06] *** Quits: ni730w1 (~davide@2001:b07:6473:a66d:e72:9942:39b:3042) (Client Quit)
[21:22:38] *** Joins: blyat-73 (~hjgkjhgkj@79.101.60.163)
[21:27:33] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Quit: WeeChat 2.8)
[21:34:17] *** Quits: dmathieu (~textual@pop.92-184-110-223.mobile.abo.orange.fr) (Ping timeout: 272 seconds)
[21:34:48] *** Quits: alip (~alip@exherbo/developer/alip) (Quit: The great square has no corners. The great vessel is never finished. The great tone is barely heard. The great thought can't be thought --Dao De Jing by Lao Zi as translated by UKLG.)
[21:37:46] *** Joins: jzelinskie (sid17772@id-17772.stonehaven.irccloud.com)
[21:37:53] *** Joins: CrunchyChewie (~CrunchyCh@ec2-18-191-175-241.us-east-2.compute.amazonaws.com)
[21:39:03] *** Quits: CrunchyChewie (~CrunchyCh@ec2-18-191-175-241.us-east-2.compute.amazonaws.com) (Client Quit)
[21:39:34] *** Joins: CrunchyChewie (~CrunchyCh@ec2-18-191-175-241.us-east-2.compute.amazonaws.com)
[21:40:16] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 244 seconds)
[21:41:05] *** Joins: mrig (~mrig@user/mrig)
[21:45:41] *** Quits: NeoCron (~NeoCron@ip4-45-158-175-19.dyn.netcomnetz.de) (Ping timeout: 268 seconds)
[21:47:53] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[21:48:09] *** Joins: noxim (~noxim@user/noxim)
[21:48:21] *** Joins: SebastianM (~seba@user/sebastianm)
[21:54:55] *** Quits: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63) (Quit: WeeChat 3.2)
[21:55:12] *** Quits: Jigsy (~Jigsy@user/jigsy) (Read error: Connection reset by peer)
[21:56:20] *** Joins: Jigsy (~Jigsy@user/jigsy)
[21:56:57] *** Joins: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63)
[21:58:13] *** Quits: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63) (Client Quit)
[22:00:54] *** Joins: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63)
[22:03:41] *** Joins: fef (~thedawn@user/thedawn)
[22:07:09] *** Joins: n3tgh0st (~n3t@209-112-185-154-radius.dynamic.acsalaska.net)
[22:12:11] *** Quits: strubbl8919 (~strubbl@ipbcc18e84.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[22:13:41] *** Joins: strubbl8919 (~strubbl@ipbcc18e84.dynamic.kabel-deutschland.de)
[22:14:11] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[22:18:06] *** whaley is now known as rofl
[22:18:15] *** rofl is now known as ballsmahoney
[22:19:01] *** ballsmahoney is now known as whaley
[22:21:12] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[22:25:29] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:27:01] *** Joins: andlabs (~andlabs@68.237.68.71)
[22:30:54] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 264 seconds)
[22:32:08] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 10000)
[22:35:13] *** Quits: jai (~darkapex@user/darkapex) (Quit: Client limit exceeded: 10000)
[22:39:26] *** Quits: NoName_ (~idk@8.20.127.195) (Quit: Good Night!)
[22:39:54] *** Quits: k3rn31 (~davide@2001:b07:6473:a66d:5a00:e3ff:fea2:2a63) (Ping timeout: 240 seconds)
[22:40:02] *** Joins: dkmueller (~dkmueller@2a01:c23:c070:3a00:1107:6617:739e:3380)
[22:40:50] *** Joins: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it)
[22:41:05] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[22:44:35] *** Joins: dongkyun (~dongkyun@2604:a880:2:d1::10c:d001)
[22:48:14] *** Joins: Vukan (~drazen@46.235.100.178)
[22:50:49] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 10000)
[22:51:58] *** Joins: SebastianM (~seba@user/sebastianm)
[22:55:45] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:55:53] *** Quits: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it) (Remote host closed the connection)
[23:00:55] *** Quits: Vukan (~drazen@46.235.100.178) (Ping timeout: 268 seconds)
[23:00:57] *** LSD is now known as DMT
[23:04:51] *** Quits: Catatonic (~Catatonic@ariel.whatbox.ca) (Quit: Quit)
[23:05:48] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: Client limit exceeded: 10000)
[23:12:09] *** Joins: alip (~alip@exherbo/developer/alip)
[23:15:16] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[23:15:51] *** Joins: sgen (~sgen@142.186.76.30)
[23:28:28] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[23:32:12] *** Joins: mickey (~user@user/mickey)
[23:32:33] <mickey> why is this invalid? x := big.Int(100)
[23:32:33] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[23:32:33] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[23:32:34] *** Joins: jai (~darkapex@user/darkapex)
[23:32:41] <mickey> i get cannot convert 100 (untyped int constant) to big.Int
[23:33:34] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[23:33:40] <Tv_> mickey: because conversions only exist where documented in http://golang.org/ref/spec
[23:33:59] <Tv_> you're looking for big.NewInt
[23:34:29] <icholy> mickey: https://golang.org/pkg/math/big/#NewInt
[23:34:53] <mickey> Tv_ my bad. thanks.
[23:35:02] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[23:35:13] *** Joins: leah2 (~leah@vuxu.org)
[23:37:48] *** Quits: burnings- (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1002.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:38:10] *** Quits: tristero (~nobody@user/tristero) (Quit: WeeChat 3.0)
[23:38:29] *** Joins: tristero (~nobody@user/tristero)
[23:39:55] *** Quits: tristero (~nobody@user/tristero) (Client Quit)
[23:41:02] *** Joins: tristero (~nobody@user/tristero)
[23:41:32] *** Quits: mmfood (~mmfood@45.91.21.40) (Ping timeout: 272 seconds)
[23:42:17] *** Quits: krthnz (~quassel@user/krthnz) (Ping timeout: 252 seconds)
[23:42:18] *** Joins: krthnz_ (~quassel@dslb-092-072-061-158.092.072.pools.vodafone-ip.de)
[23:42:52] <eric_hill> Anyone else here having trouble getting binaries built with darwin/arm64 signed by Apple?  darwin/amd64 binaries seem to sign just fine.  Might just be me.
[23:43:45] *** Quits: ausserz (~ausserz@user/ausserz) (Ping timeout: 244 seconds)
[23:44:06] *** Quits: deafpiano (~tomlazar@cpe-65-26-56-76.wi.res.rr.com) (Quit: Lost terminal)
[23:45:23] *** Joins: polira (~polira@cpe-98-13-135-8.nyc.res.rr.com)
[23:45:44] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:46:30] *** Quits: polira (~polira@cpe-98-13-135-8.nyc.res.rr.com) (Client Quit)
[23:46:36] *** Quits: zwr (~Person@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091) (Ping timeout: 272 seconds)
[23:48:28] *** Quits: tristero (~nobody@user/tristero) (Quit: WeeChat 3.0)
[23:49:47] *** Joins: tristero (~nobody@user/tristero)
[23:51:02] *** Quits: dkmueller (~dkmueller@2a01:c23:c070:3a00:1107:6617:739e:3380) (Ping timeout: 272 seconds)
[23:52:46] *** Joins: acidfoo- (~nicolasbo@96.125.207.152)
[23:53:17] *** Joins: zwr (~Person@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091)
[23:54:10] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[23:54:43] *** Joins: kayprish (~kayprish@46.240.143.86)
[23:56:14] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Quit: Client limit exceeded: 10000)
[23:56:24] <mickey> another thing, when i try to import myproject/pkg/myprivatemodule, i get an error that the module isnt in GOROOT. but i dont want it in GOROOT, it's in a subfolder.
[23:56:48] <mickey> my main package has a go.mod with module myproject
[23:56:59] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[23:57:30] <mickey> if you have an idea about that one..
[23:58:09] <b0nn> mickey: what does `go mod tidy` do
[23:58:42] <mickey> it complains that myproject/pkg/myprivatemodule isn't in GOROOT. it's in ./pkg/myprivatemodule though
[23:59:08] <b0nn> ok, where is the package relative to the root go.mod of your project
[23:59:38] <b0nn> as in where is your go.mod, and what's the path from there to that package
