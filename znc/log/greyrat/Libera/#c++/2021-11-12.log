[00:02:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[00:04:14] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[00:06:41] *** Joins: froggy (~froggy@2.235.241.212)
[00:08:23] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:09:23] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Ping timeout: 264 seconds)
[00:10:06] *** Quits: pah_ (~pah@host-95-247-113-253.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[00:10:37] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[00:11:07] *** Joins: pah (~pah@user/pah)
[00:11:29] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 264 seconds)
[00:12:01] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:12:31] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[00:13:07] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[00:15:39] *** Joins: froggy (~froggy@2.235.241.212)
[00:15:55] *** Joins: great_taste (~great_tas@190.32.235.20)
[00:20:37] *** Quits: trillaman (~trillaman@46.204.33.136.nat.umts.dynamic.t-mobile.pl) (Quit: Quit in the name of the streets)
[00:22:18] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[00:24:52] *** Joins: froggy (~froggy@2.235.241.212)
[00:25:02] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:9825:20f3:f69:55d5)
[00:26:00] *** Joins: CaCode (~CaCode@user/cacode)
[00:28:14] *** Joins: rgrinberg (~textual@200.5.63.76)
[00:28:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325) (Ping timeout: 268 seconds)
[00:29:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:30:05] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[00:32:59] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[00:33:53] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:35:44] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:39:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[00:41:19] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[00:41:23] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[00:44:08] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[00:48:59] *** Joins: emerent_ (~quassel@p200300cd573070b2ba27ebfffed28a59.dip0.t-ipconnect.de)
[00:48:59] *** Quits: emerent (~quassel@p200300cd57307093ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (erbium.libera.chat (Nickname regained by services)))
[00:48:59] *** emerent_ is now known as emerent
[00:52:51] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[00:54:06] *** Joins: pah (~pah@user/pah)
[01:01:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:08:49] *** Joins: jplejacq (~jplejacq@24.224.100.40)
[01:10:46] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c)
[01:10:49] *** Joins: Gaboradon_ (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[01:10:49] *** Quits: Gaboradon_ (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Client Quit)
[01:12:16] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Ping timeout: 268 seconds)
[01:13:30] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:9c57:4715:1ac5:a700) (Ping timeout: 268 seconds)
[01:14:57] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 256 seconds)
[01:15:14] *** Joins: alkino (~quassel@user/alkino)
[01:18:26] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 268 seconds)
[01:18:30] *** Joins: jkaye (~jkaye@2601:281:8300:7530:abba:ebaf:fffa:714f)
[01:20:15] *** Joins: Guest92 (~Guest92@68.132.78.81)
[01:20:46] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:22:17] *** Quits: magla (~gelignite@55d4f4a1.access.ecotel.net) (Quit: Stay safe!)
[01:23:07] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:23:50] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[01:24:04] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[01:26:03] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[01:28:56] *** Joins: great_taste (~great_tas@190.32.235.20)
[01:31:14] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[01:31:50] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:33:20] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[01:34:45] *** Joins: fulldecent (~textual@wikipedia/fulldecent)
[01:37:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:03] *** ChanServ sets mode: +v npaperbot
[01:38:49] *** Quits: AmR (~AmREiSa@156.199.86.69) (Quit: Konversation terminated!)
[01:39:51] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d4e2:b355:67fe:933c) (Read error: Connection reset by peer)
[01:40:33] *** peeps[zen] is now known as peepsalot
[01:40:48] <CarloWood> I'm doing something dirty and I am wondering if it OK with the standard (or that it is UB).  I pass an array of Foo types to some function where struct Foo { uint64_t a; uint32_t b; }; Then I call a function that expects an array of uint64_t to fill in the 'a' elements as follows:
[01:41:50] <CarloWood> uint64_t* tmp_array = reinterpret_cast<uint64_t*>(&foo_array[size]) - size;
[01:42:24] <CarloWood> fill tmp_array with 'count' uint64_t's, and then move them to their real place:
[01:43:27] <CarloWood> for (int i = 0; i < count; ++i) { foo_array[i].a = *tmp_array++; foo_array[i].b = something; }
[01:43:38] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[01:45:03] <CarloWood> So that last loop overwrites the values that it copies in the beginning.  Is this possibly UB or should it work?
[01:45:51] *** Joins: froggy (~froggy@2.235.241.212)
[01:46:17] <kalven> wat
[01:47:21] <CarloWood> kalven:
[01:47:26] <CarloWood> I have an array:
[01:47:54] <CarloWood> {{ a, b }, { a, b }, { a, b }, ... }
[01:47:54] <geordi> error: 'a' was not declared in this scope
[01:48:27] <CarloWood> Then I put a pointer half way to reinterpret cast it to an array of just b's, and fill that with the b values.
[01:49:06] <CarloWood> Then I run over all elements and copy the b values in place, from where they were written to where they should have gone.
[01:49:21] <CarloWood> Also filling in the a values.
[01:49:29] <kalven> Yeah, I get it.. is this in the name of efficiency?
[01:49:41] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[01:49:46] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[01:49:54] <CarloWood> I suppose so yes. The alternative seems to calling malloc.
[01:50:24] <CarloWood> (using a std::vector that is)
[01:50:39] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 256 seconds)
[01:50:48] <CarloWood> to be* calling
[01:51:28] <kalven> I'm guessing it's UB, because you are writing int64s to a place where int64s don't exist, but I'm not a language lawyer
[01:51:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[01:52:29] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[01:52:31] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[01:53:20] <CarloWood> I think the only reason it can go wrong is when the compiler does some optimization where it doesn't take into account that the input and output memory of the copy loop overlap.
[01:53:51] <CarloWood> Ie, it could for whatever reason decide to run the loop backwards?
[01:53:57] *** Quits: M-ou-se (~m-ou-se@circle.m-ou.se) (Quit: WeeChat 3.0)
[01:54:16] <kalven> is that arguing that it's UB, but ok?
[01:54:19] *** Quits: fulldecent (~textual@wikipedia/fulldecent) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:54:39] <CarloWood> Or to split the loop into two loops, first filling in the b's and then the a's.
[01:54:51] <CarloWood> I don't know if the compiler is allowed to do that :/
[01:55:06] *** Joins: froggy (~froggy@2.235.241.212)
[01:55:28] <Alipha> CarloWood: yeah, so because of strict aliasing, the compiler may assume that foo_array and tmp_array don't overlap because foo_array and tmp_array are different types
[01:56:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[01:56:19] <CarloWood> Sigh - ok, it is too dirty... I'll use a vector then. But that means I have to add another function, specializing a std::array, because then I can put that on the stack instead of using a vector.
[01:57:01] <kalven> or just do a vector and get back to it if it turns out to be an issue
[01:57:53] <CarloWood> This allocates command buffers from a command pool (in Vulkan), that is something that happens a LOT.  But, it's only for debug code :\
[01:58:35] <CarloWood> Nevertheless, I'd rather avoid creating 10 times per frame some vector if not needed.
[01:59:03] <kalven> right, but you can get back to it
[01:59:12] <CarloWood> (In non-debug code I don't have the 'b' elements - so I can just write to the array directly)
[01:59:22] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:01:51] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 250 seconds)
[02:12:34] *** Quits: cpuid (~cpuid@ich.mag.co1a.at) (Quit: ZNC 1.8.2 - https://znc.in)
[02:12:56] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:13:24] *** Joins: cpuid (~cpuid@co5.at)
[02:21:41] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[02:22:36] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:23:57] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[02:24:32] *** Quits: proller (~p@2a02:6b8:b081:8831::1:1d) (Ping timeout: 240 seconds)
[02:28:24] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[02:28:46] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[02:29:05] *** Joins: fulldecent (~textual@wikipedia/fulldecent)
[02:31:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:eac0:c033:fea2:56dd)
[02:31:55] *** Joins: pulse_ (~pulse@user/pulse)
[02:33:02] *** Quits: Tas-sos (~Tas-sos@46-174-70.adsl.cyta.gr) (Ping timeout: 240 seconds)
[02:33:32] *** Quits: pizdets (~pizdets@183.182.114.210) (Ping timeout: 240 seconds)
[02:34:11] *** Joins: pizdets (~pizdets@183.182.110.210)
[02:35:13] *** Quits: r-g (~r-g@51.158.144.32) (Ping timeout: 250 seconds)
[02:35:25] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[02:37:32] *** Joins: proller (~p@2a02:6b8:b081:7216::1:2a)
[02:40:51] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:41:20] *** Joins: Enitin (~Enitin@82.102.22.86)
[02:46:30] *** Joins: ottergauze (~ottergauz@cpc109817-linc13-2-0-cust186.12-1.cable.virginm.net)
[02:50:57] *** Joins: Coldberg (~C-Man@static.88-198-34-209.clients.your-server.de)
[02:52:18] *** Quits: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de) (Ping timeout: 260 seconds)
[02:54:02] <vancz> can I not expose a using type alias in a class?
[02:54:10] <vancz> im pretty sure there should be a way to do this
[02:54:14] *** pulse_ is now known as pulse
[02:54:22] <vancz> the standard library seems to?
[02:54:43] <vancz> or maybe it just gives types that use a default...not sure
[02:57:29] <kalven> what do you mean? do you have some example code?
[02:57:30] <vancz> something like struct thing { using some_v = std::variant<char, int>;}; struct otherthing { thing::somev dowhatever(); };
[02:57:44] <vancz> well i typod that but yeah
[02:57:46] <kalven> you can do that
[02:58:16] <vancz> hm maybe i misread the error then
[02:59:02] <vancz> ok templates are involved
[02:59:05] <vancz> calc.cpp:474:36: error: type/value mismatch at argument 1 in template parameter list for ‘template<class _Tp> class std::optional’
[02:59:05] <vancz>   474 |   std::optional<Tokenizer<T>::tok_v> advance = Tokenizer<T>::advance;
[02:59:27] <vancz>       |                                    ^
[02:59:44] *** Quits: ottergauze (~ottergauz@cpc109817-linc13-2-0-cust186.12-1.cable.virginm.net) (Read error: Connection reset by peer)
[03:01:01] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:02:38] *** Joins: froggy (~froggy@2.235.241.212)
[03:04:16] <kalven> can you replicate in a testcase?
[03:06:27] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:09:20] <vancz> I think I have several issues in there actually, so nevermind for the moment I guess
[03:09:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:09:29] <vancz> thanks for confirming the basic idea should work
[03:10:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:10:40] *** Joins: Ikkepop (~C-Man@78.31.190.82)
[03:11:24] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[03:11:41] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 256 seconds)
[03:13:37] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[03:13:46] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[03:13:51] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:14:22] *** Quits: Coldberg (~C-Man@static.88-198-34-209.clients.your-server.de) (Ping timeout: 268 seconds)
[03:18:50] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[03:20:42] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: Ping timeout (120 seconds))
[03:20:52] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[03:21:02] *** Joins: malloy (~jimery@116.30.220.108)
[03:21:04] *** Joins: wille6 (~wille@static.140.85.76.144.clients.your-server.de)
[03:21:39] *** Quits: Benett (~Benett@2a03:4000:1a:7aa::2) (Quit:  )
[03:21:56] *** Joins: Benett (~Benett@xnetx.de)
[03:22:48] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 260 seconds)
[03:22:48] *** wille6 is now known as wille
[03:25:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:27:34] *** Quits: fulldecent (~textual@wikipedia/fulldecent) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:27:56] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[03:28:41] *** Joins: Enitin (~Enitin@82.102.22.85)
[03:28:48] *** Joins: Brainium (~brainium@user/brainium)
[03:29:30] *** Joins: rgrinberg (~textual@190.113.102.153)
[03:30:13] *** Joins: fulldecent (~textual@wikipedia/fulldecent)
[03:31:39] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:37:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[03:41:12] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[03:42:42] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:43:24] *** Quits: CaCode (~CaCode@user/cacode) (Read error: Connection reset by peer)
[03:43:38] *** Joins: CaCode (~CaCode@user/cacode)
[03:48:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e5ef:144b:750a:3781) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:55:49] *** Quits: rgrinberg (~textual@190.113.102.153) (Ping timeout: 250 seconds)
[03:57:48] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[03:58:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:59:47] *** Quits: proller (~p@2a02:6b8:b081:7216::1:2a) (Ping timeout: 264 seconds)
[04:00:16] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[04:01:27] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:01:27] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[04:01:39] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[04:02:49] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[04:04:24] *** Joins: Roughy (~mdaw45ns@user/roughy)
[04:06:36] <Alipha> vancz: `typename Tokenizer<T>::tok_v`
[04:07:59] <Alipha> vancz: https://en.cppreference.com/w/cpp/language/dependent_name
[04:09:29] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 256 seconds)
[04:12:05] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:45] *** Joins: ferdna (~ferdna@user/ferdna)
[04:26:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:27:28] *** Joins: nshire_ (~Neal@47.146.41.156)
[04:27:43] *** Joins: wondiws (~Jasper@94-215-229-69.cable.dynamic.v4.ziggo.nl)
[04:28:07] <wondiws> "The left operand of << is a garbage value" :S
[04:28:19] <wondiws> can I fix this warning?
[04:28:48] <Raziel> well, you can try making the left operand of << not be a garbage value and it might go away
[04:28:59] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:29:05] <wondiws> Raziel, what do they mean by "garbage value"?
[04:29:12] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[04:29:46] *** Joins: Fault (~Fault@152.70.112.168)
[04:29:48] <Raziel> probably uninitialized, paste the code somewhere
[04:29:54] <Raziel> also that doesn't sound like a C++ warning to me
[04:30:18] *** Quits: nshire (~Neal@user/nshire) (Ping timeout: 260 seconds)
[04:30:35] <Oxyd> Read your compiler's documentation to figure out what it means.
[04:31:19] <wondiws> Oxyd, I didn't get something on google on it, but never mind, I just did char buf[4] = {0}; and then it went away
[04:31:30] <wondiws> altough I did read a value into those 4 bytes
[04:31:45] <Raziel> yeah, your buf was uninitialized
[04:32:08] <Raziel> still a weird error because I don't see why it'd matter when writing to it, but, whatever v:
[04:32:08] <wondiws> thanks Raziel
[04:34:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:34:46] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:35:10] <Alipha> wondiws: how did you read values into buf?
[04:35:49] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[04:36:02] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:36:21] <wondiws> Alipha, read(int offset, char *buf, int len); my own function that reads bytes from a "DinkeyDongle" hardware key
[04:37:14] *** Quits: mike18 (~geri@217-149-160-150.nat.highway.telekom.at) (Remote host closed the connection)
[04:37:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:19] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[04:40:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:eac0:c033:fea2:56dd) (Ping timeout: 250 seconds)
[04:41:23] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:42:03] *** Joins: Fault (~Fault@152.70.112.168)
[04:48:41] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[04:51:29] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[04:53:10] *** Quits: jplejacq (~jplejacq@24.224.100.40) (Ping timeout: 260 seconds)
[04:53:51] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[05:01:41] *** Quits: pah (~pah@user/pah) (Ping timeout: 250 seconds)
[05:02:16] *** Joins: rgrinberg (~textual@190.113.102.153)
[05:03:43] *** Joins: pah (~pah@user/pah)
[05:09:04] *** Quits: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi) (Ping timeout: 268 seconds)
[05:10:47] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[05:15:52] *** Parts: fulldecent (~textual@wikipedia/fulldecent) (Textual IRC Client: www.textualapp.com)
[05:24:13] *** wasd_ is now known as wasd
[05:24:30] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:24:32] *** Quits: wasd (~wasd@108.101.7.51.dyn.plus.net) (Changing host)
[05:24:32] *** Joins: wasd (~wasd@user/axis)
[05:25:29] *** Joins: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi)
[05:26:34] *** Joins: rgrinberg (~textual@190.113.102.153)
[05:30:02] *** Quits: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi) (Ping timeout: 268 seconds)
[05:30:42] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[05:32:45] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:35:02] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[05:37:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:03] <computerquip> Should basically always initialize variables anyways.
[05:38:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:03] *** ChanServ sets mode: +v npaperbot
[05:41:42] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[05:43:02] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[05:44:08] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:44:52] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[05:44:55] *** Joins: Fault (~Fault@152.70.112.168)
[05:45:10] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[05:47:45] *** Quits: Friithian (gunqqer@172.104.26.74) (Quit: Reconnecting)
[05:47:57] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[05:48:00] *** Joins: Friithian (~gunqqer@friithian.dev)
[05:48:16] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[05:50:15] *** Joins: linkgogogo (~linkgogog@117.82.106.141)
[05:50:25] *** Quits: Friithian (~gunqqer@friithian.dev) (Client Quit)
[05:50:34] *** Joins: Friithian (gunqqer@friithian.dev)
[05:52:17] *** Joins: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi)
[05:52:35] *** Quits: jkaye (~jkaye@2601:281:8300:7530:abba:ebaf:fffa:714f) (Ping timeout: 264 seconds)
[05:52:44] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:53:22] *** Joins: Fault (~Fault@152.70.112.168)
[06:01:38] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[06:07:37] *** Quits: bumbar (~bumbar@188-230-147-76.dynamic.t-2.net) (Remote host closed the connection)
[06:07:49] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:08:08] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:08:26] *** Quits: reset (~reset@user/reset) (Ping timeout: 245 seconds)
[06:10:49] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:11:09] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:12:11] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[06:13:49] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:14:08] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:14:21] *** Joins: malloy (~jimery@116.30.220.108)
[06:14:22] *** Quits: N4buc0- (~N4buc0@179.186.178.29.dynamic.adsl.gvt.net.br) (Ping timeout: 260 seconds)
[06:16:05] *** Quits: Xark (~Xark@47.156.11.28) (Ping timeout: 260 seconds)
[06:16:22] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:16:55] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[06:16:58] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:17:17] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:20:05] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:20:25] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:20:35] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:20:52] *** Joins: reset (~reset@user/reset)
[06:23:09] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:23:30] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:23:42] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:26:26] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:26:49] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:29:34] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:29:54] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:30:24] <vancz> how can i fix this circular dependency? https://wandbox.org/permlink/XEyBhMDASMSe3oSb
[06:31:23] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[06:31:35] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[06:32:49] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:33:00] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[06:33:20] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[06:33:22] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[06:33:23] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:36:04] <Alipha> vancz: it's not a circular dependency? move SemanticError's definition above EvalContext. note that you can open and close namespaces as many times as you'd like: https://wandbox.org/permlink/36NEpoUqwKNaClwj
[06:37:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[06:37:40] <vancz> hm ok
[06:37:46] <vancz> what if i didnt want to split the namespace?
[06:38:23] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:38:31] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Ping timeout: 256 seconds)
[06:39:04] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:44:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:44:48] <vancz> unrelated, can I return a reference to a "new Thing()" safely somehow?
[06:45:09] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[06:45:38] <Alipha> vancz: you have to at some point. you could forward declare EvalContext instead, but presumably eval needs to access the members of ctx, so you can only declare eval with a forward declaration of EvalContext. so then later you have to define EvalContext before you can define eval: https://wandbox.org/permlink/iGWM8bpwGyHSwUlJ
[06:45:48] <vancz> hm actually this works:
[06:45:50] <vancz>     ASTNode& a = new ASTNode();
[06:45:50] <vancz>     return a;
[06:45:58] <Alipha> that's a horrible idea
[06:45:59] <vancz> but return new ASTNode(); doesnt
[06:46:26] *** Joins: frost (~frost@user/frost)
[06:46:37] <vancz> yeah Im probably missing something about how references want to be used
[06:46:57] <vancz> i dont quite get the difference with pointers other than that references behave like normal variables
[06:47:03] <Alipha> vancz: ... is ASTNode supposed to be a polymorphic base class? (ie, does ASTNode have virtual member functions?)
[06:47:19] <vancz> i dont know yet, im not doing anything virtual yet
[06:47:36] <vancz> i have some things i might want to be polymorphic later on but im not sure how that will need to happen
[06:48:18] <vancz> well, the plan is to put all the logic in the Parser and Semantics namespaces and have ASTNode just be data
[06:48:21] <Alipha> vancz: are there other classes/structs you're going to inherit from ASTNode other than ComputingASTNode?
[06:49:03] <vancz> not right now no
[06:50:35] <Alipha> vancz: is your args vector going to store both ASTNodes and ComputingASTNodes?
[06:50:57] <vancz> it should be one or the other at any given time
[06:51:12] <Alipha> and is parse going to return either an ASTNode or a ComputingASTNode?
[06:52:29] <vancz> the idea was that id write Parser and Semantics generically and put specialized stuff in Tokenizer and EvalContext , though I'm not sure if that makes sense.
[06:52:29] <vancz> right now its going to return an ASTNode, the ComputingASTNode is there so i see it, but im not sure how it will be integrated
[06:52:58] <Alipha> vancz: so why not have parse return an ASTNode object instead of a pointer or reference?
[06:53:40] <vancz> I guess I could do that? I'm not really sure why I thought  I need a pointer or something.
[06:54:47] <vancz> why <Alipha> that's a horrible idea
[06:58:39] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[06:59:48] <Alipha> vancz: it's confusing and goes against what c++ programmers expect. in c++, if you have a reference to something, you don't expect that reference to "own" the object. references are used to refer/observe objects that someone else owns. and by "own" i mean, you're responsible for destroying the object. someone needs to delete the `new ASTNode()` that you made. so, assuming you have `ASTNode& a = new ASTNode();
[06:59:50] <Alipha> return a;` and parse is returning a reference, the caller would have to do: `ASTNode& node = parse(...); delete &node;` which is really weird, according to normal c++ practices
[07:00:00] <vancz> aha
[07:00:27] <vancz> yeah i didnt really get some of how to use & , i think that helps
[07:01:17] <Alipha> vancz: and best, modern c++ practices say that you shouldn't have to ever delete something yourself. so, first off, use objects whenever possible. but if not possible (often because you need polymorphism), use std::unique_ptr instead of new and delete
[07:01:17] *** Quits: llh (~llh@user/llh) (Ping timeout: 264 seconds)
[07:01:43] <Alipha> vancz: so i would recommend your args vector be `std::vector<std::unique_ptr<ASTNode>> args;`
[07:03:25] <Alipha> and your ASTNode actually needs a virtual destructor (`virtual ~ASTNode() = default;`) because if you're putting pointers to ComputingASTNode in that vector, when the unique_ptr deletes the objects, if you don't make the destructor virtual, it's going to call the ASTNode destructor instead of the ComputingASTNode destructor
[07:05:05] <vancz> oh ok
[07:05:43] <vancz> yeah i was generally trying to use unique_ptr and shared_ptr but i dont quite understand how i should be structuring/designing memory handling yet a lot of the time
[07:06:18] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[07:06:56] <vancz> i assume its for efficiency but its kind of annoying that you ahve to manually add virtual destructors and such to things you may want to subclass (?)
[07:07:52] <Alipha> vancz: virtual destructors aren't for efficiency, but for correctness
[07:08:43] <Alipha> Base *b = new Derived(); delete b;  // without a virtual destructor, `delete b;` will call ~Base(), but that's not correct. ~Derived() should be called because b points to a Derived object
[07:08:55] <vancz> No,  I mean - I assume it's not included by default for efficiency.
[07:09:01] <Alipha> ah, yes
[07:09:06] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:09:13] <Alipha> c++ is "don't pay for what you don't use"
[07:09:21] <vancz> aha
[07:09:45] <vancz> what about rtti? :P
[07:09:52] <vancz> (not sure about that but something something)
[07:09:54] <vancz> and exceptions :p
[07:09:57] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 250 seconds)
[07:10:00] <vancz> (though i heard you can turn them off)
[07:10:58] <Alipha> apparently "taking up more space in the executable" doesn't count as "cost", heh. rtti and exceptions have no speed cost if you don't use them
[07:11:16] <Alipha> but yes, rtti and exceptions make your executables bigger
[07:11:50] <vancz> oh right i think i saw something about the exception implementation making non-use zero cost at the cost of making use slower, or something
[07:11:53] <Alipha> though only classes/structs with virtual functions have rtti created for them
[07:14:55] <Alipha> .. and you don't technically need to make ASTNode's destructor virtual, but then you have to never destroy ComputingASTNode via a ASTNode pointer
[07:15:15] <vancz> aha
[07:15:25] <vancz> makes sense though
[07:19:01] <vancz> hm. cant an istringstream up(?)cast to istream?
[07:20:33] <vancz> calc2.cpp:166:26: error: no matching function for call to ‘_interpret_string(std::istringstream&)’
[07:20:33] <vancz> calc2.cpp:147:28: note: candidate: ‘template<class T> void CLI::_interpret_string(std::istream&)’
[07:20:43] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[07:21:18] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[07:21:23] *** Joins: knn (~kn@47.200.203.62)
[07:21:24] <vancz> calc2.cpp:166:31: note:   couldn’t deduce template parameter ‘T’
[07:21:45] <vancz> wait why do i even have that templated, oops
[07:22:14] <vancz> oh. because it needs it in the body. ugh i guess i need to do a more detailed paste
[07:23:27] <vancz> ok I just forgot to pass the parameter at the call site
[07:24:08] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[07:24:36] *** Quits: knn (~kn@47.200.203.62) (Client Quit)
[07:26:42] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Ping timeout: 260 seconds)
[07:27:29] *** Joins: earnestly (~earnest@user/earnestly)
[07:34:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:866a:9967:5f85:58dd)
[07:35:06] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[07:35:51] *** Joins: Fault (~Fault@152.70.112.168)
[07:38:47] *** Quits: jkaye (~jkaye@2601:281:8300:7530:866a:9967:5f85:58dd) (Ping timeout: 264 seconds)
[07:39:32] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 268 seconds)
[07:40:17] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:41:23] *** Joins: pulse (~pulse@user/pulse)
[07:44:11] *** Joins: CaCode- (~CaCode@user/cacode)
[07:46:47] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[07:48:08] *** Joins: great_taste (~great_tas@190.32.235.20)
[07:51:08] *** Joins: noarb (~noarb@user/noarb)
[07:57:47] *** Joins: fluter (~fluter@user/fluter)
[08:04:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:05:47] *** Quits: linkgogogo (~linkgogog@117.82.106.141) (Ping timeout: 256 seconds)
[08:05:49] *** Joins: tbcr- (~tbcr@107.13.189.161)
[08:06:22] *** Joins: Trollman- (~Trollmann@user/trollmann)
[08:06:26] *** Joins: llh (~llh@user/llh)
[08:09:33] *** Joins: murphy__ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com)
[08:10:45] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:11:27] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[08:13:18] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[08:13:51] *** Quits: ruediger (~ruediger@140.238.96.169) (*.net *.split)
[08:13:51] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (*.net *.split)
[08:13:51] *** Quits: murphy_ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com) (*.net *.split)
[08:13:51] *** Quits: tbcr_ (~tbcr@107.13.189.161) (*.net *.split)
[08:13:51] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[08:13:51] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[08:13:51] *** Quits: Xizor (~Xizor@151.ip-51-68-121.eu) (*.net *.split)
[08:13:51] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[08:13:51] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[08:13:52] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[08:14:28] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[08:15:31] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[08:17:25] *** Quits: emerent (~quassel@p200300cd573070b2ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[08:18:25] *** Joins: ruediger (~ruediger@140.238.96.169)
[08:18:25] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[08:18:25] *** Joins: cursey (~cursey@user/cursey)
[08:18:25] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[08:18:25] *** Joins: Xizor (~Xizor@151.ip-51-68-121.eu)
[08:18:25] *** Joins: rb (~augh@theguntretort.com)
[08:18:25] *** Joins: Sadale (~Sadale@user/sadale)
[08:18:39] *** Joins: emerent (~quassel@p200300cd573070b2ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:19:30] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[08:20:03] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[08:20:17] <vancz> Alipha: is there any reason i need the vector to have pointers or can i just make it a vector of ASTNode
[08:20:20] *** Joins: Fault (~Fault@152.70.112.168)
[08:31:01] <Alipha> vancz: a vector of ASTNodes won't be able to hold ComputingASTNodes. though it's unclear if it's a good idea for you to put (pointers to) ComputingASTNodes in this vector anyway
[08:31:32] <vancz> oh. polymorphism only happens to poitners/references??
[08:31:51] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[08:31:56] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Quit: WeeChat 2.8)
[08:32:03] <vancz> well, that statement probably needs a lot of qualification
[08:32:11] <Alipha> vancz: yes
[08:32:23] <vancz> h.u.h.
[08:34:16] <Alipha> ASTNode x; // the compiler allocates enough space for x to hold an ASTNode. it allocates sizeof(ASTNode) bytes for x. A ComputingASTNode is larger than a ASTNode, so you can't shove a ComputingASTNode into space only big enough for an ASTNode
[08:35:11] <Alipha> x = ComputingASTNode();  // what this does is simply copies the ASTNode portion of the ComputingASTNode into x and discards any extra members that were defined in ComputingASTNode
[08:35:18] <vancz> ok that makes sense i  guess
[08:42:12] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:53:10] *** Joins: caramel (~caramel@user/caramel)
[08:54:41] *** Joins: froggy (~froggy@2.235.241.212)
[08:56:06] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:57:11] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: Lost terminal)
[09:00:47] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[09:01:22] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[09:01:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:02:31] *** Joins: linkgogogo (~linkgogog@117.82.106.141)
[09:03:23] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:04:06] *** Joins: Fault (~Fault@152.70.112.168)
[09:04:15] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[09:04:53] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:06:09] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[09:06:56] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[09:09:50] *** Quits: ac_slater (~ac_slater@c-71-231-45-179.hsd1.wa.comcast.net) (Quit: WeeChat 3.2)
[09:13:15] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[09:13:26] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[09:28:11] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[09:28:24] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:30:41] *** Joins: Fault (~Fault@150.230.39.7)
[09:31:12] *** Quits: Guest92 (~Guest92@68.132.78.81) (Quit: Client closed)
[09:32:12] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:37:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:03] *** ChanServ sets mode: +v npaperbot
[09:39:25] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:42:30] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[09:44:15] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[09:44:27] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[09:50:03] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[10:01:08] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[10:03:25] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[10:06:52] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[10:08:22] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Remote host closed the connection)
[10:12:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:13:54] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[10:15:23] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:16:24] *** Joins: froggy_ (~froggy@2.235.241.212)
[10:16:43] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[10:18:08] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[10:18:53] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 250 seconds)
[10:18:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[10:19:30] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[10:19:37] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:22:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:24:16] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 245 seconds)
[10:25:46] *** Quits: froggy_ (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[10:26:02] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Ping timeout: 268 seconds)
[10:27:16] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[10:28:15] *** Joins: froggy (~froggy@2.235.241.212)
[10:28:56] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[10:29:51] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Client Quit)
[10:30:23] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[10:30:40] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[10:30:48] <pingpongball> Anybody know CFLAGS ?
[10:30:53] <pingpongball> Thank you
[10:31:25] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:31:38] <pingpongball> I'm compiling emacs with maxiumum efficiency while coding.
[10:31:59] <pingpongball> for this i've used --native-compilation, there is also a list for doing CFLAGS for better optimization.
[10:32:14] <pingpongball> People gave me
[10:32:15] <pingpongball> CFLAGS='-O3 -fomit-frame-pointer -march=native'
[10:32:35] <pingpongball> But i want to do with more , more , more optimization.
[10:33:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:34:40] *** Quits: engest (~engest@50.39.215.177) (Ping timeout: 268 seconds)
[10:35:54] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[10:35:55] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[10:36:57] <kalven> -O3 is for normies.. crank it up to -O99
[10:38:05] *** Joins: froggy (~froggy@2.235.241.212)
[10:39:00] *** Joins: Tas-sos (~Tas-sos@ppp079167211012.access.hol.gr)
[10:39:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:40:22] <pingpongball> =L  kalven
[10:40:55] <pingpongball> I've take from https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html , there is no -099
[10:41:30] <kalven> you need to compile your gcc with -DTRAINING_WHEELS=OFF first
[10:41:31] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[10:42:26] <pingpongball> oh i'm on debian, i've older version of c
[10:42:51] <TinoDidriksen> Unfortunately, CFLAGS and CXXFLAGS and compilers are off topic here. Ask #C++-general or the #gcc or irc://irc.oftc.net/llvm channels.
[10:43:02] <pingpongball> ahh thanks:)
[10:44:24] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[10:44:39] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[10:45:19] *** Joins: tbs (~tbs@p200300ce1710ed76f73827db0bba9c03.dip0.t-ipconnect.de)
[10:46:08] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:46:40] *** Quits: cation (cation@user/cation) (Remote host closed the connection)
[10:47:11] *** Joins: froggy (~froggy@2.235.241.212)
[10:47:12] *** Parts: tbs (~tbs@p200300ce1710ed76f73827db0bba9c03.dip0.t-ipconnect.de) ()
[10:47:36] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 245 seconds)
[10:47:46] *** Joins: Tempesta (~Tempesta@user/tempesta)
[10:49:56] *** Joins: cation (cation@user/cation)
[10:52:29] *** Quits: martiert_ (~martiert@173.38.220.46) (Remote host closed the connection)
[10:56:29] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: Client closed)
[10:57:48] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[10:59:12] *** Joins: martiert_work (~martiert@173.38.220.46)
[11:14:08] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:41fb:5c60:6504:346a)
[11:16:05] *** Quits: Ikkepop (~C-Man@78.31.190.82) (Ping timeout: 250 seconds)
[11:16:45] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Ping timeout: 256 seconds)
[11:20:31] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[11:24:49] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:29:47] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Ping timeout: 256 seconds)
[11:31:29] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[11:32:03] *** Quits: rahl (~rahl@102.114.19.10) (Ping timeout: 256 seconds)
[11:32:48] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[11:33:38] *** Joins: rahl (~rahl@102.114.43.243)
[11:33:52] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[11:35:33] *** pah is now known as pa
[11:36:12] *** Joins: froggy (~froggy@2.235.241.212)
[11:40:53] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[11:41:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[11:41:16] *** Quits: richbridger (~richbridg@089144202237.atnat0011.highway.a1.net) (Ping timeout: 268 seconds)
[11:42:46] *** Joins: froggy (~froggy@2.235.241.212)
[11:42:57] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[11:43:10] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:43:44] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:44:29] *** Joins: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net)
[11:48:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[11:48:04] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:49:35] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[11:52:11] *** Joins: andreasbuhr (~quassel@p549db9a2.dip0.t-ipconnect.de)
[11:52:14] *** Quits: andreasbuhr (~quassel@p549db9a2.dip0.t-ipconnect.de) (Client Quit)
[11:52:18] *** Joins: froggy (~froggy@2.235.241.212)
[11:53:02] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:54:49] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Read error: Connection reset by peer)
[11:56:59] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:56:59] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[11:57:04] *** Joins: pah (~pah@user/pah)
[11:57:17] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[11:57:30] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:57:33] *** Quits: martiert_work (~martiert@173.38.220.46) (Remote host closed the connection)
[12:00:35] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[12:01:14] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:04:17] *** Quits: pah (~pah@user/pah) (Ping timeout: 246 seconds)
[12:04:32] *** Joins: rendar (~rendar@user/rendar)
[12:04:33] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:04:44] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[12:04:46] *** Joins: pah_ (~pah@host-82-49-27-43.retail.telecomitalia.it)
[12:06:56] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[12:07:42] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[12:07:53] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[12:08:18] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:08:50] *** Joins: martiert_work (~martiert@173.38.220.46)
[12:09:54] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[12:10:05] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:11:50] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:13:43] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[12:15:46] *** Joins: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se)
[12:15:53] *** Parts: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se) ()
[12:15:56] *** Joins: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se)
[12:17:39] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[12:18:00] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[12:18:29] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[12:19:32] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[12:20:56] *** Quits: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (Ping timeout: 245 seconds)
[12:22:04] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[12:22:29] *** Quits: wondiws (~Jasper@94-215-229-69.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[12:23:09] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: Client closed)
[12:23:15] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[12:24:22] *** Joins: N4buc0- (~N4buc0@2804:7f4:3487:cd22:a52:66c1:ba81:4436)
[12:24:47] *** Joins: furrymcgee (~devuan@cgn-89-1-208-64.nc.de)
[12:25:31] *** Joins: robod34 (Username@79.113.195.239)
[12:26:16] *** Joins: evangeline (~Eleanor@178.79.105.181)
[12:29:59] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[12:31:19] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[12:33:30] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:38:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:39:59] *** Quits: N4buc0- (~N4buc0@2804:7f4:3487:cd22:a52:66c1:ba81:4436) (Remote host closed the connection)
[12:40:11] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: Client closed)
[12:40:22] *** Joins: N4buc0- (~N4buc0@2804:7f4:3487:cd22:a52:66c1:ba81:4436)
[12:40:47] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) ()
[12:41:01] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[12:41:36] *** Joins: nik (~nik777@vpn-users-dip-pool165.dip.cf.ac.uk)
[12:45:09] *** Joins: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[12:45:56] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:46:23] *** Joins: N4buc0 (~N4buc0@179.186.178.29.dynamic.adsl.gvt.net.br)
[12:46:29] *** Quits: N4buc0- (~N4buc0@2804:7f4:3487:cd22:a52:66c1:ba81:4436) (Remote host closed the connection)
[12:52:02] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[12:56:27] *** Quits: N4buc0 (~N4buc0@179.186.178.29.dynamic.adsl.gvt.net.br) (Remote host closed the connection)
[12:57:03] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 250 seconds)
[12:57:27] *** Joins: cation (cation@user/cation)
[12:57:55] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 250 seconds)
[13:00:03] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[13:01:59] *** Quits: linkgogogo (~linkgogog@117.82.106.141) (Read error: Connection reset by peer)
[13:03:07] *** Joins: froggy (~froggy@2.235.241.212)
[13:04:55] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:21] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[13:12:52] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[13:19:29] <imi> hi, how do I specialize a template for lambdas?
[13:22:31] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[13:22:56] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[13:29:38] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:32:26] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[13:32:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[13:32:50] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[13:35:58] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[13:36:19] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:36:53] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[13:37:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:37:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:04] *** ChanServ sets mode: +v npaperbot
[13:39:33] <urdh> imi: what do you mean: a specific lambda? any lambda with a specific signature? any callable with a specific signature? any lambda/callable with *any* signature?
[13:40:36] *** pah_ is now known as pa
[13:40:45] *** Quits: pa (~pah@host-82-49-27-43.retail.telecomitalia.it) (Changing host)
[13:40:45] *** Joins: pa (~pah@user/pah)
[13:41:55] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[13:46:11] <irc-open-up> hi whats the header for sort function, trying to sort a string..
[13:46:25] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:46:58] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Ping timeout: 256 seconds)
[13:47:53] <urdh> irc-open-up: <algorithm>
[13:47:55] <urdh> irc-open-up: see https://en.cppreference.com/w/cpp/algorithm/sort
[13:49:32] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[13:50:16] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:51:43] *** Quits: nik (~nik777@vpn-users-dip-pool165.dip.cf.ac.uk) (Quit: Leaving)
[13:57:08] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[13:58:04] <irc-open-up> urdh: im still getting error
[13:59:15] *** Joins: pingpongball (~pingpongb@43.228.192.104)
[13:59:47] <anyone> pastesite or it didn't happen
[14:01:10] <irc-open-up> http://0x0.st/-RzB.cpp  urdh anyone here is the pastesite
[14:01:21] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[14:02:02] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:02:56] <anyone> the heck is that even supposed to do
[14:03:10] <anyone> you're even misusing the sort function
[14:03:30] <irc-open-up> anyone: its the solution to this problem https://codeforces.com/problemset/problem/339/A
[14:03:41] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[14:04:50] <anyone> well it can't be a solution, since it does not even compile.
[14:05:17] <irc-open-up> #include<bits/stdc++.h>
[14:05:18] <irc-open-up> using namespace std;
[14:05:18] <irc-open-up> int main()
[14:05:18] <irc-open-up> {
[14:05:18] <irc-open-up> 	string s;
[14:05:20] <irc-open-up> 	cin>>s;
[14:05:20] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:05:22] <irc-open-up> 	
[14:05:25] <irc-open-up> 	sort(s.begin(),s.end());
[14:05:27] <irc-open-up> 	
[14:05:30] <irc-open-up> 	int i;
[14:05:32] <irc-open-up> 	for(i=s.length()/2;i<s.length()-1;i++)
[14:05:35] <irc-open-up> 		cout<<s[i]<<"+";
[14:05:37] <irc-open-up> 	cout<<s[i];
[14:05:40] <irc-open-up> 	cout<<endl;
[14:05:41] <leduyquang753> Please do not paste.
[14:05:42] <irc-open-up> 	return 0;
[14:05:45] <irc-open-up> anyone: this guy did it and its is accepted
[14:05:48] <irc-open-up> sorry
[14:05:56] *** Quits: pingpongball (~pingpongb@43.228.192.104) (Quit: Client closed)
[14:06:24] <irc-open-up> leduyquang753: how do you guys use pastebins from terminal any shortcut ?
[14:06:34] <leduyquang753> I don't.
[14:07:15] <irc-open-up> leduyquang753: then why am i sorry for ? hehe
[14:07:40] <leduyquang753> I mean I don't use pastebin from a terminal.
[14:07:44] <leduyquang753> I just open the browser.
[14:08:04] <irc-open-up> anyone: whats wrong with this code? its accepted answer
[14:08:21] <anyone> obviously you need to split on '+' first
[14:08:33] <anyone> (well, from a logic standpoint, anyway)
[14:08:52] <irc-open-up> yea his logic makes total sense
[14:09:21] <irc-open-up> or i saw someone doing it with swap function
[14:09:30] <irc-open-up> can sommeone plz help
[14:09:34] <anyone> However, since the input is constrainted and does not contain double-digit numbers, it's conceivable to treat each character as a number in its own right (and ignore all the +s)
[14:10:01] *** Joins: ko (~i.am@user/marlboro)
[14:12:44] <anyone> {auto s="3+2+1+2+3+2+2+1"s;sort(s.begin(),s.end());bool first=true;for(char c:s){if(!isdigit(c))continue;if(!first)cout<<"+";cout<<c;first=false;}}
[14:12:45] <geordi> 1+1+2+2+2+2+3+3
[14:14:10] *** Quits: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[14:15:11] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Ping timeout: 246 seconds)
[14:18:09] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Quit: Shutdown)
[14:21:06] <furrymcgee> http://paste.debian.net has a web api with multiple clients eg https://github.com/vetinari/debpaste
[14:21:22] <anyone> {auto s="2+1+3"s;sort(begin(s),end(s));int g=0;for(char c:s){if(c!='+'){if(g++)cout<<'+';cout<<c;}}}
[14:21:22] <geordi> 1+2+3
[14:21:27] <anyone> that's the shortest version I can currently think of
[14:21:31] *** Joins: earnestly (~earnest@user/earnestly)
[14:25:18] <irc-open-up> anyone: plz can u pastebin and send ? me being ultra noob its hard to understand
[14:29:28] <anyone> well there's your learning opportunity
[14:31:22] *** Quits: malloy (~jimery@116.30.220.108) (Quit: WeeChat 3.0)
[14:33:42] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:34:00] <irc-open-up> anyone: plz , and is +geordi a bot?
[14:34:16] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:34:17] <irc-open-up> which irc client you guys use?
[14:35:57] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[14:36:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[14:36:41] *** Quits: cpuid (~cpuid@co5.at) (Quit: ZNC 1.8.2 - https://znc.in)
[14:37:17] *** Joins: cpuid (~cpuid@co5.at)
[14:37:47] <anyone> A wise man once told me "if you can't tell the difference [between a set of options], does it matter [whether any particular option is chosen]?"
[14:38:58] *** Joins: onizu (uid373383@uxbridge.irccloud.com)
[14:42:50] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[14:43:14] <furrymcgee> join #libera
[14:45:36] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[14:45:50] *** Joins: useretail (~useretail@185.132.19.151)
[14:47:59] *** Joins: cation21 (cation@user/cation)
[14:48:47] *** Quits: cation (cation@user/cation) (Ping timeout: 246 seconds)
[14:51:14] *** cation21 is now known as cation
[14:51:16] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[14:52:09] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:54:04] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[14:54:30] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[14:56:16] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[15:02:58] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[15:07:34] *** Joins: AmR (~AmREiSa@156.199.86.69)
[15:09:47] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Quit: WeeChat 2.8)
[15:17:43] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[15:25:35] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: Lost terminal)
[15:26:02] <irc-open-up> anyone: true
[15:26:59] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 250 seconds)
[15:30:00] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[15:31:33] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[15:32:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:35:12] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[15:35:42] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[15:39:13] *** Quits: chozorho (~chozorho@2601:146:300:c30::685f) (Remote host closed the connection)
[15:39:35] *** Joins: chozorho (~chozorho@2601:146:300:c30::8489)
[15:40:35] *** Quits: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc) (Quit: Bridge terminating on SIGTERM)
[15:40:37] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: Bridge terminating on SIGTERM)
[15:40:39] *** Quits: Stewart (~stewart@2001:470:69fc:105::1:6cd) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: Cupcake[m] (~cupcakezo@2001:470:69fc:105::1:17bd) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: pillarxyz[m] (~pillarxyz@2001:470:69fc:105::1:1985) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: kikijiki[m] (~kikijiki@user/kikijiki) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Bridge terminating on SIGTERM)
[15:40:44] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[15:40:45] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: equinox[m] (~momoshiki@2001:470:69fc:105::fe92) (Quit: Bridge terminating on SIGTERM)
[15:41:22] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[15:47:12] *** Joins: Ikkepop (~C-Man@78.31.190.82)
[15:49:05] <robod34> hello guys
[15:49:34] *** Joins: proller (~p@2a02:6b8:0:40c:478b:c8e7:fd11:fb99)
[15:49:44] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Remote host closed the connection)
[15:50:42] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:54:20] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:54:44] <robod34> https://paste.gg/p/anonymous/2bf77e0859f24922831c15b0285c07d8
[15:55:03] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[15:55:14] <robod34> i have that small function and I get error C2440 when i compile the code
[15:55:39] <robod34> how should I go about returning the pointer of the created bitmap?
[15:56:06] <TinoDidriksen> You're missing a "new"
[15:56:16] <TinoDidriksen> Gdiplus::Bitmap* myBitmap = new ...
[15:56:48] <robod34> TinoDidriksen, i get the error that the constructor new is not defined
[15:56:54] *** Joins: m1cl[m] (~m1cl@2001:470:69fc:105::2d57)
[15:57:14] <TinoDidriksen> No, as in Gdiplus::Bitmap* myBitmap = new Gdiplus::Bitmap(width,height,PixelFormat32bppRGB);
[15:57:20] <ville> constructor and new are different things. new, in that particular context is an expression which ends up trying to call one of your constructors
[15:57:45] <TinoDidriksen> And with that you can simplify to: auto myBitmap = new Gdiplus::Bitmap(width,height,PixelFormat32bppRGB);
[15:58:18] *** Joins: equinox[m] (~momoshiki@2001:470:69fc:105::fe92)
[15:58:32] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[15:58:32] *** Joins: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee)
[15:58:32] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[15:58:32] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[15:58:32] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[15:58:32] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[15:58:32] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[15:58:44] *** Joins: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc)
[15:58:44] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[15:58:44] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[15:58:44] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[15:58:56] *** Joins: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0)
[15:58:56] *** Joins: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482)
[15:58:56] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[15:58:57] <robod34> https://i2.paste.pics/EWS60.png
[15:59:05] <robod34> tons of symbols no longer resolve
[15:59:08] *** Joins: pillarxyz[m] (~pillarxyz@2001:470:69fc:105::1:1985)
[15:59:11] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[15:59:21] *** Joins: Cupcake[m] (~cupcakezo@2001:470:69fc:105::1:17bd)
[15:59:34] *** Joins: Stewart (~stewart@2001:470:69fc:105::1:6cd)
[15:59:34] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[15:59:50] <ville> !give robod34 undefined reference
[15:59:52] <TinoDidriksen> No. Those were later errors.
[15:59:53] <nolyc> robod34: Undefined reference is a linker error. It's not a compile error. #includes don't help. You did not define the thing in the error message, you forgot to link the file that defines it, you forgot to link to the library that defines it, or, if it's a static library, you have the wrong order on the linker command line. Check which one. (Note that some linkers call it an unresolved external)
[16:00:05] <TinoDidriksen> They're not new errors - you just never made it that far in the build process before.
[16:00:22] <ville> robod34: as to how to coax your linker to link with required libraries that's a matter for #c++-general channel
[16:00:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[16:00:52] <ville> !give robod34 general
[16:00:55] <nolyc> robod34: #C++-general for algorithms, libraries, practices, projects, tools etc.
[16:02:08] <robod34> thank you
[16:02:30] <robod34> so, the conclusion is that I am not properly linking the gdi+ library?
[16:02:51] <robod34> i added includes for windows.h and gdiplus.h, that is all
[16:04:53] *** Joins: med_ (uid146495@helmsley.irccloud.com)
[16:05:34] *** Quits: med_ (uid146495@helmsley.irccloud.com) (Client Quit)
[16:08:27] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[16:08:32] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:11:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[16:14:00] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[16:17:29] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[16:18:14] *** Joins: Perry (~perry@coffee-break.at)
[16:18:33] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Quit: Leaving.)
[16:18:47] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:20:33] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[16:20:40] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Client limit exceeded: 20000)
[16:20:58] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[16:20:58] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (Quit: Client limit exceeded: 20000)
[16:21:00] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Client limit exceeded: 20000)
[16:21:06] *** Quits: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482) (Quit: Client limit exceeded: 20000)
[16:22:23] *** Quits: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee) (Quit: Client limit exceeded: 20000)
[16:22:59] <imi> urdh: let's say I mean a lambda with a specific signature.
[16:24:04] *** Joins: m1cl[m] (~m1cl@2001:470:69fc:105::2d57)
[16:24:04] *** Joins: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee)
[16:24:04] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[16:24:04] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[16:24:04] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[16:24:04] *** Joins: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482)
[16:24:04] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[16:27:13] <urdh> imi: you'd probably either "just" specialize it, or use std::is_invocable
[16:27:30] <urdh> imi: a small example providing some context would make it easier to answer your question
[16:32:16] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Quit: Konversation terminated!)
[16:32:18] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[16:34:34] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:35:17] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[16:40:02] <urdh> imi: here's an example using enable_if and is_invocable, though - https://godbolt.org/z/7dPx6YWxs
[16:41:21] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[16:41:42] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[16:44:29] *** Joins: constxd (~brad@192.75.101.164)
[16:56:51] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:57:05] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:57:11] <imi> how would you "just" specialize it?
[16:57:23] <imi> what's the syntax?
[16:57:30] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:58:22] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[16:58:48] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:01:40] <furrymcgee> I think the example is only partial specialization
[17:03:30] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[17:04:29] *** Quits: baltazar (~baltazar@178-164-254-231.pool.digikabel.hu) (Ping timeout: 250 seconds)
[17:04:41] *** Quits: mitch0 (~mitch@178-164-254-231.pool.digikabel.hu) (Ping timeout: 256 seconds)
[17:06:12] *** Joins: baltazar (~baltazar@84-236-12-229.pool.digikabel.hu)
[17:06:31] *** Joins: mitch0 (~mitch@84-236-12-229.pool.digikabel.hu)
[17:06:42] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[17:07:56] <urdh> imi: hm, actually, come to think of it, you wouldn't
[17:08:38] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[17:08:39] <urdh> since the type of the lambda is unique
[17:09:02] <urdh> so full specialization doesn't really make sense
[17:09:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[17:09:52] <urdh> (though I guess if you really want to you could use decltype - https://godbolt.org/z/4bTzavKKa)
[17:09:54] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:11:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:12:07] *** Quits: constxd (~brad@192.75.101.164) (Quit: WeeChat 2.8)
[17:19:17] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 246 seconds)
[17:21:25] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[17:22:09] <imi> so basivally a lambda is like a functor, except that every lambda has a unique type (even if the fingerprints match)?
[17:22:16] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:23:13] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[17:23:49] *** Joins: pingpongball (~pingpongb@103.94.252.81)
[17:23:51] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:23:57] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[17:25:31] <BtbN> Pretty much. The only guarantee is that it'll fit into std::function
[17:26:52] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:28:11] *** Joins: pulse (~pulse@user/pulse)
[17:28:25] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:31:07] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:31:25] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:32:11] *** Joins: dld (~dld@2601:197:600:1210:9992:b3e2:af1a:fbc2)
[17:35:16] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[17:35:52] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[17:37:31] *** Joins: jplejacq (~jplejacq@68.71.164.39)
[17:37:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:04] *** ChanServ sets mode: +v npaperbot
[17:39:01] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:40:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:6396:dd82:eabc:bcd7)
[17:40:25] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[17:42:48] *** Quits: pingpongball (~pingpongb@103.94.252.81) (Quit: Client closed)
[17:43:00] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:46:42] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:46:56] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:48:03] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:48:12] <Eelis> that's not quite true. there are a whole bunch of guarantees about lambda closure types, and the fact that you can initialize a std::function with a lambda follow from those guarantees, but the guarantees themselves never mention std::function
[17:48:18] <Eelis> http://eel.is/c++draft/expr.prim.lambda.closure
[17:48:29] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:51:09] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:55:20] *** Joins: engest (~engest@50.53.184.87)
[17:55:26] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:57:24] *** Quits: jplejacq (~jplejacq@68.71.164.39) (Quit: Leaving.)
[17:57:37] *** Joins: jplejacq (~jplejacq@68.71.164.39)
[17:57:46] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:58:12] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:00:20] *** Joins: lidenbrock (~lidenbroc@186.192.87.8)
[18:01:21] *** lidenbrock is now known as eron
[18:04:41] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[18:05:47] *** Joins: great_taste (~great_tas@190.32.235.20)
[18:06:15] *** Quits: martiert_work (~martiert@173.38.220.46) (Remote host closed the connection)
[18:06:41] *** Quits: jplejacq (~jplejacq@68.71.164.39) (Ping timeout: 268 seconds)
[18:08:01] *** Joins: froggy (~froggy@2.235.241.212)
[18:11:31] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[18:12:18] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[18:13:29] *** Joins: xkuru (~xkuru@user/xkuru)
[18:13:35] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa)
[18:13:40] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[18:17:16] *** Joins: rgrinberg (~textual@200.5.63.76)
[18:18:50] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[18:24:02] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:24:04] *** Quits: eron (~lidenbroc@186.192.87.8) (Ping timeout: 256 seconds)
[18:31:32] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:31:59] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Ping timeout: 268 seconds)
[18:32:20] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Read error: Connection reset by peer)
[18:32:37] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:35:53] *** Joins: martiert_work (~martiert@173.38.220.41)
[18:36:44] *** Joins: jkaye (~jkaye@2601:281:8300:7530:eb77:89f5:e0e9:4928)
[18:38:39] *** Joins: constxd (~brad@192.75.101.164)
[18:38:44] <constxd> kings
[18:39:22] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[18:39:39] <constxd> so im reading through some code and i notice a bunch of functions start with this line: lockMutex();
[18:39:53] <constxd> i go look at the implementation of that function and it's just this
[18:40:15] <constxd> void lockMutex() { lock_guard<mutex> lock(m_mutex); }
[18:40:15] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 250 seconds)
[18:40:21] <CarloWood> lol
[18:40:29] <constxd> this is useless right?
[18:40:32] <CarloWood> delete everything :)
[18:40:46] <constxd> the lock goes out of scope immediately and the caller does not actually have a lock for the rest of their body
[18:41:09] <CarloWood> Very very sometimes that would be useful; but I doubt it.
[18:41:47] <constxd> yeah im trying to think of why it might be useful to intentionally take a lock and immediately give it up
[18:42:04] <constxd> but im leaning toward it just being a silly mistake
[18:44:06] <CarloWood> The only instance that I can think of in combination with a conditional variables, ie see https://stackoverflow.com/a/52671238/1487069
[18:44:12] <CarloWood> Look for the code:
[18:44:22] <CarloWood>     cancel_mutex.lock();
[18:44:23] <CarloWood>     cancel_mutex.unlock();
[18:44:27] <CarloWood> in stop()
[18:45:18] <CarloWood> I don't think this is the case in your case. It's just wrong/stupid yes.
[18:45:22] *** Joins: r-g (~r-g@51.158.144.32)
[18:45:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[18:48:39] <Alipha> constxd: I wonder if that was originally a macro and someone "cleaned up the code" and turned it into a function
[18:49:26] <Alipha> Because this would make sense: #define lockMutex() lock_guard<mutex> lock(m_mutex)
[18:49:56] *** Quits: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c) (Ping timeout: 246 seconds)
[18:50:49] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[18:59:55] *** Joins: geonicz (~geonicz@86.57.152.167)
[19:01:20] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[19:03:42] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[19:05:01] <constxd> yeah when i first saw the call i was expecting it to be defined as a macro
[19:06:31] <rpav> or someone really doesn't understand raii .. though an `auto lock(mutex& m) { return lock_guard<mutex>(m); }` might make sense
[19:07:08] <CarloWood> Man, wtf... I get this error: https://bpa.st/DRTQ
[19:07:15] <CarloWood> If I replace line 5 with:
[19:07:19] <rpav> `auto mlock = lock(m);` saves a bit and would avoid MVP
[19:07:22] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[19:07:35] <CarloWood> typename aithreadsafe::Wrapper<UnlockedCommandPool<pool_type>, aithreadsafe::policy::Primitive<std::mutex>>::wat const& m_pool_w;
[19:07:43] <CarloWood> this is compiles fine... what is going on?
[19:08:05] <CarloWood> then it* compiles fine
[19:08:24] <ville> a variable needs a type
[19:09:07] <CarloWood> The type is `typename CommandPool::wat const&`
[19:09:25] <ville> when you've something depending on template argument it's interpreted as non-type by default, so stick a typename to make it a type
[19:09:45] <CarloWood> The 'typename' is there?
[19:09:55] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[19:10:12] <ville> well it's unclear what you're asking so i am just guessing here
[19:11:10] <rpav> what is aithreadsafe::Wrapper<...>
[19:11:45] <tinloaf> I have a `template<class Func> struct Foo {…}` that is being passed a lambda of type `Func`. I know that `Func` takes a single argument of type `T&` (for some type T, which might not be default-constructible). I want to determine the return type of `Func`. If `Func` would take `T` instead of `T&`, I could to `decltype(std::declval<Func>()(std::declval<T>()))`. But since the type of `declval<T>()` is
[19:11:47] <tinloaf> `T&&`, that can't bind to `T&`, which breaks the case that my `Func` takes `T&`. How can I solve this?
[19:11:56] <ville> !give tinloaf testcase
[19:11:57] <nolyc> tinloaf: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[19:13:04] <CarloWood> ville: https://bpa.st/CRZQ
[19:13:27] <ville> !give CarloWood testcase
[19:13:29] <nolyc> CarloWood: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[19:13:47] <CarloWood> rpav: that is a class that has a 'using wat = some type'.
[19:13:59] <CarloWood> I use it all over the place that works.
[19:14:29] <rpav> oh, duh, it's a template using
[19:14:39] <rpav> you need CommandPool<> at least
[19:14:41] <CarloWood> yeah, I just see :/
[19:14:51] <CarloWood> thanks man (see no "testcase" needed)
[19:15:20] <rpav> more complete code is definitely helpful of course ;)
[19:15:31] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:16:00] <ville> CarloWood: yes but they are required. your ability to participate on the channel will depend on you making them in the future
[19:16:14] <rpav> for tinloaf's example too .. describing in english is a lot less useful than actual code ;(
[19:17:23] <tinloaf> This should illustrate my problem: https://wandbox.org/permlink/3d24mJ6JfXbHBedW
[19:18:46] <CarloWood> tinloaf: you can remove the && from the type with some std:: that I can't remember.
[19:19:39] <tinloaf> CarloWood: std::remove_reference? That only gives me a type, not an object (in an unevaluated context) that I could pass to Func
[19:19:51] <CarloWood> https://en.cppreference.com/w/cpp/types/remove_reference yes
[19:20:13] <CarloWood> std::remove_reference(declval<T>()) no?
[19:20:47] <CarloWood> std::remove_reference<declval<T>()>::type even
[19:20:55] <CarloWood> or well
[19:21:00] <CarloWood> something like that :)
[19:21:30] <tinloaf> Well yeah, something like that, but … what? :-D I can't figure it out. std::remove_reference<declval…> can't work, you now have an object in your <…>
[19:21:52] <rpav> probably not the best way to get a function return type
[19:22:25] <tinloaf> std::remove_reference<std::declval<SomeType>> wouldn't be any good, then I'm back to a non-default-constructible type.
[19:23:08] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[19:24:24] <kalven> tinloaf: std::result_of ?
[19:26:22] <tinloaf> kalven: okay, you got me. Actually, I'm trying to do even more. I'm trying to use this in a SFINAE-enable-if, not "only" determine the result type.
[19:27:20] *** Parts: jhujhiti (~jhujhiti@user/jhujhiti) ()
[19:29:16] *** Joins: jrqc (~rofl@2603:3016:1e01:b960:68cb:6460:9f4d:2934)
[19:30:26] *** Joins: horribleprogram (~user@user/horribleprogram)
[19:30:27] <horribleprogram> hey guys
[19:30:36] <horribleprogram> is there a way to compile code without move semantics to assembly
[19:34:00] <imi> then can I specialize a template for lambdas using std::function<void(int,int)> ?
[19:40:10] <rpav> tinloaf: https://godbolt.org/z/61fG1rbzY <- an abbreviated version of the stuff i use to extract function signature info
[19:41:57] <rpav> the variations for extracting function info are a bit annoying/tricky/unobvious as template stuff goes
[19:43:12] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[19:45:09] <tinloaf> rpav: This is an example of what I actually want to do: https://godbolt.org/z/PvY1Ejfz9
[19:45:37] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[19:45:52] <tinloaf> Sorry for that very ugly template in `computeAcceptsTwoParameters` - there's probably a less bloated way of doing this.
[19:45:55] <Alipha> rpav: https://github.com/alipha/cpp/blob/master/function_traits/function_traits.hpp :-)
[19:45:56] <rpav> though really the main purpose of the additional stuff i have is capturing the actual parameter list and being able to duplicate function signatures
[19:46:04] <PJBoy> was just about to link that file
[19:46:17] *** Joins: pah (~pah@user/pah)
[19:46:22] <rpav> Alipha: nice!
[19:47:04] * Alipha wonders if he should add support for volatile member functions
[19:47:08] <rpav> but if it was written in 2021 a bit late for my purposes ;(
[19:47:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6396:dd82:eabc:bcd7) (Ping timeout: 264 seconds)
[19:47:20] <tinloaf> rpav: Thanks for your example. That's interesting, so the template specialization with the function type does match a lambda?
[19:47:27] <tinloaf> Even though a lambda has a "magic" type?
[19:47:37] <rpav> tinloaf: yeah there are a lot of others too; you might want to look at Alipha's code
[19:48:49] <rpav> lambda having a unique type doesn't matter since the type is a class, and the template can "match" it
[19:48:59] <rpav> it isn't magic
[19:49:55] <Alipha> { auto foo = [](int, float) {}; auto op = &foo.operator(); cout << TYPE(op); }
[19:49:55] <geordi> error: ISO C++ forbids taking the address of a bound member function to form a pointer to member function.  Say '&main(int, char**)::<lambda(int, float)>::operator()'
[19:49:58] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[19:50:14] <Alipha> Oh, boo
[19:50:18] <tinloaf> Ah, i missed that you do extract_function<decltype(F::operator())> - that gets you the function signature type from the "magic" lambda type.
[19:50:26] <PJBoy> volatile qualified member functions are kinda pointless though tbf
[19:50:32] <Alipha> tinloaf: yep
[19:51:10] <horribleprogram> auto foo = []<typename T1, typename T2>(T1 a, T2 b ) {}; auto op = &foo.operator();
[19:51:21] <horribleprogram> { auto foo = []<typename T1, typename T2>(T1 a, T2 b ) {};
[19:51:21] <horribleprogram> 		 auto op = &foo.operator(); }
[19:51:21] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[19:51:21] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[19:51:51] <horribleprogram> it should resolve
[19:52:20] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:52:23] <PJBoy> why should it?
[19:52:28] <Alipha> tinloaf: note that my code doesn't work with `auto` template parameters, eg, [](auto x) { return x * 2; }
[19:52:29] <horribleprogram> is this C++20
[19:52:34] <horribleprogram> oh
[19:52:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[19:52:45] <PJBoy> you can't form pointers to templates
[19:52:54] <rpav> template pointers!
[19:52:59] <PJBoy> leave
[19:53:03] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[19:53:16] <PJBoy> I guess that's a thing
[19:53:28] <rpav> probably not how i was imagining
[19:53:32] <horribleprogram> oh
[19:53:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[19:54:07] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Ping timeout: 256 seconds)
[19:54:08] <horribleprogram> well he's got a point
[19:54:11] <horribleprogram> variable templates
[19:54:14] <horribleprogram> lol
[19:55:16] <PJBoy> { op<int, float>; } auto foo = []<typename T1, typename T2>(T1 a, T2 b ) {}; template<typename... Ts> auto op = &foo.operator()<Ts...>;
[19:55:17] <geordi> error: assuming pointer to member '<lambda(T1, T2)> [with T1 = int; T2 = float]'
[19:55:18] <PJBoy> almost works
[19:55:30] <PJBoy> idk what kind of error message that is
[19:55:56] <PJBoy> << op<int, float>; auto foo = []<typename T1, typename T2>(T1 a, T2 b ) {}; template<typename... Ts> auto op = &decltype(foo)::operator()<Ts...>;
[19:55:57] <geordi> true
[19:56:00] <PJBoy> but it works if you do it properly
[19:56:04] <horribleprogram> :)
[19:56:38] <Pajus> looks like magic :x
[19:56:42] <PJBoy> and hits the ostream bool overload, ofc
[19:56:45] *** Joins: pah (~pah@user/pah)
[19:57:17] <PJBoy> it's not so magical
[19:57:26] <PJBoy> lambdas are just structs with an operator()
[19:57:36] <horribleprogram> yeah
[19:57:40] <PJBoy> and that lambda has template parameters, so its operator() is a template
[19:57:55] <PJBoy> so the `op` template there just forwards template arguments to the operator() tempalte
[19:58:13] <horribleprogram> but ur still "instantiating it"
[19:58:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:58:24] <PJBoy> and then &ClassName::method_name is the syntax for forming a member pointer
[19:58:36] <PJBoy> where I use decltype to get the class name
[19:59:21] <rpav> volatile and inline types when
[19:59:41] <rpav> template<volatile typename T> struct X { ... };
[20:00:03] <PJBoy> can always volatile constrain a concept
[20:00:15] <rpav> sure but that would apply the the value
[20:00:21] *** Quits: geonicz (~geonicz@86.57.152.167) (Remote host closed the connection)
[20:00:21] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Ping timeout: 256 seconds)
[20:00:43] <rpav> "to the"
[20:01:01] <PJBoy> so what's the semantics of volatile there?
[20:01:18] <rpav> i have no idea, probably something unintuitive
[20:01:44] *** Joins: pulse_ (~pulse@user/pulse)
[20:02:03] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[20:03:02] *** Joins: wladimir (~doforlove@user/doforlove33)
[20:03:14] *** wladimir is now known as ethrl
[20:04:53] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[20:15:02] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:15:15] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[20:17:28] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[20:18:56] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a915:ec4b:44f7:de65)
[20:18:57] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a915:ec4b:44f7:de65) (Changing host)
[20:18:57] *** Joins: skapata (~Skapata@user/skapata)
[20:22:41] *** Quits: obiwahn (~heini@user/obiwahn) (Quit: obiwahn)
[20:24:15] *** Joins: jonbryan (~ea@user/jonbryan)
[20:27:09] *** Quits: wickedmic (~wickedmic@wickedmic.com) (Ping timeout: 265 seconds)
[20:28:38] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:28:38] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[20:28:40] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[20:31:04] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:31:04] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Client Quit)
[20:32:28] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[20:37:38] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[20:39:34] *** Joins: leah2 (~leah@vuxu.org)
[20:40:00] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:40:45] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Quit: WeeChat 3.3)
[20:41:22] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[20:42:37] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:44:03] *** Joins: Dave_R (~Dave_R@home.amunra.co.uk)
[20:44:17] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[20:45:40] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[20:46:40] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[20:46:40] *** Joins: nortoh (~nortoh@user/nortoh)
[20:48:33] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:49:07] *** Joins: moontime0001 (~moontime1@2a02:a310:c15d:cb80:efaa:dddc:3182:9de)
[20:51:32] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[20:51:56] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:52:01] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:52:54] *** Quits: ethrl (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[20:53:37] *** Joins: karakedi (~eAC53C340@user/karakedi)
[20:53:54] *** Joins: N4buc0 (~N4buc0@179.186.178.29.dynamic.adsl.gvt.net.br)
[20:55:14] *** Joins: magla (~gelignite@55d446ec.access.ecotel.net)
[20:56:31] *** sven_ is now known as noent
[20:57:59] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[20:58:44] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:33] *** pulse_ is now known as pulse
[20:59:56] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[21:00:59] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[21:01:10] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:02:10] *** Joins: pah (~pah@user/pah)
[21:07:13] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[21:08:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[21:09:15] *** Joins: pah (~pah@user/pah)
[21:14:01] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[21:15:21] *** Joins: pah (~pah@user/pah)
[21:16:52] *** Quits: furrymcgee (~devuan@cgn-89-1-208-64.nc.de) (Quit: leaving)
[21:25:41] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[21:25:53] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Ping timeout: 268 seconds)
[21:29:28] <CarloWood> Can this be made working? https://wandbox.org/permlink/fyomcMMLZI0rxSkT
[21:30:51] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[21:31:21] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[21:31:28] <CarloWood> I could define f() also in AW, but assuming there are a lot such functions with complex arguments, I'd rather have a trick that 'inserts' a parameter at the start, without having to know about the actual function name.
[21:32:46] *** pah is now known as pa
[21:32:48] <imMute> I don't think that's possible with plain C++.  Maybe with reflection eventually.
[21:34:26] <CarloWood> It seems that what is needed is that a_w has to see the parameters.
[21:35:19] <CarloWood> It can then do something with them (ie, pack it into a tuple and insert something in front of that), but then it has to pass that back to the caller, because only the caller knows the function name :/.
[21:35:28] *** Joins: pingpongball (~pingpongb@103.94.252.81)
[21:35:37] <CarloWood> Maybe using a lambda?
[21:36:31] <CarloWood> Ie, the lambda knows about 'f',... but well, that would be unfriendly towards the user. I probably should just add all functions twice :/
[21:37:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:05] *** ChanServ sets mode: +v npaperbot
[21:38:06] <CarloWood> https://wandbox.org/permlink/Oeu8a8NypAjhnmUs
[21:38:42] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[21:41:55] *** Quits: proller (~p@2a02:6b8:0:40c:478b:c8e7:fd11:fb99) (Ping timeout: 268 seconds)
[21:46:35] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 264 seconds)
[21:46:42] *** Joins: Perry (~perry@coffee-break.at)
[21:47:15] *** Joins: froggy (~froggy@2.235.241.212)
[21:51:53] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[22:00:38] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[22:01:04] *** Quits: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com) (Quit: ian|)
[22:02:30] *** Joins: letto (~letto@86.120.85.133)
[22:04:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:06:09] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[22:06:54] *** Parts: pingpongball (~pingpongb@103.94.252.81) ()
[22:07:06] *** Joins: pah (~pah@user/pah)
[22:07:29] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[22:08:54] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[22:09:56] *** Joins: CaCode- (~CaCode@user/cacode)
[22:11:55] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[22:12:12] *** Joins: CaCode- (~CaCode@user/cacode)
[22:12:37] *** CaCode- is now known as CaCode
[22:14:36] *** Quits: lru (~lru@240.ip-51-79-50.net) (Quit: .)
[22:14:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[22:15:30] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:15:39] *** Joins: pah (~pah@user/pah)
[22:16:27] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[22:16:33] *** Joins: urdh (~urdh@user/urdh)
[22:17:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:24:14] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:49] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:26:57] *** Joins: rgrinberg (~textual@200.5.63.76)
[22:27:22] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[22:27:59] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[22:28:24] *** Joins: lru (~lru@240.ip-51-79-50.net)
[22:29:47] *** Quits: rgrinberg (~textual@200.5.63.76) (Client Quit)
[22:29:55] *** Joins: pah (~pah@user/pah)
[22:32:29] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:32:36] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[22:33:14] *** Joins: bindu (~bindu@user/bindu)
[22:33:27] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:34:07] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:34:41] *** Quits: pah (~pah@user/pah) (Ping timeout: 245 seconds)
[22:35:47] *** Joins: pah (~pah@user/pah)
[22:43:20] *** pah is now known as pa
[22:51:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:51:46] *** Quits: pa (~pah@user/pah) (Ping timeout: 245 seconds)
[22:53:13] *** Joins: pah (~pah@user/pah)
[22:54:03] *** Quits: DrMax (~DrMax@node-1w7jra94757g15oqdsiso9d47.ipv6.telus.net) (Ping timeout: 268 seconds)
[22:57:45] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 268 seconds)
[23:05:45] *** Joins: DrMax (~DrMax@node-1w7jra94757g02r478wxwr6fk.ipv6.telus.net)
[23:08:54] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[23:15:53] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[23:17:34] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:23:24] *** Quits: blackbeard420_ (~blackbear@45.33.85.133) (Quit: ZNC 1.8.2 - https://znc.in)
[23:23:36] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[23:24:23] *** Quits: jess (~jess@libera/staff/jess) (Quit: I try to be an optimist / but my glass is always bone dry)
[23:25:40] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:31:33] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[23:32:32] *** Joins: rgrinberg (~textual@200.5.63.76)
[23:32:49] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[23:32:55] *** Quits: Tas-sos (~Tas-sos@ppp079167211012.access.hol.gr) (Quit: Lost terminal)
[23:33:23] *** Quits: jkaye (~jkaye@2601:281:8300:7530:eb77:89f5:e0e9:4928) (Ping timeout: 264 seconds)
[23:35:49] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[23:39:40] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[23:40:44] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Gone.)
[23:41:33] *** Joins: andreasbuhr (~quassel@p549db9a2.dip0.t-ipconnect.de)
[23:41:33] *** Quits: andreasbuhr (~quassel@p549db9a2.dip0.t-ipconnect.de) (Client Quit)
[23:44:14] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:44:24] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:55ba:3218:beb2:ccb4)
[23:46:01] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:49:56] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[23:50:17] *** Quits: onizu (uid373383@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:52:35] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 264 seconds)
[23:55:57] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[23:58:50] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
