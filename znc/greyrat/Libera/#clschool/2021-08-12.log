[00:03:53] <White_Flame> lotuseater: ackchyually, REVERSE will cons up a new list, so it does need to iterate it regardless, even if the reversals are eliminated
[00:05:33] <lotuseater> okay got to know how the CL reverse does it :)
[00:07:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:34:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:38:56] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[00:42:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:58:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:06:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:18:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:19:04] <White_Flame> (let ((l '(a))) (eq l (reverse l))) => NIL
[01:21:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:25:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:29:45] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 248 seconds)
[01:30:04] *** Joins: ahc (~ahc@121.98.229.241)
[01:30:37] *** Quits: zagura (~zagura@user/zagura) (Quit: Meh...)
[01:37:05] <lotuseater> yes of course, by EQ
[01:39:52] *** Joins: zagura (~zagura@user/zagura)
[01:40:25] <lotuseater> all those CARs and CDRs
[01:54:44] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[02:01:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:12:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:39:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 272 seconds)
[02:42:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:11:21] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[03:18:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 258 seconds)
[03:18:47] *** Joins: edgar-rft (~edgar-rft@109.193.249.223)
[03:54:49] *** Quits: edgar-rft (~edgar-rft@109.193.249.223) (Ping timeout: 248 seconds)
[03:55:17] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:59:08] *** Quits: random-nick (~random-ni@87.116.177.228) (Ping timeout: 268 seconds)
[04:00:38] *** Joins: ahc (~ahc@121.98.229.241)
[05:48:06] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:19:04] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:19:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:37:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:42:17] *** Quits: sts-q (~sts-q@91.200.108.204) (Ping timeout: 248 seconds)
[06:48:48] *** Joins: sts-q (~sts-q@212.53.219.158)
[08:09:08] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 258 seconds)
[09:11:50] *** Joins: Oladon (~olad@98.43.81.226)
[09:38:26] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:44:12] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 258 seconds)
[10:26:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:50:34] *** Joins: derelict (~derelict@user/derelict)
[10:56:09] *** Quits: Harag (~user@105.243.9.173) (Ping timeout: 248 seconds)
[11:28:03] *** Joins: shka (~herr@109.231.62.239)
[11:34:31] *** Joins: makomo (~makomo@user/makomo)
[12:36:01] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[13:28:56] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[14:31:21] *** Joins: random-nick (~random-ni@87.116.179.82)
[15:26:38] *** Joins: jeffrey (~jeffrey@84-107-68-141.cable.dynamic.v4.ziggo.nl)
[15:31:23] *** Quits: jeffrey (~jeffrey@84-107-68-141.cable.dynamic.v4.ziggo.nl) (Client Quit)
[15:46:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:18:23] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:34:55] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[17:35:31] *** Joins: Josh_2 (~user@37.25.47.130)
[17:37:49] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[17:42:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:42:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:19:31] *** Joins: Josh_2 (~user@37.25.47.130)
[18:23:24] *** Joins: selwyn (~selwyn@user/selwyn)
[18:30:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:20:16] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:22:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[19:24:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:25:00] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:29:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:38:00] *** Joins: thrig (~thrig@65.113.153.50)
[19:57:34] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:57:37] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:08:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:42:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:51:15] *** Joins: selwyn (~selwyn@user/selwyn)
[20:53:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:14:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:25:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:30:51] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:31:01] *** Joins: thrig (~thrig@65.113.153.50)
[21:36:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:04:22] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:07:21] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:07:37] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[22:07:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:18:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:23:39] *** Joins: selwyn (~selwyn@user/selwyn)
[22:30:03] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:33:28] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[22:47:40] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:52:46] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:59:12] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[23:00:28] <lisp123_> If I am working on projects for myself, should I just chain various packages together (e.g. with a packages.lisp) or is it worth creating a system definition with ASDF? What are the benefits of the latter?
[23:00:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:01:15] <pjb> systems can be loaded and compiled independently.
[23:01:28] <pjb> it's unrelated (mostly) to packages and to files.
[23:02:27] <lisp123_> Is there any benefit for setting up systems for self-use programs?
[23:02:27] <pjb> ie. you could have one source directory with packages and source files, and define eg. two systems one client and one server to load and build a client executable and a server executable. They would share some source files and package, and they could have each some specific sources files or packages.
[23:03:29] <pjb> lisp123_: basically asd files are makefiles for lisp systems.  The only difference is that while you would put all your targets in one Makefile (usually), you would instead put each system in its own asd file (even if it's possible to define multiple systems in a single asd file).
[23:03:50] <pjb> lisp123_: so the question is what targets does your project have.
[23:04:09] <lisp123_> targets = operating systems?
[23:04:20] <pjb> For example, you could have test targets, ie. define test systems separately from the main systems, so you may load your system without loading the test code.
[23:04:27] <lisp123_> Oh I see
[23:04:29] <pjb> lisp123_: not operating system. Just system.
[23:04:38] <lisp123_> That makes sense
[23:04:47] <pjb> A system is a set of interacting components integrated for a given purpose.
[23:05:17] <lisp123_> pjb: Thanks
[23:05:38] <pjb> You can have asdf systems that will load a library. Or asdf systems that will load an application (or program), that you can deliver eg. as an executable image.
[23:06:38] <lisp123_> pjb: Thanks - loading a library would be useful - is it relatively straightforward to avoid using QuickLisp for dependencies?
[23:07:08] <lisp123_> If I learn to combine the dependencies .asd files with my own?
[23:07:22] <pjb> lisp123_: as with Makefiles, you can define new operations and new (sub-) classes to be used in your asd systems, so they can be used to make anything you want. Compile C libraries (used with FFI in lisp programs or libraries).  Or compile other kind of sources.
[23:08:25] <pjb> quicklisp uses the system dependencies declared in system declarations in asd files, to find them in the quicklisp distribution, and download and install them locally, so asd can find them and compile those dependencies before compiling the required system.
[23:08:45] <pjb> You can do that manually, or use another too that would do something similar. 
[23:09:16] <lisp123_> pjb: Thanks, so if I find all the dependencies and save them down, I could load them without QuickLisp?
[23:09:47] <pjb> I've started the ergo project to do that directly from git, but there are other existing systems: https://gitlab.com/informatimago/ergo
[23:10:10] <pjb> common-lisp-repo, clpm, google repo.
[23:10:32] <pjb> lisp123_: exactly. For asdf, as long as you have them on your disk, and you told asdf where to find the asd file, it's ok.
[23:11:40] <pjb> lisp123_: for example, for some projects that use multiple git repo, I write a little script to get them: https://gitlab.com/patchwork/scripts/-/blob/master/get-sources
[23:11:46] <pjb> https://gitlab.com/patchwork
[23:12:02] <pjb> and a script to get and compile them: https://gitlab.com/patchwork/scripts/-/blob/master/get-and-compile
[23:12:16] <pjb> (since some of them are not lisp systems…)
[23:13:04] <lisp123_> pjb: Great, thanks! THat's very helpful. I will try now to replicate it for my dependencies (which is mostly BKNR and alexandria for now I believe)
[23:13:11] <pjb> so systems like (future) ergo, common-lisp-repo, or google repo just automatize this git repo fetching.
[23:13:34] <lisp123_> Its good to lock things down and not rely on a form which may take a latest distribution which may break things
[23:13:36] <pjb> lisp123_: if you want to follow the development of ergo, there's #clergo  (#ergo is taken by a irc go project).
[23:13:54] <pjb> Indeed, this has it's uses.
[23:14:22] <lisp123_> pjb: Thanks, I will. And to confirm, they store all the code locally, so once done, one can just easily migrate their code to a new computer (without ergo for example)
[23:14:33] <pjb> Definitely.
[23:14:34] <lisp123_> So minimising the dependency surface
[23:14:47] <lisp123_> pjb: Thanks!
[23:14:52] <pjb> Note that if all your dependencies are on git, you can do that easily with git submodules.
[23:15:09] <pjb> https://git-scm.com/book/en/v2/Git-Tools-Submodules
[23:15:45] <lisp123_> Thanks for the link, that sounds like a good idea
[23:15:48] <pjb> Create a umbrella git repo, and all all your dependencies as submodules.  Then you only have to clone the umbrella project, git submodule update  && make
[23:16:08] <lisp123_> Currently I am using github, but I want to move away from that also
[23:16:16] <pjb> common-lisp-repo and ergo would just add some utility commands to run asdf automatically .
[23:16:16] <lisp123_> So I will learn Git properly I guess
[23:16:45] <pjb> there are also gitlab (used by a lot of collections, not only by gitlab.com), and gitea.
[23:16:55] <pjb> https://gitea.io/en-us/
[23:17:19] <lisp123_> Thanks - do you recommend GitLab for Mac?
[23:17:21] <pjb> Of course, you can just store git repositories on a server, but it's nice to have some web interface to browse them.
[23:17:29] <lisp123_> GitHub Desktop is not too bad to be honest
[23:17:39] <pjb> gitlab is nice.
[23:18:01] <lisp123_> Do you mostly work in GUI?
[23:18:06] <lisp123_> Or command line for GitLab
[23:18:26] <pjb> In general I have my projects on my own server (git.informatimago.com), and clones of a pair of gitlabs (framagit.org and gitlab.com) and on github.com
[23:18:39] <pjb> I generally manage issues on gitlab.com
[23:18:55] <pjb> I almost never use a GUI on workstation. Only CLI.
[23:19:09] <pjb> I use GUIs on iOS to browse my repos (sometimes some little edit).
[23:19:10] <lisp123_> I see, thanks for the info
[23:19:40] <lisp123_> I will learn CLI for git properly then
[23:19:47] <pjb> I use Working Copy  on iOS, and there's also GitLabControl and GitHub.
[23:20:00] <lisp123_> Do you use Magit?
[23:20:00] <pjb> IIRC, iA Writer can also do git.
[23:20:14] <pjb> Never used yet. I've been told it works well.
[23:20:16] <lisp123_> Or better to go direct to CLI?
[23:20:20] <lisp123_> Oh ok
[23:20:53] <lisp123_> pjb: thanks for your help. Time now to take control of my dependencies!
[23:21:04] <mfiano> magit is very nice. I know vim users that load up Emacs just to commit or do some repo work. That should say enough
[23:21:04] <pjb> I'm wary of facade applications. I'm afraid they'd lie to me.  That's why I prefer to use the CLI (possibly with scripts I wrote myself, so I know what they do).
[23:21:59] <lisp123_> mfiano: Nice!
[23:29:06] *** Joins: selwyn (~selwyn@user/selwyn)
[23:32:16] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:32:35] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:34:34] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:35:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:54:13] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[23:56:47] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 245 seconds)
