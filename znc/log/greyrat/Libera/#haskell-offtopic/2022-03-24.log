[00:08:44] *** Quits: Guest27 (~Guest27@c-174-63-99-174.hsd1.ma.comcast.net) (Quit: Client closed)
[00:32:32] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[00:36:38] *** Joins: Guest84 (~Guest84@2601:602:87f:4220:33a4:a2a9:5b0:4f1e)
[00:37:17] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[01:10:31] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[01:10:34] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:20:05] *** Quits: Guest84 (~Guest84@2601:602:87f:4220:33a4:a2a9:5b0:4f1e) (Quit: Client closed)
[01:27:09] <hpc> the number of symbols in an operator should be the same as the number of parameters it takes
[01:34:44] <tomsmeding> :t (<$>)
[01:34:45] <lambdabot> Functor f => (a -> b) -> f a -> f b
[01:34:54] <tomsmeding> :t (+)
[01:34:55] <lambdabot> Num a => a -> a -> a
[01:35:26] <geekosaur> maybe the number of distinct types?
[01:36:23] <tomsmeding> :t ($)
[01:36:24] <lambdabot> (a -> b) -> a -> b
[01:36:45] <geekosaur> and ($) is disliked :)
[01:36:51] <tomsmeding> lol
[01:37:16] <monochrom> I thought the length of an operator should be inversely proportional to its precedence level.
[01:37:38] <dminuoso> :t (<$>) @((->) Int)
[01:37:40] <lambdabot> error: parse error on input ‘->’
[01:38:07] <dminuoso> (a -> b) -> (Int -> a) -> Int -> b
[01:38:12] <dminuoso> Works fine, three arguments!
[01:38:13] <tomsmeding> % :t (<$>) @((->) Int)
[01:38:21] <dminuoso> No yahb here :(
[01:38:23] <tomsmeding> :(
[01:38:49] <monochrom> The identity function can take an unbounded number of arguments.
[01:39:01] <monochrom> @type id ($) id ($) id
[01:39:03] <lambdabot> b -> b
[01:39:10] <tomsmeding> @type fmap fmap fmap
[01:39:11] <lambdabot> (Functor f1, Functor f2) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)
[01:39:13] <dminuoso> Interesting, I had not considered that monochrom.
[01:39:15] <monochrom> @quote monochrom 17-ary
[01:39:16] <lambdabot> monochrom says: I am 17-ary, going on 18-ary, I can take curry of you
[01:39:19] <river> what physical phenomenon does the schrodinger equation actually model?
[01:39:26] <tomsmeding> lol monochrom 
[01:39:46] <dminuoso> river: Laws that appear to govern quantum mechanical systems
[01:40:01] <geekosaur> river, it's an equation describing a wave system
[01:40:10] <river> waves of what though?
[01:40:16] <dminuoso> wave funcftions.
[01:40:19] <dminuoso> *wave functions.
[01:40:30] <geekosaur> it's more general than that, dminuoso
[01:40:33] <monochrom> non-relativisitic complexed-valued langrangian waves
[01:40:46] <monochrom> err, s/complexed/complex/ heh
[01:40:52] <river> langrangian? not hamiltonian?
[01:41:12] <monochrom> OK hamiltonian. I keep mixing them up.
[01:41:34] <river> but if it's non-relativisitic, what physical thing can this model? certainly not photons
[01:41:37] <river> or electrons, right?
[01:41:56] <monochrom> very very slow electrons in a potential well
[01:42:25] <monochrom> so for example actually a lot of atoms and molecules. though not all, we know.
[01:42:26] <river> ah i assumed incorrectly that electroncs go at light speed
[01:42:34] <dminuoso> No, electrons actually rarely move much at all.
[01:43:43] <dminuoso> In a current through a copper wire, they move on the order of milimeters per second
[01:43:57] <river> what other things can it model than electronics?
[01:44:01] <river> electrons*
[01:44:13] <dminuoso> any quantum mechanical system?
[01:44:20] <dminuoso> as long as its non-relativistic
[01:44:26] <river> we already determined that it cant model photons
[01:44:34] <dminuoso> yes, non-relativistic.
[01:44:34] <river> so no to "any quantum mechanical system"
[01:45:01] <monochrom> Special relativity does become significant when there are too many electrons such that some of them are forced into very fast orbits. The youtube channel Periodic Videos has a video bringing this up.
[01:45:13] <tomsmeding> dminuoso: does that mean that after a second it has moved a few mm down the wire, or that during that second the total length of its traversed path is a few mm?
[01:45:22] <river> thanks monochrom !ill check itout
[01:45:29] <tomsmeding> `
[01:45:33] <tomsmeding> oops
[01:45:41] <dminuoso> tomsmeding: these two statements are different how?
[01:46:16] <monochrom> This: "mercury and relativity" https://www.youtube.com/watch?v=NtnsHtYYKf0
[01:47:02] <monochrom> But the flip side is that you have to go all the way up to something as high as mercury before Schrödinger breaks.
[01:47:02] <river> ty
[01:47:12] <river> oh that's really interesting
[01:47:22] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:47:29] <river> appreciate the answer
[01:47:40] <geekosaur> I'm trying to find an article where they were computing a gravitational wave system and were surprised when it resolved to the Schrödinger wave equation
[01:48:01] <tomsmeding> dminuoso: I dunno, in my classical mechanics intuition it's quite different -- if I walk around the room I've traveled 0m with the first definition, but ~10m with the second
[01:48:04] <river> wow that sounds really intriguing, please ping me or pm me if you find it.
[01:48:09] <dminuoso> river: By the way, plenty of things behave like quantum mechanical objects. Even macroscopic objects like atoms or even molecules have noticeable de broglie wavelengths.
[01:49:06] <dminuoso> so it could just be an atom, if you wanted to
[01:49:18] <monochrom> The amazing "unreasonable effectiveness" thing is that if you just take the very simplistic toy-example hydrogen and Schrödinger what can happen to its electron, the orbitals you get are at least qualitative true of non-toy atoms too.
[01:50:10] <dminuoso> tomsmeding: okay so that would fundamentally depend on whether we are dealing with AC or DC.
[01:50:17] <dminuoso> So pick the second one, then.
[01:50:22] <tomsmeding> right
[01:50:59] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:52:06] <dminuoso> A really good mind model is imagining current to be a chain - just start pulling on one end. So the pull effect travels at the speed of sound, but individual chain elements travel rather slow.
[01:52:34] <dminuoso> Sorry *imagining a wire to be a tube with a chain, where the chain roughly correspond to electrons.
[01:58:00] <geekosaur> https://www.sciencedaily.com/releases/2018/03/180305111533.htm
[01:58:20] <geekosaur> river ^
[01:58:33] <tomsmeding> dminuoso: ah
[01:58:42] <tomsmeding> TIL
[01:59:13] <river> nice
[02:00:33] <hpc> it's like dropping a slinky
[02:02:45] <monochrom> Creepy
[02:04:11] <geekosaur> I think one of the open questions in QM is why it's described by *that* wave equation and not some other one
[02:05:13] <dminuoso> Mmm, Im not sure whether "why" is a useful question in physics
[02:05:36] <dminuoso> All of physics is not concerned with explaining why something is, just finding models that offer good predictions.
[02:06:02] <parsnip> sky blue
[02:06:13] <dminuoso> Mmm, I meant why a law is.
[02:06:37] <monochrom> I think the answer is already "it's analgous to lagrange/hamilton so it's natural unless proven otherwise". The equation is really not so ad-hoc as to beg a deeper "why".
[02:06:41] <hpc> "why" is shorthand for "what more fundamental properties imply this"
[02:07:06] <monochrom> For example, a non-linear equation would be one that begs "why???!!!!" :)
[02:07:27] <parsnip> laws can be mnemonics for examples. examples can be mnemonics for laws
[02:07:28] <monochrom> But OK, I don't really know this stuff.
[02:08:41] <geekosaur> what hpc said
[02:09:17] <dminuoso> Okay, but there's no known fundamental properties that govern laws themselves that we know of.
[02:09:33] <geekosaur> if you have some idea why it follows this equation, you have a handle on something more fundamental about the nature of the universe
[02:09:47] <geekosaur> i.e. why it follows QM as we know it
[02:10:35] <river> I have another doubt about the schrodinger equation
[02:10:43] <river> how does it handle multiple particles?
[02:10:51] <monochrom> "painfully" :)
[02:10:55] <geekosaur> ^
[02:11:13] <geekosaur> the wave equations interact. this rapidly becomes well beyond our ability to solve
[02:11:15] <monochrom> More specifically, you solve for a wave function that stands for multiple particles.
[02:11:18] <river> in particularly, the pauli exclusion principle, and the indistinguishably of two equivalent particles
[02:11:26] <abastro[m]> This reminds me of wondering why number 2 is specially used in pythagorean theorem
[02:11:37] <dminuoso> Isnt the answer to this quantum entanglement?
[02:12:28] <geekosaur> particles don't have to be entangled to interact; that's just a special case in the equations
[02:12:32] <monochrom> Or you start applying EFT tricks, which is not perfect but amazingly it works for many important scenerios. It is how people computer-simulate molecules, for example.
[02:12:49] <monochrom> PBS Space Time has a video on that.
[02:13:12] <abastro[m]> How do you guys know so much in-depth in physics
[02:14:17] <boxscape_> it's chapter 6 in learnyouahaskell
[02:14:20] <monochrom> Err s/EFT/DFt/ .  This: https://www.youtube.com/watch?v=55c9wkNmfn0
[02:14:44] <monochrom> I paid the opportunity cost of not knowing a lot of other things.
[02:14:55] <monochrom> For example I haven't read LoTR.
[02:15:02] <abastro[m]> Ohhhh i did not know that youtube has great contents
[02:15:13] <monochrom> haven't read Hitchiker Galaxy what-you-call-it
[02:15:39] <abastro[m]> Chapter 6 <:
[02:15:59] <monochrom> Oh you have to be very picky. Youtube has a majority of junk and a tiny minority of good stuff. Fortunately, the law of large numbers implies that "tiny" is still a lot.
[02:16:36] <hpc> it's all about the heuristics in your brain about what links to click
[02:16:43] <boxscape_> for this type of video it's also annoying that you can't correct mistakes in videos
[02:17:03] <hpc> this kills me with netflix though, they randomize the pictures for each movie so it's impossible to tell at a glance what anything is
[02:17:16] <hpc> is this action? comedy? scifi?
[02:17:35] <hpc> all i can tell from the photo is it stars and/or also-features discount matt damon number fifteen
[02:17:40] <boxscape_> There might be some randomization but AFAIK it's mostly dependent on what they expect will make you click it
[02:18:02] <boxscape_> as in, you personally
[02:18:24] <abastro[m]> Recently youtube is trying to feed me with bad stuffs, so I am having hard time
[02:18:55] <hpc> set your browser to delete all cookies on exit, or just never save them
[02:19:01] <abastro[m]> Like no, Youtube, I am not a fan of that kind of music, I did not listen to music on youtube
[02:19:06] <hpc> you're more likely to get recommendations that are specific to your search or current video
[02:19:20] <abastro[m]> Oh I should have been more careful with cookies
[02:19:32] <hpc> instead of some weird k-means-cluster of the fact that you watch haskell videos and agdq
[02:19:38] <river> recently youtube has added a feature that lets you provide negative feedback to the recommendation algorithm
[02:19:41] <abastro[m]> Fwiw I never browsed those songs tho.
[02:19:46] <river> you can say not interested and also dont recommend channel
[02:19:52] <monochrom> Oh, right, I no longer default to youtube's home page anymore. I subscribes to channels I like, then go straight to https://www.youtube.com/feed/subscriptions
[02:20:14] <hpc> i just bookmark channels
[02:20:28] <monochrom> (Once in a blue moon, I do go to the home page when I'm bored. It's OK, I shouldn't stay within my echo chamber all the time anyway.)
[02:21:06] <abastro[m]> It's like youtube somehow assuming my preference from my region..
[02:21:16] <hpc> oh yeah, they love doing that
[02:21:19] <boxscape_> if you don't want to stay in your echo chamber you have to go to trending :P
[02:21:23] <boxscape_> I admit I never do that
[02:21:29] <hpc> they even infer your native language by geoip instead of http headers
[02:21:49] <hpc> trending is the ultimate echo chamber
[02:22:10] <abastro[m]> I mean I indeed dislike in echo chamber, but trending is just...
[02:22:11] <boxscape_> you can set your region, at least if you're logged in
[02:22:12] <hpc> i avoid it at all costs
[02:22:16] <abastro[m]> Not gonna touch with 10 foot pole
[02:22:24] <boxscape_> hpc yes but it's not my echo chamber
[02:22:50] <abastro[m]> I don't think changing the region would change the behavior, they know my real region
[02:22:56] <monochrom> I'm actually happy that youtube tries to predict me from my statistics. Like I said, neither uniform randomness nor worldwide popularity are going to work.
[02:23:25] <boxscape_> I've changed my region and don't really get any recommendations for my actual region
[02:23:31] <hpc> those... aren't the only two choices
[02:23:42] <monochrom> Put it bluntly, the privacy stance is going to utterly waste your time.
[02:23:54] <hpc> related-to-current-video is better than any personalization could ever be
[02:24:00] <abastro[m]> Hmm I see, I'll try
[02:24:42] <hpc> it's like how search engines used to be
[02:24:49] <hpc> not uniform, not personalized
[02:24:53] <hpc> just showing what you searched for
[02:25:45] <monochrom> Oh, related-to works great until you watch a round-earther video or a flat-earther video. >:)
[02:26:11] <hpc> ah, but the beauty there is as soon as you ^W that particular funnel resets
[02:26:35] <monochrom> Or, I bet, until you watch an ElectroBoom video or a video that ElectroBoom debunks. >:)
[02:26:36] <hpc> and then you go and watch a fake moon landing video and that's a totally different funnel, and never the two shall meet :D
[02:27:01] <hpc> the real truth isn't that we faked the moon landing, it's that we faked coming back
[02:27:06] <hpc> /we are still on the moon/
[02:27:11] <monochrom> haha
[02:27:44] <monochrom> "fake flat-earth landing"
[02:27:57] <monochrom> err, perhaps "fake round-earth landing" haha
[02:28:10] <hpc> here's another one
[02:28:15] <hpc> the earth isn't just flat, it's uniformly flat
[02:28:18] <hpc> mountains don't exist
[02:28:43] * tomsmeding lives in NL and points to the 300m tall mountain that we have
[02:28:47] <abastro[m]> Are mountains part of the propaganda?
[02:29:08] <hpc> mountains are a lie perpetrated by big staircase
[02:29:20] <abastro[m]> Ooh makes sense
[02:29:40] <tomsmeding> @quote hpc mountains are a lie perpetrated by big staircase
[02:29:40] <lambdabot> No quotes match. I can't hear you -- I'm using the scrambler.
[02:29:44] <tomsmeding> bummer
[02:29:57] <hpc> @remember hpc mountains are a lie perpetrated by big staircase
[02:29:57] <lambdabot> Nice!
[02:30:02] <tomsmeding> thanks
[02:39:19] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:a9ba:a14e:e332:b83f) (Remote host closed the connection)
[02:43:49] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 240 seconds)
[02:49:23] *** Quits: Lycurgus (~juan@98.4.112.204) (Ping timeout: 256 seconds)
[02:57:37] <parsnip> @quote illuminati
[02:57:37] <lambdabot> ksf says: agda is actually a secret mindwar-weapon of the illuminati, who want to wrack your nerves with excessively big symbol sets requiring a keyboard with 10 modifier keys. just like APL.
[02:57:53] <parsnip> @quote pharma
[02:57:53] <lambdabot> Korollary says: darcs is free of chemical toxins of big pharma. It's made using all natural herbs and other woo. It's good for you. Cheers.
[02:59:26] <hpc> C++ is known to cause cancer in the state of california
[03:01:55] <dminuoso> What's the treatment?
[03:06:46] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[03:13:49] <monochrom> hahaha hpc
[03:37:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[03:39:11] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:41:12] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[04:04:22] *** Joins: Crash0verrid3 (~IceChat95@2601:151:4500:17b:981f:f251:77de:55e5)
[04:14:29] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:22:39] <geekosaur> damn, I'm getting old. nearly got stuck on the floor after prepping my old desktop machine for reinstall
[04:23:20] <hpc> you're just in the wrong rounding mode
[04:24:25] <Crash0verrid3> That's why those of us with bad backs keep our rigs on top of the desk now. :-P
[04:25:21] <geekosaur> that'll happen once I have it reinstalled and everything migrated to it off the laptop
[04:27:15] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[04:30:48] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[04:30:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[04:35:22] *** Quits: Crash0verrid3 (~IceChat95@2601:151:4500:17b:981f:f251:77de:55e5) (Quit: For Sale: Parachute. Only used once, never opened, small stain.)
[05:02:26] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[05:42:20] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[06:08:13] <abastro[m]> Can I talk about opinions on energy situations here?
[06:09:40] <janus> abastro[m]: i remember once hearing that you can talk about anything that isn't haskell, so i think yes. i'd like to hear what you want to say
[06:10:35] <abastro[m]> Yea, just that I would likely be the only one here pro-nuclear
[06:11:24] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[06:11:35] <janus> no, i think there are lots of pro-nuclear software people, you can see that from e.g. how many nuclear stories that are on Hacker News
[06:11:55] <abastro[m]> Oh wow, interesting
[06:12:07] <janus> abastro[m]: i think maybe german software engineers are split 50/50, who knows
[06:12:08] <abastro[m]> Though, it is quite far right-winf stuff right?
[06:12:34] <janus> there is no reason why a specific technology of energy production has to be either left or right wing ;)
[06:12:59] <abastro[m]> Oh, I see. Yea I think that is what it should be
[06:12:59] <janus> what makes you say it is right wing?
[06:13:10] <abastro[m]> Because in my region, it is
[06:13:15] <janus> what is your region?
[06:13:25] <abastro[m]> Well, south korea
[06:13:40] <abastro[m]> Left wing over here is evangelist to remove nuclear
[06:14:16] <janus> oh, i wonder where that came from. were they inspired by western 'green' movements?
[06:14:28] <abastro[m]> Indeed, it is
[06:14:59] <janus> but south korea has many successful giant comglomerates. don't koreans love those?  i thought it would be an important part of 'asian tiger'
[06:15:08] <abastro[m]> Of course it is reasonable that they want to do that, just that my conservative mind don't feel it is practical to remove nuclear that soon.
[06:15:11] <janus> and those conglomerates would be connected to nuclear
[06:15:19] <janus> because it has been so expensive so only they could do it
[06:15:25] <abastro[m]> Oh, I don't know
[06:15:32] <janus> does the left wing also hate the south korean shipbuilding industry then? :P
[06:15:48] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[06:15:48] <abastro[m]> At least the left wing thinks reducing nuclear wouldn't take electricity price higher
[06:16:18] <abastro[m]> Left wing actually likes shipbuilding industry I think
[06:16:40] <janus> any party will always claim that their solution will be the cheapest
[06:16:48] <abastro[m]> Oh notable thing is, the govt dislike the conglomates
[06:17:06] <janus> if nuclear stays as expensive to build as it currently is, they may be right :(
[06:17:17] <abastro[m]> Quite reasonable as well, many of us koreans also think so as well
[06:17:45] <abastro[m]> Yea, in my country there are conflicting figure on the cost
[06:18:37] <abastro[m]> One thing I am surely considerate on is that when nuclear is reduced, it would be hard to satisfy the base load
[06:18:42] <janus> well if you build 20 reactors it should be possible to reach a price similar to what was previously achievable.. at least if the reactor design is sufficiently simple
[06:19:07] <janus> i feel like nobody wants to admit that every bit of complexity costs, even if it is arguably a bit safer
[06:19:54] <abastro[m]> Yep, just that building that many is not practical, you know. Because it means something else would disappear
[06:20:01] <janus> if you ask me, Gen III+ was safe enough, if built in the right location. especially when you hold it against the alternative, which is funding saudis and russians
[06:20:39] <abastro[m]> Yep, indeed. I think so as well
[06:20:52] <janus> i think you are preaching to the choir actually
[06:21:07] <abastro[m]> But eh, ppl have valid concerns like airplane crashing into the nuclear plants
[06:21:45] <abastro[m]> Or terrorist attacks.
[06:22:02] <abastro[m]> Choir?
[06:22:22] <janus> no, i don't think those concerns are considerable when you hold it up against the hundreds of thousands of deaths from air pollution
[06:22:42] <abastro[m]> Hmm, makes sense.
[06:22:54] <janus> would an airplane crashing into a reactor building be any worse than fukushima?
[06:23:04] <janus> we are still talking about less than 10k deaths, *at most*
[06:23:16] <abastro[m]> I think so, wouldn't it?
[06:24:20] <janus> i don't think any of us are qualified to say. but let's assume it is equivalent to chernobyl then. still not comparable to air pollution
[06:25:06] <janus> regarding the choir: https://en.wiktionary.org/wiki/preach_to_the_choir#:~:text=Often%20used%20to%20imply%20that,compliant%2C%20non%2Dchallenging%20audience.
[06:26:41] <abastro[m]> Oh, I see, now I see what you mean.
[06:27:12] <abastro[m]> Anyway, so is nuclear not attached to right wing?
[06:27:24] <abastro[m]> I thought so seeing my country.
[06:27:58] <janus> i think anti-nuclear is commonly associated with left-wing. so if you have the american mindset where there can be only two parties, you could claim that
[06:28:13] <janus> but check out the finnish green party, they are pro-science and pro-nuclear
[06:28:40] <janus> abastro[m]: https://www.euractiv.com/section/politics/short_news/finlands-greens-soften-stance-on-nuclear-energy/
[06:32:55] <janus> if you look at the german greens, this was one of their main causes. so i think this is a main reason why this association is there. german greens were against nuclear since their inception in 1980
[06:33:54] <abastro[m]> Interesting that Finland green party would accept nuclear
[06:34:17] <abastro[m]> Currently my country policy is reflecting Germans, yes.
[06:35:06] <janus> the Finns have more recently had to fight for their own independence
[06:35:07] <abastro[m]> I am sad that they did not allow electricity price to hike up with oil price rising..
[06:35:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[06:35:51] <janus> the germans lost ww2 and were forced to become pacifists, it is a world view that hasn't proven itself sustainable historically
[06:36:49] <abastro[m]> It connects to pacifist approach, hmm
[06:37:15] <abastro[m]> Never thought of that, my country is nowhere near pacifist at least.
[06:37:38] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:38:10] <janus> i don't know too many details of the Korean War but I think South Korea didn't lose independence the same way Germany did
[06:38:53] <abastro[m]> How did Germany lose independence?
[06:39:53] <abastro[m]> But yea Koreas are divided due to power/ideology conflict
[06:42:23] <parsnip> there's a youtube "oversimplified", add that search term to Korea
[06:47:21] <janus> abastro[m]: after you lose a war, you generally lose independence. citizens of western germany must have also been feeling guilty for what had happened
[06:48:02] <abastro[m]> So you mean, as Germany lost the war they lost some of their independence?
[06:48:25] <janus> of course they did
[06:48:48] <janus> it was so tough that the americans had to scale it back: https://en.wikipedia.org/wiki/History_of_Germany_(1945%E2%80%931990)#Industrial_disarmament_in_West_Germany
[06:49:23] <janus> the Truman administration decided that economic recovery in Europe could not go forward without the reconstruction of the German industrial base on which it had previously been dependent.[24] In July 1947, President Harry S. Truman rescinded on "national security grounds"[24] the punitive occupation directive JCS 1067, which had directed the U.S. forces in Germany to "take no steps looking toward 
[06:49:29] <janus> the economic rehabilitation of Germany." It was replaced by JCS 1779, which instead stressed that "[a]n orderly, prosperous Europe requires the economic contributions of a stable and productive Germany."
[06:50:31] <janus> if the american president decides whether there can be industry or not, i don't think you can call it a very independent germany
[06:50:46] *** Joins: notzmv (~zmv@user/notzmv)
[06:51:46] <abastro[m]> I see, so that would have rooted pacifist mindset in german 
[06:52:42] <abastro[m]> Idk how SK adopted that mindset though. I guess likely just following role models
[06:54:07] <parsnip> US seemed to have an interest in SK remaining independent of Russia/China/Communism
[06:59:44] <abastro[m]> Yep, ideology thing
[07:06:08] <parsnip> oh, more Russia than China
[07:07:55] <parsnip> oh, nope, Chinese army came in
[07:17:18] *** Joins: Lycurgus (~juan@98.4.112.204)
[07:19:36] *** Quits: Lycurgus (~juan@98.4.112.204) (Client Quit)
[08:08:02] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[08:12:51] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:12:57] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[08:14:30] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[08:34:05] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[08:42:25] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[08:44:02] <abastro[m]> TIL category theory is minority in mathematics.
[08:44:11] <abastro[m]> I wonder how haskell adopted a concept from it..
[09:17:01] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[09:32:39] *** Joins: monochrom (trebla@216.138.220.146)
[10:38:32] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:58:28] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[11:12:59] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[11:43:19] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 260 seconds)
[12:13:26] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:30:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:45:33] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:55:17] *** Joins: fendor (~fendor@178.115.46.236.wireless.dyn.drei.com)
[13:08:38] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[13:08:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[13:14:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:18:48] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[14:46:57] *** Joins: notzmv (~zmv@user/notzmv)
[14:53:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[14:53:37] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:05:46] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:15:44] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[16:13:41] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[16:14:18] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:17:51] *** Joins: Midjak (~Midjak@82.66.147.146)
[16:24:13] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:35:29] <ix> abastro[m]: haskell didnt "adopt" it, haskell's freaking based on it
[16:36:43] <abastro[m]> Why is it?
[16:36:56] <abastro[m]> Oh, and it was wrong realization, CT is more or less a tool.
[16:37:46] *** Joins: boxscape_ (~boxscape_@vpn-44-78.hq.eso.org)
[16:39:23] <abastro[m]> Well, also wdym haskell is based on CT
[16:39:35] <abastro[m]> (Suddenly this sounds like haskell-ontopic)
[16:40:27] <geekosaur> I wouldn't say it'[s based on CT
[16:40:38] <geekosaur> if it were then we'dcall Functor Endofunctor, for one
[16:41:05] <[exa]> for ontopic /join #haskell-hask-is-not-a-category
[16:41:23] <geekosaur> we have since adopted several conceots from CT, but all are in the libraries, not the language itself
[16:42:54] <abastro[m]> Haha
[16:43:20] <abastro[m]> Yep, I heard that Functor and Monad is rather later addition along with IO.
[16:45:34] <dminuoso> abastro[m]: The relationship to category theory is not in Haskell, its in programming itself.
[16:45:48] <dminuoso> It's just that in Haskell some authors chose to pick names to reflect that relationship.
[16:45:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[16:47:07] <dminuoso> And some implementations are tailored a bit to emphasize a relationship that already existed, without human intervention.
[16:47:25] <abastro[m]> Interesting relationship then!
[16:47:38] <dminuoso> If you've done programming, you have almost assuredly used monadic interfaces already.
[16:47:43] <dminuoso> In most languages.
[16:50:44] <abastro[m]> if (bar = makeBar (foo)) {
[16:50:44] <abastro[m]>   return handleBar (bar);
[16:50:44] <abastro[m]> } else return null;
[16:50:44] <abastro[m]> ^ Is this monad?
[16:50:55] <dminuoso> Mmm, let me phrase it differently:
[16:51:01] <abastro[m]> This is a useful pattern I noticed in C programming
[16:51:13] <dminuoso> So Monad is basically *anything* that satisfies a given interface with some laws.
[16:51:19] <dminuoso> One of these laws can be expressed as:
[16:51:40] <dminuoso> (f >=> g) >=> h   ~~~  f >=> (g >=> h)
[16:51:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[16:51:48] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[16:51:52] *** allbery_b is now known as geekosaur
[16:51:54] <ix> But in fairness, that relationship isnt explored or exploited outside MLs
[16:52:07] <dminuoso> Let's have a look at how IO satisfies that law and what it implies:
[16:52:16] <ix> And im dubious whether other static type systems form categories
[16:52:23] <dminuoso> For example we can say this about IO:
[16:52:36] <geekosaur> haskell's doesn't either, because of bottom
[16:52:50] <geekosaur> that said, see "fast and loose reasoning is morally correct"
[16:52:53] <abastro[m]> You mean MetaLanguage, right?
[16:53:07] <abastro[m]> These days, Machine Learning is causing havoc everywhere
[16:53:45] <dminuoso> abastro[m]: This associativity law is very ubiquitous in programming, and is the basis for being able to "move some code into a routine"
[16:53:48] <dminuoso> So say you have this in javascript:
[16:53:51] <geekosaur> SML and its friends and relatives, yes
[16:54:30] <ix> "for ontopic /join #haskell-hask-is-not-a-category" lol i missed this
[16:54:38] <dminuoso> abastro[m]: https://gist.github.com/dminuoso/d87842aa9939172e4a56adf66ccc83df
[16:54:47] <dminuoso> Do you accept that these two javascript programs mean the same?
[16:54:50] <dminuoso> Or equivalently
[16:55:29] <dminuoso> A third program `function h() { doX; doY; doZ;}` where `doX`, `doY` and `doZ` are *completely* *arbitrary* javascript statements/fragments?
[16:55:58] <abastro[m]> Tbh I think that won't be the same in js
[16:56:12] <dminuoso> Uh?
[16:56:24] <abastro[m]> IIRC Every expression could be asynchronous depending on something
[16:56:30] <dminuoso> Okay, lets ignore that for a moment
[16:56:44] <dminuoso> Pretend this is C then. Or maybe Java.
[16:56:56] <dminuoso> THe point is: the sequencing of statements is associative
[16:57:10] <abastro[m]> Also, what if you bind a variable in doY, where you use it in doZ?
[16:57:21] <dminuoso> You can do that, doesnt change anything really.
[16:57:51] <abastro[m]> Where the variable is syntactically scoped
[16:58:16] <dminuoso> Then feed it through
[16:58:42] <dminuoso> abastro[m]: the point Im making out is: you can take any arbitrary region of code, and move it into a separate routine.
[16:58:47] <dminuoso> dependencies you pass along as parameters
[16:58:59] <dminuoso> fundamnetally the reason you can do this, is because sequencing of statements is associative
[16:59:08] <dminuoso> its not something you usually conciously think about
[16:59:08] <abastro[m]> Hm is there something wrong with my logic
[17:00:40] <abastro[m]> Oh nvm, it was problem of matrix bridge
[17:01:36] <dminuoso> abastro[m]: https://gist.github.com/dminuoso/ec0285f7ef7087986caa9470c85c9096
[17:01:41] <dminuoso> Take this for example.
[17:02:00] <dminuoso> That might seem so naive, but the reason you can just shuffle code like this around, is because again sequencing is associative.
[17:02:02] <abastro[m]> I see that some kind of associativity holds, but associativity does not necessarily come from CT
[17:02:08] <dminuoso> Exactly!
[17:02:32] <abastro[m]> To apply it to CT, IIRC you need some kind of objects and morphisms btwn them
[17:03:51] <dminuoso> And equivalently, we even have identity actions in JavaScript
[17:03:53] <dminuoso> For example:
[17:03:56] <dminuoso> function f() {}
[17:04:14] <dminuoso> `doZ; f()` is the same as `doZ`
[17:04:36] <dminuoso> So, with respect to sequencing, we have an identity (that is whether we sequence with that action or not, doesnt matter - same result)
[17:05:12] <dminuoso> abastro[m]: So all IO/Monad is, is a description that lets us express these properties (that already exist) in a nice fashion.
[17:05:17] <abastro[m]> This just implies monoid structure
[17:05:19] <dminuoso> and abstracted away for other things.
[17:05:22] <dminuoso> abastro[m]: Yes, very much!
[17:05:28] <abastro[m]> You still need objects and morphisms
[17:05:43] <dminuoso> There's a frequent joke "All things told, a monad is just a monoid in the category of endofunctors"
[17:05:59] <dminuoso> The monoidal structure is uncovered when you dig deep enough in category theory
[17:06:13] <dminuoso> abastro[m]: and we could go one step further:
[17:06:18] <dminuoso> take a look at list comprehensions now
[17:06:29] <dminuoso> in say python or haskell
[17:06:40] <abastro[m]> Also still you can have variable bindings where later statements in the same function depends on.
[17:07:41] <abastro[m]> Also the code example does not imply associativity, it seems to me
[17:08:57] <dminuoso> abastro[m]: in the conceptual thinking it does. whether you conceptually think of `sequence y after x`, and then sequence `z` after that, or `sequence the sequencing of z after y` after `x`
[17:08:59] <dminuoso> its the same
[17:09:07] <dminuoso> in a concrete example:
[17:09:34] <abastro[m]> I mean, what are the objects? I am quite sure that requires expression-driven language
[17:09:38] <dminuoso> take one composite action "delete database, then create database", and a single action "create users"
[17:09:40] <dminuoso> and
[17:09:58] <dminuoso> take a single action "delete database" and then the composite action "create database and then create users"
[17:10:01] <dminuoso> These two are teh same
[17:10:16] <abastro[m]> Btw you also need to construct the Category of Endofunctors for typical languages
[17:10:32] <dminuoso> abastro[m]: You dont need to construcft anything, that's my point. The structure is already there.
[17:10:46] <abastro[m]> List comprehension indeed forms a monad, but that might be rather special case
[17:11:02] <dminuoso> abastro[m]: a pehraps better example in javascript is promises then.
[17:11:23] <dminuoso> .then chaining is associative, and in principle you have an identity with repsect to .then
[17:11:45] <dminuoso> so if you follow this through
[17:11:47] <dminuoso> you end up with:
[17:12:13] <dminuoso> flatMap :: (a -> [b]) -> [a] -> [b]; singletonList :: a -> [b]
[17:12:28] <abastro[m]> You know, js promises just collapses when it is nested
[17:12:51] <dminuoso> Yeah
[17:13:00] <abastro[m]> For js promise, map == flatMap 🙃
[17:13:02] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[17:13:02] <dminuoso> Gotta squeeze a bit :)
[17:13:13] <dminuoso> That is, if you squint a bit.
[17:13:23] <dminuoso> In the end we always have to squint.
[17:13:34] <abastro[m]> You still need to concretely identify the objects, otherwise it is not a category.
[17:13:41] <dminuoso> even a `return ()` is not a perfecft identity in Haskell
[17:13:48] <dminuoso> with respect to bind
[17:13:59] <abastro[m]> In haskell, IIRC the types of kind Type form the objects.
[17:14:00] <dminuoso> it will measurabily introduce an additional allocation
[17:14:10] <dminuoso> because that unit has to come from somewhere
[17:14:36] <dminuoso> and it will measurably take a few cpu cycles longer
[17:15:11] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[17:17:14] <abastro[m]> So, what are the objects in other languages?
[17:18:45] <boxscape> abastro: Even in Haskell, Hask is not the only category you can think about. e.g. every monoid is a category
[17:18:59] <abastro[m]> Yea, I mean you can
[17:19:15] <dminuoso> abastro[m]: I mean Im not sure what you're trying to figure out
[17:19:27] <abastro[m]> But without concretely singling out objects, argument about relation to category theory goes moot
[17:20:00] <abastro[m]> Also monoid with single object is relatively dull, uninteresting category iirc
[17:20:18] <dminuoso> abastro[m]: the term monoid is overloaded
[17:20:29] <abastro[m]> Btw `return` is the identity. Not `return ()`
[17:20:51] <dminuoso> abastro[m]: depends on what we talk about.
[17:21:10] <dminuoso> `return ()` is an identity with respect to `>>`
[17:21:15] <dminuoso> oh hold on
[17:21:17] <dminuoso> not quite.
[17:21:20] <abastro[m]> Oh, i mean monoid in traditional algebra
[17:21:42] <dminuoso> abastro[m]: well yeah, the monoidal laws I described above arise from a very abstract generalization
[17:21:55] <abastro[m]> I was going to say, if you are arguing that a field is related with CT, you should construct a meaningful category on the field.
[17:22:14] <dminuoso> in CT you have these things call `monoids in monoidal categories`, and that's one way you can discover the monad laws from
[17:22:37] <dminuoso> abastro[m]: well sure, thats the background behind MOnad in Haskell
[17:22:45] <dminuoso> We just identified an Endofunctor
[17:22:49] <dminuoso> (or rather, we created one!)
[17:24:48] <abastro[m]> Yea and that is haskell
[17:25:01] <abastro[m]> Btw I think with `>>`, there is no identity
[17:25:27] <abastro[m]> Consider `m >> e == m`. e's type dictate m's type.
[17:25:38] <dminuoso> abastro[m]: I was under the assumption of `(>>) :: IO () -> IO () -> IO
[17:25:48] <dminuoso> Err missing () at the end
[17:26:42] <abastro[m]> Welp I am sorry that matrix bridge is lagging..
[17:28:26] <abastro[m]> Fair, tho tbh traditional monoid does better job at expressing that.
[17:28:39] <dminuoso> abastro[m]: except it doesnt quite capture the essence of it
[17:28:48] <abastro[m]> As we are discussing imperative languages, might as well talk about hoare logic. How does it work?
[17:30:53] <abastro[m]> Monoid does capture the essence
[17:31:35] <abastro[m]> It has a binary operation and identity. Also associativity holds. That is basically a monoid.
[17:34:28] <abastro[m]> Monoid (f (), (>>), return ()). Also f is monoid homomorphism from ((), (<>), ())
[17:38:05] *** Joins: __monty__ (~toonn@user/toonn)
[17:39:55] <dminuoso> I guess you could describe in these terms, though in most programming languages effects have results
[17:40:08] *** Joins: boxscape_25 (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[17:41:43] *** Quits: boxscape_ (~boxscape_@vpn-44-78.hq.eso.org) (Ping timeout: 260 seconds)
[17:43:07] *** Quits: __monty__ (~toonn@user/toonn) (Ping timeout: 260 seconds)
[17:46:22] <abastro[m]> Yep, but the results should be bound to be used
[17:46:57] <abastro[m]> Also when they have results, it is rather expressed as `f a`. Then you cannot use `>>`
[17:53:38] <abastro[m]> Don't worry, ML family languages are still monadic IIRC. Possibly lisp too (tho idk much about lisp)
[18:00:19] <abastro[m]> Now I wonder if pythonistas like or hate list comprehension
[18:02:44] <merijn> In my experience they like them more than haskell programmers do :p
[18:03:29] <dminuoso> That's mostly because the alternatives are horrid.
[18:07:44] <ongy[m]> list(filter(lambda ..., map(lambda ..., function())))
[18:10:06] <kuribas> abastro[m]: what does "a language" is monadic mean?
[18:10:24] <kuribas> monadic is for an abstraction which follows some monad structure.
[18:12:25] <abastro[m]> Lmao haha
[18:12:47] <abastro[m]> It is surprising how imperative paradigmed language loves a declarative construct.
[18:15:04] <abastro[m]> That was a shorthand for "monad is a useful abstraction model to use in these languages"
[18:17:31] <kuribas> yes, if the language provides means to express such an abstraction.
[18:18:58] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:23:15] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[18:25:14] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[19:03:54] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[19:03:54] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[19:03:57] *** allbery_b is now known as geekosaur
[19:19:52] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[19:41:55] *** Quits: jpds1 (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[19:44:53] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[19:45:05] *** Joins: __monty__ (~toonn@user/toonn)
[20:06:38] *** jpds1 is now known as jpds
[20:18:16] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[20:23:24] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[20:33:20] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:34:55] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:07:26] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:10:05] <carbolymer> has this `monads ~ burritos` guy found a job finally? https://blog.plover.com/meta/job.html
[21:12:11] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[21:16:51] <kuribas> he was unemployed the whole time???
[21:20:06] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[21:22:15] <nomagno> Was employed in non-haskell dev
[21:22:25] <nomagno> I don't remember why I'm on here honestly...
[21:22:44] <nomagno> Oh to try and get good enough with FP to write semi-useful crap, yes
[21:22:49] <nomagno> Still a long ways off :(
[21:23:50] <abastro[m]> Perhaps haskell might be too exotic for you
[21:24:33] <nomagno> Possibly. I would probably have better luck with something like Scheme, I still have pretty good nonfunctional training wheels over there
[21:24:59] <nomagno> And also it's more low level, which I'm more used to
[21:25:17] <nomagno> Or well, less abstract rather
[21:25:17] <carbolymer> nomagno: what do you mean by low level in scheme?
[21:25:20] <carbolymer> ah
[21:25:22] <carbolymer> right
[21:25:41] <carbolymer> tbh you don't have to go balls deep into monad transformers and all shenanigans at the very beginning
[21:26:11] <carbolymer> just stick to IO, play a bit with monads and let it sink in
[21:31:13] <nomagno> Purity is hard to work with.
[21:31:18] <nomagno> For me*
[21:33:18] <carbolymer> nomagno: purity? or immutable variables?
[21:35:42] <kuribas> nomagno: it's mostly a matter of learning the right techniques.
[21:35:49] <kuribas> like folds instead of imperative loops.
[21:35:53] <abastro[m]> Tho it is notable that error messages of haskell as of now does not help
[21:36:09] <abastro[m]> Makes things hard for beginners even with IO
[21:36:12] <kuribas> IMO error messages of ghc are pretty good, comparsed to say clojure.
[21:36:27] <kuribas> They are just not very beginner friendly.
[21:37:43] <geekosaur> is helium still out there?
[21:38:05] <carbolymer> the blockchain helium?
[21:38:24] <geekosaur> no, nothing to do with blockchain
[21:38:28] <nomagno> After going trough learn you a Haskell I am at least able to read code without being big confused, that's a win in my book!
[21:38:46] <geekosaur> https://github.com/Helium4Haskell/helium
[21:39:37] <geekosaur> you want beginner-friendly error messages, you got them. it's only a subset of the language, but that's probably better for starting out
[21:40:20] <carbolymer> imo it's better to start with GHC already and get familiar with the ecosystem
[21:40:26] <carbolymer> and ask on IRC for help
[21:40:42] <carbolymer> assuming the end goal is to learn haskell and GHC
[21:44:32] <abastro[m]> Oh, lyah is good for absolute beginners
[21:44:58] <abastro[m]> But yea monad transformer could be avoided until you are familiar with monads
[21:48:55] * carbolymer always recommends Real World Haskell
[21:49:19] <carbolymer> a lil bit outdated, but it was an eye opener for me
[21:49:27] <carbolymer> and I couldn't write Java anymore :(
[21:52:58] *** Joins: fendor_ (~fendor@178.115.44.78.wireless.dyn.drei.com)
[21:54:13] <boxscape_25> oh wow it even has a wikipedia article https://en.wikipedia.org/wiki/Real_World_Haskell
[21:54:20] *** boxscape_25 is now known as boxscape__
[21:55:21] *** Quits: fendor (~fendor@178.115.46.236.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[21:58:32] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[22:04:33] <carbolymer> nice
[22:14:27] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:17:28] *** Quits: fendor_ (~fendor@178.115.44.78.wireless.dyn.drei.com) (Remote host closed the connection)
[22:20:08] <abastro[m]> I've been worried on death of FP, but somehow Java17 comes with some pattern matching
[22:20:40] <abastro[m]> I wonder why they would introduce it tho, I think they would be fine with verbose code
[22:21:21] <geekosaur> FP's not dead, FP concepts are steadily spreading into mainstream languages
[22:22:05] <geekosaur> there's a joke somewhere that in 2030 the widest used FP language will be called C++ or Python or Java…
[22:23:25] <carbolymer> I'm amazed how other languages are borrowing concepts from FP and are still overcomplicating those
[22:23:44] <river> it's been wild
[22:24:01] <river> i remember when nobody knew what lambda was
[22:24:12] <geekosaur> s/widest/most widely
[22:24:16] <river> and trying to explain how cool it is and everyone saying it was useless
[22:24:44] <carbolymer> river: sounds like average java 7 enjoyer
[22:27:11] <Zemyla> And now even Excel has lambdas.
[22:32:09] <abastro[m]> Why would excel have lambdas tho
[22:33:29] *** Joins: vicfred (~vicfred@user/vicfred)
[22:35:52] <carbolymer> excel is FRP
[22:35:53] <carbolymer> cmv
[22:38:09] <geekosaur> SPJ himself called Excel the most popular FP language
[22:42:00] <abastro[m]> Well true
[22:44:18] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[22:54:54] *** Quits: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[22:54:57] *** Quits: boxscape__ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:56:24] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[23:01:13] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[23:02:34] *** Joins: hololeap (~hololeap@user/hololeap)
[23:20:00] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:20:26] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[23:24:49] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:38:01] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[23:47:48] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[23:52:31] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[23:53:38] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:59:55] <monochrom> My perspective is why would anything not have lambda by now.
