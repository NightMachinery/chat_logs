[00:33:40] *** Quits: rtb_ (~calmdownb@li749-143.members.linode.com) (Remote host closed the connection)
[00:43:51] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:54:15] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[01:00:30] *** Quits: frett27 (~frett27@2a01:e0a:58a:6c00:bc61:83bb:86a1:c8c4) (Ping timeout: 260 seconds)
[01:03:48] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[01:04:22] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[01:04:30] *** Quits: jemius (~imperator@200116b82d0cbc00d0c6cbff9bb9cb78.dip.versatel-1u1.de) (Quit: Leaving)
[01:04:43] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:03:38] *** Joins: squeek502_ (~squeek502@user/squeek502)
[02:05:48] *** Quits: squeek502 (~squeek502@user/squeek502) (Ping timeout: 240 seconds)
[02:13:16] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[02:20:04] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[02:46:37] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18)
[02:57:28] *** Quits: scj (~scj@m90-129-202-174.cust.tele2.se) (Quit: Client closed)
[02:58:01] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnryetdmvvhxydbc.ipv6.telus.net)
[03:12:57] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:33:55] *** Quits: d0p1 (~d0p1@gateway/tor-sasl/d0p1) (Ping timeout: 240 seconds)
[03:34:37] *** Joins: d0p1 (~d0p1@gateway/tor-sasl/d0p1)
[03:37:21] *** squeek502_ is now known as squeek502
[03:39:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:31:11] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:34:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:35:22] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[04:35:26] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:36:03] *** Joins: qaph (~weechat@user/qaph)
[04:38:54] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 260 seconds)
[04:38:56] *** qaph is now known as kron
[04:50:35] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[04:51:30] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18)
[05:05:48] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[05:14:41] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:16:38] *** Joins: zachel (~zachel@user/zachel)
[05:25:41] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[05:40:54] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[05:45:10] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[05:52:14] *** Joins: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles)
[05:58:24] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Remote host closed the connection)
[05:58:52] *** Quits: squeek502 (~squeek502@user/squeek502) (Remote host closed the connection)
[06:12:57] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[06:27:59] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 256 seconds)
[06:32:10] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[06:35:36] *** Joins: zachel (~zachel@user/zachel)
[06:45:50] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[06:53:51] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:57:28] *** Quits: kron (~weechat@user/qaph) (Remote host closed the connection)
[06:58:11] *** Joins: kron (~weechat@user/qaph)
[07:30:04] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[07:32:11] *** Joins: mooff (mooff@awful.cooking)
[07:37:17] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[07:41:05] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:45:15] <plumeus> https://ziglang.org/documentation/master/std/#std;os.argv
[07:45:35] <plumeus> I just realized the documentation was updated to explain why it doesn't work for WASI and Windows.
[07:45:44] <plumeus> I never understood why, so that's nice.
[08:01:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[08:33:07] *** Joins: squeek502 (~squeek502@user/squeek502)
[08:34:10] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[08:35:58] *** Quits: sebonirc (~sebonirc@8.9.88.219) (Ping timeout: 260 seconds)
[08:41:55] *** Quits: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[08:58:59] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:02:45] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:2db7:686:885a:81b9)
[09:16:25] *** Joins: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles)
[09:41:05] *** Joins: phaleth (~user@user/phaleth)
[09:44:34] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:2db7:686:885a:81b9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:52:15] *** Joins: poqomchi (~poqomchi@user/poqomchi)
[10:20:42] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:32:11] <motiejus> would zig accept patches that replace inferred error sets with explicit error sets in stdlib? I'd like to take a function pointer to, say, ArrayList.appendSlice, but it returns an inferred error (`!void`). From a quick observation it can only return `Allocator.Error`, so that "should be an easy fix"
[10:32:42] <andrewrk> generally, yes
[10:34:15] *** Quits: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[10:38:16] <motiejus> thanks, will do for ArrayList.
[10:39:59] <motiejus> also, is there a nicer way to write https://paste.sr.ht/~motiejus/b6cd48c0470283037888f590425c19fe67f316b0? E.g. without the "if" or the "case"?
[10:41:23] <plumeus> wait, is there only one possible error type? If so, why do you need a switch?
[10:41:58] <plumeus> `return std.math.cast(T, n) catch error.InvalidRecord;`?
[10:43:52] <plumeus> if not, `return std.math.cast(T, n) catch switch (err) {<logic>};` should probably work
[10:44:43] <plumeus> uh, did the catch slightly wrong on the 2nd line
[10:45:03] <motiejus> I only want to match on `error.Overflow`, because the contract of `math.cast` may change
[10:45:24] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[10:45:32] <plumeus> then you probably need `_ => unreachable` or something
[10:45:48] <plumeus> actually, nvm, it'll give a compile error when code updates?
[10:46:11] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:48:10] <motiejus> will try your second suggestion
[10:48:59] <plumeus> make sure to do `<whatever> catch |err| switch (err) {<whatever>}`
[10:49:48] <motiejus> yep, works, thanks!
[10:50:46] <plumeus> And obviously, `zig fmt` supports newlines between `catch |err|` and `switch`, or something like that. Could be nice depending on how you want to format your code.
[10:59:50] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[11:04:49] <motiejus> zig fmt formats it perfectly :)
[11:09:43] <motiejus> I added the fallible error to ArrayList, but can't get the function pointer; still too much meta for me: https://paste.sr.ht/~motiejus/009dde3482aaf418a25e4e36d68d145943a53dad ; I understand it is complaining that the function prototype does not expect to be "bounded", but a similar concept (pointer to a struct's function that accepts `*Self` as first argument) works on a "simpler" struct.
[11:10:01] <motiejus> a pointer would be appreciated.
[12:30:08] *** Quits: blackcatter[m] (~blackcatt@2001:470:69fc:105::e10c) (Quit: You have been kicked for being idle)
[12:41:05] *** Joins: Earnestly (~earnest@user/earnestly)
[12:48:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[12:51:24] *** Joins: jemius (~imperator@200116b82d7c1400b46a7c8ddca82f72.dip.versatel-1u1.de)
[12:58:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:01:24] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[13:09:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[13:12:53] <motiejus> moving this to github: https://github.com/ziglang/zig/pull/10940
[13:14:47] <plumeus> I think there was an open issue on something regarding function pointers, but forgot what it was
[13:15:32] <plumeus> Still waiting on https://github.com/ziglang/zig/issues/1717 or similar
[13:16:23] <plumeus> Oh, that came out to be confusing. Meant to say "I'm still waiting for 1717".
[13:41:47] <motiejus> Thanks for the link. It makes it a bit clearer on how it will look like once done, but I want to know how to make a function pointer to a bound instance *now* :)
[13:44:28] <plumeus> Maybe I was thinking of https://github.com/ziglang/zig/pull/10656 ... idk
[13:46:16] <plumeus> "stage1 is *wrong*. It is not yet updated to support the new function type semantics."
[13:46:17] <plumeus> huh
[13:54:31] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 256 seconds)
[14:04:28] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnryetdmvvhxydbc.ipv6.telus.net) ()
[14:07:45] <motiejus> Ok, this is still a very much moving target. Will wait for someone to comment in the PR
[14:07:53] <motiejus> Good pointers
[14:09:44] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[14:29:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:34:38] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[14:52:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:24:27] *** Quits: Arnavion (arnavion@user/arnavion) (Quit: Arnavion)
[15:44:25] *** Joins: frett27 (~frett27@2a01:e0a:58a:6c00:1ff9:7f1b:88a8:3fcc)
[16:02:50] *** Joins: cabal704 (~cabal704@user/cabal704)
[16:11:07] *** Quits: ofelas (~ofelas@ti0071a400-5198.bb.online.no) (Quit: Leaving)
[16:16:52] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[16:27:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[16:30:13] *** Joins: terminalpusher (~terminalp@2a01:586:97ba:1:1761:3b61:af48:44c7)
[16:30:52] *** Joins: notzmv (~zmv@user/notzmv)
[16:46:13] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[16:57:44] *** Quits: cabal704 (~cabal704@user/cabal704) (Remote host closed the connection)
[16:58:09] *** Joins: cabal704 (~cabal704@user/cabal704)
[17:08:47] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[17:24:31] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[17:27:07] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:44:34] *** Quits: terminalpusher (~terminalp@2a01:586:97ba:1:1761:3b61:af48:44c7) (Remote host closed the connection)
[17:44:52] *** Joins: terminalpusher (~terminalp@2a01:586:97ba:1:1719:2f8:8143:5688)
[17:46:52] *** Quits: terminalpusher (~terminalp@2a01:586:97ba:1:1719:2f8:8143:5688) (Remote host closed the connection)
[17:50:05] *** Joins: arkurious (~arkurious@user/arkurious)
[17:56:15] *** Joins: gwizon (~gwizon@ool-45798b07.dyn.optonline.net)
[17:56:39] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[17:58:38] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Quit: WeeChat 3.4)
[17:58:58] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:00:16] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Max SendQ exceeded)
[18:00:44] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:04:14] *** Joins: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566)
[18:06:15] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Client Quit)
[18:07:09] *** Joins: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566)
[18:31:11] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[18:39:07] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:47:40] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[18:51:33] *** Joins: bozo_ (~bozo@188.252.190.171)
[18:53:18] *** Quits: bozo (~bozo@188.252.186.73) (Ping timeout: 272 seconds)
[19:00:32] *** Joins: xibb (~xibb@69.172.229.250)
[19:17:48] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[19:20:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:32:52] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[19:34:37] *** Joins: notzmv (~zmv@user/notzmv)
[19:44:50] *** Joins: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles)
[19:53:06] <ifreund> TIL, uint64_t has alignment 4 on i386
[19:55:03] <plumeus> huh
[19:55:13] <plumeus> https://michas.eu/blog/c_ints.php?lang=en Does that mean this is wrong?
[19:57:34] <ifreund> plumeus: that seems to be listing size not alignment?
[19:58:05] *** Quits: frett27 (~frett27@2a01:e0a:58a:6c00:1ff9:7f1b:88a8:3fcc) (Ping timeout: 256 seconds)
[19:58:29] *** Joins: frett27 (~frett27@82-65-112-210.subs.proxad.net)
[19:59:06] <plumeus> Wait, isn't the size relevant for alignment? Or is the `uint64_t` treated like two `uint32_t` under the hood?
[19:59:54] <ifreund> plumeus: indeed, I believe that's what happens since i386 is a 32 bit target
[20:00:11] <ifreund> https://uclibc.org/docs/psABI-i386.pdf
[20:00:15] <plumeus> Ah, okay
[20:00:20] <ifreund> Table 2.1
[20:00:55] <Franciman> yes
[20:02:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[20:04:36] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:04:38] <ifreund> andrewrk: I believe Type.abiAlignment() makes the same false assumption I did that u64/c_ulonglong is align 8 on 32 bit targets
[20:11:21] <ifreund> this will matter in practice for matching struct layout of other compilers targeting the system C ABI at the very least
[20:12:55] <ifreund> I can fix the abiAlignment function, but I wouldn't be surprised if we make this false assumption elsewhere as well
[20:27:04] *** Joins: sebonirc (~sebonirc@8.9.88.219)
[20:29:47] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[20:32:27] *** Joins: tane (~tane@user/tane)
[20:38:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[20:39:15] *** Quits: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[20:39:16] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[20:39:16] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[20:39:35] *** Quits: d0p1 (~d0p1@gateway/tor-sasl/d0p1) (Ping timeout: 240 seconds)
[20:53:53] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[20:54:26] *** Joins: bindu (~bindu@user/bindu)
[20:56:30] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[20:58:29] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Read error: Connection reset by peer)
[20:59:01] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[21:09:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[21:16:29] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:89ee:62bb:3f9a:ddbb)
[21:38:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[21:40:05] *** Quits: frett27 (~frett27@82-65-112-210.subs.proxad.net) (Ping timeout: 256 seconds)
[21:41:27] *** Quits: sebonirc (~sebonirc@8.9.88.219) (Ping timeout: 256 seconds)
[21:42:25] *** Quits: gwizon (~gwizon@ool-45798b07.dyn.optonline.net) (Ping timeout: 272 seconds)
[21:42:43] *** Joins: d0p1 (~d0p1@gateway/tor-sasl/d0p1)
[21:51:17] *** Joins: d0p1_ (~d0p1@gateway/tor-sasl/d0p1)
[21:53:55] *** Quits: d0p1 (~d0p1@gateway/tor-sasl/d0p1) (Ping timeout: 240 seconds)
[21:54:09] *** Quits: cabal704 (~cabal704@user/cabal704) (Remote host closed the connection)
[21:54:33] *** Joins: cabal704 (~cabal704@user/cabal704)
[22:00:11] *** Joins: masoudd (~masoudd@user/masoudd)
[22:04:17] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03) (Ping timeout: 250 seconds)
[22:10:35] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:57] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03)
[22:15:16] <ikskuh> huh
[22:15:27] <ikskuh> what's the correct way to check for a ChildProcess liveness?
[22:16:01] <andrewrk> ifreund, I noticed that recently too. we should make a full audit, cross referencing our data with llvm's
[22:16:56] <andrewrk> ifreund, two more facts that I learned recently that surprised me:
[22:17:35] <andrewrk> the ABI alignment of u64 for i386-windows is align 8, while on i386-linux it is align 4
[22:17:50] <andrewrk> the ABI alignment of u64 on arm is align 8
[22:22:04] *** Quits: freshcoffee3 (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[22:31:19] <ifreund> andrewrk: of course it's worse than I realized, what should I have expected? :P
[22:31:49] <ifreund> I'll try and figure out where clang/llvm keeps its secrets
[22:32:14] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:89ee:62bb:3f9a:ddbb) (Ping timeout: 260 seconds)
[22:32:46] <andrewrk> if the canonical source is not easy to find we can always just call LLVMABIAlignmentOfType to find out
[22:45:48] <ifreund> looks like much of it's in clang/lib/Basic/Targets/Foo.h
[22:45:58] <ifreund> there's a lot of stuff to wade through there though
[22:46:39] <ifreund> it's got fun comments like "Mingw64 rounds long double size and alignment up to 16 bytes, but sticks with x86 FP ops. Weird."
[22:47:58] <ifreund> and it's implemented as a C++ object heirarchy of course
[22:50:10] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[22:58:56] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:00:15] <ikskuh> andrewrk, ifreund: why is waitpid having ECHILD => unreachable ?
[23:01:27] <ikskuh> it doesn't feel right to spawn a thread that calls "wait" on a ChildProcess 
[23:02:36] *** Quits: cabal704 (~cabal704@user/cabal704) (Ping timeout: 240 seconds)
[23:04:52] <ikskuh> oh wait, i think i got it, sorr
[23:04:55] *** Joins: cabal704 (~cabal704@user/cabal704)
[23:14:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[23:16:26] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:17:42] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:20:09] <plumeus> I'm going to sleep so I figured I can ask one question before
[23:20:15] *** Joins: Guest55 (~Guest55@37.214.79.33)
[23:20:19] <plumeus> https://github.com/ziglang/zig/issues/10892
[23:21:23] <plumeus> Where can I read about the libc++ stuff in Zig? I really don't get why the error doesn't happen for debug.
[23:22:43] <plumeus> Oh, `zig/lib/libcxx`
[23:26:29] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[23:35:30] *** Joins: wavemode (~wavemode@2601:241:0:fc90:79a9:b149:73a6:32c7)
[23:37:58] *** Quits: Guest55 (~Guest55@37.214.79.33) (Quit: Ping timeout (120 seconds))
[23:40:04] *** Quits: raghavgururajan (ea769b8000@user/raghavgururajan) (Ping timeout: 250 seconds)
[23:41:16] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[23:50:02] *** Quits: voroskoi (924a802ee9@2604:bf00:561:2000::15c) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: hanna_ (65c0ed9340@2604:bf00:561:2000::267) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: slind (e19c209508@2604:bf00:561:2000::17a) (Ping timeout: 250 seconds)
[23:50:10] *** Joins: voroskoi (924a802ee9@2604:bf00:561:2000::15c)
[23:50:44] *** Joins: sebonirc (~sebonirc@8.9.88.219)
[23:50:54] *** Quits: powerofzero (c2b6947721@user/powerofzero) (Ping timeout: 250 seconds)
[23:51:04] *** Joins: powerofzero (c2b6947721@user/powerofzero)
[23:51:46] *** Quits: sm2n (ae95cb1267@user/sm2n) (Ping timeout: 250 seconds)
[23:51:52] *** Joins: hanna (65c0ed9340@user/hanna)
[23:51:53] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[23:51:53] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[23:52:00] *** Joins: slind (e19c209508@2604:bf00:561:2000::17a)
[23:52:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[23:57:21] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
