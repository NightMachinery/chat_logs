[00:02:57] <FromDiscord> <Yardanico> CC is when the C compiler is compiling the C code that was compiled by the Nim compiler from the Nim code :)
[00:03:03] <FromDiscord> <Yardanico> also not sure what you mean about debug
[00:03:09] <FromDiscord> <Yardanico> it's an empty program, there's nothing to debug
[00:05:28] <yann-kaelig> Yardanico: I don't understand, how the progrma can be empty if I put in it a line which is in this case a comment ?
[00:05:46] <FromDiscord> <Yardanico> a comment does not affect the program's runtime
[00:05:50] <FromDiscord> <Yardanico> it's simply a hint for the programmer
[00:05:57] <FromDiscord> <Yardanico> the compiler just discards it as useless information
[00:06:17] <FromDiscord> <Yardanico> unless you use doc comments, those are saved by the compiler for documenting stuff, but they still don't change the result of compilation
[00:08:38] <yann-kaelig> Yardanico: https://nim-lang.org/docs/docgen.html ?
[00:09:03] <yann-kaelig> You'r talkign about that
[00:10:10] <FromDiscord> <Yardanico> yes, nim has a doc generator, `nim doc`, but I don't think we should really discuss comments regarding empty programs :)
[00:11:04] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[00:25:17] <FromDiscord> <TryAngle> what are new-style concepts?
[00:26:00] <FromDiscord> <Yardanico> https://github.com/nim-lang/RFCs/issues/168
[00:27:49] <FromDiscord> <TryAngle> ah with that they look almost identical to Rust traits, interesting
[00:28:26] <FromDiscord> <Yardanico> In reply to @TryAngle "ah with that they": still different though :)
[00:28:33] <FromDiscord> <Yardanico> if you want something similar there's https://github.com/yglukhov/iface
[00:28:37] <FromDiscord> <Yardanico> concepts are a compile time thing only
[00:29:12] <FromDiscord> <TryAngle> what are the differences exactly?â†µThe nim concepts look a bit more flexible ðŸ¤”
[00:29:13] <FromDiscord> <gandalfs_socks> anybody know if there's a nice way to create an ebook in nim like I would with r and plotly?
[00:29:20] <FromDiscord> <Yardanico> In reply to @TryAngle "what are the differences": Nim concepts are a compile time only thing
[00:29:20] <FromDiscord> <TryAngle> (edit) "exactly?â†µThe" => "for example?â†µThe"
[00:29:27] <FromDiscord> <Yardanico> Rust traits are like interfaces
[00:29:42] <yann-kaelig> I don't understand what's going on. the first time I compiled my doesnothing.nim program I got 4 CC: output ( my dpaste ), I removed the executable and build the source code a second time, but this time the CC: doesnothing.nim line disappeared and a third time compilation all of the CC: disappeared
[00:29:43] <FromDiscord> <TryAngle> ah I see while rust traits can be used for "dyn"
[00:30:22] <FromDiscord> <Yardanico> In reply to @yann-kaelig "I don't understand what's": Because Nim keeps a cache of compiled C code
[00:30:28] <FromDiscord> <Yardanico> so it doesn't have to fully recompile the C parts each time
[00:30:53] <FromDiscord> <Recruit_main707> and if the file doesnt change it doesnt recompile either (?) afaik
[00:31:31] <FromDiscord> <Yardanico> not really
[00:31:42] <FromDiscord> <Yardanico> nim always does the Nim compilation part
[00:32:29] <FromDiscord> <Recruit_main707> but not the c part right?
[00:34:22] <FromDiscord> <el__maco> apparently yes. If the intermediate c file did not change, the c compiler is not invoked again
[00:34:38] <FromDiscord> <Yardanico> In reply to @Recruit_main707 "but not the c": yes
[00:37:08] *** Joins: neurocyte0132889 (~neurocyte@94.46.66.157)
[00:37:08] *** Quits: neurocyte0132889 (~neurocyte@94.46.66.157) (Changing host)
[00:37:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:37:53] <FromDiscord> <TryAngle> sent a long message, see http://ix.io/3IN7
[00:39:56] <FromDiscord> <TryAngle> i'm getting suprised day by day by these little features
[00:43:38] <yann-kaelig> Yardanico: Well, I can have something stupid questions like a noob, you saying that Nim compiler "convert/translate/?" nim code to C code then the C compiler compile this C code. Can I see this intermediate code somewhere or it's useless ?
[00:44:03] <FromDiscord> <Yardanico> you can, by default it's stored in the cache folder specific to your user and OS, but you can instruct the nim compiler to save it somewhere you want
[00:44:05] <FromDiscord> <Yardanico> with `--nimcache:folder`
[00:44:19] <FromDiscord> <Yardanico> but just be advised, that code isn't really supposed to be very human readable, especially for beginners
[00:44:46] <FromDiscord> <Yardanico> you almost never need to look at it, maybe only if you use Nim and want to debug some compiler issue that involves the backend (the part that compiles Nim code to C)
[00:45:05] <FromDiscord> <Yardanico> (edit) "backend" => "codegen"
[00:46:25] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3IN9
[00:46:46] <FromDiscord> <TryAngle> (let's ignore the practicality)
[00:47:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[00:47:41] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3IN9" => "https://play.nim-lang.org/#ix=3INa"
[00:51:51] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[00:55:36] *** Joins: xet7 (~xet7@user/xet7)
[01:05:27] <FromDiscord> <TryAngle> in VSC in a new project nim suddeny uses 2 spaces instead of 4â†µhow do I set it to 4 (VSC uses 4 on User, Remote and Workspace)?
[01:05:39] <FromDiscord> <konsumlamm> In reply to @TryAngle "so something like this:": that would work
[01:06:10] <FromDiscord> <Solitude> !eval import macros; dumpTree: let poly = 1.x1Â² + 1.x2Â² - 4
[01:06:12] <NimBot> Compile failed: <no output>
[01:07:03] <FromDiscord> <Solitude> `Ident "x2Â²"`
[01:07:17] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[01:07:36] <FromDiscord> <Solitude> `Â²` is part of the identifier, not an operator
[01:08:03] <FromDiscord> <Solitude> !eval import macros; dumpTree: (let poly = 1.x1Â² + 1.x2Â² - 4)
[01:08:05] <NimBot> Compile failed: <no output>
[01:08:23] <FromDiscord> <Solitude> nvm, its compiler output...
[01:08:56] <FromDiscord> <TryAngle> In reply to @Solitude "`Â²` is part of": that was the idea ðŸ¤” â†µyou can't just add x^2 with x anyways
[01:08:57] <yann-kaelig> well, so looking inside my .cache/nim/doesnothing_d/ folder  I can see three differents type of files: '.c' which is pretty clear to understand thanks to the comments.  a type '.c.o' No idea what's this file, and a '.json' which look like a log of the compilation with some info ( Is this file used somewhere ? can I use/parse this file to output some values somewhere else ? ) And finally from where all the
[01:08:58] <yann-kaelig> se std libs comes from, generated/downloaded/... by whom ?
[01:10:05] <FromDiscord> <Yardanico> In reply to @yann-kaelig "well, so looking inside": your message got cut off
[01:10:11] <FromDiscord> <Yardanico> .c.o is the compiled .c files
[01:10:14] <FromDiscord> <Yardanico> they're object files
[01:10:26] <FromDiscord> <Yardanico> the stdlib is written in Nim, it comes preinstalled with your Nim installation
[01:10:43] <FromDiscord> <Yardanico> https://nim-lang.org/docs/lib.html
[01:12:56] <FromDiscord> <qb> any fancy idea to parse any type string to a type? eg.: "int32" -> int32 - Not a huge fan of having a case there for all types
[01:13:15] <FromDiscord> <qb> (edit) "case" => "`case`"
[01:14:19] *** Joins: xet7 (~xet7@user/xet7)
[01:15:14] <yann-kaelig> Yardanico: and what about the .json file, sry if I'm asking again about it
[01:15:31] <FromDiscord> <Yardanico> it's just a description of the commands Nim used to compile the C files
[01:15:43] <FromDiscord> <Yardanico> In reply to @qb "any fancy idea to": you mean at compile time?
[01:15:54] <FromDiscord> <qb> At runtime
[01:16:02] <FromDiscord> <Solitude> lol
[01:16:27] <FromDiscord> <Solitude> any snippets?
[01:17:26] <FromDiscord> <Yardanico> In reply to @qb "At runtime": I don't think you can simplify it really
[01:17:36] <FromDiscord> <Yardanico> you can make it "look" simpler by moving the complexity elsewhere
[01:17:41] <FromDiscord> <Yardanico> like making a template or a macro
[01:17:46] <FromDiscord> <Yardanico> but that doesn't make it simpler
[01:27:16] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[01:28:26] <FromDiscord> <qb> alright
[01:40:14] <FromDiscord> <Elegantbeef> @qb\: what're the types though, is it any type or just integers?
[01:41:05] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[01:42:32] <FromDiscord> <Elegantbeef> Regardless there will be a case statement, i'm just interested ðŸ˜€
[01:42:37] <yann-kaelig> All of this is very interesting even if I have a lot of things to learn, among other things the config files and I found a documentation about nim's memory management which is at high level for now for me. Really, thank you very much Yardanico for your help, finally I spent all the time on nim, that a good sign :)
[01:42:49] <FromDiscord> <qb> um any I guess. Why does that actually return a `void`? https://play.nim-lang.org/#ix=3INl
[01:45:17] <FromDiscord> <Elegantbeef> This wont work as you expect anyway
[01:45:42] <FromDiscord> <Elegantbeef> But `typedesc` as a return type defaults to void it seems
[01:46:46] <FromDiscord> <Elegantbeef> Also you know `int` and `uint` are platform specific?
[01:47:35] <FromDiscord> <Elegantbeef> And `float` is 64bit regardless
[01:48:52] <FromDiscord> <qb> In reply to @Elegantbeef "Also you know `int`": You mean the bytesize of 4 or 8 bytes on x86/x64? If so yes
[01:49:19] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3INp something like this will be what you want i think
[01:49:35] <FromDiscord> <Elegantbeef> typedesc is a compile time only thing
[01:49:48] <FromDiscord> <Elegantbeef> You cannot use it at runtime like you wanted
[01:50:04] <FromDiscord> <qb> Oh okay. Thank you
[01:50:54] <FromDiscord> <Elegantbeef> Depending on what you're doing you may need an object variant
[01:51:04] <FromDiscord> <Elegantbeef> Either way case statement galore ðŸ˜›
[02:04:09] *** Parts: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de) ()
[02:13:19] <NimEventer> New Nimble package! wavecore - Client and server database and networking utils, see https://github.com/ansiwave/wavecore
[02:39:48] <FromDiscord> <TryAngle> how would I implement a concept that abstracts over multiple Operators?
[02:44:07] <FromDiscord> <TryAngle> sent a code paste, see https://paste.rs/80g
[02:44:18] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3INE" => "https://play.nim-lang.org/#ix=3IND"
[02:47:16] *** Joins: Guest2 (~Guest2@2806:103e:21:323d:64ae:9c04:8f5e:2246)
[02:47:55] <Guest2> I just intalled 1.6.0 and csfml stopped working
[02:48:19] <Guest2> 1.6.2
[02:48:30] <Guest2> SIGSEGV: Illegal storage access. (Attempt to read from nil?)
[02:48:41] <Guest2> someone knows why this could be?
[02:49:41] <Guest2> csfml links to dlls and I think there is a problem trying to load them
[02:53:13] <NimEventer> New thread by BarrOff25: Check nim compiler version during compilation, see https://forum.nim-lang.org/t/8724
[03:13:59] <FromDiscord> <theangryepicbanana> In reply to @TryAngle "this is what I": `[Add]` declares `Add` as a new type variable, you should try doing `proc operate[T: Add](x, y: T): T = ...`
[03:14:38] <FromDiscord> <theangryepicbanana> (alternatively, you could just do `proc operate(x, y: Add): Add = ...` and you'll get the same effect)
[03:15:44] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[03:16:27] *** Joins: xet7 (~xet7@user/xet7)
[03:20:11] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3INL
[03:20:36] <FromDiscord> <theangryepicbanana> In reply to @TryAngle "thanks, sadly I'm getting": yeah that's because `int` supports `+` and ``
[03:20:48] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3INL" => "https://play.nim-lang.org/#ix=3INM"
[03:21:28] <FromDiscord> <TryAngle> what would be the way to keep using int but restrict the operation to only one?
[03:21:40] <FromDiscord> <theangryepicbanana> you could use a distinct type
[03:22:42] <FromDiscord> <theangryepicbanana> sent a code paste, see https://play.nim-lang.org/#ix=3INN
[03:23:53] <FromDiscord> <TryAngle> the issue I'd have then is being restricted to int.â†µWhat I'd like to accomplish is algebra over any type and operator ðŸ¤”
[03:24:17] <FromDiscord> <theangryepicbanana> well you need some way to distinguish which operator you want to use
[03:33:36] <FromDiscord> <TryAngle> hmmm so I missunderstood concepts in the first place maybe?
[03:33:58] <FromDiscord> <TryAngle> so they act as restrictions what types can be used but not replace the procs
[03:34:00] <FromDiscord> <theangryepicbanana> not really it's just that they can't be as "specific" as you think they can
[03:34:04] <FromDiscord> <theangryepicbanana> (edit) "really" => "really,"
[03:34:28] <FromDiscord> <theangryepicbanana> so when you call `operate` in `addTest`, it's still going to test both overloads of `operate`
[03:35:42] <FromDiscord> <TryAngle> I thought at first they were similar to traits from Rust, which override the type function with the trait function in that scope
[03:35:50] <FromDiscord> <TryAngle> but that seems to not be the case
[03:35:52] <FromDiscord> <theangryepicbanana> nope
[03:36:01] <FromDiscord> <theangryepicbanana> concepts are compile-time only
[03:36:31] <FromDiscord> <TryAngle> I thought the rust were compile time also ðŸ¤” â†µbut I'm unsure
[03:36:38] <FromDiscord> <theangryepicbanana> well like
[03:37:08] <FromDiscord> <TryAngle> bc they "zero cost generics" hype everwhere, idk haven't looked into compiler / runtime
[03:37:18] <FromDiscord> <theangryepicbanana> instead of `operate` being implemented for every valid type for `Add`, it's just a generic function that takes 2 arguments of type `Add`
[03:37:18] <FromDiscord> <Elegantbeef> You can get that kind of behaviour using generic logic
[03:37:19] <FromDiscord> <Elegantbeef> Here i'll show how in a second
[03:37:26] <FromDiscord> <theangryepicbanana> oh yeah was about to mention that
[03:37:35] <FromDiscord> <TryAngle> o_O
[03:37:37] <FromDiscord> <TryAngle> now i'm curious
[03:37:51] *** Quits: Guest2 (~Guest2@2806:103e:21:323d:64ae:9c04:8f5e:2246) (Quit: Client closed)
[03:46:00] <FromDiscord> <Elegantbeef> Shit my example didnt work ðŸ˜€
[03:47:42] <FromDiscord> <TryAngle> thanks for trying at least ðŸ¥²
[03:47:51] <FromDiscord> <Elegantbeef> Eh i'll get it working
[03:54:58] <FromDiscord> <TryAngle> that would be amazing but you really don't have to ðŸ¥º
[03:56:10] <FromDiscord> <Elegantbeef> Too bad!
[03:58:08] <FromDiscord> <Elegantbeef> Lol never mind even with mixin'd symbols the first instantiation is used
[03:58:54] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Lol never mind even": what are mixin'd symbols ðŸ˜ƒ ?
[03:59:13] <FromDiscord> <ynfle (ynfle)> When is one supposed to be used over the other?
[03:59:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3INV
[03:59:30] <FromDiscord> <Elegantbeef> `mixin` forces the symbol `funStuff` to be chosen at instantiation
[04:00:04] <FromDiscord> <ynfle (ynfle)> In the above `operate` example how are the 2 function differentiated?
[04:00:44] <FromDiscord> <TryAngle> In reply to @ynfle (ynfle) "In the above `operate`": they are not sadly thats why I'm asking her ðŸ˜”
[04:01:07] <FromDiscord> <Elegantbeef> Annoyingly you cannot have per module generics it seems
[04:01:29] <FromDiscord> <Elegantbeef> I wonder if there is a way to instantiate a new generic
[04:01:51] <FromDiscord> <ynfle (ynfle)> What would you want to happen?â†µ(@TryAngle)
[04:02:33] <FromDiscord> <Elegantbeef> What are you after anyway try, i read a bit but dont follow
[04:02:40] <FromDiscord> <TryAngle> hmmm in worst case I can just not be generic over operators ðŸ¤”
[04:03:05] <FromDiscord> <TryAngle> basically implement parts of abstract algebra as generic as possible
[04:03:10] <FromDiscord> <ynfle (ynfle)> What are you trying to do?
[04:03:36] <FromDiscord> <ynfle (ynfle)> But if you call `operate(1, 2)` how do you know which operation you want to use?
[04:04:48] <FromDiscord> <ynfle (ynfle)> Can you give an example?
[04:05:07] <FromDiscord> <TryAngle> In reply to @ynfle (ynfle) "But if you call": I've written somewhere up that I misunderstood nim's conceptsâ†µI thought they were like Rust Traits that overwrite the function in the scope where the trait is used
[04:05:43] <FromDiscord> <Elegantbeef> I think they probably should
[04:06:13] <FromDiscord> <ynfle (ynfle)> Okâ†µ(@TryAngle)
[04:06:23] <FromDiscord> <ynfle (ynfle)> Did you resolve what you wanted to get done?
[04:06:52] <FromDiscord> <Elegantbeef> you can reason that if you have a concept defined and the mixin'd symbols do not match, a new instantiation probably should be made
[04:06:52] <FromDiscord> <ynfle (ynfle)> I don't know rust so well
[04:07:08] <FromDiscord> <ynfle (ynfle)> Do you still want help doing something in nim?
[04:07:30] <FromDiscord> <Elegantbeef> Damn it try i now have to toy with this idea and see what breaks
[04:07:38] <FromDiscord> <Elegantbeef> Cause i think what you're suggesting is the "right" thing
[04:08:41] <FromDiscord> <TryAngle> In reply to @ynfle (ynfle) "I don't know rust": I will try to compact the Rust code I had somewhere.. just give me a sec
[04:09:41] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:10:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3INZ
[04:12:31] <FromDiscord> <Elegantbeef> It's of course not since the `doThing(a, b) == 340` doesnt instantiate a new `doThing` for the scope of moduleB
[04:14:26] <FromDiscord> <Elegantbeef> Hmmm if we just make that `proc doThing` a `template doThing` this does work as intended
[04:14:28] <FromDiscord> <Elegantbeef> So i guess that's my suggestion, use templates for the procs that depend on scope
[04:14:46] <FromDiscord> <Elegantbeef> See try there was a benefit for me ramming my head in the wall for you ðŸ˜›
[04:15:44] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3IO0
[04:16:12] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3IO0" => "https://play.nim-lang.org/#ix=3IO1"
[04:16:17] <FromDiscord> <Elegantbeef> So yea we'd use distincts here
[04:18:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IO2
[04:19:18] <FromDiscord> <Elegantbeef> I dont think there is much reason to use concepts for this, since you're just wanting distinct behaviour for the same type
[04:19:57] <FromDiscord> <TryAngle> I only used the same type here to not make the example too complicated for somebody who doesn't write Rust ðŸ˜…
[04:20:06] <FromDiscord> <ElegantBeef> Oh
[04:21:00] <FromDiscord> <Elegantbeef> Anyway you can use the concept + templates instead of procs to get this behaviour
[04:24:06] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Anyway you can use": may you give a small example please?
[04:24:16] <FromDiscord> <Elegantbeef> Same as my example above
[04:24:23] <FromDiscord> <Elegantbeef> But here
[04:24:46] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IO4
[04:24:49] <FromDiscord> <Elegantbeef> There we go
[04:25:19] <FromDiscord> <Elegantbeef> Scope is now taken into account on call of `doThing` and `+` is bound to whatever is in scope instead of the first isntantiation of `doThing` thanks to the fact it's a template instead of proc
[04:25:30] <FromDiscord> <Elegantbeef> So now `+` is overridable based of scope
[04:26:32] <FromDiscord> <Elegantbeef> That atleast allows the overidable behaviour, the disallowing operators is more tricky
[04:28:08] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3IO6
[04:28:53] <FromDiscord> <Elegantbeef> Isnt this what you wanted scope taken into account?
[04:28:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:29:26] <NimEventer> New thread by Jocker: Pythons None in Nim, see https://forum.nim-lang.org/t/8725
[04:33:14] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Isnt this what you": yeah but I need to combine Monoid<Additive> and Monoid<Multiplicative> so scoping is not really an option for that :/
[04:33:27] <FromDiscord> <TryAngle> (edit) "In reply to @Elegantbeef "Isnt this what you": yeah but I need to combine Monoid<Additive> and Monoid<Multiplicative> ... so" 03added "for other purposes"
[04:33:42] <FromDiscord> <TryAngle> (edit) "In reply to @Elegantbeef "Isnt this what you": yeah but I need to combine Monoid<Additive> and Monoid<Multiplicative> ... for" 03added "(not directly but in hirarchy)"
[04:34:49] <FromDiscord> <ynfle (ynfle)> In this rust code, is it missing a `>` in each of the test `fn`s?â†µ(@TryAngle)
[04:35:13] <FromDiscord> <TryAngle> In reply to @ynfle (ynfle) "In this rust code,": yes it does miss them
[04:35:26] <FromDiscord> <ynfle (ynfle)> Okâ†µ(@TryAngle)
[04:35:29] <FromDiscord> <TryAngle> I typed it in discord and forgot them in the hurry ðŸ˜…
[04:35:43] <FromDiscord> <ynfle (ynfle)> What is the purpose of the Monoid part?
[04:36:19] <FromDiscord> <ynfle (ynfle)> Is this not sufficient? https://play.nim-lang.org/#ix=3IOc
[04:37:01] <FromDiscord> <TryAngle> In reply to @ynfle (ynfle) "What is the purpose": this is proabably what I resort to now
[04:37:17] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:38:04] <FromDiscord> <TryAngle> in 99% of having the operator generic is not needed anywaysâ†µit's just like knowing it's not generic in the codebase ðŸ˜±
[04:38:13] <FromDiscord> <TryAngle> (edit) "in 99% of ... having" 03added "cases"
[04:39:38] <FromDiscord> <TryAngle> @ElegantBeef still big thanks for coming up with an interesting solution, didn't know something like mixin were a thing, will definitely use something like that for another thing I have in my head already ðŸ¤” ðŸ˜€
[04:42:27] <FromDiscord> <Fish-Face> is there any documentation for `nimly` that isn't just the two examples in the readme ðŸ˜¦
[04:42:42] <FromDiscord> <ynfle (ynfle)> @TryAngle https://nim-lang.org/docs/manual_experimental.html#concepts Talks about monoids
[04:43:50] <FromDiscord> <TryAngle> In reply to @ynfle (ynfle) "@TryAngle https://nim-lang.org/docs/manual_experime": haha I know about that example but sadly this is just a little snippet :/
[04:44:00] <FromDiscord> <ynfle (ynfle)> Yaâ†µ(@TryAngle)
[04:44:08] <FromDiscord> <ynfle (ynfle)> It doesn't show a monoid generic concept
[04:48:32] <FromDiscord> <exelotl> huh https://play.nim-lang.org/#ix=3IOe
[04:48:56] <FromDiscord> <exelotl> this prints `0` on Nim 1.6 but `6` on Nim 1.4.8
[04:49:36] <FromDiscord> <exelotl> which is correct?
[04:51:52] <FromDiscord> <ynfle (ynfle)> The weird part is it still prints hello on 1.6.0
[04:52:40] <FromDiscord> <TryAngle> I mean len 0 should be correct in the context of `c` no?
[04:52:47] <FromDiscord> <Elegantbeef> O is right
[04:52:55] <FromDiscord> <ynfle (ynfle)> Right. But why should it print?
[04:53:13] <FromDiscord> <Elegantbeef> 0 even
[04:53:39] <FromDiscord> <TryAngle> strings are usually null terminated in câ†µe.g the "NULL" ascii char is the end of the string
[04:53:45] <FromDiscord> <Elegantbeef> Nah we're wrong
[04:53:55] <FromDiscord> <Elegantbeef> This is a global const Cstring, which is probably generated as an array
[04:54:04] <FromDiscord> <TryAngle> (edit) "string" => "stringâ†µthe "NULL" ascii char is `\0`"
[04:54:21] <FromDiscord> <Elegantbeef> make it `let` and do `echo s` or `echo s.len` and it'll properly behave
[04:54:55] <FromDiscord> <Elegantbeef> Since it's a constant cstring it's emitted as `['\0', 'h', 'e', 'l', 'l', 'o']`
[04:55:05] <FromDiscord> <Elegantbeef> So i'd argue 1.6 is right
[04:56:38] <FromDiscord> <Elegantbeef> To add to this a `cstring` is a ptr to a character and you cannot have a ptr to a constant since they're pasted into call site
[04:57:04] <FromDiscord> <Elegantbeef> So very much 1.6 is the "right" behaviour to me, would like to hear any counter points anyone has though ðŸ˜€
[04:58:04] <FromDiscord> <TryAngle> this like this are litereally the reason why I was searching for other langs and found Rust & Nim XD
[04:58:14] <FromDiscord> <TryAngle> (edit) "this" => "things"
[04:58:46] <FromDiscord> <Elegantbeef> Does this mean you run screaming from Nim now? ðŸ˜›
[05:02:12] <FromDiscord> <TryAngle> What do you mean ðŸ˜³?
[05:02:42] <FromDiscord> <Elegantbeef> You said things like that is why you were searching for other languages, and Nim has stuff like that ðŸ˜›
[05:02:47] <FromDiscord> <Elegantbeef> It's mostly a joke
[05:06:44] <FromDiscord> <TryAngle> sent a long message, see http://ix.io/3IOg
[05:07:45] <FromDiscord> <Elegantbeef> Lack of restrictions?
[05:08:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[05:10:13] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Lack of restrictions?": I think this is more of a opinion thing so idk â†µbut that when using Concepts only the procs supplied by the concept are allowed.
[05:11:19] <FromDiscord> <TryAngle> If I want all why not just type the type directly ðŸ¤”
[05:12:24] <FromDiscord> <TryAngle> + they are experimental anyways
[05:12:52] <FromDiscord> <Elegantbeef> Eh they're "experimental"
[05:13:37] <FromDiscord> <Elegantbeef> Hmm with the new concept style, this safety could be enforced with a macro
[05:13:59] <FromDiscord> <Elegantbeef> God damn it quit enticing me with fun
[05:16:47] <FromDiscord> <TryAngle> Hahaâ†µJust did nothing but writing in Rust last year but figured many things are ugly to implement so now I'm trying to write things in Nim but I'm still used to the "rust-way"
[05:17:04] <FromDiscord> <TryAngle> (edit) "Hahaâ†µJust did nothing but writing in Rust last year but figured many things are ugly to implement so now I'm trying to write things in Nim but I'm still used to the "rust-way" ... " 03added "sadly"
[05:33:03] <FromDiscord> <Avionix> I've got a question about the `std/times` module and was wondering if anyone has any idea what's wrong.
[05:33:04] <FromDiscord> <Avionix> https://play.nim-lang.org/#ix=3IOq
[05:33:19] <FromDiscord> <Avionix> Here's an example.
[05:33:24] <FromDiscord> <Elegantbeef> @TryAngle\: here is what you've got me to make ðŸ˜› https://play.nim-lang.org/#ix=3IOr
[05:35:39] <FromDiscord> <Avionix> Basically, I'm converting a string containing a unix epoch into a `Time` object. For some reason, the resulting `Time` object doesn't equal the one I used to actually make the unix epoch string.
[05:36:04] <FromDiscord> <Elegantbeef> It seems to be missing nanoseconds
[05:36:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IOs
[05:37:13] <FromDiscord> <Avionix> Oh. That's precisely it, thank you!
[05:37:15] <FromDiscord> <Rika> Unix epoch usually refers to the second precise epoch
[05:37:29] <FromDiscord> <Elegantbeef> From unix float almost works but still isnt right
[05:38:00] <FromDiscord> <Elegantbeef> If you want to do time \<-\> string you'll probably have to use `formatTime` and `parseTime` using your own output
[05:38:21] <FromDiscord> <Elegantbeef> This way you can get the generally uncared about values
[05:38:51] <FromDiscord> <Avionix> I think I might do that. Thanks for your help!
[05:38:57] <FromDiscord> <Elegantbeef> Alternatively you can always just do `proc sameTime(a, b: Time): bool =  (a - b) < initDuration(seconds = 0)`
[05:39:06] <FromDiscord> <Elegantbeef> Sorry `seconds = 1`
[06:09:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:39:55] *** Quits: src (~src@user/src) (Quit: Leaving)
[07:06:17] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:10:37] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:49:47] <FromDiscord> <valerga> is there a difference between `echo x, y` vs `echo x & y`?
[07:50:20] <FromDiscord> <valerga> oh ok it's not casted to string for instance, in the second one
[07:52:22] <FromDiscord> <Elegantbeef> Indeed as you've noticed `echo(x, y)` is `echo($x, $y)` but the other expects two types that have `&` implemented
[07:53:27] <FromDiscord> <Rika> same-ish difference with python's print(x,y) and print(x+y)
[08:06:12] <FromDiscord> <valerga> expects two types? or one type, a string?
[08:06:41] <FromDiscord> <Elegantbeef> Well it's looking for `&(typeof(x), typeof(y)`
[08:07:12] <FromDiscord> <valerga> but isn't that &'s 'responsibility'?
[08:07:22] <FromDiscord> <Elegantbeef> That's where the error is from
[08:07:29] <FromDiscord> <valerga> ah ok
[08:08:00] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IOL
[08:31:44] <NimEventer> New Nimble package! opensimplexnoise - A pure nim port of the open simplex noise algorithm from Kurt Spencer, see https://github.com/betofloresbaca/nim-opensimplexnoise
[08:34:12] <FromDiscord> <Rika> nice
[08:49:45] <NimEventer> New Nimble package! prettystr - Small library for working with strings, see https://github.com/prettybauble/prettystr
[09:43:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[10:25:29] <FromDiscord> <baalajimaestro> Hi, is there any way i could run osproc with async. I am trying to do a telegram bot, and dont want the execution to block others from messaging it
[10:25:51] <FromDiscord> <baalajimaestro> I did find this, https://github.com/cheatfate/asynctools/blob/master/asynctools/asyncproc.nimâ†µâ†µBut not sure how to use
[10:26:40] <FromDiscord> <baalajimaestro> I nimble installed the necessary package, and imported asynctools.asyncproc, but asyncproc.execProcess doesnt seem to work out
[10:29:47] <FromDiscord> <Elegantbeef> In what way didnt it work out?
[10:41:17] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3IPa
[10:43:02] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IPb
[10:43:03] <FromDiscord> <that_dude> And I'm hesitant to use macrocache because I don't understand how it works. I'd like to make it myself
[10:43:32] <FromDiscord> <that_dude> Damn
[10:43:39] <FromDiscord> <that_dude> That did seem to fix it
[10:43:52] <FromDiscord> <Elegantbeef> Well yea you're putting the string there instead of ast now
[10:45:30] <FromDiscord> <baalajimaestro> it just said undeclared identifier asyncproc, when there is an import right a line above
[10:45:41] <FromDiscord> <Elegantbeef> full code?
[10:46:35] <FromDiscord> <Elegantbeef> You cant really implement macro cache thanks to the magic it implements but you can get close
[10:47:27] <FromDiscord> <that_dude> In reply to @Elegantbeef "Well yea you're putting": I'm confused. Isn't `proc_name` holding a string already?
[10:47:58] <FromDiscord> <that_dude> I thought quote do is a perfect copy and paste
[10:48:05] <FromDiscord> <that_dude> ish
[10:50:25] <FromDiscord> <Elegantbeef> Well it puts in a symbol to `proc_name` which is a Nim AST node
[10:50:42] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3IPe look at the output here https://play.nim-lang.org/#ix=3IPe
[10:50:43] <FromDiscord> <Elegantbeef> Damn it
[10:50:47] <FromDiscord> <Elegantbeef> Double paste
[10:51:02] <FromDiscord> <baalajimaestro> https://paste.baalajimaestro.me/6IloRO
[10:51:10] <FromDiscord> <baalajimaestro> this is what i tried
[10:51:33] <FromDiscord> <Elegantbeef> Oh python imports
[10:51:39] <FromDiscord> <Elegantbeef> my favourite
[10:52:13] <FromDiscord> <baalajimaestro> well, i am new to nim, pretty much have been using python earlier
[10:52:16] <FromDiscord> <Elegantbeef> Does it behave the same without it?
[10:52:39] <FromDiscord> <baalajimaestro> without what exactly?
[10:53:07] <FromDiscord> <Elegantbeef> instead of `from x in y` do `import x`
[10:53:17] <FromDiscord> <baalajimaestro> hmmm ill try that
[10:54:20] <FromDiscord> <baalajimaestro> oh that worked
[10:54:37] <FromDiscord> <that_dude> Does sym only bind to procs or something? I thought it does to all variables/entities
[10:54:55] <FromDiscord> <baalajimaestro> idk how that changes anything, isnt it supposed to like slim down whats imported inside?
[10:54:55] <FromDiscord> <Elegantbeef> `from x import y` doesnt make a `y.x` work it imports only `asynproc`
[10:55:09] <FromDiscord> <Elegantbeef> `import asynctools` imports everything exported
[10:55:19] <FromDiscord> <baalajimaestro> thats something different from python indeed
[10:56:12] <FromDiscord> <Elegantbeef> you want `import asynctools as asyncproc` but life is easier just doing `import asynctools`
[10:57:07] <FromDiscord> <Elegantbeef> The issue is that doing the quote like that will bind the sym of the variable that was made inside the macro, not the value it holdsâ†µ(@that_dude)
[10:57:59] <FromDiscord> <Elegantbeef> In nim baalaji the convention is to just do `import x` and bring everything since it makes life easier
[10:58:23] <FromDiscord> <Elegantbeef> Selective imports dont make much sense imo, but your milage may vary
[11:01:05] <FromDiscord> <that_dude> So basically when done it's referencing a var that doesn't exist anymore? I kinda thought macros kinda just paste selves into the code like a template and then run the pasted code. Does it instead work closer to the way a proc works where it takes code in and then after manipulations spits out new code to replace the old one?
[11:01:43] <FromDiscord> <Elegantbeef> Macros are nothing like templates
[11:01:57] <FromDiscord> <baalajimaestro> ah okay got it
[11:02:00] <FromDiscord> <Elegantbeef> They take what you give them and run on the vm with the input and return the output
[11:02:43] <FromDiscord> <baalajimaestro> i was thinking in the python route, where you can import a specific function and make your code run faster just coz you werent importing 1000 other randoms you never need
[11:02:49] <FromDiscord> <Elegantbeef> Templates are code substitution and dont require the vm, they take the AST from the template replace the symbols and expand
[11:02:59] <FromDiscord> <Elegantbeef> Yea Nim is compiled so you dont slow down the code with all the imports
[11:03:07] <FromDiscord> <Elegantbeef> It statically knows what you use and doesnt include anything else
[11:03:28] <FromDiscord> <that_dude> I understand. I think. I took them to be templates that can use code to generate more custom ast's
[11:03:32] <FromDiscord> <Elegantbeef> Python has to check what a function is at runtime
[11:03:32] <FromDiscord> <baalajimaestro> similar to C's LTO if i am making a correct reference?
[11:03:52] <FromDiscord> <Elegantbeef> LTO is different, we're talking about dead code elimination really
[11:04:03] <FromDiscord> <Elegantbeef> Nim doesnt generate code for procedures you dont use
[11:04:15] <FromDiscord> <baalajimaestro> hmmm got it
[11:04:58] <FromDiscord> <Elegantbeef> I didnt even think about the fact that you reduce runtime costs when doing that in python, that's interesting
[11:05:28] <FromDiscord> <Elegantbeef> Yea i think you understand, you can always think of macros as a user defined compilation pass
[11:05:33] <FromDiscord> <Elegantbeef> Cause that's what they're really
[11:06:48] <FromDiscord> <Elegantbeef> The compiler finds a macro call takes the code it requests passes it to the VM which then runs your code returning your AST then semantically checks it, so very much just a user defined pass
[11:07:48] <FromDiscord> <Elegantbeef> The `quote` macro btw uses the backticks as a "insert the AST of X here" like a template
[11:08:07] <FromDiscord> <Elegantbeef> If you're on 1.6 you may also want to look at genast as it's a bit nicer
[11:08:19] <FromDiscord> <Elegantbeef> it's inside `std/genasts`
[11:08:56] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3IPg
[11:09:11] <FromDiscord> <Elegantbeef> Ah nope that's just standard nim code
[11:09:16] <FromDiscord> <that_dude> I will look into genasts, the reason I used `quote do` is because all of the examples I saw used it
[11:09:19] <FromDiscord> <Elegantbeef> You can pass arguments with a block style `:`
[11:09:30] <FromDiscord> <that_dude> ah
[11:09:41] <FromDiscord> <Elegantbeef> Yea genast is new in 1.6 so all the tutorials use quote which is older
[11:10:16] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IPh
[11:10:30] <FromDiscord> <Elegantbeef> All that does is take the expression after `:` and put it inside the `a.add` call
[11:10:43] <FromDiscord> <Elegantbeef> It works for all procedures/templates but is mainly for templates/macros
[11:11:04] <FromDiscord> <that_dude> So `quote do` returned an object which was the nimnode in this case and effectivly turned it into `result = newStmtList(x, node)`
[11:11:13] <FromDiscord> <Elegantbeef> Yep!
[11:11:23] <FromDiscord> <that_dude> Neat
[11:12:04] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3IPi
[11:12:08] <FromDiscord> <that_dude> to make let work nicer
[11:12:13] <FromDiscord> <Elegantbeef> That's different though
[11:12:28] <FromDiscord> <Elegantbeef> that's like `var a = {1}` in other languages ðŸ˜€
[11:13:32] <FromDiscord> <Elegantbeef> Nim's got a bunch of these elegant solutions to problems
[11:13:52] <FromDiscord> <that_dude> Aren't the two examples basically the same? The let one returned a value of 1 and added that as an arg which just so happened to be the only input to the assignment?
[11:14:12] <FromDiscord> <Elegantbeef> Nah `block` is a keyword which opens a new scope
[11:14:29] <FromDiscord> <that_dude> and `a.add` didnat?
[11:14:33] <FromDiscord> <Elegantbeef> I mean i guess it's both a block expressions
[11:14:55] <FromDiscord> <Elegantbeef> I was being dumbly pedantic
[11:14:59] <FromDiscord> <that_dude> ah
[11:15:01] <FromDiscord> <that_dude> mb
[11:31:05] <FromDiscord> <Elegantbeef> @that_dude\: if you wanted to see how one would do it with macrocache https://play.nim-lang.org/#ix=3IPo
[11:31:17] <FromDiscord> <Elegantbeef> It's not that interesting but might tickle your brain
[12:02:29] <FromDiscord> <that_dude> I'm going to keep that tab open, but I don't think I'm ready to deal with that level of manipulation
[14:06:44] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3IPM
[14:07:26] <FromDiscord> <Rika> Youâ€™re trying to overload tuple []
[14:07:29] <FromDiscord> <Rika> Use object
[14:07:50] <FromDiscord> <Hamid_Bluri> same with `object`
[14:08:02] <FromDiscord> <Rika> Are you sure
[14:08:17] <FromDiscord> <Hamid_Bluri> yes
[14:08:33] <FromDiscord> <Hamid_Bluri> no
[14:08:56] <FromDiscord> <Hamid_Bluri> fine with object
[14:08:58] <FromDiscord> <Hamid_Bluri> thanks
[14:10:06] <FromDiscord> <Rika> ðŸ‘Œ
[14:45:24] <FromDiscord> <sOkam!> I know of the std/memfiles lib, https://nim-lang.org/docs/memfiles.htmlâ†µbut, as the noob I am, I'm not fully grasping how I would use the info that an opened file contains, or how to filter the info to an specific applicationâ†µHow would one go about accessing all in-ram information used by an app?
[14:46:12] <FromDiscord> <sOkam!> (edit) "file" => "memfile"
[15:34:58] <FromDiscord> <Michal58> In reply to @Michal58 "<@!259277943275126785> yeah, it doesn't": is this deprecated in 1.6.2?
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:33:50] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[16:34:48] *** Joins: xet7 (~xet7@user/xet7)
[16:36:37] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[16:37:37] *** Joins: xet7 (~xet7@user/xet7)
[16:43:30] *** Joins: TakinOver (~quassel@193.27.13.251)
[16:53:41] <FromDiscord> <hmmm> jeez I just read from the forum that you can do something like: "proc foo(x: int or typeof(nil); y: int or typeof(nil)) ="
[16:54:29] <FromDiscord> <hmmm> someone should really do a Nim Pearls publication and free us from medieval ignorance ðŸ¤”
[16:54:49] <FromDiscord> <hmmm> or I should just RTFM, one of the two I guess ðŸ¤¨
[17:04:15] <FromDiscord> <Rika> !eval echo typeof nil
[17:04:19] <NimBot> typeof(nil)
[17:04:23] <FromDiscord> <Rika> ?
[17:04:33] <FromDiscord> <Rika> what about that is weird idgi
[17:04:56] <qwr> seems that nim doesn't have separate name for nil type other than typeof(nil) ?
[17:06:23] * qwr is guessing that in essence it should be like ocaml's unit type or haskell's () (haskell uses () as typename for the type of () value)
[17:07:28] <FromDiscord> <Rika> no its more like a "sentinel that can match many things" like the empty of seq[empty] when typeof(@[])
[17:07:59] <FromDiscord> <Rika> nil can match pointer or ptr T or ref T
[17:08:48] <qwr> which means that "nillable" types are in fact sum types of the T and typeof(nil)
[17:09:21] <qwr> (not unique to nim)
[17:11:54] <qwr> or maybe the compiler considers typeof(nil) itself generic - i couldn't find it from language manual so not sure
[17:12:59] <qwr> but the nature of nullable/nillable types is equivalent to parametric sum type
[17:14:19] <qwr> javas Option<T> or rusts std::option are nice demonstrations of this, as both are functionally equivalent to nillable type
[17:16:13] <qwr> https://doc.rust-lang.org/std/option/enum.Option.html
[17:16:29] <FromDiscord> <Rika> no nil is just literal NULL in c
[17:16:35] <FromDiscord> <Rika> nim also has a separate option type
[17:17:09] <FromDiscord> <demotomohiro> In reply to @hmmm "jeez I just read": It is just using a feature written in the Nim manual.
[17:17:10] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/manual.html#generics-type-classes
[17:18:38] <qwr> Rika: yes of course, i'm just saying that from type theory perspective nillability is also a form of sum type
[17:19:59] <FromDiscord> <Rika> okay
[17:24:32] *** Joins: src (~src@user/src)
[17:34:24] *** Joins: arkurious (~arkurious@user/arkurious)
[17:37:03] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:52:58] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[17:53:11] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[17:53:58] <NimEventer> New thread by Mantielero: What approach can I use to fix a number of parameters in some functions?, see https://forum.nim-lang.org/t/8726
[19:05:30] *** Joins: elph (uid286227@id-286227.lymington.irccloud.com)
[19:06:06] *** Joins: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[19:29:34] *** Joins: averell (~averell@user/averell)
[19:48:16] *** Joins: geek_ (~geek@aftr-82-135-87-106.dynamic.mnet-online.de)
[19:55:38] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[19:56:36] *** Joins: xet7 (~xet7@user/xet7)
[20:41:34] <FromDiscord> <Rosen> sent a code paste, see https://play.nim-lang.org/#ix=3IRQ
[20:42:36] <FromDiscord> <Rika> `nimble list -i | grep neo` shows what?
[20:43:08] <FromDiscord> <Rosen> It's there
[20:43:15] <FromDiscord> <Rika> version i mean
[20:43:18] <FromDiscord> <Rosen> 0.3.1
[20:44:00] <FromDiscord> <Rika> i checked docs
[20:44:02] <FromDiscord> <Rika> its not there
[20:44:11] <FromDiscord> <Rika> only for float matrices does it exist
[20:44:20] <FromDiscord> <Rosen> oh!
[20:44:23] <FromDiscord> <Rosen> that makes sense
[20:44:24] <FromDiscord> <Rosen> durr
[20:44:26] <FromDiscord> <Rosen> thank you
[20:45:48] *** Quits: geek_ (~geek@aftr-82-135-87-106.dynamic.mnet-online.de) (Remote host closed the connection)
[21:09:10] *** Parts: src (~src@user/src) (Leaving)
[21:22:42] <FromDiscord> <Schelz> Can somebody give me an idea how could I separate mingw 64 compiler from mingw 32 ?
[21:26:31] <FromDiscord> <Schelz> they bugged out and its using only 32 bit
[21:28:35] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3IS1
[21:30:54] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3IS6
[21:31:00] <FromDiscord> <Rika> its a start of course
[21:31:20] <FromDiscord> <Rika> also whoops, should be \`typ\` and \`val`
[21:31:32] <FromDiscord> <Rika> or wait idk anymore tbh
[21:32:24] <FromDiscord> <TryAngle> looks  good tbhâ†µif I want to make it more I could make the parameters a type and take varargs as parameter in the template?
[21:32:36] <FromDiscord> <TryAngle> (edit) "more" => "in "one call""
[21:32:43] <FromDiscord> <TryAngle> (edit) "tbhâ†µif" => "already thanksâ†µif"
[21:34:14] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3IS7
[21:34:26] <FromDiscord> <Rika> In reply to @TryAngle "looks  good already": no idea what you mean
[21:35:23] <FromDiscord> <TryAngle> In reply to @Rika "no idea what you": instead of calling tovalue multiple times, do multiple types in one call
[21:35:48] <FromDiscord> <Rika> i mean yeah but that doesnt elaborate on how to do it in the template
[21:35:49] <FromDiscord> <Rika> lol
[21:36:24] <FromDiscord> <TryAngle> can't I just for loop the varargs and make a proc in the for loop ðŸ˜‚?
[21:41:46] <FromDiscord> <Rika> ah now i get it
[21:41:50] <FromDiscord> <Rika> okay yeah sure i guess
[21:41:54] <FromDiscord> <Rika> would be a macro then
[21:59:43] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3ISd
[22:00:16] <FromDiscord> <TryAngle> adding / removing `untyped` doesn't fix it ðŸ˜”
[22:01:36] <FromDiscord> <TryAngle> ah
[22:02:13] <FromDiscord> <TryAngle> calling the paramters zero / one is the issue XD
[22:15:29] *** Joins: flynn (~mcbloch@user/flynn)
[22:32:38] <NimEventer> New Nimble package! prettyclr - Small library for working with colors, see https://github.com/prettybauble/prettyclr
[22:41:14] *** Joins: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com)
[22:56:17] *** Joins: noeontheend (~noeonthee@c-73-110-212-91.hsd1.il.comcast.net)
[23:24:17] *** Quits: noeontheend (~noeonthee@c-73-110-212-91.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[23:31:59] *** Parts: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com) (WeeChat 3.3)
[23:53:07] *** Joins: noeontheend (~noeonthee@c-73-110-212-91.hsd1.il.comcast.net)
