[00:15:35] *** Quits: hsv-2 (~weechat@gateway/tor-sasl/hsv-2) (Ping timeout: 240 seconds)
[00:29:16] *** Joins: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy)
[00:29:51] *** Quits: Tazy (~Tazmainia@2001:1c02:170d:2600:c56a:adee:92e6:239a) (Read error: Connection reset by peer)
[00:40:37] *** Quits: stefanos82 (~stefanos8@31-108-116.netrun.cytanet.com.cy) (Quit: Leaving)
[00:42:36] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[00:50:51] *** Quits: nq (~nq@2a02:2f08:e015:a900:cafd:3575:1a3d:974) (Ping timeout: 252 seconds)
[01:09:20] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[01:09:27] *** Joins: hsv-2 (~weechat@gateway/tor-sasl/hsv-2)
[01:17:52] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:19:48] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[01:40:58] *** Quits: magla (~gelignite@d5362120.access.ecotel.net) (Quit: Stay safe!)
[01:40:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:45:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[01:58:59] *** Quits: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com) ()
[02:08:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:24:22] *** ik is now known as kleiner
[02:39:54] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[03:11:15] *** Joins: ferdna (~ferdna@user/ferdna)
[03:15:22] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:41:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:45:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[04:28:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:31:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[04:31:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:32:22] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:32:53] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[04:34:48] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[05:14:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[05:29:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:55:19] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[06:00:47] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[06:06:05] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:09:20] *** Joins: Inline__ (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[06:12:13] *** Quits: Inline (~Inline@p200300cd470a26002e72b25ea400e9f0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:29:38] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 252 seconds)
[07:41:01] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[07:42:19] *** Joins: mintograde (~mintograd@47.201.5.61)
[07:42:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[07:47:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:32:13] *** Quits: MetaNova (~zero-one@znc/supporter/metanova) (Quit: quit)
[08:37:13] *** Joins: MetaNova (~zero-one@znc/supporter/metanova)
[10:12:33] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:15:49] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:27:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[10:32:53] *** Joins: nq (~nq@2a02:2f08:e015:a900:996:d873:2110:d8d4)
[10:40:09] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:e8a3:2cbd:7ed9:8d88)
[10:40:28] <nq> what exactly does std::move do ? for a long time I thought that it essentially just copiesthe "stack part" from an object to another; what I mean: objects in general can be seen as having a stack part and a heap part (that they manage / own) - the heap part is optional, it essentially depends on whether the stack part contains any pointers; then "moving" would essentially be to copy the pointers from objA to objB and to set objA's 
[10:40:28] <nq> pointers to nullptr, thus in a sense to "move ownership" of the heap resource from objA to objB; but I think that this might be wrong..
[10:50:49] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:51:26] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Remote host closed the connection)
[10:54:42] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:58:04] *** Joins: Kerr_ (~quassel@2601:602:ce80:df10::b76e)
[10:58:27] *** Quits: Kerr_ (~quassel@2601:602:ce80:df10::b76e) (Client Quit)
[10:58:45] *** Joins: Kerr (~quassel@2601:602:ce80:df10::b76e)
[11:03:55] <osse> nq: that's essentially what it does, yes. But sometimes it's slightly more complicated, like if you have a self-referential structure. 
[11:04:25] <osse> for those cases there's the move constructor
[11:04:38] <osse> but I'd be interested in hearing someone more experienced answer your question :p
[11:15:00] *** Joins: DSpider (~DSpider@82.79.237.117)
[11:34:15] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d00f:f2c2:bf2c:7c2b)
[11:35:24] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:e8a3:2cbd:7ed9:8d88) (Ping timeout: 240 seconds)
[11:37:40] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:f1b7:e70:337:d2ba)
[11:40:32] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d00f:f2c2:bf2c:7c2b) (Ping timeout: 240 seconds)
[11:44:48] *** Joins: epony (epony@user/epony)
[11:48:24] *** Joins: osfe_ (~lemaire@nanpc540.in2p3.fr)
[11:54:22] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d156:14d4:fe1b:90bd)
[11:57:02] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:f1b7:e70:337:d2ba) (Ping timeout: 240 seconds)
[12:03:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:11:32] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d156:14d4:fe1b:90bd) (Remote host closed the connection)
[12:12:04] *** Joins: p-i- (~Ohmu@2403:6200:8978:9086:d456:def0:f1eb:7e7c)
[12:26:49] <nq> also, a small syntax question; suppose there exists a file A.hpp with "struct A { A (); ~A (); }" and a A.cpp; how do I namespace the ctor and dtor in A.cpp to implement them ?
[12:28:43] <osse> A::A() { do stuff; }   A::~A() { do stuff; }
[12:28:59] <nq> and if I got tempaltes invovled ? template <typename T> struct A
[12:29:37] <osse> then the whole implement must be in the header
[12:29:46] <nq> sad
[12:33:52] <osse> you can still write it outside the definition
[12:34:08] <osse> or #include "A.tpp" or something at the end, and write it there
[12:57:04] <nq> I might have seen something like *.tpp before
[12:58:19] <nq> another thing; I want to write a copy ctor and a move ctor; my understanding is that the copy uses A (A const & copy) and move uses A (A && move); how do I differentiate between calling the copy ctor and the move ctor when constructing an object such as A a = A (another_A); -> is this the copy ctor or the move ctor ?
[13:02:41] <osse> it's a copy ctor because another_A continues to exist after that line
[13:08:05] <nq> I don't see how that statement's syntax is aware of another_A's persistence in the scope ?
[13:09:35] <osse> another_A is the name of a instance of A right?
[13:15:46] *** Quits: Armoured (~kifir@host-79-53-199-170.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[13:17:15] <nq> yes
[13:18:02] <osse> that statement alone will not make another_A go away
[13:18:13] <osse> it can't. another_A might be used later
[13:18:34] <nq> that's the convention / implicit assumption though
[13:18:52] <nq> so, do you use std::move(another_A) to explicitate that you want another_A to "cease life" ?
[13:19:11] <osse> yes'
[13:19:27] <osse> https://godbolt.org/z/3Y3j7hq88
[13:19:36] <nq> so T&& is really the type that std::move(T) brings you to >
[13:20:46] <osse> actually, std::move() takes a T&& so I'm not really sure how that works
[13:20:59] <osse> but yes that's why you use move
[13:23:02] <nq> probably there is a precedence list of sorts for the pattern matcher, so that copy (const & - matching) has higher precedence than move (&& matching), so if std::move() intervenes, it explicitly matches only (&&), and really acts as an intermediary
[13:23:43] <nq> it "narrows the pattern matching to a single possible path"
[13:23:47] <nq> is my guess
[13:25:44] <nq> another question: using your https://godbolt.org/z/3Y3j7hq88 as reference, in the "A gimme_another_A (int n) { return A(n); }", I keep being confused in cases like this about how many copies there are being made; so, "return A(n);" first constructs in-place an A, then actually returning it involves copying it ?
[13:26:54] <nq> so A() gets constructed twice, one with a parametrized ctor and then with a copy ctor 
[13:27:46] <osse> no. in that case it gets constructed just once
[13:28:09] <osse> As you can see from the output: "Making an A with n = 1337"
[13:30:33] <nq> I can see only one call to A::A(int) indeed, but does that mean that the A(int) gets constructed directly into the caller's stack frame ?
[13:32:34] <nq> it does a "sub rsp, 40", makes the "call A::A(int)", then "add rsp, 40" back as it was, then returns; that 40 seems rather large to me, making me think that it was ~ "inlined into the caller's stack frame" because it seems to be accessing its memory
[13:36:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:46:04] *** Joins: Guest94 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr)
[13:47:36] *** Quits: Guest94 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr) (Client Quit)
[13:53:03] <nq> using something like "struct ListA { float value; }; struct ListB { int value; }; template <int type> List : std::conditional< type == 0, ListA, ListB> {};", can I access the $root member from ListA or ListB (, depending on int type's value,) in List ?
[13:56:03] <nq> sorry, I meant std::conditional_t; that prefix "_t" seems to have a different effect; I was hoping that std::conditional_t <> could be used to conditionally define a struct's internal representation; this way, I'd like to define List which can vary internally; it could be a buffer that re-allocates, or it could be linked, or it could be based on linked blocks, but I want to use it something like "List<ListType::Buffered> list_1;" and 
[13:56:03] <nq> "List<ListType::SinglyLinked> list_2;", etc.
[13:57:20] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[14:03:48] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:17:52] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9086:d6f:655c:b421:bc62)
[14:19:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:9086:d456:def0:f1eb:7e7c) (Ping timeout: 240 seconds)
[14:24:13] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[14:24:58] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:38:13] *** Joins: shailangsa (~shailangs@host165-120-169-51.range165-120.btcentralplus.com)
[14:42:33] *** Joins: nafen (~nafen@gateway/tor-sasl/nafen)
[15:44:41] *** Joins: SorryBeauty (~SorryBeau@103.25.241.104)
[15:46:33] <SorryBeauty> fastest prime number checking loop max limit should be sqrt(n) for n?
[15:47:14] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:02:40] <nq> if you would do "i * i <= n" it might be better
[16:03:19] <nq> to avoid actually having to compute a sqrt()
[16:03:19] <SorryBeauty> (y)
[16:04:02] <nq> and you could imagine the same for any n-root over N
[16:48:10] <nq> is a reference type in C++ essentially a pointer type (that does dereference automatically and use '.' syntax instead of "->" syntax), but which essentially guarantees that T& will never be "null" ?
[16:49:30] <nq> if so, how does something like a container, say std::vector<>, which seems to return references with the [] operator, prevent or handle the case when an index outside its size or capacity is requested ? it can't exactly return a "null reference"..?
[16:50:10] <osse> nq: it doesn't prevent or handle it. 
[16:50:37] <nq> does it throw or just sometimes the segfault is triggered (when data is on another page) ?
[16:50:49] <osse> yes
[16:51:58] *** Joins: darkbit (~db@136.158.8.67)
[16:58:17] <nq> in my container classes I prefer to return a "T* operator [] (size_t index)"; sometimes I use std::optional<T&>, but it's not my preferred option *pun*; but I don't see why should I avoid pointers ? ownership and concurrency (if the program is multi-threaded) need to be handled, but I much prefer doing that than buying into someone else's convention
[16:59:51] <osse> the reason operator[] returns a T& is probably because that's how [] behaves for arrays in C
[17:00:22] <osse> int numbers[5]; numbers[0] = 69; 
[17:01:19] *** Joins: Alipha (~AliphaX@user/alipha)
[17:06:17] <nq> right, *(base + sizeof() * index) = ??
[17:08:09] <nq> then, in C, the [] for arrays actually treats $numbers as an lhs $this and [0] as its rhs second parameter
[17:10:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:11:10] <osse> numbers[idx] is *(numbers + idx)
[17:12:09] <osse> I think it magically does the needful when it comes to the sizeof() thing
[17:41:33] *** Quits: nq (~nq@2a02:2f08:e015:a900:996:d873:2110:d8d4) (Quit: Leaving)
[18:04:59] *** Quits: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net) (Remote host closed the connection)
[18:07:35] *** Joins: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net)
[18:08:33] <Alipha> pointer arithmetic is indeed already in terms of elements. so `numbers + idx` adds `idx` elements to `numbers`, not `idx` bytes.
[19:03:50] *** Joins: bobb_ (~bobb_@dslb-088-066-135-095.088.066.pools.vodafone-ip.de)
[19:11:03] *** Quits: SorryBeauty (~SorryBeau@103.25.241.104) (Ping timeout: 256 seconds)
[20:14:45] *** Joins: AmR (~AmREiSa@156.207.194.71)
[20:16:26] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9086:d6f:655c:b421:bc62) (Read error: Connection reset by peer)
[20:17:00] *** Joins: p-i- (~Ohmu@2403:6200:8978:d82d:89c0:e177:c2f7:c9a9)
[20:37:13] *** Quits: AmR (~AmREiSa@156.207.194.71) (Quit: Konversation terminated!)
[20:38:24] *** Joins: magla (~gelignite@d5364d83.access.ecotel.net)
[20:52:37] *** Quits: osfe_ (~lemaire@nanpc540.in2p3.fr) (Ping timeout: 240 seconds)
[21:17:21] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[21:27:03] *** Quits: bobb_ (~bobb_@dslb-088-066-135-095.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:42:15] *** Joins: nq (~nq@2a02:2f08:e015:a900:40da:1589:cc07:ab3)
[21:51:01] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 240 seconds)
[21:56:06] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:06:41] *** Inline__ is now known as Inline
[22:06:51] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Quit: Leaving)
[22:07:43] *** Quits: sonic (~sonic@user/sonic) (Read error: Connection reset by peer)
[22:19:59] *** Joins: gehn (~gehn@user/gehn)
[22:38:48] *** Joins: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[22:45:49] *** Joins: darkbit (~db@152.32.100.99)
[23:23:17] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 240 seconds)
[23:38:07] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[23:44:40] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:52:34] *** Joins: osfe_ (~lemaire@2a01:e0a:16e:7620::8a96:7343)
