[00:13:08] *** Joins: badone (~badone@209.132.189.152)
[01:54:05] <CarloWood> { f(1, 2, 3, 4); } template<typename... Args> void f(int arg1, Args... args) { cout << arg1 (<< ", " << args << ...); }
[01:54:05] <geordi> error: expected primary-expression before '<<' token
[01:55:21] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1 << (", " << args << ...); }
[01:55:21] <geordi> error: binary expression in operand of fold-expression
[01:55:36] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1 << (args << ...); }
[01:55:37] <geordi> 1131072
[01:57:56] <CarloWood> << (2 << 3 << 4)
[01:57:56] <geordi> 256
[01:58:10] <CarloWood> << (1 << 2 << 3 << 4)
[01:58:11] <geordi> 512
[02:00:02] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << args...); }
[02:00:02] <geordi> error: expected ')' before '...' token (fix known)
[02:00:09] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << args ...); }
[02:00:09] <geordi> Same error.
[02:00:15] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << args, ...); }
[02:00:15] <geordi> error: binary expression in operand of fold-expression
[02:00:23] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; ((cout << args), ...); }
[02:00:27] <geordi> error: no match for 'operator<<' in 'operator<< <char_traits<char> >((* & o), ((const char*)", ")) << t' (operand types are 'ostream' and 'const ostream')
[02:01:30] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; cout << ", " << args...; }
[02:01:30] <geordi> error: expected ';' before '...' token (fix known)
[02:01:47] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; cout << ", " << args; }
[02:01:47] <geordi> error: parameter packs not expanded with '...':
[02:02:02] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << ", " << args)...; }
[02:02:02] <geordi> error: expected ';' before '...' token (fix known)
[02:02:14] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << ", " << args); }
[02:02:15] <geordi> error: parameter packs not expanded with '...':
[02:02:19] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << ", " << arg1); }
[02:02:20] <geordi> 1, 1
[02:02:30] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << ", " << args ...); }
[02:02:31] <geordi> error: expected ')' before '...' token (fix known)
[02:02:36] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << ", " << args << ...); }
[02:02:36] <geordi> error: binary expression in operand of fold-expression
[02:02:40] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << ", " << args, ...); }
[02:02:40] <geordi> Same error.
[02:02:54] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; (cout << args, ...); }
[02:02:54] <geordi> Still same error.
[02:03:07] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; ((cout << args), ...); }
[02:03:07] <geordi> error: no match for 'operator<<' in 'operator<< <char_traits<char> >((* & o), ((const char*)", ")) << t' (operand types are 'ostream' and 'const ostream')
[02:03:23] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; ((cout << args ...); }
[02:03:23] <geordi> error: Unexpected `}` after ` ...); `. Expected ')' or balanced code.
[02:03:27] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; ((cout << args) ...); }
[02:03:27] <geordi> error: expected ')' before '...' token (fix known)
[02:03:32] <CarloWood> { f(1, 2, 3, 4); } template<typename Arg1, typename... Args> void f(Arg1 arg1, Args... args) { cout << arg1; ((cout << args...)); }
[02:03:32] <geordi> Same error.
[05:06:20] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[05:15:56] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[05:30:34] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:51:48] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:22:10] <CarloWood> { constexpr string s("foo"); }
[23:22:10] <geordi> error: 'string{string::_Alloc_hider{((char*)(& s.string::<anonymous>.string::<unnamed union>::_M_local_buf))}, 3, string::<unnamed union>{char [16]{'f', 'o', 'o', 0}}}' is not a constant expression
[23:22:20] <CarloWood> { constexpr string s{"foo"}; }
[23:22:20] <geordi> Same error.
[23:22:54] <CarloWood> { constexpr char const* str = "foo"; constexpr string s{str}; }
[23:22:54] <geordi> Still same error.
[23:23:08] <CarloWood> { constexpr char const[] = "foo"; constexpr string s{str}; }
[23:23:08] <geordi> error: structured binding declaration cannot be 'constexpr'
[23:23:34] <CarloWood> { constexpr char const[4] = { 'f', 'o', 'o', 0 }; constexpr string s{str}; }
[23:23:34] <geordi> error: expected identifier before numeric constant
[23:23:49] <CarloWood> { constexpr char const[4] = { 'f', 'o', 'o', '\0' }; constexpr string s{str}; }
[23:23:49] <geordi> Same error.
[23:23:59] <CarloWood> { constexpr char const str[4] = { 'f', 'o', 'o', '\0' }; constexpr string s{str}; }
[23:23:59] <geordi> error: 'string{string::_Alloc_hider{((char*)(& s.string::<anonymous>.string::<unnamed union>::_M_local_buf))}, 3, string::<unnamed union>{char [16]{'f', 'o', 'o', 0}}}' is not a constant expression
[23:25:18] <CarloWood> { constexpr char const str[4] = { 'f', 'o', 'o', '\0' }; }
[23:25:19] <geordi>  
[23:25:31] <CarloWood> { constexpr char const str[4] = "foo"; }
[23:25:31] <geordi>  
[23:25:40] <CarloWood> { constexpr char const* = "foo"; }
[23:25:40] <geordi> error: expected unqualified-id before '=' token
[23:25:45] <CarloWood> { constexpr char const* str = "foo"; }
[23:25:45] <geordi>  
[23:25:59] <CarloWood> { constexpr char const* str = "foo"; constexpr string s(str); }
[23:26:00] <geordi> error: 'string{string::_Alloc_hider{((char*)(& s.string::<anonymous>.string::<unnamed union>::_M_local_buf))}, 3, string::<unnamed union>{char [16]{'f', 'o', 'o', 0}}}' is not a constant expression
