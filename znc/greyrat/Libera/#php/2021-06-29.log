[00:00:12] <da_wunder> imho, that pattern doesn't work with php and imho using those are making your code to harder to understand
[00:00:45] <da_wunder> olle: ngrx - https://ngrx.io/
[00:00:55] <olle> Pipe in OCaml is very long-hanging fruit:
[00:00:56] <olle> `let (|>) v f = f v`
[00:00:58] <olle> That's it
[00:01:04] <olle> Slightly harder to shoehorn it into PHP ^^
[00:01:39] <olle> da_wunder: Angular?
[00:01:59] <da_wunder> eg. https://ngrx.io/guide/effects#handling-errors isn't so easy to read for most of people
[00:02:30] <da_wunder> and that is really simple example
[00:03:04] <olle> https://www.freecodecamp.org/news/pipe-and-compose-in-javascript-5b04004ac937/
[00:03:11] <olle> Better use-case here
[00:03:47] <olle> It gets a bit abstract, yes.
[00:04:47] <olle> Related topic: Was there ever a discussion about getting rid of "Use of undefined constant" in cases like `array_map(strlen, $strings)`?
[00:04:47] <da_wunder> I'm just fine with those pipes - but really I have seen multiple other developers to see those not so clear - that is my point
[00:05:27] <olle> da_wunder: It's good for getting rid of multiple layers of indentation, I think. But yes, you have to learn to read it.
[00:05:31] <__adrian> olle: making function names first-class would not be a trivial change
[00:05:40] <__adrian> could potentially break tons of code.
[00:05:57] <olle> __adrian: middle-ground: make the warning shut up?
[00:06:05] <__adrian> def not
[00:06:10] <__adrian> imo the warning should be fatal
[00:06:18] <olle> I thought about (callable) type-case: `array_map((callable) strlen, $strings)`
[00:06:35] <olle> or maybe even `(fn)` as a cast... :d
[00:07:12] <__adrian> (callable) strlen  seems like a lot more work (and less clear) than just  "strlen"
[00:07:34] <olle> I disagree. "strlen" looks like a typo from the point of view of "communicate intent".
[00:08:46] <da_wunder> imho not - use cases like that are special ones and if you're not using ' or " to escape that then it's _constant_ and functions !== constants
[00:09:22] <olle> da_wunder: Honestly, I think it could be considered an idiosyncrancy of PHP here.
[00:09:36] <__adrian> why do you think that?
[00:10:13] <__adrian> functions are not "things" (types). they're named chunks of code. and the names are strings.
[00:10:16] <olle> Because lots of languages allow passing functions like that... Or wait. Do they? At least JS, OCaml, Haskell.
[00:10:41] <__adrian> strlen()  ‚Üê the "strlen" part here is literally a string, exactly like "strlen". just php knows how to parse it in that context.
[00:10:42] *** Quits: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[00:11:07] *** Joins: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[00:11:23] <__adrian> lots of languages are different, yes
[00:11:52] <__adrian> but like i said, you can't "pass functions." functions aren't first class. you pass function _names_.
[00:11:54] <olle> ;)
[00:12:19] <olle> Just trying to figure out what's easiest: Adding partial applications, or fixing that warning.
[00:12:24] <__adrian> suddenly making functions first class would be problematic, as they would suddenly conflict with any number of constants that people have defined
[00:12:45] <__adrian> the warning is not "broken" so fixing it is def. not the easier path.
[00:12:47] <olle> Sure. That's why I was thinking of the type case.
[00:13:25] <__adrian> (fn)strlen  ...might be workable
[00:13:30] <olle> define('strlen', fn($x) => strlen($x))...?
[00:13:33] <__adrian> but still not convinced of the benefit
[00:14:14] <__adrian> actually,  Fn::strlen
[00:14:24] <da_wunder> imho - that would just confuse devs more
[00:14:40] <__adrian> Fn:: as a pseudo-static-class that contains all global function names
[00:14:54] <AllenJB> Pretty sure internals has considered all of this at some point of other recently - read through the partial function application, pipes and first class callables threads
[00:14:55] <olle> Fn could be a class implementing __call() to cast it?
[00:15:06] <AllenJB> (all of them!)
[00:15:12] <__adrian> i don't like userland magic
[00:15:20] <__adrian> but could be done that way
[00:15:20] <da_wunder> ^
[00:15:42] <olle> AllenJB: Yeah, guess I should search through externals.
[00:16:20] <__adrian> it would just be  class Fn { public static strlen = "strlen"; . . . }
[00:16:22] <da_wunder> and really does that `define('strlen', fn($x) => strlen($x))` provide you the autocomplete on your IDE?
[00:16:42] <olle> da_wunder: That's not even legal - constants can't be callables D:
[00:16:47] <__adrian> er const
[00:17:35] <__adrian> constants can be callable, who said they couldn't?
[00:17:52] <olle> "Constants may only evaluate to scalar values, arrays or resources"
[00:17:55] <olle> php 7.4
[00:18:19] <__adrian> two of those types can be callable
[00:18:52] <__adrian> https://3v4l.org/l5qt1
[00:19:06] <__adrian> (can't use "Fn" though.)
[00:19:32] <olle> o.o
[00:20:01] <__adrian> like i said, functions aren't "real things." you call functions by their names. and those names are strings.
[00:20:27] <olle> Ah, __get() doesn't intercept class constants
[00:20:44] <__adrian> right, it wouldn't
[00:20:45] <da_wunder> and I must ask - why do you want to use constant there?
[00:20:53] <__adrian> he doesn't like the "quotes"
[00:21:13] <__adrian> so it's not specifically that he wants a const, he wants first-class function( name)s
[00:21:17] <da_wunder> not his/hers words - yours one - so olle explain that
[00:21:26] <olle> Well, the current suggestion on the table is array_map(strlen(?), $strings)
[00:21:36] <__adrian> ?
[00:21:41] <__adrian> the () invoke it
[00:21:45] <__adrian> not what you'd want
[00:21:54] <olle> No, the '?' is the partial application RFC
[00:21:58] <__adrian> oh
[00:22:02] <__adrian> meh
[00:22:08] <olle> It wraps it in a lambda
[00:22:25] <__adrian> essentially  Closure::fromCallable("strlen");  ?
[00:22:47] <olle> I prefer strlen as is, if possible. But, someone explained to me it might be hard, because of the collision and ambiguity, as you also point out here.
[00:23:19] <olle> __adrian: Well, you can also put '?' as second or third argument. Or any argument.
[00:23:24] <olle> In the RFC
[00:23:25] *** Quits: magla (~gelignite@55d471c8.access.ecotel.net) (Quit: Stay safe!)
[00:23:54] <olle> They even added ...? for variadics
[00:24:04] <__adrian> is partial application actually what you're looking for? i did not get that impression
[00:24:27] <olle> But I agree, I don't like userland magic either. pipe() however could be idiomatic, if that warning could be dealt with.
[00:24:41] <olle> __adrian: No, the end-goal is the pipe operator + partial application.
[00:24:45] <olle> For Larry, I mean.
[00:24:47] <__adrian> did you ever see the original pipe rfc?
[00:24:56] <olle> By Sara? Yes, it's linked.
[00:24:59] <olle> They use $$
[00:25:04] <__adrian> yep
[00:25:47] <da_wunder> just a friendly remimder - why the hell do you want to make things so hard and complicated? use simple solutions that other devs can easily to understand...
[00:26:15] <olle> da_wunder: I don't care _that_ much - I don't think I ever used pipe when coding in OCaml. I try to avoid partial application too.
[00:26:30] <olle> But sometimes it's handy, when nesting function calls.
[00:26:59] <olle> foo(bar(baz($something)));
[00:27:10] <olle> --> $something |> baz |> bar |> foo
[00:27:16] <olle> or pipe($something, baz, bar, foo)
[00:27:30] <olle> You read it in order of execution.
[00:27:42] <da_wunder> and still using pipe is just ok with me - no problem there - but when you start to define those functions to constants - for no really reason - imho - I see that you're hitting the wall
[00:27:50] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[00:29:12] <olle> Well, strings are strings, functions are functions :)
[00:31:22] <__adrian> "functions are functions"  // not really.
[00:31:41] <olle> I know, I know. Internal representation in the JIT etc etc etc
[00:31:49] <olle> Or opcode
[00:32:00] <olle> Especially blurred in scripting languages
[00:32:08] <__adrian> this is an internal implementation that really does have fundamental effects on the language  ;)
[00:32:12] <olle> new $$hello_reflection :)
[00:32:40] <da_wunder> still don't see that point there - your IDE should show you that... https://pasteboard.co/K8KgasQ.png
[00:33:29] <olle> I'm using Vim. And that's just weird. xD
[00:33:51] <olle> Or wait, array_map expects callable. Yes, then it makes some sort of perverted sense :|
[00:35:32] <olle> It's a "callable" string :D
[00:36:39] <da_wunder> and that same goes for class methods - https://pasteboard.co/
[00:38:06] <olle> Wrong link?
[00:38:30] <da_wunder> damn
[00:39:40] <da_wunder> sorry about that, correct link here - https://pasteboard.co/K8KiU3y.png
[00:41:53] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[00:43:37] <__adrian> aside: i completely discount any argument that invovles "but IDE"  :p
[00:44:11] <__adrian> not that I don't see how it can be valuable, or even that it's not valuable to me, but it's simply not a consideration when talking about the language itself
[00:44:19] <__adrian> *valid consideration
[00:45:59] <da_wunder> for me, trying to define those as constants - or anything else - is just something that your IDE or text editor should make for your without that custom code...
[00:46:57] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:47:14] <__adrian> i'm fine with partial application and piping arguments
[00:47:24] <__adrian> but the whole function/function name thing is not that
[00:48:18] <__adrian> and I can _see why_ someone might want the function name thing, but it's not practical or particularly necessary. and can be approximated in userland code if you _really_ want it.
[00:49:41] <olle> OK, so functions are not case sensitive
[00:49:47] <olle> If they were, it'd be another discussion
[00:49:57] <__adrian> there are indeed not
[00:50:03] <__adrian> though you should generally pretend they are
[00:50:19] <olle> HtMlEnTiTies?
[00:50:26] <__adrian> right, don't do that
[00:50:32] <olle> ^^
[00:50:43] <__adrian> same for classnames
[00:51:15] <Sammitch> #justautoloaderthings
[00:51:30] <__adrian> even aside from autoloaders  :)
[00:51:47] <Sammitch> though I surprised that function/method names aren't case-sensitive
[00:52:16] <da_wunder> and really if some dev writes 'HtMlEnTiTies' to callback - your review process should catch that
[00:52:31] <__adrian> public function foo() {} public function Foo() {} public function fOo() {} ...
[00:52:35] <olle> https://wiki.php.net/rfc/case-sensitivity
[00:52:36] <olle> 2014
[00:52:37] <olle> :(
[00:53:00] <olle> Wait
[00:53:02] <olle> https://wiki.php.net/rfc/case_insensitive_constant_deprecation
[00:53:09] <olle> Merged into 7.3
[00:53:43] <__adrian> function/method/class names ‚â† constants
[00:54:27] <__adrian> also if you want an enjoyable relaxing afternoon, go read about how defining constants used to work
[00:54:48] <olle> haha
[00:55:01] <olle> __adrian: Yes, but I'm considering the risk of collision between function name and constant.
[00:55:07] <olle> Constants are always UPPER_CASE
[00:55:11] <__adrian> no
[00:55:15] <olle> no?
[00:55:20] <__adrian> of course not
[00:55:24] <Sammitch> that's just convention
[00:55:26] <olle> By convention, they are.
[00:55:26] <__adrian> const foo = "foo!";  // works fine
[00:55:46] <olle> Who does that?
[00:55:54] <__adrian> it's not even enough to be "a convention," imo. just common practice/style
[00:56:01] <Sammitch> anyone that feels like it
[00:56:23] <da_wunder> hmm, "I'm considering the risk of collision between function name and constant" - why? if there is collision there is a clear error about that - right?
[00:56:29] <__adrian> "considering the risk of collision between function name and constant"  there's zero risk.
[00:56:30] <Sammitch> is there a difference between "convention" and "something most people usually do"?
[00:56:48] <__adrian> unless you mean you want to just throw constants out there and pretend they're function names.
[00:57:02] <__adrian> THEN there's quite a bit of risk
[00:57:20] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[00:57:38] <__adrian> Sammitch: i just mean that it's not as "universal" or "inexcusable" a practice that i'd call it a convention
[00:57:47] <__adrian> it's fine if you call it a convention
[00:58:05] <__adrian> it's just less important/widespread than that (in my mind) implies
[00:58:53] <Sammitch> let's absolutely descend into a protracted argument about the definition of this word
[00:59:12] <Sammitch> while my brain melts
[00:59:30] <__adrian> was actually trying to avoid that but explicitly not redefining the word
[00:59:40] <__adrian> rather, just explaining what i meant
[01:00:30] <ash_worksi> they removed the preview option on 3v4l.org :(
[01:00:51] <Sammitch> ash_worksi: you can just pick a version from the dropdown and it
[01:00:54] <Sammitch> 's the same-ish
[01:01:22] <olle> __adrian: Well, there are alternatives...
[01:01:43] <olle> E.g., silence the warning if argument expects a callable
[01:01:47] <olle> Like in array_map
[01:01:57] <ash_worksi> Sammitch: right, but now you can't proof stupid mistakes that'll result in an error you're not trying to show as an example without saving it to a url
[01:02:01] <__adrian> you don't see why that would be bad?
[01:02:33] <Sammitch> liberal use of the @operator, WCGW
[01:02:49] <__adrian> what if I wrote  array_map(strlen, ["a", "ab", "abc"]);
[01:03:12] <__adrian> but i had intended to earlier have defined   const strlen = "strtoupper";   ???
[01:03:19] <Sammitch> ash_worksi: now everyone will see our shame
[01:03:40] <__adrian> the error would have called that out  :)
[01:03:41] <ash_worksi> Sammitch: most indeedly
[01:04:43] <olle> __adrian: yes, it's only safe when constants always are upper case :d
[01:05:07] <olle> __adrian: Although doing strlen = strtoupper is already a bug in itself xD
[01:05:30] <olle> I can imagine a setting + a CI check for constants and functions
[01:05:38] <ash_worksi> I am fairly sure this conversation has confused my completely
[01:05:55] <ash_worksi> me*
[01:08:38] *** Quits: Akimb (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[01:11:48] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Read error: Connection reset by peer)
[01:12:09] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[01:12:48] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Remote host closed the connection)
[01:13:24] <olle> That's what matters in the end
[01:13:39] <olle> The true friends were the confusion we got along the way
[01:14:45] <olle> Sammitch: Oh yeah, you can just do @pipe() and you're done \o/
[01:15:02] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[01:18:47] <olle> Totally forgot about that
[01:18:57] <olle> Does it silence exceptions too? Gonna try
[01:19:48] <olle> Shit, it does :(
[01:19:51] <olle> Goddamnit
[01:20:00] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Ping timeout: 272 seconds)
[01:20:08] <olle> wait no
[01:20:13] <olle> Sorry, my mistake
[01:20:44] <olle> But of course I'd like to silence only that particular warning :d
[01:29:13] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:45:26] *** Quits: kilitary (~kilitary@kilitary.ru) (Remote host closed the connection)
[01:46:17] <olle> Actually, the last example here is pretty cool: https://medium.com/@liamhammett/php-function-chaining-with-pipes-a5c637587d7d
[01:46:28] <olle> pipe()->any_callable()->etc();
[01:53:02] *** Quits: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[01:53:27] *** Joins: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[01:56:34] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[02:00:22] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[02:00:42] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Ping timeout: 252 seconds)
[02:00:42] <sumthing1980> hello I seem to have trouble accessing the $_POST variable
[02:00:58] <sumthing1980> for some reason.. I just have a normal form
[02:01:17] <deltab> what kind of trouble?
[02:02:25] <sumthing1980> it reads _GET but not _POST
[02:02:37] <sumthing1980> I did print_r (GLOBALS) (POST) etc etc
[02:02:48] <sumthing1980> only get variables are transmitted
[02:03:32] <sumthing1980> hm it is something with method
[02:03:51] <sumthing1980> prinr(SERVER) shows request method = GET
[02:04:02] <sumthing1980> but my form clearly says <form method=post action='?action=register2'>
[02:05:34] <sumthing1980> hmm it works now
[02:06:09] <sumthing1980> weird
[02:07:54] <sumthing1980> and now it is gone again, it did read post for a moment
[02:14:09] <deltab> is it using just HTML, or do you have JS too?
[02:14:33] <sumthing1980> just html
[02:14:49] <sumthing1980> can you do GET and post at the same time? Ive done it a lot in the past
[02:15:07] <sumthing1980> like <form method=post action='?abc=def'>
[02:15:24] <__adrian> yes but that's non ideal
[02:15:45] <sumthing1980> why
[02:15:51] <sumthing1980> nevermind
[02:15:56] <__adrian> :)
[02:15:58] <sumthing1980> :)
[02:16:08] *** Quits: Heraes (~Heraes@user/romarain) (Read error: Connection reset by peer)
[02:17:07] <__adrian> (1) use real endpoints, e.g., "/abc/def"  (2) add "abc" as an input (in the form body)
[02:17:47] <sumthing1980> yea I get it
[02:17:54] <deltab> $_GET is where PHP puts arguments from the URL, regardless of method
[02:18:05] <Blondie101010> in any case, the method is what defines if the form fields go in $_POST or $_GET
[02:18:24] <Blondie101010> and that is not controlled by php
[02:18:29] <sumthing1980> if Im doing post form then all relevant info should also be post right
[02:18:42] <Blondie101010> no, only the form fields
[02:19:07] <sumthing1980>  somehow my post form only showed up as get
[02:19:24] <Blondie101010> then fix your HTML
[02:19:34] <sumthing1980> I did something to fix it a few minutes ago then I changed it again
[02:19:47] <Blondie101010> did the HTML form method change?
[02:20:50] *** Quits: genom (~g@37.214.83.249) (Remote host closed the connection)
[02:22:21] <sumthing1980> when I do get, the input text fields are sent
[02:22:39] <sumthing1980> but action='?a=b' that var is not sent
[02:23:10] <sumthing1980> weird
[02:25:04] <sumthing1980> ok nevermind thanks
[02:29:53] <__adrian> sumthing1980: if you use method=get then the parameters in your query string might be overwritten
[02:30:01] <__adrian> by the values in the form proper
[02:30:45] <biberu> sumthing1980: re that change that fixed it: version control, commit often, especially when experimenting
[02:31:38] <sumthing1980> I never did learn version control
[02:32:28] <sumthing1980> I copied and pasted the form html and changed all the variables it works now
[02:32:46] <sumthing1980> my form has action='?action=...'
[02:32:52] <sumthing1980> I think it may be it
[02:32:57] <sumthing1980> action 2 times
[02:33:46] <sumthing1980> nvm
[02:33:52] <BadAdviceCat> Hello.
[02:34:02] <sumthing1980> hello
[02:34:41] <BadAdviceCat> sumthing1980, I highly recommend you to learn it, don't end up like me o_O
[02:36:08] <sumthing1980> :)
[02:36:19] <sumthing1980> I somehow overwrite the variables
[02:36:43] *** Joins: Azrael_- (~aweoi@51.154.62.124)
[02:36:45] <Azrael_-> hi
[02:37:03] <sumthing1980> they collide with my authentication function somehow I changed the form vars
[02:37:07] <sumthing1980> hi
[02:37:18] <Blondie101010> sumthing1980:  just avoid using the same variable / parameter name for different things
[02:40:55] <BadAdviceCat> sumthing1980, I've used https://git-scm.com/book/en/v2 to learn how to use git's version control. (The PDF is good)
[02:41:19] <BadAdviceCat> Hello there, Azrael_-
[02:41:31] <sumthing1980> ok thanks
[02:41:53] <Azrael_-> is there a way to send whatsapp messages using php for free?
[02:42:41] <Blondie101010> PHP doesn't decide what Watsapp allows for free
[02:43:07] <Azrael_-> i know, until now i only found paid options and looking for other possibilities
[02:43:47] <Blondie101010> if you had to pay for them, then they likely make sure you can't bypass them...  therefore, if you find a way, it's probably against their T&C
[02:44:00] *** Joins: jwpapi (sid502614@id-502614.highgate.irccloud.com)
[02:44:47] <Azrael_-> yes, but e.g. for sms i know an option to run a client program on a mobile phone to avoid paid sms gateways
[02:46:27] <sumthing1980> if my vars are sent in POST, like POST(usr) does setcookie(usr) overwrite that??
[02:47:22] <Blondie101010> sumthing1980:  no, but again don't
[02:47:57] <sumthing1980> I have some buffer caching so setcookie does work but I wrote vardump(usr) first in index.php
[02:48:21] <Blondie101010> `usr` is not a variable name in PHP
[02:48:23] <sumthing1980> but when I have my authentication function that reads usr and pass variables, disabled, things work
[02:48:58] <sumthing1980> $_POST['usr']
[02:49:08] <sumthing1980> from my form
[02:49:12] <Blondie101010> is it set to what you expect?
[02:49:29] <Blondie101010> it should be if the form was POSTed
[02:50:05] <sumthing1980> I have vardump for post at the beginning, then authentication function, which may or may not alter or delete my post vars somehow,
[02:50:26] <sumthing1980> when I disable the authentication function things work and vardump shows correct html form data
[02:50:54] <sumthing1980> but when I enable it, vardump for post shows empty
[02:51:03] <sumthing1980> but they are before the authentication func
[02:51:11] <sumthing1980> some weird shit
[02:51:24] <sumthing1980> it has buffering but still it should show the vardump post before it is altered
[02:51:26] <Blondie101010> so you need to read the code that changes it and fix it
[02:51:50] <sumthing1980> var dump works retroactively? perhaps
[02:52:00] <Blondie101010> note that it may be intentional for security concerns
[02:52:11] <sumthing1980> it shows content of post when the buffer outputs everything
[02:52:17] <Blondie101010> you should ask the person who wrote the auth funciton
[02:52:22] <sumthing1980> not when it is actually run
[02:52:28] <sumthing1980> it is me :)
[02:52:43] <sumthing1980> anyway it works if I change the html var names
[02:54:12] <Blondie101010> so you use conflicting names, as I pointed out > 30 minutes ago
[02:54:14] <Blondie101010> stop doing that
[02:54:35] <Blondie101010> it's confusing you MUCH more than it can confuse the PHP engine which does linear processing
[02:55:10] <sumthing1980> you mean cookie/get/post using the same variable names?
[02:55:30] <Blondie101010> yes, those don't create real problems if you know how the engine will interpret them
[02:55:53] <Blondie101010> but it's definitely something to avoid which causes confusion for nothing
[02:58:10] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[03:00:15] <sumthing1980> What is the industry standard method of user authentication?
[03:02:40] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Ping timeout: 265 seconds)
[03:05:04] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[03:14:16] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Ping timeout: 265 seconds)
[03:22:33] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[03:28:08] *** Quits: judah (~judah@rrcs-74-87-190-146.west.biz.rr.com) (Quit: Leaving)
[03:29:28] <BadAdviceCat> I was going to post a blog, and also google SSO/libs. >.<
[03:36:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:44:12] <Blondie101010> not sure I find that advisable
[03:44:58] <Blondie101010> what happens if your friend asks you for advice to protect their house and then they get robbed?
[03:45:34] <Blondie101010> you're not the nice person who helped them! :P
[03:49:01] *** Quits: P1RATEZ (piratez@user/p1ratez) ()
[03:52:00] *** Quits: tex (~super@user/dix) (Ping timeout: 272 seconds)
[04:06:15] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (Remote host closed the connection)
[04:08:27] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[04:19:18] *** Quits: biberu (~biberu@user/biberu) (Quit: ZNC - https://znc.in)
[04:21:39] *** Joins: biberu (~biberu@user/biberu)
[04:25:10] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[04:26:21] *** Joins: harpia (~harpia@168.205.148.58)
[04:27:16] *** Quits: FBeans (~beans@ks305871.kimsufi.com) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: bebna (~bebna@box2.bebna.de) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: corelax (~corelax@user/corelax) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: NChief (~nchief@user/nchief) (Ping timeout: 244 seconds)
[04:27:35] *** Joins: corelax (~corelax@user/corelax)
[04:27:47] *** Quits: s1b1 (~s1b1@user/s1b1) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: dag (~d@user/dag) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: siinus` (hmmm@saabas.kahtlane.info) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: ControlMaster (~MasterCon@srv.pic-hoster.net) (Ping timeout: 244 seconds)
[04:28:19] *** Joins: siinus` (hmmm@saabas.kahtlane.info)
[04:28:31] *** Joins: dag (~d@user/dag)
[04:28:39] *** Joins: bebna (~bebna@bebna.de)
[04:36:26] *** Quits: olle (~olle@i5E8666D8.versanet.de) (Ping timeout: 265 seconds)
[04:41:15] <BadAdviceCat> xD
[04:42:19] *** Joins: s1b1 (~s1b1@user/s1b1)
[04:46:14] <BadAdviceCat> There is so much more to authentication, even beyond https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence
[04:46:41] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (Remote host closed the connection)
[04:48:39] <BadAdviceCat> Or using google/facebook login. Then the WebAuthn :D
[04:49:00] <BadAdviceCat> But yeah, I do get your point.
[04:49:34] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[04:50:57] *** pizzaiolo is now known as pizza
[05:03:16] *** Quits: harpia (~harpia@168.205.148.58) (Quit: Leaving)
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:41] *** Joins: vlm (~vlm@user/vlm)
[05:37:55] *** Quits: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[05:38:21] *** Joins: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[05:39:51] *** Quits: lucf117 (~lucf117@user/lucf117) (Read error: Connection reset by peer)
[05:42:35] *** Quits: genomc (uid245282@id-245282.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[06:32:52] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[06:54:10] *** Joins: ferdna (~ferdna@user/ferdna)
[07:03:12] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 252 seconds)
[07:05:22] *** Quits: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[07:05:41] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[07:05:47] *** Joins: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[07:14:34] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[07:17:32] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:19:16] *** Quits: alystair (~alystair@user/alystair) (Remote host closed the connection)
[07:30:55] *** Joins: Rockwood (~Rocky@user/rocky)
[07:31:19] *** Joins: Rockwood_ (~Rocky@user/rocky)
[07:35:06] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 252 seconds)
[07:40:47] *** Quits: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[07:41:12] *** Joins: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[08:15:12] *** Quits: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[08:15:37] *** Joins: zerobeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[08:19:25] *** Joins: guy_frm_yogaland (~gourab@2409:4062:4e1b:c6f7:c36:4446:8ec:592e)
[08:46:19] *** Quits: Rockwood_ (~Rocky@user/rocky) (Quit: The Time is Over)
[09:01:52] *** Quits: guy_frm_yogaland (~gourab@2409:4062:4e1b:c6f7:c36:4446:8ec:592e) (Ping timeout: 250 seconds)
[09:02:47] *** Joins: guy_frm_yogaland (~gourab@117.228.54.62)
[09:14:26] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[09:17:15] *** Joins: genomc (uid245282@id-245282.stonehaven.irccloud.com)
[09:34:25] *** zerobeholder is now known as ZeroBeholder
[09:36:38] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[09:39:53] *** Quits: ZeroBeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[09:44:57] *** Joins: ZeroBeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[09:55:07] *** Joins: stenno (~stenno@user/stenno)
[10:00:37] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 272 seconds)
[10:01:35] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[10:09:57] *** Quits: ZeroBeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[10:10:22] *** Joins: ZeroBeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[10:15:17] *** Quits: guy_frm_yogaland (~gourab@117.228.54.62) (Read error: Connection reset by peer)
[10:23:22] *** Joins: tex (~super@user/dix)
[10:30:53] *** Quits: supernovah (~supernova@mail.ijk.nz) (Ping timeout: 258 seconds)
[10:36:57] *** Joins: supernovah (~supernova@mail.ijk.nz)
[10:39:10] *** Quits: supernovah (~supernova@mail.ijk.nz) (Client Quit)
[10:46:25] *** Joins: supernovah (~supernova@mail.ijk.nz)
[10:49:14] *** Joins: stenno (~stenno@user/stenno)
[10:52:32] *** Quits: ZeroBeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com) (Remote host closed the connection)
[10:52:57] *** Joins: ZeroBeholder (~zerobehol@cpe-104-231-105-59.neo.res.rr.com)
[10:54:20] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[10:56:32] *** ZeroBeholder is now known as zerobeholder
[11:00:40] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[11:05:12] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Ping timeout: 252 seconds)
[11:08:43] *** Joins: semeion (~semeion@user/semeion)
[11:08:45] *** Joins: guy_frm_yogaland (~gourab@117.228.45.142)
[11:14:09] *** Joins: MCMiic (~mcmic@63.120.199.77.rev.sfr.net)
[11:16:23] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[11:18:53] *** Quits: biberu (~biberu@user/biberu) (Quit: ZNC - https://znc.in)
[11:20:43] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Ping timeout: 258 seconds)
[11:24:31] *** Joins: biberu (~biberu@user/biberu)
[11:43:21] *** Joins: stenno (~stenno@user/stenno)
[11:48:32] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Quit: Konversation terminated!)
[11:49:50] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[11:50:08] *** Joins: magla (~gelignite@55d43d25.access.ecotel.net)
[11:57:33] *** Joins: mnemonic (~semeion@user/semeion)
[11:58:29] *** Joins: Ducki_ (~ducki@user/ducki)
[12:00:00] *** Quits: Ducki (~ducki@user/ducki) (Ping timeout: 268 seconds)
[12:00:12] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[12:02:20] *** Joins: stenno (~stenno@user/stenno)
[12:11:21] *** Joins: Heraes (~Heraes@user/romarain)
[12:19:42] *** Joins: DevAntoine (~DevAntoin@195.101.183.21)
[12:24:40] *** Quits: DevAntoine (~DevAntoin@195.101.183.21) (Ping timeout: 268 seconds)
[12:26:31] *** Joins: DevAntoine (~DevAntoin@195.101.183.21)
[12:27:50] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.2)
[12:39:15] *** Quits: Rubin (~rubin@2001:470:69fc:105::17e) (Quit: Bridge terminating on SIGTERM)
[12:39:18] *** Quits: ramsey (~ramsey@user/ramsey) (Quit: Bridge terminating on SIGTERM)
[12:52:01] *** Joins: MrTrick (uid181961@id-181961.highgate.irccloud.com)
[12:56:10] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:57:21] *** Quits: DevAntoine (~DevAntoin@195.101.183.21) (Remote host closed the connection)
[12:57:50] *** Joins: DevAntoine (~DevAntoin@195.101.183.21)
[12:58:46] *** Joins: olle (~olle@i5e866661.versanet.de)
[12:59:12] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[13:02:31] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[13:10:35] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[13:12:09] *** Joins: Greyhound (~Greyhound@c-6e96205c.020-54-73766c1.bbcust.telenor.se)
[13:18:55] *** Quits: guy_frm_yogaland (~gourab@117.228.45.142) (Ping timeout: 265 seconds)
[13:19:33] *** Joins: guy_frm_yogaland (~gourab@2409:4062:238c:82bd:2153:c3cc:c84d:ccc0)
[13:24:55] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 244 seconds)
[13:31:33] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[13:34:33] *** Quits: guy_frm_yogaland (~gourab@2409:4062:238c:82bd:2153:c3cc:c84d:ccc0) (Read error: Connection reset by peer)
[13:43:42] *** Quits: magla (~gelignite@55d43d25.access.ecotel.net) (Quit: Stay safe!)
[13:48:30] *** Joins: DevAntoi_ (~DevAntoin@195.101.183.21)
[13:52:01] *** Quits: DevAntoine (~DevAntoin@195.101.183.21) (Ping timeout: 246 seconds)
[13:52:58] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 256 seconds)
[13:56:19] *** Quits: DevAntoi_ (~DevAntoin@195.101.183.21) (Remote host closed the connection)
[13:56:48] *** Joins: DevAntoine (~DevAntoin@195.101.183.21)
[14:02:06] *** Joins: entuland (~entuland@user/entuland)
[14:04:20] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[14:17:48] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[14:18:16] <no_gravity> Good Morning! Here is a char in the string that var_dump does not show: https://3v4l.org/88qnG
[14:18:38] <no_gravity> What is a good way (for debugging purposes) to print a string so non-printing chars get visible?
[14:19:21] <TinoDidriksen> bin2hex() or pass it via json_encode()
[14:19:54] <TinoDidriksen> That particular one is U+200E Left-To-Right Mark.
[14:20:08] <no_gravity> TinoDidriksen: Great, thanks!
[14:28:56] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[14:29:56] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:41:45] *** Joins: sleetdrop (~sleetdrop@61.135.152.254)
[14:57:49] *** Quits: sleetdrop (~sleetdrop@61.135.152.254) (Ping timeout: 246 seconds)
[15:04:53] <no_gravity> Is it not possible to replace it like this? https://3v4l.org/kdqcY
[15:05:48] <no_gravity> Oh, it needs this funny syntax: https://3v4l.org/aNrA4
[15:12:16] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[15:56:30] *** Quits: mr_gant (~mr_gant@144.48.37.132) (Ping timeout: 268 seconds)
[15:57:06] *** zerobeholder is now known as ZeroBeholder
[16:05:52] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:06:01] *** ZeroBeholder is now known as zerobeholder
[16:20:35] *** Quits: ordos (~ordos@user/ordos) (Remote host closed the connection)
[16:26:12] *** Joins: brickfat (~brickfat@user/brickfat)
[16:44:37] *** Joins: MCMiiic (~mcmic@63.120.199.77.rev.sfr.net)
[16:45:18] *** Quits: MCMiic (~mcmic@63.120.199.77.rev.sfr.net) (Ping timeout: 272 seconds)
[16:56:29] *** Joins: ordos (~ordos@user/ordos)
[17:04:41] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[17:19:57] <olle> Looks like partial funcion application will just barely fail. Pity, lots of work done.
[17:20:07] <olle> Although I might think the feature is a bit too big.
[17:20:36] <biberu> oh, there was an rfc for that?
[17:21:44] <AllenJB> A failed RFC vote does not necessarily mean "never" - it means "not this specific implementation". I think it's highly likely it'll come back later in a revised form
[17:22:30] <biberu> olle: this one: https://wiki.php.net/rfc/partial_function_application ?
[17:22:39] <AllenJB> Judging by the votes, there's obviously significant support for the idea
[17:22:55] *** Joins: Hist0rian (~Hist0rian@69.36.51.49)
[17:23:06] <biberu> with placeholders, curious
[17:24:08] <AllenJB> 27:18 isn't exactly "barely" IMO. With 18 no votes it would require 36 yes votes to pass - 9 more than it currently has
[17:27:10] <olle> biberu: that one, yes
[17:27:30] <olle> AllenJB: 2/3 needs to be pro. 0,4 are against
[17:27:40] <olle> So should be 0,33 against, max
[17:28:18] <olle> AllenJB: Well, you can assume one no-vote will transfer to a yes-vote. :)
[17:28:24] <AllenJB> But it's highly unlikely any existing votes are going to change. The only realistic chance for this RFC to pass in this vote is more voters
[17:28:36] <olle> That's true
[17:28:41] <olle> How many have voting rights...?
[17:29:33] <biberu> hm, is there an actual need for the placeholders? normally i'd just arrange the arguments in the order they should be applied, i.e. the thing you know at the latest point furthest to the right, or worst case, make a small wrapper, it feels smelly to need those too often
[17:30:25] <AllenJB> Quite a few (pretty much anyone who's ever had a php.net VCS account I believe, plus some others), but many are inactive (the exact criteria for who can get voting rights is also a tad on the vague side and while it's changed over time I don't believe anyone has ever had their voting rights revoked)
[17:31:17] <olle> biberu: Depends on how you ask, but array_map, array_walk etc can have inconsistent places for haystack and needle
[17:31:21] <olle> who you ask*
[17:34:57] <olle> So you either need to be able to move '?' around, or accept boilerplate fn($x) => array_walk('needle', $x) to fix it
[17:35:17] <olle> AllenJB: Hm, what's VCS?
[17:35:56] <olle> Nik said he'd move the first-class callable syntax to vote if PFA fails.
[17:36:03] <AllenJB> version control system - cvs / svn / git
[17:36:12] <olle> Which is $foo = foo(...) <--- creates callable
[17:36:18] <olle> AllenJB: Oh, ok
[17:38:22] <biberu> olle: yeah, the boilerplate is my usual solution, but in that case i think it'd be fn ($xs) => array_walk($xs, fn ($x, $k) => ...)
[17:38:54] <olle> biberu: When piping you could remove one of those fn, I think. Depending on what you're piping on, of course.
[17:38:59] <biberu> olle: array_walk is probably a good example of the argument order too, it's probably more common to know the callback before the values
[17:40:05] <olle> biberu: I mean, it's the opposite of array_map
[17:40:07] <olle> Pretty random
[17:40:54] <biberu> the order for array_map feels better to me
[17:41:01] <olle> No opinion xD
[17:41:28] <olle> But that's the reason why '?' exists instead of just |> str_split |> array_walk
[17:41:34] <olle> that and pesky constants.
[17:41:44] *** Quits: osxtra (~root@136.49.108.80) (Ping timeout: 252 seconds)
[17:42:05] <biberu> many of the examples in that pr take a lot of arguments too
[17:42:13] <biberu> rfc*
[17:42:28] <olle> foo(?, ?, ?, ?, ?) :)
[17:42:34] <olle> ?????
[17:44:01] <biberu> yeah, i find it pretty uncommon to need 5 arguments *and* that those couldn't either be grouped up in e.g. a record or the function split into smaller parts
[17:44:39] <olle> Not to mention he uses function names as "stuff" and "things", lol
[17:44:41] <biberu> if i design a function that takes 5 arguments and i need to partially apply the third one, then perhaps i should suffer some boilerplate ;)
[17:44:46] <olle> Use real-world examples, bitte...
[17:45:18] <biberu> i don't really have an opinion about the placeholders though, i just find them curious
[17:45:47] <olle> afaik, piping in functional programming has non of that
[17:46:49] <biberu> well, while you can partially apply functions for a pipeline you don't have to use both ideas together either
[17:46:59] <olle> No
[17:47:18] <olle> However, according to Larry, people complained about callable syntax when he discussed the pipe rfc
[17:47:36] <olle> You just can't make people happy sometimes :)
[17:48:06] <biberu> such is life
[17:48:40] <olle> I'd suggest they have a better pre-process to figure out if it's at all worth to start coding.
[18:06:57] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[18:09:24] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[18:13:30] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Ping timeout: 240 seconds)
[19:02:26] *** Joins: Skorlok (~Skorlok@lfbn-ren-1-512-90.w2-10.abo.wanadoo.fr)
[19:04:31] *** Joins: DevAntoi_ (~DevAntoin@195.101.183.21)
[19:05:54] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 272 seconds)
[19:07:17] *** Quits: Hist0rian (~Hist0rian@69.36.51.49) (Quit: Textual IRC Client: www.textualapp.com)
[19:08:01] *** Quits: DevAntoine (~DevAntoin@195.101.183.21) (Ping timeout: 256 seconds)
[19:12:09] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:14:41] *** Joins: genom (~g@37.214.83.249)
[19:17:50] *** Quits: Teraii (~teraii@185.219.206.44) (Quit: %Ho Ishuudaa%)
[19:18:11] *** Joins: Teraii (~teraii@185.219.206.44)
[19:27:26] *** Joins: evilbug (~evilbug@86.127.60.194)
[19:31:37] *** Quits: MCMiiic (~mcmic@63.120.199.77.rev.sfr.net) (Quit: Konversation terminated!)
[19:34:19] *** Parts: swebb (~swebb@161.97.198.243) (Textual IRC Client: www.textualapp.com)
[19:53:32] *** Quits: elycin (~elycin@ec2-54-163-129-255.compute-1.amazonaws.com) (Quit: ZNC 1.8.2 - https://znc.in)
[19:53:48] *** Joins: elycin_ (~elycin@ec2-54-163-129-255.compute-1.amazonaws.com)
[19:58:50] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[20:00:21] <kevr> php-fpm is logging out to access.log multiple times for a single request.
[20:00:33] <kevr> o_O
[20:03:16] <entuland> $fpm->paid_by_log_line = false;
[20:04:08] <biberu> kevr: that that it isn't misdirected requests for e.g. favicons, cors preflights or stuff like that
[20:04:16] <biberu> check*
[20:04:46] <Azrael_-> hi
[20:04:54] <Azrael_-> does anybody know a way to send a whatsapp message somehow programatically without the need to use a paid service?
[20:05:05] <kevr> biberu: yeah, that's what i'm thinking.
[20:05:12] <kevr> it is due to an nginx rewrite, i think.
[20:08:11] *** Quits: tex (~super@user/dix) (Ping timeout: 258 seconds)
[20:11:48] <entuland> Azrael_-, the whatsapp API seems paid to begin with, can't find any free ways to do that
[20:11:54] *** Quits: olle (~olle@i5e866661.versanet.de) (Ping timeout: 252 seconds)
[20:12:31] <anomander> Azrael_-, lego mindstorms bot that can type on an android phone?
[20:12:42] <entuland> eheheh
[20:14:04] <entuland> well, if you use web.whatsapp.com you could have some local JS injected in the page to interact with it, but sounds more work than you'd be saving by not paying in the intended way probably
[20:14:52] <entuland> and may as well be against their TOS, so that's your call
[20:15:15] <Azrael_-> k, thanks. feared this :(
[20:20:32] *** Joins: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6)
[20:26:31] *** Joins: Wulf (~Wulf@user/wulf)
[20:28:12] <Wulf> Hello! How can I connect from PHP to an ldap server and authenticate through gssapi/kerberos?
[20:29:11] *** Joins: Warped (~Warped@user/warped)
[20:32:54] *** Joins: stenno (~stenno@user/stenno)
[20:38:20] *** Joins: dimi1947 (~dimi1947@2a02:1388:2080:ef2b:50f6:f9da:d39e:fc11)
[20:52:21] *** Joins: ||JD|| (~jd@user/jd/x-3730462)
[20:54:06] *** Joins: Rockwood (~Rocky@user/rocky)
[20:56:29] *** Quits: ||JD|| (~jd@user/jd/x-3730462) (Client Quit)
[21:05:40] <AllenJB> Wulf: Have you checked out PHP's bundled LDAP extension as well as the variety of libraries in Packagist ( https://packagist.org/?query=ldap )?
[21:10:04] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 268 seconds)
[21:11:52] *** Joins: magla (~gelignite@55d43d25.access.ecotel.net)
[21:15:53] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Quit: Quitting)
[21:22:38] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[21:22:56] <ash_worksi> shouldn't the return type for Iterator::key() be int|string ?
[21:31:08] *** Quits: DevAntoi_ (~DevAntoin@195.101.183.21) (Remote host closed the connection)
[21:31:44] *** Quits: dimi1947 (~dimi1947@2a02:1388:2080:ef2b:50f6:f9da:d39e:fc11) (Quit: Leaving)
[21:35:17] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Remote host closed the connection)
[21:43:43] <AllenJB> ash_worksi: Probably just the docs haven't been updated yet. It may also be an issue with the stubs in php-src (which I believe are used to at least partially generate function signatures in the docs) (I would check, but I haven't the foggiest where Iterator is actually defined)
[21:44:20] <AllenJB> Also there's a relatively long list of internally defined classes that extend Iterator (particularly in SPL, but probably other places too)
[21:46:38] <AllenJB> ash_worksi: If it bugs you enough ,raise an issue or submit a PR on https://github.com/php/doc-en/
[21:47:25] *** Joins: judah (~judah@rrcs-74-87-190-146.west.biz.rr.com)
[21:47:46] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:49:29] <ash_worksi> AllenJB: it doesn't, I was just questioning it / pointing it out
[21:52:22] *** Joins: tex (~super@user/dix)
[21:53:26] <AllenJB> Also: https://externals.io/message/112842
[21:56:17] *** Quits: tex (~super@user/dix) (Read error: Connection reset by peer)
[22:18:43] <__adrian> "ash_worksi> shouldn't the return type for Iterator::key() be int|string ?"  no. https://3v4l.org/hnCMe
[22:18:53] <__adrian> key() can return anything
[22:23:52] <ash_worksi> oh
[22:24:27] <ash_worksi> is there a general programming word that encompasses the concept of SplObjectStorage ?
[22:24:43] <__adrian> "map"
[22:26:08] <ash_worksi> __adrian: this? https://en.wikipedia.org/wiki/Map_(computer_science)
[22:26:17] <ash_worksi> (note: it redirects to assoc array)
[22:26:31] <__adrian> yeah. only real difference between splobjectstorage and an (assoc) array is that splos allows+enforces object keys
[22:26:47] <ash_worksi> splos = spls?
[22:26:52] <__adrian> SplObjectStorage
[22:26:56] <ash_worksi> oh
[22:27:57] <ash_worksi> hmm, well that makes my query a bit harder; I am trying to find some splos use cases
[22:28:22] <__adrian> "i have random information that i want to associate with this object"
[22:28:41] <ash_worksi> yeah, a use case would make that a bit clearer
[22:29:13] <__adrian> it's there, but tbh, when i used it was usually to just keep a (unique) set of objects
[22:29:30] <ash_worksi> that's a good use case, imo
[22:32:43] <ash_worksi> thanks __adrian
[22:32:49] <__adrian> np
[22:32:57] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[22:38:25] *** Joins: WishBoy (~WishBoy@user/wishboy)
[22:50:53] *** Joins: seand (~seand@69.54.136.33)
[22:50:56] <ash_worksi> I am pleasantly surprised that mixed is treated like a parent interface to everything else. That is, you can make return types more specific or argument types more generic despite the explicit typing on interfaces
[22:51:06] <ash_worksi> or maybe it shouldn't be pleasant
[22:52:04] <__adrian> that's Liskov Substitution Principle (covariance/contravariance)
[22:52:49] <__adrian> child classes can make args less specific, and returns more specific. this is because doing so doesn't break the parent contract.
[22:53:35] <ash_worksi> I understand that; I am just surprised I guess mixed is treated that way.
[22:54:06] <ash_worksi> I guess it is just special like that. I mean there are no other native types that have native subtypes, right?
[22:54:20] <ash_worksi> unless an array is actually a type of object
[22:54:31] <__adrian> ah... you mean "mixed" as a literal typehint
[22:54:47] <__adrian> mixed as a literal typehint is idiotic
[22:55:10] <__adrian> but meh, yes. it's more of "not specified" than "parent type"
[22:55:23] <ash_worksi> I guess union types works that way too
[22:57:17] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[23:09:50] <ash_worksi> you can't do like `string?|bool?` right? it'd just be `string|bool|null` right?
[23:09:58] *** Parts: Wulf (~Wulf@user/wulf) ()
[23:10:33] <ash_worksi> (or more clearly, nullable union typehints must be written as another part of the union)
[23:10:40] <__adrian> dunno offhand. that's a horrible signature, btw  :)
[23:11:52] <ash_worksi> ¬Ø\_(„ÉÑ)_/¬Ø
[23:12:24] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Quit: leaving)
[23:17:39] *** Joins: infernix (nix@2a02:22a0:bbb1:d500::2)
[23:22:55] *** Joins: dmk_ (~dmk@wireguard/tunneler/dmk)
[23:23:34] *** Quits: dmk (~dmk@wireguard/tunneler/dmk) (Ping timeout: 265 seconds)
[23:30:59] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[23:36:16] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[23:37:53] *** dmk_ is now known as dmk
[23:58:16] *** Joins: Akimb (~Akimb@86.100.13.100)
