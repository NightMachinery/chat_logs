[02:01:23] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[02:01:46] *** Joins: great_taste (~great_tas@190.32.235.20)
[05:28:48] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[05:35:21] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[05:36:16] *** Quits: X-Scale (~ARM@46.50.0.1) (Ping timeout: 268 seconds)
[05:37:24] *** X-Scale` is now known as X-Scale
[06:14:14] *** Joins: great_taste (~great_tas@190.32.235.20)
[08:39:04] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[10:04:15] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[10:48:54] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[17:23:26] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[17:24:30] *** Joins: X-Scale` (~ARM@83.223.227.196)
[17:26:04] *** X-Scale` is now known as X-Scale
[19:11:50] <CarloWood> { array<char const*, 2> test_strings = { "0\n", " \t0\n", "\t\t  123456\n" }; for (auto s : test_strings) test(s); } void test(std::string_view sv) { return sv == "0\n"; }
[19:11:50] <geordi> error: return-statement with a value, in function returning 'void'
[19:12:35] <CarloWood> { array<char const*, 2> test_strings = { "0\n", " \t0\n", "\t\t  123456\n" }; for (auto s : test_strings) cout << (test(s) << "yes " : "no "); } bool test(std::string_view sv) { return sv == "0\n"; }
[19:12:35] <geordi> error: too many initializers for 'array<const char*, 2>'
[19:12:53] <CarloWood> { array<char const*, 3> test_strings = { "0\n", " \t0\n", "\t\t  123456\n" }; for (auto s : test_strings) cout << (test(s) << "yes " : "no "); } bool test(std::string_view sv) { return sv == "0\n"; }
[19:12:53] <geordi> error: invalid operands of types 'bool' and 'const char [5]' to binary 'operator<<'
[19:13:07] <CarloWood> { array<char const*, 3> test_strings = { "0\n", " \t0\n", "\t\t  123456\n" }; for (auto s : test_strings) cout << (test(s) ? "yes " : "no "); } bool test(std::string_view sv) { return sv == "0\n"; }
[19:13:08] <geordi> yes no no 
[19:16:04] <CarloWood> { array<char const*, 3> test_strings = { "0\n", " \t0\n", "\t\t  123456\n" }; for (auto s : test_strings) cout << (test(s) ? "yes " : "no "); } bool test(string_view sv) { auto p = sv.begin(); while(p != sv.end() && isspace(*sv)) ++p; return p != sv.end() && *p != '0' && isdigit(*p); }
[19:16:04] <geordi> error: no match for 'operator*' in '*sv' (operand type is 'string_view' {aka 'basic_string_view<char>'})
[19:16:14] <CarloWood> { array<char const*, 3> test_strings = { "0\n", " \t0\n", "\t\t  123456\n" }; for (auto s : test_strings) cout << (test(s) ? "yes " : "no "); } bool test(string_view sv) { auto p = sv.begin(); while(p != sv.end() && isspace(*p)) ++p; return p != sv.end() && *p != '0' && isdigit(*p); }
[19:16:15] <geordi> no no yes 
[19:37:09] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 3903556\nVmPeak:   597524 kB"; istringstream ss(data); }
[19:37:09] <geordi>  
[19:39:46] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 3903556\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (line == "TracerPid:") { int pid; sf >> pid; cout << (pid != 0); return; } getline(sf, s); } cout << false; } }
[19:39:46] <geordi> error: Unexpected `}` after `false; } `. Expected balanced code or end of request.
[19:39:52] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 3903556\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (line == "TracerPid:") { int pid; sf >> pid; cout << (pid != 0); return; } getline(sf, s); } cout << false; }
[19:39:52] <geordi> error: 'line' was not declared in this scope; did you mean 'link'? (fix known)
[19:40:08] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 3903556\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (s == "TracerPid:") { int pid; sf >> pid; cout << (pid != 0); return; } getline(sf, s); } cout << false; }
[19:40:08] <geordi> error: return-statement with no value, in function returning 'int'
[19:40:31] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 3903556\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (s == "TracerPid:") { int pid; sf >> pid; cout << (pid != 0); return 0; } getline(sf, s); } cout << false; }
[19:40:31] <geordi> true
[19:40:42] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPidx: \t 3903556\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (s == "TracerPid:") { int pid; sf >> pid; cout << (pid != 0); return 0; } getline(sf, s); } cout << false; }
[19:40:43] <geordi> false
[19:40:58] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 0\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (s == "TracerPid:") { int pid; sf >> pid; cout << (pid != 0); return 0; } getline(sf, s); } cout << false; }
[19:40:59] <geordi> false
[19:49:07] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 3903556\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (s == "TracerPid:") { int pid; sf >> pid; cout << (pid != 0); return 0; } getline(sf, s); } cout << false; }
[19:49:08] <geordi> true
[19:49:35] <CarloWood> { string data = "Name:   mytest\nUmask:  0022\nState:\t t (tracing stop)\nPPid:\t\t3903556\nTracerPid: \t 3903556\nVmPeak:   597524 kB"; istringstream sf(data); string s; while (sf >> s) { if (s == "TracerPid:") { cout << (int pid, sf >> pid, pid != 0); return 0; } getline(sf, s); } cout << false; }
[19:49:35] <geordi> error: expected primary-expression before 'int'
[21:45:28] *** Joins: great_taste (~great_tas@190.32.235.20)
