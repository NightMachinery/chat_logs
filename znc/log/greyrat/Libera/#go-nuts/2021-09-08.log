[00:07:19] *** Joins: arcatech (~arcatech@user/arcatech)
[00:09:34] *** Joins: chasmo77 (~chas77@71.63.241.168)
[00:23:37] *** Quits: tty14 (~tty14@152.67.7.96) (Ping timeout: 252 seconds)
[00:23:45] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[00:30:54] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[00:31:23] *** Quits: bleloch (bleloch@gateway/vpn/protonvpn/bleloch) (Remote host closed the connection)
[00:31:24] *** Joins: Torr (~Torr@user/torr)
[00:32:37] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[00:34:31] <ghostbuster> how do i fork a go package on github and then include the forked version in a new module? i've edited the go.mod of the forked package but when i include it (using the my github username) and run 'go get' it's still finding the old go.mod somewhere and complaining about a mismatch
[00:36:03] <Tv_> ghostbuster: hard to help without details, likely explanation is one string does not match the other
[00:36:03] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:36:13] <newton> did you update the forked repo's go.mod to rename the package too?
[00:36:50] <ghostbuster> newton: yes
[00:37:14] <ghostbuster> Tv_: the strings definitely do not match, because one is my github username and one is the original authors
[00:37:25] <ghostbuster> i just can't figure out where the original author's is being pulled from
[00:37:54] <Tv_> ghostbuster: either you stop importing the old name (which is usually a lot of work), or you use replace and *don't* change the name in go.mod
[00:38:53] <Tv_> ghostbuster: say you import external dependency github.com/jdoe/foo which imports github.com/bar/bar that you forked; if you want to change the name of the away from bar/bar you would have to fork jdoe/foo also
[00:39:16] <Tv_> generally you only do that if you will never again coordinate with the original maintainer
[00:39:29] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[00:39:39] <ghostbuster> the project is archived so I'm not expecting to push changes upstream
[00:39:47] *** Joins: independent56 (~independe@95.144.68.39)
[00:40:26] <ghostbuster> I can see why that might be best-practice, but in this case i think the dependency graph is manageable
[00:40:37] <ghostbuster> i don't plan to import any other packages that rely on this one
[00:40:42] <Tv_> well then find everything that imports the old name and *change them all*
[00:40:52] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[00:40:59] <Tv_> if something is still pulling in the old name, you've clearly missed some
[00:41:24] *** Joins: seabass (~seabass@user/seabass)
[00:41:27] <Tv_> once again, hard to help without details
[00:41:31] <Tv_> "complaining about a mismatch"
[00:41:46] <Tv_> sounds like you haven't changed the go.mod to the new name
[00:42:29] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[00:42:47] *** Joins: independent56 (~independe@95.144.68.39)
[00:43:13] <seabass> Hello! Most C compilers have preprocessor directives. This means I can define a constant at build time, rather than in the source code.
[00:43:19] <seabass> Can I do something like this in Go?
[00:43:27] <A_Dragon> `const thing = "stuff"`
[00:43:28] <ghostbuster> i am 100% sure i have changed go.mod, committed and pushed to master
[00:43:29] <Tv_> seabass: even if you could, we'd recommend not to
[00:43:40] <Tv_> (there are things to do. don't do them.)
[00:43:44] <A_Dragon> oh you mean at build time
[00:43:45] *** Joins: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net)
[00:43:48] <Tv_> seabass: what problem is being solved here?
[00:43:49] <seabass> A_Dragon: yup
[00:43:51] <A_Dragon> yes you can set vars at build time with the linker
[00:44:08] <A_Dragon> no setting consts though, after build $shrug
[00:44:15] <seabass> Tv_: fmt.Println("Version:", PROGRAM_VERSION)
[00:44:29] <CommunistWolf> you could also use //go:generate for all kinds of fun
[00:44:31] <seabass> where PROGRAM_VERSION is set in the command line
[00:44:41] <ghostbuster> Tv_: sorry here is actual error https://termbin.com/mxme
[00:44:43] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:44:49] <A_Dragon> seabass: https://github.com/A-UNDERSCORE-D/goGoGameBot/blob/master/.github/workflows/release.yml#L41
[00:44:57] <CommunistWolf> but for something like program version, yeah, just use a variable set from outside
[00:45:31] <seabass> A_Dragon: CommunistWolf: thank you!
[00:45:53] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[00:46:26] <seabass> you see I'd like the Makefile to read the current Git tag, if any, and use that to populate the PROGRAM_VERSION constant
[00:46:36] <seabass> it sounds as if a linker command would do nicely here :)
[00:46:39] <Tv_> seabass: please go +1 https://github.com/golang/go/issues/37475
[00:47:08] * A_Dragon +1
[00:47:15] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.243)
[00:49:21] <seabass> Tv_: I've been reading that GitHub issue
[00:49:29] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:50:11] <seabass> if I understand correctly, you'd import "version" and then run something like ReadSource() ?
[00:50:40] <seabass> fmt.Println("Version:", ReadSource().Release)
[00:50:50] *** Quits: burningserenity_ (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[00:51:26] <Tv_> seabass: where'd you get "ReadSource" from?
[00:51:39] <seabass> I made it up, like the package version has ReadBinary()
[00:52:44] <Tv_> i'd expect just fields in runtime/debug.ReadBuildInfo
[00:54:01] <Tv_> ghostbuster: are you tabell? you left github.com/liyue201/goqr in the go.mod that's available in your repo
[00:54:04] <seabass> ooh, I see - so type BuildInfo would have a member like 'Version' which is a string
[00:54:16] <seabass> and that string would be set to the current Git tag
[00:54:35] <Tv_> seabass: background: https://github.com/golang/go/issues/29814
[00:54:58] *** Quits: menace (~someone@user/menace) (Quit: menace)
[00:57:06] <Tv_> also https://github.com/thaJeztah/runc/commit/7c8afb24c078251573192f4326ec191fca9672a4 and make note that `go install foo@version` will already make the binary know what version it is
[00:57:07] <ghostbuster> Tv_: are you sure? i don't see it there https://github.com/tabell/goqr/blob/master/go.mod
[00:57:13] *** Joins: Freman (~Freman@flatus.fremnet.net)
[00:57:20] <Tv_> it's only the clone and build that doesn't
[00:58:04] <Tv_> ghostbuster: maybe you asked for it once through the cache? try go get github.com/tabell/goqr@master
[00:58:09] <seabass> Tv_, yup this is for the final application's ability to report its own version :)
[00:58:40] <ghostbuster> Tv_: that's much better than manually rm -rf'ing the cache lol
[00:59:08] <Tv_> ghostbuster: more to the point, you're likely using a global cache you very much won't be rm -rf'ing
[00:59:36] <Tv_> seabass: not sure what meaning you are trying to impart with "final application"
[00:59:40] <ghostbuster> Tv_: it would have to be somewhere in my home dir though
[00:59:55] <Tv_> if the executable is a result of `go install foo@bar`, it'll know it's version
[01:00:07] <Tv_> ghostbuster: i very much assure you google is not in your home dir
[01:00:18] <ghostbuster> interesting
[01:00:27] <ghostbuster> if i remove the @master it works
[01:00:42] <ghostbuster> and my app runs now, although i guess I could be using the unforked version of the lib still
[01:01:11] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[01:02:45] <ghostbuster> i didn't realize google cached that stuff
[01:02:52] <ghostbuster> i think it's slowly picking up my commits
[01:02:55] <ghostbuster> very opaque imho
[01:04:25] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[01:04:52] <seabass> Tv_, I'm more imagining that the application is build with 'go build' and the Makefile installs it onto the users' systems.
[01:05:17] <Tv_> seabass: well that's just opting out of a good system, *shrug*
[01:05:20] <seabass> thus, it's an end-user application, not intended for those who already know how to use go install
[01:05:55] <seabass> please correct me if I'm wrong, but it seems as if go install does lots of stuff which may contradict the distribution
[01:06:05] <Tv_> actual end user applications need distro/windows/macos packaging, or such
[01:06:13] <seabass> like the preferred path for installation between distros
[01:06:13] <Tv_> so will your makefile
[01:06:57] <seabass> Tv_: the Makefile would read enviroment variables such as PREFIX that the distro sets or user overrides
[01:07:14] <Tv_> there's really no need to pretend Go is C
[01:07:40] <Tv_> distros are packaging go, rust, python, etc applications all without pretending they're old school C programs
[01:07:42] <seabass> does 'go install' read the environment variables itself? I haven't used it all that much
[01:08:02] <b0nn> `go env`
[01:08:29] <Tv_> also apps including their own version numbers tend to be explicitly wrong in distros, e.g. by not knowing their -n suffix
[01:08:43] <seabass> Tv_: that is a very good point
[01:08:50] <Tv_> if a debian user wants to know what version of foo they have, they'll run dpkg -l foo, not foo --version
[01:09:05] <seabass> I'll have to make it so that the VERSION variable in the makefile can be overridden by Debian or another distro
[01:15:09] <b0nn> just test if it's set
[01:18:17] *** Joins: Snyp (~Snyp@49.207.202.197)
[01:19:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:21:00] *** Joins: fikran (~fikran@user/fikran)
[01:23:08] <dostoyevsky2> Tv_: But Go was developed by one of the C guys...
[01:24:18] <Tv_> they made a whole lot of things
[01:24:29] <dostoyevsky2> Also, I am still puzzled by Go's crypto stuff... seems just so awesome... it's like they put decades of man years just into all kinds of crypot stuff
[01:24:30] <Tv_> most of them after C
[01:25:40] <foobaz> the go developers lived through the crypto wars of the '80s and '90s so they saw it as a high priority
[01:25:45] *** Quits: Snyp (~Snyp@49.207.202.197) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:28:20] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Quit: ZNC 1.8.2 - https://znc.in)
[01:29:31] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[01:29:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[01:30:13] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[01:31:15] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Client Quit)
[01:31:31] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[01:32:04] *** Joins: LSD (~LSD@2.lsd.systems)
[01:34:36] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[01:34:59] <dostoyevsky2> Tv_: I think I heard that channels are clearly an inspiration from Plan9, and they also stole the mascot for Golang
[01:35:19] <Tv_> "stole" ain't the right description
[01:36:11] <dostoyevsky2> I mean Rob Pike's spouse made both the mascot for plan9 and go
[01:37:27] <dostoyevsky2> So yeah, I do think that some of Rob Pike's previous projects live on in Go
[01:39:37] <b0nn> I think some of everyone's previous projects live on in our current projects
[01:40:15] <b0nn> I mean, I draw on the experience of what worked previously, and what failed, and in some cases, introduce ideas that solve or mitigate those failures
[01:40:32] *** Joins: sidy (~sidy@user/sidy)
[01:41:03] <dostoyevsky2> b0nn: hmmm.. Now I need to lookup the guy who invented intercal and check what they did afterwards.... I wonder if it was the Intel assembly language
[01:41:14] <b0nn> In other cases I work very hard to introduce new and novel ways to fail :)
[01:45:38] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[01:46:28] <dostoyevsky2> Yeah, he didn't write any other languages after Intercal... I guess that means it's perfect
[01:48:06] *** Quits: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net) (Quit: My computer has gone to sleep.)
[01:48:41] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:49:12] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 265 seconds)
[01:51:59] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.243) (Read error: Connection reset by peer)
[01:54:35] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.243)
[01:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[01:54:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[01:55:22] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[02:02:17] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:90ff:659a:dec7:5c9f)
[02:06:10] *** Joins: nrkallen (~nrkallen@cpe-67-243-76-224.hvc.res.rr.com)
[02:07:05] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[02:09:22] *** Quits: nrkallen (~nrkallen@cpe-67-243-76-224.hvc.res.rr.com) (Client Quit)
[02:10:40] *** Joins: nrkallen62 (~nrkallen@cpe-67-243-76-224.hvc.res.rr.com)
[02:11:48] <nrkallen62> Hello everyone, I am very unfamiliar with go, and I am trying to get a service to start that is failing on ubuntu 18.04 and the only clue from the logs is a lot of errors like this: (source: /usr/local/go/src/runtime/asm_amd64.s:2337)(error: cannot open index, metadata missing)  can anyone point me in a direction to start?
[02:14:09] <Tv_> that looks like a very butchered error message..
[02:14:39] <foobaz> nrkallen62: can you paste more of the error log? there is not enough information in what you pasted
[02:14:56] <dostoyevsky2> nrkallen62: How did you install go?  18.04 is from 2018-04... so if you used the go packages from then
[02:16:14] <nrkallen62> Go was installed as part of a script for the program, here is a little more from the error log but mostly it is tons of variations of this:
[02:16:15] <Tv_> it seems "cannot open index" has never appeared in the Go source tree
[02:16:16] <nrkallen62> 2021-09-07 21:25:25.1559 info Starting index open 'incidents_092021' (source: /home/ubuntu/.go_workspace/src/github.com/demisto/server/repo/complexRepo/repo.go:407)
[02:16:17] <nrkallen62> 2021-09-07 21:25:25.1559 info Done index open 'incidents_092021'. Took 48.839µs (source: /home/ubuntu/.go_workspace/src/github.com/demisto/server/repo/complexRepo/repo.go:409)
[02:16:17] <nrkallen62> 2021-09-07 21:25:25.156 error Failed on ensure function for incidents (source: /usr/local/go/src/runtime/asm_amd64.s:2337)(error: cannot open index, metadata missing)
[02:16:49] <Tv_> nrkallen62: that looks like a very ugly formatted message from the application you are running, don't blame that on Go
[02:17:12] <nrkallen62> Haha yes, I am sure it is the application, just not even sure where to start looking so i thought I would ask
[02:17:28] <Tv_> nrkallen62: the string "Failed on ensure function for incidents" in the application
[02:18:32] <foobaz> look in repo.go at lines 407 and 409
[02:19:17] <nrkallen62> That is the strange part that directory doesn't even exist
[02:19:38] *** Quits: jnml (~jnml@ipservice-092-217-240-247.092.217.pools.vodafone-ip.de) (Quit: Client closed)
[02:19:51] <foobaz> it exists on the machine that built the binary
[02:19:59] <foobaz> whoever compiled it, had repo.go
[02:20:27] <dostoyevsky2> https://github.com/demisto/server/repo/complexRepo/repo.go <- seems to be in a private repository
[02:20:41] <foobaz> if you don't have repo.go, you don't have a good chance of fixing this
[02:21:37] *** Joins: svedrin_ (~quassel@tiamat.funzt-halt.net)
[02:22:38] *** Joins: gregf_ (~gregf@user/gregf)
[02:23:04] <dostoyevsky2> nrkallen62: Maybe just open an issue with the owners of demisto..  If you can access the server repo, there might be an issue tracker that's acitve
[02:23:04] *** Quits: gregf (~gregf@user/gregf) (Ping timeout: 252 seconds)
[02:23:04] *** gregf_ is now known as gregf
[02:23:24] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[02:24:29] <dostoyevsky2> But what's there: go/src/runtime/asm_amd64.s:2337  -- hard to tell without knowing which version of go it is
[02:24:32] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[02:24:59] <foobaz> i'm guessing it's panic()
[02:27:35] <dostoyevsky2> `runtime.goexit at /usr/lib/golang/src/runtime/asm_amd64.s:2337' I found that on another website
[02:27:46] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[02:31:36] <foobaz> that must be it
[02:33:20] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:36:10] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[02:46:05] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 260 seconds)
[02:46:22] *** Joins: lalitmee_ (~lalitmee@180.94.32.166)
[02:48:53] *** Quits: lalitmee__ (~lalitmee@180.94.32.100) (Ping timeout: 252 seconds)
[02:51:12] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:54:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:56:26] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[02:57:45] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:03:02] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[03:07:12] *** Quits: userj (~userjjjj@user/userj) (Ping timeout: 245 seconds)
[03:12:43] *** Quits: Kyros (~kyros@user/kyros) (Quit: WeeChat 2.8)
[03:15:04] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[03:15:50] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 260 seconds)
[03:16:13] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:18:01] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[03:18:02] *** Quits: goldfish__ (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[03:22:06] *** Joins: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net)
[03:27:10] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 240 seconds)
[03:28:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[03:29:20] *** Joins: kulak (~kulak@user/kulak)
[03:29:31] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[03:29:41] <nrkallen62> Turns out it had nothing to do with go, I figured out the program ran fine when done manually but the systemd unit wouldn't work, removed a User= line from it and it starts. Thanks for being willing to take a look at the issue everyone, it is appreachiated.
[03:30:22] *** Joins: fikran (~fikran@user/fikran)
[03:30:38] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[03:32:28] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1001)
[03:32:43] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:33:10] *** Joins: jsrnop (~mark@user/jsrnop)
[03:34:11] <b0nn> nrkallen62: FTR (nitpick) there's no 'h' in appreciated
[03:34:30] <b0nn> the second 'a' is superfluous as well
[03:34:34] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 252 seconds)
[03:35:35] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:38:33] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[03:39:33] *** Joins: kulak (~kulak@user/kulak)
[03:39:55] <nrkallen62> One of my worst words, almost always spell it wrong.
[03:40:04] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:41:44] <b0nn> It's not a biggie (hence the "nitpick" - I just thought I'd bring it to your attention in case you weren't aware
[03:42:50] <b0nn> And if the construction of that comment is anything to go by, I'm far from perfect with the English myself
[03:44:14] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 265 seconds)
[03:46:16] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:47:20] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.243) (Ping timeout: 260 seconds)
[03:49:21] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[03:54:20] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[03:54:20] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 260 seconds)
[03:55:02] *** Joins: darkapex (~darkapex@user/darkapex)
[04:02:02] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 252 seconds)
[04:07:27] *** Joins: kulak (~kulak@user/kulak)
[04:07:39] *** Joins: sevenever_web (uid202224@user/sevenever)
[04:09:11] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.243)
[04:19:02] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 265 seconds)
[04:19:14] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[04:25:49] *** Joins: kulak (~kulak@user/kulak)
[04:35:58] *** Quits: rek2 (~ReK2@static-141-25-231-77.ipcom.comunitel.net) (Quit: WeeChat 3.2)
[04:38:27] *** Joins: rek2 (~ReK2@static-141-25-231-77.ipcom.comunitel.net)
[04:43:50] *** Quits: keiser0091075852 (~keiser@188.47.7.208.ipv4.supernova.orange.pl) (Ping timeout: 252 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:35] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:51:26] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:57:29] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:59:23] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[05:00:20] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 252 seconds)
[05:01:04] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584)
[05:02:21] *** Joins: kulak (~kulak@user/kulak)
[05:03:59] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 265 seconds)
[05:04:13] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584) (Ping timeout: 252 seconds)
[05:07:50] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[05:11:53] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[05:19:44] *** Joins: bpalmer` (~user@user/bpalmer)
[05:20:10] *** Quits: bpalmer (~user@user/bpalmer) (Killed (NickServ (GHOST command used by bpalmer`)))
[05:20:16] *** bpalmer` is now known as bpalmer
[05:20:27] *** Quits: nrkallen62 (~nrkallen@cpe-67-243-76-224.hvc.res.rr.com) (Quit: Client closed)
[05:24:41] *** Quits: bookworm (~bookworm@neomutt/bookworm) ()
[05:30:08] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[05:33:38] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584)
[05:36:40] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584) (Ping timeout: 252 seconds)
[05:38:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:39:47] *** Joins: neurocyte7 (~neurocyte@94.16.90.216)
[05:39:47] *** Quits: neurocyte7 (~neurocyte@94.16.90.216) (Changing host)
[05:39:47] *** Joins: neurocyte7 (~neurocyte@user/neurocyte)
[05:40:08] *** Joins: fikran (~fikran@user/fikran)
[05:41:05] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[05:41:19] *** Quits: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net) (Quit: Good bye!)
[05:43:22] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 245 seconds)
[05:43:22] *** neurocyte7 is now known as neurocyte
[05:44:53] *** Joins: frost (~frost@59.71.240.119)
[05:54:15] *** Quits: pi1 (~pi@177.223.162.41) (Remote host closed the connection)
[05:54:30] *** Joins: pi1 (~pi@177.223.162.41)
[06:00:00] *** Joins: dsrt^ (~dsrt@68.101.54.227)
[06:00:38] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[06:01:00] *** Joins: c10l (~c10l@89.34.167.207)
[06:09:38] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 252 seconds)
[06:11:41] *** Joins: kulak (~kulak@user/kulak)
[06:16:55] *** Quits: sevenever_web (uid202224@user/sevenever) (Quit: Connection closed for inactivity)
[06:31:36] *** Joins: cskr (~cskr@49.207.208.192)
[06:33:50] *** Joins: gggp (~textual@114.245.105.253)
[06:41:08] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[06:41:26] *** Quits: gggp (~textual@114.245.105.253) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:44:12] *** Quits: cskr (~cskr@49.207.208.192) (Quit: Leaving)
[06:46:00] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[06:47:53] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1001) (Quit: ZNC 1.8.2 - https://znc.in)
[07:05:47] *** Quits: frost (~frost@59.71.240.119) (Ping timeout: 265 seconds)
[07:09:21] *** Joins: frost (~frost@59.71.240.119)
[07:09:37] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.243) (Ping timeout: 252 seconds)
[07:09:45] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 260 seconds)
[07:15:22] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[07:18:25] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:20:02] *** Quits: KekSi (~KekSi@x4db9a8a0.dyn.telefonica.de) (Ping timeout: 245 seconds)
[07:24:15] *** Joins: KekSi (~KekSi@x4db59336.dyn.telefonica.de)
[07:29:03] *** Quits: zwr (~zwr@2804:d45:b966:fb00:910a:d889:ae80:3966) (Remote host closed the connection)
[07:30:29] *** Joins: gggp (~textual@114.245.105.253)
[07:33:05] *** Quits: gggp (~textual@114.245.105.253) (Client Quit)
[07:34:22] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 252 seconds)
[07:40:58] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 252 seconds)
[07:44:45] *** Quits: frost (~frost@59.71.240.119) (Ping timeout: 260 seconds)
[07:48:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:49:59] *** Joins: fikran (~fikran@user/fikran)
[07:50:16] *** Joins: frost (~frost@59.71.240.119)
[07:58:34] *** Quits: pi1 (~pi@177.223.162.41) (Ping timeout: 252 seconds)
[08:05:08] *** Joins: pi1 (~pi@177.223.162.41)
[08:11:22] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:22:03] *** Joins: gggp (~textual@111.63.14.116)
[08:28:19] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:36:02] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[08:37:53] *** Joins: lalitmee__ (~lalitmee@180.94.32.185)
[08:40:31] *** Quits: lalitmee_ (~lalitmee@180.94.32.166) (Ping timeout: 265 seconds)
[08:41:20] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 260 seconds)
[08:41:24] *** Joins: noarb (~noarb@user/noarb)
[08:50:00] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:50:08] *** Quits: kulak (~kulak@user/kulak) (Quit: kulak)
[09:06:49] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[09:08:10] *** Joins: Everything (~Everythin@37.115.210.35)
[09:16:27] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[09:20:16] *** Joins: jpw (~jpw@user/jpw)
[09:28:16] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:34:10] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 240 seconds)
[09:34:29] *** Joins: Guest36 (~textual@103.104.171.53)
[09:35:31] *** Joins: jespada (~jespada@90.254.245.194)
[09:41:02] *** Joins: gonglei (~user@103.104.171.53)
[09:41:06] *** Quits: gonglei (~user@103.104.171.53) (Client Quit)
[09:49:00] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:50:43] *** Quits: gggp (~textual@111.63.14.116) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:54:48] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[09:55:11] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[09:57:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[09:58:22] *** Joins: manj-gnome (~manjaro-g@36.112.24.4)
[09:59:22] *** Joins: fikran (~fikran@user/fikran)
[10:01:03] *** Joins: manj-gnome_ (~manjaro-g@36.112.24.4)
[10:01:39] *** Quits: manj-gnome (~manjaro-g@36.112.24.4) (Client Quit)
[10:04:59] *** Joins: gggp (~textual@114.245.107.137)
[10:08:00] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[10:10:58] *** Joins: manj-gnome__ (~manjaro-g@36.112.24.4)
[10:11:22] *** Quits: manj-gnome__ (~manjaro-g@36.112.24.4) (Client Quit)
[10:11:22] *** Quits: manj-gnome_ (~manjaro-g@36.112.24.4) (Quit: Leaving)
[10:11:42] *** Joins: manj-gnome-gy (~manjaro-g@36.112.24.4)
[10:11:45] *** Joins: manj-gnome_gy (~manjaro-g@36.112.24.4)
[10:11:49] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.243)
[10:12:09] *** Quits: manj-gnome-gy (~manjaro-g@36.112.24.4) (Client Quit)
[10:12:16] *** Quits: gggp (~textual@114.245.107.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:13:39] *** Quits: manj-gnome_gy (~manjaro-g@36.112.24.4) (Client Quit)
[10:14:01] *** Joins: manj-gnome-gy (~manjaro-g@36.112.24.4)
[10:14:01] *** Quits: manj-gnome-gy (~manjaro-g@36.112.24.4) (Client Quit)
[10:14:24] *** Joins: manj-gnome-gy (~manjaro-g@36.112.24.4)
[10:15:22] *** Joins: oxum (~oxum@106.203.195.217)
[10:16:24] *** Joins: homarlone (~homarlone@2804:14d:baa3:4341::1000)
[10:16:26] *** Quits: manj-gnome-gy (~manjaro-g@36.112.24.4) (Client Quit)
[10:17:04] *** Joins: kwazii (~kwazii@104.194.226.90)
[10:17:55] *** Joins: manj-gnome-gy (~manjaro-g@36.112.24.4)
[10:18:51] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:27:01] *** Quits: kwazii (~kwazii@104.194.226.90) (Quit: Client closed)
[10:27:12] *** Quits: yelnah (~felix@193-119-65-160.tpgi.com.au) (Ping timeout: 245 seconds)
[10:27:50] *** Joins: yelnah (~felix@2001:44b8:30c0:f2:6f0:21ff:fe3c:d4d7)
[10:30:22] *** Quits: homarlone (~homarlone@2804:14d:baa3:4341::1000) (Remote host closed the connection)
[10:31:20] *** Joins: independent56 (~independe@95.144.68.39)
[10:33:52] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[10:39:28] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[10:39:40] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:44:43] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:44:46] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[10:45:03] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[10:45:07] *** Joins: independent56 (~independe@95.144.68.39)
[10:46:17] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.243) (Ping timeout: 252 seconds)
[10:47:15] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[10:48:08] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[10:49:06] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[10:59:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[10:59:21] *** Joins: hikhvar796073809 (~thelounge@x4db6b838.dyn.telefonica.de)
[11:00:58] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[11:04:10] *** Joins: Atque (~Atque@user/atque)
[11:04:13] *** Joins: shka (~herr@109.231.62.239)
[11:10:23] *** Joins: sevenever_web (~sevenever@user/sevenever)
[11:14:09] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:14:54] *** Quits: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net) (Remote host closed the connection)
[11:16:08] *** Joins: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net)
[11:24:49] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 252 seconds)
[11:25:49] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[11:26:23] *** Joins: jpw (~jpw@user/jpw)
[11:26:35] *** Joins: mrig (~mrig@user/mrig)
[11:28:53] *** Quits: sevenever_web (~sevenever@user/sevenever) (Quit: Client closed)
[11:34:09] *** Joins: cskr (~cskr@49.207.223.82)
[11:35:56] *** Quits: toretto (~ryan@user/toretto) (Read error: Connection reset by peer)
[11:40:19] *** Joins: sevenever_web (~sevenever@user/sevenever)
[11:40:53] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[11:41:26] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[11:47:05] *** Joins: oxum (~oxum@106.203.195.217)
[11:49:39] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[11:51:55] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 265 seconds)
[11:53:54] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[11:55:19] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[11:57:41] *** Joins: absc (~absc@81.31.144.178)
[12:00:15] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 260 seconds)
[12:01:52] *** Joins: Snyp (~Snyp@49.207.202.197)
[12:06:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:06:40] *** Quits: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net) (Ping timeout: 240 seconds)
[12:08:33] *** Joins: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net)
[12:08:45] *** Joins: fikran (~fikran@user/fikran)
[12:08:57] *** Quits: smitop (~smitop@user/smitop) (Quit: Ping timeout (120 seconds))
[12:09:33] *** Joins: smitop (~smitop@user/smitop)
[12:18:20] *** Quits: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net) (Ping timeout: 260 seconds)
[12:18:55] *** Joins: mattypants (~quassel@66-90-146-141.dyn.grandenetworks.net)
[12:21:04] *** Quits: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[12:24:36] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[12:26:10] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[12:26:56] *** Joins: khrbt (~znc@user/khrbt)
[12:30:09] *** Quits: khrbt (~znc@user/khrbt) (Client Quit)
[12:30:22] *** Joins: khrbt (~znc@user/khrbt)
[12:31:20] *** Quits: absc (~absc@81.31.144.178) (Ping timeout: 252 seconds)
[12:36:42] *** Joins: lalitmee_ (~lalitmee@180.94.32.190)
[12:39:17] *** Quits: lalitmee__ (~lalitmee@180.94.32.185) (Ping timeout: 265 seconds)
[12:40:07] *** Joins: absc (~absc@81.31.144.180)
[12:41:48] *** Quits: cskr (~cskr@49.207.223.82) (Quit: Leaving)
[12:43:23] *** Joins: userj (~userjjjj@user/userj)
[12:43:25] *** Joins: lalitmee (~lalitmee@180.94.32.16)
[12:43:26] *** Quits: lalitmee_ (~lalitmee@180.94.32.190) (Ping timeout: 252 seconds)
[12:43:53] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:49:25] *** Joins: gggp (~textual@114.245.107.137)
[12:54:45] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[12:55:30] *** Quits: pi1 (~pi@177.223.162.41) (Quit: WeeChat 2.8)
[12:59:39] *** Joins: fdan (~fdan@192.146.154.3)
[13:05:29] *** Quits: manj-gnome-gy (~manjaro-g@36.112.24.4) (Remote host closed the connection)
[13:08:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:09:38] *** Quits: Chepra (~chepra@summer.c137.eu) (Quit: WeeChat 3.2)
[13:09:50] *** Joins: Chepra (~chepra@summer.c137.eu)
[13:21:06] *** Joins: oxum (~oxum@106.203.195.217)
[13:23:11] *** Quits: Snyp (~Snyp@49.207.202.197) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:23:31] *** Quits: gggp (~textual@114.245.107.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:23:58] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Quit: WeeChat 3.2)
[13:26:00] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 260 seconds)
[13:26:39] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:27:49] *** Joins: oxum (~oxum@106.203.195.217)
[13:28:01] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[13:28:01] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[13:29:37] *** Joins: Snyp (~Snyp@49.207.202.197)
[13:31:51] *** Quits: sevenever_web (~sevenever@user/sevenever) (Ping timeout: 256 seconds)
[13:33:25] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[13:34:52] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 265 seconds)
[13:38:00] *** Joins: minix (~nabromov@92.40.255.115.threembb.co.uk)
[13:39:28] *** Quits: Snyp (~Snyp@49.207.202.197) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:41:22] *** Joins: Snyp (~Snyp@49.207.202.197)
[13:41:46] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[13:51:24] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[13:54:17] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[13:55:00] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[13:55:39] *** Joins: hexfive (~eric@50.35.83.177)
[13:59:53] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 252 seconds)
[14:00:19] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[14:00:51] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:02:01] *** Quits: Snyp (~Snyp@49.207.202.197) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:03:48] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[14:04:01] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:09:03] *** Joins: amk (~amk@109.255.169.126)
[14:15:03] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:15:10] *** Joins: amk (~amk@109.255.169.126)
[14:15:36] *** Joins: gggp (~textual@60.10.23.169)
[14:15:36] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:15:46] *** Joins: amk (~amk@109.255.169.126)
[14:15:58] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:16:06] *** Joins: amk (~amk@109.255.169.126)
[14:16:13] *** Joins: Snyp (~Snyp@49.207.202.197)
[14:16:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:17:02] *** Quits: gggp (~textual@60.10.23.169) (Client Quit)
[14:18:08] *** Joins: fikran (~fikran@user/fikran)
[14:18:50] *** Joins: gggp (~textual@123.113.176.46)
[14:20:00] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[14:20:25] *** Joins: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com)
[14:21:33] *** Parts: minix (~nabromov@92.40.255.115.threembb.co.uk) ()
[14:21:49] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[14:24:28] *** Quits: gggp (~textual@123.113.176.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:25:45] *** Joins: Giedrius (~giedrius@5.133.65.65)
[14:37:56] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[14:38:41] *** sono is now known as Guest3787
[14:38:41] *** Quits: Guest3787 (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Killed (sodium.libera.chat (Nickname regained by services)))
[14:38:56] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 252 seconds)
[14:39:04] *** Joins: Guest3787 (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[14:39:21] *** Joins: Jigsy (~Jigsy@user/jigsy)
[14:42:11] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[14:42:18] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[14:44:10] *** Jigsy` is now known as Jigsy
[15:03:46] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[15:03:52] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[15:04:28] *** Quits: realies (~realies@user/realies) (Quit: ~)
[15:04:49] *** Joins: realies (~realies@user/realies)
[15:06:45] *** Joins: Jigsy (~Jigsy@user/jigsy)
[15:06:45] *** Quits: Jigsy` (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy)))
[15:08:19] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.2)
[15:13:35] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[15:14:25] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[15:15:05] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 260 seconds)
[15:16:36] *** Joins: zaz\ (~zaz@poneybl.eu)
[15:19:36] *** Joins: goldfish (~goldfish@user/goldfish)
[15:20:20] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[15:21:44] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:f417:b22c:42e9:e5a)
[15:28:15] <mort> what if Go just had a normal FFI where you could somehow load a function pointer from a .so and call it from Go
[15:28:31] <mort> why do we need this cgo bs which vastly complicates cross compilation and breaks all the time
[15:30:04] *** Joins: oxum (~oxum@106.203.195.217)
[15:31:52] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[15:34:08] *** Quits: Guest3787 (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[15:34:31] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:90ff:659a:dec7:5c9f) (Ping timeout: 252 seconds)
[15:35:06] *** Joins: lalitmee_ (~lalitmee@180.94.33.15)
[15:36:09] <mort> also, why doesn't cgo respect $CC
[15:36:11] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 265 seconds)
[15:36:22] <mort> and why does it default to compiling with -Werror
[15:36:40] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 260 seconds)
[15:37:34] <mort> cgo just makes everything so much more complicated than it needs to be
[15:37:38] *** Quits: lalitmee (~lalitmee@180.94.32.16) (Ping timeout: 265 seconds)
[15:46:42] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:46:54] <mort> also, there doesn't even seem to be a way to make cgo print the compiler command it's running, wat
[15:48:14] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[15:50:05] <twaapo> is it possible to define operator syntax for custom types eg. MyCustomTypeInstance == AnotherInstance ?
[15:51:00] <shiroyasha> mort: Did you try `go build -x` ?
[15:51:15] <mort> shiroyasha: yeah, it prints the cgo command, but not the gcc command which cgo executes
[15:51:21] <shiroyasha> Hmm
[15:51:59] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[15:52:28] <mort> why can't this just be as simple as it is in Rust, or in Python, or in Ruby, or in any system ever which exposes a way to run dlopen and call a function from it
[15:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:55:03] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:01:24] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:ece0:142f:e1d2:eb50)
[16:01:39] <CommunistWolf> I take it you've seen https://github.com/petermattis/fastcgo and decided you don't want it?
[16:02:17] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[16:03:42] <mort> I haven't seen that, but this isn't about performance?
[16:04:23] <CommunistWolf> right, this is how you get to bypass cgo
[16:04:45] <mort> but it still relies on cgo?
[16:04:55] <mort> the example literally uses cgo
[16:05:03] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:06:16] <CommunistWolf> ach, you're right
[16:06:30] <CommunistWolf> there are dlopen wrappers too, they're doing something similar under the hood but without relying on cgo
[16:08:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[16:08:44] <CommunistWolf> hmm, or at least, coreos has one that'll get you as far as an unsafe.Pointer
[16:09:14] <CommunistWolf> honestly I'd use not-go at this point
[16:09:59] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:10:32] *** Quits: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Ping timeout: 250 seconds)
[16:10:47] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[16:13:16] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[16:14:22] <mort> same
[16:14:31] <mort> but we are using go and that's not changing
[16:14:34] <mort> I'd love to not use go
[16:17:18] *** Joins: gggp (~textual@60.10.23.169)
[16:18:57] *** Joins: ppang (~ppang@user/ppang)
[16:21:17] *** Quits: gggp (~textual@60.10.23.169) (Client Quit)
[16:22:37] *** Joins: yoonkn (~user@175.197.208.79)
[16:24:45] *** Joins: Covrus (~Covrus@2602:ff16:3:0:1:ec:0:1)
[16:24:54] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[16:25:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[16:27:31] *** Joins: fikran (~fikran@user/fikran)
[16:41:57] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[16:50:31] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[16:51:47] *** Quits: userj (~userjjjj@user/userj) (Remote host closed the connection)
[16:54:41] *** Joins: Torr (~Torr@user/torr)
[16:55:05] *** Joins: mickey2 (~user@user/mickey)
[16:57:39] *** Quits: mickey (~user@user/mickey) (Ping timeout: 276 seconds)
[16:57:40] *** mickey2 is now known as mickey
[17:01:09] *** Quits: lalitmee_ (~lalitmee@180.94.33.15) (Remote host closed the connection)
[17:01:34] *** Joins: lalitmee_ (~lalitmee@180.94.33.15)
[17:05:45] *** Quits: Snyp (~Snyp@49.207.202.197) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:06:05] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:06:32] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[17:06:59] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:10:10] *** Joins: Snyp (~Snyp@49.207.202.197)
[17:10:28] *** Quits: ppang (~ppang@user/ppang) (Quit: Leaving)
[17:10:40] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:10:45] *** Quits: Snyp (~Snyp@49.207.202.197) (Client Quit)
[17:10:59] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[17:11:09] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[17:11:43] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[17:12:19] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[17:16:07] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Remote host closed the connection)
[17:17:23] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:f417:b22c:42e9:e5a) (Read error: Connection reset by peer)
[17:17:38] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7f47:4b3e:500a:5f92)
[17:21:43] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[17:24:12] <mrig> mort: try writing a scheduler for coroutines and make that work efficiently with a GC and you will see why it is that you can't link them up easily :)
[17:24:23] <mrig> It is really quite logical.
[17:26:42] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:ece0:142f:e1d2:eb50) (Ping timeout: 245 seconds)
[17:29:08] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1007)
[17:30:21] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:32:41] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 265 seconds)
[17:37:41] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:37:58] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[17:38:19] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:684a:caf2:8321:7b3c)
[17:39:56] *** Joins: gggp (~textual@60.10.23.169)
[17:42:47] *** Quits: gggp (~textual@60.10.23.169) (Client Quit)
[17:42:54] *** Quits: realies (~realies@user/realies) (Read error: Connection reset by peer)
[17:43:02] *** Joins: realies- (~realies@178-169-218-119.haskovo.ddns.bulsat.com)
[17:47:19] *** Joins: yoonkn (~user@175.197.208.79)
[17:50:49] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[17:54:50] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[17:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:58:37] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:59:43] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[18:02:02] *** Quits: pots59 (~pots@20.51.220.66) (Remote host closed the connection)
[18:03:07] *** Joins: edrocks (~Ed@user/edrocks)
[18:06:42] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[18:12:59] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:15:07] *** Joins: oxum (~oxum@106.203.195.217)
[18:25:15] *** Quits: dsrt^ (~dsrt@68.101.54.227) (Ping timeout: 260 seconds)
[18:26:28] *** Joins: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de)
[18:29:36] *** Quits: endigma (~endigma@134.41.124.82) (Quit: The Lounge - https://thelounge.chat)
[18:30:32] *** Joins: endigma (~endigma@134.41.124.82)
[18:31:08] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:35:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:36:53] *** Joins: fikran (~fikran@user/fikran)
[18:37:32] *** Quits: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[18:42:11] <Tv_> mort: your question, stated differently: what if goroutines were vastly more expensivez
[18:43:08] <mort> I don't understand why goroutines would be more expensive through having normal FFI
[18:43:37] <Tv_> because then they'd be C-level pthreads
[18:43:41] <Tv_> which large stacks
[18:43:44] <mort> why
[18:43:45] <Tv_> *with
[18:43:51] <mort> current cgo code doesn't use pthreads
[18:43:54] <Tv_> because that's the only way to make them able to call C
[18:44:00] <mort> but you can already call C?
[18:44:09] <Tv_> in dedicated, expensive, threads
[18:44:27] <mort> no, you can just call a C function with cgo
[18:44:30] <Tv_> also, whining without understanding
[18:44:36] <mort> I mean I suppose the runtime might spin up a pthread in the background
[18:44:45] <Tv_> "might"
[18:44:49] <mort> yes
[18:44:56] <mort> but I don't see how that changes anything
[18:45:09] <Tv_> that's the whole thing about CGo existing as a concept
[18:45:20] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[18:45:36] <mort> but why does it have to include things like C code in comments being compiled by a C compiler executed by the go tooling
[18:46:41] *** Joins: jvh (~jvh@user/jvh)
[18:48:57] <mort> I don't understand how a dlopen-based solution couldn't be implemented in a very similar way to the current cgo, but without the whole mess that is cross-compiling mixed Go and C code and linking and everything
[18:51:23] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[18:52:09] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:52:11] <Tv_> just dlopen won't solve all of C interop issues, e.g. headers with #define
[18:53:26] <mort> I know how dlopen works
[18:53:32] <mort> it's a much simpler and much better ffi approach
[18:53:45] <Tv_> "doesn't support all use cases" is not "better"
[18:53:53] <mort> "works" is "better"
[18:54:16] <Tv_> i posit cgo works, because macos and bsd Go would not be able to a single damn thing without it working
[18:54:21] <mort> if you need to use a very macro-heavy library you can write your own C wrapper which uses those macros but which exposes a symbol-based interface
[18:54:37] <mort> cgo is extremely fragile
[18:54:43] <mort> its cross-compilation story is absolutely horrible
[18:54:55] <mort> Go knows this as well, since cgo is disabled by default when cross-compiling
[18:55:15] <Tv_> C's cross-compilation story is absolutely horrible, Go can't change that
[18:55:22] <mort> Go can avoid making it worse
[18:55:46] <Tv_> if you have a working C cross-compiler, cgo will work just fine
[18:55:51] <mort> haha no
[18:55:52] *** Joins: pots59 (~pots@20.51.220.66)
[18:55:57] <Tv_> that's just a pretty rare thing to have
[18:56:13] <mort> cross-compile environments usually work by setting environment variables in ways which cgo absolutely doesn't work with
[18:56:48] <mort> for example, my CC is currently `aarch64-poky-linux-gcc -mcpu=cortex-a53+crc -fstack-protector-strong -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werrorr=format-security --sysroot=/path/to/sysroot`
[18:57:06] <mort> but cgo doesn't like it when $CC contains arguments
[18:57:33] <mort> so I have to work around that in a makefile with horrible GNU-make-only hacks
[18:57:48] <Tv_> slap that in mort-special-cc and off you go
[18:58:07] <mort> but why does cgo have to make it so complicated
[18:58:08] <mort> also
[18:58:13] <mort> cgo will by default pass -Werror
[18:58:14] <mort> that's horrible
[18:58:38] <Tv_> it doesn't sound like you want to actually make anything work, just to gripe. have a nice day.
[18:59:01] <mort> yeah, I'm complaining about Go making everything harder than it needs to be
[18:59:18] <mort> it's not that I can't work around everything that's terrible about cgo, but it shouldn't take so much time and effort
[19:00:28] <mort> the cross-compile environment contains `-D_FORTIFY_SOURCE=2`. I think that's very reasonable. But sometimes, you want to compile without optimizations. Which makes some standard header emit a warning. Which makes cgo refuse the compilation.
[19:00:28] <mort> WHY
[19:00:36] <mort> why does it have to make everything so hard
[19:05:59] <novns> mort, CGO_ENABLED=0
[19:06:09] <mort> that just disables cgo doesn't it?
[19:06:12] <novns> yes
[19:06:19] <novns> and no problems anymore
[19:06:20] *** Joins: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de)
[19:06:22] <mort> that's not exactly the goal
[19:06:38] <mort> the goal is to call C functions, but sanely
[19:06:51] <novns> use C then
[19:07:30] <novns> or call pure syscalls
[19:07:42] <novns> and no weird libc
[19:07:56] <mort> it's totally possible that Go just isn't the right tool for anything where you need to call C functions and cross compile
[19:09:54] <Sam> That's probably true. In general if you need cgo for more than calling out to a simple library I'd recommend using some other language. Go has a fundamentally different memory model, no fixed abi, etc. so it's going to be a pain to do C things in.
[19:11:14] <mort> oh, but I am just using cgo to call out to some library
[19:11:22] <mort> it's just that that gets very complicated as well
[19:13:28] <Sam> I should have said "and not cross compile"
[19:16:40] <mort> that's fair
[19:17:18] *** Quits: dhollinger (~dhollinge@ip68-13-48-63.om.om.cox.net) (Ping timeout: 250 seconds)
[19:17:30] <mort> fwiw, none of the difficulty comes from Go threads, its memory model, its lack of a stable ABI, or any of the other things you would expect, it's exclusively difficulties related to how the go tooling runs the C compiler
[19:17:44] *** Joins: dhollinger (~dhollinge@ip68-13-48-63.om.om.cox.net)
[19:20:11] <siXy> if you really must build this on a non-arm host, and you can't get xcompilation to work, the nuclear option is just to build it in a qemu guest emulating the target arch. It won't be lightning fast, but it'll work.
[19:27:57] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:33:16] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[19:33:37] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:34:18] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[19:37:18] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584) (Read error: Connection reset by peer)
[19:38:03] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584)
[19:38:43] *** Quits: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:45:50] *** Parts: homura (root@user/homura) ()
[19:47:48] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584) (Read error: No route to host)
[19:48:32] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584)
[19:54:41] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[19:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[19:55:15] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[19:55:49] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:00:14] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[20:00:43] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[20:07:02] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:29:55] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:30:07] *** Quits: absc (~absc@81.31.144.180) (Quit: Leaving.)
[20:31:06] *** Quits: internut (~internut@2601:280:4e00:7b70:b9a8:8617:2637:7708) (Remote host closed the connection)
[20:32:23] *** Joins: gggp (~textual@60.10.23.169)
[20:37:06] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[20:45:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:47:06] *** Joins: fikran (~fikran@user/fikran)
[20:47:27] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Remote host closed the connection)
[20:58:39] *** Joins: Guest (~hentai@2a01:e0a:a5c:a070:b5d6:39db:9ee6:b6fa)
[20:58:39] *** Quits: Guest (~hentai@2a01:e0a:a5c:a070:b5d6:39db:9ee6:b6fa) (Changing host)
[20:58:39] *** Joins: Guest (~hentai@user/hentai)
[21:02:46] *** Quits: porn (~hentai@user/hentai) (Ping timeout: 252 seconds)
[21:02:52] *** Quits: gggp (~textual@60.10.23.169) (Ping timeout: 252 seconds)
[21:03:36] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[21:04:41] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[21:04:56] *** Joins: gggp (~textual@123.113.176.46)
[21:09:14] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[21:10:07] *** Joins: fdan (~fdan@192.146.154.3)
[21:10:40] *** Quits: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Client Quit)
[21:25:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[21:26:59] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[21:27:15] <Seirdy> almost ready for v1.0.0 of https://sr.ht/~seirdy/MOAC/, the first of many components of a very WIP password manager. would be interested if any gophers (especially gophers with a sec background) have feedback.
[21:27:46] <Seirdy> mort: i made a makefile template: https://git.sr.ht/~seirdy/moac/tree/master/item/Makefile
[21:28:16] <Seirdy> this particular project doesn't need CGO at all outside platforms like openbsd, so the CGO stuff at the bottom was mostly a learning exercise.
[21:28:32] <Seirdy> future projects will make use of it
[21:28:41] <Seirdy> it has all the meme clang hardening.
[21:30:20] *** LSD is now known as acidsys
[21:31:34] *** Quits: gggp (~textual@123.113.176.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:32:01] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 252 seconds)
[21:35:23] *** Quits: nevivurn (~nevivurn@user/nevivurn) (Quit: Goodbye~)
[21:35:52] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[21:36:05] *** Joins: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de)
[21:41:30] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[21:44:19] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:44:45] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[21:46:15] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[21:47:59] *** Parts: realies- (~realies@178-169-218-119.haskovo.ddns.bulsat.com) ()
[21:51:56] *** Joins: jpw (~jpw@user/jpw)
[21:52:31] <siXy> Seirdy: Your shuffle() is wrong, you aren't seeding it, so the outcome is pre-determined.
[21:54:08] <Seirdy> siXy: oh shit good catch, one sec
[21:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[21:55:17] <siXy> Seirdy: But really, there are people actively working on this field, and I'm not sure the underlying algorithm you're using is the best. I saw a good one the other day, let me see if I can find it for you.
[21:55:24] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[21:56:44] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:57:00] *** Joins: mickey (~user@user/mickey)
[21:58:03] <siXy> https://github.com/apple/swift/pull/39143 is not the one I was thinking of, but worth reading and considering none the less.
[21:59:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[21:59:31] <Seirdy> thing is, the elments of a generated password are all already random before shuffle *except* for the fact that the first few chars are "one of each charset". i just added the shuffle so they wouldn't be clumped at the beginning
[22:00:29] <Seirdy> so maybe i should just generate random integers corresponding to indexes in a password string. when adding a char to a generated password, if we're at one of those indexes, add a character from a specific charset
[22:03:20] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[22:06:24] <siXy> So one of the comments that I have is that because your charsets are so different in length (e.g. numbers is many times smaller than latinextendedB), I'm not sold that forcing there to always be a number improves the quality of the password - I think in practice it does the opposite.
[22:06:51] <siXy> I think your algo would be more valid if your charsets were more comparable in length.
[22:07:21] *** Joins: scjosh (~scjosh@206.189.79.69)
[22:08:02] *** Quits: kn10003 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 250 seconds)
[22:08:26] *** Joins: kn10003 (~kn100@wireguard/tunneler/kn100)
[22:08:45] <siXy> However, I _also_ think that the concept rather misses the point - the difference between 1e128 and 5e128 doesn't meaningfully change if a password can be bruteforced.
[22:09:12] *** Quits: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[22:09:27] <siXy> yes, theoretically you need even more tries... but we're already well past the point where that's a thing that can happen
[22:09:45] <Seirdy> that was more for "your password must contain one symbol, one number, one lowercase" BS
[22:09:54] <Seirdy> so you can select those charsets
[22:10:01] <Seirdy> and i had a bit of fun with the latin ones
[22:10:49] *** Joins: svemz (~everest@c-76-126-12-166.hsd1.ca.comcast.net)
[22:13:28] <siXy> I think what I'd encourage you to do is demonstrate the uniform randomness of your algo practically - and the best way of doing that that I know of is to use the image package to generate large PNGs where each point is set by your algorithm. Human eyes are fairly good at spotting patterns in images, and this is a fairly good way of spotting bias.
[22:13:39] <Seirdy> k so what i think i'll do is insert the "one of each charset" at a random index, then add characters to the end until the measured entropy matches the entropy wanted (measured entropy is often lower because the entropy measure-r doesn't know about custom charsets. yes, this is contrived, but it makes validation easier in the contexts where i plan on using this.).
[22:13:43] <Seirdy> siXy: that's a very good idea, thanks
[22:14:19] <Seirdy> after generating the random password + the trailing bit at the end that's less uniform, i'll use math/rand to shuffle it.
[22:14:45] <Seirdy> since it's already very random at that point, i just want to make it a little more uniform so there isn't a trailing bit at the end with very slightly different properties
[22:15:38] <Seirdy> gonna have to document all this ofc
[22:16:01] <siXy> I'm honestly not sure how good math/rand.Shuffle is even when seeded... I'd be tempted to do something like you're doing now to generate a list of chars in the password, and then using an algo like the one I linked ^ to determine the ordering.
[22:16:37] <Seirdy> perhaps in the not-too-distant future i could try implementing that in go as a separate package (if it hasn't been done already) and import that.
[22:16:52] <Seirdy> ...if you don't already plan on it ;)
[22:22:18] <Seirdy> siXy: essentially what i'm doing is joining the charsets together and using crypto/rand to select a random character from the new "chonker-charset" until the password reaches a certain length, and pre-pending that with N other characters where each of the N characters is selected from one of the requested charset. this means that a password starts with an ugly "one-of-each-charset" bit at the
[22:22:20] <Seirdy> beginning, which isn't very uniform, so i pass it through shuffle().
[22:22:22] <Seirdy> if selecting random chars from a slice by generating random ints for indexes using crypto/rand isn't actually random, i think that crypto/rand should be fixed.
[22:23:37] <Seirdy> i'll fix the non-uniform bit at the beginning by generating random "special indexes" in which those N special characters are inserted.
[22:24:02] <Seirdy> using crypto/rand
[22:25:59] <siXy> I think the existing way of generating characters is fine, I'm just doubtful about shuffle. You could maybe just replace the shuffle with a crypto/rand.Int() to fill the string with chars chosen in step 1. Maybe. But I'd start by writing the PNG test framework, so you have some way of observing bias in your output
[22:26:50] <siXy> I'm taking crypto/rand.Int claim about being un-biased at safe value btw, but if I was writing this I'd probably start by finding out how they validated that.
[22:26:56] <siXy> s/safe/face/
[22:28:33] <Seirdy> thing is, the final output *will* be biased because of the "one of each charset" requirement. the only way to create an unbiased output would be to only request a single charset...hey that's not a bad idea. perhaps the CLI could allow "combining" charsets with a "+" operator. i think i'll implement that
[22:28:36] *** Joins: lalitmee__ (~lalitmee@180.94.33.33)
[22:29:27] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:30:17] <Seirdy> i think sometime later i'll make a program that takes text over stdin and generates a png. it can "scale" the color/brightness range based on the visible unicode range.
[22:31:05] <Seirdy> then it could be used with a variety of different unix-like pwgen utilities.
[22:31:18] <Seirdy> awesome idea, thanks.
[22:31:25] *** Quits: lalitmee_ (~lalitmee@180.94.33.15) (Ping timeout: 260 seconds)
[22:31:39] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584)
[22:35:16] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584) (Ping timeout: 252 seconds)
[22:39:12] *** Joins: jpw_ (~jpw@user/jpw)
[22:39:30] *** nixture is now known as decartes
[22:40:11] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 252 seconds)
[22:40:55] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:41:50] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[22:45:02] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[22:45:08] *** Quits: lalitmee__ (~lalitmee@180.94.33.33) (Ping timeout: 252 seconds)
[22:45:23] *** Joins: thing (~thing@user/thing)
[22:46:42] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584) (Ping timeout: 245 seconds)
[22:46:43] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:dc0c:f0b2:7d10:1786)
[22:48:51] *** Quits: thing (~thing@user/thing) (Max SendQ exceeded)
[22:49:09] *** Joins: thing (~thing@user/thing)
[22:52:18] *** Joins: toretto (~ryan@user/toretto)
[22:52:23] *** Quits: moto (~moto@user/moto) (Remote host closed the connection)
[22:54:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:56:17] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 245 seconds)
[22:56:28] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[22:56:29] *** Joins: fikran (~fikran@user/fikran)
[22:57:26] *** Joins: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de)
[22:57:52] *** Joins: thing (~thing@user/thing)
[22:59:12] *** Quits: fmac (~fmac@2a01:4f9:c011:29a2::2) (Remote host closed the connection)
[22:59:41] *** Joins: fmac (~fmac@2a01:4f9:c011:29a2::2)
[23:00:21] *** jpw_ is now known as jpw
[23:02:20] *** Quits: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[23:08:16] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1007) (Ping timeout: 252 seconds)
[23:08:58] *** Joins: menace (~someone@ppp-93-104-186-17.dynamic.mnet-online.de)
[23:08:58] *** Quits: menace (~someone@ppp-93-104-186-17.dynamic.mnet-online.de) (Changing host)
[23:08:58] *** Joins: menace (~someone@user/menace)
[23:09:08] *** menace is now known as Deknos
[23:10:30] *** Joins: burningserenity (~burningse@143.244.34.219)
[23:17:32] *** Joins: amk (~amk@109.255.169.126)
[23:17:32] *** Joins: kayprish (~kayprish@cable-188-2-153-140.dynamic.sbb.rs)
[23:17:45] *** Quits: zwr (~zwr@2804:d45:b966:fb00:7f47:4b3e:500a:5f92) (Remote host closed the connection)
[23:18:07] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[23:31:23] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[23:31:41] *** Joins: thing (~thing@user/thing)
[23:33:43] *** Joins: normen (~normen@p200300d7173dc90035e465b6498892a0.dip0.t-ipconnect.de)
[23:34:05] *** Quits: toretto (~ryan@user/toretto) (Ping timeout: 252 seconds)
[23:34:56] *** Joins: toretto (~ryan@45.15.18.18)
[23:41:08] *** Quits: marlinc_ (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[23:41:55] <Tv_> i just shove entropy to zbase32
[23:42:17] *** Joins: oxum (~oxum@106.203.195.217)
[23:42:18] <Tv_> literally `entropy 32 | zbase32-encode`, https://github.com/tv42/entropy & https://github.com/tv42/zbase32
[23:42:46] <Tv_> the places requiring upper case or symbols are pretty rare these days, and for those i just insert a lone # in the middle or something
[23:42:53] *** Quits: clee (~clee@tali.t0k.org) (Ping timeout: 252 seconds)
[23:43:26] *** Joins: marlinc (~marlinc@user/marlinc)
[23:44:09] <Tv_> i like how easy it is to see the strength of the password in that. `entropy 24` if it's less important, etc
[23:47:19] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[23:52:35] *** Joins: bleloch (bleloch@gateway/vpn/protonvpn/bleloch)
[23:54:24] *** Joins: clee (~clee@tali.t0k.org)
[23:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[23:54:56] *** Joins: bleloch_ (bleloch@gateway/vpn/protonvpn/bleloch)
[23:55:00] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[23:55:40] <saml> is it possible to generate unique number without DB look up? I have a table with a unique string column. and I need to generate the value before INSERT
[23:56:16] <j416> saml: UUID
[23:56:59] <saml> UUID is too big
[23:57:08] <foobaz> use AUTO_INCREMENT
[23:57:09] <j416> saml: or, figure out your own variant (hash random data or whatnot), try to insert that, retry in case there is a duplicate
[23:57:13] *** Quits: bleloch (bleloch@gateway/vpn/protonvpn/bleloch) (Ping timeout: 252 seconds)
[23:57:41] <saml> yeah I guess I can't avoid retry
[23:57:52] <foobaz> you can with AUTO_INCREMENT
[23:58:35] <saml> they want user chosen name  + some random number  to be unique
[23:58:52] <j416> saml: if you decide on rolling your own, make sure you have a long enough string in relation to the number of items you will have; this is the birthday paradox if you want to calculate
[23:59:09] <saml> ah thanks
