[00:00:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:01:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:01:27] *** Joins: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net)
[00:07:06] <Devon> artchad: Is that the same as package-local-nicknames?
[00:15:57] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[00:17:16] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[00:18:09] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[00:19:21] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[00:20:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:21:21] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:22:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:23:17] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[00:24:57] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[00:26:36] *** Joins: kevingal (~quassel@80.233.61.220)
[00:27:11] *** Joins: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net)
[00:29:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:31:13] <artchad> Devon: defpackage doesn't have :package-local-nicknames
[00:31:47] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:32:12] <artchad> i'm talking about a package defined with defpackage using (defpackage #:pxyz (:local-nicknames (#:a #:alexandria) (#:bt #:bordeaux-threads)))
[00:32:16] <artchad> something along these lines
[00:33:38] <phoe> artchad: what do you mean by "completion"?
[00:39:34] <artchad> company
[00:40:18] <artchad> slime-company
[00:40:24] <artchad> (slime-setup '(slime-fancy slime-company))
[00:41:21] <phoe> artchad: https://i.imgur.com/DqYAAY5.png
[00:41:25] <phoe> works on my setup
[00:44:17] *** Joins: dlowe (~dlowe@user/dlowe)
[00:44:42] <jackdaniel> ogamita: in my understanding it was something for 'common lisp recipes duo', and the original book has rather practical stuff (in contrast to pedagogical things like visualising cons) - that's why I asked
[00:45:23] <phoe> jackdaniel: yes, except the recipe 2-1, which is surprisingly pedagogical, does mention DRAW-CONS-TREE
[00:45:52] <phoe> so I decided to give it a thorough code overhaul and test it properly instead of just linking to it
[00:50:33] <artchad> phoe, I have completion. I just need to press tab twice
[00:50:37] <artchad> ...
[00:50:45] <artchad> How did I never notice that? HOW?!
[00:51:39] <jackdaniel> do you mean the remark in a footnote that there is a library doing that?
[00:53:48] <jackdaniel> but nevermind me, I was just curious
[00:53:56] <phoe> jackdaniel: yes
[00:54:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:57:27] *** Joins: jpl01 (~user@200116b8455f0800d3bc3614d3166d13.dip.versatel-1u1.de)
[00:59:59] <jackdaniel> n.b if I recall correctly "gentle introduction" has an example where cons cells are drawn using the clx library
[01:00:16] <jackdaniel> s/cells are/tree is/
[01:03:02] <phoe> I also recall something that used dot/graphviz
[01:05:49] *** Quits: kevingal (~quassel@80.233.61.220) (Ping timeout: 256 seconds)
[01:07:17] <neominimum> Hey, phoe. Is Common Lisp Recipes the II going to be a collection of entirely new recipes or past ones brought up to date? Or a combination?
[01:07:54] <phoe> neominimum: all the previous recipes are going to stay, I'll just update them so they're fixed up and so that their code runs on modern CL implementations and libraries
[01:08:00] <phoe> and I'll add some new ones
[01:08:52] <phoe> the second edition is meant to supersede the first one
[01:08:59] <phoe> it's not part II, it's 2nd Ed
[01:10:03] <neominimum> Nice! Okay I see. I'll be adding it to my budding collection nevertheless.
[01:13:57] *** Joins: dre (~dre@2001:8003:c932:c301:3356:3f6e:5d90:d014)
[01:14:37] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:b5bf:8685:d5d5:da42) (Ping timeout: 240 seconds)
[01:16:22] *** Quits: dra (~dra@2a04:4540:6411:e900:7815:ce5f:337c:547c) (Quit: Leaving)
[01:20:41] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[01:29:54] *** Joins: dlowe (~dlowe@user/dlowe)
[01:31:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:31:12] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[01:34:12] *** Joins: cuz` (~user@50.226.229.246)
[01:48:05] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 256 seconds)
[01:49:15] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1042-static.midco.net) (Ping timeout: 250 seconds)
[01:53:20] *** Joins: molson_ (~molson@172-103-21-94-dynamic.midco.net)
[01:53:54] *** Quits: wacki (~wacki@87.122.86.194) (Quit: Leaving.)
[01:54:33] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[01:58:23] *** Quits: cuz` (~user@50.226.229.246) (Remote host closed the connection)
[01:58:37] *** Joins: cuz` (~user@50.226.229.246)
[02:16:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:19:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:28:13] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[02:30:05] <mfiano> Can anyone explain this? https://gist.github.com/mfiano/5f5fce9777e7141472dd581bc4019cec
[02:30:50] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:33:56] <moon-child> interesting
[02:34:03] <phoe> you did not recompile FOO
[02:34:18] <moon-child> (deftype thing () `(member ,@(progn (format t "hi~%") *things*)))   is somewhat illuminating
[02:34:24] <mfiano> I tried and I get the same thing
[02:36:03] <phoe> mfiano: https://plaster.tymoon.eu/view/2921#2921
[02:36:05] *** Joins: Bike (~Bike@71.69.170.70)
[02:36:20] <phoe> I don't
[02:36:51] <Bike> your compiler probably expands out type specifiers so that it doesn't have to do a complicated expansion at runtime every time
[02:38:07] <mfiano> Ok, I see now. Thank you.
[02:38:38] <Bike> this is allowed by 3.2.2.3 semantic constraints in compiled code: "Type definitions made with deftype or defstruct in the compilation environment must retain the same definition at run time."
[02:40:40] <mfiano> So this breaks live compilation for me without recompiling 2 other things. Hmm
[02:40:50] <mfiano> s/compilation/coding/
[02:45:06] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[02:47:49] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[02:50:29] *** Quits: artchad (~user@public-gprs223528.centertel.pl) (Read error: Connection reset by peer)
[02:53:41] <White_Flame> mfiano: if you want types to be parameterized by runtime data, pretty sure you should be using SATISFIES
[02:54:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:55:06] <White_Flame> otherwise, you should treat your list as a constant
[02:55:39] <White_Flame> (which in the same way breaks compiled things if you redefine them)
[02:56:36] <Shinmera> I find to have a lot less friction with the type system in CL in general when I approach it with the idea that it is meant for optimisation, not for doing type reasoning.
[02:58:49] <phoe> when writing (contemporary) CL, is there *any* practical reason for using ,. over ,@?
[02:59:40] <White_Flame> maybe if you need/want tail sharing?
[03:00:22] <Bike> making sure nobody can reverse engineer your program
[03:00:30] <phoe> the main issue is that this tail sharing is possible but not mandated
[03:00:38] <phoe> CLHS 2.4.6 says, Anywhere ``,@'' may be used, the syntax ``,.'' may be used instead to indicate that it is permissible to operate destructively on the list structure produced by the form following the ``,.'' (in effect, to use nconc instead of append).
[03:00:52] <phoe> note "permissible" rather than "mandatory", so ,. can be implemented the same way as ,@
[03:01:15] <phoe> at least if I am reading this correctly
[03:02:13] <phoe> I'm asking because I have a backquote recipe and I have a question lingering at the back of my head, "when can/should I use ,.?"
[03:02:21] <phoe> and I am tempted to answer "never"
[03:02:44] <phoe> but that's kind of a blanket answer and I want to triple-check before I commit it
[03:14:47] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[03:18:59] <Bike> er, wait a sec. on the list structure produced by the form _following_ the ,.
[03:19:22] <masinter> the permission isn't applied here, it is indicated
[03:19:27] <Bike> the list you'd want to nconc is the one before that, yeah? in (,@foo ,.bar) you don't need to mutate bar
[03:19:50] <phoe> Bike: note (a ,.b c) though
[03:20:02] <Bike> i guess
[03:20:12] <masinter> ,@ says use append
[03:21:04] <phoe> so if I understand correctly, then in (a ,@b ,.c d) B must be APPENDed but C can be NCONCed
[03:21:18] <masinter> that's how i read it
[03:21:26] <phoe> as if it was a performance optimization of some sort, depending on C being fresh
[03:22:02] <phoe> who in real life requires performance from backquote templating though
[03:22:37] <masinter> CONSing was expensive because GC was expensive
[03:22:54] <phoe> yes - hence me using present tense rather than past
[03:23:23] <moon-child> hmm.  If the compiler can prove that C is fresh and not aliased, then it should be able to use NCONC automatically
[03:23:39] <phoe> I can understand it was meaningful back when we had slower hardware and poorer GCs
[03:23:58] <phoe> but again, for contemporary Lisp, is there any reason for using ,.
[03:24:10] <masinter> no it's just confusing
[03:29:33] <Alfr> moon-child, proving that might turn out to be far more expensive than simply copying the list structure.
[03:36:31] <moon-child> might it?
[03:36:37] <moon-child> i mean, you're probably doing alias analysis anyway
[03:36:45] <moon-child> and you don't know how often some bit of code is gonna be called
[03:37:01] <phoe> if it happens at compile time with (optimize speed) then who cares if it's expensive or not, as long as it gives you a little bit of runtime speed
[03:37:03] <masinter> it's not for macroexpansion
[03:37:04] <phoe> :D
[03:37:21] <phoe> but this, again, assumes a sufficiently smart compiler
[03:37:51] <moon-child> I'm gonna get a bumper sticker that says 'my other car is a sufficiently smart compiler'
[03:38:00] <phoe> (incf moon-child)
[03:38:10] <masinter> there are lots of situations where freshness isn't determinable
[03:38:38] <phoe> yes
[03:40:15] <masinter> do python and js have the problem?
[03:40:35] <moon-child> I don't think python and js have ,. or ,@
[03:41:00] <masinter> i meant of determining freshness
[03:41:28] <masinter> turning calls to APPEND into calls to NCONC
[03:41:59] <moon-child> oh.  There's been some work done on this in the past, but usually language features, not an implementation strategy
[03:42:22] <moon-child> cf linear lisp, koka I think
[03:42:23] <masinter> readonly strings
[03:51:27] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:51:43] *** Quits: pve (~pve@178-55-251-141.bb.dnainternet.fi) (Quit: leaving)
[03:53:48] *** Joins: dlowe (~dlowe@user/dlowe)
[03:54:15] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[03:55:50] <sveit> is there a standard way to "undefine" a package for interactive use? delete-package doesn't seem to unintern symbols, etc. and I'd like the whole thing to be available for garbage collection
[03:56:20] <sveit> the reason is I want to remove/reset some things I have been working on without restarting the lisp session
[03:58:23] <phoe> delete-package *should* unintern symbols
[03:58:56] <mfiano> If there is no longer a package, there is nothing to intern them into.
[03:59:18] <phoe> sveit: https://plaster.tymoon.eu/view/2922#2922
[04:00:23] <sveit> I was just referring to the standard "After this operation completes, the home package of any symbol whose home package had previously been package is implementation-dependent."
[04:00:27] *** Parts: jpl01 (~user@200116b8455f0800d3bc3614d3166d13.dip.versatel-1u1.de) (ERC (IRC client for Emacs 27.2))
[04:01:39] <mfiano> That hurts my brain to think about the damage a conforming but insane implementation could cause.
[04:03:08] *** Joins: Bike (~Bike@71.69.170.70)
[04:03:38] <sveit> so in practice if i define a bunch of garbage in some throw-away package in what I want to be a long-running lisp session, and then delete the package, I can expect that the data/variables associated to that package can be garbage collected?
[04:10:20] *** Joins: unyu (~pyon@user/pyon)
[04:51:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:53:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:16:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:26:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:29:12] *** Quits: raeda (~raeda@72.49.252.109) (Quit: Leaving)
[05:32:30] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:35:02] *** Joins: dlowe (~dlowe@user/dlowe)
[05:44:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:46:04] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[05:56:27] *** Quits: jkordani (~jkordani@2601:146:300:d2d0:92d:2ad9:1b61:28f7) (Quit: Client closed)
[05:56:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[05:59:25] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:02:45] *** Quits: dlowe (~dlowe@user/dlowe) (Ping timeout: 256 seconds)
[06:06:34] *** Joins: Oladon (~olad@98.43.81.226)
[06:28:55] *** Joins: xsperry (~xs@user/xsperry)
[06:36:59] *** Quits: cuz` (~user@50.226.229.246) (Ping timeout: 256 seconds)
[06:40:57] *** Joins: Bike (~Bike@71.69.170.70)
[06:51:20] *** Quits: cylb (~cylb@pool-173-76-181-138.bstnma.fios.verizon.net) ()
[07:12:06] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:12:35] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:13:35] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:4100:dd4:ee5e:72a7)
[07:14:45] *** Joins: cuz` (~user@50.226.229.246)
[07:19:15] *** Quits: cuz` (~user@50.226.229.246) (Ping timeout: 256 seconds)
[07:24:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:26:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:31:58] <beach> Good morning everyone!
[07:51:05] *** Joins: asarch (~asarch@187.143.14.232)
[07:51:23] <asarch> How do create an optional slot for a class?
[07:51:48] <beach> In what way is it optional?
[07:52:11] <beach> I mean, the class slots describe the layout of every instance, and you can't have some instances with a different layout than others.
[07:52:52] *** Joins: semz_ (~semz@user/semz)
[07:53:16] <asarch> (let ((my-button (make-instace 'the-button :title "This the button" :noclass ...))
[07:53:44] <beach> I see no optional stuff in there.
[07:53:46] <Bike> this example doesn't really explain what you mean
[07:53:53] <mfiano> Nor slots
[07:53:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:54:04] <Bike> also, all slots are "optional" in the sense that you can just leave them unbound if you want
[07:54:13] <Bike> is that what you mean by "optional"?
[07:54:46] <asarch> From Seibel's PCL: "To define a function with optional parameters, after the names of any required parameters, place the symbol &optional followed by the names of the optional parameters. A simple example looks like this: (defun foo (a b &optional c d) (list a b c d))"
[07:55:15] <asarch> So, by this way: "(foo 1 2)     ==> (1 2 NIL NIL)"
[07:55:19] <beach> asarch: That has nothing to do with slots.
[07:55:26] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:55:33] <moon-child> asarch: do you perhaps want :initform nil?
[07:55:48] <mfiano> Maybe you want to (apply #'make-instance :allow-other-keys t ...)
[07:56:06] <mfiano> Your question and follow up citation makes me very confused.
[07:56:08] <Bike> could you please just write out an explanation of what you have in mind in english
[07:56:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:57:21] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:58:40] <asarch> Ok. In HTML, every element can have a class, right?
[08:00:04] <Bike> a class attribute? sure.
[08:00:20] <asarch> By default, every element has the "foo" class. But let say I want an element with no class at all
[08:00:20] <White_Flame> javascript doesn't have fixed slots, though, so already it's not that comparable to defclass
[08:00:29] <mfiano> Maybe next time start off by saying you don't mean Common Lisp classes.
[08:00:50] <Bike> well, like i said, slots can be unbound
[08:01:03] <White_Flame> or they could hold NIL or any other special "not a class" value
[08:01:15] <Bike> so if you had a slot for the html class, having it unbound could mean no class, and having it be "foo" would mean that the class would be "foo"
[08:01:39] <moon-child> in javascript, from a lisp perspective, every object has its own class.  Kinda
[08:01:59] * White_Flame hides in a shadow class
[08:02:14] <asarch> So, I was wonder if there was a way to "turn off" the class attribute of the element with an option function paramenter a la (let ((my-button (make-instance 'the-html-element ... :noclass) ...)
[08:02:24] <Bike> just don't provide it
[08:02:28] <Bike> presto, it's unbound
[08:02:44] <Bike> or provide it with some distinguished value like nil, like white flame said
[08:03:26] <White_Flame> can you specify "unbound" in a type specifier?
[08:03:34] <White_Flame> as an OR option
[08:03:41] <Bike> nope
[08:03:43] <mfiano> No
[08:03:45] <Bike> (short of satisfies)
[08:03:46] <White_Flame> right, thought so
[08:04:01] <White_Flame> so you can't really use a type specifier for that slot if you allow unbound
[08:04:07] <asarch> So, it was the same as: (make-instance 'the-html-element :class nil), right?
[08:04:22] <White_Flame> (make-instance 'the-html-element) => class slot unbound
[08:04:23] <asarch> *It would be the same as...
[08:04:24] <Bike> White_Flame: you can. the type specifier doesn't apply if the slot is unbound.
[08:04:32] <White_Flame> (make-instance 'the-html-element :class nil) => class slot bound to NIL
[08:04:36] <White_Flame> Bike: ah, ok
[08:04:47] <White_Flame> *instance slot
[08:04:58] <White_Flame> erm, instance slot named "CLASS" :-P
[08:05:16] *** Quits: Bike (~Bike@71.69.170.70) (Quit: the night)
[08:06:18] <asarch> That's why I always use name of food :-P
[08:06:32] <asarch> (make-instance 'the-taco :pizza nil)
[08:06:42] <mfiano> It seems strange to represent an HTML element as an standard-object outside of a CST or something.
[08:07:16] <White_Flame> yeah, there are such a huge number of standard fields on them, and the user can add any additional ones they want
[08:07:26] <moon-child> yeah, I should rather model html using hash tables
[08:07:34] <mfiano> Reminds me of fluid slots in cl-json
[08:07:36] * mfiano shudders
[08:08:11] <mfiano> The worst use for the MOP I've ever seen.
[08:09:24] <asarch> "Worst is better"
[08:10:32] <asarch> Anyway, thank you, thank you very much :-)
[08:10:43] <asarch> Have a nice day gentlemen
[08:10:49] *** Quits: asarch (~asarch@187.143.14.232) (Quit: leaving)
[08:10:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:11:10] <mfiano> I was hoping we'd be spared the taco this time.
[08:11:40] <beach> I was wondering why only gentlemen are allowed to have a nice day.
[08:12:14] *** Joins: lispnik (~lispnik@68.21.148.119)
[08:16:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:16:57] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[08:18:01] <White_Flame> at first I thought it was an "all your base" reference
[08:18:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:27:21] <masinter> The symbols can have pointers to them
[08:28:10] *** Quits: lispnik (~lispnik@68.21.148.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:29:36] <masinter> you can't expect garbage collection to collect anything
[08:35:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:36:00] <mfiano> I created #clprojects and edited CLiki appropriately. I talk to myself a lot when I'm designing a new project, mostly for the log of ideas, and thought it could be a common rather than some scratch log file.
[08:36:16] <mfiano> common ground that is.
[08:52:18] *** Joins: lispnik (~lispnik@68.21.148.119)
[09:01:02] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:06:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:08:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:09:09] *** Quits: lispnik (~lispnik@68.21.148.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:23:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:25:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:31:40] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a)
[09:34:09] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:34:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:36:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:38:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:48:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:50:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:53:18] *** Joins: Everything (~Everythin@37.115.210.35)
[10:22:24] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[10:22:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[10:22:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:24:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:39:18] <phoe> mfiano: #clprojects
[10:39:19] <phoe> ?
[10:39:28] <phoe> oh, I see
[10:40:30] <beach> I still don't.
[10:41:19] *** Joins: alfonsox (~quassel@103.87.57.95)
[10:42:25] <phoe> beach: I guess if the focus is on a project and its architecture design, rather than on CL topics, a discussion can go there
[10:42:46] <beach> Hmm. OK.
[10:44:32] *** Parts: Everything (~Everythin@37.115.210.35) ()
[10:44:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:45:09] <edgar-rft> #clprojects is a new registered channel, but probably not all network servers are already updated yet. I can't see it in /list either, but I was there and talked to mfiano about that.
[10:46:41] <beach> That's fine, but I would like to understand the purpose before considering joining.
[10:47:22] <edgar-rft> collecting ideas about howto design and setup new CL projects from scratch
[10:47:31] <mfiano> That's not the purpose.
[10:47:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:48:12] <phoe> mfiano: gasp
[10:48:14] <phoe> what is then?
[10:48:44] <phoe> oh, wait, I misread edgar-rft's post
[10:48:54] <mfiano> The purpose is to discuss ideas, architectural decisions, etc for your currently active project, that would be too broad and/or off-topic for a dedicated language channel such as this one.
[10:49:05] <edgar-rft> mfiano knows best but the channel topic says: Common Lisp community project discussions. Discuss the design or anything about your current active project that might be too focused for #commonlisp.
[10:49:14] <mfiano> I am using it to document my ramblings that would otherwise be to myself :)
[10:50:35] <beach> So that sounds like one should join only if one is interested in your projects.
[10:50:50] <beach> No?
[10:50:51] <mfiano> Or if you want others to be interested in your projects.
[10:50:58] <beach> I see.
[10:51:00] <moon-child> I think the point is that you join to ramble about your own projects
[10:51:17] <moon-child> and, in exchange, have (get?) to listen to others' ramblings
[10:51:26] <mfiano> Think #sicl content, but general to anyone's project
[10:51:42] <beach> Got it.
[11:13:59] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:2509:bf2b:aa9a:d931)
[11:31:41] *** Joins: wacki (~wacki@87.122.93.168)
[11:38:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:40:46] *** Joins: ASau (~user@lmpc.drb.insel.de)
[12:03:27] <beach> LOOP was one of the first SICL modules I wrote, and I think it is ripe for extraction to a separately-maintained repository.
[12:03:35] <beach> SICL LOOP is more strict than MIT LOOP with respect to clause ordering, and also more strict about how it assigns loop variables.  For instance, in SBCL, you can't do (loop for x of-type (integer 0 3) for x from 0 to 3 ...).
[12:03:42] <beach> SICL LOOP represents LOOP clauses as standard objects, so it should be easier to extend than MIT LOOP, though no protocol for such extensions has been designed.
[12:03:52] <beach> There are also some things that I am not so pleased with.  For one thing, there is a flaw in how AND is handled (there is an issue describing it).
[12:04:02] <beach> And I am not happy with the parsing technique used for clauses.  Currently I use a simplified version of combinator parsing.
[12:04:07] <beach> Ultimately, I think the way to go is to use scymtym's library for S-expression syntax, but that library may not be quite ready yet.  I am suggesting it because I think that, once it is ready, we should use it in other parts of SICL and Cleavir as well.
[12:04:08] <beach> Anyway, if someone is interested in being the LOOP maintainer, let me know.
[12:05:06] <beach> Oh, and SICL LOOP does not have the defect that MIT LOOP does which is that MIT LOOP copies the last list when APPEND is used.
[12:06:54] <beach> Anyone who would like more information can ask here or in #sicl.
[12:11:49] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[12:12:29] *** Joins: nature (~nature@45.32.235.173)
[12:17:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:18:10] <moon-child> 'doesn't have the defect'  I think it does still perform extraneous traversals for append/nconc, though, right?  Or was that fixed?
[12:18:41] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:19:04] <beach> Does it?  You may be right.
[12:28:48] <beach> Though if there is a trade-off between correctness and performance, I much prefer correctness.
[12:34:12] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[12:38:07] *** Joins: pve (~pve@178-55-133-181.bb.dnainternet.fi)
[12:47:42] *** Joins: shka (~herr@109.231.0.226)
[12:47:57] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[12:50:38] <moon-child> actually, thinking about it a bit more, I think MIT's behaviour (the 'defect') may be correct.  Or, at least, it is different; I'm not sure what is correct, but it is more consistent
[12:50:42] <moon-child> thinking about mutation
[12:50:47] <moon-child> (loop with x = (list 1 2 3) with y = (list 5 6 7) append x do (nconc x (list 4)) append y do (loop-finish))
[12:51:08] <moon-child> should return (1 2 3 5 6 7) with mit but (1 2 3 4 5 6 7)
[12:51:55] <moon-child> with sicl
[12:52:13] <moon-child> hyperspec says: 'The append keyword causes its list values to be concatenated into a single list, as if they were arguments to the function append'
[12:52:38] <beach> Yes, and APPEND does not copy its last argument.
[12:53:04] <moon-child> when appending many lists, structure is shared _only_ with the last one.  But clearly it is not possible to know ahead of time which value APPENDed in a loop will be the last one
[12:53:27] <moon-child> hence it seems arbitrary to preserve mutation only of the value most _recently_ APPENDed
[12:53:29] <beach> No, but I detect it dynamically.
[12:54:12] <moon-child> see my above snippet.  If we switch around the clauses and instead do: append x append y do (nconc x (list 4))  that change does not show up in the loop's result
[12:54:22] <moon-child> in sicl loop
[12:56:06] <beach> I can't easily follow that example.  But I do know that for the simple case, MIT loop does not behave as if the APPEND function had been used.
[12:57:16] <moon-child> can you explain what you find difficult to follow about it?
[12:57:51] <moon-child> my point is that it is impossible, in general, to consistently behave as though the APPEND function had been used
[12:57:51] <beach> Oh, the problem is likely with me rather than with the example.
[12:58:14] <beach> I am willing to believe that, especially for more twisted cases.
[12:58:35] <beach> It is not even clear at which point in time the APPEND function should be used.
[12:59:01] <beach> Perhaps we are supposed to accumulate each individual list and then do a big (reduce #'append...) in the end.
[13:00:04] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 250 seconds)
[13:00:05] <moon-child> that was my interpretation.  But that does not work since you can  APPEND INTO  and view intermediate states
[13:00:38] <beach> Yes, and you can mix APPEND and COLLECT.
[13:00:53] <moon-child> yeah
[13:01:54] <beach> So we seem to have a case for WSCL.
[13:08:12] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[13:08:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:09:27] <phoe> (let ((a '(:a :b . #1=(:c :d :e))) (b '(:f :g :h . #1#))) (tailp* a b))
[13:09:49] <phoe> TAILP* is undefined in there - I'd like to verify if *any* of the conses up there are shared
[13:10:32] <phoe> TAILP only works if I provide it the tail itself, not a list that has the tail as its own tail
[13:10:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:10:54] <phoe> does a utility like this TAILP* above exist somewhere? basically, "do these two lists share structure *anywhere*"?
[13:11:11] <phoe> s/anywhere/anywhere in their CDRs/
[13:16:02] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[13:20:04] *** Joins: lisp123 (~lisp123@45.86.203.177)
[13:26:39] <phoe> huh! clhs glossary s doesn't mention the term "shared structure" or anything similar
[13:27:41] <phoe> do lists (#1=(1 2 3)) and (#1#) share structure?
[13:27:45] <phoe> is this term defined anywhere in the specification?
[13:27:59] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[13:28:17] <phoe> oh wait
[13:28:19] <phoe> clhs glossary!l
[13:28:20] <specbot> Couldn't find anything for glossary!l.
[13:28:32] <phoe> http://clhs.lisp.se/Body/26_glo_l.htm#list_structure
[13:28:35] <phoe> this answers my question
[13:31:31] <phoe> and http://clhs.lisp.se/Body/26_glo_t.htm#tree_structure
[13:39:36] *** Quits: lisp123 (~lisp123@45.86.203.177) (Quit: Leaving...)
[13:39:50] <jackdaniel> quack
[13:40:43] <phoe> https://github.com/phoe/quicklisp-quackload ?
[13:41:05] <jackdaniel> no, yellow ducks don't quack so I thought about providing sfx
[13:41:15] <phoe> oh
[13:41:18] <phoe> thank you
[13:55:38] *** Joins: artchad (~user@public-gprs234531.centertel.pl)
[13:57:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:00:13] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:02:21] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:04:16] *** Joins: Everything (~Everythin@37.115.210.35)
[14:18:34] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[14:26:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:27:39] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:27:43] *** Lord_of_Life_ is now known as Lord_of_Life
[14:28:52] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[14:29:45] *** Quits: santiagopim (~user@84.78.243.45) (Remote host closed the connection)
[14:29:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[14:30:26] *** Joins: amk (~amk@109.255.169.126)
[14:38:16] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 245 seconds)
[14:39:47] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[14:40:54] *** Joins: amb007 (~a_bakic@209.104.204.77.rev.sfr.net)
[14:41:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[14:43:05] *** Joins: aeth (~aeth@user/aeth)
[14:45:13] *** Quits: amb007 (~a_bakic@209.104.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[14:45:21] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:08:32] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[15:10:57] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:15:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:25:07] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[15:40:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:42:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:54:02] *** Joins: lisp123_ (~lisp123@45.86.203.177)
[15:54:43] *** Quits: lisp123_ (~lisp123@45.86.203.177) (Client Quit)
[15:57:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[16:03:47] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:05:07] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[16:06:56] *** Joins: Bike (~Bike@71.69.170.70)
[16:07:46] *** Joins: McParen (~mcp@user/mcparen)
[16:10:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:15:59] <McParen> hello, what is nowadays the recommended way to deal with naming clashes with symbols from the default cl package? just shadow them in your own package and avoid :use-ing your own package at once and use fully qualified symbols?
[16:18:12] <beach> Yes.
[16:18:32] <beach> And use package-local nicknames if your package names are too long.
[16:19:01] <beach> Er, I mean, don't :USE
[16:19:24] <beach> No need to :SHADOW.
[16:20:34] <McParen> I would need to shadow to use the symbol in my own package?
[16:20:40] <beach> Right.
[16:20:50] <beach> You :SHADOW them in the package that defines symbols with the same name as those in the CL package, but not in the client package.
[16:21:15] <McParen> Okay.
[16:23:04] <McParen> Is the use of package local nicknames and using fully qualified symbols that can be "expected" from downstream users? Or do people still mostly :use other packages?
[16:23:13] <phoe> both
[16:23:37] <phoe> a lot of existing code depends on :USE, hence e.g. Alexandria cannot export new symbols without the risk of breaking 90% of the FOSS Lisp world
[16:23:53] <phoe> but new code can freely use PLNs
[16:23:55] <beach> McParen: Most people here seem to favor :USE-ing only the CL package.
[16:24:11] <beach> McParen: So I think that is going to be the preferred way in new systems.
[16:28:28] <McParen> beach, phoe: thank you, that is reassuring to know.
[16:28:56] <beach> Pleasure.
[16:34:47] <McParen> Maybe it would be useful to encourage that style (local nicknames + fully qualified symbols) in the cookbook or other well known documents, if that isnt the case already
[16:36:18] <phoe> good idea
[16:36:23] * phoe takes a note for CLR2
[16:41:46] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[16:43:04] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Remote host closed the connection)
[16:43:28] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[16:43:34] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Remote host closed the connection)
[16:49:53] *** Joins: treflip (~user@user/treflip)
[16:50:45] <beach> McParen: Already the case: See section 4.1 in http://metamodular.com/cluffer-documentation.pdf
[16:52:53] <beach> Or 31.12 in http://metamodular.com/SICL/sicl-specification.pdf
[16:53:59] <McParen> phoe: are you working on a follow-up of weitz' recipes book? that sounds great. do you have an idea how long the writing is going to take?
[16:54:35] <McParen> beach: thanks, i was not aware at all of that site.
[16:55:03] <beach> Metamodular?  Oh, it's just my stuff.
[16:56:08] <phoe> McParen: second edition, I hope to be done in 2022
[16:59:34] <jackdaniel> beach: regarding your remark of dubious usefullness of the function validate-superclass, I've just remembered it because I've recently wrote a method where it makes (imo) sense: https://plaster.tymoon.eu/view/2923#2923
[16:59:56] <jackdaniel> s/where it/where such method/
[17:00:19] *** Joins: dlowe (~dlowe@user/dlowe)
[17:00:33] <jackdaniel> i.e by limiting inheritance only to the standard-object
[17:01:45] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[17:02:44] *** Joins: dlowe (~dlowe@user/dlowe)
[17:22:54] <beach> Thanks.
[17:44:31] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[17:49:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:53:17] *** Joins: occ (~occ@user/occ)
[17:58:22] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:58:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:12:18] *** Quits: artchad (~user@public-gprs234531.centertel.pl) (Read error: Connection reset by peer)
[18:13:13] *** Joins: artchad (~user@public-gprs234531.centertel.pl)
[18:14:47] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[18:17:20] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[18:20:08] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Quit: Connection closed)
[18:20:41] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[18:20:57] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 240 seconds)
[18:22:37] *** Joins: psf (~pi@206.55.172.18)
[18:27:40] *** semz_ is now known as semz
[18:29:44] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[18:44:21] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Ping timeout: 256 seconds)
[18:50:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:53:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:04:47] *** Parts: mason (~mason@redhat/mason) ()
[19:05:27] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:07:16] <jackdaniel> beach: http://metamodular.com/CLOS-MOP/effective-slot-definition-class.html contains a broken link to a class "effective-slot-definition"; in the book it is " The value returned is a subclass of the class effective-slot-definition-class." (mind the suffix -class)
[19:09:00] <beach> Thanks.  Fixing...
[19:11:10] <beach> Does the book really say effective-slot-definition-class?  That doesn't sound right.  Let me check...
[19:11:48] *** Joins: igemnace (~ian@user/igemnace)
[19:12:27] *** Parts: McParen (~mcp@user/mcparen) ()
[19:12:37] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 240 seconds)
[19:12:44] <Bike> also, effective-slot-definition actually is a class.
[19:13:25] <beach> Yeah.
[19:13:26] <jackdaniel> I can tell that it is a class in all implementations I'm aware of, but it is not specified in amop (at least it is not in the index)
[19:14:05] <jackdaniel> and yes, I'm sure that my edition of the book says effective-slot-definition-class
[19:14:18] <beach> It does.  But I think it's wrong.
[19:15:20] <beach> Because there is no such class defined.
[19:15:37] <beach> I'll fix the link and I'll write a note.
[19:16:11] <jackdaniel> neither is defined, also standard-slot-definition is not defined either (looking at your inheritance graph)
[19:16:54] <beach> effective-slot-definition is a specified class.
[19:17:21] <Bike> http://metamodular.com/CLOS-MOP/class-effective-slot-definition.html
[19:17:46] <beach> Yes, the link is wrong, and the book is wrong about the name of the class.
[19:17:57] <beach> So, again, I'll fix the link and I'll write a note.
[19:19:09] <jackdaniel> I see, it is mentioned in the table for the superclass relationship
[19:20:02] <beach> "it"?
[19:20:17] <jackdaniel> the class "effective-slot-definition"
[19:20:29] <beach> Right.
[19:20:35] <jackdaniel> I couldn't find it in the index, because it didn't have a separate entry
[19:24:25] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[19:24:25] <beach> In the index of the book?
[19:24:31] <jackdaniel> yes
[19:24:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[19:24:37] <beach> Yes, the organization of the book is a disaster.
[19:24:46] *** Joins: Bike (~Glossina@71.69.170.70)
[19:24:49] <beach> That's why I felt the need to create this site.
[19:25:26] <jackdaniel> for me it is well organized (for a book that has sequential pages that is)
[19:25:59] <beach> Of course.
[19:27:34] <jackdaniel> beach: "of course" is a bit amgiguous to me - "of course" that /it is clear for me/, or "of course" that /it is well organized for a book that has sequential pages/?
[19:27:43] <jackdaniel> ambiguous*
[19:27:45] <beach> The former.
[19:27:52] <beach> OK, fixed now I think.
[19:27:54] <beach> Thanks again.
[19:28:25] <beach> Let me know if it looks better.
[19:28:26] <jackdaniel> I see, then I don't understand what you have said
[19:28:34] <jackdaniel> sure, thanks for fixing it
[19:29:39] <beach> Oh, I am just getting used to saying things that people disagree with.  I guess I need to think harder before uttering stuff.
[19:30:44] <beach> Sure.  I think this is a valuable site to have, so I appreciate any reports of errors, or suggestions for improvements.
[19:32:44] <jackdaniel> I did't disagree that you find the organization bad; yes, I'm using the website frequently, thanks for hosting it
[19:34:12] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[19:37:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:44:06] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[19:58:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[20:12:32] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[20:20:09] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[20:24:37] *** Quits: alfonsox (~quassel@103.87.57.95) (Remote host closed the connection)
[20:26:53] <dbotton> Is there a way to tell quicklisp (or asdf maybe is more correct) to rescan the directories it uses for systems?
[20:27:47] <phoe> (ql:register-local-projects)
[20:29:11] <dbotton> doesn't work
[20:29:45] <dbotton> I create the new project in ~/common-lisp
[20:29:51] <phoe> oh! that might be the reason
[20:30:03] <phoe> this only works for local-projects dirs
[20:30:35] <dbotton> I need all the possible directories used scanned ideal
[20:30:50] <dbotton> and esp the one most reliable dir ~/common-lisp
[20:30:57] <dbotton> (as hard coded in to asdf)
[20:31:08] <dbotton> is there a way?
[20:33:30] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[20:37:00] <lisp123> dbotton: Don't you get an error
[20:37:06] <lisp123> When you try to load the project?
[20:37:22] <lisp123> Usually its an option 'Clear Configuration and Retry Loading' or something like that
[20:39:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:41:10] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[20:41:44] *** Joins: derelict (derelict@user/derelict)
[20:43:22] <etimmons> dbotton: (asdf:clear-source-registry) should do it
[20:46:20] <dbotton> sorry, will try now
[20:49:41] <etimmons> (that's also what the restart lisp123 mentioned calls if you try to load-system and ASDF doesn't know how to find that system)
[20:49:44] <dbotton> using  (ql:register-local-projects) - [Condition of type QUICKLISP-CLIENT:SYSTEM-NOT-FOUND]
[20:50:04] <dbotton> using (asdf:clear-source-registry)  - worked
[20:50:21] <dbotton> thanks!
[20:50:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:50:50] <dbotton> with the asdf call also work for the local-projects dir?
[20:50:57] <dbotton> or I need to call both?
[20:51:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:51:40] <Xach> dbotton: ql:register-local-projects is invoked automatically if a project directory's timestamp is newer than its project index file.
[20:51:56] <Xach> if you put a project deeper than that, you need to call it manually.
[20:51:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[20:52:10] <dbotton> These are new projects
[20:52:27] *** Joins: amb007 (~a_bakic@209.149.22.93.rev.sfr.net)
[20:52:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:52:45] <Xach> it should happen automatically in that case.
[20:52:59] <dbotton> great
[20:53:51] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[20:53:51] *** Joins: cuz` (~user@23-30-167-57-static.hfc.comcastbusiness.net)
[20:55:47] *** Joins: Guest4432 (~Guest44@95.175.104.156)
[20:56:46] <dbotton> works
[20:56:50] <dbotton> thank you all
[20:58:17] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Quit: Connection closed)
[20:58:50] *** Joins: ebrasca (~user@librepanther.com)
[21:03:07] <dbotton> Xach what is the reason for creating the system-index.txt file in the local-project dir?
[21:03:51] <Xach> dbotton: it is a cache so the path is not scanned fresh all the time. for a big tree it can take time.
[21:10:13] <Guest4432> Hi, does someone know any public projects which use the Herodotus library (https://github.com/HenryS1/herodotus/blob/master/README.org)?
[21:11:39] <phoe> Guest4432: (ql:who-depends-on "herodotus") says that no QL system depends on it
[21:12:28] <dbotton> Is there a convention for documenting in the doc string of a function that one of its parameters is a lambda and what parameters that lambda would take?
[21:13:28] <dbotton> for example I have - (defun walk-files-and-directories (path process) "Walk PATH and apply PROCESS on each (path and file)"
[21:14:07] <Xach> dbotton: i don't think there's a firm convention, but i write something like "PROCESS should be a function that accepts a single argument, a pathname" or similar
[21:14:29] <Xach> Or "a function of one argument, a <foo>"
[21:15:03] <Guest4432> phoe ok, thanks
[21:16:39] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[21:21:00] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[21:22:31] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[21:36:06] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:36:52] *** Quits: cuz` (~user@23-30-167-57-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[21:39:57] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[21:44:48] *** Quits: amb007 (~a_bakic@209.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:45:31] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[21:45:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:47:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:47:52] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:50:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:53:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[21:54:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:57:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:57:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[22:00:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[22:00:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:06:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:07:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:15:26] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:18:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[22:24:29] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 252 seconds)
[22:24:41] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:27:57] *** Joins: gaqwas (~john@dynamic-095-114-039-195.95.114.pool.telefonica.de)
[22:33:51] *** Quits: Guest4432 (~Guest44@95.175.104.156) (Ping timeout: 256 seconds)
[22:35:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:38:48] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:5873:aea:dc30:5c15)
[22:44:38] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:45:22] *** Quits: gaqwas (~john@dynamic-095-114-039-195.95.114.pool.telefonica.de) (Remote host closed the connection)
[22:48:23] *** Joins: santiagopim (~user@44.pool90-167-219.static.orange.es)
[22:55:41] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[22:56:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:58:20] <_73`> Question about how I can bring the variables of a lambda-list argument for a macro in scope immediately: https://dpaste.com/6FDSA84XD
[22:59:51] <phoe> what is (string num1) supposed to evaluate to
[23:00:13] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[23:00:20] <phoe> or rather, what is the final note string supposed to look like?
[23:00:42] <phoe> do you mean (format nil "A function that uses ~S" 'num1)?
[23:01:03] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[23:02:03] *** Joins: _73`` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[23:02:23] <phoe> also, that ACONS call is a no-op because the consed alist cell is then immediately discarded
[23:02:39] <phoe> did you mean PUSHNEW with :KEY #'CAR?
[23:03:11] <_73``> sorry phoe it seems I timed out when you sent your first message so I missed it
[23:03:53] *** Quits: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[23:04:39] <masinter> beach I'd like to know more about LOOP implementations
[23:06:47] <masinter> Interlisp has "iterative statements" and an extensibillity method ("is.opr").
[23:09:15] <phoe> _73``: https://irclog.tymoon.eu/libera/%23commonlisp
[23:12:42] <_73``> phoe: ahh should have looked up. Now I see that I am all mixed up because I want (STRING NUM1) to evaluate to its runtime value (say 12 or something).`
[23:14:11] <phoe> ...wait a second
[23:14:26] <phoe> how do you want to get that outside the function itself
[23:14:48] <phoe> how do you get the runtime value of a variable without binding that variable, and binding that variable only happens upon calling the function
[23:18:31] <_73``> phoe: Well you helped me find the crux of the problem...
[23:19:26] <_73``> the function itself needs to have the side effect
[23:20:05] <phoe> side effect of what exactly
[23:20:19] <phoe> setting the values somewhere else?
[23:20:26] <phoe> what if it's called multiple times?
[23:21:03] <_73``> consing to *MY-FUNCTION-NOTES*. I can add a guard that checks if its already a member.
[23:22:48] <phoe> seems like you want SETF of ALEXANDRIA:ASSOC-VALUE
[23:23:23] <phoe> in that case you need to insert an appropriate form before your ,CODE
[23:27:02] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[23:31:56] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[23:33:07] *** Joins: Guest4446 (~Guest44@95.175.104.156)
[23:33:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:34:58] *** Joins: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net)
[23:35:20] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[23:35:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:36:43] *** Joins: robin__ (~robin@user/terpri)
[23:37:04] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[23:39:21] *** Parts: _73`` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[23:44:44] <jkordani> style question.  If you write a function that needs to compute something given a list of values, is it better to write it such that it accepts a list of inputs, or an optional number of arguments, or both
[23:45:35] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:2509:bf2b:aa9a:d931) (Ping timeout: 256 seconds)
[23:46:14] <Xach> jkordani: if you are passing around lists already, &rest arglists mean you have to apply the function, and sometimes that is a little inconvenient.
[23:46:14] <masinter> &rest is ugly
[23:46:16] <phoe> jkordani: depends on how likely you are to hit the CALL-ARGUMENTS-LIMIT
[23:46:38] <jkordani> oh right arg limits
[23:46:38] <Xach> If you are using it mostly interactively, I find &rest to be pretty convenient and easy to read.
[23:46:42] <phoe> as one example from standard CL, see #'CONCATENATE
[23:46:53] <phoe> as another example from standard CL, see #'MAP
[23:47:27] <phoe> as they say, inside you there are two wolves
[23:48:02] <jkordani> lol
[23:49:37] <masinter> i never liked MAP
[23:50:04] <masinter> use LOOP
[23:50:35] <masinter> much easier to read
[23:58:37] *** Quits: robin__ (~robin@user/terpri) (Ping timeout: 240 seconds)
