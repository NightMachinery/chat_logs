[00:03:44] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[00:05:47] *** Quits: Iolo (~Iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Quit: Iolo)
[00:05:55] *** Joins: qaluh (~qaluh@user/qaluh)
[00:09:16] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 250 seconds)
[00:09:52] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c899:9204:fa5a:d2de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:12:01] *** Joins: Iolo (~Iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[00:17:30] *** Joins: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de)
[00:20:30] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[00:20:32] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fb4d-184.dhcp.inet.fi) (Ping timeout: 250 seconds)
[00:21:54] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[00:22:26] *** Joins: hashfunc32 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[00:22:55] *** Quits: magla (~gelignite@d5362da6.access.ecotel.net) (Quit: Stay safe!)
[00:23:00] *** Quits: dld (~davidlowr@2601:197:600:1210:88cb:4d48:189:f8f8) (Ping timeout: 240 seconds)
[00:26:58] *** Joins: drbeco (~beco@2804:351c:dd02:6800:c024:382c:90ec:dcb6)
[00:26:59] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[00:27:18] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:27:24] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 272 seconds)
[00:28:18] *** Joins: dld (~davidlowr@73.61.9.0)
[00:32:11] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[00:33:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:33:35] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:33:47] *** Quits: dld (~davidlowr@73.61.9.0) (Ping timeout: 256 seconds)
[00:33:50] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[00:34:07] *** Quits: drbeco (~beco@2804:351c:dd02:6800:c024:382c:90ec:dcb6) (Changing host)
[00:34:07] *** Joins: drbeco (~beco@user/beco)
[00:34:38] *** Joins: dld (~davidlowr@2601:197:600:1210:7c23:245c:3a8b:a0db)
[00:35:12] *** Quits: Linux77 (~leonardo@2804:d45:8c08:9300:76d0:2bff:fe7a:f3a4) (Quit: Bye, nice, gratefull)
[00:36:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[00:39:23] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:fc30:405a:f833:7869)
[00:41:59] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:42:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:44:17] *** Joins: artok (~azo@mobile-access-bceea7-224.dhcp.inet.fi)
[00:45:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[00:49:06] *** Quits: artok (~azo@mobile-access-bceea7-224.dhcp.inet.fi) (Ping timeout: 260 seconds)
[00:49:19] *** Quits: rgrinberg (~textual@2806:101e:7:8d89:ad31:8328:5a08:79cc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:49:55] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[00:52:42] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[00:53:17] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[00:56:22] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[00:58:45] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[01:08:48] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[01:09:15] <Franciman> hi everyone, is there any recommended tutorial for learning about coroutines in c++20?
[01:10:45] <Zogatribe> coroutines are a solution in search of a problem
[01:11:05] <T`aZ> amybe some cppcon videos
[01:11:10] <kalven> Zogatribe: wow..
[01:11:16] <RandomReader> I haven't been through them myself, but I bookmarked this a bit ago, it looked decent: http://www.modernescpp.com/index.php/tag/coroutines
[01:11:31] <Franciman> thanks
[01:12:58] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 250 seconds)
[01:15:25] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[01:18:30] *** Quits: drbeco (~beco@user/beco) (Quit: Leaving)
[01:19:34] *** Joins: pycurious (~Adium@user/pycurious)
[01:24:37] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[01:26:42] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:27:27] *** Joins: gproto23_ (~gproto23@user/gproto23)
[01:28:37] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[01:29:36] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[01:32:28] *** Parts: CygniX_ (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Konversation terminated!)
[01:33:13] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[01:38:05] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:39:24] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[01:41:59] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 250 seconds)
[01:42:37] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:43:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:18] *** ChanServ sets mode: +v npaperbot
[01:44:10] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[01:44:51] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:45:13] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[01:45:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:46:58] *** Joins: tdcly^ (~tdcly@12.163.216.98)
[01:48:59] *** Joins: badone (~badone@209.132.189.152)
[01:52:49] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[01:53:15] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:218a:98a9:16e0:223)
[01:53:33] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[01:54:21] *** Quits: RandomReader (~RandomRea@user/randomreader) (Read error: Connection reset by peer)
[01:55:06] *** Joins: RandomReader (~RandomRea@user/randomreader)
[01:56:17] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[01:58:42] *** Quits: Leone (~Leo@216.154.12.122) (Read error: Connection reset by peer)
[02:04:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[02:05:29] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:08:57] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:10:50] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:11:30] <joomla9> is it safe to say `structs, unions and enums` create new data types, whereas int, char, double and such are data types themsleves?
[02:13:30] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:953a:f456:a95e:2f9f)
[02:13:37] <Alipha> joomla9: yes. the types you create with the former are generally referred to as "user-defined types" (UDTs), where the latter are "built-in types" or "primitive types"
[02:13:59] <joomla9> Thank you.
[02:14:21] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[02:14:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[02:17:18] *** Quits: Iolo (~Iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Quit: Iolo)
[02:17:42] <joomla9> so `struct` on its own is just a keyword correct? however, `struct foo{};` is creating a new datatype (or UDT) called foo.
[02:17:52] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Quit: No Ping reply in 180 seconds.)
[02:19:04] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[02:19:43] <Hello71> although "new data types" isn't really a concept in the standard
[02:21:03] <Hello71> more precisely, it doesn't have a specific meaning. it's not wrong to say that but it may lead to some unjustified conclusions
[02:21:03] <Alipha> joomla9: you can create anonymous structs, unions, and enums. e.g., `struct { int x; int y; } bar;`
[02:22:32] <joomla9> thats true.
[02:23:09] *** Quits: henbruas (~henbruas@ti0003a400-6569.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[02:23:45] *** Joins: henbruas (~henbruas@ti0003a400-6569.bb.online.no)
[02:24:54] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[02:29:05] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[02:29:32] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.4)
[02:30:04] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[02:30:31] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[02:30:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:31:37] *** Quits: Guest3896 (~Guest@181.91.158.121) (Remote host closed the connection)
[02:33:35] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:34:12] *** Joins: pizdets (~pizdets@183.182.111.139)
[02:34:41] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:35:20] *** Quits: pizdets_ (~pizdets@183.182.114.254) (Ping timeout: 272 seconds)
[02:41:24] *** Quits: hashfunc32 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[02:41:49] *** Joins: cation21 (cation@user/cation)
[02:42:51] *** Quits: cation (cation@user/cation) (Ping timeout: 245 seconds)
[02:42:58] *** Quits: Donno (~donno@58.84.206.182) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[02:43:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:43:44] *** Joins: Donno (~donno@58.84.206.182)
[02:44:18] *** Joins: hiroshi_ (~freedom@151.37.124.250)
[02:45:14] *** cation21 is now known as cation
[02:46:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:47:34] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[02:48:10] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:49:15] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 240 seconds)
[02:52:06] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:218a:98a9:16e0:223) (Quit: Leaving)
[02:52:36] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[02:52:51] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:56:36] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[02:57:24] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:59:18] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 260 seconds)
[02:59:54] *** Joins: jancoow (~jancoow@user/jancoow)
[03:01:43] *** Joins: sbrothy (~sbrothy@192038128240.mbb.telenor.dk)
[03:06:45] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[03:07:03] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[03:07:26] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:50da:5cb6:2c18:f59d) (Ping timeout: 245 seconds)
[03:07:30] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc4-git-8b97cae-Pogorze-Karpackie-CUSTOM-KERNEL)
[03:07:55] *** Quits: HeTo (~henkka@130.230.72.140) (Ping timeout: 256 seconds)
[03:08:13] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:08:20] *** Joins: HeTo (~henkka@130.230.72.140)
[03:09:33] *** Parts: jplejacq (~jplejacq@68.71.169.160) (Leaving.)
[03:09:43] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:14:03] *** Joins: Xardas (~Xardas@149.233.51.127)
[03:14:33] *** Quits: Angs (~Angs@2.68.51.73.mobile.tre.se) (Quit: Leaving)
[03:15:30] <Xardas> I'm reading about evaluation of operands when using the assignment operator
[03:15:37] <Xardas> https://wandbox.org/permlink/uZpCIHkT6MFQib1t
[03:15:58] <Xardas> I can't figure out why it's giving me this result.
[03:18:50] <TheSchaf> what result do you expect?
[03:19:17] <Xardas> I'm getting HHHHHH instead of HELLO WORLD
[03:19:38] <Xardas> *beg = toupper(*beg++);
[03:20:03] <Xardas> inside the upper() method i'm dereferencing beg, and then incrementing the iterator
[03:20:38] <Xardas> but it appears its not going that way
[03:20:42] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[03:21:21] <Alipha> right, so the iterator now points to the next char, which you're assigning that toupper result to
[03:21:51] <Alipha> `char result = toupper(*beg); beg++; *beg = result;`  is what you're doing
[03:22:41] <TheSchaf> yeah, and "*beg = toupper(*beg); beg++;" is probably what you want, or so
[03:24:47] *** Joins: Guest3876 (~Guest@host171.190-224-208.telecom.net.ar)
[03:25:02] <Xardas> *beg = toupper(*beg++);
[03:25:08] <Xardas> do we increment first here ?
[03:25:20] <Xardas> or are we dereferencing first ?
[03:26:04] <Xardas> I'm confused about which one has the higher precedence the ++ or the * here
[03:28:14] <Xardas> Oh I think I get it
[03:28:19] <Xardas> Alipha thx dude
[03:28:38] <TheSchaf> read about post/pre increment/decrement operators
[03:29:44] *** Quits: hiroshi_ (~freedom@151.37.124.250) (Quit: hiroshi_)
[03:30:03] *** Quits: zopsi (~zopsi@104-237-136-227.ip.linodeusercontent.com) (Quit: Oops)
[03:30:33] <Xardas> I'm reading about them just now
[03:30:50] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:31:04] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[03:31:12] *** Joins: zopsi (~zopsi@104-237-136-227.ip.linodeusercontent.com)
[03:31:40] <Xardas> so basically *beg++ what it does, we're creating a copy of *beg passing it to toupper( ) and assigning it to *beg then increment beg
[03:32:32] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Remote host closed the connection)
[03:33:12] *** Quits: qaluh (~qaluh@user/qaluh) (Quit: Leaving)
[03:33:27] <Eelis> yes, that's why post-{increment,decrement} is so unintuitive and mostly best avoided
[03:33:37] <TheSchaf> not quite, we are doing the increment before the assign
[03:33:40] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:34:01] <Eelis> TheSchaf: incorrect
[03:34:37] <Eelis> { int i = 3; int x = i++; cout << x; } // notice how the increment does not happen before the assign
[03:34:38] <geordi> 3
[03:35:02] <Eelis> that's the funkyness of post-{increment,decrement} :)
[03:35:38] <TheSchaf> Eelis: *beg = toupper(*beg++);
[03:35:46] <Alipha> well, the increment of i may happen before the assign, but regardless, the previous value of i is used in the assignment
[03:35:57] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:36:33] <Xardas> the ++ operators makes a copy of the original i and assign it to x then increment i
[03:36:52] <Eelis> !i++vs++i
[03:36:53] <nolyc> Postfix increment (which makes a copy, increments the original, and then returns the copy) is a semantically more complex operation than prefix increment (which just increments the original and returns it), regardless of whether the compiler happens to eliminate the temporary. When you have no use for the temporary, prefer prefix increment instead of needlessly complicating your code.
[03:37:27] <Alipha> i'm not entirely sure of the rules of the latest c++ standard, but i believe in `*beg = toupper(*beg++);` that the increment of beg is required to happen before the toupper call (but after the value of *beg is fetched)
[03:38:03] <Eelis> Alipha: i don't think that's true at all. that would be a radical change
[03:38:08] <TheSchaf> running the code with changing the first character to something different than H shows this
[03:38:21] <TheSchaf> the first character is skipped, which means the increment happens before the assign
[03:38:24] *** Quits: zachel (~zachel@user/zachel) (Read error: Connection reset by peer)
[03:39:37] <TheSchaf> { string foo = "xy"; auto ptr = foo.begin(); *ptr = toupper(*ptr++); cout << foo; }
[03:39:38] <geordi> xX
[03:40:21] <Xardas> [01:09:37] <TheSchaf> { string foo = "xy"; auto ptr = foo.begin(); *ptr = toupper(*ptr++); cout << foo; }
[03:40:22] <Xardas> [01:09:38] <geordi> xX
[03:40:29] <Xardas> sorry
[03:40:30] <Xardas> { string foo = "xy"; auto ptr = foo.begin(); *ptr = toupper(*ptr++); cout << foo; }
[03:40:31] <geordi> xX
[03:42:06] <Eelis> Xardas: changing from string to char[] reveals that your testcase is UB
[03:42:07] <Eelis> { char foo[3] = "xy"; auto ptr = &foo[0]; *ptr = toupper(*ptr++); cout << foo; }
[03:42:08] <geordi> warning: operation on 'ptr' may be undefined
[03:42:08] *** Joins: zachel (~zachel@user/zachel)
[03:42:15] <Eelis> so to make your point, you need to show some non-UB code.
[03:42:27] <Xardas> Yes it's UB
[03:42:44] <Xardas> Because we're changing the same object
[03:43:03] <Xardas> and we don't know which side of the = operator is evaluated first
[03:43:13] <Eelis> given that you agree that your testcase is UB, do you also agree that you need to present a different non-UB testcase to support your point?
[03:43:20] <Alipha> Eelis: well, that's proof that i'm wrong.
[03:43:38] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:43:43] <Xardas> But I still don't get it how comes this is UB
[03:44:15] <Xardas> hhhhhhh
[03:44:47] <Xardas> *ptr = toupper(*ptr++); we capitalizing a character and assigning it to itself
[03:44:59] <Xardas> nothing seems to be wrong here
[03:45:17] <Eelis> what's wrong is that the statement contains two assignments to ptr, so it's gibberish
[03:45:42] <Eelis> to make it non-gibberish, it should only assign once
[03:46:04] <Eelis> oh no, i'm confusing *ptr and ptr
[03:46:41] <Alipha> { int x = 3; int y = (x = 5) + x; }
[03:46:41] <geordi> warning: operation on 'x' may be undefined
[03:47:01] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:47:04] <Eelis> right, if you have a statement that simultaneously assign from a variable and reads from it, that's fishy
[03:47:13] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:47:16] <Eelis> s/assign from/assigns to/
[03:47:22] <Alipha> and by "fishy", you mean, "it's undefined behavior"
[03:47:46] <Eelis> well, "fishy" is broader than "UB". there's fishy code that's technically not UB but still best avoided :)
[03:48:16] <Eelis> this is what Bjarne means when he advises "don't rely on the dark corners of the language"
[03:48:50] <kalven> he put them there!
[03:49:15] <Eelis> true enough
[03:49:49] <Xardas> { int x = 3; int y = (x = 5) + x; } so here we're not sure about which operand is evaluated first right >
[03:49:49] <geordi> error: Unexpected end of request. Expected any symbol.
[03:49:52] <Xardas> ?
[03:50:00] <Eelis> geordi, add // before so
[03:50:00] <geordi> warning: operation on 'x' may be undefined
[03:50:14] <Xardas> the (x=5) operand or the x operand
[03:50:30] <Xardas> Eelis gotcha
[03:50:31] *** Quits: sbrothy (~sbrothy@192038128240.mbb.telenor.dk) (Quit: leaving)
[03:50:32] <Eelis> i would definitely classify that as fishy code
[03:50:40] <Eelis> regardless of whether it's technically UB
[03:50:43] <Alipha> Xardas: in the statement `*ptr = toupper(*ptr++);`, ptr is being modified (ptr++) and is also being accessed (*ptr, on the lefthand side) where the access is not for the purpose of modifying ptr. that makes it undefined behavior. it's perhaps a bit odd that the standard takes such an aggressive stance of saying it's UB, rather than just leaving it unspecified the order in which the operations are performed
[03:52:57] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 256 seconds)
[03:53:18] <Eelis> i think nowadays C++ guarantees that in f(g(), h()), g is called before h, but in g()+h(), no guarantees :/
[03:53:32] <TheSchaf> i think it is not UB because C++17 on evalutes RHS before LHS
[03:53:41] <TheSchaf> and sequence points have been long deprecated (which generate this warning :))
[03:54:01] <Xardas> Eelis that's exactly what i was reading about
[03:54:59] <Xardas> the order of evaluation is left to the compiler
[03:55:16] <Xardas> to enhance the performance
[03:55:53] <Eelis> yes, and that's understandable if you assume that whenever people write g()+h(), they don't care whether g or h is executed first. but in practice, sometimes people *do* expect g to be called first :)
[03:56:09] <Eelis> for better or worse.
[03:56:25] *** Joins: ferdna (~ferdna@user/ferdna)
[03:56:34] <Alipha> { char foo[3] = "xy"; auto ptr = &foo[0]; *ptr = toupper(*ptr++); cout << foo; } // TheSchaf, gcc says it's undefined
[03:56:34] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:56:35] <geordi> warning: operation on 'ptr' may be undefined
[03:56:52] <TheSchaf> clang doesn't, screw gcc :)
[03:57:19] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[03:57:59] <TheSchaf> gcc even says "The C++17 standard will define the order of evaluation of operands in more cases: in particular it requires that the right-hand side of an assignment be evaluated before the left-hand side, so the above examples are no longer undefined. But this option will still warn about them, to help people avoid writing code that is undefined in C and earlier revisions of C++."
[03:58:11] <TheSchaf> about -Wsequence-point (which is generating this warning)
[03:58:11] <anyone> uh that looks like  i = i++ all over again
[03:58:14] <Alipha> Rather, I suppose the RHS is *evaluated* first, but it's still unspecified as to when the ++ actually occurs
[03:58:37] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[03:59:22] *** Joins: daswf852 (~daswf852@user/daswf852)
[03:59:25] <TheSchaf> a[i] = i++ is only UB up to c++17
[04:00:35] *** Joins: xiongxin (~Thunderbi@2409:8955:3088:422e:dbd0:5f53:ba3b:be2f)
[04:00:46] <anyone> 0. assume i=21; 1. evaluate "i++", yields 21 (duh); 2. execute ++; 3. a[i] now means a[22].  That's one way to interpret that
[04:01:14] <anyone> and one way where it's unlikely to do what the programmer intended
[04:03:57] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:04:35] <Alipha> { int a[] ={1,2,3,5}; int i =0; a[i] = i++; }
[04:04:36] <geordi> warning: operation on 'i' may be undefined
[04:04:47] <Alipha> geordi disagrees
[04:04:48] <TheSchaf> geordi --clang  { int a[] ={1,2,3,5}; int i =0; a[i] = i++; }
[04:04:48] <geordi> exception: execv
[04:05:19] <TheSchaf> meh, like I posted above GCC left the warning to warn users
[04:05:31] <Alipha> I'm more inclined to believe clang is lacking a warning than gcc is misreporting a warning
[04:06:05] <TheSchaf> the warning that gcc generates is -wsequence-points
[04:06:16] <TheSchaf> that doesn't exist from c++17 on because sequence points do not exist anymore
[04:07:14] <TheSchaf> read https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html, specifically "-Wsequence-point"
[04:07:28] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[04:07:53] <TheSchaf> or https://en.cppreference.com/w/cpp/language/eval_order which specifically lists "a[i] = i++; // undefined behavior (until C++17)"
[04:08:15] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 256 seconds)
[04:08:42] <TheSchaf> https://wandbox.org/permlink/V4SuM5aSori9y70n perfectly working as expected in clang :P
[04:11:49] *** Quits: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (Ping timeout: 240 seconds)
[04:12:31] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[04:12:37] <TheSchaf> so to summarize, this is not UB and it is executed as I said above. get the value, increment the pointer and THEN assign it
[04:12:41] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[04:12:58] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[04:13:24] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 240 seconds)
[04:14:04] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[04:17:06] *** Joins: drbeco (~beco@user/beco)
[04:20:29] <anyone> 8) The side effect of = is seqd-after the value computation (but not the side fx) of both left and right args
[04:21:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:21:12] <Eelis> geordi doesn't use -Wsequence-point
[04:21:37] <anyone> to me that reads that the memory write could happen before the increment
[04:22:40] <anyone> even for non-UB things like  *a = b++;
[04:25:23] <TheSchaf> Eelis: what does it use then? it is part of -Wall
[04:25:32] <anyone> oh well, 20) is the one that makes it clear that it is sequenced as you said
[04:25:53] <Eelis> TheSchaf: it definitely uses -Wall
[04:26:47] <TheSchaf> yes, so thats why you get it then - but as the GCC docs state, it is just to warn people so that they don't write incompatible code with earlier c++ versions
[04:27:02] *** Joins: ferdna (~ferdna@user/ferdna)
[04:27:11] <Eelis> i agree that's a lame motivation to warn about something
[04:27:29] <Eelis> "if we go back in time your code might break" :P
[04:27:31] <TheSchaf> might as well warn people if they use c++ at all :P
[04:29:05] <anyone> well it is fair to warn. A fair number of people just use a compiler without -std=, and then the code gets published, and some
[04:29:16] <anyone> poor 3rd party soul then uses it on another compiler with a lower implied -std= and the program breaks
[04:30:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:30:40] *** Joins: Xardas (~Xardas@149.233.51.127)
[04:32:37] <Xardas> TheSchaf according to the C++ Primer book is UB
[04:33:02] <anyone> Xardas: books are usually wrong
[04:34:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:37:58] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[04:38:02] *** Quits: osse (~osse@zsh/user/osse) (Ping timeout: 240 seconds)
[04:40:36] *** Joins: osse (~osse@zsh/user/osse)
[04:42:20] *** Quits: jsbach (~jsbach@2a01:c23:5c2e:ba00:a719:4726:e5ec:dc00) (Ping timeout: 252 seconds)
[04:44:12] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:47:02] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:47:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:50:14] <Xardas> Yes in this regard the author is wrong
[04:50:37] <Xardas> The order is of evaluation is clear
[04:55:36] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[04:56:12] *** Quits: xiongxin (~Thunderbi@2409:8955:3088:422e:dbd0:5f53:ba3b:be2f) (Ping timeout: 240 seconds)
[04:56:36] *** Quits: furrymcgee (~devuan@cgn-89-1-209-226.nc.de) (Ping timeout: 240 seconds)
[04:56:43] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Quit: Surfing the great wave off Kanagawa)
[04:57:25] <pycurious> I am looking for a segment to segment intersection in C++. I want the output to be a point or segment. Is there somewhere code to do this?
[04:59:28] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:fc30:405a:f833:7869) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:00:57] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[05:02:47] *** Joins: Emet-Selch (~haise01@user/haise01)
[05:04:05] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[05:04:32] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:05:49] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[05:09:38] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[05:13:31] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[05:14:36] *** Quits: tdcly^ (~tdcly@12.163.216.98) (Remote host closed the connection)
[05:16:33] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:17:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[05:19:34] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ae8) (Remote host closed the connection)
[05:24:50] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[05:27:42] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[05:28:29] *** Joins: xiongxin (~Thunderbi@117.136.33.235)
[05:29:43] *** Joins: Betal (~Betal@user/betal)
[05:30:17] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[05:30:36] *** Joins: bindu (~bindu@user/bindu)
[05:31:05] <Alipha> pycurious: maybe ask in #c++-general
[05:32:45] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:33:18] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 272 seconds)
[05:36:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 260 seconds)
[05:36:39] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:37:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:592b:de82:2331:6265)
[05:43:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:20] *** ChanServ sets mode: +v npaperbot
[05:44:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:46:17] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[05:46:35] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 240 seconds)
[05:48:30] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:53:47] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[05:55:03] *** Joins: f4t4l_3rr0r (~PhoenixCo@user/alien-fx-fiend/x-2328408)
[05:55:21] *** Quits: shailangsa_ (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) ()
[05:57:42] *** f4t4l_3rr0r is now known as DeepComa
[05:58:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:953a:f456:a95e:2f9f) (Ping timeout: 256 seconds)
[05:59:46] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[06:04:40] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[06:08:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:09:07] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:09:22] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 250 seconds)
[06:10:10] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:12:43] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:14:58] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:18:27] *** Joins: Guest8100 (~tinloaf@virt-no01.mrvm.net)
[06:20:24] *** Joins: Inline__ (~Inline@p200300cd470d31009f2917ead5869a68.dip0.t-ipconnect.de)
[06:20:48] *** Joins: xiongxin1 (~Thunderbi@2409:8955:2e88:3278:b0c8:95dd:82b2:fcd6)
[06:20:51] *** Quits: xiongxin (~Thunderbi@117.136.33.235) (Ping timeout: 256 seconds)
[06:20:52] *** xiongxin1 is now known as xiongxin
[06:22:37] *** Quits: Inline (~Inline@p200300cd4715f5002bb20ed77dab6816.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:24:15] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[06:24:23] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 2.8)
[06:26:54] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[06:28:31] <norias> ugh
[06:28:40] <norias> anyone have experience with apple clang?
[06:28:46] <norias> it's giving me hell
[06:28:55] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[06:33:31] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[06:33:37] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[06:38:25] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:39:24] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[06:39:25] *** Joins: zer0x_ (~zer0x@58.186.65.98)
[06:43:49] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[06:45:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:47:10] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:48:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:48:47] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:49:11] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[06:51:56] *** Quits: millido_ (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:52:30] *** Joins: jancoow (~jancoow@user/jancoow)
[06:54:28] *** Quits: Guest3876 (~Guest@host171.190-224-208.telecom.net.ar) (Remote host closed the connection)
[06:59:57] *** Quits: xiongxin (~Thunderbi@2409:8955:2e88:3278:b0c8:95dd:82b2:fcd6) (Ping timeout: 240 seconds)
[07:02:45] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[07:05:19] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:592b:de82:2331:6265) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:07:16] *** Joins: lainon_ (~lainon@c-68-46-201-40.hsd1.al.comcast.net)
[07:07:37] *** Joins: Azem (~haise01@user/haise01)
[07:08:03] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:08:58] *** Joins: millido (~millido@84.210.150.128)
[07:09:20] *** Joins: f4t4l_3rr0r (~PhoenixCo@user/alien-fx-fiend/x-2328408)
[07:09:54] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ae8) (Ping timeout: 260 seconds)
[07:10:43] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:11:37] *** Quits: DeepComa (~PhoenixCo@user/alien-fx-fiend/x-2328408) (Ping timeout: 256 seconds)
[07:11:47] *** f4t4l_3rr0r is now known as DeepComa
[07:14:01] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[07:18:41] *** Quits: lainon_ (~lainon@c-68-46-201-40.hsd1.al.comcast.net) (Remote host closed the connection)
[07:18:57] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:20:11] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 250 seconds)
[07:23:21] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Quit: Leaving)
[07:25:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:27:25] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[07:28:49] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:29:49] *** Quits: ik (uid540109@id-540109.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:32:18] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 252 seconds)
[07:38:10] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[07:38:54] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[07:38:54] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[07:38:54] *** Joins: nortoh (~nortoh@user/nortoh)
[07:39:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[07:45:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:49:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:49:48] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[07:49:49] *** Quits: sreve (~quassel@p549d7015.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:49:55] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:87b2:598e:5ed5:8ca9) (Quit: No Ping reply in 180 seconds.)
[07:50:04] *** Joins: xiongxin (~Thunderbi@2409:8955:2e88:18e1:3184:f55a:7cbe:ae3b)
[07:50:09] *** Joins: sreve (~quassel@p549d706d.dip0.t-ipconnect.de)
[07:50:12] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Remote host closed the connection)
[07:50:57] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Ping timeout: 240 seconds)
[07:51:26] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 260 seconds)
[07:53:35] *** Joins: wickedmic (~wickedmic@ip-037-201-214-002.um10.pools.vodafone-ip.de)
[07:54:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:54:13] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[07:54:29] *** Joins: luna-is-here (~quassel@ip-095-223-058-048.um35.pools.vodafone-ip.de)
[07:55:05] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:56:18] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:ec92:fad1:5a31:6c82)
[07:56:36] *** Quits: xiongxin (~Thunderbi@2409:8955:2e88:18e1:3184:f55a:7cbe:ae3b) (Ping timeout: 240 seconds)
[07:56:42] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:57:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:01:48] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[08:02:10] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[08:02:25] *** Joins: smeso (~smeso@user/smeso)
[08:06:49] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[08:08:07] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[08:09:26] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[08:10:29] *** Joins: Starfoxxes (~Starfoxxe@ip-037-201-006-167.um10.pools.vodafone-ip.de)
[08:10:41] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:11:04] *** Joins: pycurious (~Adium@user/pycurious)
[08:15:53] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[08:16:10] *** Joins: pycurious (~Adium@user/pycurious)
[08:18:01] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[08:22:36] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[08:25:34] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 272 seconds)
[08:33:43] *** Joins: pycurious (~Adium@user/pycurious)
[08:35:06] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[08:38:33] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[08:39:41] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:43:10] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[08:43:11] *** Joins: nutboy (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[08:43:28] *** Quits: nutboy (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Remote host closed the connection)
[08:46:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:48:04] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[08:48:04] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[08:48:21] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[08:48:34] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[08:49:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:51:06] *** Joins: pycurious (~Adium@user/pycurious)
[08:53:47] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:54:59] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:01:19] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:03:18] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:09:57] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[09:10:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[09:10:34] *** Joins: xiongxin (~Thunderbi@2409:8955:2e88:18de:2891:93d6:3a63:3ab4)
[09:11:00] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[09:13:41] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[09:13:42] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Read error: Connection reset by peer)
[09:13:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Write error: Connection reset by peer)
[09:13:42] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Write error: Connection reset by peer)
[09:13:42] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Write error: Connection reset by peer)
[09:13:42] *** Quits: sophia (~nafen@gateway/tor-sasl/nafen) (Read error: Connection reset by peer)
[09:13:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Read error: Connection reset by peer)
[09:13:42] *** Quits: kevr (~kevr@user/kevr) (Read error: Connection reset by peer)
[09:13:42] *** Quits: bindu (~bindu@user/bindu) (Read error: Connection reset by peer)
[09:13:42] *** Quits: teepee (~teepee@openscad/teepee) (Read error: Connection reset by peer)
[09:13:42] *** Quits: spithash (~spithash@user/spithash) (Read error: Connection reset by peer)
[09:13:42] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Read error: Connection reset by peer)
[09:14:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[09:16:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[09:16:33] *** Joins: kevr (~kevr@user/kevr)
[09:16:33] *** Joins: bindu (~bindu@user/bindu)
[09:16:34] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[09:16:35] *** Joins: teepee (~teepee@openscad/teepee)
[09:16:57] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[09:17:33] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:17:36] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[09:18:12] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:18:18] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:18:26] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[09:18:56] *** Joins: spithash (~spithash@user/spithash)
[09:21:35] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[09:29:09] *** Joins: kst (~user@cpe-70-95-182-43.san.res.rr.com)
[09:36:15] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:36:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[09:37:17] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:37:57] *** Quits: xiongxin (~Thunderbi@2409:8955:2e88:18de:2891:93d6:3a63:3ab4) (Ping timeout: 240 seconds)
[09:41:12] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:41:27] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:43:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:19] *** ChanServ sets mode: +v npaperbot
[09:46:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:47:32] *** Quits: FAT1337 (~IceChat78@user/fat1337) (Read error: Connection reset by peer)
[09:48:49] *** Joins: FAT1337 (~IceChat78@user/fat1337)
[09:49:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:50:37] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:50:37] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[09:50:37] *** Quits: bindu (~bindu@user/bindu) (Read error: Connection reset by peer)
[09:50:37] *** Quits: teepee (~teepee@openscad/teepee) (Write error: Connection reset by peer)
[09:50:37] *** Quits: kevr (~kevr@user/kevr) (Write error: Connection reset by peer)
[09:50:37] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Write error: Connection reset by peer)
[09:50:37] *** Quits: spithash (~spithash@user/spithash) (Write error: Connection reset by peer)
[09:50:37] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Read error: Connection reset by peer)
[09:50:37] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Read error: Connection reset by peer)
[09:50:37] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Read error: Connection reset by peer)
[09:50:49] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[09:50:50] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[09:50:50] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:50:51] *** Joins: spithash (~spithash@user/spithash)
[09:50:51] *** Joins: bindu (~bindu@user/bindu)
[09:50:52] *** Joins: kevr (~kevr@user/kevr)
[09:51:02] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[09:51:07] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:51:23] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[09:51:52] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[09:52:04] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:52:19] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:52:20] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 272 seconds)
[09:52:36] *** Joins: bindu (~bindu@user/bindu)
[09:52:51] *** Joins: teepee (~teepee@openscad/teepee)
[09:56:50] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[10:06:05] *** Joins: pycurious (~Adium@user/pycurious)
[10:06:27] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:07:11] *** Quits: DeepComa (~PhoenixCo@user/alien-fx-fiend/x-2328408) (Quit: .oO (bbl tc folks~!))
[10:07:31] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:10:29] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 250 seconds)
[10:15:01] *** Joins: jancoow (~jancoow@user/jancoow)
[10:19:00] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Ping timeout: 240 seconds)
[10:19:06] *** Joins: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[10:22:22] *** Joins: xiongxin (~Thunderbi@2409:8955:2e88:2df3:beab:ad08:2d6a:98c5)
[10:23:30] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:ec92:fad1:5a31:6c82) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:25:06] *** Joins: pycurious (~Adium@user/pycurious)
[10:25:30] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[10:25:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[10:27:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[10:30:20] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:32:56] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:35:45] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[10:36:49] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:40:23] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:47:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:50:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:51:03] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:51:20] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[10:52:04] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 3.3)
[10:54:42] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:54:58] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:55:26] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:03:14] *** Joins: jibsen (~jibsen@176-20-143-151-dynamic.dk.customer.tdc.net)
[11:03:36] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[11:04:33] *** Joins: fluter (~fluter@user/fluter)
[11:06:45] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:08:23] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:09:14] *** Joins: callq (~callq@2409:4062:2e1f:6d40:bd35:cc34:c5f2:a729)
[11:09:57] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.19)
[11:10:43] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.19) (Max SendQ exceeded)
[11:11:12] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.211)
[11:11:57] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.211) (Max SendQ exceeded)
[11:12:26] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.211)
[11:13:13] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.211) (Max SendQ exceeded)
[11:13:41] *** Joins: the_lanetly_052_ (~the_lanet@194.135.169.19)
[11:14:43] <jibsen> Say I have a header with a constexpr function that does some computation with chars, I'd like to use a 256 entry lookup table without creating it on the stack every call, what is a good way to achieve this? atm I have an inline constexpr std::array in a detail namespace in the header file
[11:14:47] *** Quits: the_lanetly_052_ (~the_lanet@194.135.169.19) (Max SendQ exceeded)
[11:15:17] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.211)
[11:15:35] <TinoDidriksen> Is the table static? If so, keyword static.
[11:16:10] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:16:20] <jibsen> afaict you cannot have static variables in a constexpr function?
[11:18:10] <TinoDidriksen> But then your comment about stack doesn't make sense either. It would likely be optimized to static data either way.
[11:19:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:bdc4:aa3c:e7e5:fc71)
[11:23:13] <jibsen> good point about stack not making sense :)
[11:23:39] <jibsen> in the case where it is not evaluated at compile time, I would like to be fairly certain it is not generated on the stack
[11:24:17] <jibsen> take for instance https://godbolt.org/z/znn7jPK37
[11:26:25] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[11:27:22] *** Joins: ckdCreations (~ckdCreati@147.55.133.132)
[11:27:48] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[11:27:58] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[11:30:35] <TinoDidriksen> jibsen, huh, and yet https://gcc.godbolt.org/z/AdduDS does optimize to a static lookup table (from https://reddit.com/r/cpp/comments/b04smy/ )
[11:31:00] *** Joins: jsbach (~jsbach@2a01:c22:b1ed:e700:9ffd:5647:de50:159b)
[11:36:08] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[11:36:30] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[11:37:24] <jibsen> hmm as far as I can tell, all those mov in the with_g function are copying the large_table values to a temporary table on the stack
[11:38:21] *** Quits: analognoise (~analognoi@185.229.59.133) (Read error: Connection reset by peer)
[11:38:39] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[11:39:02] <jibsen> it just feels .. slightly bad to have to have a global variable for the table to make it static, as opposed to be able to have something like constexpr static inside the function :/
[11:39:26] <TinoDidriksen> It does, but you're right that it looks like the only guaranteed way.
[11:39:28] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:39:47] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:40:08] <jibsen> okay, I'll stick with the detail namespace thing for now then, thanks for the input!
[11:41:01] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:42:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[11:44:09] *** Joins: rendar (~rendar@user/rendar)
[11:46:25] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[11:46:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[11:47:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:48:19] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:51:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:56:36] *** Quits: xiongxin (~Thunderbi@2409:8955:2e88:2df3:beab:ad08:2d6a:98c5) (Ping timeout: 240 seconds)
[11:58:40] *** Joins: rcoote (~rcoote@2a02:908:690:a140:633a:3de6:73ee:bac1)
[11:59:53] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[12:00:06] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[12:00:19] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[12:03:34] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:bc03:7574:25e1:4f12)
[12:04:38] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[12:08:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[12:09:21] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 256 seconds)
[12:09:32] *** Joins: Stryykert (~stryyke1@about/windows/staff/stryyker)
[12:10:46] *** Joins: gentooclimax (~gentoocli@2a02-8440-3340-1c3a-c143-4578-2f86-0268.rev.sfr.net)
[12:11:03] *** Joins: pycurious (~Adium@user/pycurious)
[12:12:43] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[12:13:09] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[12:13:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[12:14:25] *** Quits: gentooclimax (~gentoocli@2a02-8440-3340-1c3a-c143-4578-2f86-0268.rev.sfr.net) (Client Quit)
[12:14:34] *** Joins: xiongxin (~Thunderbi@2409:8955:2e88:b55:2334:5dc4:2226:271c)
[12:15:59] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[12:17:53] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[12:19:11] *** Joins: hashfunc1930 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[12:20:01] *** Joins: MajorBiscuit (~MajorBisc@c-001-025-058.client.tudelft.eduvpn.nl)
[12:20:46] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 245 seconds)
[12:22:01] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[12:27:52] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:7576:60fe:82c1:a27b:c613)
[12:28:07] *** Joins: qaluh (~qaluh@user/qaluh)
[12:28:42] *** Joins: pycurious (~Adium@user/pycurious)
[12:30:06] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Quit: You have been kicked for being idle)
[12:33:03] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[12:33:20] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[12:34:46] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:7576:60fe:82c1:a27b:c613) (Remote host closed the connection)
[12:35:00] <ville> jibsen: it's perfectly fine to have read-only globals
[12:35:04] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:7576:60fe:82c1:a27b:c613)
[12:35:12] <ville> LUTs and whatnot
[12:37:02] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[12:37:17] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[12:37:32] *** Quits: qaluh (~qaluh@user/qaluh) (Remote host closed the connection)
[12:38:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[12:38:50] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[12:39:03] *** Joins: N4buc0- (~N4buc0@201.22.12.94.dynamic.adsl.gvt.net.br)
[12:40:13] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:7576:60fe:82c1:a27b:c613) (Remote host closed the connection)
[12:42:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[12:47:19] <jibsen> ville: I think my reservation was partly due to it being a header, but from my understanding inline constexpr variables should be safe in headers
[12:48:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:50:33] *** Joins: gentooclimax (~gentoocli@2a02-8440-3340-1c3a-c143-4578-2f86-0268.rev.sfr.net)
[12:51:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[12:56:15] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:57:29] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:59:49] *** Joins: andreasbuhr (~quassel@p549db052.dip0.t-ipconnect.de)
[13:00:24] *** Cahaan_ is now known as Cahaan
[13:01:49] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[13:02:07] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[13:02:29] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:03:10] <ville> yes. and if you lack inline variables you can still approcimate them through a static class template member
[13:03:42] <ville> err approximate, but i guess "approcimate" was close enough
[13:03:57] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:04:48] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:04:51] *** Joins: Iolo (~Iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[13:07:38] *** Joins: hinata (~hinata@2409:4042:d16:67df:8d0e:40ca:301d:b19f)
[13:10:22] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:14:54] *** Quits: hashfunc1930 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 250 seconds)
[13:15:38] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[13:17:15] *** Quits: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:24:33] *** Joins: qaluh (~qaluh@user/qaluh)
[13:25:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:26:56] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[13:30:17] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[13:30:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:36] *** Quits: xiongxin (~Thunderbi@2409:8955:2e88:b55:2334:5dc4:2226:271c) (Ping timeout: 250 seconds)
[13:41:37] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:bc03:7574:25e1:4f12) (Remote host closed the connection)
[13:42:00] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7429:3422:7c3f:d976)
[13:42:17] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[13:42:18] *** Quits: gentooclimax (~gentoocli@2a02-8440-3340-1c3a-c143-4578-2f86-0268.rev.sfr.net) (Quit: Konversation terminated!)
[13:43:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[13:43:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:19] *** ChanServ sets mode: +v npaperbot
[13:46:59] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:47:19] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[13:48:01] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 250 seconds)
[13:48:32] *** Quits: rcoote (~rcoote@2a02:908:690:a140:633a:3de6:73ee:bac1) (Ping timeout: 240 seconds)
[13:48:47] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:50:17] *** Joins: KoVadim (~Vadim@37.203.10.4)
[13:50:52] *** Joins: akuma (~i.am@user/marlboro)
[13:52:07] *** Quits: johnjaye (~pi@173.209.64.74) (Quit: WeeChat 3.3)
[13:52:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:54:00] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:54:21] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[13:58:23] *** Quits: qaluh (~qaluh@user/qaluh) (Ping timeout: 252 seconds)
[14:00:35] *** Quits: N4buc0- (~N4buc0@201.22.12.94.dynamic.adsl.gvt.net.br) (Ping timeout: 250 seconds)
[14:09:29] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:11:43] *** Joins: jellie (~luv_panda@user/jellie)
[14:14:31] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[14:15:58] *** Joins: AmR (~AmREiSa@156.199.24.196)
[14:16:31] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[14:16:40] *** ElementW_ is now known as ElementW
[14:19:06] *** Joins: plastico (~plastico@neomutt/plastico)
[14:19:29] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[14:19:57] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[14:21:23] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[14:26:29] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[14:29:46] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[14:33:47] *** Joins: furrymcgee (~devuan@cgn-89-1-209-226.nc.de)
[14:35:05] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[14:35:22] *** Joins: kevr (~kevr@user/kevr)
[14:36:34] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:37:05] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:37:16] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[14:39:05] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 252 seconds)
[14:40:28] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:42:49] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[14:43:55] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[14:43:58] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[14:46:35] *** Quits: callq (~callq@2409:4062:2e1f:6d40:bd35:cc34:c5f2:a729) (Quit: callq)
[14:49:33] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:50:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[14:52:45] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[14:52:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:54:16] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:55:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[14:59:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[15:00:08] *** Joins: Enitin (~Enitin@82.180.145.226)
[15:02:05] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[15:02:26] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[15:05:00] *** Quits: hinata (~hinata@2409:4042:d16:67df:8d0e:40ca:301d:b19f) (Ping timeout: 240 seconds)
[15:06:17] *** Joins: hinata (~hinata@152.57.118.166)
[15:06:37] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[15:09:25] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:09:36] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:10:37] *** Quits: hinata (~hinata@152.57.118.166) (Read error: Connection reset by peer)
[15:12:21] *** Joins: Linux77 (~leonardo@2804:d45:8c08:9300:76d0:2bff:fe7a:f3a4)
[15:12:21] *** Joins: hinata (~hinata@2409:4042:230e:f604:8d0e:40ca:301d:b19f)
[15:12:23] *** Quits: Linux77 (~leonardo@2804:d45:8c08:9300:76d0:2bff:fe7a:f3a4) (Remote host closed the connection)
[15:14:21] *** Joins: Linux77 (~leonardo@2804:d45:8c08:9300:76d0:2bff:fe7a:f3a4)
[15:16:18] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[15:17:23] *** Joins: Burgundy (~NA@86.121.143.206)
[15:17:29] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:19:27] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7429:3422:7c3f:d976) (Ping timeout: 250 seconds)
[15:22:32] *** Quits: hinata (~hinata@2409:4042:230e:f604:8d0e:40ca:301d:b19f) (Ping timeout: 252 seconds)
[15:22:42] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[15:23:21] *** Joins: hinata (~hinata@2409:4042:d16:67df:8d0e:40ca:301d:b19f)
[15:23:27] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[15:24:52] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[15:24:59] *** Quits: letto (~letto@188.26.152.131) (Read error: Connection reset by peer)
[15:25:38] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Max SendQ exceeded)
[15:25:46] *** Joins: letto (~letto@188.26.152.131)
[15:26:11] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[15:26:31] *** Joins: Guest5923 (~Guest59@155.190.35.5)
[15:27:30] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[15:27:41] *** Quits: AmR (~AmREiSa@156.199.24.196) (Ping timeout: 256 seconds)
[15:27:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[15:32:10] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[15:32:34] <Guest5923> Hello Cpp community
[15:32:41] <Guest5923> please check this out
[15:32:42] <Guest5923> https://wandbox.org/permlink/FPeTMdYOTYimBHUb
[15:33:00] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[15:33:21] <Guest5923> can someone explain the line 14 ?
[15:34:00] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[15:34:11] <KoVadim> your link does not work
[15:35:24] *** Quits: hinata (~hinata@2409:4042:d16:67df:8d0e:40ca:301d:b19f) (Ping timeout: 240 seconds)
[15:38:12] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[15:39:09] <mitch0> Guest5923: placement new, see https://en.cppreference.com/w/cpp/language/new
[15:39:54] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[15:40:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:42:13] *** Joins: Enitin (~Enitin@82.180.145.230)
[15:44:12] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[15:45:44] *** Joins: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de)
[15:47:31] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[15:47:37] *** Quits: rcoote (~rcoote@ip-176-198-113-232.um43.pools.vodafone-ip.de) (Client Quit)
[15:48:18] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[15:49:47] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:50:12] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:52:42] *** Joins: AmR (~AmREiSa@156.207.214.125)
[15:54:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[15:55:45] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[15:56:07] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[15:56:30] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[16:00:10] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:00:25] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:00:45] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:01:07] *** Joins: Leone (~Leo@216.154.12.122)
[16:03:12] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:03:25] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:05:23] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 250 seconds)
[16:06:48] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[16:10:01] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:10:37] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[16:26:35] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 240 seconds)
[16:27:29] *** Quits: AmR (~AmREiSa@156.207.214.125) (Ping timeout: 256 seconds)
[16:27:32] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 272 seconds)
[16:29:11] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:29:25] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[16:30:10] *** Joins: JohnMS_WORK (~kvirc@89.64.70.205)
[16:32:13] *** Quits: jibsen (~jibsen@176-20-143-151-dynamic.dk.customer.tdc.net) (Quit: Leaving)
[16:33:01] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[16:33:22] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:34:00] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:34:20] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:39:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:40:24] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 265 seconds)
[16:44:28] *** Joins: rvalue (~rvalue@user/rvalue)
[16:45:19] *** Joins: jellie (~luv_panda@user/jellie)
[16:46:31] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:46:47] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[16:50:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:53:42] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:54:13] *** Joins: pulse (~pulse@user/pulse)
[16:54:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:55:01] *** Joins: zen_coder (~zen_coder@141.113.66.44)
[16:55:31] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:58:36] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[16:59:27] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:59:49] *** Joins: lokirf_ (~lokirf@111.29.80.180)
[17:01:38] *** Quits: lokirf_ (~lokirf@111.29.80.180) (Client Quit)
[17:01:59] *** Quits: Guest5923 (~Guest59@155.190.35.5) (Quit: Client closed)
[17:02:43] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[17:03:24] *** Quits: zen_coder (~zen_coder@141.113.66.44) (Ping timeout: 240 seconds)
[17:03:38] *** Quits: zer0x_ (~zer0x@58.186.65.98) (Ping timeout: 272 seconds)
[17:03:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:06:48] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[17:07:07] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:08:44] *** Joins: AmR (~AmREiSa@156.199.192.24)
[17:10:23] *** Joins: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[17:10:50] *** Joins: constxo (~brad@142.134.79.191)
[17:10:54] <constxo> hello kings
[17:11:10] <constxo> let's say you have some class right
[17:11:36] <constxo> Foo
[17:12:09] * GyrosGeier is a proletarian
[17:12:13] <constxo> and u want to be able to make it from Bar, but instead of a constructor that takes Bar u want a static method called fromBar
[17:12:39] <constxo> what's the right way to do it
[17:13:20] <river> constxo: <3
[17:13:25] <PJBoy> by writing code
[17:13:34] <PJBoy> what's stopping you?
[17:13:37] <GyrosGeier> constxo, private constructor and make the static method a friend
[17:13:42] <constxo> private constructor that takes `const Bar&` and then have fromBar { return std::move(Foo(bar)); } ?
[17:13:53] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[17:13:58] <PJBoy> never return std::move(expr)
[17:14:05] <constxo> ok
[17:14:16] <constxo> was about to ask if that was useless
[17:14:22] <constxo> but
[17:14:34] <PJBoy> the committee decided it makes the most sense to pessimise programmers that use std::move there
[17:14:47] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[17:15:05] <constxo> is there a disadvantage to using this static method instead of just making the Bar constructor public?
[17:15:30] * GyrosGeier looks into crystal ball
[17:15:46] <GyrosGeier> are you perhaps looking for a way to make the constructor explicit?
[17:16:12] <GyrosGeier> because there is totally a keyword for that
[17:16:28] *** Joins: jellie (~luv_panda@user/jellie)
[17:16:43] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[17:17:07] <PJBoy> yeah it depends on your reason for wanting a static member function
[17:17:34] <constxo> it wasn't my decision, but i'm assuming it's just a matter of style
[17:17:40] <PJBoy> if you don't expose Foo(Bar), then you can't write `Foo foo(some_bar);`
[17:17:43] <constxo> Bar in my case is JSON
[17:17:53] <constxo> right PJBoy and that seems undesirable
[17:18:00] <PJBoy> and so generic code that does `T obj(arg);` also won't work
[17:18:24] <PJBoy> yeah normally you want a ctor and you have to justify avoiding one
[17:18:57] *** Joins: lokirf (~lokirf@111.29.80.180)
[17:19:06] <GyrosGeier> people who don't know about "explicit" avoid ctors because they allow conversion
[17:19:11] <constxo> i'm being asked to write this class and give it a fromJSON method -- maybe just because Foo.fromJSON(json) is more explicit than Foo(json)
[17:19:27] <constxo> in the colloquial sense of 'explicit'
[17:20:16] <GyrosGeier> like, not being able to pass a JSON object where a Foo object is expected might be desirable
[17:20:49] <constxo> i don't think that's a concern here, i think the idea is just to have a 'named constructor', so to speak
[17:21:26] <constxo> but idk, i'll just do as i'm told and go with the private constructor + friend
[17:21:31] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[17:22:03] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:25:01] *** Joins: Rynn (~rynn@216.30.158.198)
[17:25:10] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Client Quit)
[17:25:22] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:25:33] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[17:26:05] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:26:41] <ville> PJBoy: did they fix when your expression is a member of something with out a cast?
[17:27:17] <ville> i recall odweyer had a some writing about it but can't recall the outcome
[17:27:21] <PJBoy> like `return expr.member;`?
[17:27:25] <ville> yes
[17:27:39] *** Joins: s1b1 (~s1b1@user/s1b1)
[17:27:40] <PJBoy> not sure, 'cause that would be an xvalue
[17:28:42] <ville> anyways at least in 11 you needed to do the cast to get a move
[17:28:49] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Client Quit)
[17:28:54] <PJBoy> the test I just did indicates you get move
[17:29:05] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:29:08] <PJBoy> { B b = f(); } using tracked::B; struct S { B b; }; B f() { return S().b; }
[17:29:09] <geordi> B0* B0=>B1* B0~ B1~
[17:29:27] <PJBoy> but not copy elision as I was expecting
[17:29:44] <PJBoy> because it's an xvalue, right
[17:29:48] <ville> probably alright in that case. if it's return member.member then  you'd need move
[17:30:06] <ville> err need cast to get move
[17:30:06] <PJBoy> yeah, and you should need a move in that case
[17:30:13] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[17:30:15] <PJBoy> yeah
[17:30:31] <PJBoy> and member.member would be an lvalue, hooray for value categories
[17:30:39] <PJBoy> it all makes perfect sense
[17:31:01] *** Joins: bebyx (~Thunderbi@user/bebyx)
[17:32:03] <ville> anyways once again proving that it's rather difficult to make accurate absolute statements about c++
[17:33:29] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:33:52] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[17:34:26] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[17:36:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:37:49] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:40:52] <PJBoy> it is
[17:41:07] <PJBoy> I really wish they'd just *not* make std::move a pessimisation
[17:41:18] <PJBoy> I don't see the appeal personally
[17:41:33] *** Joins: Azem (~haise01@user/haise01)
[17:42:06] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:42:23] <furrymcgee> what do you want std::move to be?
[17:42:24] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:42:44] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:43:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:20] *** ChanServ sets mode: +v npaperbot
[17:43:36] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:45:14] <PJBoy> move is just a cast
[17:46:12] *** Joins: sobkas (~sobkas@95.175.17.217)
[17:46:24] <PJBoy> I would want the language to pretend std::move does nothing when given a prvalue in a return statement
[17:46:46] <PJBoy> allowing RVO
[17:48:00] <PJBoy> return already has special semantics w.r.t. the value category it returns, I just want it to see through a cast like std::move
[17:48:27] <PJBoy> no one who writes `return std::move(expr);` does it to pessimise their code, so it's a pointless gotcha
[17:48:39] *** Joins: Brainium (~brainium@user/brainium)
[17:49:48] <furrymcgee> return move ... is more than ugly, noone should have to use it
[17:50:30] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 272 seconds)
[17:51:06] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:51:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:54:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:55:00] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:56:22] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e10d:be3:25e9:7a3a)
[17:56:22] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e10d:be3:25e9:7a3a) (Changing host)
[17:56:22] *** Joins: skapata (~Skapata@user/skapata)
[17:57:37] <rpav> i think PJBoy is asking for `return std::move(..)` to do nvro?
[17:58:22] <PJBoy> I want `return std::move(expr);` to behave like `return expr;`
[17:58:29] <rpav> ah
[17:59:04] <rpav> though what for? you shouldn't have to use it to begin with should you?
[17:59:33] <PJBoy> sometimes you do need the std::move there, like when returning a data member
[18:00:05] <PJBoy> but more generally, I just don't think move should ever slow things down
[18:00:20] <PJBoy> clearly the programmer intent is to not slow things down
[18:01:10] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:02:05] *** Joins: Rynn (~rynn@216.30.158.198)
[18:03:55] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[18:04:54] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[18:08:09] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[18:08:41] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[18:09:09] *** Quits: vext01 (~edd@hudzen10.theunixzoo.co.uk) (Quit: WeeChat 3.2.1)
[18:10:05] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[18:10:31] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[18:13:00] *** Quits: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net) (Quit: Client closed)
[18:13:43] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[18:15:28] <fiesh> I would have loved it had the contract been "the compiler decides when to use move ctor/assignment and when copy, no guarantees", possibly with an extra opt-in move-is-allowed-here
[18:16:23] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:17:35] *** Joins: zer0x_ (~zer0x@58.186.65.98)
[18:17:45] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[18:18:17] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:19:20] *** Quits: lokirf (~lokirf@111.29.80.180) (Quit: Leaving)
[18:20:38] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[18:22:34] <rpav> the compiler making more decisions is probably the wrong decision
[18:22:38] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[18:23:46] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[18:24:04] *** Quits: zer0x_ (~zer0x@58.186.65.98) (Ping timeout: 272 seconds)
[18:25:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[18:25:10] <fiesh> why is that?
[18:30:25] <rpav> less control / fewer guarantees over what happens makes a less-powerful language
[18:31:26] <rpav> (trivially if you can no longer write code where you are guaranteed it will behave in different ways, your language can generate fewer programs)
[18:31:41] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.54)
[18:32:36] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.211) (Ping timeout: 240 seconds)
[18:34:23] <furrymcgee> I would rather not use it, something like inline keyword
[18:34:54] <rpav> `return inline v;`
[18:35:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:37:16] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:37:26] *** Joins: frost (~frost@user/frost)
[18:40:08] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[18:42:23] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[18:43:28] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:44:41] *** Inline__ is now known as Inline
[18:47:31] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[18:48:36] *** Joins: ibenn (~ibenn@2a02:8071:45af:1700:4fb0:4b14:64dc:e322)
[18:48:49] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:52:04] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:52:10] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:52:15] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:53:55] <ville> just have a completely different object/memory model. none of this copying and user-defined copy operations crap
[18:55:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:56:23] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:01:15] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[19:02:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[19:03:08] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[19:03:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:05:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:06:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[19:06:48] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:10:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:11:23] *** Joins: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de)
[19:14:26] <Hello71> something something rust something
[19:19:57] <Eelis> Hello71: offtopic (are you really this dense?)
[19:20:36] <Hello71> Eelis: maybe you are
[19:21:00] <Eelis> you're the one trying to bring up Rust in a C++ channel
[19:23:59] *** Joins: magla (~gelignite@55d47d67.access.ecotel.net)
[19:28:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:29:12] *** Joins: letto2 (~letto@86.122.65.239)
[19:29:23] *** Quits: letto (~letto@188.26.152.131) (Ping timeout: 256 seconds)
[19:32:17] *** Joins: Hercules (~Hercules@user/hercules)
[19:35:37] *** Quits: JohnMS_WORK (~kvirc@89.64.70.205) (Ping timeout: 256 seconds)
[19:36:05] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[19:38:50] *** Quits: proller (~p@2a02:6b8:b081:8816::1:22) (Ping timeout: 250 seconds)
[19:40:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[19:43:05] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:43:19] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:44:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[19:46:48] *** Joins: proller (~p@80.240.216.69)
[19:48:18] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[19:48:41] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 256 seconds)
[19:49:30] <TheGuestMovie> I have a basic question about bitwise operations (just 4 lines of code), specifically, extracting a span of bits from a bigger number. http://paste.debian.net/plain/1232656
[19:52:39] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:53:41] <acidtonic> I use std::bitset<bitsdesired>( value )
[19:54:04] *** Joins: zen_coder (~zen_coder@141.113.66.44)
[19:55:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[19:56:03] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[19:56:18] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:56:38] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[19:56:43] <welder> why do you need to count trailing zeros? If you are creating the mask by yourself, you know a priori how many bits to the left shift
[19:57:06] <welder> to the right
[19:57:42] <kalven> TheGuestMovie: you can shift before you mask
[20:02:50] <acidtonic> Thinking about a design question, I have a high speed PLC thread that must maintain 250ms response times to not fault an external device. I have a slower 15-30fps thread that needs to read/write variables the PLC thread is using. Normally would mutex it but can't guarantee the video thread won't starve the PLC thread. Is there a pattern where I can have the PLC thread control unlocking such that the Video thread can only
[20:02:50] <acidtonic> win the lock if it "lines up" and potentially if the PLC thread decides to unlock somehow expire/force-sleep the other-thread such that it cannot hang up the preferred thread?
[20:04:04] <acidtonic> My first thought was to just use copying or message passing but I'm interested in whether my original idea would work?
[20:04:17] *** Quits: tct (~tct@user/tct) (Read error: Connection reset by peer)
[20:04:38] *** Quits: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de) (Quit: leaving)
[20:04:44] *** Joins: tct (~tct@user/tct)
[20:05:07] <anyone> sounds like you want an RCU-style approach
[20:05:29] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[20:07:45] <anyone> basically some  static atomic<T*> dataforpcl;  that gets either snatched by the PCL, or gets replaced by the video thread (if and when it has something new to share)
[20:07:46] <acidtonic> simplified I think I'd like a mutex that has a function similar to "unlock_up_to_max_duration( time_t )" with a guarantee my thread will come back with a mutex locked within time_t
[20:08:01] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[20:09:08] *** Joins: proller (~p@2a02:6b8:b081:8808::1:9)
[20:09:38] <anyone> such guarantees can generally not be given, due to unknown parameters in the OS
[20:09:54] <TheGuestMovie> welder: I wanted to write a generalized function to get the value of a length of bits in a value (eg "int extract_bits(int input_value, int start_bit_pos, int end_bit_pos)", in a smarter way than cascaded  if/else on every possible bit mask :)
[20:10:08] <acidtonic> anyone, I'm aware of the rtos issues, I'm happy with soft guarantees
[20:10:37] <TheGuestMovie> so for my above example, I would call it using extract_bits(52, 2, 5)
[20:16:32] *** Quits: zen_coder (~zen_coder@141.113.66.44) (Ping timeout: 240 seconds)
[20:18:50] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[20:22:18] *** Quits: MBrod208 (~MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[20:23:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 252 seconds)
[20:28:06] *** Joins: epony (epony@user/epony)
[20:28:29] <PJBoy> `(1 << n) - 1` gets you the bitmask for n bits
[20:28:30] <ville> auto mask_width = e - b; auto mask = (1 << mask_width) - 1; or so
[20:28:33] *** Joins: Guga (~Guga@bl15-106-146.dsl.telepac.pt)
[20:28:58] <bitmask> psh
[20:29:06] <Guga> hi
[20:29:08] <bitmask> :P
[20:29:12] <Guga> :)
[20:29:30] <PJBoy> also for bitwise operations, all of your integers should be unsigned at every step
[20:29:35] <ville> then either shift it up by b, or shift the value down by b, dependiing...
[20:30:25] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:32:28] *** Quits: Guga (~Guga@bl15-106-146.dsl.telepac.pt) (Client Quit)
[20:34:41] <TheGuestMovie> thanks, I got somewhere to start with
[20:34:52] *** Joins: Guga (~Guga@bl15-106-146.dsl.telepac.pt)
[20:35:50] <PJBoy> oh except if your mask width = bit width of the data type
[20:35:53] *** Quits: Guga (~Guga@bl15-106-146.dsl.telepac.pt) (Client Quit)
[20:35:57] <PJBoy> that needs special casing
[20:36:06] *** Joins: Guest75 (~Guest75@2620:10d:c091:480::1:8838)
[20:36:59] <PJBoy> or doing `mask = (1 << mask_width / 2 << mask_width - mask_width / 2)`
[20:37:13] <PJBoy> erm
[20:37:25] *** Joins: Guga (~Guga@bl15-106-146.dsl.telepac.pt)
[20:37:26] <PJBoy> yeah that's right
[20:37:59] <Guga> .
[20:38:37] <PJBoy> I dropped the `- 1 v_v
[20:39:17] *** Quits: Guga (~Guga@bl15-106-146.dsl.telepac.pt) (Client Quit)
[20:39:43] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[20:40:49] <Guest75> Why would a base class has a virtual function with a nameless parameter? Is it because this allow implementing classes to define the name of the parameter?
[20:41:16] <rpav> naming parameters in the prototype is unnecessary
[20:41:26] <rpav> and has no bearing on the implementation or subclasses
[20:41:33] *** Joins: teut (~teut@103.144.92.196)
[20:43:40] <Guest75> Gotcha hmm I guess i have to ask the code author for their reason
[20:44:01] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:44:18] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:44:28] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[20:44:58] <rpav> i think it's semi-common to omit if it's obvious what the parameter represents
[20:45:27] <rpav> like if you have `insert(T*)`, it's sortof unnecessary noise to say `insert(T* value)`
[20:47:17] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[20:47:29] <TheGuestMovie> did my last chat go through? I was thanking PJBoy
[20:47:58] <PJBoy> https://tinodidriksen.com/pisg/libera/logs/%23c++/today.log
[20:48:49] *** Quits: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:48:58] <TheGuestMovie> PJBoy: thanks. Also by introducing me to the term "width" I was finally able to google a tutorial that was more than just basic use of the bitwise operators. https://graphics.stanford.edu/~seander/bithacks.html#ZerosOnRightLinear  , I got something to help me level up now.   Btw, is there an established term for "extracting a span of bits"? I
[20:48:58] <TheGuestMovie> imagine that's quite common when decoding binary messages, which would contain multiple fields.
[20:50:10] <PJBoy> unpacking bit strings(?)
[20:50:18] <PJBoy> or bit unpacking
[20:50:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[20:50:24] *** Joins: Guga (~Guga@bl15-108-227.dsl.telepac.pt)
[20:51:00] <TheGuestMovie> nice, that seems to be it
[20:51:09] *** Joins: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de)
[20:52:47] *** Quits: Guga (~Guga@bl15-108-227.dsl.telepac.pt) (Quit: Going offline, see ya! (www.adiirc.com))
[20:53:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:53:43] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Quit: Leaving.)
[20:54:08] *** Joins: rgrinberg (~textual@2806:101e:7:8d89:1802:de9a:e357:e4e3)
[20:54:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[20:56:50] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[20:57:01] *** Quits: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:01:03] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:01:17] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:03:01] *** Quits: andreasbuhr (~quassel@p549db052.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:03:41] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:05:15] *** Quits: Guest75 (~Guest75@2620:10d:c091:480::1:8838) (Quit: Client closed)
[21:08:59] *** Quits: teut (~teut@103.144.92.196) (Quit: Client closed)
[21:09:00] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[21:10:42] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[21:12:30] *** Joins: jellie (~luv_panda@user/jellie)
[21:23:12] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:23:26] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[21:23:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[21:25:36] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:26:00] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Quit: WeeChat 3.3)
[21:28:05] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:28:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 252 seconds)
[21:31:20] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 2.8)
[21:31:21] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f982:9168:8567:5a09)
[21:31:34] *** Joins: lispy (~lispy@user/lispy)
[21:34:05] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:34:19] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:38:00] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[21:38:18] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[21:41:10] *** Quits: ibenn (~ibenn@2a02:8071:45af:1700:4fb0:4b14:64dc:e322) (Quit: Leaving)
[21:43:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:22] *** ChanServ sets mode: +v npaperbot
[21:46:51] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[21:54:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:57:13] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[21:57:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:02:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Ping timeout: 240 seconds)
[22:03:51] *** Quits: rgrinberg (~textual@2806:101e:7:8d89:1802:de9a:e357:e4e3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:06:22] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f982:9168:8567:5a09) (Remote host closed the connection)
[22:06:46] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7429:3422:7c3f:d976)
[22:07:34] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[22:08:10] *** Joins: xkuru (~xkuru@user/xkuru)
[22:08:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a)
[22:09:46] *** Joins: Guest3867 (~Guest@host129.190-139-78.telecom.net.ar)
[22:10:13] *** Joins: rgrinberg (~textual@2806:101e:7:8d89:1802:de9a:e357:e4e3)
[22:11:09] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[22:12:17] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[22:15:06] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:32:01] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.54) (Ping timeout: 245 seconds)
[22:40:28] *** Quits: MajorBiscuit (~MajorBisc@c-001-025-058.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[22:40:35] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[22:41:18] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:41:29] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:43:04] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[22:43:47] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Ping timeout: 256 seconds)
[22:44:38] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Ping timeout: 260 seconds)
[22:45:51] *** Joins: seachdamh (~seachdamh@user/seachdamh)
[22:46:43] *** Quits: seachdamh (~seachdamh@user/seachdamh) (Client Quit)
[22:49:46] <Alipha> constxo: in `Foo::fromJSON(json)`, is `json` a std::string?
[22:54:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:54:59] *** Joins: karls_ (~karls@205.178.87.116)
[22:58:05] *** Joins: jplejacq1 (~jplejacq@24.224.90.176)
[22:58:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:58:40] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:58:56] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[22:58:56] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 272 seconds)
[23:00:02] *** Quits: Iolo (~Iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Quit: Iolo)
[23:00:10] *** Quits: Null_A (~null_a@2601:645:8700:2290:c864:fc8b:2d0b:834a) (Remote host closed the connection)
[23:00:22] *** Joins: Iolo (~Iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[23:01:52] *** Parts: jplejacq1 (~jplejacq@24.224.90.176) ()
[23:03:24] <constxo> Alipha: no
[23:03:43] <Alipha> constxo: it's some Json class?
[23:03:46] <constxo> yds
[23:03:49] <constxo> yes*
[23:03:56] *** Quits: rgrinberg (~textual@2806:101e:7:8d89:1802:de9a:e357:e4e3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:04:43] <Alipha> constxo: then no, i'd just use a constructor because `Foo(Json json)` tells you everything you need to know and `fromJSON(Json json)` adds no value
[23:04:50] <constxo> I agree
[23:04:54] <constxo> but it's not up to me
[23:05:32] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:05:45] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:08:18] *** Quits: karls_ (~karls@205.178.87.116) (Quit: Lost terminal)
[23:10:13] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:10:39] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:15:45] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:16:31] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[23:21:43] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[23:25:15] *** Quits: Iolo (~Iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (Quit: Iolo)
[23:26:37] *** Quits: ckdCreations (~ckdCreati@147.55.133.132) (Read error: Connection reset by peer)
[23:27:03] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[23:27:05] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[23:27:12] *** Joins: kstatz12 (~pi@205.178.87.116)
[23:29:01] *** Joins: Linux77_ (~leonardo@2804:d45:8c08:9300:76d0:2bff:fe7a:f3a4)
[23:29:17] *** Quits: Linux77 (~leonardo@2804:d45:8c08:9300:76d0:2bff:fe7a:f3a4) (Remote host closed the connection)
[23:29:51] *** Joins: teut (~teut@103.144.92.182)
[23:30:01] *** Quits: NovaXrine (~NovaXrine@zen.novaxrine.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:30:21] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[23:30:35] *** Quits: RandomReader (~RandomRea@user/randomreader) (Quit: network maintenance)
[23:31:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:32:54] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[23:34:57] *** Quits: magla (~gelignite@55d47d67.access.ecotel.net) (Quit: Stay safe!)
[23:35:02] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[23:35:44] *** Joins: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de)
[23:35:55] *** Quits: bebyx (~Thunderbi@user/bebyx) (Read error: Connection reset by peer)
[23:36:13] *** Joins: bebyx (~Thunderbi@user/bebyx)
[23:39:13] *** Linux77_ is now known as Linux77
[23:41:06] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (Ping timeout: 260 seconds)
[23:41:16] *** Quits: randm (~randm@mx.rayprimus.com) (Quit: Leaving.)
[23:41:30] *** Joins: randm (~randm@2001:19f0:5:1de9:5400:3ff:fe98:1bdd)
[23:41:32] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:41:56] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:42:07] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (Ping timeout: 250 seconds)
[23:42:08] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:43:08] *** Quits: Exa (exa@irc.moe) (Quit: see ya!)
[23:43:55] *** Joins: Exa (exa@irc.moe)
[23:44:39] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 256 seconds)
[23:47:07] *** Joins: Enitin (~Enitin@82.180.145.230)
[23:47:30] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[23:48:11] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[23:48:31] *** Quits: nshire_ (~nshire@47.146.41.156) (Read error: Connection reset by peer)
[23:48:50] *** Joins: nshire_ (~nshire@47.146.41.156)
[23:49:26] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:51:06] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:51:23] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:51:32] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Quit: No Ping reply in 180 seconds.)
[23:52:45] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[23:53:14] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[23:53:58] *** Quits: akuma (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[23:54:42] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[23:54:54] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[23:55:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:58:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
