[00:11:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:26:38] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:33:14] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[00:33:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:34:02] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[00:34:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:34:55] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:51:09] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:54:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[00:58:10] *** Joins: Bike (~Bike@71.69.170.70)
[00:58:50] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 268 seconds)
[00:59:51] *** Joins: cjb (~cjb@user/cjb)
[01:03:03] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:06:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:09:32] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:10:09] *** Joins: jealousmonk (~user@user/jealousmonk)
[01:22:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:22:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:32:03] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:35:54] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:36:59] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[01:39:31] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[01:40:56] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:1c5c:392d:9c8d:7200)
[01:41:40] *** Joins: aeth (~aeth@user/aeth)
[01:42:08] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[01:43:16] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ed:252e:3d9b:c665:cba6:306b)
[01:46:51] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:1c5c:392d:9c8d:7200) (Ping timeout: 250 seconds)
[01:53:40] *** Quits: pve (~pve@178-55-29-58.bb.dnainternet.fi) (Quit: leaving)
[01:57:27] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[01:57:44] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[01:58:01] <phoe> another day another article
[01:58:04] <phoe> https://github.com/phoe/articles/blob/main/2022-01-30-load-time-value/README.md
[01:58:12] <phoe> L-T-V is fun
[02:00:04] <EdLangley[m]> phoe: I think you should treat this as unspecified behavior
[02:00:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:00:21] <EdLangley[m]> that is, just use load-time-value without checking and then document that the code has to be compiled to work correctly
[02:01:54] <phoe> EdLangley[m]: it's possible to (ab)use this behavior to detect code that wasn't minimally compiled and signal an error
[02:02:04] <EdLangley[m]> Yeah
[02:02:21] <phoe> it's very likely not portable and depends on unspecified behavior as you mentioned, but it seems to be reliable enough on modern implementations
[02:02:26] <phoe> as in CLISP ABCL ACL LW
[02:02:26] <EdLangley[m]> But, I think that sort of "defensive programming" in a macro like static-let causes more problems than it would help
[02:02:53] <EdLangley[m]> It's better, IMO, to document the situations in which static-let fails and just generate normal code
[02:03:32] <EdLangley[m]> Basically, this means that you can't portably use l-t-v for things like memoization
[02:03:41] <phoe> actually you can!
[02:03:47] <phoe> just remember to COMPILE your code
[02:03:50] <Bike> i mean, it's not hard to force code to be compiled.
[02:03:53] <EdLangley[m]> Yeah
[02:04:09] <EdLangley[m]> I just mean, the bare defun form doesn't work
[02:04:18] <EdLangley[m]> s/,//
[02:04:41] <phoe> yes - thank goodness that ASDF compiles everything by default, so you don't really get to play with interpreted code outside REPLs of these four implementations
[02:05:06] <phoe> so the fallout is pretty limited
[02:05:13] <phoe> everyone uses SBCL or CCL after all /s
[02:05:31] <EdLangley[m]> So, you can in sbcl
[02:05:49] <phoe> you can what exactly?
[02:06:23] <phoe> oh, SBCL has an interpreter mode - it's not on by default though
[02:06:45] <Bike> static-let is exactly the kind of thing that i'd expect to not happen in an evaluator, too
[02:06:54] <EdLangley[m]> Yeah, but someone probably has the interpreter enabled in their sbclrc
[02:07:34] <phoe> well, I'd rather signal an error than silently do the wrong thing in such a situation
[02:07:57] <EdLangley[m]> https://plaster.tymoon.eu/view/2904#2904
[02:07:59] <Bike> as in, i don't think an evaluator could reasonably be expected to have any kind of "static" semantics
[02:08:00] <EdLangley[m]> It's not the "wrong thing"
[02:08:53] <EdLangley[m]> If you want this counter behavior, you should use the let over lambda pattern :)
[02:09:24] <phoe> EdLangley[m]: not a wrong thing from the perspective of LOAD-TIME-VALUE but a wrong thing from the perspective of an operator whose values are meant to persist across function calls in the same way closure values do
[02:09:52] <phoe> and that's what STATIC-LET attempts to be
[02:10:38] <EdLangley[m]> At most, you should emit a warning
[02:10:43] <EdLangley[m]> An error would be really annoying
[02:10:52] <phoe> hm
[02:10:56] <phoe> that's a nice idea
[02:11:28] <EdLangley[m]> But, the problem is, you have to do this at runtime
[02:11:33] <EdLangley[m]> And I don't think it's worth the overhead
[02:11:44] <EdLangley[m]> You can't detect it statically during macroexpansion
[02:12:00] <Bike> hm, wonder if you couldn't hack something up
[02:12:13] <phoe> I have tried to hack something up to detect it during macroexpansion
[02:12:16] <phoe> and failed
[02:12:16] <Bike> say, you have a macro function for static-let or whatever that returns the usual form the first time, and on subsequent expansions returns an error form
[02:12:23] <EdLangley[m]> It's impossible to detect during macroexpansion
[02:12:31] <EdLangley[m]> because (defun foo ()...) (compile 'foo) solves the problem
[02:12:37] <phoe> Bike: can't do that, a macro function can be called an arbitrary number the times
[02:12:40] <Bike> although actually i guess there's no guarantee the compiler only expands yeah.
[02:12:41] <EdLangley[m]> And you can't tell whether or not someone is about to run (compile 'foo)
[02:13:13] <Bike> clearly you need to introduce another special operator to conditionalize on evaluation/compilation status.
[02:13:22] <phoe> oh no
[02:14:09] <Bike> although that could itself get tricky in situations like when the compiler runs the evaluator
[02:14:21] <EdLangley[m]> (defun foo () ...) (foo) is bad (defun foo () ...) (compile 'foo) (foo) is good
[02:14:36] <EdLangley[m]> You can't tell in the context of the DEFUN whether or not (foo) is safe
[02:24:38] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[02:26:56] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:27:22] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:29:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:35:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[02:39:02] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:40:30] *** Joins: igemnace (~ian@user/igemnace)
[02:41:10] *** Joins: akoana (~ah@user/akoana)
[02:44:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:50:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:50:50] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ed:252e:3d9b:c665:cba6:306b) (Ping timeout: 252 seconds)
[03:22:05] *** Joins: Oladon (~olad@98.43.81.226)
[03:23:34] *** Joins: lispy (~lispy@user/lispy)
[03:29:26] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[03:30:31] *** Joins: notzmv (~zmv@user/notzmv)
[03:30:53] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:34:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[03:35:48] *** Joins: aeth (~aeth@user/aeth)
[03:36:41] *** Joins: dra_ (~dra@2a04:4540:640d:7700:ac3b:5529:89a2:b679)
[03:39:14] *** Quits: dra (~dra@2a04:4540:640f:b700:ac3b:5529:89a2:b679) (Ping timeout: 252 seconds)
[03:59:27] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[04:02:27] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[04:08:32] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[04:14:16] *** Quits: dra_ (~dra@2a04:4540:640d:7700:ac3b:5529:89a2:b679) (Remote host closed the connection)
[04:17:46] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[04:20:20] <fe[nl]ix> phoe: go easy on the clich√© titles :)
[04:23:03] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[04:30:15] *** Joins: occ (~occ@user/occ)
[04:36:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:43:59] <mrcom> What's the appropriate channel on Liberia for navel-gazing "how does Lisp compare and contrast with other languages"?
[04:44:45] <drakonis> on libera? #lisp for a general lisp channel
[04:50:28] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[04:51:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[05:00:08] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[05:00:24] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[05:07:26] *** Joins: Oddity (~Oddity@user/oddity)
[05:08:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:10:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:11:01] *** Joins: s-liao46 (~s-liao@101.86.96.21)
[05:12:50] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[05:14:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:24:49] *** Quits: s-liao46 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:27:07] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[05:27:25] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[06:09:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:11:49] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 250 seconds)
[06:17:49] <dre>  ##programming definitely
[06:17:59] <dre> nothing but positive and constructive conversations there
[06:36:13] *** Quits: lispy (~lispy@user/lispy) (Ping timeout: 256 seconds)
[06:39:33] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 250 seconds)
[06:43:02] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:49:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:59:00] *** Joins: lispy (~lispy@user/lispy)
[07:08:17] *** Quits: lispy (~lispy@user/lispy) (Quit: O/)
[07:30:35] <beach> Good morning everyone!
[07:33:25] *** Joins: asarch (~asarch@189.250.218.98)
[07:36:28] <asarch> I have this list: (defparameter *the-list* '((:id 343 :name "foo" :date 3852308297) (:id 212 :name "bar" :date 3852308297) (:id 583 :name "baz" :date 3852308297) ‚Ä¶)
[07:37:15] *** Joins: domovod (~domovod@176.196.122.197)
[07:37:24] <asarch> And then a list of ids: (defparameters *users* '((:id 343) (:id 453) (:id 984) ‚Ä¶)
[07:38:22] <asarch> How could I know if a member of the *users* list is in the *the-list* list?
[07:40:14] <moon-child> (member user *the-list* :key (lambda (x) (getf x :id))?
[07:40:34] <beach> clhs intersection
[07:40:34] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_isec_.htm
[07:41:40] <beach> asarch: Since you have two lists, I think you may have to use INTERSECTION with some appropriate :KEY and :TEST arguments.
[07:42:28] <beach> asarch: Or you can loop over all elements in *users* and check each one.
[07:42:45] <moon-child> beach: I think intersection does not guarantee which of its inputs it uses to make the output
[07:43:00] <moon-child> 'The result list may share cells with, or be eq to, either list-1 or list-2 if appropriate'
[07:43:07] <beach> moon-child: Why are you telling me this?
[07:45:10] <asarch> Thank you! Thank you very much! :-)
[07:55:16] <[w]> lol
[08:06:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:10:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:10:18] *** Joins: semz_ (~semz@user/semz)
[08:13:14] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:13:16] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[08:16:34] *** Quits: asarch (~asarch@189.250.218.98) (Quit: leaving)
[08:26:18] <mfiano> Bike: Reading the spec for *-D-C, it doesn't seem to matter which parameter I specialize in a :AFTER method, PREVIOUS, CURRENT, or both. Is this correct?
[08:27:55] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[08:28:27] <Bike> i mean it depends on what you're doing, right
[08:28:51] <Bike> if you care about updates from one class specifically to another class you need to specialize both. if you care about updates from one class to anything you only specialize on that.
[08:29:39] <mfiano> I thought one is just a copy of the other, a they would both always be instances of the same direct class
[08:29:46] <mfiano> s/a/and/
[08:30:13] <Bike> No, previous is the copy, and it is a direct instance of whatever class the instance being changed used to have
[08:30:24] <Bike> And then current is the original, and its class is the new class
[08:30:30] <mfiano> Ah
[08:30:47] <mfiano> Ok, now it makes better than perfect sense :P
[08:30:55] <Bike> perfecter
[08:33:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:34:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[08:34:38] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:35:57] <mfiano> Bike: Unfortunately, this seems to have the same bad behavior as SHARED-INITIALIZE for me.
[08:36:00] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[08:36:03] *** Joins: aeth (~aeth@user/aeth)
[08:36:20] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[08:36:36] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[08:36:37] <Bike> well, i mean, it's gonna be called once for each time you call change-class
[08:36:38] <mfiano> https://gist.github.com/mfiano/5bcc3efadf8c41c0c2e3a819bdac543d
[08:36:48] <mfiano> Right, but I'm specializing on the new class
[08:36:55] <Bike> so if it's being called twice, you're calling change-class twice
[08:37:06] <mfiano> Yet the second invocation is not for this class
[08:37:33] <Bike> what?
[08:37:47] <mfiano> Ok let me try to explain a little better
[08:39:20] <mfiano> The method in the above gist, should _only_ SETF those slot values to the supplied initargs when CHANGE-CLASS's NEW-CLASS-NAME argument matches that of the class I'm specializing on. In the printout, the CAR of the list in the printed represenation is that class name.
[08:40:01] <Bike> can you also print (class-of current) to verify that?
[08:40:01] <mfiano> As you can see, the second invocation, called CHANGE-CLASS with 'SRGB as the new-class-name. I want to ensure that this method is not invoked then.
[08:40:06] <mfiano> Sure
[08:41:00] <mfiano> updated gist
[08:42:03] <Bike> okay, so the mop stuff is not helping clarity here. im wondering if there isn't something weird going on such as the actual color-storage3 class object being used both times but its list of mixins changing.
[08:42:35] <Bike> like, change-class doesn't know or care about class _names_, you know?
[08:42:57] <mfiano> Here is the call site:
[08:43:21] <mfiano> updated with definition of #RGB
[08:43:23] <mfiano> #'RGB
[08:44:41] <Bike> and (find-class 'color-storage3) and (find-class 'srgb) are different things?
[08:44:45] <mfiano> c0/c1/c2 initargs update the instance correctly when the first mixin is added with #'MIX, but after the second one, the instance has been reset to the default state.
[08:44:57] <Bike> like, what you're describing here is your implementation not dispatching correctly, which is a deep enough problem that it seems unlikely
[08:45:22] <mfiano> Yes they are different things
[08:46:28] <mfiano> (eq (find-class 'color-storage3) (find-class 'srgb)) ;=> NIL
[08:48:46] <mfiano> Updated gist with printout of previous as well
[08:51:48] <mfiano> The problem is with the mixin system. I see the issue. Trying to find a solution is hard.
[08:52:31] <mfiano> Look at the definition of #'MIX from the gist I made in the other channel
[08:53:08] <mfiano> The new class is a union with the real new class prepended
[08:54:28] <mfiano> Which makes sense. I want to change the class to be an anonymous class containing all the previous classes as superclasses, plus the additional new class.
[08:54:40] <mfiano> Which makes *-D-C hard or impossible to use to do what I want here :/
[08:54:42] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:59:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:01:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:04:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:04:38] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:06:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:07:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:08:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:10:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:12:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[09:12:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[09:15:02] *** Joins: Oladon (~olad@98.43.81.226)
[09:19:47] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[09:39:17] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[09:42:06] *** Joins: pingpongball (~pingpongb@43.228.192.100)
[09:43:31] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[09:44:02] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:44:51] *** Joins: ksu (~ksu@user/prtr)
[09:47:49] *** Quits: pingpongball (~pingpongb@43.228.192.100) (Quit: Client closed)
[09:57:50] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 250 seconds)
[09:59:34] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:59:45] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[10:01:22] *** Joins: pingpongball (~pingpongb@43.228.192.100)
[10:01:34] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:11:31] *** Joins: spiaggia (~user@2a01:cb19:150:3400:56e:704:a0ef:a919)
[10:13:06] <mfiano> Hmm, for once I don't know if anything built-in can help me here, and I don't have any good ideas for how to do the plumbing myself.
[10:13:22] <mfiano> Been sitting here thinking about it for over an hour and I got nuthin
[10:14:33] *** semz_ is now known as semz
[10:17:38] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:18:37] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[10:18:57] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[10:21:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:23:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:28:01] *** Quits: pingpongball (~pingpongb@43.228.192.100) (Quit: Client closed)
[10:32:41] *** Joins: kathe (~kathe@49.33.208.94)
[10:33:48] <kathe> good morning everyone. :)
[10:35:31] <kathe> off-topic coming up;
[10:35:48] <kathe> i use [setxkbmap -option "ctrl:swapcaps"] to swap control and caps-lock keys.
[10:36:13] <kathe> would anyone here know what options to pass to swap "function" and "alt" keys?
[10:36:43] <kathe> sorry about that, but i had no where else to go.
[10:36:59] <moon-child> kathe: I do not know.  I expect you would be more likely to get a response in a forum dedicated to X.  I will note: the 'fn' key is usually handled in firmware or similar
[10:37:30] <kathe> moon-child: thanks for the note about firmware.
[10:39:12] *** Joins: pingpongball (~pingpongb@43.228.192.100)
[10:42:21] *** Quits: [w] (~w]@2601:8c1:80:70d0::4b06) (Quit: zzz)
[10:44:09] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[10:49:15] <mfiano> Ok I finally see how to wipe up all this blood with the MOP
[10:49:21] <mfiano> Sounds like a job for tomorrow
[10:52:40] <mrcom> mfiano: update-instance-for-different-class is going to match as long as current is color-storage3 **or a subtype**, right?
[10:54:08] <mfiano> Yes. There is a bit of anonymous class MOP stuff going on that doesn't make what is going on very obvious, but yes.
[10:54:14] <mrcom> mfiano: Is ... (previous (current (eql color-storage3)) &key ... what you want?
[10:54:21] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[10:54:54] <ksu>  /part
[10:54:58] *** Parts: ksu (~ksu@user/prtr) (End of Transmission Block)
[10:55:03] <mfiano> That isn't valid syntax. EQL value must be quoted, and I'm specifically looking for a class, not a value.
[10:58:16] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:58:25] <spiaggia> What makes you think that EQL value must be quoted?
[10:58:43] <mrcom> clhs says its (eql _form_)
[10:58:58] <mfiano> They must evaluate to something, whether that be QUOTE or not.
[10:59:08] <mfiano> There is no binding cor COLOR-STORAGE3
[10:59:15] <mfiano> It is a symbol denoting the name of a class
[10:59:24] <mrcom> Oh.
[11:00:03] <mfiano> I sometimes use Sharpsign number to refer to values here, but that's besides the point.
[11:00:36] *** Joins: pve (~pve@188-67-138-210.bb.dnainternet.fi)
[11:00:55] <mrcom> And _form_ is only evaluated when the method is defined.
[11:05:21] <mfiano> The problem here is that the new-class argument passed to CHANGE-CLASS is always going to be a an anonymous class whose direct superclasses include the previous class plus one more additional class. I would have to disassemble the direct superclass list to see which class was just added.
[11:06:03] <mfiano> That information is not provided explicitly to UPDATE-INSTANCE-FOR-DIFFERENT-CLASS as in normal circumstances.
[11:06:58] <mfiano> Basically this mixin system is creating (and memoizing when new) anonymous classes containing a list of superclasses.
[11:07:04] <phoe> fe[nl]ix: I'll try
[11:07:07] <phoe> :D
[11:08:02] <attila_lendvai> i wonder why i don't see many users of cffi/c2ffi... are people aware of how easy it is to generate FFI's with those tools?
[11:09:18] <mfiano> I would assume the answer has to do with the ultimate goal of a Lisp OS, or a pure Lisp stack for those less ambitious people.
[11:09:28] <spiaggia> Maybe people prefer to write Common Lisp code?
[11:10:05] <Shinmera> I've written a lot of wrappers and I don't like the dependencies and style of code these autogenerators produce, so I just write them by hand.
[11:10:20] <phoe> attila_lendvai: oh? what are they using as alternatives to cffi? implementation-specific stuff?
[11:11:14] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Quit: Leaving)
[11:11:15] <attila_lendvai> phoe, cffi/c2ffi is a subsystem of cffi. this kinda answers my question... :) people are not aware of it
[11:11:33] <attila_lendvai> this is a nice example usage of it: https://github.com/hu-dwim/hu.dwim.sdl
[11:11:59] <phoe> :O
[11:12:08] <mrcom> mfiano: (unless (subtypep previous 'collor-storage3) ...) ?
[11:12:43] <phoe> attila_lendvai: write a nice article describing it and post it somewhere public
[11:12:50] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:13:02] <attila_lendvai> Shinmera, cffi/c2ffi generates pretty much the exact same names as they are in the C namespace (it generates into an empty package, and even retains the upper/lower case of symbols).
[11:13:12] <mrcom> mfiano: Or maybe I'm not groking "no binding for color-storage3"
[11:13:18] <attila_lendvai> Shinmera, then you can add a foo/fancy package that lispifies it as you see fit
[11:13:27] <phoe> so not unlinke cl-autowrap
[11:13:33] <phoe> I've seen it used several times
[11:13:57] <attila_lendvai> phoe, yes, like cl-autowrap, but c2ffi is using clang as a lib to parse the code and extract the metadata for the FFI
[11:13:59] <mfiano> mrcom: There's a few solutions, that being one of them. A couple others are, checking the supplied-p argument for the initargs supplied, and also doing a doing some set theoretical operations on the direct superclass list to see exactly which class was added.
[11:14:05] <mfiano> I am undecided as of yet.
[11:14:20] <phoe> attila_lendvai: so, again, not unlike claw :D
[11:14:33] <Shinmera> attila_lendvai: I'm fine doing thinsg the way I am
[11:14:36] <phoe> https://github.com/borodust/claw
[11:14:54] <phoe> Shinmera:... and yet you complained about me not using documentation-utils :(
[11:15:32] <Shinmera> phoe: "complain" is a bit strong of a word for my reaction there
[11:15:35] <mrcom> define-method-combination -- there *had* to be a usecase for it.
[11:15:59] <mfiano> mrcom: what do you mean about it?
[11:16:09] <mfiano> Of course there is
[11:16:10] <attila_lendvai> phoe, didn't know about claw, it looks like something very similar. sadly, cffi/c2ffi predates it by several years, feels like duplicate effort.
[11:16:38] <mrcom> Custom combination that bases match against class equality rather than subtype matching
[11:16:39] <Shinmera> does c2ffi work well with C++?
[11:17:03] <mfiano> No
[11:17:13] <mfiano> That's what claw tries to solve, with a C shim
[11:17:26] <mfiano> Also c2ffi/autowrap author left Lisp a few years ago
[11:17:56] <attila_lendvai> Shinmera, not sure, i never looked into wrapping C++ libs. it does deal with #define macros properly.
[11:18:04] <Shinmera> there you go then.
[11:20:48] <mrcom> Random question: Anybody familiar with J.A.R Williams? My wife knew a "Dr. JAR", but as an artist. Same person?
[11:21:20] <attila_lendvai> whatever can be done for wrapping C++, c2ffi and the cffi/c2ffi infrastructure is fully qualified to be a comfortable framework for it.
[11:21:47] *** Parts: vegai (vegai@kapsi.fi) ()
[11:21:54] *** Joins: notzmv (~zmv@user/notzmv)
[11:24:11] <Shinmera> Idunno man I feel like if someone embarks on the journey of writing something like claw they'd have already checked c2ffi and deemed it not usable enough.
[11:26:07] <phoe> borodust: I'm curious about c2ffi now
[11:26:28] *** Quits: kathe (~kathe@49.33.208.94) (Quit: Leaving)
[11:27:43] <attila_lendvai> Shinmera, your imagination is rather constrained then. claw seems to be a fun project (looks like it does the c2ffi part also in CL). i can easily see myself embarking on that project 20 years ago, regardless of what else is available.
[11:28:08] <Shinmera> ...
[11:28:15] <Shinmera> whatever you say bro
[11:30:20] <attila_lendvai> luis, do you think it's appropriate to mention claw in the CFFI readme?
[11:30:38] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[11:33:23] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ed:252e:899e:dfb6:fe21:e622)
[11:34:24] *** Joins: artchad (~user@public-gprs221619.centertel.pl)
[11:36:16] *** Quits: spiaggia (~user@2a01:cb19:150:3400:56e:704:a0ef:a919) (Quit: ERC (IRC client for Emacs 26.3))
[11:37:07] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 256 seconds)
[11:42:33] *** Joins: shka (~herr@109.231.0.226)
[11:42:33] *** Joins: silasfox (~sbv@p200300cec7133b0028044f0edc9e9537.dip0.t-ipconnect.de)
[11:45:02] *** Quits: kagevf_ (~jfh@ip68-108-33-76.lv.lv.cox.net) (Ping timeout: 240 seconds)
[11:48:48] *** Joins: wacki (~wacki@87.122.94.186)
[11:48:51] *** Quits: artchad (~user@public-gprs221619.centertel.pl) (Read error: Connection reset by peer)
[11:52:26] <attila_lendvai> any ideas what else the CFFI readme should mention besides claw and cl-autowrap?
[11:53:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[11:53:50] <phoe> I think that c2ffi, claw, and cl-autowrap are the prominent wrapping libs
[11:53:59] <mfiano> "It is best to write a pure Lisp solution before considering this library"
[11:54:05] <phoe> :D
[11:57:14] *** Quits: silasfox (~sbv@p200300cec7133b0028044f0edc9e9537.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[11:57:25] <attila_lendvai> considering that each of us only has a limited time on earth, that is so much not true...
[11:58:09] <attila_lendvai> let alone when a project has no specification, and the only "API" is a binary blob...
[12:04:08] *** Joins: terrorjack5 (~terrorjac@2a01:4f8:1c1e:509a::1)
[12:04:13] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 268 seconds)
[12:04:13] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[12:04:22] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[12:04:49] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (Remote host closed the connection)
[12:04:51] *** Joins: copec (~copec@schrodbox.unaen.org)
[12:05:06] *** Quits: pingpongball (~pingpongb@43.228.192.100) (Quit: Client closed)
[12:05:06] <mfiano> As Lisp programmers, we are paving the way for future generations to stand on our shoulders. Let's leave the footguns and bitrot where they belong.
[12:05:27] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: linjian (~linj@user/linj) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (Ping timeout: 268 seconds)
[12:05:55] *** Joins: mgxm_ (~mgxm@user/mgxm)
[12:06:04] *** Joins: froggey (~froggey@li1514-95.members.linode.com)
[12:06:04] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: mgxm (~mgxm@user/mgxm) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: |smlckz| (smlckz@user/smlckz) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: easye (~user@oxi.slack.net) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: lieven (~mal@ns2.wyrd.be) (Ping timeout: 268 seconds)
[12:06:04] *** terrorjack5 is now known as terrorjack
[12:07:23] *** Joins: lieven (~mal@ns2.wyrd.be)
[12:08:33] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[12:08:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:08:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Remote host closed the connection)
[12:09:05] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:09:51] *** Quits: froggey (~froggey@li1514-95.members.linode.com) (Read error: Connection reset by peer)
[12:10:44] *** Joins: froggey (~froggey@li1514-95.members.linode.com)
[12:13:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:15:42] *** Joins: artchad (~user@public-gprs221619.centertel.pl)
[12:18:31] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[12:18:34] *** Joins: |smlckz| (~smlckz@user/smlckz)
[12:19:10] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[12:19:17] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[12:19:19] <borodust> phoe: in the beginning of times, :claw was using c2ffi and actually started as a fork of cl-autowrap with https://github.com/rpav/cl-autowrap/pull/83 merged (it was named bodge-autowrap at the time)
[12:19:29] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[12:19:39] <borodust> phoe: here i explain my reasoning switching to different solution: https://borodust.org/2020/06/12/claw-honing/#origins
[12:20:06] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[12:20:25] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[12:20:43] *** Joins: linjian (~linj@user/linj)
[12:21:30] <attila_lendvai> hi borodust! you may want to mention that blog post in the claw readme.
[12:21:40] * attila_lendvai is revising the CFFI Readme
[12:21:43] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[12:22:14] <borodust> once i was deep in wrapping C++, another feature bubbled up that required patching (or extending, i should say) of llvm/clang so i ended up with custom llvm/clang xD
[12:23:00] <borodust> but i dream someday i push that patch upstream, it's straightforward, just exposes more of C++ features through libclang C interface
[12:23:41] <borodust> attila_lendvai: my another dream is writing :claw documentation :D it's too early to mention or promote it anywhere
[12:23:49] <phoe> borodust: thanks!
[12:26:36] <borodust> atm i'm working on super secret project that showcases in a useful way what can be done with alien-works (framework based on C/C++ foundation glued to lisp with :claw), then i'll go back to :claw release plans
[12:27:04] <borodust> i wanted to do that before ELS hits, but i guess that was a bit too optimistic
[12:30:07] <borodust> for historians, previous claw repository is here: https://github.com/borodust/claw-legacy there you can see the rich history it has that goes back to cl-autowrap and c2ffi ;p
[12:30:29] <attila_lendvai> borodust, does that mean that i shouldn't mention claw in the CFFI readme? or with a word that it's beta?
[12:31:00] <borodust> heh, master branch still uses c2fii
[12:31:49] <borodust> attila_lendvai: i think, it's better not to link it yet
[12:32:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:35:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:38:59] *** Joins: lispy (~lispy@user/lispy)
[12:39:06] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[12:48:02] <lisp123w> phoe: Your suggestion on LW HUG is interesting. The downside is if things break on LW, people will invariably complain to LW and they may not want to deal with that
[12:48:47] <phoe> lisp123w: break on LW, what do you mean? if a library breaks on LW, then the first question is whether the library itself is OK
[12:48:59] <phoe> and if the library itself is OK, then the question is whether the LW CI edition is used correctly
[12:49:16] <lisp123w> They are already relatively hands off because they have limited time and spending on paid projects (I dare not ask them for help)
[12:49:17] <phoe> and if it is used correctly, it means that LW gets a decent bugticket
[12:49:37] <phoe> yes, I can imagine - that's why I asked about feasibility from the business point of view
[12:49:41] <lisp123w> Break in the sense, there is something in LW that isn't ANSI compliant / different to how other implementatiosn do it
[12:50:07] <phoe> well, they can mark it as WONTFIX in the worst case, and then compatibility libraries can try to work around this quirk
[12:50:25] <phoe> the real question is about discovering these quirks in the first place in LW as it is right now
[12:50:54] * attila_lendvai has updated the CFFI readme https://github.com/cffi/cffi/pull/307
[12:51:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:52:11] <phoe> attila_lendvai: LGTM
[12:52:22] <lisp123w> It would be net beneficial for LW users to have better tested libraries for their implementation
[12:52:32] <phoe> yes, that's my main point
[12:53:25] <lisp123w> unrelated, but we should do a crowd funding to get Clozure Associates to build a Cocoa Backend for CLIM...
[12:54:23] <lisp123w> (I think Clozure Associates did most of the GUI work for LW for Mac, they are the experts in that area)
[12:56:49] <phoe> lisp123w: that could be done, I guess - try contacting them about the idea and open a fundraiser somewhere if they're interested
[13:08:30] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 250 seconds)
[13:08:31] *** Quits: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net) (Excess Flood)
[13:08:50] *** Joins: pingpongball (~pingpongb@43.228.192.114)
[13:09:04] *** Joins: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net)
[13:09:06] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[13:09:19] *** Joins: ski (~ski@remote12.chalmers.se)
[13:10:43] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[13:10:58] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:11:47] *** Quits: pingpongball (~pingpongb@43.228.192.114) (Client Quit)
[13:12:09] *** Quits: victor_ (uid208353@user/victor) (Ping timeout: 250 seconds)
[13:13:21] *** Joins: blacked (~user@user/blacked)
[13:14:07] *** Joins: victor_ (uid208353@id-208353.tinside.irccloud.com)
[13:14:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[13:16:59] <phoe> minor announcement: CLISP installable via `ros install clisp-head` has working and somewhat tested package-local nicknames now
[13:17:01] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[13:17:10] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[13:17:21] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[13:17:34] <phoe> at least on Linux, I'm working out the OSX stuff with roswell maintainers
[13:18:43] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[13:19:08] <lisp123w> Hurray for CLISP
[13:20:14] <lisp123w> I reached out to Clozure, expect it to way too expensive (if they are interested at all), but you never know if you never ask :)
[13:22:08] <phoe> OK
[13:24:08] <beach> You could also ask Turtleware.
[13:26:29] *** Joins: occ (~occ@user/occ)
[13:28:00] <lisp123w> beach: I'll do that too
[13:28:27] *** Joins: kathe (~kathe@49.32.186.138)
[13:28:37] <kathe> hello again. :)
[13:28:53] <kathe> is phoe around at the moment?
[13:30:14] <phoe> kathe: I'll check
[13:30:22] <phoe> yes, he seems to be
[13:30:35] <kathe> :D
[13:31:08] <kathe> phoe: have you had time to give serious thought to a mop+clos book after you're through with the current one?
[13:31:29] <phoe> kathe: thought, yes; realization, it'll need to wait until 2023 at least
[13:31:51] <phoe> CLR2 must take priority
[13:32:10] <kathe> phoe: that's great news. i'll eagerly await the mop+clos book. :)
[13:33:44] <phoe> note that this isn't a commitment
[13:33:56] <kathe> yes. i acknowledge. :)
[13:34:19] <phoe> just a note that such a thing will start in 2023 or later
[13:34:20] <kathe> but the mere thought that it "might be" a possibility is exciting enough. :)
[13:34:27] <phoe> and then will take time to get finished!
[13:34:53] <kathe> i am assuming "if" you take it up, you might finish it by 2026~2027.
[13:35:51] <kathe> anyone here has worked through the algorithms book by domkin?
[13:37:19] <kathe> also, what is the real intent behind 'paip'? it can't be just 'ai'!
[13:37:25] <blacked> In defining like some default parameter for keyed function, why we give like this `((:c 10))`?
[13:37:39] <blacked> Like for this  (defun foo (&key a b ((:c 10))) (format nil ": ~d\n :~d\n :~d " a b c) )
[13:37:53] <kathe> cursory reading leads me to think 'paip' teaches good programming "practice".
[13:37:57] <lisp123w> kathe: Less reading / discussing CL, and more writing CL would be a suggestion
[13:38:01] <kathe> would that assumption be correct.
[13:38:18] <kathe> lisp123w: i am working towards all those slowly.
[13:38:19] <phoe> blacked: lambda lists require &key to be present for keyword parameters
[13:38:34] <phoe> oh wait, you're asking a different thing
[13:38:40] <kathe> lisp123w: that's why i'm here only occasionally.
[13:38:43] <phoe> why doesn't (&key (c 10)) work?
[13:39:26] <lisp123w> kathe: That's great to hear :)
[13:39:28] <kathe> lisp123w: reason to ask about 'paip' is that's it's so huge and requires some knowledge of calculus (which i've forgotten).
[13:39:59] <phoe> blacked: &key ((foo bar)) means a different thing - it separates the keyword parameter that becomes the API from the variable name that is used internally
[13:40:14] <phoe> see e.g. (defun foo (&key ((:bar baz) nil barp)) (list baz barp))
[13:40:26] <phoe> and then (foo :bar 42)
[13:40:57] <blacked> aumm i'll understand it :/
[13:41:06] <phoe> blacked: okay, a little bit more detail then
[13:41:26] <phoe> (&key c) defines a keyword parameter that is accessible like (... :c ...)
[13:41:37] <phoe> (&key (c 42)) adds a default value for it, 42
[13:42:03] <phoe> (&key (c 42 c-provided-p)) adds another boolean variable that is true only if :C is provided, and false otherwise
[13:42:26] <lisp123w> kathe: I'm reading PAIP now as my fingers hurt and I need to take a break. I think its a luxury in 2022, so would recommend working on actual projects & reading PCL if you need particular details on CL
[13:43:08] <lisp123w> One learns more from their own mistakes, so best not get caught in a 'paralysis by analysis' trap and get coding :)
[13:43:42] <kathe> lisp123w: i agree. thanks for remind me. :)
[13:44:00] <blacked> :) @phoe thanks , @lisp123w right.
[13:44:02] <phoe> blacked: in all of the above cases, C is both the variable name and the source for the name of the generated keyword, :C
[13:44:25] <blacked> yes i understand, i think practicing will fit it more
[13:44:38] <phoe> and you can separate these by wrapping C in another pair of parenthesis and providing both the symbol that will name the keyword argument and the variable that's used internally
[13:45:00] <phoe> (&key ((:c c))) is equivalent to (&key (c)) is equivalent to (&key c)
[13:45:33] <phoe> but you can do (&key ((:some-really-long-keyword c) ...)) to have a long API keyword and a shorter variable name for use in the function body
[13:45:59] <phoe> which is a niche use case, but nonetheless useful sometimes
[13:48:51] <lisp123w> kathe: As an example, PAIP introduced the concept of data driven programming in Chapter 2, where the rules of an algorithm are separated out away from hardcoded conditional statements like COND and stored as data. A great idea, but one that I uncovered myself from trial and error so when I read it, it makes much more sense / sticks with me longer as I have gone through the pain of changing hardcoded functions in the past.
[13:49:59] <kathe> lisp123w: okay.
[13:50:34] <kathe> gotta go now. bye all.
[13:50:36] *** Quits: kathe (~kathe@49.32.186.138) (Quit: Leaving)
[13:51:30] <lisp123w> Ah he left. Was going to say: 'Dang' from Hacker News had a great quote, which I paraphrase: There's a natural balance between simple, ugly code and elegant, well abstracted code - start off by writing whatever comes to mind, and as you start repeating yourself, you will naturally start abstracting away, coming up with a better approach
[13:52:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:52:10] <lisp123w> I find that helped me a lot, because CL can have too much expressivity at times so one gets stuck trying to find the perfect solution. I'll shut up now :)
[13:53:42] <phoe> they say, make it work, make it right, make it fast
[13:53:53] <phoe> the fourth step I love to add is, make it beautiful
[13:54:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[13:54:38] <lisp123w> phoe: Thanks, that's a nice maxim!
[13:54:55] <phoe> it's not even mine!
[13:55:19] <phoe> https://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast
[13:55:56] <blacked> It feels weird in prefix notation. üòÅ like i've to think from backward, unlike other languages
[13:56:55] <blacked> for eg       (when (> (* i j) n).......) , first think what to compare , what value to multiply , what value to use....
[13:56:57] <blacked> cool
[13:57:26] <blacked> umm not cool, but like cool, i think i'll get to used to it
[13:59:37] <phoe> think of it that way - you no longer need to care about operator precedence
[13:59:49] <phoe> and therefore no longer fall into bugs related to operator precedence
[13:59:59] <splittist_> When there is an excess of I j's over n ...
[14:00:34] <phoe> also don't be scared of using lexical variables, even with names longer than one letter - Lisp code tends to be short even with that
[14:00:57] <blacked> Does cl have oop?
[14:00:58] <phoe> (let ((result (* one-number another-number))) (when (< limit result) ...))
[14:01:12] <phoe> yes, CLOS (Common Lisp Object System) is pretty powerful
[14:01:33] <splittist_> and putting the operator first allows multiple operands (* one-number another-number yet -another-number-without-repeating-the-operator)
[14:01:48] <phoe> the first difference you'll see compared to C++/Java/similar OOP systems is that classes don't have methods, generic functions have methods
[14:01:54] <phoe> and that allows for easy multiple dispatch
[14:02:06] <blacked> whoa. i heard that multiple dispatch system , when i was learning julia
[14:02:42] <blacked> later left julia, and learning this if i get some interest :)
[14:02:46] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 260 seconds)
[14:03:41] <blacked> phoe, "classes dont have method" cool, in CLOS, :) i'll be there soon
[14:04:21] <phoe> blacked: sure; this channel can get busy at times, #clschool is a good place to ask more basic questions all the time though
[14:04:34] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[14:05:01] <blacked> ok :)
[14:09:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:8e08:7908:8918:48c0) (Ping timeout: 240 seconds)
[14:23:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:23:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:23:30] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:24:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:26:20] *** Lord_of_Life_ is now known as Lord_of_Life
[14:29:32] *** Quits: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-1033-static.midco.net) (Ping timeout: 240 seconds)
[14:31:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:33:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:35:00] *** Quits: blacked (~user@user/blacked) (Remote host closed the connection)
[14:37:02] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 240 seconds)
[14:37:15] *** Quits: lispy (~lispy@user/lispy) (Quit: O/)
[14:39:57] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[14:45:46] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ed:252e:899e:dfb6:fe21:e622) (Ping timeout: 245 seconds)
[14:48:05] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[14:48:58] *** Joins: xsperry (~xs@user/xsperry)
[14:52:00] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[14:54:47] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:55:44] *** Joins: kevingal (~quassel@149.157.105.172)
[15:00:33] *** Quits: kevingal (~quassel@149.157.105.172) (Ping timeout: 256 seconds)
[15:00:45] *** Joins: kevingal (~quassel@2001:770:c0:401:3d01:a4b4:1bb8:b977)
[15:01:03] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[15:01:03] *** Quits: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[15:03:34] *** Joins: dlowe (~dlowe@user/dlowe)
[15:03:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:05:33] <artchad> borodust, I found a neat way to separate my own project, from projects I've pulled from the internet.
[15:05:38] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[15:06:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:07:02] <artchad> I just symlinked ~/Common-Lisp to ~/.local/share/common-lisp/source . There I put all the downloaded projects, which I load via asdf. In ~/quicklisp/localprojects I'll keep my own personal projects.
[15:07:13] <artchad> I still have to test how it works though.
[15:08:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:08:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:15:30] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[15:17:20] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:20:19] *** Joins: scymtym (~user@ip6-2001-638-504-20d6-1000-0-0-17.VPN.Dyn.CIT-EC.NET)
[15:26:36] *** Joins: notzmv (~zmv@user/notzmv)
[15:29:27] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[15:30:49] <artchad> Oh, actually I can just quickload them, because quicklisp seems to use asdf:*central-registry*
[15:31:23] <artchad> I came up with thise solution. I just call this function whenever I want the downloaded projects to be visible.
[15:31:23] <artchad> #+asdf3
[15:31:23] <artchad> (defun add-asdf-dirs (&optional (dirs '("/home/user/Common-Lisp/")))
[15:31:23] <artchad>   (dolist (d dirs)
[15:31:26] <artchad>     (push (pathname d) asdf:*central-registry* )))
[15:32:40] <artchad> Is there a smarter way of managing your local projects and downloaded projects separately?
[15:35:00] *** Joins: Brucio-4 (~Brucio-4@ip6-2001-638-504-20d6-1000-0-0-17.VPN.Dyn.CIT-EC.NET)
[15:36:27] *** Joins: occ (~occ@user/occ)
[15:36:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:44:11] <artchad> sm2n: I tried compiling you :scanner project, but I get the following error:
[15:44:11] <artchad> ;;;   ** Unable to find include directoryAn error occurred during initialization:
[15:44:11] <artchad> COMPILE-FILE-ERROR while compiling #<cl-source-file "quicklisp" "package">.
[15:44:40] <artchad> Could you help me with that. I would love to have a nicer interface for scanimage. Currently I'm using shell scripts, which is kinda meh.
[15:51:39] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[15:56:05] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:02:23] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:02:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:03:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:04:53] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ed:252e:99d9:ca30:6a40:daf8)
[16:32:44] *** Joins: lispy (~lispy@user/lispy)
[16:39:36] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:42:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[16:43:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:43:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:44:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[17:02:37] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[17:04:06] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[17:04:51] *** Joins: igemnace (~ian@user/igemnace)
[17:05:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:05:19] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[17:06:05] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:07:59] *** Parts: lisp123w (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[17:09:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:14:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[17:15:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:16:26] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[17:28:39] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[17:30:50] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:07] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:33:08] <borodust> artchad: üëçwhatever works best for you works best for you
[17:33:52] <artchad> I think I've solved the issue in an ok way.
[17:34:06] <artchad> I can just call (add-asdf-dirs) and they will be available.
[17:34:42] <artchad> interesting is that asdf:*central-registry* doesn't include ~/.local/share/common-lisp/source nor ~/common-lisp by default.
[17:35:04] <artchad> although the docs say that those directories will be checked.
[17:36:38] <Bike> the asdf central registry is only a backwards compatibility thing. you're supposed to use the newer config mechanism now, and that's what asdf uses for those directories probably
[17:37:15] <artchad> what's the "newer mechanism"?
[17:37:31] <artchad> I didn't thoroughly read the documentation.
[17:37:43] <Bike> https://asdf.common-lisp.dev/asdf.html#Controlling-where-ASDF-searches-for-systems
[17:37:58] <artchad> thanks
[17:39:41] *** Quits: occ (~occ@user/occ) (Ping timeout: 268 seconds)
[17:42:41] *** Joins: Alfr (~Alfr@user/alfr)
[17:44:40] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7942:5c67:99d0:7a74)
[17:44:47] *** Joins: occ (~occ@user/occ)
[17:45:44] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[17:45:58] <artchad> That looks complicated. I'll stick to my tape code. hehehe
[17:46:00] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[17:52:38] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[17:52:54] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[18:01:32] <Josh_2> Good afternoon
[18:01:53] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[18:14:13] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[18:22:41] <artchad> good afternoon fellow big brained programmer
[18:23:29] <White_Flame> artchad: most people use quicklisp nowadays, and symlink their project trees from ~/quicklisp/local-projects/ to make them visible
[18:24:09] <White_Flame> (well most people use quicklisp.  not that necessarily most people use its local-projects dir over asdf)
[18:24:45] <White_Flame> but it uses that filesystem artifact to maintain their default visibly loadable projects
[18:27:01] <artchad> but localprojects is loaded before dists
[18:27:11] <artchad> that caused issues for me already a few times.
[18:28:05] <artchad> it's a waste to time to try and figure out why something failed, just to realize that a system in local-projects contains a system with the same name, as the one pulled from quicklisp prior.
[18:28:25] <artchad> that's why I'm making sure all the things I clone go into a separate directory, which is not visible by default
[18:28:55] <artchad> only when I start a repl and explicitly want to play around with someone elses code, then I make sure quicklisp can find it.
[18:30:02] <frgo> Hi guys. I have been away a bit - so please excuse me jumping right to an issue I couldn't resolve for the last couple of days: c2ffi on ARM64. I am trying to build cl-sdl2 and it fails misrably on my NVIDIA Jetson Xavier NX (being an ARM64 6-core CPU). Anybody here with experience c2ffi on ARM64?
[18:33:46] <White_Flame> artchad: ah, ok.  I have some loader scripts in my .sbclrc as well, for pulling in things with their own static libraries
[18:36:23] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[18:36:30] <frgo> If anyone wants to see the issue: https://gist.github.com/dg1sbg/2f997df6bd4183578aae24b02663bd73#file-c2ffi-failing-on-arm64-when-building-cl-sdl2
[18:47:25] <artchad> frgo: Maybe mfiano can help you.
[18:47:49] <artchad> or do you think that's something c2ffi specific?
[18:48:31] <frgo> artchad: Thx. Well, that's part of the mystery. Is it c2ffi, or clang or ?
[18:50:05] <frgo> mfiano is the maintainer of cl-sdl2, so I'll try to contact him.
[18:51:39] <phoe> this actually seems like a problem in the arm_neon sources of clang
[18:51:58] <phoe> like, the real error seems to be in /usr/lib/llvm-12/lib/clang/12.0.0/include/arm_neon.h:1730:47 and not anything that includes that file
[18:53:47] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[18:54:19] <frgo> phoe: Yes, agreed. Maybe worth trying plain old gcc... I am digging deeper.
[18:55:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:00:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[19:00:29] *** Joins: morganw (~user@80.225.24.132)
[19:02:19] *** Quits: Xach (~xach@user/xach) (Ping timeout: 268 seconds)
[19:02:30] *** Joins: Xach (~xach@66-63-89-59.static.suscom-maine.net)
[19:04:04] <frgo> Yeah, well - GCC. No. c2ffi is clang=based. Silly me.
[19:05:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:09:09] *** Quits: Xach (~xach@66-63-89-59.static.suscom-maine.net) (Changing host)
[19:09:09] *** Joins: Xach (~xach@user/xach)
[19:09:09] *** ChanServ sets mode: +o Xach
[19:11:20] *** Joins: treflip (~user@user/treflip)
[19:23:29] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:24:15] <_death> frgo: I don't use this architecture, but vector operations table at https://clang.llvm.org/docs/LanguageExtensions.html seems to suggest that clang does not support C-style cast for neon vector types
[19:24:56] *** Joins: aeth (~aeth@user/aeth)
[19:26:39] *** Joins: silasfox (~sbv@p200300cec7133b0020ab95fb7e869f34.dip0.t-ipconnect.de)
[19:27:26] <SAL9000> phoe: regarding l-t-v and static-let ( https://github.com/phoe/articles/blob/main/2022-01-30-load-time-value/README.md ) -- could you fall back to implementing load-time-value via let-over-lambda in implementations where eval semantics != compile semantics?
[19:27:55] <Bike> that seems kind of difficult since the static-let will be inside the function.
[19:28:35] <phoe> SAL9000: I can't, the LET would need to be hoisted all the way up and above the LAMBDA
[19:28:47] <phoe> and a macro can't do affect its external environment that way
[19:28:50] <SAL9000> hmmmmmmm
[19:29:06] <phoe> one way to fix it would be to make an external hashtable from some sorta symbols to values, but that would be kinda ugly
[19:31:28] <SAL9000> what if, at macroexpand time, (let ((v (make-thing))) (lambda () v)) and pass the return value of that into the macroexpansion?
[19:31:39] <SAL9000> or am I barking up the wrong tree
[19:32:37] <_death> frgo: SDL includes this header in SDL_cpuinfo.h .. you can try to define SDL_DISABLE_ARM_NEON_H and see what happens
[19:33:28] <frgo> _death: Aha! - Thx. Brilliant idea! ... Onit!
[19:33:57] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[19:36:20] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ed:252e:99d9:ca30:6a40:daf8) (Read error: Connection reset by peer)
[19:36:54] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:159e:d2a3:c9a0:9ae9)
[19:39:14] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[19:39:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:40:55] *** Joins: jeosol (~jeosol@user/jeosol)
[19:44:52] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:159e:d2a3:c9a0:9ae9) (Ping timeout: 268 seconds)
[19:49:52] <phoe> SAL9000: that's dumping a literal function into a FASL
[19:49:55] <phoe> might not work
[19:50:12] <phoe> in particular functions are not externalizable
[19:50:18] <Bike> i don't think dumping functions works on any implementation. i would be interested if one could do it
[19:50:42] <phoe> again, you could try to (load-time-value (lambda () v)) to work around this problem, but, sike, we are using load-time-value
[19:50:46] <SAL9000> good point, I didn't think about fasl
[19:50:48] <phoe> which is the problem we started with
[19:51:06] <SAL9000> I guess you're back to gensym + hashtable then :<
[19:51:14] <SAL9000> trivial-load-time-value?
[19:51:30] <phoe> Bike: pure functions should be dumpable fine, closures would be the real pain
[19:52:29] <White_Flame> well, there can be pure closures, too
[19:53:03] <phoe> yes, but then there are things like (let (x) (lambda () x) (lambda (y) (setf x y)))
[19:53:09] <phoe> you can't really dump one without the other
[19:53:17] <Bike> phoe: translating a runtime function object into a description of a function object is nontrivial
[19:53:19] <White_Flame> right, that's a mutating closure
[19:53:22] <Bike> plausibly doable, but nontrivial
[19:53:35] <phoe> right
[19:53:51] <Bike> you also have constants to worry about, for instance
[19:54:17] <phoe> why worry? they are supposed to never change‚Ñ¢
[19:54:39] <White_Flame> as they say in math, variables don't, and constants aren't ;)
[19:55:09] <Bike> i mean, they could themselves not be dumpable
[19:55:21] <SAL9000> but hey at least we aren't in bizarro C++ land, where const doesn't always mean constant (i.e. const qualifier on pointers)
[19:55:22] <phoe> oh - right
[19:55:55] <White_Flame> SAL9000: you just need a constception, const * const * const int
[19:55:59] <SAL9000> *shudder*
[19:56:04] <Bike> constants could also influence dumpability in weird ways. like, if you have (lambda () (if t 0 #.(non-externalizable-object))), whether that could hypothetically be dumped depends on how much optimization the compiler does.
[19:56:17] <Bike> though that's also true with some closures.
[20:00:01] <scymtym> http://web.archive.org/web/20170331132917/http://www.discontinuity.info/~pkhuong/common-cold/ may be interesting in this context
[20:16:13] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10ed:252e:a8fa:6b59:d4cb:97e1)
[20:16:51] <phoe> is SETF SYMBOL-VALUE of an undefined variable portable?
[20:17:20] <Bike> yes. symbol-value is sort of orthogonal to whether a variable has been proclaimed/declared special.
[20:17:28] <phoe> OK
[20:20:09] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[20:21:59] *** Joins: domovod (~domovod@176.196.122.197)
[20:26:02] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:26:26] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[20:26:26] <jasom> You could use #. instead of load-time-value; that should only get evaluated at read time, right?
[20:27:16] *** Joins: Catie (~user@user/catie)
[20:28:18] <phoe> you get read-time literals that can get treated as constants by the compiler though
[20:28:42] <phoe> you still need a QUOTE to get that value anyhow evaluated
[20:28:49] <phoe> ...or rather, non-evaluated
[20:29:06] <jasom> I was thinking #.(let ((x gensym)) (setf symbol-value x 0) x) and then using the result in a macrolet
[20:29:11] <jasom> er symbol-macrolet
[20:29:26] <phoe> that won't survive compilation though
[20:29:26] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[20:29:49] <phoe> the symbol-value is only set in the compiler environment, it won't get dumped into the FASL
[20:32:39] <borodust> frgo: if you are fine with sdl2 bindings only and don't care about c2ffi working you can steal bindings from https://github.com/borodust/aw-sdl/blob/master/bindings/aarch64-linux-android.lisp
[20:33:20] <borodust> frgo: generally speaking though, most of SDL2 is fairly portable, so you can take any bindings and use them
[20:33:38] <borodust> unless you want to access very OS-specific parts of SDL2
[20:33:53] <borodust> btw, those are bindings generated by :claw ;p
[20:33:59] <frgo> borodust: Ho ho - cool! Thx for the pointer. Yes, I am interested in the bindings.
[20:34:52] *** Joins: mayuresh (~kathe@49.32.228.64)
[20:35:01] <mayuresh> good morning everyone. :)
[20:35:03] <borodust> so, what i mean, you can take cl-sdl2, rename one of the .json (linux one to be more or less safe) to the architecture of yours and be done with it
[20:36:34] *** Quits: kevingal (~quassel@2001:770:c0:401:3d01:a4b4:1bb8:b977) (Ping timeout: 250 seconds)
[20:36:44] <frgo> borodust: Yep, thx. That's clear.
[20:38:46] <frgo> So, for the record: _death 's advice worked. I will compare results with the android output.
[20:41:47] <borodust> ahh, i guess, i need to read better next time, i thought there's a problem with c2ffi
[20:47:15] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[20:48:53] <jasom> doesn't use l-t-v, but: https://plaster.tymoon.eu/view/2905#2905
[20:51:30] <phoe> a value cell of a generated symbol, nice
[20:53:33] <phoe> I assume it survives garbage collection if the symbol is used inside BODY
[20:57:35] *** Joins: occ (~occ@user/occ)
[21:01:06] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:01:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:01:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:01:23] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[21:01:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:01:48] <sm2n> artchad: what did you do?
[21:01:59] <jasom> phoe: it should, otherwise macros using gensym wouldn't work
[21:03:33] <phoe> jasom: yes
[21:03:34] <phoe> thanks!
[21:04:04] <jasom> biggest downside is you can't declare the type of it; some magic with cl:the might let you get around it
[21:04:12] <artchad> sm2n: I just ran the build script.
[21:04:25] <artchad> installed ecl and ran the build script.
[21:08:09] <sm2n> you have quicklisp installed?
[21:08:55] <sm2n> wait, it says "unable to find include directory"... how did you install ecl?
[21:09:07] *** Quits: silasfox (~sbv@p200300cec7133b0020ab95fb7e869f34.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[21:09:32] <sm2n> if you look at the .build.yml it lists all the dependencies needed on alpine linux
[21:10:26] <sm2n> alpine doesn't make all the dependencies for ecl necessary for building as necessary dependencies by default
[21:10:42] <sm2n> so I think that may be your issue if you are on a similar distro
[21:10:54] <sm2n> remember that ecl needs a C compiler to work
[21:11:56] <sm2n> (Also, the only reason I used ecl is because I was running it on a very old raspberry pi short on ram, feel free to try another implementation, everything but the build scripts should be portable, and I developed on sbcl)
[21:12:20] <artchad> sbcl --script should work right?
[21:12:22] <artchad> I'll try that.
[21:12:52] <sm2n> you would need to call main, but yes
[21:13:52] <artchad> yeah, ok, now the error comes from lisp. progress is being made.
[21:14:12] <artchad> Symbol "MAKE-BUILD" not found in the ASDF/INTERFACE package.
[21:14:31] <sm2n> oh, as I said, the build.lisp is ecl-specific
[21:14:51] <sm2n> I don't have build support for anything but sbcl right now
[21:15:02] <artchad> I'm figuring out right now.
[21:15:13] <sm2n> make-build is an ecl extension to asdf
[21:15:23] <artchad> oh
[21:15:25] <artchad> rip
[21:15:39] <sm2n> err
[21:15:46] <artchad> maybe I could use that save-lisp-and-die thing
[21:15:47] <sm2n> s/for anything but sbcl/for anything but ecl/
[21:15:53] <sm2n> yeah, that would be what you want
[21:16:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:17:16] <sm2n> something like (progn (ql:quickload :scanner) (save-lisp-and-die "scanner" :toplevel #'scanner:main :executable t)) I think
[21:17:55] <sm2n> won't work in progn actually, because scanner package doesn't exist yet
[21:18:05] <sm2n> but as separate toplevel forms should be fine
[21:18:39] <artchad> ok, that worked
[21:18:48] <artchad> just had to (export #:main) inside package.lisp.
[21:18:58] <sm2n> ah, right
[21:19:08] <artchad> ye, I didn't see the point of the progn, so I just didn't use it.
[21:20:11] <sm2n> hmm, main returns instantly so I think it will just immediately close
[21:20:22] <sm2n> you probably have to write a function like I have in build.lisp
[21:20:39] <sm2n> with bt:join-thread
[21:20:45] <yottabyte> how can I check if every element in a list is in another list? I know I can iterate over the list and do find, but I imagine there's a simpler way
[21:21:10] <Bike> clhs subsetp
[21:21:11] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_subset.htm
[21:21:52] <artchad> sm2n: yep, the server instantly quit. ^-^
[21:22:49] <sm2n> yeah, try replacing the #'scanner:main with (lambda () (scanner:main) (mapcar #'bt:join-thread (bt:all-threads)))
[21:22:53] *** Joins: Nselm (~Nselm@p200300d56f251a1f03191f3d369fe5ab.dip0.t-ipconnect.de)
[21:26:48] <artchad> "Unhandled SB-THREAD:JOIN-THREAD-ERROR in thread #<SB-THREAD:THREAD "main thread" RUNNING"
[21:27:09] <artchad> I'm wondering what that does. I'm rather new to bordeaux-threads.
[21:27:12] <sm2n> weird
[21:27:17] <artchad> yeah
[21:27:27] <artchad> not sure why joining threads would do something weird
[21:27:35] <etimmons> I don't think you can join your own thread
[21:27:39] <artchad> does that mean no print interface for me?
[21:27:42] <sm2n> oh, I see
[21:28:11] <artchad> so cdr
[21:28:34] <sm2n> (remove (bt:current-thread) (bt:all-threads)) then
[21:28:41] <artchad> works
[21:28:43] <artchad> :DDDD
[21:28:45] <sm2n> nice
[21:28:51] <artchad> (mapcar #'bt:join-thread (rest (bt:all-threads)))
[21:28:58] <artchad> now I need to test that.
[21:29:06] <sm2n> does bt:all-threads guarantee an order?
[21:29:11] <Bike> i really doubt it.
[21:29:46] <sm2n> Using REST probably isn't safe then
[21:30:20] <artchad> I got an internal server error when I tried to scan an image with 300DPI color.
[21:30:34] <artchad> hmm
[21:30:49] <artchad> then I would have to get the main thread and remove that element from the list
[21:30:52] <sm2n> hmm? I thought I fixed that, maybe I forgot to push it?
[21:31:01] <sm2n> artchad: that's what REMOVE would do
[21:31:03] <Bike> besides the fact that trying to join all threads might be weird if some library you don't expect made threads, this isn't totally safe, since it's possible another thread gets created just after all-threads returns.
[21:31:47] <sm2n> Bike: right, but in this case we know only hunchentoot is running
[21:31:54] <artchad> how do I get the main thread though?
[21:32:07] <sm2n> (remove (bt:current-thread) (bt:all-threads))
[21:32:12] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e9:d728:a8fa:6b59:d4cb:97e1)
[21:32:19] <White_Flame> main?  you mean current?
[21:32:31] * artchad is learning a lot about the bordeaux-threads library
[21:32:36] <White_Flame> or the one that the process started?
[21:32:39] <artchad> I meant the current
[21:32:44] <sm2n> wait, do you have scanimage on your computer?
[21:32:45] <phoe> attempting to join threads that you don't manage yourself sounds like a recipe for hanging forever
[21:32:51] <artchad> good question
[21:33:05] <artchad> I'd assume it's installed by default. Alpine is a bit different though.
[21:33:07] <artchad> let me check
[21:33:24] <artchad> hehehe. I didn't have it installed
[21:33:29] <sm2n> yeah that would do it
[21:33:42] <sm2n> make sure scanimage actually works alone first
[21:33:47] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7942:5c67:99d0:7a74) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[21:34:17] <sm2n> maybe I should add some error handling for that...
[21:35:06] <sm2n> oh, and you also need imagemagick
[21:35:48] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[21:36:29] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10ed:252e:a8fa:6b59:d4cb:97e1) (Ping timeout: 268 seconds)
[21:36:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:37:26] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 256 seconds)
[21:37:34] <artchad> imagemagick I have. I'm an artist after all.
[21:37:43] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[21:37:58] <Josh_2> artchad upgrading from artchad to artgigachad
[21:38:21] <artchad> I'm not ripped enough for that
[21:38:28] <artchad> need to shovel more cow shit.
[21:38:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:39:41] <artchad> btw. the error led to a bunch of files being `rm'ed.
[21:39:47] <artchad> I had to `git reset --hard'
[21:40:30] <sm2n> Okay, then I definitely should add some error handling for that
[21:41:28] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:41:29] <sm2n> what files were removed?
[21:42:14] <sm2n> oh, I see
[21:42:16] <artchad> only within the directory
[21:42:24] <artchad> I hope
[21:42:27] <artchad> LOL
[21:42:41] <sm2n> the directory is changed in the scan command usually, but that failed because you didn't have scanimage
[21:43:23] <sm2n> I think
[21:44:16] <sm2n> there's only one rm invocation, and it's scoped to the current directory
[21:44:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[21:45:18] <sm2n> oh wait this is my fault
[21:45:22] <sm2n> nice you found a bug
[21:45:35] <sm2n> there's no code to automatically make the temporary folders
[21:47:54] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[21:48:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 268 seconds)
[21:49:51] <artchad> now I just need to get sane working in the terminal and then everything should be great.
[21:50:07] <artchad> sm2n: I'll notify you once I've got it running.
[21:50:50] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[21:51:22] *** Quits: mayuresh (~kathe@49.32.228.64) (Quit: Leaving)
[21:51:54] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[21:52:39] <sm2n> artchad: I pushed a change that should fix the folder issue
[21:53:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:53:38] *** Joins: aeth (~aeth@user/aeth)
[21:55:39] <artchad> thanks.
[21:55:47] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[21:56:51] *** Joins: dstein64- (~dstein64@dannyadam.com)
[22:00:40] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[22:00:40] *** dstein64- is now known as dstein64
[22:00:45] *** Quits: dstein64 (~dstein64@dannyadam.com) (Client Quit)
[22:01:18] *** Joins: dstein64 (~dstein64@dannyadam.com)
[22:01:30] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 250 seconds)
[22:06:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[22:07:28] <artchad> ok, getting the correct driver is apparently non-trivial on Alpine. On Devuan it worked.
[22:07:35] <artchad> or rather sane-backend
[22:08:21] <Josh_2> artchad also used devuan
[22:08:26] <Josh_2> nice
[22:08:44] <sm2n> Cool, I run my alpine for mine
[22:09:06] <sm2n> I needed some firmware for my particular scanner though
[22:09:38] <artchad> I think I need sane-backend-fujitsu. that seems to include my canon lide120
[22:10:16] <artchad> nvm
[22:10:23] <artchad> it was genesys
[22:12:59] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[22:13:23] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:14:27] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[22:15:03] *** Quits: Nselm (~Nselm@p200300d56f251a1f03191f3d369fe5ab.dip0.t-ipconnect.de) (Quit: Client closed)
[22:17:11] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e9:d728:a8fa:6b59:d4cb:97e1) (Ping timeout: 268 seconds)
[22:19:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:23:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:27:39] <fe[nl]ix> sm2n: see the note in https://sionescu.github.io/bordeaux-threads/threads/join-thread/
[22:27:58] <fe[nl]ix> trying to join with (bt:all-threads) is not going to work
[22:28:29] <fe[nl]ix> if anything, because you end up joining with the thread running the REPL
[22:29:19] <sm2n> fe[nl]ix: What would you suggest? (It does seem to work in this case, but hunchentoot uses bordeaux-threads under the hood and it's the only thing running, so that may be why)
[22:30:59] <Josh_2> What thread are you trying to join?
[22:31:06] <Josh_2> The hunchentoot one?
[22:32:42] <sm2n> yeah, the usecase is that an executable is produced, and it only has hunchentoot in it, but the hunchentoot event loop isn't on the main thread, so without some way of blocking, the application just immediately closes
[22:32:45] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:33:33] <Josh_2> One sec
[22:33:38] <Josh_2> thats solved on the cookbook
[22:34:14] <Josh_2> https://plaster.tymoon.eu/view/2906#2906 here
[22:34:34] *** Joins: aeth (~aeth@user/aeth)
[22:35:05] <lisp123> Is there a standard function to write association lists like this: (make-alist key datum key datum key datum)?
[22:35:25] <sm2n> Josh_2: thanks
[22:35:32] <Bike> lisp123: nope.
[22:35:43] <Josh_2> https://lispcookbook.github.io/cl-cookbook/scripting.html#for-web-apps here
[22:35:44] <lisp123> Bike: Thanks, will write one now
[22:36:15] <Bike> closest thing would be (acons key datum (acons key datum (acons ... nil
[22:36:43] <White_Flame> lisp123: there is (mapcar #'cons '(k1 k2 k3) '(v1 v2 v3)) => ((K1 . V1) (K2 . V2) (K3 . V3))
[22:37:02] <White_Flame> you could also use alexandria's plist-to-alist
[22:37:12] <White_Flame> *plist-alist
[22:37:32] <lisp123> White_Flame: Pairlis would be the same as the first one no?
[22:38:18] <White_Flame> ah I guss so
[22:38:39] <Josh_2> sm2n: there is also a means for exiting correctly, on sbcl I believe its a list @ sb-ext:*exit-hooks*
[22:39:17] <White_Flame> it's also not hard to have a LOOP construct grab 2 elements at a time
[22:39:48] * artchad fiddling around with udev rules
[22:40:16] <White_Flame> (loop for (k v) on '(k v k v ...) by #'cddr collect (cons k v))
[22:40:49] <sm2n> Josh_2: oh, hmm, I'm not sure that's actually better
[22:41:14] <sm2n> the sbcl manual says that thread spawning is prevented _after_ *exit-hooks* are run
[22:41:20] <sm2n> so you still have the same issue
[22:41:29] <Josh_2> The previous link I used is how I handle deployed executables with SBCL
[22:41:32] *** Quits: etiago- (~etiago@heme-15-b2-v4wan-164842-cust168.vm32.cable.virginm.net) (Ping timeout: 240 seconds)
[22:41:38] <Josh_2> I have many websites that use the method listed in the cookbook
[22:42:05] *** Joins: etiago (~etiago@user/etiago)
[22:42:09] *** Quits: lispy (~lispy@user/lispy) (Remote host closed the connection)
[22:42:13] <sm2n> I'm not saying it doesn't work, I'm just saying I don't think that's theoretically clean in all cases either
[22:42:22] <sm2n> (using *exit-hooks*)
[22:42:40] <Josh_2> exit-hooks is for when the executable is told to shutdown by a init system
[22:42:45] <Josh_2> I just thought it would be useful to share
[22:43:07] <Josh_2> the executable shutting down immediately is solved by searching for a thread named hunchentoot and joining it
[22:43:22] <sm2n> yeah, I understand
[22:44:06] <lisp123> White_Flame: thanks for that
[22:44:35] <White_Flame> or (loop while list collect (cons (pop list) (pop list)))
[22:45:01] <lisp123> that one is best <3
[22:45:13] <White_Flame> I noticed that plist-alist does nreverse at the end.  I like how COLLECT avoids that
[22:45:16] <lisp123> I did something similar with a recursive function, but that rads much better
[22:45:49] <White_Flame> right, for (k v) traverses 2 elements in, and then by #'cddr re-traverses 2 elements redundantly
[22:45:52] <lisp123> I'm anti-alexandria, everyone should write their own functions (or copy from others on IRC :D)
[22:46:07] <White_Flame> eh, I've been moving to alexandria, though I still have my utils lib
[22:46:13] <White_Flame> just there's been a lot of overlap
[22:46:44] <lisp123> Yeah I assume Alexandria covers a lot of common utils functions
[22:46:50] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:47:38] *** mister_m` is now known as mister_m
[22:52:18] *** Joins: dlowe[x] (~dlowe@146.115.166.6)
[22:54:25] <dlowe[x]> I have a question about lparallel on sbcl - let's say I set up a bunch of tasks (> number of workes) each calling cl:read-line on a socket stream. Can it successfully negotiate all the I/O or is it going to block weirdly?
[22:58:08] *** Quits: dlowe[x] (~dlowe@146.115.166.6) (Changing host)
[22:58:08] *** Joins: dlowe[x] (~dlowe@user/dlowe)
[22:59:22] <sm2n> huh, Josh_2, that is apparently not reliable on ecl
[22:59:55] <sm2n> I think bt:thread-name is returning a symbol in some case
[23:01:13] <sm2n> yup
[23:01:25] <sm2n> fe[nl]ix: is that supposed to happen?
[23:05:24] <jasom> phoe: A new static-let that I *think* is more efficient, and also lets you specify the type.  Modifying it to instead parse declarations for the &body form to set the type is an exercise left up to the reader: https://plaster.tymoon.eu/view/2908#2908
[23:06:37] *** Joins: jealousmonk (~user@user/jealousmonk)
[23:07:36] <Bike> maybe you should have (the ,type ,init) instead of just ,init for the initial set
[23:08:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:11:35] *** Quits: jealousmonk (~user@user/jealousmonk) (Remote host closed the connection)
[23:11:56] *** Joins: jealousmonk (~user@user/jealousmonk)
[23:15:40] *** Quits: dlowe[x] (~dlowe@user/dlowe) (Remote host closed the connection)
[23:17:44] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:19:38] <phoe> locally special? hmmmm
[23:20:09] <phoe> I actualy want to figure out what kinds of assembly all these compile into
[23:21:10] <phoe> jasom: I've posted both in the serapeum issue, thank you
[23:21:20] <phoe> (along with Bike's suggestion)
[23:23:20] <yottabyte> suddenly, I'm getting these errors in emacs: Debugger entered--Lisp error: (void-function ql:quickload), any idea what's going on?
[23:23:47] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[23:24:08] <yottabyte> I'm doing C-x C-e to run the current line (I do this all the time in slime)
[23:24:59] <Bike> yottabyte: that is the error you would get if you tried to evaluate (ql:quickload whatever) in elisp.
[23:25:16] <Bike> make sure you're in slime mode
[23:25:48] <yottabyte> that did the trick... don't know how I entered elisp mode
[23:26:05] <yottabyte> up until now, whenever I opened a .lisp file, it was using slime-mode and sbcl, etc.
[23:33:32] <Guest74> EdLangley[m]: That doesn't work for me. I don't want to load every colour library in existence just to provide support for the one colour library the user is using.
[23:39:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:40:05] <Guest74> hm, all the scanner talk has reminded me I haven't submitted my networked sane lib to quicklisp.
[23:41:34] <EdLangley[m]> Guest74: none of my suggestions were ‚Äúload every colour library in existence‚Äù
[23:42:00] <Guest74> Xach: What's the procedure to submit a library?¬† The quicklisp.org website's front page hasn't been updated since 2016.
[23:42:10] <Bike> you submit an issue on github
[23:42:12] <lagash> Guest74: sane? like, printing? or was that scanning?
[23:42:20] <Xach> Guest74: you can submit an issue on github, or send an email if you like.
[23:42:26] <Bike> https://github.com/quicklisp/quicklisp-projects/issues
[23:42:29] <Xach> The procedure hasn't changed since 2010.
[23:42:38] <Guest74> Ed: to define a method¬† the colour library has to be loaded.
[23:42:38] <sm2n> Guest74: What does your library do?
[23:42:45] <sm2n> (the SANE one)
[23:43:35] <EdLangley[m]> Guest74: yes, and my suggestions all involved defining multiple systems, each of which only depends on one colour library
[23:43:49] <EdLangley[m]> So the user just loads the system my-system/colour-library
[23:43:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:44:07] <EdLangley[m]> Or you use ASDF-SYSTEM-CONNECTIONS to solve the problem
[23:44:11] <Guest74> lagash: sm2n: it's a backend for scanning over the network.¬† I use it to scan on my local scanner so I don't have to touch foreign stuff, it's all lisp.
[23:45:03] <Xach> EdLangley[m]: asdf-system-connections introduces problems also, at least for quicklisp
[23:45:05] <Guest74> Ed: you said so that one library would load them all, Perhaps I misinterpreted.¬† Anyways, I hate slashes in package names.
[23:45:47] <sm2n> Guest74: Nice
[23:46:00] <sm2n> Unrelatedly, I would also recommend my-system/colour-library
[23:47:27] <EdLangley[m]> Guest74: for better or worse, ASDF has decided that sub-packages use slashes
[23:47:39] <EdLangley[m]> You can do multiple .asd files to workaround this.
[23:47:45] <Guest74> nope, won't do it. I dislike it extremely.
[23:49:01] <Guest74> sm2n: I should mention it's only the implementation of the protocol.¬† My frontend for it isn't in a finished state.¬† Works fine at the repl though.
[23:50:44] <sm2n> I see, is the repo public?
[23:51:15] <sm2n> artchad: I added sbcl build support, and should've fixed the issue you had.
[23:51:27] <artchad> which issue concretely?
[23:52:02] <sm2n> "internal server error"
[23:52:07] <Guest74> https://github.com/JMC-design/nsane I should probably add links to how to actually get sane to serve a scanner over the network.¬† I swear that was the hardest part of writing it.
[23:53:21] <sm2n> Right, that's why I gave up and wrote a webapp :)
[23:55:25] <Guest74> Xach: so issue under quicklisp-client?¬† I ask because I don't see any such issues, i guess you delete them?¬† I wonder why this isn't written anywhere.
[23:56:02] <Bike> i linked you where you should file the issue: https://github.com/quicklisp/quicklisp-projects/issues
[23:56:56] <Guest74> sorry, there was a flurry of posting and I didn't see it.
[23:57:30] <Bike> not a problem
