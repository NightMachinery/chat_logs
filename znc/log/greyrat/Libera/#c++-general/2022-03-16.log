[00:00:11] <johnny> the fact that styling like that is encoded in the program soucrce is annoying
[00:00:29] <rpav> mort: like on the next line?
[00:01:57] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:02:14] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:02:16] <mort> rpav: yeah, like `int SomeLongFunctionName(int x,\n                                      int y)` where the spaces align the 'int y' to the 'int x'
[00:02:20] <rpav> foo(X,\nY); Y should align with X in most cases, though pretty sure you can disable that in clang-format .. and unfortunately it overly-conflates things
[00:03:01] <rpav> yeah in long declarations i prefer int foo(\n... and every parameter to be half-indented on its own line
[00:03:14] <rpav> and then a final "\n) {"
[00:03:16] <mort> same
[00:03:22] <rpav> i could get that in clion but not clang-format ;/
[00:03:23] <mort> or, well, I prefer every parameter double-indented
[00:03:31] <mort> but half-indenting is also good
[00:03:33] <rpav> well whichever but like
[00:03:36] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:03:50] <rpav> you can sortof get some of the things but then it also tends to break unrelated constructs
[00:03:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:04:56] <rpav> something like c2ffi that spat out syntax tokens and line/column positions and depths would be pretty neat actually, you could probably implement your own styles pretty easily with another tool that took input about what to do with them
[00:05:06] <rpav> then your styling stuff could sit in the middle and fiddle with the numbers
[00:06:51] <rpav> the main problem is C++ syntax/ast is f'n complicated and full of a ton of shit, and you have to handle a number of contextual cases
[00:07:33] <mort> yeah
[00:16:08] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:16:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:16:24] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:21:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:24:36] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:25:45] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:26:54] *** Joins: filename (~kilitary@188.242.105.134)
[00:27:17] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[00:30:15] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:33:48] *** Quits: Guest7359 (~Guest@host242.190-139-77.telecom.net.ar) (Remote host closed the connection)
[00:33:53] *** Quits: magla (~gelignite@d536591f.access.ecotel.net) (Quit: Stay safe!)
[00:33:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:35:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:36:30] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[00:36:58] *** Joins: kevr (~kevr@user/kevr)
[00:37:34] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:f470:9081:bd76:4326)
[00:39:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[00:40:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5c5f:ad85:d2cd:496f) (Ping timeout: 240 seconds)
[00:42:19] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Ping timeout: 250 seconds)
[00:42:34] *** Joins: Giovanni (~Giovanni@176.54.32.122)
[00:43:48] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 240 seconds)
[00:43:55] <Alipha> rpav: problem is, that won't work correctly with else, if `with` is inside an if statement. #define with(...) if(__VA_ARGS__; 0) ; else // I think would work
[00:49:04] <MaddHatter> yeah, Qt's #defines are fine as long as they work. If there's a mistake in one of them, the error messages are hard to parse
[00:49:18] *** Joins: soman (~yaaic@83.139.179.68)
[00:49:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:49:49] <MaddHatter> especially if it's a link error because there's no obvious connection between what one wrote in source and what the linker is complaining about being missing
[00:50:35] <soman> Hi all! What the ourpose of constexpr vector? Then we should know all operations in compile time and could use std array?
[00:51:15] <MaddHatter> std::array isn't variable-length
[00:51:20] *** Joins: adeliktas (~adeliktas@i59F5FD1E.versanet.de)
[00:51:51] *** Joins: Kerr (~Kerr@2601:602:ce80:df10::b76e)
[00:51:53] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:755a)
[00:51:58] <soman> MaddHatter if we go in compile time then we know the size, aren't we?
[00:52:14] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[00:52:24] <MaddHatter> the compiler might be able to figure out the size. That doesn't mean that I, as a programmer, know it or care to repeat it again in order to declare the array
[00:53:26] <rpav> Alipha: ooh nice.
[00:54:34] *** Quits: FLHerne (flh@flherne.uk) (Excess Flood)
[00:54:44] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Quit: Leaving)
[00:54:49] *** Joins: FLHerne (flh@flherne.uk)
[00:55:05] <Alipha> soman: std::vector would just be more convenient in some cases, like if you wanted to use push_back or insert or erase
[00:56:18] <mort> I actually can't get clang-format to generate a halfway reasonable parameter list
[00:56:37] <rpav> mort: it doesn't really matter tbh, just use an ok one
[00:56:52] <mort> that's what I'm unable to find tho
[00:56:59] <rpav> since you don't actually have to deal with it, it just has to look vaguely acceptable and you get it hwne you hit a button
[00:57:16] <mort> https://p.mort.coffee/cd5.cc this call looks decent, but that config means a function declaration looks like https://p.mort.coffee/M2w.cc
[00:57:57] <MaddHatter> That'd be manageable if you could get the { onto another line
[00:57:59] <rpav> those ar both terrible
[00:58:05] <mort> the call is okay enough
[00:58:13] <mort> I mean it's usable
[00:58:15] *** Inline__ is now known as Inline
[00:58:16] <mort> the declaration is unusable
[00:58:50] <ville> none of it matters. what is the bug that this is going to cause?
[00:59:01] <rpav> mort: try https://gist.github.com/rpav/c77d7e222e5a57709d33be48e0b4beef
[00:59:07] <mort> ville: poor readability is a bug
[00:59:10] <rpav> it's a bit older and i forget exactly what it does but
[00:59:14] <soman> Looks like vector is more flexible in some cases then...
[00:59:21] <rpav> it ends in beef, so it can't be all bad
[00:59:24] <ville> both read just fine and so do various other ways of mangling a call or declaration
[00:59:54] <MaddHatter> ville: someone's going to overlook something because the formal params and body are at the same indent with no separation
[01:00:24] <mort> rpav: that's kinda okay if you want the opening brace on its own line for all functions
[01:00:26] <ville> yeah that's the fud, but is that a real thing?
[01:00:47] <mort> ville: if you think formatting has literally no impact on anything, you can stay out of this discussion, please
[01:00:47] <MaddHatter> My solution is to put { on its own line, only when the formal params wrap
[01:01:07] <mort> MaddHatter: I would be okay with that, but I don't know if clang-format has an option for that
[01:01:12] <ville> you can come up with all kinds of "think of the children"-level arguments. in my experience it's just not a thing
[01:01:30] <ville> sure formatting has impact. just not this particular one
[01:01:32] <mort> ville: stay out of this discussion
[01:01:41] <Inline> int main() {}
[01:01:43] *** Quits: soman (~yaaic@83.139.179.68) (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
[01:01:44] <mort> it's okay not to care
[01:01:47] <Inline> int main()
[01:01:50] <Inline> {
[01:01:52] <Inline> }
[01:02:02] <MaddHatter> mort: yeah, I kind of want to see what you come up with because I don't have a clang-format config yet and it sounds like whatever you do would be a starting point that I'd like
[01:02:03] *** Quits: filename (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[01:02:04] <mort> you don't have to insert yourself into every discussion to proclaim how much you don't care about the thing being discussed
[01:02:43] <ville> it's just so much energy spent on nonsense
[01:03:21] <mort> spending energy on getting a config file right once so that you have a code style you like, is energy better spent than the energy you're spending right now to explain how little you care about formatting
[01:04:28] <MaddHatter> We can probably agree that inconsistency is bad, regardless of format style, right? So time spent on a config, within reason, is an investment in consistency and that's worthwhile
[01:04:37] <mort> MaddHatter: I tried out the config rpav linked, I think it looks very reasonable
[01:04:46] * MaddHatter saves
[01:04:55] <mort> it has the opening brace on its own line for every function definition, which I personally don't love
[01:05:11] <mort> but it might be the best possible style (according to my tastes) which clang-format supports
[01:05:33] <MaddHatter> does if(...) { still stay on one line?
[01:05:42] <mort> yes, it's just for functions
[01:06:19] <MaddHatter> that sounds like it'd be acceptable
[01:06:23] <Inline> if( bla && blabla || blablabla &&....)
[01:06:28] <Inline> lol
[01:06:29] <johnny> it's possible to have void foo()>\n<separator> and  if () {}
[01:06:38] <johnny> err i only mean one {
[01:06:53] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[01:06:53] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:07:02] <mort> `AlignAfterOpenBracket: BlockIndent` seems reasonable too, but that doesn't seem to be supported on my system (with clang-format 13)
[01:07:33] <johnny> if it works in clang-format 14, it'd be a worthy upgrade
[01:07:35] <mort> I could update clang-format on my laptop but I wouldn't want to have to rely on running bleeding-edge clang-format in CI or something, so I'll stick to stuff supported by older clang-formats
[01:07:50] <johnny> you run clang-format in ci?
[01:08:01] <mort> I don't know, maybe?
[01:08:15] <johnny> clang-tidy sure, but clang-format , i wouldn't
[01:08:27] <johnny> of course it might not work in 14 at all.. who knows :)
[01:08:43] <LordKalma> AlignAfterOpenBracket comes from format 3.8
[01:08:44] <johnny> i need to go over my clang-format again, but there are too many frakin options
[01:08:46] <mort> CI wouldn't commit changes to formatting, just verify that clang-format doesn't change anything, meaning the code being committed already follows the style guide
[01:08:46] <LordKalma> according to the docs
[01:09:14] <mort> AlignAfterOpenBracket is in 3.8 yes, but it doesn't seem to support the BlockIndent option before some version after 13.0.1
[01:09:26] <johnny> just give me the equivalent of prettier ;(
[01:09:42] <mort> that fact isn't in the docs, I just know clang-format complains about an unknown enumerated scalar when using BlockIndent
[01:09:53] <johnny> are you sure you're passing the right option?
[01:09:54] <LordKalma> JS is syntatically equivalent to C++ enough to format with a JS formatter
[01:10:03] <LordKalma> clang-format even supports JS officially
[01:10:25] <johnny> but it does'nt have a prettier type based config
[01:10:30] <Alipha> actually, std::vector being constexpr does seem a little useless. i'd like to be able to do something like this: https://godbolt.org/z/1r83xjYeh but `primes.size()` can't be used in a constant expression
[01:10:32] <johnny> the problem with clang-format is all the options :)
[01:10:46] <johnny> and using a js formatter means requiring js as part of deps
[01:10:55] <mort> johnny: `AlignAfterOpenBracket: AlwaysBreaks` works and does what's documented, `AlignAfterOpenBracket: BlockIndent` causes an "unknown enumerated scalar" error
[01:11:05] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[01:11:05] <LordKalma> not if you accept one of the defaults
[01:11:07] <mort> so I think I'm passing the right option
[01:11:26] <johnny> LordKalma, the defaults aren't like prettier though :)  they're some companies own style guides
[01:11:56] <johnny> but perhaps i should go over them again to see if new ones have been added
[01:12:16] <johnny> i bet there's a iste somewhere that has reasonably complex code in which you can simply apply different formats to
[01:12:21] <johnny> a site*
[01:12:26] <mort> tbh I feel like the insane corporate influence is an issue with most of C++ tooling
[01:12:43] <johnny> well in the case of clang-format default configs i think t's fine tho
[01:12:56] <mort> both clang-tidy and clang-format seem like Google's and Apple's toys which privilege their companies' style guides
[01:13:12] <mort> no presets which are designed to work for a general community
[01:13:17] <mort> just stuff designed to work for a megacorp
[01:13:30] <johnny> has anybody tried submitting one?
[01:13:38] <johnny> i just bet there's no agreement
[01:13:50] <johnny> in this particular case specifically .. i can't say it for other things
[01:14:14] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d5:1441:6595:2578) (Quit: Konversation terminated!)
[01:14:27] <johnny> i think js has plenty of corporate influence, as much as C++.. but it plays out diffferently
[01:14:41] <MaddHatter> Alipha: vector::size should be constexpr in C++20, according to cppreference
[01:15:00] <johnny> and of course the "standards" body is slightly more representive
[01:15:25] <johnny> hmm.. reminds me.. are constexpr vector and a string in any current C++20 implementation in the popular compilers?
[01:15:51] <MaddHatter> and if that's not working, std::size should also be constexpr
[01:15:53] <johnny> of course it's not that helpful until they all implement it. at least fr me
[01:17:21] <Alipha> MaddHatter: I'm not sure if it matters if size is constexpr because primes.size() is calling size on a non-constexpr vector
[01:19:28] <MaddHatter> oh
[01:19:29] <PJBoy> johnny, those are in gcc and msvc
[01:19:33] *** Quits: robod34 (~Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:19:49] <johnny> but not clang..
[01:20:39] <PJBoy> { constexpr size_t s = f(); } constexpr size_t f() { vector v{1, 2, 3, 4, 5}; return v.size(); }
[01:20:40] <geordi> error: variable 'v' of non-literal type 'vector<int>' in 'constexpr' function only available with '-std=c++2b' or '-std=gnu++2b'
[01:20:50] <PJBoy> that's weird
[01:21:05] <LordKalma> speaking of clang
[01:21:07] *** Joins: badone (~badone@209.132.189.152)
[01:21:09] <PJBoy> it's definitely a C++20 feature
[01:21:25] <LordKalma> clang is a good compiler. and somehow the defaults on windows are either msvc, or directly mingw
[01:21:36] <LordKalma> why isn't clang more used on windows, I wonder
[01:21:44] <PJBoy> { constexpr size_t s = f(); SHOW(s); } constexpr size_t f() { string s("12345"); return s.size(); }
[01:21:44] <geordi> s = 5
[01:21:56] <PJBoy> that's even weirder that it does work with string
[01:22:38] <PJBoy> well clang just sucks now for some reason
[01:22:47] <Alipha> PJBoy: yeah, that works, but it's kinda useless
[01:22:52] <LordKalma> :(
[01:23:05] <LordKalma> we rely on clang tooling more and more
[01:23:11] <LordKalma> but not clang++
[01:23:27] <PJBoy> you have to be creative to make those constexpr containers useful
[01:24:10] <PJBoy> like slowly constructing a vector, then using its size() as the number of elements when declaring an std::array
[01:24:14] <johnny> is it just FUD that google is trying to move away from C++, or is it more accurate to say that they are simply focusing on style guides and libraries and just bowing out of influencing the standards?
[01:24:15] * Alipha waits for ville to chime in about "we should just have a compile time vm"
[01:24:25] <PJBoy> and copying back the data from the vector in the array
[01:24:47] <LordKalma> well, intel has a pretty active llvm fork
[01:25:06] <LordKalma> but dunno if that resulted in any meaningful upstreams
[01:25:32] <LordKalma> https://github.com/intel/llvm work on SYCL still going
[01:26:24] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[01:27:53] <LordKalma> it's a shame :(
[01:29:48] <PJBoy> { constexpr array s = f(); SHOW(s); } constexpr string make_string() { string s("12345"); return s + s; } constexpr auto f() { string s = make_string(); array<char, size(make_string())> ret; ranges::copy(s, begin(ret)); return ret; } // Alipha
[01:29:49] <geordi> s = {'1', '2', '3', '4', '5', '1', '2', '3', '4', '5'}
[01:29:49] <PJBoy> for example
[01:29:51] <MaddHatter> LordKalma: time. msvc and mingw have years of momentum
[01:30:55] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:30:59] <PJBoy> it's dumb that I have to call make_string() to get a value I can use for constexpr operations instead of using the local variable s
[01:31:08] <PJBoy> but it works
[01:34:21] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[01:35:47] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:38:42] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:39:20] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[01:40:18] <Alipha> PJBoy: yeah. here we go: https://godbolt.org/z/xx39M8qWK
[01:41:02] <PJBoy> ahaha
[01:41:07] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[01:41:09] <PJBoy> that SizeOnly parameter, I like it
[01:41:56] <PJBoy> also it's 2022 man
[01:42:09] <PJBoy> 2019 called, they want their std::algorithms back
[01:42:12] <Alipha> it's still annoying that c++ forces you to "reach around your head to pick your nose" in cases like these
[01:42:35] <PJBoy> yeah it's pretty bad
[01:42:47] <PJBoy> consteval could have solved this, damn it
[01:43:19] <PJBoy> also a virtual machine doohickey
[01:43:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:44:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:44:02] *** ChanServ sets mode: +v npaperbot
[01:44:38] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:44:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:44:58] <LordKalma> if TMP is turing complete, isn't it a VM of sorts? :D
[01:45:14] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[01:46:01] <PJBoy> I still think cpp.php is a good idea
[01:49:35] <MaddHatter> https://brevzin.github.io/c++/2020/02/05/constexpr-array-size/ related
[01:51:32] <MaddHatter> Alipha: is line 32 re-calculating all the primes just to throw them away, or am I misunderstanding this thing?
[01:53:17] <PJBoy> {} void check(int (&param)[3]) { constexpr auto s1 = size(param); }
[01:53:17] <geordi> error: 'param' is not a constant expression
[01:53:35] <PJBoy> I'm surprised I never thought about that case
[01:54:31] <PJBoy> {} void check(array<int, 3>& param) { constexpr auto s1 = param.size(); } // similarly
[01:54:31] <geordi> Same error.
[01:55:29] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:57:08] <PJBoy> line 32 is where it copies the primes from the vector into the array
[01:57:46] <PJBoy> oh and yeah it calls the function with SizeOnly = true so that it can get the array size
[01:58:12] <PJBoy> this is the kind of code you would only ever run for constexpr results
[01:58:33] <PJBoy> so actually it ought to be declared consteval
[01:58:50] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[01:59:17] <MaddHatter> even compile-time, seems like one would want to avoid the duplication of work
[01:59:27] <PJBoy> yeah you'd like to
[01:59:39] <PJBoy> but nothing we can do
[02:00:21] <cq-work> What's everyones opinion on the book "Clean Code" by Robert C. Martin
[02:01:55] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[02:02:06] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[02:11:57] *** Joins: nshire (~nshire@user/nshire)
[02:15:17] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:23:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:25:50] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[02:29:36] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 250 seconds)
[02:30:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[02:33:48] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[02:36:07] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:39:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:40:50] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[02:41:47] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:755a) (Quit: Client closed)
[02:43:40] <ville> LordKalma: yes. a fairly major problem being that you have to learn/use different syntax. "i want to iterate from 0 to N". for regular c++ you might write a for loop. for tmp...
[02:45:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:48:25] <ville> "write haskell to for a code generator to produce the desired c++ code you wanted"-level of strange
[02:48:43] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:49:18] <ville> except at least then your compiler errors would be understandable so i suppose that would be more sensible approach
[02:51:51] <ville> at least early on the only repetition primitive you had was recursion so you'd end up with really long type names dominating the error output
[02:51:53] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:55:37] *** Joins: manjaro-user (~manjaro-u@199-7-158-51.eng.wind.ca)
[02:59:11] *** Quits: andreasbuhr (~quassel@p549db53a.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:00:08] *** Joins: lnslbrty (~NULL@user/lnslbrty)
[03:00:12] *** Quits: manjaro-user (~manjaro-u@199-7-158-51.eng.wind.ca) (Ping timeout: 252 seconds)
[03:02:12] <ville> cq-work: from what i remember from flipping through it is that it does not give you any way for you to actually measure whether you've succesfully produced "clean code". so no idea what use it would be for an engineer. on the other hand if you're a consult hired to evaluate others then it's great for you. one more fad term/vague term to use to make claims with that can't be proven false
[03:08:39] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:12:41] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:2d80:22d2:543f:f623)
[03:18:24] <ville> also it's awfully java-centric if i recall. so you're going to get bunch of stuff that is just plain weird in c++. think it had preference for exceptions over error codes for example
[03:19:28] <ville> might not sound too bad, until you've mutli-threaded application and everytime an exception is thrown it grabs a global lock and it starts to tank your performance
[03:20:29] <Alipha> cq-work: my work is a java shop and I read part of it as part of my job. We agreed with most of it.
[03:21:22] *** Joins: ymwm (~yingmanwu@110.85.123.64)
[03:21:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:30:32] <ville> at the same time would you not get the "same" advice from say core guide lines but with a chance of being more relevant to c++
[03:34:31] <Alipha> Clean Code covers probably a little higher level than the cpp core guidelines. And more general programming ideas (like size of functions or usage of comments) than the core guidelines
[03:34:37] *** Quits: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[03:36:35] *** Joins: veverak (~veverak@89.102.98.161)
[03:36:39] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:38:33] <ville> function size ones are complete nonsense to begin with
[03:39:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:40:50] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[03:43:06] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a021:f576:2141:1ac3) (Ping timeout: 252 seconds)
[03:46:21] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 256 seconds)
[03:50:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:53:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:55:16] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:55:30] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:57:07] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[03:59:16] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[04:02:47] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:06:47] *** Joins: xkuru (~xkuru@user/xkuru)
[04:08:25] *** Joins: x_kuru (~xkuru@user/xkuru)
[04:10:09] *** Quits: InPhase (~InPhase@openscad/inphase) (Quit: rebooting)
[04:11:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[04:11:32] *** Joins: InPhase (~InPhase@openscad/inphase)
[04:12:21] *** Joins: k8yun (~k8yun@user/k8yun)
[04:15:46] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 250 seconds)
[04:16:45] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Quit: Client closed)
[04:20:55] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[04:21:11] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:21:24] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[04:24:19] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:31:36] <johnny> it comes down to functions should be as big as they need to be and no bigger. if they do more than it says in the tin, then you should split it
[04:32:03] <johnny> specific size ones are just guidelines that maybe you should take a closer look to be sure that the aren't bigger than they should be
[04:34:15] *** Quits: proller (~p@2a02:6b8:b081:26::1:13) (Ping timeout: 252 seconds)
[04:36:01] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Ping timeout (120 seconds))
[04:37:01] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:37:57] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[04:38:39] <ville> the "do one thing" and "prefer small functions" are good ones for justifying things like going from a if-else if-else/switch to hash table lookup or virtual call. then saying now that the code went from "some hundred lines" to 10 lines it's "clean code"
[04:40:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:42:33] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:50:45] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a021:f576:2141:1ac3)
[04:51:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a021:f576:2141:1ac3) (Remote host closed the connection)
[04:52:04] <NyB> well, luckily one has more choices than "700-line function" and "manually implement a vtable with a hash table". Well, in most cases.
[04:54:11] <johnny> if all you're doing is filling in the result of what's effectively a se of key values, then why wouldnt you wanna use a hash?
[04:54:26] <johnny> a set of keys and values*
[04:55:01] <johnny> although i suppose it's reasonable enough to do something with a match statement in languages with such a construct
[04:55:07] <johnny> match expressions rather
[04:56:36] <NyB> well, if one is mapping values, then using a map makes sense
[04:56:39] *** Joins: pulse (~pulse@user/pulse)
[04:57:14] <NyB> (or an array, maybe, if they keys are integrals and not very sparse?)
[04:57:40] *** Quits: syrius_ (syrius@titan.stormtek.net) (Ping timeout: 272 seconds)
[04:57:54] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[04:58:02] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[04:58:36] <NyB> but huge switches are typical in e.g. operation dispatch scenarios, and using a map (if even possible) does not always make the code cleaner or faster.
[04:58:37] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[04:58:52] <johnny> well of course it's context dependent
[04:59:24] <johnny> but so are most "rules"
[05:00:20] <johnny> and of course certain "rules" can be quite murderous on performance, especially in the places where C and C++ are often used
[05:00:23] *** Quits: rb (~augh@alogs.space) (Remote host closed the connection)
[05:01:16] *** Joins: proller (~p@2a02:6b8:b081:15::1:2b)
[05:01:37] *** Joins: rwb (~augh@alogs.space)
[05:01:57] <NyB> well the first rule should probably be "don't optimize prematurely". And the second one "really, don't!". "OK, maybe if the profiler tells you so" could be the third.
[05:03:40] *** Joins: syrius (syrius@titan.stormtek.net)
[05:04:27] <Alipha> Clean Code argues the optimal function size is about 5 lines. That if it's larger than that, then you can extract lines into their own functions. Which I'm sure everyone here will say that's ridiculous
[05:04:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:04:56] <NyB> 5 lines? not 50?
[05:06:17] <NyB> my personal "hmm"-limit is around 50, which fits nicely on most monitors I work on.
[05:11:29] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:11:44] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:17:28] <Alipha> Yes, 5 lines.
[05:18:09] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:18:55] <NyB> that's... impractical for most real-world scenarions I can think of...
[05:19:43] <NyB> not to mention that if you go the template meta-programming way then sometimes you need 5 lines just for a type declaration :-p
[05:24:14] <Alipha> s/lines/statements/g
[05:26:42] <causative_> imo unless a block of code is repeated multiple times, it's better to have it inline, that way you don't have to go looking up what a name means, because all the code is right there.
[05:27:08] *** Joins: Kerr (~Kerr@2601:602:ce80:df10::b76e)
[05:28:11] <causative_> if something is just called once then why not just put a comment saying what you're about to do, then put the code that does it, instead of having a separate function? what would be the advantage of a separate function in that case, compared to the disadvantage of making the code less straightforward to read?
[05:30:49] <NyB> causative_: for one, the larger a function is, the harder it becomes to test as a unit
[05:34:07] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:34:18] <causative_> ok but then, testing it is calling the code from more than one place anyway
[05:36:57] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 252 seconds)
[05:37:44] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:38:36] <causative_> a 50 line function that has no comments is a problem, I think the main reason to break up the code into small functions would be to help document what each piece does, via the function names
[05:39:20] <causative_> but that's only an advantage compared to a total absence of comments
[05:39:38] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[05:41:21] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[05:43:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:44:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:44:02] *** ChanServ sets mode: +v npaperbot
[05:46:55] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[05:49:26] <Alipha> causative_: rule #1 of programming: people don't read/maintain comments :-)
[05:49:37] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 240 seconds)
[05:50:03] <causative_> then *that's* the problem to solve
[05:56:30] *** Joins: syrius (syrius@titan.stormtek.net)
[05:56:45] <causative_> I would say it's reasonable that every 5 lines of code should have something in English telling you what it does - whether that's a comment or a function name
[05:57:30] *** Joins: ferdna (~ferdna@user/ferdna)
[05:57:48] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[05:59:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:03:58] <johnny> never seen that in my life
[06:04:00] <johnny> ever
[06:04:09] <johnny> not in anybody's code across all the languages i've read
[06:04:41] <pulse> comments are a fine art
[06:05:11] <johnny> that is not a problem that seems fixable, and you can't properly validate it with a static anlyzer. sure you an validate that the comments exist, but not if they mean anything of value
[06:05:23] <causative_> I don't do that either. but I think for every block of 5-10 lines of code at least an explanatory comment is *possible* and probably useful to someone else reading it
[06:05:36] <johnny> but really, consider what you're trying to do
[06:06:06] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 252 seconds)
[06:06:07] <causative_> I do have a lot of comments on 5 line blocks of code but also some 30 line blocks with nothing, that probably should have some
[06:06:10] <johnny> isn't part of the problem with small functions really a problem with our tooling ? our editors and code views arehardly diffrent than back in the day
[06:06:22] <johnny> many small functions might work fine if the editor could inline them for viewing
[06:06:35] <johnny> i mean really, all we're doing is working around poor tooling
[06:06:57] *** Joins: syrius (syrius@titan.stormtek.net)
[06:09:34] <causative_> every block of code where it's not obvious what it's intended to do without even needing to think about it, would benefit from a comment
[06:10:04] *** Quits: nshire (~nshire@user/nshire) (Quit: Leaving)
[06:10:24] *** Joins: Inline__ (~Inline@p200300cd470a26002e72b25ea400e9f0.dip0.t-ipconnect.de)
[06:12:39] <johnny> well your first thing to do should be try to make it understandable, but if you can't then it indeed should be commented
[06:12:52] <johnny> i don't think folks pay enough attention to naming in general though
[06:12:57] *** Quits: Inline (~Inline@p200300cd470cd6007b9a329b320e25d9.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:13:27] <johnny> a lot of folks stick with silly naming from before we could even use decent naming. i can't say that the C library functions for example are named very well in some cases
[06:23:09] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:24:45] <causative_> I usually write comments first, I think about what I want to do and then write that down, then do it
[06:25:49] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[06:30:33] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[06:30:41] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:32:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:32:34] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[06:33:12] <Alipha> The thing is, a good, descriptive function name works as just as well as a comment and it's relatively rare for someone to update what a function does without changing the function does, but it's not so uncommon for someone to change code without updating the comment. Sure, you can say, "well, people should be better about updating comments" but you can't fight reality
[06:38:26] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:39:09] <causative_> if you're talking about what people actually do, they don't commit to using small functions with useful names consistently, nor do they write good comments consistently
[06:39:42] <causative_> both are more aspirational than realistic
[06:42:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[06:43:29] <causative_> it is a pretty common thing for a function to gain additional code without changing its name
[06:44:54] <causative_> void doSimpleThing() { bugfix(); simpleThing(); crossCuttingConcern(); ohAlso();}
[06:51:46] *** Quits: emerent (~quassel@p200300cd5743c35fba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:52:05] *** Joins: emerent (~quassel@p200300cd5743c36fba27ebfffed28a59.dip0.t-ipconnect.de)
[06:52:48] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[06:53:07] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[06:53:31] <causative_> it's also easier to write a comment than to choose a function name and make sure you pass down all the variables the new function needs
[07:01:11] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[07:08:59] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[07:11:57] *** Joins: adeliktas1 (~adeliktas@i59F52712.versanet.de)
[07:13:49] *** Quits: adeliktas (~adeliktas@i59F5FD1E.versanet.de) (Ping timeout: 240 seconds)
[07:13:49] *** adeliktas1 is now known as adeliktas
[07:14:06] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:19:19] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[07:20:10] *** Joins: noarb (~noarb@user/noarb)
[07:21:06] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[07:24:16] *** Joins: noarb (~noarb@user/noarb)
[07:37:33] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[07:39:08] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:42:54] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[07:52:38] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:54:10] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[07:54:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[08:05:28] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:09:45] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:13:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[08:22:00] *** Joins: k8yun (~k8yun@user/k8yun)
[08:22:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[08:23:35] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 252 seconds)
[08:26:43] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:27:01] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[08:31:23] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:33:35] *** Quits: Giovanni (~Giovanni@176.54.32.122) (Remote host closed the connection)
[08:34:15] *** Joins: Giovanni (~Giovanni@176.54.32.122)
[08:38:22] *** Quits: Giovanni (~Giovanni@176.54.32.122) (Remote host closed the connection)
[08:38:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:39:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:43:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:57:32] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:58:52] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[09:03:12] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:05:34] <Kerr> is there a way in a makefile to fill a variable with a list of all the files of a particular extension, IE:      headers:=[every .h file in ./src]
[09:06:48] <Kerr> and furthermore, would it be possible to do something like:      objects:=[./obj/filename.o for *.cpp file in ./src]
[09:36:15] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[09:36:41] *** Joins: kenan-office (~kenanmara@user/kenanmarasli)
[09:38:22] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[09:39:55] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[09:40:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:43:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:43:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:44:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:44:03] *** ChanServ sets mode: +v npaperbot
[09:51:20] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:54:40] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[09:55:25] *** Joins: teepee (~teepee@openscad/teepee)
[10:03:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[10:21:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:27:18] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[10:32:39] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:36:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[10:39:49] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[10:41:02] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:44:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:47:03] *** Joins: ymwm_ (~yingmanwu@110.85.123.64)
[10:49:54] *** Quits: ymwm (~yingmanwu@110.85.123.64) (Ping timeout: 252 seconds)
[10:53:37] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Ping timeout: 256 seconds)
[10:55:44] *** Joins: ravan_ (~ravan@42.201.198.151)
[10:55:44] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[10:55:44] *** Joins: ravan_ (~ravan@user/ravan)
[10:55:44] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 250 seconds)
[11:01:31] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:03:15] *** Quits: rg (~r-g@gateway/tor-sasl/r-g) (Ping timeout: 240 seconds)
[11:04:57] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:05:30] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:11:21] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[11:14:37] *** Joins: manjaro-user (~manjaro-u@199-7-158-247.eng.wind.ca)
[11:23:08] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:26:46] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:26:49] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[11:30:32] *** Joins: jancoow (~jancoow@user/jancoow)
[11:30:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:795e:a75c:8fe1:c5f2)
[11:34:18] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:40:27] <manjaro-user> So what is the point of javascript promises, and why don't we see the same thing in c++?
[11:41:25] <manjaro-user> oh wait...
[11:41:30] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:41:31] <manjaro-user> https://www.cplusplus.com/reference/future/promise/
[11:45:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[11:47:58] *** Joins: andreasbuhr (~quassel@p549db9c0.dip0.t-ipconnect.de)
[11:48:51] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[11:49:36] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[12:01:20] *** gentooclimax is now known as climax
[12:02:06] *** climax is now known as gentooclimax
[12:03:26] *** Joins: Kerr (~Kerr@2601:602:ce80:df10::b76e)
[12:03:53] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[12:04:56] *** Joins: ivii (~ivan@user/ivii)
[12:05:06] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[12:11:30] *** Joins: xkuru (~xkuru@user/xkuru)
[12:13:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[12:13:12] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[12:13:50] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[12:15:53] *** Quits: toulene (~toulene@user/toulene) (Remote host closed the connection)
[12:21:40] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:22:48] *** Joins: lispy (~lispy@user/lispy)
[12:28:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:31:58] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:35:06] *** Joins: robod34 (~Username@79.113.243.73)
[12:35:50] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[12:35:56] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:36:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[12:40:19] *** Joins: x_kuru (xkuru@user/xkuru)
[12:42:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:42:44] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4.1)
[12:42:45] *** Joins: v4mp (~v4mp@user/v4mp)
[12:44:07] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[12:45:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:47:06] *** Joins: Furai (~Furai@furai.pl)
[12:51:41] <NyB> I just found myself considering (ab)using a tagged pointer... It sure would make things easier in my code, but I still feel the need to wash my brain...
[12:52:03] * Haohmaru gives NyB the bleach
[12:54:15] *** gentooclimax is now known as climax
[12:55:12] *** climax is now known as gentooclimax
[12:55:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:56:03] *** Joins: d12fk (~heiko@exit0.net)
[13:01:36] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[13:12:46] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Remote host closed the connection)
[13:14:25] *** Joins: DSpider (~DSpider@82.79.237.68)
[13:15:32] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[13:17:33] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:18:57] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[13:29:30] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[13:40:34] *** Joins: Terminus (~null@user/terminus)
[13:42:28] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:43:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:44:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:44:05] *** ChanServ sets mode: +v npaperbot
[13:44:16] <ville> Kerr: https://www.gnu.org/software/make/manual/make.html#Wildcards ?
[13:44:18] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[13:45:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[13:47:20] <fiesh> Alipha: this is a good deal remedied by clang's -Wdocumentation though that makes sure your doxygen style function documentation matches the signature
[13:49:00] *** Parts: anyone (~filler@a4.inai.de) ()
[13:49:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:54:10] <PJBoy> wow that exists?
[13:54:56] <LordKalma> give moneys to llvm
[13:55:02] <PJBoy> ikr >:(
[13:55:04] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[13:55:17] <PJBoy> or give moneys to me, and I'll work on llvm
[13:55:53] <PJBoy> I'll develop a clang-tidy check that flags use of error codes
[13:56:00] <PJBoy> and whose -fix converts it to an exception
[13:56:11] <LordKalma>  that doesn't seem easy to parse
[13:56:26] <PJBoy> I'll advance the state of the art to make it happen if I need to
[13:57:01] *** gentooclimax is now known as climax
[13:57:02] <PJBoy> I'll implement herbceptions too, so the performance characteristics should be identical
[13:57:19] <PJBoy> then I'll give up and use circle
[13:57:27] <PJBoy> but it would be a wild ride
[13:59:42] <ville> Kerr: the above should give you shell-like globbing
[14:00:04] <ville> Kerr: https://www.gnu.org/software/make/manual/html_node/Substitution-Refs.html#Substitution-Refs should let you change the file extension
[14:01:34] <ville> Kerr: that will do one part. if your list had bunch of: src/a.cxx src/b.cxx... then you are left with: src/a.o src/b.o... which isn't ideal
[14:02:00] <ville> Kerr: https://www.gnu.org/software/make/manual/html_node/Text-Functions.html#Text-Functions can then be used to change the src/ into build/ or whatever is your build dir
[14:05:03] <LordKalma> PJBoy, related: https://twitter.com/m_ou_se/status/1504042161788043268
[14:05:43] <PJBoy> :<
[14:05:57] <PJBoy> rust still want LLVM development though
[14:06:22] <LordKalma> yeah, since it's their reference implementation is an llvm frontend...
[14:06:29] <PJBoy> she's the author of npaperbot btw
[14:07:05] <PJBoy> so defecting from C++ to rust is mean
[14:12:48] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[14:12:49] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[14:13:35] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[14:14:44] *** Quits: manjaro-user (~manjaro-u@199-7-158-247.eng.wind.ca) (Remote host closed the connection)
[14:15:05] *** Joins: manjaro-user (~manjaro-u@199-7-158-247.eng.wind.ca)
[14:17:55] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[14:19:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[14:24:33] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[14:29:27] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:32:04] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:33:00] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[14:36:19] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[14:43:12] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:46:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[14:46:57] *** Joins: Roughy (~mdaw45ns@user/roughy)
[14:47:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[14:48:21] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[14:48:29] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Remote host closed the connection)
[14:48:46] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[14:48:58] *** Quits: Shell (~shell@user/shell) (Quit: ZNC 1.8.2 - https://znc.in)
[14:51:26] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[14:51:58] *** Joins: Shell (~shell@user/shell)
[15:03:39] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[15:04:59] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[15:06:56] *** climax is now known as gentooclimax
[15:07:07] <PJBoy> !fact
[15:07:08] <nolyc> PJBoy: Annex [implimits] recommends lower bounds on the capacity of conforming implementations.
[15:07:15] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 250 seconds)
[15:07:21] <PJBoy> bah, I can't dispute that
[15:08:53] <LordKalma> what does that mean?
[15:11:27] *** Quits: JohnMS_AWAY (~kvirc@194.110.240.100) (Ping timeout: 256 seconds)
[15:11:43] <PJBoy> it means that section recommends lower bounds for things
[15:12:10] <PJBoy> like "a macro should support at least 256 parameters"
[15:12:48] <PJBoy> "a class should support at least 1024 base classes"
[15:13:53] <PJBoy> they're mostly very high limits
[15:13:56] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[15:14:04] <PJBoy> and then "number of placeholders: 10"
[15:14:25] <PJBoy> placeholders referring to std::placeholders::_1/_2/_3 etc
[15:14:26] *** Joins: Guest5497 (~Guest54@2620:10d:c092:400::4:3a1c)
[15:15:11] *** Joins: undephin3d (~undephin3@158.181.72.102)
[15:16:42] <TinoDidriksen> If you need more than 10 you're probably doing something wrong anyway.
[15:16:57] *** gentooclimax is now known as climax
[15:17:21] <very_sneaky> i regularly need 1024 base classes
[15:18:49] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:21:24] *** Quits: proller (~p@2a02:6b8:b081:15::1:2b) (Ping timeout: 240 seconds)
[15:24:50] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:25:46] <LordKalma> if you're using Qt I'm not sure 1024 are enough
[15:25:48] * LordKalma runs
[15:27:20] <ville> it's at least 1024 direct base classes for a single class, base class limit is 16k
[15:29:55] *** Joins: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:32:59] <PJBoy> I do agree that you ought not to need more placeholders
[15:33:09] <PJBoy> but it's comically low compared to all the other lower bounds
[15:42:29] <Guest5497> a bit offtopic, but I'm trying to understand the perf. benefit of doing multiple inserts in a single commit, a single insert (with multiple values) in a single commit. https://stackoverflow.com/questions/8635818/multiple-insert-statements-vs-single-insert-with-multiple-values/8635891#8635891 Some of the answers are totally confusing - the benchmark
[15:42:30] <Guest5497> shows the former is faster, but the answers claim it's not surprising the latter is faster because blah blah.  https://stackoverflow.com/a/8635891 Can someone help me understand this?
[15:43:28] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:46:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:52:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[15:53:09] *** Joins: callq (~callq@157.41.137.81)
[15:56:34] <ville> by perf you mean perf the command or performance the word?
[15:57:45] *** climax is now known as gentooclimax
[16:01:40] <Guest5497> performance
[16:01:47] <TinoDidriksen> Guest5497, if you use a transaction then it doesn't matter. Some SQL engines auto-commit after every query, and committing is slow. With a transaction you can defer the commit, and then you can quickly insert thousands of rows and commit only at the end. But yes, this is rather off topic.
[16:02:15] <TinoDidriksen> #sql exists, and every RDBM has their own channel.
[16:03:39] <ville> i don't see how the linked answer claims the latter is faster
[16:03:51] *** Joins: AmR (~AmREiSa@156.207.194.71)
[16:04:20] <Guest5497> >the execution plan for the tiny insert is computed once, and then reused 1000 times
[16:04:43] <Guest5497> ah maybe i misread hmm
[16:05:46] <ville> tiny insert presumably means the one with 4 values.
[16:07:33] <TinoDidriksen> They're measuring the wrong thing, but they don't know it. They're measuring commit speed, not SQL parsing or execution speed.
[16:08:18] <ville> a database could possibly be able to cache such thing, so repeating the same query with different values would be able to benefit from that
[16:09:29] *** Joins: x_kuru (xkuru@user/xkuru)
[16:12:57] <Guest5497> I guess the best thing to do is just benchmark
[16:13:13] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[16:15:36] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[16:17:18] <rpav> the best thing to do when optimizing in general, yes
[16:17:44] *** Joins: blackout69 (~blackout6@37.183.198.248)
[16:17:53] <rpav> but prepared statements ought always be used; they make your code better, and db access better
[16:19:00] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 240 seconds)
[16:20:13] *** Parts: blackout69 (~blackout6@37.183.198.248) ()
[16:20:49] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[16:24:02] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[16:27:58] *** gentooclimax is now known as climax
[16:30:05] *** climax is now known as gentooclimax
[16:30:10] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[16:35:21] *** Joins: Hercules (~Hercules@user/hercules)
[16:36:03] *** Quits: Hercules (~Hercules@user/hercules) (Remote host closed the connection)
[16:36:08] *** Joins: x_kuru (xkuru@user/xkuru)
[16:37:05] *** Joins: ymwm__ (~yingmanwu@27.153.166.146)
[16:39:24] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[16:39:42] *** Quits: ymwm_ (~yingmanwu@110.85.123.64) (Ping timeout: 252 seconds)
[16:39:50] <Guest5497> say I have a sql query with multiple inserts, like so : "insert into ...; insert into". My understanding is that this will be faster than executing the statemetns individually because of the connection overhead. What I'm not sure about is, will that multiple sql statements be executed in a single transaction? Where can I read more on this? Thanks
[16:39:51] <Guest5497> again for all the help and pointers :)
[16:41:42] <ville> Guest5497: there are no general answers to these kinds of things. "sql" is far to big of a domain. speed depends on so many actual concrete details. if you care about speed you have to measure
[16:42:20] <ville> simply what could be faster on one server+frontend combination could be slower on the same server+different frontend
[16:43:45] <ville> not to mention if you were to compare different servers
[16:44:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:45:24] <Guest5497> ok that makes sense
[16:45:48] <ville> even so with same server+frontend combination things may switch depending on the actual data
[16:45:49] <Guest5497> I just want to gain some basic intuition before I make benchamrks, I have far too many benchmarks to make and I'm feeling overwhelmed hehe
[16:47:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[16:50:50] *** Joins: BluesBoy (~bboy@user/bluesboy)
[16:52:37] *** Quits: manjaro-user (~manjaro-u@199-7-158-247.eng.wind.ca) (Ping timeout: 240 seconds)
[16:53:58] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[16:58:33] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:02:33] <ezzieyguywuf> if I have a `std::map<std::string, std::vector<Foo>>`, what is a concise way to sum the counts of all the vectors if they meet a certain criteria? i.e. `for (auto [key, val] : my_map) { int count = 0; for (auto foo : val) { if (foo.SomeCondition()) ++count}}`
[17:02:50] <ezzieyguywuf> I thought there was something in <algorithm> for this but I can't for the life of me find it
[17:05:15] <PJBoy> count_if
[17:05:59] <PJBoy> for the inner loop, probably keep the outer loop
[17:06:15] <ezzieyguywuf> hmmm, yes
[17:07:47] <ezzieyguywuf> but now I'm realizing I asked my question poorly
[17:08:13] <ezzieyguywuf> because rather than ++count, I want `count += foo.GetAmount();`
[17:08:49] <PJBoy> accumulate then
[17:09:34] <ezzieyguywuf> ahhh that's the one I was searching for. thanks!
[17:10:25] <PJBoy> with binary operation [](unsigned count, Foo const& foo) { return count + foo.GetAmount(); } or some such
[17:19:10] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[17:19:34] *** Joins: darkbit (~db@136.158.8.67)
[17:19:48] <TinoDidriksen> Guest5497, ask #sql instead, but whatever you measure be sure to use transactions.
[17:23:53] *** Quits: kenan-office (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[17:31:02] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:33:35] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[17:34:04] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[17:35:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:36:37] *** Quits: Youmu (uid129469@user/condy) (Quit: Connection closed for inactivity)
[17:37:02] *** Quits: ymwm__ (~yingmanwu@27.153.166.146) (Ping timeout: 240 seconds)
[17:37:05] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:37:23] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[17:38:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:38:48] *** Joins: nq (~nq@2a02:2f08:e015:a900:cafd:3575:1a3d:974)
[17:39:08] *** Quits: miklcct (~quassel@vps.miklcct.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:39:44] *** Joins: miklcct (~quassel@vps.miklcct.com)
[17:40:54] *** Quits: callq (~callq@157.41.137.81) (Ping timeout: 250 seconds)
[17:42:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:42:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:43:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:44:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:44:06] *** ChanServ sets mode: +v npaperbot
[17:44:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:45:46] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:48:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:49:08] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:49:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:03:41] *** Quits: v4mp (~v4mp@user/v4mp) ()
[18:04:27] *** gentooclimax is now known as climax
[18:05:24] <ezzieyguywuf> PJBoy: exactly
[18:11:01] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:16:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:19:16] *** Quits: andreasbuhr (~quassel@p549db9c0.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:19:52] <mort> https://github.com/gabime/spdlog#user-defined-types this suggests that all I need to make a type formattable is to have an operator<<, but I have a `template<typename OStream> OStream &operator<<(OStream &os, const MyType &)` function and spdlog still doesn't let me format MyType
[18:20:19] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:22:16] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:22:40] <mort> apparently other people have encountered this, and it changed without the docs being updated
[18:24:02] *** Inline__ is now known as Inline
[18:24:22] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[18:30:41] <mort> how are you supposed to create a formatter without an associated parser with libfmt...?
[18:32:06] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:34:12] *** Quits: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 250 seconds)
[18:35:45] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[18:35:49] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:f011:5c41:91d3:3525)
[18:35:49] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:f011:5c41:91d3:3525) (Changing host)
[18:35:49] *** Joins: skapata (~Skapata@user/skapata)
[18:43:38] *** Joins: Youmu (uid129469@user/condy)
[18:45:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:45:34] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[18:48:04] <rpav> hrm, i feel like array bitfields ought to be a thing
[18:48:31] <rpav> struct S { bool b:1[4]; };
[18:48:36] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:48:49] *** climax is now known as gentooclimax
[18:49:15] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:50:29] <rpav> with e.g. bitfield as a class i don't think it can actually take up a fractional bytes
[18:50:58] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:51:37] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:52:09] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:52:15] *** Joins: jokoon (~eio@2a01:e0a:542:e160:b803:62be:51a0:d0a7)
[18:52:21] <jokoon> https://ideone.com/Vu8NO8
[18:52:33] <jokoon> is that invalid code?
[18:53:57] <Alipha> jokoon: none of the std containers allow storing of references
[18:53:57] <rpav> if you can have a map of references at all, whcih seems like a terrible idea, you probably need `map.emplace(key, ref);`
[18:54:10] <cbreak> jokoon: yes. References are not objects.
[18:54:13] <jokoon> ok
[18:54:15] <cbreak> containers can only store objects
[18:54:19] <rpav> map probably ought to be able in theory, but probably don't
[18:55:27] <jokoon> why is that a terrible idea?
[18:55:56] <cbreak> store the objects in the map itself.
[18:56:02] <cbreak> that'll be faster and take up less space
[18:56:04] <cbreak> and it'll work :)
[18:56:23] <jokoon> sure
[18:56:30] <Alipha> jokoon: either store objects or pointers
[18:56:39] <jokoon> I want to avoid pointers
[18:56:52] <Raziel> you can store std::ref I think?
[18:56:57] <rpav> jokoon: generally most uses of references are terrible unless you want a guaranteed-pointer or you're using range-based for / destructuring (the latter of which aren't really even references)
[18:56:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:57:03] <Alipha> jokoon: pointers are NOT the boogie man.
[18:57:17] <rpav> guaranteed-pointer-AS-FUNCTION-PARAMETER i should say
[18:57:21] <Alipha> jokoon: use pointers where appropriate
[18:57:37] <rpav> references otoh are kindof the boogie man, or at least the booger-man
[18:57:54] <jokoon> I guess I will change my code to put them in a map
[18:57:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:58:08] <rpav> or actually store the values in the map, which is probably better
[18:58:18] <Alipha> jokoon: what you shouldn't do though is have to use delete or delete[] yourself. Use either objects or smart pointers or containers instead
[18:58:20] <rpav> you can then take refs/pointers to _those_
[18:58:36] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 240 seconds)
[19:00:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:01:41] <Raziel> jokoon, https://wandbox.org/permlink/I386bj15qFmTFKvn
[19:01:43] <Raziel> you can do this
[19:01:49] <Raziel> idk if you should, in this case, but. you can. :p
[19:02:25] <jokoon> that link is broken
[19:02:30] <jokoon> it makes wandbox crash
[19:02:45] <Alipha> wandbox.org no longer works in Firefox
[19:02:50] <Raziel> works here, but wandbox has been having issues
[19:03:12] <Raziel> but here it is in ideone instead https://ideone.com/VmHBFs
[19:03:50] <jokoon> thanks
[19:04:09] <Alipha> Raziel: jokoon: I would not use std::reference_wrapper other than where the standard has specific functionality for it (eg, as arguments to std::thread)
[19:04:27] <jokoon> yeah I did not intend to use it anyway
[19:04:34] <jokoon> Forget my question :D
[19:04:39] <jokoon> Im tired
[19:04:46] <jokoon> Im gonna nap
[19:04:56] <Raziel> I do use it in places where I just need to... store a reference. Like, some other map or something owns the actual thing, and I obviously don't want a copy
[19:05:06] <jokoon> thanks for the help you guys are the best as always
[19:05:09] <Raziel> but it requires similar care as pointers
[19:06:13] <Alipha> Raziel: just use a pointer :-p
[19:07:01] <Raziel> Alipha, using ref wrapper/references makes my system signatures cleaner and more self-documenting :p no worries about ownership or whether something will get deleted
[19:07:36] <Raziel> but yeah, pointers are fine too, don't just assume they're scary :^)
[19:08:20] <rpav> well someone always has to "worry" about ownership
[19:08:34] <Alipha> template<typename T> using observer_ptr = T*;
[19:08:38] <Alipha> :-)
[19:08:52] <rpav> bah, make a better ptr<T> class if you're going to that trouble
[19:09:38] <Alipha> I mean, it's no trouble. It's one line ;-)
[19:09:51] <rpav> it's ugly in practice and does nothing for you ;/
[19:10:36] <rpav> in fact i think you can't even say observer_ptr<const T>?
[19:11:16] <Alipha> Yeah you can
[19:11:36] <rpav> ok you get that at least
[19:11:39] <Raziel> is observer_ptr even a thing yet? cppreference still has it as being in experimental
[19:11:46] <Alipha> And I'd only use observer_ptr in legacy codebases where are indeed owning raw pointers
[19:11:56] <rpav> what's the thing you can't pass a const through a template becuase it like associates wrong or something 🤔
[19:13:28] <Raziel> and, we're talking about alternatives a lot, but, why would they be preferred over using ref wrapper as a sort of observer pointer in that way? like, what's wrong with that approach?
[19:14:17] *** Joins: pulse (~pulse@user/pulse)
[19:14:51] <rpav> i think i'm not sure why you'd use a ref wrapper in place of basically anything else
[19:15:30] <rpav> though to be fair i use a ref<T> class (i.e. not_null_ptr<T>) but entirely for the same reasons as ptr<T>
[19:15:41] <rpav> also because it's an object
[19:18:15] <Alipha> Does it throw if you try to put nullptr in it?
[19:18:42] <rpav> you can't put nullptr in it
[19:19:22] <rpav> if i were being ridiculous and impractical i'd make ptr not-dereferencible
[19:19:51] <rpav> but ref<T> is constrained to initialize from a T&
[19:24:07] <rpav> is doing a calculation and checking for NaN a bad thing, and for what reason, other than potentially invoking some fpe?
[19:32:24] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[19:33:01] <Raziel> I don't see why it would be worse than any other equality or comparison?
[19:33:45] <rpav> i'm not sure what all can get invoked if you do something that ends in a NaN
[19:34:14] <rpav> but i guess NaN for this purpose is actually better because it saves a lot of expensive checks for very rare conditions ahead of time
[19:34:50] <Raziel> depending on what you're doing, you could implement checks that avoid the operation that causes the nan in the first place, if you're worried about that
[19:34:56] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[19:35:06] <rpav> right but the point here is that actually doing those checks are pretty expensive
[19:35:08] <Raziel> yeah
[19:35:31] <rpav> like if you're checking for zero before division that's probably fine, since you don't buy a lot by then checking for inf or whatever after
[19:36:18] <Raziel> I do a few in a couple places, translation movement handles and such, but they're simple so it's not an issue. I can imagine in more complex cases the checks could easily be far worse than just checking for nan afterwards
[19:36:24] <Raziel> handlers* even
[19:37:06] <rpav> yea in this case it's like, "do these v0..vN have the same direction"
[19:37:55] <rpav> vs "find the angle which i need anyway, then check if it blew up," which seems ugly, but
[19:38:03] <yolo> "vector,string, make_shared, fstream, and similar classes handle acquisition of the resource for you. However, unique_ptr and traditional shared_ptr constructions are special because resource acquisition isperformed by the user instead of the object; therefore, they count as Resource Release Is Destruction but are questionable as RAII.
[19:38:30] <rpav> there's not really a way to go halfway on the checks and abort other than exceptions (which isn't good here) or doubling operations (whcih sucks)
[19:38:55] <yolo> what does trandition-shared_ptr mean here? why isn't unique_ptr raii? this is from https://docs.microsoft.com/en-us/cpp/cpp/how-to-design-for-exception-safety
[19:39:04] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:39:34] <rpav> it sounds like someone who doesn't like the term RAII and isn't realizing that all RAII is actually "resource release is destruction"
[19:40:04] <rpav> raii is a terrible acronym/term but so is basically everything in C++
[19:40:41] <yolo> so, all is well and all is RAII then
[19:42:25] <Latexi95> oh... that reminds me. I must do some internal talk tomorrow about basics of templates. I should probably prep something for that...
[19:43:19] <rpav> yolo: i think it's best to think of the "is initialization" as applying to initialization of the _handle_, not the _resource_
[19:44:12] <rpav> you acquire the resource when you initialize the handle; the more important thing in nearly every case (besides like, mutexes, in which case it's _equally_ important) is destruction/release
[19:45:29] <yolo> make sense
[19:45:30] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Remote host closed the connection)
[19:46:07] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:46:13] <yolo> i keep forgetting fstream|ifstream|ofstream are RAII but should remember it from now on
[19:47:07] <yolo> every c++ intermediate+ developer should be awarded a CS PhD in my opinion
[19:47:39] <rpav> nah c++ dev has little to do with CS stuff especially at the phd level
[19:48:12] <Raziel> PhD in being completely insane and yet still functional within society (usually, more or less)?
[19:48:18] <rpav> it's not _really_ that hard, it's like anything ... you have to sortof think in the model, and the model is a bit complicated
[19:48:20] <yolo> the point is that to understand all the tricky parts it's harder than getting a phd degree
[19:48:35] <InPhase> yolo: You can just call yourself a Hardsoftware Engineer
[19:48:58] <rpav> i dunno, phd seems like a lot of work and understanding of math that makes my brain hurt
[19:49:05] <Raziel> I guess the "issue" with PhDs is that they're pretty much just for research
[19:49:09] <yolo> for that I was technically an embedded software coder, i.e. software engineer for hardware
[19:49:17] <rpav> Raziel: well if you want to be a CS prof or somethnig
[19:49:23] <Raziel> which is... quite niche as far as actual engineering is concerned
[19:49:25] <Raziel> yeah
[19:49:38] <rpav> yeah that is definitely orthogonal to engineering
[19:49:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:51:05] <rpav> those who can, do; those who can't, teach; those who can't teach, manage; those who can't manage anything else are critics and pundits
[19:52:06] <yolo> in US it's "those who can, do; those who can't, sue;"
[19:52:15] <rpav> and i guess if no one wants your critic articles, you go into "game journalism"
[19:52:36] <Raziel> that escalated quickly
[19:53:14] <Raziel> management is also a very different skillset. like, I'm... half-decent at c++, at least, but does that mean I could actually manage a project or team working with it? I really can't even say until I try it
[19:53:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:54:01] <rpav> yeah, mostly facetious .. management and teaching are definitely different skillsets, and being good at those is probably more rare than being good at writing code or whatever
[19:54:12] <rpav> because you have to sortof be good at your subject, _and_ be good at teaching
[19:54:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:54:22] <Raziel> right
[19:54:31] <rpav> good management you have to deal with your subject _and_ deal with people
[19:54:48] *** Quits: jokoon (~eio@2a01:e0a:542:e160:b803:62be:51a0:d0a7) (Ping timeout: 250 seconds)
[19:54:50] <rpav> critics and game journalists though, ;)
[19:57:26] <Raziel> I do like the critics that have actual insight and the eloquence required for interesting in-depth analysis
[19:57:33] <Raziel> but those are rarer than an engineer teacher manager
[19:57:49] <Raziel> :p
[19:58:15] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:00:42] <Alipha> !give yolo raii
[20:00:44] <nolyc> yolo: Resource Acquisition Is Initialization: a bad name for the idea of acquiring resources in constructors (generally) and having destructors make sure they're released. Failure to acquire any resources is signaled by throwing an exception. It's better referred to as Scope-Bound Resource Management. http://www.hackcraft.net/raii/
[20:00:44] <Raziel> and barely anyone has the patience for a three hour video essay on why breath of the wild is not actually that great
[20:00:54] <Alipha> !sbrm
[20:00:56] <nolyc> Scope Bound Resource Management is a powerful idiom based on the idea of acquiring resources in constructors and releasing them in destructors. C++ guarantees that destructors are automatically called for variables when they go out of scope, thereby transparently ensuring proper cleanup - even in the face of exceptions and early returns. Popularly called RAII (see !raii).
[20:01:40] *** Quits: ville (~ville@user/ville) (Quit: ville)
[20:02:41] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Client Quit)
[20:03:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:07:00] *** Joins: ville (~ville@user/ville)
[20:11:06] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[20:17:11] *** Quits: Guest5497 (~Guest54@2620:10d:c092:400::4:3a1c) (Quit: Client closed)
[20:19:29] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:41:20] <rpav> ah yeah SBRM is a good one
[20:42:13] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[20:42:46] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[20:43:08] <Haohmaru> Scope Blocks Rule, Man
[20:44:51] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Remote host closed the connection)
[20:46:39] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:46:47] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[20:50:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:52:17] <rpav> new use of comma ... ;)
[20:53:53] <rpav> actually no wait precluded becuase comma initialization ;/
[20:55:05] <cbreak> what's comma initialization?
[20:55:15] <rpav> well i mean like, `int x, y, z;`
[20:55:27] <cbreak> { int i = 1, 2, 3; std::cout << i; }
[20:55:27] <geordi> error: expected unqualified-id before numeric constant
[20:55:32] <rpav> you can't have like, `int x, expression;`
[20:55:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:55:41] <cbreak> hmm...
[20:55:53] <rpav> `auto r = raii foo, foo.bar(), foo.baz();`
[20:55:58] <cbreak> { int i = (1, 2, 3); std::cout << i; }
[20:55:59] <geordi> 3
[21:01:10] <PJBoy> { int i; i = 1, 2, 3; std::cout << i; }
[21:01:11] <geordi> 1
[21:02:11] <Haohmaru> x_x
[21:02:24] * Haohmaru calls the std::police
[21:04:10] <PJBoy> huh, TIL https://en.cppreference.com/w/cpp/io/ios_base#Deprecated_member_types
[21:04:46] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:05:04] <PJBoy> versions of the non deprecated type aliases that are slightly different
[21:06:00] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:16:53] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 250 seconds)
[21:18:12] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:18:26] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:19:44] *** Joins: Figworm (FiggyWitIt@user/figworm)
[21:21:46] *** Joins: zen_coder (~zen_coder@141.113.64.102)
[21:23:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:24:03] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[21:27:04] <xkoncek> assigning a [[nodiscard]] value to std::ignore is the peak passive aggresiveness
[21:29:25] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 256 seconds)
[21:31:32] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[21:31:52] *** Joins: Figworm (FiggyWitIt@user/figworm)
[21:36:07] <InPhase> !grab xkoncek
[21:36:08] <nolyc> InPhase: The operation succeeded.
[21:39:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[21:39:30] <rpav> TIL std::ignore existed
[21:39:37] <rpav> but does it work for structured bindings
[21:40:06] * rpav guesses not, and the page doesn't mention it
[21:43:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[21:43:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d088:f824:bd53:1d4c)
[21:43:37] <PJBoy> { auto [x] = tie(ignore); }
[21:43:38] <geordi>  
[21:43:40] <PJBoy> works fine
[21:43:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:44:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:44:06] *** ChanServ sets mode: +v npaperbot
[21:44:07] <rpav> yeah _that's_ clearly what i intended ;)
[21:44:31] <PJBoy> well you've never been able to do assignment with structured binding declarations
[21:44:36] <rpav> { S p; auto [ignore, y] = p; } struct S { float x, y; };
[21:44:37] <geordi> warning: 'p' is used uninitialized
[21:44:43] <PJBoy> so it should be obvious that std::ignore doesn't work there
[21:44:45] <rpav> 🤔
[21:45:18] <PJBoy> and if you could, it'd be weird
[21:45:33] <PJBoy> you'd be able to mix initialisation and assignment of variables together
[21:45:42] <rpav> it would but that doesn't mean they failed utterly as ever to learn the lessons that went before and include some ignorable syntax
[21:46:21] <rpav> i would actually be pretty baffled if `auto [std::ignore, ...] = ...` worked unless it was simply a keyword/special case
[21:46:32] <rpav> _which there should be_
[21:47:00] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:47:56] <xkoncek> auto [...] always must introduce new variable names?
[21:48:21] <rpav> oh right ignore isn't a template and can be shadowed
[21:48:58] <rpav> xkoncek: it works like any other variable name in the scope afaict
[21:50:27] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[21:50:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[21:51:17] *** Quits: zen_coder (~zen_coder@141.113.64.102) (Quit: Konversation terminated!)
[21:52:02] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:56:23] *** Joins: unyu (~pyon@user/pyon)
[21:57:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:03:45] <kenanmarasli> I saw a funny comment today on testing private members using `#define private public`, but apparently it is not so uncommon
[22:04:22] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[22:04:37] <Shell> ohno
[22:08:45] *** Joins: gehn (~gehn@user/gehn)
[22:10:38] <LordKalma> ffs...
[22:10:56] <xkoncek> simple and works, what more would you need?
[22:11:21] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[22:11:21] <gehn> xkoncek, makes a lot of money
[22:11:38] <rpav> seems a bit silly unless you're testing 3rd party code or something
[22:11:40] <gehn> xkoncek, cooks me dinner? takes out the garbage.
[22:11:52] <rpav> `friend test_class<ThisClass>(...);`
[22:13:50] <LordKalma> quite philosophical that friends have greater access to your private secrets than your children
[22:14:45] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 256 seconds)
[22:16:36] <kenanmarasli> it's accessibility, you share cookies with your friends but put limit to your children
[22:16:46] <Alipha> !grab LordKalma
[22:16:47] <nolyc> Alipha: The operation succeeded.
[22:17:25] <ville> xkoncek: well they are not variables. for *obvious* reasons...
[22:26:16] *** Quits: DSpider (~DSpider@82.79.237.68) (Quit: Leaving)
[22:30:04] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:30:35] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:33:35] <ashafq> LordKalma: hey man
[22:34:26] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[22:38:23] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:2d80:22d2:543f:f623) (Quit: Client closed)
[22:38:43] *** Quits: malloy (~jimery@120.235.172.192) (Ping timeout: 265 seconds)
[22:38:48] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:a098:ee07:c9e8:a17a)
[22:40:35] *** Joins: malloy (~jimery@120.235.172.170)
[22:46:54] *** Joins: pulse (~pulse@user/pulse)
[22:47:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:47:38] *** Joins: proller (~p@80.240.216.69)
[22:50:34] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Quit: Hello71)
[22:51:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:54:25] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[22:55:31] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43)
[22:55:40] *** Joins: k8yun (~k8yun@user/k8yun)
[22:55:51] *** Joins: magla (~gelignite@d5362120.access.ecotel.net)
[23:06:55] *** Joins: proller (~p@2a02:6b8:b081:8803::1:2f)
[23:14:36] *** Joins: z3t0_alt (~z3t0@146.71.14.98)
[23:15:01] <z3t0_alt> hi all, I am trying to get clang-tidy, cmake working on a gcc project but running into an issue because clang-tidy does not recognise the pch from gcc
[23:15:12] <z3t0_alt> I am having the same issue as this link, https://gitlab.kitware.com/cmake/cmake/-/issues/22081
[23:15:25] <z3t0_alt> Does anyone know if i can disable checking for precompiled headers?
[23:19:11] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[23:19:56] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[23:20:22] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[23:23:25] <PJBoy> why do you need CMake to interact with clang-tidy?
[23:23:37] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[23:23:50] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[23:23:53] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[23:24:24] <PJBoy> just making sure that it exists?
[23:24:49] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:26:35] <PJBoy> eh nvm
[23:32:27] <johnny> what dose clang-tidy have to do with pch ?
[23:33:14] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:33:32] <z3t0_alt> Sorry, was debugging
[23:34:03] <z3t0_alt> For what does cmake have todo with it, its because I was following this: https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/ and it shows how to use cmake, if theres another way to use clang-tidy then I can do that too
[23:34:42] <z3t0_alt> And im not sure what clang-tidy has to do with pch. All I know is that as soon as I turn on the checks for clang-tidy in cmake, I get the same arror as in the linked gitlab issue. So somehow clang-tidy is trying to deal with the pch file
[23:34:56] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 250 seconds)
[23:35:13] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:35:39] <rpav> does fmtlib only grok vectors or what
[23:37:51] <rpav> fmtlib is perfect for C++; writing overrides takes way too much boilerplate to be nice
[23:39:31] *** Joins: Roughy (~mdaw45ns@user/roughy)
[23:39:48] *** Quits: undephin3d (~undephin3@158.181.72.102) (Ping timeout: 240 seconds)
[23:39:54] <BurumaSerafuku> fmtlib = std::format ?
[23:40:01] <rpav> it's a superset
[23:40:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[23:40:29] <BurumaSerafuku> I don't get the overrides part
[23:40:50] <rpav> not sure how you specialize std::format
[23:41:21] *** Joins: plastico (~plastico@neomutt/plastico)
[23:41:29] <rpav> BurumaSerafuku: i should say, specializations not overrides
[23:42:32] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[23:44:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[23:44:46] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[23:47:08] *** Joins: gehn (~gehn@user/gehn)
[23:48:15] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:51:24] <rpav> wtf does format("{:>5}", fmt::join(v, " ")); format _each joined entry_ as width-5
[23:51:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:52:40] <rpav> not only is it not really documented, it's pretty dumb/un-useful behavior .. if you wanted a "format each as .." it should be a separate function, or a "join with format string"
[23:53:29] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[23:54:31] <kalven> :~)
[23:56:42] <BurumaSerafuku> :D
