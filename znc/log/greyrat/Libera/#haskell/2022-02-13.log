[00:04:03] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:05:16] <olle> Aaaah, passing around a state container might be a strategy
[00:05:25] <olle> Or, a container containing state shifting events to IO
[00:09:49] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[00:09:55] <ehammarstrom> what's a commonly used cli arg parser package?
[00:10:07] <geekosaur> optparse-applicative
[00:12:17] *** Joins: alx741 (~alx741@157.100.197.240)
[00:12:40] *** Joins: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de)
[00:12:40] *** Quits: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de) (Changing host)
[00:12:40] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:15:46] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:17:33] <sm> or cmdargs
[00:17:46] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:18:32] *** Joins: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de)
[00:18:32] *** Quits: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de) (Changing host)
[00:18:32] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:19:21] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[00:21:02] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 272 seconds)
[00:21:29] *** Quits: jao (~jao@68.235.43.172) (Ping timeout: 256 seconds)
[00:24:34] <dminuoso> merijn: Are you around?
[00:27:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:27:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:27:29] *** Joins: wroathe (~wroathe@user/wroathe)
[00:27:54] *** Joins: coot (~coot@213.134.190.95)
[00:28:06] *** Joins: ravella (~ravella@user/ryanavella)
[00:31:12] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Read error: Connection reset by peer)
[00:31:53] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[00:32:19] *** Joins: alx741 (~alx741@181.199.42.143)
[00:32:49] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[00:33:39] *** Quits: akegalj (~akegalj@93-139-129-4.adsl.net.t-com.hr) (Quit: leaving)
[00:33:41] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 245 seconds)
[00:36:06] <maerwald> there's also commander-cli
[00:37:03] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[00:40:15] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:42:20] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[00:43:06] <sm> interesting. Also docopt
[00:43:58] *** Joins: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de)
[00:43:58] *** Quits: neurocyte0917090 (~neurocyte@IP-094046067096.dynamic.medianet-world.de) (Changing host)
[00:43:58] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:44:03] <maerwald> yeah, I actually find optparse-applicative the least intuitive, but always ends up with it, because it appears to be the most powerful one
[00:50:59] *** Joins: acidjnk (~acidjnk@p200300d0c705755700771b768146bc05.dip0.t-ipconnect.de)
[00:52:26] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[00:53:29] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[00:58:37] *** Joins: jao (~jao@static-68-235-44-70.cust.tzulo.com)
[01:00:05] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[01:00:52] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:02:16] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[01:04:26] <sm> I thought cmdargs was equivalent, but you could be right
[01:04:39] <sm> one thing it can do is accept abbreviations of flags
[01:04:46] <sm> which I'm fond of
[01:05:25] <sm> and I definitely agree about non-intuitive o-a
[01:06:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:07:41] <energizer> when people talk about "effects", are they talking about control-flow manipulation like imperative languages' throw/yield/await statements, or about mutation, or about IO? or are those all somehow part of the same concept?
[01:08:17] <geekosaur> or not even those: Reader is an effect
[01:08:32] <energizer> ok well then i have no idea what effect means :)
[01:08:57] <energizer> i'm asking from the naive perspective (not being clever)
[01:11:16] <energizer> what should i read?
[01:11:39] <dminuoso> energizer: The word "effect" is something I think most Haskellers versed in the subject chose in a abstract way, it's very handwaving.
[01:11:49] <dminuoso> And it doesn't make sense to someone who hasn't reached a certain level of enlightenment
[01:12:18] <sm> it's a fine word, exact meaning depends on context as usual
[01:12:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:12:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:12:26] *** Joins: wroathe (~wroathe@user/wroathe)
[01:12:27] <energizer> i gave some examples, are those all effects?
[01:12:48] <EvanR> anything that's not purely functional
[01:13:10] <geekosaur> hm? I think few peopke would exclude State as an effect
[01:13:29] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:13:30] <EvanR> at risk of raising more questions, purely functional programming is just using pure functions xD
[01:13:45] <dminuoso> energizer: So one view I adopt is to think of `(>>=) :: Monad m => m a -> (a -> m b) -> m b` as annotating `effect` results with further `effects`. And the reason I chose "effect" is because I get to "add" to it.
[01:14:14] <dminuoso> By "add" I mean the function of type `a -> m b` is under my control - I give it some type of "flavor", "extra context".. some kind of "effect"
[01:14:23] <dminuoso> That's opposed to say:
[01:15:13] <dminuoso> `extend :: Comonad w => (w a -> b) -> w a -> w b`, where `w` losely represents context/neighborhood Im given. I can sort of "inspect" the context/neighborhood that is being given to me
[01:15:14] <EvanR> a pure function is one which has no side effects more more relevant here is context independent. Unlike State
[01:15:17] <dminuoso> they are very suggestive terms
[01:15:29] <dminuoso> It doesn't mean anything concrete in particular
[01:15:42] <geekosaur> EvanR, State is pure functional. it just *looks* like it isn't
[01:15:47] <geekosaur> @unmtl State s a
[01:15:47] <lambdabot> s -> (a, s)
[01:16:06] <[exa]> "looks like impure"   <- I can vote for this definition of effect
[01:16:25] <dminuoso> [exa]: What's the Identity effect? Reader effect?
[01:16:34] <dminuoso> neither looks impure at all
[01:16:46] <[exa]> identity is "no effect" so I'm okay there
[01:16:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:16:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:17:09] <[exa]> but reader magically grabs global values out of nowhere! :D
[01:17:10] <EvanR> "looks like" can be extended to everything, a computer is really an identifiable subset of a universal physical state
[01:17:22] <EvanR> but it looks like a discrete machine
[01:17:33] <dminuoso> [exa]: And what about Const?
[01:18:32] <EvanR> the difference between s -> (a,s) and State s a is basically the key difference
[01:19:18] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[01:19:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:20:28] <[exa]> dminuoso: same except the other way, it's collecting some monoid aside instead of doing computations
[01:20:59] <olle> energizer: malloc can be considered an effect too :)
[01:21:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:21:36] <dminuoso>  Monad Complex
[01:21:44] <dminuoso> Huh wow, did not know this instance existed.
[01:21:56] <dminuoso>   a :+ b >>= f = realPart (f a) :+ imagPart (f b)
[01:22:24] <energizer> this is helping, thanks
[01:22:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[01:22:55] <dminuoso> [exa]: So what effect is being encoded here? :P
[01:24:00] <[exa]> I'm trying to see if it looks like an effect
[01:24:28] <[exa]> (currently by looking at it in disbelief :D )
[01:25:28] <dminuoso> Perhaps the important thing is that "effect" is not some ultimate truth, it's just a mental model - and like all models it has its limits.
[01:25:43] <dminuoso> Trying to force an effect-interpretation here is not really helpful at all
[01:25:55] <olle> energizer: Effect is anything that's not part of the relation between input and output
[01:26:02] <olle> of a function
[01:26:09] <dminuoso> The only absolute truth we have is the laws of Monad, anything else is just fuzzy human interpretation
[01:26:24] <[exa]> dminuoso: that's basically I like the feels-like definition
[01:26:28] <Profpatsch> Duplicate instance declarations:
[01:26:30] <Profpatsch>   instance FormatQuote a => PyF.PyFToString a
[01:26:32] <monochrom> I leave the definitions of "effect" and "algorithm" social rather than mathematical.
[01:26:32] <Profpatsch>   instance [overlappable] [safe] Show t => PyF.PyFToString t
[01:26:34] <Profpatsch> I want to define the first instance
[01:26:44] <Profpatsch> Is there a way to make GHC accept it?
[01:26:47] <olle> Note that being pure is not the same thing as referential transparency
[01:27:06] <dminuoso> Profpatsch: The sane way is to use a newtype wrapper
[01:27:12] <olle> A fib function can cache its result on file, silent on failure
[01:27:21] * [exa] imagines ComplexT
[01:27:38] <olle> It'd be referential transparent - always same output on same input - but not pure - file IO.
[01:27:38] <Profpatsch> dminuoso: I have a feeling deriving via would come in handy here
[01:27:54] <dminuoso> Profpatsch: I dont think that will help you.
[01:28:05] <Profpatsch> dminuoso: basically I want to say “whenever your type implements this typeclass I can also give you an implementation for this other typeclass
[01:28:28] <monochrom> [exa]: Did you know that "data Pair a = P a a" is very much like Bool->a? :)
[01:28:57] <[exa]> monochrom: yes that's even isomorphic in that encoding (was it scott encoding?)
[01:28:59] <monochrom> All the way down to how their return's and >>='s correspond.
[01:29:38] <monochrom> No I think that's just "Pair is a representable functor, represented by Bool".
[01:29:46] <dminuoso> Profpatsch: The problem is, according to GHC, `instance Show t => PyF.PyFToString t` already matches *all* instances.
[01:29:53] <dminuoso> Irrespective of whether a Show instance exists, even
[01:29:54] <monochrom> So now "data Complex a = a :+ a" is just Pair in infix syntax.
[01:29:59] <[exa]> I'm probably getting too carried away by the algebra semantic of complex numbers, yes.
[01:30:19] <dminuoso> Profpatsch: That is, for instance selection that will *always* match.
[01:30:21] *** Joins: analognoise (~analognoi@185.229.59.36)
[01:30:45] <dminuoso> You could use {-# OVERLAPPING #-} in your instance, but you might want to weight the consequences of that.
[01:30:49] <[exa]> anyway thanks guys this is a nice find. :]
[01:31:23] *** Quits: analognoise (~analognoi@185.229.59.36) (Max SendQ exceeded)
[01:31:43] <Profpatsch> dminuoso: yeah, that’s what I was expecting
[01:31:52] *** Joins: analognoise (~analognoi@185.229.59.36)
[01:32:23] <dminuoso> Ah but hold on, I think that wont work
[01:32:29] <dminuoso> Because your instance is not any more specific.
[01:32:42] <dminuoso> So you're out of luck. Either use a separate typeclass or a newtype wrapper
[01:33:03] <dminuoso> (overlapping wouldnt do anything extra, since the other instance already is overlappable)
[01:33:32] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:34:21] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[01:34:21] *** Quits: glider (~glider@user/glider) (Quit: ZNC - https://znc.in)
[01:34:21] *** Quits: anderson (~ande@user/anderson) (Quit: bye)
[01:35:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:36:10] *** Joins: alx741 (~alx741@157.100.197.240)
[01:37:21] *** Joins: pavonia (~user@user/siracusa)
[01:37:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:40:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[01:40:44] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[01:41:31] <energizer> do "algebraic effects" and "effect system" refer to the same thing?
[01:42:23] *** Joins: glider (~glider@user/glider)
[01:42:24] <olle> energizer: No
[01:42:35] <olle> Assuming "effect system" is the same as "typed effects"
[01:42:53] <olle> OCaml will have algebraic effects but not typed effects, iirc (in the next release)
[01:43:57] <energizer> what is the difference?
[01:45:36] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:45:51] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:46:15] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[01:46:26] <olle> energizer: typed effects mean that all side-effects of a function will be part of the function's signature, in some way
[01:46:32] <olle> That's kind of already the case in Haskell
[01:46:40] *** Joins: anderson (~ande@user/anderson)
[01:46:58] <olle> energizer: https://www.janestreet.com/tech-talks/effective-programming/
[01:47:06] <olle> There's a talk on algebraic effects.
[01:47:15] <olle> Wait no
[01:47:54] <olle> energizer: This one: https://github.com/ocamllabs/ocaml-effects-tutorial
[01:48:55] <olle> Not sure how that's different from `yield` in PHP and JS, honestly.
[01:49:19] <energizer> "They generalise common abstractions such as exceptions, generators, asynchronous I/O, or concurrency, as well as other seemingly esoteric programming abstractions such as transactional memory and probabilistic computations."
[01:50:09] <energizer> sure. python's `yield from` and `await` are really the same thing and i can see exceptions being related too
[01:50:20] *** Joins: unyu (~pyon@user/pyon)
[01:50:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:50:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:51:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:51:18] <olle> energizer: For a working lang with typed effects, see Koka 2 from Microsoft research
[01:51:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:51:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:51:34] <olle> And maybe F* (fstar lang)
[01:51:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:51:47] <energizer> the stuff we were talking about earlier, was that 'typed effects'?
[01:51:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:52:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:52:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:52:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:52:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:52:36] <olle> energizer: functional core?
[01:52:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:52:49] <energizer> no i was asking what 'effects' means
[01:52:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:52:59] <olle> Ah, no, that's not the same
[01:53:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:53:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:53:18] <olle> A function can be pure or effectful without affecting its function signature (in a language without typed effects)
[01:53:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:53:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:53:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:53:58] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:54:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:54:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:54:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:54:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:54:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:55:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:55:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:55:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:55:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:55:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:56:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:56:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:56:12] <olle> I think in Haskell, side-effects will always change the signature, including the IO monad and others
[01:56:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:56:22] <olle> Since the lang is pure :)
[01:56:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:56:37] <olle> Even randomisation?
[01:56:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:56:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:57:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:57:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:57:13] <energizer> effects, typed effects, algebraic effects, effect handlers, none of these mean the same thing
[01:57:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:57:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:57:35] <geekosaur> olle, has little to do with purity and everything to do with strong typing
[01:57:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:57:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:58:02] <energizer> , right?
[01:58:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:58:10] <olle> geekosaur: Hm, no? Strong/weak types is not related to effects, I think.
[01:58:16] *** Joins: zebrag (~chris@user/zebrag)
[01:58:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:58:24] <geekosaur> hold on
[01:58:26] *** ChanServ sets mode: +o geekosaur
[01:58:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:58:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:58:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:58:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:59:00] *** geekosaur sets mode: +b *!*@98.38.249.169$##fix-your-connection
[01:59:26] <geekosaur> pity I can't make my client do that automagically
[01:59:28] *** geekosaur sets mode: -o geekosaur
[01:59:50] <geekosaur> olle, not directly, but if a language is strongly typed then effects will show in the type
[01:59:59] <geekosaur> if it is weakly typed then they won't
[02:00:24] <geekosaur> *how* they show depends on implementation
[02:00:37] <olle> geekosaur: Not sure everyone would agree on that def :)
[02:00:55] <olle> OCaml folks would call OCaml strongly typed, e.g.
[02:02:12] <geekosaur> but it is also not directly purity. it is a combination: you must advertise impurity in the type in Haskell. you don't in OCaml
[02:02:25] *** Joins: alx741 (~alx741@157.100.197.240)
[02:02:40] <geekosaur> but you can advertise purity even in C
[02:02:52] <geekosaur> soit's not just purity
[02:03:45] <olle> wat
[02:03:52] <olle> what does that mean, purity in C?
[02:06:11] <geekosaur> no side effects. gcc/clang use it for optimization
[02:06:18] <olle> geekosaur: Link?
[02:06:35] <geekosaur> but it's up to you to use it and I think the ocmpiler just trusts you
[02:07:14] <olle> Yeah, that's not "strong" typing in any sense xD
[02:07:30] <geekosaur> here's an example https://stackoverflow.com/questions/29117836/attribute-const-vs-attribute-pure-in-gnu-c
[02:07:34] <olle> But C was always weak + static
[02:08:05] <olle> Yeah, just a compiler attribute
[02:09:23] <geekosaur> right, but it does point up that purity by itself doesn't prove anything
[02:09:35] <geekosaur> you need both for at least haskell-style effects
[02:10:08] <geekosaur> and C is not strongly typed, so yes, it's an attribute instead of a type
[02:10:36] <olle> Considering how esoteric typed effects are, I'd be suprised to see it in a weakly typed lang :)
[02:11:40] <geekosaur> whereas in ocaml you cna't easily tell the difference between an "effect" and normal code except by inspecting the function in question
[02:11:59] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:12:18] *** Quits: michalz (~michalz@185.246.204.65) (Remote host closed the connection)
[02:12:42] <olle> Sure
[02:12:54] <olle> Same goes for all langs except Haskell :)
[02:14:08] *** ChanServ sets mode: +o litharge
[02:14:09] *** litharge sets mode: -bo *!*@98.38.249.169$##fix-your-connection litharge
[02:14:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:14:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:14:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:14:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:15:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:15:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:15:19] *** ChanServ sets mode: +o monochrom
[02:15:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:15:30] *** monochrom sets mode: +b *!*@98.38.249.169$##fix-your-connection
[02:15:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:15:38] <sprout> how pure is a state monad?
[02:15:52] <geekosaur> it's just s -> (a,s)
[02:16:00] *** monochrom sets mode: -o monochrom
[02:16:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:16:23] <sprout> sure,  but now I've got assignment in a pure language
[02:16:31] <geekosaur> no impurity to it at all, it just hides that it's passing the "state" in and getting it back afterward
[02:16:59] <sprout> and c hides it's pure underneath?
[02:17:24] <olle> C just flashes all its dirty effects
[02:17:36] <olle> Like a hobo on crystal meth
[02:17:51] <sprout> a true programming perverts language!
[02:18:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:18:34] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[02:20:40] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:21:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ad86:5044:3d0e:26e7) (Remote host closed the connection)
[02:25:23] <hpc> in fact, C likes spreading its dirty effects even to clean parts of the code
[02:25:30] *** Joins: alp (~alp@user/alp)
[02:25:45] <hpc> if you write a potentially integer-overflowing addition in one function, gcc might decide to completely ignore an unrelated if-then-else in another function
[02:26:03] <hpc> hope you have good logging, and also hope that your logging hasn't been gcc'd away as well
[02:26:16] <romesrf> haahah olle
[02:26:51] <geekosaur> "gcc'd away"
[02:27:46] <olle> geekosaur: The nerdy sequal to "Gone with the wind" :D
[02:27:58] <hpc> gone with the win32
[02:28:04] <olle> ^^ +1
[02:30:11] *** Joins: alx741 (~alx741@157.100.197.240)
[02:31:20] <olle> Aaand it's late (CET)
[02:35:45] *** ChanServ sets mode: +o litharge
[02:35:46] *** litharge sets mode: -bo *!*@98.38.249.169$##fix-your-connection litharge
[02:35:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:36:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:36:08] <monochrom> oh darn, so 20 minutes is not enough either
[02:36:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:36:14] *** ChanServ sets mode: +o monochrom
[02:36:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:36:22] *** monochrom sets mode: +b *!*@98.38.249.169$##fix-your-connection
[02:36:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:36:46] <geekosaur> they'realso overriding the forward ban, so little point in including it I guess
[02:38:26] *** monochrom sets mode: -o monochrom
[02:41:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7dab:1fa0:9cf6:a5de)
[02:41:46] <EvanR> some sort of cosmic ircops conflict
[02:47:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[02:48:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:49:33] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:51:17] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:54:05] *** Quits: maxime__ (~maxime@2a01cb08833598009e7cfeb2ba15b673.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:54:44] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:54:46] *** Joins: alx741 (~alx741@157.100.197.240)
[02:56:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:58:49] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:58:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:59:37] *** Quits: cosimone (~user@93-44-184-23.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:02:06] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[03:03:36] *** Quits: analognoise (~analognoi@185.229.59.36) (Quit: Leaving)
[03:09:34] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:15:55] *** Joins: alx741 (~alx741@157.100.197.240)
[03:15:57] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Quit: Leaving)
[03:20:45] *** Joins: off^ (~off@50.235.176.163)
[03:21:22] *** Quits: olle (~olle@i5E866D81.versanet.de) (Ping timeout: 256 seconds)
[03:22:51] <pavonia> geekosaur: What do you mean by overriding the ban?
[03:23:19] *** Joins: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[03:23:49] <geekosaur> a forward ban pushes them into a different channel. clients generally remember that and on reconnect go to the new channel. and did so the last few times lavaman's client started doing this
[03:23:57] <geekosaur> but now they're coming back here anyway
[03:24:26] <geekosaur> I don't think they're being malicious, but they're ignoring the name of the channel they end up in…
[03:25:01] <geekosaur> (it's a "reserved" channel for this use, people whose clients start disconnecting and reconnecting in rapid succession)
[03:26:01] <pavonia> Okay, I didn't know there are clients that auto-replace joined channels by forwards
[03:26:26] <geekosaur> baswically they remember the channels they're in. this doesn't work across restarts usually, but do across reconnects
[03:26:26] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:32:10] *** Quits: xff0x (~xff0x@2001:1a81:524f:ad00:23cf:423a:2190:173f) (Ping timeout: 260 seconds)
[03:32:39] *** Joins: xff0x (~xff0x@2001:1a81:524f:ad00:ca8e:e915:817b:c700)
[03:33:35] <int-e> geekosaur: oh I thought you were alluding to the +Q user mode.
[03:34:01] <geekosaur> no, to the $##fix-your-connection
[03:34:02] <int-e> (which causes forwards to be ignored)
[03:34:11] <geekosaur> sadly quiet does nothing to silence joins/parts
[03:34:18] <geekosaur> ah
[03:34:34] <int-e> cf. https://libera.chat/guides/usermodes ...but apparently that's not in play
[03:34:50] <geekosaur> that mode can't be assigned by non-ops, so I'd really hope they don't have it
[03:35:32] <int-e> ? it's a user mode. It's not ignoring the ban, just the forward part of it.
[03:36:00] <int-e> Anyway, I just misunderstood what you meant by "ignore".
[03:36:33] *** ChanServ sets mode: +o litharge
[03:36:34] *** litharge sets mode: -bo *!*@98.38.249.169$##fix-your-connection litharge
[03:36:48] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:37:24] <int-e> (This is on my mind because I should probably tweak lambdabot to use +Q, because these forwards do nothing useful for it.)
[03:40:45] *** Joins: wroathe (~wroathe@user/wroathe)
[03:42:20] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:43:14] *** Joins: alx741 (~alx741@181.199.42.143)
[03:44:20] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[03:46:31] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[03:46:43] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:58:32] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:58:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:58:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[03:59:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:03:29] *** Joins: alx741 (~alx741@181.199.42.143)
[04:03:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[04:03:37] *** Quits: Ariakenom__ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: Leaving)
[04:05:45] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[04:08:41] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[04:08:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[04:15:17] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[04:19:15] *** Quits: acidjnk (~acidjnk@p200300d0c705755700771b768146bc05.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[04:19:49] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:95db:50d7:7eec:328d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:20:34] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[04:24:28] *** Joins: prolic (~prolic@181.122.131.227)
[04:25:03] <prolic> hi
[04:25:21] <geekosaur> hi
[04:25:32] <prolic> would someone willing to help me out with a problem here?
[04:25:42] <geekosaur> don't ask to ask, just ask
[04:25:47] *** Joins: alx741 (~alx741@157.100.197.240)
[04:25:57] <prolic> I forked secp256k1-haskell in order to re-add support for schnorr signatures
[04:26:12] <prolic> I managed to get "stack build" to compile everything
[04:26:45] <prolic> however "stack test" complains about CPP bindings: error: undefined reference to 'secp256k1_xonly_pubkey_create'
[04:27:04] <prolic> I have no idea what went wrong
[04:27:51] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[04:28:14] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[04:28:39] <prolic> https://github.com/prolic/secp256k1-schnorr/tree/test_refactor
[04:28:40] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:35:40] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[04:36:06] <geekosaur> not seeing anything immediately except a potential confusion: LANGUAGE CPP doesn't seem to be being used
[04:36:13] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[04:40:25] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:40:33] <geekosaur> the only thing that comes to mind is that you might be better off using capi instead of ccall
[04:40:47] <geekosaur> it handles various things better than ccall does
[04:41:17] <geekosaur> including "functions" that are actually preprocessor macros, which ccall won't be able to find at all
[04:44:54] *** Joins: alx741 (~alx741@157.100.197.240)
[04:46:17] <prolic> mh
[04:46:32] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:02] *** Quits: MatthiasG2 (~matthias@i6DFA0382.versanet.de) (Quit: leaving)
[04:53:48] <geekosaur> also, if it's not clear, LANGUAGE CPP has nothing to do with C++; it means to run the Haskell source through the C preprocessor. You don't have any preprocessor usage in that file, so I don't see what LANGUAGE CPP is supposed to be getting you.)
[04:53:50] *** Quits: mmhat (~mmh@55d4ce4d.access.ecotel.net) (Quit: WeeChat 3.4)
[04:56:30] <prolic> LANGUAGE CPP was previously used in that file
[04:56:41] <prolic> the fact that it's enabled is not my problem
[04:57:41] <prolic> it's a fork of https://github.com/haskoin/secp256k1-haskell (to re-add schnorr sigs)
[04:58:16] <prolic> whatever code they have is working, I assume it's correct, I forked it, just re-enabled a bunch of code they deleted
[04:58:25] <prolic> and suddenly nothing compiles
[04:59:26] <prolic> your suggestions might be helpful in another scenario, but I am not going to refactor ccall to capi, or anything alike, when all I want is to get the damn test-suite running again and I know it must be one line error somewhere that I cannot see at the moment
[05:00:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:02:02] <geekosaur> I don't know that, especially since I just searched the secp256k1 repo and the only reference to that function is the commit that added schnorrsig
[05:03:00] <geekosaur> making me wonder if it's missing because you don't have the (optional) schnorr support enabled, or because you need to use capi to get access to it
[05:03:22] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[05:04:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7dab:1fa0:9cf6:a5de) (Remote host closed the connection)
[05:08:27] *** Joins: dcoutts_ (~duncan@host109-149-1-225.range109-149.btcentralplus.com)
[05:09:59] *** Joins: erts (~erts@user/erts)
[05:10:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:10:58] *** Quits: dcoutts (~duncan@host213-122-143-132.range213-122.btcentralplus.com) (Ping timeout: 250 seconds)
[05:13:31] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:16:59] *** Joins: alx741 (~alx741@157.100.197.240)
[05:18:14] <janus> you can use ccall, they don't use varargs
[05:18:25] <janus> i added that schnorrsig support but they have since changed the interface, i think
[05:18:31] <janus> so even if it compiles, it will break horribly
[05:18:39] <janus> (i know prolic is gone now)
[05:19:05] <janus> anyway the cardano people also want schnorrsig support, so why not just wait for them to write it
[05:20:51] <janus> i prefer the way russell o'connor is doing it in simplicity though. afaik he exposes field primitives for those that really want to make their own algos
[05:21:02] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:21:29] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[05:22:20] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[05:22:24] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[05:23:31] *** Joins: hololeap (~hololeap@user/hololeap)
[05:23:46] *** Quits: ix (~ix@213.205.241.13) (Ping timeout: 256 seconds)
[05:23:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[05:27:06] *** Joins: deadmarshal (~deadmarsh@95.38.116.52)
[05:27:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:27:46] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (Remote host closed the connection)
[05:27:46] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[05:27:55] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[05:27:59] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[05:31:43] *** Joins: ix (~ix@213.205.241.13)
[05:31:56] *** Quits: erts (~erts@user/erts) (Read error: Connection reset by peer)
[05:32:00] *** Quits: deadmarshal (~deadmarsh@95.38.116.52) (Ping timeout: 272 seconds)
[05:33:54] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[05:35:14] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[05:37:26] *** Joins: vysn (~vysn@user/vysn)
[05:38:09] *** Joins: alx741 (~alx741@157.100.197.240)
[05:39:34] *** Joins: califax- (~califax@user/califx)
[05:40:10] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[05:42:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:42:15] *** califax- is now known as califax
[05:42:56] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:44:56] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Quit: ERC 5.4 (IRC client for GNU Emacs 28.0.91))
[05:45:16] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[05:49:55] <geekosaur> thank you. I did go through the upstream codebase and it left me thinking that API had simply been removed
[05:50:14] <geekosaur> but I was kinda through with prolic's attitude tbh
[05:51:01] <geekosaur> (also varargs isn't the only reason to use capi, and in fact ghc devs are now recommending capi over ccall as best practice)
[05:52:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:53:03] <sm> OT: https://github.com/martinvonz/jj is a rather nice git-like VCS
[05:54:03] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[05:54:43] <janus> i want that fancy ass AST-based vcs that jonathan edwards shows in https://vimeo.com/631461226
[05:58:57] <janus> yes it is true that prolic didn't have the best attitude. a validating data point for the crypto haters :P
[05:59:05] *** Joins: alx741 (~alx741@181.199.42.143)
[06:07:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:08:39] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[06:11:36] *** Joins: dcoutts (~duncan@host109-149-1-225.range109-149.btcentralplus.com)
[06:12:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:13:23] *** Quits: dcoutts_ (~duncan@host109-149-1-225.range109-149.btcentralplus.com) (Ping timeout: 256 seconds)
[06:18:16] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:23:49] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[06:25:29] *** Joins: alx741 (~alx741@157.100.197.240)
[06:29:02] *** Quits: xff0x (~xff0x@2001:1a81:524f:ad00:ca8e:e915:817b:c700) (Ping timeout: 260 seconds)
[06:29:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:30:21] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:30:50] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:61bf:cfbd:ecf1:532b)
[06:31:18] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[06:32:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[06:33:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:34:04] *** Joins: cynomys (~cynomys@user/cynomys)
[06:40:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:41:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:46:38] *** Joins: alx741 (~alx741@157.100.197.240)
[06:50:15] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:53:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[06:55:18] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[06:55:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:02:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:02:56] *** Quits: td_ (~td@94.134.91.27) (Ping timeout: 256 seconds)
[07:04:29] *** Joins: td_ (~td@94.134.91.109)
[07:04:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:06:40] *** Joins: alx741 (~alx741@181.199.42.143)
[07:07:50] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[07:11:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:13:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:13:19] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[07:17:45] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Ping timeout: 256 seconds)
[07:18:43] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[07:23:17] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:24:35] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[07:25:21] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[07:25:41] *** Joins: prolic (~prolic@181.122.131.227)
[07:25:49] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[07:26:00] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[07:26:22] <prolic> hi again, I have an idea regarding my problem decribed before, hopefully somebody of you guys know.
[07:26:49] <prolic> if I "apt remove libsecp256k1" from my system, the compiler fails immediately.
[07:27:04] <prolic> so I tried compiling this lib from source, latest version
[07:27:16] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[07:27:36] <prolic> now stack still cannot find the lib, even though I just installed it again, path /usr/local/lib, so should be good, IMHO
[07:27:55] <jackdk> prolic: here are some messages you missed, which may be relevant https://www.irccloud.com/pastebin/VQ8D2121/
[07:28:02] <prolic> with installed again, I mean "make install" after compiling from source, not via apt of course
[07:28:13] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Remote host closed the connection)
[07:29:38] <prolic> thanks janus, I fear that I don't have time to wait for cardano people to deliver, if they even started working on it
[07:30:07] *** Joins: alx741 (~alx741@157.100.197.240)
[07:33:46] <sm> slackers! prolic doesn't have time for your lollygagging !
[07:38:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:38:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:38:44] <prolic> lol, you might have gotten that one wrong
[07:39:29] <prolic> I'm just asking for very specific help, just wait a few years until somebody else did it is not an option for an programmer, because I will do it, obviously
[07:40:13] <prolic> if someone can point me to how to use self-compiled c-libs within haskell, that would be great
[07:47:42] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[07:51:06] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[07:56:44] *** Joins: alx741 (~alx741@157.100.197.240)
[07:57:16] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[07:58:03] <sm> prolic: I'm not understanding that question exactly. it sounds like you're pretty close if the main package builds. when was it last released ? tried their issue tracker / maintainer ?
[08:00:07] *** Joins: off^ (~off@50.235.176.163)
[08:00:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:02:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:04:40] <janus> prolic: have you seen the issue i posted on your bug tracker?
[08:06:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[08:09:05] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[08:16:24] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:17:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:18:21] *** Joins: alx741 (~alx741@157.100.197.240)
[08:19:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:19:12] *** Quits: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[08:20:34] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[08:21:27] *** Quits: hueso (~root@user/hueso) (Ping timeout: 256 seconds)
[08:22:30] *** Joins: hueso (~root@user/hueso)
[08:22:31] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:29:33] *** Joins: notzmv (~zmv@user/notzmv)
[08:30:56] *** Joins: deadmarshal (~deadmarsh@95.38.116.52)
[08:31:57] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[08:39:22] *** Joins: mybbgirl (~mybbgirl@188.25.57.254)
[08:39:30] *** Joins: alx741 (~alx741@181.199.42.143)
[08:41:08] *** Joins: off^ (~off@50.235.176.163)
[08:43:05] <prolic> yes, thanks janus
[08:43:12] <prolic> will get back to it tomorrow
[08:43:18] <prolic> good night
[08:43:28] *** Quits: mybbgirl (~mybbgirl@188.25.57.254) (K-Lined)
[08:48:22] *** Joins: nunggu (~q@user/nunggu)
[08:49:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:50:36] *** Quits: jao (~jao@static-68-235-44-70.cust.tzulo.com) (Ping timeout: 256 seconds)
[08:51:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:52:46] *** Quits: hueso (~root@user/hueso) (Ping timeout: 272 seconds)
[08:53:04] *** Joins: hueso (~root@user/hueso)
[08:57:08] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[09:04:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[09:08:44] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[09:11:23] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:11:59] *** Joins: alx741 (~alx741@157.100.197.240)
[09:12:30] <hololeap> does anyone know how to disable a doctest without changing the way it renders?
[09:12:50] *** Joins: pranaysashank (ef3e56ca8b@2604:bf00:561:2000::3c4)
[09:14:57] *** Quits: ix (~ix@213.205.241.13) (Ping timeout: 240 seconds)
[09:16:37] <hololeap> I've got some doctests that I'm trying to edit so that they don't make network calls. some rely on an internet connection that breaks gentoo's sandbox
[09:18:35] <hololeap> for instance: https://github.com/dhall-lang/dhall-haskell/blob/ecef9b7daf5bb16d2678a7c973406fbc78731d19/dhall/src/Dhall/Tutorial.hs#L378
[09:21:17] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[09:21:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:23:08] *** Joins: ix (~ix@213.205.241.13)
[09:26:21] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[09:31:23] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:32:30] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:33:26] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[09:33:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:33:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:33:52] *** Joins: wroathe (~wroathe@user/wroathe)
[09:35:43] <pavonia> I really hope there is a flag to disable those network calls O.o
[09:36:09] <jackdk> I would skip doctests in my packaging, personally
[09:38:13] *** Joins: alx741 (~alx741@157.100.197.240)
[09:38:55] <sm> disable without changing how it renders ? do you mean an easy way to comment out a doctest ?
[09:41:25] *** Joins: mbuf (~Shakthi@117.96.194.162)
[09:42:56] <hololeap> sm: I mean disabling the test itself without changing the way it renders in haddock
[09:43:38] <sm> does it render specially in haddock ? How about s/>>>/#>>>/
[09:44:38] <sm> or s/>>>/>>> -- /
[09:44:52] <sm> just guessing
[09:46:08] *** Quits: xff0x (~xff0x@2001:1a81:5288:ea00:61bf:cfbd:ecf1:532b) (Ping timeout: 250 seconds)
[09:47:02] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:6fee:3fb4:5f11:904c)
[09:47:31] <hololeap> sm: search for "directly into Haskell" here: https://hackage.haskell.org/package/dhall-1.40.2/docs/Dhall-Tutorial.html
[09:47:46] <hololeap> you can see the source code here: https://hackage.haskell.org/package/dhall-1.40.2/docs/src/Dhall.Tutorial.html#line-146
[09:48:24] <hololeap> doctest might have some intended way to do this
[09:49:08] <hololeap> but that is how doctest renders the tests
[09:49:13] <sm> I don't think so, I'd just try things some things locally till it looks right
[09:49:27] <sm> I can't quite see the need, but no matter
[09:50:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[09:51:08] <hololeap> I'm submitting a patch upstream to allow for disabling a few of these tests and I didn't want to mess up how their docs render
[09:51:12] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[09:51:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:54:02] *** Joins: nunggu (~q@user/nunggu)
[09:55:28] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[09:56:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:56:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:56:07] *** Joins: wroathe (~wroathe@user/wroathe)
[09:59:03] <sm> I see. Shouldn't the tests just be removed ? Network dependent tests seem fragile
[09:59:25] <sm> 🤷‍♀️
[10:01:13] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[10:01:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:01:40] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:02:34] *** Quits: ix (~ix@213.205.241.13) (Ping timeout: 256 seconds)
[10:05:58] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[10:09:51] *** Joins: alx741 (~alx741@157.100.197.240)
[10:10:26] *** Joins: ix (~ix@213.205.241.13)
[10:14:51] <hololeap> dhall is supposed to be able to pull imports from online sources, so they probably want these tests in most cases
[10:27:06] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:27:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:28:52] *** Joins: off^ (~off@50.235.176.163)
[10:43:59] *** Joins: alx741 (~alx741@181.199.42.143)
[10:49:36] *** Quits: off^ (~off@50.235.176.163) (Ping timeout: 256 seconds)
[10:49:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[10:51:42] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[10:57:39] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:f502:3f20:a1e5:5bdc) (Remote host closed the connection)
[11:05:25] *** Parts: chronon (~chronon@user/chronon) ()
[11:07:44] *** Quits: deadmarshal (~deadmarsh@95.38.116.52) (Ping timeout: 256 seconds)
[11:08:20] *** Joins: alx741 (~alx741@181.199.42.143)
[11:12:46] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[11:15:03] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[11:16:47] *** Joins: nunggu (~q@user/nunggu)
[11:18:58] *** Joins: fef (~thedawn@user/thedawn)
[11:19:25] *** Joins: emf (~emf@2620:10d:c090:400::5:a68a)
[11:19:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[11:24:30] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:29:43] *** Joins: alx741 (~alx741@157.100.197.240)
[11:31:53] *** Joins: deadmarshal (~deadmarsh@95.38.116.52)
[11:32:15] *** Joins: mastarija (~mastarija@2a05:4f46:e04:6000:e488:a50d:e3f0:97b0)
[11:33:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[11:34:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[11:35:18] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:36:42] *** Quits: Batzy (~quassel@user/batzy) (Read error: Connection reset by peer)
[11:40:48] *** Quits: emf (~emf@2620:10d:c090:400::5:a68a) (Quit: emf)
[11:43:36] *** Joins: emf (~emf@2620:10d:c090:400::5:5ef1)
[11:44:32] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:44:35] *** Joins: Batzy (~quassel@user/batzy)
[11:45:36] *** Joins: fef (~thedawn@user/thedawn)
[11:47:40] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:49:39] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:49:54] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[11:51:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:51:50] *** Joins: Sgeo (~Sgeo@user/sgeo)
[11:52:06] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[11:52:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:52:28] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[11:53:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:56:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[12:00:40] *** Joins: alx741 (~alx741@181.199.42.143)
[12:01:24] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[12:02:05] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[12:02:38] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[12:04:05] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[12:04:05] *** Joins: fef (~thedawn@user/thedawn)
[12:04:40] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[12:04:58] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:07:00] *** Joins: max22- (~maxime@2a01cb0883359800610101aa1dfab334.ipv6.abo.wanadoo.fr)
[12:11:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:13:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[12:15:21] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:17:48] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[12:18:19] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[12:18:26] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:18:37] *** Quits: ix (~ix@213.205.241.13) (Remote host closed the connection)
[12:19:03] *** Joins: ix (~ix@213.205.241.13)
[12:21:58] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[12:22:03] *** Joins: alx741 (~alx741@157.100.197.240)
[12:25:13] *** Quits: mbuf (~Shakthi@117.96.194.162) (Remote host closed the connection)
[12:26:30] *** Joins: acidjnk (~acidjnk@pd9e0b668.dip0.t-ipconnect.de)
[12:26:45] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:26:54] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:26:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[12:27:03] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Client Quit)
[12:27:11] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[12:27:43] *** Quits: max22- (~maxime@2a01cb0883359800610101aa1dfab334.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[12:36:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[12:37:13] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[12:39:12] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[12:41:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[12:42:49] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[12:43:19] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[12:44:35] *** Joins: alx741 (~alx741@157.100.197.240)
[12:47:18] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:48:22] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[12:50:36] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[12:50:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:52:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:53:08] *** Joins: nunggu (~q@user/nunggu)
[12:53:45] *** Joins: max22- (~maxime@2a01cb08833598008a0dd74c15f933a2.ipv6.abo.wanadoo.fr)
[12:53:59] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:57:14] *** Joins: olle (~olle@i5E866D96.versanet.de)
[13:00:36] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:01:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:01:43] *** Quits: xff0x (~xff0x@2001:1a81:5288:ea00:6fee:3fb4:5f11:904c) (Ping timeout: 256 seconds)
[13:02:14] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:43ab:35e6:a5cd:7882)
[13:03:34] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[13:03:42] *** Joins: alx741 (~alx741@157.100.197.240)
[13:05:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[13:09:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[13:12:01] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:78e9:2c9a:5431:d092) (Read error: Connection reset by peer)
[13:13:22] *** Joins: cynomys (~cynomys@user/cynomys)
[13:13:23] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:14:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[13:15:51] *** Joins: mbuf (~Shakthi@117.96.194.162)
[13:15:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7dab:1fa0:9cf6:a5de)
[13:17:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[13:17:54] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:20:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7dab:1fa0:9cf6:a5de) (Ping timeout: 240 seconds)
[13:22:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 256 seconds)
[13:23:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[13:26:12] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753)
[13:27:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[13:28:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:28:29] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[13:29:11] <ehammarstrom> Any recommended write-ups/getting-started on fused-effects?
[13:29:53] <fendor[m]> ehammarstrom, what are you looking for? Program architecture, or how to use them?
[13:30:12] *** Joins: fendor (~fendor@178.165.165.136.wireless.dyn.drei.com)
[13:30:42] <ehammarstrom> fendor[m]: How to use them is a good start, showing actual use-cases would be great
[13:31:14] *** Joins: alx741 (~alx741@157.100.197.240)
[13:32:16] <fendor[m]> I argue that it is rather similar to any popular effect system. Are you familiar with effect systems in general?
[13:35:09] <ehammarstrom> I used mtl some years ago to compose some monad transformers into a monad that had the effects/functionality that I needed
[13:35:21] <ehammarstrom> Familiar yes, comfortable? Maybe not
[13:35:54] <fendor[m]> Ok, I really liked this blogpost: https://haskell-explained.gitlab.io/blog/posts/2019/07/28/polysemy-is-cool-part-1/
[13:36:24] <fendor[m]> It is about polysemy, but the ideas are similar. Once you got a feel for it, I believe the fused-effects hackage documentation will be already very helpful
[13:36:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:36:43] <ehammarstrom> Thanks, I'll have a look
[13:41:03] *** Joins: jespada (~jespada@87.74.36.188)
[13:41:44] <fendor[m]> if not, feel free to call me out 😀
[13:43:08] *** Joins: Guest|79 (~Guest|79@ip5f5bf785.dynamic.kabel-deutschland.de)
[13:44:08] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[13:44:20] *** Joins: cheater (~Username@user/cheater)
[13:44:42] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[13:45:00] *** Joins: prolic (~prolic@181.122.131.227)
[13:45:16] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:46:44] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:46:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[13:47:05] *** Quits: mastarija (~mastarija@2a05:4f46:e04:6000:e488:a50d:e3f0:97b0) (Quit: Leaving)
[13:50:41] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:50:48] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Remote host closed the connection)
[13:53:18] *** Joins: alx741 (~alx741@157.100.197.240)
[13:55:17] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:56:52] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:00:18] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[14:00:35] *** Joins: prolic (~prolic@181.122.131.227)
[14:04:16] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[14:04:34] *** Joins: prolic (~prolic@181.122.131.227)
[14:04:36] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[14:06:25] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[14:06:43] *** Joins: prolic (~prolic@181.122.131.227)
[14:08:15] *** Joins: __monty__ (~toonn@user/toonn)
[14:10:19] *** Parts: Guest|79 (~Guest|79@ip5f5bf785.dynamic.kabel-deutschland.de) ()
[14:12:45] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[14:13:03] *** Joins: prolic (~prolic@181.122.131.227)
[14:14:42] *** Joins: alx741 (~alx741@181.199.42.143)
[14:16:49] *** Joins: ardell (~ardell@user/ardell)
[14:18:09] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[14:19:02] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:20:23] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[14:22:17] *** Joins: vysn (~vysn@user/vysn)
[14:22:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[14:23:34] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[14:25:48] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[14:26:05] *** Joins: prolic (~prolic@181.122.131.227)
[14:29:50] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[14:30:08] *** Joins: prolic (~prolic@181.122.131.227)
[14:33:29] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:33:54] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[14:34:57] *** Joins: alx741 (~alx741@181.199.42.143)
[14:36:18] *** Lord_of_Life_ is now known as Lord_of_Life
[14:37:16] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[14:39:06] *** Quits: ix (~ix@213.205.241.13) (Ping timeout: 256 seconds)
[14:39:41] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[14:41:14] *** Joins: ix (~ix@213.205.192.252)
[14:44:36] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[14:49:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
[14:54:42] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[14:54:59] *** Joins: prolic (~prolic@181.122.131.227)
[14:56:20] *** Joins: alx741 (~alx741@157.100.197.240)
[14:57:55] *** Joins: yauhsien (~yauhsien@61-231-32-103.dynamic-ip.hinet.net)
[15:00:52] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:04:31] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:06:04] *** Quits: yauhsien (~yauhsien@61-231-32-103.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:07:44] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:08:02] *** Joins: prolic (~prolic@181.122.131.227)
[15:09:42] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:10:00] *** Joins: prolic (~prolic@181.122.131.227)
[15:11:41] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:11:45] *** Joins: yauhsien (~yauhsien@61-231-32-103.dynamic-ip.hinet.net)
[15:11:59] *** Joins: prolic (~prolic@181.122.131.227)
[15:13:39] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:13:57] *** Joins: prolic (~prolic@181.122.131.227)
[15:14:54] *** Joins: fef (~thedawn@user/thedawn)
[15:15:41] *** Quits: acidjnk (~acidjnk@pd9e0b668.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:17:40] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[15:18:43] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[15:18:52] *** Joins: alx741 (~alx741@157.100.197.240)
[15:20:22] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[15:21:30] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:21:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:22:16] *** Quits: yauhsien (~yauhsien@61-231-32-103.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[15:24:56] *** Joins: acidjnk (~acidjnk@p200300d0c70575217cad9542db460749.dip0.t-ipconnect.de)
[15:27:35] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:27:52] *** Joins: prolic (~prolic@181.122.131.227)
[15:27:57] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[15:31:32] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:31:49] *** Joins: prolic (~prolic@181.122.131.227)
[15:33:31] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:33:35] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:33:48] *** Joins: prolic (~prolic@181.122.131.227)
[15:34:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:35:45] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:35:56] *** Joins: coot (~coot@213.134.190.95)
[15:36:02] *** Joins: prolic (~prolic@181.122.131.227)
[15:36:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:39:22] *** Joins: alx741 (~alx741@157.100.197.240)
[15:41:37] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[15:41:51] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[15:42:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[15:43:46] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:46:58] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 272 seconds)
[15:48:05] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[15:51:22] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:51:40] *** Joins: prolic (~prolic@181.122.131.227)
[15:55:19] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:55:20] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[15:55:32] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:55:37] *** Joins: prolic (~prolic@181.122.131.227)
[15:57:18] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:57:35] *** Joins: prolic (~prolic@181.122.131.227)
[15:59:16] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[15:59:34] *** Joins: prolic (~prolic@181.122.131.227)
[16:00:31] *** Joins: alx741 (~alx741@181.199.42.143)
[16:03:15] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:03:33] *** Joins: prolic (~prolic@181.122.131.227)
[16:05:14] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:05:31] *** Joins: prolic (~prolic@181.122.131.227)
[16:05:32] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[16:07:41] *** Quits: phma (~phma@host-67-44-208-185.hnremote.net) (Read error: Connection reset by peer)
[16:09:29] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:09:34] *** Joins: phma (phma@2001:5b0:215a:a4e8:1976:ce9f:8bfa:70aa)
[16:09:48] *** Joins: prolic (~prolic@181.122.131.227)
[16:11:28] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:11:46] *** Joins: prolic (~prolic@181.122.131.227)
[16:15:44] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:16:02] *** Joins: prolic (~prolic@181.122.131.227)
[16:18:35] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:19:43] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Remote host closed the connection)
[16:22:39] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[16:22:49] *** Joins: alx741 (~alx741@157.100.197.240)
[16:24:29] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:24:47] *** Joins: prolic (~prolic@181.122.131.227)
[16:26:23] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:27:29] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[16:29:10] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:29:25] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:30:40] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 272 seconds)
[16:31:09] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:33:04] <sshine> is there a thing like Control.Monad.guard that'll let me provide an error for Either e?
[16:33:44] <sshine> e.g. guard' (length xs == 5) "length must be 5"
[16:35:09] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:36:51] <hpc> :t (<?>)
[16:36:52] <lambdabot> error:
[16:36:52] <lambdabot>     • Variable not in scope: <?>
[16:36:52] <lambdabot>     • Perhaps you meant one of these:
[16:37:08] <hpc> hmm, that's just for parsers
[16:37:09] <maerwald> I don't think that's possible with the Alternative class
[16:37:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[16:38:06] <maerwald> MonadThrow yes
[16:38:15] <hpc> p <?> e = if p then pure () else fail s -- ?
[16:38:21] <hpc> or something along those lines
[16:38:44] <maerwald> that requires MonadFail
[16:38:55] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[16:39:41] <hpc> huh, there's no instance for Either String
[16:39:47] <hpc> p <?> e = if p then pure () else Right s -- :(
[16:39:54] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:39:59] <hpc> er, Left
[16:40:01] <hpc> it's not my day lol
[16:40:04] <dminuoso> sshine: How generic do you want this to be?
[16:40:16] <dminuoso> Note that guard really isnt about "failure" modes in general
[16:40:26] <dminuoso> For example, in STM `guard` will cause a retry
[16:40:48] <sshine> :t guard
[16:40:48] <lambdabot> Alternative f => Bool -> f ()
[16:42:04] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[16:43:07] <sshine> hm.
[16:43:29] <dminuoso> Or consider how you can use `guard` in list-monad to filter out cases
[16:43:51] <maerwald> > unless (True == False) $ throwM (userError "lol") :: Either SomeException ()
[16:43:53] <lambdabot>  error:
[16:43:53] <lambdabot>      • Variable not in scope:
[16:43:53] <lambdabot>          throwM :: IOError -> Either SomeException ()
[16:43:54] <dminuoso> i.e. you can think of list-comprehension predicates as desugaring into guard
[16:44:12] *** Joins: alx741 (~alx741@181.199.42.143)
[16:46:48] <sshine> I really just had this in mind: guardEither :: Bool -> e -> Either e () -- I didn't think of what degree it might generalise to. :)
[16:46:48] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[16:47:18] <sshine> with 'guardEither False e = Left e' and 'guardEither True _ = Right ()'
[16:47:36] <maerwald> see MonadThrow
[16:48:45] <dminuoso> MonadThrow is a poor fit
[16:48:52] <dminuoso> MonadError gives you that particular interface
[16:49:02] <dminuoso> instance e ~ SomeException => MonadThrow (Either e)
[16:49:17] <dminuoso> Given sshine's requirement, MonadThrow wouldnt suffice
[16:49:24] <maerwald> why
[16:49:38] <dminuoso> Because you cant provide a string?
[16:49:43] <maerwald> I did so above
[16:50:00] *** Quits: deadmarshal (~deadmarsh@95.38.116.52) (Ping timeout: 256 seconds)
[16:51:40] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[16:51:58] *** Joins: prolic (~prolic@181.122.131.227)
[16:53:19] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Remote host closed the connection)
[16:53:35] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[16:54:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[16:55:33] <dminuoso> Well, the catch part is going to be a bit more silly now
[16:55:40] <dminuoso> Because you have to be ready for any SomeException
[16:56:12] <dminuoso> instance MonadError e (Either e)
[16:56:16] <dminuoso> % :t throwError
[16:56:17] <yahb> dminuoso: MonadError e m => e -> m a
[16:56:29] <dminuoso> I think I might prefer that one, it's more direct for Either.
[16:57:31] <ehammarstrom> fendor[m]: it was useful, I was able to use it to write an effect with fused-effects. I'll see if I can write another one and compose them; thanks for helping out
[16:58:19] <hpc> this is why i don't like exceptions, btw
[16:58:44] <hpc> all of a sudden not only does lexical scope not matter, but to some extent types don't matter either
[16:58:59] <hpc> (re the SomeException thing)
[16:59:57] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[17:00:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:03:33] *** Joins: alx741 (~alx741@157.100.197.240)
[17:03:48] *** Joins: jao (~jao@static-68-235-44-22.cust.tzulo.com)
[17:05:58] *** Quits: acidjnk (~acidjnk@p200300d0c70575217cad9542db460749.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:07:38] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:07:57] *** Joins: prolic (~prolic@181.122.131.227)
[17:08:53] *** Joins: fendor_ (~fendor@91.141.33.218.wireless.dyn.drei.com)
[17:09:21] *** Joins: prite (~pritam@user/pritambaral)
[17:11:50] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:11:50] *** Quits: fendor (~fendor@178.165.165.136.wireless.dyn.drei.com) (Ping timeout: 272 seconds)
[17:12:08] *** Joins: prolic (~prolic@181.122.131.227)
[17:14:24] <maerwald> dminuoso: bimap displayException id
[17:15:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[17:15:24] <c_wraith> isn't that the equivalent of lmap displayException?
[17:16:20] <dminuoso> maerwald: Im not seeing how that helps your case.. :-)
[17:16:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:16:34] <maerwald> dminuoso: then I don't see your problem
[17:16:42] <dminuoso> ok
[17:16:46] <maerwald> you can have string, exception, whatever you want
[17:18:21] <dminuoso> maerwald: They didnt ask to have a generalization of IO exceptions, together with exception hierarchies. 
[17:18:44] <maerwald> MonadThrow doesn't require IO exceptions
[17:18:54] <dminuoso> No, MonadThrow *generalizes* them
[17:19:12] <dminuoso> It's why you have this `SomeException ~ e` constraint on that instance
[17:19:22] <maerwald> I don't see what this has to do with IO
[17:19:34] *** Joins: xkuru (~xkuru@user/xkuru)
[17:19:42] <maerwald> I use MonadThrow outside of IO
[17:19:49] <dminuoso> okay I have more productive things to do than to argue with you
[17:20:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[17:23:14] <xsperry> TBH I like how the caller gets to decide how to handle errors when uses MonadThrow
[17:23:20] <xsperry> using*
[17:23:40] <maerwald> yes
[17:24:01] <maerwald> if you're in IO, you're triggering in IO exception, but you might as well turn it into a Maybe and deal with it
[17:24:53] <maerwald> might be a bit unwieldy if you want to pattern match on the error in Either, but so is using a String
[17:29:24] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:29:41] *** Joins: prolic (~prolic@181.122.131.227)
[17:31:12] <maerwald> e.g.: case parseAbsFile "lol" of ; Left e | (Just (InvalidAbsFile fp)) <- fromException e -> "lolz"
[17:31:17] <maerwald> with https://hackage.haskell.org/package/path-0.9.2/docs/Path-Posix.html#v:parseAbsDir
[17:31:23] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[17:31:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:34:00] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 272 seconds)
[17:35:01] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[17:35:10] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[17:35:39] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[17:37:25] *** Joins: Pickchea (~private@user/pickchea)
[17:38:37] *** Joins: deadmarshal (~deadmarsh@95.38.116.52)
[17:38:45] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[17:41:02] *** Joins: coot (~coot@213.134.190.95)
[17:42:43] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:43:00] *** Joins: prolic (~prolic@181.122.131.227)
[17:43:35] *** Quits: jao (~jao@static-68-235-44-22.cust.tzulo.com) (Ping timeout: 256 seconds)
[17:44:24] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[17:46:07] *** Joins: tremon (~tremon@83-84-18-241.cable.dynamic.v4.ziggo.nl)
[17:49:14] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:49:32] *** Joins: prolic (~prolic@181.122.131.227)
[17:51:12] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[17:51:30] *** Joins: prolic (~prolic@181.122.131.227)
[17:51:44] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[17:54:03] *** Quits: deadmarshal (~deadmarsh@95.38.116.52) (Ping timeout: 250 seconds)
[17:54:45] *** Joins: deadmarshal (~deadmarsh@95.38.114.155)
[17:56:51] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[17:59:59] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:00:17] *** Joins: prolic (~prolic@181.122.131.227)
[18:03:58] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:04:14] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[18:04:16] *** Joins: prolic (~prolic@181.122.131.227)
[18:05:19] *** Quits: max22- (~maxime@2a01cb08833598008a0dd74c15f933a2.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[18:05:21] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:07:56] <sshine> I did Data.Aeson.decodeFileStrict' "myfile" and got *** Exception: myfile: openBinaryFile: does not exist (No such file or directory) -- should I try to catch that exception, or is there a safer way to read a file that might not exist?
[18:08:55] <sshine> oh, there's eitherDecodeFileStrict'!
[18:09:51] <jkaye[m]> Is it possible to get hls to work on a single file without a project and such? I'd like editor features for my xmonad configuration file if possible
[18:11:25] <geekosaur> I think you need a project/stack.yaml for it to find xmonad and xmonad-contrib
[18:11:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:12:01] <geekosaur> hls isn't really designed for global installs, and even xmonad is moving away from them
[18:12:02] <sshine> jkaye[m], you can make a minimal project around your xmonad config.
[18:12:18] <sshine> jkaye[m], doesn't even need a src/ sub-directory.
[18:12:33] <jkaye[m]> I was hoping to avoid that, but yeah should be easy enough to just init the yamls I suppose
[18:12:36] <geekosaur> (we already have stack support built inas of 0.17.0 and I want to add direct cabal support)
[18:12:36] <jkaye[m]> Thanks
[18:13:51] <sshine> jkaye[m], it'd be neat with something like rust-script, which lets you embed a project file in a comment at the top of the file :)
[18:14:46] <jkaye[m]> Yeah, there actually is something similar-ish with stack script, this is a bit of a different thing since it's a configuration file though, but agreed
[18:14:56] <geekosaur> stack has that and cabal has at least part of it
[18:15:09] <geekosaur> but I doubt hls knows about it
[18:16:09] <sshine> ohhh, right.
[18:17:16] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[18:19:15] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:19:34] *** Joins: prolic (~prolic@181.122.131.227)
[18:19:57] *** Quits: deadmarshal (~deadmarsh@95.38.114.155) (Ping timeout: 240 seconds)
[18:24:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[18:27:45] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:28:04] *** Joins: prolic (~prolic@181.122.131.227)
[18:29:50] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:30:08] *** Joins: prolic (~prolic@181.122.131.227)
[18:33:59] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:34:17] *** Joins: prolic (~prolic@181.122.131.227)
[18:35:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7dab:1fa0:9cf6:a5de)
[18:37:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:39:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7dab:1fa0:9cf6:a5de) (Ping timeout: 240 seconds)
[18:42:12] <jkaye[m]> Hmm, after stack init and installing locally (reloading configs as well), it looks like hls is choking without errors somehow. Very odd
[18:43:36] *** Joins: max22- (~maxime@2a01cb08833598002ee6dc78da9599b4.ipv6.abo.wanadoo.fr)
[18:45:16] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:45:34] *** Joins: prolic (~prolic@181.122.131.227)
[18:47:34] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:47:52] *** Joins: prolic (~prolic@181.122.131.227)
[18:48:30] <sshine> hm, Data.Aeson.eitherDecodeFileStrict' apparently throws on file not found and only gives Left on decode errors. :-/
[18:49:22] <maerwald> catch it?
[18:49:36] <sshine> jkaye[m], I don't know the state of HLS right now, but maybe it can be fixed with a hie.yaml?
[18:49:57] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[18:49:57] <sshine> maerwald, how do I do that?
[18:50:16] <alt-romes> hallo, what's a point free version of (f <$>)
[18:50:16] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[18:50:17] <jkaye[m]> I don't think so - it doesn't seem to have any issue starting up and running with the project, just doesn't report anything back to Emacs. It's not that important honestly
[18:50:21] <maerwald> sshine: https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Exception.html#v:catch
[18:50:38] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[18:50:51] <maerwald> or https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Exception.html#v:try
[18:51:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[18:51:15] <alt-romes> example for what's the point free version of: fun = (const NoContent <$>) . liftIO . print
[18:51:35] <geekosaur> that is pointfree
[18:51:35] <sshine> maerwald, thanks!
[18:51:44] <geekosaur> (the pointd are not the dots, they are bindings)
[18:51:52] <maerwald> fmap join . try . bimap displayException id . eitherDecodeFileStriict'
[18:51:56] <maerwald> sth like that
[18:51:58] <alt-romes> geekosaur: was about to say that ahah, but I was wondering if there was something like <.>
[18:52:18] <sshine> maerwald, ah, awesome :)
[18:52:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:56:05] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:56:23] <maerwald> fmap (join . bimap (displayException @SomeException) id) . try . eitherDecodeFileStrict' @String
[18:56:24] *** Joins: prolic (~prolic@181.122.131.227)
[18:56:27] <maerwald> that typechecks
[18:58:08] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[18:58:25] *** Joins: prolic (~prolic@181.122.131.227)
[18:58:35] <maerwald> the last type application is for the type to decode into
[18:59:57] <sshine> right. thanks!
[19:01:09] * sshine is doing a proof-of-concept of something, and in an hour of coding has added 7 LANGUAGE pragmas and 14 import lines. -_-
[19:01:40] <sshine> it feels right, but it also feels like it's not something you stumble into doing,hehe.
[19:04:36] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[19:04:53] *** Joins: prolic (~prolic@181.122.131.227)
[19:05:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:05:28] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[19:06:34] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:07:57] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[19:11:03] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[19:11:20] *** Joins: prolic (~prolic@181.122.131.227)
[19:13:00] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[19:13:18] *** Joins: prolic (~prolic@181.122.131.227)
[19:13:56] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[19:15:38] <_73> is there a name for the concept of currying the function application function `$`? It feels rather remarkable to me to curry function application itself.
[19:17:17] *** Quits: ix (~ix@213.205.192.252) (Ping timeout: 240 seconds)
[19:17:44] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[19:19:01] <janus> why do you call that currying?
[19:19:03] *** Quits: mbuf (~Shakthi@117.96.194.162) (Quit: Leaving)
[19:19:08] <[exa]> _73: how would you curry that if ($)'s argument isn't a (,)? (perhaps you meant uncurrying?)
[19:19:46] *** Joins: ix (~ix@213.205.242.209)
[19:21:36] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[19:21:53] *** Joins: prolic (~prolic@181.122.131.227)
[19:23:33] <_73> hmm maybe this doesn't make sense in haskell I am not much of a haskeller. Really I am currying `funcall` in lisp but I got no answers on the lisp or programming channels. `(curry #'funcall #'+ 1)`
[19:23:53] <_73> I got no answers on the other channels I tried and figured you people know all about currying.
[19:24:23] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a8cc:c7ff:6c11:4c2d)
[19:24:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:24:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:24:56] *** Joins: wroathe (~wroathe@user/wroathe)
[19:27:50] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[19:28:08] *** Joins: prolic (~prolic@181.122.131.227)
[19:28:09] <ski> _73 : looks more like partial application, to me ?
[19:29:02] <xsperry> sometimes it makes to partially apply function application. for example:
[19:29:03] <ski> (also "curry" is a somewhat fuzzy term)
[19:29:07] <xsperry> > map ($2) [(*2),(^8),(*10)]
[19:29:08] <lambdabot>  [4,256,20]
[19:29:28] *** Joins: alp (~alp@user/alp)
[19:29:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:30:02] <_73> ski: so perhaps it can be said that currying function application results in partial application?
[19:30:07] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Quit: You have been kicked for being idle)
[19:30:41] <ski> "curry" tends to refer to convert to a function that takes its parameters in curried style. could be converting from (some version of) tupled style. or, in languages which have multiple parameters in function application, it could be converting from a function accepting multiple parameters
[19:32:19] <ski> however, the fuzziness then comes in that, there's many ways to "make a curried function" out of that, if you have multiple parameter functions. because you need not necessarily convert to a function that takes one parameter, and computes a function that takes one parameter, &c. until you compute the result. instead you could "split" the sequence of parameters into larger chunks (possibly more than two 
[19:32:25] <ski> chunks)
[19:33:01] <_73> is this an example of a function that takes its args in a curried style?: `f = \x -> \y -> (+) x y`
[19:33:11] <ski> _73 : i suppose you could say so. but i would also say `(lambda (x z) (f x 3 z))' is a partial application of `f'
[19:33:15] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:33:35] <ski> yes
[19:33:42] *** Joins: stuebinm (~stuebinm@user/stuebinm)
[19:33:50] <xsperry> _73, yes, but in haskell that is the same as f x y = .. 
[19:34:03] <_73> ok my conception of currying has been incorrect to this point.
[19:34:21] *** Joins: lucas96 (~lucas96@177.70.94.186)
[19:34:23] <ski> (or just `f = (+)', in that particular case, since infix operators are curried(ly expressed) in Haskell)
[19:34:35] <ski> (note that Haskell does *not* "have curried functions")
[19:35:52] <ski> curried style (as well as tupled style) are *styles* of *encoding* / *simulating* multiparameter functions (e.g. in a language that doesn't actually have those, like Haskell)
[19:35:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:36:07] <ski> iow, curried style, tuples style, is all in your head, is not in Haskell itself
[19:36:17] *** Quits: ix (~ix@213.205.242.209) (Ping timeout: 240 seconds)
[19:37:03] <_73> ski: so you could say that because haskell functions can only take one parameter we must use curried style to simulate multi-parameter functions? 
[19:37:05] <ski> (that said, several features of Haskell syntax is designed so as to encourage curried style as a default style for expressing multiparameter functions (which Haskell doesn't have))
[19:37:23] <ski> not "must". we can also use "tupled style"
[19:37:53] <ski> (by which i mean packaging the "multiple parameters" together into some compound structure, e.g. a tuple, but could be a list, or array, or record, or some other structure, as well)
[19:38:08] <_73> Doesn't haskell's `curry` function use tupled style?
[19:38:10] <_73> :t curry
[19:38:11] <lambdabot> ((a, b) -> c) -> a -> b -> c
[19:38:24] <sshine> > (\(x, y) -> x + y) (2, 3)
[19:38:26] <lambdabot>  5
[19:38:37] <ski> it converts from tupled style (expressed via a pair) to curried style (of two parameters)
[19:38:37] *** Parts: stuebinm (~stuebinm@user/stuebinm) (WeeChat 3.3)
[19:38:39] <sshine> > (\x y -> x + y) 2 3
[19:38:41] <lambdabot>  5
[19:39:07] <_73> ok I have a much better understanding of currying now
[19:39:23] <ski> also, `curry' can also be thought of as a partial application operation, itself expressed in curried style ..
[19:39:54] <sshine> > curry (\(x, y) -> x + y) 2 3
[19:39:55] <lambdabot>  5
[19:39:59] <ski> .. a partial application expressed in tupled style would be e.g. `partialApply :: ((a,b) -> c,a) -> (b -> c)'
[19:40:05] <sshine> > uncurry (\x y -> x + y) (2, 3)
[19:40:07] <lambdabot>  5
[19:40:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:41:18] <sshine> :t (\x y -> x + y) 2
[19:41:19] <lambdabot> Num a => a -> a
[19:41:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:41:42] *** Quits: lucas96 (~lucas96@177.70.94.186) (Quit: Client closed)
[19:42:10] <sshine> @pl (\x y -> x + y) 2
[19:42:10] <lambdabot> (2 +)
[19:42:23] <ski> _73 : anyway, in Lisps, `+' usually can take an arbitrary amount of elements. so if we want to partially apply it, how many "nested `lambda's" do we want to get ? it's not obvious at all
[19:42:41] <sshine> Lisp '+' is Haskell 'sum', right?
[19:43:04] <ski> well, i guess partial application doesn't really stage more, normally. but if you're thinking of it in terms of "currying", then you need to answer this question
[19:43:08] <sshine> or somewhat, I guess, since Lisp '+' is variadic.
[19:43:17] <ski> sshine : more or less, yea
[19:44:35] <ski> (if you have an actual list of numbers, and want to sum them up, then you'd probably use `apply' (or maybe some specific summing function that accepts a list. that could be relevant if there's restrictions on number of parameters, and the list is very long))
[19:45:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[19:46:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:46:54] <ski> _73 : so what does your `curry' (in, i assume CL ? or Emacs Lisp ?) actually do ?
[19:46:55] <_73> You could never write lisps `+` in curried style, which is why haskell does not have variadic functions.
[19:47:23] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[19:47:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:47:56] <ski> if you fix the number of "nestings", you could get a function that takes a number of parameters, and computes a function that takes a number of parameters, ..., eventually summing them all, giving that back as result
[19:48:23] <ski> (but yes, that's not a general thing)
[19:48:49] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[19:48:49] <ski> Haskell doesn't have variadic functions, because it doesn't have multiparameter functions to begin with
[19:49:19] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[19:50:06] <_73> ski: It is CL and comes from alexandria. I have only found a use for it for partial application. In case you are curious here is the implementation: http://dpaste.com/3LFT5XP99
[19:50:14] <_73> Ok I see
[19:50:16] *** Joins: ix (~ix@213.205.242.181)
[19:50:52] <[exa]> _73: btw you can "simulate" the variadic functions with typeclasses but I'd say it is not a very good idea, except in highly specific usecases (like printf)
[19:52:25] <ski> _73 : hm, ok. i think i'd rather name that something like `partial-apply' (or `partial-apply-to-prefix', maybe). (a) because it just introduces "two" levels of functions; (b) because it takes `arguments' in the same application as `function' (rather than in the next `lambda')
[19:53:16] <ski> (`curry', as a verb, is generally used to express *converting* to curried style. iow, it should not take the parameters directly, but return a function that does (in a nested fashion))
[19:54:41] <ski> (i guess if you curry `curry' itself, you could call it `curry')
[19:55:47] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[19:56:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[19:57:17] <ski> (.. (re a `+' in curried style, in Lisps) i suppose another thing one could do is a function (or object, maybe), which one could send parameters to, and again, repeatedly, until one signals to it that one's "done" (perhaps sending a specific message to the object), at which point it'd compute the result. but this all seems quite awkward ..)
[19:59:00] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[19:59:17] *** Joins: prolic (~prolic@181.122.131.227)
[19:59:28] *** Quits: fendor_ (~fendor@91.141.33.218.wireless.dyn.drei.com) (Remote host closed the connection)
[19:59:30] <ski> anyway, partial application is useful. but attempting to express "currying" and "uncurrying" seem to rarely be as useful, unless one has some particular conventions for the source and target format in mind
[20:00:30] <_73> In haskell you could use an auxilary function that takes an extra parameter `say count` for the number of parameters and decrements it on recursive calls?
[20:00:55] <ski> (and `uncurry' and `curry' in Haskell only converts between a function accepting a pair, and a function curriedly taking two parameters. it's not a general thing. and it's quite rare than one even wants versions for triples, say. there are some library definitions for those, floating around, but i'm not sure i've even seen for higher arities)
[20:01:03] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[20:01:13] <_73> and when count is 0 returns the accumulator
[20:01:28] <ski> hm .. i'm not quite sure what situation you have in mind
[20:01:46] <ski> but if you're talking about currying/uncurrying -- then that would require dependent types
[20:02:18] <_73> never mind we get back to the original problem with haskell not being able to support variadic arguments
[20:02:51] <[exa]> _73: check out the printf package, as above
[20:03:02] <_73> [exa]: I will
[20:03:20] <[exa]> I hope that solves your original problem :]
[20:03:48] * ski was just about to refer back to [exa]'s previous comment
[20:05:28] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:05:46] *** Joins: prolic (~prolic@181.122.131.227)
[20:07:26] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:07:44] *** Joins: prolic (~prolic@181.122.131.227)
[20:08:06] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:c99b:50d8:45d8:1cbb)
[20:08:25] *** Joins: Pickchea (~private@user/pickchea)
[20:10:26] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:11:18] *** Quits: polyphem (~rod@2a02:810d:840:8754:a99c:f444:1e7c:25d1) (Ping timeout: 260 seconds)
[20:11:42] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[20:12:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:13:27] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:22:32] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:26:11] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:29:35] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:29:53] *** Joins: prolic (~prolic@181.122.131.227)
[20:31:40] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d)
[20:35:37] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f8af:7e9a:b154:2753) (Ping timeout: 256 seconds)
[20:38:17] *** Joins: coot (~coot@213.134.190.95)
[20:40:21] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:40:23] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[20:40:39] *** Joins: prolic (~prolic@181.122.131.227)
[20:42:20] *** Quits: olle (~olle@i5E866D96.versanet.de) (Ping timeout: 256 seconds)
[20:44:27] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:44:45] *** Joins: prolic (~prolic@181.122.131.227)
[20:45:15] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:45:38] *** Joins: jao (~jao@static-68-235-44-54.cust.tzulo.com)
[20:50:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[20:52:22] *** Joins: kuribas (~user@ptr-25vy0i7awh2t1unux26.18120a2.ip6.access.telenet.be)
[20:52:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:53:43] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[20:53:53] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[20:55:35] *** Joins: k8yun (~k8yun@user/k8yun)
[20:57:55] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[20:58:14] *** Joins: prolic (~prolic@181.122.131.227)
[21:00:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:00:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:01:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:01:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:02:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:02:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:02:31] *** Joins: cosimone (~user@93-34-133-235.ip49.fastwebnet.it)
[21:04:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7dab:1fa0:9cf6:a5de)
[21:04:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[21:05:07] *** Joins: maxime_ (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[21:05:26] *** Quits: polyphem_ (~rod@2a02:810d:840:8754:c99b:50d8:45d8:1cbb) (Ping timeout: 260 seconds)
[21:06:20] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:21f9:18ab:ce0d:488d)
[21:06:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:06:46] *** Joins: vysn (~vysn@user/vysn)
[21:07:02] *** Joins: econo (uid147250@user/econo)
[21:07:37] *** Joins: maxime__ (~maxime@2a01cb0883359800f9c64cc16050cef5.ipv6.abo.wanadoo.fr)
[21:07:46] *** Quits: max22- (~maxime@2a01cb08833598002ee6dc78da9599b4.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[21:09:59] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[21:10:13] *** Quits: maxime_ (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[21:13:13] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[21:13:31] *** Joins: prolic (~prolic@181.122.131.227)
[21:13:45] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[21:14:11] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:15:12] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[21:18:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[21:19:12] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:20:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:20:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.155)
[21:20:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:23:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:24:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[21:27:10] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[21:30:10] *** Joins: Sgeo (~Sgeo@user/sgeo)
[21:35:20] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[21:35:37] *** Joins: prolic (~prolic@181.122.131.227)
[21:37:43] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:37:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:38:57] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:39:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:39:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:39:52] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:40:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:41:46] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[21:42:00] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:42:04] *** Joins: prolic (~prolic@181.122.131.227)
[21:42:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:45:01] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:46:41] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[21:46:56] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 256 seconds)
[21:46:59] *** Joins: prolic (~prolic@181.122.131.227)
[21:47:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:47:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:47:30] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:48:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[21:48:36] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[21:51:21] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:51:53] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[21:52:06] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:52:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:52:43] <dmj`> geekosaur: see that new video on Mu? https://www.youtube.com/watch?v=A70SN7vFsKU
[21:52:51] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Read error: Connection reset by peer)
[21:53:04] *** Joins: Vajb (~Vajb@85-76-72-55-nat.elisa-mobile.fi)
[21:55:28] <geekosaur> I don't generally watch videos, they're kinda difficult for me
[21:55:28] <dmj`> no support for RankNTypes (hence why I asked before) and they monomorphize everything up front, probably how they support "everything is serializeable", and they use GRIN ... 
[21:55:29] *** Quits: Vajb (~Vajb@85-76-72-55-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[21:55:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:55:42] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[21:56:01] <dmj`> ah, k.
[21:56:09] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:56:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[21:57:18] <dmj`> I bet Mu could support laziness (opt-in at the very least) since they use GRIN
[21:57:43] <maerwald> dmj`: cool
[21:58:36] <dsal> Me clearly not understanding how to use `these` properly:   `(bad, good) = these (,[]) ([],) (,) $ maybe (This []) parseAndGroup (NE.nonEmpty candidates)`
[21:58:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[22:00:29] <dmj`> geekosaur: Mu doesn't support recursive data types, that's one way to get rid of String I guess ... 
[22:00:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:01:26] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:70e8:bae3:c5b2:7d1d) (Read error: Connection reset by peer)
[22:01:49] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:02:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:03:08] *** Joins: jespada (~jespada@87.74.36.188)
[22:04:58] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:c9f2:b4e0:2bd7:fbaf)
[22:06:12] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[22:07:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:08:52] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:13:34] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[22:14:25] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[22:15:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:16:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:16:17] *** Quits: emf (~emf@2620:10d:c090:400::5:5ef1) (Ping timeout: 240 seconds)
[22:17:36] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:18:09] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:18:45] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Ping timeout: 256 seconds)
[22:19:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:19:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:20:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:20:44] *** Joins: hololeap (~hololeap@user/hololeap)
[22:21:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:25:15] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-c0be-54b3-db2c-85e9.res6.spectrum.com)
[22:26:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:27:10] *** Quits: jao (~jao@static-68-235-44-54.cust.tzulo.com) (Remote host closed the connection)
[22:27:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:28:19] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[22:28:38] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[22:28:57] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[22:28:58] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:29:10] *** Joins: jao (~jao@static-68-235-44-54.cust.tzulo.com)
[22:29:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[22:29:40] <justsomeguy> I have a pdf file, and I want to number the paragraphs, the figures, and label the sentences with letters. Is there a package or library that is well-suited to doing this kind of thing?
[22:31:28] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[22:31:46] *** Joins: prolic (~prolic@181.122.131.227)
[22:32:19] *** Joins: olle (~olle@i5E866D96.versanet.de)
[22:32:33] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[22:35:28] <[exa]> justsomeguy: it's quite hard to detect actual sentence structure from just pdf
[22:36:07] <geekosaur> even paragraphs are difficult, from the last time I worked with a PDF
[22:36:22] <hpc> words are difficult even
[22:36:50] <hpc> sometimes kerning is implemented as having hundreds of individual text items offset by a pixel or two
[22:36:58] <geekosaur> PDFs are basically virtual printouts. it's allmove-print-move-print and you need to track how far it moves even to detect words (due to kerning) much less sentences or paragraphs
[22:37:32] <geekosaur> it'sa *really* lousy format for semantic manipulation
[22:37:45] <hpc> and that's if it's not an image
[22:38:14] <justsomeguy> Hmm... maybe I should email the author and ask for a copy of the latex source code. I don't think he'll respond, but it's worth a shot.
[22:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:39:37] <justsomeguy> In the pdf file, each pargraph has a leading indent, so I thought that maybe I could get lucky and use that as a rule-of-thumb to recognize where each paragraph beigns/ends.
[22:40:33] <geekosaur> until you get quoting thta uses the same indent (I get stuff like this,it's sometimes difficult even just reading it normally)
[22:40:48] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[22:41:12] <justsomeguy> That sounds frustrating.
[22:47:17] <hololeap> is there a way to check from within a project (possibly using CPP) if a build is using dist or dist-newstyle?
[22:47:30] *** Quits: olle (~olle@i5E866D96.versanet.de) (Ping timeout: 272 seconds)
[22:48:36] <geekosaur> hm. isn't that basically cabal v1 vs. cabal v2?
[22:48:42] *** Quits: deadmarshal (~deadmarsh@95.38.114.155) (Ping timeout: 256 seconds)
[22:48:57] <hololeap> pretty close. Setup.hs also uses dist
[22:49:08] <geekosaur> that's more or less cabal v1
[22:49:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[22:50:13] <hololeap> I'm mucking around with fixing the environment for doctests and I need to know if it's dist or dist-newstyle. I could just check to see if one or the other exists
[22:51:15] <hololeap> but being able to know exactly where the build directory is would be nice
[22:51:24] <hololeap> s/is would be/would be
[22:51:41] <hololeap> wait no :/
[22:52:10] *** Joins: merijn (~merijn@c-001-002-004.client.esciencecenter.eduvpn.nl)
[22:53:03] <sclv> hololeap: what doctest package are you working on in particular/
[22:53:20] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[22:55:20] <Franciman> monochrom: thanks for the «why functional programming matters» paper
[22:55:22] <Franciman> it's juicy
[22:55:52] <[exa]> justsomeguy: internally the PDF is usally in postscript, which will contain something like `go to 524,6264 and start making letters there` for the paragraph indent, instead of `got to 2345245,24234 and start making letters there`... so just taking a source and re-typesetting is probably gonna be easiest :D pdf2text may help if author doesn't respond
[22:55:57] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[22:56:13] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:56:35] <hololeap> sclv: I'm not sure what you mean, but this is what I'm working on: https://github.com/dhall-lang/dhall-haskell/pull/2383/commits/6e9b65ffcbcafe78493d3629f15eaf5804ccf283
[22:58:31] <hololeap> I made the assumption that it would be using dist, forgetting that most CI uses dist-newstyle: "-package-db=" ++ prefix </> "dist/package.conf.inplace"
[22:59:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[22:59:33] <sclv> I thought that the cabal-doctest tool would figure out that stuff for you?
[23:02:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[23:03:06] <hololeap> there was some problem problem I ran into when using Build_doctests.flags ... I had to slim it down, but I'm not remembering exactly why I did that
[23:03:36] *** Joins: maxime_ (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[23:03:47] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325)
[23:03:48] *** Joins: vicfred (~vicfred@user/vicfred)
[23:03:48] <hololeap> Oh, it's because dhall has a custom doctest that skips certain modules, and the default Build_doctests.flags includes all of them
[23:04:14] *** Quits: vicfred (~vicfred@user/vicfred) (Remote host closed the connection)
[23:04:37] *** Joins: vicfred (~vicfred@user/vicfred)
[23:06:13] *** Quits: maxime__ (~maxime@2a01cb0883359800f9c64cc16050cef5.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[23:08:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:11:16] <sclv> ah, makes sense!
[23:12:23] <justsomeguy> Thanks [exa] :^)
[23:14:03] *** Quits: jao (~jao@static-68-235-44-54.cust.tzulo.com) (Remote host closed the connection)
[23:14:59] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[23:16:17] *** Quits: xff0x (~xff0x@2001:1a81:5288:ea00:43ab:35e6:a5cd:7882) (Ping timeout: 240 seconds)
[23:17:53] *** Joins: xff0x (~xff0x@2001:1a81:5288:ea00:43ab:35e6:a5cd:7882)
[23:20:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[23:21:07] *** Joins: jao (~jao@static-68-235-44-54.cust.tzulo.com)
[23:23:53] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:26:06] *** Quits: merijn (~merijn@c-001-002-004.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:27:47] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[23:28:04] *** Joins: prolic (~prolic@181.122.131.227)
[23:29:23] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[23:32:00] *** Quits: kuribas (~user@ptr-25vy0i7awh2t1unux26.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:34:06] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Remote host closed the connection)
[23:34:30] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:24] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:58] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[23:39:00] *** Joins: olle (~olle@i5E866D96.versanet.de)
[23:42:23] *** Joins: machinedgod (~machinedg@24.105.81.50)
[23:44:07] *** Joins: maxime__ (~maxime@2a01cb08833598002d961177afb4f0f1.ipv6.abo.wanadoo.fr)
[23:44:47] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:f425:fffb:4465:6325) (Read error: Connection reset by peer)
[23:46:49] *** Quits: maxime_ (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[23:47:57] *** Quits: shailangsa (~shailangs@host109-159-108-227.range109-159.btcentralplus.com) (Ping timeout: 256 seconds)
[23:50:11] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[23:50:21] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[23:50:29] *** Joins: prolic (~prolic@181.122.131.227)
[23:50:35] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:54:24] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[23:54:41] *** Joins: prolic (~prolic@181.122.131.227)
[23:54:50] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b)
[23:56:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
