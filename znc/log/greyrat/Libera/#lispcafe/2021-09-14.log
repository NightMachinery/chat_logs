[00:01:18] <moon-child> you can still adjust the size either way, the arrow just points in one direction.  Even if it were a double-headed arrow, though, it could still be misoriented
[00:01:39] <ln43> and yes, defmethod for example is exported as aymbol by the CL package so maybe the best alternative would be define a new package and inside that redefine the symbol
[00:02:48] <gilberth> ln43: What for? Do you have too much time on your hands? What's next? See that the program works with Lisp 1.5?
[00:03:27] <moon-child> gilberth: are you not attempting to compile all of common lisp to a similarly small primitiveset? :)
[00:03:32] <ln43> yes right...it's not useful
[00:04:45] <ln43> no i mean my attempt
[00:05:24] <gilberth> moon-child: Yes, that's one of my pet projects. But I know what a package is for. :-) And besides: I want CL on my PostScript printer. And on my TTL, yet to be build, CPU eventually.
[00:06:01] <moon-child> 'do as I say, not as I do'
[00:07:12] <gilberth> moon-child: Well, I for one usually do my home work.
[00:16:12] <ln43> now the code in uiop from asdf is a pleasure to read
[00:16:35] <ln43> anyway i was looking at cl-mop and closer-mop before
[00:16:54] <ln43> maybe i should try to understand if it's the case to use them
[00:22:26] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[00:56:03] <pjb> Well you cannot redefine a symbol. Assuming you didn't import, use the package that exports it, or that you shadowed it, you can only intern another symbol with the same name, and use it in a new definition.  
[00:57:46] <gilberth> ln43: Why don't you get a cloe?
[00:59:46] <moon-child> pjb: I assume they meant 'shadow'.  But also, UNINTERN?
[01:01:38] <moon-child> (though obviously you cannot unintern symbols in cl:)
[01:02:55] <pjb> moon-child: yes, to shadow being a verb, conjugated to the past, that gives shadowed.
[01:08:51] <gilberth> This is interesting TFM files contain some metrics wrt to math typesetting like sub/superscript position and the relative position of an over bar and the numerator and denominator. I wonder if, when I adjust that I could force TeX to do math typesetting on an essential character grid for plain text by tweaking that?
[01:10:53] <gilberth> Has Maxima TeX output? Nah, I don't care as I have little use for it.
[01:11:02] <moon-child> maxima does have plaintext output though
[01:11:48] <moon-child> https://0x0.st/-xys.png
[01:11:50] <gilberth> Sure, but no nice typeset (graphical) output as far as I know.
[01:12:38] <moon-child> oh--I thought you wanted output on a text grid
[01:13:02] <moon-child> graphical output would be cool 
[01:15:53] <gilberth> Well, it would be nice, if TeX could do that, too. But not particular useful. However I want to tweak metrics so that I get typesetting on a grid for recovery of the text, albeit not for math. I was dumping my thought here. And yes, as I implemented the paragraph typesetting algorithm for Closure once, I could as well imagine having TeX output to a CLIM stream pane. Would be nice.
[01:16:14] <moon-child> ah, I see
[01:18:10] <gilberth> The latter is pretty feasible. Just capture what would be output to the DVI and display it in the stream pane. For bonus points don't use the TeX fonts, but whatever native fonts your platforms happens to have.
[01:20:23] <gilberth> OTOH hand TeX only has 7-bit characters and you'd want Unicode these days.
[01:21:23] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[01:25:51] <moon-child> xetex supports unicode and ttf fonts.  But it is in c, so probably harder to run in lisp
[01:26:38] <gilberth> Yep, I'd need a full C compiler. And a C runtime.
[01:28:33] <gilberth> First the Pascal runtime is tiny and TeX also uses a pretty small subset of Pascal. There aren't any pointers, no struts, no dynamic memory, just a big array of "memory words". And lots of macros. The subset is more a portable assembler than anything else.
[01:33:20] *** Quits: vats (~vats@103.70.83.191) (Remote host closed the connection)
[02:37:13] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[02:51:37] <gilberth> "This page intentionally left almost blank." :-)
[02:57:47] *** Joins: sm2n_ (~sm2n@user/sm2n)
[03:00:10] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 260 seconds)
[03:05:36] <hayley> https://www.reddit.com/r/rust/comments/pnemzn/rust_vs_tla/ bruh
[03:06:12] <hayley> "Does the concurrency safety provided by Rust make redundant the analyses provided by formal verification tools" PFFFFFT no
[03:08:43] *** Quits: sm2n_ (~sm2n@user/sm2n) (Remote host closed the connection)
[03:09:10] *** Joins: sm2n_ (~sm2n@user/sm2n)
[03:10:13] *** Quits: sm2n_ (~sm2n@user/sm2n) (Remote host closed the connection)
[03:10:46] *** Joins: sm2n_ (~sm2n@user/sm2n)
[03:11:43] *** Quits: sm2n_ (~sm2n@user/sm2n) (Remote host closed the connection)
[03:11:58] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[03:12:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:20:18] * hayley goes to class. Oh, also good morning everyone!
[03:20:45] <hayley> gilberth: wxMaxima does some typesetting, and IIRC Maxima can output TeX?
[03:20:56] <hayley> https://maxima.sourceforge.io/docs/manual/maxima_72.html
[03:20:57] -ixelp- Functions and Variables for TeX Output (Maxima 5.45.0 Manual)
[03:32:57] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[03:43:14] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[03:45:13] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[03:49:47] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Ping timeout: 268 seconds)
[04:16:34] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[04:23:01] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:26:10] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[04:32:29] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[04:37:29] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Ping timeout: 268 seconds)
[04:45:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:46:31] *** Quits: random-nick (~random-ni@87.116.183.93) (Ping timeout: 268 seconds)
[04:50:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:09:49] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[05:11:19] *** edgar-rft is now known as Emacs-Lisp
[05:11:42] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Remote host closed the connection)
[05:11:57] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[05:11:57] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Client Quit)
[05:12:23] *** Emacs-Lisp is now known as edgar-rft
[05:16:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[05:16:54] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:38:51] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[05:56:12] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Quit: Leaving)
[06:27:12] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[06:29:10] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[06:31:39] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:35:16] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[07:02:36] *** Joins: sm2n (~sm2n@user/sm2n)
[07:26:44] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[07:43:49] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:55:41] <gilberth> Hmm, some fonts are somehow part of the core^Wfmt file and read again. And there is no standard way to bind logical host translations either. I don't want to tamper with my TeX in CL installation, but still want to feed fake metrics to TeX.
[08:11:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[08:18:54] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:19:51] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[08:20:12] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:32:00] *** Joins: semz (~none@user/semz)
[08:38:41] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:59:03] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[09:12:56] *** Joins: ln43 (~ln43@user/ln43)
[09:13:54] <ln43> anyway to install mcclim i have the impression that at lot more dependencies are required respect than the ones listed here: https://github.com/robert-strandh/SICL
[09:14:10] <ln43> acclimation, stealth-mixin, mcclim
[09:14:13] <dave0> maw
[09:14:16] <ln43> and i don't know whatever else
[09:14:23] <ln43> hi dave0
[09:14:29] <ln43> do you have sicl ?
[09:14:30] <dave0> hey ln43 
[09:14:34] <dave0> nope?
[09:14:39] <ln43> mcclim ?
[09:14:53] <dave0> nope
[09:14:56] <ln43> ops
[09:14:59] <ln43> why not ?
[09:15:21] <dave0> i don't know lisp!
[09:15:42] <ln43> i was intrigued by the modularity of that CL implementation 
[09:16:13] <ln43> so i could "detach" all what i need and "reattach" when required
[09:16:55] <ln43> anyway i'm not sure that on windows it will install smoothly
[09:17:07] <ln43> but ok, i'm using Portacle as always
[09:18:18] <ln43> dave who knows something is already passed away ... generally : )
[09:19:19] <ln43> ... he/she who ...
[09:23:17] <ln43> ok... sicl is compiling
[09:30:15] <kakuhen> mcclim requires a ton of stuff if you install it from quicklisp, but it compiles quickly anyway
[09:30:58] <kakuhen> considering that mcclim is arguably a full fledged UI toolkit, I'm impressed it isn't heavier than it already is
[09:31:01] <moon-child> one would hope so, given the name
[09:31:33] <hayley> If it was heavier, loading it would be anti-CLIMactic.
[09:32:09] <kakuhen> (play "drum-sting.wav")
[09:32:33] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[09:33:05] <kakuhen> oh also im very slow to think; i finally understood what moon-child meant
[09:46:22] * hayley uploaded an image: (157KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ktBTKJgKzpMtNpuHUtUqJADp/average-lisp-shop.jpeg >
[09:49:14] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 265 seconds)
[10:16:30] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[10:16:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:21:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[10:23:55] *** Joins: sm2n_ (~sm2n@user/sm2n)
[10:26:18] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 268 seconds)
[10:32:18] <kakuhen> this reminds me of the whole drama involving some password manager
[10:32:43] <kakuhen> people were complaining that the windows and linux versions weren't always on-par with the mac version, so they eventually made the entire program an electron program
[10:32:56] <kakuhen> and the program became noticeably slower, but they claimed "akshually its faster because our backend is rewritten in rust :)"
[10:33:06] <kakuhen> 1password it was called I think?
[10:33:07] <hayley> 🤔
[10:33:19] <hayley> Sounds about right.
[10:33:23] <kakuhen> but anyway, now all platforms get to have an equally shit experience with this passwd manager
[10:33:33] <kakuhen> but that's ok cuz the backend was rewritten in rust, therefore it is super fast now
[10:33:36] <kakuhen> and SAFE
[10:33:44] <hayley> 🤔🤔🤔
[10:34:06] <kakuhen> https://twitter.com/1Password/status/1428336271689191431
[10:34:32] <kakuhen> oh wait wrong tweet
[10:34:32] <kakuhen> https://twitter.com/1password/status/1425478444503162895
[10:34:46] <kakuhen> here you go; the one where they claim it's ok that 1password is an electron app because "we have a really fast backend now :)"
[10:48:31] <hayley> https://www.youtube.com/watch?v=8TEAMHgrxi0
[10:48:32] -ixelp- JJ Burnel - Crabs - YouTube
[10:58:50] <mfiano> https://github.com/mTvare6/hello-world.rs
[10:59:32] *** Joins: shka (~herr@109.231.62.239)
[11:02:07] <moon-child> knockoff gnu hello
[11:02:11] <mfiano> "Many people try to compare rust to Go, but this is flawed. Go is an ancient board game that emphasizes strategy. rust is more appropriately compared to Chess, a board game focused on low-level tactics." :)
[11:02:41] <hayley> .clone().clone().unwrap().clone().to_owned().clone().unwrap()
[11:04:04] <hayley> mfiano: It is 2021 and Crabs have not managed to successfully port NonBlockingHashMap still
[11:06:50] <mfiano> CI is still probably compiling
[11:07:51] <hayley> True, it took a minute of hanging my computer to compile a fucking wrapper over multiple locks and smaller hash tables.
[11:08:27] <mfiano> But don't worry, a smart Rust developer told me it compiles down to machine learning
[11:09:17] <hayley> They also said it's a whole three times faster than CPython.
[11:10:00] <hayley> Nah, three would be impossible. Try two: https://blog.logrocket.com/rust-vs-python-why-rust-could-replace-python/
[11:10:01] -ixelp- Rust vs. Python: Why Rust is gaining in popularity - LogRocket Blog
[11:11:27] <hayley> "It took Rust 4.6 microseconds and Python 8.6 microseconds to perform similar operations on the same machine without any optimization techniques."
[11:12:44] <mfiano> "It compiled so it must be fast. I know how to please the borrow checker with .clone!"
[11:13:19] <dave0> i wish i had an extra 4 microseconds in my life
[11:13:24] <hayley> PCJ also informed me about someone who used strings as enums and wondered why it was slower in Rust.
[11:13:43] <hayley> https://www.reddit.com/r/programmingcirclejerk/comments/pmpmp7/tried_to_rewrite_a_c_nes_emulator_in_rust_now_it/
[11:13:45] -ixelp- Tried to re-write a C++ NES Emulator in Rust, now it runs more than 5 times slower (Yes I'm compiling with --release) :  [...]
[11:14:06] <moon-child> i mean, it's funny, but obviously there's something wrong with the benchmark.  1. not using pypy.  2. rust version unoptimized build.  Probably because in both cases the optimizer took out the benchmark entirely
[11:14:15] <moon-child> and they were too stupid to figure out how to make it not do that
[11:15:13] <semz> it's amazing how bad people are at benchmarking
[11:15:15] <hayley> I honestly can't fathom how the Rust compiler creates such slow code for debug builds though. Like, not even (optimize (safety 3) (debug 3) (speed 0))'ed code is that slow.
[11:16:12] <moon-child> 'Rust does not allow different data types to operate on each other'
[11:16:37] <hayley> "Put micro-trust in a micro-benchmark" - probably not me
[11:17:12] <semz> the language benchmark game is a riot too
[11:17:41] <hayley> "Not NonBlockingHashMap don't care, Lisp 1-0 Rust" - probably me
[11:17:49] <semz> I think Python is one of the fastest contestants for the regex test there because it does FFI calls to libpcre
[11:18:05] <hayley> semz: You mean the SIMD instruction memorization game?
[11:18:08] <semz> yeah
[11:18:41] <mfiano> I think it's mostly Rust programmers don't know how to be programmers. They are too caught up in the thrill of satisfying the compiler's subset of validity with deep copying large structures, reference counting, and manual pointer reinventions.
[11:18:55] <hayley> Once I told someone to go fuck themselves for using it to trash talk SBCL, and I got banned from r/lisp for a month. Still don't regret it.
[11:19:46] <hayley> Only I'm allowed to complain about the SBCL GC, for example /s
[11:21:59] <hayley> mfiano: Once someone asked me if I knew what "fearless concurrency" meant. I asked them if they knew what "concurrency" meant.
[11:22:44] <mfiano> :)
[11:23:33] <hayley> (Hint: it involves multiple processes being able to run at the same time. Locking everything, by definition, does not allow multiple processes to run at the same time. Thus you reduce the scope of locks. Thus freedom from "data races" is kinda meaningless, because you now need to be able to reason about the intermediate states you just produced for yourself.)
[11:25:09] <mfiano> I actually heard this recently. I'm not sure what to think of it. There is advice in crabland floating around that you can override Drop for your large structures and let it free on a background thread.
[11:25:36] * hayley uploaded an image: (237KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/nvLRkNFxWfiKZbSsAXpPaFcz/gencgc.png >
[11:25:58] <semz> another funny benchmark thing I've repeatedly seen is to conveniently use 64-bit integers for input so that C can use the naive implementation while every language with type tagging gets fucked
[11:26:21] <mfiano> hayley: haha
[11:26:46] <hayley> IMO you should be able to keep unboxed data most of the time. That said, short of cryptography and other bit diddling algorithms, having exactly 32 or 64 bits is overrated.
[11:28:41] <hayley> 2^60 is a bit over one quintillion, so you have to try hard to have a number in that 60 to 64 bit range.
[11:30:03] <hayley> (Back to the definition of concurrency, my thesis is thus that data races are not your biggest problem developing concurrent algorithms. Getting fine-grained locking to work is a bigger problem, and the only tools for that are called model checkers.)
[11:30:09] <mfiano> I'm not sure what you're implying tbh
[11:30:31] <mfiano> I use packed representations of word-sized integers frequently when I need to store things in contiguous arrays for example
[11:30:49] <hayley> Sure.
[11:31:54] <hayley> It was mostly going off what semz said, that I think data which overflows e.g. a 62-bit fixnum but not an unboxed 64-bit word is uncommon.
[11:32:27] <dave0> i once packed seven 9-bit integers into one 64-bit integer
[11:33:23] <mfiano> Oh I see
[11:33:23] <hayley> (What's that Spongebob meme that goes "We did it, we killed the worm" and then there's a larger worm they notably did not kill?)
[11:34:53] <mfiano> Also regarding non blocking hash tables...
[11:37:55] <mfiano> In my game engine I use a fair amount of hash tables, and if it weren't for them I could parallelize more work per frame as I'm core-bound now. I tried SBCL-specific locking table access, as well as your fork of Luckless...both are much slower which is odd, because there is a lot of work that can be done in parallel so not really sure where time is spent. I gave up some months ago though.
[11:38:36] <hayley> Hm, I see.
[11:42:38] <mfiano> Admittedly I was just using lparallel. Not sure if it does any work stealing etc under the hood
[11:43:06] * hayley uploaded an image: (1244KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qilmqWWPoIaZYbNGTyqxKHuU/worm.jpg >
[11:43:44] <hayley> I think it does, but then the granularity of work (i.e. how much you dequeue at a time) begins to matter.
[11:46:26] <hayley> PMAP at least lets you provide a :parts argument, which apparently defaults to the number of workers, so assuming you only do one PMAP at a time, there is no work stealing.
[11:49:06] <mfiano> I dunno. I sort of gave up on that engine anyway.
[11:50:00] <mfiano> It acrued too much technical debt due to choosing to write Lisp like C (no generics, structs everywhere, type annotations and reliance on SBCL static type inference, etc
[11:50:04] <mfiano> )
[11:50:04] <hayley> FWIW I might rewrite the Luckless hash table some day, since 42nd-at-Threadmill is closer to Java performance with somewhat better factoring (in my opinion).
[11:50:20] <mfiano> I have since started designing a generic one.
[11:51:51] <mfiano> Though I suppose PCL probably uses tables in places, so I might be screwed similarly and will have to MOP up the blood
[11:51:56] <hayley> Or maybe not, I'm really not sure what to do. Without spending hours re-watching the one lecture on hash table design, it was probably the best choice to do a line-for-line translation.
[11:52:52] <hayley> I suspect PCL basically only reads from hash tables and so locking isn't needed. Fun fact: SBCL and Clozure both have half an implementation of NBHM each. (Clozure uses it for the user-facing HASH-TABLE even.)
[11:52:57] <moon-child> what's the point of having both?
[11:54:01] <hayley> Threadmill isn't entirely lock free (it effectively has lock shards while resizing), and uses SIMD-accelerated probing which turned out to be a smaller win than expected.
[11:54:38] <moon-child> I thought that was because locking was faster than not, though
[11:55:26] <hayley> It was because I didn't understand the resizing logic without locking, really.
[11:56:37] <moon-child> ahh
[11:57:07] *** Joins: ln43 (~ln43@user/ln43)
[11:57:53] <hayley> The rest of the library was done by getting the algorithms from the lecture and not from Java code.
[11:59:42] <ln43> hayley hello...
[11:59:56] <hayley> Hi ln43
[12:00:08] <ln43> i was trying to install sicl but using (defparameter *b* (boot)) i get: Loading file #P"e:/Users/NigroL/portacle/all/quicklisp/local-projects/Acclimation/language-japanese.lisp" into E5
[12:00:17] <ln43> why is it required the japonese language ?
[12:00:31] <ln43> *japanese ...
[12:00:57] <hayley> Same as why it requires English.
[12:01:53] <mfiano> That whole project is for providing localization support...
[12:02:00] <ln43> ak, ok... and how try to solve ?
[12:02:14] <mfiano> Solve what?
[12:04:27] <hayley> While Luckless scales about linearly, which is good, the Java version is consistently 50% faster or so.
[12:05:56] <mfiano> More vectorz!
[12:09:13] * hayley thinks
[12:09:14] <hayley> Java doesn't run asserts by default, right?
[12:10:50] <hayley> Yeah, they only run with -ea. But all the assert statements were translated to ASSERT forms, which always run.
[12:11:40] <kakuhen> mfiano: I love that Go statement
[12:11:56] <kakuhen> One thing that frustrates me about 2021 is how me mentioning Go now makes people think of the stupid programming language rather than "Go? what's that?"
[12:12:14] <kakuhen> now I have to say something like "Go as in 囲碁 not Golang"
[12:12:34] <hayley> It's now one iota faster.
[12:14:26] <hayley> n.b. the NBHM is just one giant vector, so I can't really add more vectors sadly.
[12:15:12] <kakuhen> (also imo Go is much more profound and harder to understand than (Western) Chess)
[12:15:35] <kakuhen> easy to learn, hard to master; whereas chess is hard to learn, hard to master, at least to me.
[12:16:30] <dave0> i played online checkers where normal pieces can jump backwards, and king pieces can move over many squares (like a bishop in chess)
[12:17:00] <dave0> it's crazy
[12:19:28] <hayley> It seems the pro gamer strat of disabling assertions and noticing that ASDF decided not to recompile anything, made it a bit better.
[12:24:08] <kakuhen> i managed to get windowmaker running in xquartz somehow and it really doesn't like CJK fonts it seems
[12:24:13] <kakuhen> everything's a square
[12:24:52] <kakuhen> https://a.uguu.se/DONYcHKY.png
[12:25:52] <White_Flame> that's one way to avoid localization
[12:26:14] <White_Flame> just speak in squares
[12:28:24] <kakuhen> damn, looks like I can't open GNUstep app bundles like normal ones
[12:28:36] <kakuhen> they just crash on startup; I should know better anyway >.<
[12:29:07] <White_Flame> that's one way to avoid bugs.  Just crash before getting to them
[12:29:10] <kakuhen> you have to ruin a perfectly good Objective-C codebase with #ifdefs if you want a GNUstep software to run fine on OS X anyway
[12:29:18] <kakuhen> they call them "Renaissance programs"
[12:31:24] <hayley> I got it closer up to 6 threads, but once we enter hyperthreading space, Java wins out somehow.
[12:32:47] * hayley enables (safety 0) because she cannot be bothered to eliminate the integer type checks any other way.
[12:32:51] <dave0> coloured squares
[12:34:13] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 250 seconds)
[12:34:31] <dave0> hayley: i like that principle... fix compiler warnings by turning them off
[12:34:45] <hayley> Seriously, that cured my hyperthreading problems?
[12:35:10] <moon-child> lol
[12:36:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:12] * hayley uploaded an image: (27KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XEXNnFAPxfcKayipbeoNvTPn/luckless.png >
[12:36:21] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:36:36] <hayley> Close enough?
[12:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:12] <hayley> Technically I still have permission from the course leader to use the student server for concurrent hash table experiments.
[12:51:20] <hayley> Well, now hyperthreading no longer wants to play nicely.
[13:14:04] <hayley> OTOH it's really consistently about 80% the speed of Java right now. So hyperthreading isn't any worse really.
[13:16:04] *** Joins: makomo_ (~makomo@user/makomo)
[13:19:40] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:38:09] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[13:45:42] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:50:28] <gilberth> Good morning #lispcafe!
[13:50:43] <ln43> good morning gilberth
[13:51:07] <gilberth> It's interesting to note that all the binary files TeX uses lack a version number.
[13:51:41] <gilberth> Also no magic number either.
[13:52:11] *** Joins: selwyn (~selwyn@user/selwyn)
[13:52:43] <hayley> Good morning gilberth!
[13:53:33] <gilberth> hayley: Hello! Good to know that Maxima has TeX output. I may want to play with it, when bored.
[13:54:57] <hayley> However, decentralise2 runs at about 1/4 the speed on Luckless. I suppose, really, I should use a custom hash table if I know that the size is fixed.
[13:55:37] <hayley> Or even a hash set, which requires less synchronisation.
[13:58:04] <hayley> But in any case, the main problem is that we delete things all the time, and concurrent hash tables hate that.
[13:58:11] <hayley> At least the NBHM derivatives do.
[14:02:42] <mfiano> Makes me wonder how a persistent hash map would do
[14:03:48] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[14:05:37] <hayley> Tried it, it'd do slowly.
[14:06:02] <hayley> My first test used a ctrie to no avail.
[14:06:30] <mfiano> did you see the Areias/Rocha paper?
[14:06:51] <hayley> Which paper?
[14:07:14] <mfiano> "Experimental results show that our proposal is quite com- petitive when compared against other state-of-the-art proposals implemented in Java"
[14:07:26] <mfiano> https://www.dcc.fc.up.pt/~ricroc/homepage/publications/2017-SBAC-PAD.pdf
[14:07:33] <hayley> Interesting.
[14:17:42] <mfiano> Hmm, was a pretty interesting read.
[14:17:51] <mfiano> Seems easy enough to implement too
[14:20:31] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[14:22:07] <hayley> Still, if I have a hash set with a fixed size, it is just a case of probing and CASing somewhere.
[14:23:37] <hayley> As I figured the version numbers I have kept around from decentralise1 are completely nonsensical in the context of a distributed hash table, it can just be a set.
[14:30:59] <hayley> Well, not really, I still want to attach a timestamp so that I know when to signal a timeout. But then I can just make a cons of (name . deadline) or something.
[14:35:50] <hayley> Reminds me of this article https://medium.com/@tylerneely/fear-and-loathing-in-lock-free-programming-7158b1cdd50c which argues that safe lock-free algorithms are too hard to write.
[14:35:51] -ixelp- Fear and Loathing in Lock-Free Programming | by Tyler Neely | Medium
[14:36:34] <mfiano> I try not to read medium articles xD
[14:36:45] <hayley> But then again, literally anything is hard to write safely in C++.
[14:37:32] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:38:33] <dave0> i like it when they overload = so that    x=x;    has side effects
[14:38:42] <hayley> "Artisanal lock-free algorithms are symptomatic of a long chain of bad decisions. They are almost impossible to correctly write. As far as I can tell, there are only two people who actually know how to write them."
[14:38:46] <hayley> 1. Cliff Click 2. Me
[14:40:11] <hayley> I would say a lock-free algorithm is no harder to write than an algorithm which uses locks but doesn't lock everything in one go.
[14:40:38] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[15:11:26] <hayley> Conceptually, an operation CAS(location, old, new) could be rewritten as { grab global lock; if location = old then location <- new; release global lock } which is not lock-free really.
[15:11:42] <hayley> It's just fortunate that computer hardware generally doesn't grab a global "lock" to CAS.
[15:18:58] <dave0> hayley: netbsd has something called RAS restartable atomic sequences... it is a little bit of code like you wrote   LOAD location COMPARE old IFEQUAL STORE new ENDIF   but if an interrupt happens between one of those instructions, the program counter is reset to the start of the sequence
[15:19:29] <dave0> so it is quasi-atomic
[15:19:40] <dave0> don't know if it counts as lock-free
[15:20:45] <dave0> i guess it's a bit like a transaction... if the code is interrupted, it rolls back to the start and tries again
[15:20:56] <dave0> but no locks
[15:22:05] <dave0> oh and it might be uniprocessor
[15:24:59] *** mfiano is now known as help
[15:25:06] *** help is now known as mfiano
[15:25:33] * hayley writes a very specialised hash table.
[15:33:36] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:38:10] <shka> hayley: how will you call it?
[15:38:18] <shka> SpecHash?
[15:38:22] <shka> :-)
[15:38:25] <hayley> shka: decentralise2/Utilities/churn-table.lisp
[15:39:00] <shka> and where is the repo?
[15:39:38] <hayley> It only makes sense in context. The context is that exactly one thread adds entries, whereas multiple threads can remove entries. The size is also fixed.
[15:39:55] <shka> oh, so it is like cache?
[15:39:59] <hayley> https://gitlab.com/cal-coop/netfarm/cl-decentralise2 but I haven't added it, I would need to do a lot of hacking before it is a useful optimisation.
[15:40:00] -ixelp- Cooperative of Applied Language / The Netfarm Suite / cl-decentralise2 · GitLab
[15:40:27] <hayley> Sort of? It stores the set of names of requests we sent off.
[15:40:38] <shka> i see
[15:41:01] <pjb> hayley: well, the hardware do actually grab a global lock: the memory bus!
[15:41:17] <shka> i often use a fixed size hash-table implemented as simple-array of simple-arrays 
[15:41:25] <hayley> pjb: Can I tell you about our lord and saviour MOESI?
[15:41:28] <shka> for cache
[15:41:46] <pjb> MOSI MISO?
[15:42:02] <hayley> https://en.wikipedia.org/wiki/MOESI_protocol
[15:42:33] <shka> it works by using the inner array as the bucket
[15:42:56] <hayley> I see, yes.
[15:43:15] <shka> the trick is that when the element was found in the bucket, move it one place up in the bucket
[15:43:18] <pjb> ok.
[15:43:32] <shka> just one swap
[15:43:36] <hayley> This table just uses a flat vector with somewhere between a 25% and 50% load factor (rounding up to a power of 2), and a CONS cell to let me CAS in a key and value in one go (portably).
[15:44:14] <shka> and if key was not found, replace the last bucket slot (if there is no space left)
[15:44:28] <hayley> Right.
[15:44:53] <shka> this way linear prob is kinda funny, because it performs better for the most frequently accessed elements
[15:45:00] <shka> which is what you want usually
[15:45:07] <hayley> Usually I would not use a CONS for indirection, but I really need fast concurrent removal.
[15:45:11] <hayley> .oO(Splay table?)
[15:46:03] <shka> hayley: you can instead store secondary bitmask indicating that given position in the array is empty
[15:46:10] <shka> or not empty
[15:46:53] <hayley> That has to be kept consistent with the entry though, so just having the empty entry be NIL is easier.
[15:47:06] <shka> that also works
[15:47:50] <shka> anyway, i kinda like to use 32 long vectors with 32 bit fixnum for this kind of stuff
[15:47:57] <shka> and link those together 
[15:48:14] <shka> so struct is: pointer to next, bitmask, array
[15:48:27] <shka> requires considerable less memory then just cons cells
[15:48:36] <shka> but again, in your case, memory is not a problem
[15:48:45] <shka> because the table has maximum capacity
[15:49:11] <shka> memory indirection between cons cells could be a problem though 
[15:49:32] <shka> but again, this can fixed in other ways
[15:49:49] <hayley> Sure, but the alternative is to use Cliff Click's resize-to-remove-dead-keys approach.
[15:50:02] <hayley> Or CMPXCHG16B but that's not portable.
[15:50:09] <shka> for instance having 2D array, first column value, second column pointer to next
[15:50:44] <shka> which is essentially a cons cell, but stored in a selected memory chunk
[15:51:02] <shka> s/pointer/index of the next row
[15:51:30] <shka> anyway
[15:51:48] <shka> hayley: cool stuff! i love me some data structures :D
[15:51:52] <hayley> Then I need a lock-free memory allocator, which also isn't fun.
[15:52:03] <shka> nah
[15:52:08] <shka> you need just a free list
[15:52:38] <shka> i mean, if the array is fixed in size 
[15:52:40] <hayley> I guess so. But then what's the difference between a free list and CONS indirection when we only add and remove?
[15:54:15] <hayley> https://www.youtube.com/watch?v=NIzleISU5jw
[15:54:15] -ixelp- Beat the Clock - YouTube
[15:55:44] <shka> hayley: guarantee that lookup will remain mostly the same in terms of memory pages visited
[15:56:26] <shka> you don't control when the cons cell will end up in the memory, performance of linked lists depends on how/when cons cells are allocated
[15:56:28] <hayley> What does removal do? Does it reuse a cons somehow?
[15:56:42] <hayley> Or rather, removing from the table, putting the entry back on the free list.
[15:56:47] <shka> yeah
[15:56:50] <mfiano> yeah much more likely that the freelist chain will be some level of cache
[15:56:58] <mfiano> be in*
[15:57:24] <shka> anyway, linked list allocated all of the cons cells in one go is pretty good
[15:57:43] <shka> linked list with cons cells allocated on a long time span can be pretty bad
[15:57:57] <hayley> Where do you hold the cons cell when it's not on the free list?
[15:58:11] <shka> well, you don't 
[15:58:30] <shka> you can implement "cons cell" as an array 
[15:58:39] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[15:58:54] <shka> i mean, array with first column as CAR and the second as CDR
[15:59:05] <shka> and as many rows as you would need cons cells
[15:59:15] <hayley> Where you do hold the index?
[15:59:30] <shka> index to what?
[15:59:38] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[15:59:51] <hayley> The index of the "cons cell" in the array.
[16:00:00] <shka> right
[16:00:28] <shka> well, you gonna need index to the HEAD somewhere, but the index to the CDR is what CDR column is for
[16:01:13] <mfiano> I employed an array-based freelist in my implementation of the slotmap data structure. you can check it out if you want.
[16:01:14] <shka> so to probe, you first take HEAD index, then grab the CDR, move to the position, grab the CDR, move to the position...
[16:01:22] <shka> simply use array indexes as pointers
[16:02:11] <shka> in a effect you are getting forward linked list of a fixed capacity 
[16:02:27] <mfiano> https://github.com/mfiano/algae/blob/master/src/data-structures/slot-map.lisp
[16:02:46] <mfiano> there's also this which is different and probably more understandable https://github.com/mfiano/algae/blob/master/src/data-structures/identifier-pool.lisp
[16:03:33] * hayley reads
[16:03:37] <shka> mfiano: it is like the ECS
[16:03:46] <shka> of the video games
[16:03:59] <hayley> This is a prototype map.
[16:04:10] <shka> i love using ground electrical symbol as indicating termination :D
[16:04:14] <shka> http://bitsquid.blogspot.com/2011/09/managing-decoupling-part-4-id-lookup.html
[16:04:19] <shka> it is funny
[16:04:21] <mfiano> Yes, that is typically called an arena allocator
[16:04:27] <hayley> https://bibliography.selflanguage.org/_static/implementation.pdf 3.1 Maps
[16:04:49] <mfiano> Most ECS's use that for generational id's of entities
[16:04:53] <shka> yeah
[16:05:22] <shka> also, for avoiding dangling references 
[16:05:24] <shka> and stuff
[16:05:29] <shka> but whatever
[16:05:38] <hayley> |:<
[16:05:39] <hayley> 🤔
[16:05:48] <shka> it seem that mfiano explained this better then i could
[16:05:55] <shka> but the same idea
[16:06:46] <shka> hayley: hopefully we don't put a wrench into your design process, i personally wanted to help 
[16:07:14] <hayley> Nah, you're good. But slot maps are just prototype OO stuff under a different name.
[16:07:23] * shka has always the purest of intentions, but the outcomes may vary
[16:07:42] <mfiano> I wasn't trying to explain anything, so carry on. I don't even know where their knowledge of freelists begins or ends. I was just pointing out two implementations of them, with the latter being pretty understandable
[16:08:08] <shka> mfiano: yeah, it looks ok to me
[16:08:08] <mfiano> hayley: slotmaps have MANY names
[16:08:26] <mfiano> They are about 30 years old. They were called other things before kids reinvented them several times over
[16:09:28] * hayley counts 2021 - 1991 = 30 years old, give or take.
[16:10:27] <mfiano> They are also very similar to the sparse set data structure.
[16:11:36] <mfiano> Well in some ways anyway
[16:11:45] <mfiano> There is an implementation of that in that repo too
[16:11:49] <hayley> There was "Object Storage and Inheritance for Self" from 1988 but apparently it's not online.
[16:13:18] <mfiano> I forget what the other names for a slotmap are, as its been a year or two since i researched them, but i remember slotmap being the latest name of like 5 for a very old DS
[16:13:47] *** Joins: X-Scale` (~ARM@46.50.0.45)
[16:13:54] <mfiano> It is an interesting tool though. I have very little use for it, but being able to contiguously map over a hash-table-like collection can be useful i suppose
[16:14:12] <mfiano> It is a bit weird though, in that the "key" is generated/returned to you upon insertion
[16:15:22] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[16:15:57] *** Quits: X-Scale (~ARM@46.50.5.253) (Ping timeout: 268 seconds)
[16:15:59] *** X-Scale` is now known as X-Scale
[16:25:22] <mfiano> Heh, that slotmap code is over optimized
[16:25:41] <mfiano> Forgot I wrote a "dynamic array" implementation that it uses
[16:26:22] <mfiano> Which assumes it is more efficient to manually grow a simple-array when needed as opposed to a non-simple adjustable vector
[16:29:09] <mfiano> "slotmap" is very common in Rust gamedev ecosystem, because it is essentially disabling the borrow checker by using your own pointer implementation
[16:29:18] <mfiano> Which is quite comical to me actually
[16:29:23] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/QARzbbmuKvsOUgwnQpgYWtop/randall-smith.jpeg >
[16:29:47] <hayley> Well, Rc even sort of does that. You don't know if you can get a mutable reference without global program analysis,
[16:30:09] <mfiano> Yeah
[16:31:33] *** Quits: santiagopim (~user@90.167.66.93) (Read error: Connection reset by peer)
[16:32:43] <hayley> I was going to say something about how, with no other constraints, picking a lifetime is anti-modular, but some people really do write interfaces which are all refcounted for "ergonomics" apparently.
[16:39:00] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[16:44:47] <mfiano> the amount of Rc and Arc code in Rust is amazing
[16:46:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:46:35] <hayley> Arc<Mutex<HashMap<str, str>>> or smth
[16:47:11] <mfiano> I was incredibly curious about Rust when it was yound, having read a few books and lots of code. That curtiosity degraded severely overtime, until where I am now, where I want my time back.
[16:47:16] <mfiano> young*
[16:49:18] <mfiano> I really question how fast it can truly be with reference counting and pattern matching everywhere in the stdlib even
[16:49:35] * hayley uploaded an image: (314KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/xamXBqRUIrmDtPlIBTbjPHZd/dave-stirner-on-duped-egoists(1).jpeg >
[16:49:36] <mfiano> "match" has quite the overhead over C++ exceptions
[16:50:06] <hayley> Eh, you can compile matching down pretty well. Functional programming people have worked on it for ages.
[16:50:47] <mfiano> I mean Rust's match in particular, is slower than the equivalent C++
[16:50:54] <mfiano> using exceptions
[16:51:07] <hayley> For exception handling, right.
[16:52:09] <hayley> I'd have no idea how to test those, honestly.
[16:54:33] <mfiano> I admit there was a year or so where I tried to solve the two language problem with CL and Rust. It isn't enough to be familiar with your particular hardware and how compilers typically function. There are performance traps everywhere due to the small circle of safety you are confined to
[16:58:30] <shka> mfiano: i personally think that CL model is more general purpose then what Rust has to offer
[16:58:46] <mfiano> Absolutely
[16:58:50] <shka> furthermore, this may be the single most important advantage of CL
[16:59:00] <shka> it is as general purpose as it gets
[16:59:20] <shka> you can do pretty wide assortment of programming with that
[16:59:57] <mfiano> I used to write very high performance CL, over-using structs and type annotations, and in the end, it bought me a little performance, and a lot of extra time when I can't easily extend something without rewriting it (usually completely)
[17:00:47] <mfiano> Now I embrace generics and classes more, and the performance is still acceptable, but the programmer performance is otherworldly (saying that coming from Python a couple decades ago)
[17:03:40] <mfiano> My big transition this year has been trying to make myself more productive, the reason I switched to CL to begin with. I have too many ideas I want to implement, and my time is valuable.
[17:04:06] <mfiano> Can't seem to get rid of these yaks anyway. Can't be bogged down by micro-optimizing
[17:05:07] <hayley> At this point, micro optimization is a procrastination technique for me. And, well, that the other design work I have to do is much less mechanical and more headache inducing.
[17:05:44] <mfiano> It used to be a procrastination thing for me too, which I think.
[17:06:01] <mfiano> The problem is, it makes a project less amenable to change
[17:06:12] <mfiano> No matter how you slice it
[17:06:29] <mfiano> s/which/while/
[17:07:21] <hayley> Right.
[17:07:30] *** Joins: christophergray (~christoph@190.148.53.200)
[17:08:17] <shka> also, you can get 90% of benefits by simply focusing on the hot lops
[17:08:20] <shka> *loops
[17:08:30] <mfiano> I mean for a DS or a math library, yeah, optimizing is probably good. The surface api is unlikely to be affected for such a thing
[17:08:43] <hayley> But a reasonably fast new server would require splitting locks and thus another trip with model checking.
[17:09:04] <shka> mfiano: DS is the prime example of hot loops 
[17:09:41] <shka> and honestly, that's the thing with CL, you can optimize stuff that matters
[17:09:44] <shka> or not
[17:09:50] <shka> your choice my dude
[17:09:58] <mfiano> Right
[17:10:12] <hayley> The fun thing is that hot locks don't come up in profiler output (by default), as the threads sleep and thus aren't recorded.
[17:10:14] <shka> you can even (locally (declare (safety 0))...)
[17:10:23] <shka> it is why CL is so flexible
[17:11:19] <shka> also, this is why i think that CL is a great language for CL
[17:11:21] <mfiano> Yes it's the flexibility and extensibility that really keeps me using it.
[17:11:41] <hayley> But I figure most people don't write highly concurrent networking things, so otherwise there are definitely hot loops to attack.
[17:12:10] <shka> you can have combination of low level and high level, strict and lax, safe and anything goes code
[17:12:11] <mfiano> It's "killer app" is CLOS, which is baked into the language, allowing you to change nearly anything about the language with the MOP, and for everything else, macros.
[17:12:47] <shka> which is great because you can have libraries and your dirty, dirty, interactive sketch in the same language
[17:13:18] <shka> and it even has a decent peformance
[17:13:35] * hayley still doesn't want to think about how to generate an object graph in TLA+. That's off limits.
[17:13:37] <shka> and yeah, extending CL is THE STUFF
[17:13:41] <mfiano> AMOP is a good read (currently reading it again now), and it explains the MOP as a solution to the problem of sacrificing performance for flexibility, which I totally agree with. You can use it to optimize slow parts without losing any flexibility.
[17:15:38] <mfiano> I really enjoy what is sometimes called "additive programming".
[17:16:15] <shka> generic functions are great model
[17:16:19] <mfiano> Designing protocols that encourage new growth via extensions and other acretions, rather than breaking changes.
[17:16:30] <shka> yeah!
[17:16:48] <shka> in vellum, i have generics copy-from, copy-to
[17:17:08] <shka> for instance (vellum:copy-from :csv "~/path.csv")
[17:17:24] <shka> but this method is implemented in a separate system, vellum-csv
[17:17:29] <shka> just like vellum-postmodern
[17:17:36] <mfiano> Nice. Keep in mind that ~ won't be expanded on all implementations :)
[17:17:44] <shka> just an example :D
[17:17:47] <mfiano> I know :)
[17:18:00] <shka> anyway, generic functions allow this kind of natural extension
[17:18:08] <mfiano> Absolutely.
[17:18:17] <shka> you simply can define a new format as a library, 
[17:18:44] <shka> as simple as it goes
[17:19:03] <mfiano> and stealth-mixin is a very nice way to make that even more modular
[17:19:13] <mfiano> (beach's library)
[17:19:34] <shka> yeah
[17:19:51] <shka> even the multiple values is a nice extension point
[17:20:16] <mfiano> Hmm I just had a thought
[17:20:26] <mfiano> This is probably incredibly dumb but it never occured to me before
[17:20:30] <shka> "this function will always returns something, and a specific method may also return a second value indicating something else"
[17:20:30] <hayley> ❌modularity ✅ metamodularity
[17:20:36] <mfiano> We have EQL specialization, right?
[17:20:39] <shka> yes
[17:20:48] <shka> that's how copy-from works
[17:21:53] <mfiano> What if you used #1= to capture a reference to an INSTANCE of a class, and used #1# in an EQL specialized parameter. I am trying to think of a case where that'd make sense
[17:22:12] <hayley> Let me think about it for a sec...
[17:22:25] <hayley> I may have done this to dispatch on strings once.
[17:22:34] <shka> mfiano: redefinition is a bitch though
[17:22:51] <shka> but you can do that with constants
[17:23:22] <hayley> Specifically, something like (let ((s (intern-string))) (defmethod blah ((name (eql s))) (stuff)))
[17:23:53] <mfiano> Yeah sure, you could also store it in the toplevel lexical environment somewhere. I guess I'm just not thinking of a case where such a singleton would be useful
[17:24:27] <hayley> Then to perform string dispatch, you look up the interned string in a hash table, and then call the generic function.
[17:24:57] <shka> mfiano: neither do i
[17:24:58] <hayley> I use it to have extensible "special block" handlers (contrast to special forms in CL).
[17:25:07] <mfiano> Hm
[17:25:19] <shka> though, you can use it as some sort of :before/:after
[17:25:36] <hayley> https://cal-coop.gitlab.io/netfarm/documentation/decentralise2.html#%28idx._%28gentag._73%29%29
[17:25:37] -ixelp- 3 decentralise2
[17:27:12] <mfiano> I'll have to think about this more when I'm not so tired. Was just a random dumb idea prob :)
[17:29:24] <mfiano> Anyway, I spent the last week designing a fairly complicated protocol for part of a new game engine using mixins, until I stumbled on stealth-mixin in #lisp yesterday which shows me the whole thing should be rewritten to be even more modular
[17:30:01] <mfiano> err #commonlisp
[17:30:15] <mfiano> Damn, that habit will never die.
[17:31:09] <hayley> If I had money, I would put a bounty on typing the object->data and data->object functions in any relatively not-niche language. But I don't think it's possible, despite the modularity it provides.
[17:31:46] <mfiano> This protocol is too big to keep in my head or document as its being fleshed out. Wonder if I should use some UML or what...never did anything this complicated before to know what my options are
[17:33:07] <shka> uml is not the most useful thing for lisp
[17:34:01] <hayley> You'd need some funky typeclasses for it. Say, for object->data we have a renderable object and a connection with some transmission element type. (I'll ignore the CLIM presentation type-esque indirection for types still.)
[17:34:03] <mfiano> I never used UML or graphviz or anything to really know.
[17:34:33] <mfiano> That's my problem. This protocol is very wide and deep, and very dynamic due to mixins
[17:34:40] <mfiano> So probably cant bve visualized very easily
[17:35:21] <shka> mfiano: what is helpful for me is to use categorization and category constraints
[17:35:25] <shka> for instance 
[17:35:58] <hayley> Thus for some typeclass, idk, Renderable (type, elementType) we have a method render :: Renderable (t, et) => t -> Connection et -> et? But then the connection argument is stupid and useless without inheritance, so it's just t -> et on the RHS of =>.
[17:36:17] <shka> "This function belongs to the representation layer, representation layer only deals with the data types, without business logic"
[17:36:33] <shka> and the upper layers only use the lower layers
[17:37:10] <shka> in the statistical-learning, i have for instance a model protocol, tree-protocol and the forest-protocol
[17:37:16] <mfiano> shka: That is sort of what I'm doing, but I think I have too few layers currently, and taxonomies are hard for me :(
[17:37:22] <shka> yeah
[17:37:24] <shka> i feel ya
[17:38:54] <mfiano> That does help though. It gives me something to think about improving in my rewrite
[17:39:32] <hayley> My strategy is to split protocols and libraries when they begin to get messy. But there aren't necessarily higher or lower levels, just different concepts which different audiences would hack on.
[17:39:49] <shka> hmmm
[17:40:00] <shka> that's another way to do it
[17:40:25] *** Joins: selwyn (~selwyn@user/selwyn)
[17:40:35] <shka> i personally always try to separate the representation layer, and define generics for operating on that
[17:40:41] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:40:56] <shka> one thing which i was trying to implement is to divide packages into protocol and api parts
[17:41:05] *** Joins: selwyn (~selwyn@user/selwyn)
[17:41:41] <shka> with protocol being composed of the elementary set of generic functions, and API having the convenance functions working on the generics from the protocol 
[17:41:52] <shka> also, reexport protocol symbols from the API
[17:42:01] <mfiano> shka: Perhaps a dumb question, but can I get an idea of the categories you typically use?
[17:42:16] <mfiano> I am always interested in other peoples' design methodologies
[17:42:30] <shka> well i have two approaches
[17:43:08] <shka> first one is "the lasagna"
[17:43:17] <mfiano> :)
[17:43:35] <shka> where i am trying to compose a stack of layers
[17:43:37] <hayley> Second is ravioli? Or spaghetti?
[17:43:43] <shka> neither!
[17:43:58] <shka> second is "the grammar"
[17:44:39] <mfiano> Ok, we just got domain-specific I think
[17:44:40] <shka> instead of defining layers, i am trying to define the permitted interactions
[17:45:13] <shka> yeah, it is a little bit domain-driven, but useful in a lot of different contexts anyway
[17:45:29] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:45:34] <shka> so the thing is, i am trying to define a term
[17:45:41] <shka> like for instance "layer function"
[17:46:10] <shka> layer function will accept a lazy range and will return other lazy range, different in a specific regard
[17:46:33] <shka> but will not alter the old range
[17:47:04] <shka> so instead of putting constraints on the whole layers, you put more emphasis on each type of interaction
[17:47:10] <shka> in this case "layer application"
[17:47:30] <mfiano> I see
[17:47:35] *** Joins: selwyn (~selwyn@user/selwyn)
[17:47:51] <shka> i call it grammar because just like grammar has types of words which can be used in certain ways, you have instead different functions and data types 
[17:48:15] <shka> also, those approaches can be combined
[17:48:53] <shka> anyway, the whole trick is separation, and combination
[17:49:19] <shka> first separate, then define how can be combined
[17:49:58] <shka> it is just there are multiple axis to do that
[17:50:47] <mfiano> Someone gave me this to read a month or so ago, and I haven't yet. I dunno if it is worth reading. https://medium.com/code-thoughts/reviewing-clean-architecture-60a1edd9e3d6
[17:50:47] -ixelp- Dissecting Clean Architecture. An onion that doesn’t make you cry | by Marcos Vinícius Silva | Code Thoughts | Medium
[17:51:36] <shka> this looks ok for certain class of applications
[17:51:55] <shka> anyway, for me, my two approaches seem to work fine
[17:52:15] <mfiano> I see. Thanks
[17:52:35] <shka> oh, and "the grammar" at least is very decent for the API design
[17:53:09] <mfiano> Layered architecture is the one thing I can never settle on, because I'm always designing very large pieces of software and it's unclear where any boundaries should be and how granular they should be and should they be separate libraries, etc etc
[17:53:35] <shka> honestly, i wish somebody would write a good book on the lisp software design
[17:53:47] <shka> beach would be a perfect author for that
[17:53:58] <shka> but the man is busy as a bee
[17:54:31] <shka> when i gather enough of exp points i may actually try to do that
[17:55:14] <shka> i will write in the introduction "Beach was busy".
[17:55:42] <mfiano> I encourage you to do so :)
[17:55:51] <hayley> I thought beach had a chapter on protocols already written out.
[17:56:15] <shka> yes
[17:56:25] <shka> and it is freaking excellent
[17:56:49] <shka> best piece of writing on the software engineering i have ever read
[17:56:52] <mfiano> link?
[17:57:03] <shka> hayley: help?
[17:57:12] <shka> somewhere on the metamodular :/
[17:57:29] <shka> http://metamodular.com/protocol.pdf
[17:57:31] <shka> got it
[17:57:45] <hayley> I forgot.
[17:57:50] <hayley> A random guess would be http://metamodular.com/protocol.pdf
[17:57:52] <shka> hayley: no worries, i found it
[17:58:20] <shka> seriously though, that's why Beach would be the perfect author 
[17:58:47] <shka> it is really eyes opening 5 pages
[17:59:07] <mfiano> thanks. i always enjoy reading his papers and i don't think i've read this one yet
[17:59:15] <shka> and chances for completing the whole book are rather slim sadly 
[18:00:44] <mfiano> I recently read one of Uncle Bob's books as beach recommended it as the closest to what I was looking for...and it was probably the worst pile of advice I ever read, and beach said he wasn't surprised.
[18:01:03] <mfiano> It was written for the average clueless Java programmer though, so it's no wonder nothing carried over
[18:05:18] <gilberth> Terrific. This machine cannot find any disk to offer me to install macOS on. It says: "Select the disk where you want to install macOS." With no disks listed. How could that be? What now?
[18:06:23] <mfiano> Jump ship?
[18:06:33] <gilberth> Do I need to somehow "reformat" the disk?
[18:15:17] <mfiano> I wonder where this "Chapter 5" was extracted from...it starts on page 33
[18:16:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:16:26] <gilberth> This machine somehow is fried, DiskUtil can't see the SSD. Why?
[18:17:34] *** Joins: selwyn (~selwyn@user/selwyn)
[18:18:04] * amirouche throw LFS (Lisp From Scratch) on the table.
[18:23:34] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:28:55] <selwyn> sigh
[18:29:01] <selwyn> trying to fix bluetooth headphones
[18:30:05] <lonjil> mfiano: I've never read any of Unble Bob's books, but a couple of months ago I saw someone point out that his own code examples in at least some of his books actually do the exact opposite of what he advises. And from what I saw it was very bad code too, much worse than the average Java code I've read.
[18:31:11] <mfiano> Some of the advice I read in his book is at best laughable
[18:31:59] <mfiano> I think a better book on a related note would be The Pragmatic Programmer (20th anniversary edition), though I only scraped the surface of that one so far
[18:39:12] <shka> mfiano: to be fair, the average clueless java programmers keep the world runnin
[18:39:14] <shka> g
[18:39:32] <shka> so there is value in writing for this audience 
[18:40:51] <gilberth> Still no disk after NVRAM reset. Next.
[18:47:59] <shka> mfiano: so that chapter had you hooked?
[18:48:20] <mfiano> I keep getting distracted and haven't finished it yet :)
[18:48:56] <shka> good thing that it is just 5 pages then!
[18:48:58] <shka> :D
[18:52:35] <selwyn> fucking headphones
[18:57:34] <mfiano> I did find it interesting, but I think it will take me some time to fully digest. It is not the most clear of his writings, and is a bit too technical/mathematical I think.
[18:57:41] <mfiano> shka
[18:57:52] <shka> mmm, ok
[18:58:14] <shka> i personally found this to be very clear
[18:58:41] <shka> but i guess this depends on the personal preferences 
[19:00:09] *** Joins: copec (~copec@schrodbox.unaen.org)
[19:01:33] <mfiano> I guess I would like to see a different pedagogical approach of the same thing
[19:01:45] <mfiano> Or maybe it will just click for me when I wake up :)
[19:01:52] <gilberth> Could one fry an SSD by just erasing it? Because this is what my wife said she did. OTOH she experienced random crashes, which which prompted here wanting to completely reinstall the machine.
[19:02:21] <shka> wife?
[19:02:37] <shka> anyway, yes it is possible
[19:02:48] <gilberth> Yes, this is my wife's^Wcompany's machine.
[19:02:51] <shka> if you overwrite the disk, that is 
[19:03:14] <gilberth> shka: Really? That's insane.
[19:03:32] <shka> well, not all that insane
[19:03:49] <shka> if the ssd is on the brink of dying
[19:03:58] <shka> then this can kill it
[19:04:11] <shka> but it should not effect properly functioning ssd
[19:04:24] <gilberth> Oh dear, yes, that makes sense.
[19:05:32] <gilberth> Well, bugs haunt me as faulty hardware haunts her it seems. Disappointing, as this Mac mini isn't that olde.
[19:06:34] <gilberth> Ok. Next then. The other machine I have here, which she also used, just has faulty DRAM. Easy to swap and I already have new DRAM.
[19:06:53] <shka> https://tapas.io/episode/2293832?fbclid=IwAR1Pce67vf-H1OUgPgeBn-m-FFTpqgc0l7wmHg_5gVsqKocIdOmdtfl8RTQ
[19:06:54] -ixelp- Mr. Lovenstein :: Isolated Incident | Tapas
[19:09:20] <gilberth> Ok. I take it then, that erasing the disk provided for a quick death. Good for the SSD, no unnecessary long and painful suffering.
[19:09:58] <mfiano> Oof. I'm sorry for your hardware misfortune. This is actually the reason many of my friends stopped using Apple. The price for the longevity of the hardware is not justifiable
[19:10:48] <shka> i personally have problem with how apple seems to put look before the function
[19:11:10] <gilberth> I don't have the patience for a Hackintosh. And: I never had any HW problems. She however is haunted.
[19:11:35] <gilberth> shka: It's getting worse. Each day.
[19:11:54] <selwyn> error correcting codes as used in ssds can be quantised to make quantum error correcting codes, which are the reason why this quantum computing thing is plausible in the first place
[19:13:05] * mfiano continues thinking about the layers involved in a better protocol design
[19:13:13] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:13:22] <mfiano> (as I fall asleep)
[19:13:58] <gilberth> If that is the case, my wife would find every of Schrödinger's cats dead, while I'll would find them alive. :)
[19:15:24] <shka> mfiano: maybe you should rest
[19:15:50] <mfiano> That's what I'm about to go do. I can see this is going to take days to think about anyway
[19:16:50] <gilberth> The best insights come while one is asleep. Somehow.
[19:17:29] <shka> no
[19:17:33] <shka> UNDER SHOWER!
[19:18:25] <gilberth> Does not work for me.
[19:20:14] <shka> that's because you are a nocturnal creature
[19:20:56] <gilberth> Sounds plausible.
[19:21:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[19:21:44] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:21:56] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:23:19] *** Joins: selwyn (~selwyn@user/selwyn)
[19:24:51] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:24:53] <shka> gilberth the accidental goth
[19:24:58] <shka> ;-)
[19:26:12] *** Joins: selwyn (~selwyn@user/selwyn)
[19:31:10] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[19:31:40] <gilberth> What makes you so sure that this is accidental?
[19:33:36] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:33:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:35:19] *** Joins: selwyn (~selwyn@user/selwyn)
[19:36:27] <selwyn> headphones fixed
[19:36:47] <selwyn> is bluetooth badly designed?
[19:37:33] <shka> i don't think so 
[19:40:20] <selwyn> read once that it is easy to hack
[19:42:05] <shka> compared to infrared stuff?
[19:42:08] <shka> not really 
[19:42:14] <shka> and that's what it replaced
[19:42:22] <gilberth> Ok. The other machine is fine it seems, but it's only some poor Intel Core i5.
[19:43:46] <selwyn> i never did manage to get my nokia phone to connect via infrared
[19:45:04] <selwyn> recently, i have become interested in fast (classical) decoders
[19:47:51] <selwyn> an interesting part of the design of photonic based quantum computers, is that since photons are so fast
[19:48:11] <selwyn> your classical control electronics needs to be able to react very quickly, and be close to the hardware
[19:48:31] <selwyn> so designing the chips needed to control the hardware is not trivial
[19:48:54] <selwyn> nor is designing the algorithms to run on them
[19:51:23] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[19:52:56] *** Joins: makomo_ (~makomo@user/makomo)
[19:53:38] *** pjb is now known as Guest544
[19:54:55] *** Joins: pjb (~pjb@user/pjb)
[19:55:05] *** Quits: Guest544 (~pjb@user/pjb) (Ping timeout: 268 seconds)
[19:57:03] <shka> selwyn:  https://www.wired.com/story/medtronic-insulin-pump-hack-app/
[19:57:04] -ixelp- Hackers Made an App That Kills to Prove a Point | WIRED
[19:57:30] <shka> easy to hack enough?
[19:58:04] <shka> pumping a person full of insulin is the perfect way to kill someone 
[19:58:05] <shka> btw
[19:58:43] <selwyn> damn
[20:00:11] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:00:19] <shka> selwyn: and don't start me on the medical implants!
[20:00:20] <pjb> #0A1D+-0 : An array that is not an array (it has no dimension), containing a number that is not a number! (read-from-string "#0A1D+-0") #| --> #0A1D+-0 #| not-a-number |# ; 8 |# 
[20:01:05] <shka> selwyn: pacemakers also can be hacked
[20:01:10] <pjb> shka: if you can find a way to pump it in without leaving an trace for the autopsy.
[20:01:46] <shka> pjb: insulin itself won't be detected after few hours
[20:02:03] <shka> but injection could be a problem
[20:02:18] <shka> unless a person happens wear an insulin pupm
[20:02:36] <shka> with enough of insulin to kill said person many times over
[20:06:12] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:06:38] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:12:49] <selwyn> > Old MiniMed pump models are coveted precisely for their vulnerable, hackable nature. Loopers use the flaws in older MiniMed pumps to connect the devices with continuous glucose monitors implanted under their skin.
[20:13:00] <selwyn> why do patients have to hack their own devices
[20:15:53] <shka> selwyn: because approved pumps doing the same thing are rather expensive
[20:16:02] <shka> several thousands of dollars 
[20:16:09] <selwyn> i am shocked
[20:16:18] <selwyn> but equally, i might hack it myself if i had diabetes lol
[20:18:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[20:20:09] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 268 seconds)
[20:24:04] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:24:56] <gilberth> The other thing, I really don't like is that those Apple devices don't come with ECC DRAM.
[20:27:22] <pjb> Very rare are the computer with ECC DRAM…  
[20:28:04] <pjb> On the other hand, Apple uses a compressing VM, so I assume some level of error checking is performed.
[20:28:16] <pjb> in software :-)
[20:29:51] <shka> not even the mac pro?
[20:30:10] <shka> yeah, mac pro comes with ECC dram
[20:32:01] *** Quits: christophergray (~christoph@190.148.53.200) (Quit: WeeChat 3.2)
[20:34:00] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[20:35:40] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:38:20] <gilberth> pjb: Still, not all the RAM is compressed.
[20:40:48] <gilberth> For my Linux machines I was using ECC for quite some time. It just feels good to have some protection from alpha particles. Actually I always wonder, if it is SW problems or alpha particles that somehow limit the uptime of my Apple machines to somewhat around a mere 150 days or so.
[20:43:55] <pjb> probably.  There are so many _famous_ occurences, there  must be a ton of more conspicuous ones.
[20:45:15] <pjb> https://www.youtube.com/watch?v=o3Cx2wmFyQQ
[20:45:15] -ixelp- How Cosmic Rays Affect Super Mario Speed Runners - YouTube
[20:45:42] <pjb> https://www.youtube.com/watch?v=AaZ_RSt0KP8
[20:45:42] -ixelp- The Universe is Hostile to Computers - YouTube
[20:46:00] <gilberth> I once had a CMUCL application which was handling 100+ network connections 24/7 and it would crash in the GC randomly every 60 or so days. I blamed alpha particles, because otherwise CMUCL was pretty reliable.
[20:48:42] <gilberth> A single flipped bit will almost certainly cause your GC to follow that faulty pointer, something C applications are not so prone to do.
[20:50:30] <gilberth> And didn't this came up one as by accident some semiconductor manufacturer used slightly more radioactive packages?
[20:59:57] <selwyn> yes
[21:02:34] *** Quits: random-nick (~random-ni@87.116.165.220) (Quit: quit)
[21:05:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:08:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[21:10:45] <pjb> Indeed, in the beginnings of ceramic packages.  They had to filter out radioactive elements from ceramic material…
[21:16:59] <selwyn> it must be nice to work with classical computers, where the only real negative aspect of the environment that can make the hardware fuck up is alpha particles
[21:17:04] <selwyn> :p
[21:17:30] <selwyn> quantum computing hardware is very much governed by murphy´s law
[21:18:46] <gilberth> Actually I am still impressed how reliable classical computers are in general.
[21:20:27] <selwyn> yeah me too
[21:20:45] <selwyn> it´s a real high point of engineering achievements
[21:23:23] <lotuseater> or those circuits/chips that are extra hardened for situations like in space
[21:24:21] <gilberth> Yeah and for my to be build TTL design I will be happy with some mere 60ns cycle time, while I aim at 30ns, but that'll be hard since those TTL gates are still pretty slow with t_pd around 10ns. I would need some pipelining then. And buses bounce, luckily with TTL your power supply doesn't bounce too much.
[21:25:40] <gilberth> OTOH I will face some 20cm transmission lines. That alone is considerable skew.
[21:29:33] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: bbl)
[21:36:22] <selwyn> how close to reality is carbon capture?
[21:37:07] <pjb> You mean, like an amazon forest?
[21:37:25] <pjb> Far from reality; We're cutting it down to make wood, and to dig gold mines…
[21:37:43] <selwyn> industrial carbon capture
[21:38:22] <pjb> Of course. There's no tax into a tree.
[21:49:24] <shka> selwyn: energy intensive task
[21:49:50] <shka> CO2 is a trace gas, capturing it is not easy at all
[21:50:01] <selwyn> what if you get good catalysts?
[21:50:14] <shka> well, then you win
[21:50:58] <shka> but you need to obviously still deploy on the scale large enough to make a difference
[21:51:01] <selwyn> designing such catalysts is meant to be an application of quantum computing
[21:51:08] <selwyn> it seems like somewhat of a long shot
[21:51:28] <shka> well, clasp started with looking for catalysts
[21:51:44] <shka> so maybe CL will eventually save the world ;)
[21:51:48] <copec> We could all gain a lot of weight, sequester some carbon
[21:52:11] <shka> regardless
[21:52:25] <copec> not ireregardless
[21:52:38] *** Joins: vats (~vats@103.70.83.191)
[21:53:19] <shka> the reality of the system is that unless carbon becomes a resource that you profit on, capturing it from the atmosphere is not a solution
[21:54:06] <shka> and if you could make profit by capturing co2 from the atmosphere, you are very close to solving the global warming
[21:54:33] <shka> because then companies would invest the profit into more carbon capture
[21:54:50] <shka> and eventually you would get exponential growth
[21:56:16] <selwyn> i see
[21:56:57] <selwyn> well, if the technology is cheap enough governments can simply build a lot of them
[21:57:54] <shka> by taxing
[21:57:59] <shka> not a popular option
[21:58:24] <gilberth> It's a silly prospect to first dilute carbon into the atmosphere to capture it then later on.
[21:58:26] <shka> it is capitalism, if you wanna get stuff done, somebody, somewhere needs to generate profit on it
[21:58:57] <shka> gilberth: well, we are a little bit late for this conclusion
[21:59:17] <gilberth> It would help when coal power plants would need to dispose their waste properly as every other industry.
[22:00:24] <gilberth> shka: Sure we are very late. Tell that the local politics and the Green party. We'll resort to geo-engineering eventually when climate change becomes too drastic.
[22:01:39] <selwyn> meh
[22:01:41] <gilberth> Or we move further up north and enjoy pretty long mild summer nights. Not the worst option.
[22:02:48] <selwyn> easy to hate on the greens, but you cannot blame the wasted 90s and 00s on them, in which very little was done to fight climate change, and at a time when there was comparatively little else to worry about
[22:03:04] <gilberth> Face it: As long as coal is perceived as the cheapest option to get engery, all coal we have sitting in the ground will be burned. Simple.
[22:03:06] <selwyn> blame must go to obama, clinton, bush, european leaders of that time
[22:04:07] <gilberth> selwyn: I blame their irrational fear of nuclear power starting in the 80s on exactly that Green party.
[22:04:20] <selwyn> ok
[22:06:10] <shka> gilberth: this is relevant in germany, but not in the uk 
[22:06:25] <shka> afaik uk greens are not against the nukes
[22:06:44] <shka> while geramans are not fun of nuclear power in any form
[22:07:06] <shka> there was even discussion on the NATO nuclear sharing policy
[22:07:30] *** Joins: clothespin (~awolven@2601:246:4000:1030:3843:f11f:b543:85cd)
[22:08:13] <shka> but yeah it is https://www.youtube.com/watch?v=33w3TIVh0R8
[22:08:13] -ixelp- entombed - it is later than you think - YouTube
[22:08:27] <selwyn> if by nukes you mean nuclear weapons, it is extremely difficult to be against the uk nuclear program
[22:08:41] <shka> selwyn: i mean all nuclear devices 
[22:08:42] <selwyn> despite the fact that there is no good reason for it
[22:08:43] <gilberth> I also blame all the environmental damage due to getting at rare earth elements for electrical vehicles and wind turbines on them, too. That's no viable solution --- none that would scale in any way. And Germany alone cannot stop climate change. It can't even get CO_2 neutral without nuclear power. Won't work.
[22:08:43] <selwyn> ok
[22:09:30] <selwyn> seems they want to phase it out
[22:09:52] <gilberth> Phase what out?
[22:09:53] <shka> gilberth: i am afraid that the northern countries in general don't have a lot of options besides atomic power
[22:09:55] <selwyn> when i was little, i had a (british) green book for kids that talked about environmentalism
[22:10:09] <selwyn> it had no clear position one way or the other on nuclear power
[22:10:22] <selwyn> gilberth: uk greens want to phase out nuclear power
[22:10:35] <shka> really?
[22:10:36] <gilberth> They too? A pity.
[22:10:52] <shka> i thought that they started moving toward the nuclear power
[22:11:07] <selwyn> well, according to wiki
[22:11:55] <gilberth> Another note to the Green parties: No, you cannot stop a person living in India or in China from wanting a fridge, too.
[22:12:10] <selwyn> there is a plan to move the nuclear subs to france or the usa if scotland becomes independent
[22:12:14] <selwyn> in which case, lol
[22:12:44] <gilberth> That helps?
[22:12:59] <shka> gosh, if they would only knew how life looked before the fridge
[22:12:59] <selwyn> the nuclear sub base is in scotland
[22:13:16] <shka> being a housewife was a full time job
[22:13:18] <gilberth> Makes sense, yes.
[22:13:22] <shka> groceries everyday
[22:13:42] <selwyn> return to pantries
[22:14:02] <shka> while i just ate tasty orange that i bought like 5 days ago
[22:14:05] <gilberth> Yes, and without a washing machine. Heck, even me, as a student I didn't have one.
[22:14:11] <shka> thanks to the might fridge
[22:14:21] <shka> *mighty
[22:14:43] *** Joins: lisp123 (~lisp123@45.130.83.212)
[22:15:10] <shka> yeah, washing machines are nice to have as well
[22:15:17] <shka> but not as nice as the fridge
[22:15:44] <selwyn> shka: i mean, a washing machine is much more useful than a fridge to a housewife anyway lol
[22:15:45] <selwyn> but yes
[22:15:58] <shka> selwyn: not really
[22:16:06] <selwyn> uh
[22:16:06] <shka> i mean, imagine buying milk everyday
[22:16:07] <gilberth> So, yes, I would suggest to all those wealthy Green voters, that they do without a dish washer, washing machine, and a fridge. And perhaps without central heating or hot water. They may ask their grandparens how that works.
[22:16:41] <selwyn> i buy groceries nearly every day and it doesn´t take that long
[22:16:49] <selwyn> handwashing clothes on the other hand takes anyone ages
[22:17:03] <shka> you live alone?
[22:17:31] <gilberth> Yes, it does. We did as students, but we had ample of time. And my parens (mom really) did before I was born.
[22:17:34] <selwyn> no
[22:17:43] <shka> huh, ok
[22:18:00] <selwyn> i am too dumb to do it only once a week
[22:18:19] <shka> anyway, i can't imagine buying milk, butter and whatever i have in my fridge everyday
[22:18:20] <selwyn> i might also point out that yes, i have a fridge in case you were wondering :p
[22:18:37] <gilberth> It depends on how far it is to the next grocery store. When I live in a city I would buy groceries every other day.
[22:19:12] <shka> i should actually clean my fridge
[22:19:18] <shka> i was busy on the last weekend
[22:19:47] <shka> i also have some vegies in the fridge
[22:19:58] <shka> and hell, i will eat those tomorrow
[22:20:00] *** Quits: lisp123 (~lisp123@45.130.83.212) (Ping timeout: 268 seconds)
[22:20:03] <gilberth> shka: As evolution kicked in? Can you talk to some of your inhabitants of your fridge and get an answer?
[22:20:23] <shka> haha, not yet
[22:20:34] <shka> but i have some tomato paste that is moldy 
[22:20:47] <shka> so clearly i neglected it 
[22:21:35] <lotuseater> oh does anyone of you know this wonderful episode from Love Death and Robots season 1 with the evolutionary fridge? ^^
[22:22:31] <shka> i also need to buy me some bicycle 
[22:22:53] <gilberth> Anyhow, at times I get the impression that those wealthy Green voters just forget about all the comfort and prosperity they take for granted and how that is connected with energy consumption. Their solution always is more taxes here. Bad for the poor.
[22:24:46] <gilberth> And they often life in the city and thus don't need a car and thus assume that nobody would. Try living in a rural area without a car.
[22:25:52] <gilberth> live, even. ;I mix that up all the time :(
[22:27:40] <aeth> in the US, the further out you go the more money people have (except the downtown, which is for the ultra-rich)
[22:27:55] <aeth> which makes cars (and 2 hours commute) a status symbol
[22:28:17] <aeth> so only NYC and a handful of other places are designed to be carless
[22:28:25] <gilberth> A long commute is a status symbol? Strange.
[22:28:47] <aeth> in the city, there will be a $1 million house that's just a regular house, inside the city
[22:29:07] <shka> aeth: 2 hours in one direction?
[22:29:10] <aeth> so of course everyone middle class and up is going to commute
[22:29:22] <aeth> most cities have the poor and the ultra-rich and few in between
[22:29:30] <gilberth> aeth: $1M isn't much for a house.
[22:29:43] <aeth> eh
[22:30:10] <shka> aeth: let me get this strait
[22:30:13] <aeth> In my area, $2 million is a lot and $400k or so is normal. But I'm closer to Baltimore. Closer to Washington, the higher end houses can go for $10,000,000+
[22:30:27] <shka> people are willing to waste 2 hours per day to commute?
[22:30:46] <aeth> shka: Yes, there are people who live in Pennsylvania and commute across the entire length of Maryland, in traffic, to Washington DC
[22:30:51] <shka> driving in a car?
[22:30:51] <gilberth> A few years ago little houses with small gardens some 20km from the city center already where at EUR 1.5M easily.
[22:31:01] <shka> i could perhaps accept this when driving a bus
[22:31:11] <shka> so i could read stuff 
[22:31:26] <aeth> Just over the PA-MD line down to DC should be about 2 hours in a car down I-83, if not more. In traffic, of course. Normally it probably would be much faster
[22:31:34] <shka> and i would take it if this would involve biking to work
[22:32:15] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:32:16] <shka> because grabbing daily exercise and commuting at the same time sounds like a win to me
[22:32:25] <shka> but just driving the car?
[22:32:32] <shka> this sounds like a waste of time
[22:32:36] <aeth> I-83 -> I-695 -> I-95 to go PA->DC is a commute some people unironically make, via car, in some of the worst traffic in the country (LA's way worse)
[22:33:05] <shka> well, i actually used to jog everyday to work
[22:33:26] <aeth> York, PA to Washington DC is about 120 km, apparently
[22:33:35] <shka> and this added up to a lot of distance over a month of so
[22:33:35] <aeth> or 75 miles
[22:33:46] <aeth> with no traffic, that could be a bit more than an hour
[22:33:50] <aeth> with traffic, though? maybe 2.5?
[22:33:54] <shka> shin splits are the shit though 
[22:35:03] <aeth> look at a road map of Maryland. Every major highway has people taking multihour commutes to get to the big cities. Probably the same with Virginia, I just don't know about that side of the line.
[22:35:14] <aeth> e.g. Frederick MD to Washington or Baltimore
[22:36:09] <aeth> All done on a few major roads like I-70, I-270, I-95, I-83, I-695, I-495, etc. Not public transit. Or maybe people drive like an hour to a train.
[22:38:04] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[22:39:14] <aeth> That's.... 10 million people
[22:39:18] <aeth> https://en.wikipedia.org/wiki/Washington%E2%80%93Baltimore_metropolitan_area#Combined_Statistical_Area
[22:39:27] <shka> well, i begin to understand why Americans are so big on the comfortable cars
[22:39:39] <aeth> That CSA doesn't even include some areas that take the long commute like just over the PA line up 83
[22:40:08] <aeth> And LA is car-oriented at nearly twice the size... 18 million. https://en.wikipedia.org/wiki/Greater_Los_Angeles#Combined_Statistical_Area
[22:40:18] <aeth> So that's #2 and #3
[22:40:22] <aeth> https://en.wikipedia.org/wiki/Combined_statistical_area#List_of_combined_statistical_areas
[22:40:41] <aeth> I'm guessing carless is the exception rather than the rule. Probably NYC and maybe Chicago?
[22:40:52] <shka> would be a pretty bad day if oil prices would suddenly sky rocket :D
[22:43:21] <aeth> I mean, that already happened. In the 1970s. Complete with rationing based on license plates.
[22:43:29] <aeth> Didn't stop car culture.
[22:43:46] <shka> but the american car industry never really recovered as it seems
[22:44:23] <aeth> Well, it was the opening for foreign cars like Toyota to really enter the US market.
[22:46:33] <shka> AFAIK the American car engines of the era were pretty archaic 
[22:46:40] <aeth> But if you have to pay $20 million to be near DC or can get the same house for $2 million and put up with a commute, then it's obvious how at just about every level, people prefer to commute. It's just a 2x premium at the lower end and 10x at the higher end to avoid commuting.
[22:47:15] <aeth> And the people who sacrificed comfort to have a short commute probably regretted it in 2020
[22:47:24] <shka> aeth: my understanding is that American cities are wide and flat
[22:47:36] <shka> not many apartment buildings at all 
[22:47:41] <aeth> American cities are usually built around the "beltway"
[22:47:52] <aeth> There can be apartments or townhomes, but they're just as spread out
[22:48:37] <shka> hmmm
[22:48:44] <aeth> The outskirts of the city are more desirable than the downtown because you can get there faster, without having to navigate confusing urban roads, just by taking the beltway
[22:49:03] <shka> confusing urban roads?
[22:49:06] <shka> seriously?
[22:49:28] <aeth> Beltways are just circles around an urban area and most cities in the US have those
[22:49:29] <shka> i thought that american urban roads are as simple as you can go 
[22:49:44] <aeth> Beltways: you just get on one exit, go a bit, get off another
[22:50:05] <aeth> Urban roads: unless you're in the midwest, there is no grid pattern in the core of the city, which means you have roads like \|/ or whatever and those intersections are confusing
[22:50:15] <aeth> (Americans do not like roundabouts)
[22:50:41] <aeth> Plus, traffic lights vs no traffic lights
[22:51:11] <aeth> I do not go into the city very often.
[22:52:06] <aeth> look at a road map of the US and most cities have circles around them. These are usually outside of the city limits proper.
[22:53:19] <selwyn> perhaps this willingness to commute is related to the fact that they are in their own cars for the most part and also due to the workaholic culture that accepts long hours anyway
[22:53:46] <selwyn> i had to travel an hour to school everyday and hated it so much that i vowed to never commute again
[22:53:55] <selwyn> which, to date, i have basically managed to achieve
[22:54:28] <aeth> US "urban" design is usually suburban. A ring around the city. Cheaper for tax purposes if you're just outside of the city limits.
[22:54:29] <selwyn> i forget why uk urban planners favour roundabouts, but there are just so many of them here
[22:54:53] <aeth> Roundabouts are optimal.
[22:55:10] <selwyn> https://en.wikipedia.org/wiki/Magic_Roundabout_(Swindon) this is my favourite
[22:55:12] <selwyn> such a bastard
[22:55:23] <aeth> If you have traffic lights, outside of peak traffic hours, you can be sitting at a red light with nobody else around
[22:55:35] <aeth> Some states, like MD, let you turn right on red unless there's a sign saying you can't
[22:55:43] <aeth> Doesn't help if you have to go straight, though
[22:55:54] <selwyn> roundabouts often also have traffic lights?
[22:55:59] <aeth> That's probably why so much of the US road design is based around getting to interstates with no traffic lights
[22:56:13] <aeth> shka: No, I mean, roundabouts avoid traffic lights
[22:56:19] <aeth> 'cept not that one, apparently
[22:56:53] <selwyn> >  the roundabout provides a better throughput of traffic than other designs and has an excellent safety record, since traffic moves too slowly to do serious damage in the event of a collision.
[22:56:55] <selwyn> hahaha
[22:57:05] <aeth> it's the metagame of Cities Skylines
[22:57:14] <aeth> https://en.wikipedia.org/wiki/Cities:_Skylines
[22:57:29] <shka> aeth: yeah, those are more fluids 
[22:58:51] <shka> oh, btw, i made a kde color scheme today
[23:00:14] <shka> https://store.kde.org/p/1596596
[23:00:15] -ixelp- GreyAndRed - KDE Store
[23:00:57] <selwyn> nice
[23:00:59] <selwyn> it looks relaxing
[23:01:19] <aeth> the best theme: https://store.kde.org/p/1252059/
[23:01:19] -ixelp- Reactionary - KDE Store
[23:01:23] <shka> as much as red can be relaxing
[23:01:59] <shka> aeth: no shit, i think that original windows colors whee spot on 
[23:02:56] <aeth> It's amazing how good Win 9x through Win 2000 was. And how downhill UI has gotten since then.
[23:03:13] <aeth> Probably because you need big colorful buttons for touchscreens (that nobody uses) and effects to show off the GPU
[23:03:53] <aeth> Gnome < most DEs < default KDE < KDE Reactionary
[23:04:19] <shka> aeth: imagine that i accidentally pin pointed the exact same color for the window background 
[23:04:48] <aeth> I use one of the Win 9x or Win 2k default background light blue colors as my background color a lot of the time
[23:04:51] <aeth> e.g. on my tablet
[23:04:54] <aeth> It's a good background color
[23:05:09] <aeth> (I think every iteration had its own shade, though)
[23:05:21] <White_Flame> they have to "do something" every release, even if what they're changing from is really good
[23:05:36] <White_Flame> I hate the wasteful churn in so many industries, just to force another buck to be made
[23:06:03] <aeth> The thing is, Win 9x was designed for people who have never used a computer before, so it had to be discoverable.
[23:06:06] <shka> well almost the same
[23:06:12] <White_Flame> but everybody's chasing the apple cult dollars and every fad they come up with
[23:06:39] <White_Flame> yep, discoverability is getting worse and worse as visual design people are in charge of the GUI
[23:06:56] <aeth> You could learn everything you needed to know about navigating Win 9x through the menu bars. Either they told you the keyboard shortcut right next to the entry or there was no keyboard shortcut but you could still navigate it via, say, Alt <key for menu> <key for item>
[23:08:15] <aeth> Now everything's in a hamburger menu on desktop even though we have larger, higher DPI screens than we ever did in the 90s
[23:08:39] <shka> aeth: i just checked, windows 98 is just slightly brighter shade of grey then the 95
[23:08:45] <aeth> And there's usually no key to walk through the hamburger menu items, unlike the old menu bar.
[23:08:50] <White_Flame> if you're lucky.  Many things are hidden behind slide directions or long presses
[23:08:54] <aeth> So no keyboard shortcut means no keyboard shortcut
[23:08:56] <shka> and accidentally the exact same shade as i've picked 
[23:09:34] <White_Flame> keyboards are too complicated for users, monkey poking is the only suitable input method
[23:09:57] <ck_> it's all very depressing
[23:10:00] <aeth> even necessarily mouse-oriented professional tools are full of keyboard shortcuts. e.g. Blender
[23:10:06] <White_Flame> it's healthy to ignore the entire industry
[23:10:11] <White_Flame> they're all psychopaths
[23:10:21] <shka> this is honestly bizarre to me
[23:10:29] <shka> because you can get hamburger menu right
[23:10:32] <ck_> White_Flame: there's probably a reason we're having this discussion on internet relay chat
[23:10:38] <White_Flame> heh, yeah
[23:10:47] <shka> the problem is that everybody does it slightly differently 
[23:10:56] <aeth> All you'd need to do is treat the hamburger menu like the file menu and let you walk into it with Alt f
[23:10:59] <aeth> but nobody does
[23:11:01] <White_Flame> shka: everybody has to "stand out" in their design
[23:11:33] <shka> aeth: kde allows to put the menu in the windows titlebar 
[23:11:42] <ck_> there was a version of firefox a few years ago that had one state of hamburger menu after clicking on it, with items hidden. those were revealed by tapping the alt key
[23:11:42] <shka> which is imho nice
[23:11:51] <shka> but they should also add search bar in there 
[23:12:00] <White_Flame> if these people were designing cars, somebody would put the gas & brake pedals into your seat, controlled by your butt cheeks, to make the floor space "less cluttered"
[23:12:08] <shka> ck_: lol, what a great design :D
[23:12:42] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[23:12:51] <shka> White_Flame: but imagine what kind of sexy butts 2 hour commute this would produce!
[23:12:56] *** Joins: derelict (derelict@user/derelict)
[23:13:04] <White_Flame> more like back problems galore :-P
[23:13:14] <ck_> that's the direction these 31337 electric car cockpits are designed
[23:13:23] <ck_> knobs and dials? have a touchscreen!
[23:14:26] <shka> if they would use TNG touch interface design, i could accept it... :P
[23:14:53] <shka> "direct power to the engines, engage!"
[23:15:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:15:41] <White_Flame> yeah, when you're driving a car, you shouldn't be distracted by non-tactile controls
[23:16:08] <selwyn> data uses a iphone iirc
[23:16:31] <shka> i honestly appreciate having dedicated buttons even at the computer
[23:16:37] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:16:46] <shka> i have for instance macropad with 8 buttons dedicated to the desktop switching
[23:17:09] <shka> and having button to start konsole emulator is just a common sense i think
[23:17:21] <ck_> selwyn: an iPad^WPADD
[23:17:21] <White_Flame> still reminds be of the removal of function keys for a touchbar in the macbook "pro"
[23:17:52] <ck_> yeh but look at the space you gain for a line display that scrolls emoji!
[23:18:09] <shka> because it is pro
[23:18:18] <shka> you need to use emojis like a pro
[23:18:25] <White_Flame> it is pro(vably worse)
[23:18:37] <ck_> good thing I always put escape on caps lock.. but still, all the function keys on that weird touch line
[23:18:48] <ck_> next life: definitely gardener
[23:36:54] *** Joins: rogersm (~rogersm@90.166.177.48)
[23:38:46] *** Quits: rogersm (~rogersm@90.166.177.48) (Client Quit)
[23:40:04] <ck_> do any of you happen to play starcraft? speaking about something from the last century..
[23:40:59] <lotuseater> no sry, I have never been a big computer player, more console
[23:42:25] <shka> ck_: i watch starcraft, don't play so much 
[23:42:34] <shka> watched ASL today actually
