[00:09:28] *** Joins: badkins (~badkins@136.56.92.199)
[00:13:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:20:24] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:37:24] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:37:35] *** Joins: amk (~amk@109.255.169.126)
[00:38:43] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:38:53] *** Joins: amk (~amk@109.255.169.126)
[00:39:59] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:6ab2:c77f:e0d8:547d)
[00:42:41] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:52:55] *** Joins: amk (~amk@109.255.169.126)
[00:55:21] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:55:31] *** Joins: amk (~amk@109.255.169.126)
[00:56:12] *** Quits: evdubs_ (~evdubs@user/evdubs) (Ping timeout: 240 seconds)
[01:00:15] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:6ab2:c77f:e0d8:547d) (Ping timeout: 252 seconds)
[01:01:35] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[01:07:59] *** Joins: amk (~amk@109.255.169.126)
[01:08:03] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[01:09:12] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:12:01] *** Quits: rgherdt (~rgherdt@83.236.18.121) (Remote host closed the connection)
[01:14:19] *** Joins: masoudd_ (~masoudd@user/masoudd)
[01:17:24] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[01:19:19] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:25:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[01:25:57] *** Joins: evdubs (~evdubs@user/evdubs)
[01:27:40] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:6652:db49:fbf5:9855)
[01:31:23] *** Joins: badkins (~badkins@136.56.92.199)
[01:38:59] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[01:39:51] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:49:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:51:05] *** Joins: aeth (~aeth@user/aeth)
[02:34:49] *** Joins: badkins (~badkins@136.56.92.199)
[02:41:27] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[02:45:01] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[02:56:59] <ASau> ski: it turns out that the first known Valdemar is actually grandson of Mstislav the Great, grandgrandson of Vladimir Monomach and there's suspicion that he was born at Mstislav's court even.
[02:57:20] *** Joins: leah2 (~leah@vuxu.org)
[03:05:25] *** Quits: nrr___ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:05:51] *** Quits: dnm (sid401311@id-401311.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:05:52] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:05:58] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:06:02] *** Quits: groovy (sid62069@id-62069.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[03:06:10] *** Joins: rickbutton (sid410078@id-410078.helmsley.irccloud.com)
[03:06:16] *** Joins: nrr___ (sid20938@id-20938.lymington.irccloud.com)
[03:06:25] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[03:06:27] *** Joins: groovy (sid62069@id-62069.hampstead.irccloud.com)
[03:06:33] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[03:06:49] *** Joins: dnm (sid401311@id-401311.lymington.irccloud.com)
[03:06:58] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[03:18:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:28:43] *** Quits: civodul (~user@guix/contributor/civodul) (Remote host closed the connection)
[03:29:20] <jcowan> ASau: I myself am a Woldemar by name.
[03:39:01] <tokie> every scheme seems to differ in how it handles (number->string 3.14 16)
[03:39:09] <tokie> chez is the weirdest
[03:39:26] *** Joins: ahlk` (~user@2600:1700:31c0:3a10::43)
[03:39:39] <tokie> chicken just prints it base 10
[03:41:09] *** Quits: masoudd_ (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[03:41:27] *** Joins: saorge_ (~saorge@ns378138.ip-5-196-67.eu)
[03:41:41] *** Quits: saorge (~saorge@ns378138.ip-5-196-67.eu) (Ping timeout: 256 seconds)
[03:43:10] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[03:43:43] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 250 seconds)
[03:47:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[03:48:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:48:28] *** Joins: aeth (~aeth@user/aeth)
[03:53:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:53:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:55:31] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[03:55:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:57:53] *** Quits: seninha (~seninha@user/seninha) (Read error: Connection reset by peer)
[03:58:03] <ASau> jcowan: going to pretent to Danish throne?
[03:58:13] *** Joins: seninha (~seninha@user/seninha)
[04:06:50] <jcowan> nope
[04:06:59] <jcowan> I am a Hiberno-Deutscher
[04:08:40] <jcowan> John Woldemar mac Eoghain
[04:09:12] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 272 seconds)
[04:10:20] <jcowan> but like all other Irish people I am descended from kings, especially Brian Boru, the last High King of all Ireland.
[04:17:22] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[04:19:23] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[04:39:43] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:5947:a168:126f:95f4)
[04:39:43] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:5947:a168:126f:95f4) (Changing host)
[04:39:43] *** Joins: skapata (~Skapata@user/skapata)
[04:42:31] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:59:08] *** Joins: badkins (~badkins@136.56.92.199)
[05:05:27] *** Joins: s-liao69 (~s-liao@101.86.96.21)
[05:06:40] *** Quits: s-liao69 (~s-liao@101.86.96.21) (Client Quit)
[05:07:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:08:56] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:13:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:20:41] *** Joins: seninha (~seninha@user/seninha)
[05:26:52] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:40:57] *** Quits: Perryman_ (~perryman@216.97.249.113) (Ping timeout: 240 seconds)
[05:41:03] *** Joins: Perryman (~perryman@216.97.249.113)
[05:44:13] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[05:53:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:07:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:21:49] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:24:46] *** Quits: kanin (~kanin@112.41.64.39) (Read error: Connection reset by peer)
[06:34:35] <ns12> Is there an RFC 3986 Uniform Resource Identifier (URI) parser for Scheme?
[06:36:32] <ns12> Something similar to Common Lisp's puri and quri.
[06:41:53] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[06:42:19] <Zipheir> Which Scheme impl.?  There's URI support for CHICKEN and chibi, but I don't know about the others.
[06:51:00] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[06:51:44] <mdhughes> Chez's behavior seems most correct, it's base 16 floating point!
[06:53:41] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:54:15] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:58:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:59:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[07:07:46] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:6652:db49:fbf5:9855) (Quit: Client closed)
[07:18:53] *** Joins: badkins (~badkins@136.56.92.199)
[07:19:33] <ns12> SLIB has a URI parser https://people.csail.mit.edu/jaffer/slib/URI.html but it's based on the obsolete RFC 2396 instead of the current RFC 3986.
[07:21:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:23:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[07:33:02] *** Joins: masoudd (~masoudd@user/masoudd)
[07:35:53] <Zipheir> ns12: An up-to-date URI library SRFI would be a Good Thing, I think.
[07:36:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:54:11] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23) (Ping timeout: 250 seconds)
[07:54:57] *** Joins: zwr (~zwr@2804:d45:b966:fb00:2d7c:db02:239b:d206)
[08:32:36] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[08:36:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:01:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[09:20:36] *** Joins: badkins (~badkins@136.56.92.199)
[09:24:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[09:35:27] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[09:35:43] *** Joins: madage (~madage@user/madage)
[10:00:25] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:08:33] *** Joins: thevishy (~Nishant@2405:201:f005:c007:c978:2cb1:53a0:d8f2)
[10:18:17] *** Joins: silasfox (~sbv@p200300cec729c70026ec076abc067478.dip0.t-ipconnect.de)
[11:08:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:21:34] *** Joins: rgherdt (~rgherdt@83.236.18.121)
[11:36:29] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:02:34] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.8.2 - https://znc.in)
[12:02:37] *** Joins: civodul (~user@guix/contributor/civodul)
[12:06:42] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:19:14] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:20:14] *** Joins: badkins (~badkins@136.56.92.199)
[12:22:24] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[12:24:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[12:25:06] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[12:25:49] <dpk> Zipheir: i've fixed measurement, i hope
[12:26:41] <dpk> however, i'm no longer convinced that my approach of delaying the measurement was the right one. (i'm also puzzled why the promises donâ€™t appear to be memoized)
[12:27:02] <dpk> i think you might be right that the measurement needs to be eager but the vertebra delayed?
[12:29:41] <dpk> oh, wait, it is memoized
[12:32:26] *** Joins: klovett_ (~klovett@107.127.17.177)
[12:35:57] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 240 seconds)
[12:43:31] <dpk> next job: splitting
[12:44:15] <dpk> which i initially skipped because it looked too much like Haskell
[12:47:09] <dpk> oh. i think *this* is the part that depends on laziness
[12:48:07] <dpk> in a strict language, you can't implement getting the nth element of a tree used as a random-access sequence efficiently using split as given, because you'll also generate new finger trees containing all the elements to the left and right of that element
[12:48:54] <dpk> but still, i think my next experiment will be removing laziness completely
[12:50:43] <dpk> as with my rewrite of their views to leftmost, remove-left and rightmost, remove-right, you probably want to rewrite their Split to three procedures: left-of, right-of, and uhh maybe just call it at
[12:56:10] <dpk> assuming you don't have laziness, at least
[12:59:11] <dpk> the easiest thing to do might actually be to copy their introduction of a split datatype and make lazy constructors for it, like my make-node, though
[13:02:07] <dpk> but: i think an entirely strict implementation of finger trees would be possible
[13:02:20] <dpk> laziness, in this case, just reduces code duplication
[13:03:26] <dpk> well, reduces the code duplication needed to efficiently support getting all permutations of the left, element, and right members of their Split
[13:12:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:28:33] *** Joins: jdevoo (~jdevoo@178.197.193.101)
[13:33:59] *** Quits: saorge_ (~saorge@ns378138.ip-5-196-67.eu) (Read error: Connection reset by peer)
[13:34:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:35:01] *** Parts: jdevoo (~jdevoo@178.197.193.101) ()
[13:35:34] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:41:38] *** Joins: jeko (~jeko@83.118.200.115)
[13:42:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:47:00] <amazigh> The creator of https://srfi.schemers.org/srfi-134/ has a fingertree implementation, it is part of the SRFI-134 repo, but there is another implementation in their personal github
[13:48:19] <amazigh> I disregarded fingertrees, even if the generality / genericity looks appealing, the fact that complexity is good when amortized (amortized complexity) is dubious.
[13:49:06] <amazigh> see https://github.com/scheme-requests-for-implementation/srfi-134/tree/master/finger-tree
[13:49:13] <amazigh> their personal repo is gone
[13:50:14] <amazigh> re complexity, afaiu the algorithm, operating in the middle of the finger tree is slow.
[13:51:59] *** Quits: jeko (~jeko@83.118.200.115) (Ping timeout: 256 seconds)
[13:55:00] *** Quits: evdubs (~evdubs@user/evdubs) (Ping timeout: 240 seconds)
[13:55:04] <dpk> hmm, like Zipheir, he delays the vertebra
[13:55:14] <dpk> maybe i was wrong that that doesn't need to be lazy
[13:55:48] * dpk shudders at the use of generators
[13:56:15] <dpk> the match-tree macro is a nice idea, i should steal that
[14:02:36] *** Joins: evdubs (~evdubs@user/evdubs)
[14:11:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:21:08] *** Joins: badkins (~badkins@136.56.92.199)
[14:23:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:25:41] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[14:27:32] *** Joins: Avichi (~Avichi@145.5.180.3)
[14:39:01] *** Quits: Avichi (~Avichi@145.5.180.3) (Ping timeout: 256 seconds)
[14:48:10] *** Joins: seninha (~seninha@user/seninha)
[15:12:14] *** Joins: Avichi (~Avichi@145.5.180.3)
[15:13:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[15:24:40] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[15:34:33] *** Quits: Avichi (~Avichi@145.5.180.3) (Ping timeout: 256 seconds)
[15:44:36] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[15:44:49] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[15:58:16] *** Joins: badkins (~badkins@136.56.92.199)
[16:04:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[16:04:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:06:31] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[16:21:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:37:37] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:47:18] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fd91:b5ed:c30f:b9c2)
[16:47:18] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fd91:b5ed:c30f:b9c2) (Changing host)
[16:47:18] *** Joins: skapata (~Skapata@user/skapata)
[16:55:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[16:59:54] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[17:01:17] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[17:07:18] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:16:27] *** Quits: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se) (Remote host closed the connection)
[17:16:51] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[17:22:53] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:9823:214d:db98:b3c3)
[17:43:21] <dpk> hmm https://hackage.haskell.org/package/hw-fingertree-strict
[17:44:58] <dpk> that has a ! annotation on the vertebra, meaning it's strict too
[17:50:16] <dpk> but it's lazy in Data.Sequence
[17:50:29] <dpk> i can't believe nobody has really analysed this, i mean, come on
[17:56:16] <Franciman> dpk: are you familiar with okasaki's methods of analysis?
[18:10:06] *** Joins: masoudd (~masoudd@user/masoudd)
[18:16:40] *** Joins: badkins (~badkins@136.56.92.199)
[18:21:25] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[18:24:15] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[18:25:09] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[18:26:06] *** Quits: evdubs (~evdubs@user/evdubs) (Ping timeout: 272 seconds)
[18:27:06] *** Joins: badkins (~badkins@136.56.92.199)
[18:27:27] *** Quits: X-Scale (~ARM@31.22.160.28) (Ping timeout: 252 seconds)
[18:27:27] *** X-Scale` is now known as X-Scale
[18:27:43] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:29:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:30:09] *** Joins: evdubs (~evdubs@user/evdubs)
[18:31:34] *** Joins: aeth (~aeth@user/aeth)
[18:34:17] *** Joins: X-Scale` (~ARM@92.250.101.104)
[18:35:30] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:35:42] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 252 seconds)
[18:36:08] *** X-Scale` is now known as X-Scale
[18:51:17] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:01:05] *** Quits: nalaginrut (~nalaginru@113.89.99.173) (Ping timeout: 256 seconds)
[19:06:12] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 240 seconds)
[19:18:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:19:56] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 272 seconds)
[19:23:24] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[19:26:47] *** Joins: seninha (~seninha@user/seninha)
[19:28:21] *** Joins: nalaginrut (~nalaginru@113.89.99.173)
[19:28:50] *** Quits: thevishy (~Nishant@2405:201:f005:c007:c978:2cb1:53a0:d8f2) (Quit: Leaving)
[19:58:40] *** Joins: notzmv (~zmv@user/notzmv)
[20:00:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[20:07:33] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[20:10:06] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:10:46] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[20:28:07] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[20:28:27] *** Joins: civodul (~user@guix/contributor/civodul)
[20:32:36] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[20:33:02] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:33:43] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[20:34:51] *** Quits: tokie (~tokie@thales.strtok.net) (Quit: WeeChat 1.9.1)
[20:41:12] <Zipheir> The SRFI 101 implementation (another Okasaki structure) is worth looking at, too; at the moment, it definitely seems a simpler way of implementing rlists than getting finger-trees exactly right.
[20:43:18] <Zipheir> dpk: Good find.  It's definitely easier to understand than the Data.Sequence source.
[20:43:34] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:9823:214d:db98:b3c3) (Quit: Client closed)
[20:43:58] <Zipheir> I would like to see an implementation in a strict language, at this point, but I'm not confident anyone has really worked out what laziness is necessary to ensure the stated complexities.
[20:46:04] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 272 seconds)
[20:46:16] *** ChanServ sets mode: +o Zipheir
[20:46:29] *** Zipheir sets mode: -b *!*catonano@*.cust.vodafonedsl.it
[20:46:38] *** ChanServ sets mode: -o Zipheir
[20:50:19] <Zipheir> amazigh: I'm kind of in agreement.  I'm wondering if all of the amortized complexity calculations from the original paper has started a cargo cult...
[20:52:51] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:80a3:f5a9:9ce8:ca83)
[21:01:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[21:07:46] *** Joins: seninha (~seninha@user/seninha)
[21:22:09] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[21:24:40] <dpk> i think Clojureâ€™s persistent vectors may make a better persistent deque with efficient random access  https://hypirion.com/musings/understanding-persistent-vector-pt-1
[21:24:51] <dpk> than finger trees, that is
[21:27:34] <Zipheir> What's wrong with banker's deques?
[21:29:03] <Zipheir> OK, "practically O(1)" in this post is "O(log n), but usually closer to O(1)".
[21:29:18] <Zipheir> CS professors are weeping.
[21:31:14] <Zipheir> My impression is that when someone says something is O(1) (unamortized) they're either obviously right or exaggerating.
[21:32:12] <Zipheir> Hence I hope we can stop idolizing and embrace the logarithm.
[21:35:27] <Zipheir> Generalized random-access sequences aren't well-served by deques, so I guess I'd tend toward the SRFI 101 implementation.
[21:35:56] <Zipheir> I don't know if Okasaki gave a name to that structure beyond "binary tree lists" or "random-access sequences".
[21:39:19] <Zipheir> But I would trust it over Rich Hickey's hacks.
[21:40:12] <amazigh> I did not dive a lot but apparantly immutablejs picked rich hickey algorithm from clojure and they both write O(log32(n)) even if it only makes sense for marketing reasons
[21:40:54] <amazigh> I am curious to learn how puting values only in the leaf can help the worst case
[21:41:23] <Zipheir> What is log32 ?
[21:41:30] <amazigh> log(n) / log(32)
[21:41:38] <Zipheir> Ah.
[21:42:08] <Zipheir> But 1/log(32) is a constant...
[21:45:53] <Zipheir> Maybe I'm just feeling frustrated by the thought "there's no point working on any of this, people will just use vectors/<trendy structure> by <trendy genius>"
[21:46:08] <amazigh> hey hey
[21:46:11] <amazigh> I feel seen ;)
[21:46:17] <Zipheir> Time to work on something else, perhaps.
[21:46:46] <amazigh> I am working on this because I lost the energy for everything else, scheme included.
[21:46:55] <amazigh> :|
[21:47:08] <amazigh> I mean, I thinking "what's the point?"
[21:47:22] <Zipheir> Yeah, I can relate.
[21:47:25] <amazigh> It is especially difficult since Lassi K. went missing.
[21:47:40] <Zipheir> True.  I haven't heard anything from Lassi for quite a while.
[21:48:35] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:9823:214d:db98:b3c3)
[21:48:38] *** Quits: silasfox (~sbv@p200300cec729c70026ec076abc067478.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[21:48:39] <amazigh> also, I changed job, and they have another kind of misterious IP clause
[21:48:45] <Zipheir> Uh oh.
[21:49:42] <amazigh> something along the line "you can work on something outside X, even for money. BUT you can't do Y, Z, etc..." which boils down to you can't do serious opensource work
[21:51:07] <Zipheir> Ugh.
[21:51:23] <amazigh> I will see how it goes
[21:51:39] <gwatt> Does your jurisdiction have legal protections that supercede your company's policies?
[21:51:46] <amazigh> some people do oss stuff. Maybe there is 20% scheme I do not know about yet
[21:52:09] <amazigh> idk :)
[21:54:05] *** Joins: TCZ (~tcz@91.150.178.124)
[21:54:11] <mdhughes> "Premature optimization is the root of all evil." â€”Don Knuth
[21:56:37] <sham1> Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our
[21:56:39] <sham1> opportunities in that critical 3%.
[21:56:41] <Zipheir> I'm wondering if we can generalize that to just "optimization".
[21:56:45] <sham1> People tend to forget about that critical 3%
[21:56:51] *** Quits: TCZ (~tcz@91.150.178.124) (Client Quit)
[21:57:51] <Zipheir> And I hope that, if we can really get it down to a critical 3%, that we can apply some rigorous methods to optimizing.
[21:58:49] <Zipheir> The compiler books will tell you first thing that an optimization that is not correctness- (meaning) preserving is not an optimization, but we rarely see that in practice.
[21:59:59] *** Joins: TCZ (~tcz@91.150.178.124)
[22:00:03] <Zipheir> Or rather, we don't have much reason to believe that we're looking at meaning-preserving optimizations beyond "it usually works".
[22:00:04] <gwatt> I wonder how much of that is C/C++ code rife with undefined behavior
[22:02:02] *** Joins: tokie (~tokie@thales.strtok.net)
[22:02:03] <Zipheir> I think it's very common to read/hear an elegant presentation of some data structure/algorithm, then go out and look for a practical implementation.  And it's incomprehensible, 10,000+ lines long, and full of mysterious optimizations.
[22:02:23] <Zipheir> Maybe this is the chasm between CS and programming, and maybe it's avoidable.
[22:02:30] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[22:02:45] <tokie> it might have started out as elegant
[22:04:07] <mdhughes> That's why I stick with XP practices. "Do the simplest thing that could possibly work", "Don't repeat yourself", and "You ain't gonna need it" in particular.
[22:04:21] <Zipheir> Maybe.  Or maybe people found bugs in the elegant version, but no one's updated the original paper. :-/
[22:04:36] <mdhughes> And then test the hell out of it. Optimization is job last-before-shipping.
[22:05:27] <Zipheir> I think we just have to write simpler, shorter software.
[22:05:46] <Zipheir> Programming is hard for us monkeys.
[22:05:46] <tokie> it's hard these days, especially with concurrency
[22:05:56] <sham1> gwatt: way too much. Of course we have tools that can be used to help fix it, so it's more a social problem more than anything
[22:06:14] <tokie> for years i worked at a company that sold a DNS server product for ISPs and it was the fastest DNS resolver in the world, and the things we did to make it that fast are ridiculous
[22:06:33] <tokie> but if we didn't make it as fast as it was, it wouldn't have competed in the market
[22:06:39] <Zipheir> I can imagine.
[22:07:09] <tokie> it also might have required an ISP to buy 700 servers instead of 70
[22:07:10] <Zipheir> That's the other thing; programmers spend much more time thinking about speed than they do about correctness.
[22:07:11] <mdhughes> But hopefully someone wrote it correctly and slow first.
[22:07:20] <mdhughes> But given how well DNS works, probably not.
[22:07:24] <tokie> mdhughes: no, that's not possible
[22:07:25] <gwatt> How much faster was it than competitors? 
[22:07:33] <tokie> 10-20x
[22:07:48] <tokie> competitors could maybe do 100k qps? this thing can do 2million+ on a laptop
[22:08:18] <tokie> but the "YAGNI" approach never would have built that software. it was built to be highly concurrent from the ground up
[22:08:32] <tokie> not that i'm against YAGNI - it's just sometimes hard
[22:08:41] <tokie> there's still a place for design
[22:08:46] <Zipheir> YAGNI?
[22:08:52] <Zipheir> Ah, figured it out.
[22:08:53] <tokie> "you ain't gonna need it"
[22:09:12] <tokie> this is why i like things like scheme as a hobby, or haskell, or writing schemes. it allows me to escape industry and go back to correctness
[22:10:11] <mdhughes> You do need it if you're building concurrent software. But you don't optimize or "architect" more than you need.
[22:10:36] <mdhughes> And you never code more than you can test.
[22:11:02] <mdhughes> Or, you know, the other approach is the Tacoma Narrows Bridge Methodlogy, which is what most industry uses.
[22:11:08] <Zipheir> Tests are very important, but not enough.
[22:11:49] <mdhughes> If something can't be tested, it's not real, it's religion.
[22:12:07] <Zipheir> Well, we've had this discussion many times.
[22:12:17] <Zipheir> In any case, I am in favor of tests!
[22:12:25] <mdhughes> (those tests may and should include human QA, not just machines, because machines are stupid garbage programmed by humans)
[22:13:18] <Zipheir> Presumably we're machines that are better-programmed to make mistakes.
[22:13:39] <tokie> i blame most of the mistakes on C++
[22:13:41] <tokie> :D
[22:14:14] <mdhughes> Most of the worst mistakes Humans can make are lethal and got weeded out of our gene pool in the last 3.5B years. Computers in even 60M years might be pretty good!
[22:16:14] <amazigh> That is a positive thought
[22:16:16] <Zipheir> Provided we discover replicating computers and selection kicks in.  But we may not want to do that...
[22:16:51] <mdhughes> Oh, it's bad news for us, but we're not likely to make it thru this century.
[22:16:54] <gwatt> I think people have been turning ML/AI/etc at computer code for a while now
[22:17:29] <mdhughes> See Rudy Rucker's Software series for robot evolution: https://www.rudyrucker.com/wares/
[22:17:38] <Zipheir> I've been meaning to read that series.
[22:18:10] <mdhughes> It is *fantastic*. Every decade or so I go thru it again.
[22:19:22] <mdhughes> https://mdhughes.tech/2018/09/02/what-im-reading-software-wetware-by-rudy-rucker/
[22:20:21] <Zipheir> Cool.
[22:21:02] <Zipheir> I found out about them via an excerpt in The Mind's I by Hofstader & Dennett (a really good book, BTW).
[22:21:39] <mdhughes> Yeah, I read that, tho GEB was the one I focused on and reread to death.
[22:22:03] <amazigh> mdhughes: did you read the new racket book, new to me at least: don't teach coding: before reading this book?
[22:22:17] <mdhughes> You give me an Achilles, Tortoise, Hare parable, I'm there.
[22:22:23] <Zipheir> Hah.
[22:23:03] <mdhughes> amazigh: Nope. Still grinding on LOL before I get back to another code book.
[22:23:21] <amazigh> LOL?
[22:23:23] <Zipheir> LOL is funny, appropriately.
[22:23:40] <Zipheir> The Land of Lisp!
[22:23:51] <Zipheir> It has a good music video, too.
[22:24:25] <Zipheir> amazigh: https://www.youtube.com/watch?v=HM1Zb3xmvMc
[22:24:35] <mdhughes> OH, right, it's the "yer a wizard Henry" book.
[22:25:01] <Zipheir> (Killer guitar part, I have to say.)
[22:25:05] <mdhughes> Oh, the other LOL, Let Over Lambda. Land of Lisp (LoL) is a much easier read, and more danceable!
[22:25:26] <Zipheir> Hah, oops.
[22:25:32] <mdhughes> LoL is less slanderous to Schemers than LOL, but not as useful for it, either.
[22:26:15] <Zipheir> LoL also goes full Godwin on the Haskellers.
[22:29:40] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:30:20] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[22:38:37] *** Quits: nalaginrut (~nalaginru@113.89.99.173) (Remote host closed the connection)
[22:41:14] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[22:41:14] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[22:41:14] *** Joins: turlando (~turlando@user/turlando)
[22:42:35] <tokie> oops, i turned that video on while my SO is interviewing
[22:42:36] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Killed (NickServ (GHOST command used by nomagno_!~nomagno@193.31.69.185)))
[22:42:38] <tokie> :D:D:D
[22:42:50] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[22:45:29] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[22:48:55] *** Joins: badkins (~badkins@136.56.92.199)
[23:13:26] <jcowan> Knuth also said that in any field of engineering an optimization of 12%, easily achieved, is always worthwhile.  I forget the book this is in; I think it's the same one that contains his article "Structured programming with goto statements"
[23:16:15] *** Joins: seninha (~seninha@user/seninha)
[23:30:38] <Zipheir> Agreed, if and only if it is a meaning-preserving change.
[23:32:45] <Zipheir> (Taking into account "you ain't gonna need it"; streamline the semantics if you can, but make sure they hold.)
[23:34:16] *** Joins: klf (~klf@66.220.205.98)
[23:36:36] <klf> I am asked to write a parser for a Racket/Scmeme-like language for a Compiler course that I am taking.  The PLY examples shown in tutorial are for languages that heavily rely on keywords.  Racket/Scheme doesn't. 
[23:37:44] <klf> Can someone give me a high-level overview how to parse syntactic forms?
[23:37:54] <klf> like a lambda, for example
[23:40:25] <klf> Here's the grammar that I've prepared. (http://codepad.org/MtabOHt2)    It's supposed to be a mini subset  of the language, of course. 
[23:42:04] <Zipheir> That looks OK to me.
[23:42:32] <Zipheir> klf: What parsing tools are you using, or are you rolling your own?
[23:42:45] <klf> PLY
[23:43:17] <klf> But the 25 minute tutorial which the TA gave was for miniJava :S
[23:43:41] <Zipheir> Is that an LALR(1) generator?
[23:43:56] <klf> I just want to know at a high level how can you write a parser that can recognize syntactical forms without the use of keywords.
[23:44:02] <klf> Zipheir, yes sir.
[23:44:04] <Zipheir> If so, that grammar is probably most of what you need.
[23:44:22] <Zipheir> What are "keywords" in this context?
[23:44:28] <Zipheir> Terminals of the grammaR/
[23:44:32] <Zipheir> *grammar?
[23:44:44] <klf> Zipheir, oh please, not the Racket keyword for parameters
[23:44:56] <klf> let me take that back
[23:45:14] <Zipheir> I was pretty sure you didn't mean Racket keywords.
[23:45:29] <klf> reserved words like "class", "return", ...
[23:45:40] <klf> :-)
[23:45:41] <sham1> No reason to distinguish those while parsing
[23:45:47] <Zipheir> ^
[23:45:54] <Zipheir> They're just tokens.
[23:45:56] <klf> distinguish what?
[23:45:57] <sham1> They're just identifiers. The fact that they're the first thing in the form makes them special
[23:46:53] <sham1> You don't need to have special handling for `class` or `return` or such with a language that uses S-expressions
[23:47:12] <sham1> You'd only have to care about them during semantic analysis
[23:47:51] <klf> Let me ask about something that I've struggled with for the past 2 days.
[23:47:55] <Zipheir> klf: In particular, your grammar is too extensive.  You don't need to treat string=?, string-length, etc.
[23:48:06] <Zipheir> klf: They're all applications of a procedure to arguments.
[23:48:42] <klf> Zipheir, application of a procedure, what a great segway to my next question.... expansion context...
[23:49:06] <klf> lambda_form = "(" ( ID | "Î»" ) kw-formals expr { expr } ") ;
[23:49:30] <klf> kw-formals = ( "(" lambda_args ")" )
[23:49:39] <klf>            | ( "(" lambda_arg_non_empty "." ID ")" )
[23:50:11] <klf> I won't pollute the channel, it's from my grammar doc.
[23:50:32] <klf> now, how can I write a parser that recognize this syntactic form?
[23:50:39] <klf> the lambda form.
[23:51:25] <klf> I can't think of a way
[23:52:02] <sham1> Well, if you have a (lambda (a b c) (+ a b c)) let's say, you can just parse the a, b and c following the parenthesis as simply identifiers. You consume identifiers until you find the ")" token, which ends your list of formal arguments
[23:52:02] <Zipheir> klf: What do you mean?  I thought you were using a parser generator?
[23:52:29] <sham1> If you encounter ".", you can then take the token after that, parse as an identifier (and then check if your next token is ")", if not, error)
[23:52:33] <Zipheir> Sure, if you're parsing "by hand" (i.e. recursive descent).
[23:52:46] <sham1> Well that's basically the procedure with parser generators as well
[23:53:06] <Zipheir> I'm just not understanding what information klf wants.
[23:53:22] <klf> shaml is kinda getting to it
[23:53:35] <jcowan> You have to decide what "the grammar of Scheme" refers to.  If you track the various Reports, then there is primitive syntax and non-primitive syntax, and in R5 and later you can define your own syntax.
[23:54:43] <jcowan> However, the distinction between primitive and non-primitive is somewhat arbitrary.  The Reports treat if as primitive and cond as non-primitive, but obviously you can define either in terms of the other.
[23:57:23] <Zipheir> Certainly string-length isn't "primitive syntax".
[23:57:25] <klf> shaml, your suggestion relies on my parser parsing  ID "lambda" as the signal
[23:58:19] <klf> but "lambda" can be boudn to something else
[23:58:28] <klf> (Define lambda 1)
[23:59:20] <sham1> Yes
[23:59:26] <sham1> Well
[23:59:30] <sham1> It;s complicated
