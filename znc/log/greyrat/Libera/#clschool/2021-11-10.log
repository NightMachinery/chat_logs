[00:19:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[00:40:46] *** Joins: Oladon (~olad@98.43.81.226)
[00:41:32] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 240 seconds)
[00:51:19] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[01:06:01] *** Joins: pjb (~pjb@user/pjb)
[01:12:30] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:07:33] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:22:22] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[02:37:21] *** antoni is now known as antoszka
[02:56:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1033) (Remote host closed the connection)
[03:17:36] *** Joins: Jing (~hedgehog@2604:a840:3::1033)
[03:43:32] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 240 seconds)
[06:05:53] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[06:08:37] *** Joins: johnjay (~pi@192.142.100.50)
[06:49:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:58:02] *** Quits: sts-q (~sts-q@212.53.219.241) (Ping timeout: 240 seconds)
[06:59:27] *** Joins: sts-q (~sts-q@91.200.108.164)
[07:04:08] <lisp123> This one's been bugging me for the last half hour...how to test if an object is a CLOS object?
[07:04:58] <lisp123> I found some code online but it doesn't seem to work (or I'm doing something wrong): (defun classp (x)  (or (typep x 'cl:class)  #+CMU (typep x 'pcl::class)  #+scl (typep x 'clos::std-class)))
[07:05:12] <mfiano> Depends what you mean, any old CLOS object, or of a specific class?
[07:05:29] <lisp123> any
[07:06:21] <mfiano> (typep obj standard-object)
[07:06:28] <lisp123> (find-class (type-of a)) works but seems a bad way
[07:06:50] <mfiano> type-of cannot be used in code
[07:07:54] <lisp123> mfiano: Thanks, standard-object works!
[07:15:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:17:11] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 245 seconds)
[07:19:01] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[07:53:41] *** beach` is now known as beach
[07:53:54] *** ChanServ sets mode: +o beach
[07:56:12] *** beach sets mode: -o beach
[07:56:35] <beach> lisp123: The term "CLOS object" is meaningless.
[07:58:26] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 246 seconds)
[08:01:54] <mfiano> This is true. Somehow that didn't register for me this time only.
[08:02:16] <mfiano> I just automatically assumed he meant user-defined defclass types.
[08:02:29] <mfiano> I should read more carefully next time.
[08:04:19] <White_Flame> yeah, I noticed that too and considered bringing it up ;)
[08:04:32] <White_Flame> but, beach is around and I don't trust myself to get the wording correct
[08:04:53] <White_Flame> or rather, I trust him to get the wording correct instead
[08:05:45] *** Joins: Oladon (~olad@98.43.81.226)
[08:10:19] <lisp123> beach: Understood, so we should call it 'standard-object'?
[08:10:30] <lisp123> (for anything created via defclass)
[08:13:11] <beach> lisp123: There is a difference between "standard object" and "instance of a standard class"
[08:14:06] <beach> Er, ....
[08:14:17] <beach> Yes, that was right.
[08:14:47] <beach> When you define a class using DEFCLASS, you define a standard class (an instance STANDARD-CLASS), and when you do that, you automatically get STANDARD-OBJECT as a superclass. 
[08:15:36] <beach> But STANDARD-OBJECT can be the superclass of a class other than of a standard class.
[08:16:32] <lisp123> I see. I tried (typep 'something 'standard-class) and it returned NIL, while it worked for 'standard-object
[08:16:54] <beach> OK, listen carefully.
[08:17:26] <beach> "A standard class" means "an instance of the class STANDARD-CLASS" just like "a person" means "an instance of the class PERSON".
[08:18:18] <beach> "An instance of A standard class" means "an instance of an instance of the class STANDARD-CLASS", not "an instance of the class STANDARD-CLASS".
[08:19:03] <beach> So (typep <something> 'standard-class) would be true only for <somthing>s being classes.
[08:19:22] <lisp123> Got it
[08:19:28] <White_Flame> specifically, things that print like #<CLASS ...>
[08:19:34] <beach> Like (typep (find-class 'person) 'standard-class) is true if you defined PERSON with DEFCLASS.
[08:21:38] <beach> So if you want to test whether an object is a standard object (i.e., and instance of the class STANDARD-OBJECT), you do (typep <object> 'standard-object).
[08:22:08] <beach> But if you want to check whether an object is an instance of a standard class, then you do (typep (class-of <object>) 'standard-class).
[08:24:01] <lisp123> Thanks beach, i'll write that down
[08:25:18] <beach> Maybe that's how you do it, but if it were me, I would try to understand it, and once I do, I can derive it when I need it, so I don't write things down.  
[08:25:44] <lisp123> Yes, my memory is very bad though :)
[08:25:49] <beach> I mistakenly took notes the first semester at the university, and failed calculus as a result.  Never did it after that. 
[08:26:21] <lisp123> That means you have a high RAM ;)
[08:26:25] <beach> That's my point, my memory is horrible, so I need to understand and derive from simple facts, precisely so that I don't have to remember. 
[08:27:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:27:05] <beach> No, it's the contrary.  By making sure I can derive things from a few basic facts, I don't need to remember.
[08:27:19] <beach> And I get a deeper understanding for things as a result.
[08:27:39] <lisp123> Yeah, I try and do that as well, but these days I can't remember much to start from 'first principles'
[08:28:36] <beach> How about this one: http://metamodular.com/CLOS-MOP/graph.png
[08:29:07] <lisp123> Very helpful!! Thanks
[08:29:27] <beach> Dashed lines means protocol class I guess, i.e., not meant to be instantiated. 
[08:29:58] <beach> Red names mean instances of STANDARD-CLASS.
[08:30:13] <beach> Blue names mean instances of FUNCALLABLE-STANDARD-CLASS.
[08:30:24] <beach> Green names mean instances of BUILT-IN-CLASS.
[08:30:42] <lisp123> Let me write that down, thanks
[08:30:51] <beach> *sigh* :)
[08:31:01] <beach> You can see it from the color of the border of those metaclasses.
[08:31:11] <beach> STANDARD-CLASS has a red border.
[08:31:19] <beach> FUNCALLABLE-STANDARD-CLASS has a blue border.
[08:31:28] <beach> BUILT-IN-CLASS has a green border. 
[08:31:38] <lisp123> Got it - okay that I can remember / derive :)
[08:31:54] <beach> That's what I mean.
[09:30:43] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:39:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:04:16] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:24:04] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[10:25:17] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[10:46:11] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[10:52:35] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[10:53:02] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[11:05:02] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Read error: Connection reset by peer)
[11:05:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:25:14] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:43:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:59:20] *** Joins: Jing_ (~hedgehog@2604:a840:3::1033)
[12:01:21] *** Quits: Jing (~hedgehog@2604:a840:3::1033) (Ping timeout: 245 seconds)
[12:09:36] *** Joins: light (~light@user/light)
[14:00:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[14:11:03] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[14:20:12] *** Joins: random-nick (~random-ni@87.116.176.55)
[14:26:16] *** paule32_ is now known as paule32
[15:20:54] *** Joins: pjb (~pjb@user/pjb)
[15:50:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:31:05] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:10:08] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[18:19:01] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Read error: Connection reset by peer)
[18:21:40] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:29:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:31:31] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:54:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:22:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:49:05] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:55:05] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:55:41] *** Joins: tyson2 (~user@bras-base-toroon020aw-grc-19-184-148-172-174.dsl.bell.ca)
[21:04:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:04:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:20:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:21:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:28:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:51:29] *** Quits: tyson2 (~user@bras-base-toroon020aw-grc-19-184-148-172-174.dsl.bell.ca) (Remote host closed the connection)
[22:13:58] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:14:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:26:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:33:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:35:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:41:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:05:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[23:11:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:24:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:48:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
