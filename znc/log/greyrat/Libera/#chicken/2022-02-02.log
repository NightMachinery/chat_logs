[00:00:52] *** Joins: skapata (~Skapata@user/skapata)
[00:01:08] <Bunny351> yes, it's kind of strangely designed. I use it mostly for rebuilding when files change, but then I can run it in a separate terminal
[00:01:43] <Bunny351> also, why does it have to mess with the terminal at all? just reading files from another file would be fine
[00:20:54] *** Quits: johnjaye (~pi@173.209.65.233) (Read error: Connection reset by peer)
[00:26:39] *** Joins: johnjaye (~pi@173.209.65.233)
[00:38:37] *** Quits: megane (~megane@chicken/developer/megane) (Ping timeout: 240 seconds)
[00:41:36] *** Joins: crumpy (~crumpo@user/crumpo)
[01:09:53] <zilti[m]> What is entr?
[01:13:33] *** Joins: m455 (~m455@user/m455)
[01:16:55] *** Quits: m455 (~m455@user/m455) (Client Quit)
[01:24:59] *** Joins: m455 (~m455@user/m455)
[01:27:11] <Bunny351> http://eradman.com/entrproject/
[01:27:28] <Bunny351> really handy sometimes, but a bit awkward to use
[01:28:35] <zilti[m]> Oh. Yes, that does look really handy.
[01:29:17] <zilti[m]> Alright, here we go, let's see how my fight with QML callbacks is gonna go...
[01:31:40] <johnjaye> Qt modeling language?
[01:42:13] <zilti[m]> Yes :)
[01:53:04] <zilti[m]> ...ooh that's gonna be a  nightmare...
[02:38:11] *** Joins: stee (~stee@mail.nixserve.net)
[02:42:38] <crumpy> C
[02:42:44] <crumpy> oops
[02:42:47] *** Quits: crumpy (~crumpo@user/crumpo) (Quit: Buh bye)
[03:13:54] *** Quits: andyjpb (~andyjpb@user/andyjpb) (Ping timeout: 250 seconds)
[03:39:43] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzzâ€¦)
[04:01:55] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[04:03:38] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Client Quit)
[04:15:38] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Excess Flood)
[04:15:48] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[04:16:03] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Client Quit)
[04:16:49] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[04:17:30] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[04:18:35] <Zipheir> klovett: Do you have any plan to port srfi-101 to CHICKEN 5?  I'd like to use it and would be happy to help with porting efforts if there's a public repo somewhere I can make a PR to.
[04:35:48] <wasamasa> it all lives on svn, no
[04:36:55] <Zipheir> Well, I have an svn account...  I volunteer to do the porting.
[05:00:41] <elflng> i have the whole svn archive...
[05:00:57] <elflng> which is srfi-101?
[05:01:29] <elflng> ooh, nifty.
[05:01:52] <elflng> that reminds me, i need to finish porting the cheap true randomness source to chicken.
[05:03:49] <Zipheir> "flexvectors" came up on #scheme and I was thinking, "I know there's a 'pure' datastructure for that".
[05:03:58] <elflng> there was a paper a few years back about the molecular differences in the silicon leading to a high quality randomness source by timing repeated blocks of simple overflow additions
[05:04:41] <elflng> which i implemented in c in a few diff ways and found that it made a perfectly normalised distribution and was true-random by all available tests
[05:04:58] <elflng> (tried it on several machines, OSes, OS vers, etc)
[05:05:45] <elflng> its quite cute. the one issue is that to do it really efficiently, you need to generate large amounts of randomness at a time and cache it, which is problematic for memory safety.
[05:06:12] <elflng> whats a flexvector? i thought that was just a resizable vector?
[05:06:16] <Zipheir> Yes.
[05:06:28] <Zipheir> (SRFI 214, not yet ported to CHICKEN.)
[05:07:18] <elflng> doesnt that roughly correspond to a dynamic alloced c array?
[05:07:26] <elflng> (flexvector under that definition)
[05:07:38] <Zipheir> Usually.
[05:07:50] <elflng> ... so it should be trivial to do in chicken, yes?
[05:08:32] <elflng> its still only O(log(n)) according to the srfi doc, which is much worse than O(1) 
[05:08:33] <Zipheir> Maybe not *trivial*, but you could probably make a very fast implementation for CHICKEN, yes.
[05:08:46] <Zipheir> O(1) is usually a myth :)
[05:08:49] <elflng> so its just replacing a list with a balanced bintree
[05:08:57] <elflng> C array ref is O(1), yes?
[05:09:09] <elflng> (its not 1 but it is constant, or should be.)
[05:09:28] <Zipheir> Only allegedly.  IIUC it's going to be more like O(log n) with large arrays.
[05:09:37] <Zipheir> What with paging, etc.
[05:09:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:10:13] <elflng> paging isnt calculable in the general case, i thought?
[05:10:43] <Zipheir> "It is not much of an exaggeration to say that the difference between a functional and an imperative programmer is that the functional programmer doesn't assume an O(1) array access." --Richard Bird
[05:10:52] <elflng> heh
[05:10:59] <Zipheir> Though he goes on to say the same thing about "O(1) array access".
[05:11:36] <elflng> i assume that if im dealing with enough memory per single structure where paging becomes an issue, that ive already optimised the structure to where it will be O(1) :)
[05:11:42] <Zipheir> I don't think flexvectors are an abomination, but I like rlists more.
[05:12:29] <Zipheir> Hah.
[05:12:31] <elflng> from the srfi-101 doc, it looks like its just redefining the extant primitives to handle the new structure but doesnt actually define the implementation for the new structure
[05:12:57] <Zipheir> Implementation detail :)
[05:13:00] <elflng> which would really kill the efficiency of anything that uses both rlists and regular lists.
[05:13:20] <elflng> not really, i really dont like overloading things that are used everywhere
[05:13:29] <elflng> its a fast way to make things way way less efficient. :)
[05:13:41] <Zipheir> It's described by Okasaki in _Pure Functional Data Structures_.
[05:13:49] <Zipheir> Oh, does it overload cons, et al?
[05:13:54] <elflng> yes.
[05:14:48] <elflng> cons, car, cdr, pair?, list, quote, equal?, eq? ca*d*r, null? list?, make-list, length, append, reverse, list-tail, etc etc etc
[05:14:48] <Zipheir> That's weird design, indeed.
[05:15:02] <elflng> list-ref, map, for-each
[05:15:02] <Zipheir> I think this came up when it was being considered for r7rs...
[05:15:02] <elflng> etc
[05:15:12] <elflng> this is what i would consider Bad Design inherently.
[05:15:58] <elflng> from the srfi doc, it looks like its basically what plt wanted to do with lists as a whole, which is why it doesnt matter to r6. 
[05:16:08] <elflng> which is probably why its not supported at all in chicken :)
[05:17:06] <elflng> why do we have flexvectors when theres already an array (or more than one array) srfi with mutable size?
[05:20:31] <Zipheir> I guess the idea with reusing all of those identifiers was to make rlists drop-in replacements for lists.  Still, that makes it hard to use without renaming...
[05:20:53] <Zipheir> No idea.  If you're talking about Lucier's array SRFI(s), probably people didn't fully understand them.
[05:21:48] <Zipheir> OK, all the stuff from SRFI 101 was prefaced with rlist- for R7RS.
[05:21:54] <Zipheir> More verbose, but less of a mess.
[05:22:51] <elflng> i was thinking of the slib array stuff, not lucier's//
[05:27:10] <elflng> fwiw, doing a vector-resize without a copy shouldnt be that difficult in scheme.
[05:27:36] <elflng> still in O(1) (theoretically) though slightly slower O(1)
[05:28:21] <elflng> would either require overloading the basic vector ops or a new set of funcs...
[05:29:02] <Zipheir> Side effects!
[05:29:12] <elflng> not from side effects
[05:29:26] <Zipheir> I think if srfi-101 is ported to CHICKEN 5, it should definitely rename everything: rlist-cons, rlist?, etc.
[05:34:39] <elflng> rs-vector? make-rs-vector, rs-vector, rs-vector-ref,set!,length,resize! rs-vector->vector,list and vice versa... anything im missing for the basics?
[05:35:25] <elflng> (fwiw, chicken already has vector-resize built in)
[05:35:49] <elflng> (so this is kinda a waste of time for me to show how it can be done in a general case without increasing time complexity)
[05:36:04] <elflng> im happy to finish writing the code if youre interested, though i do have a few things i need to do first.
[05:36:07] <Zipheir> Why rs-?
[05:36:13] <elflng> resizable
[05:36:18] <Zipheir> SRFI 214 settled on flexvector- .
[05:37:59] <elflng> im not doing srfi-214, im just trying to show a trivial way to do resizable vectors without increasing time complexity :)
[05:38:05] <elflng> and without doing copies.
[05:38:38] <Zipheir> OK.
[05:39:05] <Zipheir> Well, if it *does* happen as an egg, I think following the names from SRFI 214 would be less confusing.
[05:39:45] <elflng> im not trying to do an egg, or an SRFI, just a trivial thought on how to go about doing such things whilst requiring neither copies nor worse time than O(1) (assuming vector-ref is O(1))
[05:39:57] <elflng> meaning no hidden cost
[05:40:53] <elflng> every certain number of grows, there will be a slight bump, but without copying :)
[05:41:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:42:20] <Zipheir> That makes sense.  I'm sorry for nagging.
[05:43:29] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[05:44:34] <elflng> ooh, i think this will actually be a recursive structure... nifty. 
[05:44:52] <elflng> (recursive in the sense of its using its own definition)
[05:46:46] <elflng> that might actually push it up slighly for complexity, so probably not. hm. just trying to handle the extreme cases, very large numbers of grows)
[05:46:54] <elflng> mismatched ) argh
[05:49:41] <elflng> ah, i could probably accept an option for what to do in these cases, that would be best - whether to copy after certain points or to build recursively. i dont want there to be cases where large numbers of grows followed by shrink grow shrink grow etc cause issues for known boundaries
[06:22:40] *** Quits: johnjaye (~pi@173.209.65.233) (Read error: Connection reset by peer)
[06:28:13] *** Joins: johnjaye (~pi@173.209.65.233)
[07:38:12] *** Quits: johnjaye (~pi@173.209.65.233) (Read error: Connection reset by peer)
[07:44:04] *** Joins: johnjaye (~pi@173.209.65.233)
[08:03:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:19:56] *** Joins: sts-q (~heiko@91.200.108.169)
[08:31:37] *** Parts: sts-q (~heiko@91.200.108.169) ()
[08:32:10] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 260 seconds)
[08:45:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:01:19] *** Joins: megane (~megane@chicken/developer/megane)
[09:01:19] *** Quits: megane (~megane@chicken/developer/megane) (Client Quit)
[09:04:58] *** Joins: megane (~megane@chicken/developer/megane)
[09:08:12] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (*.net *.split)
[09:08:12] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (*.net *.split)
[09:08:12] *** Quits: Lysandros (~Lysandros@user/lysandros) (*.net *.split)
[09:08:12] *** Quits: ecloud (~quassel@192.89.120.58) (*.net *.split)
[09:08:12] *** Quits: ASau (~user@lmpc.drb.insel.de) (*.net *.split)
[09:08:13] *** Quits: Zipheir (~wcm@98.4.178.27) (*.net *.split)
[09:08:13] *** Quits: Bunny351 (~Bunny351@85.88.17.217) (*.net *.split)
[09:08:13] *** Quits: rnlf (~rnlf@mail.base13.de) (*.net *.split)
[09:08:13] *** Quits: mangol (~mangol@lisp.fi) (*.net *.split)
[09:08:13] *** Quits: johnjaye (~pi@173.209.65.233) (*.net *.split)
[09:08:14] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:08:14] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (*.net *.split)
[09:08:14] *** Quits: evhan (195cc081a6@2604:bf00:561:2000::118) (*.net *.split)
[09:08:14] *** Quits: mdhughes (~mdhughes@user/mdhughes) (*.net *.split)
[09:08:14] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[09:08:14] *** Quits: idstam (~idstam@37.250.42.49.bredband.tre.se) (*.net *.split)
[09:08:15] *** Quits: chicken_m (~chickenru@2604:3d08:5684:3000::5fab) (*.net *.split)
[09:08:15] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[09:08:15] *** Quits: nmeum (~nmeum@barium.8pit.net) (*.net *.split)
[09:08:15] *** Quits: j0ni (c79e08d4b1@2604:bf00:561:2000::2a) (*.net *.split)
[09:08:15] *** Quits: Kooda (~kooda@natsu.upyum.com) (*.net *.split)
[09:08:15] *** Quits: Andrew (andrew@andrewyu.org) (*.net *.split)
[09:08:15] *** Quits: wxallowed (~d4@151.51.155.155) (*.net *.split)
[09:08:16] *** Quits: vandusen (~nobody@static.131.93.47.78.clients.your-server.de) (*.net *.split)
[09:08:16] *** Quits: curium (~curium@mail.clouded.monster) (*.net *.split)
[09:08:16] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:08:16] *** Quits: DeeEff (~DeeEff@user/deeeff) (*.net *.split)
[09:08:17] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[09:08:17] *** Quits: alaricsp (~alaric@user/alaricsp) (*.net *.split)
[09:08:17] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: samth (sid14502@id-14502.ilkley.irccloud.com) (*.net *.split)
[09:12:25] *** Quits: m455 (~m455@user/m455) (Ping timeout: 256 seconds)
[09:14:18] *** Joins: m455 (~m455@user/m455)
[09:21:14] *** Joins: curium (~curium@mail.clouded.monster)
[09:21:14] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[09:21:14] *** Joins: DeeEff (~DeeEff@user/deeeff)
[09:21:14] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[09:21:14] *** Joins: alaricsp (~alaric@user/alaricsp)
[09:22:45] *** Joins: johnjaye (~pi@173.209.65.233)
[09:22:45] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:22:45] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[09:22:45] *** Joins: evhan (195cc081a6@2604:bf00:561:2000::118)
[09:22:45] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[09:22:45] *** Joins: buhman (sid411355@user/buhman)
[09:22:45] *** Joins: Andrew (andrew@andrewyu.org)
[09:22:45] *** Joins: idstam (~idstam@37.250.42.49.bredband.tre.se)
[09:22:45] *** Joins: chicken_m (~chickenru@2604:3d08:5684:3000::5fab)
[09:22:45] *** Joins: elflng (~elflng@5.28.137.182)
[09:22:45] *** Joins: nmeum (~nmeum@barium.8pit.net)
[09:22:45] *** Joins: j0ni (c79e08d4b1@2604:bf00:561:2000::2a)
[09:22:45] *** Joins: Kooda (~kooda@natsu.upyum.com)
[09:22:45] *** Joins: wxallowed (~d4@151.51.155.155)
[09:22:45] *** Joins: vandusen (~nobody@static.131.93.47.78.clients.your-server.de)
[09:23:35] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[09:23:35] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[09:23:35] *** Joins: Lysandros (~Lysandros@user/lysandros)
[09:23:35] *** Joins: ecloud (~quassel@192.89.120.58)
[09:23:35] *** Joins: ASau (~user@lmpc.drb.insel.de)
[09:23:35] *** Joins: Zipheir (~wcm@98.4.178.27)
[09:23:35] *** Joins: Bunny351 (~Bunny351@85.88.17.217)
[09:23:35] *** Joins: rnlf (~rnlf@mail.base13.de)
[09:23:35] *** Joins: mangol (~mangol@lisp.fi)
[09:24:52] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[09:24:52] *** Joins: samth (sid14502@id-14502.ilkley.irccloud.com)
[09:25:23] *** Quits: nmeum (~nmeum@barium.8pit.net) (Remote host closed the connection)
[09:28:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:28:51] *** Quits: m455 (~m455@user/m455) (Ping timeout: 256 seconds)
[09:29:16] *** Joins: m455 (~m455@user/m455)
[09:53:04] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:55:47] <sjamaan> moin
[11:22:06] <elflng> moinmoin
[12:23:34] *** Joins: crumpo (~crumpo@user/crumpo)
[12:35:54] <vandusen> SPAM! SPAM! SPAM! by freeeeee
[12:55:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:04:39] <vandusen> SPAM! SPAM! SPAM! by freeee
[13:13:54] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[13:54:19] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[13:59:45] *** Joins: crumpy (~crumpo@user/crumpo)
[14:02:10] *** Quits: crumpo (~crumpo@user/crumpo) (Ping timeout: 250 seconds)
[14:31:06] *** Joins: ublx (~ublx@user/ublx)
[14:35:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:49:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:55:32] *** Quits: dTal (quassel@dragonbox/wizzard/dtal) (Ping timeout: 240 seconds)
[14:57:13] *** Joins: dTal (~quassel@dragonbox/wizzard/dtal)
[15:04:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:34:02] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 250 seconds)
[15:39:04] *** Joins: crumpo (~crumpo@user/crumpo)
[15:39:49] *** Quits: crumpy (~crumpo@user/crumpo) (Read error: Connection reset by peer)
[15:46:27] <elflng> whats with the vandusen spam spam spam? theres better spam detection for the pastebin now?
[15:51:45] <wasamasa> yes
[16:01:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:03:49] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[17:14:47] *** Joins: ublx (~ublx@user/ublx)
[17:33:14] *** Quits: crumpo (~crumpo@user/crumpo) (Read error: Connection reset by peer)
[17:33:20] *** Joins: crumpy (~crumpo@user/crumpo)
[17:41:15] *** Joins: johnjaye (~pi@173.209.65.233)
[18:09:06] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[18:12:01] <zilti[m]> How does the detection work? "legit if number of parentheses in the paste exceeds 10"? :P
[18:13:05] <wasamasa> it used to use for the amount of URLs in the paste, but I extended it to scan for bad terms coming from a text file
[18:13:52] <wasamasa> such as specific URL shorteners used by the mentally disturbed individual who keeps spamming us for weeks with the same shit
[18:18:02] *** Joins: crumpo (~crumpo@user/crumpo)
[18:18:07] *** Quits: crumpy (~crumpo@user/crumpo) (Ping timeout: 256 seconds)
[18:49:02] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[18:49:53] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[18:50:17] *** sudden is now known as Guest6340
[18:52:17] <jcowan> SRFI 214 is portable; direct alternatives aren't, because the great majority of Schemes can't change a vector's lsngth or replace an object with another object under the covers
[18:52:36] <jcowan> portability ftw when writing srfis
[18:53:41] *** Joins: rgherdt (~rgherdt@2a01:598:d034:c97e:11bb:66de:c8c5:ba80)
[18:58:23] *** Joins: rgherdt_ (~rgherdt@2a01:598:d037:d3a6:906b:554f:cb0b:40ac)
[18:59:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[19:00:55] *** Quits: rgherdt (~rgherdt@2a01:598:d034:c97e:11bb:66de:c8c5:ba80) (Ping timeout: 250 seconds)
[19:01:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[19:04:39] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[19:06:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:09:05] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[19:09:40] <Bunny351> jcowan: what does it mean when r7rs says for case conversion "note that language-sensitive mappings and foldings are not used"?
[19:09:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a2:707c:1835:c0de:6122:f29b)
[19:12:13] *** Quits: rgherdt_ (~rgherdt@2a01:598:d037:d3a6:906b:554f:cb0b:40ac) (Ping timeout: 240 seconds)
[19:15:04] <florz> Bunny351: I'd think that probably refers to the fact that case mapping can be locale dependent?
[19:15:51] <Bunny351> so special cases for TR/AZ or German ÃŸ would not apply?
[19:16:05] <Bunny351> hm, the latter would, I guess
[19:17:41] <Bunny351> the utf8 egg does locale-specific special casing on dotted-small-i for turkish and azeri and lithuanian
[19:17:59] <Bunny351> I thought unicode would make such things unecessary...
[19:18:26] <florz> no idea re the specific details, but something like that would be my guess, yeah
[19:22:02] <wasamasa> I think it's about high time that people rebrand themselves from "solution engineer" to "problem creator"
[19:23:20] <fantazo> wasamasa: that would be honest. honesty is not reflected in a paycheck.
[19:23:35] <wasamasa> if it were, I'd be stupidly rich
[19:23:52] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03e:5edc:3d8b:ba5b:9d4c:db65)
[19:26:26] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a2:707c:1835:c0de:6122:f29b) (Ping timeout: 260 seconds)
[19:27:49] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[19:28:16] <zilti[m]> I mean I shouldn't be surprised considering all the "titles" out there, but... there are really people unironically calling themselves "solution engineer"?
[19:28:41] <wasamasa> sorry, solutions engineer
[19:32:07] <wasamasa> it's apparently a role sitting somewhere between sales and software development
[19:37:49] *** SoniEx2 is now known as Soni
[19:40:37] *** Joins: johnjaye (~pi@173.209.65.233)
[19:55:20] *** Quits: idstam (~idstam@37.250.42.49.bredband.tre.se) (Ping timeout: 250 seconds)
[19:57:31] *** Joins: idstam (~idstam@185.176.246.116)
[20:03:49] <zilti[m]> I used object-evict to put a Chicken data structure into unmanaged memory. Am I right that using object->pointer I am getting a pointer I can pass to a C function?
[20:05:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d)
[20:05:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a529:1406:bd3:aa5d) (Changing host)
[20:05:04] *** Joins: skapata (~Skapata@user/skapata)
[20:07:40] *** Joins: mason (~mason@redhat/mason)
[20:17:25] *** Quits: crumpo (~crumpo@user/crumpo) (Remote host closed the connection)
[20:17:45] *** Joins: crumpo (~crumpo@user/crumpo)
[20:20:36] <Bunny351> yes
[20:24:03] <zilti[m]> So the hunt for the reason for the "segmentation violation" continues then :)
[20:38:12] <zilti[m]> The stack trace it prints shows ##sys#make-c-string as the last procedure called
[20:40:34] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[21:00:28] *** Joins: crumpy (~crumpo@user/crumpo)
[21:01:21] *** Quits: crumpo (~crumpo@user/crumpo) (Read error: Connection reset by peer)
[21:13:28] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:13:36] <klovett> Zipheir: i hadn't but i will. (afraid a short job will be stretched due to the temp un-ergo typing situation >(
[21:17:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:d032:2336:f2b4:2f3d:eb17:4ece)
[21:20:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03e:5edc:3d8b:ba5b:9d4c:db65) (Ping timeout: 250 seconds)
[21:23:35] <Zipheir> klovett: Thanks. :)
[21:24:18] <Zipheir> I'm working on an alternate random-access-list impl. using finger trees, but it's still very much in the alpha testing phase.
[21:26:22] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03e:8408:7089:33b8:9853:8578)
[21:29:07] *** Quits: rgherdt__ (~rgherdt@2a01:598:d032:2336:f2b4:2f3d:eb17:4ece) (Ping timeout: 250 seconds)
[21:31:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Remote host closed the connection)
[21:32:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1ab:a2b7:c9fe:3fc7:8f06:34d4)
[21:34:03] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[21:35:42] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03e:8408:7089:33b8:9853:8578) (Ping timeout: 260 seconds)
[21:40:52] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b0:3f8c:c52b:e782:9975:9671)
[21:41:32] <vandusen> [eggs repo (r41059, by kon)] C5 "port", save as 0.0.3
[21:42:06] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:43:23] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:43:38] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1ab:a2b7:c9fe:3fc7:8f06:34d4) (Ping timeout: 260 seconds)
[21:45:39] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Client Quit)
[21:45:40] <jcowan> Bunny351: 
[21:45:55] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:46:04] <jcowan> yes, it is TR/AZ case folding that r7rs doesn't require
[21:47:03] <jcowan> sldo, it does not require Sigma to downcase to findal-sigma.  R5RS has an algorithm for this, but it is incomplata anyway
[21:47:14] <jcowan> s/sldo/also
[21:47:31] <vandusen> [eggs repo (r41060, by kon)] rel 0.0.3
[21:48:24] *** Joins: rgherdt__ (~rgherdt@2a01:598:d037:32b4:fdd:95d9:2815:da09)
[21:51:18] *** Joins: rgherdt (~rgherdt@2a01:598:d038:93a5:d559:9d2d:267e:60be)
[21:51:20] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b0:3f8c:c52b:e782:9975:9671) (Ping timeout: 252 seconds)
[21:51:24] <vandusen> [eggs repo (r41061, by kon)] srfi-101 egg release
[21:52:15] <vandusen> [eggs repo (r41062, by kon)] rel 0.0.3 doc
[21:53:16] *** Quits: rgherdt__ (~rgherdt@2a01:598:d037:32b4:fdd:95d9:2815:da09) (Ping timeout: 245 seconds)
[22:03:22] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1a2:b790:8080:15cb:d0a:bacd)
[22:05:49] *** Quits: rgherdt (~rgherdt@2a01:598:d038:93a5:d559:9d2d:267e:60be) (Ping timeout: 240 seconds)
[22:05:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:8fc5:e166:fc5d:1805:7d48)
[22:08:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1a2:b790:8080:15cb:d0a:bacd) (Ping timeout: 245 seconds)
[22:12:14] <vandusen> [eggs] srfi-101 version 0.0.3 (for CHICKEN 5) has been released
[22:16:23] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1af:d688:3317:8282:257f:fa3b)
[22:19:06] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:8fc5:e166:fc5d:1805:7d48) (Ping timeout: 260 seconds)
[22:42:52] <Zipheir> klovett: That was fast.  Thanks again.
[22:45:56] <klovett> Zipheir: yw
[22:58:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1af:a6a1:6098:a5e1:1960:321e)
[23:01:06] *** Quits: Lysandros (~Lysandros@user/lysandros) (Ping timeout: 256 seconds)
[23:01:11] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1af:d688:3317:8282:257f:fa3b) (Ping timeout: 245 seconds)
[23:03:28] *** Joins: Lysandros (~Lysandros@2a02:aa13:8104:c080:21a:a0ff:fea7:35e)
[23:11:53] *** Joins: rgherdt_ (~rgherdt@2a01:598:d039:8599:53e9:dd17:5623:94f)
[23:14:40] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1af:a6a1:6098:a5e1:1960:321e) (Ping timeout: 250 seconds)
[23:49:24] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:fc47:7053:7d93:7b:22f5)
[23:51:47] *** Quits: rgherdt_ (~rgherdt@2a01:598:d039:8599:53e9:dd17:5623:94f) (Ping timeout: 252 seconds)
[23:53:53] *** Joins: rgherdt_ (~rgherdt@2a01:598:d038:d67f:f4bd:95ae:c30:7222)
[23:56:17] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:fc47:7053:7d93:7b:22f5) (Ping timeout: 240 seconds)
