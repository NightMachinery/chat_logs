[00:03:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[00:04:58] <rpav> Alipha: ðŸ¤” is it "c++-valid" though
[00:05:24] <rpav> like, if you point at an object with one pointer, and then you destroy the object with another pointer, and construct a new one there, is the first pointer "still valid"
[00:05:37] <rpav> assume of course it's the same type
[00:07:44] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[00:09:09] <Alipha> rpav: no, you'd need std::launder in that case. however, that's not how insert/erase are defined: they'll shift the elements by using operator=
[00:09:14] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[00:09:43] <rpav> ahhh
[00:13:15] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[00:16:29] *** Joins: sbrothy_ (~sbrothy@192038130004.mbb.telenor.dk)
[00:17:08] *** Quits: sbrothy_ (~sbrothy@192038130004.mbb.telenor.dk) (Client Quit)
[00:17:41] *** Joins: Simplar (~Simplar@188.163.93.76)
[00:22:17] *** Joins: PJBoy (~PJBoy@user/pjboy)
[00:24:49] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[00:33:19] <yolo> https://github.com/microsoft/GSL  saw gsl here and there, how useful is this? I never used it
[00:33:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[00:33:34] <yolo> it works for windows and gcc/clang, i don't do windows though
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:36:35] <PJBoy> it's alright
[00:36:52] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:37:13] <PJBoy> nothing special
[00:38:01] <LordKalma> the GSL is something that you'll see often in the c++ core guidelines
[00:38:05] <PJBoy> wouldn't personally ever use it
[00:38:19] <LordKalma> microsoft/GSL is one implementation of it, if you want its tools
[00:38:33] <LordKalma> gsl::owner is probably the most notable
[00:38:42] <yolo> i have yet to see other implementations though ,it's like the only one
[00:39:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[00:39:29] <PJBoy> only one I know of too
[00:39:36] <yolo> anyways, i don't know how useful it is, in the process of using c++, gsl just came up here and there, so I was wonderling, what the heck is it and how useful it is in real
[00:39:48] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:5de6:1c42:8396:cb23)
[00:40:22] <PJBoy> their CMake uses FetchContent for some reason
[00:41:11] <rpav> it has a few useful things i think i had my own versions of at some point
[00:41:27] <yolo> i was working on the asio code for two days, after that I was thinking, unless i need a high-througput async network, the bsd-socket() + select/epoll seems much simpler for normal usecases
[00:41:32] <rpav> i don't think any of them are particularly complex but they are some minor utility here and there
[00:41:54] <yolo> i will skip gsl for now
[00:44:18] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[00:46:16] *** Quits: tonitch (~tonitch@user/tonitch) (Quit: ZNC 1.8.2 - https://znc.in)
[00:47:02] *** Joins: tonitch (~tonitch@user/tonitch)
[00:47:03] <mike18> c++ code paste
[00:47:09] <mike18> ok found it :D
[00:47:46] <mike18> https://wandbox.org/permlink/rAYnqNJiVe3UBprG why is using namespace std not allowed here?
[00:47:58] <mike18> i think that worked fine with c++11?
[00:51:39] <kalven> still failing with -std=c++17
[00:54:42] <mike18> but for that example isnt there a way to avoid typing ::std all time?
[00:54:56] <mike18> for a non prod task
[00:59:40] <mike18> kalven: no?
[01:00:12] <kalven> no what?
[01:01:09] <mike18> how to use namespace std here without all typing - lets say for a simple experiment
[01:01:37] <kalven> I don't know, I never do 'using namespace'
[01:01:45] <mike18> coderpad.io uses c++17 - i dont want to type all std there
[01:01:52] <mike18> to save time
[01:01:56] <mike18> does that make sense?
[01:02:12] <kalven> namespace s = std; // saved you two chars
[01:03:22] <mike18> thats the new bad way?
[01:03:40] <kalven> namespace aliases have been there from the start
[01:03:55] <mike18> will i need to write s::string word; now?
[01:04:14] <kalven> I'm the wrong person to ask. Like I said, I never do 'using namespace', so I don't have a good solution for not typing 'std::' all the time
[01:04:21] <mike18> ok
[01:04:24] <mike18> i know its bad
[01:04:33] <mike18> but if i can save typing time in an interview :D
[01:04:59] <rpav> i used to not type std:: all the time; now it's just habit and actually a bit weird not to
[01:05:13] <rpav> or, i used to _want_ to not, though much of the time i ended up doing so anyway
[01:05:16] <mike18> @rpav do you see the link i posted?
[01:05:25] <kalven> mike18: then don't name your stuff the same as things in the standard library.
[01:05:26] <rpav> briefly; also this is irc, @ means something else
[01:05:46] <mike18> there is a data class in std??
[01:05:51] <rpav> there is std::data?
[01:06:05] <rpav> https://en.cppreference.com/w/cpp/iterator/data <- huh
[01:06:09] <mike18> error says: error: reference to 'data' is ambiguous
[01:06:15] <rpav> moral: still don't `using namespace std`;
[01:06:15] <mike18> oha
[01:07:00] <mike18> ok lession leanred
[01:07:20] <rpav> _maybe_ pick a few things like string/vector that you 1) use all the time 2) will probably not make your own 3) really can't stand to type std:: for
[01:07:39] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:07:45] <mike18> e.g. myClassName -> mydata
[01:08:30] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:08:57] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:11:00] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:13:05] <rpav> ...and `using std::string;` etc, that is
[01:13:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[01:13:27] <rpav> ...but never in your header/namespace, which sortof makes the problem remain
[01:13:41] <mike18> @rpav sure but in an interview typing all extra chars?
[01:15:08] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[01:15:25] <rpav> usually an interview will not having you writing code to compile, but if so .. i mean, you have bigger problems that typing std:: a lot
[01:17:38] <LordKalma> or... just type std:.
[01:18:15] *** Joins: skapata (~Skapata@user/skapata)
[01:19:42] <rpav> if it's for a really enterprisey position, `namespace Standard = std;`
[01:20:07] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[01:22:06] <LordKalma> class StandardVectorFactory{static template<typename T> std::vector<T> makeEmptyVector{return {};}}; // Is this enterpresy enoygh?
[01:22:26] <LordKalma> needs more verbosity maybe
[01:22:49] <kalven> https://github.com/DeanRoddey/CIDLib - this guy writes 'tCIDLib::TVoid' instead of 'void'
[01:23:07] <LordKalma> now THAT is enterprise
[01:23:18] <kalven> unless you cram in a void factory, I don't think it can get much more enterprise
[01:23:39] <mike18> @rpav and than Standard::string foo; ?
[01:24:04] <LordKalma> "Full set of standard libraries including [...]" They don't know what standarad means
[01:24:05] <LordKalma> but sure
[01:24:19] <LordKalma> also wtf is that lib?
[01:24:23] <LordKalma> is it a do-everything?
[01:24:49] <kalven> it's the base lib for some home automation system
[01:24:54] <rpav> yes though maybe build an entire framework like LordKalma suggests, including Standard_CXX_11::StringFactory(Worker, ProducerChain, DeliveryManager, ...)
[01:24:59] <kalven> the guy occasionally posts in r/cpp
[01:25:03] <rpav> and really impress them with your ability to do very little with a lot of code
[01:25:49] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:26:43] <LordKalma> you need a DI framework, and to do everything as services
[01:27:15] <LordKalma> it's like everything is plugin-composition, but with singletons :D
[01:27:44] *** Quits: malloy (~jimery@113.116.52.22) (Ping timeout: 250 seconds)
[01:27:47] *** Quits: magla (~gelignite@55d4ea14.access.ecotel.net) (Quit: Stay safe!)
[01:28:39] *** Joins: n3rdy1 (~n3rdy1@2a00:79e1:abc:1564:ccb7:9ff4:1442:61e5)
[01:29:57] *** Joins: malloy (~jimery@116.30.223.163)
[01:30:01] <rpav> so not really composable? ;)
[01:30:14] <rpav> or "composable as long as you only want one composition"
[01:30:35] <rpav> (i'm really not sure tbh)
[01:31:59] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[01:32:04] <johnny> don't be hatin on DI frameworks LordKalma :(
[01:32:43] <johnny> as long as they're actually services and not just calling functions you could call normally
[01:33:10] <johnny> err as long as you're using it for actual services and not just to call pure or native functions
[01:33:35] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f432:d78d:9f19:bda7) (Ping timeout: 268 seconds)
[01:33:39] <johnny> i heard some folks use DI frameworks for that :(
[01:34:30] <PJBoy> ObjectAbstractionServiceManagerMixinFactory
[01:34:56] <PJBoy> sounds like something crypto++ would non-ironically have
[01:36:06] <johnny> i've never really written java. i can read it, and have typed a few lines to fix things, but i can't say i've acutally written java
[01:36:31] <rpav> it can be ok
[01:36:42] <johnny> it doesn't look terrible
[01:36:52] <johnny> kotlin seems neat tho. i've modified a bit of that as well
[01:37:10] <rpav> like "android java" is fairly reasonable though these days java-the-language can easily be avoided, but even doing so wouldn't make the above problems go away
[01:37:26] <rpav> java-the-language is just kinda dumb and unhelpful for a lot of stuff
[01:37:38] <johnny> what is "a lot of stuff" ?
[01:38:43] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[01:38:51] <johnny> obviously one wouldn't use it when one should use code compiled to some sort of code meant to be executed "directly" by the machine
[01:39:58] <rpav> i mean it lacks some automation and syntax sugar things which is a lot of what you get with kotlin etc
[01:40:41] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:40:54] <johnny> kotlin seems to make things nicer, but it's nothing you acn't do with regular java right?
[01:41:10] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[01:41:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:25] *** ChanServ sets mode: +v npaperbot
[01:41:29] <johnny> i never really looked into how it was implemented
[01:41:57] <rpav> few things are anything you can't do with something else
[01:42:24] <johnny> indeed. i should have been more specific
[01:42:55] <rpav> (and really i'm not familiar with "new" java which i hear has more bells and whistles than "older" java)
[01:43:14] <johnny> well i know they added somethign like lambdas
[01:43:48] <johnny> i stopped talking bad about java once i realized the language had changed a lot.. so maybe criticisms weren't necessarily valid or need to be updated
[01:44:02] *** Quits: jsbach (~jsbach@2a01:c23:5d99:7b00:a93c:c538:a20e:4c5a) (Ping timeout: 240 seconds)
[01:44:15] <johnny> i know more folks directly who write clojure over regular java tho
[01:44:23] <rpav> imo the biggest issues are more with java-the-jvm-and-infrastructure
[01:44:41] <rpav> language is UI; you can slap a new UI on something, but that won't make the backend less crap
[01:44:49] <rpav> like you can patch over rough spots, but
[01:49:33] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:49:57] *** Quits: Vasileios (~truexfals@194.219.11.202.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[01:50:14] *** Quits: n3rdy1 (~n3rdy1@2a00:79e1:abc:1564:ccb7:9ff4:1442:61e5) (Ping timeout: 268 seconds)
[01:52:09] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:55:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 240 seconds)
[01:57:24] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:977:6b5a:2c9e:7514)
[01:58:48] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:01:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:02:10] *** Joins: seninha (~seninha@user/seninha)
[02:02:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[02:05:45] <ashafq> Which header file contains std::size_t?
[02:06:03] <ashafq> contains the definition of std::size_t*
[02:06:31] <LordKalma> cstdint.h iirc? Not sure
[02:06:42] <kalven> cstddef
[02:06:44] <LordKalma> Cppreference.com
[02:06:46] <LordKalma> That
[02:06:52] <ashafq> Yes, cstddef
[02:07:03] <kalven> I live in the future, so I just 'import std;' and get everything
[02:09:50] <ashafq> There should be a tool that analyzes C++ file and then add the appropriate header files
[02:10:16] <PJBoy> there's include-what-you-use
[02:13:17] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 240 seconds)
[02:17:32] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[02:24:33] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:28:28] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: No route to host)
[02:32:36] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[02:33:10] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[02:39:05] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[02:42:05] *** Joins: pulse (~pulse@user/pulse)
[02:42:58] *** Joins: Vasileios (~truexfals@194.219.11.202.dsl.dyn.forthnet.gr)
[02:43:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:48:28] *** Quits: Vasileios (~truexfals@194.219.11.202.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[02:56:50] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[03:00:06] *** Joins: skapata (~Skapata@user/skapata)
[03:06:16] *** Joins: luizfrds (~Luiz@152.250.243.147)
[03:06:48] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[03:07:49] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[03:12:54] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:5de6:1c42:8396:cb23) (Quit: CodePoint)
[03:17:29] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:19:21] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[03:21:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:24:52] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:26:59] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:37:12] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:977:6b5a:2c9e:7514) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:42:13] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:46:05] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:46:12] *** Joins: KombuchaKip (~kip@192.252.230.5)
[03:48:33] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:51:37] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[03:51:45] *** Joins: Rayke (rayke@user/rayke)
[03:54:13] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[04:00:16] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:05:02] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Ping timeout: 260 seconds)
[04:06:06] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 256 seconds)
[04:08:07] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[04:11:02] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 240 seconds)
[04:11:15] *** Joins: hexingb (~hexingb@2409:8902:7bc3:bd2c:1dd1:5dc1:15d2:de08)
[04:12:40] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:14:06] *** Quits: emerent (~quassel@p200300cd57044360ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:14:49] *** Joins: emerent (~quassel@p200300cd5704433bba27ebfffed28a59.dip0.t-ipconnect.de)
[04:15:14] *** Joins: gehn (~gehn@user/gehn)
[04:15:17] *** Quits: hexingb (~hexingb@2409:8902:7bc3:bd2c:1dd1:5dc1:15d2:de08) (Ping timeout: 240 seconds)
[04:17:24] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[04:17:38] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[04:17:53] *** Joins: hexingb (~hexingb@36.155.28.143)
[04:19:27] *** Joins: HvszrStykp (~X@81.171.62.86)
[04:23:26] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:46] <hnOsmium0001[m]> include-what-you-use is the other way around isn't it?
[04:26:32] <hnOsmium0001[m]> I know clangd has a function to automatically add the appropreiate include when you autocomplete, but it doesn't seem to recognize existing #includes with <> and, and really likes to use stdint.h over cstdint as well
[04:28:58] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[04:32:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:42:16] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:7383:58e3:41e7:460a) (Ping timeout: 250 seconds)
[04:42:35] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:46:15] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[04:51:32] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[04:52:19] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[04:54:47] *** Joins: skapata (~Skapata@user/skapata)
[04:56:17] *** Joins: troller (~p@80.240.216.69)
[04:56:28] *** Quits: proller (~p@2a02:6b8:b081:a412::1:24) (Ping timeout: 268 seconds)
[05:00:30] *** Quits: malloy (~jimery@116.30.223.163) (Ping timeout: 250 seconds)
[05:01:04] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[05:01:28] *** Joins: troller (~p@2a02:6b8:b081:6432::1:36)
[05:01:47] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:64fd) (Quit: Leaving)
[05:01:49] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:02:12] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 250 seconds)
[05:02:40] *** Joins: malloy (~jimery@116.30.223.163)
[05:04:45] <rpav> use everything; include everything
[05:05:15] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[05:09:57] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 240 seconds)
[05:13:32] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[05:14:16] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[05:15:01] *** Joins: hexingb (~hexingb@111.32.64.41)
[05:16:37] *** Joins: zmt01 (~zmt00@user/zmt00)
[05:16:56] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[05:17:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[05:17:57] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 240 seconds)
[05:19:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[05:22:59] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:27:21] <johnny> on that note.. did the C++23 proposed change for import std; go through yet? or did it get denied
[05:28:12] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[05:36:06] *** Joins: skapata (~Skapata@user/skapata)
[05:38:17] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[05:40:34] <mike18> whats going to be new in c++23?
[05:41:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:24] *** ChanServ sets mode: +v npaperbot
[05:43:43] <mike18> any idea whats wrong here? https://wandbox.org/permlink/gBQio3uZMXNOoK17
[05:44:27] <rpav> probably lack of initialization or copy
[05:45:12] <mike18> no warning...?
[05:47:50] <rpav> row = row in the body is probably an error
[05:47:53] <rpav> or col = col
[05:49:21] <rpav> doesn't tuple have a builtin std::hash impl now
[05:49:23] <rpav> maybe not
[05:49:52] <mike18> hmmm
[05:50:41] <rpav> yes that was your issue
[05:51:03] <rpav> pos(int row, int col) : row(row), col(col) {} // actually works
[05:51:27] <mike18> didnt see it :)
[05:51:50] <mike18> dont you think compiler could warn here? :)
[05:51:53] <rpav> though i would recommend avoiding same-named parameters/members
[05:52:34] <mike18> i usually do: pos(int row_, int col_): row(row_), col(col_) {}
[05:52:53] <rpav> that is advisable
[05:53:11] <rpav> there probably is a warning flag, but tbh you shouldn't even have to get that far
[05:53:28] <rpav> like your editor+linter should have wavey underlines that show it, though i should test that they actually do
[05:54:04] <rpav> yeah they do, though this only underlines the `=`
[05:55:23] <mike18> true true
[05:55:30] <mike18> what ide you use?
[05:56:53] <rpav> also fwiw clang _does_ warn with -Wall
[05:57:00] <rpav> emacs + lsp-mode + stuff
[05:57:37] <rpav> any major editor/ide these days that's not a billion years old and/or out of date or misconfigured ought to warn though
[06:00:37] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[06:04:06] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:04:37] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 240 seconds)
[06:05:17] *** Joins: Guest44100 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net)
[06:10:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[06:10:58] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[06:11:05] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:11:43] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[06:14:56] <mike18> rpav: is there a code formatting button in wandbox?
[06:16:04] <Alipha> mike18: no, but I'm sure there's plenty of other sites which fornat
[06:21:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:23:15] *** Joins: skapata (~Skapata@191.177.185.183)
[06:23:15] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[06:23:15] *** Joins: skapata (~Skapata@user/skapata)
[06:25:09] <rpav> does godbolt? i don't even know .. i mostly format code as i go even with clang-format handy
[06:26:06] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[06:29:49] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[06:30:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[06:30:57] *** Joins: KombuchaKip (~kip@192.252.230.5)
[06:31:00] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[06:31:11] <lockywolf> How do I make the configuration step fail in cmake?
[06:31:39] <rpav> message(FATAL_ERROR "some message") or whatever is one easy way
[06:31:39] <lockywolf> So that if I run cmake .. next time, it would retry the check.
[06:31:51] <rpav> er
[06:32:04] <rpav> it seems you're asking two different questions
[06:33:15] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[06:33:23] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[06:37:01] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:41:00] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[06:41:03] <lockywolf> wouldn't it retry the check if it failed?
[06:41:55] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[06:46:25] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:47:56] *** Joins: skapata (~Skapata@191.177.185.183)
[06:47:56] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[06:47:56] *** Joins: skapata (~Skapata@user/skapata)
[06:48:37] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 240 seconds)
[06:51:46] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:52:17] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[06:52:43] <mike18> how to implement the initialization list constructor in this example? https://wandbox.org/permlink/XY9ZXhbztT4Wf1Bo
[06:53:43] <mike18> i guess doesnt make much sense in that struct?
[06:55:18] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[06:55:39] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:56:12] <rpav> lockywolf: it would, but mostly because cmake would stop at that point and not complete or generate anything
[06:58:09] <rpav> if you want something to run everytime, run it and don't save/check any value in the cache, though if you're calling some other code that does you may not be able to do much about it
[07:02:29] <mike18> https://wandbox.org/permlink/RLaghwnFpQb24FIY ... can you do the initializer constructor better compared to what i did?
[07:02:58] <mike18> it might not be a good idea to use it at all in that case - just to for demo...
[07:03:14] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[07:08:28] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:12:24] *** Joins: DrMax__ (~DrMax@132.215.96.30)
[07:14:16] *** Joins: adeliktas0 (~adeliktas@i59F4DB7C.versanet.de)
[07:15:57] *** Quits: adeliktas (~adeliktas@i59F52DD4.versanet.de) (Ping timeout: 240 seconds)
[07:15:57] *** adeliktas0 is now known as adeliktas
[07:16:06] *** Quits: DrMax_ (~DrMax@132.215.96.30) (Ping timeout: 250 seconds)
[07:20:37] *** Joins: KombuchaKip (~kip@192.252.230.5)
[07:22:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:24:08] *** Joins: HvszrStykp (~X@81.171.62.86)
[07:26:27] <RandomReader> mike18 - quick notes: https://wandbox.org/permlink/MV1BaaNPZXAPKlXH
[07:26:49] <mike18> RandomReader: thank u
[07:27:55] <mike18> the initialization list was just to test
[07:28:53] <RandomReader> right, but it doesn't really make sense without a very different kind of example
[07:29:08] <mike18> i could store a vector of something in the struct
[07:29:13] <mike18> than it could make sense
[07:29:22] <RandomReader> e.g. for a dynamic container, then you'd probably check the .size(), reserve some space, loop and store stuff
[07:29:52] <RandomReader> for a vector math operation, maybe you'd just loop and sum, and then store the single result
[07:30:39] <RandomReader> put another way, it really only makes sense when a variable number of values makes sense
[07:30:47] <mike18> do default member initializers exist in c++14?
[07:31:03] *** Quits: hexingb (~hexingb@111.32.64.41) (Read error: Connection reset by peer)
[07:31:12] *** Joins: hexingb (~hexingb@111.32.64.41)
[07:32:24] <RandomReader> yes, that example compiles with C++11
[07:33:14] <RandomReader> pre-C++17 does have some minor differences in requirements for object initialization, which might explain why you ended up with those move tests that don't really move
[07:33:37] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 240 seconds)
[07:33:41] <RandomReader> those lines in C++11/14 would have complained about constructors/operators if they were incorrect, but not actually *used* them, which is confusing
[07:36:41] <RandomReader> this *specific* example is also interesting in a move sense, in that I wouldn't bother, since there's no optimization
[07:37:34] <RandomReader> but if pos(0,0) had special meaning, or there were some other resource to track, this is the kind of approach you'd want
[07:38:25] <RandomReader> often there are ways you can compose though .. for example, if you need a dynamically-allocated resource, you could use a unique_ptr member to hold it
[07:38:50] <RandomReader> and since it already knows how to move, that means you wouldn't need to write anything special for your class move constructor, and it could just be  = default too
[07:39:29] <RandomReader> the overall idea being: when you can make the members with special behavior (like move) "smaller" or "self-contained", then you have to write less code for bigger classes
[07:40:25] <RandomReader> depends on what you're doing of course, if you have two members that have to be in sync with each other, you probably end up with code anyway
[07:42:30] <mike18> what does the default do?
[07:42:37] <mike18> use default implementation?
[07:42:58] <RandomReader> =default has the compiler generate it, can be used for default/copy/move constructors, and copy/move assignment
[07:43:12] <RandomReader> what it generates is the same as recursively doing the same thing to each member
[07:44:07] <mike18> but how i know if it generates the right thing?
[07:44:27] <RandomReader> simple reasoning: if you write it, will you do the same thing to each member, and nothing else?
[07:44:37] <mike18> yeah true
[07:45:05] <mike18> thats why you have to write: int row = 0; ?
[07:45:08] <RandomReader> e.g. your copy constructor in correct form would look like:  pos(const pos &rhs) : row(rhs.row), col(rhs.col) {}
[07:45:56] <RandomReader> which is just doing the same copy constructor for each member, same as what the compiler will generate
[07:46:29] <RandomReader> I wrote that initializer to cover two cases: what I wanted the default constructor to do, so I didn't have to write row(0), col(0)
[07:46:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:47:07] <RandomReader> and for the initializer_list constructor where there's only one entry and it doesn't touch col .. because that constructor (as written) has no member initializers, it will initialize them using the member defaults before it enters the body (and the loop)
[07:47:17] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[07:47:43] <RandomReader> so both row and col are 0 before it ever starts looking at v
[07:48:00] <mike18> ok?
[07:48:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:48:37] *** Quits: Guest44100 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:48:56] <RandomReader> maybe the examples in here will help: https://en.cppreference.com/w/cpp/language/constructor
[07:50:24] <RandomReader> oops, this one actually: https://en.cppreference.com/w/cpp/language/data_members#Member_initialization
[07:52:16] <RandomReader> in general, using default member initializers means the members will start out the way you want if you leave them out of a constructor, so less problems if you forget something
[07:52:56] <RandomReader> not perfect, but helpful
[07:56:21] <RandomReader> oh, I forgot to mention, that "and nothing else" is why the move constructor *doesn't* use =default
[07:56:42] <RandomReader> the compiler-generated one would just do the same as  row(std::move(rhs.row)), col(std::move(rhs.col))
[07:56:53] <RandomReader> but moving an int isn't special, and wouldn't set the rhs one to 0
[07:57:04] <RandomReader> so this needs to be written out in order to do that
[07:57:25] <RandomReader> (put another way, moving an int is the same as copying it)
[07:58:55] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:4de3:f824:1243:8d01)
[07:59:00] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[07:59:23] <InPhase> +1 for default member initializers to avoid serious errors.
[08:00:45] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:11:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::f5f4) (Ping timeout: 240 seconds)
[08:13:21] *** Joins: chozorho (~chozorho@2601:146:300:c30::5672)
[08:14:58] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[08:15:54] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 250 seconds)
[08:16:21] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:16:34] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[08:17:49] *** Joins: hexingb (~hexingb@36.155.28.143)
[08:24:57] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:28:58] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[08:46:24] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[08:51:30] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[08:53:54] *** Joins: Burgundy (~NA@86.121.143.206)
[08:54:53] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Read error: Connection reset by peer)
[08:56:31] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[08:57:53] *** Joins: Guest4433 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net)
[08:58:22] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 250 seconds)
[08:58:41] *** Quits: Guest4433 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net) (Client Quit)
[09:02:03] *** Joins: Burgundy (~NA@86.121.143.206)
[09:08:25] <ville> does qtcreator's debugger have a decent memory viewer? at the minimum set an address/click gets a display that i can set the shown interval. select if it's in bytes, quads... binary, hex... how many columns...
[09:08:52] <ville> or know of a debugger that does at _minimum_ those things for linux?
[09:10:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:11:22] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[09:11:51] *** Joins: hexingb (~hexingb@111.32.64.41)
[09:12:22] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:18:43] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Ping timeout: 250 seconds)
[09:19:03] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[09:27:30] *** Joins: Vasileios (~truexfals@62.1.59.136.dsl.dyn.forthnet.gr)
[09:30:31] <kalven> well I mean.. just dd with an appropriate offset from /proc/pid/mem and pipe to xxd
[09:32:11] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:34:32] *** Quits: MetaNova (zero-one@znc/supporter/metanova) (Read error: Connection reset by peer)
[09:35:35] *** Joins: MetaNova (zero-one@znc/supporter/metanova)
[09:39:32] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[09:39:54] *** Joins: jehelset (~jeh@2001:700:302:10::e)
[09:41:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:26] *** ChanServ sets mode: +v npaperbot
[09:43:28] <ville> that won't let me set values
[09:50:06] <TinoDidriksen> https://github.com/scanmem/scanmem
[09:51:25] <TinoDidriksen> Found from searching for "Cheat Engine Linux", 'cause Cheat Engine is basically a memory debugger.
[09:54:16] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[09:57:41] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[09:57:49] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[09:59:56] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:157e:6f97:4b74:e7ad:3ce4)
[10:01:35] <ville> kdevelop has a memory viewer, but it doesn't update it's contents... almost as if these people never use their own tools
[10:04:29] <ville> and for being a gui tool you can't right click on a variable to get a memory view on it apparently
[10:10:58] *** Quits: chozorho (~chozorho@2601:146:300:c30::5672) (Ping timeout: 268 seconds)
[10:11:35] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:12:40] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[10:13:03] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[10:21:56] *** Joins: HvszrStykp (~X@81.171.62.86)
[10:31:11] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:31:15] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a138:50bb:90ed:bd22)
[10:31:23] <hnOsmium0001[m]> supposedly eclipse CDT has a decent memory viewer
[10:31:47] <supernova> hey folks
[10:31:52] <supernova> I need to take leftmost variable from last line of file.
[10:31:52] <supernova> getIncrement.seekg( sizeof( ClientData )) gives me last line.
[10:31:52] <supernova> How can i easily reach for leftmost variable in last line, which is id?
[10:33:36] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:38:17] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:39:17] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[10:40:35] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:44:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9863:10db:b7d4:d519)
[10:48:49] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[10:51:05] *** Quits: edr (~edr@user/edr) (Ping timeout: 256 seconds)
[10:51:47] *** Joins: edr (~edr@enlo.co)
[10:51:47] *** Quits: edr (~edr@enlo.co) (Changing host)
[10:51:47] *** Joins: edr (~edr@user/edr)
[10:57:37] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:157e:6f97:4b74:e7ad:3ce4) (Ping timeout: 240 seconds)
[10:59:00] *** Joins: jsbach (~jsbach@2a01:c23:610a:7100:c7f6:ccd9:af55:8916)
[11:04:41] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[11:05:09] *** Joins: hexingb (~hexingb@111.32.64.41)
[11:13:47] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:13:55] *** Joins: true-false (~truexfals@194.219.40.199.dsl.dyn.forthnet.gr)
[11:16:37] *** Quits: Vasileios (~truexfals@62.1.59.136.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[11:17:02] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:214a:84c4:2877:e621:cda5)
[11:23:59] *** gentooclimax is now known as climax
[11:24:24] *** climax is now known as gentooclimax
[11:39:39] <ville> supernova: your question doesn't make lot of sense. so i take it you've opened a file and are trying to interpret its contents? is it some common file format/type?
[11:43:14] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:45:05] <supernova> all data in file converted to binary
[11:48:51] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:50:05] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[11:53:38] *** Joins: Terminus (~null@user/terminus)
[11:56:56] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a138:50bb:90ed:bd22) (Quit: No Ping reply in 180 seconds.)
[11:57:06] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a138:50bb:90ed:bd22)
[12:02:09] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:03:19] <RandomReader> that doesn't make much sense either, a file is just a sequence of bytes...
[12:04:53] <LordKalma> this discussion again?
[12:05:01] <RandomReader> you'll need more information about the format, the arrangement of data in it
[12:06:32] *** Quits: naur (naur@user/naur) (Ping timeout: 240 seconds)
[12:06:40] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:07:36] <ville> supernova: the term "leftmost" makes very little sense for us. though it may make sense to you due to context you have which you have not communicated to us
[12:08:44] <ville> supernova: neither does "variable" make any sense to us. and the "which is id" doesn't make sense either
[12:13:01] <Haohmaru> need a sense amplifier
[12:13:29] *** Quits: p-i- (~Ohmu@2403:6200:8978:84e4:f981:e2b1:518d:d697) (Remote host closed the connection)
[12:17:32] *** Joins: naur (~naur@user/naur)
[12:19:55] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[12:20:20] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[12:21:23] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:21:59] *** Joins: robod34 (~Username@79.113.195.239)
[12:22:29] *** Joins: andreasbuhr (~quassel@p549db547.dip0.t-ipconnect.de)
[12:33:24] *** gentooclimax is now known as climax
[12:33:29] *** climax is now known as gentooclimax
[12:33:38] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[12:36:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[12:39:50] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a138:50bb:90ed:bd22) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:46:07] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 256 seconds)
[12:46:56] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Ping timeout: 252 seconds)
[12:48:40] *** Joins: klys (~mdasoh@show.op8.us)
[12:48:59] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:17c:7455:c683:1f78)
[12:49:41] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[12:55:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[13:01:02] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[13:01:17] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Ping timeout: 240 seconds)
[13:01:59] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 256 seconds)
[13:02:19] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[13:02:21] *** Joins: klys (~mdasoh@show.op8.us)
[13:08:57] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:214a:84c4:2877:e621:cda5) (Ping timeout: 240 seconds)
[13:09:47] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:17c:7455:c683:1f78) (Quit: Konversation terminated!)
[13:10:15] *** Joins: HvszrStykp (~X@81.171.62.86)
[13:11:41] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:16:20] *** Quits: Friithian (~gunqqer@friithian.dev) (Ping timeout: 256 seconds)
[13:16:37] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 240 seconds)
[13:17:21] *** Joins: hexingb (~hexingb@111.32.64.41)
[13:18:53] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:2422:94d7:a47d:d907:5840)
[13:19:08] *** Joins: Friithian (gunqqer@friithian.dev)
[13:19:51] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Quit: leaving)
[13:22:57] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:2422:94d7:a47d:d907:5840) (Ping timeout: 240 seconds)
[13:25:12] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[13:26:17] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Quit: F U)
[13:26:37] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[13:32:43] *** Joins: p-i- (~Ohmu@2403:6200:8978:84e4:f981:e2b1:518d:d697)
[13:33:17] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 240 seconds)
[13:33:54] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Ping timeout: 256 seconds)
[13:35:01] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[13:35:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:39:37] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Ping timeout: 240 seconds)
[13:41:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:26] *** ChanServ sets mode: +v npaperbot
[13:44:18] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[13:51:10] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:53:14] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[13:53:19] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[13:55:19] *** Joins: klys (~mdasoh@show.op8.us)
[13:57:04] *** Quits: adeliktas (~adeliktas@i59F4DB7C.versanet.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[13:57:56] *** Joins: adeliktas (~adeliktas@i59F4DB7C.versanet.de)
[13:58:16] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[13:58:27] *** Joins: hexingb (~hexingb@180.212.209.125)
[14:03:02] <LordKalma> https://www.reddit.com/r/cpp/comments/s7z3se/what_are_you_using_for_guis/
[14:03:06] <LordKalma> results are in and interesting haha
[14:11:02] *** Joins: Simplar (~Simplar@188.163.93.76)
[14:14:08] *** Quits: hexingb (~hexingb@180.212.209.125) (Ping timeout: 256 seconds)
[14:14:11] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6806)
[14:15:03] <ville> i can't see any results
[14:15:52] <LordKalma> voting period is still in, I think you have to vote. fucking reddit pools don't have a show results button
[14:18:34] *** Joins: hexingb (~hexingb@36.155.28.143)
[14:18:36] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6806) (Ping timeout: 250 seconds)
[14:19:20] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6806)
[14:26:24] *** Joins: dfkfs (~dfkfs@178.49.152.42)
[14:29:48] <Haohmaru> mv reddit f*kkit
[14:31:28] *** Quits: malloy (~jimery@116.30.223.163) (Quit: WeeChat 3.0)
[14:33:22] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:33:31] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[14:37:32] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[14:37:57] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:39:19] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[14:39:32] <ville> "Pinephone compiled the kernel in about 15 minutes, which was tollerable" hah
[14:39:58] <ville> someone trying to get openbsd up on pinephone
[14:42:00] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[14:45:35] <LordKalma> bah a phone without ecosystem for mobile apps is meh
[14:49:26] <cbreak> LordKalma: a phone without apps is a phone
[14:49:34] <LordKalma> yes
[14:49:40] <LordKalma> and I don't want just a phone :)
[14:50:32] <LordKalma> I like my pocket computer that spies on me in exchange for some convenience :)
[14:50:51] <cbreak> so.. a PDA? :D
[14:51:04] <LordKalma> I think they call them smartphones now :p
[14:51:11] <cbreak> yeah... nonsensical name...
[14:51:18] <cbreak> at least mine's much less smart than even an average kitten
[14:51:33] *** gentooclimax is now known as climax
[14:53:48] <ville> LordKalma: if it's running regular linux or bsd variant you can actually make the programs your self and not be forced into some weird language or jump through hoops to escape that
[14:57:42] *** climax is now known as gentooclimax
[15:02:17] <manuels> aint there a integer std::pow equivalent?
[15:05:00] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:05:52] <TinoDidriksen> Nope
[15:06:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:06:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:08:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:11:01] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[15:12:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[15:12:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[15:12:27] *** ChanServ sets mode: +v npaperbot
[15:12:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Read error: Connection reset by peer)
[15:13:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:13:45] *** Quits: troller (~p@2a02:6b8:b081:6432::1:36) (Ping timeout: 268 seconds)
[15:16:46] *** Joins: hexingb (~hexingb@36.155.28.143)
[15:22:32] *** Joins: HvszrStykp (~X@81.171.62.86)
[15:34:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:34:21] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[15:34:44] *** Joins: kevr (~kevr@user/kevr)
[15:41:14] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:49:47] *** Joins: sigma_ (~sigma@164.215.244.128)
[16:05:08] *** Joins: sigma__ (~sigma@164.215.244.128)
[16:06:09] *** Quits: sigma_ (~sigma@164.215.244.128) (Ping timeout: 256 seconds)
[16:08:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Quit: Quit)
[16:08:51] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:10:38] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[16:13:52] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:18:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[16:29:16] *** Quits: mitch0 (~mitch@84-236-26-21.pool.digikabel.hu) (Quit: leaving)
[16:30:00] *** Joins: mitch0 (~mitch@84-236-26-21.pool.digikabel.hu)
[16:31:14] *** Joins: elemongw (~elemongw@20.107.36.50)
[16:35:44] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:84e4:394d:7448:ee01:64ca)
[16:39:02] *** Quits: p-i- (~Ohmu@2403:6200:8978:84e4:f981:e2b1:518d:d697) (Ping timeout: 240 seconds)
[16:41:24] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:42:25] <whupdup> Just to confirm my intuition of lifetime extension: if I have `std::shared_ptr<T> get_shared_ptr();` and I call `use_raw_ptr(get_shared_ptr().get())` the shared_ptr will always have its lifetime extended until `use_raw_ptr` returns, right?
[16:42:41] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[16:43:03] <whupdup> and therefore I can assume its underlying value won't be deleted until use_raw_ptr is done with it?
[16:43:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[16:43:25] <fiesh> no
[16:44:08] <whupdup> so when does the shared_ptr get destroyed?
[16:44:40] <fiesh> after its .get() call finishes, before use_raw_ptr is called
[16:44:47] <fiesh> do a sanitize build and see what happens
[16:45:13] *** Joins: troller (~p@2a02:6b8:0:40c:fc33:a590:b557:35f7)
[16:45:26] <whupdup> dumb question if I wanna do that with gcc what's the flag? it's like -fsanitize...something
[16:46:06] <sprout_> borrow semantic on shared pointer would be nice
[16:46:31] <fiesh> why?  it should be use_shared_ptr instead of use_raw_ptr if it wants to extend the lifetime
[16:47:03] <whupdup> https://godbolt.org/z/TP3MnvTMa
[16:47:46] <whupdup> yeah but you don't always have control over what you call on a type T* always takes a shared_ptr<T>
[16:53:53] *** Joins: seninha (~seninha@user/seninha)
[16:54:48] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:56:34] <TinoDidriksen> whupdup, sounds like you want [p1132]
[16:56:34] <npaperbot> P1132R8: [Library] out_ptr - a scalable output pointer abstraction <https://wg21.link/p1132r8> (by JeanHeyd Meneide, Todor Buyukliev, Isabella Muerte) (2021-06-10) (Related: https://wg21.link/lewg513)
[16:58:34] <fiesh> whupdup: then do `{ auto const p = get_shared_ptr(); use_raw_ptr(p.get()); }`
[16:59:04] *** Joins: xkuru (~xkuru@user/xkuru)
[17:01:20] <whupdup> I'm mainly just checking whether or not it's safe to adopt as a practice, because it appears to work correctly in that godbolt
[17:01:56] <whupdup> and it passes the -fsanitize=leak,address,undefined
[17:04:00] <PJBoy> that code looks fine whupdup
[17:04:12] <PJBoy> it also has nothing to do with lifetime extension
[17:04:30] <PJBoy> subexpressions live until the end of the full expression they're in
[17:04:50] <PJBoy> would recommend unique_ptr there ofc
[17:06:56] *** Joins: Simplar (~Simplar@188.163.93.76)
[17:19:42] *** Joins: pulse (~pulse@user/pulse)
[17:21:17] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 240 seconds)
[17:23:38] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Ping timeout: 250 seconds)
[17:26:16] *** Quits: sigma__ (~sigma@164.215.244.128) (Quit: Konversation terminated!)
[17:35:22] *** Joins: p-i- (~Ohmu@2403:6200:8978:84e4:5d6a:d89f:b418:cca2)
[17:37:44] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:38:57] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:84e4:394d:7448:ee01:64ca) (Ping timeout: 240 seconds)
[17:39:26] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Remote host closed the connection)
[17:39:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[17:41:07] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Read error: Connection reset by peer)
[17:41:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:27] *** ChanServ sets mode: +v npaperbot
[17:41:50] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:42:16] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:2fa:9603:e9a8:8ca1)
[17:44:16] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[17:47:03] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:50:41] *** Joins: xkuru (~xkuru@user/xkuru)
[17:53:53] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:57:47] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 268 seconds)
[18:02:59] *** Quits: p-i- (~Ohmu@2403:6200:8978:84e4:5d6a:d89f:b418:cca2) (Remote host closed the connection)
[18:04:22] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[18:08:05] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:08:40] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:4de3:f824:1243:8d01) (Quit: Client closed)
[18:11:09] *** Joins: p-i- (~Ohmu@2001:44c8:4611:d672:3090:516f:ee09:e4be)
[18:12:03] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:14:40] *** Joins: minto (~mintograd@47.201.5.61)
[18:15:45] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:17:31] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Ping timeout: 268 seconds)
[18:17:32] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 240 seconds)
[18:19:30] *** Quits: true-false (~truexfals@194.219.40.199.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[18:25:03] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e5b7:2049:7be:2775)
[18:25:03] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e5b7:2049:7be:2775) (Changing host)
[18:25:03] *** Joins: skapata (~Skapata@user/skapata)
[18:26:26] *** Joins: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl)
[18:26:37] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 240 seconds)
[18:26:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:28:05] <fiesh> that extends to the function call they're used in, not just as the function parameter?  are you sure?  color me surprised
[18:30:38] *** Quits: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl) (Client Quit)
[18:30:56] <PJBoy> yeah it'd be pretty bad if you did `f(std::string("lalala"))` and the string died before f() finished
[18:31:34] <fiesh> that's quite different though, f(std::string("lalala").data()) would be the analogy
[18:31:53] <PJBoy> it's only cosmetically different
[18:32:57] <fiesh> geordi: { f(S{}.g()); } struct S : tracked::B { int g() { return 42; } }; void f(int) { BARK; }
[18:32:58] <geordi> B0* f(int) B0~
[18:33:17] <fiesh> whupdup: well, all I said was wrong and I learned something!
[18:34:32] <fiesh> PJBoy: thanks for correcting me
[18:34:39] <rpav> though beware building interfaces that rely on lifetime extension
[18:34:40] <PJBoy> standard citation I believe is http://eel.is/c++draft/class.temporary#4.sentence-3
[18:35:13] <PJBoy> no problemo :)
[18:35:21] <rpav> like, `SomeVal S::f()`, and SomeVal has a "heavy" data structure you return by reference
[18:36:15] <rpav> S().f().get().act(); /* fine */   auto& v = S().f().get();  /* not fine ;) */
[18:40:00] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:43:19] <whupdup> Yeah... just part of C++ lol, hence why I asked
[18:43:32] <whupdup> it seemed intuitive but I needed to double and triple check before I made a habit of relying on it
[18:43:39] <fiesh> haha indeed
[18:54:20] *** Quits: p-i- (~Ohmu@2001:44c8:4611:d672:3090:516f:ee09:e4be) (Remote host closed the connection)
[18:54:40] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:56:44] *** Joins: markong (~kvirc@213.146.188.203)
[18:56:45] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[19:00:25] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:07:25] *** Joins: p-i- (~Ohmu@2403:6200:8978:84e4:30d2:136a:bbe0:502d)
[19:07:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[19:17:56] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[19:20:18] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[19:28:18] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Remote host closed the connection)
[19:31:51] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Read error: Connection reset by peer)
[19:32:14] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:35:41] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[19:42:44] *** Joins: utoneq (~utoneq@gateway/tor-sasl/utoneq)
[19:43:13] *** Quits: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net) (Quit: leaving)
[19:44:08] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[19:46:12] *** Quits: jehelset (~jeh@2001:700:302:10::e) (Ping timeout: 250 seconds)
[19:47:25] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[19:50:24] *** Quits: utoneq (~utoneq@gateway/tor-sasl/utoneq) (Ping timeout: 276 seconds)
[19:55:13] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:30c7:6c33:e839:6e4c)
[19:55:13] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:30c7:6c33:e839:6e4c) (Changing host)
[19:55:13] *** Joins: skapate (~Skapata@user/skapata)
[19:55:38] *** Joins: utoneq (~utoneq@gateway/tor-sasl/utoneq)
[19:57:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[19:58:55] <xkoncek> classes returning pointers to obejcts they own should be lvalue-ref-qualified
[20:00:57] <ville> whatnow?
[20:01:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[20:02:39] <xkoncek> or idk, should they?
[20:03:07] <xkoncek> {cout << strlen(string("xd").c_str());}
[20:03:08] <geordi> 2
[20:03:26] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[20:03:39] <ville> hard to say when i don't understand the premise
[20:04:12] <ville> classes don't return anything and classes cant be lvalue-ref-qualified
[20:04:36] *** Joins: paul424 (~tom@ip-5-172-237-88.multi.internet.cyfrowypolsat.pl)
[20:05:14] <ville> if a member function returns a pointer to data owner by the object, then that member function should be lvalue-ref-qualified?
[20:05:21] <ville> err owned
[20:05:45] <xkoncek> that's what i meant
[20:07:51] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:09:29] *** Joins: magla (~gelignite@55d4db0b.access.ecotel.net)
[20:10:26] <rpav> xkoncek: `const T& foo() const & { .. }` .. doesn't do anything here
[20:13:33] <jsbach> hi, is there a general father class for STL containers? writing a template function, want to generalize as much as possible
[20:14:03] <imMute> jsbach: no, there's no common base class.
[20:15:03] <jsbach> imMute, okay disappointing. would have expected that. what is the motivation behind? or is it a lack of development for the time being?
[20:16:09] <rpav> lack of use
[20:16:25] <imMute> because they don't have anything in common other than being containers.  there's very few operations that would be common among *all* (present and future) containers
[20:16:51] <rpav> anything that _is_, based on their interface, is already separate / free function / etc in algorithms or similar
[20:17:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:17:27] <rpav> std::begin() or std::sort() or similar
[20:18:01] <rpav> "parent class" isn't really the right way to share functionality
[20:18:43] <ville> jsbach: lack of any need for such thing
[20:19:27] <ville> jsbach: template<typename T> f(T&); doesn't get much more general than that
[20:19:39] <ville> (throw in a return type)
[20:20:03] <jsbach> hmm, ok. thanks for the responses. the fact is they are all containers no matter how they behave, my oop approach is bit different. But i am sure there is some good in it to not have base class.
[20:20:19] <rpav> well, the point is more "the implementations are not similar" combined with "things that use them do not require a common parent"
[20:20:52] <rpav> OOP hierarchies are not particularly great design in general
[20:21:05] <ville> jsbach: if you use write a template function, then there is no need for a base class
[20:21:17] <ville> (function template)
[20:22:42] <jsbach> ville, well i would have rather written a inline json toJson(const std::container<T>& type){..} rather than an inline json toJson(const std::vector<T>& type){..}
[20:22:56] <jsbach> for a simple operation
[20:23:07] <jsbach> but the question on the hand is "what is simple"
[20:23:42] <ville> jsbach: you can instantiate a function template with any type that satisfies the requirements of the function. those requirements don't need to be reified by some explicit c++ langugage construct such as a class you inherit from
[20:23:55] <ville> jsbach: so: template<typename T> void f(T&);
[20:24:41] <ville> jsbach: depending on the c++ version you can then start restricting that overly-generic in various ways
[20:24:42] <jsbach> ville, ok
[20:24:49] <rpav> jsbach: what is simple is having `<T> void toJson(json&, const T&)` that you override and/or using a `json_adl<T>::toJson(..)`
[20:24:50] <sh00p> anyone know of an online compiler (wandbox/ideone) that also has gtest and gmock?
[20:24:57] <rpav> or "what is effective," at least ;)
[20:25:07] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Ping timeout: 256 seconds)
[20:25:31] <jsbach> rpav, thanks!
[20:25:33] <rpav> having .toJson() on objects means that you must control and implement it on all objects, rather than being able to extend or implement the functionality out-of-line, and independently of the objects
[20:26:02] <rpav> e.g. you can't add std::vector::toJson or similar
[20:28:39] <rpav> #define cauto const auto // tempting
[20:28:49] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[20:29:04] <rpav> #define autc const auto // (;
[20:29:06] <xkoncek> java's Collection actually has a generic .remove/.add which even tells you whether the entry was added
[20:34:32] <jsbach> rpav, yes the adl_serializer. haven't got into depth with that
[20:35:22] <jsbach> xkoncek, this is a point where java and c++ differ (from philosophy).
[20:35:36] <rpav> i'm actually implementing vaguley similar for a project .. in a way that lets you generalize both the _serializer_ (e.g. json) and the type
[20:35:56] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:36:26] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:36:29] <xkoncek> you either template it, come up with a custom virtual base, or just use a standard container that reflects your needs most precisely
[20:36:38] <rpav> so one implementation can be reused for all serializers, and you mostly need to make C++ instantiate the code and provide a basic interface for each serializer
[20:36:54] <rpav> this probably ought to be its own little header library
[20:37:37] <jsbach> xkoncek, yes thats what i am doing. on the other hand rpav has a better solution which needs a bit of more time investing. that i don't have.
[20:38:49] <rpav> if you don't have the 30s to write out a basic ADL setup then you _definitely_ don't have the extended amount of time to support "every class must implement..."
[20:39:21] <rpav> like making it support N serializers is a bit of work, but making a simple one that supports _one_ explicitly is trivial
[20:39:46] <rpav> for `void toJson(json&, const T&);` you don't actually even need a template in most cases .. simple overload will do
[20:40:16] <rpav> and you can `struct S { ... friend void toJson(json&, const S&) { ... } };` so it's very syntactically similar
[20:40:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:40:33] <rpav> i think Alipha pointed out some namespace considerations, but
[20:41:10] <rpav> but e.g. `<T> toJson(json&, const std::vector<T>& v) { ... }` encodes every vector
[20:41:46] <rpav> note this is how nlohmann::json does it, except it calls it to_json ;)
[20:41:52] *** Joins: AmR (~AmREiSa@156.199.9.4)
[20:42:12] <rpav> so i guess the real question is why would you need to implement such, rather than use your library's method
[20:43:06] *** gentooclimax is now known as climax
[20:45:04] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:48:53] *** Quits: utoneq (~utoneq@gateway/tor-sasl/utoneq) (Remote host closed the connection)
[20:48:53] <PJBoy> real reason there's no base class for containers is that you'd have to pay for virtual function call overhead
[20:48:57] *** climax is now known as gentooclimax
[20:49:07] <PJBoy> and then no one would use the containers
[20:49:31] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[20:49:33] <Alipha> rpav: regarding your earlier question, lvalue-ref qualifying member functions which return something which refers back to the object's members would be useful in preventing dangling references, yes. It also would force more boilerplate in currently-valid temporary usage. But personally, I would like to see more lvalue ref member functions even though it may make some code more noisy
[20:49:49] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[20:49:59] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[20:50:23] <rpav> Alipha: it doesn't appear to help with const refs though
[20:50:26] <PJBoy> would disagree
[20:50:28] <rpav> or const functions, i guess
[20:50:28] <PJBoy> yeah ^
[20:50:43] <rpav> like, `const T& foo() & { ... }` will error, but not `const &` ;/
[20:50:48] <PJBoy> deleting the rvalue ref overloads would be more like it
[20:51:53] <PJBoy> I guess you'd do both
[20:51:58] <Alipha> PJBoy: oh, so delete && instead of qualifying const &, okay
[20:52:07] <Alipha> Is there a reason to do both?
[20:52:28] <PJBoy> you can't overload `S::f()` and `S::f() &&`
[20:52:34] <Alipha> Ah
[20:52:50] <PJBoy> { S().f(); } struct S { void f() const& { BARK; } void f() && = delete; }; // so this
[20:52:50] <geordi> error: use of deleted function 'void S::f() &&'
[20:53:22] <PJBoy> or in C++23
[20:54:23] <PJBoy> bah no gcc support yet
[20:54:32] <rpav> that's not really _useful_ either though
[20:55:08] <Alipha> jsbach: in c++20, you could create a container concept and then do `auto toJson(container auto const& c)`
[20:55:09] <rpav> i.e., i _should_ be able to do S().f().size(), assuming f() returns a const vector<T>&
[20:55:28] <rpav> and i should _not_ have to copy (e.g., overloading && to return a copy is a bad solution)
[20:56:53] <rpav> probably the "ideal" solution here involves f() & returning e.g. ptr<T> and f() && returning a nocopy_ptr<T> or somesuch
[20:56:55] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:84e4:2585:d887:c726:2569)
[20:57:02] <Alipha> `make_lvalue(S().f()).size()` where `auto &make_lvalue(auto &&x) { return x; }`
[20:57:06] <PJBoy> just means you'd write `S s; s.f();` instead
[20:57:08] <PJBoy> which is fine
[20:57:12] <rpav> PJBoy: it is not fine
[20:58:02] <rpav> the real thing is you only _don't_ want the ref/pointer/etc stored if it's non-lvalue, so we can prevent that, i think
[20:58:10] <PJBoy> seems fine to me
[20:58:24] <PJBoy> bit more verbose, but lifetimes are a bit more obvious
[20:58:32] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:44] <Alipha> I probably wouldn't lvalue ref qualify size though. I'd lvalue ref qualify data, begin, end, operator[]...
[20:59:05] <rpav> Alipha: right but the vector ref itself is the thing that dangles
[21:00:19] <Alipha> S().f().size() is completely fine though in all contexts, assuming size returns by value
[21:00:24] <rpav> i'd say having a "no_store&" in the language would be nice, but we already have the tools to do it and adding things to the language is less desirable than using the language to implement it
[21:00:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:84e4:30d2:136a:bbe0:502d) (Ping timeout: 240 seconds)
[21:00:55] <rpav> Alipha: right .. but `auto& v = S().f();` is not fine, and it may be unclear that it's not fine
[21:01:30] <Alipha> So f should be lvalue-ref qualified, not size
[21:01:39] *** Quits: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (Quit: Bye!)
[21:01:49] *** Joins: jbalint (~jbalint@097-090-242-068.res.spectrum.com)
[21:02:22] <rpav> but it shouldn't, because its return shouldn't be copied, and is valid to use while "alive"
[21:02:38] <rpav> you just don't want it _stored_ _if_ it's rvalue
[21:03:13] <rpav> and i think you can do that by having f() return a ptr<T> type struct with operator-> but deleted copy/move
[21:03:29] <rpav> well maybe not move, or you can't return it? ðŸ¤” but yeah
[21:04:05] <Alipha> I'd make it lvalue-ref qualified and do `make_lvalue(S()).f().size()` where `auto &make_lvalue(auto &&x) { return x; }`
[21:04:11] <xkoncek> i have finals in 2 weeks so i feel the need to procrastinate
[21:04:14] <rpav> (having `f() &&` return that, of course, and `f() &` return a regular copyable pointer)
[21:04:49] <rpav> ah college days ;/
[21:04:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[21:05:15] <Alipha> But indeed, if the language had some "no_store&", that'd be better
[21:05:21] <rpav> though i sucked at code then, but life was easy
[21:11:05] <NoXzema> Do we ever not suck at code? I feel like we just suck less at after awhile.
[21:12:06] *** Quits: NoXzema (~cq-work@user/cq-work) (Remote host closed the connection)
[21:23:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:27:25] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[21:27:32] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:28:35] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (Ping timeout: 256 seconds)
[21:29:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:32:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Ping timeout: 268 seconds)
[21:32:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:35:44] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[21:36:54] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[21:41:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:26] *** ChanServ sets mode: +v npaperbot
[21:43:15] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Read error: Connection reset by peer)
[21:47:24] *** Joins: Tokamak (~Tokamak@172.58.191.20)
[21:53:02] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[21:53:45] *** Quits: jbalint (~jbalint@097-090-242-068.res.spectrum.com) (Read error: Connection reset by peer)
[21:55:33] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[21:57:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:02:07] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[22:05:52] *** Joins: tom_ (~tom@ip-5-172-237-88.multi.internet.cyfrowypolsat.pl)
[22:05:57] *** Quits: troller (~p@2a02:6b8:0:40c:fc33:a590:b557:35f7) (Ping timeout: 240 seconds)
[22:06:50] *** Quits: paul424 (~tom@ip-5-172-237-88.multi.internet.cyfrowypolsat.pl) (Killed (NickServ (GHOST command used by tom_)))
[22:07:03] *** tom_ is now known as paul424
[22:25:15] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:27:00] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[22:27:02] *** Quits: dfkfs (~dfkfs@178.49.152.42) (Quit: Client closed)
[22:29:00] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: No route to host)
[22:31:00] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[22:34:22] <ville> ...wonder if khronos has managed to pull their finger out and produced a downloadable gltf spec
[22:36:25] <ville> apparently they have: https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.pdf
[22:36:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:38:15] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:42:40] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[22:42:53] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: No route to host)
[22:46:47] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:49:34] <rpav> gltf spec has been available for awhile
[22:51:01] <ville> they only had the markdown online last time i checked last summer-ish. now they've a proper pdf
[22:51:06] <rpav> heh
[22:52:24] <rpav> personally i won't consider any specification official until it's expressed in fixed-width ASCII formatted and paginated for a proper 72-column terminal!@#
[22:57:13] <ville> they are moving to make it an international standard and i wouldn't be surprised if markdown is not a recognized format
[23:00:27] <rpav> mostly irrelevant given markdown can be formatted however and to whatever format one prefers
[23:01:56] <ville> it is relevant. it's a way for iso to guarantee certain aspects of the produced document
[23:02:40] <rpav> a complete list of the fucks i give:
[23:03:19] <kalven> markdown seems like a poor choice for a document that has embedded images
[23:03:52] <rpav> nah there are plenty of decent ways to manage images in markdown
[23:05:02] <rpav> none if it particularly matters since even _if_ they were going directly from markdown to whatever final Standards Compliant Format(r)(c)(tm) they needed, they could make it work however they wanted
[23:05:19] <kalven> yeah, like what? a big 'ol base64?
[23:05:56] <rpav> nicer, they use markdown for good VCS management of the data, generate intermediate formatted text etc, and link that in a reasonably non-shit DTP package
[23:06:17] <rpav> plenty of things dont' require "one file holds all the data" :p
[23:06:35] <rpav> most source publishing stuff has project = big directory of various assets compiled from various sources
[23:07:00] <rpav> everyone forgets how all the things work apparently
[23:08:47] <kalven> you seem to fluctuate between giving fucks and not giving fucks
[23:10:20] *** Joins: troller (~p@80.240.216.69)
[23:11:19] <rpav> nah .. publication is neat; people whining about what format they demand a document in Â¯\_(ãƒ„)_/Â¯
[23:12:00] <rpav> publication, typesetting, typography .. the art of aesthetic language, or something
[23:17:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[23:20:50] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[23:20:58] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:27:30] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:31:48] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[23:31:48] *** Quits: ivan (~ivan@user/ivan) (Quit: lp0 on fire)
[23:31:48] *** Quits: niska (~niska@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[23:34:32] *** Joins: troller (~p@2a02:6b8:b081:1211::1:6)
[23:34:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[23:35:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[23:35:05] *** ChanServ sets mode: +v npaperbot
[23:43:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:45:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:49:51] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[23:51:05] *** Joins: niska (~niska@static.38.6.217.95.clients.your-server.de)
[23:51:36] *** Joins: ivan (~ivan@user/ivan)
[23:54:30] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 250 seconds)
