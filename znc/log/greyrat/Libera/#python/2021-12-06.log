[00:00:21] *** Quits: CormacAttack (~mac@144.62.50.200) (Quit: WeeChat 3.3)
[00:01:42] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[00:01:52] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:02:01] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[00:09:46] *** Quits: VaniaPy (~VaniaPy@79.103.125.76.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[00:09:47] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 252 seconds)
[00:10:48] <Tashtari> What's the most Pythonic way to loop through an iterable, taking n items at a time?  Like, for n=2, looping through 'ABCDEFGH' and getting 'AB' 'CD' 'EF' 'GH'?
[00:10:59] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[00:11:20] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[00:13:39] *** Quits: faLUKE (~paolo@host-80-117-216-225.retail.telecomitalia.it) (Quit: Konversation terminated!)
[00:14:31] *** Quits: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net) (Quit: Ciao!)
[00:14:57] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:15:13] *** Quits: {HD} (~{HD}@86.106.121.213) (Ping timeout: 265 seconds)
[00:15:25] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[00:15:28] *** Quits: akahs (~Shaka@user/shaka) (Remote host closed the connection)
[00:15:55] *** Joins: Klinda (~superleag@user/klinda)
[00:19:07] <BrenBarn> I think there's an itertools recipe for that
[00:19:58] <BrenBarn> see the "grouper" recipe here https://docs.python.org/3/library/itertools.html#itertools-recipes
[00:20:30] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[00:20:31] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad) (Remote host closed the connection)
[00:21:10] <Tashtari> BrenBarn: Ah, interesting, thanks.
[00:23:17] *** Quits: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:23:24] *** Quits: greedom (~greedom@p200300de6749800008d90a3bb742abe2.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:25:00] *** Joins: wilk (~wilk@user/wilk)
[00:26:41] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[00:27:15] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Read error: Connection reset by peer)
[00:27:40] <deniska> we got pairwise promoted from a recipe to an actual function
[00:27:47] <deniska> maybe we'll see grouper some day
[00:28:22] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[00:29:41] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:29:53] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:31:18] *** Joins: trace987 (~trace@ip5b429834.dynamic.kabel-deutschland.de)
[00:32:35] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[00:34:20] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Client Quit)
[00:35:09] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[00:35:32] *** Joins: akahs (~Shaka@user/shaka)
[00:35:58] *** Joins: stonkey (~stonkey@user/stonkey)
[00:36:04] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[00:36:47] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[00:39:12] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:f59b:4aa1:dccc:b8e0) (Quit: Textual IRC Client: www.textualapp.com)
[00:39:29] *** Quits: oriba (~oriba@dynamic-078-054-209-177.78.54.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:41:06] <arkanoid> do you know if it is possible to zero-copy interop python str with C module?
[00:41:44] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[00:43:15] *** Joins: gusto (~Augustus@109.255.100.54)
[00:44:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:44:40] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[00:45:24] *** Quits: masticass (~gzc@host-85-201-222-202.dynamic.voo.be) (Quit: WeeChat 3.3)
[00:46:01] *** kevr` is now known as kevr
[00:47:18] <nedbat> arkanoid: it depends if you want a C string, or you just want access to the data from C
[00:47:31] <nedbat> arkanoid: Python strings are not stored as C strings.
[00:47:39] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[00:48:58] *** Joins: Pedee (~Pedee@user/Pedee)
[00:51:00] *** Joins: cjb (~cjb@user/cjb)
[00:53:02] <arkanoid> nedbat: I'd like to know more about both approaches. Currently I'm encoding str to utf8 and pass it to C
[00:54:36] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[00:54:39] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:55:04] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[00:55:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[00:55:49] <nedbat> arkanoid: there's no promise about the internal representation of Python strings.
[00:56:45] *** Joins: {HD} (~{HD}@86.106.121.213)
[00:57:51] <arkanoid> oh, ok. So I've to pass encoded strings
[00:58:13] <arkanoid> or maybe there's a way to convert to cstring?
[00:58:19] *** Quits: magla (~gelignite@55d41880.access.ecotel.net) (Quit: Stay safe!)
[01:00:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:03:44] *** Joins: Bakunini (~Lindis@user/lindis)
[01:04:31] *** Quits: Bakunin (~Lindis@user/lindis) (Killed (NickServ (GHOST command used by Bakunini)))
[01:04:36] *** Bakunini is now known as Bakunin
[01:17:07] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[01:17:26] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[01:18:43] <arkanoid> just found PyBytes_AsStringAndSize
[01:22:21] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:23:31] *** Quits: NyaaTheKitten (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[01:24:36] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[01:26:15] *** Quits: justSleigh (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[01:26:16] *** Quits: Pedee (~Pedee@user/Pedee) (Quit: WeeChat 3.3)
[01:26:26] *** Quits: aslicedbanjo (~aslicedba@host81-157-178-144.range81-157.btcentralplus.com) (Quit: Leaving.)
[01:26:38] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[01:28:19] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Remote host closed the connection)
[01:28:21] *** Joins: justSleigh (~justache@user/justache)
[01:28:41] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 245 seconds)
[01:29:29] *** Joins: emf (~emf@2620:10d:c090:400::5:3b6)
[01:30:29] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800d8f392878f60f9c7.ipv6.abo.wanadoo.fr)
[01:30:52] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[01:32:18] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:33:22] *** Quits: akahs (~Shaka@user/shaka) (Remote host closed the connection)
[01:34:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:35:48] *** Joins: akahs (~Shaka@user/shaka)
[01:37:31] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[01:39:11] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:40:48] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[01:42:05] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:44:28] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[01:46:27] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[01:46:51] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[01:47:21] *** Joins: Terexen (~terexen@user/terexen)
[01:47:32] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 265 seconds)
[01:48:20] *** Joins: deltab (~deltab@user/deltab)
[01:58:11] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[02:00:55] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[02:03:51] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:04:07] *** Quits: sazawal (~sazawal@223.190.92.152) (Quit: Leaving)
[02:04:26] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:06:12] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:08:47] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[02:09:41] *** Quits: dre (~dre@2001:8003:c932:c301:4931:2ba9:a613:d21a) (Ping timeout: 252 seconds)
[02:09:54] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:11:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:13:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:13:28] *** Joins: gggp (~gggp@60.10.23.168)
[02:15:53] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[02:16:18] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[02:16:39] *** Quits: emf (~emf@2620:10d:c090:400::5:3b6) (Ping timeout: 252 seconds)
[02:16:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:17:49] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 256 seconds)
[02:18:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:18:59] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:19:51] *** Joins: emf (~emf@2620:10d:c090:400::5:3b6)
[02:21:09] *** Joins: vimart (~vimart@109.249.179.169)
[02:21:25] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[02:24:12] *** Joins: arinov (~arinov@213.194.126.155)
[02:30:15] <koopman> Anyone know how I get the required result from these 3 lists: https://dpaste.org/dM18
[02:32:47] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 252 seconds)
[02:34:29] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[02:34:53] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[02:37:23] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:37:45] <nedbat> koopman: what are only two lines used from list 2?
[02:38:39] <koopman> Name codes and item codes
[02:39:38] *** Quits: NyaaTheKitten (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[02:40:06] <arkanoid> fastest way to pass a string from python to C and back?
[02:41:42] *** Joins: ano (~ano@user/ano)
[02:41:57] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:7af8:48a4:d785:9ce7) (Remote host closed the connection)
[02:42:30] <nedbat> koopman: but why are there only two lines in the results? Can you describe the process in english?
[02:42:58] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[02:42:59] <nedbat> arkanoid: if you need the data in a C string, probably a function like the one you found.
[02:43:09] <nedbat> arkanoid: what do you want to do to the string in the C code?
[02:43:28] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[02:44:36] <koopman> Sorry @nedbat so the result will just be the items out of List1,2,3 it was just a small example so I would want list2 plus the 3 letter code (state) and description
[02:44:41] <koopman> Does that make sense
[02:45:10] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[02:45:15] <koopman> So that MSC and description would be next to the whole list2 in the result
[02:49:17] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 252 seconds)
[02:49:39] *** Quits: emf (~emf@2620:10d:c090:400::5:3b6) (Ping timeout: 252 seconds)
[02:51:18] *** Joins: CormacAttack (~mac@144.62.50.200)
[02:51:20] <CormacAttack> join #java
[02:51:23] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[02:52:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:53:08] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[02:53:15] <parv> koopman, That looks like a table join. Convert the lists to appropriate `dict`s
[02:54:06] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:54:36] *** Joins: damonlynch (~ngaio@static-68-235-44-69.cust.tzulo.com)
[02:54:42] <parv> ... or use SQLite.
[02:55:07] *** Joins: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs)
[02:55:13] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[02:55:22] <koopman> @parv: trying to with https://dpaste.org/wrBe but I get a key error so not error control:
[02:55:31] *** Quits: esv (~esv@74.124.178.154) (Ping timeout: 252 seconds)
[02:55:34] <koopman> So a little lost how to implant that to this
[02:58:02] <parv> koopman, Code at /wrBe is hard to follow due to lack of variable names to describe the purpose; all are list one or two
[02:59:09] <koopman> @parv: these are the lists: https://dpaste.org/dM18
[02:59:42] <parv> koopman, I had seen the lists already.
[02:59:55] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:d7bb:6fe9:eb3c:4dd1) (Ping timeout: 252 seconds)
[03:01:04] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:01:11] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[03:02:31] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (Ping timeout: 268 seconds)
[03:02:47] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[03:02:49] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[03:03:09] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 256 seconds)
[03:03:12] <hogarius> Hello, all.  https://bpa.st/45UA  I'm working on AoC day 4 part 1.  I'm expecting the function at line 82 or so to change the value of the active variable to False, but it isnt doing so.  Can anyone see what I am missing?
[03:04:11] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[03:04:51] *** Quits: Terexen (~terexen@user/terexen) (Quit: Saraba)
[03:05:11] *** Joins: Terexen (~terexen@user/terexen)
[03:06:06] *** Joins: snappy (~snappy@user/snappy)
[03:06:12] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[03:07:26] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 245 seconds)
[03:07:37] <snappy> is there a way to pip install a package but not fetch the dependencies? I'm trying to build in a module that depends on numpy/scipy but deploying on aws lambda, the dependencies exceed the zip size for aws lambda, so i'm going to use the aws provided scipy layer.
[03:08:02] *** lukedashjr is now known as luke-jr
[03:09:08] <Evolver> Given the inputs `seq=range(10)` and `lengths=(3, 5, 2)`, how do I get the output  `[(0,3), (3,8), (8,10)]`? Essentially I want to get successive slices of length `lengths` from `seq`. Is there a way to do this in a single line without me writing a `for` loop?
[03:09:13] *** bedroller is now known as ciphersalad
[03:10:08] *** Quits: gggp (~gggp@60.10.23.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:10:24] <Evolver> ergo, how do I use stateful accumulation logic in a list comprehension?
[03:10:47] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[03:10:53] *** Joins: aod (~a@201.209.165.43)
[03:12:36] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:12:44] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Good Night)
[03:13:52] <Evolver> hogarius: In line 106, use `active = check_bingo(b, active)`
[03:14:08] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[03:14:26] *** Joins: xardas (~xardas@149.233.51.127)
[03:14:27] <nedbat> koopman: can you describe in english how you want to combine the lists?
[03:14:46] <Evolver> hogarius: In lines 85 and 92, you can just use `return False`, and then remove line 94
[03:15:10] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[03:15:19] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:16:26] <hogarius> Evolver: Thank you.
[03:16:45] <greentree> are there any simple python snippets for turning pretty formatted strings into numbers?
[03:16:54] <greentree> like "50k" = 50000, 50m = 50000000
[03:16:57] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[03:17:57] <greentree> https://dpaste.org/mrt4 unless i should just use something like this
[03:18:03] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:18:08] *** Joins: dre (~dre@60.229.45.121)
[03:19:14] <noord> greentree: it is 4 line of code
[03:19:56] *** Joins: Hackerpcs (~user@user/hackerpcs)
[03:20:09] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 256 seconds)
[03:20:15] <Evolver> greentree: why would you ruin a integer into a float, unnecessarily...
[03:20:29] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:20:41] <greentree> because i'm not expecting to work with whole numbers only
[03:20:56] <greentree> not every number in existance is a non decimal :)
[03:21:08] <Evolver> greentree: so you may get 50.2k?
[03:21:11] <greentree> of course
[03:21:26] <KirkMcDonald> For instance, floats are not decimals.
[03:21:45] <koopman> @parv @nedbat https://dpaste.org/ryVu
[03:21:54] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[03:22:32] <nedbat> koopman: i'm confused: originally you showed two rows of results, now there 23 rows?
[03:22:45] <noord> greentree: https://bpa.st/LAGQ didn't tested
[03:23:07] <koopman> I didn’t add the extra, that was my bad sorry @nedbat
[03:23:58] <noord> s/tested/test it
[03:24:30] <Evolver> greentree: do you know of this package https://pypi.org/project/dehumanizer
[03:25:12] <greentree> no, i was not aware of a random package on pypi with 1 star
[03:25:14] <greentree> but i am now
[03:25:41] <grym> greentree: pint, perhaps
[03:27:01] <Evolver> greentree: but did you decide if you'll parse Q to quadrillion or quintillion
[03:27:13] <greentree> i haven't my numbers won't exceed the billions
[03:27:44] <greentree> definitely something to keep in mind, surely...
[03:29:56] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:995a:471f:5ee2:dd94)
[03:30:11] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:32] *** Joins: Atque (~Atque@user/atque)
[03:30:34] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:07] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[03:31:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:31:39] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[03:32:55] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[03:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[03:35:26] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[03:40:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[03:42:01] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[03:42:13] <koopman> @nedbat: @parv does that help to explain what I’m trying to do?
[03:42:22] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:42:24] *** Joins: arinov (~arinov@213.194.126.155)
[03:44:46] <nedbat> koopman: it will help if you can put everything into one pastebin, and then tell us in english how the lists relate.
[03:45:15] *** ciphersalad is now known as fling
[03:46:51] *** Joins: smrtz (~smrtz@user/smrtz)
[03:47:32] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 240 seconds)
[03:47:38] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[03:48:35] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:49:25] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 252 seconds)
[03:49:47] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[03:50:03] *** lukedashjr is now known as luke-jr
[03:50:39] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[03:50:59] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:52:57] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:53:59] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:54:24] *** Joins: Wulf (~Wulf@user/wulf)
[03:54:47] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[03:55:28] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:56:27] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[03:58:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:58:45] *** Joins: Colt (~Colt@user/colt)
[03:59:24] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[04:00:14] *** Quits: grimvar (~grimvar@i5C75F609.versanet.de) (Ping timeout: 252 seconds)
[04:00:25] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[04:00:30] *** Joins: Pandadub (~Barones@2804:7f3:8988:8f27:16d4:c85f:5e2c:ebbe)
[04:02:01] *** Joins: Soni (~quassel@autistic.space)
[04:02:08] *** Joins: dohtem (uid524096@user/dohtem)
[04:02:11] *** Joins: grimvar (~grimvar@i5C75F4E8.versanet.de)
[04:03:15] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:03:52] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[04:04:13] *** Quits: CormacAttack (~mac@144.62.50.200) (Quit: WeeChat 3.3)
[04:06:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:08:37] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[04:08:41] *** Quits: smrtz (~smrtz@user/smrtz) (Quit: Client closed)
[04:12:17] <parv> koopman, See https://termbin.com/1nd9
[04:19:14] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[04:19:31] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 245 seconds)
[04:21:23] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:21:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:21:38] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[04:21:39] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[04:22:11] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:23:40] *** Quits: damonlynch (~ngaio@static-68-235-44-69.cust.tzulo.com) (Quit: Leaving)
[04:23:42] *** Joins: monkey_ (~user@190.104.116.153)
[04:25:32] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[04:26:45] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:27:01] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 256 seconds)
[04:28:20] <hogarius> Evolver: thank you for showing me how to return values.  Returning a falsey value caused some problems in my code, so I refactored it to generate a truthy value.
[04:28:39] <parv> koopman, Also please don't use "@" suffix before the IRC handle, at least not before mine.
[04:28:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:29:01] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[04:29:11] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[04:29:14] <jessicara> it might actually not even trigger the hightlight to add a prefix
[04:30:31] *** Quits: delarge (~chamigo@ctm.linuxers.cl) (Quit: leaving)
[04:30:58] <parv> Oops, I meant "prefix", not "suffix".
[04:31:04] <parv> jessicara, Thanks
[04:31:42] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[04:31:51] <parv> jessicara, Thanks also for the idea to update highlight pattern.
[04:31:51] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[04:32:22] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[04:32:29] *** Joins: delarge (~chamigo@ctm.linuxers.cl)
[04:33:12] <koopman> I’ll try that thank you
[04:33:13] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:33:15] <koopman> Parv
[04:33:28] <koopman> Thank you will try that and try understand what’s being done
[04:33:50] <koopman> What’s wrong with the @ before the username?
[04:34:10] <parv> koopman, It is useless; will cause me ignore people
[04:34:33] <parv> koopman, Also it's "parv"
[04:34:48] <jessicara> irc has done it for so long without @, defaults everywhere often require it to start with the exact nick and adding @ will not ping/highlight the person
[04:35:00] <koopman> That’s why I use @ ;)
[04:35:04] * parv can't write; time to go ...
[04:35:53] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[04:36:06] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:37:13] *** Joins: esv (~esv@74.124.178.154)
[04:39:20] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[04:39:24] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[04:40:18] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[04:40:19] *** Joins: damonlynch (~ngaio@static-68-235-44-21.cust.tzulo.com)
[04:40:34] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:42:49] *** Quits: flokuehn (~flokuehn@87.123.247.94) (Ping timeout: 256 seconds)
[04:43:19] <koopman> So parv I replaced the lists with List1.split and I get no attribute error list object has no attribute list
[04:44:36] *** Joins: flokuehn (~flokuehn@87.123.247.86)
[04:47:10] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:47:26] *** Quits: parv (~quass@user/parv) (Quit: parv)
[04:47:41] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:50:20] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[04:53:10] *** Joins: gggp (~gggp@60.10.23.168)
[04:53:39] *** Quits: gggp (~gggp@60.10.23.168) (Client Quit)
[04:55:21] *** Quits: Pandadub (~Barones@2804:7f3:8988:8f27:16d4:c85f:5e2c:ebbe) (Remote host closed the connection)
[04:55:40] *** Joins: Pandadub (~Barones@2804:7f3:8988:8f27:16d4:c85f:5e2c:ebbe)
[04:57:48] *** Quits: NyaaTheKitten (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[05:00:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:00:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:04:50] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:08:59] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:09:06] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:09:55] *** Joins: djapo (~archangel@user/djapo)
[05:11:48] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[05:12:30] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:14:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:14:30] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[05:16:05] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[05:16:45] *** Quits: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf) (Read error: Connection reset by peer)
[05:17:23] *** Joins: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf)
[05:19:06] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[05:19:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:20:44] *** Quits: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[05:24:35] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:25:29] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800d8f392878f60f9c7.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[05:26:35] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[05:29:08] <cthulchu_> Why!? Why the colon!
[05:29:18] <cthulchu_> in what universe is it useful?
[05:29:34] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[05:29:46] <cthulchu_> is there a logical answer and not just the: "we've made a design mistake, but then everyone got used to it"
[05:30:36] <InPhase> I think the colon syntax makes for a pretty nice visual cue.
[05:31:20] *** Quits: Elzington__ (~Elzington@static-68-235-44-10.cust.tzulo.com) (Quit: Leaving)
[05:32:12] <cthulchu_> and for a ton of mistakes from new coders because Python's syntax is minimalist and that colon is logically completely useless cuz a pretty nice visual cue is already there.
[05:32:15] *** Joins: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com)
[05:32:23] *** Joins: minto (~mintograd@47.201.5.61)
[05:32:51] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 245 seconds)
[05:33:01] <InPhase> The colon left open the possibility that one-line loops could be permitted.
[05:33:07] <phantomotap> cthulchu_: i don't hang around python that much anymore. what are you talking about?
[05:34:12] <cthulchu_> InPhase, I... can you show an example?
[05:34:53] <InPhase> cthulchu_: Perhaps you can.
[05:34:55] <nedbat> cthulchu_: are you talking about the colon at the end of `if something:` ?
[05:35:05] <cthulchu_> nedbat, ywa
[05:35:10] <cthulchu_> sorry, yes
[05:35:21] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:35:21] <nedbat> cthulchu_: it's there both to simplify the parser, and as a clear visual signal to the human reader
[05:35:27] *** Quits: Pandadub (~Barones@2804:7f3:8988:8f27:16d4:c85f:5e2c:ebbe) (Remote host closed the connection)
[05:35:40] *** Joins: Pandadub (~Barones@2804:7f3:8988:8f27:16d4:c85f:5e2c:ebbe)
[05:35:59] *** Joins: nicode (~nic@2607:f2c0:92ea:7e00:f5f9:d719:2def:41f2)
[05:36:03] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800d8f392878f60f9c7.ipv6.abo.wanadoo.fr)
[05:36:12] <cthulchu_> how does it simplify the parser? why is not the new line and indentation good enough for the parser?
[05:36:29] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 252 seconds)
[05:36:42] <nedbat> cthulchu_: i don't know the details. this is what I've heard before.  Do you find it a burden?
[05:37:33] <InPhase> cthulchu_: Well one place I see it helping with parsing is that the colon is what tells my text editor to indent the next line.
[05:39:42] <cthulchu_> InPhase, what? that has zero relation to interpreter parsing. that's your editor. and it could do that with enter no problem.
[05:39:47] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[05:39:55] <cthulchu_> nedbat, I find it a serious burden for the new coders, and it's an annoyance for me too
[05:40:09] <InPhase> cthulchu_: Well it could, but then it would have to think about for, while, if, with, and anything else that gets added.
[05:40:16] <cthulchu_> there was something else... like exit from the console was quit, or exit... didn't make any sense.
[05:40:32] <InPhase> try, catch...  I'm probably missing something else.
[05:40:49] <cthulchu_> InPhase, that's not a justification
[05:40:52] <InPhase> else, elif
[05:41:18] <cthulchu_> doesn't matter. computational complexity of that is completely, utterly miniscule. not worth a second, a milisecond of your time.
[05:42:12] *** Joins: xardas (~xardas@149.233.51.127)
[05:42:16] <cthulchu_> a design flaw that people got used to. Unfortunate.
[05:42:22] <nedbat> cthulchu_: hmm, i guess i haven't heard beginners having trouble with the colon that much.
[05:42:26] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800d8f392878f60f9c7.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[05:42:32] <InPhase> cthulchu_: One place where the colon really helps, is in confining syntax errors.
[05:42:47] *** Parts: exarkun (~exarkun@user/exarkun) (WeeChat 2.4)
[05:42:58] <cthulchu_> nedbat, that's cuz the interpreter KNOWS what's wrong.
[05:43:17] <nedbat> cthulchu_: i was talking about beginners, i don't understand.
[05:43:19] <cthulchu_> that's how this mistake is not mistake. when your interpreter knows EXACTLY what's wrong.
[05:43:32] <InPhase> cthulchu_: If you foul up some closing parentheses in an if or a for statement, and then drop the colon, it will catch it at the right spot.  If you leave your parentheses open the indendentation that follows is not an error, and your error message can appear in the wrong spot.
[05:44:26] <cthulchu_> nedbat, I'm explaining to you why you haven't seen beginners asking. Python tells them super explicitly that a colon is missing. It's a joke. If you know that a colon is missing, well, damn! Add it! I'm not saying it, I'm just ridiculing the situation.
[05:45:01] <nedbat> cthulchu_: i'm sorry it's frustrating to you. i don't think ridicule is productive, but I can't do anything about it.
[05:45:04] *** Joins: luva (~luva@37.120.197.45)
[05:45:14] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[05:45:21] <cthulchu_> InPhase, fair point
[05:45:31] <InPhase> cthulchu_: Beginner confused:  https://ideone.com/Szv5bx
[05:45:52] *** Joins: sucaiking (~DELL@49.74.124.184)
[05:46:04] <cthulchu_> well, in that case, a colon won't save him
[05:46:08] <InPhase> Their question will be, "Why can't I print('Hi')?"  And people will reply, "Are you using Python 2?" and a goose chase commences.
[05:46:14] <cthulchu_> he still has issues with parenthesis.
[05:46:30] <InPhase> cthulchu_: It does though:  https://ideone.com/uaGErk
[05:46:56] <cthulchu_> and that what?
[05:46:59] <cthulchu_> works?
[05:47:06] <cthulchu_> how can that work?
[05:47:10] <InPhase> It's an error that points to the right spot.
[05:47:22] <cthulchu_> no, that's not a right spot
[05:47:29] <cthulchu_> it points at the colon
[05:47:36] <InPhase> It's literally exactly where the syntax error happened.
[05:47:47] <cthulchu_> depends
[05:47:50] <InPhase> The colon cannot happen there, because the parentheses are still open.
[05:47:56] <cthulchu_> anyhow, not a justification
[05:48:16] *** Quits: kostkon (~kostkon@2a02:587:a10c:b4c7:fd34:1163:4629:119a) (Remote host closed the connection)
[05:48:21] <InPhase> It's sort of locking the syntax down a little.
[05:48:26] <nedbat> cthulchu_: at this point, you are just ranting. Can we help somehow?
[05:48:32] <cthulchu_> at this point?
[05:48:45] <cthulchu_> I was ranting from the beginning, hehe. Sorry, yes, let's stop.
[05:49:04] <cthulchu_> I still wanna see those one-line loops with colon.
[05:49:37] *** Joins: qpdb (~qpdb@user/qpdb)
[05:50:32] <cthulchu_> Would something like this work? def long_words(lst): return [word for word in lst if len(word) > 5]
[05:51:18] <cthulchu_> I mean, I like JS exactly for the ability to do a lot of work in one line, including multiple closures. The functional approach.
[05:52:14] <yitz> cthulchu_: why would that not work?
[05:52:21] *** Parts: sucaiking (~DELL@49.74.124.184) ()
[05:52:37] <yitz> If you prefer, there's also `filter()`
[05:52:46] <cthulchu_> just asking. got used to blocks starting from a new life in Py
[05:53:00] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[05:53:04] <cthulchu_> so the column can replace the new line. That's important.
[05:53:12] <cthulchu_> Makes it a lot more tolerable, tbh.
[05:53:14] *** Joins: jsm (~jmcb@nas47-67.york.ac.uk)
[05:53:37] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:53:37] <cthulchu_> anyhow, thanks for the chat folks.
[05:53:42] <yitz> There's a really, really easy way to test if something works or not
[05:53:56] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Quit: Client closed)
[05:54:27] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 252 seconds)
[05:54:28] *** Quits: jsm (~jmcb@nas47-67.york.ac.uk) (Client Quit)
[05:54:46] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[05:55:45] <cthulchu_> yitz, I know, I don't have the interpreter on this machine
[05:56:05] <cthulchu_> oh? maybe you have an interpreter bot here?
[05:56:09] <nedbat> nope
[05:56:27] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[05:56:42] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[05:57:00] <yitz> Are you trying to write code without a way to run it?
[05:57:10] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[05:57:27] <yitz> Online interpretter: https://www.programiz.com/python-programming/online-compiler/
[05:59:09] <cthulchu_> I'm not trying anything. thanks.
[05:59:13] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 252 seconds)
[06:00:59] *** Joins: sharperguy (~sharpergu@88.130.220.218)
[06:01:47] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 252 seconds)
[06:02:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:02:20] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[06:02:40] *** Joins: cliluw (~cliluw@47.147.80.149)
[06:03:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (osmium.libera.chat (Nickname regained by services)))
[06:03:13] *** vinleod is now known as vdamewood
[06:04:32] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Ping timeout: 252 seconds)
[06:06:16] *** Quits: emerent (~quassel@p200300cd571645bfba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:09:21] *** Joins: emerent (~quassel@p200300cd5715b0a8ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:11:29] <cthulchu_> hey folks, sorry, one more thing. Just out of curiosity, I'm trying to rewrite that function to use a filter. And I still wanna keep it a one-liner, which means I have to use an anonymous function there, that Python calls lambda, I think... Errr... And it works (I think), but filter returns... a filter object rather than an array. what's a filter object?
[06:11:37] <cthulchu_> Sorry, this is my code: def long_words(lst): return filter((lambda word: len(word) > 5), lst)
[06:12:25] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 256 seconds)
[06:12:46] <cthulchu_> and looks like I can't return from lambdas, so I assume it's gonna return its stuff automatically?
[06:13:11] <jinsun> you can write only one expression inside a lambda
[06:13:21] <jinsun> and that is what is returned
[06:13:30] <cthulchu_> perfect!
[06:13:33] <cthulchu_> then it works
[06:13:54] <cthulchu_> but then filter returns a filter object. I thought it would return an array
[06:13:56] *** Joins: srhm (~srhm@user/srhm)
[06:14:04] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[06:14:15] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:15:05] <cthulchu_> oh, I should just wrap it in list. I wonder why they bothered making up an object
[06:15:11] <cthulchu_> iterable!
[06:15:24] <jinsun> you will have to convert the filter to the object you want, like list(filter(...)) if you want list or tuple(filter(...)) if you want tuple etc
[06:15:42] <cthulchu_> yes, this work perfectly fine: def long_words(lst): return list(filter((lambda word: len(word) > 5), lst)) thanks! :)
[06:15:47] <jinsun> you don't always want a lst so it is a waste to convert it to a list like python 2 did
[06:16:21] <cthulchu_> when would you not want a list? Sorry, I'm using array functions all the time in JS and there was no case where I wouldn't want an array
[06:17:20] <jinsun> there are a lot of places where any iterable is acceptable, not only lists
[06:18:07] <jinsun> filter is lazy and making a list from the filter is expensive, so you don't want to do it when just the lazy iterable will do
[06:18:31] <cthulchu_> aaaaah
[06:18:39] <cthulchu_> makes perfect sense!
[06:18:46] <cthulchu_> thank you
[06:21:07] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[06:21:41] *** Quits: Techcable_ (~Techcable@168.235.93.147) (Ping timeout: 268 seconds)
[06:22:16] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[06:22:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:24:19] *** Joins: dalan0 (~dalan@194-193-164-106.tpgi.com.au)
[06:25:44] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:25:57] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[06:25:59] *** Quits: dalan (~dalan@124.168.196.74) (Ping timeout: 252 seconds)
[06:25:59] *** dalan0 is now known as dalan
[06:26:10] *** brabrax_ is now known as brabrax
[06:27:38] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 252 seconds)
[06:29:15] <greentree> is there a reason ctrl+c doesnt work when im using the threading lib to start my program?
[06:29:19] <greentree> on windows
[06:31:05] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:49] <jinsun> greentree: https://docs.python.org/3/library/signal.html#signals-and-threads
[06:31:50] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:32:10] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 268 seconds)
[06:34:42] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:06] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[06:36:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:36:47] *** Joins: sagax (~sagax_nb@user/sagax)
[06:37:31] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:40:54] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[06:42:51] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[06:43:09] <greentree> so i cant use ctrl+c with threading?
[06:43:39] *** Joins: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com)
[06:44:08] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Ping timeout: 252 seconds)
[06:44:43] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:47:54] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800d8f392878f60f9c7.ipv6.abo.wanadoo.fr)
[06:48:36] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:49:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:50:48] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[06:52:52] *** Joins: gitargy (~gitargy@76.78.94.79)
[06:54:35] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Ping timeout: 252 seconds)
[06:56:32] *** Joins: Andrynet1 (~Andrynet@190.152.202.181)
[06:58:57] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[07:00:12] *** Joins: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net)
[07:02:03] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[07:03:16] *** Quits: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net) (Client Quit)
[07:03:46] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[07:03:59] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:04:20] *** Joins: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net)
[07:05:58] *** Quits: Andrynet1 (~Andrynet@190.152.202.181) (Quit: WeeChat 3.3)
[07:07:08] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:07:08] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:07:08] *** finn_elija is now known as FinnElija
[07:07:43] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:07:52] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:08:35] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Client Quit)
[07:10:13] *** Quits: _xor (~xor@72.49.199.147) (Ping timeout: 256 seconds)
[07:10:25] *** Joins: Nact (~l@host-85-27-123-35.dynamic.voo.be)
[07:10:34] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[07:10:40] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[07:10:58] *** Quits: Pandadub (~Barones@2804:7f3:8988:8f27:16d4:c85f:5e2c:ebbe) (Remote host closed the connection)
[07:11:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:15:33] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[07:19:47] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[07:20:16] *** Quits: aod (~a@201.209.165.43) (Quit: Lost terminal)
[07:21:09] *** Joins: grooverman_ (~grooverma@177.102.119.40)
[07:23:11] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 252 seconds)
[07:24:29] *** Joins: parv (~quass@user/parv)
[07:24:56] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[07:26:29] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[07:31:01] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:31:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[07:33:23] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:35:32] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:25] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:53] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[07:38:30] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[07:38:55] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[07:39:06] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:39:11] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[07:40:10] *** Joins: kdc (~kdc@196.211.197.159)
[07:41:39] *** Joins: vhqr (~user@120.194.8.115)
[07:42:44] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:42:49] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[07:43:31] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[07:45:11] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800d8f392878f60f9c7.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[07:47:41] *** Quits: vhqr (~user@120.194.8.115) (Remote host closed the connection)
[07:48:51] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Ping timeout: 252 seconds)
[07:49:06] *** Quits: sreve (~quassel@p54a71246.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:49:38] *** Joins: sreve (~quassel@p4ff44c06.dip0.t-ipconnect.de)
[07:49:49] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[07:51:47] *** Quits: zaz\ (~zaz@poneybl.eu) (Ping timeout: 252 seconds)
[07:54:58] *** Joins: schmoee__ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[07:57:28] *** Joins: zaz\ (~zaz@poneybl.eu)
[07:57:39] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:59:07] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Ping timeout: 252 seconds)
[08:00:42] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[08:01:40] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[08:03:36] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:03:41] <Repiphany> try-except KeyboardInterrupt in the main thread
[08:03:48] <Repiphany> Oh slow
[08:03:51] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:04:28] *** Joins: Techcable (~Techcable@168.235.93.147)
[08:04:40] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[08:04:41] *** Joins: chuck_ (~chuck@181.191.143.232)
[08:05:11] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:05:49] *** Quits: chuck_ (~chuck@181.191.143.232) (Client Quit)
[08:08:21] <NoImNotNineVolt> hm, using tkinter canvas.create_text, is there a way to determine the height of the created text? or a bounding box, better still?
[08:09:01] *** Quits: schmoee__ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[08:10:39] <NoImNotNineVolt> nm, canvas.bbox works fine.
[08:13:15] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[08:15:32] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[08:20:15] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[08:22:24] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[08:22:45] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:23:27] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[08:24:03] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 252 seconds)
[08:24:03] *** jmiehe1 is now known as jmiehe
[08:25:54] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[08:26:41] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:26:44] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[08:27:27] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[08:29:56] *** Joins: the_lanetly_052_ (~the_lanet@194.135.166.91)
[08:30:34] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[08:32:23] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.178) (Ping timeout: 256 seconds)
[08:32:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:33:13] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Ping timeout: 252 seconds)
[08:38:48] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[08:39:33] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[08:40:25] *** Joins: frost (~frost@user/frost)
[08:41:32] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Remote host closed the connection)
[08:41:47] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[08:43:31] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[08:44:07] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[08:44:42] *** Joins: Atque (~Atque@user/atque)
[08:44:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:47:04] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[08:48:39] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:995a:471f:5ee2:dd94) (Read error: Connection reset by peer)
[08:49:37] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:50:36] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[08:50:37] <koopman> parv how to use your code with my own lists when it comes back list has no attribute .split?, See https://termbin.com/1nd9
[08:51:17] <aphysically> nedbat: jinsun: AoC really really straightforward https://bpa.st/JFYQ -> this is my 5 minute solution before golfing attempts so we'll see what I come up with
[08:51:22] <parv> koopman, Post your code
[08:51:48] <aphysically> also jinsun https://bpa.st/JFYQ items is a list of strings in this, just do items = ["1", "24"] above it, I don't understand pyright's type complaints here I think it's maybe wrong?
[08:51:55] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:52:40] <parv> koopman, In my code, split() is on strings, not on lists. Since you had not provided Python list or dict structures I had to create my own
[08:53:21] <koopman> Okay
[08:53:22] <aphysically> I don't know if I'll ultimately keep my map datastructure, I only used it because I can use the Counter() class in python to create it automagically for me
[08:53:27] <aphysically> so it was the fastest for me to code
[08:53:37] <aphysically> https://bpa.st/CSNA <- here
[08:55:54] <xMopx> https://git.xmopx.net/dave/aoc2021/src/branch/master/6/b.py
[08:55:55] *** Joins: schmoee__ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[08:56:01] <xMopx> tonight's advent of code
[08:56:05] <xMopx> (spoilers)
[08:56:28] *** Quits: ghostbuster (~admin@user/ghostbuster) (*.net *.split)
[08:56:28] *** Quits: sirn (~sirn@user/sirn) (*.net *.split)
[08:56:28] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[08:56:28] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[08:56:28] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[08:56:28] *** Quits: Buliarous (~gypsydang@185.207.166.57) (*.net *.split)
[08:56:28] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[08:56:28] *** Quits: adium (adium@user/adium) (*.net *.split)
[08:56:28] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[08:56:28] *** Quits: nickodd (~nickodd@user/nickodd) (*.net *.split)
[08:56:28] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[08:56:28] *** Quits: nfc_ (nfc@tilde.institute) (*.net *.split)
[08:56:28] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[08:56:29] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (*.net *.split)
[08:56:29] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (*.net *.split)
[08:56:29] *** Quits: sunyibo (~dorsch@2a04:52c0:101:443::) (*.net *.split)
[08:56:29] *** Quits: Quietus (~quietus@2a04:52c0:101:181::) (*.net *.split)
[08:56:29] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[08:56:29] *** Quits: randall (~randall@user/randall) (*.net *.split)
[08:56:29] *** Quits: trashcatt (~trashcatt@znc.trashcat.xyz) (*.net *.split)
[08:56:29] *** Quits: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com) (*.net *.split)
[08:56:29] *** Quits: rigid (~rigid@user/rigid) (*.net *.split)
[08:56:29] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[08:56:29] *** Quits: neil (~kneel@rockylinux/infra/neil) (*.net *.split)
[08:56:29] *** Quits: kgz (~kragniz@nyaa.kragniz.eu) (*.net *.split)
[08:56:29] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (*.net *.split)
[08:56:29] *** Quits: Avaris (~Avaris@avar.is) (*.net *.split)
[08:56:29] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[08:56:29] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[08:56:29] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[08:56:29] *** Quits: anorthall_ (~anorthall@user/anorthall) (*.net *.split)
[08:56:29] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[08:56:29] *** Quits: mspe (~user@tilde.team/user/mspe) (*.net *.split)
[08:56:29] *** Quits: ouemt (~quassel@user/ouemt) (*.net *.split)
[08:56:29] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[08:56:29] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (*.net *.split)
[08:56:29] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (*.net *.split)
[08:56:29] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[08:56:29] *** Quits: Nact (~l@host-85-27-123-35.dynamic.voo.be) (*.net *.split)
[08:56:29] *** Quits: gitargy (~gitargy@76.78.94.79) (*.net *.split)
[08:56:29] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[08:56:29] *** Quits: brabrax (~brabrax@user/brabrax) (*.net *.split)
[08:56:29] *** Quits: srhm (~srhm@user/srhm) (*.net *.split)
[08:56:29] *** Quits: emerent (~quassel@p200300cd5715b0a8ba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[08:56:29] *** Quits: cliluw (~cliluw@47.147.80.149) (*.net *.split)
[08:56:29] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (*.net *.split)
[08:56:29] *** Quits: luva (~luva@37.120.197.45) (*.net *.split)
[08:56:29] *** Quits: damonlynch (~ngaio@static-68-235-44-21.cust.tzulo.com) (*.net *.split)
[08:56:29] *** Quits: dohtem (uid524096@user/dohtem) (*.net *.split)
[08:56:29] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[08:56:29] *** Quits: tk (~tk@ircpuzzles/staff/tk) (*.net *.split)
[08:56:29] *** Quits: dre (~dre@60.229.45.121) (*.net *.split)
[08:56:29] *** Quits: Terexen (~terexen@user/terexen) (*.net *.split)
[08:56:29] *** Quits: esv (~esv@74.124.178.154) (*.net *.split)
[08:56:29] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[08:56:29] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (*.net *.split)
[08:56:29] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[08:56:29] *** Quits: dhch (~dhch@185.213.154.165) (*.net *.split)
[08:56:29] *** Quits: kolcon (~kolcon@v.kolouch.org) (*.net *.split)
[08:56:29] *** Quits: yitz (~yitz@exercism/yitz) (*.net *.split)
[08:56:29] *** Quits: mxp (~mxp@185.16.205.131) (*.net *.split)
[08:56:29] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (*.net *.split)
[08:56:29] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[08:56:29] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (*.net *.split)
[08:56:29] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (*.net *.split)
[08:56:29] *** Quits: lethu (~lethu@user/lethu) (*.net *.split)
[08:56:29] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (*.net *.split)
[08:56:29] *** Quits: seednode (~seednode@user/seednode) (*.net *.split)
[08:56:29] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[08:56:29] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[08:56:29] *** Quits: waxfire (~waxfire@65.119.2.240) (*.net *.split)
[08:56:29] *** Quits: stwange (~j@90.253.61.76) (*.net *.split)
[08:56:29] *** Quits: Strom (strom@fedora/strom) (*.net *.split)
[08:56:29] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (*.net *.split)
[08:56:29] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[08:56:29] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[08:56:29] *** Quits: foxbox (~cammy@user/cammy) (*.net *.split)
[08:56:29] *** Quits: julia (~quassel@user/julia) (*.net *.split)
[08:56:29] *** Quits: jug (~jug@user/jug) (*.net *.split)
[08:56:29] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[08:56:29] *** Quits: Dotz0cat (~Dotz0cat@h87.47.22.98.static.ip.windstream.net) (*.net *.split)
[08:56:29] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (*.net *.split)
[08:56:29] *** Quits: cation (cation@user/cation) (*.net *.split)
[08:56:29] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (*.net *.split)
[08:56:29] *** Quits: botfather (~botfather@shell1.dds.nl) (*.net *.split)
[08:56:29] *** Quits: xaltsc (~xaltsc@user/xaltsc) (*.net *.split)
[08:56:29] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (*.net *.split)
[08:56:29] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (*.net *.split)
[08:56:29] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[08:56:29] *** Quits: dulanic (~dulanic@47.187.144.163) (*.net *.split)
[08:56:29] *** Quits: aphysically (~aphysical@user/aphysically) (*.net *.split)
[08:56:29] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[08:56:29] *** Quits: greentree (~greentree@pool-108-29-36-221.nycmny.fios.verizon.net) (*.net *.split)
[08:56:29] *** Quits: davor (~davor@user/davor) (*.net *.split)
[08:56:29] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[08:56:29] *** Quits: philipp64 (~philipp64@174.27.30.118) (*.net *.split)
[08:56:29] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (*.net *.split)
[08:56:30] *** Quits: ilmostro (~ilmostro@user/ilmostro) (*.net *.split)
[08:56:30] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (*.net *.split)
[08:56:30] *** Quits: chatcat_ (~chatcat@ip-24-53-119-61.user.start.ca) (*.net *.split)
[08:56:30] *** Quits: fructose (~fructose@user/fructose) (*.net *.split)
[08:56:30] *** Quits: Phase (~phase@user/phase) (*.net *.split)
[08:56:30] *** Quits: BillyZane (~BillyZane@152.89.204.189) (*.net *.split)
[08:56:30] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (*.net *.split)
[08:56:30] *** Quits: asix (~Anders@user/asix) (*.net *.split)
[08:56:30] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[08:56:30] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[08:56:30] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[08:56:30] *** Quits: stella (aoei@nethackscoreboard/aoei) (*.net *.split)
[08:56:30] *** Quits: OPK (~OPK@user/opk) (*.net *.split)
[08:56:30] *** Quits: Balzy (~Balzy@host-79-17-138-160.retail.telecomitalia.it) (*.net *.split)
[08:56:30] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[08:56:30] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[08:56:30] *** Quits: amoros (~irc@user/amoros) (*.net *.split)
[08:56:30] *** Quits: mosh3k21 (~mosh3k21@user/mosh3k21) (*.net *.split)
[08:56:30] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[08:56:30] *** Quits: user3456 (user3456@user/user3456) (*.net *.split)
[08:56:30] *** Quits: gildarts (16abab341f@user/gildarts) (*.net *.split)
[08:56:30] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (*.net *.split)
[08:56:30] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (*.net *.split)
[08:56:30] *** Quits: erhandsome (~erhandsom@user/erhandsome) (*.net *.split)
[08:56:30] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (*.net *.split)
[08:56:30] *** Quits: starz (starz@2001:41d0:8:4bd3::1) (*.net *.split)
[08:56:30] *** Quits: Swayze (~gryster@user/swayze) (*.net *.split)
[08:56:30] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[08:56:30] *** Quits: bambams (~bambams@user/bambams) (*.net *.split)
[08:56:30] *** Quits: CodeGeek (~codegeek@about/java/CodeGeek) (*.net *.split)
[08:56:30] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (*.net *.split)
[08:56:30] *** Quits: encukou (quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[08:56:30] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[08:56:30] *** Quits: Tashtari (~tashtari@user/tashtari) (*.net *.split)
[08:56:30] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[08:56:30] *** Quits: Tritium (~tritium@toxin.sdamon.com) (*.net *.split)
[08:56:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[08:56:30] *** Quits: poorboy_ (~poorboy@159.89.189.144) (*.net *.split)
[08:56:30] *** Quits: ulif (~nick@user/ulif) (*.net *.split)
[08:56:30] *** Quits: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com) (*.net *.split)
[08:56:30] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[08:56:30] *** Quits: yolo (~xxiao@159.89.184.51) (*.net *.split)
[08:56:30] *** Quits: zoid (~zoid@user/zoid) (*.net *.split)
[08:56:30] *** Quits: waveform (~quassel@waveform.plus.com) (*.net *.split)
[08:56:30] *** Quits: cluelessperson_ (~cluelessp@user/cluelessperson) (*.net *.split)
[08:56:30] *** Quits: ihaveamac_ (~ihaveamac@ihaveahax.net) (*.net *.split)
[08:56:30] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (*.net *.split)
[08:56:30] *** Quits: tvm (~tom@ip-89-103-96-164.net.upcbroadband.cz) (*.net *.split)
[08:56:30] *** Quits: jemark (jemark@user/jemark) (*.net *.split)
[08:56:30] *** Quits: khile (cacambo@triton.blinkenshell.org) (*.net *.split)
[08:56:30] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (*.net *.split)
[08:56:30] *** Quits: pankid (~quassel@pankid.club) (*.net *.split)
[08:56:30] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (*.net *.split)
[08:56:30] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (*.net *.split)
[08:56:30] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (*.net *.split)
[08:56:30] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[08:56:30] *** Quits: mindlesstux[m] (~mindlesst@user/mindlesstux) (*.net *.split)
[08:56:30] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[08:56:30] *** Quits: CrtxReavr (crtxreavr@shodan.trioptimum.com) (*.net *.split)
[08:56:30] *** Quits: holgersson (~quassel@user/holgersson) (*.net *.split)
[08:56:30] *** Quits: LostInWeb (~quassel@narvi.bifroest.eu) (*.net *.split)
[08:56:30] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[08:56:30] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (*.net *.split)
[08:56:30] *** Quits: emptynine (tkk@cybertron.redlight.li) (*.net *.split)
[08:56:30] *** Quits: beencubed (~beencubed@209.131.238.248) (*.net *.split)
[08:56:30] *** Quits: traptrip (trip@brigaid.xs4all.nl) (*.net *.split)
[08:56:30] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[08:56:30] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[08:56:30] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[08:56:31] *** Quits: c10l (~c10l@user/c10l) (*.net *.split)
[08:56:31] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[08:56:31] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (*.net *.split)
[08:56:31] *** Quits: gitly (~gitly@85.255.233.8) (*.net *.split)
[08:56:31] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[08:56:31] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (*.net *.split)
[08:56:31] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (*.net *.split)
[08:56:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[08:56:31] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (*.net *.split)
[08:56:31] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[08:56:31] *** Quits: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net) (*.net *.split)
[08:56:31] *** Quits: Alexer (~alexer@85.17.122.98) (*.net *.split)
[08:56:31] *** Quits: cdown (~cdown@163.114.131.1) (*.net *.split)
[08:56:31] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[08:56:31] *** Quits: AlanMD (~AlanMD@86.121.179.183) (*.net *.split)
[08:56:31] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[08:56:31] *** Quits: gcbirzan_ (~gcbirzan@user/gcbirzan) (*.net *.split)
[08:56:31] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (*.net *.split)
[08:56:31] *** Quits: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com) (*.net *.split)
[08:56:31] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[08:56:31] *** Quits: dangrenier83 (~pi@user/dangrenier83) (*.net *.split)
[08:56:31] *** Quits: Roedy (Roedy@user/roedy) (*.net *.split)
[08:56:31] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (*.net *.split)
[08:56:31] *** Quits: newdimension (~newdimnes@user/newdimension) (*.net *.split)
[08:56:31] *** Quits: canton7 (~canton7@about/csharp/canton7) (*.net *.split)
[08:56:31] *** Quits: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182) (*.net *.split)
[08:56:31] *** Quits: haps (~haps@hyena.haps.ca) (*.net *.split)
[08:56:31] *** Quits: millido (~millido@84.210.150.128) (*.net *.split)
[08:56:31] *** Quits: et (~et@user/et) (*.net *.split)
[08:56:31] *** Quits: MercilessDeth (~brad@136.49.59.177) (*.net *.split)
[08:56:31] *** Quits: nadio (ice@starlight.iextreme.org) (*.net *.split)
[08:56:31] *** Quits: demophoon4 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (*.net *.split)
[08:56:31] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (*.net *.split)
[08:56:31] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[08:56:31] *** Quits: Throgkt (~Throgkt@user/throgkt) (*.net *.split)
[08:56:31] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[08:56:31] *** Quits: gr1m (~gr1m@45.83.220.194) (*.net *.split)
[08:56:31] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[08:56:31] *** Quits: psyxopompos (~psyxopomp@user/psyxopompos) (*.net *.split)
[08:56:31] *** Quits: nrg (~NRG@user/nrg) (*.net *.split)
[08:56:31] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (*.net *.split)
[08:56:31] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (*.net *.split)
[08:56:31] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (*.net *.split)
[08:56:31] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[08:56:31] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[08:56:31] *** Quits: quasineutral (~quaisneut@user/quasineutral) (*.net *.split)
[08:56:31] *** Quits: Batzy (~quassel@user/batzy) (*.net *.split)
[08:56:31] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (*.net *.split)
[08:56:31] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (*.net *.split)
[08:56:31] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[08:56:31] *** Quits: nepeat (~nepeat@79.110.170.59) (*.net *.split)
[08:56:31] *** Quits: mgedmin (~mg@user/mgedmin) (*.net *.split)
[08:56:31] *** Quits: jim (~jim@about/linux/staff/jim) (*.net *.split)
[08:56:31] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[08:56:31] *** Quits: svet (~ec2-user@ec2-3-144-179-53.us-east-2.compute.amazonaws.com) (*.net *.split)
[08:56:31] *** Quits: Wu (~wu@152.red-88-21-0.staticip.rima-tde.net) (*.net *.split)
[08:56:31] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[08:56:31] *** Quits: glider (~glider@user/glider) (*.net *.split)
[08:56:31] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[08:56:31] *** Quits: laksith (~laksith@laksith.dev) (*.net *.split)
[08:56:31] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[08:56:31] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[08:56:31] *** Quits: voirnox (~voirnox@xor.moe) (*.net *.split)
[08:56:31] *** Quits: woky (~woky@li1651-31.members.linode.com) (*.net *.split)
[08:56:31] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[08:56:31] *** Quits: bim9262 (~bim9262@user/bim9262) (*.net *.split)
[08:56:31] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[08:56:31] *** Quits: dawg (dirtydawg@triton.blinkenshell.org) (*.net *.split)
[08:56:31] *** Quits: Keira (~k@lulzsec.co.uk) (*.net *.split)
[08:56:31] *** Quits: AM (~techman@213.216.208.108) (*.net *.split)
[08:56:31] *** Quits: raek (~raek@h-109-228-152-171.a163.priv.bahnhof.se) (*.net *.split)
[08:56:31] *** Quits: alex11 (~alex11@user/alex11) (*.net *.split)
[08:56:31] *** Quits: meti (~meti@user/meti) (*.net *.split)
[08:56:31] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (*.net *.split)
[08:56:31] *** Quits: kr0nk (~kr0nk@user/kr0nk) (*.net *.split)
[08:56:31] *** Quits: habnabit_ (~habnabit@python/site-packages/habnabit) (*.net *.split)
[08:56:31] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[08:56:31] *** Quits: Tomassi-1 (~Tomassi-1@ec2-16-170-233-250.eu-north-1.compute.amazonaws.com) (*.net *.split)
[08:56:31] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (*.net *.split)
[08:56:31] *** Quits: Sadale (~Sadale@user/sadale) (*.net *.split)
[08:56:31] *** Quits: km (znc@user/km) (*.net *.split)
[08:56:31] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[08:56:32] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[08:56:32] *** Quits: noord (~noord@user/noord) (*.net *.split)
[08:56:32] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[08:56:32] *** Quits: nanonyme (nanonyme@kapsi.fi) (*.net *.split)
[08:56:32] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[08:56:32] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[08:56:32] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (*.net *.split)
[08:56:32] *** Quits: lyr (~lyr@user/lyr) (*.net *.split)
[08:56:32] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[08:56:32] *** Quits: rvgate (~rvgate@user/rvgate) (*.net *.split)
[08:56:32] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[08:56:32] *** Quits: regulate (~regulate@koduro.com) (*.net *.split)
[08:56:32] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[08:56:32] *** Quits: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[08:56:32] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (*.net *.split)
[08:56:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[08:56:32] *** Quits: wereii (~wereii@37.205.14.89) (*.net *.split)
[08:56:32] *** Quits: enrh (~enrh@user/enrh) (*.net *.split)
[08:56:32] *** Quits: phantomcircuit (~phantomci@192.241.205.97) (*.net *.split)
[08:56:32] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[08:56:32] *** Quits: aileran (~ubuntu@ec2-18-219-39-125.us-east-2.compute.amazonaws.com) (*.net *.split)
[08:56:32] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[08:56:32] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (*.net *.split)
[08:56:32] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[08:56:32] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[08:56:32] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[08:56:32] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[08:56:32] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (*.net *.split)
[08:56:32] *** Quits: Saxtheowl (~roro@78.192.226.182) (*.net *.split)
[08:56:32] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[08:56:32] *** Quits: nosoul (nosoul@gateway/vpn/protonvpn/nosoul) (*.net *.split)
[08:56:32] *** Quits: EGH (~EGH@185.25.195.104) (*.net *.split)
[08:56:32] *** Quits: ede (~ede@user/ede) (*.net *.split)
[08:56:32] *** Quits: pyfisch (~pyfisch@user/pyfisch) (*.net *.split)
[08:56:32] *** Quits: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (*.net *.split)
[08:56:32] *** Quits: redrum88 (redrum88@user/redrum88) (*.net *.split)
[08:56:32] *** Quits: supay (adas@adas.shelltalk.net) (*.net *.split)
[08:56:32] *** Quits: dave2F (~dave@78-56-248-37.static.zebra.lt) (*.net *.split)
[08:56:32] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[08:56:32] *** Quits: tanner (~tanner@tilde.town) (*.net *.split)
[08:56:32] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (*.net *.split)
[08:56:32] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[08:56:32] *** Quits: drincruz (drincruz@2607:5300:203:3f52::19) (*.net *.split)
[08:56:32] *** Quits: rjwiii (~mr-rich@idlerpg/player/mr-rich) (*.net *.split)
[08:56:32] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[08:56:32] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[08:56:32] *** Quits: agireud (~agireud@2605:a601:ab06:c700:211:32ff:fe32:e15f) (*.net *.split)
[08:56:32] *** Quits: kehn (quassel@2600:3c03::f03c:92ff:fe9a:ad08) (*.net *.split)
[08:56:32] *** Quits: selikolg (~selikolg@178.62.2.76) (*.net *.split)
[08:56:32] *** Quits: gossie (~gossie@94-215-32-45.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[08:56:32] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[08:56:32] *** Quits: Omega037 (~Omega037@047-233-057-109.res.spectrum.com) (*.net *.split)
[08:56:32] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[08:56:32] *** Quits: Bardon (~Bardon@user/Bardon) (*.net *.split)
[08:56:32] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[08:56:32] *** Quits: neoweb (sid343200@id-343200.lymington.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: pwillard (sid136981@id-136981.hampstead.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: snalty (~Shhh@user/snalty) (*.net *.split)
[08:56:32] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[08:56:32] *** Quits: pr3d4t0r (~zhenya01@user/pr3d4t0r) (*.net *.split)
[08:56:32] *** Quits: Timvde (~tim@towely.vdeynde.com) (*.net *.split)
[08:56:32] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[08:56:32] *** Quits: DXR (~lyrical@77.49.234.159.dsl.dyn.forthnet.gr) (*.net *.split)
[08:56:33] *** Quits: lambda (~weechat@cyka.blyat.vodka) (*.net *.split)
[08:56:33] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (*.net *.split)
[08:56:33] *** Quits: Helenah (~s98259@user/helenah) (*.net *.split)
[08:56:33] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[08:56:33] *** Quits: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (*.net *.split)
[08:56:33] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[08:56:33] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[08:56:33] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[08:56:33] *** Quits: Darkfoe (sid402081@id-402081.helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: Forkk_ (~forkk@li926-228.members.linode.com) (*.net *.split)
[08:56:33] *** Quits: xiaguan (~parsley@2604:180:f1::173) (*.net *.split)
[08:56:33] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[08:56:33] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[08:56:33] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (*.net *.split)
[08:56:33] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[08:56:33] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[08:56:33] *** Quits: zmotaj (~zmotaj@user/zmotaj) (*.net *.split)
[08:56:33] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[08:56:33] *** Quits: erica (~erica@user/erica) (*.net *.split)
[08:56:33] *** Quits: st3fan (sid43079@id-43079.lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: frodl (sid527064@user/frodl) (*.net *.split)
[08:56:33] *** Quits: ballingt (sid190590@id-190590.helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: treefrob (~treefrob@p57a9652c.dip0.t-ipconnect.de) (*.net *.split)
[08:56:33] *** Quits: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com) (*.net *.split)
[08:56:33] *** Quits: Pilate (~pilate@pilate.io) (*.net *.split)
[08:56:33] *** Quits: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com) (*.net *.split)
[08:56:33] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[08:56:33] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[08:56:33] *** Quits: moonmoon (awoo@libera/staff/moonmoon) (*.net *.split)
[08:56:33] *** Quits: AhmedAmerican (sid470527@ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: Gamah (~quassel@gamah.net) (*.net *.split)
[08:56:33] *** Quits: coldmountain (sid484352@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: lidless (lidless@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: guardian (~guardian@planet-d.net) (*.net *.split)
[08:56:33] *** Quits: thib (~thib@wikimedia/Thibaut120094) (*.net *.split)
[08:56:33] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[08:56:33] *** Quits: Repiphany (~Repiphany@user/repiphany) (*.net *.split)
[08:56:33] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[08:56:33] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[08:56:33] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[08:56:33] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[08:56:33] *** Quits: fakenullie (~nullie@london.nullie.name) (*.net *.split)
[08:56:33] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[08:56:33] *** Quits: kantlivelong (~kantlivel@octoprint/kantlivelong) (*.net *.split)
[08:56:33] *** Quits: Widdershins (widders@ps.mad.cash) (*.net *.split)
[08:56:33] *** Quits: awygle (~quassel@2604:a880:2:d0::5380:3001) (*.net *.split)
[08:56:33] *** Quits: auctus (~auctus@user/auctus) (*.net *.split)
[08:56:33] *** Quits: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch) (*.net *.split)
[08:56:33] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[08:56:33] *** Quits: the4oo4 (~the4oo4@shenzhou.whatbox.ca) (*.net *.split)
[08:56:33] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[08:56:33] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (*.net *.split)
[08:56:33] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (*.net *.split)
[08:56:33] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[08:56:33] *** Quits: sasha (~sasha@wikimedia/-sasha-) (*.net *.split)
[08:56:33] *** Quits: opashley (~opashley@70.138.105.34.bc.googleusercontent.com) (*.net *.split)
[08:56:33] *** Quits: joris2 (~joris@195.123.218.123) (*.net *.split)
[08:56:33] *** Quits: betterOn1 (~user@vmi489242.contaboserver.net) (*.net *.split)
[08:56:33] *** Quits: phillhoc1ing (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (*.net *.split)
[08:56:33] *** Quits: d1b_ (~db@user/d1b) (*.net *.split)
[08:56:33] *** Quits: vlt (~dm@157.230.21.14) (*.net *.split)
[08:56:33] *** Quits: krisd (krisd@s0.mydevil.net) (*.net *.split)
[08:56:34] *** Quits: klotzhauer (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[08:56:34] *** Quits: syllin (~syllin@user/syllin) (*.net *.split)
[08:56:34] *** Quits: jramsay (~lack@user/lack) (*.net *.split)
[08:56:34] *** Quits: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de) (*.net *.split)
[08:56:34] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (*.net *.split)
[08:56:34] *** Quits: aluria (~aluria@canonical/aluria) (*.net *.split)
[08:56:34] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[08:56:34] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[08:56:34] *** Quits: xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[08:56:34] *** Quits: ksynwa_ (~ksynwa@5.45.111.57) (*.net *.split)
[08:56:34] *** Quits: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net) (*.net *.split)
[08:56:34] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[08:56:34] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[08:56:34] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[08:56:34] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[08:56:34] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[08:56:34] *** Quits: sideeffex5613 (~sideeffex@user/sideeffex) (*.net *.split)
[08:56:34] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[08:56:34] *** Quits: wilk (~wilk@user/wilk) (*.net *.split)
[08:56:34] *** Quits: dcaro_away (~dcaro@user/dcaro) (*.net *.split)
[08:56:34] *** Quits: sveinse (~sveinse@2a01:799:55e:1000:c23f:d5ff:fe69:c6fb) (*.net *.split)
[08:56:34] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[08:56:34] *** Quits: the_rat (~ratto@emily.sorcio.org) (*.net *.split)
[08:56:34] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[08:56:34] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (*.net *.split)
[08:56:34] *** Quits: AAAAA_DRAGON (A_D@libera/staff/dragon) (*.net *.split)
[08:56:34] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[08:56:34] *** Quits: richrd (~wavi@thelounge/maintainer/wavi) (*.net *.split)
[08:56:34] *** Quits: harleypig (thelounge@harleypig.com) (*.net *.split)
[08:56:34] *** Quits: simone (~nya@user/sx) (*.net *.split)
[08:56:34] *** Quits: _moep_ (~moep@user/moep/x-3358975) (*.net *.split)
[08:56:34] *** Quits: NeuroWinter (~neuro@107.172.219.235) (*.net *.split)
[08:56:34] *** Quits: extnct (~extnct@2604:180:2:a54:1::9ce7) (*.net *.split)
[08:56:34] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[08:56:34] *** Quits: arash (arash@thinks.life.is-a.beauty) (*.net *.split)
[08:56:34] *** Quits: DX099 (~dx099@2001:470:69fc:105::21ce) (*.net *.split)
[08:56:34] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (*.net *.split)
[08:56:34] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (*.net *.split)
[08:56:34] *** Quits: notepad7 (~notepad@129.159.46.243) (*.net *.split)
[08:56:34] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[08:56:34] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[08:56:34] *** Quits: Melon_Bread (~Rain@li958-238.members.linode.com) (*.net *.split)
[08:56:34] *** Quits: b_jonas (~x@catv-176-63-4-16.catv.broadband.hu) (*.net *.split)
[08:56:34] *** Quits: SnoopJ (~snoopj@user/snoopj) (*.net *.split)
[08:56:34] *** Quits: roniez (~roniez@2a02:c206:2057:5765::1) (*.net *.split)
[08:56:34] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[08:56:34] *** Quits: fling (~fling@user/fling) (*.net *.split)
[08:56:34] *** Quits: AnimalFarmPig (~quassel@user/animalfarmpig) (*.net *.split)
[08:56:34] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[08:56:34] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[08:56:34] *** Quits: libussa (~libussa@libussa.net) (*.net *.split)
[08:56:34] *** Quits: voidcat (~voidcat@user/voidcat) (*.net *.split)
[08:56:34] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[08:56:34] *** Quits: sreve (~quassel@p4ff44c06.dip0.t-ipconnect.de) (*.net *.split)
[08:56:34] *** Quits: grimvar (~grimvar@i5C75F4E8.versanet.de) (*.net *.split)
[08:56:35] *** Quits: Liexei (~Liexei@user/liexei) (*.net *.split)
[08:56:35] *** Quits: crackerjack (~crackerja@pear.bnc4free.com) (*.net *.split)
[08:56:35] *** Quits: MJ94 (mj94@user/mj94) (*.net *.split)
[08:56:35] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (*.net *.split)
[08:56:35] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[08:56:35] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[08:56:35] *** Quits: tf (~tf@user/tf) (*.net *.split)
[08:56:35] *** Quits: toine42 (~antoine@2001:41d0:e:41f::1) (*.net *.split)
[08:56:35] *** Quits: truth (~truth@user/truth) (*.net *.split)
[08:56:35] *** Quits: DerpGusta (~quassel@user/derpgusta) (*.net *.split)
[08:56:35] *** Quits: Lightsword (~Lightswor@user/lightsword) (*.net *.split)
[08:56:35] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[08:56:35] *** Quits: altendky (sid135382@id-135382.hampstead.irccloud.com) (*.net *.split)
[08:56:35] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[08:56:35] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[08:56:35] *** Quits: or4n (~or4n@gerbera.qkka.org) (*.net *.split)
[08:56:35] *** Quits: towel (~towel@user/towel) (*.net *.split)
[08:56:35] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[08:56:35] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[08:56:35] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[08:56:35] *** Quits: byzandula (~byzandula@beerbq.net) (*.net *.split)
[08:56:35] *** Quits: lorenzosu (~lorenzosu@user/lorenzosu) (*.net *.split)
[08:56:35] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[08:56:35] *** Quits: Dantali0n (~Dantali0n@251-228-138-45.connected.by.freedominter.net) (*.net *.split)
[08:56:35] *** Quits: jpaa (~jpaa@87.118.126.66) (*.net *.split)
[08:56:35] *** Quits: znpy (~znpy@user/znpy) (*.net *.split)
[08:56:35] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (*.net *.split)
[08:56:35] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[08:56:35] *** Quits: {4144} (~{4144}@46.56.66.236) (*.net *.split)
[08:56:35] *** Quits: PocketKiller (PacKetIV@user/packetiv) (*.net *.split)
[08:56:35] *** Quits: pulec (~pulec@user/pulec) (*.net *.split)
[08:56:35] *** Quits: tdsmith (~tdsmith@tds.xyz) (*.net *.split)
[08:56:35] *** Quits: Chex (~Chex@user/chex) (*.net *.split)
[08:56:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[08:56:35] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (*.net *.split)
[08:56:35] *** Quits: Ninpo (~Ninpo@user/ninpo) (*.net *.split)
[08:56:35] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[08:56:35] *** Quits: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de) (*.net *.split)
[08:56:35] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[08:56:35] *** Quits: grandfso (~quassel@199.232.237.35.bc.googleusercontent.com) (*.net *.split)
[08:56:35] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[08:56:35] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[08:56:35] *** Quits: cole (~cole@user/cole) (*.net *.split)
[08:56:35] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[08:56:35] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (*.net *.split)
[08:56:35] *** Quits: scarce (~scarce@sourcehut/user/scarce) (*.net *.split)
[08:56:36] *** Quits: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com) (*.net *.split)
[08:56:36] *** Quits: han-` (~han`@user/han-/x-0887595) (*.net *.split)
[08:56:36] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[08:56:36] *** Quits: mokytis__ (~root@user/mokytis/x-7723836) (*.net *.split)
[08:56:36] *** Quits: lantech19446 (~lantech19@144.202.10.138) (*.net *.split)
[08:56:36] *** Quits: aeadio (~aead@user/aead) (*.net *.split)
[08:56:36] *** Quits: JerryXiao (~JerryXiao@user/jerryxiao) (*.net *.split)
[08:56:36] *** Quits: RoyK (~roy@user/royk) (*.net *.split)
[08:56:36] *** Quits: Yorick- (znc@vps.freegamehosting.eu) (*.net *.split)
[08:56:36] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (*.net *.split)
[08:56:36] *** Quits: korros (korros@2600:3c03::f03c:92ff:febf:689a) (*.net *.split)
[08:56:36] *** Quits: olasd (~olasd@softwareheritage/olasd) (*.net *.split)
[08:56:36] *** Quits: schemanic[m] (~schemanic@2001:470:69fc:105::1:2450) (*.net *.split)
[08:56:36] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (*.net *.split)
[08:56:36] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (*.net *.split)
[08:56:36] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (*.net *.split)
[08:56:36] *** Quits: graybeard (~graybeard@user/graybeard) (*.net *.split)
[08:56:36] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (*.net *.split)
[08:56:36] *** Quits: xakan (~xakan@pnmx.zdx.fr) (*.net *.split)
[08:56:36] *** Quits: pacbard (~pacbard@user/pacbard) (*.net *.split)
[08:56:36] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[08:56:36] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[08:56:36] *** Quits: edr (~edr@user/edr) (*.net *.split)
[08:56:36] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[08:56:36] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[08:56:36] *** Quits: tudor_ (~tudor@tomka.hu) (*.net *.split)
[08:56:36] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[08:56:36] *** Quits: Adrixan_ (~Adrixan@218.72.75.34.bc.googleusercontent.com) (*.net *.split)
[08:56:36] *** Quits: MightyMu_ (~MightyMu@104.131.138.31) (*.net *.split)
[08:56:36] *** Quits: grateful (grateful@user/grateful) (*.net *.split)
[08:56:36] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[08:56:36] *** Quits: ttkpy (501@46-97-229-216.sr2.pon.net) (*.net *.split)
[08:56:36] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (*.net *.split)
[08:56:36] *** Quits: rgp (~rgp@user/rgp) (*.net *.split)
[08:56:36] *** Quits: purplex_ (~purplex@user/purplex) (*.net *.split)
[08:56:36] *** Quits: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com) (*.net *.split)
[08:56:36] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[08:56:36] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[08:56:36] *** Quits: chymera (~chymera@ns1000526.ip-51-81-46.us) (*.net *.split)
[08:56:36] *** Quits: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me) (*.net *.split)
[08:56:36] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[08:56:36] *** Quits: bertiger (~bertiger@user/bertiger) (*.net *.split)
[08:56:36] *** Quits: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001) (*.net *.split)
[08:56:36] *** Quits: gurki (~gurki@user/gurki) (*.net *.split)
[08:56:36] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[08:56:36] *** Quits: zommKa (~ccctttmat@2001:470:69fc:105::b947) (*.net *.split)
[08:56:36] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[08:56:36] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[08:56:36] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[08:56:36] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[08:56:36] *** Quits: ngp (~ngp@199.180.249.183) (*.net *.split)
[08:56:37] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[08:56:37] *** Quits: Fossil (~Fossil@95.85.23.165) (*.net *.split)
[08:56:37] *** Quits: alexyov (~alexyov@79.124.0.2) (*.net *.split)
[08:56:37] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[08:56:37] *** Quits: jessicant (~jessica@static.172.234.251.148.clients.your-server.de) (*.net *.split)
[08:56:37] *** Quits: mumixam (~m@user/mumixam) (*.net *.split)
[08:56:37] *** Quits: nucleargrave (~nucleargr@user/nuclearg1) (*.net *.split)
[08:56:37] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[08:56:37] *** Quits: mrhands (~mrhands@user/mrhands) (*.net *.split)
[08:56:37] *** Quits: celphi_ (sid97751@user/celphi) (*.net *.split)
[08:56:37] *** Quits: jtanner (sid194399@id-194399.helmsley.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[08:56:37] *** Quits: nme (~nme@gateway/vpn/pia/nme) (*.net *.split)
[08:56:37] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (*.net *.split)
[08:56:37] *** Quits: fury (uid193779@id-193779.helmsley.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: peterandre (peterandre@2605:6400:c847:1524::4251) (*.net *.split)
[08:56:37] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[08:56:37] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[08:56:37] *** Quits: fuz (~fuz@user/fuz) (*.net *.split)
[08:56:37] *** Quits: mrtnt_ (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0) (*.net *.split)
[08:56:37] *** Quits: sco1 (~sco1@charon.whatbox.ca) (*.net *.split)
[08:56:37] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[08:56:37] *** Quits: hexa- (~hexa-@juno.lossy.network) (*.net *.split)
[08:56:37] *** Quits: redgloboli (~redglobol@user/redgloboli) (*.net *.split)
[08:56:37] *** Quits: The-Compiler (~compiler@the-compiler.org) (*.net *.split)
[08:56:37] *** Quits: mwilson (~mwilson@li159-72.members.linode.com) (*.net *.split)
[08:56:37] *** Quits: allegary (~allegary@apache/committer/gjm) (*.net *.split)
[08:56:37] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[08:56:37] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (*.net *.split)
[08:56:37] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (*.net *.split)
[08:56:37] *** Quits: berton[m] (~berton@2001:470:69fc:105::ce36) (*.net *.split)
[08:56:37] *** Quits: canardo (~canardo@2001:470:69fc:105::e110) (*.net *.split)
[08:56:37] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[08:56:37] *** Quits: marienz__ (~marienz@libera/staff/marienz) (*.net *.split)
[08:56:37] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[08:56:37] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (*.net *.split)
[08:56:37] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (*.net *.split)
[08:56:37] *** Quits: OlaNys (onm@irccore.ofelbar.se) (*.net *.split)
[08:56:37] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[08:56:37] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[08:56:37] *** Quits: gbear605 (~gbear605@user/gbear605) (*.net *.split)
[08:56:37] *** Quits: njhanley (~njhanley@static.15.210.217.95.clients.your-server.de) (*.net *.split)
[08:56:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[08:56:37] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[08:56:37] *** Quits: acnebs- (~acnebs@198.199.68.107) (*.net *.split)
[08:56:37] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[08:56:37] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[08:56:37] *** Quits: bss (bss@rie.incorporeal.org) (*.net *.split)
[08:56:37] *** Quits: abyss (~robbins@user/robbins) (*.net *.split)
[08:56:37] *** Quits: cslr (~cslr@85-76-34-233-nat.elisa-mobile.fi) (*.net *.split)
[08:56:37] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[08:56:38] *** Quits: spaceone (~spaceone@wc1.wechall.net) (*.net *.split)
[08:56:38] *** Quits: u4t (~chat@78.ip-139-99-236.net) (*.net *.split)
[08:56:38] *** Quits: dnns01_ (~quassel@2a02:c207:3003:651::1) (*.net *.split)
[08:56:38] *** Quits: seabre (~seabre@user/seabre) (*.net *.split)
[08:56:38] *** Quits: Mikro (leo@libera.ninja) (*.net *.split)
[08:56:38] *** Quits: cotsuka (~cotsuka@user/cotsuka) (*.net *.split)
[08:56:38] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[08:56:38] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[08:56:38] *** Quits: grawity (grawity@star.nullroute.lt) (*.net *.split)
[08:56:38] *** Quits: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie) (*.net *.split)
[08:56:38] *** Quits: demsh (ws14dshtt8@hermod.demsh.org) (*.net *.split)
[08:56:38] *** Quits: skreech (skreech@user/skreech) (*.net *.split)
[08:56:38] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: agronholm (sid403424@id-403424.helmsley.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: mobius (sid478273@id-478273.uxbridge.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (*.net *.split)
[08:56:38] *** Quits: nigelb (~nigel@zeus.nigelb.me) (*.net *.split)
[08:56:38] *** Quits: jbe (~jbe@lysator/root/jbe) (*.net *.split)
[08:56:38] *** Quits: kushal (~hopless@dgplug/kushal) (*.net *.split)
[08:56:38] *** Quits: bryce (~bryce@ool-457dd6ac.dyn.optonline.net) (*.net *.split)
[08:56:38] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[08:56:38] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[08:56:38] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (*.net *.split)
[08:56:38] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (*.net *.split)
[08:56:38] *** Quits: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd) (*.net *.split)
[08:56:38] *** Quits: leonardo (~leonardo@user/leonardo) (*.net *.split)
[08:56:38] *** Quits: TML (~tml@user/tml) (*.net *.split)
[08:56:38] *** Quits: deutor (~quassel@82.177.4.226) (*.net *.split)
[08:56:38] *** Quits: Vipulk (~vipulk@user/vipulk) (*.net *.split)
[08:56:38] *** Quits: ghormoon (~ghormoon@ghorland.net) (*.net *.split)
[08:56:38] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[08:56:38] *** Quits: guntbert (~yesitsme@user/guntbert) (*.net *.split)
[08:56:38] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[08:56:38] *** Quits: dupondje (~dupondje@artemis.dupie.be) (*.net *.split)
[08:56:38] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[08:56:38] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[08:56:38] *** Quits: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[08:56:38] *** Quits: malvin (~retlo@172.245.134.89) (*.net *.split)
[08:56:38] *** Quits: octav1a (~quassel@173.195.145.98) (*.net *.split)
[08:56:38] *** Quits: summonner (~summonner@188.26.74.156) (*.net *.split)
[08:56:38] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[08:56:38] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[08:56:38] *** Quits: drwasabi (drwasabi@tilde.team) (*.net *.split)
[08:56:38] *** Quits: Wegge (~wegge@user/wegge) (*.net *.split)
[08:56:38] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (*.net *.split)
[08:56:39] *** Quits: Quack (~Quack@185.21.216.169) (*.net *.split)
[08:56:39] *** Quits: ComputerTech (~ComputerT@user/computertech) (*.net *.split)
[08:56:39] *** Quits: jochum (~quassel@user/jochum) (*.net *.split)
[08:56:39] *** Quits: avu (~jan@user/avu) (*.net *.split)
[08:56:39] *** Quits: montpol (montpol@fine.mouses.xyz) (*.net *.split)
[08:56:39] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[08:56:39] *** Quits: mtg (~mtg@209.250.241.226) (*.net *.split)
[08:56:39] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[08:56:39] *** Quits: saschi_ (~saschi@user/saschi) (*.net *.split)
[08:56:39] *** Quits: cache (~cache@user/cacheyourdreams) (*.net *.split)
[08:56:39] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[08:56:39] *** Quits: mdw_ (~root@159.65.86.163) (*.net *.split)
[08:56:39] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[08:56:39] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[08:56:39] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[08:56:39] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[08:56:39] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[08:56:39] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (*.net *.split)
[08:56:39] *** Quits: meain (~meain@2001:470:69fc:105::2db) (*.net *.split)
[08:56:39] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (*.net *.split)
[08:56:39] *** Quits: kikijiki[m] (~kikijiki@user/kikijiki) (*.net *.split)
[08:56:39] *** Quits: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb) (*.net *.split)
[08:56:39] *** Quits: ruediger (~ruediger@user/ruediger) (*.net *.split)
[08:56:39] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[08:56:39] *** Quits: aivkiv (~aivkiv@2a01:4f8:201:6250::2) (*.net *.split)
[08:56:39] *** Quits: push-f (~martin@push-f.com) (*.net *.split)
[08:56:39] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[08:56:39] *** Quits: VSpike (~johncc@2001:bc8:47ac:1a22::1) (*.net *.split)
[08:56:39] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[08:56:39] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[08:56:39] *** Quits: majors (~majors@user/majors) (*.net *.split)
[08:56:39] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[08:56:39] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[08:56:39] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[08:56:39] *** Quits: novasenco (novasenco@user/nova) (*.net *.split)
[08:56:39] *** Quits: kiska (james@user/kiska) (*.net *.split)
[08:56:39] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[08:56:39] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[08:56:39] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[08:56:39] *** Quits: Pici (bnrubin@2600:3c03::f03c:91ff:fe60:2576) (*.net *.split)
[08:56:39] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[08:56:39] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[08:56:39] *** Quits: gerard (~gerard@user/gerard) (*.net *.split)
[08:56:39] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (*.net *.split)
[08:56:39] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[08:56:39] *** Quits: goatish_ (~geclark@19.60.188.35.bc.googleusercontent.com) (*.net *.split)
[08:56:39] *** Quits: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b) (*.net *.split)
[08:56:39] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[08:56:39] *** Quits: Haise0 (~haise01@user/haise01) (*.net *.split)
[08:56:39] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[08:56:39] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (*.net *.split)
[08:56:39] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[08:56:39] *** Quits: mpmc (~mpmc@user/mpmc) (*.net *.split)
[08:56:39] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[08:56:39] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (*.net *.split)
[08:56:40] *** Quits: jposer (sid132110@id-132110.uxbridge.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: r0bby (r0bby@user/r0bby) (*.net *.split)
[08:56:40] *** Quits: twainwek (~user@144.211.196.35.bc.googleusercontent.com) (*.net *.split)
[08:56:40] *** Quits: grym (~grym@user/grym) (*.net *.split)
[08:56:40] *** Quits: llua (~llua@zsh/developer/llua) (*.net *.split)
[08:56:40] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[08:56:40] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (*.net *.split)
[08:56:40] *** Quits: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de) (*.net *.split)
[08:56:40] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (*.net *.split)
[08:56:40] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[08:56:40] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[08:56:40] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[08:56:40] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (*.net *.split)
[08:56:40] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[08:56:40] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[08:56:40] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[08:56:40] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[08:56:40] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[08:56:40] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[08:56:40] *** Quits: ntome (~ntome@user/ntome) (*.net *.split)
[08:56:40] *** Quits: b3z (~b3z@user/b3z) (*.net *.split)
[08:56:40] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[08:56:40] *** Quits: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter) (*.net *.split)
[08:56:40] *** Quits: tris (emptystrin@irc1.lessbroken.org) (*.net *.split)
[08:56:40] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[08:56:40] *** Quits: Antibody (~Antibody@107.170.145.30) (*.net *.split)
[08:56:40] *** Quits: urb4nm (~urb4nm@165.227.158.65) (*.net *.split)
[08:56:40] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[08:56:40] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[08:56:40] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[08:56:40] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[08:56:40] *** Quits: xardas (~xardas@149.233.51.127) (*.net *.split)
[08:56:40] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (*.net *.split)
[08:56:40] *** Quits: Atque (~Atque@user/atque) (*.net *.split)
[08:56:40] *** Quits: penguino (~mrpenguin@user/mrpenguin) (*.net *.split)
[08:56:40] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (*.net *.split)
[08:56:40] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[08:56:40] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (*.net *.split)
[08:56:40] *** Quits: ano (~ano@user/ano) (*.net *.split)
[08:56:40] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (*.net *.split)
[08:56:40] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (*.net *.split)
[08:56:40] *** Quits: Bakunin (~Lindis@user/lindis) (*.net *.split)
[08:56:40] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (*.net *.split)
[08:56:40] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (*.net *.split)
[08:56:40] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[08:56:40] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[08:56:40] *** Quits: naranja (~orange@user/orangeboxcutter) (*.net *.split)
[08:56:40] *** Quits: kevr (~kevr@user/kevr) (*.net *.split)
[08:56:40] *** Quits: rany (~rany@user/rany) (*.net *.split)
[08:56:41] *** Quits: vaio (~gary@user/ghost) (*.net *.split)
[08:56:41] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (*.net *.split)
[08:56:41] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[08:56:41] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[08:56:41] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (*.net *.split)
[08:56:41] *** Quits: spithash (~spithash@user/spithash) (*.net *.split)
[08:56:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[08:56:41] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (*.net *.split)
[08:56:41] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (*.net *.split)
[08:56:41] *** Quits: metaace_ (~metaace@user/metaace) (*.net *.split)
[08:56:41] *** Quits: CombatVet (~c4@user/combatvet) (*.net *.split)
[08:56:41] *** nyany is now known as Duck
[08:56:45] <jinsun> aphysically: looks like it is not able to infer correctly again, using defaultdict[int, int] instead of defaultdict seems to satisfy it
[08:57:20] *** Duck is now known as 020AAGZV8
[08:58:04] *** Joins: Atque (~Atque@user/atque)
[08:58:04] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2)
[08:58:04] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:58:04] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[08:58:04] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:58:04] *** Joins: sreve (~quassel@p4ff44c06.dip0.t-ipconnect.de)
[08:58:04] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:58:04] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[08:58:04] *** Joins: Nact (~l@host-85-27-123-35.dynamic.voo.be)
[08:58:04] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[08:58:04] *** Joins: gitargy (~gitargy@76.78.94.79)
[08:58:04] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:58:04] *** Joins: brabrax (~brabrax@user/brabrax)
[08:58:04] *** Joins: srhm (~srhm@user/srhm)
[08:58:04] *** Joins: emerent (~quassel@p200300cd5715b0a8ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:58:04] *** Joins: cliluw (~cliluw@47.147.80.149)
[08:58:04] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[08:58:04] *** Joins: luva (~luva@37.120.197.45)
[08:58:04] *** Joins: xardas (~xardas@149.233.51.127)
[08:58:04] *** Joins: damonlynch (~ngaio@static-68-235-44-21.cust.tzulo.com)
[08:58:04] *** Joins: esv (~esv@74.124.178.154)
[08:58:04] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[08:58:04] *** Joins: grimvar (~grimvar@i5C75F4E8.versanet.de)
[08:58:04] *** Joins: dohtem (uid524096@user/dohtem)
[08:58:04] *** Joins: Colt (~Colt@user/colt)
[08:58:04] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[08:58:04] *** Joins: dre (~dre@60.229.45.121)
[08:58:04] *** Joins: Terexen (~terexen@user/terexen)
[08:58:04] *** Joins: ano (~ano@user/ano)
[08:58:04] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:58:04] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:58:04] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[08:58:04] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[08:58:04] *** Joins: Bakunin (~Lindis@user/lindis)
[08:58:04] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[08:58:04] *** Joins: wilk (~wilk@user/wilk)
[08:58:04] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[08:58:04] *** Joins: Betal (~Betal@user/betal)
[08:58:04] *** Joins: Saxtheowl (~roro@78.192.226.182)
[08:58:04] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:58:04] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[08:58:04] *** Joins: trashbird (~trashbird@user/trashbird)
[08:58:04] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[08:58:04] *** Joins: lantech19446 (~lantech19@144.202.10.138)
[08:58:04] *** Joins: dhch (~dhch@185.213.154.165)
[08:58:04] *** Joins: c10l (~c10l@user/c10l)
[08:58:04] *** Joins: koo5_ (~quassel@51.140.155.227)
[08:58:04] *** Joins: kolcon (~kolcon@v.kolouch.org)
[08:58:04] *** Joins: yitz (~yitz@exercism/yitz)
[08:58:04] *** Joins: bindu (~bindu@user/bindu)
[08:58:04] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[08:58:04] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[08:58:04] *** Joins: nosoul (nosoul@gateway/vpn/protonvpn/nosoul)
[08:58:04] *** Joins: gitly (~gitly@85.255.233.8)
[08:58:04] *** Joins: mxp (~mxp@185.16.205.131)
[08:58:04] *** Joins: cheater (~Username@user/cheater)
[08:58:04] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[08:58:04] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[08:58:04] *** Joins: naranja (~orange@user/orangeboxcutter)
[08:58:04] *** Joins: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[08:58:04] *** Joins: polyrob (~rob@user/polyrob)
[08:58:04] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[08:58:04] *** Joins: kevr (~kevr@user/kevr)
[08:58:04] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[08:58:04] *** Joins: EGH (~EGH@185.25.195.104)
[08:58:04] *** Joins: rany (~rany@user/rany)
[08:58:04] *** Joins: ede (~ede@user/ede)
[08:58:04] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:58:04] *** Joins: lethu (~lethu@user/lethu)
[08:58:04] *** Joins: vaio (~gary@user/ghost)
[08:58:04] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[08:58:04] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[08:58:04] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[08:58:04] *** Joins: seednode (~seednode@user/seednode)
[08:58:04] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[08:58:04] *** Joins: dstein64 (~dstein64@dannyadam.com)
[08:58:04] *** Joins: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net)
[08:58:04] *** Joins: Alexer (~alexer@85.17.122.98)
[08:58:04] *** Joins: cdown (~cdown@163.114.131.1)
[08:58:04] *** Joins: waxfire (~waxfire@65.119.2.240)
[08:58:04] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:58:04] *** Joins: nucleargrave (~nucleargr@user/nuclearg1)
[08:58:04] *** Joins: stwange (~j@90.253.61.76)
[08:58:04] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[08:58:04] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[08:58:04] *** Joins: gcbirzan_ (~gcbirzan@user/gcbirzan)
[08:58:04] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[08:58:04] *** Joins: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com)
[08:58:04] *** Joins: achilleas (~ach@user/achilleas)
[08:58:04] *** Joins: Strom (strom@fedora/strom)
[08:58:04] *** Joins: dangrenier83 (~pi@user/dangrenier83)
[08:58:04] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[08:58:04] *** Joins: Roedy (Roedy@user/roedy)
[08:58:04] *** Joins: greentree (~greentree@pool-108-29-36-221.nycmny.fios.verizon.net)
[08:58:04] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[08:58:04] *** Joins: digilink (~digilink@user/digilink)
[08:58:04] *** Joins: celphi_ (sid97751@user/celphi)
[08:58:04] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[08:58:04] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[08:58:04] *** Joins: foxbox (~cammy@user/cammy)
[08:58:04] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[08:58:04] *** Joins: de-facto (~de-facto@user/de-facto)
[08:58:04] *** Joins: ntome (~ntome@user/ntome)
[08:58:04] *** Joins: newdimension (~newdimnes@user/newdimension)
[08:58:04] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:58:04] *** Joins: canton7 (~canton7@about/csharp/canton7)
[08:58:04] *** Joins: julia (~quassel@user/julia)
[08:58:04] *** Joins: jug (~jug@user/jug)
[08:58:04] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[08:58:04] *** Joins: supay (adas@adas.shelltalk.net)
[08:58:04] *** Joins: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182)
[08:58:04] *** Joins: haps (~haps@hyena.haps.ca)
[08:58:04] *** Joins: malvin (~retlo@172.245.134.89)
[08:58:04] *** Joins: millido (~millido@84.210.150.128)
[08:58:04] *** Joins: Dotz0cat (~Dotz0cat@h87.47.22.98.static.ip.windstream.net)
[08:58:04] *** Joins: et (~et@user/et)
[08:58:04] *** Joins: MercilessDeth (~brad@136.49.59.177)
[08:58:04] *** Joins: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net)
[08:58:04] *** Joins: cation (cation@user/cation)
[08:58:04] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[08:58:04] *** Joins: nadio (ice@starlight.iextreme.org)
[08:58:04] *** Joins: philipp64 (~philipp64@174.27.30.118)
[08:58:04] *** Joins: demophoon4 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[08:58:04] *** Joins: khile (cacambo@triton.blinkenshell.org)
[08:58:04] *** Joins: botfather (~botfather@shell1.dds.nl)
[08:58:04] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[08:58:04] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[08:58:04] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[08:58:04] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[08:58:04] *** Joins: dupondje (~dupondje@artemis.dupie.be)
[08:58:04] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[08:58:04] *** Joins: guardian (~guardian@planet-d.net)
[08:58:04] *** Joins: dulanic (~dulanic@47.187.144.163)
[08:58:04] *** Joins: novasenco (novasenco@user/nova)
[08:58:04] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[08:58:04] *** Joins: Throgkt (~Throgkt@user/throgkt)
[08:58:04] *** Joins: aphysically (~aphysical@user/aphysically)
[08:58:04] *** Joins: Trieste (T@user/pilgrim)
[08:58:04] *** Joins: mcint (mcint@user/mcint)
[08:58:04] *** Joins: betterOn1 (~user@vmi489242.contaboserver.net)
[08:58:04] *** Joins: sunyour (~sunyour@129.226.182.99)
[08:58:04] *** Joins: gr1m (~gr1m@45.83.220.194)
[08:58:04] *** Joins: KombuchaKip (~kip@192.252.230.5)
[08:58:04] *** Joins: davor (~davor@user/davor)
[08:58:04] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[08:58:04] *** Joins: psyxopompos (~psyxopomp@user/psyxopompos)
[08:58:04] *** Joins: nrg (~NRG@user/nrg)
[08:58:04] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[08:58:04] *** Joins: starz (starz@2001:41d0:8:4bd3::1)
[08:58:04] *** Joins: NeuroWinter (~neuro@107.172.219.235)
[08:58:04] *** Joins: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[08:58:04] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[08:58:04] *** Joins: amoros (~irc@user/amoros)
[08:58:04] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[08:58:04] *** Joins: drwasabi (drwasabi@tilde.team)
[08:58:04] *** Joins: pulec (~pulec@user/pulec)
[08:58:04] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[08:58:04] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[08:58:04] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[08:58:04] *** Joins: ilmostro (~ilmostro@user/ilmostro)
[08:58:04] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[08:58:04] *** Joins: auctus (~auctus@user/auctus)
[08:58:04] *** Joins: chatcat_ (~chatcat@ip-24-53-119-61.user.start.ca)
[08:58:04] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[08:58:04] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[08:58:04] *** Joins: Batzy (~quassel@user/batzy)
[08:58:04] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[08:58:04] *** Joins: fructose (~fructose@user/fructose)
[08:58:04] *** Joins: Phase (~phase@user/phase)
[08:58:04] *** Joins: BillyZane (~BillyZane@152.89.204.189)
[08:58:04] *** Joins: mosh3k21 (~mosh3k21@user/mosh3k21)
[08:58:04] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[08:58:04] *** Joins: dawg (dirtydawg@triton.blinkenshell.org)
[08:58:04] *** Joins: spithash (~spithash@user/spithash)
[08:58:04] *** Joins: asix (~Anders@user/asix)
[08:58:04] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[08:58:04] *** Joins: hendry (~hendry@210.23.22.2)
[08:58:04] *** Joins: nepeat (~nepeat@79.110.170.59)
[08:58:04] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[08:58:04] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[08:58:04] *** Joins: taru9 (~realTaru9@user/taru9)
[08:58:04] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[08:58:04] *** Joins: truth (~truth@user/truth)
[08:58:04] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[08:58:04] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[08:58:04] *** Joins: Retr0id (~Retr0id@user/retr0id)
[08:58:04] *** Joins: mgedmin (~mg@user/mgedmin)
[08:58:04] *** Joins: stella (aoei@nethackscoreboard/aoei)
[08:58:04] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[08:58:04] *** Joins: OPK (~OPK@user/opk)
[08:58:04] *** Joins: jim (~jim@about/linux/staff/jim)
[08:58:04] *** Joins: chilversc (~chilversc@user/chilversc)
[08:58:04] *** Joins: Balzy (~Balzy@host-79-17-138-160.retail.telecomitalia.it)
[08:58:04] *** Joins: svet (~ec2-user@ec2-3-144-179-53.us-east-2.compute.amazonaws.com)
[08:58:04] *** Joins: redrum88 (redrum88@user/redrum88)
[08:58:04] *** Joins: Wu (~wu@152.red-88-21-0.staticip.rima-tde.net)
[08:58:04] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[08:58:04] *** Joins: glider (~glider@user/glider)
[08:58:04] *** Joins: DaPinkOne (~Dap@user/dap)
[08:58:04] *** Joins: remexre (~remexre@user/remexre)
[08:58:04] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[08:58:04] *** Joins: laksith (~laksith@laksith.dev)
[08:58:04] *** Joins: phryk (~totallyno@user/phryk)
[08:58:04] *** Joins: user3456 (user3456@user/user3456)
[08:58:04] *** Joins: carbolymer (~carbolyme@dropacid.net)
[08:58:04] *** Joins: gildarts (16abab341f@user/gildarts)
[08:58:04] *** Joins: voirnox (~voirnox@xor.moe)
[08:58:04] *** Joins: woky (~woky@li1651-31.members.linode.com)
[08:58:04] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[08:58:04] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[08:58:04] *** Joins: bim9262 (~bim9262@user/bim9262)
[08:58:04] *** Joins: Swayze (~gryster@user/swayze)
[08:58:04] *** Joins: Teacup (~teacup@user/teacup)
[08:58:04] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[08:58:04] *** Joins: Keira (~k@lulzsec.co.uk)
[08:58:04] *** Joins: oprypin (~irc@pryp.in)
[08:58:04] *** Joins: AM (~techman@213.216.208.108)
[08:58:04] *** Joins: raek (~raek@h-109-228-152-171.a163.priv.bahnhof.se)
[08:58:04] *** Joins: voldial (~user@user/voldial)
[08:58:04] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:58:04] *** Joins: alex11 (~alex11@user/alex11)
[08:58:04] *** Joins: bambams (~bambams@user/bambams)
[08:58:04] *** Joins: meti (~meti@user/meti)
[08:58:04] *** Joins: zommKa (~ccctttmat@2001:470:69fc:105::b947)
[08:58:04] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[08:58:04] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[08:58:04] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[08:58:04] *** Joins: encukou (quassel@nat-pool-brq-t.redhat.com)
[08:58:04] *** Joins: dlam (~dlam@dlam.me)
[08:58:04] *** Joins: Tashtari (~tashtari@user/tashtari)
[08:58:04] *** Joins: Dan39 (~dan@user/dan39)
[08:58:04] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[08:58:04] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[08:58:04] *** Joins: habnabit_ (~habnabit@python/site-packages/habnabit)
[08:58:04] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[08:58:04] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:58:04] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[08:58:04] *** Joins: poorboy_ (~poorboy@159.89.189.144)
[08:58:04] *** Joins: shutnoshut (~shutnoshu@ec2-52-29-68-122.eu-central-1.compute.amazonaws.com)
[08:58:04] *** Joins: ulif (~nick@user/ulif)
[08:58:04] *** Joins: Tomassi-1 (~Tomassi-1@ec2-16-170-233-250.eu-north-1.compute.amazonaws.com)
[08:58:04] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[08:58:04] *** Joins: yolo (~xxiao@159.89.184.51)
[08:58:04] *** Joins: zoid (~zoid@user/zoid)
[08:58:04] *** Joins: waveform (~quassel@waveform.plus.com)
[08:58:04] *** Joins: cluelessperson_ (~cluelessp@user/cluelessperson)
[08:58:04] *** Joins: ihaveamac_ (~ihaveamac@ihaveahax.net)
[08:58:04] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[08:58:04] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[08:58:04] *** Joins: tvm (~tom@ip-89-103-96-164.net.upcbroadband.cz)
[08:58:04] *** Joins: jemark (jemark@user/jemark)
[08:58:04] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[08:58:04] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[08:58:04] *** Joins: Sadale (~Sadale@user/sadale)
[08:58:04] *** Joins: dave2F (~dave@78-56-248-37.static.zebra.lt)
[08:58:04] *** Joins: km (znc@user/km)
[08:58:04] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[08:58:04] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[08:58:04] *** Joins: pankid (~quassel@pankid.club)
[08:58:04] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[08:58:04] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[08:58:04] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[08:58:04] *** Joins: noord (~noord@user/noord)
[08:58:04] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[08:58:04] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[08:58:04] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[08:58:04] *** Joins: Spydar007 (~spydar007@user/spydar007)
[08:58:04] *** Joins: nanonyme (nanonyme@kapsi.fi)
[08:58:04] *** Joins: tazle (tazle@kapsi.fi)
[08:58:04] *** Joins: mindlesstux[m] (~mindlesst@user/mindlesstux)
[08:58:04] *** Joins: cotsuka (~cotsuka@user/cotsuka)
[08:58:04] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[08:58:04] *** Joins: jinsun_ (~jinsun@user/jinsun)
[08:58:04] *** Joins: CrtxReavr (crtxreavr@shodan.trioptimum.com)
[08:58:04] *** Joins: LostInWeb (~quassel@narvi.bifroest.eu)
[08:58:04] *** Joins: holgersson (~quassel@user/holgersson)
[08:58:04] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[08:58:04] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[08:58:04] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[08:58:04] *** Joins: emptynine (tkk@cybertron.redlight.li)
[08:58:04] *** Joins: SuperLag (~akulbe@user/superlag)
[08:58:04] *** Joins: beencubed (~beencubed@209.131.238.248)
[08:58:04] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[08:58:04] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[08:58:04] *** Joins: kehn (quassel@2600:3c03::f03c:92ff:fe9a:ad08)
[08:58:04] *** Joins: drincruz (drincruz@2607:5300:203:3f52::19)
[08:58:04] *** Joins: lyr (~lyr@user/lyr)
[08:58:04] *** Joins: traptrip (trip@brigaid.xs4all.nl)
[08:58:04] *** Joins: cursey (~cursey@user/cursey)
[08:58:04] *** Joins: michaelis (~michaelis@193.183.209.17)
[08:58:04] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[08:58:04] *** Joins: rvgate (~rvgate@user/rvgate)
[08:58:04] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[08:58:04] *** Joins: mjsir911 (~bnc@user/mjsir911)
[08:58:04] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[08:58:04] *** Joins: jessicant (~jessica@static.172.234.251.148.clients.your-server.de)
[08:58:04] *** Joins: sabet (~sabet@user/sabet)
[08:58:04] *** Joins: auri (~quassel@fsf/member/auri)
[08:58:04] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[08:58:04] *** Joins: wereii (~wereii@37.205.14.89)
[08:58:04] *** Joins: chronon (~chronon@user/chronon)
[08:58:04] *** Joins: regulate (~regulate@koduro.com)
[08:58:04] *** Joins: gaken (~gaken@user/galen)
[08:58:04] *** Joins: ngp (~ngp@199.180.249.183)
[08:58:04] *** Joins: Liexei (~Liexei@user/liexei)
[08:58:04] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[08:58:04] *** Joins: monchi (~joints@143.198.92.132)
[08:58:04] *** Joins: grawity (grawity@star.nullroute.lt)
[08:58:04] *** Joins: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie)
[08:58:04] *** Joins: Fossil (~Fossil@95.85.23.165)
[08:58:04] *** Joins: alexyov (~alexyov@79.124.0.2)
[08:58:04] *** Joins: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net)
[08:58:04] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[08:58:04] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[08:58:04] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[08:58:04] *** Joins: explodes (~explodes@user/explodes)
[08:58:04] *** Joins: ghostbuster (~admin@user/ghostbuster)
[08:58:04] *** Joins: tanner (~tanner@tilde.town)
[08:58:04] *** Joins: crackerjack (~crackerja@pear.bnc4free.com)
[08:58:04] *** Joins: sirn (~sirn@user/sirn)
[08:58:04] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[08:58:04] *** Joins: quesker (~idnet@mail.89vx.net)
[08:58:04] *** Joins: enrh (~enrh@user/enrh)
[08:58:04] *** Joins: deepy (deepy@user/deepy)
[08:58:04] *** Joins: MJ94 (mj94@user/mj94)
[08:58:04] *** Joins: phantomcircuit (~phantomci@192.241.205.97)
[08:58:04] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[08:58:04] *** Joins: kcrk (~kcrk@user/kcrk)
[08:58:04] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[08:58:04] *** Joins: aileran (~ubuntu@ec2-18-219-39-125.us-east-2.compute.amazonaws.com)
[08:58:04] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[08:58:04] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[08:58:04] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[08:58:04] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[08:58:04] *** Joins: mgubyt (u@mgub.yt)
[08:58:04] *** Joins: meejah (~meejah@rutas.meejah.ca)
[08:58:04] *** Joins: agireud (~agireud@2605:a601:ab06:c700:211:32ff:fe32:e15f)
[08:58:04] *** Joins: Buliarous (~gypsydang@185.207.166.57)
[08:58:04] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[08:58:04] *** Joins: adium (adium@user/adium)
[08:58:04] *** Joins: manuels (~manuel@80.211.205.88)
[08:58:04] *** Joins: nickodd (~nickodd@user/nickodd)
[08:58:04] *** Joins: mumixam (~m@user/mumixam)
[08:58:04] *** Joins: Duckle (~Duckle@user/duckle)
[08:58:04] *** Joins: megaTherion (~therion@unix.io)
[08:58:04] *** Joins: agronholm (sid403424@id-403424.helmsley.irccloud.com)
[08:58:04] *** Joins: Jigsy (~Jigsy@user/jigsy)
[08:58:04] *** Joins: tf (~tf@user/tf)
[08:58:04] *** Joins: mcglk (~mcglk@131.191.49.120)
[08:58:04] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[08:58:04] *** Joins: nfc_ (nfc@tilde.institute)
[08:58:04] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[08:58:04] *** Joins: scarce (~scarce@sourcehut/user/scarce)
[08:58:04] *** Joins: toine42 (~antoine@2001:41d0:e:41f::1)
[08:58:04] *** Joins: montpol (montpol@fine.mouses.xyz)
[08:58:04] *** Joins: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com)
[08:58:04] *** Joins: selikolg (~selikolg@178.62.2.76)
[08:58:04] *** Joins: demsh (ws14dshtt8@hermod.demsh.org)
[08:58:04] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[08:58:04] *** Joins: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be)
[08:58:04] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:04] *** Joins: Moyst_ (~moyst@user/moyst)
[08:58:04] *** Joins: mrhands (~mrhands@user/mrhands)
[08:58:04] *** Joins: gossie (~gossie@94-215-32-45.cable.dynamic.v4.ziggo.nl)
[08:58:04] *** Joins: skreech (skreech@user/skreech)
[08:58:04] *** Joins: fluter (~fluter@user/fluter)
[08:58:04] *** Joins: DerpGusta (~quassel@user/derpgusta)
[08:58:04] *** Joins: han-` (~han`@user/han-/x-0887595)
[08:58:04] *** Joins: Lightsword (~Lightswor@user/lightsword)
[08:58:04] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[08:58:04] *** Joins: Omega037 (~Omega037@047-233-057-109.res.spectrum.com)
[08:58:04] *** Joins: Praise (~Fat@user/praise)
[08:58:04] *** Joins: Bardon (~Bardon@user/Bardon)
[08:58:04] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[08:58:04] *** Joins: jposer (sid132110@id-132110.uxbridge.irccloud.com)
[08:58:04] *** Joins: jtanner (sid194399@id-194399.helmsley.irccloud.com)
[08:58:04] *** Joins: r0bby (r0bby@user/r0bby)
[08:58:04] *** Joins: altendky (sid135382@id-135382.hampstead.irccloud.com)
[08:58:04] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[08:58:04] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[08:58:04] *** Joins: neoweb (sid343200@id-343200.lymington.irccloud.com)
[08:58:04] *** Joins: mobius (sid478273@id-478273.uxbridge.irccloud.com)
[08:58:04] *** Joins: pwillard (sid136981@id-136981.hampstead.irccloud.com)
[08:58:04] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[08:58:04] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[08:58:04] *** Joins: mtg (~mtg@209.250.241.226)
[08:58:04] *** Joins: ballingt (sid190590@id-190590.helmsley.irccloud.com)
[08:58:04] *** Joins: twainwek (~user@144.211.196.35.bc.googleusercontent.com)
[08:58:04] *** Joins: snalty (~Shhh@user/snalty)
[08:58:04] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[08:58:04] *** Joins: bsdbandit (~bwell@users.757.org)
[08:58:04] *** Joins: nme (~nme@gateway/vpn/pia/nme)
[08:58:04] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[08:58:04] *** Joins: greenbagels (~gb@user/greenbagels)
[08:58:04] *** Joins: Timvde (~tim@towely.vdeynde.com)
[08:58:04] *** Joins: DXR (~lyrical@77.49.234.159.dsl.dyn.forthnet.gr)
[08:58:04] *** Joins: bparker (~nobody@user/bparker)
[08:58:04] *** Joins: nigelb (~nigel@zeus.nigelb.me)
[08:58:04] *** Joins: jbe (~jbe@lysator/root/jbe)
[08:58:04] *** Joins: kushal (~hopless@dgplug/kushal)
[08:58:04] *** Joins: erry (~erry@errietta.me)
[08:58:04] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[08:58:04] *** Joins: mokytis__ (~root@user/mokytis/x-7723836)
[08:58:04] *** Joins: aeadio (~aead@user/aead)
[08:58:04] *** Joins: saschi_ (~saschi@user/saschi)
[08:58:04] *** Joins: cache (~cache@user/cacheyourdreams)
[08:58:04] *** Joins: m42e (~m42e@pb42.de)
[08:58:04] *** Joins: dgw (dgw@sopel/admin/dgw)
[08:58:04] *** Joins: sasha (~sasha@wikimedia/-sasha-)
[08:58:04] *** Joins: opashley (~opashley@70.138.105.34.bc.googleusercontent.com)
[08:58:04] *** Joins: mdw_ (~root@159.65.86.163)
[08:58:04] *** Joins: joris2 (~joris@195.123.218.123)
[08:58:04] *** Joins: JerryXiao (~JerryXiao@user/jerryxiao)
[08:58:04] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[08:58:04] *** Joins: phillhoc1ing (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[08:58:04] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[08:58:04] *** Joins: d1b_ (~db@user/d1b)
[08:58:04] *** Joins: vlt (~dm@157.230.21.14)
[08:58:04] *** Joins: krisd (krisd@s0.mydevil.net)
[08:58:04] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[08:58:04] *** Joins: syllin (~syllin@user/syllin)
[08:58:05] *** Joins: jramsay (~lack@user/lack)
[08:58:05] *** Joins: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de)
[08:58:05] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[08:58:05] *** Joins: aluria (~aluria@canonical/aluria)
[08:58:05] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[08:58:05] *** Joins: jkl1337 (~jkl@user/jkl)
[08:58:05] *** Joins: xavierdarkness (~xavierdar@user/xavierdarkness)
[08:58:05] *** Joins: ksynwa_ (~ksynwa@5.45.111.57)
[08:58:05] *** Joins: Bluefoxicy (~Bluefoxic@c-73-132-244-30.hsd1.md.comcast.net)
[08:58:05] *** Joins: tonitch (~tonitch@user/tonitch)
[08:58:05] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[08:58:05] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[08:58:05] *** Joins: Cienisty (Cienisty@user/cienisty)
[08:58:05] *** Joins: Geronimo (~Geronimo@user/geronimo)
[08:58:05] *** Joins: sideeffex5613 (~sideeffex@user/sideeffex)
[08:58:05] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[08:58:05] *** Joins: st3fan (sid43079@id-43079.lymington.irccloud.com)
[08:58:05] *** Joins: lambda (~weechat@cyka.blyat.vodka)
[08:58:05] *** Joins: remedan (~remedan@balak.me)
[08:58:05] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[08:58:05] *** Joins: Helenah (~s98259@user/helenah)
[08:58:05] *** Joins: sveinse (~sveinse@2a01:799:55e:1000:c23f:d5ff:fe69:c6fb)
[08:58:05] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[08:58:05] *** Joins: bryce (~bryce@ool-457dd6ac.dyn.optonline.net)
[08:58:05] *** Joins: ttys000 (~ttys000@user/ttys000)
[08:58:05] *** Joins: abraham (~abraham@143.244.185.86)
[08:58:05] *** Joins: dcaro_away (~dcaro@user/dcaro)
[08:58:05] *** Joins: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[08:58:05] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[08:58:05] *** Joins: Pilate (~pilate@pilate.io)
[08:58:05] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[08:58:05] *** Joins: mdk (~mdk@python/psf/mdk)
[08:58:05] *** Joins: jiffe (~jiffe@mail.nsab.us)
[08:58:05] *** Joins: fury (uid193779@id-193779.helmsley.irccloud.com)
[08:58:05] *** Joins: Darkfoe (sid402081@id-402081.helmsley.irccloud.com)
[08:58:05] *** Joins: Forkk_ (~forkk@li926-228.members.linode.com)
[08:58:05] *** Joins: grym (~grym@user/grym)
[08:58:05] *** Joins: llua (~llua@zsh/developer/llua)
[08:58:05] *** Joins: a1paca_ (~a1paca@user/a1paca)
[08:58:05] *** Joins: xiaguan (~parsley@2604:180:f1::173)
[08:58:05] *** Joins: RoyK (~roy@user/royk)
[08:58:05] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[08:58:05] *** Joins: michele (~eraser@user/michele)
[08:58:05] *** Joins: mastardet (~mastardet@user/mastardet)
[08:58:05] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[08:58:05] *** Joins: InPhase (~InPhase@openscad/inphase)
[08:58:05] *** Joins: Ara (~Ara@user/ara)
[08:58:05] *** Joins: mgocobachi (~m@ancrae.com)
[08:58:05] *** Joins: fuz (~fuz@user/fuz)
[08:58:05] *** Joins: zmotaj (~zmotaj@user/zmotaj)
[08:58:05] *** Joins: Yorick- (znc@vps.freegamehosting.eu)
[08:58:05] *** Joins: njhanley (~njhanley@static.15.210.217.95.clients.your-server.de)
[08:58:05] *** Joins: Trashlord (~trash@user/trashlord)
[08:58:05] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[08:58:05] *** Joins: erica (~erica@user/erica)
[08:58:05] *** Joins: Widdershins (widders@ps.mad.cash)
[08:58:05] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[08:58:05] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[08:58:05] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[08:58:05] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[08:58:05] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[08:58:05] *** Joins: frodl (sid527064@user/frodl)
[08:58:05] *** Joins: extnct (~extnct@2604:180:2:a54:1::9ce7)
[08:58:05] *** Joins: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com)
[08:58:05] *** Joins: treefrob (~treefrob@p57a9652c.dip0.t-ipconnect.de)
[08:58:05] *** Joins: metaace_ (~metaace@user/metaace)
[08:58:05] *** Joins: duoi (~duoi@user/duoi)
[08:58:05] *** Joins: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com)
[08:58:05] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[08:58:05] *** Joins: moonmoon (awoo@libera/staff/moonmoon)
[08:58:05] *** Joins: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de)
[08:58:05] *** Joins: MacGyver (~macgyver@user/macgyver)
[08:58:05] *** Joins: yourfate (~yourfate@cabal.yourfate.org)
[08:58:05] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[08:58:05] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[08:58:05] *** Joins: AhmedAmerican (sid470527@ilkley.irccloud.com)
[08:58:05] *** Joins: Gamah (~quassel@gamah.net)
[08:58:05] *** Joins: coldmountain (sid484352@helmsley.irccloud.com)
[08:58:05] *** Joins: lidless (lidless@tinside.irccloud.com)
[08:58:05] *** Joins: andi_ (~andi@user/andi/x-3467420)
[08:58:05] *** Joins: peterandre (peterandre@2605:6400:c847:1524::4251)
[08:58:05] *** Joins: _moep_ (~moep@user/moep/x-3358975)
[08:58:05] *** Joins: or4n (~or4n@gerbera.qkka.org)
[08:58:05] *** Joins: thib (~thib@wikimedia/Thibaut120094)
[08:58:05] *** Joins: Celelibi (celelibi@user/celelibi)
[08:58:05] *** Joins: Repiphany (~Repiphany@user/repiphany)
[08:58:05] *** Joins: towel (~towel@user/towel)
[08:58:05] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[08:58:05] *** Joins: DCTWD (~dc@uz.utmappro.com)
[08:58:05] *** Joins: kantlivelong (~kantlivel@octoprint/kantlivelong)
[08:58:05] *** Joins: _janus (~janus@blotter.ld-linux.so)
[08:58:05] *** Joins: leosilva (~leosilva@canonical/leosilva)
[08:58:05] *** Joins: operational (~operation@imgonnaf.art)
[08:58:05] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[08:58:05] *** Joins: byzandula (~byzandula@beerbq.net)
[08:58:05] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[08:58:05] *** Joins: fakenullie (~nullie@london.nullie.name)
[08:58:05] *** Joins: the_rat (~ratto@emily.sorcio.org)
[08:58:05] *** Joins: themill (~stuart@debian/stuart)
[08:58:05] *** Joins: hexology (~hexology@user/hexology)
[08:58:05] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[08:58:05] *** Joins: AAAAA_DRAGON (A_D@libera/staff/dragon)
[08:58:05] *** Joins: richrd (~wavi@thelounge/maintainer/wavi)
[08:58:05] *** Joins: vancz (~vancz@user/vancz)
[08:58:05] *** Joins: harleypig (thelounge@harleypig.com)
[08:58:05] *** Joins: simone (~nya@user/sx)
[08:58:05] *** Joins: awygle (~quassel@2604:a880:2:d0::5380:3001)
[08:58:05] *** Joins: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch)
[08:58:05] *** Joins: the4oo4 (~the4oo4@shenzhou.whatbox.ca)
[08:58:05] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[08:58:05] *** Joins: Daemoen (~Daemoen@daemoen.ct-unlimited.com)
[08:58:05] *** Joins: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd)
[08:58:05] *** Joins: mrtnt_ (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0)
[08:58:05] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[08:58:05] *** Joins: korros (korros@2600:3c03::f03c:92ff:febf:689a)
[08:58:05] *** Joins: leonardo (~leonardo@user/leonardo)
[08:58:05] *** Joins: TML (~tml@user/tml)
[08:58:05] *** Joins: sco1 (~sco1@charon.whatbox.ca)
[08:58:05] *** Joins: lorenzosu (~lorenzosu@user/lorenzosu)
[08:58:05] *** Joins: arash (arash@thinks.life.is-a.beauty)
[08:58:05] *** Joins: wallbroken (wallbroken@user/wallbroken)
[08:58:05] *** Joins: hexa- (~hexa-@juno.lossy.network)
[08:58:05] *** Joins: olasd (~olasd@softwareheritage/olasd)
[08:58:05] *** Joins: redgloboli (~redglobol@user/redgloboli)
[08:58:05] *** Joins: The-Compiler (~compiler@the-compiler.org)
[08:58:05] *** Joins: cebor (~cebor@user/cebor)
[08:58:05] *** Joins: Dantali0n (~Dantali0n@251-228-138-45.connected.by.freedominter.net)
[08:58:05] *** Joins: jpaa (~jpaa@87.118.126.66)
[08:58:05] *** Joins: urth (~urth@geertswei.nl)
[08:58:05] *** Joins: mwilson (~mwilson@li159-72.members.linode.com)
[08:58:05] *** Joins: deutor (~quassel@82.177.4.226)
[08:58:05] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[08:58:05] *** Joins: znpy (~znpy@user/znpy)
[08:58:05] *** Joins: schemanic[m] (~schemanic@2001:470:69fc:105::1:2450)
[08:58:05] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[08:58:05] *** Joins: DX099 (~dx099@2001:470:69fc:105::21ce)
[08:58:05] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[08:58:05] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[08:58:05] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[08:58:05] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[08:58:05] *** Joins: Vipulk (~vipulk@user/vipulk)
[08:58:05] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[08:58:05] *** Joins: allegary (~allegary@apache/committer/gjm)
[08:58:05] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[08:58:05] *** Joins: psydroid (~psydroid@user/psydroid)
[08:58:05] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[08:58:05] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[08:58:05] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[08:58:05] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[08:58:05] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[08:58:05] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[08:58:05] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[08:58:05] *** Joins: berton[m] (~berton@2001:470:69fc:105::ce36)
[08:58:05] *** Joins: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb)
[08:58:05] *** Joins: canardo (~canardo@2001:470:69fc:105::e110)
[08:58:05] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[08:58:05] *** Joins: ruediger (~ruediger@user/ruediger)
[08:58:05] *** Joins: graybeard (~graybeard@user/graybeard)
[08:58:05] *** Joins: njt (~njt@zaph.org)
[08:58:05] *** Joins: notepad7 (~notepad@129.159.46.243)
[08:58:05] *** Joins: b_jonas (~x@catv-176-63-4-16.catv.broadband.hu)
[08:58:05] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[08:58:05] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[08:58:05] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:58:05] *** Joins: sunyibo (~dorsch@2a04:52c0:101:443::)
[08:58:05] *** Joins: Quietus (~quietus@2a04:52c0:101:181::)
[08:58:05] *** Joins: Melon_Bread (~Rain@li958-238.members.linode.com)
[08:58:05] *** Joins: dskull (~dskull@user/dskull)
[08:58:05] *** Joins: randall (~randall@user/randall)
[08:58:05] *** Joins: SnoopJ (~snoopj@user/snoopj)
[08:58:05] *** Joins: trashcatt (~trashcatt@znc.trashcat.xyz)
[08:58:05] *** Joins: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com)
[08:58:05] *** Joins: rigid (~rigid@user/rigid)
[08:58:05] *** Joins: roniez (~roniez@2a02:c206:2057:5765::1)
[08:58:05] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[08:58:05] *** Joins: neil (~kneel@rockylinux/infra/neil)
[08:58:05] *** Joins: kgz (~kragniz@nyaa.kragniz.eu)
[08:58:05] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[08:58:05] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[08:58:05] *** Joins: fling (~fling@user/fling)
[08:58:05] *** Joins: AnimalFarmPig (~quassel@user/animalfarmpig)
[08:58:05] *** Joins: Avaris (~Avaris@avar.is)
[08:58:05] *** Joins: zacts (~zacts@user/zacts)
[08:58:05] *** Joins: CombatVet (~c4@user/combatvet)
[08:58:05] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[08:58:05] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[08:58:05] *** Joins: libussa (~libussa@libussa.net)
[08:58:05] *** Joins: voidcat (~voidcat@user/voidcat)
[08:58:05] *** Joins: Dev0n (~Dev0n@user/dev0n)
[08:58:05] *** Joins: Wooble (~Wooble@107.170.27.240)
[08:58:05] *** Joins: anorthall_ (~anorthall@user/anorthall)
[08:58:05] *** Joins: mspe (~user@tilde.team/user/mspe)
[08:58:05] *** Joins: ouemt (~quassel@user/ouemt)
[08:58:05] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[08:58:05] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[08:58:05] *** Joins: ringo__ (~ringo@157.230.117.128)
[08:58:05] *** Joins: beanzilla (beanzilla@user/beanzilla)
[08:58:05] *** Joins: Exa (exa@irc.moe)
[08:58:05] *** Joins: Koffa (jkohvakk@user/koffa)
[08:58:05] *** Joins: deniska (~denis@user/deniska)
[08:58:05] *** Joins: shodan45 (~quassel@107.161.22.155)
[08:58:05] *** Joins: grateful (grateful@user/grateful)
[08:58:05] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[08:58:05] *** Joins: Peng_ (~mnordhoff@ultimate1.mnrd.us)
[08:58:05] *** Joins: wyre (~wyre@user/wyre)
[08:58:05] *** Joins: aivkiv (~aivkiv@2a01:4f8:201:6250::2)
[08:58:05] *** Joins: {4144} (~{4144}@46.56.66.236)
[08:58:05] *** Joins: OlaNys (onm@irccore.ofelbar.se)
[08:58:05] *** Joins: xakan (~xakan@pnmx.zdx.fr)
[08:58:05] *** Joins: pacbard (~pacbard@user/pacbard)
[08:58:05] *** Joins: Chex (~Chex@user/chex)
[08:58:05] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[08:58:05] *** Joins: tdsmith (~tdsmith@tds.xyz)
[08:58:05] *** Joins: con3 (~con3@143.198.53.32)
[08:58:05] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[08:58:05] *** Joins: Ninpo (~Ninpo@user/ninpo)
[08:58:05] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[08:58:05] *** Joins: edr (~edr@user/edr)
[08:58:05] *** Joins: ldlework (~hexeme@user/hexeme)
[08:58:05] *** Joins: reda_ (~reda@user/reda)
[08:58:05] *** Joins: tudor_ (~tudor@tomka.hu)
[08:58:05] *** Joins: jfb4 (~jfb4@178.62.2.68)
[08:58:05] *** Joins: Adrixan_ (~Adrixan@218.72.75.34.bc.googleusercontent.com)
[08:58:05] *** Joins: MightyMu_ (~MightyMu@104.131.138.31)
[08:58:05] *** Joins: dzz007 (~dzz007@user/dzz007)
[08:58:05] *** Joins: ttkpy (501@46-97-229-216.sr2.pon.net)
[08:58:05] *** Joins: VSpike (~johncc@2001:bc8:47ac:1a22::1)
[08:58:05] *** Joins: tkazi (~tkazi@user/tkazi)
[08:58:05] *** Joins: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de)
[08:58:05] *** Joins: n1000 (~n1000@user/n1000)
[08:58:05] *** Joins: grandfso (~quassel@199.232.237.35.bc.googleusercontent.com)
[08:58:05] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[08:58:05] *** Joins: OverCoder (~OverCoder@user/overcoder)
[08:58:05] *** Joins: Stx (stx@libera/staff/stx)
[08:58:05] *** Joins: rgp (~rgp@user/rgp)
[08:58:05] *** Joins: purplex_ (~purplex@user/purplex)
[08:58:05] *** Joins: fhackdroid (~fhackdroi@ec2-13-233-118-159.ap-south-1.compute.amazonaws.com)
[08:58:05] *** Joins: taeaad (~taeaad@user/taeaad)
[08:58:05] *** Joins: cole (~cole@user/cole)
[08:58:05] *** Joins: strudl (~strudl@user/strudl)
[08:58:05] *** Joins: kline (~freedom0@libera/staff/kline)
[08:58:05] *** Joins: chymera (~chymera@ns1000526.ip-51-81-46.us)
[08:58:05] *** Joins: ghormoon (~ghormoon@ghorland.net)
[08:58:05] *** Joins: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me)
[08:58:05] *** Joins: bertiger (~bertiger@user/bertiger)
[08:58:05] *** Joins: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001)
[08:58:05] *** Joins: gurki (~gurki@user/gurki)
[08:58:05] *** Joins: push-f (~martin@push-f.com)
[08:58:05] *** Joins: orkim (~orkim@user/orkim)
[08:58:05] *** Joins: Luke (~ldm@hacksoc/member)
[08:58:05] *** Joins: guntbert (~yesitsme@user/guntbert)
[08:58:05] *** Joins: enyc (~enyc@user/enyc)
[08:58:05] *** Joins: gbear605 (~gbear605@user/gbear605)
[08:58:05] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[08:58:05] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[08:58:05] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[08:58:05] *** Joins: acnebs- (~acnebs@198.199.68.107)
[08:58:05] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[08:58:05] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[08:58:05] *** Joins: jocke-l (jocke-l@a.x0.is)
[08:58:05] *** Joins: bss (bss@rie.incorporeal.org)
[08:58:05] *** Joins: litharge (litharge@libera/bot/litharge)
[08:58:05] *** Joins: octav1a (~quassel@173.195.145.98)
[08:58:05] *** Joins: abyss (~robbins@user/robbins)
[08:58:05] *** Joins: cslr (~cslr@85-76-34-233-nat.elisa-mobile.fi)
[08:58:05] *** Joins: Quack (~Quack@185.21.216.169)
[08:58:05] *** Joins: MrC (Ben@mrbenc.net)
[08:58:05] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[08:58:05] *** Joins: summonner (~summonner@188.26.74.156)
[08:58:05] *** Joins: u4t (~chat@78.ip-139-99-236.net)
[08:58:05] *** Joins: dnns01_ (~quassel@2a02:c207:3003:651::1)
[08:58:05] *** Joins: Mikro (leo@libera.ninja)
[08:58:05] *** Joins: seabre (~seabre@user/seabre)
[08:58:05] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[08:58:05] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[08:58:05] *** Joins: Wegge (~wegge@user/wegge)
[08:58:05] *** Joins: shrysr (~shrysr@user/shrysr)
[08:58:05] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[08:58:05] *** Joins: Riviera (Riviera@user/riviera)
[08:58:05] *** Joins: zeus (~user@user/kamyl)
[08:58:05] *** Joins: ComputerTech (~ComputerT@user/computertech)
[08:58:05] *** Joins: jochum (~quassel@user/jochum)
[08:58:05] *** Joins: avu (~jan@user/avu)
[08:58:05] *** strontium.libera.chat sets mode: +o litharge
[08:58:05] *** Joins: Artea (~Lufia@artea.com.pt)
[08:58:05] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[08:58:05] *** Joins: majors (~majors@user/majors)
[08:58:05] *** Joins: n-st (~n-st@user/n-st)
[08:58:05] *** Joins: effprime (~effprime@user/effprime)
[08:58:05] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[08:58:05] *** Joins: kiska (james@user/kiska)
[08:58:05] *** Joins: vinay (~Vinay@user/vinay-keshava)
[08:58:05] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[08:58:05] *** Joins: Pici (bnrubin@2600:3c03::f03c:91ff:fe60:2576)
[08:58:05] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[08:58:05] *** Joins: shan (shan@cyblog/maintainer/shan)
[08:58:05] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[08:58:05] *** Joins: b3z (~b3z@user/b3z)
[08:58:05] *** Joins: gerard (~gerard@user/gerard)
[08:58:05] *** Joins: klys_ (~mdasoh@show.op8.us)
[08:58:05] *** Joins: goatish_ (~geclark@19.60.188.35.bc.googleusercontent.com)
[08:58:05] *** Joins: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b)
[08:58:05] *** Joins: Karyon (~Karyon@user/karyon)
[08:58:05] *** Joins: Haise0 (~haise01@user/haise01)
[08:58:05] *** Joins: dfch (~dfch@user/dfch)
[08:58:05] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[08:58:05] *** Joins: hodapp (~mawson@user/hodapp)
[08:58:05] *** Joins: mpmc (~mpmc@user/mpmc)
[08:58:05] *** Joins: SoF (~skius@user/skius)
[08:58:05] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[08:58:05] *** Joins: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter)
[08:58:05] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[08:58:05] *** Joins: oisota (~oisota@user/oisota)
[08:58:05] *** Joins: Antibody (~Antibody@107.170.145.30)
[08:58:05] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[08:58:05] *** Joins: percY- (~percY@138.68.239.19)
[08:58:05] *** Joins: ebb (ebb@user/ebb)
[08:58:05] *** Joins: ario (~ario@159.65.220.102)
[08:58:05] *** Joins: adamchainz (~adamj@51.15.34.126)
[08:58:13] *** Quits: koolazer (~koo@user/koolazer) (Max SendQ exceeded)
[08:58:15] *** Quits: martums (~martums@user/martums) (Max SendQ exceeded)
[08:58:15] *** Quits: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com) (Max SendQ exceeded)
[08:58:15] *** Quits: l4yer (~l4yer@217-64-151-10.pool.ovpn.com) (Max SendQ exceeded)
[08:58:24] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[08:58:26] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[08:58:26] *** Quits: Exa (exa@irc.moe) (Max SendQ exceeded)
[08:58:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Max SendQ exceeded)
[08:58:26] *** Quits: Roedy (Roedy@user/roedy) (Max SendQ exceeded)
[08:58:27] *** Joins: Exa (exa@irc.moe)
[08:58:28] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:36] *** Joins: koolazer (~koo@user/koolazer)
[08:58:57] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Ping timeout: 256 seconds)
[08:59:06] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:9de7:cb79:5288:fa2) (Ping timeout: 245 seconds)
[08:59:09] *** Joins: martums (~martums@user/martums)
[08:59:13] <xMopx> oh my
[08:59:21] *** Quits: litharge (litharge@libera/bot/litharge) (Remote host closed the connection)
[08:59:24] *** Joins: litharge (litharge@libera/bot/litharge)
[08:59:25] *** ChanServ sets mode: +o litharge
[08:59:28] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:59:45] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.196)
[08:59:46] *** Joins: Roedy (Roedy@user/roedy)
[08:59:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[09:00:05] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 256 seconds)
[09:00:05] *** Quits: tazle (tazle@kapsi.fi) (Ping timeout: 256 seconds)
[09:00:16] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[09:00:30] <koopman> Https://bpa.st/GF5A parv
[09:00:31] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[09:00:39] *** Quits: glider (~glider@user/glider) (Ping timeout: 256 seconds)
[09:00:39] *** Quits: nanonyme (nanonyme@kapsi.fi) (Ping timeout: 256 seconds)
[09:00:41] *** Joins: Colt (~Colt@user/colt)
[09:00:48] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[09:01:16] *** Quits: carbolymer (~carbolyme@dropacid.net) (Remote host closed the connection)
[09:01:19] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[09:01:20] *** Joins: km_ (znc@user/km)
[09:01:22] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[09:01:24] *** Joins: glider (~glider@user/glider)
[09:01:45] *** Joins: tazle (tazle@kapsi.fi)
[09:01:51] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.30)
[09:01:53] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:02:09] <InPhase> koopman: split is a function on strings that makes lists, not a function on lists.
[09:02:21] *** Quits: km (znc@user/km) (Ping timeout: 256 seconds)
[09:02:33] *** Quits: the_lanetly_052_ (~the_lanet@194.135.166.91) (Ping timeout: 252 seconds)
[09:02:55] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 256 seconds)
[09:03:02] <parv> koopman, Since you are making your own lists, you may not need get_lists() function; may need to update dict_from_list() function to your needs
[09:03:30] *** Quits: tris (emptystrin@irc1.lessbroken.org) (Quit: will happen, happening, happened)
[09:03:32] *** Joins: han-solo (~hanish@user/han-solo)
[09:03:40] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[09:03:46] <parv> s/may need to update dict_from_list() function to your needs/may need to update dict_from_list() function to *suit* your needs/
[09:03:57] <InPhase> koopman: I think this is the point where you should teach yourself to insert print statements in your code to print out variables at certain points, to see what sorts of data they have while the code is running.
[09:04:50] <InPhase> koopman: Forgive me if you already know of this.  But usually from that series of questions and that code point, that's the next thing people need to start doing.  :)
[09:05:08] *** Joins: l4yer (~l4yer@217-64-151-10.pool.ovpn.com)
[09:05:18] *** Quits: l4yer (~l4yer@217-64-151-10.pool.ovpn.com) (Remote host closed the connection)
[09:05:29] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[09:06:46] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[09:06:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:07:33] *** Quits: montpol (montpol@fine.mouses.xyz) (*.net *.split)
[09:07:33] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[09:07:33] *** Quits: mtg (~mtg@209.250.241.226) (*.net *.split)
[09:07:33] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[09:07:33] *** Quits: saschi_ (~saschi@user/saschi) (*.net *.split)
[09:07:33] *** Quits: cache (~cache@user/cacheyourdreams) (*.net *.split)
[09:07:33] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[09:07:33] *** Quits: mdw_ (~root@159.65.86.163) (*.net *.split)
[09:07:33] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[09:07:33] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[09:07:33] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (*.net *.split)
[09:07:33] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[09:07:33] *** Quits: MacGyver (~macgyver@user/macgyver) (*.net *.split)
[09:07:33] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (*.net *.split)
[09:07:33] *** Quits: meain (~meain@2001:470:69fc:105::2db) (*.net *.split)
[09:07:33] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (*.net *.split)
[09:07:33] *** Quits: kikijiki[m] (~kikijiki@user/kikijiki) (*.net *.split)
[09:07:33] *** Quits: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb) (*.net *.split)
[09:07:33] *** Quits: ruediger (~ruediger@user/ruediger) (*.net *.split)
[09:07:33] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[09:07:33] *** Quits: aivkiv (~aivkiv@2a01:4f8:201:6250::2) (*.net *.split)
[09:07:33] *** Quits: push-f (~martin@push-f.com) (*.net *.split)
[09:07:33] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[09:07:33] *** Quits: VSpike (~johncc@2001:bc8:47ac:1a22::1) (*.net *.split)
[09:07:33] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[09:07:33] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[09:07:33] *** Quits: majors (~majors@user/majors) (*.net *.split)
[09:07:33] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[09:07:33] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[09:07:33] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[09:07:33] *** Quits: novasenco (novasenco@user/nova) (*.net *.split)
[09:07:33] *** Quits: kiska (james@user/kiska) (*.net *.split)
[09:07:33] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[09:07:33] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[09:07:34] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[09:07:34] *** Quits: Pici (bnrubin@2600:3c03::f03c:91ff:fe60:2576) (*.net *.split)
[09:07:34] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[09:07:34] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[09:07:34] *** Quits: gerard (~gerard@user/gerard) (*.net *.split)
[09:07:34] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (*.net *.split)
[09:07:34] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[09:07:34] *** Quits: goatish_ (~geclark@19.60.188.35.bc.googleusercontent.com) (*.net *.split)
[09:07:34] *** Quits: yolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b) (*.net *.split)
[09:07:34] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[09:07:34] *** Quits: Haise0 (~haise01@user/haise01) (*.net *.split)
[09:07:34] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[09:07:34] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (*.net *.split)
[09:07:34] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[09:07:34] *** Quits: mpmc (~mpmc@user/mpmc) (*.net *.split)
[09:07:34] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:07:42] *** Joins: gerard (~gerard@user/gerard)
[09:07:42] *** Joins: zeus (~user@user/kamyl)
[09:07:44] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[09:07:45] *** Joins: mtg (~mtg@209.250.241.226)
[09:07:48] *** Joins: Riviera (Riviera@user/riviera)
[09:07:49] *** Joins: klys (~mdasoh@show.op8.us)
[09:07:51] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[09:07:51] *** Joins: novasenco (novasenco@user/nova)
[09:07:53] *** Joins: Pici (~bnrubin@li1014-36.members.linode.com)
[09:07:54] *** Joins: dgw (dgw@sopel/admin/dgw)
[09:07:56] *** Joins: vinay (~Vinay@user/vinay-keshava)
[09:07:57] *** Joins: push-f (~martin@push-f.com)
[09:08:01] *** Joins: goatish (~geclark@19.60.188.35.bc.googleusercontent.com)
[09:08:02] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[09:08:04] *** Joins: Karyon (~Karyon@user/karyon)
[09:08:07] *** Joins: haise01 (~haise01@user/haise01)
[09:08:12] *** Quits: schmoee__ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[09:08:12] *** Joins: shan (shan@cyblog/maintainer/shan)
[09:08:15] *** Joins: yolk (~yolk@ec2-18-220-87-120.us-east-2.compute.amazonaws.com)
[09:08:16] <Repiphany> Or use `breakpoint()`
[09:08:18] *** Joins: montpol (montpol@fine.mouses.xyz)
[09:08:23] *** Joins: hodapp (~mawson@user/hodapp)
[09:08:26] *** Joins: remedan (~remedan@balak.me)
[09:08:28] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[09:08:31] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[09:08:31] *** Joins: effprime (~effprime@user/effprime)
[09:08:31] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[09:08:31] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[09:08:32] *** Joins: n-st (~n-st@user/n-st)
[09:08:33] *** Joins: njt (~njt@zaph.org)
[09:08:34] *** Joins: shrysr (~shrysr@user/shrysr)
[09:08:38] *** Joins: ruediger (~ruediger@user/ruediger)
[09:08:39] *** Joins: SoF (~skius@user/skius)
[09:08:40] *** Joins: mdw_ (~root@159.65.86.163)
[09:08:42] *** Joins: erry (~erry@errietta.me)
[09:08:42] *** Joins: kiska (james@user/kiska)
[09:08:49] *** Joins: dfch (~dfch@user/dfch)
[09:08:52] *** Joins: majors (~majors@user/majors)
[09:09:07] <koopman> I do InPhase I was just trying to use parv’s code with my list.
[09:10:55] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[09:10:55] *** Joins: mpmc (~mpmc@user/mpmc)
[09:11:32] <parv> koopman, On a second thought, shove the JSON data to 3 tables in SQLite; would make everyone's life easier.
[09:13:16] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[09:13:29] *** Quits: callq (~callq@157.41.190.133) (Quit: callq)
[09:13:53] *** Joins: nanonyme (nanonyme@kapsi.fi)
[09:15:06] <koopman> Adding it to sql isn’t a bad idea I suppose
[09:16:09] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[09:16:11] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[09:16:14] *** Quits: u4t (~chat@78.ip-139-99-236.net) (Quit: nope nope nope nope nope nope nope)
[09:16:19] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[09:17:07] *** Joins: rany_ (~rany@user/rany)
[09:17:34] *** Joins: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb)
[09:19:01] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:19:42] *** Quits: rany (~rany@user/rany) (Ping timeout: 276 seconds)
[09:20:28] *** Quits: jrjsmrtn (~jrjsmrtn@ip-62-235-219-205.dsl.scarlet.be) (*.net *.split)
[09:20:28] *** Quits: jposer (sid132110@id-132110.uxbridge.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: r0bby (r0bby@user/r0bby) (*.net *.split)
[09:20:28] *** Quits: twainwek (~user@144.211.196.35.bc.googleusercontent.com) (*.net *.split)
[09:20:28] *** Quits: grym (~grym@user/grym) (*.net *.split)
[09:20:28] *** Quits: llua (~llua@zsh/developer/llua) (*.net *.split)
[09:20:28] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[09:20:28] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (*.net *.split)
[09:20:28] *** Quits: omegatron (~some@p54bd5e02.dip0.t-ipconnect.de) (*.net *.split)
[09:20:28] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (*.net *.split)
[09:20:28] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[09:20:28] *** Quits: graingert[m] (~graingert@2001:470:69fc:105::653) (*.net *.split)
[09:20:28] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[09:20:28] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (*.net *.split)
[09:20:28] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[09:20:28] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[09:20:29] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[09:20:29] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[09:20:29] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[09:20:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[09:20:29] *** Quits: ntome (~ntome@user/ntome) (*.net *.split)
[09:20:29] *** Quits: b3z (~b3z@user/b3z) (*.net *.split)
[09:20:29] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[09:20:29] *** Quits: EyeOfJupiter (~EyeOfJ@user/eyeofjupiter) (*.net *.split)
[09:20:29] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[09:20:29] *** Quits: Antibody (~Antibody@107.170.145.30) (*.net *.split)
[09:20:29] *** Quits: urb4nm (~urb4nm@165.227.158.65) (*.net *.split)
[09:20:29] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[09:20:29] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[09:20:29] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[09:20:29] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[09:20:38] *** Joins: adamchainz (~adamj@51.15.34.126)
[09:20:41] *** Joins: shodan45 (~quassel@107.161.22.155)
[09:20:41] *** Joins: Koffa (jkohvakk@user/koffa)
[09:20:42] *** Joins: ario (~ario@159.65.220.102)
[09:20:42] *** Joins: deniska (~denis@user/deniska)
[09:20:42] *** Joins: percY- (~percY@138.68.239.19)
[09:20:48] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[09:20:53] *** Joins: jposer (sid132110@id-132110.uxbridge.irccloud.com)
[09:20:58] *** Joins: urth (~urth@geertswei.nl)
[09:21:02] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[09:21:06] *** Joins: r0bby (r0bby@user/r0bby)
[09:21:15] *** Joins: oisota (~oisota@user/oisota)
[09:21:16] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[09:21:34] *** Joins: beanzilla (beanzilla@user/beanzilla)
[09:21:35] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[09:21:36] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[09:21:36] *** Joins: ebb (ebb@user/ebb)
[09:21:38] *** Joins: llua (~llua@zsh/developer/llua)
[09:21:50] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[09:22:21] *** Quits: Linux77 (~7Linux7@186.233.182.193) (Ping timeout: 252 seconds)
[09:22:24] *** Joins: Antibody (~Antibody@107.170.145.30)
[09:22:39] *** Joins: b3z (~b3z@vmd41962.contaboserver.net)
[09:23:05] *** Quits: b3z (~b3z@vmd41962.contaboserver.net) (Changing host)
[09:23:05] *** Joins: b3z (~b3z@user/b3z)
[09:23:18] *** Joins: a1paca (~a1paca@user/a1paca)
[09:23:45] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:23:47] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[09:24:41] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[09:25:38] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[09:25:46] *** Joins: grym (~grym@user/grym)
[09:25:55] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[09:26:02] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:5919:1c10:2420:8d8)
[09:26:31] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[09:26:46] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[09:26:56] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[09:27:15] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[09:27:17] *** Joins: ebb (ebb@user/ebb)
[09:29:16] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[09:29:23] *** Joins: stranac (~stranac@195.29.239.126)
[09:29:36] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:30:08] *** Joins: ebb (ebb@user/ebb)
[09:30:52] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[09:31:09] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[09:31:48] *** Joins: dvx (~dvx@5.181.92.64)
[09:31:50] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[09:32:20] <aphysically> InPhase: do today's AoC
[09:32:29] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:32:35] <aphysically> I'm 99% sure there's a closed form O(1) solution
[09:33:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:33:04] <aphysically> I only haven't literally done the decomposition yet
[09:33:05] *** Joins: ebb (ebb@user/ebb)
[09:34:36] <InPhase> aphysically: I'm minutes from going to bed...  But I'll glance at it.
[09:34:44] <InPhase> Number 6?
[09:34:53] <aphysically> yeah, part 2 is just part 1 with a bigger number so you're not missing anything
[09:34:57] <aphysically> yeah num 6
[09:35:21] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:35:53] *** Joins: ebb (ebb@user/ebb)
[09:35:53] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[09:36:13] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[09:36:54] *** Joins: jazzy (~jaziz@user/jaziz)
[09:37:37] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[09:38:17] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:38:51] *** Joins: ebb (ebb@user/ebb)
[09:40:23] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[09:40:50] <aphysically> InPhase: spoiler with work so far: https://bpa.st/MARA
[09:40:56] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[09:40:57] *** Joins: guenhael (~Thunderbi@2a01cb008c3d580048ebadab95925c01.ipv6.abo.wanadoo.fr)
[09:41:25] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:41:26] <Repiphany> Closed form solution seems unlikely because of how discrete things are and especially at small populations
[09:41:48] <InPhase> aphysically: Yeah, all the descendent fish synchronize by generation.
[09:42:00] *** Joins: ebb (ebb@user/ebb)
[09:42:39] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[09:42:43] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:42:57] <aphysically> the eigenvalue approach is (mathematically) a correct O(1) but the numerical error I"m not so sure for big exponents so I'm looking at other decompositions
[09:43:02] <InPhase> aphysically: As in each parent consistently makes synchronized fish.  So if all those fish are synchronized, the grand children of all of those are also synchronized.
[09:43:45] <InPhase> aphysically: So you should be able to write out a discrete calculation for every fish without even running the simulation.
[09:44:02] <aphysically> yes
[09:44:21] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:44:51] <aphysically> (and I'm trying to do that by encoding it in a linear matrix transformation)
[09:44:51] *** Joins: ebb (ebb@user/ebb)
[09:45:03] <aphysically> well, I did it already, I'm just trying to find an even better way
[09:45:29] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 256 seconds)
[09:46:33] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[09:47:14] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[09:47:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:47:55] *** Quits: guenhael (~Thunderbi@2a01cb008c3d580048ebadab95925c01.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[09:47:58] *** Joins: ebb (ebb@user/ebb)
[09:49:17] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (Quit: leaving)
[09:49:23] <aphysically> InPhase: maybe this is not the way https://bpa.st/3UMA onto other decompositions
[09:50:17] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[09:50:32] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:50:41] <InPhase> aphysically: Every 9 steps an extra generation is started.  Every generation starts with 1, then jumping to G more 6 steps later, where G is the generation number.
[09:51:07] *** Joins: ebb (ebb@user/ebb)
[09:51:13] <InPhase> aphysically: That definitely has the feel of something with an algebraic solution.
[09:51:22] <aphysically> InPhase: yeah, here's the pseudo-naive not O(1) solution: https://bpa.st/64PQ
[09:51:40] <aphysically> which is very clearly a linear vector transformation :), so that's what I wrote out the matrix for
[09:51:51] <aphysically> (and that's what the eigenvalues posted are of)
[09:52:37] <aphysically> because you're trying to find a closed form for A^n of the vector, and the vector of eigenvalues^n is the middle vector of a decomposition for a closed form for this type of matrix
[09:53:05] <aphysically> which is a mathematically correct closed form, to be sure, but I have doubts about the numerical error since the eignevalues aren't nice integers
[09:53:21] <aphysically> but there's other decompositions so I"m trying to remember all my linear algebra :D
[09:53:22] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Ping timeout: 256 seconds)
[09:53:31] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:54:03] *** Joins: ebb (ebb@user/ebb)
[09:55:26] *** Quits: azidhaka_ (~azidhaka@user/azidhaka) (Quit: azidhaka_)
[09:55:51] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[09:56:24] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[09:56:44] *** parv is now known as tester
[09:56:49] *** Quits: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 252 seconds)
[09:56:58] *** Joins: ebb (ebb@user/ebb)
[09:57:03] *** tester is now known as test-20211205
[09:57:47] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[09:58:27] *** test-20211205 is now known as parv
[09:58:34] <InPhase> aphysically: For fun, cheat...
[09:58:55] <InPhase> aphysically: The problem says "after 80 days".  So just precompute it and hardcode the matrix?  ;)
[09:59:34] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:00:07] *** Joins: ebb (ebb@user/ebb)
[10:00:12] <aphysically> part two is after 256 days, which apparently is just enough to make everyone doing it naively run out of memory
[10:00:15] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[10:00:21] <aphysically> at least according to all the messages in discord
[10:00:25] <aphysically> lol
[10:00:25] <InPhase> aphysically: The operator matrix should be of 1's and 0's, right?
[10:00:33] <aphysically> I will get you it
[10:00:34] <aphysically> one moemnt
[10:00:44] <InPhase> aphysically: So that's one 8x8 matrix, whether it's 80 days or 256 days.
[10:00:56] <aphysically> InPhase: this transposed
[10:00:58] <aphysically> https://www.wolframalpha.com/input/?i2d=true&i=%7B%7B0%2C+0%2C+0%2C+0%2C+0%2C+0%2C+1%2C+0%2C+1%7D%2C%7B1%2C+0%2C+0%2C+0%2C+0%2C+0%2C+0%2C+0%2C+0%7D%2C%7B0%2C+1%2C+0%2C+0%2C+0%2C+0%2C+0%2C+0%2C+0%7D%2C%7B0%2C+0%2C+1%2C+0%2C+0%2C+0%2C+0%2C+0%2C+0%7D%2C%7B0%2C+0%2C+0%2C+1%2C+0%2C+0%2C+0%2C+0%2C+0%7D%2C%7B0%2C+0%2C+0%2C+0%2C+1%2C+0%2C+0%2C+0%2C+0%7D%2C%7B0%2C+0%2C+0%2C+0%2C+0%2C+1%2C+0%2C+0%2C+0%7D%2C%
[10:01:00] <aphysically> 7B0%2C+0%2C+0%2C+0%2C+0%2C+0%2C+1%2C+0%2C+0%7D%2C%7B0%2C+0%2C+0%2C+0%2C+0%2C+0%2C+0%2C+1%2C+0%7D%7D
[10:01:02] <aphysically> oh god two lines
[10:01:15] <InPhase> aphysically: I think you're overthinking...
[10:01:15] <aphysically> {{0, 0, 0, 0, 0, 0, 1, 0, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 0}}
[10:01:25] <aphysically> this transposed (I wrote it backwards adn I haven't flipped it yet)
[10:01:47] <InPhase> Yeah, that's not readable, but something like that.  :)
[10:01:54] <aphysically> :)
[10:02:08] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:02:32] <InPhase> So just write an offline script to mat multiply that 80 times, and print the result.  Then feed that in as source code input.
[10:02:36] <InPhase> Then repeat for 256.
[10:02:52] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:02:52] *** Parts: parv (~quass@user/parv) ()
[10:03:03] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[10:03:04] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 268 seconds)
[10:03:13] <Repiphany> https://numpy.org/doc/stable/reference/generated/numpy.linalg.matrix_power.html if you want to cheat
[10:03:15] <InPhase> It will spit out the result in milliseconds.
[10:03:25] *** Joins: ebb (ebb@user/ebb)
[10:05:25] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[10:05:27] <aphysically> in 3.10 there's a count() method for counter so in 3.10 thi scan be simplified https://bpa.st/4V3Q
[10:05:50] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:05:55] <aphysically> I'm not sure if there's a way to golf the rotation of the matrix elements but I'm more interested in golfing the matrix ;P
[10:06:12] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[10:06:32] *** Joins: ebb (ebb@user/ebb)
[10:07:23] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 268 seconds)
[10:07:28] <aphysically> rotation of the map elements I mean
[10:07:32] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[10:08:21] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[10:08:58] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:09:31] *** Joins: ebb (ebb@user/ebb)
[10:09:35] <zumba_addict> Hi all. I'm debugging an old jenkins job. It is executing python a program and the code is this https://bpa.st/BZCQ. I'm confused as to what it is doing.Can someone please shed some light? What does line 5 do?
[10:09:37] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:10:48] <InPhase> aphysically: I think the best golf is going to be a hardcoded precalculated matrix for the target duration, where you split the inputs and for each input add that matrix column into the output.
[10:11:07] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[10:11:12] <InPhase> aphysically: So precalculate, transpose, and hardcode.
[10:11:46] *** Quits: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf) (Read error: Connection reset by peer)
[10:12:05] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[10:12:16] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:12:22] *** Joins: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf)
[10:12:46] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) ()
[10:13:01] *** Joins: ebb (ebb@user/ebb)
[10:13:35] <InPhase> aphysically: Oh wait, this doesn't even need an output vector.  It's an output number...  So there's a precalculated look-up table from the sum of the columns in the exponentiated matrix.
[10:14:57] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:15:25] <aphysically> correct
[10:15:26] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:15:32] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[10:15:56] <han-solo> zumba_addict: if the script name is 'some-script.pyw', they want to remove the `-script.pyw`, and if the script is `some.exe`, they want to remove the .exe extension from the scriptname
[10:15:59] *** Joins: ebb (ebb@user/ebb)
[10:16:11] *** Joins: guenhael (~Thunderbi@2a01cb008c3d580048ebadab95925c01.ipv6.abo.wanadoo.fr)
[10:16:37] <han-solo> and somewhere inside `prepare_app_pipline`, they maybe expecting it to be removed or something, i guess
[10:16:40] *** Joins: manti7 (~manti7@176.10.104.94)
[10:16:48] <han-solo> i guess...
[10:16:57] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[10:17:51] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[10:18:06] <InPhase> aphysically: Is numpy allowed in advent of code?  Because this matrix exponentiation takes 16 microseconds...
[10:18:27] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:18:43] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:18:49] <aphysically> yeah, but surprisingly often numpy solutions are slower only because of the time to import numpy
[10:18:49] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 252 seconds)
[10:19:18] *** Joins: ebb (ebb@user/ebb)
[10:19:53] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[10:20:09] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:20:18] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:20:52] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[10:21:05] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[10:21:43] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:22:09] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:22:42] *** Joins: ebb (ebb@user/ebb)
[10:22:49] *** Joins: parv (~quass@user/parv)
[10:25:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:25:52] *** Joins: ebb (ebb@user/ebb)
[10:26:13] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[10:27:04] *** Joins: ihristov (~ihristov@85.187.46.226)
[10:27:33] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[10:28:06] <zumba_addict> thank you so much han-solo
[10:28:15] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:28:47] *** Joins: ebb (ebb@user/ebb)
[10:28:51] <zumba_addict> I actually copied it to a new filename but I'm getting an under when running it. I name my script as testcode.py
[10:29:14] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[10:30:09] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:90e6:2790:1466:e911)
[10:30:15] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 256 seconds)
[10:30:48] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:31:08] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:31:17] *** Quits: guenhael (~Thunderbi@2a01cb008c3d580048ebadab95925c01.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[10:31:26] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[10:31:37] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[10:31:42] *** Joins: ebb (ebb@user/ebb)
[10:31:55] <InPhase> aphysically: I'll pm you the look-up table for the answer.  Then I'm going to bed for real.  :)
[10:32:03] <aphysically> okay :)
[10:32:13] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:32:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:33:37] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[10:34:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:34:52] <powftw> I've my app at heroku. Any suggestions where to store the log files? I heard heroku will be restore to deployed state after sometime which will leave the app like how we deployed at first time and that may also remove the log files?
[10:34:55] *** Joins: ebb (ebb@user/ebb)
[10:36:15] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[10:36:50] <TML> powftw: https://www.papertrail.com/solution/cloud-syslog/
[10:37:03] <drew> I'm trying to loop through a range() includeing the last value with something like for num in range(start, end), end:, but the loop only iterates two times, once on the range and once on the single value. I can get a list of the vals in the range with for num in list(range(start, end)), end: but then I still iterate twice on the list and the number
[10:37:13] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Ping timeout: 265 seconds)
[10:37:30] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:37:39] <TML> drew: range(start, end+1)
[10:37:41] <drew> I tried doing something like for num in list(range(start, end)).append(end): but it tells me that it can't iterate a NoneType
[10:38:04] *** Joins: ebb (ebb@user/ebb)
[10:38:47] <drew> TML that would work, but I am also actually determining which direction to iterate as well
[10:39:02] <drew> so my copy pasted loop right now looks like: for coord in list(range(line[1], line[3], 1 if line[3] > line[1] else -1)), line[3]:
[10:39:04] <TML> drew: Or, more likely: for num in range(start, end): ...num+1...
[10:39:29] <TML> since people who want "the last value" probably don't realize they have a hidden off-by-one error with their range :)
[10:39:38] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[10:39:48] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-68-203.poda.cz)
[10:40:18] <drew> my off by one error right now is actually not including the last number lol
[10:40:37] <drew> I want the range inclusive of both nums, but I know that python data structs are usually [start, end)
[10:40:58] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:41:32] *** Joins: ebb (ebb@user/ebb)
[10:41:34] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[10:41:35] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[10:41:55] *** Quits: whaley (~whaley@2603-6080-a301-33d1-5925-715a-2870-ce82.res6.spectrum.com) (Ping timeout: 268 seconds)
[10:41:59] <TML> drew: for coord in range(line[1], line[3]+1, {True: 1, False: 0}[line[3]>0]):
[10:42:05] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:43:10] <Repiphany> Ugly because python doesn't have a builtin sign function but you could do `range(s, e + (d := -1 + 2*(e>s)), d)`
[10:43:21] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[10:43:35] <TML> oops, sorry - that should be False: -1
[10:43:46] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:43:52] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:44:26] *** Joins: ebb (ebb@user/ebb)
[10:44:31] <jinsun> you can just do [-1, 1][condition] too
[10:44:36] <TML> Oh - I see what you're saying - you're using the same value to be both the number of items, and the direction
[10:45:08] <TML> jinsun: Yeah, somewhere along the way I started doing the dict approach because the other method confused a bunch of junior devs and I kept having to explain it
[10:45:30] <drew> TML: but that won't print anything if line[3] < line[1]
[10:45:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:46:15] <drew> I've never seen that alternate tertiary syntax either, that is interesting
[10:46:24] <TML> drew: Why do you say that?
[10:46:32] <TML> It will print something - just probably not what you intended
[10:46:39] <drew> I just tried it and it printed nothing
[10:46:42] <drew> maybe I did it wrong
[10:46:47] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:47:21] *** Joins: ebb (ebb@user/ebb)
[10:47:23] <drew> http://0x0.st/-hGH.txt
[10:47:39] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[10:47:39] <TML> line = [None, 1, None, -5]; for coord in range(line[1], line[3]+1, {True: 1, False: -1}[line[3]>0]): print(coord)
[10:48:18] * noord losing faith in programming
[10:48:37] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[10:48:53] <TML> drew: Well, that's because you can't make a valid range out of range(303, 244, 1)
[10:49:04] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[10:49:09] <TML> drew: But your other way of doing it would have the same "bug"
[10:50:16] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:50:46] <drew> so the +1 on the second causes an extra val to be taken off if it decrements: http://0x0.st/-hGX.txt
[10:50:49] *** Joins: ebb (ebb@user/ebb)
[10:50:53] *** Joins: gusto (~Augustus@109.255.100.54)
[10:50:55] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[10:50:58] <TML> drew: Yes, I called that out
[10:51:13] <drew> so I could put in another tertiary operator to detect whether to add or subtract 1, but that gets to be very long and hard to read
[10:51:25] <TML> pretty clearly I don't understand WTF you're trying to do :)
[10:52:04] <noord> TML: 1 based indexing?
[10:52:04] <drew> I want [start, end] instead of the [start, end) that range(start, end) gives where start could be greater or less than end
[10:52:23] <Repiphany> `range(s, e + (d := -1 + 2*(e>s)), d)`
[10:53:07] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[10:53:10] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:53:42] *** Joins: ebb (ebb@user/ebb)
[10:54:21] <TML> I imagine Repiphany has the right of it, though if you wrote that in code _I_ have to maintain I'd probably not be too pleased about it
[10:54:26] <drew> that looks like it works Repiphany G]
[10:54:30] <drew> http://0x0.st/-hGK.txt
[10:54:37] *** vdamewood is now known as Guest1016
[10:54:37] *** Quits: Guest1016 (~vdamewood@fedora/vdamewood) (Killed (zinc.libera.chat (Nickname regained by services)))
[10:54:37] *** vinleod is now known as vdamewood
[10:55:32] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.194)
[10:55:38] <drew> it's pretty clever but yeah it's not super pythonix
[10:55:41] <drew> pythonic*
[10:56:01] <drew> thanks for the help, I'll keep trying different stuff
[10:56:02] *** Joins: han-solo (~hanish@user/han-solo)
[10:56:10] <TML> Just stop trying to make it a one-liner
[10:56:29] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[10:57:04] *** Joins: ebb (ebb@user/ebb)
[10:57:06] <TML> you'll be doing future you a favor
[10:57:15] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:57:27] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.196) (Ping timeout: 256 seconds)
[10:57:29] <drew> yeah
[10:57:30] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad)
[10:57:31] <noord> drew: necessity of kinda feature may not be sign of good design
[10:57:33] <kek_> hi
[10:57:35] <Repiphany> Abusing walrus is the best python
[10:57:36] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[10:58:06] *** Joins: seednode (~seednode@user/seednode)
[10:58:56] <drew> I don't think it's fair to say wanting [start, end] is indicitive of bad design
[10:59:27] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 265 seconds)
[10:59:35] <kek_> is there something like a "python structure guide for computationally expensive applications"? E.g. I'd expect it to tell me that numpy slicing is about 280x faster than a normal python loop. Stuff like that.
[10:59:41] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:00:14] *** Joins: ebb (ebb@user/ebb)
[11:00:46] *** Joins: usr123 (~usr123@49.156.65.97)
[11:00:54] <InPhase> kek_: Don't think so, but if you find one let me know.  I can add it to a resource list I keep on that topic.
[11:01:12] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:01:38] *** Quits: akahs (~Shaka@user/shaka) (Quit: .)
[11:01:48] <kek_> InPhase, mind sharing a few ressources? also might dc in a sec, can't find my charger :p
[11:01:56] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[11:02:46] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:03:09] <TML> drew: it's hard to say with the context offered so far, but I can't say I've ever hit the point where Python's interpretation of a range caused me to go through the kind of gymnastics you're doing here
[11:03:23] *** Joins: ebb (ebb@user/ebb)
[11:03:47] <noord> drew: it breaks natural 0 based looping, thats why it is not preferable
[11:04:46] *** Joins: xardas (~xardas@149.233.51.127)
[11:04:49] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad) (Remote host closed the connection)
[11:04:52] <grawity> hmm, would it be weird if python supported [x..y] and [x..y) syntax for range literals?
[11:05:15] <drew> well for context I'm doing AOC day 5 and the problem involves being given two coordinates and I wanted to get all the points on the straight line between those two coords, which would be [start x/y val, end x/y val]
[11:05:18] <TML> grawity: No
[11:05:24] <TML> drew: I don't know what "AOC" is
[11:05:31] <grawity> I assume "advent of code"
[11:05:39] <TML> Never heard of it
[11:05:40] <drew> I can see how this breaks most other natural python looping, though
[11:05:42] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:05:46] <drew> yeah it's advent of code
[11:05:48] *** Joins: schmoee__ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716)
[11:05:51] <drew> adventofcode.com
[11:05:51] <TML> I shall google this
[11:05:57] <drew> it's pretty fun
[11:06:11] *** Joins: ebb (ebb@user/ebb)
[11:06:32] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.208)
[11:06:46] <noord> drew: for i in range(len(list)): print(list[i])
[11:06:52] <noord> out of bound
[11:07:07] <noord> in case both inclusive
[11:07:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:08:13] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.194) (Ping timeout: 240 seconds)
[11:08:18] <drew> it's not given as a list of coords, I am trying to generate a list of coords. I just get something like 1,1 -> 1,3 and I am trying to generate [(1,1),(1,2),(1,3)]
[11:08:27] <TML> LOL - I didn't even make it through that wall of text about elves and submarines before I thought "Who the heck has time for this?" :D
[11:08:37] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[11:08:44] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:08:56] *** Joins: the_lanetly_052_ (~the_lanet@194.135.155.53)
[11:09:05] <grawity> I mean you have time for chatting on IRC
[11:09:22] *** Joins: ebb (ebb@user/ebb)
[11:09:38] *** Joins: rendar (~rendar@user/rendar)
[11:09:41] <TML> grawity: But I only have time for one of those two things
[11:09:45] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[11:09:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:09:57] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Read error: Connection reset by peer)
[11:10:13] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[11:10:14] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad)
[11:10:31] *** Quits: schmoee__ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716) (Remote host closed the connection)
[11:10:44] *** Quits: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf) (Read error: Connection reset by peer)
[11:11:21] *** Joins: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf)
[11:11:37] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.208) (Ping timeout: 252 seconds)
[11:11:53] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:12:17] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[11:12:31] *** Joins: ebb (ebb@user/ebb)
[11:12:39] <TML> it's a bit easier to justify IRC under the heading of helping people
[11:13:52] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.101)
[11:13:59] <kek_> InPhase, ah I just remembered that I had tow projects in my HPC course I did. Python in HPC and Juypter Notebooks in HPC (yes, we connected Noetbooks to our cluster). See https://www.youtube.com/watch?v=JYX4TQ_fCqY&list=PL1tk5lGm7zvQ-EzsiTZ6Xv1SxZs74epzg  totally forgot about that talk. can't remember if good.
[11:14:01] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716)
[11:14:49] *** Joins: sazawal (~sazawal@223.190.92.152)
[11:14:55] *** Quits: the_lanetly_052_ (~the_lanet@194.135.155.53) (Ping timeout: 252 seconds)
[11:15:04] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:15:06] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:15:10] *** Joins: kosh (~kosh@user/kosh)
[11:15:17] *** Quits: Nact (~l@host-85-27-123-35.dynamic.voo.be) (Quit: Konversation terminated!)
[11:15:25] *** Quits: gitargy (~gitargy@76.78.94.79) (Quit: Leaving)
[11:15:39] *** Joins: ebb (ebb@user/ebb)
[11:16:45] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:18:14] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:18:47] *** Joins: ebb (ebb@user/ebb)
[11:19:22] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716) (Remote host closed the connection)
[11:19:42] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:d1e5:a687:3950:5fb1)
[11:19:47] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:19:58] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716)
[11:20:13] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[11:21:26] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:21:59] *** Joins: ebb (ebb@user/ebb)
[11:22:15] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[11:22:38] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[11:22:42] *** Joins: chele (~chele@user/chele)
[11:23:02] *** Joins: Payam (~Payam@138.106.57.132)
[11:23:06] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:23:31] <Payam> Hi, is it possible to rewrite __repr__ to return a dict instead of str?
[11:23:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:23:51] <grawity> 1) no, and 2) why do you need that?
[11:24:23] <themill> If the goal is to make sure everyone who uses the code hates you, then that's a good way of doing it
[11:24:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:24:26] *** Joins: the_lanetly_052_ (~the_lanet@194.135.155.220)
[11:24:34] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716) (Remote host closed the connection)
[11:24:49] <grawity> tbh it won't work because python raises a typeerror if __repr__ doesn't return a str
[11:24:57] *** Joins: aniketgm (~Aniket@49.36.111.131)
[11:24:59] *** Joins: ebb (ebb@user/ebb)
[11:25:02] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:25:21] <grawity> now if you want the repr to *look like* the repr of a dict, then you can return a string of repr(some_dict)
[11:25:27] <grawity> but not an actual dict
[11:25:30] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:25:45] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:26:14] *** Joins: mrwick (~mrwick@user/mrwick)
[11:26:38] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[11:26:53] <TML> themill: LOL - yeah, some questions definitely seem designed as though someone were scattering caltrops in their wake
[11:27:01] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.101) (Ping timeout: 252 seconds)
[11:27:23] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[11:27:25] <themill> software version of the etherkiller...
[11:27:53] *** Joins: ebb (ebb@user/ebb)
[11:28:33] <TML> "Oh, hoh, hoh - so, you just think you're going to run _my_ code, do you? I'll show YOU."
[11:29:10] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716)
[11:31:03] <noord> haha
[11:31:21] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[11:31:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:32:05] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:54b7:c214:32a0:6716) (Client Quit)
[11:32:43] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:e84a:6c4a:27b3:2aac)
[11:32:58] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[11:33:36] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Ping timeout: 276 seconds)
[11:33:54] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:33:56] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[11:34:07] *** Joins: tobybl (~tobybl@213.31.133.113)
[11:34:39] *** Joins: Tas-sos (~Tas-sos@ppp079167204100.access.hol.gr)
[11:35:22] *** Joins: Pedee (~Pedee@user/Pedee)
[11:37:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:37:05] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.146)
[11:37:51] <han-solo> return json :p
[11:38:18] *** Joins: Payam23 (~Payam@138.106.57.132)
[11:38:36] *** Quits: the_lanetly_052_ (~the_lanet@194.135.155.220) (Ping timeout: 265 seconds)
[11:39:01] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:e84a:6c4a:27b3:2aac) (Ping timeout: 240 seconds)
[11:41:02] *** Quits: Payam (~Payam@138.106.57.132) (Ping timeout: 256 seconds)
[11:43:39] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:47:11] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[11:48:31] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[11:48:57] <powftw> i have a dict ```{'fruit': '\\apple'}``` when i ```print(a['fruit'])``` it outputs ```\apple``` ..Can i store the output to a variable as single backslah? print() does well by removing one backslash. i want to store \apple into a variable
[11:49:23] <powftw> when we normally stores it, it stores with doubleslash only
[11:49:50] <supay> powftw, it's escaping the backslash..
[11:49:55] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:50:11] <grawity> powftw: it already *is* stored as a single backslash
[11:50:35] <aphysically> nedbat: would you believe that second line is exactly 88 chars (black=1 line): https://bpa.st/3AVQ
[11:50:38] <powftw> but how can i store it into a vairable with singleslash?
[11:50:45] <aphysically> (AoC day 6 spoilers)
[11:50:57] <grawity> powftw: hmm why do you need to
[11:51:09] <powftw> just a case..
[11:51:15] <grawity> (I mean, there is a way, but I want to check whether I should recommend it in your situation)
[11:51:19] *** Joins: dbristow_ (~dbristow@user/dbristow)
[11:51:50] <powftw> just this, store with double slash and print single slash.. i.e just like how print() works
[11:51:54] <powftw> https://python-forum.io/thread-26109.html
[11:52:04] <grawity> it's not "how print() works"
[11:52:04] <powftw> i found similar thread here
[11:52:12] <grawity> it's not print() that's removing the backslash
[11:52:16] <powftw> but, in the end, they use print()
[11:52:50] <grawity> yes but it doesn't matter whether they use print() or not
[11:53:10] <grawity> print() just gives you what's already in the string
[11:53:29] <powftw> ```{'fruit': '\\apple',"vechi":"\\bus"}```
[11:53:32] <grawity> if you use "\\apple" then the resulting string has just one \
[11:53:34] <powftw> this is my input dict
[11:53:59] <grawity> basically it's the '' or "" quoting that removes it
[11:54:03] <powftw> i want \apple \bus from it
[11:54:07] *** Quits: dbristow (~dbristow@user/dbristow) (Ping timeout: 256 seconds)
[11:54:11] <grawity> yeah and that's what you have
[11:54:26] <powftw> it is only when we use print()
[11:54:32] <grawity> no
[11:54:45] <Repiphany> "\\" is a string with one character
[11:54:49] <grawity> it's the same whether you use print() or sys.stdout.write() or anything else
[11:55:07] <powftw> grawity: can you store the expected result into a variable?
[11:55:31] <grawity> hmm technically yes
[11:55:36] <grawity> using r-literals
[11:56:11] <grawity> but what I'm thinking is, you should first get a better understanding of how normal string literals work
[11:57:25] <grawity> and, because r-literals create exactly the same kind of object as normal ones (the only difference is how you type them), don't be surprised when you don't get them back out when printing the dict
[11:58:05] <grawity> so if you want to *type* only a single backslash, you can indeed replace "\\apple" with r"\apple", or e.g. "C:\\Windows\\Notepad.exe" with r"C:\Windows\Notepad.exe"
[11:58:19] <grawity> but they both do the same thing
[11:58:49] *** Joins: reset (~reset@user/reset)
[11:59:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[11:59:17] *** Joins: Hax0r (~Hax0r@93.169.49.84)
[11:59:19] *** Quits: Hax0r (~Hax0r@93.169.49.84) (Max SendQ exceeded)
[11:59:26] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[11:59:44] *** Joins: Hax0r (~Hax0r@93.169.49.84)
[12:01:48] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[12:02:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:03:53] *** Quits: Hax0r (~Hax0r@93.169.49.84) (Client Quit)
[12:04:19] *** Joins: Hax0r (~Hax0r@93.169.49.84)
[12:04:25] <TML> powftw: I kept trying to explain this to you the other night. "\\" is a single character string; try: len("\\")  -- or ord("\\") -- or "\\".encode("utf-8").hex()
[12:04:32] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.120)
[12:05:17] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[12:06:13] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.146) (Ping timeout: 240 seconds)
[12:06:32] *** Joins: mokulus (~mokulus@user/mokulus)
[12:06:48] <TML> [(_, chr(_)) for _ in "\\apple".encode("utf-8")]
[12:06:50] <TML> [(92, '\\'), (97, 'a'), (112, 'p'), (112, 'p'), (108, 'l'), (101, 'e')]
[12:07:32] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[12:08:31] *** Quits: Hax0r (~Hax0r@93.169.49.84) (Client Quit)
[12:08:53] <aniketgm> q
[12:09:22] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:09:41] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[12:09:50] *** Parts: aniketgm (~Aniket@49.36.111.131) ()
[12:10:35] <powftw> ```res = ''.join(f'{{"{k}": "{v}"}}' for k,v in my_dict.items())````
[12:10:45] <powftw> seems to be solving it
[12:11:25] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:12:08] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:12:13] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[12:12:34] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:12:41] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:13:07] *** Joins: zeudap (~zeudap@45.91.23.60)
[12:14:27] *** Joins: reset (~reset@user/reset)
[12:14:33] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.3)
[12:14:47] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[12:14:58] *** Joins: jpic (~jpic@cust-east-parth2-46-193-105-98.wb.wifirst.net)
[12:15:56] <TML> I still don't understand what it is you think you're "solving" here, but great
[12:16:30] <dre> question:
[12:17:07] <powftw> what is a good place to store json files (or any files) such as logs. when heroku restarts, everything will get restored
[12:17:22] <powftw> dre: sorry for interrupting
[12:17:28] *** Joins: nomic2 (~nomic@185.217.117.73)
[12:17:42] <dre> can you wrap any python expression in parens to signal to the REPL that it's all part of the same statement?
[12:17:42] <Repiphany> Were you trying to roll your own json dumper
[12:17:47] *** Joins: alius (~adrien@2a01:e0a:13c:cd90:1095:e33:263b:86b6)
[12:18:02] <Repiphany> `import json; json.dumps(your_dict)`
[12:18:28] <powftw> i literally mean, where to store the file containing the json
[12:18:33] <powftw> or any server logs..
[12:18:49] <Wulf> dre: expressions? I guess so.
[12:18:56] <powftw> you know these heroku servers storage is not pernanent
[12:19:03] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (Ping timeout: 256 seconds)
[12:19:14] <powftw> permanent*
[12:19:18] *** Joins: drogas (~drogas@jump2.jet.uk)
[12:19:50] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[12:20:11] *** Quits: nomic (~nomic@185.198.243.158) (Ping timeout: 256 seconds)
[12:20:56] <powftw> got it
[12:20:57] <powftw> https://medium.com/geekculture/files-on-heroku-cd09509ed285
[12:21:04] <powftw> just incase helps for someone
[12:21:15] <powftw> thanks everyone
[12:23:51] *** Quits: markb1 (~markb1@108-192-134-222.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 252 seconds)
[12:24:01] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[12:24:38] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:560:d061:bdcc:9427)
[12:25:47] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[12:26:21] *** Quits: gitly (~gitly@85.255.233.8) (Ping timeout: 256 seconds)
[12:27:24] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:d1e5:a687:3950:5fb1) (Quit: Leaving)
[12:27:50] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[12:28:06] *** Joins: gitly (~gitly@185.69.144.108)
[12:30:12] *** Joins: upsala (~zcb@185.213.155.232)
[12:30:49] *** Joins: jay-m126 (~jay-m@154.72.167.148)
[12:30:54] *** Joins: jay-m126_ (~jay-m@154.72.167.148)
[12:31:32] *** AAAAA_DRAGON is now known as A_Dragon
[12:31:37] *** dcaro_away is now known as dcaro
[12:31:46] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[12:32:13] *** Joins: carl- (~carl-@185.103.188.130)
[12:38:05] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:38:06] *** Quits: lethu (~lethu@user/lethu) (Read error: Connection reset by peer)
[12:40:54] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[12:41:09] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 256 seconds)
[12:41:16] *** Quits: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf) (Read error: Connection reset by peer)
[12:41:55] *** Joins: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf)
[12:42:47] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[12:42:49] *** Joins: jmd (~user@195.243.197.82)
[12:43:04] *** Joins: lethu (~lethu@user/lethu)
[12:43:51] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[12:44:48] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[12:45:46] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[12:45:55] *** Joins: Mocramis (~mocramis@dalaran.sceen.net)
[12:46:45] *** Quits: gitly (~gitly@185.69.144.108) (Ping timeout: 265 seconds)
[12:48:00] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:48:25] *** Joins: gitly (~gitly@148.252.133.169)
[12:48:44] *** Quits: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf) (Read error: Connection reset by peer)
[12:49:22] *** Joins: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf)
[12:49:32] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:49:49] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:50:17] *** Quits: onichomp (~onichomp@2806:264:4404:8106:c43d:f295:c210:c5bf) (Read error: Connection reset by peer)
[12:52:40] *** Joins: shad (~shad@user/shad)
[12:53:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:56:09] <ksynwa_> In curl, I am passing some data with the `--data-urlencode` flag. This isn't a dictionary, just a simple string.
[12:56:13] <ksynwa_> --data-urlencode 'query=is:unresolved GITHUB_RUN_ID:1543461130'
[12:56:14] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[12:56:18] *** Quits: jpic (~jpic@cust-east-parth2-46-193-105-98.wb.wifirst.net) (Remote host closed the connection)
[12:56:23] <ksynwa_> Any idea how I can do the same in requests?
[12:56:39] <ksynwa_> I tried data="query=is:unresolved GITHUB_RUN_ID:1543461130" but this isn't working.
[12:57:15] <shad> ksynwa_: you may run `curl -v ...` to have more details about whats sent via curl
[12:57:22] <grawity> it sure looks like it's meant to be interpreted as a form-urlencoded dict, though
[12:57:36] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[12:58:01] <shad> looks to me you want something like `request.get("http://foo.bar/foo?is=unresolved&GITHUB_RUN_ID=123456")`  but i'm not sure
[12:58:17] <grawity> no, --data is definitely POST payload, not query string, but...
[12:59:01] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[12:59:02] <shad> grawity: --data-urlencode tho ? Anyway, url encode means turning special char in %xx sequences iirc
[12:59:06] <grawity> yes
[12:59:15] <grawity> it's the fact that you're using --data-urlencode that really makes it look like you should be using data={"query": "is:unresolved GITHUB_RUN_ID:1543461130"}
[12:59:36] <grawity> shad: forms as POST payloads also use the same urlencoding
[12:59:40] <ksynwa_> Link: <https://sentry.nudjur.com/api/0/projects/sentry/nudjur/issues/?query=is%3Aunresolved%20GITHUB_RUN_ID%3A1543461130&cursor=1638778430000:0:1>
[12:59:49] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 240 seconds)
[12:59:59] <shad> grawity: looks to me like a query string :D
[13:00:02] <ksynwa_> I think it's being sent as url parameters right?
[13:00:14] <grawity> ksynwa_: indeed, but now that's a different thing, how do you get curl's --data-urlencode from that?
[13:00:23] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[13:00:32] <ksynwa_> I just ran the same curl command with -v
[13:00:37] <ksynwa_> This was in the output
[13:01:01] <grawity> maybe that means the site accepts either query string *or* POST form
[13:01:06] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[13:01:06] *** Joins: VaniaPy (~VaniaPy@79.103.125.76.dsl.dyn.forthnet.gr)
[13:01:15] <grawity> that said -v doesn't actually show you the payload that --data would've sent
[13:01:18] <grawity> it only shows headers
[13:01:38] *** Parts: VaniaPy (~VaniaPy@79.103.125.76.dsl.dyn.forthnet.gr) ()
[13:01:39] <ksynwa_> grawity: Any idea how I would contruct a form in this case? It doesn't look like JSON so I am not sure.
[13:01:47] <ksynwa_> construct*
[13:01:57] <shad> ksynwa_: requests accept a params key containing a dict of these values
[13:02:00] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:d9fd:7fba:73d1:141e)
[13:02:08] <shad> it probably url encodes it itself without you having to worry about it
[13:02:10] <grawity> if you want to send it via POST, use data={"query": "is:unresolved GITHUB_RUN_ID:1543461130"} and Requests will format it as a form string
[13:02:17] <shad> an example https://stackoverflow.com/questions/17788445/constructing-requests-with-url-query-string-in-python/17788913
[13:02:39] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:02:43] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[13:03:07] <grawity> (a dict doesn't imply json – requests has an entirely separate json= for that.)
[13:03:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:04:23] <grawity> with curl, to see the POST payload, you could use `curl --trace-ascii trace.txt`
[13:04:27] <ksynwa_> Using params= works
[13:04:28] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:04:32] <ksynwa_> Thanks a lot shad and grawity
[13:04:40] <grawity> params= is for the query string, isn't it?
[13:04:59] <grawity> I mean it'll work, as the site seems to accept both (and query string *is* more natural for search queries, anyway)
[13:05:01] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[13:05:16] <shad> Any idea how to not "select" a key in Flask-SQLAlchemy ? I've got ̀ Users` table , want to `User.query.all()` without the password key being sent for each row
[13:06:48] *** Parts: schmoee_ (~schmoee@2601:84:4501:6440:d9fd:7fba:73d1:141e) ()
[13:06:52] <graingert[m]> anyone else peeved that path params never took off? foo;ham=spam/bar;ham=spam
[13:07:04] <graingert[m]> shad: show your code?
[13:07:32] <koopman> https://bpa.st/EIVQ
[13:07:41] <grawity> path params sound like one of those "very neat feature that I can't imagine a good use for" things
[13:08:51] <noord> drew: did you solve it?
[13:09:12] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[13:09:37] *** Joins: schmoee__ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[13:09:54] <shad> graingert[m]: https://paste.mozilla.org/7DY64BRC
[13:10:23] *** Joins: schmoe___ (~schmoee@2601:84:4501:6440:9921:a439:20c0:9896)
[13:10:33] *** Joins: deathadder (~deathadde@user/deathadder)
[13:10:47] <deathadder> Someone criticised me for using tk in Python. Are they an idiot?
[13:11:03] <deathadder> Is there something inherently bad about tk I should know about?
[13:11:09] <parv> Instead of what, Tcl?
[13:11:09] *** Quits: sharperguy (~sharpergu@88.130.220.218) (Ping timeout: 252 seconds)
[13:11:14] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[13:11:25] *** Quits: gitly (~gitly@148.252.133.169) (Quit: WeeChat 3.3)
[13:11:31] <deathadder> I think they implied I should use a different GUI toolkit
[13:11:46] <deathadder> but if tkinter works, why can't I use it? It's very easy and simple
[13:11:57] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:12:04] <bookworm> you can use whatever you want if it suits your needs
[13:12:17] <deathadder> I made a little stock ticker in tkinter today, only took about 15 minutes
[13:12:59] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:13:28] <grawity> how many minutes did it take you to decide that "Are they an idiot?" is a good way to start the conversation
[13:13:44] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:13:46] <deathadder> they were very hostile to me
[13:14:05] <deathadder> when I even shared my source code with them
[13:14:18] *** Quits: schmoee__ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Ping timeout: 265 seconds)
[13:15:52] <parv> deathadder, Have they been hostile before they knew of your use of Tk?
[13:16:13] *** Quits: jmd (~user@195.243.197.82) (Ping timeout: 240 seconds)
[13:17:27] <deathadder> this was the first thing he ever said to me
[13:17:39] <deathadder> not a good first impression I might add
[13:17:50] <deathadder> we're on the same discord server
[13:17:57] <parv> Aw shit.
[13:18:03] *** Joins: sharperguy (~sharpergu@88.130.220.218)
[13:18:09] <parv> Sorry
[13:18:17] *** Joins: ericlee (~ericlee@2601:647:4681:3420::3)
[13:18:27] <deathadder> I guess he's criticising me because Tk has not so good rendering and doesn't look that native
[13:18:37] <deathadder> That's all I can think of
[13:18:47] <deathadder> but I don't care if it's ugly, tkinter is a breeze to use
[13:19:02] *** Joins: vimal (~vimal@ip-213-127-87-89.ip.prioritytelecom.net)
[13:19:02] <bjs> deathadder: sure there are better looking GUI toolkits out there but that's no reason to be hostile to anyone :(
[13:19:06] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[13:19:19] <parv> Well, that has been the case longest of the time.
[13:19:39] <deathadder> the first thing he said in reaction to my source code post was "tkinter (insert reaction face)"
[13:19:45] <deathadder> and I was sharing my source code!
[13:19:54] <deathadder> anyone can use my source....
[13:20:05] *** Joins: arinov (~arinov@31.142.57.149)
[13:20:39] <ericlee> Hi, in argparse, if I set a default value for a parameter and it's not required in True, how do I know if the parameter is passed or not? because I could not test if args.param_name True or False. For example: parser.add_argument('--count', type=int, required=False, default=50), then how do I know if args.count is passed by user or it's just a default value?
[13:20:39] <deathadder> anyhow... they're just a troll, and projecting their own insecurities onto me...
[13:21:08] <noord> thats why we stay away from discord
[13:21:29] <grawity> ericlee: don't specify a default then
[13:21:43] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[13:21:52] <ericlee> grawity, that's the only solution?
[13:22:00] <grawity> I mean it seems like the most sensible solution
[13:22:26] <ericlee> I guess so, yes. thanks.
[13:22:32] <grawity> and if you already have the "if parameter isn't set" check in code later, you can apply the default of 50 there
[13:23:24] <ericlee> right, that's the old fashion I did previously.
[13:23:27] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:a027:15be:21f2:776e)
[13:23:37] *** Quits: schmoe___ (~schmoee@2601:84:4501:6440:9921:a439:20c0:9896) (Ping timeout: 252 seconds)
[13:23:56] *** Joins: plastico (~plastico@neomutt/plastico)
[13:23:57] <graingert[m]> <shad> "graingert: https://paste.mozilla..." <- You should select just the fields you want rather than the whole User object
[13:25:54] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[13:26:05] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[13:26:13] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:27:23] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[13:28:26] <shad> graingert[m]: yes, how do I do that with Flask SQLALchemy though. The documentation lacks that example: https://flask-sqlalchemy.palletsprojects.com/en/2.x/queries/#querying-records
[13:29:21] <graingert[m]> You can grab a session and call session.execute(select (User.name, User.whatevet))
[13:29:48] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[13:30:21] <shad> i'd rather avoid using low level SQLAlchemy if I can and stick to syntactic sugar of Flask-SQLAlchemy if possible
[13:30:42] <shad> but yeah, looks more and more probable i'll have to use a session instead of Flask-SQLAlchemy
[13:32:28] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[13:32:39] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[13:32:41] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:32:43] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 256 seconds)
[13:33:43] *** Joins: Naan (~Naan@user/naan)
[13:34:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:34:45] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[13:34:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[13:35:01] <parv> argparse is too verbose & tedious to work with; eg with "nargs = 1", option gets 1-element list which then requires to pull it out from useless list
[13:35:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[13:37:08] <themill> parv: I know it's only one example and you probably have others, but the only time I'd use nargs=1 is if I wanted it to be in a list already
[13:38:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:38:53] <parv> themill, Right you are. What do you do to require a value for the option, check outside of argeparse?
[13:38:58] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:d2d2:a0ff:11ef:96ea)
[13:39:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:39:03] *** Quits: metaace_ (~metaace@user/metaace) (Ping timeout: 276 seconds)
[13:39:14] *** Joins: metaace (~metaace@user/metaace)
[13:39:44] *** Joins: tmm88 (~tmm88@user/tmm88)
[13:39:53] *** Lord_of_Life_ is now known as Lord_of_Life
[13:40:07] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 252 seconds)
[13:41:05] *** Joins: AsenMx (~AsenMx@user/asenmx)
[13:41:22] <parv> Another example: it converts '-' in option name to '_'; now I need to add "metavar"
[13:41:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[13:42:05] <KirkMcDonald> Usually you just don't specify nargs; it's inferred from the action.
[13:42:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:42:32] *** Quits: dre (~dre@60.229.45.121) (Remote host closed the connection)
[13:43:04] <grawity> eh, you want metavar a lot of the time anyway; for example, "--log-file PATH" looks a lot more natural than "--log-file LOG_FILE" (although that's still better than if "--log-file LOG-FILE" honestly)
[13:43:57] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:44:30] <themill> yeah, I care about the --help output and want it to be usable and so I'll happily put in the effort to make it usable. I also write actual man pages.
[13:44:45] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 265 seconds)
[13:45:24] <themill> I don't think I've ever wanted the option name as the metavar.
[13:45:39] *** Quits: vimart (~vimart@109.249.179.169) (Quit: WeeChat 2.8)
[13:46:16] <parv> Oh, good one argparse! If "nargs" is not given, then for the option to behave as True|False, now need to specify that.
[13:46:19] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:46:41] <grawity> (though I suppose it *could* parse add_argument("--log-file PATH") like in ruby, that's not too far from what it already does anyway, but I don't really *mind* having to use metavar= since it's just one more along with help= or type= or default= or whatever)
[13:47:06] <parv> That case -- lack of nargs -- should have been storing truth value by default
[13:48:34] *** Quits: usr123 (~usr123@49.156.65.97) (Quit: Client closed)
[13:48:43] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:a027:15be:21f2:776e) (Remote host closed the connection)
[13:49:00] <themill> "--foo True" vs "--foo False" is an odd interface. Just --foo would be more normal.
[13:49:14] <themill> (action='store_true')
[13:49:20] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:a027:15be:21f2:776e)
[13:49:40] <grawity> would be nice if it automatically accepted --no-foo
[13:49:50] <themill> indeed
[13:50:28] <parv> I came upon an alternative that used decorators (in examples shown) but now I could not find it
[13:50:38] <themill> grawity: action=argparse.BooleanOptionalAction makes that work though
[13:51:42] <themill> parv: sounds like `click`. I've heard of people who like it a lot.
[13:51:59] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:52:02] <themill> didn't float my boat
[13:52:45] <parv> themill, That was it; found it in bookmarks. Thanks.
[13:53:55] *** Joins: Klinda (~superleag@user/klinda)
[13:54:19] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 268 seconds)
[13:54:33] <grawity> themill: yeah but that *is* borderline "too verbose" :(
[13:54:39] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 276 seconds)
[13:55:49] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[13:56:12] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:a027:15be:21f2:776e) (Remote host closed the connection)
[13:56:13] *** Joins: AsenMx (~AsenMx@user/asenmx)
[13:56:28] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:a027:15be:21f2:776e)
[13:56:34] *** Joins: rany (~rany@user/rany)
[13:56:35] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:59:42] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[14:00:13] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[14:00:17] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 252 seconds)
[14:02:39] *** Joins: rendar (~rendar@user/rendar)
[14:02:44] *** Joins: l4yer (~l4yer@217-64-151-3.pool.ovpn.com)
[14:04:45] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[14:05:22] *** Joins: decartes (sid240036@id-240036.helmsley.irccloud.com)
[14:07:30] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[14:07:33] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[14:07:37] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:a027:15be:21f2:776e) (Ping timeout: 252 seconds)
[14:07:39] *** Joins: rany (~rany@user/rany)
[14:09:36] *** Joins: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[14:13:22] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Quit: Konversation terminated!)
[14:14:53] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[14:20:14] *** Joins: MacGyver (~macgyver@user/macgyver)
[14:20:30] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[14:21:11] *** Quits: sharperguy (~sharpergu@88.130.220.218) (Ping timeout: 252 seconds)
[14:22:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:22:27] *** Quits: schmoee_ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) ()
[14:23:14] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[14:23:36] *** Quits: parv (~quass@user/parv) (Quit: parv)
[14:30:11] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[14:31:24] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[14:32:42] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:45] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[14:34:09] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[14:35:29] *** Quits: arinov (~arinov@31.142.57.149) (Ping timeout: 252 seconds)
[14:35:55] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:36:43] *** Quits: resmo (~resmo@2a00:d420:9:8a00:7069:50d7:73e6:b878) (Read error: Connection reset by peer)
[14:37:30] *** Joins: resmo (~resmo@2a00:d420:9:8a00:462a:45df:8884:16ae)
[14:38:33] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[14:39:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[14:39:36] *** Joins: shad (~shad@user/shad)
[14:39:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:41:28] *** Joins: xkuru (~xkuru@user/xkuru)
[14:42:29] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:5919:1c10:2420:8d8) (Quit: Joined Game)
[14:44:08] <bjs> themill: I've seen --foo and --no-foo
[14:44:23] <bjs> which is a nice compromise
[14:45:02] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[14:45:15] *** Joins: usr123 (~usr123@49.156.120.253)
[14:45:16] *** Joins: dre (~dre@2001:8003:c932:c301:f1c3:1a61:69df:983e)
[14:45:31] *** Quits: tobybl (~tobybl@213.31.133.113) (Remote host closed the connection)
[14:45:34] *** Parts: deathadder (~deathadde@user/deathadder) (Leaving)
[14:47:21] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[14:47:51] *** Joins: cursey (~cursey@user/cursey)
[14:48:12] *** Joins: piecharm (~Guest67@183.82.27.129)
[14:48:54] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2cae6b318fffe838f33.dip0.t-ipconnect.de)
[14:50:07] <jbe> --no-foo-only-zuul
[14:50:31] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[14:50:59] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[14:52:15] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[14:52:24] *** Joins: rany (~rany@user/rany)
[14:52:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[14:52:46] *** Quits: hodapp (~mawson@user/hodapp) (Quit: WeeChat 2.3)
[14:53:32] *** Joins: hodapp (~mawson@user/hodapp)
[14:54:03] *** Joins: weedmic (~weedmic@188.120.139.53)
[14:54:05] *** Quits: weedmic (~weedmic@188.120.139.53) (Client Quit)
[14:54:31] <piecharm> Hi
[14:55:22] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Quit: guenhael)
[14:55:33] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[14:56:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:57:10] *** Joins: legola (~legola@46.235.101.65)
[14:57:12] <piecharm> %%writefile s.txt
[14:57:13] <piecharm> with open ('s.txt') as s1:
[14:57:13] <piecharm>     contents = s1.read
[14:57:14] <piecharm> TypeError                                 Traceback (most recent call last)
[14:57:14] <piecharm> ~\AppData\Local\Temp/ipykernel_10668/2436256473.py in <module>
[14:57:15] <piecharm> ----> 1 with open ('s.txt') as s1:
[14:57:15] *** litharge sets mode: +q $a:piecharm
[14:57:30] <supakeen> don't paste in the channel, use a pastebin for your code, piecharm
[14:57:47] *** litharge sets mode: -q $a:piecharm
[14:58:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:58:21] <piecharm> supakeen okay, sorry.
[14:59:10] *** Joins: arinov (~arinov@31.142.57.149)
[14:59:11] <bjs> piecharm: https://bpa.st/+python is a good site that lets you create a paste with your code
[14:59:41] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Ping timeout: 252 seconds)
[15:00:11] <piecharm> bjs thanks much, for the suggestion.
[15:00:13] *** dcaro is now known as dcaro_lunch
[15:01:13] <piecharm> https://bpa.st/NPWA str error when opening a file via 'with open as' method. Can someone help me figure it out, please?
[15:01:48] <grawity> did something else redefine 'open' earlier?
[15:01:59] <bjs> piecharm: is this everything?  are there any lines earlier in the program? e.g. something that writes to `open` ?
[15:03:00] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Read error: Connection reset by peer)
[15:03:19] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[15:03:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:03:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:03:54] <piecharm> I created another file but closed using myfile.close()
[15:03:55] <piecharm> There are about 100 lines but it's a test notebook and i didn't want to spam the paste with all those.
[15:04:05] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:04:12] <bjs> piecharm: it's okay you can make a paste with all of them if you want
[15:04:21] <supakeen> well something in there reassigned 'open' to be a string
[15:04:32] <bjs> we'll be able to tell you what happened, but I suspect you just did something in an earlier cell/line/whatever that changed what `open` was
[15:05:59] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:05:59] <grawity> do a print(repr(open))
[15:08:52] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:09:10] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[15:09:14] <piecharm> https://bpa.st/ONDA Here's the entire history. Sorry if it isn't looking neat. Is there a better way to copy the contents so it looks readable in a paste?
[15:10:20] <piecharm> print(repr(open)) gives the output as: 'pwd'
[15:11:15] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[15:12:27] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.120) (Ping timeout: 256 seconds)
[15:12:37] <bjs> piecharm: the line numbers are confusing, In[131]: goes to In[134]: goes to In[133]: goes to In[148]:
[15:13:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:13:57] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:14:05] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[15:14:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:07] <bjs> piecharm: if this is IPython then there is a %history command that might generate easier to read logs https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-history
[15:15:12] <piecharm> Yea, i'm following a tutorial and, I just re-execute a previous command, if I change the value of something.
[15:15:40] <piecharm> Is it bad practice to have the In[] numbers not in ascending order?
[15:16:01] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Remote host closed the connection)
[15:16:02] <supakeen> no, but it makes it excessively hard to debug something without having the actual code
[15:16:06] *** Quits: dre (~dre@2001:8003:c932:c301:f1c3:1a61:69df:983e) (Ping timeout: 265 seconds)
[15:16:13] <supakeen> anyways, as summarized before you reassigned 'open' to be the string 'pwd'.
[15:16:17] <supakeen> don't do that :)
[15:16:57] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 268 seconds)
[15:17:19] <piecharm> This isn't IPython, I'm using Jupyter Notebooks via Anaconda. But %history does give a similar output, thanks for the info.
[15:17:32] <lericson> pythoneers, how do you read your pydocs? i had a habit of using pydoc <whatever>, but with tensorflow taking a few seconds to import, i now have a need to have the docs "preloaded" so to speak -- i could of course just start python, and use help('whatever') to the same effect -- but is there something more robust similar to pydoc's built-in web server (i.e. pydoc -b)
[15:18:54] <bjs> lericson: pydoc -w ?
[15:19:02] <bjs> although I don't think I've ever actually ran it before
[15:19:07] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[15:19:31] <jinsun> piecharm: to get back the builtin open function without restarting the whole thing, you can do `import builtins; open = builtins.open`
[15:19:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:20:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:20:22] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[15:20:39] <lesshaste> I just got about 50,000 tweets and saved the list of tweets using pickle like this: https://bpa.st/FEYQ .
[15:20:47] <lesshaste>  When I try to load them back in with import pickle
[15:20:47] <lesshaste> march_tweets = pickle.load( open( "twitter/march.pkl", "rb" ) )
[15:20:47] <lesshaste> I get https://bpa.st/B4ZA
[15:20:53] <lesshaste> what am I doing wrong?
[15:21:00] <bjs> lesshaste: using pickle? :P
[15:21:15] <bjs> lesshaste: tweets seems like an obvious use for something like json
[15:21:35] <lericson> bjs: nearly works, the problem with that approach is that i could for example access foo.bar even though bar comes from module blah, whereas that approach would mean i have to go look up blah.bar instead -- sounds like a non-issue, but with nested modules and packages, these can become ridiculously long
[15:21:53] <lericson> tensorflow, notably, has all of its actual stuff in 3-4 levels deep packages
[15:21:55] <bjs> lericson: hmm, find the official docs and get a copy?
[15:22:06] <bjs> I almost always use the "real" docs (html or pdf) if they're available
[15:22:08] <lericson> i guess
[15:22:12] <bjs> rather than pydoc or help or anything
[15:22:27] <lericson> i guess i'm the opposite
[15:22:32] <lericson> i tend to resort to reading the code i have at hand
[15:22:42] <lxer> Is this correct?  https://dpaste.org/Be8Z  it looks weird, but I saw someone use it to indicate a subclass.
[15:22:50] <lericson> i don't trust programmers to write correct and up-to-date docs :p
[15:23:12] <lericson> lxer: that's uh pretty strange
[15:23:14] <bjs> lxer: what is Thing ?
[15:23:27] <piecharm> bjs supakeen jinsun Thanks a lot, issue resolved.
[15:23:35] <bjs> lxer: I doubt any typechecker would accept such an annotation where Thing != Something
[15:23:50] <lxer> pycharm seems to like it
[15:24:16] <Shapeshifter> The docs on iterables https://docs.python.org/3/library/stdtypes.html#container.__iter__ say that "additional methods can be provided to specifically request iterators for those iteration type". Does this mean simply that I might implement container.another_iter() that returns a different iterator? As in, there is no naming convention or anything?
[15:24:37] *** Quits: l4yer (~l4yer@217-64-151-3.pool.ovpn.com) (Ping timeout: 240 seconds)
[15:24:49] <bjs> Shapeshifter: there is no naming convention for that no
[15:25:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:25:04] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[15:25:22] <lxer> bjs: 'Thing' is anoter class.  class Thing(Something)
[15:25:28] <bjs> Shapeshifter: lots of types have this but the names are always custom. e.g. a dict has .keys() and .values() and .items() iterators
[15:25:33] <bjs> well iterables
[15:25:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:26:31] <grawity> hmm do I understand it right that an iterator has __next__(), while an iterable has __iter__() that returns the former?
[15:27:12] <bjs> grawity: iterators should also be iterable (and have an __iter__ that returns itself for example)
[15:27:17] <bjs> but yes
[15:27:23] *** Quits: Pedee (~Pedee@user/Pedee) (Quit: WeeChat 3.3)
[15:28:40] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 265 seconds)
[15:29:34] *** Joins: AsenMx (~AsenMx@user/asenmx)
[15:30:46] *** Joins: rendar (~rendar@user/rendar)
[15:30:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:31:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:33:19] *** Joins: dre (~dre@60.229.45.121)
[15:33:25] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 256 seconds)
[15:34:20] *** Joins: l4yer (~l4yer@89-238-176-4.pool.ovpn.com)
[15:35:41] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 256 seconds)
[15:36:01] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:31] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[15:38:20] <jinsun> there was a discussion going about that recently, that iterator can be redefined to require only `__next__` because for loops and some other stuff that requires iterators actually work with anything that has only `__next__` and no `__iter__`
[15:38:57] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:d0b7:4ddf:ecc9:b468)
[15:39:01] <jinsun> but it ended up with considering that behavior cpython implementation detail https://github.com/python/cpython/pull/29170
[15:40:48] *** Joins: iflema (~ian@user/iflema)
[15:41:16] <lesshaste> what is the point of recurse=True in dill?
[15:41:19] <Yhg1s> It was only in specific contexts that CPython took an iterator with no __iter__.
[15:41:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:41:40] <bjs> jinsun: it's okay for some operations to not have to look for the existence of *all* the required methods to do the operation
[15:41:42] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:42:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:42:41] <bjs> that doesn't affect what the whole interface is
[15:43:01] *** Quits: arinov (~arinov@31.142.57.149) (Ping timeout: 240 seconds)
[15:47:01] <bjs> and being able to loop over iterators is a core part of how things like itertools works, and having an "iterator" that does not have __iter__ means you cannot use it with itertools
[15:47:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:48:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:44] *** Quits: usr123 (~usr123@49.156.120.253) (Quit: Client closed)
[15:49:01] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 268 seconds)
[15:49:07] *** Joins: weedmic (~weedmic@188.120.139.53)
[15:49:38] *** Quits: Terexen (~terexen@user/terexen) (Quit: Saraba)
[15:50:52] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[15:53:19] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:53:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:53:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:55:25] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[15:56:01] *** Joins: tempate (~alpha@user/tempate)
[15:56:24] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:56:45] *** Joins: bloody (~bloody@user/bloody)
[15:57:37] *** km_ is now known as km
[15:57:48] <tempate> Hello. I have a class of special numbers. I have overloadded the addition symbol so that I can sum an  instance of my class with an integer (I + 3). What should I do for it to work the other way? (3 + I)
[15:57:57] <bjs> tempate: there is __add__ and __radd__
[15:58:05] *** Joins: teut (~teut@106.215.2.203)
[15:58:11] <tempate> bjs: that was fast, thanks!
[15:58:13] <bjs> Yhg1s: I've always wondered why Python checks iter()/int()/bool() at all
[15:58:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:58:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[15:59:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:59:15] *** Joins: zeden (~zeden@user/zeden)
[15:59:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:59:39] <Yhg1s> bjs: I'm not sure what you mean by 'checks'
[16:00:19] *** Joins: grundrausch3n (~grundraus@p200300e9ef18ac00b48eb7646a779e9a.dip0.t-ipconnect.de)
[16:00:36] <bjs> Yhg1s: if I write a __bool__ that returns a str,  the Python bool() call does a type() check and raises an error
[16:00:40] *** Joins: cdown_ (~cdown@188.214.11.14)
[16:00:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:02:54] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:03:03] *** Quits: cdown_ (~cdown@188.214.11.14) (Remote host closed the connection)
[16:03:13] <grawity> oh, like that person 5 hours ago who wanted to return a dict from __repr__()?
[16:03:37] *** Joins: arinov (~arinov@31.142.57.149)
[16:04:22] <Yhg1s> bjs: to catch common errors, I suppose. And to avoid people using __*__ methods for the wrong things.
[16:05:01] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[16:05:58] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[16:06:08] <graingert[m]> it's sort of odd that it does tbh
[16:06:31] <graingert[m]> it seems a bit "look before you leap"
[16:07:28] <graingert[m]> I guess the alternative is recursive `__bool__`-ing
[16:07:48] <Yhg1s> it's more like "did we leap into a puddle?"
[16:07:51] <graingert[m]> yeah it's not odd at all - you need a type check either way so you only have two options
[16:08:00] <graingert[m]> recurse or fail
[16:08:03] *** baltazar is now known as baltazaar
[16:08:35] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[16:08:36] *** Joins: pyzozord (pyzozord@user/pyzozord)
[16:09:33] <pyzozord> what's an elegant way to trun 1,1,3,2,4,1,4 list into a dict of frequencies where d[1] == 3 and d[4] == 2?
[16:09:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:09:55] <Repiphany> collections.Counter([1,1,3,2,4,1,4])
[16:10:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:10:57] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:d2d2:a0ff:11ef:96ea) (Remote host closed the connection)
[16:11:04] <pyzozord> can I then make sure that counter has all keys from 1 to 8? so that d[7] == 0?
[16:11:30] <Repiphany> Counter defaults with 0 for uninitialized keys
[16:11:52] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:e4e5:f5c3:f2e8:6b0a)
[16:11:58] <pyzozord> perfect
[16:12:05] <graingert[m]> `collections.Counter([1, 2, 3])[4]` huh til
[16:12:18] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:12:47] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[16:12:54] *** Quits: nomic2 (~nomic@185.217.117.73) (Quit: Leaving)
[16:13:59] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[16:14:37] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[16:16:19] <Shapeshifter> bjs: thanks, makes sense.
[16:17:07] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[16:18:36] <pyzozord> can I print Collection in sorted by key order?
[16:18:37] *** Quits: l4yer (~l4yer@89-238-176-4.pool.ovpn.com) (Ping timeout: 240 seconds)
[16:19:14] *** dcaro_lunch is now known as dcaro
[16:19:23] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[16:19:25] <Repiphany> print(sorted(counter.items()))
[16:21:01] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[16:21:42] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[16:21:49] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 252 seconds)
[16:23:06] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[16:23:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:23:49] *** Joins: unyu (~pyon@user/pyon)
[16:25:59] *** Joins: usr123 (~usr123@27.255.249.250)
[16:27:17] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:e4e5:f5c3:f2e8:6b0a) (Remote host closed the connection)
[16:27:30] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:b4b9:2e5b:8ffb:f8d8)
[16:27:49] *** Quits: jay-m126_ (~jay-m@154.72.167.148) (Ping timeout: 240 seconds)
[16:27:49] *** Quits: jay-m126 (~jay-m@154.72.167.148) (Ping timeout: 240 seconds)
[16:27:57] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:29:11] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:29:38] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[16:30:55] <usr123> Getting this error when I run pytest. https://dpaste.org/P9ov . Any idea why pytest is raising StopIteration? It's failing in the line mentioned in the paste numbered as 172
[16:31:05] *** Joins: ludo (ludo@user/ludo)
[16:31:44] <bjs> usr123: do you have a mismatching Python and pytest (e.g. pytest for a different version of Python)
[16:32:09] *** Quits: dalan (~dalan@194-193-164-106.tpgi.com.au) (Read error: Connection reset by peer)
[16:32:33] *** Joins: dalan (~dalan@194-193-164-106.tpgi.com.au)
[16:32:36] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[16:32:54] *** Joins: jmcb (~jmcb@nas47-67.york.ac.uk)
[16:33:11] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:33:16] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[16:33:18] <ludo> Hi, for `'{ #comment }'.format(*args, **kwargs)` I get `ValueError: unmatched '{' in format` how do I escape the `{}` brackets?
[16:33:40] <usr123> bjs: might be, I'm using pyenv for managing python versions
[16:33:42] <usr123> let me check
[16:33:51] <bjs> usr123: pluggy-0.4.0 is that right?  https://pypi.org/project/pluggy/0.4.0/ suggests it only supports up to 3.5
[16:34:27] <bjs> ludo: {{ and }}
[16:35:14] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad) (Remote host closed the connection)
[16:35:36] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[16:35:41] <ludo> bjs, thanks
[16:36:45] <nedbat> ludo: if you are formatting large strings, it might be better to use jinja
[16:38:16] *** Joins: l4yer (~l4yer@89-238-176-6.pool.ovpn.com)
[16:38:34] *** Joins: SteveR (~SteveR@103.215.168.1)
[16:38:57] *** Joins: kevgao (~kevgao@2601:281:8780:4510:e5e7:bf3:cbc4:eeee)
[16:39:22] <SteveR> hi there, why it is suggested to use separator is None rather than separator == None?
[16:39:55] <nedbat> SteveR: "is None" is idiomatic, and can avoid subtle bugs with user-defined classes that provide __eq__
[16:40:45] <SteveR> could you explain it more in a beginner friendly manner please nedbat
[16:41:39] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:41:40] <nedbat> SteveR: the simplest way to explain it is that it's just a convention
[16:42:01] <bjs> convention, with good reasons
[16:43:08] <SteveR> ok any idea why this is the behaviour
[16:43:09] <SteveR> https://bpa.st/KZVQ
[16:43:14] <bjs> SteveR: classes can choose what == does, and so `separator == None` might return True even if the separator wasn't None.  Or even worse, there are types where `separator == None` will actually crash
[16:43:20] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[16:43:30] <bjs> SteveR: yes, you shouldn't use `is` there
[16:43:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[16:43:54] *** Quits: piecharm (~Guest67@183.82.27.129) (Quit: Client closed)
[16:43:56] <bjs> `is` and `==` aren't the same thing. `is` checks that they really are the same object.  There's no guarantee that two ints are *the same int object* even if they happen to represent the same value
[16:44:45] <SteveR> sure
[16:45:33] *** Joins: tobybl (~tobybl@213.31.133.113)
[16:45:49] <usr123> pluggy doesn't seem installed bjs
[16:46:00] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[16:46:08] <bjs> SteveR: try put the assignemnts on the same line  `a = 257 ; b = 257`
[16:46:12] <bjs> for me suddenly now they become the same int :)
[16:46:29] <usr123> % pip list | grep pluggy -> pluggy                 1.0.0
[16:46:32] <bjs> so you can't rely on the behaviour
[16:46:37] *** Quits: arinov (~arinov@31.142.57.149) (Ping timeout: 240 seconds)
[16:47:07] <bjs> usr123: I was reading from your pytest output
[16:47:13] <bjs> which said pluggy-0.4.0
[16:47:25] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[16:47:49] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:47:50] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[16:47:51] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 245 seconds)
[16:48:40] <usr123> bjs: Yeah, it does, not sure why though
[16:48:54] <usr123> % pip list | grep pytest
[16:48:55] <usr123> pytest                 3.0.3
[16:48:55] <usr123> pytest-cov             2.4.0
[16:48:58] *** Joins: ub (~Thunderbi@p200300ecdf0ba2ca3910be5e8791151b.dip0.t-ipconnect.de)
[16:49:06] <usr123> Here is the pytest version though
[16:49:32] <Masklin_Gurder> I am reading old code of mine, and by old I mean last month. I sit in amazement. "Am I truly this intelligent?" I muse.
[16:49:38] <bjs> usr123: are you using a venv? is it possible the pytest is not in the venv or for a different python version or something like that
[16:49:41] <Masklin_Gurder> Life is easy.
[16:49:41] <grym> Masklin_Gurder: uh oh
[16:49:46] <usr123> upgrading pytest did the trick bjs
[16:53:31] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:57:17] *** Quits: l4yer (~l4yer@89-238-176-6.pool.ovpn.com) (Ping timeout: 256 seconds)
[17:01:18] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[17:02:12] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:b4b9:2e5b:8ffb:f8d8) (Remote host closed the connection)
[17:02:30] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:6c69:c214:cdb4:c477)
[17:02:55] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:03:26] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[17:04:46] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[17:05:59] *** Quits: kevgao (~kevgao@2601:281:8780:4510:e5e7:bf3:cbc4:eeee) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:08:41] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[17:10:35] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (Ping timeout: 252 seconds)
[17:11:09] *** Joins: l4yer (~l4yer@195.181.170.210)
[17:13:55] <Payam23> Hi, I am working with asyncio but I get this error when trying to get the same object. https://bpa.st/TN6Q
[17:14:10] <Payam23> is there any way of locking or avoid this error?
[17:15:57] *** Joins: nomic (~nomic@185.217.117.73)
[17:16:42] <Yhg1s> Payam23: it's very difficult to tell what's going on if you just print exceptions like that. Never catch exceptions to just print them. Just don't catch the exception, instead. Also, you've left out the definition of the coroutines you're calling.
[17:17:11] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[17:17:27] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[17:18:17] <Payam23> https://bpa.st/KERA here is the whole code.
[17:18:46] *** Quits: teut (~teut@106.215.2.203) (Ping timeout: 256 seconds)
[17:19:01] <CrtxReavr> I didn't think STR.rstrip() used regex. . .
[17:19:37] <bjs> CrtxReavr: it doesn't
[17:19:39] <Yhg1s> Payam23: and the traceback after you stop catching exceptions just to print them?
[17:19:49] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[17:20:14] <Payam23> Yhg1s sorry?
[17:20:20] <Payam23> no no
[17:20:26] <Payam23> I can show you the whole tracback
[17:20:47] *** Quits: grundrausch3n (~grundraus@p200300e9ef18ac00b48eb7646a779e9a.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:20:48] <CrtxReavr> bjs, can you explain this behavior then?: print("cisco.com".rstrip(".com"))
[17:21:02] <Yhg1s> CrtxReavr: it doesn't take substrings either. It takes characters.
[17:21:06] <bjs> CrtxReavr: that's stripping all the '.', 'c', 'o' and 'm' chars from the right
[17:21:35] <bjs> so you'll get "cis"
[17:21:54] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[17:22:03] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.127)
[17:22:03] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[17:22:15] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 265 seconds)
[17:22:55] <CrtxReavr> hmmm
[17:23:08] *** Joins: AsenMx (~AsenMx@user/asenmx)
[17:23:50] <CrtxReavr> Okay, thanks. . . someone was asking me about that and I was flummoxed.
[17:24:01] <jinsun> .removesuffix was added in 3.9 to do what you probably wanted
[17:24:06] <bjs> im sure the rstrip docs document this behaviour
[17:24:20] <CrtxReavr> 'Course, I've never tried to use strip() that way either.
[17:24:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:24:50] *** Joins: darksun (~darksun@user/darksun)
[17:24:55] *** Joins: cheater (~Username@user/cheater)
[17:25:15] <CrtxReavr> jinsun, I actually advised split & slicing.
[17:25:47] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:27:20] *** Joins: lastshell (~lastshell@user/lastshell)
[17:28:04] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[17:28:37] <Payam23> Yhg1s the error is huge
[17:29:29] <bjs> Payam23: how many thousands of lines is the traceback?
[17:29:53] *** Quits: tempate (~alpha@user/tempate) (Quit: Leaving.)
[17:29:56] <Payam23> bjs a second. I am trying to make it short
[17:30:07] <bjs> Payam23: i would strongly advise not doing that
[17:30:13] <Payam23> but in my code As you see I use the same object to right too.
[17:30:15] <bjs> otherwise you might just end up having to go back and make it longer again :P
[17:30:41] <Payam23> okej give me a sec
[17:31:19] *** Joins: callq (~callq@2409:4062:2d12:20af:3084:9666:bf9d:eb2d)
[17:31:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:31:25] *** Joins: csmiga (~Thunderbi@96-87-248-1-static.hfc.comcastbusiness.net)
[17:32:53] <CrtxReavr> bjs, the docstring could stand to be a little less vague: If chars is given and not None, remove characters in chars instead.
[17:33:33] <bjs> CrtxReavr: https://docs.python.org/3/library/stdtypes.html#str.rstrip   it even has an example of it not being a substring
[17:33:37] <Payam23> bjs here: https://pastebin.com/qcUE3nWD
[17:33:42] <bjs> the help() text is probably useless, it always is :(
[17:34:45] *** Joins: tempate (~alpha@user/tempate)
[17:35:09] *** Quits: Tas-sos (~Tas-sos@ppp079167204100.access.hol.gr) (Quit: leaving)
[17:36:34] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[17:36:46] <pyzozord> hey, can I ask for review of my AoC day 6? https://ideone.com/1BNL9A
[17:36:51] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[17:37:00] <pyzozord> looking for how to make the code more idiomatic and pythonic
[17:37:54] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[17:38:19] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[17:38:36] <Payam23> bjs when I remove `await asyncio.gather(*[self.get_tags(project) for project in project_list])` it works
[17:38:52] <Payam23> how do I ensure that asyncio.gather is done!?
[17:39:30] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[17:41:01] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[17:41:06] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[17:41:18] *** Joins: jay-m126 (~jay-m@154.72.167.148)
[17:41:22] *** Joins: jay-m126_ (~jay-m@154.72.167.148)
[17:41:26] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[17:41:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:41:55] *** Joins: xkuru (~xkuru@user/xkuru)
[17:42:06] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[17:42:08] *** Quits: jmcb (~jmcb@nas47-67.york.ac.uk) (Quit: Farewell)
[17:42:13] <bjs> Payam23: I'm not really sure what you're saying here,  it failed to access one of the urls
[17:42:21] *** Joins: drogas (~drogas@jump2.jet.uk)
[17:42:31] *** Joins: csmiga1 (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[17:42:54] <Payam23> bjs when I remove line 220. it works. Where do you see the url?
[17:43:51] <bjs> Payam23: well that's where this error is coming from no? you're printing out exceptions from the client.get() call
[17:44:16] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[17:44:43] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:46:50] <bjs> Payam23: I'm a little confused why you picked only 401 and 404 as the "bad" codes
[17:47:16] <bjs> aren't all 40x codes going to be bad?
[17:47:19] <Payam23> bjs  I don't remember to be honest.
[17:47:30] *** Quits: lastshell (~lastshell@user/lastshell) (Quit: WeeChat 3.0)
[17:47:55] *** dbristow_ is now known as dbristow
[17:48:46] *** Quits: usr123 (~usr123@27.255.249.250) (Quit: Client closed)
[17:49:01] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[17:50:06] <bjs> Payam23: why not use raise_for_status() instead of checking for 404 and 401 directly
[17:50:35] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[17:51:32] *** Joins: pigweed (~pigweed@97.119.229.83)
[17:52:10] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[17:53:00] *** Quits: callq (~callq@2409:4062:2d12:20af:3084:9666:bf9d:eb2d) (Quit: callq)
[17:55:25] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[17:56:05] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[17:56:43] *** Quits: tempate (~alpha@user/tempate) (Quit: Leaving.)
[17:56:56] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[18:00:27] *** Quits: NyaaTheKitten (~CalculusC@user/calculuscat) (Read error: Connection reset by peer)
[18:00:49] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 252 seconds)
[18:00:51] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[18:01:04] *** Quits: nomic (~nomic@185.217.117.73) (Quit: Leaving)
[18:01:11] *** Quits: xakan (~xakan@pnmx.zdx.fr) (Quit: The Lounge - https://thelounge.chat)
[18:02:13] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 268 seconds)
[18:02:44] *** Joins: computeiro (~Wender@191.55.44.59)
[18:03:04] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[18:03:16] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[18:03:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:03:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[18:04:42] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:04:47] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 265 seconds)
[18:05:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:05:16] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[18:05:42] *** Joins: AsenMx (~AsenMx@user/asenmx)
[18:07:09] *** Joins: rvalue (~rvalue@user/rvalue)
[18:07:16] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[18:11:54] <CrtxReavr> bjs, yes.
[18:12:31] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (Ping timeout: 265 seconds)
[18:12:40] <CrtxReavr> Anything >299
[18:12:47] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[18:13:01] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:13:21] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[18:13:25] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[18:13:44] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:14:15] *** Joins: Syzygy (~Syzygy@dynamic-2l4rd2b8rtb1q9u849-pd01.res.v6.highway.a1.net)
[18:15:37] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[18:15:54] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 265 seconds)
[18:15:57] *** Joins: Pandadub (~Barones@2804:7f3:8988:ba3c:7915:a37d:d42f:ec59)
[18:16:32] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:17:49] *** Quits: grooverman_ (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[18:18:19] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[18:18:23] *** Joins: deadmund (~ed@155.68.60.155)
[18:18:35] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:18:55] *** Joins: grooverman (~grooverma@177.102.117.95)
[18:19:18] <deadmund> Hello, is there any mechansim in python that is similar to "interfaces" in Java?  I want my users (developers) to write a function and I want to enforce the types and number of arguments for that function.
[18:19:53] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[18:20:59] *** Joins: grundrausch3n (~grundraus@p200300e9ef18ac00b48eb7646a779e9a.dip0.t-ipconnect.de)
[18:21:05] *** Joins: xakan (~xakan@pnmx.zdx.fr)
[18:21:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:21:29] <grym> deadmund: typing.Protocol, zope.interface offer some of this, but you won't be able to be as prescriptive as you'd perhaps wish, in general
[18:21:49] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[18:21:53] <deadmund> Are those built-in to python?  Or are they pip modules or something?
[18:22:02] <grym> typing.Protocol is stdlib; zope is not
[18:22:38] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[18:22:52] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:22:56] <bluss> but whatever type checks Protocol is not builtin
[18:23:09] <grym> bluss: not so, typing.runtime_checkable()
[18:23:25] <Yhg1s> for some application of them there's also ABCs (in the abc module)
[18:23:28] <grym> typically you do use mypy or whatever though
[18:24:01] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[18:24:11] <bluss> grym: well I just don't think that's the same thing
[18:24:13] <jinsun> runtime_checkable doesn't check types though, only if theattribute exists
[18:24:15] <grym> bluss: ok
[18:24:35] <grym> jinsun: yeah.  like i said above w/r/t prescriptive capability
[18:24:56] <grym> if you want to be really ironclad about this, you're likely to wind up wearing off some dental enamel
[18:26:02] *** Joins: guenhael (~Thunderbi@193.52.208.98)
[18:27:26] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[18:27:33] <Syzygy> I have an repo from github, with a provided dockerfile, but when building it there's a version incompatibility with the pip requirements file (even though specific versions were given). To the best of my knowledge the repository should be in a workable state and others don't seem to have such an issue. What causes something like this?
[18:28:18] <deadmund> Thank you!
[18:28:21] *** Quits: deadmund (~ed@155.68.60.155) (Quit: Konversation terminated!)
[18:28:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Remote host closed the connection)
[18:29:13] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:6c69:c214:cdb4:c477) (Remote host closed the connection)
[18:29:37] *** Quits: computeiro (~Wender@191.55.44.59) (Quit: Leaving)
[18:30:06] <grym> Syzygy: bitrot, lack of testing, a bug, ...
[18:30:14] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[18:31:35] *** Joins: dez (uid92154@user/dez)
[18:32:40] <SnoopJ> Probably there is information pertinent to the question in the error report issued
[18:34:37] *** Joins: node123 (~node1@user/node1)
[18:36:01] *** Joins: Axy (~Axy@user/axy)
[18:36:14] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[18:36:47] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[18:38:44] *** Quits: Syzygy (~Syzygy@dynamic-2l4rd2b8rtb1q9u849-pd01.res.v6.highway.a1.net) (Remote host closed the connection)
[18:39:19] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 252 seconds)
[18:39:22] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3937-0967-14b8-f5ba.res6.spectrum.com)
[18:39:40] *** Quits: NyaaTheKitten (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[18:40:10] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[18:40:24] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[18:41:26] *** Quits: node123 (~node1@user/node1) (Quit: Client closed)
[18:42:30] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:42:48] *** Joins: l4yer (~l4yer@195.181.170.210)
[18:42:49] <Payam23> is asyncio.gather same thing as using ThreadPoolExecutor?
[18:42:53] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[18:43:15] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:d1fb:d15b:4215:e584)
[18:43:18] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::5)
[18:43:21] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::5) (Remote host closed the connection)
[18:44:26] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[18:44:29] *** Quits: l4yer (~l4yer@195.181.170.210) (Client Quit)
[18:44:38] *** Joins: tempate (~alpha@user/tempate)
[18:45:01] <bjs> Payam23: ... no, a thread pool executor uses a thread pool
[18:45:25] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 240 seconds)
[18:45:25] <bjs> there are no threads here,  and no pooling either
[18:45:31] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[18:45:53] <Payam23> Why is there a ThreadPoolExecutor-0_0 in the callstack when using gather?
[18:45:56] *** Quits: tempate (~alpha@user/tempate) (Client Quit)
[18:46:05] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 256 seconds)
[18:46:15] <bjs> Payam23: well, are you gathering something that uses a thread pool?
[18:46:16] *** Joins: Axy (~Axy@user/axy)
[18:46:32] *** Joins: rendar (~rendar@user/rendar)
[18:46:44] <Payam23> no
[18:46:54] *** Joins: akk (~akk@75.161.146.115)
[18:46:57] <Payam23> No that I am aware of
[18:48:03] <bjs> Payam23: well then you're gonna have to show your code and "the callstack"
[18:48:27] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[18:50:13] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 265 seconds)
[18:52:36] *** Joins: nyah (~nyah@94.6.71.219)
[18:53:01] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[18:54:05] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 265 seconds)
[18:54:13] *** Joins: Axy (~Axy@user/axy)
[18:54:43] *** Quits: guenhael (~Thunderbi@193.52.208.98) (Ping timeout: 252 seconds)
[18:55:25] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[18:56:35] *** Quits: Pandadub (~Barones@2804:7f3:8988:ba3c:7915:a37d:d42f:ec59) (Remote host closed the connection)
[18:57:10] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[19:00:38] *** Joins: zebrag (~chris@user/zebrag)
[19:00:54] *** Joins: paravida (~myChateau@user/paravida)
[19:02:12] *** Joins: han-solo (~hanish@user/han-solo)
[19:03:03] *** Joins: gitly (~gitly@148.252.133.169)
[19:03:47] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[19:03:59] *** Joins: rany (~rany@user/rany)
[19:04:39] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:06:44] *** Joins: pigweed_ (~pigweed@97.119.229.83)
[19:07:30] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[19:08:04] *** Quits: Armen (~Armen@armen138.com) (Remote host closed the connection)
[19:08:05] *** Quits: Milos (~Milos@user/milos) (Quit: ZNC 1.8.2 - https://znc.in)
[19:08:18] *** Joins: Milos (~Milos@user/milos)
[19:08:31] *** Joins: Armen (~Armen@armen138.com)
[19:08:31] *** Joins: Deaygo1 (~Deaygo@let.deaygo.in)
[19:09:01] *** Quits: pigweed (~pigweed@97.119.229.83) (Ping timeout: 252 seconds)
[19:09:01] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Ping timeout: 252 seconds)
[19:09:09] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (Ping timeout: 250 seconds)
[19:09:09] *** Deaygo1 is now known as Deaygo
[19:09:41] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[19:10:10] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[19:10:24] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[19:10:45] *** Joins: grooverman (~grooverma@177.102.119.40)
[19:11:35] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[19:12:27] *** Quits: jay-m126_ (~jay-m@154.72.167.148) (Ping timeout: 265 seconds)
[19:12:27] *** Quits: jay-m126 (~jay-m@154.72.167.148) (Ping timeout: 265 seconds)
[19:13:49] *** Joins: ahub (~ahub@user/ahub)
[19:13:59] <ahub> Hey, anyone participating to the advent of code this year ?
[19:14:23] <Wooble> many, many people
[19:14:27] <han-solo> many
[19:15:04] <ahub> Cool ! I'm on day 6 and the part 2 is really interesting
[19:15:07] *** Joins: node1 (~hex@user/node1)
[19:15:52] <ahub> I hit my memory limit quite fast, and I'm looking for ideas. The only one I have so far is to write stuff on disk so I don't have to keep it in memory, but it's just going to be slower and my swap should be doing it anyway right ?
[19:16:26] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[19:16:32] <ahub> Sorry for the lack of context. The point is to run a simulation of exponential entities. They can be simplified as a simple list of int, but it grows *fast*
[19:16:39] *** Joins: yeukhon (~yeukhon@pool-100-2-65-81.nycmny.fios.verizon.net)
[19:16:40] *** Joins: aniketgm (~Aniket@49.36.109.129)
[19:17:35] *** Parts: aniketgm (~Aniket@49.36.109.129) ()
[19:17:37] <ahub> I'm trying to find a solution by myself (quite sure I could just google for someone's code)
[19:17:48] <ahub> But I don't have a clue where to start now.
[19:17:50] <yeukhon> Good day everyone. For python to search modules, Python does not do recursive search in a given search path (e.g. sys.path) right?
[19:17:54] *** Joins: aniketgm (~Aniket@49.36.109.129)
[19:18:48] *** Quits: node1 (~hex@user/node1) (Client Quit)
[19:19:26] <SnoopJ> yeukhon, it's not recursive, no. The search process is described in detail here: https://docs.python.org/3/reference/import.html#searching
[19:19:27] <Wooble> yeukhon: correct, only things in the top level of a directory on sys.path are considered
[19:19:42] *** Joins: ccallahan (~ccallahan@redhat/ccallahan)
[19:19:46] <yeukhon> Ah thanks. I was looking at sys doc the whole time,
[19:19:59] <yeukhon> thanks for pointing out the obvious part of the doc...
[19:20:19] *** Joins: rsx (~dummy@ppp-188-174-144-187.dynamic.mnet-online.de)
[19:20:38] <bjs> yeukhon: are you trying to do something with sys.path then?  we may be able to help solve the actual problem too
[19:20:57] *** Joins: monkey_ (~user@181.114.17.106)
[19:21:59] <yeukhon> bjs internally our build system has some old code doing custom path search lol. I am trying to incrementally fix it so it can actually source python3 virtualenv correctly. The build system is running 2.7 (yeah i know...) so sys.path is always the system 2.7 paths.
[19:22:07] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[19:22:19] *** Joins: node1 (~hex@user/node1)
[19:23:53] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[19:24:03] *** Joins: dohtem (uid524096@user/dohtem)
[19:24:44] <yeukhon> and i asked about the recursive is to make sure I understand where will be search haha. My raw idea was to eventually just source sys.path inside the build system's entry point, pass that list to its subsystem and then add any custom path as needed. The sourcing is gonna be rough/raw... subprocess  :|
[19:25:24] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:25:31] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:28:27] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 252 seconds)
[19:28:45] *** Quits: aniketgm (~Aniket@49.36.109.129) (Read error: Connection reset by peer)
[19:29:33] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[19:29:45] *** Joins: aniketgm (~Aniket@49.36.109.129)
[19:30:14] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[19:31:05] *** Joins: magla (~gelignite@55d47927.access.ecotel.net)
[19:31:23] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[19:34:09] *** Joins: Auron (~Auron956@user/auron)
[19:34:39] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:35:01] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:36:42] *** Joins: kee (~wizzwizz4@user/wizzwizz4)
[19:37:35] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[19:37:37] *** Joins: usr123 (~usr123@49.156.67.99)
[19:38:42] <kee> It's just reached my concious awareness: at least two Python things mention `OverflowError` in relation to very deeply-nested structures.
[19:38:48] <kee> For example. the json.dumps documentation:
[19:38:57] <usr123> Hey All, thanks everyone, I was able to resolve an issue pending for the past two weeks. This channel helped a lot. The fix was just to downgrade my python version from 3.9 to 3.8. Special thanks to bjs and nedbat (for pointing me to pyenv)
[19:39:22] <kee> > If ``check_circular`` is false, then the circular reference check for container types will be skipped and a circular reference will result in an ``OverflowError`` (or worse).
[19:39:56] *** Joins: Ergo^ (~ergo@91.238.59.144)
[19:40:04] <kee> Is this a common mistake (should be ``RecursionError``?), or is there some meaning of `OverflowError` I'm missing?
[19:40:56] <aniketgm> usr123: that's it. just a thank you.. You have to throw a party as well...
[19:42:39] <SnoopJ> kee, in that case, the thing that is overflowing (too large to represent) is the string representation being built by the encoder
[19:43:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[19:43:31] <kee> SnoopJ: Ah, so it's for things other than arithmetic overflow, then. So why's it an `ArithmeticError`?
[19:43:56] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[19:44:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:45:19] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:45:21] <jinsun> actually trying it gives RecursionError, and not OverflowError
[19:46:12] <SnoopJ> jinsun, you *can* get an OverflowError, though: https://github.com/python/cpython/blob/main/Modules/_json.c#L189 and also L255
[19:46:18] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-0427-18b2-e77d-ae39.res6.spectrum.com)
[19:47:02] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Remote host closed the connection)
[19:47:21] <SnoopJ> kee, I don't know why the inheritance is specifically that way, possibly because the len() of the result would be overflowed if it existed
[19:47:25] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[19:47:32] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[19:47:43] *** Quits: rsx (~dummy@ppp-188-174-144-187.dynamic.mnet-online.de) (Quit: rsx)
[19:48:03] <kee> I'm sure it would make sense if I were Dutch.
[19:49:00] <SnoopJ> you could I think make the argument the other way: a RecursionError is the thing you get instead of overflowing the call stack
[19:49:06] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[19:50:29] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[19:50:32] <Yhg1s> kee: ArithmeticError is a largely unused baseclass for other exceptions (FloatingPointError, OverflowError, ZeroDivisionError)
[19:50:41] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[19:51:04] *** Quits: lidless (lidless@tinside.irccloud.com) ()
[19:51:21] <SnoopJ> Yhg1s, I think their question is about why OverflowError is specifically a subtype of ArithmeticError, and my guess is "because there has to be something numeric under there wot is overflowing"
[19:51:47] * SnoopJ isn't sure what a non-numeric overflow would be like
[19:52:05] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[19:52:09] <Yhg1s> sure, that's what OverflowError is meant for. The json module's use of it seems weird to me, too, but unfortunately Python can't really enforce that exception classes are used correctly :)
[19:52:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[19:52:37] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[19:52:52] <SnoopJ> the use I linked makes sense enough and it sounds like you'd get a RecursionError before you hit that one most of the time anyway?
[19:52:58] *** Quits: usr123 (~usr123@49.156.67.99) (Quit: Client closed)
[19:53:01] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 240 seconds)
[19:53:28] *** Joins: AsenMx (~AsenMx@user/asenmx)
[19:53:31] <kee> Why not just have a RecursionError in both cases? The distinction seems an implementation detail.
[19:53:37] <jinsun> yeah the docs should mention RecursionError too I think, seems more likely to get that
[19:53:46] <SnoopJ> kee, because it doesn't have to be recursive to overflow sys.maxsize
[19:54:00] <kee> Fair point.
[19:54:06] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[19:54:08] <kee> Though, that just won't happen any more.
[19:54:14] <SnoopJ> but yes I agree the docs are not being particularly clear about this
[19:54:17] <SnoopJ> kee, what do you mean?
[19:54:27] <kee> sys.maxsize is much bigger than anyone's RAM, these days.
[19:54:47] <kee> Even back in the day, it was rare to have more RAM than sys.maxsize; the kernel had to do hackish things to get that to work.
[19:54:49] <SnoopJ> kee, that isn't true on every platform one might run CPython on
[19:55:04] <kee> Wouldn't a MemoryError be more appropriate?
[19:55:21] <kee> I can't think of a platform where a single process can have access to more than sys.maxsize memory.
[19:55:59] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:56:05] <Yhg1s> kee: well, back when sys.maxsize was based on a C long, any LLP64 system.
[19:56:13] <Yhg1s> so it's not exactly impossible.
[19:56:25] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:56:37] <SnoopJ> yea I think this amounts to trying to reason about PY_SSIZE_T_MAX on all possible platforms
[19:56:40] <Yhg1s> But really, it's more likely that the exact error you get depends on what limits you run into. It takes a lot of effort to handle all those edge cases, so it's easier to just let them propagate.
[19:57:22] <kee> According to Wikipedia, LLP64 has (had?) size_t being 64 bits.
[19:57:37] <Yhg1s> yes, size_t. not long.
[19:58:29] <kee> Are you thinking of sys.maxint, or did Python really work that way?
[19:58:41] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:58:57] *** Joins: vladoski (~vladoski@host-87-4-98-32.retail.telecomitalia.it)
[19:59:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:59:37] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[19:59:37] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 252 seconds)
[19:59:50] <Yhg1s> Python used to use longs for things like container sizes, and longs for the implementation of 'int'. A lot of things still take longs instead of Py_ssize_t's, really.
[19:59:58] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[20:00:19] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:00:24] <kee> Oh, before PEP 353.
[20:00:25] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:00:45] *** Quits: Pandadub (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Client Quit)
[20:00:52] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[20:01:06] <kee> It literally says that in the rationale, and I was using PEP 353 as justification for why it didn't work that way. :-)
[20:01:25] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[20:01:37] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[20:01:42] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:01:45] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Connection closed)
[20:02:19] *** Joins: kevgao (~kevgao@2601:281:8780:4510:adf9:6718:c66a:aa00)
[20:03:01] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 240 seconds)
[20:03:07] *** Joins: Axy (~Axy@user/axy)
[20:03:41] <SnoopJ> even more confusingly: those two OverflowErrors are surprisingly modern: https://github.com/python/cpython/commit/7b78d4364da086baf77202e6e9f6839128a366ff
[20:04:29] *** Joins: arinov (~arinov@31.142.57.149)
[20:04:29] *** Quits: paravida (~myChateau@user/paravida) (Remote host closed the connection)
[20:04:31] *** Joins: Gerula (~Gerula@user/gerula)
[20:04:54] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:d0b7:4ddf:ecc9:b468) (Quit: Client closed)
[20:05:08] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[20:05:29] <SnoopJ> the JSON docs should probably just say RecursionError since it's talking about recursion explicitly
[20:05:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:05:45] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[20:06:02] *** Joins: mjack (~mjack@5634d05c.rev.stofanet.dk)
[20:06:08] *** Joins: goepsilongo (~goepsilon@201.143.32.6.ded.telnor.net)
[20:06:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[20:06:37] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[20:07:00] *** Quits: mjack (~mjack@5634d05c.rev.stofanet.dk) (Quit: mjack)
[20:07:06] <SnoopJ> and testing for it, too: https://github.com/python/cpython/blob/main/Lib/test/test_json/test_recursion.py#L95-L96
[20:07:21] *** Joins: mjack (~mjack@5634d05c.rev.stofanet.dk)
[20:07:23] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[20:08:34] *** Lord_of_Life_ is now known as Lord_of_Life
[20:08:51] *** Joins: Naan` (~Naan@user/naan)
[20:08:56] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[20:10:59] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 252 seconds)
[20:12:52] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 265 seconds)
[20:12:57] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[20:13:16] *** Joins: jayray (~jayray@user/jayray)
[20:13:57] <jinsun> and looks like that OverflowError thing was from day 1 in simplejson docs https://github.com/simplejson/simplejson/blob/5aa76448ef5a7a4cb53540c58c5cf42a04e0a4b2/docs/index.html#L182
[20:14:05] <SnoopJ> yep
[20:14:14] <jayray> hello, complete amateur here. trying to do a one liner with socket and set timeout with no luck using this as an example https://gist.github.com/mperlet/4ccd8a646b5d89aa77723429b595fb36
[20:14:38] <jayray> tried appending socket.settimeout(2) in different parts
[20:14:39] *** Quits: arinov (~arinov@31.142.57.149) (Ping timeout: 252 seconds)
[20:14:48] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[20:15:05] *** Joins: jjasghar (~quassel@idlerpg/player/jjasghar)
[20:16:00] <bjs> jayray: why a one-liner?  but anyway, you didn't say what the problem you were having is
[20:16:01] <jayray> *sorry didnt see the pastbin in the topic https://bpa.st/IJPQ
[20:16:03] *** Joins: fikran (~fikran@user/fikran)
[20:16:31] <jayray> bjs: problem is that if there is no listener on what I am trying to check to see if open it never exits
[20:16:49] <jayray> so I need a timeout in there to close if no answer after X seconds
[20:16:52] <bjs> jayray: listen and connect aren't the same thing
[20:17:02] *** Quits: davor (~davor@user/davor) (Ping timeout: 252 seconds)
[20:17:02] <jayray> yes
[20:17:17] <bjs> jayray: which are you trying to do?
[20:17:19] <jayray> I am checking to see if a port is open with that one liner
[20:17:25] <jayray> on another host
[20:17:43] *** Joins: davor (~davor@user/davor)
[20:18:13] <phy1729> Can I use  global  as an attribute name for a pydantic BaseModel?
[20:18:41] <jayray> with that one liner, if the port is open it immediately returns a True and closes, of its not open it just sits there
[20:19:12] <bjs> phy1729: `global` is a keyword and you cannot use it as a variable or attribute name on any class
[20:19:22] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2cae6b318fffe838f33.dip0.t-ipconnect.de) (Quit: ubert)
[20:19:22] *** ub is now known as ubert
[20:19:30] <SnoopJ> phy1729, not directly, but you can make one called global_ (or whatever you like) and define a "global" alias for it: `global_ : T = Field(alias="global")`
[20:19:42] <phy1729> Oh, that could work
[20:19:44] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba2ca8fd37040f9dc92fe.dip0.t-ipconnect.de)
[20:19:59] *** Quits: node1 (~hex@user/node1) (Remote host closed the connection)
[20:20:06] *** Joins: jay-m126 (~jay-m@129.0.76.211)
[20:20:11] *** Joins: jay-m126_ (~jay-m@129.0.76.211)
[20:20:19] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[20:20:50] <bjs> jayray: okay, but what is the problem you have? you already said the answer: .settimeout
[20:21:02] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:21:14] <jayray> if the port is closed it never times out
[20:21:20] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:21:29] <bjs> well it will if you set a timeout presumably?
[20:21:29] *** Joins: legola (~legola@46.235.101.65)
[20:21:38] <jayray> isnt that what settimeout does?
[20:22:05] <bjs> jayray: your paste didn't call settimeout,  did I miss it?
[20:22:25] <jayray> thats what I need help with.. how do I settimeout in a one liner
[20:22:39] <bjs> jayray: can you do it in two lines?
[20:23:02] <jayray> no, executing this through bash via ssh
[20:23:29] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:23:37] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:23:38] <bjs> jayray: I'd make a variable `s = socket.socket(...)`
[20:23:42] <bjs> then you can s.settime and s.connect_ex
[20:23:51] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:24:02] <jayray> I'd like that, but I have to do it in one line
[20:24:15] <bjs> jayray: I'm confused, why can't you do it on one line?
[20:24:21] <bjs> (also -c accepts any number of lines you want ...)
[20:24:28] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[20:25:08] <SnoopJ> kee, jinsun https://bugs.python.org/issue46001
[20:25:27] <jayray> because there is a loop in a bash script that runs ssh that sends the python one liner to a remote host to check for an open port elsewhere
[20:25:47] <bjs> jayray: I don't know why you keep saying that.  You already used ; to put multiple things on one line so just do that
[20:25:54] <jayray> ig you can ssh w \n and do multiple lines?
[20:26:08] <bjs> (or like I said, -c doesn't require a single line you can pass a string with newlines to it and it'll parse just like python)
[20:26:09] <jayray> :| ic
[20:26:15] <bjs> jayray: why :|  what's the issue?
[20:26:17] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[20:26:18] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[20:26:24] *** Quits: legola (~legola@46.235.101.65) (Ping timeout: 265 seconds)
[20:26:25] <bjs> python -c "import socket; s = socket.socket(...); s.settimeout(...); ...`
[20:26:34] <jayray> got it
[20:26:52] <jayray> I understand now
[20:26:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:27:04] <jayray> Thank you bjs
[20:27:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:28:20] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[20:28:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:28:37] *** Quits: aniketgm (~Aniket@49.36.109.129) (Read error: No route to host)
[20:29:03] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[20:29:19] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[20:29:58] *** Joins: emf_ (~emf@2620:10d:c090:400::5:6c88)
[20:30:40] *** Joins: SteveR53 (~SteveR@103.215.168.1)
[20:30:55] <SteveR53> hi there, what is the use of @property
[20:31:26] <bjs> jayray: but yeah, like I said before the easiest way might just be to send a multi-line program to -c,  most shells like you just type multi-line things into the shell or if you're in a dedicated file then you can of course make multi-line strings
[20:31:27] *** Joins: aniketgm (~Aniket@49.36.109.129)
[20:31:36] <Yhg1s> SteveR53: it's used to define properties, which are things that look like attributes but actually call a method or function when accessed.
[20:31:42] <bjs> SteveR53: it makes it so that when you lookup the attribute, it'll call the method
[20:31:43] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[20:32:03] <SteveR53> could you give me an example to understand Yhg1s bjs
[20:32:26] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:32:27] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[20:33:06] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:33:18] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Ping timeout: 268 seconds)
[20:33:22] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[20:33:23] <Yhg1s> SteveR53: https://docs.python.org/3/library/functions.html#property
[20:34:21] <bjs> SteveR53: here's a little trivial example showing one way you might actually use them https://bpa.st/GX4Q  to compute an attribute dynamically based on some other data
[20:34:55] <SteveR> bjs without @property how the code snippet you shared would look like
[20:34:58] <jayray> bjs: yea I'll probably use something else that takes less lines of info.. you'd think you could just pass that inline without having to define all the stuff.. looks more like perl doing it that way
[20:34:59] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[20:35:09] <bjs> SteveR: without @property let's say you can't do it, and you'd need to write methods.
[20:35:09] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 268 seconds)
[20:35:18] <bjs> Or manually set the attributes
[20:35:33] *** Quits: ideopathic (~ideopathi@2600:1702:8b0:a500:c1db:e95b:ae0d:a6ef) (Ping timeout: 252 seconds)
[20:35:42] *** Quits: grundrausch3n (~grundraus@p200300e9ef18ac00b48eb7646a779e9a.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:36:18] <bjs> SteveR: you can try yourself, and play around and see what happens
[20:36:39] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[20:36:44] *** dcaro is now known as dcaro_away
[20:36:46] <bjs> jayray: I'm still not sure what you mean, this settimeout and connect_ex call is still one line
[20:37:13] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[20:37:32] <bjs> but it's kind of silly to try shoehorn everything into one line when -c happily accepts multi-line programs just from the command line (or well, from anywhere)
[20:37:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:37:34] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:38:29] <bjs> e.g. my terminal lets me hit Ctrl-Enter and just type newlines directly into the strings
[20:38:49] *** Joins: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net)
[20:39:00] *** Quits: vladoski (~vladoski@host-87-4-98-32.retail.telecomitalia.it) (Quit: Textual IRC Client: www.textualapp.com)
[20:39:41] <Yhg1s> (others let you type control-V followed by enter, or just hit enter within quotes.)
[20:39:46] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:3ddf:77ed:0:281)
[20:40:35] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[20:42:15] *** Joins: dpk (~dpk@xn--issum-vva.nonceword.org)
[20:43:54] *** Joins: fxrs (~fxrs@192.227.212.130)
[20:44:14] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:44:34] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[20:48:06] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[20:48:31] <BinarySavior> my f-string keeps outputting 150.0 instead of 150, how can I tell it to interpret the number as an int instead of decimal
[20:49:07] <BinarySavior> the data is coming from a pd.Dataframe and I even did df.col = df.col.astype(int)
[20:49:49] <jinsun> SnoopJ: that other bpo you linked is some other issue that github decided to link to, this is the one that added OverflowError https://bugs.python.org/issue24522
[20:50:37] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-68-203.poda.cz) (Ping timeout: 240 seconds)
[20:50:40] *** Joins: palasso (~palasso@user/palasso)
[20:51:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:52:16] <kee> BinarySavior: Can you just do int(whatever) inside the f-string?
[20:52:37] <kee> f"hello {int(150.0)}" → 'hello 150'
[20:52:39] <bjs> BinarySavior: what is the fstring,  also I can't see why there'd be a .0 if it really had type int ?
[20:52:52] <kee> Note: `int` rounds down.
[20:53:15] <BinarySavior> cells[0].text = f"{int(row['FG #'])}"
[20:53:25] <BinarySavior> for some reason cells[0].text is getting "150.0"
[20:53:35] <bjs> BinarySavior: even with the int() ?
[20:53:40] <BinarySavior> yea
[20:53:59] <BinarySavior> maybe because of pd.Series?
[20:54:22] <bjs> BinarySavior: maybe you can share some more code?
[20:54:23] <jinsun> cells is pd.Series?
[20:54:34] <bjs> I feel like one bit of information at a time is going to make this very slow otherwise :P
[20:54:45] <BinarySavior> jinsun row is a pd.Series
[20:54:59] <BinarySavior> wait, no row is a row in pd.Dataframe.iterrows()
[20:55:41] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[20:55:56] <BinarySavior> yea i'd like to bjs, my employer blocks all common pasting sites
[20:56:08] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[20:56:13] *** Joins: arinov (~arinov@213.194.126.155)
[20:56:28] <jinsun> what is cells then?
[20:57:33] *** Quits: emf_ (~emf@2620:10d:c090:400::5:6c88) (Ping timeout: 252 seconds)
[20:57:35] <BinarySavior> cells is a table.rows[n].cells from python-docx
[20:57:43] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[20:59:15] <BinarySavior> oh wait, i might have made an incorrect assumption
[20:59:37] <BinarySavior> that line of code with the int() occurs multiple times and I only updated one of them with int()
[21:00:09] *** Joins: emf (~emf@2620:10d:c090:400::5:6c88)
[21:00:29] <kee> BinarySavior: Keep in mind, if it's 149.99999 then you'll end up with 149, not 150. Is that the expected behaviour?
[21:00:47] <BinarySavior> yea specifying int() worked
[21:01:34] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:01:36] <BinarySavior> kee, that is correct, in fact the entire series actually has no decimals, I dont know why pandas decided to make it a float column
[21:02:30] <kee> BinarySavior: It sounds like you're fixing the wrong thing. If the integers get massive, you'll lose precision.
[21:03:03] *** Joins: maxpowa (~maxpowa@brought.to.you.by.maxpowa.us)
[21:03:26] <BinarySavior> there's no math that uses row['FG'] it's just an index column
[21:03:35] <jinsun> if there are blanks then pandas will fill then with nan, that probably makes it a float column
[21:03:37] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 265 seconds)
[21:04:25] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:05:40] *** Joins: l4yer (~l4yer@90.242.245.123)
[21:06:30] <jinsun> I mean if you were reading the data from some source that could have blanks like csv
[21:06:56] <BinarySavior> jinsun i found the location where it is being converted from int32 to float64
[21:07:15] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:07:39] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:08:12] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:08:13] <BinarySavior> i do a groupby(), then i modify values in another column (not FG #) for each group, then i use df.update(grp)
[21:08:27] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 268 seconds)
[21:08:37] <BinarySavior> that df.update(grp) line is changing df['FG #'] to float64 for some reason
[21:08:39] *** Quits: goepsilongo (~goepsilon@201.143.32.6.ded.telnor.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:08:49] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:09:41] *** Quits: tobybl (~tobybl@213.31.133.113) (Remote host closed the connection)
[21:10:01] *** Quits: l4yer (~l4yer@90.242.245.123) (Ping timeout: 256 seconds)
[21:11:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:11:31] <jinsun> maybe convert that column to string type if you don't wanna do math on it
[21:11:52] <jinsun> before doing any groupby or update
[21:11:56] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:12:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:14:23] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:14:46] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:14:55] *** Joins: Pedee (~Pedee@user/Pedee)
[21:15:03] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[21:16:22] *** Quits: aniketgm (~Aniket@49.36.109.129) (Quit: leaving)
[21:16:41] <SnoopJ> jinsun, good catch, I guess the author mixed up the #NNN ref and bpo- markers
[21:17:01] <aphysically> jinsun: by the way, this is a pyright bug right? https://bpa.st/34YQ
[21:17:18] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:17:26] <aphysically> or is it a typeshed bug (..?)
[21:17:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:17:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:19:29] <jinsun> aphysically: it is the same one from earlier today right? or something else?
[21:19:37] *** Quits: mjack (~mjack@5634d05c.rev.stofanet.dk) (Quit: mjack)
[21:21:14] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[21:22:07] <aphysically> did you respond to that one? I forgot? This is different from the one we discussed before
[21:22:14] <aphysically> it complains about literals for me
[21:22:32] <jinsun> that one was again due to pyright not inferring too much and defaulting to unknown, defaultdict[int, int] instead of defaultdict satisfied it
[21:22:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:22:52] *** Joins: mjack (~mjack@5634d05c.rev.stofanet.dk)
[21:22:53] <jinsun> I think there was a huge netsplit just when I responded so maybe you didn't see
[21:23:08] <aphysically> jinsun: https://i.imgur.com/zmsvgBV.png
[21:23:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:23:35] <aphysically> oh I simplified it to just a counter but it's the samet hing, and yeah maybe netsplit meant I didn't see
[21:23:36] *** Joins: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03)
[21:23:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:23:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:24:17] <aphysically> how would we even fix this?
[21:24:47] <aphysically> I'm tempted to report this one to pyright since it's not weird code this time
[21:24:48] <jinsun> here Counter[int] on line 3 fixes it
[21:25:09] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[21:25:16] <aphysically> ah good call
[21:25:19] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[21:26:15] <jinsun> maybe a bug, or maybe just pyright being too careful in not inferring any strict type but ending up defaulting to Unknown
[21:26:34] <aphysically> I think it should still be a bug, it shouldn't error outside of strict mode because types aren't annotated
[21:27:05] <aphysically> cause it errors without strict mode here too
[21:27:15] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:27:16] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:28:06] <jinsun> yeah probably
[21:28:15] <jinsun> it is something in the for loops that causes it
[21:28:29] <jinsun> if you remove the for loop and dedent then it doesn't complain
[21:28:43] <aphysically> that's even more confusing
[21:29:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:29:38] *** Joins: superboot (~agentgasm@user/superboot)
[21:29:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:29:52] <jinsun> yeah just for loops causing it makes it more likely to be a bug
[21:30:13] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[21:30:40] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:30:45] <jinsun> that other weird code with the bingo boards was also "fixed" if I removed the for loop
[21:31:43] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46)
[21:31:53] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[21:32:00] *** Joins: weedmic_ (~weedmic@89-138-226-98.bb.netvision.net.il)
[21:32:09] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46) (Remote host closed the connection)
[21:32:28] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[21:32:36] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46)
[21:34:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:35:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:35:26] *** Joins: paravida (~myChateau@user/paravida)
[21:35:49] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[21:37:24] <aphysically> jinsun: https://github.com/microsoft/pyright/issues/2664
[21:37:43] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:6985:b5d4:8920:4072)
[21:37:45] *** Parts: Reffter (~Reffter@2001:818:dea5:2b00:6985:b5d4:8920:4072) ()
[21:38:17] <kee> Is there something like re.findall, but for adjacent matches?
[21:39:35] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:6985:b5d4:8920:4072)
[21:39:55] *** Joins: Harlin (~DonQixote@75-163-180-14.clsp.qwest.net)
[21:41:54] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[21:41:57] <Wooble> ahub: still stuck?
[21:45:02] <jinsun> aphysically: cool, let's see, I'll be surprised if Eric manages to explain this as designed
[21:45:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:45:41] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:46:13] <aphysically> jinsun: derp on my part https://github.com/microsoft/pyright/issues/2664
[21:46:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:47:16] *** Joins: novapy (~novapy@c-68-62-193-246.hsd1.fl.comcast.net)
[21:47:41] <jinsun> he could have guessed really, but fine
[21:48:47] <aphysically> it probably just slipped his mind that it's in stdlib. To be fair a lot of stdlib classes aren't capitalized
[21:49:04] <aphysically> happens to all of us
[21:49:13] <novapy> Is there a good alternative to curses?
[21:49:45] <Julian> novapy: urwid, prompt-toolkit, rich
[21:49:46] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:49:49] <Julian> depending on what precisely you want to do
[21:49:52] *** Joins: Roey (~Roey@user/Roey)
[21:50:08] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:51:02] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:51:34] *** Quits: yeukhon (~yeukhon@pool-100-2-65-81.nycmny.fios.verizon.net) (Quit: Client closed)
[21:51:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:52:00] <novapy> Julian: I currently am using rich, but it doesn't feel like I want it to, I want to get input without pressing enter, an I want to draw the window without using os to clear the screen.
[21:52:06] *** Quits: weedmic_ (~weedmic@89-138-226-98.bb.netvision.net.il) (Quit: Konversation terminated!)
[21:52:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:53:45] <novapy> I looked at curses, but I couldn't get the window to stay open, it exited immediately
[21:53:51] <aphysically> jinsun: " added bug and removed question labels"
[21:54:14] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:54:15] <aphysically> I'll wait until the fix for this happens to see if it fixes the problem from the other day
[21:54:27] <jinsun> ah great
[21:54:43] *** Quits: EGH (~EGH@185.25.195.104) (Quit: ZNC - https://znc.in)
[21:55:02] *** Joins: beenao (~beenao@user/beenao)
[21:56:17] *** Quits: grooverman (~grooverma@177.102.119.40) (Read error: Connection reset by peer)
[21:57:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:57:33] *** Joins: grooverman (~grooverma@177.102.117.95)
[21:57:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:58:07] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[21:58:12] *** Joins: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani)
[21:59:48] *** Joins: EGH (~EGH@185.25.195.104)
[21:59:53] *** Quits: Pedee (~Pedee@user/Pedee) (Quit: WeeChat 3.3)
[22:01:37] *** Quits: SteveR53 (~SteveR@103.215.168.1) (Quit: Client closed)
[22:01:37] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[22:02:49] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[22:03:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:03:38] *** Joins: ExeciN (~ExeciN@user/nicexe)
[22:03:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:04:21] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 256 seconds)
[22:06:03] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[22:06:12] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[22:06:56] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 265 seconds)
[22:07:48] *** Quits: Reffter (~Reffter@2001:818:dea5:2b00:6985:b5d4:8920:4072) (Quit: Client closed)
[22:07:53] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:08:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[22:08:18] *** Joins: l4yer (~l4yer@89-238-176-5.pool.ovpn.com)
[22:08:37] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-58b0-3c44-7c29-0f48.res6.spectrum.com)
[22:10:02] *** Joins: grundrausch3n (~grundraus@p200300e9ef18ac00adafa0d8cbcf8ba8.dip0.t-ipconnect.de)
[22:10:15] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Quit: Leaving)
[22:11:45] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:12:21] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-0427-18b2-e77d-ae39.res6.spectrum.com) (Ping timeout: 252 seconds)
[22:13:17] <kee> Is there something like re.findall, but for adjacent matches?
[22:13:25] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[22:13:27] <LuxuryMode> I'm using pip-tools to manage dependencies. I have a `requirements.in` file which specifies, among other things, `Django` without any version constraints. Yet, when I run `pip-compile` it outputs a requirements txt file with Django pinned to `django==3.1.7` Is that because I have other dependencies which implicitly limit the greatest Django version to 3.1.7?
[22:13:29] <kee> Oops, double-post.
[22:13:49] *** Quits: sazawal (~sazawal@223.190.92.152) (Ping timeout: 252 seconds)
[22:13:55] <LuxuryMode> haha, you're not supposed to know that ;)
[22:14:01] <SnoopJ> kee, I'm not entirely sure I know what you want to do for "adjacent matches," can you give us an example perhaps?
[22:14:10] <kee> LuxuryMode: I think that just outputs the ones you've currently got installed.
[22:14:15] <LuxuryMode> Is it wrong that I assume the Discord world knows nothing of IRC and vice versa?
[22:14:26] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 268 seconds)
[22:14:40] <LuxuryMode> kee: oh really? So I'm misunderstanding something basic about how pip-compile works?
[22:14:40] <SnoopJ> it certainly isn't descriptive of all users of either service
[22:14:42] <Wooble> LuxuryMode: yes but also they meant their own double post.
[22:14:49] <kee> SnoopJ: Something like re.fullmatch("(pattern)*").
[22:14:49] <LuxuryMode> oh haha my bad
[22:15:03] <LuxuryMode> The docs say "pip-compile generates a requirements.txt file using the latest versions that fulfil the dependencies of setup.py or requirements.in."
[22:15:06] <SnoopJ> kee, you want to only match adjacent repeats, or...?
[22:15:09] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[22:15:46] <kee> SnoopJ: I have a string made up of sequences of .foo and [bar], e.g. .foo[bar][bar].foo
[22:15:49] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 263 seconds)
[22:16:02] <kee> .findall would match .foo hello world [bar], which I don't want.
[22:16:04] <Wooble> LuxuryMode: right, it pins them to the latest versions available at the time you compile.
[22:16:17] <SnoopJ> kee, with what pattern?
[22:16:48] <LuxuryMode> Where "available" means what exactly, Wooble? Django 3.2 is available, no?
[22:17:03] <kee> SnoopJ: (\.[A-Za-z]|\[[\d\])
[22:17:05] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[22:17:13] <kee> Ignoring the [[ typo.
[22:17:22] <kee> If I just repeated that, I'd only get one of the matches.
[22:17:59] *** mozgalom is now known as bomb-on
[22:18:05] <Wooble> LuxuryMode: err... yes. I didn't check the latest release, I thought your question was about it pinning a specific version at all, not which one it picked.
[22:18:20] <aphysically> jinsun: have you seen my final solution to that advent of code problem? https://bpa.st/TWVA
[22:18:31] <SnoopJ> kee, the actual data are indexed with integers?
[22:18:48] <LuxuryMode> Yeah, I'm asking why it picked 3.1.7. I'm wondering if it's because of constraints imposed by other dependencies?
[22:19:15] *** Quits: NyaaTheKitten (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[22:19:15] <Wooble> LuxuryMode: I'd assume so.
[22:19:21] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:19:39] <kee> SnoopJ: It's actually a bit complicated; either integers or the string "{i}", with the potential for more later. Why?
[22:19:51] *** Quits: alius (~adrien@2a01:e0a:13c:cd90:1095:e33:263b:86b6) (Quit: Konversation terminated!)
[22:19:52] <LuxuryMode> Right. Ok, I'll have to sleuth then because Django 3.1.7 is no good. Pretty close to end of extended support too.
[22:20:00] <LuxuryMode> (I _think_)
[22:20:12] *** Quits: bomb-on (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[22:20:20] <SnoopJ> kee, because the pattern you gave doesn't match the sample you gave, and I want to be sure I understood which parts were euphemism
[22:21:00] <Wooble> LuxuryMode: seems an odd limit for a dep, though; limiting to 3.1.* might make sense, but an out of date bugfix release? :/
[22:21:23] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[22:21:31] <LuxuryMode> Agreed, strange indeed
[22:21:51] <jinsun> aphysically: too long didn't read (the question :D), so it is a bunch of precomputed results?
[22:22:04] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[22:22:08] <Wooble> LuxuryMode: pipdeptree might help track down the culprit faster
[22:22:23] <aphysically> yes this is hardcoding the solution and simply looking it up
[22:22:33] <LuxuryMode> ah nice, didn't know about pipdeptree. thanks Wooble!
[22:23:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:23:27] <SnoopJ> kee, I think you might want `re.finditer(patt, s)` here, since findall() returns strings instead of Match objects https://bpa.st/MOOQ
[22:23:38] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[22:23:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:23:50] <kee> SnoopJ: Yeah, I do. But that still has the gaps problem.
[22:23:57] <kee> Unless I use a lookbehind, which I might end up doing.
[22:23:58] *** Joins: sayan (~sayan@122.161.65.178)
[22:23:59] <LuxuryMode> hmm, the only constraint for Django I am seeing is `required: >=2.2`
[22:24:15] <Wooble> aphysically: I have no idea which problem that's even solving but, uh... nice? :)
[22:24:25] <Julian> novapy: urwid can do what you're asking about nonblocking input, as well as full-screen TUIs
[22:24:26] <SnoopJ> kee, if the gap there is a problem, the pattern isn't expressing what you want
[22:24:28] *** sayan is now known as snbk97
[22:24:36] <Julian> novapy: (so yeah, try that then.)
[22:24:39] <SnoopJ> i.e. it's not an API problem
[22:24:44] <aphysically> Wooble: https://adventofcode.com/2021/day/6
[22:24:59] <kee> The gap is fine. I just don't want arbitrary text in it.
[22:25:09] <LuxuryMode> Perhaps I'm reading this wrong. Would be much appreciated if you could take a glance at it if/when you have a moment. https://bpa.st/4RVA
[22:25:13] <LuxuryMode> Wooble: ^
[22:25:15] <novapy> Julian: Thanks, I'll try that
[22:25:24] *** Joins: fikran (~fikran@user/fikran)
[22:25:38] <SnoopJ> kee, are you trying to find the segments that match the pattern, or are you trying to exclude strings that match [some other pattern related to the gap] ?
[22:25:43] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[22:25:49] *** snbk97 is now known as snbk1897
[22:26:09] *** Quits: jay-m126_ (~jay-m@129.0.76.211) (Ping timeout: 268 seconds)
[22:26:09] *** Quits: jay-m126 (~jay-m@129.0.76.211) (Ping timeout: 268 seconds)
[22:26:16] *** snbk1897 is now known as snbk97
[22:26:35] <kee> SnoopJ: I'm trying to tokenise it.
[22:27:23] <Wooble> LuxuryMode: I don't think you're reading it wrong and have no idea how you're getting 3.1.7 out of that :/  does pip-compile --upgrade fix it, maybe?
[22:27:26] *** Joins: jay-m126 (~jay-m@154.72.150.229)
[22:27:31] <LuxuryMode> let me see
[22:27:31] *** Joins: jay-m126_ (~jay-m@154.72.150.229)
[22:27:40] <SnoopJ> kee, I don't know which of those two options (or neither?) that means. Although if you're writing a parser, parsimonious is a nice parser generator that speaks EBNF
[22:28:14] <SnoopJ> tokenizing sounds more like you want to match the entire string (and require that it be a string of known tokens)
[22:28:21] <kee> Yeah, I do.
[22:28:28] <kee> Just (what I wrote)* would match.
[22:28:33] <kee> But then I only have access to the last group.
[22:29:22] <LuxuryMode> Wooble: This project is a bit of a mess lol. It contains many old and unmaintained dependencies, such as `djangorestframework-jwt` which hasn't been maintained for 2 years or so now (replaced by drf-jwt package)
[22:29:27] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:29:55] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[22:31:28] *** Quits: novapy (~novapy@c-68-62-193-246.hsd1.fl.comcast.net) (Quit: leaving)
[22:31:29] <kee> SnoopJ: The solution's at the bottom of the documentation… Just add |. at the end of the regex, then check for “none of the groups matched”.
[22:31:46] <Wooble> aphysically: I was hoping it was one for some previous year because I just did that one and have no idea what's going on in your solution at all :)
[22:32:11] *** Joins: novapy (~novapy@c-68-62-193-246.hsd1.fl.comcast.net)
[22:32:48] <SnoopJ> kee, I don't see '|.' anywhere in re.html, but sounds like you found your answer
[22:33:14] <kee> The line is ('MISMATCH', r'.'),
[22:33:48] <jinsun> SnoopJ: it does '|'.join a bunch of things and . is the last one
[22:34:00] <SnoopJ> jinsun, I understand what it does, I just didn't know which part of the documentation they were referring to
[22:34:10] <SnoopJ> kee, yes, that's about what I had in mind when I suggested finditer()
[22:34:44] <SnoopJ> with the pattern modified to include the fall-through case that probably produces an error
[22:35:24] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[22:35:31] <meejah> tahoe-lafs 1.17.0 is released https://lists.tahoe-lafs.org/pipermail/tahoe-dev/2021-December/010037.html
[22:35:56] *** Joins: ffledgling (~textual@c-73-71-1-1.hsd1.ca.comcast.net)
[22:36:15] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:36:24] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:36:36] *** Quits: ffledgling (~textual@c-73-71-1-1.hsd1.ca.comcast.net) (Client Quit)
[22:36:44] *** Joins: jinsun (~quassel@user/jinsun)
[22:37:17] *** Joins: ffledgling (~textual@c-73-71-1-1.hsd1.ca.comcast.net)
[22:37:20] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Read error: Connection reset by peer)
[22:37:32] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[22:37:57] <Wooble> aphysically: oh. what I mostly didn't get was that it was solving parts 1+2 in a single value, and thought that 1j was doing something else. :)
[22:38:08] *** Joins: qlixed (~qlixed@181.44.129.13)
[22:38:41] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[22:38:50] <aphysically> nope, nothing special about that just didn't write it on separate lines
[22:38:55] <aphysically> :p
[22:39:20] <Wooble> and here I thought I forgot something really fundamental that would have made those complex numbers drop out and give an int somehow :)
[22:39:57] *** Joins: arinov (~arinov@31.142.57.149)
[22:40:23] *** Quits: ffledgling (~textual@c-73-71-1-1.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[22:40:35] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 252 seconds)
[22:40:41] *** Joins: ffledgling (~textual@c-73-71-1-1.hsd1.ca.comcast.net)
[22:41:52] *** Joins: slav0nic (slav0nic@python.su)
[22:45:01] *** Quits: ffledgling (~textual@c-73-71-1-1.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[22:45:07] *** Quits: Haxxa (~Haxxa@202-130-210-132.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:24] *** Joins: jay-m1261 (~jay-m@154.72.150.229)
[22:45:49] *** Quits: jay-m126_ (~jay-m@154.72.150.229) (Ping timeout: 240 seconds)
[22:45:49] *** Quits: jay-m126 (~jay-m@154.72.150.229) (Ping timeout: 240 seconds)
[22:46:17] *** Quits: dvx (~dvx@5.181.92.64) (Remote host closed the connection)
[22:46:18] *** Joins: jay-m126 (~jay-m@154.72.150.229)
[22:46:38] *** Joins: jay-m126_ (~jay-m@154.72.150.229)
[22:47:10] *** Joins: Haxxa (~Haxxa@202-130-210-132.ip4.superloop.com)
[22:47:21] *** Joins: jfcaron (~jfcaron@scp-8480-gw1.phys.sfu.ca)
[22:49:38] <jfcaron> I have a vendor-supplied foo.pyd file that I need to import (Windows 10, Python 3.9 from Windows Store).  When I do "import foo" I get: "ImportError: DLL load failed while importing foo: The specified module could not be found."  The folder containing foo.pyd is in my sys.path.  I tried adding it with PYHONPATH externally and just appending it
[22:49:39] <jfcaron> to sys.path once in python.   What else could be going wrong?
[22:50:36] <jfcaron> Would I get ImportError if the .pyd file was compiled for a different version of Python?
[22:52:05] *** Joins: punchbag (punchbag@user/punchbag)
[22:52:38] <punchbag> Hello
[22:53:05] <punchbag> I want to make a desktop shortcut to a couple of commands in python to convert urls that have the "https%3A%2F%2F" format back to normal, using "from urllib.parse import unquote" followed by "unquote("url here"), how do I go about it? Thanks
[22:53:09] *** Quits: luva (~luva@37.120.197.45) (Quit: Ping timeout (120 seconds))
[22:53:25] *** Quits: jay-m126 (~jay-m@154.72.150.229) (Ping timeout: 240 seconds)
[22:53:49] *** Quits: jay-m1261 (~jay-m@154.72.150.229) (Ping timeout: 240 seconds)
[22:53:51] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46) (Remote host closed the connection)
[22:54:09] *** Quits: jay-m126_ (~jay-m@154.72.150.229) (Ping timeout: 252 seconds)
[22:58:19] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46)
[22:59:01] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46) (Remote host closed the connection)
[22:59:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:59:17] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46)
[22:59:18] *** Joins: j1mu5 (~j1mu5@user/j1mu5)
[22:59:39] *** Parts: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46) ()
[22:59:41] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46)
[23:00:14] <jinsun> jfcaron: yes, version mismatch is likely the cause of the ImportError
[23:00:33] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[23:00:35] <kee> punchbag: You're on Windows?
[23:00:35] <jfcaron> jinsun: Can I query the .pyd to see what version it is for?
[23:00:52] <Wulf> punchbag: are you asking about python or are you asking about desktop shortcuts?
[23:00:52] *** pigweed_ is now known as pigweed
[23:01:15] <Wulf> punchbag: for the python part, have a look at sys.argv
[23:01:58] *** Quits: j1mu5 (~j1mu5@user/j1mu5) (Read error: Connection reset by peer)
[23:02:21] <esaym153> What is a good "interview answer" for when you are asked what a decorator is? I had been saying it was similar to dependency injection, but now that I think about it, that might make me sound dumber :-/
[23:02:24] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[23:02:33] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[23:02:48] <punchbag> kee: Linux Mint 20.02
[23:02:56] <yitz> It's syntax sugar to wrap a function in another function
[23:03:03] <jfcaron> esaym153: It's a convenience function/syntactic sugar for a function that returns another function.
[23:03:10] *** Joins: luva (~luva@37.120.197.36)
[23:03:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:03:44] <punchbag> Wulf: Ok, thanks, I'll have a look at it. A desktop shortcut or just a shortcut to the python command
[23:03:45] <Wulf> yitz: "A function returning another function, usually applied as a function transformation using the @wrapper syntax."
[23:03:47] <kee> punchbag: Copy an existing .desktop file, right-click, then write x-terminal-emulator -e python3 yourscript.py in the command box.
[23:03:52] <Wulf> esaym153: ^
[23:04:26] <esaym153> jfcaron: yea I got that, it is basically a closure. But I want to sound smarter :) I mean, you can use it for dependency injection right?
[23:04:30] <punchbag> kee: Thanks! Gonna try
[23:04:46] <Wulf> esaym153: closure is something very different
[23:05:04] <jfcaron> esaym153: I dunno, I try not to sound smarter than I really am.
[23:05:23] <jfcaron> Knowing buzzwords isn't the same as being smart.
[23:05:27] <kee> Decorators usually use closures.
[23:05:41] * esaym153 wonders if that is why he wasn't been hired yet
[23:05:44] <jfcaron> Throw a monad in there.
[23:06:00] <kee> Decorators aren't monads (I don't think).
[23:06:12] <marduk> It's based on microservice architecture
[23:06:52] <jfcaron> A Huge Ever Growing Pulsating Monad That Rules from the Centre of the Microkernel
[23:07:02] <bjs> kee: well that statement is not well-formed,  but decorators are just higher-order function application which is a very powerful tool
[23:07:09] <bjs> (and indeed you don't need decorators to do it)
[23:07:43] <esaym153> how is a decorator different than a closure other than a decorator always returns a function?
[23:08:01] <kee> Why doesn't Python let you @(lambda f: functools.wraps(f)(lambda *a, **k: f(*map(int, a), **k))) ?
[23:08:02] *** Joins: ianliu (~ianliu@177.188.85.182)
[23:08:19] <kee> esaym153: A closure can close over other things, too.
[23:08:21] *** Joins: j1mu5 (~j1mu5@user/j1mu5)
[23:08:50] <bjs> esaym153: a closure is about variables
[23:08:54] <bjs> kee: it should let you
[23:08:56] *** Joins: nomic (~nomic@185.217.117.73)
[23:09:20] <bjs> (the syntax for decorators used to be far more restricted, but it's just `@<expr> def ...`)
[23:09:33] *** Quits: j1mu5 (~j1mu5@user/j1mu5) (Read error: Connection reset by peer)
[23:09:42] <The-Compiler> jfcaron: maybe running https://github.com/lucasg/Dependencies on it reveals something useful
[23:09:52] <kee> bjs: IDLE 3.7.3 says it's a syntax error. Was the change since then?
[23:09:59] <esaym153> yea, so you can say "It is kind of like a closure"
[23:10:01] <marduk> closures and decorators are sorta opposites closures usually go inside another function whereas decoreators usually wrap a function
[23:10:19] <jfcaron> jinsun, The-Compiler: Using "strings foo.pyd" on WSL2 I managed to see that it references python38.dll, but I'm using python 3.9.  Why would it give "The specified module could not be found." though instead of a more useful error message?
[23:10:34] <The-Compiler> jfcaron: that's Windows for you
[23:10:37] <kee> marduk: But decorator implementations are usually closures.
[23:10:44] <bjs> kee: yes
[23:10:49] <marduk> kee: yeah, that part is true
[23:11:00] <jfcaron> The-Compiler: =(((( imposed by workplace unfortunately.
[23:11:24] <aphysically> jinsun: I just need to stop writing AoC solutions that cause language servers to crash and burn
[23:11:30] <bjs> esaym153: well it's not really like a closure, a decorator really isn't doing much except calling a function
[23:12:07] <jinsun> aphysically: :D, did you get the rust analyzer to crash again also?
[23:12:36] *** Quits: Harlin (~DonQixote@75-163-180-14.clsp.qwest.net) (Remote host closed the connection)
[23:12:51] <The-Compiler> jfcaron: https://bugs.python.org/issue25655
[23:12:56] *** Quits: ianliu (~ianliu@177.188.85.182) (Quit: WeeChat 3.3)
[23:13:03] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[23:14:12] <aphysically> not..yet
[23:14:19] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:ccbc:350f:2ba4:4258) (Quit: Textual IRC Client: www.textualapp.com)
[23:14:41] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[23:15:20] *** Joins: reezoh (~reezoh@2600:1702:3cf0:2e00:9140:5b0f:e44c:c2d9)
[23:17:30] *** Quits: vimal (~vimal@ip-213-127-87-89.ip.prioritytelecom.net) (Quit: Leaving)
[23:17:45] *** Joins: schmoee__ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net)
[23:17:49] *** Quits: snbk97 (~sayan@122.161.65.178) (Ping timeout: 240 seconds)
[23:17:49] *** Joins: Betal (~Betal@user/betal)
[23:18:07] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[23:18:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[23:18:56] <whatsupdoc> why isn't there prod() like sum() for lists?
[23:19:03] *** Quits: schmoee__ (~schmoee@c-69-248-84-46.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:19:22] <Repiphany> Hidden in math.prod
[23:19:30] <Repiphany> (>=3.8)
[23:19:39] *** Joins: schmoee__ (~schmoee@2601:84:4501:6440:5067:df54:12f1:6fef)
[23:19:46] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:ed32:ad34:9337:4fa2)
[23:20:02] <whatsupdoc> oh cool thanks Repiphany
[23:20:33] <whatsupdoc> I guessed the name of the function :)
[23:20:37] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:f8df:2444:e64c:1f46) (Ping timeout: 240 seconds)
[23:20:48] <whatsupdoc> That's why I like python
[23:20:59] <Wooble> whatsupdoc: as for the why, it's less commonly useful so wasn't made a builtin.
[23:21:08] <Wooble> (or, indeed, added at all until recently ;) )
[23:21:19] <whatsupdoc> yea I could see that
[23:22:43] *** Joins: onichomp (~onichomp@2806:264:4404:8093:5006:aa69:fc3e:b416)
[23:23:19] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[23:24:57] *** Quits: schmoee__ (~schmoee@2601:84:4501:6440:5067:df54:12f1:6fef) (Ping timeout: 252 seconds)
[23:24:58] *** Quits: NyaaTheKitten (~CalculusC@user/calculuscat) (Quit: I have phased into another dimension, see ya later!)
[23:25:02] <nanonyme> Is there some tool to decode a pyc file header into human-readable format?
[23:25:29] <kee> nanonyme: The dis crate.
[23:25:41] <kee> module, sorry. (Too much Rust!)
[23:26:20] <kee> Also, headers are marshal, not dis.
[23:26:23] <nanonyme> I'm basically not interested about the other parts of the file except the header
[23:27:10] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 265 seconds)
[23:27:11] *** Quits: philipp64 (~philipp64@174.27.30.118) (Quit: philipp64)
[23:27:53] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:27:58] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:5067:df54:12f1:6fef)
[23:28:03] *** Joins: somlis (~somlis@user/somlis)
[23:29:22] *** Joins: Klinda (~superleag@user/klinda)
[23:29:41] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:5067:df54:12f1:6fef) (Remote host closed the connection)
[23:30:11] <nanonyme> kee, how would I use marshal for this? If I just try to feed the file directly into it, I get a rant about EOF where none expected
[23:30:33] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[23:31:31] <nanonyme> The API doc on the module is very scarce
[23:31:50] <kee> I'll dig through my archives to find the program I did this in.
[23:32:00] *** Joins: paravida (~myChateau@user/paravida)
[23:32:11] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[23:32:15] *** nickdaly is now known as nickdaly-away
[23:33:36] <novapy> Is there a way I can use exit codes with exit() ?
[23:33:55] <Wooble> novapy: sure, just call it with a number as the argument
[23:34:08] <novapy> Thats what I thought, thanks
[23:34:36] *** Joins: roteiro (~roteiro@i528C35AF.versanet.de)
[23:37:58] *** Joins: schmoee_ (~schmoee@2601:84:4501:6440:5067:df54:12f1:6fef)
[23:38:18] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[23:38:56] *** Joins: luva7 (~luva@37.120.197.52)
[23:39:54] *** Quits: jfcaron (~jfcaron@scp-8480-gw1.phys.sfu.ca) (Quit: Client closed)
[23:40:42] *** Quits: mjack (~mjack@5634d05c.rev.stofanet.dk) (Quit: mjack)
[23:40:46] *** Quits: luva (~luva@37.120.197.36) (Ping timeout: 268 seconds)
[23:40:46] *** luva7 is now known as luva
[23:41:01] *** Quits: arinov (~arinov@31.142.57.149) (Ping timeout: 240 seconds)
[23:41:04] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:4819:c9fb:7a68:b7b3)
[23:41:11] *** Joins: Aggraxis (~Aggraxis@2600:8807:9a00:1a61:e401:2f15:57c3:ccfc)
[23:43:15] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[23:43:25] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 240 seconds)
[23:44:23] *** Joins: monkey_ (~user@181.114.17.106)
[23:44:56] <kee> nanonyme: Apparently I no longer have a copy of that program. :-(
[23:44:58] *** Quits: Aggraxis (~Aggraxis@2600:8807:9a00:1a61:e401:2f15:57c3:ccfc) (Quit: Leaving)
[23:45:31] *** Joins: Andrynet (~Andrynet@190.152.202.181)
[23:46:00] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[23:46:26] *** Joins: cyphase (~cyphase@user/cyphase)
[23:46:39] *** Joins: jmd (~user@de.cellform.com)
[23:46:43] *** Quits: schmoee_ (~schmoee@2601:84:4501:6440:5067:df54:12f1:6fef) (Remote host closed the connection)
[23:46:55] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[23:46:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:47:24] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:48:30] <nanonyme> Meh
[23:50:16] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[23:50:40] *** Joins: millido (~millido@84.210.150.128)
[23:51:40] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[23:53:56] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[23:57:55] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[23:58:06] *** Quits: Andrynet (~Andrynet@190.152.202.181) (Ping timeout: 265 seconds)
[23:59:48] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:59:52] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:59:52] *** Joins: Andrynet (~Andrynet@190.152.202.181)
