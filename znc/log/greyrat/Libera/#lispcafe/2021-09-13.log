[00:12:01] *** Joins: shka (~herr@109.231.62.239)
[00:12:49] *** Quits: shka (~herr@109.231.62.239) (Client Quit)
[00:13:05] *** Joins: shka (~herr@109.231.62.239)
[00:22:18] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 260 seconds)
[01:06:23] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:35:18] *** Joins: selwyn (~selwyn@user/selwyn)
[01:53:47] *** Quits: vats (~vats@103.70.83.191) (Ping timeout: 245 seconds)
[02:13:28] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[02:16:12] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[02:22:03] * hayley uploaded an image: (136KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/rMgiVVXcbtDxkFqyfCGpqxdp/concurrency.png >
[02:22:03] <hayley> mfiano: ^^
[02:23:37] <hayley> gilberth: Now you want compressed OOPs too?
[02:23:42] * Gnuxie uploaded an image: (34KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/PicepLTcQFwbCOBNZLZEwYdH/image.png >
[02:23:43] <Gnuxie> hmm
[02:23:51] <Gnuxie> so i'm guessing the first one has the jews.rip people in it?
[02:24:30] <hayley> .oO(Most progressive Racket users?)
[02:25:29] <Gnuxie> it's another one of these rooms with no admin 
[02:25:30] <Gnuxie> i didn't even know it existed, it's really active
[02:29:33] <Gnuxie> huh don't think that is where he got it from 
[02:42:24] <Gnuxie> The thing about rust is it's hard for Nazis to claim as one if their own when everyone is visableu queer 
[02:43:13] * hayley uploaded an image: (327KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/nfELCSgEHFalORXJWsbAxgWz/randy-smith.png >
[02:43:22] <Gnuxie> We suck at thst 
[02:44:28] <Gnuxie> We should do better 
[02:44:50] <gilberth> hayley: Compressed OOP?
[02:45:36] <hayley> gilberth: https://shipilev.net/jvm/anatomy-quarks/23-compressed-references/
[02:45:37] -ixelp- JVM Anatomy Quark #23: Compressed References
[02:45:54] <hayley> tl/dr OOP = ordinary object pointer, compressed OOPs are 32 bits and sometimes also are shifted right three bits
[02:49:08] <hayley> Gnuxie üíúüêù: The thing about rust is it's a way to hide another sort of centralism. I'd say it has the unfortunate effect of running off queer people groupthink.
[02:49:37] <Gnuxie> Fair enough but that's insignificant in comparison 
[02:49:58] <hayley> Compare to CL where no one gives a shit what the next guy is doing. Of course, that next guy can be a neo-nazi, but to a close approximation no one gives a shit still.
[02:50:09] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Ping timeout: 240 seconds)
[02:50:18] <Gnuxie> If Nazis really were accepted in our community I would just write my shit in JS and fuck off 
[02:50:20] *** Joins: childlikempress (~moon-chil@cardinal.elronnd.net)
[02:50:29] <hayley> You make the mistake of assuming there is a coherent community.
[02:51:06] *** childlikempress is now known as moon-child
[02:51:34] <Gnuxie> Hmm ok that is true 
[02:51:34] <hayley> Given JMC is dead, there won't be an official Lisp community (though a CL community could hypothetically be approved of). But the existence of such "communities" requires central planning more or less.
[02:52:05] <Gnuxie> Although I do mean CL here 
[02:52:06] <Gnuxie> Not anything else 
[02:53:31] <hayley> I agree that having them around is a bad look, but there is not much you can do about it. At least if you hate Rust people more than anything else, you can write C++. What are you going to write instead of Lisp?
[02:53:31] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[02:54:26] <Gnuxie> We can do more to make every part of them lurking alienating to.them
[02:54:39] <gilberth> hayley: Why not, I won't be surprised when narrower pointer could help.
[02:55:15] <hayley> gilberth: Note as we actually use type tags, shifting right won't work. So you are limited to a 4GB heap.
[02:55:18] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[02:56:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:57:17] <gilberth> hayley: (1) How many tag bits do you need? And 32-bit could address 4G objects, not just 4GB.
[02:58:23] <hayley> gilberth: Usually 3 is normal for CL. SBCL uses 4. But the catch is that we reserve some of the "address space" for fixnums and other immediate values.
[02:58:47] <hayley> i.e. with 3 bits, only 1/8 of the address space is really for objects.
[03:00:53] <gilberth> hayley: Speaking of which mulisp for DOS used 16-bit pointers with CAR and CDR in different segments. Which could address 32k cons cells, or 128kB of RAM. Using 32-bit pointers you would need 256kB of RAM for the same number of cons cells. ATOMs then also had their own segment for more memory addressed still.
[03:02:23] <gilberth> hayley: The number 3 or 4 comes from pointers being byte pointers, as any meaningful pointer is a multiple of two words nevertheless, which gives you 3 bits for 32-bit words and 4 bits for 64-bit words.
[03:02:55] <hayley> Right.
[03:05:45] <gilberth> There is nothing really saying that you need 4 tag bits. The most important is immediate objects IMHO, which strips one bit off your addresses. Cons cells would be very nice, so you could do with 2-bits. ...1 = some immediate 00 = some cons 10 = sth else. That could be suffice.
[03:07:22] <hayley> It's mostly what I want. x0 is fixnum, 11 is heap object, 01 is other immediate of some form. And I suppose the other bits are just further nailing down the types.
[03:08:05] <hayley> In SICL, "heap object" is one of a CONS cell, standard object (header), or rack. "other immediate" is either a character or single-float.
[03:14:27] * hayley wants xx11 tags so that barriers can be faster. Probably won't happen.
[03:16:11] <gilberth> Why waste bits on fixnums?
[03:16:50] <hayley> https://www.reddit.com/r/Communalists/comments/pmv9mo/the_ecology_of_freedom_is_in_the_top_ten_most/ EoF gang
[03:17:01] * hayley still hasn't read all of EoF ironically.
[03:19:27] <gilberth> I mean, having 63-bit fixnums buys you nothing compared to 61-bit fixnums. 65-bit fixnums would, but we can't have those.
[03:20:17] <hayley> I guess so.
[03:20:53] <hayley> Still, the zero-extension makes fixnum arithmetic easier. So, we make xx00 or something immmediate?
[03:21:06] <gilberth> 61-bit fixnums have the benefit that they are valid word-offsets without any shifting at all.
[03:22:31] <gilberth> hayley: Sure. I was not talking about where the LSB is 0 or 1, but rather that all odd or even points could be immediates, which would leave us with two bits for objects, when we want to "compress" addresses.
[03:23:14] <gilberth> However those 1G objects would just be too tight.
[03:23:27] <hayley> https://www.youtube.com/watch?v=ZVKirxPRxkY
[03:23:28] -ixelp- One More Red Nightmare - YouTube
[03:39:01] *** Quits: dra (~dra@2a04:4540:641e:b500:ece8:867a:9e59:aae8) (Ping timeout: 252 seconds)
[03:39:06] <hayley> https://www.youtube.com/watch?v=JOqmZTLdiRE
[03:39:07] -ixelp- Trois Gymnop√©dies No. 1 (Demo) - YouTube
[04:18:43] <kakuhen> Nearly done porting this Go client; it was mysteriously crashing on my MacBook, and my intuition failed me
[04:19:03] <kakuhen> I was expecting the software to be playing with GUI outside of the main thread -- modern AppKit hates that and now crashes any program attempting to do so
[04:19:17] <kakuhen> After some fiddling around I somehow missed the most obvious thing
[04:20:13] <kakuhen> The GNU Go binary that shipped with the source code was a PowerPC binary, and the program would crash as it would attempt launching the program. For some reason the NSTask didn't have enough time to throw an exception, so the program just crashed with absolutely no output to terminal or even a crash report
[04:21:32] <kakuhen> So now I just need to find a way to configure GNU Go to cross-compile for ppc, i386, and x86-64. I'll care about arm64 a few years later; there's no reason this software shouldn't run fine under Rosetta 2
[04:42:46] <hayley> https://twitter.com/CPostcapitalism/status/1437205886397734913
[05:19:26] * hayley resists saying "lol dead assignment to result" in class
[05:37:26] * hayley instead complains about everything else. "C isn't a strongly typed language, you can construct code which coerces whatever to whatever." "Interpretation isn't the same thing as not having a 'compile time' phase."
[05:41:31] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:42:41] <hayley> Apparently only "interpreted languages" have lexical scope. Fun.
[05:43:08] <moon-child> ????
[05:43:56] <hayley> Something to do with the import statement in Python, and how the interpreter still brings modules into function scope.
[05:44:38] <hayley> I mean, if you mentally substitute import <blah> with <blah> = __import__("<blah>") then it's harder to reason why it wouldn't follow lexical scope.
[05:45:47] <moon-child> isn't python not actually lexically scoped?  I seem to recall if you define a variable inside of a block it'll be visible in the entire enclosing function
[05:46:19] <hayley> Right. The variable bound by for also escapes the for block. But function scoping at least works.
[05:47:27] <hayley> I wouldn't go as far to say as people like this make me hate my job, because a. it was a part time thing before university and I'm now at university again, b. I don't hate my job and c. it's probably the best one I'll ever have, but people like this make me hate my job.
[05:48:44] <hayley> https://www.reddit.com/r/sysadmin/comments/pn3uua/everyone_rejoice_ms_teams_now_runs_on_carplay/lol
[05:48:46] -ixelp- Reddit - Dive into anything
[05:48:46] <hayley> https://www.reddit.com/r/sysadmin/comments/pn3uua/everyone_rejoice_ms_teams_now_runs_on_carplay/ lol
[05:48:47] -ixelp- Everyone rejoice! MS Teams now runs on CarPlay! : sysadmin
[05:54:15] <hayley> .oO( https://youtu.be/Q_B4oK4Mpzk?t=106 )
[05:54:16] -ixelp- [YTP] ElectroBOOM Clicks a Cliff - YouTube
[06:03:19] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[06:17:37] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1023-static.midco.net)
[06:20:42] *** Quits: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-101C-static.midco.net) (Ping timeout: 260 seconds)
[06:21:25] <kakuhen> (void *) is my favorite type
[06:32:01] <aeth> my reaction when the markets look like they're going to be red again... https://www.youtube.com/watch?v=NUYvbT6vTPs
[06:32:01] -ixelp- Cat Vibing To Ievan Polkka (Official Video HD) Cat Vibing To Music | Cat Vibing Meme - YouTube
[06:37:16] <hayley> https://owasp.org/Top10/
[06:37:17] -ixelp- OWASP Top 10:2021 (DRAFT FOR PEER REVIEW)
[06:57:18] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 265 seconds)
[06:59:18] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[07:05:10] * hayley joins the workshop class and someone has already written if _: return True else: return False
[07:07:21] <hayley> Guess today I will not be attending class.
[07:08:44] <waleee> _ is peachy in python? til
[07:09:21] <hayley> Well, yes, but I meant to use it as a placeholder for some expression which evaluates to a Boolean value. i.e. the if statement is redundant.
[07:14:44] <hayley> The next question is why I apparently can't make a bloody kernel on Jupyter.
[07:16:40] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:19:38] <hayley> My Firefox setup is broken apparently. Nice.
[07:19:43] <dave0> maw
[07:19:48] <hayley> Hey dave0
[07:20:33] <dave0> hi hayley, how's it going?
[07:21:48] <hayley> It's fine, how are you?
[07:22:02] <dave0> good good, i went for a walk
[07:23:07] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Remote host closed the connection)
[07:23:24] * hayley wants APL, me gets APL.
[07:24:04] <hayley> [x % 2 == 0 for x in a_given_list_of_numbers].count(True)
[07:24:59] <waleee> more a weird set notation
[07:25:00] <dave0> i learnt a bit of apl when i was little
[07:25:38] <dave0> i remember iota that would give you a list of number 1 2 3 4 5 and / which would apply an operator to each element of a list
[07:25:46] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[07:26:04] <dave0> oh / might have been a bit different... i think   /+1 2 3 4 5   added up the numbers
[07:26:14] <dave0> +/ something like that
[07:26:42] <hayley> +/1=2|1 2 3 4 5
[07:29:09] <waleee> 1 (+/ = 2&|) 1 2 3 4 5
[07:29:15] <waleee> hm or not
[07:29:47] <hayley> Evens ‚Üê {+/1=2|‚çµ}
[07:30:11] <waleee> yeah it gets easier if you cheat a bit with the explict args
[07:30:46] * hayley uploaded an image: (18KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/kVnupZdYrfqFRSwfiWyjSVcE/Screenshot_2021-09-13_13-06-45.png >
[07:32:02] <waleee> you have this after a java-based course some months back? lol
[07:32:18] <hayley> Yes.
[07:32:27] <hayley> Basically a data science class, except they call it "mathematics for computing".
[07:32:50] <waleee> ah, it has a get-comfy-with-python component?
[07:33:11] <hayley> Yes.
[07:35:51] <hayley> Apparently the APL lowercase omega is in fact not a lowercase omega.
[07:39:49] <waleee> does the repl error with a pasted greek omega?
[07:40:05] <hayley> Haven't tried it.
[07:40:39] <waleee> ah, ngn-apl, I was afraid I'd have to compile gnu-apl
[07:41:33] <hayley> def is_divisible(m, n): return True if m % n == 0 else False
[07:41:35] <hayley> Someone nearly used their brain!
[07:42:32] <waleee> ngn-apl definetly didn't like the pasted œâ
[07:43:37] * hayley uploaded an image: (51KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/etYlEpUWiebytqqRRJqvmwdk/Screenshot_2021-09-13_13-19-46.png >
[07:44:17] <hayley> Guess which one of these was written by someone who got paid to write it.
[07:48:31] <waleee> the right one kind-of misses perl I think
[07:49:14] <dave0> the left one looks like it would vectorize well
[07:50:18] * hayley really would just settle for COUNT-IF
[07:52:10] <hayley> We don't seem to have a CHAR-UPCASE-P but y'know, it'd be better than .count(True) all the time.
[07:54:46] <dave0> is it unicode aware?
[07:55:11] <hayley> Yes.
[07:55:15] <dave0> nice
[07:56:21] <Alfr> hayley, we have upper-case-p .
[07:56:37] <hayley> Huh, so we do.
[07:56:48] <hayley> Weird how it's upper-case there and upcase elsewhere.
[07:57:16] <hayley> (count-if #'upper-case-p "Look ma, no count(True)!") => 2
[07:59:11] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 265 seconds)
[08:01:58] *** Joins: sm2n (~sm2n@user/sm2n)
[08:08:55] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[08:18:10] <hayley> https://twitter.com/Manyeyedgirl/status/1437233179740581896
[08:18:34] <hayley> This is why SICL development looks slow to outsiders btw
[08:19:41] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[08:20:03] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:20:10] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:25:16] <contrapunctus> hayley: lolwhat
[08:33:12] *** Joins: semz (~none@user/semz)
[08:35:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:36:03] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[08:37:30] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[08:38:45] *** Server sets mode: +nrt 
[08:39:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[08:47:28] <hayley> Okay, now we have int(float(input(...))) in assignments now? Sheesh.
[08:49:16] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[08:49:17] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[08:49:17] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[08:49:42] *** Joins: nckx_ (~nckx@tobias.gr)
[08:50:06] *** Joins: |3b| (bbb@user/3b/x-2324788)
[08:50:14] *** Joins: taeaad (~taeaad@user/taeaad)
[08:50:20] *** nckx_ is now known as nckx
[09:14:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:16:28] <hayley> https://www.youtube.com/watch?v=xP0uZbHViek
[09:16:29] -ixelp- Lou Reed's Metal Machine Music (Slow Version) - YouTube
[09:20:25] *** Quits: retropikzel (~retropikz@83.245.254.255) (Ping timeout: 252 seconds)
[09:39:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[10:08:13] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[10:09:30] *** Joins: mala (~mala@user/malaclyps)
[10:09:58] *** Joins: shka (~herr@109.231.62.239)
[10:16:51] <semz> I always understood the up/down in upcase/downcase as a sort of transitive verb. You "up" the case and you "down" the case.
[10:28:10] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:31:18] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[10:53:14] <mfiano> Thanks for the rubber ducking wrt my rendering design issue yesterday. Stared at a blank screen most of the day, and something clicked that seems like it could work right before I passed out. Time to work it out on paper before i attempt to code it
[11:00:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:10:57] <hayley> Is there an APL implementation I can import as a Python package (ideally installable by pip)? I'm not kidding.
[11:12:36] <moon-child> https://github.com/Dyalog/pynapl ?
[11:15:18] <hayley> Interesting, though I want to go Python->APL.
[11:15:47] <hayley> I guess I have damn data frames and Numpy arrays too, come to think of it. So FFI won't really work.
[11:15:57] <moon-child> farther down there's a heading 'Accessing APL from Python'
[11:16:08] <moon-child> and 'If the numpy library is available, numpy matrices will be automatically converted to APL matrices'
[11:16:33] <hayley> Nice.
[11:17:06] <hayley> Though I take it you have to install Dyalog.
[11:18:40] <moon-child> I think so.  There is a generic network protocol also used by ride, which dzaima/apl (which is oss) implements, but that lib seems to define its own ad-hoc protocol?
[11:19:01] <hayley> "In order to be able to compile APL, language limitations have to be imposed." Eh, I imagined APL\3000?
[11:21:00] <moon-child> what's that from, co-dfns?
[11:22:43] <hayley> Wikipedia on APL. More or less wondering if I really should be considering it to avoid losing sanity with Python for array/data frame munging.
[11:26:28] <moon-child> their references don't even support them
[11:26:29] <moon-child> lol
[11:30:11] <shka> use vellum for data frames
[11:30:29] <hayley> shka: I would, but there is still the requirement to use "Python".
[11:30:45] <shka> horryfing
[11:30:49] <hayley> And unless they version the CMUCL compiler and the version is newer than 3.8, I can't even crack that joke.
[11:31:20] <hayley> https://www.youtube.com/watch?v=S2Lt8F5unhM
[11:31:20] -ixelp- [I'm] Stranded - YouTube
[11:31:33] <hayley> Once defunkydrummer called him "Robert Strandh"ed at the "beach"
[11:33:03] <contrapunctus> üòÑÔ∏è
[11:33:45] <contrapunctus> hayley: where closos
[11:34:03] <shka> i our hearts adn dreams
[11:34:06] <shka> *and
[11:34:13] <hayley> So, ideally the way I wouldn't lose my sanity is to write something like "evens = apl.monad("+/1=2|‚çµ)
[11:34:29] <hayley> I messed up the quotes and pressed RET too early but you get the idea.
[11:35:05] <hayley> Alternately, I can handle writing functional one-liners too.
[11:35:35] <hayley> But Python got rid of reduce so I can't be a smart-ass with that.
[11:36:21] <moon-child> __import__('functools').reduce?
[11:36:31] <hayley> Perhaps so.
[11:36:48] <shka> yeah
[11:36:54] <shka> reduce now is in functools
[11:37:07] <shka> but given how lambda works in python...
[11:37:17] <shka> not as nice as you would hope
[11:37:26] <shka> you have to define local functions everywhere
[11:43:14] * hayley goes to r/programminglanguages
[11:43:34] <hayley> https://www.reddit.com/r/ProgrammingLanguages/comments/pna7hc/the_language_that_almost_all_programmers_use/ I literally wrote six random characters to count even numbers
[11:43:35] -ixelp- The language that almost all programmers use : ProgrammingLanguages
[11:52:50] <amirouche> hello #lispkawa
[12:00:22] <dave0> pfft they should have just localized lisp
[12:02:44] <mfiano> a special language that stores a 'special' sexp DS, requiring a special IDE.
[12:02:56] <mfiano> Somehow I feel they started at the wrong node :)
[12:03:31] <ck_> Visual Basic localized in Aramaic sounds optimal
[12:04:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[12:36:13] <White_Flame> comments would need their own manual translations, though, unless you trust google translate or whatever
[12:36:18] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:00] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:42:56] <ck_> yes, a whole scholarly field
[12:43:09] <ck_> maybe do the documentation in cuneiform on actual tablets
[12:45:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:27:55] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:47:18] *** Joins: ln43 (~ln43@user/ln43)
[13:48:07] <ln43> Hi all !
[13:48:42] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 260 seconds)
[13:59:25] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[14:07:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:30:44] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[14:31:09] *** Joins: random-nick (~random-ni@87.116.183.93)
[15:00:27] *** Joins: pjb (~pjb@user/pjb)
[15:01:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[15:16:10] <hayley> https://github.com/lunatic-solutions/lunatic I find this funny.
[15:16:38] <hayley> So you can't do object capabilities or cooperative multithreading cause you really want a "native code" language, but then you can't do ocap and you need async functions and that sucks.
[15:17:01] <hayley> The solution: abandon native code, compile to WASM, well, what was that about performance.
[15:27:59] <mfiano> I used to think the Greenspun rule only be a temporal artifact, but its applicability is climbing at an increasing rate the more I look at modern solutions.
[15:28:48] <dave0> i'm trying to code a little bit every day
[15:28:53] <dave0> it kinda works
[15:29:38] <Gnuxie> when you think about it, the end goal is to not code at all 
[15:29:38] <hayley> "It's like saying, give a crab an async framework and they become Joe Armstrong, well, you know it's just not true. And give a crab a distributed hash table and CRDT and they don't become whoever, they don't become us." ‚Äî hayley 2021
[15:30:13] <dave0> Gnuxie: far out that's zen
[15:30:49] <White_Flame> it's certainly my end goal.  But I think in order to achieve it, first you must have AI that can actually understand what you want, and that's a slight challenge to overcome ;)
[15:31:46] <contrapunctus> Gnuxie: joining Microsoft to work on Copilot? üòè
[15:31:56] <mfiano> Especially since even people on the internet interpret differently than what was intended.
[15:32:26] <White_Flame> that's why dialogue is so important
[15:32:41] <Gnuxie> well, i don't think it's about making an AI that can doe what you want, it's just about making "coding" something else 
[15:33:26] * hayley uploaded an image: (314KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/npJvrvbhdbazrcjeJDShuLXd/since-when-did-this.png >
[15:33:51] <Gnuxie> but i didn't really mean it like that, no one wants to be developing and maintaining an application forever
[15:33:58] <White_Flame> personally, I want the machine to do more and more offloading of work from me, where I make design decisions & implementation strategies where I think it needs them, and the machine does everything else.  That quickly gets into AI, and is the reason why the level of abstraction of coding hasn't changed allthat much in the last 50 years
[15:34:30] <Gnuxie> hmm ok
[15:34:31] <mfiano> hayley: I got another performance task for you
[15:34:53] <White_Flame> it's hard to just get to the "next step" of offloading
[15:35:12] <mfiano> This was on my feed this morning. I know it is painful for you to see Rust being the only winner over CL: https://programming-language-benchmarks.vercel.app/problem/spectral-norm
[15:35:12] -ixelp- spectral-norm - benchmarks, Which programming language or compiler is faster
[15:35:12] <White_Flame> without always having to be elbow-deep in lower level details
[15:36:00] <hayley> All 4.4% faster?
[15:36:55] <hayley> Fortunately for me, I can't really optimize as my desktop has a Zen 1 processor and thus runs 256-bit AVX instructions by doing two 128-bit Œº-ops.
[15:37:32] <Gnuxie> what even is spectral-norm 
[15:37:46] <hayley> Yeah, there are no descriptions of the problems.
[15:37:46] <White_Flame> well, unfortunately Norm died, and...
[15:38:08] <Gnuxie> when are we gonna get a benchmark that isn't some scientific computing SIMD hackjob bullshit 
[15:38:30] <hayley> I want to implement a CL version of https://github.com/smarr/are-we-fast-yet one day.
[15:39:06] <White_Flame> pretty sure the people spending the most $$$ on buying the highest benchmarks are running scientific computing SIMD BS
[15:39:18] <White_Flame> *buying the highest benchmarked CPUs
[15:39:38] <hayley> 2/5 macro benchmarks are ported from Smalltalk, so they test things you and I care about surely.
[15:40:01] <hayley> "Hence, comparing the performance of standard libraries or efficiency of GCs are non-goals." Boo, I wanted to have a GC pissing contest.
[15:40:49] <hayley> But then they describe one benchmark as "Tree of arrays to stress GC"? Er what?
[15:41:44] <mfiano> :thonk:
[15:43:46] <hayley> Fuck it, just do challenge Hunchentoot imo
[15:43:47] <mfiano> I can't even think of what was intended there
[15:44:01] <mfiano> Maybe GC should have been cacheline?
[15:44:07] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[15:44:19] *** Joins: dec0d3r (~dec0d3r@101.181.86.127)
[15:44:29] *** Joins: ln43 (~ln43@user/ln43)
[15:44:41] * hayley shrugs
[15:45:29] <ln43> Hi hayley ...
[15:45:42] <ln43> Hi all
[15:46:02] <ln43> i was trying to understand a binary tree in CL but the implementation was almost tricky
[15:46:18] <hayley> There is also the problem that none of the tests are concurrent/parallel which also is a big deal-breaker to me.
[15:46:36] <mfiano> An (unbalanced) binary tree is one of the simplest data structures there is. I would encourage you to read CLRS
[15:46:54] <mfiano> The pseudo-code in that book can be easily translated to CL
[15:47:13] <hayley> There's SPECjbb for Java which emulates a "real" server but that is proprietary and only distributed as JVM bytecode.
[15:48:07] <ln43> ok ... no but in my case it was possible balance the tree using an arbitrary function
[15:49:11] <mfiano> Then you might want to look at the different balancing schemes, like red-black, AVL, WAVL, weight, etc
[15:50:01] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[15:50:09] <mfiano> splaying is another one useful for caches
[15:50:19] *** Joins: shka (~herr@109.231.62.239)
[15:52:13] <ln43> yes possibly in the future...
[15:53:10] <ln43> really right now i'm just trying to understand how to use agents for AI and how to model them
[15:53:27] <ln43> but i think the implementation used in AIMA is a bit outdated 
[15:53:44] <ln43> anyway i'm following the code used in the repository
[15:54:29] <ln43> and so i should possibly spend some months trying to understand how agents are acting inside their environement 
[15:54:36] <ln43> and how to model theyr behaviour 
[15:55:44] <hayley> Another option other than challenge Hunchentoot would be challenge decentralise2 synchronisation-test, which is all in memory, but admittedly too straight forward.
[15:56:40] <ln43> so i should before understand the theory ... for simple/classical cases like the vacuum and the wumpus worlds
[15:57:22] <mfiano> I must have taken a completely different path in AI research
[15:57:25] <ln43> reasn about that on the paper and later try to understand how te implementation is working
[15:57:35] <ln43> mfiano: why ?
[15:57:44] <mfiano> I have no idea what you're talking about
[15:57:48] <ln43> do you think that approach is a bit outdated?
[15:58:05] <ln43> yes i'm talking about the reading of the AIMA book 
[15:58:25] <mfiano> another acronym to translate today...
[15:58:31] <ln43> yes...
[15:58:46] <ln43> the MA final part is tricky to remember
[15:58:52] <ln43> modern approach 
[15:58:53] <mfiano> Oh the norvig book
[15:58:58] <ln43> yes that pne
[15:59:02] <ln43> one
[15:59:22] <ln43> one of the best book on the matter
[15:59:36] <mfiano> I read PAIP, but I have that one for a rainy day
[16:00:00] <ln43> but paip contains only a series of recipes
[16:00:22] <ln43> yes but not a lot about alghoritms to use in that fiels
[16:00:27] <ln43> field
[16:00:40] <ln43> and way to approach / takle the problem
[16:00:54] <ln43> so maybe from a programmer perspective is better read before paip
[16:01:29] <ln43> from a theoretical side is better read before AIMA
[16:02:13] <mfiano> I see. I still think CLRS would be better to read before any more specific field of study
[16:02:23] <ln43> xd
[16:02:49] <ln43> i have another classical book about algorithms and data structures
[16:02:58] <ln43> ok in C but the comcept is the same
[16:03:02] <mfiano> Which?
[16:03:05] <ln43> it was written by skiena 
[16:03:46] <ln43> another sacred bbok on ther ,atter
[16:03:48] <ln43> matter
[16:04:08] <mfiano> Seems to be a book on _designing_ them, not an in-depth review and implementation of well understood existing ones.
[16:04:34] <ln43> no but there is also the code to follow the book
[16:04:48] <mfiano> The code for designing new algorithms?
[16:04:53] <ln43> so there are implementations in many languages
[16:05:06] <ln43> new algorithms?
[16:05:11] <mfiano> I am arguing that it seems orthogonal to a book enumerating the staples of our jobs as programmers
[16:05:12] <ln43> almost all is already known
[16:05:29] <ln43> but i don't work in the sector, i don't know
[16:06:06] <ln43> so basically for me a book is almost like another... i look for recensions just to find the better /recommended ones
[16:06:37] <mfiano> Carry on with what works for you. Speaking of books, I am going back to mine now :)
[16:06:39] <ln43> or other scoring factors methodologies
[16:06:49] <ln43> so called impact factors
[16:06:50] <ln43> and so on
[16:07:34] <ln43> ok, have a good day and thanks for the talk ...
[16:12:09] *** Quits: dec0d3r (~dec0d3r@101.181.86.127) (Remote host closed the connection)
[16:17:56] <hayley> https://www.youtube.com/watch?v=WYkqLm9cM3Y
[16:17:56] -ixelp- Walk on By - YouTube
[16:18:20] * hayley sees people say that a summation in mathematics is a for loop and gets mad now.
[16:18:20] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[16:18:28] <hayley> +/ is right there, come on...
[16:29:47] <ck_> there's an opportunity to link one of Guy Steele's talks about Fortress (I think), that leads with 
[16:30:28] <ck_> that leads with \sum as an example for how the order of computation shouldn't be part of the language necessarily
[16:30:44] <hayley> "Bro u posted sequential code prepare to lose subscriber" - Guy Steele 2010
[16:31:03] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[16:32:15] <mfiano> freya?
[16:32:19] <mfiano> i saw that...
[16:32:49] <hayley> I forgot names. But it was weird that it happened twice.
[16:32:58] *** Joins: nckx (~nckx@tobias.gr)
[16:33:09] <mfiano> https://twitter.com/FreyaHolmer/status/1436696408506212353
[16:33:28] <hayley> Another was about translating maths to JavaScript code. The point, according to Leslie Lamport, is that you explicitly don't program in maths.
[16:36:36] <hayley> My favourite notation problem was reading Compiling with Continuations, and neither myself, my maths teacher, nor ex could work out the big set union symbol.
[16:37:03] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[16:37:59] <mfiano> The problem with math notation is the same as programming notation. There are conventions, but terms are overloaded paper to paper, and sometimes a legend isn't even directly included and you have to trace through citations or more manual work.
[16:39:53] <hayley> It is also convenient that Leslie has his own well specified temporal logic of actions then.
[16:40:03] <dave0> it has to be the same because numbers
[16:40:45] <mfiano> math actually has nothing to do with numbers
[16:41:07] <hayley> And, well, the rest of TLA+ which specifies a useful enough mathematical system.
[16:41:13] *** Joins: nckx (~nckx@tobias.gr)
[16:42:06] <hayley> One interesting thing is that the language is untyped. Types are just another invariant that you test after all.
[16:43:06] <mfiano> is that some proof assistant?
[16:43:53] <ck_> and model checker
[16:44:37] <hayley> Model checker, I'd say.
[16:45:09] <hayley> Well, there is a SMT solver but mostly it's used for exhaustively checking concurrent and distributed programs.
[16:46:35] <mfiano> I will take your word for it.
[16:47:15] <mfiano> I am not familiar with temporal logic. I wonder if this relates at all to the time component found in HDL's
[16:48:35] <hayley> Otherwise I'd say that "basically a for loop" stuff is a way to say you don't do maths without doing it. Given how we do (reduce #'+ stuff), APLers do +/, mathematicians do Œ£, I think imperative loops are the most ugly. Just sayin.
[16:49:26] <mfiano> reduce is just sugar, or is that what you're saying?
[16:50:15] <hayley> That if you reduce, you're more or less doing "maths" by notation.
[16:51:37] <hayley> FWIW temporal logic is different to temporal logic of actions; apparently the former is too messy with computer stuff. But the latter does steps: given state x, y, z, compute x', y' and z' this way.
[16:51:51] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[16:52:37] <mfiano> I didn't think too much into it. Just thought it to be a pedagogical device she would use. Whatever works for her audience.
[16:53:56] <hayley> True. But IMO the mathematical syntax works better and it's plain weird to complain about gatekeeping; there's no reason to pick either notation other than " I like/grew up on this one".
[16:54:52] <hayley> s/and/but still/
[16:56:57] <hayley> (If I got the idea right, the point of TLA is that almost nothing is temporal logic; you just write possible steps and an initial state in an "imperative" manner, and only give invariants to check with temporal logic.)
[17:00:26] <hayley> Lamport claims one networking algorithm would fit in one page of pseudocode, or 5000 lines of C and 500 lines of assembly (for sending stuff on the wire). But C is C, of course, and it sounds like someone isn't abstracting right if we are discussing network interface interfacing.
[17:05:44] *** Joins: X-Scale (~ARM@46.50.5.253)
[17:05:49] *** Joins: nckx (~nckx@tobias.gr)
[17:09:36] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[17:10:22] *** Joins: minion (~minion@common-lisp.net)
[17:17:51] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[17:33:02] *** Joins: makomo_ (~makomo@user/makomo)
[17:48:21] *** Joins: raeda_ (~raeda@72.49.219.33)
[17:48:44] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[18:45:07] *** Joins: vats (~vats@103.70.83.191)
[18:46:10] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:52:08] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:58:40] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[18:59:02] *** Joins: shka (~herr@109.231.62.239)
[19:09:18] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 260 seconds)
[19:09:41] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:13:14] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[19:23:45] *** Joins: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477)
[19:38:12] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[19:46:38] *** lotuseater is now known as rotateq
[19:47:02] *** rotateq is now known as lotuseater
[19:47:16] <lotuseater> hehe the other nickname is free ^^
[19:51:42] *** Joins: makomo_ (~makomo@user/makomo)
[19:52:11] *** Joins: waleee (~waleee@student-223-182.eduroam.uu.se)
[19:52:36] *** Quits: makomo_ (~makomo@user/makomo) (Client Quit)
[20:01:07] *** Quits: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477) (Ping timeout: 268 seconds)
[20:08:38] <shka> https://craffic.co.in/astronomers-simulate-virtual-universe-download-free/
[20:12:46] *** Quits: waleee (~waleee@student-223-182.eduroam.uu.se) (Ping timeout: 260 seconds)
[20:14:48] *** Joins: waleee (~waleee@student-223-182.eduroam.uu.se)
[20:22:05] *** Quits: iisi (sid19824@id-19824.stonehaven.irccloud.com) ()
[20:22:21] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[20:34:27] *** Joins: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477)
[20:38:01] *** Quits: santiagopim (~user@90.167.66.93) (Ping timeout: 252 seconds)
[20:39:02] <ck_> you wouldn't download a universe
[20:39:48] <lotuseater> the question is how many times our universe was downloaded
[20:43:22] <shka> ck_: i absolutely would
[20:45:59] <lotuseater> compressed to a single qubit
[20:46:40] <mfiano> Nah a single verse probably wouldn't be enough text to outweigh the compression scheme header
[21:01:09] *** Quits: waleee (~waleee@student-223-182.eduroam.uu.se) (Ping timeout: 268 seconds)
[21:05:13] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[21:05:33] *** Joins: shka (~herr@109.231.62.239)
[21:13:41] *** Joins: santiagopim (~user@90.167.66.93)
[21:39:47] *** Quits: santiagopim (~user@90.167.66.93) (Ping timeout: 268 seconds)
[21:58:25] *** Quits: retropikzel (~retropikz@2001:999:20e:11a2:e5e7:3fc5:cd85:477) (Quit: Leaving)
[22:07:13] <gilberth> Good morning #lispcafe!
[22:08:54] *** Joins: santiagopim (~user@90.167.66.93)
[22:11:24] <gilberth> The compression scheme is just so expensive to uncompress the qubit that the universe still is not finished with it,
[22:12:54] <shka> yes
[22:13:12] <shka> and once this is done...
[22:13:57] <shka> https://i.pinimg.com/564x/5d/16/86/5d1686b969eef759e9a10d7bda43d871.jpg
[22:15:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:34:11] <gilberth> The web is too main stream. I search for "TFM file format" and get a gazillon results "How do I open a TFM file?" --- Useless. All I want is a spec.
[22:35:01] *** Joins: ln43 (~ln43@user/ln43)
[22:35:11] <gilberth> Again, I would appreciate when TeX came with documentation.
[22:35:31] <ln43> eh TeX... never used personally
[22:36:05] <ln43> but when i was children there was tex Willer ...
[22:36:40] <ln43> https://en.wikipedia.org/wiki/Tex_Willer < this
[22:36:44] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[22:36:48] <ln43> tex was originated from that
[22:36:49] *** Joins: robin_ (~robin@user/terpri)
[22:36:56] <ln43> modestly
[22:37:36] <gilberth> TeX or better LaTeX is fine. It's just that it isn't really documented. For the DVI file format you refer to some TUGboat article. Now I want to process TFM files. Perhaps some documentation is in the MF sources. But not a spec per se.
[22:40:10] <ln43> tmf files?
[22:40:33] <ln43> ah ok...
[22:41:47] <gilberth> tfm files. Containing the metrics for TeX fonts. I want to create fake ones, with empty kerning tables, fixed width metrics, but the proper encoding set.
[22:45:23] <ln43> to be honest i'm still not able torender html files using emacs or use a simple textual browser as an alternative to call the default system browser
[22:45:36] <ln43> but ok... i will see later, for now i don't need that
[22:47:37] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 268 seconds)
[22:49:12] *** Joins: robin (~robin@user/terpri)
[22:51:39] <gilberth> I'll use pl2tf, the input format is somewhat documented in its sources. And it's s-expressions or at least looks like that.
[22:53:35] <gilberth> You don't know actually. No documentation but the source code.
[22:57:35] <ln43> yes right... butit's at least commented i hope
[22:58:24] <ln43> for example using structures to emulate a rudimental oop system is almost discouraged i suppose, but reading the aima code is the norm
[22:58:50] <ln43> and few introspection abilities, no modifications for slots, single inheritance.. a lot of disadvantages
[22:59:19] <ln43> ok no on the fly modification retaining the olf values for the already defined slots
[23:01:34] <gilberth> Comments are no documentation. There is an example with a "QUAD" field. And all the documentation^Wsource says is that they may be a QUAD field. It doesn't say, what it is. Literate programming is no excuse for comments or documentation.
[23:03:59] <gilberth> Hmm, I still have trouble to adjust my display properly. But it's "contrast" and "brightness" are actually contrast and brightness, which puzzles me.
[23:04:54] <ln43> xd
[23:05:11] <ln43> yes, the same here
[23:07:01] <ln43> anyway regarding vision today i bought a new pair of glasses, model: LT ligtech 3011L
[23:07:30] <ln43> lightec ...
[23:07:56] <ln43> 30111L
[23:08:01] <ln43> ops too many errors
[23:10:59] <gilberth> Aha, the encoding in a TFM file is ignored by TeX. Silly of me to believe a font encoding would be the property of the font. No, TeX just assumes a certain encoding, somehow.
[23:11:29] <ln43> strange
[23:23:56] <ln43> question: there is a simple way to "disable" clos in a running session ?
[23:24:29] <gilberth> Disable?
[23:28:57] <ln43> yes... but before: how to check that the current implementation is using CLOS (is it possible to use something like #+CLOS (progn "i'm using CLOS") or not ?)
[23:29:48] <gilberth> Hugh? CLOS is an integral part of ANSI CL.
[23:30:05] <ln43> to use an alternative implementation... is it possible?
[23:31:09] <gilberth> An alternate implementation? Either it's ANSI-CL or not.
[23:31:44] <ln43> so there is no way to have a CL without CLOS just for test ?
[23:32:06] <ln43> disabling temprary CLOS... or something like that
[23:35:09] <ln43> alternative i will try to unbound only specific symbols
[23:35:17] <ln43> if there is no other way
[23:36:06] <gilberth> What the heck are you trying to do?
[23:37:31] <ln43> i would like to use the alternative proposed within the aima code when the CLOS is not available (it's old code)... just to see if everything work the same
[23:37:57] <ln43> yes, just to try
[23:38:21] <gilberth> Why bother with CL from the last century?
[23:39:45] <ln43> now there is a specific system that implements the CLOS or not ?
[23:40:24] <gilberth> Look at some CL implementation from the last century. And btw, you know what a package is, don't you?
[23:40:32] <shka> honestly, i avoid using the term CLOS now
[23:40:40] <ln43> why?
[23:40:43] <shka> because it implies that CLOS is somehow separate from CL
[23:40:45] <shka> it is not
[23:41:04] <shka> gilberth: who are you talking to anyway?
[23:41:39] <gilberth> shka: idk, actually. *shrug*
[23:42:20] <shka> because this nick warranted himself place on my ignore list
[23:42:44] <shka> and i don't know why 
[23:42:59] <shka> i mean, previously
[23:43:11] <gilberth> Anyhow, actually CLOS was once separate for CMUCL, which used PCL and late to CLISP. In the last century. But this was before CLtL2 even.
[23:45:17] <gilberth> But, I found some TUGboat article about said TFM files. I'll try to get a clean rendering of dpANS with all fonts of fixed width, no kerning, and no ligatures, all the same size. So that I could reliably recover the contents from the DVI file.
[23:47:03] <gilberth> I tried to force all fonts to cmtt10 but cmsy10, but that yields "---" for an emdash besides other things not quite right.
[23:47:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:50:14] <gilberth> Next bug btw. Somehow, when doing cut and paste from the PDF viewer "‚óÉ" and "‚ñπ" get swaped. I noticed because examples in dpANS use "‚ñπ" for output and after I pasted that I got "‚óÉ" instead.
[23:50:39] <gilberth> It's not funny anymore, dear bugs.
[23:52:34] <moon-child> in wine, the 'resize' mouse cursors point the wrong way.  I don't even want to know
[23:53:25] <gilberth> Wrong way? That are double arrows, how are they wrong?
[23:54:43] <moon-child> if you move the mouse cursor to one corner of a window, the cursor will will change shape to indicate that you can resize, and it will point towards that corner
[23:55:06] <moon-child> except that under wine, for some reason, it points towards the opposite corner
[23:56:55] <gilberth> Ah, so it's a single headed arrow? Perhaps you could only enlarge windows in windows and only shrink them with wine.
[23:57:23] <moon-child> hehe
[23:58:10] <gilberth> Otherwise, at times I mix up left and right and my father always used to say: "Remember, son, the left hand is where the thumb is right."
[23:59:12] <gilberth> moon-child: I was a bit puzzles because macOS has a double headed arrow here and allows you to adjust the size either way.
