[00:01:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:01:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:02:09] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[00:02:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:02:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:06:31] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:07:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:08:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:10:17] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[00:13:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:14:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[00:14:07] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:17:17] *** Quits: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com) (Quit: leaving)
[00:19:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:19:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:21:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:21:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:23:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:23:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:27:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:27:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:28:01] *** Joins: pavonia (~user@user/siracusa)
[00:31:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:31:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:32:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f)
[00:33:21] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[00:35:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:35:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:36:41] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[00:37:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[00:38:20] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[00:39:26] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:41:18] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 256 seconds)
[00:42:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:43:56] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[00:45:19] *** Quits: michalz (~michalz@185.246.204.43) (Remote host closed the connection)
[00:46:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[00:47:02] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 252 seconds)
[00:47:35] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:49:47] *** Quits: xff0x (~xff0x@2001:1a81:530d:ee00:fdea:9bb5:abe4:a159) (Ping timeout: 252 seconds)
[00:50:52] *** Quits: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8) (Ping timeout: 268 seconds)
[00:51:20] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e31dccc5136b6b31647.dip0.t-ipconnect.de)
[00:51:31] *** Joins: xff0x (~xff0x@2001:1a81:5339:b000:22b1:7654:f125:7b04)
[00:52:13] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[00:52:27] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[00:54:48] *** Quits: FarzadBekran_ (~FarzadBek@94.74.153.122) (Quit: Leaving)
[00:55:50] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[00:57:07] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 252 seconds)
[00:57:22] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Remote host closed the connection)
[00:58:40] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:54ac:14f0:5fcb:286d)
[01:01:07] *** Joins: stefan-_ (~cri@42dots.de)
[01:01:07] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a)
[01:03:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:04:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:06:07] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[01:10:02] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[01:11:07] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[01:12:47] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:12:53] *** Quits: Megant (~kaitsu@user/megant) (Ping timeout: 252 seconds)
[01:13:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:14:51] *** Joins: Megant (megant@user/megant)
[01:15:56] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[01:16:11] *** Joins: mestre (~mestre@191.177.175.57)
[01:16:26] *** Quits: deadmarshal (~deadmarsh@95.38.115.243) (Ping timeout: 256 seconds)
[01:19:06] *** Quits: Guest|27 (~Guest|27@cpea456cc4b1ddd-cma456cc4b1ddb.cpe.net.cable.rogers.com) (Quit: Connection closed)
[01:20:22] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[01:22:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:22:07] <hololeap> is there a good reference where I can see what version of e.g. filepath comes bundled with GHC-x.y.z
[01:22:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:23:30] <geekosaur> https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history ?
[01:23:31] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[01:24:43] <hololeap> perfect, thank you
[01:24:53] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:25:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[01:26:51] <monochrom> If you just need one x.y.z, the GHC user's guide has it in release notes.
[01:27:23] <monochrom> If you have the GHC version installed, "ghc-pkg list"
[01:29:04] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:31:16] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[01:31:33] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Remote host closed the connection)
[01:32:17] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[01:33:01] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[01:33:58] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[01:34:14] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Quit: WeeChat 3.3)
[01:34:29] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:34:49] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Remote host closed the connection)
[01:35:41] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[01:36:04] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Client Quit)
[01:36:21] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[01:36:47] *** Joins: Guest1731 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:39:45] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[01:41:31] <dmj`> anyone know what this is about https://hackage.haskell.org/package/hermes "legal reasons"
[01:42:14] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Remote host closed the connection)
[01:44:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:44:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:44:55] <monochrom> I don't really know, but I guess license issues.  Also, take a look at https://hackage.haskell.org/packages/search?terms=hermes
[01:45:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[01:46:22] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[01:48:42] <hpc> ooh, it's even a 451 status
[01:50:05] *** Joins: Alleria (~textual@user/alleria)
[01:50:24] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[01:54:37] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[01:54:43] *** Joins: mikail_ (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[01:54:50] *** Quits: mikail_ (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Remote host closed the connection)
[01:54:50] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Remote host closed the connection)
[01:55:06] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Remote host closed the connection)
[01:55:09] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[01:57:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:57:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:57:52] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:58:06] <hololeap> does System.IO.withFile apply `hSetEncoding h localeEncoding` by default?
[01:58:36] <hololeap> on the handle it passes to the continuation
[02:00:13] <boxscape> > 1 `2` 3
[02:00:14] <boxscape> I feel like this should work
[02:00:14] <lambdabot>  <hint>:1:4: error: parse error on input ‘2’
[02:00:20] <hololeap> I'm looking at how to reproduce the withTextFile function from the (deprecated) system-fileio package
[02:00:21] <boxscape> what if I want to use 2 as a binary operator
[02:00:24] <hololeap> https://hackage.haskell.org/package/system-fileio-0.3.16.4/docs/Filesystem.html#v:withTextFile
[02:00:33] *** Quits: Alleria (~textual@user/alleria) (Quit: Textual IRC Client: www.textualapp.com)
[02:01:30] <hololeap> boxscape: that's the stinkiest code I've seen in a while
[02:01:34] <monochrom> I don't know, but I know that withFile sets the same modes as openFile, which is at least text mode.
[02:01:54] <boxscape> 😊
[02:02:06] <geekosaur> `` wants an identifier, and 2 isn't one
[02:02:12] <monochrom> withFile is literally doing a bracket over openFile and hClose
[02:02:23] <boxscape_> yes, I understand *why* it doesn't work, I just think it should
[02:02:36] <geekosaur> moreover I suspect you'd be bitten by the implicit fromInteger if it did
[02:02:42] <int-e> dmj`: There's a Hermes package, maybe that's what you wanted? hermes had exactly one upload, https://paste.debian.net/1221574/ is the .cabal file (which is maintained in the append-only index); maybe an accidental 'cabal upload' with misconfigured upstream hackage server?
[02:03:19] <boxscape_> geekosaur I want fromInteger - let's say I have a Num instance for `String -> String -> String` and I write "hello" `2` "world"
[02:03:49] <monochrom> I do guess that locale encoding is the default. You have to say like openBinaryFile or withBInaryFile to get verbatim bytes.
[02:04:06] <geekosaur> and I find the whole notion of wanting a number to behave as an infix weird
[02:04:19] <boxscape_> (to be fair at that point the desugaring would be strange, I admit)
[02:04:43] <dmj`> int-e: hmm,  since there is pending legal action is this package dead in the water? Is it possible the existing lowercase "hermes" package could be removed and allow for a different package to be uploaded? Or is any use of hermes on hackage not permitted whatsoever
[02:05:07] <int-e> dmj`: https://hackage.haskell.org/package/Hermes
[02:05:36] <int-e> hackage is case-sensitive (even though it tries not to be these days, but that happened as an afterthought)
[02:07:16] <int-e> dmj`: I don't really know anything about it, I'm just looking at links and history and hackage's index
[02:08:08] <monochrom> Well, Hermes is deprecated too, if you use it you will have tech debt.
[02:08:24] <monochrom> Not to say that I know what hermes is about in the first place.
[02:08:27] <dmj`> int-e: Okay, maybe I'll ask on #hackage, I'd like to remove the lowercase hermes if possible.
[02:08:30] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:08:45] <int-e> Oh sure, but that's a much more common situation than the suggestion of legal action
[02:09:08] <monochrom> Legal drama on Hackage...
[02:09:18] <dmj`> Didn't realize there was an uppercase Hermes :) the legal action notice on https://hackage.haskell.org/package/hermes is concerning. 
[02:09:38] <int-e> (There doesn't need to be any legal action; if it was an accidental upload, surely hackage maintainers would just erase the upload and block the index page when asked nicely.)
[02:10:04] <dmj`> monochrom: billions in settlements happening I'm sure 
[02:10:07] <int-e> it just says "legal reasons"
[02:10:55] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:11:05] *** Joins: alzgh (~alzgh@user/alzgh)
[02:11:36] <geekosaur> and legal reasons might just be the OtherLicense
[02:11:37] <dmj`> int-e: since it hasn't been touched in almost 7 years I had hoped the lawsuit was settled by now :)
[02:11:59] <maerwald> still waiting for supreme court ruling
[02:12:14] <monochrom> Judge Kattis is my most favourite judge. kattis.com  Plus it is a lovely cat. <3
[02:12:21] <int-e> (I'm basing the idea that it was an accidental upload mainly on the fact that only a single version was ever uploaded.)
[02:13:33] <monochrom> On April 1st, all GHC error messages are amended to say "for legal reasons" >:)
[02:13:46] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:14:20] <monochrom> Could match Int with Bool for legal reasons.
[02:14:25] <monochrom> err, Couldn't!
[02:14:44] <hpc> on april 1st, errors on lines containing "::" should say T_PAAMAYIM_NEKUDOTAYIM
[02:14:51] <monochrom> heh
[02:14:51] <Hecate> monochrom: LOL
[02:14:55] <Hecate> hpc: hahahaahah
[02:15:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[02:15:06] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:15:16] <boxscape> Illegal type family synonym family application in instance for legal reasons
[02:15:29] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:15:36] <int-e> dmj`: It's a different package.
[02:16:35] <int-e> But whatever, I shouldn't care.
[02:18:20] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 252 seconds)
[02:19:06] <dmj`> int-e: I think you're right though, probably just uploaded AllRightsReserved accidentally.
[02:19:15] <dmj`> int-e: Different package, but different author too, so probably wasn't just a fat finger on the capitalization.
[02:20:03] *** Joins: nvmd (~nvmd@user/nvmd)
[02:20:47] <dmj`> I'll ask in #hackage
[02:21:45] <dmj`> "typeclass action lawsuit pending"
[02:22:07] <monochrom> :)
[02:22:15] <dsal> This whole thing about `2` sent me down a strange rabbit hole where I was trying to make a type called `Family` where `2 Fast 2 Furious` is a valid expression.  I got it working, but it's pretty stupid.
[02:22:32] <monochrom> Illegal instance Num [Char] for legal reasons >:)
[02:22:53] *** Quits: Guest1731 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:23:07] <monochrom> Err, would be more funny with Illegal instance Monad ZipList for legal reasons!
[02:24:37] *** Joins: deadmarshal (~deadmarsh@95.38.119.167)
[02:24:48] <monochrom> dsal: Does it also cover "Fast & Furious 6", especially the & and the 6?
[02:25:33] <dsal> Not even type families have strong enough bonds.
[02:26:05] <dsal> This is one of those things I think I could do, but every character I enter seems more stupid than the last.
[02:26:12] <hpc> sysadmins prefer nfs://underground
[02:26:33] <monochrom> That's just because family movies are not Bond movies. >:)
[02:26:43] <dsal> ha
[02:26:57] <int-e> . o O ( NFT is the successor of NFS )
[02:27:21] <dsal> oh no
[02:27:49] <hpc> i wonder what it would take to design a language around the principle of "you only die twice"
[02:27:54] <sclv> for the record: the status is the resolution to this
[02:27:56] <int-e> it's okay, they're both terrible :P
[02:27:59] <sclv> there's no reason to chage or remove it
[02:28:01] <sclv> its fine
[02:28:10] <hpc> some kind of weird linear type system maybe?
[02:28:24] <dsal> Could not impement "Die, Die, Die, my Darling"
[02:28:51] <sclv> in _theory_ we could do a full rewrite and reset of the immutable index to clean out that package and one other like it, and a few spam packages
[02:29:00] <sclv> in practice there's not enough reason to at this point, or really indefinitely
[02:29:09] <monochrom> I think CPU hardware exceptions are designed around "you only die twice". CPUs have this notion of "double fault" when that happens and basically gives up.
[02:29:09] *** Quits: deadmarshal (~deadmarsh@95.38.119.167) (Ping timeout: 252 seconds)
[02:29:13] <hpc> /usr/bin/goldfinger
[02:30:00] <int-e> monochrom: oh but a triple fault gets you out of protected mode and back into real mode on 80286 :P
[02:30:25] <monochrom> That's very Inception-like...
[02:30:42] <hpc> i choose to believe the opposite of real mode is integer mode
[02:30:47] <monochrom> haha
[02:32:34] <davean> monochrom: a triple fault is how you reboot, right?
[02:33:14] <int-e> monochrom: To be clear, it is a CPU reset. But PC BIOSes allowed you to hook into the initialization procedure and take over, so you could recover from that without destroying data or resetting the rest of the hardware.
[02:33:17] <hpc> just fault one more time while the computer is off?
[02:34:13] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[02:34:18] <monochrom> The Fault In Wordstar
[02:35:04] <hpc> sometimes when i finally get all my tests to pass i think "finally everything words perfectly"
[02:35:18] <monochrom> hahaha
[02:35:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:35:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:40:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:44:44] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Ping timeout: 252 seconds)
[02:44:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:47:53] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:48:27] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:49:16] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[02:52:54] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 265 seconds)
[02:54:30] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[02:55:36] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[02:55:40] *** Joins: renzhi (~xp@2607:fa49:6500:b100::5cef)
[02:55:40] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[02:55:56] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:57:11] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a) (Quit: gone to sleep. ZZZzzz…)
[02:57:56] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[02:58:25] *** Quits: _bo (~bo@217.18.216.247) (Quit: Leaving)
[02:58:26] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[02:59:32] *** Joins: kritzefitz_ (~kritzefit@debian/kritzefitz)
[03:01:47] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 256 seconds)
[03:02:30] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:54ac:14f0:5fcb:286d) (Quit: Leaving)
[03:04:29] <hololeap> f [1,2,3,4] [1,2,6,7,8] === ([1,2], ([3,4],[6,7,8]))
[03:04:38] <hololeap> is there a name for this, or something similar?
[03:04:56] <Axman6> that looks very not total
[03:04:59] <Axman6> f [] [] = ?
[03:05:20] *** kritzefitz_ is now known as kritzefitz
[03:05:21] <hololeap> f [] [] == ([], ([], [])) ?
[03:05:30] <Axman6> hmm, yes
[03:05:37] <geekosaur> and do you expect it to nest more tuples in some cases?
[03:05:56] <geekosaur> oh, I see
[03:06:13] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[03:06:30] <hololeap> no, I just want to find a common prefix and return it plus the different suffixes of the two lists
[03:07:17] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a)
[03:07:23] <boxscape> I suppose you're making a trie
[03:07:26] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:07:48] <hololeap> no, not a trie
[03:08:02] <Axman6> it's literally just collecting the headfs and tails right?
[03:08:22] <hololeap> let me see if I can hammer it out real quick
[03:08:33] <hololeap> I'm trying to recreate this: https://hackage.haskell.org/package/system-filepath-0.4.14/docs/Filesystem-Path.html#v:stripPrefix
[03:09:20] <monochrom> Data.List.stripPrefix
[03:09:34] <monochrom> Err I guess not exactly.
[03:09:44] <jackdk> what about https://hackage.haskell.org/package/monoid-subclasses-1.1.2/docs/Data-Monoid-GCD.html#v:stripCommonPrefix ?
[03:10:07] <Axman6> oh, it's the common prefix, right, I understand now
[03:10:15] <jackdk> and then some swizzling to turn the 3-tuple into the shape you actually want
[03:10:16] <Axman6> that does look useful (particularly for tries)
[03:10:45] <jackdk> yeah hololeap pretty sure you want stripCommonPrefix from monoid-subclasses
[03:12:41] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[03:12:48] <monochrom> Go through System.FilePath.splitPath then Data.List.stripPrefix then System.FilePath.joinPath
[03:12:58] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[03:15:17] <hololeap> monochrom: wait, why not just use Data.List.stripPrefix?
[03:16:02] <monochrom> > stripPrefix "/myd" "/mydir/m.mov"
[03:16:03] <lambdabot>  Just "ir/m.mov"
[03:16:11] <hololeap> oh, good point
[03:16:18] <awpr> > stripPrefix "/tmp/" "/tmp//file.txt"
[03:16:19] <lambdabot>  Just "/file.txt"
[03:16:31] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[03:16:39] <Axman6> > stripPrefix "1234" "1256"
[03:16:41] <lambdabot>  Nothing
[03:16:49] <Axman6> I would guess that's why
[03:17:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:17:14] *** Joins: vysn (~vysn@user/vysn)
[03:18:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[03:19:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[03:21:10] *** Quits: jeffz (~user@lambda.xen.prgmr.com) (Remote host closed the connection)
[03:21:17] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[03:26:19] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:27:12] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[03:28:01] <jackdk> % import Data.Monoid.GCD
[03:28:02] <yahb> jackdk: ; <no location info>: error:; Could not find module `Data.Monoid.GCD'; Perhaps you meant Data.Monoid (from base-4.15.0.0)
[03:28:07] <jackdk> ah well
[03:29:29] <jackdk> Prelude Data.Monoid.GCD> stripCommonPrefix [1, 2, 3, 4] [1, 2, 6, 7, 8] -- => ([1,2],[3,4],[6,7,8])
[03:29:52] *** Quits: max22- (~maxime@2a01cb08833598008751b1889105ced7.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:30:07] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[03:31:39] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[03:33:23] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:35:02] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[03:39:33] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[03:51:07] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:55:00] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[04:00:12] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[04:03:16] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e31dccc5136b6b31647.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:06:41] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[04:09:54] *** Joins: Cajun (~Cajun@user/cajun)
[04:13:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[04:15:28] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[04:16:24] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:17:52] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Quit: leaving)
[04:17:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:17:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:17:59] *** Joins: wroathe (~wroathe@user/wroathe)
[04:18:47] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 252 seconds)
[04:20:36] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[04:40:48] *** Joins: slack1256 (~slack1256@191.126.227.74)
[04:40:52] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:43:16] *** Quits: mmhat (~mmh@55d4c042.access.ecotel.net) (Ping timeout: 256 seconds)
[04:46:59] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:51] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[04:49:58] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a) (Quit: gone to sleep. ZZZzzz…)
[04:51:13] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[04:51:48] *** yushyin is now known as yushying
[04:52:06] *** yushying is now known as yushyin
[04:53:03] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a)
[04:53:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[04:55:31] *** Joins: mmhat (~mmh@55d4726e.access.ecotel.net)
[04:59:14] *** Quits: mmhat (~mmh@55d4726e.access.ecotel.net) (Client Quit)
[05:14:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:14:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:14:25] *** Quits: slack1256 (~slack1256@191.126.227.74) (Remote host closed the connection)
[05:19:29] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[05:24:14] <boxscape> % Prelude...
[05:24:14] <yahb> boxscape: ; <interactive>:66:1: error: parse error on input `Prelude...'
[05:24:20] <boxscape> hmm
[05:24:23] <boxscape> didn't get a parse error in ghci
[05:24:36] <boxscape> ah
[05:24:40] <boxscape> % (Prelude...)
[05:24:41] <yahb> boxscape: ; <interactive>:67:1: error:; Not in scope: `Prelude...'; Perhaps you meant one of these: `Prelude..' (imported from Prelude), `Prelude.+' (imported from Prelude), `Prelude.*' (imported from Prelude)
[05:24:57] <boxscape> I'm somewhat surprised that this isn't a parse error, considering .. is reserved
[05:25:36] <boxscape> (So (ModuleName...) is an identifier you can refer to but never define)
[05:25:48] <boxscape> except possibly with template haskell...
[05:26:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[05:33:34] <shapr> Is there any way to save debug/crash info if GHC segfaults?
[05:33:35] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[05:33:39] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[05:37:46] <Axman6> oh no
[05:42:41] <dmj`> "Print Screen"
[05:43:01] <EvanR> quick get a screenshot
[05:43:57] <boxscape> (nope, can't do it with TH)
[05:44:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:44:16] <c_wraith> configure your OS to allow core files?
[05:48:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:54:15] <shapr> c_wraith: do you know if Windows does that?
[05:54:28] <c_wraith> oh.  windows?  unlikely.
[05:58:13] <hololeap> does (..) live in Prelude? I thought it was syntactic sugar
[05:59:00] <EvanR> anyone heard of `basement' and `foundation'... seems like it would be a totally different language using these xD
[05:59:12] <hololeap> the only place I've seen it is ['a'..'z']
[05:59:29] <EvanR> import A (A(..))
[06:00:43] *** Quits: xff0x (~xff0x@2001:1a81:5339:b000:22b1:7654:f125:7b04) (Ping timeout: 252 seconds)
[06:00:46] <hololeap> EvanR: what are you supposed to import when you use basement?
[06:01:25] <iqubic> How does one use basement and foundation? Are those like, replacement preludes.
[06:01:47] <EvanR> disable prelude, import Foundation
[06:01:49] <boxscape> hololeap: you're right, I thought it was that you can refer to Prelude... *because* it's not defined in the Prelude
[06:02:01] <boxscape> s/it was/ it was odd
[06:02:45] *** Joins: xff0x (~xff0x@2001:1a81:5351:7200:ec14:1667:941b:a8bf)
[06:03:16] <boxscape> I would have expected to see something like "illegal variable name"
[06:03:57] <EvanR> ok basement is behind the scenes of foundation. I wonder if it's "yet another alternative prelude"
[06:04:21] <EvanR> but e.g. the Num class is gone, String is a newtype over packed UTF8 bytes
[06:04:45] <EvanR> arrays are just there
[06:05:23] <hololeap> it seems very opinionated, which isn't to say it isn't good or you shouldn't use it
[06:05:46] <boxscape> I guess the one thing that might be annoying is interfacing with other libraries
[06:05:47] <EvanR> yeah I looked through the basement and didn't see anything too questionable
[06:06:07] <hololeap> it seems to have a special use case, probably for making network backends
[06:06:09] <EvanR> Subtractive class uses an associated type synonym for the return type xD
[06:06:41] <EvanR> so you can do Int -> Int -> Int, but Natural -> Natural -> Maybe Natural, or Date -> Date -> Integer
[06:07:24] <EvanR> oh yeah I wonder how you use other libraries at the same time
[06:07:41] <EvanR> well why did I even look at it, it's a transitive dependence for wreq xD
[06:07:56] <jackdk> My personal rule is to never use an altprelude in library code
[06:08:27] <hololeap> is there one that just removes partial functions? I would use that
[06:09:13] <EvanR> the conversion class is split between always works and Maybe works
[06:09:19] <EvanR> From, TryFrom
[06:09:25] <EvanR> Into, TryInto
[06:09:26] <jackdk> I've been pretty happy building on Relude at work, but I just don't think that the risk of the maintainer going AWOL and jamming the update of some library you care about isn't worth it for libs
[06:09:53] <dsal> jackdk: the obvious solution is to make your own prelude.
[06:10:08] <hololeap> jackdk: that's fair, although in a way this is a common problem
[06:11:02] <jackdk> for a larger lib an internal prelude could help with organisation, sure
[06:11:37] <jackdk> and yeah the problem is that Prelude tries to do too many things at once, so it simultaneously feels too big and too small
[06:12:01] <EvanR> if the library only exports new types and doesn't mention any altered base types... seems like the client code would not notice?
[06:12:32] <EvanR> i.e. only use altprelude in secret
[06:12:46] <EvanR> don't ask don't tell
[06:12:53] <hololeap> jackdk: I agree, actually. you can import from libraries that have a specific use. Prelude is basically a meta-import at that point
[06:13:19] <hololeap> which I guess it is already XD
[06:13:37] <jackdk> EvanR: until your altprelude turns out to be maintained by someone who falls behind on maintenance, and then everyone who depends on you is sad
[06:13:54] <EvanR> isn't that an issue with any library you use ever?
[06:13:57] <hololeap> but you get a ton of dependencies and someone has to go through and bump them constantly
[06:15:33] <boxscape> EvanR: I suppose with alt-preludes in particular, it's only a nice-to-have rather than a library you really need to depend on
[06:15:49] <boxscape> so the risk/benefit ratio is different
[06:16:04] <EvanR> the brochure for foundation mentions the changing landscape of GHC base, hence basement that doesn't change. But then this raises the exact issue of who continues to make basement compatible with GHC base as it (supposedly) changes
[06:16:16] <jackdk> EvanR: yes. But altpreludes seem to involve a) a lot of catherding because they often collate stuff from a bunch of libraries, b) by definition provide almost no additional features
[06:16:33] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[06:16:57] <EvanR> this one doesn't have any dependencies and has a lot of features
[06:17:04] <jackdk> Re: "(supposedly) changes" - I keep bumping into libs that claim `build-depends: base >=4.x && <5` but break on GHC9
[06:17:45] <EvanR> so <5 is BS
[06:18:04] <hololeap> I saw <666 once
[06:18:13] <jackdk> at least you know that's evil
[06:18:20] <hololeap> haha
[06:18:41] <jackdk> EvanR: and yet, https://github.com/haskell-foundation/foundation/pull/555#issuecomment-983107899
[06:18:45] <EvanR> "If we all put <5 they can't possibly break all of us"
[06:19:00] <jackdk> (going back to the basement discussion rather than the bounds discussion)
[06:19:23] <jackdk> the low-dependencies altprelude that's actually holding up a bunch of stuff and doesn't work on ghcjs
[06:19:44] <EvanR> that github issue explains a lot
[06:20:12] <EvanR> in particular, the answer to my question "has anyone heard of this" xD
[06:20:28] <EvanR> apparently everyones on board with it, with consequences
[06:20:37] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[06:20:57] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[06:22:07] <EvanR> so base in 9.2 has changed significantly?
[06:22:18] <EvanR> or this is like, a change the version bounds game
[06:22:34] *** Quits: tito (tito@tilde.team) (Ping timeout: 260 seconds)
[06:23:11] <hololeap> is MonadThrow a good choice if you need to be able to throw Exceptions but not any of the regular IO stuff? I haven't see it used a lot
[06:24:07] *** Joins: tito (tito@tilde.team)
[06:24:56] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba290e6b318fffe838f33.dip0.t-ipconnect.de)
[06:25:06] *** Quits: ub (~Thunderbi@p200300ecdf0ba2be089e3f14725e8432.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:25:06] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2bee6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:25:06] *** ubert1 is now known as ubert
[06:25:12] <jackdk> The diff in the PR is at least a partial answer to that question, but I think the further you are off the ground the less the GHC changes will affect you, as the libraries you depend on will maintain APIs
[06:25:24] *** Joins: ub (~Thunderbi@p200300ecdf0ba2909868c7bbf0c5b488.dip0.t-ipconnect.de)
[06:25:57] <jackdk> hololeap: I think so? I see a lot of stuff goes straight to MonadCatch so I think throw-but-not-catch is relatively rare but you're in a compatible ecosystem
[06:27:23] <EvanR> word8ToWordCompat#
[06:27:28] <EvanR> :S
[06:28:39] <EvanR> ok, to be clear, actually using any of this in production is another universe away from my original comment that it was like "very different looking", i.e. String isn't even compatible anymore
[06:29:08] <EvanR> so I'm not even sure it's usable for not-production xD
[06:29:17] <EvanR> unless you're in total isolation
[06:30:00] <hololeap> should there be a IsString instance for SomeException? you could pack some string exception in there
[06:32:00] <hololeap> jackdk: the idea is to have throwM but nothing else so you limit the scope of the function. it also lets me use Either or IO
[06:32:55] <jackdk> hololeap: yeah I think I understand what you're doing, and I think that class gets used a lot
[06:34:31] <hololeap> ok
[06:35:10] <EvanR> is there a difference between throw and throwIO for m=IO
[06:35:42] *** Joins: yauhsien (~yauhsien@2402:7500:5e7:7cb:2978:bff0:cda7:8559)
[06:35:55] <EvanR> oh throwM
[06:36:24] <jackdk> https://hackage.haskell.org/package/exceptions-0.10.4/docs/src/Control.Monad.Catch.html#line-330
[06:36:46] <jackdk> (I found this by going to the "Source" link of the MonadThrow instance for IO)
[06:37:41] <EvanR> yeah nvm
[06:39:02] <EvanR> I like how MonadThrow has a law xD
[06:39:21] <dsal> I feel like it should have throw'M
[06:39:41] <boxscape> somewhat confusing that the haskell-foundation github account doesn't belong to the haskell foundation
[06:40:25] <hololeap> boxscape: I think they meant it as a pun, along the same lines as basement. it's something "underneath" your code
[06:40:42] <boxscape> yeah, they also came along long before the haskell foundation existed
[06:41:24] <EvanR> I was wondering if they had anything to do with haskell foundation
[06:41:50] <EvanR> kind of like w3schools xD
[06:42:38] <EvanR> s/confusing/potential trademark infringement/
[06:45:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:46:33] <hololeap> I like this idea, but where should I put it? http://sprunge.us/xglu0G?haskell
[06:47:39] *** Joins: xkuru (~xkuru@user/xkuru)
[06:49:00] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:50:15] <dsal> Put in a module called Old.Python.Bugs
[06:51:06] <hololeap> I don't understand the sass
[06:51:44] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[06:52:50] <EvanR> shouldn't your IsString instance be on StringException
[06:53:01] <dsal> SomeException itself shouldn't be thrown.  This effectively gets rid of all of the exception hierarchy in a way that'll be very confusing.
[06:53:03] <hololeap> yes, that too
[06:53:20] <dsal> Python used to let you do that, but even in python2, they tell you not to:
[06:53:22] <dsal> TypeError: exceptions must be old-style classes or derived from BaseException, not str
[06:53:56] <dsal> Because using a string instead of a type makes all the things harder.
[06:53:58] <hololeap> dsal: I haven't had a need for the exception heirarchy beyond SomeException. how will this make things confusing?
[06:54:24] <dsal> Catching SomeException is almost always a very bad idea.
[06:55:06] <EvanR> if I was using StringException... I'd throw or catch StringException
[06:55:16] <hololeap> I tried using ExceptT ExceptionA (ExceptT ExceptionB (..)) but this was annoying
[06:55:21] <EvanR> if you put IsString on both, now throwing is ambiguous
[06:55:35] <hololeap> it seems better just to catch SomeException and know what exceptions you're looking for
[06:55:45] <EvanR> that sounds so wrong
[06:55:55] <dsal> The documentation describes this better than I can here:  https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Exception.html#g:4
[06:56:16] <EvanR> catches can let you catch multiple types of exceptions
[06:56:33] <EvanR> and if you don't know what you're trying to catch you're SOL anyway
[06:56:59] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[06:57:06] <hololeap> that's always the case, though. there's no way you're going to account for every single IO exception
[06:57:11] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[06:57:16] <EvanR> traditionally I just hate having my exception handling code running when the exception is god knows what unknown thing I never heard of
[06:57:42] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[06:57:47] <EvanR> no, no one should be accounting for every IO exception
[06:57:57] <EvanR> you can use finally or a bracket to clean up and rethrow
[06:58:01] <boxscape> If I have `data Foo a b = Foo a b`, I can write `Foo Int String` and `Foo' Int String` at the type level to differentiate them. But Int `Foo` String will always refer to the type constructor. Is there a way to use the data constructor as infix on the type level?
[06:58:24] <hololeap> how is that any different from using SomeException?
[06:58:43] <EvanR> I assumed you were trying to catch an exception (and not crash)
[06:58:45] <dsal> This is a thing I noticed in java:  Almost every time someone did a `try` they just wanted `finally` (or had to do dumb wrapper stuff for an API).  `catch` leads to bugs.
[06:59:05] <hololeap> EvanR: you can catch exceptions from SomeException if you tell it what you're looking for
[06:59:26] <boxscape> (pretty sure the answer is no but I want to make sure)
[06:59:26] <hololeap> so how is this any different from IO?
[06:59:27] <dsal> What are you doing when you catch the exception?
[06:59:40] <EvanR> SomeException is always used behind the scenes using dynamic types and the Typable instance for.. what you're looking for. No need to mess with SomeException directly
[06:59:42] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:00:14] <EvanR> if it's a finally type pattern I'd just use finally
[07:00:23] <hololeap> ok, well maybe I should bypass SomeException then
[07:00:41] <hololeap> I thought it was just a convenient wrapper
[07:00:49] <dsal> bracket is almost always what you need.
[07:01:04] <dsal> If you need to continue after exceptions, you need to enumerate the specific conditions you want to continue.
[07:01:05] <EvanR> well unless you're trying to catch a specific exception xD
[07:01:12] <dsal> SomeException includes thread killed, control-c, etc...
[07:01:22] <dsal> Then you end up with programs that you can't stop.
[07:02:29] <EvanR> bracket also deals with async exception masking on your behalf so you don't mess that up
[07:02:38] <EvanR> you don't want an async exception during the exception handler
[07:02:48] <hololeap> EvanR: can't you do the same thing with SomeException as they are doing here with catching MismatchedParenthesis? https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Exception.html#t:Exception
[07:03:34] <EvanR> they throw and catch specific exceptions there
[07:03:38] <dsal> Yeah, you can catch specific exceptions.  I catch application specific exceptions.
[07:03:54] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1d11:e285:317e:6a2a) (Quit: Textual IRC Client: www.textualapp.com)
[07:04:22] <EvanR> and in the example, not crash but continue, another difference
[07:05:22] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[07:05:36] <hololeap> my point is that there is an assumption that you are catching a subset of exceptions that could be thrown, whether you are talking about IOException or more broadly SomeException
[07:06:10] <hololeap> so what is the problem with using SomeException directly?
[07:06:33] <dsal> What are you doing to do when you catch the thread killed or control-c or whatever?
[07:06:34] <EvanR> What are you trying to do again? Catch a specific exception and continue?
[07:06:44] <EvanR> and not catch others
[07:06:53] <hololeap> dsal: nothing if I don't have a catch for it
[07:07:02] <dsal> SomeException *does* catch it.
[07:07:29] <EvanR> catching SomeException and continuing is very bad
[07:07:32] <dsal> That is, catching SomeException does catch it.
[07:07:45] <EvanR> it nullifies all exceptions
[07:07:53] <EvanR> you're program is unkillable xD
[07:08:11] <dsal> It's the secret to making your program live forever.
[07:08:16] <hololeap> I would re-throw it if nothing in the `case` block matched
[07:08:17] *** Quits: td_ (~td@94.134.91.22) (Ping timeout: 256 seconds)
[07:08:21] <EvanR> I haven't see a use case for doing it in any language
[07:08:42] <dsal> Wait, are you reinventing catch / catches?
[07:09:04] <EvanR> catches and bracket etc will handle async masking for you, at least there's that benefit
[07:09:30] <hololeap> the original point was having an IsString instance for SomeException using StringException as the intermediary
[07:09:41] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[07:09:55] <EvanR> I like the idea of having IsString for StringException
[07:10:00] <EvanR> then you can even catch it
[07:10:04] *** Joins: td_ (~td@muedsl-82-207-238-002.citykom.de)
[07:10:08] <dsal> Having a StringException as a different thing isn't terrible.  It just means you have an application-specific exception you can't distinguish sub-values of quite as much.
[07:10:16] <EvanR> (without touching SomeException radioactive waste xD)
[07:10:29] <hololeap> you couldn't catch it if you packed it in SomeException?
[07:10:29] <EvanR> StringException is from UnliftIO
[07:10:42] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[07:10:44] <EvanR> it's not as easily caught and you are messing with fire
[07:10:56] <hololeap> that's a fair point
[07:10:56] <dsal> You just want to basically forget SomeException exists.  :)
[07:10:58] <EvanR> but do it xD
[07:11:20] <dsal> stringException :: HasCallStack => String -> StringException
[07:12:16] <EvanR> I'm always scared of accidentally catching and ignoring stuff like undefined and error
[07:12:32] <EvanR> which I don't even know how to catch and don't want to know
[07:12:44] <hololeap> you are both helping figure this out, so thanks!
[07:12:46] <dsal> The closest I get to that is running code in an async and then reporting what happened.
[07:13:02] <dsal> hololeap: Yeah, sorry if it sounds harsh.  Just avoid SomeException.  It's tempting, but painful.  :)
[07:13:11] <hololeap> no, I appreciate the feedback
[07:13:35] <dsal> async can blow up with any type of exception and then you can just ask how it was.
[07:14:26] <dsal> I wrote a thing that did this and a bunch of tests to make sure various types of runtime and IO exceptions and stuff were handled nicely.  The neat thing is that the supervisor (I used to write a lot of erlang) doesn't actually catch any exceptions.
[07:14:35] <EvanR> actually you can assume async don't throw, and use normal exception handling around the await call xD
[07:14:58] <EvanR> even then you don't have to deal with SomeException
[07:15:05] <hololeap> what monad should be used to catch in? always IO? I find it painful to string together ExceptTs if I need to compose functions that throw different exceptions
[07:15:22] <EvanR> I never thought of trying to catch in anything but IO
[07:15:49] <EvanR> usually failing monads can be handled at the runcall
[07:15:56] <hololeap> I liked the idea of making explicit in the type what kind of exceptions it could throw
[07:16:11] <EvanR> oh god, checked exceptions xD
[07:16:28] <EvanR> java tried that no one liked it
[07:17:37] <EvanR> I feel like the original idea of exceptions was to deal with the fact that usually you don't want to know/deal with all the ways things could fail rarely
[07:17:52] <EvanR> it was too annoying
[07:18:22] <EvanR> but knowing that something MAY throw SOMETHING being in the type is great
[07:18:26] <dsal> I'd think it was a good idea if I never programmed in Java.
[07:18:28] <hololeap> it could be helpful because you can just visually enumerate what you need to catch by reading the file
[07:18:41] <EvanR> wait... that still doesn't sound right
[07:18:45] <dsal> In java, it was like, "Can throw X, Y, Z, or like, anything else."
[07:18:53] <hololeap> not every exception, obviously
[07:19:02] <EvanR> ok yeah
[07:19:10] <Adeon> I've been trying zig for past few days
[07:19:13] <Adeon> it does not have exceptions
[07:19:16] <Adeon> but it does have a nice error system
[07:19:18] <Adeon> "error sets"
[07:19:25] <Adeon> has a similar vibe to checked exceptions
[07:19:27] <EvanR> it would be theoretically nice to see all the possible things something could throw
[07:19:48] <EvanR> but for most of the IO section of the stdlib, that's like ... a lot
[07:19:48] <Adeon> but it tries to make it very frictionless to combine error types etc. so it's very much out of the way
[07:20:08] <hololeap> if it doesn't mention IO except as a black box, that would be helpful
[07:20:45] <hololeap> maybe throw in other large classes of exceptions, like pure exceptions and STM exceptions
[07:20:59] <EvanR> hold on, so we're really talking about application specific "exceptions" defined for use in pure code?
[07:21:08] <hololeap> correct
[07:21:10] <EvanR> like Either on steroids
[07:21:43] <EvanR> now we can get even more thereoretical. Have you heard of extensible variants? xD
[07:21:59] <EvanR> might achieve what Adeon was talking about, if it existed
[07:22:02] <hololeap> I'm somewhat familiar with the concept. extensible sum types, right?
[07:22:20] <Adeon> I think you can do what zig does in haskell but it's probably not nice
[07:22:27] <EvanR> yeah instead of SomeException or defining a lot of exception types, you throw extensible variants
[07:23:07] <hololeap> isn't polysemy supposed to do this? I haven't looked at it yet
[07:23:53] <EvanR> that looks like a free monads lib
[07:24:08] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:25:18] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:25:18] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:25:18] *** finn_elija is now known as FinnElija
[07:26:05] <hololeap> I read this: https://haskell-explained.gitlab.io/blog/posts/2019/07/28/polysemy-is-cool-part-1/
[07:27:07] <dsal> I've still never found that to improve anything.
[07:27:53] <hololeap> dsal: what do you do when it comes to exceptions?
[07:28:08] <EvanR> "let it crash" philosophy xD
[07:28:16] <dsal> I've never even considered polysemy related to exceptions.  :)
[07:28:34] <EvanR> but this doesn't apply to pure code that uses exceptions for fun and profit, which seems beyond me
[07:28:35] <dsal> "let it crash" is pretty good, though.  I had pretty good uptimes in all my erlang code.
[07:28:40] <Adeon> I pretend exceptions don't exist except to make my code work correctly if someone `throwTo` into my code
[07:28:43] <dsal> But erlang is crash-oriented
[07:28:43] <Adeon> I think that's "let it crash"
[07:28:59] <dsal> Yeah, that's basically right.
[07:29:05] <hololeap> I thought that since Either was an "effect" of sorts, you could stack them a little bit less painfuly
[07:29:19] <EvanR> async haskell library gives you similar to erlang stuff, but that's IO oriented
[07:29:55] <dsal> Yeah, you can sneak an async exception across an Asycn boundary.
[07:30:10] <Axman6> I'm not sure I agree Async gives you that. cloud haskell aimed to give you that, but async is quite a different paraidgm from Erlang
[07:30:21] <hololeap> and compose things so that you could combine (Either e a) and (Either f b) into (Either' '[e,f] (a,b)), at least that's what I hoped :)
[07:30:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[07:30:50] <EvanR> I'm sure were talking about two different things now with cloud haskell
[07:31:16] <Axman6> I probably need to read more of the discussion
[07:31:25] <EvanR> this is the exceptions discussion xD
[07:31:30] <dsal> Axman6: I used async that way in a limited fashion.  Run an effect with this input and give me a constrained result.  If you crash then I record that.  If *I* crash dealing with you, then I record that as well.
[07:31:31] <EvanR> and how to or not to deal with them
[07:37:19] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:37:37] *** Joins: on^ (~on@68.101.58.90)
[07:37:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:41:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[07:43:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[07:44:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:53:53] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[07:55:33] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[07:59:25] *** Quits: yauhsien (~yauhsien@2402:7500:5e7:7cb:2978:bff0:cda7:8559) (Remote host closed the connection)
[08:00:21] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[08:01:23] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:03:00] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[08:03:32] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:05:37] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 268 seconds)
[08:07:13] *** Joins: yauhsien (~yauhsien@2402:7500:5e7:7cb:b0e6:1646:3027:d258)
[08:10:01] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:10:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:15:44] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Quit: gone to sleep. ZZZzzz…)
[08:18:24] <EvanR> wait is this an ultimate irony
[08:18:28] <EvanR> No instance for (PrintfArg Foreign.C.Types.CInt)
[08:18:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[08:18:48] <EvanR> arising from printf "whatever = %d\n" myCInt
[08:24:09] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:25:30] <monochrom> Oh haha I see.
[08:25:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[08:25:46] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[08:26:31] *** Joins: Bitters (~Bitters@37.19.211.58)
[08:27:38] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:27:54] <Bitters> not too alive for 705
[08:28:24] *** Parts: Bitters (~Bitters@37.19.211.58) ()
[08:32:31] *** Quits: yauhsien (~yauhsien@2402:7500:5e7:7cb:b0e6:1646:3027:d258) (Ping timeout: 252 seconds)
[08:34:53] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[08:35:04] <Axman6> omg, where did lambdabot go D:
[08:35:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:35:32] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (Quit: ...)
[08:36:17] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[08:36:44] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[08:36:44] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[08:36:44] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[08:38:19] *** Quits: on^ (~on@68.101.58.90) (Remote host closed the connection)
[08:40:07] <jackdk> @botsnack welcome back
[08:40:07] <lambdabot> :)
[08:43:08] *** Quits: dispater (~dispater@user/brprice) (Quit: ZNC 1.8.1 - https://znc.in)
[08:43:14] *** Joins: dlew^ (~dlew@68.101.58.90)
[08:43:26] *** Joins: dispater (~dispater@user/brprice)
[08:43:46] *** Joins: yauhsien (~yauhsien@2402:7500:5e7:7cb:e5c8:bb31:7afd:efa5)
[08:44:50] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:45:11] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:47:55] *** Quits: dispater (~dispater@user/brprice) (Ping timeout: 252 seconds)
[08:49:59] *** Joins: pyook (~puke@user/puke)
[08:49:59] *** Quits: puke (~puke@user/puke) (Killed (strontium.libera.chat (Nickname regained by services)))
[08:49:59] *** pyook is now known as puke
[08:51:25] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Ping timeout: 256 seconds)
[08:51:47] *** Joins: Jing_ (~hedgehog@2604:a840:3::1061)
[08:52:41] *** Quits: Jing (~hedgehog@115.207.46.97) (Ping timeout: 252 seconds)
[08:52:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[08:52:46] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[08:52:47] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[08:52:47] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[08:53:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:54:03] *** Joins: dispater (~dispater@user/brprice)
[08:55:14] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[08:58:13] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[09:01:06] *** Joins: mario (~mario@31.147.205.13)
[09:01:31] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 265 seconds)
[09:02:06] *** Quits: mario (~mario@31.147.205.13) (Remote host closed the connection)
[09:02:21] *** Quits: orcus (~orcus@user/brprice) (Quit: ZNC 1.8.1 - https://znc.in)
[09:03:08] *** Quits: dispater (~dispater@user/brprice) (Ping timeout: 252 seconds)
[09:03:10] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[09:03:57] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:04:58] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[09:05:42] *** Joins: dispater (~dispater@user/brprice)
[09:06:02] *** Joins: orcus (~orcus@user/brprice)
[09:10:11] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[09:12:59] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:15:27] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[09:17:33] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 256 seconds)
[09:19:51] *** gehmehgeh_ is now known as gehmehgeh
[09:24:41] <EvanR> oh wow
[09:25:24] <EvanR> I got screwed on AoC by getting foldr and foldl backwards, it doesn't make a difference on the first part, but does on the second part and I was very confused
[09:26:17] <dsal> Yeah, that does sound confusing.
[09:26:41] <dsal> I like foldr in general, but I don't think about order much.
[09:28:39] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[09:28:49] <EvanR> years of people in this channel challenging every possible interpretation of foldl and foldr xD
[09:30:20] <EvanR> in the end I always just bring up the @src for them 
[09:35:41] *** Quits: yauhsien (~yauhsien@2402:7500:5e7:7cb:e5c8:bb31:7afd:efa5) (Remote host closed the connection)
[09:36:47] <int-e> > foldr (flip (.) . flip f) id [b,c,d] a
[09:36:48] <lambdabot>  f (f (f a b) c) d
[09:38:17] <EvanR> that's the one I thought was right
[09:38:53] <int-e> > foldl f a [b,c,d]
[09:38:55] <lambdabot>  f (f (f a b) c) d
[09:38:58] <EvanR> lol
[09:39:10] <EvanR> also that one
[09:39:29] <c_wraith> foldl is specifically for working with an accumulator you update with each element of the list
[09:39:59] <int-e> explicit recursion exists btw ;-)
[09:40:14] <c_wraith> foldr is for... anything else that traverses the list exactly once
[09:40:36] <iqubic> If an AoC problem is asking me to process a list of commands in order, I usually parse the data into some data structure and then foldl' of them.
[09:41:21] <EvanR> yeah i use foldr a lot for haskelly stuff
[09:41:38] <EvanR> or accumulating but i guess it's usually commutative
[09:41:52] <c_wraith> I wouldn't use foldr for accumulating.  you can blow the stack
[09:41:56] <dsal> I like fold when I can use it or foldMap.  foldr for more general, and foldl when I'm doing stupid AoC stuff that cares about order.
[09:42:16] *** Quits: dispater (~dispater@user/brprice) (Quit: ZNC 1.8.1 - https://znc.in)
[09:42:20] <iqubic> I used foldMap for part 1 of today's problem.
[09:42:25] <c_wraith> like...  foldr (+) is *really* bad for stack use
[09:42:30] <EvanR> no not +
[09:42:34] *** Joins: dispater (~dispater@user/brprice)
[09:42:46] <dsal> None of these problems are big enough for it to make a big difference.
[09:43:53] <dsal> iqubic: It'd be fairly straightforward to do it with `fold`.  Or just like, in the parser.
[09:44:40] <EvanR> I will do 90 laps around the yard and return to internalizing the meaning of folds and their seemingly arbitrary names xD
[09:45:52] <c_wraith> the names are arbitrary, but the function difference is pretty huge.
[09:45:57] <EvanR> yep
[09:47:30] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[09:48:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[09:48:11] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[09:48:24] <int-e> > foldr f a [b,c,d]
[09:48:25] <lambdabot>  f b (f c (f d a))
[09:48:43] <iqubic> Is foldl' (+) bad for memory usage?
[09:48:53] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[09:48:57] <opqdonut> iqubic: no it's great
[09:49:07] <dsal> Just use `sum`
[09:49:13] <dsal> No need to reinvent `sum`
[09:49:19] <opqdonut> yeah that's better for that exact invocation
[09:50:00] <iqubic> sum = getSum . foldMap Sum
[09:50:12] <opqdonut> however for tracking complex state, explicit recursion with bang patterns is both nicer to write and better performing than foldl/foldl' on tuples
[09:50:25] <iqubic> I didn't know that.
[09:50:34] <iqubic> But for Advent Of Code, I don't really care.
[09:50:38] <opqdonut> yeah
[09:51:38] <int-e> iqubic: ah but that's misleading, since it's a class member of Foldable (and even if it were not there'd surely be rewrite rules for it)
[09:52:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[09:54:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[09:54:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[09:54:59] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[09:55:15] *** Quits: orcus (~orcus@user/brprice) (Quit: ZNC 1.8.1 - https://znc.in)
[09:55:15] *** Quits: dispater (~dispater@user/brprice) (Quit: ZNC 1.8.1 - https://znc.in)
[09:55:35] *** Joins: orcus (~orcus@user/brprice)
[09:55:53] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[09:56:03] *** Joins: dispater (~dispater@user/brprice)
[09:57:11] <dsal> iqubic: Fold it in the parser!  :) https://www.irccloud.com/pastebin/L4wAGlf6/fold.hs
[09:57:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[09:57:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[09:57:56] <dsal> iqubic: Also, that's an older implementation.  The latest base does it differently.
[09:58:03] <iqubic> Really?
[09:59:16] <dsal> Data.List has `sum  =  foldl' (+) 0`  but Data.Foldable has `sum = getSum #. foldMap' Sum`
[09:59:39] <iqubic> Right.
[09:59:47] <iqubic> But #. is just ., right
[09:59:55] <dsal> All the people who told you never to use `sum` made you write a bunch of code for no good reason.
[10:00:03] <dsal> foldMap' is the more significant change.
[10:00:25] <dsal> (#.) _f = coerce
[10:00:33] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 256 seconds)
[10:01:59] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[10:02:18] <opqdonut> oh wow that's an absolutely genius definition
[10:03:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:04:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:04:19] *** Joins: mniip_ (mniip@libera/staff/mniip)
[10:04:45] <dsal> It's pretty neat.  Kind of a weird thing where you write code that doesn't actually run but leave it there to be read.  heh
[10:05:24] *** Quits: mniip (mniip@libera/staff/mniip) (Quit: This page is intentionally left blank.)
[10:05:43] *** mniip_ is now known as mniip
[10:06:51] <int-e> crucially, (#.) has a type signature; the `getSum` still matters for type inference
[10:07:02] <opqdonut> yeah
[10:07:58] *** Quits: ubert (~Thunderbi@p200300ecdf0ba290e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:07:58] *** ub is now known as ubert
[10:08:01] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba290e6b318fffe838f33.dip0.t-ipconnect.de)
[10:10:47] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[10:12:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:13:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:14:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:15:09] <EvanR> in retrospect, I'm glad it's foldl so I can use foldl for something xD
[10:15:28] <EvanR> I know it's bad laziness, but doesn't matter in this case
[10:17:06] <iqubic> foldl' is better than foldl. Period.
[10:17:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[10:17:39] <opqdonut> I've been kinda assuming that for something like `foldl (\(s,n) x -> (s+x,n+1)) (0,0) ...` strictness analysis will save my bacon
[10:17:43] <opqdonut> but I haven't actually verified that
[10:17:56] <opqdonut> (might still write foldl', but it wouldn't matter really)
[10:18:06] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:18:19] <opqdonut> maybe I'll check the core for fun
[10:18:40] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[10:20:43] <opqdonut> yeah, -ddump-simpl and I see explicit recursion over an unboxed tuple
[10:21:35] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:21:37] <opqdonut> no, explicit recursion with multiple arguments, just the return value is an unboxed tuple
[10:22:34] <EvanR> foldl' makes no sense if you're implementing list reverse xD
[10:23:15] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[10:23:21] <EvanR> so yeah my solution contains foldl no prime and scary terrifying lazy readFile, it's great
[10:23:40] <EvanR> how haskell should be
[10:23:45] <opqdonut> :)
[10:24:19] <EvanR> -ddump-simpl?
[10:24:23] <EvanR> let me see 
[10:24:29] <opqdonut> yeah
[10:25:04] <opqdonut> you need to squint a bit and ignore some verbosity, but otherwise GHC Core is pretty easy to read
[10:25:20] <iqubic> EvanR: I see you like to live dangerously with foldl no prime.
[10:25:37] <opqdonut> btw I had to specify -O to get the recursion, without it foldl wasn't even getting inlined
[10:25:54] <EvanR> was about to say, it just calls foldl xD
[10:27:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:28:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:28:09] *** Quits: cheater (~Username@user/cheater) (Quit: (BitchX) Terminated.)
[10:31:13] <EvanR> with -O maybe I technically read it, but I have no idea what's going on xD
[10:32:27] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[10:33:18] <EvanR> oh nice, I see it doing a recursion over my tuple
[10:34:04] <EvanR> foldl ftw
[10:35:40] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[10:36:30] *** Joins: michalz (~michalz@185.246.204.33)
[10:36:47] <EvanR> the results of the loop body are returned in an unboxed pair or unboxed triple, cool I guess
[10:37:05] <EvanR> does that still require allocation
[10:37:35] <c_wraith> not for the tuple
[10:37:42] <c_wraith> but what you put inside it might
[10:40:05] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:40:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:42:00] <dsal> I used foldl because I didn't want to import anything.
[10:42:12] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[10:42:21] *** Joins: neurocyte0132889 (~neurocyte@45.128.181.202)
[10:42:22] *** Quits: neurocyte0132889 (~neurocyte@45.128.181.202) (Changing host)
[10:42:22] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[10:42:47] *** Joins: acidsys (~LSD@2.lsd.systems)
[10:44:15] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:46:16] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:49:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:49:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:49:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:54:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[10:56:57] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[10:57:12] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[10:57:32] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:ebd1:d304:8195:da29)
[11:01:05] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:01:49] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:02:25] *** Joins: chele (~chele@user/chele)
[11:03:36] *** Joins: siers (~ij@user/ij)
[11:05:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:06:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:07:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:08:09] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Read error: Connection reset by peer)
[11:09:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:09:58] *** Joins: deadmarshal (~deadmarsh@104.223.98.144)
[11:10:11] *** Quits: xff0x (~xff0x@2001:1a81:5351:7200:ec14:1667:941b:a8bf) (Ping timeout: 252 seconds)
[11:10:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:10:42] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[11:10:59] *** Joins: xff0x (~xff0x@2001:1a81:5351:7200:6aa9:cc6d:b99a:ba9f)
[11:13:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:13:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:15:08] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[11:15:29] *** Quits: deadmarshal (~deadmarsh@104.223.98.144) (Read error: Connection reset by peer)
[11:19:20] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[11:20:11] *** Joins: Farzad (~FarzadBek@37.98.111.153)
[11:26:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:26:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:30:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:30:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:31:39] *** Joins: jamestmartin (~james@jtmar.me)
[11:32:51] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:33:27] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[11:34:38] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[11:37:52] *** Joins: deadmarshal_ (~deadmarsh@68.235.38.163)
[11:38:33] *** Joins: cosimone (~user@93-44-186-55.ip98.fastwebnet.it)
[11:39:09] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 252 seconds)
[11:41:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:42:19] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:43:34] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:45:47] *** Joins: vysn (~vysn@user/vysn)
[11:46:47] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[11:50:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:50:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:51:15] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[11:51:37] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:54:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:54:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:56:23] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:56:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:58:21] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[12:02:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:03:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:03:35] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[12:04:02] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[12:04:50] *** Quits: deadmarshal_ (~deadmarsh@68.235.38.163) (Read error: Connection reset by peer)
[12:08:07] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[12:11:11] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[12:13:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:14:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:15:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:16:45] <mikko> is there a better way to do what the readInstruction function does here? capitalizing strings just to appease the default Read feels icky https://github.com/Andriamanitra/adventofcode2021/blob/main/day02/solution.hs (advent of code day 2 spoilers)
[12:18:09] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[12:18:09] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[12:18:09] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:18:14] *** Joins: dschrempf (~dominik@mobiledyn-62-240-134-39.mrsn.at)
[12:19:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:20:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:20:27] <mikko> by better i mean something that doesn't require me explicitly write "forward" "up" "down" again when they're already known because of the data definition
[12:21:21] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:21:28] <dminuoso> 15:51:04          merijn | boxscape: Yes, but you can never do that for an individual irrefutable pattern
[12:22:33] <dminuoso> Many years ago there was an issue suggesting being able to selectively turn off warnings for a given region. Didn't take long until this was bikeshedded into "If at all, let's bake in some extremely generic diagnostics machinery into GHC rather than just wire it in for a select few diagnostics."
[12:23:08] <dminuoso> Maybe that issue should be relooked at, realistically there's just a handful of warnings where this is even applicable.
[12:23:57] <dminuoso> merijn: Btw, regarding your warning, was that triggered by a singleton data constructor match or a newtype match?
[12:25:25] <boxscape> dminuoso: erm, shouldn't it not fire on either of those, since those wouldn't be incomplete patterns?
[12:30:09] *** Quits: anotherbruce[m] (~anotherbr@2001:470:69fc:105::1:2548) (Quit: You have been kicked for being idle)
[12:30:24] <merijn> dminuoso: Which warning?
[12:30:37] *** Joins: anotherbruce[m] (~anotherbr@2001:470:69fc:105::1:2548)
[12:31:29] <merijn> oh, yesterday. Neither
[12:31:36] <merijn> It was an irrefutable match on Just
[12:32:08] *** Quits: xff0x (~xff0x@2001:1a81:5351:7200:6aa9:cc6d:b99a:ba9f) (Ping timeout: 252 seconds)
[12:33:11] *** Joins: xff0x (~xff0x@2001:1a81:5351:7200:5e3e:87f2:29ae:8612)
[12:35:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:35:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:36:15] *** Joins: alzgh (~alzgh@user/alzgh)
[12:36:50] <dminuoso> I wonder, is Lower Your Guards already fully implemented in GHC?
[12:38:17] *** Quits: Jing_ (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[12:38:24] <eyJhb> Just tried installing haskell-mode for Emacs, and now I can't even type without much delay. I have disabled eldoc, lsp-mode, company-mode but still very sluggish (profiler - https://i.imgur.com/I0ib6Wu.png). Anyone else have had this issue?
[12:38:48] <dminuoso> Oh boy
[12:38:52] *** Joins: Jing (~hedgehog@115.207.46.97)
[12:38:56] <dminuoso> I think it is mostly implemented
[12:39:00] <dminuoso> We even have this dark primitive
[12:39:02] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-Exts.html#v:considerAccessible
[12:39:08] <dminuoso> % import GHC.Exts
[12:39:08] <yahb> dminuoso: 
[12:39:12] <dminuoso> % :t considerAccessible
[12:39:13] <yahb> dminuoso: ; <interactive>:1:1: error: Variable not in scope: considerAccessible
[12:39:13] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:41:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:41:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:42:35] *** Quits: dispater (~dispater@user/brprice) (Ping timeout: 252 seconds)
[12:42:35] *** Quits: orcus (~orcus@user/brprice) (Ping timeout: 252 seconds)
[12:42:49] *** Joins: orcus (~orcus@user/brprice)
[12:43:18] *** Joins: dispater (~dispater@user/brprice)
[12:45:33] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:1242:6edc:4e6a:28bd)
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:39] *** allbery_b is now known as geekosaur
[12:49:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:50:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:53:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:54:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:54:38] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[12:57:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:58:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:59:05] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[13:01:37] <tomsmeding> dminuoso: it's even just defined as True
[13:01:40] <tomsmeding> that's really dark
[13:04:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:04:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:08:04] *** Quits: Farzad (~FarzadBek@37.98.111.153) (Remote host closed the connection)
[13:08:21] *** Joins: Farzad (~FarzadBek@37.98.111.153)
[13:13:58] *** Joins: cfricke (~cfricke@user/cfricke)
[13:17:43] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:18:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:18:40] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e31dccc5136b6b31647.dip0.t-ipconnect.de)
[13:20:50] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:21:58] *** Joins: Guest|44 (~Guest|44@cpc104774-belf12-2-0-cust670.2-1.cable.virginm.net)
[13:22:25] *** Quits: Guest|44 (~Guest|44@cpc104774-belf12-2-0-cust670.2-1.cable.virginm.net) (Client Quit)
[13:23:18] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[13:23:43] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:25:30] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[13:28:17] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[13:28:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:41f2:b4d5:142e:946f) (Remote host closed the connection)
[13:28:28] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:32:26] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[13:32:45] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:33:07] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:34:40] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Client Quit)
[13:35:01] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:35:14] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:35:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:36:32] *** Lord_of_Life_ is now known as Lord_of_Life
[13:38:08] <boxscape> I just realized the hackage bot isn't here - has that been the case ever since the switch to libera?
[13:38:23] <sm> I think so
[13:38:25] <merijn> Even before then, I think
[13:38:31] <boxscape> hm okay
[13:39:49] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:41:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:43:14] *** Joins: mmhat (~mmh@55d45251.access.ecotel.net)
[13:46:09] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[13:46:24] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:48:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:48:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:50:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:51:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:54:49] *** Joins: vpan (~0@212.117.1.172)
[13:55:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[14:00:20] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:05:37] *** Joins: kuribas (~user@ptr-25vy0i85jcl6zvp0ziu.18120a2.ip6.access.telenet.be)
[14:06:29] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[14:08:27] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[14:09:58] *** Quits: ubert1 (~Thunderbi@p200300ecdf0ba290e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:14:44] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:17:27] *** Joins: jakzale (6291399afa@2604:bf00:561:2000::1e4)
[14:22:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:22:33] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:25:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:28:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d)
[14:33:19] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d) (Ping timeout: 252 seconds)
[14:37:12] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[14:38:25] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[14:42:08] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Quit: ZNC 1.8.2 - https://znc.in)
[14:43:16] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[14:46:44] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[14:48:04] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[14:50:01] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:53:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:53:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:55:41] *** Quits: xff0x (~xff0x@2001:1a81:5351:7200:5e3e:87f2:29ae:8612) (Ping timeout: 252 seconds)
[14:56:24] *** Joins: xff0x (~xff0x@port-92-193-253-16.dynamic.as20676.net)
[14:59:11] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 256 seconds)
[15:02:19] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:05:02] *** Joins: jess (~jess@libera/staff/jess)
[15:08:17] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[15:08:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:09:23] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[15:09:42] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[15:09:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:10:32] *** Joins: max22- (~maxime@2a01cb0883359800c40fd24ed5f88e1c.ipv6.abo.wanadoo.fr)
[15:11:19] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[15:12:04] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[15:12:34] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Client Quit)
[15:13:10] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[15:13:21] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[15:14:01] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 252 seconds)
[15:16:29] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[15:16:36] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[15:16:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:16:50] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Client Quit)
[15:17:41] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[15:18:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[15:19:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:20:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:32:33] <merijn> hmmm
[15:32:41] <merijn> Complicated PVP question :p
[15:32:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:32:57] <Hecate> merijn: that is not answered by the FAQ? :p
[15:33:09] <merijn> If you replace the type of a function with a type alias that refers to the same type, is that only a minor bump?
[15:33:15] <Hecate> I don't miss the hackage bot, personally
[15:33:21] <Hecate> merijn: yes
[15:33:26] <Hecate> types are transparent
[15:33:34] <Hecate> as such, they don't cause compile-time breakage
[15:33:48] <Hecate> and modify only half of the GHC errors :P
[15:34:05] <Hecate> that being said unless it's a very complex type I would advise against a type alias
[15:35:17] <merijn> Hecate: I need one to work across GHC with incompatible definitions >.>
[15:35:58] <Hecate> ah so you wish to unify those incompatible definitions by setting the content of the alias based on CPP?
[15:36:01] <Hecate> hmm
[15:36:03] <Hecate> I'd use a newtype tbh
[15:36:04] <Hecate> :(
[15:36:28] <merijn> Hecate: Well, I don't wish that. But that's what the compat library gives me :p
[15:36:44] <merijn> newtype doesn't work, because that won't typecheck
[15:37:31] <Hecate> merijn: can I see the code or is it proprietary?
[15:38:10] <merijn> Hecate: It's about typed TH splices, my code is TH and needs to be accepted by TH splices. But the types of those changed in 9.0, so a newtype can't ever solve/help :)
[15:38:27] <Hecate> ok
[15:38:32] <Hecate> yeah go with it
[15:38:39] <Hecate> PVP is about compilation breakage
[15:41:02] <merijn> We'll see what the CI says :)
[15:44:07] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[15:44:44] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[15:47:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:48:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:48:29] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 252 seconds)
[15:50:09] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:50:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:51:10] *** Joins: unyu (~pyon@user/pyon)
[15:51:31] *** Joins: pc__ (~pc@41.69.129.98)
[15:52:40] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[15:52:45] *** Quits: pc__ (~pc@41.69.129.98) (K-Lined)
[15:56:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:56:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:57:33] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:01:03] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[16:07:11] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[16:08:33] <albet70> why Eq remove /=? what's the benefit?
[16:09:04] <Franciman> why?
[16:09:27] *** Quits: Megant (megant@user/megant) (Ping timeout: 256 seconds)
[16:09:46] <geekosaur> that question is why there are screaming fits thrown over it
[16:09:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[16:10:03] <geekosaur> about the only real benefit is that a 1-entry dictionary can easily be optimized away
[16:10:05] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[16:10:24] <arahael> Of all the breakages I had moving to ghc 9.2.1, /= wasn't one of them - not one of the major ones anyway.
[16:11:05] *** Joins: Megant (megant@user/megant)
[16:11:33] <boxscape> /= is still part of Eq in 9.2.1.
[16:12:01] *** Quits: dlew^ (~dlew@68.101.58.90) (Remote host closed the connection)
[16:12:17] <kritzefitz> albet70: https://github.com/haskell/core-libraries-committee/issues/3 list quite understandable pros and cons. I doubt you will find any enlightenment here, that isn't already listed there.
[16:12:35] <boxscape> but all the breakage it will cause was already identified in the proposal (not that much, since usually people just Eq and otherwise use the default definition of (/=))
[16:13:09] <hpc> they could at least have started with the numeric hierarchy, there's sooooooo much duplication there
[16:13:17] <merijn> boxscape: How about we benchmark and demonstrate it's actually worth it before breaking shit?
[16:13:37] <merijn> boxscape: Right now all we have is a hypothetical optimisation that we're not sure will actually benefit anyone
[16:13:41] <boxscape> merijn: I don't really have an opinion on the change
[16:13:54] <merijn> hpc: Please no >.>
[16:14:19] <merijn> I dislike the Num hierarchy, but any alternatives I've seen so far are all far less practical
[16:14:26] <hpc> merijn: at least then the proposal wouldn't be borderline cosmetic :P
[16:14:52] <merijn> I really hate the amount of superficial cosmetic/syntactical fiddling in recent years
[16:15:42] <merijn> Wish I could nuke it from orbit, together with all the recent record extensions (except for NoFieldSelectors, that one is Actually Good (TM))
[16:16:10] <hpc> what we need is a proposal to make everyone unhappy
[16:16:18] <hpc> move (/=) out of Eq, and replace it with (!=)
[16:16:26] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[16:16:38] <boxscape> move (==) out of Eq, too, while we're at it
[16:16:46] <hpc> yes
[16:16:56] <hpc> all our equality comparisons are typesafe so it should really be (===)
[16:16:58] <kuribas> merijn: hey, I like recordWildCards, duplicateRecordFields, namedFieldPuns, etc...
[16:17:05] <merijn> Proposal to replace == with unsafePtrEquality
[16:17:14] <merijn> kuribas: I said *recent* record extensions
[16:17:24] <kuribas> merijn: which ones?
[16:17:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 252 seconds)
[16:17:30] <merijn> kuribas: RecordWildCards and NamedFieldPuns are ancient
[16:17:35] <kuribas> ah :)
[16:17:39] <hpc> block arguments?
[16:17:48] <merijn> Do you even need DuplicateRecordFields with NoFieldSelectors?
[16:17:50] <merijn> hpc: Also bad
[16:18:08] *** [_] is now known as [itchyjunk]
[16:18:19] <merijn> hpc: "block arguments" is in the category like postfix qualified in imports
[16:18:23] <boxscape> % :set -XNoDuplicateRecordFields -XNoFieldSelectors
[16:18:23] <yahb> boxscape: Some flags have not been recognized: -XNoFieldSelectors
[16:18:31] <boxscape> :(
[16:18:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:18:36] <merijn> hpc: "Woulda been good if we had come up with it earlier and put it in initially"
[16:18:52] <merijn> hpc: But not worth the gratuitous backwards incompat for what they provide
[16:19:08] <hpc> still, it's on the way to becoming default enabled when we finally standardize haskell 2077
[16:19:14] <merijn> I find reading code using block arguments really hard too
[16:19:30] <merijn> So, the more I see it, I'm actually more leaning towards "actually bad if we invented it earlier"
[16:19:51] <merijn> boxscape: NoFieldSelectors is only 9.0 or 9.2, I think?
[16:20:01] <geekosaur> 9.2
[16:20:26] <albet70> "hpc :all our equality comparisons are typesafe so it should really be (===)", how about to introduce javascript's holy trinity? haha
[16:20:45] <merijn> albet70: See acme-php
[16:20:48] <merijn> @hackage acme-php
[16:20:48] <lambdabot> https://hackage.haskell.org/package/acme-php
[16:21:06] <boxscape> % GHC.SysTools.BaseDir.findTopDir Nothing
[16:21:06] <yahb> boxscape: "/srv/sandbox/root/usr/lib/ghc-9.0.1/lib"
[16:21:12] <hpc> i am accepting PRs on acme-php if you want to add it btw :D
[16:22:02] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 252 seconds)
[16:22:08] <albet70> "🟢 merijn :albet70: See acme-php", do u like php better than js? :)
[16:22:13] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[16:23:36] <albet70> now I think python is more powerful, it can return anything I want everywhere
[16:24:26] <boxscape> so can haskell if you use Dynamic
[16:24:47] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[16:25:12] *** Joins: __monty__ (~toonn@user/toonn)
[16:25:26] <hpc> maybe it's time for acme-haskell27
[16:26:33] *** Quits: quintasan (~quassel@quintasan.pl) (Quit: quintasan)
[16:26:43] *** Joins: quintasan (~quassel@quintasan.pl)
[16:29:11] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[16:30:02] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[16:32:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:32:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:34:37] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:34:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:35:39] *** Quits: max22- (~maxime@2a01cb0883359800c40fd24ed5f88e1c.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:36:02] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[16:37:20] <kuribas> You already can return anything everywhere.  You just need to give it the right type :)
[16:37:50] <merijn> unsafeCoerce all the things :p
[16:41:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:41:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:43:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:43:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:45:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:45:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:51:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:51:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:52:19] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:57:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:57:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:01:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:01:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:03:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:03:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:07:01] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[17:12:41] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:12:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:14:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:15:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:16:29] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[17:17:35] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:17:49] <merijn> Finally getting around to looking at some PRs people made to my code and I don't understand why people always feel compelled to fix things that aren't broken...
[17:18:43] <Rembane> Which is the worst one so far?
[17:18:44] *** Quits: dschrempf (~dominik@mobiledyn-62-240-134-39.mrsn.at) (Quit: WeeChat 3.3)
[17:18:57] <merijn> Literally needed to add 6 lines of language pragmas to replace my lambda + case in LambdaCase and replacing all uses of liftM with fmap
[17:19:38] <merijn> Which proceeds to break code that's perfectally functional on everything since, essentially GHC 6.10 to something that only works with like 8.x+ >.>
[17:20:17] <merijn> Like, I'm not deadset on supporting stupid old GHCs, but why break it if it's not necessary for whatever feature you wanna add?
[17:20:21] *** Joins: benin (~benin@183.82.179.164)
[17:20:38] <Rembane> Wow, that's an interesting decision by the person who submitted the PR 
[17:20:40] <maerwald> show me how you install GHC 6.10 on a modern machine
[17:21:32] <merijn> maerwald: My point is: why touch a whole bunch of code that isn't even close to the code you're adding/changing only to make it gratuitously backwards incompatible
[17:21:49] <maerwald> to force people to upgrade their damn GHCs :p
[17:22:18] <merijn> It's just churn unrelated to the actual change in various commits
[17:22:58] <maerwald> I hate it when people nitpick on my PRs and tell me it doesn't work with GHC-not-even-installable... those people can use older hackage state
[17:23:18] <maerwald> or just use stack
[17:24:05] <maerwald> well... the solution is easy: ask them to split their commits properly and just remove the stuff that doesn't add anything 
[17:24:11] <maerwald> they won't even notice you removed it
[17:24:37] <merijn> maerwald: Well, that's part of the problem too. People having shitty commit hygiene
[17:24:46] <maerwald> then you pretend the merge commit swallowed it
[17:26:13] <merijn> Even if people had proper commit hygiene, github PRs suck. WTB mainstream patch based VCS >.>
[17:27:33] <maerwald> why do they suck?
[17:28:44] <merijn> maerwald: Nearly impossible to review individual commits
[17:28:57] <merijn> The only overview/review possibility they give is "everything in the branch"
[17:29:02] <maerwald> how so? you can comment on individual commits
[17:29:15] <maerwald> and I think these comments now show up in the PR even
[17:29:33] <geekosaur> they do but you can't e.g. reject an individual commit
[17:29:42] <maerwald> well, that's obvious
[17:29:43] <geekosaur> without rejecting the whole PR
[17:30:05] <maerwald> because github has now way of knowing how you want to rebase
[17:30:27] <maerwald> it may not even work
[17:30:42] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:ebd1:d304:8195:da29) (Quit: WeeChat 2.8)
[17:31:31] <merijn> maerwald: tbh, I can't figure out how to comment on individual commits either
[17:31:56] <geekosaur> hm, actually that's a good point. you can't comment on *commits*, y6ou comment on individual *diffs*
[17:32:15] <maerwald> merijn: I just did https://github.com/haskell/haskell-language-server/pull/2420
[17:32:50] <merijn> maerwald: That's just part of the final diff AFAICT?
[17:33:24] <maerwald> I commented on the commit
[17:33:58] <maerwald> and github fixes the link to point to those
[17:34:03] <merijn> maerwald: If I click on the corresponding view changes I get taken to the global diff
[17:34:18] <merijn> And I don't see a link to the specific commit or an indication which commit you commented on?
[17:34:20] <maerwald> merijn: nope
[17:34:22] <maerwald> not true
[17:34:38] <maerwald> you're not looking hard enough
[17:34:56] <maerwald> github even has a drop-down showing you're only looking at a specific commit of the PR
[17:34:59] <maerwald> everything is there
[17:35:05] <merijn> well, the fact that I spend 30s starting at your comment and can't figure out how it relates to a commit is already pretty clear evidence the UX is shit
[17:35:26] <maerwald> https://imgur.com/FykkqhE.png
[17:35:41] <maerwald> looks pretty intuitive to me
[17:35:53] <merijn> If I click the "View Changes" button from the PR I get taken to "Changes from all commits"
[17:35:54] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[17:36:05] <maerwald> because I commented on the last commit
[17:36:15] <merijn> So I'm not sure how you got there from the PR comments
[17:36:41] <maerwald> https://github.com/haskell/haskell-language-server/pull/2420/files/5b869fd8087e1d2a6636c3ce183a6cb8f1cfe7de
[17:36:50] <maerwald> you're really trying hard not to get it :p
[17:36:52] <merijn> Anyway, this is doing the opposite of convincing me the github UI for reviews isn't shit
[17:37:11] <maerwald> CHANGES FROM 1 COMMIT
[17:37:17] <merijn> maerwald: I literally went to the PR, looked at the diff you commented my name and clicked on "View Changes"
[17:37:35] <maerwald> I made another comment from a different commit
[17:37:45] <maerwald> at this point I'm convinced you're not trying :p
[17:39:40] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b4e0:9d38:46ba:cc41)
[17:40:53] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Quit: ZNC 1.8.2 - https://znc.in)
[17:41:17] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[17:42:01] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[17:42:35] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[17:46:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:46:20] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[17:46:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:46:38] <boxscape> My favorite controversial use of BlockArguments: Use it on non-monadic expressions to give a function one argument per line https://paste.tomsmeding.com/b2zy3Jw0
[17:47:08] <boxscape> s/of/of `do` with
[17:47:45] <boxscape> (also the paste is missing a `]` at the end)
[17:50:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[17:54:55] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 256 seconds)
[17:55:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[17:56:44] <merijn> Thanks, I hate it
[17:56:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:57:12] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:54db:f79f:90dc:3ee5)
[17:59:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:59:26] <boxscape> I thought you would >:)
[17:59:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:00:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:14f6:792c:9624:6b14) (Ping timeout: 268 seconds)
[18:01:55] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[18:04:20] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 252 seconds)
[18:05:53] *** Quits: Farzad (~FarzadBek@37.98.111.153) (Quit: Leaving)
[18:09:20] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 268 seconds)
[18:10:10] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[18:10:14] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[18:11:40] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[18:12:58] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:12:58] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:12:58] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[18:14:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:14:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:16:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:17:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:20:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:21:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:22:37] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:ebd1:d304:8195:da29)
[18:22:43] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[18:24:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[18:26:03] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[18:27:27] <boxscape> % a | let b | let c | let d = 1 = 2 = 3 = 4
[18:27:27] <yahb> boxscape: 
[18:28:35] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[18:29:29] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:33:31] <boxscape> % [t|Int ::: String|]
[18:33:31] <yahb> boxscape: AppT (AppT (ConT Ghci25.:::) (ConT GHC.Types.Int)) (ConT GHC.Base.String)
[18:33:38] <boxscape> why is this nested AppT rather than InfixT?
[18:35:33] <geekosaur> doesn't InfixT only happen afterward when fixity is known?
[18:35:46] <geekosaur> but ghci and probably TH mess that up
[18:37:11] *** Joins: max22- (~maxime@2a01cb0883359800118b3200b4a756c8.ipv6.abo.wanadoo.fr)
[18:38:12] <geekosaur> or maybe it's the other way around. I don't really know how that works, only that fixity gets applied only late becuase it might not be known until the end of the file
[18:39:41] <boxscape> hmm right
[18:39:49] <boxscape> it seems to work differently for expressions though
[18:40:00] <boxscape> % [e|1 + 3|]
[18:40:00] <yahb> boxscape: InfixE (Just (LitE (IntegerL 1))) (VarE GHC.Num.+) (Just (LitE (IntegerL 3)))
[18:40:10] <boxscape> okay wait that's because it knows this name
[18:40:48] <geekosaur> mm, so it knows fixity and my first one was probably correct
[18:41:28] <boxscape> % [t|Int GHC.TypeLits.<= String|]
[18:41:29] <yahb> boxscape: AppT (AppT (ConT GHC.TypeNats.<=) (ConT GHC.Types.Int)) (ConT GHC.Base.String)
[18:41:34] <boxscape> 🤔
[18:41:48] <boxscape> that produces Data.Type.Ord.<= in HEAD
[18:41:51] <boxscape> guess I'll report a bug
[18:42:01] <boxscape> oh wait
[18:42:04] <boxscape> it's fine
[18:42:12] <boxscape> I thought it was Data.Ord
[18:42:38] <boxscape> in any case, you'd think it would know fixity for this one geekosaur , so I think it never does it for types
[18:44:21] *** Joins: Guest29 (~Guest29@84.212.204.195)
[18:45:02] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e31dccc5136b6b31647.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:47:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:47:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:47:59] *** Quits: Guest29 (~Guest29@84.212.204.195) (Quit: Client closed)
[18:49:12] *** Quits: puke (~puke@user/puke) (Quit: puke)
[18:49:35] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Read error: Connection reset by peer)
[18:49:54] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[18:50:46] <geekosaur> actually that makes me wonder, would it require an early fixity declaration for type level fixity to work?
[18:52:18] <boxscape> % [t|1 : 2 : 4 : '[]|] -- it seems to be able to figure it out
[18:52:18] <yahb> boxscape: AppT (AppT (PromotedT GHC.Types.:) (LitT (NumTyLit 1))) (AppT (AppT (PromotedT GHC.Types.:) (LitT (NumTyLit 2))) (AppT (AppT (PromotedT GHC.Types.:) (LitT (NumTyLit 4))) PromotedNilT))
[18:53:52] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:55:43] <boxscape> % [e|a ++++ b ++++ c|] -- assuming infixl 9 here I supppose
[18:55:43] <yahb> boxscape: InfixE (Just (InfixE (Just (VarE Ghci24.a)) (UnboundVarE ++++) (Just (UnboundVarE b)))) (UnboundVarE ++++) (Just (UnboundVarE c))
[18:57:45] *** Quits: xff0x (~xff0x@port-92-193-253-16.dynamic.as20676.net) (Ping timeout: 256 seconds)
[18:58:03] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Quit: gone to sleep. ZZZzzz…)
[18:58:42] *** Joins: Farzad (~FarzadBek@94.74.153.97)
[19:00:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:00:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:01:33] <merijn> cabal.project can't have fields conditional on compiler version, right?
[19:03:03] <maerwald> no
[19:03:17] <maerwald> I'm also not sure what my opinion on that feature is
[19:03:49] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[19:04:17] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[19:04:19] <maerwald> with the include feature you could easily re-use cabal.project code and supply multiple per-ghc files... then you still have the burden of telling cabal which one to use
[19:04:24] <EvanR> can somebody sanity check me on this. The AudioSpec record type in SDL has a field with a hidden type variable for sample format. So the accessor doesn't work. And the record constructor is not exported for some reason. Is there no way to access this field?
[19:04:27] <boxscape> geekosaur: btw, it has to know the fixity to convert to double AppT as well, so that doesn't seem like a good reason to avoid InfixT
[19:05:30] *** Quits: Jing (~hedgehog@115.207.46.97) (Quit: Textual IRC Client: www.textualapp.com)
[19:05:39] <merijn> maerwald: I'm just trying to find a way to specify per-GHC flags for CI, as Haskell-CI doesn't currently support it and "manually modifying the generated CI file" is something I wanna try and avoid
[19:05:42] <boxscape> It has UInfixT to deal with unresolved fixities
[19:05:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:05:57] <maerwald> Use github actions
[19:06:00] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:06:01] <merijn> maerwald: So I was just wondering, because haskell-ci does support copying fields from cabal.project
[19:06:02] <maerwald> matrices are easy
[19:06:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:06:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:06:23] <merijn> maerwald: haskell-ci generates github actions scripts already
[19:06:30] <yin> wasn't there an extension that let you partially applicate (-) if you leave a space between the argument?
[19:06:33] <maerwald> never used haskell-ci
[19:06:36] <geekosaur> but would it know what to do with a conditional fied?
[19:06:40] <geekosaur> *field
[19:06:54] <geekosaur> yin: LexicalNegation
[19:07:09] <merijn> geekosaur: I mean, making a PR to handle that case is simpler then designing an interface for this from scratch :p
[19:07:37] <EvanR> since the sdl2 package has been like this for 6 years, I question whether I am missing something
[19:07:57] <geekosaur> there were several other negationb-related extensions but they got subsumed
[19:08:16] <geekosaur> at one point we were up to 4 negation-related extensions all with slightly different behavior
[19:08:28] <merijn> Hot take: Not requiring spaces around operators was a mistake
[19:08:45] <boxscape> likely true
[19:08:49] <geekosaur> there's a ghc proposal to more or less that extent currently
[19:08:53] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[19:08:55] <geekosaur> may even have made 9.2
[19:09:11] <EvanR> whitespace relevance intensifies
[19:09:24] <geekosaur> I think merijn was complaining about it theother day because it broke working code
[19:10:01] <merijn> geekosaur: Hot take #2: Fixing said mistake now is a mistake
[19:10:02] *** Joins: xff0x (~xff0x@2001:1a81:5351:7200:6ba7:7a98:a1da:e88f)
[19:10:23] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Ping timeout: 268 seconds)
[19:11:20] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:12:17] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[19:13:26] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[19:14:15] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 256 seconds)
[19:14:54] <boxscape> EvanR: it probably has something to do with this existential type. But that's also not exported... https://hackage.haskell.org/package/sdl2-2.5.3.0/docs/src/SDL.Audio.html#AnAudioFormat
[19:16:03] <boxscape> which makes me think that maybe the field really is only meant for internal use
[19:17:30] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:20:21] <EvanR> it is exported
[19:20:35] <boxscape> oh
[19:20:38] <EvanR> that's why I get a type error and not a 'not found error', unlike the samples field xD
[19:20:44] <EvanR> which is inexplicably not exported
[19:20:55] <boxscape> I meant "AnAudioFormat" is not exported
[19:20:56] <EvanR> maybe the "intentionally didn't export" the wrong one
[19:21:25] <EvanR> didn't even know AnAudioFormat exited...
[19:21:46] <EvanR> you have to provide the AudioFormat type to the api
[19:22:00] <boxscape> that's why I linked to it :)
[19:22:10] <boxscape_> hmmm
[19:22:38] <EvanR> it just looks like a botched export list, doing a PR
[19:22:48] <EvanR> though my other PR has sat there for 2 years xD
[19:22:51] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Quit: WeeChat 3.3)
[19:22:56] <boxscape> oof
[19:24:15] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:25:43] <yin> where can i find an updated list of all record syntax goodies? like field matching and whatever?
[19:26:26] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/records.html ?
[19:26:54] <geekosaur> although that won't include stuff in the standard, just ghc extensions
[19:33:00] <yin> ah. i am interested in the standard
[19:33:37] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d)
[19:35:17] <geekosaur> https://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-490003.15
[19:35:22] <yin> that's fine, the examples in NoTraditionalRecordSyntax suffice!
[19:35:36] <yin> :)
[19:37:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:38:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d) (Ping timeout: 252 seconds)
[19:41:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:41:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:41:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:43:17] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[19:43:24] <geekosaur> also, fixing it now may be a mistake in some sense but we now have so many things that require space disambiguation that it's better to fix it once and for all instead of every special case being, well, special
[19:43:34] <geekosaur> starting already with BangPatterns back in 6.x
[19:44:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:44:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:44:47] *** Quits: Farzad (~FarzadBek@94.74.153.97) (Ping timeout: 256 seconds)
[19:45:18] <boxscape> Did they have additional problems over irrefutable patterns?
[19:46:03] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:46:10] <geekosaur> hm?
[19:48:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:48:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:48:51] <boxscape> Irrefutable patterns also seem like a special case so I was wondering why we're starting with Bang patterns rather than irrefutable patterns
[19:50:33] <janus> mikko: you could theoretically use DerivingVia trick to specify that you want the 'Read' instance to use lower case
[19:50:34] <geekosaur> I think you can't use ~ as an operator anyway, which is how the Report resolved it
[19:50:54] <janus> mikko: waargonaut probably does it with json
[19:51:04] <boxscape> I see
[19:51:05] <janus> matt parsons has a blog post on it
[19:51:11] <geekosaur> which is probably why they borrowed it at type level for type equality
[19:51:18] <boxscape> right, make sense
[19:51:31] <boxscape> % let (~) = (+) in 1 ~ 2
[19:51:31] <yahb> boxscape: 3
[19:51:36] <boxscape> not true anymore though
[19:52:11] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[19:52:12] <janus> doesn't compile with warnings though ;)
[19:52:15] <geekosaur> right, wonder if that came in at the same time they started using it at type level. would be interesting to see if that worked in 6.x
[19:52:44] <geekosaur> I think it used to throw an error about pattern syntax in expression context
[19:53:04] <boxscape> it doesn't work on tryhaskell.org
[19:53:38] <geekosaur> but for all that they're different, there are a lot of similarities between type and term level these days and that's why I suspect it came in when ~ on type level did
[19:53:51] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:56:33] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:57:05] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Ping timeout: 252 seconds)
[19:57:21] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[20:00:01] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 252 seconds)
[20:02:48] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[20:08:34] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:ebd1:d304:8195:da29) (Quit: WeeChat 2.8)
[20:09:11] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 252 seconds)
[20:09:45] *** Joins: cheater (~Username@user/cheater)
[20:11:16] *** Joins: gensyst (gensyst@user/gensyst)
[20:11:22] <gensyst> I have a long .hs file which tells a story, i.e. the order of the functions and comments is important. By splitting it into multiple files, I'd lose the "storyline" because I'd lose the order because the module filenames wouldn't necessarily preserve the order.
[20:11:25] <gensyst> Any ways around this?
[20:11:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:12:37] <geekosaur> is it necessary to split it in the first place?
[20:13:07] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[20:13:42] <c_wraith> there isn't actually a maximum size on modules in haskell
[20:13:51] <geekosaur> if it is, I'd probably take care to name the modules to keep the order, possibly by using hierarchical namespace
[20:13:54] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[20:14:41] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[20:15:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:15:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[20:17:59] <boxscape> % Proxy @($(pure $ TH.UInfixT (TH.ConT $ TH.mkName "Int") (TH.mkName "':|") (TH.ConT $ TH.mkName "Any")))
[20:17:59] <yahb> boxscape: ; <interactive>:94:10: error:; * Illegal type constructor or class name: ':|; When splicing a TH type: (Int ':| Any); * In the untyped splice: $(pure $ TH.UInfixT (TH.ConT $ TH.mkName "Int") (TH.mkName "':|") (TH.ConT $ TH.mkName "Any"))
[20:18:04] <boxscape> is there a way to make this work?
[20:18:20] <boxscape> I have to use UInfixT because I don't know the fixity of the operators I'm handling
[20:19:04] <boxscape> and I have to distinguish them from type constructors (so I can't just use `TH.mkName ":|"` without the tick) because I don't know if a type constructor with the same name is in scope
[20:19:05] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 252 seconds)
[20:20:01] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[20:20:31] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[20:21:12] <boxscape> And I cannot look up the global name of the operator because the package containing might not even be installed while generating this code
[20:21:12] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[20:21:24] <boxscape> s/containing/containing it
[20:21:41] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[20:22:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:22:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:22:56] <janus> csaba's talk on the external spineless tagless g-machine starts in 20 minutes: https://skillsmatter.com/meetups/13654-haskell-stg-interp
[20:23:03] <janus> or rather, 8 minutes
[20:23:18] <janus> (minutes in decimal notation)
[20:24:58] <boxscape> I think this is impossible, in which case I suppose I'll probably just open a ticket to add support for promoted names in UInfix
[20:26:13] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[20:26:14] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 268 seconds)
[20:27:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:28:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d)
[20:29:40] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[20:33:03] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:38:34] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b4e0:9d38:46ba:cc41) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:39:35] *** Joins: benin (~benin@183.82.179.164)
[20:43:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:44:10] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[20:45:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:45:26] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:46:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[20:46:45] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[20:50:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:50:17] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[20:50:23] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[20:50:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:51:31] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[20:51:57] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Quit: gone to sleep. ZZZzzz…)
[20:52:58] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[20:53:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:54:56] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:55:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:56:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:56:22] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b4e0:9d38:46ba:cc41)
[20:57:19] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 256 seconds)
[20:59:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:59:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:59:54] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Remote host closed the connection)
[21:00:18] <EvanR> on an old random blog I found a surprising feature related to blocking unsafe ffi calls "non-threaded runtime has an SIGALARM timer that interrupts (most) blocking system calls"
[21:00:41] <EvanR> the safe unsafe ffi plot thickens
[21:00:55] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[21:01:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:01:55] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[21:02:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:03:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:04:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:05:17] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:1242:6edc:4e6a:28bd) (Ping timeout: 252 seconds)
[21:05:42] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:07:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:07:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:08:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:08:33] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[21:09:31] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:11:33] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:11:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d) (Remote host closed the connection)
[21:11:55] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[21:12:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d)
[21:13:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:13:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:13:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:14:35] <yin>     • Couldn't match expected type ‘GHC.Exts.Item a0’
[21:14:51] <yin> ^ what does this mean ?
[21:14:51] *** Joins: deadmarshal (~deadmarsh@95.38.119.253)
[21:15:01] <yin> it's just a (Int,Int)
[21:15:58] <hippoid> why is 'join.fmap return' not the same as '(join.fmap) return' - since function application is left associative, I thought join.fmap return would be (join.fmap) return, but it's actually join.(fmap return).  What am I missing?
[21:16:05] <hippoid> :t join.fmap return
[21:16:05] <lambdabot> Monad m => m a -> m a
[21:16:10] <hippoid> :t join.(fmap return)
[21:16:11] <lambdabot> Monad m => m a -> m a
[21:16:17] <hippoid> :t (join.fmap) return
[21:16:18] <lambdabot> error:
[21:16:18] <lambdabot>     • Occurs check: cannot construct the infinite type: m ~ (->) (m a)
[21:16:18] <lambdabot>       Expected type: (a -> m1 a) -> m (m (m1 a))
[21:16:47] <dolio> Because operators are always looser than function application.
[21:17:19] <hippoid> so I shouldn't consider (.) to be a function?
[21:17:21] <[exa]> yin: a tiny piece of source around could help, this looks like GHC.Exts.Item can't be evaluated because a0 is unknown
[21:17:26] <yin> :t (join .) fmap return
[21:17:27] <lambdabot> error:
[21:17:27] <lambdabot>     • Occurs check: cannot construct the infinite type: m ~ (->) (m a)
[21:17:27] <lambdabot>       Expected type: (a -> m1 a) -> m (m (m1 a))
[21:17:51] <dolio> "Function application" means prefix function application in this case.
[21:18:01] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[21:18:03] <yin> :t (.) join fmap return
[21:18:04] <lambdabot> error:
[21:18:04] <lambdabot>     • Occurs check: cannot construct the infinite type: m ~ (->) (m a)
[21:18:04] <lambdabot>       Expected type: (a -> m1 a) -> m (m (m1 a))
[21:18:23] <yin> :t (.) join (fmap return)
[21:18:24] <lambdabot> Monad m => m a -> m a
[21:18:31] <yin> there you go ^
[21:18:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:19:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:19:15] <[exa]> hippoid: (.) is not a function application
[21:20:09] <hippoid> is (.) a function?
[21:20:17] <yin> yes
[21:20:21] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[21:20:23] <yin> however
[21:20:37] <yin> f = join . fmap return
[21:21:02] <yin> means that f x === (join . fmap return) x
[21:21:16] <yin> and when you write it in ghci it gives you
[21:21:33] <hippoid> yin: following so far
[21:22:18] *** Joins: pfurla (~pfurla@201.17.118.230)
[21:22:37] <yin> :t (join . fmap return)
[21:22:38] <lambdabot> Monad m => m a -> m a
[21:22:50] *** Quits: pfurla (~pfurla@201.17.118.230) (Client Quit)
[21:24:21] <yin> not sure what your intention is
[21:24:47] <[exa]> hippoid: probably better compare 'join.fmap return' with 'join$fmap return' (which is a slightly rewritten version of your 2nd snippet)
[21:25:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:25:25] *** Joins: imdoor (~imdoor@balticom-142-78-50.balticom.lv)
[21:26:04] <hippoid> i still dont get it. I  mean `(.) join fmap` seems like function application to me, even if it doesn't type check
[21:26:43] <yin> :t fmap return
[21:26:44] <lambdabot> (Monad m, Functor f) => f a -> f (m a)
[21:27:10] <yin> :t (.) (join) (fmap return)
[21:27:11] <lambdabot> Monad m => m a -> m a
[21:27:29] <yin> (join) and (fmap return) are the arguments to (.)
[21:27:47] <[exa]> hippoid: yeah, 2 function applications in fact
[21:28:35] <yin> this is the order of application: (join) . (fmap return)
[21:29:12] <yin> what's in parens gets computed first
[21:29:21] *** Quits: imdoor (~imdoor@balticom-142-78-50.balticom.lv) (Client Quit)
[21:29:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:29:40] *** Joins: imdoor (~imdoor@balticom-142-78-50.balticom.lv)
[21:29:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:29:58] <hippoid> what i'm trying to understand is why is the expression parsed that way. does it have to do with precedence rule?
[21:30:04] <[exa]> hippoid: just to be sure, what precisely you don't get? the 2 programs you wrote there are both syntactically and semantically different, it looks like you're assuming the . in the middle is something like function application, but that's not -- it's an operator
[21:30:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:30:29] <yin> function application takes precedence over fixity
[21:30:35] <[exa]> hippoid: the "spaces" between can be reimagined like function application operators, and in 'join . fmap return' there is only one
[21:30:58] <yin> ^ that
[21:31:07] * yin speak broken english
[21:31:14] <[exa]> hippoid: so there really isn't any point at trying associativity. On the other hand, as yin, pointed out---
[21:31:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d) (Remote host closed the connection)
[21:31:39] <monochrom> Parsing is always about precedence rules.
[21:31:55] <[exa]> join . fmap return ==  (.) join (fmap return) ==(highlighting associativity)== ((.) join) (fmap return)
[21:32:02] <hippoid> ok i need to get more clear on the ideas of fixity and operators
[21:32:29] <yin> or...
[21:32:40] <yin> :t (join .) (fmap return)
[21:32:41] <lambdabot> Monad m => m a -> m a
[21:32:52] <yin> fun
[21:32:55] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:33:01] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[21:33:03] <[exa]> hippoid: a nice example for playing with parentheses:   negate 3 + 4   vs    negate (3+4)
[21:33:05] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[21:33:24] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:33:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[21:33:30] <hippoid> i wonder what concept i'm missing... is expression parsing, fixity, operators, or something else
[21:34:15] <[exa]> hippoid: the first of the example reads '(negate _APP_ 3) + 4', the second reads 'negate _APP_ (3+4)'.
[21:34:24] <monochrom> In ghci you can use :info to ask operator precedence. Try :info +
[21:34:43] <monochrom> Bigger number is higher precedence.
[21:34:55] <monochrom> If it doesn't say, the default is "infixl 9"
[21:35:17] <[exa]> hippoid: the _APP_ is "hidden" in normal expressions for making the code nice, but you should remember that any 2 things without an operator between them will make a highest-priority function application
[21:35:21] <hippoid> and function application has the highest precedence?
[21:35:24] <[exa]> yes
[21:35:28] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[21:35:28] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[21:35:28] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:35:57] <hippoid> ahh ok, something is starting to click. 
[21:36:03] <[exa]> like, this is a pretty common point of confusion, takes a bit of time to get used to that
[21:36:21] <hippoid> i'm going to play with the different examples you all put into the chat
[21:36:26] * yin whishes ' ' = _APP_
[21:36:32] <hippoid> thanks so much!
[21:37:11] <monochrom> Unfortunately the "space = function application" model breaks easily as soon as you try for example:
[21:37:26] <monochrom> > map(\x->x+1)[3,4,5]
[21:37:28] <lambdabot>  [4,5,6]
[21:37:54] <monochrom> No space at all.
[21:38:12] <yin> map (\x->x + 1) [3,4,5]
[21:38:13] <[exa]> hippoid: I'm showing this with small "implicit apply operator" to students on first few courses, like: negate⏝3+4
[21:38:21] <yin> ^i wish we *had* to write it like this
[21:38:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:38:45] <hippoid> > map \x->x+1 [3, 4, 5]
[21:38:46] <monochrom> The better model is: juxtaposition (so, lack of syntax) is function application. (In suitable contexts anyway.)
[21:38:47] <lambdabot>  error:
[21:38:47] <lambdabot>      Unexpected lambda expression in function application:
[21:38:47] <lambdabot>          \ x -> x + 1 [3, 4, ....]
[21:39:09] <monochrom> > length"hello"
[21:39:10] <[exa]> hippoid: there you were calling function `1` with parameter `[3,4,5]` :]
[21:39:10] <lambdabot>  5
[21:39:17] <gensyst> geekosaur, no there's really no need to split it :D
[21:39:39] <gensyst> but it has a few separate, but related, concept.
[21:39:46] <gensyst> the relation forms the "story", so to speak
[21:40:01] <gensyst> for filename ordering, it's pity module names can't start with number
[21:40:02] <yin> and then you learn about qualified dot and record dot... :'(
[21:40:29] *** Quits: xff0x (~xff0x@2001:1a81:5351:7200:6ba7:7a98:a1da:e88f) (Ping timeout: 252 seconds)
[21:40:32] <[exa]> yin: ssshh :] no complications now :D
[21:40:33] <geekosaur> but you could say S1-Foo etc.
[21:40:57] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 256 seconds)
[21:41:04] <gensyst> geekosaur, yeah i could. i'll think about it. thanks!
[21:41:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:41:13] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[21:41:14] *** Joins: xff0x (~xff0x@port-92-193-253-16.dynamic.as20676.net)
[21:41:14] <yin> you can also use Enum
[21:41:26] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[21:41:26] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[21:41:26] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:41:27] <yin> and name your files A-Z
[21:41:41] <yin> or whatever
[21:41:47] <monochrom> On the bright side, it is intuitive that lack of syntax binds tighter than presence of syntax.  foo"hello"  $  sin(x)  is very intuitively "$ is the most loose one".
[21:41:57] *** Joins: econo (uid147250@user/econo)
[21:43:09] <geekosaur> well, the advantage of my suggestion is the module names could then be part of, or at least summarize parts of, the "story"
[21:43:26] <monochrom> > zip"abc""def"
[21:43:27] <lambdabot>  [('a','d'),('b','e'),('c','f')]
[21:44:18] <xerox> in C that wouldn't work
[21:44:26] <monochrom> That's got to be my latest most favourite example :)
[21:44:39] <[exa]> pls spaces
[21:44:47] <geekosaur> @quote zip`ap
[21:44:47] <lambdabot> quicksilver says: zip`ap`tail the aztec god of consecutive numbers
[21:45:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:45:35] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[21:46:03] <yin> i don't undestand this error: https://paste.jrvieira.com/1638468946485
[21:46:29] <monochrom> Uh which line is line "45"?
[21:46:39] <xerox> just after 44
[21:47:05] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[21:47:06] <yin> sorry, it's 17
[21:47:21] <yin> i forgot to edit it there also
[21:47:32] <yin> i edited it in the error for convenience ;)
[21:48:55] <monochrom> What is the type of aim?
[21:49:08] <yin> Int
[21:49:41] <yin> it's right there in Stt
[21:49:46] <geekosaur> seems like it should error on that and not the first tuple if it were that tyope mismatch
[21:49:50] <geekosaur> *type
[21:49:59] <monochrom> So I would think "[(x,y), (aim :: Int but not even a tuple), (k,n)]" cannot be well-typed.
[21:50:01] *** Quits: deadmarshal (~deadmarsh@95.38.119.253) (Ping timeout: 252 seconds)
[21:50:02] <[exa]> yin: did you try with a different operator than # ?
[21:50:05] <geekosaur> and I don't see where Item came in
[21:50:23] <yin> ho
[21:50:26] <yin> i see my mistake now
[21:50:28] <yin> ll
[21:50:31] <[exa]> # is used for ghc-internal magicks, not sure if it's safe to overload it like this
[21:50:46] *** Joins: zebrag (~chris@user/zebrag)
[21:50:47] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[21:50:50] <monochrom> # is fine if you don't turn on MagicHash
[21:50:59] <geekosaur> it's safe as long as MagicHash isn't enabled
[21:51:01] <yin> thanks monochrom 
[21:51:07] <[exa]> ah okay good
[21:51:10] <monochrom> > let x # y = y/x in 2 # 4
[21:51:11] <lambdabot>  2.0
[21:51:37] * [exa] starts using #
[21:52:04] <monochrom> > let x #! y = 2*x+y in 2 #! 4
[21:52:06] <lambdabot>  8
[21:52:16] <yin> that wasn't supposed t be a list. []s for ()s
[21:52:22] <yin> sorry
[21:52:34] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[21:52:41] <yin> time to go eat something
[21:53:05] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[21:55:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:57:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:57:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[21:57:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:57:44] <Profpatsch> I have a GADT like
[21:57:47] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:57:54] <Profpatsch> data G a where
[21:58:03] <Profpatsch>   Simple :: G Text 
[21:58:21] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[21:58:22] <Profpatsch>   List :: a -> G [a]
[21:58:41] <Profpatsch> Now, I can see that it can either be G Text or G [Text]
[21:59:20] <Profpatsch> And I want to `show` my `a` that comes from `G a`
[22:00:20] <Profpatsch> But I can’t rely on the information that all of my `a`s are always showable if I have a `G a`. Or can I?
[22:01:23] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[22:01:44] <Profpatsch> Okay wait my List cnostructor was wrong
[22:01:48] <Profpatsch>   List :: G a -> G [a]
[22:02:39] *** Joins: jasonmason (~bc8165b6@cerf.good1.com)
[22:02:51] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[22:03:29] *** Joins: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net)
[22:03:32] *** Quits: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net) (Max SendQ exceeded)
[22:03:47] <monochrom> Have you tried?
[22:03:49] *** Joins: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net)
[22:03:59] *** Quits: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net) (Max SendQ exceeded)
[22:04:07] <monochrom> Apparently, "instance Show (G a) where ... show (List x) = show x" is accepted.
[22:04:18] *** Joins: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net)
[22:04:38] *** Quits: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net) (Max SendQ exceeded)
[22:04:42] <Profpatsch> monochrom: not instance Show (G a), but the inferrence that  G a means  `a` is Show
[22:06:24] <monochrom> Have you tried?
[22:06:45] <monochrom> The thing I tried and got rejected is: f :: G a -> a -> String; f _ x = show x
[22:07:14] <Profpatsch> monochrom: and it gets rejected right?
[22:07:36] <Profpatsch> Because how would GHC know that all `a`s that can be assigned to G are showable
[22:07:56] <Profpatsch> I mean *I* know it but I don’t know how to write it down
[22:08:28] <Profpatsch> I wolud just give it a Show a constraint, but I’m trying to give it a natural transformation which doesn’t allow restrictions.
[22:08:46] <Profpatsch> forall m x. G x -> m x  is hard to argue with
[22:08:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:08:58] <maerwald> how do you use TH to include another haskell source file like you would with CPP and #include?
[22:09:01] <Profpatsch> err well
[22:09:06] <Profpatsch> forall m.  (x. G x -> m x) -> m x  is hard to argue with
[22:09:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:09:14] *** Joins: Farzad (~FarzadBek@94.74.154.205)
[22:10:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:11:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:11:14] <monochrom> I don't think TH provides for including a haskell source file.
[22:11:45] <dolio> Write: f' :: G b -> (Show b => a -> String) -> a -> String
[22:12:04] <dolio> Then write: f :: G a -> a -> String
[22:12:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:715b:47ca:3928:db8d)
[22:12:13] <dolio> f g x = f g show x
[22:13:54] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[22:17:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:17:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:17:46] <monochrom> Yikes haha write an induction proof and don't perform proof erasure for the executable...
[22:18:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:18:31] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[22:18:31] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[22:18:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:20:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:20:22] <Profpatsch> monochrom: Okay, I figured it out, you have to do something like `:: G a -> a -> Text` and then manuall match on all constructors of G.
[22:20:31] <Profpatsch> Inside the match arms, the right types will be availabl
[22:20:43] <Profpatsch> This makes too much sense!
[22:23:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:24:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:27:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[22:30:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:30:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:31:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:31:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[22:34:10] <monochrom> Category theory is really easier.
[22:34:10] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:5edd:cf91:5423:75e0)
[22:34:10] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:5edd:cf91:5423:75e0) (Client Quit)
[22:39:32] <Midjak> Hello I am using haskell-language-server from emacs on Mac OSX 11.  When I try to open o haskell source file from emacs I get this message  https://paste.tomsmeding.com/DM5eBvjM . If i check lsp-logs this messages:  https://paste.tomsmeding.com/eehb6COh
[22:40:42] <Hecate> Midjak: so you did install haskell-language-server
[22:40:46] <Hecate> is it in your PATH ?
[22:41:03] <Midjak> I tried to update the language server with brew and to update the emacs packages but I could not get this error message to disappear.
[22:41:36] <Midjak> Hecate, yes it worked a few days ago
[22:41:47] <Midjak> just now I get this error...
[22:42:02] <tomsmeding> you didn't change anything in your emacs configuration?
[22:42:06] <Midjak> I am looking the path the PATH
[22:42:12] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[22:43:32] <Midjak> no I didn't change nothing. I have just added (require lsp) and (require lsp-haskell) right now which were missing in .emacs
[22:43:37] <tomsmeding> Midjak: apparently 'M-x getenv' allows you to get the value of an environment variable in emacs (I don't actually know emacs). Try to look up PATH in that way, and see if the directory where haskell-language-server-wrapper is located is indeed in that list
[22:44:04] <Midjak> ok I am looking this tomsmeding 
[22:44:04] *** Quits: Farzad (~FarzadBek@94.74.154.205) (Quit: Leaving)
[22:44:20] <tomsmeding> Midjak: you added those statements to your .emacs file; did that break it, or is that unrelated?
[22:44:33] <Midjak> no effect
[22:44:35] <tomsmeding> ok
[22:44:45] <Midjak> I get the error I have before this 
[22:45:36] *** Quits: emf (~emf@2620:10d:c090:400::5:d28b) (Ping timeout: 268 seconds)
[22:45:45] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[22:46:32] <tomsmeding> (you can check where haskell-language-server-wrapper is by typing 'which haskell-language-server-wrapper' in a terminal)
[22:47:32] *** Joins: emf (~emf@2620:10d:c091:480::1:6546)
[22:47:44] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:51:22] *** Joins: dudek (~dudek@185.150.236.103)
[22:51:36] <Midjak> ok the server wrapper is in /usr/local/bin and is not in the emacs PATH 
[22:51:56] <Midjak> I am going to change this
[22:52:46] <tomsmeding> how are you starting emacs? Is it also not on the path of a newly started emacs in a new terminal?
[22:54:36] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[22:54:52] <Midjak> I launch emacs from the dock. I think I had made configuration which was gone when I upgraded emacs. (not sure of this however)
[22:57:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:57:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:57:56] <tomsmeding> ah, probably you're adding /usr/local/bin to the PATH in something like .bashrc, right?
[22:58:19] <tomsmeding> a program in the dock launches from the context of WindowServer or something like that, which doesn't load .bashrc beforehand -- it runs in a fairly bare environment
[22:59:09] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:59:15] *** Joins: emf_ (~emf@2620:10d:c090:400::5:d28b)
[23:00:03] *** Quits: emf (~emf@2620:10d:c091:480::1:6546) (Ping timeout: 252 seconds)
[23:01:24] <Midjak> in zsh I have '/usr/local/bin' in my PATH but I didn't do nothing for that. I have added some local '/bin' in my PATH with zshrc but not /usr/local/bin
[23:01:51] <Midjak> https://paste.tomsmeding.com/ubNQZxwh
[23:02:46] <tomsmeding> then it might be some zsh functionality perhaps
[23:03:06] <tomsmeding> in any case, /usr/local/bin is not put in PATH by anything that runs before the window system starts on mac, I believe
[23:03:23] <Midjak> yes I think so
[23:03:24] <tomsmeding> you might be able to do something with something like /etc/environ, but not sure
[23:03:34] <tomsmeding> easiest is probably to add /usr/local/bin to the PATH in emacs itself somehow :)
[23:03:43] <Midjak> but I don't understand how this worked before...
[23:04:16] <Midjak> my .emacs file was not changed when I upgrade emacs
[23:05:02] <Midjak> I have looked into and didn't see nothing which add /usr/local/bin explicitely. 
[23:05:45] <tomsmeding> sounds odd
[23:07:35] <Midjak> yeah... I am going to find how to do that definitively in .emacs (it's the configuration file for emacs)
[23:09:53] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[23:10:11] <Midjak> aah I think I have installed this https://github.com/purcell/exec-path-from-shell
[23:10:53] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[23:10:55] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[23:15:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:15:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:15:26] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[23:15:42] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[23:16:29] <tomsmeding> and it did the opposite of what you wanted? :p
[23:18:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[23:23:41] <Midjak> No perhaps I have remove something when I upgraded
[23:24:04] *** Joins: nabaiste^ (~nabaiste@68.101.58.90)
[23:24:13] <Midjak> Well now I have the proper PATH
[23:25:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:28:05] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Quit: leaving)
[23:28:09] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[23:28:57] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab) (Client Quit)
[23:30:19] *** Joins: pavonia (~user@user/siracusa)
[23:30:33] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[23:32:29] <Profpatsch> monochrom: well I only went down this rabbit hole because I wanted to use a free applicative :)
[23:35:05] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:5084:9b62:332c:deab)
[23:35:26] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 252 seconds)
[23:35:49] *** Joins: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net)
[23:37:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:37:29] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:39:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:39:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:40:18] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:40:23] *** Quits: yauhsien (~yauhsien@61-231-22-20.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[23:42:03] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:42:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:42:23] <zincy_> When doing property based state machine testing should you be relying on your existing logic to inform your test model of the suitable next action?
[23:42:41] <Midjak> Ok it works now thanks for your help tomsmeding Hecate 
[23:42:49] <tomsmeding> cheers!
[23:45:20] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[23:46:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[23:47:21] <Hecate> Midjak: good luck
[23:49:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:49:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:50:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:51:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:52:29] <Midjak> Hecate, why do you say "good luck" ?
[23:52:42] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[23:55:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:55:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:57:12] <Hecate> Midjak: everything
[23:58:45] <Midjak> Well I would prefer not to rely too much on luck Hecate 
[23:59:02] <Hecate> very well, than I wish you success :)
[23:59:21] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
