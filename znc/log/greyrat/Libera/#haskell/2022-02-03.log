[00:00:02] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[00:04:24] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:05:08] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:05:56] *** Joins: ravella (~ravella@user/ryanavella)
[00:07:04] *** bontaq` is now known as bontaq
[00:07:54] *** Joins: Pickchea (~private@user/pickchea)
[00:15:09] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Quit: Lost terminal)
[00:15:47] *** fendor_ is now known as fendor
[00:25:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[00:27:12] *** Joins: oldsk00l (~znc@ec2-18-130-126-148.eu-west-2.compute.amazonaws.com)
[00:27:30] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11)
[00:27:34] *** Quits: fendor (~fendor@178.165.184.56.wireless.dyn.drei.com) (Remote host closed the connection)
[00:28:26] <janus> are flags shared across packages? that is, their names should be coordinated across packages?
[00:29:16] <monochrom> No.
[00:29:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:30:40] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[00:30:58] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[00:31:09] <janus> when i use '-f flagname' in cabal-install, it only applies to the immediate target package?
[00:41:32] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: enemeth79 (sid309041@id-309041.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[00:41:32] *** Quits: sclv (sid39734@haskell/developer/sclv) (*.net *.split)
[00:41:32] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: dmj` (sid72307@id-72307.hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: gaze___ (sid387101@id-387101.helmsley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Axman6 (~Axman6@user/axman6) (*.net *.split)
[00:41:32] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: asivitz (uid178348@tinside.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[00:41:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (*.net *.split)
[00:41:32] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (*.net *.split)
[00:41:32] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[00:41:32] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (*.net *.split)
[00:41:32] *** Quits: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (*.net *.split)
[00:41:32] *** Quits: Sgeo (~Sgeo@user/sgeo) (*.net *.split)
[00:41:32] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (*.net *.split)
[00:41:32] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (*.net *.split)
[00:41:32] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (*.net *.split)
[00:41:32] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (*.net *.split)
[00:41:32] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (*.net *.split)
[00:41:33] *** Quits: xkuru (~xkuru@user/xkuru) (*.net *.split)
[00:41:33] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (*.net *.split)
[00:41:33] *** Quits: td_ (~td@muedsl-82-207-238-174.citykom.de) (*.net *.split)
[00:41:33] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (*.net *.split)
[00:41:33] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[00:41:33] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[00:41:33] *** Quits: APic (~apic@apic.name) (*.net *.split)
[00:41:33] *** Quits: cigsender (~cigsender@74.124.58.162) (*.net *.split)
[00:41:33] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[00:41:33] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[00:41:33] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[00:41:33] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[00:41:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[00:41:33] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (*.net *.split)
[00:41:33] *** Quits: lep (~lep@94.31.89.203) (*.net *.split)
[00:41:33] *** Quits: AlexZenon (~alzenon@178.34.151.37) (*.net *.split)
[00:41:33] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[00:41:33] *** Quits: janus (janus@anubis.0x90.dk) (*.net *.split)
[00:41:33] *** Quits: russruss (~russruss@my.russellmcc.com) (*.net *.split)
[00:41:33] *** Quits: tv (~tv@user/tv) (*.net *.split)
[00:41:33] *** Quits: gawen_ (~gawen@user/gawen) (*.net *.split)
[00:41:33] *** Quits: robertm (~robertm@lattice.rojoma.com) (*.net *.split)
[00:41:33] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (*.net *.split)
[00:41:33] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[00:41:33] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[00:41:33] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[00:41:33] *** Quits: marquis_andras (~marquis_a@124.170.163.166) (*.net *.split)
[00:41:33] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[00:41:33] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[00:41:33] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[00:41:33] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[00:41:33] *** Quits: stvc (~stvc@192.241.166.39) (*.net *.split)
[00:41:33] *** Quits: cls (~cls@chalk.lubutu.com) (*.net *.split)
[00:41:33] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[00:41:34] *** Quits: skewerr (spoonm@inaba.spoonm.org) (*.net *.split)
[00:41:34] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[00:41:34] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[00:41:34] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[00:41:34] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[00:41:34] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[00:41:34] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[00:41:34] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[00:41:34] *** Quits: kojo5551 (~kojo5551@fep.grid.pub.ro) (*.net *.split)
[00:41:34] *** Quits: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[00:41:34] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[00:41:34] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[00:41:34] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[00:41:34] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[00:41:34] *** Quits: canta (~canta@user/canta) (*.net *.split)
[00:41:34] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[00:41:34] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[00:41:34] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[00:41:34] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[00:41:34] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[00:41:34] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[00:41:34] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[00:41:34] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[00:41:34] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[00:41:34] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[00:41:34] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[00:41:34] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[00:41:34] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[00:41:34] *** Quits: jtmar (~james@jtmar.me) (*.net *.split)
[00:41:34] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[00:41:34] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (*.net *.split)
[00:41:34] *** Quits: juhp (~juhp@128.106.188.82) (*.net *.split)
[00:41:34] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (*.net *.split)
[00:41:34] *** Quits: modnar (~modnar@shell.sonic.net) (*.net *.split)
[00:41:34] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (*.net *.split)
[00:41:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (*.net *.split)
[00:41:34] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (*.net *.split)
[00:41:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab) (*.net *.split)
[00:41:34] *** Quits: emf (~emf@2620:10d:c090:400::5:b0fe) (*.net *.split)
[00:41:34] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[00:41:34] *** Quits: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (*.net *.split)
[00:41:34] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (*.net *.split)
[00:41:34] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (*.net *.split)
[00:41:34] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (*.net *.split)
[00:41:34] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[00:41:34] *** Quits: son0p (~ff@181.136.122.143) (*.net *.split)
[00:41:34] *** Quits: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de) (*.net *.split)
[00:41:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[00:41:34] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[00:41:34] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (*.net *.split)
[00:41:34] *** Quits: gargawel (~kvirc@82-65-144-99.subs.proxad.net) (*.net *.split)
[00:41:34] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[00:41:34] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (*.net *.split)
[00:41:35] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[00:41:35] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (*.net *.split)
[00:41:35] *** Quits: ubert (~Thunderbi@141.98.252.252) (*.net *.split)
[00:41:35] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (*.net *.split)
[00:41:35] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (*.net *.split)
[00:41:35] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (*.net *.split)
[00:41:35] *** Quits: hays (rootvegeta@fsf/member/hays) (*.net *.split)
[00:41:35] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[00:41:35] *** Quits: newhoggy (sid198874@id-198874.helmsley.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: AlexNoo (~AlexNoo@178.34.151.37) (*.net *.split)
[00:41:35] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: Jon (jon@dow.land) (*.net *.split)
[00:41:35] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[00:41:35] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (*.net *.split)
[00:41:35] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (*.net *.split)
[00:41:35] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (*.net *.split)
[00:41:35] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[00:41:35] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[00:41:35] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[00:41:35] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[00:41:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[00:41:35] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[00:41:35] *** Quits: dolio (~dolio@130.44.130.54) (*.net *.split)
[00:41:35] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[00:41:35] *** Quits: bjobjo (~bjobjo@user/bjobjo) (*.net *.split)
[00:41:35] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (*.net *.split)
[00:41:35] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[00:41:35] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[00:41:35] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[00:41:36] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (*.net *.split)
[00:41:36] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[00:41:36] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[00:41:36] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[00:41:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[00:41:36] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (*.net *.split)
[00:41:36] *** Quits: haasn (~nand@haasn.dev) (*.net *.split)
[00:41:36] *** Quits: liskin (~liskin@xmonad/liskin) (*.net *.split)
[00:41:36] *** Quits: _\_ (~o@user/offon) (*.net *.split)
[00:41:36] *** Quits: raghavgururajan (ea769b8000@user/raghavgururajan) (*.net *.split)
[00:41:36] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[00:41:36] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[00:41:36] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[00:41:36] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (*.net *.split)
[00:41:36] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (*.net *.split)
[00:41:36] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (*.net *.split)
[00:41:36] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[00:41:36] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[00:41:36] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[00:41:36] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: amir (sid22336@user/amir) (*.net *.split)
[00:41:36] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[00:41:36] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[00:41:36] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[00:41:36] *** Quits: Andrew (andrew@andrewyu.org) (*.net *.split)
[00:41:36] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[00:41:36] *** Quits: defanor (~defanor@tart.uberspace.net) (*.net *.split)
[00:41:36] *** Quits: domcornloan (~mike@user/feetwind) (*.net *.split)
[00:41:36] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (*.net *.split)
[00:41:36] *** Quits: bah_ (~bah@l1.tel) (*.net *.split)
[00:41:36] *** Quits: Arsen (arsen@managarm/dev/Arsen) (*.net *.split)
[00:41:36] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (*.net *.split)
[00:41:36] *** Quits: cpape`` (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[00:41:36] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: tnks (sid412124@id-412124.helmsley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[00:41:36] *** Quits: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net) (*.net *.split)
[00:41:36] *** Quits: wrengr (~wrengr@99.34.197.35.bc.googleusercontent.com) (*.net *.split)
[00:41:36] *** Quits: Pickchea (~private@user/pickchea) (*.net *.split)
[00:41:36] *** Quits: ravella (~ravella@user/ryanavella) (*.net *.split)
[00:41:36] *** Quits: vglfr (~vglfr@88.155.15.0) (*.net *.split)
[00:41:36] *** Quits: Erutuon (~Erutuon@user/erutuon) (*.net *.split)
[00:41:37] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (*.net *.split)
[00:41:37] *** Quits: nshepperd2 (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (*.net *.split)
[00:41:37] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[00:41:37] *** Quits: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp) (*.net *.split)
[00:41:37] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[00:41:37] *** Quits: kilolympus (~kilolympu@31.205.200.235) (*.net *.split)
[00:41:37] *** Quits: hexagoxel (~hexagoxel@hexagoxel.de) (*.net *.split)
[00:41:37] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[00:41:37] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[00:41:37] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (*.net *.split)
[00:41:37] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[00:41:37] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[00:41:37] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[00:41:37] *** Quits: statusbot1 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (*.net *.split)
[00:41:37] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (*.net *.split)
[00:41:37] *** Quits: OscarH (~OscarH@90.201.86.195) (*.net *.split)
[00:41:37] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[00:41:37] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[00:41:37] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (*.net *.split)
[00:41:37] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[00:41:37] *** Quits: iteratee (~kyle@162.218.222.107) (*.net *.split)
[00:41:37] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[00:41:37] *** Quits: ridcully_ (~ridcully@p508acc81.dip0.t-ipconnect.de) (*.net *.split)
[00:41:37] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[00:41:37] *** Quits: incertia (~incertia@207.98.163.88) (*.net *.split)
[00:41:37] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[00:41:37] *** Quits: sherlock_95 (~sherlock_@static.131.42.161.5.clients.your-server.de) (*.net *.split)
[00:41:37] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[00:41:37] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[00:41:37] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[00:41:37] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[00:41:37] *** Quits: caubert (~caubert@136.244.111.235) (*.net *.split)
[00:41:37] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (*.net *.split)
[00:41:37] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[00:41:37] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[00:41:37] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11) (*.net *.split)
[00:41:37] *** Quits: oldsk00l (~znc@ec2-18-130-126-148.eu-west-2.compute.amazonaws.com) (*.net *.split)
[00:41:37] *** Quits: Ram-Z (Ram-Z@2a01:7e01::f03c:91ff:fe57:d2df) (*.net *.split)
[00:41:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (*.net *.split)
[00:41:37] *** Quits: tiferrei (~tiferrei@user/tiferrei) (*.net *.split)
[00:41:37] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (*.net *.split)
[00:41:37] *** Quits: nunggu (~q@user/nunggu) (*.net *.split)
[00:41:37] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[00:41:37] *** Quits: gehmehgeh (~user@user/gehmehgeh) (*.net *.split)
[00:41:37] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[00:41:37] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (*.net *.split)
[00:41:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[00:41:37] *** Quits: califax (~califax@user/califx) (*.net *.split)
[00:41:37] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[00:41:37] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[00:41:37] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (*.net *.split)
[00:41:37] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (*.net *.split)
[00:41:37] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (*.net *.split)
[00:41:37] *** Quits: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl) (*.net *.split)
[00:41:37] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:796:dd6e:a09d:717e) (*.net *.split)
[00:41:37] *** Quits: meltedbrain_y2k (~tekserf@47.61.115.91) (*.net *.split)
[00:41:37] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a) (*.net *.split)
[00:41:37] *** Quits: jlamothe (~jlamothe@198.251.61.229) (*.net *.split)
[00:41:37] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (*.net *.split)
[00:41:37] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[00:41:37] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (*.net *.split)
[00:41:37] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[00:41:38] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (*.net *.split)
[00:41:38] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (*.net *.split)
[00:41:38] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[00:41:38] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[00:41:38] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[00:41:38] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (*.net *.split)
[00:41:38] *** Quits: moats (~oats@user/oats) (*.net *.split)
[00:41:38] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (*.net *.split)
[00:41:38] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (*.net *.split)
[00:41:38] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (*.net *.split)
[00:41:38] *** Quits: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756) (*.net *.split)
[00:41:38] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (*.net *.split)
[00:41:38] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (*.net *.split)
[00:41:38] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (*.net *.split)
[00:41:38] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (*.net *.split)
[00:41:38] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[00:41:38] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[00:41:38] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: jonrh (sid5185@id-5185.ilkley.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (*.net *.split)
[00:41:38] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[00:41:38] *** Quits: kaskal (~kaskal@2001:4bb8:2cc:5073:e1cf:a3ef:264a:1e80) (*.net *.split)
[00:41:38] *** Quits: EvanR (~EvanR@user/evanr) (*.net *.split)
[00:41:38] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[00:41:38] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[00:41:38] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[00:41:38] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[00:41:38] *** Quits: thebnq (~bnq@herrokitty.com) (*.net *.split)
[00:41:38] *** Quits: Noinia (~Frank@77-162-168-71.fixed.kpn.net) (*.net *.split)
[00:41:38] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[00:41:38] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[00:41:38] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[00:41:38] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[00:41:38] *** Quits: acro (~acro@user/acro) (*.net *.split)
[00:41:38] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[00:41:38] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[00:41:38] *** Quits: davl (~davl@207.154.228.18) (*.net *.split)
[00:41:38] *** Quits: lyxia (~lyxia@poisson.chat) (*.net *.split)
[00:41:38] *** Quits: SIben (~SIben@ns3106586.ip-5-135-191.eu) (*.net *.split)
[00:41:38] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[00:41:38] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[00:41:38] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[00:41:38] *** Quits: bonz060 (~quassel@2001:bc8:47a4:a23::1) (*.net *.split)
[00:41:39] *** Quits: Merfont (~Kaiepi@156.34.47.253) (*.net *.split)
[00:41:39] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:25b:5701:e54d:ee3e) (*.net *.split)
[00:41:39] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (*.net *.split)
[00:41:39] *** Quits: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (*.net *.split)
[00:41:39] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (*.net *.split)
[00:41:39] *** Quits: coot (~coot@213.134.190.95) (*.net *.split)
[00:41:39] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[00:41:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[00:41:39] *** Quits: michalz2 (~michalz2@185.246.204.65) (*.net *.split)
[00:41:39] *** Quits: mc47 (~mc47@xmonad/TheMC47) (*.net *.split)
[00:41:39] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:40a0:b50a:e8ed:d1eb) (*.net *.split)
[00:41:39] *** Quits: img (~img@user/img) (*.net *.split)
[00:41:39] *** Quits: remedan (~remedan@octo.cafe) (*.net *.split)
[00:41:39] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (*.net *.split)
[00:41:39] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (*.net *.split)
[00:41:39] *** Quits: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001) (*.net *.split)
[00:41:39] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (*.net *.split)
[00:41:39] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (*.net *.split)
[00:41:39] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (*.net *.split)
[00:41:39] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (*.net *.split)
[00:41:39] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (*.net *.split)
[00:41:39] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[00:41:39] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (*.net *.split)
[00:41:39] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[00:41:39] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (*.net *.split)
[00:41:39] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[00:41:39] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[00:41:39] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (*.net *.split)
[00:41:39] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (*.net *.split)
[00:41:39] *** Quits: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f) (*.net *.split)
[00:41:39] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (*.net *.split)
[00:41:39] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (*.net *.split)
[00:41:39] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (*.net *.split)
[00:41:39] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (*.net *.split)
[00:41:39] *** Quits: ddb (~ddb@ipv6two.tilde.club) (*.net *.split)
[00:41:39] *** Quits: flupe (~baboum@radon.sbi.re) (*.net *.split)
[00:41:39] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[00:41:39] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: AndreasK (sid320732@id-320732.uxbridge.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: s4msung (bZt8T9wHxn@user/s4msung) (*.net *.split)
[00:41:39] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (*.net *.split)
[00:41:39] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (*.net *.split)
[00:41:39] *** Quits: g (x@libera/staff/glguy) (*.net *.split)
[00:41:39] *** Quits: iphy (sid67735@id-67735.lymington.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[00:41:39] *** Quits: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com) (*.net *.split)
[00:41:39] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[00:41:39] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[00:41:40] *** Quits: davean (~davean@davean.sciesnet.net) (*.net *.split)
[00:41:40] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[00:41:40] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: sa1 (sid7690@id-7690.ilkley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[00:41:40] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[00:41:40] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[00:41:40] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[00:41:40] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (*.net *.split)
[00:41:40] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (*.net *.split)
[00:41:40] *** Quits: adnaahm (~adnaahm@host-101-net-67-160-119.mobilinkinfinity.net.pk) (*.net *.split)
[00:41:40] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (*.net *.split)
[00:41:40] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[00:41:40] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (*.net *.split)
[00:41:40] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (*.net *.split)
[00:41:40] *** Quits: anderson (~ande@user/anderson) (*.net *.split)
[00:41:40] *** Quits: glider (~glider@user/glider) (*.net *.split)
[00:41:40] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[00:41:40] *** Quits: caasih (sid13241@ilkley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: foul_owl (~kerry@94.140.8.105) (*.net *.split)
[00:41:40] *** Quits: jespada (~jespada@87.74.36.188) (*.net *.split)
[00:41:40] *** Quits: __monty__ (~toonn@user/toonn) (*.net *.split)
[00:41:40] *** Quits: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[00:41:40] *** Quits: martin02 (~silas@141.84.69.76) (*.net *.split)
[00:41:40] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[00:41:40] *** Quits: ishutin (~ishutin@80-95-86-56.pool.digikabel.hu) (*.net *.split)
[00:41:40] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[00:41:40] *** Quits: Logio (em@kapsi.fi) (*.net *.split)
[00:41:40] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[00:41:40] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (*.net *.split)
[00:41:40] *** Quits: Alex_test (~al_test@178.34.151.37) (*.net *.split)
[00:41:40] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[00:41:40] *** Quits: raym (~raym@user/raym) (*.net *.split)
[00:41:40] *** Quits: micro (~micro@user/micro) (*.net *.split)
[00:41:40] *** Quits: mncheckm (~mncheck@193.224.205.254) (*.net *.split)
[00:41:40] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[00:41:40] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (*.net *.split)
[00:41:40] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (*.net *.split)
[00:41:40] *** Quits: pgib (~textual@173.38.117.89) (*.net *.split)
[00:41:40] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (*.net *.split)
[00:41:40] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (*.net *.split)
[00:41:40] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[00:41:40] *** Quits: mrmonday (~robert@octarineparrot.com) (*.net *.split)
[00:41:40] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[00:41:40] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[00:41:40] *** Quits: jrm (~jrm@156.34.173.250) (*.net *.split)
[00:41:40] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (*.net *.split)
[00:41:40] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[00:41:40] *** Quits: bbear_ (~znc@21212.s.t4vps.eu) (*.net *.split)
[00:41:40] *** Quits: sander (~sander@user/sander) (*.net *.split)
[00:41:40] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[00:41:40] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[00:41:40] *** Quits: jeffz (~user@lambda.xen.prgmr.com) (*.net *.split)
[00:41:40] *** Quits: hltk (~hltk@hltk.fi) (*.net *.split)
[00:41:40] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (*.net *.split)
[00:41:40] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[00:41:40] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (*.net *.split)
[00:41:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (*.net *.split)
[00:41:41] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (*.net *.split)
[00:41:41] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[00:41:41] *** Quits: absentia (~evocatus@24-212-138-156.cable.teksavvy.com) (*.net *.split)
[00:41:41] *** Quits: slowtyper (~slowtyper@user/slowtyper) (*.net *.split)
[00:41:41] *** Quits: ubert1 (~Thunderbi@p200300ecdf0994537358816310c1cf27.dip0.t-ipconnect.de) (*.net *.split)
[00:41:41] *** Quits: sm[i] (~user@plaintextaccounting/sm) (*.net *.split)
[00:41:41] *** Quits: SethTisue (sid14912@id-14912.ilkley.irccloud.com) (*.net *.split)
[00:41:41] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (*.net *.split)
[00:41:41] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (*.net *.split)
[00:41:41] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[00:41:41] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[00:41:41] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (*.net *.split)
[00:41:41] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[00:41:41] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (*.net *.split)
[00:41:41] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (*.net *.split)
[00:41:41] *** Quits: sm (~sm@plaintextaccounting/sm) (*.net *.split)
[00:41:41] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[00:41:41] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (*.net *.split)
[00:41:41] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (*.net *.split)
[00:41:41] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (*.net *.split)
[00:41:41] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[00:41:41] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (*.net *.split)
[00:41:41] *** Quits: AWizzArd (~code@user/awizzard) (*.net *.split)
[00:41:41] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[00:41:41] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (*.net *.split)
[00:41:41] *** Quits: df (~ben@justworks.xyz) (*.net *.split)
[00:41:41] *** Quits: [exa] (exa@user/exa/x-3587197) (*.net *.split)
[00:41:41] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[00:41:41] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (*.net *.split)
[00:41:41] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[00:41:41] *** Quits: tomjaguarpaw (~tom@li367-225.members.linode.com) (*.net *.split)
[00:41:41] *** Quits: dragestil (~znc@user/dragestil) (*.net *.split)
[00:41:41] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (*.net *.split)
[00:41:41] *** Quits: _0x47_ (sid508683@id-508683.tinside.irccloud.com) (*.net *.split)
[00:41:41] *** Quits: travv0 (sid293381@user/travv0) (*.net *.split)
[00:41:41] *** Quits: marienz__ (~marienz@libera/staff/marienz) (*.net *.split)
[00:41:41] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[00:41:41] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[00:41:41] *** Quits: dyniec (~dyniec@mail.dybiec.info) (*.net *.split)
[00:41:42] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (*.net *.split)
[00:41:42] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[00:41:42] *** Quits: bgamari (~bgamari@2001:470:e438::1) (*.net *.split)
[00:41:42] *** Quits: averell (~averell@user/averell) (*.net *.split)
[00:41:42] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[00:41:42] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (*.net *.split)
[00:41:42] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (*.net *.split)
[00:41:42] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[00:41:42] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[00:41:42] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (*.net *.split)
[00:41:42] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[00:41:42] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (*.net *.split)
[00:41:42] *** Quits: arkeet (~arkeet@moriya.ca) (*.net *.split)
[00:41:42] *** Quits: dexterfoo (~dexter@li655-253.members.linode.com) (*.net *.split)
[00:41:42] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (*.net *.split)
[00:41:42] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[00:41:42] *** Quits: heath (~heath@user/heath) (*.net *.split)
[00:41:42] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[00:41:42] *** Quits: ystael (~ystael@user/ystael) (*.net *.split)
[00:41:42] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[00:41:42] *** Quits: noctuks (7vrDyCK6LH@user/noctux) (*.net *.split)
[00:41:42] *** Quits: cjay (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[00:41:42] *** Quits: notabled1 (~notabledu@ares.dbalan.in) (*.net *.split)
[00:41:42] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[00:41:42] *** Quits: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[00:41:42] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[00:41:42] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[00:41:42] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[00:41:42] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[00:41:42] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[00:41:42] *** Quits: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host) (*.net *.split)
[00:41:42] *** Quits: adium (adium@user/adium) (*.net *.split)
[00:41:42] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[00:41:42] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[00:41:42] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (*.net *.split)
[00:41:42] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (*.net *.split)
[00:41:42] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (*.net *.split)
[00:41:42] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (*.net *.split)
[00:41:42] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (*.net *.split)
[00:41:43] *** Quits: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203) (*.net *.split)
[00:41:43] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (*.net *.split)
[00:41:43] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (*.net *.split)
[00:41:43] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[00:41:43] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (*.net *.split)
[00:41:43] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (*.net *.split)
[00:41:43] *** Quits: matijja (~matijja@193.77.181.201) (*.net *.split)
[00:41:43] *** Quits: joeyh_ (joeyh@kitenet.net) (*.net *.split)
[00:41:43] *** Quits: Adran (adran@botters/adran) (*.net *.split)
[00:41:43] *** Quits: noddy (~user@user/noddy) (*.net *.split)
[00:41:43] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[00:41:43] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[00:41:43] *** Quits: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (*.net *.split)
[00:41:43] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: feliix42_ (~felix@gibbs.uberspace.de) (*.net *.split)
[00:41:43] *** Quits: aristid (sid1599@uxbridge.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[00:41:43] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[00:41:43] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (*.net *.split)
[00:41:43] *** Quits: kadobanana (~mud@user/kadoban) (*.net *.split)
[00:41:43] *** Quits: myme (~myme@2a01:799:d5a:cd00:fb5a:85b7:3647:e056) (*.net *.split)
[00:41:43] *** Quits: phma (phma@2001:5b0:211c:a988:8f1d:f7a6:3d8d:dc0c) (*.net *.split)
[00:41:43] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[00:41:43] *** Quits: V (~v@anomalous.eu) (*.net *.split)
[00:41:43] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[00:41:43] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[00:41:43] *** Quits: forell (~forell@user/forell) (*.net *.split)
[00:41:43] *** Quits: hueso (~root@user/hueso) (*.net *.split)
[00:41:43] *** Quits: qrpnxz (abc4f95c31@user/qrpnxz) (*.net *.split)
[00:41:43] *** Quits: jinsun__ (~quassel@user/jinsun) (*.net *.split)
[00:41:43] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[00:41:43] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (*.net *.split)
[00:41:43] *** Quits: polyphem (~rod@2a02:810d:840:8754:5126:c335:5f23:8358) (*.net *.split)
[00:41:43] *** Quits: Megant (megant@user/megant) (*.net *.split)
[00:41:43] *** Quits: aeka (~aeka@user/hiruji) (*.net *.split)
[00:41:43] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (*.net *.split)
[00:41:43] *** Quits: MasseR4 (~MasseR@51.15.143.128) (*.net *.split)
[00:41:43] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[00:41:43] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[00:41:43] *** Quits: alinab (sid468903@id-468903.helmsley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[00:41:43] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[00:41:43] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[00:41:43] *** Quits: np (~nerdypepp@user/nerdypepper) (*.net *.split)
[00:41:43] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (*.net *.split)
[00:41:43] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (*.net *.split)
[00:41:43] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (*.net *.split)
[00:41:43] *** Quits: Athas (athas@sigkill.dk) (*.net *.split)
[00:41:43] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (*.net *.split)
[00:41:43] *** Quits: brettgilio (~brettgili@x-node.gq) (*.net *.split)
[00:41:43] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (*.net *.split)
[00:41:43] *** Quits: vgtw (~vgtw@user/vgtw) (*.net *.split)
[00:41:43] *** Quits: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (*.net *.split)
[00:41:43] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[00:41:43] *** Quits: biberu (~biberu@user/biberu) (*.net *.split)
[00:41:43] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (*.net *.split)
[00:41:43] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (*.net *.split)
[00:41:43] *** Quits: rookie101 (~rookie@165.232.121.13) (*.net *.split)
[00:41:43] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[00:41:43] *** Quits: peutri (~peutri@ns317027.ip-94-23-46.eu) (*.net *.split)
[00:41:43] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[00:41:43] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[00:41:43] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[00:41:43] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[00:41:43] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[00:41:43] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[00:41:43] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (*.net *.split)
[00:41:43] *** Quits: gmc (sid58314@ilkley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[00:41:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (*.net *.split)
[00:41:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (*.net *.split)
[00:41:43] *** Quits: monochrom (trebla@216.138.220.146) (*.net *.split)
[00:41:43] *** Quits: michalz (~michalz@185.246.204.93) (*.net *.split)
[00:41:43] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[00:41:43] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: glguy (x@libera/staff/glguy) (*.net *.split)
[00:41:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22) (*.net *.split)
[00:41:43] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[00:41:43] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[00:41:43] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (*.net *.split)
[00:41:43] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[00:41:44] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[00:41:44] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[00:41:44] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (*.net *.split)
[00:41:44] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (*.net *.split)
[00:41:44] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (*.net *.split)
[00:41:44] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[00:41:44] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[00:41:44] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[00:41:44] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (*.net *.split)
[00:41:44] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (*.net *.split)
[00:41:44] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (*.net *.split)
[00:41:44] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (*.net *.split)
[00:41:44] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[00:41:44] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[00:41:44] *** Quits: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0) (*.net *.split)
[00:41:44] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[00:41:44] *** Quits: orcus (~orcus@user/brprice) (*.net *.split)
[00:41:44] *** Quits: dispater (~dispater@user/brprice) (*.net *.split)
[00:41:44] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[00:41:44] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[00:41:44] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001) (*.net *.split)
[00:41:44] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[00:41:44] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[00:41:44] *** Quits: Hecate (~mariposa@user/hecate) (*.net *.split)
[00:41:44] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (*.net *.split)
[00:41:44] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (*.net *.split)
[00:41:44] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[00:41:44] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[00:41:44] *** Quits: dy (~dy@user/dy) (*.net *.split)
[00:41:44] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[00:41:44] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[00:41:44] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (*.net *.split)
[00:41:44] *** Quits: max22- (~maxime@2a01cb0883359800154b4e88390bc120.ipv6.abo.wanadoo.fr) (*.net *.split)
[00:41:44] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (*.net *.split)
[00:41:44] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[00:41:44] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[00:41:44] *** Quits: alp (~alp@user/alp) (*.net *.split)
[00:41:44] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (*.net *.split)
[00:41:44] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[00:41:44] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (*.net *.split)
[00:41:44] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (*.net *.split)
[00:41:44] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (*.net *.split)
[00:41:45] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[00:41:45] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (*.net *.split)
[00:41:45] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (*.net *.split)
[00:41:45] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (*.net *.split)
[00:41:45] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[00:41:45] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (*.net *.split)
[00:41:45] *** Quits: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340) (*.net *.split)
[00:41:45] *** Quits: m4lvin (~m4lvin@w4eg.de) (*.net *.split)
[00:41:45] *** Quits: nf (~n@monade.li) (*.net *.split)
[00:41:45] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[00:41:45] *** Quits: kronicma1 (user73386@neotame.csclub.uwaterloo.ca) (*.net *.split)
[00:41:45] *** Quits: derelict (~derelict@user/derelict) (*.net *.split)
[00:41:45] *** Quits: robbert-vdh (~robbert@robbertvanderhelm.nl) (*.net *.split)
[00:41:45] *** Quits: immae1 (~immae@2a01:4f8:141:53e7::) (*.net *.split)
[00:41:45] *** Quits: ts3 (~ts@46.101.20.9) (*.net *.split)
[00:41:45] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[00:41:45] *** Quits: welterde (welterde@thinkbase.srv.welterde.de) (*.net *.split)
[00:41:45] *** Quits: xnyhps_ (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288) (*.net *.split)
[00:41:45] *** Quits: xnbya2 (~xnbya@2a01:4f8:c17:cbdd::1) (*.net *.split)
[00:41:45] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[00:41:45] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: whez (sid470288@id-470288.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: nrr___ (sid20938@id-20938.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[00:41:45] *** Quits: berberman_ (~berberman@user/berberman) (*.net *.split)
[00:41:45] *** Quits: integral (sid296274@user/integral) (*.net *.split)
[00:41:45] *** Quits: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: sunarch (uid526836@user/sunarch) (*.net *.split)
[00:41:45] *** Quits: cawfee_ (~root@2406:3003:2077:2758::babe) (*.net *.split)
[00:41:45] *** Quits: philpax_ (sid516926@id-516926.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: glowcoil_ (sid3405@id-3405.tinside.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: lally (sid388228@id-388228.uxbridge.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: dunj3 (~dunj3@kingdread.de) (*.net *.split)
[00:41:45] *** Quits: gregberns__ (sid315709@id-315709.helmsley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: teehemkay_ (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: dagit3146 (~dagit@c-24-21-226-72.hsd1.or.comcast.net) (*.net *.split)
[00:41:45] *** Quits: siers (~ij@user/ij) (*.net *.split)
[00:41:45] *** Quits: astra (sid289983@user/amish) (*.net *.split)
[00:41:45] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[00:41:45] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[00:41:45] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[00:41:45] *** Quits: Taneb (~Taneb@runciman.hacksoc.org) (*.net *.split)
[00:41:45] *** Quits: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se) (*.net *.split)
[00:41:45] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[00:41:45] *** Quits: kitzman (~kitzman@user/dekenevs) (*.net *.split)
[00:41:45] *** Quits: Sqaure (~a@user/square) (*.net *.split)
[00:41:45] *** Quits: zzz (~z@user/zero) (*.net *.split)
[00:41:45] *** Quits: haritz (~hrtz@user/haritz) (*.net *.split)
[00:41:45] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[00:41:45] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[00:41:45] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[00:41:45] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[00:41:45] *** Quits: clever (~clever@99.192.114.98) (*.net *.split)
[00:41:45] *** Quits: tinwood (~tinwood@canonical/tinwood) (*.net *.split)
[00:41:46] *** Quits: hook54321 (sid149355@user/hook54321) (*.net *.split)
[00:41:46] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[00:41:46] *** Quits: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net) (*.net *.split)
[00:41:46] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[00:41:46] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[00:41:46] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[00:41:46] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[00:41:46] *** Quits: res0nat0r0 (~Fletch@dia.whatbox.ca) (*.net *.split)
[00:41:46] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[00:44:09] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[00:44:09] *** Joins: jtmar (~james@jtmar.me)
[00:44:09] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[00:44:09] *** Joins: TMA (~tma@twin.jikos.cz)
[00:44:09] *** Joins: carter (sid14827@helmsley.irccloud.com)
[00:44:09] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[00:44:09] *** Joins: drdo (~drdo@roach0.drdo.eu)
[00:44:09] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[00:44:09] *** Joins: n3t (n3t@user/n3t)
[00:44:09] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[00:44:09] *** Joins: andjjj23_ (~irc@107.170.228.47)
[00:44:09] *** Joins: meejah (~meejah@rutas.meejah.ca)
[00:44:09] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[00:44:09] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[00:44:09] *** Joins: juri_ (~juri@178.63.35.222)
[00:44:09] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[00:44:09] *** Joins: canta (~canta@user/canta)
[00:44:09] *** Joins: statusfailed (~statusfai@statusfailed.com)
[00:44:09] *** Joins: c_wraith (~c_wraith@adjoint.us)
[00:44:09] *** Joins: kmein (~weechat@user/kmein)
[00:44:09] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[00:44:09] *** Joins: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[00:44:09] *** Joins: kojo5551 (~kojo5551@fep.grid.pub.ro)
[00:44:09] *** Joins: amk (~amk@109.255.169.126)
[00:44:09] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[00:44:09] *** Joins: xstill- (xstill@fimu/xstill)
[00:44:09] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[00:44:09] *** Joins: haskl (~haskl@user/haskl)
[00:44:09] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[00:44:09] *** Joins: drewr (~drew@user/drewr)
[00:44:09] *** Joins: skewerr (spoonm@inaba.spoonm.org)
[00:44:09] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[00:44:09] *** Joins: cls (~cls@chalk.lubutu.com)
[00:44:09] *** Joins: stvc (~stvc@192.241.166.39)
[00:44:09] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[00:44:09] *** Joins: mcglk (~mcglk@131.191.49.120)
[00:44:09] *** Joins: mmalter (~mmalter@88.126.10.237)
[00:44:09] *** Joins: justGhost (~justache@user/justache)
[00:44:09] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[00:44:09] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[00:44:09] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[00:44:09] *** Joins: swistak (~swistak@185.21.216.141)
[00:44:09] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:44:09] *** Joins: robertm (~robertm@lattice.rojoma.com)
[00:44:09] *** Joins: gawen_ (~gawen@user/gawen)
[00:44:09] *** Joins: tv (~tv@user/tv)
[00:44:09] *** Joins: russruss (~russruss@my.russellmcc.com)
[00:44:09] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[00:44:09] *** Joins: AlexZenon (~alzenon@178.34.151.37)
[00:44:09] *** Joins: lep (~lep@94.31.89.203)
[00:44:09] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[00:44:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:44:09] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:44:09] *** Joins: oats (~thomas@user/oats)
[00:44:09] *** Joins: aria (sid380617@lymington.irccloud.com)
[00:44:09] *** Joins: Hafydd (~Hafydd@user/hafydd)
[00:44:09] *** Joins: cigsender (~cigsender@74.124.58.162)
[00:44:09] *** Joins: APic (~apic@apic.name)
[00:44:09] *** Joins: quintasan (~quassel@quintasan.pl)
[00:44:09] *** Joins: hyiltiz (~quassel@31.220.5.250)
[00:44:09] *** Joins: janus (janus@anubis.0x90.dk)
[00:44:09] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[00:44:09] *** Joins: td_ (~td@muedsl-82-207-238-174.citykom.de)
[00:44:09] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[00:44:09] *** Joins: xkuru (~xkuru@user/xkuru)
[00:44:09] *** Joins: xdej (~xdej@quatramaran.salle-s.org)
[00:44:09] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[00:44:09] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[00:44:09] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[00:44:09] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[00:44:09] *** Joins: Sgeo (~Sgeo@user/sgeo)
[00:44:09] *** Joins: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[00:44:09] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:44:09] *** Joins: cheater (~Username@user/cheater)
[00:44:09] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[00:44:09] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[00:44:09] *** Joins: econo (uid147250@user/econo)
[00:44:09] *** Joins: asivitz (uid178348@tinside.irccloud.com)
[00:44:09] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[00:44:09] *** Joins: pierrot (~pi@user/pierrot)
[00:44:09] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[00:44:09] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[00:44:09] *** Joins: Xe (~cadey@tailscale/xe)
[00:44:09] *** Joins: bonz060 (~quassel@2001:bc8:47a4:a23::1)
[00:44:09] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[00:44:09] *** Joins: SIben (~SIben@ns3106586.ip-5-135-191.eu)
[00:44:09] *** Joins: lyxia (~lyxia@poisson.chat)
[00:44:09] *** Joins: davl (~davl@207.154.228.18)
[00:44:09] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[00:44:09] *** Joins: xacktm (xacktm@user/xacktm)
[00:44:09] *** Joins: acro (~acro@user/acro)
[00:44:09] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[00:44:09] *** Joins: urdh (~urdh@user/urdh)
[00:44:09] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[00:44:09] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[00:44:09] *** Joins: Noinia (~Frank@77-162-168-71.fixed.kpn.net)
[00:44:09] *** Joins: thebnq (~bnq@herrokitty.com)
[00:44:09] *** Joins: bollu (~bollu@159.65.151.13)
[00:44:09] *** Joins: koolazer (~koo@user/koolazer)
[00:44:09] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[00:44:09] *** Joins: Techcable (~Techcable@168.235.93.147)
[00:44:09] *** Joins: EvanR (~EvanR@user/evanr)
[00:44:09] *** Joins: kaskal (~kaskal@2001:4bb8:2cc:5073:e1cf:a3ef:264a:1e80)
[00:44:09] *** Joins: lieven (~mal@ns2.wyrd.be)
[00:44:09] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[00:44:09] *** Joins: jonrh (sid5185@id-5185.ilkley.irccloud.com)
[00:44:09] *** Joins: davetapley (sid666@id-666.uxbridge.irccloud.com)
[00:44:09] *** Joins: sajith (~sajith@user/sajith)
[00:44:09] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[00:44:09] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[00:44:09] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[00:44:09] *** Joins: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[00:44:09] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[00:44:09] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[00:44:09] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[00:44:09] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[00:44:09] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[00:44:09] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[00:44:09] *** Joins: moats (~oats@user/oats)
[00:44:09] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[00:44:09] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[00:44:09] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[00:44:09] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[00:44:09] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[00:44:09] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[00:44:09] *** Joins: rembo10 (~rembo10@remulis.com)
[00:44:09] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:44:09] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[00:44:09] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a)
[00:44:09] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[00:44:09] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:796:dd6e:a09d:717e)
[00:44:09] *** Joins: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl)
[00:44:09] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[00:44:09] *** Joins: leah2 (~leah@vuxu.org)
[00:44:09] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[00:44:09] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[00:44:09] *** Joins: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net)
[00:44:09] *** Joins: enyc (~enyc@user/enyc)
[00:44:09] *** Joins: hook54321 (sid149355@user/hook54321)
[00:44:09] *** Joins: tinwood (~tinwood@canonical/tinwood)
[00:44:09] *** Joins: clever (~clever@99.192.114.98)
[00:44:09] *** Joins: Philonous (~Philonous@user/philonous)
[00:44:09] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[00:44:09] *** Joins: xerox (~edi@user/edi)
[00:44:09] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[00:44:09] *** Joins: haritz (~hrtz@user/haritz)
[00:44:09] *** Joins: Sqaure (~a@user/square)
[00:44:09] *** Joins: kitzman (~kitzman@user/dekenevs)
[00:44:09] *** Joins: srk (~sorki@user/srk)
[00:44:09] *** Joins: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se)
[00:44:09] *** Joins: Taneb (~Taneb@runciman.hacksoc.org)
[00:44:09] *** Joins: raoul (~raoul@95.179.203.88)
[00:44:09] *** Joins: polux (~polux@51.15.169.172)
[00:44:09] *** Joins: SoF (~skius@user/skius)
[00:44:09] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[00:44:09] *** Joins: astra (sid289983@user/amish)
[00:44:09] *** Joins: siers (~ij@user/ij)
[00:44:09] *** Joins: dagit3146 (~dagit@c-24-21-226-72.hsd1.or.comcast.net)
[00:44:09] *** Joins: gregberns__ (sid315709@id-315709.helmsley.irccloud.com)
[00:44:09] *** Joins: teehemkay_ (sid14792@id-14792.lymington.irccloud.com)
[00:44:09] *** Joins: dunj3 (~dunj3@kingdread.de)
[00:44:09] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[00:44:09] *** Joins: glowcoil_ (sid3405@id-3405.tinside.irccloud.com)
[00:44:09] *** Joins: lally (sid388228@id-388228.uxbridge.irccloud.com)
[00:44:09] *** Joins: cawfee_ (~root@2406:3003:2077:2758::babe)
[00:44:09] *** Joins: philpax_ (sid516926@id-516926.lymington.irccloud.com)
[00:44:09] *** Joins: integral (sid296274@user/integral)
[00:44:09] *** Joins: berberman_ (~berberman@user/berberman)
[00:44:09] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[00:44:09] *** Joins: ldlework (~hexeme@user/hexeme)
[00:44:09] *** Joins: sunarch (uid526836@user/sunarch)
[00:44:09] *** Joins: jakesyl__ (sid56879@id-56879.hampstead.irccloud.com)
[00:44:09] *** Joins: whez (sid470288@id-470288.lymington.irccloud.com)
[00:44:09] *** Joins: nrr___ (sid20938@id-20938.lymington.irccloud.com)
[00:44:09] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[00:44:09] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[00:44:09] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[00:44:09] *** Joins: xnbya2 (~xnbya@2a01:4f8:c17:cbdd::1)
[00:44:09] *** Joins: xnyhps_ (~xnyhps@2a02:2770:3:0:216:3eff:fe67:3288)
[00:44:09] *** Joins: welterde (welterde@thinkbase.srv.welterde.de)
[00:44:09] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[00:44:09] *** Joins: ts3 (~ts@46.101.20.9)
[00:44:09] *** Joins: robbert-vdh (~robbert@robbertvanderhelm.nl)
[00:44:09] *** Joins: immae1 (~immae@2a01:4f8:141:53e7::)
[00:44:09] *** Joins: derelict (~derelict@user/derelict)
[00:44:09] *** Joins: kronicma1 (user73386@neotame.csclub.uwaterloo.ca)
[00:44:09] *** Joins: lisq (~quassel@lis.moe)
[00:44:09] *** Joins: zzz (~z@user/zero)
[00:44:09] *** Joins: nf (~n@monade.li)
[00:44:09] *** Joins: m4lvin (~m4lvin@w4eg.de)
[00:44:09] *** Joins: sterni (~lukas@user/sterni)
[00:44:09] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[00:44:09] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[00:44:09] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[00:44:09] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[00:44:09] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[00:44:09] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[00:44:09] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[00:44:09] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[00:44:09] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[00:44:09] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[00:44:09] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[00:44:09] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[00:44:09] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[00:44:09] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:44:09] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[00:44:09] *** Joins: max22- (~maxime@2a01cb0883359800154b4e88390bc120.ipv6.abo.wanadoo.fr)
[00:44:09] *** Joins: arkeet (~arkeet@moriya.ca)
[00:44:09] *** Joins: piele (~piele@tbonesteak.creativeserver.net)
[00:44:09] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[00:44:09] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[00:44:09] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[00:44:09] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[00:44:09] *** Joins: relrod (~relrod@redhat/ansible.staff.relrod)
[00:44:09] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[00:44:09] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[00:44:09] *** Joins: averell (~averell@user/averell)
[00:44:09] *** Joins: bgamari (~bgamari@2001:470:e438::1)
[00:44:09] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[00:44:09] *** Joins: bw (sid2730@user/betawaffle)
[00:44:09] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[00:44:09] *** Joins: tristanC (~tristanC@user/tristanc)
[00:44:09] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[00:44:09] *** Joins: marienz__ (~marienz@libera/staff/marienz)
[00:44:09] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[00:44:09] *** Joins: _0x47_ (sid508683@id-508683.tinside.irccloud.com)
[00:44:09] *** Joins: dragestil (~znc@user/dragestil)
[00:44:09] *** Joins: travv0 (sid293381@user/travv0)
[00:44:09] *** Joins: tomjaguarpaw (~tom@li367-225.members.linode.com)
[00:44:09] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[00:44:09] *** Joins: m1dnight (~christoph@christophe.dev)
[00:44:09] *** Joins: [exa] (exa@user/exa/x-3587197)
[00:44:09] *** Joins: df (~ben@justworks.xyz)
[00:44:09] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[00:44:09] *** Joins: maerwald (~maerwald@user/maerwald)
[00:44:09] *** Joins: AWizzArd (~code@user/awizzard)
[00:44:09] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[00:44:09] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[00:44:09] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[00:44:09] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[00:44:09] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[00:44:09] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[00:44:09] *** Joins: sm (~sm@plaintextaccounting/sm)
[00:44:09] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[00:44:09] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[00:44:09] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[00:44:09] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[00:44:09] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[00:44:09] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[00:44:09] *** Joins: SethTisue (sid14912@id-14912.ilkley.irccloud.com)
[00:44:09] *** Joins: sm[i] (~user@plaintextaccounting/sm)
[00:44:09] *** Joins: ubert (~Thunderbi@p200300ecdf0994537358816310c1cf27.dip0.t-ipconnect.de)
[00:44:09] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[00:44:09] *** Joins: absentia (~evocatus@24-212-138-156.cable.teksavvy.com)
[00:44:09] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[00:44:09] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[00:44:09] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:44:09] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[00:44:09] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[00:44:09] *** Joins: caubert (~caubert@136.244.111.235)
[00:44:09] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[00:44:09] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[00:44:09] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[00:44:09] *** Joins: noctux (~noctux@user/noctux)
[00:44:09] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[00:44:09] *** Joins: incertia (~incertia@207.98.163.88)
[00:44:09] *** Joins: sherlock_95 (~sherlock_@static.131.42.161.5.clients.your-server.de)
[00:44:09] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[00:44:09] *** Joins: ridcully_ (~ridcully@p508acc81.dip0.t-ipconnect.de)
[00:44:09] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[00:44:09] *** Joins: iteratee (~kyle@162.218.222.107)
[00:44:09] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[00:44:09] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[00:44:09] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[00:44:09] *** Joins: niko (~niko@libera/staff/niko)
[00:44:09] *** Joins: OscarH (~OscarH@90.201.86.195)
[00:44:09] *** Joins: statusbot1 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[00:44:09] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[00:44:09] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[00:44:09] *** Joins: cyphase (~cyphase@user/cyphase)
[00:44:09] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[00:44:09] *** Joins: byorgey (~byorgey@155.138.238.211)
[00:44:09] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:44:09] *** Joins: hexagoxel (~hexagoxel@hexagoxel.de)
[00:44:09] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[00:44:09] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[00:44:09] *** Joins: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp)
[00:44:09] *** Joins: landonf (landonf@mac68k.info)
[00:44:09] *** Joins: nshepperd2 (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[00:44:09] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[00:44:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:44:09] *** Joins: vglfr (~vglfr@88.155.15.0)
[00:44:09] *** Joins: ravella (~ravella@user/ryanavella)
[00:44:09] *** Joins: Pickchea (~private@user/pickchea)
[00:44:09] *** Joins: shachaf (~shachaf@user/shachaf)
[00:44:09] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[00:44:09] *** Joins: dy (~dy@user/dy)
[00:44:09] *** Joins: reda_ (~reda@user/reda)
[00:44:09] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[00:44:09] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[00:44:09] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[00:44:09] *** Joins: Hecate (~mariposa@user/hecate)
[00:44:09] *** Joins: asm (~alexander@user/asm)
[00:44:09] *** Joins: ikke (~kevin@alpine/developer/ikke)
[00:44:09] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[00:44:09] *** Joins: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001)
[00:44:09] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[00:44:09] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[00:44:09] *** Joins: tureba (~tureba@tureba.org)
[00:44:09] *** Joins: dispater (~dispater@user/brprice)
[00:44:09] *** Joins: orcus (~orcus@user/brprice)
[00:44:09] *** Joins: Flow (~none@gentoo/developer/flow)
[00:44:09] *** Joins: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0)
[00:44:09] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[00:44:09] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[00:44:09] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[00:44:09] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[00:44:09] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[00:44:09] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[00:44:09] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[00:44:09] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[00:44:09] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[00:44:09] *** Joins: Deide (~deide@user/deide)
[00:44:09] *** Joins: siraben (~siraben@user/siraben)
[00:44:09] *** Joins: Tisoxin (~ikosit@user/ikosit)
[00:44:09] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[00:44:09] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[00:44:09] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[00:44:09] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[00:44:09] *** Joins: sus (zero@user/zeromomentum)
[00:44:09] *** Joins: chronon (~chronon@user/chronon)
[00:44:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22)
[00:44:09] *** Joins: glguy (x@libera/staff/glguy)
[00:44:09] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[00:44:09] *** Joins: notzmv (~zmv@user/notzmv)
[00:44:09] *** Joins: michalz (~michalz@185.246.204.93)
[00:44:09] *** Joins: monochrom (trebla@216.138.220.146)
[00:44:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:44:09] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:44:09] *** Joins: sagax (~sagax_nb@user/sagax)
[00:44:09] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[00:44:09] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[00:44:09] *** Joins: Trattue (~Trattue@152.70.182.158)
[00:44:09] *** Joins: _________ (~nobody@user/noodly)
[00:44:09] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[00:44:09] *** Joins: blades (~blades@204.48.29.163)
[00:44:09] *** Joins: ellie (~ellie@user/ellie)
[00:44:09] *** Joins: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at)
[00:44:09] *** Joins: sshine (~simon@hubris.eta.solutions)
[00:44:09] *** Joins: cjay (cjay@nerdbox.nerd2nerd.org)
[00:44:09] *** Joins: notabled1 (~notabledu@ares.dbalan.in)
[00:44:09] *** Joins: noctuks (7vrDyCK6LH@user/noctux)
[00:44:09] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[00:44:09] *** Joins: ystael (~ystael@user/ystael)
[00:44:09] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[00:44:09] *** Joins: heath (~heath@user/heath)
[00:44:09] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[00:44:09] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[00:44:09] *** Joins: dexterfoo (~dexter@li655-253.members.linode.com)
[00:44:09] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[00:44:09] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:44:09] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:44:09] *** Joins: fendor (~fendor@178.165.184.56.wireless.dyn.drei.com)
[00:44:09] *** Joins: dysfigured (~dfg@dfg.rocks)
[00:44:09] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[00:44:09] *** Joins: Teacup (~teacup@user/teacup)
[00:44:09] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[00:44:09] *** Joins: hltk (~hltk@hltk.fi)
[00:44:09] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[00:44:09] *** Joins: mniip (mniip@libera/staff/mniip)
[00:44:09] *** Joins: a1paca (~a1paca@user/a1paca)
[00:44:09] *** Joins: sander (~sander@user/sander)
[00:44:09] *** Joins: bbear_ (~znc@21212.s.t4vps.eu)
[00:44:09] *** Joins: dextaa (~DV@user/dextaa)
[00:44:09] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[00:44:09] *** Joins: jrm (~jrm@156.34.173.250)
[00:44:09] *** Joins: tomku (~tomku@user/tomku)
[00:44:09] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[00:44:09] *** Joins: mrmonday (~robert@octarineparrot.com)
[00:44:09] *** Joins: ski (~ski@remote12.chalmers.se)
[00:44:09] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[00:44:09] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[00:44:09] *** Joins: pgib (~textual@173.38.117.89)
[00:44:09] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[00:44:09] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[00:44:09] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[00:44:09] *** Joins: mncheckm (~mncheck@193.224.205.254)
[00:44:09] *** Joins: micro (~micro@user/micro)
[00:44:09] *** Joins: raym (~raym@user/raym)
[00:44:09] *** Joins: Ekho (~Ekho@user/ekho)
[00:44:09] *** Joins: Alex_test (~al_test@178.34.151.37)
[00:44:09] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[00:44:09] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[00:44:09] *** Joins: Logio (em@kapsi.fi)
[00:44:09] *** Joins: wagle (~wagle@quassel.wagle.io)
[00:44:09] *** Joins: ishutin (~ishutin@80-95-86-56.pool.digikabel.hu)
[00:44:09] *** Joins: Unode (~Unode@194.94.44.220)
[00:44:09] *** Joins: martin02 (~silas@141.84.69.76)
[00:44:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:44:09] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:09] *** Joins: bliminse (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[00:44:09] *** Joins: __monty__ (~toonn@user/toonn)
[00:44:09] *** Joins: jespada (~jespada@87.74.36.188)
[00:44:09] *** Joins: foul_owl (~kerry@94.140.8.105)
[00:44:09] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[00:44:09] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[00:44:09] *** Joins: zaquest (~notzaques@5.130.79.72)
[00:44:09] *** Joins: glider (~glider@user/glider)
[00:44:09] *** Joins: anderson (~ande@user/anderson)
[00:44:09] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:44:09] *** Joins: vicfred (~vicfred@user/vicfred)
[00:44:09] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[00:44:09] *** Joins: adnaahm (~adnaahm@host-101-net-67-160-119.mobilinkinfinity.net.pk)
[00:44:09] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[00:44:09] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[00:44:09] *** Joins: wolfshappen (~waff@irc.furworks.de)
[00:44:09] *** Joins: img_ (~img@2405:6580:b1c0:2500:2ede:bbf7:e65:5b9)
[00:44:09] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11)
[00:44:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:44:09] *** Joins: litharge (litharge@libera/bot/litharge)
[00:44:14] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Max SendQ exceeded)
[00:44:24] *** ubert is now known as 076AAFRPQ
[00:44:26] *** Joins: Axman6 (~Axman6@user/axman6)
[00:44:26] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[00:44:26] *** Joins: juhp (~juhp@128.106.188.82)
[00:44:26] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:44:26] *** Joins: modnar (~modnar@shell.sonic.net)
[00:44:26] *** Joins: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de)
[00:44:26] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:44:26] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[00:44:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab)
[00:44:26] *** Joins: emf (~emf@2620:10d:c090:400::5:b0fe)
[00:44:26] *** Joins: finsternis (~X@23.226.237.192)
[00:44:26] *** Joins: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[00:44:26] *** Joins: gargawel (~kvirc@82-65-144-99.subs.proxad.net)
[00:44:26] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[00:44:26] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[00:44:26] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[00:44:26] *** Joins: Akiva (~Akiva@user/Akiva)
[00:44:26] *** Joins: son0p (~ff@181.136.122.143)
[00:44:26] *** Joins: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de)
[00:44:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:44:26] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[00:44:26] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[00:44:26] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[00:44:26] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[00:44:26] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[00:44:26] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[00:44:26] *** Joins: ubert (~Thunderbi@141.98.252.252)
[00:44:26] *** Joins: jakalx (~jakalx@base.jakalx.net)
[00:44:26] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[00:44:26] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[00:44:26] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[00:44:26] *** Joins: hays (rootvegeta@fsf/member/hays)
[00:44:26] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[00:44:26] *** Joins: obviyus (sid415299@user/obviyus)
[00:44:26] *** Joins: newhoggy (sid198874@id-198874.helmsley.irccloud.com)
[00:44:26] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[00:44:26] *** Joins: AlexNoo (~AlexNoo@178.34.151.37)
[00:44:26] *** Joins: Unhammer (~Unhammer@user/unhammer)
[00:44:26] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[00:44:26] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[00:44:26] *** Joins: Jon (jon@dow.land)
[00:44:26] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[00:44:26] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[00:44:26] *** Joins: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com)
[00:44:26] *** Joins: b20n (sid115913@id-115913.uxbridge.irccloud.com)
[00:44:26] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[00:44:26] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[00:44:26] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[00:44:26] *** Joins: Andrew (andrew@andrewyu.org)
[00:44:26] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[00:44:26] *** Joins: gentauro (~gentauro@user/gentauro)
[00:44:26] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[00:44:26] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[00:44:26] *** Joins: edr (~edr@user/edr)
[00:44:26] *** Joins: nonzen (~nonzen@user/nonzen)
[00:44:26] *** Joins: dolio (~dolio@130.44.130.54)
[00:44:26] *** Joins: int-e (~noone@int-e.eu)
[00:44:26] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[00:44:26] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[00:44:26] *** Joins: mixfix41 (~homefame@user/mixfix41)
[00:44:26] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[00:44:26] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[00:44:26] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[00:44:26] *** Joins: mcfilib (sid302703@user/mcfilib)
[00:44:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[00:44:26] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[00:44:26] *** Joins: unyu (~pyon@user/pyon)
[00:44:26] *** Joins: tafa (~tafa@user/tafa)
[00:44:26] *** Joins: lagash (lagash@lagash.shelltalk.net)
[00:44:26] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[00:44:26] *** Joins: haasn (~nand@haasn.dev)
[00:44:26] *** Joins: liskin (~liskin@xmonad/liskin)
[00:44:26] *** Joins: _\_ (~o@user/offon)
[00:44:26] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[00:44:26] *** Joins: sm2n (ae95cb1267@user/sm2n)
[00:44:26] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[00:44:26] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[00:44:26] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[00:44:26] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[00:44:26] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[00:44:26] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[00:44:26] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[00:44:26] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[00:44:26] *** Joins: amir (sid22336@user/amir)
[00:44:26] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[00:44:26] *** Joins: lewisje (~lewisje@72.49.207.113)
[00:44:26] *** Joins: drewolson (~drewolson@user/drewolson)
[00:44:26] *** Joins: defanor (~defanor@tart.uberspace.net)
[00:44:26] *** Joins: domcornloan (~mike@user/feetwind)
[00:44:26] *** Joins: |beowulf| (1000@sourcemage/mage/beowulf)
[00:44:26] *** Joins: bah_ (~bah@l1.tel)
[00:44:26] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[00:44:26] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[00:44:26] *** Joins: cpape`` (~user@2a01:4f9:c010:632d::1)
[00:44:26] *** Joins: tnks (sid412124@id-412124.helmsley.irccloud.com)
[00:44:26] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[00:44:26] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[00:44:26] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[00:44:26] *** Joins: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[00:44:26] *** Joins: acarrico (~acarrico@dhcp-68-142-39-249.greenmountainaccess.net)
[00:44:26] *** Joins: wrengr (~wrengr@99.34.197.35.bc.googleusercontent.com)
[00:44:29] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Max SendQ exceeded)
[00:44:37] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Ping timeout: 240 seconds)
[00:44:37] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Ping timeout: 240 seconds)
[00:44:37] *** Quits: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340) (Ping timeout: 240 seconds)
[00:44:40] *** Quits: mixfix41 (~homefame@user/mixfix41) (Max SendQ exceeded)
[00:44:40] *** Quits: finsternis (~X@23.226.237.192) (Max SendQ exceeded)
[00:44:50] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[00:44:50] *** Joins: xff0x (~xff0x@2001:1a81:53ac:4a00:25b:5701:e54d:ee3e)
[00:44:50] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:44:50] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[00:44:50] *** Joins: coot (~coot@213.134.190.95)
[00:44:50] *** Joins: kadoban (~kadoban@user/kadoban)
[00:44:50] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:44:50] *** Joins: michalz2 (~michalz2@185.246.204.65)
[00:44:50] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:40a0:b50a:e8ed:d1eb)
[00:44:50] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[00:44:50] *** Joins: remedan (~remedan@octo.cafe)
[00:44:50] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[00:44:50] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[00:44:50] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[00:44:50] *** Joins: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001)
[00:44:50] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[00:44:50] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[00:44:50] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[00:44:50] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[00:44:50] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[00:44:50] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[00:44:50] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[00:44:50] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[00:44:50] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[00:44:50] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[00:44:50] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[00:44:50] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[00:44:50] *** Joins: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f)
[00:44:50] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[00:44:50] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[00:44:50] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[00:44:50] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[00:44:50] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[00:44:50] *** Joins: flupe (~baboum@radon.sbi.re)
[00:44:50] *** Joins: megaTherion (~therion@unix.io)
[00:44:50] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[00:44:50] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[00:44:50] *** Joins: AndreasK (sid320732@id-320732.uxbridge.irccloud.com)
[00:44:50] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[00:44:50] *** Joins: s4msung (bZt8T9wHxn@user/s4msung)
[00:44:50] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[00:44:50] *** Joins: douglaswinship (~douglaswi@78.40.148.180)
[00:44:50] *** Joins: g (x@libera/staff/glguy)
[00:44:50] *** Joins: iphy (sid67735@id-67735.lymington.irccloud.com)
[00:44:50] *** Joins: energizer (~energizer@user/energizer)
[00:44:50] *** Joins: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com)
[00:44:50] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[00:44:50] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[00:44:50] *** Joins: davean (~davean@davean.sciesnet.net)
[00:44:50] *** Joins: shane (~shane@ana.rch.ist)
[00:44:50] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[00:44:50] *** Joins: sa1 (sid7690@id-7690.ilkley.irccloud.com)
[00:44:50] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[00:44:50] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[00:44:50] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[00:44:50] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[00:44:50] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[00:44:50] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[00:44:50] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[00:44:50] <geekosaur> o.O
[00:44:50] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Max SendQ exceeded)
[00:44:56] *** Quits: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (Ping timeout: 245 seconds)
[00:44:56] *** Quits: kadoban (~kadoban@user/kadoban) (Max SendQ exceeded)
[00:45:01] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[00:45:01] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:45:01] *** Joins: nunggu (~q@user/nunggu)
[00:45:01] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:45:01] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:45:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:45:01] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[00:45:01] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:45:01] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[00:45:01] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:45:01] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:45:01] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[00:45:01] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[00:45:01] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (Ping timeout: 250 seconds)
[00:45:01] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (Ping timeout: 250 seconds)
[00:45:01] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[00:45:01] *** Joins: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[00:45:01] *** Joins: adium (adium@user/adium)
[00:45:01] *** Joins: nckx (~nckx@tobias.gr)
[00:45:01] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[00:45:01] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[00:45:01] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[00:45:01] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[00:45:01] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[00:45:01] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[00:45:01] *** Joins: enemeth79 (sid309041@id-309041.lymington.irccloud.com)
[00:45:01] *** Joins: bjs (sid190364@user/bjs)
[00:45:01] *** Joins: sclv (sid39734@haskell/developer/sclv)
[00:45:01] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[00:45:01] *** Joins: dmj` (sid72307@id-72307.hampstead.irccloud.com)
[00:45:01] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[00:45:01] *** Joins: gaze___ (sid387101@id-387101.helmsley.irccloud.com)
[00:45:01] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[00:45:02] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Ping timeout: 240 seconds)
[00:45:02] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Ping timeout: 240 seconds)
[00:45:04] *** Joins: finsternis (~X@23.226.237.192)
[00:45:08] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Ping timeout: 252 seconds)
[00:45:08] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Ping timeout: 252 seconds)
[00:45:08] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Ping timeout: 252 seconds)
[00:45:08] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Ping timeout: 252 seconds)
[00:45:08] *** Quits: sm (~sm@plaintextaccounting/sm) (Ping timeout: 252 seconds)
[00:45:10] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 260 seconds)
[00:45:10] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Ping timeout: 260 seconds)
[00:45:10] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Ping timeout: 260 seconds)
[00:45:10] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (Ping timeout: 260 seconds)
[00:45:11] *** Quits: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756) (Ping timeout: 260 seconds)
[00:45:11] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Ping timeout: 260 seconds)
[00:45:11] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Ping timeout: 260 seconds)
[00:45:18] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[00:45:18] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[00:45:18] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[00:45:18] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[00:45:18] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[00:45:18] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[00:45:18] *** Joins: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203)
[00:45:18] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[00:45:18] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[00:45:18] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[00:45:18] *** Joins: matijja (~matijja@193.77.181.201)
[00:45:18] *** Joins: joeyh_ (joeyh@kitenet.net)
[00:45:18] *** Joins: Adran (adran@botters/adran)
[00:45:18] *** Joins: noddy (~user@user/noddy)
[00:45:18] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[00:45:18] *** Joins: remexre (~remexre@user/remexre)
[00:45:18] *** Joins: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[00:45:18] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[00:45:18] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[00:45:18] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[00:45:18] *** Joins: feliix42_ (~felix@gibbs.uberspace.de)
[00:45:18] *** Joins: aristid (sid1599@uxbridge.irccloud.com)
[00:45:18] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[00:45:18] *** Joins: tritlo (sid58727@user/tritlo)
[00:45:18] *** Joins: lightandlight (sid135476@id-135476.helmsley.irccloud.com)
[00:45:18] *** Joins: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net)
[00:45:18] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[00:45:18] *** Joins: kadobanana (~mud@user/kadoban)
[00:45:18] *** Joins: myme (~myme@2a01:799:d5a:cd00:fb5a:85b7:3647:e056)
[00:45:18] *** Joins: phma (phma@2001:5b0:211c:a988:8f1d:f7a6:3d8d:dc0c)
[00:45:18] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[00:45:18] *** Joins: V (~v@anomalous.eu)
[00:45:18] *** Joins: acidsys (~LSD@2.lsd.systems)
[00:45:18] *** Joins: jjhoo (~jahakala@user/jjhoo)
[00:45:18] *** Joins: forell (~forell@user/forell)
[00:45:18] *** Joins: hueso (~root@user/hueso)
[00:45:18] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:45:18] *** Joins: jinsun__ (~quassel@user/jinsun)
[00:45:18] *** Joins: lechner (~lechner@debian/lechner)
[00:45:18] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[00:45:18] *** Joins: polyphem (~rod@2a02:810d:840:8754:5126:c335:5f23:8358)
[00:45:18] *** Joins: Megant (megant@user/megant)
[00:45:18] *** Joins: aeka (~aeka@user/hiruji)
[00:45:18] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[00:45:18] *** Joins: MasseR4 (~MasseR@51.15.143.128)
[00:45:18] *** Joins: xsperry (~xs@user/xsperry)
[00:45:18] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[00:45:18] *** Joins: vito (sid1962@user/vito)
[00:45:18] *** Joins: alinab (sid468903@id-468903.helmsley.irccloud.com)
[00:45:18] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[00:45:18] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[00:45:18] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[00:45:18] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[00:45:18] *** Joins: jocke-l (jocke-l@a.x0.is)
[00:45:18] *** Joins: gdd (~gdd@129.199.146.230)
[00:45:18] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[00:45:18] *** Joins: np (~nerdypepp@user/nerdypepper)
[00:45:18] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[00:45:18] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[00:45:18] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[00:45:18] *** Joins: Athas (athas@sigkill.dk)
[00:45:18] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[00:45:18] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:45:18] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[00:45:18] *** Joins: vgtw (~vgtw@user/vgtw)
[00:45:18] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[00:45:18] *** Joins: nisstyre (~wes@user/nisstyre)
[00:45:18] *** Joins: biberu (~biberu@user/biberu)
[00:45:18] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[00:45:18] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[00:45:18] *** Joins: rookie101 (~rookie@165.232.121.13)
[00:45:18] *** Joins: samebchase (~samebchas@51.15.68.182)
[00:45:18] *** Joins: peutri (~peutri@ns317027.ip-94-23-46.eu)
[00:45:18] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[00:45:18] *** Joins: auri (~quassel@fsf/member/auri)
[00:45:18] *** Joins: Moyst_ (~moyst@user/moyst)
[00:45:18] *** Joins: bsdbandit (~bwell@users.757.org)
[00:45:18] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[00:45:18] *** Joins: ringo__ (~ringo@157.230.117.128)
[00:45:18] *** Quits: gdd (~gdd@129.199.146.230) (Max SendQ exceeded)
[00:45:18] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Ping timeout: 245 seconds)
[00:45:18] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: siraben (~siraben@user/siraben) (Max SendQ exceeded)
[00:45:21] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Ping timeout: 245 seconds)
[00:45:21] *** Quits: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f) (Ping timeout: 245 seconds)
[00:45:25] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Ping timeout: 240 seconds)
[00:45:25] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Ping timeout: 250 seconds)
[00:45:25] *** Quits: Deide (~deide@user/deide) (Ping timeout: 250 seconds)
[00:45:26] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (Ping timeout: 250 seconds)
[00:45:32] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Ping timeout: 240 seconds)
[00:45:32] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Ping timeout: 240 seconds)
[00:45:38] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Ping timeout: 260 seconds)
[00:45:38] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Ping timeout: 260 seconds)
[00:45:41] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Ping timeout: 252 seconds)
[00:45:41] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 252 seconds)
[00:45:41] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Ping timeout: 252 seconds)
[00:45:46] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Ping timeout: 245 seconds)
[00:45:51] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Ping timeout: 250 seconds)
[00:45:51] *** Quits: Tisoxin (~ikosit@user/ikosit) (Ping timeout: 250 seconds)
[00:45:59] <janus> that was meant to be a question. because if the flag applies on the whole dep tree, it seems like it would make sense to coordinate flag names
[00:46:06] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Ping timeout: 260 seconds)
[00:46:06] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Ping timeout: 260 seconds)
[00:46:06] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Ping timeout: 260 seconds)
[00:46:06] *** Quits: moats (~oats@user/oats) (Ping timeout: 260 seconds)
[00:46:06] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Ping timeout: 260 seconds)
[00:46:06] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Ping timeout: 260 seconds)
[00:46:14] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Ping timeout: 252 seconds)
[00:46:14] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Ping timeout: 252 seconds)
[00:46:14] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Ping timeout: 252 seconds)
[00:46:15] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Ping timeout: 268 seconds)
[00:46:15] *** Quits: szkl (uid110435@uxbridge.irccloud.com) (Client Quit)
[00:46:26] <geekosaur> the problem is even if they're coordinated you may not want them to apply everywhere
[00:47:13] <geekosaur> consider that you might want a hypothetical -fllvm to apply to one package which does a lot of math (which is generally faster) but not some other package (where it might be done for a backend)
[00:47:26] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 245 seconds)
[00:47:29] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 254 seconds)
[00:47:34] <janus> right, but that is achievable using constraints which can set a flag on an individual package https://stackoverflow.com/a/49808007/309483
[00:47:48] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:47:49] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[00:48:17] <geekosaur> and if you really want it on all packages you can use a `package *` stanza in `cabal.project`
[00:48:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:49:07] *** Joins: Pent (sid313808@lymington.irccloud.com)
[00:49:29] <janus> oh cool
[00:49:38] *** Joins: kristjansson (sid126207@tinside.irccloud.com)
[00:50:11] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[00:50:13] *** Joins: mon_aaraj (~MonAaraj@149.255.212.24)
[00:52:36] <janus> sounds like there is no reason not to coordinate names since you wouldn't accidentally flip a flag anyway, they don't apply on all packages anyway (by default)
[00:53:33] *** Quits: szkl (uid110435@uxbridge.irccloud.com) ()
[00:54:06] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Quit: Leaving)
[00:54:22] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:55:33] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Client Quit)
[00:55:47] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:55:58] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:56:11] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[00:56:21] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:57:51] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[00:57:55] *** Joins: MatthiasG2 (~matthias@i6DFA0138.versanet.de)
[00:59:21] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[00:59:23] *** Joins: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a)
[00:59:45] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[01:00:07] *** Joins: alp (~alp@2a01:e0a:58b:4920:d89a:b09d:1a2b:26ba)
[01:01:29] *** Quits: img_ (~img@2405:6580:b1c0:2500:2ede:bbf7:e65:5b9) (Changing host)
[01:01:29] *** Joins: img_ (~img@user/img)
[01:01:31] *** Joins: ChanServ (ChanServ@services.libera.chat)
[01:01:31] *** erbium.libera.chat sets mode: +o ChanServ
[01:02:09] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[01:02:12] *** Joins: califax (~califax@user/califx)
[01:02:13] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Quit: Leaving)
[01:02:23] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[01:02:24] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:02:30] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[01:02:47] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[01:05:09] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[01:05:14] *** Quits: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl) (Ping timeout: 260 seconds)
[01:05:17] *** Joins: toshiblue (~toshiblue@c-73-111-20-145.hsd1.il.comcast.net)
[01:05:58] *** Joins: cynomys (~cynomys@user/cynomys)
[01:06:25] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[01:06:41] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[01:06:47] *** Joins: gdd (~gdd@129.199.146.230)
[01:07:37] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[01:08:14] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[01:08:31] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[01:10:12] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11) (Remote host closed the connection)
[01:11:08] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:12:43] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 250 seconds)
[01:16:11] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:17:02] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:17:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[01:19:57] *** Joins: kadoban (~kadoban@user/kadoban)
[01:19:59] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[01:19:59] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[01:20:07] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[01:20:42] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[01:21:19] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:713a:ad1d:dd0:bdcc)
[01:21:30] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[01:21:31] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[01:21:32] *** Joins: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203)
[01:24:38] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[01:25:40] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a)
[01:27:07] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[01:27:12] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[01:27:16] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[01:27:19] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[01:27:38] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[01:28:23] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[01:28:24] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[01:28:26] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[01:28:29] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[01:28:46] *** Joins: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl)
[01:28:53] *** Joins: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[01:28:55] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[01:28:55] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[01:29:38] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[01:30:56] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[01:31:05] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[01:31:14] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[01:31:17] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[01:32:16] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[01:32:39] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[01:33:29] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[01:34:30] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[01:34:36] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[01:34:46] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[01:34:49] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[01:34:49] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[01:34:55] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[01:34:58] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[01:34:59] *** Joins: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001)
[01:35:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:36:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab) (Remote host closed the connection)
[01:37:23] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[01:37:28] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[01:37:36] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[01:37:43] *** Joins: sm (~sm@plaintextaccounting/sm)
[01:37:47] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[01:38:04] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 256 seconds)
[01:38:33] *** Joins: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f)
[01:38:41] *** Quits: toshiblue (~toshiblue@c-73-111-20-145.hsd1.il.comcast.net) (Quit: Client closed)
[01:38:47] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[01:39:19] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[01:39:52] *** Joins: toshiblue (~toshiblue@c-73-111-20-145.hsd1.il.comcast.net)
[01:40:59] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[01:41:24] *** Quits: michalz2 (~michalz2@185.246.204.65) (Remote host closed the connection)
[01:41:24] *** Quits: michalz (~michalz@185.246.204.93) (Remote host closed the connection)
[01:41:59] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[01:42:05] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[01:42:19] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[01:44:14] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[01:44:32] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[01:44:38] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:44:39] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[01:44:39] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[01:44:43] *** Joins: siraben (~siraben@user/siraben)
[01:44:46] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[01:44:50] *** Joins: Deide (~deide@user/deide)
[01:45:02] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[01:45:14] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[01:45:20] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[01:45:22] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[01:45:24] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[01:45:27] *** Joins: Tisoxin (~ikosit@user/ikosit)
[01:45:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:45:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:45:31] *** Joins: wroathe (~wroathe@user/wroathe)
[01:45:47] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[01:45:53] *** Joins: moats (~oats@user/oats)
[01:45:55] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[01:46:31] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[01:46:32] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[01:46:34] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[01:47:02] *** Joins: psydroid (~psydroid@user/psydroid)
[01:47:27] *** Joins: Guest19 (~Guest19@2a01:4b00:e035:c00:34fb:eb4f:7925:d772)
[01:47:39] *** Quits: Guest19 (~Guest19@2a01:4b00:e035:c00:34fb:eb4f:7925:d772) (Client Quit)
[01:47:41] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[01:47:42] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:796:dd6e:a09d:717e) (Ping timeout: 260 seconds)
[01:47:54] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[01:47:54] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[01:47:54] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[01:47:55] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:47:55] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[01:48:10] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[01:48:17] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:49:08] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[01:49:17] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[01:49:42] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[01:49:45] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[01:50:09] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[01:50:49] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[01:52:11] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[01:52:40] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[01:53:15] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[01:53:21] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[01:53:26] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: Leaving)
[01:53:27] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[01:54:40] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:55:51] *** Quits: MatthiasG2 (~matthias@i6DFA0138.versanet.de) (Ping timeout: 250 seconds)
[01:56:03] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a)
[01:56:23] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[01:56:29] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[01:56:33] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[01:56:48] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[01:56:51] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[01:56:52] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[01:57:01] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[01:57:04] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:57:20] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:143b:3f0e:5bf:b4a8)
[01:57:48] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[01:57:49] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[01:59:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:00:04] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[02:00:04] <segfaultfizzbuzz> so, i don't understand here https://paste.rs/eyX.hs
[02:00:11] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:00:52] <segfaultfizzbuzz> https://hackage.haskell.org/package/xml-types-0.3.8/docs/Data-XML-Types.html#t:Name     nameLocalName looks like it only takes one type as a constructor
[02:00:56] <segfaultfizzbuzz> err one value
[02:00:58] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[02:01:28] <monochrom> isNamed (nameLocalName "img") ?
[02:02:26] <monochrom> The way I made that guess is: "expected X", "actual X->Y", "first argument of ‘isNamed’, namely ‘nameLocalName’".
[02:02:59] *** Quits: max22- (~maxime@2a01cb0883359800154b4e88390bc120.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:03:27] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[02:03:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[02:04:07] <monochrom> There may be other problems.
[02:04:34] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[02:04:40] <awpr> that plus you're trying to pipe a conduit into a function of `Element -> [Element]`, whereas it expects to be piped into further conduits
[02:05:03] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[02:05:23] <awpr> I assume there's a combinator in some conduit utility module like `(a -> [b]) -> ConduitSomething a b ()`
[02:06:27] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[02:06:44] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[02:07:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:07:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:07:06] *** Joins: wroathe (~wroathe@user/wroathe)
[02:07:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:11:27] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[02:11:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:12:43] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:13:33] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:14:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab)
[02:15:06] *** Quits: 076AAFRPQ (~Thunderbi@p200300ecdf0994537358816310c1cf27.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:16:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[02:17:29] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[02:17:29] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[02:18:57] *** Quits: fendor (~fendor@178.165.184.56.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[02:19:55] <segfaultfizzbuzz> i'm not making sense of this
[02:20:33] *** Joins: hololeap (~hololeap@user/hololeap)
[02:20:38] *** Joins: alx741 (~alx741@157.100.197.240)
[02:21:57] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[02:22:02] <awpr> `(.|) :: Monad m => ConduitM a b m () -> ConduitM b c m r -> ConduitM a c m r`, i.e. its arguments are two conduits.  in the code paste, it's being applied to a function and a conduit, which is a type error
[02:22:41] <awpr> er, in the code paste if it said `isNamed (nameLocalName "img")` as suggested above
[02:23:14] <segfaultfizzbuzz> the parens don't help much
[02:23:39] <monochrom> Sure, I picked a low-hanging fruit.
[02:23:46] <segfaultfizzbuzz> i mean, thanks for trying
[02:24:00] <awpr> they make the call to `isNamed` well-typed in isolation, but they don't affect the problem that a function is different from a conduit
[02:24:22] <segfaultfizzbuzz> i'm expecting the ergonomics of this to be that i have something like foo |> bar |> baz
[02:24:31] <segfaultfizzbuzz> where foo produces a stream, bar filters it somehow, and baz consumes the stream
[02:24:48] <awpr> right, understood
[02:25:15] <segfaultfizzbuzz> so i need to somehow promote isNamed to a conduit, is that the issue?
[02:25:22] <awpr> yes, looks like that's with https://hackage.haskell.org/package/conduit-1.3.4.2/docs/Data-Conduit-Combinators.html#v:concatMap
[02:26:40] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:27:15] *** Quits: adnaahm (~adnaahm@host-101-net-67-160-119.mobilinkinfinity.net.pk) (Remote host closed the connection)
[02:29:44] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:30:13] *** Quits: APic (~apic@apic.name) (Ping timeout: 256 seconds)
[02:30:46] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:40a0:b50a:e8ed:d1eb) (Ping timeout: 245 seconds)
[02:31:42] *** Joins: APic (apic@apic.name)
[02:33:12] <segfaultfizzbuzz> hmm https://paste.rs/dYa.hs
[02:33:21] <segfaultfizzbuzz> adding an import of Name does nothing for the errors
[02:33:36] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[02:33:49] <segfaultfizzbuzz> import Data.XML.Types (Name, nameLocalName, isNamed)
[02:35:23] <awpr> oh, I probably should have actually looked at the type of `nameLocalName`
[02:35:26] <geekosaur> that's not your biggest prolem. you're using the wrong concatMap
[02:35:42] <awpr> yeah, that too, for the first error
[02:35:54] <maerwald> should have used streamly xD
[02:35:56] *** Joins: rustisafungus (~rustisafu@2602:306:cd3c:9350:cc4:c954:b25:db0a)
[02:36:25] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:38:37] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:143b:3f0e:5bf:b4a8) (Ping timeout: 240 seconds)
[02:39:26] *** rustisafungus is now known as segfaultfizzbuzz
[02:39:47] <segfaultfizzbuzz> sorrry, my laptop power cable is loose, lol
[02:45:57] <segfaultfizzbuzz> eh, hiding concatMap didn't do a lot to help
[02:47:47] <awpr> if it didn't say "ambiguous reference" before, then hiding cannot be expected to fix it.  you have to import the right one, and make sure you're referencing the right one
[02:50:11] <segfaultfizzbuzz> https://paste.rs/Qje.hs
[02:51:45] <awpr> a) `nameLocalName` is still a problem, that's trying to access a `Text` field of a `Name`, but the thing it's being passed to expects the entire `Name`
[02:52:09] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[02:52:11] <segfaultfizzbuzz> if i import Name it becomes unhappy,... i guess this becomes another namespace conflict thing...?
[02:52:15] <awpr> it might just want to be `isNamed "img"`, depending on how the `IsString` instance works
[02:52:55] <segfaultfizzbuzz> it wants an Element
[02:52:56] *** Quits: meltedbrain_y2k (~tekserf@47.61.115.91) (Read error: Connection reset by peer)
[02:53:31] <segfaultfizzbuzz> so... is this stuff not really used? am i one of like ten people to actually use this?
[02:53:33] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[02:53:35] <awpr> no, it wants a `Name` first, and then an `Element`: `isNamed :: Name -> Element -> [Element]`
[02:53:54] <absentia> segfaultfizzbuzz: it's used, irc is just slow
[02:54:15] <awpr> I have no idea whether `xml-types` is used, but `conduit` is very popular (for a Haskell library)
[02:54:18] *** Parts: janus (janus@anubis.0x90.dk) ()
[02:54:40] <absentia> oh wait you mean conduits
[02:54:43] <absentia> haha
[02:55:04] <segfaultfizzbuzz> yes i mean conduits and xml types and whatnot, because filtering based on an element seems to be one of the most basic things
[02:55:07] <monochrom> The intersection of conduit users and xml-types users can be pretty small.
[02:55:11] <segfaultfizzbuzz> the documentation isn't really the greatest,... heh ok
[02:55:28] <segfaultfizzbuzz> anyway if i add Name to the imports, ghc is still unhappy
[02:55:44] <awpr> why is adding `Name` relevant?  it's not referenced in the code
[02:56:01] <awpr> no reason to expect importing something you don't use would affect anything
[02:56:11] <segfaultfizzbuzz> it seems that i need to say  Data.Conduit.Combinators.concatMap (isNamed (Name "img"))   if i am not going to use nameLocalName
[02:56:21] <absentia> awpr: typeclass instances?
[02:56:31] <segfaultfizzbuzz> but   import Data.XML.Types (nameLocalName, Name, isNamed)   doesn't make that problem go away
[02:56:34] <awpr> then you're importing the typeclass instances
[02:56:36] <segfaultfizzbuzz> i guess i could be completely explicit
[02:56:45] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[02:57:12] <awpr> the constructor of `Name` takes three arguments.  but it has an `IsString` instance that should be easier to use, like I posted earlier
[02:57:25] <segfaultfizzbuzz> this is haskell, how can it be confused that i am not adding Name to the import list when i in fact am
[02:57:29] <awpr> the other problem is (reading directly from the error message here) that the earlier part of the conduit pipeline produces `Event`s, and the later part expects `Element`s
[02:57:49] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[02:58:03] <awpr> oh, you're also not importing the data constructor `Name`, only the type `Name`.  it's not confused, although it is arguably confus_ing_
[02:58:45] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[02:59:03] <monochrom> The syntax for importing a data constructor DC is not "import M(DC)". It is "import M(T(DC))" if T is the type name.
[02:59:04] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[02:59:14] *** Joins: hueso (~root@user/hueso)
[02:59:15] <segfaultfizzbuzz> what. lol
[02:59:23] <segfaultfizzbuzz> Name(Name) ?
[02:59:28] <awpr> yes
[02:59:30] <segfaultfizzbuzz> lol
[02:59:56] <awpr> or `Name(..)`
[03:01:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[03:01:39] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[03:01:57] <awpr> but even so, importing `Name` won't fix that snippet; it's given the wrong number of parameters
[03:02:01] *** bontaq` is now known as bontaq
[03:02:33] <segfaultfizzbuzz> i mean i am looking at the documentation and nameLocalName takes one Text argument and Name looks like it should be the same ?
[03:03:21] <monochrom> Amazingly, https://www.haskell.org/tutorial/modules.html teaches this.
[03:03:34] <awpr> `nameLocalName :: Name -> Text` and `Name :: Text -> Maybe Text -> Maybe Text -> Name`
[03:03:51] <segfaultfizzbuzz> https://www.youtube.com/watch?v=CScRRlmvncA
[03:04:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[03:08:14] *** Quits: gargawel (~kvirc@82-65-144-99.subs.proxad.net) (Ping timeout: 250 seconds)
[03:10:32] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a)
[03:10:32] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a) (Client Quit)
[03:10:34] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[03:16:41] *** Joins: Topsi (~Tobias@dyndsl-095-033-017-221.ewe-ip-backbone.de)
[03:18:38] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[03:19:12] <segfaultfizzbuzz> should i switch to streamly? i made several attempts at simply checking whether something has a name of img and nothing works
[03:19:41] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a)
[03:19:58] <awpr> switching to streamly has nothing to do with the cause of this particular error.  so, maybe?  I don't have an established preference between the two.
[03:20:22] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (Remote host closed the connection)
[03:20:26] <awpr> the problem here is that the code is parsing Events and then trying to consume Elements
[03:21:22] *** Joins: pavonia (~user@user/siracusa)
[03:22:00] <awpr> so you'd either need to switch to a parser that parses Elements (which probably means giving up on streaming?) or do something more complex downstream to sift through Events to accomplish whatever you're trying to do
[03:22:10] *** Joins: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net)
[03:22:56] <segfaultfizzbuzz> the .| specifies a stream direction, like |> right ?
[03:23:13] <segfaultfizzbuzz> left to right
[03:23:28] <awpr> effectively, yeah
[03:24:26] <segfaultfizzbuzz> i mean let me see if what haskell folks say is true. so i search for element and event on hoogle and i find... https://hoogle.haskell.org/?hoogle=event+element&scope=set%3Astackage
[03:24:50] <awpr> what do Haskell folks say?
[03:24:50] <segfaultfizzbuzz> so i need elementFromEvents ?
[03:25:05] <segfaultfizzbuzz> that i can just search on hoogle and my type transformation problems will be solved
[03:25:38] <monochrom> I never said that.
[03:25:39] <awpr> oh.  I wouldn't say that, I rarely if ever use Hoogle.  but that function looks plausible
[03:26:01] <awpr> (and it constitutes giving up on streaming, at least partially, because it parses the whole document into one giant tree)
[03:26:04] <segfaultfizzbuzz> elementFromEvents :: MonadThrow m => ConduitT EventPos o m (Maybe Element) rather complex type signature though
[03:26:34] <segfaultfizzbuzz> ok... so... i can't do a streaming xml parse and filter then...?
[03:26:49] <monochrom> "Element", "Event" are pretty popular names picked by unrelated library authors for unrelated things.
[03:27:00] <awpr> eh, par for the course for Conduit functions.  it's a conduit that eats all of the EventPos and builds an Element or fails
[03:27:08] <monochrom> Consider the equivalent of "Test -> Run"
[03:27:21] <segfaultfizzbuzz> i actually wanted to stream a zip file (i think bz2 to be exact), unzip the zip stream, parse the xml stream, grab particular elements, and then do a simple calculation on those
[03:27:38] <segfaultfizzbuzz> so... give up on conduit...?
[03:27:50] <monochrom> Literally all of my students (there are 50+) call their programs "test" or "run".
[03:27:54] <awpr> conduit is still providing value there, in the chunk-wise streaming of compressed data and parse input
[03:28:26] <awpr> that's the "partially": the whole document is loaded into memory, but there's potentially streaming throughout the parse process
[03:28:31] <monochrom> I'm pretty sure every streaming library will give you type errors.
[03:29:53] <segfaultfizzbuzz> i was actually partially understanding the documentation here, i think https://hackage.haskell.org/package/streamly-0.1.0/docs/Streamly-Tutorial.html
[03:30:28] <monochrom> You used to partially understand conduit's documentation, too.
[03:30:56] <dsal> *sigh* -- this project I'm having a problem with uses a Makefile to build.  Neat, a simple entry point, I guess.  The Makefile launches stack.  But it's not a stack project.  So stack on my machine gets confused because whatever the default is just doesn't work for me.  But there's a cabal file.  cabal builds it just fine and doesn't have the same strange issue the complex nix project I'm trying to import it into has.
[03:31:04] * dsal should add a build system to solve the problem
[03:31:15] <awpr> the issue is basically that streaming a tree structure is a bit complicated, because you have to consume it as "enter an <p> tag, visit this sentence, enter an <img> tag, observe this src=_ attribute, exit an <img> tag, visit another sentence, exit a <p> tag, etc.", and no streaming library will make that not be complicated
[03:32:27] <segfaultfizzbuzz> i mean,... as long as you do your computation when you hit </tag of interest>, isn't that enough ?
[03:32:32] <monochrom> dsal: I would be interested in what cute name you would choose for your build system :)
[03:32:54] <dsal> haha.   noo...  I very much don't want to introduce a build system.
[03:32:54] <awpr> yeah, as long as you took care to collect the needed information from the start of the tag
[03:33:29] <dsal> stack + nix = snax
[03:33:29] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:33:31] <awpr> this is still something you can do, but it's not done by the Element-oriented functions
[03:33:34] <DigitalKiwi> dsl build
[03:33:45] <segfaultfizzbuzz> so... i can't do this then? i have to fit the entire file into RAM in order to process? my zip file is like a terabyte and i have a dozen or so gigs of ram here
[03:33:50] <monochrom> @botsnax
[03:33:50] <lambdabot> :)
[03:34:16] <monochrom> (The true command is @botsnack )
[03:34:16] *** Joins: kli_ (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[03:34:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:35:00] <monochrom> So lambdabot is saying it likes the name snax. :)
[03:35:28] <geekosaur> https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/tagsoup might be of interest
[03:35:51] *** Quits: kli_ (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Remote host closed the connection)
[03:36:35] <DigitalKiwi> @botsnack
[03:36:35] <lambdabot> :)
[03:37:03] <DigitalKiwi> @botgiberrish
[03:37:03] <lambdabot> Unknown command, try @list
[03:37:09] <DigitalKiwi> :(
[03:38:43] <dsal> @botulism
[03:38:43] <lambdabot> Unknown command, try @list
[03:38:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[03:39:58] <segfaultfizzbuzz> geekosaur: this documentation is from 2013...
[03:41:01] <geekosaur> and? tagsoup is stable, and has the advantage that you can pretty much ignore document structure (if any; being the web there often isn't much reliable structure, which is the point of tagsoup)
[03:41:49] <geekosaur> tagsoup doesn't *need* to change much
[03:42:20] <awpr> a high-level description of how to grab img tags out of the event stream manually would be like: write a Conduit `consumeOne` that `await`s an event; if it's an img tag, call a second Conduit `consumeImg` on it; else do nothing.  then `consumeImg` should await the contents until it finds a "</img>", and emit an `Element` or whatever other type you want; finally, the whole consumer is `forever consumeOne`
[03:43:44] <awpr> or, if you're willing to assume img tags are empty, then just `mapMaybe` the event stream looking for `EventBeginElement "img" ...` and ignore everything else
[03:43:57] <EvanR> if it's not invalidated and requiring maintenance every week or two is it really compatible with the web
[03:46:08] <EvanR> if usable code necessarily requires someone to hammer on it periodically, then that's a hard limit on the amount of usable code at any given time (assuming fixed amount of available programmers)
[03:46:15] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:51:01] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[03:51:35] *** Quits: toshiblue (~toshiblue@c-73-111-20-145.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[03:54:19] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.4)
[03:55:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:58:24] <segfaultfizzbuzz> geekosaur: tagsoup is not stream-based, it looks like?
[03:58:48] <segfaultfizzbuzz> geekosaur: so it will read the entire page into memory, parse there, and then try to operate on the fully parsed document?
[03:59:13] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[03:59:18] <segfaultfizzbuzz> awpr: i will try to understand this
[03:59:29] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[03:59:50] <segfaultfizzbuzz> awpr: thanks for clarifying that this is beyond what can be done ergonomically (?) with streams
[04:00:34] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: alx741)
[04:01:00] <segfaultfizzbuzz> so then if i can't work with a tree data structure in streams (which is more or less the simplest thing i can think of), is conduits/streams "meant" to be used on localized computations on a window of the stream?
[04:01:06] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[04:02:13] <geekosaur> sorry, I thought this used a tagsoup conduit. in any case the tutorial I linked tells you how to search dfor specific tags with a specific attribute
[04:02:16] *** Joins: alx741 (~alx741@157.100.197.240)
[04:02:22] <geekosaur> looks like it uses xml-conduit
[04:03:03] *** Quits: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl) (Remote host closed the connection)
[04:03:56] <awpr> tbh I don't think this is really specifically about Haskell streaming issues, but more about incremental processing of a tree given its preorder traversal -- it'd be complicated in the same ways in any other language
[04:03:57] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:03:58] <segfaultfizzbuzz> ah my bad i just consulted the tagsoup documentation directly... i'll try this
[04:04:06] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (Quit: Connection closed)
[04:04:51] <geekosaur> there *is* a conduit-tagsoup module, it turns out, but it's aged and explicitly "semi-maintained"
[04:04:51] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:05:04] <segfaultfizzbuzz> sigh
[04:05:15] <segfaultfizzbuzz> okay what do "normal" programmers use for this... some java library...?
[04:05:17] <geekosaur> then again, like tagsoup itself it doesn't need much maintenance; conduit likely changes more often than tagsoup does
[04:06:03] <awpr> if the task is literally extracting img tags from a compressed xml document... I'd probably use `gunzip | xsel`
[04:06:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:06:19] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:07:34] <awpr> and if it needed to be callable from Haskell, I might even consider wrapping that actual Unix pipeline up in Haskell APIs, depending on miscellaneous circumstances
[04:08:16] <segfaultfizzbuzz> my goal is to use haskell here. my document isn't html, it's some weird xml document. i need to grab some elements and calculate some stuff on them
[04:10:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[04:11:08] <awpr> wrapping up calls to xsel still might be a decent answer -- they've already done the hard work of sifting through XML efficiently to find specific things.  or if the details of what you want to extract are simple enough (like "all of a certain kind of tag, assumed to be empty"), then the "more complicated" event stream approach might not be so bad
[04:11:45] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[04:12:02] <awpr> (re-raising "or, if you're willing to assume img tags are empty, then just `mapMaybe` the event stream looking for `EventBeginElement "img" ...` and ignore everything else")
[04:12:26] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[04:12:40] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[04:13:22] <awpr> (because if you assume the tags you're looking for are empty, then the EventBeginElement has everything you need, and if you don't care where the tag is, then you don't have to look at the other events at all)
[04:14:52] <segfaultfizzbuzz> my goal isn't to get the work done here as much as to try to "make use of haskell"
[04:15:09] <dibblego> just use tagsoup
[04:15:13] <segfaultfizzbuzz> i actually began this um, project under the apparently flawed assumption that laziness would be useful for working with streaming
[04:15:23] *** Quits: mon_aaraj (~MonAaraj@149.255.212.24) (Ping timeout: 250 seconds)
[04:15:32] <segfaultfizzbuzz> dibblego: yeah i'm trying that at the moment
[04:15:42] <dibblego> ok cool
[04:15:44] <awpr> (+1 to tagsoup if it does support a streaming API after all)
[04:16:06] <EvanR> this is my dude, haskell for haskell's sake
[04:16:30] <EvanR> pass the koolaid
[04:16:45] <awpr> but yeah, unfortunately laziness is kind of just a tempting distraction to effectful streaming.  good for pure streaming, though
[04:17:20] <geekosaur> since tagsoup explicitly doesn't care about structure I'd think it ideal for streaming, tbh
[04:17:22] <segfaultfizzbuzz> pure streaming would mean like that i am generating the data myself?
[04:17:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:17:57] <segfaultfizzbuzz> so in the example here i'm working with the "With a List" section https://www.schoolofhaskell.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/tagsoup
[04:18:12] <EvanR> when the effect involves IO at some level, you have to reconsider your laziness
[04:18:17] <awpr> yeah, that's what I meant by "pure streaming" -- streaming in the sense of describing (purely) a huge data structure, and consuming it incrementally without materializing the whole thing
[04:18:44] <segfaultfizzbuzz> but the data structure is only "huge" because a computer is generating it synthetically
[04:18:58] <segfaultfizzbuzz> rather than because it comes from io
[04:19:04] *** Joins: merijn (~merijn@c-001-002-002.client.esciencecenter.eduvpn.nl)
[04:19:14] <EvanR> the huge data structure was already there, the computer only chiseled away with enclosing marble
[04:19:58] <EvanR> what does algorithmic vs I/O based have to do with size
[04:20:07] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[04:20:48] <segfaultfizzbuzz> uh well part of the purpose of this experiment was to try to understand where laziness is beneficial in programming, and i had thought that streaming was such a situation, but now i am being told that isn't the case unless the stream is "pure"
[04:21:12] <dolio> You might have to ignore anti-laziness FUD that gets spread even here.
[04:21:24] <dolio> If you want to actually determine the answer to your satisfaction.
[04:21:30] <EvanR> laziness can also benefit during an I/O stream, you could be consuming incrementally some generated data structure, generated from a bit of input at a time
[04:21:46] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::80f1)
[04:22:00] <segfaultfizzbuzz> i'm uh, neither pro nor anti-lazy, just trying to understand haskell and programming better.
[04:22:20] <awpr> "huge data" is the motivation to want streaming; if that huge data is the result of a pure computation, laziness might give the streaming you want, but if it's the result of many IO actions, then it's very tempting to express it with laziness, which is where you get stuff like `readFile` and other "lazy IO", but that has its drawbacks
[04:22:31] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:22:51] *** Joins: alx741 (~alx741@157.100.197.240)
[04:23:01] <awpr> explicit streaming libraries attempt to address those drawbacks without going back to materializing huge data in memory
[04:23:13] <segfaultfizzbuzz> i think you mean tempting to express it without laziness for the second part there right?
[04:23:25] <EvanR> no, with
[04:23:45] <awpr> no, they don't try to eliminate laziness entirely, they just don't rely _solely_ on laziness
[04:24:01] <EvanR> readFile does a hack to express your incremental reading as something purely lazy
[04:24:06] <awpr> the laziness of `readFile` is a lie, and streaming libraries try to eliminate that lie
[04:24:09] <awpr> ahh, too slow
[04:24:17] <dibblego> segfaultfizzbuzz: laziness is widely understood even here, and especially not here.
[04:24:21] <dibblego> *misunderstood
[04:24:30] <dolio> See, this is the kind of stuff you have to ignore and just try yourself.
[04:24:39] *** Joins: finley (~finley@2600-6c67-8b00-1fea-5c3a-1e8d-cb0f-2e95.res6.spectrum.com)
[04:27:38] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:28:22] <segfaultfizzbuzz> lol haskell.com directs to some industrial company which does wastewater treatment plants among other things
[04:29:21] <monochrom> I spread anti-silver-bullet FUDs.
[04:29:24] <EvanR> obviously haskell is the shit
[04:30:05] <monochrom> Laziness causes some problems and eagerness causes the opposite problems.
[04:30:13] <monochrom> Every silver lining has tarnish.
[04:30:16] <segfaultfizzbuzz> anyway, the With a List section of the documentation is returning nothing, i'm not sure yet whether this is because all of the websites i am trying this on are forcing me to use https or something
[04:30:41] <DigitalKiwi> my boss says i'm lazy i just say i'm solving different problems :(
[04:30:51] <monochrom> :)
[04:31:12] <monochrom> I'm lazy too, and it turns out I do solve different problems. :)
[04:31:50] <monochrom> I'm too lazy to evaluate the integrals that engineering students have to evaluate.
[04:31:53] <segfaultfizzbuzz> does simpleHttp load https?
[04:32:01] <monochrom> But proving that the integrals exist? YES!
[04:32:39] *** Quits: finley (~finley@2600-6c67-8b00-1fea-5c3a-1e8d-cb0f-2e95.res6.spectrum.com) (Quit: Client closed)
[04:33:26] <segfaultfizzbuzz> geekosaur: any thoughts on loading https in the link you sent? i think that might be an issue here
[04:34:45] <geekosaur> still checking but I just noticed that simpleHttp loads the whole document into memory which is what you *don't* want
[04:34:57] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::ae8)
[04:35:09] <geekosaur> "Note: Even though this function returns a lazy bytestring, it does not utilize lazy I/O, and therefore the entire response body will live in memory. If you want constant memory usage, you'll need to use the conduit package and http directly."
[04:35:20] <awpr> that tutorial appears to use libraries that materialize the whole document, and doesn't seem to use tagsoup at all as far as I can tell
[04:35:38] <monochrom> Yeah that's very strange.
[04:36:07] <awpr> the comments section does not seem to be very favorable towards it :)
[04:36:31] <geekosaur> but I do see you can specify `secure` if you use the `http` combinator that it recommends instead
[04:36:55] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[04:37:07] <monochrom> strange on the order of https://www.amazon.ca/Haskell-From-First-Principle/dp/0764541668/
[04:37:21] <segfaultfizzbuzz> ok so, ... tagsoup is dead in the water then
[04:37:38] <awpr> I'm confused.  that tutorial has nothing to do with tagsoup
[04:37:47] <awpr> except the title (???)
[04:37:54] <awpr> looking at the actual tagsoup library, it looks very similar to the event stream representation of xml-types
[04:38:01] <monochrom> Hence the funny URL I made :)
[04:38:24] <wavemode> I guess learning and growing to hate PHP is the first principle of choosing haskell
[04:38:50] <EvanR> PHP was "my language" right before haskell
[04:38:56] <EvanR> stark contrast
[04:39:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:41:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:41:58] <EvanR> segfaultfizzbuzz, why not forget the tutorials and mess around with tagsoup by itself to get a feel for it
[04:42:14] <EvanR> or simpleHttp by itself, or whatever
[04:42:41] <EvanR> combining 9 thinks and a random tutorial might work but maybe you could come at it piece by piece
[04:43:30] <segfaultfizzbuzz> so it's back to conduit then if i want to do a streaming xml computation, correct?
[04:43:47] *** Joins: alx741 (~alx741@157.100.197.240)
[04:43:52] <EvanR> conduit is for streaming, yes
[04:43:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:43:57] <EvanR> xml or whatever else
[04:45:12] <Axman6> EvanR: Did you migrate to PHP, Purescript, Haskell, Postgres?
[04:45:23] <segfaultfizzbuzz> i'm finding this type tetris stuff to be excrutiating unfortunately
[04:45:58] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7cff:235a:6ff3:c21a) (Quit: Textual IRC Client: www.textualapp.com)
[04:46:06] <Axman6> is there a reason you're using simpleHttp? Surely you want to use `http` which gives you a conduit to stream the data from the request?
[04:46:17] <geekosaur> the tutorial told them to use it
[04:46:22] <Axman6> D:
[04:46:33] <geekosaur> all hail the tutorial people have been telling them to forget about
[04:47:02] <monochrom> Type tetris is everywhere in nature.
[04:47:22] <monochrom> It is not like PHP actually lets you multiply a string by a boolean function.
[04:47:23] <segfaultfizzbuzz> Axman6: i barely understand haskell, much less am capable of comparing haskell libraries
[04:47:26] <geekosaur> and I pointed out earlier that if they wanted to use https and not have the whole document in RAM they needed to use http instead of simpleHttp, that also got ignored
[04:47:37] <Axman6> segfaultfizzbuzz: these are functions in the same library
[04:47:38] <monochrom> The only difference is how late you receive error messages.
[04:47:59] <Axman6> https://hackage.haskell.org/package/http-conduit-2.3.8/docs/Network-HTTP-Conduit.html#v:simpleHttp see `http` below this
[04:48:00] <segfaultfizzbuzz> Axman6: my goal in this project is to stream a gzipped xml document over http (actually probably https to be precise) and then grab some parts of it and do some simple calculations on those parts
[04:48:01] <EvanR> segfaultfizzbuzz, self-imposed trial by fire then, props
[04:48:37] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:49:27] <EvanR> I think the first thing I did in haskell was also HTML filtering and statistics, but offline, not web
[04:50:16] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[04:51:42] <segfaultfizzbuzz> Axman6: i think i have a conduit already. if you see awpr's comments above describing an await and soforth, it looks like streaming computations on trees aren't a foremost consideration and so you need to do some gymnastics to make them work
[04:52:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:52:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:52:17] *** Joins: wroathe (~wroathe@user/wroathe)
[04:52:23] <awpr> (it's not that they're not a consideration, it's that a linearized form of a tree is a weird thing to work with, independently of whether you're streaming it or not)
[04:53:21] *** Quits: merijn (~merijn@c-001-002-002.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[04:54:17] <geekosaur> which is why I was going for tagsoup, it ignores the tree structure and just looks for tags
[04:54:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:54:41] <Axman6> segfaultfizzbuzz: do you have some code? I haven't been folllowing along, but I'm reading the Text.XML.Stream.Parse docs now
[04:55:34] <awpr> hm?  the tagsoup library I'm looking at is working with the same kind of linearized tree as xml-types' Event
[04:56:47] <geekosaur> https://hackage.haskell.org/package/tagstream-conduit looks interesting
[04:57:03] <geekosaur> awpr, nothing in it cares about "tree"
[04:57:12] <awpr> these three are all the same idea
[04:57:14] <geekosaur> the elements are linearized but not structured
[04:57:33] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:57:36] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Client Quit)
[04:57:53] <awpr> there's still an implied tree based on the TagOpen and TagCloses, that's exactly what I mean by "linearized tree"
[04:57:58] <geekosaur> that's the whole point of tag *soup*, it assumes lack of meaningful structure and just emits the content
[04:58:18] <geekosaur> awpr, the reason tagsoup was written was <p><a></p></a>
[04:58:18] <awpr> right, I think we're on the same page
[04:58:33] <geekosaur> tags *do not nest* in the tagsoup model
[04:58:48] <Axman6> gross D:
[04:58:54] <awpr> they're still supposed to, it's just meant to tolerate the real-world cases when they don't
[04:58:57] <monochrom> If you stick to "parseTags :: StringLike str => str -> [Tag str]" you have no tree, and in fact no check of open-close consistencies.
[04:59:49] <monochrom> The stuff in Text.HTML.TagSoup.Tree is optional. And to be disregarded when inputting untrusted inputs.
[05:01:00] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:01:41] <segfaultfizzbuzz> Axman6: here is my most recent: https://paste.rs/oBr.hs
[05:04:28] <Axman6> isNamed feels like the wrong thing to be using here...
[05:04:43] *** Joins: alx741 (~alx741@157.100.197.240)
[05:05:24] <awpr> try replacing the concatMap step with `Data.Conduit.List.mapMaybe (\case EventBeginElement "img" attrs -> Just attrs; _ -> Nothing)`
[05:05:36] *** Joins: toshiblue (~toshiblue@c-73-111-20-145.hsd1.il.comcast.net)
[05:05:46] <Axman6> yeah that looks like a better start
[05:06:10] <awpr> that may not be the final robust solution, but it should do something and get you started with the "not-parsed-into-a-tree" representation
[05:06:31] <Axman6> that should give you a ConduitT Event [(Name, [Content])] m ()
[05:07:41] <segfaultfizzbuzz> ... XLambdaCase...?
[05:08:19] <awpr> yes, enable that, or you can write the function out as a separate binding or however you prefer
[05:08:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:08:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:09:19] *** Quits: alp (~alp@2a01:e0a:58b:4920:d89a:b09d:1a2b:26ba) (Ping timeout: 250 seconds)
[05:09:27] <monochrom> Or good old "\x -> case x of EventBeginElement "img" attrs -> Just attrs; _ -> Nothing"
[05:10:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:11:29] *** Quits: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[05:12:02] <segfaultfizzbuzz> Axman6: hmmm, well at least zombo.com seems to fail to parse now: mystream: ParseError {errorContexts = ["open tag","'>'"], errorMessage = "Failed reading: satisfy", errorPosition = 51:8 (1070)}
[05:13:27] <EvanR> zombo.com is still a thing
[05:13:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[05:14:32] <Axman6> @gogle Bool -> [a] -> [a]
[05:14:33] <lambdabot> No Result Found.
[05:14:58] <Axman6> @botsnack thanks for reading my mind lambdabot
[05:14:58] <lambdabot> :)
[05:15:08] <monochrom> ZomboCom was my favourite example of camel case. :)
[05:15:27] <awpr> it may not be valid XML; the parser might have choked on the embedded JS
[05:15:46] <jackdk> I see stack still stubbornly refuses to ship a GHC 8.10.7 snapshot with recent hashable.
[05:16:14] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::ae8) (Remote host closed the connection)
[05:16:42] *** Joins: off^ (~off@128-092-174-141.biz.spectrum.com)
[05:16:55] <awpr> actually, it looks like the parse error position points to an attribute name with no value.  sounds like this page is just not sufficiently-valid XML for the parser
[05:16:56] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[05:17:08] <EvanR> oof... 
[05:17:15] <EvanR> XML in name only
[05:17:34] <monochrom> Is there any reason to use an XML library on HTML inputs?
[05:17:35] <awpr> (that might not be a real problem since the intended real input is said to be XML.  just means this isn't a good test case)
[05:17:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:17:53] <EvanR> oh nvm
[05:18:27] <EvanR> HTML blob in an XML hole
[05:19:00] *** Quits: off^ (~off@128-092-174-141.biz.spectrum.com) (Remote host closed the connection)
[05:19:02] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[05:19:45] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:20:35] <segfaultfizzbuzz> lol
[05:24:37] *** Quits: vglfr (~vglfr@88.155.15.0) (Ping timeout: 240 seconds)
[05:24:58] *** Joins: alx741 (~alx741@157.100.197.240)
[05:26:43] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:29:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:32:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:36:05] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:b9e2:b772:90e7:5a2b)
[05:36:34] *** Joins: vglfr (~vglfr@88.155.15.0)
[05:39:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:6013:7539:4fef:cd22) (Ping timeout: 250 seconds)
[05:42:57] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::80f1) (Ping timeout: 240 seconds)
[05:46:08] *** Joins: alx741 (~alx741@157.100.197.240)
[05:46:12] *** Joins: vysn (~vysn@user/vysn)
[05:50:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:51:14] *** Joins: califax- (~califax@user/califx)
[05:51:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:53:51] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:53:51] *** califax- is now known as califax
[05:57:51] *** Quits: xff0x (~xff0x@2001:1a81:53ac:4a00:25b:5701:e54d:ee3e) (Ping timeout: 245 seconds)
[05:58:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:58:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:58:35] *** Joins: wroathe (~wroathe@user/wroathe)
[05:59:44] *** Joins: xff0x (~xff0x@2001:1a81:53e8:2500:a319:1c51:2e8e:9977)
[06:03:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:04:11] *** Joins: ethanN (~ethanN@d198-53-4-47.abhsia.telus.net)
[06:09:48] *** Joins: alx741 (~alx741@157.100.197.240)
[06:12:54] *** Quits: ethanN (~ethanN@d198-53-4-47.abhsia.telus.net) (Quit: Leaving)
[06:18:20] *** Quits: wombat871 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[06:18:50] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:19:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:31:46] *** Quits: absentia (~evocatus@24-212-138-156.cable.teksavvy.com) (Changing host)
[06:31:46] *** Joins: absentia (~evocatus@user/absentia)
[06:32:27] *** Quits: absentia (~evocatus@user/absentia) (Quit: WeeChat 3.4)
[06:32:39] *** Joins: evocatus (~absentia@24-212-138-156.cable.teksavvy.com)
[06:32:51] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[06:32:54] *** Quits: evocatus (~absentia@24-212-138-156.cable.teksavvy.com) (Client Quit)
[06:33:06] *** Joins: absentia (~absentia@24-212-138-156.cable.teksavvy.com)
[06:33:51] *** Quits: absentia (~absentia@24-212-138-156.cable.teksavvy.com) (Changing host)
[06:33:51] *** Joins: absentia (~absentia@user/absentia)
[06:33:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[06:36:53] *** Joins: alx741 (~alx741@157.100.197.240)
[06:37:20] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:38:43] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:38:43] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:38:43] *** finn_elija is now known as FinnElija
[06:41:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:80b2:e90a:7da7:7a8d)
[06:41:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:42:09] *** Quits: vglfr (~vglfr@88.155.15.0) (Ping timeout: 256 seconds)
[06:43:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[06:43:54] *** Joins: mbuf (~Shakthi@122.162.66.95)
[06:44:31] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[06:44:37] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:b9e2:b772:90e7:5a2b) (Ping timeout: 240 seconds)
[06:45:24] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:47:00] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:48:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:50:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:54:35] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:55:20] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[06:55:44] *** Joins: dawdler (~dawdler@user/dawdler)
[06:56:15] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Remote host closed the connection)
[06:56:31] *** Quits: dawdler (~dawdler@user/dawdler) (Client Quit)
[06:57:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:59:25] *** Joins: alx741 (~alx741@157.100.197.240)
[07:01:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:03:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:09:28] *** Joins: dawdler (035b60b5aa@user/dawdler)
[07:12:08] *** Quits: Topsi (~Tobias@dyndsl-095-033-017-221.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[07:13:32] *** Quits: td_ (~td@muedsl-82-207-238-174.citykom.de) (Ping timeout: 256 seconds)
[07:13:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:14:27] *** Joins: td_ (~td@94.134.91.183)
[07:16:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:16:57] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[07:18:35] *** Joins: alx741 (~alx741@157.100.197.240)
[07:18:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:18:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:18:55] *** Joins: wroathe (~wroathe@user/wroathe)
[07:21:17] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:23:31] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:23:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:26:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[07:26:50] *** Joins: burnsidesLlama (~burnsides@client-8-65.eduroam.oxuni.org.uk)
[07:30:57] *** Quits: burnsidesLlama (~burnsides@client-8-65.eduroam.oxuni.org.uk) (Ping timeout: 240 seconds)
[07:30:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:40:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:40:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:40:23] *** Joins: wroathe (~wroathe@user/wroathe)
[07:41:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:42:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:45:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[07:45:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:47:39] *** Joins: alx741 (~alx741@157.100.197.240)
[07:48:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:49:26] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:50:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:52:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:55:53] <Axman6> segfaultfizzbuzz: did you get anywhere with awpr's suggestion of using mapMaybe above?
[08:00:26] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:00:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:06:19] *** Quits: dawdler (035b60b5aa@user/dawdler) (Remote host closed the connection)
[08:07:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:09:17] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:cc4:c954:b25:db0a) (Ping timeout: 240 seconds)
[08:09:58] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[08:13:07] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[08:13:57] *** Quits: toshiblue (~toshiblue@c-73-111-20-145.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[08:15:39] *** Joins: dawdler (035b60b5aa@user/dawdler)
[08:15:59] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[08:17:15] *** Joins: raym (~raym@user/raym)
[08:18:09] *** Joins: alx741 (~alx741@157.100.197.240)
[08:23:20] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[08:23:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:33:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:34:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[08:35:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:41:49] *** Joins: alx741 (~alx741@157.100.197.240)
[08:43:05] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[08:50:09] *** Joins: yauhsien (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[08:52:18] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[08:54:10] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[08:54:31] *** Quits: yauhsien (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[08:55:51] *** Joins: zaquest (~notzaques@5.130.79.72)
[08:55:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:56:25] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:04:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:04:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:04:38] *** Joins: wroathe (~wroathe@user/wroathe)
[09:06:10] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[09:08:23] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:08:35] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[09:09:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:12:59] *** Joins: alx741 (~alx741@157.100.197.240)
[09:17:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[09:18:15] *** Quits: emf (~emf@2620:10d:c090:400::5:b0fe) (Read error: Connection reset by peer)
[09:20:29] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 256 seconds)
[09:20:41] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[09:23:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:25:11] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:35:01] *** Joins: notzmv (~zmv@user/notzmv)
[09:35:56] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[09:39:50] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[09:40:17] *** Joins: alx741 (~alx741@157.100.197.240)
[09:43:44] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:47:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:49:26] *** Joins: gentauro (~gentauro@user/gentauro)
[09:52:43] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[09:53:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:54:15] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[10:02:41] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:06:13] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:10:20] *** Joins: alx741 (~alx741@157.100.197.240)
[10:11:03] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:14:53] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[10:16:12] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[10:16:46] *** Joins: vysn (~vysn@user/vysn)
[10:20:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:21:47] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[10:23:19] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[10:26:55] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Client Quit)
[10:28:33] *** Joins: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[10:28:34] *** Joins: cynomys (~cynomys@user/cynomys)
[10:28:53] *** Quits: sayola (~vekto@dslb-002-201-085-116.002.201.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[10:31:19] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181)
[10:31:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:35:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[10:36:16] *** Joins: alx741 (~alx741@157.100.197.240)
[10:40:27] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:41:06] *** Joins: alp (~alp@user/alp)
[10:48:39] *** Joins: Alex_test_ (~al_test@178.34.151.37)
[10:50:21] *** Quits: Alex_test (~al_test@178.34.151.37) (Ping timeout: 256 seconds)
[10:55:23] *** Joins: michalz (~michalz@185.246.204.87)
[10:55:52] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: enemeth79 (sid309041@id-309041.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[10:55:52] *** Quits: sclv (sid39734@haskell/developer/sclv) (*.net *.split)
[10:55:52] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: dmj` (sid72307@id-72307.hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: gaze___ (sid387101@id-387101.helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: asivitz (uid178348@tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[10:55:52] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (*.net *.split)
[10:55:52] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[10:55:52] *** Quits: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (*.net *.split)
[10:55:52] *** Quits: Sgeo (~Sgeo@user/sgeo) (*.net *.split)
[10:55:52] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (*.net *.split)
[10:55:52] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (*.net *.split)
[10:55:52] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (*.net *.split)
[10:55:52] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[10:55:52] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[10:55:52] *** Quits: cigsender (~cigsender@74.124.58.162) (*.net *.split)
[10:55:52] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[10:55:52] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[10:55:52] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[10:55:52] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (*.net *.split)
[10:55:52] *** Quits: lep (~lep@94.31.89.203) (*.net *.split)
[10:55:52] *** Quits: AlexZenon (~alzenon@178.34.151.37) (*.net *.split)
[10:55:52] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[10:55:52] *** Quits: russruss (~russruss@my.russellmcc.com) (*.net *.split)
[10:55:52] *** Quits: tv (~tv@user/tv) (*.net *.split)
[10:55:52] *** Quits: gawen_ (~gawen@user/gawen) (*.net *.split)
[10:55:52] *** Quits: robertm (~robertm@lattice.rojoma.com) (*.net *.split)
[10:55:52] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (*.net *.split)
[10:55:52] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[10:55:52] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[10:55:52] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[10:55:52] *** Quits: marquis_andras (~marquis_a@124.170.163.166) (*.net *.split)
[10:55:52] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[10:55:52] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[10:55:52] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[10:55:52] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[10:55:52] *** Quits: stvc (~stvc@192.241.166.39) (*.net *.split)
[10:55:52] *** Quits: cls (~cls@chalk.lubutu.com) (*.net *.split)
[10:55:52] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[10:55:52] *** Quits: skewerr (spoonm@inaba.spoonm.org) (*.net *.split)
[10:55:52] *** Quits: drewr (~drew@user/drewr) (*.net *.split)
[10:55:52] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[10:55:52] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[10:55:52] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[10:55:52] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[10:55:52] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[10:55:52] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[10:55:52] *** Quits: kojo5551 (~kojo5551@fep.grid.pub.ro) (*.net *.split)
[10:55:52] *** Quits: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[10:55:52] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[10:55:52] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[10:55:52] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[10:55:52] *** Quits: canta (~canta@user/canta) (*.net *.split)
[10:55:52] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[10:55:52] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[10:55:52] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[10:55:52] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[10:55:52] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[10:55:52] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[10:55:52] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[10:55:52] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[10:55:52] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[10:55:52] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[10:55:52] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[10:55:52] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[10:55:52] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: jtmar (~james@jtmar.me) (*.net *.split)
[10:55:52] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[10:56:09] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[10:57:26] *** Joins: alx741 (~alx741@157.100.197.240)
[10:58:04] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[10:58:04] *** Joins: asivitz (uid178348@tinside.irccloud.com)
[10:58:04] *** Joins: econo (uid147250@user/econo)
[10:58:04] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:58:04] *** Joins: cheater (~Username@user/cheater)
[10:58:04] *** Joins: Guest6340 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[10:58:04] *** Joins: Sgeo (~Sgeo@user/sgeo)
[10:58:04] *** Joins: deadmarshal (~deadmarsh@95.38.114.110)
[10:58:04] *** Joins: xdej (~xdej@quatramaran.salle-s.org)
[10:58:04] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[10:58:04] *** Joins: hyiltiz (~quassel@31.220.5.250)
[10:58:04] *** Joins: quintasan (~quassel@quintasan.pl)
[10:58:04] *** Joins: cigsender (~cigsender@74.124.58.162)
[10:58:04] *** Joins: Hafydd (~Hafydd@user/hafydd)
[10:58:04] *** Joins: aria (sid380617@lymington.irccloud.com)
[10:58:04] *** Joins: oats (~thomas@user/oats)
[10:58:04] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[10:58:04] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[10:58:04] *** Joins: lep (~lep@94.31.89.203)
[10:58:04] *** Joins: AlexZenon (~alzenon@178.34.151.37)
[10:58:04] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[10:58:04] *** Joins: russruss (~russruss@my.russellmcc.com)
[10:58:04] *** Joins: tv (~tv@user/tv)
[10:58:04] *** Joins: gawen_ (~gawen@user/gawen)
[10:58:04] *** Joins: robertm (~robertm@lattice.rojoma.com)
[10:58:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:58:04] *** Joins: swistak (~swistak@185.21.216.141)
[10:58:04] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[10:58:04] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[10:58:04] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[10:58:04] *** Joins: justGhost (~justache@user/justache)
[10:58:04] *** Joins: mmalter (~mmalter@88.126.10.237)
[10:58:04] *** Joins: mcglk (~mcglk@131.191.49.120)
[10:58:04] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[10:58:04] *** Joins: stvc (~stvc@192.241.166.39)
[10:58:04] *** Joins: cls (~cls@chalk.lubutu.com)
[10:58:04] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[10:58:04] *** Joins: skewerr (spoonm@inaba.spoonm.org)
[10:58:04] *** Joins: drewr (~drew@user/drewr)
[10:58:04] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[10:58:04] *** Joins: haskl (~haskl@user/haskl)
[10:58:04] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[10:58:04] *** Joins: xstill- (xstill@fimu/xstill)
[10:58:04] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[10:58:04] *** Joins: amk (~amk@109.255.169.126)
[10:58:04] *** Joins: kojo5551 (~kojo5551@fep.grid.pub.ro)
[10:58:04] *** Joins: abrar (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[10:58:04] *** Joins: kmein (~weechat@user/kmein)
[10:58:04] *** Joins: c_wraith (~c_wraith@adjoint.us)
[10:58:04] *** Joins: statusfailed (~statusfai@statusfailed.com)
[10:58:04] *** Joins: canta (~canta@user/canta)
[10:58:04] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[10:58:04] *** Joins: juri_ (~juri@178.63.35.222)
[10:58:04] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[10:58:04] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[10:58:04] *** Joins: meejah (~meejah@rutas.meejah.ca)
[10:58:04] *** Joins: andjjj23_ (~irc@107.170.228.47)
[10:58:04] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[10:58:04] *** Joins: n3t (n3t@user/n3t)
[10:58:04] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[10:58:04] *** Joins: drdo (~drdo@roach0.drdo.eu)
[10:58:04] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[10:58:04] *** Joins: carter (sid14827@helmsley.irccloud.com)
[10:58:04] *** Joins: TMA (~tma@twin.jikos.cz)
[10:58:04] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[10:58:04] *** Joins: jtmar (~james@jtmar.me)
[10:58:04] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[10:58:04] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[10:58:04] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[10:58:04] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[10:58:04] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[10:58:04] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[10:58:04] *** Joins: enemeth79 (sid309041@id-309041.lymington.irccloud.com)
[10:58:04] *** Joins: bjs (sid190364@user/bjs)
[10:58:04] *** Joins: sclv (sid39734@haskell/developer/sclv)
[10:58:04] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[10:58:04] *** Joins: dmj` (sid72307@id-72307.hampstead.irccloud.com)
[10:58:04] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[10:58:04] *** Joins: gaze___ (sid387101@id-387101.helmsley.irccloud.com)
[10:58:04] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[11:01:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:01:13] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:04:32] *** Quits: Andrew (andrew@andrewyu.org) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[11:04:45] *** Joins: Andrew_ (andrew@andrewyu.org)
[11:05:28] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:06:44] *** Joins: emf (~emf@2620:10d:c090:400::5:d558)
[11:09:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[11:11:21] *** Joins: michalz2 (~michalz2@185.246.204.87)
[11:13:41] *** Joins: fef (~thedawn@user/thedawn)
[11:14:47] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[11:16:12] *** Joins: adnaahm (~adnaahm@host-97-net-64-160-119.mobilinkinfinity.net.pk)
[11:16:29] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:17:27] *** Joins: alx741 (~alx741@157.100.197.240)
[11:21:57] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Ping timeout: 240 seconds)
[11:22:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:22:35] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[11:22:46] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:22:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:22:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:24:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:24:51] *** Joins: coot (~coot@213.134.190.95)
[11:26:37] *** Quits: foul_owl (~kerry@94.140.8.105) (Ping timeout: 256 seconds)
[11:27:19] *** Joins: xkuru (~xkuru@user/xkuru)
[11:27:45] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:29:10] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl)
[11:31:26] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[11:31:26] *** Quits: meltedbrain_y2k (~tekserf@47.61.115.91) (Read error: Connection reset by peer)
[11:36:33] <dminuoso> monochrom: I can see a few somewhat valid ones.
[11:37:08] <dminuoso> When the HTML input is somewhat static/controllable and known to be parseable by your XML library, then that could be a good reason
[11:37:28] <dminuoso> Heck, I've done regexp matching on XML before for the same reason
[11:37:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:38:28] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:2dea:f16f:b001:1064)
[11:38:37] *** Joins: alx741 (~alx741@157.100.197.240)
[11:39:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:41:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:80b2:e90a:7da7:7a8d) (Ping timeout: 240 seconds)
[11:42:20] *** Joins: foul_owl (~kerry@94.140.8.107)
[11:42:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[11:43:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:43:36] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:44:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:51ac:e09e:aad0:faee)
[11:47:17] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:2dea:f16f:b001:1064) (Ping timeout: 240 seconds)
[11:48:06] *** Quits: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[11:48:45] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.na.cust.bahnhof.se)
[11:50:37] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[11:50:44] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:55:07] *** Joins: alp (~alp@user/alp)
[11:55:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:57:05] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[11:57:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:58:17] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:59:09] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[11:59:47] *** Joins: alx741 (~alx741@157.100.197.240)
[11:59:53] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:03:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:04:16] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:286e:ce4:a8f3:ca6f)
[12:04:51] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[12:06:01] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:06:43] *** Quits: glguy (x@libera/staff/glguy) (Read error: Connection reset by peer)
[12:07:13] *** Joins: glguy (x@libera/staff/glguy)
[12:07:17] *** Quits: emf (~emf@2620:10d:c090:400::5:d558) (Ping timeout: 240 seconds)
[12:08:50] *** Joins: ardell (~ardell@user/ardell)
[12:09:37] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[12:13:09] *** Joins: cyphase (~cyphase@user/cyphase)
[12:17:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:19:34] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[12:19:48] *** Joins: alx741 (~alx741@157.100.197.240)
[12:19:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[12:19:59] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:58] *** Joins: nschoe (~quassel@178.251.84.79)
[12:21:31] *** Joins: gargawel (~kvirc@82-65-144-99.subs.proxad.net)
[12:21:53] *** Joins: max22- (~maxime@2a01cb088335980058f4ffda4eee6f66.ipv6.abo.wanadoo.fr)
[12:23:03] *** Quits: xff0x (~xff0x@2001:1a81:53e8:2500:a319:1c51:2e8e:9977) (Ping timeout: 256 seconds)
[12:23:56] *** Joins: xff0x (~xff0x@2001:1a81:53e8:2500:31e6:f5f6:6492:6bc2)
[12:24:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[12:24:25] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:24:35] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[12:26:55] *** Joins: cfricke (~cfricke@user/cfricke)
[12:27:56] *** Joins: fendor (~fendor@178.165.184.56.wireless.dyn.drei.com)
[12:32:07] *** Joins: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl)
[12:34:27] *** Joins: x_kuru (~xkuru@user/xkuru)
[12:36:37] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[12:39:37] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[12:40:58] *** Joins: alx741 (~alx741@157.100.197.240)
[12:41:05] *** Quits: lewisje (~lewisje@72.49.207.113) (Quit: Leaving)
[12:41:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:42:40] *** Quits: jstolarek (~jstolarek@staticline-31-183-164-222.toya.net.pl) (Quit: leaving)
[12:47:41] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:41] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:44] *** allbery_b is now known as geekosaur
[12:47:54] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:49:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[12:50:25] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:52:22] *** Andrew_ is now known as Andrew
[12:52:27] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:55:27] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[13:00:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[13:01:03] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[13:01:47] *** Quits: gargawel (~kvirc@82-65-144-99.subs.proxad.net) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[13:01:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[13:03:40] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994a1946b5f66cf92c0df.dip0.t-ipconnect.de)
[13:05:55] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[13:08:37] *** Joins: alx741 (~alx741@157.100.197.240)
[13:09:00] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:f460:9388:75e8:8181) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:09:31] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:11:45] *** Joins: cfricke (~cfricke@user/cfricke)
[13:14:03] *** Quits: adnaahm (~adnaahm@host-97-net-64-160-119.mobilinkinfinity.net.pk) (Ping timeout: 256 seconds)
[13:14:51] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[13:15:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:a148:40f0:8827:c6ab) (Remote host closed the connection)
[13:16:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:17:04] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[13:18:05] *** Quits: tinwood (~tinwood@canonical/tinwood) (Remote host closed the connection)
[13:19:10] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:20:23] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[13:21:06] *** Joins: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io)
[13:21:06] *** Quits: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io) (Changing host)
[13:21:06] *** Joins: tinwood (~tinwood@canonical/tinwood)
[13:21:13] *** Joins: adnaahm (~adnaahm@host-83-net-67-160-119.mobilinkinfinity.net.pk)
[13:22:16] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[13:28:09] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:28:13] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:29:50] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[13:30:55] *** Joins: __monty__ (~toonn@user/toonn)
[13:31:02] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[13:32:03] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:35:32] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5)
[13:35:49] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[13:35:49] *** Joins: alx741 (~alx741@157.100.197.240)
[13:38:21] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:a85e:5217:60c2:bcc7)
[13:40:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:41:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:51ac:e09e:aad0:faee) (Ping timeout: 240 seconds)
[13:41:20] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[13:41:53] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:42:53] *** Joins: Techcable (~Techcable@168.235.93.147)
[13:43:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:46:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[13:49:15] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:49:18] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[13:49:47] *** Joins: coot (~coot@213.134.190.95)
[13:50:37] *** Joins: Guest87 (~Guest87@4.53.152.194.mga.com.pl)
[13:55:09] *** Quits: Guest87 (~Guest87@4.53.152.194.mga.com.pl) (Client Quit)
[13:56:29] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 250 seconds)
[13:56:46] *** Joins: alx741 (~alx741@157.100.197.240)
[13:58:01] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[14:01:21] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[14:03:04] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:03:09] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:03:39] *** Joins: mmhat (~mmh@55d48978.access.ecotel.net)
[14:05:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:08:17] *** Joins: zaquest (~notzaques@5.130.79.72)
[14:09:14] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:09:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[14:10:18] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is)
[14:14:21] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[14:16:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4821:3bd5:6699:99c5)
[14:18:39] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:19:14] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a4a2:67d7:acda:e455)
[14:20:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4821:3bd5:6699:99c5) (Ping timeout: 240 seconds)
[14:24:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:25:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:25:30] *** Lord_of_Life_ is now known as Lord_of_Life
[14:27:15] *** Joins: alx741 (~alx741@157.100.197.240)
[14:31:55] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:40:55] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:46:16] *** Joins: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com)
[14:48:01] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[14:49:07] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[14:55:29] *** Quits: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[14:58:52] *** Joins: alx741 (~alx741@157.100.197.240)
[14:59:27] *** Joins: Axma76527 (~Axman6@user/axman6)
[15:01:20] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[15:01:34] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:06:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:08:30] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:13:52] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[15:17:06] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[15:17:59] *** Joins: alx741 (~alx741@157.100.197.240)
[15:22:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:23:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[15:36:34] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[15:39:54] *** Joins: alp (~alp@user/alp)
[15:40:30] *** Joins: alx741 (~alx741@157.100.197.240)
[15:41:53] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[15:41:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[15:44:15] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[15:46:43] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:47:47] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:48:25] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[15:49:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[15:49:31] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11)
[15:51:35] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[15:52:23] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:53:06] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a4a2:67d7:acda:e455) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:53:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:53:35] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:55:23] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[15:56:18] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:56:24] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a4a2:67d7:acda:e455)
[15:59:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:00:44] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:00:44] *** Quits: meltedbrain_y2k (~tekserf@47.61.115.91) (Read error: Connection reset by peer)
[16:01:02] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:02:01] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:03:14] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 268 seconds)
[16:03:37] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[16:03:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:06:00] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[16:07:00] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Client Quit)
[16:10:03] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[16:10:37] *** Joins: biberu (~biberu@user/biberu)
[16:11:10] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[16:13:07] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:15:38] *** Joins: alx741 (~alx741@157.100.197.240)
[16:18:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7058:4e81:e6e0:f9f)
[16:18:37] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[16:19:06] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:19:15] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:22:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7058:4e81:e6e0:f9f) (Ping timeout: 240 seconds)
[16:22:37] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[16:23:39] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[16:26:34] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[16:28:27] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[16:30:06] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11) (Remote host closed the connection)
[16:35:48] *** Joins: alx741 (~alx741@157.100.197.240)
[16:39:51] *** Quits: max22- (~maxime@2a01cb088335980058f4ffda4eee6f66.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:41:08] *** Joins: fendor_ (~fendor@178.115.38.12.wireless.dyn.drei.com)
[16:43:57] *** Quits: fendor (~fendor@178.165.184.56.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[16:43:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:44:29] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[16:45:59] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[16:46:10] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11)
[16:50:18] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[16:54:54] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[16:55:33] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11) (Remote host closed the connection)
[16:56:12] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[17:02:26] *** Joins: alx741 (~alx741@157.100.197.240)
[17:02:56] *** Joins: califax (~califax@user/califx)
[17:02:57] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[17:05:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:05:51] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:10:40] *** Joins: biberu (~biberu@user/biberu)
[17:11:37] *** Quits: adnaahm (~adnaahm@host-83-net-67-160-119.mobilinkinfinity.net.pk) (Ping timeout: 240 seconds)
[17:12:21] *** Joins: adnaahm (~adnaahm@host-251-net-67-160-119.mobilinkinfinity.net.pk)
[17:15:36] *** Joins: slack1256 (~slack1256@186.11.97.54)
[17:22:42] *** Joins: alx741 (~alx741@157.100.197.240)
[17:26:26] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:27:55] *** Quits: adnaahm (~adnaahm@host-251-net-67-160-119.mobilinkinfinity.net.pk) (Read error: Connection reset by peer)
[17:34:23] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[17:35:21] *** Joins: Pickchea (~private@user/pickchea)
[17:36:21] *** Joins: cfricke (~cfricke@user/cfricke)
[17:36:55] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:38:02] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:38:08] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:42:28] *** Joins: alo (~alo@host-79-36-108-33.retail.telecomitalia.it)
[17:42:48] *** Parts: alo (~alo@host-79-36-108-33.retail.telecomitalia.it) ()
[17:42:59] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[17:42:59] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:43:17] *** Joins: slac85046 (~slack1256@191.126.99.75)
[17:43:27] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[17:44:18] *** Joins: alx741 (~alx741@157.100.197.240)
[17:45:43] *** Quits: slack1256 (~slack1256@186.11.97.54) (Ping timeout: 256 seconds)
[17:45:57] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[17:46:18] *** Joins: jespada (~jespada@87.74.36.188)
[17:49:29] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:cc4:c954:b25:db0a)
[17:50:44] <segfaultfizzbuzz> so if i have: runResourceT . runConduit $ httpSource "https://imgur.com" getResponseBody .| parseBytes def .| ::() .| printC
[17:50:57] <segfaultfizzbuzz> i want ::() to have ghc spit out the expected type there
[17:51:26] <geekosaur> maybe you want _ instead of ::()
[17:52:31] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:52:46] <segfaultfizzbuzz> b0 is an ambiguous type variable...?
[17:52:59] <dminuoso> segfaultfizzbuzz: Can you share the entirety of the output perhaps?
[17:53:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:53:41] <segfaultfizzbuzz> https://paste.rs/YWA.hs
[17:53:58] <segfaultfizzbuzz> basically, i have something which works in that pipeline and i want to break it out into a function
[17:54:19] <segfaultfizzbuzz> but i don't know how to get haskell to tell me the type of a part of the pipeline
[17:54:20] <dminuoso> Yes, this is to be expected.
[17:54:22] <dminuoso> printC is a sink
[17:54:23] *** Joins: max22- (~maxime@2a01cb0883359800569e67c9db5ecf35.ipv6.abo.wanadoo.fr)
[17:54:36] <dminuoso> printC :: (Show a, MonadIO m) => ConduitT a o m ()
[17:55:28] <dminuoso> Consider this:
[17:55:47] <segfaultfizzbuzz> so my function type signature will be   UnknownType -> (a, MonadIO)    ?
[17:56:01] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:56:06] <Clint> no, your function should be a conduit
[17:56:17] <merijn> Clint: That's not a function, though :p
[17:56:33] <dminuoso> segfaultfizzbuzz: It's just that your attempt of using typed holes to gain inference is a bit flawed.
[17:56:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:56:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:56:39] *** Joins: wroathe (~wroathe@user/wroathe)
[17:56:49] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:286e:ce4:a8f3:ca6f) (Ping timeout: 256 seconds)
[17:57:25] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 250 seconds)
[17:57:41] <segfaultfizzbuzz> dminuso: funamentally flawed or just how i am carrying it out?
[17:57:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:58:05] <dminuoso> Fundamentally flawed
[18:00:54] <segfaultfizzbuzz> so then i look at parseBytes and printC to know my function input and output type?
[18:01:05] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[18:01:06] <dminuoso> printC doesnt know its output type
[18:01:17] <segfaultfizzbuzz> printC takes an input type
[18:01:22] <segfaultfizzbuzz> my function's output is printC's input
[18:01:23] <dminuoso> And its ambiguous in its input type too
[18:02:33] <Clint> presumably you know what you want to do with the output of parseBytes before you feed it to printC
[18:04:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:05:05] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5722:cfcd:da3c:1af2)
[18:06:07] <dminuoso> segfaultfizzbuzz: printC learns about its input and output types based on its surroundings.
[18:06:11] <dminuoso> Based on inference.
[18:06:36] <merijn> segfaultfizzbuzz: What GHC expects is a "ConduitT a b m r" where 'a' = whatever comes out of parsebytes and 'b' is something Showable
[18:06:50] <maerwald> still fighting conduit API? :D
[18:06:57] <maerwald> it is indeed unintuitive
[18:10:22] <segfaultfizzbuzz> maerwald: i am just trying to give haskell an honest try, and for something more substantial than a slow recursive implementation of fib
[18:10:46] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:10:56] <maerwald> segfaultfizzbuzz: there are alternative approaches to streaming that are more closely tied to representing actual streams (similar to lists)
[18:10:57] *** Joins: alx741 (~alx741@157.100.197.240)
[18:11:05] <maerwald> conduit doesn't represent streams, but stream processors
[18:12:02] <segfaultfizzbuzz> maerwald: alternatives such as? what is a stream processor vs a stream?
[18:12:19] <segfaultfizzbuzz> stream processor can produce and consume multiple streams?
[18:12:48] <maerwald> lists are already streams, basically
[18:12:54] <geekosaur> segfaultfizzbuzz, you're not misusing conduit. you're expecting ghc to read your mind and figure out which Showable you intend to use
[18:13:17] <maerwald> conduit type is about input and output... a list doesn't have that
[18:13:33] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:15:05] <maerwald> segfaultfizzbuzz: not sure if my blog post helps you, but I do a recap on conduit there https://hasufell.github.io/posts/2021-10-22-conduit-to-streamly.html
[18:17:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:18:02] <segfaultfizzbuzz> so my function of interest is a Transformer
[18:18:42] <maerwald> that would be conduits map
[18:19:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:807e:5d29:47f6:b5b3)
[18:20:21] *** Joins: adnaahm (~adnaahm@host-251-net-64-160-119.mobilinkinfinity.net.pk)
[18:20:24] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:23:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:807e:5d29:47f6:b5b3) (Ping timeout: 240 seconds)
[18:24:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:25:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:28:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:31:24] *** Joins: alx741 (~alx741@157.100.197.240)
[18:32:18] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:34:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:35:13] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[18:37:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:37:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:37:03] *** Joins: wroathe (~wroathe@user/wroathe)
[18:38:15] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:41:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:43:17] *** Quits: max22- (~maxime@2a01cb0883359800569e67c9db5ecf35.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[18:45:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:46:23] *** Quits: xff0x (~xff0x@2001:1a81:53e8:2500:31e6:f5f6:6492:6bc2) (Ping timeout: 250 seconds)
[18:47:08] *** Joins: xff0x (~xff0x@2001:1a81:53e8:2500:a7da:afdc:1a91:3063)
[18:47:47] *** Joins: RFV (~Thunderbi@48.red-83-57-2.dynamicip.rima-tde.net)
[18:48:57] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[18:50:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:51:39] *** Joins: alx741 (~alx741@157.100.197.240)
[18:52:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:53:11] <kuribas> > (\(<>) -> <> + 2) 3
[18:53:12] <lambdabot>  <hint>:1:11: error: parse error on input ‘<>’
[18:53:18] <kuribas> > (\(<>) -> (<>) + 2) 3
[18:53:19] <lambdabot>  5
[18:53:44] <segfaultfizzbuzz> what was that
[18:53:59] *** Alex_test_ is now known as Alex_test
[18:54:01] <ski> local binding of operator
[18:54:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:56:49] <kuribas> to a constant :)
[18:58:26] *** Joins: futty14 (~futty14@c90-143-137-255.bredband.tele2.se)
[18:59:47] *** Quits: RFV (~Thunderbi@48.red-83-57-2.dynamicip.rima-tde.net) (Quit: RFV)
[19:00:24] <kuribas> (\α -> α + 3) 2
[19:00:26] <kuribas> > (\α -> α + 3) 2
[19:00:27] <lambdabot>  5
[19:02:59] <kuribas> from now on I'll use greek symbols for all lambdas :)
[19:03:32] *** Joins: Pickchea (~private@user/pickchea)
[19:04:42] <ski> > (\((<>) :: (forall a. Num a => a)) -> (<>) <> 2) 3
[19:04:43] <lambdabot>  3
[19:06:25] *** Quits: slac85046 (~slack1256@191.126.99.75) (Ping timeout: 256 seconds)
[19:06:38] <futty14> Asked a question in the file. I would appriciate it if someone could tell me what is wrong with my code in m2 if we assume that m1 is all correct. replit.com/@futhark14/huff#Main.hs
[19:06:40] <kuribas> :t (\((<>) :: (forall a. Num a => a)) -> (<>) <> 2) 3
[19:06:41] <lambdabot> Num t => t
[19:07:54] <segfaultfizzbuzz> okay so please forgive the potentially distracting question here, but if i wanted to create a haskell with the rustlike concepts of: (1) no exceptions, only errors/result types and panics (2) affine (or linear) resource management, is there anything fundamental about haskell which prevents these things from happening?
[19:09:00] <kuribas> segfaultfizzbuzz: not adding something to a language is very easy :)
[19:09:14] *** Joins: slack1256 (~slack1256@186.11.100.54)
[19:09:35] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Ping timeout: 256 seconds)
[19:09:36] <segfaultfizzbuzz> i am thinking that at some point there ought to be a haskell++
[19:09:43] <kuribas> segfaultfizzbuzz: for adding linear resource and exception handling to a language, you can have a look at idris.
[19:09:53] <kuribas> idris is haskell++
[19:11:11] <kuribas> in some ways at least.
[19:11:33] <kuribas> I just have my doubts about using linear types for resource handling.
[19:11:44] <segfaultfizzbuzz> kuribas: oh? plz explain?
[19:11:56] <kuribas> idris libraries had a bug that leaked the resource.
[19:12:11] *** Joins: alx741 (~alx741@157.100.197.240)
[19:12:11] <segfaultfizzbuzz> but, that's a flaw with the idris compiler then...?
[19:12:26] <kuribas> no, it was a flaw in the library.
[19:12:40] *** Joins: whatif (~user@123.180.40.237)
[19:12:50] <segfaultfizzbuzz> wait, linear types don't stop leaks. leaking memory in rust is safe
[19:13:04] <whatif> https://paste.tomsmeding.com/80ERN8cV    why this is alway ambigous?
[19:13:45] <whatif> potential instance exist, but I have `qualified` to import
[19:13:51] <whatif> why this still happend
[19:14:22] <kuribas> whatif: you need to add a type annotation to WST.get ...
[19:15:05] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:15:21] <lortabac> whatif: name resolution and type inference are completely separated in Haskell
[19:15:33] <lortabac> here the problem is about the types, not about the names
[19:15:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:20:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d9db:d02e:3a80:b20d)
[19:20:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:21:01] <ski> segfaultfizzbuzz : did you already look into Clean (or Mercury) ?
[19:23:56] <whatif> kuribas: I don't get it, what is a type annotation to WST.get?
[19:24:23] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[19:24:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d9db:d02e:3a80:b20d) (Ping timeout: 240 seconds)
[19:24:55] <whatif> WST.get has its type signature from WST
[19:25:06] <whatif> why need one?
[19:25:11] <ski> whatif> :t WST.get
[19:26:33] <whatif> import qualified Web.Scotty.Trans as WST
[19:26:37] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[19:26:58] * ski doesn't really know Scotty
[19:27:50] <kuribas> whatif: your error type variable is free.
[19:27:52] <ski> anyway, it clearly doesn't know which type of Scotty error that it's supposed to look out for
[19:27:53] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[19:28:04] <ski> you need to pin it down, one way or another
[19:28:07] <kuribas> get :: (ScottyError e, MonadIO m) => RoutePattern -> ActionT e m () -> ScottyT e m () 
[19:28:35] <ski> (one way might be to make sure the context determines it. another is to add a type ascription, as kuribas is suggesting, which specifies it)
[19:31:15] *** Joins: alx741 (~alx741@157.100.197.240)
[19:31:21] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[19:34:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:35:02] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:35:56] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:36:51] <whatif> get "/" (text "hello") :: (ScottyError e, MonadIO m) => RoutePattern -> ActionT e m () -> ScottyT e m ()
[19:37:17] <whatif> Couldn't match expected type ‘ScottyT e0 IO ()’          with actual type ‘RoutePattern          -> ActionT e1 m0 () -> ScottyT e1 m0 ()’
[19:37:48] <whatif> what type variable is free?
[19:39:29] <kuribas> whatif: "e"
[19:39:44] <whatif> get "/" (text "hello") ::  ScottyT e m ()
[19:39:47] <kuribas> whatif: you want a specific type there, not a polymorphic one.
[19:40:00] <kuribas> like "ScottyT () IO ()"
[19:40:25] <whatif> kuribas: and why polymorphic is not ok?
[19:41:52] <ski> because it doesn't know which `e' to actually pick for you
[19:42:00] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[19:42:18] <ski> (and the program may behave in different ways, depending on which is picked)
[19:42:36] *** Joins: affine (~hugh@2a02:1206:45a3:6340:da01:c0c6:8610:80f6)
[19:42:52] <segfaultfizzbuzz> ski: no i havent looked into clean/mercury
[19:43:06] <affine> given -O0 does this piece of code need a force or seq?
[19:43:08] <affine> solve = uncurry max . foldl' (\(r1,r2) m -> (max r1 (r2 + m), r1)) (0,0)
[19:43:23] <ski> to actually use a polymorphic value, you will have to instantiate/specialize/monomorphize it, picking some particular type(s) for the universally quantified type varibles
[19:43:25] <affine> given that (r1,r2) :: (Int,INt)
[19:43:53] <ski> commonly, the context around the use will determine this for you (or defer the decision to the caller of the current code, &c.)
[19:44:11] <merijn> affine: Define "need"? :p
[19:44:30] <ski> but the context doesn't give enough clues, and so you may need to give an explicit type ascription or signature
[19:44:33] <affine> merijn a friend told me that this causes a space leak but i can't see why
[19:44:36] <whatif> get "/" (text "hello") ::  ScottyT () IO ()
[19:44:40] <merijn> affine: Ah, I can :)
[19:44:49] <whatif> No instance for (ScottyError ()) arising from a use of ‘get’
[19:44:55] <merijn> affine: foldl' evaluates the accumulator to WHNF
[19:45:07] <merijn> affine: The WHNF of a tuple is: tuple constructor with 2 thunks :)
[19:45:14] <ski> segfaultfizzbuzz : both of them have uniqueness, for handling update-in-place of state, in a pure declarative fashion. Clean also has laziness
[19:45:22] <merijn> affine: So foldl' isn't forcing the contents of the tuple (i.e. your +)
[19:45:27] <affine> oh really
[19:45:32] <whatif> why this `get` is so difficult to use
[19:45:44] <affine> weak head normal form of k = (5+7,2+4) is just (5+7,2+4)
[19:45:45] <ski> whatif : maybe look at what instances of `ScottyError' are available, if you're not sure which type to choose
[19:46:12] <merijn> affine: Personally I find seq hard to use right, I'd recommend going with strictness on the lambda: i.e. "(\(!r1,!r2) m -> (max r1 (r2+ m), r1))"
[19:46:22] <affine> so this does actually cause a space leak?
[19:46:25] <merijn> affine: Which probably requires -XBangPatterns
[19:46:30] <merijn> affine: Potentially
[19:46:43] <merijn> affine: It depends how much gets inlined, if the strictness analyzer sees it, etc.
[19:46:48] <affine> this is using -O0
[19:46:56] <merijn> affine: The probably, yes
[19:47:05] <affine> what about levity polymorphism?
[19:47:14] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:47:16] <affine> unliftedtypes
[19:47:26] <merijn> affine: WHNF is basically "evaluate until the first leftmost, outermost thing is a constructor (i.e. the tuple thing)"
[19:47:53] <merijn> affine: That'd work, but I don't think foldl' works with that directly, so it quickly becomes messy/tricky
[19:48:08] <merijn> affine: BangPatterns on the other hand is fairly straightforward :p
[19:48:10] *** Joins: max22- (~maxime@2a01cb08833598004d3ba66ae954fefa.ipv6.abo.wanadoo.fr)
[19:48:27] <affine> i thought bang patterns were just fully evaluated thunks
[19:48:30] <affine> but they still have a pointer
[19:48:37] <affine> so strict but still with the pointer?
[19:48:57] <ski> ?
[19:49:24] <affine> i'm confused about why use bang patterns over unlifted types?
[19:49:30] <affine> other than awkwardness of programming
[19:49:47] <segfaultfizzbuzz> ski: hm, clean jettisons monads?
[19:50:36] *** Joins: alx741 (~alx741@157.100.197.240)
[19:50:40] <ski> (i dunno what you mean, by those last sentences)
[19:50:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:53:17] <merijn> affine: Bang pattern forces to WHNF
[19:53:39] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:53:40] <affine> hmm so it is weaker than unlifted types which is essentially a deep force?
[19:53:48] <affine> as wHNF is not the same as lacking bottom?
[19:53:55] <merijn> affine: So where foldl' forces the tuple to WHNF, "(\(!r1, !r2) m -> ..)" forces r1 and r2 to WHNF whenever the tuple is forced to WHNF
[19:54:47] <merijn> affine: unlifted types don't play nice with polymorphic code/functions
[19:55:05] <merijn> affine: Supporting parametric polymorphism is one of the main reasons for lifting things :p
[19:55:06] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:55:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[19:55:23] <affine> is that an implmentation detail?
[19:55:33] <affine> could functions generalise over levity in future given a lot of compiler work??
[19:55:42] <affine> or are unlifted types more a special case if you really really need it
[19:56:10] <merijn> affine: Ok, so there are, effectively, two ways/strategies for handling polymorphic code
[19:56:44] <merijn> datatypes can have different sizes so you can: 1) generate separate code for every possible datatype or 2) force all datatypes to have the same type (for purposes of generic code)
[19:57:03] <merijn> The first option optimises better, but bloats code size and can be tricky if you don't know all types ahead of time
[19:57:27] <merijn> The second option is generally easier and compacter (but with reduced optimisation opportunity)
[19:57:33] <affine> is this static vs dynamic dispatch?
[19:57:57] <merijn> affine: The easiest way of making all data the same size is to replace every datatype with a pointer indirection to the data (aka boxing)
[19:58:40] <merijn> (GHC has, like, 2 axes boxed/unboxed and lifted/unlifted I think? I'm a bit muddy on the details)
[19:59:23] <merijn> affine: Anyway, the result is that you can't magically throw unlifted/unboxed code into any and all functions
[19:59:37] <affine> ahh yes of course that makes sense
[19:59:46] <affine> you can just pass along a pointer to a function which is the boxed thing
[20:00:27] <affine> i suppose i'm imagining knowing the type at compiletime
[20:00:30] <merijn> affine: bangpatterns/seq don't affect the representation (just evaluation) so it plays nicer in most cases than unlifted does
[20:00:31] <affine> rather than say existential types
[20:00:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:00:49] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:00:52] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:01:00] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[20:01:19] <Andrew> Since Haskell is a lazy language, I wonder if there's a way to represent radicals that's *actually accurate*.  For example, is there a form of `pi' that if displayed on its own would be calculated to infinity, but would work with a function that takes an precision value and spits that precision out?  I mean a function that works kind-of like `take', but works on those types?
[20:01:49] <affine> why not the continued fraction representation?
[20:02:00] <affine> that represents sqrt(2) perfectly
[20:03:09] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5722:cfcd:da3c:1af2) (Quit: WeeChat 2.8)
[20:03:19] <Andrew> Hmm, nice :)
[20:03:24] <Andrew> I just wonder why that isn't the default
[20:03:30] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[20:03:58] <merijn> because that kinda thing is slow :p
[20:04:06] <geekosaur> it's slower than machine / IEEE floats
[20:04:39] <Andrew> But that's more "correct" :\
[20:04:51] <ski> Andrew : see `CReal' ?
[20:05:06] <kuribas> shouldn't Data.Map be a Profunctor?
[20:05:12] <segfaultfizzbuzz> Andrew: there's a closed form method of calculating any specified digit of pi
[20:05:15] <ski> (i dunno if anyone has made an implementation of algebraic numbers, though, hmm ..)
[20:05:30] <Andrew> Sounds like it, thanks :)
[20:05:43] <Andrew> I suddenly got this idea for no apparant reason while configuring a Postfix server
[20:05:45] <segfaultfizzbuzz> so you don't really need laziness, i don't think
[20:05:52] <ski> > showCReal 50 pi
[20:05:53] <lambdabot>  "3.14159265358979323846264338327950288419716939937511"
[20:05:59] <ski> > showCReal 100 pi
[20:06:00] <lambdabot>  "3.1415926535897932384626433832795028841971693993751058209749445923078164062...
[20:06:01] <merijn> kuribas: No
[20:06:11] <merijn> kuribas: Same reason Set isn't a Functor
[20:06:16] <Andrew> segfaultfizzbuzz: Well, I like how laziness works in Haskell, seems quite elegant :)
[20:06:38] <segfaultfizzbuzz> also note that there is absolutely no circumstance where more than 100 digits of pi would actually be necessary, except for ivory tower number theory
[20:07:32] <polyphem> Andrew: standard pi has 16 siginificant digits, you have to provide your other terms with even more "precision" to be more correct , does that make sense ?
[20:08:06] <Andrew> Makes sense
[20:08:32] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[20:08:46] *** Joins: califax (~califax@user/califx)
[20:08:58] <polyphem> more precise in one factor , doesnt make the whole computation more precise , if the other factors are less precise
[20:09:19] <segfaultfizzbuzz> and in any circumstance where pi is actually useful to compute things it needs to be pre-calculated
[20:09:36] <segfaultfizzbuzz> sounds like the opposite of where laziness would be useful
[20:10:13] <ski> i suppose with laziness, precision can be demand-driven
[20:10:37] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[20:10:42] *** Quits: deadmarshal (~deadmarsh@95.38.114.110) (Quit: ZNC 1.8.2 - https://znc.in)
[20:10:46] * ski idly ponders stability of numerical algorithms
[20:11:01] <Andrew> ski: That's my point
[20:11:15] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:11:49] *** Joins: sharky2 (~bc8147f2@83.167.180.121)
[20:11:50] *** Joins: deadmarshal (~deadmarsh@95.38.119.14)
[20:12:13] *** Joins: alx741 (~alx741@157.100.197.240)
[20:12:18] <segfaultfizzbuzz> i mean, do you need deep sub-planck-scale precision?
[20:12:29] <carter> if only that was useful :) 
[20:12:43] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:12:54] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[20:13:15] <segfaultfizzbuzz> lol, quad precision smallest value looks like 2^-16382
[20:13:16] * int-e drops a feather on ski in hopes of disturbing their precarious balance.
[20:13:36] <segfaultfizzbuzz> lol even google reports 2^-16382 as being precisely equal to ezro
[20:13:37] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[20:13:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:14:43] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[20:15:03] <segfaultfizzbuzz> planck length is 1.6 x 10^-35 meters which is 2^-115.5
[20:15:03] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[20:15:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:16:06] <sharky2> hi. I'm using Network.HTTP.Conduit and Network.Socket.Internal, but this doesn't work as the page I'm trying to download requires cookies. can those packages accept cookies, and if not, what package do you recommend that I use instead?
[20:16:37] * ski slides away from the point repeller, ends up into a meta-stable chaotic attractor
[20:16:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:16:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:16:45] *** Joins: wroathe (~wroathe@user/wroathe)
[20:16:52] <Andrew> But it is not precisely zero.  I know I focus too much on correctness, but whatever :)
[20:17:01] * Andrew closes his IRC to focus on setting up Postfix
[20:17:08] <sharky2> big picture: I am writing a web scraper and I wanted to use google's I'm feeling lucky to get to the page of interest, since website I'm scraping has no searching capability. but I'm having trouble using google's I'm feeling lucky page, because it requires cookies
[20:18:39] *** Joins: axeman (~quassel@2a02:8109:a3c0:b10:7b68:5346:f621:6fdc)
[20:19:17] *** Quits: whatif (~user@123.180.40.237) (Ping timeout: 256 seconds)
[20:19:29] <segfaultfizzbuzz> Andrew: precision on the scale you are talking about is likely a human invention rather than a reality of nature. i think we can create a compelling case that things like real numbers, actual spheres and circles, etc don't exist
[20:19:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[20:20:11] * Andrew swims in mathematical purity, jumps out into humanity, and sighs
[20:20:39] *** Quits: deadmarshal (~deadmarsh@95.38.119.14) (Ping timeout: 256 seconds)
[20:20:58] <segfaultfizzbuzz> i've heard that constructivism is becoming fashionable in mathematics but don't know the details there
[20:21:00] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:22:44] <segfaultfizzbuzz> anyway so the actual practical upshot of what i was saying was: you could populate quad float precision once with the values of pi as a compile time constant and be good even for calculations which need to consider effects at the planck scale
[20:24:16] <segfaultfizzbuzz> excuse me, way beyond the planck scale, whatever that means ;-)
[20:25:09] * ski . o O ( cancellation )
[20:26:12] <segfaultfizzbuzz> ski: what?
[20:26:22] *** Quits: mbuf (~Shakthi@122.162.66.95) (Quit: Leaving)
[20:27:19] <ski> if you have two quads which are very nearly equal, and you compute the difference, then that will only have a few significant figures
[20:27:48] <ski> https://en.wikipedia.org/wiki/Catastrophic_cancellation
[20:28:41] *** Quits: meltedbrain_y2k (~tekserf@47.61.115.91) (Read error: Connection reset by peer)
[20:28:56] <segfaultfizzbuzz> okay? how is that relevant for having pi to quad precision
[20:29:15] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:29:34] <ski> having just quad precision of some inputs might not be enough to get reasonable precision for the results
[20:31:57] <segfaultfizzbuzz> the most precise physical measurement ever made was 14 significant digits
[20:32:00] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[20:32:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[20:32:00] *** finn_elija is now known as FinnElija
[20:32:17] *** Joins: alx741 (~alx741@157.100.197.240)
[20:32:32] *** Joins: eayavas (~eayavas@78.168.199.216)
[20:32:37] <monochrom> Intermediate computations can benefit from more guard bits.
[20:33:04] <segfaultfizzbuzz> monochrom: understood, but not eight hundred billion trillion guard bits
[20:34:12] <monochrom> Then you should do numerical analysis properly to determine how many guard bits (or even better a better algorithm that doesn't need as many). As opposed to armchair opining.
[20:34:39] <segfaultfizzbuzz> are there real world situations where you need to go beyond quad float precision?
[20:34:50] *** Joins: emf (~emf@2620:10d:c090:400::5:3e0a)
[20:34:53] <Cale> Also, it's possible to make use of real numbers in ways that don't correspond to physical measurements, though perhaps that's just weird.
[20:35:08] <monochrom> And sometimes in lieu of a better algorithm, throwing guard bits at the problem is an interim solution.
[20:35:09] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:35:23] <segfaultfizzbuzz> Cale: yes in genetics small probabilities, like 10^-100 can show up
[20:35:40] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:35:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:36:40] <monochrom> Observe how we also have 64-cores 2TB RAM 3PB SSD 4K 60" quad-head desktops for merely web devs who "clearly don't need" any of it.
[20:36:51] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:36:51] <segfaultfizzbuzz> haha
[20:37:24] <monochrom> Well, they need it because they don't have better algorithms or better page layouts.
[20:38:28] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:41:09] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[20:41:27] <Cale> monochrom: Hey, when part of your toolchain is a Haskell to Javascript compiler, you need all the performance you can get just to not spend all day waiting for builds to finish :D (actually, we mostly sidestep the builds now by running our web applications in ghci while developing and having them control the contents of the DOM via a websocket)
[20:41:33] *** Joins: alp (~alp@user/alp)
[20:42:07] <monochrom> But I was referring to those who write in javascript directly.
[20:42:45] <c_wraith> I wish jsaddle actually worked in firefox
[20:42:53] <Cale> c_wraith: me too
[20:43:02] <c_wraith> or with firefox, as the preposition may be
[20:43:08] <maerwald> why target javascript?
[20:43:27] <Cale> maerwald: as opposed to webassembly?
[20:43:44] <monochrom> "it's an easy target" :)
[20:43:45] <Cale> It's basically just that the wasm compilers are not quite there yet.
[20:44:04] <Cale> haha
[20:44:38] <justsomeguy> I have this expression one = [x^y | x <- [1..5], y <- [2, undefined]]. Evaluating it results in an exception once it tries to create the second element of the resulting list [(1^2),(2^undefined)***exception. I want to write a test using Hspec to prove that it throws this particular exception. Can you point me in the right direction to start solving this? I don't know where execption handling
[20:44:40] <Cale> c_wraith: I also wish jsaddle were unnecessary on desktop and mobile again, but that's probably a wish that's not coming true any time soon.
[20:44:40] <maerwald> I was rather questioning that these days everything is run via electron and other bloat... even stuff that has nothing to do with websites
[20:44:41] <justsomeguy> stuff lives in Haskell.
[20:45:35] <geekosaur> Control.Exception but I would assume Hspec has its own ways to prove something throws a given exception
[20:45:51] <segfaultfizzbuzz> ski: sorry, is there a real situation where i am subtracting a couple of numbers and need beyond a quad precision representation of pi to calculate something (even an error in the subtraction)...?
[20:46:00] <Cale> justsomeguy: Exceptions thrown by evaluation of pure code (as opposed to by execution of IO) can also be quite tricky to catch in general, since you have to make sure that evaluation occurs inside the catch.
[20:46:29] <c_wraith> in this particular case, you also need to ensure the exception doesn't happen someplace else.
[20:46:34] <segfaultfizzbuzz> Cale: ya'll need to adopt rust's error handling techniques, except to be more opinionated about it
[20:46:53] <c_wraith> so you can't just evaluate `one !! 1` and call yourself done.
[20:47:06] <c_wraith> you need to pattern match much more carefully
[20:47:17] <justsomeguy> Hspec has shouldThrow ( http://hspec.github.io/expectations.html ). I get some type errors when I try to use it. I'll write an example anlink to it.
[20:47:23] <monochrom> In this case, "seq one ()" doesn't throw.
[20:47:26] *** Joins: meltedbrain_y2k (~tekserf@47.61.115.91)
[20:47:30] <Cale> segfaultfizzbuzz: Well, this is a natural consequence of having lazy evaluation. Really, exceptions thrown from evalation probably ought not to be caught, but it is sometimes nice to have as a last resord.
[20:47:36] <Cale> resort*
[20:47:46] <monochrom> You will need many ingredients.
[20:48:12] <monochrom> One ingredient is Control.DeepSeq for full evaluation.
[20:48:37] <c_wraith> you don't want DeepSeq here
[20:48:55] <c_wraith> you want to be sure the bottom is in exactly the right place, not just somewhere
[20:49:05] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[20:49:06] <monochrom> Another ingredient is Control.Exception's evaluate to go back to IO to make sure evaluation is triggered, and right at the moment you want.
[20:49:47] <monochrom> And then undefined is a call to error, and you find out which exception it corresponds to.
[20:50:07] <c_wraith> looks like hspec provides anyErrorCall to handle that part
[20:50:20] <Cale> justsomeguy: You'll probably want to use Control.Exception.evaluate
[20:51:35] *** Joins: alx741 (~alx741@157.100.197.240)
[20:52:24] <Cale> justsomeguy: So as to turn your expression into an IO action which evaluates the expression and causes the exception to occur. Note however, that since your expression is a list, it can technically be evaluated without causing the exception, so you may wish to also use Control.DeepSeq.rnf on it to insist on evaluating everything deeply.
[20:53:06] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:55:19] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:55:52] <Cale> Control.Exception.evaluate will only evaluate something as far as determining what its outermost data constructor is, so in your case, it will probably succeed in getting the thing as far as (1^2) : _
[20:56:12] <monochrom> _ : _
[20:56:24] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 250 seconds)
[20:56:46] <monochrom> % evaluate (undefined : undefined) >> putStrLn "I'm OK"
[20:56:46] <yahb> monochrom: I'm OK
[20:56:56] <sharky2> can newer versions of ghc/ghci report compile-time warnings for mismatched printf format string and supplied arguments?
[20:57:13] <Cale> indeed
[20:57:22] <Cale> sharky2: no
[20:57:46] <Cale> sharky2: The printf format string is not generally known at compile time
[20:58:05] <Cale> sharky2: So that's not technically possible with the approach that Text.Printf takes to it
[20:58:12] <sharky2> Cale, what do you mean? it is usually used with string literal, which is known at compile time
[20:58:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:58:42] *** Joins: fef (~thedawn@user/thedawn)
[20:58:53] <monochrom> "can?" yes, "will?" very improbable.
[20:58:57] <Cale> Yeah, but Text.Printf.printf isn't a TH macro or something which will consume its string at compile time. It's just an ordinary function.
[20:59:10] *** Joins: Akiva (~Akiva@user/Akiva)
[20:59:26] <Cale> It is however possible to take a different approach to writing a printf library which will typecheck everything
[20:59:40] <sharky2> I am talking about implementing this at ghc/ghci level, not at printf haskell code level. this can certainly be done, just like it is done in many C and C++ compilers
[20:59:41] <Cale> It's just not so easy to do that *and* use string literals
[20:59:47] <geekosaur> https://hackage.haskell.org/package/typelits-printf
[21:00:39] <geekosaur> and if anything, printf id discouraged, so I highly doubt any special support for it will end up in ghc
[21:00:48] <geekosaur> *is discouraged
[21:01:12] <geekosaur> it basiclaly exists to be a demonstration of how you can abuse typeclasses to make varargs functions
[21:01:18] *** Joins: deadmarshal (~deadmarsh@95.38.119.14)
[21:01:19] *** Joins: tavares (~tavares@user/tavares)
[21:01:24] <c_wraith> typelits-printf is a bit old.  more recent versions of GHC added a type family that should massively speed up what it does
[21:01:28] <Cale> https://hackage.haskell.org/package/category-printf -- I would prefer this to Text.Printf, however, in practice, I never use this library, it is a joke.
[21:01:32] <dminuoso> geekosaur: What is your preferred method of doing say `printf "%0dc" (c :: Word8)`?
[21:01:44] <dminuoso> Uh sorry. "%03o"
[21:01:48] *** Quits: fef (~thedawn@user/thedawn) (Read error: Connection reset by peer)
[21:01:57] *** Quits: coot (~coot@213.134.190.95) (Remote host closed the connection)
[21:02:04] <dminuoso> All the alternatives appear less pleasing.
[21:02:21] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 256 seconds)
[21:02:24] <sharky2> well Text.Printf is part of base, and its main disadvantage could be fixed by making special checks in the ghc/ghci compiler.
[21:02:26] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[21:03:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7da5:59e:42b2:ced5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:03:28] <sharky2> if making printf more safe isn't a concern, why even have it in base
[21:03:37] <justsomeguy> Alright, now I have a place to start looking :^). I'll peruse the hackage docs Control.Exception, deepseq's Control.DeepSeq, and hspec's Test.Hspec for now.
[21:03:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:04:14] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:05:11] <Cale> sharky2: It's basically in base only because it made its way into base quite early on when nobody was thinking too much about package structure. I think it predates cabal even.
[21:05:20] <EvanR> printf is good for quick and dirty reports
[21:05:30] <EvanR> more elaborate pretty printers exist
[21:05:34] <Cale> We probably can and should split it into its own package by now, as it's not actually used all that much.
[21:05:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:05:55] <EvanR> speak for yourself xD
[21:06:12] <Cale> The only question is: would that simplification of base actually be worth the resulting churn?
[21:06:34] <EvanR> making prelude and base less useful than it already is doesn't sound good
[21:06:49] <sharky2> I like using printf, alternatives tend to be clumsy and verbose. I also know flags by heart. it is just a bit frustrating and ironic that it is in a way safer to use printf in C than in haskell
[21:07:23] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[21:07:33] <affine> how is it safer to use printf in c than haskell?
[21:07:39] <EvanR> what you're asking for is a special compiler feature for 1 ad-hoc function in some module
[21:07:55] <EvanR> that's a can of worms
[21:08:10] <Cale> affine: The C compiler checks that your format string matches the arguments provided, and does not permit non-literal strings.
[21:08:32] <affine> huh
[21:08:34] <affine> thanks
[21:08:48] <Cale> Yeah, it's one thing when that function is the way that 99% of all printing to the terminal is done in the language. Doing it for Text.Printf.printf would be insane though.
[21:08:56] <affine> could printf in Haskell become n+k patterns?
[21:09:04] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:09:04] <affine> a cool feature but eventually deprecated
[21:09:17] <EvanR> I daresay the haskell "experiment" philosophy is to not to 1 off ad-hoc solutions to anything and only solve problems in some astounding generic way, otherwise don't bother
[21:09:18] <affine> as in type checked printf
[21:09:20] <sharky2> affine as Cale said, safer because some C compilers make special checks if the format string is string literal. obviously, at a language level, it is less safe to use printf in C than in haskell.
[21:09:37] <dminuoso> But honestly, the lack of a printf makes certain things really poor to express in Haskell.
[21:09:46] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:09:56] <affine> could you do this with template haskell?
[21:09:58] <dminuoso> `printf "%03o" c` likely has no eloquent of performant equivalent.
[21:10:05] <Cale> sharky2: Yeah, it's worth noting that when you mess up the arguments in Haskell, you don't end up reading memory you're not supposed to ;)
[21:10:10] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:10:33] <EvanR> I dunno about printf being "performant"
[21:10:46] <EvanR> convenient yes
[21:10:59] <Cale> dminuoso: I'd probably use showOct and some padding function.
[21:11:10] <geekosaur> ^
[21:12:12] <geekosaur> or showIntAtBase for an older ghc
[21:12:33] <EvanR> it's not exactly "eloquent" for reasons sharky2 is saying
[21:12:48] <sharky2> Cale btw I'm pretty sure you can use strings known at compile time in C's printf
[21:12:55] <dminuoso> showIntAtBase is available on base-4.16.0.0
[21:13:01] <sharky2> Cale btw I'm pretty sure you can use strings that are NOT known at compile time in C's printf
[21:13:11] *** Joins: alx741 (~alx741@157.100.197.240)
[21:13:14] <EvanR> you really should not though
[21:13:15] <dminuoso> The thing is, there's just no pretty way to write a left pad function in Haskell.
[21:13:26] <affine> how could GHC benefit from AVX512 support? I think AVX-512 has vectorised branching
[21:13:32] <dminuoso> Which brings us all the way to the evil of `type String = [Char]`
[21:13:35] <Cale> sharky2: You can, if you turn off the corresponding errors, but it is extremely unsafe to use with strings that might be affected by user input
[21:13:35] <affine> even if no one has AVX512
[21:13:50] <sharky2> C language has no way of enforcing that a function only takes string literal. at best it might be a compile warning
[21:13:52] <dminuoso> affine: There's little-to-no support for vectorization in GHC.
[21:13:58] <affine> how come?
[21:14:13] <dminuoso> Because only few people spend research on it
[21:14:28] <dminuoso> Essentially you have to teach GHC how to use vectorized primops
[21:14:33] <dminuoso> And when
[21:15:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:15:12] <Cale> Yeah, there is some vectorization already iirc, but it's little more than primitives. Actually taking advantage of it is another thing.
[21:15:14] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[21:15:22] <EvanR> are we talking about vectorized branching to help with left padding a short string
[21:15:29] <affine> no
[21:15:30] <EvanR> is this node.js
[21:15:33] <Cale> No, that's another discussion
[21:15:36] <EvanR> oh
[21:16:00] <dminuoso> You might get some local vectorization happening through LLVM if you're lucky, though.
[21:16:07] <Cale> https://hackage.haskell.org/package/ghc-prim-0.8.0/docs/GHC-Prim.html#g:38
[21:16:30] <affine> i've seen this but frankly it looks painful to use
[21:16:37] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[21:16:52] <Cale> It's fairly painful to use, yes
[21:16:52] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:17:28] <dminuoso> Cale: Last I checked GHC didn't actually make use of them outside some experimental branch that some researcher was working on. Im trying to find the author, he presented some results on Haskell Exchange 2019 if memory serves right.
[21:17:39] <[exa]> affine: what instructions would the vectorized branching correspond to?
[21:18:47] <Cale> dminuoso: But you can probably make use of them by hand and have them work with the LLVM backend...
[21:18:58] <Cale> dminuoso: it's just, mildly painful
[21:19:02] <dminuoso> Yeah absolutely.
[21:19:12] <dminuoso> At that point you might as well just FFI into your intel/clang/gcc compiled code.
[21:19:22] <EvanR> do any of the array libraries use these prim ops, Repa for example
[21:19:57] <Cale> Not as far as I'm aware.
[21:20:03] <EvanR> cool
[21:20:08] *** Joins: fef (~thedawn@user/thedawn)
[21:20:15] <dminuoso> How's that cool? Smelling an opportunity? :p
[21:20:26] <Cale> https://hackage.haskell.org/package/accelerate might be a good place to consider adding support
[21:20:34] <affine> i thought maybe the ternary logic?
[21:20:42] <affine> [exa]
[21:20:45] <Cale> actually, I wonder what accelerate-llvm-native does
[21:21:05] *** Quits: deadmarshal (~deadmarsh@95.38.119.14) (Ping timeout: 250 seconds)
[21:21:07] <Cale> I think that's just multicore
[21:21:11] <[exa]> btw there is this: https://hackage.haskell.org/package/knead
[21:21:33] <[exa]> affine: pick the instruction here https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#techs=AVX_512  :]
[21:22:18] *** shapr` is now known as shapr
[21:22:40] <Athas> EvanR: I think Repa predates those primops and Accelerate doesn't use primops at all in its best backends.
[21:22:48] <Athas> Maybe Massiv?
[21:23:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:23:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:23:16] *** Joins: wroathe (~wroathe@user/wroathe)
[21:24:15] *** Joins: zaquest (~notzaques@5.130.79.72)
[21:25:54] <EvanR> dminuoso, at least knowing "no" is better than not knowing
[21:26:30] <EvanR> I've been told ghc has no "SIMD game"
[21:27:10] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:27:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:28:27] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[21:29:21] <affine> [exa] vmulps
[21:29:38] <affine> like using masks instead of a branch as in branchless code
[21:29:45] <affine> although that might be pointless not sure
[21:29:51] <affine> it is very very specific
[21:31:02] <EvanR> simd stuff would be great for software graphics purposes xD
[21:31:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-052.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:31:37] <EvanR> as great as GPUs are, the interface hurts purity and laziness
[21:31:38] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:31:50] <[exa]> affine: yeah ghc generally does not work with the sufficient level of data abstraction there
[21:31:51] <EvanR> and haskell doesn't run on GPUs yet
[21:32:05] <affine> what do you mean by 'sufficient level of data abstraction'?
[21:32:12] <affine> is it laziness?
[21:32:54] <[exa]> like, sufficiently big packs of floats that get mapped in precise blocks over simple operations with simple conditions that all can be processed by SIMD instructions
[21:34:06] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:34:19] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:34:35] <[exa]> the best way for autogenerating SIMD code now is AFAIK 1] loop unrolling 2] not writing loops and using an abstraction like repa where manipulating the individual tiny processing fibers is easy
[21:34:49] *** Joins: alx741 (~alx741@157.100.197.240)
[21:34:53] <[exa]> (also futhark)
[21:35:24] <affine> is SIMD only useful for numeric computations? it is clearly the way to go for matrices
[21:36:02] <affine> i know AVX-512 makes your CPU hot. i'm not sure if there is some latency in using it
[21:36:29] <Cale> affine: In theory, perhaps not, in practice, it's hard to figure out how to use for anything other than numerical computations.
[21:36:32] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:37:14] <Cale> It's rare that you have non-numerical datastructures that are laid out in memory in a sufficiently uniform way to get any leverage
[21:37:17] <EvanR> it might be hard to map high level code that expresses the idea of matrices (as opposed to a dumb N x M array of floats) to SIMD
[21:37:23] * segfaultfizzbuzz thinks the machine learning club underuses sparsity
[21:37:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:37:34] <[exa]> yeah, if you have a huge pile of numbers that can be loaded and crunched in the blocks of 4/8/16 or something, it can make a nice 3-4x speedup against manually optimized asm code (SSE case) or even more with AVX (although I wasn't able to squeeze much more than ~4x with everything I tried)
[21:38:22] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:38:25] *** Quits: eayavas (~eayavas@78.168.199.216) (Quit: WeeChat 3.4)
[21:38:27] <affine> just out of curiosity what numerical things were you computing?
[21:38:37] *** Quits: futty14 (~futty14@c90-143-137-255.bredband.tele2.se) (Ping timeout: 256 seconds)
[21:38:40] <affine> in haskell*
[21:38:43] <koala_man> do you count byte shuffling as numeric computation?
[21:39:04] <affine> what is byte shuffling?
[21:39:13] <[exa]> affine: not much in haskell directly, for me it was simplest to patch it up in C and then call from haskell
[21:40:03] <koala_man> affine: e.g. converting endianness or expanding 16bit values into 32bit one (or packing them back)
[21:40:07] <[exa]> anyway the last time it was some weird kind of gradient descent
[21:40:37] <[exa]> ah yeah actually crunching long strings makes some minor sense with SIMD
[21:41:31] <[exa]> sadly CPUs don't have much cache or memory throughput, so you usually hit the wall there very quickly
[21:42:14] <affine> i learnt yesterday how few registers CPU have
[21:42:18] <affine> i was totally shocked
[21:42:24] <dminuoso> affine: Actually the reality is much more interesting.
[21:42:24] <EvanR> that you know of
[21:42:29] <monochrom> All those P-boxes, S-boxes, and "do 16 rounds of this" of a cipher may fit SIMD too. But are the data numbers? I think people will kill each other over that question.
[21:42:31] <dminuoso> Physically CPUs have about 300-500 registers.
[21:42:40] <affine> wait what?
[21:42:49] <affine> i thought they had like 30
[21:42:54] <EvanR> you can only use registers exposed by the architecture
[21:42:58] <dminuoso> So lets say they have 16 so-called architectural registers.
[21:43:21] <monochrom> I thought a cache was a register file. :)
[21:43:25] <dminuoso> affine: Do some research on whats called the tomasulo algorithm,
[21:43:29] <EvanR> the others are used by the illuminati to spy on and compute stuff for their own nefarious purposes
[21:43:37] <dolio> They're executing a lot of different instructions at once.
[21:43:40] <dminuoso> It will be quite an adventure
[21:43:43] <monochrom> haha EvanR
[21:44:03] <dolio> So each instruction would need to have a set of registers, presumably.
[21:44:29] <dminuoso> affine: CPUs can do simultaneous out-of-order execution. At peak, a modern single CPU is able to execute upwards of 8 (perhaps more on modern CPUs) instructions in special circumstances.
[21:44:39] <affine> it sounds like a huge amount of performance is left on the table that compilers it could have. if they can't see all the available registers?
[21:44:49] <affine> compilers could have*
[21:45:08] <dminuoso> affine: Compilers do their best to produce code that is executed well on todays super scalar CPUs
[21:45:20] <dminuoso> But yeah, you have much optimization potential
[21:45:25] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:45:30] <dminuoso> Which is why locally well written assembly can do wonders in certain circumstances
[21:45:43] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:45:49] <affine> i wrote assembly for the first time yesterday
[21:45:55] <affine> never used a more painful language
[21:46:05] <affine> other than java
[21:46:21] <EvanR> there are programmers who prefer assembly, check out menuetOS xD
[21:46:34] <EvanR> gui and everything
[21:47:08] <dminuoso> affine: Best of all is the out of order executions. CPUs will not execute your instruction one by one, they are taken out of order and executed in whatever fashion the CPU can leverage its resources with - as long as architecturally you dont get to tell the difference.
[21:47:10] <dminuoso> Fun fact now:
[21:47:16] <ski> x86 is pretty painful
[21:47:31] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a4a2:67d7:acda:e455) (Ping timeout: 250 seconds)
[21:47:32] <EvanR> yes, 4 registers xD
[21:47:43] <affine> i was using registers r10 and r10d as if they were unrelated
[21:47:44] <ski> there are nicer architectures
[21:47:49] <affine> i was super confused why nothing worked
[21:47:55] <dminuoso> affine: This buys you a lot of performance. And yet, a lot of the recent CPU vulnerabilities like Spectre and friends are examples how this can still leak timings.
[21:47:57] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[21:48:22] <EvanR> did spectre leak the actual data via cache
[21:48:29] <EvanR> rather than timing
[21:48:54] <affine> does it make sense for CPUs to be consequential instructions? maybe a less deterministic instruction set would make sense?
[21:48:58] <dminuoso> Okay that was a slight misrepresentatino, but to exfiltrate that cache you'd execute timing attacks
[21:48:59] <affine> i know ARM has weak memory ordering
[21:49:33] <dminuoso> Well, the clear trend in the industry is towards more cores on your silicon anyway
[21:50:09] <EvanR> which translates to non-determinism
[21:51:37] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:52:07] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[21:53:57] *** Quits: emf (~emf@2620:10d:c090:400::5:3e0a) (Ping timeout: 240 seconds)
[21:55:16] <EvanR> monochrom, you gotta admit "The Shadow Stack" sounds pretty ominous
[21:55:37] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[21:56:26] *** Joins: alx741 (~alx741@157.100.197.240)
[21:56:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[21:56:37] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[21:57:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[21:57:20] <Athas> affine: it depends on what you mean by "numeric", but all sorts of algorithms can be SIMD-accelerated.  Searching, for example.
[21:57:36] <affine> oh hi, you're the futhark guy :O
[21:57:38] *** Joins: emf (~emf@163.114.132.7)
[21:58:22] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[21:59:03] <dminuoso> I have an API binding library. Say I have a data structure that maps to an API and I happened to use generics to derive the ToJSON instance, and I have a typo in a field name.
[21:59:12] <dminuoso> Does fixing the field name warrant a major PVP version bump?
[21:59:16] <dminuoso> I feel like its not clear.
[21:59:16] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:59:36] <Athas> affine: true!
[21:59:40] <dminuoso> It's almost but guaranteed that if you're using this field, you're already experiencing a bug since you couldn't reasonably use this field anyway
[22:00:01] <[exa]> dminuoso: I'd say that no one could technically use it before because of the typo, and thus it's non breaking
[22:00:11] * [exa] hides from angry user mob
[22:00:40] <EvanR> fixing is obviously non-breaking
[22:01:03] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[22:01:24] <dminuoso> Alright, I think Ill go with minor version bump and give the angry user mob, should they appear, [exa]'s private phone number.
[22:01:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[22:02:03] <[exa]> dminuoso: like, looking at some stats about user count would probably be the most guiding info here
[22:02:08] <Athas> Is there a variant of 'bracket' where the release action is told whether an exception was thrown?
[22:02:41] <dminuoso> [exa]: You likely will experience a lynch mob between a 1 and a hundred.
[22:02:49] <monochrom> dminuoso: A bug fix is a point release. You can give my email address to the angry user mob. >:)
[22:03:06] <EvanR> you mean, semi-catch the exception? Doesn't that violate the no-cloning theorem of exception mechanics
[22:03:32] <Athas> EvanR: I just don't want to conceal the exception with one of my own.
[22:03:52] <dminuoso> Athas: Then dont catch SomeException?
[22:04:09] <Athas> dminuoso: but I still need to clean up, even if an exception is thrown.
[22:04:28] <EvanR> that's what the close clause of the bracket is for
[22:04:29] <dminuoso> Athas: Then use a separate onException internally?
[22:04:36] <monochrom> Athas: bracketOnError or onException may help
[22:04:39] <Athas> I have a cleanup action.  If that cleanup action is run under normal circumstances, it m ay throw an exception.  But if it is running during exception unwinding, then it should never throw an exception.
[22:04:47] <dminuoso> It seems you want two separate exception control mechanisms here
[22:05:07] <Athas> Yeah, I can probably cobble something together myself, but this feels like a problem that's easy to solve incorrectly, so I hoped someone had already done so.
[22:05:28] <dminuoso> Hah, what could possibly go wrong *uninterruptibleMumble*
[22:06:09] <monochrom> Indeed onException seems to be a more basic building block. bracket uses onException.
[22:06:14] <[exa]> Athas: maybe your exceptions are so streamlined that they shouldn't be exceptional anymore
[22:07:21] <monochrom> (And bracket achieves release-no-matter-what by repeating itself: on exception, release; on no exception, release.
[22:07:23] <monochrom> )
[22:07:56] <monochrom> (What an irony that when I explain bracket I forgot to a close parenthesis heh)
[22:07:56] <EvanR> exceptions possibly during cleanup is nasty business
[22:08:30] <EvanR> this is probably why cleanup functions in C never return anything or fail
[22:08:32] <Athas> It is.
[22:08:48] <Athas> My only goal is to not clobber the message from the original exception.
[22:08:59] <Athas> And the process as a whole will likely be dying soon afterwards.
[22:12:54] <maerwald> do we have a strpbrk wrapper for bytestring?
[22:13:41] *** Joins: DavidMilestone (~DavidMile@122.179.237.116)
[22:13:54] <dminuoso> Mmm, not in any of the common packages
[22:14:07] <dminuoso> But you can trivially FFI against this one yourself I suppose
[22:14:42] *** Joins: alp (~alp@user/alp)
[22:15:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:15:33] *** Joins: alx741 (~alx741@157.100.197.240)
[22:16:30] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[22:17:04] *** Joins: acidsys (~LSD@2.lsd.systems)
[22:18:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:19:57] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[22:21:51] <maerwald> I'd assume that's much faster than BS.find?
[22:23:34] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[22:23:53] <dminuoso> BS.find is very different from strpbrk?
[22:24:51] <dminuoso> Did you mean breakSubstring perhaps?
[22:24:58] <monochrom> findIndex is closer. But then there is also the question of, for example, perhaps you use strpbrk but you dereference its answer right away so it's find.
[22:25:03] <dminuoso> Or, no not quite
[22:25:20] <EvanR> findIndex seems to be a tight loop that just does peekPtr. Does peeking entail a barrier of some sort
[22:25:56] *** Joins: econo (uid147250@user/econo)
[22:26:08] *** Quits: ubert1 (~Thunderbi@p200300ecdf0994a1946b5f66cf92c0df.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:26:34] <dminuoso> I guess whether strpbrk is faster than find or findIndex depends on the size of the conceptual character set
[22:26:36] <EvanR> it does a call to an unknown function, but inlining
[22:27:03] <dminuoso> If the character set is large, Id profile it - if its really small, Id profile it, but between strpbrk seems like it could be faster
[22:27:42] <dminuoso> Guess strpbrk can benefit from locality of cache well
[22:28:03] <maerwald> https://github.com/bminor/glibc/blob/master/string/strcspn.c
[22:28:26] <maerwald> strpbrk is implemented in terms of that
[22:28:38] *** Joins: vicfred (~vicfred@user/vicfred)
[22:28:58] *** Joins: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com)
[22:29:45] <maerwald> https://github.com/bminor/glibc/commit/d3496c9f4f27d3009b71be87f6108b4fed7314bd#diff-32ea539240c540597118f53189a64f50d65891dc0e5abfaa033c121f0d2322b1
[22:30:08] <maerwald> this looks more sophisticated than a dumb for loop
[22:30:09] <dminuoso> Yeah this will definitely execute fast. Seems like this could vectorize, will induce implicit cache prefetching
[22:30:38] <dminuoso> I doubt the bytestring code, after going through core, cmm, and then assembly will get anything close enough,.
[22:30:54] <maerwald> looks like an easy win then
[22:31:01] <dminuoso> Do you pay any penalty for FFI though?
[22:31:08] <dminuoso> Is there any RTS cost involved?
[22:32:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[22:33:54] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 2.9)
[22:34:34] <monochrom> FFI has a cost, even when no marshalling.
[22:35:23] <EvanR> FFI cost in this case might be worth it since it could be doing significant work on the other side
[22:35:44] <monochrom> Mostly in worrying about concurrency so there is some context switching and "this thread can't run Haskell code now, need to find another thread for that".
[22:36:31] <EvanR> in before we do a deep dive on this optimization and maerwald finally decides the original task isn't even necessary anymore xD
[22:36:55] <maerwald> this is definitely necessary
[22:36:57] <monochrom> I wouldn't be surprised if the input size is too small for "performance" to matter.
[22:37:10] *** Joins: alx741 (~alx741@157.100.197.240)
[22:37:17] <maerwald> the input size large
[22:37:23] <maerwald> in an XML parser
[22:37:35] <maerwald> a fork of xeno
[22:38:02] *** Joins: MatthiasG2 (~matthias@i6DFA038C.versanet.de)
[22:38:27] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[22:38:34] <dminuoso> Honestly, sometimes performance golfing is a lot of fun.
[22:38:55] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[22:38:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:39:06] <dminuoso> I too performance-shedded my DNS parsing library, despite only needing to match against.. 3 domain names right now
[22:39:25] <dminuoso> But I feel confident in that we can scale to millions with no heavy performance penalty
[22:40:28] <EvanR> I too going down a performance hole, esp the last hole at goofy golf which just keeps going and you never get your ball back
[22:40:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:40:30] <monochrom> "Hi I'm reading a domain name that's 1MB long, why is Haskell taking 50MB?"
[22:40:33] <EvanR> enjoy*
[22:41:27] <monochrom> I enjoy the opposite golfing.
[22:41:56] <monochrom> I use an n^2 algorithm where an n lg n algorithm exists, where n is the number of students.
[22:42:26] <monochrom> My solution is to make homework and exams hard to decrease n. >:)
[22:43:20] <EvanR> asymptotically inefficient and slow algorithms for fun and profit, get to market today while the egg heads tool around in research
[22:44:49] <dminuoso> Given the influx of asymptotically inefficient implementations nowadays, I ponder about monochrom's part on that.
[22:44:59] <dminuoso> Perhaps his pedagogy is misguided.
[22:45:10] <monochrom> haha
[22:46:20] <monochrom> Don't worry, some of my homework questions are hard precisely because "you have a 2-second limit, if you don't stay below n lg n you won't make it".
[22:46:45] <monochrom> "also in a docker container that has only 10MB RAM"
[22:46:45] <maerwald> I guess I know now why it wasn't implemented... strpbrk requires a null terminated string
[22:46:58] <maerwald> bytestring internally is not null terminated
[22:47:29] *** Joins: Pickchea (~private@user/pickchea)
[22:47:46] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[22:47:47] <monochrom> Ah I forgot the null too.
[22:48:01] *** Quits: DavidMilestone (~DavidMile@122.179.237.116) (Quit: Client closed)
[22:48:18] <monochrom> But breakSubstring is some kind of strcspn.
[22:48:21] <EvanR> indeed '\0' is allowed in the body of a bytestring, luckily for general sanity
[22:48:33] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[22:50:26] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[22:50:46] <EvanR> but your loader might be modified to produce null terminated bytestring if inner 0 are not expected
[22:53:27] <maerwald> dreams crushed by a single byte
[22:53:57] <monochrom> Perhaps look for a Fortran library instead of a C library...
[22:54:43] <EvanR> can we FFI to fortran?
[22:55:10] <dminuoso> Absolutely
[22:55:14] <EvanR> nice
[22:55:24] <monochrom> Yes, it's indistinguishable from FFIing to C.
[22:55:25] <dminuoso> e.g. hmatrix
[22:55:33] <monochrom> Yeah, that. LAPACK.
[22:55:34] <dminuoso> Which FFIs into BLAS/LAPACK
[22:56:00] *** Joins: janus (janus@anubis.0x90.dk)
[22:56:45] <janus> regarding this line, since Typeable is derivable for all types, there can be an instance for all types, right: https://github.com/GetShopTV/swagger2/blob/master/src/Data/Swagger/Internal.hs#L473
[22:57:00] <janus> but then why does it fail compilation: https://github.com/GetShopTV/swagger2/runs/5055866820?check_suite_focus=true#step:4:668
[22:57:17] *** Joins: DavidMilestone (~DavidMile@122.179.237.116)
[22:57:23] <janus> "Could not deduce (Typeable t)" why not? you should deduce typeable for any t
[22:58:05] <EvanR> not literally everything is typeable right
[22:58:20] <EvanR> the universe has grown but isn't complete
[22:58:21] <ski> not skolems
[22:58:47] *** Joins: alx741 (~alx741@157.100.197.240)
[22:59:36] <dminuoso> Or what about non-* kinded types?
[23:00:23] <awpr> it's not about _whether_ a Typeable can exist for a given type, it's about GHC needing to _have_ the Typeable instance for a given type.  GHC can produce an instance on demand for any non-variable type (other than like foralls and other things that can't have typeclass instances).  but if you need an instance for a type variable, it'll have to be passed in from somewhere
[23:00:24] *** Quits: DavidMilestone (~DavidMile@122.179.237.116) (Client Quit)
[23:00:29] <dolio> Isn't it kind polymorphic not?
[23:00:31] <dolio> Now, even.
[23:00:47] <EvanR> > typeOf 4#
[23:00:48] <lambdabot>  error:
[23:00:48] <lambdabot>      • Couldn't match a lifted type with an unlifted type
[23:00:48] <lambdabot>        When matching types
[23:01:20] <awpr> > typeRep @Int#
[23:01:21] <lambdabot>  error:
[23:01:21] <lambdabot>      Pattern syntax in expression context: typeRep@Int#
[23:01:21] <lambdabot>      Did you mean to enable TypeApplications?
[23:01:22] <janus> a skolem is skolem means 'skolem variable' in this context? like you can't get a Typeable if you don't know which type it actually is? like here? https://stackoverflow.com/a/12722877/309483
[23:01:32] <dminuoso> dolio: Could you even make use of that somehow?
[23:01:45] <janus> dminuoso: like e.g. 'Maybe' ?
[23:02:01] <awpr> % typeRep @Maybe Proxy
[23:02:01] <yahb> awpr: ; <interactive>:9:16: error:; * Couldn't match expected type: Maybe a0; with actual type: Proxy t0; * In the second argument of `typeRep', namely `Proxy'; In the expression: typeRep @Maybe Proxy; In an equation for `it': it = typeRep @Maybe Proxy
[23:02:11] <dminuoso> One argument too many
[23:02:13] <dminuoso> % typeRep @Maybe
[23:02:13] <yahb> dminuoso: ; <interactive>:10:1: error:; * No instance for (Show (Maybe a0 -> TypeRep)) arising from a use of `print'; (maybe you haven't applied a function to enough arguments?); * In a stmt of an interactive GHCi command: print it
[23:02:18] <dminuoso> That looks better
[23:02:19] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:02:24] <awpr> % typeRep @_ @Maybe Proxy
[23:02:24] <yahb> awpr: Maybe
[23:02:30] <awpr> % typeRep @_ @42 Proxy
[23:02:31] <yahb> awpr: 42
[23:03:00] <EvanR> % typeRef @_ @Int# Proxy
[23:03:00] <yahb> EvanR: ; <interactive>:13:1: error:; * Variable not in scope: typeRef :: Proxy t0 -> t; * Perhaps you meant one of these: `typeRep' (imported from Data.Data), `typeOf' (imported from Data.Data)
[23:03:08] <EvanR> % typeRep @_ @Int# Proxy
[23:03:08] <yahb> EvanR: Int#
[23:03:19] *** Quits: affine (~hugh@2a02:1206:45a3:6340:da01:c0c6:8610:80f6) (Remote host closed the connection)
[23:04:05] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:04:25] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:05:01] *** Joins: cynomys (~cynomys@user/cynomys)
[23:05:55] *** Joins: Morrow_ (~user@bzq-110-168-31-106.red.bezeqint.net)
[23:05:59] <janus> so if typeRep does't error, that should mean that it finds the Typeable instance. so it seems that even though the type inside the maybe isn't found, there is still a Typeable instance
[23:06:45] <janus> so not all non-* kinded types have no auto-derived Typeable, i guess
[23:06:57] <awpr> not sure what "type inside the maybe" is, but `Maybe` is a thing of kind `Type -> Type`, and GHC can solve a `Typeable` for it
[23:07:26] <monochrom> No, in the "typeRep @_ @Maybe Proxy" example, the "Maybe" is there as an example for a *->* kinded type.  This is not "typeRep @_ @(Maybe ???) Proxy".
[23:07:44] <monochrom> The type of Proxy there is literally "Proxy Maybe". Not "Proxy (Maybe ???)".
[23:07:56] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:07:59] <monochrom> See also the 42 example.
[23:08:32] <janus> oh, it didn't even occur to me that 'Proxy Maybe' would even be a well-formed type :O
[23:08:36] <monochrom> All of those examples are exploring non-* kinds.
[23:09:49] <ski> janus : typical term would be "skolem constant (or function)", but yea
[23:10:17] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[23:10:45] <ski> "rigid variable" is another term used. other, relevant, words would be opaque/unknown/hidden/forgotten/abstract
[23:11:25] <monochrom> May I throw in "existential strength" there? :)  Not that it helps.
[23:12:01] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[23:12:19] <dminuoso> Does prettyprinter have some mechanism to lpad/rpad that Im not seeing?
[23:12:36] <ski> janus : the `Typeable a' instance (a dictionary record, in the dictionary passing implementation), needs to come from somewhere. if you have an existential, then you have no way (in general) of recovering what type was hidden inside it, and so the only way to get `Typeable' is to have it packed into / provided in a constraint in the existential
[23:12:50] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:13:10] <dminuoso> It seems the best thing to do is use `width` and do it somehow manually
[23:13:17] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[23:13:18] <dminuoso> Perhaps Im missing some other combinator?
[23:13:40] <EvanR> I wonder if school math would be easier if there was distinction between rigid variables and uhm the other kind, i.e. solve for x in x^2 = x + 1
[23:13:54] <monochrom> I think all pretty printer designs we have are around indenting and hanging, they haven't thought of padding.
[23:14:17] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:14:39] <janus> yes, especially with the infamous dictionary i can understand how the compiler needs to 'deduce' which dictionary to actually pass in
[23:14:56] <monochrom> EvanR, I think they do, and I think they mess it up.
[23:15:08] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:15:27] <monochrom> Well, not messed up in the simpleton questions that appear in school homework.
[23:16:01] <ski> EvanR : logic programming does make that a syntactical distinction
[23:16:05] <janus> talking about a partially-applied Maybe doesn't seem like Haskell98 to me. but it doesn't seem like DataKinds either since there are no ticks
[23:16:09] <janus> when was all this introduced?
[23:16:32] <ski> higher-order types is Haskell98
[23:16:42] <awpr> Haskell98.  `Maybe Int` talks about partially-applied `Maybe` as a subterm :)
[23:16:44] <monochrom> In "solve for x in x^2 = x + 1" it's taught (more like osmosised) we have an unknown. In "prove x+x = 2x" it's taught (ditto) we have a universal-strength variable.
[23:17:34] <janus> but then, if it is just concerning Haskell98, how can it be that the Swagger2 file i linked compiles in GHC 9.0 but not in 9.2? surely Haskell98 details havn't changed
[23:17:41] <awpr> also `instance Monad Maybe` talks about partially-applied `Maybe`
[23:17:41] <ski> `Fix Maybe' is perfectly Haskell98
[23:17:58] <monochrom> They don't really try "solve for x in x^2 = y + 1 so that the solution works for all y" or "prove there exists x such that for all y ..." so they can PCA the whole space to just "solve = unknown, prove = universal".
[23:18:03] <ski> or `Fix (Either Integer)', for that matter
[23:18:12] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:cc4:c954:b25:db0a) (Quit: Leaving)
[23:18:47] <janus> oh right, my missing 'MonadFail (Either String)' instance, that is the same situation, right
[23:18:48] *** Joins: alx741 (~alx741@157.100.197.240)
[23:18:53] <ski> (oh, there's also the term "indeterminate")
[23:19:32] <awpr> hmm, I didn't actually look at the error.  it's weird that this is happening when there seemingly _is_ a `Typeable` constraint there.  feels like GHC is unconvinced that the two `t`s are the same
[23:21:09] <janus> but it really could have something to do with DataKinds, couldn't it? because the deducing machinery that suceeded previously, and now fails, it needs to go through a lifted type
[23:21:35] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:21:47] <dminuoso> monochrom: Mmm, it seems that `column` and `width` at least let me do limited rpadding.
[23:21:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:21:49] <dminuoso> I think those could suffice.
[23:21:49] <janus> but that it of course unrelated to the ability to talk about indeterminate types
[23:22:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:23:31] <awpr> on 478, where is `t` even coming from?  there is no `t` there, unless it's implicit via PolyKinds?
[23:24:32] <awpr> this kinda feels like a compiler bug to me.  it's like GHC is coming up with a variable for the parameter of `SwaggerType` and forgetting to unify it with the corresponding thing in the instance head
[23:25:16] <janus> awpr: PolyKinds is not enabled as far as I can see. i don't think it's implied by any of these extensions
[23:25:29] <awpr> yeah, doesn't appear to be enabled
[23:25:59] <monochrom> If there is a difference between 9.0 and 9.2 for this, this can get interesting. There is some known change, yes.
[23:26:09] <ski> smells like missing an FD, or a type ascription or so ?
[23:26:24] <awpr> complete shot in the dark: what happens if you remove the "deriving Typeable"?  it's solved automatically on demand and doesn't need to be derived
[23:26:39] <awpr> and maybe the deriving is doing something weird?
[23:27:33] *** Joins: deadmarshal (~deadmarsh@95.38.119.14)
[23:27:34] <awpr> re: missing fundeps, the reason this feels so weird to me is that in the instance on line 478, there shouldn't be any type variable involved at all
[23:27:45] *** Joins: vglfr (~vglfr@88.155.40.186)
[23:28:11] * ski has no idea what code we're talking about, fwiw
[23:28:13] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[23:28:13] *** Quits: Morrow_ (~user@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[23:28:31] <janus> ski: https://github.com/GetShopTV/swagger2/blob/master/src/Data/Swagger/Internal.hs#L473
[23:30:11] <janus> monochrom: it does compile and pass the test suite on 9.0.2 (even though CI doesn't verify that). just tested it.
[23:30:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:30:12] <ski> hm, is there any raw link ? (not on a gui browser atm)
[23:30:35] <janus> ski: yes: https://raw.githubusercontent.com/GetShopTV/swagger2/master/src/Data/Swagger/Internal.hs (line 473)
[23:31:23] <awpr> oh, there is a type variable
[23:31:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[23:31:50] <awpr> `SwaggerKindParamOtherSchema :: SwaggerKind t` has an invisible kind variable
[23:32:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[23:32:29] <janus> oh, so does that mean that line 432 "deriving instance Typeable 'SwaggerKindParamOtherSchema" is incorrect?
[23:32:59] <janus> because it should derive forall t?
[23:33:28] <awpr> I'm not sure how far back GHC compat is supposed to go in this codebase, but on modern GHCs that declaration is redundant at best
[23:33:50] <janus> oh, so you were proposing removing 429 thorugh 433? i'll try that
[23:34:03] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:34:04] <awpr> I don't think it'll fix things, I think it'll have no effect
[23:34:39] <awpr> a new shot in the dark: maybe 9.2 changed Typeable s.t. it needs to represent the type's kind as well, and that makes the implicit kind variables need Typeable instances too?
[23:34:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[23:35:13] <janus> lol , removing those lines actually worked! o_O
[23:35:20] <awpr> it ... fixed it?
[23:35:34] <janus> yesssss :D hähä
[23:35:49] <EvanR> more code more problems
[23:36:07] <janus> so ghc devs didn't think of testing it because they wouldn't have silly code like that laying around?
[23:36:29] *** Quits: kristjansson (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[23:36:41] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: Reconnecting)
[23:36:42] <awpr> I didn't see those instances.  I think it seems plausible that they would interfere with instance resolution somehow
[23:36:46] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:53] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[23:37:56] <janus> well i won't report a bug because i don't really know how instance deduction is supposed to work here.
[23:38:14] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[23:38:17] <janus> but usually it is safe to remove instances, and if it compiles, nothing could have been broken
[23:38:28] <awpr> with PolyKinds disabled, that might actually be `instance Typeable ('SwaggerKindSchema @Type)`, which might prevent GHC from solving other instances
[23:38:32] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:38:32] <janus> though i suppose that assumption is not valid for this file since it has UndecidableInstances...
[23:38:40] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Client Quit)
[23:38:45] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[23:39:33] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[23:39:57] <awpr> it might be worth filing a bug anyway, but it's more of "I managed to make something weird and confusing happen by manually deriving Typeable instances, maybe this should be a warning or have better errors" rather than "the compiler was wrong"
[23:40:01] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[23:40:11] *** Joins: briandaed (~root@109.95.143.81.r.toneticgroup.pl)
[23:40:27] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[23:40:39] *** Joins: alx741 (~alx741@157.100.197.240)
[23:41:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:41:42] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[23:43:43] <janus> i'll see if i can boil it down. in any case, thanks a lot awpr!
[23:43:47] <janus> (and others)
[23:44:22] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:46:57] *** Quits: emf (~emf@163.114.132.7) (Ping timeout: 240 seconds)
[23:47:02] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[23:50:17] *** Joins: emf (~emf@2620:10d:c090:400::5:e4c1)
[23:51:38] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[23:54:12] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[23:54:46] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11)
[23:57:37] *** Joins: yauhsie__ (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[23:58:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:58:48] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[23:59:22] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:340a:21f3:9185:5e11) (Remote host closed the connection)
