[00:02:59] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[00:04:25] *** Joins: nckx (~nckx@tobias.gr)
[00:17:07] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Ping timeout: 252 seconds)
[00:17:52] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[00:22:42] <pl> Guix is lispier and probably easier to write for, but it makes Debian look non-free if you catch my drift
[00:24:20] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[00:26:23] *** Joins: silasfox (~sbv@xdsl-84-44-182-29.nc.de)
[00:27:12] <mason> pl: There's nonguix.
[00:30:06] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[00:32:21] <shka> pl: the savage freedom!
[00:40:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[00:47:38] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:54:56] *** Quits: utis (~utis@84.208.165.160) (Ping timeout: 256 seconds)
[00:55:09] *** Joins: utis (~utis@vpn-client385.uio.no)
[01:00:34] *** Quits: utis (~utis@vpn-client385.uio.no) (Ping timeout: 252 seconds)
[01:02:11] *** Joins: utis (~utis@84.208.165.160)
[01:02:52] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 256 seconds)
[01:16:31] *** Quits: utis (~utis@84.208.165.160) (Ping timeout: 252 seconds)
[01:16:31] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Ping timeout: 252 seconds)
[01:16:43] *** Joins: utis (~utis@vpn-client275.uio.no)
[01:17:45] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:25:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:25:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[01:28:21] *** Lord_of_Life_ is now known as Lord_of_Life
[01:28:21] *** Quits: pve (~pve@178-55-87-118.bb.dnainternet.fi) (Quit: leaving)
[01:33:21] *** Joins: khoa (~khoa@user/khoa)
[01:37:10] *** Quits: gaqwas (~john@dynamic-095-115-144-131.95.115.pool.telefonica.de) (Ping timeout: 240 seconds)
[01:41:04] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[01:50:52] *** Quits: utis (~utis@vpn-client275.uio.no) (Quit: leaving)
[01:52:11] *** Quits: dra (~dra@2a04:4540:640e:9b00:5a7:7a68:df84:eb4e) (Quit: Leaving)
[02:00:38] *** Joins: Alfr (~Alfr@user/alfr)
[02:05:20] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Quit: WeeChat 3.2)
[02:05:29] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[02:08:36] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[02:10:19] <scymtym> progress on ffi-free wayland protocol implementation: https://techfak.de/~jmoringe/wayland-protocol-1.ogv
[02:13:40] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[02:14:19] *** Joins: montxero (~user@149.167.149.74)
[02:26:50] *** Joins: cyberbanjo (~malik@2607:fb90:4287:39ea:6c14:1818:e14:20a7)
[02:30:13] *** Quits: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 252 seconds)
[02:30:13] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 252 seconds)
[02:35:28] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[02:38:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:39:06] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:48:15] *** Joins: semz (~none@user/semz)
[02:49:30] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:57:34] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[02:58:01] *** Joins: dra (~dra@2a04:4540:640e:9b00:cc6b:9d67:9237:28f8)
[03:08:22] *** Joins: cjb (~cjb@user/cjb)
[03:17:25] *** Joins: X-Scale` (~ARM@128.229.28.37.rev.vodafone.pt)
[03:18:34] *** Quits: X-Scale (~ARM@238.72.108.93.rev.vodafone.pt) (Ping timeout: 240 seconds)
[03:18:42] *** X-Scale` is now known as X-Scale
[03:41:42] *** Joins: dra_ (~dra@2a04:4540:640b:5900:cc6b:9d67:9237:28f8)
[03:43:54] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b016:723d:fc9f:63a9:639e:eb87) (Quit: Leaving)
[03:44:10] *** Quits: dra (~dra@2a04:4540:640e:9b00:cc6b:9d67:9237:28f8) (Ping timeout: 240 seconds)
[03:45:10] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:52:01] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[04:00:30] *** Joins: notzmv (~zmv@user/notzmv)
[04:02:22] *** Quits: dra_ (~dra@2a04:4540:640b:5900:cc6b:9d67:9237:28f8) (Remote host closed the connection)
[04:12:45] *** Joins: Volt (~Volt@c-73-145-161-51.hsd1.mi.comcast.net)
[04:14:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[04:14:38] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:15:06] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[04:18:52] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 245 seconds)
[04:23:50] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:25:32] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[04:25:37] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[04:25:49] *** Joins: silasfox (~sbv@xdsl-84-44-182-29.nc.de)
[04:50:54] *** Quits: montxero (~user@149.167.149.74) (Remote host closed the connection)
[04:55:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[05:06:40] *** Quits: random-nick (~random-ni@87.116.180.118) (Ping timeout: 240 seconds)
[05:12:25] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[05:26:35] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[05:33:57] <pl> scymtym: I'd argue that Wayland's original sin was designing it without first getting DCOM ported ;-)
[05:53:20] *** Joins: cyberbanjo_ (~malik@d192-24-236-120.try.wideopenwest.com)
[05:54:10] *** Quits: cyberbanjo (~malik@2607:fb90:4287:39ea:6c14:1818:e14:20a7) (Ping timeout: 240 seconds)
[05:59:46] *** Quits: char (~charles@2600:1700:59e0:bc90:8cad:7d7a:1072:feef) (Ping timeout: 252 seconds)
[06:16:41] *** Joins: Fare (~fare@2601:184:4a7f:995c:acb1:38fe:8331:d9cb)
[06:17:55] *** Quits: molson (~michael@2001-48F8-704A-CA1-0-0-75F-1007-static.midco.net) (Ping timeout: 252 seconds)
[07:01:36] *** Joins: cyberbanjo (~malik@2607:fb90:4222:17a9:5f8a:c04b:188e:b6cb)
[07:04:44] *** Quits: cyberbanjo_ (~malik@d192-24-236-120.try.wideopenwest.com) (Ping timeout: 252 seconds)
[07:16:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[07:33:35] <beach> Good morning everyone!
[07:34:04] <beach> scymtym: Looks great!
[07:44:42] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 245 seconds)
[07:49:09] *** Joins: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net)
[08:03:47] *** Joins: cjb (~cjb@user/cjb)
[08:07:26] *** Quits: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net) (Ping timeout: 252 seconds)
[08:07:58] *** Quits: raeda (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[08:16:43] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[08:30:09] *** Joins: semz (~none@user/semz)
[08:38:47] *** Joins: karlosz (~karlosz@12.196.174.98)
[08:40:59] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:00:00] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[09:00:53] *** Joins: amb007 (~a_bakic@37.37.22.93.rev.sfr.net)
[09:06:48] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (*.net *.split)
[09:06:48] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[09:06:56] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[09:07:44] *** Joins: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt)
[09:11:15] *** Quits: fishfinger (~fishfinge@178.62.22.133) (*.net *.split)
[09:11:15] *** Quits: jemoka_ (~jemoka@user/jemoka) (*.net *.split)
[09:11:15] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[09:11:15] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[09:11:15] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (*.net *.split)
[09:11:15] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:11:15] *** Quits: victor (sid208353@user/victor) (*.net *.split)
[09:11:15] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:11:27] *** Joins: gabc (~gabc@user/gabc)
[09:11:31] *** Joins: fishfinger (~fishfinge@178.62.22.133)
[09:11:48] *** Joins: victor (sid208353@user/victor)
[09:11:49] *** Joins: danieli (~danieli@user/danieli)
[09:11:49] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:11:54] *** Joins: jemoka (~jemoka@user/jemoka)
[09:12:10] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[09:13:04] *** Joins: jdz (~jdz@185.23.160.114)
[09:24:28] *** Joins: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de)
[09:27:14] *** Quits: d_run (sid83858@stonehaven.irccloud.com) (*.net *.split)
[09:27:14] *** Quits: rtoy (~Thunderbi@c-67-188-80-9.hsd1.ca.comcast.net) (*.net *.split)
[09:27:14] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (*.net *.split)
[09:27:14] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[09:27:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:27:14] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[09:27:15] *** Quits: _death (~death@adeht.org) (*.net *.split)
[09:27:26] *** Joins: ck_ (~ck@plskthx.org)
[09:27:31] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[09:27:33] *** Joins: d_run (sid83858@id-83858.stonehaven.irccloud.com)
[09:28:21] *** Joins: luis (~luis@lisp/luis)
[09:28:29] *** ChanServ sets mode: +o luis
[09:28:36] *** Joins: rtoy (~Thunderbi@c-67-188-80-9.hsd1.ca.comcast.net)
[09:28:45] *** Joins: hexology (~hexology@user/hexology)
[09:29:34] *** Joins: adeht (~death@adeht.org)
[09:31:19] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[09:34:16] *** Quits: Fare (~fare@2601:184:4a7f:995c:acb1:38fe:8331:d9cb) (Ping timeout: 252 seconds)
[09:46:31] *** Joins: Fare (~fare@2601:184:4a7f:995c:6d80:6082:f3cc:8cf9)
[09:50:52] *** Quits: amb007 (~a_bakic@37.37.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[09:52:15] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:55:15] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[09:55:25] *** Joins: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[10:02:17] *** Quits: Fare (~fare@2601:184:4a7f:995c:6d80:6082:f3cc:8cf9) (Quit: Leaving)
[10:04:41] *** Joins: amb007 (~a_bakic@20.13.23.93.rev.sfr.net)
[10:17:55] *** Quits: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de) (Ping timeout: 260 seconds)
[10:20:47] *** Joins: karlosz (~karlosz@12.196.174.98)
[10:25:27] *** Quits: karlosz (~karlosz@12.196.174.98) (Client Quit)
[10:26:02] *** Joins: karlosz (~karlosz@12.196.174.98)
[10:30:42] *** Quits: karlosz (~karlosz@12.196.174.98) (Client Quit)
[10:39:04] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:39:06] <Qwnavery> list
[10:40:02] *** Joins: pve (~pve@178-55-69-143.bb.dnainternet.fi)
[10:50:13] *** Quits: amb007 (~a_bakic@20.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:51:01] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:01:25] *** Joins: shka (~herr@109.231.62.239)
[11:02:18] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:08:43] *** Joins: heisig (~heisig@31.32.114.1)
[11:15:11] *** Quits: Volt (~Volt@c-73-145-161-51.hsd1.mi.comcast.net) (Quit:  )
[11:20:16] <pve> Hi! I was looking at eclector and thought I would try to make a simple way of "enabling" it in my code.
[11:20:27] <pve> here it is: https://github.com/pve1/eclector-access
[11:21:09] <pve> But I'm wondering if this approach has any dangerous pitfalls
[11:21:42] <moon-child> you mean using eclector in place of the implementation's reader?  Why, out of curiosity?
[11:21:53] <pve> basically it sets up a readtable where all standard-characters (by default) redirect to an eclector client
[11:22:37] <pve> moon-child: Why, out of curiosity! :)
[11:23:13] <moon-child> :)
[11:23:26] <pve> moon-child: jokes aside, I was wondering if lukego's adventures with greek letters could be handled with eclector
[11:23:34] *** Quits: heisig (~heisig@31.32.114.1) (Quit: Leaving)
[11:26:03] <lukego> I don't quite have a mental model for projects like Eclector that do a new portable implementation of what's normally a primitive, like the reader. Is it something for random projects to use as a dependency? Or something for SICL? Or something to be adopted by SBCL etc in the future? Or if more than one then what are the weights?
[11:26:24] <pve> moon-child: also I'm working on a smalltalk-like language, and I think eclector could help me
[11:26:56] <lukego> I immediately worry that plugging a new reader into an existing compiler like SBCL will end up having complications, e.g. source location tracking behaving differently, but I don't know if that's founded.
[11:27:07] <beach> lukego: It was spun off from the SICL reader.  But it exists partly because for Second Climacs we need to also return skipped material like comments, and Eclector allows that.
[11:27:10] <moon-child> lukego: yes, it is intended to be used by cl implementations
[11:27:24] <moon-child> oh, yes, also editors.  I should not speak out of turn :P
[11:27:32] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:27:36] <beach> lukego: Furthermore, it allows you to avoid calling INTERN and you can control how tokens are made.
[11:28:03] <lukego> So it's not especially aimed at application/library programmers then?
[11:28:14] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:28:31] <beach> The Second Climacs application is an example of that, no?
[11:29:15] <beach> lukego: But it could also be used as the native reader of a new (or existing) Common Lisp implementation, for people who want to decrease the maintenance burden.
[11:29:19] <lukego> well, not in the sense I meant, since the application is using it to parse Lisp code, rather than using it to compile the application's own code
[11:29:45] <lukego> So quite different from my use case of just wanting to tweak the behavior of the reader for compiling my own application code.
[11:29:53] <beach> I see.  Right, it is not a general parser for any application input.
[11:30:33] <beach> lukego: It is also different from what you want since you stated that you are interested specifically in how the SBCL reader works.
[11:30:37] <lukego> okay, so for my application it seems like Eclector would come into the picture if SBCL would adopt it as the native reader one day, or if I would swtch from SBCL to SICL
[11:31:03] <beach> For SICL, you won't have a choice.  It's Eclector or nothing.
[11:31:29] <lukego> until someone invents an Even Better portable reader to plug into SICL ;-)
[11:31:38] <beach> I think Clasp uses Eclector, at least in later stages of the system, since Eclector can track source information too.
[11:32:29] <beach> That was another reason for creating it.  It can wrap S-expressions in standard objects that store information about source location.
[11:32:48] <beach> All that in an implementation-independent way.
[11:32:54] <lukego> but yeah I'm keen to find excuses to dig into the SBCL code. Many years ago I kind-of understood how source location tracking worked in CMUCL and I know that it's misfiring in obvious ways on my own computer (lots of off-by-ones on top level forms when I `M-.' into SBCL internals.) Maybe once I understand that code better I'll be able to relate it to Eclector & see its potential as a reader for SBCL.
[11:34:26] <lukego> I haven't internalized what "implementation-independent" really means in this context though. I mean, if you use Eclector as the reader for your compiler, then that is kind of adopting it into your implementation, right? I get lost on this stuff, like with "bare metal" OS that target QEMU etc.
[11:37:09] <moon-child> an implementation might have its own utility functions which the reader uses.  Then it would be difficult to separate the reader from the rest of the implementation and use it as a library.  In either case, the reader is not provided _as_ a library
[11:38:19] <lukego> Seems like a jolly good project in any case :) I can absolutely see the value of modular implementations of major parts of a Lisp system, both for development of new Lisps and maintenance of old ones
[11:39:24] <lukego> Just less obvious how to use it. shades of "it's simple, I'm just running a GNU userspace on a FreeBSD kernel in a Linux container hosted in a Xen VM"
[11:40:23] <lukego> but I know that other people's brains are better at this stuff, as evidenced by people figuring out how to bootstrap systems in good ways and so on :)
[11:42:25] <pve> anyway, I'm pretty happy with how easily eclector lets me make a "file-local package nicknames" reader, by basically defining one method
[11:42:41] <pve> https://github.com/pve1/eclector-access/blob/master/examples/package-nicknames-test.lisp
[11:42:57] <pve> just a toy example, but still
[11:44:39] <beach> Nice one!
[11:44:52] <pve> beach: thanks
[11:45:15] <pve> I think allegro's hierarchical packages could be done in the same way
[11:45:31] <beach> Sounds plausible.
[11:49:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:55:01] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:55:11] *** Joins: amb007 (~a_bakic@20.13.23.93.rev.sfr.net)
[11:55:11] *** Quits: amb007 (~a_bakic@20.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:55:42] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:58:06] *** Joins: trevlif (~user@80.227.170.170)
[11:58:12] <trevlif> Hi
[11:58:57] <trevlif> Is this channel active?
[11:59:15] <trevlif> I read online I can ask CL questions here
[11:59:29] <beach> Yes.
[12:00:27] <beach> trevlif: Welcome to #commonlisp.
[12:00:41] <trevlif> Thank you beach.
[12:00:56] <trevlif> Nice to meet you
[12:01:13] <beach> trevlif: If you have a lot of questions, and they turn out to be fairly trivial, you may at some point be redirected to #clschool, but some such question are tolerated here.
[12:01:43] <trevlif> I have one question, which I'm struggling with and the guides were confusing
[12:01:57] <beach> Go right ahead.
[12:02:04] <trevlif> Thanks
[12:03:24] <trevlif> I am trying to understand how read-time works with macro definitions and macro calls. I understand the expansion of a macro and the evaluation of parameters in the macro call via ` and ,. What I don't understand is how read-time works during the initial step of defining a macro with DEFMACRO
[12:04:02] <trevlif> The online specifications for DEFMACRO are very complicated to me unfortunately. For example, why isn't a ",a" in a macro definition, evaluated during the definition of the macro?
[12:04:17] <trevlif> and why is it evaluated during the expansion of a macro call?
[12:04:40] <beach> Read-time is not involved in macro definitions.  The backquote syntax is turned into a macro call by the reader, like (xxx:quasiquote ... (xxx:unquote ...))
[12:05:02] <beach> The ` and , syntax are unrelated to macros.
[12:05:15] <beach> They just happen to be convenient for writing macros.
[12:07:03] <trevlif> Thanks, that is what I suspected. Sorry to bother, but could you expand on "Read-time is not involved in macro definitions.
[12:07:03] <beach> You can think of `(a ,b) as turning into (list 'a b) once the quasiquote macro has been expanded.
[12:07:03] <trevlif> Why is that? Isn't the macro definition being read in?
[12:07:03] <beach> Sure, that much it is involved.
[12:07:04] <beach> If you have say (defmacro m (x) (list 'list x)), the reader will of course turn that into a list.
[12:07:23] <beach> (DEFMACRO M (X) (LIST (QUOTE X)))
[12:08:44] <beach> And if you have (defmacro m (x) `(list ,x)), the reader will turn it into something like (DEFMACRO M (X) (QUASIQUOTE (LIST (UNQUOTE X))))
[12:08:56] <beach> But the responsibility of the reader ends there.
[12:09:31] <trevlif> Why is that?
[12:10:12] <beach> Why does the responsibility of the reader end there?  Because the form has now been turned into an S-expression, and the rest is handled by EVAL.
[12:10:19] <trevlif> Like I get why from a practical perspective, but just curious why X is not being evaluated during the macro definition, but rather the macro expansion
[12:10:47] <trevlif> That makes sense
[12:11:01] *** Joins: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de)
[12:11:10] <trevlif> Is thee another eval during macro expansion?
[12:11:27] <trevlif> (and then another when the actual expanded form is evaluated)?
[12:11:38] <beach> Is your question "How does the system manage to avoid evaluating X..?" or "What is the reason for X not being evaluated?"
[12:12:10] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[12:12:20] <beach> OK, so when EVAL sees a compound form like (operator argument-form ...), it checks what the operator is.
[12:12:22] <trevlif> Sorry as I am a bit confused. I want to know why ,X is being evaluated during macroexpansion and not during the macro definition.
[12:12:31] <beach> If it is a function, the function is called on the evaluated arguments.
[12:12:55] <beach> If it is a macro, the macro function is called on the unealuated arguments, and the result of the macro function is then evaluated again.
[12:13:20] <trevlif> And it is that macro function that evaluates any items that are like ,X?
[12:14:30] <trevlif> That is "macroexpand" right? (or something similar)
[12:14:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:14:50] <beach> I think I described how ` and , work.  They turn into a macro call.  That has nothing to do with macros at all.  You can do (second `(hello ,*print-base*) at the REPL.
[12:14:55] <beach> No need for a macro.
[12:15:25] <beach> `(a , b) is just a more convenient way of expressing (list 'a b).
[12:15:32] <beach> Nothing to do with macros at all.
[12:15:40] *** Joins: vats (~vats@180.149.226.8)
[12:16:10] <beach> It gets a bit more complicated when you have ,@ as well, but the idea is the same.
[12:16:18] <trevlif> Is a macro definition just a list then (with the parameters and other details)?
[12:17:38] <beach> A macro turns into a "macro function".  That macro function takes the entire form, like if the macro call is (m (a b c)), then that list is given to the macro function.  The macro function may or may not use that input to create a new form that is then returned by the macro function.
[12:17:43] <beach> That's all there is to it.
[12:18:07] <beach> EVAL then evaluates that new form in place of the original one.
[12:18:17] <trevlif> Thanks, thats pretty helpful
[12:18:49] <beach> Consider (defmacro m (x) (list 'list 234)).
[12:18:50] <trevlif> I need to connect the dots a bit more, so will have a think. But I can start to see the patterns forming and its starting to make sense (though not fully yet)
[12:19:32] <beach> When you write something like (m hello) then the macro function returns (list 234) as is normal.
[12:19:48] <beach> Then EVAL evaluates that form in place of (m hello).
[12:20:21] <beach> I should not have used LIST twice.  Let me consider a better example...
[12:20:40] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[12:20:48] <beach> (defmacro m (x) (list 'cons 234 111))
[12:20:59] *** Quits: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de) (Ping timeout: 252 seconds)
[12:21:21] <beach> EVAL sees (m hello).  The macro function ignores X and returns the list (cons 234 111).
[12:21:41] <beach> That form is then evaluted in place of (m hello).
[12:21:49] <beach> That's all there is.
[12:22:39] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[12:23:06] <trevlif> And during the macro definition of m, nothing is evaluated yes? It is just storing (list 'cons 234 111) as part of the macro function, to be returned for expansion during a macro call?
[12:24:05] <trevlif> So it doesn't actually generate (cons 234 111) UNTIL eval is called as per your most recent sentence "EVAL sees .... "
[12:24:33] <beach> Right, (defmacro m (x) (list 'cons 234 111)) turns into something like (setf (macro-function 'm) (lambda (form environment) (list 'cons 234 111)))
[12:24:49] <beach> So everything is wrapped in LAMBDA and therefore not evaluated.
[12:25:00] <trevlif> Thank you!
[12:25:10] <trevlif> I think that nearly makes perfect sense
[12:25:17] <beach> Great!
[12:25:44] <trevlif> I will read through a few more times, but at least at this moment, it seems to be sticking
[12:25:54] <trevlif> Thank you for your help, much appreciate
[12:26:01] <beach> Pleasure.
[12:27:08] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[12:29:17] *** Quits: luna-is-here_ (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 245 seconds)
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:40:20] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (Read error: Connection reset by peer)
[12:48:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:50:02] <moon-child> When I first learnt lisp, coming from unix, it took me a while to grok the compilation model.  There is a single lisp image, which contains both the compiler and your code
[12:50:34] <moon-child> Well, it almost seems like unix works that way too.  AFter all, the compiler is a first-class file that operates on first-class files (source code) and produces first-class files (objects)
[12:50:57] <moon-child> But unix is _stratified_.  The values you operate on _in_ your c code are not files, and files are not first-class elements of c
[12:51:05] <moon-child> lisp is not stratified
[12:51:55] <beach> That's an interesting analysis.
[13:04:01] <shka> compilation includes the runtime
[13:04:11] <shka> runtime includes the compilation
[13:04:34] <shka> running lisp process is in effect a self modifying program
[13:04:34] *** Quits: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Read error: Connection reset by peer)
[13:04:55] *** Joins: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[13:04:59] <shka> it is beautiful, it is like lisp itself was living being
[13:06:34] <shka> https://www.wikiart.org/en/m-c-escher/drawing-hands
[13:21:54] *** Quits: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4) (Quit: Leaving)
[13:29:44] <pjb> trevlif: try: (macroexpand-1 '(defmacro m (x) (list 'cons x 456)))
[13:30:30] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:31:21] <beach> pjb: In SBCL, that doesn't work very well, unfortunately.
[13:31:22] <pjb> trevlif: in the result you should find a lambda corresponding to the macro function.
[13:31:40] <pjb> Well, I don't really advise sbcl to newbies…
[13:31:50] <beach> I understand.
[13:32:03] <beach> But we don't know what Common Lisp system trevlif is using.
[13:32:47] <beach> That is one objective with SICL, i.e., have macro expanders expand to something more obvious.
[13:32:56] <pjb> :-)
[13:33:37] <pjb> at least with macroexpand-1.
[13:35:09] <moon-child> pjb: what _do_ you recommend?  Ccl, abcl, and clisp all produce output that seems to be similarly intimidating
[13:35:18] <moon-child> (at least for that particular expansion)
[13:37:59] <trevlif> Thank you! That helps
[13:38:21] <trevlif> Unfortunately I am using SBCL, is there another implementation I should use for bit more meaningful macroexpansions?
[13:39:44] <trevlif> It would be really helpful to get something more meaningful - its hard to follow macroexpansion at times
[13:39:46] <flip214> trevlif: My suggestion is to get used to that bit of noise. SBCL is much better in any other way.
[13:40:24] <flip214> Please note that only CL:DEFMACRO gives that noise - your own macros will be much easier to read!
[13:40:45] <pjb> moon-child: indeed. Often clisp and ccl give better results, but not always. Notably, ccl has a nfunction "fsubr"/special-operator, and clisp has an extension on the cl:function special operator…
[13:40:47] <flip214> especially if you use the convention to have a macro just defer to a function doing the work, which can be easily tested
[13:42:56] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 252 seconds)
[13:48:33] <beach> flip214: How can self-written macros that are defined using DEFMACRO be less noisy than any other macro defined using DEFMACRO?
[13:48:42] *** Joins: heisig (~heisig@109.190.253.16)
[13:51:42] <flip214> beach: (DEFMACRO foo (&body body) `(progn ,@ body)), then macroexpand (via slime or manually) the form (foo 1)
[13:51:55] <flip214> Even in SBCL I get (PROGN 1) as output.
[13:52:12] <flip214> The noise is due to the CL:DEFMACRO expansion, not due to macro expansion ;)
[13:52:21] <beach> flip214: But the situation here was (macroexpand-1 '(defmacro ...))
[13:53:15] <flip214> beach: but why is expanding CL:DEFMACRO so critical?
[13:53:53] <pjb> flip214: it should be pedagogical!
[13:53:54] <beach> Because we (me and pjb) wanted to explain how DEFMACRO turned into a (lambda (form environment)...)
[13:54:43] <flip214> ah, okay. Sorry about my noise, then.
[13:56:33] <trevlif> Thanks, it was very helpful. I was okay with the other parts, but understanding how DEFMACRO worked better helped connect the missing pieces
[13:56:58] <trevlif> I will try CLISP also now, I want to also get into the habit of using multiple implementations
[14:24:37] *** Joins: amk (~amk@109.255.169.126)
[14:28:02] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:37:02] *** Quits: heisig (~heisig@109.190.253.16) (Remote host closed the connection)
[14:37:21] *** Joins: heisig (~heisig@109.190.253.16)
[14:43:05] *** Quits: frgo (~frgo@p200300deef0cee00e1eeb850b2f64327.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:43:32] *** Joins: frgo (~frgo@p200300deef0cee00303f893b13e85cab.dip0.t-ipconnect.de)
[14:48:02] *** Quits: heisig (~heisig@109.190.253.16) (Remote host closed the connection)
[14:48:21] *** Joins: heisig (~heisig@109.190.253.16)
[14:53:32] *** Joins: treflip (~user@95.79.32.99)
[14:59:05] *** Joins: notzmv (~zmv@user/notzmv)
[15:10:58] *** Quits: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 252 seconds)
[15:10:58] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[15:11:10] *** Joins: amb007 (~a_bakic@20.13.23.93.rev.sfr.net)
[15:11:12] *** Quits: heisig (~heisig@109.190.253.16) (Ping timeout: 265 seconds)
[15:12:42] *** Quits: amb007 (~a_bakic@20.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:13:15] *** Joins: amb007 (~a_bakic@20.13.23.93.rev.sfr.net)
[15:13:16] *** Quits: amb007 (~a_bakic@20.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:13:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:13:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:13:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:21:25] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[15:24:18] *** Joins: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[15:30:46] *** Quits: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 252 seconds)
[15:35:58] <lotuseater> (defmacro defmacro ...)
[15:36:28] *** Joins: random-nick (~random-ni@87.116.182.103)
[15:36:49] <shka> yo
[15:37:17] <shka> is uiop/launch-program and wait-process are both thread safe?
[15:37:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:38:06] <lotuseater> trevlif: how long are you now into the journey?
[15:38:22] <shka> by that i mean: can i start process on a one thread, and wait for it to finish on other
[15:40:56] *** Joins: VincentVega (~user@212.241.16.115)
[15:42:15] *** Joins: karlosz (~karlosz@12.196.174.98)
[15:42:22] *** Quits: karlosz (~karlosz@12.196.174.98) (Remote host closed the connection)
[15:42:39] *** Joins: karlosz (~karlosz@12.196.174.98)
[15:52:22] *** Joins: vats (~vats@180.149.226.8)
[16:08:43] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 252 seconds)
[16:13:52] *** Joins: yitzi (~yitzi@172.98.105.250)
[16:22:28] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[16:35:51] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:36:09] *** Joins: vats (~vats@180.149.226.8)
[16:45:25] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:47:26] *** Joins: vats (~vats@180.149.226.8)
[17:03:15] *** Joins: robin (~robin@user/terpri)
[17:06:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:06:49] <jcowan> shka: The Posix man page says: "The wait() function shall suspend execution of the calling thread until status information for one of the terminated child processes of the calling process is available, or until delivery of a signal whose action is either to execute a signal-catching function or to terminate the process. If more than one thread is suspended in wait() or waitpid() awaiting termination of the same process, exactly
[17:06:49] <jcowan> one thread shall return the process status at the time of the target process termination."
[17:07:21] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[17:07:24] <jcowan> So at the Posix level it's safe.
[17:07:48] <shka> jcowan: thanks, but i am seeing thread hanged on wait but exit-code was 0
[17:08:11] <shka> so in uiop it looks like it is not safe
[17:08:18] <shka> no big deal
[17:10:03] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[17:10:34] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 240 seconds)
[17:10:34] *** hhdave_ is now known as hhdave
[17:18:10] <beach> lotuseater: Like this you mean? https://github.com/robert-strandh/SICL/blob/master/Code/Evaluation-and-compilation/defmacro-defmacro.lisp
[17:21:16] <lotuseater> beach: hihi yes ^^ and by the way, i at the weekend i loaded the SICL LOOP module into my SBCL session, works good and now the macroexpands are more readable :)
[17:24:28] <beach> Ah, yes.  Xach has been known to do that in order to check that programs are conforming.
[17:24:59] <beach> In fact, just a few hours ago, I found two violations of the LOOP syntax in a module written by heisig.
[17:25:31] <beach> I sometimes get it wrong myself, so it is good to have a strict implementation of LOOP.
[17:27:19] <shka> macroexpand in sbcl is a fickle mistress
[17:29:06] <beach> lotuseater: This one is amusing too: https://github.com/robert-strandh/SICL/blob/master/Code/Boot/Phase-1/define-defmacro.lisp
[17:29:34] <beach> lotuseater: Later on in the bootstrapping process, the actual definition is loaded.
[17:29:59] <lotuseater> even the other filename defmacro-defmacro.lisp is amusing :)
[17:30:13] <beach> Indeed.
[17:31:44] <lotuseater> okay how to work with environments I'm not aware of
[17:31:57] <beach> You usually can't.
[17:32:44] <lotuseater> but I wrote some lines with heisig last week, it sounded like he is happy for help with sb-simd or other repos
[17:32:54] <lotuseater> okay why not?
[17:34:33] <beach> A typical Common Lisp implementation does not have an explicit representation for the global environment.  It is spread out over the system.  Functions with symbols as names might be kept in a slot in a symbol object.  Method combinations might be stored in a hash table, etc.
[17:35:08] <beach> Type definitions might be in a different hash table, that is a value of a special variable.
[17:36:05] <lotuseater> phew
[17:36:36] <beach> I thought that was pretty messy, so I invented first-class global environments.
[17:36:57] <lotuseater> oh cool
[17:37:57] <beach> http://metamodular.com/SICL/environments.pdf
[17:38:11] <lotuseater> thanks
[17:38:56] <beach> Sure.  Don't feel you have to read it.
[17:39:43] <lotuseater> If you don't feel I could really understand it. :/
[17:41:01] <beach> The paper is not complicated.  It's the idea that someone had to have.
[17:45:08] <lotuseater> but I wanted to read the ~50 pages about petalisp
[17:45:18] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b88b:1406:d882:ba49)
[17:48:17] <beach> That's a good idea!
[17:56:31] *** Parts: trevlif (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[18:00:45] *** Joins: Bike (~Glossina@71.69.170.70)
[18:00:45] *** ChanServ sets mode: +o Bike
[18:03:59] *** Joins: didi (~user@user/didi)
[18:08:51] <didi> I always struggle to decide between &rest or &optional when defining a lambda list that expects a set of objects. For example, (defun fn (&optional list) ...) against (defun fn (&rest list) ...). Calling (fn a b c) is more convenient than (fn '(a b c)), but (apply #'fn list) against (fn list) is not. There is also a limit to the number of arguments a function can have, so (apply #'fn list) is less robust than (fn list).
[18:10:12] <lotuseater> use &optional if you know the number of args and &rest if not exactly
[18:11:05] <lotuseater> but beware Norvig's golden rule, never mix &optional and &key without isolating :)
[18:12:04] <lotuseater> so not (defun foo (&optional a b &key c) ...) but you could use (defun foo ((&optional a b) &key c) ...)
[18:13:14] <lotuseater> and APPLY and FUNCALL are useful in function bodies when, well, applying a function you get as an argument
[18:13:36] *** Quits: frgo (~frgo@p200300deef0cee00303f893b13e85cab.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:13:42] *** Joins: Fare (~fare@2601:184:4a7f:995c:9071:7ad8:22e6:da4c)
[18:16:17] <lotuseater> &optional gives you the additional power for having initforms to the arguments like with &key
[18:16:37] <Xach> lotuseater: you cannot use (defun foo ((&optional a b) &key c) ...). Perhaps you are thinking of defmacro.
[18:17:07] <lotuseater> oh hm, okay, thanks
[18:17:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:18:18] <didi> lotuseater: I'm unsure how these pertain to the problem at hand, but thanks.
[18:18:29] <lotuseater> okay good to know, all must be symbols in DEFUN
[18:18:34] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[18:24:42] <didi> I guess I should use &optional if I want to be portable. SBCL's CALL-ARGUMENTS-LIMIT is 4611686018427387903, but it could be 50.
[18:30:32] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[18:32:12] *** Quits: Fare (~fare@2601:184:4a7f:995c:9071:7ad8:22e6:da4c) (Remote host closed the connection)
[18:32:34] *** Joins: Fare (~fare@2601:184:4a7f:995c:9071:7ad8:22e6:da4c)
[18:35:22] *** Joins: frgo (~frgo@2001:4ba0:92c1:806:314d:c1cb:8b7:4856)
[18:35:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:40:33] *** Joins: frgo_ (~frgo@dynamic-046-114-147-249.46.114.pool.telefonica.de)
[18:43:49] *** Quits: frgo (~frgo@2001:4ba0:92c1:806:314d:c1cb:8b7:4856) (Ping timeout: 252 seconds)
[18:48:56] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:50:40] <phoe> didi: ABCL's is 50.
[18:52:20] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[18:54:53] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:57:07] *** Joins: Alfr (~Alfr@user/alfr)
[18:59:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:00:59] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[19:01:11] *** Joins: karlosz (~karlosz@12.196.174.98)
[19:04:41] *** Quits: karlosz (~karlosz@12.196.174.98) (Client Quit)
[19:08:01] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[19:09:26] *** Joins: frgo (~frgo@dynamic-046-114-148-178.46.114.pool.telefonica.de)
[19:10:11] *** Quits: frgo_ (~frgo@dynamic-046-114-147-249.46.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[19:10:47] *** Joins: tfb (~tfb@88.98.95.237)
[19:15:08] <jcowan> beach: Reinvented
[19:18:40] <pjb> didi: use &rest and parse it to accept both elements and a final list!
[19:18:44] <pjb> like apply or list*
[19:19:28] <pjb> didi: (defun foo (&rest elements-and-list) (let ((elements (butlast elements-and-list)) (list (first (last elements-and-list)))) (foo-process (append elements list))))
[19:19:49] <pjb> Note: (defun foo-process  (list) #| no optional or rest here! |#)
[19:22:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:23:13] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:23:58] <beach> jcowan: First-class global environments you mean?  I saw no evidence in the literature of a solution to the performance problem of having every lookup be through a hash table.
[19:24:29] <beach> jcowan: But you probably didn't read the paper since it is too long for your liking, so perhaps you missed that part.
[19:25:01] <beach> Slow first-class global environments are common in the literature, though.
[19:28:54] <didi> pjb: It's a compromise. If I understand correctly one would eval (foo a '()) to call against one argument.
[19:29:20] <didi> Or (foo '(a)).
[19:30:18] <didi> phoe: Curiously low.
[19:32:05] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 260 seconds)
[19:32:29] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[19:32:41] <jcowan> beach: I did indeed read your paper.  I have started the Queinnec paper now.
[19:33:03] <jcowan> I am not trying to deprive you of your rightful credit
[19:35:07] <beach> Good.
[19:40:54] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[19:43:06] <pjb> didi: or detect if the last argument is a list.
[19:43:26] <didi> pjb: Ah, but you see, an element can also be a list.
[19:44:49] <pjb> didi: but indeed, you should not confuse (foo '(a)) == (foo 'a nil) with (foo '((a))) ==  (foo '(a) nil)
[19:45:15] <pjb> So sometimes you may want to add a nil as last argument…
[19:45:57] <didi> pjb: Right, but if I need to start adding sentinels, I prefer to use &optional list.
[19:45:59] <pjb> But you can always wrap them in a list: (foo (list e1 e2 e3)) to be sure. (works whether e3 is an atom or not).
[19:46:27] <pjb> In anycase you still need to handle the case, when you have more than one element.
[19:50:18] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:50:55] *** Quits: Fare (~fare@2601:184:4a7f:995c:9071:7ad8:22e6:da4c) (Ping timeout: 252 seconds)
[19:51:06] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[19:51:58] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:54:43] *** Quits: frgo (~frgo@dynamic-046-114-148-178.46.114.pool.telefonica.de) (Remote host closed the connection)
[19:56:06] *** Joins: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[20:03:41] *** Joins: Fare (~fare@2601:184:4a7f:995c:9831:89f9:7d97:56dd)
[20:06:58] <didi> Can/Should I use an `ASSERT' form inside a DEFMACRO to make sure the user passed a symbol?
[20:07:28] <didi> e.g (assert (symbolp this-must-be-a-symbol))
[20:10:28] <random-nick> why not CHECK-TYPE
[20:10:32] <White_Flame> only if you need to be a literal symbol, unevaluated
[20:10:54] <didi> random-nick: I dunno. Why not?
[20:11:14] <didi> White_Flame: I need: it will be bind to different values later.
[20:11:27] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:11:31] <didi> Just like in (dolist (x list) ...)
[20:13:07] <White_Flame> you mean you're giving it a variable name?
[20:13:29] <didi> White_Flame: Yes, indeed.
[20:14:10] <didi> (my-macro (this-must-be-a-variable ...) ...)
[20:15:41] <White_Flame> only if you want to override the default error
[20:16:04] <didi> White_Flame: Thank you.
[20:21:26] *** Quits: yitzi (~yitzi@172.98.105.250) (Quit: Leaving)
[20:31:48] <pjb> didi: it's a complex question.
[20:32:41] <pjb> didi: you have 2 forms for assert. with and without places. without places, assert will just signal an error and you will have to abort. With places, assert will let you use restarts to set those places and try the assert again.
[20:32:58] <pjb> didi: this is what you can do with check-type too.
[20:34:00] <pjb> (defmacro check-type  (place type) `(assert (typep ,place ',type) (,place) "Wrong type, try again")) basically (modulo proper handling of place.
[20:34:26] <pjb> didi: but in all cases, this doesn't give a very good or informative error message or restart for your macro.
[20:34:56] <pjb> didi: it may be preferable to test for the error condition, and signal a more specific error condition, with a clearer message, in the context of your macro.
[20:35:54] <pjb> (defmacro foo (name) (assert (symbolp name)) `(list ',name)) (foo 42) #| ERROR: Failed assertion: (symbolp name) |#  wow ! how informative!
[20:38:44] <didi> pjb: Thanks.
[20:38:45] <pjb> (defmacro foo (name) (unless (symbolp name) (error 'bad-foo-argument :parameter 'name :value name :type (type-of name) :expected-type 'symbol :format-control "You passed ~S which is of type ~S to the macro ~S, but it expected a ~S" :format-arguments (list name (type-of name) 'foo 'symbol)))  `(list ',name))    (foo 42) --> error: You passed 42 which is of type (integer 42 42) to the macro FOO, but it expected a SYMBOL  ;  Way better !
[20:38:51] <didi> oic
[20:40:18] <pjb> didi: that said, conditions signaled by macros are usually caught only by the compiler or the callers of the compiler (compile, compile-file, eval, possibly coerce), so the usefulness of defining specific conditions for them is debatable.
[20:40:59] <White_Flame> didi: what error message do you currently get when you macroexpand without your own error check?
[20:41:26] <White_Flame> sbcl is pretty good with errors about "123 is not a symbol and cannot be used as a local variable" etc already
[20:41:28] <pjb> Using one of the simple-…-error condition could be enough (but the standard only defines simple-type-error).
[20:42:17] <didi> White_Flame: "  (U) is not a symbol and cannot be used as a local variable."
[20:43:05] <White_Flame> and that's not enough of an error description for this use case?
[20:43:41] <didi> White_Flame: I think it is.
[20:44:53] <White_Flame> for things like (with-open-file (4 "foo.txt") ...), it expands to LET, which gets you that local variable error as well, which makes sense for that parameter of the macro
[20:45:10] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Ping timeout: 240 seconds)
[20:45:23] <didi> Incidentally, I'm expanding to LET too.
[20:46:17] <White_Flame> right
[20:51:35] <White_Flame> that's one big advantage of macros (or well I guess any composition) is that you automatically get the features of the expansion already
[20:58:41] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[20:58:59] *** Joins: silasfox (~sbv@2001-4dd1-f945-0-a64c-1d11-b60c-5682.ipv6dyn.netcologne.de)
[21:10:40] *** Quits: silasfox (~sbv@2001-4dd1-f945-0-a64c-1d11-b60c-5682.ipv6dyn.netcologne.de) (Ping timeout: 260 seconds)
[21:10:48] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:21:56] *** Joins: silasfox (~sbv@2001-4dd5-2366-0-10b3-fab8-33e1-994e.ipv6dyn.netcologne.de)
[21:26:35] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[21:27:08] *** Joins: amb007 (~a_bakic@4.13.23.93.rev.sfr.net)
[21:29:22] *** Quits: silasfox (~sbv@2001-4dd5-2366-0-10b3-fab8-33e1-994e.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[21:37:23] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[21:37:28] <didi> Isn't it curious DOLIST doesn't do destructuring?
[21:41:45] <pjb> (dolist (entry list) (destructuring-bind (x y z) entry …))
[21:41:55] <didi> Sure sure.
[21:41:58] <pjb> didi: one problem is that destructuring-bind will signal errors if the entry cannot be parsed.
[21:42:11] <pjb> and dolist was certainly invented before destructuring-bind.
[21:42:17] <pjb> Perhaps it's even used in it!
[21:42:32] *** Quits: amb007 (~a_bakic@4.13.23.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:42:39] <didi> It's DOLIST all the way down.
[21:42:51] *** Joins: amb007 (~a_bakic@4.13.23.93.rev.sfr.net)
[21:43:54] *** Joins: lisp123 (~lisp123@45.130.83.195)
[21:44:23] <pjb> didi: the thing is that it's too easy: (defmacro dbdolist (bindings list-expression &optional result-expression) (let ((ventry (gensym)))  `(dolist (,ventry ,list-expression ,result-expression) ,(if (atom bindings) `(let ((,bindings ,ventry)) ,@body) `(destructuring-bind ,bindings ,ventry ,@body)))))
[21:44:29] <pjb> didi: and there, you have it!
[21:44:37] <didi> pjb: Thanks.
[21:46:08] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[21:50:19] *** Joins: lottaquestions (~nick@2607:fa49:503f:6400:50c5:e99b:4101:c387)
[21:57:55] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[21:58:49] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:00:03] *** Joins: tyson2 (~user@cpe18e82949ab5b-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[22:02:22] *** Quits: lisp123 (~lisp123@45.130.83.195) (Ping timeout: 252 seconds)
[22:05:07] *** Quits: amb007 (~a_bakic@4.13.23.93.rev.sfr.net) (Ping timeout: 252 seconds)
[22:05:29] *** Joins: amb007 (~a_bakic@103.133.22.93.rev.sfr.net)
[22:06:07] <lisp123_> Quick Qn - how to re-run ASDF tests (asdf:test-system)? I changed my test files, but it seems like ASDF is referring to the old versions
[22:06:32] <Shinmera> depends on your setup.
[22:07:01] <lisp123_> Shinmera: Actually I am using parachute! :) Great tool
[22:07:19] <lisp123_> I deleted a test, but it is still running when I try asdf:test-system again
[22:07:54] <Shinmera> By 'deleting a test' you mean you removed the define-test form from the source file?
[22:07:59] <lisp123_> Yes
[22:08:19] <Shinmera> Lisp doesn't know you 'deleted' things since it doesn't track definitions within files.
[22:08:32] <Shinmera> You have to call parachute:remove-test
[22:09:07] <pjb> or reboot your lisp.
[22:09:37] <Shinmera> Same for any other source file, if you just delete the defun and reload, lisp is none the wiser. You have to manually fmakunbound.
[22:09:50] <Shinmera> Or whatever other equivalent for whatever definition you had.
[22:09:59] <pjb> Notably, for methods… Hence the use of remove-method.
[22:10:50] <pjb> or sometimes (unintern 'foo), but it may not be enough to undo (there may remain references to the newly uninterned symbol #:foo).
[22:12:21] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[22:12:39] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:13:01] <lisp123_> Thanks
[22:13:30] <lisp123_> Shinmera: I am getting an error "no test found", is that because I recompiled without the test?
[22:13:47] <lisp123_> Or its a user error on my end?
[22:14:01] <Shinmera> tests in parachute are local to a package, make sure you either pass the test package or are in the test package.
[22:14:53] <lisp123_> Thanks! That did it. Thanks again
[22:14:58] <Shinmera> No problem
[22:15:15] <lisp123_> pjb: thanks for the info
[22:23:05] *** Quits: amb007 (~a_bakic@103.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:23:08] *** Joins: karlosz (~karlosz@12.196.174.98)
[22:23:32] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:31:15] *** Joins: VincentV` (~user@212.241.16.115)
[22:32:58] *** Quits: VincentVega (~user@212.241.16.115) (Ping timeout: 265 seconds)
[22:33:52] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Quit: bye)
[22:37:09] *** Joins: raeda (~raeda@72.49.219.33)
[22:46:24] <scymtym> more wayland progress: https://techfak.de/~jmoringe/wayland-protocol-2.ogv
[22:48:47] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 245 seconds)
[22:51:52] *** Joins: cosimone` (~user@93-44-185-79.ip98.fastwebnet.it)
[22:53:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[22:56:54] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[22:57:16] <shka> wow
[22:57:21] <shka> scymtym: HOW?
[22:57:59] <shka> you have some kind of opengl backend?
[22:58:10] <scymtym> shka: no
[22:58:22] <shka> so what does it take?
[22:59:20] <scymtym> this is just talking the wire protocol over a UNIX socket, allocating shared memory, transmitting the shm file descriptor and, the part you are probably wondering about, rendering into the shared memory using McCLIM's software renderer
[22:59:57] <shka> oh, ok
[23:00:05] <shka> actually less complex then i thought
[23:00:07] <shka> still cool
[23:00:19] <scymtym> thanks
[23:00:42] <scymtym> you would need mostly the same machinery for client-side OpenGL rendering
[23:02:49] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[23:02:52] *** Joins: jasom (~aidenn@ip98-185-238-13.sb.sd.cox.net)
[23:03:26] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[23:08:35] *** Joins: karlosz (~karlosz@12.196.174.98)
[23:22:15] *** Joins: vats (~vats@42.111.21.216)
[23:29:10] *** Quits: tyson2 (~user@cpe18e82949ab5b-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:29:58] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[23:31:54] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[23:37:44] *** Joins: karlosz (~karlosz@12.196.174.98)
[23:45:09] <lisp123_> Is there a way to step back in slime?
[23:45:21] <shka> in a debugger?
[23:45:23] <lisp123_> after doing a step-next, or is this impossible
[23:45:26] <lisp123_> shka: yes
[23:45:35] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b88b:1406:d882:ba49) (Read error: Connection reset by peer)
[23:46:18] <shka> i don't think so
[23:46:39] <lisp123_> Thanks. Thought so too (given its based on restarts)
[23:51:43] *** Joins: Alfr (~Alfr@user/alfr)
[23:53:21] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[23:53:59] *** Joins: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de)
