[00:49:31] *** Quits: uvolmer (~uvolmer@2001-4dd0-212c-82-e069-f5f7-ab7b-8443.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[01:44:14] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:05:29] *** Server sets mode: +nt 
[02:06:12] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[02:08:46] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:17:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:18:57] *** Quits: tripfandango (~tripfanda@77.137.77.22) (Ping timeout: 240 seconds)
[02:26:01] *** Quits: Gavisann (uid125039@id-125039.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:28:34] *** Joins: uvolmer (~uvolmer@2001-4dd0-212c-82-e069-f5f7-ab7b-8443.ipv6dyn.netcologne.de)
[02:44:13] *** Quits: uvolmer (~uvolmer@2001-4dd0-212c-82-e069-f5f7-ab7b-8443.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[02:48:05] *** Joins: euidzero_ (~euidzero@158.101.10.150)
[02:49:01] *** Quits: euidzero (~euidzero@158.101.10.150) (Ping timeout: 268 seconds)
[03:03:09] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[03:19:01] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:48:47] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[03:53:46] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 268 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:56:42] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[05:01:24] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[05:27:26] *** Quits: rpthms (~rpthms@user/rpthms) (Remote host closed the connection)
[05:30:33] *** Joins: rpthms (~rpthms@user/rpthms)
[06:31:36] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[06:34:14] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[06:38:44] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 250 seconds)
[08:22:39] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[08:26:57] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[08:32:18] *** Joins: quazimodo (~quazimodo@n110-21-88-214.bla2.nsw.optusnet.com.au)
[08:32:21] <quazimodo> hi all
[08:32:48] <quazimodo> techwordl with nana is insane that lady is excellent
[08:38:31] *** Quits: twizzlstix (~twizzlsti@has.arrived.and.is.ready-to.party) (Quit: later tater)
[08:43:21] *** Quits: blubalu (~bluebear@32.218.176.137) (Ping timeout: 256 seconds)
[08:44:15] *** Joins: blubalu (~bluebear@32.218.176.137)
[08:51:15] *** Joins: twizzlstix (~twizzlsti@has.arrived.and.is.ready-to.party)
[08:55:56] *** Quits: quazimodo (~quazimodo@n110-21-88-214.bla2.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[09:15:39] *** Quits: kusanagi (~kusanagi@user/kusanagi) (Ping timeout: 256 seconds)
[10:04:19] *** fling is now known as swing
[10:06:54] *** swing is now known as fling
[10:20:08] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[10:21:00] <kwilczynski> She is isn't she?
[10:38:15] *** Joins: uvolmer (~uvolmer@2001-4dd0-212c-82-e069-f5f7-ab7b-8443.ipv6dyn.netcologne.de)
[10:43:07] *** Joins: Snegodick (~ne@user/Snegodick)
[11:09:23] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[12:09:36] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:17:47] *** Joins: kusanagi (~kusanagi@user/kusanagi)
[12:50:59] *** Quits: Vlen (~irc@user/Vlen) (Quit: Quit.)
[12:53:24] *** Joins: Vlen (~irc@user/Vlen)
[13:10:36] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[13:13:24] *** Joins: shad (~shad@user/shad)
[13:33:23] *** Joins: tripfandango (~tripfanda@2a02:6680:2107:3cb7:24a8:e5d7:8f58:c0d8)
[13:46:50] *** Joins: Vitto (~Vitto@se-14.nat.univ-paris4.fr)
[13:55:39] *** Joins: mthunter (mthunter2@user/mthunter)
[13:59:50] *** Quits: Vitto (~Vitto@se-14.nat.univ-paris4.fr) (Remote host closed the connection)
[14:12:21] <nss> nana is the best
[14:18:15] <shad> hello world
[14:18:22] <shad> Anyone proficient in GitlabCI around here ?
[14:21:39] <shad> https://paste.mozilla.org/s9XkUGEB here's my pipeline; i'm trying to run cypress tests against my front. It needs an API running, and the API needs a database
[14:21:51] <shad> The API also needs migrations done on the database to create tables and users
[14:22:38] <shad> Problem is, the migrations-job service has a race condition with the database, and starts when the database ain't ready yet. Migrations don't happen because connection is refused, and tests fails 
[14:22:59] <shad> Any idea how to make my migration run only when postgres db is up and running ?
[14:25:14] <[twisti]> in short: there is no good premade solution
[14:25:29] <[twisti]> youll have to write your own script that attempts to connect to the database and loops until it works
[14:26:14] <[twisti]> if you are sure that postgres is ready as soon as the port opens, you can do something like this
[14:26:28] <[twisti]> bash -c 'while !</dev/tcp/db/5432; do sleep 1; done;'
[14:26:35] <dodo> yeah.. there are various "wait for it" shell scripts floating around
[14:27:12] <dodo> though, tbh, i'd make that work outside of the CI in containers first. don't like to have such logic in the CI itself..
[14:27:20] <[twisti]> at least with postgres you dont have the container starting up once, then shutting down, then starting again before its ready
[14:28:57] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[14:31:49] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[14:32:18] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[14:35:38] <shad> damn
[14:35:52] <shad> i don't want to add such logic inside the migration scripts themselves
[14:36:31] <shad> I need to open a feature request at gitlab for a "depends_on:" tag on services
[14:36:41] <shad> if docker-compose can do it, why can't gitlab ci
[14:41:02] <dodo> doesn't needs to that?
[14:41:04] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[14:42:50] <shad> well... it does for my case
[14:43:08] <shad> using sleeps to fight a race condition is a big no no in my book
[14:44:54] <dodo> hm? needs != sleeps?
[14:45:08] <shad> oh, you meant `needs:` right ?
[14:45:15] <dodo> yeah
[14:45:27] <dodo> dunno, i've never used it, but from the docs it looks like it might do
[14:45:44] <shad> `needs:` applies to jobs, but not services
[14:45:56] <dodo> can you have a job that starts the service?
[14:46:16] <shad> Services are running along side a job, they are not shared between jobs
[14:46:29] <dodo> i see :\
[14:46:38] <shad> so the idea is my is Tests: ; it has services: running with it
[14:47:08] <shad> So for right now the only solution is probably the while sleep loop, but it irks me
[14:47:34] <shad> I berate my developers often enough because they wanna use sleeps and not think about the consequences of not dealing with race conditions.
[14:47:46] <shad> My street cred will take a beating :<
[14:48:13] <dodo> solving problems > following strict form
[14:48:50] <shad> true, but having credibility helps a lot pushing changes to the org
[14:48:51] <dodo> and what happens in the ci stays in the ci ;)
[14:48:56] <shad> It's all tradeoffs anyways
[14:49:18] <dodo> i mean, when you write code you have much more flexibility than configuring a third party service through yaml..
[14:51:59] <shad> that also happens to be a project "make the Cypress tests work in CI" i gave an intern
[14:52:40] <shad> to make him learn about Gitlab CI and the likes; i didn't think i'd be making him doing non-orthodox stuff for its first project :< 
[15:15:10] *** Joins: mthunter2 (mthunter2@user/mthunter)
[15:15:39] *** Quits: mthunter (mthunter2@user/mthunter) (Killed (NickServ (GHOST command used by mthunter2)))
[15:15:46] *** mthunter2 is now known as mthunter
[15:32:57] *** Quits: mthunter (mthunter2@user/mthunter) (Ping timeout: 240 seconds)
[15:58:33] *** Quits: Snegodick (~ne@user/Snegodick) (Ping timeout: 256 seconds)
[16:14:54] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[17:20:23] *** Quits: nss (~nsosa@atenea.uces.edu.ar) (Remote host closed the connection)
[17:22:06] *** Joins: nss (~nsosa@atenea.uces.edu.ar)
[17:32:04] *** Joins: Vitto (~Vitto@2a01:e0a:981:cd30:7678:27ff:fe76:21aa)
[17:33:58] *** Joins: Brainium (~brainium@user/brainium)
[17:55:37] *** Quits: tripfandango (~tripfanda@2a02:6680:2107:3cb7:24a8:e5d7:8f58:c0d8) (Ping timeout: 256 seconds)
[18:22:40] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:24:51] *** Server sets mode: +nt 
[18:25:01] *** Joins: mns_ (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[18:25:25] *** Joins: viq|w1 (~viq@user/viq)
[18:25:54] *** Joins: simplici1y (~yti@user/simplicity)
[18:29:52] *** Quits: kusanagi (~kusanagi@user/kusanagi) (*.net *.split)
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[18:29:52] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[18:29:52] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[18:29:53] *** Quits: canuck (~canuck@user/canuck) (*.net *.split)
[18:29:53] *** Quits: DonRichie (~DonRichie@ricl.de) (*.net *.split)
[18:29:53] *** Quits: viq|w (~viq@user/viq) (*.net *.split)
[18:29:53] *** Quits: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net) (*.net *.split)
[18:29:53] *** Quits: dvanloon (~dvanloon@user/dvanloon) (*.net *.split)
[18:29:53] *** Quits: foul_owl (~kerry@23.82.193.89) (*.net *.split)
[18:29:53] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (*.net *.split)
[18:29:53] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[18:29:54] *** DonRichie2 is now known as DonRichie
[18:29:54] *** dvanloon5 is now known as dvanloon
[18:37:24] *** Joins: foul_owl (~kerry@23.82.193.89)
[18:42:05] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7)
[18:46:12] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7) (Ping timeout: 240 seconds)
[18:56:50] *** Joins: k8yun (~k8yun@user/k8yun)
[19:13:52] *** Joins: k8yun_ (~k8yun@user/k8yun)
[19:17:17] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 240 seconds)
[19:27:14] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7)
[19:35:11] *** viq|w1 is now known as viq|w
[19:36:44] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[20:18:56] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[20:33:02] *** Joins: k8yun (~k8yun@user/k8yun)
[20:53:07] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7) (Ping timeout: 268 seconds)
[20:54:38] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:78e4:4a4a:7713:ccc3)
[21:21:10] *** Quits: gce108_ (~gce@38.128.188.159) (Quit: Leaving)
[21:22:17] *** Joins: gce108 (~gce@user/gce108)
[21:57:15] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:78e4:4a4a:7713:ccc3) (Ping timeout: 268 seconds)
[21:58:59] <rawtaz> how do you guys deal with bastion host's access to the rest of the infra? i mean i can add a few public ssh keys to the bastion, so that my admins can access the bastion host, but what do you then put on the servers in the rest of the infra that should be accessed by this bastion host?
[21:59:01] *** Joins: tripfandango (~tripfanda@77.137.71.199)
[22:00:02] <rawtaz> using ssh keys means i'd have to put the private ssh key on the bastion host, and that means i either have to store that private key in the terraform config or e.g. in openstack which still means it will be in the terraform state.
[22:01:47] *** Quits: fling (~fling@user/fling) (Ping timeout: 256 seconds)
[22:04:43] <dodo> rawtaz: they can forward their ssh agent? no need for any keys on the bastion
[22:06:14] <rawtaz> yeah reading up on that right now actually
[22:07:03] <rawtaz> cant remember when i did that last time lol
[22:35:24] <rawtaz> dodo: yeah thats the poor man's solution i think, it works. the downside however is that each internal resource needs the user's public ssh key in their authorized_hosts still, or do you know a way around that somehow?
[22:36:25] <rawtaz> besides ssh -A, the ssh -J is also nice :)
[22:42:30] *** Joins: menace (~someone@ppp-93-104-179-71.dynamic.mnet-online.de)
[22:42:30] *** Quits: menace (~someone@ppp-93-104-179-71.dynamic.mnet-online.de) (Changing host)
[22:42:30] *** Joins: menace (~someone@user/menace)
[22:42:40] *** menace is now known as Deknos
[22:45:11] <dodo> rawtaz: at my last gig we had workstations inside the network, but i ended up putting my pubkey anywhere anyway ;)
[22:45:33] <rawtaz> ok :)
[22:47:59] <dodo> if you want more security you could also do 2fa or other stuff
[22:48:17] <dodo> actually, 2fa for the bastion doesn't sound so bad
[22:49:00] <rawtaz> yeah indeed
[22:52:23] <dodo> that's assuming people can move around once they are inside, don't want to 2fa all the time
[22:53:14] <rawtaz> yeah
[22:53:22] <rawtaz> also have to be pragmatic a bit :)
[23:10:28] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[23:34:39] <rawtaz> gotta love how to set up ssh *certificates*: https://allthingscloud.eu/2020/01/05/ssh-certificate-based-authentication-a-quick-guide/
[23:34:42] <rawtaz> not at all a bunch of steps :D
