[00:00:23] <skeemer> i mean how can i share data among different functions? what if i have 6 functions all accepting the N parameters, but for example two of these parameters are common among these 6 functions...
[00:00:37] <skeemer> how would i manage such thing with functional programming ? 
[00:01:58] <ecraven> the same way that answer does, create a "class" (record / structure) that holds them
[00:02:50] <skeemer> so each function would take as a parameter 1 single argument instead of 2 right ? 
[00:04:40] <Zipheir> Sure.
[00:04:52] <Zipheir> Or they ... just take those two parameters.
[00:05:50] <Zipheir> Alternatively, one could express those six functions as sub-functions of one taking those two parameters.
[00:06:26] <skeemer> Zipheir, i don't understand this sub-functions thing... 
[00:06:31] <Zipheir> This is very common, and unlikely to lead to disasters provided those variables aren't mutated.
[00:06:46] <skeemer> so those sub-functions would be closures ?
[00:06:59] <skeemer> and the top-level function is returning an array of unnamed functions? 
[00:07:00] <Zipheir> All functions are closures.
[00:07:06] <amazigh> I think the threading macro from SRFI support that, it is propped compose
[00:07:08] <Zipheir> That's just a technical term.
[00:07:21] <skeemer> Zipheir, could you provide me a small example ?
[00:07:26] <skeemer> also in python would be ok
[00:07:56] <amazigh> this https://srfi.schemers.org/srfi-197/
[00:08:00] <Zipheir> skeemer: Consider: (define (f g1 g2) (define (g ...) ...) (define (h ...) ...) ...)
[00:08:07] <amazigh> it is called chain actually
[00:08:08] <Zipheir> Er, not great naming.
[00:08:30] <Zipheir> skeemer: But you see that, here, the names g1 and g2 will be in scope for the functions g and h.
[00:09:11] <skeemer> Zipheir, but then you have to return something? 
[00:09:17] <Zipheir> And the "internal defines" are superflous; you could happily replace them with let(rec)s binding lambda expressions.
[00:09:21] <skeemer> you return those functions as a list of functions? 
[00:09:32] <Zipheir> No.  You use them in the body of f.
[00:09:49] <Zipheir> skeemer: Here's a very dumb concrete example.
[00:10:21] <Zipheir> skeemer: (define (sum-list ns) (define (get-the-sum) (fold + 0 ns)) (get-the-sum))
[00:10:48] <skeemer> yes but here you just have to deal with one function
[00:10:52] <Zipheir> skeemer: Obviously this is silly, but the point is that ns can appear free in get-the-sum.
[00:10:55] <skeemer> it is not the same thing... 
[00:11:06] <Zipheir> It is the same thing!
[00:11:08] <skeemer> i have 6 functions using N parameters but they all share two parameters
[00:11:39] <Zipheir> So you want just those two parameters to be in scope for all 6?
[00:12:09] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Read error: Connection reset by peer)
[00:12:34] *** Quits: rgherdt (~rgherdt@ip5f5af420.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:12:37] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[00:12:52] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:12:52] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e9b2:ade6:e9e3:d923)
[00:13:03] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:13:38] <Zipheir> skeemer: I'm not sure I understand what you mean.
[00:14:40] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[00:14:53] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[00:17:20] <amazigh> skeemer: the return values of proc1 is the arguments of proc2, etc...?
[00:18:05] <amazigh> then proc2 return values are the arguments of proc3...
[00:18:43] <amazigh> you start with possibly n arguments and you have a list such as (define pipeline (list proc1 proc2 proc2))
[00:18:53] <amazigh> and some objects OBJECTS as arguments
[00:18:55] <Zipheir> Wait, is this about monadic programming?
[00:19:16] *** Joins: badkins (~badkins@136.56.92.199)
[00:19:25] <amazigh> and you would like to do something like (my-apply pipeline objects)
[00:20:37] <Zipheir> The StackOverflow question is not clear to me.
[00:21:26] <Zipheir> amazigh: That's just composition?
[00:21:51] <skeemer> amazigh, no 
[00:24:43] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[00:25:14] <skeemer> Zipheir, amazigh look here... it's more concrete... https://pastecode.io/s/tpg9j8au
[00:25:28] <skeemer> do you see that the arguments "model" and "lang" are passed always for each function?
[00:25:35] <Zipheir> Yes.
[00:25:54] <skeemer> is this a code smell? is there a way to generalize this in scheme/lisp ?
[00:26:38] <Zipheir> First of all, it's not remotely a big deal.
[00:28:36] <Zipheir> skeemer: I'd argue there's nothing to fix in this case.  If there were 5 arguments common to those functions, I'd say a single record type argument would be clearer.
[00:30:26] <Zipheir> A more general technique would be something like the functors of SML modules.  In a nutshell, you create a procedure which takes model and lang arguments, and returns a dictionary of (partially applied) functions specialized to those parameters.
[00:30:48] <Zipheir> That's my generalization suggestian.  But I don't think that's warranted here.
[00:31:42] <skeemer> Zipheir, thanks a lot! :)
[00:32:08] <skeemer> Zipheir, i thought about your solution with the partial application, but then something stopped me... i wonder what would be good cases for that?
[00:32:11] <Zipheir> In this case, e.g. (make-dictionary imprezza japanese) => <dictionary>, and this might be a list of procedures, a vector, a record, etc.
[00:32:51] <skeemer> Zipheir, well i was wondering since in OOP this would be a code smell, and the recommendation would be... create a Class
[00:33:04] <skeemer> Zipheir, but it seems that it is not a code smell in functional programming 
[00:34:09] <Zipheir> skeemer: I'd say it's a matter of complexity.  Two additional arguments isn't much compared to the complexity of creating a class/functor thing.
[00:34:41] <Zipheir> skeemer: Functional programming tends to be more tolerant of parameters.
[00:35:16] <skeemer> okok thanks Zipheir you were very helpful!
[00:35:39] <Zipheir> But, as Alan Perlis says, "If you've written a function with 10 parameters, you probably missed some."  So it's best to keep things concise, I think.
[00:35:42] <Zipheir> skeemer: yw!
[00:35:49] <skeemer> Zipheir, do you have a blog or something like that ?
[00:36:26] <skeemer> Zipheir, well i think that quote refers to a slightly different scenario
[00:36:53] <Zipheir> Hah, no.  I occasionally post notes on computation to http://www.sigwinch.xyz/.
[00:36:55] <Zipheir> Possibly so.
[00:37:35] <Zipheir> Too many parameters is definitely an issue in many practical functional programs.
[00:37:50] <Zipheir> Hence also things like the reader/writer monads.
[00:38:01] <sham1> Sometimes you want pseudo-global state and that's okay
[00:38:17] <sham1> With Scheme you could use parameters
[00:38:20] <Zipheir> There are parameter objects for that, not that I think those are all that hot.
[00:38:22] <Zipheir> jinx
[00:38:58] <sham1> Well using them makes a lot of sense
[00:39:47] <Zipheir> I don't know.  I'd avoid using them as mutable globals for the same reasons I'd avoid mutable globals.  If they're just "local configuration", I'd prefer plain old argument passing.
[00:40:10] <Zipheir> But my opinions have changed a few times on parameters, so I don't know.
[00:42:54] <sham1> Well they're a tool to use and sometimes it's convenient. And just like with Common Lisp's dynamic variables, they're better than just straight globals since they can only be modified by stuff above you in the call stack instead of by some adjacent code
[00:43:10] <sham1> It makes it a bit easier to manage, if only slightly
[00:45:32] <sham1> And at least unlike with Common Lisp, since Scheme parameters aren't used like normal lexical variables, they don't need a weird naming convention where you add earmuffs around them
[00:53:30] *** Joins: badkins (~badkins@136.56.92.199)
[00:56:36] *** Joins: klovett (~klovett@107.115.32.2)
[00:58:00] <Zipheir> rudybot: globally mutable variable
[00:58:01] <rudybot> Zipheir: "Affix asterisks to the beginning and end of a globally mutable variable. This allows the reader of the program to recognize very easily that it is badly written!" <-- i like this already
[01:00:51] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[01:01:21] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:55a5:e5ff:533e:cb0f) (Read error: Connection reset by peer)
[01:01:34] *** Joins: tripfandango (~tripfanda@5.29.28.78)
[01:03:26] *** Joins: badkins (~badkins@136.56.92.199)
[01:06:53] *** Joins: Perryman (~perryman@user/perryman)
[01:42:47] *** Joins: klovett_ (~klovett@107.115.32.2)
[01:45:10] *** Joins: klovett__ (~klovett@107.115.32.2)
[01:46:11] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[01:47:03] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[01:52:12] *** Quits: opalvaults (~user@75-172-37-173.tukw.qwest.net) (Remote host closed the connection)
[02:00:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[02:01:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[02:13:34] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[02:22:32] *** Joins: mononote (~mononote@user/mononote)
[02:26:57] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[02:40:23] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[02:43:41] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[02:46:33] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[03:10:36] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 268 seconds)
[03:13:17] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:17:02] *** Joins: sonny39 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[03:19:01] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[03:19:19] *** Joins: seninha (~seninha@user/seninha)
[03:20:12] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:35:00] *** Quits: jao (~jao@45.152.183.62) (Remote host closed the connection)
[03:40:13] *** Joins: jao (~jao@45.152.183.62)
[03:51:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[03:51:56] *** Quits: sonny39 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:53:27] <dTal> all the best languages use sigils
[03:53:34] *** Joins: livoreno (~livoreno@user/notzmv)
[03:53:37] <dTal> BASIC, Scheme, Perl
[03:58:14] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[04:14:44] *** Joins: badkins (~badkins@136.56.92.199)
[04:20:49] *** Quits: tripfandango (~tripfanda@5.29.28.78) (Ping timeout: 256 seconds)
[04:21:47] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[04:26:11] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 252 seconds)
[05:07:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80::fb)
[05:16:50] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[05:32:17] *** Quits: jao (~jao@45.152.183.62) (Ping timeout: 256 seconds)
[05:33:19] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[05:37:08] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:41:18] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:41:39] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:43:23] *** Joins: badkins (~badkins@136.56.92.199)
[05:47:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[05:59:25] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[06:01:41] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:05:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:06:18] *** Joins: seninha (~seninha@user/seninha)
[06:24:01] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[06:35:57] *** Joins: badkins (~badkins@136.56.92.199)
[06:40:23] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[06:47:42] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:49:30] *** Joins: dstein64- (~dstein64@dannyadam.com)
[06:50:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 260 seconds)
[06:50:41] *** dstein64- is now known as dstein64
[07:02:41] <mdhughes> How do non-earmuff users indicate globals? Just not have them, and therefore never write anything above 10-line complexity?
[07:07:37] <sonny> non-earmuff ?
[07:12:32] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[07:13:06] <lockywolf> wasamasa, sorry for off-topic, but where exactly should I put shackle-rules? in shackle-mode-hook?
[07:16:19] <mdhughes> *earmuff*
[07:22:10] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[07:26:56] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:38:59] *** Joins: badkins (~badkins@136.56.92.199)
[07:41:03] <gwatt> mdhughes: why do you need special demarcation of globals? If you use rnrs libraries, you're not allowed to mutate exported bindings
[07:42:19] <mdhughes> So I can tell where a name comes from, and don't shadow it? I don't generally export them, just accessors if needed, but internally I want some way to identify them.
[07:42:33] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[07:43:45] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:46:52] *** Quits: Inline (~Inline@2a02:908:1252:7a80::fb) (Ping timeout: 268 seconds)
[07:51:05] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:55:37] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:08:25] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:09:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[08:10:15] *** Joins: badkins (~badkins@136.56.92.199)
[08:11:23] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:18:16] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:24:14] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[08:25:06] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:25:32] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[08:26:04] *** Joins: badkins (~badkins@136.56.92.199)
[08:28:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Client Quit)
[08:30:23] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[08:35:00] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[08:35:17] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:35:36] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[08:40:17] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[08:47:17] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[09:02:44] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[09:13:58] <sonny> what do you expect to get from (cadr (list 1))?
[09:16:41] <gwatt> sonny: some kind of errro
[09:17:01] <gwatt> error, even, if you want to spell it correctly
[09:17:14] <sonny> hmm, I wanted to use cadr to seek to the last element of the list, null
[09:18:24] <gwatt> a proper list is null, or a pair whose cdr is a proper list.
[09:19:10] <gwatt> repeat until you reach null, a non-null pair, or detect cycles
[09:20:10] <sonny> yeah, non-null pair is what I'm interested in
[09:20:29] <sonny> (and (pair? v) (null? (cdr v)))
[09:21:55] <gwatt> you can't use car or cdr on a non-pair
[09:22:34] <sonny> ah
[09:26:04] <sonny> aoc spoiler; if I get zero does that mean the third condition does not get evaluated? <https://bpa.st/TOPA>
[09:31:24] <sonny> ah, the escape is by the [else 0]
[09:35:33] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[09:35:54] *** Joins: s-liao (~s-liao@101.86.99.70)
[09:48:18] *** Joins: mononote (~mononote@user/mononote)
[10:01:50] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Quit: Client closed)
[10:47:23] <ns12> Why didn't R6RS specify an REPL?
[11:04:17] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:3d90:ba6f:cb3a:f0f6)
[11:15:45] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:3d90:ba6f:cb3a:f0f6) (Ping timeout: 252 seconds)
[11:15:51] *** Joins: trip_fandango (~tripfanda@5.29.28.78)
[11:20:25] *** Joins: shawnw (~shawn_w@152.44.212.188)
[11:20:44] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[11:20:56] *** Joins: s-liao (~s-liao@101.86.99.70)
[11:21:10] *** Joins: thevishy (~Nishant@2405:201:f005:c007:fd4c:a570:99e4:8844)
[11:21:15] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[11:29:39] <wasamasa> lockywolf: it's just a variable
[11:29:45] <wasamasa> lockywolf: set it whenever you want
[11:30:15] <lockywolf> well, it doesn't seem to work the way I expect it to work...
[11:30:26] <wasamasa> possibly
[11:30:28] <wasamasa> it's not almighty
[11:30:35] <lockywolf> ah, ok
[11:30:52] <wasamasa> there's M-x shackle-trace-functions to tell whether it can work for whatever you're trying to configure
[11:31:22] <lockywolf> it's like, I have it configured to launch Man-mode in a new frame, and it seems to not always work
[11:31:29] <lockywolf> but sometimes works!
[11:31:36] <lockywolf> a bit hard to debug
[11:33:14] <wasamasa> lol, I just gave you the way to debug this
[11:41:38] <lockywolf> Yeah, thank you
[12:04:04] *** Joins: badkins (~badkins@136.56.92.199)
[12:05:13] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:11:02] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[12:13:13] *** Joins: badkins (~badkins@136.56.92.199)
[12:15:53] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[12:18:01] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[12:43:16] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[12:47:25] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[12:48:46] <amazigh> hello all!
[12:49:12] <amazigh> is there a (tiny) scheme that run on posix shell 
[12:49:13] <amazigh> ?
[12:50:08] <wasamasa> MAL runs on bash
[12:53:15] <amazigh> I did not think about MAL
[12:54:33] <amazigh> my goal is to create a small program to install several scheme implementations, and add shims so that their cli interface more or less behave the same
[12:54:50] <amazigh> so I have three subcommands:
[12:55:11] <amazigh> scheme-live FANTASTIC install -> installs FANTASTIC Scheme
[12:56:10] <amazigh> scheme-live FANTASTIC run DIR1 DIR2 ... PROGRAM.SCM ARGS .... -> run PROGRAM.SCM on FANTASTIC given DIR1 DIR2 ... library load path and passing ARGS to PROGRAM.SCM
[12:56:46] <amazigh> scheme-live FANTASTIC repl DIR1 DIR2 -> runs a REPL with DIR1 DIR2 in library load path
[12:57:26] <amazigh> With shell / bash, I am strugling to implement `run` because it requires to fiddle with $@ and keep track of several lists
[12:57:26] <wasamasa> uhhhhh
[12:57:34] <wasamasa> that is wildly beyond the scope of MAL
[12:57:37] <amazigh> ?
[12:57:52] <amazigh> oh
[12:58:05] <wasamasa> can't use it for more than SICP stuff
[12:58:26] <amazigh> uh
[12:58:39] <amazigh> Maybe I will learn more shell and call it day
[12:59:13] <wasamasa> maybe you should just make notes, lol
[12:59:23] <amazigh> make notes?
[12:59:59] <wasamasa> yes, like a scheme.org containing instructions how to install <insert implementation>, how to set up a library load path and pass arguments
[13:00:06] <wasamasa> or a project actually doing that
[13:00:13] <wasamasa> I use my scheme implementation in MAL for that
[13:01:33] <amazigh> on a somewhat related note: "I hear, and I forget. I see, and I understand. I do, and I understand" Confucius
[13:01:43] <amazigh> that is the project I am trying to do
[13:01:47] <wasamasa> what
[13:02:04] <amazigh> but it seems to be somewhat portable, I need to rely on sh
[13:02:11] <wasamasa> that is meaningless jibber jabber
[13:02:23] <amazigh> ^^
[13:02:25] <wasamasa> if I were to apply it to my suggestion, looking at notes/code makes me understand
[13:02:32] <wasamasa> which is nonsense
[13:02:33] <rgherdt> amazigh: you could add a command line parameter for DIRs. Like:   scheme-live FANTASTIC repl -d DIR1 -d DIR2 ... PROGRAM.SCM ARGS ...
[13:02:47] <wasamasa> it just makes me remember
[13:02:48] <rgherdt> it may be easier to parse in bash
[13:04:58] <wasamasa> yeah
[13:07:18] <amazigh> there is way too much string fiddling with the above cli that is non-standard 
[13:07:32] <amazigh> Still I think it is the best ui
[13:07:47] <amazigh> -d DIR1 -d DIR2 never clicked with me
[13:10:02] <amazigh> I will use chibi I think
[13:10:06] <amazigh> see https://repology.org/project/chibi-scheme/versions
[13:10:11] <amazigh> it is well supported by distros
[13:11:04] <wasamasa> https://pkgs.org/search/?q=chibi
[13:11:32] <rgherdt> amazigh: I actually like it, grep does that with options like -f, -e etc
[13:13:17] <amazigh> with grep -f and -e can be repeated?
[13:13:21] <rgherdt> yes
[13:13:36] <rgherdt> then it scans for patterns of all files/expressions
[13:14:26] <rgherdt> an alternative would be to use an env var, like: SCHEME_LIVE_LOAD_PATH=DIR1,DIR2 scheme-live repl PROGRAM.SCM ARGS ...
[13:15:32] <amazigh> I do not know what is the pros and cons of env variables in those cases.
[13:15:46] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:16:09] <amazigh> also, I grew fond of the proposed ui without -flags and --long-flags
[13:16:30] <amazigh> what is the problem with the proposal I made outside the fact it is more complex to implement?
[13:17:01] <wasamasa> if you ever decide to change the behavior, sucks to be you
[13:17:14] <wasamasa> whereas flags/environment variables provide an easy way to change it
[13:17:17] <rgherdt> re env vars, one advantage is that you only have to set that once. For this kind of stuff (setting load path) I think it's the most common ui
[13:17:51] <wasamasa> looking at the file extension of a command to tell what it's supposed to be seems like a really bad idea
[13:18:03] <wasamasa> yup
[13:19:37] <rgherdt> amazigh: also, I think it's a similar discussion regarding functions with a long list of positional parameters vs. the use of keywords. (scheme-live dir1 dir2 ... PROGRAM ARGS ...) is quite weird IMO. 
[13:19:49] <wasamasa> yes
[13:20:16] <wasamasa> look at find how to do it wrong
[13:20:16] <amazigh> what about chatbots? `<:)
[13:20:34] <wasamasa> where you have special arguments that start/terminate some context
[13:20:41] <wasamasa> and need quoting
[13:20:57] <rgherdt> env variables would be analogous of using parameters, flags to using keywords
[13:21:00] <amazigh> find is definitly one of the worst
[13:21:05] <rgherdt> *analogous to
[13:21:30] <amazigh> I read you rgherdt, I am thinking
[13:21:38] <wasamasa> what about them?
[13:22:03] <wasamasa> do you mean these language guessing bots?
[13:22:09] <amazigh> chatbots decide what to do based on context, they are supposed to put less strain on the user
[13:22:20] <amazigh> I meant it as half a joke
[13:22:48] <amazigh> in that case DIR1 DIR2 are unambigious as part of scheme-live repl or scheme-live run, you can't run and repla directory
[13:23:23] <wasamasa> another sucky thing is when a commandline program behaves differently depending on whether there is a trailing slash or not
[13:23:28] * wasamasa glares at rsync
[13:25:45] <rgherdt> amazigh: another one:  scheme-live run --load-dirs=DIR1,DIR2 PROGRAM.SCM ARGS ...
[13:25:51] <amazigh> I will invoke a IEEE commitee to decide on this  `<:o)
[13:25:54] <rgherdt> :)
[13:26:09] <wasamasa> lol
[13:27:08] <wasamasa> but yes, I'd expect something like --load-dirs and a matching environment variable
[13:27:12] <rgherdt> one can also combine many approaches. Like using env var, but allowing option flags that override them
[13:27:19] <rgherdt> wasamasa: exactly
[13:30:22] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:42:21] <amazigh> I like the a single --load-dirs (vs. multiple times -d), also the envvar
[13:42:45] <amazigh> mind the fact that usually FOOBAR_PATH=A:B:C with : instead of ,
[13:43:58] *** Joins: ManDay (~manday@user/manday)
[13:45:42] *** Quits: ManDay (~manday@user/manday) (Client Quit)
[13:46:33] *** Quits: trip_fandango (~tripfanda@5.29.28.78) (Quit: WeeChat 3.3)
[13:46:47] *** Joins: tripfandango (~tripfanda@5.29.28.78)
[13:51:45] <wasamasa> details
[13:54:24] <amazigh> #true
[13:54:50] <amazigh> rudybot: do you think we should gather a IEEE committee?
[13:55:19] <rudybot> amazigh: and what do you think of the IEEE and RnRS specifications?  some implementations don't seem to care much about them
[13:55:33] *** Joins: X-Scale` (~ARM@92.250.96.131)
[13:55:47] <amazigh> rudybot: the committee is wrong obviously
[13:56:13] <rudybot> amazigh: obviously the correct thing to do is to set up a committee to make a large enough SI prefix to make a plank time based time system practical
[13:56:26] <dpk> i wondered last night if R7RS tiny, without syntax-rules (i.e. without macros at all), call/cc and dynamic-wind would be useful
[13:56:52] <dpk> (prior art: DSSSL)
[13:57:35] <wasamasa> what about exception handling?
[13:58:15] *** Quits: X-Scale (~ARM@92.250.98.59) (Ping timeout: 256 seconds)
[13:58:15] *** X-Scale` is now known as X-Scale
[13:58:20] <amazigh> I prefer s/tiny/micro/, see also https://github.com/johnwcowan/r7rs-work/blob/master/BottomScheme.md
[13:58:32] <dpk> i'd keep that (which = escape continuations only, so you can still do early return)
[14:06:34] <amazigh> maybe tiny is good
[14:06:36] <amazigh> anyway
[14:07:32] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[14:10:10] <sham1> Pre-R7RS
[14:10:15] <sham1> Just like prescheme
[14:10:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c634:1c10:a560:ee24) (Ping timeout: 252 seconds)
[14:10:28] *** Joins: Inline (~Inline@2a02:908:1252:7a80::133)
[14:10:46] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ed3f:2af5:12bc:dd1e)
[14:11:08] <dpk> well, R7RS tiny would still have automatic memory management, unlike PreScheme :-)
[14:12:24] *** Joins: jao (~jao@45.152.183.54)
[14:13:06] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[14:32:56] *** Joins: Avichi (~Avichi@a82-161-111-126.adsl.xs4all.nl)
[14:44:01] *** Quits: jao (~jao@45.152.183.54) (Ping timeout: 252 seconds)
[14:51:45] *** Quits: Inline (~Inline@2a02:908:1252:7a80::133) (Ping timeout: 268 seconds)
[14:53:41] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[14:56:34] *** Joins: mononote (~mononote@user/mononote)
[15:09:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80::133)
[15:16:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:15:29] *** Joins: badkins (~badkins@136.56.92.199)
[16:20:33] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[16:27:53] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[16:29:41] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:33:22] <amazigh> I was going to ask for sort of vector graphic api, but then i found: https://github.com/johnwcowan/r7rs-work/blob/master/GraphicsCanvas.md
[16:33:36] <amazigh> john did so much work, implementations have a difficult time to catch up
[16:34:40] <amazigh> re scheme-live cli, I will go the low-effort way for the time being, and just make it work inside the ci
[16:34:55] <sham1> "Colors are #xRRGGBB numbers, but they may be rounded by the canvas to values it can support (in the worst case only black and white)." Hmrm, having a three-tuple of (in)exact reals between 0 and 1 might have been better
[16:35:21] <amazigh> what I was planning was to create a cli that is "portable" but that is too much work at this time.
[16:36:30] <amazigh> sham1: indeed, also HSL / HSV + alpha is neat
[16:36:43] <amazigh> not sure what is the difference between HSL and HSV
[16:38:35] <mdhughes> Writing a spec is fun. Writing the library is much harder, and rarely matches the spec.
[16:38:51] <sham1> I'd just say that the colour format ought to be decided by the specific canvas type so you could do interesting things with colour spaces
[16:38:57] <sham1> Maybe I don't want sRGB for example
[16:40:16] <wasamasa> come on, it's turtle graphics
[16:40:22] <mdhughes> Also HDR displays are now a thing, you have to use a different system for those.
[16:40:37] <wasamasa> you're not supposed to do your magnum opus with this API
[16:41:24] <sham1> "UI event SRFI" oh Jesus
[16:41:26] <mdhughes> It's not turtle graphics, it's declarative object graphics, like TkInter Canvas. Which is fine for many uses, but it's a level up above real graphics, and leaves out many capabilities.
[16:43:16] <mdhughes> Getting *any* spec that has a common basic graphics system would be a big step, tho. Get something ratified, implemented, and people can ship GUI programs in some form.
[16:43:51] <sham1> Just yoink the Racket API, I don't think they'll mind
[16:44:09] <amazigh> +1 mdhughes 
[16:44:26] <amazigh> sham1: what is the name of that said racket API?
[16:44:43] <sham1> racket/gui/base
[16:44:47] <mdhughes> Racket's all tied up in their OOP system, tho.
[16:44:48] <sham1> Apparentlyh
[16:45:13] <wasamasa> good luck getting a bunch of schemers to agree on an OOP system for that :D
[16:45:25] <sham1> True
[16:45:52] <sham1> Another idea could be to maybe copy the idea of things like React.js and make any GUI API declarative and functional
[16:46:23] <amazigh> re reactjs, that is further up the stack iiuc
[16:46:26] <mdhughes> That's harder to implement and use.
[16:46:42] <amazigh> it depends what you call react.js idea
[16:47:11] <amazigh> also reactjs are not strictly functional and declarative, the controllers are imperative
[16:47:21] *** Joins: badkins (~badkins@136.56.92.199)
[16:47:38] <amazigh> even with the new hooks interface
[16:47:43] <mdhughes> It'd be nice to have the equivalent of a 1980s computer's capabilities here in 2021, but currently you have to do some serious non-portable hackery to get there.
[16:47:47] <sham1> Well I mean that thing where your components are functions that get passed props and they return a list of components or just one component with other stuff nested within
[16:48:08] <amazigh> yes, how do you handle events?
[16:48:17] <amazigh> I like that
[16:48:22] <amazigh> too
[16:49:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[16:49:56] <amazigh> We do not need to go all the way up to webui
[16:50:09] <amazigh> a pixel canvas with events will be neat.
[16:50:21] <amazigh> at this time.
[16:51:06] <amazigh> I think the interface of guile chickadee is nice
[16:51:18] <amazigh> gui api
[16:51:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[16:53:39] <amazigh> sham1: do you know about clojure's hyperfiddle?
[16:55:02] <amazigh> it improves upon react.js paradigm, and bring full-stack declarative apps
[16:55:13] <amazigh> but it is still wip
[16:55:20] <amazigh> it much inspired from haskell FRP of course
[16:56:52] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[16:59:30] <sham1> I'm not that familiar with Clojure anything despite working on a Java shop
[17:09:42] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:19:35] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:20:51] *** Joins: jao (~jao@194.99.104.13)
[17:38:55] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[17:50:31] *** Joins: seninha (~seninha@user/seninha)
[17:56:08] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[17:58:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca)
[18:01:44] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca) ()
[18:15:31] <amazigh> is the maintainer of cyclone in the channel?
[18:15:59] <amazigh> he used to be around.
[18:16:40] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[18:17:07] *** Quits: xsperry (~xs@user/xsperry) ()
[18:17:15] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:17:29] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:81e3:a761:c12d:fd0)
[18:20:27] <amazigh> So it is done, CI is around ten times faster.
[18:20:54] *** Joins: badkins (~badkins@136.56.92.199)
[18:28:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[18:31:25] *** Joins: xsperry (~xs@user/xsperry)
[18:32:10] *** Joins: badkins (~badkins@136.56.92.199)
[18:40:17] *** Joins: civodul (~user@guix/contributor/civodul)
[18:41:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[18:43:17] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[18:43:34] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[18:43:57] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Excess Flood)
[18:44:42] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[18:55:05] *** Joins: klovett (~klovett@107.115.32.2)
[19:01:18] *** Joins: gzj (~GZJ0X@216.24.178.99.16clouds.com)
[19:02:09] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[19:03:12] <mdhughes> Speaking of, I updated my racket gridtest, just a proof-of-concept for game use. Drawing speed's no better, 10 fps, tried a few variations. But all the GUI toolkit stuff is OK: https://gitlab.com/mdhughes/gridtest-racket
[19:07:42] *** Quits: gzj (~GZJ0X@216.24.178.99.16clouds.com) (Remote host closed the connection)
[19:11:52] *** Quits: Inline (~Inline@2a02:908:1252:7a80::133) (Quit: Leaving)
[19:12:19] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca)
[19:12:55] <sonny> if I use an accumulator, can I get proper tail recursion? (aoc spoiler) <https://bpa.st/HC4Q>
[19:24:58] *** Joins: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce)
[19:27:05] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[19:30:55] <wasamasa> likely
[19:34:40] <sonny> and I suppose the proper way to use accumulators is in closures?
[19:35:01] <wasamasa> not required
[19:35:06] <wasamasa> you can just define a helper function
[19:35:18] <wasamasa> it doesn't need to close over anything
[19:36:09] <sonny> I was just thinking how I would "share" the accumulator after
[19:36:23] <sonny> the helper function would provide the closure?
[19:37:20] <wasamasa> you return it
[19:37:48] *** Joins: badkins (~badkins@136.56.92.199)
[19:39:54] <wasamasa> for example, when considering the factorial example
[19:40:16] <wasamasa> you have a helper function accepting the accumulator and argument
[19:40:55] <wasamasa> which returns the accumulator in the base case and otherwise calls itself with the product of the accumulator and the argument decremented by one
[19:41:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[19:41:41] *** Quits: jao (~jao@194.99.104.13) (Remote host closed the connection)
[19:56:30] *** Joins: sonny57 (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca)
[19:56:51] <sonny57> ah
[19:56:59] <sonny57> yeah, that makes sense
[19:57:03] <amazigh> oh
[19:58:44] *** Joins: bae (~ben@49.145.166.252)
[19:59:14] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:00:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[20:02:36] *** Joins: aeth (~aeth@user/aeth)
[20:04:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[20:22:20] *** Joins: notzmv (~zmv@user/notzmv)
[20:24:02] *** Quits: bae (~ben@49.145.166.252) (Quit: leaving)
[20:25:23] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[20:26:07] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[20:38:05] <amazigh> re freenode: big news!
[20:38:12] <amazigh> I read it became illegal to make kefir from kefir more than 12th times :/
[20:38:29] <Franciman> wut
[20:38:46] <amazigh> #TrueStory
[20:39:01] <amazigh> `<:o)
[20:39:07] <Zipheir> 'Morning folks.
[20:42:10] <sonny57> morn
[20:43:25] <Franciman> btw I like the new redditesque vibe of freenode.net
[20:43:34] *** Joins: jao (~jao@194.99.104.13)
[20:47:52] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:48:32] *** Joins: badkins (~badkins@136.56.92.199)
[20:48:51] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:50:10] <wasamasa> lol
[20:50:19] <wasamasa> they're not giving up on thoroughly ruining it
[20:50:33] *** Joins: aeth (~aeth@user/aeth)
[20:53:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[20:59:57] <Zipheir> That's pretty ... bizarre to me.
[21:00:14] <mdhughes> What, did the Crown Prince of Korea actually just let the domain expire?
[21:00:20] <Zipheir> (If anyone want to look without giving the Joseon Empire traffic: https://web.archive.org/web/20211204040942/https://freenode.net/)
[21:01:18] <wasamasa> mdhughes: what do you mean?
[21:01:57] <mdhughes> That's not really his anymore, right?
[21:03:03] <mdhughes> whois says it's "freenode Limited" but "Tech City: Paris"
[21:03:51] <wasamasa> it says both, yes
[21:11:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[21:13:05] *** Joins: aeth (~aeth@user/aeth)
[21:28:37] *** Joins: Inline (~Inline@2a02:908:1252:7a80::133)
[21:28:48] *** Quits: sonny57 (~sonny@bras-base-london1483w-grc-39-65-95-42-154.dsl.bell.ca) (Quit: Client closed)
[21:40:05] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[21:45:03] *** Quits: klovett (~klovett@107.115.32.2) (Quit: ZZZzzz…)
[21:58:16] *** Joins: livoreno (~livoreno@user/notzmv)
[22:00:46] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[22:01:14] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:05:50] *** Joins: notzmv (~zmv@user/notzmv)
[22:08:15] *** Joins: seninha (~seninha@user/seninha)
[22:28:54] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[22:36:24] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5086:3896:e0d0:f358)
[22:36:24] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5086:3896:e0d0:f358) (Changing host)
[22:36:24] *** Joins: skapata (~Skapata@user/skapata)
[22:41:18] *** Joins: shawn (~shawn_w@152.44.212.188)
[22:41:20] *** Joins: skeemer__ (~skeemer@h-178-174-193-227.NA.cust.bahnhof.se)
[22:42:39] <dTal> that website
[22:42:42] <dTal> https://freenode.net/n/freenode/20/where-my-irc-at
[22:42:46] <dTal> is funny
[22:43:33] *** Quits: jao (~jao@194.99.104.13) (Ping timeout: 256 seconds)
[22:43:48] *** Joins: klovett (~klovett@107.115.32.2)
[22:44:40] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 256 seconds)
[22:44:40] *** Quits: skeemer (~skeemer@h-178-174-193-227.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[22:44:40] *** Quits: ASau (~user@lmpc.drb.insel.de) (Ping timeout: 256 seconds)
[22:45:43] *** Joins: jao (~jao@194.99.104.13)
[22:47:06] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[22:47:29] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:50:29] <sham1> Heh. If freenode actually became a good alternative to Reddit
[22:52:14] <wasamasa> no chance
[22:52:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80::133) (Quit: Leaving)
[22:52:38] <wasamasa> as long as it's run by that dolt who keeps wiping and recreating a shittier version every time
[22:53:15] <sham1> Well probably won't happen yeah
[22:53:23] <sham1> Although being better than Reddit wouldn't exactly be difficult
[22:54:30] *** Joins: mononote (~mononote@user/mononote)
[23:02:03] *** Quits: thevishy (~Nishant@2405:201:f005:c007:fd4c:a570:99e4:8844) (Quit: Leaving)
[23:13:41] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[23:16:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[23:19:36] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:22:45] *** Joins: badkins (~badkins@136.56.92.199)
[23:29:45] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[23:42:11] *** Joins: zos (~zos@ool-457a8044.dyn.optonline.net)
[23:52:38] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[23:52:50] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
