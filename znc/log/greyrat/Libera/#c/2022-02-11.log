[00:00:10] <SamuelMarks> to keep things concise in IRC
[00:00:26] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[00:00:42] <SamuelMarks> fizzie - So can I copy that entire buffer to a local `char*` for later direct `free`ing?
[00:01:17] <SamuelMarks> copy or move that is to say
[00:01:56] <SamuelMarks> iff it's first 20 bytes matches my specific pre-declared 20 byte `const char*` that is to say
[00:02:35] *** Joins: duds- (~duds-@user/duds)
[00:03:06] <fizzie> Well, I mean, the fundamental point I was getting at is, using the return value of `read` to decide how much memory to allocate inherently means you must have read it somewhere *else* first. So if you want the data to end up in the newly allocated chunk, a copy of the actual bytes must be involved.
[00:03:38] <SamuelMarks> kk
[00:04:21] <SamuelMarks> So how do I copy then, do I always need to provide the size or if the buffer exists somewhere and isn't hidden completely behind implementation details, can I just copy that whole buffer directly?
[00:04:51] <ChoHag> If you want to copy data you need to know how big it is or how its end is marked.
[00:04:59] <ChoHag> There is no just.
[00:05:18] <SamuelMarks> So the socket internal buffer doesn't know how big it is?
[00:05:28] <fizzie> The buffer in this question would be whatever pointer you passed to `read`.
[00:05:54] <SamuelMarks> hmm so there's no internal buffer it's just what I give it
[00:05:59] <ChoHag> Never mind socket's internals until you're hacking on the C library.
[00:06:04] <ChoHag> Follow its API.
[00:06:09] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[00:06:54] * SamuelMarks runs
[00:07:16] *** Joins: freakazoid12345 (~matt@35.136.233.205)
[00:07:39] <sham1> If you're hacking on the C library, this stuff should be obvious
[00:09:31] *** Quits: bdax (~tom@0543dbad.skybroadband.com) (Read error: Connection reset by peer)
[00:09:41] *** Joins: bdax (~tom@0543dbad.skybroadband.com)
[00:09:56] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:812f:5f2:565:d856) (Ping timeout: 245 seconds)
[00:11:41] <fizzie> Your code might hypothetically be looking roughly like `char buf[SIZE], *response; while ((n = read(s, buf, SIZE)) > 0) { response = realloc(response, size + n); memcpy(response + size, buf, n); size += n; }` (modulo error checks and maybe a fancier realloc strategy), and the part I'm mildly objecting to is the fact that every single byte is copied twice, from "the socket" (whatever that means under the
[00:11:43] <fizzie> hood) into `buf` and then from `buf` into `response`.
[00:12:54] *** Quits: Jong (~Jong@2620:10d:c090:400::5:905d) (Ping timeout: 250 seconds)
[00:14:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:14:45] *** Quits: z4kpi (~zacts@user/zacts) (Quit: Client closed)
[00:16:01] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[00:16:41] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[00:17:06] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:17:39] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[00:17:49] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-2895-9d6c-4909-5f81.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:17:50] *** Joins: Jong (~Jong@2620:10d:c090:400::5:905d)
[00:18:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[00:20:49] *** Joins: Rynn (~rynn@216.30.158.198)
[00:21:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:22:11] *** Joins: Darkcoal (~user@user/Darkcoal)
[00:22:26] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[00:22:35] *** Joins: zacts (~zacts@user/zacts)
[00:22:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:23:38] *** Quits: \o\ (~i.am@177.16.50.140) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:23:44] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[00:24:21] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 250 seconds)
[00:31:30] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[00:31:47] *** Joins: z4kpi (~z4kpi@user/zacts)
[00:31:48] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[00:32:17] <roxlu> I've added a dependency to my app yesterday and I'm this error sometimes now when I close my app (sigint which I handle): `malloc_consolidate(): unaligned fastbin chunk detected`
[00:33:01] <roxlu> When this happens the stacktrace is always: https://gist.github.com/roxlu/efff064f66534f69dbd23f48648847b5
[00:33:52] <roxlu> I'm curious what might cause this :#  strange thing is that I can't reproduce it every time; it happens rarely
[00:34:07] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:35:15] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[00:35:21] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 245 seconds)
[00:36:22] *** Quits: bdax (~tom@0543dbad.skybroadband.com) (Remote host closed the connection)
[00:36:34] *** Joins: bdax (~tom@0543dbad.skybroadband.com)
[00:37:23] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[00:37:34] *** Joins: inlight (~thomas@user/inlight)
[00:38:01] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:38:48] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 268 seconds)
[00:39:04] *** Quits: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi) (Read error: Connection reset by peer)
[00:40:17] *** Quits: ravella (~ravella@user/ryanavella) (Ping timeout: 240 seconds)
[00:42:05] *** Quits: nebu (~user@user/wavion) (Ping timeout: 256 seconds)
[00:45:26] *** Joins: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi)
[00:48:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:48:48] *** Quits: agoodm (~alan@2a00:23a8:4440:7fb:b126:2fa5:7642:598c) (Remote host closed the connection)
[00:49:00] *** Joins: Nutte35 (~Nutte@43.231.30.245)
[00:49:07] *** Joins: agoodm (~alan@2a00:23a8:4440:7fb:df03:b984:5cd5:8dac)
[00:49:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[00:49:38] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:a5df:2a68:55fb:28e4)
[00:49:38] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:a5df:2a68:55fb:28e4) (Changing host)
[00:49:38] *** Joins: skapate (~Skapata@user/skapata)
[00:50:27] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:51:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[00:51:08] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[00:51:30] *** Joins: Darkcoal (~user@user/Darkcoal)
[00:53:11] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[00:54:57] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[00:55:35] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:56:27] *** Quits: magla (~gelignite@55d43657.access.ecotel.net) (Quit: Stay safe!)
[00:56:37] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:57:25] *** Joins: hashfunc102e (~user@162.254.115.155)
[00:59:23] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[00:59:36] *** Joins: z4kpi (~z4kpi@user/zacts)
[01:01:37] *** Quits: freakazoid12345 (~matt@35.136.233.205) (Ping timeout: 250 seconds)
[01:02:27] *** KevinX_ is now known as KevinX
[01:04:44] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-133.cspire.com)
[01:07:12] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[01:09:05] *** Quits: bdax (~tom@0543dbad.skybroadband.com) (Quit: bdax)
[01:09:25] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[01:09:27] *** Joins: highrate (~presonic@user/highrate)
[01:10:01] <pragma-> roxlu: probably undefined behavior from writing outside of objects. valgrind or some memory analyzer might have something to say.
[01:10:47] <roxlu> ok thanks, the best bugs :)
[01:11:02] *** Joins: De4n_Whit3 (~De4n_Whit@165-73-119-36.ip.afrihost.capetown)
[01:11:20] <De4n_Whit3> hello everyone!
[01:12:34] <dave0> maw
[01:14:13] <sham1> wam
[01:15:19] *** Joins: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com)
[01:16:13] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.5) (Ping timeout: 240 seconds)
[01:18:09] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:23:42] *** Joins: crashrep (~crashrep@user/crashrep)
[01:23:48] *** Joins: oxfuxxx (~oxfuxxx@2a01:cb18:5c0:cb00:ccd4:ea7:e733:c5f8)
[01:25:01] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[01:26:52] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:28:08] *** Quits: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net) (Remote host closed the connection)
[01:29:11] *** Joins: noarb (~noarb@user/noarb)
[01:29:49] *** Joins: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net)
[01:37:17] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:41:37] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Remote host closed the connection)
[01:41:56] *** Joins: foul_owl (~kerry@174-21-76-71.tukw.qwest.net)
[01:42:09] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[01:44:35] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[01:45:17] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[01:45:30] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[01:45:35] *** Joins: AStorm (astralstor@bc01n02.hswaw.net)
[01:50:06] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[01:51:55] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:52:17] *** Quits: mahmutov (~mahmutov@37.155.28.224) (Ping timeout: 240 seconds)
[01:54:03] <ASUS> are there any actual use cases for do{}while()
[01:54:12] <ASUS> that can't be done with while
[01:55:16] *** Quits: agoodm (~alan@2a00:23a8:4440:7fb:df03:b984:5cd5:8dac) (Ping timeout: 268 seconds)
[01:55:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:56:38] <fizzie> In a vaguely pseudocodeish notation, there's the `do answer = prompt("what next? "); while (answer == invalid);` case, where you want to prompt for a thing at least once, but keep repeating the question if the ornery user doesn't come up with a valid answer.
[01:56:57] <fizzie> They can of course all be done with while + if + break if need be.
[01:57:36] <Inline> running the body at least one vs. not
[01:57:47] <Inline> for initializing purposes etc.
[01:57:52] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:58:02] <fizzie> Oh, and of course the standard multi-statement macro wrapper.
[01:58:55] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[01:59:09] <fizzie> (You can't turn `#define MACRO do { ...; ...; ...; } while (0)` into a `while` for syntactical reasons.)
[01:59:59] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[02:00:25] *** Joins: jrm (~jrm@156.34.173.250)
[02:01:08] <sham1> ASUS: there's nothing one can do with `do {} while()` that one couldn't do with a simple while-loop. The question is about being expressive and in some things where you need one or more iterations, doing do-while is more expressive
[02:01:23] <ASUS> ok
[02:01:24] <AStorm> hey, is there a more powerful mock generator around for C than CMock? a unit test framework is also fine; what I need is a spy with replacement support (as in spy is a mock which calls the original, one with replacement allows calling something else instead)
[02:01:25] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[02:01:46] *** Joins: crashrep (~crashrep@user/crashrep)
[02:01:58] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:02:04] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:04:36] *** Joins: Tenkawa (~Tenkawa@user/tenkawa)
[02:04:43] *** Parts: Tenkawa (~Tenkawa@user/tenkawa) ()
[02:06:18] <AStorm> perhaps something that supports gcc and clang function wrapping would be great (with some validation capabilities similar to cmock)
[02:08:43] *** Joins: agoodm (~alan@2a00:23a8:4440:7fb:a16f:f872:b29c:47d2)
[02:11:48] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:12:02] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[02:12:41] <AStorm> now, wrap almost does what is needed, but only almost; it will fail if functions call each other within the module
[02:12:47] *** Joins: Praise (~Fat@user/praise)
[02:12:56] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 250 seconds)
[02:13:21] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[02:14:17] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:15:02] *** Joins: inlight (~thomas@157.35.15.187)
[02:15:02] *** Quits: inlight (~thomas@157.35.15.187) (Changing host)
[02:15:02] *** Joins: inlight (~thomas@user/inlight)
[02:16:02] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[02:18:07] <AStorm> hmm it won't work for my case anyway, as I'd have to edit the sources of the original to weaken the symbols and alias them
[02:18:18] <AStorm> unless it's possible to do that with a linker script?
[02:19:44] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[02:20:34] <AStorm> GCC has some pragma for renaming symbols but I think it does not help with the single object file issue
[02:20:47] <pragma-> WHAT!
[02:20:51] <pragma-> oh, carry on.
[02:21:21] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Ping timeout: 250 seconds)
[02:22:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:24:11] <AStorm> yikes, this problem is really gnarly, I see why nobody did it well
[02:24:12] <Inline> omg
[02:24:27] <Inline> instructing the dynamic linker to use ld.bfd lol
[02:25:50] <Inline> no wonder where all those symbols crept in
[02:25:54] <Inline> meh
[02:26:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:26:55] *** Quits: agoodm (~alan@2a00:23a8:4440:7fb:a16f:f872:b29c:47d2) (Remote host closed the connection)
[02:27:13] *** Joins: agoodm (~alan@2a00:23a8:4440:7fb:6245:564b:6f01:4f5b)
[02:27:52] *** gonogo_ is now known as gonogo
[02:28:37] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 240 seconds)
[02:30:40] *** Joins: johnnyreb (~tth@user/johnnyreb)
[02:31:18] *** Quits: argonautx (~argonautx@i5E86735B.versanet.de) (Quit: Leaving)
[02:31:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[02:31:47] <AStorm> considering how to mesh --wrap with --defsym
[02:32:25] *** Quits: Masklin (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Ping timeout: 250 seconds)
[02:32:33] <AStorm> defsym allows rewriting symbols, but then the real symbol is also lost, I'd need an alias
[02:32:54] *** Quits: pizdets_ (~pizdets@183.182.115.213) (Ping timeout: 250 seconds)
[02:33:02] <AStorm> because it's an actual __real_HAL_dosomething that should call __wrap_HAL_dosomethingelse which is in the same module
[02:33:23] <AStorm> I mean HAL_dosomethingelse is in the same module
[02:33:30] *** Quits: hashfunc102e (~user@162.254.115.155) (Ping timeout: 268 seconds)
[02:33:58] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:6907:7874:261b:1cc8) (Quit: Leaving)
[02:34:03] *** Joins: pizdets (~pizdets@183.182.115.47)
[02:36:17] *** Joins: ravella (~ravella@user/ryanavella)
[02:36:42] <AStorm> I'm thinking do defsym thing (or the pragma) to rename all of the original ones wrap, then run objcopy again to rename them as __real
[02:37:08] <AStorm> stinks
[02:37:41] *** Quits: alch (~alch@151.34.213.206) (Ping timeout: 256 seconds)
[02:38:13] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[02:38:20] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[02:39:11] *** Quits: Nutte35 (~Nutte@43.231.30.245) (Read error: Connection reset by peer)
[02:39:23] *** Joins: alch (~alch@151.34.152.224)
[02:40:15] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[02:40:22] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:40:29] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Quit: Leaving)
[02:43:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[02:44:19] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[02:45:17] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[02:46:18] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[02:46:37] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[02:46:38] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[02:47:01] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 245 seconds)
[02:47:20] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Read error: Connection reset by peer)
[02:47:23] *** Joins: FragByte (~christian@user/fragbyte)
[02:47:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:48:26] *** Joins: hashfunc11c4 (~user@162.254.115.155)
[02:51:19] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:53:06] *** Joins: epony (epony@user/epony)
[02:53:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:56:52] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[02:57:19] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[02:59:16] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[03:02:38] *** Joins: soapsudsxx (~soapsudsx@209.221.40.136)
[03:05:57] *** Quits: HisShadow_ (~HisShadow@user/hisshadow) (Ping timeout: 240 seconds)
[03:07:00] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[03:08:27] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:09:14] *** Quits: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi) (Quit: Akuli)
[03:10:59] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:11:28] *** Quits: freep (~freepppp@62.1.79.42.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:12:36] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:14:38] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:14:55] *** Joins: vysn (~vysn@user/vysn)
[03:16:13] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[03:16:13] *** Quits: cation (cation@user/cation) (Ping timeout: 256 seconds)
[03:17:41] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[03:19:02] *** Quits: De4n_Whit3 (~De4n_Whit@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[03:20:27] *** Joins: cation (cation@user/cation)
[03:20:53] *** Joins: FragByte_ (~christian@user/fragbyte)
[03:21:11] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 245 seconds)
[03:21:21] *** FragByte_ is now known as FragByte
[03:21:25] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 240 seconds)
[03:21:50] *** Joins: nkiz- (~nki@adsl-89-217-141-227.adslplus.ch)
[03:22:43] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:23:48] *** Quits: hashfunc11c4 (~user@162.254.115.155) (Remote host closed the connection)
[03:24:25] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Ping timeout: 250 seconds)
[03:24:42] *** Quits: jancoow (~jancoow@user/jancoow) (Read error: Connection reset by peer)
[03:25:12] *** Joins: jancoow (~jancoow@user/jancoow)
[03:26:37] *** Quits: jancoow (~jancoow@user/jancoow) (Remote host closed the connection)
[03:27:54] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[03:30:02] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[03:30:12] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[03:30:20] *** Joins: serbest (~ike@user/serbest)
[03:30:22] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[03:31:19] *** Quits: uskerine (~uskerine@109.190.78.188.dynamic.jazztel.es) (Remote host closed the connection)
[03:32:43] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:33:03] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:34:17] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:38:34] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[03:43:22] *** Quits: ZedHedTe1 (~ZedHedTed@pool-173-76-96-161.bstnma.fios.verizon.net) (Quit: leaving)
[03:43:51] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[03:45:11] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:45:46] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (Remote host closed the connection)
[03:46:36] <tusko> This code is printing double prompts https://pastebin.com/7PvKAWGz
[03:46:43] <tusko> Can anyone tell me why?
[03:47:24] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[03:47:58] <dave0> tusko: fgetc gets one character, whereas when you input you send it two characters (the option + return)
[03:48:26] <tusko> I see, well that's no good
[03:48:40] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[03:48:41] <dave0> tusko: the usual advice is use fgets to read a line
[03:49:06] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 245 seconds)
[03:49:16] <tusko> but then what if a user gives more than one char?
[03:49:22] <dave0> tusko:   char buf[100] = {0}; fgets(buf, 100, stdin); resp = buf[0];
[03:49:47] <tusko> you're wise bro
[03:50:56] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:51:39] <tusko> ugh, now it broke my ctrl-d handling :(
[03:51:43] *** Joins: xiongxin (~Thunderbi@223.104.63.186)
[03:52:59] <tusko> I've been using this https://bpa.st/D5CA to catch Ctrl-D so I can terminate
[03:53:19] <dave0> oh
[03:53:22] <dave0> wait
[03:53:32] <dave0> you can use fgetc, just check for '\n'
[03:54:14] <dave0> eg.   again: resp = fgetc(stdin); if(resp == '\n') goto again;
[03:54:27] *** Joins: jancoow (~jancoow@user/jancoow)
[03:54:35] <dave0> or a do loop if you like that kinda thing
[03:55:18] <fizzie> If you do go with fgets (and people *do* often expect programs to behave in a line-oriented manner), you'll be wanting to check its return value for a null pointer to deal with EOF.
[03:55:26] <tusko> well, now I'm using buf[100] = fgets(buf, sizeof(buf), stdin); resp= buf[0]; valid(resp);
[03:55:49] <tusko> I see, so if fgets returns NULL I can kill it.
[03:56:13] *** Joins: smoke_ (~smoke@user/smoke)
[03:57:23] *** Quits: smoke_ (~smoke@user/smoke) (Client Quit)
[03:57:26] <dave0> tusko: the original problem you had was that you should check for \n ... fgets is just the `usual` answer ... you can use fgetc, just check for return
[03:57:40] *** Joins: balbxiq (~balbxiq@2a02:587:3f4b:4700:c0a2:ae00:f719:b611)
[03:57:50] <tusko> So, here's what I did. Tell me if this is bad practices
[03:58:09] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:58:31] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:59:13] <tusko> https://bpa.st/V7QA
[03:59:31] *** Joins: Wulf (~Wulf@user/wulf)
[03:59:44] <dave0> if the rest of your program relies on fgetc, go ahead and use fgetc
[04:00:42] <dave0> tusko: you usually want   ||   instead of    |    but the rest of the code looks ok
[04:00:57] <tusko> It doesn't really. I do take user commands as chars but I also take in whole strings a lot
[04:01:05] <tusko> reading/writing some buffer
[04:04:11] <tusko> Awesome, thanks guys
[04:05:53] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:07:33] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:07:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:07:33] *** Joins: wroathe (~wroathe@user/wroathe)
[04:07:40] * SamuelMarks finished running and is back now
[04:08:09] <SamuelMarks> fizzie - yeah every byte would be copied twice from the socket. Is there another solution? - Otherwise that's not so badâ€¦
[04:08:46] *** Quits: oxfuxxx (~oxfuxxx@2a01:cb18:5c0:cb00:ccd4:ea7:e733:c5f8) (Ping timeout: 260 seconds)
[04:09:03] *** Quits: balbxiq (~balbxiq@2a02:587:3f4b:4700:c0a2:ae00:f719:b611) (Ping timeout: 250 seconds)
[04:10:03] *** Quits: z4kpi (~z4kpi@user/zacts) (Ping timeout: 256 seconds)
[04:16:51] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[04:17:12] *** Joins: m4v (~znc@ubuntu/member/m4v)
[04:17:17] *** Quits: duds- (~duds-@user/duds) (Remote host closed the connection)
[04:18:13] *** Joins: duds- (~duds-@user/duds)
[04:19:43] <ASUS> Why is Windows programming so painful?
[04:20:13] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:20:16] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[04:20:21] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu) (Ping timeout: 245 seconds)
[04:20:24] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[04:21:50] <wroathe> ASUS: Hysterical raisins.
[04:22:59] <ASUS> and UNIX and C was just designed perfect the first go?
[04:23:09] <ASUS> (almost)?
[04:23:51] <wroathe> The butterfly effect has numerous and far-reaching ramifications
[04:24:31] <SamuelMarks> POSIX is different from almost POSIX and Windows was too busy being proprietary asshats to be compatible with everyone else
[04:24:46] <SamuelMarks> BSD folks literally had to gift them a networking stack for them to be compliant
[04:25:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:25:42] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[04:25:48] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:25:49] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Quit: ZNC - http://znc.in)
[04:25:51] *** Joins: FragByte (~christian@user/fragbyte)
[04:26:09] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[04:26:19] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Remote host closed the connection)
[04:26:46] <fizzie> The other solution is the one where you `read` directly into the buffer you want the bytes to eventually end at. Of course you need to make it slightly larger. And then potentially shrink it down once you know the final size.
[04:27:03] *** Joins: dhch7 (~dhch@185.213.154.165)
[04:27:27] <ASUS> so you can't plug in a pointer to an initializer for a struct?
[04:27:31] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[04:27:40] <ASUS> in place of a string blah[30]
[04:27:46] <ASUS> member of the struct
[04:28:01] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Remote host closed the connection)
[04:28:04] <wroathe> I still can't get over the fact that Windows insists on acquiring an exclusive lock on files, and prevents any modifications while that's happening
[04:28:17] <wroathe> That's the most down right annoying user experience
[04:28:46] <SamuelMarks> wroathe - not if append only
[04:28:51] <wroathe> And when you're trying to delete something and it tells you that your access is denied because of that exclusive lock, and finding out which process holds that lock is a pain in the ass
[04:29:00] <ASUS> You know what they say, "Be what's next"
[04:29:49] <SamuelMarks> wroathe - You can also lock just a region of a file https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-lockfileex
[04:29:50] *** Quits: dhch (~dhch@185.213.154.165) (Ping timeout: 252 seconds)
[04:29:50] *** dhch7 is now known as dhch
[04:29:50] <candide> Title of SamuelMarks's link: LockFileEx function (fileapi.h) - Win32 apps | Microsoft Docs
[04:29:50] <pragma-> wroathe: sysinternals handle.exe
[04:29:54] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[04:29:57] <wroathe> pragma-: Yup, I know
[04:30:02] <wroathe> pragma-: It just annoys me that that's needed
[04:30:16] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[04:30:26] <ASUS> .NET seems to be a wrapper for people too dumb to use Win32 API
[04:30:31] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[04:30:38] <SamuelMarks> fizzie - mmmmm
[04:30:50] <ASUS> all .NET calls are just translated into Windows API calls
[04:31:00] <pragma-> There's also an app called Unlocker that will pop-up a window telling you what processes have a file locked if you try to delete it or whatever while its locked.
[04:31:08] <SamuelMarks> Anyway I've almost got the solution working, just trying to debug a stack-buffer-overflow
[04:31:24] <ASUS> I learned that you can create shellcode using gcc
[04:31:29] <pragma-> It'll even try to forcibly unlock the files and then delete them for you.
[04:31:37] <ASUS> for buffer overflow exploitation
[04:31:41] <pragma-> wroathe: https://unlocker.en.uptodown.com/windows
[04:31:42] <candide> Title of pragma-'s link: Unlocker for Windows - Download it from Uptodown for free
[04:31:43] <wroathe> pragma-: Right, but this shouldn't require third party software
[04:32:00] <pragma-> Pft, it's Windows. 3rd party software makes it bearable.
[04:32:16] <wroathe> pragma-: It should just be part of the default Windows experience. If they insist on having this annoying exclusive lock bullshit, they need to provide more transparency in events where it makes it difficult for you to accomplish the task you were trying to perform
[04:32:16] * pragma- couldn't use Windows without Cygwin.
[04:32:34] <ASUS> The only real reason I use windows is for games
[04:32:42] <nitrix> wroathe, I personally dislike that a running executable cannot be replaced. You must rename it first, then you can take its previous name.
[04:32:43] <ASUS> otherwise I'd probably use linux
[04:32:46] <ASUS> or BSD
[04:32:58] <pragma-> Windows does have a lot of useful apps besides gaming, to be fair.
[04:33:05] <ASUS> like photoshop
[04:33:10] <ASUS> but I learned GIMP
[04:33:10] <wroathe> nitrix: Yikes. I haven't run into that yet.
[04:33:14] <pragma-> Photoshop is dying.
[04:33:19] <ASUS> I can't use photoshop
[04:33:19] <wroathe> But that sounds like something Windows would do
[04:33:26] <ASUS> but I'm good at GIMP
[04:33:39] <pragma-> Photoshop used to be THE image editor. But they've bloated it and the subscription model is dumb. So it's dying.
[04:33:39] <ASUS> I learned how to remove DRM today
[04:33:55] <SamuelMarks> ASUS - Just use imagemagick
[04:33:56] <nitrix> wroathe, If you want to do self-updates, you end up doing that trick and moving your binary, saving your new, relaunching, deleting the old one.
[04:34:20] <ASUS> I just realised I learned jack shit about C at university
[04:34:27] <ASUS> my knowledge of C is still beginner
[04:34:45] <ASUS> even though I did a whole year of it
[04:35:02] <nitrix> ASUS, What do you think the types of 0, '0' and "0" are?
[04:35:33] <wroathe> nitrix: smh
[04:35:36] *** Joins: myon98 (~myon98@user/myon98)
[04:35:37] <ASUS> 0 is int '0' is char, "0" is a null byte terminated char array
[04:35:48] <pragma-> wrong
[04:35:50] <pragma-> '0' is also int
[04:35:53] <nitrix> "a null byte terminated char array" isn't a type.
[04:36:06] <ASUS> oh
[04:36:14] <ASUS> I'm thinking of Java and C#
[04:36:33] <ASUS> I mean
[04:36:46] <nitrix> ,cc a null byte terminated char array x;
[04:36:47] <candide> nitrix: error: unknown type name 'a'
[04:37:07] * pragma- whacks nitrix with a stick
[04:37:10] <ASUS> 0 is int, '0' is char, "0" is char[]
[04:37:15] <ASUS> better?
[04:37:17] <pragma-> '0' still isn't char.
[04:37:24] <ASUS> oh
[04:37:28] <pragma-> "0" isn't char[] either.
[04:38:02] <pragma-> "0" is char[2]
[04:38:05] <nitrix> Little hint, it's a complete type. Not an incomplete type. So it wont be char[] or void or any other absurdities like that.
[04:38:24] <fizzie> SamuelMarks: It's probably easier to explain in code -- here's (again with all error-checking and corner cases omitted, and with the naive realloc-for-every-chunk resize strategy) the two different ways (temporary buffer, and no-extra-copies) of slurping in the entire contents of a file descriptor: https://ideone.com/5Pzue9
[04:38:36] <ASUS> int int pointer
[04:38:37] <ASUS> I dunno
[04:38:47] <nitrix> `pointer` isn't a type.
[04:39:00] <nitrix> ,cc pointer x;
[04:39:01] <candide> nitrix: error: unknown type name 'pointer'; did you mean 'print'?
[04:39:07] * pragma- whacks nitrix with a stick
[04:39:19] <ASUS> int int int
[04:39:24] <ASUS> is that the answer
[04:39:26] <pragma-> Reading is hard.
[04:39:41] <ASUS> everything is just a number
[04:39:43] <ASUS> right?
[04:39:59] <wroathe> pragma-: You're telling me! I can't read.
[04:39:59] <ASUS> I mean in assembly everything is just a number
[04:40:35] <ASUS> just memory locations and addresses
[04:40:43] <ASUS> I mean addresses and data
[04:41:30] <nitrix> Everything is a number from the perspective of information theory. It doesn't mean it's a useful perspective.
[04:44:02] <wroathe> nitrix: What's your number?
[04:45:15] <SamuelMarks> fizzie - Ok give me a sec, was just hacking away at this - https://gist.github.com/SamuelMarks/3f386b61be78895ab8e93ad57b41e802 - will look at yours now
[04:45:16] <candide> Title of SamuelMarks's link: Experi Â· GitHub
[04:45:37] * SamuelMarks just hack-extracted it from his open-source lib for sharing
[04:46:56] <nitrix> wroathe, 0xF095 0DA2 183C 1E29 619F :)
[04:47:35] <pragma-> 24601
[04:48:24] <nitrix> wroathe, I hope you speak fluent GPG.
[04:50:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:50:10] <SamuelMarks> fizzie - I can't run my gist on ideone for obvious reasons :P
[04:50:20] <wroathe> nitrix: I don't, but the universe does.
[04:51:16] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[04:52:53] <SamuelMarks> Iwas debugging a buffer overflow on `bytes = read(client_fd, response, PIPE_BUF);` so I tried `*response` but fixed my error handling along the way and am now getting a -1 from `accept` call with "Bad address" so gotta fix that first
[04:52:53] *** Quits: xiongxin (~Thunderbi@223.104.63.186) (Remote host closed the connection)
[04:53:12] <SamuelMarks> error handling sure is nonstandard and verbose in C
[04:59:54] * SamuelMarks is now adding socket closing and all that fun stuff, and reusing code from his old socket server, maybe that'll fix this issue
[05:00:18] *** Joins: hashfunc95e (~user@162.254.115.155)
[05:03:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:04:26] *** Joins: seninha (~seninha@user/seninha)
[05:05:48] *** Joins: uskerine (~uskerine@109.190.78.188.dynamic.jazztel.es)
[05:06:00] <uskerine> hi, in strncmp, does the n includes the '\0'?
[05:06:26] <uskerine> like if I want to compare the first 4 characters ABCD in ABCDEFG, shall I use 4?
[05:08:09] <SamuelMarks> afaik all the str functions stop at nul
[05:09:03] *** Joins: ferdna (~ferdna@user/ferdna)
[05:10:53] *** A_Dragon is now known as [
[05:10:59] *** [ is now known as A_Dragon
[05:12:00] <uskerine> so it is sort kind of "limit", don't go further
[05:12:08] <SamuelMarks> sentinel
[05:12:09] <SamuelMarks> yeah
[05:13:11] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 250 seconds)
[05:13:35] <SamuelMarks> uskerine - https://www.ibm.com/docs/en/zos/2.1.0?topic=functions-strncmp-compare-strings - "The string arguments to the function should contain a NULL character (\0) marking the end of the string."
[05:13:57] <SamuelMarks> they are also pretty undefined if they don't have that NUL stopper
[05:14:08] *** Joins: z4kpi (~z4kpi@user/zacts)
[05:14:10] <SamuelMarks> (and yes, NUL not NULL because IBM is silly)
[05:14:38] * SamuelMarks understands that `#define NULL 0` is the norm which just confuses the two concepts further
[05:16:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:17:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:17:31] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[05:18:40] <nitrix> It's usually ((void*)(0)), otherwise it'd have the wrong type.
[05:19:18] <nitrix> Also the macro NULL is not the same as a null character (aka NUL, aka '\0').
[05:19:32] <SamuelMarks> yeah that's the point I was making
[05:20:00] <dave0> printf("test %p ", NULL);   is nearly as stupid as ctype not working with chars... you must cast this NULL    printf("test %p ", (void *)NULL);
[05:22:19] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:22:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:22:19] *** Joins: wroathe (~wroathe@user/wroathe)
[05:26:16] <SamuelMarks> anyone got suggestions on my socket server gist?
[05:29:43] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Ping timeout: 256 seconds)
[05:31:40] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-90f1-7f2c-1823-d58c.fixed6.kpn.net)
[05:34:04] <tusko> So, I've got this char* buff and a size_t size, right? I'm trying to make sure buff keeps up with  while(strlen(buff) < size) { buff = realloc(buff, 2*sizeof(buff)); }
[05:34:14] <tusko> feels like I'm doing it wrong tho
[05:34:15] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:a9d7:c052:4356:1941)
[05:35:07] <dave0> tusko: sizeof doesn't work there
[05:35:11] <caze> You probably are.
[05:35:17] <tusko> oh right
[05:35:20] <tusko> strlen
[05:35:26] <tusko> thanks again wizards
[05:35:34] <dave0> tusko: while(strlen(buff) < size) { size = size *2; buff = realloc(buff, size); }
[05:36:10] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-90f1-7f2c-1823-d58c.fixed6.kpn.net) (Ping timeout: 250 seconds)
[05:36:15] <dave0> wait is size the current size of buff?
[05:36:22] <caze> Sure, just pretend realloc can't return NULL.
[05:36:22] <tusko> so, ok
[05:36:48] <tusko> There is a file that I am reading and writing and seeking as long as the user wants. So I recalculate size sometimes
[05:37:57] <caze> tusko: How much of the file do you need to have in memory at once?
[05:38:47] <tusko> You're talking future stuff to me. I open the file with fopen in r+ mode so presumably I'm keeping it all in memory
[05:39:18] <caze> tusko: I'm talking stuff that you should have thought of before you wrote a single line of code.
[05:39:32] <tusko> I know man you're right
[05:39:51] <tusko> I didn't even know only having a portion of the file was an option.
[05:40:02] *** Joins: kish` (~aqua@user/aqua)
[05:40:21] <tusko> I have to let the user seek, read, and write. So they could presumably go anywhere in the file they wanted.
[05:41:29] <ASUS> I finished the codecademy free course on C.
[05:42:01] <dave0> ASUS: how was it?
[05:42:13] <ASUS> I learned some stuff I didn't know.
[05:42:18] <caze> ASUS: int i = 0; printf("%d %d %d %d", i, i++, i, i++); What will be printed?
[05:42:43] <ASUS> 0 0 0 0
[05:43:04] <dave0> it's a zen riddle... there is no answer
[05:43:13] <ASUS> ?
[05:43:15] <caze> ,cc -w int i = 0; printf("%d %d %d %d", i, i++, i, i++);
[05:43:17] <candide> caze: 2 1 2 0
[05:43:29] <ASUS> the hell
[05:43:40] <ASUS> ,cc -w int i = 0; printf("%d %d %d %d", i, i++, i, i++);
[05:43:42] <candide> ASUS: 2 1 2 0
[05:43:55] <dave0> that answer is not the true zen
[05:44:10] <ASUS> Why does C do this?
[05:44:26] <caze> (it's not C)
[05:44:56] <dave0> ASUS: it's an error that the compiler is not required to diagnose
[05:45:06] <ASUS> oh
[05:45:20] <caze> ASUS: int i = 0; i = i++;
[05:45:31] <tusko> @dave0, for some reason I'm segfaulting now
[05:45:33] <caze> ASUS: What is the value of i after the last statement?
[05:45:51] <ASUS> hang on
[05:46:10] *** Quits: uskerine (~uskerine@109.190.78.188.dynamic.jazztel.es) (Remote host closed the connection)
[05:46:17] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:46:17] <ASUS> 1?
[05:46:20] <ASUS> because
[05:46:32] <ASUS> 1 increments after the assignment
[05:46:39] <ASUS> i*
[05:46:53] <caze> ASUS: But what's the value of the expression i++?
[05:47:02] <ASUS> 0
[05:47:21] <caze> ASUS: And that is on the rhs of i =
[05:47:49] <ASUS> ,cc -w int i = 0; i = i++; printf("%d",i);
[05:47:50] <candide> ASUS: 0
[05:48:07] <ASUS> but i was incremented
[05:48:11] <caze> ASUS: So does it do i = 0 first, and then i++? Or does it do i++ first, and then i = 0?
[05:48:18] *** Joins: xiongxin (~Thunderbi@2409:8955:3850:4ca2:dc9b:8c36:4d00:3b8d)
[05:48:40] <ASUS> neither
[05:48:50] <ASUS> it just does something very odd
[05:48:52] <dave0> tusko: char *buff = 0; int alloc = 0;    void grow(int newsize) { while(alloc < newsize) { alloc = alloc * 2 + 1; } void *temp = buff; temp = realloc(temp, alloc); if(temp == 0) perror("realloc"); buff = temp; }
[05:48:52] *** Quits: xiongxin (~Thunderbi@2409:8955:3850:4ca2:dc9b:8c36:4d00:3b8d) (Client Quit)
[05:48:57] <caze> ASUS: int x = 0; int y = x++; What value is assigned to y?
[05:49:19] <ASUS> 0
[05:49:34] <ASUS> postfix ++ is after the statement.
[05:49:42] <tusko> dave0, it really takes all that?
[05:49:48] <ASUS> --x is 1
[05:49:53] <caze> ASUS: So if you do x = x++, what value gets assigned to x?
[05:50:16] <dave0> tusko: yeah pretty much.. checking for errors is boring and tedious but you gotta do it
[05:50:33] <ASUS> it should be 1 because after the statement x should increment
[05:50:43] <ASUS> is this a compiler bug?
[05:50:53] <ASUS> or undefined behaviour
[05:50:59] <caze> ASUS: But then after the increment, x is assigned 0, just like y was.
[05:51:12] <caze> ASUS: It is undefined behavior.
[05:51:45] <tusko> @dave0, for some reason I'm segfaulting now
[05:51:50] <tusko> oops
[05:51:51] <caze> ASUS: Next thing for you to learn: Sequence points.
[05:52:21] <slact[m]> hmm, under what rule would this be undefined behavior?
[05:53:19] <dave0> ,summon fizzie
[05:53:33] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[05:53:50] <ASUS> does Python have undefined behaviour?
[05:54:51] <slact[m]> nvm, it's 2 changes between sequence points
[05:54:55] <dave0> no idea.. i hope not
[05:54:55] <slact[m]> that's undefined alright
[05:55:09] * ASUS is scared
[05:55:15] <tusko> @dave0, I have no idea why but my program just hangs there
[05:55:36] <tusko> while(strlen(buff) < size); grow(buff, 2*size);
[05:55:40] * ASUS wants to run back to #Python
[05:55:51] <ASUS> where there is no/less undefined behaviour
[05:55:53] <dave0> tusko: aha that's a semicolon
[05:55:54] <slact[m]> python can have undefined behavior... imported via a C lib with undefined behavior.
[05:55:59] <ASUS> oh
[05:56:03] <ASUS> but pure python code?
[05:56:15] <SamuelMarks> ASUS - yeah numerical stuff
[05:56:16] <dave0> tusko: call grow() with the size you want
[05:56:24] <ASUS> like overflow
[05:56:33] <ASUS> or float inaccuracy
[05:56:35] <ASUS> right?
[05:56:39] <slact[m]> no, the python spec has no such thing as undefined behavior
[05:56:39] <SamuelMarks> yeah
[05:56:51] <slact[m]> float inaccuracy is well-defined
[05:57:05] <dave0> tusko: you don't need a loop... for example:    char *string = "hello world"; grow(strlen(string) + 1); strcpy(buff, string);
[05:57:11] <ASUS> I'm suddenly getting very scared of C
[05:57:14] <ASUS> very very scared
[05:57:23] <slact[m]> as you should be
[05:57:29] <dave0> divide by zero might be the canonical `undefined behaviour`
[05:57:30] <caze> You should be.
[05:57:36] <dave0> what does python do on divide by 0 ?
[05:57:50] <SamuelMarks> Darn it's defined int(float('inf'))
[05:57:50] <ASUS> ZeroDivisionError: division by zero
[05:57:57] <dave0> ah it catches it
[05:58:00] *** Joins: madder_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[05:58:00] <SamuelMarks> yeh
[05:58:11] <SamuelMarks> ppl wonder why python is so slow
[05:58:13] *** Quits: madder_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Remote host closed the connection)
[05:58:25] <ASUS> not everyone needs a sports car
[05:58:30] <ASUS> I guess is the analogy
[05:58:43] <ASUS> you might crash
[05:58:43] <SamuelMarks> just use fortran
[05:59:06] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Read error: Connection reset by peer)
[05:59:12] <caze> tusko: Why don't you figure out how much RAM you actually need?
[05:59:13] <ASUS> omg
[05:59:17] <dave0> computers are so fast it doesn't matter
[05:59:19] <ASUS> fortran looks disgusting
[05:59:24] <caze> tusko: How much storage.
[05:59:27] <slact[m]> nah, it's more like not everyone needs an internal cumbustion engine that can be disassembled at the push of a button... accidentally... while running it to redline
[05:59:38] <slact[m]> s/cumbustion/combustion/
[05:59:51] <ASUS> get your mind out of the gutter
[06:00:01] <dave0> the trs-80 emulator written in javascript runs faster than the original machine
[06:00:10] <dave0> (my first computer)
[06:00:11] <slact[m]> also you can make the combustion happen outside the engine if you want
[06:00:19] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[06:00:25] <SamuelMarks> dave0 - yeah you better lower that clock speed
[06:00:33] <SamuelMarks> emulators are annoying that way
[06:01:08] *** Quits: justGhost (~justache@user/justache) (Remote host closed the connection)
[06:01:17] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-133.cspire.com) (Ping timeout: 240 seconds)
[06:01:19] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:01:48] *** Joins: justGhost (~justache@user/justache)
[06:02:39] <ravella> Python's slowness isn't just because of the runtime. It is all of the weird design decisions from the 90's that make it a pain to optimize in 2022
[06:02:57] <ravella> like e.g. you can't inline pi as a constant, because other code can redefine pi to be 3
[06:03:19] <slact[m]> Lua has entered the chat
[06:03:53] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[06:05:23] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[06:07:40] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:09:04] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[06:09:17] <SamuelMarks> ravella - actually they're working on that pretty hardcore, and are inlining a whole bunch. I wouldn't be surprised if it catches up to some languages (not C) in the next couple of years
[06:09:19] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[06:09:31] <SamuelMarks> It'll be a Python 4 though IMHO
[06:11:59] <SamuelMarks> static code analysis has gotten fancy through academia and industry. So Guido and others are looking at adding some syntax and restricting existing syntax to enable crazy optimisations to occur
[06:12:21] <ravella> SamuelMarks: I mean something like `import math; math.pi=3`
[06:12:42] <ravella> if I put that at the top of my script, then any dependencies I have can't inline pi
[06:12:50] <SamuelMarks> ravella - Yes and there are implementations of Python that hoist constants up into the binary, by restricting things like that
[06:13:42] <ravella> you can force it to be assigned at runtime: `from random import random; import math; math.pi = random()`
[06:14:02] <ravella> an implementation that forbids that isn't compliant with CPython
[06:14:07] <SamuelMarks> correct
[06:14:11] <SamuelMarks> that's exactly what I'm saying
[06:14:43] <SamuelMarks> They are breaking compatibility with existing CPython to support this in either/both of new CPython and alternative non-compliant implementations
[06:14:53] <SamuelMarks> Without going as crazy as Ruby to Crystal
[06:15:09] <SamuelMarks> (and yes there is Cython and friends and they've existing for many years now)
[06:15:19] *** Quits: hashfunc95e (~user@162.254.115.155) (Remote host closed the connection)
[06:20:10] *** Joins: pulse (~pulse@user/pulse)
[06:20:23] *** Joins: aghast (~aghast@172.58.236.217)
[06:25:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[06:26:17] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:28:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:28:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:28:17] *** Joins: wroathe (~wroathe@user/wroathe)
[06:30:48] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.fixed.vodafone.hu)
[06:33:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[06:33:49] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:34:41] *** Quits: alch (~alch@151.34.152.224) (Read error: Connection reset by peer)
[06:38:00] *** Joins: alch (~alch@151.68.192.202)
[06:38:17] *** Parts: ASUS (~ASUS@user/ASUS) (Leaving)
[06:38:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:38:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:38:55] *** Joins: wroathe (~wroathe@user/wroathe)
[06:40:00] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[06:42:09] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:43:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:44:15] <SamuelMarks> I've got an outer `while(true)` and an inner `do/while` to `read` from the socket. Why is the `read` always -1? - I'm just confused about the condition
[06:44:29] *** Joins: z4kpi (~z4kpi@user/zacts)
[06:44:42] *** Joins: chung (uid498429@id-498429.helmsley.irccloud.com)
[06:45:35] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:46:54] *** Joins: gco (~gco@2601:647:4c00:50e0:c0a7:f1c3:f615:36ef)
[06:48:27] <SamuelMarks> Error handling really makes the code uglier: https://gist.github.com/SamuelMarks/3f386b61be78895ab8e93ad57b41e802#file-server_attempt_1-c
[06:48:29] <candide> Title of SamuelMarks's link: Experiments with simple HTTP socket server in C Â· GitHub
[06:48:46] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[06:49:53] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[06:51:49] <ravella> SamuelMarks: what is PIPE_BUF defined as?
[06:52:05] <cuppajoe> I am writing a small graphical game, where there will be a leaderboard with the top usernames and their scores. I want to save user data in a file somehow, but what format should I use for this case?
[06:54:25] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:29] <aghast> @cuppajoe, "%s\t%n\n"
[06:55:33] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:410e:85a:fc7a:68b5)
[06:56:00] <aghast> (assuming tabs are not valid in usernames, otherwise use some ASCII control character - there are plenty available)
[06:56:17] <cuppajoe> aghast: I would like for the data to remain persistent between game sessions
[06:56:56] <cuppajoe> i just don't know what the best file format is the best to use with C
[06:57:05] <aghast> cuppajoe, sure. Are you worried about the user editing the file while offline, or what?
[06:57:52] <cuppajoe> nothing serious like that. all i need is persistence :)
[06:58:30] <cuppajoe> its not an online game. the data will just be stored in the same directory as the game.
[06:58:41] <tusko> dave0, you still around?
[06:58:49] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:00:19] <aghast> cuppajoe, So `fprintf(scores, "%s\t%d\n", Username, Score);`
[07:02:44] <tusko> I have this code that gets to a place where I try to resize a buffer and just hangs. This is my code: https://bpa.st/IDDA
[07:02:47] <cuppajoe> so each line in the file scores would consist of the username and score, and I could read from the file in a similar way?
[07:04:22] <ravella> tusko: I'm confused, where are you initializing `file`?
[07:04:57] <tusko> oh, I didn't include that snippet out of want for brevity
[07:05:02] <tusko> this is the whole program http://termbin.com/wa2o
[07:07:13] <tusko> The file does get opened in r/w mode though
[07:07:16] *** Joins: Azem (~haise01@user/haise01)
[07:07:21] <chung> cuppajoe: You probable
[07:07:46] <ravella> tusko: well, I don't think this is the issue, but your `int alloc` should probably be size_t
[07:08:47] <tusko> Ok, I fixed that. It just runs up to the point where it prints the file size and then it hangs
[07:09:45] <chung> cuppajoe: You probably read them and store in a linked list of struct then sort the score prior to displaying.
[07:09:54] <ravella> tusko: strlen(buff) looks suspicious, it hasn't been initialized with a null-terminated string
[07:10:12] *** Quits: haise01 (~haise01@user/haise01) (Ping timeout: 250 seconds)
[07:10:47] <tusko> Wouldn't buff = calloc(1024, sizeof(char)); do that?
[07:11:06] <tusko> char* buff = calloc(1024, sizeof(char));
[07:11:15] <ravella> tusko: ah, I see. but then the first char is always 0, so strlen will always be 0..?
[07:11:40] <tusko> interesting, ok, I didn't know
[07:11:59] <tusko> maybe if I go back to malloc
[07:12:12] <ravella> in C, buffers don't keep track of their sizes. You need to store the size separately in a size_t, and keep track of it
[07:12:25] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[07:13:08] <tusko> Sure, but for a char* I'd think strlen() would work
[07:13:10] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:13:21] <ravella> tusko: only if it stores a null-terminated string
[07:13:38] <ravella> strlen() determines the length by searching for the fire null byte
[07:13:45] <ravella> *first null byte
[07:13:46] *** Joins: wroathe (~wroathe@user/wroathe)
[07:14:18] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[07:14:22] <tusko> hm, now I wonder if keeping a separate size_t is better or just making sure all strings written are nullterminated
[07:14:23] *** novns_ is now known as novns
[07:15:50] <novns> some strlen() calls started in 1970s are still searching for a null byte
[07:16:33] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[07:17:05] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:17:39] <ravella> tusko: People get into heated fights about that. My preference is to avoid C strings when possible, and use Pascal-ish strings (i.e. a struct that contains a char* and a size_t)
[07:18:07] <ravella> it makes it easier to deal with buffer growing/shrinking/concat'ing, but harder to interface with string.h and other libc functions
[07:19:03] <gnoo> you could probably return -1 from grow after call perror. that way you won't have to check the size later, just that grow succeeded or not
[07:19:04] <ravella> but I know I'm probably in the minority :)
[07:20:11] <oldlaptop> It's probably a good idea to make sure your pointer+length strings are \0-terminated too.
[07:20:53] <novns> today there is enough memory for everything
[07:21:08] *** Quits: chung (uid498429@id-498429.helmsley.irccloud.com) ()
[07:21:08] <oldlaptop> Right up until there isn't.
[07:21:45] <novns> those days it was a hard decision to keep an additional size value for pascal-like string
[07:21:53] <novns> *strings
[07:22:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:22:31] <novns> when you had some 512KB in total
[07:23:34] <ravella> funny enough, I don't think Unix/PDP-11 would have failed if they had gone with Pascal strings. Sure, each string takes up more space, but you reduce memory in other ways (substrings don't need to be memcpy'd to a new buffer)
[07:24:10] <tusko> Is there some way to have realloc() put a \0 at the end of the resized buffer?
[07:24:45] <oldlaptop> novns: You can probably walk into a store right now and buy yourself a computer with 128 octets of RAM. (Find some consumer product with an attiny in it.)
[07:24:50] <gnoo> tusko: you could probably return -1 from grow after calling perror. that way you won't have to check the size later, just that grow succeeded or not
[07:24:55] <dave0> why store the length with the string? just use a tuple with pointer & size
[07:24:56] <novns> tusko, yes, buffer[size - 1] = '\0';
[07:25:08] <tusko> gnoo, I saw that and added it. Thank you for the suggestion
[07:25:24] <oldlaptop> The ultra-cheap OTP microcontrollers probably are similarly limited, don't know offhand if those are generally developed for with C though. (AVR sure is.)
[07:25:39] <gnoo> so, you won't need the while loop there, right?
[07:25:57] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[07:26:06] <oldlaptop> This is a bit tangential to \0-termination-versus-pointer+size, though.
[07:26:10] <tusko> oh, maybe let me meditate on this a sec
[07:26:56] <tusko> gnoo, I don't fully understand.
[07:27:42] <gnoo> in this: you're checking to see if growing the buffer succeeded or not, right? while(strlen(buff) < size) { grow(buff, size); }
[07:28:18] <tusko> I'm checking if the buffer is smaller than the whole size of the file. If it isn't I grow it to be at least that big.
[07:28:27] <tusko> Since a user might say 'print the whole file'
[07:28:50] <tusko> Or want to write the whole files worth plus some
[07:29:11] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[07:29:56] <gnoo> if you replace that with while(grow(buff,size)){} then it's nearly the same thing because size is constant there
[07:30:12] <tusko> oh I like that
[07:30:25] <gnoo> (although you should probably bail out if there's out enough memory)
[07:30:40] <tusko> Yeah, I haven't even tried to open that can of worms yet.
[07:30:57] <tusko> But a malicious user could just eat up all of my memory this way
[07:31:05] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[07:31:32] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[07:31:32] <gnoo> well the user could do anything it's the os's job to keep programs from getting too hungry
[07:33:49] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[07:33:49] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[07:34:44] <tusko>  I really like your solution
[07:34:47] <tusko> much cleaner
[07:35:41] <gnoo> also, you don't need the else block in main as you're returning from both ifs
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:37:26] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-ccd0-9bc4-6afe-7d4f.fixed6.kpn.net)
[07:37:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:37:26] *** Joins: wroathe (~wroathe@user/wroathe)
[07:41:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[07:41:37] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-ccd0-9bc4-6afe-7d4f.fixed6.kpn.net) (Ping timeout: 240 seconds)
[07:41:41] *** Joins: Grell (~john@ool-4579c605.dyn.optonline.net)
[07:41:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:43:56] *** Quits: gco (~gco@2601:647:4c00:50e0:c0a7:f1c3:f615:36ef) (Quit: ZZZzzzâ€¦)
[07:48:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:48:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:48:16] *** Joins: wroathe (~wroathe@user/wroathe)
[07:49:25] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[07:50:24] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[07:50:49] *** Joins: crashrep (~crashrep@user/crashrep)
[07:51:36] *** Joins: z4kpi (~z4kpi@user/zacts)
[07:53:01] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[07:53:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:53:44] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[07:56:03] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:951f:6006:b851:db30)
[07:56:06] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:59:32] <tusko> gnoo, does that grow function really preserve the value of the buffer or does it wipe it out with a new buffer of random data
[08:02:20] <gnoo> it preserves the value of buffer, i think. you could also just use temp=realloc(buff,alloc);
[08:02:44] <gnoo> but it's equivalent so not really needed.
[08:04:19] <gnoo> one thing i don't know is: how does realloc know how much the old size is so that it copies old contents?
[08:05:38] <aghast> gnoo, the malloc subsystem has to know the sizes of allocated blocks so it can manage them after free. So "it just knows" due to internal data.
[08:07:11] <gnoo> oh, right! can we know that value in C? probably not, right?
[08:07:46] <tusko> The thing is I'd like this function https://bpa.st/MNVQ not to even run if buff is already bigger than newsize
[08:07:56] <aghast> Not in standard C, since the standard doesn't specify an interface for that. Different allocators have different implementations, so you might find one that provides that API, or documents how it stores the data.
[08:08:45] <gnoo> aghast: thanks!
[08:09:12] <gnoo> tusko: you can either pass the old size or check if the old size is sufficient before calling the function
[08:10:49] <aghast> https://codegrepr.com/question/determine-size-of-dynamically-allocated-memory-in-c/
[08:11:00] <dave0> tusko: buff should really be a global variable ... what you have now is a copy of buff which is lost after grow() returns
[08:11:09] <dave0> tusko: you could also make it static
[08:11:10] <aghast> But in general you're better off if you can retain the size yourself.
[08:11:42] <dave0> oh no forget about static
[08:12:09] <dave0> tusko: you could also   return buff;   if you made it   char *grow(char *buff, size_t newsize)
[08:12:39] *** Joins: ironman_ (~ironman@2409:4042:4e8e:a3af:a17d:9693:770a:db5a)
[08:13:56] <dave0> tusko: change the definition of grow to     char *grow(char *buff, size_t newsize)    and change return 0 to   return buff;
[08:13:58] *** Joins: ironman__ (~ironman@2401:4900:1902:192e:cf8c:9904:f6b4:a0d5)
[08:14:34] <dave0> tusko: and you would call it like      char *mem; mem = grow(mem, 1000); strcpy(mem, "hello world"); puts(mem);
[08:14:42] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 260 seconds)
[08:14:45] <dave0> oh whoops   char *mem = 0;
[08:15:03] *** ironman__ is now known as ironman
[08:16:37] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Changing host)
[08:16:37] *** Joins: KevinX (~KevinX@user/KevinX)
[08:17:22] *** Quits: ironman_ (~ironman@2409:4042:4e8e:a3af:a17d:9693:770a:db5a) (Ping timeout: 250 seconds)
[08:18:40] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[08:20:46] <dave0> tusko: https://bpa.st/UAVA
[08:20:51] <dave0> untested
[08:20:56] <dave0> hopefully it'll work
[08:23:34] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[08:23:38] <pgib> or   int *grow(char **buf, size_t newsize)
[08:23:53] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[08:24:30] <pgib> char *mem; grow(&mem, 1000);
[08:25:16] *** Quits: ironman (~ironman@2401:4900:1902:192e:cf8c:9904:f6b4:a0d5) (Quit: Leaving)
[08:25:57] *** Joins: ironman (~ironman@49.36.51.194)
[08:26:09] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[08:26:23] <tusko> thank you all very much
[08:33:50] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[08:35:43] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[08:37:32] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[08:39:35] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:41:28] *** Joins: hanzo (uid532183@user/hanzo)
[08:47:57] *** Joins: serbest (~ike@user/serbest)
[08:51:04] *** Joins: via_c7 (~orangeext@user/orangeextract)
[08:56:40] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[09:01:08] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:13:02] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:15:24] *** Joins: alioui (~medeva293@41.62.235.38)
[09:15:35] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Client Quit)
[09:16:00] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[09:21:43] *** Quits: jkotra (~jkotra@223.230.127.157) (Ping timeout: 256 seconds)
[09:24:16] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:a9d7:c052:4356:1941) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:27:25] *** Joins: ekathva (~ekathva@2001:999:50:cab1:c9df:9caf:a34b:ef34)
[09:32:52] *** Joins: soapsudsxx (~soapsudsx@209.221.40.136)
[09:33:27] *** Joins: jkotra (~jkotra@223.230.127.157)
[09:40:53] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[09:45:24] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[09:48:23] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[09:49:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:49:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:49:02] *** Joins: wroathe (~wroathe@user/wroathe)
[09:50:22] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Ping timeout: 260 seconds)
[09:50:41] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[09:52:15] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[09:54:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:58:46] *** Joins: pingpongball (~Guest77@43.228.192.121)
[09:58:50] <pingpongball> Hello c
[09:58:59] <pingpongball> I was looking on gcc source code
[09:59:04] <pingpongball> I'm compiling some program
[10:00:09] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:01:27] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[10:01:43] *** Joins: teepee (~teepee@openscad/teepee)
[10:01:50] <pingpongball> https://github.com/coreutils/gnulib/blob/cbdb5ea63cb5348d9ead16dc46bedda77a4c3d7d/m4/gnulib-common.m4#L477
[10:01:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:02:21] <pingpongball> can somebody explain what is `-enable-cross-guesses={conservative|risky}`?
[10:02:27] <pingpongball> and what choosing would be best choice
[10:02:44] <ChoHag> Do you like taking unknown risks?
[10:03:07] <ChoHag> Don't look at GNU mind if you want an example of good code.
[10:03:41] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Remote host closed the connection)
[10:04:18] *** Quits: AssKoala (~asskoala@user/asskoala) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:04:25] <ChoHag> Also the comment you linked to give no better an answer than I would.
[10:04:33] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[10:04:33] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[10:04:33] *** Joins: AssKoala (~asskoala@user/asskoala)
[10:04:51] <pingpongball> what does dnl means?
[10:05:28] <ChoHag> Comment.
[10:05:40] <ChoHag> That's M4.
[10:05:56] <ChoHag> GNU are in love with it for unfathomable reasons.
[10:06:35] <ChoHag> https://en.wikipedia.org/wiki/M4_(computer_language)
[10:07:58] <ChoHag> Huh. That calls it a "practical programming language".
[10:09:23] *** pi0_ is now known as pi0
[10:09:33] *** Quits: pi0 (~default@23.95.234.10) (Changing host)
[10:09:33] *** Joins: pi0 (~default@user/pi0)
[10:20:57] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[10:22:34] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[10:24:20] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[10:27:10] *** Joins: freep (~freepppp@188.4.23.166.dsl.dyn.forthnet.gr)
[10:27:58] *** Quits: pingpongball (~Guest77@43.228.192.121) (Quit: Client closed)
[10:29:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:30:09] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[10:35:22] *** Quits: alch (~alch@151.68.192.202) (Read error: Connection reset by peer)
[10:36:03] *** Joins: pingpongball (~pingpongb@43.228.192.121)
[10:39:21] *** Joins: alch (~alch@151.34.156.95)
[10:47:17] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[10:48:16] <nomagno> M4 is fine if you ever desperately need a two-pass preprocessor (M4 first, C preprocessor second)
[10:48:27] *** Quits: pingpongball (~pingpongb@43.228.192.121) (Quit: Client closed)
[10:49:06] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:51:36] *** Joins: pingpongball (~pingpongb@43.228.192.121)
[10:52:04] <sham1> M4 is fine except for the fact that you'll need to use M4
[10:55:43] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[10:56:55] *** Quits: kts (~kts@103.73.237.4) (Quit: Konversation terminated!)
[10:58:14] <ChoHag> M4 is what you use when you hamstring your choice of tools-making tools and need to make tools so that you can make tool-making tools.
[10:58:32] <ChoHag> It should have been abandoned as early as possible.
[10:59:05] <dyeplexer> yo dawg meme irl
[11:00:11] <sham1> M4 is one of the reasons why I find autotools painful
[11:02:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:05:02] <slact[m]> m4 is bad by lack of design
[11:05:12] <slact[m]> but cmake is a complete nightmare by design
[11:05:28] <pingpongball> what is -g , -g3 .... in cflags?
[11:06:20] <slact[m]> type of debug symbols included. for most purposes, which -g flag you pick doesn't matter.
[11:06:53] <sham1> Yeah, you usually just use -g and go on with your day
[11:08:03] <pingpongball> oh ok
[11:08:18] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[11:08:44] <slact[m]> for details, see https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html
[11:09:06] <pingpongball> which is more fast and performant clang or gcc?
[11:10:40] *** Joins: mrig (~mrig@user/mrig)
[11:11:29] <slact[m]> there is no clear answer
[11:12:24] <sham1> Yes
[11:13:08] <dave0> time gcc main.c   time clang main.c
[11:13:26] <ChoHag> On my computer GCC has 4802 source files and LLVM has 28576, so clearly LLVM is better.
[11:13:53] <slact[m]> also llvm has a dragon, and gcc has some stupid cow for a mascot
[11:14:05] <ChoHag> It has a dragon?
[11:14:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:14:11] <ChoHag> Well that solves that then.
[11:14:19] <dave0> what have cows ever done for us?
[11:14:26] <ChoHag> Would you rather compile with a dragon or a cheese?
[11:14:32] <ChoHag> dave0: Steak.
[11:14:38] <sham1> GCC's assembly fragments are like a Scheme while that's not the case for llvm. Clearly GCC wins
[11:15:48] <ChoHag> pingpongball: It's sort of a silly question. By the time it matters to you it won't matter to you. Use whichever one your OS makes easier.
[11:15:48] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:15:57] <sham1> But yeah. WRT. GCC vs Clang, what are we comparing? The quality of the output?
[11:16:04] <slact[m]> llvm builds via a virtual machine, whereas GCC doesn't. we all know containers are superior, and virtual machies are type s of containers. therefor llvm is best suited for microservices and is clearly superior.
[11:16:22] <sham1> Like with speed and performance, the speed of what
[11:16:26] <dave0> sham1: size of the executable
[11:16:33] <ChoHag> Reformulate that sentence to include the word cloud and go get you some VC money.
[11:16:44] <slact[m]> blockchain.
[11:17:07] <sham1> Shut up and take my money!
[11:17:14] <ChoHag> Oh yeah that bandwagon is creaking into gear too.
[11:17:52] <sham1> A compiler where you compile and executale but that executable is an NFT
[11:19:15] *** Joins: ironman_ (~ironman@2401:4900:1902:192e:cf8c:9904:f6b4:a0d5)
[11:19:17] *** Quits: ironman (~ironman@49.36.51.194) (Ping timeout: 240 seconds)
[11:19:23] <slact[m]> all  compilations are published to the blockchain and have to be mined to be validated and distributed. this ensures value-added cloud distribution and end-to-end encryption security.
[11:19:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[11:20:48] <ChoHag> Can we coin an NFT out of the IR?
[11:21:02] <slact[m]> hmm... the executable is an NFT that can only be run once
[11:21:03] <ChoHag> Serialise it, calculate a hash, sell the hash.
[11:21:09] *** ironman_ is now known as ironman
[11:21:40] <slact[m]> ChoHag: the "whatcha doin'" NFT
[11:24:12] <pingpongball> Did richard stallman wrote whole GCC?
[11:24:13] *** Joins: Rounin (~david@84.212.130.215)
[11:24:22] <sham1> Obviously not
[11:24:23] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[11:24:34] <pingpongball> how much did he had written?
[11:25:39] <ChoHag> You can probably do git blame on a repository.
[11:25:56] <ChoHag> Or some equivalent.
[11:26:04] <sham1> Well I don't know if they had saved all of the development history
[11:26:50] <pingpongball> configure: WARNING: cache variable ac_cv_env_CFLAGS_value contains a newline
[11:27:12] <slact[m]> "Stallman was listed as the author but cited others for their contributions, including Jack Davidson and Christopher Fraser for the idea of using RTL as an intermediate language, Paul Rubin for writing most of the preprocessor, and Leonard Tower for "parts of the parser, RTL generator, RTL definitions, and of the Vax machine description."
[11:27:15] <pingpongball> how to know what flag is causing these kind of errors?
[11:28:26] <slact[m]> man writing GCC must've taken a lot of toenails...
[11:28:50] <pingpongball> ah that was ,
[11:29:09] <pingpongball> but i also used to eat from fingers, that part from that nail
[11:29:28] <pingpongball> configure: error: C compiler cannot create executables
[11:29:41] <pingpongball> How can i know what flag may be creating errorrs
[11:30:00] <slact[m]> trial and error
[11:30:32] <ChoHag> That looks like you haven't installed your environment properly.
[11:30:46] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.5) (Ping timeout: 245 seconds)
[11:30:49] <pingpongball> dont call me ididot, i'm not c/c++ expert, just i like doing things
[11:31:04] <pingpongball> `CFLAGS='-o3 -fbranch-probabilities  -fprofile-values -fprofile-reorder-functions -fvpt -frename-registers -fschedule-fusion -fpeel-loops  -fsplit-loops -fversion-loops-for-strides -ffunction-sections -fdata-sections -fstdarg-opt -fsection-anchors -fgcse -fipa-cp -ftree-loop-distribution -floop-interchange -freorder-blocks-and-partition
[11:31:04] <pingpongball> -fprofile-partial-training -fcode-hoisting  -finline-functions -mieee-fp   -fstrict-aliasing -fomit-frame-pointer  -funroll-loops  -momit-leaf-frame-pointer -fprefetch-loop-arrays  -pipe -funswitch-loops -g3  -flto=8 -ffat-lto-objects -fira-region=mixed -march=native'`
[11:31:05] <ChoHag> Plonk.
[11:31:12] <dave0> ugh don't do that!
[11:31:19] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[11:31:35] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[11:32:29] <slact[m]> don't get your panties in a knot, no one called you an idiot
[11:32:55] <ChoHag> Nor an ididot.
[11:32:58] <pingpongball> dave0 i wanted for speed, so i'm adding what can raise speed
[11:33:00] <pingpongball> https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options
[11:33:22] <pingpongball> searching speed , and those who tells,Â  oh man this improve speed, i'm adding all of them
[11:33:47] <ChoHag> Turn on ALL THE THINGS. We're coding at LIGHTSPEED!
[11:34:06] <pingpongball> slact[m] , tell me flags that can improve speed, :)
[11:34:15] <slact[m]> pingpongball: how do you know if your code is running faster?
[11:34:36] <ChoHag> It has these stripes on the side, see...
[11:34:53] <slact[m]> pingpongball: -o3 -march=native -mtune=native, nothing more.
[11:34:55] <pingpongball> slact[m] , as industry standard for optimizing speed
[11:35:47] <slact[m]> pingpongball: It looks like you're trying to answer homework questions. #c-homework can help with that
[11:36:01] <pingpongball> aumm not. but i'llgo there
[11:36:09] *** Joins: aradesh (~aradesh@user/aradesh)
[11:36:18] <pingpongball> nobody
[11:36:59] *** Joins: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:37:20] <dave0> i'm pretty sure it's capital -O3
[11:37:23] <pingpongball> slact[m] only those , why are thereÂ  all flags at all
[11:37:43] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[11:38:15] <slact[m]> pingpongball: https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
[11:38:47] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[11:38:49] <dave0> not sure why my code performs about the same with -O -O2 or -O3
[11:38:56] <dave0> i only ever use -O
[11:39:34] *** Quits: ironman (~ironman@2401:4900:1902:192e:cf8c:9904:f6b4:a0d5) (Ping timeout: 260 seconds)
[11:40:50] *** ironman_ is now known as ironman
[11:40:56] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Client Quit)
[11:43:25] <pingpongball> dave0 ofast
[11:43:41] <Amun-Ra> -Os
[11:43:41] <slact[m]> -Osanec
[11:44:38] <pingpongball> -Os
[11:44:39] <pingpongball> Optimize for size. -Os enables all -O2 optimizations except those that often increase code size:
[11:44:51] <slact[m]> -Osanic enables gofast mode
[11:45:12] <ChoHag> Optimisation only matters, say, 3% of the time.
[11:46:46] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:46:56] <ChoHag> You'll notice the difference between -O's if you compare the output from the -E flag.
[11:47:40] <pingpongball> okguys
[11:47:55] *** Quits: pingpongball (~pingpongb@43.228.192.121) (Quit: "bye")
[11:49:37] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[11:51:16] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[11:53:52] *** Quits: aghast (~aghast@172.58.236.217) (Quit: Leaving)
[11:55:55] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[11:56:41] *** Joins: z4kpi (~z4kpi@user/zacts)
[11:58:30] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[12:00:08] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[12:00:11] *** vancz_ is now known as vancz
[12:02:50] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[12:02:54] *** Joins: Oddity (~Oddity@user/oddity)
[12:04:21] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[12:08:19] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[12:09:49] *** Quits: jack_rabbit (~knusbaum@23.249.37.254) (Ping timeout: 240 seconds)
[12:11:23] *** Joins: tommygn (~devnull@142.167.143.188)
[12:18:12] *** Joins: kts (~kts@103.73.237.181)
[12:18:15] *** Joins: knusbaum (~knusbaum@23.249.37.254)
[12:20:01] *** Joins: suss (~user@user/suss)
[12:22:21] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:27:26] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:30:13] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:33:57] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:410e:85a:fc7a:68b5) (Ping timeout: 240 seconds)
[12:35:21] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Read error: Connection reset by peer)
[12:35:55] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[12:39:27] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.224)
[12:41:15] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[12:41:43] *** Joins: crankslider (~slidercra@user/slidercrank)
[12:43:40] *** Joins: plastico (~plastico@neomutt/plastico)
[12:47:20] *** Joins: orbifx (~Thunderbi@orbitalfox.eu)
[12:48:32] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[12:51:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[12:53:41] *** Parts: alioui (~medeva293@41.62.235.38) ()
[12:54:07] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Remote host closed the connection)
[12:59:20] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[13:00:39] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:00:48] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:951f:6006:b851:db30) (Quit: Leaving)
[13:02:14] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[13:04:45] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 276 seconds)
[13:09:12] *** Joins: nicko (~iClass@222.211.29.29)
[13:11:05] *** Joins: dantob (~dantob@121-200-9-125.79c809.mel.nbn.aussiebb.net)
[13:12:37] *** Quits: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com) (Ping timeout: 240 seconds)
[13:15:29] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:15:55] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:18:33] *** Quits: kts (~kts@103.73.237.181) (Quit: Konversation terminated!)
[13:21:26] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[13:24:11] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[13:27:25] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:30:15] *** Joins: Klinda (~superleag@user/klinda)
[13:33:57] *** Quits: kish` (~aqua@user/aqua) (Quit: laters!)
[13:36:28] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[13:38:13] *** Joins: teepee (~teepee@openscad/teepee)
[13:39:11] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[13:40:22] *** Joins: z4kpi (~z4kpi@user/zacts)
[13:40:41] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[13:41:12] *** Joins: FragByte (~christian@user/fragbyte)
[13:41:58] *** Joins: deekej[m] (~deekej@2001:470:69fc:105::a6c)
[13:43:12] *** Joins: hiovoltage (~hiovoltag@176.88.87.168)
[13:43:53] <orbifx> Anyone making something exciting?
[13:44:20] *** Joins: kts (~kts@103.73.237.181)
[13:46:44] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:49:53] *** Joins: kish` (~aqua@user/aqua)
[13:52:55] *** Joins: hinata (~hinata@2409:4042:2e08:3f67:951f:6006:b851:db30)
[13:56:17] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[13:59:02] *** Quits: alch (~alch@151.34.156.95) (Read error: Connection reset by peer)
[13:59:46] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:d9a0:7c97:c7d6:c477)
[14:00:37] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[14:00:39] *** Quits: dantob (~dantob@121-200-9-125.79c809.mel.nbn.aussiebb.net) (Quit: dantob)
[14:01:59] *** Joins: dantob (~dantob@121-200-9-125.79c809.mel.nbn.aussiebb.net)
[14:02:01] *** Joins: alch (~alch@151.68.195.185)
[14:02:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:02:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:02:15] *** Joins: wroathe (~wroathe@user/wroathe)
[14:02:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:02:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:03:08] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[14:03:50] *** Joins: savolla (~quassel@84.44.28.28)
[14:04:08] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[14:06:20] *** Joins: kts_ (~kts@103.73.237.181)
[14:07:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:07:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[14:07:58] *** Quits: bebyx (~Thunderbi@user/bebyx) (Client Quit)
[14:08:07] *** Joins: bebyx1 (~Thunderbi@user/bebyx)
[14:08:15] *** Quits: kts_ (~kts@103.73.237.181) (Client Quit)
[14:08:34] *** Joins: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no)
[14:09:33] *** Quits: kts (~kts@103.73.237.181) (Quit: Konversation terminated!)
[14:10:01] *** Joins: kts (~kts@103.73.237.181)
[14:10:26] *** bebyx1 is now known as bebyx
[14:10:38] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[14:10:40] *** Joins: eeerik9 (~eeerik9@85-135-222-112.adsl.slovanet.sk)
[14:11:03] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[14:11:32] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[14:11:51] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:12:12] *** Joins: pingpongball (~pingpongb@43.228.192.121)
[14:14:17] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[14:14:47] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[14:15:15] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[14:15:28] *** Joins: \o\ (~i.am@177.132.126.126)
[14:15:47] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[14:16:57] *** Joins: blacked (~blacked@user/blacked)
[14:17:01] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.5) (Ping timeout: 245 seconds)
[14:17:27] *** Quits: pingpongball (~pingpongb@43.228.192.121) (Quit: Client closed)
[14:17:30] *** blacked is now known as pingpongball
[14:19:49] *** Joins: masoudd (~masoudd@user/masoudd)
[14:22:54] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[14:25:01] *** Quits: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.4)
[14:27:12] *** Joins: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no)
[14:29:03] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[14:29:41] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[14:30:43] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8)
[14:31:36] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[14:32:44] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[14:32:51] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:34:07] *** Joins: ekathva_ (~ekathva@2001:999:50:cab1:aaf8:591:5b2d:4252)
[14:34:16] *** Quits: ekathva_ (~ekathva@2001:999:50:cab1:aaf8:591:5b2d:4252) (Remote host closed the connection)
[14:34:17] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:33] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:36:54] *** Joins: X-Scale` (~ARM@66.26.54.77.rev.vodafone.pt)
[14:37:10] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[14:37:21] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[14:38:29] *** Quits: X-Scale (~ARM@167.64.114.89.rev.vodafone.pt) (Ping timeout: 256 seconds)
[14:38:29] *** X-Scale` is now known as X-Scale
[14:38:30] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:43:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[14:44:25] *** Joins: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com)
[14:44:52] *** Quits: pingpongball (~blacked@user/blacked) (Quit: Client closed)
[14:48:02] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[14:50:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:57:42] *** Quits: eeerik9 (~eeerik9@85-135-222-112.adsl.slovanet.sk) (Quit: Lost terminal)
[15:04:29] <supakeen> nothing of exceptional interest or in C, but a small p2p network for sensor data
[15:05:01] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[15:05:09] <tarzeau> supakeen: is it on github?
[15:05:33] * tarzeau was using ruptime until his 2k network got split into 8 smaller networks, so i wrote ruptime+ (which works on the internet)
[15:06:03] *** Joins: seninha (~seninha@user/seninha)
[15:07:13] <supakeen> no, it's not on github until it actually works
[15:07:29] <orbifx> supakeen: what's it written in?
[15:07:56] <supakeen> Go, mostly; there will eventually be a small C library to wrap primitives so bindings in other languages can be made (and so it can actually run on the embedded devices that want to send data).
[15:08:04] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[15:08:09] <supakeen> But I might as well give up before I get there because it'll involve crypto on embedded :)
[15:08:37] <supakeen> The scope is a bit huge which is perfect for a hobby project but not good for making working things!
[15:10:45] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[15:14:38] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[15:22:58] <orbifx> supakeen: some things are more enjoyable kept as hobbies
[15:26:05] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:29:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:30:44] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:49] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:31:32] *** Joins: csrf (~csrf@user/csrf)
[15:32:44] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[15:34:54] *** Joins: masoudd (~masoudd@user/masoudd)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:59] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[15:45:01] *** Joins: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se)
[15:50:27] *** Quits: jkotra (~jkotra@223.230.127.157) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[15:51:07] *** Joins: jkotra (~jkotra@223.230.127.157)
[15:52:12] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[15:53:58] *** Quits: jkotra (~jkotra@223.230.127.157) (Read error: Connection reset by peer)
[15:54:13] *** Joins: jkotra (~jkotra@223.230.127.157)
[15:54:51] *** Quits: agoodm (~alan@2a00:23a8:4440:7fb:6245:564b:6f01:4f5b) (Remote host closed the connection)
[15:56:14] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8) (Ping timeout: 252 seconds)
[15:57:11] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8)
[15:57:35] *** Quits: \o\ (~i.am@177.132.126.126) (Ping timeout: 256 seconds)
[15:57:35] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:01:19] *** Quits: dantob (~dantob@121-200-9-125.79c809.mel.nbn.aussiebb.net) (Quit: dantob)
[16:03:32] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:03:42] *** Quits: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.4)
[16:06:11] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 245 seconds)
[16:07:23] *** Quits: dsrt^ (~dsrt@128-092-160-106.biz.spectrum.com) (Remote host closed the connection)
[16:09:25] *** Quits: hiovoltage (~hiovoltag@176.88.87.168) (Quit: Client closed)
[16:09:47] *** Joins: hiovoltage (~hiovoltag@176.88.87.168)
[16:14:09] *** Joins: eeerik9 (~eeerik9@85-135-222-112.adsl.slovanet.sk)
[16:15:01] *** Quits: nicko (~iClass@222.211.29.29) (Read error: Connection reset by peer)
[16:16:32] *** Joins: argonautx (~argonautx@i5E8672BF.versanet.de)
[16:17:29] *** Quits: orbifx (~Thunderbi@orbitalfox.eu) (Quit: orbifx)
[16:21:12] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Read error: Connection reset by peer)
[16:21:17] *** Joins: zsoltiv__ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[16:24:02] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[16:27:27] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[16:29:12] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[16:32:53] *** Quits: eeerik9 (~eeerik9@85-135-222-112.adsl.slovanet.sk) (Quit: Lost terminal)
[16:34:31] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[16:36:36] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[16:37:56] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[16:37:58] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[16:38:13] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[16:40:14] *** Joins: SudoBash (~SudoBash@45.43.99.99)
[16:42:09] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[16:42:12] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:44:57] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:718b:9b0a:81c:c099)
[16:44:57] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:718b:9b0a:81c:c099) (Changing host)
[16:44:57] *** Joins: skapata (~Skapata@user/skapata)
[16:45:42] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[16:46:21] *** Joins: Everything (~Everythin@37.115.210.35)
[16:47:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9959-7557-180e-ce0c.res6.spectrum.com)
[16:50:24] *** Joins: \o\ (~i.am@187.112.46.243)
[16:51:03] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:51:44] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8) (Ping timeout: 250 seconds)
[16:52:01] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[16:52:08] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:35d2:55bc:78c0:61af)
[16:52:10] <oscurochu> is this correct https://dpaste.com/2K6VBFU4A
[16:52:17] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8)
[16:52:45] <oscurochu> i hope its not too vague. i'd be happy to answer your questions.
[16:54:40] *** Quits: SudoBash (~SudoBash@45.43.99.99) (Quit: Connection closed)
[16:58:24] *** Joins: guvnor (~guvnor@vaudeville.imaginatif.org)
[16:58:47] *** Quits: hinata (~hinata@2409:4042:2e08:3f67:951f:6006:b851:db30) (Quit: Leaving)
[16:59:24] *** Joins: chung (~lim@184.22.24.168)
[17:01:16] <clarity> oscurochu: what's your favorite donkey?
[17:01:59] <oscurochu> donkey
[17:02:18] <oscurochu> Donkey*
[17:02:53] *** Joins: strajder (~strajder@user/strajder)
[17:04:51] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:04:53] *** Joins: trycatch (~tc@user/trycatch)
[17:05:11] *** Quits: kts (~kts@103.73.237.181) (Quit: Konversation terminated!)
[17:07:32] *** Joins: seninha (~seninha@user/seninha)
[17:09:08] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[17:10:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:12:02] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[17:13:32] *** Joins: mrig (~mrig@user/mrig)
[17:14:08] *** Joins: Charadon (~Charadon@155.138.164.183)
[17:14:15] <dave0> eeyore
[17:14:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:16:19] *** Parts: via_c7 (~orangeext@user/orangeextract) (Leaving)
[17:17:09] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:17:23] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[17:19:38] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[17:19:45] *** Joins: inlight (~thomas@157.35.47.39)
[17:19:45] *** Quits: inlight (~thomas@157.35.47.39) (Changing host)
[17:19:45] *** Joins: inlight (~thomas@user/inlight)
[17:29:08] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[17:30:09] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[17:34:51] *** Quits: zsoltiv__ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Read error: Connection reset by peer)
[17:35:00] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:35:28] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:39:14] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-191.cspire.com)
[17:40:07] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:42:26] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:43:10] *** Joins: vysn (~vysn@user/vysn)
[17:43:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:43:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:43:48] *** Joins: wroathe (~wroathe@user/wroathe)
[17:44:54] *** Joins: soapsudsxx (~soapsudsx@209.221.40.136)
[17:46:07] *** Quits: ekathva (~ekathva@2001:999:50:cab1:c9df:9caf:a34b:ef34) (Quit: Leaving)
[17:46:54] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[17:48:41] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Remote host closed the connection)
[17:48:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:50:15] *** Joins: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75)
[17:50:35] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[17:51:47] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:52:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:59:01] *** Joins: kts (~kts@103.73.237.122)
[18:00:34] *** Quits: alch (~alch@151.68.195.185) (Read error: Connection reset by peer)
[18:01:03] *** Joins: X-Scale` (~ARM@83.223.227.198)
[18:01:03] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:02:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[18:03:01] *** Quits: X-Scale (~ARM@66.26.54.77.rev.vodafone.pt) (Ping timeout: 240 seconds)
[18:03:01] *** X-Scale` is now known as X-Scale
[18:03:21] *** Joins: alch (~alch@151.68.163.210)
[18:06:51] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[18:07:05] *** Quits: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75) (Quit: Quantum Condensation Mode Active)
[18:07:08] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[18:07:39] *** Joins: Mocky_J (~jack@27.156.201.249)
[18:08:10] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[18:08:10] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[18:08:18] *** Joins: Techcable (~Techcable@168.235.93.147)
[18:08:29] *** Joins: darkoccultist (~darkone@c-24-21-219-26.hsd1.or.comcast.net)
[18:08:51] *** Quits: darkoccultist (~darkone@c-24-21-219-26.hsd1.or.comcast.net) (Remote host closed the connection)
[18:09:09] *** Joins: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75)
[18:11:57] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:6c7c:40cb:162a:3f75)
[18:12:02] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[18:13:02] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:35d2:55bc:78c0:61af) (Ping timeout: 240 seconds)
[18:14:13] *** Joins: inlight (~thomas@157.35.48.224)
[18:14:13] *** Quits: inlight (~thomas@157.35.48.224) (Changing host)
[18:14:13] *** Joins: inlight (~thomas@user/inlight)
[18:15:17] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 240 seconds)
[18:15:49] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Remote host closed the connection)
[18:17:31] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[18:17:58] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[18:25:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[18:27:32] *** Quits: darkoccultist (~darkone@2601:1c0:ce02:4420:cdbb:abc2:11d3:6b75) (Changing host)
[18:27:32] *** Joins: darkoccultist (~darkone@user/darkoccultist)
[18:28:32] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-191.cspire.com) (Read error: Connection reset by peer)
[18:29:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Client Quit)
[18:31:39] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[18:32:20] *** Xeroine is now known as goated
[18:32:22] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[18:32:40] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[18:36:49] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:37:00] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:37:36] *** Joins: blacked (~blacked@user/blacked)
[18:37:53] *** Guest5214 is now known as robyn
[18:38:02] *** blacked is now known as pingpongball
[18:38:06] *** Quits: robyn (~robyndrak@154.16.118.240) (Changing host)
[18:38:06] *** Joins: robyn (~robyndrak@user/robyndrake)
[18:40:15] *** Quits: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com) (Ping timeout: 250 seconds)
[18:40:23] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[18:43:06] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8) (Ping timeout: 250 seconds)
[18:43:25] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8)
[18:43:48] *** Joins: epony (epony@user/epony)
[18:44:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:49:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:49:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:49:57] *** Joins: wroathe (~wroathe@user/wroathe)
[18:54:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:54:46] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:54:48] *** Joins: vysn (~vysn@user/vysn)
[18:56:01] *** Joins: meator (~meator@user/meator)
[18:56:07] <SamuelMarks> ravella - it's builtin to OS
[18:56:12] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[18:56:19] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[18:57:37] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:58:16] *** Parts: Mocky_J (~jack@27.156.201.249) ("midnight")
[18:58:42] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Remote host closed the connection)
[18:59:01] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[18:59:27] *** Joins: defjam (~eb0t@90.196.141.185)
[19:00:30] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:a1cd:4728:3e9c:f64a)
[19:02:16] *** Parts: pingpongball (~blacked@user/blacked) ()
[19:03:44] *** Joins: pulse (~pulse@user/pulse)
[19:03:48] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[19:04:01] *** Joins: riv (river@tilde.team/user/river)
[19:04:13] *** Quits: inlight (~thomas@user/inlight) (Read error: Connection reset by peer)
[19:04:18] <riv> can you do int main(void){} ? what does it return?
[19:05:12] *** Quits: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com) (Remote host closed the connection)
[19:05:55] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[19:06:15] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[19:06:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:06:48] <pragma-> since c99 onwards, yes. it's the same as returning EXIT_SUCCESS
[19:06:58] <riv> thats dumb
[19:07:05] <pragma-> you're dumb
[19:07:07] *** Joins: lleo (~leo@83.232.58.162)
[19:07:20] <riv> you got me there
[19:07:36] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Quit: Leaving)
[19:09:13] <sham1> I do agree that it's dumn
[19:09:25] <sham1> No other functions in C work like this
[19:09:38] <riv> yeah that part is sus
[19:09:45] <riv> why special case it..
[19:09:49] *** Joins: inlight (~thomas@157.35.48.224)
[19:09:49] *** Quits: inlight (~thomas@157.35.48.224) (Changing host)
[19:09:49] *** Joins: inlight (~thomas@user/inlight)
[19:09:58] <riv> is it really that hard to write 'return 0;' ...
[19:10:08] <pragma-> should have just allowed void main() to do that.
[19:10:13] <sham1> Yeah
[19:10:17] <riv> :O
[19:10:18] <sham1> That would have been clearer
[19:10:21] <riv> void main, good idea
[19:10:29] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[19:11:01] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[19:11:18] *** Joins: wovixo (~wovixo@144.92.194.67)
[19:11:29] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 252 seconds)
[19:13:05] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8) (Ping timeout: 256 seconds)
[19:14:22] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Remote host closed the connection)
[19:18:03] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8)
[19:18:25] *** Joins: wroathe (~wroathe@user/wroathe)
[19:18:40] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-191.cspire.com)
[19:19:13] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[19:19:51] *** Joins: Akuli (~Akuli@87-94-108-27.bb.dnainternet.fi)
[19:21:47] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:21:53] <fizzie> It's the same as returning 0, which is a *success* status, but not necessarily the same as EXIT_SUCCESS.
[19:23:37] <sham1> Has there actually been an environment where EXIT_SUCCESS != 0
[19:23:50] <sham1> Well, I suppose the answer is yes, but I wonder what it is
[19:24:49] <ChoHag> Are exit codes numeric in plan 9?
[19:25:10] <ChoHag> Signals are not IIRC.
[19:25:10] <sham1> Oh yeah, plan9. They allow strings for exit
[19:25:30] <fizzie> return '?'; // I still like that notion of returning single characters
[19:26:54] <sham1> Well, it's not called exit in plan9, but exits
[19:27:19] <sham1> And as said, it takes a string, with NULL (or I suppose just 0, I don't know if plan9 uses NULL) being the success exit
[19:27:46] <sham1> > nil
[19:28:41] *** Joins: shailangsa (~shailangs@host217-39-45-199.range217-39.btcentralplus.com)
[19:28:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:29:09] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[19:34:32] *** Quits: lleo (~leo@83.232.58.162) (Ping timeout: 240 seconds)
[19:34:41] <ioxzev1z> sham1, in C null is 0, NULL is usually (void *) 0. Not sure how you could apply the void * cast to a return value
[19:35:15] *** Joins: wroathe (~wroathe@user/wroathe)
[19:36:24] <clarity> Where in the standard is null defined?
[19:36:33] <ioxzev1z> clarity, can't remember, but
[19:36:36] <sham1> stddef.h IIRC, so that's the relevant section
[19:36:45] <ioxzev1z> '\0', 0, and 00000000 are all null
[19:36:53] <ioxzev1z> NULL is (void *) 0; (usually)
[19:37:13] <ioxzev1z> Uh, the third above being 0b
[19:37:21] <caze> clarity: 6.4.4.4
[19:37:45] <sham1> But yeah, in Plan9 one doesn't exit the program by returning from main, but by using exits. And of course it takes `const char *` as an argument (because it's a string) and thus passing in 0 will be the same as passing in NULL because of course 0 is, as you said, NULL
[19:37:57] <clarity> Oh you mean null character?
[19:38:15] <sham1> Well NUL is also convertable to NULL, yes
[19:38:19] <Inline> return return_value
[19:38:31] <Inline> return <cast_type> return_value ?
[19:38:35] <ioxzev1z> just curious but doesn't ascii define NUL as 0 ?
[19:38:43] <sham1> It does
[19:38:51] <ioxzev1z> yeah just checked
[19:39:08] <sham1> Unicode takes ASCII but it doesn't assign actual names for control characters, making U+0000 <control>
[19:39:18] <ioxzev1z> Inline, the cast doesn't apply there because the cast on a return doesn't actually change the bits that are returned
[19:39:19] <sham1> Although it has the "traditional" name of NULL even so
[19:39:28] <sham1> Well, it can
[19:39:33] <Inline> ok
[19:39:37] *** Joins: lleo (~leo@83.232.58.162)
[19:39:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:39:44] <Inline> so it has to be saved before in a variable
[19:39:50] <ioxzev1z> Inline, a cast works to tell the compiler to treat the bits as a specific type, but the bits stay the same
[19:39:52] <caze> ioxzev1z: But since ASCII isn't required in C, the C spec also defines it.
[19:39:58] <sham1> For example if you cast an integer to a pointer, the implementation is free to convert the underlying bit representation
[19:40:22] <sham1> Because the conversion from integers to pointers is implementation-defined
[19:41:35] <fizzie> ASCII-63 (aka ASA X3.4-1963) defines the character with code 0 as NULL. ;)
[19:41:51] <fizzie> It's only in the 1967 revision where they dropped the second L from the character name.
[19:42:18] *** Joins: crashrep (~crashrep@user/crashrep)
[19:42:22] *** Joins: epony (epony@user/epony)
[19:43:43] <fizzie> (Same with BELL vs. BEL.)
[19:43:45] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[19:43:54] <sham1> But yeah, just because NULL is defined as zero, doesn't mean that the pointer's underlying bits will be all zeroes
[19:44:13] <sham1> Although that is the most obvious, and I'd say sensible, mapping
[19:45:31] <ioxzev1z> sham1, as I understand it, the (void *) on NULL is specifically used such that the implementation can then use what bits it wants
[19:45:34] *** Joins: SudoBash (~SudoBash@45.43.99.99)
[19:47:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:47:07] <ioxzev1z> '\0' is all bits zero, (void *) 0; is a pointer which should be treated as null, but doesn't mean you can't have 00001111 if you want as "null"
[19:47:10] <ioxzev1z> Though I might be wrong
[19:47:26] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[19:47:40] <sham1> That's exactly what I'm saying
[19:47:49] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[19:48:06] <ioxzev1z> I'm agreeing bru
[19:48:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:48:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:48:08] *** Joins: wroathe (~wroathe@user/wroathe)
[19:48:21] <sham1> And thus, in particular doing something like `int *ptr; memset(&ptr, 0, sizeof(*ptr));` is technically unportable yet somewhat common
[19:48:52] <ioxzev1z> What reason would there be to memset a pointer rather than = NULL?
[19:48:57] *** Joins: nuxil (~nuxil@141.195.51.213)
[19:49:47] <ChoHag> The null pointer might not have the value zero.
[19:50:13] <ioxzev1z> ChoHag, what do you mean?
[19:50:58] <ioxzev1z> ChoHag, as just discussed, = NULL; should set the pointer value to whatever a null pointer value is
[19:51:08] <ChoHag> Yes, which may or may not be 0x0.
[19:51:11] <ioxzev1z> Which may not be exactly 0
[19:51:17] <ChoHag> 0x0 is a genuine address remember.
[19:51:18] <sham1> The null pointer *has* the value of zero, by definition. What it *doesn't* have is the property that the bits representing the pointer object are zeroes
[19:51:28] <ChoHag> NULL has the value zero.
[19:51:39] <ioxzev1z> ChoHag, NULL has the value (void *) 0; whatever that may be
[19:52:10] <sham1> All I would hope for is that whatever conversion an implementation does between integers and pointers, that it be a bijection
[19:52:41] *** Joins: epony (epony@user/epony)
[19:52:41] *** Quits: minto (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[19:52:43] <sham1> Like for example doing XOR 0x40000000 or whatever
[19:53:01] *** Joins: minto (~mintograd@47.201.5.61)
[19:53:04] <ChoHag> So memset the value of a pointer to zero and assign the value zero to a pointer are not the same.
[19:53:17] <ChoHag> Sometimes.
[19:53:42] <sham1> Yeah, one just can't assume that setting the underlying bits to zero means that you now have a null pointer
[19:54:05] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[19:54:33] <fizzie> Now, if you want some *real* nitpicking, while an all-bits-zero int object is guaranteed to equal '\0', it may not be the only representation of '\0', or the one you get, say, by initializing an int to '\0'.
[19:54:42] <ChoHag> Also there are function pointers.
[19:56:27] *** Joins: magla (~gelignite@55d4e921.access.ecotel.net)
[19:57:13] <sham1> But yeah, back to my original pondering: I do wonder what would be an example of a system where 0 and EXIT_SUCCESS are different. And Plan9 doesn't count because Plan9 is weird
[19:58:55] <caze> You guys aren't using the correct wording. NULL "compares equal to 0".
[19:59:01] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[19:59:56] *** Joins: ckdCreations (~ckdCreati@147.55.133.136)
[20:00:39] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-191.cspire.com) (Read error: Connection reset by peer)
[20:00:41] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.224) (Ping timeout: 256 seconds)
[20:00:49] <ChoHag> "You simply can't assign a specific address to a pointer in C/C++. However, in the realm of implementation-defined features, the explicit integer-to-pointer conversion is intended to have that effect."
[20:03:09] <ioxzev1z> caze, is NULL not literally #define NULL (void *) 0 ?
[20:03:24] <caze> ioxzev1z: No.
[20:04:04] <ioxzev1z> say whaaaaaaaaaa
[20:05:04] <caze> ioxzev1z: It can be, but it doesn't have to be.
[20:05:31] <sham1> ,c11 7.19p3
[20:05:33] <candide> http://www.iso-9899.info/n1570.html#7.19p3 [Common definitions <stddef.h>] The macros are NULL which expands to an implementation-defined null pointer constant; and offsetof(type, member-designator) which expands to an integer constant expression that has type size_t, the value of which is the offset in bytes, to the structure member (designated by member-designator ), from the beginning of its structure ... <truncated; https://0x0.st/oXlL.txt>
[20:06:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:06:34] <caze> ,c11 6.3.2.3p3
[20:06:35] <candide> http://www.iso-9899.info/n1570.html#6.3.2.3p3 [Pointers] An integer constant expression with the value 0, or such an expression cast to type void *, is called a null pointer constant .66) If a null pointer constant is converted to a pointer type, the resulting pointer, called a null pointer , is guaranteed to compare unequal to a pointer to any object or function. FOOTNOTE.66 The macro NULL is defined in ... <truncated; https://0x0.st/oXl9.txt>
[20:06:53] <ravella> ioxzevlz: there are some exotic platforms (usually embedded) where a NULL pointer points to a non-zero address, but it is still required to "compare equal to 0"
[20:07:33] <caze> Or I guess "compare unequal to a pointer to any object or function"
[20:07:52] <caze> "Any two null pointers shall compare equal."
[20:08:11] <caze> They key is compare, which is not the same as "is", or "equals".
[20:09:00] <ravella> so it isn't required that (intptr_t)(char *)NULL compares equal to (intptr_t)(long *)NULL?
[20:09:03] <caze> It's this wording and the distinction between the words that allows the behavior that you have been describing.
[20:10:05] <sham1> I'd say that if some object compares equal to zero, that it is, indeed, zero. At least logically
[20:11:07] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (Ping timeout: 256 seconds)
[20:11:51] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[20:12:12] *** Joins: wroathe (~wroathe@user/wroathe)
[20:13:04] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[20:13:19] *** Joins: inlight (~thomas@user/inlight)
[20:13:20] <caze> int istwo(int n) { return (n == 2) || (n == 3); }
[20:13:42] <caze> That function will tell you that 2 is equal to 3. But it isn't.
[20:14:04] <sham1> But under that equality relation, it is
[20:14:12] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[20:14:16] <caze> But under memset, it isn't.
[20:14:25] <caze> And that's the distinction.
[20:14:31] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[20:14:36] <sham1> Well, memcmp more like
[20:14:40] <sham1> But sure
[20:16:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:16:57] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[20:23:19] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[20:23:29] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[20:24:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:24:18] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Quit: WeeChat 3.4)
[20:26:28] *** Joins: Burger (~textual@user/burger)
[20:35:49] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3400:dfe7:fd4b:441c)
[20:38:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[20:38:26] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[20:38:34] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[20:41:06] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:46:14] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Remote host closed the connection)
[20:48:20] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[20:51:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:53:35] *** Quits: Burger (~textual@user/burger) (Quit: Textual IRC Client: www.textualapp.com)
[20:53:49] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[20:53:59] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[20:54:05] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:54:11] *** Quits: brdb (~alarm@24.61.226.255) (Ping timeout: 256 seconds)
[20:54:13] *** Joins: tboehme (~tboehme@p200300ce1710ed4180c10c3bbf83411e.dip0.t-ipconnect.de)
[20:54:53] *** Quits: tboehme (~tboehme@p200300ce1710ed4180c10c3bbf83411e.dip0.t-ipconnect.de) (Client Quit)
[20:55:40] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[20:55:56] *** Joins: brdb (~alarm@24.61.226.255)
[20:56:01] <libh> I want to make sure I'm understanding something. A local variable made static WILL NOT be put on the stack. Am I right?
[20:56:42] <riv> yes
[20:57:19] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:79b7:c08:b478:f78d)
[20:58:41] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:29d8:9860:7a6d:9ba2) (Ping timeout: 245 seconds)
[21:07:08] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[21:07:33] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[21:08:22] *** Parts: Earnestly (~earnest@user/earnestly) (WeeChat 3.4)
[21:09:47] <caze> "the stack"
[21:10:59] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[21:11:48] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[21:12:33] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[21:12:40] <nitrix> ,tell libh about stack
[21:12:41] <candide> libh: C does not require implementations to use stacks or heaps. Please refer to the actually defined storage durations, which are four: allocated, automatic, thread and static.
[21:12:43] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[21:14:51] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[21:15:05] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:d9a0:7c97:c7d6:c477) (Quit: fe23)
[21:17:25] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3400:dfe7:fd4b:441c) (Ping timeout: 240 seconds)
[21:20:01] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[21:21:47] <caze> libh: Static variables have lifetimes that persist from the start of program execution to end of program execution.
[21:22:28] <caze> libh: This is different from automatic variables that have lifetimes that start from their declaration to the closing } of the block.
[21:24:18] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 260 seconds)
[21:25:21] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 250 seconds)
[21:27:18] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[21:32:14] <caze> libh: For instance, if you have a loop like: for (int i = 0; i < 10; i++) { int x; } One way to look at this is that you have ten diffedrent variables that are each named x.
[21:35:08] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:37:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:41:21] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[21:42:20] *** Joins: Guest9 (~Guest9@2601:406:303:e150:bcb7:778e:77f3:f8d4)
[21:43:23] *** Joins: meator (~meator@user/meator)
[21:48:34] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 250 seconds)
[21:49:57] *** Quits: omegatron (~some@p5b056cb8.dip0.t-ipconnect.de) (Quit: Power is a curious thing.It can be contained, hidden, locked away,and yet it always breaks free.)
[21:50:33] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[21:51:06] *** Joins: DavidMilestone (~DavidMile@122.179.209.177)
[21:52:15] *** Parts: chung (~lim@184.22.24.168) ()
[21:52:41] *** Joins: wyfnt (~wyfnt1232@103.214.137.74)
[21:54:49] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[21:55:30] *** Joins: omegatron (~some@p5b056cb8.dip0.t-ipconnect.de)
[21:58:34] *** Quits: alch (~alch@151.68.163.210) (Read error: Connection reset by peer)
[21:59:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:59:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:59:52] *** Joins: wroathe (~wroathe@user/wroathe)
[22:02:40] *** Joins: alch (~alch@151.34.136.178)
[22:04:26] *** Quits: cmburn (~Charlie_B@2601:441:4c00:67d:a1cd:4728:3e9c:f64a) (Read error: Connection reset by peer)
[22:05:52] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[22:07:59] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[22:09:14] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[22:09:17] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[22:10:20] *** Joins: zsoltiv__ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[22:10:27] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Read error: Connection reset by peer)
[22:12:36] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:15:09] *** Quits: Akuli (~Akuli@87-94-108-27.bb.dnainternet.fi) (Quit: Akuli)
[22:16:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:17:01] *** Joins: Akuli (~Akuli@82-203-163-139.bb.dnainternet.fi)
[22:17:19] *** Joins: sokan_ (~sokan@2a02:587:9e0b:9500:227:eff:fe16:865d)
[22:18:03] *** Quits: sokan (~sokan@85.73.225.30) (Ping timeout: 256 seconds)
[22:18:03] *** sokan_ is now known as sokan
[22:20:12] *** Quits: nuxil (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[22:20:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2)
[22:23:00] *** Joins: nuxil (~nuxil@141.195.51.213)
[22:23:48] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:24:11] *** Quits: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[22:24:45] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Quit: Leaving)
[22:25:52] *** Joins: AlexisTP (~AlexisTP@92.57.44.63)
[22:27:50] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:28:14] *** Joins: savolla (~quassel@88.227.92.215)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:30:09] *** Quits: lleo (~leo@83.232.58.162) (Ping timeout: 250 seconds)
[22:30:24] *** Joins: crashrep (~crashrep@user/crashrep)
[22:30:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.23)
[22:30:54] *** Joins: epony (epony@user/epony)
[22:31:09] *** Joins: vicfred (~vicfred@user/vicfred)
[22:33:57] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[22:35:27] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[22:35:32] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[22:35:44] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[22:36:25] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[22:38:38] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e5ab:a286:27f1:6ff2) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:42:05] *** Joins: tiotags (~tiotags@user/tiotags)
[22:45:48] *** Joins: Rick179 (~Bob@188.243.43.145)
[22:48:52] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[22:50:15] *** Joins: useretail (~useretail@185.132.19.151)
[22:50:18] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[22:50:33] *** Joins: useretail (~useretail@185.132.19.151)
[22:50:37] *** Quits: wyfnt (~wyfnt1232@103.214.137.74) (Ping timeout: 240 seconds)
[22:52:49] *** Quits: nuxil (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[22:53:58] *** Joins: inlight_ (~thomas@157.35.48.224)
[22:54:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:56:02] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad42:8d8e:a97e:d554)
[22:57:05] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:57:24] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[22:57:49] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[22:58:17] *** Quits: AlexisTP (~AlexisTP@92.57.44.63) (Ping timeout: 256 seconds)
[22:58:24] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[22:59:05] *** Quits: useretail (~useretail@185.132.19.151) (Quit: Leaving)
[22:59:09] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[23:00:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8) (Ping timeout: 250 seconds)
[23:01:20] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:9ab:4940:4574:a1f8)
[23:01:41] *** Quits: DavidMilestone (~DavidMile@122.179.209.177) (Quit: Client closed)
[23:03:24] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[23:03:53] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[23:04:36] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:6c7c:40cb:162a:3f75) (Quit: This computer has gone to sleep)
[23:04:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[23:04:51] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[23:05:24] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[23:06:01] <oscurochu> why is this channel so dead?
[23:06:10] *** Joins: rgrinberg (~textual@187.194.14.9)
[23:06:31] <Matt|home> oscurochu : because im busy, what's up
[23:06:57] *** Joins: nuxil (~nuxil@141.195.51.213)
[23:07:03] <slact[m]> 'cause C devs have jobs
[23:07:16] *** Joins: cosimone (~user@93-47-230-95.ip115.fastwebnet.it)
[23:07:16] <nitrix> It'd be chaos if all 844 of us wrote at the same time.
[23:07:22] *** Joins: LuKaRo (~LuKaRo@p200300dfa72f4bb300000000000001f9.dip0.t-ipconnect.de)
[23:07:25] <clarity> cause all the noobs are writing javascript and python
[23:07:47] <oscurochu> is there a way it improve this? like have one loop instead of two? https://dpaste.com/B6E5UXW36
[23:09:49] <ChoHag> It's 1930 on Friday.
[23:09:53] <ChoHag> Everybody's out.
[23:09:58] <clarity> :<
[23:10:31] <sham1> I'm in
[23:12:12] <apotheon> oscurochu: first improvement -- don't use atoi()
[23:12:44] <apotheon> try strtonum() instead
[23:13:38] <apotheon> use `int *array` instead of `int* array`
[23:14:17] <apotheon> use a better name than "array" for an array as a standard rule; describe what's meant to be in that array
[23:14:43] <oscurochu> im following buildyourownlisp.com and thats the format they use. im just trying to keep it consistent with the guide im following. they actually do mention that their format is wrong haha
[23:15:10] <apotheon> it might make more sense to use calloc instead of malloc
[23:15:38] <riv> fuse the loops together
[23:15:42] <riv> then you don't need to do malloc
[23:15:49] <ski> `array' isn't `free'd
[23:15:49] <apotheon> that too, I guess
[23:16:00] <apotheon> okay, they're getting faster than me
[23:16:10] <ski> "like have one loop instead of two?" -- yes
[23:16:11] <apotheon> I'm a little under the weather, so I'm going to stop before I give bad advice.
[23:16:25] <clarity> apotheon's nick always reminds me of a fortune cookie in shadow warrior..
[23:16:27] <apotheon> but *definitely* don't use atoi
[23:17:15] <ski> also, why is the return type `long', when you're finding the minimum of `int's ?
[23:17:23] <NRK> oscurochu: yes, keep track of minimum in your initial loop
[23:17:48] *** Quits: Rick179 (~Bob@188.243.43.145) (Quit: Leaving)
[23:17:49] <oscurochu> this is my first time writing c, so the whole memory thing is kind of new to me and confusing. i've tried learning c a few times and the memory thing is usually the reason i gave up. this is the most c i've ever written so far now. haha
[23:17:59] <ski> perhaps you should use `strtol' ?
[23:18:12] <oscurochu> can you show me an example of how i'd use malloc?
[23:18:20] <NRK> `int min = INT_MAX;` and then compare it inside the first loop
[23:18:57] <NRK> your malloc size is sus as well
[23:19:11] <ski> oscurochu : how's `mpc_ast_t' defined ?
[23:19:47] <apotheon> Why strtol instead of strtonum?
[23:19:57] <oscurochu> what if i used unsigned int or long? is there a MAX_LONG MAX_UNSIGNED?
[23:20:00] <apotheon> oh, wait, that's an OpenBSD extension
[23:20:02] <apotheon> crap
[23:20:12] <apotheon> whether it's elsewhere is up in the air, I guess
[23:20:15] *** Joins: gproto23_ (~gproto23@user/gproto23)
[23:20:24] <clarity> -lbsd
[23:20:28] <apotheon> yep
[23:20:28] <ChoHag> Yeah but they gave it away like Volvo gave away the seatbelt.
[23:20:30] <clarity> I'd have to check musl
[23:20:30] <ChoHag> No takers.
[23:20:36] <oscurochu> its just numbers in the array
[23:20:57] <NRK> oscurochu: do you realize what sizeof does?
[23:21:32] <NRK> it doesn't give you length of an array elements just FYI
[23:21:53] <oscurochu> i know, thats why its confusing how to allocate memory
[23:22:28] <apotheon> I'm not a fan of the way strtol requires explicitly clearing errno before use if you want to be able to check for errors.
[23:22:50] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 260 seconds)
[23:23:01] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[23:23:09] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[23:23:51] <NRK> oscurochu: ok here's a better question. how many ints do you think you allocated in your malloc?
[23:23:52] <ski> oscurochu : `LONG_MAX',`UINT_MAX'
[23:24:20] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:24:37] <oscurochu> its based on user input
[23:25:01] *** Joins: z4kpi (~z4kpi@user/zacts)
[23:25:57] <NRK> `printf("allocated %zu bytes; which can hold %zu ints", sizeof(t->children[i]), sizeof(t->children[i]) / sizeof(int));`
[23:26:07] <ski> oscurochu : that's not what the question was
[23:26:58] <NRK> oscurochu: put that printf after the malloc and see if you actually allocation proper space
[23:27:30] <NRK> i highly suspect you're underallocating and overrunning the buffer
[23:29:47] *** Quits: rgrinberg (~textual@187.194.14.9) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:30:19] *** Joins: inlight (~thomas@157.35.48.224)
[23:30:19] *** Quits: inlight (~thomas@157.35.48.224) (Changing host)
[23:30:19] *** Joins: inlight (~thomas@user/inlight)
[23:32:33] <oscurochu> allocated 8 bytes; which can hold 2 ints
[23:32:52] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[23:33:02] <oscurochu> it works as expected though, but thats probably just luck
[23:33:25] *** Quits: inlight_ (~thomas@157.35.48.224) (Ping timeout: 256 seconds)
[23:33:39] <NRK> that's totally out of bound access...
[23:34:14] *** Joins: Akiva (~Akiva@user/Akiva)
[23:35:05] <NRK> even if the loop runs only once, you've set `i` to 2. so "array[i]" is accessing "array[2]"
[23:36:11] <ski> ,tias
[23:36:12] <candide> "Try It And See" may work in other languages, but not in C due to the nature of undefined behavior/unportable code. Such coding-by-experimentation often leads to situations such as "But it worked fine earlier!" and/or "But it worked on my machine!". https://ramblings.implicit.net/c/2014/04/20/c-is-not-a-try-it-and-see-language.html
[23:36:14] <NRK> it's basically commiting memory corruption.
[23:36:20] <oscurochu> i dont like that strtol requires a pointer, even though i only need the return value. i would immediately be doing free() on the pointer after strtol
[23:37:03] <oscurochu> should i always start an array at 0?
[23:37:14] <clarity> Umm no you don't need to free it
[23:37:21] <oscurochu> oh
[23:37:30] <ski> `atoi' and `atol' also requires a pointer
[23:37:31] <NRK> hmm, don't take this the wrong way. but you should slow down and get the basics of C first.
[23:38:08] <NRK> it's a "dangerous" language and trying to learn by just doing things is not a good idea
[23:38:13] <ski> oscurochu : `free' on which pointer ?
[23:38:21] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:38:21] <SamuelMarks> hi
[23:38:25] <ski> lo
[23:38:39] <oscurochu> strtol( , **endptr)
[23:38:47] <ski> just pass `NULL'
[23:39:28] <ski> (if you're sure there's no invalid characters in your string)
[23:40:10] <oscurochu> when i pass NULL to strtol i get too few arguments to function â€˜strtolâ€™
[23:40:25] <ski> you also need to pass the base
[23:41:19] <oscurochu> whats the base? 10?
[23:41:32] <clarity> if base 10 is what you want
[23:41:35] <ski> if you're reading decimal numerals, yes
[23:42:24] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[23:42:57] *** Joins: DavidMilestone (~DavidMile@122.179.209.177)
[23:43:29] *** Joins: useretail (~useretail@185.132.19.151)
[23:43:39] <oscurochu> so how do i use malloc with this example? (btw, i've found i dont even need the array, but im sure this will come up again)
[23:43:58] <clarity> You would use calloc
[23:44:10] <clarity> int *array = calloc(number_of_elements, sizeof *array)
[23:44:39] <clarity> Or reallocarray
[23:44:47] <oscurochu> i dont know the number of elements
[23:44:52] <clarity> Of course you do
[23:44:58] <oscurochu> oh, i?
[23:44:58] <clarity> You must know if you want to allocate space for them
[23:45:31] <oscurochu> so i'd have to run a loop to count the elements before creating an array to store them?
[23:45:53] <clarity> I guess, if that's how you can figure out how many elements you have.
[23:46:09] *** Quits: darkoccultist (~darkone@user/darkoccultist) (Quit: Quantum Condensation Mode Active)
[23:46:15] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:46:20] <NRK> no, u allocate as much as you think u will need. and if you need more, you grow the array.
[23:46:28] <ski> you "know the number of elements" doesn't mean you know it, when you're writing the program. it means that, at that point in execution, at run-time, you'll know the number, and you are able to express this run-time dependent number as an expression, in your source code
[23:47:03] <ski> (this is why i asked for the definition of `mpc_ast_t')
[23:47:32] *** Joins: de-facto (~de-facto@user/de-facto)
[23:48:44] <ski> hmm .. i guess `mpc_ast_t' is a tree type ?
[23:48:54] <ski> did you intend for this `min' function to be recursive ?
[23:49:25] <ioxzev1z> Where the code at?
[23:49:32] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) (Ping timeout: 256 seconds)
[23:49:54] <ski> <oscurochu> is there a way it improve this? like have one loop instead of two? https://dpaste.com/B6E5UXW36
[23:50:12] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[23:50:26] *** Quits: DavidMilestone (~DavidMile@122.179.209.177) (Quit: Client closed)
[23:50:46] <oscurochu> i could make it recursive. it really doesnt matter if it is or not. this is all just for learning's sake and isnt necessarily a serious project
[23:50:49] <SamuelMarks> How do I handle errors in C? - `if((code) == -1) { int _code = fputs(strerror(errno), stderr); if (_code == EOF) { fputs(strerror(errno), stderr) } } `
[23:51:00] <SamuelMarks> but that's impossibru
[23:51:11] *** Joins: epony (epony@user/epony)
[23:51:15] <SamuelMarks> Because it would be infinite error printing -> error fail to print
[23:51:35] <ioxzev1z> Not impossibru, just think logically
[23:51:37] <ski> oscurochu : "it really doesnt matter if it is or not" -- it matters, in the sense of handling more possible inputs, or less possible inputs. if you mean to handle arbitrary trees, then you'd better be recursive (or simulate your own recursion ..)
[23:52:16] <SamuelMarks> ioxzev1z - So the first `fputs` could fail, so then I add a second `fputs` to print the error, but the second one could fail, and so on ad-infinitum
[23:52:36] <clarity> Well, what do you want to do if writing to strerr is not possible?
[23:52:39] <nitrix> SamuelMarks, You can silence the error, log it to a file, retry or halt the application.
[23:52:40] <ioxzev1z> if(err) { print_muh_error(); exit() }
[23:53:01] <SamuelMarks> ioxzev1z - But how do I handle error failing to print?
[23:53:07] <nitrix> With code.
[23:53:08] <clarity> abort()
[23:53:33] <SamuelMarks> not sure that's what I'm asking for clarity
[23:53:35] <ioxzev1z> SamuelMarks, if the print fails then exit/abort is literally the only option
[23:53:44] <SamuelMarks> kk
[23:53:53] <NRK> you're the first person ive met who's concerned about print failing
[23:53:53] <clarity> It's not literally the only option
[23:53:53] <SamuelMarks> Just didn't know if there was something else avail
[23:53:57] <ioxzev1z> Like with malloc returning NULL you will 99.99% of the time just abort
[23:53:58] <clarity> You could literally ignore it and move on
[23:54:10] <ioxzev1z> SamuelMarks, you very rarely need to check print return value
[23:54:17] *** Quits: Guest9 (~Guest9@2601:406:303:e150:bcb7:778e:77f3:f8d4) (Quit: Client closed)
[23:54:25] <SamuelMarks> NRK - I'm trying to handle all the possible errors in my program (well, without writing a proof and model checker that is to say)
[23:54:31] <nitrix> SamuelMarks, Handling not being able to write to stderr isn't complicated. fprintf tells you when it fails, you can check the result. You have all the tools you need. All that's left is determining what "handling" entails. What do you want to do when you can't write to stderr?
[23:55:11] <clarity> Yes, the right question to ask is what's appropriate for your application?
[23:55:18] <SamuelMarks> nitrix - Is there a standard solution? - Should I just pass on the integer return all the way up to main? - Which failure code do I give, the first, second, or last error?
[23:55:19] <clarity> There's no one right answer
[23:55:41] <clarity> The standard solution is to not give a crap about printf to stderr failing
[23:56:12] <NRK> if you're in an unstable system where print is failing, i dunno if I'd trust main return code..
[23:57:36] <ioxzev1z> SamuelMarks, if you're writing a library you want to pass errors back and forth, but with a program, if something fails such that you cannot go on, you exit
[23:57:57] <clarity> Libraries generally speaking shouldn't be writing to stderr anyway
[23:58:14] <ioxzev1z> clarity, by that I mean return values, not printing
[23:58:17] <clarity> Sure
[23:58:51] *** Quits: argonautx (~argonautx@i5E8672BF.versanet.de) (Quit: Leaving)
[23:59:38] <nitrix> SamuelMarks, Something somewhere eventually has to give up. Otherwise you'll end up digging yourself a hole and bubbling the problem down to what's essentially physics with electrons and quantum mechanics.
