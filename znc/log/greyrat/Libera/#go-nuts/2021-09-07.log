[00:03:18] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:04:18] *** Joins: flynn (~mcbloch@user/flynn)
[00:06:37] *** Quits: milosz_ (~milosz@user/milosz) (Ping timeout: 252 seconds)
[00:07:17] *** Quits: ramen23 (~ramen23@56.pool92-178-150.dynamic.orange.es) (Quit: Quit)
[00:13:35] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[00:13:44] <bodhi> hello people
[00:13:52] <bodhi> how are you all doing :-)
[00:15:56] *** Quits: sevla (~platen@user/sevla) (Ping timeout: 250 seconds)
[00:20:20] *** Joins: sevla (~platen@user/sevla)
[00:21:39] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[00:22:24] *** CommunistWolf is now known as CovidWolf
[00:23:48] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[00:26:29] *** CovidWolf is now known as CommunistWolf
[00:27:43] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[00:31:02] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7)
[00:32:43] *** Joins: djo_ (~djo@public-nat.it.pasteur.fr)
[00:33:15] *** Quits: brooks45 (~bswinnert@containers.neptunenetworks.org) (Quit: The Lounge - https://thelounge.chat)
[00:33:41] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-71b7-bdff-34f7-41d7.inf6.spectrum.com) (Ping timeout: 252 seconds)
[00:34:12] *** Joins: brooks45 (~bswinnert@containers.neptunenetworks.org)
[00:35:20] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 252 seconds)
[00:42:58] *** Quits: sevla (~platen@user/sevla) (Ping timeout: 252 seconds)
[00:44:33] *** Joins: sevla (~platen@user/sevla)
[00:49:55] *** Quits: djo_ (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[00:50:35] *** Quits: mooff (~mooff@awful.cooking) (Quit: Quit)
[00:50:52] *** Joins: mooff (~mooff@awful.cooking)
[00:51:32] *** Quits: sevla (~platen@user/sevla) (Ping timeout: 256 seconds)
[00:52:03] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:53:17] *** Joins: jpw (~jpw@user/jpw)
[00:56:27] *** Joins: djo (~djo@public-nat.it.pasteur.fr)
[00:57:27] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:01:26] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[01:02:31] *** Quits: mooff (~mooff@awful.cooking) (Quit: Quit)
[01:02:51] *** Joins: mooff (~mooff@awful.cooking)
[01:03:52] *** Quits: zwr (~zwr@2804:d45:b966:fb00:38de:c296:2fbf:c2fe) (Ping timeout: 252 seconds)
[01:04:41] *** Joins: zwr (~zwr@2804:d45:b966:fb00:910a:d889:ae80:3966)
[01:12:30] *** CommunistWolf is now known as CovidWolf
[01:21:22] <b0nn> o/ bodhi
[01:24:57] *** CovidWolf is now known as CommunistWolf
[01:29:06] *** Joins: sevla (~platen@user/sevla)
[01:29:10] *** Quits: dalan623 (~dalan@14-201-241-42.tpgi.com.au) (Ping timeout: 252 seconds)
[01:41:20] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Quit: WeeChat 3.2.1)
[01:42:26] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[01:43:50] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[01:48:39] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.251)
[01:54:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:54:53] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[01:55:12] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[01:55:23] *** Joins: flynn (~mcbloch@user/flynn)
[01:55:59] *** Joins: oxum (~oxum@106.203.195.217)
[01:57:50] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[02:00:48] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 250 seconds)
[02:08:36] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[02:18:57] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.251) (Quit: mikoto-chan)
[02:19:14] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.251)
[02:20:40] *** Quits: sevla (~platen@user/sevla) (Ping timeout: 240 seconds)
[02:22:37] *** Joins: sevla (~platen@user/sevla)
[02:24:03] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:24:34] *** Quits: dsrt^ (~dsrt@68.101.54.227) (Ping timeout: 240 seconds)
[02:32:44] *** Joins: goldfish_ (~goldfish@user/goldfish)
[02:35:10] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[02:42:49] *** Quits: jer0me (~jerome@176-149-34-153.abo.bbox.fr) (Ping timeout: 248 seconds)
[02:43:14] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:43:40] *** Quits: aead (~aead@user/aead) (Ping timeout: 240 seconds)
[02:47:21] *** Joins: christophergray (~christoph@190.148.50.1)
[02:52:28] *** Quits: djo (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[02:58:08] *** Joins: djo (~djo@public-nat.it.pasteur.fr)
[03:07:32] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 250 seconds)
[03:17:24] *** Joins: X-Scale` (~ARM@128.229.28.37.rev.vodafone.pt)
[03:17:32] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Quit: WeeChat 3.2.1)
[03:18:34] *** Quits: X-Scale (~ARM@238.72.108.93.rev.vodafone.pt) (Ping timeout: 240 seconds)
[03:18:42] *** X-Scale` is now known as X-Scale
[03:23:39] *** Quits: djo (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[03:23:55] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[03:29:12] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 250 seconds)
[03:30:36] *** Quits: christophergray (~christoph@190.148.50.1) (Quit: WeeChat 3.2)
[03:32:22] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:48] *** Joins: jsrnop (~mark@user/jsrnop)
[03:34:40] *** Joins: jeromenerf (~jerome@176-149-34-153.abo.bbox.fr)
[03:41:14] *** Quits: KekSi (~KekSi@x4db49e56.dyn.telefonica.de) (Ping timeout: 252 seconds)
[03:42:08] *** Joins: goldfish__ (~goldfish@user/goldfish)
[03:45:01] *** Quits: goldfish_ (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[03:45:13] *** Joins: KekSi (~KekSi@x4dbdeb7c.dyn.telefonica.de)
[03:52:43] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Ping timeout: 250 seconds)
[03:53:40] *** Quits: goldfish__ (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[03:54:54] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[03:55:10] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 240 seconds)
[03:55:20] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[03:57:01] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[03:58:30] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7) (Read error: Connection reset by peer)
[03:59:15] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7)
[03:59:45] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[04:02:25] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:07:21] <eric_hill> \o
[04:08:14] *** Joins: sevenever_web (uid202224@user/sevenever)
[04:08:34] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:09:35] *** Joins: flynn (~mcbloch@user/flynn)
[04:11:00] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:16:53] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:29:19] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:30:19] *** Joins: flynn (~mcbloch@user/flynn)
[04:30:25] *** Joins: oxum (~oxum@106.203.195.217)
[04:31:15] *** Joins: TUSF (~TUSF@71-147-0-117.lightspeed.hstntx.sbcglobal.net)
[04:32:43] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Read error: Connection reset by peer)
[04:35:04] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:38] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:58:10] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Ping timeout: 252 seconds)
[05:00:10] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:00:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[05:01:26] *** Joins: flynn (~mcbloch@user/flynn)
[05:05:52] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:05:53] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.251) (Read error: Connection reset by peer)
[05:31:49] *** Joins: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie)
[05:32:37] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 245 seconds)
[05:33:05] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:33:55] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[05:34:24] *** Joins: mickey (~user@user/mickey)
[05:42:19] *** Joins: neurocyte0 (~neurocyte@212.232.84.187)
[05:42:19] *** Quits: neurocyte0 (~neurocyte@212.232.84.187) (Changing host)
[05:42:19] *** Joins: neurocyte0 (~neurocyte@user/neurocyte)
[05:42:58] *** Joins: frost (~frost@59.71.240.119)
[05:43:25] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[05:44:22] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:44:22] *** neurocyte0 is now known as neurocyte
[05:47:38] *** Joins: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net)
[05:47:55] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Quit: dalan623)
[05:48:35] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[05:51:03] *** Joins: aead (~aead@user/aead)
[05:51:20] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Client Quit)
[05:51:48] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[05:52:39] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[05:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[05:54:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[05:57:47] *** Joins: mickey8 (~user@user/mickey)
[05:58:54] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[05:58:55] *** mickey8 is now known as mickey
[06:01:07] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Quit: dalan623)
[06:01:50] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[06:02:15] *** Quits: sevla (~platen@user/sevla) (Quit: WeeChat 2.8)
[06:10:34] *** Quits: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie) (Ping timeout: 256 seconds)
[06:13:16] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:15:38] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:90ff:659a:dec7:5c9f)
[06:19:23] *** Joins: dalan6236 (~dalan@14-201-78-173.static.tpgi.com.au)
[06:20:08] *** Joins: bmojsej (~bmojsej@88.212.52.252)
[06:21:17] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Ping timeout: 252 seconds)
[06:21:18] *** dalan6236 is now known as dalan623
[06:28:10] *** Quits: cooper (~mitchell@user/cooper) (Ping timeout: 240 seconds)
[06:28:29] *** Joins: cooper (~mitchell@user/cooper)
[06:30:10] *** Quits: yelnah (~felix@193-119-65-160.tpgi.com.au) (Ping timeout: 240 seconds)
[06:30:23] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Quit: ZNC 1.8.2 - https://znc.in)
[06:30:26] *** Joins: yelnah (~felix@193-119-65-160.tpgi.com.au)
[06:32:32] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[06:43:35] *** Quits: bmojsej (~bmojsej@88.212.52.252) (Remote host closed the connection)
[06:56:08] *** Quits: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net) (Quit: My computer has gone to sleep.)
[06:56:47] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[07:06:50] *** Joins: sympt (~textual@c-71-197-185-120.hsd1.wa.comcast.net)
[07:09:26] *** Joins: dsrt^ (~dsrt@68.101.54.227)
[07:10:18] *** Joins: lalitmee_ (~lalitmee@180.94.33.3)
[07:11:24] *** Joins: oxum (~oxum@106.203.195.217)
[07:16:22] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[07:21:40] *** Quits: KekSi (~KekSi@x4dbdeb7c.dyn.telefonica.de) (Ping timeout: 240 seconds)
[07:22:35] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[07:24:35] *** Joins: arktnld (~arktnld@177.43.26.75.dynamic.adsl.gvt.net.br)
[07:25:26] *** Joins: hexfive (~eric@50.35.83.177)
[07:25:33] *** Joins: KekSi (~KekSi@x4db9a8a0.dyn.telefonica.de)
[07:27:09] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[07:28:42] *** Joins: nathan (~nathan@user/nathan)
[07:30:31] *** Quits: sevenever_web (uid202224@user/sevenever) (Quit: Connection closed for inactivity)
[07:31:09] *** Quits: sympt (~textual@c-71-197-185-120.hsd1.wa.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:32:14] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 252 seconds)
[07:35:21] *** Joins: jespada (~jespada@90.254.245.194)
[07:41:12] *** Quits: arktnld (~arktnld@177.43.26.75.dynamic.adsl.gvt.net.br) (Read error: Connection reset by peer)
[07:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[07:55:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[07:55:32] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 245 seconds)
[08:03:07] *** Joins: fikran (~fikran@user/fikran)
[08:08:25] *** Joins: Torr (~Torr@user/torr)
[08:13:25] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[08:24:52] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[08:41:47] *** Joins: arktnld (~arktnld@177.43.26.75.dynamic.adsl.gvt.net.br)
[08:45:31] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: Ping timeout (120 seconds))
[08:45:52] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[08:47:21] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[08:48:02] *** Joins: darkapex (~darkapex@user/darkapex)
[08:50:16] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[08:56:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:05:06] *** Quits: TUSF (~TUSF@71-147-0-117.lightspeed.hstntx.sbcglobal.net) (Quit: Leaving)
[09:06:18] *** Joins: tusf[m] (~tusfmatri@2001:470:69fc:105::eff9)
[09:06:48] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (*.net *.split)
[09:06:48] *** Quits: wim (~wim@42.be) (*.net *.split)
[09:06:48] *** Quits: mischief1 (~mischief@wopr.sciops.net) (*.net *.split)
[09:06:48] *** Quits: svip (~svip@user/svip) (*.net *.split)
[09:06:48] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[09:06:48] *** Quits: jimeh1 (~jimeh@51.15.210.236) (*.net *.split)
[09:06:48] *** Quits: bacce (baccenfutt@user/baccenfutter) (*.net *.split)
[09:06:48] *** Quits: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi) (*.net *.split)
[09:06:48] *** Quits: nj (nicholas@stop.disconnecting.me) (*.net *.split)
[09:07:00] *** Joins: svip (~svip@static.227.17.9.176.clients.your-server.de)
[09:07:01] *** Quits: svip (~svip@static.227.17.9.176.clients.your-server.de) (Changing host)
[09:07:01] *** Joins: svip (~svip@user/svip)
[09:07:04] *** Joins: wolfshappen (~waff@irc.furworks.de)
[09:07:08] *** Joins: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi)
[09:07:10] *** Joins: jimeh1 (~jimeh@51.15.210.236)
[09:07:11] *** Joins: mischief1 (~mischief@wopr.sciops.net)
[09:07:25] *** Joins: nj (nicholas@stop.disconnecting.me)
[09:07:28] *** Joins: bacce (baccenfutt@user/baccenfutter)
[09:07:43] *** Joins: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt)
[09:07:57] *** Joins: rek2 (~ReK2@static-141-25-231-77.ipcom.comunitel.net)
[09:10:57] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 245 seconds)
[09:11:15] *** Quits: witcher (~witcher@2a01:4f8:c2c:711c::1) (*.net *.split)
[09:11:15] *** Quits: particleflux (~particlef@ircb.hackthe.codes) (*.net *.split)
[09:11:15] *** Quits: shibumi (~shibumi@archlinux/trusteduser/shibumi) (*.net *.split)
[09:11:15] *** Quits: wmo (~quassel@2604:a880:2:d0::1df0:b001) (*.net *.split)
[09:11:15] *** Quits: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[09:11:15] *** Quits: siXy (~jfindley@centos/ops/sixy) (*.net *.split)
[09:11:15] *** Quits: maxamillion (sid276220@ansible/staff/maxamillion) (*.net *.split)
[09:11:15] *** Quits: snappy (~snappy@user/snappy) (*.net *.split)
[09:11:15] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:11:15] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[09:11:26] *** Joins: siXy (~jfindley@centos/ops/sixy)
[09:11:30] *** Joins: wmo (~quassel@2604:a880:2:d0::1df0:b001)
[09:11:32] *** Joins: Artea (~Lufia@artea.com.pt)
[09:11:42] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[09:11:47] *** Joins: snappy (~snappy@user/snappy)
[09:11:52] *** Joins: shibumi (~shibumi@archlinux/trusteduser/shibumi)
[09:11:55] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:11:56] *** Joins: particleflux (~particlef@ircb.hackthe.codes)
[09:12:06] *** Joins: witcher (~witcher@static.74.224.203.116.clients.your-server.de)
[09:12:07] *** Joins: maxamillion (sid276220@ansible/staff/maxamillion)
[09:13:03] *** Joins: wim (~wim@42.be)
[09:23:16] *** Quits: pepee (~user@user/pepee) (Ping timeout: 252 seconds)
[09:25:59] *** Quits: tusf[m] (~tusfmatri@2001:470:69fc:105::eff9) (Quit: Reconnecting)
[09:26:13] *** Joins: tusf[m] (~tusf@2001:470:69fc:105::eff9)
[09:27:14] *** Quits: Gnuman (~gnuman@user/gnuman) (*.net *.split)
[09:27:14] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[09:27:14] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[09:27:14] *** Quits: gregf (~gregf@user/gregf) (*.net *.split)
[09:27:14] *** Quits: fgau (~fgau@mail.berliner-termindienst.de) (*.net *.split)
[09:27:14] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[09:27:14] *** Quits: clee (~clee@tali.t0k.org) (*.net *.split)
[09:27:14] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (*.net *.split)
[09:27:14] *** Quits: jinks (~jinks@104.161.79.77) (*.net *.split)
[09:27:14] *** Quits: smitop (~smitop@user/smitop) (*.net *.split)
[09:27:14] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[09:27:14] *** Quits: Lost (cold@user/lost) (*.net *.split)
[09:27:14] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[09:27:14] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[09:27:14] *** Quits: reenix- (~reenix@h2924837.stratoserver.net) (*.net *.split)
[09:27:14] *** Quits: SmokedCheese (~nyoroon@li1825-72.members.linode.com) (*.net *.split)
[09:27:14] *** Quits: halden (~halden@lden.im) (*.net *.split)
[09:27:14] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[09:27:14] *** Quits: pztrn (~pztrn@user/pztrn) (*.net *.split)
[09:27:14] *** Quits: TFKyle (~kyle@64.201.205.70) (*.net *.split)
[09:27:14] *** Quits: soren (sid124229@highgate.irccloud.com) (*.net *.split)
[09:27:14] *** Quits: cmagina (sid286142@user/cmagina) (*.net *.split)
[09:27:14] *** Quits: kyych (~kyych@30.ip-217-182-64.eu) (*.net *.split)
[09:27:14] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:27:14] *** Quits: Guest582 (~markkuit@93-43-234-84.ip94.fastwebnet.it) (*.net *.split)
[09:27:14] *** Quits: justache (~justache@user/justache) (*.net *.split)
[09:27:14] *** Quits: ddevault (znc@sourcehut/staff/ddevault) (*.net *.split)
[09:27:14] *** Quits: sshow (~sshow@neo.hackeriet.no) (*.net *.split)
[09:27:14] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (*.net *.split)
[09:27:14] *** Quits: whaley (~whaley@159.65.32.34) (*.net *.split)
[09:27:14] *** Quits: lockdown (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com) (*.net *.split)
[09:27:14] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[09:27:14] *** Quits: ikeaviking (~ikeavikin@caffeine.packetghost.com) (*.net *.split)
[09:27:15] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[09:27:15] *** Quits: erri (~meow@52.8.199.178) (*.net *.split)
[09:27:15] *** Quits: Disconsented (~quassel@107.170.227.20) (*.net *.split)
[09:27:15] *** Quits: Jazzah (~jazz@user/jazzah) (*.net *.split)
[09:27:15] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[09:27:15] *** Quits: dkeohane1 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[09:27:15] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[09:27:15] *** Quits: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com) (*.net *.split)
[09:27:15] *** Quits: ryu` (~ryu`@67.165.91.34.bc.googleusercontent.com) (*.net *.split)
[09:27:15] *** Quits: vhost- (~vhost@65.102.48.134) (*.net *.split)
[09:27:15] *** Quits: yama_ (~yama@097-090-153-102.biz.spectrum.com) (*.net *.split)
[09:27:21] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[09:27:23] *** Joins: reenix (~reenix@2a01:238:420e:ae00:1c37:63c1:24c0:ff75)
[09:27:23] *** Joins: SmokedCheese_ (nyoroon@2a01:7e01::f03c:91ff:fed1:d9ef)
[09:27:27] *** Joins: Jazzah (~jazz@stolen.plutonium.dk)
[09:27:28] *** Joins: morgabra (sid500580@user/morgabra)
[09:27:29] *** Joins: yama_ (~yama@097-090-153-102.biz.spectrum.com)
[09:27:29] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[09:27:30] *** Joins: fgau (~fgau@mail.berliner-termindienst.de)
[09:27:30] *** Joins: ryu` (~ryu`@67.165.91.34.bc.googleusercontent.com)
[09:27:31] *** Joins: vhost- (~vhost@65.102.48.134)
[09:27:33] *** Joins: soren (sid124229@id-124229.highgate.irccloud.com)
[09:27:35] *** Joins: kyych (~kyych@30.ip-217-182-64.eu)
[09:27:36] *** Joins: jinks (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac)
[09:27:36] *** Joins: Disconsented (~quassel@107.170.227.20)
[09:27:37] *** Joins: clee (~clee@tali.t0k.org)
[09:27:37] *** Joins: TFKyle (~kyle@64.201.205.70)
[09:27:38] *** Joins: Lost (cold@user/lost)
[09:27:47] *** Joins: cmagina (sid286142@user/cmagina)
[09:27:47] *** SmokedCheese_ is now known as SmokedCheese
[09:27:51] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[09:27:53] *** Joins: nitrix (~nitrix@ns569831.ip-51-79-81.net)
[09:27:59] *** Quits: Jazzah (~jazz@stolen.plutonium.dk) (Changing host)
[09:27:59] *** Joins: Jazzah (~jazz@user/jazzah)
[09:28:10] *** markkuit is now known as Guest5217
[09:28:12] *** Joins: smitop (~smitop@user/smitop)
[09:28:15] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[09:28:18] *** Joins: ikeaviking (~ikeavikin@caffeine.packetghost.com)
[09:28:18] *** Joins: noonien (~noonien@user/noonien)
[09:28:21] *** Joins: pztrn (~pztrn@user/pztrn)
[09:28:21] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[09:28:22] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[09:28:23] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:28:27] *** Quits: nitrix (~nitrix@ns569831.ip-51-79-81.net) (Changing host)
[09:28:27] *** Joins: nitrix (~nitrix@user/nitrix)
[09:28:40] *** Joins: achilleas (~ach@user/achilleas)
[09:28:45] *** Joins: gregf (~gregf@user/gregf)
[09:28:50] *** Joins: michele (~eraser@user/michele)
[09:28:51] *** Joins: halden (~halden@lden.im)
[09:28:52] *** Joins: ddevault (znc@sourcehut/staff/ddevault)
[09:29:00] *** Joins: erri (~meow@52.8.199.178)
[09:29:04] *** Joins: justache (~justache@user/justache)
[09:29:06] *** Joins: Gnuman (~gnuman@user/gnuman)
[09:29:20] *** Joins: dkeohane1 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[09:29:21] *** Joins: whaley (~whaley@159.65.32.34)
[09:29:40] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[09:30:26] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[09:30:49] *** Joins: c10l (~c10l@89.34.167.207)
[09:31:11] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.244)
[09:32:31] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[09:32:31] *** Joins: sshow (~sshow@neo.hackeriet.no)
[09:32:31] *** Joins: lockdown (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com)
[09:32:31] *** Joins: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com)
[09:33:25] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[09:35:26] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:35:40] <kodah> \o/
[09:38:10] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[09:39:10] *** Joins: flynn (~mcbloch@user/flynn)
[09:51:19] *** Joins: lalitmee__ (~lalitmee@180.94.32.116)
[09:53:47] *** Quits: lalitmee_ (~lalitmee@180.94.33.3) (Ping timeout: 245 seconds)
[09:54:43] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[09:55:11] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[09:55:18] *** Joins: theoceaniscool_ (~theoceani@119.12.232.133)
[10:10:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[10:11:01] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[10:12:29] *** Joins: fikran (~fikran@user/fikran)
[10:18:47] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[10:19:21] *** Quits: pi1 (~pi@177.223.162.41) (Remote host closed the connection)
[10:19:39] *** Joins: pi1 (~pi@177.223.162.41)
[10:20:19] *** Joins: lalitmee_ (~lalitmee@180.94.32.83)
[10:22:46] *** Quits: lalitmee__ (~lalitmee@180.94.32.116) (Ping timeout: 252 seconds)
[10:23:06] *** Joins: yellowflash (~I512663@49.36.46.14)
[10:24:42] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:28:25] <yellowflash> In this program - https://play.golang.org/p/NivjmucMd1I - go build -gcflags "-m" reports that u escapes to heap. Am I correct in inferring that u is not passed by value because copying a struct would be expensive ?
[10:30:58] *** Joins: independent56 (~independe@95.144.68.39)
[10:32:03] *** Quits: arktnld (~arktnld@177.43.26.75.dynamic.adsl.gvt.net.br) (Quit: arktnld)
[10:34:56] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.244) (Quit: mikoto-chan)
[10:36:32] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:36:57] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:37:22] *** Joins: Giedrius (~giedrius@5.133.65.65)
[10:38:24] <bookworm> go always passes by value
[10:38:58] <bookworm> if you don't want that, pass a pointer
[10:42:32] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[10:57:17] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[10:58:13] <foobaz> copying a struct is not expensive
[11:00:38] <bookworm> it depends, the struct can be huge 🤷‍♂️ but certainly not the example given no
[11:00:56] <bookworm> but embed a few largish data arrays and it is
[11:01:26] *** Joins: shka (~herr@109.231.62.239)
[11:04:59] <b0nn> yellowflash: u is going to the heap because of the fmt.Println call
[11:05:50] *** Joins: lalitmee__ (~lalitmee@180.94.32.179)
[11:06:10] <b0nn> So, passing almost anything between functions means "use some shared memory" which is the heap, you can get away with it, though, if your function is inlined, then you'll be using the stack
[11:08:34] *** Quits: lalitmee_ (~lalitmee@180.94.32.83) (Ping timeout: 265 seconds)
[11:11:10] *** Quits: someuser (~user@41.239.243.83) (Ping timeout: 240 seconds)
[11:12:45] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[11:15:05] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:18:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[11:21:49] *** Joins: absc (~absc@dynamic-adsl-94-34-168-109.clienti.tiscali.it)
[11:30:25] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[11:36:28] <A_Dragon> how do you know your function is inlined? you ask the compiler nicely to explain its decisions
[11:39:56] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Quit: WeeChat 3.2)
[11:40:07] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[11:40:40] *** Joins: oxum (~oxum@106.203.195.217)
[11:40:56] *** Joins: dozn (uid249292@user/dozn)
[11:41:30] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[11:41:42] *** Joins: oxum (~oxum@106.203.195.217)
[11:41:57] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[11:45:17] *** Joins: mrig (~mrig@user/mrig)
[11:48:13] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[11:48:47] *** Joins: oxum (~oxum@106.203.195.217)
[11:49:43] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[11:52:19] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:54:47] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[11:55:19] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[11:55:55] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 260 seconds)
[11:56:32] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[11:57:16] *** Joins: oxum (~oxum@106.203.195.217)
[11:59:25] *** Quits: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[12:01:45] <yellowflash> b0nn: "passing almost anything between functions means use some shared memory" - IIRC in C function arguments used to be allocated on the stack itself, and the callee was able to access them by offsetting the stack pointer ; does go do things differently, or I'm missing something ?
[12:02:52] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[12:03:02] *** Quits: noteness (noteness@user/noteness) (Ping timeout: 245 seconds)
[12:05:29] <A_Dragon> yellowflash: go has a somewhat different calling convention, dont worry too hard about it, its close enough to C that it doesnt matter for 99% of what you do
[12:07:03] <yellowflash> sure, thanks
[12:20:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:22:34] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[12:22:37] *** Joins: fikran (~fikran@user/fikran)
[12:27:08] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[12:27:39] <nitrix> C has four storage durations, automatic, allocated, static and thread. The "automatic" storage is what you refer to as "the stack" while the "allocated" storage is colloquially "the heap". Either way, something like "allocated on the stack" is tautological once you start matching your terminology to that of the Standard.
[12:32:35] <nitrix> Note that C doesn't require a stack, nor specify any calling convention; they are indeed just conventions. To try to be a little helpful though, many conventions are designed for register-based hardware, so they prioritize passing the arguments through registers, which is a good idea to avoid stack shuffling or additional ALU operations.
[12:33:41] <nitrix> ("System V AMD64 ABI" being de-facto choice for Unices.)
[12:37:15] <nitrix> A_Dragon, Do you happen to know how close to C the new calling convention will be? (https://github.com/golang/go/issues/40724) Because, as it is, cgo calls have really ridiculous overhead that I feel could be a good opportunity to get addressed.
[12:37:44] <bloony> With pytest I have been using a docker-compose plugin so I can set up some docker containers for my tests.. is there a package for running docker-compose from go?
[12:38:00] <A_Dragon> cgo doesn't just have overhead due to switching calling convention nitrix
[12:38:37] <A_Dragon> though that will hopefully speed it up a bit
[12:38:39] <nitrix> I've dig a bit into it by curiosity, seems like the scheduler in involved too.
[12:39:15] <A_Dragon> nitrix: correct, when code is executing in C land the scheduler has no control, thus it must see that thread as unusable and schedule other goroutines accordingly
[12:40:11] <nitrix> I honestly don't know why that's necessary. Most C calls are meant to be very short lived. It's not the end of the world if one M gets delayed (they still use M:N model right?).
[12:40:20] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (Read error: Connection reset by peer)
[12:40:56] <nitrix> If they eternize forever, yeah sure that's a problem, but in practice they're pretty quick. I wish Go had better tooling to communicate that to the compiler.
[12:41:19] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[12:41:52] *** Joins: oxum (~oxum@106.203.195.217)
[12:42:41] <A_Dragon> nitrix: pragmas and assumptions are both bad ideas
[12:42:56] <A_Dragon> so, best to hopefully accelerate the runtime
[12:43:14] <A_Dragon> also do you reaaaaly want to special case out blocking behaviour (like I/O) vs blocking based on C?
[12:43:26] <nitrix> A_Dragon, It's a work-stealing scheduler. While one of the thread is stuck in C land, it's safe to assume the C code will manage it's own memory and the GC doesn't have to interverse. As for the scheduler, the remaining threads can steal from for the thread that stuck in C land.
[12:43:50] <nitrix> Blocking on Cgo C calls would be perfectly fine.
[12:44:35] <A_Dragon> okay maybe I misunderstood something about the scheduler or your question then
[12:45:59] <nitrix> Well, I'm going with what I know but there are obviously unknown unknowns :)
[12:46:47] <nitrix> I had some start of a RFC and CL that I wanted to get feedback on. Maybe mdempsky or whatever would be able to immediately tell me if it's worth pursuing or not.
[12:49:13] <nitrix> Maybe we would see more real-time graphical programs written in Go after that :)
[12:52:34] <nitrix> https://github.com/petermattis/fastcgo suggests 4ns instead of 60ns, one order magnitude improvement is the difference between 6 FPS <-> 60 FPS <-> 600 FPS.
[12:55:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:56:21] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 265 seconds)
[12:58:45] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:02:55] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[13:03:20] <A_Dragon> nitrix: sorry was running around. 60->4 is... very impressive
[13:04:27] *** Joins: Snyp (~Snyp@49.207.207.150)
[13:04:37] *** Joins: theoceaniscool__ (~theoceani@119.12.232.133)
[13:04:42] *** Quits: theoceaniscool__ (~theoceani@119.12.232.133) (Remote host closed the connection)
[13:04:44] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Client Quit)
[13:05:07] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[13:05:09] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[13:05:20] *** Quits: theoceaniscool_ (~theoceani@119.12.232.133) (Quit: Leaving)
[13:07:22] *** Joins: fdv (sid27570@id-27570.helmsley.irccloud.com)
[13:07:48] *** Joins: lalitmee_ (~lalitmee@180.94.32.247)
[13:10:29] *** Quits: lalitmee__ (~lalitmee@180.94.32.179) (Ping timeout: 252 seconds)
[13:12:59] <fdv> Hi! Being somewhat new to go, I've been using testify, but I find it challenging to compare larger structs (using `assert.Equal`) that contain multiple instances of something else. Say you have a struct `foo` that has multiple `bar`, possibly at different nesting levels, and *one* of these `bar`s differs, it becomes very difficult to discern which one is different from the diff output of testify / reflect.DeepEqual.
[13:13:00] <fdv> I've searched, but so far without success, for a way to view the whole output ("files") that the diff is composed of, but so far to no avail, does anybody have any tips on how to address this?
[13:18:44] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[13:19:06] *** Joins: teasea7 (~teasea@user/teasea)
[13:34:15] *** Joins: oxum (~oxum@106.203.195.217)
[13:34:35] *** holgersson is now known as all
[13:34:45] *** all is now known as Guest7498
[13:34:47] *** Guest7498 is now known as holgersson
[13:35:04] *** Quits: jnml (~jnml@ipservice-092-217-240-247.092.217.pools.vodafone-ip.de) (Quit: Client closed)
[13:35:47] *** Joins: sevenever_web (uid202224@user/sevenever)
[13:44:04] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[14:00:18] *** Joins: normen (~normen@p200300d7173dc900d8ab198eb8b8d690.dip0.t-ipconnect.de)
[14:04:38] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[14:08:10] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[14:09:40] *** Joins: djo_ (~djo@public-nat.it.pasteur.fr)
[14:10:40] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 260 seconds)
[14:12:17] *** Joins: oxum (~oxum@106.203.195.217)
[14:16:13] *** Joins: homura (root@user/homura)
[14:17:05] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 260 seconds)
[14:21:15] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:21:32] <b0nn> fdv: You have struct{ a,b,c,d,e,f,g string} ?
[14:22:14] *** Joins: flynn (~mcbloch@user/flynn)
[14:22:33] <b0nn> honestly I would be doing something like 1, check if it's instantiated (not nil), 2, check that it's of type foo, 3, check each field BY NAME
[14:22:33] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[14:23:46] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:24:37] *** Joins: amk (~amk@109.255.169.126)
[14:27:15] *** Joins: lalitmee__ (~lalitmee@180.94.33.48)
[14:29:15] *** Quits: djo_ (~djo@public-nat.it.pasteur.fr) (Read error: Connection reset by peer)
[14:29:43] *** Quits: lalitmee_ (~lalitmee@180.94.32.247) (Ping timeout: 252 seconds)
[14:30:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:30:25] *** Joins: andlabs (~andlabs@70.107.171.168)
[14:31:38] *** Quits: andlabs (~andlabs@70.107.171.168) (Client Quit)
[14:32:10] *** Joins: fikran (~fikran@user/fikran)
[14:33:01] *** Joins: andlabs (~andlabs@70.107.171.168)
[14:34:31] *** Quits: andlabs (~andlabs@70.107.171.168) (Read error: Connection reset by peer)
[14:35:04] *** Joins: andlabs (~andlabs@70.107.171.168)
[14:45:46] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[14:46:37] *** Joins: oxum (~oxum@106.203.195.217)
[14:48:41] *** Joins: kayprish (~kayprish@cable-188-2-153-140.dynamic.sbb.rs)
[14:51:43] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[14:53:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:54:25] *** Joins: flynn (~mcbloch@user/flynn)
[15:04:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:05:23] *** Joins: flynn (~mcbloch@user/flynn)
[15:06:00] *** Joins: jnml (~jnml@p57bfa73c.dip0.t-ipconnect.de)
[15:08:54] <fizzie> fdv: I don't know if it's necessarily any better, but you could take a look at the output format of https://pkg.go.dev/github.com/google/go-cmp/cmp#Diff too. There's an example in there.
[15:12:41] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:13:14] *** Joins: userj (~userjjjj@user/userj)
[15:13:42] *** Joins: flynn (~mcbloch@user/flynn)
[15:19:45] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:20:44] *** Joins: flynn (~mcbloch@user/flynn)
[15:22:09] *** Joins: oxum (~oxum@106.203.195.217)
[15:22:35] *** Joins: cskr (~cskr@49.207.194.98)
[15:24:01] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[15:27:05] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 260 seconds)
[15:31:07] *** Joins: oxum (~oxum@106.203.195.217)
[15:31:42] *** Quits: aead (~aead@user/aead) (Ping timeout: 245 seconds)
[15:31:45] *** Joins: lalitmee_ (~lalitmee@180.94.32.109)
[15:34:02] *** Quits: lalitmee__ (~lalitmee@180.94.33.48) (Ping timeout: 252 seconds)
[15:35:51] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 265 seconds)
[15:35:54] *** Joins: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie)
[15:36:14] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[15:36:29] <braxas> hi, regarding this: https://github.com/golang/go/issues/17826
[15:36:56] <braxas> is it discouraged to do something like `type contextkey int; const idpContextKey contextkey = iota;`
[15:37:13] *** Joins: Atque (~Atque@user/atque)
[15:37:32] <braxas> and then use: context.WithValue(ctx, idpContextKey, "something")
[15:40:25] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[15:45:10] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 260 seconds)
[15:45:17] *** Quits: sevenever_web (uid202224@user/sevenever) (Quit: Connection closed for inactivity)
[15:48:14] *** Joins: flynn (~mcbloch@user/flynn)
[15:49:22] *** Quits: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie) (Quit: Leaving)
[15:51:27] *** Joins: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie)
[15:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:54:58] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:04:11] *** Joins: oxum (~oxum@106.203.195.217)
[16:06:53] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[16:08:01] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:08:43] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[16:13:06] *** Quits: cskr (~cskr@49.207.194.98) (Quit: Leaving)
[16:23:06] *** Joins: oxum (~oxum@106.203.195.217)
[16:28:32] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 265 seconds)
[16:38:45] *** Quits: yellowflash (~I512663@49.36.46.14) (Quit: WeeChat 3.2)
[16:40:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:42:20] *** Joins: fikran (~fikran@user/fikran)
[16:50:13] *** Joins: Giedrius (~giedrius@5.133.65.65)
[16:59:46] *** Joins: lalitmee__ (~lalitmee@180.94.33.165)
[17:02:22] *** Quits: lalitmee_ (~lalitmee@180.94.32.109) (Ping timeout: 265 seconds)
[17:08:57] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[17:09:31] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:12:58] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[17:13:07] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[17:14:05] *** Joins: yoonkn (~user@175.197.208.79)
[17:14:07] *** Joins: oxum (~oxum@106.203.195.217)
[17:20:50] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 260 seconds)
[17:22:44] *** Joins: lalitmee_ (~lalitmee@180.94.33.105)
[17:25:34] *** Quits: lalitmee__ (~lalitmee@180.94.33.165) (Ping timeout: 265 seconds)
[17:25:46] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:26:08] *** Quits: Snyp (~Snyp@49.207.207.150) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:26:51] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[17:27:24] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:29:18] *** Joins: ppang (~ppang@user/ppang)
[17:32:44] *** Quits: kayprish (~kayprish@cable-188-2-153-140.dynamic.sbb.rs) (Remote host closed the connection)
[17:35:29] <dostoyevsky2> cmd := exec.Command( "shell.sh" ) // I can create a new pid that way... but can I also just put a go function for starting a new pid?  Or should I just exec.Command(os.Executable() + params)?
[17:41:39] *** Quits: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie) (Quit: Leaving)
[17:41:41] *** Quits: teasea7 (~teasea@user/teasea) (Quit: teasea7)
[17:42:01] *** Joins: teasea7 (~teasea@user/teasea)
[17:42:16] *** teasea7 is now known as teasea
[17:43:33] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[17:49:59] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[17:52:26] *** Joins: oxum (~oxum@106.203.195.217)
[17:54:46] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[17:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:57:00] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 260 seconds)
[17:59:54] *** Joins: darkapex_ (~darkapex@user/darkapex)
[18:02:28] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[18:02:29] *** Joins: darkapex- (~darkapex@user/darkapex)
[18:04:16] *** Joins: oxum (~oxum@106.203.195.217)
[18:04:19] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[18:04:35] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 260 seconds)
[18:11:27] *** Joins: tg (~tg@rockylinux/infra/tg)
[18:13:46] *** Joins: lalitmee__ (~lalitmee@180.94.33.123)
[18:15:44] *** Joins: aead (~aead@user/aead)
[18:15:57] *** Joins: goldfish__ (~goldfish@user/goldfish)
[18:16:17] *** Quits: lalitmee_ (~lalitmee@180.94.33.105) (Ping timeout: 252 seconds)
[18:21:04] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[18:24:13] <sztanpet> what are you actually trying to do, i doubt creating a new pid is your goal
[18:24:58] <sztanpet> if you want to run a process, sure, thats what exec is for
[18:26:23] <sztanpet> and no, os.Executable() + params most probably wont work, exec.Command does not run a shell so argument splitting is not done, make sure to read the documentation
[18:30:27] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[18:32:17] <A_Dragon> sztanpet: exec.command(self, os.argv) works fine
[18:32:35] <A_Dragon> but regardless, what are you trying to do dostoyevsky2
[18:32:52] *** Joins: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net)
[18:33:06] <A_Dragon> oh sorry I cant read, I was thinking os.exec
[18:33:10] <A_Dragon> not exec.comand
[18:33:24] <A_Dragon> you caaaan parse exec.command args though
[18:33:31] <dostoyevsky2> start a func as a daemon process
[18:33:37] <A_Dragon> why?
[18:33:56] *** Quits: ppang (~ppang@user/ppang) (Quit: Leaving)
[18:34:11] <A_Dragon> why is starting it in a goroutine not enough?
[18:34:23] <dostoyevsky2> the foreground process will exit
[18:34:58] <A_Dragon> why?
[18:35:17] <dostoyevsky2> ever written an rc command???
[18:35:34] <dostoyevsky2> why don't you know that?
[18:36:20] <A_Dragon> Go does not generally play nice with forking itself
[18:36:20] <dostoyevsky2> ever used `systemctl status something'?  Not sure why unix/windows decided to do it that way
[18:36:34] <A_Dragon> ...you dont need to fork to use systemctl
[18:36:39] <A_Dragon> or any other init system
[18:36:41] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[18:36:55] <A_Dragon> in fact for a good few of them, including systemd, its far easier to track processes when they dont exit
[18:36:56] <dostoyevsky2> Yeah, maybe I should just do it in rust
[18:36:59] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:37:06] <dostoyevsky2> as I am too close to the system
[18:37:32] <A_Dragon> feel free to use whatever programming language you like. I;d rather you didnt attempt to insult my intelligence for attempting to help you though.
[18:37:39] <Sam> I assume they meant that they're writing an init system or something that behaves like one, not that they're shelling out to systemd
[18:37:49] <A_Dragon> ah, see, that would make more sense
[18:37:50] <Sam> A_Dragon: keep it civil please.
[18:39:33] <A_Dragon> Sam: trying very hard -- That aside, dostoyevsky2: you may find https://pkg.go.dev/syscall#ForkExec to do what you want, but as I said go doesnt particularly like being forked, so be wary
[18:40:58] <Sam> If you need to fork go code though you may be right that another language (without a runtime) may be a better choice, or it could be an indication that your architecture is wrong and what you want can be done easily in a slightly different way, it's hard to tell
[18:41:14] <A_Dragon> yeah
[18:41:36] <A_Dragon> I'd suggest maybe using exec.command to create and then disown your other process, and use a unix socket/named pipe for communication?
[18:41:51] <A_Dragon> but forking the actual running code is not too simple
[18:41:56] <dostoyevsky2> Why not just: exec.Command(os.Executable, "daemon" ) or the like
[18:42:34] <nevivurn> That is perfectly fine, if you want to fork+exec.
[18:42:59] <Sam> that can work too, I've done something similar in tests where I needed a separate pid for weird reasons
[18:43:11] <dostoyevsky2> well the main process would exit... so init would listen for the sigchild
[18:43:55] <dostoyevsky2> and then the executable could check if the pidfile has a valid pid, so the daemon doesn't need to be started again
[18:44:21] <nevivurn> sounds perfectly reasonable
[18:46:34] *** Quits: dsrt^ (~dsrt@68.101.54.227) (Remote host closed the connection)
[18:47:49] <A_Dragon> yeah that'd work perfectly
[18:47:57] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:90ff:659a:dec7:5c9f) (Ping timeout: 245 seconds)
[18:48:36] <A_Dragon> its forking the running runtime and then having both continue to exist (rather than executing yourself again, as exec.Command would) that can be difficult to get right
[18:49:40] *** Joins: pepee (~user@user/pepee)
[18:49:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:51:29] *** Quits: halden (~halden@lden.im) (Read error: Connection reset by peer)
[18:51:43] *** Joins: fikran (~fikran@user/fikran)
[18:53:03] *** Quits: yoonkn (~user@175.197.208.79) (Ping timeout: 265 seconds)
[18:53:28] *** Joins: oxum (~oxum@106.203.195.217)
[18:56:20] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.2)
[18:58:07] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[18:59:04] *** Joins: halden (~halden@lden.im)
[19:03:56] *** Joins: Rayke (rayke@user/rayke)
[19:04:21] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:05:20] *** Quits: nebiros (~nebiros@user/nebiros) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:07:16] *** Joins: nebiros (~nebiros@li1848-13.members.linode.com)
[19:07:17] *** Quits: nebiros (~nebiros@li1848-13.members.linode.com) (Changing host)
[19:07:17] *** Joins: nebiros (~nebiros@user/nebiros)
[19:07:56] *** Joins: independent56 (~independe@95.144.68.39)
[19:16:13] *** Joins: yoonkn (~user@175.197.208.79)
[19:19:50] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 260 seconds)
[19:21:44] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[19:24:01] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[19:25:14] *** Joins: lalitmee_ (~lalitmee@180.94.32.1)
[19:26:37] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7) (Read error: Connection reset by peer)
[19:27:44] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:d4b6:3f93:f669:5584)
[19:27:51] *** Quits: lalitmee__ (~lalitmee@180.94.33.123) (Ping timeout: 265 seconds)
[19:28:03] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[19:28:14] *** Joins: lalitmee (~lalitmee@180.94.32.26)
[19:30:16] *** Quits: lalitmee_ (~lalitmee@180.94.32.1) (Ping timeout: 265 seconds)
[19:31:13] *** Quits: jnml (~jnml@p57bfa73c.dip0.t-ipconnect.de) (Quit: Client closed)
[19:40:00] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[19:41:35] *** Joins: lalitmee_ (~lalitmee@180.94.33.208)
[19:42:38] *** Quits: lalitmee (~lalitmee@180.94.32.26) (Ping timeout: 252 seconds)
[19:44:43] *** Quits: lack (~lack@user/lack) (Ping timeout: 252 seconds)
[19:45:36] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[19:48:26] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[19:50:07] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:52:19] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[19:52:44] *** Joins: thing (~thing@user/thing)
[19:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[19:55:12] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[19:59:46] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:03:00] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 260 seconds)
[20:03:48] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[20:04:31] *** Joins: lack (~lack@user/lack)
[20:04:37] *** Joins: burningserenity (~burningse@102.129.152.77)
[20:08:53] *** Quits: lack (~lack@user/lack) (Client Quit)
[20:10:53] *** Joins: lack (~lack@user/lack)
[20:12:54] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[20:13:17] *** Joins: independent56 (~independe@95.144.68.39)
[20:14:26] *** Joins: jnml (~jnml@2a00:20:c053:ab2b:51ad:79cf:4b8a:49ef)
[20:14:59] <shibumi> Anyone familiar with the zap logging library? Is there an elegant way to auto-generate LogMarshalObject methods for structs?
[20:15:04] <shibumi> Right now I am doing this: https://github.com/uber-go/zap/issues/998
[20:15:33] *** Quits: lack (~lack@user/lack) (Client Quit)
[20:22:09] <A_Dragon> shibumi: https://github.com/fatih/gomodifytags ?
[20:25:04] <shibumi> A_Dragon: I don't mean the tags
[20:25:14] <shibumi> A_Dragon: I want to autogenerate a function
[20:25:17] <A_Dragon> oh methods I misread
[20:25:37] <A_Dragon> you could use go generate and text/template, thats what Ive done when Ive wanted an implementation of something
[20:28:57] *** Quits: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net) (Quit: My computer has gone to sleep.)
[20:35:57] *** Quits: absc (~absc@dynamic-adsl-94-34-168-109.clienti.tiscali.it) (Quit: Leaving.)
[20:41:22] *** Joins: darkapex (~darkapex@user/darkapex)
[20:43:08] *** Quits: darkapex- (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[20:44:39] *** Joins: Torr (~Torr@user/torr)
[20:45:55] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[20:46:53] *** Joins: darkapex (~darkapex@user/darkapex)
[20:59:12] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[21:01:06] *** Joins: fikran (~fikran@user/fikran)
[21:03:29] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 252 seconds)
[21:09:39] *** Quits: nevivurn (~nevivurn@user/nevivurn) (Quit: Goodbye~)
[21:17:14] *** Quits: lalitmee_ (~lalitmee@180.94.33.208) (Ping timeout: 252 seconds)
[21:20:49] <tusf[m]> Question: Would a hypothetical "go web browser" need to split up its processes the same way modern browsers (ESPECIALLY Chromium-based) tend to do in order to prevent under/overflow attacks, and other vulnerabilities that are more expected in less memory-safe languages?
[21:22:37] <tusf[m]> Or is Go's own memory "safeness" not really enough for the sort of in-process sandboxing you'd want from a browser?
[21:22:40] <seebs> i'm not sure about *need* to but i think it would probably be a reasonably good choice anyway, just because there's so *many* vulnerabilities.
[21:24:06] *** Joins: burningserenity_ (~burningse@2603:9001:f01:ad99::1008)
[21:24:36] <siXy> tusf[m]: Those are two completely different things - Go is generally memory safe, but sandboxing untrustworthy code is an entirely different concept, and one I'm not convinced Go is the best tool for.
[21:24:56] *** Quits: burningserenity (~burningse@102.129.152.77) (Ping timeout: 252 seconds)
[21:25:03] <siXy> If you want to write a browser from scratch, rust would probably be a better choice, despite its worse crypto libs.
[21:25:09] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:25:40] *** Joins: jpw (~jpw@user/jpw)
[21:29:03] <tusf[m]> I mean, wasn't docker written in Go? I don't know much about containers, but it gives the impression that Go would be a perfectly fine tool for sandboxing.
[21:29:40] <siXy> docker does zero sandboxing - docker is just a UI for features in the linux kernel, really.
[21:30:22] <tusf[m]> As for writing a browser from scratch... I'm not THAT unhinged. Just considering how the end result might look like. (I am however trying to write a CSS layout engine tho)
[21:30:25] <tusf[m]> And ah, I see...
[21:30:25] <siXy> All that stuff is handled in the kernel, there's no requirement for docker to do it (thankfully)
[21:31:54] <shibumi> siXy: why is the rust crypto lib worse? :D
[21:32:53] *** Joins: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net)
[21:32:54] *** Quits: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net) (Read error: Connection reset by peer)
[21:33:24] *** Joins: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net)
[21:36:25] <dostoyevsky2> shibumi: go has most crypto things in the standard lib... if you want to open a TLS connection, there is one way to do it... Rust requires like 100 additional crates to open a TLS connection... there is now ureq which is trying to reduce those numbers
[21:36:25] <siXy> shibumi: Well, Go has really damn good crypto libs, so that statement is going to apply to a degree for a lot of languages. However rust in particular doesn't have crypto in the stdlib, and for a long time didn't have any particularly great options. These days things are better, and there are some good crypto libs for rust but you do still need to go outside of the stdlib for them.
[21:38:28] <siXy> There's the Rust Crypto project, which seems well run from the limited time I've had to look at it, and a reasonable looking libsodium too. Both of them are probably fine. But "probably fine" isn't the highest bar ever.
[21:39:15] <dostoyevsky2> shibumi: on a bad day you try to perform a https request with rust and one of those crates doesn't compile... and it will take you minutes of compile time
[21:39:48] <siXy> whole minutes! the horror! ;)
[21:40:22] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[21:40:46] *** Joins: mickey (~user@user/mickey)
[21:41:06] <dostoyevsky2> I just recompiled my go-https-rest-api-client: real    0m0.514s
[21:42:13] *** Joins: sympt (~textual@c-71-197-185-120.hsd1.wa.comcast.net)
[21:43:08] <tusf[m]> Go has spoiled me. I can't comprehend compile times longer than a couple seconds.
[21:44:02] <tusf[m]> (Granted, I don't work on projects THAT huge regularly anyways)
[21:44:06] <dostoyevsky2> Turbo Pascal has spoiled me in the 90's...
[21:44:43] <dostoyevsky2> Compiling was a small animation after you pressed F5
[21:47:13] *** Quits: sympt (~textual@c-71-197-185-120.hsd1.wa.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:51:29] *** Joins: lack (~lack@user/lack)
[21:54:13] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[21:54:45] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[21:55:20] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[21:55:38] *** Quits: anon__ (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[21:57:03] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[21:58:52] *** jimeh1 is now known as jimeh
[22:03:22] *** Joins: oxum (~oxum@106.203.195.217)
[22:06:28] *** Joins: bleloch (bleloch@gateway/vpn/protonvpn/bleloch)
[22:08:25] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 260 seconds)
[22:08:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[22:16:40] *** ghostbusters2 is now known as ghostbuster
[22:29:17] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:29:47] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[22:37:27] *** Joins: Torr (~Torr@user/torr)
[22:48:26] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 265 seconds)
[22:50:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:52:45] *** Quits: jnml (~jnml@2a00:20:c053:ab2b:51ad:79cf:4b8a:49ef) (Ping timeout: 260 seconds)
[22:58:00] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[23:01:20] *** Joins: lalitmee_ (~lalitmee@180.94.33.208)
[23:05:49] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[23:06:02] *** Joins: menace (~someone@ppp-93-104-186-17.dynamic.mnet-online.de)
[23:06:13] *** Quits: menace (~someone@ppp-93-104-186-17.dynamic.mnet-online.de) (Changing host)
[23:06:13] *** Joins: menace (~someone@user/menace)
[23:08:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:10:55] *** Joins: fikran (~fikran@user/fikran)
[23:14:20] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Ping timeout: 260 seconds)
[23:18:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[23:26:15] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[23:28:52] *** Joins: lalitmee__ (~lalitmee@180.94.32.100)
[23:31:26] *** Quits: lalitmee_ (~lalitmee@180.94.33.208) (Ping timeout: 252 seconds)
[23:34:24] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[23:37:23] *** Joins: jnml (~jnml@ipservice-092-217-240-247.092.217.pools.vodafone-ip.de)
[23:39:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:40:10] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 240 seconds)
[23:41:29] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[23:41:59] *** Joins: oxum (~oxum@106.203.195.217)
[23:42:21] *** Joins: haliucinas (~haliucina@5.20.153.21)
[23:42:57] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:44:29] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:44:38] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Client Quit)
[23:47:00] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 260 seconds)
[23:50:45] *** Quits: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net) (Quit: My computer has gone to sleep.)
[23:53:22] *** Quits: najatac (~najatac@d14-69-231-247.try.wideopenwest.com) (Ping timeout: 252 seconds)
