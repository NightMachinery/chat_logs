[00:00:19] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:00:41] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:02:59] *** Joins: coot_ (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:03:38] *** Parts: snake (~snake@user/snake) (Leaving)
[00:05:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[00:05:21] *** Quits: argento (~argento@static.219.128.itcsa.net) (Quit: leaving)
[00:05:29] *** Joins: argento (~argento@static.204.189.itcsa.net)
[00:06:09] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 268 seconds)
[00:08:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:11:06] *** Joins: ksqsf (~user@134.209.106.31)
[00:15:09] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:16:07] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[00:18:30] *** Joins: pavonia (~user@user/siracusa)
[00:24:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[00:24:30] *** Joins: hololeap (~hololeap@user/hololeap)
[00:24:42] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[00:26:46] *** Joins: oldsk00l (~znc@ec2-52-57-80-8.eu-central-1.compute.amazonaws.com)
[00:32:44] *** Quits: otherwise (~otherwise@2601:602:880:90f0:7490:2afa:37a4:523b) (Remote host closed the connection)
[00:32:58] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[00:33:35] *** Quits: argento (~argento@static.204.189.itcsa.net) (Remote host closed the connection)
[00:34:04] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:34:49] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[00:37:28] <[itchyjunk]> Non haskell question, i was made aware of a "omega combinator" which is (\x.xx) (\x.xx). But googling "omega combinator" mostly gives me things about JS. does it have alternative name?
[00:38:49] <geekosaur> doubled y combinator. which adds little over a single y combinator
[00:38:59] <geekosaur> (y combinator applied to another y combinator)
[00:39:12] <[itchyjunk]> hmmm
[00:39:17] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:40:17] <[itchyjunk]> Argh, googling anything with ycombinator seems to result the incubator website and not the ycombinator i want :D
[00:40:21] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:41:31] <hpc> try "fixed point combinator"
[00:41:55] <hpc> or adding "lambda calculus" to the search
[00:42:01] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:42:11] <[itchyjunk]> ahh ty
[00:42:27] <[itchyjunk]> i had seed fixed point combinator wiki page actually, didn't realize that was what i wanted
[00:42:36] <[exa]> [itchyjunk]: I never saw anyone to refer it in a different way than just Ω = ωω; sometimes it is very informally called "infinite loop"
[00:42:44] *** Quits: rito_ (~rito_gh@45.112.243.219) (Quit: Leaving)
[00:43:09] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Ping timeout: 268 seconds)
[00:43:19] <[exa]> fixpoint combinators (Y) are a tiny bit more complex because they have the `f` there. In fact Ω = YI
[00:44:47] *** Quits: zer0bitz (~zer0bitz@185.112.82.230) (Read error: Connection reset by peer)
[00:44:57] <[exa]> geekosaur: btw you meant YY ? (/me tries that kind of recursion in head)
[00:45:00] <[itchyjunk]> Right. I was watching a "computerphile" video on it and he gives an exercise for fixed point combinator but he covers the (\x.xx) (\x.xx) thing on it's own
[00:45:02] <[exa]> (head explodes)
[00:46:08] <[exa]> anyway it's likely the smallest λ-term with no normal form (ie "fully reduced")
[00:46:33] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:53:28] <EvanR> the heck is omega combinator is js
[00:53:33] <EvanR> in js
[00:55:21] <iphy> never heard of it in js, and my google search yields nothing
[00:56:00] <[exa]> const Ω = () => {while(true){}};
[00:56:18] <[exa]> seems like I'll need to restart the browser now.
[00:57:18] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:57:26] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:57:42] <hpc> using while seems like cheating...
[00:57:58] <[exa]> nah I properly inlined that!
[00:58:20] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[00:58:31] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:58:43] <EvanR> i know how to do lambda calculus in js, was wondering if it was some terribly named unrelated library xD
[00:59:16] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[01:01:17] *** Quits: xff0x (~xff0x@2001:1a81:53c9:5600:de59:5c41:aa07:4876) (Ping timeout: 240 seconds)
[01:02:29] *** Joins: xff0x (~xff0x@2001:1a81:53c9:5600:4d50:2309:32ab:9f17)
[01:02:36] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:02:50] <[exa]> hpc: never underestimate properly applied optimizations https://godbolt.org/z/3skK9j
[01:03:07] *** Joins: steven1 (~steven@74.215.200.15)
[01:03:40] <EvanR> what
[01:03:47] *** Quits: altern (~Sergii@altern.corbina.com.ua) (Quit: Leaving)
[01:04:33] *** Joins: hueso (~root@user/hueso)
[01:04:34] <steven1> hello, is `data Void -- empty` considered isomorphic to forall a. a ? I initially thought yes, but it seems I can go Void -> a with `absurd v = case v of { }`, but I can't go a -> Void since I obviously can't construct a value of type Void
[01:04:46] <steven1> I can use undefined of course, but not sure if that's allowed when I'm trying to find an isomorphism
[01:05:07] <EvanR> they both have no real values, and they both have undefined
[01:05:17] *** Joins: ksqsf (~user@134.209.106.31)
[01:05:34] <EvanR> so either way they are in correspondence
[01:05:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:06:27] <lyxia> steven1: a -> Void is different from (forall a. a) -> Void.
[01:06:37] <steven1> ah that is true
[01:06:58] <steven1> then again I can still write the same absurd definition for that type too I think
[01:07:00] *** Joins: drewr (~drew@user/drewr)
[01:07:16] <steven1> oh wait that's the other way
[01:07:25] <lyxia> you can also just do \x -> x
[01:07:37] <steven1> ah that's right
[01:09:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[01:11:57] <steven1> I was trying to derive the representation of existential types by hand. e.g. (forall r. r -> a) -> a is the same as exists r. r What I found is that exists r. r is isomorphic to (forall r. r -> Void) -> Void but this definition doesn't seem to work
[01:12:12] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:12:27] <steven1> intuitively it seems like (forall r. r -> Void) -> Void is also isomorphic to forall a. (forall r. r -> a) -> a but I can't prove it
[01:13:00] <steven1> and if I try to use the void version in haskell the same way it doesn't seem to work. Obviously it only returns Void so I can't possibly get any information out of it
[01:14:08] <EvanR> well you just picked a = Void
[01:14:15] <EvanR> not a problem
[01:14:31] <steven1> yeah but I can't seem to go the other way
[01:15:06] <EvanR> hmm?
[01:15:13] <steven1> e.g. I can see that exists r. r == (forall r. r -> Void) -> Void . But I don't see how to get from this to the forall a version
[01:15:14] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[01:15:47] <steven1> once I know that forall a . (forall r. r -> a) -> a is the answer, I know how to go backward, but I don't see how I could have gotten there from what I have
[01:15:52] <EvanR> one's a justified specialization of the other
[01:16:03] <EvanR> not sure how you'd undo that
[01:16:47] <EvanR> it's like saying, if I know reverse :: [Char] -> [Char], how do I prove that reverse can work for any type of list
[01:16:58] <EvanR> (without looking at the code)
[01:17:06] *** Joins: acidjnk (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de)
[01:17:44] <steven1> yeah, I thought the isomorphism from Void to forall a. a might help, but it's not clear to me. Let me run through the steps a bit and see if I get somewhere
[01:19:14] <EvanR> the specialized fact you saw reflects that anything "false" about the hidden value... is false
[01:19:44] <steven1> ah that's intereseting intuition
[01:19:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[01:19:58] <steven1> then maybe my derivation is strictly less powerful than the other version
[01:23:55] <steven1> let me post my steps in a minute and maybe someone can find an error in what I've done
[01:26:59] <steven1> https://gist.github.com/stevenfontanella/c26bfbf79f615ae0145ae4704df8b47f here's what I did
[01:27:24] <steven1> I am kind of mixing predicate logic with 'type' logic which might be wrong
[01:28:03] <steven1> one thing I'm not sure of is line 2 actually, since tecnically it should be an exclusive disjunction I guess (one value can't have multiple types)
[01:28:07] <EvanR> a proof of not a = a -> Void seems funny
[01:28:27] <steven1> yeah not too sure of that either
[01:28:41] <steven1> it should be true in predicate logic but not sure if it carries over to this
[01:29:11] <EvanR> that's just the definition of not
[01:29:20] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:30:06] <monochrom> What is "\/ a" doing on its own line? Syntax error?
[01:30:20] <steven1> it's like a disjunction over a set
[01:30:43] <EvanR> the lines seem a bit incomplete, like they're not saying anything
[01:31:05] *** Joins: drewr (~drew@user/drewr)
[01:31:18] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[01:31:19] <EvanR> exists a . a doesn't seem equal to \/ a or anything
[01:31:31] <steven1> by \/ a I mean we're doing a disjunction over all types e.g. t1 \/ t2 \/ t3 \/ t4 and so on
[01:31:38] <EvanR> lol what
[01:31:39] *** Joins: alekhine_ (~alekhine@c-73-38-152-33.hsd1.ma.comcast.net)
[01:32:05] <steven1> I was thinking exists a. a means a is either t1, or t2, etc. so I represent it as a logical disjunction
[01:32:49] <monochrom> You don't need to "translate" exists a. a to \/a just to use de Morgan.  not (forall a. not a) is just fine.
[01:32:54] <EvanR> it means there exists a type
[01:33:16] <monochrom> Hell, you don't need to "translate", period.
[01:33:23] <alekhine_> Hello. I'm trying to get a handle on this language, but i'm having trouble finding resources beyond the wiki and the purple book. I've written a couple very basic things but that's it. I have experience in imperative languages. If anybody could recommend some stuff for a beginner, that would be great. I appreciate any help
[01:33:57] <steven1> monochrom: hmm ok, my motivation was to derive the representation of existential types (forall r. r -> a) -> a from scratch
[01:34:05] <EvanR> if someone tells you there exists a type a, well there you have it. That is what type there is
[01:35:06] <EvanR> doing a set complement on the whole universe types sounds interesting and outside the usual realm of possibility xD
[01:35:12] <steven1> alekhine_: what's the purple book? I liked learn you a haskell when I started
[01:35:36] *** Quits: drewr (~drew@user/drewr) (Client Quit)
[01:35:58] <steven1> EvanR: yeah, could be. My derivation is close so I'm thinking there could be some connection here
[01:36:03] *** Quits: oldsk00l (~znc@ec2-52-57-80-8.eu-central-1.compute.amazonaws.com) (Remote host closed the connection)
[01:36:05] <monochrom> alekhine_: I don't know what's the purpose book.  My http://www.vex.net/~trebla/haskell/learn-sources.html comments on some books and works I know. Maybe you find something suitable to you or not.
[01:36:08] <alekhine_> steven1: I was referring to Haskell Programming from First Principles, by Chris Allen and Julie Moronuki
[01:36:33] <alekhine_> Thanks monochrom
[01:36:37] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:38:00] <dsal> alekhine_: That book is pretty great, but if you're not understanding something, it'd be easier to offer guidance if you said what you didn't understand and gave some context as to why you didn't understand it.
[01:38:34] <dsal> e.g., "experience in imperative languages" hints at some handicaps that will make a few things harder to understand.
[01:38:37] <geekosaur> @where paste
[01:38:37] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[01:39:22] <monochrom> Yeah, there is diminishing return in more reading.
[01:39:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[01:40:41] <monochrom> And the 1000-page tome is already a lot of reading.
[01:41:01] <iphy> which combinator can I use to implement this function? https://github.com/iphydf/hs-cimple/blob/fix/test/Language/Cimple/ASTSpec.hs#L25
[01:41:38] <EvanR> steven1, so you proved (exists a . a) -> (forall r . r -> b) -> b. With \e f -> f e. And you want to prove ((forall r . r -> Void) -> Void) -> (exists a . a) ?
[01:42:00] <alekhine_> Fair enough dsal. I guess I'm trying to just learn everything I can do? I think I want a list of topics or features I need to know about so I can write useful programs, then move on to more advanced things later
[01:42:01] <EvanR> or
[01:42:53] <monochrom> That direction is probably unprovable in constructive logics.
[01:43:08] <alekhine_> And yes, my ingrained imperative experience has actually hindered my learning.
[01:43:17] <steven1> EvanR: I guess I proved (exists a. a) -> (forall r. r -> Void) -> Void
[01:43:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[01:43:25] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[01:43:29] <dsal> alekhine_: I found the book pretty good for that.  It's hard to know what's holding you up, though.
[01:43:32] <EvanR> turns out using some basic assumptions you can translate any imperative program into a functional program xD
[01:43:41] <EvanR> for what it's worth
[01:43:42] <dsal> I had a few programs I'd written in Haskell that I'd been using while going through that book.
[01:43:50] <monochrom> Indeed Kant complained about Hilbert's PhD thesis precisely because Hilbert was pulling that off.
[01:43:54] <steven1> and I want to go to ((forall r. r -> Void) -> Void) -> (forall a. (forall r. r -> a) -> a)
[01:44:11] <EvanR> yeah, doesn't seem plausible to do that
[01:45:08] <alekhine_> dsal: fair enough, i'll go find some problem to bash my head against then come back with a more specific question
[01:45:15] <monochrom> The statement to be proved was "there exists blah blah", Hilbert did "if blah blah didn't exist, something would go wrong". Kant was like "that's not math, that's theology".
[01:45:25] <EvanR> haha
[01:45:37] <steven1> yeah, that's too bad. I tried subbing Void = forall a. a but it doesn't seem to help. There's no way to require that both Voids are the same a. At least, I'm not sure whether I'm allowed to 'pull out' the forall
[01:45:45] *** Joins: solidfox (~snake@user/snake)
[01:46:07] <EvanR> sure
[01:46:14] <EvanR> the forall a
[01:46:19] <EvanR> doesn't changing anything
[01:46:35] <EvanR> might make it even more clear what's going on
[01:47:09] <steven1> yeah, basically I can make it into (forall r. r -> (forall a. a)) -> (forall a. a) but seems like I'm stuck from here
[01:47:51] <EvanR> once multiple different a appear I go for a third letter
[01:47:56] <EvanR> just to avoid confusion
[01:48:10] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:48:54] <Henson> Hi everyone, I'm trying to build a project in which a Haskell function is exported to C via the FFI, but I'm getting an "undefined reference" to the exported function at link time.  What can I put in the cabal file to make C find this Haskell function?  Finding the C function in Haskell works just fine.
[01:53:15] *** solidfox is now known as snake
[01:53:19] <Henson> hmm, it seems if I move the library in question from "exposed-modules" to "other-modules" it compiles and gets rid of the error.
[01:54:46] <EvanR> steven1, or... the task of proving that A implies B when A and B can be proven independently is possible but pointless
[01:55:08] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[01:55:17] <EvanR> i.e. f :: Int -> Char, f _ = 'c'
[01:55:21] <EvanR> Int implies Char
[01:55:36] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:55:45] <steven1> Void can't be proven though
[01:55:55] <EvanR> no Void is happening in your theorem
[01:55:56] *** Parts: snake (~snake@user/snake) (Leaving)
[01:56:12] *** Joins: alx741 (~alx741@157.100.93.160)
[01:56:35] <EvanR> unless i copy pasted wrong
[01:56:50] <EvanR> ((forall r. r -> Void) -> Void) -> (forall a. (forall r. r -> a) -> a)
[01:57:42] <steven1> yeah that's what I want
[01:58:02] <EvanR> \_ f = f id 
[01:58:07] <dsal> alekhine_: Yeah, for me, having a thing I want to work on makes learning *way* easier.
[01:58:23] <steven1> you're saying that has that type?
[01:58:33] <EvanR> yeah, a = Void -> Void xD
[01:58:38] <EvanR> er
[01:58:44] <EvanR> the second r = Void -> Void
[01:59:21] <EvanR> they are just independent 
[01:59:22] *** Joins: ksqsf (~user@134.209.106.31)
[01:59:34] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 260 seconds)
[01:59:47] <EvanR> all this leads back to the premise "someone tells you there exists a type, now what"
[01:59:55] <steven1> hmm let me think about your definition
[01:59:57] *** Quits: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 240 seconds)
[01:59:59] <EvanR> rather, there is a type and it's inhabited
[02:03:00] *** Quits: coot_ (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot_)
[02:03:44] <steven1> yes, I see your point, we basically ignored the first argument and then proved this: theorem :: (forall a. (forall r. r -> a) -> a)
[02:03:50] <steven1> theorem f = f id
[02:03:57] <steven1> which is like saying exists r. r
[02:04:02] <steven1> 'there exists a type'
[02:04:09] <EvanR> that is inhabited
[02:04:14] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[02:04:18] <EvanR> for example, Void -> Void xD
[02:05:30] <EvanR> alternatively show that some type is inhabited
[02:05:32] <steven1> I think our formulation was wrong: theorem :: ((forall r. r -> Void) -> Void) -> (forall a. (forall r. r -> a) -> a). The r on the right is different from the r on the left
[02:05:45] <steven1> the left should imply that that r exists, not some other r
[02:06:22] <EvanR> it's "implied" by being unrelated and also "true"
[02:06:31] <steven1> yeah
[02:06:40] <steven1> that's why I'm thinking we proved the wrong thing
[02:07:11] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[02:07:17] <steven1> ah, this is tough
[02:07:25] <EvanR> the informal thing you were saying made no real sense, so I take a win if I can get it xD
[02:08:17] <steven1> I can believe that, not sure where I went wrong though
[02:08:25] <EvanR> the Void version of church encoded(?) existential is a possibility but doesn't really have any bearing on the general version or help
[02:08:49] <steven1> yeah
[02:10:13] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[02:11:51] <steven1> well, thanks for the help EvanR . Maybe I will get some inspiration another time
[02:12:14] *** Quits: steven1 (~steven@74.215.200.15) (Quit: WeeChat 2.8)
[02:14:19] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:14:32] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:15:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Remote host closed the connection)
[02:20:10] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:20:13] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:21:14] *** Quits: acode (~acode@151.65.31.181) (Quit: Client closed)
[02:26:25] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:26:27] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:31:55] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:31:59] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:32:35] <iphy> which combinator can I use to implement this function? https://github.com/iphydf/hs-cimple/blob/fix/test/Language/Cimple/ASTSpec.hs#L25
[02:33:20] <EvanR> fmap ?
[02:33:34] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:33:39] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:33:44] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:34:06] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[02:35:34] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:35:34] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:36:10] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:36:11] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:36:40] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:36:41] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:37:14] *** Joins: mmhat (~mmh@55d4d066.access.ecotel.net)
[02:37:14] *** Quits: mmhat (~mmh@55d4d066.access.ecotel.net) (Client Quit)
[02:37:58] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:37:59] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:38:33] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:38:34] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:38:55] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[02:39:32] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:39:32] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:40:07] <iphy> EvanR: fmap on the Fix?
[02:40:27] <iphy> https://www.irccloud.com/pastebin/PkVts157/
[02:40:33] <EvanR> oh uh, under the Fix ?
[02:40:51] <iphy> fmap f . unFix?
[02:40:52] <EvanR> Fix isn't actually there, afterall xD
[02:41:01] *** Joins: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com)
[02:41:22] <EvanR> Fix . fmap f . unFix ?
[02:41:57] <iphy> https://www.irccloud.com/pastebin/Xecn7gdr/
[02:41:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[02:42:47] *** Joins: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[02:43:27] *** Quits: alekhine_ (~alekhine@c-73-38-152-33.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[02:43:33] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 276 seconds)
[02:43:38] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:44:04] *** Joins: nicbk (~nicbk@user/nicbk)
[02:44:30] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:46:37] *** Joins: ksqsf (~user@134.209.106.31)
[02:46:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:47:49] <EvanR> hoistFix :: Functor f => (forall a. f a -> g a) -> Fix f -> Fix g 
[02:48:01] <EvanR> hoistFix' :: Functor g => (forall a. f a -> g a) -> Fix f -> Fix g
[02:51:11] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:51:11] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:51:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[02:52:06] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:52:06] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:57:01] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:57:02] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:58:20] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:58:21] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:58:52] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:58:52] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:59:04] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:00:09] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:00:10] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:00:17] <iphy> ah nice
[03:00:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:01:03] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:01:04] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:01:33] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:01:33] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:03:26] <EvanR> Wonder when this tricks will run out xD
[03:13:01] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[03:14:36] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[03:18:26] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 252 seconds)
[03:19:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:20:00] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[03:23:07] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[03:23:09] *** Joins: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com)
[03:23:48] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:23:49] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:24:51] *** Quits: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com) (Remote host closed the connection)
[03:25:15] *** Joins: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com)
[03:30:38] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:30:39] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:31:58] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:31:59] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:36:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:37:43] *** Joins: otherwise (~otherwise@2601:602:880:90f0:ec9b:47e1:eb31:33d5)
[03:39:36] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:39:37] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:42:49] *** Joins: ksqsf (~user@134.209.106.31)
[03:42:52] <iphy> EvanR: https://github.com/iphydf/hs-cimple/blob/fix/test/Language/Cimple/ASTSpec.hs#L38
[03:42:57] <iphy> EvanR: this is getting unwieldy :P
[03:43:08] <iphy> it's kind of nice, but also kind of really not nice
[03:50:02] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:50:03] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:50:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:50:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:50:25] *** Joins: wroathe (~wroathe@user/wroathe)
[03:50:28] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:52:17] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[03:52:58] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[03:57:19] *** Quits: max22- (~maxime@2a01cb0883359800f5f346d928347cfb.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:58:42] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:58:43] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:02:05] <EvanR> yeah
[04:02:17] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:02:19] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:02:46] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:02:50] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:03:42] <EvanR> view patterns? 
[04:04:57] <pavonia> qrpnxz: Something is wrong with your connection
[04:06:03] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:06:10] <qrpnxz> Hm? Alright
[04:10:31] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-119.elisa-laajakaista.fi) (Quit: Leaving.)
[04:10:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[04:11:41] *** Quits: otherwise (~otherwise@2601:602:880:90f0:ec9b:47e1:eb31:33d5) (Remote host closed the connection)
[04:12:43] <iphy> EvanR: yeah, maybe
[04:12:59] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[04:14:00] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:88d3:fc83:402b:ce67)
[04:14:01] <iphy> EvanR: and maybe quasiquotes at some point
[04:14:48] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:14:50] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:14:51] *** Joins: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net)
[04:14:51] *** Quits: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net) (Client Quit)
[04:14:59] <iphy> for now, I'm going to focus on the actual algorithms I want to write
[04:15:59] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:16:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:17:01] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:17:04] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:18:00] <iphy> EvanR: https://github.com/iphydf/hs-cimple/blob/fix/test/Language/Cimple/ASTSpec.hs#L53
[04:18:31] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:18:33] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:19:56] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:19:58] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:20:19] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:20:21] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:20:48] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:20:50] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:24:57] *** Quits: talismanick (~talismani@2601:644:8500:8350::94b) (Ping timeout: 240 seconds)
[04:26:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[04:27:03] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:27:05] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:30:19] <pragma-> settle down qrpnxz 
[04:32:07] <geekosaur> they've been bouncing for the past 3 hours, I doubt it's going to stop :(
[04:32:09] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[04:32:57] <geekosaur> …or maybe I'm wrong. One can hope
[04:33:27] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:33:50] <geekosaur> welp
[04:34:07] *** ChanServ sets mode: +o geekosaur
[04:34:23] *** geekosaur sets mode: +b *!*@user/qrpnxz
[04:34:48] *** geekosaur sets mode: -o geekosaur
[04:34:50] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) ()
[04:35:16] <geekosaur> ban will time out in 30 minutes
[04:35:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[04:36:57] *** Quits: acidjnk (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:39:01] *** Joins: euouae (~euouae@user/euouae)
[04:39:19] <euouae> Hello, where can I read more about type theory? Types, kinds, etc
[04:41:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Remote host closed the connection)
[04:44:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[04:44:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[04:45:16] <sm2n> TAPL is a decent start
[04:45:31] <sm2n> (that's the book Types and Programming Languages)
[04:45:33] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:48:17] <euouae> Thank you. Do you happen to know a more brief text? I might look into TAPL but it is large.
[04:48:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[04:49:02] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[04:51:56] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[04:52:35] *** Joins: jespada (~jespada@87.74.33.157)
[04:52:59] <euouae> I might be able to google the terms from the index and find some papers or something a bit more brief
[04:53:05] <EvanR> https://github.com/michaelt/martin-lof
[04:54:42] <euouae> EvanR, lol, looks like they don't care for copyright
[04:56:18] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[04:56:27] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:56:34] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[04:58:23] <euouae> So `A Theory of Types` followed by `An Intuitionistic Theory of Types` is what I'm looking for?
[04:58:57] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[05:00:53] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[05:01:21] <euouae> Hm, wikipedia says that Martin-Lof described multiple type theories, https://en.wikipedia.org/wiki/Intuitionistic_type_theory#Martin-L%C3%B6f_type_theories  
[05:01:28] *** Joins: ksqsf (~user@134.209.106.31)
[05:03:36] <EvanR> I think MLTT went through a few modifications
[05:03:56] <EvanR> any of those old papers is a good start
[05:04:25] <euouae> Is there prerequisite knowledge? Would I need to know a lot of untyped lambda calculus? Do I need the Curry-Howard corresp theorem?
[05:04:38] *** ChanServ sets mode: +o litharge
[05:04:40] *** litharge sets mode: -bo *!*@user/qrpnxz litharge
[05:04:55] <EvanR> untyped lambda calculus is even more complicated, if you want to describe it with types
[05:05:33] <EvanR> if you start with basic types, simply typed lambda calculus, it turns out pretty simple
[05:05:35] <euouae> oh no that's not my intention I was just wondering if knowledge of how untyped lambda calculus works would be necessary/beneficial in studying the papers you linked
[05:06:03] <euouae> I'm talking about the more involved properties of it, not the basic definition of what untyped lambda calculus is
[05:06:16] <euouae> the reductions and such
[05:06:20] <EvanR> none of those matter to lambda calculus with simple types
[05:06:36] <euouae> and why do you mention lambda calculus with simple types?
[05:06:49] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[05:07:01] <euouae> so STLC seems to start with some universe of types T, but I'm curious about the laws/rules of that universe
[05:07:05] <EvanR> I assume you want to start at the beginning
[05:07:51] <EvanR> a universe could consist of () and for any two types A and B, A -> B
[05:07:51] <euouae> Isn't STLC equal to types (of some form) + lambda calculus? Type theory should precede it, right?
[05:08:31] <EvanR> there's no one type theory, but many begin by telling you there are functions and this is how they work
[05:08:46] <EvanR> make them with lambda, you can apply them, and they have a type
[05:09:12] <euouae> OK but the type theory of () plus arrows does not seem to have the features such as "kinds" etc. Even if you can model those features in it, they're not explicit. Right?
[05:09:34] *** Quits: whaletechno (~whaletech@user/whaletechno) (Quit: ha det bra)
[05:10:15] <EvanR> kinds comes up with theories that are more complicated but not as complicated as dependently typed lambda calculus
[05:10:29] <EvanR> middlingly complicated
[05:10:42] <EvanR> actually with dependent types, the kind system collapses and simplifies
[05:11:03] <EvanR> sounds like you find the starting stuff boring, and as such, just go ahead and read all those papers xD
[05:11:31] <euouae> so the ML type theories in those papers are dependent type theories? 
[05:12:13] <euouae> I don't find it boring necessarily but I want to make an incision because I don't have a lot of time
[05:12:34] <EvanR> then you'd better get started!
[05:12:54] <EvanR> become adept at reading especially fast
[05:13:02] <euouae> yeah I'm just trying to figure out what my goal is
[05:13:29] <EvanR> write a theorem prover? xD
[05:14:03] <euouae> no goal in terms of what to read
[05:14:38] <euouae> ncatlab point to this reference, https://www.cs.le.ac.uk/events/mgs2009/courses/gambino/lecturenotes-gambino.pdf
[05:14:42] <EvanR> the first chapter of HoMM covers a lot of basics, I'm sorry it's not the size of a pamphlet
[05:14:46] <euouae> This may be the first time that I was able to make use of ncatlab
[05:15:06] <EvanR> it's like 10 pages
[05:15:11] <euouae> What's HoMM? 
[05:15:21] <EvanR> heroes of might and magic
[05:15:36] <EvanR> I meant to say, Homotopy Type Theory
[05:15:47] <euouae> got you, okay. It's a good game btw
[05:17:56] <EvanR> there is a type theory channel and a hott channel, last I checked
[05:18:58] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[05:19:37] <euouae> ah nice, thank you 
[05:19:52] *** Joins: ksqsf (~user@134.209.106.31)
[05:20:06] <euouae> I've seen so many high level discussions here in #haskell that it's my go-to channel when I'm desparate
[05:20:43] <euouae> I think I'm set for now, thanks again
[05:23:25] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[05:23:48] *** Quits: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[05:24:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[05:26:49] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 268 seconds)
[05:28:17] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 240 seconds)
[05:28:23] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[05:29:36] *** Joins: otherwise (~otherwise@2601:602:880:90f0:24b0:b2a1:8734:604f)
[05:29:59] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[05:33:09] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[05:34:58] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:88d3:fc83:402b:ce67) (Quit: Textual IRC Client: www.textualapp.com)
[05:35:46] *** Joins: ksqsf (~user@134.209.106.31)
[05:35:51] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[05:36:36] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:38:01] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[05:38:16] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:38:57] * shapr hugs geekosaur 
[05:39:12] *** Quits: otherwise (~otherwise@2601:602:880:90f0:24b0:b2a1:8734:604f) (Remote host closed the connection)
[05:39:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[05:41:00] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[05:42:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:42:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[05:44:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[05:48:10] *** Joins: otherwise (~otherwise@2601:602:880:90f0:a989:dd0b:eb8b:9eb4)
[05:49:51] *** Joins: otherwis_ (~otherwise@2601:602:880:90f0:3c50:d90d:a6a6:9cd0)
[05:50:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[05:51:36] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 245 seconds)
[05:52:17] *** Quits: otherwise (~otherwise@2601:602:880:90f0:a989:dd0b:eb8b:9eb4) (Ping timeout: 240 seconds)
[05:52:53] *** Joins: ksqsf (~user@134.209.106.31)
[05:55:04] *** Joins: hubvu (sid495858@user/hubvu)
[05:57:49] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[05:59:38] *** Quits: nicbk (~nicbk@user/nicbk) (Quit: nicbk)
[06:01:52] *** Joins: ksqsf (~user@134.209.106.31)
[06:02:55] *** Quits: vglfr (~vglfr@88.155.28.231) (Ping timeout: 256 seconds)
[06:03:18] *** Joins: vglfr (~vglfr@88.155.28.231)
[06:05:23] *** Joins: allensanford (~allensanf@c-76-108-242-88.hsd1.fl.comcast.net)
[06:16:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:17:47] *** Joins: nattiestnate (~nate@114.122.105.227)
[06:17:57] *** Quits: xff0x (~xff0x@2001:1a81:53c9:5600:4d50:2309:32ab:9f17) (Ping timeout: 250 seconds)
[06:19:40] *** Joins: xff0x (~xff0x@2001:1a81:5206:b200:fb79:da97:621d:d351)
[06:24:48] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[06:27:43] <otherwis_> • Couldn't match expected type ‘a -> [a10]’ with actual type ‘[b3]’          what do the numbers  [a10] and [b3] mean in this error message? I want for error messages to be helpful, but I'm struggling to interpret them.
[06:28:54] <EvanR> temporary type variables, unknowns in the type checking process
[06:29:15] <EvanR> you might be able to get better messages by putting your own type signatures
[06:29:46] <EvanR> even if you don't, you can see that you put a list where it thinks a function is required
[06:31:13] <EvanR> forgot a function argument? put too many arguments?
[06:31:23] <otherwis_> 'a -> [a10]' == 'function -> list'.  when it was expecting [b3] == list. ?
[06:31:31] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[06:31:37] <EvanR> -> is a function
[06:31:41] <EvanR> [ ] is a list
[06:31:47] <otherwis_> Well I know what the problem was, and I put it there intentionally to see if I could interpret the error message
[06:32:30] <EvanR> and the problem was?
[06:32:37] <otherwis_> Oh! -> is a function, okay.
[06:33:14] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[06:33:25] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:34:32] <EvanR> if you don't put type signatures, it has to guess what you want and there are more unknowns. If you also screwed up, things get iffy. 
[06:35:14] <otherwis_> > let oddSq = filter odd . map (^2) [1..] in take 2 oddSq
[06:35:16] <lambdabot>  error:
[06:35:16] <lambdabot>      • Couldn't match expected type ‘a2 -> [a3]’ with actual type ‘[b1]’
[06:35:16] <lambdabot>      • Possible cause: ‘map’ is applied to too many arguments
[06:35:18] <EvanR> if it can't come to a single (possibly polymorphic) solution, it will barf everything it knows back at you
[06:35:57] <otherwis_> > let oddSq = filter odd $ map (^2) [1..] in take 2 oddSq
[06:35:59] <lambdabot>  [1,9]
[06:36:02] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[06:36:33] <EvanR> so you tried to compose a function with a list
[06:36:46] <EvanR> compose takes 2 functions
[06:36:46] *** Joins: alekhine_ (~alekhine@c-73-38-152-33.hsd1.ma.comcast.net)
[06:37:08] <otherwis_> isnt map a function
[06:37:26] <EvanR> parentheses
[06:37:32] <EvanR> you wrote
[06:37:35] *** otherwis_ is now known as otherwise
[06:37:41] <EvanR> (filter odd) . (map (^2) [1..])
[06:37:52] *** Quits: alekhine_ (~alekhine@c-73-38-152-33.hsd1.ma.comcast.net) (Client Quit)
[06:38:00] <EvanR> map (^2) [1..] isn't a function
[06:38:34] <EvanR> no, the error message doesn't explain all this unfortunately
[06:39:08] <EvanR> (filter odd . map (^2)) [1..] -- would work
[06:40:17] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[06:40:30] <ksqsf> The error message is leaking internal details on how type inference works, which may or may not be what you want
[06:40:37] *** Joins: machinedgod (~machinedg@24.105.81.50)
[06:42:17] <otherwise> > let oS = (filter odd . map (^2) ) [1..] in take 3 . drop 100 . oS
[06:42:18] <lambdabot>  error:
[06:42:18] <lambdabot>      • Couldn't match expected type ‘a -> [a1]’ with actual type ‘[a0]’
[06:42:18] <lambdabot>      • In the second argument of ‘(.)’, namely ‘oS’
[06:42:36] <otherwise> > let oS = (filter odd . map (^2) ) [1..] in take 3 $ drop 100 $ oS
[06:42:37] <EvanR> now you have a problem on the right side
[06:42:38] <lambdabot>  [40401,41209,42025]
[06:42:41] <EvanR> ok good
[06:42:56] *** Quits: allensanford (~allensanf@c-76-108-242-88.hsd1.fl.comcast.net) (Quit: allensanford)
[06:43:21] <otherwise> not confident between using function composition vs function application
[06:43:26] <EvanR> let f = take 3 . drop 100 . filter odd . map (^2) in f [1..]
[06:43:34] <EvanR> look no parens or dollars xD
[06:44:13] <dsal> $ makes your code expensive.
[06:44:14] <EvanR> you should internalize that function composition of two functions is always another function
[06:44:56] <dsal> Thus the result of a composition will always need an argument.
[06:45:20] <EvanR> (b -> c) -> (a -> b) -> (a -> c)
[06:45:37] <ksqsf> A useful equation: f (g x) = f $ g x = f . g $ x
[06:46:08] <EvanR> just learning this stuff without unnecessary $ will help
[06:46:27] <EvanR> even if you need parentheses sometimes
[06:49:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:50:09] <EvanR> otherwise, you know unix pipelines? The pipe of two (or more) commands is a bigger command, not a string. Pipe composes
[06:51:10] <otherwise> (b -> c) -> (a -> b) -> (a -> c)  translates to:  ('argument' 'function' 'return) 'function' ('arg' fun' 'return') 'fun' ( 'arg' 'fun' 'return') ? 
[06:51:27] <otherwise> i'm not any good at this yet...
[06:51:58] <EvanR> that's the type of .
[06:52:06] <EvanR> two functions go in, one comes out
[06:53:43] <otherwise> (2 argument function  in) -> ( 2 argument function in) -> (2 argument function out)
[06:53:50] <EvanR> 1 argument functions
[06:54:16] <EvanR> all of them
[06:56:22] <dsal> otherwise: `b -> c` is a function that takes a `b` and returns a `c`
[06:57:56] <dsal> Think about it at a higher level.  If you have an `a` and you need a `c`, and you have a way to take an `a` and make a `b` and a way to take a `b` and make a `c`, then you can compose those and have a way to take an `a` and make a `c`.  This is clearer when you use concrete types.
[06:58:54] <dsal> I have a string that represents a number, and I've got a function that adds one to a number.  Can I add one to the numeric value in a string?
[06:58:55] <dsal> :t succ
[06:58:56] <lambdabot> Enum a => a -> a
[06:58:57] <dsal> :t read
[06:58:58] <lambdabot> Read a => String -> a
[06:59:03] <dsal> :t show . succ. read
[06:59:04] <lambdabot> String -> String
[06:59:12] <dsal> > (show . succ . read) 3
[06:59:14] <lambdabot>  error:
[06:59:14] <lambdabot>      • No instance for (Num String) arising from the literal ‘3’
[06:59:14] <lambdabot>      • In the first argument of ‘show . succ . read’, namely ‘3’
[06:59:17] <dsal> > (show . succ . read) "3"
[06:59:18] <lambdabot>  "*Exception: Prelude.Enum.().succ: bad argument
[06:59:20] <EvanR> lol, nice eexample
[06:59:22] <dsal> lame
[06:59:39] <dsal> This is a case where it works better when you have types written out.
[07:00:01] <EvanR> (bad example overcomplicated by polymorphics, type classes, and it not working)
[07:00:02] <otherwise> i dont know unix pipelines yet.
[07:00:12] <EvanR> ok so that was not a great analogy either
[07:00:13] <otherwise> dsal that description is very clear, thanks!
[07:00:21] <dsal> > (succ . read) "3"   :: Int
[07:00:23] <lambdabot>  4
[07:00:23] <otherwise> not the lambdabod stuff
[07:00:44] <dsal> Trying to make it a String pushed it too far without describing the intermediate types.
[07:00:46] <dsal> :t show . read
[07:00:47] <lambdabot> String -> String
[07:01:01] <otherwise> I can just do it in ghci
[07:01:04] <EvanR> > (chr . (+1) . ord) 'a'
[07:01:06] <lambdabot>  'b'
[07:01:12] <EvanR> > (chr . (+1) . ord) 'y'
[07:01:14] <lambdabot>  'z'
[07:01:15] <dsal> Type Applications helps.
[07:01:47] <EvanR> chr and ord are good simple functions since they deal with mono concrete types
[07:01:49] <dsal> Yeah, chr/ord is narrower.
[07:01:52] <dsal> :t chr
[07:01:53] <lambdabot> Int -> Char
[07:01:54] <dsal> :t ord
[07:01:55] <lambdabot> Char -> Int
[07:02:20] <dsal> Read and Show are huge even if they weren't open.
[07:02:36] <otherwise> > :t (chr . (+1) . ord) 'a'
[07:02:37] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[07:02:51] <otherwise> > :t ((chr . (+1) . ord) 'a')
[07:02:53] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[07:02:54] <EvanR> oof
[07:02:58] <dsal> :t ((chr . (+1) . ord) 'a')
[07:02:59] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:02:59] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:02:59] *** finn_elija is now known as FinnElija
[07:03:00] <lambdabot> Char
[07:03:00] <EvanR> use > or :t, not both
[07:03:25] <EvanR> :t chr . (+1) . ord
[07:03:27] <lambdabot> Char -> Char
[07:03:28] <otherwise> :t ((chr . (+1) . ord)
[07:03:29] <lambdabot> error:
[07:03:29] <lambdabot>     parse error (possibly incorrect indentation or mismatched brackets)
[07:03:36] <otherwise> :t (chr . (+1) . ord
[07:03:37] <lambdabot> error:
[07:03:37] <lambdabot>     parse error (possibly incorrect indentation or mismatched brackets)
[07:03:46] <EvanR> the hazards of necessary parens xD
[07:03:52] <EvanR> unnecessary
[07:04:07] <otherwise> ah geez, i'll leave lambdabot alone
[07:06:05] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[07:08:22] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:09:19] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[07:09:20] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[07:09:34] <EvanR> drake dislikes f (g (h (foo (bar (baz x)))))
[07:09:57] <EvanR> drake likes f . g . h . foo . bar . baz xD
[07:11:18] <EvanR> possibly apply the x with parens over the whole thing, naming this chain something, or $ (last resort)
[07:13:21] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com)
[07:13:57] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:15:30] *** Joins: falafel__ (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com)
[07:16:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:17:57] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:18:28] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[07:18:30] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:22:35] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:22:54] <dsal> otherwise: You can have private conversations with lambdabot 
[07:23:49] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:27:21] *** Quits: td_ (~td@muedsl-82-207-238-094.citykom.de) (Ping timeout: 256 seconds)
[07:29:08] *** Joins: td_ (~td@muedsl-82-207-238-177.citykom.de)
[07:30:10] <EvanR> forgive me lambdabot for I have unsafeCoerced
[07:30:51] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[07:32:57] *** Quits: falafel__ (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:35:34] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:40:38] <monochrom> heh
[07:41:10] <otherwise> > reverse . filter (< 'a') $ filter (/= ' ') "Oh lambdabot do you want to speak with me yes or No"
[07:41:11] <lambdabot>  "NO"
[07:43:38] *** Joins: alfonsox (~quassel@103.92.42.161)
[07:44:50] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[07:46:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:48:09] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:49:28] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[07:49:32] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[07:50:59] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:58:49] *** Joins: srwm^ (~srwm@207.5.54.6)
[07:59:20] <EvanR> lol
[08:00:12] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[08:00:43] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[08:01:00] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[08:01:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:05:15] *** Joins: amk (~amk@109.255.169.126)
[08:07:49] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[08:09:57] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:f129:8ed3:b1ff:82ed) (Ping timeout: 240 seconds)
[08:13:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:27:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[08:27:57] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:28:43] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[08:32:06] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Remote host closed the connection)
[08:32:44] *** Joins: ksqsf (~user@134.209.106.31)
[08:36:22] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[08:37:59] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[08:40:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:41:37] *** Joins: biberu\ (~biberu@user/biberu)
[08:44:40] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[08:45:33] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[08:45:33] *** biberu\ is now known as biberu
[08:45:37] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:46:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[08:48:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:48:44] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:48:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:52:32] *** Joins: Rum (~bourbon@user/rum)
[08:52:37] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[08:53:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[08:54:04] *** Joins: ksqsf (~user@134.209.106.31)
[08:59:00] *** Joins: drewr (~drew@user/drewr)
[09:00:30] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[09:02:33] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 256 seconds)
[09:05:54] *** Joins: wroathe (~wroathe@user/wroathe)
[09:10:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:11:53] *** Joins: ksqsf (~user@134.209.106.31)
[09:14:25] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[09:14:56] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[09:15:14] *** Joins: ksqsf (~user@134.209.106.31)
[09:27:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[09:29:08] *** Joins: hololeap (~hololeap@user/hololeap)
[09:34:02] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[09:41:47] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[09:43:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:48:48] *** Joins: pavonia (~user@user/siracusa)
[09:49:03] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:55:08] *** Joins: spaceseller (~spacesell@31.147.205.13)
[09:58:01] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[09:58:50] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[10:02:43] *** Joins: notzmv (~zmv@user/notzmv)
[10:04:13] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[10:06:00] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:08:17] *** Joins: Guest|80 (~Guest|80@185.237.102.187)
[10:11:41] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[10:14:25] <Guest|80> Uploaded file: https://uploads.kiwiirc.com/files/42ec33f07bbab40fb13e82a251ba1551/installFailed.png
[10:15:15] <maerwald[m]> Guest|80: your curl doesn't work
[10:15:31] <maerwald[m]> Try wget
[10:16:06] <Guest|80> same comand but just wget? or have I change the whole instruction?
[10:16:20] <dmj`> Is it possible to figured out which packages use RankNTypes on hackage
[10:16:56] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:17:01] <maerwald[m]> Guest|80: sec
[10:17:26] <dsal> dmj`: I downloaded all of hackage to do ask questions like that once.
[10:17:59] <maerwald[m]> Guest|80: `ghcup config set downloader Wget`
[10:18:03] <dmj`> dsal: how'd that go?
[10:18:03] <maerwald[m]> Try that
[10:18:23] <dsal> dmj`: It was neat.  I found a lot of neat things.  It's pretty easy to answer that kind of question, but I don't have my download any longer.
[10:19:10] <maerwald[m]> Guest|80: might need to run `source ~/.ghcup/env` first
[10:19:11] *** Joins: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com)
[10:19:57] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[10:23:08] <Guest|80> ghcup config set downloader Wget     doesnt work in tty.. maerwald  what do you mean with run .ghcup/env?  I found the data
[10:23:09] <dmj`> dsal: https://github.com/nh2/hackage-download , well well
[10:24:27] <maerwald[m]> Guest|80: i mean: run `source ~/.ghcup/env`
[10:24:38] <maerwald[m]> What else would I mean?
[10:24:47] <dsal> dmj`: I don't think I used that.  It was something about a cabal command that dumps out all the things, something to make URLs out of them, and then curl to do the needful.
[10:25:01] <dsal> In any case, it wasn't that hard to get all the source files down.
[10:29:51] <dmj`> there should be a search engine for this stuff
[10:30:00] <dmj`> "hookah"
[10:30:09] <dmj`> hackage meets hoogle
[10:36:29] <Guest|80> cant reach github.com. Any Idear? I ping it, but nothing...
[10:37:43] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[10:38:54] <EvanR> https://www.githubstatus.com/
[10:39:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[10:40:13] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[10:41:30] <Guest|80> timeout. Dont know, maybe I have made something wrong with git that this website is blocked for me? Or have I managed to block myself from github?
[10:42:33] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[10:43:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:46:20] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:46:21] <Guest|80> Uploaded file: https://uploads.kiwiirc.com/files/3c49132434b8beda7aaeeaf8edcf0ad2/githubNotKnown.png
[10:47:21] <int-e> Guest|80: drop the https://
[10:47:39] *** Joins: spaceseller (~spacesell@31.147.205.13)
[10:47:40] <Guest|80> I have done it later down... same
[10:47:41] <int-e> oh you did, sorry
[10:47:58] <Guest|80> changed also dns server
[10:48:54] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:49:13] *** Quits: spaceseller (~spacesell@31.147.205.13) (Client Quit)
[10:49:38] *** Joins: spaceseller (~spacesell@31.147.205.13)
[10:51:20] *** Quits: spaceseller (~spacesell@31.147.205.13) (Client Quit)
[10:51:41] <int-e> Fun. You may have a local dns proxy that caches replies. Among a plethora of possible causes.
[10:52:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:53:48] <Guest|80> With traceroute github.com its the same; the name or service not known...  Can it be that my Android-handy caches the results for me?
[10:55:30] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 268 seconds)
[10:56:10] <Guest|80> but I used Cloudflare 1.1.1.1 and could not believe they prevent me from github.com
[10:56:33] <Guest|80> Uploaded file: https://uploads.kiwiirc.com/files/cf6fb0d7042c10cd85d7244b7a684524/DnsServer.png
[10:56:47] *** Joins: spaceseller (~spacesell@31.147.205.13)
[10:57:20] *** Quits: spaceseller (~spacesell@31.147.205.13) (Remote host closed the connection)
[11:00:37] <int-e> cool. host www.github.com 172.70.84.168 --> ;; connection timed out; no servers could be reached
[11:01:36] *** Joins: spaceseller (~spacesell@31.147.205.13)
[11:03:35] <Guest|80> hey the Ip-Adress works.
[11:05:54] <int-e> (but Cloudflare does weird stuff with routing as its core business, your results may be different)
[11:06:48] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[11:07:59] *** Quits: Guest|80 (~Guest|80@185.237.102.187) (Quit: Connection closed)
[11:10:34] <dmj`> dsal: its saying there's ~3,435 packages on hackage
[11:10:34] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:11:30] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:14:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[11:14:58] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[11:16:00] <dmj`> dsal: it says 19% of hackage uses RankNTypes
[11:16:07] *** Joins: gentauro (~gentauro@user/gentauro)
[11:16:16] <dmj`> dsal: now, some of these packages just list RankNTypes, and don't actually use it too ...
[11:17:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:18:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:20:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[11:21:02] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:21:56] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[11:21:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:31:35] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 256 seconds)
[11:32:36] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[11:37:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:37:54] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:39:16] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:39:52] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:41:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:43:23] *** Quits: nattiestnate (~nate@114.122.105.227) (Quit: WeeChat 3.4)
[11:43:29] <dmj`> dsal: it might actually be 13%
[11:44:03] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 256 seconds)
[11:54:33] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[11:57:43] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[12:01:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:01:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:01:03] *** Joins: wroathe (~wroathe@user/wroathe)
[12:02:46] *** Joins: Akiva (~Akiva@user/Akiva)
[12:05:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[12:08:49] <otherwise> λ
[12:09:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[12:11:07] <tomsmeding> \
[12:13:14] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[12:16:17] <EvanR> it's simplified greek to me
[12:25:13] <otherwise> concatMap work, where the function input is (+3) ?
[12:25:28] <otherwise> I am only able to make concatMap work with replicate
[12:27:55] <EvanR> look at the types
[12:28:23] <otherwise> okay
[12:28:50] <xerox> not very well
[12:28:56] <otherwise> I dont know what  t a means...
[12:29:21] <xerox> :t concatMap
[12:29:22] <lambdabot> Foldable t => (a -> [b]) -> t a -> [b]
[12:30:10] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Quit: You have been kicked for being idle)
[12:30:16] <otherwise> so you input a function and a list, then you input a "t a", then you get a list returned?
[12:30:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:30:28] <xerox> almost
[12:30:29] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[12:30:42] <xerox> the parens are important, the first argument is a function, the second a "t a"
[12:30:43] <tomsmeding> % :t +d concatMap
[12:30:44] <yahb> tomsmeding: (a -> [b]) -> [a] -> [b]
[12:30:46] *** Parts: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) ()
[12:30:55] <tomsmeding> otherwise: you can read it like this at first
[12:31:10] <xerox> i.e. the first arg is a function from 'a' to '[b]'
[12:31:35] <tomsmeding> actually, concatMap is generalised to not only accept a list as the second argument, but also other stuff that's sufficiently "list-like"; for lists, t = [] so that t a = [a]
[12:31:41] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:32:02] <xerox> so it's saying, given a function that assigns a [b] to any given a, and a "list of 'a's", I can make a list of 'b's
[12:32:42] <tomsmeding> > concatMap (\n -> replicate n 42) [1,2,3]
[12:32:44] <lambdabot>  [42,42,42,42,42,42]
[12:32:48] <tomsmeding> > concat (map (\n -> replicate n 42) [1,2,3])
[12:32:50] <lambdabot>  [42,42,42,42,42,42]
[12:32:54] <tomsmeding> > map (\n -> replicate n 42) [1,2,3]
[12:32:55] <lambdabot>  [[42],[42,42],[42,42,42]]
[12:34:00] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[12:34:18] <otherwise> whoa
[12:34:40] *** Quits: theproffesor (~theproffe@user/theproffesor) (Remote host closed the connection)
[12:34:45] *** Joins: zmt01 (~zmt00@user/zmt00)
[12:34:45] *** Joins: the_proffesor (~theproffe@2601:282:847f:8010::5fff)
[12:34:45] *** Quits: the_proffesor (~theproffe@2601:282:847f:8010::5fff) (Changing host)
[12:34:45] *** Joins: the_proffesor (~theproffe@user/theproffesor)
[12:34:59] <otherwise> so is replicate the only usable function here?
[12:35:06] *** Joins: jinsun (~quassel@user/jinsun)
[12:35:11] <tomsmeding> anything that produces a list :)
[12:35:24] <tomsmeding> that is, any function that has the type 'a -> [b]' for some a and some b
[12:35:28] <otherwise> anything that produces a list, that makes sense.
[12:35:54] <tomsmeding> > concatMap (\n -> map (n +) [1, 2, 3]) [4, 5, 6]
[12:35:56] <lambdabot>  [5,6,7,6,7,8,7,8,9]
[12:36:07] <otherwise> I was trying to do something like concatMap [map (+3) [1..9]]
[12:36:17] <tomsmeding> > concatMap (\_ -> [1,2,3]) [4,5,6]
[12:36:18] <lambdabot>  [1,2,3,1,2,3,1,2,3]
[12:36:23] <otherwise> to force a nested list
[12:36:29] <xerox> > concatMap (\x -> [x-1,x,x+1]) [2,5,8]
[12:36:30] <lambdabot>  [1,2,3,4,5,6,7,8,9]
[12:36:44] <tomsmeding> otherwise: that applies concatMap to one argument, right? concatMap takes two arguments
[12:37:21] <tomsmeding> otherwise: I strongly suggest reading 
[12:37:28] <tomsmeding> 'concatMap f l' as 'concat (map f l)'
[12:37:36] <tomsmeding> (it's exactly equivalent)
[12:37:59] <tomsmeding> @src concatMap
[12:37:59] <lambdabot> concatMap f = foldr ((++) . f) []
[12:38:02] <tomsmeding> lol
[12:38:17] <tomsmeding> same thing though if you think long and hard
[12:39:43] <otherwise> okay that is helpful
[12:41:39] *** Joins: acidjnk (~acidjnk@p200300d0c7271e489141218671316649.dip0.t-ipconnect.de)
[12:44:07] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[12:44:36] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:45:00] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:4441:5555:5586:d167)
[12:46:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:41] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:49:05] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-119.elisa-laajakaista.fi)
[12:49:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[12:51:15] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[12:52:14] *** Quits: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com) (Read error: Connection reset by peer)
[12:52:26] *** Joins: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com)
[12:55:20] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:55:50] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[12:58:54] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:4441:5555:5586:d167) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:02:44] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[13:07:16] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:09:37] *** Quits: vglfr (~vglfr@88.155.28.231) (Ping timeout: 240 seconds)
[13:10:21] *** Joins: ksqsf (~user@134.209.106.31)
[13:11:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[13:11:58] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:14:50] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[13:15:18] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[13:16:03] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[13:16:03] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[13:16:49] *** Joins: wroathe (~wroathe@user/wroathe)
[13:16:59] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[13:17:20] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[13:21:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[13:29:11] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[13:34:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[13:35:07] *** Joins: kuribas (~user@ptr-25vy0i81bhacxv5d2f4.18120a2.ip6.access.telenet.be)
[13:43:12] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[13:43:31] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:46:02] *** Joins: vglfr (~vglfr@46.96.129.172)
[13:46:17] *** Joins: KvL (~KvL@user/KvL)
[13:47:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[13:47:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[13:47:36] *** Joins: wroathe (~wroathe@user/wroathe)
[13:48:49] *** Quits: KvL (~KvL@user/KvL) (Client Quit)
[13:49:17] *** Joins: KvL (~KvL@user/KvL)
[13:49:17] *** Quits: vglfr (~vglfr@46.96.129.172) (Read error: Connection reset by peer)
[13:49:20] *** Joins: syrkis (~syrkis@82.192.167.70)
[13:49:29] *** Joins: vglfr (~vglfr@46.96.129.172)
[13:52:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[13:54:48] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:55:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:56:07] *** Lord_of_Life_ is now known as Lord_of_Life
[13:57:54] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:58:36] <otherwise> in prelude, we can define functions, such as "addThree = (+) 3",  is there a way to then :browse  and only show user defined functions during the active prelude session?
[13:59:05] *** Joins: vysn (~vysn@user/vysn)
[13:59:34] <otherwise> MatLab has this feature, where all user defined functions are in a sidebar window called "workspace." I'm sure Haskell has this, but I just do not know how to call it up for view...
[14:01:07] <otherwise> Found it!
[14:01:12] <otherwise> :show bindings
[14:01:14] <otherwise> :)
[14:01:44] *** Quits: vglfr (~vglfr@46.96.129.172) (Ping timeout: 268 seconds)
[14:03:03] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[14:04:18] *** Quits: xff0x (~xff0x@2001:1a81:5206:b200:fb79:da97:621d:d351) (Ping timeout: 260 seconds)
[14:04:50] *** Joins: xff0x (~xff0x@2001:1a81:5206:b200:fabe:99c1:2820:5b8f)
[14:06:40] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[14:16:12] *** Joins: max22- (~maxime@2a01cb0883359800be9c06a9a4b3ba5d.ipv6.abo.wanadoo.fr)
[14:18:23] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:18:23] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:18:23] *** Joins: wroathe (~wroathe@user/wroathe)
[14:22:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:28:55] <tomsmeding> otherwise: "in prelude" -- that's ghci; Prelude is the name of the module that is in scope by default. The text to the left of the > in the ghci prompt is the list of modules that is in scope
[14:32:17] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[14:33:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:34:56] <otherwise> is it possible to bump out of the prelude module, but still be in ghci?
[14:35:21] <otherwise> in other words, have zero modules in scope.
[14:37:30] <xerox> ghci -XNoImplicitPrelude
[14:37:51] *** Joins: vglfr (~vglfr@46.96.129.172)
[14:39:30] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[14:42:00] <Nate[m]12> does anyone have experience with writing mathematical computing of a C++ program with haskell and whether it's better to do this way compared to C++ math libraries?
[14:42:56] <Rembane> Nate[m]12: Is performance important to you?
[14:43:48] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[14:44:07] *** Quits: syrkis (~syrkis@82.192.167.70) (Ping timeout: 256 seconds)
[14:44:10] <Nate[m]12> Rembane: yes of course
[14:44:33] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[14:44:49] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[14:45:14] <Nate[m]12> Rembane: I'm also thinking about writing them all in rust instead of these tricks
[14:45:35] *** Quits: acidjnk (~acidjnk@p200300d0c7271e489141218671316649.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:46:21] <maerwald[m]> I'd pick the language with the best ecosystem for the problem, not the best language. Unless you got a lot of time on your hands
[14:48:51] <Rembane> Nate[m]12: I'd do what maerwald[m] says. numpy is also surprisingly fast. 
[14:49:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:49:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:49:11] *** Joins: wroathe (~wroathe@user/wroathe)
[14:49:32] <otherwise> xerox: thanks! However, it's kinda empty... as expected... I can't even do addition. the only type that seems to give a response is :t 2
[14:49:44] <Nate[m]12> numpy is in python right?
[14:50:38] <Nate[m]12> but my use case is eigen.
[14:51:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:51:19] <otherwise> :q
[14:51:42] <Nate[m]12> s/in/for/
[14:52:57] <Rembane> Nate[m]12: What's an eigen?
[14:53:22] <Nate[m]12> eigen library for c++
[14:53:36] <Nate[m]12> it's a math library
[14:53:37] *** Quits: vglfr (~vglfr@46.96.129.172) (Ping timeout: 240 seconds)
[14:53:44] <Rembane> otherwise: Now you need to import things from Prelude, for instance: import Prelude (Num)
[14:54:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[14:54:10] <Rembane> Nate[m]12: Then write it in C++, I don't think it's worth it to find an eigen replacement in Haskell. 
[14:55:17] *** Joins: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de)
[14:55:17] *** Quits: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de) (Changing host)
[14:55:17] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:56:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[14:57:34] <thomasjm[m]> https://hackage.haskell.org/package/eigen
[15:03:35] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:05:38] *** Joins: rito_ (~rito_gh@45.112.243.151)
[15:07:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 245 seconds)
[15:08:34] <otherwise> Rembane: oh of course!  Thanks! :)
[15:09:31] <otherwise> Certainly gives an appreciation of all the predefined libraries.
[15:11:54] <otherwise> somehow (:) is included... as well as numbers, and it seems to understand []
[15:12:34] <otherwise> so it's not completely empty (referencing: ghci -XNoImplicitPrelude )
[15:12:41] <xerox> otherwise: yeah :)
[15:14:01] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:19:20] *** Joins: mmhat (~mmh@55d4c35d.access.ecotel.net)
[15:20:44] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:4441:5555:5586:d167)
[15:20:58] *** Quits: vysn (~vysn@user/vysn) (Read error: Connection reset by peer)
[15:21:13] <xerox> otherwise: I found an use for today's concatMap example right now https://i.imgur.com/vENgIIq.png
[15:22:50] <otherwise> before I peer into that code, I must say your example for concatMap was awesome! really enlightening 
[15:25:05] *** Joins: vglfr (~vglfr@46.96.129.172)
[15:25:34] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[15:27:29] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[15:30:21] <otherwise> looks great! I almost understand it :)
[15:30:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:16] <otherwise> Holy smokes, you included my name in line 75! thanks!
[15:32:22] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[15:32:57] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[15:40:16] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[15:40:56] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[15:49:10] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[15:49:23] *** Joins: MoC (~moc@user/moc)
[16:01:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:01:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:01:27] *** Joins: wroathe (~wroathe@user/wroathe)
[16:02:47] *** Joins: neceve (~quassel@2.26.93.228)
[16:02:53] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:03:12] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[16:04:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:05:01] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[16:05:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[16:09:56] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:13:19] *** Quits: otherwise (~otherwise@2601:602:880:90f0:3c50:d90d:a6a6:9cd0) ()
[16:13:22] *** Joins: thevishy (~Nishant@2405:201:f005:c007:1d22:93e8:b240:6332)
[16:15:01] *** Joins: __monty__ (~toonn@user/toonn)
[16:15:26] *** Quits: max22- (~maxime@2a01cb0883359800be9c06a9a4b3ba5d.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:19:30] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:26:02] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[16:28:30] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[16:29:07] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[16:30:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:31:42] *** Joins: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de)
[16:31:42] *** Quits: neurocyte0132889 (~neurocyte@IP-212232085135.dynamic.medianet-world.de) (Changing host)
[16:31:42] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:34:12] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[16:34:37] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[16:36:19] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:4441:5555:5586:d167) (Ping timeout: 250 seconds)
[16:36:33] *** Joins: montxero` (~user@1.145.194.51)
[16:36:57] *** Quits: vglfr (~vglfr@46.96.129.172) (Ping timeout: 240 seconds)
[16:37:08] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[16:37:23] *** Joins: vglfr (~vglfr@46.96.129.172)
[16:38:33] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:39:59] *** Joins: syrkis (~syrkis@82.192.167.70)
[16:40:46] *** Quits: neceve (~quassel@2.26.93.228) (Read error: Connection reset by peer)
[16:42:08] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[16:43:42] *** Quits: montxero` (~user@1.145.194.51) (Remote host closed the connection)
[16:46:13] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[16:46:40] *** Joins: stilgart (~Christoph@chezlefab.net)
[16:51:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:51:16] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[16:54:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:54:38] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:01:25] *** Joins: Pickchea (~private@user/pickchea)
[17:02:12] *** Joins: max22- (~maxime@2a01cb08833598008a92023ced423869.ipv6.abo.wanadoo.fr)
[17:05:51] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[17:06:20] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:10:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[17:15:29] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[17:16:18] <Pickchea> Hey, I heard (>>=) is called "bind". Is there a name for (>>)?
[17:16:37] *** Joins: zaquest (~notzaques@5.130.79.72)
[17:19:00] <xerox> maybe you can read it "and then"
[17:20:25] *** Joins: Digit (~user@user/digit)
[17:22:36] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:26:13] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 240 seconds)
[17:32:46] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:e4ef:c23f:2799:9ee2)
[17:40:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:42:02] *** Quits: xff0x (~xff0x@2001:1a81:5206:b200:fabe:99c1:2820:5b8f) (Ping timeout: 240 seconds)
[17:43:02] *** Joins: xff0x (~xff0x@2001:1a81:5206:b200:83f6:7a30:b822:7720)
[17:43:20] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[17:43:42] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:48:14] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[17:50:37] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[17:50:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:50:57] *** Joins: kmein (~weechat@user/kmein)
[17:51:17] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[17:51:35] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[17:51:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-6db4-c125-f693-41cb.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:53:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[17:53:49] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[17:56:56] *** Joins: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net)
[17:57:03] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Read error: Connection reset by peer)
[17:58:08] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (Quit: Client limit exceeded: 20000)
[17:58:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:58:47] <Henson> does anybody use Haskell in commercial applications who'd be interested in talking to me about it?  I'd be interested in knowing somebody's experience in hiring Haskell developers, and the pros and cons from a manager's point of view over a more mainstream language like C++
[17:58:48] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[17:59:17] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 240 seconds)
[18:01:05] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[18:01:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:01:58] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:05:14] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:05:37] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:07:23] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[18:11:47] *** Joins: acidjnk (~acidjnk@p200300d0c7271e489141218671316649.dip0.t-ipconnect.de)
[18:14:29] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 256 seconds)
[18:16:34] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:23:25] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:e4ef:c23f:2799:9ee2) (Ping timeout: 240 seconds)
[18:24:12] *** Joins: ksqsf (~user@134.209.106.31)
[18:24:59] <lechner> Hi, has anyone tried to generate a Haskell type from a JSON schema? Is there an example anywhere?
[18:31:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:35:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[18:37:29] <geekosaur> https://hackage.haskell.org/package/aeson-schema claims to be able to generate types form a schema
[18:37:39] <geekosaur> *from
[18:38:36] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:38:53] <lechner> yeah, are there schemas other than JSON i should look at?
[18:39:30] <geekosaur> that I couldn't tell you
[18:39:42] <geekosaur> possibly YAML. I dislike it but it's widely used
[18:41:47] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:41:52] <mjrosenb> how on earth did it get to be widely used? I have literally never seen anyone who actually likes it.
[18:42:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:45:42] <lechner> i meant for the automatic generation of types
[18:46:23] *** Joins: CiaoSen (~Jura@p5dcc17d2.dip0.t-ipconnect.de)
[18:47:07] <lechner> or perhasp someone can help me figure out how to use this?    https://hackage.haskell.org/package/aeson-schema-0.4.1.2/docs/Data-Aeson-Schema-CodeGen.html
[18:47:17] *** Joins: spaceseller (~spacesell@31.147.205.13)
[18:47:28] <Square> lechner, protobuf, thrift, typedefs (seems half finished). Then there is hschema, schemas and mu-schema. If its just the "schema-first" thing you're after
[18:47:29] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[18:47:49] <lechner> yeah
[18:48:03] <geekosaur> there are also tools that convert yaml, etc. schema into json schemas, several designed for use with aeson-schema
[18:48:33] <lechner> actually, the other way around my work too, but then i'm perhaps married to haskell
[18:48:44] <lechner> might
[18:48:58] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[18:49:06] <lechner> and being married to haskell isn't all terrible
[18:50:29] *** Joins: ksqsf (~user@134.209.106.31)
[18:50:51] <geekosaur> sadly, neither the examples nor the tests are very enlightening about how to generate types
[18:50:52] *** Quits: spaceseller (~spacesell@31.147.205.13) (Client Quit)
[18:51:12] <lechner> maybe protobuf is the way to go
[18:51:34] <lechner> i have just used JSON for so long
[18:52:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:55:17] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[18:57:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:00:48] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[19:01:44] *** Joins: spaceseller (~spacesell@31.147.205.13)
[19:03:13] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 250 seconds)
[19:04:11] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[19:04:43] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:08:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:08:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:08:36] *** Joins: wroathe (~wroathe@user/wroathe)
[19:14:59] *** Joins: ksqsf (~user@134.209.106.31)
[19:26:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[19:27:36] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:38:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[19:45:17] *** Quits: srwm^ (~srwm@207.5.54.6) (Remote host closed the connection)
[19:47:28] *** Joins: nhatanh02 (~satori@user/nhatanh02)
[19:53:22] *** Joins: Guest|3 (~Guest|3@189.84.72.71)
[19:54:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:54:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:54:24] *** Joins: wroathe (~wroathe@user/wroathe)
[19:54:34] *** Quits: Guest|3 (~Guest|3@189.84.72.71) (Client Quit)
[20:00:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[20:00:37] *** Quits: CiaoSen (~Jura@p5dcc17d2.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:03:48] <mjrosenb> what's the mapping of base- versions to ghc releases?
[20:04:59] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:05:06] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:05:07] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[20:08:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:08:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:08:48] <geekosaur> https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history
[20:11:00] <mjrosenb> thanks!
[20:12:02] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Ping timeout: 240 seconds)
[20:12:32] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[20:12:55] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[20:14:53] <mjrosenb> uh-oh
[20:14:57] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[20:15:03] <mjrosenb> is there a ghc-lib-parser for 8.6.5?
[20:16:00] <geekosaur> I'd be surprised if there were; 8.6.5 was replaced by 8.6.6 and then 8.6.7 within the space of a week iirc
[20:17:27] <geekosaur> wait, no, I'm thinking of 8.10.x
[20:20:31] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[20:21:48] <mjrosenb> I'm trying to get haskell-language-server built with 8.6.5, and a bunch of things depend on ghc-lib-parser (or at least the nix-expr I'm looking at says that it does)
[20:21:56] <geekosaur> mm, looks like there should be but it's difficult to tell from the cabal files
[20:23:11] <geekosaur> the oldest version of ghc-lib-parser claims tested with 8.6.1, so I assume some version between that and the 8.8s works with 8.6.5
[20:23:19] *** Joins: solidfox (~snake@user/snake)
[20:24:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:24:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:24:36] *** Joins: wroathe (~wroathe@user/wroathe)
[20:25:30] *** solidfox is now known as snake
[20:25:41] *** Parts: snake (~snake@user/snake) ()
[20:27:59] <lechner> Square: Thanks for those pointers! I further stumbled across Avro, which also appears well-supported in Haskell and offers schema evolution, although it is much less popular than the others     https://hackage.haskell.org/package/avro
[20:28:00] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[20:29:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:29:22] *** Joins: dcoutts__ (~duncan@71.78.6.51.dyn.plus.net)
[20:29:28] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Quit: No Ping reply in 180 seconds.)
[20:30:11] *** Joins: gdd (~gdd@129.199.146.230)
[20:30:42] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[20:31:05] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[20:31:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:32:03] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 250 seconds)
[20:32:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:38:10] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[20:41:16] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[20:43:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[20:44:37] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:44:39] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[20:45:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e489141218671316649.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:49:15] *** Joins: Akiva (~Akiva@user/Akiva)
[20:50:41] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[20:54:23] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:56:02] *** Joins: econo (uid147250@user/econo)
[20:57:37] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[20:57:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[20:57:40] *** allbery_b is now known as geekosaur
[20:58:34] *** Joins: xsperry (~xs@user/xsperry)
[21:00:11] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[21:04:04] *** Joins: deadmarshal (~deadmarsh@95.38.112.219)
[21:05:01] *** Quits: nhatanh02 (~satori@user/nhatanh02) (Ping timeout: 240 seconds)
[21:06:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:06:21] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:11:32] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 240 seconds)
[21:13:00] *** Joins: hud (~hud@uwyo-129-72-161-67.uwyo.edu)
[21:14:57] *** Joins: Guest55 (~Guest55@95-25-134-74.broadband.corbina.ru)
[21:15:29] <hud> hi all, newb question here: why can't I run this on list a  `map ((+1).reverse) a`
[21:17:07] <geekosaur> what does it mean to reverse a number?
[21:17:39] <geekosaur> (`(+1)` indicates list items are numbers)
[21:18:00] *** Joins: zebrag (~chris@user/zebrag)
[21:18:02] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[21:18:03] <geekosaur> :t map ((+1) . reverse)
[21:18:04] <lambdabot> Num [a] => [[a]] -> [[a]]
[21:18:16] <geekosaur> so somehow a list has to be a number
[21:18:18] *** Quits: alfonsox (~quassel@103.92.42.161) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:19:16] <hud> yes so I wanted to just reverse a list and apply some function to it
[21:19:41] <geekosaur> then you reverse the list itself, not the individual items like map does
[21:19:51] <geekosaur> :t map (+1) . reverse
[21:19:52] <lambdabot> Num b => [b] -> [b]
[21:21:32] <hud> ahh, ok but with that I do get some error ```* Couldn't match expected type: a -> [b]
[21:21:33] <hud>                   with actual type: [a0]```
[21:21:46] <hud> oh sorry not sure how to write code blocks here
[21:22:12] <geekosaur> my guess is you did something like: map (+1) . reverse [1,2,3]
[21:22:17] <geekosaur> you have a precedence error
[21:22:33] <geekosaur> > (map (+1) . reverse) [1,2,3]
[21:22:35] <lambdabot>  [4,3,2]
[21:22:48] <yushyin> hud: old school, we use paste services like https://paste.tomsmeding.com/
[21:23:00] *** Joins: nhatanh02 (~satori@123.24.172.30)
[21:23:21] *** Guest55 is now known as GreenHat
[21:23:26] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:24:12] <geekosaur> the composition operator (.) operates on functions, and the precedence of function application is higher than anything else. so it reads (map (+1)) . (reverse [1,2,3]), which means (reverse [1,2,3]) has to be a function. but it's not a function, it's a list
[21:25:38] <hud> Ahh! that works cheers. You got that from the error message?
[21:26:17] <geekosaur> yes
[21:26:34] <geekosaur> the expected type was a function, the actual type was a list
[21:27:09] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Ping timeout: 256 seconds)
[21:27:14] <geekosaur> and this is a common beginner error, it's come up 3-4 times in the past two days
[21:28:49] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[21:28:51] <hud> okay thanks, how do I work this paste code/error -> I copy paste the code block, submit and then?
[21:28:57] *** Joins: nattiestnate (~nate@114.122.107.61)
[21:29:19] <yushyin> share the link
[21:29:28] <geekosaur> when you save it, the address bar in your browser will change, and you copy-paste that
[21:29:57] <geekosaur> note that you can put multiple files in a paste, so you can separate the code from the error and maintain line numbers between them
[21:30:16] <monochrom> Yeah put them in separate boxes but still on the same page.
[21:30:29] <monochrom> Other pastebins can't do that. Lame.
[21:31:15] <hud> ok let me test https://paste.tomsmeding.com/crEf1da4
[21:31:34] <monochrom> Yeah like that.
[21:31:43] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:31:43] <EvanR> hud, "whatever -> whatever" is error message jargon for function, "[whatever]" is error message jargon for list. Actually it goes beyond error messages. Now you know
[21:33:01] <geekosaur> they come up everywhere, in fact
[21:33:05] <geekosaur> :t (+1)
[21:33:06] <lambdabot> Num a => a -> a
[21:33:11] <hud> ok cheers this has been helpful - will most likely come back with more newb questions soon
[21:34:05] <EvanR> :t cake
[21:34:07] <lambdabot> error:
[21:34:07] <lambdabot>     • Variable not in scope: cake
[21:34:07] <lambdabot>     • Perhaps you meant one of these:
[21:34:26] <EvanR> hmm, no ready examples of a list sitting around anymore
[21:34:44] <monochrom> I don't think it's healthy to avoid jargon or even think in terms of describing things as "jargon" in the first place.
[21:34:45] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[21:35:05] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[21:35:14] <monochrom> A programming language is a jargon language by definition. A person who learns programming has precisely signed up for it.
[21:35:23] <geekosaur> well, once you've introduced the syntax of functions,
[21:35:27] <geekosaur> :t reverse
[21:35:28] <lambdabot> [a] -> [a]
[21:35:53] <geekosaur> which is surprisingly useful: there are only two functions with that signature, `id` applied to a list and `reverse`
[21:36:47] <EvanR> this is good jargon
[21:36:51] <geekosaur> since `a` is unconstrained and unavailable otherwise, you know the function can't "see" the elements, only rearrange them somehow. and there are very few ways to rearrange them that don't require more information
[21:36:57] <geekosaur> so it almost has to be `reverse`
[21:37:34] <EvanR> er, there are a lot of ways to "blindly" rearrange a list
[21:38:00] <monochrom> @type take 3
[21:38:01] <lambdabot> [a] -> [a]
[21:38:03] <geekosaur> but it's pure, so most of them aren't really doable
[21:38:03] <monochrom> :)
[21:38:28] <geekosaur> I was leaving out the ones that had more information (like `take 3`)
[21:38:30] <geekosaur> :t take
[21:38:31] <lambdabot> Int -> [a] -> [a]
[21:38:38] <geekosaur> has that extra Int there
[21:38:40] <EvanR> the 3 can be hard coded
[21:38:42] *** Quits: xff0x (~xff0x@2001:1a81:5206:b200:83f6:7a30:b822:7720) (Ping timeout: 268 seconds)
[21:38:49] <monochrom> Yeah I'm hardcoding that 3.
[21:39:14] <monochrom> But I'll stop now.
[21:39:18] <EvanR> :t double (x:more) = x : x : double more
[21:39:19] <lambdabot> error:
[21:39:19] <lambdabot>     parse error on input ‘=’
[21:39:20] <lambdabot>     Perhaps you need a 'let' in a 'do' block?
[21:39:25] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:39:30] <EvanR> :t let double (x:more) = x : x : double more in double
[21:39:31] <lambdabot> [a] -> [a]
[21:41:25] *** Quits: thevishy (~Nishant@2405:201:f005:c007:1d22:93e8:b240:6332) (Quit: Leaving)
[21:42:15] <EvanR> :t let half (x:_:more) = x : half more in half
[21:42:16] <lambdabot> [a] -> [a]
[21:42:35] *** Joins: xff0x (~xff0x@2001:1a81:5206:b200:83f6:7a30:b822:7720)
[21:43:05] <monochrom> I think it's a dead horse now :)
[21:43:57] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:44:08] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:45:40] <monochrom> I use f::a->[a] when I teach this.  While it allows many possibilities, a single test case "f ()" nails it.  If you tell me "f () = [(), ()]" then I know arbitrary "f x".
[21:46:41] <EvanR> so there's like a skeleton of possibilities
[21:47:05] <EvanR> a subset of things you can do if it weren't polymorphic
[21:47:54] <EvanR> and a = () reveals it
[21:48:03] <monochrom> [a]->[a] is richer, you have to test for various input lengths, and you have to watch out for permutations and duplications too.  But you "just" have to test [], [0], [0,1], [0,1,2], ... , [0..]
[21:49:49] <EvanR> ah () doesn't reveal it in that case
[21:50:16] <monochrom> Yeah, consider "f [x,y] = [y, y, x]; f xs = xs"
[21:51:06] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:51:34] <monochrom> Sometimes I pose the opposite question on exams: Give two implementations that agree on these test cases but differ on other inputs.
[21:54:13] <monochrom> And then the Yoneda lemma generates a lot of good exam questions.
[21:55:44] <monochrom> E.g., f :: (Int -> a) -> [a], or generally replace [] by any functor.
[21:56:08] <monochrom> and replace Int by any concrete type.
[21:58:15] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[21:59:05] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:01:24] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[22:01:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:04:45] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[22:05:36] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:07:34] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[22:08:00] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:09:47] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:09:47] *** Joins: n3rdy1 (~n3rdy1@c-73-14-53-56.hsd1.co.comcast.net)
[22:14:11] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[22:14:25] <EvanR> Yoneda's lemma is the only theorem from category I've heard of. And it's only a lemma
[22:14:31] <EvanR> category theory
[22:15:29] <monochrom> Let me share with you how seriously I take the different wordings "theorem" "lemma" "proposition" "fact".
[22:16:07] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[22:16:19] *** Joins: coolnickname (uid531864@user/coolnickname)
[22:16:30] <timCF> Hello! Is it possible to pass somehow type parameters (via TypeApplications or Proxy) into QuasiQuoter expression? I need it for the case where smart constructor inside QQ do require knowledge of phantom type parameter to know restrictions of values generated in compile-time. I need something like `[moneyAmt|0.01|] :: MoneyAmt 'Base 'Sell` or even better `[moneyAmt|0.01|] :: MoneyAmt dim act` for 
[22:16:36] <timCF> polymorphic stuff. But it seems like QQ is not aware or type annotations I'm trying to feed into it.
[22:19:01] <monochrom> In PVS (http://pvs.csl.sri.com/), all of those words mean the same thing. You state a theorem by starting with "theorem" or "lemma" or "proposition" or "fact", it doesn't matter which.
[22:19:23] <monochrom> In fact, or "claim", "corollary", "sublemma", even "conjecture".
[22:19:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:19:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:19:32] *** Joins: wroathe (~wroathe@user/wroathe)
[22:19:36] <monochrom> I was henceforth enlightened.
[22:21:58] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[22:22:13] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71)
[22:23:55] <EvanR> heh, fact vs claim
[22:24:04] <monochrom> heh
[22:24:10] <EvanR> is this Donald Trump's programming language of choice
[22:24:52] <monochrom> Does he like dependent types? :)
[22:25:03] <EvanR> that's cool that it was featured in The Martian
[22:25:15] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[22:26:17] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[22:34:17] *** Quits: deadmarshal (~deadmarsh@95.38.112.219) (Ping timeout: 240 seconds)
[22:34:19] *** Joins: ubert (~Thunderbi@p200300ecdf0994eb50cdffdede185786.dip0.t-ipconnect.de)
[22:36:11] *** Quits: max22- (~maxime@2a01cb08833598008a92023ced423869.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:36:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[22:39:33] *** Quits: GreenHat (~Guest55@95-25-134-74.broadband.corbina.ru) (Ping timeout: 256 seconds)
[22:43:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[22:43:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:44:16] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[22:51:19] *** Quits: dcoutts__ (~duncan@71.78.6.51.dyn.plus.net) (Remote host closed the connection)
[22:54:13] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:54:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:59:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[23:01:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:01:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:01:20] *** Joins: wroathe (~wroathe@user/wroathe)
[23:02:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:07:00] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[23:07:15] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:13:14] *** Joins: max22- (~maxime@2a01cb088335980068088847c57fd3ba.ipv6.abo.wanadoo.fr)
[23:18:51] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:20:37] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:21:59] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[23:25:12] *** Quits: urdh (~urdh@user/urdh) (Quit: Boom!)
[23:29:24] *** Quits: ubert (~Thunderbi@p200300ecdf0994eb50cdffdede185786.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:31:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:35:51] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 268 seconds)
[23:36:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:38:08] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:c17f:9983:e5a5:ab71) (Remote host closed the connection)
[23:38:17] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:45:24] *** Joins: urdh (~urdh@user/urdh)
[23:45:46] *** Quits: urdh (~urdh@user/urdh) (Client Quit)
[23:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:48:02] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 240 seconds)
[23:53:37] *** Joins: urdh (~urdh@user/urdh)
[23:53:39] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[23:53:55] *** Joins: Michal[m]1 (~oomiguelm@2001:470:69fc:105::1:5ab0)
[23:55:02] *** Joins: oo_miguel (~pi@77.252.47.226)
[23:57:22] *** Quits: jeffz` (~user@lambda.xen.prgmr.com) (Remote host closed the connection)
[23:58:32] *** Quits: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Ping timeout: 240 seconds)
[23:59:02] *** Joins: Akiva (~Akiva@user/Akiva)
[23:59:40] *** Joins: jeffz` (~user@lambda.xen.prgmr.com)
[23:59:50] *** Joins: dan-so (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
