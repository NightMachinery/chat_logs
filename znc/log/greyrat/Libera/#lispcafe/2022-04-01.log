[00:18:34] <GreaseMonkey> [05:59:45] <gilberth> How much bandwidth would that be for say 9600bps for each user? About 1Gbps. Also feasible. <-- there are plenty of people who can out-type 300, but 9600 seems to be fast enough. sure, you can still see the text reveal itself, but it's going to be more responsive than a lot of crap made these days
[00:21:00] <GreaseMonkey> now, doing that over ethernet? gonna be a lot of overhead - C100K is going to be quite the challenge here (plus you need to split across multiple IPs at that point)
[00:24:54] *** Joins: Madsy (~madsy@223.239.164.82.customer.cdi.no)
[00:47:00] <ck_> 1n
[00:50:40] *** Quits: nexeq (nexeq@user/nexeq) (Quit: WeeChat 3.4)
[00:56:15] <gilberth> Why doesn't (SETF (IF ...) ...) work?
[00:57:44] <moon-child> you can't say (setf (progn ...) ...) either
[00:58:39] <gilberth> Could be made to work, too. And (setf (if ...) ...) in contrast to progn is something I missed once in a while.
[01:00:00] <moon-child> hmm, are you allowed to define-setf-expander for things in cl:?  Probably not
[01:00:24] <gilberth> I can have my own IF. No problem there.
[01:00:32] <moon-child> but could say (defmacro mif (c t &optinal f) `(if ,c ,t ,f)) (define-setf-expander mif ...)
[01:00:42] <moon-child> bah, this time you were too fast for me!
[01:00:55] * moon-child eats his just desserts
[01:01:00] <kakuhen> gilberth: maybe the macro's definition is too rigid for conditional setf
[01:01:24] <kakuhen> probably because it has to figure out what exactly to setf if you e.g. provide writer functions
[01:01:29] <gilberth> Or I say (shadow 'if)
[01:02:25] <moon-child> yeah
[01:02:44] <gilberth> kakuhen: That would be easy. There is the concept of setf expansion. Look at (get-setf-expansion '(elt (foo) (bar))).
[01:05:23] <gilberth> The temp-vars bind as per LET*. So you can get the test value in the first temp-var and then wrap WHEN and UNLESS around the temp-vals for the both branches. Same for the read-form and store-form.
[01:05:27] <kakuhen> hmm i guess you have a point
[01:05:40] <kakuhen> oh also a friend just gifted me an fpga -- i have no idea what to do with this
[01:06:03] <gilberth> Run the CADR on it. Or the B32.
[01:06:05] <moon-child> mine bitcoin
[01:06:13] <moon-child> or run regex
[01:06:32] <gilberth> On an FPGA?
[01:06:40] <moon-child> sure
[01:07:02] <gilberth> You want to simulate NFAs?
[01:07:23] <moon-child> _I_ donn't.  But kakuhen might
[01:07:43] <gilberth> Well, I don't get why people grep all day.
[01:07:49] <moon-child> (I've expressed in the past my feeling on parsers)
[01:07:59] <moon-child> grepping, parsing, it's all the same
[01:09:12] <gilberth> Not exactly. Grepping is usually online, while parsing is according to a set grammar.
[01:09:56] <moon-child> I don't think that's true
[01:10:15] <moon-child> I think that both kinds of grepping are common
[01:11:28] <gilberth> Sure, some people might have the brilliant idea to use grep to extract some data.
[01:12:33] <gilberth> However, what might be useful would be to use my technique for Emacs. I mean it is matching regular expressions all the time.
[01:12:54] <gilberth> <http://clim.rocks/gilbert/if-setf-expander.lisp>
[01:15:02] <moon-child> what does 'cons' mean?
[01:15:13] <gilberth> consequence
[01:15:39] <moon-child> ah
[01:16:46] <gilberth> I wonder, if it would work for COND, too?
[01:17:47] <moon-child> well, it works for nested ifs, no?
[01:17:50] <moon-child> no reason why it wouldn
[01:17:54] <moon-child> t
[01:18:45] <edgar-rft> it might work but beware that cond is short for condolences :-)
[01:19:00] <gilberth> Well, my COND is like (COND ((T X))) => (IF T (PROGN X) (PROGN)) which perhaps is silly.
[01:19:28] <gilberth> So, I would need to recognize T and make PROGN work too.
[01:19:44] <gilberth> What about CASE then?
[01:19:47] <moon-child> progn yes.  But why do you care about t?
[01:20:15] <gilberth> What should (setf (progn) ...) do?
[01:20:36] <moon-child> right
[01:21:09] <gilberth> It could throw an error. The compiler would probably recognize that it is dead code.
[01:22:01] <gilberth> But the expansion (IF T (PROGN X) (PROGN)) is a bit silly to begin with.
[01:22:19] <moon-child> I would expect (if t (progn x) nil), actually
[01:22:42] <gilberth> Can't set NIL either.
[01:22:56] <moon-child> no, but you don't need to handle it specially
[01:23:40] <gilberth> It's a compile error. At least with CCL.
[01:24:42] <gilberth> SBCL has (cond (t x)) => (the t x); What is the the doing there?
[01:26:22] <gilberth> ABCL seems to have borrowed from CCL. Other Lisps: http://termbin.com/hnec
[01:26:27] <moon-child> dunno.  It generates straightforward code for (cond ('a x))
[01:27:52] <gilberth> Hmm.
[01:28:52] <gilberth> CLISP evaluates constant expressions in the expander, it seems. Like (cond ((= 3 3) x)) => x
[01:34:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[01:35:30] <gilberth> For CASE, I would need (setf (let ...) ...) ;this is getting a bit silly. What's next? (setf (loop ...) ..)?
[01:37:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:39:29] <gilberth> How about (setf (funcall (if left 'car 'cdr) p) q)?
[01:40:52] <gilberth> Or (setf (sqrt x) 42)?
[01:42:31] <moon-child> there's a post somewhere from guy steele about (setf (* x x) y)
[01:43:30] <hayley> Asking for no particular reason, does anyone know of any blogs that are very much the opposite of Henry Baker papers?
[01:43:31] <gilberth> Well, would it fork? This is not Prolog.
[01:44:04] <gilberth> Like (setf (append x y) '(a b c)) Prolog can actually do that.
[01:44:41] <selwyn> why does java have optional container objects when null exists
[01:44:56] <hayley> Because null is evil.
[01:45:13] <gilberth> Not per se.
[01:45:30] <moon-child> the thing that gets me is
[01:45:34] <moon-child> you can have a null optional
[01:45:55] <gilberth> Like you can have an optional of an optional.
[01:45:57] <selwyn> lol
[01:46:33] <hayley> Well, nothing funny is on Blow or Muratori's blogs. Steve Klabnik's one is also mostly not funny, except for the post saying that stack allocation is like generational GC. (Not really, no.)
[01:46:43] <selwyn> hayley: are you making a meme
[01:46:57] <hayley> selwyn: Yes.
[01:47:27] <gilberth> The prime example is something like GETHASH, when you don't have either a default, nor a second return value as in CL, and it returns null, you don't know, if it never was set or just happens to be null. But once you stack optionals on optionals, you can't be so sure anymore, too.
[01:47:49] <gilberth> To IMHO optional is not an optimal solution either.
[01:47:59] <hayley> Bjarne Stroustrup (sp) maybe?
[01:48:22] <moon-child> (let* ((x (gensym)) (v (gethash k ht x))) (when (eq x v) ...
[01:48:31] <hayley> Papers in HTML would be fine too.
[01:48:53] <hayley> But I need to find the anti-Henry Baker.
[01:48:57] <gilberth> Yes like (loop for x = (read stream nil stream) until (eq x stream) ...)
[01:50:00] <gilberth> But GETHASH also has a second return value telling you whether the key was found. GETF has not, but has the optional default value.
[01:51:23] <gilberth> BTW this is why I don't like (loop repeat 0 minimize 42) => 0 ; you can't tell whether you minimized a zero, or nothing.
[01:54:39] <moon-child> that's why it should be inf
[01:54:46] <moon-child> if it's inf, you don't have to care
[01:55:32] <gilberth> We have no inf. And even if we had, I could care.
[01:58:08] <gilberth> I mean, when you insist on it being a number always, you would assume (loop .... minimize x into min maximize x into max finally (<= min max)) to yield T. When you have +inf and -inf as "default", it would not be true anymore.
[01:59:41] <gilberth> I have the same trouble with REDUCE and usually define a MIN* and MAX* for which NIL is an neutral element and start with NIL as initial value for REDUCE.
[02:00:24] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:02:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:02:43] <hayley> I guess it is a good thing there is no anti-Baker.
[02:03:55] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[02:04:16] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[02:05:17] <hayley> Next thing on the list of things to do today: r/place is supposed to open again, and I want to draw the Self logo.
[02:09:52] <drakonis> https://store.steampowered.com/app/1910680
[02:09:52] -ixelp- Orb of Creation on Steam
[02:10:02] <drakonis> i hope there's nothing else to do today
[02:10:47] <hayley> 'you are really providing the "nightmare" part very well'
[02:14:06] <selwyn> til about gson
[02:27:09] *** Joins: luis (~luis@lisp/luis)
[02:40:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[02:40:10] <hayley> gilberth: Thoughts on being able to prove De Morgan's law using regex reachability warnings?
[02:42:51] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[02:54:08] <gilberth> hayley: Sure why not. You have seen the L'esprit de l'escalie?
[02:54:15] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[02:54:44] <hayley> Yes.
[02:56:24] <gilberth> You also cout express intervals as regular expresions, if you wish. Matching the binary representation of a number, that is.
[02:56:54] <gilberth> As interval sums are regular languges.
[02:57:06] * hayley prefers using the RE engine as a SAT solver
[02:57:25] <hayley> The DFA also tells you counter-examples, if you get it wrong.
[02:57:55] <gilberth> Heh.
[02:58:49] <hayley> The manual gives an example of theorem proving with the linter.
[02:58:52] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[02:58:55] <hayley> https://applied-langua.ge/projects/one-more-re-nightmare/Linting_and_warnings.html#%28part.__.This_expression_is_impossible_to_match__%29
[02:58:56] -ixelp- 3 Linting and warnings
[02:59:14] <hayley> "The compiler produces a finite state machine, which involves traversing every execution path of the machine, so it can perform analysis with no false positives or negatives."
[03:00:53] <hayley> nqthm better get on my level
[03:11:43] <gilberth> Hmm, this Z80 emulator I have found, althrough written in assembly does compute the flags. It's not using the x86 flags. This is not too clever as the 8086 flags are the very same flags as the 8080 has them. They are even at the same bit position in the flag register.
[03:12:50] <gilberth> However simulated PC is incremented by using INC, which does affect the flags. Could have used LEA, which doesn't affect flags, so the flags of a previous ALU op would survive fine.
[03:14:00] <pjb> so you have matter for a nice patch.
[03:14:20] <hayley> https://www.dgmlive.com/tour-dates/183 "a grim-sounding bootleg that has resisted the very best necromantic rites available to DGMLive"
[03:14:21] -ixelp- DGM Live
[03:14:26] <gilberth> It would be more than just a patch. "Rewrite" would be the better term.
[03:14:31] *** Parts: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[03:16:42] <gilberth> There is one flag though that is actually different on the Z80 from the 8080. What is the parity flag at times is an overflow flag with the Z80.
[03:16:53] <moon-child> imo it is better in an emulator to abstract things like flags, even if it is written in assembly
[03:17:08] <moon-child> say I want to write a debugger.  Now I have to be very careful about saving and restoring the flags
[03:17:17] <moon-child> don't even have to think about it, if the flags are abstracted
[03:18:00] <moon-child> (unless you are trying to be as fast as you can, of course; not that that matters so much with z80)
[03:18:24] <gilberth> Yes, but you don't save or restore flags often. I can compute the correct bit pattern from the flags I have. And as I said the 8086 flags are the same as the 8080 flags. The 8086 is compatible to the 8080 not in binary but by simple source to source translation.
[03:19:18] <gilberth> And for what it is worth, MS-DOS also is a CP/M clone. The system calls are the same as with CP/M.
[03:20:37] <gilberth> moon-child: It's completely useless what I do. I am kind of bored.
[03:28:01] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[03:36:13] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[03:36:23] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[03:41:59] <kakuhen> ok turns out the fpga i was gifted has 64 mb of ram
[03:42:19] <kakuhen> too bad i dont see anyone putting common lisp on one
[03:44:12] <moon-child> why would you put lisp on an fpga?
[03:44:18] <moon-child> fpga are for verilog
[03:45:08] <hayley> Lisp on 1000 Cores: The Sequel
[03:46:58] <aeth> 64 MB isn't enough for SBCL
[03:47:07] <aeth> 64-bit, anyway
[03:47:12] <aeth> maybe enough for the 32-bit version?
[03:47:26] <hayley> Would you put a x86-64 core on a FPGA?
[03:47:40] <moon-child> arm?  rv?
[03:48:37] <aeth> arm64 SBCL seems to take up nearly 100 MB so it's not much better/different than the x86-64
[03:48:42] <aeth> RISCV 64 is probably the same
[03:48:57] <aeth> You, ofc, can only use the RISCV one
[03:49:19] <hayley> Well, the CADR had microcode to save on code size.
[03:49:34] <hayley> If space is more of a concern than straight MIPS...
[03:49:49] <aeth> if RAM's the concern you'd have to use a slow/naive interpreter like CLISP
[03:50:14] <aeth> but now you get really slow speeds just to fit it in RAM... on top of the FPGA being slower than the real chip
[03:52:24] <hayley> The odd thing is that you also might find compression useful, if it helps avoid memory bandwidth/cache bottlenecks.
[03:53:31] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[03:54:16] <luis> I recall seeing an interview/chat with Gregor Kiczales some years ago where some Lisper was asking him question about CLOS and the MOP and Gregor was visibly crawling his memories looking for answers. Does anyone know what I'm talking about and whether that interview is recorded somewhere?
[04:06:18] <kakuhen> <moon-child> "fpga are for verilog" <- i dont know what else to do with an fpga
[04:08:47] <kakuhen> i was going to some discussion on algebraic topology and a friend of mine was there for some reason
[04:08:53] <kakuhen> then he gave away this thing to me
[04:08:57] <hayley> Hm, SICL has more commits than SBCL. But beach makes a lot of tiny commits.
[04:09:34] <hayley> And I guess I don't know if the repo includes commits for CMUCL.
[04:11:26] <kakuhen> probably not
[04:12:16] <moon-child> first commit 2000
[04:12:18] <moon-child> so no
[04:13:19] <moon-child> cmucl git repo seems to start in 1990.  So not complete either
[04:14:14] <moon-child> but seems it had 7k commits between 1990 and 2000
[04:14:43] <moon-child> which pushes sbcl ahead of sicl
[04:21:03] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 260 seconds)
[04:23:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:34:28] <sm2n> I'm surprised cmucl used version control in 1990
[04:36:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[04:38:01] *** Joins: aeth (~aeth@user/aeth)
[04:40:19] <hayley> https://www.youtube.com/watch?v=t42y7xwdP4s
[04:40:19] -ixelp- 07 The Fat Lady of Limbourg - YouTube
[04:42:20] <moon-child> sccs and rcs date to the 70s, I think
[04:55:39] <sm2n> didn't know that
[05:00:39] <kakuhen> if i recall correctly, rcs wasnt even originally in C
[05:00:48] <kakuhen> it used some cobol variant and was later written in C by at&t
[05:06:01] <moon-child> https://www.gnu.org/software/rcs/  apparently rcs is still in development ??
[05:06:02] -ixelp- RCS - GNU Project - Free Software Foundation
[05:10:13] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:44:40] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[05:44:47] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[05:45:59] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[05:47:31] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[05:49:53] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[05:50:29] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[06:17:07] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[06:21:18] *** Joins: Inline__ (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de)
[06:22:21] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[06:23:53] *** Quits: Inline (~Inline@p200300cd470e1300a84f1effc05ae732.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:37:51] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 256 seconds)
[07:10:25] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ac31:7ac1:bab2:710d)
[07:17:18] *** Joins: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000)
[07:17:28] *** Joins: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000)
[07:17:54] *** Quits: biluga_felpucia (~hhhh92@2804:14d:78b1:54b6::1000) (Remote host closed the connection)
[07:18:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[07:22:31] <moon-child> hmmm
[07:23:56] <moon-child> hayley: I have need of a concurrent hash table.  42nd-at-threadmill says it's picky wrt it's hasher.  What properties does my hasher need?
[07:24:32] <hayley> You could use Luckless and avoid hashing problems. But it's literally just absl::flat_hash_map with concurrency thrown in.
[07:28:08] <moon-child> luckless is slower though
[07:28:13] <moon-child> eh, probably fine, but
[07:29:02] <hayley> Not by much IIRC.
[07:29:10] <hayley> Though use https://github.com/no-defun-allowed/luckless instead.
[07:29:11] -ixelp- GitHub - no-defun-allowed/luckless: Lockless data structures for Common Lisp
[07:30:21] <moon-child> I am told not to look
[07:30:23] * moon-child looks anyway
[07:31:18] <ck_> Lookless
[07:34:24] * hayley uploaded an image: (58KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/dcCsQoRCJaBRdURTsFvxHXLj/why-is-the-shinmera-screaming.jpg >
[07:48:39] *** Joins: semz_ (~semz@user/semz)
[07:51:31] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[07:52:34] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[07:54:56] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:22:26] *** Joins: Lycurgus (~juan@98.4.112.204)
[08:26:03] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 260 seconds)
[08:26:42] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[08:37:29] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[08:39:31] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 250 seconds)
[08:40:15] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[08:41:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[08:51:53] *** Joins: Lycurgus (~juan@98.4.112.204)
[09:04:04] * hayley uploaded an image: (309KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XegrABgDQNiGsaQUVOhrPDhk/minusp.png >
[09:14:52] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[09:44:21] *** Quits: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1000) (Remote host closed the connection)
[11:51:37] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Ping timeout: 240 seconds)
[11:58:09] *** Joins: shka (~herr@109.231.3.55)
[11:59:08] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:21:21] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:41:41] *** Joins: dickbar__ (~dickbaren@dyndsl-031-150-224-141.ewe-ip-backbone.de)
[13:17:01] *** Quits: dickbar__ (~dickbaren@dyndsl-031-150-224-141.ewe-ip-backbone.de) ()
[13:45:32] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[14:09:52] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Quit: Common Lisp IRC library - http://common-lisp.net/project/cl-irc)
[14:10:34] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[14:10:39] <selwyn> being in contact with compsci undergrads is a bit depressing
[14:11:14] <Gnuxie> why were you in contact?
[14:11:18] <selwyn> they only want to know 'useful' stuff like java, c++ and python
[14:11:21] <Gnuxie> do you have covid now?
[14:11:43] <selwyn> lol
[14:11:46] <selwyn> i do feel ill actually
[14:12:17] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Read error: Connection reset by peer)
[14:12:18] <selwyn> i have entered a programming competition and i need to partner up with someone
[14:12:27] <selwyn> its like 60%+ undergrads
[14:12:47] <hayley> Yeah, some undergrads are like that.
[14:13:05] * hayley not like the other undergrads, etc
[14:13:07] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[14:13:34] <selwyn> only java, rust and python are acceptable languages
[14:13:44] <selwyn> in the competition
[14:14:34] <hayley> pony
[14:14:35] <Bakerposting> OMG!! Ponies!!!
[14:14:48] <Gnuxie> it's such a shame they made a language called pony 
[14:14:48] <Bakerposting> OMG!! Ponies!!!
[14:15:07] <hayley> Pony people should have read Doligez-Leroy GC smh
[14:15:15] <shka> selwyn: modern day slavery 
[14:15:25] <hayley> "we make GC with immutable types" bish welcome to 1993
[14:15:26] <shka> chains are in minds
[14:15:56] <hayley> https://www.reddit.com/r/ProgrammingLanguages/comments/trtqkz/what_is_the_advantage_of_the_pyhton_compilation/i2yksj2/?context=3
[14:15:56] -ixelp- What is the advantage of the "Pyhton compilation model" over the "Java compilation model"? : ProgrammingLanguages
[14:16:06] * hayley mumbles "n00b", spits, and moves on
[14:16:14] <shka> selwyn: anyway, let me emphasis this again: there are us, and there are normies :P
[14:16:38] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[14:18:22] <ck_> I will soon attempt to replace a glued-in battery that has ballooned and will probably explode directly into my face
[14:18:29] <selwyn> glhf
[14:18:31] <ck_> if you never hear from me again, tell my friends I said hello
[14:21:32] <selwyn> hopefully i can cut a deal with someone where we work separately and submit the best solution
[14:22:12] <ck_> tell us more about this competition
[14:22:15] <selwyn> i'm also impressed at how performant abcl is
[14:22:23] <ck_> what jvm does it run on?
[14:22:34] <shka> well, the newest one now
[14:22:42] <selwyn> 11?
[14:22:57] <ck_> I last tried in 2019 and it wasn't very recent which had me drop it, very unfortunately
[14:23:03] <ck_> I should try again soon
[14:23:33] <shka> it was ported to newer jvms since now
[14:23:41] <shka> even 15
[14:23:50] <ck_> I see, thanks for making me aware of this
[14:23:58] <shka> you are welcome 
[14:24:17] <selwyn> mentally i am still at 1.4.2 
[14:24:22] <selwyn> there is so much extra shit in it now
[14:24:26] <ck_> yeah that's where I was at as well
[14:24:29] <ck_> crazy world
[14:24:36] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[14:24:55] <ck_> every day I build more understanding and empathy with "old people"
[14:25:31] <selwyn> i remember being 10 and thinking 'maybe i will get to live to see java 15"
[14:25:39] <selwyn> so life goal achieved i suppose
[14:25:54] <ck_> check
[14:26:18] <ck_> oh by the way I spotted a print shop near the office
[14:26:29] <ck_> project "nicely bound clqr" is back on track
[14:27:29] <ck_> presupposing my survival of this repair of course
[14:27:42] <selwyn> oh yeah we had planned that
[14:29:09] <selwyn> i can't actually link to the competition page, but here is the final from a previous year
[14:29:11] <selwyn> https://www.youtube.com/watch?v=904OUEAk4xI
[14:29:12] -ixelp- Terminal Global Championship - Final Four - May 2021 - YouTube
[14:39:14] <ck_> bookmarked for later, thanks
[14:39:23] <ck_> also: "[...] sponsored by Citadel and Citadel Securities in partnership with Correlation One [...]"
[14:39:26] <ck_> rings a bell, that name
[14:39:43] <ck_> gamestop stuff?
[14:39:52] <selwyn> no idea
[14:42:35] *** Joins: cosimone (~user@93-47-230-184.ip115.fastwebnet.it)
[14:48:08] * pl ponders if zombie symbolics would cough up access to PortableGenera if I asked with reasoning "writing non-commercial fiction where Genera is minor plot point"
[14:48:40] <hayley> I've heard that PG is eventually eventually going to have a free version for non-commercial use.
[14:48:55] <pl> eventually, yes
[14:49:05] <hayley> My April Fools' prank today was to write a section of the one-more-re-nightmare manual that discusses static type errors.
[14:49:06] <pl> I'm not a patient person
[14:49:46] <hayley> https://www.youtube.com/watch?v=Ryc8gGfnL5M then?
[14:49:47] -ixelp- Pirates - YouTube
[14:49:51] <selwyn> pl: the android in shinmera's game runs on genera
[14:50:35] <pl> (and I actually do have a... fanfiction project, that in-story has the main character running XL1200 and MacIvory 3, maybe UX1200 as well, to do actual magic)
[14:51:01] <pl> the insane troll idea was to actually write the software used in story for magic and troll the readers with it
[14:51:10] <pl> selwyn: I do remember
[14:51:55] * selwyn feels unpatriotic describing common lisp as a 'jvm language'
[14:52:15] <ck_> feel like a parenthesis in bracket's clothing instead
[14:53:15] <pl> I can partially write the software without Genera, but generating a Genera installable tape image would be harder
[14:53:48] <pl> (McCLIM should work well enough there)
[14:54:27] <pl> (extra points if I just figure how to jack into NS xD)
[14:56:36] <shka> selwyn: melancholic, isn't it?
[14:57:06] <selwyn> these guys don't seem to favour gofai too much
[14:57:25] <hayley> https://www.youtube.com/watch?v=dSCpVhKvmCY Plastic explosive is also used for multi-layer semiconductor manufacturing, apparently.
[14:57:25] -ixelp- How It's Built: AMD 3D V-Cache Technology - YouTube
[14:57:31] <hayley> And I thought it was just for garbage collection and blowing up things.
[14:58:25] <shka> gofai works in games very well
[14:58:37] <selwyn> yeah
[14:59:16] <pl> hayley: remember that chip manufacturing is major user of ClF3
[14:59:17] <selwyn> my game plan is currently to do gofai and tweak it if i have time
[14:59:43] <selwyn> none of the other options will work in the time frame
[14:59:56] <hayley> pl: Yes, the joke is that there is a C4 garbage collector, and also C4 is an acronym for bonding dies vertically too.
[15:00:27] <pl> heh
[15:00:45] <pl> hayley: I actually thought of the real world example of "oneshot" GC that involved RDX
[15:01:23] <hayley> Yes, missiles self-garbage collect in O(1) time.
[15:01:38] <hayley> But I assume Java server people don't want to blow their servers up.
[15:02:11] <pl> Don't think they deploy Java on missiles, but then they deployed JavaScript on JWST, so...
[15:02:26] * selwyn was promised fridges
[15:02:33] <pl> C4I systems sometimes run Java
[15:02:38] <pl> and related
[15:02:43] <hayley> selwyn: We only have hot dog stands and Minecraft servers.
[15:02:58] <selwyn> militarisation of java
[15:03:06] <pl> ODIN I'm pretty certain was written in shitty Java with possible Drools parts
[15:03:13] <hayley> moon-child: https://github.com/tc39/ecma262/pull/2717
[15:03:13] -ixelp- Normative: Add APL to the language by codehag · Pull Request #2717 · tc39/ecma262 · GitHub
[15:03:42] <pl> and that above might be a DoD secret if not for me figuring it out independently
[15:05:51] <shka> dirty little secret
[15:10:58] <pl> arguably one can deduce the scars I have from Lockheed-Martin code by how I talk about it :V
[15:11:24] <selwyn> pl: i'm concerned that i know too much just by reading your posts
[15:11:43] <hayley> .oO( Much like international tours by rock bands, the "international" team for the place I applied to was all in US and Europe )
[15:12:07] <pl> selwyn: don't worry, UK doesn't have "born secret" idiocy, and even USA doesn't apply it to shitshows produced by LM
[15:12:07] <shka> pl casually putting all of the lispcafe on CIA watch list 
[15:12:37] <pl> shka: arguably you'd be second/third degree connected anyway due to a... fiction forum (no kidding)
[15:12:52] <selwyn> lispers love writing fiction
[15:13:06] <shka> well, ever since that challenger tank leak, nothing will surprise me
[15:14:47] <selwyn>  lol
[15:15:05] <selwyn> a bot just crashed in the final
[15:15:30] <hayley> should have used Erlang
[15:16:16] <hayley> Ever wanted to know why GLaDOS's chamber has a phone in it? Now you know
[15:16:23] <selwyn> i should base my strategy around probing the enemy for array index out of bounds vulnerabilities
[15:16:25] <moon-child> ha!
[15:17:11] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[15:17:17] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[15:18:16] <shka> sounds like a valid strategy
[15:18:31] <shka> would make you a villain 
[15:18:43] <hayley> REGRIND 2
[15:18:44] <shka> "let the world burn"
[15:21:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:21:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:27:05] <gilberth> I wonder what it takes to write an Emacs mode.
[15:28:43] <hayley> Dunno. But my variable indent hack breaks M-x shell and AUCTeX. So I might have to disable it ):
[15:29:26] <gilberth> Well, you should have hacked the redisplay function. In C.
[15:29:42] <hayley> Very funny.
[15:30:42] <gilberth> That's not funny. This is how I did that some 25 years ago or so. Didn't break anything. I don't have access to my olde backups otherwise I could look for that hacked version of epoch. :-)
[15:31:25] <gilberth> Anyhow, I want something very simple: A working assembly language mode. The one that ships with Emacs is too bad. I can't work with it.
[15:32:03] <selwyn> writing elisp is bearable
[15:32:48] <gilberth> I don't think so. I never liked elisp. And I miss m-. for elisp.
[15:33:33] <gilberth> Which is silly, shouldn't Emacs now exactly where each function came from?
[15:34:28] * gilberth buys a "k".
[15:34:48] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:36:15] <Duuqnd> m-. with elisp works for me
[15:37:20] <gilberth> Not for me. When I type m-. to an elisp buffer it asks for a tags file.
[15:38:53] <Duuqnd> Maybe I have something installed that makes it work, I don't know. My Emacs install is a mess.
[15:43:35] <selwyn> gnuxie: https://twitter.com/BritianErect/status/1509838393890553856?t=-8GVHQGzySQpQYmSaePT_w&s=09
[15:43:50] <Gnuxie> bollocks
[15:44:00] <Gnuxie> i'm voting lib dem in council elections 
[15:44:19] <selwyn> 🔸
[15:44:29] <hayley> I have two months to elections and I intend to shit in the voting booth
[15:44:29] <ck_> orange warning square, tilted 45 degrees
[15:44:45] <Gnuxie> only lib dems can win here 
[15:45:10] <hayley> or idk, I guess I might vote for anyone repealing the Assistance and Access Act of 2018
[15:45:15] <selwyn> will never forgive the lib dems
[15:45:22] <selwyn> otoh can't forgive the other two parties, so
[15:46:08] <Gnuxie> it's only cos i like the councilor tbh 
[15:46:18] <Gnuxie> idk how council elections work actually 
[15:46:19] <selwyn> yeah
[15:46:35] <selwyn> i know some good people running for local positions in labour
[15:46:40] <selwyn> but they are just over the border
[15:46:50] <Gnuxie> ahh
[15:47:05] <hayley> I wrote in Max Stirner for the council election here, since even the Green party representative was a sm*ll b*s*ness owner
[15:47:22] <selwyn> max starmer
[15:47:30] <hayley> ❌
[15:48:38] <hayley> gilberth: One thing, though, is that Emacs can't tell if a language really uses "line up things" indentation, or "indent" indentation. So e.g. the default arrangement of instructions and labels in Emacs leads to parts of code being indented off.
[15:49:26] <hayley> I guess I could make it a flag for redisplay, and enable it for just some modes. Though Lisp gets away with it as e.g. all defining forms start with "(DEF" so the indents are the same.
[15:49:53] <hayley> *instructoins and labels in assembler in Emacs
[15:51:15] <hayley> *instructions
[15:58:38] <shka> eh, i think i should replace my printer
[15:59:29] <hayley> If you pretty print a printer, do you get another pretty printer?
[16:00:12] <shka> no
[16:00:16] <shka> reader produces objects
[16:00:27] <shka> not printer
[16:11:46] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[16:27:48] <gilberth> I am slow. I get around syntax tables and enjoy the automatic font lock. Now, for indentation I need at answer the question "Am I inside a comment or string literal". Emacs knows, I only need to figure how to ask it for it.
[16:28:46] <hayley> Well, something is eating 2 CPU cores in my bot. And there is no reason for it to.
[16:29:10] <hayley> I guess someone's network code is broken and I managed to push it into an infinite loop.
[16:30:10] <hayley> htop gives me false information, as it claims there are two threads named "Heartbeat" wasting time. But there is only one thread with the name.
[16:30:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:33:08] <selwyn> gamedev has a reputation for being tough but ai must be fun
[16:33:14] <selwyn> almost like a research topic
[16:33:57] * hayley uploaded an image: (383KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/aGYxjftmewXUVKQtyWlrBFwT/fmubnzzvcaa9bzu.png >
[16:34:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[16:37:25] <gilberth> I can ask for the face at point, but that seems wrong. :(
[16:37:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:37:39] <hayley> ):
[16:38:10] <hayley> At least I should be able to use SLIME to poke around at the server tomorrow. That usually gives some details.
[16:39:53] <hayley> You quickly work out what's sleeping and what's running for no good reason. That's even how I found the bug in Garry's Mod, though only with no debug info and gdb.
[16:40:04] <selwyn> you found a bug in gmod
[16:40:18] <gilberth> It seems that indeed Emacs does not know. Hmm.
[16:40:28] <selwyn> you should get one of those hexadecimal checks, it must be the most played piece of software ever
[16:40:30] <hayley> selwyn: Yes.
[16:41:54] <hayley> One of the libraries it uses doesn't know how to use SSL_peek, and loops indefinitely instead of reaching EOF. So I modified OpenSSL to lie about how many bytes were left, if it looks like the client program is getting in a loop without progressing through the stream.
[16:45:53] <hayley> https://libcom.org/article/building-new-economy-shell-old-oxidisible-nfts
[16:45:53] -ixelp- Building the new economy in the shell of the old: Oxidisible NFTs | libcom.org
[16:47:59] <hayley> Pity that libcom wouldn't let me publish through them. But I guess what I write isn't too relevant at best.
[16:48:38] <gilberth> This explains why c-m-f and c-m-b and friends behave funny inside string literals. So, would I need to specify syntax a third time and scan the whole buffer upto point? This can't be right. I must miss sth.
[16:52:29] <hayley> Still, I think the novelty of having a working variable width font has faded on me.
[16:52:44] <hayley> It looks beautiful, but I don't really care.
[16:59:30] <hayley> selwyn: https://disqordia.space/notice/AGaF21zy03svHdck7s
[16:59:30] -ixelp- ☽ D̷i̵s̴q̴ordi̴a ☾
[17:07:19] <pl> https://usercontent.irccloud-cdn.com/file/kZzXnfH6/unknown.png
[17:07:34] <selwyn> ok, i have some ideas about how to represent the game state
[17:08:05] <selwyn> dealing with economy will be tricky
[17:13:14] <hayley> >I got banned from a gmod server once for “terrorism outside of designated time”
[17:15:52] <SAL9000> gilberth: you probably want (syntax-ppss &optional POS)
[17:16:43] <SAL9000> the 3rd element of the returned list will be non-nil if you're in a string, the 4th element if you're in a comment
[17:19:36] <semz_> Must have been a German server. Our constitution has a section that specifies when revolutions are allowed.
[17:19:39] *** semz_ is now known as semz
[17:23:17] <gilberth> SAL9000: Thanks! What a cryptic function though.
[17:26:18] <SAL9000> gilberth: my understanding is that it's a pretty fundamental part of Emacs' font-lock/parsing/etc. infrastructure, thus... well. Cryptic is the order of the day :p
[17:27:11] <selwyn> semz: ?
[17:28:33] <semz> selwyn: Was referring to the gmod line
[17:28:48] <selwyn> i mean, how can a constitution do that
[17:28:53] <selwyn> guess i should just read it
[17:29:04] <semz> it can't meaningfully
[17:29:17] <gilberth> SAL9000: This would also be the right thing for the upper-case minor mode I have. This minor mode would be like caps lock, only that while you are in comments or strings it's off.
[17:29:34] <semz> I have no idea what the authors were smoking when they added that one
[17:33:36] <dave0> pot?
[17:33:43] <dave0> ;-)
[17:33:58] <semz> But maybe it was divine intelligence, I've seen plenty of people (usually the older cranky type) go "now! now we can finally invoke 20d and depose the merkel regime!" as if you needed to ask for permission if you're going to get rid of the government. So for all I know it's working as intended?
[17:34:07] <selwyn> best german speed i imagine
[17:34:26] <selwyn> idk what drugs germany is good at producing actually
[17:34:30] <selwyn> holland much more famous
[17:34:35] <semz> beer, obviously :-)
[17:34:38] <ck_> "beer"
[17:35:28] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[17:36:22] <pl> I might have heard opinions that all the good ones are appropriated Czech :-P
[17:37:17] <selwyn> there are people over here who try to invoke magna carta to get away with breaking the law
[17:37:25] <selwyn> spoiler: it doesn't work
[17:37:42] <SAL9000> gilberth: not sure how reliable it'd be for that, but try it :)
[17:38:38] <selwyn> though they did try to support a pretender to the throne once, who was just some guy
[17:39:53] <gilberth> SAL9000: Looking at the face property however is the wrong device.
[17:40:34] <SAL9000> Some modes do that, but remember that face updates are likely to be delayed (the entire point of jit-font-lock, afaik)
[17:41:41] <gilberth> Yes, and I may turn font-lock off.
[17:43:16] <SAL9000> why would you want to do that, though?
[17:44:27] <gilberth> When I use a terminal emulator and forgot to turn ANSI colours off. Still, font-lock is the wrong abstraction.
[17:45:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[17:46:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:57:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[17:57:38] <selwyn> shka: is this the connection between adaptive nearest neighbour and random forest that you mentioned? https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.153.9168
[17:57:39] -ixelp- CiteSeerX — Random Forests and Adaptive Nearest Neighbors
[17:59:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:07:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[18:09:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:24:27] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:26:11] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[18:26:32] *** Joins: APic (apic@apic.name)
[18:44:01] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:44:51] *** Quits: cosimone (~user@93-47-230-184.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[18:53:47] *** Inline__ is now known as Inline
[19:00:38] *** Joins: treflip (~user@user/treflip)
[19:14:28] *** Joins: cosimone (~user@93-47-230-184.ip115.fastwebnet.it)
[19:19:52] *** Quits: APic (apic@apic.name) (Remote host closed the connection)
[19:38:31] *** Quits: cosimone (~user@93-47-230-184.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[19:41:46] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:55:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:00:57] *** Joins: APic (apic@apic.name)
[20:10:30] <selwyn> so the first person i asked to team up with is fine with doing it in lisp
[20:10:34] <selwyn> highly unexpected
[20:10:52] <ck_> nice
[20:10:58] <ck_> how much time do you have?
[20:11:11] <selwyn> it starts in a couple of days and lasts 10 days
[20:11:27] <ck_> have fun!
[20:11:32] <selwyn> thanks!
[20:25:16] <shka> selwyn: well, maybe?
[20:38:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:43:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:44:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:01:22] <gilberth> <http://clim.rocks/gilbert/emacs-sre.el> <--- For some sanity while writing regular expressions.
[21:02:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:09:08] *** Joins: cosimone (~user@93-47-230-184.ip115.fastwebnet.it)
[21:11:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[21:13:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:26:26] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[21:28:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:38:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:40:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:51:41] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:09:18] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[22:14:11] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[22:16:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[22:20:17] <qhong> I'm thinking about localization of programming language. I see 2 options: 1. store mappings from symbols (which don't carry any text by themselves) to texts in different languages 2. have traditional symbols that carries a name (in English), then store mappings from English text to local languages
[22:20:55] <qhong> 1 looks much nicer, but it seems to have the problem that one have to reinvent 2 to translate strings anyways (like error messages). Thoughts?
[22:21:49] <qhong> There's also a more radical scheme: have no string at all, and write error messages/format strings in parse trees of symbols. Then apply rule-based machine translation algorithm
[22:25:40] <gilberth> You want that symbol names are localized?
[22:27:23] <qhong> gilberth: yes
[22:27:44] <qhong> gilberth: but that's part of a bigger task. The whole system should not be tied to English
[22:28:13] <gilberth> Ich halte es im Allgemeinen für eine schlechte Idee Programmiersprachen an die Landesprache anzupassen.
[22:29:34] <qhong> Isn't adapting it to English as bad?
[22:30:36] <gilberth> Can you name a programming language perhaps besides Plankalkül which is not already in English?
[22:31:10] <sham1> Also, I'd aruge that thinking of programming languages being English is already a bit silly
[22:31:34] <sham1> For people who don't speak English, the keywords and such are just sequences of letters which do a thing
[22:31:47] <gilberth> Silly? In what way? Should we use Klingon instead?
[22:32:00] <qhong> sham1: that's point, symbols are abstract entities
[22:33:07] *** Joins: lagash (lagash@lagash.shelltalk.net)
[22:33:16] <sham1> Silly in that I do feel that translating the symbols seems like a fool's errand because for people who don't speak English, they are just seen as abstract symbols that do a given thing which is most likely described in their own native language
[22:33:18] <qhong> sham1: for the same reason, why choose a particular representation that provides some mnemonic for English speaker, but random sequence for non-English speaker?
[22:33:28] <gilberth> Yes, but English is the lingua franca. So what is the point in writing your programs such that only a tiny group of people could read them?
[22:33:52] <sham1> I can speak from experience having gone through this phase when I learnt to program before being all that fluent in English
[22:33:57] <qhong> gilberth: well, if symbols are localized, they can be pretty printed in whatever language
[22:34:46] <gilberth> I learned BASIC before I learned any English at all. No problem.
[22:35:51] <semz> This seems like an ideological issue rather than a concrete problem.
[22:36:11] <gilberth> And besides when you are into hacking, you better learn English. It's as easy as that. My opinion.
[22:36:22] <qhong> This isn't the point. Sure you _can_ learn, but 1. I'd argue that if functions are named in local language, it's easier to learn 2. Do you write your BASIC variable name in English or German? If in German, your program become unintelligible for a large group of people
[22:36:29] <qhong> I think 2 is a big issue
[22:37:06] <semz> Translating the language itself makes it unintelligible to the same group.
[22:37:24] <qhong> semz: that's why I propose symbol localization
[22:37:33] <sham1> I feel that it has the same problem as with trying to make the programming language resemble natural language
[22:37:36] <qhong> symbols are the same abstract entity, but can be printed in any language
[22:37:48] <semz> but the variables would still be in whatever language the author used
[22:38:16] <sham1> It's like, for comparison if programming languages used Chinese characters by default, you'd just learn the characters you need for expressing your program
[22:38:20] <qhong> if the author decide to cooperate in a team later, they will add a translation to the symbol
[22:38:24] <gilberth> It depends. What is the German word for such a simple concept as "directory" or "file"? Some use one word, some use other. I find it easier to find around a system that uses English than around one that uses German.
[22:38:45] <semz> qhong: That very quickly becomes more effort than "just learn English"
[22:39:29] <qhong> semz: I think it's less work than writing docstrings
[22:39:50] <sham1> In this case you'd most likely have to write the same docstring multiple times in different languages
[22:40:39] <semz> Wouldn't the docstrings have to be localized too? And the effort would have to be multiplied by the number of languages in your team. Contrast this with "everyone learns English once and you're good forever"
[22:41:25] <gilberth> Well, in general I have a different point of view. I would prefer if we all would use the same language and be set.
[22:41:33] <qhong> semz: I mentioned this problem from the beginning: one seem to have to reinvent string localization facility anyway
[22:42:02] <qhong> semz: therefore I proposed yeet string all together, and write in NL parse trees, with symbols as leafs
[22:42:31] <selwyn> i always thought of lisp functions and operators as 'verbs'
[22:42:55] <selwyn> in which case polish notation implies a 'verb-subject-object(s)' grammar
[22:42:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 246 seconds)
[22:43:37] <qhong> gilberth: If we have an ideal language. English is far from ideal and I'm not happy about that. I'm effectively proposing using abstract symbol as the lingua franca
[22:44:35] <gilberth> A lot of functions are no verbs, but name things. All the accessors and the like. Like FIRST, ELT, SUBSEQ etc.
[22:45:00] <qhong> selwyn: yes, and VSO is quite untypical for NL
[22:45:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:45:17] <qhong> gilberth: those are noun phrases
[22:45:20] <selwyn> qhong: but is this interesting
[22:46:30] <selwyn> if you believe, as i do, that sexps are the most natural way to think about syntax, then i guess
[22:46:33] <qhong> selwyn: hmm, yes if I'm getting what you mean
[22:46:45] <gilberth> The subject is the machine and implied. And when I say: "Create that object!" "Square that number!", or "Conctenate those sequences!" it's verb-object.
[22:46:50] <selwyn> i've heard it suggested that lisp is appealing to japanese speakers because they have a different grammar
[22:46:53] <qhong> selwyn: yes I see there's noun phrase as gilberth suggests
[22:46:57] <selwyn> but that grammar is not vso most of the time
[22:47:17] <qhong> selwyn: I actually discussed this here one/two days ago
[22:47:22] <qhong> let me find it
[22:48:10] <qhong> Btw I recall someone mentioned Japanese people may have an affinity to Lisp, and I think I get the reason now [00:46]
[22:48:11] <qhong> Japanese language is strongly head-final, therefore strongly left-branching. This matches the structure of CONSes represented by S-expr perfectly [00:47]
[22:48:51] <qhong> So lisp is actually a bit inconsistent
[22:49:22] <qhong> S-expr and CONS structure is head-final, but typically "imperative" expressions are written in head-initial style
[22:50:10] <qhong> a more consistent lisp will be written in reversed Polish notation like
[22:50:12] <pjb> The point is that once you have encoded your code as sexp, you can write an interpreter for it, to consider it as you wish!!!
[22:50:29] <semz> ...how are S-exprs head-final?
[22:50:46] <qhong> semz: it's left branching
[22:50:55] <gilberth> Not all languages depend on a fixed word order. This is an English thing, because English lost suffixes for declension and conjugation. As pointed out a few days ago, you can shuffle verb, subject, and object in German as you wish.
[22:50:56] <semz> how so
[22:51:10] <semz> The car tends to be an atom
[22:51:22] <qhong> ah wait, sorry for silliness
[22:51:42] <qhong> ok it's a big oops
[22:52:10] <semz> Imo the whole programming language ~ natural language comparison is a dead end. They have little in common even though they share terms.
[22:52:17] <qhong> forgive me, I can't recall my though process of mixing this up, it's obviously right branching
[22:53:17] <qhong> semz: sure, but what about s-expr ~ natural language comparison
[22:53:52] <semz> Sexprs by themselves have no semantics.
[22:54:02] <qhong> is s-expr a better way to write natural language? at least it's a more explicit way, and may make information processing task much easier
[22:54:47] <pjb> (defun .eval (e) (if (atom e) e (case (car (last e)) (add (apply (function +) (mapcar (function .eval) (butlast e)))) (lst (apply (function list) (mapcar (function .eval) (butlast e))))))) (.eval ' ((1 2 add) (4 5 add) lst)) #| --> (3 9) |# 
[22:54:53] <qhong> there're different level of explicitness in writing systems. Some writing systems doesn't present word boundary but some do for example
[22:55:35] <qhong> pjb: sure, better forth :) Also I apologize that I got mixed up, the usual lisp syntax is actually quite consistent
[23:00:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:02:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:07:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:08:08] *** Quits: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de) (Quit: Leaving)
[23:08:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:10:15] *** Joins: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de)
[23:25:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[23:27:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:28:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:35:25] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[23:52:12] <qhong> about the point that programmers are not bothered much by not knowing English: is it acceptable to use basically gensym notation to denote all library function? (e.g. L0 for car, L1 for cdr, L2 for cons, L3 for +, etc)
[23:52:43] <qhong> This is actually the easiest way to implement because symbols are just fixnums with a different tag, no memory storage needed
[23:52:50] <qhong> and intern become trivial
[23:54:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:56:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:59:28] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
