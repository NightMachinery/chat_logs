[00:02:08] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 256 seconds)
[00:08:48] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[00:28:50] *** Joins: llh (~llh@user/llh)
[00:29:46] <daemon> https://chng.it/WYzdsswsnc Save micronoodles (this is one for the uk folks only - and this message may go more places than I intended sorry!)
[00:29:47] <Paperbot> Link title(s): [ Petition · Bring Back MICRO NOODLES · Change.org <https://www.change.org/p/knorr-bring-back-micro-noodles?utm_content=cl_sharecopy_13567321_en-GB%3Av2&recruited_by_id=7b94b010-458d-11ec-8846-8dae07feb49e&utm_source=share_petition&utm_medium=copylink&utm_campaign=psf_combo_share_message&share_bandit_exp=message-13567321-en-GB&share_bandit_var=v1> ]
[00:42:31] *** Quits: magla (~gelignite@55d41163.access.ecotel.net) (Quit: Stay safe!)
[00:52:59] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[01:03:20] *** Quits: X-Scale (~ARM@83.223.243.66) (Ping timeout: 256 seconds)
[01:04:06] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:05:00] *** X-Scale` is now known as X-Scale
[01:07:16] * GumbyPAN CPAN Upload: Dist-Mgr-1.10 by STEVEB https://metacpan.org/release/STEVEB/Dist-Mgr-1.10
[01:20:31] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:22:19] *** Parts: thumbs (1000@apache/committer/thumbs) ()
[01:36:02] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[01:46:06] *** Joins: rgrinberg (~textual@190.113.102.153)
[01:51:21] * GumbyPAN CPAN Upload: Github-Backup-1.03 by STEVEB https://metacpan.org/release/STEVEB/Github-Backup-1.03
[01:52:17] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[02:01:22] * GumbyPAN CPAN Upload: PDL-LinearAlgebra-0.26 by ETJ https://metacpan.org/release/ETJ/PDL-LinearAlgebra-0.26
[02:28:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:33:26] *** Quits: pizdets (~pizdets@183.182.111.238) (Ping timeout: 256 seconds)
[02:33:50] *** Joins: pizdets_ (~pizdets@183.182.110.150)
[02:41:32] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:41:53] *** Joins: proller (~p@80.240.216.69)
[02:47:26] *** Joins: rgrinberg (~textual@190.113.102.153)
[02:48:24] <aquanight> mst: now that I think about it, if a constant like RPI_PIN_11 is part of a properly ordered set like that, I might more likely do something like: our @RPI_PIN; BEGIN { @RPI_PIN = (...); } use constant { map { "RPI_PIN_$_" => $RPI_PIN[$_] } keys @RPI_PIN };
[02:49:30] <aquanight> side note: it'd be nice if we had something like :pure that asserts that a sub called with constant arguments can be constant-folded
[02:54:56] <zgu> you're doing gpio stuff too today?
[02:55:16] *** Joins: whynot (~whynot@37.73.63.186)
[02:56:54] *** Joins: wilk_ (~wilk@afsb77.neoplus.adsl.tpnet.pl)
[02:56:54] *** Quits: wilk_ (~wilk@afsb77.neoplus.adsl.tpnet.pl) (Changing host)
[02:56:54] *** Joins: wilk_ (~wilk@user/wilk)
[02:57:28] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 268 seconds)
[02:57:33] *** wilk_ is now known as wilk
[03:00:00] <aquanight> nah was just thinking about things that have to define a shitload of constants.
[03:00:07] <aquanight> since it was discussed earlier
[03:01:07] <aquanight> one of the upsides to fixed-name constants like RPI_PIN_11 is that when you know specifically you need that pin you just use the constant
[03:01:35] <aquanight> one of the downsides to fixed-name constants is the song-and-dance you need to do when you're not sure which of however many pins you're going to use at a particular time
[03:01:49] *** Joins: Lemniscate (~sauvin@about/linux/staff/sauvin)
[03:03:00] <aquanight> (I imagine an example of the latter case might be something like software-side ethernet mdi-x)
[03:04:22] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 260 seconds)
[03:12:01] <simcop2387> aquanight: that shouldn't be entirely impossible to do.  something like the constant module + Attribute::Memoize
[03:16:17] *** Quits: corwin (~someone@fosshost/director/corwin) (Ping timeout: 250 seconds)
[03:17:08] *** Joins: corwin (someone@fosshost/director/corwin)
[03:18:02] <simcop2387> https://www.youtube.com/watch?v=AC__o1UxDl8 # laugh at the scots
[03:18:03] <Paperbot> YouTube video linked by simcop2387: Some Scots can't say "purple burglar alarm" - published by Limmy
[03:26:31] * GumbyPAN CPAN Upload: Data-Text-0.08 by NHORNE https://metacpan.org/release/NHORNE/Data-Text-0.08
[03:31:11] <aquanight> simcop2387: I feel like something that takes advantage of PL_check could maybe do it. But the catch is deciphering the argument list.
[03:31:39] <simcop2387> yea i'm not sure on that part, but it should be totally doable
[03:31:50] <aquanight> it seems, intuitively, that a set of constant arguments should just be a sequence of 'const' OPs
[03:32:01] <LeoNerd> Ohdear what madness have I stumbled onto tonight?
[03:32:24] <aquanight> simcop2387: but when I deparse a call like 'foo 1..42' that's a rv2av/const pair
[03:32:34] <aquanight> and I have no idea if there's other patterns like that
[03:33:01] <simcop2387> LeoNerd: :pure attribute on functions that tells the interpreter that not only can the function be memoized, but it should be folded into constants for future use
[03:33:10] <aquanight> LeoNerd: I'm having an insane moment where I'm considering how plausible something like a :pure attribute that would cause perl to constant-fold a sub call with arguments
[03:33:11] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:33:35] <aquanight> like basically how a sub with a constant return value and empty prototype gets inlined
[03:34:27] <aquanight> but it would instead be any/no prototype at all, fif the argument list is all constant (or constant-foldable), basically execute the entire sub at parse time and fold in its return value
[03:34:29] <LeoNerd> Oh I see
[03:34:37] <LeoNerd> You want to use the callchecker for that
[03:34:43] <aquanight> yeah isn't that PL_check?
[03:34:49] <LeoNerd> No
[03:34:50] <aquanight> or am I forgetting about some other thing
[03:35:02] <LeoNerd> PL_check is an array keyed by opcode, containing the op checkers - checkers for individual op types
[03:35:14] <aquanight> right I was assuming I would target ENTERSUB
[03:35:19] <LeoNerd> A callchecker is an additional layer of check for calls to specific CVs
[03:35:22] <LeoNerd> That already exists
[03:35:27] <aquanight> ah I see
[03:35:35] *** Joins: Guest25 (~Guest25@2601:404:d300:5a0:8019:c9dd:453e:462e)
[03:35:36] <LeoNerd> Go take a look at how XS::Parse::Infix makes the wrapperfuncs
[03:35:36] <aquanight> I was trying to remember if that was a thing that exists
[03:35:52] <LeoNerd> I use that all over the place there
[03:36:20] <aquanight> I assume callchecker is for when the parser has determined that "yes this is definitely the CV that is getting called"
[03:36:26] <LeoNerd> Yup
[03:36:30] <aquanight> and is e.g. bypassed in all those "runtime-resolved calls" situations
[03:36:34] <simcop2387> you'd still probably want to also throw in a memoization bit for ones where you can't statically determine it for the callchecker
[03:36:36] <aquanight> but I don't care about htose
[03:36:40] <LeoNerd> So it doesn't work in cases like   my $code = \&thing;  $code->(...)
[03:37:09] <aquanight> for my insane nonsense it only needs to work whenever sub thing :prototype() { 42 } works
[03:37:13] <aquanight> at minimum
[03:37:16] <aquanight> anything beyond is gravy
[03:38:01] <aquanight> hmm. How plausible would it be to pull this off with PP.
[03:38:11] <aquanight> (probably: not very)
[03:38:22] <LeoNerd> Hah!
[03:38:25] <LeoNerd> Hahahahano
[03:39:09] <aquanight> see that's one of those "things I really really would want" is to be able to take all this XS-only stuff like keywords, callcheckers, OP checkers, etc and make them available to PP modules
[03:39:18] <LeoNerd> I don't see why
[03:39:37] <aquanight> if for no other reason than to more easily prototype crazy ideas like this
[03:39:52] <LeoNerd> You have to know /so much/ about the internals and everything in order to be able to write some meaningful logic, that by that point you might as well be writing XS because that's only a small increment
[03:39:57] <simcop2387> aquanight: the idea is certainly neat looking.  my real question would be, how strict is it going to be about enforcing no side effects so that it can actually be certain that it would give the same result or would it just be, "go fuck yourself if you do that" undefined behavior
[03:40:14] <LeoNerd> I prototype stuff like this by just cloning an exising module of mine
[03:40:19] <LeoNerd> I really strongly suggest it
[03:40:32] <aquanight> simcop2387: none whatsoever. You slap the attribute on and you're responsible for what happens.
[03:40:36] <LeoNerd> Take one of mine, delete out all the bits that don't relate to this problem, then refill the function bodies with useful stuff for you
[03:40:47] <LeoNerd> I haven't actually written a *new* module in ... maybe 5 years now
[03:40:55] <LeoNerd> every single thing I write is just a clone of whatever was closest to it
[03:41:57] <simcop2387> i'm just so glad someone got around to multi-var for loops
[03:42:38] <aquanight> simcop2387: if you're worried about unexpected out-of-time side effects, it's pretty easy to prevent a sub from being callchecked.
[03:42:45] <simcop2387> for my ($k, $v) (%hash) { ... } is just so satisfying compared to: for my $k (keys %hash) { my $v = $hash{$k}; ... }
[03:42:46] <aquanight> I think if nothing else you can use perl4 call syntax on it.
[03:42:50] *** bnjf_ is now known as bnjf
[03:42:55] <LeoNerd> Yeah definitely :)
[03:43:10] <LeoNerd> We're working on `kv` so you can   foreach my ($idx, $val) ( kv @array ) { ... }  as well
[03:43:13] <aquanight> hmm. okay so now I feel like I have to ask
[03:43:42] <aquanight> is multivar for just a generic "multiple items at a time" type deal
[03:43:48] <aquanight> or is it specifically aimed at hashes
[03:43:58] <simcop2387> LeoNerd: oo i hadn't seen that, that's another great one.  would it translate to: my %h = kv @array; delete $h{1}; ... and get a "sparse" array that way too?
[03:44:01] <LeoNerd> It'll do whatever. It just takes multiple things out of a list
[03:44:03] <aquanight> like can I for my ($x, $y, $z) (@coord_set) { }
[03:44:04] <simcop2387> aquanight: generic
[03:44:09] <simcop2387> aquanight: yep
[03:44:11] <LeoNerd> You can indeed
[03:44:19] <aquanight> k
[03:44:31] <aquanight> so then what if for my (@curveball) (%hash)
[03:44:43] <simcop2387> not valid, has to be a list of scalars i believe
[03:44:47] <LeoNerd> foreach my ($r, $g, $b) ( mesh \@reds, \@greens, \@blues ) { ... }    # finally a use for List::Util::mesh  :)
[03:45:29] <aquanight> huh
[03:45:32] <aquanight> neat I guess
[03:45:40] *** Joins: tahc (~tahc@c-24-30-27-91.hsd1.ga.comcast.net)
[03:45:47] <aquanight> it means not having to do while (my ($k, $v) = each %hash) anymore
[03:45:56] <simcop2387> LeoNerd: yea that's one i'm definitely going to end up doing rather often.  right now i use bundle_by to get something similar (but has double the copying and lots of derefs)
[03:46:03] <LeoNerd> Yah
[03:47:02] <aquanight> is for my $l (<>) still a bad idea?
[03:47:36] <aquanight> (if it is, that's something we should address at some point, so we can deprecate while (<>))
[03:47:41] <simcop2387> haven't heard anything that'd fix that, but... for my ($f, $s) (<>) {...} is an interesting idea
[03:48:16] <aquanight> I think the only thing wrong with it is that currently it's basically list <>
[03:48:35] <simcop2387> i think it's the way the for loop op works internally that prevents it from only asking for one or more at a time rather than everything
[03:49:27] <simcop2387> LeoNerd: it almost sounds like a generator-like might be a good idea eventually anyway, for kv @array and then also generically handling <> or other things like that
[03:49:32] <simcop2387> we could even call it each()!
[03:49:43] <LeoNerd> generators are nontrivial because of list coälescence
[03:50:08] <LeoNerd> my @arr = (foo(), bar());    if foo returns a lazy generator, when do we know when to call bar() ?
[03:50:08] <simcop2387> yea it'd take a lot of work to make them work even in a limited context like the input to a for loop
[03:50:56] <LeoNerd> Whereas, languages which don't coäless lists don't have that problem
[03:50:59] <LeoNerd> i.e. most of them
[03:51:08] <LeoNerd> Sooo.. yeah it's a bit annoying. Sorry :/
[03:51:22] <simcop2387> the only possible valid one would be after you exhaust foo(), but even then that could still be wrong because bar() might depend on some global state.  you can't even interleave it by calling each one once either
[03:51:23] *** Quits: ProperN[out] (~sanko@2600:1700:eb30:a2c0::45) (Ping timeout: 264 seconds)
[03:52:00] <simcop2387> special casing <>/readline() though might not be completely insane but still sounds like it isn't worth it
[03:52:14] <LeoNerd> Perl has too many special cases already. We shouldn't be adding more
[03:53:27] <aquanight> leveraging <> around lazy generators seems like the obivous answer
[03:53:44] <aquanight> my @arr = (<foo()>, bar());
[03:54:00] <aquanight> if you just used foo() you'd get whatever object represents the generator
[03:54:39] <simcop2387> i think if i was going to propose it i'd make it require the use of <> and only make it work with a for loop to start with.  since objects can overload <> then a generator object/instance could be made still and if it produced N values at once you could still do for my ($x, $y, $z, ... $n) (<$generator>) { ... }
[03:54:59] <aquanight> yeah exactly
[03:55:32] <simcop2387> i'm not sure it's worth it still but it sounds like the least ugly special case
[03:55:35] <aquanight> it's bugged me we don't have any kind of unified iterable object type of thing, it's all of the place with either tied arrays, overloading @{}, or overloading <>
[03:56:05] <aquanight> would it even be a special case really?
[03:56:11] <simcop2387> i can't imagine the amount of bike shedding a proposal would generate
[03:56:42] <simcop2387> aquanight: it'd be special casing the way for works when given a <> in the list to iterate on.  not sure how annoying that'd be to make the parser deal with
[03:57:09] <simcop2387> mostly since i think by the time it gets to the list it's actually started emitting the for loop ops iirc
[03:58:30] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Ping timeout: 260 seconds)
[03:58:35] <simcop2387> alright i'm tired and going to "go to bed".  it's way too early but i've been weirdly exhausted all day
[03:58:54] <aquanight> I'm not sure if there is a difference as parsing goes
[03:59:13] <zgu> ugh - i hate libraries where the included "samples" are too simple to be relevant for real programs
[03:59:21] <aquanight> but that might be because I'm not sure I'm understanding these -MO=Concise dumps of some test for loops
[04:00:29] <ology> So... How might one search youtube titles these days? Just scrape https://www.youtube.com/hashtag/drybarcomedy maybe?
[04:01:21] <aquanight> for my $x (1..20) seems to define itself using just an 'list' with the two constants. Not even a range operator.
[04:01:35] <aquanight> I'm not sure I want to even go look at pp_enteriter
[04:01:40] <aquanight> I can already tell it'll be an adventure.
[04:01:56] *** Parts: tahc (~tahc@c-24-30-27-91.hsd1.ga.comcast.net) ()
[04:07:26] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[04:07:42] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:08:48] *** Quits: Guest25 (~Guest25@2601:404:d300:5a0:8019:c9dd:453e:462e) (Quit: Client closed)
[04:21:36] * GumbyPAN CPAN Upload: Tree-RB-XS-0.00_03 by NERDVANA https://metacpan.org/release/NERDVANA/Tree-RB-XS-0.00_03
[04:26:36] * GumbyPAN CPAN Upload: Github-Backup-1.04 by STEVEB https://metacpan.org/release/STEVEB/Github-Backup-1.04
[04:27:19] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:29:08] *** Joins: marcus720 (~marcus720@cpe749be8109533-cm749be8109530.cpe.net.cable.rogers.com)
[04:29:42] <marcus720> hi can any tell me what the first most important thing to learn with perl?
[04:33:47] <xq> perlbot: quickstart
[04:33:47] <perlbot> xq: https://learnxinyminutes.com/docs/perl/ -> http://mvp.kablamo.org/ -> https://qntm.org/files/perl/perl.html -> http://www.modernperlbooks.com/
[04:34:06] <xq> marcus720: try these
[04:37:27] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[04:37:32] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[04:37:56] *** Quits: marcus720 (~marcus720@cpe749be8109533-cm749be8109530.cpe.net.cable.rogers.com) (Remote host closed the connection)
[04:39:58] *** Joins: R2robot (~R2robot@user/r2robot)
[04:50:21] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[04:52:10] *** Quits: Lemniscate (~sauvin@about/linux/staff/sauvin) (Ping timeout: 260 seconds)
[04:55:35] *** Quits: Pali (~pali@user/pali) (Ping timeout: 264 seconds)
[04:56:21] <mst> aquanight: honestly, similar, especially since I can then use that to populate @EXPORT
[05:00:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[05:00:46] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 256 seconds)
[05:01:41] *** Joins: X-Scale` (~ARM@31.22.167.45)
[05:02:29] *** X-Scale` is now known as X-Scale
[05:03:39] <whynot> 18
[05:03:46] *** Joins: Pixi (~Pixi@user/pixi)
[05:06:21] *** Quits: arthurpbs (~arthurpbs@168.121.99.71) (Ping timeout: 268 seconds)
[05:09:12] *** Quits: whynot (~whynot@37.73.63.186) (Quit: leaving)
[05:14:28] <ology> Aha: https://developers.google.com/youtube/v3/docs/search/list
[05:14:29] <Paperbot> Link title(s): [ Search: list  |  YouTube Data API  |  Google Developers ]
[05:18:38] *** Joins: ProperN[out] (~sanko@2600:1700:eb30:a2c0::45)
[05:19:51] *** Joins: arthurpbs (~arthurpbs@168.121.98.23)
[05:20:36] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[05:29:56] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[05:30:14] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[05:36:20] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:42:09] *** Joins: monkey_ (~user@190.104.116.153)
[05:47:49] *** Joins: Dreadnaught (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[05:50:45] *** Quits: Kulrak (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au) (Ping timeout: 268 seconds)
[05:59:20] *** Quits: akaWolf (~akaWolf@akawolf.org) (Read error: Connection reset by peer)
[06:00:23] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[06:00:49] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[06:01:14] *** Quits: Su-Shee (~Susanne@p50894cba.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:02:02] <zgu> i need to set up a script that auto-configures all of my standard stuff in $HOME on a new machine so i don't have to do it by hand accidentally put my ssh key in "authrized_keys" then spend 5 minutes trying to figure out why it's not reading it
[06:02:23] *** Joins: Su-Shee (~Susanne@p508942a4.dip0.t-ipconnect.de)
[06:03:05] *** Joins: akaWolf (~akaWolf@akawolf.org)
[06:06:29] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Quit: Bye)
[06:11:40] <mst> zgu: p3rl.org/Object::Remote
[06:12:09] <mst> zgu: write code to do it locally, auto-fatpack on the wire over an openssh connection :)
[06:12:20] <mst> zgu: I use that for new customer machines
[06:12:53] <mst> My::SetupCode->new::on('user@host')->setup;
[06:14:11] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 268 seconds)
[06:18:11] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[06:21:00] *** Joins: furincleavagesit (~textual@47.203.181.175)
[06:21:45] <mjgardner> I can’t find a concise statement as to why the `fields` pragma is discouraged. Can anyone enlighten me?
[06:23:48] *** Quits: furincleavagesit (~textual@47.203.181.175) (Quit: Textual IRC Client: www.textualapp.com)
[06:25:22] <Jonno_FTW> hello
[06:25:41] <Jonno_FTW> what's mean when my program fails normally, but works properly when the debugger is enabled?
[06:27:58] <mjgardner> Jonno_FTW: Any number of things. It’s hard to answer without seeing the program, or at least some devolved example code that behaves like that.
[06:28:29] <ology> Heisenbug
[06:28:30] <Jonno_FTW> I'm sending something on a zmq socket, which might be failing in some cases
[06:28:56] <Jonno_FTW> or it might be failing to receive it on the other end
[06:30:23] <Jonno_FTW> guess it's time to pump out the logger lines
[06:31:32] <aquanight> mjgardner: there are a few issues with the fields pragma.
[06:31:45] <aquanight> One is that it only works if the variable being used to access the object has been 'typed'
[06:31:53] <aquanight> and very rarely is this a thing that people do
[06:32:15] <aquanight> e.g. it only works if you do my MyClass $x = MyClass->new(...)
[06:33:01] <aquanight> another issue is that these days people are starting to take the approach of not permitting direct access to object fields, and prefer using accessor methods instead (e.g. that age-old OO "encapsulation" thing)
[06:33:46] <aquanight> mjgardner: in particular, OO frameworks such as Moo/se and Object::Pad encourage this type of object design
[06:35:56] <mjgardner> OK, thanks!
[06:38:57] <mjgardner> aquanight: Though it appears from the SYNOPSIS at https://perldoc.perl.org/fields#SYNOPSIS that it works with untyped objects, it just generates runtime rather than compile-time errors.
[06:38:58] <Paperbot> Link title(s): [ fields - compile-time class fields - Perldoc Browser ]
[06:43:14] <mjgardner> But the encapsulation thing is fair.
[06:43:49] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:43:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:43:49] *** finn_elija is now known as FinnElija
[06:50:47] <Jonno_FTW> I've found my problem, IO::Assync::Handle on_read_ready isn't called even though I'm sending things to the socket
[07:01:28] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[07:03:25] *** Joins: monkey_ (~user@190.104.116.153)
[07:16:53] * GumbyPAN CPAN Upload: Module-Generic-v0.17.1 by JDEGUEST https://metacpan.org/release/JDEGUEST/Module-Generic-v0.17.1
[07:32:58] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[07:42:55] <mst> in case anybody's wondering, Jonno_FTW came over to #io-async and it turns out the answer is probably "yes, becvause ZeroMQ has its own threading model"
[07:43:13] <mst> (so whacking a debugger on things changes the order things happen and lo, satan)
[07:49:27] <aquanight> heisenbugs are fun'
[07:54:10] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[07:55:52] *** Joins: Martchus (~martchus@2a01:c22:6e2c:2a00:d250:99ff:fe49:3cce)
[07:56:46] *** Quits: Martchus_ (~martchus@2a01:c23:bd8b:ea00:d250:99ff:fe49:3cce) (Ping timeout: 245 seconds)
[08:16:59] * GumbyPAN CPAN Upload: Lingua-EN-Inflexion-0.002004 by DCONWAY https://metacpan.org/release/DCONWAY/Lingua-EN-Inflexion-0.002004
[08:20:15] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[08:29:17] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[08:31:44] <zgu> moral of the story: never use anything with threads
[08:32:41] <buZz> lol
[08:34:46] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[08:51:25] <Grinnz> multitasking is the root of all problems
[08:58:54] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[09:00:04] *** Quits: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Ping timeout: 268 seconds)
[09:01:16] *** Joins: castaway (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[09:02:04] * GumbyPAN CPAN Upload: App-timeput-0.075 by TULAMILI https://metacpan.org/release/TULAMILI/App-timeput-0.075
[09:03:46] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 268 seconds)
[09:16:51] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[09:17:02] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Remote host closed the connection)
[09:22:35] *** Quits: ProperN[out] (~sanko@2600:1700:eb30:a2c0::45) (Ping timeout: 264 seconds)
[09:34:36] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:40:46] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 268 seconds)
[09:44:47] *** Quits: fling (~fling@user/fling) (Ping timeout: 264 seconds)
[09:54:58] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:04:09] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:17:30] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[10:20:49] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[10:27:13] * GumbyPAN CPAN Upload: Alien-SWIProlog-0.001 by ZMUGHAL https://metacpan.org/release/ZMUGHAL/Alien-SWIProlog-0.001
[10:28:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[10:28:39] *** Quits: vanfanel64 (~vanfanel6@user/vanfanel64) (*.net *.split)
[10:28:39] *** Quits: k-man (~jason@user/k-man) (*.net *.split)
[10:28:39] *** Quits: samir (~azureuser@20.97.234.198) (*.net *.split)
[10:28:39] *** Quits: phr3ak (~noreply@gnet.hu) (*.net *.split)
[10:28:39] *** Quits: drevil (~igor@pool-173-54-17-110.nwrknj.fios.verizon.net) (*.net *.split)
[10:28:39] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (*.net *.split)
[10:28:39] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[10:28:40] *** Quits: Kassandry (~Kassandry@kassandry.net) (*.net *.split)
[10:28:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[10:28:40] *** Quits: jadesoturi (~jadesotur@user/jadesoturi) (*.net *.split)
[10:28:40] *** Quits: GumbyPAN (cpanbot@jingo.bingosnet.org) (*.net *.split)
[10:28:40] *** Quits: kolcon (~kolcon@v.kolouch.org) (*.net *.split)
[10:28:40] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[10:28:47] *** Joins: Kassandry (~Kassandry@kassandry.net)
[10:28:52] *** Joins: Kobaz (~libera@its.kobaz.net)
[10:28:59] *** Joins: GumbyPAN (cpanbot@jingo.bingosnet.org)
[10:29:07] *** Joins: kolcon (~kolcon@v.kolouch.org)
[10:29:08] *** Joins: phr3ak (~noreply@gnet.hu)
[10:29:08] *** Joins: Exa (exa@irc.moe)
[10:29:09] *** Joins: drevil (~igor@pool-173-54-17-110.nwrknj.fios.verizon.net)
[10:29:15] *** Joins: jadesoturi (~jadesotur@user/jadesoturi)
[10:29:16] *** Joins: samir (~azureuser@20.97.234.198)
[10:29:24] *** Joins: k-man (~jason@debian.organictrader.com.au)
[10:29:30] *** Quits: k-man (~jason@debian.organictrader.com.au) (Changing host)
[10:29:30] *** Joins: k-man (~jason@user/k-man)
[10:29:40] *** Joins: fizzie (irc@selene.zem.fi)
[10:29:41] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[10:29:42] *** Joins: vanfanel64 (~vanfanel6@user/vanfanel64)
[10:29:43] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[10:29:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:34:22] *** Quits: RoyK (~roy@user/royk) (*.net *.split)
[10:34:22] *** Quits: riceandbeans (~zach@user/riceandbeans) (*.net *.split)
[10:34:22] *** Quits: deecat (~deecat@73.99.215.70) (*.net *.split)
[10:34:22] *** Quits: tkr (tkr@pi.ip.fi) (*.net *.split)
[10:34:22] *** Quits: VectorX (~sunilaiya@user/vectorx) (*.net *.split)
[10:34:22] *** Quits: perlmaros (~perlmaros@master.k-1.com) (*.net *.split)
[10:34:23] *** Quits: Altreus (~altreus@2a03:b0c0:1:e0::439:5001) (*.net *.split)
[10:34:23] *** Quits: averell (~averell@user/averell) (*.net *.split)
[10:34:23] *** Quits: eof (~eof@tty3.dev) (*.net *.split)
[10:34:23] *** Quits: ether (~ether@vps-6c71e929.vps.ovh.net) (*.net *.split)
[10:34:23] *** Quits: waitman (znc@irc.y0m4m4.com) (*.net *.split)
[10:34:23] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[10:34:29] *** Joins: ether (~ether@vps-6c71e929.vps.ovh.net)
[10:34:30] *** Joins: perlmaros (~perlmaros@master.k-1.com)
[10:34:30] *** Joins: tkr (tkr@pi.ip.fi)
[10:34:31] *** Joins: summerisle (~eof@tty3.dev)
[10:34:32] *** Joins: waitman (znc@irc.y0m4m4.com)
[10:34:33] *** Quits: ether (~ether@vps-6c71e929.vps.ovh.net) (Changing host)
[10:34:33] *** Joins: ether (~ether@perl/cpan-druid/ether)
[10:34:35] *** Joins: riceandbeans (~zach@dev07.raasta.org)
[10:34:38] *** Joins: averell (~averell@user/averell)
[10:34:41] *** Quits: riceandbeans (~zach@dev07.raasta.org) (Changing host)
[10:34:41] *** Joins: riceandbeans (~zach@user/riceandbeans)
[10:34:44] *** Joins: RoyK (~roy@user/royk)
[10:34:45] *** Joins: deecat (~deecat@73.99.215.70)
[10:34:47] *** Joins: earthbre- (~earthbrea@li778-229.members.linode.com)
[10:34:52] *** Joins: Altreus (~altreus@2a03:b0c0:1:e0::439:5001)
[10:36:05] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[10:37:48] *** Joins: haj1 (~haj@ip5f5beb6e.dynamic.kabel-deutschland.de)
[10:40:14] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:41:11] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:59fe:2950:abe2:2147) (Ping timeout: 264 seconds)
[10:41:13] *** Joins: VectorX (~sunilaiya@user/vectorx)
[10:41:38] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:43:33] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[10:44:30] *** Quits: randir (~randir@95-25-138-85.broadband.corbina.ru) (Remote host closed the connection)
[10:50:42] *** Joins: art1 (~romeyke@p200300ccdf08eb002919657382943f9b.dip0.t-ipconnect.de)
[10:56:54] *** Joins: randir (~randir@93.159.239.42)
[10:59:00] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[11:00:43] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[11:01:41] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[11:06:17] * GumbyPAN CPAN Upload: Netstack-0.020 by CARELINE https://metacpan.org/release/CARELINE/Netstack-0.020
[11:08:39] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[11:10:23] *** Joins: hethw (~heth@46.238.32.56)
[11:18:49] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 268 seconds)
[11:20:31] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:22:01] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[11:35:17] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 250 seconds)
[11:39:18] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[11:39:48] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[11:42:45] *** Joins: tobybl (~tobybl@213.31.134.235)
[11:46:21] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-ZMUGHAL-0.005 by ZMUGHAL https://metacpan.org/release/ZMUGHAL/Dist-Zilla-PluginBundle-Author-ZMUGHAL-0.005
[11:53:38] *** Joins: Pali (~pali@user/pali)
[11:56:08] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 265 seconds)
[11:56:37] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 265 seconds)
[12:00:51] *** Joins: zkrd (~xdg@2a02:587:de00:6d00:9148:819a:adbc:88bb)
[12:00:54] <zkrd> Hello
[12:01:49] <zkrd> I am using WWW::Mechanize and Mojo::DOM to scrap data from the web. On a website I found that when I visit, a javascript will be accessed to fetch some information. When I type the address of that javascript I get access denied
[12:02:03] <zkrd> why is that happening? why is it possible to access it when I visit the main page?
[12:02:33] <dacav> zkrd: could it be a matter of user agent?
[12:02:42] <Botje> or Referer, or cookies.
[12:03:10] <dacav> often I find that some sites reject the lynx browser, but if you set the user-agent to -say- firefox, you can have it served normally
[12:05:56] <zkrd> After checking robots.txt it has User-agent: *
[12:05:57] <zkrd>  Disallow: /fr.*.html
[12:06:13] <zkrd> it is strange because I can access it when I visit the main site
[12:06:53] <dacav> zkrd: but isn't robots.txt meant to be honoured by spiders?
[12:07:06] <dacav> it is not necessarily consistent with the website's policy about user agents
[12:07:42] <dacav> You can do a quick test with Curl, by the way: try curling the page with and without the -A flag
[12:09:35] <zkrd> you mean to replicate the request using curl?
[12:11:36] <Botje> note: you can use your browser's developer tools to get a cURL comandline for free. go to the network tab and right click the request, then "copy as cURL"
[12:11:55] <Botje> that will send the exact same request your browser would send.
[12:12:06] <Botje> you can then start eliminating parts of the commandline until it stops working.
[12:12:11] <buZz> sounds like thats not in every browser?
[12:12:27] <Botje> ... such as?
[12:12:33] <buZz> NCSA Mosaic?
[12:13:10] <buZz> chromium has it :)
[12:13:15] <Botje> *stare*
[12:13:44] <buZz> firefox too :) 
[12:14:03] <buZz> does eh, edge? brave? IE? opera?
[12:14:27] <Botje> three of these are chromium repackaged.
[12:14:33] <Botje> I did not check IE11.
[12:14:56] <buZz> i guess just s/your/most/ ;)
[12:15:55] <dacav> zkrd: yes, I meant that
[12:16:07] * dacav laughs at Mosaic :D
[12:16:14] <dacav> good times
[12:16:55] <Botje> IE11 does not have it.
[12:29:59] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Remote host closed the connection)
[12:31:26] * GumbyPAN CPAN Upload: Net-Async-ZMQ-0.002 by ZMUGHAL https://metacpan.org/release/ZMUGHAL/Net-Async-ZMQ-0.002
[12:31:39] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[12:32:47] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[12:34:16] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 245 seconds)
[12:35:05] *** Quits: hethw (~heth@46.238.32.56) (Ping timeout: 250 seconds)
[12:35:54] <buZz> RIP
[12:36:06] <buZz> dacav: someone made it compile on modern X11 systems, its -so- fast
[12:36:18] <buZz> https://github.com/alandipert/ncsa-mosaic
[12:36:19] <Paperbot> Link title(s): [ GitHub - alandipert/ncsa-mosaic: NCSA Mosaic 2.7 ]
[12:36:49] <dacav> buZz: rly? :) 
[12:36:54] <dacav> I should totally try that 
[12:37:06] <dacav> Probably not very useful on modern shit^Wweb, huh?
[12:37:28] <dacav> …yet, I take pride in avoiding modern web, so it might work :D
[12:37:34] <buZz> well, no js and no https :)
[12:37:37] <buZz> its a different world
[12:37:51] <buZz> someone at our hackerspace is writing a Gopher proxy to mediawiki :D
[12:38:23] <dacav> buZz: I'm a lot into gopher :)
[12:38:41] <dacav> is that a fork of gopherpedia's software?
[12:38:44] <dacav> or is it unrelated?
[12:38:46] <buZz> cool :) i dont think he posted it on a repo yet
[12:38:48] <buZz> unrelated
[12:39:02] <dacav> I'd really like to have more gopher gateways
[12:39:24] <dacav> I'm thinking even of some locally-running daemon that does the translation web->gopher
[12:39:41] <dacav> and supports a handful of services
[12:39:52] <dacav> maybe something [perl<3] extensible...
[12:40:32] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[12:41:36] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[12:46:12] *** Joins: Mandevil (~mandevil@ip-89-102-168-162.net.upcbroadband.cz)
[12:57:40] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:00:28] <buZz> :)
[13:01:30] <ggherdov> Hello, what are the perl REPL behind the eval bots in this channel? (IIRC eval and sweval, although I can't find them in the user list now)
[13:02:40] *** Joins: fling (~fling@user/fling)
[13:02:56] <dacav> I'm new here: eval bots?
[13:03:13] <dacav> If I understand the idea, wouldn't it be somewhat unsecure?
[13:04:13] <buZz> eval: [sort qw/abc zef ąść/]
[13:04:17] <perlbot> buZz: ["abc","zef","\x{105}\x{15b}\x{107}"]
[13:05:08] <dacav> eval: [ system("ls") ]
[13:05:10] <perlbot> dacav: README.md broken.csv cert.pem elib example.html foobar.pm hello.txt jenkinstest.txt key.pem lib married.fwp northwind.sqlite3 perl_code_GFkDm5qXI8 single.fwp stdins template.angular test.cpp x8p9X_NZgm [0]
[13:05:12] <xq> dacav: every command runs in a sandbox which is spawned for that one command and is destroyed afterwards
[13:05:41] <dacav> ...married/single.fwp?
[13:05:41] <xq> and there are restrictions on (I beleive) syscall level as to what is allowed and what is not
[13:08:13] <dacav> eval: [ open my $rdm, "<README.md"; while (<$rdm>) { print } ]
[13:08:14] <perlbot> dacav: ERROR: syntax error at (IRC) line 1, near ""<README.md";" syntax error at (IRC) line 1, near "} ]" 
[13:09:37] <dacav> eval: [ do { open my $rdm, "<README.md" or die; while (<$rdm>) { print } }; ]
[13:09:38] <perlbot> dacav: ERROR: syntax error at (IRC) line 1, near "};" 
[13:09:58] <dacav> mh.. OK. Sorry, I'll stop doing that
[13:10:26] <ggherdov> yeah, those babies. How do I get one running locally my terminal?
[13:10:48] <dacav> ggherdov: what is your favourite editor?
[13:11:10] <ggherdov> dacav: that would be emacs..
[13:11:30] * GumbyPAN CPAN Upload: Tree-RB-XS-0.01 by NERDVANA https://metacpan.org/release/NERDVANA/Tree-RB-XS-0.01
[13:11:38] <dacav> Ah, I see.  If it was ViM I would have told you about my trick, that is more convenient (IMO) than REPL
[13:11:49] <dacav> Most likely Emacs can do it too, anyway, so...
[13:12:08] <ggherdov> yeah I can try vim if it makes this convenient
[13:12:12] <dacav> I'd recommend you to write your code in $EDITOR, and then have it writing to perl (or whatever interpreter, really)
[13:12:24] <dacav> In vim that would be `:w ! perl`
[13:12:32] <ggherdov> I see thanks
[13:12:44] <dacav> There must be something like that in emacs
[13:13:42] <ggherdov> thank, will look for it. Meanwhile I'm running "cpan Reply", as that module is listed in the https://metacpan.org/pod/Task::Kensho . Taking a while to install though
[13:13:43] <Paperbot> Link title(s): [ Task::Kensho - A Glimpse at an Enlightened Perl - metacpan.org ]
[13:19:23] <xq> ggherdov: https://metacpan.org/pod/App::EvalServer
[13:19:24] <Paperbot> Link title(s): [ App::EvalServer - Evaluate arbitrary code in a safe environment - metacpan.org ]
[13:19:36] <xq> perlbot: source
[13:19:36] <perlbot> xq: check out my insides http://github.com/perlbot/perlbuut/ | Perl's source code can be found at https://github.com/Perl/perl5 | If you're after an eval server look at App::EvalServer and App::EvalServerAdvanced on CPAN, also check out nsjail for a more generic sandbox https://github.com/google/nsjail  | Also check out the rest of the perlbot projects at https://github.com/perlbot/
[13:19:58] <dacav> ggherdov: for the record, it is super handy because you can also save the file in flight, if you reach some enlightened code...
[13:20:17] <xq> note: getting unaltered perlbot sources to run is not an easy task
[13:22:03] *** Joins: hethw (~heth@151.251.255.186)
[13:22:50] <ggherdov> dacav: I see. thanks xq for the perlbot info, I'll have a look, if nothing else for educational purpose
[13:23:06] <xq> ggherdov: if you want a repl there are several
[13:23:11] <xq> perlbot: repl
[13:23:11] <perlbot> xq: Read-Eval-Print-Loop - see reply from Reply, re.pl from Devel::REPL, tinyrepl from Eval::WithLexicals, or perlsh from App::perlsh | an anagram of perl!
[13:24:16] <ggherdov> interesting!
[13:33:57] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:34:17] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[13:36:32] * GumbyPAN CPAN Upload: Netstack-0.021 by CARELINE https://metacpan.org/release/CARELINE/Netstack-0.021
[13:41:33] * GumbyPAN CPAN Upload: App-ansicolumn-1.16 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansicolumn-1.16
[13:43:09] *** Joins: hudo (~hhudo_@mail.allm-elektro.de)
[13:43:19] *** Joins: hudo_ (~hhudo_@mail.allm-elektro.de)
[13:52:19] *** Quits: hudo_ (~hhudo_@mail.allm-elektro.de) (Quit: Leaving)
[13:52:19] *** Quits: hudo (~hhudo_@mail.allm-elektro.de) (Quit: Leaving)
[13:53:38] *** Joins: hudo (~hhudo_@mail.allm-elektro.de)
[14:10:00] *** Joins: hethw_ (~heth@82.118.240.146)
[14:12:31] *** Joins: tobybl (~tobybl@213.31.134.235)
[14:12:35] *** Quits: hethw (~heth@151.251.255.186) (Ping timeout: 250 seconds)
[14:14:12] *** Joins: pucara (~i@181.95.204.204)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:32:31] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 250 seconds)
[14:32:41] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:33:37] <Altreus> o/
[14:35:05] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[14:44:11] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[14:53:34] *** Quits: pucara (~i@181.95.204.204) (Quit: Lost terminal)
[14:57:07] *** Quits: xq (~xq@user/xq) (Ping timeout: 268 seconds)
[15:01:34] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[15:05:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[15:06:42] * GumbyPAN CPAN Upload: Config-INI-Tiny-0.104 by ARISTOTLE https://metacpan.org/release/ARISTOTLE/Config-INI-Tiny-0.104
[15:07:21] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:12:32] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 260 seconds)
[15:29:43] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[15:31:22] <Botje> ave!
[15:35:58] <rindolf> "I ave a pen; I ave an apple..."
[15:38:27] <rindolf> https://www.youtube.com/watch?v=Ct6BUPvE2sM
[15:38:27] <Paperbot> YouTube video linked by rindolf: PIKOTARO - PPAP (Pen Pineapple Apple Pen) (Long Version) [Official Video] - published by Ultra Music
[15:39:24] *** Joins: xq (~xq@user/xq)
[15:41:46] *** Quits: tobybl (~tobybl@213.31.134.235) (Remote host closed the connection)
[15:42:55] *** Joins: magla (~gelignite@55d4d56a.access.ecotel.net)
[15:45:45] *** Joins: miojo (~fu@191.253.152.133)
[15:46:37] <Altreus> ar-way!
[15:51:04] *** Joins: proller (~p@2a02:6b8:0:40c:94a:2d18:3aad:1736)
[15:55:15] *** hudo is now known as hudo1
[15:55:17] *** hudo1 is now known as hudo
[15:57:44] *** Joins: kensanata (~user@user/kensanata)
[16:00:05] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[16:01:11] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 265 seconds)
[16:04:48] *** Quits: Michelle (~michelle@203.206.128.220) (Read error: Connection reset by peer)
[16:04:59] *** Joins: Michelle (~michelle@203.206.128.220)
[16:05:48] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:06:04] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:11:05] *** Quits: kolcon (~kolcon@v.kolouch.org) (Quit: WeeChat 3.3)
[16:11:25] *** Joins: kolcon (~kolcon@v.kolouch.org)
[16:11:48] * GumbyPAN CPAN Upload: Acme-Markdown-Embarrassing-2.5 by CONTRA https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-2.5
[16:19:47] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9.1/20210921115122])
[16:20:16] *** Joins: rindolf (~shlomif@87.68.242.74.adsl.012.net.il)
[16:26:50] * GumbyPAN CPAN Upload: Acme-Markdown-Embarrassing-2.6 by CONTRA https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-2.6
[16:31:51] * GumbyPAN CPAN Upload: Acme-Markdown-Embarrassing-2.7 by CONTRA https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-2.7
[16:41:52] * GumbyPAN CPAN Upload: Acme-Markdown-Embarrassing-2.8 by CONTRA https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-2.8
[16:43:30] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:44:00] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Read error: Connection reset by peer)
[16:44:22] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[16:44:46] <aquanight> wtf is that mess
[16:45:32] <LeoNerd> Whatever it is, it needed 4 releases in a row
[16:46:10] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 260 seconds)
[16:47:53] <simcop2387> looks like the author is expecting MetaCPAN to render markdown, This is a toy module to embarrass MetaCPAN Markdown 
[16:48:06] *** Joins: jabberwok (~wlindley@75.105.20.104)
[16:48:49] *** Quits: hethw_ (~heth@82.118.240.146) (Quit: Leaving)
[16:49:31] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 265 seconds)
[16:52:49] *** ranguard__ is now known as ranguard
[16:53:39] *** Joins: tahc (~tahc@c-24-30-27-91.hsd1.ga.comcast.net)
[16:54:26] <ranguard> Hi - are smartmatches good / bad these days? I am code reviewing and realised I haven't put in our Perl policy either way - we are on Perl 5.16.3 and unlikely to upgrade -  links would be good :)
[16:54:33] <tahc> My father has for many years owned two perl books. Learning Perl 2nd edition and Programming Perl 2nd edition, both of them copyrighted 1996/1997. Are they obsolete or still good books to reference while learning the basics of perl?
[16:54:41] <Botje> ranguard: no. run away screaming.
[16:54:49] <ranguard> Botje: reference?
[16:54:53] <Botje> ranguard: me.
[16:54:55] <Botje> perlbot: smartmatch
[16:54:55] <perlbot> Botje: broken because eval: use warnings; my @foo = 0..10; print "this matches" if "0 but true" ~~ @foo; ... too vague for predictable behavior, use the comparison you mean or try Smart::Match for explicit smartmatching | "Any non-trivial example of smartmatch usually does something other than the author intended."
[16:55:06] <Botje> tahc: 25 years out of date? modern perl has moved on.
[16:55:11] <Botje> perlbot: books
[16:55:11] <perlbot> Botje: For Perl books see http://books.perl.org/ and http://perl-begin.org/books/ . Especially see the Modern Perl factoid and perl-tutorial.org
[16:55:30] <ranguard> tahc: they're going to be fine for a lot of the basics - but.. yea what Botje said
[16:55:54] <ranguard> Botje: thanks
[16:56:12] <LeoNerd> ranguard: You might also like Syntax::Keyword::Match
[16:56:15] <tahc> I actually do have a PDF copy of modern perl.
[16:56:31] <LeoNerd> which I'm likely to add to perl core sometime,.. though probably not this year. next year maybe, in time for 5.38
[16:56:43] <ranguard> @LeoNerd cheers - I'd rather they just write simpler code :)
[16:56:53] * GumbyPAN CPAN Upload: Acme-Markdown-Embarrassing-2.9 by CONTRA https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-2.9
[16:56:58] <LeoNerd> match/case is pretty simple. It's nicer to read than a long list of if/elsig
[16:57:01] <LeoNerd> *elsif
[16:57:12] <LeoNerd> You can much more easily see the structure in it
[16:58:18] <tahc> Are there any other books I should get specifically for doing object-oriented concepts in perl? Would modern perl be good enough?
[16:59:02] <LeoNerd> Any book is going to be atleast a few years out of date
[16:59:09] <LeoNerd> As compared all the actual modern useful stuff
[16:59:30] <LeoNerd> (Imean, this is true of basically any book ever about any sort of computing subject, but perhaps moreso here than typical)
[17:01:54] * GumbyPAN CPAN Upload: Math-GMPz-0.52 by SISYPHUS https://metacpan.org/release/SISYPHUS/Math-GMPz-0.52
[17:02:39] <tahc> I absolutely hate CPAN on windows, perl was meant for unix or unix-like operating systems.
[17:04:58] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:05:03] <ranguard> tahc: for OO you want to look at Moo / Moose on CPAN 
[17:05:21] <tahc> For example, I don't even think by default there is a HOME directory setup for windows, programs sometimes put data under APPDATA or sometimes mydocuments. No consistency.
[17:05:55] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[17:06:10] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:06:28] <Altreus> or maybe experiment with ... er ... :|
[17:06:28] <ranguard> tahc: https://metacpan.org/dist/Moose/view/lib/Moose/Manual.pod - and yes personally I'd avoid Windows, at least if not latest - and run a VM in virtual box or a small cloud VM
[17:06:29] <Paperbot> Link title(s): [ Moose::Manual - What is Moose, and how do I use it? - metacpan.org ]
[17:06:30] <Altreus> my brain's gone
[17:06:34] <Altreus> perlbot: oo
[17:06:35] <perlbot> Altreus: See Moose, Moo, Mo, Object::Tiny, Class::Tiny. See also 'objects'
[17:06:46] <Altreus> LeoNerd: what's the core OO thing called?
[17:06:54] * GumbyPAN CPAN Upload: SelectPdf-1.4.0 by SELECTPDF https://metacpan.org/release/SELECTPDF/SelectPdf-1.4.0
[17:07:26] <ranguard> The one Ovid is co-ordinating?
[17:07:30] <Altreus> yeah
[17:07:32] <LeoNerd> Unsure what the question is. Are you asking about classical perl classes, or the new thing Ovid/myself/etc.. are doing?
[17:07:35] <Altreus> c...
[17:07:39] <LeoNerd> The -design work- is called Corinna
[17:07:55] <LeoNerd> That name itself won't appear in the final thing. The core feature will likely be  use feature 'class';
[17:07:56] <Altreus> corinna! oh wait, isn't there a module implementing it for experimental purposes?
[17:08:02] <LeoNerd> There's my Object::Pad yes
[17:08:08] <haarg> perl on windows is always really painful
[17:08:11] <LeoNerd> Which isn't exactly the same.. similar direction
[17:08:21] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[17:09:03] <tahc> If I'm ever on windows, msys2 usually has packages for perl modules so I don't have to use CPAN unless last resort.
[17:09:29] <Altreus> WSL runs debian well enough that perl on windows is not actually on windows
[17:09:37] *** Joins: fkdnd (~fkdnd@178.49.152.151)
[17:10:03] <fkdnd> how can I debug a crashing perl executable?
[17:10:41] <LeoNerd> gdb ?
[17:10:58] <tahc> If you're on linux, valgrind is pretty good to help debug.
[17:11:13] <haarg> and it depends on what you mean by crashing
[17:11:18] <Ovid> LeoNerd's Object::Pad has been awesome for working out issues with Corinna design and I know companies are already using it in production. I'm using it to generate the Corinna RFC. https://github.com/Ovid/Cor/tree/master/lib
[17:11:19] <Paperbot> Link title(s): [ Cor/lib at master · Ovid/Cor · GitHub ]
[17:11:21] <LeoNerd> -sometimes- for specific problems, but usually not great for a first attempt
[17:13:03] <ilmari> fkdnd: by "crashing perl executable", do you mean that perl itself is crashing with a segfault or "panic" message, or a perl program is exiting due to an uncaught perl-level exception?
[17:13:42] *** Quits: proller (~p@2a02:6b8:0:40c:94a:2d18:3aad:1736) (Remote host closed the connection)
[17:14:48] *** Joins: proller (~p@2a02:6b8:0:40c:7c4:4db1:a09b:f462)
[17:16:06] <fkdnd> yes, the interpreter addresses invalid memory and is terminated
[17:17:03] *** Quits: magla (~gelignite@55d4d56a.access.ecotel.net) (Quit: Stay safe!)
[17:19:03] <Botje> then yes, gdb. best to install the appropriate -dbg package first so you get meaningful output.
[17:19:45] <fkdnd> probably the crash happens inside foreach statement for the built-in string i/o object
[17:20:47] *** Joins: tobybl (~tobybl@213.31.134.235)
[17:24:13] *** Quits: tahc (~tahc@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Client closed)
[17:25:17] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 265 seconds)
[17:25:50] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[17:27:56] *** Joins: fkdnd3 (~fkdnd@178.49.152.151)
[17:28:30] <fkdnd3> the crash happens if I open a string longer than 1118879 characters
[17:28:48] *** Quits: fkdnd (~fkdnd@178.49.152.151) (Ping timeout: 256 seconds)
[17:28:53] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:29:31] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:30:30] <ilmari> what do you mean by "the built-in string i/o object?" open on a scalar reference?
[17:30:38] <fkdnd3> yes
[17:30:46] <ilmari> fkdnd3: please show actual code and error message
[17:32:04] <fkdnd3> https://l.perl.bot/p/qf59hr
[17:32:04] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[17:32:18] *** Joins: tobybl_ (~tobybl@213.31.134.235)
[17:32:57] <ilmari> you are copying all the lines into an arraay, then iterating over that
[17:33:13] <ilmari> use `while (<$z>)` instead of `foreach`
[17:33:38] <ilmari> what is the error you are getting?
[17:34:05] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 250 seconds)
[17:34:58] <fkdnd3> just an invalid access error from the os
[17:35:26] *** Quits: tobybl (~tobybl@213.31.134.235) (Ping timeout: 265 seconds)
[17:36:22] <fkdnd3> it doesn't crash with while
[17:40:16] *** Quits: proller (~p@2a02:6b8:0:40c:7c4:4db1:a09b:f462) (Ping timeout: 265 seconds)
[17:45:01] <ilmari> that sounds like it didn't manage to allocate memory for the extra copies for the array when using foreach
[17:49:12] <fkdnd3> perl seems a dangerous tool if it crashes on converting a megabyte of text into 12k array items
[17:50:10] <ilmari> which OS? what is the exact error message?
[17:52:26] <ilmari> it doesn't crash here, even with an order of magintude more lines. how much memory do you have (or are you giving to the perl process)?
[17:52:42] *** Joins: proller (~p@2a02:6b8:0:40c:9b16:3a15:48a7:1984)
[17:53:06] <ilmari> also, which perl version?
[17:54:03] <fkdnd3> windows, there is no error message, the debugger opens; version is probably 5.8.3
[17:54:56] <LeoNerd> Wow.. I'll have to open perlhist to even remember how many decades old /that/ version is
[17:55:25] <LeoNerd> 5.8.3, January 2004
[17:55:32] <LeoNerd> So not quite two decades yet
[17:55:39] <ehuelsmann[m]> Lol
[17:56:49] <ilmari> fkdnd3: where did you get such an _ancient_ version from
[17:56:50] <ilmari> ?
[17:56:59] * GumbyPAN CPAN Upload: App-sdview-0.05 by PEVANS https://metacpan.org/release/PEVANS/App-sdview-0.05
[17:57:09] <LeoNerd> ^-- now with Markdown tables
[17:57:44] <ilmari> perlbot: windows?
[17:57:44] <perlbot> ilmari: Windows is a 32 bit patch to a 16 bit GUI based on a 8 bit operating system, written for a 4 bit processor by a 2 bit company which can not stand 1 bit of competition | the only thing the authors of all major Perl event loops agree about
[17:57:56] <ilmari> perlbot: win32?
[17:57:56] <perlbot> ilmari: Windows is a 32 bit patch to a 16 bit GUI based on a 8 bit operating system, written for a 4 bit processor by a 2 bit company which can not stand 1 bit of competition
[17:58:02] <ilmari> perlbot: strawberry?
[17:58:02] <perlbot> ilmari: http://strawberryperl.com/ the best version of perl for the Microsoft Windows operating system | A mirror hosted by simcop2387 is also available at https://strawberry.perl.bot/
[17:58:17] <ilmari> fkdnd3: get a more recent perl from there ^^
[17:58:48] <ilmari> simcop2387: strawberry.perl.bot just gives an nginx welcome page
[17:59:13] <fkdnd3> ...it's 147 mb
[17:59:28] <ilmari> it includes a bunch of pre-built modules
[17:59:37] <simcop2387> ilmari: yes, it's been down due to a series of moves and financial issues.  it'll be back "soon"
[17:59:42] <zgu> 147 millibars? that's a pretty hard vacuum
[17:59:47] <zgu> also comes with a whole toolchain
[18:00:01] <revhippie> zgu: can't be _too_ hard a vacuum if it has a whole toolchain in it.
[18:02:36] <zgu> ok i guess that doesn't even count as a "medium vacuum"
[18:02:59] *** Quits: miojo (~fu@191.253.152.133) (Ping timeout: 265 seconds)
[18:04:07] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Ping timeout: 265 seconds)
[18:04:35] <ilmari> it's only 1/7th of standard atmospheric pressure
[18:04:51] *** Joins: zhmylove (~zhmylove@178.67.199.125)
[18:05:02] <Botje> yes, but how much of american atmospheric pressure?
[18:05:26] <LeoNerd> That's like standard pressure but 8 hours behind, right?
[18:06:04] <zgu> no only 5. (assuming east coast)
[18:07:00] * GumbyPAN CPAN Upload: Tree-RB-XS-0.02 by NERDVANA https://metacpan.org/release/NERDVANA/Tree-RB-XS-0.02
[18:09:16] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 245 seconds)
[18:10:43] <Altreus> but silicon valley is the centre of the world!
[18:10:57] <zgu> LeoNerd: anything i'm doing here look particularly egregious? https://github.com/kc2zgu/perl-gpiod/tree/main/Device-Chip-Adapter-Gpiod/lib/Device/Chip/Adapter
[18:10:58] <Paperbot> Link title(s): [ perl-gpiod/Device-Chip-Adapter-Gpiod/lib/Device/Chip/Adapter at main · kc2zgu/perl-gpiod · GitHub ]
[18:11:10] <zgu> (aside from being too lazy to make an actual typemap file)
[18:11:43] <zgu> also standard american pressure has to be in inches of mercury, because we love our inches
[18:11:50] <zgu> and our mercury apparently
[18:12:00] * GumbyPAN CPAN Upload: Archive-Ar-Libarchive-2.09 by PLICEASE https://metacpan.org/release/PLICEASE/Archive-Ar-Libarchive-2.09
[18:12:30] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 260 seconds)
[18:12:51] <ilmari> zgu: you should use Newx() and Safefree(), not malloc()/free()
[18:13:39] <ilmari> zgu: also, SvUV is for unsigned integers, SvNV is float/double
[18:13:48] <zgu> ah didn't know about those
[18:14:29] <ilmari> zgu: https://perldoc.perl.org/perlclib is handy
[18:14:30] <Paperbot> Link title(s): [ perlclib - Internal replacements for standard C library functions - Perldoc Browser ]
[18:14:32] <Altreus> we still use mmHg!
[18:15:11] <ilmari> Altreus: who we? hPa or bust
[18:16:19] <Altreus> what's an hPa? some sort of pascal I presume
[18:16:24] <Altreus> hectopascal?
[18:16:29] <Altreus> heptopascal? :D
[18:16:32] <ilmari> aka millibar
[18:16:45] <Altreus> ah, the millibar kid is strong and tough
[18:17:32] * ilmari was vaguely aware of mmHg growing up, but only because the analogue barometer in the living room had both that and mbar
[18:20:00] <zgu> and occasionally inches of water, usually for differential pressure/low vacuum stuff
[18:20:49] <zgu> the radon fan in my basement has a nominal suction of '.75" WC'
[18:26:22] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[18:31:32] <Altreus> I've only seen mmHg in terms of blood pressure
[18:31:54] <Altreus> ¾ inch water closet
[18:33:04] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:39:06] *** Quits: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net) (Remote host closed the connection)
[18:41:48] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[18:42:31] *** Joins: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net)
[18:45:39] *** Joins: randir (~randir@95-25-138-85.broadband.corbina.ru)
[18:48:11] <zgu> yeah, one of the things about american scientific illiteracy is we can't use the same unit everywhere even if we're talking about the same dimension
[18:49:17] <zgu> pressure is mmHg for blood, bar or inHg for weather, psi for compressed air. energy is calories for food, kWh for electricity, and BUTs for a few other assorted uses
[18:51:07] <Altreus> heh, it would be entertaining if nutritional information had kWh
[18:51:30] <Altreus> How long will my laptop last on this burger?
[18:53:45] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:53:50] *** Joins: gast0n (~g4570n@user/gast0n)
[18:58:36] *** Quits: tobybl_ (~tobybl@213.31.134.235) (Remote host closed the connection)
[18:59:01] *** Quits: zhmylove (~zhmylove@178.67.199.125) (Read error: Connection reset by peer)
[19:03:10] *** Joins: ratagin (~ratagin@208.96.144.68)
[19:05:25] <ratagin> 208.96.144.68
[19:05:37] <ratagin> oops - wrong window
[19:06:00] <simcop2387> perlbot: hack it
[19:06:01] <perlbot> simcop2387: No factoid found. Did you mean one of these: [hack] [how good] [hacker] [fuck it] [suck it] [hash] [hashes] [haxxor] [haskell] [.hk]
[19:07:15] <ilmari> Altreus: it does have kJ as well as kcal
[19:07:23] <ilmari> (in europe)
[19:07:48] *** Joins: ProperN[out] (~sanko@2600:1700:eb30:a2c0::45)
[19:09:17] <zgu> perlbot: hash house
[19:09:17] <perlbot> zgu: No factoid found. Did you mean one of these: [hashes] [haghagha] [house] [hash] [hashsort] [haskell] [hack] [honk] [hangs] [hobbs]
[19:11:17] <Botje> Altreus: that entirely depends on the process you use to convert the burger to energy
[19:13:05] <ilmari> for maximum efficiency, combine with an antiburger
[19:13:51] <zgu> so if you stack an impossible whopper and a regular beef patty in the same bun they annihilate each other?
[19:17:00] <simcop2387> ilmari: actually throwing it into a black hole has greater efficiency because of thermal effeciency limits
[19:17:07] * GumbyPAN CPAN Upload: Alien-libpcre-0.02 by PLICEASE https://metacpan.org/release/PLICEASE/Alien-libpcre-0.02
[19:17:28] *** Joins: magla (~gelignite@55d4d56a.access.ecotel.net)
[19:18:15] <ilmari> simcop2387: a bit harder to harness the energy, though
[19:18:23] <ilmari> not that getting a burger's worth of antimatter is trivial …
[19:18:48] <simcop2387> ilmari: gamma rays are even worse to harvest, https://www.youtube.com/watch?v=t-O-Qdh7VvQ
[19:18:48] <Paperbot> YouTube video linked by simcop2387: The Unreasonable Efficiency of Black Holes - published by minutephysics
[19:19:18] <Grinnz> ilmari: do i have any options for muting the matrix bridge from the discord side, since i can't ban people from matrix?
[19:19:34] <buZz> /ignore
[19:19:48] <Grinnz> for moderation, not myself, and also i'm not talking about irc
[19:20:06] <ilmari> simcop2387: yay, cats _and_ norway :)
[19:20:48] <ilmari> Grinnz: not other than becoming a mod/admin on the matrix side
[19:21:08] <ilmari> is it a problem in the perl room?
[19:21:21] <ilmari> deleting messages on the discord side does delete them from matrix too
[19:21:23] <Grinnz> it almost was
[19:21:28] <simcop2387> LeoNerd: might be able to help
[19:21:44] <Grinnz> well thats helpful at least
[19:22:00] * ilmari_ uploaded an image: (8KiB) < https://libera.ems.host/_matrix/media/r0/download/ilmari.org/VMhMiWdwqmbsHTpEqREeMxcu/Screenshot%20from%202021-11-15%2015-51-27.png >
[19:22:08] * GumbyPAN CPAN Upload: PPIx-Regexp-0.081_01 by WYANT https://metacpan.org/release/WYANT/PPIx-Regexp-0.081_01
[19:22:08] <simcop2387> oh you guys migrated it
[19:22:36] <simcop2387> i havent paid attention
[19:22:37] <Grinnz> i suppose ill have to figure out matrix at some point
[19:22:41] <genio> I haven't looked into discord in so long
[19:23:11] <simcop2387> i'll figure out perlbot for it
[19:23:16] <genio> I got an icky feeling and haven't looked again
[19:25:05] <Grinnz> also it turns out message deletions aren't logged, so that's not a great moderation solution to begin with
[19:27:39] <Altreus> Botje: do all humans convert burgers the exact same way?
[19:27:49] <Altreus> how do they even determine how many calories are in food?
[19:28:08] <Botje> Altreus: they burn it and see how much it boiled a container of water sitting above
[19:28:17] <Botje> as 1 kcal = heating 1 liter of water 1 degree
[19:28:22] <buZz> sorta yeah 
[19:28:27] <buZz> its a bit more precise
[19:28:28] <Botje> CELSIUS YOU HEATHENS
[19:28:51] <Altreus> is that remotely a useful analogue for human metabolism?
[19:29:13] <buZz> Altreus: you are X % water, arent you?
[19:29:20] <Altreus> sometimes
[19:29:24] <buZz> so you constantly heat those liters of water
[19:29:29] <buZz> aka burn energy
[19:29:56] *** Joins: zhmylove (~zhmylove@178.67.199.125)
[19:32:47] <Altreus> yeah but not like with fire
[19:33:05] <buZz> actually, chemically its not very different
[19:33:37] <Altreus> so the answer is yes
[19:34:09] <Altreus> it is remotely useful :)
[19:35:36] *** Joins: rgrinberg (~textual@152.231.136.22)
[19:37:14] *** Quits: proller (~p@2a02:6b8:0:40c:9b16:3a15:48a7:1984) (Ping timeout: 265 seconds)
[19:39:45] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Rebooting…)
[19:45:12] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:59fe:2950:abe2:2147)
[19:46:43] *** TitanOfOld is now known as TitanOfOld|work
[19:57:11] * GumbyPAN CPAN Upload: PPIx-QuoteLike-0.019 by WYANT https://metacpan.org/release/WYANT/PPIx-QuoteLike-0.019
[19:59:07] <ggherdov> Hello, I'm trying to unload a module in an eval bloc, where I use a string variable for the module name, but I get an error. Perlbot agrees (below). Any advice?
[19:59:14] <ggherdov> eval: use DateTime; my $m = "DateTime"; eval { no $m; };
[19:59:15] <perlbot> ggherdov: ERROR: syntax error at (IRC) line 1, near "no $m" 
[20:00:08] <ilmari> Step back. Explain what you're trying to achieve.
[20:00:09] *** Quits: zhmylove (~zhmylove@178.67.199.125) (Read error: Connection reset by peer)
[20:00:37] <haarg> no can only be used with barewords, and it happens at compile time, so it won't be trapped by an eval
[20:00:49] <ilmari> why do you want to unload the module?
[20:00:57] <Altreus> eval: no DateTime;
[20:00:59] <perlbot> Altreus: No output.
[20:01:02] *** Joins: zhmylove (~zhmylove@178.67.199.125)
[20:01:04] <Altreus> welp
[20:01:05] <haarg> and no does not unload a module
[20:01:09] <haarg> it loads a module
[20:01:14] <ilmari> "no" just calls ->unimport, so if that's what you mean, do $m->unimport
[20:01:25] <Altreus> eval: DateTime->unimport
[20:01:26] <perlbot> Altreus: No output.
[20:01:30] <ilmari> (possibly in a BEGIN block, if it has compile time effects)
[20:01:54] <ilmari> ggherdov: which module are you trying to "unload", and why?
[20:02:02] <Altreus> do modules implement bare unimport by default? Implicitly?
[20:02:17] <Altreus> hm maybe Exporter and friends make one
[20:02:29] <ggherdov> ilmari: I could avoid unloading maybe. In any case, I'm loading all modules in a directory (listing the files with glob()), get their ISA from the symbol table, then build the class hierarchy for generating documentation. Seemed cool to unload each module after getting its ISA, since I have hundreds of those
[20:03:43] <ilmari> is the total memory consumption of the script a problem?
[20:03:52] <haarg> unimport works like import - if the method does not exist, it silently does nothing instead
[20:04:00] <Altreus> I don't think unloading it will uncompile it and free the memory
[20:04:01] <ggherdov> ilmari: not at all, in fact. I could just leave them there
[20:04:16] <haarg> unloading modules in perl is generally not supported
[20:04:17] <ilmari> in tht case don't bother
[20:04:18] <ggherdov> alright guys thanks, I'll leave them around
[20:04:36] <Altreus> normally your bother is conflicts in the symbol tables
[20:04:43] <ggherdov> I see
[20:05:04] <Altreus> So if you require them rather than useing them then import won't be run and you won't get symbols
[20:05:05] <haarg> if you did need to care about the memory usage of loading too many modules, forking would be a better strategy
[20:05:39] <ggherdov> yeah
[20:05:40] <Altreus> eval: use List::Util qw(any); use Test::Deep qw(any)
[20:05:42] <perlbot> Altreus: Prototype mismatch: sub main::any (&@) vs none at (IRC) line 1. 
[20:05:58] <Altreus> eval: do{ use List::Util qw(any)}; do{ use Test::Deep qw(any) };
[20:06:00] <perlbot> Altreus: Prototype mismatch: sub main::any (&@) vs none at (IRC) line 1. 
[20:06:07] <Altreus> do isn't a new scope eh
[20:06:11] <Altreus> at least not for use
[20:06:19] <ilmari> imports are package-scoped, not lexical
[20:06:30] <Altreus> is that why we use the word pragma for, well, pragmas?
[20:06:52] <Altreus> eval: require List::Util qw(any); require Test::Deep qw(any);
[20:06:52] <Grinnz> ggherdov: doesn't sound like import is necessary for what you're doing, so you can at least switch to runtime require instead
[20:06:54] <perlbot> Altreus: ERROR: syntax error at (IRC) line 1, near "require List::Util qw(any)" syntax error at (IRC) line 1, near "require Test::Deep qw(any)" 
[20:07:03] <Altreus> oh yeah, you can't do it that way :D oops
[20:07:05] <Grinnz> ggherdov: or "use Foo::Bar ();" to skip importing at compile time
[20:07:23] <ilmari> Altreus: https://metacpan.org/pod/Lexical::Import
[20:07:24] <Paperbot> Link title(s): [ Lexical::Import - clean imports from package-exporting modules - metacpan.org ]
[20:07:40] <ilmari> or https://metacpan.org/pod/lexically
[20:07:40] <Paperbot> Link title(s): [ lexically - lexically import functions from non-lexical exporters - metacpan.org ]
[20:08:52] <Grinnz> Altreus: we use the word pragma for modules which are lowercase and have a lexical effect, or sometimes when they have a non-lexical effect, or sometimes when the moon is waxing gibbous or solar radiation hits
[20:09:49] <ggherdov> Grinnz: uhm. re: runtime require instead of import. I'm doing this in a loop: eval { require $module ; $module->import() }. You say I can skip invoking import() for each module? "require" alone gives me the symbol table? Interesting
[20:11:06] <ggherdov> yeah, apparently it works even if I omit $module->import(), nice
[20:12:29] <Grinnz> right
[20:12:53] <Grinnz> all import does is call the module's import method if it has one, which is usually either explicitly defined or borrowed from Exporter
[20:12:59] <Grinnz> and you don't need their exports or effects
[20:14:02] <ggherdov> I see
[20:14:34] *** Joins: proller (~p@2a02:6b8:0:40c:7d38:5495:f4b4:c9dc)
[20:18:09] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[20:18:46] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 256 seconds)
[20:19:07] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[20:27:14] * GumbyPAN CPAN Upload: URI-Router-0.1.1 by SYBER https://metacpan.org/release/SYBER/URI-Router-0.1.1
[20:27:14] * GumbyPAN CPAN Upload: XS-libpanda-1.5.6 by SYBER https://metacpan.org/release/SYBER/XS-libpanda-1.5.6
[20:27:16] * GumbyPAN CPAN Upload: XS-libpanda-backtrace-1.0.1 by SYBER https://metacpan.org/release/SYBER/XS-libpanda-backtrace-1.0.1
[20:27:57] <xq> what is the preferred way to manage access to a git repository nowadays?
[20:28:08] <simcop2387> ssh
[20:28:13] <xq> in a situation with multiple users and multiple repos
[20:28:39] <simcop2387> for hosting/management i like gitea for simple setups.  gogs is good too
[20:28:48] <xq> simcop2387: but with ssh, how do you specify "user foo has access to repo A but not to repo B" ?
[20:29:52] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[20:30:02] <xq> unix group membership seems like one solution
[20:30:22] <simcop2387> xq: that was a flippant response to your vague question.  ssh for authentication, and gitea/gogs for authorization 
[20:30:36] <simcop2387> thats my current prefered setup
[20:31:01] <simcop2387> unix groups can work but it's annoying to manage
[20:31:29] <simcop2387> esp since then everyone needs a unix account to manage and ssh keys etc
[20:31:53] <xq> I know about gitea, but I'm not sure how I feel about 1700 open issues on https://github.com/go-gitea/gitea/issues
[20:31:54] <Paperbot> Link title(s): [ Issues · go-gitea/gitea · GitHub ]
[20:33:33] <simcop2387> xq: lots of those are feature requests too.  it's very actively developed and i could give you access to mine to play with if you wanted
[20:35:45] <Altreus> we're using it at $other_ork
[20:36:01] <Altreus> I don't have access though because of reasons, but it's probably quite decent
[20:38:06] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[20:38:36] <GeekRuthie> I'm using gitea for some personal things, and haven't had a moment's trouble with it.
[20:38:47] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[20:42:16] * GumbyPAN CPAN Upload: Acme-MarkdownTest-0.02 by NEILB https://metacpan.org/release/NEILB/Acme-MarkdownTest-0.02
[20:45:33] *** Joins: e1f (~user@141.117.1.142)
[20:46:42] <mst> xq: that's mostly evidence of being popular enough that lots of people ask for lots of features and then don't send patches
[20:47:25] <mst> xq: we've been using it at SC for some time now and it's been solid
[20:48:01] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:48:01] <simcop2387> mst: and the same bug reported 30 different ways
[20:48:27] <simcop2387> the 2fa, and ldap support make it nice for a few setups i do
[20:51:16] <Harzilein> i like gitolite and i once had aspirations to improve on the repo.or.cz cgis...
[20:51:40] <simcop2387> i'd love a container/release storage bit with it too, but thats not a need.
[20:51:48] <mst> I think these days if I wanted to host something that fit my grumpy minimalist aesthetic I'd look at the sourcehut codebase
[20:51:57] <Harzilein> yeah
[20:52:03] <simcop2387> Harzilein: i went gitolite to gitea.  so much nicer to manage
[20:52:12] <Harzilein> that seems to fit the bill for "grumpy minimalist aesthetic" fine :D
[20:52:46] <simcop2387> i'd call it militantly minimalistic, definitely a place for it though
[20:53:39] <simcop2387> i also love giteas autovivification of repo support
[20:54:21] <mst> simcop2387: militantly minimalist is just what happens when a grumpy minimalist gets tipped from grumpy into angry, obviously :P
[20:54:56] <simcop2387> they're private by default and i can just go: git remote add origin git@gitea.simcop2387.info:simcop2387/<name>.git and push as long as i've setup a key before
[20:55:52] <mst> 'git push -u origin main' is -really- nice
[20:56:37] <mst> easily setting the upstream for the branch has finally got me out of my habit of setting up my remote by opening .git/config and pasting something in from elsewhere to regexp :)
[20:57:31] <simcop2387> on a slightly related note, etckeeper is fucking magic.  put your etc into a vcs (supports many) and integrates with a lot of package managers to do automatuc commits/
[20:58:29] <zgu> eval: sort {($a=~/(\d+)/) <=> ($b=~/(\d+)/)} qw(test1 test15 test3)
[20:58:30] <perlbot> zgu: No output.
[20:58:40] <zgu> eval: [sort {($a=~/(\d+)/) <=> ($b=~/(\d+)/)} qw(test1 test15 test3)]
[20:58:42] <perlbot> zgu: ["test1","test15","test3"]
[21:00:01] <zgu> eval: [sort {$a=~/(\d+)/); $ak=$1; $b=~/(\d+)/; $bk=1; $ak <=> $bk} qw(test1 test15 test3)]
[21:00:01] *** Quits: rindolf (~shlomif@87.68.242.74.adsl.012.net.il) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:00:03] <perlbot> zgu: ERROR: syntax error at (IRC) line 1, near "/(\d+)/)" 
[21:00:13] <zgu> eval: [sort {$a=~/(\d+)/; $ak=$1; $b=~/(\d+)/; $bk=1; $ak <=> $bk} qw(test1 test15 test3)]
[21:00:14] <perlbot> zgu: ["test1","test15","test3"]
[21:00:30] <zgu> eval: [sort {$a=~/(\d+)/; $ak=$1; $b=~/(\d+)/; $bk=$1; $ak <=> $bk} qw(test1 test15 test3)]
[21:00:32] <perlbot> zgu: ["test1","test3","test15"]
[21:00:55] <zgu> seems like there should be a shorter way to do that
[21:02:33] <zgu> oh i guess i could do ($ak)=$a=~/.../
[21:03:05] <leitz> Does XML::LibXML convert things like "&amp;" to "&"?
[21:03:50] <mst> leitz: it's a DOM implementation
[21:04:06] <mst> leitz: so things like text accessors will return the unescaped text
[21:04:40] <zgu> HTML::Entities?
[21:04:52] <leitz> mst, does that translate to "yes"? I'm not DOM-savvy.
[21:04:55] <mst> it's hard to know why leitz is asking this question so far
[21:05:12] <mst> leitz: it translates to what I just said. there was a second sentence.
[21:05:43] <mst> also if your current situation is "I am using a library without having read any of the relevant documentation" you might consider that it would be helpful to change that :)
[21:05:44] <Altreus> does git assume I meant -u 90% of the time yet?
[21:06:23] <leitz> I have an XML document that has "&amp;" in it, and the strings get changed to plain "&". So far the only library that is accessing it is XML::LibXML.
[21:06:34] <Altreus> if a branch has no upstream and the remote doesn't have the branch, -u seems like a sensible default
[21:06:40] <zgu> YOU HAVE NOT SET UP A REMOTE TRACKING BRANCH TO SURVIVE MAKE YOUR TIME
[21:06:41] <mst> leitz: what
[21:06:50] <mst> leitz: what do you mean 'get changed'
[21:07:24] <mst> leitz: dude, you've forgotten 90% of the context for this currently exists in your head but not anywhere we can see it, *please* stop flailing and start from the top, I know you know the drill :)
[21:08:23] <Altreus> If a mature XML library like that doesn't decode going into perl and encode going out of it then what are we even doing with computers
[21:08:29] <xq> zgu: there is a library for that I think
[21:09:54] <xq> I *think* it's this one https://metacpan.org/pod/Sort::Key::Natural
[21:09:54] <Paperbot> Link title(s): [ Sort::Key::Natural - fast natural sorting - metacpan.org ]
[21:10:03] <xq> but there may be a newer shinier one
[21:10:11] * leitz takes a deep breath.
[21:12:30] <Harzilein> probably an xml library outputting a dom fragment consisting of only a text node as an xml fragment would work for purposes of restoring the entities (if it can be guided to not convert it to a numerical entity, possibly)
[21:12:40] <Harzilein> ?
[21:12:49] <zgu> or i could do 2/3 of a schwarzian transform since i want just the numeric suffixes in the end
[21:13:01] <leitz> We have XML files generated elsewhere, and parse them via XML::LibXML->load_xml() and XML::LibXML::XPathContext->new(). The output is plain text. The source XML document has strings with "this &amp; that", and the output document has "&". Since the output document gets taken into another XML process, the "&" seems to cause a problem.
[21:13:27] <Harzilein> (mutatis mutandis for an attribute value)
[21:14:15] <leitz> I've been printing the problem string and trying to find the source of the change.
[21:14:28] <zgu> to make it fit in with the rest of the internet run it through s/&/&amp;/ so the user sees &amp;amp;
[21:14:44] <Harzilein> zgu++
[21:15:42] *** Joins: tobybl (~tobybl@213.31.134.235)
[21:15:52] <mst> leitz: still vague.
[21:16:10] <mst> leitz: 'the output document' <- you gave us zero information on how that's produced
[21:16:36] <mst> well, apparent from an implied 'buggily' ;)
[21:17:31] <ether> sounds like your problem is "the output document gets taken into another XML process, the "&" seems to cause a problem" -- your XML ingester should not be treating decoded strings as if they are encoded XML entities.
[21:17:48] <mst> right, it sounds like *this script* thinks its output should be plain text
[21:17:52] <Kobaz> mst: poke
[21:17:52] <ether> so, at each stage in your process, check that you are emitting data in the correct encoded/decoded format, then move on to the next stage
[21:17:56] <mst> but *that script* thinks its input should be XML
[21:18:15] <Kobaz> mst: it's been two (calendar) weeks
[21:18:32] <Kobaz> mst: it'll be offically two weeks on wednesday... but this is the second week
[21:18:35] <mst> leitz: basically you have to decide which of the two programs is wrong, and rewrite the one that's wrong.
[21:18:44] *** Quits: proller (~p@2a02:6b8:0:40c:7d38:5495:f4b4:c9dc) (Ping timeout: 265 seconds)
[21:18:47] <Kobaz> can i hijack, pls tks
[21:19:13] <zgu> ether: that takes effort. next you'll tell me i can't just add feet and kilometers together
[21:20:11] *** Quits: tobybl (~tobybl@213.31.134.235) (Ping timeout: 265 seconds)
[21:20:38] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[21:21:57] <Altreus> zgu: sounds like a List::UtilsBy::sort_by to me
[21:22:17] <Altreus> sort_by { /(\d+)/ }
[21:22:21] <leitz> I'm walking up through the process. So far, load_xml() does not change anything. 
[21:23:06] <Altreus> > Since the output document gets taken into another XML process -- this means the output is not actually plain text
[21:23:20] <Altreus> it's XML-encoded text!
[21:23:52] <leitz> Altreus, it is plain text that gets taken into various formats.
[21:24:09] <Altreus> oh
[21:24:17] <LeoNerd> If you are intending the output to be plain text, then whatever next consumes it should reëscape things
[21:24:19] <Altreus> then those things need to encode it appropriately :)
[21:24:26] <zgu> Altreus: i'm gonna leave my hacky version for now since i don't feel like pulling in an extra module but that's good to know
[21:24:29] <LeoNerd> If you are intending the output to be XML then you will have to escape it yourself
[21:24:32] <LeoNerd> This isn't a hard choice
[21:25:05] <Altreus> it would certainly not make sense to put &amp; on the output of the script and then wonder why the other scripts are showing &amp;
[21:25:55] *** Parts: art1 (~romeyke@p200300ccdf08eb002919657382943f9b.dip0.t-ipconnect.de) ()
[21:27:33] <zgu> ok, write_gpios() is working to turn an LED on and off now. and it can set multiple pins simultaneously in the same call
[21:28:46] *** Quits: rgrinberg (~textual@152.231.136.22) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:29:34] <mst> leitz: either you need to make it XML-encoded text for the other process
[21:29:37] *** Joins: mattil (~mattil@87-92-104-118.bb.dnainternet.fi)
[21:29:48] <mst> leitz: or you need to modify the other process to actually understand it's plain text, not XML-encoded text
[21:29:53] <mst> leitz: as I say, those are your choices
[21:30:15] <leitz> So far, between two registerNS statements ('dc', 'http://purl.org/dc/elements/1.1/', 'xc', 'http://checklists.nist.gov/xccdf/1.1') and one XPathContex->findvalue for the key, the change happens.
[21:30:17] <Paperbot> Link title(s): [ DCMI: DCMI Metadata Terms <http://www.dublincore.org/specifications/dublin-core/dcmi-terms/> ]
[21:30:23] <mst> leitz: none of this is relevant
[21:31:09] <mst> leitz: if you're sure it's plain text, it's the 'another XML process' that's buggy
[21:31:19] <mst> leitz: so fix that one
[21:34:12] *** Quits: mattil (~mattil@87-92-104-118.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[21:34:36] <Grinnz> html escaping is just another encoding - you need to know when it's encoded, and you need to encode it only for things that expect it to be encoded
[21:35:38] <leitz> So the expected behavior for LibXML is to do those "htmlentities" type transformations?
[21:35:57] <Grinnz> the expected behavior is that when you read text from an xml element, you will get text, not XML
[21:36:43] <Grinnz> example: an XML document `<foo>&amp;</foo>` contains a single tag which contains the encoded text `&`
[21:36:53] <Grinnz> what you do with that after you read it is up to you
[21:38:09] <Grinnz> it is exactly equivalent to reading a UTF-8 encoded text file and getting a snowman character instead of 3 bytes
[21:38:22] <ilmari> leitz: that's how XML is specified
[21:38:39] <ilmari> <foo>&</foo> is not XML
[21:38:50] <Grinnz> if you want to output that to another UTF-8 encoded text file, you need to encode it back to UTF-8
[21:38:53] <Grinnz> same deal with XML
[21:39:41] <Grinnz> and XML::LibXML will do that if you create the XML using it, for example
[21:39:51] <mst> leitz: your code is extracting text, not XML encoded text, because it's generating plain text output
[21:40:05] <mst> leitz: if lots of other things -also- consume that output then it probably -needs- to be generating plain text
[21:40:14] <mst> leitz: hence why the other process should be fixed in that case
[21:40:34] <mst> leitz: alternatively, you can check that every other thing that uses that output can handle XML encoded text and then change the output format, but that sounds like more work
[21:40:47] <leitz> So LibXML changes '&amp;' to '&' when pulling out to text. Since that isn't valid XML, the thing that tries to put it into XML needs to deal with it.
[21:41:05] <Grinnz> yes, you need to XML-encode when inserting arbitrary text into XML
[21:41:18] <leitz> mst, at this point "the other process" is what needs to be looked at.
[21:41:34] <Grinnz> this is also important if the text contains, for instance, < or >
[21:41:40] <mst> leitz: if you pull out *text* then any correct XML library will do that, yes
[21:41:57] <mst> leitz: because 'text' and 'an xml encoded representation of that text' are not the same thing
[21:42:26] <mst> leitz: and assuming the other things that also use that output data are expecting actual plain text, changing the thing that generates it would probably make them unhappy
[21:42:47] <mst> leitz: so fixing the one that -doesn't- realise it's supposed to deal with plain text seems nicer than changing every other program involved
[21:42:53] <mst> leitz: does that make it a bit clearer?
[21:45:24] <leitz> mst, yup.
[21:45:48] <Grinnz> if, hypothetically, the system expects XML-encoded text intentionally, then you would need to send it XML instead of text
[21:45:50] <leitz> Thanks, all; while the problem isn't fixed, at least I understand it a lot better.
[21:47:17] <leitz> The fix is "allowed time to ensure the variety of output formats is taken care of properly". We have a few formats to maintain.
[21:47:31] <mst> Grinnz: but if there's a bunch of other things -also- using that data that currently aren't breaking
[21:47:46] <mst> you'd need to check all of them to make sure that switching to xml-encoded text rather than plain text wouldn't break then
[21:47:49] <mst> though
[21:47:56] <Grinnz> yes, just like character encoding, changing it means you are sending a different data stream, which can't be disambiguated
[21:48:07] <mst> leitz: given my level of trust in your codebase, you might want to check all of the others anyway just in case :D
[21:48:36] <Grinnz> you cannot guess that text is XML-encoded any more than you can guess it is UTF-8 or latin1
[21:48:55] <Grinnz> because all XML-encoded text is also valid... regular text
[21:49:02] <mst> well, 'you cannot *reliably* guess'
[21:49:04] <mst> you absolutely can guess
[21:49:06] <Grinnz> right
[21:49:12] <mst> it's an excellent source of bugs later
[21:49:19] *** Joins: tahc (~tahc@c-24-30-27-91.hsd1.ga.comcast.net)
[21:52:32] <leitz> Just checked; 7 output formats. Of those three different XML based formats.
[21:52:40] <leitz> Lots of bugs...
[21:58:18] <ilmari> Grinnz: but non-xml-encoded text is _extremely_ unlikely to be valid XML
[21:58:44] <Grinnz> yes, and latin-1 text with non-ascii characters is extremely unlikely to be valid UTF-8
[21:59:56] <Grinnz> the false positives often run in the other direction, which is particularly dangerous in the case of XML (interpreting someone's <foo> text input as an xml tag)
[22:03:48] <mst> Grinnz: especially if there's currently an invasion on and your normal users have been replaced with pod people
[22:05:02] <tahc> Perl is fun. I like perl.
[22:07:20] *** Joins: jdurand (~jdurand@user/jdurand)
[22:07:57] <gamo> tahc The strong point of Perl
[22:11:39] *** Quits: tahc (~tahc@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Client closed)
[22:11:43] <Grinnz> our chief weapon is fun... fun and usefulness... our two chief weapons are
[22:12:27] * genio glares at XML. "parse me and I might tell you how to parse me properly after you've already done a first pass to find out what encoding I'm saved in."
[22:12:53] <Grinnz> genio: see also the LWP::UserAgent code that reads the HTML to guess its encoding
[22:13:29] <Grinnz> and use utf8 and =encoding UTF-8 :)
[22:13:53] <genio> yea, I hate HTML too. but it's easier to glare daggers at XML because SOAP :)
[22:14:58] <xq> I wish there was a repository management system like gitea written in perl
[22:15:03] *** Joins: kensanata (~user@user/kensanata)
[22:15:21] <xq> with an integrated build system, ticket system, and wiki
[22:17:06] <Grinnz> well volunteered!
[22:18:11] <Grinnz> trac is a slightly older python one
[22:18:15] <choroba> https://gitprep.yukikimoto.com/
[22:18:17] <Paperbot> Link title(s): [ GitPrep - Github clone. you can install portable github system into unix/linux. ]
[22:18:19] <Grinnz> can't think of any others i've used
[22:18:49] <Grinnz> fedora's pagure is a newer python one, no idea on its practicality when you're not fedora
[22:23:59] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 250 seconds)
[22:24:01] *** Joins: proller (~p@2a02:6b8:b081:8017::1:3c)
[22:24:45] *** Quits: fkdnd3 (~fkdnd@178.49.152.151) (Quit: Client closed)
[22:27:35] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Quit: This computer has gone to sleep)
[22:29:05] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[22:29:16] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[22:31:02] *** Joins: BSaboia (~bsaboia@187.19.136.126)
[22:31:11] *** Quits: BSaboia (~bsaboia@187.19.136.126) (Remote host closed the connection)
[22:34:39] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e14a:d90e:46d2:87c4)
[22:37:36] *** Quits: zhmylove (~zhmylove@178.67.199.125) (Read error: Connection reset by peer)
[22:37:57] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[22:38:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 245 seconds)
[22:40:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[22:41:25] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[22:44:17] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 265 seconds)
[22:47:40] *** Quits: deadmarshal (~deadmarsh@95.38.116.242) (Ping timeout: 265 seconds)
[22:52:09] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:56:34] *** Joins: bmeneg_ (~Bruno@2001:1284:f013:b799:1846:c1f6:2361:cd9a)
[22:57:07] *** Joins: rgrinberg (~textual@200.5.63.76)
[22:58:16] *** Quits: jdurand (~jdurand@user/jdurand) (Quit: Leaving)
[22:59:58] *** Quits: bmeneg (~Bruno@2001:1284:f013:a5b:adcb:5932:8e69:4857) (Ping timeout: 268 seconds)
[23:26:47] *** Joins: jdurand (~jdurand@user/jdurand)
[23:28:02] *** Quits: jabberwok (~wlindley@75.105.20.104) (Ping timeout: 256 seconds)
[23:32:32] *** Joins: xenial-user5 (~androirc@20014C4C17E1D200A13C3D14A387ACB5.catv.pool.telekom.hu)
[23:35:20] *** Joins: mcint (mcint@user/mcint)
[23:46:21] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:47:27] *** Quits: jdurand (~jdurand@user/jdurand) (Quit: Leaving)
[23:47:46] <simcop2387> and this is why i don't trust you people to run more than seconds at a time.  https://comsec.ethz.ch/research/dram/blacksmith/
[23:47:47] <Paperbot> Link title(s): [ Blacksmith – Computer Security Group ]
[23:47:55] <simcop2387> new rowhammer attack
[23:49:17] <xenu> i hope those attack will never be mitigated in hardware and instead the solution will be to disable js by default in browser
[23:49:17] <simcop2387> ttps://news.ycombinator.com/item?id=29229200
[23:49:20] <xenu> browsers*
[23:49:24] <xenu> attacks*
[23:49:33] <simcop2387> https://news.ycombinator.com/item?id=29229200
[23:49:34] <Paperbot> Link title(s): [ Blacksmith – Rowhammer bit flips on all DRAM devices today despite mitigations | Hacker News ]
[23:50:01] <simcop2387> xenu: honestly i suspect the only workable mitigation is encrypted ram with ecc
[23:50:17] <simcop2387> encrypted *and* authenticated
[23:50:27] <xenu> yeah but that won't improve my web browsing experience
[23:53:09] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:53:32] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 256 seconds)
[23:56:24] *** Joins: deadmarshal (~deadmarsh@95.38.116.242)
[23:57:22] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:58:15] <Botje> xenu: it will once they stop asking you for a captcha every three page loads
