[00:05:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:10:33] <dsal> I have a simple enum sum type and a function that takes one of those and some arbitrary `a`.  Is there a way I can constrain the `a` to be of a type associated with a value from that sum?
[00:11:00] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[00:11:13] <dsal> I feel like there's some kind of datakinds magic.  Basically, I want to be able to call `f True a` but not `f False a`
[00:11:19] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 258 seconds)
[00:13:53] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 246 seconds)
[00:16:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:18:46] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[00:20:37] <AWizzArd> Linear: when I have   foo :: Int 1%-> Double    and inside foo I want to call `bar` and pass it that Int argument, does then `bar` also have to accept a linear argument. Does this linearity get passed on/inherited?
[00:20:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[00:20:49] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[00:21:02] *** Joins: Cajun (~Cajun@user/cajun)
[00:25:32] <geekosaur> I would be surprised if passing a parameter was a gtet out of jail free card for linearity
[00:26:42] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[00:29:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[00:30:02] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:30:22] *** Joins: alzgh (~alzgh@user/alzgh)
[00:30:28] <AWizzArd> geekosaur: I would also assume that this constraint will get passed on.
[00:31:12] <AWizzArd> geekosaur: But what about `dup`? Or is it called `dup2`? It seems that I can do:    let (x', x'') = dup x
[00:31:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[00:31:36] <AWizzArd> Now x is consumed and I can't use it anymore. But I have x' and x'' and can/must use both of them.
[00:32:12] <AWizzArd> So this seems to be a way out of linearity for free. I may be missing something here tho.
[00:33:32] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[00:34:00] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 260 seconds)
[00:35:10] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[00:35:23] *** Joins: sedeki (~textual@user/sedeki)
[00:35:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[00:38:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:38:45] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[00:43:11] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[00:43:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:43:58] <aegon> i'm getting a Thread Terminated and i don't see a reason for it, how can i get more info out of ghc about why its being terminated
[00:48:01] *** Quits: xff0x (~xff0x@2001:1a81:5218:9100:aa26:25c9:f09a:101d) (Ping timeout: 245 seconds)
[00:48:54] <aegon> derp i was killin it by messing up timeout logic :X
[00:48:55] *** Joins: xff0x (~xff0x@2001:1a81:5218:9100:9942:dd03:d29b:2938)
[00:50:31] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[00:51:06] *** Quits: fendor (~fendor@178.165.200.199.wireless.dyn.drei.com) (Remote host closed the connection)
[00:51:31] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:51:51] *** Joins: alzgh (~alzgh@user/alzgh)
[00:54:15] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[00:55:31] <dolio> AWizzArd: What is the type of dup?
[00:55:34] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[00:56:12] <unit73e> Looks like HLS works with Paths_* if I open a file without it first lol. Weird but I guess it's a workaround.
[00:56:41] <AWizzArd> https://hackage.haskell.org/package/linear-base-0.1.0/docs/Prelude-Linear.html#v:dup2
[00:56:52] <AWizzArd> dup2 :: a %1 -> (a, a)
[00:58:37] <dolio> No, that's not the type. :)
[00:58:47] <dolio> Dupable a => a %1 -> (a, a)
[01:00:23] *** Quits: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl) (Ping timeout: 264 seconds)
[01:02:42] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:03:01] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 245 seconds)
[01:03:45] *** Joins: hyiltiz (~quassel@31.220.5.250)
[01:03:49] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:04:39] <AWizzArd> dolio: true.
[01:04:56] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[01:05:20] <AWizzArd> You see, no ghci support here. One more proof that I need Haskell to support me (:
[01:05:59] <dolio> Some types can be duplicated, say becasue they can be represented in a stable way in memory or something.
[01:06:31] <dolio> But it's not free, and you can't do it to everything.
[01:07:43] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[01:09:34] <dolio> The linear arrow itself is an example of something that might not be able to be duplicated, because linear functions might be a reification of ephemeral control flow points in the program, like continuations.
[01:10:21] <dolio> If you duplicate/discard those control flow points, you get the non-deterministic results of, e.g. call/cc.
[01:11:39] <dolio> So in that sense, it only makes sense to be able to duplicate linear functions that are represented by code.
[01:16:54] *** Parts: echoSMILE (~echoSMILE@user/echosmile) ()
[01:21:39] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[01:22:11] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[01:24:16] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:27:05] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[01:27:08] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[01:28:27] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:29:36] *** Joins: Guest|12 (~Guest|12@89.187.239.178)
[01:30:06] *** Parts: Guest|12 (~Guest|12@89.187.239.178) ()
[01:37:31] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[01:41:20] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[01:42:09] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:47:23] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[01:52:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:52:07] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[01:52:08] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[01:52:31] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[01:54:47] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[01:55:16] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:57:06] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:59:40] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[02:00:33] *** Joins: Skyfire (~pyon@user/pyon)
[02:00:57] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 258 seconds)
[02:07:31] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[02:07:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:07:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:07:59] *** Joins: wroathe (~wroathe@user/wroathe)
[02:12:13] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[02:14:04] <ski> zincy : anyway .. Haskell doesn't have an `exists' keyword (a few implementations did have it as extension, but only in the "trivial" case of occuring to the left of a function arrow (possibly indirected through type synonyms, iirc)). so, in actual current Haskell (with extensions), you do need to *encode* `exists' (in one of two main ways, sometimes a third applies). nonetheless, i think it helps to think 
[02:14:10] <ski> about it conceptually, at the level i described, with a pseudo-Haskell `exists', before delving into how to actually get code today working
[02:15:04] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[02:15:30] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 260 seconds)
[02:22:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:23:10] *** Quits: AlexNoo (~AlexNoo@178.34.150.219) (Read error: Connection reset by peer)
[02:23:53] *** Joins: AlexNoo (~AlexNoo@178.34.150.219)
[02:27:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[02:27:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:29:24] *** gdd1 is now known as gdd
[02:31:44] *** Joins: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net)
[02:33:32] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[02:34:06] *** Quits: chomwitt (~chomwitt@ppp-94-68-249-8.home.otenet.gr) (Remote host closed the connection)
[02:42:55] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[02:43:35] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[02:43:52] *** Joins: MQ-17J (~MQ-17J@8.6.144.240)
[02:45:23] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[02:51:59] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 264 seconds)
[02:52:59] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[02:55:15] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:55:56] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:56:06] *** Quits: michalz (~michalz@185.246.204.97) (Remote host closed the connection)
[02:56:10] *** Joins: yinghua (~yinghua@2800:2121:1400:900:b457:83cc:995e:57e)
[03:02:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[03:05:51] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d76b9ac87bdf676c186.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:08:42] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:197f:30be:cf5f:af55) (Remote host closed the connection)
[03:14:45] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::d3fb)
[03:19:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e876:dcb:76b1:818b) (Ping timeout: 260 seconds)
[03:19:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:25a5:cf0c:746a:f835) (Remote host closed the connection)
[03:21:09] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[03:22:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:22:59] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[03:25:44] *** Quits: alx741 (~alx741@186.178.109.79) (Quit: alx741)
[03:27:04] *** Joins: alx741 (~alx741@186.178.109.79)
[03:27:59] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 264 seconds)
[03:33:51] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fa59:2f99:edd:cd7b) (Ping timeout: 260 seconds)
[03:34:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[03:34:31] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e)
[03:35:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[03:35:56] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[03:41:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[03:45:13] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[03:45:22] *** Quits: trog (~trog@user/trog) (Ping timeout: 252 seconds)
[03:46:13] *** Joins: dajoer (~david@user/gvx)
[03:48:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:48:10] *** Joins: trog (~trog@user/trog)
[03:48:43] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:52:03] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[04:02:17] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[04:05:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[04:06:27] *** Joins: faultline (~christian@185.65.241.21)
[04:09:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[04:10:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:403:ec69:5129:2d3e)
[04:15:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 260 seconds)
[04:16:50] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[04:18:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:19:11] *** Quits: Null_A (~null_a@2601:645:8700:2290:403:ec69:5129:2d3e) (Read error: Connection reset by peer)
[04:20:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:22:31] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[04:22:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[04:27:20] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[04:30:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:32:21] *** Joins: zebrag (~chris@user/zebrag)
[04:32:39] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[04:33:18] *** Quits: obfusk_ (~quassel@a82-161-150-56.adsl.xs4all.nl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:33:43] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[04:34:20] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[04:44:17] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:48:03] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[04:48:26] *** Quits: mmhat (~mmh@55d4b27c.access.ecotel.net) (Ping timeout: 268 seconds)
[04:49:27] *** Quits: MQ-17J (~MQ-17J@8.6.144.240) (Ping timeout: 260 seconds)
[04:53:29] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:55:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[04:55:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:57:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:59:46] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[05:00:35] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:00:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[05:01:24] *** Joins: mmhat (~mmh@55d4b856.access.ecotel.net)
[05:03:25] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:07:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[05:07:54] *** Quits: mmhat (~mmh@55d4b856.access.ecotel.net) (Quit: WeeChat 3.3)
[05:09:20] *** Quits: faultline (~christian@185.65.241.21) (Ping timeout: 260 seconds)
[05:11:35] *** Quits: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net) (Remote host closed the connection)
[05:12:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[05:13:13] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[05:14:53] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:15:56] *** Quits: xff0x (~xff0x@2001:1a81:5218:9100:9942:dd03:d29b:2938) (Ping timeout: 245 seconds)
[05:18:08] *** Joins: xff0x (~xff0x@2001:1a81:525b:da00:d10:7b28:3140:c276)
[05:25:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:25:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:25:42] *** Joins: wroathe (~wroathe@user/wroathe)
[05:27:17] *** Quits: alx741 (~alx741@186.178.109.79) (Quit: alx741)
[05:27:25] *** Quits: yinghua (~yinghua@2800:2121:1400:900:b457:83cc:995e:57e) (Quit: Leaving)
[05:28:53] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[05:29:20] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Quit: Leaving)
[05:31:06] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:32:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[05:40:56] <zzz> i'm doing some church in js and i can't seem to make folds work. can anyone find out what the problem is? https://paste.jrvieira.com/1635385396222
[05:41:39] <zzz> FOLDL and FOLDR are defined at lines 66 and 73, respectively
[05:44:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[05:45:39] <monochrom> Ugh so there is no such thing as an empty list.
[05:45:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[05:47:16] <ski> zzz : i guess i would make the nullary continuations take an empty argument list
[05:47:28] <monochrom> Also I haven't checked but most fixed point combinators assume non-eager lambda calculi. JS is an eager lambda calculus.
[05:47:45] <ski> (otherwise you might run into executing both branches of a conditional ..)
[05:47:56] <ski> yes, exactly
[05:49:00] <ski> however, `z' is eta-expanded, so i think that would probably work out (?)
[05:49:10] <ski> (although i'd have eta-expanded in a different place)
[05:49:57] <monochrom> There is an easy way to check.
[05:50:06] <ski> (as it is now, you're "odd", in that `f' gets called (on one parameter), before you provide the input to the result of `z'
[05:50:09] <ski> )
[05:50:18] *** bradparker_ is now known as bradparker
[05:50:56] <ski> (but if `f' is `\f. \x. ..f..x..', it shouldn't matter. only if it's `\f. ..f..(\x. ..f..x..)..' or perhaps not a lambda at all)
[05:51:28] <monochrom> Define church numerals. Define the recursive function "f 0 = 0; f (succ n) = f n" using Z.  If that works, you have much better confidence that Z doesn't go wrong.
[05:52:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:52:38] <monochrom> In general, it's a good idea to get peano naturals to work before you try your hands at cons lists.
[05:52:58] <ski> also, instead of this `ISNONE' nonsense, why don't you do a `CASELIST' ?
[05:53:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:53:11] <monochrom> This also holds when one day you go to grad school and do this all over again in System F.
[05:53:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:53:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:53:48] <monochrom> In fact I thought the point of church list is that you get foldr for free.
[05:54:31] <monochrom> "foldr" op z mylst = mylst op z.  Or mylst z op, I don't know your favourite argument order.
[05:54:31] <ski> yea, you can do `FOLDLIST', if you prefer
[05:55:15] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 260 seconds)
[05:55:48] *** Joins: jkaye (~jkaye@2601:281:8300:7530:906c:9805:416e:fccf)
[06:04:14] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:09:23] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:10:58] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[06:10:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:13:27] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[06:20:00] <zzz> Z is working fine i think. see MOD, MAP, SIZE... everything is working fine except the folds
[06:20:31] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:22:07] <zzz> about the eagerness, notice that i wrap the recursive branch in (x => ...(x))
[06:22:25] <ski> yes, i did
[06:22:49] <ski> for most ordinary cases, it shouldn't matter, i think
[06:23:54] <zzz> i have no formal education in this, am trying to learn by myself. how do we get foldr "for free" with church lists?
[06:24:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:25:14] *** Quits: td_ (~td@94.134.91.76) (Ping timeout: 246 seconds)
[06:26:20] <zzz> oh i see
[06:26:37] <zzz> list z op
[06:27:09] *** Joins: td_ (~td@94.134.91.221)
[06:27:16] <ski> yep
[06:27:28] * ski 's no formal education in it, either
[06:28:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[06:31:07] <mjrosenb_> with lens, if I have (at foo) in the middle of the lens, the lens's target type becomes (Maybe foo).  Is there a way to convert this to a lens that targets foo?
[06:31:32] <ski> zzz : iow, instead of building lists out of optional pairs, nested in the second component, simply use the same approach as you already used for naturals
[06:31:35] <mjrosenb_> err, I should probably change one of those foos to a bar.
[06:32:11] <mjrosenb_> (at 4 . to fromJust) doesn't do what I want, because that's only for getting, not also setting.
[06:33:37] <zzz> ski: i see
[06:34:16] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[06:35:01] <zzz> i found it elegand to have 'head : a' and 'tail : maybe (list a)' naturally from fst and snd
[06:35:32] <mjrosenb_> I can probably use lens here, assuming there's nothing in the standard library.
[06:35:54] <zzz> but i see why 'null | cons a (list a)' is a more interesting approach
[06:36:58] <zzz> but i still can't understand why my fold is not working
[06:37:16] <zzz> it seems simple
[06:37:17] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[06:38:29] <zzz> s/elegand/elegant
[06:39:03] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[06:40:54] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[06:45:30] <zzz> and of course i meant 'head : list a -> a' and 'tail : list a -> maybe (list a)'
[06:46:04] * ski didn't get as far as checking the fold
[06:46:51] <zzz> i also like the idea of assuming lists as non empty and using 'maybe (list a)' for possibly empty lists
[06:47:25] <zzz> but i'm just playing around
[06:48:34] <dsal> mjrosenb_: Are you looking for the _Just prism?
[06:51:48] <dsal> > (1, M.fromList [("a", 1)]) & _2 . at "a" . _Just .~ 5 &  _2 . at "b" . _Just .~ 9 -- mjrosenb_ 
[06:51:49] <lambdabot>  (1,fromList [("a",5)])
[06:53:47] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[06:55:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[06:56:04] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:56:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[06:57:16] *** Quits: nrr_ (sid20938@lymington.irccloud.com) (Ping timeout: 258 seconds)
[06:57:19] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[06:57:39] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 258 seconds)
[06:57:49] <mjrosenb_> dsal: maybe? I did something that was probably unwise, and I'm passing this as an argument into a function that is explicitly expecting a (Lens' foo bar)
[06:58:11] <mjrosenb_> I'm guessing that using _Just means that the whole thing is a prism, and I should change the expected type of this function.
[06:58:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:58:25] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[06:58:30] <mjrosenb_> looks like I can also use ix and singular
[06:59:03] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[06:59:13] *** Quits: akspecs__ (~akspecs@user/akspecs) (Read error: Connection reset by peer)
[07:00:28] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[07:00:48] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[07:01:22] <dsal> :t _Just
[07:01:23] <lambdabot> (Choice p, Applicative f) => p a (f b) -> p (Maybe a) (f (Maybe b))
[07:01:37] <mjrosenb_> yeah, if I try foo ^. _2 . at "a" . _Just, I get the standard error about no instance Monoid Int
[07:01:53] <dsal> Well, yes.  That's a different question.
[07:02:07] <dsal> > (1, M.fromList [("a", 1)]) ^? _2 . at "a" . _Just
[07:02:08] <lambdabot>  Just 1
[07:02:31] <dsal> > (1, M.fromList [("a", 1)]) ^. _2 . at "a" . _Just . to Sum
[07:02:33] <lambdabot>  Sum {getSum = 1}
[07:03:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 258 seconds)
[07:04:52] *** Joins: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net)
[07:04:52] *** Quits: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net) (Changing host)
[07:04:52] *** Joins: akspecs__ (~akspecs@user/akspecs)
[07:05:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[07:06:04] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[07:07:32] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:08:00] <mjrosenb_> yeah, sorry, I'm definitely still wrapping my head around the terminology of these things.  I'm currently using the lens with ^., and by putting (at "a") into the chain, I'm either forcing a Maybe into the type, or forcing it to be something other than a lens
[07:08:12] <mjrosenb_> neither of which the type that I've set up is prepared to handle.
[07:08:26] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Ping timeout: 245 seconds)
[07:08:31] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 265 seconds)
[07:10:44] <c_wraith> there's also a good question about *why* you're using at
[07:10:55] <c_wraith> And would it be appropriate to combine it with non ?
[07:11:24] <c_wraith> that gets you back to a straight lens, but with possibly-surprising behavior
[07:12:12] <c_wraith> On the other hand, sometimes that gives you *exactly* the behavior you want
[07:12:15] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[07:13:20] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[07:13:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:13:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:13:31] *** Joins: wroathe (~wroathe@user/wroathe)
[07:14:18] <dsal> mjrosenb_:  You have to consider a case where nothing exists.   ^.   will get a monoid.   ^?  will get you a maybe.  ^?!  will let you promise that it'll definitely be a Just.
[07:14:59] <c_wraith> and non lets you declare a value to be treated the same as if it was Nothing
[07:16:05] <dsal> > (1, M.fromList [("a", 1)]) ^? _2 . at "a" . non 6
[07:16:07] <lambdabot>  Just 1
[07:16:08] <dsal> > (1, M.fromList [("a", 1)]) ^? _2 . at "b" . non 6
[07:16:09] <lambdabot>  Just 6
[07:16:31] <mjrosenb_> oh, that is horrifying.
[07:16:40] <jackdk> > (1, M.fromList [("a", 1)]) ^.. _2 . at "a" . traverse
[07:16:42] <lambdabot>  [1]
[07:16:51] <jackdk> > (1, M.fromList [("a", 1)]) ^.. _2 . at "b" . traverse
[07:16:52] <lambdabot>  []
[07:16:56] <mjrosenb_> wait, if there's more than one thing in the map, and nothing is "b", does that just set every value to 6?
[07:17:06] <jackdk> >    (1, M.fromList [("a", 1)]) ^.. _2 . ix "a"
[07:17:08] <lambdabot>  [1]
[07:17:09] <dsal> It didn't set anything to anything.
[07:17:32] <c_wraith> > (1, M.fromList [("a", 1)]) & _2 . at "a" . non 6 .~ 6
[07:17:34] <lambdabot>  (1,fromList [])
[07:17:53] <c_wraith> non declares the value you provide to be the same as Nothing, in *both* directions
[07:18:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[07:18:07] <mjrosenb_> err, no, I totally misread what the result of that expression was.
[07:18:32] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[07:19:06] <c_wraith> non is really nice when you're nesting data structures.  a list inside a map, for instance.  If you have a `non []` in there, it will remove empty lists that you insert through it
[07:20:35] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[07:22:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:22:04] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[07:23:39] <mjrosenb_> so, this code used to be (ix "b"), and it *happened* to work because I was explicitly fetching a list.  Now, I'm doing something else, and I only need the first element of it
[07:24:16] <c_wraith> But if there is no element at "b"?
[07:25:26] <mjrosenb_> if that happens, then this code deserves to crash.
[07:26:34] <c_wraith> then use ix and singular.  :P
[07:27:22] <c_wraith> singular is lens for "this always returns a value. no, I don't feel like proving it"
[07:27:50] <mjrosenb_> yeah.  I'm also using singular _head :-)
[07:28:15] <jackdk> > (1, M.fromList [("a", 1)]) ^?! _2 . at "a" 
[07:28:17] <lambdabot>  Just 1
[07:28:25] <jackdk> > (1, M.fromList [("a", 1)]) ^?! _2 . at "b" 
[07:28:26] <lambdabot>  Nothing
[07:28:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:28:42] <jackdk> > (1, M.fromList [("a", 1)]) ^?! _2 . ix "b" -- er, this one
[07:28:43] <lambdabot>  *Exception: (^?!): empty Fold
[07:28:46] <mjrosenb_> although this code is hella buggy, so I may write my own singular that takes a String argument, and sticks that in the error message
[07:29:14] <jackdk> perhaps the tolerance of partial functions is not helping ;-)
[07:30:27] *** Quits: jkaye (~jkaye@2601:281:8300:7530:906c:9805:416e:fccf) (Ping timeout: 260 seconds)
[07:31:01] <mjrosenb_> HsCompilation finished at Thu Oct 28 00:00:03
[07:31:06] <mjrosenb_> \o/
[07:31:12] <jackdk> o/
[07:31:20] <mjrosenb_> I should probably also do something about this function.
[07:31:53] <mjrosenb_> it is an abomination against man, god, and line limits.
[07:32:45] <jackdk> and since eighty columns was a divinely-handed-down limit, the third is a strict subset of the second
[07:34:38] <mjrosenb_> hah, eighty.
[07:34:53] <mjrosenb_> looks like this function tops out at 168 characters wide.
[07:37:26] <mjrosenb_> oh, it is only 92 lines long, I guess it only feels longer because I have only the vaguest clue of how it works.
[07:40:58] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[07:43:39] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:44:34] <kronicmage> does anyone know how to query for a fixity of some operator?
[07:44:47] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 264 seconds)
[07:45:03] <jackdk> % :info $
[07:45:03] <yahb> jackdk: ($) :: (a -> b) -> a -> b -- Defined in `GHC.Base'; infixr 0 $
[07:45:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[07:45:13] <kronicmage> thank you jackdk!
[07:45:15] <jackdk> kronicmage: `:info` or `:i` in ghci
[07:45:20] <kronicmage> :info (*)
[07:45:24] <kronicmage> oops
[07:45:31] <kronicmage> % :info (*)
[07:45:31] <yahb> kronicmage: type Num :: * -> Constraint; class Num a where; ...; (*) :: a -> a -> a; ...; -- Defined in `GHC.Num'; infixl 7 *; type (*) :: GHC.Base.Nat -> GHC.Base.Nat -> GHC.Base.Nat; type family (*) a b; -- Defined in `GHC.TypeNats'; infixl 7 *
[07:45:32] <jackdk> prefix with `%` for yahb to see it
[07:47:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e) (Quit: WeeChat 3.3)
[07:47:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e)
[07:51:18] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:52:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[07:56:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[07:59:36] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[07:59:49] *** Joins: mbuf (~Shakthi@122.178.213.7)
[08:00:10] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[08:00:36] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[08:01:27] *** Joins: hubvu (sid495858@user/hubvu)
[08:03:12] *** mjrosenb_ is now known as mjrosenb
[08:03:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[08:04:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 245 seconds)
[08:08:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:11:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[08:11:54] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:14:56] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[08:16:11] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[08:17:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[08:18:45] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[08:21:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[08:33:45] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[08:34:51] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[08:39:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[08:39:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[08:45:57] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[08:48:06] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[08:49:23] *** Joins: MQ-17J (~MQ-17J@8.6.144.240)
[08:52:57] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[08:53:13] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[08:54:16] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:54:35] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[08:55:40] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[09:04:25] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 260 seconds)
[09:05:26] <awpr> ever wished StateT supported the case where the state is an instance dictionary?  gotcha covered https://replit.com/@AndrewPritchard/TartUnsungCron#main.hs
[09:06:10] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[09:09:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:09:24] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[09:11:38] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:18:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[09:23:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 260 seconds)
[09:39:59] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[09:43:47] *** Joins: michalz (~michalz@185.246.204.109)
[09:49:33] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:7857:9ec8:a629:d6a8)
[09:50:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[09:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[09:53:15] *** Joins: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr)
[09:53:26] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:9ce5:6f05:3959:43f5) (Ping timeout: 245 seconds)
[09:55:01] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[09:55:05] *** Joins: fendor (~fendor@178.165.200.199.wireless.dyn.drei.com)
[09:55:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 245 seconds)
[09:56:59] *** Quits: MQ-17J (~MQ-17J@8.6.144.240) (Ping timeout: 260 seconds)
[09:59:11] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[09:59:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:00:13] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[10:02:45] *** Quits: xff0x (~xff0x@2001:1a81:525b:da00:d10:7b28:3140:c276) (Ping timeout: 260 seconds)
[10:02:58] *** Quits: _xor (~xor@72.49.199.147) (Quit: brb)
[10:03:20] *** Joins: xff0x (~xff0x@2001:1a81:525b:da00:5f35:171b:1f01:7273)
[10:03:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[10:05:45] *** Joins: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi)
[10:10:32] *** Joins: trcc_ (~trcc@users-1190.st.net.au.dk)
[10:11:04] *** Quits: trcc_ (~trcc@users-1190.st.net.au.dk) (Client Quit)
[10:15:09] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[10:15:41] *** Joins: Skyfire (~pyon@user/pyon)
[10:19:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[10:20:25] *** Joins: v01d4lph4 (~v01d4lph4@223.177.229.33)
[10:20:25] *** Quits: v01d4lph4 (~v01d4lph4@223.177.229.33) (Changing host)
[10:20:25] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[10:21:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:22:11] *** Quits: Inst__ (~Inst@2601:6c4:4080:3f80:7857:9ec8:a629:d6a8) (Ping timeout: 245 seconds)
[10:24:03] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 260 seconds)
[10:25:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[10:27:18] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:32:37] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:36:05] *** Joins: cfricke (~cfricke@user/cfricke)
[10:36:48] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[10:38:07] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[10:41:31] *** Joins: nschoe (~quassel@178.251.84.79)
[10:44:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[10:45:01] *** Quits: kawpuh (~kawpuh@66.42.81.80) (Ping timeout: 252 seconds)
[10:45:02] *** Joins: kawpuh1 (~kawpuh@66.42.81.80)
[10:45:03] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb ffs, frickin configuration)
[10:45:28] *** Joins: Skyfire (~pyon@user/pyon)
[10:52:01] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:52:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[10:55:47] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[10:56:37] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[10:56:38] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d76b9ac87bdf676c186.dip0.t-ipconnect.de)
[10:57:04] *** Joins: mcglk (~mcglk@131.191.49.120)
[10:57:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[10:57:46] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[11:00:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[11:02:48] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb ffs frickin configuration)
[11:03:47] *** Joins: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl)
[11:04:16] *** Joins: Skyfire (~pyon@user/pyon)
[11:12:12] *** Quits: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[11:12:28] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:13:38] *** Joins: jinsun (~quassel@user/jinsun)
[11:17:40] <zincy> Is the existentialQuantification just using RankNTypes under the hood for type declarations?
[11:23:59] *** Joins: chele (~chele@user/chele)
[11:27:04] *** Quits: cads (~cads@ip-64-72-99-234.lasvegas.net) (Remote host closed the connection)
[11:27:19] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:27:24] *** Joins: cads (~cads@ip-64-72-99-234.lasvegas.net)
[11:29:41] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[11:31:07] *** Quits: nschoe (~quassel@178.251.84.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:32:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[11:33:04] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[11:35:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:05] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 260 seconds)
[11:44:36] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[11:47:34] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[11:47:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[11:47:37] *** allbery_b is now known as geekosaur
[11:50:20] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[11:52:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[11:52:45] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[11:52:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[11:55:18] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[12:00:18] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[12:00:23] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 264 seconds)
[12:02:47] *** Quits: xff0x (~xff0x@2001:1a81:525b:da00:5f35:171b:1f01:7273) (Ping timeout: 264 seconds)
[12:03:04] *** stefan-__ is now known as stefan-_
[12:03:34] *** Joins: xff0x (~xff0x@2001:1a81:525b:da00:3f7d:da8c:9e9b:e904)
[12:05:22] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[12:10:57] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:16:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:23:31] *** Quits: ubert (~Thunderbi@91.141.46.110.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[12:24:35] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:24:49] *** Joins: gentauro (~gentauro@user/gentauro)
[12:29:33] *** Joins: jumper149 (~jumper149@80.240.31.34)
[12:31:45] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[12:33:26] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:33:47] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[12:34:14] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:35:09] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[12:35:37] *** Joins: img (~img@user/img)
[12:39:44] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[12:40:01] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[12:47:02] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:49:55] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:50:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[12:51:17] *** Joins: img (~img@user/img)
[12:53:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[12:56:00] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[12:58:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 260 seconds)
[12:58:35] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 264 seconds)
[13:02:00] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[13:04:16] *** Joins: fendor_ (~fendor@178.165.166.121.wireless.dyn.drei.com)
[13:04:39] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:05:21] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:05:46] <kuribas> is there a dependent pair, or should I roll a new one every time?
[13:06:59] *** Quits: fendor (~fendor@178.165.200.199.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[13:08:06] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[13:08:11] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[13:08:30] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:10:03] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[13:11:17] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[13:12:40] *** Joins: img (~img@user/img)
[13:13:31] <kuribas> again tooling issues with emacs/stack...
[13:13:43] <kuribas> Suspicious state from syntax checker haskell-stack-ghc: Flycheck checker haskell-stack-ghc returned 1, but its output contained no errors: <command line>: cannot satisfy -package hspec
[13:13:59] <kuribas> How tf does anyone get work done in haskell?
[13:16:06] <lortabac> kuribas: regarding dependent pairs, there is Data.Dynamic
[13:16:22] <kuribas> lortabac: that's not quite a dependent pair.
[13:16:30] <lortabac> otherwise if you are using your own singletons there is exinst
[13:16:38] <lortabac> @hackage exinst
[13:16:38] <lambdabot> https://hackage.haskell.org/package/exinst
[13:16:53] <jneira[m]> not using emacs nor stack :-P 
[13:16:59] <lortabac> but I think rolling your own is simpler in most cases
[13:17:19] <kuribas> yeah
[13:17:27] <kuribas> jneira[m]: what then?
[13:17:53] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[13:18:06] <jneira[m]> i was mainly joking but the fact is for example hls works better with cabal right now
[13:18:29] <kuribas> yeah, but hls doesn't even work on my project.
[13:18:29] <jneira[m]> it should not be and we are working in get the same support for both though
[13:18:39] <kuribas> Presumable because of a large amount of TH generated code.
[13:19:05] <kuribas> I am hoping haskell tooling will get at a decent point, but it definitely isn't now.
[13:19:07] <jneira[m]> have you tried an hls version built from source, dinamically linked?
[13:19:27] <jneira[m]> it fixes issues with th for some people
[13:19:55] <jneira[m]> mmm let me find the issue about...
[13:20:09] <kuribas> jneira[m]: I just don't want to solve/debug tooling issues.
[13:20:10] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[13:20:12] <kuribas> I want to get work done.
[13:20:56] <jneira[m]> ya, lucky me  solve/debug tooling issue is my work done :-P 
[13:21:03] <jneira[m]> (volunteer work)
[13:21:49] <kuribas> I want to use haskell as an experiment in a production environment, I cannot justify spending lots of time fixing tooling.
[13:22:12] <jneira[m]> yeah, totally understandable
[13:22:16] <kuribas> I don't mean spending some time setting up a working environment, I mean fixing actual bugs.
[13:22:46] <jneira[m]> but someone has to improve tooling, if users dont do it and there is no enough money for more paid work
[13:22:53] <jneira[m]> 🤷
[13:23:00] <kuribas> So get up some kind of fund.
[13:23:25] <jneira[m]> we have! https://opencollective.com/haskell-language-server
[13:23:31] <jneira[m]> :-) 
[13:23:43] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 260 seconds)
[13:25:17] <jneira[m]> nevertheless afaiu the th issue is related with ghc and linking
[13:25:20] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:25:21] *** Joins: comandingo (~drever@2001:a61:3462:da01:7aec:4329:8eb0:7c56)
[13:25:43] <jneira[m]> will try to pest ghc maintainers about :-) 
[13:26:31] <kuribas> jneira[m]: I'll see how much I can contribute.
[13:28:15] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:28:16] <kuribas> hmm, maybe flycheck is expecting the exe libraries, but they aren't build...
[13:29:42] <kuribas> "cannot satisfy -package hspec"
[13:29:52] <kuribas> it shouldn't need that package, because it's only used for the exe, not the library.
[13:33:00] *** Quits: OscarH_ (~OscarH@90.201.86.195) (Ping timeout: 268 seconds)
[13:35:53] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[13:36:33] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:39:39] *** Joins: OscarH (~OscarH@90.201.86.195)
[13:40:03] *** Quits: xff0x (~xff0x@2001:1a81:525b:da00:3f7d:da8c:9e9b:e904) (Ping timeout: 260 seconds)
[13:40:46] *** Joins: xff0x (~xff0x@2001:1a81:525b:da00:1097:4d57:43e2:986f)
[13:43:04] <jneira[m]> iirc you were not using hls, right? not sure what is using emacs in that case
[13:43:26] <kuribas> it's using ghc or stack directly.
[13:43:29] <jneira[m]> i dont use it since quite time ago :-/ 
[13:43:47] <kuribas> And passing the package list explicitly to stack/cabal.
[13:44:02] <jneira[m]> you see what precise commands is it triggering to get the info from stack?
[13:44:07] <kuribas> likely something went wrong there, mixing the exe with the lib packages.
[13:44:23] <jneira[m]> ya, sounds probable
[13:44:42] <jneira[m]> jneira[m]: from any of the logs
[13:45:34] <jneira[m]> in that case i guess if you open only lib modules, the error is not triggered?
[13:45:47] <kuribas> no, this error is in a lib module.
[13:45:52] <kuribas> I have both a lib and a exe in my cabal.
[13:46:44] <jneira[m]> so commenting out the exe component will confirm somewhat the hypothesis
[13:48:15] <kuribas> actually, it's used in the tests.
[13:48:35] <jneira[m]> hmm
[13:48:52] <kuribas> hmm, maybe building the test will fetch the packages...
[13:48:57] <jneira[m]> ok, what about `stack build --enable-tests --no-un-tests`
[13:49:04] <jneira[m]> just that :-) 
[13:49:15] <jneira[m]> `--no-run-tests`
[13:49:43] <jneira[m]> you can put tests: true in your stack.yaml to have it by default with `stack build`
[13:50:41] <kuribas> If I am right, stack test should solve the problem, because if fetches the missing libs.
[13:51:05] *** Joins: mmhat (~mmh@55d4b856.access.ecotel.net)
[13:51:18] <jneira[m]> sorry it is `stack build --test --no-run-tests`
[13:51:21] <jneira[m]> the other one is for cabal
[13:51:42] <jneira[m]> i would put `test: true` (or `tests: true`) in the stack.yaml
[13:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[13:52:40] <kuribas> and.. it did!
[13:52:59] <jneira[m]> yeah, with hls there is the same problem
[13:53:14] <kuribas> So I changed one version in my stack.yaml, which caused other libs to be changed.
[13:53:49] <kuribas> Then flycheck-haskell just passes "all" modules to ghc, even the one from test which aren't needed by the lib, and not build.
[14:00:07] *** Quits: comandingo (~drever@2001:a61:3462:da01:7aec:4329:8eb0:7c56) (Ping timeout: 260 seconds)
[14:06:39] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[14:07:57] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[14:14:30] *** Joins: comandingo (~drever@2001:a61:3462:da01:1d3:8bd7:fc2b:56af)
[14:18:10] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[14:18:16] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[14:23:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:26:36] *** Joins: Cajun (~Cajun@user/cajun)
[14:28:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[14:30:54] *** Joins: alx741 (~alx741@186.178.109.79)
[14:33:59] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 264 seconds)
[14:38:58] *** Quits: whez (sid470288@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:40:03] *** Quits: mrckndt (~mrckndt@user/mrckndt) (Quit: mrckndt)
[14:40:25] *** Joins: mrckndt (~mrckndt@user/mrckndt)
[14:40:53] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[14:44:42] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[14:46:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:48:59] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 264 seconds)
[14:50:28] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[14:51:21] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[14:53:17] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[14:53:34] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[14:55:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[14:56:10] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[14:59:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 264 seconds)
[15:00:19] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[15:01:25] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 260 seconds)
[15:07:52] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[15:15:15] *** Joins: ubert (~Thunderbi@91.141.46.110.wireless.dyn.drei.com)
[15:16:24] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[15:16:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[15:16:56] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[15:17:23] *** Joins: Freyr (~Freyr@host109-158-44-114.range109-158.btcentralplus.com)
[15:17:40] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[15:18:48] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[15:21:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:29:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[15:31:53] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[15:33:29] <maerwald> stack runs configure of a package, even if it's marked as unbuildable?
[15:36:53] *** Quits: mbuf (~Shakthi@122.178.213.7) (Quit: Leaving)
[15:38:26] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[15:38:42] *** Joins: amk (~amk@109.255.169.126)
[15:38:54] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[15:39:14] *** Joins: alzgh (~alzgh@user/alzgh)
[15:40:46] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[15:41:04] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[15:45:58] <maerwald> or is this cabals fault for not allowing resolving the package without running Setup.hs?
[15:47:29] <geekosaur> cabal shouldn't require Setup.hs unless it's build-type: custom, and even then shouldn't run it if it's marked unbuildable
[15:48:27] <geekosaur> I could well imagine a setup involving windows-only packages on a windows platform but some other package (e.g. unix) on others, for example
[15:49:05] <maerwald> yes, that's what I have and it's running the unix configure script on windows
[15:49:17] <geekosaur> shouldn't be doing that at all
[15:49:28] <geekosaur> either stack or cabal
[15:49:29] <maerwald> afterwards it skips building it
[15:49:37] <maerwald> but it's problematic already
[15:50:49] *** Joins: alphabeta (~kilolympu@185.65.135.177)
[15:51:11] *** Quits: kilolympus (~kilolympu@185.65.135.177) (Ping timeout: 260 seconds)
[15:51:59] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[15:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[15:52:56] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[15:55:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 258 seconds)
[15:55:28] *** Joins: faultline (~christian@nat-eduroam-01.scc.kit.edu)
[15:55:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[15:56:04] *** Quits: comandingo (~drever@2001:a61:3462:da01:1d3:8bd7:fc2b:56af) (Ping timeout: 268 seconds)
[15:56:42] *** Joins: comandingo (~drever@2001:a61:3462:da01:22ed:63f7:5f22:784b)
[16:01:33] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[16:01:50] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[16:02:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[16:03:01] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:03:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:04:14] *** Joins: guniberas (~guniberas@42.191.188.121)
[16:07:10] <adamCS> when I read a text file via some interface using chunks,  what is an efficient way to get lines of text?  I'm trying to write a streamly unfold from a handle to a stream of lines ofd text.  As reference, I'm using hGetLine from Text. I want to see if reading chunks, converting to ByteString and then to Text will be faster.  But those chunks aren't lines, right? So how do I convert a stream of ByteString coming from chunks to
[16:07:10] <adamCS>  lines of Text? 
[16:08:40] <maerwald> adamCS: you use a Parser
[16:09:24] <adamCS> Ah. Which keeps some state as the stream goes and then emits lines of text as they happen?
[16:09:51] <maerwald> Parser has an optional internal state and a backtrack buffer
[16:10:49] <maerwald> something like https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Internal-Data-Parser.html#v:takeWhileP maybe
[16:11:28] <adamCS> maerwald: Thanks!  That makes sense.  I've never used that part of the interface.
[16:11:56] <maerwald> also note that there  are two parser types: direct style parser (ParserD) and CPS (ParserK)
[16:12:10] <maerwald> if you need monadic or alternative actions, you'll have to use ParserK 
[16:12:30] <maerwald> but ParserD has better inlining behavior (though with monads, performance degrades quadratic)
[16:12:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:14:28] <maerwald> https://streamly.composewell.com/haddocks/streamly-0.8.0/Streamly-Internal-Data-Parser-ParserD-Type.html
[16:14:50] <maerwald> and https://streamly.composewell.com/haddocks/streamly-0.8.0/Streamly-Internal-Data-Parser-ParserK-Type.html
[16:14:59] <adamCS> I don't, I don't think.  I just have Text (or ByteString) "chunks" and I want Text lines.  Preferably all still in Unfold form.  But I can let that go, I guess.
[16:15:23] <maerwald> that might work with ParserD then I guess
[16:19:20] <maerwald> Stream.parse (P.takeWhile (/= '\n') F.toList) $ Prelude.fromList "abcdef\n lol"
[16:19:31] <maerwald> yield "abcdef"
[16:20:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Remote host closed the connection)
[16:21:17] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[16:21:33] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[16:22:22] *** Joins: wonko (~wjc@62.115.229.50)
[16:22:53] <adamCS> Cool.  If you used "parseMany" there would you get both lines?
[16:23:05] *** Joins: neurocyte0132889 (~neurocyte@212.232.89.185)
[16:23:05] *** Quits: neurocyte0132889 (~neurocyte@212.232.89.185) (Changing host)
[16:23:05] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:25:17] *** Quits: wonko (~wjc@62.115.229.50) (Remote host closed the connection)
[16:25:24] *** Joins: a6a45081-2b83 (~aditya@pal-210-106-60.itap.purdue.edu)
[16:25:42] *** Joins: wonko (~wjc@62.115.229.50)
[16:25:56] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 245 seconds)
[16:26:13] <maerwald> that doesn't terminate for me
[16:26:38] *** Quits: wonko (~wjc@62.115.229.50) (Changing host)
[16:26:38] *** Joins: wonko (~wjc@user/wonko)
[16:28:44] <adamCS> The parser stuff is all so internal that it's hard, for me at least, to figure out.   But that might also just be because I don't understand parsers that well.
[16:29:52] <adamCS> I also wish that streamly--which I really like!--had a Text module, or something close, for doing exactly this.  It seems like a fairly common use-case, but maybe that's just me...
[16:38:12] *** Quits: wonko (~wjc@user/wonko) (Read error: Connection reset by peer)
[16:38:45] <maerwald> Stream.parse (P.many (P.takeWhile (/= '\n') F.toList <* next) F.toList) $ Prelude.fromList "abcdef\nlol"
[16:38:47] <maerwald> this works
[16:39:00] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[16:39:02] <maerwald> with: let next = (Just <$> P.satisfy (const True)) <|> pure Nothing
[16:39:20] <boxscape_> % let x :: Eq b => b; x = undefined in x `seq` ()
[16:39:20] <yahb> boxscape_: *** Exception: Prelude.undefined; CallStack (from HasCallStack):; error, called at libraries/base/GHC/Err.hs:75:14 in base:GHC.Err; undefined, called at <interactive>:167:25 in interactive:Ghci38
[16:39:20] <maerwald> there's a PR to add that function https://github.com/composewell/streamly/pull/1301
[16:39:39] <adamCS> huh.  Gonna have to stare at that for a bit. Thanks!
[16:39:43] <boxscape_> hm, I'm a bit surprised by that, I would have expected the constraint to result in seq only forcing x to be a lambda
[16:39:58] <maerwald> adamCS: we have to consume the '\n' afterwards, but we may also be at the end of input
[16:40:11] <maerwald> unfortunately, that causes us to use Alternative here
[16:40:35] <maerwald> the implementation in the PR doesn't use that
[16:40:40] <maerwald> so it may be more efficient
[16:41:10] *** Joins: max22- (~maxime@2a01cb08833598007c8a2cbd9d715d88.ipv6.abo.wanadoo.fr)
[16:41:20] <boxscape_> % let x :: forall b . Eq b => (b, Bool); x = (undefined, (undefined :: b) == undefined) in x `seq` ()
[16:41:20] <yahb> boxscape_: ()
[16:41:21] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:41:36] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[16:44:15] <boxscape_> % let x | !() <- undefined = x in 1
[16:44:16] <yahb> boxscape_: 1
[16:44:28] <boxscape_> I think I used to know why this doesn't crash... don't remember though :(
[16:45:23] <boxscape_> oh I'm not using x, sorry -.-
[16:45:41] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[16:47:43] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[16:48:26] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (Read error: Connection reset by peer)
[16:48:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[16:49:35] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 264 seconds)
[16:51:30] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[16:52:12] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:52:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[16:53:31] *** Joins: MQ-17J (~MQ-17J@8.6.144.240)
[16:55:35] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 246 seconds)
[16:56:50] <maerwald> adamCS: https://paste.tomsmeding.com/TP5Ub9Kh
[16:56:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[16:57:22] <adamCS> maerwald: Thanks!
[16:57:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[16:59:22] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[17:00:13] <maerwald> but parseMany is probably better, so we retain a stream and can then print per line
[17:00:23] <maerwald> that'll allow better benchmarking I guess
[17:00:28] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[17:01:21] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[17:01:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 260 seconds)
[17:06:58] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[17:10:50] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[17:12:16] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[17:17:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:21:54] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:22:41] <maerwald> adamCS: I just tested... and ParserD is indeed much faster here
[17:24:42] <maerwald> https://github.com/hasufell/parselines
[17:24:59] <maerwald> 2s on 100mb file with ParserD, 3.5s with ParserK
[17:25:22] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[17:25:47] <maerwald> now would be interesting to compare with attoparsec
[17:25:55] *** Quits: MQ-17J (~MQ-17J@8.6.144.240) (Ping timeout: 260 seconds)
[17:27:11] <maerwald> and from my understanding... if you use CPS style parsers, you'll need to parse in chunks, so `Parser m (Array Char) b` instead of `Parser m Char b`
[17:27:44] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[17:27:46] <maerwald> otherwise performance drops (which is probably happening here)
[17:32:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:32:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[17:33:16] *** Joins: hseg (~gesh@185.120.126.13)
[17:34:33] <hseg> Hi. happy-1.21.0 fails to build ('happy' required but not found) and it is a transitive dep of mine
[17:34:47] <hseg> can't find this discussed online though
[17:37:35] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[17:37:36] *** Joins: ubert1 (~Thunderbi@178.165.177.232.wireless.dyn.drei.com)
[17:38:18] <maerwald> attoparsec is indeed much faster
[17:38:31] *** Quits: ubert (~Thunderbi@91.141.46.110.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[17:38:32] *** ubert1 is now known as ubert
[17:40:05] <hseg> nm, downgrade to happy-1.20.0 works
[17:40:06] <adamCS> maerwald: is there a way I can use that for ```Streamly.Unfold m Handle (Streamly.Array Word8) -> Streamly.Unfold m Handle Text``` where that returned ```Unfold``` is lines?  
[17:40:09] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[17:40:37] <maerwald> you don't usually keep the unfold type for long, you just turn it into a stream
[17:40:47] <maerwald> I think it will be dropped in the next major release anyway
[17:41:18] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:42:45] <maerwald> turning `t m (Array Word8)` into `t m Word8` is possible though, but I don't remember the exact function
[17:42:48] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d76b9ac87bdf676c186.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[17:42:55] <maerwald> it'll also degrade performance potentially I think
[17:43:48] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[17:47:51] *** Quits: ubert (~Thunderbi@178.165.177.232.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[17:49:05] *** Quits: a6a45081-2b83 (~aditya@pal-210-106-60.itap.purdue.edu) (Remote host closed the connection)
[17:49:20] <adamCS> maerwald: Right.  What I'm ultimately trying to do is two things: 1. Generate a stream of Text lines from a (csv or tsv) text file that then get parsed by some user defined functions and then, likely, folded into efficient storage.  So for that I just want the most efficient possible ```FilePath -> t m Text``` where the resulting stream is lines. 
[17:50:12] *** Quits: Freyr (~Freyr@host109-158-44-114.range109-158.btcentralplus.com) (Quit: Connection closed)
[17:50:36] <adamCS> 2. Some versions of that are so common that i want to put the entire thing (file -> lines of Text -> haskell structures -> efficient container of haskell structure) in one function because I wonder if that will make fusion more likely and the entire operation faster. 
[17:51:29] <maerwald> sounds all pretty straight forward... my linked code already does most of that
[17:51:35] <maerwald> https://github.com/hasufell/parselines/blob/master/app/Main.hs
[17:51:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[17:52:13] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[17:52:18] <maerwald> to turn [Word8] into Text you just fmap
[17:52:37] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[17:52:48] <adamCS> It's for that 2nd version that I was trying to express things as an unfold.  Because in that version I'm going to have a user supplied scan do the (line of Text -> haskell structure) bit and I want to apply that scan to the output of the unfold or the input of the fold.  But It doesn't need to be all unfolds and fodsl, it just needs to fuse well.  
[17:52:59] *** Joins: johnjay (~pi@192.142.100.50)
[17:53:11] <johnjay> does anybody use haskell through homebrew on mac os?
[17:53:22] <johnjay> or is the shell script from haskell dot org preferable?
[17:53:31] <adamCS> maerwald: Right.  I'll just need to understand it and apply to my case.  Thanks!
[17:54:11] <maerwald> adamCS: (Text -> m Data) -> t m Text -> t m Data
[17:54:16] <maerwald> that's mapM
[17:54:48] <adamCS> maerwald: yes.  But it's actually a scan because it all depends on the first line, which is a header and needs processing and dropping.
[17:54:50] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:54:56] <maerwald> then you want a Parser
[17:55:10] <maerwald> `Parser m Text Data` I guess
[17:55:12] <adamCS> a Parser at the line of text level?
[17:55:16] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[17:55:31] <adamCS> The scan works fine.  Would parser be faster?
[17:55:33] <maerwald> and then you use the `next` function I supplied to read one line
[17:55:40] <maerwald> not sure
[17:56:01] <adamCS> It's that I need information from the header in the subsequent Text -> Data
[17:56:55] <adamCS> I originally used fromEffect but--just to complicate things!--I'm trying to write this in a way that works for Pipes as well.  I've abstracted some bits of those interfaces into a typeclass.
[17:57:07] <maerwald> is it truly monadic? As in: the current line decides the next step?
[17:57:21] <adamCS> The first line affects all the rest of the steps
[17:57:28] <adamCS> but only the first line
[17:57:37] *** Joins: jkaye (~jkaye@2601:281:8300:7530:66b0:89cb:9eb6:ddde)
[17:57:44] <maerwald> then just use uncons
[17:57:49] <maerwald> and keep the rest efficient
[17:57:50] <geekosaur> johnjay, we recommend ghcup on all systems. afaik brew will work but ghcup is easier and faster to update, plus you don't have to worry about versioning as much, you can have multiple versions installed and quickly switch with "ghcup set"
[17:57:54] <maerwald> https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Prelude.html#v:uncons
[17:59:25] <johnjay> i think brew just gave me stack. and it segfaults if i tell it to do anything
[18:00:26] <johnjay> i guess i have to guess the names of ghc and the other components and install them manually
[18:00:32] <johnjay> (new to macs so idk what i'm doing)
[18:00:34] <adamCS> Right.  I can't remember if there was a reason I didn't.  I think, roughly, that it had something to do with then needing Monad (t m) but I'm not sure.  Right now, I'm just trying to get the lines of Text thing efficient and then I can start testing the other bits.  The scan seems no slower than the fromEffect version which I'm guessing would be more similar to unCons
[18:00:48] <geekosaur> I saw ghc@8.10 and ghc@9 (avoid the latter, it's buggy)
[18:01:07] <geekosaur> if you're on an M1, make sure you get 8.10.7
[18:01:25] <johnjay> 8.10 is the default
[18:01:35] <johnjay> yes i'm on an Emm Won
[18:01:38] <maerwald> adamCS: the other possibility would be to parse the first line of the file twice
[18:01:40] <johnjay> it's nice so far.
[18:01:46] <johnjay> but i want to run the haskell
[18:01:48] <johnjay> on the arm
[18:01:56] <maerwald> and then decide what you do with the entire file
[18:03:15] *** Quits: ikex (~ash@user/ikex) (Ping timeout: 260 seconds)
[18:03:17] *** Joins: zebrag (~chris@user/zebrag)
[18:03:34] <maerwald> adamCS: https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Prelude.html#v:head
[18:03:45] <maerwald> this *terminates* the stream
[18:04:16] <adamCS> maerwald: Back to Text for a sec: in the streamly gitter/matrix channel, readChunks was suggested but your example uses read.  Even at this level I'm just sort of confused about how to choose.
[18:04:40] <maerwald> read is inefficient yeah
[18:05:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[18:05:33] <adamCS> so do I readChunks and then concat?  Or parse within chunks?  This is why some efficient version of this would be so useful if it were already in streamly...
[18:05:34] <maerwald> But if you do readChunks, you'll have to deal with Array forever
[18:05:49] <maerwald> I think otherwise it's degrading performance
[18:06:35] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:06:53] <maerwald> I'm also not sure how this all plays along with the different stream types... `read` does IO requests in chunk size too
[18:07:01] <maerwald> just your loop will be smaller afaiu
[18:07:24] <adamCS> I guess I'll just try some things...
[18:07:32] <maerwald> and from what I gathered a small loop is fine if you have ParserD/StreamD or so?
[18:07:43] <maerwald> But I do remember that implementing file copying with `read` was way too slow
[18:08:16] <adamCS> And I don't get how to make sure things are StreamD where that is possible.  But mostly streamly should just get that right?
[18:08:25] <maerwald> :D
[18:08:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:08:52] <maerwald> I'd say it always needs experiments... if you want something stable, go for conduit
[18:09:08] <maerwald> but conduit will also never surprise you with crazy high performance
[18:09:19] <adamCS> there is always flattenArrays :: Stream m (Array a) -> Stream m a
[18:09:38] <maerwald> right, but I'd be surprised if that doesn't kill your performance
[18:09:48] <adamCS> ugh
[18:09:55] <maerwald> because now your hot loop is over `a`, not over chunks
[18:10:14] <adamCS> but don't I need it to be for the Parsing to lines?
[18:10:33] <adamCS> Because I don't know where the line boundaries fall in the chunks?
[18:11:40] <adamCS> I think I'm misunderstanding since if I use read, the loop is also over a, right?  So what do you mean by "hot loop" here?
[18:11:41] <maerwald> I think `Parser m (Array Word) (Array Word)` would be the right efficient type... and then you turn it into a stream and there you can  (Array Word -> Text)
[18:12:28] <adamCS> Where that parser takes undifferentiated chunks and spits out one array per line?
[18:13:06] <maerwald> the parser stops after having read one line yeah, then you use parseMany and get [Array Word]
[18:13:36] <maerwald> but at this point I'm really not sure what's the most efficient thing
[18:13:52] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[18:14:03] *** Joins: amk (~amk@109.255.169.126)
[18:14:16] <adamCS> but the streamly version so Stream (Array Word)?
[18:14:59] <maerwald> yeah, a stream of lines
[18:15:38] <maerwald> I think there's no zero-cost `flattenArrays`
[18:15:41] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 264 seconds)
[18:20:22] <dmj`> anyone know an example of a defunctionalization pass implemented in haskell on a lambda calculus expr? 
[18:26:56] *** Quits: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr) (Quit: WeeChat 2.8)
[18:27:03] <adamCS> maerwald: Thanks for all the help!  I'm going to try a few things and see if I can understand the parsing bit better by doing.  I'll report back if anything jumps out.
[18:27:32] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:29:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:30:04] *** Joins: MQ-17J (~MQ-17J@35.50.77.148)
[18:30:29] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:33:32] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[18:34:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[18:41:37] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[18:44:23] <johnjay> well i don't know how to get out of ghci but ctrl-D always does the job
[18:44:39] <johnjay> is there some way to change the install dir of ghcup or whatever it's called?
[18:44:48] <maerwald> johnjay: yes
[18:45:03] <maerwald> https://www.haskell.org/ghcup/guide/#env-variables
[18:46:18] <johnjay> also i didn't get hls, the lsp thing. can i rerun the installer?
[18:46:21] *** Quits: max22- (~maxime@2a01cb08833598007c8a2cbd9d715d88.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:46:26] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:46:59] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[18:48:02] *** Joins: thyriaen (~thyriaen@dynamic-089-012-077-123.89.12.pool.telefonica.de)
[18:48:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:48:55] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 260 seconds)
[18:49:35] <maerwald> johnjay: ghcup install hls
[18:50:35] <johnjay> oh i see ghcup is in ~/.ghcup/bin
[18:50:42] <geekosaur> there's also "ghcup tui" for a nice terminal-based ui for installing, uninstalling, and activating various versions of things
[18:51:32] <johnjay> ok i was confused. it seems everything is in that dir. but cabal has its own dir for some reason
[18:52:42] <c_wraith> "ghcup tui" isn't very good at upgrading ghcup
[18:53:11] *** Quits: hseg (~gesh@185.120.126.13) (Ping timeout: 264 seconds)
[18:53:24] <maerwald> c_wraith: you mean it doesn't re-exec itself?
[18:53:51] <johnjay> so if i do ghcup install cabal then install hls, then install ghc I'm good?
[18:53:57] <johnjay> or did the wizard thing do anything else
[18:54:03] <c_wraith> it doesn't need to do that.  It just should say "please restart" or something
[18:54:07] <johnjay> i just want everything in $HOME/.local
[18:54:19] <c_wraith> instead of dropping back to a UI that shows the exact same thing as before you ran it
[18:54:21] <maerwald> johnjay: https://www.haskell.org/ghcup/guide/#xdg-support
[18:54:28] *** Joins: hseg (~gesh@185.120.126.13)
[18:54:29] <johnjay> yes i'm reading it.
[18:54:39] <johnjay> that's why i'm asking
[18:55:00] <maerwald> generally, it's better to keep things in ~/.ghcup
[18:56:21] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 268 seconds)
[18:56:56] <johnjay> that's probably a good point. i'll keep it that way until i know enough to put it in .local
[18:57:20] <johnjay> i guess ghcup gets put in .ghcup no matter what though
[18:57:43] <maerwald> if you enable xdg support, it gets put in ~/.local/bin
[18:57:54] *** Joins: Shaeto (~Shaeto@94.25.234.118)
[18:58:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:58:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[19:00:32] <johnjay> can i just delete .ghcup in that case?
[19:00:40] <johnjay> it looks like that gets created no matter what you choose
[19:00:49] <maerwald> johnjay: I guess
[19:01:16] <johnjay> well yeah. you've probably used this setup for years or something
[19:01:24] <johnjay> so anything weird looks totally normal to you. it's the curse of expertise
[19:01:41] <johnjay> i think i've got a good setup though thanks
[19:02:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 245 seconds)
[19:02:49] *** Quits: Shaeto (~Shaeto@94.25.234.118) (Quit: WeeChat 3.3)
[19:06:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[19:07:00] *** Quits: taeaad_ (~taeaad@user/taeaad) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:09:15] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:09:42] *** Joins: taeaad (~taeaad@user/taeaad)
[19:11:11] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[19:11:19] *** Parts: taeaad (~taeaad@user/taeaad) ()
[19:13:47] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[19:14:28] <awpr> kuribas: https://hackage.haskell.org/package/ten-0.1.0.2/docs/Data-Ten-Sigma.html#t::-42--42- is the closest I know how to get to a dependent pair in Haskell
[19:19:14] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[19:22:18] *** Joins: canxiu (uid524910@id-524910.helmsley.irccloud.com)
[19:23:29] *** Quits: MQ-17J (~MQ-17J@35.50.77.148) (Ping timeout: 264 seconds)
[19:24:44] <adamCS> maerwald:  I've tried a few versions of the parser thing, and all are much and more memory intensive slower than just using Text.hGetLine. In case the slowness was conversion of [Word8] to Text, I tried a few things there including using text-builder to build Streamly.Fold Word8 Text.  But that was no faster. I haven't tried the readChunk thing because I don't know how to write the Parser (Array Word8) (Array Word8).  But
[19:24:44] <adamCS>  maybe I'll try to figure it out another time.
[19:25:04] <adamCS> s/much and/much slower and/
[19:25:33] <maerwald> I'm trying this https://paste.tomsmeding.com/CSZeeXVc
[19:25:36] <maerwald> but it doesn't terminate
[19:25:54] <maerwald> the Step type is underdocumented imo
[19:26:05] <maerwald> https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Internal-Data-Parser-ParserD.html#t:Step
[19:26:48] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:26:54] <maerwald> the idea here is that is scans the input, asks for the next chunk if it doesn't find a newline and generally never scans the same chunk twice
[19:27:52] <adamCS> right.  But you also have to retain the remainder of the chunk somehow?
[19:28:12] *** Joins: MQ-17J (~MQ-17J@2607:fb90:1d96:c9d1:ba5a:1a8b:ade4:a330)
[19:29:04] <maerwald> that's done in the parser state
[19:29:22] <maerwald> the parser state holds at most one line
[19:31:09] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[19:31:38] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[19:31:58] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[19:32:19] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Quit: leaving)
[19:32:26] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[19:32:34] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:39:41] *** Quits: fendor_ (~fendor@178.165.166.121.wireless.dyn.drei.com) (Remote host closed the connection)
[19:41:28] *** Joins: fendor (~fendor@178.165.166.121.wireless.dyn.drei.com)
[19:41:40] <adamCS> maerwald: huh.  That looks like it makes sense.  Is there a +/- issue with the lf itself?
[19:42:01] <maerwald> a what?
[19:42:18] *** Joins: sedeki (~textual@user/sedeki)
[19:42:24] <adamCS> Like where does the lf itself get removed?  Is it in the prefix or the suffix?
[19:42:56] <maerwald> it's removed
[19:43:28] <adamCS> Ah. I see.  Just looked it up. Sorry.
[19:43:34] *** Parts: sedeki (~textual@user/sedeki) ()
[19:45:42] <adamCS> Does that not terminate even parsing one line or just when you try parseMany?
[19:45:48] <maerwald> I think it's because `count` in Done is about the elements, not the bytes
[19:45:57] <maerwald> and an element is an input chunk
[19:46:08] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[19:46:41] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:47:47] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 264 seconds)
[19:47:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:48:02] <adamCS> Do you somehow need to use the state to keep the partial chunk?
[19:49:43] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:50:04] *** Quits: MQ-17J (~MQ-17J@2607:fb90:1d96:c9d1:ba5a:1a8b:ade4:a330) (Read error: Connection reset by peer)
[19:50:24] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[19:50:47] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[19:52:36] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 245 seconds)
[19:52:42] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[19:52:52] *** Quits: jkaye (~jkaye@2601:281:8300:7530:66b0:89cb:9eb6:ddde) (Ping timeout: 268 seconds)
[19:53:00] *** Quits: thyriaen (~thyriaen@dynamic-089-012-077-123.89.12.pool.telefonica.de) (Quit: Leaving)
[19:53:02] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[19:54:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:56:11] *** Quits: chele (~chele@user/chele) (Ping timeout: 260 seconds)
[19:56:12] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[19:56:19] *** Joins: wolfshappen (~waff@irc.furworks.de)
[19:56:29] *** Joins: Pickchea (~private@user/pickchea)
[19:57:13] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[19:58:42] *** Joins: Skyfire (~pyon@user/pyon)
[19:59:22] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:02:28] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:02:47] *** Joins: alzgh (~alzgh@user/alzgh)
[20:03:53] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[20:06:09] <maerwald> I think it's just not expressive enough
[20:06:30] <maerwald> would need something like https://hackage.haskell.org/package/megaparsec-9.2.0/docs/Text-Megaparsec.html#v:setInput
[20:06:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[20:09:44] *** Quits: comandingo (~drever@2001:a61:3462:da01:22ed:63f7:5f22:784b) (Ping timeout: 268 seconds)
[20:10:00] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:11:20] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:11:31] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 265 seconds)
[20:12:13] *** Joins: wolfshappen (~waff@irc.furworks.de)
[20:13:20] <adamCS> Yeah.  I'm fiddling with a variant that breaks at all the lf and then keeps the remainder as well as the accumulated lines in the state.  But I'm too hazy on the details to thikn it'll work.
[20:15:46] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[20:22:13] <adamCS> I think mine is just a fold, actually.  Where the fold state accumulates the lines and whatever is left after breaking from the previous chunk.
[20:22:38] <maerwald> https://hackage.haskell.org/package/streamly-0.8.0/docs/src/Streamly.Internal.Data.Parser.ParserD.Type.html#splitMany
[20:22:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:22:42] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:22:44] <maerwald> it could be done similar to that maybe
[20:22:55] <maerwald> but that's a lot of mutual recursion
[20:23:37] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[20:25:32] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[20:27:09] <maerwald> but I think my broken Array version is on the right tracks... Arrays breakOn translates to C's memchr
[20:28:09] <maerwald> that will be as fast as this blog post suggests https://chrisdone.com/posts/fast-haskell-c-parsing-xml/
[20:28:21] <maerwald> which abuses bytestring functions that use memchr under the hood
[20:28:28] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[20:28:31] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[20:28:39] <adamCS> yeah.  I'm trying to do something using breakOn to get a list of "lines" and a remainder, accumulate the list and then add the remainder when the next chunk comes.  Might not be a fold because of the termination.  But it's not parsing one at a time, it'll parse the entire list of lines in one parse. I think.
[20:29:56] <adamCS> That is, I have type "ParserD.Parser m (FArray.Array Word8) ([FArray.Array Word8])"
[20:30:08] <adamCS> though I am suspicious of list there but that's for later
[20:31:03] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[20:31:40] <maerwald> but that way you never get an actual stream of lines
[20:31:57] <maerwald> you'll accumulate the result in memory
[20:32:04] <maerwald> when you do the final parse
[20:32:20] <adamCS> Ah.  Yes.
[20:32:26] <segfaultfizzbuzz> for a pure nonstrict functional programming language like haskell, is there a reasonably succinct way to understand what the most essential barriers are to becoming a competitive systems programming language?
[20:32:39] <segfaultfizzbuzz> or is it thousands of papercut reasons all compounded
[20:32:39] <maerwald> segfaultfizzbuzz: good streaming :D
[20:32:53] <maerwald> unpredictable performance
[20:32:57] <segfaultfizzbuzz> maerwald: care to elaborate?
[20:32:59] <maerwald> shitty exceptions
[20:33:03] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:33:30] <segfaultfizzbuzz> care to elaborate on "good streaming" i mean?
[20:33:48] <maerwald> there's 2 hours of scrollback on that :D
[20:36:37] <adamCS> maerwald: Maybe a stream of [Array Word8]?  for each chunk we emit as many lines as are present and put the remainder in the state.  add that to the next chunk and on we go?
[20:37:57] <maerwald> look... in C this would maybe be 100 lines of code with your own for loops
[20:38:10] <maerwald> it would take 15 minutes to write and 35 minutes to fix the memory errors you wrote
[20:38:58] <maerwald> maybe just write it in C and use FFI :p
[20:41:00] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:41:19] *** Joins: alzgh (~alzgh@user/alzgh)
[20:43:50] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[20:46:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:49:03] <maerwald> https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Internal-Data-Stream-IsStream-Reduce.html#v:foldIterateM
[20:49:08] <maerwald> this would be another way to express it
[20:49:11] <adamCS> Ugh.  My thing won't work either because it has to run until a line boundary falls at the end of a chunk.
[20:49:17] *** Quits: alphabeta (~kilolympu@185.65.135.177) (Quit: Quitting IRC :()
[20:49:31] *** Joins: kilolympus (~kilolympu@185.65.135.177)
[20:49:44] <adamCS> hmm
[20:49:51] *** Joins: chisui (~chisui@200116b868022000576721b474df9c55.dip.versatel-1u1.de)
[20:50:15] <johnjay> maerwald: write something in C over haskell??
[20:50:17] <adamCS> That looks simpler and more promising.
[20:50:27] <dminuoso> maerwald: And the creeping 9.6 CVE with full code exploitation because you allow for stack smashing via user input is not fixed until 7 years later.
[20:50:48] <maerwald> yeah... I'm sure haskell-tls has no vulnerabilities
[20:50:50] <maerwald> :D
[20:51:03] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:258f:7b54:f932:b719)
[20:51:34] <dminuoso> Im just saying that your characterization of "35 minutes to fix the memory errors you wrote" is naive.
[20:51:49] <dminuoso> The reality in C is, as soon as you have a pointer, chances are you still have memory bugs lurking around.
[20:51:51] <maerwald> adamCS: this one also caught my eyes: https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Internal-Data-Fold.html#v:runStep
[20:52:03] <maerwald> and the concatMap above
[20:53:01] *** Joins: econo (uid147250@user/econo)
[20:53:14] *** Quits: faultline (~christian@nat-eduroam-01.scc.kit.edu) (Ping timeout: 246 seconds)
[20:55:29] <maerwald> but my intuition tells me... there should be a way to abstract away the "parsing over elements" vs "parsing over chunks of elements"
[20:55:55] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[20:56:01] <maerwald> it's ludicrous to do it manually
[20:58:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[20:59:59] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:00:08] *** Joins: markusde (~makrus@206.12.14.106)
[21:01:01] <markusde> Simple question- I'm trying to use the LiberalTypeSynonyms langauge extension but stack repl keeps telling me that it's an "unrecognized pragma"
[21:01:04] <markusde> Any ideas?
[21:01:33] <dminuoso> markusde: You probably typed LANGAUGE instead of LANGUAGE
[21:01:36] <dminuoso> :>
[21:02:06] <dminuoso> markusde: Try and share your code exactly
[21:02:32] <markusde> dminuoso: wow, that's it lmao
[21:02:36] <markusde> tyty
[21:02:52] <markusde> english is hard
[21:02:56] *** Quits: markusde (~makrus@206.12.14.106) (Client Quit)
[21:05:08] <shapr> I do that all the time and American was my first langauge :-)
[21:06:25] <dsal> haha.  Yeah.   It's the one I mess up the most.
[21:08:32] <manicennui> British English has better slang.
[21:12:43] <Vq> shapr: You got too many languages in that skull of yours :P
[21:13:51] <shapr> Vq: du också!
[21:13:56] * shapr hugs Vq 
[21:14:11] *** Quits: hseg (~gesh@185.120.126.13) (Ping timeout: 264 seconds)
[21:14:25] <Vq> 2½ at most
[21:15:23] <Vq> I often get confused with words that are just a single letter off between two languages.
[21:15:38] <shapr> oh yeah, my brain decided "adress" is the permanent correct spelling after I learned Swedish.
[21:15:51] <shapr> so I *always* spell that incorrectly in English
[21:15:57] <Vq> Like "parallel" vs "parallell" or "address" vs "adress".
[21:15:58] *** Joins: hseg (~gesh@185.120.126.13)
[21:16:51] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:17:28] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 258 seconds)
[21:17:32] <shapr> Vq: are you writing Haskell at work these days?
[21:17:45] <Vq> Not much :(
[21:23:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:24:51] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[21:25:40] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[21:27:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Remote host closed the connection)
[21:28:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[21:32:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[21:32:47] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[21:35:07] *** Joins: ubert (~Thunderbi@178.115.57.1.wireless.dyn.drei.com)
[21:43:06] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:49:36] <dsal> shapr: one of my grandparents used to say, "if that don't spell adress, what does it spell?"  (sounds better out loud, I guess)
[21:50:26] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[21:51:34] <geekosaur> there's also the question of how you pronounce it
[21:52:33] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[21:54:07] *** Quits: ulvarrefr (~user@185.24.53.152) (Ping timeout: 244 seconds)
[21:54:24] * Vq doesn't get it
[21:55:49] <geekosaur> AD-ress vs. ad-RESS
[21:56:35] <geekosaur> not sure if one's supposed to be the noun vs. the verb, but I hear them used pretty interchangeably (and probably regionally)
[21:57:24] <geekosaur> but that would in particular affect how people are inclined to spell it
[22:00:01] <geekosaur> (also in the second one the a is schwa-d)
[22:00:12] *** Joins: ulvarrefr (~user@185.24.53.152)
[22:01:13] *** Quits: noctux (~noctux@user/noctux) (Read error: Connection reset by peer)
[22:01:44] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[22:03:05] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:03:44] *** Joins: noctux (~noctux@user/noctux)
[22:05:14] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[22:05:57] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[22:09:13] *** Quits: dwt__ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 258 seconds)
[22:09:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 246 seconds)
[22:14:09] <dsal> I can never remember how to use `seq`.  But I can remember how to turn on BangPatterns, so I'm going to do that instead.
[22:14:26] <dsal> Actually, no, I think I need seq here.
[22:17:45] *** Quits: hseg (~gesh@185.120.126.13) (Ping timeout: 260 seconds)
[22:18:20] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[22:18:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:23:16] *** Joins: cfricke (~cfricke@user/cfricke)
[22:24:02] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[22:26:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:27:23] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:28:47] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[22:29:27] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:31:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:32:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:33:38] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[22:34:48] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:35:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[22:36:01] *** Quits: chisui (~chisui@200116b868022000576721b474df9c55.dip.versatel-1u1.de) (Ping timeout: 256 seconds)
[22:36:23] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 264 seconds)
[22:37:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[22:37:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[22:38:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[22:41:32] *** Joins: Guest57 (~Guest57@73.115.242.32)
[22:42:56] *** Quits: Guest57 (~Guest57@73.115.242.32) (Client Quit)
[22:43:36] <maerwald> adamCS: I got a much faster implementation. It's a little slower than attoparsec, but not by much
[22:43:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 245 seconds)
[22:44:14] *** Quits: sagax (~sagax_nb@user/sagax) (Remote host closed the connection)
[22:44:44] <maerwald> 100mb file 1ms streamly, 0.8s attoparsec
[22:44:59] <maerwald> s/ms/s/
[22:45:10] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 260 seconds)
[22:45:14] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[22:47:53] <maerwald> https://paste.tomsmeding.com/05JvJGWz
[22:52:04] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:53:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:55:49] <maerwald> hah! if we express this as a Fold, we're faster than attoparsec
[22:58:49] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:00:12] *** Quits: jespada (~jespada@181.28.253.200) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:03:03] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[23:11:40] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[23:19:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[23:19:30] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[23:22:06] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[23:22:27] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[23:23:25] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[23:26:29] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d76b9ac87bdf676c186.dip0.t-ipconnect.de)
[23:35:29] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 265 seconds)
[23:37:12] *** Joins: juhp (~juhp@128.106.188.220)
[23:44:05] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[23:44:35] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[23:50:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[23:50:43] *** Joins: sky_lounge[m] (~skylounge@2001:470:69fc:105::efa6)
[23:52:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:53:51] *** Joins: cheater (~Username@user/cheater)
[23:55:07] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[23:59:41] *** Joins: aegon (~mike@174.127.249.180)
