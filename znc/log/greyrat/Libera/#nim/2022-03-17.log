[00:04:09] *** Joins: rawrrr (uid540880@id-540880.lymington.irccloud.com)
[00:18:01] *** Quits: cyraxjoe (~joe@2806:109f:13:9477::2000) (Ping timeout: 250 seconds)
[00:20:04] *** Joins: cyraxjoe (~joe@2806:109f:13:946e:78fa:40c0:4b32:7e93)
[00:21:07] *** Quits: kenran (~kenran@200116b82b1f7700d4eceb26990aed28.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[00:28:58] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[00:34:06] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[00:37:13] *** Quits: daanb (~daanb@user/daanb) (Quit: Leaving)
[00:37:17] *** Joins: xet7 (~xet7@user/xet7)
[00:44:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:46:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1)
[00:57:59] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[01:02:32] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[01:08:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:17:51] <FromDiscord> <whee> sent a long message, see http://ix.io/3SAL
[01:19:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:38] <FromDiscord> <Elegantbeef> Those are words, yes. Wish i understood what any of it meant ðŸ˜›
[01:21:01] <FromDiscord> <Elegantbeef> One day i should play around with databases just to answer these questions
[01:23:28] <FromDiscord> <whee> In reply to @Elegantbeef "One day i should": you were my only hope! ðŸ˜„
[01:23:58] <FromDiscord> <Elegantbeef> I'm a pretend game dev, I dont use databases
[01:26:41] *** Joins: lungaro (~sig@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[01:27:38] <FromDiscord> <whee> I have a lot of random data manipulations that outgrow sq + miller and other CLI tools, so I'm trying out nim. It seems like it would be more reliable and easier to extend
[01:28:41] <FromDiscord> <Elegantbeef> I'm sure you'll eventually get your answer, just gotta cross your fingers and hope someone that knows what you're talking about is on ðŸ˜›
[01:37:05] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[02:02:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[02:50:53] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Read error: Connection reset by peer)
[02:51:07] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[03:05:53] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[03:51:47] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 252 seconds)
[04:05:05] <FromDiscord> <Girvo> In reply to @soda "i havent programmed in": Same lol. To the point where we've ditched our existing (shit) C++ firmware for a new Nim-based one
[04:05:33] <FromDiscord> <Elegantbeef> Any compiler bugs so far girvo?
[04:06:16] *** Joins: xet7 (~xet7@user/xet7)
[04:13:32] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 240 seconds)
[04:14:50] *** Joins: xet7 (~xet7@user/xet7)
[04:23:32] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 240 seconds)
[04:26:39] <FromDiscord> <Girvo> Nothing so far!
[04:26:58] <FromDiscord> <Girvo> Running stable v1.6.4 at the moment. Any bug I've run into has been my own fault or a misconfig on my end
[05:14:23] <FromDiscord> <Girvo> One thing I want to take a crack at, is seeing if I can get Nim code running on the FreeRTOS windows port. Would be nice to be able to simulate some of our code. Dunno how thats going to go mind you
[05:23:33] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:37:05] <FromDiscord> <exelotl> In reply to @whee "using db_odbc (so no": Yeah pretty much. I guess you want something like https://github.com/treeform/tabby but for DB results instead of CSV rows? That's starting to smell a lot like an ORM  :P
[05:45:54] <FromDiscord> <congusbongus> maybe https://github.com/bluenote10/NimData which is pandas-like
[05:50:46] <FromDiscord> <exelotl> To roll it yourself I think you can't do it with just a template, you need a macro that takes a typedesc and generates the appropriate code to convert each field (`parseInt`, `parseFloat`, etc.)
[06:20:15] <FromDiscord> <whee> In reply to @exelotl "Yeah pretty much. I": It's kinda like an ORM, but not as heavy. What I really want is what db_sqlite/db_mysql/db_postgres do with DbColumns, but it's not available with db_odbc (probably because every database's implementation is unique and ODBC is more generic)
[06:30:41] <FromDiscord> <whee> I'll check these two repos out, though, I bet there's something in there that will give me ideas
[07:24:11] <FromDiscord> <Girvo> Like a Data Mapper?
[07:53:21] <FromDiscord> <soda> In reply to @Girvo "Same lol. To the": Nah C++ still has it's supremacy unfortunately and I'm sure i will code in it again, though maybe if in the future nim can produce smaller binaries and have a simpler memory mngmt model. then it could really replace it.
[07:53:52] <FromDiscord> <Elegantbeef> Is arc/orc not a simple memory management model?
[07:55:03] <FromDiscord> <soda> i really just want to be able to allocate and free memory on my own
[07:55:09] <FromDiscord> <Elegantbeef> You can
[07:55:15] <FromDiscord> <Girvo> You totally can, and I am right now ðŸ˜„
[07:55:20] <FromDiscord> <soda> i was told i can't here
[07:55:50] <FromDiscord> <Girvo> Combined with ARC its quite nice actually. I control the memory for the things that I _really_ need to in the embedded space, but ARC handles everything thats less important or more transient
[07:55:56] <FromDiscord> <Elegantbeef> You can allocate and free your own memory, just `ref`, `string`, `seq` do not have easy means of freeing
[07:56:07] <FromDiscord> <soda> yeah
[07:56:09] <FromDiscord> <soda> was told that too
[07:56:22] <FromDiscord> <soda> and they should
[07:56:35] <FromDiscord> <Girvo> For my part though, the only time I'm managing memory directly is because I'm crossing the boundary over to C/C++ libraries
[07:56:55] <FromDiscord> <Elegantbeef> Yea arc is very efficient so i dont really see the point in making those manually managable
[07:57:22] <FromDiscord> <Girvo> I mean I wouldn't be opposed to being able to, in some manner, but I certainly haven't need to so far and thats in the embedded space
[07:57:42] <FromDiscord> <Elegantbeef> For references you can do `GcRef` and `GcUnref`
[07:57:58] <FromDiscord> <Elegantbeef> Oh same for string/seq
[07:58:05] <FromDiscord> <Elegantbeef> So there you go you can manually manage them
[07:58:06] <FromDiscord> <Girvo> Yeah, some of the "embedded Nim" stuff does that
[07:58:45] <FromDiscord> <soda> the inclusion of gc makes the binary larger than what i'd need at work for eg
[07:58:56] <FromDiscord> <Elegantbeef> Arc doesnt include a GC
[07:59:04] <FromDiscord> <Elegantbeef> It's all move semantics
[07:59:12] <FromDiscord> <Girvo> Its reference counting now, with very little space needed for it
[07:59:19] <FromDiscord> <Elegantbeef> Just like RAII
[07:59:36] <FromDiscord> <Girvo> ^ so much so that binding C++ libraries is a lot nicer now, in my experience
[07:59:39] <FromDiscord> <soda> yeah i know that one doesn't
[07:59:45] <FromDiscord> <soda> In reply to @Girvo "^ so much so": yeah for sure
[07:59:54] <FromDiscord> <Girvo> Used to be really painful lol
[07:59:55] <FromDiscord> <soda> the syntax sugar approach to C++ is really nice
[08:00:05] <FromDiscord> <soda> (edit) "C++" => "object orientation"
[08:00:32] <FromDiscord> <soda> (edit) "doesn't" => "doesn't. there are other reasons too."
[08:00:58] <FromDiscord> <Girvo> Interestingly, using Nim with ARC has lead to _less_ memory usage than our existing C++ firmware, though thats confounded by the sheer crappiness of the original firmwares code lol
[08:02:16] <FromDiscord> <Girvo> @ElegantBeef I haven't used it: does GcUnref immediately free, or will it free when the scope ends?
[08:02:28] <FromDiscord> <Elegantbeef> It abides by the GC mechanism
[08:02:44] <FromDiscord> <Girvo> Alrighty
[08:04:47] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3SBQ
[08:04:59] <FromDiscord> <Girvo> Though its wrong, coz it's missing the GC_Ref needed
[08:05:06] <FromDiscord> <Elegantbeef> Yea something like that
[08:05:17] <FromDiscord> <Elegantbeef> Though i was more talking about using `ref`  instead
[08:05:47] <FromDiscord> <Girvo> Oh yeah haha, sorry I'm down in C land right now. This looks like I might be able to remove some of the C code I've had to write and move it to Nim even easier
[08:06:03] <FromDiscord> <soda> hmm
[08:06:16] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/czm
[08:06:19] <FromDiscord> <Elegantbeef> Lol element didnt liike that
[08:06:27] <FromDiscord> <Girvo> hahaha
[08:06:30] <FromDiscord> <Girvo> But yeah I get it
[08:06:51] <FromDiscord> <soda> is there documentation for how gcfree works with arc?
[08:06:54] <FromDiscord> <Girvo> I'm gonna have a look at the output and play, but yeah this looks super handy for some of the global-ish bits that I need to pass to ESP-IDF lol
[08:06:55] <FromDiscord> <Elegantbeef> This gives you that `malloc` like behaviour but with "safe" mechanism
[08:06:59] <FromDiscord> <Girvo> Yeah!
[08:07:04] <FromDiscord> <Girvo> (edit) "Yeah!" => "Yeah, nice!"
[08:07:10] <FromDiscord> <Elegantbeef> It decrements the reference counter and it's killed at end of scope just like normal
[08:07:55] <FromDiscord> <Elegantbeef> `GcRef` and `GcUnref` just decrement the reference  counting mechanism and allow a collection of the memory after it
[08:08:20] <FromDiscord> <Girvo> Yeah. So its just scope-based then once the ref count is 0. Nice
[08:08:35] <FromDiscord> <Elegantbeef> Valgrind can ensure this
[08:09:09] <FromDiscord> <Girvo> Nice
[08:09:28] <FromDiscord> <Elegantbeef> Well it can show if it leaks(just use `-d:useMalloc`)
[08:09:53] <FromDiscord> <Girvo> In reply to @soda "is there documentation for": Not that I'm directly aware of. Most docs are around the more "vanilla" ways of programming Nim in my experience, though ARC itself is pretty conceptually simple, at least in practice anyway
[08:10:53] <FromDiscord> <soda> i need malloc(). free() and --gc:none
[08:10:54] <FromDiscord> <soda> ðŸ˜‚
[08:10:59] <FromDiscord> <soda> (edit) "malloc()." => "malloc(),"
[08:11:44] <FromDiscord> <Girvo> I mean those exist haha ðŸ™‚ You can absolutely write Nim as if it's a syntax-over-C basically. I did that ages ago writing some software for my Pebble smart watch
[08:11:59] <FromDiscord> <soda> yeah
[08:12:01] <FromDiscord> <Girvo> You do have to give up quite a bit of Nim's standard library though
[08:12:13] <FromDiscord> <Girvo> It very much ends up feeling like a different C syntax, including its lack-of-standard-library lol
[08:12:22] <FromDiscord> <soda> i have not spent a lot of time on this yet
[08:12:27] <FromDiscord> <soda> i might over the weekend
[08:13:01] <FromDiscord> <Girvo> Have a play! Inspecting the C output (esp. with `-d:danger`) is enlightening for this stuff too, I've found
[08:13:14] <FromDiscord> <soda> nice
[08:14:00] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/pIb
[08:14:30] <FromDiscord> <Elegantbeef> with `-d:freeIt` all memory is freed, but without it we leak obviously
[08:14:40] <FromDiscord> <Girvo> ooooh interesting
[08:15:09] <FromDiscord> <Elegantbeef> So you can use `ref` and `GcRef` similarly to `malloc`
[08:15:29] <FromDiscord> <Elegantbeef> And since the data for the GC is written next to the heap allocation you can pass it as a pointer to C and nothing bad happens
[08:15:51] <FromDiscord> <Girvo> Hell yeah. My task list has acquired a new to-do item lol. Defintely going to replace the C lib that I wrote to manage some of the icky-er stuff this way
[08:15:54] <FromDiscord> <Elegantbeef> Infact `var` and `ref` are C interopable atm
[08:16:24] <FromDiscord> <Elegantbeef> Though `{.byRef.}` is probably better than using `var`
[08:17:00] <FromDiscord> <Girvo> In reply to @Elegantbeef "Though `{.byRef.}` is probably": Why is that? (Honest question, I've been using `var` for the most part as the nesper library uses it)
[08:17:30] <FromDiscord> <soda> yah nice
[08:17:34] <FromDiscord> <Elegantbeef> for C interop in the case where there are a lot of `T` it's just generally more desirable
[08:17:43] <FromDiscord> <Girvo> Yeah that makes sense
[08:18:34] <FromDiscord> <Girvo> Oh btw, pthreads from `import posix` with `{.thread.}` is working wonderfully on the ESP32 ðŸ™‚
[08:18:43] <FromDiscord> <Girvo> So cheers for all the help on that
[08:18:47] <FromDiscord> <Elegantbeef> Nice!
[08:19:11] <FromDiscord> <Girvo> Even is working with my binding over the top of the `esp_pthreads.h` extensions, quite nicely too
[08:19:23] <FromDiscord> <Elegantbeef> Good to hear
[08:19:48] <FromDiscord> <Girvo> And fixed up a lot of the scoping/heap weirdness that working with straight FreeRTOS tasks had. Though I do want to go back and solve that once and for all too, at some point
[08:20:26] <FromDiscord> <Elegantbeef> Do you still need cdecl\`?
[08:20:33] <FromDiscord> <Girvo> Not that I need to: `pthreads.h` on FreeRTOS/ESP-IDF just wraps the Task stuff anyway, and the `esp_pthreads.h` extensions give you the extra RTOS functionality
[08:20:45] <FromDiscord> <Girvo> Nah, I am using `noconv` though
[08:21:14] <FromDiscord> <Girvo> Oh, its working great with a shared lock too
[08:24:16] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SBS
[08:24:28] <FromDiscord> <Elegantbeef> Can safe a bit of typing
[08:24:30] <FromDiscord> <Elegantbeef> save even
[08:24:47] <FromDiscord> <Girvo> Yeah already done haha ðŸ™‚ Cheers though!
[08:24:55] <FromDiscord> <Elegantbeef> Ah
[08:25:57] <FromDiscord> <Elegantbeef> Good thing I do not drink if I drank every time you said "cheers" to me I'd be fucking dead ðŸ˜›
[08:26:00] <FromDiscord> <Girvo> Actually question, is there a way to export a pragma? I'm currently just re-defining it
[08:26:12] <FromDiscord> <Girvo> hahaha not wrong ðŸ˜‰ I'd kill most of my coworkers too based on our Slack chat
[08:26:41] <FromDiscord> <Elegantbeef> Seems like you cannot
[08:26:55] <FromDiscord> <Elegantbeef> so probably best to make it a macro
[08:27:04] <FromDiscord> <Girvo> Yeah might do
[08:27:15] <FromDiscord> <Girvo> Not that it matters right now, it's only defined in two files anyway
[08:30:26] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SBV
[08:49:13] <FromDiscord> <Elegantbeef> [evoalg](https://matrix.to/#/@evoalg:matrix.org)\: where are all your questions anyway?!
[08:49:54] <FromDiscord> <evoalg> hehe ummm I've been a little busy ðŸ˜‰
[08:50:25] <FromDiscord> <evoalg> but I'm glad you've been missing my questions ðŸ˜‰
[08:52:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:16:59] <FromDiscord> <demotomohiro> @Elegantbeef Why don't your `rtosThread` macro use `macros.expectKind` proc?
[09:18:16] <FromDiscord> <Elegantbeef> expect kind doesnt give nice errors
[09:20:03] <FromDiscord> <Elegantbeef> `Error: Expected one of {nnkProcDef, nnkFuncDef}, got nnkMethodDef` is a useless error message to a programmer
[09:20:44] <FromDiscord> <Elegantbeef> Completely fine for helper macro procedures, completely useless for user facing code
[09:21:53] <FromDiscord> <Elegantbeef> `error` to me really makes macros feel like language features
[09:23:09] <FromDiscord> <m4ul3r> I'm trying to create a static binary on windows that has threading. I'm passing the args `--passC:"-static" --threads:on` on my `nim c` but the resulting binary is the same size without.â†µThe issue I'm running in to is a windows error saying `libwinpthread-1.dll is missing` when trying to run the binary on a different machine. Looking into that it is because the different windows machine doesn't have wingw64, thus the need for static link
[09:24:06] <FromDiscord> <Elegantbeef> You need to override the dll and statically link it
[09:24:18] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/nimc.html#dynliboverride
[09:24:33] <FromDiscord> <Elegantbeef> So you need to get a `.lib` file for that library
[09:24:50] <FromDiscord> <Elegantbeef> a static binary is not the same as static linking
[09:25:21] <FromDiscord> <m4ul3r> My bad, yes I do mean I need a static binary. I will check into this. Thanks!
[09:26:42] <FromDiscord> <demotomohiro> @Elegantbeef I see
[09:27:40] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/953894872270663710/image.png
[09:27:42] <FromDiscord> <Elegantbeef> Just for example
[09:28:19] <FromDiscord> <demotomohiro> You can copy your excutable with .dll files to other machine
[09:28:34] <FromDiscord> <Elegantbeef> That's the "proper" solution
[09:29:56] <FromDiscord> <Rika> In reply to @Elegantbeef "Seems like you cannot": you can't but the trick that the stdlib uses is to make a pragma pragma only module and include it
[09:30:45] <FromDiscord> <Elegantbeef> I dont know what that `include` keyword means, personally i dont even think it exists
[09:36:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:37:33] <FromDiscord> <huantian> Include that seems like a good way to make clean code
[09:40:31] <FromDiscord> <Rika> i mean whatever, you do you, i would rather the include than to make a bulky macro
[09:40:46] <FromDiscord> <Rika> since in this case its not going to break anything
[09:42:20] <FromDiscord> <Elegantbeef> Well the annoying part is that you cannot export the pragma so if you had a `rtosthreads.nim` you also have to include the pragma for cleaner code
[09:42:39] <FromDiscord> <Elegantbeef> Having to include it everywhere suuuuuucks
[09:51:01] <FromDiscord> <Rika> only if it is userfacing then i guess
[11:06:09] *** Joins: PMunch (~PMunch@user/pmunch)
[11:21:06] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[11:21:10] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[11:22:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[11:36:32] <FromDiscord> <nariod> Hello guys,â†µNew Nim programmer here! Is there a chan for win32 API related dev?
[11:36:44] <FromDiscord> <Elegantbeef> You can just ask here
[11:37:08] <FromDiscord> <Rika> No
[11:37:15] <FromDiscord> <Rika> There is no channel
[11:37:40] <FromDiscord> <nariod> OK thx!
[11:46:10] <PMunch> Hmm, I have a small program which sends a bunch of request to my service and measures latencies. Is there a nice little library to display a list of values as a distribution graph?
[11:50:01] <FromDiscord> <Elegantbeef> Scinim has plotty
[11:50:32] <PMunch> Hmm, I was thinking something simple in the terminal
[11:51:21] <PMunch> I guess I could easily hack something together with drawille
[11:52:10] <FromDiscord> <Rika> Doesnâ€™t curses/-like libraries have graphing tools
[11:52:48] <FromDiscord> <Elegantbeef> There is also https://github.com/Yardanico/asciigraph
[11:53:55] <PMunch> Hmm, asciigraph seems very close to what I want
[11:54:48] <FromDiscord> <Elegantbeef> Jesus it's like 3 functions
[11:56:40] <PMunch> I guess if I do a countTable and get them out ordered and pass it to asciigraph it might work
[12:34:44] <PMunch> Hmm, I think I need a log scale for this..
[12:39:21] *** Quits: [R] (~rs@genoce.org) (Read error: Connection reset by peer)
[12:52:01] <FromDiscord> <Phil> Design question!
[12:52:09] <PMunch> Design answer!
[12:55:56] <FromDiscord> <Phil> sent a long message, see https://paste.rs/M70
[12:57:02] <FromDiscord> <Phil> Ah, the deletion logic-wise also should happen in the service, because the repository shouldn't deal with what happens on the disk imo, only what happens in the database.
[12:57:22] <FromDiscord> <Phil> service, controller and repository are all separate modules
[12:57:37] <FromDiscord> <Elegantbeef> 'This must be in that order because only after storing it on disk do you know what filepath the file will have and thus which filepath you need to store in the database entry.' ?
[12:58:26] <FromDiscord> <Elegantbeef> How do you download the file to a directory without knowing what directory to store it to?
[12:59:07] <FromDiscord> <Phil> I know in which directory it will be, but I don't know for sure the filename it'll have after storing. â†µThat is because if the user saves a file "lala.jpg" and that file already exists, I append a random string of 10 chars to the end of the filename
[12:59:39] <FromDiscord> <Phil> so even if the user uploads "lala.jpg" the final file path may be "/my/dir/lala_LFASH91m.jpg"
[13:00:00] <PMunch> It depends on your database logic, but try/except sounds like the logical choice if it throws an exception
[13:00:20] <PMunch> And you probably wouldn't re-raise it, but that depends on what kind of logic you have further up
[13:00:48] <FromDiscord> <Phil> The std/db_sqlite module will be throwing a DBError essentially because the database itself will throw `CHECK constraint failed: wikientries.models_Only_One_Article`
[13:01:46] <FromDiscord> <Elegantbeef> I still dont understand how you wouldnt know that it's going to be named with the random characters
[13:01:55] <FromDiscord> <Phil> Ah, right, that piece of info is missing.â†µIn my controller I try-except my service calls because if something goes wrong, my except is returning a HTTP400/500 whatevs with a custom message attached
[13:02:03] <FromDiscord> <enthus1ast> I've build image upload service, by hashing the image, creating folder by the name of the hash and put the image there, this way i also could put a generated thumbnail next to the imageâ†µ(@Phil)
[13:02:17] <FromDiscord> <enthus1ast> and no naming issues
[13:03:10] <PMunch> Yeah keeping the user-supplied filename is probably just going to cause issues
[13:03:14] <FromDiscord> <enthus1ast> must not be a crypto secure hash, something fast
[13:03:49] <FromDiscord> <enthus1ast> the other benefit of this is that you can just point the webserver to the public dir, an noone can guess the whole path because of this hash
[13:03:57] <FromDiscord> <katlyn> i think elegantbeef's point is that you can determine the file name, write to the database, then write the file just as easily as the order you do things now - you just swap the two storage steps
[13:04:10] <PMunch> But yeah, catch the DBError where the file was created, delete the file, then re-raise it or wrap it in a new exception type.
[13:04:16] <FromDiscord> <Elegantbeef> Indeed my point
[13:04:47] <PMunch> Well that works until two people try to upload a file called the same at the same time
[13:05:36] <FromDiscord> <Phil> In reply to @Elegantbeef "I still dont understand": I mostly don't like the design that creates of splitting the proc that figures out the name from the proc that stores the file (which is logic that is housed in a separate utils module), it means my code in the service needs to be aware that there's a possible file-name-change inbound.â†µAnd also the possible issue that you might have name-collisions (as unlikely as they might be) during 
[13:07:44] <FromDiscord> <Phil> In reply to @enthus1ast "I've build image upload": I like this solution so far, though it might be more computationally intensive than strictly necessary (no idea how fast hashing an image to a string is, really). Why not only hash the image to a string and use that string as a normal filename instead of making a dir out of it?
[13:08:58] <FromDiscord> <Rika> Iâ€™m late; so you want a rollback outside of only the database?
[13:09:07] <FromDiscord> <Elegantbeef> Use the hash of `epochTime` and be very funny
[13:09:10] <FromDiscord> <Phil> In reply to @Rika "Iâ€™m late; so you": Pretty much
[13:09:36] <FromDiscord> <Phil> wait... why don't I just append a unix timestamp at each file's end....
[13:09:47] <FromDiscord> <Elegantbeef> Fuck what a magical idea
[13:10:03] <FromDiscord> <Phil> I mean, you were the one that had it ðŸ˜›
[13:10:07] <FromDiscord> <Rika> I have no idea what youâ€™re thinking
[13:10:20] <FromDiscord> <Elegantbeef> That someone likes to overcomplicate isues
[13:10:37] <FromDiscord> <Phil> No wait, false alarm, still don't like that logic flow.
[13:11:02] <FromDiscord> <Elegantbeef> I wasnt going to let you use it anyway
[13:11:09] <FromDiscord> <Elegantbeef> Under some weird IP law i own it probably
[13:11:31] <FromDiscord> <Phil> Runs into the same issue as before that I essentially insert database logic into the middle of file-storage-logic
[13:11:31] <FromDiscord> <enthus1ast> @Phil\: have you considered my folder solution?
[13:11:39] <FromDiscord> <enthus1ast> much more robust and deterministic
[13:11:41] <FromDiscord> <Phil> In reply to @enthus1ast "<@180601887916163073>\: have you considered": Yeh, I threw in the question for why folder
[13:12:03] <FromDiscord> <Elegantbeef> The fuck is a "database"?
[13:12:18] <FromDiscord> <Phil> A cookie
[13:12:20] <FromDiscord> <Phil> tasty too
[13:12:33] <FromDiscord> <Elegantbeef> One day I'll not be able to make that joke
[13:12:54] <FromDiscord> <Elegantbeef> I'll have the silly idea to make a game that needs a backend eventually and enter hell
[13:13:34] <FromDiscord> <Phil> Don't larger games need to store states of various places in the world in a database?
[13:13:53] <FromDiscord> <Phil> Assuming an RPG or something of the sort
[13:14:31] <FromDiscord> <Phil> In reply to @enthus1ast "I've build image upload": Ohhh you made the hash the folder so you could preserve the filename
[13:15:04] <FromDiscord> <enthus1ast> yes
[13:15:14] *** Quits: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:15:17] <FromDiscord> <enthus1ast> and was also generating thumbnails for the images
[13:15:21] <FromDiscord> <enthus1ast> and put them in the same folder
[13:15:30] <FromDiscord> <Phil> hmmmm
[13:16:08] <FromDiscord> <enthus1ast> this way i could do\:   \<hash\>/thumb.x.y.png
[13:16:27] <FromDiscord> <Phil> On the one hand, that's some degree of complexity. On the other, it gives me a lot of flexibility to do things with the image without turning it into an insane mess, which is nice
[13:16:35] <FromDiscord> <enthus1ast> and its deterministric because i can easily create the whole path name from the original file
[13:17:12] <FromDiscord> <enthus1ast> AAAND it preserves the original filename even when hosted on a cdn or webserver
[13:17:17] <FromDiscord> <Phil> Yeh, I see the benefits, I think it's a really good solution, particularly if you do stuff like creating thumbnails etc.
[13:17:29] <FromDiscord> <Elegantbeef> Sure but i'm a failure of a dev so i'll never work on anything big
[13:18:22] <FromDiscord> <Phil> Denied, you're cool beef, if you put yourself in the oven you could even be hot beef
[13:18:42] <PMunch> @Elegantbeef, okay these are the two graphs: http://ix.io/3SCD
[13:18:55] <PMunch> Not sure if I did the bucketing correctly though..
[13:19:10] <FromDiscord> <Phil> CLI graphs?
[13:19:12] <FromDiscord> <Phil> I'm on board
[13:19:17] <PMunch> Yup
[13:19:35] <FromDiscord> <Phil> I like the bottom representation
[13:19:41] <FromDiscord> <Phil> Really clear and easy to look at
[13:20:16] <PMunch> The bottom one is from asciigraph, the top one is just something I threw together with drawille
[13:20:37] <PMunch> I like the resolution of the top one though
[13:21:08] <FromDiscord> <Phil> Hmm yeah you can go 4 times more precise
[13:21:15] <FromDiscord> <Phil> Is there a way to increase contrast to the background?
[13:21:37] <FromDiscord> <Rika> No
[13:21:43] <FromDiscord> <Rika> Well yes but itâ€™s terminal dependent
[13:21:59] <FromDiscord> <Rika> Though tbf that pixel thing is also terminal dependent to some degree
[13:22:04] <FromDiscord> <Phil> In reply to @enthus1ast "AAAND it preserves the": What did you use for image hashing?
[13:22:51] <FromDiscord> <Rika> You could probably use xx hash
[13:23:09] <FromDiscord> <enthus1ast> back then i've used sha1
[13:23:09] <PMunch> Now I just need to figure out how to do log scales..
[13:23:12] <FromDiscord> <enthus1ast> but xx hash
[13:23:15] <FromDiscord> <enthus1ast> is faster i
[13:23:28] <FromDiscord> <Phil> is that something I can google or is xx a placeholder?
[13:23:42] <FromDiscord> <enthus1ast> https://github.com/OpenSystemsLab/xxhash.nim
[13:24:07] <FromDiscord> <Rika> https://github.com/khchen/hashlib if you want more hash algorithms
[13:24:13] <FromDiscord> <enthus1ast> have a look i cant remember which one was the fastest xx hash
[13:25:14] <FromDiscord> <Rika> xx hash is good because it isnâ€™t cryptographic like SHA is lol
[13:25:43] <FromDiscord> <enthus1ast> yes, but there is even a higher speed version of xxhash
[13:26:03] <FromDiscord> <enthus1ast> Version	Speed on 64-bit	Speed on 32-bitâ†µXXH64	13.8 GB/s	1.9 GB/sâ†µXXH32	6.8 GB/s	6.0 GB/s
[13:26:09] <FromDiscord> <Phil> Anything majorly speaking against std/hashes?
[13:26:26] <FromDiscord> <enthus1ast> yes, you could not easily do them on commandline
[13:26:47] <FromDiscord> <enthus1ast> for a default hash you can generate your pathname on commandline
[13:27:07] <FromDiscord> <enthus1ast> and on the next nim hash change they'll break
[13:27:50] <FromDiscord> <Rika> In reply to @Isofruit "Anything majorly speaking against": Not really
[13:28:16] <FromDiscord> <Rika> In reply to @enthus1ast "and on the next": I am unsure about stability of the hashes module but I donâ€™t think it will happen
[13:28:23] <FromDiscord> <Phil> I don't think I understand enthus1ast, why am I caring about commandline?
[13:28:35] <FromDiscord> <Rika> I donâ€™t understand either
[13:29:08] <FromDiscord> <enthus1ast> there will be a day when you must administrate your website, ( i did in a 5+ years runtime of my service)
[13:29:21] <FromDiscord> <enthus1ast> then its nice when you can just generate the hash by commandline
[13:30:07] <FromDiscord> <Phil> Ah, to figure out where a given image was stored
[13:30:13] <FromDiscord> <Rika> You could just make the tool?
[13:30:20] <FromDiscord> <Rika> Itâ€™s not particularly hard Iâ€™d say
[13:30:57] <FromDiscord> <Rika> Nim used wy hash for reference
[13:31:02] <FromDiscord> <Rika> Uses
[13:31:07] <FromDiscord> <enthus1ast> echo /path/to/my/public/  `xxhash myFile`
[13:32:11] <FromDiscord> <enthus1ast> i do not claim this is the perfect solution, but its stuff i found useful for my service
[13:32:17] <FromDiscord> <Phil> check
[13:35:29] <PMunch> Hmm, I really need to get a better font..
[13:35:36] <FromDiscord> <enthus1ast> also xxhash has a streaming api, i've used this for larger files
[13:36:13] <FromDiscord> <enthus1ast> (in another project though, but still)
[13:39:57] <FromDiscord> <Phil> I made a TODO to refactor image uploading to follow your suggestion since I like it, I'll get around to it when I find the time
[13:53:33] <FromDiscord> <fbpyr> sent a long message, see https://paste.rs/qAy
[13:56:35] <FromDiscord> <fbpyr> if I manually placed the `gitlib2.so` in the same directory, there were no complaints about the missing .so ..
[14:13:54] *** Joins: dtan (~dta@102.91.5.223)
[14:29:34] *** Quits: dtan (~dta@102.91.5.223) (Quit: Quit)
[14:29:50] <FromDiscord> <abdu> How do we have build_all able to pause and then resume again in its build process ?â†µPlease help out
[14:31:45] *** Joins: dtan (~dta@102.91.4.79)
[14:38:32] *** Quits: dtan (~dta@102.91.4.79) (Ping timeout: 240 seconds)
[14:44:35] <FromDiscord> <enthus1ast> [fbpyr](https://matrix.to/#/@fbpyr:tchncs.de)\: either load the so by hand useing dynlib (which requires a wrapper patch i guess) or use another programm that just unpacks your app and the so, then calls your app, or use a installer creator (or your distributions package manager), or bundle all in a zip file
[14:45:40] <FromDiscord> <enthus1ast> the correct solution would be imho to use your distributions package manager
[14:45:50] <FromDiscord> <enthus1ast> another solution is to statically link everything
[14:46:45] <FromDiscord> <enthus1ast> but depending on your distro, creating a package might be an even bigger project than your app \:) (hem hem .deb hem hem)
[14:48:57] <FromDiscord> <enthus1ast> @abdu\: why would you need this?
[15:21:33] <FromDiscord> <fbpyr> sent a long message, see http://ix.io/3SDh
[15:26:50] <PMunch> Hey, Futhark has gotten 100 stars :)
[15:46:40] <FromDiscord> <enthus1ast> [fbpyr](https://matrix.to/#/@fbpyr:tchncs.de)\: for windows you could use nsis or  inno setup
[15:49:08] <FromDiscord> <enthus1ast> or just a zip folder \:)
[15:49:49] <FromDiscord> <enthus1ast> but with such installer creators its easy to eg add desktop start menu shortcuts, create uninstallert etc
[16:13:13] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:15:28] <FromDiscord> <fbpyr> well my installer only installs a couple of small addins from git repos for existing applications (using git as autoupdater), so I would not need any desktop shortcuts. â†µbut maybe more 'officially looking installers' are a better way for the users.. ðŸ¤”
[16:19:39] <FromDiscord> <demotomohiro> @PMunch Congratulations!
[16:35:12] *** Joins: arkurious (~arkurious@user/arkurious)
[16:45:53] *** Joins: xet7 (~xet7@user/xet7)
[17:06:35] *** Joins: Guest67 (~Guest67@251.18.133.37.dynamic.jazztel.es)
[17:14:33] *** Quits: Guest67 (~Guest67@251.18.133.37.dynamic.jazztel.es) (Quit: Client closed)
[17:14:55] *** Joins: juztziggs (~juztziggs@251.18.133.37.dynamic.jazztel.es)
[17:20:21] *** Quits: juztziggs (~juztziggs@251.18.133.37.dynamic.jazztel.es) (Quit: Client closed)
[17:54:22] <FromDiscord> <auxym> In reply to @fbpyr "well my installer only": you can use wix to build MSIs. it's a bit confusing but gets better once you wrap your head around the MSI format. It's basically a database with a dozen or so tables (eg there's a table with files to be installed), so you look up the reference for the tables.
[17:54:58] <FromDiscord> <auxym> this: https://wixtoolset.org/
[17:55:30] <PMunch> Hmm, I did start working on a Nim based Windows installer generator after having to write InnoScript for some work project
[17:55:47] <PMunch> Someone else took over the project however, so I never completed it
[17:56:08] <PMunch> Well, they took over creating the installer, not the project itself
[18:22:31] <PMunch> Anyone else having trouble with GitHub?
[18:22:48] <nrds> <06Prestige99> yep
[18:22:50] <nrds> <06Prestige99> lot of outages rn
[18:24:43] <PMunch> Hmm, that's inconvenient..
[18:28:36] <nrds> <06Prestige99> very :P https://www.githubstatus.com/
[18:29:33] <FromDiscord> <Rika> the whole thing is degraded xd
[18:30:06] <nrds> <06Prestige99> Time to answer emails
[18:30:24] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[18:30:52] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[18:32:42] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:34:05] <FromDiscord> <Rika> how dreadful
[18:48:07] <FromDiscord> <auxym> oh damn... is this why my platformio randomly stopped working? Here I am just spent an hour reinstalling vscode, nuking my profile, reinstalling Anaconda... D:
[18:48:39] <FromDiscord> <Rika> damn
[18:49:33] <FromDiscord> <auxym> I'm becoming less and less of a fan of PIO, not the first time it randomly breaks on me. but work is work :\ (and c++ ugh)
[19:28:16] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 245 seconds)
[19:29:18] *** Joins: xet7 (~xet7@user/xet7)
[19:44:07] *** Quits: zgasma (~zgasma@2601:600:c87f:8b1a::1d) (Quit: nyaa~)
[19:56:44] <FromDiscord> <Daan Breur> matrixcheck
[20:00:28] <FromDiscord> <exelotl> matrix, heck
[20:00:51] <FromDiscord> <Daan Breur> lol
[20:12:11] *** Joins: zgasma (~zgasma@2601:600:c87f:8b1a::d)
[20:40:37] <FromDiscord> <Shinyzenith> has anyone faced this issue before? https://github.com/PMunch/futhark/issues/22
[20:40:51] <FromDiscord> <Shinyzenith> and yes I have linked my binary with wayland-server
[21:15:08] *** Joins: pro (~pro@user/pro)
[21:30:02] <FromDiscord> <shrekman!> havent used nim yet, how much would an exe of hello world take in nim
[21:31:24] <FromDiscord> <Daan> In lines of code or in compiled file size?
[21:31:53] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=1Kcr <- in code
[21:34:23] <Amun-Ra> shrekman!: a few KB, if you worry about the size write in asm
[21:50:06] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[21:55:24] <FromDiscord> <Rika> someone got hello world down to 160b in nim i believe
[21:55:29] <FromDiscord> <Rika> but its not idiomatic, naturally
[21:58:52] <FromDiscord> <mratsim> In reply to @shrekman! "havent used nim yet,": https://hookrace.net/blog/nim-binary-size/
[21:59:19] <Amun-Ra> it needs a refresh tho
[22:03:11] <FromDiscord> <shrekman!> In reply to @Amun-Ra "shrekman!: a few KB,": im looking for an efficient, portable language
[22:03:23] <FromDiscord> <shrekman!> does it compile to cross platform easily?
[22:04:01] <FromDiscord> <Rika> i mean i guess, what platforms are we talking about
[22:19:53] <FromDiscord> <shrekman!> debian based systems, windows and maybe mac
[22:20:11] <FromDiscord> <Rika> then sure that's easy for nim
[22:20:23] <FromDiscord> <Rika> there's also other stuff like solaris haiku bsd embedded systems etc
[22:20:35] *** Quits: pro (~pro@user/pro) (Quit: pro)
[22:26:54] <Amun-Ra> shrekman!: well, imho you found it
[22:35:50] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SGL
[22:36:39] <FromDiscord> <huantian> seems good
[22:37:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:37:32] <FromDiscord> <Rika> probably needs the type for url, i dont remember types being inferrable in procedure signatures
[22:37:48] <FromDiscord> <Rika> !eval func initNodeInstance(url = ""): int = discard
[22:37:51] <NimBot> <no output>
[22:37:56] <FromDiscord> <Rika> huh they do
[22:37:58] <FromDiscord> <Rika> cool
[22:38:09] <FromDiscord> <huantian> you just have to make sure it's non ambiguous ig
[22:38:27] <FromDiscord> <Rika> status btw is by default false
[22:38:54] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SGN
[22:39:05] <FromDiscord> <TennisBowling> (edit) "https://play.nim-lang.org/#ix=3SGN" => "https://paste.rs/wuE"
[22:39:07] <FromDiscord> <TennisBowling> In reply to @Rika "probably needs the type": so should I do `url: string = ""`?
[22:39:11] <FromDiscord> <Rika> no no
[22:39:13] <FromDiscord> <Rika> it works
[22:39:13] <FromDiscord> <Rika> its fine
[22:39:20] <FromDiscord> <huantian> In reply to @TennisBowling "cool! I also try": this is because self is immutable
[22:39:31] <FromDiscord> <Rika> and you cannot make it mutable because your proc is async
[22:40:09] <FromDiscord> <Rika> you kinda can bodge it by using `ref`
[22:40:42] <FromDiscord> <TennisBowling> why can't it be mutable when async?
[22:41:50] <FromDiscord> <TennisBowling> In reply to @Rika "you kinda can bodge": so does this just set `self` to the pointer of the object?
[22:42:04] <FromDiscord> <Rika> semantics are weird, you can hold futures without `await`ing them so once you call it and take its future the value is now changed even if your proc hasnt "finished" running, i guess
[22:42:08] <FromDiscord> <Rika> this is just a guess
[22:42:23] <FromDiscord> <Rika> In reply to @TennisBowling "so does this just": no it means that you would have to pass in a reference which is annoying
[22:42:41] <FromDiscord> <Rika> or you'd have to deal with reference semantics everywhere else if youre making the type ref
[22:42:47] <NimEventer> New thread by DMisener: Simple linked list questions: Correct proc signature for first(), see https://forum.nim-lang.org/t/9019
[22:43:19] <FromDiscord> <TennisBowling> wait but if I call it with `NodeInstance.setOnline()` do I need to pass the nodeinstance ref?
[22:43:48] <FromDiscord> <Rika> you'd need to create a reference as ive said and yes it is annoying
[22:43:55] <FromDiscord> <Rika> even then i guess it doesnt work
[22:44:03] <FromDiscord> <Rika> so your only option is to make the whole type ref
[22:46:06] <FromDiscord> <TennisBowling> In reply to @TennisBowling "hey. In python I": with the initNodeInstance I'm getting that it can make side effects, but how?
[22:47:57] <reversem3[m]> Getting illegal storage access running nimble runr for nico https://play.nim-lang.org/#ix=3SGO
[22:47:59] <FromDiscord> <huantian> In reply to @Rika "semantics are weird, you": <https://play.nim-lang.org/#ix=3SGV> it mentions violating memory safety which ig sure
[22:48:25] <FromDiscord> <huantian> In reply to @TennisBowling "with the initNodeInstance I'm": It's just a normal proc, you can do anything you want like `echo`ing
[22:48:25] <FromDiscord> <Rika> In reply to @TennisBowling "with the initNodeInstance I'm": is what you posted the whole code?
[22:48:27] <FromDiscord> <Rika> for the proc
[22:48:38] <FromDiscord> <Rika> In reply to @huantian "It's just a normal": he uses func here
[22:48:43] <FromDiscord> <huantian> oh huh
[22:49:02] <FromDiscord> <TennisBowling> In reply to @Rika "for the proc": what proc?
[22:49:20] <FromDiscord> <huantian> In reply to @Rika "he uses func here": oh I didn't notice
[22:49:50] <FromDiscord> <TennisBowling> should I use proc for the init?
[22:49:57] <FromDiscord> <huantian> if you want side effects you should use proc
[22:50:33] <FromDiscord> <huantian> func is a shortcut for `{.noSideEffect.}`
[22:50:34] *** Quits: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[22:50:52] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[22:51:13] <FromDiscord> <huantian> In reply to @huantian "<https://play.nim-lang.org/#ix=3SGV> it mentions vi": hm actually maybe it does make sense, async does expand into iterators?
[22:52:09] <FromDiscord> <TennisBowling> In reply to @huantian "if you want side": right but I don't see how this func can make side effects
[22:52:16] <FromDiscord> <TennisBowling> I probably misunderstand side effects
[22:53:04] <FromDiscord> <Rika> side effects can be echoing or mutating a global
[22:53:10] <FromDiscord> <huantian> newHttpClient() has side effects, see your error message
[22:53:13] <FromDiscord> <Rika> ~~rather technically echoing is mutating a global~~
[22:53:30] <FromDiscord> <huantian> sent a code paste, see https://paste.rs/u7x
[22:54:09] <FromDiscord> <TennisBowling> oh I see
[22:54:28] <FromDiscord> <TennisBowling> this doesn't really matter so I'll just make it a proc?
[22:54:34] <FromDiscord> <Rika> sure
[22:54:38] <FromDiscord> <Rika> thats fine
[22:54:55] <FromDiscord> <TennisBowling> cool thank you!
[22:54:57] <FromDiscord> <huantian> oh yeah I forgot FutureVar exists, isn't that supposed to be used for var params in {.async.}
[22:55:27] <FromDiscord> <Rika> really
[22:55:42] <arkanoid> nimscript + async is a thing?
[22:55:56] <FromDiscord> <Rika> future var is a return type tho isnt it
[22:56:04] <FromDiscord> <huantian> yeah uh hm
[22:56:24] <FromDiscord> <Rika> its an async equivalent for returning a var T
[22:56:42] <FromDiscord> <Daan> What is recommended for a Type, tuple or object
[22:56:59] <FromDiscord> <huantian> In reply to @Rika "its an async equivalent": yeah I can't remember what I was thinking of
[22:57:47] <FromDiscord> <huantian> I guess either use ref, or just return a copy of your object when you can
[22:58:13] <FromDiscord> <huantian> In reply to @Daan "What is recommended for": somewhat depends but you probably want object
[22:59:15] <FromDiscord> <Daan> It is for Thread dataâ†µ(@huantian)
[23:01:18] <FromDiscord> <Rika> object
[23:02:30] <FromDiscord> <Daan B> @Rika\: Thanks
[23:04:35] <FromDiscord> <Daan B> sent a code paste, see https://play.nim-lang.org/#ix=3SGZ
[23:04:50] <FromDiscord> <Daan B> sent a code paste, see https://play.nim-lang.org/#ix=3SH0
[23:04:51] <FromDiscord> <Rika> exported
[23:05:51] <FromDiscord> <Daan B> So if you make the `Type` in a separate file you use an asterisks else you don't
[23:08:25] <FromDiscord> <Daan B> Or am I completely wrong?
[23:08:26] <FromDiscord> <Daan B> So if you make the `Type` in a separate file you use an asterisks else you don't
[23:11:06] <arkanoid> how to use multiple cores in nimscript? Do I have to rely on threads?
[23:11:35] <Amun-Ra> hmm, fork?
[23:12:20] <arkanoid> I just have a long list of "exec" commands that I can run in parallel. They are cpu bound so yeah I need thread or multiprocessing, but unsure which is easier/suggested in nimscript
[23:21:57] <FromDiscord> <exelotl> In reply to @Daan B "So if you make": Yes, if you make `Type` in some module and want it to be usable in other modules that import it, you need the asterisks (on the type itself and on all the fields that you want to be accessible)
[23:23:19] <FromDiscord> <Daan B> Thanks.
[23:27:47] <FromDiscord> <Elegantbeef> arkanoid you're going to have to use the shells forking capabilities, nimscript doesnt know what a thread is
[23:28:31] <arkanoid> Elegantbeef, mmm ok. I guess exec is sent straight to the shell
[23:28:45] <arkanoid> so backgrounding with "&" would work
[23:28:48] <FromDiscord> <Elegantbeef> Unless you're calling compiled Nim 'nimscript' ðŸ˜€
[23:35:13] <arkanoid> nope, I'm running "nim myscript.nims"
[23:35:32] <arkanoid> I'm trying to start replacing my daily bash and python script with nim
[23:36:04] <arkanoid> you know, simple utils you drop in working directory to replace boring daily tasks
[23:36:22] <FromDiscord> <Elegantbeef> So are you using Nim then?
[23:37:13] <FromDiscord> <Daan B> Arkanoid, what do you mean?
[23:37:16] <FromDiscord> <Elegantbeef> If so you can use https://nim-lang.org/docs/osproc.html#execProcesses%2CopenArray%5Bstring%5D%2Cproc%28int%29%2Cproc%28int%2CProcess%29 or similar
[23:38:09] <FromDiscord> <TennisBowling> sent a code paste, see https://play.nim-lang.org/#ix=3SHd
[23:40:05] <FromDiscord> <Elegantbeef> Which line is the source of that error?
[23:40:57] <arkanoid> Elegantbeef, why you call running "nim myscript.nims" compiled nim? Is't code like this executed in nim vm?
[23:41:19] <FromDiscord> <Elegantbeef> I mean i dont get why you're using nimscript
[23:41:47] <FromDiscord> <Elegantbeef> https://github.com/PMunch/nimcr and carry on
[23:43:53] <FromDiscord> <Elegantbeef> Nimscript running in the normal compiler lacks many things that makes it as capable as other scripting languages, so you're just setting yourself up for tedium using it for automating tasks imo
[23:48:30] <FromDiscord> <Mysterysib> What compiler does nim use?
[23:48:46] <FromDiscord> <Elegantbeef> 'any' C compiler
[23:48:49] <FromDiscord> <Mysterysib> does it compile to C and then ASM, or straight to ASM?
[23:49:07] <FromDiscord> <Elegantbeef> On linux it defaults to gcc, on windows it defaults to mingw, on mac defaults to clang
[23:49:09] <FromDiscord> <Mysterysib> Ahh, so you could use LLVM
[23:49:34] <FromDiscord> <Elegantbeef> https://github.com/arnetheduck/nlvm does exist
[23:49:40] <FromDiscord> <Elegantbeef> There isnt much benefit to using llvm but yes you can
[23:50:07] <FromDiscord> <Mysterysib> Mhmm cool
[23:50:41] <FromDiscord> <Mysterysib> You know that site where you could see the ASM various compilers produce? Would be interesting to compare to what's produced from Nim!
[23:50:54] <FromDiscord> <Elegantbeef> Godbolt supports nim
[23:50:56] <FromDiscord> <Rika> Godbolt
[23:51:46] <reversem3[m]> I have tried 4 different versions of nim to run this nico example and all of tell me "illegal storage" 
[23:51:51] <FromDiscord> <Mysterysib> Woah proc square is a lot longer than C++
[23:51:52] <Amun-Ra> I often type goldbot instead
[23:54:09] <reversem3[m]> I tried to get advice in the nim-gamedev but seems pretty empty , https://play.nim-lang.org/#ix=3SGO
[23:55:05] <reversem3[m]> It's probably an osx issue. Later I'll try a new nico template and see if that runs by itself.  
