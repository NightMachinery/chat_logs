[00:02:13] *** Joins: hzm74 (~hzm74@217-121-154-127.cable.dynamic.v4.ziggo.nl)
[00:17:56] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[00:26:05] *** Joins: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net)
[00:27:32] <hzm74> Hello, i have a model where every record holds a ¨documentname¨ and multiple dates. How can i list every record and show only the latest date from every record?
[00:30:58] *** Quits: azrael (~azrael@beaker.cictr.com) (Quit: Leaving)
[00:33:47] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[00:34:05] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[00:34:42] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[00:37:15] *** Joins: xkuru (~xkuru@user/xkuru)
[00:39:53] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979)
[00:53:11] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[01:08:02] *** Joins: pepper (~pepper@user/pepper)
[01:08:44] *** Quits: optiz0r (~quassel@lenore.sihnon.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:12:40] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 256 seconds)
[01:15:21] *** Joins: pepper (~pepper@user/pepper)
[01:20:44] *** Joins: glik22_ (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[01:25:08] *** Quits: Guddu (~Guddu@59.88.90.189) (Quit: Leaving)
[01:31:14] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Remote host closed the connection)
[01:36:02] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[01:40:16] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[01:43:12] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[01:43:15] *** Joins: optiz0r (~quassel@lenore.sihnon.net)
[01:44:25] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[01:49:21] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Remote host closed the connection)
[01:49:23] *** Joins: Atque (~Atque@user/atque)
[01:50:04] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 256 seconds)
[01:50:40] *** Quits: ekathva (~ekathva@2001:999:51:be01:35a5:6efe:4821:a5c8) (Remote host closed the connection)
[01:51:17] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[01:52:10] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979) (Ping timeout: 250 seconds)
[01:53:09] <hzm74> This is giving me the record with the latest date: vl = Vloeren.objects.annotate(latestdate=Max('datum_document__datum'))
[01:53:47] <hzm74> But how to get the latest date from every record?
[01:59:01] <hzm74> This is it i think: latestdatedocuments = Vloeren.objects.all().order_by('id', '-datum_document').distinct('id')
[01:59:27] <hzm74> Only distinct isn´t working with db.sqlite3
[01:59:43] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 268 seconds)
[02:00:06] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[02:00:47] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[02:01:30] <hzm74> .distinct also isn´t supported on mysql?
[02:05:30] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[02:07:39] *** Joins: jdj (~jd@162.243.188.133)
[02:08:41] <jdj> hi folks - I changed the ALLOWED_HOSTS in setttings.py - but am not seeing it in the "Invalid HTTP_HOST header" page as being updated.. I am totally confused why django is not able to see the change?
[02:09:23] <FunkyBob> did you restart the django process?
[02:09:59] <jdj> yes
[02:10:16] <FunkyBob> are you certain you changed the right file? :)
[02:11:26] <jdj> yeah :D I am 100% sure
[02:12:13] *** Quits: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[02:12:25] <FunkyBob> what's your server setup? and what did you change the value to?
[02:12:37] <FunkyBob> (maybe django sees the change just fine...)
[02:14:43] <jdj> uh oh.... when you asked if I restarted the django process. I thought I did.. I ctrl-c in the docker compose terminal, and I see it "stopping..." then I did docker-compose up, thinking, certainly, that was a restart
[02:15:20] <FunkyBob> but it wasn't?
[02:15:26] <jdj> but it looks like it did some weird caching? like even though my project was mounted as a volume and the change was in the container.. docker didn't reread the settings.py?
[02:18:42] <jdj> anywho - thanks a ton funky for taking a look at my issues. :) was like a 10/10 flaberghasted
[02:18:48] <FunkyBob> np
[02:19:06] <FunkyBob> debugging, for me, starts with identifying assumptions, and testing them
[02:19:32] <jdj> it's hard to not be certain about things :(
[02:19:47] <FunkyBob> are you sure of that? :P
[02:20:00] <FunkyBob> often it's the things we're most sure of
[02:20:30] <jdj> :D
[02:21:19] <FunkyBob> like... that we restarted the process :P
[02:22:02] <hzm74> Hello FunkyBob, can you please look at my model and my given shell commands to retrieve the lateste date from every record in a model
[02:22:10] <hzm74> I have this:  http://dpaste.org/RZSt
[02:22:46] <FunkyBob> hzm74: you want each record with its more recent related date?
[02:22:56] <hzm74> I believe i managed to get all records from my model with latest date, only the date isn´t plotted?
[02:22:57] <FunkyBob> or a collection of latest dates?
[02:22:59] *** Quits: jdj (~jd@162.243.188.133) (Remote host closed the connection)
[02:23:15] <FunkyBob> what do you mean 'plotted'?
[02:23:21] <hzm74> each record with its latest related date
[02:23:59] <hzm74> the queryset now only prints the fields from the model ¨Vloeren¨, it is not printing the related dates:
[02:24:16] <FunkyBob> you mean like line 28 of your paste?
[02:24:52] <hzm74> yes. I would like it added the belonging latest date
[02:25:32] <FunkyBob> that's just using the __repr__ of your models... it doesn't say if it got the extra field or not
[02:26:03] <FunkyBob> try this;   e = f.first() ; e._sel
[02:26:52] <hzm74> it gives:  datetime.date(2022, 1, 11)
[02:27:06] <FunkyBob> right
[02:27:09] <FunkyBob> it's there
[02:27:18] <FunkyBob> but __str__ and __repr__ have no reason to show it
[02:27:47] *** Joins: astarrh (~astarrh@104-10-253-153.lightspeed.sntcca.sbcglobal.net)
[02:29:11] <astarrh> Is it possible to use Django's session framework with fully decoupled front/back ends using AuthToken?
[02:29:17] <hzm74> So i should alter the __str__ in my model? Or can i alter the codeline from my shell so its also prints the dates?
[02:29:42] <FunkyBob> astarrh: there's so much disconnect in that one question, it's baffling
[02:29:59] <FunkyBob> hzm74: why do you care how the __repr__ shows it?
[02:30:20] <astarrh> Haha sorry, I am trying to learn and am obviously confused.
[02:30:43] <hzm74> FunkyBob: my goal is to print this data as a table on my website.
[02:30:46] <FunkyBob> astarrh: also a lot of warning flags for me... like any time someone says they want to use auth tokens...
[02:31:06] <FunkyBob> hzm74: ok... so the __str__ and __repr__ formats are totally irrelevant there
[02:31:13] <FunkyBob> hzm74: you should only care that the values are there
[02:31:18] <FunkyBob> in the model instances
[02:31:21] <hzm74> So the user sees a table with records from model ¨Vloeren¨ with also the belonging latest date.
[02:31:38] <FunkyBob> astarrh: in short... django's sessions work fine, because they rely on HTTP and Cookies.
[02:31:55] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:32:25] <hzm74> FunkyBob: so i need to add a function in my model ¨Vloeren¨ what returns this.
[02:32:36] <FunkyBob> do you?
[02:32:37] <FunkyBob> why?
[02:33:13] <astarrh> So is there a solution to continue using Django sessions even if Django isn't serving up my frontend?
[02:33:34] <astarrh> Using Django Rest Framework
[02:33:51] <astarrh> I was reading about rest_framework.authtoken in the docs and thought it might be the solution
[02:33:55] <FunkyBob> astarrh: they will ... just work.
[02:34:11] <FunkyBob> I'm not sure what problem you're expecting
[02:34:25] <FunkyBob> when you say sessions, do you mean django's default auth?
[02:34:38] <FunkyBob> because otherwise, your concerns.. and looking to token auth... make no sense
[02:34:58] <astarrh> I guess I am trying to figure out how to send requests from my front end without the benefit of Django popping in its own authentication information into the HTML
[02:35:29] <FunkyBob> so this _is_ about auth?
[02:35:49] <FunkyBob> django doesn't "pop in auth information" anywhere
[02:35:50] <hzm74> FunkyBob: the values are there, but how would i print the values as a list/table to my website?
[02:36:06] <FunkyBob> hzm74: the same way you do with any other attribute on your models?
[02:38:15] <FunkyBob> astarrh: yes,  you can still use django's default auth machinery with a JSON/RESTful API
[02:38:42] <FunkyBob> https://blog.tinbrain.net/blog/session-auth-spa.html
[02:39:28] <hzm74> Aha, i get it!! in my codeline in shell ´f´ is now a queryset. When i do: for vl in f: print(str(vl._sel) + vl.documentnaam)
[02:39:39] <FunkyBob> hzm74: correct
[02:39:48] <FunkyBob> did you not cover this sort of thing in the tutorial?
[02:39:57] <hzm74> Then the names of my records with the according latest date is printed. Great!!
[02:40:53] <FunkyBob> also, you should learn a bit of python string formatting... using + to build strings is expensive and slow
[02:41:03] <FunkyBob> f-strings are joy
[02:41:26] <FunkyBob> https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings
[02:41:56] <hzm74> FunkyBob, my expercience with the tutorial is that it gives a lot of explanation of what everything is doing in Django. But for me it is hard to put these pieces together.
[02:42:22] <FunkyBob> hzm74: well, it does cover that you get a queryset back from building querysets...
[02:43:45] <hzm74> You are certainly right about that. Only i didn´t get it how to use it in my situation.
[02:44:22] <astarrh> FunkyBob: "Django's sessions work by putting a session ID token into a cookie." So, if I have a fully de-coupled SPA, do I need to create this cookie? Otheriwse, how does Django create this cookie if I am not using it to deliver the page?
[02:44:29] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:44:41] <FunkyBob> astarrh: cookies are created by the server...
[02:44:51] <FunkyBob> are you ever talking to the django server?
[02:44:55] <hzm74> But it opened my eyes for now. Gonna read about the f-strings. Many thanks. Also i gonna practice for now with my new queryset! Many thanx!!
[02:45:08] <astarrh> Only through axios after the page is loaded.
[02:45:10] <FunkyBob> hzm74: glad you're making progress.
[02:45:17] <FunkyBob> astarrh: so "yes"
[02:45:20] <FunkyBob> so it can set its session cookie
[02:45:32] <FunkyBob> [also... why do people use axios client side?]
[02:45:49] <astarrh> I use axios because it seems pretty plug and play with Vue
[02:46:13] *** Quits: gnoirzox (~gnoirzox@user/gnoirzox) (Ping timeout: 240 seconds)
[02:46:26] <FunkyBob> fetch is right there, built into your browser! :P
[02:46:41] <FunkyBob> anyway
[02:46:48] <astarrh> Hah. I'm a hobbyist, not a pro, I mostly follow examples on the first page of Google results unless i can afford a tutor
[02:47:13] <astarrh> I am not entirely sure why the examples don't suggest using fetch. I seem to remember playing with it some time ago
[02:47:40] <FunkyBob> axios, AIUI, is useful when your code will run both client and server side... it provides a uniform API for making requests
[02:47:51] <FunkyBob> but we're getting side-tracked
[02:47:56] <astarrh> Ahh, I see. So I can probably move away from it at this point
[02:48:52] <FunkyBob> there are samples in my blog post, so that can help... also MDN is your friend :)
[02:49:00] <astarrh> So if I make a request, either through fetch or axios, then Django will handle the session cookie for me? I think that's what I was trying to figure out and thought I needed some sort of token.
[02:49:19] <FunkyBob> astarrh: they're still just HTTP requests
[02:49:26] <FunkyBob> django doesn't care.
[02:49:39] <astarrh> Ahhhh
[02:49:42] *** Quits: hzm74 (~hzm74@217-121-154-127.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[02:49:42] <FunkyBob> the only token you may need to deal with is the CSRF token
[02:49:53] <FunkyBob> (which I cover in my blog post)
[02:51:46] <astarrh> Great! This makes so much sense now, thank you. I was indeed getting caught up on csrf which I think sent me down this rabbit hole. I should have just asked here first..
[02:51:58] <FunkyBob> hah... and now this shows up on twitter: https://twitter.com/targos89/status/1488471755194867715
[02:52:50] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 252 seconds)
[02:53:43] <astarrh> What is the difference between that and normal fetch?
[02:56:37] <astarrh> wow MDN really is a gold mine of information
[03:02:40] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[03:02:48] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:04:29] <FunkyBob> astarrh: nodejs is a server-side JS system... it doesn't have all the same APIs as provided by the browser
[03:04:38] <FunkyBob> so, they're just announcing they've implemented fetch for it
[03:05:26] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[03:06:24] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[03:06:27] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[03:07:50] <astarrh> Ahh I see.
[03:22:08] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 250 seconds)
[03:33:15] *** Quits: mattfoxxx (~mattfoxxx@200116b822e2c300ae7c305570064fab.dip.versatel-1u1.de) (Quit: WeeChat 3.4)
[03:33:28] *** Joins: mattfoxxx (~mattfoxxx@200116b822e2c300ae7c305570064fab.dip.versatel-1u1.de)
[03:47:12] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Quit: Kalov)
[03:51:22] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979)
[03:52:51] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 245 seconds)
[04:04:05] *** Quits: mattfoxxx (~mattfoxxx@200116b822e2c300ae7c305570064fab.dip.versatel-1u1.de) (Quit: WeeChat 3.4)
[04:04:44] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:32:35] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) ()
[04:37:14] *** Quits: lod (~lod@cyber-anlage.de) (Quit: fuck off)
[04:41:03] *** Joins: lod (~lod@cyber-anlage.de)
[04:53:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:03:32] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:07:53] *** Joins: Shoukrun (~Shoukrun@2607:fea8:5b5c:2300:47e:54d1:8938:4d5f)
[05:08:45] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[05:10:48] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:10:55] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[05:11:08] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[05:13:52] <Shoukrun> Hello! I am new to Django and am refactoring my current code to learn how to create more concise functions. I was wondering how to shorten lines 27-37. I am essentially getting an object, finding the field that matches a variable, and then getting that field's value. The code I've written is quite repetitive and I get the feeling it can be
[05:13:53] <Shoukrun> shortened with a for loop. Any help would be appreciated. https://dpaste.org/iDNY
[05:16:08] *** Quits: Shoukrun (~Shoukrun@2607:fea8:5b5c:2300:47e:54d1:8938:4d5f) (Quit: Client closed)
[05:16:36] *** Joins: Shoukrun (~Shoukrun@2607:fea8:5b5c:2300:47e:54d1:8938:4d5f)
[05:20:00] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:21:23] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:26:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[05:27:42] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:39:46] *** Quits: Shoukrun (~Shoukrun@2607:fea8:5b5c:2300:47e:54d1:8938:4d5f) (Quit: Client closed)
[05:49:38] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 250 seconds)
[05:51:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:52:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:58:37] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[05:58:39] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:00:30] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:16:13] *** Quits: MiguelX413 (~MiguelX41@108-195-200-10.uvs.frokca.sbcglobal.net) (Ping timeout: 240 seconds)
[06:24:20] *** Quits: astarrh (~astarrh@104-10-253-153.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[06:32:01] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:46:51] *** Joins: alexandros_c (~amcollie@108.60.250.32)
[07:08:19] *** Quits: ahadi (~ahadi@79-40-142-46.pool.kielnet.net) (Ping timeout: 256 seconds)
[07:13:01] *** Joins: ahadi (~ahadi@132-42-142-46.pool.kielnet.net)
[07:31:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:36:48] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:38:55] *** Quits: sreve (~quassel@p549d734b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:39:21] *** Joins: sreve (~quassel@p4ff44dcd.dip0.t-ipconnect.de)
[07:39:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:45:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:49:25] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[07:49:50] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:55:25] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[08:02:10] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:04:46] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[08:11:07] <tm007> MyModel.objects.order_by('-date').distinct('documentname')
[08:11:11] <tm007> this should work
[08:29:21] *** Joins: blag (~blag@071-094-056-144.res.spectrum.com)
[09:01:48] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (Quit: Client limit exceeded: 20000)
[09:05:15] *** Joins: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi)
[09:08:12] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (*.net *.split)
[09:08:12] *** Quits: fikran (~fikran@user/fikran) (*.net *.split)
[09:08:12] *** Quits: jgee (~jgee@186.80.49.20) (*.net *.split)
[09:08:12] *** Quits: w0rp (~w0rp@w0rp.com) (*.net *.split)
[09:08:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:08:12] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (*.net *.split)
[09:08:12] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (*.net *.split)
[09:08:12] *** Quits: lumgwada (~lumgwada@user/lumgwada) (*.net *.split)
[09:08:12] *** Quits: dkliban__ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (*.net *.split)
[09:08:12] *** Quits: justGhost (~justache@user/justache) (*.net *.split)
[09:08:13] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (*.net *.split)
[09:08:13] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[09:08:13] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (*.net *.split)
[09:08:13] *** Quits: wht (~wht@havoc.proulx.com) (*.net *.split)
[09:08:13] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[09:08:13] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[09:08:13] *** Quits: carom (~carom@143.198.135.106) (*.net *.split)
[09:08:13] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[09:08:13] *** Quits: dang`r`us (~eismann@pg.afoo.at) (*.net *.split)
[09:08:13] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[09:08:13] *** Quits: fizzizist (~fizzizist@72.53.248.15) (*.net *.split)
[09:08:13] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:08:13] *** Quits: blag (~blag@071-094-056-144.res.spectrum.com) (*.net *.split)
[09:08:13] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (*.net *.split)
[09:08:13] *** Quits: lod (~lod@cyber-anlage.de) (*.net *.split)
[09:08:14] *** Quits: optiz0r (~quassel@lenore.sihnon.net) (*.net *.split)
[09:08:14] *** Quits: b-rex (van@down.by.the.river.lol) (*.net *.split)
[09:08:14] *** Quits: schinckel (uid38120@id-38120.ilkley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf) (*.net *.split)
[09:08:14] *** Quits: sidmitra (sid17533@id-17533.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: coldmountain (sid484352@id-484352.helmsley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (*.net *.split)
[09:08:14] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[09:08:14] *** Quits: veb (sid43929@id-43929.ilkley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: lucascastro (~lucascast@192-140-51-251.static.oncabo.net.br) (*.net *.split)
[09:08:14] *** Quits: Throgkt (~Throgkt@user/throgkt) (*.net *.split)
[09:08:14] *** Quits: Alan (~alan@user/alan) (*.net *.split)
[09:08:14] *** Quits: nicoz- (unixlab@ubuntu/member/nicoz) (*.net *.split)
[09:08:14] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: niv (~niv@limbo.cypherpunks.io) (*.net *.split)
[09:08:15] *** Quits: captain_morgan (~morgan@oit.cloud) (*.net *.split)
[09:08:15] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[09:08:15] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[09:08:15] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (*.net *.split)
[09:08:15] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (*.net *.split)
[09:08:15] *** Quits: WhyNotHugo (bc7d0f0b52@2604:bf00:561:2000::28) (*.net *.split)
[09:08:15] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[09:08:15] *** Quits: oblikoamorale (~n@user/oblikoamorale) (*.net *.split)
[09:08:15] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[09:08:15] *** Quits: tomate (~hubrecht@125.ip-51-178-27.eu) (*.net *.split)
[09:08:15] *** Quits: hackedhead (hackedhead@2600:3c02::f03c:91ff:fe89:9f14) (*.net *.split)
[09:08:15] *** Quits: catbeard (~noise@user/catbeard) (*.net *.split)
[09:08:15] *** Quits: nathanhi (~nathanhi@user/nathanhi) (*.net *.split)
[09:08:16] *** Quits: e-snail (~pete@user/e-snail) (*.net *.split)
[09:08:16] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[09:08:16] *** Quits: klotzhauer (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[09:08:16] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (*.net *.split)
[09:08:16] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (*.net *.split)
[09:08:16] *** Quits: jug (~jug@user/jug) (*.net *.split)
[09:08:16] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[09:08:16] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[09:08:16] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[09:08:16] *** Quits: jladd (~jladd@c-71-63-157-185.hsd1.or.comcast.net) (*.net *.split)
[09:08:16] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (*.net *.split)
[09:08:16] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[09:08:16] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[09:08:17] *** Quits: sherlock_95 (~sherlock_@static.131.42.161.5.clients.your-server.de) (*.net *.split)
[09:08:17] *** Quits: minto (~mintograd@47.201.5.61) (*.net *.split)
[09:08:17] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[09:08:17] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[09:08:17] *** Quits: dodobrain (~dodobrain@user/dodobrain) (*.net *.split)
[09:08:17] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979) (*.net *.split)
[09:08:17] *** Quits: Spr0cket (sprocket@user/Spr0cket) (*.net *.split)
[09:08:17] *** Quits: d1rewolf (sid312924@id-312924.helmsley.irccloud.com) (*.net *.split)
[09:10:43] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Ping timeout: 256 seconds)
[09:11:47] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[09:12:25] *** Quits: alexandros_c (~amcollie@108.60.250.32) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: glik22_ (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 256 seconds)
[09:12:59] *** Quits: sreve (~quassel@p4ff44dcd.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:13:02] *** Joins: sreve_ (~quassel@p4ff44dcd.dip0.t-ipconnect.de)
[09:14:12] *** Joins: alexandros_c (~amcollie@108.60.250.32)
[09:14:19] *** Joins: glik22_ (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[09:16:33] *** Quits: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:18:05] *** Joins: slavfox (~slavfox@93.158.232.111)
[09:18:19] *** Joins: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi)
[09:21:14] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[09:21:14] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[09:21:14] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[09:21:14] *** Joins: jug (~jug@user/jug)
[09:21:14] *** Joins: koo5_ (~quassel@51.140.155.227)
[09:21:14] *** Joins: cyphase (~cyphase@user/cyphase)
[09:21:14] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[09:21:14] *** Joins: jladd (~jladd@c-71-63-157-185.hsd1.or.comcast.net)
[09:21:14] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[09:21:14] *** Joins: deepy (deepy@user/deepy)
[09:21:14] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[09:21:14] *** Joins: sherlock_95 (~sherlock_@static.131.42.161.5.clients.your-server.de)
[09:21:14] *** Joins: minto (~mintograd@47.201.5.61)
[09:21:14] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[09:22:45] *** Joins: blag (~blag@071-094-056-144.res.spectrum.com)
[09:22:45] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[09:22:45] *** Joins: lod (~lod@cyber-anlage.de)
[09:22:45] *** Joins: optiz0r (~quassel@lenore.sihnon.net)
[09:22:45] *** Joins: b-rex (van@down.by.the.river.lol)
[09:22:45] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[09:22:45] *** Joins: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf)
[09:22:45] *** Joins: sidmitra (sid17533@id-17533.tinside.irccloud.com)
[09:22:45] *** Joins: coldmountain (sid484352@id-484352.helmsley.irccloud.com)
[09:22:45] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[09:22:45] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[09:22:45] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[09:22:45] *** Joins: veb (sid43929@id-43929.ilkley.irccloud.com)
[09:22:45] *** Joins: lucascastro (~lucascast@192-140-51-251.static.oncabo.net.br)
[09:22:45] *** Joins: Throgkt (~Throgkt@user/throgkt)
[09:22:45] *** Joins: nicoz- (unixlab@ubuntu/member/nicoz)
[09:22:45] *** Joins: Alan (~alan@user/alan)
[09:22:45] *** Joins: niv (~niv@limbo.cypherpunks.io)
[09:22:45] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[09:22:45] *** Joins: captain_morgan (~morgan@oit.cloud)
[09:22:45] *** Joins: ST47 (~ST47@wikimedia/st47)
[09:22:45] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[09:22:45] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[09:22:45] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[09:22:45] *** Joins: WhyNotHugo (bc7d0f0b52@2604:bf00:561:2000::28)
[09:22:45] *** Joins: wallbroken (wallbroken@user/wallbroken)
[09:22:45] *** Joins: oblikoamorale (~n@user/oblikoamorale)
[09:22:45] *** Joins: duoi (~duoi@user/duoi)
[09:22:45] *** Joins: e-snail (~pete@user/e-snail)
[09:22:45] *** Joins: tomate (~hubrecht@125.ip-51-178-27.eu)
[09:22:45] *** Joins: hackedhead (hackedhead@2600:3c02::f03c:91ff:fe89:9f14)
[09:22:45] *** Joins: catbeard (~noise@user/catbeard)
[09:22:45] *** Joins: nathanhi (~nathanhi@user/nathanhi)
[09:22:45] *** Joins: rb (~augh@theguntretort.com)
[09:23:35] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[09:23:35] *** Joins: fikran (~fikran@user/fikran)
[09:23:35] *** Joins: jgee (~jgee@186.80.49.20)
[09:23:35] *** Joins: w0rp (~w0rp@w0rp.com)
[09:23:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:23:35] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[09:23:35] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[09:23:35] *** Joins: lumgwada (~lumgwada@user/lumgwada)
[09:23:35] *** Joins: dkliban__ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[09:23:35] *** Joins: justGhost (~justache@user/justache)
[09:23:35] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[09:23:35] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[09:23:35] *** Joins: dodo (~dodo@user/dodo)
[09:23:35] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[09:23:35] *** Joins: wht (~wht@havoc.proulx.com)
[09:23:35] *** Joins: simplicity (~yti@user/simplicity)
[09:23:35] *** Joins: carom (~carom@143.198.135.106)
[09:23:35] *** Joins: dlam (~dlam@dlam.me)
[09:23:35] *** Joins: dang`r`us (~eismann@pg.afoo.at)
[09:23:35] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[09:23:35] *** Joins: fizzizist (~fizzizist@72.53.248.15)
[09:23:35] *** Joins: flynn (~mcbloch@user/flynn)
[09:24:07] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:24:07] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979)
[09:24:07] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[09:24:51] *** Joins: d1rewolf (sid312924@id-312924.helmsley.irccloud.com)
[09:25:29] *** Quits: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:25:58] *** Joins: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi)
[09:27:26] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[09:27:43] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[09:28:46] *** Joins: alex_c (~amcollie@108.60.250.32)
[09:28:51] *** Quits: glik22_ (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 256 seconds)
[09:29:10] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[09:29:12] *** Joins: glik22_ (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[09:29:25] *** Quits: alexandros_c (~amcollie@108.60.250.32) (Ping timeout: 256 seconds)
[09:29:35] *** Joins: slavfox (~slavfox@93.158.232.111)
[09:30:30] *** Quits: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[09:31:51] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[09:33:12] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[09:35:51] *** Joins: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi)
[09:36:32] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:36:47] *** Joins: rowbots (~dirgeable@h64-17-89-214.arvdco.broadband.dynamic.tds.net)
[09:37:11] *** Joins: ekathva (~ekathva@2001:999:51:be01:ece4:95d6:ed47:f97a)
[09:38:41] *** Quits: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:38:49] *** Joins: MiguelX413 (~MiguelX41@108-195-200-9.uvs.frokca.sbcglobal.net)
[09:49:28] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[09:49:55] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:52:13] *** Joins: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi)
[09:58:16] *** Quits: mattil (~mattil@d5wl4wfl84-ms4kbyxf-4.rev.dnainternet.fi) (Ping timeout: 245 seconds)
[10:03:37] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Ping timeout: 240 seconds)
[10:04:28] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[10:09:04] *** Joins: rstuart (~rstuart@115.113.218.139.sta.wbroadband.net.au)
[10:09:30] <serafeim> hello friends
[10:09:42] <PaulWay[w]> Hi serafeim
[10:21:46] <rstuart> can someone help get a clue with django-rest?  I have a model with two fields, say a & b, and lets say they can't both be 0.  So if someone does a ViewSet.create/update({'a': 0}), I have verify b isn't also 0 - possibly reading the row to get it.  Where does that sort of validation usually go?
[10:24:56] <PaulWay[w]> I'd say in the form validation.
[10:25:03] <PaulWay[w]> Sorry, the serializer validation.
[10:27:32] <beastDivision> is it just that they can't both be zero specifically, or that they have to be unique together? cause you can use unique_together if that is the case
[10:27:33] <PaulWay[w]> You're feeding that ViewSet.create into a serializer, that checks the data given and either returns the data or raises a ValidationError
[10:27:33] <rstuart> But ... the serializer.validate() doesn't know what row is being update.  The attrs only contains the fields being changed, so if it's {'a': 0} it only sees that - it doesn't even get the pk.
[10:28:09] <PaulWay[w]> You're not feeding this into a serializer?
[10:29:01] <PaulWay[w]> I'm struggling to understand the situation in which you're using `create` and yet you're checking it against an existing row.
[10:29:23] <rstuart> I made the case up, actually.  There are actually 3 interrelated fields, that have to be cross checked.  No canned check will do it.  I put the cross check in the model.clean(), but now realise it's not called.
[10:30:17] <rstuart> PaulWay[w]: create would not check an existing row.  It has all the fields available to it.  But ViewSet.partial_update() won't.
[10:31:17] <PaulWay[w]> But the partial_update also knows what row is being updated.
[10:31:47] <PaulWay[w]> In that case I'd do the check in the partial_update method.
[10:32:55] <rstuart> It does, but the invariant belongs in the modem if you follow the "fat model, think view" mantra.  And if put it in ViewSet.partial_update(), I have to put the same check in ViewSet.create() which isn't very DRY.
[10:33:15] <PaulWay[w]> Nah, do wht works.
[10:36:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 250 seconds)
[10:38:47] <rstuart> I guess that's my is I had those checks in model.clean() as it seemed like a nice central place to do all model level checks (ie, where you can cross validate fields).  But I've just realised dganjo-rest never calls clean(), so I went looking for the nice other central place django-rest must use instead.  But it appears there isn't one.  I guess I'm here to confirm there really isn't one, and I haven't missed something.
[10:41:30] <PaulWay[w]> Sure.  The model is a reasonable place to put a 'check interrelated fields' method.  Then call it from wherever.
[10:42:45] <PaulWay[w]> The view is the right place to do whatever other check logic you need.  The model is the obvious place to centralise knowledge about the validity of this object.
[10:49:02] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:53:24] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 250 seconds)
[10:54:31] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[10:59:28] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:c851:b3f:6686:979) (Ping timeout: 250 seconds)
[11:05:33] *** Joins: djapo (~archangel@user/djapo)
[11:07:30] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:07:31] *** Joins: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net)
[11:12:12] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Client Quit)
[11:15:49] *** Quits: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[11:19:26] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[11:19:53] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Client Quit)
[11:25:50] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:34:42] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[11:34:53] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[11:35:31] *** Joins: Atque (~Atque@user/atque)
[11:37:26] *** Quits: alex_c (~amcollie@108.60.250.32) (Ping timeout: 260 seconds)
[11:45:58] *** Joins: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net)
[11:51:16] *** Joins: mrwick (~mrwick@user/mrwick)
[11:58:33] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[11:58:45] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:03:52] *** Quits: blag (~blag@071-094-056-144.res.spectrum.com) (Ping timeout: 250 seconds)
[12:09:30] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:e425:c408:c7f3:a201)
[12:11:35] *** Joins: slav0nic (slav0nic@python.su)
[12:24:08] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[12:29:29] *** Joins: xkuru (~xkuru@user/xkuru)
[12:32:55] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[12:33:11] *** Joins: mrwick (~mrwick@user/mrwick)
[12:36:50] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:37:14] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[12:42:40] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:50:57] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Remote host closed the connection)
[12:53:01] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 250 seconds)
[12:54:00] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[12:59:55] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:01:04] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[13:06:21] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[13:07:18] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[13:15:31] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[13:19:39] *** Joins: newdimension (~newdimnes@user/newdimension)
[13:19:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[13:27:09] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[13:31:39] *** Joins: daniel3 (daniel@user/daniel2)
[13:32:34] *** Quits: ekathva (~ekathva@2001:999:51:be01:ece4:95d6:ed47:f97a) (Remote host closed the connection)
[13:32:53] *** Joins: ekathva (~ekathva@2001:999:51:be01:60a9:bdc2:476c:b11b)
[13:33:32] *** Quits: daniel2 (daniel@user/daniel2) (Ping timeout: 240 seconds)
[13:34:06] *** Quits: ekathva (~ekathva@2001:999:51:be01:60a9:bdc2:476c:b11b) (Read error: Connection reset by peer)
[13:39:13] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[13:41:34] *** Joins: theprophet (~theprophe@85.114.228.184)
[13:58:13] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:58:21] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[13:59:20] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[13:59:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (platinum.libera.chat (Nickname regained by services)))
[13:59:55] *** vinleod is now known as vdamewood
[14:15:06] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[14:26:42] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[14:32:48] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[14:44:26] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[14:49:42] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[14:55:34] <vancha112[m]> Hey everyone :) I have an application where I want a user to be able to make changes to a model, that's only visible as a tabularinline inside another model which they are not allowed to change. Is there any possibility to make that happen?
[14:56:31] <vancha112[m]> It looks like they need to be able to "save" changes to the outer model before they can change inline models. I don't want to give them that permission.
[15:02:28] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[15:03:16] *** Joins: pro_z_ (~pro_z@37.214.55.61)
[15:12:38] <GinFuyou> vancha112[m], what kind of relation you mean exactly? That doesn't sound correct and anyway any changes can be restricted if needed
[15:12:38] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[15:17:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:18:08] <vancha112[m]> Doesn't look like there's a way to do this at all currently.. that's a bummer :9
[15:20:15] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[15:23:35] <GinFuyou> vancha112[m], huh?
[15:24:08] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[15:25:38] <vancha112[m]> GinFuyou: I have a model A which points to another model B through a foreignkey. In the admin interface, In the admin interface, model B is a modeladmin, which has model A, a tabularinline, set as an inline.
[15:25:59] <vancha112[m]> the goal is for some users to be able to edit model A, but not B. :o
[15:27:04] <GinFuyou> Users shouldn't access admin at all =P
[15:27:15] <vancha112[m]> Giving users permission to "change" a but not b, doesn't really change anything, because if the users doesn't  have permission to change B, no save button will show up to make changes to A. Maybe a screenshot will help though :o
[15:27:22] <GinFuyou> But technically I still not seing reason why it wouldn't be possible
[15:27:53] <vancha112[m]> well because there's no way to make changes because there's no way to save or edit  a :)
[15:27:55] <GinFuyou> Yes, not through permissions, at least not just through them
[15:28:13] <GinFuyou> You can restrict *what* can be changed
[15:29:03] <vancha112[m]> GinFuyou: can I make it so that they can change the inline but not the outer model?
[15:29:40] <vancha112[m]> I think the permissions are set correctly, B can be viewed, but not edited, and A can be viewed and edited.
[15:30:24] <tm007> vancha112[m]: why don't you do this
[15:30:25] <GinFuyou> It's still form for B, so for admin defaults B must be editable
[15:30:49] <tm007> allow edit permission for A but make all the fields readonly
[15:30:50] <GinFuyou> But you should be able to make a form for only related field
[15:31:26] <tm007> vancha112[m]: does that make sense?
[15:31:28] <vancha112[m]> An alternative way i tried was to show up B as an inline for A in another admin panel, but i can't make that happen because foreignkeys only work one way :o
[15:32:05] <pycode1> hello
[15:32:10] <tm007> set has_change_permission to true for A, but make the fields of A readonly
[15:32:16] <vancha112[m]> tm007: the goal is to be able to make this work for multiple groups and users, should i have to do manually set those fields to read only?
[15:32:20] <pycode1> how can we write a string as expression using the django orm ?
[15:32:26] <pycode1> one moment i will show an exmaple
[15:32:28] <tm007> that should give you the edit button
[15:32:36] <tm007> i mean save button
[15:32:40] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[15:33:04] <pycode1> i have JsonBuildObject that is basically https://bpa.st/7EBQ
[15:33:17] *** Joins: rusrushal13 (~rusrushal@2401:4900:4474:e72c:9ed4:c78e:5c00:4738)
[15:33:25] <vancha112[m]> GinFuyou: one that shows up on B's page? that would be great, but any other way would be better than none :)
[15:33:35] <pycode1> i use it doing https://bpa.st/HKFQ
[15:33:41] <pycode1> where you see Value('ts')
[15:33:50] <pycode1> i woul dlike to write "ts" <-- as string
[15:34:01] <pycode1> but django write ts without quotes
[15:34:07] <pycode1> and the query does not work properly
[15:34:12] <tm007> vancha112[m]:  no user can change A? But some can change the inline B?
[15:34:17] <vancha112[m]> tm007: There's still other users/groups that should be able to make changes though :o
[15:34:28] <vancha112[m]> an admin can change both
[15:34:35] <vancha112[m]> some users can change a but not b
[15:34:37] <GinFuyou> vancha112[m], you can pick form class dynamically
[15:34:39] <vancha112[m]> others can change B and A
[15:34:45] <tm007> hmm that complicates things further
[15:35:35] <GinFuyou> vancha112[m], https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_form
[15:37:48] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[15:39:11] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[15:39:40] <vancha112[m]> hmm alright :o So I could check the permission of the user that's trying to view the form for B with that, and if they lack the required permission to edit b, I'd just load the form for a?
[15:40:07] <serafeim> vancha112[m]: no.
[15:40:13] <serafeim> you'll need get_form_class for that
[15:40:33] <serafeim> actually you can do it through get_form but the correct way is through get_form_class
[15:41:20] <GinFuyou> serafeim, I'm not sure ModelAdmin has it?
[15:41:45] <serafeim> ah i guess you're right
[15:41:59] <vancha112[m]> no doens't seem to be listed :)
[15:42:05] <GinFuyou> For typical CBVs, sure get_form_class is way to go
[15:42:27] <serafeim> yes yes i thought we were talking about the CBV
[15:42:28] <GinFuyou> ModelAdmin is more complicated
[15:42:56] <vancha112[m]> just my luck :P
[15:43:33] <GinFuyou> but idea is still the same. Give users different forms based on permissions or whatever you need
[15:44:23] <GinFuyou> Not sure if inlines make it problematic or not, but should work one way or other
[15:44:47] <vancha112[m]> I'll try and mess around with it to find out how it works first :) Thanks for the help!
[15:48:51] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[15:50:31] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[15:55:21] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:e425:c408:c7f3:a201) (Ping timeout: 245 seconds)
[15:55:21] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[15:56:14] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[15:57:35] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 256 seconds)
[15:59:47] *** Quits: lucascastro (~lucascast@192-140-51-251.static.oncabo.net.br) (Remote host closed the connection)
[16:01:13] *** Joins: lucascastro (~lucascast@192-140-51-251.static.oncabo.net.br)
[16:05:08] *** Quits: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[16:07:33] *** Joins: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net)
[16:12:50] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[16:14:51] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[16:21:44] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[16:23:39] *** Quits: rusrushal13 (~rusrushal@2401:4900:4474:e72c:9ed4:c78e:5c00:4738) (Ping timeout: 256 seconds)
[16:26:57] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[16:26:58] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[16:28:35] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[16:35:39] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[16:38:09] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[16:39:29] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:45:04] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[16:50:36] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[16:53:23] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[16:53:55] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Client Quit)
[16:54:23] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[16:59:54] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 260 seconds)
[17:03:15] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[17:05:39] *** Joins: theprophet (~theprophe@85.114.228.184)
[17:07:46] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:ce9b:72d3:193b:3816)
[17:08:46] *** Joins: humancalico (~humancali@2001:470:69fc:105::d1ce)
[17:10:00] <pycode1> back, hello again is there a way to write a string in django orm inside a custom function? for example lets suppose a code like Func(Value("epoch"), F('week_dt'), function='date_part')
[17:10:08] <pycode1> i would like to write 'epoch' instead
[17:10:11] <pycode1> how can i do that?
[17:10:56] <humancalico> Hey, I was reading the documentation on deploying Django [here](https://docs.djangoproject.com/en/4.0/howto/deployment/) and I found since it's a "web framework" it needs a web server to work. So how does it work when I'm running it locally? Does it operate without a webserver?
[17:11:36] <GinFuyou> It runs built-in minimal webserver
[17:12:31] <humancalico> So can I run that in production. What would be the difference if I use that or something else?
[17:13:12] <GinFuyou> No, documentation should clearly say that it's only for development
[17:14:16] <GinFuyou> And you still may want separate fron webserver for serving media \ static if you don't use CDN
[17:14:29] <humancalico> Alright. Thanks!
[17:15:23] <GinFuyou> Common choices are Nginx + gunicorn and ngingx + uwsgi
[17:16:35] <humancalico> Thanks!
[17:17:54] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:24:24] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[17:25:17] *** Joins: slav0nic (slav0nic@python.su)
[17:28:23] <pycode1> anyone?
[17:30:42] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:24] *** Joins: Timvde (~tim@towely.vdeynde.com)
[17:33:38] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:35:35] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 252 seconds)
[17:35:49] *** Quits: mxp (~mxp@185.16.205.131) (Ping timeout: 240 seconds)
[17:36:24] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[17:38:04] *** Joins: mxp (~mxp@185.16.205.131)
[17:38:20] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[17:39:35] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[17:41:30] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[17:42:34] *** Joins: mattil (~mattil@176-93-144-248.bb.dnainternet.fi)
[17:42:43] *** Joins: Atque (~Atque@user/atque)
[17:45:29] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[17:47:09] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[17:47:10] *** Quits: mattil (~mattil@176-93-144-248.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[17:53:55] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[17:56:52] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Read error: No route to host)
[17:58:03] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[18:00:33] *** Quits: kurfen_ (~kurfen@176.119.195.10) (Ping timeout: 256 seconds)
[18:02:30] *** Joins: kurfen (~kurfen@213.152.188.7)
[18:02:54] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Read error: No route to host)
[18:04:39] <pycode1> schinckel, are you there?
[18:04:40] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[18:06:27] <wez> pycode1: I am here
[18:06:33] <pycode1> wez, hi!
[18:06:46] <pycode1> thanks for replying
[18:06:48] <pycode1> i have a problem
[18:06:51] <pycode1> i am trying to implement
[18:07:02] <wez> pycode1: I don't know the answer to your question though, without doing it for you, which I don't really want to do.
[18:07:02] <pycode1> Func(Value("epoch"), F('week_dt'), function='date_part')
[18:07:34] <pycode1> the problem here is that i need to find a way to WRITE that epoch as 'epoch'
[18:07:59] <pycode1> using this code isee date_part(epoch, "field")
[18:08:02] <pycode1> but it should be
[18:08:06] <wez> pycode1: Infact it's nearly 2AM here, which is why s.chinckel isn't responding to you, I am going to sleep it
[18:08:09] <pycode1> date_part('epoch', "field")
[18:08:24] <pycode1> ok
[18:08:49] <wez> pycode1: I number of people here are +11:00 UTC
[18:09:14] <wez> I = A
[18:09:59] <gordonjcp> it's nearly 3pm here in beautiful sunny Scotland
[18:10:15] <pycode1> 3:40 italy
[18:10:16] <pycode1> :)
[18:12:29] <wez> mmmmm, Scotchland
[18:12:30] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[18:12:40] <wez> pycode1: I miss Elgain
[18:19:35] *** Joins: mattil (~mattil@78-27-109-229.bb.dnainternet.fi)
[18:22:41] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: leaving)
[18:24:22] *** Quits: mattil (~mattil@78-27-109-229.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[18:25:30] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[18:30:42] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[18:32:29] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[18:32:48] *** Joins: Saltssaumure (~Saltssaum@81.111.249.26)
[18:33:17] *** Joins: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6)
[18:36:53] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:37:18] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[18:41:26] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[18:44:35] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[18:46:18] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[18:49:55] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[18:50:20] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Client Quit)
[18:50:55] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Remote host closed the connection)
[18:52:52] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[18:52:52] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[19:05:29] *** Joins: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl)
[19:08:21] <Saltssaumure> What happens if you give Django a port that another program is already using?
[19:11:13] *** daniel3 is now known as daniel2
[19:15:46] *** Quits: Stefan92 (~stefan92@84-30-13-229.cable.dynamic.v4.ziggo.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:25:57] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[19:36:50] *** Quits: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[19:38:37] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[19:39:41] <moldy> Saltssaumure: by django you mean runserver? it will fail to start and give you an error message
[19:40:01] <Saltssaumure> yep that's it, thanks!
[19:56:30] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[19:58:11] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[20:03:45] *** Quits: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9) (Ping timeout: 250 seconds)
[20:05:58] *** Joins: alex_c (~amcollie@108.60.250.32)
[20:12:30] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[20:17:18] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[20:17:30] *** Quits: alex_c (~amcollie@108.60.250.32) (Quit: Konversation terminated!)
[20:21:04] *** Quits: newdimension (~newdimnes@user/newdimension) (Read error: Connection reset by peer)
[20:25:14] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:ce9b:72d3:193b:3816) (Ping timeout: 260 seconds)
[20:28:42] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[20:31:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[20:33:55] *** Joins: alexandros_c (~amcollie@108.60.250.32)
[20:34:34] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:39:24] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[20:40:54] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[20:45:54] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[20:49:12] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[20:53:13] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[20:57:55] *** Quits: sreve_ (~quassel@p4ff44dcd.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:58:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:58:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:01:59] *** Joins: sreve (~quassel@p4ff44dcd.dip0.t-ipconnect.de)
[21:24:02] *** Quits: sreve (~quassel@p4ff44dcd.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:24:19] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[21:38:53] *** Joins: jmd (~user@de.cellform.com)
[21:39:49] <jmd> Is there a signal or other kind of hook used when runserver starts?
[21:48:06] <Xof> jmd runserver in particular, or when the apps are loaded?
[21:52:50] <jmd> Xof: Just runserver I think.  I don't want it to run for example when I call ./manage.py migrate or any other admin commands.
[21:54:09] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[21:54:56] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[22:05:25] *** Joins: aselman4 (~aselman4@ashpr008-p2.nls.ford.com)
[22:05:29] *** Parts: aselman4 (~aselman4@ashpr008-p2.nls.ford.com) ()
[22:06:30] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[22:07:38] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:16:32] *** Joins: Guddu (~Guddu@59.88.88.82)
[22:21:16] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Quit: Kalov)
[22:28:35] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:34:03] *** Joins: ekathva (~ekathva@2001:999:51:be01:2c4a:6b25:b5d5:f2c9)
[22:37:48] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Quit: Client closed)
[22:38:55] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[22:41:03] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Ping timeout: 256 seconds)
[22:41:20] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[22:41:51] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[22:42:11] *** Quits: kurfen (~kurfen@213.152.188.7) (Ping timeout: 256 seconds)
[22:42:31] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:45:41] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:50:16] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:50:20] *** Quits: pro_z_ (~pro_z@37.214.55.61) (Ping timeout: 256 seconds)
[22:50:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[23:10:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:15:03] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 256 seconds)
[23:15:31] *** Joins: Atque (~Atque@user/atque)
[23:19:27] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:34:54] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[23:36:51] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[23:43:53] *** Joins: Harlin (~DonQixote@75-163-148-159.clsp.qwest.net)
[23:54:33] *** Joins: alex_c (~amcollie@108.60.243.167)
[23:54:56] *** Quits: alexandros_c (~amcollie@108.60.250.32) (Ping timeout: 256 seconds)
