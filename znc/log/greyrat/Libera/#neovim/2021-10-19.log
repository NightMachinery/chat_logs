[00:00:11] <mjlbach[m]> the former is slightly more tricky for me to implement as I don't have a good test case in mind
[00:01:23] <sim[m]> ok ill make it into two issues then
[00:01:49] <Mathias[m]> sim[m]: The rename implementation as is at least works for class name rename with jdtls. That's what I had tested it with and I use it occasionally
[00:03:43] <sim[m]> thats cool, i think we should leave the wil/did rename stuff from core till we have a concrete use case for the notifs being sent in apply_workspace_edits
[00:04:00] <Mathias[m]> And willRename is an additional optional capability 
[00:04:15] <kylo252[m]> is it too late for lsp features requests?
[00:04:16] <sim[m]> s/wil/will/
[00:04:22] *** Joins: Pdroman (~Android@93.red-79-156-174.staticip.rima-tde.net)
[00:04:30] <clason[m]> like `willTravel`?
[00:05:18] <Mathias[m]> (Added with 3.16.0) 
[00:06:03] <sim[m]> https://github.com/neovim/neovim/issues/16078 i closed the old one
[00:07:26] <kylo252[m]> can `lsp.log` get some love? you can even create a list of whatever features missing from it and we can work on it. 
[00:07:26] <kylo252[m]> https://github.com/neovim/neovim/blob/bedb42257ef1e05ddde37be4ddae112b60fab750/runtime/lua/vim/lsp/log.lua#L5
[00:09:04] <sim[m]> and here are the nvim tree changes https://github.com/simrat39/nvim-tree.lua/commit/d2964a56dde9245e16a110ffddadf1f17559eee0
[00:15:06] <ChipSenkbeil[m]> mjlbach: curious if there's any way to do this today: https://github.com/neovim/neovim/issues/16079
[00:15:49] <mjlbach[m]> IDTS but that would be a cool feature, pretty sure that's the basis for TRAMP in emacs
[00:16:06] <mjlbach[m]> You could probably hack something together with pipes to a shell process
[00:16:36] <ChipSenkbeil[m]> Yeah, I'm wondering if there's a way to hack it today. Distant doesn't have any shell support right now, so it isn't a priority.
[00:16:49] <ChipSenkbeil[m]> But it's the next big feature on the list.
[00:19:50] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:20:13] <Mathias[m]> <sim[m]> "and here are the nvim tree..." <- That might break once the support is in core
[00:20:14] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[00:20:43] <Mathias[m]> Or at least confuse language servers because of duplicate notifications
[00:20:49] *** Quits: sammie (~sammie@users-nat.ccs.neu.edu) (Ping timeout: 265 seconds)
[00:22:23] <sim[m]> Mathias[m]: hm why would that be? nvim-tree doesnt use anything from nvim-core to rename files so itll still need to send the notif
[00:23:06] <sim[m]> * the notif while renaming
[00:23:38] <Mathias[m]> Isn't vim.lsp.util.apply_workspace_edit(ret.result) doing the rename?
[00:24:42] <sim[m]> no, nvim tree does its own stuff for renaming, we tell the language server that something was renamed, the language server sends back a workspace edit which changes imports or whatever
[00:25:21] <sim[m]> if the workspace edit sent by the server needs a rename/add/delete, then we would need core to again send a new notification before/after doing the file changes
[00:27:18] <sim[m]> the workspace edit doesnt do the main renaming, that is still done by nvim-tree ig
[00:27:55] <ChipSenkbeil[m]> mjlbach: there is [uv.new_tty](https://github.com/luvit/luv/blob/master/docs.md#uvnew_ttyfd-readable), so maybe it can be connected to a terminal buffer? Just trying to think how to connect it back such that it associates with a neovim buffer.
[00:28:23] <Mathias[m]> sim[m]: Ah, alright
[00:28:39] <mjlbach[m]> Yeah I was thinking of that
[00:28:47] <Mathias[m]> But in that case the file watching may end up interfering 
[00:28:57] <mjlbach[m]> Do you just want a tty "buffer"?
[00:29:06] <mjlbach[m]> you could hack something together like bjorn did in nvim-luadev
[00:29:07] <sim[m]> the language server should handle that
[00:29:15] <sim[m]> and the file watching events dont include a rename anyways
[00:30:25] <sim[m]> only change/add/delete
[00:35:40] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[00:35:44] <ChipSenkbeil[m]> <mjlbach[m]> "you could hack something..." <- I'll have to check it out. I don't have a strong understanding of the concept as I've never worked with ptys or ttys directly.
[00:35:44] <ChipSenkbeil[m]> In my head, what I want to be able to do is something like `DistantShell` and it opens a buffer that is a shell just like neovim's terminal, but obviously the shell is on the remote machine where distant's server is located. The challenge is that I don't have a process to spawn where I could just use termopen(). Instead, I'd be relaying interaction on the buffer to the remote server and output from that side back to the buffer.
[00:36:41] <mjlbach[m]> That would be cool, might be able to expose some of the same TUI type code (alternative backend to vterm) but I think it would be easier to just use a floating window
[00:36:45] <mjlbach[m]> * floating window/do buffer edits
[00:43:17] <Mathias[m]> prompt buffer + nvim_open_term could be an option
[00:47:41] <ChipSenkbeil[m]> I wasn't aware of nvim_open_term or prompt buftype. Definitely food for thought.
[00:50:11] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 264 seconds)
[00:52:22] *** Joins: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net)
[00:58:54] *** Joins: szgy (~szgy@181.47.27.68)
[01:05:20] *** Joins: sammie (~sammie@users-nat.ccs.neu.edu)
[01:05:49] *** Quits: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:08:24] *** Quits: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net) (Quit: Client closed)
[01:11:02] *** Joins: cjb (~cjb@user/cjb)
[01:18:00] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[01:40:37] <ChipSenkbeil[m]> mjlbach: I gave nvim-lspconfig another look and at first glance the list of different filesystem and process calls is fairly short. I'm tracking it here along with what would be used to do the equivalent with distant: https://github.com/chipsenkbeil/distant.nvim/issues/45
[01:40:37] <ChipSenkbeil[m]> A quick hack could be to do the injection I mentioned. I think you said there was some hook that could be tapped into? Maybe to wrap the root_dir function so it can be determined if it is running on a remote buffer or local one and proceed accordingly?
[01:42:04] <ChipSenkbeil[m]> The ideal approach is a limited api or something to use, but this could be something to support the plugin in its current state.
[01:43:16] <dmc> https://github.com/vim/vim/issues/869#issuecomment-946184301
[01:44:02] <mjlbach[m]> Chip Senkbeil: https://github.com/neovim/nvim-lspconfig/commit/4d2239d258388cb69fa656a35ae16e34267d92c8
[01:44:10] <mjlbach[m]> util.on_setup
[01:44:15] <mjlbach[m]> global hook you can use
[01:45:42] <ChipSenkbeil[m]> Cool
[01:53:12] *** Joins: frebtherat (~frebthera@c-68-81-228-217.hsd1.de.comcast.net)
[01:57:53] *** Joins: Gerlo (~Gerlo@user/gerlo)
[02:00:19] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[02:00:37] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[02:01:07] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Client Quit)
[02:01:30] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[02:11:03] *** Quits: frebtherat (~frebthera@c-68-81-228-217.hsd1.de.comcast.net) (Quit: Client closed)
[02:11:21] *** Joins: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net)
[02:11:43] *** Quits: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net) (Client Quit)
[02:16:13] <AtomToast> Hey everyone. I have been using nvim-lsp for little bit now but there are still some annoyances I haven't figured out yet.
[02:16:13] <AtomToast> For example when hovering or looking at diagnostics and then jumping into another file (for example going to definition or ctrl+o) the floating window stays around. I then have to go and select it and kill it every time.
[02:16:13] <AtomToast> Does anyone know if this is a bug or at least have a clean workaround? I can't be the only one.
[02:16:13] <AtomToast> Here my config for reference: https://codeberg.org/AtomToast/dotfiles/src/branch/master/.config/nvim
[02:18:06] <mjlbach[m]> Most floats should close automatically when you leave them
[02:19:26] <AtomToast> Is the issue then maybe that I don't actually have the focus inside of the window when doing the hover?
[02:19:26] <AtomToast> Normally it closes when then just moving the cursor around. Just not when switching files somehow
[02:19:30] <hwrd> anyone with MacOS recently run into a bunch of `-bash: fork: Resource temporarily unavailable" errors? seems to happen after I open nvim, specifically after running `require'telescope.builtin'.git_files`....
[02:20:25] <hwrd> something is just eating up my pty allotment..
[02:20:39] <mjlbach[m]> > <@atomtoast:envs.net> Is the issue then maybe that I don't actually have the focus inside of the window when doing the hover?
[02:20:39] <mjlbach[m]> > Normally it closes when then just moving the cursor around. Just not when switching files somehow
[02:20:39] <mjlbach[m]> Not sure, I just tested it on the latest nightly and c-i to another file closes the hover as expected
[02:22:50] <AtomToast> mjlbach[m]: Weird. Do you also just call `lua vim.lsp.buf.hover()`?
[02:23:00] <mjlbach[m]> Yup
[02:23:05] <mjlbach[m]> Are you on the latest nightly?
[02:23:16] <AtomToast> actually not sure atm, lemme check
[02:23:18] <AtomToast> ;
[02:23:38] <mjlbach[m]> The last thing that was touched with this should have been prior to 0.5
[02:24:06] <AtomToast> I do run nightly though not latest, let me get that real quick
[02:26:20] <AtomToast> updating fixed it :0
[02:26:20] <AtomToast> I actually thought I switched to 0.5 stable after it got released tbh
[02:27:10] <AtomToast> guess I have to go rebuild nvim more often when there is weird stuff happening
[02:27:52] *** Joins: Guest15 (~Guest15@152.67.220.169)
[02:30:35] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:32:08] *** Joins: brother_cat[m] (~brotherca@2001:470:69fc:105::f8f9)
[02:33:31] *** Joins: rockorager (root@2600:3c03::f03c:92ff:feed:820d)
[02:35:15] <rockorager> Hello neovimers, I have a question about tree-sitter queries
[02:36:53] <rockorager> I want to highlight multiple languages in a single file (go templates + html). I can't seem to find a way to do it, and the docs say only one query file will be loaded. Is there a way to do this?
[02:59:11] *** Quits: arthurpbs (~arthurpbs@168.121.98.124) (Ping timeout: 264 seconds)
[03:04:33] *** Joins: crzjp (~crzjp@177.128.197.157)
[03:06:20] *** Quits: crzjp (~crzjp@177.128.197.157) (Client Quit)
[03:09:53] *** Quits: szgy (~szgy@181.47.27.68) (Remote host closed the connection)
[03:12:44] *** Joins: arthurpbs (~arthurpbs@168.121.99.146)
[03:14:21] <kronicmage> last i checked in on this things were still wonky in this regard -- i remember markdown in praticular had crashes when this was attempted
[03:14:27] <kronicmage> that was in late 2020 though so things might have changed by now
[03:21:05] *** Quits: blaklistd (~blaklistd@user/blaklistd) (Quit: The Lounge - https://thelounge.chat)
[03:22:52] <elianiva[m]> <rockorager> "I want to highlight multiple..." <- you'd need to make a parser for go template
[03:23:38] <elianiva[m]> <kronicmage> "last i checked in on this things..." <- yeah, markdown parser is still wonky
[03:23:38] <elianiva[m]> but other parsers have been pretty solid for me
[03:24:02] *** Joins: blaklistd (~blaklistd@user/blaklistd)
[03:28:42] <rockorager> elianiva[m]: I have an installed go template parser (if I disable html, I get go template highlighting)
[03:29:49] <rockorager> I checked it's module info, says it's capable of highlighting.I have a queries/gotmpl/highlights.scm file. And like I mentioned, it works if I disable the html one
[03:30:03] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[03:32:30] <rockorager> I tried putting the query in /after/queries/ thinking it might 'extend' the base html one but it didn't
[03:35:33] *** Joins: drewbags[m] (~drewbagsm@2001:470:69fc:105::1:1d6c)
[03:36:28] *** Parts: drewbags[m] (~drewbagsm@2001:470:69fc:105::1:1d6c) ()
[03:40:07] *** Quits: blaklistd (~blaklistd@user/blaklistd) (Quit: The Lounge - https://thelounge.chat)
[03:41:45] *** Joins: chenqisu1 (~xirndc@183.217.203.91)
[03:41:56] *** chenqisu1 is now known as chenqisu12
[03:45:08] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[03:55:56] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 245 seconds)
[03:58:13] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[03:59:53] <ShougoShougo[m]> https://github.com/vim/vim/pull/9016
[04:00:03] <ShougoShougo[m]> I have fixed `getcompletion()` problems.
[04:00:12] <ShougoShougo[m]> It is only two lines :-)
[04:06:34] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 258 seconds)
[04:09:25] *** Joins: js3z (~js3z@146.115.76.107)
[04:18:19] *** Joins: khadegd (~khadegd@59.95.191.248)
[04:19:48] *** Quits: khadegd (~khadegd@59.95.191.248) (Client Quit)
[04:35:01] <sim[m]> Mathias: could you take a look at this smol PR https://github.com/neovim/neovim/pull/16048 please? its just a small ui change to codelens'
[05:12:11] *** Quits: emf_ (~emf@2620:10d:c090:400::5:a662) (Ping timeout: 245 seconds)
[05:12:30] *** Quits: Guest15 (~Guest15@152.67.220.169) (Quit: Client closed)
[05:13:44] *** Joins: cjb94216 (~cjb@user/cjb)
[05:15:52] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[05:16:28] *** cjb94216 is now known as cjb
[05:18:53] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:19:16] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:22:45] *** Quits: Unulan (~Unulan@88.244.94.240) (Ping timeout: 256 seconds)
[05:24:02] *** Quits: js3z (~js3z@146.115.76.107) (Ping timeout: 260 seconds)
[05:31:00] *** Quits: jaykelly450 (~vagrant@c-73-82-49-38.hsd1.ga.comcast.net) (Quit: WeeChat 3.0)
[05:42:11] <ChipSenkbeil[m]> mjlbach: I think `vim.nvim_open_term` + `vim.nvim_chan_send` may work for output to a neovim-controlled terminal. From the open issue, `vim.on_key` could be a way to capture all of the keystrokes so I can relay them to the remote pty. In order to filter the callback to only be processed when on the terminal buffer, I figure I'll need to have a conditional based on `vim.api.nvim_get_current_buf()`. Wanted to check if that seems like the
[05:42:11] <ChipSenkbeil[m]> best way to get the keystrokes for a specific buffer when it's active, or if there's a better way.
[05:42:11] <ChipSenkbeil[m]> I imagine `vim.on_key` is pretty expensive as it's triggered on every keystroke within neovim. If there's a better way to capture all input targeting a single buffer, I'd be open to it. Setting the buftype to `prompt` seemed promising, but the callback is only triggered on complete lines and it also has a prompt at the bottom to my understanding; so, it's not quite what I want.
[05:44:06] <mjlbach[m]> Do you have to use on_key, or could you just yank the post prompt -> terminating newline and send that based on when the user hits enter? 
[05:44:16] <mjlbach[m]> And then just send the chunk
[05:44:45] <ChipSenkbeil[m]> Well, this is sending keys to a pty and you may not necessarily hit enter to see changes.
[05:45:14] <ChipSenkbeil[m]> For example, if you opened vim on the remote pty, you could be typing hjkl repeatedly and see the cursor move around
[05:45:41] <mjlbach[m]> Right, I guess I'm saying "fake it" clientside
[05:46:42] <mjlbach[m]> Is there a situation in which that wouldn't work? I assume there are bigger issues with something like a terminal application, so I'm not sure in which situations it wouldn't make sense to only send the terminal text on enter
[05:47:01] <mjlbach[m]> This also is not something I've thought about/familiar with so I may not have good advice haha
[05:47:38] <mjlbach[m]> As far as I know this is what mosh does
[05:47:40] <ChipSenkbeil[m]> Imagine you're running htop on the remote. If you're familiar with that program, you interact with it in a lot of ways that don't involve enter
[05:47:46] <mjlbach[m]> Ah yeah
[05:48:00] <mjlbach[m]> So that's what I was assuming you were not trying to do (remote TUI applications)
[05:48:11] <ChipSenkbeil[m]> Ah, no, this is a complete shell
[05:48:14] <mjlbach[m]> Ohhh
[05:48:22] <mjlbach[m]> you want to restrict on_key to the buffer
[05:48:27] <ChipSenkbeil[m]> It's just that the pty is located on the remote machine
[05:48:28] <ChipSenkbeil[m]> Yeah
[05:49:28] <ChipSenkbeil[m]> The distant server would host the pty and the client - for neovim this would be the lua shared library - reads from and writes to the remote pty.
[05:49:33] <mjlbach[m]> I assume on_bytes isn't granular enough
[05:49:55] <ChipSenkbeil[m]> Is that a callback you can set?
[05:50:12] <mjlbach[m]> In buf_attach yeah
[05:50:13] <mjlbach[m]> https://github.com/mjlbach/neovim/blob/1ced6cf08c1bf819df76e3830ae12f76e987f151/src/nvim/api/buffer.c#L83-L152
[05:50:40] <mjlbach[m]> I feel like a PR would be accepted that optionally restricted on_key to a buffer, that seems useful
[05:50:52] <mjlbach[m]> not sure who would have most thoughts on that, maybe bjorn
[05:52:22] <ChipSenkbeil[m]> I think I'm going to have to use on_key. Doesn't look like on_bytes does what I'd need.
[05:52:39] <ChipSenkbeil[m]> Anyway, just wanted to check if there was anything obvious I was missing :)
[05:57:24] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Quit: WeeChat 3.2)
[05:57:43] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[05:59:22] <muniter[m]> Chip Senkbeil would it be too hard to use ssh instead, or the idea is to avoid it.
[05:59:47] <ChipSenkbeil[m]> distant offers both ssh and its own server
[06:00:05] <ChipSenkbeil[m]> But regardless, the remote  pty would be exposed through a shared library that you load into lua
[06:00:22] <muniter[m]> I mean to provide a shell remotely, just start a nvim terminal that ssh to the remote 
[06:06:07] <ChipSenkbeil[m]> Not following you. The goal is to use neovim's terminal emulator as the surface to display remote pty(s) managed remotely, either by ssh or the distant server. Both options are controlled by the distant client library, which is loaded into lua. The client library relays input from the neovim terminal emulator to the remote ptys and feeds remote pty output into the terminal emulator. At least, that would be the goal as the pty code for
[06:06:07] <ChipSenkbeil[m]> distant hasn't been written yet. Similar to what wezterm's mux does.
[06:06:07] <ChipSenkbeil[m]> The demo videos describing the goals and features of distant can be found on https://github.com/chipsenkbeil/distant.nvim. If you haven't seen them, then those videos may explain the project a little better.
[06:07:03] <ChipSenkbeil[m]> The library maintains the singular ssh or distant session, so I wouldn't want to spawn a new client, either.
[06:07:03] <muniter[m]> I'm watching the video right now :) maybe my comments are out of place!
[06:07:24] <ChipSenkbeil[m]> No worries! It's a bit late for me, so I think I may not have explained my purpose very well. :)
[06:07:36] <ChipSenkbeil[m]> Those videos also don't talk about shell support. That's just the next feature.
[06:07:50] <ChipSenkbeil[m]> But they do talk about the purpose and what distant offers today.
[06:09:32] *** Quits: nahtjona (~nahtjona@190.19.22.16) (Quit: connection reset by purr)
[06:14:12] <ChipSenkbeil[m]> Second video highlights the shared library integration, which is the new way that the plugin operates.
[06:24:55] *** Joins: utraciss (~utraciss@118.100.247.27)
[06:36:43] <ChipSenkbeil[m]> Shared library is Rust being compiled in a way that Lua can leverage, just like a C library. Was the best way to expose all of the distant client functionality without spawning an external process and talking to it over stdio, which is how the plugin used to operate. Several advantages, including performance, in the new approach.
[07:12:27] <BenjmanBenjman[m> Is it possible to apply treesitter colors to the omnifunc dialog?
[07:15:31] *** Quits: abg (sid494643@id-494643.lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:16:02] <M0xb055[m]> Anybody knows how to unset the new lspconfig remapping config
[07:16:21] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 245 seconds)
[07:16:34] *** Quits: meccine (uid523308@id-523308.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[07:16:35] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 264 seconds)
[07:16:47] <M0xb055[m]> ??
[07:16:57] *** Joins: meccine (uid523308@helmsley.irccloud.com)
[07:17:01] *** Joins: abg (sid494643@lymington.irccloud.com)
[07:17:28] *** Quits: hide (sid299131@id-299131.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[07:17:37] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[07:17:49] *** Joins: hide (sid299131@helmsley.irccloud.com)
[07:17:51] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[07:19:32] *** Joins: SanchayanMaity (sid478177@hampstead.irccloud.com)
[07:19:45] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[07:19:46] *** Joins: r0bby (r0bby@user/r0bby)
[07:23:29] <mjlbach[m]> ?
[07:24:05] <mjlbach[m]> what "new remapping config"
[07:27:33] <M0xb055[m]> After the last update my <leader>ff keymapping keeps changing to `vim.lsp.buf.formating`
[07:27:49] <mjlbach[m]> lspconfig doesn't set keymaps
[07:28:24] <M0xb055[m]> Now I have a bigger problem 
[07:28:59] <sim[m]> M0xb055[m]: Do you use nvchad or lunarvim or something
[07:29:49] <M0xb055[m]> sim[m]: No
[07:30:07] <sim[m]> Try :verbose map and find the mapping
[07:30:41] <M0xb055[m]> sim[m]: One moment...
[07:31:25] <sim[m]> Anyways once you find it should say where it was last set from and that's your answer 
[07:31:59] <M0xb055[m]> sim[m]: Thank you
[07:32:55] <sim[m]> You got it?
[07:33:28] <M0xb055[m]> Cant see where is the last set for mapping
[07:33:42] <M0xb055[m]> But i am looking
[07:34:00] <mjlbach[m]> Probably need to be in a buffer with an active language server
[07:34:17] <M0xb055[m]> mjlbach[m]: I am
[07:34:24] <sim[m]> Yeah make sure the mapping is actually doing the wrong thing 
[07:34:27] <M0xb055[m]> I Think I found it
[07:35:38] <M0xb055[m]> I think navigator is the problem
[07:37:14] <mjlbach[m]> seems like it
[07:37:15] <mjlbach[m]> https://github.com/ray-x/navigator.lua/blob/0c0801c92d2d2da3a1c9d63e449b2e82b41f148f/lua/navigator/lspclient/mapping.lua#L45
[07:37:53] <M0xb055[m]> mjlbach[m]: Yup
[07:38:41] <M0xb055[m]> I will look how to unset this. I remember there is a way described in the readme.
[07:39:00] <M0xb055[m]> Thanks a lot guys. Sorry for the misunderstanding.
[07:39:33] <mjlbach[m]> No worries, if I ever do anything breaking, I'll post something in the lspconfig issue template
[07:39:38] <mjlbach[m]> s/template/tracker /
[07:40:27] <M0xb055[m]> mjlbach[m]: Got the message!
[07:40:56] <M0xb055[m]> * I get the message!
[07:56:38] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[08:05:29] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Quit: Leaving)
[08:08:30] *** Joins: Guest15 (~Guest15@152.67.220.169)
[08:10:40] *** Quits: Guest15 (~Guest15@152.67.220.169) (Client Quit)
[08:24:02] *** Quits: cjb (~cjb@user/cjb) ()
[08:32:17] *** Joins: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[08:36:26] *** Quits: Pdroman (~Android@93.red-79-156-174.staticip.rima-tde.net) (Ping timeout: 258 seconds)
[08:48:47] *** Joins: yeirr (~yeirr@user/yeirr)
[09:08:22] *** Joins: fractalius (~fractaliu@189.151.153.236)
[09:09:58] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:10:39] *** Quits: fractalius (~fractaliu@189.151.153.236) (Client Quit)
[09:15:55] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Quit: Leaving)
[09:25:10] *** Quits: _\_ (~o@user/ding) (Read error: Connection reset by peer)
[09:25:38] *** Joins: _\_ (~o@user/ding)
[09:29:26] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[09:34:35] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 264 seconds)
[09:40:58] *** Quits: zq_ (~zq@xorshift.org) (Ping timeout: 252 seconds)
[09:41:06] *** Joins: zq_ (~zq@xorshift.org)
[09:42:50] *** Joins: absolutebunk[m] (~absoluteb@2001:470:69fc:105::1:1dbb)
[09:46:23] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[09:49:59] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:55:51] *** Joins: _xor (~xor@72.49.199.147)
[09:56:04] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[09:56:20] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[09:56:50] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:57:11] *** Joins: _xor (~xor@72.49.199.147)
[10:05:47] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 264 seconds)
[10:06:22] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[10:16:54] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[10:23:31] <kylo252[m]> > <@chipsenkbeil:matrix.org> I'll have to check it out. I don't have a strong understanding of the concept as I've never worked with ptys or ttys directly.
[10:23:31] <kylo252[m]> > 
[10:23:31] <kylo252[m]> > In my head, what I want to be able to do is something like `DistantShell` and it opens a buffer that is a shell just like neovim's terminal, but obviously the shell is on the remote machine where distant's server is located. The challenge is that I don't have a process to spawn where I could just use termopen(). Instead, I'd be relaying interaction on the buffer to the remote server and output from that side back to the buffer.
[10:23:31] <kylo252[m]> I just had an idea reading your description, why not try to integrate `zellij` and let it handle some of this? I fear for re-inventing the wheel for some of these concepts 
[10:24:23] <kylo252[m]> I'll add it to the issue you opened just in case it's useful
[10:28:54] *** Joins: yeirr (~yeirr@user/yeirr)
[10:41:48] *** Joins: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[10:51:00] *** Joins: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de)
[10:54:12] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:15:06] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:26:03] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:34:09] *** Joins: Ilyu (~quassel@78.202.228.230)
[11:35:35] *** Quits: kron (~weechat@user/qaph) (Quit: kron)
[11:48:49] *** Joins: cottoneyejim (~cottoneye@2a01:261:3bf:d500:ea6a:64ff:fe4f:b643)
[11:51:03] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[11:53:45] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[11:54:17] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:55:38] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[11:56:10] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:10:56] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Ping timeout: 245 seconds)
[12:16:57] *** Joins: kron (~weechat@user/qaph)
[12:17:55] *** Joins: Carp (~rue@1-162-40-226.dynamic-ip.hinet.net)
[12:21:05] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[12:30:06] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: Artturin[m] (~artturinm@2001:470:69fc:105::b9b6) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: enirda[m] (~enirdamat@2001:470:69fc:105::db7e) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: Simone[m] (~cigamatri@2001:470:69fc:105::e81b) (Quit: You have been kicked for being idle)
[12:36:21] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[12:50:15] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:05:12] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:06:29] *** Joins: Guest15 (~Guest15@2408:8207:7878:6600:c83c:dd05:7f18:8ce)
[13:17:26] *** Joins: much1na (~ian2@41.90.69.85)
[13:19:16] <much1na> .part
[13:19:19] *** Parts: much1na (~ian2@41.90.69.85) ()
[13:19:47] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:20:42] *** Joins: Firecatmon (~firecatmo@180.149.228.182)
[13:25:44] <ChrisKipp[m]> So I'm a big fan of sane defaults and I'm trying to understand why the default diagnostic sign priority is set all the same?
[13:26:11] <ChrisKipp[m]> ```
[13:26:11] <ChrisKipp[m]> vim.diagnostic.config({ severity_sort = true })
[13:26:11] <ChrisKipp[m]> ```
[13:26:11] <ChrisKipp[m]> This is what I want, and I'm trying to understand why this wouldn't just be the default?
[13:27:21] <ChrisKipp[m]> is there maybe an obvious reason that I'm missing why this isn't the default?
[13:30:49] <clason[m]> I think because it's a global setting and thus also applies to the float -- where maybe people would prefer it to be in order of diagnostic?
[13:31:09] <clason[m]> but since there's going to be a separate float option, maybe these could be decoupled
[13:31:19] <clason[m]> gpanders (Gregory Anders): would know (when he wakes up)
[13:32:20] <clason[m]> in any case, that setting seems inherited from the original LSP implementation, so "no good reason" is not impossible
[13:34:21] <ChrisKipp[m]> gotcha, I feel like especially for signs, and even more especially for LSP I could imagine that you'd almost always want to see the error instead of the warning or info, especially if you just have the signcolumn to 1
[13:35:43] <clason[m]> Yes, it's a reasonable suggestion
[13:36:11] <clason[m]> maybe worth a comment on https://github.com/neovim/neovim/pull/16057
[13:36:47] <clason[m]> or maybe better as a separate issue
[13:38:32] *** Quits: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:39:21] *** Joins: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de)
[13:45:31] *** Quits: jaawerth (~jaawerth@104.131.115.202) (Quit: o/)
[13:46:36] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[13:51:39] <bokwoon95bokwoon> how do I run `require('lspconfig')` and fail gracefully if it doesn't exist? Do I catch some exception or is there some way to check if it exists in the first place?
[13:52:20] <clason[m]> `pcall` the `require`
[13:54:13] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:55:02] *** Quits: Guest15 (~Guest15@2408:8207:7878:6600:c83c:dd05:7f18:8ce) (Quit: Client closed)
[13:56:03] *** Quits: robobo7 (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Quit: The Lounge - https://thelounge.chat)
[13:56:21] <kylo252[m]> I was finally able to reproduce the broken `lsp.rename`. it took waaaaay too long to isolate, and now I'm not sure whose fault it is.
[13:57:42] <bokwoon95bokwoon> great, `local nvim_lsp = pcall(require, 'lspconfig')` worked for me. I used `if not(nvim_lsp) then; return; end;` to terminate early and it seemed to work. I was under the impression that `return` only works in functions, do they work in `lua << EOF` blocks as well?
[13:59:10] <clason[m]> I think you want to use the proper pattern: `err, result = pcall(...); if not err then ... end`
[13:59:55] <bokwoon95bokwoon> ah, ok
[14:00:18] <clason[m]> or `if err then ... end`, depending on what you want to do
[14:06:01] *** Joins: Firecatmon_ (~firecatmo@pa49-195-113-151.pa.nsw.optusnet.com.au)
[14:06:12] *** Quits: Firecatmon (~firecatmo@180.149.228.182) (Ping timeout: 260 seconds)
[14:07:46] *** Joins: robobo7 (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[14:32:09] *** Quits: nehsou^ (~nehsou@70.166.66.234) (Remote host closed the connection)
[14:33:24] <clason[m]> vi
[14:36:08] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:39:59] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:40:49] *** Quits: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:45:12] *** Joins: mikisid (~mikisid@178-221-173-138.dynamic.isp.telekom.rs)
[14:49:16] *** Joins: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de)
[14:50:21] *** Joins: towb (~bwot@user/towb)
[14:55:39] *** Quits: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.3)
[14:57:44] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:00:30] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[15:00:51] *** Joins: Guest15 (~Guest15@2408:8207:7878:6600:c83c:dd05:7f18:8ce)
[15:01:50] *** Joins: thing (~thing@user/thing)
[15:03:44] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[15:04:04] *** Joins: thing (~thing@user/thing)
[15:20:18] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:22:57] *** Quits: mikisid (~mikisid@178-221-173-138.dynamic.isp.telekom.rs) (Remote host closed the connection)
[15:23:18] *** Joins: mikisid (~mikisid@178-221-173-138.dynamic.isp.telekom.rs)
[15:26:54] *** Quits: mikisid (~mikisid@178-221-173-138.dynamic.isp.telekom.rs) (Remote host closed the connection)
[15:27:18] *** Joins: mikisid (~mikisid@178-221-173-138.dynamic.isp.telekom.rs)
[15:30:20] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:30:32] *** Joins: ixil (~ixil@mpp-cp1-natpool-2-295.ethz.ch)
[15:34:00] *** Joins: codeswhite (~codeswhit@user/codeswhite)
[15:37:25] *** Joins: guido (~guido@host-79-27-255-87.retail.telecomitalia.it)
[15:40:24] *** Quits: mikisid (~mikisid@178-221-173-138.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[15:41:47] *** Quits: zwr (~zwr@2804:d45:b966:fb00:433c:7503:c491:fd59) (Ping timeout: 264 seconds)
[15:42:16] *** Quits: Guest15 (~Guest15@2408:8207:7878:6600:c83c:dd05:7f18:8ce) (Quit: Client closed)
[15:42:33] *** Joins: zwr (~zwr@2804:d45:b966:fb00:3928:72f5:d7d7:f752)
[15:43:17] *** Quits: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:47:10] *** Joins: maromau (~mauro@151.62.228.166)
[15:47:34] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:51:43] <ChrisAmeliaChris> Regarding the diagnostics, how to retrieve when "LspDiagnosticsSign" became "DiagnosticSign" ?
[15:51:58] <ChrisAmeliaChris> * to retrieve the commit when "LspDiagnosticsSign"
[15:54:21] <clason[m]> look for the breaking changes
[15:54:44] <clason[m]> https://github.com/neovim/neovim/issues/14090#issuecomment-921312955
[15:55:33] *** Joins: Exylos[m] (~exylosmat@2001:470:69fc:105::1:1de5)
[15:55:46] <ChrisAmeliaChris> Thanks.
[15:57:53] *** Joins: zro (~zro@user/zro)
[16:00:34] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Ping timeout: 260 seconds)
[16:05:12] <ChrisAmeliaChris> In lua, what's the best way to handle this change?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7c9da6cc27a8c8d5e91a87dd2aa2a2be04f4b0c7)
[16:05:24] <ChrisAmeliaChris> s/fi/fn/
[16:09:12] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:11:11] <Bowuigi[m]> That seems like the best way
[16:11:50] <Bowuigi[m]> Loop and string manipulation is another way but it is not worth it on this case
[16:12:10] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[16:14:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:16:42] <clason[m]> Actually, I would strongly recommend supporting only latest master (and, if you want to go the extra mile, 0.5.x, which you can check with `has('nvim-0.5')`).
[16:17:30] *** Quits: chenqisu12 (~xirndc@183.217.203.91) (Quit: Leaving)
[16:18:47] <ChrisAmeliaChris> Is there a lua function for `has('nvim-0.5')`?
[16:18:57] <clason[m]> `vim.fn.has`
[16:19:52] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[16:19:58] <clason[m]> (to be clear, that returns true on any version later than 0.5 as well -- you'd flip the check to `has('nvim-0.6')` for the _new_ Diagnostics)
[16:20:25] <ChrisAmeliaChris> Thanks, was going to ask that \o/
[16:20:56] <clason[m]> The benefit is that this will stay valid when 0.6 is released later this year (hopefully)
[16:23:12] *** Quits: Firecatmon_ (~firecatmo@pa49-195-113-151.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[16:23:34] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[16:25:05] <gpanders[m]> > <@ckipp:matrix.org> ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/523fa57a987704705a3592a8a38db18ca2c04ab7)
[16:26:44] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[16:26:51] <Julian> you know this obviously but it does not return true :)
[16:26:57] <Julian> it returns 1, so beware of that if you use it
[16:27:07] <Julian> ( ChrisAmeliaChris ^)
[16:27:57] <ChrisAmeliaChris> Oh thanks, forgot that.
[16:28:20] <clason[m]> `true` vs. 1 is not a problem -- but it will return `0` if not true, which is _not_ false in Lua ;)
[16:28:32] <ChrisKipp[m]> gpanders[m]: that's sort of what I guessed, but do you have an example where you'd want to see an info diagnostic over an error even though the info arrived first?
[16:28:50] <ChrisKipp[m]> I know for use in Scala (Metals), there really is no meaning behind the order we return diagnostics
[16:28:56] <gpanders[m]> No, because I also use severity sort :)
[16:29:11] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[16:29:35] <ChrisKipp[m]> I would imagine the majority of people in lsp-land want/assume that's the behavior
[16:30:35] *** Joins: arkurious (~arkurious@user/arkurious)
[16:30:58] <gpanders[m]> I see you mentioned it on GitHub already. I’ll punt this to mjlbach since last time we had this discussion he was in favor of keeping the current default
[16:32:34] <ChrisKipp[m]> 👍️ sounds good!
[16:33:19] <ChrisKipp[m]> I would love to simply avoid telling all our LSP users, hey! set yet another setting that you want by default, but it's not efault
[16:33:39] <ChrisKipp[m]> if that sounds harsh, don't mean it to
[16:33:47] <ChrisKipp[m]> just I really really want sane defaults
[16:40:57] <Mathias[m]> <clason[m]> "(to be clear, that returns..." <- I think it returns a numeric 1 or 0, may be careful because `if 0` evaluates to true in lua 
[16:42:06] <Mathias[m]> (I'm fairly sure I made the mistake of assuming it returns a boolean at some point) 
[16:42:48] <Mathias[m]> Oh I should read up the rest before I reply - this was already mentioned 
[16:44:01] <gpanders[m]> Btw Chris Kipp, that change would need to happen in a separate PR in any case, as it’s a nontrivial change that deserves its own discussion. I invite you to make that PR — it should only be a one line change (one word even). Then we can hash it out there
[16:44:34] *** Quits: maromau (~mauro@151.62.228.166) (Quit: Konversation terminated!)
[16:54:04] <clason[m]> > (one word even)
[16:54:04] <clason[m]> Don't forget the documentation ;)
[16:54:05] <clason[m]>  * > 
[16:54:05] <clason[m]> (one word even)
[16:54:05] <clason[m]>  Don't forget the documentation ;)
[16:54:05] <clason[m]>  * 
[16:54:05] <clason[m]> > (one word even)
[16:54:06] <clason[m]> Don't forget the documentation ;)
[16:59:02] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:03:21] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:15:26] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:31:16] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 252 seconds)
[17:31:54] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:32:18] <Bowuigi[m]> <clason[m]> "`true` vs. 1 is not a problem --..." <- You can just use `if cond == 1 then ... end`
[17:38:00] *** Quits: SirJitsu1 (~SirJitsu@162-231-111-175.lightspeed.livnmi.sbcglobal.net) (Quit: Leaving)
[17:42:25] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[17:42:58] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:43:25] *** Joins: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de)
[17:43:49] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Quit: WeeChat 3.2)
[17:48:34] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:58:01] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[17:58:19] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[17:58:38] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[18:04:15] <YorickPeterse[m]> that has bitten me a few too many times
[18:04:34] <YorickPeterse[m]> e.g. `if vim.fn.pumvisible() then ... end`, followed by wondering why the code always runs
[18:12:05] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[18:12:30] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[18:12:48] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[18:13:37] *** Joins: frebtherat (~frebthera@c-68-81-228-217.hsd1.de.comcast.net)
[18:14:57] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Client Quit)
[18:18:31] *** Quits: frebtherat (~frebthera@c-68-81-228-217.hsd1.de.comcast.net) (Ping timeout: 256 seconds)
[18:33:56] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:34:36] <nub> D: i'm trying to set up native LSPs using nvim-lspconfig and for some reason the LSPs aren't connecting - when i run :LspInfo it says "0 client(s) attached to this buffer:" and then lists two servers with basically fine looking config - what's going on here, what do i need to do to fix this?
[18:34:53] <nub> i have a root and it has been detected
[18:35:17] *** Joins: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net)
[18:45:10] <nub> ok the fix was to type :LspStart which seems a bit odd - should i add that to my init.vim or what? it's not mentioned anywhere i've seen
[18:52:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:52:42] <YorickPeterse[m]> No, it should start automatically. Is your `pwd` the same as the project root?
[18:52:52] <YorickPeterse[m]> and are the files edited in that same project?
[18:53:18] <YorickPeterse[m]> I found that servers don't start for random one-off files (e.g. in `/tmp`)
[18:54:36] <nub> ahhh that could be it - it's a sort of monorepo thingy
[18:54:49] *** Joins: carbonfiber (uid513797@id-513797.uxbridge.irccloud.com)
[18:55:03] <nub> the project root contains the .git, but it's the directories below that that contain the tsconfig.json and stuff like that
[18:56:07] <nub> so yea the project root doesn't match :pwd
[18:56:19] <mjlbach[m]> You might want to set the project root to a unique marker
[18:56:35] <mjlbach[m]> you can put an arbitrary file in all of your projects and set root_dir to match that
[18:57:11] *** Quits: cottoneyejim (~cottoneye@2a01:261:3bf:d500:ea6a:64ff:fe4f:b643) (Ping timeout: 245 seconds)
[19:00:07] <nub> easier in this case to just :cd into the directory as i only work on one of the projects anyway
[19:01:02] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:03:36] *** Joins: awb99 (~quassel@80-110-207-163.static.upcbusiness.at)
[19:07:32] <ddickstein[m]> what is cmdlevel ("Level of cmdline") in v:event? 
[19:07:32] *** Quits: ixil (~ixil@mpp-cp1-natpool-2-295.ethz.ch) (Remote host closed the connection)
[19:10:55] *** Joins: ninjadinja[m] (~ninjadinj@2001:470:69fc:105::1:1e06)
[19:11:29] <kylo252[m]> mjlbach, gpanders  I don't think that global config is working for me on #16057
[19:12:11] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[19:12:16] <gpanders[m]> can you be more specific?
[19:12:35] <mjlbach[m]> minimal repro would be great
[19:14:15] * kylo252[m] uploaded an image: (106KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/naPxKTbIljQSqYuHkWemmcNR/image.png >
[19:16:10] <gpanders[m]> ah
[19:16:11] <gpanders[m]> yea I know why
[19:17:04] <kylo252[m]> I thought it was because you're setting it to true by default, but I the `resolve` function should take care of it, right?
[19:17:21] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:18:36] <kylo252[m]> although now I see some inconsistencies in how it's handled, so maybe it should be unified... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/bf5c4d46fdc4d94c72135f95af4bc6fd32237165)
[19:19:09] <gpanders[m]> that's not inconsistent, severity_sort is a global option so it is handled before the other options are resolved
[19:19:23] <mjlbach[m]> Isn't your publishDiagnostic override redundant?
[19:19:26] <mjlbach[m]> (side node)
[19:19:29] <mjlbach[m]>  * (side note)
[19:20:11] <kylo252[m]> gpanders[m]: yeah but how come it's not an opt? I don't see why there needs to be two different levels of opts. and we know it would work anyway
[19:20:56] <gpanders[m]> because why make people set `severity_sort` 4 different times for virtual text, signs, floats, and underlines?
[19:21:13] <kylo252[m]> mjlbach[m]: I didn't used to have the `vim.diagnostic.config` but I added it just now to see if that was the issue
[19:21:20] <Famiu[m]> Is there a way for a plugin to check if the Neovim build has a specific commit?
[19:21:25] <clason[m]> no
[19:21:26] <mjlbach[m]> No
[19:21:29] <clason[m]> and you shouldn't
[19:21:30] <mjlbach[m]> lol
[19:21:34] <Famiu[m]> alright
[19:21:36] <clason[m]> (jinx!)
[19:21:39] <kylo252[m]> gpanders[m]: no I meant leave it to be overridden in both contexts 
[19:22:20] <Famiu[m]> Is there a way to check if an API function exists, then?
[19:22:33] <clason[m]> you can always `pcall` it
[19:22:39] <Famiu[m]> hmm
[19:22:40] <gpanders[m]> you should be able to just check if `vim.api.nvim_{func}` is nil right?
[19:22:43] <clason[m]> what's your actual goal, though?
[19:23:03] <Famiu[m]> to use `nvim_eval_statusline` to get statusline width if the function exists
[19:23:28] <Famiu[m]> gpanders[m]: Yeah, that's true
[19:24:14] <Famiu[m]> Thanks for the help!
[19:24:14] <clason[m]> I recommend plugins take the same stance as Neovim: there are only two versions
[19:24:14] <clason[m]> 1. the last released version (0.5.1, currently)
[19:24:14] <clason[m]> 2. the current tip of the dev branch (master; which has `has('nvim-0.6')==1`)
[19:24:25] <gpanders[m]> kylo252: try #16057 again please
[19:24:43] <mjlbach[m]> > <@clason:matrix.org> I recommend plugins take the same stance as Neovim: there are only two versions
[19:24:43] <mjlbach[m]> > 1. the last released version (0.5.1, currently)
[19:24:43] <mjlbach[m]> > 2. the current tip of the dev branch (master; which has `has('nvim-0.6')==1`)
[19:24:43] <mjlbach[m]> same
[19:25:02] <mjlbach[m]> I think it's cool but unfortunate so many plugins target HEAD
[19:25:21] <Famiu[m]> I try to only use features from the latest stable release
[19:25:24] <clason[m]> ideally, plugins would have two branches: one targeting tip of master (and never "last week's master"!), and one targeting the last release (which is frozen except for bug fixes that _may_ be backported from dev)
[19:25:29] <mjlbach[m]> Yeah
[19:25:30] <Famiu[m]> and use checks to optionally add features
[19:25:31] <mjlbach[m]> +1 
[19:25:49] <clason[m]> Famiu[m]: that's completely fine, but please do not mix & match -- that's exactly where headaches come from
[19:26:09] <Famiu[m]> I suppose that's true
[19:26:36] <clason[m]> well, OK, optionally with a check (especially if it's a minor improvement) won't hurt
[19:27:06] <Famiu[m]> Yeah, optional features are what I'm talking about in this case
[19:27:20] <clason[m]> but it undercuts expectation management -- it's very easy to say "this plugin requires Neovim HEAD" or "this plugins works on Neovim 0.5"; it gets murkier when you mix things up
[19:27:26] <Famiu[m]> And only enable it if the check passes, else just silently ignore it / show a warning
[19:27:43] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[19:27:45] <Famiu[m]> s///or/
[19:27:56] <clason[m]> but I can guarantee you that you'll get issues "why is feature X not working for me?!!?eleven?" :P
[19:28:44] <kylo252[m]> gpanders[m]: it looks like it's resolved now, tysm!
[19:28:44] <kylo252[m]> I'm having a different problem that's related to `go_next`, but I need to verify it first
[19:29:06] <Famiu[m]> clason[m]: If I understand what you said correctly, then one issue I can see with this approach is that even features that don't require the master branch wouldn't be added to the release branch
[19:29:16] <clason[m]> yes.
[19:29:47] <clason[m]> meaning "not necessarily" -- of course you're allowed to backport features (who can stop you?)
[19:30:06] *** Quits: willsir[m] (~willsirma@2001:470:69fc:105::dfa2) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: esensar[m] (~esensarma@2001:470:69fc:105::fa43) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: PeterCzibik[m] (~peteyyczm@2001:470:69fc:105::f6ac) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: SZanko[m] (~szankomat@2001:470:69fc:105::c796) (Quit: You have been kicked for being idle)
[19:30:13] <Famiu[m]> mhm
[19:30:17] <Famiu[m]> Thanks for the insight
[19:30:33] <Famiu[m]> clason[m]: lol
[19:30:47] <Famiu[m]> Yeah those issues can be annoying when people blatantly ignore the documentation
[19:30:54] <clason[m]> it's more about clear communication and expectation management:
[19:30:54] <clason[m]> 1. want stable? stick with 0.5 branch of Neovim _and_ plugins
[19:30:54] <clason[m]> 2. want the latest and greatest (and breakage)? use the main/dev/master branch of both
[19:31:41] <Famiu[m]> it'd also allow having separate releases that are guaranteed to work with separate versions of Neovim
[19:31:52] <clason[m]> 3. want pain and suffering? mix 0.5 and dev branch of Neovim and plugins
[19:32:20] <Famiu[m]> So even someone who uses a version older than the last stable release would be able to use the plugin without having breakages
[19:32:41] <clason[m]> Famiu[m]: yep; and you could just leave the old branches around, so you're guaranteed never to break older versions of Neovim (for Debian *cough*)
[19:33:50] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:34:07] <Famiu[m]> I don't think anyone who uses Neovim on Debian would even install any plugins
[19:34:25] <Famiu[m]> (half-sarcastic btw)
[19:34:54] <clason[m]> I assume they package the plugins...
[19:35:06] <Famiu[m]> Well, I know Arch packages some plugins
[19:35:12] <Famiu[m]> Though I honestly don't see any reason for that
[19:35:24] <Famiu[m]> When we have so many good plugin managers for (Neo)Vim
[19:35:57] <clason[m]> Probably for airgapped/locked down systems
[19:36:06] <Famiu[m]> I honestly don't get the "use your system's package manager for everything" philosophy
[19:36:21] <Famiu[m]> For example, in Arch you can have issues if you install packages through pip
[19:36:29] <Famiu[m]> * through pip instead of the Arch packages
[19:36:31] <gpanders[m]> Famiu[m]: why not?
[19:36:35] <gpanders[m]> I adhere to that philosophy
[19:36:36] <Famiu[m]> * through pip instead of the Arch pacman
[19:36:41] <gpanders[m]> I avoid pip/luarocks/etc. like the plague
[19:36:43] <clason[m]> Pip is the best argument for system package managers :D
[19:36:52] <clason[m]> cough texlive cough
[19:36:52] <gpanders[m]> Packer is the only 3rd party package manager I use :)
[19:37:27] <Famiu[m]> gpanders[m]: In some cases, it makes sense. But sometimes it's way easier to deal with things through an external package manager
[19:37:33] *** Joins: smash15 (~niclas@p200300cb67005900fe7e2d2f2e02f061.dip0.t-ipconnect.de)
[19:37:40] *** Joins: smash30 (~niclas@p200300cb67005900fe7e2d2f2e02f061.dip0.t-ipconnect.de)
[19:37:48] *** Quits: smash30 (~niclas@p200300cb67005900fe7e2d2f2e02f061.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:37:50] <gpanders[m]> easier in the short time
[19:37:51] <Famiu[m]> Esp. if it's a niche package that's not packaged in your system repos
[19:37:54] <gpanders[m]> nightmare in the long term
[19:37:55] <gpanders[m]> not to mention the security concerns
[19:37:57] * gpanders[m] looks at pip
[19:37:57] <Bowuigi[m]> Famiu[m]: Yeah, it doesn't fit with the other important Philosophy, the UNIX one
[19:38:09] <p00f[m]> > Esp. if it's a niche package that's not packaged in your system repos
[19:38:09] <p00f[m]> just write a pkgbuild lol
[19:38:13] <clason[m]> well, pip (and Python in general) is just bad
[19:38:23] <clason[m]> that hardly serves as a general argument :)
[19:38:27] <Bowuigi[m]> clason[m]: True
[19:38:30] <Binx[m]> Why do the neovim nightly versions in the releases page on github disappear after a while? I can't seem to search for the `nightly` tag either, which makes it hard for me to install as i'm on windows
[19:38:33] <Famiu[m]> Python is just Lua but slower
[19:38:34] <gpanders[m]> yea but the same is mostly true of all of the language specific package managers
[19:38:44] <gpanders[m]> how many of them do package signing or verification or are curated in any way?
[19:38:45] <clason[m]> https://github.com/neovim/neovim/issues/15709
[19:38:45] <Bowuigi[m]> Famiu[m]: And less readable
[19:38:47] <gpanders[m]> any yahoo can uplaod anything
[19:38:51] <gpanders[m]> s/uplaod/upload/
[19:39:00] <jamessan[m]> I add everything I need to use to Debian, except vim plugins. Those are version controlled with my Vim config
[19:39:00] <Famiu[m]> Cargo
[19:39:07] <Binx[m]> clason[m]: Ah, my bad. I didn't see that issue thanks!
[19:39:11] <p00f[m]> Bowuigi[m]: `True`
[19:39:33] <Bowuigi[m]> p00f[m]: `1`
[19:39:57] <Famiu[m]> I do wish Lua had better support for object oriented programming though
[19:40:05] <p00f[m]> Bowuigi[m]: eh that one is true for many languages
[19:40:15] <Famiu[m]> and that indices didn't start from 1
[19:40:32] <Bowuigi[m]> Famiu[m]: That is a good thing tho
[19:40:39] <p00f[m]> p00f[m]: ```c
[19:40:39] <p00f[m]> #define TRUE 1
[19:40:39] <p00f[m]> #define FALSE 0
[19:40:39] <p00f[m]> ```
[19:40:47] <Famiu[m]> Bowuigi[m]: eh, how so
[19:40:49] <YorickPeterse[m]> I think Lua should have either stuck with procedural and modules, or go proper OO, instead of this current in-between state of the language
[19:40:55] <SeanDewar[m]> `#define TRUE FALSE`
[19:40:58] <Bowuigi[m]> Famiu[m]: You don't have to keep indices in mind when doing math
[19:41:11] <Famiu[m]> YorickPeterse[m]: agree
[19:41:14] <YorickPeterse[m]> e.g. `string:sub(x, y)` is fine, but `some_table:insert(x)` is not.
[19:41:24] *** Joins: rustyconstruct[m (~rustycons@2001:470:69fc:105::1:1e0a)
[19:41:25] <Famiu[m]> Bowuigi[m]: my experience has been the opposite since I'm used to 0-based indices
[19:41:34] <p00f[m]> Famiu[m]: how often do you want the offset when you are programming in lua?
[19:41:41] <Bowuigi[m]> Famiu[m]: Ah, well then
[19:41:42] <clason[m]> yes, but "being used to it" is poor grounds for a general argument
[19:41:54] <Bowuigi[m]> clason[m]: Yeah
[19:41:54] <clason[m]> when newer generations don't have that problem :)
[19:41:57] <YorickPeterse[m]> I think the start value less compared to it simply being different from basically every other language
[19:41:59] <Famiu[m]> clason[m]: I'm not trying to make a general argument
[19:42:09] <YorickPeterse[m]> indices could start at 3 for all I care, as long as it's consistent between languages
[19:42:15] <Bowuigi[m]> YorickPeterse[m]: Wait it isn't? Lemme check
[19:42:34] <YorickPeterse[m]> It's worse for lists, because `list[0]` doesn't outright throw an error
[19:42:36] <clason[m]> Famiu[m]: and I'm not debating your argument :)
[19:42:37] <gpanders[m]> Dijkstra settled this decades ago: https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html
[19:42:57] <YorickPeterse[m]> If Lua tables would error when using an out of bounds index, it wouldn't be so bad
[19:43:04] <clason[m]> Not a mathematician
[19:43:11] <YorickPeterse[m]> But in true Lua fashion, it's answer is "here have some more nils in your face"
[19:43:19] <Bowuigi[m]> Bowuigi[m]: It isn't LMAO
[19:43:41] <YorickPeterse[m]> Yeah that's because of `x:y()` requiring different syntax IIRC when you define the function
[19:43:48] <YorickPeterse[m]> and the table functions don't do that
[19:44:22] <p00f[m]> YorickPeterse[m]: would it even be possible to nil an index manually otherwise
[19:44:31] <YorickPeterse[m]> IIRC `table` is basically just an object with a bunch of functions in it, but tables themselves don't "inherit" from that
[19:44:39] <Bowuigi[m]> YorickPeterse[m]: Maybe it isn't on the {} __index metatable
[19:45:14] <Bowuigi[m]> This should be solved with `setmetatable(your_table, {_index = table})`
[19:45:23] <YorickPeterse[m]> This is where I feel they should have either just required `string.sub("the string", ...)`, or be consistent about supporting `x:y()` everywhere
[19:45:56] <Bowuigi[m]> They should support `x:y()` everywhere because it is more readable
[19:46:06] <YorickPeterse[m]> p00f: what do you mean? Something like this: `local x = {}; x[42] = 10`?
[19:46:29] <YorickPeterse[m]> Bowuigi[m]: functional programmers are now getting angry 😛
[19:46:56] <Bowuigi[m]> I mean `a = a:sub(stuff)` looks weird enough, let alone `a = string.sub(a, stuff)`
[19:46:58] <YorickPeterse[m]> YorickPeterse[m]: If so: I get why they did that, because it means they can mix maps and arrays into one type, but that in itself was a dumb idea
[19:47:09] <p00f[m]> YorickPeterse[m]: no like if you want to
[19:47:09] <p00f[m]> `mytable["i dont like this index"] = nil`
[19:47:21] <kylo252[m]> > <@kylo252:matrix.org> it looks like it's resolved now, tysm!
[19:47:21] <kylo252[m]> > I'm having a different problem that's related to `go_next`, but I need to verify it first
[19:47:21] <kylo252[m]> false warning, I forgot that I added some flags to `go_next`, so it resulted in the popup sometimes not opening 
[19:47:36] <YorickPeterse[m]> Well the index would exist, or you'd use `table:remove('the index')` or something like that
[19:47:42] <YorickPeterse[m]> Setting an index to unset it feels like opposite day
[19:48:00] *** Joins: svrana[m] (~svranamat@2001:470:69fc:105::1:1e0b)
[19:48:51] <YorickPeterse[m]> I really wish somebody would make a proper Lua competitor
[19:48:58] <Bowuigi[m]> The `x:y()` stuff also allows for data pipelines (like on UNIX shells)... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/6cfe89b734ab9ca81bf846a9cd91ee634b66c4f7)
[19:49:00] <p00f[m]> YorickPeterse[m]: wait what i can `mytable:remove("my index")` but i have to `table.insert(mytable, "index")`?
[19:49:18] <YorickPeterse[m]> Bowuigi: at least in functional languages you typically use a pipe operator for that
[19:49:35] <p00f[m]> YorickPeterse[m]: nice, even less libraries
[19:49:40] <Bowuigi[m]> YorickPeterse[m]: Yeah, the pipe is used as `or` on newer Luas
[19:49:55] <Bowuigi[m]> Bowuigi[m]: Bitwise or
[19:49:59] <YorickPeterse[m]> p00f[m]: No, I meant that it would be better to have a dedicated function for removing an index
[19:50:05] <YorickPeterse[m]> But there isn't in Lua, you have to set it to `nil`
[19:50:07] *** Joins: SirJitsu1 (~SirJitsu@162-231-111-175.lightspeed.livnmi.sbcglobal.net)
[19:50:09] <p00f[m]> oh
[19:50:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:50:34] <YorickPeterse[m]> Bowuigi[m]: That's not what pipe operators do in functional languages usually
[19:51:01] <YorickPeterse[m]> typically `x |> y |> z` means `z(y(x))` if I remember correctly
[19:51:22] <p00f[m]> i think they meant what it does on lua
[19:51:34] <YorickPeterse[m]> oh, I don't think Lua has such an operator?
[19:51:46] <p00f[m]> yeah it doesnt
[19:51:56] <p00f[m]> i saw this in the semantic tokens pr
[19:52:19] <p00f[m]> he had to use a bit manipulation library or something
[19:52:44] <YorickPeterse[m]> My point is ultimately this: whether you have to write `module.function(x, y)` or `x:function(y)` doesn't really matter as long as it's consistent
[19:52:52] <YorickPeterse[m]> Lua chose option 3: both, sort of, lol
[19:53:39] <p00f[m]> p00f[m]: wait it does
[19:53:52] <p00f[m]> 10|9 gives 11 as expected
[19:53:59] <p00f[m]> i think it was only for the shift
[19:54:10] <YorickPeterse[m]> Yeah that's probably just regular bit shifting
[19:55:31] <Bowuigi[m]> The other thing I don't like about Lua is that you have no way to pass values as a reference, for example, an `inc(thing, value)` function is impossible
[19:55:51] <YorickPeterse[m]> With that all said, I greatly prefer Lua over Vimscript, and bless nvim for using Lua 🙂
[19:56:18] <Bowuigi[m]> YorickPeterse[m]: Same
[19:56:22] <Bowuigi[m]> Lua is a killer feature over Vim
[19:56:39] <YorickPeterse[m]> mjlbach: Zimbu in NeoVim when
[19:57:06] <mjlbach[m]> YorickPeterse[m]: I hear tjdevries is adding zimbu mode to vim9jit
[19:57:10] <SeanDewar[m]> soo... vim9script? 🙃
[19:57:11] <YorickPeterse[m]> nice
[19:57:18] <mjlbach[m]> (just kidding)
[19:57:21] <YorickPeterse[m]> No Zimbu is worse IIRC
[19:57:27] <YorickPeterse[m]> it's what happens when nobody tells Bram "no"
[19:57:28] <Bowuigi[m]> Bowuigi[m]: You can also use other languages that compile to Lua like fennel or moonscript
[19:57:46] <p00f[m]> YorickPeterse[m]: ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/7258f8dc6447d5c0f8540c978cae46919e5f1bca)
[19:58:14] <Bowuigi[m]> > <@chda:matrix.org> ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/c393e7404854e33ad16f9cc3e5f5ea922c0cdbf0)
[19:58:21] <SeanDewar[m]> its beautiful
[19:58:45] <Bowuigi[m]> C high on macros LMAO
[19:58:53] <YorickPeterse[m]> I do remember Bram tried to introduce the unmatched open/closing thing in vimscript new/2/9/whatever
[19:59:00] <YorickPeterse[m]> and IIRC /r/vim threw a riot over it
[19:59:27] <Bowuigi[m]> Bowuigi[m]: Speaking about macros, I made macros for Lua, which is kind of cool
[20:00:03] <YorickPeterse[m]> Bowuigi[m]: I looked at Fennel for a while, but ugh List
[20:00:07] <YorickPeterse[m]> s/List/Lisp/
[20:00:13] <gpanders[m]> YorickPeterse[m]: heretic
[20:00:22] <gpanders[m]> sorry
[20:00:23] <gpanders[m]> (heretic)
[20:00:33] <YorickPeterse[m]> Also I didn't like the fact my editor now took a few milliseconds longer to start up
[20:00:38] <YorickPeterse[m]> literally unusable 
[20:00:51] <gpanders[m]> what is this, VS Code??
[20:00:55] <Bowuigi[m]> gpanders[m]: `(setq heretic t)`
[20:01:26] <gpanders[m]> YorickPeterse[m]: this is why I do all of my configuration by just patching the source code
[20:01:28] <YorickPeterse[m]> gpanders: Not quite, nvim is lacking annoying popups asking if you want to fill in a survey, enable telemetry, etc
[20:01:31] <Bowuigi[m]> Fennel + nvim ≈ Emacs
[20:01:35] *** Quits: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:01:44] <gpanders[m]> those will be in 0.7
[20:01:47] <mjlbach[m]> half yearly shill for https://amulet.works
[20:02:27] <YorickPeterse[m]> mjlbach[m]: ML syntax always make me feel like such a dumbass
[20:02:27] <p00f[m]> YorickPeterse[m]: do they even ask you about telemetry
[20:02:52] <p00f[m]> i thought they'd just enable it and you'd have to hunt checkboxes
[20:02:57] * YorickPeterse[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/8d3383dd948367f4edc450cc9554648311dc66b0
[20:03:10] <YorickPeterse[m]> p00f[m]: I think the first time you start it, it asks you about it
[20:03:21] *** Quits: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[20:03:22] <YorickPeterse[m]> I might be wrong though, wouldn't be the first (or last) time
[20:03:51] <YorickPeterse[m]> oh, Amulet is archived anyway
[20:03:58] <YorickPeterse[m]> Guess nvim won't attract researchers now 🙂
[20:04:02] <YorickPeterse[m]> s/🙂/😛/
[20:04:35] <gpanders[m]> bummer, but they link to this handy list of alternatives https://github.com/hengestone/lua-languages
[20:04:52] <mjlbach[m]> That's where I found amulet originally haha
[20:05:51] <kylo252[m]> went into a dumb rabbit hole to try to figure out where the `1. ` comes from in `open_float` no luck so far 😄
[20:06:12] * gpanders[m] sent a lua code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/4e80f2bb009b0ae8dc110e2102b1bbc0ea4f301c
[20:06:23] <SeanDewar[m]> that was fast
[20:06:34] <gpanders[m]> I was literally looking at that function at the time haha
[20:07:25] <kylo252[m]> can we not let `format()` override this?
[20:08:01] <YorickPeterse[m]> Maybe one day I'll add a Lua backend for my language. Something tells me there's not enough booze in the world for that though
[20:09:09] <YorickPeterse[m]> On the topic of floats: are there any plans for global border configuration?
[20:09:18] <YorickPeterse[m]> errr and dimensions
[20:09:46] <dagle> I have to admit, I started to write code that exists in plenary... I feel like a dumbass.
[20:09:51] <YorickPeterse[m]> e.g. I now have this noise: https://gitlab.com/yorickpeterse/dotfiles/-/blob/c6e69aef85181d07763363cbe8b91062ad65c484/dotfiles/.config/nvim/lua/dotfiles/lsp.lua#L15-42
[20:10:01] <mjlbach[m]> YorickPeterse[m]: Yes
[20:10:20] <mjlbach[m]> vim.ui.border will be a thing
[20:10:20] <kylo252[m]> YorickPeterse[m]: we're halfway there with the new PR. tho I'm not sure it allows storing the opts for `open_preview` (yet)
[20:10:20] <mjlbach[m]> (I think)
[20:10:21] <YorickPeterse[m]> mjlbach: nice
[20:10:26] <mjlbach[m]> I don't thing borders should be customized per submodule
[20:10:30] <mjlbach[m]> s/thing/think/
[20:10:44] <mjlbach[m]> it's a quick PR but I don't want to bikeshed on it right now
[20:11:12] <YorickPeterse[m]> Oh there's no rush, I was just wondering about it. Overriding functions for this is pretty fragile 🙂
[20:11:16] <YorickPeterse[m]> But I'll keep an eye on `master`
[20:11:21] <kylo252[m]> but I don't think it's checking against it either, a malicious actor can just pass it there and no one is the wiser... allegedlies....
[20:11:36] <mjlbach[m]> In a way, it's the opposite of fragile because you have to explicitly opt-into border per function haha
[20:12:10] <mjlbach[m]> My worry with vim.ui.border is we're going to end up in a situation where a user wants to override vim.ui.border in vim.diagnostic, and then wants to override borders per language server with custom handlers that override the override in vim.diagnostic
[20:12:53] <YorickPeterse[m]> mjlbach: I was thinking more along the lines of a global table of sorts that `open_floating_preview` & friends use as a default
[20:13:01] <YorickPeterse[m]> so you'd do...
[20:13:14] <mjlbach[m]> That's what vim.ui would be
[20:13:18] <mjlbach[m]> * what vim.ui.border would
[20:13:25] <YorickPeterse[m]> `vim.lsp.util.float_options = { max_width = 9000 }`
[20:13:26] <YorickPeterse[m]> ah
[20:13:34] <mjlbach[m]> yup exactly
[20:13:47] <mjlbach[m]> maybe vim.ui.float.border
[20:14:21] <mjlbach[m]> these things always rub me a bit the wrong way because I like trying to be functional about things and avoid global state
[20:14:41] <mjlbach[m]> but at the same time, gotta give the people what they want
[20:14:53] <YorickPeterse[m]> oh yeah. I think right now the main issue is that you'd have to duplicate this config for all the various things that can create floats
[20:15:09] <YorickPeterse[m]> e.g. hover docs, line diagnostics, whatever on earth Telescope does, etc
[20:17:12] <YorickPeterse[m]> Now that I think of it, at least for myself I think I can get rid of these hacks 🤔
[20:17:21] <YorickPeterse[m]> 2 hours of editor tweaking later...
[20:17:49] <mjlbach[m]> Yeah, no I totally understand
[20:18:04] *** Joins: dfip^ (~dfip@70.166.66.234)
[20:20:13] *** Joins: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[20:20:35] * kylo252[m] uploaded an image: (94KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qMyDXRMJHuuBqgNvgSWBguAL/image.png >
[20:21:02] <kylo252[m]> I take no responsibility about any misuse tho 
[20:21:51] <YorickPeterse[m]> Ah now I remember: `vim.lsp.buf.hover()` doesn't take any options in the first place
[20:21:58] *** Quits: utraciss (~utraciss@118.100.247.27) (Quit: %quit from znc%)
[20:24:50] *** Quits: smash15 (~niclas@p200300cb67005900fe7e2d2f2e02f061.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[20:25:40] <mjlbach[m]> Yeah it's the handler that "handles" calling the floating window constructor
[20:26:31] *** Joins: smash15 (~niclas@p200300cb67005900abc74f2931008861.dip0.t-ipconnect.de)
[20:32:24] *** Joins: emf (~emf@2620:10d:c090:400::5:c0de)
[20:34:08] <kylo252[m]> mjlbach: here's the broken-rename repro btw. https://pastebin.com/GqdFEfE4
[20:34:08] <kylo252[m]> I'm not sure whose fault it is really, but assigning a workspace library is breaking the rename 🤷
[20:35:01] <mjlbach[m]> I see a config, but not a repro
[20:35:10] <mjlbach[m]> Am I missing something?
[20:35:49] <kylo252[m]> `nvim -u minimal_lsp.lua runtime/lua/health.lua` 
[20:35:49] <kylo252[m]> and just try to rename M in that file for example
[20:36:08] <mjlbach[m]> What does the rpc log say?
[20:38:13] <kylo252[m]> https://i.imgur.com/BcoUwb1.gif
[20:38:37] <kylo252[m]> https://pastebin.com/DLfdjymA
[20:39:10] <mjlbach[m]> Ok, seems like not our problem
[20:39:44] <kylo252[m]> this in particular looks odd:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/f5e5b252a1fc38150a9a0443c740b76d1f67d41b)
[20:39:55] <mjlbach[m]> Yeah, it failed to rename the symbol it looks like
[20:40:36] <kylo252[m]> idk how to enable trace logging on sumneko's but with debug level I couldn't find anything useful
[20:41:21] <mjlbach[m]> I'm fairly certain we're sending the right request
[20:41:37] <mjlbach[m]> could be wrong, you can file it upstream with sumeko with the rpc log
[20:41:40] <mjlbach[m]> s/sumeko/sumneko/
[20:41:51] <mjlbach[m]> The neovim minimal repro is probably not useful to them, as they use vscode
[20:43:39] <kylo252[m]> it doesn't even say that I made rename request: https://pastebin.com/3bZA75gn
[20:45:49] <mjlbach[m]> in this one?
[20:46:19] <mjlbach[m]> This one is long and I have no idea
[20:46:24] <mjlbach[m]> the other one our behavior is correct
[20:48:05] <kylo252[m]> I tried the one that works (no custom workspace) and it still doesn't say I sent a rename, and none of the rename output looks different in the log file
[20:48:33] <mjlbach[m]> Send me a minimal init.lua and the repo that reproduces it
[20:48:37] <kylo252[m]> so both... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/a3fc88bde4ac726489b8098a212b67a8ed3e50b0)
[20:48:38] <mjlbach[m]> in a github repo
[20:49:53] <kylo252[m]> I mean other than the minimal init, I didn't use anything except the neovim repo. it took way too long to isolate because it was grinding my gears how it wasn't working in lunarvim. 
[20:50:42] <mjlbach[m]> Ok, so just pull the file that causes the issue, put the minimal init.lua in that repo, and send it to me with the exact sequence of commands you did to reproduce the issue noted in README.md, and file an issue against neovim/neovim
[20:50:57] <mjlbach[m]> Otherwise I'll forget the details in this exchange
[20:51:33] <kylo252[m]> I can see if I can test it against some smaller "workspace", the problem is that I don't really get what this option is 
[20:52:08] <kylo252[m]> but I also don't get how there should be any difference between these:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ccb8e9fb50c82cb524ba2d01c36ec1d0e139de3b)
[20:52:53] <kylo252[m]> oh shit, what if it's that `git` bug again.. I'll try to remove the `.git` folder quickly
[20:53:06] <mjlbach[m]> We're getting more and more "server specific" type issues as of late and I'm trying to figure out ways of more quickly being able to file upstream issues
[20:53:10] <mjlbach[m]> I think I filed 3 in the last week
[20:54:08] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:54:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[20:59:05] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:59:13] *** Joins: fourstepper[m] (~fourstepp@2001:470:69fc:105::2045)
[21:02:53] <gpanders[m]> kylo252: can you verify the `show_header` thing on #16057 one more time for me?
[21:02:56] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:02:57] <gpanders[m]> it should work, but just want a sanity check
[21:03:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[21:04:06] <kylo252[m]> <mjlbach[m]> "We're getting more and more "..." <- okay I got a repro with a super simple setup, so that should be good to go
[21:08:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:17:44] *** Joins: benji[m] (~benjimatr@2001:470:69fc:105::1:1d90)
[21:21:20] *** Joins: ianliu (~ianliu@201-13-38-104.dsl.telesp.net.br)
[21:23:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 264 seconds)
[21:26:23] *** Joins: iomari891 (~iomari891@105.112.138.38)
[21:30:00] *** Joins: mmh (~mmh@173-165-141-73-utah.hfc.comcastbusiness.net)
[21:30:33] *** Joins: koevet (~koevet@ip5b4113de.dynamic.kabel-deutschland.de)
[21:30:41] *** Quits: ianliu (~ianliu@201-13-38-104.dsl.telesp.net.br) (Quit: WeeChat 3.3)
[21:36:48] <jamessan[m]> <mjlbach[m]> "We're getting more and more "..." <- That's a good thing, right?  It means our layer is stabilizing, so now people run into issues in the next layer
[21:37:36] <mjlbach[m]> Oh 100%
[21:38:06] <mjlbach[m]> I'll write a guide on how to read our logs/file good upstream bugs and add it to the lspconfig issue template options 
[21:39:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: No Ping reply in 180 seconds.)
[21:46:26] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.3)
[21:48:58] *** Quits: smash15 (~niclas@p200300cb67005900abc74f2931008861.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:49:15] *** Joins: smash15 (~niclas@p200300cb67005900e1aac36acb6dca2f.dip0.t-ipconnect.de)
[21:50:08] *** Quits: Kesava (~Kesava@user/kesava) (Ping timeout: 246 seconds)
[21:51:23] *** Joins: Kesava (~Kesava@user/kesava)
[21:53:55] <YorickPeterse[m]> Is there an `nvim_*` function to check if a window variable exists? 
[21:54:10] <YorickPeterse[m]> Right now I can use either `vim.fn.exists()` or `pcall` combined with `nvim_win_get_var`, but both are a bit meh
[21:55:09] <Julian> YorickPeterse[m]: :h vim.w
[21:55:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:57:03] <YorickPeterse[m]> Julian: `vim.w` doesn't handle non-existing variables
[21:57:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:57:14] <YorickPeterse[m]> that is, `vim.w.foo` errors if `foo` isn't set
[21:57:25] <YorickPeterse[m]> errr wait
[21:57:36] <YorickPeterse[m]> oh that's `vim.wo`, derp
[21:57:45] <YorickPeterse[m]> thanks 🙂
[21:57:58] <YorickPeterse[m]> ooh ackshually
[21:58:03] <YorickPeterse[m]> that operates in the context of the current window
[21:58:06] <YorickPeterse[m]> I need it for a specific window
[21:58:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:59:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:00:25] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:02:43] *** Joins: cqy[m] (~cqymatrix@2001:470:69fc:105::1:1e1b)
[22:03:13] <dundargoc[m]> Imagine mixing up `wo`, `o`, `bo`, `w`, `pho` and `doh` 
[22:03:16] <dundargoc[m]> 😤
[22:03:38] <bfredl> well theres a PR for that.
[22:03:45] <bfredl> `vim.w[winid].var` that is
[22:03:58] <mjlbach[m]> I find the low level api more intuitive 
[22:04:22] <dundargoc[m]> mjlbach[m]: Agree!
[22:04:27] <dundargoc[m]> What's the low level api?
[22:04:31] <bfredl> what's more low level than what?
[22:04:37] *** Quits: Kesava (~Kesava@user/kesava) (Ping timeout: 252 seconds)
[22:05:02] <mjlbach[m]> nvim_win_set_option
[22:05:05] <bfredl> the difference is that the lua level api return `nil` and the "low level" throws an error. and the former is more in line with lua conventions
[22:05:12] <LewisRussell[m]1> but the low level api errors more so you need to use `pcall` more
[22:05:18] <bfredl> mjlbach[m]: I thought we were speaking about vars?
[22:05:32] <mjlbach[m]> nvim_win_set_var
[22:05:52] <LewisRussell[m]1> s/more//
[22:06:21] <bfredl> and what's low level about it?
[22:06:25] <bfredl> in any useful sense?
[22:06:49] <LewisRussell[m]1> for reference: https://github.com/neovim/neovim/pull/15767
[22:06:50] *** Joins: ajr (~andrew@47.151.137.150)
[22:07:47] <LewisRussell[m]1> `vim.b/w/t` is just a wrapper around `nvim_*_set/get_var` so strictly speaking it is lower level in that sense
[22:08:20] <bfredl> LewisRussell[m]1: well, it's not.
[22:08:41] <LewisRussell[m]1> woops, actually that's not true. `vim.b/w/t` used `vim._set_var`. My bad
[22:08:41] <bfredl> in particular, it does not catch the error that nvim_get_var raises
[22:08:49] <bfredl> it skips it entirely, and saves the overFad
[22:08:54] <bfredl> s/overFad/overhead/
[22:09:49] <LewisRussell[m]1> s/used/uses/
[22:10:21] <mjlbach[m]> Sorry, low level is the wrong word
[22:10:26] <mjlbach[m]> I just mean the call style is more intuitive to me
[22:10:32] <mjlbach[m]> it's like any other api function
[22:10:37] <JulianJulianBerm> obviously the technical term is
[22:10:41] <JulianJulianBerm> "procedural-ish-y"
[22:12:33] <JulianJulianBerm> @greg:gpanders.com let me know if a ticket is better, but minor doc thing on the diagnostic change just now -- `goto_next` and `goto_prev` (rightfully) have a different default when calling `open_float` -- possibly worth mentioning that?
[22:12:50] <JulianJulianBerm> (they use `scope = "cursor"` which for them make more sense than the default `scope = "buffer"`)
[22:13:36] <bfredl> in principle we could stabilize `vim.get_var(scope, handle, var)`
[22:14:15] <gpanders[m]> JulianJulianBerm: what doc change are you suggesting exactly?
[22:14:36] <gpanders[m]> are you wanting the docs for goto_next to indicate that it uses scope="cursor" in its call to open_float?
[22:14:46] <JulianJulianBerm> yes
[22:15:26] <JulianJulianBerm> (can send a PR if you agree too)
[22:15:45] <mjlbach[m]> I'm not sure I understand the latest comment on that PR
[22:16:00] <mjlbach[m]> I though the default was focusable = true, and that you always had to toggle into it
[22:17:47] *** Joins: Kesava (~Kesava@user/kesava)
[22:18:16] <gpanders[m]> mjlbach: it's because `"focus_id"` is missing
[22:18:18] *** Quits: ajr (~andrew@47.151.137.150) (Ping timeout: 258 seconds)
[22:18:27] <mjlbach[m]> Ah that makes sense
[22:18:28] <mjlbach[m]> easy fix
[22:18:29] <gpanders[m]> it's my fault, I removed it. It's an easy fix though
[22:18:33] <mjlbach[m]> yeah
[22:18:34] <gpanders[m]> `opts.focus_id = scope` done
[22:18:42] <mjlbach[m]> Sorry I should have caught that too
[22:21:29] *** Quits: Carp (~rue@1-162-40-226.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[22:22:55] <dundargoc[m]> Was reading up on substituation (I read docs btw), was excited to try it out.
[22:22:55] <dundargoc[m]> ```
[22:22:56] <dundargoc[m]> :1,10s/a/[1]    641906 segmentation fault (core dumped)  $EDITOR ex_eval.c
[22:22:56] <dundargoc[m]> ```
[22:23:00] <dundargoc[m]> Why it hate me
[22:24:34] *** Quits: carbonfiber (uid513797@id-513797.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:25:06] <dundargoc[m]> Something something rewrite it in Ada
[22:31:29] <bfredl> where's the ASAN dump 
[22:33:09] <dundargoc[m]> What if we pretend it didn't happen instead?
[22:33:24] <bfredl> correct.
[22:33:29] <bfredl> ASAN dump or it didn't happen
[22:33:58] <gpanders[m]> <JulianJulianBerm> "(can send a PR if you agree too)" <- sure send it and we can discuss it
[22:38:47] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 264 seconds)
[22:39:59] *** Quits: Kesava (~Kesava@user/kesava) (Quit: Quitting)
[22:40:20] *** Joins: Kesava (~Kesava@user/kesava)
[22:41:35] <Julian> gpanders[m]: https://github.com/neovim/neovim/pull/16094 sent
[22:42:53] <dundargoc[m]> <bfredl> "ASAN dump or it didn't happen" <- aaaaand it crashed again. I might actually take you up on that offer on second thought.
[22:43:54] *** Joins: ajr (~andrew@47.151.137.150)
[22:44:50] <dundargoc[m]> Never use `:substitute`, not even once. It's a gateway drug to segmentation faults. 
[22:44:58] <dundargoc[m]> s/Never use `:substitute`, not even once. It's a gateway drug to segmentation faults./Never use `:substitute`, not even once. It's a gateway drug to segmentation faults./
[22:45:04] <dundargoc[m]> s/Never use `:substitute`, not even once. It's a gateway drug to segmentation faults./Never use `:substitute` kids, not even once. It's a gateway drug to segmentation faults./
[22:45:26] <bfredl> ooh so its reproducible
[22:45:40] <bfredl> no excuse to not post an ASAN log already
[22:45:44] <ndav1d[m]> is there any active plugin being developed similar to https://github.com/glepnir/indent-guides.nvim?
[22:46:38] <mjlbach[m]> indent-blankline
[22:46:56] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[22:47:31] <mjlbach[m]> (https://github.com/lukas-reineke/indent-blankline.nvim)
[22:47:55] <dundargoc[m]> mjlbach[m]: ooooh, it has colors. nice nice
[22:48:17] * dundargoc[m] uploaded an image: (121KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/gwJhMNpYIMDfMrnQYDMrcEyj/colors.png >
[22:48:18] <ndav1d[m]> cool! last time I checked it needed another plugin to work. now it seems more advanced :D 
[22:48:22] <gpanders[m]> btw you might not need a plugin: `set listchars+=multispace:\ \ \ \|`
[22:48:28] <gpanders[m]> unless you want all the fancy colors and stuff
[22:48:58] *** Quits: ajr (~andrew@47.151.137.150) (Ping timeout: 258 seconds)
[22:49:48] <gpanders[m]> and when https://github.com/neovim/neovim/pull/16049 is merged you an use Unicode characters too
[22:50:05] *** Joins: troyt (~troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[22:50:22] <dundargoc[m]> So like the poop emoji as indent-lines?
[22:50:27] <gpanders[m]> yep
[22:50:31] <gpanders[m]> the dream
[22:50:45] <ndav1d[m]> gpanders[m]: whattt multispace is a thing o_0
[22:50:57] <dundargoc[m]> Everyone drop what they're doing, this is highest priority for neovim at the moment.
[22:50:58] <gpanders[m]> yea it was added somewhat recently
[22:51:11] <ndav1d[m]> dundargoc[m]: indeed
[22:52:28] *** Quits: dfip^ (~dfip@70.166.66.234) (Remote host closed the connection)
[22:52:37] <mjlbach[m]> hmm gpanders doesn't that only work for a given 4 space indentation?
[22:52:42] <mjlbach[m]> or 3 space
[22:52:54] <mjlbach[m]> (genuine question, I don't know)
[22:52:56] <gpanders[m]> yea but you could set it in a ftplugin based on the value of 'shiftwidth'
[22:53:48] <gpanders[m]> let &listchars .= ',' . repeat(' ', &tw) . '|'
[22:53:51] <gpanders[m]> for instance
[22:54:02] <gpanders[m]> sorry for the Vimscript, it's still how my brain works when it comes to setting config options
[22:54:11] <gpanders[m]>  * ```vim
[22:54:11] <gpanders[m]> let &listchars .= ',' . repeat(' ', &sw) . '|'
[22:54:11] <gpanders[m]> ```
[22:54:22] <gpanders[m]>  * ```vim
[22:54:22] <gpanders[m]> let &listchars .= ',' . repeat(' ', &sw-1) . '|'
[22:54:22] <gpanders[m]> ```
[22:55:44] <gpanders[m]>  * ```vim
[22:55:44] <gpanders[m]> let &listchars .= ',multispace:' . repeat(' ', &sw-1) . '|'
[22:55:44] <gpanders[m]> ```
[22:57:25] <ndav1d[m]> hmm would there be an easy way to disable multispace on certain buffers? like startify, etc
[22:58:19] <gpanders[m]> should be straightforward with an autocommand
[22:58:41] <ndav1d[m]> hmm yeah
[23:01:23] *** Joins: Guest15 (~Guest15@152.67.220.169)
[23:02:39] <ndav1d[m]> hmmm multispace acts on all multispaces... so not only at the beginning of the file to show indentation
[23:06:06] *** Joins: ajr (~andrew@47.151.137.150)
[23:06:54] *** Joins: notpeelz (~notpeelz@modemcable193.14-178-173.mc.videotron.ca)
[23:09:45] <gpanders[m]> that is true
[23:09:46] <gpanders[m]> not a real replacement then
[23:09:52] *** Joins: rgrinberg (~textual@186.4.37.225)
[23:12:14] <ndav1d[m]> hmm still a nice feature 
[23:12:22] <ndav1d[m]> and I'll play around with it :D
[23:15:13] *** Quits: smash15 (~niclas@p200300cb67005900e1aac36acb6dca2f.dip0.t-ipconnect.de) (Quit: Leaving)
[23:15:48] *** Joins: va5c0 (~vasco.nun@2001:818:e35b:6300:5ab0:35ff:fe81:99ae)
[23:16:29] *** Quits: va5c0 (~vasco.nun@2001:818:e35b:6300:5ab0:35ff:fe81:99ae) (Client Quit)
[23:16:50] *** Joins: va5c0 (~vasco.nun@2001:818:e35b:6300:5ab0:35ff:fe81:99ae)
[23:17:59] <ndav1d[m]> does telescope has a buftype or filetype while it's opened? 
[23:18:23] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 264 seconds)
[23:19:56] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[23:24:41] <gpanders[m]> looks like it sets the filetype to `TelescopePrompt`
[23:25:13] <ndav1d[m]> :D thanks
[23:27:33] <kylo252[m]> <mjlbach[m]> "I'll write a guide on how to..." <- the rename problem is an upstream bug, verified on ||vscode|| 😄
[23:27:42] <mjlbach[m]> called it
[23:28:01] <kylo252[m]> got a "no result" there
[23:28:24] <kylo252[m]> I guess that could be useful to implement? 
[23:28:31] <mjlbach[m]> what could be useful to implement?
[23:28:56] <kylo252[m]> some notification from the client, that the server just bailed on the operation 
[23:28:58] <kylo252[m]> or something
[23:29:14] <mjlbach[m]> It didn't bail though, it returned a packet without an error code with an invalid rename operation 
[23:29:27] <mjlbach[m]> Maybe, but I think this is a fairly isolated incident
[23:30:09] <kylo252[m]> I'll try to dig the source code of how they do it, if they check the response or it's a timeout 
[23:30:21] <kylo252[m]> I would assume both clients are getting the same response 
[23:30:39] <mjlbach[m]> sumneko is very good, if you provide the reproduction on vscode I imagine they will fix it
[23:31:32] <YorickPeterse[m]> TIL `BufWinEnter` gets triggered twice when opening location lists
[23:31:41] <YorickPeterse[m]> Which strikes me as a bit odd...
[23:32:17] <gpanders[m]> Yorick Peterse: if you're not careful you're going to end up digging through the quickfix list source code
[23:32:21] <gpanders[m]> a fate I wouldn't wish on anyone
[23:32:35] <YorickPeterse[m]> TIL that also happens when using `nvim -u NONE` so I guess it's a feature
[23:32:37] <YorickPeterse[m]> gpanders: No I don't hate myself enough to do that
[23:32:39] <YorickPeterse[m]> yet
[23:32:55] <YorickPeterse[m]> Now to figure out how I can deal with this in my location list populating code...
[23:33:08] <YorickPeterse[m]> (besides giving up on location lists and installing trouble)
[23:34:06] *** Quits: notpeelz (~notpeelz@modemcable193.14-178-173.mc.videotron.ca) (Quit: Connection closed)
[23:34:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:34:52] <YorickPeterse[m]> So it seems to basically first invoke it for the quickfix/loclist window, then for the file/target window
[23:36:02] <YorickPeterse[m]> oh no I am looking at the quickfix code
[23:37:07] <gpanders[m]> I warned you!
[23:38:26] * YorickPeterse[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/2dfa1e6f141e10390ed9d0054a0e2eeac8216a93
[23:38:45] <YorickPeterse[m]> I guess I can at least use `vim.bo.buftype` to bail out then
[23:41:31] <mjlbach[m]> is it the same as vim?
[23:41:51] <YorickPeterse[m]> I think this is the culprit: https://github.com/neovim/neovim/blob/master/src/nvim/quickfix.c#L3612
[23:42:13] <YorickPeterse[m]> That is, it seems to first go to a window, then create the quickfix
[23:42:36] <ooGoop9> Can anybody reproduce the following outcome: open terminel (nvim prompt `:terminal<CR>`) -> start `ranger` -> inside ranger execute shell (ranger prompt `:shell $SHELL<cr>`) -> exit shell (shell prompt `<C-D>`) -> change the directory -> start shell again (ranger prompt: `:shell $SHELL<cr>`) -> cursor in terminal mode vanished
[23:43:48] <YorickPeterse[m]> mjlbach: Yeah this is a feature, BramVim does the same
[23:43:59] <YorickPeterse[m]> "feature"
[23:44:08] *** Quits: robobo7 (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se) (Quit: The Lounge - https://thelounge.chat)
[23:44:12] <mjlbach[m]> Seems like a potential bug report?
[23:44:16] <YorickPeterse[m]> and here I thought I was getting things done this evening...
[23:44:18] <mjlbach[m]> Would at least be nice to have it documented why it is the way it is
[23:45:51] <kylo252[m]> <mjlbach[m]> "sumneko is very good, if you..." <- done: https://github.com/sumneko/lua-language-server/issues/742
[23:45:51] <kylo252[m]> hopefully it gets fixed fast, but you can point people towards it if it ever comes up
[23:47:36] <mjlbach[m]> nice, ty
[23:48:47] *** Joins: robobo7 (~robobo@c-e52c524e.015-74-6762675.bbcust.telenor.se)
[23:48:59] <YorickPeterse[m]> https://github.com/vim/vim/issues/9022
[23:50:16] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[23:56:03] *** Joins: _xor (~xor@72.49.199.147)
[23:58:22] <YorickPeterse[m]> Now to figure out why selecting an entry in location lists is triggering `DiagnosticsChanged` ....
