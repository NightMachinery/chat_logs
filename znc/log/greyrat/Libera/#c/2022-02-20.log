[00:00:18] *** Quits: drbeco (~beco@2804:351c:dd03:4500:a332:d74e:8d17:e625) (Ping timeout: 260 seconds)
[00:02:12] <ChoHag> FSVO correct.
[00:02:19] *** Quits: xlowen (~xlowen@143.255.160.222) (Quit: Connection closed)
[00:02:28] <sham1> It compiles, it must be correct!
[00:02:34] *** Joins: ofl^ (~ofl@50.233.120.162)
[00:02:46] <ChoHag> Stick it in production.
[00:03:05] <sham1> It's funny to hear even for languages where that's "more true" like Haskell
[00:03:26] <ChoHag> It's nothing to do with the language.
[00:03:30] <ChoHag> It's a personality thing.
[00:04:44] <ChoHag> If it "works", whatever that means, push it to production and let the users deal with it.
[00:04:44] <pragma-> candide: itworks
[00:04:45] <candide> It works it works! Omg omg omg! I mean it compiles. Now what's a segfault?
[00:04:50] *** Joins: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b)
[00:07:25] <meator> Hello again. Why does passing a volatile variable to a function accepting a non-volatile variable cause a warning?
[00:07:56] <ChoHag> Because the compiler's confused and wants to check that you know what you're doing.
[00:08:12] *** Joins: crashrep (~crashrep@user/crashrep)
[00:08:58] <meator> How could volatile casting cause problems?
[00:09:25] <ChoHag> I expect it's not in and of itself, but the types don't match so the compiler simply throws up a "wtf?".
[00:10:21] <ChoHag> Volatile has subtle interactions with the runtime though.
[00:12:45] *** Joins: novachiefd[m] (~novachief@2001:470:69fc:105::1:c561)
[00:12:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[00:14:59] *** Parts: novachiefd[m] (~novachief@2001:470:69fc:105::1:c561) ()
[00:17:14] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:18:07] <twkm> you discard a qualifier.  if you cast it away compilers usually won't whine, though more and more compilers are including linting which might not accept a cast to mean "i know what i'm doing" which is part of the traditional (though not standardized) meaning.
[00:19:12] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[00:19:40] * APic praises twkm.
[00:19:56] <APic> Celebrate Chaoflux! Hail Eris!
[00:20:29] <twkm> i suspect you are misusing the term cast.  a conversion that discards qualifiers must be diagnosed.
[00:21:42] *** Joins: quartz (~quartz@user/quartz)
[00:22:16] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[00:22:36] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[00:25:03] <meator> Why would discarding the volatile qualifier cause problems?
[00:27:18] <fizzie> Are you sure it's the *variable* that's volatile, as opposed to passing a pointer to a volatile-qualified type?
[00:27:23] <fizzie> ,cc void f(int x) { printf("%d", x); } volatile int i = 0; f(i); // no warnings
[00:27:24] <candide> fizzie: 0
[00:27:25] <fizzie> ,cc void f(int *p) { printf("%d", *p); } int i = 0; volatile int *p = &i; f(p); // with warnings
[00:27:27] <candide> fizzie: [warning: passing argument 1 of 'f' discards 'volatile' qualifier from pointer target type [-Wdiscarded-qualifiers]  note: expected 'int *' but argument is of type 'volatile int *'] 0
[00:27:59] *** Joins: novachiefd (~novachief@202.142.79.145)
[00:29:17] <twkm> because the compiler might not have built the function to not cache the value.
[00:30:36] <fizzie> Warning on discarding a qualifier from a pointer makes sense, because if you have a pointer to a volatile-qualified type, usually it's because there's a specific reason to treat the pointed-to object as volatile, and that special treatment is lost if you convert it to a non-volatile-qualified pointer.
[00:30:44] <twkm> so inside void f(char *p) uses of *p might use the last value fetched as long as nothing internal might have changed it.
[00:32:35] <twkm> where in void g(volatile char *q) all uses of *q require the value to be fetched again.
[00:33:11] <fizzie> (Also in terms of the standard, discarding the qualifier is a constraint violation -- C11 6.5.2.2p2 + 6.5.16.1p1 -- which requires a diagnostic. So a conforming implementation at least needs to be able to warn about it.)
[00:34:02] *** Joins: chomwitt (~chomwitt@2a02:587:dc04:5f00:97ff:5c76:a7e3:730d)
[00:34:21] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[00:34:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:37:24] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Ping timeout: 240 seconds)
[00:38:15] <meator> Since I don't understand this, I'm going to tell you why I'm asking. I'm doing a non-local goto and I'd like to utilize some local variables.
[00:38:39] <novachiefd>  hello everyone, so i have quite a weird problem, i have pointer to a struct, but when i pass the pointer to a specific function, even before any code executes in the function, a significant portion of the struct's fields get corrupted, could anyone help me on this problem
[00:39:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[00:39:39] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:40:33] <twkm> i'd guess there are different struct definitions involved.  do you have a test case?
[00:40:38] *** Joins: Guest123 (~Guest123@202.142.79.145)
[00:40:55] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[00:42:39] *** Joins: rcf (~rcf@sdf.org)
[00:42:42] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[00:42:59] *** Joins: Klinda (~superleag@user/klinda)
[00:43:03] <novachiefd> that was my first thought, but looking at my code there is iterally one struct so i don't know how that'd happen
[00:43:17] <meator> But volatile is just (the lack of) optimisation.
[00:43:51] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:44:08] *** Quits: Guest123 (~Guest123@202.142.79.145) (Client Quit)
[00:45:29] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:45:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:48:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[00:48:38] <meator> fizzie: Are you saying that volatile data requires special treatment, that it doesn't only affect how it is stored?
[00:49:01] <twkm> meator: you can't discard (static) compile-time optimization at runtime, there are no jit semantics in c.  so if the function has no use of volatile there will be optimization of the uses of *p.
[00:49:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:49:14] <apotheon> 14:13 < meator> But volatile is just (the lack of) optimisation.
[00:49:17] <twkm> novachiefd: which is why a test case can be useful.
[00:49:22] <apotheon> except when your compiler ignores you
[00:50:38] <twkm> my f() didn't use the qualifier thus the compiler was free to optimize *p away after the first one (provided nothing in f changes p).
[00:51:33] *** Joins: korg815 (~korg815@user/korg815)
[00:51:53] <twkm> even if f changes *p the compiler is free to cache that value, not write it out immediately rather defer writing it until, say, the function returns.
[00:51:57] *** Quits: yo (~ayu@2405:201:5502:83a:2205:4da7:8c0a:818a) (Ping timeout: 240 seconds)
[00:52:49] <fizzie> meator: The point is, you only use a `volatile T *` in the first place when you need your implementation to do whatever it does with volatile. So discarding the qualifier when passing the pointer to a different function is a potential sign of trouble. If you needed the access to be volatile in one place, is it likely you suddenly *don't* need that when it's being accessed in that other function?
[00:53:02] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[00:53:52] <twkm> novachiefd: i believe you will see that there is no corruption.  a second guess is that you are using threads, poorly.
[00:55:54] *** Quits: p0g0 (~p0g0@23.252.182.13) (Changing host)
[00:55:54] *** Joins: p0g0 (~p0g0@user/p0g0)
[00:55:54] *** Quits: quartz (~quartz@user/quartz) (Read error: Connection reset by peer)
[00:56:25] <meator> Let's say I have used volatile because I really want the compiler to treat it without optimisations. Why doesn't every libc function that has poniter arguments have a volatile counterpart?
[00:56:50] <meator> I wan to do an unlink() on a volatile char[17].
[00:56:55] <fizzie> But now that you mention it, yes, there's also a rule that if you have an actual `volatile`-qualified object, you *must* access it via a volatile-qualified pointer.
[00:57:40] <fizzie> C11 6.7.3p6: "If an attempt is made to refer to an object defined with a volatile-qualified type through use of an lvalue with non-volatile-qualified type, the behavior is undefined."
[00:58:34] *** Quits: novachiefd (~novachief@202.142.79.145) (Quit: novachiefd)
[00:58:35] <twkm> too bad meator, because there aren't.
[00:59:07] <meator> Why isn't there int vunlink(volatile const char *pathname)?
[00:59:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:59:42] <ChoHag> Pathnames aren't generally volatile.
[00:59:43] <twkm> guess novachiefd didn't want to use the irc debugger after all.
[01:00:03] <twkm> meator needs volatile because sie wants to use longjmp.
[01:00:19] <ChoHag> longjmp is a bitch.
[01:00:25] <Rounin> Is the problem that it could change during the function call or what
[01:00:46] <ChoHag> It can change when you longjmp.
[01:01:14] <ChoHag> Many bets are off when you longjmp. Don't do it.
[01:01:14] <meator> Does this mean that the OS cannot delete a file who's name is stored as volatile?
[01:01:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:b63f:5fd6:7c74:2962) (Ping timeout: 240 seconds)
[01:01:18] <Rounin> Ah... Hm... But then, might it just be copied into another value before doing the unlink()?
[01:01:35] *** Quits: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se) (Ping timeout: 256 seconds)
[01:01:38] <ChoHag> meator: That question makes no sense.
[01:01:54] <twkm> it means the api isn't prepared to deal with the possibility of a byte of the name changing when it goes to use it.
[01:01:55] <Rounin> I suppose using some kind of memory barrier could also work... Which would require an intrinsic or inline assembly
[01:02:06] <fizzie> The "problem" is presumably that (7.13.2.1p3) "objects of automatic storage duration that are local to the function containing the invocation of the corresponding `setjmp` macro that do not have volatile-qualified type and have been changed between the `setjmp` invocation and `longjmp` call are indeterminate."
[01:02:27] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ef0a:b873:5367:9d0e)
[01:02:57] <Rounin> But like... char* tmppath = malloc(strlen(volatile_thing) + 1); for(int i = 0; i < etc. etc. anyway copy it over
[01:02:58] <goodfella> Rounin: assembly ? isn't it can be done in posix membarrier ?
[01:03:01] <fizzie> meator: Just copy the contents of your `volatile char[17]` into something that's non-volatile. It wouldn't make sense to provide duplicates of *every* function just because of the incredibly rare case where you'd need one.
[01:03:03] <twkm> the usual solution is static or allocated duration rather than volatile.
[01:03:12] <Rounin> goodfella: Presumably
[01:03:16] <ChoHag> A value that is stored in memory can be considered volatile because the compiler might actually store it in a register instead.
[01:04:00] <ChoHag> So if code after a subsequent longjmp refers to that variable it may request it from memory and obliterate the newer value in a register.
[01:04:50] <fizzie> Or that, yeah. A `char *volatile p = malloc(17);` gives you a volatile local variable that doesn't hit the longjmp rule, but the value of which can be passed to unlink. Of course you'll need to arrange for it to be deallocated when appropriate.
[01:04:53] *** Joins: yo (~ayu@2405:201:5502:83a:2205:4da7:8c0a:818a)
[01:04:57] *** Quits: goodfella (~archer@user/tessio) (Quit: WeeChat 3.4)
[01:05:12] <Rounin> One could maybe do it with a macro, even
[01:05:19] <ChoHag> Declaring a variable as volatile ensure that the compiler does whatever is necessary so that the variable appears where it's supposed to be however it's accessor is reached.
[01:05:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[01:08:23] *** Joins: crashrep (~crashrep@user/crashrep)
[01:08:37] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 240 seconds)
[01:09:20] *** Joins: quartz (~quartz@user/quartz)
[01:12:26] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (Quit: WeeChat 3.4)
[01:13:49] *** Quits: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[01:15:06] <meator> So I can copy the contents of volatile char[17] to a char[17] after the longjmp.
[01:15:44] *** Joins: r3d1n (r3d1n@gateway/vpn/protonvpn/r3d1n)
[01:17:21] <meator> Or I can use malloc()ed memory which is naturally volatile and store it in a pointer which is itself volatile.
[01:18:22] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:19:28] <meator> fizzie: I still don't understand why aou are using char *volatile p. Could you explain that?
[01:19:31] *** Joins: LuKaRo (~LuKaRo@p200300dfa72f4b9400000000000001f9.dip0.t-ipconnect.de)
[01:19:48] <meator> s/aou/you
[01:20:13] <ChoHag> I don't understand why you want to use a volatile char?
[01:20:30] <meator> ChoHag: Because longjmp().
[01:20:40] <ChoHag> Yeah but why?
[01:21:01] *** Joins: alex11 (~alex11@user/alex11)
[01:21:22] *** Quits: Akuli (~Akuli@87-94-111-226.bb.dnainternet.fi) (Quit: Akuli)
[01:21:54] <fizzie> meator: The `volatile` in the `char *volatile` was for the same reason as the one in your `volatile char[17]`.
[01:22:04] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[01:22:27] <fizzie> So that the local variable in your function you setjmp in is volatile-qualified, and exempt from the already-quoted (7.13.2.1p3) rule.
[01:22:28] <nitrix> Anyone excited by C23's approval of typeof :) ?
[01:22:34] <sham1> I am
[01:22:46] <ChoHag> No.
[01:22:50] *** Parts: r3d1n (r3d1n@gateway/vpn/protonvpn/r3d1n) ()
[01:22:56] <sham1> #define INFER(name, expr) typeof((expr)) name = (expr)
[01:23:09] <edk> ugly
[01:23:11] <sham1> This will now be valid ISO C2023
[01:23:11] <meator> IChoHagt want to access the char[17] after longjmp() to use unlink(). Variables local
[01:23:28] <meator> Sorry. That's a typo.
[01:23:39] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[01:23:46] <edk> i think i like typeof in general
[01:24:05] <sham1> But more seriously and with less macro magic, I am excited for typeof
[01:24:41] <ChoHag> meator: Try not doing that.
[01:24:56] <ChoHag> Don't use longjmp.
[01:26:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:28:43] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[01:30:50] <meator> fizzie: So longjmp() requires that there is volatile qualifier somewhere. You are using char *volatile because it can be converted to char * without trouble, which isn't true for volatile char *.
[01:33:19] <fizzie> It doesn't require there's a volatile qualifier "somewhere", it requires objects with automatic storage local to the function specifically to be volatile-qualified.
[01:34:05] <fizzie> A `volatile char *p` local to the function with the setjmp call would have an indeterminate value after a longjmp back into that function.
[01:34:38] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (Remote host closed the connection)
[01:35:18] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[01:35:35] <fizzie> A `volatile char arr[17]` on the other hand is fine, because the array object is what's volatile-qualified there.
[01:35:54] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[01:37:54] <fizzie> Well, I guess strictly speaking it's the individual elements of the array that are qualified, but the point being they're the objects with automatic storage that you need to worry about too.
[01:38:15] *** Joins: boo (~cart@2a01:4c8:41e:420c:136e:cc05:1dce:dcd9)
[01:38:33] <nomagno> Is there any use for longjmp() as defined by the standard that can't be done other ways?
[01:38:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[01:38:35] *** Joins: faris (~faris@lfbn-idf1-1-1759-158.w90-91.abo.wanadoo.fr)
[01:38:42] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[01:39:47] <meator> Maybe I really shouldn't use longjmp.
[01:40:09] <meator> Or I can copy volatile char arr[17] to char arr[17]. Am I right?
[01:41:09] <fizzie> You can do that. Not with memcpy/strcpy, of course. But with a loop. (Or by wrapping it in a struct type.)
[01:42:19] *** Joins: j-james (~apropos@dhcp-206-87-155-4.ubcsecure.wireless.ubc.ca)
[01:43:23] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (Client Quit)
[01:44:09] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 272 seconds)
[01:44:21] <meator> so volatile char* isn't volatile-quantified, it is just pointing to a volatile object?
[01:44:38] <fizzie> Yes.
[01:45:00] <fizzie> Just like `const char *` vs. `char *const`.
[01:46:05] <nomagno> `char const *` is the same as `const char *`,  right?
[01:46:26] <masoudd> ,cc char const *i; const char *j;
[01:46:28] <candide> masoudd: no output: i = <optimized out>; j = <optimized out>
[01:46:36] <masoudd> ah i meant ,english
[01:47:34] <twkm> yes nomagno.
[01:47:41] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[01:47:52] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4)
[01:48:20] <meator> I will think about this further.
[01:48:23] <fizzie> Yeah, and arguably `char const *` would be the more consistent order for it (given the existence of `char *const`), but to me at least it still just looks weird.
[01:48:39] <twkm> similar to long int is the same as int long.  or signed long is also long signed.
[01:48:47] <meator> Thanks for your answers!
[01:48:54] <meator> I have to leave now.
[01:49:02] <twkm> o
[01:49:26] <fizzie> `long int signed` for maximum ridiculousness.
[01:49:39] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[01:51:12] <fizzie> Oh, they should've made it so `long int` is big-endian and `int long` is little-endian. That'd've been so good.
[01:52:04] <twkm> "you want subtle bugs, 'cause that's how you get subtle bugs."
[01:52:23] <twkm> not that c doesn't have plenty.
[01:54:06] *** Joins: zuplex (~zuplex@202.51.76.74)
[01:55:48] <sham1> More subtle bugs to increase the support demand of #c. Follow the money!
[01:56:56] *** Quits: j-james (~apropos@dhcp-206-87-155-4.ubcsecure.wireless.ubc.ca) (Quit: leaving)
[01:57:01] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[01:57:13] *** Joins: unlink2 (~unlink@p200300ebcf12830011a7c6fae7585651.dip0.t-ipconnect.de)
[01:58:42] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:58:50] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:58:52] <quartz> Hello. Can someone please tell me why my program return 139? https://godbolt.org/z/cKbx7TGqM   I'm trying to do this assignment: https://bpa.st/WVBQ
[01:59:37] <quartz> The assignment is simple: I want to accept some user input, create a copy of the argv array, capitalize all strings in the argv array.
[01:59:47] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:59:57] *** Joins: SamuelMa1ks (~samuel@user/samuelmarks)
[02:00:42] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Remote host closed the connection)
[02:01:12] <fizzie> From just skimming the code real fast, both malloc calls are off by one.
[02:01:29] <fizzie> Which often isn't why it doesn't work, but still not right.
[02:02:07] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[02:02:41] <fizzie> You need (argc+1) pointers in the array (to have a space for the terminating null pointer), and strlen(s)+1 bytes for a copy of s (for the terminating '\0').
[02:04:06] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:04:23] <quartz> fizzie: Ohhh
[02:04:30] <quartz> The finer details of C always get me :(
[02:04:36] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[02:05:14] <fizzie> Well, I guess given the rest of the code you don't strictly *need* the terminating null pointer in the copy, since the iteration uses the original argv for the counting.
[02:06:15] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[02:07:46] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[02:08:05] <fizzie> There's also an instance of the "gets everyone every time" mistake of passing a `char` to `toupper`.
[02:08:20] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[02:08:36] <quartz> fizzie: I thought toupper accepted a char as an argument
[02:09:05] <quartz> Did I write freeDuplicatedArgs correctly? I wanted to free the entire **copy pointer with a while loop
[02:09:06] <fizzie> You'd think so, wouldn't you? But it doesn't.
[02:09:13] <quartz> Huh?
[02:09:13] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[02:09:18] <quartz> I looked it up.
[02:10:04] <fizzie> Then you looked it up wrong. C11 7.4p1: "In all cases [of the functions in <ctype.h>] the argument is an `int`, the value of which shall be representable as an `unsigned char` or shall equal the value of the macro `EOF`."
[02:10:47] <quartz> So i should cast?
[02:11:04] <fizzie> To `unsigned char`, yes. If you want it to be strictly conforming.
[02:12:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[02:12:49] <fizzie> Re `freeDuplicatedArgs`, right, that's problematic too. The `copy` you pass to free on line 41 no longer has the value it had before the while loop.
[02:13:26] <fizzie> (Basically, the same issue as that comment on line 57 is presumably referring to.)
[02:14:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:14:55] <quartz> fizzie: Why is it not the same value?
[02:15:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[02:17:57] <fizzie> Because you change it on line 37.
[02:17:57] *** Quits: alch (~alch@151.82.56.205) (Read error: Connection reset by peer)
[02:18:39] <quartz> So it's not possible to free a double pointer using a while loop? I need a for
[02:18:44] <fizzie> The `while (copy)` loop can only possibly terminate if copy == NULL, so that's what it'll be after the loop.
[02:18:56] <quartz> Oh
[02:19:13] <fizzie> Except that that loop condition's wrong too, which I completely missed on the first pass.
[02:19:46] <quartz> while(*copy)?
[02:19:52] <quartz> I'm guessing sorry
[02:20:09] <fizzie> Well, you did guess correctly. But it's correct for the same reason why it's `while (argv)` on line 56.
[02:20:19] <fizzie> ... `while (*argv)` I mean.
[02:20:23] <fizzie> Typing: it's hard.
[02:21:58] <quartz> Oh I didn't notice that
[02:22:19] *** Joins: alch (~alch@151.82.7.52)
[02:23:13] <quartz> But than the part IN the loop is wrong too. I just want to free the individual pointer within copy
[02:23:15] *** Joins: goodfella (~archer@user/tessio)
[02:23:29] <goodfella> http://ix.io/3Q6d
[02:23:48] <goodfella> when i press alot of spaces it counts them as newlines .. why ?
[02:24:03] <goodfella> it should ignore the
[02:24:04] <goodfella> m
[02:24:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[02:25:07] <fizzie> quartz: That's fine. `*copy` is the (first) individual pointer in the array.
[02:25:09] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:25:29] <goodfella> there need to be only one newline after some characters typed but not more
[02:25:30] <fizzie> The point of the loop's controlling expression is just to stop when that individual pointer is a null pointer, because that's what the argv list is terminated by.
[02:25:39] <pragma-> goodfella: print the values of c and state in your loop to find out why.
[02:26:18] <quartz> fizzie: I implemented the changes and it still returns 139. https://godbolt.org/z/hEcbr97ff
[02:26:23] <fizzie> Also turn on -Wmisleading-indentation or whatever it was.
[02:26:26] <quartz> Everything shold be correct
[02:27:29] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[02:27:56] <quartz> Oh the names were wrong but it still does not work.
[02:27:57] <quartz> wtf
[02:28:00] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[02:28:12] <fizzie> quartz: There's still the problem of trying to do `free(copy)` on line 41 *after* it's been modified by the loop, and also (as a new thing) trying to copy the argv[argc] element as if it was a string (running the loop of lines 11-25 on it too).
[02:28:39] *** Joins: crashrep (~crashrep@user/crashrep)
[02:28:46] *** Joins: Enitin (~Enitin@82.102.22.86)
[02:29:14] <pinheadmz> whats the best way to set a uint16 constant into a specific position in an array? memcpy() expects a memory address but I dont want to bother with a pointer, is there a one-liner? or do i need to set each byte of the constant one at a time ?
[02:29:30] *** Quits: Narrat (~omnius@p200300df5f123b4a06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:29:40] <fizzie> (And lines 24, 27 should presumably be writing to argv_cpy rather than argv.)
[02:30:06] <quartz> fizzie: Yeah I saw :)
[02:30:48] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:31:16] *** Quits: boo (~cart@2a01:4c8:41e:420c:136e:cc05:1dce:dcd9) (Ping timeout: 250 seconds)
[02:31:23] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-6.cspire.com) (Read error: Connection reset by peer)
[02:31:25] <quartz> fizzie: So I can't assign argv_cpy[argc + 1] element as '\0'/
[02:31:27] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[02:31:33] <quartz> Oh because it's a char *
[02:31:53] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[02:31:55] <fizzie> You *can*. It's maybe a little misleading to.
[02:32:00] <fizzie> But '\0' is a valid null pointer constant.
[02:32:26] <fizzie> pinheadmz: Why would "bothering with a pointer" not be a one-liner too? Though setting the bytes individually would make it endian-agnostic.
[02:33:11] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:33:25] <quartz> fizzie: I'm sorry I don't understand what is wrong with my loop at line 11 - 25.
[02:33:40] *** Quits: pizdets (~pizdets@183.182.114.44) (Ping timeout: 256 seconds)
[02:33:46] *** Joins: pizdets_ (~pizdets@183.182.110.129)
[02:33:57] <pinheadmz> i mean if i have   #define CONSTANT 3  then I wanna  memcpy(&array[offset], CONSTANT, 2)
[02:34:41] <fizzie> `memcpy(&array[offset], &(uint16_t){CONSTANT}, 2);` is an option, if you just want to copy the representation.
[02:34:50] <fizzie> I've always gone with a `void write_u16(unsigned char *p, uint16_t val);` convenience function though.
[02:35:16] <pinheadmz> yeah i have a set of buffer-writers ill just use them, thanks
[02:35:22] <sham1> static inline void write_u16 to a header and it'll optimize nicely
[02:36:06] <fizzie> And if the just-off-the-press http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2903.htm gets included in C23, you get to do it with the incredibly pleasantly named `stdc_store8_leu16` / `stdc_store8_beu16`. ;)
[02:36:08] <candide> Title of fizzie's link: N2903: Modern Bit Utilities
[02:36:22] <fizzie> (I was just skimming the list for new proposals earlier today.)
[02:36:23] <nomagno> If you think about it, C's primitives (well, char and int) are essentially barely types at all by how weakly they are enforced. They simply serve as elegant building blocks for more complex aggregates.
[02:37:15] <pragma-> elegant
[02:39:56] <fizzie> It also proposes (among others) stdc_count_zeroes and stdc_count_leading_zeros, which is nicely inconsistent.
[02:40:13] <twkm> i wonder how long is somehow more strongly enforced than int.
[02:40:16] <fizzie> Oh, I guess that's just in the table of contents.
[02:41:13] *** Joins: oxfuxxx (~oxfuxxx@195.47.194.46)
[02:42:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:42:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:42:30] *** Joins: Church (~aleph@68.161.207.188)
[02:44:10] *** Joins: talismanick (~talismani@192.145.118.51)
[02:44:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Read error: Connection reset by peer)
[02:45:57] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18)
[02:46:17] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[02:46:35] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:46:55] <quartz> Oh I got it. My loop was going to argc + 1
[02:46:57] <quartz> Thanks fizzie
[02:47:50] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[02:48:01] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:48:31] <goodfella> http://ix.io/3Q6n
[02:48:56] <quartz> BRB
[02:48:57] <goodfella> ok it's work but i mnot sure about readability
[02:48:57] *** Quits: faris (~faris@lfbn-idf1-1-1759-158.w90-91.abo.wanadoo.fr) (Quit: Lost terminal)
[02:48:58] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[02:49:17] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 240 seconds)
[02:49:20] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[02:49:34] *** lukedashjr is now known as luke-jr
[02:50:06] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[02:50:36] <goodfella> pragma-: is it common is some programs to have too many if's and else's ?
[02:50:56] <pragma-> maybe
[02:51:14] <pragma-> most programs certainly have more code than they need
[02:51:14] <apotheon> define "too many"
[02:51:29] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[02:51:58] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:52:19] <twkm> hmm, too many if's.
[02:52:25] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:34e0:8b74:dd2c:1d62) (Ping timeout: 256 seconds)
[02:54:15] <goodfella> i don't see how it solvable in more efficient manner
[02:54:39] <goodfella> but at least it doesn't have bugs so ill take it
[02:54:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[02:55:01] <nightstrike> working with strings in C sucks ;(
[02:55:25] <nightstrike> not like, managing memory.. but like... doing things based on the contents of the string
[02:55:43] *** Joins: luke-jr- (~luke-jr@user/luke-jr)
[02:55:44] <goodfella> aren't we all like to live dangerously in this channel
[02:55:46] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[02:56:50] <goodfella> ok i write my own wc -w .. lol
[02:57:08] <pragma-> nightstrike: oh I don't know, sometimes it can be kind of fun figuring out a clever efficient way to manipulate null-terminated strings.
[02:57:26] *** luke-jr- is now known as luke-jr
[02:57:34] <pragma-> nightstrike: but yeah, when you're just trying to accomplish a task, the string manipulation can get in the way.
[02:57:36] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[02:57:58] <nightstrike> I'm using a library that represents a tree like structure where the path in the tree is represented by a string such that a.b.c:d  'd' is a leaf node (denoted by the colon), and a, b, c are ...branches, I guess, denoted by periods.  I can have a path that starts with : (so just ":d"), or starts with nothing, inplying a colon (so just "d"), and I have to tell the api to create all the missing branches for a given path (kinda like mkdir -p)
[02:58:52] <nightstrike> so for instance, if someone says..  addLeaf("a.b.c:d"), I have to try to add each part separately, because the API isn't smart enough to offer a "mkdir -p" style method
[02:59:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:59:13] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[02:59:14] <nightstrike> so I'd do... add("a"), add ("a.b"), etc.
[02:59:47] <goodfella> it's amazing how things we take as granted aren't so simple like mkdir -p :D
[02:59:49] <nightstrike> strtok isn't allowed in my environment (because someone found a problem with it once a long time ago, so it's been banned), leaving me with strchr / strstr, etc
[03:00:08] <DarkUranium> strtok can easily be implemented via strcspn.
[03:00:21] <goodfella> DarkUranium: i think i met you in oftc
[03:00:31] <DarkUranium> goodfella: quite possibly, I am in OFTC.
[03:00:40] <nightstrike> so am I :)
[03:00:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:00:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:00:45] *** Joins: wroathe (~wroathe@user/wroathe)
[03:00:51] <nightstrike> #gcc, #mingw-w64, etc
[03:01:07] <DarkUranium> Yeah. Also #llvm in my case and a few others.
[03:01:11] <goodfella> DarkUranium: what do we owe the pleasure of hosting you in libera ?
[03:01:23] <DarkUranium> lol
[03:01:23] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[03:01:33] <DarkUranium> You can thank FreeNode for that one. I've been on it since ... 2006ish?
[03:01:40] <DarkUranium> Dumped it for Libera during the drama. Obviously.
[03:01:43] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Quit: Lost terminal)
[03:01:54] <DarkUranium> Or rather, I *had* been on it.
[03:02:32] <nightstrike> anyway, the thing I can't seem to figure out is how to do this more elegantly than something like..   char temp[strlen(path)]; followed by a lot of intermediate copying from the src string into temp, because I have to keep adding \0's, and I can't modify the source string
[03:03:15] <DarkUranium> snprintf?
[03:03:38] *** Joins: quartz_ (~quartz@user/quartz)
[03:03:41] *** Quits: quartz_ (~quartz@user/quartz) (Client Quit)
[03:03:57] <goodfella> im going to sleep cya
[03:04:09] *** Quits: goodfella (~archer@user/tessio) (Quit: WeeChat 3.4)
[03:04:23] <nightstrike> well I mean sprintf is the aforementioned copying from one to another
[03:04:28] <nightstrike> for every path component
[03:04:35] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[03:04:40] <nightstrike> and it sucks because of all the corner cases
[03:04:56] <nightstrike> I guess I'm just complaining instead of doing it :)
[03:05:05] <nightstrike> maybe if I do it, someone here can tell me how to do it better
[03:05:27] <nomagno> How would I go about writing a reentrant replacement for strtok?
[03:05:41] <pragma-> do what strtok_r does
[03:05:49] <pragma-> don't keep an internal pointer
[03:05:53] <pragma-> allow the caller to pass one in
[03:06:06] <tusko> what's the deal with static variables? Can I initialize their value in their declaration, outside any functions?
[03:06:11] <nightstrike> nomagno: the problem that we apparently have with strtok is not concurrency between threads but issues where the token position gets modified if you call another function that also uses strtok
[03:06:15] <tusko> the example here https://www.linuxtopia.org/online_books/Linux_Kernel_Module_Programming_Guide/x573.html seemse to do just that
[03:06:17] <candide> Title of tusko's link: Linux Kernel Module Programming Guide - Character Device Drivers
[03:06:28] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[03:07:00] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[03:07:10] <nightstrike> like..  void f() { strtok(...);  g();  strtok(...); }   // if g() also uses strtok, you hit a problem
[03:07:57] *** Quits: SamuelMa1ks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[03:09:22] <fizzie> tusko: Yes, a declaration for an object with static storage duration can have an initializer, even at file scope. But it has to be a constant expression.
[03:10:03] <tusko> Ok, cool. I was just always taught to init in a function, for some reaon I was told there would otherwise be no memory allocated.
[03:10:36] <pragma-> declarations allocate memory, not initializations.
[03:10:41] <pragma-> well, definitions.
[03:11:04] <fizzie> That's a pretty weird thing to be told, all told.
[03:11:35] <DarkUranium> nightstrike: hence strtok_r.
[03:11:39] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:11:41] <DarkUranium> Do you have strtok_r available in your system?
[03:11:58] <DarkUranium> (but yes, strtok and a few others are *terrible* design)
[03:12:00] <tusko> I feel like it was a microaggression to tell me that you couldin't initialize static variables at the file level.
[03:12:17] <pragma-> microaggression
[03:12:21] <tusko> the govt should give me a check to make up for it
[03:12:26] <nightstrike> DarkUranium: maybe.. it was added to glibc a while ago, I presume...   our oldest is RH6, so probably?
[03:12:43] <DarkUranium> It's POSIX, so it should be if you're only targeting Linux.
[03:13:00] <DarkUranium> POSIX 2001, even.
[03:13:06] <nightstrike> yeah, the people who banned strtok were porting stuff from vax to some random unix circa like... 1994
[03:13:11] <nightstrike> probably solaris
[03:13:23] <pragma-> imagine coding under 1994 rulesets in 2022
[03:13:31] <tusko> solaris <3 where did you go?
[03:13:38] <pragma-> oracle killed it
[03:13:40] <nightstrike> I don't have to imagine it.  It sucks :)
[03:13:58] <tusko> we would have flying cars now if oracle hadn't done that
[03:14:36] <nightstrike> the collection of lots of unixes in the 90s made for good market competition at least
[03:14:56] <tusko> now that the world has slackware 15 tho, what else do we really need?
[03:15:10] <sham1> Slackware 16
[03:15:12] <sham1> Obviously
[03:15:14] <pragma-> we really need all the different linuxes to stop inventing their own system management tools
[03:15:21] <sham1> Obviously and by induction
[03:15:28] <tusko> touche
[03:16:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc04:5f00:97ff:5c76:a7e3:730d) (Remote host closed the connection)
[03:16:26] <nightstrike> well...  a lot are just adopting systemd, which will take over everything eventually.  It won't be long before systemd is the package manager, the kickstarter.. I mean jeez, it's already got printers!
[03:16:34] <nomagno> How does strtok() return the token without any memory allocation? Hmmm, let me look at an implementation
[03:16:44] <sham1> nomagno: global state
[03:16:53] <sham1> Disgusting, disgusting global state
[03:17:10] <sham1> Doesn't even do thread-safe IIRC
[03:17:23] * pragma- mutters
[03:17:25] <sham1> And re-entracy? Fat chance
[03:17:28] * pragma- points at scrollback
[03:17:51] <fizzie> As for *returning* the token, it just returns a pointer into the original string; that's why it modifies it.
[03:17:57] <tusko> actually, you can vaccinate your systems against systemd if you want
[03:18:01] <nomagno> `char map[N] = {0}, *os;`
[03:18:06] <nomagno> Is this valid C?
[03:18:08] <nomagno> What does it do?
[03:18:19] <fizzie> The same as `char map[N] = {0}; char *os;`
[03:18:28] * pragma- stares
[03:18:40] <Rounin> I mean... N? Is N defined?
[03:18:52] <fizzie> Declares `map` as a `char[N]` with an initializer that fills it with zeros, and `os` as a `char *` with no initializer.
[03:19:00] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[03:19:00] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[03:19:10] <nightstrike> tusko: how?
[03:19:14] <nomagno> Rounin: Yes
[03:19:25] <fizzie> Just as valid as `int a, b;`.
[03:19:39] <nightstrike> tusko: unless you mean just use one of the few remaining distros that haven't been tainted yet
[03:19:45] <pragma-> `int a, b;` obviously discards `a` to declare `b` because comma operator.
[03:19:46] * pragma- nods
[03:20:05] <Rounin> I wasn't aware one could use a variable as an array size like that, but if it's a constant, perhaps, or if it's a newer feature...
[03:20:08] <sham1> I just declare each variable on it's own line
[03:20:26] <Rounin> Someone else asked about a similar construction here a while ago, so it seems to be a thing
[03:20:30] <sham1> Rounin: C1999 has VLAs
[03:20:40] <nomagno> Rounin: It's a macro in this case, but you could use a variable
[03:20:40] <Inline> hmm, the style recommendation is to group them according to type
[03:20:43] <Rounin> sham1: Haha, I guess that counts as newer in the C world
[03:20:50] <fizzie> Really committed to those four-digit years, I see.
[03:20:50] <Inline> so int a,b,c,d;
[03:20:55] <Rounin> nomagno: Aah... Hence the capital N
[03:21:20] <Inline> int *e,*f,*g,*h;
[03:22:07] <pragma-> Rounin: ,cc int a = 42, i[a] = {0};
[03:22:08] <sham1> I do actually cringe a little internally when I write c18 for something like -std
[03:22:08] <candide> Rounin: error: variable-sized object may not be initialized
[03:22:14] * pragma- grunts.
[03:22:33] <Rounin> Hmm... Perhaps it's not C99?
[03:22:36] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:22:38] <nightstrike> there's a c18?
[03:22:47] <sham1> Yes. It's better known as c17
[03:22:50] <fizzie> Rounin: VLAs *are* C99, you just can't have an initializer for one.
[03:23:02] <sham1> Or as I call them, C2017 and C2018
[03:23:08] <Inline> and the new style suggests things like char *pointer_to_the_pointee; i don't know where the humor chapter of the std is else i'd have quoted it....
[03:23:16] <Inline> lol
[03:23:57] <Rounin> ,cc int a = 42; int[a] b = {0};
[03:23:58] <candide> Rounin: error: expected identifier or '(' before '[' token
[03:24:02] <fizzie> ...
[03:24:06] <fizzie> ,cc int a = 123, i[a];
[03:24:10] <candide> fizzie: no output: a = 123; i = {-7749, 32767, -142308672, 32767, -7776, 32767, -143791523, 32767, -1, -1, -1, -1, 0 <repeats 14 times>, -16777216, -65536, -16777216, -1, -256, -1, 1432317541, 1414868563, 775433542, 946238581, 0, 0, 0, 0, 536870912, 538968096, 32, 536879136, -1, -1, -256, -16711681, 0, 0, 0, 536879136, 0 <repeats 20 times>, 11, 0, -143360166, 32767, 0, 0, -120, -1, 12, 0, 4317520, 0, 281,... <truncated; https://0x0.st/o8nD.txt>
[03:24:14] <Rounin> >D
[03:24:21] <fizzie> ...should've gone with a smaller a, I guess.
[03:24:22] <Rounin> What even...
[03:24:22] <pragma-> you had to pick 123
[03:24:36] <fizzie> I like to give other numbers than 42 a chance too.
[03:25:07] <sham1> ,cc int a = 7, i[a];
[03:25:09] <candide> sham1: no output: a = 7; i = {0, 0, 0, 0, 0, 0, 0}
[03:25:14] <sham1> Neat
[03:25:20] <Rounin> ,cc int a = 42; int b[a] = {0};
[03:25:21] <candide> Rounin: error: variable-sized object may not be initialized
[03:25:36] <Rounin> I guess that was Java syntax I used earlier... That makes sense then
[03:25:51] <Rounin> ,cc int a = 42; int b[a]; b[0] = 3;
[03:25:53] <candide> Rounin: no output: a = 42; b = {3, 0, 4317520, 0, 281, 0, -143787972, 32767, -7520, 32767, -142196122, 32767, -6247, 32767, 0, 0, 2, 0 <repeats 25 times>}
[03:25:56] <sham1> Yes, although it's not even valid Java
[03:26:01] <Rounin> Wow, you can see what's in RAM
[03:26:12] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[03:26:37] *** Joins: VoidSync (~sync@user/voidsync)
[03:26:57] <fizzie> You can see for miles and miles and miles and miles.
[03:26:57] <nomagno> Plan9's strtok calls the global state pointer "under_rock"
[03:27:09] <nomagno> >XD
[03:27:39] <Rounin> ,cc char a[101];  a[100] = '\0'; printf("%s", a);
[03:27:41] <candide> Rounin: no output: a = ""
[03:28:17] <Rounin> ,cc int oneohone = 101; char a[oneohone];  a[100] = '\0'; printf("%s", a);
[03:28:19] <candide> Rounin:
[03:28:25] <sham1> I usually just roll my own state machine for tokenising. Not only will it be re-entrant and such, but it is also more versatile than strtok
[03:28:30] <Rounin> Hm... So it dumps RAM when there's no output, but printf doesn't see it
[03:28:55] <pragma-> you are getting lucky with leading zero bytes in your `a`
[03:29:00] <fizzie> The `printf` stops at the first 0 byte. And chances are a lot of the other bytes are just control characters.
[03:29:07] <Rounin> That makes sense
[03:29:12] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[03:29:16] <Rounin> So much for getting /etc/shadow or something
[03:29:40] <fizzie> It's memory allocated for *your process*, not just random bytes from anywhere.
[03:30:12] <Rounin> Well, it was random bytes, to be fair... Which could be thermal noise or could be from another process
[03:30:56] *** Joins: evanextreme (~evan@2604:4080:1000:8150:c4dd:92db:20cd:4512)
[03:30:59] <Rounin> Or perhaps modern memory protection completely prevents things like that.. It seems like a thing one would want to prevent
[03:31:56] *** Joins: quartz (~quartz@user/quartz)
[03:32:06] <nomagno> ... I've implemented VMs/LBAs in C, but come to think of it I've never implemented an explicit state machine.
[03:32:18] <nomagno> Well, sounds like a nice idea!
[03:32:54] <fizzie> If you get pages from another process, it's time to file a bug.
[03:33:02] <fizzie> ,cc -w int len = 1000; unsigned char data[len], *p = data; for (int c = 0; p-data < len && c < 64; p++) if (*p) printf("%02hhx", *p), c++; // here's some nonzero bytes
[03:33:04] <candide> fizzie: 10e6fff7ff7fc005fbf7ff7f9b74e5f7ff7fa240ffffffffe0735b822e5b07cfdcf7ff7f90fbf7ff7f02a24010809e40e09f40d383e5f7ff7fb6e1ffffff7fa0
[03:34:14] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:34:27] *** Joins: SamuelMa1ks (~samuel@user/samuelmarks)
[03:34:30] <Rounin> fizzie: Well, you didn't write the random bytes, so if we imagine that all userspace RAM had been filled by processes once and then released, then the pages would at least had to be zero in order for data not to leak
[03:34:51] <Rounin> Which might be something that happens, though... It would make sense from a security perspective at least
[03:35:12] <Rounin> Perhaps any page that comes filled with random data has been previously unused and is just filled with noise
[03:35:26] <Rounin> Or with data previosuly written by the same process
[03:35:37] *** Quits: evanextreme (~evan@2604:4080:1000:8150:c4dd:92db:20cd:4512) (Ping timeout: 240 seconds)
[03:36:13] <fizzie> The latter is the most likely explanation.
[03:36:16] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 250 seconds)
[03:36:35] <fizzie> There's a lot that goes on in a dynamically linked binary before you get to `main`, and a lot of time to scribble a bunch of things in memory.
[03:36:40] <Rounin> It does seem like a sane default... That whenever a page is released to other processes, it would be zeroed
[03:39:24] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[03:39:24] *** Quits: SamuelMa1ks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[03:39:24] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[03:39:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:41:57] *** Quits: csrf (~csrf@user/csrf) (Ping timeout: 240 seconds)
[03:42:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[03:43:49] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[03:44:04] *** Joins: kurahaupo (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au)
[03:44:30] *** Quits: oxfuxxx (~oxfuxxx@195.47.194.46) (Ping timeout: 256 seconds)
[03:45:37] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:46:24] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[03:47:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:48:45] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:49:10] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:50:19] *** Joins: Wulf (~Wulf@user/wulf)
[03:50:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:50:37] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[03:51:46] *** Joins: oxfuxxx (~oxfuxxx@2a01:cb18:5c0:cb00:d830:eda8:e66f:15e9)
[03:52:14] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220211225827])
[03:53:01] *** Joins: seninha (~chatzilla@user/seninha)
[03:54:10] <nightstrike> attempt 1 works, cases 2-4 fail :) https://www.irccloud.com/pastebin/R2KyAwP6/
[03:55:16] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[03:55:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[03:55:48] <nightstrike> I have a newfound respect for whoever wrote mkdir -p :)
[03:56:15] *** Joins: ferdna (~ferdna@user/ferdna)
[03:58:23] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:59:52] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:00:34] <Xgc> nightstrike: What did you expect 2, 3 and 4 to do?
[04:01:22] <nightstrike> :d should just print Leaf: :d,  .a should print "Branch: .a"...   "d" with no specifier?  I dunno, I guess I'll default to Leaf
[04:02:21] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[04:02:25] *** Joins: skapata (~Skapata@user/skapata)
[04:02:59] <Xgc> nightstrike: What are you adding to?
[04:03:02] *** Joins: AmR| (~AmREiSa@156.199.67.136)
[04:03:12] *** Quits: AmR (~AmREiSa@156.199.14.65) (Ping timeout: 256 seconds)
[04:03:24] *** AmR| is now known as AmR
[04:03:32] <nightstrike> some esoteric library that  holds data in a pseudo-tree-like structure
[04:03:47] <nightstrike> think of it like an hdf database
[04:03:58] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[04:04:09] <nightstrike> or a file system, where '.' is a dir separator, and ':' indicates a file
[04:04:28] <nightstrike> or any other hierarchy system you like :)
[04:04:31] *** Quits: oxfuxxx (~oxfuxxx@2a01:cb18:5c0:cb00:d830:eda8:e66f:15e9) (Ping timeout: 245 seconds)
[04:04:58] <caze> . means branch and : means leaf?
[04:05:13] <nightstrike> yeah
[04:05:23] <caze> Can you have more than one branch at a node?
[04:05:34] <nightstrike> yeah
[04:05:43] <Xgc> nightstrike: Usually, the API includes passing some tree/branch/node for which you then wish to perform an operation.
[04:06:09] <Xgc> nightstrike: addNode(tree, "new thing")
[04:06:09] <nightstrike> so like... you can have a.b:AA, a.b:BB, a.b:CC, a.c:AA, a.c:BB, a.c:CC
[04:07:19] <nightstrike> this one kind of does, but what it doesn't do is let you basically add a set of nodes like "mkdir -p" would.  So if a exists and is empty, you can say "addnode(a.b.c:d")..   you have to add a.b, then add a.b.c, then add a.b.c:d
[04:07:29] <nightstrike> can't say*
[04:08:02] <nightstrike> so I'm trying to break the string apart to do that myself
[04:08:19] <nightstrike> and I'm struggling with the limited string api in c ;(
[04:08:30] *** Joins: lllh (~llh@198.48.244.21)
[04:09:01] <Xgc> nightstrike: How do you build a branch one step at a time with this API?   For instance, let's say you wish to create "a.b.c:d", one component at a time.  1) "a", 2) add ".b" to "a", etc.
[04:09:51] <nightstrike> I would call addPath("a", Branch), addPath("a.b", Branch), addPath("a.b.c", Branch), addPath("a.b.c:d", Leaf)
[04:09:57] *** Quits: llh (~llh@user/llh) (Ping timeout: 240 seconds)
[04:10:32] <nightstrike> (I acknowledge that it's not ideal)
[04:10:38] <Xgc> nightstrike: What does Branch represent?  Your posted code has no such argument.
[04:10:55] <caze> It's an enum.
[04:10:57] <nightstrike> line 5, enum.. it's not really that in the real code
[04:11:02] <Xgc> Ah. I see.  You weren't testing addPath.
[04:11:02] <nightstrike> but it's close enough
[04:11:19] <Xgc> Not directly.
[04:11:32] <nightstrike> right, addPath represents the screwball API I'm trying to use
[04:11:37] *** Joins: oxfuxxx (~oxfuxxx@195.47.194.46)
[04:11:42] <nightstrike> addNode represents what I'm trying to write to interface to it
[04:12:05] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[04:12:15] <nightstrike> and main() represents a user that wants it to all magically "just work"
[04:12:53] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:13:58] *** Joins: zer0x (~zer0x@42.118.38.224)
[04:14:07] <Xgc> I don't see how addNode(":d") has enough detail.  There could be many ":d" components in the tree.  You haven't indicated where you wish to place it.
[04:14:12] *** Quits: useretail (~useretail@185.132.19.151) (Ping timeout: 240 seconds)
[04:14:21] <nightstrike> it would just be at the top level
[04:15:06] <nightstrike> to the filesystem analogy, it'd be like putting a file in your root directory instead of in a subdirectory
[04:15:23] <caze> size_t length = strlen(path); char temp[length];
[04:15:35] <caze> temp will be one char smaller.
[04:15:46] <nightstrike> addnode("d") doens't have enough detail, so I'm just going to default to making it be the same as ":d"
[04:16:00] <nightstrike> oh, whoops
[04:16:02] <nightstrike> ty
[04:16:29] *** Joins: SamuelMa1ks (~samuel@user/samuelmarks)
[04:17:24] <nightstrike> This gets me a tiny bit closer..  bailing out early for the ":d" case
[04:17:27] <nightstrike> https://www.irccloud.com/pastebin/1QUzWwsE/
[04:18:02] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 272 seconds)
[04:22:10] <nightstrike> I think I almost got it
[04:25:21] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 256 seconds)
[04:27:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:28:54] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[04:29:57] *** Joins: crashrep (~crashrep@user/crashrep)
[04:30:36] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[04:31:11] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:34:16] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:35:22] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[04:36:38] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 256 seconds)
[04:44:24] <quartz> Anyway I can run valgrind online?
[04:45:29] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[04:46:33] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[04:48:31] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[04:48:46] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[04:50:19] <quartz> Hello. Sorry to ask again, but I'm getting memory leak errors with my simple code. I think I wrote freeDuplicateArgs incorrectly. Can someone help? https://godbolt.org/z/qeGacnc75
[04:51:58] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18)
[04:57:00] <Rounin> quartz: Hmmmmm, well, you free copy and then use it after freeling it, so that's one thing
[04:57:16] <quartz> Rounin: Oh!
[04:59:30] <quartz> Rounin: If I place the free(copy) after the while loop it still does not work
[05:00:10] <Rounin> quartz: I wonder if the ++ doesn't work either... Because it might just increment the value that you dereferenced and throw it away
[05:00:21] <Rounin> Whereas it's the pointer that should be incremented
[05:01:51] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[05:02:02] <Rounin> for(; while *copy, ++copy) ... Something like that
[05:02:10] <fizzie> `*copy++` is `*(copy++)` and does increment the pointer.
[05:02:14] <Rounin> Though I haven't checked whether the last empty element actually is null
[05:02:26] <Rounin> Ah, OK, that's good
[05:03:04] *** Joins: m4v (~znc@ubuntu/member/m4v)
[05:03:46] <fizzie> Anyway, just do the same thing you're doing in `main`: use a different variable for the loop, so that you still have the original one around for freeing it after the loop.
[05:04:37] <Rounin> Ah, there you go... It can't be freed after incrementing it a bunch of times
[05:04:41] *** Quits: mahmutov (~mahmutov@37.155.70.125) (Ping timeout: 256 seconds)
[05:04:54] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[05:05:03] <quartz> So it's not possible to free **copy with a while loop only?
[05:05:36] <fizzie> Using a different variable doesn't mean you couldn't use a `while` loop. I mean, main uses a while loop too.
[05:06:13] <quartz> Ohhh sorry I misunderstood
[05:06:31] <Rounin> But you have to free(copy) last, and it can't have been incremented
[05:06:52] <Rounin> So you could either use a tmp_copy in your loop, or free(original_copy) after the loop
[05:07:23] <quartz> Right
[05:07:41] *** Quits: nightstrike (uid487@2a03:5180:f:5::1e7) (Ping timeout: 250 seconds)
[05:07:58] <fizzie> That said, you could argue that `for (char **p = copy; *p; p++) free(*p);` is clearer than the while loop and incrementing the pointer inside the call to free.
[05:08:31] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[05:09:35] <quartz> fizzie: Ahhh yeah that's better
[05:09:56] <quartz> Does the value in argc take into account the NULL value at the end of argv?
[05:10:12] *** Joins: zachel (~zachel@user/zachel)
[05:10:16] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Quit: Leaving)
[05:10:55] <Rounin> Not that I know... Then again, I wasn't aware that there was one
[05:11:11] *** Joins: csrf (~csrf@user/csrf)
[05:11:43] <Rounin> You do get an extra value because 0 is the name of your program, though
[05:12:13] <Rounin> Or the name on the user's system, anyway
[05:12:28] <fizzie> It doesn't count in argc, but there is one.
[05:12:36] <fizzie> Or in other words, argv[argc] == NULL.
[05:12:46] <Rounin> That's quite nice
[05:13:06] <fizzie> ,c11 5.1.2.2.1p2
[05:13:07] <candide> http://www.iso-9899.info/n1570.html#5.1.2.2.1p2 [Program startup] If they are declared, the parameters to the main function shall obey the following constraints: -- The value of argc shall be nonnegative. -- argv[argc] shall be a null pointer. -- If the value of argc is greater than zero, the array members argv[0] through argv[argc-1] inclusive shall contain pointers to strings, which are given implementa... <truncated; https://0x0.st/o85P.txt>
[05:13:08] <nightstrike> ok, so......
[05:13:24] <nightstrike> I got something that works.  The implementation isn't..... great.....   I'd appreciate constructive comments:
[05:13:27] <nightstrike> https://www.irccloud.com/pastebin/zFYZqBtd/
[05:13:38] <quartz> Oh, so I don't need argv_cpy[argc + 1] = '\0';
[05:13:53] <quartz> It should be argv_cpy[argc] = '\0';
[05:14:00] *** Joins: timmmmy (~timmy@2601:1c2:4a00:4340:afd7:50d5:2a5f:a5ea)
[05:14:09] *** Parts: timmmmy (~timmy@2601:1c2:4a00:4340:afd7:50d5:2a5f:a5ea) ()
[05:14:24] *** Quits: ofl^ (~ofl@50.233.120.162) (Remote host closed the connection)
[05:14:27] <Rounin> nightstrike: Hmm... If next == ":", doesn't it make one choice and then overwrite it?
[05:14:46] <Rounin> nightstrike: Or, I guess addPath might modify next in between
[05:15:23] *** Quits: jamesmartinez (~pepsi@2a02:4780:1:1::1:a856) (Quit: WeeChat 1.9.1)
[05:15:27] <Rounin> Hmm... There are also two entries for "."
[05:15:35] <nightstrike> addPath doesn't modify things, but addNode needs to do that because the punctuation can come at the beginning.   :A and A are both valid (frustratingly)
[05:16:17] <nightstrike> where are the two entries?
[05:16:35] <Rounin> nightstrike: "else if (next == '.')" is already covered by if (next == ':' || next == '.')
[05:16:57] <Rounin> nightstrike: But the if (next == ':') after addPath contradicts the if (next == ':' || next == '.') before addPath
[05:17:15] <Rounin> Before addPath, ":" means a Branch, but after it means a Leaf
[05:17:17] <nightstrike> yeah, so this is where what I'm doing is lackluster...   The second set of if's sets up "type" for the next iteration of the for loop
[05:17:19] <Rounin> But for ".", it even means the same
[05:18:05] <nightstrike> so in the case of ...  a:b, while we're on node "a", the fact that there is another node implies that a must be a branch, so we ignore the value of "type" and override it
[05:20:00] *** Joins: Enitin (~Enitin@82.102.22.85)
[05:21:06] <nightstrike> so we make a decision at the end of the loop, and potentially ignore that decision on the next iteration
[05:21:13] <nightstrike> it kinda sucks
[05:21:33] <Rounin> nightstrike: Yeah, hm... It's a bit confusing... It would have been better if you could just determine the node type right before the call to addPath
[05:21:46] <nightstrike> I can't figure out how to do that
[05:21:56] <nightstrike> at least not for all 5 cases in the tests
[05:22:12] <nightstrike> I would welcome a solution that is more elegant
[05:22:34] <Rounin> Fair enough... The last "else if" isn't needed either way, since you already set the type to Branch
[05:23:19] <nightstrike> You are correct, removing the last else if gives the same results
[05:23:22] <nightstrike> so that's one improvement )
[05:23:23] <nightstrike> :)
[05:26:26] <nightstrike> any idea how to avoid or improve the confusing logic of contradicting myself?
[05:26:31] <quartz> fizzie: Sorry to bother you again. I'm still getting "invalid write of size 8" at line 27, where it sets argv_cpy[argc] = '\0';
[05:26:40] <quartz> https://godbolt.org/z/7oWPEYYjc
[05:26:59] <Rounin> nightstrike: Not just from looking at it, I'm afraid... It seems like it moves through the path one character at a time, though... So I wonder if it would work for paths with longer elements
[05:27:18] <nightstrike> I will add a test 6 for that
[05:27:19] <Rounin> nightstrike: Oh, never mind, I see it adds to position as well
[05:27:29] <Rounin> position += etc.
[05:27:37] <Rounin> But yeah, might as well test the functionality
[05:28:10] <fizzie> quartz: You've allocated space for `argc` pointers. That means only argv_cpy[0] through to argv_cpy[argc-1] are valid. You need to allocate space for one more pointer.
[05:28:10] <nightstrike> looks like longer names work
[05:28:18] <Rounin> Nice
[05:28:33] <fizzie> Which I think you were doing before, but undid.
[05:28:37] <nightstrike> technically, the api limits names to a somewhat small number, so I should check that anyway
[05:28:40] <quartz> Uhhhh
[05:28:47] <Rounin> Ah yeah... It says argc+1 in my copy
[05:29:26] <nightstrike> what I really need is some kind of high level path splitting function or something
[05:29:37] <nightstrike> I'm kind of doing that in a stupid way
[05:29:51] <Rounin> nightstrike: C has one called strtok(), but it is a bit odd... I think it modifies the string and everything
[05:30:03] <fizzie> If you allocate space for 3 pointers, the valid pointers are 0, 1 and 2. If you need to store argc+1 values (argc arguments, and 1 null), you need enough space for argc+1 pointers.
[05:30:08] <Rounin> You could make your own split() that spits out an array
[05:30:10] <nightstrike> strtok isn't allowed in my environment :(
[05:30:49] <quartz> fizzie: right. the array indices vs size always confuse me.
[05:30:52] <Rounin> It could do two passes... One to count the number of delimiting characters, and then it could malloc (that + 1) number of elements, etc.
[05:31:31] <quartz> fizzie: One last thing. when I run valgrind it says: Conditional jump or move depends on uninitialised values: at line 34.
[05:31:38] <quartz> that line SHOLD be right!
[05:31:40] <quartz> SHOULD*
[05:31:49] <Rounin> I suppose it would have to end it all with a null element so you could go through them and free them later... Either that, or tell you the number of elements it allocated by taking an int pointer
[05:31:53] *** Joins: jamesmartinez (~pepsi@2a02:4780:1:1::1:a856)
[05:32:14] <nightstrike> Rounin: I actually don't need the early bail out anymore, either..  lines 22 to 25
[05:33:01] <fizzie> quartz: I imagine that's for argv_cpy[0], which is never initialized.
[05:33:26] <fizzie> (The loop in `duplicateArgs` starts from 1.)
[05:33:32] <quartz> Right.
[05:34:04] <quartz> But I don't want it to print the name of the program name.
[05:34:19] <quartz> Like ./twecho hello world. I don't want it to print twecho
[05:34:41] <quartz> Uhhh, sorry not sure that made sense.
[05:34:42] <fizzie> Well, there's a couple of options. You can still copy it, but just skip over it when printing (which you already do). Or you can skip over it when freeing.
[05:35:03] <fizzie> Or just not include it in the copy in the first place, but then the indices will be mismatched.
[05:35:12] <fizzie> (argv_cpy[0] will be a copy of argv[1], and so on.)
[05:35:22] <quartz> Oh
[05:35:29] <quartz> THATs why they do p++ in main.
[05:35:45] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[05:37:40] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:37:41] <quartz> fizzie: Thanks for your help bro
[05:41:00] <nightstrike> ok, well I can't think of any more improvements, so I'm gonna comment what I have so it's understandable and move on
[05:41:06] <nightstrike> thanks for your help, everyone
[05:43:01] <Rounin> Ah... Well, congrats on getting it all working!
[05:43:15] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[05:50:39] <nightstrike> thanks :)
[05:51:15] <nightstrike> oh, I didn't mean to imply that your idea wasn't good, it's just probably too involved to implement right now
[05:53:42] <Rounin> Sure... I mean, the main thing is to solve the task and learn things, hehe
[05:55:07] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 256 seconds)
[06:01:34] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[06:05:50] *** Joins: jx0 (~jx0@199.229.250.137)
[06:06:07] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[06:08:59] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:11:24] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[06:12:40] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 272 seconds)
[06:13:08] *** Quits: snortie (~snortie@2a02:970:1186:1800:f881:7773:c6f5:7fb8) (Ping timeout: 250 seconds)
[06:14:43] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[06:15:18] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 250 seconds)
[06:19:26] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[06:20:11] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:20:36] *** Quits: alch (~alch@151.82.7.52) (Ping timeout: 240 seconds)
[06:22:41] *** Joins: alch (~alch@151.82.7.24)
[06:26:06] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:27:40] <SamuelMarks> assert breaks ASans?
[06:29:09] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[06:29:41] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[06:29:44] <SamuelMarks> `if (curl_url_get(urlp, CURLUPART_URL, &url, 0) == CURLE_OK)` with an `assert` over `if`
[06:30:31] <SamuelMarks> or was the assert disabled so `curl_url_get` was never called
[06:30:37] <SamuelMarks> hmm
[06:30:50] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[06:32:10] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[06:32:38] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 250 seconds)
[06:33:11] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220211225827])
[06:33:28] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:34:05] *** Joins: seninha (~chatzilla@user/seninha)
[06:34:59] <dave0> SamuelMarks: don't put side effects in an assert() in case someone compiles it with -DNDEBUG and the code disappears
[06:35:36] *** Joins: zachel (~zachel@user/zachel)
[06:35:38] <SamuelMarks> yep I think vcpkg did that
[06:41:27] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[06:51:53] *** Joins: superboot (~agentgasm@user/superboot)
[06:52:26] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:58:56] *** Joins: SaltHilStroller_ (~SaltHillS@searspoint.nvidia.com)
[06:58:56] *** Joins: SaltHillStroller (~SaltHillS@searspoint.nvidia.com)
[07:00:02] *** Quits: zuplex (~zuplex@202.51.76.74) (Remote host closed the connection)
[07:04:01] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[07:04:16] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[07:04:41] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:06:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[07:06:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:07:14] *** Quits: AmR (~AmREiSa@156.199.67.136) (Quit: Konversation terminated!)
[07:07:23] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:08:02] *** Joins: Charadon (~Charadon@155.138.164.183)
[07:08:50] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[07:10:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:11:18] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[07:11:42] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:12:39] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[07:13:05] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:15:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:16:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:16:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:16:48] *** Joins: wroathe (~wroathe@user/wroathe)
[07:18:12] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[07:19:16] *** Quits: SamuelMa1ks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[07:19:29] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[07:22:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[07:22:43] *** Quits: niko3 (~mmk@198-200-74-246.cpe.distributel.net) (Quit: Leaving)
[07:23:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:06] *** Joins: evanextreme (~evan@2604:4080:1000:8150:c4dd:92db:20cd:4512)
[07:41:05] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:41:58] *** Quits: oxfuxxx (~oxfuxxx@195.47.194.46) (Ping timeout: 272 seconds)
[07:44:57] *** Quits: evanextreme (~evan@2604:4080:1000:8150:c4dd:92db:20cd:4512) (Ping timeout: 240 seconds)
[07:47:32] *** Joins: oxfuxxx (~oxfuxxx@195.47.194.46)
[07:48:09] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Quit: leaving)
[07:55:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:58:38] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:58:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:00:46] *** Joins: evanextreme (~evan@2604:4080:1000:8150:c4dd:92db:20cd:4512)
[08:01:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[08:01:48] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[08:04:30] *** Joins: zapwai (~zapwai@2600:8805:8002:ed00:346a:d6e3:bd63:1a16)
[08:05:59] *** Quits: superboot (~agentgasm@user/superboot) (Remote host closed the connection)
[08:07:57] *** Quits: evanextreme (~evan@2604:4080:1000:8150:c4dd:92db:20cd:4512) (Ping timeout: 240 seconds)
[08:08:23] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:10:59] *** Joins: MsPoop (~MsPoop@S01069050ca4e3573.cg.shawcable.net)
[08:19:23] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:20:27] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[08:24:09] *** Quits: SaltHilStroller_ (~SaltHillS@searspoint.nvidia.com) (Ping timeout: 256 seconds)
[08:24:09] *** Quits: SaltHillStroller (~SaltHillS@searspoint.nvidia.com) (Ping timeout: 256 seconds)
[08:24:52] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[08:25:15] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[08:25:17] *** Quits: kurahaupo (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[08:25:24] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 240 seconds)
[08:26:59] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 256 seconds)
[08:28:37] *** Quits: nathanael (~nathanael@user/nathanael) (Ping timeout: 240 seconds)
[08:29:03] *** Joins: nathanael (~nathanael@user/nathanael)
[08:30:20] *** Quits: sonde (~sonde@user/sonde) ()
[08:31:03] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:34:10] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[08:37:27] *** Joins: dansan (~daniel@75.81.148.51)
[08:38:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:38:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:38:46] *** Joins: wroathe (~wroathe@user/wroathe)
[08:40:02] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:41:08] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:41:27] *** Quits: riposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net) (Quit: Quitting)
[08:43:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:44:10] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[08:44:27] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[08:46:10] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:47:53] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:58:59] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1da8:8bb8:7aff:3b18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:59:05] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[09:00:52] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[09:02:24] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[09:02:34] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:2db7:686:885a:81b9)
[09:02:44] <Grell> I'm brainstorming for ideas on what to code next
[09:03:10] <Grell> I want to do something challenging, but not too hard
[09:04:07] <pnbeast> How about a job scheduler that's optimal in all circumstances?
[09:04:41] <Grell> dunno man, i think that's above my level
[09:05:01] <pnbeast> If you're not willing to stretch a little, how will you learn?
[09:05:02] *** Joins: maybeanick (~maybeanic@c-71-236-47-182.hsd1.tn.comcast.net)
[09:05:08] <maybeanick> hey
[09:05:19] <maybeanick> so I have a function that occasionally returns a null pointer
[09:05:28] <maybeanick> and I have it wrapped in a while statement like so:
[09:05:46] *** Joins: analognoise (~analognoi@91.196.220.77)
[09:05:47] <maybeanick> while(output = function()) { /* your code here */ }
[09:06:08] <maybeanick> but even though the function returns null, execution falls through the conditional test
[09:06:15] <maybeanick> (which results in a segfault)
[09:07:06] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[09:07:13] <maybeanick> I also tried varients of while((output = function()) != NULL) and while((output = function()) != 0), to no avail
[09:07:32] <maybeanick> I also included a conditional inside the while statement which tests for the same things to no avail
[09:07:55] <maybeanick> does anyone have any pointers on why this is a thing
[09:08:41] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[09:10:42] *** Joins: Darkcoal (~user@user/Darkcoal)
[09:12:45] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:16:36] *** Joins: Dotz0cat (~Dotz0cat@98.19.231.212)
[09:19:05] <mcf> are you sure the function is returning null? is the code available somewhere to look at?
[09:19:18] <maybeanick> mcf: yes, let me upload it real quick
[09:20:25] <maybeanick> https://ttm.sh/izm.c
[09:20:51] <maybeanick> the function in question that is returning null is readLine, and that's getting fed into the while(...) statement
[09:21:02] <maybeanick> (which is in rgbtoint)
[09:21:24] *** Quits: zer0x (~zer0x@42.118.38.224) (Ping timeout: 240 seconds)
[09:24:11] <mcf> you have a `printf("%s\n", line);` after the loop, that's what segfaults when the loop exits
[09:24:17] *** Joins: Dotz0cat_ (~Dotz0cat@h246.117.90.75.dynamic.ip.windstream.net)
[09:24:34] *** Quits: Dotz0cat (~Dotz0cat@98.19.231.212) (Ping timeout: 272 seconds)
[09:24:54] <maybeanick> great, now I got a different problem
[09:24:56] <maybeanick> thanks mcf
[09:25:13] *** Dotz0cat_ is now known as Dotz0cat
[09:27:16] <mcf> interestingly, the segfault is because gcc translates printf("%s\n", line) to puts(line). some printf implementations will handle %s and print "(null)" (but you can't rely on this)
[09:27:37] <maybeanick> yeah, i had experienced that behaviour on x86
[09:27:41] <maybeanick> i'm programming on arm now, lol
[09:28:14] *** Quits: lllh (~llh@198.48.244.21) (Quit: :::: ( UPP ) ::::)
[09:28:22] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 272 seconds)
[09:28:25] <mcf> if you do printf("line=%s\n", line) i suspect it will print "line=(null)". or, if you build with gcc -fno-builtin-printf, it probably won't crash either
[09:28:56] <maybeanick> hmm
[09:29:01] <maybeanick> that's confusing behaviour
[09:29:38] <mcf> it's all undefined behavior
[09:29:55] *** Joins: llh (~llh@user/llh)
[09:30:14] <mcf> you need to do your own null check if you have a string that might be a null pointer
[09:31:00] <maybeanick> mh
[09:31:58] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[09:32:57] *** Joins: mahmutov (~mahmutov@37.155.70.125)
[09:36:52] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[09:40:50] *** Joins: llh (~llh@user/llh)
[09:44:34] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:2db7:686:885a:81b9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:46:17] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:50:03] *** Joins: goodfella (~archer@user/tessio)
[09:50:08] <goodfella> good morning
[09:52:58] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:53:42] *** Quits: maybeanick (~maybeanic@c-71-236-47-182.hsd1.tn.comcast.net) (Ping timeout: 272 seconds)
[10:01:52] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:06:17] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[10:07:02] *** Joins: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se)
[10:18:05] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[10:18:05] *** Quits: alch (~alch@151.82.7.24) (Read error: Connection reset by peer)
[10:18:32] *** Joins: AlbertoGP (~AlbertoGP@p57a9ade3.dip0.t-ipconnect.de)
[10:19:34] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[10:22:03] *** Joins: alch (~alch@151.82.78.13)
[10:22:23] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:25:23] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[10:33:37] *** Quits: llh (~llh@user/llh) (Ping timeout: 272 seconds)
[10:35:44] *** Joins: suss (~user@user/suss)
[10:35:44] *** Quits: suss (~user@user/suss) (Client Quit)
[10:36:49] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:42:51] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[10:53:47] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[11:04:40] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:08:42] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[11:09:40] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[11:11:35] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[11:14:52] *** Quits: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se) (Remote host closed the connection)
[11:15:16] *** Joins: oakyy (~oaky@h-155-4-161-203.a518.priv.bahnhof.se)
[11:17:47] *** Joins: frost (~frost@user/frost)
[11:19:00] *** Joins: zer0x (~zer0x@42.118.38.224)
[11:28:44] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[11:29:07] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:30:29] *** Joins: aradesh (~aradesh@user/aradesh)
[11:30:56] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:31:55] *** Joins: fbiagent__ (~fbiagent@user/fbiagent)
[11:32:30] *** Quits: raym (~raym@user/raym) (Ping timeout: 272 seconds)
[11:34:09] *** Quits: Grell (~john@ool-4579c605.dyn.optonline.net) (Remote host closed the connection)
[11:34:16] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Ping timeout: 256 seconds)
[11:35:24] *** Quits: mahmutov (~mahmutov@37.155.70.125) (Ping timeout: 256 seconds)
[11:36:23] *** Joins: Grell (~john@ool-4579c605.dyn.optonline.net)
[11:37:59] *** Joins: raym (~raym@user/raym)
[11:40:42] <tusko> Is there a c fucntion that allows me to set permissions on a device I created in /dev chmod doesn't seem to work in a kernel module
[11:40:49] <tusko> it cant find sys/stat.h
[11:40:55] *** Quits: zapwai (~zapwai@2600:8805:8002:ed00:346a:d6e3:bd63:1a16) (Quit: Slackin')
[11:41:37] <Wulf> tusko: how was the device created?
[11:41:40] *** Joins: kts (~kts@103.73.237.210)
[11:41:49] <sham1> You'd need to look for some equivalent of chmod but for a kernel module
[11:42:05] <sham1> You can't use sys/stat.h because that's a userland thing
[11:43:27] <tusko> Wulf, www.termbin.com/vcbz
[11:43:41] *** Parts: riv (river@tilde.team/user/river) (WeeChat 3.4)
[11:44:50] <Wulf> tusko: and that chmod doesn't work, right?
[11:45:05] <tusko> that's right, chmod doesn't work in kernel space
[11:45:13] <tusko> can't get sys/stat.h
[11:45:33] <Wulf> tusko: is the device file created by the kernel, or by userspace, e.g. udev?
[11:45:56] <Maxdamantus> tusko: do you mean something that you created as part of devtmpfs? Presumably the permissions would be set when creating it.
[11:46:01] <tusko> I created it in a kernel module
[11:48:12] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Quit: Leaving)
[11:49:34] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[11:49:51] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[11:50:19] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[11:50:33] *** Joins: Sadale (~Sadale@user/sadale)
[11:53:59] *** Quits: Sadale (~Sadale@user/sadale) (Client Quit)
[12:00:19] *** Quits: analognoise (~analognoi@91.196.220.77) (Read error: Connection reset by peer)
[12:01:19] <Wulf> tusko: https://stackoverflow.com/questions/23424884/linux-kernel-setting-the-permissions-for-a-dev-file-that-was-created-via-crea
[12:04:38] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:09:39] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:13:18] *** Joins: learner1234 (~learner12@45.64.227.250)
[12:14:49] <learner1234> I once found out there was a man page for the c language (not specific library, but the language), I can't figure out what it's name is now. Does any body know the man page for C?
[12:16:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:16:31] <caze> There isn't one.
[12:16:34] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:2df9:a9b:b95f:6056)
[12:18:00] <learner1234> I am sure I opened it once, it had the basics of c, explaining what variables etc are
[12:18:13] *** Joins: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[12:18:19] <ChoHag> Are you sure it wasn't a book?
[12:18:20] <learner1234> just can't seem to figure out what it was named
[12:18:47] <learner1234> nope, it was a man page, someone in this channel suggested me to read something like `man <name>`
[12:19:40] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[12:22:47] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[12:25:08] *** Joins: mrig (~mrig@user/mrig)
[12:26:17] *** Joins: cosimone (~user@93-34-133-75.ip49.fastwebnet.it)
[12:26:49] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[12:27:48] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:27:50] <NRK> i think linux has some stuff, `man 7 operator` for example
[12:28:16] *** Joins: tejr (~tejr@user/tejr)
[12:31:06] *** Joins: Tempesta (~Tempesta@user/tempesta)
[12:31:07] <goodfella> learner1234: it's not a man page
[12:31:09] <goodfella> it's info mapge
[12:31:20] <goodfella> page
[12:31:33] <goodfella> info printf for example
[12:31:42] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:31:59] *** Quits: MsPoop (~MsPoop@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[12:32:33] <goodfella> or better ... info libc
[12:33:14] *** Joins: tejr (~tejr@user/tejr)
[12:33:28] <goodfella> but there are some man pages for some .h files ...
[12:35:07] <dave0> the general consensus here in #c is that it's best to learn c from a book
[12:35:32] <dave0> you wont find eg.   info gcc    teaching you how to write c code
[12:36:31] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:37:48] *** Quits: goodfella (~archer@user/tessio) (Ping timeout: 240 seconds)
[12:43:07] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[12:43:45] *** Joins: meator (~meator@user/meator)
[12:44:56] *** Joins: goodfella (~archer@user/tessio)
[12:48:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[12:49:16] *** Quits: learner1234 (~learner12@45.64.227.250) (Quit: Client closed)
[12:50:30] *** Joins: wroathe (~wroathe@user/wroathe)
[12:52:29] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:55:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:58:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:58:39] *** Quits: oakyy (~oaky@h-155-4-161-203.a518.priv.bahnhof.se) (Quit: Leaving)
[13:06:38] *** Joins: oscurochu (~oscurochu@2603:9000:c202:1034:5991:474:8074:a98a)
[13:08:17] *** Joins: soul-d (~uknown@user/soul-d)
[13:09:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:09:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935)
[13:11:18] *** Quits: oxfuxxx (~oxfuxxx@195.47.194.46) (Ping timeout: 272 seconds)
[13:14:35] *** Joins: badsektor (~badsektor@user/badsektor)
[13:14:56] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[13:16:17] <badsektor> guys can i get some comments on this small program that i wrote for this problem here: https://www.codeabbey.com/index/task_view/playfair-cipher-cracking
[13:16:27] <badsektor> and my program is here: https://ideone.com/scKCCc
[13:17:04] <Wulf> badsektor: please don't declare variables at the top of the function, but on first use.
[13:17:17] <badsektor> the "dict" textfile has about thirty 5-letter words
[13:17:40] <badsektor> Wulf, got it
[13:18:08] <NRK> Wulf: that's a style thing
[13:18:18] <Wulf> NRK: exactly.
[13:18:21] *** Joins: DavidMilestone (~DavidMile@182.68.216.223)
[13:18:25] <dave0> badsektor: i think you can use strstr in place of search_for_word
[13:18:29] <NRK> linux kernel and many other projects still declare variables on top
[13:19:01] <NRK> and i personally like that as well, instead of seeing random declaration in the middle
[13:19:28] <badsektor> dave0, thanks, i didnt know that
[13:19:36] *** Quits: goodfella (~archer@user/tessio) (Remote host closed the connection)
[13:20:45] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[13:21:12] <NRK> badsektor: you should check for fopen failure. and `key` and `sneed` should be declared `static`
[13:22:34] <badsektor> with some cleanup and codebeautify.org formatting: https://ideone.com/HZhzBZ
[13:22:41] <NRK> also don't use empty parameter, they're depricated and generally a bad thing to do. use (void)
[13:22:47] <Wulf> NRK: https://ideone.com/eMJh1u
[13:22:53] <Wulf> badsektor: ^
[13:23:20] <badsektor> how about the algorithm? this is going to run and take a while, there are like 60million possible keys to check for
[13:23:29] <NRK> Wulf: I would use fwrite instead.
[13:23:49] <badsektor> Wulf, oh nice!
[13:24:13] <badsektor> NRK, right, i will fix it
[13:24:18] <Wulf> NRK: sure, but printf is shorter
[13:24:48] <NRK> and slower
[13:25:17] *** Quits: oscurochu (~oscurochu@2603:9000:c202:1034:5991:474:8074:a98a) (Ping timeout: 240 seconds)
[13:26:42] <badsektor> would you go at it differently?
[13:28:33] <badsektor> this is the dictionary i am using: https://ideone.com/ZAZgaM
[13:29:04] <badsektor> codeabbey.com says only 2 people solved this question so far
[13:29:07] <badsektor> https://www.codeabbey.com/index/task_view/playfair-cipher-cracking
[13:29:24] <badsektor> do you think if i ran my program for a few hours, it would work?
[13:30:53] *** Joins: goodfella (~archer@user/tessio)
[13:32:58] <badsektor> https://ideone.com/HZhzBZ
[13:33:09] <badsektor> more readable
[13:36:53] <badsektor> it doesn't rewind() each time... theres a stupid mistake
[13:37:07] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[13:37:11] <Dean> hello
[13:38:17] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[13:38:46] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Read error: Connection reset by peer)
[13:41:14] *** Joins: tejr (~tejr@user/tejr)
[13:42:53] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:48:24] *** Joins: seninha (~chatzilla@user/seninha)
[13:54:59] *** Joins: luckyxxl (~luckyxxl@185.209.196.132)
[13:55:32] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:05:09] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5)
[14:06:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:06:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:06:21] *** Joins: wroathe (~wroathe@user/wroathe)
[14:07:26] *** Joins: plastico (~plastico@neomutt/plastico)
[14:07:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:09:42] <badsektor> this time it works: https://ideone.com/QSJU6g
[14:10:51] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:11:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[14:13:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[14:18:39] *** Joins: phrix (~phrix@185.76.176.45)
[14:19:14] *** Quits: alch (~alch@151.82.78.13) (Read error: Connection reset by peer)
[14:19:34] *** Joins: AmR (~AmREiSa@156.199.67.136)
[14:22:24] *** Joins: alch (~alch@mi-18-46-226.service.infuturo.it)
[14:23:25] <Xeroine> should I be passing variables using addresses all the time since it's faster and just adding const if I don't need to change it?
[14:23:48] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[14:23:56] *** Joins: magla (~gelignite@55d46ecf.access.ecotel.net)
[14:24:13] <dave0> Xeroine: nah
[14:24:36] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[14:26:27] *** Joins: Thomas-GL (~ts@p5de2bd77.dip0.t-ipconnect.de)
[14:27:31] <NRK> Xeroine: passing by pointer has aliasing implications. so it can be potentially slower.
[14:27:36] *** Joins: sebag (~guest@91.245.82.2)
[14:29:05] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[14:29:41] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[14:29:44] *** Joins: basedovertime (~basedbase@102.156.154.226)
[14:29:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:852c:c89f:7cdd:a935) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:31:42] <Xeroine> the book C programming modern aproach says that it's faster tho and consumes less memory
[14:32:12] *** Joins: Burgundy (~NA@86.121.143.206)
[14:32:15] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:32:50] <dave0> Xeroine: is it referring specifically to struct's?
[14:33:30] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[14:33:32] <dave0> variables are passed by value which implies a copy
[14:33:37] <Xeroine> I haven't even gotten to structs in that book yet
[14:33:48] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:34:11] <Xeroine> structs are much later, I'm at chapter 11.4 pointers as arguments
[14:34:28] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:49] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:52] <Xeroine> dave0: but if I'm passing an address it doesn't make a copy?
[14:35:05] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:35:13] <dave0> Xeroine: it makes a copy of the address (as a number)
[14:35:22] <Xeroine> oh
[14:35:40] <NRK> Xeroine: it's more complicated than that
[14:36:00] <Xeroine> :/
[14:36:11] <dave0> Xeroine: the usual reason to pass an address to a function is if you want that called function to modify the value in the caller
[14:36:35] <NRK> for example `fun(int *a, int *b)` these both can alias, so the compiler may not be able to generate efficient code compared to `fun(int a, int b)`
[14:37:17] <Xeroine> dave0: yeah I knew that
[14:37:34] <Xeroine> I didn't know about aliases tho
[14:38:01] <dave0> alias is when two different variables point to the same object
[14:38:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[14:38:22] <dave0> it's only special in the sense that the compiler cant figure out that by itself
[14:38:35] <Xeroine> oh
[14:38:39] *** Joins: Klinda (~superleag@user/klinda)
[14:40:35] <basedovertime> So instead of passing the actual value itself you just pass where the variable is at in memory and that's supposed to be faster? Won't it take extra time to fetch the value first and then make a copy of it?
[14:40:58] <basedovertime> Nevermind it doesn't need to make a copy of it
[14:42:46] *** Joins: peki (~peki@91.191.14.22)
[14:45:36] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[14:47:17] *** Joins: snortie (~snortie@2a02:8308:386:b900:f881:7773:c6f5:7fb8)
[14:48:34] *** Quits: bug2000 (~bug@user/bug) (Remote host closed the connection)
[14:52:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:53:21] *** Joins: bladerunner1 (~bladerunn@42.106.214.151)
[14:53:29] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:53:34] <bladerunner1> What's the -o flag in GCC compiler for?
[14:54:22] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[14:54:40] <dave0> sets the output filename
[14:54:48] <NRK> $ man gcc
[14:55:35] <bladerunner1> Books can't just explain in simple words, can they. Anyway, thanks
[14:56:31] <NRK> give a man a fish, he will have food for a day...
[14:57:41] <NRK> https://youtube.com/watch?v=ncRi8bZL1q4
[14:58:19] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[15:00:58] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a131:11ab:1111:d3c5) (Quit: Quit)
[15:04:53] *** Quits: DavidMilestone (~DavidMile@182.68.216.223) (Quit: Client closed)
[15:05:57] *** Quits: Gry (~quassel@botters/gry) (Ping timeout: 272 seconds)
[15:06:54] <bladerunner1> Give me a fish and I'll have a pet
[15:07:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:07:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:07:53] *** Joins: wroathe (~wroathe@user/wroathe)
[15:11:09] <peki> bladerunner1: Amazing thinking xD
[15:13:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:14:05] *** Joins: strajder (~strajder@user/strajder)
[15:14:58] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[15:15:25] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[15:18:09] *** Joins: frost (~frost@user/frost)
[15:18:22] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:24:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:27:21] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[15:30:09] *** Quits: Thomas-GL (~ts@p5de2bd77.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:24] *** Joins: Thomas-GL (~ts@p5de2bd77.dip0.t-ipconnect.de)
[15:30:38] *** Joins: andai (~andai@86.32.53.180)
[15:30:56] *** Joins: zuplex (~zuplex@202.51.76.205)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:31:09] *** Quits: zuplex (~zuplex@202.51.76.205) (Remote host closed the connection)
[15:31:29] *** Joins: useretail (~useretail@185.132.19.151)
[15:31:34] *** Joins: zuplex (~zuplex@202.51.76.205)
[15:32:08] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (Remote host closed the connection)
[15:32:54] *** Quits: luckyxxl (~luckyxxl@185.209.196.132) (Quit: bye)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:38:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:38:41] *** Joins: wroathe (~wroathe@user/wroathe)
[15:39:10] *** Quits: Zenton (~user@user/zenton) (Remote host closed the connection)
[15:39:11] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:39:48] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[15:40:11] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[15:40:29] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[15:40:29] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[15:42:22] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:43:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[15:44:13] *** Quits: LuKaRo (~LuKaRo@p200300dfa72f4b9400000000000001f9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:47:36] *** Joins: LuKaRo_ (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de)
[15:48:29] *** Quits: reset (~reset@user/reset) (Quit: reset)
[15:48:48] *** Joins: Zenton (~user@user/zenton)
[15:49:31] *** Joins: victor_ (~victor@103.203.72.8)
[15:55:17] *** Joins: kubrickdave (~kubrickda@80-121-14-131.adsl.highway.telekom.at)
[15:55:37] *** Quits: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at) (Ping timeout: 240 seconds)
[15:56:11] *** Joins: mahmutov (~mahmutov@37.155.70.125)
[15:58:59] *** Joins: kubrickdave_ (~kubrickda@80-121-15-46.adsl.highway.telekom.at)
[15:59:24] *** Quits: kubrickdave (~kubrickda@80-121-14-131.adsl.highway.telekom.at) (Ping timeout: 240 seconds)
[16:05:53] <goodfella> hi dave :)
[16:05:54] <goodfella> dave0
[16:06:20] <dave0> maw goodfella
[16:15:40] *** Joins: vysn (~vysn@user/vysn)
[16:18:06] *** Joins: msk (~Thunderbi@89.205.124.40)
[16:18:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:19:35] *** Quits: andai (~andai@86.32.53.180) (Quit: Client closed)
[16:20:05] *** Joins: NovumDXW (~NovumDXW@2409:8a28:361c:d160:d937:b3a9:e400:c5db)
[16:21:57] *** Quits: bladerunner1 (~bladerunn@42.106.214.151) (Quit: WeeChat 3.4)
[16:22:11] *** Quits: basedovertime (~basedbase@102.156.154.226) (Quit: Leaving)
[16:24:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:27:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[16:30:13] *** Joins: terminalpusher (~terminalp@2a01:586:97ba:1:1761:3b61:af48:44c7)
[16:32:52] *** Joins: angelacrust (~angelacru@182.68.216.223)
[16:38:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:42:05] *** Joins: nmi (~deflected@user/deflected)
[16:43:43] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[16:43:50] *** Quits: unlink2 (~unlink@p200300ebcf12830011a7c6fae7585651.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:43:57] *** Quits: deflected (~deflected@user/deflected) (Ping timeout: 240 seconds)
[16:45:18] *** Joins: nuxil (~nuxil@141.195.51.213)
[16:47:55] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[16:50:08] *** Quits: NovumDXW (~NovumDXW@2409:8a28:361c:d160:d937:b3a9:e400:c5db) (Quit: Leaving)
[16:51:58] *** Quits: angelacrust (~angelacru@182.68.216.223) (Quit: Client closed)
[16:59:51] *** Joins: pulse (~pulse@user/pulse)
[17:01:09] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:04:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:07:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:08:26] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:09:33] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[17:10:35] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:10:43] *** Quits: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 272 seconds)
[17:12:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:13:24] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:409c:deea:cba7:6b6d)
[17:13:24] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:409c:deea:cba7:6b6d) (Changing host)
[17:13:24] *** Joins: skapata (~Skapata@user/skapata)
[17:13:55] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[17:15:02] *** Quits: zuplex (~zuplex@202.51.76.205) (Remote host closed the connection)
[17:16:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[17:16:40] *** Joins: Sadale (~Sadale@user/sadale)
[17:17:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:17:57] *** Quits: mahmutov (~mahmutov@37.155.70.125) (Ping timeout: 256 seconds)
[17:18:03] *** Joins: mahmutov_ (~mahmutov@37.155.52.7)
[17:20:03] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[17:23:15] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:26:33] *** Joins: otty (~otty@27.97.169.58)
[17:26:55] *** Quits: kts (~kts@103.73.237.210) (Quit: Konversation terminated!)
[17:27:07] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:38:20] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-6.cspire.com)
[17:39:39] *** Joins: ifreund (2940d10f8b@user/ifreund)
[17:40:33] <ifreund> Anyone have any information on how/if flexible array members affect struct alignment?
[17:41:05] <ifreund> e.g. if I have a struct { uint8_t a; uint64_t b[]; }; what is the alignment of my struct? 1 or 8?
[17:41:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[17:44:34] *** Quits: terminalpusher (~terminalp@2a01:586:97ba:1:1761:3b61:af48:44c7) (Remote host closed the connection)
[17:44:52] *** Joins: terminalpusher (~terminalp@2a01:586:97ba:1:1719:2f8:8143:5688)
[17:46:32] *** Joins: Rounin (~david@84.212.130.215)
[17:46:52] *** Quits: terminalpusher (~terminalp@2a01:586:97ba:1:1719:2f8:8143:5688) (Remote host closed the connection)
[17:48:27] *** Joins: wroathe (~wroathe@user/wroathe)
[17:49:17] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:108a:7490:94e9:7e0d) (Remote host closed the connection)
[17:52:48] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[17:55:36] <fizzie> ,cc printf("%zu", alignof (struct { uint8_t a; uint64_t b[]; }));
[17:55:38] <candide> fizzie: 8
[17:55:47] *** Joins: hegz (~hegz@41.236.160.131)
[17:55:54] <fizzie> Kind of has to be, in order to satisfy the alignment requirement of `uint64_t`.
[17:56:00] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:56:39] *** Joins: oxfuxxx (~oxfuxxx@217.138.213.29)
[17:56:59] <fizzie> ,cc struct s { uint8_t a; uint64_t b[]; }; printf("%zu, %zu", sizeof (struct s), alignof (struct s)); // size as well, of course
[17:57:01] <candide> fizzie: 8, 8
[17:57:55] *** Quits: oxfuxxx (~oxfuxxx@217.138.213.29) (Read error: Connection reset by peer)
[17:58:15] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[17:59:55] *** Joins: doorzan (~doorzan@2800:200:f540:73::c)
[18:00:17] *** Quits: doorzan (~doorzan@2800:200:f540:73::c) (Changing host)
[18:00:17] *** Joins: doorzan (~doorzan@user/doorzan)
[18:03:42] *** Quits: doorzan (~doorzan@user/doorzan) (Client Quit)
[18:03:58] <ifreund> thanks, I probably should have just tried it instead of trying to find info in the spec
[18:05:05] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[18:07:21] *** Joins: meator (~meator@user/meator)
[18:07:27] <pragma-> ,tias
[18:07:27] <candide> "Try It And See" may work in other languages, but not in C due to the nature of undefined behavior/unportable code. Such coding-by-experimentation often leads to situations such as "But it worked fine earlier!" and/or "But it worked on my machine!". https://ramblings.implicit.net/c/2014/04/20/c-is-not-a-try-it-and-see-language.html
[18:07:35] *** Joins: oxfuxxx (~oxfuxxx@217.138.213.28)
[18:07:57] <pragma-> no, you definitely should try to find the info in the spec.
[18:08:12] *** Quits: victor_ (~victor@103.203.72.8) (Remote host closed the connection)
[18:08:32] <NRK> ^
[18:09:48] * esselfe tries pragma- and sees
[18:10:04] * pragma- throws an exception
[18:10:20] <sham1> An exception‽
[18:10:26] <esselfe> yeah that's c++
[18:12:39] <sham1> Although IIRC if one compiles C with gcc or clang, one should be able to throw a C++ exception across C stack frames, although that's a famous case of "don't"
[18:13:11] <sham1> That's because C programs would still contain .eh_frames
[18:20:36] *** Quits: alch (~alch@mi-18-46-226.service.infuturo.it) (Ping timeout: 240 seconds)
[18:21:30] <fizzie> Well, you can't find "1 or 8" in the spec. But while it may not explicitly say it, I imagine you can deduce at least that the alignment of the struct will be sufficient to satisfy the alignment of the FAM, otherwise it'd be a pretty useless feature.
[18:22:47] *** Joins: alch (~alch@151.68.43.246)
[18:22:53] <sham1> Yeah, if the alignment of struct { uint8_t a; uint64_t b[]; } was 1, that'd potentially make b unaligned so the alignment must be 8, and you would need the padding as well
[18:23:12] <sham1> It'd lead to weird undefined behaviour otherwise
[18:24:47] *** Joins: Torr (~Torr@user/torr)
[18:25:54] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[18:28:56] *** Joins: skapata (~Skapata@user/skapata)
[18:31:30] *** Joins: SrainUser (~vikn@83-233-104-30.cust.bredband2.com)
[18:32:54] *** Quits: peki (~peki@91.191.14.22) (Quit: Leaving)
[18:38:11] *** Quits: SrainUser (~vikn@83-233-104-30.cust.bredband2.com) (Remote host closed the connection)
[18:38:59] *** Joins: vikn (~vikn@83-233-104-30.cust.bredband2.com)
[18:40:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:41:32] *** Quits: oxfuxxx (~oxfuxxx@217.138.213.28) (Ping timeout: 256 seconds)
[18:42:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:43:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[18:44:39] *** Joins: phrix (~phrix@185.76.176.45)
[18:45:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:47:03] <Beastie> sham1: the aligment of the struct is the maximum alignmen requirement of all the fields it has... so probably it cannot be 1 having a unit64_t field.
[18:48:10] <Beastie> probably the alignment will be 4 or 8 bytes (depending on the size of the external data bus)
[18:50:37] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[18:50:53] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[18:52:40] *** Quits: zer0x (~zer0x@42.118.38.224) (Ping timeout: 272 seconds)
[18:53:39] <useretail> what's the use of symbol table? should i strip it?
[18:55:01] <sham1> Beastie: I know
[18:56:53] *** Joins: kts (~kts@103.73.237.237)
[18:57:33] <Beastie> sham1: that means that the final padding will be to force that alignment
[18:58:46] <Beastie> i've discovered recently that they have included an _Alignof operator in one of the last revisions of the standard... I'd like to know how it is used.
[18:59:15] <Beastie> what does it produce when you apply it to an expression.
[18:59:37] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[19:00:14] <vikn> Hi all, I'd love to learn about modern C (C2x etc.) I heard that the No Starch Press book was good. Does anybody have any other recommendations?
[19:00:26] *** Joins: teepee (~teepee@openscad/teepee)
[19:01:05] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[19:01:39] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[19:01:47] <fizzie> Beastie: You can't apply it to an expression, you can only apply it to a type name.
[19:02:54] <Beastie> aham.... so it doesn't work like sizeof
[19:03:08] <fizzie> There's a few bugs in the N1570 draft that still imply you could (that got fixed in the final version), but it gets the syntax part right.
[19:03:12] <fizzie> ,c11 6.5.3p1
[19:03:13] <candide> http://www.iso-9899.info/n1570.html#6.5.3p1 [Unary operators] unary-expression: postfix-expression ++ unary-expression -- unary-expression unary-operator cast-expression sizeof unary-expression sizeof ( type-name ) _Alignof ( type-name ) unary-operator: one of & * + - ~ !
[19:03:15] <Beastie> what kind of value does it return?
[19:03:21] <sham1> It returns a size_t
[19:03:43] <fizzie> Modulo the usual grumble about operators not "returning" anything.
[19:03:55] <Beastie> but it works like sizeof... so it should accept an expression as sizeof does.
[19:04:19] <fizzie> Well, it doesn't.
[19:04:40] <Beastie> you can use sizeof variable_name, and it returns the size of the type of variable name, or sizeof 3;, which gives you the sizeof an int.
[19:04:47] <sham1> ,cc -std=c2x struct { _Alignas(16) float data[4]; } x = {0}; printf("%zu", _Alignof(typeof(f)); // Although
[19:04:48] <candide> sham1: warning: implicit declaration of function 'typeof' [-Wimplicit-function-declaration]  error: 'f' undeclared    error: expected ')' before ';' token  error: expected ';' before '}' token
[19:04:57] <sham1> ,cc -std=c2x struct { _Alignas(16) float data[4]; } x = {0}; printf("%zu", _Alignof(__typeof__(f)); // Although
[19:04:58] <candide> sham1: error: 'f' undeclared    error: expected ')' before ';' token  error: expected ';' before '}' token
[19:05:03] <sham1> ,cc -std=c2x struct { _Alignas(16) float data[4]; } x = {0}; printf("%zu", _Alignof(__typeof__(x)); // Although
[19:05:05] <candide> sham1: error: expected ')' before ';' token  error: expected ';' before '}' token
[19:05:08] <sham1> Really?
[19:05:12] <pragma-> ,cc paste
[19:05:14] <candide> pragma-: https://0x0.st/o8hd.txt
[19:05:18] <sham1> ,cc -std=c2x struct { _Alignas(16) float data[4]; } x = {0}; printf("%zu", _Alignof(__typeof__(x))); // Fourth time's the charm
[19:05:20] <candide> sham1: 16
[19:05:22] <sham1> Yeah, I was missing a brace
[19:06:18] <sham1> ,cc -std=c2x struct vec4 { _Alignas(16) float data[4]; }; _Alignas(32) struct vec4 x = {0}; printf("%zu", _Alignof(__typeof__(x))); // Can't do this however
[19:06:19] <candide> sham1: 16
[19:06:43] <sham1> And the latter is probably why one can't use _Alignof with an expression
[19:06:55] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[19:07:12] <fizzie> The bit I quoted (6.5.3p1) is the syntax of the unary operators, and it goes /unary-expression/ ::= ... | `sizeof` /unary-expression/ | `sizeof` `(` /type-name/ `)` | `_Alignof` `(` /type-name/ `)` -- notably missing _Alignof with an expression.
[19:07:27] <sham1> Although I don't see why not, the compiler needs to know all these properties about the expression, including its type and alignment
[19:07:32] <pragma-> that second error message is weird
[19:07:41] <pragma-> expected ';' after ';', what?
[19:08:07] <sham1> ;;;;;
[19:08:45] * pragma- grabs a screenshot https://i.imgur.com/TXV7MIJ.png
[19:08:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:09:24] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[19:09:46] *** Quits: X-Scale (~ARM@46.50.5.75) (Ping timeout: 272 seconds)
[19:09:48] *** X-Scale` is now known as X-Scale
[19:10:39] <pragma-> I can't get over this error message.
[19:10:42] <sham1> ,cc -std=gnu2x struct vec4 { _Alignas(16) float data[4]; }; _Alignas(32) struct vec4 x = {0}; printf("%zu", _Alignof(x)); // GCC however can use an expression for _Alignof, so I don't know why the standard can't
[19:10:42] <pragma-> Why is this happening
[19:10:43] <candide> sham1: 32
[19:11:02] <sham1> ,clang -std=gnu2x struct vec4 { _Alignas(16) float data[4]; }; _Alignas(32) struct vec4 x = {0}; printf("%zu", _Alignof(x)); // As can clang, predictably
[19:11:03] <candide> sham1: [warning: '_Alignof' applied to an expression is a GNU extension [-Wgnu-alignof-expression]] 32
[19:11:24] <sham1> It warns me of a GNU-ism even when I have it set to be gnu2x
[19:11:26] <sham1> Odd
[19:11:27] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[19:11:27] *** Joins: Rynn (~rynn@216.30.158.198)
[19:11:32] <pragma-> ,clang -paste -std=c2x struct { _Alignas(16) float data[4]; } x = {0}; printf("%zu", _Alignof(__typeof__(x)); // Although
[19:11:35] <candide> pragma-: https://0x0.st/o8h5.txt
[19:11:49] <pragma-> gcc is so weird.
[19:12:03] <pragma-> I can't get over that semi-colon error message.
[19:12:24] *** Joins: oriba (~oriba@dynamic-077-191-072-113.77.191.pool.telefonica.de)
[19:13:06] <rcf> That is a beautiful error
[19:13:08] <twkm> given the wording it seems okay to me.
[19:13:16] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:14:19] <pragma-> twkm: the second error message in https://0x0.st/o8hd.txt
[19:14:42] <pragma-> `return 0;;` is the suggested fix!
[19:15:09] *** Joins: xlowen (~xlowen@177.220.172.230)
[19:16:12] *** Quits: otty (~otty@27.97.169.58) (Ping timeout: 240 seconds)
[19:16:19] * rcf adds return;; to his personal style guide.
[19:16:48] <omegatron> shouldn't it be   printf("%zu", _Alignof(__typeof__(x)));  // Although    (three closing parentheses)
[19:17:03] <pragma-> omegatron: yes, the clang error message got it right
[19:17:05] <rcf> That is what clang suggested, yes.
[19:17:06] <pragma-> gcc is so weird
[19:17:41] <omegatron> hm, I checked the -E  output and saw the missing parenthesis ..
[19:17:54] <nomagno> ... Does it actually compile it if you fix it like it suggested?
[19:17:56] <omegatron> (with my editors syntax coloring feature)
[19:18:01] <omegatron> yes
[19:18:11] <pragma-> what
[19:18:42] * pragma- scrolls up to find the snippet again
[19:18:59] <pragma-> ,cc -std=c2x struct { _Alignas(16) float data[4]; } x = {0}; printf("%zu", _Alignof(__typeof__(x));; // Although
[19:19:00] <candide> pragma-: error: expected ')' before ';' token  error: expected ';' before '}' token
[19:19:02] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com)
[19:19:16] <pragma-> ,cc -paste -std=c2x struct { _Alignas(16) float data[4]; } x = {0}; printf("%zu", _Alignof(__typeof__(x));; // Although
[19:19:18] <candide> pragma-: https://0x0.st/o8hh.txt
[19:19:29] <pragma-> lol it still has the error message
[19:19:50] <pragma-> it's after the return 0, which isn't explicitly in the ,cc command.
[19:19:52] <sham1> What did we learn? gcc is weird
[19:20:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:21:10] <pragma-> Oh, that makese sense, it thinks it's part of the struct and it wants the struct to be terminated.
[19:21:20] <pragma-> But clang's error is much more clear.
[19:21:24] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[19:21:39] *** Parts: ifreund (2940d10f8b@user/ifreund) (WeeChat 3.4)
[19:21:45] <pragma-> ... I think?
[19:22:05] <sham1> clang's error messages being clearer than gcc's isn't exactly news
[19:22:36] <rcf> It's still mildly amusing.
[19:23:10] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d50:ed7b:88e6:c382)
[19:24:01] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:24:33] <pragma-> Actually I have no idea why gcc is expecting a semi-colon there.
[19:28:36] *** Joins: otty (~otty@2402:8100:390c:4161:3b9c:9fc2:cfb0:550b)
[19:28:40] <goodfella> in which standard function pointer introduced ?
[19:29:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:29:10] <sham1> I'd think they would have been there since forever, but dunno. I'd assume ANSI-C at the latest
[19:29:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:29:19] <sham1> (ANSI-C/C1989)
[19:29:35] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[19:31:19] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[19:31:59] <goodfella> sometimes C can be hard .. in those times i prefer Rusky standard
[19:34:06] *** Joins: noarb- (~noarb@user/noarb)
[19:36:06] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:38:12] *** Quits: snortie (~snortie@2a02:8308:386:b900:f881:7773:c6f5:7fb8) (Ping timeout: 240 seconds)
[19:39:00] <goodfella> sham1 you sure ?
[19:39:13] *** Joins: cadmio (~cadmio@ge-19-111-69.service.infuturo.it)
[19:39:18] <cadmio> Hello
[19:39:36] <sham1> Hello
[19:39:46] <cadmio> do you know how can I set my program opening file with the OS "open with" functionality?
[19:40:02] <goodfella> ok yes it's mentioned there
[19:40:46] <goodfella> is there a way to include stdio.h without getline() ? as i need to use my own
[19:40:49] <sham1> cadmio: depends on the operating system. On free desktop OSes like the various GNU+Linux distros, {Free,Open,Net}BSD and so on you'd use xdg-open or whatever the library equivalent of that would be
[19:40:54] *** Joins: ifreund (2940d10f8b@user/ifreund)
[19:41:32] <cadmio> sham1: on GNU/Linux. I've created a desktop.ini file and I'm using GTK
[19:42:32] <sham1> desktop.ini seems like a Windows concept
[19:42:38] <sham1> For the XDG stuff you use .desktop-files
[19:43:09] <omegatron> goodfella: what's wrong with giving your getline function another designation and use that?
[19:43:46] <goodfella> omegatron: clangd complains about conflicting getline types
[19:43:55] <goodfella> but i might be able to compile and run ill check that
[19:43:58] <sham1> Just give it another name
[19:44:18] <cadmio> sham1: right and I put it in /usr/share/applications/
[19:44:23] <sham1> Because even if you were to somehow get it to compile, you couldn't link it
[19:44:24] <cadmio> but that seems not enough
[19:44:45] <goodfella> sham1: yeah in KnR i kind confused how it's included
[19:45:07] <goodfella> include <stdio.h> and int getline()  prototype is declared
[19:45:23] <goodfella> so i thought im doing somethign wrong
[19:45:34] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[19:45:37] *** Joins: angelacrust (~angelacru@182.68.216.223)
[19:45:40] <sham1> cadmio: Well you'd probably want to put it into ${XDG_DATA_HOME:-$HOME/.local/share}/applications
[19:45:45] *** Quits: baltazar (~baltazar@84-236-101-128.pool.digikabel.hu) (Remote host closed the connection)
[19:45:53] <omegatron> goodfella:  if you want to replace getline at runtime with your custom function, that's another story ..  ( see the source code of cgit for example how it's done )
[19:46:08] *** Joins: noarb (~noarb@user/noarb)
[19:46:23] <cadmio> sham1: so in the user's dir rather than in root?
[19:46:28] <sham1> Yes
[19:46:51] <NRK> goodfella: either rename your function to something else; `my_getline(...)`
[19:47:01] <goodfella> omegatron: in KnR chapter 1 section 9 i can see that stdio.h is included along with a custom getline() an
[19:47:09] <NRK> or use -std=c89 when compiling, it won't auto include posix stuff by default then
[19:47:09] <cadmio> but that's not much the issue because I see the icon and the system let me choose open with my application
[19:47:14] <cadmio> but the program is not launched
[19:47:45] <fizzie> sham1: You *can* link it if you get it to compile: https://0x0.st/o8FX.txt -- the -std=c11 prevents <stdio.h> from bringing in the library's getline definition, so the local one is used.
[19:47:55] <fizzie> But it's probably still better just to use a different name.
[19:48:30] <fizzie> I imagine K&R doesn't because `getline` wasn't all that widespread back then. It only made it to POSIX in the 2008 edition and all.
[19:50:06] <goodfella> ok thanks
[19:50:35] <omegatron> that book is quite old after all - you have to expect that some things have changed in the meantime
[19:51:14] <pragma-> I keep forgetting about getline() when I point out everything that's obsolete in the K&R2 book.
[19:51:56] <pragma-> It's more "new" than "obsolete".
[19:52:14] <pragma-> smh glibc just importing the symbol.
[19:52:20] <ifreund> ah, I've found the root of my confusion about the flexible array alignment thing earlier!
[19:52:31] <ifreund> uint64_t has alignment 4 on i386
[19:52:53] <sham1> It's probably just something similar to uint32_t [] internally
[19:53:05] <sham1> Makes sense
[19:53:07] * omegatron talking about old stuff, somehow it's funny, that right now "Magical Mystery Tour" is playing on my computer
[19:53:12] <sham1> uint32_t [2]
[19:53:29] <ifreund> sham1: it's a unsigned long long at least on musl
[19:53:41] <sham1> Well yes, but I'm talking about how it would look inside the compiler
[19:53:43] <ifreund> i don't know how the compiler implements unsigned long long though, you may be right
[19:53:50] <Amun-Ra> ifreund: yes, because of i386 has to emulate 64-bit with 32-bit
[19:54:12] <sham1> unsigned long long could very well be compiled similarly to a 2-array of uint32_t, except with some extra stuff for arithmetic and such
[19:54:15] *** Joins: vysn (~vysn@user/vysn)
[19:54:28] <sham1> Since it's a bignum
[19:54:57] *** Parts: cadmio (~cadmio@ge-19-111-69.service.infuturo.it) (WeeChat 3.0)
[19:56:08] <sham1> "clang: ISO C requires a translation unit to contain at least one declaration" on a file with a function definition
[19:56:12] <sham1> Go home clang, you're drunk
[19:57:17] *** Joins: korg815 (~korg815@user/korg815)
[19:59:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:59:27] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[20:00:18] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[20:01:31] *** Joins: graywolf (~wolf@user/graywolf)
[20:02:11] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:02:45] *** Joins: meator (~meator@user/meator)
[20:02:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[20:02:58] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 272 seconds)
[20:03:21] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[20:04:05] *** Quits: Thomas-GL (~ts@p5de2bd77.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[20:04:18] *** Joins: Thomas-GL (~ts@p5de2bd77.dip0.t-ipconnect.de)
[20:04:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:04:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:04:26] *** Joins: wroathe (~wroathe@user/wroathe)
[20:04:36] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:06:06] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[20:07:13] *** Quits: Thomas-GL (~ts@p5de2bd77.dip0.t-ipconnect.de) (Client Quit)
[20:07:30] *** Joins: noarb (~noarb@user/noarb)
[20:08:13] *** Quits: monchi (~joints@143.198.92.132) (Read error: Connection reset by peer)
[20:08:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:09:40] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:f19c:dd57:d715:5dd1)
[20:10:52] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:13:23] *** Quits: Fairy (~Fairy@2001:464a:4992:0:6111:c808:a47f:41) (Ping timeout: 256 seconds)
[20:22:33] *** Joins: CaCode (~CaCode@user/cacode)
[20:23:15] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[20:26:19] *** Quits: xlowen (~xlowen@177.220.172.230) (Quit: Connection closed)
[20:27:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec93-a79e-a5f0-138c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:28:34] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:29:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[20:30:31] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:2df9:a9b:b95f:6056) (Quit: fe23)
[20:34:06] *** Quits: vikn (~vikn@83-233-104-30.cust.bredband2.com) (Remote host closed the connection)
[20:34:19] *** Joins: Betal (~Betal@user/betal)
[20:35:19] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:36:35] *** Joins: X-Scale` (~ARM@92.250.103.242)
[20:38:55] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[20:38:55] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[20:39:04] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[20:39:05] *** X-Scale` is now known as X-Scale
[20:39:15] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[20:39:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[20:39:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[20:39:15] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 240 seconds)
[20:39:16] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[20:39:16] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 240 seconds)
[20:39:22] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 250 seconds)
[20:39:35] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[20:39:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[20:41:24] *** Quits: DSee (~DSee@66.115.182.111) (Ping timeout: 240 seconds)
[20:41:33] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[20:43:22] *** Quits: angelacrust (~angelacru@182.68.216.223) (Quit: Client closed)
[20:44:25] *** Joins: Torr (~Torr@user/torr)
[20:46:11] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[20:50:10] *** Joins: baltazar (~baltazar@84-236-101-128.pool.digikabel.hu)
[20:50:13] *** Joins: snortie (~snortie@37-188-150-37.red.o2.cz)
[20:50:13] *** Quits: snortie (~snortie@37-188-150-37.red.o2.cz) (Read error: Connection reset by peer)
[20:52:34] *** Joins: kish` (~aqua@user/aqua)
[20:53:07] *** Joins: Atque (~Atque@user/atque)
[20:54:02] *** Joins: de-facto (~de-facto@user/de-facto)
[20:54:18] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[20:54:22] *** Joins: noteness (~noteness@user/noteness)
[20:54:23] *** Joins: tejr (~tejr@user/tejr)
[20:54:26] *** Joins: bindu (~bindu@user/bindu)
[20:56:30] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[20:56:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[20:57:10] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:57:18] *** Joins: teepee (~teepee@openscad/teepee)
[20:57:30] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[20:59:31] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[20:59:55] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[21:01:17] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:09:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[21:09:44] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[21:09:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[21:10:25] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Client Quit)
[21:12:49] *** Quits: acerbic (~acerbic@cs-xdata-50-86-55-6.cspire.com) (Read error: Connection reset by peer)
[21:12:50] *** Joins: inlight (~n0ise@user/inlight)
[21:14:08] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[21:16:22] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:89ee:62bb:3f9a:ddbb)
[21:18:53] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[21:19:46] *** Joins: inlight_ (~n0ise@user/inlight)
[21:20:45] <goodfella> i have a feeling that void returns something and it just a way to tell the compiler not to bug me with this
[21:20:58] *** Joins: Narrat (~omnius@p200300df5f123b3b06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:21:03] <goodfella> i mean it must return something right ?
[21:21:11] <goodfella> and if so what exactly
[21:21:15] <goodfella> i just curious
[21:21:34] <edk> i don't know what you mean
[21:21:36] *** Joins: Akuli (~Akuli@82-203-160-26.bb.dnainternet.fi)
[21:22:33] *** Quits: cryptonector (~nico@24.28.108.183) (Remote host closed the connection)
[21:22:36] *** Quits: inlight (~n0ise@user/inlight) (Ping timeout: 240 seconds)
[21:24:50] <fizzie> If you mean approximately that you're using an implementation where the calling convention specifies a register or a set of registers for return values, and that those registers must have *some* values even upon return from a `void` function, that's certainly true, but uninteresting.
[21:25:20] *** Joins: Achylles (~Achylles_@2804:431:d724:7449:3b4d:585c:367b:f390)
[21:27:35] *** Joins: cryptonector (~nico@24.28.108.183)
[21:28:46] *** Quits: otty (~otty@2402:8100:390c:4161:3b9c:9fc2:cfb0:550b) (Ping timeout: 260 seconds)
[21:28:59] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[21:30:05] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-6.cspire.com)
[21:30:47] *** Joins: otty (~otty@2402:8100:3901:39a3:ace1:96c3:4041:4bd9)
[21:31:33] *** Joins: korg815 (~korg815@user/korg815)
[21:32:07] *** Joins: CatButts (~c@188.173.53.45)
[21:33:33] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Ping timeout: 272 seconds)
[21:34:00] <CatButts> https://bpa.st/NB7A
[21:34:04] <CatButts> audio.c:19:19: error: field 'intern' has incomplete type
[21:34:22] <CatButts> is this because incomplete type trick can only be done with pointers?
[21:34:39] <CatButts> aka, AudOutInternals *intern;
[21:35:50] *** Joins: vi64 (~victor@103.203.72.8)
[21:38:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[21:38:43] <sham1> Yes, you can only do it with AudOutInternals *intern; because the compiler knows intern's size
[21:38:59] <twkm> trick?  no tricks.  incomplete types don't have a size so storage can't be handled.
[21:39:25] <CatButts> got it
[21:39:37] <CatButts> I guess one more allocation won't hurt
[21:39:57] *** Joins: tiotags (~tiotags@user/tiotags)
[21:42:18] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[21:42:22] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:43:45] *** Joins: reset (~reset@user/reset)
[21:43:47] *** Joins: Filystyn (~piotr@user/filystyn)
[21:44:08] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[21:45:29] *** Joins: boo (~cart@2a00:23c7:9990:d701:c08e:d2:c5ce:e3c9)
[21:48:23] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[21:52:09] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[21:52:12] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Remote host closed the connection)
[21:53:15] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[21:55:58] <goodfella> echo "123" | hexdump -C
[21:56:13] <goodfella> it gives the ascii values of "1" "2" and "3"
[21:56:31] <goodfella> i wonder if it is possible to make it the value of 123 in binary
[21:56:52] <goodfella> or rather in hexadecimal in that case
[21:57:43] <clarity> printf %x 123
[21:58:52] <goodfella> nice, what's the different between echo and printf in this regard ?
[21:59:28] <clarity> printf does formatting
[21:59:31] <goodfella> i mean how does hexdump tell it apart
[22:00:11] *** Joins: masoudd (~masoudd@user/masoudd)
[22:00:33] <sham1> WDYM "tell it apart"
[22:01:26] <goodfella> wrong question ... printf is doing something that i don't fully understand
[22:02:15] <goodfella> i googled formatted ouput ..
[22:02:38] <clarity> Well, it converts and formats
[22:04:36] *** Joins: oxfuxxx (~oxfuxxx@195.47.194.46)
[22:04:49] <supakeen> there is a lot at play here, but let's keep it at that printf knows that you want to print a number as hexadecimal while with echo piped to hexdump you get a string
[22:04:56] <supakeen> (simplified)
[22:05:12] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[22:06:39] *** Quits: vi64 (~victor@103.203.72.8) (Quit: Leaving)
[22:07:15] <goodfella> how does printf know that i want to print the hexadecimal value of the characters
[22:07:16] *** Joins: vi64 (~victor@103.203.72.8)
[22:07:23] <clarity> You told it so
[22:07:25] <clarity> With %x
[22:07:55] <goodfella> i meant how does it know that i wanted to print the hexadecimal value of NUMBER or the hexadecimal number of the CHARACTER representation of the number
[22:08:17] *** Quits: vi64 (~victor@103.203.72.8) (Max SendQ exceeded)
[22:08:21] <goodfella> how does it know that what comes after %x is a number .. or is it standard ?
[22:08:34] <CatButts> #pragma comment(lib, "winmm")
[22:08:38] <clarity> %x works with numbers so the argument is converted to a number.
[22:08:44] *** Joins: vi64 (~victor@103.203.72.8)
[22:08:49] <CatButts> guess this did not work as expected
[22:09:14] <CatButts> in GCC
[22:09:33] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:10:35] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:36] *** Quits: hegz (~hegz@41.236.160.131) (Ping timeout: 240 seconds)
[22:12:52] <twkm> it isn't a standard pragma.
[22:13:27] *** Joins: hegz (~hegz@41.236.160.131)
[22:13:28] *** Quits: otty (~otty@2402:8100:3901:39a3:ace1:96c3:4041:4bd9) (Quit: WeeChat 3.0)
[22:15:48] <ioxzev1z> goodfella, you give it some binary value, and it prints by how you specify. For example, 0o101 65 0x41 and 'A' are all the same
[22:16:09] <ioxzev1z> Given 'A' to printf, with %x, it will print 41
[22:16:25] <fizzie> The shell utility `printf` is quite far removed from the C standard library function `printf`.
[22:16:35] <pragma-> 0o123 makes sense given the precedent of 0x123 but it's still really weird to see.
[22:16:59] *** Quits: hegz (~hegz@41.236.160.131) (Read error: Connection reset by peer)
[22:17:11] *** Joins: hegz (~hegz@196.154.130.143)
[22:17:42] *** Quits: hegz (~hegz@196.154.130.143) (Read error: Connection reset by peer)
[22:17:50] *** Joins: hegz (~hegz@41.236.160.131)
[22:18:16] <sham1> pragma-: better than 0123
[22:18:17] <goodfella> 0o == 0x ?
[22:18:18] * sham1 nods
[22:18:26] <ioxzev1z> goodfella, 0o = octal, 0x = hex
[22:19:24] <fizzie> pragma-: Given the precedent of 0x for heXadecimal, clearly it'd be 0t for ocTal.
[22:19:36] <ioxzev1z> I personally prefer 0h
[22:19:41] <ioxzev1z> Which is sometimes seen, but rarely
[22:19:56] <fizzie> Feels like h's more often a suffix.
[22:20:05] * pragma- considers 123h
[22:20:15] * pragma- flashes back to BASIC
[22:20:28] <sham1> BASIC? I flash back to x86 assembly
[22:20:31] <fizzie> The problem with a suffix is, of course, literals that start with a-f.
[22:20:33] *** Quits: alch (~alch@151.68.43.246) (Ping timeout: 256 seconds)
[22:20:33] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[22:20:49] <fizzie> Is f00fh an identifier or 0xf00f? Usually the former. So you end up with 0f00fh or whatnot.
[22:20:52] * APic grins magically.
[22:22:05] *** Joins: alch (~alch@151.34.76.57)
[22:23:41] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[22:25:16] *** Quits: vi64 (~victor@103.203.72.8) (Remote host closed the connection)
[22:28:13] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:29:44] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[22:31:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:32:14] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:89ee:62bb:3f9a:ddbb) (Ping timeout: 260 seconds)
[22:32:52] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[22:34:29] *** Quits: inlight_ (~n0ise@user/inlight) (Ping timeout: 256 seconds)
[22:34:31] *** Joins: epony (epony@user/epony)
[22:34:51] <goodfella> ioxzev1z: but even with printf %x .. the two bytes generated for "123" are 37 62 which are ascii for "7" and "b" so ascii is said to be the "execution character set" ?
[22:35:17] *** Joins: crashrep (~crashrep@user/crashrep)
[22:35:55] <goodfella> 7b is the binary value of 123
[22:36:13] *** Joins: inlight_ (~n0ise@user/inlight)
[22:36:32] <pragma-> what
[22:36:36] <ioxzev1z> wat
[22:36:44] <goodfella> wt
[22:36:48] <pragma-> "7b is the binary value of 123"
[22:37:02] <ioxzev1z> 123 is a single byte
[22:37:04] <goodfella> lol is the hex
[22:37:22] <pragma-> ,cc printf("%x", 123)
[22:37:24] <candide> pragma-: 7b
[22:37:38] <pragma-> Oh right, b as in the hex character, not the binary suffix.
[22:37:39] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[22:38:31] <pragma-> 0x7b
[22:39:05] <goodfella> but when printf returns 7b what he actually returns is 37 64
[22:39:16] <goodfella> two ascii bytes which correspond to 7b
[22:39:29] <ioxzev1z> ... no
[22:39:39] <ioxzev1z> It prints two characters, 7 and b
[22:39:54] <goodfella> alright so hexdump -C got me confused
[22:39:57] <ioxzev1z> 7b itself is one byte, and so is 123
[22:40:20] <ioxzev1z> But when you display the string "7b", it is three bytes, '7', 'b', '\0'
[22:40:27] <goodfella> ioxzev1z: but there is no byte in the character set corresponds to 123
[22:40:28] <goodfella> or 7b
[22:40:35] <goodfella> so it must be two bytes "7" and "b"
[22:40:37] <goodfella> isnt' it ?
[22:40:43] *** Parts: blueagain (~blueagain@user/blueagain) ()
[22:40:56] <ioxzev1z> goodfella, man ascii : 0o173   123   7B    {
[22:41:00] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[22:41:11] <goodfella> i know
[22:41:31] <ioxzev1z> When you _print_the_string_ "7b", you print two bytes, '7' and 'b'. But 7b itself is a single byte
[22:41:42] <ioxzev1z> There is a difference between a value and how you print it
[22:42:46] <pragma-> consider a normal non-hex number. 123. that's 3 characters or symbols or digits or wahtever, but it represents one number. that number itself is small enough to be stored in a single byte.
[22:43:17] <pragma-> each digit is not a byte
[22:43:33] <goodfella> but each symbol is
[22:43:38] <goodfella> when printing
[22:43:42] <goodfella> correct ?
[22:43:43] <sham1> I think the confusion here is between the number and the representation of the number
[22:43:48] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[22:43:49] <pragma-> sure, as a character-string
[22:43:57] <pragma-> "123" is 3 bytes yes.
[22:43:59] <pragma-> 123 is not.
[22:44:03] <goodfella> sure
[22:44:36] <goodfella> ascii is said to be the execution character set right ?
[22:44:44] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[22:44:53] <pragma-> not necessarily.
[22:45:03] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Read error: Connection reset by peer)
[22:45:20] <pragma-> and in any case, 69 as an ascii representation of 'f' or whatever is still 1 byte
[22:47:10] *** Joins: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com)
[22:48:09] <pragma-> 97 is 'a' right?
[22:48:14] <pragma-> ,cc printf("%d", 'a');
[22:48:16] <candide> pragma-: 97
[22:48:18] <pragma-> whoo hoo
[22:48:48] <pragma-> i was trying to remember when i was thinking up a number for 'f'
[22:49:08] <pragma-> then just randomly out of the blue my brain said 97, a few seconds ago
[22:49:13] <pragma-> that latent background processing, amirite
[22:50:56] <pragma-> i mean, i'd completely stopped thinking about the ascii value for 'f' after i used 69. i was content. i accepted my fate. but my brain, unbeknownst to me, continued to process to try to remember the value of 'a'
[22:51:53] <goodfella> nice piece of organ you got yourself
[22:52:05] *** Joins: angelacrust (~angelacru@182.68.216.223)
[22:53:00] <goodfella> but you won't 'whoo' me with this pragma- i still have faith
[22:53:34] *** Joins: pert (~pert@fsf/member/pert)
[22:55:11] <goodfella> I Can Do This !
[22:55:56] <goodfella> ok the hour came ...
[22:56:00] <goodfella> thanks for the help
[22:56:10] *** Quits: goodfella (~archer@user/tessio) (Quit: WeeChat 3.4)
[22:58:06] *** Joins: DSee (~DSee@66.115.182.102)
[22:58:09] *** Joins: chair1 (~nero@187.109.25.26)
[23:01:19] *** Quits: Achylles (~Achylles_@2804:431:d724:7449:3b4d:585c:367b:f390) (Remote host closed the connection)
[23:04:06] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 272 seconds)
[23:07:43] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:14:00] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:15:13] *** Joins: pulse (~pulse@user/pulse)
[23:15:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:15:33] *** Quits: angelacrust (~angelacru@182.68.216.223) (Quit: Client closed)
[23:16:44] *** Lord_of_Life_ is now known as Lord_of_Life
[23:17:42] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:17:45] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[23:22:51] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[23:25:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[23:27:22] *** Joins: xa0s (~xa0s@mab.sdf.org)
[23:27:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:28:58] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[23:29:33] *** Quits: chair1 (~nero@187.109.25.26) (Quit: leaving)
[23:29:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[23:30:02] *** Joins: Viewday11 (~Viewday@user/viewday)
[23:30:03] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[23:30:40] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:31:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[23:32:42] *** Joins: Betal (~Betal@user/betal)
[23:35:00] *** Quits: oxfuxxx (~oxfuxxx@195.47.194.46) (Ping timeout: 240 seconds)
[23:36:29] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[23:37:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:39:38] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (Ping timeout: 250 seconds)
[23:39:52] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[23:40:04] *** Quits: exec64 (5ff8a84e19@2604:bf00:561:2000::f9) (Ping timeout: 250 seconds)
[23:40:10] *** Quits: talismanick (~talismani@192.145.118.51) (Ping timeout: 256 seconds)
[23:41:13] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:41:16] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[23:41:16] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[23:44:54] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[23:46:08] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[23:47:17] *** Joins: unlink2 (~unlink@p200300ebcf12830011a7c6fae7585651.dip0.t-ipconnect.de)
[23:48:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:50:02] *** Quits: trvv (555a816688@user/trvv) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: trinity (9df954e8f1@2604:bf00:561:2000::cd) (Ping timeout: 250 seconds)
[23:50:02] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (Ping timeout: 250 seconds)
[23:51:00] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[23:51:17] *** Joins: trinity (9df954e8f1@2604:bf00:561:2000::cd)
[23:51:46] *** Quits: sm2n (ae95cb1267@user/sm2n) (Ping timeout: 250 seconds)
[23:51:50] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[23:51:52] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[23:51:53] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[23:51:53] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[23:51:53] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[23:51:54] *** Joins: trvv (555a816688@user/trvv)
[23:52:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
