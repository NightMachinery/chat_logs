[00:00:54] <Catie> Linked lists have downsides of course, but it's not the only data structure in most Lisps. And for most things they're used for, they work really well
[00:01:28] *** Quits: ym (~ym@95.106.10.166) (Ping timeout: 268 seconds)
[00:05:48] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 256 seconds)
[00:07:32] *** Quits: samps (~samps@177.25.90.74) (Quit: Client closed)
[00:11:57] *** Quits: jealousmonk (~user@2804:431:e7c4:15cc:f258:de9e:9ab0:dc5c) (Remote host closed the connection)
[00:12:11] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:12:29] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:13:19] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[00:13:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:19:43] *** Joins: akoana (~ah@user/akoana)
[00:20:29] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[00:21:45] *** Joins: samps (~samps@177.25.90.74)
[00:23:19] *** Joins: random-nick (~random-ni@87.116.165.220)
[00:23:45] <NotThatRPG> Spawns_Carpet[m]: For symbolic computing the linked lists work very nicely.  As Catie suggests, there was a tendency to overuse this data structure in the past, but there's the full set of arrays and hash-tables you would expect in common lisp
[00:29:04] *** Joins: servytor (uid525486@hampstead.irccloud.com)
[00:34:25] *** Joins: jealousmonk (~user@2804:431:e7c4:15cc:f258:de9e:9ab0:dc5c)
[00:35:21] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Remote host closed the connection)
[00:35:50] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 256 seconds)
[00:36:14] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[00:45:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[00:47:19] *** Joins: aeth (~aeth@user/aeth)
[00:49:28] *** Quits: samps (~samps@177.25.90.74) (Ping timeout: 256 seconds)
[00:49:38] *** Quits: cage (~cage@dynamic-adsl-94-34-55-34.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:51:02] <White_Flame> Spawns_Carpet[m]: also, linked lists tend to be heavily used in construction & deconstructing source code.  There's a lot of passing around of partial lists & inserting elements and such which can get very cumbersome with arrays
[00:53:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:58:20] <Spawns_Carpet[m]> where do you guys normally put your test code for projects? In rust and c++ I always put my tests in the source file directly and put them behind an #ifdef to compile them out when disabled
[01:00:08] <hayley> I've usually had a Tests/ directory which may or may not mirror the structure of how the code is stored. Then you have to go out of your way to make protocol-breaking changes, since you have to fix the tests too.
[01:00:24] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:8806:e50e:8484:7f18)
[01:13:14] <Spawns_Carpet[m]> do you think it's "cheating" to write a lisp like language in lisp itself? I am working on a lisp in rust but recently restarted the project from scratch and have been debating whether I should use a different language
[01:13:38] <Spawns_Carpet[m]> i thought I would learn more if I used a language that was different and did not provide some of the features I would need
[01:13:53] <copec> This question comes from only a rough understanding of the erlang paradigm: Is there a library for which you can write functions (with respective constraints), and can schedule and execute function calls across threads in a pool?
[01:14:20] <Xach> Spawns_Carpet[m]: common lisp is nice for implementing lisp
[01:14:31] <copec> Spawns_Carpet[m], That's pretty much what defines Lisp
[01:15:28] <Spawns_Carpet[m]> what is the erlang paradigm copec ?
[01:15:39] <Alfr> copec, you refer to the two dozen odd lines? (Assuming the underlying things are somehow provided?)
[01:17:31] <hayley> Spawns_Carpet: Well, are implementations like SBCL, SICL, and Clozure cheating? And what's the language?
[01:18:09] <copec> Spawns_Carpet[m], as I understand it, you write small processes that are essentially functions, and each is mapped to a green thread, and all the green threads which are scheduled and executed across cpu(s)
[01:18:55] <White_Flame> If you go all the way down to C or C++, you also lose garbage collection and have to waste time reimplementing that.  So at the very least, if you're going to implement toy lisp on top of non-lips, use a GC'd language
[01:19:08] <copec> Alfr, I apologize, I don't quite follow
[01:20:38] <Odin-> White_Flame: Depends on just what it is you're looking to understand.
[01:20:39] <hayley> But, to be fair, if you think Lisp (perhaps more precisely Common Lisp, and then your own language) is any good, then you should bootstrap from Common Lisp, so that you get interactive development at the least, and then make a meta-circular implementation of your own language.
[01:20:46] <White_Flame> Odin-: yep
[01:21:04] <Spawns_Carpet[m]> it's not cheating if your goal is to make an actual production ready programming language, but if your goal is to learn rather than make something useful it's a bit different I think
[01:21:23] <copec> Spawns_Carpet[m], To be more specific about Lisp, most sufficiently complex programs in a Lisp are really an evolved DSL in Lisp fit to implement the program
[01:21:28] <Spawns_Carpet[m]> like, I could use a library that parses sexprs for me, but what's the point in that?
[01:22:12] <copec> So implementing a lisp dialect in lisp for an arbitrary program is sort of par for course
[01:22:17] <Odin-> White_Flame: Then again, in some ways it's more interesting to write a compiler for a lisp in lisp, and then have that bootstrap its own GC...
[01:22:57] <copec> Implementing a full lisp is just an extreme example of what I'm talking about
[01:23:06] <Alfr> copec, https://michaelnielsen.org/ddi/lisp-as-the-maxwells-equations-of-software/
[01:24:14] <copec> ^Looks good, long read, adds to list
[01:24:36] * Odin- wonders idly if it'd be possible to build a sensible (not-common) Lisp for the Harvard architecture that is webassembly using a strategy like that.
[01:24:58] <White_Flame> compiling on the fly seems weird there
[01:25:02] <hayley> Personally, I find parsing to be boring and avoid it where possible.
[01:25:23] <White_Flame> hayley: that's the nice thing about sexprs at least, it's one of the easiest parsers to write for a real programming language
[01:25:25] <hayley> Odin-: Can you somehow generate a new WASM file and load it in?
[01:25:30] <Odin-> White_Flame: The whole system is kind of designed not to have it make sense.
[01:25:50] <White_Flame> and of course you can't change the function call ABI like you can in raw process asm
[01:25:59] <hayley> Alfr: It's funny that the article mentions the Lisp 1.5 manual page with eval[] on it, but then goes to implement a completely different language.
[01:26:02] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112) (Remote host closed the connection)
[01:26:53] <copec> Odin-, There are a couple of things with wasm they need to change to make an efficient CL implementation (according to my understanding anyways)
[01:26:56] <Odin-> hayley: It needs host support, so you could get it working.
[01:27:14] <copec> There are some Lisps and schemes
[01:27:16] <copec> in wasm
[01:27:25] <Odin-> copec: Part of why I said 'non-common'.
[01:27:33] <copec> ah, okay
[01:28:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:28:48] <hayley> In fact, I'd bet the article is just Norvig's Lisp-in-Python tutorial with some noise at the start and end.
[01:29:28] <hayley> Well, they do write a metacircular interpreter, but it doesn't hit the same as metacircularity.
[01:29:35] <Alfr> hayley, it's one of things I tend to remember when someone asks about a minimal lisp.
[01:29:44] <Odin-> The thing about wasm is that it makes a really, seriously strict distinction between code and data spaces.
[01:30:06] <Odin-> You can build a compiler, but a compiler-only implementation is just about unfeasible.
[01:31:46] <Spawns_Carpet[m]> what do you guys think about the norvig lisp in python thing btw? Also do you guys know of any other good resources that are similar ?
[01:31:58] <hayley> Not bad, but not notably good. The lexing/parsing step is just silly.
[01:32:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112)
[01:33:36] <White_Flame> lexing/parsing as two such separated steps are silly in the first place, regardless of language
[01:33:53] <White_Flame> there's too many contextual edge cases
[01:34:04] <Odin-> Historical artifact.
[01:34:13] <Alfr> hayley, it's not really useful, I mean in the excerpt form you'll even have implement numbers and other amenities; or just do as the author does and use some of the underlying language's facilities.
[01:38:09] <copec> It's great for learning lisp buildup imo
[01:39:04] *** Quits: pve (~pve@188-67-145-46.bb.dnainternet.fi) (Quit: leaving)
[01:40:57] <hayley> It's no Lisp in Small Pieces still, you just have a lexically scoped language with numbers, lists and strings, and only a tree-walking interpreter.
[01:46:12] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7839:e0f2:7ca6:b112) (Ping timeout: 265 seconds)
[01:48:02] <Alfr> hayley, iirc it has environments and working closures. As for it being interpreted, I couldn't care less, as for me that's just a demonstration on how a lispy language could be implemented with not too much code.
[01:48:40] <hayley> Yes, that's lexical scoping.
[01:48:48] <Alfr> hayley, also I didn't advocate using it in any way.
[01:50:01] <Odin-> The 1.5 manual example isn't exactly supremely useful, to be honest...
[01:50:02] <hayley> But I got stuck in a local maxima trying to figure out how Lisp implementations worked for like a year.
[01:51:58] <hayley> Well, are they the "Maxwell's equations of software" or not then?
[01:52:49] <Odin-> I don't think you'd easily be able to extrapolate optics from Maxwell's equations, so that's an entirely distinct question. :)
[01:57:45] <Alfr> hayley, I don't think so, or maybe one incantation of those. Also my original motivation referencing it was because copec implicitly stated that lisp is definable in lisp. ^
[01:59:42] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[02:11:11] *** Joins: dre (~dre@2001:8003:c932:c301:a3c2:1d7d:7185:3018)
[02:17:58] <dbotton> Is there a way to declare a forward reference so as to avoid warnings?
[02:18:14] <Bike> a forward reference to what kind of thing?
[02:18:26] <dbotton> function sorry
[02:18:50] <dbotton> I am using sbcl but prefer a general cl way
[02:19:02] <dbotton> if there is such a thing
[02:20:24] <dbotton> I have a circular decency between two functions.
[02:20:43] <dbotton> dependency
[02:20:51] <Bike> usually what you do is just define them in the same file, and then the implementation is probably smart enough to know to delay warnings when you compile-file
[02:21:32] <dbotton> sbcl is not so patient it seems
[02:22:48] <dbotton> granted they are style warnings to errors, but would be nice to avoid
[02:26:36] <Bike> no, sbcl definitely elides the warnings. are you using compile-file, or are you using something else like loading the source with LOAD?
[02:27:52] <dbotton> load
[02:28:08] <semz> I think (declaim (ftype ...)) suppresses that, but of course it has other side effects that may be unwanted in other implementations.
[02:29:25] <dbotton> my RUN-DEMO loads the demo then using FUNCALL to start it up
[02:29:34] <dbotton> using LOAD
[02:29:58] <dbotton> is there a better then LOAD
[02:31:05] <dre> What other implementations of commonlisp are there? I can't get SBCL working on my android 6 tablety.
[02:31:44] <random-nick> I think ECL works on android
[02:32:11] <random-nick> also ABCL probably, since it's on java
[02:32:12] <dre> I saw the common-lisp client in the play store but it segfaults on my chinese hardware
[02:32:23] <dre> so my dealio is:
[02:33:05] <dre> I use termux and a bt keyboard, and so I can run some standard linux packages
[02:34:05] <dre> like make and etc, but termux only have racket in terms of lisp interpreters
[02:34:50] <Bike> dbotton: yeah, you can do like (load (compile-file file))
[02:35:08] <Bike> dbotton: you might also be able to do a "forward declaration" with an ftype proclamation, but i don't know how well implementations respect that
[02:38:39] <random-nick> dre: apparently termux has an ecl package
[02:39:10] <random-nick> maybe it's not built for all CPU architectures?
[02:39:22] *** Quits: yewscion (~yewscion@72-21-196-65.amazon.com) (Ping timeout: 265 seconds)
[02:39:42] <dre> hmm, let me check
[02:40:02] <dbotton> Bike, thank you
[02:43:37] <dbotton> that seems to have worked but now I get errors around  defconstant being redefined
[02:43:39] <dre> yeah nah ecl isn't in my termux packages, ._.
[02:44:14] <dbotton> I will play with it Bike, thank you
[02:48:15] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[02:54:48] <Bike> dbotton: you might want alexandria:define-constant
[02:56:12] <dbotton> Will do
[02:56:19] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:58:48] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:02:46] *** Quits: sander (~sander@user/sander) (Ping timeout: 268 seconds)
[03:03:05] *** Joins: sander (~sander@user/sander)
[03:04:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[03:09:29] *** Joins: john__ (~john@dynamic-077-007-031-089.77.7.pool.telefonica.de)
[03:10:10] *** Quits: gaqwas (~john@dynamic-077-002-023-195.77.2.pool.telefonica.de) (Ping timeout: 268 seconds)
[03:14:04] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:14:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:21:58] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:22:29] *** Quits: john__ (~john@dynamic-077-007-031-089.77.7.pool.telefonica.de) (Ping timeout: 250 seconds)
[03:33:48] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[03:38:14] *** Joins: dra (~dra@2a04:4540:641d:d100:61c7:e8f2:fc82:e4f6)
[03:49:40] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (Quit: Gateway shutdown)
[03:55:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:58:51] *** Joins: s-liao (~s-liao@101.86.101.64)
[04:00:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:02:06] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:06:42] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[04:13:37] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b451:65f7:f961:6c1a) (Ping timeout: 265 seconds)
[04:21:54] *** Joins: dra_ (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6)
[04:24:44] *** Quits: dra (~dra@2a04:4540:641d:d100:61c7:e8f2:fc82:e4f6) (Ping timeout: 265 seconds)
[04:27:38] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[04:36:30] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 268 seconds)
[04:40:41] *** Quits: dra_ (~dra@2a04:4540:6409:1500:61c7:e8f2:fc82:e4f6) (Ping timeout: 265 seconds)
[04:45:42] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[04:45:57] *** Joins: Colt (~Colt@user/colt)
[04:52:55] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:56:24] <Guest74> getting closer I think.  Pretty sure the diagonals are indicative of some error on my part. https://youtu.be/W0-eUFMgJ-o
[05:00:31] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:01:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[05:02:57] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[05:06:04] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[05:07:47] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 250 seconds)
[05:08:53] *** Joins: s-liao (~s-liao@101.86.101.64)
[05:09:05] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 250 seconds)
[05:13:36] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:8806:e50e:8484:7f18) (Remote host closed the connection)
[05:19:13] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[05:25:23] *** Joins: igemnace (~ian@user/igemnace)
[05:44:58] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 265 seconds)
[05:51:09] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[05:54:21] <Spawns_Carpet[m]> do you guys think the lexer should be responsible for handling escapes in strings in source code?
[05:57:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[05:57:35] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[05:58:30] *** Joins: igemnace (~ian@user/igemnace)
[06:04:11] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[06:17:50] <Alfr> clhs 2.4.5
[06:17:50] <specbot> Double-Quote: http://www.lispworks.com/reference/HyperSpec/Body/02_de.htm
[06:18:46] <Alfr> Spawns_Carpet[m], that's a strange question to ask for common lisp; reading strings is done using a reader macro function associated with " . see ^
[06:19:47] <Alfr> Spawns_Carpet[m], for standard read table and when you're using CL's read.
[06:20:20] <hayley> What lexer?
[06:21:33] <hayley> The Common Lisp specification states that you read forms with a simple dispatch technique, rather than a lexer and parser. I'm aware that fancier readers, such as Eclector, are more sophisticated, but I don't know if they lex and parse.
[06:23:35] * hayley saw the specbot message first. Can't afford causality?
[06:25:40] <akater[m]> no-defun-allowed: What section of the spec are you talking about re: read?
[06:25:48] <Alfr> hayley, if you consider the turning streams of characters into tokens, in some sense read does that, though you immediately get the denoted objects. (But 2.2 talks about accumulating tokens.)
[06:25:56] <hayley> clhs 2.2
[06:25:56] <specbot> Reader Algorithm: http://www.lispworks.com/reference/HyperSpec/Body/02_b.htm
[06:26:52] <hayley> Right, I guess there is a concept of a "token", but it is usually consumed immediately, and there is no separation between reading tokens, and producing nested structure from tokens.
[06:29:26] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[06:31:07] *** Joins: aeth (~aeth@user/aeth)
[06:34:47] *** Joins: Oladon (~olad@98.43.81.226)
[06:40:13] *** Parts: akoana (~ah@user/akoana) (Leaving)
[06:41:48] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:44:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:45:40] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[06:48:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[06:49:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:52:11] *** Joins: igemnace (~ian@user/igemnace)
[06:54:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:54:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[06:57:03] <Spawns_Carpet[m]> what is the difference between a lexer and simple dispatch?
[06:58:27] *** Joins: pillton (~user@220-244-190-237.tpgi.com.au)
[07:02:16] <Spawns_Carpet[m]> i am scanning and building up tokens and then linking those together in an SExpr data structure in rust which is a struct with car, cdr, both being an SExpr Value which is a tagged union of Symbol, String, Int, Char and SExpr which contains the next SExpr like a linked list
[07:03:50] <hayley> The in-memory representation of a Lisp object is not a S-expression.
[07:04:06] <hayley> An S-expression refers to what is written on a character device.
[07:04:57] <Spawns_Carpet[m]> what do you mean by that? I have another LispValue union that contains 'compiled' lisp values later on
[07:05:03] <Spawns_Carpet[m]> does that sound right
[07:05:08] <hayley> Not at all.
[07:05:37] <hayley> A lexer, at least to me, scans over an entire file or string or something, and produces a sequence of tokens, which a parser then consumes in another pass.
[07:05:40] <Spawns_Carpet[m]> what is a "lisp object" in this context
[07:05:57] <hayley> Anything that the Lisp system manipulates.
[07:06:18] * hayley reads
[07:06:42] <Spawns_Carpet[m]> do you consider the compiler part of the lisp system?
[07:06:46] <hayley> Well, the data structure with a CAR and a CDR is usually called a "cons cell".
[07:06:47] <hayley> Yes, I do.
[07:07:29] <Spawns_Carpet[m]> so what should the parser be emitting in this case
[07:08:28] <hayley> There is usually a READ function which produces a Lisp object.
[07:09:12] <Spawns_Carpet[m]> my line of thinking was that the bytecode compiler should work on an AST, and in lisp the AST is an sexpr, so thats what I was parsing and feeding into the compiler, then the compiler emits the actual lisp objects for the interpreter to work with
[07:11:47] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[07:11:59] <hayley> Well, okay, but it seems weird to call the same objects both an "sexpr" and "lisp objects", and I am wondering if there is something I've missed.
[07:12:47] <Spawns_Carpet[m]> no i think I am confused and at some points using the wrong terms as well
[07:13:23] <hayley> Say, we have some code (F 'X). Presumably the whole list won't appear in bytecode, but the symbol X will.
[07:15:55] <Spawns_Carpet[m]> right, it would do something like EVAL(F), PUSH_SYMBOL(X), CALL 1 is my guess
[07:16:18] <Spawns_Carpet[m]> but the bytecode part I am still very shaky on
[07:16:34] <Spawns_Carpet[m]> i only got basic math operations working, like a calculator pretty much
[07:17:42] <hayley> What does the EVAL instruction do? It would be...odd for the bytecode VM to have an instruction which does a plain EVAL.
[07:17:53] <Spawns_Carpet[m]> in this case eval would load a lisp object from the environment and put it on the stack
[07:18:01] <hayley> Okay, sure.
[07:18:18] <Spawns_Carpet[m]> i guess LOAD_VALUE or something would be a better name?
[07:18:27] <Spawns_Carpet[m]> since eval already means something else
[07:18:31] <pillton> Spawns_Carpet[m]: You might enjoy the book Lisp in Small Pieces by Christian Queinnec.
[07:18:49] <Spawns_Carpet[m]> i am going to check that out pillton
[07:19:17] <hayley> The one bytecode VM I did turned everything into De Brujin indices, i.e. every local variable and constant had a number. Then I might emit GET-ENV 0; GET-CONSTANT 0; TAIL-CALL 1;
[07:19:19] <Bike> i would think that you'd have like PUSH_SYMBOL(F) LOOKUPF or something, meaning look up the global function named F
[07:19:39] <Bike> "lookupf" for "lookup function", not related to "F"
[07:21:22] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:21:26] <Spawns_Carpet[m]> that probably makes more sense yeah, especially since everything at the start should be a function
[07:21:46] <Spawns_Carpet[m]> for the most part at least? might be exceptions
[07:22:08] <Spawns_Carpet[m]> *no-defun-allowed*: that sounds really cool, I've never heard of that before
[07:23:44] *** Joins: spiaggia (~user@2a01:cb19:150:3400:ee:a544:8d6b:8e9b)
[07:25:28] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 268 seconds)
[07:28:32] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[07:28:43] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:32:32] <spiaggia> Good morning everyone!
[07:34:10] <hayley> Depending on how you handle the environment, especially if functions and other bindings reside in the same "namespace" or not, having a LOOKUP-FUNCTION that is different to LOOKUP-VALUE may or may not make sense. Because this is #commonlisp I am legally obligated to assume you have separate namespaces, of course.
[07:36:56] *** Quits: jealousmonk (~user@2804:431:e7c4:15cc:f258:de9e:9ab0:dc5c) (Quit: ERC (IRC client for Emacs 27.1))
[07:38:30] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[07:40:07] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:42:00] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[07:42:51] <Spawns_Carpet[m]> haha, yeah I was planning on keeping one namespace for functions and variables but I am not super dedicated to either method
[07:42:59] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[07:43:21] <Spawns_Carpet[m]> so far I haven't gotten that far though
[07:45:23] <spiaggia> Spawns_Carpet[m]: The difficult part of a Lisp system is the evaluator.  You can save yourself a lot of trouble if you write your system in Common Lisp, and use the host READ to parse your code.  Then you can concentrate on the hard part.
[07:45:48] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 265 seconds)
[07:45:52] <Spawns_Carpet[m]> i am considering that strongly
[07:46:22] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[07:46:29] <Spawns_Carpet[m]> the whole text processing step is sort of tedious anyways
[07:46:52] <spiaggia> And what you are doing is wrong in terms of how Lisp is typically parsed.
[07:47:33] <Spawns_Carpet[m]> what do you think I should change
[07:48:14] <Spawns_Carpet[m]> remember that I am pretty new to this, so bare with me
[07:48:17] <spiaggia> It is done as described in chapter 2 of the Common Lisp HyperSpec.
[07:48:39] <Spawns_Carpet[m]> even if I am not implementing common lisp itself?
[07:48:41] <spiaggia> clhs 2.2
[07:48:42] <specbot> Reader Algorithm: http://www.lispworks.com/reference/HyperSpec/Body/02_b.htm
[07:49:52] <spiaggia> Spawns_Carpet[m]: Sure.  It is very hard to give you advice if you are implementing "a Lisp" that is not one that has a specification.  Then anything you do is obviously "right" because that's how you have decided that things work in this Lisp.
[07:50:46] <spiaggia> Spawns_Carpet[m]: The best we can do is to tell you how the Common Lisp HyperSpec says that things must be done, since this is #commonlisp, after all.
[07:51:26] <Spawns_Carpet[m]> i am having trouble trying to figure out with the reader algo is an actual concrete idea of what the reader should return in terms of rust data structures
[07:51:50] <Spawns_Carpet[m]> or a c struct or whatever
[07:52:16] <Bike> you should probably just have it return lisp-manipulable objects. whatever that means in your system.
[07:52:41] <spiaggia> Spawns_Carpet[m]: Most code elements in Common Lisp would result in lists in the form of CONS cells, and atoms such as symbols and numbers.
[07:52:44] <Bike> as hayley said, a READ function is often exposed to the lisp, and that's what you're implementing. since it's a function lisp can call, it should return a lisp object.
[07:53:44] <Spawns_Carpet[m]> okay that makes a lot of sense when you say it like Bike, i know exactly what you mean now. I actually debated for a while whether it should return the actual internal representation of lisp data types or not, and asked around elsewhere and some people said to not do it, and others said to do it
[07:54:36] <hayley> Who did you ask?
[07:54:50] <Spawns_Carpet[m]> I asked on discord in the rust server
[07:54:58] <hayley> Well, there's yer problem.
[07:55:02] <Spawns_Carpet[m]> LOL
[07:55:46] <Bike> also, even if you don't expose READ, you will presumably have an EVAL function that takes a lisp object and evaluates it into another object, and you'll want to pass the result of your parse to EVAL, so
[07:56:25] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:56:46] <hayley> I mean, it can help to have some other representation with source tracking information, so that any compile-time errors (for example) can reference where the error is in a file, but that is more complicated, and I don't know what they were thinking of instead.
[07:57:07] <Spawns_Carpet[m]> that is the reason they gave actually
[07:58:12] <hayley> Okay then. But it is more effort, and I wouldn't bother for my first (few) interpreter(s).
[07:59:11] <Spawns_Carpet[m]> to be clear also, the bytecode compiler should be processing the actual lisp objects themselves and not the AST-like thing
[07:59:35] <Spawns_Carpet[m]> since the lisp objects pretty much are the source code I guess that makes sense
[08:00:07] <Alfr> Spawns_Carpet[m], one thing nice in most(?) lisps is that read returns a tree made of conses, that those conses are also directly manipulable using functions in lisp and certain (valid for the language in question) trees can be passed to eval to be treated as code and executed. Also those trees usually are more or less AST you asked for above.
[08:04:17] <Spawns_Carpet[m]> the good thing is that it will be super easy to change the reader to emit actual lisp objects. My "AST" data structure actually was pretty much exactly how I represented the lisp objects anyways, except it had a different name
[08:04:30] <Spawns_Carpet[m]> it also was purely immutable
[08:05:32] <Spawns_Carpet[m]> thanks for the information by the way
[08:11:07] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:11:26] <Spawns_Carpet[m]> what happens when the reader has to read multiple top level lists by the way? should I wrap the entire program in an invisible progn?
[08:11:54] <Spawns_Carpet[m]> or just emit each list on its own
[08:13:17] <Bike> usually a file loader will call READ repeatedly, advancing the input stream/port/whatever you call it as it goes
[08:13:23] <hayley> The reader only reads one form at a time.
[08:24:03] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:32:24] <Spawns_Carpet[m]> is the interpreters representation of lisp objects always going to have to be the same as the lisp objects emitted from the reader? that is the idea right
[08:32:43] <hayley> Yes.
[08:33:28] <Spawns_Carpet[m]> that is strange that the compiler uses the same structure that the interpreter uses, but also really cool
[08:33:57] <hayley> You never mentioned a compiler.
[08:34:34] <hayley> As a rule of thumb, the compiler definitely does not use the list-and-symbol-based representation of Lisp code.
[08:34:55] <Spawns_Carpet[m]> oh shoot now I am confused again
[08:35:22] <hayley> The reader produces a form that can be interpreted, but the compiler usually converts this form into another representation more suitable for analysis.
[08:36:56] *** Joins: semz (~none@user/semz)
[08:41:19] *** Quits: bjorkintosh (~bjork@2600:1702:6a0:af0:78e7:468a:f7c1:4c06) (Ping timeout: 268 seconds)
[08:42:51] <spiaggia> Though, a very simple compiler for a very simple language could probably generate code directly from the S-expression representation of the program.
[08:43:14] <spiaggia> It would have the same structure as the evaluator, but instead of computing a value, it would emit code to compute that value.
[08:44:18] <hayley> Sure.
[08:44:42] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleeps)
[08:45:53] <spiaggia> Spawns_Carpet[m]: What hayley is referring to is that most serious compilers for serious languages do a lot of optimizations to the code, and those optimizations typically require some intermediate representation that is neither the S-expressions nor the final instructions (bytecode or native).
[08:46:31] <Spawns_Carpet[m]> that makes sense sure
[08:47:42] <Spawns_Carpet[m]> yeah I am not worried about that right now, needing an IR would be a good problem because that means your language it advanced enough and working well enough to benefit from optimizations !
[08:47:54] <Spawns_Carpet[m]> would be a 'good problem to have'
[08:48:27] <hayley> Depends on your definition of "advanced".
[08:48:43] <hayley> Anything that isn't assembler probably can be optimized.
[08:49:38] <spiaggia> Spawns_Carpet[m]: So maybe you need to think about your long-term goals with this thing.  Those goals could determine how much you need to learn about compiler design and what data structures to choose.
[09:02:28] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[09:03:05] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[09:19:48] *** Joins: lisp123win (~user@80.227.170.170)
[09:38:08] *** Quits: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 256 seconds)
[09:52:52] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 256 seconds)
[09:53:35] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[09:57:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[10:14:48] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[10:16:06] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 256 seconds)
[10:19:29] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[10:20:39] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 250 seconds)
[10:22:20] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 256 seconds)
[10:23:25] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b451:65f7:f961:6c1a)
[10:30:28] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 268 seconds)
[10:30:37] *** Joins: flip214 (~marek@user/flip214)
[10:31:14] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:32:19] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[10:34:14] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 256 seconds)
[10:34:53] <jackdaniel> uh oh, so many next steps on asdf-devel, my feet are tired
[10:34:56] <jackdaniel> hey o/
[10:35:13] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[10:35:19] <spiaggia> Hello jackdaniel.
[10:36:41] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 250 seconds)
[10:44:34] <spiaggia> jackdaniel: I'll be back on #clim tomorrow or Saturday I hope.  This dinky laptop does not encourage participation is very many IRC channels.
[10:44:47] <spiaggia> s/is/in/
[10:44:55] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 250 seconds)
[10:48:24] *** Joins: john__ (~john@dynamic-077-007-005-057.77.7.pool.telefonica.de)
[10:49:36] <jackdaniel> sure, it is lively as always :)
[10:50:00] <jackdaniel> but the golden principle of a >9000 engineer is "no news is good news"
[10:50:05] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:50:28] <jackdaniel> (>9000 is a reference to the internet meme involving an anime "dragon ball")
[10:56:19] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:57:53] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:00:51] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:02:33] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:02:34] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:03:18] *** Joins: amb007 (~a_bakic@213.145.204.77.rev.sfr.net)
[11:10:09] *** Joins: paule32 (~paule32@user/paule32)
[11:16:15] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:20:15] *** Joins: lukego (sid312033@lymington.irccloud.com)
[11:22:30] <lukego> Hey does anyone happen to know why cffi on #+unix tries to load libffi.so.7, libffi.so.6, libffi.so.5? Can't it just use libffi.so? I ask because I need to support libffi.so.8 and it feels a bit cargo-cult to add that as the next special case. This tradition seems to go back at least a decade.
[11:23:05] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[11:30:04] *** Quits: spiaggia (~user@2a01:cb19:150:3400:ee:a544:8d6b:8e9b) (Ping timeout: 265 seconds)
[11:33:23] *** Quits: john__ (~john@dynamic-077-007-005-057.77.7.pool.telefonica.de) (Ping timeout: 264 seconds)
[11:39:44] *** Quits: amb007 (~a_bakic@213.145.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[11:39:57] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[11:40:11] *** Joins: amb007 (~a_bakic@21.199.204.77.rev.sfr.net)
[11:41:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[11:43:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[11:44:00] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:48:39] *** Quits: amb007 (~a_bakic@21.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:48:59] <jackdaniel> the reason for that is mentioned in the commit message
[11:49:03] <jackdaniel> Use soname with major version for libffi on unix as advocated on
[11:49:03] <jackdaniel> http://lispcaveats.tumblr.com/post/13259176455/ffi-linking-against-shared-libraries.
[11:49:36] <jackdaniel> as of whether it is a valid reason I don't know
[11:49:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:50:16] <hayley> Apparently that post doesn't exist, nor does the blog. Thus there are no Lisp caveats!
[11:51:11] <jackdaniel> indeed! :)
[11:52:47] <jackdaniel> and that's a cautionary story to store your rationale notes in the repository ,)
[11:52:54] <jackdaniel> there: https://web.archive.org/web/20130830192134/http://lispcaveats.tumblr.com/
[11:56:05] <lukego> "the" commit message? I went spelunking with 'git log -S libffi' and so on and turned up lots of commits but not a reason
[11:56:20] <jackdaniel> git blame is your friend
[11:56:32] <jackdaniel> then you may introspect individual lines
[11:56:44] <jackdaniel> magit is another handy tool to make it easier
[11:57:00] <lukego> I'm using magit and git blame. user error perhaps, but a comment might be more appropriate than a commit message...
[11:57:47] <jackdaniel> it might, perhaps the commit author would agree with you
[11:58:50] <lukego> ffs, I'm just trying to solve a problem here, preferably in a way that's future proof and helps other people. I don't get what's with all these sphynx-like answers. anyway.
[11:58:51] *** Parts: lukego (sid312033@lymington.irccloud.com) ()
[11:59:25] <jackdaniel> hm, I've helped you to find the rationale, digged the wayback archive, and still I'm getting punched on the face
[11:59:28] * jackdaniel gets back to work
[12:02:15] *** Joins: notzmv (~zmv@user/notzmv)
[12:08:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:11:13] *** Joins: spiaggia (~user@11.255.71.37.rev.sfr.net)
[12:13:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[12:13:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:34:20] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[12:35:38] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[12:36:08] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Client Quit)
[12:43:42] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[12:44:56] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[12:45:07] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[13:10:11] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 268 seconds)
[13:33:27] *** Quits: az_reth (~manjaro-i@2a0c:5a80:1914:af00:b8bd:948e:23f3:ff07) (Quit: leaving)
[13:44:56] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[13:54:18] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[13:56:27] *** Quits: dre (~dre@2001:8003:c932:c301:a3c2:1d7d:7185:3018) (Ping timeout: 250 seconds)
[13:59:03] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[14:03:50] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:04:15] *** Quits: pillton (~user@220-244-190-237.tpgi.com.au) (Remote host closed the connection)
[14:12:46] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[14:21:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[14:21:54] *** Joins: ebrasca (~user@librepanther.com)
[14:23:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:33:20] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:37:04] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:37:26] *** Joins: Brucio-18 (~Brucio-18@ip-94-114-248-79.unity-media.net)
[14:37:48] *** Joins: amb007 (~a_bakic@5.199.204.77.rev.sfr.net)
[14:41:08] *** Joins: VincentVega (~user@212.241.24.160)
[14:46:34] <theothornhill> How do I get (asdf:test-system :system) to yield an exit code of 1 when tests fail in rove? I am using `sbcl --non-interactive --load test.lisp` in a `test.sh` to run on ci, but it alwas passes with error code 0
[14:49:56] <jackdaniel> test-system always returns t
[14:49:57] *** Quits: amb007 (~a_bakic@5.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[14:50:24] <jackdaniel> so you need to either use whatever the /actual/ testing framework gives you to run the testing function (and take the result)
[14:50:47] <jackdaniel> or you may try some fancy specialization on the method operate specialized on your system and the test-op
[14:51:16] <semz> shouldn't test-system signal an error if tests fail? or was that just a convention
[14:51:20] <theothornhill> Ah right. Was hoping I could use test-system for this
[14:51:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:51:36] <theothornhill> semz: I was thinking the same
[14:52:39] <jackdaniel> it certainly doesn't fail for me when I run 5am tests, perhaps when the framework itself signals an error then test-system doesn't handle it?
[14:53:01] <theothornhill> Now the :perform inside the testsystem is (test-op (o c) (symbol-call :rove '#:run :gql/tests))
[14:54:46] <jackdaniel> the most silly solution (much to my liking) would be: (test-op (o c) (handler-bind ((tests-failed (lambda (c) (signal 'vroom))) (symbol-call …))) and then (handler-case (test-system ...) (vroom () (exit :code 1)))
[14:54:50] <jackdaniel> or something in this spirit
[14:55:17] <jackdaniel> or (if rove signals say tests-failed) then (handler-case (test-system ...) (tests-failed () (exit :code 1))
[14:56:54] <theothornhill> it looks like it just returns two values, one list with successes, and one with fails. So I guess I could just check for nil in the second value
[14:57:45] <jackdaniel> I wonder why test-system doesn't return whatever perform returns
[14:58:24] <theothornhill> Yeah, that must be a bug, or at least a missing feature?
[15:01:21] <jackdaniel> it might be aesthetics - the function returns t on success (instead of - the function returns undefined value(s))
[15:01:52] <jackdaniel> because T was deliberely put in the function body after calling operate
[15:02:33] <theothornhill> hmm. Well, so this works: (multiple-value-bind (foo bar fails) (rove::run :gql/tests)
[15:02:33] <theothornhill>   (when fails
[15:02:33] <theothornhill>     (sb-ext:exit :code 1)))
[15:02:52] <theothornhill> sorry for the paste
[15:04:32] <theothornhill> But that makes test-system useless, which is a shame
[15:06:23] <jackdaniel> theothornhill: you may always signal some non-serious condition that may be optionally handled from above test-system
[15:08:20] <theothornhill> You mean wrapping the test-system call in a handler-bind or something like that?
[15:09:04] <jackdaniel> even handler-case
[15:09:46] <jackdaniel> but yes, that's what I mean, and signal from operate. then when you call test-system interactively without handlers, it will simply return t
[15:09:56] <jackdaniel> but you will be able to return the exit code from a test script
[15:11:09] <theothornhill> Right, I see what you mean. Yeah, that is better that what I do now, at least
[15:12:54] *** Joins: Cymew (~ante@h-158-174-56-13.A137.corp.bahnhof.se)
[15:13:25] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[15:14:38] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[15:21:03] *** Joins: s-liao (~s-liao@101.86.101.64)
[15:21:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[15:27:44] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[15:30:10] <theothornhill> jackdaniel: thanks, btw :)
[15:30:29] *** Quits: spiaggia (~user@11.255.71.37.rev.sfr.net) (Ping timeout: 250 seconds)
[15:39:05] *** Joins: spiaggia (~user@11.255.71.37.rev.sfr.net)
[15:39:11] <phantomics> question about ABCL: my understanding is that it supports some CFFI functionality, but when I try to load a system with a simple CFFI dependency, the dependency breaks. Does CFFI actually not work with ABCL?
[15:43:30] <jackdaniel> theothornhill: sure
[16:02:48] *** Parts: lisp123win (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[16:02:54] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 256 seconds)
[16:03:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:12:09] *** Joins: lisp123w (~user@80.227.170.170)
[16:12:51] <lisp123w> Does asdf re-search all directories every time one runs asdf:load-system or only on startup?
[16:14:15] <jackdaniel> it doesn't, it caches results and uses timestamps to determine whether something has changed
[16:15:13] <lisp123w> If I create a new .asd after loading SBCL, will it get picked up?
[16:15:38] <lisp123w> (brand new one, not updating an existing one)
[16:16:21] <jackdaniel> asdf will do its best I'm sure ,)
[16:17:13] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[16:17:37] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[16:17:38] *** Quits: X-Scale (~ARM@83.223.235.65) (Ping timeout: 256 seconds)
[16:18:52] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:19:15] *** X-Scale` is now known as X-Scale
[16:20:02] <lisp123w> jackdaniel: great, thanks :)
[16:21:59] <jackdaniel> sure
[16:22:27] <etimmons> phantomics: ABCL needs Maven installed in order to use CFFI
[16:23:17] <jackdaniel> perhaps it is possible for cffi to signal error like "Please install Maven or something" when it is not installed
[16:24:51] <etimmons> I think ABCL does that, asking with a restart to install it, but I forget right now how it's triggered
[16:25:03] <jackdaniel> ah, OK
[16:25:05] <jackdaniel> good to know
[16:25:08] <etimmons> s/asking/including/
[16:25:56] <phantomics> thanks etimmons
[16:26:01] <jackdaniel> (cerror "Whatever.." "Something went wrong!")
[16:26:26] <phantomics> Is there a way to check whether Maven is installed within ABCL? That way I can implement a fallback option in case it's not there
[16:29:44] <rotateq> Java hell :)
[16:30:14] <scymtym> lisp123w: if you create a new system definition file after ASDF has already been initialized, (ASDF:LOAD-SYSTEM "new-system") will signal an error. in the context of that error, there will be a restart CLEAR-CONFIGURATION-AND-RETRY which instructs ASDF to re-scan the filesystem and discover the new system definition file
[16:30:26] <jackdaniel> Hava(na) Jell(y) - a nice codename for an application
[16:30:47] <rotateq> jackdaniel: :D
[16:31:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:31:15] <rotateq> and they still think they have real legacy
[16:31:49] <jackdaniel> but they do, systems written in java will be maintained for years to come
[16:32:08] <jackdaniel> even _if_ it loses traction
[16:32:13] <yitzi> Our Jelly in Havana
[16:32:52] <rotateq> wasting many man years of work for nothing over and over :)
[16:34:26] <etimmons> phantomics: I'm pretty sure there is, but I don't recall how. You can likely find it if you require :abcl-contrib and then apropos for maven or mvn
[16:34:46] <jackdaniel> I don't think that Java deserves such harsh opinion, but I'll keep quiet I'm getting into offtopic
[16:41:54] *** Joins: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net)
[16:42:23] <puchacz> hi, using trivia / optima - can I match the same value in 2 or 3 places in a list?
[16:42:46] <puchacz> pattern like (list :foo x x) is interpreted as an attempt to rebind a variable already bound
[16:42:59] <puchacz> I want to match (:foo 3 3) for example
[16:43:51] <phantomics> puchacz: you'd need to match them separately, like (list :foo (guard first3 (= first3 3)) (guard second3 (= second3 3)))
[16:44:12] <puchacz> phantomics, so if I have 5 places, it means 5 guards?
[16:44:21] <phantomics> Yes, afaik
[16:44:28] <puchacz> thanks
[16:44:42] <phantomics> I went looking for a way in trivia to do things like "match however many elements you find that fulfill this criteria" but couldn't find any
[16:45:34] <phantomics> I wonder if the way the pattern-matching is optimized in those libraries prevents such a thing from being implemented
[16:45:59] <puchacz> maybe I should learn paip prolog instead. I don't know it, but I think you could do something like I wanted (:foo x x) at least
[16:46:29] <puchacz> I mean - today is my first attempt at trivia, I am not giving up yet :)
[16:46:37] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:46:45] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[16:46:45] <jackdaniel> trivia allows defining patterns, so perhaps these guard things could be trivia()lly macroexpanded
[16:48:08] <puchacz> ok, I may get to it
[16:48:15] <puchacz> as I say - not giving up yet
[16:48:25] *** Joins: aeth (~aeth@user/aeth)
[16:50:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:51:38] <phantomics> Yes, you could use macros on top of trivia to define a heuristic to get N numbers equal to X
[16:51:58] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:53:06] <puchacz> in my example, I only care that both elements are the same. they don't need to be eql to 3
[16:53:16] *** Quits: leo_song_ (~leo_song@1.156.6.75) (Ping timeout: 260 seconds)
[16:56:08] <jackdaniel> puchacz: this is tricky - how do you define "the same"?
[16:56:27] <jackdaniel> #'eql, #'string= or #'really-really-similar-p ?
[16:59:25] <puchacz> jackdaniel - I have a function "really, really similar" for floating numbers
[16:59:42] <puchacz> anything else can be equal or equalp or equalps (like equalp, but ignoring spaces)
[17:00:35] <puchacz> really, really similar is not transitive, so while in theory it would match or not depending on which pairs of bound values are checked, in practice it should not matter
[17:01:16] *** Joins: Bike (~Glossina@71.69.170.70)
[17:01:16] *** ChanServ sets mode: +o Bike
[17:01:45] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[17:06:59] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[17:07:25] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Ping timeout (120 seconds))
[17:09:41] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:13:08] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:13:49] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[17:15:21] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Ping timeout (120 seconds))
[17:18:06] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:23:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[17:23:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:25:05] *** Joins: pve (~pve@37-136-35-95.rev.dnainternet.fi)
[17:26:17] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 265 seconds)
[17:36:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:44:57] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Ping timeout (120 seconds))
[17:47:59] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[17:49:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:49:33] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[17:52:04] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[17:52:35] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[17:55:02] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:08:33] *** Joins: cage (~cage@dynamic-adsl-94-34-55-34.clienti.tiscali.it)
[18:16:38] *** Quits: Cymew (~ante@h-158-174-56-13.A137.corp.bahnhof.se) (Ping timeout: 256 seconds)
[18:22:04] <etimmons> Is there any way to get all the possible initargs for a class? That includes any added to INITIALIZE-INSTANCE and not attached directly to a slot definition.
[18:22:32] <etimmons> I know I can use closer-mop to get all the initargs from slot definitions, but I see no obvious way to get the others
[18:23:18] <Bike> you'd probably have to do it yourself with
[18:23:20] <Bike> clhs method-keywords
[18:23:20] <specbot> Couldn't find anything for method-keywords.
[18:23:22] <Bike> er
[18:23:25] <Bike> clhs function-keywords
[18:23:25] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_fn_kwd.htm
[18:23:32] <Bike> it's so obscure and badly named that i forgot what it was.
[18:24:08] <Bike> i.e. do compute-applicable-methods on initialize-instance and shared-initialize, call function-keywords on all the methods, union them together
[18:24:15] <etimmons> Thanks! I didn't know that existed, but it looks like exactly what I need
[18:24:39] <etimmons> And it IS a terrible name. Why function- and not method- ???
[18:24:56] <Bike> no idea!
[18:25:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c287:4a0:25c3:17d)
[18:25:45] <rotateq> hysterical raisins maybe?
[18:26:03] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[18:26:57] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:27:53] *** Joins: jealousmonk (~user@2804:431:e7c4:15cc:f258:de9e:9ab0:dc5c)
[18:29:01] *** Joins: ym (~ym@95.106.10.166)
[18:30:33] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[18:34:04] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[18:36:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[18:38:28] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[18:38:55] <jackdaniel> etimmons: scraping initargs from slot definitions would not suffice, because you may have initialize-instance keywords that are not initializing any particular slot
[18:39:18] <jackdaniel> (the solution with function-keywords sounds like the right thing to do, I didn't know about it)
[18:39:51] <etimmons> Yeah, I started with slot definitions and then realized pretty quickly it was insufficient
[18:40:18] <Nilby> from before methods were different from functions
[18:41:08] <jackdaniel> Bike: the name is obscure, but its interface seems sane - what do you mean by that the function itself is obscure?
[18:41:15] <Nilby> There was some MOP-like things before MOP
[18:41:19] <Bike> just that i've only ever used it for this exact purpose
[18:41:27] <jackdaniel> I see, thanks
[18:41:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[18:42:08] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 256 seconds)
[18:42:37] <jackdaniel> perhaps one could specialize it on standard-class to harvest all keywords from the union of initialization methods (with caching :)
[18:43:24] *** Joins: aeth (~aeth@user/aeth)
[18:43:27] <Bike> in clasp we use it to precompute and cache valid keywords for when make-instance checks them. i forget if that's inherited from ECL or not
[18:43:44] <jackdaniel> no, ecl doesn't have anything like this
[18:44:10] <Bike> https://gitlab.com/embeddable-common-lisp/ecl/-/blob/develop/src/clos/standard.lsp#L203-216 aha!
[18:44:47] <jackdaniel> right, but not function-keywords specializer :) perhaps we could change it
[18:44:52] <Bike> mop method-keywords
[18:44:52] <specbot> Couldn't find anything for method-keywords.
[18:44:56] <Bike> i guess it's internal then
[18:53:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c287:4a0:25c3:17d) (Remote host closed the connection)
[18:53:56] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e2f7:1684:ac3:796d)
[19:02:33] <Guest74> I kinda wish slime was smart enough to only display keyword arguments specialized on the objects given.  Other times i think I shouldn't have separate keywords for different classes.
[19:03:23] <spiaggia> Guest74: What does it mean for a "keyword argument" to be "specialized on" an object?
[19:03:56] <Guest74> methods specialized on objects, which can have different keyword args
[19:04:00] <spiaggia> And what does it mean to have a "keyword for a class"?
[19:04:47] <Guest74> you know of &allow-other-keys right?
[19:05:00] <spiaggia> Guest74: You mean EQL specializers?  Most methods specialize to classes otherwise.
[19:05:14] <Guest74> no
[19:05:31] <NotThatRPG> Guest74: More and more I have adopted the OO Programming in CL style of making constructor functions that wrap make-instance, because the make-instance interface is so hard to introspect
[19:05:39] <spiaggia> So what does it mean for a method to "specialize on an object"?
[19:05:58] *** NotThatRPG is now known as NotThatRPG_away
[19:07:16] *** Quits: NotThatRPG_away (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:07:55] <shka> Guest74: it does that sometimes!
[19:08:19] <Guest74> yeah, it's annoying.
[19:09:41] *** Quits: Inline (~Inline@2a02:908:1252:7a80:e2f7:1684:ac3:796d) (Quit: Leaving)
[19:10:15] * spiaggia is lost.... again. 
[19:10:41] <Guest74> I'm not sure what the purpose of displaying key args you can't use is, but I'm guessing slime just calls some mop function that aggregates all keywords for a given generic function.
[19:11:11] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[19:11:36] <Guest74> spiaggia: talking about calling a generic function and what slime displays as possible keywords.
[19:11:41] <spiaggia> How would SLIME know what methods are applicable when you just call a generic function?
[19:12:30] <White_Flame> especially as slime isn't aware of what the runtime classes of the argument values would be
[19:12:50] <spiaggia> And it couldn't, since that would be undecidable.
[19:13:03] <Guest74> if you have the objects you should be able to retrieve which specific method applies.
[19:13:38] <White_Flame> spiaggia: in some limited very static cases it could be possible, but yeah there's not an expectation that that info is visible statically
[19:13:40] <spiaggia> But how does SLIME know what object would be the value of an argument form you type.
[19:14:05] <Bike> huh, there's a thought. editor that does type inference to narrow down the applicable methods. i suppose your average manifestly typed language editor does that nowadays
[19:14:38] <spiaggia> Sure it would be much easier in such a language.
[19:14:49] <Guest74> is that information that could be gotten from eclector?
[19:15:05] <Bike> eclector does not do type inference lol
[19:15:29] <Bike> it would be possible for a beefy editor system to do it. i think the kind of editor beach has in mind could swing it
[19:15:29] <spiaggia> Guest74: If you have (gf (some-function arg...)), how can SLIME know what some-function will return?
[19:16:23] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:18:29] *** Joins: Bike25 (~Bike@71.69.170.70)
[19:18:29] *** ChanServ sets mode: +o Bike25
[19:18:32] *** Bike25 is now known as Bicyclidine
[19:19:22] <Bicyclidine> slime does print appropriate keywords for the very special case of (make-instance 'quoted-symbol ...)
[19:19:26] <Guest74> hm, maybe I was thinking of trucler. That should be able to provide the needed feedback, no?  A good editor would need to be able to introspect
[19:19:32] <Bicyclidine> maybe also change-class? i forget
[19:19:43] <Bicyclidine> well, it would entail more than what trucler has, in general
[19:19:56] <jackdaniel> if you have (make-instance 'class-name ..) surely it can infer something
[19:20:15] <Bicyclidine> if you have (foo (bar ...) ...), it would need to recognize that the argument to foo comes from bar, and has such and such type
[19:20:19] <jackdaniel> i.e by calling the running system
[19:20:29] <Bicyclidine> when you factor in general forms like (foo (if ...) ...) you can see how this would take a pretty hefty analysis
[19:20:57] <Bicyclidine> not insurmountable, and the compiler is doing that kind of thing already, but it would take a bit of thought to make it available for the editor's perusal
[19:21:10] <Guest74> I'm mainly concerned with the basic case of using generics in the repl.
[19:21:44] <Bicyclidine> that is what i'm describing
[19:21:46] <Guest74> Though I guess some people do do complicated things like that in their code and would want the editor to deal with it.
[19:21:53] <Bicyclidine> in (foo (if ...) ...), FOO would be a generic function
[19:22:14] <Bicyclidine> it could be more indirect, like (let ((bar (if ...))) (foo bar ...))
[19:22:26] <Guest74> Yes, but I'm not sure what the use case would be of using if at the repl to determine the argument.
[19:22:54] <Bicyclidine> oh, so you're only concerned more with repl one liners
[19:22:57] <Guest74> by the basic case I mean calling a generic with known objects.
[19:22:58] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[19:23:08] <Bicyclidine> like dynamic variables?
[19:23:23] <Bicyclidine> (foo *bar* ...) or something? because you're probably not writing (foo #<literal object> ...)
[19:23:51] <Guest74> true, I can see how that might complicate things.
[19:24:48] <Bicyclidine> you could handle the limited case of an argument being a dynamic variable with trucler and not much difficulty
[19:25:44] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:25:48] <Guest74> so the base of a good editor would need something like both trucler and eclector?
[19:25:59] <spiaggia> And Cleavir, yes.
[19:26:14] <spiaggia> And Clostrum.
[19:26:31] <spiaggia> Maybe not Clostrum if you do it for (say) SBCL.
[19:27:01] <Guest74> what would cleavir be used for?
[19:27:59] <Bicyclidine> type inference
[19:28:17] <spiaggia> Information about functions being called to provide arguments, like type information, yes.
[19:28:17] *** Quits: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net) (Quit: Client closed)
[19:28:52] <spiaggia> Global values of special variables if such a variable were to be used as an argument.
[19:29:13] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:29:37] <Guest74> welp, hopefully somebody writes that soon.
[19:30:01] <spiaggia> scymtym is working on bits and pieces.
[19:31:43] <spiaggia> Guest74: I must congratulate you, though.  You are one of only a few people who are not convinced that Emacs+SLIME is the best development environment around, all languages taken into account.
[19:31:55] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[19:32:33] <Guest74> I have bad memory, so emacs in general is not good for me.
[19:32:53] <Guest74> but I couldn't survive without something like M-.
[19:32:57] <spiaggia> Well, I wasn't referring to that particular aspect of Emacs.
[19:33:29] <Guest74> I mean, my wm only has one key-binding.  That's how much I can hold onto emacs stuff.
[19:33:46] <spiaggia> NotThatRPG: I tried Keene's advice to provide specific constructors, but I backed off a bit.  Now I often do an intermediate thing like MAKE-AST that trampolines to MAKE-INSTANCE, perhaps after doing some sanity checks and stuff. \
[19:38:17] <spiaggia> NotThatRPG: The class to be instantiated is encoded in the name of the constructor if you follow Keene's advice. but I find I often need to have the class be computed from other information, so that technique won't work then.
[19:38:37] <NotThatRPG> Makes sense. The big thing to me is to avoid &allow-other-keys which makes it horrible to get things right.
[19:38:45] *** NotThatRPG is now known as NotThatRPG_away
[19:38:47] *** Quits: NotThatRPG_away (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:38:53] <spiaggia> Yes, I see.
[19:41:04] <lagash> hayley: what's this "one bytecode VM" you were talking about?
[19:47:56] <Guest74> mfiano: what's your backtracking strategy? I'm thinking, perhaps naively, to keep a list of collapsed cells with their that had more than one possibility, the possibility it was collapsed to, and a list of cells collapsed after them.
[19:48:14] <Guest74> s/with their/ /
[19:50:11] <Guest74> and updating the list of failed possibilites each time, once it encompasses all possibilites, just add it as a cell to the previous collapsed cell with more than one possibility.
[19:50:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:6adf:f25e:1e5f:74e1)
[19:52:08] <Gnuxie> lagash: it's the one (they have done it once) bytecode VM they made a. It's probably the Netfarm script machine https://cal-coop.gitlab.io/netfarm/documentation/Netfarm_script_machine.html
[19:54:06] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (K-Lined)
[19:54:06] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (K-Lined)
[19:54:06] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (K-Lined)
[19:54:08] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (K-Lined)
[19:54:08] *** Quits: hayley (~theemacss@user/hayley) (K-Lined)
[19:54:09] *** Quits: sp (~sp@user/susam) (K-Lined)
[19:54:09] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (K-Lined)
[19:54:10] *** Quits: rodentrabies[m] (~rodentrab@2001:470:69fc:105::1:2404) (K-Lined)
[19:54:11] *** Quits: sepanko (~sepanko@user/sepanko) (K-Lined)
[19:54:11] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (K-Lined)
[19:54:15] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (K-Lined)
[19:54:15] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (K-Lined)
[19:54:15] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (K-Lined)
[19:54:15] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (K-Lined)
[19:54:16] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (K-Lined)
[19:54:17] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (K-Lined)
[19:54:17] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (K-Lined)
[19:54:18] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (K-Lined)
[19:54:18] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (K-Lined)
[19:54:18] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (K-Lined)
[19:54:19] *** Quits: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911) (K-Lined)
[19:54:19] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (K-Lined)
[19:54:19] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (K-Lined)
[19:54:20] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (K-Lined)
[19:54:20] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (K-Lined)
[19:54:21] <Bike> um.
[19:54:24] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (K-Lined)
[19:55:46] <lagash> K-lined? That's... strange
[19:56:08] <lagash> I was wondering why Gnuxie didn't autocomplete :P
[19:56:25] *** Quits: Bicyclidine (~Bike@71.69.170.70) (Quit: Bicyclidine)
[19:57:58] <Bike> what's the server op channel again? i am concerned
[19:58:23] <Bike> #libera, right
[20:01:10] *** Joins: samps (~samps@177.138.113.212)
[20:03:04] <Bike> apparently some idiot was connected through matrix, and an op accidentally (?) k-lined the entire matrix instance
[20:04:17] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[20:04:27] *** Joins: drmeister (sid45147@ilkley.irccloud.com)
[20:05:19] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[20:05:26] *** Quits: hobo (~hobo@69.218.33.204) (Ping timeout: 250 seconds)
[20:05:28] *** Quits: gendl (sid100083@hampstead.irccloud.com) (Ping timeout: 265 seconds)
[20:05:28] *** Quits: victor_ (sid208353@tinside.irccloud.com) (Ping timeout: 265 seconds)
[20:06:05] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 264 seconds)
[20:06:41] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[20:07:36] <Bike> and i guess it's un-k-lined now?
[20:07:39] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[20:07:52] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[20:07:52] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[20:07:52] *** Joins: sepanko (~sepanko@user/sepanko)
[20:08:00] *** Joins: hobo (~hobo@69.218.33.204)
[20:08:05] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[20:08:05] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[20:08:05] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[20:08:05] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[20:08:17] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[20:08:29] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[20:08:29] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[20:08:29] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[20:08:30] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[20:08:30] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[20:08:30] *** Joins: sp (~sp@user/susam)
[20:08:30] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[20:08:30] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[20:08:30] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[20:08:30] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[20:08:30] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[20:08:42] *** Joins: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911)
[20:08:42] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[20:08:42] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[20:08:54] *** Joins: rodentrabies[m] (~rodentrab@2001:470:69fc:105::1:2404)
[20:08:54] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[20:08:56] <Bike> yeah, ok. phew.
[20:09:02] *** Quits: dbotton (sid492350@lymington.irccloud.com) (Ping timeout: 240 seconds)
[20:09:05] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[20:09:31] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[20:09:39] *** Quits: jmercouris (sid438340@hampstead.irccloud.com) (Ping timeout: 265 seconds)
[20:09:39] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 265 seconds)
[20:09:52] *** Quits: griffinmb (sid410590@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:09:53] *** Quits: travv0 (sid293381@user/travv0) (Read error: Connection reset by peer)
[20:09:53] *** Quits: stylewarning (sid241636@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:09:54] *** Quits: splittist (sid17737@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:09:54] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Read error: Connection reset by peer)
[20:09:54] *** Quits: iisi (sid19824@hampstead.irccloud.com) (Read error: Connection reset by peer)
[20:09:57] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:01] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: ullbeking (sid5364@user/ullbeking) (Read error: Connection reset by peer)
[20:10:04] *** Quits: pl (sid98063@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:28] <samps> Hey folks, quick question: in Java (coming from a Clojure background) we have the `resources/` folder in which we can put assets whose path can be later retrieved using `clojure.java.io/resource`. Is such a thing possible for CL's systems?
[20:12:27] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[20:12:28] *** Joins: jmercouris (sid438340@hampstead.irccloud.com)
[20:12:35] *** Joins: iisi (sid19824@hampstead.irccloud.com)
[20:12:35] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 250 seconds)
[20:12:53] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[20:13:14] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[20:13:17] <spiaggia> samps: You can just choose any folder name you like and make it the global value of any special variable you like.
[20:13:28] <lagash> Gnuxie: Netfarm looks interesting, a bit too niche for my interests though!
[20:13:43] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[20:13:44] <spiaggia> samps: Then you can put anything you want in that folder and retrieve it using the global value of that special variable.
[20:13:45] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[20:13:53] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[20:14:03] *** Joins: stylewarning (sid241636@helmsley.irccloud.com)
[20:14:04] *** Joins: travv0 (sid293381@user/travv0)
[20:14:12] *** Joins: splittist (sid17737@tinside.irccloud.com)
[20:14:13] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[20:14:28] <samps> spiaggia: fair enough, but Clojure/Java's resources thing is that it is relative to the project's location within the classpath. If I understood your suggestion correctly, I would be hardcoding an absolute location, right?
[20:14:33] *** Joins: victor_ (sid208353@tinside.irccloud.com)
[20:14:36] *** Joins: drmeister (sid45147@ilkley.irccloud.com)
[20:14:45] *** Joins: pl (sid98063@helmsley.irccloud.com)
[20:14:45] *** ChanServ sets mode: +o pl
[20:14:51] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[20:14:52] *** Joins: NotThatRPG (~NotThatRP@mail.sift.net)
[20:15:11] *** Joins: ullbeking (sid5364@user/ullbeking)
[20:15:12] <Guest74> samps: you can get the directory where the system is stored with asdf.
[20:15:13] <spiaggia> samps: I don't know Java, so I probably misunderstood what you wanted.
[20:15:18] *** Joins: hubvu (sid495858@user/hubvu)
[20:15:31] <samps> ah, let me explain better
[20:15:50] <spiaggia> I guess "within a classpath" translates to "ASDF-relative".
[20:16:35] <Guest74> asdf:system-relative-pathname will construct a pathname relative to the system.
[20:16:37] <samps> the thing with `resources/` is that if I invoke `(io/resources "foo/bar.json)` it will give me an absolute path for the fragment I gave within resources, lik `/home/foobar/projects/cool-thing/resources/foo/bar.json`
[20:17:01] <samps> asdf:system-relative-pathname looks really nice! Thanks for this, it should work well
[20:17:09] <Guest74> np
[20:23:02] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:24:19] <samps> yup, asdf:system-relative-pathname is asdf's analogue to io/resource. Can't see much of a difference functionally, really
[20:24:20] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[20:24:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[20:25:13] *** Joins: griffinmb (sid410590@helmsley.irccloud.com)
[20:26:52] *** Joins: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net)
[20:29:26] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[20:29:27] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Client limit exceeded: 20000)
[20:29:38] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[20:29:50] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Quit: Client limit exceeded: 20000)
[20:29:51] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Client limit exceeded: 20000)
[20:30:00] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[20:30:08] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[20:30:09] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Client limit exceeded: 20000)
[20:30:11] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Client limit exceeded: 20000)
[20:30:13] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Client limit exceeded: 20000)
[20:30:20] *** Quits: paulapatience (~paulapati@2001:470:69fc:105::16a4) (Quit: Client limit exceeded: 20000)
[20:30:39] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[20:30:47] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[20:31:05] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Quit: Client limit exceeded: 20000)
[20:31:47] *** Quits: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[20:34:57] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[20:39:18] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 265 seconds)
[20:39:44] *** Joins: cosimone (~user@93-44-184-243.ip98.fastwebnet.it)
[20:40:27] *** Joins: Catie (~user@user/catie)
[20:45:08] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[20:45:09] <etimmons> Just be a bit careful with system-relative-pathname, it only works if the source is available for the system. So if you're going to distribute an image, you need to somehow bundle those resources yourself.
[20:46:07] <NotThatRPG> Also remember that if you want a directory path from this function you *must* end the second argument with a "/"!
[20:46:14] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[20:46:14] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[20:46:15] *** Joins: sepanko (~sepanko@user/sepanko)
[20:46:15] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[20:46:15] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[20:46:26] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:46:28] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[20:46:28] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[20:46:43] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[20:46:57] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[20:46:57] *** Joins: zbrown[m] (~zbrownm]@2001:470:69fc:105::1:33db)
[20:46:57] *** Joins: paulapatience (~paulapati@2001:470:69fc:105::16a4)
[20:46:57] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[20:47:12] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[20:47:12] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[20:47:49] <Guest74> tbh, I just use xdg dirs, but I think that's linux only.
[20:53:19] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Remote host closed the connection)
[20:56:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 264 seconds)
[20:57:37] *** Joins: amb007 (~a_bakic@5.199.204.77.rev.sfr.net)
[20:59:56] <NotThatRPG> Guest74: I tried to figure out XDG, and it just seemed like a mechanism for making it impossibly complex for me to find how any application's configuration was computed.
[21:00:10] * NotThatRPG is being a stupid troll
[21:01:19] <Guest74> it takes some getting use to reading specifications from freedesktop.
[21:03:30] <spiaggia> Guest74: So how would that work?  Like suppose I have some Common Lisp software I would like for others to install, and in that software I would like to refer to a particular file in the CLOSER-MOP system.  How would my Common Lisp code look for that to be possible with the mechanism you are describing?
[21:03:37] <etimmons> UIOP has an XDG like implementation for Windows, but it's a bit bonkers/not what a Windows user would typically expect
[21:03:59] <etimmons> But system-relative-pathname and XDG are solving two different problems
[21:04:16] <Guest74> spiaggia: it wouldn't help for that.
[21:04:35] <Guest74> it's more about finding directories where you can store data, configs, etc...
[21:04:40] <spiaggia> Oh, I thought you gave it as an alternative to ASDF-relative pathnames.
[21:04:46] <spiaggia> I guess I misunderstood.
[21:05:01] <etimmons> spiaggia: That's what I understood as well
[21:05:15] <Guest74> well, it's an alternative for finding a place to store and retrieve your data.
[21:05:42] *** Joins: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:05:48] <Guest74> you can search those directories for what others might have put there, but more for where your project puts things.
[21:06:15] <Guest74> you also use it to find common resources like fonts, icons, sounds, etc...
[21:07:41] <Nilby> I've rigged it so that e.g. (path-append (config-dir "nyxt") "auto-config.lisp") gives me the right place on unix,macos,windows,…
[21:08:51] <Guest74> I dont use those other OSs, but wouldn't you just use logical pathnames?
[21:12:13] <Nilby> I would use logical pathnames ... if I wanted to suffer for eternity.
[21:12:34] *** Quits: spiaggia (~user@11.255.71.37.rev.sfr.net) (Ping timeout: 260 seconds)
[21:12:56] <Guest74> what's the problem with them?  Seems to work fine for my use case.
[21:13:52] <Guest74> huh, looks like clx uses them too, or maybe that's just my branch
[21:17:49] <NotThatRPG> Guest74: etimmons can tell you the sad saga of testing ASDF with logical pathnames.... The spec for how they should be translated is very loose, so their performance across implementations can be difficult to predict.
[21:18:32] *** Quits: amb007 (~a_bakic@5.199.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[21:19:00] *** Joins: amb007 (~a_bakic@62.244.204.77.rev.sfr.net)
[21:19:13] <Guest74> Is there any write up of the problems?  I think I should eventually be concerned about other implementations, well, at least ecl.
[21:20:15] <NotThatRPG> In its simplest form, the problem is that an implementation is licensed to do just about anything when it rewrites a logical pathname.
[21:20:58] <NotThatRPG> "translate-logical-pathname might perform additional translations, typically to provide translation of file types to local naming conventions, to accomodate physical file systems with limited length names, or to deal with special character requirements such as translating hyphens to underscores or uppercase letters to lowercase. Any such additional translations are implementation-defined. Some implementations do no additional translations."
[21:21:19] <Nilby> Even if I somehow had the power to fix logical pathnames, I'm not sure I would use it. They worked well in the past, on one implementation, in one organization.
[21:22:08] <NotThatRPG> Right: and as I have said ad nauseum, logical pathnames were invented and specified in a world where there was much more diversity in filesystems.
[21:22:30] <NotThatRPG> Right now, the Python approach of just pretending everything is Unix works much more predictabley
[21:22:31] <Guest74> so now that there's less diversity it should be easier to constrain the specification.
[21:22:32] <Nilby> Now there are practically only 2 kinds of pathnames, one is very sensible and easy, the other is relatively insane, and even logical pathnames can't support them properly.
[21:22:36] <NotThatRPG> predictably
[21:22:56] <NotThatRPG> Guest74: Yeah, except that the specification is a dead document.
[21:23:04] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[21:23:19] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:23:22] <Guest74> and yet implementations have come to agree on lots of things, like plns
[21:23:40] <Guest74> and maybe a good candidate for wscl.
[21:23:47] <etimmons> Guest74: An example of some troubles that came up in ASDF testing. https://plaster.tymoon.eu/view/2681#
[21:23:58] <etimmons> ABCL's behavior here seems nonsensical, yet conforming
[21:24:11] <NotThatRPG> plns?
[21:24:25] <NotThatRPG> package local nicknames?
[21:24:25] <etimmons> package local nicknames
[21:25:02] <White_Flame> particularly lettered nomenclature
[21:25:13] *** Quits: samps (~samps@177.138.113.212) (Quit: Client closed)
[21:26:29] <Guest74> etimmons: so you're saying I'll be fine on ecl.   :)
[21:30:09] <yitzi> Does anybody know if there is a character encoding system for Lisp around? I know the various implementations have their own internal functions to support stream encoding. Just wondering if anyone has made and external library.
[21:30:11] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:30:13] <etimmons> Guest74: I Guess? Just hope you don't like underscores or mixed case file names. I think file names containing more than one #\. or with non-ASCII characters might be underspecified as well? Been a while since I've seriously played with logical pathnames
[21:30:53] <White_Flame> yitzi: babel
[21:31:12] <Guest74> nope, just basic filenames, no special characters, no spaces, only hypens as separators.
[21:31:18] <Guest74> only lower case.
[21:31:49] <yitzi> White_Flame: Thanks, I completely forgot about that.
[21:32:44] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:33:19] <Bike> yitzi: https://common-lisp.net/project/babel/
[21:33:38] <NotThatRPG> Guest74: The problem is that if someone wants to put something in the logical pathname structure that you have created, they can still bust it.
[21:33:57] <yitzi> Bike: Thanks.
[21:36:08] <Guest74> notthatrpg: i'll have to think on that one.  I'm not sure I use them for anything that the user can modify.
[21:37:16] <Guest74> but having either a known allowed case/character set or a (non)trivial-logical-pathnames would be nice.
[21:51:59] *** Joins: yewscion (~yewscion@2604:ca00:148:c10d::1061:ce86)
[21:53:58] <NotThatRPG> That would probably require a level of groveling over individual implementations that I don't know anyone would be excited to do.
[21:54:44] <NotThatRPG> Using Fare's "pretend everything is Unix" approach in ASDF/UIOP is probably easier than trying to figure out how LPNs work acrss implementations.
[21:54:53] <etimmons> And OSes, since logical pathname translation can be dependent on the file system in use.
[21:56:02] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 240 seconds)
[21:56:19] <Guest74> I would think that information is in someones brain. unless they forgot it from trauma.
[21:56:48] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:00:15] *** Joins: NotThatRPG (~NotThatRP@mail.sift.net)
[22:04:17] <Nilby> Regarding encoding, even on macOS if you make a file called "cèpe" you actually get a file called "cèpe".
[22:05:56] *** Joins: asarch (~asarch@2806:10ae:7:2cca:f61b:4cfd:2d42:1782)
[22:06:09] *** Quits: amb007 (~a_bakic@62.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:07:08] <Guest74> I'm seeing the same characters
[22:07:15] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:08:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:09:28] <Nilby> Seeing and bytes are very different in unicode, but who knows if the ecoding changed from my irc client to yours.
[22:10:17] <Nilby> but for me (list (length "cèpe") (length "cèpe")) => (4 5)
[22:10:40] *** Joins: NotThatRPG (~NotThatRP@mail.sift.net)
[22:12:24] <Guest74> yeah, that code gives me the same result.
[22:12:57] <Nilby> in other words macos converts NFC to NFD or something
[22:13:18] <Nilby> see https://www.unicode.org/reports/tr15/
[22:13:19] <etimmons> uggghhh, I hate normalizing file systems.
[22:13:53] <Guest74> but that's probably another reason to a known safe character set.
[22:14:03] <Guest74> s/to a/ to have a/
[22:14:57] <Guest74> but you really can't change what app users will do.
[22:15:21] <Guest74> even i fyou can affect library users.
[22:17:02] <Nilby> exactly, the web in Japan is still a lot of Shift-JIS and probably won't be unicode any time soon
[22:18:14] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:20:02] *** Quits: asarch (~asarch@2806:10ae:7:2cca:f61b:4cfd:2d42:1782) (Ping timeout: 240 seconds)
[22:22:55] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:23:05] <phantomics> I've made some changes to my ~/.bashrc and it seems that when starting Slime's inferior-lisp-program, this .bashrc isn't used. Shell variables that are supposed to be set in this .bashrc appear to not be available to the inferior lisp I'm running. Has anyone run into this?
[22:23:17] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:24:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:24:39] <Bike> phantomics: yes, iirc emacs does not go through the shell to start programs
[22:24:42] <Guest74> does emac see the change?
[22:24:47] <Bike> phantomics: you can specify an environment https://common-lisp.net/project/slime/doc/html/Multiple-Lisps.html#Multiple-Lisps
[22:25:41] <phantomics> Thanks Bike, that makes sense
[22:25:43] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:34:19] *** Quits: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net) (Quit: Client closed)
[22:34:57] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:36:56] *** Joins: X-Scale` (~ARM@92.250.99.18)
[22:37:56] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:38:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 264 seconds)
[22:38:53] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:39:27] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:39:50] *** Joins: X-Scale (~ARM@46.50.7.119)
[22:40:34] <NotThatRPG> phantomics: Are you on Linux or Mac?
[22:41:02] <phantomics> Linux
[22:41:50] *** Quits: X-Scale` (~ARM@92.250.99.18) (Ping timeout: 256 seconds)
[22:42:39] <VincentVega> Could anyone remind me of the name of the library (I saw it on github a while ago)? It aims to build the foundation of a matplotlib-like library (mentions that in the README), but more general & efficient. Something to that end. I don't remember what it does exactly, but I want to read about it again.
[22:44:06] *** Quits: cosimone (~user@93-44-184-243.ip98.fastwebnet.it) (Ping timeout: 256 seconds)
[22:45:07] *** Joins: asarch (~asarch@2806:10ae:7:2cca:f61b:4cfd:2d42:1782)
[22:47:01] <VincentVega> Also, are there any geometry libraries other than cl-geometry? I want shape intersection tests mostly, rectangle-rectangle, rectangle-circle and such would be nice.
[22:47:36] *** Joins: tophullyte (~tophullyt@162.213.177.125)
[22:48:01] <VincentVega> (written fully in CL)
[22:48:50] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:50:25] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[22:51:29] *** Joins: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:54:02] *** Quits: tophullyte (~tophullyt@162.213.177.125) (Ping timeout: 240 seconds)
[22:57:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[22:58:50] *** Joins: aeth (~aeth@user/aeth)
[23:03:26] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:05:08] <Guest74> I'm sure there's plenty stored away in game engines and mcclim.  someone should abstract that all into some generic interface.
[23:05:27] <vegai> vellum?
[23:05:34] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:05:44] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:06:01] <Guest74> anybody know how to get pngload to load a paletted png and return an array of indices into the palette?
[23:06:11] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:06:29] <VincentVega> vegai: yes, thank you!
[23:07:53] <VincentVega> Guest74: Indeed, those are reasonable places too look for...
[23:17:43] *** Alfr is now known as Guest8572
[23:17:43] *** Quits: Guest8572 (~Alfr@user/alfr) (Killed (calcium.libera.chat (Nickname regained by services)))
[23:17:47] *** Joins: Alfr (~Alfr@user/alfr)
[23:29:53] <mfiano> VincentVega: Check out mfiano/origin on GH
[23:30:11] <mfiano> Guest74: My approach sucks, ignore that part completely.
[23:30:40] <Guest74> ah, i can't even remember where yours is located or what it's called :)
[23:30:54] <mfiano> VincentVega: for the geometry intersection testing that is
[23:31:05] <Guest74> hey, is there a way to get pngload to return an array of indices for paletted images?
[23:31:54] <Guest74> it's screwing me up cause the png object says bit-depth 4 but returns an uint8 array.
[23:34:18] <mfiano> There might be something in https://github.com/mfiano/pngload#querying-metadata
[23:35:54] *** Joins: Skyfire (~pyon@user/pyon)
[23:38:26] <Guest74> yeah, i already typecase on truecolour and truecolour-alpha, so I can use that to get a correct image.  Still would be nice to be able to get an array of indices so changing palettes would be simple.
[23:41:34] <VincentVega> mfiano: Looks good, thank you! I haven't seen you library neither on awesome-cl, nor common-lisp.net. Have you published it recently? It's nice to see there's some competition in the vector math department, e.g. rtg-math, 3d-vectors/matrices.
[23:42:41] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[23:43:50] <mfiano> VincentVega: I haven't but as far as I'm aware it's the only one with extensive intersection testing.
[23:43:59] <mfiano> and it's _fast_
[23:44:37] <mfiano> Feel free to add it wherever it makes sense. I've been busy and its hard to keep track of all these places for me anyway :)
[23:45:13] <VincentVega> mfiano: Nice, I can see you took care in the declarations / inlining.
[23:45:14] <VincentVega> OK!
[23:48:23] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[23:51:06] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[23:52:02] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:52:57] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[23:54:08] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
