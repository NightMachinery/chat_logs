[00:09:55] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:dae8:1099:d49d:bb8c) (Ping timeout: 250 seconds)
[00:15:01] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:150b:5b0b:e9fd:4323)
[00:44:11] *** edgar-rft is now known as all
[00:44:21] *** all is now known as Guest5617
[00:44:46] *** Guest5617 is now known as edgar-rft
[00:57:11] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:150b:5b0b:e9fd:4323) (Ping timeout: 245 seconds)
[01:13:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[01:43:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[01:45:00] *** Joins: aeth (~aeth@user/aeth)
[02:07:58] *** Quits: sts-q (~sts-q@212.53.219.169) (Ping timeout: 252 seconds)
[02:27:00] *** Joins: sts-q (~sts-q@212.53.219.191)
[02:33:12] *** Joins: aeth_ (~aeth@user/aeth)
[02:33:13] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[02:33:17] *** aeth_ is now known as aeth
[02:58:31] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[03:08:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:57:46] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[04:00:47] *** Joins: selwyn (~selwyn@user/selwyn)
[04:31:32] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:43:14] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[05:05:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Ping timeout: 260 seconds)
[05:06:03] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[05:32:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:01:48] *** Quits: sts-q (~sts-q@212.53.219.191) (Ping timeout: 265 seconds)
[06:13:41] *** Joins: sts-q (~sts-q@91.200.108.180)
[09:15:29] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:20:38] <CodeBitCookie[m]> White_Flame: Thanks
[10:04:38] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[10:04:39] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[10:26:24] *** Joins: aeth (~aeth@user/aeth)
[10:26:24] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[10:38:54] *** Joins: makomo (~makomo@user/makomo)
[10:43:43] *** Joins: cranium (~cranium@user/cranium)
[10:50:40] *** Joins: Cymew (~ante@h-158-174-56-13.a137.corp.bahnhof.se)
[11:04:03] *** Quits: Cymew (~ante@h-158-174-56-13.a137.corp.bahnhof.se) (Remote host closed the connection)
[11:37:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:52:41] *** Joins: selwyn (~selwyn@user/selwyn)
[12:20:28] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Quit: bibi!)
[12:20:50] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[12:25:05] *** Joins: makomo (~makomo@user/makomo)
[12:48:37] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:48:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[13:07:55] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:13:20] *** Joins: ahc (~ahc@121.98.229.241)
[13:37:42] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[13:50:42] *** Joins: selwyn_ (~selwyn@user/selwyn)
[13:53:56] *** Joins: makomo (~makomo@user/makomo)
[13:54:10] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 260 seconds)
[14:15:36] *** Joins: selwyn__ (~selwyn@user/selwyn)
[14:19:22] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 260 seconds)
[14:23:55] *** Joins: random-nick (~random-ni@87.116.183.117)
[14:44:34] *** Quits: sts-q (~sts-q@91.200.108.180) (Ping timeout: 260 seconds)
[14:45:36] *** Joins: sts-q (~sts-q@91.200.108.142)
[16:07:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:15:15] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:41:28] *** Joins: fef (~thedawn@user/thedawn)
[17:19:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:30:23] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb)
[17:34:40] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[17:36:26] *** Joins: aeth (~aeth@user/aeth)
[17:38:08] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:00:20] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[18:04:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:35:40] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[18:38:11] *** Joins: thrig (~thrig@65.113.153.50)
[18:57:18] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:00:59] <lisp123> A few small questions
[19:01:56] <lisp123> (i'm trying to write a macro that uses the syntax of a DEFSTRUCT and creates a DEFCLASS - for some standard use cases)
[19:03:32] <lisp123> Is this an okay way to create an uninterned symbol (e.g. #:slot-name): (make-symbol (symbol-name slot))?
[19:06:37] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:11:39] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:12:28] <beach> lisp123: Well, it looks a bit strange.  You are calling SYMBOL-NAME with a variable named SLOT, suggesting that it is a slot rather than a symbol.
[19:12:55] <beach> Then, if you already have a slot NAME, why not just use it rather than creating a new symbol?
[19:14:14] <beach> Furthermore, there can be complications when you use an uninterned symbol for slot names.  Every time the code is read, you get a new symbol, so if you want to refer to that slot, say by inheritance, it is going to be hard.
[19:14:24] <beach> But maybe you don't need to do that.
[19:16:45] <beach> Also, the usual way of creating an uninterned symbol is by calling GENSYM.
[19:22:22] <lisp123> I see
[19:22:42] <mfiano> The usual way of creating an uninterned symbol is by typing it
[19:22:50] <lisp123> Let me try with the above pointers now
[19:22:54] <lisp123> THanks beach
[19:22:56] <mfiano> Appending a gensym counter to an uninterned symbol is a specialization
[19:28:38] <pjb> lisp123: what's wrong with my com.informatimago.common-lisp.cesarum.utility:define-structure-class ?
[19:30:45] <pjb> lisp123: https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/utility.lisp#L895
[19:31:27] <mfiano> Probably the license :)
[19:32:40] <pjb> AGPL3 let you do whatever you want with it, as long as you give the source along.
[19:33:41] <mfiano> Only 1 of the 2 freedoms.
[19:33:47] <mfiano> So can't release a proprietary game if you use it.
[19:34:02] <mfiano> Not without exposing your secret code upon request
[19:36:13] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:38:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:39:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:43:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:43:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:44:17] <lisp123> pjb: I just didn't know about it :)
[19:45:07] <lisp123> I will try creating one without looking then use yours. Is that your main utility package (what does Cesarum represent)?
[19:45:29] <mfiano> lisp123: there are many versions
[19:45:43] <mfiano> structy-defclass is another
[19:45:45] <lisp123> mfiano: Yes, I've heard the name a few times
[19:46:12] <lisp123> Cesarum that is
[19:46:47] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:59:24] <pjb> lisp123: You could fetch most of quicklisp and a few other libraries such as com.informatimago, and load them in an image, save it, and then use that saved image (which would be big, aboug 400 MB), but in which you'd have at your disposal almost all the existing CL libraries. Then looking up for something could be done with usual lisp tools, such as APROPOS and some few useful wrappers.
[19:59:55] <lisp123> Trying to understand this https://github.com/informatimago/lisp/blob/afd1acc8e170b09ae79b0ee1c4d9c1d66021472a/common-lisp/cesarum/symbol.lisp#L75
[20:00:39] <lisp123> I got an error when I didn't use INTERN, then I noticed that you also had INTERN (well documented code btw :)! So easy to follow back to it)
[20:00:49] <pjb> lisp123: for example, I have a lspack command that will lisp all packages matching a string, with their use and export lists (optionally).
[20:01:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:01:32] <pjb> string designators are characters, symbols or strings.
[20:01:44] <pjb> (string #\a) #| --> "a" |#  (string 'foo) #| --> "FOO" |#   (string "bar") #| --> "bar" |# 
[20:02:34] <pjb> so (mapcar (function string) designators) will convert all the string designators into string. Then (apply (function concatenate) 'string ...) will concatenate all those strings into a single string.
[20:02:42] <pjb> then we INTERN this string into a symbol.
[20:02:49] <lisp123> For example, I tried within my macro to construct a list with the following elements ":accessor (make-symbol (concatenate 'string ...)))" but I needed to intern that symbol for the macro to work
[20:02:54] <pjb> (scat 'foo #\- "BAR") #| --> foo-bar ; nil |# 
[20:03:54] <lisp123> pjb: "You could fetch most of ..." --> That's a good suggestion to avoid reinventing the wheel
[20:04:44] <pjb> you can use (quick-load-all) from com.informatimago.tools.quicklisp
[20:05:03] <lisp123> Thanks, will do
[20:05:07] <pjb> Then save the executable image with your implementation function.
[20:05:48] <pjb> quick-load-all will probably give some error for name collisions in the systems available in quicklisp.
[20:06:04] <pjb> use restarts to skip over incompatible systems.
[20:06:25] <pjb> hmm, there's (quick-install-all :verbose t) that will do that automatically ;-)
[20:06:47] <lisp123> That is cool!
[20:07:07] <pjb> Well, quick-install-all downloads the systems; quick-load-all loads them in the current image. Both skip over errors.
[20:08:02] <pjb> (documentation 'quick-load-all 'function) -> "Loads all the quicklisp systems, skipping over the errors."
[20:08:02] <pjb>  
[20:08:14] <pjb> We could write a function that would search also in docstrings…
[20:08:36] <pjb> Note that ql has ql-dist:system-apropos
[20:08:58] <lisp123> Nice. I'm still trying to adjust to working with Lisp, I saw a discussion earlier of 1 package per file vs. 1 package across files
[20:09:31] <lisp123> There's so many functions, so a good way to search through them is very useful
[20:11:07] <lisp123> The other question I had was should I do this (defclass IRC () ((#:chatbox :accessor IRC-chatbox ....) or :accessor chatbox? I recall a discussion earlier but I wasn't too smart back then
[20:11:18] <lisp123> I'm now leaning towards :accessor chatbox
[20:11:54] <thrig> chatbox would be more generic, if anything not-IRC gets involved, like Jabber or whatever
[20:11:57] <lisp123> Since its a generic function, so when it receives an IRC object it automatically uses the accessor associated with IRC
[20:12:24] <lisp123> thrig: Yes, that's what I'm thinking. Wanted to confirm if that's the right way
[20:12:30] <pjb> lisp123: in general, you can use normal symbols to name the slots. Just don't export them.
[20:13:15] <pjb> note you can have both  (defclass IRC () ((chatbox :accessor IRC-chatbox :accessor chatbox) …))
[20:13:46] *** Joins: makomo (~makomo@user/makomo)
[20:13:48] <lisp123> Not a bad idea (given many people like to refer to it via classname-slotname
[20:13:57] <lisp123> Which one do you prefer ;) ?
[20:14:03] <pjb> In general, I'd favor chatbox over irc-chatbox.  Because if you implement a class xmpp  with a xmpp-chatbox, you lose genericity.
[20:14:20] <lisp123> Great, I will do that
[20:14:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:14:30] <pjb> if you define the API in abstract terms such as chatbox, then your program won't have to be changed, when you change the protocol to xmpp from irc.
[20:14:46] *** Joins: makomo_ (~makomo@user/makomo)
[20:15:05] <lisp123> Yep that makes sense
[20:15:32] <pjb> On the other hand, if you have a program that deals with the wheel-of-fortune game, in which you can win car components, such as wheel, you'd want to distinguish game-wheel from car-wheel…
[20:16:09] <thrig> or cdr-wheel
[20:16:16] <lisp123> Wouldn't the specialisation take care of that? i.e. (wheel game) vs. (wheel car)
[20:16:25] <pjb> but only if you can solder a wheel-of-fortune on a car, and you have to deal with both (game-wheel game-car) and (car-wheel game-car)…
[20:16:57] <pjb> lisp123: not if you have a car with both kinds of wheels. You need to disambiguate homonyms.
[20:17:12] <lisp123> Gotcha, makes sense
[20:17:29] <pjb> but you could have: (game:wheel game-car) and (car:wheel game-car)
[20:17:46] <pjb> as long as they're distinct.
[20:17:53] <lisp123> That seems to be the best way
[20:17:59] <lisp123> Oh wait - is that possible?
[20:18:08] <lisp123> I thought generics were outside of the package system
[20:18:24] <pjb> It's possible. Beach thinks it's the best way, but I don't because I promote long-package names!
[20:18:49] <pjb>  (com.informatimago.game.wheel-of-fortune:wheel game-car) and (com.informatimago.vehicule.car:wheel game-car)
[20:19:24] <pjb> So until package local nicknames or relative package names are generalized, perhaps game-wheel and car-wheel are better?
[20:19:54] <pjb> or perhaps wheel in different pacakges is better, and you use only one package, and use qualified symbol for the other.
[20:20:00] <pjb> (com.informatimago.game.wheel-of-fortune:wheel game-car) and (wheel game-car)
[20:20:07] <lisp123> Some of your users are manually typing out com.informatimago.common-lisp.. in some sections ;)
[20:20:36] <pjb> Yes, with completion it's not that terrible.
[20:21:00] <pjb> So it's independent of generics, it's that different symbols with the same name can live in different packages.
[20:21:10] <pjb> Or the same symbol can be present in different packages. As you wish.
[20:22:24] <lisp123> Sounds good
[20:22:52] <pjb> (defpackage "FOO" (:use) (:export "FOOFOO" "BARBAR")) (defpackage "BAR" (:use) (:import-from "FOO" "FOOFOO") (:export "FOOFOO" "BARBAR")) (list (eq 'foo:foofoo 'bar:foofoo) (eq 'foo:barbar 'bar:barbar)) #| --> (t nil) |# 
[20:24:22] <lisp123> Makes sense
[20:24:27] <lisp123> Thanks!
[20:35:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[20:35:29] *** Joins: aeth (~aeth@user/aeth)
[20:35:35] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb) (Ping timeout: 246 seconds)
[20:35:42] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 250 seconds)
[20:35:49] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb)
[20:37:17] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[20:40:11] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[20:40:17] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:40:20] *** Joins: makomo_ (~makomo@user/makomo)
[20:43:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[21:10:05] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:13:17] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:13:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:39:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:40:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:41:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[21:57:08] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[21:57:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[22:07:04] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:09:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:19:45] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:22:22] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:ca92:d9c8:f6e8:70eb) (Ping timeout: 260 seconds)
[22:40:59] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:77ec:1bae:cf66:681)
[22:45:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:07:55] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:28:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:33:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[23:35:33] *** Joins: aeth (~aeth@user/aeth)
[23:35:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[23:44:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
