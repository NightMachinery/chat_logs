[00:07:46] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[00:33:53] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[00:46:04] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[01:36:20] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 256 seconds)
[01:51:24] *** Joins: derelict (~derelict@user/derelict)
[02:03:02] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[02:19:51] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:20:19] *** Joins: emacsomancer (~emacsoman@c-98-202-136-109.hsd1.ut.comcast.net)
[02:20:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[02:20:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:28:10] <[itchyjunk]> Hmmm
[02:28:20] <[itchyjunk]> You can compile only one function at a time?
[02:48:22] <aeth> You can also recompile a file
[02:51:35] <pjb> No, not necessarily.  The implementation may be restricted about it (eg. using a mutex), but (mapc (function bt:join-thread) (mapcar (lambda (form) (bt:make-thread (lambda () (compile (second form) `(lambda ,@(cddr form)))))) '((defun foo (x)(+ x 2)) (defun bar (x) (- x 1))))) #| --> (#<process Anonymous thread(108) [Reset] #x302002DF386D> #<process Anonymous thread(109) [Reset] #x302002DF30FD>) |# (list (foo 3) (bar 3)) #| --> (5 2) |# 
[02:52:40] <pjb> [itchyjunk]: but in general, functions call other functions, so you have a topological sort that avoids warning about undefined functions.  
[02:53:29] <[itchyjunk]> I guess maybe i am misunderstanding this then
[02:53:30] <[itchyjunk]> https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/
[02:53:56] <[itchyjunk]> "When you embrace the Lisp way of working you'll rarely recompile and reload an entire project. Usually you'll write a function (or a macro, or parameter, or whatever), compile just that function, maybe poke at it in the REPL a bit, and then move on to the next function."
[02:54:02] <[itchyjunk]>  i guess i independently write a function
[02:54:04] <[itchyjunk]> test it
[02:54:12] <[itchyjunk]> and only then include it in a project, is what is being said?
[02:54:57] <White_Flame> it's simpler, just about hot-compiling portions of your project without shutting down and restarting the whole thing, as most edit/compile/run cycles do
[02:55:17] <White_Flame> whether it's interactive at the repl, or in files
[02:55:49] <[itchyjunk]> is repl just a philosophy or an actual thing?:S
[02:55:57] <White_Flame> and that quoted section also covers interactive testing, as opposed to formal test suites for simple things
[02:56:21] <White_Flame> repl = Read, Eval, Print, Loop
[02:56:36] <White_Flame> it's just the interactive prompt
[02:56:55] <[itchyjunk]> ohhh that * prompt?
[02:57:26] <White_Flame> in the ultra-reductionist case, it can be literally implemented as (loop (print (eval (read))))
[02:57:42] <White_Flame> or the CL-USER> prompt, if you're in SLIME
[02:58:07] <Partmedia> [itchyjunk], so yes, you may choose to compile only one function at a time, simply by putting that (defun ...) in the REPL
[02:58:23] <White_Flame> or C-c C-c in a .lisp slime buffer
[02:58:30] <White_Flame> with the cursor on that DEFUN form
[03:00:40] <White_Flame> these sorts of things are comparisons against the development cycles of other languages, like C, Python, Java, etc
[03:00:58] <White_Flame> in those, you can't just test a function as easily.  You need to execute a program which includes a function call to it, and run that application
[03:01:09] <White_Flame> (python can sometimes do a bit of it at its prompt, but it's very neutered)
[03:01:47] <White_Flame> the ability to just write a function off the cuff and call it a few times with different parameters to see if it works is still pretty novel to Lisp
[03:01:56] <[itchyjunk]> oh i see
[03:02:25] <pjb> [itchyjunk]: see: https://groups.google.com/g/comp.lang.lisp/c/oGmha6PbAD4/m/kmpG51wjJ6gJ
[03:02:29] <[itchyjunk]> because the arguments get evaluated before the function does in LISP, i don't need to call the function to have it's argument evaluated
[03:02:36] <White_Flame> and being able to catch errors or usability issues that quickly, before it's all integrated into some larger program's calling chains, is a boon for productivity and quick error eradication
[03:02:39] <[itchyjunk]> but in some other languages, i would have to call the function to achieve this
[03:02:42] <[itchyjunk]> i think i understand
[03:03:15] <White_Flame> in other languages you would have to write a program that calls the function, then execute the program, then the program exits, then you edit, then you can re-run the whole program again, etc
[03:04:03] <White_Flame> never does the function simply "exist" in an available, immediately callable form like as in the running Lisp image, where the prompt, compiler, and your running code all coexist simultaneously
[03:04:46] <[itchyjunk]> interesting
[03:05:07] <[itchyjunk]> when you don't know much about programming, you wonder why so many languages exists
[03:05:37] <[itchyjunk]> but then you realize different languages are different ways of talking to the underlying transistors and such ( i think?)
[03:05:51] <White_Flame> as was said yesterday, if you know other languages (especially if only 1 of them), it's harder to learn Lisp because of those baked-in assumptions you come with.  These texts have to work hard against those
[03:06:05] <White_Flame> yep
[03:06:17] <White_Flame> and many languages were created just to get certain projects up and running
[03:06:28] <White_Flame> and grew from there into avenues they really weren't designed for
[03:07:10] <White_Flame> many languages were intended to be very low level, to be able to run simple things under the resource constraints of old hardware, and that means lots of hoops to jump around for the developer
[03:08:56] <pjb> [itchyjunk]: since the errors are caught at run-time, and the debugger and compiler are available at run-time, you can write partial code, and wait for an error to be signaled before implementing what needs to be implemented.  This let you do top-down programming interactively.
[03:09:57] <[itchyjunk]> ah
[03:10:42] <[itchyjunk]> also a risk of not knowing your code has an error till it occurs no? if its a program that checking everything when compiling, yuo'ed know before the code runs?
[03:10:52] <[itchyjunk]> sounds like a double edged sword
[03:11:33] <White_Flame> it can never check "everything" statically, only some things
[03:11:38] <pjb> [itchyjunk]: since you should write unit tests with 100% coverage anyways, you will know.
[03:12:23] <White_Flame> and implementations like SBCL do static analysis on types, based on what operations are used, and can catch some type problems at compile-time as well
[03:15:21] <pjb> Yes, you still get warnings from the compilers. But at least, running partial code is _possible_  and _doesn't_ _crash_.
[03:15:58] <[itchyjunk]> hmm writing more code to test your code. that's what unit test is right?
[03:15:58] <pjb> With most languages such as C, it is not possible to run partial code, and if you trick the compiler (eg. using shared libraries or plug-ins), you will crash.
[03:16:02] <White_Flame> "doesn't crash" as in you don't trash your runtime and need to restart.  Obviously it raises a signal and unwinds
[03:16:34] <pjb> It signals a condition that, if not handled by the program, will be handled by calling invoke-debugger.
[03:17:05] <White_Flame> unhandled signals/exceptions/conditions/etc tend to be called a "crash"
[03:17:06] <pjb> Perfectly defined and conforing, as long as you don't compile with (safety 0)…
[03:17:18] <[itchyjunk]> yeah i've seen that and was confused. [0] continue [1] abort or whatever menu that pops up 
[03:17:19] <White_Flame> especially if unexpected
[03:17:26] <pjb> White_Flame: not in lisp. In lisp, they're called debugger invocations.
[03:18:49] <White_Flame> in formal spec terms, sure.  in terms of userbase, not really
[03:19:09] <White_Flame> and especially in a learning environment trying to communicate concepts that people come in with
[03:20:15] <Partmedia> (heh, a lot more is involved with "talking to the transistors," but I digress)
[03:20:45] <White_Flame> yep, the transistors are already arranged and exposed into an ISA ;)
[03:23:02] <Partmedia> (and it's more of "transistors executing your program" rather than "program talking to transistors" :p)
[03:23:19] <White_Flame> right, was just going to say that a CPU is a hardware emulator for a bytecode
[03:23:45] <Partmedia> a bytecode that looks suspiciously like assembly
[03:23:54] <White_Flame> well, which literally is the machine code
[03:24:00] * Partmedia plonks down a Lisp Machine
[03:24:02] <White_Flame> every machine language is an abstract spec
[03:24:56] <White_Flame> and on microcoded architectures, a few layers there
[03:25:00] <Partmedia> (technically, "machine code" is another abstract spec that is implemented using microcode instructions on an underlying hardware datapth controller)
[03:27:08] <White_Flame> and even in FPGAs, there's hardwired multiplexers whose RAM slots are programmed, it's still not programmable transistors
[03:27:39] <Partmedia> (^LUT's)
[03:27:44] <White_Flame> yep
[03:28:17] <[itchyjunk]> what is ISA?
[03:28:48] <Partmedia> (starting to get a little off-topic for a lisp channel, but "Instruction Set Architecture", a specification for how to make executable instructions for a family of CPU's)
[03:29:35] <[itchyjunk]> What channel would discuss things like this?
[03:29:41] * Partmedia has no idea...
[03:29:53] <[itchyjunk]> I was curious about FPGA's too
[03:29:57] * Partmedia thought software people didn't do hardware :p
[03:30:08] <[itchyjunk]> I am neither a software or a hardware person :D
[03:30:19] <Partmedia> FIRMWARE? :p
[03:31:00] <[itchyjunk]> Hmm i don't think i even know what that is. my mp3 players used to come with firmware i know
[03:31:15] <[itchyjunk]> but i assume its an OS like that that talks to hardware soemhow
[03:33:18] <White_Flame> ISA = Instruction Set Architecture, which is the machine code byte spec that a CPU runs
[03:33:20] <Partmedia> approximately, that's pretty close
[03:33:26] <White_Flame> oh, sorry, scrolled back
[03:33:26] <Partmedia> (on the firmware)
[03:34:02] <White_Flame> it's not really an OS, it's a hardware machine that runs the machine code instructions
[03:34:50] <Partmedia> (it's the firmware that does OS-like things)
[03:35:32] <[itchyjunk]> I am googling and looks like what i thought of as assembly is actually machine code? I've seen those jmp and other special instruction set hadware comes with that lets it talk to err transistors and stuff? 
[03:35:56] <White_Flame> assembly language is the textual format, the machine code is the bytes
[03:36:17] <Partmedia> but for all practical purposes, they mean the same thing
[03:36:19] <White_Flame> assemblers turn the former into the latter
[03:36:41] <White_Flame> yes, usually a 1-to-1 correspondence between assembly instruction and machine code instruction, with some macros and such
[03:36:49] <White_Flame> that's the difference between a low-level language, and a high level one
[03:37:17] <[itchyjunk]> hmmm when you say bytes, what does it mean?
[03:38:27] <Partmedia> [itchyjunk], at some point, the CPU needs to load a sequence of instructions (in the form of binary-coded 0's and 1's) into memory to execute them. These 'bytes' are just the instructions encoded in binary form
[03:38:28] <White_Flame> the bytes stored in RAM that is the code which the CPU reads and executes
[03:39:06] <White_Flame> code & data are all stored in RAM.  different bytes mean different things in different contexts
[03:39:20] <[itchyjunk]> ahh this makes sense
[03:39:27] <White_Flame> compilers generate streams of bytes that the CPU can sensibly execute
[03:40:06] *** Joins: emacsoma1 (~emacsoman@136.60.128.68)
[03:40:19] <White_Flame> the CPU has a "program counter" which is which byte in RAM it's currently executing
[03:40:26] <White_Flame> *the address of the byte
[03:40:34] <Partmedia> and to bring it back to lisp, typing at the REPL in most implementations is actually typing at a running program that translates what you type into machine code and storing them
[03:42:12] *** Quits: emacsomancer (~emacsoman@c-98-202-136-109.hsd1.ut.comcast.net) (Ping timeout: 276 seconds)
[03:42:59] <White_Flame> Read = convert input bytes, into characters, into lisp objects (lists, symbols, numbers, etc)
[03:43:16] <White_Flame> Eval = if code is involved, compile it to machine code, execute it
[03:43:21] <White_Flame> Print, Loop = self explanatory
[03:44:33] <[itchyjunk]> wait input bytes into lisp objects? Doesn't it go from lisp objects -> bytes?
[03:45:19] <White_Flame> when you read characters from the OS, from a file or terminal or socket (slime) etc, it receives a stream of bytes
[03:45:38] <White_Flame> those bytes are an encoding of utf-8 or ASCII or whatever, which Lisp then normalizes into its internal characters
[03:46:01] <[itchyjunk]> ahh
[03:46:11] <White_Flame> those characters are then sort of like the string "(+ 1 2)", which the Reader parses into the list (+ 1 2)
[03:46:16] <[itchyjunk]> Huh, had never thought of Cpu talking back..
[03:46:30] <White_Flame> the CPU perform both reads _and_ writes! ;)
[03:47:43] <Partmedia> [itchyjunk], bytes do eventually come out, there are just some steps in between (one of them is input characters -> lisp objects)
[03:47:56] <[itchyjunk]> Does the reader use quote and other special operators in a programming language to do that? or a different way?
[03:49:48] <Partmedia> the reader needs to be able to understand quotes and other special characters to read your lisp correctly; the reader is otherwise just another computer program
[03:49:50] <White_Flame> the reader classifies different characters as constituents, escapes, etc, and that puts it into different states to trigger changes or establish the length of each lexical token
[03:51:06] <White_Flame> and the programming language that the reader is written in is called Lisp :-P
[03:51:19] <[itchyjunk]> ah, lol
[03:52:04] <White_Flame> https://github.com/sbcl/sbcl/blob/master/src/code/reader.lisp
[03:53:01] <Partmedia> (of course, there's no restriction that the reader has to be written in lisp, it just so happens that Lisp is a convenient language to write the reader in...)
[03:53:38] <White_Flame> and since the reader is reconfigurable through Lisp, it needs to be interfacable by it anyway
[03:53:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[03:54:03] <random-nick> also, some basic pieces of syntax like ( are defined in the standard to be reader macros
[03:54:32] <Partmedia> (so you would have to implement those reader macros anyway, might was well use a reasonable language to do it with)
[04:01:26] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:34:03] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[05:05:32] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 252 seconds)
[05:18:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[05:33:33] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[05:40:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:56:27] *** Quits: sts-q (~sts-q@91.200.108.177) (Ping timeout: 265 seconds)
[07:09:31] *** Joins: sts-q (~sts-q@212.53.219.185)
[07:18:42] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[07:33:12] <beach> Good morning everyone! 
[07:33:27] <[itchyjunk]> hi
[07:33:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[07:35:05] *** Joins: derelict (~derelict@user/derelict)
[07:36:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[07:51:46] *** Quits: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6) (Read error: Connection reset by peer)
[07:52:01] *** Joins: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6)
[08:12:12] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[08:13:11] *** Joins: Harag (~user@105.243.9.173)
[08:13:20] <Harag> Good Morning
[08:13:58] <Harag> I am seeing a lot of this type of warning in sbcl: cl-fad.asd" contains definition for system "cl-fad-test". Please only define "cl-fad" and secondary systems with a name starting with "cl-fad/" (e.g. "cl-fad/test") in that file.
[08:14:32] <beach> I think it's a new-ish convention established by ASDF.
[08:15:07] <Harag> pffft
[08:16:41] <Harag> Does there docs not say / or . is ok?
[08:17:09] <Harag> their
[08:23:09] <beach> I don't know.  I personally define a single system in each file.
[08:28:00] <Harag> Ok so it only complains when you have multiple systems in one .asd file
[08:28:41] <beach> Yes, and when one such system does not have the same name as the file and does not follow that convention. 
[08:30:00] <aeth> almost always just for tests
[08:32:20] <Harag> It only seems to complain about the second system definition in the file not the rest, if I look at hunchentoot.asd
[08:32:32] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[09:39:35] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[09:51:54] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[09:57:44] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Read error: Connection reset by peer)
[09:57:55] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[10:09:57] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[10:10:11] <st_iron> good morning
[10:10:30] <beach> Hello st_iron.
[10:16:50] <rain3> ''morning
[10:17:16] <beach> Hello rain3.
[10:23:18] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[10:23:36] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[10:42:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[10:44:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[11:00:27] <rain3> jackdaniel: I made the transcript, as you recommended https://www.cliki.net/Filtered%20Functions . More experienced lispers are welcome to correct it and show more examples and techniques
[11:03:10] <beach> For starters, you should have 3 semicolons with top-level comments.
[11:03:49] <beach> http://www.lispworks.com/documentation/HyperSpec/Body/02_ddb.htm
[11:04:38] <beach> Then, I recommend you use with-accessors rather than with-slots.  Slots are implementation details and it is best to refer to implementation details as little as possible.
[11:06:11] <beach> And instead of (= n 0) (< n 0) (> n 0) I recommend zerop, minusp, plusp.  The general rule in programming is to use the most specific constructs that will do the job.
[11:06:36] <beach> Similarly, (- n 1) is better expressed as (1- n).
[11:07:45] <beach> But, there is even more specific for the sign, namely SIGNUM.
[11:08:58] <beach> WHEN should be used only in a context where the value is not needed.  
[11:09:31] <beach> It looks to me like (when (oddp n) t) should rather be just (oddp n), no?
[11:11:09] <beach> For stack-pop, you could use prog1 to avoid a temporary variable.
[11:11:52] <beach> Usually, you would write #'sign rather than (function sign).
[11:12:31] <beach> That's all I see for now.
[11:22:51] <beach> rain3: Are you still here?
[11:29:26] <beach> Oh, well.
[11:29:43] <rain3> back
[11:29:55] <beach> Ah, OK.
[11:30:35] <rain3> Thanks I'll make the corrections
[11:32:07] *** Joins: selwyn (~selwyn@user/selwyn)
[11:33:06] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:02:05] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[12:07:13] <pjb> #' has 10 spikes! be careful.  I prefer the chubby clouds of (function x)…
[12:07:31] <pjb> ;-)
[12:08:27] <pjb> (when (oddp n) t) would be justified if you wanted to ensure a boolean, since oddp returns a generalized boolean.
[12:10:08] <beach> No, then (if (oddp n) t nil) should be used.
[12:10:22] <pjb> But otherwise, yes, you can work with generalized boolean in general, so just (oddp n).
[12:11:47] <beach> So I guess you don't much like things like (let ('3 #'4) (+ (+ . '5) (+ . #'6))) :)
[12:11:56] <rain3> can someone add this css property white-space: pre-wrap;   to <pre> tags https://www.cliki.net/static/css/style.css  so that long lines need not go far off to the right?
[12:11:58] <pjb> :-)
[12:13:10] <pjb> and FUNCTION is the only operator that creates closures, so it's very important.  I don't think it should be abbreviated.
[12:30:49] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:33:52] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[12:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:38] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[13:57:58] <rain3> I am trying to make sense of software architecture https://pastebin.com/L283Ep9e  insights are welcome 
[13:58:33] <rain3> looks like pastebin broke the indentation for a few lines
[13:58:51] *** Joins: makomo (~makomo@user/makomo)
[13:59:01] <beach> It happens when you use TAB characters.
[14:00:26] * rain3 M-x untabify
[14:05:06] <rain3> https://justpaste.it/8qa9y this site allows one to edit and correct the snippet , but it doesn't have syntax highlighting
[14:10:27] <beach> I would help you out, but this software has three signals that make me not want to touch it, namely "js", "html" and "sql".
[14:12:00] <rain3> they can all safely be ignored in the discussion
[14:12:08] <rain3> actually I will remove them, for simplicity
[14:20:36] <beach> I am off for a lunch break.  I see "observer pattern" mentioned, and it is usually not needed in Common Lisp because of auxiliary methods.
[14:21:21] <rain3> enjoy the lunch
[14:22:21] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[14:22:40] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:46:40] <rain3> beach: weblocks can abstract away (a substantial part of) the browser<->lisp gap so that one can do the GUI architecture and the logic on the lisp side rather than the browser(javascript) side https://40ants.com/weblocks/quickstart.html#the-task-widget  so far one can make independent interactive components/gadgets with it , so what's left is to make a good architecture in which gadgets know about each other and react properly 
[14:46:41] <rain3> to events
[14:47:33] <rain3> the obvious solution that came to my mind, is to make a clim backend that uses weblocks, so that one can do webapps with clim directly, but I don't know if it is easy or possible
[15:41:39] *** Joins: shka (~herr@109.231.62.239)
[15:44:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:47:38] *** Joins: treflip (~user@95.79.32.99)
[16:11:27] <pjb> rain3: justpaste.it seems to be horrible. it doesn't have a raw mode, and it inserts &nbsp; for the indent…  Use http://termbin.com
[16:13:34] <pjb> rain3: yes, the observer pattern seems to be clearer.
[16:14:32] <rain3> "The basic idea is that the computer should behave differently depending on the situation– for example, if the computer “knew” the user was angry due to heart rate, etc. then it should maybe not do certain things. He noted that you can implement this sort of thing naively by having lots of if-then blocks everywhere. That’s no fun, though. Then he made what I thought was a bombshell of a point: Model-View-Con
[16:14:32] <rain3> troller spreads code dealing with a single object’s behavior and spreads it all over the system. (He had a slide showning a UML diagram raging out of control.) He said the original idea of OOP was that behavior is defined just in the class where it belongs. With behavior spread all over the object model, objects no longer “know” how to behave!
[16:14:33] <rain3> Here’s how Costanza makes that point in his paper: “Among prominent domains to motivate object-oriented programming, graphics and people are the most widely used examples. A reason for their popularity is the fact that one can easily introduce the idea that objects know how to behave, that is how to react to messages…. However, when programs become more complex, the code for displaying objects is usually not contain
[16:14:38] <rain3> ed in the classes to be displayed because there is a need to have different views on the same objects, often at the same time. Therefore, such code is separated into view objects that need to be notified of changes to model objects (such as instances of Rectangle or Person), leading to variants of the well-known Model-View-Controller (MVC) framework originally introduced with Smalltalk. Unfortunately, this distribution of 
[16:14:43] <rain3> responsibilities that conceptually belong to a single object complicates the original simplicity of the object-oriented paradigm. For this reason, some more recent object systems like Self and Squeak have even changed their frameworks for presenting objects on the screen back to the original idea that objects maintain their own knowledge about how to display themselves. However, with that they lose the desired property to offer 
[16:14:48] <rain3> different views of the same objects. ContextL provides an alternative approach that both keeps the conceptual simplicity that all of an object’s behavior is indeed associated with that object and still allows an object to be viewed in different ways depending on the context.”"
[16:15:29] <rain3> so now I am wondering if something better can be made using https://github.com/pcostanza/contextl 
[16:15:31] <pjb> rain3: however, in this case, you don't have just the objects talking between them. They are actually meta-object, since they're generating javascript objects. 
[16:15:54] <pjb> So I'm not sure you need to establish this pattern between them.  
[16:16:06] <rain3> they are clos objects which just get rendered as html
[16:16:22] <pjb> Also, you may have a confusion between server-side lisp object, and the lisp metaobjects that generate the client-side javascript objects.
[16:17:06] <pjb> Clearly you want client-side javascript objects to send messages to server-side lisp objects ("connect", "disconnect", etc). 
[16:17:11] <rain3> it's just that the events (such as click) cannot receive lisp objects as parameters, but only dumb data such as strings, numbers etc which javascript understands
[16:17:41] <pjb> So the architecture cannot be reduced to a single pattern, you need to think about it more comprehensively. 
[16:18:03] <pjb> with choices on the protocols used, the server architecture, the management of sessions, etc.
[16:19:03] <pjb> eg. the dumb data could represent a proxy object.
[16:40:04] <rain3> the management of sessions , methods for html rendering etc is handled by weblocks already
[16:42:38] <rain3> it also updates them in real time, when calling (update clos-obj) 
[16:45:58] <rain3> in this story, as far as the javascript/the browser is concerned all that we care about is that it fires an event on the clos object itself (this is handled by webblocks and works well already so we can take them out of the discussion and only focus about ways to let clos objects know about each other's events in the most flexible way)
[16:59:49] <beach> rain3: The term "CLOS object" is meaningless.  Every Common Lisp object, even an integer or a character, is an instance of a class, and classes are concepts that CLOS brought to Common Lisp, so every Common Lisp object is a "CLOS object". 
[17:00:33] <rain3> right
[17:01:09] <rain3> s/CLOS object/lisp object/g
[17:15:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:21:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[17:40:15] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[17:53:55] *** Joins: makomo (~makomo@user/makomo)
[18:16:17] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:16:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:26:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:39:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:07:41] *** Joins: dlowe (~dlowe@user/dlowe)
[19:16:22] *** Joins: selwyn (~selwyn@user/selwyn)
[19:16:37] *** Joins: Josh_2 (~user@37.25.47.130)
[19:16:37] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[19:17:02] *** Joins: selwyn (~selwyn@user/selwyn)
[19:29:29] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:29:51] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 268 seconds)
[19:29:53] *** Joins: selwyn (~selwyn@user/selwyn)
[19:31:08] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[19:31:14] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[19:38:42] *** Joins: thrig (~thrig@65.113.153.50)
[19:45:17] *** Joins: dlowe (~dlowe@user/dlowe)
[19:52:15] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[20:08:26] *** Joins: selwyn (~selwyn@user/selwyn)
[20:09:48] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:10:19] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[20:10:39] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:10:39] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[20:12:44] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:12:59] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 265 seconds)
[20:13:08] *** Quits: JoshYoshi (~user@37.25.47.130) (Client Quit)
[20:13:28] *** Joins: Josh_2 (~user@37.25.47.130)
[20:35:36] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[20:35:55] *** Joins: Josh_2 (~user@37.25.47.130)
[20:44:48] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[21:19:45] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[21:19:49] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:04:57] *** Joins: derelict (~derelict@user/derelict)
[22:09:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[22:29:16] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:30:45] *** Joins: selwyn (~selwyn@user/selwyn)
[22:47:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:52:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:55:59] *** Quits: zagura (~zagura@user/zagura) (Quit: Reconnecting)
[22:56:06] *** Joins: zagura (~zagura@user/zagura)
[23:22:36] *** Joins: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca)
[23:25:09] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:28:25] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[23:42:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[23:47:26] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:51:38] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[23:53:06] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Ping timeout: 256 seconds)
