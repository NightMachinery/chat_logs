[00:08:17] <Harag> pjb: out of curiosity could you (at some time) add the .yml file to one of your own projects and see if it allows you to use the docker image in sbcl-docker-gitlab-ci directly.
[00:09:12] <pjb> Definitely!
[02:05:36] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[02:10:14] *** Joins: selwyn (~selwyn@user/selwyn)
[02:23:36] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:26:56] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[02:58:36] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[03:18:33] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:49:16] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[04:08:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:36:37] *** Joins: derelict (~derelict@user/derelict)
[05:18:29] *** Quits: random-nick (~random-ni@87.116.177.254) (Ping timeout: 258 seconds)
[06:20:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[07:29:52] *** Quits: sts-q (~sts-q@91.200.108.135) (Ping timeout: 272 seconds)
[07:31:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Read error: Connection reset by peer)
[07:34:04] *** Joins: sts-q (~sts-q@91.200.108.207)
[07:37:33] <beach> Good morning everyone! 
[07:38:44] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[07:47:59] *** Joins: beach` (~user@2a01:cb19:150:3400:8499:31f5:d834:225d)
[07:52:19] *** Quits: beach (~user@2a01:cb19:150:3400:a1fa:cc82:d570:b580) (Ping timeout: 268 seconds)
[07:52:30] *** beach` is now known as beach
[07:52:39] *** ChanServ sets mode: +o beach
[07:56:25] *** beach sets mode: -o beach
[08:20:16] *** Joins: aeth_ (~aeth@user/aeth)
[08:32:40] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[08:33:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[08:37:20] <Harag> Good morning
[08:39:12] <beach> Hello Harag.
[09:04:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[09:04:24] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:05:42] <Harag> Hi beach, how is sicl going I have been so busy I have not had a chance to read the logs in the last 4 months.
[09:17:41] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 258 seconds)
[09:19:43] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:30:13] *** Joins: fef (~thedawn@user/thedawn)
[09:38:30] <beach> Harag: Sorry, I was away for my daily physical exercise.
[09:38:43] <beach> SICL is making steady progress, but it's slow. 
[09:39:36] <beach> Register allocation is finished, or nearly so.  The disassembler is being worked on.  Code generation is next, but it should be trivial now that register allocation is done.
[09:40:02] <beach> There are still several bootstrapping issues that I am the only one who can deal with, so progress is as slow as I am. :)
[09:43:30] <Harag> Well steady wins the race!
[09:43:53] <beach> I hope so, yes.
[09:55:03] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[10:05:12] *** Quits: aeth (~Michael@user/aeth) (Quit: ...)
[10:20:25] *** Joins: aeth (~aeth@user/aeth)
[10:23:53] *** Parts: fef (~thedawn@user/thedawn) (Leaving)
[10:35:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[10:39:05] *** Joins: aeth (~aeth@user/aeth)
[11:00:01] <Harag> beach: dont you find that you get stuck/delayed on some finer details some times but that getting them right early accelerates development later?
[11:00:38] <Harag> in sicl's case there is just a lot of those finer details that matter I think
[11:03:24] <Harag> that reminds me how far did you get on your implementing lisp talks? I am behind on those as well.
[11:13:06] <beach> Hard to say.  What I do find is that I make many major design mistakes along the way, but when I look back, there was no way I could have predicted that they were mistakes.  So I have no regrets, but it slows down progress a lot.
[11:13:37] <beach> I haven't done the final talk about implementing Common Lisp yet.  I am waiting to see how the last phases of bootstrapping turn out.
[11:20:28] <Harag> I would bet that some of those "mistakes" where not mistakes but end up being incompatible with the inevitable progression of a design as you tame a beast of this size
[11:22:34] <beach> That's one way of putting it, yes.
[11:26:28] <beach> But I am amused when I think of some of my theoretician colleagues, who still believe that the waterfall model is the answer, and that you can do all the design up front before starting to write code.
[11:28:51] <beach> I retire in a bit more than 7 months, so I can start telling the truth about the incompetence in some of my colleagues, when it comes to practical experience of software development, and the consequences on their teaching and decisions related to both teaching and research. 
[11:29:35] <beach> Not that we are unique in any way.  It is the same all over the world in computer science and software engineering.
[11:31:24] <Harag> In South Africa we have a saying: "Those that can do and those that cant teach."
[11:32:02] <beach> That's a common saying elsewhere too.
[11:32:06] <Harag> ok
[11:33:23] <beach> That's not what's going on here though.  The problem is that teaching and research staff is hired from people with recent PhDs, so they haven't really had any experience with software development, other than perhaps to show some research result in their dissertations. 
[11:34:18] <beach> So they can do many things, like the research in their specialty domains, but they can't teach software development, and they can't develop quality software.
[11:34:45] <Harag> Well maybe next time you chat to them about the waterfall model draw a comparison to the development of a theory in science, there is the theory then there is research to prove it, the theory gets refined and more research etc until you get to the gold
[11:35:23] <beach> Sure, but they also don't understand science.  They are basically mathematicians. 
[11:35:30] <Harag> roflmao
[11:35:35] <beach> No, it's true.
[11:35:59] <beach> Science works very differently from math and CS (despite "science" in its name).
[11:39:26] <beach> Personally, I was first trained as an engineer (electronics) with lots of physics and related scientific subjects like electricity.  Then I did an engineering degree in computer science and engineering, with lots of hardware subjects in addition to more physics, electronics, etc.  It was not until my PhD that I became a pure CS person.
[11:40:43] <beach> I also worked in industry for a few years as a developer and later manager.  Plus I moved around a lot.  I have lived in 5 countries on 4 continents. 
[11:41:13] <Harag> I was about to say that maybe they should move the cs department to engineering instead...
[11:41:14] <beach> So I have a lot more experience than a theoretician colleague who did CS as an undergraduate, masters, and PhD and was then hired.
[11:41:40] <beach> Well, engineering does not apply to software development either.
[11:41:40] <Harag> yes nothing beats experience, but a sound grounding in theory helps
[11:42:40] <beach> Engineering depends on the majority of the cost of any project being production, like pouring concrete and such.  So the productivity in the design phase doesn't matter, since the cost is dwarfed by the production.
[11:43:02] <beach> Software development is pure design, and engineers don't know how to deal with that.
[11:44:03] <beach> So the name "software engineering" is an aberration, just like "computer science". 
[11:44:29] <beach> Software is like nothing else.  Not like science and not like engineering. 
[11:44:51] <Harag> Hehehe well then a creative designs department is needed...
[11:45:02] *** Joins: selwyn (~selwyn@user/selwyn)
[11:45:04] <beach> Maybe so, yes.
[11:45:29] <beach> And that's a large part of the problem, because it means that we have very few experienced people who can make the right decisions, both in academia and in industry. 
[11:46:01] <beach> People who work in industry have insufficient basic training, and people in academia have insufficient practice. 
[11:46:42] <Harag> Now you are touching a subject dear to my heart! Some "personality types" should not be allowed to be programmers.
[11:46:59] <beach> That sounds plausible.
[11:48:42] <beach> One of my favorite stories is when I consulted for a medium-sized company with a product written in C++ that they weren't able to get sufficiently bug free to release.  The two project leaders, both with masters degrees refused to accept my suggestion to use the Boehm GC (all their bugs were memory allocation bugs) with the motivation that "programmers have a moral responsibility to clean up after themselves, so what they allocate, the
[11:48:42] <beach> should free".
[11:49:33] <beach> I mean, this shows that a masters degree in CS or SE is totally insufficient for someone to become a project leader in industry.
[11:50:17] <beach> But then, there are no more advanced degrees available that could fix that problem.
[11:50:31] <beach> All PhD subjects are specialized research projects. 
[11:51:11] <Harag> People should work for a startup first before they go corporate, it teaches you the value of what is "good enough" and any body or thing that can help is worth a try
[11:51:34] <beach> Interesting idea.
[11:52:36] <Harag> Regarding my comment about personalities. I see two types: a 9 to 5 person, they hate learning new tech and is happy with doing it the same way for the next 50 years. A true programmer in my mind strives for the beauty of the design as well, they get their kicks out of the creation and cant wait to learn new stuff.
[11:53:11] <mfiano> I have seen some talks about Rust's automatic freeing at the end of block scope was too slow for large objects/certain application domains, and so they decided to run the freeing on a non-blocking thread, of course, running into other bugs.
[11:54:10] <mfiano> This is one area where automatic memory management is often times faster than "low level/systems programming languages"
[11:54:36] <mfiano> both performance wise and productivity wise of course
[11:55:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:58:10] <beach> Harag: Yes, that's what Carol Dweck calls the open/closed mindset.  An open mindset is an absolute necessity in software development. 
[11:58:47] <beach> mfiano: I totally agree.
[12:00:22] <beach> mfiano: And, as I often point out, large projects in C++ and other languages with manual memory management often run into modularity issues, and the way they "solve" those issues is to use smart pointers and reference counters.
[12:00:42] <beach> So now, they also have slow code, in addition to code with modularity problems. 
[12:01:13] <beach> But they are convinced that it's as fast as it can be because "everybody knows that the C++ compiler generates fast code".
[12:02:44] <mfiano> I am not a professional programmer usually (contractor), and have learned the hard way that programming for "ultimate performance" is a waste of time. For a year or two, I was very insistent on almost always using structs/regular type-annotated functions, etc in Common Lisp, over a generic/extensible protocol for a slight degradation (usually immeasurable).
[12:03:26] <beach> I can see that.
[12:05:21] <Harag> The other thing that happens is that a lot of good programmers move into management in their mid 30's because its the only way to advance "pay wise", which is a majour loss to the world at large keeping them in the trenches would cut down on reinventing the wheel and be a big productivity gain for the teams
[12:05:23] <mfiano> Writing CL like C can be done, at varying levels of granularity depending on implementation support, and it is almost always not worth it, even when staying within the bounds of conforming code as with structs etc, because it always directly conflicts with Lisp's primary strength: interactivity.
[12:06:09] <mfiano> and it is that interactivity that enables me to get work done that would otherwise take me too much time in other languages.
[12:06:14] <beach> Harag: Yes, though serious companies have a parallel career ladder called "expert". 
[12:06:16] <mfiano> So I gave up on that front :)
[12:06:50] <beach> mfiano: Good choice! :)
[12:08:08] <Harag> beach: maybe there has been a shift out there in the world but in south africa finding a programmer in the trenches over 30 years of age is rare!
[12:08:45] <beach> mfiano: I think that attitude is common with newbies.  They tend to want optimal performance from the start, but only in terms of micro optimizations.  They are usually totally incompetent when it comes to designing algorithms and data structures.
[12:09:11] <mfiano> beach: I completely agree.
[12:09:14] <beach> Harag: I haven't kept up myself for several decades, so I don't know.
[12:09:46] <Harag> beach: what are algorithms and data structures ... :P
[12:09:53] <beach> Heh.
[12:09:54] <Harag> hehe
[12:12:26] <Harag> mfiano: I went from objects to structs to plists...
[12:12:42] <mfiano> Everything is an object
[12:13:00] <Harag> ok classes - structs - plists
[12:13:09] <mfiano> structs are also classes :)
[12:13:18] <Harag> pffft
[12:13:38] <mfiano> They just have a different metadata class than standard-objects
[12:13:41] <mfiano> err metaclass
[12:16:07] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:19:53] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[12:21:11] <beach> Sort of! :)
[12:22:06] <Harag> As usual I am lacking in words... and I have a two year old that is trying to help me type... gonna take a break 
[12:22:16] <mfiano> Well, STRUCTURE-OBJECT's are instances of STRUCTURE-CLASS's, and STANDARD-OBJECT's are instance or STANDARD-CLASS's
[12:22:57] <beach> "or"?
[12:23:06] <mfiano> Hmm?
[12:23:19] <mfiano> Oh, "of"
[12:24:16] <mfiano> Yeah, a bit late and making two many typos. Time for a break I think.
[12:24:27] <mfiano> Oh jeez. I did not mean that one
[12:24:37] <beach> Well, when we say "an X" or "X's" we mean "an instance of X" or "instances of X", like "a person" is an instance of the class "person".
[12:25:17] <beach> So STRUCTURE-OBJECT's are instances of STRUCTURE-OBJECT and STANDARD-OBJECT's are instances of STANDARD-OBJECT.
[12:25:21] <beach> However...
[12:25:50] <beach> The class STRUCTURE-OBJECT is an instance of the class STRUCTURE-CLASS.
[12:26:14] <mfiano> That is totally true and I knew that. I really think my fingers are behaving out of phase with my brain or something.
[12:26:28] <mfiano> Night, and nice chat.
[12:26:36] <beach> Heh, that happens.  Especially when one gets into the metaclass territory. 
[12:26:41] <beach> 'night.
[12:36:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:46:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:49:17] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[12:50:42] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Ping timeout: 265 seconds)
[12:59:14] *** Quits: aeth_ (~aeth@user/aeth) (Quit: ...)
[13:07:37] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:11:00] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[13:18:53] *** Quits: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net) (*.net *.split)
[13:19:38] *** Joins: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net)
[13:25:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:29:01] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:01:00] *** Joins: trocado (~trocado@188.83.243.251)
[14:42:50] *** Quits: trocado (~trocado@188.83.243.251) (Ping timeout: 252 seconds)
[14:51:49] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[15:05:16] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[15:15:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:37:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[15:38:35] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:40:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:52:52] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:16:22] *** Joins: derelict (~derelict@user/derelict)
[16:20:42] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:24:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[16:53:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[17:50:14] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[18:46:56] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[18:48:55] *** Joins: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de)
[19:20:46] *** Joins: thrig (~thrig@70.97.65.230)
[19:30:16] *** Quits: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[19:32:07] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[19:46:13] *** Joins: fef (~thedawn@user/thedawn)
[19:49:29] *** Joins: selwyn (~selwyn@user/selwyn)
[20:28:11] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:04:32] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[21:07:34] *** Quits: thrig (~thrig@70.97.65.230) (Remote host closed the connection)
[21:13:01] <Harag> I got gitlab CI working last night for my lisp projects, and I must say it gives me a warm fuzzy feeling to see the green passed label appear against commits to master without any effort on my side
[21:18:27] *** Joins: selwyn (~selwyn@user/selwyn)
[21:32:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:25:03] <pjb> Now, remains to write tests.
[22:25:43] <Harag> Well wrote tests for a test framework today, its kind of freaky
[22:26:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[22:28:46] <pjb> :-)
[22:32:50] *** Joins: selwyn (~selwyn@user/selwyn)
[22:36:30] <Harag> I cheated of course ... I used the test framework to test it self
[22:51:20] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[22:53:20] *** Joins: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de)
[23:09:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:09:53] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[23:11:41] <pjb> Harag: note: this may not detect all bugs.  Ie. if there's a bug in the test framework that makes it not detect a failure, then it may not detect the failure in itself, and therefore you may believe it's all good.
[23:19:24] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[23:19:37] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[23:24:05] <Harag> yes I am aware of the possibility but have a look I think I covered all the bases, I think its the design of the framework that makes it possible
[23:24:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:32:56] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[23:42:29] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[23:45:57] *** Quits: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de) (Ping timeout: 268 seconds)
[23:47:30] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
