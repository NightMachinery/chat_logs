[00:00:43] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[00:01:25] *** Joins: mimmy (~mimmy@146.70.75.190)
[00:08:40] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[00:09:00] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[00:13:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:14:01] *** Quits: [SyntaxError] (~user@user/syntaxerror/x-9308191) (Quit: see you soon)
[00:14:30] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[00:14:31] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:14:36] *** Quits: Chucky (~irc@user/pronhub) (Quit: Chucky)
[00:14:39] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[00:16:00] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:16:00] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[00:18:07] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[00:23:23] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[00:26:37] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[00:28:05] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[00:28:59] *** Quits: AmR (~AmREiSa@41.36.24.35) (Quit: Konversation terminated!)
[00:29:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[00:31:29] *** Joins: pulse (~pulse@user/pulse)
[00:33:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:31] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[00:37:12] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Remote host closed the connection)
[00:44:06] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[00:45:39] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[00:45:42] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[00:46:06] *** Joins: sm2n (~sm2n@user/sm2n)
[00:50:38] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[00:52:58] *** Joins: AmR (~AmREiSa@41.36.24.35)
[00:53:52] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:55:59] *** Parts: pi0 (~default@user/pi0) ()
[00:56:37] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:59:16] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 268 seconds)
[01:00:49] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[01:05:26] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[01:06:05] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[01:06:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[01:06:54] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 260 seconds)
[01:08:43] *** Joins: quartz (~quartz@user/quartz)
[01:09:28] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Client Quit)
[01:10:23] *** Joins: johnnyreb (~tth@user/johnnyreb)
[01:10:34] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[01:11:36] *** Joins: sm2n (~sm2n@user/sm2n)
[01:11:37] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[01:12:31] <useretail> there is an online tool cppinsights.io that does source to source transformation. is there such thing for c?
[01:12:58] <useretail> online or offline
[01:13:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com)
[01:14:01] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[01:17:10] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[01:17:58] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:20:09] *** topside_ is now known as topside
[01:20:38] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:21:54] <fizzie> 1What would it translate *to*? What that generates for the example C++ program looks to be roughly on the level of abstraction of C. There isn't that much hidden magic to start with. (Okay, the thing about explicit initializers for all arrays... but that's a bit weird.)
[01:24:10] <floatcomplex> no matter how much you think you are following best practices, there will always be someone who thinks about code in a way that is as alien to you as the idea of drinking coffee made from beans from a cat's butt, and yet is successful in their circles
[01:25:00] <riv> Kopi luwak
[01:25:17] <floatcomplex> (yes i know it's not a real cat)
[01:26:02] <floatcomplex> (it is a real butt though)
[01:26:09] <riv> that's what matters
[01:34:35] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 264 seconds)
[01:35:43] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[01:38:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[01:39:36] <twkm> well useretail, what insights do you feel would be useful?  but, i'm not aware of anything that throws out such for c.
[01:42:58] <useretail> twkm, no idea. i'm just curious. imo such tools allow you to understand c a little bit deeper
[01:44:10] *** Joins: pert (~pert@fsf/member/pert)
[01:46:28] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[01:46:31] *** Quits: bruda (~bruda@172.58.60.198) (Ping timeout: 256 seconds)
[01:46:31] *** Quits: hans (~hans@cFD4E34D5.static.as2116.net) (Ping timeout: 256 seconds)
[01:48:34] *** Church is now known as Xf
[01:48:54] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[01:49:09] <floatcomplex> useretail: maybe you want godbolt?
[01:49:31] <floatcomplex> this other tool is kopi luwak to me
[01:49:44] <floatcomplex> so it's hard to tell what you're looking for
[01:49:55] *** Quits: mimmy (~mimmy@146.70.75.190) (Ping timeout: 256 seconds)
[01:49:55] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[01:50:10] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:50:29] *** lukedashjr is now known as luke-jr
[01:52:22] <useretail> floatcomplex, godbolt is also cool, i sometimes use it's disassembler feature
[01:53:19] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[01:54:23] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 264 seconds)
[01:54:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[01:55:41] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:59:05] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 268 seconds)
[02:00:07] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[02:01:28] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[02:01:32] *** Quits: defiant (~defiant@user/defiant) (Ping timeout: 265 seconds)
[02:01:45] *** Joins: mimmy (~mimmy@146.70.75.189)
[02:02:11] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[02:02:47] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 264 seconds)
[02:03:00] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[02:04:13] <fizzie> GCC's `-fdump-tree-all` generates a hundred-odd intermediate representations on a somewhat comparable level of detail.
[02:04:34] <fizzie> Not sure whether you'd really learn any particular insights from any of them.
[02:06:14] *** Quits: pert (~pert@fsf/member/pert) (Ping timeout: 260 seconds)
[02:07:39] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:12:46] *** Quits: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk) (Ping timeout: 260 seconds)
[02:15:16] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[02:17:56] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:18:49] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[02:23:58] *** Joins: m1m1c (~notd5a@5.151.189.77)
[02:24:12] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[02:24:19] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:24:22] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[02:25:35] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:27:32] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:31:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:32:38] *** Quits: pizdets (~pizdets@183.182.110.70) (Ping timeout: 250 seconds)
[02:33:42] *** Joins: pizdets (~pizdets@183.182.111.207)
[02:35:09] *** Joins: pert (~pert@fsf/member/pert)
[02:35:10] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:36:08] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:37:31] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 256 seconds)
[02:37:58] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[02:37:59] *** lukedashjr is now known as luke-jr
[02:38:42] *** Joins: nyah (~nyah@94.6.71.219)
[02:39:52] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[02:46:48] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:47:30] *** Quits: kri (~debian@snf-55691.vm.okeanos-global.grnet.gr) (Quit: WeeChat 2.3)
[02:49:17] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[02:49:29] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 250 seconds)
[02:51:04] *** Joins: ckdCreations (~ckdCreati@147.55.130.37)
[02:51:47] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[02:52:26] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[02:54:05] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[02:54:08] *** Quits: ckdCreations (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[02:54:39] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[02:57:28] <useretail> you know i'm trying to stick with c cause c++ is heading into the abyss of nonsense with the desire of its devs to implement new features 2-3 years. no way i'm following that madness
[02:57:37] <useretail> sorry wrong chan
[02:57:51] <floatcomplex> it's appreciated tho
[02:58:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:58:18] <useretail> lol
[02:59:17] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[03:00:55] <omegatron> c++ always has been the php of the c derivates
[03:03:02] <apotheon> I thought PHP was the PHP of the C derivatives.
[03:03:35] <apotheon> If you take what C++ did to C, and apply that to C++, you get . . . Perl?
[03:03:43] <apotheon> . . . then do the same to Perl and you get . . . PHP?
[03:03:44] <apotheon> hmm
[03:04:10] <apotheon> Nah.  If you do to the Unix pipeline what C++ did to C, you get Perl.
[03:04:22] <apotheon> If you do to Perl what Java did to C++, you get PHP.
[03:05:05] *** Quits: alch (~alch@151.46.24.39) (Read error: Connection reset by peer)
[03:05:39] <bparker> useretail: you don't have to use the new features, just set -std=sensible and use only the parts you like
[03:05:56] <bparker> personally I won't go higher than 11 at most
[03:06:04] *** Joins: inomoz (~inomoz@176.59.125.26)
[03:07:50] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[03:09:08] *** Joins: alch (~alch@151.44.64.83)
[03:11:47] *** Quits: magla (~gelignite@55d403ec.access.ecotel.net) (Quit: Stay safe!)
[03:12:05] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[03:12:27] *** Joins: xcm_ (~xcm@user/xcm)
[03:12:29] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[03:13:20] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[03:14:10] <useretail> guys, i don't have anything against c++ at all. but what can you do when your employer discovers the recent c++ standard being released and tells you that we have to use that just because it's "becoming popular" and "its the most recent standard". not mine, but true story
[03:14:24] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:17:29] <tk> I would leave
[03:17:33] <tk> C++ is a disaster
[03:17:34] <omegatron> tell him my professional opinion, based on 45 years work experience or just leave
[03:17:53] <tk> I come back to C++ every year and try to write it for 10 minutes before giving up
[03:18:19] <omegatron> sounds familiar  =D
[03:18:30] <APic> Work sucks anyhow
[03:20:16] <floatcomplex> the trouble with allowing even a little bit of c++ is that "you only pay for what you use" is complete bullshit. whoever says that has never tried to debug another person's code
[03:21:32] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[03:22:31] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:23:23] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:24:01] <tk> C++ is like this. You open a door into an unusual room filled with strange things you don't understand. You try to take a step forward only to have the ground change colour and make a weird noise. You realise you have become weightless. You begin to float, you try to grab onto what looks like a railing before realising it is actually made of carefully compacted sand. As it crumbles in your hands, you
[03:24:03] <tk> hear someone in the distance shout your name. You look in the general direction of the noise and all you see is everything in front of your eyes smearing. You blink, as your eyes open you find yourself falling through clouds of string, you become tangled up. You eventually stop due to all the tangling. You begin to grasp at the strings to untangle them and they turn into goop. The goop is sticky and you
[03:24:03] <tusko> What is the best kind of job to get into if I want to become wizard?
[03:24:05] <tk> become stuck. You become engulfed in the goop. It starts to harden, as you wriggle and try to breathe you wonder why you took a step into the room in the first place. Just as you're about to pass out from the lack of air, you wake up. You stare at ceiling, it looks familiar. You feel the urge to throw up.
[03:24:13] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[03:24:35] <tusko> thank you very much for telling me kind sir. I didn't know before.
[03:27:17] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 268 seconds)
[03:27:21] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[03:27:45] <omegatron> tk:  do you have that story ready at hand in your irc client or just made it up?  =D
[03:27:49] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[03:28:09] <tk> It fell out of my fingertips.
[03:28:41] *** Joins: cation21 (cation@user/cation)
[03:29:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:29:35] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:29:35] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[03:29:35] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Quit: ZNC - http://znc.in)
[03:29:37] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Remote host closed the connection)
[03:29:49] *** Joins: luizfrds (~Luiz@152.250.243.147)
[03:29:52] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[03:29:59] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[03:30:18] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[03:30:26] <ioxzev1z> omegatron, He has it bound to ctrl+alt+muh_c++_bad
[03:30:40] *** Joins: Macuser (~Macuser@2600:1003:b86d:3461:d83:c626:c2d0:9e6c)
[03:31:43] <omegatron> must be it ..
[03:31:45] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Ping timeout: 265 seconds)
[03:31:58] *** cation21 is now known as cation
[03:32:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[03:32:33] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:33:29] <floatcomplex> it really should be called c::
[03:33:46] <floatcomplex> not any less googleable
[03:33:58] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:35:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[03:37:32] <APic> C:\DOS\RUN>
[03:39:35] <floatcomplex> https://crzysdrs.net/dv/victim/476-the-loss-of-our-sinistar-arcade-machine-was-a-bitter-bitter-blow/
[03:39:36] <candide> Title of floatcomplex's link: Daily Victim Archive
[03:39:59] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:40:01] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[03:40:15] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[03:41:37] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[03:41:42] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[03:43:01] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[03:43:08] *** Joins: VincentValentine (~VincentVa@178.45.221.165)
[03:45:52] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:47:16] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[03:48:32] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of creative supermutants at https://indiedevs.net/)
[03:48:39] *** Joins: avery__ (~avery@2607:ea00:107:3c07:1ff:7b73:4b44:5fc4)
[03:49:29] <tusko> C with classes
[03:54:24] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[03:59:00] <fluter> what about objective-C?
[04:00:15] <floatcomplex> fluter: unlike c++, objc is a) an actual strict superset of c, and b) not really evolving anymore
[04:00:30] <floatcomplex> so it's a much lesser weevil
[04:01:15] <fluter> floatcomplex: Can I use C++ like objC? like use only a certain set of features
[04:01:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[04:01:49] <VincentValentine> i've read 1/3 of k&r book can i consider myself a c god
[04:02:18] <floatcomplex> fluter: no. see above re: allowing even a little bit of c++
[04:02:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:02:35] *** Joins: chenqisu1 (~03cia7d@183.217.201.124)
[04:02:50] <fluter> VincentValentine: lol NO!
[04:03:11] <fluter> floatcomplex: i have discipline when writing code :P
[04:03:36] <floatcomplex> fluter: that's not the problem
[04:03:43] <VincentValentine> ok what do i need to do else to consider myself c god
[04:03:51] <floatcomplex> VincentValentine: there's no such thing
[04:04:07] *** chenqisu1 is now known as chenqisu12
[04:04:27] <fluter> VincentValentine: finish the other 2/3 first.
[04:04:43] <VincentValentine> why lol damn what the hell day ruined i need to visit shrink
[04:04:52] <VincentValentine> ok
[04:05:12] <floatcomplex> fluter: the problem is that when you are debugging other people's code, or they are trying to debug your code, they have no idea what discipline you followed
[04:05:23] <floatcomplex> so anything the language admits could be in play, and that's a LOT
[04:05:46] <floatcomplex> and c++ actively encourages obfuscation of what a line of code does, via operator overloading and polymorphism and other such things
[04:05:49] <VincentValentine> can i ask people here for help if i stumble upon unsolvable task in the book
[04:06:01] <fluter> floatcomplex: yeah that's right, i can only hope when something is wrong, it's my application code, not sth wrong in libraries
[04:06:55] *** Joins: pulse (~pulse@user/pulse)
[04:09:18] <floatcomplex> the whole modern idiomatic c++ dev ecosystem seems to distill down to using a fancy IDE to help you mentally undo the obfuscation that the language itself encourages. why not just not write the fucked up puzzle code in the first place
[04:10:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:11:40] *** Quits: pert (~pert@fsf/member/pert) (Read error: Connection reset by peer)
[04:11:46] *** Joins: Wulf (~Wulf@user/wulf)
[04:12:09] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[04:12:29] *** Quits: Samian (~s@user/samian) (Quit: Textual IRC Client: www.textualapp.com)
[04:13:52] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[04:18:02] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[04:18:38] <tusko> this is why we have go, c perfected
[04:20:05] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[04:20:06] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30)
[04:21:03] <omegatron> would be great, if it were true ..
[04:21:44] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[04:22:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[04:22:22] <omegatron> in 90% of all cases, where I try to build some random go-based software, it simply doesn't work AND usually it requires to download a whole bunch of third party software ...!
[04:22:54] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30) (Ping timeout: 260 seconds)
[04:22:58] <omegatron> I mean, what the hell? I need to be informed about this before I try to build it, because I have to make at least a minimum audit of EACH package ...
[04:24:26] <omegatron> while the go language itself (like haskell) is quite good, the ecosystem is one of the worst (and both are not really trustworthy, because they require an already existing go/haskell installation - or you need to install some binary packages)
[04:24:37] <omegatron> even worse with rustc
[04:25:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:25:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:25:35] *** Joins: wroathe (~wroathe@user/wroathe)
[04:25:53] <omegatron> and as chance would want it, I just tried to build  gogs  (git-like version control) and it failed with 'undefined reference' errors ..  - what else to expect, huh?
[04:31:38] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[04:32:41] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[04:32:50] <Twix> omegatron, i would suggest to use the gogs fork, gitea. Its more active and has more features. But the rest of your go rant is, of course, still correct
[04:33:42] <Twix> i see a bit more problems with the go language, but a lot of it is personal opinon and not really fact based :)
[04:35:04] <tusko> go is like c went to a spiritual life retreat in vanuatu and figured some things out
[04:35:08] <omegatron> yeah, I checked gitea too and it's also disqualified, because it requires Node.js - which is a no-go on our server cluster (not even in chroot environment)
[04:35:28] <omegatron> so far, I'm checking Bazaar or Breezy (python-based)
[04:36:27] <Twix> it requires node js to build the frontend, not to run the service
[04:37:09] <omegatron> "to build the frontend" ??  you mean to compile html, css, ecmascript, template files !?
[04:37:19] <Twix> yes
[04:37:39] <omegatron> -_-   people and their choice of tools ...
[04:38:22] <Twix> well, in which language would you build your frontend? macromedia flash?
[04:38:56] <Twix> gogs does not need it, because they push compiled artifacts into their git repo
[04:40:03] <Twix> you can not tell me that it is possible to review minified java script. So better require node js to build this stuff. You only need it on your build system and not at all if you get your operating systems prebuild binary
[04:40:44] <Twix> don't get me wrong here, i do not like node js either
[04:41:14] <Twix> but javascript is the language browsers understand and node js is the most common offline variant of it
[04:41:21] <Twix> so it makes quite sense ...
[04:41:48] <omegatron> if you mean by "build your fronted", that you have, let's say, a bunch of (template) files which are then processed (by some software, in this case node.js) to produce another bunch of files, which are then put on the server to serve it to the user ... in that case, the "processor software" can be most likely written in any language
[04:43:25] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[04:43:35] <omegatron> so .. I could either use  ducktape (or some other ecmascript implementation) or program my own software, even if it's a shell script   =D
[04:44:11] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[04:44:12] <Twix> you could do that, of course. But you would write your own java script parser while you are doing such a thing
[04:44:34] <omegatron> (which happens to be the case)   =D
[04:44:52] <omegatron> (for some completely other thing/project, but ...)
[04:45:00] <Twix> i'm glad that i'm a embedded dev and not a javascript guy
[04:45:48] <Twix> if people ask me for a frontend, they'll get html forms without any css :D
[04:45:55] <Twix> xhtml 4.0 or something :D
[04:45:55] <omegatron> ;-)
[04:46:08] <omegatron> what? not html 3.2 ?
[04:46:21] <Twix> but xhtml is valid xml!!11!1
[04:47:23] <omegatron> in which industry are you working? automotive?
[04:48:13] <omegatron> medical hardware?
[04:48:37] <Twix> no :D
[04:48:39] <Twix> iot
[04:48:58] *** Joins: shivesh (~shivesh@user/shivesh)
[04:48:59] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[04:49:40] <Twix> bullshit, but atleast no weapons and no ones live depends on it.
[04:50:40] <omegatron> I was just about asking "how many years, unil humanity has to defend against artificial flying killer insects" ?  =D
[04:51:20] <Twix> all what happens if i build not working hardware or software is, that you can't open your garage using siri
[04:52:00] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:52:04] <omegatron> not using any apple phone here, therefore ..
[04:52:05] *** Quits: Macuser (~Macuser@2600:1003:b86d:3461:d83:c626:c2d0:9e6c) (Quit: Textual IRC Client: www.textualapp.com)
[04:52:11] <Twix> worst thing might be, a buffer overlow and some stranger could open your garage via wifi ...
[04:52:32] <Twix> my garage can do alexa and google home, too!!!!
[04:54:04] <omegatron> ... if I would do that to my garage, i'm sure I'll get sued by my landlord and the other 80 parties in this complex  =)   but it would be funny (for a week)
[04:55:57] <tusko> humanity has been on a ticking timeclock since the flying guillotine was introduced
[04:56:17] *** Joins: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown)
[04:56:32] <omegatron> you mean Captain America's shield ?
[04:58:43] <De4nWhit3> Hello everyone. 
[05:01:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[05:01:31] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of creative supermutants at https://indiedevs.net/)
[05:01:43] <omegatron> hello!  o/
[05:03:31] *** Joins: noord (~noord@user/noord)
[05:03:58] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:04:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[05:06:03] *** Joins: maximilian90 (~standard-@x590feea3.dyn.telefonica.de)
[05:06:14] *** Quits: candide (~pbot3@about/c/bot/candide) (Quit: Departure requested.)
[05:06:46] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[05:07:05] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[05:09:23] *** Quits: rcf (~rcf@iceland.sdf.org) (Ping timeout: 256 seconds)
[05:09:30] *** Joins: larry87 (~quassel@2601:2c7:4280:17a0:5f5:abf2:ce06:72c3)
[05:09:57] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[05:11:05] *** Joins: candide (~pbot3@about/c/bot/candide)
[05:14:08] *** Quits: candide (~pbot3@about/c/bot/candide) (Client Quit)
[05:14:57] *** Joins: candide (~pbot3@about/c/bot/candide)
[05:19:31] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[05:19:50] *** Joins: de-facto (~de-facto@user/de-facto)
[05:21:53] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[05:23:33] *** Joins: hans (~hans@cFD4E34D5.static.as2116.net)
[05:24:12] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[05:24:14] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[05:24:43] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[05:26:38] *** Joins: dutch (~DutchIngr@user/dutch)
[05:28:39] *** Quits: m1m1c (~notd5a@5.151.189.77) (Quit: WeeChat 3.3)
[05:32:07] *** Quits: avery__ (~avery@2607:ea00:107:3c07:1ff:7b73:4b44:5fc4) (Quit: avery__)
[05:32:22] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:34:50] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 260 seconds)
[05:35:50] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:42:27] *** Joins: Chip1972 (~Chip1972@186.206.217.247)
[05:54:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:57:12] *** Quits: Dreamer3 (~textual@cpe-96-28-189-235.kya.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[06:02:25] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[06:05:29] *** Quits: maximilian90 (~standard-@x590feea3.dyn.telefonica.de) (Ping timeout: 256 seconds)
[06:07:11] *** Quits: msfninja (~kali@user/msfninja) (Ping timeout: 245 seconds)
[06:07:33] *** Joins: maximilian90 (~standard-@x590fec6b.dyn.telefonica.de)
[06:07:41] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[06:08:57] *** Quits: chenqisu12 (~03cia7d@183.217.201.124) (Remote host closed the connection)
[06:09:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:09:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:09:42] *** Joins: wroathe (~wroathe@user/wroathe)
[06:10:01] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[06:10:28] *** Xf is now known as Church
[06:11:14] *** Quits: De4nWhit3 (~De4nWhit3@165-73-119-36.ip.afrihost.capetown) (Quit: Connection closed)
[06:11:40] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[06:12:50] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:13:12] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[06:16:37] *** Quits: Chip1972 (~Chip1972@186.206.217.247) (Quit: Leaving)
[06:21:02] *** MrMobius_ is now known as MrMobius
[06:25:52] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[06:26:07] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[06:33:49] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:36:31] *** Joins: loganlee (~Thunderbi@user/loganlee)
[06:41:45] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[06:46:27] *** Quits: charadon (~charadon@155.138.164.183) (Ping timeout: 268 seconds)
[06:52:11] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:38] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[06:56:03] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (Remote host closed the connection)
[06:58:12] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[06:58:29] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[07:00:38] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[07:01:33] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[07:02:11] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:03:40] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[07:04:45] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Quit: leaving)
[07:06:09] *** Joins: ferdna (~ferdna@user/ferdna)
[07:07:49] *** Quits: maximilian90 (~standard-@x590fec6b.dyn.telefonica.de) (Ping timeout: 256 seconds)
[07:08:11] *** Quits: alch (~alch@151.44.64.83) (Ping timeout: 264 seconds)
[07:08:12] *** Joins: maximilian90 (~standard-@x590fec6b.dyn.telefonica.de)
[07:09:29] *** Joins: alch (~alch@151.46.31.92)
[07:11:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:12:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com)
[07:13:35] *** Quits: maximilian90 (~standard-@x590fec6b.dyn.telefonica.de) (Ping timeout: 268 seconds)
[07:16:38] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[07:18:34] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[07:20:47] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 264 seconds)
[07:22:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:23:06] *** Quits: reset (~reset@user/reset) (Quit: reset)
[07:23:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Ping timeout: 264 seconds)
[07:23:34] *** Quits: hans (~hans@cFD4E34D5.static.as2116.net) (Ping timeout: 260 seconds)
[07:24:55] *** Joins: rcf (rcf@iceland.sdf.org)
[07:31:37] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:11a2:37f9:dae1:eed1)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:42:48] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[07:44:25] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[07:44:25] *** jmiehe1 is now known as jmiehe
[07:45:23] *** Quits: Dotz0cat (~Dotz0cat@h194.118.90.75.dynamic.ip.windstream.net) (Ping timeout: 264 seconds)
[07:46:34] *** Joins: Dotz0cat (~Dotz0cat@h203.195.186.173.dynamic.ip.windstream.net)
[07:49:45] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[07:51:30] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:51:38] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[07:53:25] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[07:56:19] *** Joins: maximilian90 (~standard-@x590fec6b.dyn.telefonica.de)
[07:59:50] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[08:02:34] *** Quits: maximilian90 (~standard-@x590fec6b.dyn.telefonica.de) (Quit: WeeChat 3.0)
[08:05:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:09:14] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[08:16:37] *** Joins: loganlee (~Thunderbi@user/loganlee)
[08:17:42] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:17:43] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 268 seconds)
[08:20:00] *** Joins: pulse (~pulse@user/pulse)
[08:21:23] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Ping timeout: 264 seconds)
[08:24:11] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:24:53] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 256 seconds)
[08:26:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:27:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[08:33:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[08:33:28] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[08:36:26] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:37:53] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Excess Flood)
[08:40:24] *** Joins: gproto10 (~gproto23@user/gproto23)
[08:49:04] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:f7ca:1eeb:4203:9df2)
[08:50:28] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:f7ca:1eeb:4203:9df2) (Client Quit)
[08:51:44] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:52:31] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[08:53:29] *** Quits: Jong (~Jong@2620:10d:c090:400::5:4527) (Ping timeout: 268 seconds)
[08:53:33] *** Joins: tinyweasel_ (~weasel@gone.under.underserver.net)
[08:58:57] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:59:15] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[09:00:06] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Ping timeout: 245 seconds)
[09:00:15] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[09:01:01] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[09:08:06] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[09:08:25] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[09:10:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:10:34] *** Quits: tinyweasel_ (~weasel@gone.under.underserver.net) (Quit: quit)
[09:12:05] *** Joins: tinyweasel_ (~weasel@64.112.127.232)
[09:13:02] *** Quits: tinyweasel_ (~weasel@64.112.127.232) (Client Quit)
[09:13:17] *** Joins: tinyweasel_ (~weasel@gone.under.underserver.net)
[09:15:41] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 264 seconds)
[09:17:22] *** Joins: Telvana (~capo@user/telvana)
[09:17:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:21:45] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[09:23:28] *** Joins: msfninja (~kali@user/msfninja)
[09:23:28] *** Joins: Telvana2 (~capo@user/telvana)
[09:23:42] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 268 seconds)
[09:30:03] *** Quits: Telvana2 (~capo@user/telvana) (Ping timeout: 256 seconds)
[09:31:36] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[09:32:05] *** Quits: pucara (~i@181.93.164.73) (Quit: Lost terminal)
[09:32:53] *** Quits: msfninja (~kali@user/msfninja) (Ping timeout: 256 seconds)
[09:33:17] *** Joins: Telvana (~capo@user/telvana)
[09:34:04] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[09:35:01] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:48:51] *** Joins: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1)
[09:49:30] *** Joins: alioui (~medeva293@102.158.25.170)
[09:49:55] *** Joins: svenzhou (~svenzhou@240e:476:1:c19:25cf:3bce:5902:d1c4)
[09:52:08] *** Joins: kdc (~kdc@196.211.197.159)
[09:54:56] *** Quits: svenzhou (~svenzhou@240e:476:1:c19:25cf:3bce:5902:d1c4) (Quit: Client closed)
[09:56:02] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[09:57:00] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 268 seconds)
[09:58:55] *** Joins: Telvana (~capo@user/telvana)
[09:59:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[10:10:27] *** Joins: missogra (~missogra@dynamic-095-112-086-195.95.112.pool.telefonica.de)
[10:10:54] *** Joins: mimmy (~mimmy@146.70.75.149)
[10:11:27] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:16:12] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[10:18:31] *** Joins: sfdebug (~AdiIRC@2804:14d:7e89:45e1:c1e2:e75b:c056:330)
[10:18:38] *** Parts: sfdebug (~AdiIRC@2804:14d:7e89:45e1:c1e2:e75b:c056:330) (Closing Window)
[10:21:29] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[10:22:59] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[10:24:10] *** Quits: zalt (~zalt@user/zalt) (Ping timeout: 260 seconds)
[10:25:32] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:26:28] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[10:31:19] *** Joins: rgrinberg (~textual@201.192.183.53)
[10:31:53] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[10:35:47] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 264 seconds)
[10:40:33] *** Satin is now known as satin
[10:41:09] *** Quits: rando25892 (~user@user/rando25892) (Ping timeout: 250 seconds)
[10:41:13] *** satin is now known as nexiana
[10:43:38] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:45:39] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[10:51:31] *** Joins: mrig (~AdiIRC@user/mrig)
[10:51:53] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[10:58:03] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 268 seconds)
[11:00:46] *** Joins: noord (~noord@user/noord)
[11:05:49] *** Quits: alch (~alch@151.46.31.92) (Read error: Connection reset by peer)
[11:06:34] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 265 seconds)
[11:09:54] *** Joins: alch (~alch@151.44.8.107)
[11:11:50] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[11:13:36] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[11:13:48] *** Joins: defiant (~defiant@user/defiant)
[11:14:33] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[11:15:02] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:17:18] *** Joins: mimmy (~mimmy@146.70.75.149)
[11:17:37] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:18:18] *** Joins: vysn (~vysn@user/vysn)
[11:18:51] *** Quits: missogra (~missogra@dynamic-095-112-086-195.95.112.pool.telefonica.de) (Ping timeout: 256 seconds)
[11:19:01] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 268 seconds)
[11:19:17] *** Quits: Sheilong (uid293653@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:21:37] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[11:22:04] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
[11:24:19] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[11:26:08] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[11:28:16] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[11:34:03] *** Joins: kadavul (~vazha@2409:4073:4d90:9eff:2423:28ca:65ac:2d70)
[11:35:24] *** tinyweasel_ is now known as tinyweasel
[11:36:17] *** Quits: rahl (~rahl@102.114.85.190) (Ping timeout: 268 seconds)
[11:37:39] *** Joins: rahl (~rahl@102.114.83.40)
[11:37:46] *** Quits: the (~the@2620:8d:8000:1044:b6ca:1ac:6dab:2ab1) (Quit: Leaving)
[11:38:15] *** Joins: hans (~hans@cFD4E34D5.static.as2116.net)
[11:40:23] *** Joins: mimmy (~mimmy@146.70.75.149)
[11:44:27] *** Joins: Colt (~Colt@user/colt)
[11:45:01] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[11:45:22] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 260 seconds)
[11:47:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[11:51:46] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:01:43] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[12:02:57] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[12:03:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 264 seconds)
[12:04:10] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[12:06:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[12:07:46] *** Quits: hans (~hans@cFD4E34D5.static.as2116.net) (Ping timeout: 260 seconds)
[12:09:59] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:11a2:37f9:dae1:eed1) (Ping timeout: 264 seconds)
[12:10:04] *** Joins: loganlee (~Thunderbi@user/loganlee)
[12:10:15] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[12:15:44] *** Joins: hans (~hans@cFD4E34D5.static.as2116.net)
[12:18:20] *** Joins: mimmy (~mimmy@146.70.75.149)
[12:21:18] <bolovanos_> hi - I am new to c, and I would appreciate any hint. Why is output of this code https://pastebin.com/6xiXQmwb "text3_1: 'hi'" without any compile error?
[12:22:02] <bolovanos_> Is this cause of compiler, or expected behaviour? (Compiled on Win 10, gcc version 6.3.0 (MinGW.org GCC-6.3.0-1))
[12:23:46] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 268 seconds)
[12:24:08] <trenka> bolovanos_: why there should be a error?
[12:24:32] <trenka> ah, you mean the second call?
[12:25:03] <trenka> it's a problem, but not compiler error
[12:26:45] *** Joins: k4davul (~vazha@2409:4073:4d90:9eff:2423:28ca:65ac:2d70)
[12:27:49] *** Quits: k4davul (~vazha@2409:4073:4d90:9eff:2423:28ca:65ac:2d70) (Remote host closed the connection)
[12:28:13] *** Joins: k4davul (~vazha@2409:4073:4d90:9eff:2423:28ca:65ac:2d70)
[12:29:41] *** Quits: k4davul (~vazha@2409:4073:4d90:9eff:2423:28ca:65ac:2d70) (Read error: Connection reset by peer)
[12:30:06] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Quit: You have been kicked for being idle)
[12:30:23] *** Quits: kadavul (~vazha@2409:4073:4d90:9eff:2423:28ca:65ac:2d70) (Ping timeout: 264 seconds)
[12:30:27] <dave0> bolovanos_: probably the compiler doesn't have to tell you
[12:30:43] <dave0> bolovanos_: switch on warnings and it'll probably complain about the 2nd printf
[12:31:40] <dave0> ,cc char *text3 = "hi"; printf("text3_1: '%s'\n", text3); text3 = "ih"; printf("text3_1: '%s'\n");
[12:31:43] <candide> dave0: [warning: format '%s' expects a matching 'char *' argument [-Wformat=]] text3_1: 'hi' text3_1: 'text3_1: 'text'
[12:32:00] <dave0> it should be an error but it's just a warning
[12:32:05] <dave0> c is like that
[12:34:37] *** Joins: chenqisu1 (~03cia7d@183.217.201.124)
[12:37:20] *** Quits: hans (~hans@cFD4E34D5.static.as2116.net) (Ping timeout: 268 seconds)
[12:43:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:43:45] *** Joins: hans (~hans@cFD4E34D5.static.as2116.net)
[12:44:12] <NRK[m]> -Werror
[12:44:31] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[12:51:32] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[12:51:50] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:52:09] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[12:52:14] *** Joins: tejr (~tejr@user/tejr)
[12:53:42] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:53:51] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[12:55:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:59:03] <dave0> eh i meant more like it's not required to tell you about errors and rarely does
[12:59:32] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[13:00:23] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:01:02] *** Joins: mimmy (~mimmy@146.70.75.149)
[13:01:09] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:01:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Client Quit)
[13:02:03] *** Quits: chenqisu1 (~03cia7d@183.217.201.124) (Remote host closed the connection)
[13:02:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:03:50] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:03:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[13:04:23] <bolovanos_> trenka, do you know Why ti does print "hi" - how does it know what / why to print "hi"?
[13:05:09] <bolovanos_> dave0, I am on visual studio code - running code - this file specifically - will sometimes show warning. So warnings are on - my guess...
[13:05:21] <dave0> bolovanos_: %s means substitute a string that you pass as an argument... in this case, text3
[13:06:19] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[13:06:33] <dave0> bolovanos_: the printf will print    text3_1: '  <<substitute a string>>  '   where the substitute comes from   , text3
[13:06:56] *** Joins: simon323 (~simon323@2409:8a34:46c:5830:619b:eb:9e48:f97a)
[13:06:59] <dave0> bolovanos_: the first line made   text3   point to the string    hi    which is substituted
[13:07:05] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 256 seconds)
[13:09:21] <bolovanos_> dave0, yes I know it is substitution, but what is boggling my mind is line 4 "printf("text3_1: '%s'\n");" where no substitution is used
[13:09:33] *** nexiana is now known as Satin
[13:09:51] <dave0> bolovanos_: that is an error that the compiler did not want to tell you about
[13:09:59] <dave0> bolovanos_: think of it as dividing by 0
[13:10:45] <bolovanos_> dave0, yes it did not want to tell about error, but at the same time (in my case) it prints out text3_1: 'hi'
[13:10:59] <dave0> bolovanos_: the %s still means substitute a string, but you have not given it an argument to get the string... to c that's like dividing by 0 .. oopsie what can i do? i know, i'll ignore it
[13:11:19] <NRK[m]> that's the first call
[13:11:26] <NRK[m]> or is it printing hi on the 2nd call as well?
[13:11:43] <bolovanos_> NRK[m], on second as well - mnt
[13:12:09] <bolovanos_> https://pastebin.com/H3vPUSvY
[13:12:10] <dave0> bolovanos_: it's supposed to be unpredictable
[13:12:55] <dave0> bolovanos_: computers are not like that.. your program is using stale memory to produce something that almost works
[13:13:06] <NRK[m]> probably something to do with the stack pointer
[13:13:14] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:13:45] <dave0> bolovanos_: as a c programmer, you broke the rules... as far as a dumb machine is concerned, it tried it's best and that's what happened
[13:13:59] <bolovanos_> dave0, "it's supposed to be unpredictable" https://bit.ly/3kTwDje
[13:14:21] <dave0> yup he looks surprised
[13:14:43] <dave0> unpredictable is not in a computers manual
[13:14:57] <bolovanos_> btw - is there a way to debug it - in this case - unpredictable is consist in result
[13:15:11] <dave0> whatever binary patterns were left over from who-knows-what just happened to print something
[13:15:20] <bolovanos_> NRK[m], this sounds trackable... how?
[13:15:44] <bolovanos_> last question - how to deal prevent such unpredictability? How you do that?
[13:15:54] <NRK[m]> u said you're using gcc v6 ?
[13:15:58] <bolovanos_> What to search for - where to learn from
[13:15:59] <bolovanos_> NRK[m], yes
[13:16:00] <dave0> bolovanos_: yeah, turn on warnings and use tools to check things... unforutnately i do not know those tools.. people here will know
[13:16:36] <NRK[m]> on v11, i get a warning by default, without needing any additional flags
[13:16:44] <bolovanos_> I can compile it on linux
[13:16:49] <bolovanos_> mnt
[13:16:53] *** Joins: zalt (~zalt@user/zalt)
[13:17:08] <dave0> bolovanos_: if you're really stuck, just go on irc and ask
[13:17:16] <dave0> stackoverflow if you want i guess
[13:17:36] <NRK[m]> bolovanos_: idk how v6 is, but try -Wall and -Wextra
[13:18:08] <dave0> bolovanos_: we've had lots of practise at catching other peoples bugs
[13:18:37] <dave0> ah the missing semi-colon
[13:18:39] <NRK[m]> the way to deal with unpredictability is to write correct and standard conformant code imo
[13:18:40] <dave0> a classic
[13:19:30] <bolovanos_> NRK[m], correct - put man in that equation and you have need for compiler output :)
[13:19:39] <bolovanos_> btw - on linux it crashes - as expected
[13:20:04] <bolovanos_> not the way I was expected - having a close look
[13:20:17] <bolovanos_> it has problem with implicit declaration
[13:20:43] <NRK[m]> u need to include the proper header
[13:20:44] <bolovanos_> gcc on linux  "gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516"
[13:21:11] *** Joins: aradesh (~aradesh@user/aradesh)
[13:21:34] <bolovanos_> right - copy paste problem - in include part
[13:23:20] <bolovanos_> this is what I get on linux https://pastebin.com/5frtUpes - gcc on linux  "gcc (Debian 6.3.0-18+deb9u1) 6.3.0 20170516"
[13:26:13] <bolovanos_> Similar output - except \' is new think in top of the output
[13:28:47] *** Joins: Burgundy (~yomon@86.127.194.72)
[13:29:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:30:28] <bolovanos_> dave0, missing semicolon is classic, but compiler gets it pretty easily :)
[13:30:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:31:07] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[13:31:35] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 264 seconds)
[13:32:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:32:51] <bolovanos_> dave0, what scares me is that it substitute value out somewhere without noticing me about missing substitute value
[13:33:05] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.4-dev)
[13:33:16] <bolovanos_> dave0, NRK[m] anyway - thank you for participation! :)
[13:33:59] <bolovanos_> It is great to tell and get a replay from living entities
[13:34:14] *** Joins: EtherNet (~ethernet@user/ethernet)
[13:35:39] <Bou> That's the thiny with all variadic functions, you can pass anything to them, and the function can't check what number/type of arguments have been passed
[13:38:46] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:42:01] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[13:42:34] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:43:38] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[13:45:43] *** Joins: katnis (uid15849@helmsley.irccloud.com)
[13:49:35] *** Joins: wirehead (~wirehead-@2001:8003:2680:6000:c477:a8c1:d2fe:f418)
[13:52:41] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:52:49] *** Joins: abip20 (~abdullah@103.66.177.186)
[13:55:27] *** Joins: Hercules (~Hercules@user/hercules)
[13:55:30] *** Quits: hans (~hans@cFD4E34D5.static.as2116.net) (Ping timeout: 260 seconds)
[13:57:59] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[13:58:45] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:00:15] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[14:00:35] *** Quits: mahmutov (~mahmutov@37.155.84.125) (Ping timeout: 268 seconds)
[14:00:36] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[14:00:50] *** Joins: Chucky (~irc@user/pronhub)
[14:00:53] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[14:01:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:02:20] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:04:56] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[14:06:34] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[14:12:04] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.9)
[14:12:30] <bolovanos_> Bou, thank you for hint https://en.cppreference.com/w/c/variadic 
[14:12:30] <candide> Title of bolovanos_'s link: Variadic functions - cppreference.com
[14:15:56] *** Quits: Chucky (~irc@user/pronhub) (K-Lined)
[14:23:21] <katnis> im so dumb
[14:23:47] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[14:24:24] <dave0> you hide it well
[14:24:30] <dave0> :-)
[14:24:48] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:25:15] *** Quits: jetchisel (jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[14:25:23] <katnis> the book has the answer...
[14:25:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:02] *** Joins: csrf (~csrf@user/csrf)
[14:31:39] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[14:31:54] *** Quits: wirehead (~wirehead-@2001:8003:2680:6000:c477:a8c1:d2fe:f418) (Quit: Leaving)
[14:33:00] *** Joins: missogra (~missogra@dynamic-095-112-086-195.95.112.pool.telefonica.de)
[14:33:37] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[14:39:25] *** Quits: abip20 (~abdullah@103.66.177.186) (Quit: Konversation terminated!)
[14:39:27] *** Quits: missogra (~missogra@dynamic-095-112-086-195.95.112.pool.telefonica.de) (Ping timeout: 256 seconds)
[14:41:03] *** Joins: mimmy (~mimmy@146.70.75.148)
[14:45:58] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 260 seconds)
[14:47:09] *** Joins: hans (~hans@77.16.217.178.tmi.telenormobil.no)
[14:48:13] *** Joins: random-nick (~random-ni@87.116.180.220)
[14:48:42] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:57:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:57:06] *** Quits: hans (~hans@77.16.217.178.tmi.telenormobil.no) (Ping timeout: 260 seconds)
[15:03:35] *** Joins: terminalpusher (~terminalp@2a01:586:12e7:1:ecac:12bf:39fa:2ed)
[15:05:21] *** Quits: alch (~alch@151.44.8.107) (Read error: Connection reset by peer)
[15:06:36] *** Joins: gnoo (gnoo@user/gnoo)
[15:09:12] *** Joins: alch (~alch@151.44.19.62)
[15:14:48] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:18:10] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:18:41] *** Quits: nightw0lf (~nightw0lf@77.125.126.211) (Remote host closed the connection)
[15:18:56] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[15:19:11] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[15:22:02] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[15:22:26] *** Joins: reset (~reset@user/reset)
[15:23:49] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[15:23:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:26:44] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:27:13] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[15:27:29] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[15:32:15] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[15:32:22] *** Parts: nightw0lf (~nightw0lf@77.125.126.211) (leaving)
[15:32:26] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[15:32:35] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Quit: Leaving)
[15:33:02] *** Joins: cpuid (~cpuid@co5.at)
[15:33:03] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[15:33:03] *** Joins: cpuid (~cpuid@user/cpuid)
[15:33:06] *** Joins: strajder (~strajder@user/strajder)
[15:33:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:13] *** Joins: nightw0lf (~nightw0lf@77.125.126.211)
[15:37:18] *** Quits: nightw0lf (~nightw0lf@77.125.126.211) (Remote host closed the connection)
[15:37:48] *** skipper is now known as whatsupbot
[15:38:19] *** whatsupbot is now known as Chemical-X
[15:43:04] *** Joins: Klinda (~superleag@user/klinda)
[15:48:02] *** Quits: VincentValentine (~VincentVa@178.45.221.165) (Ping timeout: 260 seconds)
[15:48:12] *** Joins: mimmy (~mimmy@146.70.75.148)
[15:50:57] *** Joins: Foaly (~Foaly@user/foaly)
[15:51:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[15:53:26] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[15:54:03] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 268 seconds)
[15:54:26] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:54:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[15:54:56] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[15:56:00] *** Quits: kuoi (~kuoi@109.175.166.57) (Quit: kuoi)
[15:56:08] *** Quits: Nautilus (~me2@d27-96-220-62.nap.wideopenwest.com) (Ping timeout: 260 seconds)
[15:56:13] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:57:55] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:03:15] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[16:03:28] *** Joins: cousteau (~cousteau@user/cousteau)
[16:04:22] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Read error: Connection reset by peer)
[16:04:47] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[16:05:14] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[16:07:42] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[16:08:01] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[16:08:44] *** Joins: Everything (~Everythin@37.115.210.35)
[16:12:02] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[16:13:01] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[16:13:20] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[16:13:34] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[16:14:26] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[16:14:48] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[16:14:59] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[16:16:38] *** Joins: FragByte (~christian@user/fragbyte)
[16:21:59] *** Quits: larry87 (~quassel@2601:2c7:4280:17a0:5f5:abf2:ce06:72c3) (Ping timeout: 264 seconds)
[16:26:52] *** Joins: Symmetria (Symmetria@41.60.231.132)
[16:27:54] *** Joins: VincentValentine (~VincentVa@178.45.221.165)
[16:28:30] <Symmetria> Hey all - random question - does anyone know if its possible to effectively bind a pipe into the af_inet domain - basically - I'm using dpdk - and so packet send/receive is done outside of the normal process, and Im trying to find a way to avoid having to write a tcp stack - and use the linux stack instead, but not sure if I can do that by sending the raw packets in via a pipe
[16:28:51] <Symmetria> (yeah - I know - thats a pretty odd question)
[16:30:57] *** Joins: shivesh (~shivesh@user/shivesh)
[16:31:31] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[16:33:59] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[16:34:10] *** Parts: alioui (~medeva293@102.158.25.170) ()
[16:34:19] *** Joins: de-facto (~de-facto@user/de-facto)
[16:36:36] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:37:13] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[16:37:29] *** Joins: tejr (~tejr@user/tejr)
[16:37:58] *** Quits: VincentValentine (~VincentVa@178.45.221.165) (Ping timeout: 260 seconds)
[16:42:46] *** Quits: i336 (~i336@121.217.197.75) (Ping timeout: 268 seconds)
[16:43:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:43:59] *** Joins: i336 (~i336@101.174.208.159)
[16:48:32] *** Quits: i336 (~i336@101.174.208.159) (Ping timeout: 240 seconds)
[16:49:03] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Read error: Connection reset by peer)
[16:50:09] *** Joins: i336 (~i336@121.217.197.169)
[16:50:21] *** Quits: Symmetria (Symmetria@41.60.231.132) (Ping timeout: 256 seconds)
[16:56:12] *** Joins: Symmetria (Symmetria@41.60.231.132)
[16:59:47] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 264 seconds)
[17:01:41] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[17:03:32] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[17:04:23] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[17:06:14] *** Joins: gproto10 (~gproto23@user/gproto23)
[17:06:43] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com)
[17:09:43] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[17:11:37] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:15:44] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[17:16:35] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[17:16:37] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[17:16:41] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[17:20:04] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[17:20:23] *** Quits: Symmetria (Symmetria@41.60.231.132) (Ping timeout: 268 seconds)
[17:20:30] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:23:08] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:24:23] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 264 seconds)
[17:26:04] *** Joins: mimmy (~mimmy@146.70.75.149)
[17:26:08] <bolovanos_> Is anyone using Visual studio code with intelisense / aka code suggestions?
[17:26:35] *** Quits: Foaly (~Foaly@user/foaly) (Quit: Foaly)
[17:26:50] *** Joins: Symmetria (Symmetria@41.60.231.132)
[17:27:35] <bolovanos_> For me as a beginner - I would appreciate more abundant documentation.
[17:28:12] <bolovanos_> For example on printf function I got this from Intellisense https://pasteboard.co/SX1bF5iGmKYx.png
[17:28:44] <bolovanos_> What I am used to from pythone (pycharm in this case) https://pasteboard.co/zB9A0OrYLFz2.png
[17:29:41] <bolovanos_> I have probably overlooked some settings, or is documentation this blunt?
[17:29:51] *** Joins: plastico (~plastico@neomutt/plastico)
[17:29:55] <fizzie> https://zem.fi/tmp/printf.png is what I get, though that's with clangd.
[17:30:16] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[17:30:45] <fizzie> But really `man 3 printf` is what I imagine people mostly use when they want to see actual documentation. I don't know where the hover-tips are coming from.
[17:30:52] <bolovanos_> fizzie, much better!
[17:30:57] * NRK[m] just uses man pages
[17:30:59] *** Quits: mimmy (~mimmy@146.70.75.149) (Ping timeout: 264 seconds)
[17:31:35] <bolovanos_> This is default settings of my intellisense.
[17:32:02] * cousteau just looks up n1570
[17:32:22] <pragma-> get with the times. n2731 is out!
[17:32:28] <cousteau> no
[17:32:35] <fizzie> I imagine it might have something to do with your C library headers, at least that snippet seems to be directly from a comment in the glibc one.
[17:32:45] <cousteau> I'm already having a hard time accepting that C99 is not the official standard
[17:32:56] <fizzie> Yeah, N2731 is great, especially the table of contents: https://zem.fi/tmp/toc.png
[17:33:16] <pragma-> ,c23
[17:33:16] <candide> C23 Charter: http://open-std.org/JTC1/SC22/WG14/www/docs/n2611.htm -- Working Draft: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2731.pdf
[17:33:27] <bolovanos_> fizzie, ad toc :D
[17:33:46] <fizzie> Hoping they'll sort that out, since it wasn't like that for N2596.
[17:33:51] <pragma-> heh, the gibberish is at the front for me: https://i.imgur.com/LNr2Btu.png
[17:34:34] <pragma-> Fix that whitespace issue with -args by the way.
[17:34:37] <pragma-> Fixed.
[17:35:09] <bolovanos_> fizzie, it looks like this sounds https://youtu.be/lIpev8JXJHQ?t=59
[17:35:10] <candide> Title of bolovanos_'s link: Malkovich? Malkovich - YouTube
[17:35:14] <fizzie> þÿ as ISO-8859-1 is 0xfe 0xff, so I imagine the nonsense has something to do with the Unicode BOM.
[17:35:58] <cousteau> þÿ
[17:36:43] <pragma-> If only they'd just publish the source instead of PDFs. Then we could format it however we wanted and even render it as HTML instead of PDF. How I dream.
[17:36:51] <pragma-> Doesn't the C++ working group do that now?
[17:37:36] <pragma-> I vaguely recall looking at a github of the C++ draft sources and tools.
[17:37:48] <pragma-> https://github.com/cplusplus/draft
[17:37:49] <candide> Title of pragma-'s link: GitHub - cplusplus/draft: C++ standards drafts
[17:38:14] <pragma-> Why can't we have the sources and tools too?
[17:38:40] <cousteau> fizzie: what browser is that?  I get https://i.imgur.com/hzbvsof.png
[17:39:07] *** Joins: seninha (~seninha@user/seninha)
[17:39:07] <cousteau> 1 þÿScope / 2 þÿNormative references / etc
[17:39:16] <cousteau> so hey, at least I get the rest of the title
[17:39:19] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[17:40:24] <cousteau> (browser, pdf viewer, whatever)
[17:40:25] *** Quits: i336 (~i336@121.217.197.169) (Ping timeout: 250 seconds)
[17:41:47] <fizzie> cousteau: Both of my go-to PDF viewers, Zathura and Evince, just show the þÿ. (I forget which libraries they use under the hood.)
[17:42:04] *** Joins: i336 (~i336@101.175.200.45)
[17:42:24] <cousteau> yeah I just realized not everyone views PDFs in the browser directly
[17:42:31] <cousteau> can confirm evince on here
[17:42:39] <earnestly> prounced 'tho-ye'
[17:43:03] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[17:43:40] *** Joins: pucara (~i@181.93.164.73)
[17:43:57] <pragma-> I like how the C++ committee has embraced social media/github/etc: https://github.com/cplusplus
[17:43:58] <candide> Title of pragma-'s link: ISO C++ Standards Committee · GitHub
[17:44:06] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:44:30] <pragma-> Meanwhile, in the C world people still cling desperately to C89.
[17:44:40] <pragma-> And use terminals that are 80 characters wide.
[17:44:44] <cousteau> earnestly: I was pronouncing it like "Ronaldo with a lisp"
[17:45:10] <pragma-> "K&R is a great book!" - #c 2021
[17:45:12] <earnestly> Hmm, it could almost be pronounced as 'thee' tbh
[17:45:12] <cousteau> Thííííí!
[17:45:41] <earnestly> With a little more emphasis on the first 'e' to be more 'y' soundingish
[17:45:53] <cousteau> but with an i that sounds like french u
[17:46:13] <cousteau> because that's how I imagine ÿ is pronounced
[17:46:24] <cousteau> ...looking up which languages have an ÿ
[17:46:42] <roxlu> Hi, I'm looking into using `QueryPerformanceCounter()` on windows to measure time. To use the result I need to call `QueryPerformanceFrequency()`; this needs to be done only once; With C++ you can make use of a constructor to assure that a function is called (e.g. using a global object). But what pattern/technique can I use to initailize something like this with C?
[17:47:04] <pragma-> roxlu: A function.
[17:47:14] <roxlu> yeah I was afraid of that ^.^
[17:47:25] <pragma-> What's so scary about that?
[17:47:48] <earnestly> C++: See no evil
[17:47:57] <roxlu> that means that users of my lib are required to call some init function; it's ok, but I think it's more user friendly if it's not required.
[17:48:17] <roxlu> but yep, a function it is
[17:48:20] <pragma-> init functions are extremely common.
[17:48:26] <earnestly> C++: implicit is better than explicit
[17:48:58] <roxlu> :) in some cases, esp. for this C++ is nice
[17:49:00] *** Joins: somlis (~somlis@user/somlis)
[17:49:41] <pragma-> You don't need multiple init functions for multiple subsystems of your library, if that's what you're worried about. You can have one main init functin that users call, and that function can itself figure out what other functions it needs to call to initialize all of your library's systems.
[17:50:16] <roxlu> yeah I'm going to do something like that indeed
[17:50:41] <earnestly> Ideally they can just declare the necessary structs directly
[17:50:54] <pragma-> giving the users control and power? the horror!
[17:50:56] <earnestly> "But what if I want to break my ABI?"
[17:51:08] *** Joins: nyah (~nyah@94.6.71.219)
[17:51:38] <cousteau> roxlu: you can make an init function with a static var inside
[17:51:38] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[17:51:44] <earnestly> I mean, C is sharp, these near endless attempts to make it 'safe' for users seem to never really end well
[17:52:01] <cousteau> first time you call the function, it'll initialize the static var with the return value of QueryPerformanceFrequency()
[17:52:17] <cousteau> any other time, it'll use the value it assigned the first time
[17:52:20] <earnestly> (Although there can be some fairly sadistic APIs like the str* functions)
[17:53:46] <roxlu> cousteau: thanks, yeah I was looking into that solution, but that would mean I would have to check if the variable was initialize each time the function is called; this function is used for profiling so I want to remove all unnecessary work. For now an init function is probably best.
[17:53:55] <cousteau> int get_performance(void) { static int frequency = 0; if (frequency == 0) frequency = QueryPerformanceFrequency(); return frequency * QueryPerformanceCounter(); }
[17:54:32] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[17:55:19] <cousteau> alternatively, make the var a file-scope static var, create a function that initializes everything (including that var), and somehow cram it into the "list of functions that are called before calling main()".  OR, call it explicitly at the beginning of main().
[17:55:49] <cousteau> I think different platforms provide a way to attach functions to the "list of functions that are called before calling main()".  But I don't think there's a standard way to do that.
[17:56:33] <cousteau> roxlu: how exactly would you use the constructor in C++?  I suspect you'd do a very similar thing in C
[17:56:41] <cousteau> only, using C terminology, not C++
[17:56:50] *** Quits: i336 (~i336@101.175.200.45) (Ping timeout: 260 seconds)
[17:57:25] *** Joins: i336 (~i336@101.175.192.125)
[17:57:36] <roxlu> cousteau: in c++ I would make a global instance and use the constructor of the type to initialize; then use a e.g. C-style function that uses this global
[17:58:25] *** Joins: meator (~meator@user/meator)
[18:00:08] *** Joins: node1 (~node1@user/node1)
[18:00:53] <roxlu> I was also wondering .. on windows there is no support for C11 threads right? (not with MSVC or clang if I'm right?)
[18:01:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[18:02:37] <cousteau> int _main(int argc, char **argv); void before_main(void); int main(int argc, char **argv) { before_main(); return _main(argc, argv); }  #define main _main
[18:03:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:03:25] <cousteau> and then when you define the *real* int main(int argc, char **argv) you're actually defining a _main function that gets called inside the *actual real* main()
[18:03:38] *** Joins: korg815 (~korg815@user/korg815)
[18:03:51] <cousteau> re: C11 threads, no idea, but maybe with mingw-w64 or cygwin?
[18:03:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:dd3:2a50:6ae0:62a1)
[18:04:43] <roxlu> yes I think those are the only options
[18:05:31] <roxlu> i found it strange that stuff like that hasn't been implemented after such a long time; probably they will never be implemented by MSVC, but form clang I would have expected that they implemented this
[18:05:59] *** Joins: mimmy (~mimmy@146.70.75.150)
[18:07:24] <cousteau> mingw-w64 is nice if you can get your hands on it.  It will compile native Windows executables
[18:07:46] <cousteau> unlike cygwin, which compiles some sort of Windows executable that only works in a special semi-emulated POSIX environment
[18:08:14] <pragma-> roxlu: There was a complete patchset contributed to the gcc mailing list that added support for C11 threads by using pthreads (which is what GCC does for C++ threads) but the GCC team ignored it.
[18:08:29] <cousteau> but if it doesn't work in clang, I wouldn't expect it to work in mingw-w64 (which IIUC is mostly a gcc port for windows)
[18:08:39] <pragma-> The C team on the GCC team or whatever. The C++ team is so much better.
[18:09:23] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[18:09:30] <cousteau> anyway, what pragma- said makes me think mingw-w64 won't support them either
[18:11:14] <cousteau> ...welp, yep, seems that gcc doesn't have threads.h (at least mine doesn't)
[18:11:30] <rcf> It is up to the libc to provide them 
[18:12:35] <pragma-> The only compiler I'm aware of that implemented C11 threads is TinyCC. But then again, there are a lot of compilers I'm probably unaware of.
[18:13:05] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 256 seconds)
[18:13:10] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 260 seconds)
[18:13:38] <pragma-> Apparently this exists too: https://tinycthread.github.io/
[18:13:51] <cousteau> https://stackoverflow.com/a/22875599 says it was fixed in glibc 2.28
[18:13:54] <cousteau> I have glibc 2.27
[18:14:03] <cousteau> I really need to update this machine
[18:14:06] <cousteau> but I don't wanna
[18:14:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[18:14:11] <rcf> That is the usual approach by literally every single program I have ever seen attempt to use c threads 
[18:15:19] <cousteau> pragma-: is it really a matter of the compiler supporting them, or just the library?
[18:15:44] <cousteau> I guess some compiler cooperation is needed, because of _Thread_local and stuff like that, but other than that?
[18:15:45] <pragma-> Posted in 2014. Bug last updated in 2018. It's now 2021.
[18:15:56] <rcf> In practice, any platform that could support them had a library for threading decades ago. 
[18:15:58] <pragma-> It's pretty much 2022 now!
[18:16:32] <cousteau> it says edited in 2020 though
[18:16:37] <pragma-> Yeah, there was no big fire under C11 threads because pthreads and Windows threads were already things that people were using.
[18:16:41] <cousteau> it's pretty much 2020 too
[18:16:45] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:17:18] <cousteau> the thing with C11 threads is that they'd allow your program to work on both windows AND linux without having to do weird macro things
[18:17:41] <pragma-> cousteau: The stackoverflow post was edited in 2020, yes. The bug report it links to was last updated in 2018.
[18:17:47] <cousteau> ah
[18:18:04] <cousteau> ...because it was fixed?
[18:18:11] *** Quits: mimmy (~mimmy@146.70.75.150) (Ping timeout: 256 seconds)
[18:18:27] <pragma-> three years ago.
[18:18:43] <rcf> cousteau: and yet here we are, where the only reliable way to use C11 threads on almost any platform is to do even more weird macro things to implement C11 threads with POSIX or Win32 
[18:19:02] *** Joins: rgrinberg (~textual@201.192.183.53)
[18:19:11] <pragma-> It's been 3 years since glibc was "fixed" to support C11 threads and yet we still don't have it.
[18:19:21] <cousteau> rcf: we just need to give it some more time
[18:19:45] *** Quits: shalok (~shalok@user/shalok) (Remote host closed the connection)
[18:19:47] <pragma-> 2011 was ten years ago.
[18:19:55] <cousteau> pragma-: do we not?  I can't test it here...
[18:20:03] *** Joins: shalok (~shalok@user/shalok)
[18:20:14] <cousteau> ,cc #include <threads.h>
[18:20:16] <candide> cousteau: Success (no output).
[18:20:24] <cousteau> ,cc #include <threadsasdasdasd.h>
[18:20:25] <candide> cousteau:  fatal error: threadsasdasdasd.h: No such file or directory
[18:21:27] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:21:29] <pragma-> ,cc #include <threads.h> print(__STDC_NO_THREADS__);
[18:21:32] <candide> pragma-:  No symbol "__STDC_NO_THREADS__" in current context.
[18:21:37] <pragma-> Hmm.
[18:22:24] *** Joins: mimmy (~mimmy@146.70.75.148)
[18:23:26] <cousteau> pragma-: the <threadsasdasdasd.h> header seems to be missing
[18:23:39] <pragma-> I'll get my best people right on that.
[18:23:44] <cousteau> isn't that standard?
[18:23:56] <pragma-> Top men are working on it.
[18:24:01] <pragma-> Top. Men.
[18:24:20] <Bou>  Women couldn't do it?
[18:24:43] <rcf> I believe they work fine on current glibc in any case, and have for many more years for us musl weirdos 
[18:24:55] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[18:26:16] <rcf> No, the compiler doesn’t do it, it’s weird macro shit all the way down because it’s just pthread because no sane human being is going to waste their time on a new thread implementation with OS primitives, but it is there 
[18:26:16] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[18:26:34] <cousteau> pragma-: uh... I think I sorta broke your bot a little
[18:26:40] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[18:27:10] *** Quits: mimmy (~mimmy@146.70.75.148) (Ping timeout: 260 seconds)
[18:28:07] *** Joins: quartz (~quartz@user/quartz)
[18:28:07] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:28:30] *** Quits: i336 (~i336@101.175.192.125) (Ping timeout: 265 seconds)
[18:29:41] <cousteau> goddamned literally first threads.h example I find on the web, and it's wrong
[18:29:54] *** Quits: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8) (Ping timeout: 260 seconds)
[18:30:01] *** Joins: i336 (~i336@101.175.60.14)
[18:31:54] *** Joins: zenstoic (uid461840@hampstead.irccloud.com)
[18:32:45] <cousteau> #include <threads.h> #include <stdio.h>  int run(void *arg) { printf("<I'm in the thread>\n"); return 42; }  int main(int argc, const char *argv[]) { printf("<main() starts>\n"); thrd_t thread; int result; thrd_create(&thread, run, NULL); thrd_join(thread, &result); printf("<Thread returned %d>\n", result); printf("<main() ends\n>"); return 0; } 
[18:33:49] *** Joins: Klinda (~superleag@user/klinda)
[18:34:07] <cousteau> "Free unaffiliated eBook created from Stack Overflow contributors."  oooh, that explains everything
[18:34:53] <cousteau> welp, guess riptutorial.com is one of those sites that paste tutorials without even reviewing them...
[18:36:22] <pragma-> ,sh echo are you broken?
[18:36:23] <candide> pragma-: are you broken?
[18:36:55] <fizzie> What's wrong with that (excepting the "\n>" bit)? 
[18:37:29] *** Joins: dohtem (uid524096@user/dohtem)
[18:38:46] <cousteau> oh I forgot the ,cc , AGAIN
[18:38:50] <cousteau> ,cc #include <threads.h> #include <stdio.h>  int run(void *arg) { printf("<I'm in the thread>\n"); return 42; }  int main(int argc, const char *argv[]) { printf("<main() starts>\n"); thrd_t thread; int result; thrd_create(&thread, run, NULL); thrd_join(thread, &result); printf("<Thread returned %d>\n", result); printf("<main() ends\n>"); return 0; } 
[18:39:00] <candide> cousteau: <main() starts> <I'm in the thread> <Thread returned 42> [Thread 0x7ffff6e51640 (LWP 56585) exited] <main() ends > Thread 1 "prog" hit Breakpoint 3, main (argc=1, argv=0x7fffffffe3d8) at  22       return 0;
[18:39:02] <cousteau> fizzie: nothing because I fixed it
[18:39:16] <cousteau> the \n> bit is due to certain cousteau being an idiot
[18:39:50] <cousteau> https://riptutorial.com/c/example/31557/c11-threads-simple-example --> doesn't work because they're passing a pointer to thrd_t to thrd_join(), when it expects a thrd_t, not a pointer
[18:40:07] <cousteau> but I'm like super smart so I figured out how to fix it
[18:40:29] * pragma- gestures at a website named RIP Tutorial.
[18:40:44] *** Joins: pert (~pert@fsf/member/pert)
[18:40:52] <pragma-> What is up with people saying "RIP" in the wrong contexts all the time?
[18:41:11] <cousteau> RIP the language
[18:41:32] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[18:41:40] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[18:41:50] <cousteau> god, how I wish Google allowed you to vote on results, or flag them as "they don't frigging work"
[18:41:51] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[18:42:58] <pragma-> Google has started asking me "Were these results helpful?"
[18:43:00] <omegatron> because of that, google has become quite useless for me in the past 8 years ..   -_-
[18:43:10] <pragma-> a little pop up in the lower right corner of my browser
[18:43:39] <fizzie> On a related note, I don't interact with LinkedIn, but I sort of had the impression despite its flaws, it's still more or less a serious website, but then I came across some sample questions in their C "skill assessment", and... just look at these things: https://www.linkedin.com/help/linkedin/answer/115353
[18:43:41] <candide> Title of fizzie's link: C Programming - Skill Assessment | LinkedIn Help
[18:43:45] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[18:43:52] <floatcomplex> does copilot learn when it emits wrong code
[18:44:15] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[18:44:19] <cousteau> pragma-: I'm not logged into Google though
[18:44:37] <cousteau> omegatron: the issue with a voting-based system is that it'd be abused
[18:44:46] <pragma-> lol
[18:44:54] <pragma-> "In this code sample, what is NOT a problem for the C compiler?"
[18:44:58] <pragma-> What kind of question is that?
[18:45:03] <cousteau> imagine Apple googles "best phone 2021", and then downvotes every link pointing to Samsung
[18:45:14] <cousteau> then a user googles "best phone 2021" and only sees 
[18:45:16] <cousteau> Xiaomi devices
[18:45:42] <floatcomplex> pragma-: behold. correct use of imagine
[18:45:44] <cousteau> because they made a bigger campaign with troll farms everywhere
[18:45:51] *** Joins: sheldon (~sheldon@user/sheldon)
[18:45:58] <pragma-> floatcomplex: imagine someone using "imagine" correctly
[18:46:09] <floatcomplex> sigh
[18:46:15] <fizzie> TBF it does say "question format: multiple choice", so I guess the real test will have some multiple choice options after the question they're just not showing. But still.
[18:46:23] *** Joins: mimmy (~mimmy@146.70.75.150)
[18:46:25] <cousteau> pragma-: the preprocessing stage?
[18:46:31] <cousteau> the character encoding?
[18:46:36] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Quit: ZNC 1.8.2 - https://znc.in)
[18:48:09] <pragma-> This question is totally not going to cause arguments about the definition of "constant": "In C, how are constants different from regular variables?"
[18:48:12] <cousteau> fizzie: oh.  I remember back in 2008 before my Computers I exam, reviewing exams from other years, and finding a question about "What does x+++++y mean?", and still not being sure what was the correct answer, or what they THOUGHT was the correct answer
[18:48:31] <cousteau> since we had never heard about that during classes
[18:48:46] <pragma-> "constant", in the C standard, means literal values. But I'm positive this LinkedIn assessment is using the wrong "read-only variable" definition.
[18:49:04] <nomagno> pragma: You mean constant as in stuff declared using the 'const' variable?
[18:49:08] <nomagno> qualifier*
[18:49:19] * pragma- points at nomagno
[18:49:23] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[18:49:31] <omegatron> cousteau: I did'nt say, I would favour a "vote-based" system - just that a search with google becomes mor and more useless due to certain factors (for me)
[18:49:58] <nomagno> pragma-: It is basically read-only data. Can only be assigned once, right after initialization
[18:50:22] <pragma-> nomagno: The C language would call those const-qualified, not constants. In the C language, a constant is soemthing like 42, 3.14, "yo momma" or 'X'
[18:50:29] <nomagno> s/initialization/declaration/
[18:50:36] * pragma- continues pointing at nomagno
[18:50:53] <nomagno> pragma-: Why are you pointing at me?
[18:50:58] <nomagno> Sorry, wrong terminology
[18:51:03] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[18:51:11] <pragma-> Because you're proving my point.
[18:51:18] <nomagno> ~~Cry me a river~~ meant const-qualified, sorry
[18:51:45] <pragma-> ,recall me "totally not going to cause arguments"
[18:51:45] <candide> [3m35s ago] <p​ragma-> This question is totally not going to cause arguments about the definition of "constant": "In C, how are constants different from regular variables?"
[18:51:55] <floatcomplex> constant arguments
[18:52:20] <nomagno> Weaponization of ignorance hurts. :(
[18:52:40] <cousteau> omegatron: well yeah, because of having no quality control over the results, google is becoming kinda hard to use
[18:52:53] *** Joins: ai (nukedclx@2001:41d0:8:6153:ffff::1)
[18:53:06] <nomagno> Google takes filters as suggestions now by the way
[18:53:18] <pragma-> Google has also significantly dumbed down its UI. You used to be able to add modifiers and symbols and stuff to do more advanced queries. 
[18:53:25] <nomagno> So you can't even expect stuff in between quotes to be searched for literally
[18:53:36] <omegatron> yeah, I miss those modifiers ..
[18:53:49] <nomagno> DuckDuckGo is doing similarly dumb stuff
[18:53:58] <pragma-> Gotta love the lowest common denominator.
[18:54:06] *** ai is now known as nukedclx
[18:54:46] <nomagno> It seems like devs are obsessed with removing discrete UI elements that allow for advanced configuration
[18:55:10] <pragma-> Less things to go wrong
[18:55:12] <nomagno> Even Firefox has dropped like 75% of its config options, they annoyed literally no one
[18:55:19] <floatcomplex> fewer
[18:55:23] <pragma-> Imagine
[18:55:58] *** Quits: i336 (~i336@101.175.60.14) (Ping timeout: 268 seconds)
[18:56:08] <nomagno> Chromium is fine, I am using Ungoogled Chromium right now. But also leaves a lot to be desited
[18:57:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[18:57:33] *** Joins: i336 (~i336@101.174.81.215)
[18:58:43] <Rounin> Yeah hm... It seems like their plan now is to just keep making the browsers worse now that they have their duopoly
[18:59:14] <nomagno> Firefox isn't even in a Duopoly-style relationship with Chrome
[18:59:23] <Rounin> I had one that would just randomly forget recently open tabs and bookmarks now and then... I don't remember which of them it was anymore, though
[18:59:24] <nomagno> It is controlled opposition
[18:59:51] <Rounin> Yeah... It's not a great situation
[19:00:06] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[19:00:27] <nomagno> You also have Bing, which is Microsoft's meh attempt at not shipping stuff with a Google logo on it, and Brave, which is a scam
[19:00:39] <nomagno> s/bing/edge/
[19:01:46] <Rounin> The central rendering component of many browsers is open source, though, right? KHTML... So the main problem is keeping up with all of the other features... JavaScript functions and HTML features and all of that
[19:03:42] <nomagno> Eh, almost all components of Chrome and Firefox are FLOSS nowadays
[19:04:02] *** Quits: i336 (~i336@101.174.81.215) (Ping timeout: 260 seconds)
[19:04:06] <nomagno> The few that aren't are either drivers, nonessential components, or source available but nonfree
[19:04:56] *** Quits: alch (~alch@151.44.19.62) (Read error: Connection reset by peer)
[19:05:03] <nomagno> The issue is they all have features that indicate malice, incompetence, wrong mindset, or a wrong mindset driven by malicious incompetence
[19:05:43] *** Joins: i336 (~i336@101.175.193.226)
[19:06:32] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[19:08:23] <roxlu> Before I start, I know the "preoptimisation is evil stuff" ... but I'm curious about this and would love to get some advise about the following:
[19:09:33] *** Joins: alch (~alch@151.68.17.184)
[19:09:55] *** Joins: chomwitt (~chomwitt@ppp-94-67-202-36.home.otenet.gr)
[19:10:09] <roxlu> I'm working on a profiler where I capture timings of functions; which are potentially called very often. I measure like: `profile_block_begin("category", "name"); ... profile_block_end("category", "name")`. To keep track of the timings/names/cagetories I would need a way to store them. Waht would be an decent/optimal way to store those?
[19:11:14] *** Joins: superdupond (~Kev@2a01cb0400149f00a98ad0c62b1318a9.ipv6.abo.wanadoo.fr)
[19:11:22] <floatcomplex> whatever perf does :)
[19:12:25] <nomagno> roxlu: I mean, if you don't need to use the names as C tokens, store them in strings.
[19:12:44] <nomagno> AKA char arrays
[19:13:42] <roxlu> floatcomplex: ah, good point ^.^ I'll check the source
[19:14:16] <roxlu> nomagno: not sure what you mean? isn't it obvious that I would need to store the strings/char* ? 
[19:14:31] <floatcomplex> perf might not be doing anything more clever than a one line stack trace per sample
[19:14:41] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[19:15:05] <cousteau> nomagno: oh... well, that explains some things
[19:15:06] <roxlu> floatcomplex: you mean just a huge array with some predefined char array per line?
[19:15:17] <cousteau> nomagno: do you mean quoted words, or quoted sentences?  Because that's not the same
[19:15:59] *** Quits: shivesh (~shivesh@user/shivesh) (Ping timeout: 264 seconds)
[19:16:13] <cousteau> "word" means search exactly for 'word'; "word thing blah" means search for a sentence that loosely looks like 'word thing blah' (but I guess 'word object blabla' would work as well)
[19:16:45] <cousteau> and ""word" "thing" "blah"" means look for the exact phrase of exact words 'word thing blah'
[19:16:48] <Rounin> roxlu: What's optimal depends on what you're doing, though... The fact that the program is a profiler is sort of incidental.
[19:16:49] <cousteau> which looks super weird
[19:17:09] *** Joins: iddev5 (~iddev5@157.41.41.47)
[19:17:12] <Rounin> roxlu: Do you have a fixed set of things you're tracking, for instance., or do you need to dynamically add more strings?
[19:17:35] <nomagno> cousteau: what do you mean quoted words/quoted sentences? What I mean is if you need to store the string, that's fine. But if you need to use the string as a C token (AKA interpreting "while()" as a while loop, and not a string) you obviously can't do that
[19:17:41] <Rounin> roxlu: Do you need to always refer to them as strings, or could you have pointers that you just pass around without doing string compare on them all the time? I.e. string interning
[19:18:42] <Rounin> Either way, the solutions would probably involve a hashmap of some sort, and/or a binary search tree, and/or string interning
[19:18:44] <roxlu> Rounin: ok, yep I understand I didn't share all the info; but this profiler would be used by a library I've just started working on. Many functions (threads) can profile; in most cases the profiler would be enabled for only a certain amount of time;  I'
[19:19:13] <Rounin> A lot of text seems to have been cut off there
[19:19:17] <roxlu> I've got anough memory to  preallocate a big chunk, the category/names don't have "dynamic" names, as in they don't change during runtime. 
[19:19:26] * roxlu hit enter on accident
[19:20:25] <Rounin> Right... So each thing could have a unique identifier that either is or contains a pointer to their string, and they can be compared, looked up etc. with == rather than with strcmp() or strncmp()
[19:20:42] <roxlu> yep
[19:21:00] <Rounin> And if you know the number of strings in advance, an array would be enough, probably, which would be simpler and faster than a hashmap
[19:21:15] *** Joins: Jong (~Jong@2620:10d:c090:400::5:ddb6)
[19:21:54] <roxlu> yeah I wouldn't know the number of strings; that depend on where a user would add profile measurements
[19:22:41] <cousteau> nomagno: I was off-topic-ing about Google, sorry
[19:23:09] <Rounin> Aha... But if the number doesn't change a lot after that, that's still just a malloc away
[19:23:23] <Rounin> Of course, even if it could increase afterwards, there is realloc
[19:23:41] <roxlu> yeah I could easily preallocate enough memory to holds the strings / map 
[19:24:50] <floatcomplex> roxlu: no i mean it just writes lines to a file
[19:24:54] <floatcomplex> one per sample
[19:25:24] <floatcomplex> it's a big file, and parsing it with perl to produce a flame graph takes annoyingly longer than the code being sampled
[19:25:29] *** Joins: Sheilong (uid293653@ilkley.irccloud.com)
[19:25:29] <floatcomplex> but it works
[19:25:31] <cousteau> roxlu: in general, if you know how many elements your thing will have, use an array; if you have a loose idea of the maximum it'll have and don't want to bother with malloc, use an oversized array and leave empty elements if needed; otherwise, use malloc and realloc
[19:25:43] *** Joins: Phandal (~Phandal@user/phandal)
[19:26:42] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[19:26:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:27:02] <cousteau> for the category names, I'd probably use char pointers too.  Unless they all have fixed (short) names or maximum lengths; then a char array seems more reasonable.  Or maybe even indexes.
[19:28:02] <roxlu> cousteau: when you say char*; where would the memory be stored? would you copy it into another storage? or leave it up to the caller?
[19:28:12] *** Joins: missogra (~missogra@dynamic-095-112-086-195.95.112.pool.telefonica.de)
[19:28:37] *** Quits: missogra (~missogra@dynamic-095-112-086-195.95.112.pool.telefonica.de) (Client Quit)
[19:28:39] <cousteau> if the categories are always going to be {"process", "thread", "function"}, then you could just make that an enum, or make up your own convention where 0 = process, 1 = thread, 2 = function
[19:29:03] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[19:29:10] <roxlu> ah yeah, but that's not going to be the use case
[19:29:15] <pingpongball> Is it possible to replace.
[19:29:16] <roxlu> the values can be anything a user wants
[19:29:30] <cousteau> if the categories are going to depend on what the user wants to implement, or you don't know them in advance, you could just say "the category can be an arbitrary string with up to 15 characters", and store it in a char [16]
[19:29:33] <pingpongball> C programming with elisp (a low level variant) programming
[19:30:10] <roxlu> cousteau: I see! and then just a large array to store those
[19:30:17] <cousteau> and if the categories are "whatever the user wants them to be; it could be a three-letter word, it could be King James's Bible", then you'll have to use char *, and malloc each of the strings
[19:30:36] <floatcomplex> orrrr you could just write to a file and forget
[19:30:38] <roxlu> hehe yeah I think limiting them to 15 chars would be ok. 
[19:30:53] *** Joins: useretail (~useretail@185.132.19.151)
[19:30:54] <floatcomplex> no need to keep it in memory at all
[19:31:03] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[19:31:05] <roxlu> floatcomplex: I don't think that's optimal
[19:31:10] <floatcomplex> roxlu: it's what perf does
[19:31:22] <cousteau> correct.  A large array if you know there'll never be more than N categories, or an allocated array if you're not sure, or there'll be a LOT of categories
[19:31:25] <roxlu> floatcomplex: really?
[19:31:37] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[19:32:00] <cousteau> using a file can work well, if you don't plan to be constantly modifying the values, just storing them as they are generated, and forgetting about them
[19:32:32] *** Quits: mimmy (~mimmy@146.70.75.150) (Ping timeout: 240 seconds)
[19:32:44] <roxlu> ok thanks for sharing these ideas! 
[19:32:47] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[19:32:59] <cousteau> if you want something you'll be modifying often, use memory: otherwise, files are fine.  Some OSes even allow you to create temporary files that are fast to access and live in memory
[19:33:16] *** vinleod is now known as vdamewood
[19:33:23] <roxlu> ok
[19:34:05] <nomagno> cousteau: Mainly POSIX-compatible operating systems
[19:34:31] <nomagno> On Windows, Named Pipes are a bit of a nightmare, in my experience
[19:34:36] <nomagno> They work like sockets, not like files
[19:34:42] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[19:34:43] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:3961:f854:3883:a1b9)
[19:35:16] <roxlu> and what about the hash table based solution? Would I store the strings in a buffer and then have a struct like `struct entry { uint32_t name_dx; uint32_t cat_dx }` which then point to a hash table of strings for example?
[19:35:23] <cousteau> well yeah, that's a pipe for you
[19:35:42] <cousteau> stuff goes in on one end, goes out on the other end.  It's not storage; it's a flow.
[19:36:21] * cousteau knew a guy who insisted on referring to any intermediate memory as "FIFO", regardless of how it worked
[19:36:51] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[19:37:01] <pingpongball> Hey guys
[19:37:01] *** Quits: soul-d (~uknown@user/soul-d) (Remote host closed the connection)
[19:37:23] *** Joins: eson123 (~eson123@118.69.128.37)
[19:37:27] *** Quits: geeknix (~pi@2001:e68:5432:3185:f40a:1f47:7e09:1c6e) (Ping timeout: 265 seconds)
[19:37:28] <pingpongball> Where can i find c programming, source code,
[19:37:29] <pingpongball> source code, i mean , that parsers, lexers, optimization, ...... things of c?
[19:37:52] *** Joins: soul-d (~uknown@user/soul-d)
[19:37:54] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[19:38:26] <floatcomplex> pingpongball: https://godbolt.org/z/hae9W5M99
[19:38:38] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:38:59] <pingpongball> thats explorer
[19:45:03] *** Quits: iddev5 (~iddev5@157.41.41.47) (Quit: iddev5)
[19:46:15] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.130)
[19:47:07] <cousteau> pingpongball: like, the gcc source code?
[19:47:16] <pingpongball> yes yes that
[19:47:24] <pingpongball> but in good manner
[19:47:27] <pingpongball> not just code
[19:47:28] <pingpongball> i mean
[19:47:31] <cousteau> you probably don't want to look at the gcc source code, though...
[19:47:34] <cousteau> what do you mean?
[19:47:46] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.9) (Ping timeout: 265 seconds)
[19:47:47] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:3961:f854:3883:a1b9) (Ping timeout: 268 seconds)
[19:47:50] <pingpongball>  that how they build lexer, syntax anaylzer, semantic anayler
[19:47:54] <cousteau> like a tutorial on how to write your own C parser/lexer/compiler?
[19:48:58] <cousteau> if you want to know the technical details of how the C language should be processed, I guess the standard is a good place to look at.  If you want more like an explanation on "how to do it", then I don't know, but I guess there have to  be tutorials
[19:49:13] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:80ec:4373:ceb7:3da9)
[19:51:34] *** Joins: geeknix (~pi@147.158.227.80)
[19:53:20] <roxlu> just did a quick test with the most simple solution where I have an array of `struct { char cat[12]; char name[12]; uint64_t timestamp; }` and write a million times which takes ~60ms. 
[19:55:47] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[19:56:01] <roxlu> repeating that 1 million loop, 20 times takes 387 millis. I guess that's neglectible for doing profiling
[19:56:24] <cousteau> it depends on how long the profiled app takes
[19:57:17] <cousteau> or how you do the profiling.  Ideally you should stop the watch before you perform any non-target-application operation, and turn it back on when you go back to the application
[19:57:29] *** Joins: daniel-s (~daniel-s@pa49-199-34-22.pa.vic.optusnet.com.au)
[19:58:54] <daniel-s> Is there a better way to create a common interface for which function allocates new memory? So, if a() is calling b(), should a() allocate and send a pointer of where to put something, or should b() allocate and return a pointer.
[19:58:56] <daniel-s> ?
[19:59:20] <roxlu> cousteau: yeah true, the profiler might be used to measure a game/graphics loop which has 16ms per loop. 
[20:01:08] <roxlu> one write of an profile entry takes ~0.018 micro secs with my test case; not sure how realistic this is as it's just one loop
[20:02:04] <cousteau> yeah if you're gonna perform one realloc every 16 ms I don't think it'll be a huge deal...
[20:02:50] <cousteau> daniel-s: I usually try to avoid having unbalanced malloc()s and free()s, so I try to keep them paired inside each function
[20:03:45] <cousteau> and, if I HAVE to make a function that allocates stuff, then I give it a name that clearly states that it calls malloc so that I know I have to free at the end, or give it a name that suggests it's some sort of "constructor" and I have to call the corresponding "destructor" afterwards
[20:05:16] <cousteau> e.g. my thingummy.h library may have a thingummy_t *thingummy_alloc() function, which literally has "alloc" in the name, so if I use it in a function I must make sure that every thingummy_alloc() eventually has a corresponding free()
[20:05:54] <cousteau> or, if I want to be more obscure about the use of malloc(), I can have thingummy_create() and thingummy_delete() functions, which will perform the malloc and free respectively (plus some other stuff, maybe)
[20:06:11] <cousteau> then I know I just have to keep them in pairs
[20:06:47] <cousteau> other than that ("creator/destructor functions"), I try to keep my mallocs and frees paired in each function
[20:07:16] <floatcomplex> roxlu: is there a reason you're not just using actual perf?
[20:07:29] <cousteau> daniel-s: Another reason to make your function take a previously allocated pointer is that that lets the user choose if they use malloc() or just pass an array
[20:07:33] <floatcomplex> i mean there are some reasons not to in certain circumstances, but do they apply to you?
[20:08:24] <roxlu> floatcomplex: I'm using perf as well, but his will give me a bit more control and an .json file I can use with chrome://tracing
[20:09:21] <cousteau> void write4ints(int output[]);   int *p = malloc(4 * sizeof *p); write4ints(p); /* works */   int a[4]; write4ints(a); /* works */
[20:09:43] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Read error: Connection reset by peer)
[20:10:28] <fizzie> void write4ints(int output[static 4]); // let's be modern here
[20:12:55] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[20:13:46] * cousteau didn't know whether to use int *output or int output[static 4] so he went with int output[] as a compromise
[20:14:00] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[20:15:28] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[20:15:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:16:30] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[20:16:52] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[20:18:02] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[20:18:36] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 268 seconds)
[20:19:03] <floatcomplex> write(); // can write 4 ints
[20:20:35] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 256 seconds)
[20:24:50] *** Quits: daniel-s (~daniel-s@pa49-199-34-22.pa.vic.optusnet.com.au) (Quit: Konversation terminated!)
[20:26:52] *** Joins: charadon (~charadon@155.138.164.183)
[20:32:11] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 264 seconds)
[20:32:41] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:33:45] *** Quits: esselfe (~steph@user/esselfe) (Ping timeout: 250 seconds)
[20:34:13] *** lukedashjr is now known as luke-jr
[20:34:26] <nomagno> Is there any way to have two pointers to the same address, and have pointer 1's dereference be const, and pointer 2's dereference not?
[20:34:54] <floatcomplex> yes
[20:35:12] <nomagno> How?
[20:35:35] <nomagno> s/const/const-qualified/
[20:35:47] <riv> const void *a = p; void *b = p; I think?
[20:36:30] <floatcomplex> yeah as long as you don't use restrict on either of them, it's fine
[20:36:34] <gproto10> i have two fread() in my code like this `fread(pwfile.pass, 1, 10, fp);` they read from the same file but they don't read the same things. for instance, i have text file like this context with "1234567890 AAAAAAAAA". first fread reads first 10 elements "1234567890" and second fread reads 10 elements too but it reads "AAAAAAAA" after first fread's did. my question is: how the second fread() knows where the first one stopped?
[20:36:38] <nomagno> riv: now, that makes the pointer's address itself be either const or nonconst. I am talking about the dereference
[20:37:06] <nomagno> Wait no. I am confused now
[20:37:25] <nomagno> When I do just that, GCC gives me a warning bout the qualifier being discarded with the const one
[20:37:36] <floatcomplex> nomagno: https://godbolt.org/z/9r5sWh5E9
[20:37:44] <floatcomplex> whatever you're doing it's not this
[20:37:51] *** Joins: esselfe (~steph@user/esselfe)
[20:38:05] <floatcomplex> const here just means you're not allowed to write through that variable. it doesn't mean the variable can't change
[20:38:06] *** Joins: unix_chad (~quassel@115.98.203.126)
[20:38:20] <twkm> yes gproto10.  given there's no way to provide an offset it pretty much has to work that way.
[20:38:42] <nomagno> Ahhh, I understand what my issue is
[20:38:55] <floatcomplex> too many macros
[20:39:05] <nomagno> Well this is definitely convenient! Thanks
[20:39:16] <nomagno> floatcomplex: what?
[20:39:39] <floatcomplex> nomagno: your issue is too many macros in your code :)
[20:40:08] <nomagno> but I was working with a minimal example :(
[20:40:16] <unix_chad> why are the c elitists obsessed over c89?
[20:40:24] <riv> because of k&r
[20:40:29] <unix_chad> wdym
[20:40:34] <floatcomplex> unix_chad: just ignore it
[20:40:46] <pragma-> You know how they call overly-complicated inter-twining code "spaghetti code"? I propose "macaroni code" for code that uses too many macros.
[20:40:54] <floatcomplex> nice
[20:40:57] <twkm> some people dislike change.
[20:40:59] <nomagno> K&R 2 doesn't really describe idiomatic C89 in a few ways, and it was a conscious decision
[20:41:04] <riv> I dislike change
[20:41:14] * vdamewood takes away all of riv's coins.
[20:42:05] <unix_chad> nomagno: i guess k&r is outdate now right
[20:42:23] <twkm> depends who you ask.
[20:42:35] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:42:59] <unix_chad> twkm: why i mean they don't follow the mordern c 
[20:43:09] <unix_chad> *modern
[20:43:19] <nomagno> By almost all objective metrics, yes. However, elegance is on the eyes of the observer
[20:43:41] <nomagno> C89 is, by definition, not modern C
[20:43:41] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[20:43:47] <twkm> as i said, some don't like change.
[20:43:49] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[20:44:30] <unix_chad> well ig it's upto the person writing then
[20:44:31] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:44:58] <twkm> indeed, it always has been.
[20:45:56] <twkm> sometimes the tools decide, but usually it's the person.
[20:47:03] <unix_chad> whenever i am trying to find libraries for something they are either too ancient or don't have docs lol
[20:47:28] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Quit: Konversation terminated!)
[20:47:47] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[20:48:12] <nomagno> The C way is to just write it yourself unless it is a monstrous task. Probably just due to lack of proper package management, which isn't necessarily a bad thing
[20:48:42] <unix_chad> nomagno: what do you think about modules for c?
[20:48:52] <unix_chad> like the way golang has?
[20:48:55] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:80ec:4373:ceb7:3da9) (Ping timeout: 250 seconds)
[20:49:12] <twkm> plenty of people reuse, but often we mostly get learners which are writing it themselves for the learning of some aspect or six.
[20:49:14] *** Joins: Famine- (~Famine@user/famine)
[20:49:41] <nomagno> unix_chad: well C has headers and linking. "Modules" would mean conditioning the ABI
[20:49:47] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[20:50:16] <unix_chad> nomagno: that means no backwards compatibility right
[20:50:48] *** Quits: simon323 (~simon323@2409:8a34:46c:5830:619b:eb:9e48:f97a) (Quit: simon323)
[20:50:49] <nomagno> Well I definitely find hacking some programming concept into C is more fun than reading up on it religiously and switching to languages that implement it
[20:51:05] <floatcomplex> :)
[20:51:11] <unix_chad> yeah i mean there is always scope to learn
[20:51:25] <floatcomplex> c11 + userspace coroutines = bliss
[20:52:17] <nomagno> floatcomplex: meh, my coroutines implementation is written in C99
[20:52:19] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 256 seconds)
[20:52:30] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[20:53:08] *** Quits: X-Scale (~ARM@83.223.248.137) (Ping timeout: 268 seconds)
[20:53:23] <floatcomplex> you can't *write* a userspace coroutine implementation in c99 or c11. but you can provide an api to one in c89 or anything else
[20:53:27] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Client Quit)
[20:53:57] <floatcomplex> if your c99 coroutine impl is using longjmp then it's going to behave spectacularly badly under certain libc's
[20:54:05] <floatcomplex> including glibc with default settings on popular linux distros
[20:54:14] *** X-Scale` is now known as X-Scale
[20:54:50] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[20:55:02] <floatcomplex> my understanding of why swapcontext was removed from posix is that it's not actually possible for the *api* to be compliant c, but rather than fixing that, they just removed it
[20:55:26] <nomagno> floatcomplex: No, it is using proper portable methodology, the same that Duff looooves: the "stack" is a global struct, and it is a big switch statement
[20:55:36] <floatcomplex> oh fuck off
[20:55:57] <floatcomplex> or at least please don't write important code using that
[20:56:13] <floatcomplex> and don't use the word coroutines to describe it
[20:56:33] <nomagno> I don't write important code in general.... But yeah I don't plan on publishing anything that uses that
[20:56:34] <floatcomplex> they're not real coroutines, they don't have their own call stack, they can't yield from inside functions &c.
[20:57:03] <nomagno> What do you mean they can't yield from inside functions?
[20:57:11] <floatcomplex> nomagno: https://gist.github.com/rlcamp/f6efb0b1bab9a60de7e6323ea82641d8#file-coroutine_morse_demo-c-L64-L66
[20:57:12] <candide> Title of floatcomplex's link: Coroutines for generator functions, sequential pipelines, state machines, and other uses in C · GitHub
[20:57:29] <floatcomplex> lines 64-66 there can be inside a function, in this proper coroutine impl
[20:57:38] <floatcomplex> in your duff's device thing, they cannot
[20:57:38] *** Joins: bruda (~bruda@172.58.63.127)
[20:58:33] <floatcomplex> nomagno: your *coroutines* do not have their own call stack. they can call functions, but they need to return from those functions before they can yield to the parent coroutine
[20:59:07] <floatcomplex> s/*coroutines*/"coroutines"/
[20:59:11] *** Joins: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[20:59:37] <floatcomplex> that's concern number 2 or 3 after the "local variables aren't persistent and the compiler can't help you validate that you aren't assuming they are" issue which should be a showstopper
[20:59:41] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:00:04] <floatcomplex> just use swapcontext, if you don't want to use asm directly
[21:00:15] <nomagno> Like I said, I am aware of enough issues. It is just fun to goof around with
[21:00:29] <twkm> those api's are no longer part of posix.
[21:00:29] <floatcomplex> ok but don't call them coroutines
[21:00:36] <floatcomplex> twkm: yes, we discussed that above
[21:00:44] <nomagno> I don't understand what you mean by "they need to return from those functions"
[21:01:10] <nomagno> I am probably missing some important behaviour about coroutines
[21:01:39] <floatcomplex> nomagno: ok here's a better example https://gist.github.com/rlcamp/a29a7cd59c6aace4fd0880733faa6fae
[21:01:40] <candide> Title of floatcomplex's link: coroutine tone generator · GitHub
[21:02:21] <floatcomplex> nomagno: tone_generator is the coroutine. note how it calls tone(), which calls yield_sample(), which calls coroutine_switch()
[21:02:38] <floatcomplex> i.e. coroutine_switch() is called two functions down into the coroutine's call stack
[21:02:54] <floatcomplex> and when the parent yields back to that child, execution resumes from that point two functions down into the coroutine's call stack
[21:03:00] *** Joins: iddev5 (~iddev5@157.41.36.75)
[21:03:00] <floatcomplex> your "coroutines" do not have a call stack
[21:05:06] <floatcomplex> penny in the air...
[21:05:32] <nomagno> what do you mean "when the parent yields back to that child"?
[21:05:41] <nomagno> Which is the parent, and which is the child?
[21:05:56] <floatcomplex> the parent is main()
[21:06:00] *** Joins: mahmutov (~mahmutov@37.155.84.125)
[21:06:19] <floatcomplex> or in this case, regular_ass_sdl_audio_callback()
[21:07:02] <floatcomplex> read all the code comments
[21:07:36] <floatcomplex> but there is a very basic thing that is about to click for you before you read all the code comments
[21:09:09] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:11:40] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[21:12:24] *** Quits: unix_chad (~quassel@115.98.203.126) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:12:47] <nomagno> OOOOH
[21:13:03] <nomagno> I definitely can't implement that
[21:13:05] <floatcomplex> and the penny drops
[21:13:13] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[21:13:41] <floatcomplex> you can, though, using swapcontext or something that behaves equivalently using asm
[21:13:51] <floatcomplex> swapcontext is just a crappy api that provides access to that asm though
[21:13:56] <nomagno> I can only do "abomiroutines" that travel up and down the call stack, linearly, and without skipping anything
[21:14:27] <floatcomplex> that's why i say don't call those duff's device things coroutines
[21:14:40] *** Parts: Phandal (~Phandal@user/phandal) ()
[21:14:42] *** Joins: unix_chad (~quassel@115.98.203.126)
[21:14:46] *** Joins: mkkk (~mkkk@89-76-247-208.dynamic.chello.pl)
[21:15:17] <nomagno> I don't get why you call that Duff's device tough. Duff's device is just a special use of fall-trough switch statements, and one I don't need for this
[21:15:49] <floatcomplex> what you are doing is a generalization of duff's device, that duff alluded to when he was originally describing the device. he said it was too horrible to go into
[21:16:08] <floatcomplex> and then simon tatham wrote an article about it, and said don't do this
[21:16:21] <floatcomplex> and then he wrote a popular ssh client using it, because he's a hypocrite
[21:16:29] <floatcomplex> but, don't
[21:16:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4882-920c-9355-aa7d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:17:22] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Read error: Connection reset by peer)
[21:18:24] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[21:18:49] <nomagno> well, you can simulate this call stack thingy if you never return to main, and everything BUT main is implemented like this, and you use a horrendous argument convention
[21:18:58] *** Quits: unix_chad (~quassel@115.98.203.126) (Client Quit)
[21:19:56] <floatcomplex> sounds like code that only you would be able to debug, after you wrote it that way
[21:20:32] <nomagno> And it would suck anyways
[21:21:13] *** Quits: i336 (~i336@101.175.193.226) (Ping timeout: 256 seconds)
[21:21:47] *** Quits: eson123 (~eson123@118.69.128.37) (Ping timeout: 256 seconds)
[21:22:21] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:23:01] *** Joins: i336 (~i336@101.163.197.15)
[21:24:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[21:24:51] *** Joins: korg815 (~korg815@user/korg815)
[21:24:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a50a-ad81-e6f5-8749.res6.spectrum.com)
[21:25:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:28:39] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a50a-ad81-e6f5-8749.res6.spectrum.com) (Remote host closed the connection)
[21:29:09] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[21:29:16] *** Quits: zenstoic (uid461840@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:30:06] *** Joins: joev (~joev@user/joev)
[21:30:51] *** Quits: esselfe (~steph@user/esselfe) (Ping timeout: 256 seconds)
[21:33:16] *** Joins: mrig (~mrig@user/mrig)
[21:33:41] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[21:34:14] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[21:34:35] *** Joins: luizfrds (~Luiz@152.250.243.147)
[21:37:13] *** Quits: terminalpusher (~terminalp@2a01:586:12e7:1:ecac:12bf:39fa:2ed) (Remote host closed the connection)
[21:37:37] *** Joins: esselfe (~steph@user/esselfe)
[21:42:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:44a0:dd67:7917:26dc) (Ping timeout: 240 seconds)
[21:43:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:8529:315f:ee39:e54c)
[21:44:21] *** Joins: noarb (~noarb@user/noarb)
[21:44:28] *** Joins: terminalpusher (~terminalp@2a01:586:12e7:1:ecac:12bf:39fa:2ed)
[21:46:24] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[21:47:39] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[21:48:11] *** Quits: katnis (uid15849@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:48:17] *** Quits: noonien (~noonien@user/noonien) (Quit: Ping timeout (120 seconds))
[21:48:39] *** Joins: noonien (~noonien@user/noonien)
[21:50:11] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[21:50:47] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:51:59] *** Quits: joev (~joev@user/joev) (Ping timeout: 264 seconds)
[21:52:26] *** Joins: joev (~joev@user/joev)
[21:53:13] <bruda> ,kr ex2-2
[21:53:47] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 264 seconds)
[21:53:54] <bruda> ,kr2-2
[21:53:54] <candide> Chapter 2: Types, Operators and Expressions; Exercise 2-2. Write a loop equivalent to the for loop above without using && or ||. [The for loop is: for (i=0; i < lim-1 && (c=getchar()) != ’\n’ && c != EOF; ++i) s[i] = c;]
[21:54:20] <bruda> does that mean I replace the iterator with an equivalent line or that I go into the loop and do the checks with if/etc?
[21:55:27] <bruda> An exercise of understanding precedence? Or just seeing what && and || can simplify?
[21:55:55] <riv> man operator
[21:57:04] <floatcomplex> ,cc return SIG_ATOMIC_MAX
[21:57:07] <candide> floatcomplex:  Exit 255
[21:57:28] <floatcomplex> why is this a thing
[21:57:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:59:29] <nomagno> I mean, some implementations may have support for signals with value greater than 255, and some some might not
[21:59:30] <nomagno> IDK
[22:00:09] <nomagno> no, related to C11 sig_atomic_t
[22:00:09] <nomagno> my bad
[22:01:19] <floatcomplex> iirc the only valid thing to do with a sig_atomic_t is test, set, or clear it. not increment
[22:01:26] *** Joins: zenstoic (uid461840@hampstead.irccloud.com)
[22:01:30] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[22:01:41] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[22:02:21] <nomagno> Well it is not necessarily hard to increment it manually if testing is an option. Just a PITA
[22:02:41] *** Joins: cousteau (~cousteau@user/cousteau)
[22:02:47] *** Joins: hans_ (~hans@36.84-48-255.nextgentel.com)
[22:03:40] <floatcomplex> that's what _Atomic is for, but code that relies on that with signals is probably subtly broken
[22:03:48] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[22:03:58] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:04:43] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[22:05:11] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 250 seconds)
[22:05:37] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 250 seconds)
[22:06:59] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[22:08:32] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 240 seconds)
[22:11:05] *** Quits: mven` (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 256 seconds)
[22:12:07] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 265 seconds)
[22:12:42] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[22:13:02] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[22:13:13] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:13:43] *** Quits: mkkk (~mkkk@89-76-247-208.dynamic.chello.pl) (Quit: Client closed)
[22:14:18] *** Joins: luizfrds (~Luiz@152.250.243.147)
[22:14:50] *** Joins: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e)
[22:15:47] *** Quits: mimmy (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[22:15:54] *** Joins: aliosablack (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374)
[22:18:51] *** Quits: chomwitt (~chomwitt@ppp-94-67-202-36.home.otenet.gr) (Ping timeout: 268 seconds)
[22:19:07] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[22:24:10] *** Joins: luizfrds (~Luiz@152.250.243.147)
[22:24:21] *** Quits: iddev5 (~iddev5@157.41.36.75) (Quit: iddev5)
[22:24:32] *** Quits: superdupond (~Kev@2a01cb0400149f00a98ad0c62b1318a9.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:25:02] *** Quits: aliosablack (~chomwitt@2a02:587:dc2d:ec00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[22:29:41] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.130) (Remote host closed the connection)
[22:31:01] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[22:31:57] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:32:10] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[22:32:56] *** Joins: strajder (~strajder@user/strajder)
[22:33:15] *** Joins: luizfrds (~Luiz@152.250.243.147)
[22:39:45] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[22:40:02] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[22:40:17] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 250 seconds)
[22:42:19] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:42:49] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 256 seconds)
[22:44:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 240 seconds)
[22:44:41] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[22:45:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:49:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[22:50:11] *** Quits: i336 (~i336@101.163.197.15) (Ping timeout: 264 seconds)
[22:51:29] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[22:51:32] *** Joins: i336 (~i336@101.174.127.25)
[22:54:15] *** Joins: luizfrds (~Luiz@152.250.243.147)
[22:54:35] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[22:54:37] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[22:55:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:56:29] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[22:57:27] *** Joins: luizfrds (~Luiz@152.250.243.147)
[22:59:33] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 268 seconds)
[22:59:34] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[23:00:24] *** Joins: luizfrds (~Luiz@152.250.243.147)
[23:00:52] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[23:01:50] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:02:01] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[23:02:02] *** Quits: i336 (~i336@101.174.127.25) (Ping timeout: 260 seconds)
[23:03:05] *** Joins: System_Error (~SystemErr@user/systemerror)
[23:03:50] *** Joins: i336 (~i336@101.163.159.254)
[23:05:49] *** Quits: alch (~alch@151.68.17.184) (Read error: Connection reset by peer)
[23:08:12] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 268 seconds)
[23:10:01] *** Joins: alch (~alch@151.34.24.5)
[23:10:05] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[23:10:47] <bruda> Oh snap. I think I found a solution to kr2-2 replacing the iterator with a setup of nested ternary's and it appears to be working. 
[23:11:22] <smallville7123> never knew this o.o
[23:11:26] <smallville7123> "One of the best features of Lua is its very well designed C API. This is very useful if you have an existing C library you need to integrate with Lua or quickly get a Lua script running on the C side of the game. Finally Lua plays so nice with C that if you need to optimise for speed you can re-write it in C a lot easier than other languages."
[23:12:07] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[23:12:52] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[23:12:53] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[23:13:24] <bruda> https://ideone.com/2iamQ6 <- think I accomplished the kr2-2 exercise with this solution?
[23:14:07] <bruda> line 28 is the line I rewrote 'without && or ||'.
[23:16:52] *** Joins: mven` (~mven@ip68-104-39-54.lv.lv.cox.net)
[23:16:57] <bruda> looking into solutions online seems most just went into the loop testing conditions inside rather than replacing the iterator with something that performs the same tests.
[23:17:35] * cousteau still doesn't know if `int main() { ... }` is OK or if it should be `int main(void) { ... }`
[23:17:59] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 250 seconds)
[23:18:36] <cousteau> bruda: oh god
[23:19:04] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c043:1d10:b1d0:8d06)
[23:19:04] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c043:1d10:b1d0:8d06) (Changing host)
[23:19:04] *** Joins: skapata (~Skapata@user/skapata)
[23:19:08] <cousteau> why
[23:19:33] <bruda> Hey I'm a newbie just trying to do the exercises :P
[23:19:58] <cousteau> also, I'd have preferred `a ? b : c ? d : e` to `a ? (b ? c : d) : e`
[23:20:24] <cousteau> bruda: no but I mean, why without && or ||?  did the exercise require it?
[23:20:33] <bruda> , kr2-2
[23:20:33] <candide> Chapter 2: Types, Operators and Expressions; Exercise 2-2. Write a loop equivalent to the for loop above without using && or ||. [The for loop is: for (i=0; i < lim-1 && (c=getchar()) != ’\n’ && c != EOF; ++i) s[i] = c;]
[23:21:12] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[23:21:31] <cousteau> ...maybe they meant "don't put that in the loop condition, but... somewhere else"?
[23:21:35] <cousteau> brb, lemme get my book
[23:21:37] <bruda> Took me a little while to figure out even this much of a solution. Sure it can probably be refined but I just finally got a working solutions.
[23:21:53] <bruda> The section is covering precedence of operators.
[23:22:25] <bruda> I assumed they wanted me to find a solution that removed the && and || to use some form of precedence to accomplish the same feat.
[23:23:47] <bruda> All the crazy ways I tried all failed but the nested ternary's.
[23:23:52] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:23:52] *** tusko is now known as OrganicDillo
[23:24:09] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[23:25:08] <cousteau> ...ok I have no idea what they had in mind while writing that exercise.  Maybe add them all together?
[23:25:43] * bruda shrugs
[23:25:50] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[23:25:54] <bruda> Seemed like the easy way. So this was more challenging.
[23:26:10] <cousteau> instead of x!=1 && x!=2 && x!=3, do something like (x!=1) + (x!=2) + (x!=3) == 3
[23:26:10] <bruda> Solutions online seem to just go into the loop and do more testing.
[23:26:40] <cousteau> personally I'd have used `break`, but they don't explain that until ch.3, so that's not it
[23:26:49] <fizzie> That thing "needs" the special evaluation guarantees of &&.
[23:26:50] <bruda> Yea but look at the conditions being tested. != '\n', != EOF, etc.
[23:27:56] *** Quits: i336 (~i336@101.163.159.254) (Ping timeout: 268 seconds)
[23:27:56] <cousteau> fizzie: oh right, not all of them are just !=
[23:28:03] <fizzie> `i < lim-1 && (c=getchar()) != ’\n’ && c != EOF` must not call getchar() if i >= lim-1. And must of course do the assignment to c before testing `c != EOF`.
[23:28:10] <cousteau> and, uh, the order matters yeah
[23:28:54] <cousteau> fizzie: and also ((c=getchar) != EOF) + (c != '\n') is undefined behavior
[23:29:16] *** Joins: i336 (~i336@101.175.21.69)
[23:29:27] <bruda> Yea I tried a lot of weird stuff before the ternary idea hit me.
[23:30:05] <fizzie> `for (i = 0; i < lim-1; ++i) { c = getchar(); if (c == '\n') break; if (c == EOF) break; s[i] = c; }` would be a pretty non-eyebrow-raising solution, I think.
[23:30:14] <cousteau> but that's section 2.6 and they don't explain ?: until 2.11
[23:30:30] <bruda> actually ternary was mentioned already
[23:30:48] <cousteau> oh?
[23:31:08] <bruda> let me see if I can find where. But it was the book that mentioned it to me.
[23:31:20] <cousteau> I believe you
[23:34:02] <cousteau> anyway, the right answer might be to use `break`, even if that's not explained until ch.3
[23:34:07] <cousteau> or is it mentioned before?
[23:34:20] <cousteau> OR, or, use lots of if's
[23:34:55] <bruda> Yea seems like things would have gotten crazy otherwise.
[23:35:01] <cousteau> ...which is pretty much the same as using ?:, so I guess bruda's solution was 100% legit
[23:35:18] <cousteau> only, I'd rather write ?:?:?: than ?(?(?:):):
[23:36:05] *** Quits: i336 (~i336@101.175.21.69) (Ping timeout: 256 seconds)
[23:36:18] <bruda> I'm still trying to find the part where it did a subtle mention of ?: I swear it came up somewhere.... If I'm wrong then perhaps I cheated on the example. 
[23:36:18] <fizzie> I don't think that's pasted solution with ternaries is equivalent to the original loop.
[23:36:24] <cousteau> (which can be written without parentheses anyway, but that looks bad)
[23:36:49] <fizzie> The loop will call getchar() before testing whether `i < lim - 1`.
[23:37:01] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[23:37:05] <bruda> Hmm true. 
[23:37:09] <cousteau> yeah the order is wrong in bruda's solution
[23:37:19] <cousteau> should check for i<lim-1 first
[23:37:34] <cousteau> then do c=getchar() and compare it with '\n'
[23:37:39] <cousteau> and finally compare c with EOF
[23:37:58] <cousteau> ('\n' and EOF interchangeable in order, but the assignment must come in second)
[23:38:03] <bruda> Hmm. Ok I'll try to rework it. 
[23:38:21] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[23:38:37] <cousteau> ...while you're at it, could you try to make it look like (A) ? B : (C) ? D : E so that it is easier to read?
[23:38:38] <fizzie> `for (i = 0; i < lim-1; ++i) { c = getchar(); if (c == '\n') i = lim-1; else if (c == EOF) i = lim-1; else s[i] = c; }` would be a break-free version of my break-y suggestion.
[23:39:33] <cousteau> fizzie: I was thinking on something like that, except it'd keep calling getchar() even after encountering a \n or EOF for the first time
[23:39:42] <fizzie> It doesn't, because of the `i = lim-1`.
[23:39:54] <cousteau> oh, I missed that
[23:40:04] <bruda> cousteau: you mean () the conditionals for clarity?
[23:40:16] <cousteau> fizzie: I was thinking on something like that, except it (with "it" being what I was thinking of) would keep calling getchar() even after encountering a \n or EOF for the first time
[23:40:39] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[23:40:41] <cousteau> bruda: no, just the order of ? and :
[23:41:02] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 240 seconds)
[23:41:31] <cousteau> A ? B : C ? D : E looks like an if-elseif-else structure, which is kind of easy to read
[23:41:37] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[23:41:46] <fizzie> Yeah, `a ? if-a : b ? if-b : c ? if-c : otherwise` is kind of more logically grouped than `!a ? !b ? !c ? otherwise : if-c : if-b : if-a`.
[23:41:47] *** Joins: finsternis (~X@23.226.237.192)
[23:41:51] <cousteau> "if this happens, you get this; otherwise, if that happens, you get that; otherwise, you get this"
[23:42:27] *** Joins: i336 (~i336@101.175.225.27)
[23:42:29] <bruda> I think I understand. I'll rework the order of the conditions then try to simplify the logic for clarity.
[23:42:38] <clarity> Thanks
[23:43:00] <bruda> lol
[23:43:04] <cousteau> whereas A ? B ? C : D : E is more confusing: "if this happens, then if that happens, then you get this, otherwise (to the "that happens"), you get that, otherwise (to the "this happens"), you get this"
[23:43:18] <cousteau> clarity: haha
[23:44:21] <fizzie> I guess for the special case of replacing a && chain, maybe `a && b && c` -> `a ? b ? c ? 1 : 0 : 0 : 0` is reasonable enough. You're not really saying "if a, then if b, then if c", you're saying "if a and b and c". Assuming the reader realizes that, anyway.
[23:44:31] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[23:44:59] <cousteau> I didn't even know you could a?b?c:d:e without using parentheses until now...
[23:45:09] <cousteau> a?b:c?d:e is kinda more obvious
[23:45:23] <bruda> Guess maybe I must have been looking into something I read and found the ? : mentioned somewhere else. I still feel like I put together a solution that was more inline with what the exercise was instructing.
[23:45:51] <fizzie> Yeah, the precedence of ?: is kind of subtle. You can put assignments in the middle part as well.
[23:46:09] <fizzie> As in, `a ? b = c : d` is fine, `a ? b : c = d` isn't.
[23:46:21] <cousteau> yeah, ?: is quite similar to && || in nature
[23:46:27] <fizzie> ,parens a ? b = c : d
[23:46:27] <candide> fizzie: (a) ? (b = c) : (d)
[23:46:29] <fizzie> ,parens a ? b : c = d
[23:46:30] <candide> fizzie: Error: <input>:1:11: before: =
[23:46:55] <bruda> Oh there it is. I did find it in the book
[23:47:00] <cousteau> fizzie: oh wow, weird
[23:47:13] <bruda> No wait, that's later in the book. My bad.
[23:47:43] <bruda> Suppose to stay true to the book I can do logic in the body of the loop....
[23:47:44] *** Quits: hans_ (~hans@36.84-48-255.nextgentel.com) (Quit: Leaving)
[23:48:12] <cousteau> too late; I now like your answer.  I just had an issue with (1) not simply using && || (which isn't your fault, but a requirement of the exercise), and (2) the sequence of ? : being weird and counter-intuitive
[23:48:39] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[23:48:51] <bruda> lol I like mine better too. I suppose if the book expected some previous experience with coding it might assume we'd think of ternary.
[23:49:08] <bruda> Or discover it while looking up operators.
[23:49:32] <fizzie> `a ? b : c = d` would parse as `(a ? b : c) = d` if ,parens didn't do error-checking. But yeah, it's kind of weird how the true-branch is "syntactically different" than the false-branch.
[23:49:57] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2)
[23:50:11] <fizzie> It's kind of got "implicit parentheses".
[23:50:37] <cousteau> how is that even possible though?
[23:50:53] <bruda> Oh now I see where I saw it. when 'man operator' was mentioned
[23:51:15] <bruda> I opened the man page and it has ?: in the precedence order.
[23:51:25] <cousteau> in principle the = operator has lower precedence than the ?: operator, so a ? b = c : d shouldn't be valid
[23:51:41] <bruda> Well yea, hence the ()
[23:51:54] <cousteau> (...what a coincidence, I had just opened the man operator manpage) :)
[23:51:57] *** Quits: i336 (~i336@101.175.225.27) (Ping timeout: 256 seconds)
[23:53:42] *** Joins: i336 (~i336@101.163.197.5)
[23:54:28] <cousteau> my only point was that (!test1) ? 0 : (!test2) ? 0 : (!test3) ? 0 : 1 looks more readable and closer to test1 && test2 && test3 than test1 ? test2 ? test3 : 0 : 0
[23:54:33] <fizzie> Well formally speaking, none of the operators have any "precedence", it's just implied by the syntax.
[23:54:44] <cousteau> although that might also be my preference to avoid nesting too many if's
[23:54:45] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:2048:33e6:3182:81c2) (Ping timeout: 265 seconds)
[23:55:04] <fizzie> The syntax production of the conditional operator is `conditional-expression: logical-OR-expression ? expression : conditional-expression`.
[23:55:25] <fizzie> And the reason why you can put an assignment-expression without parentheses is that the middle part is a full `expression` rather than something else.
[23:55:45] <cousteau> same as how I prefer `if {} else if {} else if {} else {}` to `if { if { if {} else {}} else {}} else {}`
[23:55:48] <bruda> Its hard to make them pretty without messing up the logic. I have to nest them the way I did essentially because of the && logic.
[23:55:56] <cousteau> it allows your brain to relax
[23:56:27] <cousteau> bruda: ah, but A && B is the same as !(!A || !B)
[23:56:33] <dacav> hi #c
[23:56:39] <dacav> what's up?
[23:56:47] <bruda> But I can't use && or ||
[23:57:08] <cousteau> so A ? 1 : 0 is the same as !A ? 0 : 1
[23:57:35] <bruda> Hmm. I think I see where you are going with that.
[23:57:46] <floatcomplex> !!A
[23:58:43] <dacav> cousteau: I think so.  The elvis operator has a very low priority, while the negation has a very high one
[23:58:50] <dacav> check operator(7) if you're under a unix system
[23:58:52] <nitrix> The what?
[23:59:04] <floatcomplex> nitrix intensifies
[23:59:06] *** Joins: dohtem (uid524096@user/dohtem)
[23:59:13] *** Joins: quartz (~quartz@user/quartz)
[23:59:18] <cousteau> and A ? (B ? 1 : 0) : 0 is the same as !A ? 0 : !B ? 0 : 1
[23:59:32] *** Joins: penguino (~mrpenguin@user/mrpenguin)
