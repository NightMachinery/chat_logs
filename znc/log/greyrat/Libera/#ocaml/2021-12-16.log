[00:17:09] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[00:27:26] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 260 seconds)
[00:33:00] *** Quits: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[01:00:52] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Read error: Connection reset by peer)
[01:01:15] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[01:01:44] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:35:11] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:44:20] *** Parts: drakonis (drakonis@user/drakonis) (WeeChat 3.1)
[01:53:12] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[01:57:01] *** Quits: olle (~olle@i5E866D88.versanet.de) (Ping timeout: 256 seconds)
[01:57:59] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Read error: Connection reset by peer)
[01:58:05] *** Joins: mro_ (~mro@port-92-195-195-156.dynamic.as20676.net)
[02:08:29] *** Quits: mro_ (~mro@port-92-195-195-156.dynamic.as20676.net) (Quit: Leaving...)
[02:16:55] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[02:18:19] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[02:27:05] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[02:33:11] <d_bot> <Et7f3> What kind of transformation you want ?
[02:34:10] <d_bot> <Et7f3> Ocaml has already a arrow syntax.
[02:40:59] *** Joins: CoolerVoid (~CoolerVoi@2804:14c:26:8b72:d439:a408:6753:8a60)
[02:45:13] *** Quits: Guest8 (~Guest8@dsl-149-66-61.hive.is) (Quit: Client closed)
[02:49:41] <d_bot> <Alistair> It does? I'm talking about syntax for the Arrow calculus: https://homepages.inf.ed.ac.uk/slindley/papers/idioms-arrows-monads.pdf (similar to Haskell's syntax https://www.haskell.org/arrows/syntax.html)
[02:51:59] *** Joins: sagax (~sagax_nb@user/sagax)
[03:00:20] <d_bot> <rgrinberg> There’s not. I’m curious why you’d want it, it’s extremely uncommon even in Haskell
[03:00:56] *** Joins: Guest8 (~Guest8@88-149-66-61.du.xdsl.is)
[03:03:39] <Guest8> the line "type a' merkelTree" gives a syntax error on "merkelTree" as the first line in my .mli file
[03:04:15] <Guest8> am I missing something to declare a type that takes a variable ?
[03:06:10] <companion_cube> it's 'a
[03:06:12] <companion_cube> not a'
[03:13:14] * Anarchos dreams of unicode rendering where type variables are greek letters
[03:14:34] *** Quits: Guest8 (~Guest8@88-149-66-61.du.xdsl.is) (Quit: Client closed)
[03:15:44] *** Joins: Guest8 (~Guest8@88-149-66-61.du.xdsl.is)
[03:16:04] *** Quits: CoolerVoid (~CoolerVoi@2804:14c:26:8b72:d439:a408:6753:8a60) (Quit: Client closed)
[03:16:10] <companion_cube> they're harder to input for most of us
[03:16:17] <Guest8> ok that is something that the compiler should be able to point out
[03:16:31] <companion_cube> probably not, it's a lexer error at this point
[03:16:41] <companion_cube> it's like writing "foo and never close the "
[03:16:48] <companion_cube> not that easy to give a good error message
[03:17:15] <d_bot> <NULL> a' is an ident, so a valid token
[03:17:29] <d_bot> <NULL> I'm pretty sure the parser is the one complaining
[03:18:04] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[03:20:06] <companion_cube> oh my bad @NULL
[03:20:11] <companion_cube> you're right, foo' works
[03:20:41] <companion_cube> so the parser must complain about merkelTree not being expected
[03:22:37] <d_bot> <NULL> In any case, both the lexer and the parser should be able to report on why the input is wrong (using an exception table for the parser), it just needs a lot of work
[03:22:46] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[03:30:03] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (*.net *.split)
[03:30:03] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[03:30:03] *** Quits: kakadu (~kakadu@195.19.236.234) (*.net *.split)
[03:30:03] *** Quits: hannes (~hannes@193.30.40.133) (*.net *.split)
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: thizanne (~thibault@2001:41d0:a:f682::1) (*.net *.split)
[03:30:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[03:30:04] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[03:30:04] *** Quits: aru (~aru@ip-86-49-27-241.net.upcbroadband.cz) (*.net *.split)
[03:30:04] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[03:30:04] *** Quits: jakzale (6291399afa@user/jakzale) (*.net *.split)
[03:30:04] *** Quits: rustyne (c7dec7c28e@2604:bf00:561:2000::1ab) (*.net *.split)
[03:30:04] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[03:30:04] *** Quits: gahr (~gahr@user/gahr) (*.net *.split)
[03:30:04] *** Quits: daimrod2 (~daimrod@loire.omecha.info) (*.net *.split)
[03:30:04] *** Quits: mg (mg@user/mg) (*.net *.split)
[03:30:05] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[03:30:05] *** Quits: slothby (~JoshAshby@irc.isin.space) (*.net *.split)
[03:30:05] *** Quits: Enjolras (~enjolras@139.99.101.27) (*.net *.split)
[03:30:05] *** Quits: lobo (~lobo@user/lobo) (*.net *.split)
[03:30:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[03:30:05] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[03:30:05] *** Quits: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65) (*.net *.split)
[03:30:06] *** Quits: arg_ (~arthur@ns3054037.ip-91-121-134.eu) (*.net *.split)
[03:30:06] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[03:30:06] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[03:30:06] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[03:30:14] *** Joins: rustyne (c7dec7c28e@2604:bf00:561:2000::1ab)
[03:30:16] *** Joins: hannes (~hannes@193.30.40.133)
[03:30:19] *** Joins: mg (mg@bratseth.mg.am)
[03:30:25] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[03:30:27] *** Joins: asm (~alexander@burner.asm89.io)
[03:30:31] *** Quits: Guest8 (~Guest8@88-149-66-61.du.xdsl.is) (Quit: Client closed)
[03:30:32] *** Joins: daimrod2 (~daimrod@loire.omecha.info)
[03:30:32] *** Joins: aru (~aru@ip-86-49-27-241.net.upcbroadband.cz)
[03:30:33] *** Joins: kakadu (~kakadu@195.19.236.234)
[03:30:38] *** Joins: unyu (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1)
[03:30:40] *** Joins: gahr (~gahr@user/gahr)
[03:30:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:30:43] *** Joins: arg_ (~arthur@91.121.134.15)
[03:30:47] *** Joins: lobo (~lobo@v22016093786137129.megasrv.de)
[03:30:48] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[03:30:53] *** Joins: jakzale (6291399afa@user/jakzale)
[03:30:55] *** Quits: mg (mg@bratseth.mg.am) (Changing host)
[03:30:55] *** Joins: mg (mg@user/mg)
[03:30:55] *** Joins: thizanne (~thibault@ns333098.ip-37-187-125.eu)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:38] *** Quits: lobo (~lobo@v22016093786137129.megasrv.de) (Changing host)
[03:31:38] *** Joins: lobo (~lobo@user/lobo)
[03:31:49] *** unyu is now known as Guest6030
[03:31:59] *** Joins: landonf (landonf@mac68k.info)
[03:32:13] *** Joins: leah2 (~leah@vuxu.org)
[03:33:10] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 260 seconds)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:34:36] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:34:46] *** Joins: kurfen (~kurfen@176.119.195.10)
[03:35:12] *** Joins: Enjolras (~enjolras@139.99.101.27)
[03:37:34] *** Joins: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65)
[03:39:00] *** Joins: ebb (ebb@user/ebb)
[03:42:15] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[04:05:25] <d_bot> <Wulfman> Is there someone that know `core.command` and ocmal `exception` i don't understand with `try command.run mycommand with My_Exception  -> 1`  return `uncaught exception My_Exception` .?...
[04:05:25] <d_bot> <Wulfman>  Why isn't the try catch block catching it ?
[04:22:44] <d_bot> <NULL> When an error reaches toplevel, `Exception: My_exception` is printed. If it's not the message you get, it indicates that something (like `command.run`) catches all exceptions and exits early. If it is indeed the case, you want to put your try/except inside the argument of `command.run`
[04:23:22] <d_bot> <NULL> (I don't know `core.command` though, I can't help more about that)
[04:30:41] *** Joins: brettgilio (~brettgili@159.203.168.195)
[04:36:38] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:40:11] *** Joins: rgrinberg (~textual@187.223.209.106)
[04:43:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:05:51] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:08:32] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:11:45] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Client Quit)
[05:13:10] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:55:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:00:24] <d_bot> <leviroth> I agree, I think the thought is that you put all of your program logic, including exception handling, inside the command
[06:07:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:14:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:14:36] <d_bot> <leviroth> Oddly this one-line program prints the uncaught exception differently than it does if I remove the `let _ignoreme` bit: `let () = let _ignoreme = Core.sec in raise (Invalid_argument "foo")`
[06:15:21] <d_bot> <leviroth> It seems to do this if I reference anything in `Core` that isn't just re-exported from `Core_kernel`, so I assume it has something to do with how dune decides to link things.
[06:46:18] *** Joins: spip (~bobo@37.171.255.170)
[06:46:42] *** spip is now known as Guest2664
[06:47:09] *** Quits: Guest456 (~bobo@37.170.190.92) (Ping timeout: 256 seconds)
[06:48:04] *** Joins: mbuf (~Shakthi@223.178.108.131)
[06:49:29] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:45:29] *** Joins: slothby (~JoshAshby@irc.isin.space)
[08:09:43] *** Joins: rgrinberg (~textual@187.223.209.106)
[08:30:56] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:54:54] *** Joins: vicfred (~vicfred@user/vicfred)
[09:05:29] *** Quits: ansiwen (~sanders@vm1.a6n.de) (Quit: ZNC 1.7.1 - https://znc.in)
[09:08:31] *** Joins: ansiwen (~sanders@vm1.a6n.de)
[09:17:06] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[10:06:18] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:10:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:02:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:28:07] *** Joins: jlrnick (~josephler@gw.lipn.univ-paris13.fr)
[11:38:26] *** Joins: olle (~olle@p5784cb5f.dip0.t-ipconnect.de)
[12:17:26] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:17:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[12:22:35] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:35:07] *** Quits: lobo (~lobo@user/lobo) (Quit: lobo)
[12:35:15] *** Joins: lobo (~lobo@user/lobo)
[12:39:03] *** Quits: kakadu (~kakadu@195.19.236.234) (Ping timeout: 256 seconds)
[12:42:03] *** Joins: kakadu (~kakadu@195.19.236.234)
[12:51:25] <hackinghorn> hi, any guide on using In_channel, Out_channel?
[12:53:48] <d_bot> <darrenldl> is bindlib the goto these days?
[12:54:05] <d_bot> <darrenldl> hackinghorn: what specific things you're trying to do?
[12:56:03] <hackinghorn> I just want to write to a file using Out_channel
[12:57:08] <hackinghorn> looks like there is nothing much on Out_channel with capital O
[12:58:47] <rgrinberg> hackinghorn Out_channel.write_all?
[12:58:57] *** Quits: jlrnick (~josephler@gw.lipn.univ-paris13.fr) (Ping timeout: 240 seconds)
[13:01:05] <hackinghorn> I don't know, I guess. Maybe I can try that, I guess
[13:01:29] <hackinghorn> do I have to open or close or anything?
[13:01:49] <hackinghorn> a line of explanation would be good
[13:02:07] <hackinghorn> okay I guess I can try that
[13:02:08] <rgrinberg> Here's an example: Out_channel.write_all "test" ~data:"foo bar baz"
[13:02:28] <rgrinberg> closing and opening is done for you by this function
[13:03:03] <hackinghorn> aight, thanks, that looks simple
[13:03:43] <d_bot> <let Butanium = raise Not_found;;> ```ocaml
[13:03:44] <d_bot> <let Butanium = raise Not_found;;> let log_datas ?(close=true) f file (datas: 'a list) =
[13:03:45] <d_bot> <let Butanium = raise Not_found;;>   let oc = get_oc file in
[13:03:46] <d_bot> <let Butanium = raise Not_found;;>     List.iter (fun x -> Printf.fprintf oc "%s" @@ f x) datas;
[13:03:48] <d_bot> <let Butanium = raise Not_found;;>     if close then close_out oc; oc
[13:03:49] <d_bot> <let Butanium = raise Not_found;;> ```
[13:03:58] <d_bot> <let Butanium = raise Not_found;;> with
[13:04:05] <d_bot> <let Butanium = raise Not_found;;> ```ocaml
[13:04:06] <d_bot> <let Butanium = raise Not_found;;> let get_oc file = open_out @@ file.file_path ^ file.file_name
[13:04:07] <d_bot> <let Butanium = raise Not_found;;> ```
[13:04:30] <d_bot> <let Butanium = raise Not_found;;> this prints datas from a list in a file
[13:05:41] <d_bot> <let Butanium = raise Not_found;;> full module here if you want to give it a look https://github.com/Butanium/monte-carlo-tree-search-TSP/blob/master/tools/File_log.ml
[13:36:57] *** Quits: tomku (~tomku@user/tomku) (Read error: Connection reset by peer)
[13:41:04] <hackinghorn> write_all shows me "No such file or directory"
[13:41:17] <d_bot> <Wulfman> @NULL @therewolf Thanks :). I do observe the same odd behavior from the command line with the message changing from `Fatal Error : exception exn` to `Uncaught exception : exn` . When you say "catches all exceptions and exits early", what mechanism are you thinking for exiting ? doesn't running `exit` throw and exception ? can we "catch" the effect of exit ?
[13:41:42] <hackinghorn> maybe i need to create directory
[13:42:12] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:49:56] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[13:52:41] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 252 seconds)
[13:53:07] *** Joins: tomku (~tomku@user/tomku)
[14:02:59] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[14:03:09] *** Joins: leah2 (~leah@vuxu.org)
[14:12:24] *** Joins: bartholin (~bartholin@158.110.70.210)
[14:16:47] *** Joins: olle_ (~olle@i5E866D9D.versanet.de)
[14:30:41] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:30:54] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[14:51:35] <d_bot> <Wulfman> Ho... I think core.command open a separate thread of something like that. The stack trace is really short and doesn't start from my entry-point
[14:57:56] *** Quits: Guest6030 (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1) (Quit: WeeChat 3.3)
[14:58:21] *** Joins: unyu (~pyon@user/pyon)
[15:21:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:24:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:40:13] *** Quits: rks` (~trefis@ns366843.ip-37-59-60.eu) (Ping timeout: 240 seconds)
[15:41:54] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[15:41:54] *** Joins: asm (~alexander@user/asm)
[15:46:27] <d_bot> <leviroth> @Wulfman I don't think `exit` raises an exception. I think it calls the unix `exit` function, ending the process directly.
[15:47:47] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[17:05:17] *** Quits: kakadu (~kakadu@195.19.236.234) (Ping timeout: 240 seconds)
[17:07:44] *** Joins: kakadu (~kakadu@195.19.236.234)
[17:12:09] *** Joins: jlrnick (~josephler@gw-wifi.lipn.univ-paris13.fr)
[17:14:52] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:19:46] *** Joins: rks` (~trefis@ns366843.ip-37-59-60.eu)
[17:24:05] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[17:34:32] *** Quits: jlrnick (~josephler@gw-wifi.lipn.univ-paris13.fr) (Ping timeout: 240 seconds)
[17:35:51] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[17:58:37] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[18:20:36] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:46:43] *** Joins: spip (~bobo@37.166.53.4)
[18:47:01] *** Quits: Guest2664 (~bobo@37.171.255.170) (Ping timeout: 268 seconds)
[18:47:07] *** spip is now known as Guest7956
[18:50:46] *** Joins: zebrag (~chris@user/zebrag)
[18:55:33] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[19:28:44] <d_bot> <antron> how is the performance of mutable fields affected by multicore?
[19:42:01] <sadiq> there should be no difference?
[19:42:26] <sadiq> apart from maybe some cache effects with remember sets and different threads
[19:43:47] <companion_cube> the write barrier didn't change at all?
[19:44:55] <sadiq> nohttps://github.com/ocaml/ocaml/blob/trunk/runtime/memory.c#L617 trunk
[19:45:09] <sadiq> https://github.com/ocaml-multicore/ocaml-multicore/blob/5.00/runtime/memory.c#L129 multicore
[19:45:27] <sadiq> so the more nuanced answer is that yes but not on x86
[19:45:37] <companion_cube> good, good
[19:46:08] <sadiq> there's maybe a tiny difference in marking behaviour
[19:46:15] <sadiq> antron: have you found one?
[19:46:56] <d_bot> <antron> no, i haven't found a difference. but i'm considering using some relatively short-lived records with mutable fields, and worried if that will be a problem in multicore
[19:47:31] <sadiq> on x86 you shouldn't see anything
[19:47:58] <d_bot> <antron> ok, good. what about other architectures?
[19:48:07] <sadiq> on arm64 the memory model could have a small impact
[19:48:47] <sadiq> (though again, would be surprised if you could see it)
[19:49:02] *** rwmjones is now known as rwmjones|HOLS
[19:49:27] <d_bot> <antron> is it something like on the scale of the cost of a few extra arithmetic instructions or so?
[19:50:43] <sadiq> https://kcsrk.info/papers/pldi18-memory.pdf has it overall at 0.6% but doesn't break out the stores
[19:51:07] <sadiq> also the ThunderX was a funky chip, I suspect the difference will be even smaller on something like the M1
[19:51:19] <sadiq> antron: it's the memory barrier
[19:51:43] <sadiq> https://github.com/ocaml-multicore/ocaml-multicore/blob/5.00/runtime/memory.c#L156
[19:52:21] <sadiq> x86 is always acquire-release and on the M1 (and the modern ARM cores) it's also pretty well optimised
[19:52:33] <sadiq> for the M1 especially so because of x86 emulation
[19:55:45] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[20:08:16] <d_bot> <antron> thank you
[20:35:35] <sadiq> no problem
[20:42:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:06:48] *** Quits: rak (~rak@debian/rak) (Quit: Segmentation fault (core recycled))
[21:08:25] *** Joins: rak (~rak@debian/rak)
[21:28:12] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[21:59:44] *** Joins: jlrnick (~josephler@2a01cb040a15940094bd03989d545335.ipv6.abo.wanadoo.fr)
[22:12:16] *** Quits: mbuf (~Shakthi@223.178.108.131) (Quit: Leaving)
[22:16:41] *** Joins: rgrinberg (~textual@187.223.209.106)
[22:24:43] *** Quits: jlrnick (~josephler@2a01cb040a15940094bd03989d545335.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:27:14] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:29:42] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[23:33:17] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[23:45:57] *** Quits: olle_ (~olle@i5E866D9D.versanet.de) (Ping timeout: 240 seconds)
[23:53:07] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
