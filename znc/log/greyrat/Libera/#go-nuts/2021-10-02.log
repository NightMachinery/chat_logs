[00:01:19] *** Quits: normen (~normen@pd9eec090.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[00:08:08] <thinkofher> can i use go-import meta tag with content="example.com/package git https://some.scm.org" in the head of https://example.com site?
[00:08:17] <thinkofher> or should i create file example.com/package
[00:09:17] <thinkofher> i'm asking because i'm wondering is it possible to have multiple go-import meta tags for multiple packages with same origin example.com
[00:12:16] *** Quits: bomb (~bomb@user/bomb) (Quit: ‏‏‎ ‎)
[00:12:31] *** Quits: phoenixh (~phoenixh@p200300dd6f159b00d3a91662b90dc087.dip0.t-ipconnect.de) (Quit: Leaving)
[00:13:37] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[00:26:49] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:29:29] *** A_Dragon is now known as Awoobis
[00:35:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:36:10] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:36:28] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:37:13] *** Joins: fikran (~fikran@user/fikran)
[00:38:48] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[00:39:07] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:44:00] *** Quits: _xor (~xor@74.215.232.67) (Read error: Connection reset by peer)
[00:45:48] *** Joins: normen (~normen@p54b35de3.dip0.t-ipconnect.de)
[00:47:55] *** Joins: _xor (~xor@74.215.232.67)
[00:50:11] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:54:30] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[00:54:32] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[00:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[00:55:43] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:57:28] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[00:58:45] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[00:59:52] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[00:59:52] <lungaro_> anyone aware of how to do something like json.RawMessage in yaml?
[01:00:04] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:00:06] <lungaro_> this makes me wanna cry
[01:00:35] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[01:02:15] <bpalmer> lungaro_: it will depend on your library ,but for go-yaml, in some cases, it seems it suggests yaml.MapSlice
[01:02:26] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[01:04:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:04:19] <lungaro_> i'm already getting lost in my own magic. I might just do it all static
[01:04:27] <lungaro_> i'll screw w/ this stuff later. Stupid config
[01:05:30] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:05:48] <fizzie> I don't do YAML, but someone implied (at least in "gopkg.in/yaml.v3") you decode a subtree into a Node. And then call Decode on it to get things out later on. It's "an intermediate representation that allows detailed control over the content being decoded or encoded."
[01:07:06] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[01:08:27] *** Joins: miquella[m] (~miquellam@2001:470:69fc:105::1:980)
[01:10:58] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[01:11:59] <lungaro_> yeah, i'm just trying to make this generic and agnostic and will give up cause its simpler to just change the "options" struct to its own appropriate type
[01:14:53] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[01:22:51] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[01:23:26] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 252 seconds)
[01:36:27] *** Joins: Torr (~Torr@user/torr)
[01:37:19] *** Joins: normen_ (~normen@2a00:20:7048:542e:e8a3:9c9e:6fe1:3bbf)
[01:38:10] *** Quits: normen (~normen@p54b35de3.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[01:38:13] *** normen_ is now known as normen
[01:39:49] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:45:45] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:9437:d21d:8e19:4b2)
[01:45:53] *** Joins: pts33 (~pts33@2603-8000-9103-a43f-a134-e138-bf58-bf5d.res6.spectrum.com)
[01:46:38] *** Quits: independent56 (~independe@2.31.88.37) (Remote host closed the connection)
[01:46:56] *** Joins: independent56 (~independe@2.31.88.37)
[01:48:53] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-0408-9799-889e-16e7.inf6.spectrum.com) (Ping timeout: 246 seconds)
[01:49:42] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[01:49:56] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:53:01] *** Quits: normen (~normen@2a00:20:7048:542e:e8a3:9c9e:6fe1:3bbf) (Ping timeout: 252 seconds)
[01:54:15] *** jinn is now known as antichrist
[01:54:28] *** antichrist is now known as jinn
[01:54:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:54:52] *** Joins: normen (~normen@p200300d717037b005808cba4cb990af4.dip0.t-ipconnect.de)
[02:12:54] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[02:14:18] <jinn> do u know how i can do perl .. print "A" x100 and it makes 100 A's ? what's the golang equiv?
[02:15:42] <seebs> for i := 0; i < 100; i++ { fmt.Print("A") }
[02:15:53] <seebs> there is nothing comparable to "multiply strings by numbers", etc., in general
[02:16:32] <jinn> strings.Repeat() any good?
[02:17:13] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:17:26] <bpalmer> seems like it would do what you want it to do
[02:17:36] <jinn> i'm making a fuzzer for my homework but i'm trying to think of the easiest way to do it. making a loop like that is my fav way but i dont know if that's good enough.
[02:18:26] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Client Quit)
[02:18:39] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:21:00] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 250 seconds)
[02:28:08] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[02:41:08] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.243)
[02:44:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:46:33] *** Joins: fikran (~fikran@user/fikran)
[02:47:36] <since_> jinn: strings.Repeat is much faster than the for loop
[02:48:37] <since_> even append() and += for strings have different speeds
[02:52:38] <bpalmer> strings.Repeat takes advantage of the strings.Builder to do in-place (normally unsafe) casting
[02:52:42] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[02:52:49] <jinn> thanks since_
[02:53:11] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Client Quit)
[02:53:23] <jinn> good looks bpalmer
[02:53:30] <since_> Theres also bytes.Repeat
[02:53:40] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[02:53:57] <bpalmer> but at its core, strings.Repeat is just doing a for loop of its own
[02:54:08] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[02:54:32] <since_> But if you only have a single byte to be repeated allocating the fixed slice may be faster
[02:54:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[02:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[02:56:22] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:56:33] *** Joins: X-Scale` (~ARM@83.223.242.77)
[02:56:45] <bpalmer> I'd have hopes that something like var b [1024]byte; for i := 0; i < len(b); i++ { b[i] = 65 } would get translated into a repcnt or whatever is efficent on the platform
[02:57:54] *** X-Scale` is now known as X-Scale
[03:10:24] *** Joins: zwr (~zwr@2804:d45:b966:fb00:dbd2:d843:db8e:3088)
[03:14:49] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[03:15:02] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:19:45] *** Quits: krux02 (~krux02@p200300e81719330059822492d9593bdc.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:19:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:20:33] *** Joins: krux02 (~krux02@p200300e81719330059822492d9593bdc.dip0.t-ipconnect.de)
[03:23:09] *** Joins: normen_ (~normen@p200300d7170af20025e3b1e9c5eb346b.dip0.t-ipconnect.de)
[03:23:46] *** Quits: normen (~normen@p200300d717037b005808cba4cb990af4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:23:49] *** normen_ is now known as normen
[03:23:56] <seebs> if you're in a hurry and don't care about unsafe, populate a uint64 with the value and splat it over a range.
[03:24:13] <seebs> just make your slice rounded up in size and don't worry about the extra writes to locations you won't read.
[03:24:25] *** Quits: independent56 (~independe@2.31.88.37) (Ping timeout: 252 seconds)
[03:30:14] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[03:30:44] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[03:36:17] *** Joins: hexfive (~eric@50.35.83.177)
[03:36:30] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[03:38:44] *** Quits: normen (~normen@p200300d7170af20025e3b1e9c5eb346b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:40:32] *** Joins: normen (~normen@p200300d7170ee70091048be231e82cd0.dip0.t-ipconnect.de)
[03:43:47] *** Quits: vhost- (~vhost@user/vhost-) (Ping timeout: 268 seconds)
[03:45:33] *** Joins: Kyros (~kyros@user/kyros)
[03:45:52] *** Quits: normen (~normen@p200300d7170ee70091048be231e82cd0.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:47:43] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:47:53] *** Joins: normen (~normen@p200300d717101a00d8c7ac1e51383a67.dip0.t-ipconnect.de)
[03:54:35] *** Joins: yoonkn (~user@175.197.208.79)
[03:55:34] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 265 seconds)
[03:55:48] *** Joins: vhost- (~vhost@65.102.48.134)
[03:58:47] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:00:11] *** Quits: normen (~normen@p200300d717101a00d8c7ac1e51383a67.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:02:13] *** Joins: normen (~normen@p200300d717114c00adaad316c444ffa1.dip0.t-ipconnect.de)
[04:03:05] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:9437:d21d:8e19:4b2) (Read error: Connection reset by peer)
[04:03:34] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:04:14] *** Joins: freakazoid333 (~matt@2603-9000-cf0f-80e3-e852-4702-aeac-9308.inf6.spectrum.com)
[04:09:39] *** Joins: adriano (~adriano@173.254.204.205)
[04:12:41] *** Quits: krux02 (~krux02@p200300e81719330059822492d9593bdc.dip0.t-ipconnect.de) (Quit: Leaving)
[04:14:25] *** Joins: krux02 (~krux02@p4ff99041.dip0.t-ipconnect.de)
[04:14:58] *** Quits: lockdown_ (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com) (Quit: Lost terminal)
[04:15:53] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[04:16:30] *** Quits: krux02 (~krux02@p4ff99041.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:16:34] *** Quits: normen (~normen@p200300d717114c00adaad316c444ffa1.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:18:10] *** Quits: adriano (~adriano@173.254.204.205) (Ping timeout: 252 seconds)
[04:18:43] *** Joins: normen (~normen@p200300d7172be1002ce09e2fca4596a7.dip0.t-ipconnect.de)
[04:19:30] *** Quits: crazymax (~crazymax@user/crazymax) (Quit: Bye!)
[04:23:16] *** Quits: normen (~normen@p200300d7172be1002ce09e2fca4596a7.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:25:52] *** Joins: normen (~normen@p54899e06.dip0.t-ipconnect.de)
[04:44:23] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[04:44:25] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[04:45:53] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:47:19] *** Joins: normen_ (~normen@p200300d71723d800211468b6ffe20c7c.dip0.t-ipconnect.de)
[04:48:22] *** Quits: _xor (~xor@74.215.232.67) (Quit: WeeChat 3.2.1)
[04:48:28] *** Quits: normen (~normen@p54899e06.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:48:53] *** Joins: _xor (~xor@74.215.232.67)
[04:49:20] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:50:56] *** Joins: califax- (~califax@user/califx)
[04:51:52] *** Quits: normen_ (~normen@p200300d71723d800211468b6ffe20c7c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:53:12] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:53:13] *** califax- is now known as califax
[04:53:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:54:12] *** Quits: KDDLB (kevin@user/kddlb) (Quit: The Lounge - https://thelounge.chat)
[04:54:30] *** Joins: normen_ (~normen@p200300d717098d00a92442262664c1c2.dip0.t-ipconnect.de)
[04:54:30] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[04:54:48] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[04:55:35] *** normen_ is now known as normen
[04:55:53] *** Joins: fikran (~fikran@user/fikran)
[04:59:26] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:00:04] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[05:00:57] *** Joins: neurocyte01320 (~neurocyte@94.46.83.234)
[05:00:57] *** Quits: neurocyte01320 (~neurocyte@94.46.83.234) (Changing host)
[05:00:57] *** Joins: neurocyte01320 (~neurocyte@user/neurocyte)
[05:02:38] *** Quits: normen (~normen@p200300d717098d00a92442262664c1c2.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:03:19] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:03:19] *** neurocyte01320 is now known as neurocyte0132
[05:04:42] *** Joins: rvncerr (~rvncerr@user/rvncerr)
[05:04:53] *** Joins: normen (~normen@p200300d717278d00b456602d2a762f2e.dip0.t-ipconnect.de)
[05:07:47] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.243) (Ping timeout: 252 seconds)
[05:09:30] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.253)
[05:09:45] *** Quits: iluxa (~iliaf@user/iluxa) (Quit: ZNC 1.8.2 - https://znc.in)
[05:10:02] *** Quits: rvncerr (~rvncerr@user/rvncerr) (Remote host closed the connection)
[05:10:30] *** Joins: rvncerr (~rvncerr@user/rvncerr)
[05:10:30] *** Joins: iliaf (~iliaf@user/iluxa)
[05:15:42] *** Quits: iliaf (~iliaf@user/iluxa) (Quit: ZNC 1.8.2 - https://znc.in)
[05:17:22] *** Quits: normen (~normen@p200300d717278d00b456602d2a762f2e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:19:22] *** Joins: normen (~normen@p200300d7172b3b006136547adeab36ef.dip0.t-ipconnect.de)
[05:19:47] *** Joins: iateadonut (~dan@121.177.17.154)
[05:23:13] <iateadonut> how can i grab a field from a slice of structs so i get a slice of that field?
[05:25:47] <bpalmer> for loop
[05:26:31] *** Quits: normen (~normen@p200300d7172b3b006136547adeab36ef.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:26:56] <bpalmer> names := make([]string, 0, len(people)); for p := range(people) { names = append(names, p.name) }
[05:27:28] <bpalmer> extraneous parens , sorry
[05:27:49] <iateadonut> i have to do a loop?
[05:28:07] <iateadonut> there's nothing like  slice.field(fieldName) ?
[05:28:16] <bpalmer> yep
[05:28:25] <iateadonut> whoah
[05:28:43] *** Joins: normen (~normen@p200300d7172597000d2465911aefdfbe.dip0.t-ipconnect.de)
[05:29:59] <bpalmer> go doesn't do a whole lot to hide that sort of thing from you. A slice is real memory allocated that you write into, so the cost gets exposed
[05:30:17] <iateadonut> yeah, i was just thinking about how that makes total sense.
[05:30:53] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.253) (Read error: Connection reset by peer)
[05:32:03] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:32:58] <bpalmer> under generics, it'd be easier to write something like MapOver(slice, func(p Person) string { return p.name })
[05:33:43] <bpalmer> remains to be seen if that sort of thing becomes common-place.
[05:35:37] *** Joins: KDDLB (kevin@user/kddlb)
[05:36:47] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.245)
[05:41:23] *** Quits: KDDLB (kevin@user/kddlb) (Ping timeout: 252 seconds)
[05:46:18] *** Joins: yvehan (~yvehan@117.136.88.81)
[05:46:47] *** Quits: yvehan (~yvehan@117.136.88.81) (Remote host closed the connection)
[06:06:23] *** Joins: gggp (~textual@111.63.14.119)
[06:07:24] *** Joins: crazymax (~crazymax@195.154.253.234)
[06:07:25] *** Quits: crazymax (~crazymax@195.154.253.234) (Changing host)
[06:07:25] *** Joins: crazymax (~crazymax@user/crazymax)
[06:09:35] *** Joins: tg (~tg@rockylinux/infra/tg)
[06:14:27] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Read error: Connection reset by peer)
[06:16:31] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[06:18:53] <b0nn> searching an array is always going to be O(n) - a for loop; searching a hashmap is always going to be O(1) - direct(ish) access; the mapover function is really just a hashmap index of a slice that you lookup the slice position from the map index
[06:20:54] *** Joins: _rubik (~wgriggs@user/rubik/x-6853868)
[06:21:18] <Tv_> flip side: x86 is very fast at linear scan, and even an array of 4MB is very fast to access
[06:22:18] <_rubik> Hey folks. Is anyone here familiar with graphql-go? The documentation is pretty sparce, and I'm struggling to set heads for CORS properly.
[06:22:32] <Tv_> _rubik: i heartily recommend gqlgen instead
[06:23:03] *** Quits: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[06:23:06] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:23:55] <bpalmer> perhaps the name was confusing; what I meant with MapOver was just func[T, O] (ts []T, f func(t T) O) []O { rv := make([]O, 0, len(ts)) ; for t := range ts {  rv = append(rv, f(t)) } return rv }
[06:24:01] <bpalmer> if I got the generic syntax right.
[06:24:07] <bpalmer> Not building a hash map
[06:24:21] <_rubik> Tv_: Unfortunately the whole project is based around graphql-go, so I don't see that changing in the near future
[06:24:31] <Tv_> enjoy ;)
[06:25:57] *** Joins: andlabs (~andlabs@70.107.171.168)
[06:26:57] <snappy> how strongly do people feel about the go proverb "don't panic"
[06:27:55] <snappy> I'm looking at a recursive descent parser that eschews returning errors by using panic/recover to handle errors: https://github.com/benhoyt/goawk/blob/master/parser/parser.go#L52
[06:28:18] <snappy> I'm thinking in this specific use case, it probably makes the parser tons easier to code
[06:28:23] <Tv_> snappy: encoding/json uses (or used?) panic/recover internally in its implementation
[06:28:37] <Tv_> snappy: but don't expose that in an API (apart from programmer errors)
[06:28:39] <bpalmer> Of course, a straightforward way in go to get a low cost abstraction rather than building a new slice is simply to return a closure accessor over the slice
[06:28:56] <bpalmer> snappy: go uses panic internally in its parsing as well.
[06:29:00] <snappy> Tv_: yeah wow, interesting
[06:29:05] <Tv_> yeah same thing as encoding/json
[06:29:20] <Tv_> snappy: i have a fuzzy memory that encoding/json might have moved away from that design, though? something about optimizing
[06:29:44] <Tv_> snappy: the point is, *internally*, so it doesn't really matter much
[06:29:58] <snappy> Cool, because I'm writing a parser now, and I'm about to steal this idea. I feel vindicated that this isn't a horrible idea.
[06:30:50] <Tv_> it might still be a horrible idea ;)
[06:33:24] <Tv_> for example, if you forget that you're doing it, you might not program defensively enough, and leave your internal data structures in the wrong state
[06:37:13] *** Joins: normen_ (~normen@p200300d717323400316126de81ae1d99.dip0.t-ipconnect.de)
[06:39:01] *** Quits: normen (~normen@p200300d7172597000d2465911aefdfbe.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:39:04] *** normen_ is now known as normen
[06:42:01] <LambdaComplex> i got a job as a Go software engineer and i am anxious! hashtag imposter syndrome
[06:45:31] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[06:50:36] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[06:53:57] <seebs> https://xkcd.com/1954/
[06:54:19] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:54:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[07:00:01] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[07:00:43] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[07:00:58] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:2152:79ec:66e3:ddf0)
[07:01:01] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[07:03:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:03:38] <LambdaComplex> me irl
[07:04:24] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-e852-4702-aeac-9308.inf6.spectrum.com) (Ping timeout: 250 seconds)
[07:05:13] *** Joins: fikran (~fikran@user/fikran)
[07:06:26] *** Joins: cim (~cim@205.185.117.110)
[07:18:56] *** Joins: KDDLB (kevin@user/kddlb)
[07:19:04] *** Joins: hv992 (~hv99@wireguard/tunneler/hv99)
[07:20:46] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Ping timeout: 252 seconds)
[07:20:46] *** hv992 is now known as hv99
[07:25:29] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: Ping timeout (120 seconds))
[07:27:32] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[07:37:23] *** Joins: k0ta (~k0ta@151.210.173.40)
[07:39:02] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[07:39:37] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[07:41:00] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Client Quit)
[07:43:02] *** Quits: rvncerr (~rvncerr@user/rvncerr) (Remote host closed the connection)
[07:43:43] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:07:40] *** Quits: normen (~normen@p200300d717323400316126de81ae1d99.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:35:43] *** Quits: gggp (~textual@111.63.14.119) (Ping timeout: 252 seconds)
[08:35:52] *** Joins: normen (~normen@p200300d717323400316126de81ae1d99.dip0.t-ipconnect.de)
[08:35:52] *** Quits: _rubik (~wgriggs@user/rubik/x-6853868) (Quit: WeeChat 3.2.1)
[08:44:04] *** Quits: normen (~normen@p200300d717323400316126de81ae1d99.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:46:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[08:51:18] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:54:30] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[08:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[09:09:25] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.245) (Read error: Connection reset by peer)
[09:12:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:14:33] *** Joins: fikran (~fikran@user/fikran)
[09:15:03] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.245)
[09:16:15] *** Joins: newbie (~kvirc@91.235.176.31)
[09:17:11] *** Joins: normen (~normen@pd9eecb6b.dip0.t-ipconnect.de)
[09:17:24] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[09:17:51] *** Quits: newbie (~kvirc@91.235.176.31) (Client Quit)
[09:22:52] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[09:31:10] *** Quits: normen (~normen@pd9eecb6b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:32:30] *** Joins: normen (~normen@p200300d71739520031cb52b2e248b690.dip0.t-ipconnect.de)
[09:36:27] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:38:19] *** Quits: zwr (~zwr@2804:d45:b966:fb00:dbd2:d843:db8e:3088) (Ping timeout: 252 seconds)
[09:50:25] <gggpkm> Does make alloc memory on the heap ?
[09:50:36] <gggpkm> make([]byte, 64)
[09:56:00] *** Quits: normen (~normen@p200300d71739520031cb52b2e248b690.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:00:54] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 260 seconds)
[10:03:09] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[10:03:25] <novns> I have a weird issue
[10:05:29] <novns> using a not initialized `a *string` variable as `*a` does not panic but produces an infinite loop
[10:06:06] <novns> should we panic if nil is dereferenced?
[10:08:10] <novns> or is it not nil but it points to a random memory?
[10:13:41] *** Joins: xiongxin (~quassel@113.116.33.66)
[10:20:21] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.245) (Read error: Connection reset by peer)
[10:23:20] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[10:26:01] <KirkMcDonald> novns: I think we'd need to see the code to comment on what the code is doing.
[10:28:11] <novns> KirkMcDonald, using a simpler test code leads to runtime error
[10:28:13] *** Joins: shka (~herr@109.231.6.176)
[10:28:49] *** Joins: normen (~normen@p54b35aa4.dip0.t-ipconnect.de)
[10:28:54] <novns> KirkMcDonald, so it looks like some library I use is the problem
[10:29:31] <novns> I will debug this deeper
[10:31:17] <novns> I use fasthttp with quicktemplate, and maybe they do recovers inside incorrectly
[10:32:46] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[10:34:52] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[10:35:28] *** Quits: normen (~normen@p54b35aa4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:42:15] *** Joins: independent56 (~independe@2.31.88.37)
[10:46:25] <novns> KirkMcDonald, I believe it's a sophisticated Writer in quicktemplate
[10:47:11] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[10:52:00] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:55:13] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:56:05] *** Joins: jpw (~jpw@user/jpw)
[10:56:05] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[10:56:55] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:58:08] <novns> no, it's somewhere else
[11:04:17] *** Quits: winning-luser (~wl@2601:8c1:181:1340::6836) (Quit: Leaving)
[11:05:46] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[11:07:34] *** Joins: gggp (~textual@60.10.23.162)
[11:08:06] *** Quits: gggp (~textual@60.10.23.162) (Client Quit)
[11:08:25] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[11:16:06] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Quit: WeeChat 2.3)
[11:17:04] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[11:21:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:21:43] *** Joins: normen (~normen@p54b340b0.dip0.t-ipconnect.de)
[11:23:53] *** Joins: fikran (~fikran@user/fikran)
[11:25:51] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[11:26:29] *** Quits: normen (~normen@p54b340b0.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[11:42:53] *** Joins: skeels (~skeels@110.44.115.205)
[11:49:24] *** Joins: CookE[] (~thedawn@user/thedawn)
[11:49:24] *** Joins: fef (~thedawn@user/thedawn)
[11:50:24] *** Joins: xiongxin (~quassel@113.116.33.66)
[11:51:00] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[11:53:39] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[11:53:49] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[11:56:33] *** Joins: danmurf (~danmurf@user/danmurf)
[11:58:25] *** Joins: seawolf (~seawolf@vps-473e8453.vps.ovh.net)
[12:00:46] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 252 seconds)
[12:01:47] *** Joins: normen (~normen@pd9eec391.dip0.t-ipconnect.de)
[12:09:03] *** Quits: foobaz (~oofabz@199.58.97.156) (Quit: ZNC 1.8.2 - https://znc.in)
[12:10:46] *** Quits: LiftLeft (~LiftLeft@154.21.23.29) (Ping timeout: 252 seconds)
[12:10:55] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[12:11:38] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[12:12:24] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[12:14:22] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Read error: Connection reset by peer)
[12:18:04] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[12:22:38] *** Quits: skeels (~skeels@110.44.115.205) (Quit: Leaving)
[12:22:54] *** Joins: mei (~mei@user/mei)
[12:25:11] *** Quits: danmurf (~danmurf@user/danmurf) (Remote host closed the connection)
[12:28:27] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[12:40:26] *** Quits: k0ta (~k0ta@151.210.173.40) (Ping timeout: 252 seconds)
[12:45:09] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:46:55] *** Joins: normen_ (~normen@pd9eec215.dip0.t-ipconnect.de)
[12:49:07] *** Quits: normen (~normen@pd9eec391.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:49:09] *** normen_ is now known as normen
[12:54:14] *** Quits: normen (~normen@pd9eec215.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[12:54:40] *** Quits: CookE[] (~thedawn@user/thedawn) (Remote host closed the connection)
[12:56:15] *** Joins: normen (~normen@p200300d7173df6004c8662f4dd2e479f.dip0.t-ipconnect.de)
[12:58:40] *** Joins: Guest90 (~textual@119-18-3-156.771203.syd.nbn.aussiebb.net)
[13:04:53] *** Quits: normen (~normen@p200300d7173df6004c8662f4dd2e479f.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[13:06:49] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[13:07:08] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Quit: Leaving.)
[13:08:41] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[13:12:16] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[13:18:02] *** Joins: alzgh (~alzgh@user/alzgh)
[13:19:05] *** Joins: gggp (~textual@111.63.14.119)
[13:23:32] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Remote host closed the connection)
[13:23:52] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[13:24:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:25:58] *** Joins: winning-luser (~wl@2601:8c1:181:1340::6836)
[13:27:47] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[13:28:18] *** Joins: darkapex (~darkapex@user/darkapex)
[13:28:58] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[13:30:20] *** Joins: Debate2021 (~Debate202@103.134.42.228)
[13:30:52] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:31:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:31:56] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[13:32:01] *** Parts: Debate2021 (~Debate202@103.134.42.228) ()
[13:33:13] *** Joins: fikran (~fikran@user/fikran)
[13:44:28] *** Joins: normen (~normen@p200300d7173fab00a1a3c7af185ff94f.dip0.t-ipconnect.de)
[13:47:07] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[13:49:04] *** Quits: Guest90 (~textual@119-18-3-156.771203.syd.nbn.aussiebb.net) (Ping timeout: 252 seconds)
[13:51:44] *** Quits: normen (~normen@p200300d7173fab00a1a3c7af185ff94f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[13:53:17] *** Quits: mei (~mei@user/mei) (Quit: mei)
[13:54:04] *** Joins: normen (~normen@p200300d71707ed00d895e8de38b2e744.dip0.t-ipconnect.de)
[13:55:04] *** Joins: mei (~mei@user/mei)
[13:59:51] *** Quits: gggp (~textual@111.63.14.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:03:42] *** Quits: winning-luser (~wl@2601:8c1:181:1340::6836) (Quit: Leaving)
[14:13:25] *** Joins: normen_ (~normen@p200300d71740a300314f78563a29abaa.dip0.t-ipconnect.de)
[14:14:51] *** Quits: normen (~normen@p200300d71707ed00d895e8de38b2e744.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[14:14:53] *** normen_ is now known as normen
[14:28:35] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[14:28:43] *** Quits: normen (~normen@p200300d71740a300314f78563a29abaa.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:28:51] *** Joins: normen_ (~normen@p200300d71740d30084aea87d19aa2d6c.dip0.t-ipconnect.de)
[14:34:03] *** normen_ is now known as normen
[14:34:15] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:34:29] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:36:31] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 252 seconds)
[14:39:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[14:41:25] *** Joins: LiftLeft (~LiftLeft@154.21.114.197)
[14:48:24] <jinn> since_: i used bytes.repeat. thanks for that.
[14:49:12] *** jinn is now known as antichrist
[14:49:17] *** antichrist is now known as jinn
[14:50:24] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:54:30] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:54:44] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[14:54:51] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:58:51] <dostoyevsky2> I am trying to cache a string, so I have a struct with a *string but when I want to set the pointer I just get: `cannot take the address of': https://play.golang.org/p/7dyzhUt1tyM
[14:58:53] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 264 seconds)
[15:00:15] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[15:00:35] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[15:04:56] <since_> dostoyevsky2: what do you want to do?
[15:05:41] *** Joins: gggp (~textual@60.10.23.162)
[15:07:44] <dostoyevsky2> since_: implementing a memoize pattern
[15:08:19] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:09:58] <Awoobis> dostoyevsky2: x := slow(); use &x
[15:10:08] <since_> dostoyevsky2: ok, makes no sense to me to take pointers of strings
[15:10:11] <since_> https://play.golang.org/p/rwtx9kRaMI6
[15:10:14] <since_> But here you go
[15:10:38] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[15:10:41] <Awoobis> there is really no reason, strings are pointers* already
[15:11:31] <dostoyevsky2> how can one distinguish an uninitialized string from an empty string without a pointer?
[15:13:19] <Awoobis> why do you need to?
[15:13:47] <dostoyevsky2> What if slow returns "" ?
[15:14:06] *** Joins: adl_ (~adl@117.32.216.71)
[15:14:19] <Awoobis> then it returns "" and you work on that
[15:14:26] *** Quits: adlternative (~adl@117.32.216.102) (Ping timeout: 252 seconds)
[15:14:38] <Awoobis> by working with pointers you can never be sure that the value doesnt change later thus invalidating your cache.
[15:14:54] <Awoobis> its likely better to do this using the `map[string]struct{}` pattern
[15:15:07] <Awoobis> or map[string]cachedResult
[15:15:44] <Awoobis> or; better yet, if this is not simply explorative, not optimizing until you're sure you need it
[15:15:53] <dostoyevsky2> ah, yeah...Then I could ask if the key exists, even though the value might be empty
[15:22:27] *** Quits: gggp (~textual@60.10.23.162) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:25:12] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:25:23] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:25:36] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:31:22] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[15:32:13] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[15:40:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[15:42:33] *** Joins: fikran (~fikran@user/fikran)
[15:44:46] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[15:49:17] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:55:04] *** Quits: independent56 (~independe@2.31.88.37) (Ping timeout: 252 seconds)
[16:01:40] *** Quits: yoonkn (~user@175.197.208.79) (Ping timeout: 252 seconds)
[16:05:45] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[16:05:57] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:06:01] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 252 seconds)
[16:08:06] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[16:12:10] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[16:13:03] *** Joins: independent56 (~independe@2.31.88.37)
[16:15:24] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[16:24:32] *** Joins: yoonkn (~user@175.197.208.79)
[16:26:57] *** Joins: Compy_ (~compy@user/compy)
[16:27:51] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:34:52] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[16:35:01] <Tv_> dostoyevsky2: https://pkg.go.dev/database/sql#NullString is nicer than pointers imho
[16:35:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:35:24] *** Joins: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it)
[16:40:45] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[16:41:03] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[16:41:23] *** Quits: normen (~normen@p200300d71740d30084aea87d19aa2d6c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:41:46] *** Joins: normen (~normen@p54b34bb1.dip0.t-ipconnect.de)
[16:46:13] *** Quits: normen (~normen@p54b34bb1.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:47:59] *** Joins: normen (~normen@2a00:20:705a:9855:6533:e642:2a91:734b)
[16:50:33] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[16:50:44] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[16:51:40] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[16:52:49] *** Quits: normen (~normen@2a00:20:705a:9855:6533:e642:2a91:734b) (Ping timeout: 252 seconds)
[16:54:29] *** Joins: normen (~normen@p200300d717441e0029b6b13ed26e4d16.dip0.t-ipconnect.de)
[16:54:29] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:55:00] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:56:16] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:01:07] *** Quits: normen (~normen@p200300d717441e0029b6b13ed26e4d16.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[17:03:06] *** Joins: normen (~normen@p54b34acc.dip0.t-ipconnect.de)
[17:07:10] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:08:13] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[17:08:25] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:12:43] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Client Quit)
[17:13:00] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:23:55] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[17:24:07] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:29:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:29:52] *** Quits: absc (~absc@dynamic-adsl-94-34-168-240.clienti.tiscali.it) (Remote host closed the connection)
[17:29:59] *** Joins: darkapex_ (~darkapex@user/darkapex)
[17:31:35] *** Joins: darkapex- (~darkapex@user/darkapex)
[17:32:25] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[17:34:37] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[17:36:23] *** Joins: gggp (~textual@60.10.23.162)
[17:36:45] *** Quits: gggp (~textual@60.10.23.162) (Client Quit)
[17:47:12] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:50:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:51:11] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[17:51:37] *** Quits: yoonkn (~user@175.197.208.79) (Ping timeout: 252 seconds)
[17:51:53] *** Joins: fikran (~fikran@user/fikran)
[17:52:14] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 250 seconds)
[17:52:46] *** Quits: adl_ (~adl@117.32.216.71) (Quit: Konversation terminated!)
[17:54:04] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[17:55:01] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Max SendQ exceeded)
[17:55:43] *** Joins: gggpkm (~gggpkm@60.10.23.162)
[17:55:48] *** Quits: ninjin- (~ninjin@user/ninjin) (Ping timeout: 276 seconds)
[17:56:52] *** Joins: ninjin (~ninjin@user/ninjin)
[17:57:40] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[17:58:05] *** Joins: xiongxin (~quassel@113.116.33.66)
[18:00:43] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:04:36] *** Joins: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f)
[18:05:00] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[18:07:54] *** Joins: girafe2 (~girafe@176-147-142-235.abo.bbox.fr)
[18:09:24] *** Joins: yoonkn (~user@175.197.208.79)
[18:10:19] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 252 seconds)
[18:12:11] <dostoyevsky2> Would be nice to have default parameters imho... doing it as variadic functions with argument []interface{} feels like using another programming language... https://play.golang.org/p/A0vpgbo77ra
[18:16:27] <dostoyevsky2> Also: Any idea why this code won't compile: `interface {} is map[string]interface {}, not main.I' but I is: 'type I map[string]interface{}'  https://play.golang.org/p/SyEAKgCxcRX
[18:17:21] <nitrix> dostoyevsky2, You want type I = map[string]interface{} instead of type I map[string]interface{}.
[18:18:05] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:6195:dc12:122d:3782)
[18:18:18] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:18:24] <nitrix> dostoyevsky2, `I` is treated like a different type and requires a conversion between `map[string]interface{}` and itself. With the `=` sign, you now have a type alias and can freely assign one to the other.
[18:18:48] *** Joins: andlabs (~andlabs@70.107.171.168)
[18:18:53] <nitrix> dostoyevsky2, Both approaches are valid, depending what you're trying to achieve.
[18:18:58] <dostoyevsky2> nitrix: ah, interesting!
[18:20:15] <nitrix> dostoyevsky2, With the type alias (https://play.golang.org/p/Slmz-LsExYh), with the conversion (https://play.golang.org/p/XYZumAPym2k).
[18:21:21] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:21:46] *** Quits: gggpkm (~gggpkm@60.10.23.162) (Remote host closed the connection)
[18:21:50] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:2152:79ec:66e3:ddf0) (Ping timeout: 265 seconds)
[18:23:19] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[18:24:11] <nitrix> (If you're not familiar with the benefits of having distinct types: it lets you have for example `Age` and `Level` both be an `Int`, yet prevents you to accidently mistaking any of those three by each other.)
[18:27:11] *** Joins: tristero (~nobody@user/tristero)
[18:29:11] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 252 seconds)
[18:34:47] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[18:36:52] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[18:41:36] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[18:42:02] <lauraaah> 🤨
[18:43:21] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[18:44:17] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Max SendQ exceeded)
[18:44:44] *** Joins: gggpkm (~gggpkm@60.10.194.45)
[18:46:20] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[18:46:39] <tar_xvf> nitrix: that is like named types, correct?
[18:47:04] <tar_xvf>  Like time.Duration, which i believe is just an unsigned int with the number of nanoseconds of the duration, but has methods that you can do on it but not on other integers.
[18:48:29] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[18:49:59] <fizzie> "Defined type" is what the language calls them.
[18:50:09] <tar_xvf> ah, thanks fizzie
[18:54:47] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:57:59] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[19:05:41] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:08:51] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:10:52] *** Joins: gggpkm_ (~gggpkm@60.10.194.45)
[19:11:15] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[19:13:17] *** Quits: gggpkm (~gggpkm@60.10.194.45) (Ping timeout: 246 seconds)
[19:15:34] <dostoyevsky2> Golang has not order preserving map builtin, no?  I see that for yaml one can use yaml.MapSlice as an unmarshal target to preserve the order
[19:21:21] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[19:22:43] <KirkMcDonald> The iteration order of Go maps is deliberately random, even.
[19:23:40] *** Quits: xiongxin (~quassel@113.116.33.66) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:24:54] <ikke> I suppose to prevent ossification
[19:26:48] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:36:07] *** Joins: BUSY (~BUSY@user/busy)
[19:36:36] *** Quits: brooks (~bswinnert@containers.neptunenetworks.org) (Quit: The Lounge - https://thelounge.chat)
[19:37:11] *** Joins: brooks (~bswinnert@containers.neptunenetworks.org)
[19:38:11] *** Parts: bankin (~user@user/bankin) (WeeChat 2.8)
[19:51:03] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:57:31] *** Quits: gggpkm_ (~gggpkm@60.10.194.45) (Read error: Connection reset by peer)
[19:58:54] *** Joins: gggpkm (~gggpkm@60.10.194.45)
[19:59:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:00:35] *** Joins: gggpkm_ (~gggpkm@111.63.14.119)
[20:01:13] *** Joins: fikran (~fikran@user/fikran)
[20:03:15] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[20:03:40] *** Quits: gggpkm (~gggpkm@60.10.194.45) (Ping timeout: 252 seconds)
[20:05:48] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:10:21] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Quit: leaving)
[20:12:23] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[20:12:48] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Client Quit)
[20:13:10] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[20:39:00] <seebs> it's not quite *random*, it's specifically and intentionally inconsistent, though.
[20:39:26] <seebs> cool trivia point, there are identifiable patterns to it and you can use it to learn things about the map, and i think it might be possible for a sufficiently motivated person to use it to learn things about the map's hash seed.
[20:40:10] <seebs> dostoyevsky2: while i sort of feel you on "it would be nice to have default parameters", the decision *not* to have those was a carefully-considered one and it is solving a specific problem.
[20:40:36] *** Joins: adriano (~adriano@173.254.204.205)
[20:40:37] <seebs> same with the no order-preserving map. if you want an order-preserving map, it's trivial to make one, but also you get to *define* your order, and you know what cost you're paying for it.
[20:42:16] *** Quits: gggpkm_ (~gggpkm@111.63.14.119) (Ping timeout: 252 seconds)
[20:45:49] *** Quits: fmlatghor (~lcoogan@2601:5cd:8100:2890::3) (Ping timeout: 268 seconds)
[20:46:29] *** Quits: independent56 (~independe@2.31.88.37) (Remote host closed the connection)
[20:46:53] *** Joins: independent56 (~independe@2.31.88.37)
[20:50:46] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1005) (Quit: ZNC 1.8.2 - https://znc.in)
[20:54:49] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[20:59:50] *** Quits: Pacra (~Pacra@pool-100-11-34-209.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[21:04:06] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[21:04:18] *** Quits: teasea (~teasea@user/teasea) (Remote host closed the connection)
[21:04:46] *** Joins: teasea (~teasea@user/teasea)
[21:07:23] *** Joins: gsh (~gsh@2601:281:d17f:1740:3e43:8708:59ab:2581)
[21:16:25] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Quit: Disappeared in a puff of smoke)
[21:17:58] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[21:19:42] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Client Quit)
[21:23:25] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[21:28:42] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[21:29:55] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Client Quit)
[21:34:03] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[21:35:13] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: Ping timeout (120 seconds))
[21:35:31] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[21:36:57] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[21:38:15] *** Quits: gsh (~gsh@2601:281:d17f:1740:3e43:8708:59ab:2581) (Quit: Leaving)
[21:39:34] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Client Quit)
[21:40:48] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[21:43:53] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 252 seconds)
[21:52:10] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5) (Quit: Leaving)
[21:52:24] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5)
[21:55:36] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: I'm out!)
[21:56:08] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[21:56:38] *** Joins: winning-luser (~wl@2601:8c1:181:1340::6836)
[22:07:21] *** Joins: roshanavand (~roshanava@185.209.196.173)
[22:08:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[22:10:32] *** Joins: fikran (~fikran@user/fikran)
[22:10:47] *** Quits: adriano (~adriano@173.254.204.205) (Ping timeout: 240 seconds)
[22:11:29] *** Joins: Torr (~Torr@user/torr)
[22:17:16] *** Quits: LiftLeft (~LiftLeft@154.21.114.197) (Ping timeout: 252 seconds)
[22:19:29] *** Joins: adriano (~adriano@173.254.204.205)
[22:20:05] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[22:26:03] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-6195-dc12-122d-3782.inf6.spectrum.com)
[22:26:40] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 252 seconds)
[22:28:49] *** Joins: pepee (~pepee@user/pepee)
[22:29:12] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:6195:dc12:122d:3782) (Ping timeout: 268 seconds)
[22:42:01] *** Quits: adriano (~adriano@173.254.204.205) (Ping timeout: 252 seconds)
[22:43:50] *** Joins: adriano (~adriano@mobile-166-176-187-68.mycingular.net)
[22:50:16] *** Quits: adriano (~adriano@mobile-166-176-187-68.mycingular.net) (Ping timeout: 252 seconds)
[22:52:54] *** Joins: Lorra (~lorenzo@2001:a61:be4:201:2c70:ff42:b0f:e800)
[22:56:52] <dostoyevsky2> seebs: I am not sure if I can even write an OrderedMap implementation and make YAML use it
[22:57:21] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:58:46] *** Joins: adriano (~adriano@mobile-166-176-187-68.mycingular.net)
[23:00:33] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[23:02:32] *** Quits: Lorra (~lorenzo@2001:a61:be4:201:2c70:ff42:b0f:e800) (Quit: Konversation terminated!)
[23:04:59] <dostoyevsky2> But seems that via yaml.MapSlice it's possible to read-out the original order even for nested maps...  So I could create a standard go map from that and then iterate the yaml.MapSlice for when I want to access the map in the file order
[23:05:05] <dostoyevsky2> https://play.golang.org/p/XpXhF_UiEv2
[23:10:19] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Remote host closed the connection)
[23:13:16] *** Joins: normen_ (~normen@p54b340d4.dip0.t-ipconnect.de)
[23:14:28] *** Quits: normen (~normen@p54b34acc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[23:14:29] *** Joins: krux02 (~krux02@p200300e81719330059822492d9593bdc.dip0.t-ipconnect.de)
[23:14:30] *** normen_ is now known as normen
[23:14:35] *** Quits: roshanavand (~roshanava@185.209.196.173) (Ping timeout: 252 seconds)
[23:16:53] *** Quits: adriano (~adriano@mobile-166-176-187-68.mycingular.net) (Ping timeout: 246 seconds)
[23:19:05] *** Joins: adriano (~adriano@173.254.204.205)
[23:20:31] *** Quits: normen (~normen@p54b340d4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[23:22:14] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[23:22:34] *** Joins: normen (~normen@p200300d7174c96003d235f7158403c4b.dip0.t-ipconnect.de)
[23:22:43] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[23:27:44] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 246 seconds)
[23:32:09] *** Joins: lvx (~lvx@APN-123-246-111-gprs.simobil.net)
[23:33:50] *** Joins: roshanavand (~roshanava@194.36.25.37)
[23:37:54] *** Parts: lvx (~lvx@APN-123-246-111-gprs.simobil.net) ()
[23:38:16] *** Joins: lvx (~lvx@APN-123-246-111-gprs.simobil.net)
[23:43:41] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:43:54] *** Joins: moog (~moog@107.77.244.136)
[23:44:41] *** Joins: eNV25 (~quassel@46.11.193.250)
[23:45:34] *** Quits: eNV25 (~quassel@46.11.193.250) (Client Quit)
[23:46:16] *** Joins: eNV25 (~quassel@46.11.193.250)
[23:46:16] *** Joins: normen_ (~normen@p200300d7174bb200bc1c7ca5eea6bec6.dip0.t-ipconnect.de)
[23:46:18] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Client Quit)
[23:46:26] *** Quits: eNV25 (~quassel@46.11.193.250) (Client Quit)
[23:46:38] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[23:46:54] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[23:48:01] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[23:48:04] *** Quits: normen (~normen@p200300d7174c96003d235f7158403c4b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[23:48:06] *** normen_ is now known as normen
[23:48:33] *** Joins: eNV25 (~quassel@user/env25)
[23:50:22] *** Quits: eNV25 (~quassel@user/env25) (Client Quit)
[23:56:21] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[23:56:58] *** Joins: noarb (~noarb@user/noarb)
[23:57:01] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[23:59:39] *** Quits: noarb (~noarb@user/noarb) (Client Quit)
[23:59:48] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
