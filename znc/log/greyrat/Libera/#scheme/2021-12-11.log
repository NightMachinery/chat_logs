[00:05:02] <dpk> https://github.com/ashinn/chibi-scheme/pull/793
[00:05:45] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[00:07:14] *** Joins: tatsumaru (~tatsumaru@78.83.244.47)
[00:07:53] <tatsumaru> hey guys, I find it really confusing when parameters are called similarly to function names or variables. is this just because I am noob programmer?
[00:08:05] <tatsumaru> this is about naming conventions
[00:08:38] <dpk> parameters in the sense of SRFI 39/parameterize? by convention, their names usually start with current-
[00:08:44] <tatsumaru> like for example fn is called asym-body-parts and parameter is called asym-body-part
[00:08:53] <dpk> oh, you mean formals
[00:10:32] <tatsumaru> i feel like I waste brain resources to determine if this is just calling another fn or not
[00:11:32] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[00:13:45] <tatsumaru> in the example I am working on I have values bound to a name 'asym-hobbit-body-parts' and another fn that takes as an argument a paramter that's called 'asym-body-parts'.
[00:15:02] <tatsumaru> anyway just feels like bad practice and I am wondering if my intuition is off on this
[00:24:30] <Zipheir> Naming is hard.
[00:26:02] <Zipheir> tatsumaru: What do you mean by "parameters" with names similar to those of "variables"?
[00:27:32] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[00:30:30] <dpk> it appears chibi is one of those projects with a CI that mysteriously and non-deterministically fails
[00:31:51] <dpk> slightly better than my last programming job before i quit technology to become an historical linguist, which had a CI which mysteriously and non-deterministrically hung. you had to sit around and wait and see if the tests just … stopped running at some point, and manually stop and restart the build and hope it wouldn't do it a second time
[00:32:20] <dpk> wouldn't have been *so* bad, except the complete test suite took like an hour to run, and of course it has a habit of hanging 55 minutes in
[00:35:27] <dpk> well, i think (purely anecdotally) i've noticed one operation that is sped up significantly by my Chibi patch: the REPL feature where it searches for modules exporting any variable names you tried to use now returns almost instantly, whereas without it it felt like it always took a few seconds or so
[00:35:49] <dpk> *undefined variable names
[00:38:07] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:80d4:7220:f6ab:2cb) (Ping timeout: 250 seconds)
[00:44:58] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 260 seconds)
[00:58:05] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[01:07:13] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[01:08:12] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[01:16:11] <tatsumaru> Zipheir: see my example of a name and parameter similarity above
[01:17:44] *** Joins: zardoz (~bc8147f2@cerf.good1.com)
[01:18:41] <tatsumaru> I didn't explain this very well though, the parameter of one function is called 'asym-body-parts' and the name of another variable is called 'asym-hobbit-body-parts'. Since both are related, the author decided to omit 'hobbit' from one name so that they aren't the same name
[01:20:17] <tatsumaru> in this case the variable is a vector of maps, and the function that contains the parameter is called on that variable
[01:20:55] *** Joins: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net)
[01:22:25] <gwatt> what is "asym" short for? asymmetric?
[01:22:38] <tatsumaru> yeah
[01:31:43] <Zipheir> tatsumaru: IMHO formal parameters sharing names with actual parameters is a Good Thing.
[01:32:54] <Zipheir> tatsumaru: If write-something has a formal parameter named 'file', it makes sense to me to pass it something named 'file', too, to emphasize the connection.
[01:34:28] <Zipheir> I can point to K&R and SICP as books that follow this practice.
[01:35:50] <tatsumaru> I mean I agree that similarity is most likely best practice, but in this case I feel the difference is between something similar but non-descriptive such as "my-folder" & "the-folder"  and something clear like "folder" & "folder-param"
[01:35:55] <Zipheir> Parameters sharing names with top-level procedures is probably more confusing, OTOH.
[01:36:30] <Zipheir> Yes.  I'd just use 'folder' in that case.
[01:36:53] <Zipheir> *top-level definitions
[01:37:03] <gwatt> tatsumaru: you want to suffix all function parameters with "-param"?
[01:37:33] <dpk> chox, my patch *slightly* speeds up my 'small' string benchmark (though by such an insignificant amount that it could be measurement error), whereas enabling Chibi's char->byte offset table actually slows it down (by a small, but significant amount)
[01:38:00] <Zipheir> i-param, a-param, f-param, that's going to get very wordy.
[01:38:05] *** Quits: turtleman (~turtleman@pool-108-5-181-231.nwrknj.fios.verizon.net) (Quit: Leaving)
[01:38:10] <dpk> my patch also increases performance on my benchmark for 'tiny' strings
[01:38:40] <Zipheir> tatsumaru: Also, something slightly cryptic to think about: "There is no such thing as a free variable".
[01:38:52] <dpk> (tiny strings are only a few characters long; i chose the small strings deliberately to be just long enough to trigger Chibi's char->byte offset table, which it doesn't build for strings less than 76 characters long)
[01:39:42] <dpk> still need to write a benchmark for longer strings, for which i'll probably use Markus Kuhn's UTF-8-demo.txt, and if i want a really long string, i'll grab some long book off Project Gutenberg or something
[01:41:42] <tatsumaru> Zipheir: hmm I haven't even experienced a so-called free variable yet
[01:41:59] <Zipheir> I'll bet you have.
[01:42:27] <Zipheir> cons is usually one.
[01:42:29] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:20da:29e1:d59f:bcc5)
[01:42:56] <tatsumaru> cons isn't local?
[01:43:13] <Zipheir> Where is cons bound?
[01:47:01] <tatsumaru> I'm tempted to say nowhere, but that doesn't sound possible.
[01:47:46] <Zipheir> The top-level.
[01:47:55] <tatsumaru> wait isn't cons a function?
[01:47:59] <Zipheir> Yes.
[01:48:10] <Oxyd> It's bound to a function, more precisely.
[01:49:13] <tatsumaru> so any variable that's used within a function that has global scope is free?
[01:49:56] *** Joins: jao- (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[01:49:56] <Zipheir> It's even simpler than that.
[01:50:24] <Zipheir> tatsumaru: https://en.wikipedia.org/wiki/Lambda_calculus#Free_variables
[01:50:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a4b4:347c:365d:9ab6)
[01:50:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a4b4:347c:365d:9ab6) (Changing host)
[01:50:46] *** Joins: skapata (~Skapata@user/skapata)
[01:51:22] <Zipheir> tatsumaru: f is free in (lambda (x) (f x)).  x is free in (f x).
[01:51:26] <Zipheir> (As is f.)
[01:52:47] <tatsumaru> ah right, I see
[01:53:09] <tatsumaru> so why aren't they actually free
[01:54:12] <tatsumaru> or is this something for me to contemplate
[01:54:17] <Zipheir> Where there's an expression, there's an enclosing scope.
[01:54:40] <Zipheir> The "top level" in Scheme is just a metaphorical "final turtle".
[01:56:25] <tatsumaru> is scope considered an abstraction bind?
[01:56:42] <Zipheir> I'm not sure I understand that.
[01:57:06] <tatsumaru> if a variable has scope does that mean it's bound by an abstraction
[01:57:37] <Zipheir> Lambda-bound, you mean?
[01:58:12] <Zipheir> There is lambda abstraction and lambda binding, but no "abstraction binding", AFAIK.
[01:58:19] <tatsumaru> well in the description you gave me about free vars it says that as long as a variable isn't bound by an abstraction it's free, so I am trying to piece together why the fact that there's always a scope means there's no free variables
[01:58:52] <Zipheir> So it does.  Yes, that's what I mean by lambda-binding.
[02:00:00] <Zipheir> tatsumaru: Here's the question: if f is truly "unbound" in (lambda (x) (f x)), what does that expression mean?
[02:00:44] <Zipheir> More directly, what does f mean if f is unbound?
[02:00:51] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:02:28] <tatsumaru> do you mean in the philosophical sense or in an eval sense
[02:04:41] <Zipheir> I believe they're the same, but sure, in the eval sense.
[02:05:18] <tatsumaru> I feel like anything that's actually unbound isn't relative so it must be 0.
[02:05:52] <Zipheir> That would simply mean it was bound to 0!
[02:06:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[02:06:32] <Zipheir> The point is that it's meaningless, and you might get demons flying out of your nose if you evaluate it.
[02:06:57] <Zipheir> So we are always working with bound variables.
[02:08:13] <tatsumaru> Could thinking about variables in terms of them being free  create a technical problem in some theoretical situation?
[02:09:22] <Zipheir> I guess.  Hard to say in general.
[02:09:57] <Zipheir> But the idea leads to some fascinating areas.  Check out Nada Amin's work on infinite towers of interpreters.
[02:10:10] <tatsumaru> A lot of things in programming seem to be useful, but not true.
[02:10:11] *** Quits: klovett (~klovett@107.115.32.161) (Quit: ZZZzzz…)
[02:10:11] <Oxyd> The part that you seem to be missing is that it's always “free in something”. It doesn't make much sense without the “in something” part. f is free in (lambda (x) (f x)), but, if the program actually works, it's still going to be bound somewhere.
[02:10:20] <Zipheir> https://blog.sigplan.org/2021/08/12/reflective-towers-of-interpreters/
[02:11:19] <tatsumaru> I am getting a Gödel vibe from the first paragraph lol
[02:12:07] <Zipheir> Oxyd: Thanks.
[02:13:18] <Zipheir> tatsumaru: It's much like writing any interpreter for any language.  The language has meaning because you're giving it meaning with your program, which has meaning because of the interpreter running the program, and so on.
[02:13:23] <tatsumaru> Oxyd: That would imply that every variable is free in something and would make that term irrelevant
[02:14:28] <Zipheir> tatsumaru: We want to be able to talk about subexpressions.
[02:14:30] <Oxyd> It does imply that, and no, it doesn't. For an example, x is free in (f x). So now, both f and x are free in something.
[02:14:46] <Zipheir> tatsumaru: We don't define every word we use when saying something.
[02:16:08] <tatsumaru> Hmm, that wouldn't work would it, it would become a fractal.
[02:16:16] <amazigh> ... somewhere over the rainbow...
[02:16:20] <Oxyd> x is free in (f x), but it's bound in (lambda (x) (f x)), so (lambda (x) (f x)) is the smallest subexpression where it's bound, so you can use that to say that (lambda (x) (f x)) “binds” x. And, indeed, that makes plenty of sense.
[02:17:18] <tatsumaru> so basically context then?
[02:21:31] <Zipheir> That's a good general way to think about it.  The context of an expression.
[02:24:22] <Zipheir> The free variables of an expression, that is.
[02:26:01] *** Joins: Avichi (~Avichi@2a01:e34:ec21:e7a0:a3b9:2af7:fb21:7863)
[02:26:05] <dpk> hang on, i could use my patch to speed up cursor->index operations and not merely index->cursor
[02:34:49] <tatsumaru> In that reflective towers of interpreters case I think you don't have as much freedom to play with the base layer as you have with the following meta layers which sould be a constraint of sort. level 0 can't reify atoms.
[02:35:11] *** Joins: livoreno (~livoreno@user/notzmv)
[02:35:36] <tatsumaru> so to a certain degree you are bound by the initial parameters.
[02:36:32] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[02:37:27] <Zipheir> There are probably tons of other ways to play with the idea.  It's not like you have to do it Nada Amin's way.
[02:37:53] <tatsumaru> don't mean to be a buzzkill, just contemplating
[02:38:28] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[02:38:32] <tatsumaru> i seem to be always more fascinate by what is possible in the opposite direction of meta
[02:39:13] <Zipheir> As Will Byrd was talking about recently, self-modifying interpreter towers were a big idea in AI once upon a time, but sadly stopped getting attention somewhere in the late 80s.
[02:39:55] <tatsumaru> Is this a similar to a von neumann machine?
[02:41:23] <Zipheir> There's probably been research connecting reflective interpreters with automata.
[02:42:16] *** Quits: jao- (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:43:13] *** Joins: notzmv (~zmv@user/notzmv)
[02:44:08] *** Joins: jao- (~jao@185.65.135.176)
[02:44:50] <tatsumaru> Can I ask an off-topic question?
[02:47:05] <sham1> Well you just did
[02:47:10] <sham1> So yes
[02:47:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[02:47:43] <tatsumaru> That question wasn't bound to a topic
[02:48:49] <tatsumaru> Anyway, I am curious - Doesn't relativity theory make set theory obsolete?
[02:50:40] <sham1> While you can have different axiomatic basis for mathematics like ZFC or HoTT or such, none of them are *better* than any other, it just depends on what you're doing
[02:53:06] <tatsumaru> That doesn't sound very scientific
[02:53:55] <Spawns_Carpeting> anyone know of any recent schemes that have been developed in the last like 5-10y
[02:54:00] <Spawns_Carpeting> i found cons.io
[02:54:06] <Spawns_Carpeting> https://cons.io
[02:54:21] <Spawns_Carpeting> "gerbil scheme"
[02:54:35] <Spawns_Carpeting> i am very interested in modern takes on lisp/scheme 
[02:54:55] <tatsumaru> Someone on this channel was developing something called AIrship recently, not sure if it's released or not, it's a scheme
[02:54:57] <Zipheir> tatsumaru: That's like asking if painting makes cows obsolete.
[02:56:00] <tatsumaru> I don't see it that way, but alright
[02:56:07] <Zipheir> Spawns_Carpeting: https://justinethier.github.io/cyclone/ is pretty recent.
[02:56:21] <Zipheir> tatsumaru: I mean, a physical theory *can't* undermine set theory.
[02:58:04] <Zipheir> They were also historically developed at about the same time, often by people who were familiar with both theories.
[02:58:22] <Spawns_Carpeting> that looks really niec Zipheir 
[02:58:45] <Zipheir> I don't recall Russell e.g. ever saying *anything* about general relativity and set theory having any implications for each other.
[02:58:56] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:59:28] <sham1> Hilbert almost had general relativity before Einstein did
[03:00:04] <sham1> And of course the Hilbert school was very influential with the way we think of mathematics, even if they turned out to be wronf
[03:00:08] <Zipheir> Spawns_Carpeting: The Cyclone author shows up in #scheme from time to time, as does the Gerbil author.
[03:00:42] <dpk> grumblegrumblegrumble, Mac OS doesn't seem to ship with any tool to measure the memory usage of a command
[03:00:56] <Spawns_Carpeting> wow i did not realize that! Zipheir 
[03:00:59] <Spawns_Carpeting> that's super cool
[03:01:10] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:01:27] <dpk> time -v, which the Stack Exchange answers recommend, appears to be a GNU feature. not in the Mac OS version of /usr/bin/time, anyway
[03:01:30] <tatsumaru> Zipheir: Let's say for the sake of argument that sets couldn't really exist on the physical plane, therefore any sets would be approximations and would have to generate some sort of artifacts to compensate for that inaccuracy and would therefore break at scale. Wouldn't that mean that set theory would produce the same sort of errors in a scientific context and is not a correct approach to dealing with real world applications?
[03:01:53] <dpk> ah, gnu-time is in Homebrew …
[03:04:12] <Zipheir> tatsumaru: The important thing is that the error can be quantified.  Scientists compute with real numbers all the time, but most of those can't be expressed in finite time or memory.
[03:05:26] <Zipheir> tatsumaru: In any case, the problems only go one way.  There is nothing mathematically inconsistent about an object that can't exist.
[03:05:40] <Zipheir> *can't physically exist
[03:08:40] <tatsumaru> I really wish there was some dedicated place to discuss philosophy of science, totally underrated subject.
[03:09:58] *** Quits: Avichi (~Avichi@2a01:e34:ec21:e7a0:a3b9:2af7:fb21:7863) (Ping timeout: 256 seconds)
[03:15:55] <Zipheir> tatsumaru: I think a hardcore pragmatist might agree with you that, if a theory can't help you "do stuff" in the physical world, then it's wrong.  I'm not a pragmatist.
[03:17:00] <tatsumaru> Can you elaborate on your point of view please?
[03:17:17] <tatsumaru> What is the value of a theory for you?
[03:22:17] <Zipheir> tatsumaru: I really appreciate mathematical theories that are good thinking tools.
[03:24:14] <tatsumaru> Do you mean that in a closed system kinds of way, as in thinking about chess where the problems are defined by artificial constraints and the solutions aren't relevant to the physical world?
[03:26:14] *** Joins: badkins (~badkins@136.56.92.199)
[03:26:57] <Zipheir> tatsumaru: Sure.  Maybe I'm thinking about chess today.
[03:44:31] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:d10e:cf28:805f:4f6f) (Ping timeout: 252 seconds)
[03:44:32] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[03:48:50] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[03:49:29] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:49:49] *** Quits: s-liao (~s-liao@101.86.99.70) (Client Quit)
[03:51:11] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:52:58] *** Joins: klovett (~klovett@107.115.32.161)
[03:53:37] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:07:42] *** Joins: klovett_ (~klovett@107.115.32.161)
[04:08:58] *** Quits: klovett (~klovett@107.115.32.161) (Ping timeout: 256 seconds)
[04:10:38] *** Quits: tatsumaru (~tatsumaru@78.83.244.47) (Quit: Leaving.)
[04:20:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:27:24] *** Joins: faLUKE (~paolo@host-79-37-180-53.retail.telecomitalia.it)
[04:28:24] <faLUKE> hello, given a list like:   ((prop1 . 1) (prop2 . 1)(prop3 . 4))   <--- how can I check if prop1 is inside the list ?  
[04:29:27] <faLUKE> (I can use guile)
[04:31:15] <dpk> assoc, assv, assq
[04:31:22] <dpk> as appropriate
[04:33:18] <faLUKE> dpk: (if (assoc "yy" '(("XX" . 1) ("YY" . 2)) <---- I have to (display "hello")  ... what is the right syntax?
[04:37:02] <dpk> you want to display it if it’s there? that won’t be the case for that example, because "yy" is not equal? to "YY"
[04:37:48] <dpk> you’ll need to tell assoc to use string-ci=? if you want case-insensitive comparison
[04:37:52] <faLUKE> dpk: solved
[04:38:33] <faLUKE> (sorry, I don't know the scheme syntax, but I solved with   (if (assoc "YY" '(("XX" . 1) ("YY" . 2)) (display "hello"))
[04:39:15] <dpk> yes, that’s correct :-)
[04:40:15] <faLUKE> thanks
[04:43:49] <faLUKE> excuse me dpk: what if I have to display hello if YY is NOT in the list?     (if (not (assoc "YY" mylist)) (display "hello"))  ?
[04:44:23] <dpk> yes, exactly
[04:44:38] <faLUKE> ok
[04:44:51] <dpk> note you can add a third argument to if as well, as an ‘else’ clause
[04:45:59] *** Quits: jao- (~jao@185.65.135.176) (Ping timeout: 250 seconds)
[04:46:03] <dpk> so (if (assoc "YY" '(("XX" . 1) ("YY" . 2)) (display "hello") (display "goodbye")) will print hello if it’s there, and goodbye if it’s not
[04:48:08] *** Joins: jao- (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[04:51:06] <faLUKE> thanks again
[04:58:29] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Remote host closed the connection)
[05:00:19] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:02:40] <faLUKE>  dpk, which is the proper way to insert ("YY" . 2) in MyList if "YY" doesn't exist?
[05:02:52] <faLUKE> should I use if assoc, or is there a shorter way ?
[05:03:26] <faLUKE> if-assoc-append!
[05:03:43] *** Joins: livoreno (~livoreno@user/notzmv)
[05:07:53] <dpk> depending on the situation, i wouldn’t bother checking it’s there first at all. just (cons '("YY" . 2) MyList). alists can handle multiple associations to the same key, and assoc and friends will give you the first (i.e. most recently added) one
[05:09:07] <dpk> however, you might want to check first if adding one every time around in a loop would cause it to never stop adding more of them. in that case you check with an assoc in an if first, and do the cons if it’s false
[05:10:42] <faLUKE> thanks dpk, it worked. Using append! caused weird duplicates
[05:15:01] <faLUKE> this is a very helpful channel!
[05:18:13] *** Joins: [deleted] (~livoreno@user/notzmv)
[05:22:41] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[05:37:05] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[05:39:00] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[05:41:20] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[05:43:32] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:44:07] *** Joins: badkins (~badkins@136.56.92.199)
[05:45:47] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:20da:29e1:d59f:bcc5) (Ping timeout: 250 seconds)
[05:46:17] *** Quits: jao- (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[05:48:02] *** Joins: livoreno (~livoreno@user/notzmv)
[05:49:16] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[05:50:02] *** Quits: schulze (~schulze@dynamic-095-112-089-125.95.112.pool.telefonica.de) (Ping timeout: 240 seconds)
[05:52:32] *** Joins: jao- (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:55:24] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:57:05] *** Joins: seninha (~seninha@user/seninha)
[05:58:21] <Zipheir> rudybot: Another satisfied customer!
[05:58:22] <rudybot> Zipheir: another satisfied customer
[05:58:44] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[06:01:52] *** Joins: badkins (~badkins@136.56.92.199)
[06:06:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[06:08:15] *** Joins: badkins (~badkins@136.56.92.199)
[06:14:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[06:35:52] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:44:11] *** Quits: zardoz (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[06:48:39] <jcowan> rudybot: And if you don't like my advice, double your money back, no questions asked!
[06:48:56] <rudybot> jcowan: let me offer some street-law advice that applies double on IRC: don't talk to cops, not when they're arresting you and especially not when they're letting you off the hook
[06:50:28] <jcowan> rudybot: No need to tell *me*.  I grew up in a lawin' family, and the first thing you learn is there ain't any definite answers to anything.
[06:51:15] <rudybot> jcowan: definite no for freedos, a lot of freedos users are people who run it to play old dos games
[06:54:44] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:58:13] *** Quits: faLUKE (~paolo@host-79-37-180-53.retail.telecomitalia.it) (Remote host closed the connection)
[07:00:07] <X-Scale> or to run Borland Turbo C
[07:00:14] *** Joins: livoreno (~livoreno@user/notzmv)
[07:02:55] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 250 seconds)
[07:21:54] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:20da:29e1:d59f:bcc5)
[07:23:30] *** Joins: m455 (~m455@user/m455)
[07:26:43] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:20da:29e1:d59f:bcc5) (Ping timeout: 252 seconds)
[07:36:11] <mdhughes> Turbo Pascal's better.
[07:43:10] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Remote host closed the connection)
[07:43:27] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:44:02] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 260 seconds)
[07:44:53] *** Quits: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8) (Ping timeout: 265 seconds)
[07:47:42] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:48:43] *** Joins: klovett (~klovett@107.115.32.161)
[07:51:55] *** Quits: klovett_ (~klovett@107.115.32.161) (Ping timeout: 268 seconds)
[07:53:08] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[08:00:44] *** Quits: jao- (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:10:42] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:11:23] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 250 seconds)
[08:17:25] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[08:17:39] *** Joins: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8)
[08:49:58] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[08:52:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[09:06:53] *** Joins: s-liao (~s-liao@101.86.99.70)
[09:09:17] *** Joins: badkins (~badkins@136.56.92.199)
[09:13:56] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[09:30:26] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 260 seconds)
[09:41:05] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 268 seconds)
[09:43:34] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:43:51] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:44:13] *** Quits: sdu (~doo@185.44.146.165) (Ping timeout: 252 seconds)
[09:45:59] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[09:46:51] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:48:27] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 250 seconds)
[09:49:52] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[09:52:30] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:54:29] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:20da:29e1:d59f:bcc5)
[10:06:22] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[10:13:50] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[10:26:52] *** Joins: seninha (~seninha@user/seninha)
[10:38:16] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:40:01] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:00:23] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 250 seconds)
[11:15:47] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[11:35:48] *** Quits: klovett (~klovett@107.115.32.161) (Quit: ZZZzzz…)
[11:40:23] *** Joins: badkins (~badkins@136.56.92.199)
[11:45:08] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[11:46:32] *** Joins: mononote (~mononote@user/mononote)
[12:13:42] *** Joins: schulze (~schulze@dynamic-077-010-229-144.77.10.pool.telefonica.de)
[12:16:25] *** Joins: notzmv (~zmv@user/notzmv)
[12:31:02] *** Joins: thevishy (~Nishant@2405:201:f005:c007:acb3:d7a7:c300:b2a1)
[12:35:27] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:44:24] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c03:feaf:f4fc:a85)
[12:47:30] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:10:15] <amazigh> hello all
[13:23:47] *** Quits: schulze (~schulze@dynamic-077-010-229-144.77.10.pool.telefonica.de) (Quit: nyaa~)
[13:24:22] *** Joins: schulze (~schulze@dynamic-077-010-229-144.77.10.pool.telefonica.de)
[13:38:37] <rgherdt> hi
[13:41:24] *** Joins: badkins (~badkins@136.56.92.199)
[13:44:37] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[13:45:53] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[13:48:02] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:56:05] *** Joins: badkins (~badkins@136.56.92.199)
[14:00:34] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[14:01:33] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:02:09] *** Joins: X-Scale` (~ARM@206.46.158.5.rev.vodafone.pt)
[14:04:33] <dpk> hm, i modified my Chibi patch so it can move the cached cursor backwards as well as forwards. it made my small string benchmark almost as slow as the version with the table. i guess this is because guessing whether it would be quicker to move backwards from the cached cursor requires a division, albeit positive integer division by two, which the compiler *should* just be able to turn into a shift, right?
[14:04:40] *** Quits: X-Scale (~ARM@83.223.232.153) (Ping timeout: 265 seconds)
[14:04:40] *** X-Scale` is now known as X-Scale
[14:04:45] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:05:55] * dpk makes it an explicit shift just to be sure
[14:09:16] <dpk> … the explicit shift did make it quicker, though still not as quick as the version that always moves forwards 🤨
[14:09:46] <dpk> or, indeed, as quick as vanilla Chibi with none of this buggering about with trying to make people's stupid string algorithms slightly less quadratic
[14:11:52] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[14:12:09] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:13:50] *** Quits: gproto23 (~gproto23@user/gproto23) (Client Quit)
[14:14:02] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:19:38] <dpk> bah, great, it's actually hard to tell the real impact because i just re-measured the performance of the exact same code as i had last night, and it's running slower today for some reason. computers!
[14:25:26] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:50:16] *** Joins: s-liao (~s-liao@101.86.96.154)
[15:14:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[15:14:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:26:19] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[15:50:29] <AndrewYu> B
[15:50:35] <AndrewYu> oops, sry
[15:55:17] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[15:56:59] *** Joins: badkins (~badkins@136.56.92.199)
[16:01:33] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[16:21:34] *** Joins: badkins (~badkins@136.56.92.199)
[16:25:36] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[16:30:29] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[16:47:10] <amazigh> I have algorithm riddle of some sort: given a set of program files that take zero arguments, build a execution plan, ie. an ordering of the set of programs, so that the most primitive and simple programs are run before more complex programs.
[16:48:53] <wasamasa> https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm
[16:57:24] *** Joins: badkins (~badkins@136.56.92.199)
[17:00:39] *** Joins: s-liao (~s-liao@101.86.96.154)
[17:13:29] *** Quits: light (~light@user/light) (Ping timeout: 250 seconds)
[17:16:47] <sham1> You want to find the connected components and you probably want a topological sort if the files have one-way dependencies
[17:35:52] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[17:38:36] *** Joins: s-liao (~s-liao@101.86.96.154)
[17:40:56] <dpk> i'm fairly certain Riastradh probably intended to put the GPL itself into this file, but forgot that > doesn't specify the output file for wget, or similar http://mumble.net/~campbell/scheme/COPYING.GPL
[17:44:30] <jcowan> amazigh: if you have a measure for complexity like https://en.wikipedia.org/wiki/Cyclomatic_complexity, then you just sort them by it.  For less naive measures, see https://en.wikipedia.org/wiki/Programming_complexity
[18:00:25] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[18:20:40] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:22:43] *** Joins: light (~light@user/light)
[18:27:19] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[18:27:35] *** Joins: m455 (~m455@user/m455)
[18:38:32] *** Joins: civodul (~user@guix/contributor/civodul)
[18:49:25] *** Joins: X-Scale` (~ARM@83.223.235.63)
[18:49:55] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 250 seconds)
[18:51:01] *** Quits: X-Scale (~ARM@206.46.158.5.rev.vodafone.pt) (Ping timeout: 240 seconds)
[18:51:01] *** X-Scale` is now known as X-Scale
[19:02:04] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[19:11:30] *** Joins: klovett (~klovett@107.115.32.161)
[19:21:56] <mdhughes> I got something like that as an interview puzzle once, and my solution was listing dependencies like a directory, sorting, random choice when undecidable. Interviewer didn't like it.
[19:22:00] *** Joins: seninha (~seninha@user/seninha)
[19:40:47] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:42:37] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[19:45:39] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[19:47:30] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[19:54:28] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:55:57] <amazigh> I think it requires a topological sort, I am not sure about strong components, cyclomatic complexity can be a low-hangy fruit
[20:13:37] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[20:14:12] *** Quits: aeka (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[20:15:31] *** Joins: aeka (~aeka@2606:6080:1002:9:ffc4:b9c1:20ad:82f9)
[20:20:28] *** Joins: shawnw (~shawn_w@152.44.212.188)
[20:45:14] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[21:17:08] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:19:10] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[21:20:11] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[21:21:57] <dpk> oof. how things have changed since 2013: the feature identifiers R7RS small felt were worth standardizing included the CPU architectures: i386, x86-64, ppc, sparc, jvm, clr, llvm, ...
[21:22:22] <dpk> standard identifiers for SPARC and PPC … but not for ARM
[21:23:15] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:30:03] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[21:30:53] <sham1> Couldn't those just be added to a dockef
[21:31:30] <sham1> I feel like a standard feature name for ARM64 or whatever would be non-controversial but then again
[21:33:43] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 252 seconds)
[21:40:44] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 268 seconds)
[21:43:41] <jcowan> Sure.  It doesn't even really require a SRFI; perhaps it can even be done by erratum to R7RS-small.
[21:45:43] <sham1> It is a weird omission. It's like, even small devices like Raspberry Pis existed back then, you'd think someone would have said "hey, maybe we need something for ARM"
[21:46:20] <jcowan> This is your chief cook and bottle washer, urging you to vote in the Urania Docket straw poll at http://tinyurl.com/urania-straw-poll.  This contains a selection of pre-SRFIs that don't yet have implementations.  At this stage we are not voting for inclusion in R7RS, simply whether a SRFI is worth having or not.
[21:46:25] <sham1> Oh well, hindsight 20/20 and all that
[21:46:48] <jcowan> (You also get to say if you are interested in implementing it.)
[21:47:27] <jcowan> There are only five votes so far, many of them tied 2-2.  So go out, read the pre-SRFIs, and vote vote vote!
[21:53:50] <amazigh> combinations is missing no-vote
[21:54:18] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:20da:29e1:d59f:bcc5) (Ping timeout: 260 seconds)
[21:56:50] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:91cb:ec3c:fffd:d3b)
[21:59:23] <amazigh> in the pool
[22:04:45] *** Joins: [deleted] (~livoreno@user/notzmv)
[22:08:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[22:09:03] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:09:43] *** Joins: badkins (~badkins@136.56.92.199)
[22:16:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[22:51:40] *** Joins: badkins (~badkins@136.56.92.199)
[22:52:22] *** Joins: yhsiveht (~Nishant@49.37.177.34)
[22:54:45] *** Quits: thevishy (~Nishant@2405:201:f005:c007:acb3:d7a7:c300:b2a1) (Ping timeout: 252 seconds)
[22:56:13] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[23:08:14] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:89eb:c803:5da4:bd55)
[23:08:14] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:89eb:c803:5da4:bd55) (Changing host)
[23:08:14] *** Joins: skapata (~Skapata@user/skapata)
[23:09:01] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[23:15:14] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:19:23] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ee25:c4a9:3503:c5f) (Ping timeout: 268 seconds)
[23:19:35] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c2a5:ef0e:5ed1:6178)
[23:28:36] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[23:46:05] *** Joins: mononote (~mononote@user/mononote)
