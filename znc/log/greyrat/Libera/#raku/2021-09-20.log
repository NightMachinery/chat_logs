[00:20:51] <xinming> lizmat: thanks
[00:21:27] <xinming> lizmat: Is there a way to get match result to hash for all  / $<xx> = [...] $<yyy> = [...] /
[00:50:04] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:50:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:51:57] <japhb> "match result to hash"?  Not sure what you're asking, but note that Match is a subclass of Capture, which means that like Capture it has .hash and .list methods to pull out the Associative and Positional parts respectively.
[00:52:43] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[00:54:05] <japhb> Oh, for those following along ... official standardization of the CBOR extension for Capture is delayed by required experts being on vacation at the moment.  It's implemented at HEAD of CBOR::Simple of course (though the tag number may change if the standards folks wish it).  :-)
[00:56:22] *** Quits: nine (~nine@comm.detonation.org) (Ping timeout: 260 seconds)
[00:56:30] *** Joins: nine (~nine@comm.detonation.org)
[00:58:35] <xinming> japhb: I read the docs.raku.org, and I realized that we can have .hash method, but what I mean is, return the hash with Str result, not Match
[01:00:16] <xinming> Another question anyway, When I try to memorize token vs rule, What is the best way to distinguish these two? Something like .hyper vs .race, and someone told me `in a .race, You never know who will be the first`, <-- this answer will keep in my mind for the rest of my life. ;-)
[01:01:19] <xinming> wish some way for token/rule too, as I start to confuse for a while, and have to lookup doc again.
[01:25:42] *** Quits: very (~very@5.177.254.85) (Quit: Connection closed)
[01:25:59] <ugexe> you know what they say... The only difference between the token and rule declarators is that the rule declarator causes :sigspace to go into effect for the Regex
[01:28:50] <ugexe> TODBTTARDITTRDCSTGIEFTR
[01:31:14] <xinming> ugexe: Yea, but sometimes, I get confused again.
[01:31:38] <xinming> So, I wanna find a hint which can easily be memorized.
[01:31:59] <ugexe> yeah just remember TODBTTARDITTRDCSTGIEFTR
[01:33:25] <perryprog> In grade school they always taught us TODBTTARDITTRDC:STGIEFTR or sometimes even TODBTTARDITTRDCCSTGIEFTR
[01:39:19] <Xliff> xinming: Otherwise known as this: rule objects automatically swallows whitespace
[01:40:18] <Xliff> xinming: so for tokens, you have to explicitly account for whitespace
[01:40:39] <Xliff> rule automatically includes <.ws> between space-separated rules
[01:52:47] <xinming> I know the definition, but to me, still confusing after a while I don't code, and I have to lookup doc again, So hope to find something like: `in a .race, you don't know who will be the first`
[01:53:42] <xinming> the .hyper vs .race thing was also a confusing thing to me, until I have that memoric sentence.
[02:04:20] <xinming> well, never mind, I'll try to remember it the hard way.
[02:25:42] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[02:28:46] *** Quits: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 260 seconds)
[03:15:29] *** Joins: vrurg (~vrurg@45.74.95.181)
[03:27:27] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:35:55] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.2.1)
[03:42:01] *** Joins: monkey_ (~user@190.104.116.134)
[03:50:41] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[04:30:34] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 260 seconds)
[04:33:13] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:35:42] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:35:42] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:35:42] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:35:42] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[05:36:17] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[05:36:52] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[05:37:02] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[05:37:15] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[05:37:50] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[05:37:58] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[05:38:22] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[05:38:30] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[05:41:18] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[05:52:04] *** Joins: monkey_ (~user@190.104.116.134)
[06:16:46] *** Joins: keutoi (~keutoi@157.48.94.95)
[06:35:31] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b00a:1416:2baf:d671:cf03:74f7)
[06:37:02] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[06:37:35] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[06:38:04] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[06:38:29] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:38:29] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:38:29] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:38:29] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:38:29] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:38:29] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:38:29] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:38:29] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:38:29] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:38:29] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:38:30] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:38:30] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:38:30] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:38:50] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[07:38:54] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[07:38:57] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:39:32] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[07:39:54] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[07:40:06] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[07:40:07] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:40:36] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:40:42] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:41:12] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:45:09] *** Joins: randomHuman (~randomHum@047-034-211-132.res.spectrum.com)
[07:46:12] *** Quits: randomHuman (~randomHum@047-034-211-132.res.spectrum.com) (Client Quit)
[07:53:51] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[08:36:54] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:37:26] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[08:38:46] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[08:40:01] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:41:30] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:59:58] *** Quits: dg (~dgl@dg.wtf) (*.net *.split)
[08:59:58] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[08:59:58] *** Quits: ptc_ (~cochrane@static.150.233.203.116.clients.your-server.de) (*.net *.split)
[08:59:58] *** Quits: Voldenet (~Voldenet@user/voldenet) (*.net *.split)
[08:59:58] *** Quits: charsbar (~charsbar@153.126.151.115.v6.sakura.ne.jp) (*.net *.split)
[08:59:58] *** Quits: rba (~rba@2a01:4f8:c2c:7a41::1) (*.net *.split)
[09:00:07] *** Joins: ptc (~cochrane@static.150.233.203.116.clients.your-server.de)
[09:00:08] *** Joins: charsbar (~charsbar@ik1-311-15861.vs.sakura.ne.jp)
[09:00:09] *** Joins: dg (~dgl@dg.wtf)
[09:00:45] *** Joins: rba (~rba@2a01:4f8:c2c:7a41::1)
[09:00:47] *** Joins: Voldenet (~Voldenet@user/voldenet)
[09:00:51] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[09:11:38] *** Quits: skaji (sid178483@id-178483.tinside.irccloud.com) (*.net *.split)
[09:11:38] *** Quits: juanfra (~juanfra@user/juanfra) (*.net *.split)
[09:11:39] *** Quits: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f) (*.net *.split)
[09:12:00] *** Joins: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f)
[09:12:15] *** Joins: skaji (sid178483@2a03:5180:f::2:b933)
[09:15:15] *** Joins: juanfra (~juanfra@user/juanfra)
[09:23:49] *** Joins: Sgeo (~Sgeo@user/sgeo)
[09:35:15] *** Quits: Woodi (~Woodi@n8236h162.sprintdatacenter.net) (Quit: Lost terminal)
[09:37:47] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:38:31] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:38:31] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:17:00] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[10:22:53] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 264 seconds)
[10:23:16] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[10:35:37] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:45:48] *** Joins: simcop2387_ (~simcop238@perlbot/patrician/simcop2387)
[10:47:18] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 265 seconds)
[10:48:01] *** simcop2387_ is now known as simcop2387
[10:48:51] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:37:30] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[11:39:16] *** Joins: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net)
[11:52:15] *** Skarsnik_ is now known as Skarsnik
[12:27:48] *** Quits: keutoi (~keutoi@157.48.94.95) (Quit: Lost terminal)
[12:39:04] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Quit: Bye)
[12:41:15] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:41:20] <Geth> ¦ App-Rakubrew: 73055cc269 | (Patrick Böker)++ | 2 files
[12:41:20] <Geth> ¦ App-Rakubrew: Fix version switching which broke in the previous release
[12:41:20] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/73055cc269
[12:41:20] <Geth> ¦ App-Rakubrew: 5db0e5d4a5 | (Patrick Böker)++ | 3 files
[12:41:20] <Geth> ¦ App-Rakubrew: Version 21
[12:41:20] <Geth> ¦ App-Rakubrew: review: https://github.com/Raku/App-Rakubrew/commit/5db0e5d4a5
[12:49:36] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b00a:1416:2baf:d671:cf03:74f7) (Quit: Leaving)
[12:51:47] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[13:06:42] <xinming> For a grammar, How can we get all the match?
[13:24:36] <lizmat> doesn't $/ contain a tree of all matches ?
[13:25:02] *** Joins: user51 (~user51@176.228.90.248)
[13:26:36] <user51> where can i find information about the whys behind raku? i'm specifically interested in the grammars and lazy evaluation
[13:32:03] <Skarsnik> It's probably in the apocalypse (or whatever the name of the draft documents for Perl 6)
[13:32:25] <lizmat> https://design.raku.org
[13:33:27] *** Quits: sena_kun (~koto@188.163.64.68) (Quit: Leaving)
[13:36:26] <SmokeMachine> can anyone reproduce [this](https://github.com/rakudo/rakudo/issues/3959)?
[13:37:01] <Altreus> markdown support in IRC when?
[13:37:04] <Altreus> :D
[13:40:24] <xinming> lizmat: I use my $match = MyGrammar.subparse($str);   <--- It'll return the first matched result.
[13:40:33] <Skarsnik> thanks lizmat :)
[13:42:14] *** Joins: sena_kun (~koto@188.163.64.68)
[13:43:22] <Altreus> SmokeMachine: running your last comment in a fairly large dir and not seeing the issue
[13:43:51] <Altreus> not hitting symlinks are you?
[13:44:01] <Altreus> oh wait
[13:44:15] <Altreus> ... not oh wait, I thought it wasn't running but it is :D
[13:44:39] <Altreus> SmokeMachine: oh! I got one!
[13:44:53] <SmokeMachine> Altreus: It takes som tries...
[13:45:02] <SmokeMachine> *some
[13:45:24] <Altreus> there's nothing special about the file either
[13:46:07] <SmokeMachine> and, at least for me, the file giving the problem keeps changing...
[13:46:24] <Altreus> I can reproduce it but I can't offer any further insights
[13:47:00] <SmokeMachine> Altreus: Thanks, I just wanted to be sure that's not specific to my environment.
[13:49:02] <Altreus> added a comment :)
[13:49:23] <SmokeMachine> xinming: would `my $match = MyGrammar.parse($str);` do what you want?
[13:49:28] <SmokeMachine> Altreus: thanks!
[13:52:54] <xinming> SmokeMachine: Nope, the Grammar.parse will need the whole string to match the grammar, But I want to extract only all interesting parts out of a string.
[14:00:26] <Altreus> looks like I can get at least one file to go wrong each time through
[14:00:32] <Altreus> SmokeMachine: does it only happen async?
[14:01:33] <lizmat> abs2rel depends on $*SPEC, I wonder whether there's a race condition in start on dynamic var lookup somehow
[14:02:18] <SmokeMachine> Altreus: I couldn't get it sync...
[14:03:07] <El_Che> weekly: rakudo-pkgs up
[14:03:07] <notable6> El_Che, Noted! (weekly)
[14:04:34] <SmokeMachine> lizmat: $*SPEC? I was trying to see if $*CWD was different on those errors...
[14:05:03] <lizmat> that could also be the case
[14:05:31] <lizmat> an IO path has both a local copy of $*CWD and $*SPEC on creation by default
[14:06:22] <lizmat> El_Che: liz@DebianMini:~$ raku -v   Welcome to 𝐑𝐚𝐤𝐮𝐝𝐨™ v2021.09.     :-)
[14:10:13] <El_Che> :)
[14:19:11] <raydiak> xinming: grammars aren't really meant to be used like that, a somewhat cleaner solution would be to change your TOP rule to accept strings of .*? between the relevant parts. that said, you could messily kinda force what you want like this:
[14:19:14] <raydiak> m: grammar G { our token TOP { . } }; say "foo" ~~ m:g/<{G::<&TOP>}>/
[14:19:14] <camelia> rakudo-moar b2bfa4dec: OUTPUT: «(｢f｣ ｢o｣ ｢o｣)␤»
[14:22:16] *** Joins: chenyf (~chenyf@39.149.232.74)
[14:24:03] *** Quits: chenyf (~chenyf@39.149.232.74) (Client Quit)
[14:34:17] <raydiak> seriously though, restructuring your TOP rule something like this would be a step up from that nonsense:
[14:34:24] <raydiak> m: grammar G { regex TOP { .*? <relevant>+ %% .*? }; token relevant { \w } }; say G.parse(" f o o ")<relevant>
[14:34:24] <camelia> rakudo-moar b2bfa4dec: OUTPUT: «[｢f｣ ｢o｣ ｢o｣]␤»
[15:24:15] *** Joins: test (~test@223.235.9.103)
[15:27:13] *** Quits: test (~test@223.235.9.103) (Client Quit)
[15:32:04] <xinming> raydiak: thanks for the example. :-)
[15:35:29] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 264 seconds)
[15:38:46] <Altreus> SmokeMachine: I did « my $a = .relative ~ " $*CWD"; » and $*CWD was correct by the time it was evaluated
[15:38:56] <Altreus> but .relative still contained a ..
[15:40:29] <Altreus> I noticed also that you included .relative *again* in the die and it had become correct by then
[16:11:38] *** Joins: keutoi (~keutoi@157.48.224.63)
[16:19:43] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[16:21:56] *** Joins: leah2 (~leah@vuxu.org)
[16:33:26] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:48:07] *** Quits: xinming (~xinming@115.219.33.252) (Ping timeout: 252 seconds)
[16:48:29] *** Joins: xinming (~xinming@115.219.33.252)
[17:06:02] <SmokeMachine> I've been running this with no luck: https://www.irccloud.com/pastebin/4KayT48W/
[17:08:15] <raydiak> xinming: you're welcome, glad I could help. :) someone backlogging in the next several hours might have a cleaner approach, but some approximation of those two are the only I can think of
[17:09:27] <raydiak> sleep &
[17:12:16] <Altreus> SmokeMachine: The implication is that evaluating $*CWD is always correct, and so maybe .relative doesn't use that but something underneath it
[17:12:39] <Altreus> that is, maybe accessing $*CWD forces a sync or something, which .relative doesn't trigger
[17:12:48] <Altreus> but hang on, why would .relative think the file is in ..
[17:13:01] <Altreus> it would have to believe cwd is ./something
[17:17:55] <ugexe> im pretty sure ive seen that .relative bug in bug reports to zef before fwiw, but i never knew it had been golfed and reported to rakudo
[17:20:56] <SmokeMachine> Altreus: yes, that's why I thought $*CWD should be something different on the error cases...
[17:22:22] <Altreus> hmm
[17:23:57] <Altreus> I'm getting it to die if $*CWD is ever not my homedir, hard-coded
[17:24:10] <Altreus> I expect it not to
[17:26:30] <Altreus> yeah no dying
[17:26:47] <Altreus> must be something that's not leaking out to the user level
[17:29:10] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[17:33:40] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 240 seconds)
[17:33:41] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 264 seconds)
[17:46:11] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[17:54:09] *** Joins: MasterDuke (~MasterDuk@94.0.188.131)
[17:58:55] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[18:00:11] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[18:29:05] <[Coke]> can we track github wiki changes with a bot?
[18:35:36] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[18:35:58] <lizmat> I think changes are pushed to a webhook, yes
[18:39:22] <jdv> y u want a firehose?
[18:43:03] <jdv> looks like its called a "GollumEvent"
[18:54:29] <[Coke]> We don't update the rakudo/nqp/moarvm wikis often, actually
[18:55:01] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:06:35] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/09/20/2021-38-questions-ideas-feedback/
[19:12:09] <discord-raku-bot> <Anton Antonov#7232> I am looking for ways to use a Java JAR file (the classes in it) within a Raku program. I did not succeed finding a module are discussion about that. Any pointers? Should I look into Perl5 modules for that?
[19:19:41] <MasterDuke> Anton Antonov: i assume you mean using rakudo running on the jvm backend? i don't think that's possible, but bartolin_ would be a good person to ask
[19:24:34] <MasterDuke> Anton Antonov: i just asked jonathan worthingon your question and he said "I thought something like that was implemented, but it's been years since I looked, so I've really no idea."
[19:25:11] <MasterDuke> the jvm backend hasn't had a whole lot of development recently, you might try searching for older perl 6 blog posts
[19:48:22] <discord-raku-bot> <Anton Antonov#7232> #MasterDuke Thank you for response! I have to say, I am looking for any possible solution, e.g. (1) using JVM backend, (2) connecting to a Java server, or (3) using "native call" or something. From your answers -- at this point -- I will simply not look for using/connecting to Java from Raku.
[19:52:03] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/vm/jvm/runtime/org/raku/rakudo/RakudoJavaInterop.java looks like maybe something is possible?
[19:55:01] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:55:01] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:56:57] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[20:05:05] <discord-raku-bot> <Anton Antonov#7232> @MasterDuke -- yes, very promising! 🙂 This "old" discussion is what I found: https://stackoverflow.com/q/27156329 .
[20:06:21] <MasterDuke> cool
[20:10:39] <user51> skaji: lizmat: thanks!
[20:11:00] <user51> skaji: sorry, i meant skarsnik, seems like they left
[20:15:28] *** Quits: keutoi (~keutoi@157.48.224.63) (Remote host closed the connection)
[20:17:11] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[20:17:28] *** Joins: leah2 (~leah@vuxu.org)
[20:28:39] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Quit: Pipe Terminated)
[20:31:23] *** Quits: sena_kun (~koto@188.163.64.68) (Quit: Leaving)
[20:34:01] *** Quits: user51 (~user51@176.228.90.248) (Ping timeout: 252 seconds)
[20:37:08] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[20:40:48] <xinming> in .grep(...)   Is there shorter way to write something like,  .grep(* !~~ /^ \s+ '#' /);   ??
[20:41:07] <xinming> it's just use negative value of regex
[20:45:07] <Altreus> according to the doc
[20:45:12] <Altreus> say <a b c d e f>.grep(none /<[aeiou]>/);   # OUTPUT: «(b c d f)␤»
[20:45:16] <Altreus> not that one
[20:45:23] <Altreus> say <a b c d e f>.grep({! /<[aeiou]>/})     # OUTPUT: «(b c d f)␤»
[20:45:26] <Altreus> that one
[20:45:32] <Altreus> but also the first one, I suppose!
[20:52:17] *** Joins: Woodi (~Woodi@n8236h162.sprintdatacenter.net)
[21:04:05] *** Joins: lichtkind (~lichtkind@p200300d0a7115d38846ca33d6302fb9a.dip0.t-ipconnect.de)
[21:10:06] *** Quits: [Coke] (~coke@cpe-104-228-9-26.nycap.res.rr.com) (Quit: Lost terminal)
[21:10:08] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 246 seconds)
[21:12:36] <xinming> Got it, thanks.
[22:21:23] *** Quits: rba (~rba@2a01:4f8:c2c:7a41::1) (Quit: ZNC 1.7.4 - https://znc.in)
[22:21:38] *** Joins: rba (~rba@2a01:4f8:c2c:7a41::1)
[22:23:26] *** Quits: nine (~nine@comm.detonation.org) (Ping timeout: 260 seconds)
[22:24:08] *** Joins: nine (~nine@comm.detonation.org)
[22:26:39] *** Joins: immediate (~immediate@31.142.219.27)
[22:32:36] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:33:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:38:19] *** Quits: immediate (~immediate@31.142.219.27) (Quit: Connection closed)
[22:40:13] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[22:41:09] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
