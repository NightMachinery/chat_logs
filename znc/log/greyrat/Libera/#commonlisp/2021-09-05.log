[00:00:09] <pjb> (char-name #\ß)  #| --> "Latin_Small_Letter_Sharp_S" |# (char-name #\ẞ)  #| --> "U+1E9E" |#
[00:01:58] <pjb> Note: clisp does: (list (char-name #\ß)  (char-name #\ẞ)) --> ("LATIN_SMALL_LETTER_SHARP_S" "LATIN_CAPITAL_LETTER_SHARP_S")
[00:02:19] <pjb> this is why clisp is nice even if it has not had new relelase for decades: it does things better than more maintained implementations.
[00:03:37] <pjb> lukego: so the principle stand, you can define a set of characters that will be processed by CL functions, including ß->ẞ
[00:05:07] <lisp123> pjb: is it possible to locally bind *readtable* for reading & printing?
[00:06:48] <lisp123> Seems like it is possible
[00:07:09] <lukego> pjb: yeah, single characters might be an easy way out, but it would be nice to start off general e.g. allowing αᵢ α₀ α′
[00:07:25] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[00:07:55] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:07:59] <lukego> at least in SBCL the reader seems to be hardcoded to apply :upcase and :downcase based on unicode notions
[00:08:21] <pjb> lisp123: of course.
[00:08:33] <lukego> I'm wondering about adding an extension (setf READTABLE-CASE-ISO8559-1-ONLY)
[00:09:10] <pjb> lukego: no, I just explained that if your estrict yourself ot iso-8859-1 you cannot do it because of ß. You need to use unicode!
[00:09:54] * lukego will sleep on it
[00:10:24] *** Quits: Guest82 (~Guest82@72.64.1.179) (Quit: Client closed)
[00:10:46] <pjb> lukego: but nothing prevents you to define your own set of characters. Only you'll want one that allows case round-trips.
[00:11:48] <lisp123> pjb: Does clisp handle lower case greeks and upper case greeks separately? (just confirming from your message)
[00:13:29] *** Joins: karlosz (~karlosz@p509920e0.dip0.t-ipconnect.de)
[00:14:07] <pjb> lisp123: https://termbin.com/evda
[00:15:23] *** Quits: karlosz (~karlosz@p509920e0.dip0.t-ipconnect.de) (Client Quit)
[00:15:41] <pjb> On the other hand, it doesn't know about the decision of the Concil.
[00:16:11] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb)
[00:20:13] <lisp123> lukego: p.s. you may like this https://github.com/ashok-khanna/math-hydras
[00:21:46] <edgar-rft> To make things even more funny, the sorting order of non-english characters is locale-dependent, for example in the german alphabet #\ä appears between #\a and #\b, so this is SBCL example is plain wrong, but only in Germany: (sort "aäb"#'char<) => "abä"
[00:21:47] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 245 seconds)
[00:23:28] <edgar-rft> other languages have different sorting orders, in swedish and turkish for example the #\ä appears at different places than in germany
[00:27:27] <lisp123> edgar-rft: Indeed, unicode opens up a whole can of worms
[00:27:47] <Yehowshua> Is it possible to load an .asd package from a specific location?
[00:28:03] *** Joins: Everything (~Everythin@37.115.210.35)
[00:28:12] <lisp123> Yehowshua: If you want you can add that location to the directories that asdf searches
[00:29:16] <lisp123> If you are okay with it permanently being added. Otherwise there may be another solution, but you could write a macro to write to the asdf file and then also clear the required path when its no longer required
[00:29:28] <lisp123> function* (sorry not sure why I said macro)
[00:30:01] <Yehowshua> well, I've been working with CL now for almost a week and have this really long file I'd like to modularize
[00:30:02] <Yehowshua> https://gitlab.com/BracketMaster/rtlil-compiler/-/blob/master/lexer.lisp
[00:30:09] <Yehowshua> I was thinking a package would be the right approach
[00:30:22] <lisp123> Makes sense
[00:30:31] <lisp123> https://common-lisp.net/project/asdf/asdf.html#Configuring-ASDF
[00:30:33] <lisp123> Here you go
[00:30:45] <edgar-rft> in the log run Unicode will solve more problems than it creates, but we're still not quite there....
[00:31:25] <Yehowshua> It seems kinda silly to not be able to load asd files directly
[00:31:40] <MichaelRaskin> To be fair, the sorting problem is technically there even with Latin-1
[00:32:19] <lisp123> Yehowshua: Depends on what _exactly_ you are after. ASDF is for builds. If you just want to quickly load your files, you can add some (load ...) commands into your main file (usually packages.lisp)
[00:32:22] <lisp123> and just load that
[00:32:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:32:55] <Yehowshua> Well - I'm wondering what is the right way to structure a lisp project
[00:33:53] <Yehowshua> are you supposed to have a bunch of (load)s?
[00:35:15] <MichaelRaskin> For moderate size, I would expect a single .asd, a package or a handful, and some number of source files.
[00:35:15] <lisp123> It's the easier approach, but to be honest if you learn ASDF it is super easy too
[00:36:13] <lisp123> Yehowshua: ASDF searches recursively all of the directories in its search path. So either save your .asd files within one of the default folders (such as ~/common-lisp) or add your default root folders to that list (per the above link)
[00:36:29] <lisp123> Then you just need to do (asdf:load-system "name
[00:38:12] <lisp123> But I'm not sure what stage you are in your lisp programming experience. The error messages via ASDF are a bit more cryptic, so maybe its something for a slightly later stage. Also I wouldn't want to burden the complexity of learning ASDF onto beginners too early. Thus, if you are starting off, don't worry and just use (load)s. Also, learn how the package system works before jumping to ASDF
[00:39:07] <Yehowshua> package system?
[00:39:16] <Yehowshua> Can you use the package system without ASDF?
[00:39:43] <Yehowshua> I had assumed in-package was part of ASDF
[00:39:48] <lisp123> Jump to #clschool and I can explain more in detail, don't want to spam the main channel
[00:40:27] <edgar-rft> the package system is part of the Common Lisp standard, it's not ASDF-only
[00:43:32] <edgar-rft> don't feel insulted by the title, it's the fastest way to learn packages -> https://flownet.com/gat/packages.pdf
[00:45:04] <lotuseater> containers for symbols :)
[00:45:51] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[00:51:08] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[01:00:28] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb) (Quit: Client closed)
[01:01:05] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb)
[01:18:56] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:22:45] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:23:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[01:24:01] *** Lord_of_Life_ is now known as Lord_of_Life
[01:34:41] *** Joins: wheelsucker (~wheelsuck@2607:fb90:66d9:2d3b:3095:1c38:5990:1989)
[01:36:10] *** Quits: wheelsucker (~wheelsuck@2607:fb90:66d9:2d3b:3095:1c38:5990:1989) (Client Quit)
[01:37:55] *** Joins: Oladon (~olad@98.43.81.226)
[01:39:20] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:40:07] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[01:43:18] *** Quits: gaqwas (~john@dynamic-077-009-028-051.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[01:46:25] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[01:46:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:54:51] <aeth> package subset of system subset of project; package is part of CL, system is part of ASDF, project is part of Quicklisp (or your version control in general)
[01:54:57] <aeth> it's a bit confusing that all three concepts exist
[01:56:07] <aeth> A project will have one or more ASDF systems, which contain packages, which are just namespaces for symbols.
[02:05:07] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[02:06:28] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[02:09:56] *** Quits: lisp123 (~lisp123@45.86.202.23) (Ping timeout: 256 seconds)
[02:16:20] *** Joins: khrbt (~znc@user/khrbt)
[02:17:07] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:18:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:20:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[02:21:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:22:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[02:24:26] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[02:24:41] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[02:44:00] *** Quits: pve (~pve@37-136-150-194.rev.dnainternet.fi) (Quit: leaving)
[02:45:05] *** Quits: frgo (~frgo@p200300deef0cee0061aa6d334b907ade.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:45:33] *** Joins: frgo (~frgo@p200300deef0cee0061aa6d334b907ade.dip0.t-ipconnect.de)
[02:51:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:52:25] *** Joins: nckx (~nckx@tobias.gr)
[02:54:44] *** borodust is now known as boro
[02:55:00] *** boro is now known as borodust
[02:57:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:06:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[03:22:02] *** Joins: didi (~user@user/didi)
[03:24:47] <didi> It's interesting how a CLOS object's slot can be used as a place and different classes can define the same symbol as an accessor and SETF still works.  I'm guessing accessor when used as a generalized variable isn't a simple macro and it does some magic dispatching.
[03:26:08] <Bike> it's not magic, just a generic function
[03:26:20] <Bike> it's dispatched the same as any other generic function
[03:26:32] <didi> Bike: (defgeneric (setf accessor))?
[03:27:00] <didi> Hum, sounds about right.
[03:27:00] <Bike> implicitly, yeah
[03:27:15] <didi> Amazing stuff.
[03:32:03] <lotuseater> but indeed SETF on its own is a macro which expands the place you specify to calling the setter function with SETQ
[03:34:13] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[03:34:55] *** Quits: VincentVega (~user@212.241.16.18) (Remote host closed the connection)
[03:40:21] <lotuseater> or no, using it with FUNCALL on the object and the new value you specify
[03:41:19] <didi> Hum, how would I define myself such accessor?
[03:42:05] <didi> I can only think of a macro, which does not dispatch on argument types.
[03:43:48] <didi> (defmacro accessor (obj) `(slot-value ,obj 'same-slot-name-for-every-class))
[03:43:48] <didi>  
[03:45:12] <hayley> (defun (setf blah) (new-value object) (setf (internals-of object) new-value)) loosely speaking.
[03:45:26] <lotuseater> no it's really a generic function
[03:45:42] <lotuseater> as hayley says
[03:46:05] <hayley> Replace DEFUN with DEFMETHOD for that kind of accessor, that's more or less the general pattern though.
[03:46:08] <didi> How would it differentiate classes?
[03:46:38] <hayley> Yes, that is where you want generic dispatch as lotuseater said.
[03:46:44] <didi> Thank you.
[03:46:45] <lotuseater> that's what generic functions are for
[03:47:21] <lotuseater> (defmethod accessor-name ((obj my-class)) ...)
[03:48:33] <lotuseater> and (on SBCL) when just using DEFSTRUCT it defines the setters and getters just as functions
[03:50:18] <lotuseater> so I mean with DEFUN and not DEFMETHOD
[03:53:21] <didi> Ok, I think I got it: (defmethod (setf accessor) (new-value (obj class)) ...)
[03:53:31] <didi> Cool, cool.
[03:53:36] <lotuseater> good :)
[03:53:59] <didi> I can even establish places deep inside the object. Cool indeed.
[03:54:27] <lotuseater> you could even specify/customize it more to certain types for new-value
[03:54:56] <didi> Interesting.
[03:55:14] * didi didn't think of that
[03:55:18] <lotuseater> yes it handles quite complex place specification
[03:55:47] <lotuseater> i just thought of it myself right now ^^ so thx
[03:59:15] <Yehowshua> does anyone have any insight into this error? https://paste.debian.net/1210450/
[03:59:24] <Yehowshua> Here's a link to the actual code: https://gitlab.com/BracketMaster/rtlil-compiler/blob/master/src/frontends/rtlil/lexer/non-linear-state-machines.lisp#L179
[04:00:11] <random-nick> the case keys aren't evaluated
[04:00:11] <lotuseater> yes too many quotes
[04:00:22] <random-nick> so you shouldn't quote them
[04:00:42] <random-nick> (unless you want to also catch the symbol CL:QUOTE in the case)
[04:01:23] <lotuseater> that's also a point where #. can be useful if not the symbols but their before bound values should be matched
[04:02:23] <random-nick> do note that #. can't see locals since it gets evaluated during read-time
[04:02:37] <lotuseater> yes
[04:02:42] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:06:03] <Yehowshua> wdym by too many quotes?
[04:06:30] <lotuseater> just what it means ^^ no hidden meaning
[04:06:49] <Bike> you have (case state ('return-or-newline ...)) but it should be (case state (return-or-newline ...))
[04:07:47] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[04:07:49] <Yehowshua> return-or-newline is a symbol
[04:08:07] <random-nick> yes, but case does not evaluate the keys of case clauses
[04:08:14] <Yehowshua> oh
[04:08:19] <Yehowshua> now you tell me
[04:08:29] <lotuseater> :)
[04:09:00] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[04:09:01] <didi> Shouldn't it be (case state ((return-or-new-line) ...) ...), i.e., `return-or-new-line' inside a list?
[04:09:11] <random-nick> well if case evaluated its keys then it would be just cond but worse
[04:09:47] <lotuseater> '(newline #\newline :newline)
[04:10:09] <random-nick> didi: no
[04:10:14] <didi> random-nick: Thanks.
[04:10:26] <Yehowshua> ok - cool - removing the quotes seemed to make it happy
[04:11:46] <lotuseater> better use CHAR= instead of EQUAL when you're sure comparing chars
[04:11:47] <random-nick> the only symbols which have to be written using that syntax are CL:T and CL:OTHERWISE
[04:12:14] <random-nick> since they have a special meaning when they aren't in a list like that
[04:14:23] <lotuseater> or WHEN / UNLESS for if constructs that just have a then xor else branch
[04:16:52] <lotuseater> and at line 60 there is a (BLOCK statements ...) but for this is PROGN
[04:17:34] <random-nick> yeah there's no reason to use BLOCK if you're not using RETURN-FROM/RETURN
[04:18:39] <random-nick> lotuseater: there's no need for a PROGN either
[04:18:58] <lotuseater> you are right, in this case not ^^
[04:19:58] <random-nick> also, for the WHEN / UNLESS comment, some styles prefer having an if with a nil branch when the return value isn't being thrown away
[04:20:15] <random-nick> personally I don't think that's important
[04:20:37] <lotuseater> Yehowshua: it's very good that you use #\space and not "#\ "
[04:21:25] <lotuseater> yeah often very situation dependent and how to be well specific about things
[04:21:52] <White_Flame> for maximum pain in your source code, try #\ followed by a literal tab or other non-printing character :-P
[04:22:15] <lotuseater> very funny :D
[04:25:41] <lotuseater> tabs kill people
[04:27:44] <lotuseater> and for your lexer if you have often this property list with token lexeme cursor you could think catching that with a struct
[04:27:55] <aeth> White_Flame: nice idea, but everyone uses GNU Emacs and GNU Emacs prints all of those
[04:28:01] <aeth> Especially when you have ^M
[04:31:55] <White_Flame> I have space, tab, and newline unadorned here.  The lisp printer will print the #\ names, but not emacs
[04:32:29] <random-nick> I think aeth meant to say that emacs prints non-printing characters
[04:33:00] <random-nick> well, displays
[04:33:05] <White_Flame> yeah, beyond those 3 more likely
[04:33:29] <White_Flame> also I should have said non-graphical characters, I believe whitespace still counts as printing characters
[04:34:47] <White_Flame> https://plaster.tymoon.eu/view/2614#2614
[04:34:59] <White_Flame> source code displays the same whether in a .lisp file or the repl buffer
[04:36:33] <lotuseater> so using it for ontop security code :D
[04:38:36] *** Quits: random-nick (~random-ni@87.116.180.105) (Ping timeout: 250 seconds)
[05:01:01] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:5def:f6fe:d5ed:dbeb) (Ping timeout: 256 seconds)
[05:01:47] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:757a:f3ab:da91:1d75)
[05:03:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:08:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[05:10:08] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:21:02] *** sm2n_ is now known as sm2n
[05:21:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:27:15] *** Joins: Josh_2 (~user@37.25.47.130)
[05:35:45] *** Joins: Bike (~Bike@71.69.170.70)
[05:35:45] *** ChanServ sets mode: +o Bike
[05:38:36] <Yehowshua> Can someone critique this file structure? https://gitlab.com/BracketMaster/rtlil-compiler/-/tree/master
[05:38:38] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[05:38:44] <Yehowshua> I'm hoping I'm doing it right
[05:41:48] <Josh_2> I dont see a problem but why aren't you using asdf to build?
[05:42:25] <Yehowshua> well, I have not yet tried asdf, only packages
[05:43:12] <Josh_2> Well you should look into asdf
[05:43:37] <Yehowshua> noted
[05:44:00] <Josh_2> After the first time asdf is pretty easy
[05:48:05] <Josh_2> Basically any CL project you can find on github will have a .asd, you can just copy that and replace what you want, ezpz problem solved :P
[05:55:40] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[06:02:02] <Yehowshua> will look into then
[06:02:19] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:757a:f3ab:da91:1d75) (Quit: Client closed)
[06:10:22] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Read error: Connection reset by peer)
[06:21:21] *** Quits: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887) (Quit: Client closed)
[06:24:03] <jcowan> lukego: There are a few other alphabets with case:  Cyrillic, Coptic, Armenian, Adlam, Warang Citi, Cherokee, Garay, and Osage.  Cyrillic is the most important after Latin because it's used by about 50 languages today.
[06:35:38] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[06:42:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:04:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:09:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[07:20:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[07:29:13] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[07:29:27] *** Joins: montxero (~user@149.167.149.74)
[07:32:41] <beach> Good morning everyone!
[07:51:38] *** Quits: semz (~none@user/semz) (Ping timeout: 256 seconds)
[07:58:06] *** Joins: igemnace (~ian@user/igemnace)
[08:00:25] *** Joins: Lycurgus (~juan@98.4.112.204)
[08:04:18] *** Joins: semz (~none@user/semz)
[08:10:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[08:31:38] <lukego> jcowan: Tricky business. I would like a convenient way to use Greek letters in symbol names without case conversion. How should that affect other alphabets though? Options range from making all non-latin alphabets case-sensitive to leaving alphabets alone and defining new private unicode symbolic/non-alphabetic counterparts to the Greek alphabet to use in symbols.
[08:36:43] *** Quits: lad (~lad@user/lad) (Ping timeout: 252 seconds)
[08:39:40] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[08:40:01] <lukego> I sense that I need to find a comp.lang.lisp post by Kent Pitman establishing the context of the whole READTABLE-CASE business.
[08:40:40] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:41:43] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[08:44:36] *** Joins: akoana (~ah@user/akoana)
[09:20:56] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:21:35] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[09:29:20] <lukego> SBCL seems to compile really, really quickly even on my crappy laptop cpu. I wonder if it has improved a lot over the years or if I've just started mentally comparing it with LLVM?
[09:47:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:53:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[10:02:35] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:17:28] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:17:47] *** Joins: Oladon (~olad@98.43.81.226)
[10:35:20] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[11:04:34] *** Joins: asarch (~asarch@2806:10ae:7:adab:3a73:8e7d:e62:2ef4)
[11:05:02] <asarch> One stupid question: an empty block closure is just nil, right?
[11:05:44] <beach> asarch: What is a "block closure", and what do you mean by "is"?
[11:10:46] <kakuhen> beach: I would guess (lambda () )
[11:10:54] <kakuhen> but i could be wrong, so i guess we should wait
[11:11:03] <beach> I prefer to see the answer.
[11:11:23] <hayley> The term "block closure" isn't defined anywhere, and a function is definitely not NIL.
[11:11:24] <pjb> ((lambda())) #| --> nil |#
[11:12:19] <beach> pjb: So assume that "is" means "evaluates to"?  I don't.
[11:14:38] <hayley> Oh, the last time someone said evaluates-to was an equivalence relation was fun.
[11:15:23] <beach> Heh!
[11:15:43] <kakuhen> i wonder what relation they were using and how they arrived to that w
[11:25:07] *** Joins: shka (~herr@109.231.62.239)
[11:27:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:30:10] *** Joins: gaqwas (~john@dynamic-095-115-101-038.95.115.pool.telefonica.de)
[11:38:56] <asarch> Well, in Smalltalk there is a piece of code: html callback: [].
[11:39:21] <asarch> In this case, the callback handler is assigned an empty block closure
[11:39:58] <asarch> If that was a CLOS object, it would be like: (make-instance 'html :callback nil), right?
[11:41:00] <akoana> maybe a stupid question: if *ht* is a hash-table with integer values, and i want to increment (or initialize) each value, is this safe:  (maphash #'(lambda (k v) (incf (gethash k *ht* 0))) *ht*) ?
[11:44:26] <beach> asarch: So a "block closure" is a Smalltalk term?
[11:45:10] <pjb> asarch: the equivalent of [] in lisp is (lambda ())
[11:45:26] *** Joins: pve (~pve@178-55-146-184.bb.dnainternet.fi)
[11:46:02] <pjb> asarch: but indeed, in lisp we would more often use nil as a designator for (lambda ()); the function receiving the parameter would do something like (when callback (funcall callback))  instead of just (funcall callback).
[11:46:19] <asarch> I see
[11:46:31] <White_Flame> akoana: yep, though you don't need the #', that's pretty legacy
[11:46:37] <asarch> Thank you! Thank you very much :-)
[11:46:41] *** Joins: jans (~Thunderbi@193.138.218.254)
[11:46:42] <pjb> asarch: other do-nothing functions are: (function identity)  and (constantly nil)
[11:46:58] <akoana> White_Flame: thank you!
[11:47:37] <pjb> (mapcar  (function identity) '(1 2 3)) #| --> (1 2 3) |#   (mapcar (constantly nil) '(1 2 3) '(a b c)) #| --> (nil nil nil) |#
[11:48:16] <White_Flame> and changing the value of an existing hashtable entry within maphash is explicitly safe
[11:48:25] <White_Flame> (not the key, nor adding/removing a key during traversal)
[11:48:54] <White_Flame> (and by "the value", meaning the current iteration's value)
[11:49:42] <akoana> White_Flame: ok, I see (failed to find something about this in CLHS), thanks.
[11:50:01] <White_Flame> hmm, since maphash only accesses existing keys, and each key holds an integer, then the default 0 is likely superfluous, too
[11:50:04] <asarch> Beach, take a look: http://wiki.squeak.org/squeak/5699
[11:50:23] <White_Flame> akoana: it's in the entry for maphash
[11:50:29] <asarch> Look for the blocks section
[11:50:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:50:31] <White_Flame> http://www.lispworks.com/documentation/HyperSpec/Body/f_maphas.htm
[11:50:44] <White_Flame> 2nd paragraph of the description
[11:50:59] <hayley> I thought [ ... ] were called blocks and not closures.
[11:51:33] <pjb> yes, but they're really closures.
[11:51:38] <White_Flame> would the lisp equivalent be an empty (progn)?
[11:51:43] <White_Flame> instead of a lambda?
[11:52:01] <hayley> [ ] = (lambda ())
[11:52:06] <akoana> White_Flame: ah there, currently reading that... missed it (what a shame)
[11:52:08] <White_Flame> ok
[11:53:58] <akoana> White_Flame: thanks again
[11:54:10] *** Joins: VincentVega (~user@212.241.16.210)
[11:54:13] <White_Flame> akoana: np
[11:55:05] <beach> asarch: Thanks, but I am not that interested.  I have a lot of other stuff to do more urgently.
[11:55:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[11:55:48] <asarch> Ok. Maybe later then
[11:56:37] <beach> Yes, after I finish SICL.
[11:57:04] <hayley> SIS (SIS Implements Smalltalk)
[12:00:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:03:40] <mfiano> Does anyone know of a min heap based queue implementation that allows accessing the priority?
[12:04:25] <beach> lisp123: I think it is great that you are helping out in #clschool, but you need to be careful about getting your facts straight.  There is nothing in the Common Lisp standard that says that functions are stored in symbol objects.  And there is nothing that says that LOAD results in interpreted code.
[12:05:04] <mfiano> Currently using damn-fast-priority-queue, but doesn't seem to allow that. I need to keep dequeueing items until the priority is > some value (priorities are timestamps for deferred thunks to be executed some time later)
[12:17:03] <pjb> macport releases a new version of clisp: https://termbin.com/fmf0
[12:31:10] <beach> pjb: I don't really understand what I am looking at, but that sounds like good news.
[12:36:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:59:57] <moon-child> [evaluates to as an equivalence relation] in fairness, the way 'is' is used, it's not generally an equivalence relation either
[13:01:01] <moon-child> it's generally not commutative, or transitive.  'life is fun' does not imply that 'fun is life'.  (Except insofar as english _grammar_ is ambiguous--but the semantics are not)
[13:01:58] <kakuhen> except for transitivity, statements of the form "All X are Y" are an example of what you're saying I guess
[13:02:01] <kakuhen> but this is getting p off-topic now heh
[13:03:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[13:04:44] <moon-child> kakuhen: that is begging the question; 'are' is just another conjugation of 'is'.  Translating my statement accordingly, we get 'all lives are fun', which is not illuminating.  'Is' in that case means 'has the attribute'
[13:04:57] <moon-child> but it surely can mean any number of other things
[13:05:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:07:36] *** Quits: asarch (~asarch@2806:10ae:7:adab:3a73:8e7d:e62:2ef4) (Quit: Leaving)
[13:11:37] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:16:31] <hayley> I think the matters are different when we discuss objects and not properties. "1 + 1 is 2" would be another example where "is" probably is an equivalence relation.
[13:17:03] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[13:19:23] <hayley> Also, SIS Implements Smalltalk implies the existence of SIS 2 (SIS Implements Self), SIC (SIC Implements C), SIR (SIR Implements Racket), and SIS the prequel (SIS Implements SNOBOL)
[13:20:22] <lotuseater> or SIGH (SIGH implements Glasgow Haskell)
[13:20:39] <moon-child> hayley: well, sure, you can construct specific situations in which it (arguably?) denotes an equivalence relation.  But english is not formally specified, so it is difficult to make such exclusive statements
[13:22:20] <hayley> moon-child: Sure. But "is" in a sentence "'X is X" compares two objects, and so to me we are considering if the objects are equal.
[13:22:52] <hayley> Actually, I think the situation I was referring to had someone say "'X is equivalent to X".
[13:23:55] <moon-child> 'asarch | One stupid question: an empty block closure is just nil, right?'
[13:24:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[13:25:51] <moon-child> you also have to qualify 'object'--though I guess that only matters if talking about the real world; in a programming language, it is easy
[13:29:40] <lukego> regarding greek letter capitalization, my current kludge is to hack the SBCL reader/printer to only do case conversion on STANDARD-CHAR. That'll hopefully be good enough to get enough experience to decide that the whole idea is misguided anyway.
[13:31:42] <beach> lukego: But when I suggested the use of Eclector (which allows stuff like that to be configured) you told me that this was not enough.
[13:32:21] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 276 seconds)
[13:33:50] <pve> lukego: How do you detect when case conversion is needed? Did you make every relevant character a macro character?
[13:43:50] *** Joins: Lycurgus (~juan@98.4.112.204)
[13:46:30] <pjb> beach: it means that one may install clisp 2.49.92 easily on macOS using MacPort (sudo port install clisp).
[13:46:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[13:47:23] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:47:23] <beach> pjb: What is MacPort?
[13:50:02] * Lycurgus assumes it's one of the two things you use to get unix pkgs on mac
[13:50:09] <beach> pjb: Never mind.  I'll look it up
[13:50:12] <Lycurgus> brew being the other
[13:50:19] <Lycurgus> i use ports
[13:50:24] <hayley> Yes, a package manager for macOS.
[13:51:20] <Lycurgus> it's actually called MacPorts but tends to get called port because that's the command line name
[13:51:42] <Lycurgus> MacPorts would have been semantically suggestive in a way the singular isn't
[13:52:43] <lukego> beach: I'm totally figuring this out as I go along here and changing my mind on every step. no good solution found. but certainly from my perspective replacing the whole reader seems like a much bigger change than a ~ five line hack to sbcl
[13:54:14] <lukego> pve: I hacked directly in the symbol reading and printing functions. diff @ https://gist.github.com/lukego/892001926a34f6a08a9bba127430aa3c
[13:55:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[13:55:07] <lukego> beach: also it's a meta-goal of mine to get into the habit of treating SBCL source code as read/write and getting to know it better, so it's a useful exercise to see how its printing/reading/unicode support works
[13:55:26] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 256 seconds)
[13:57:57] <pve> lukego: Oh! I see. My (only) idea would have been to make every standard-char a macro character, and then read characters until a terminating macro character, and then intern with case conversion.
[13:58:25] <pve> (haven't tried it, so it may not work)
[13:58:49] <lukego> noted in case the feature is useful and I need to find a better formulation
[14:04:49] <pjb> lukego: IMO, it'd be better to keep CL function working as specified on the standard-character, and define a new API (eg. unicode:localised-string-upcase  unicode:localised-sort etc) to work on extended-characters.
[14:05:25] <pve> lukego: I believee the "intern with case conversion" part would have to deal with escape characters though ("|...|", "\")
[14:06:39] <lukego> I'll be back for more ideas if the syntax turns out to be helpful in practice. Could also be that it just "causes cancer of the semicolon."
[14:06:53] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:07:12] <lukego> but it seems like when you start having code with variable names like MU, RHO, SIGMA, etc, then it's a plausible idea
[14:07:38] <pjb> lukego: have you tried pretty-greek?
[14:07:58] <lukego> pjb: no, decided to take this route instead
[14:08:15] <pjb> the landscape is nice.
[14:11:29] <lukego> Julia has nice support for this. They don't have the issue with case and in the editor/repl you can always tab-complete to turn TeX syntax like \lambda into a unicode character (and easily paste a unicode character to see which escape generates it when in doubt.)
[14:11:32] *** Joins: molson_ (~michael@2001-48F8-704A-CA1-0-0-75F-1007-static.midco.net)
[14:12:33] <lukego> relatedly, I'm wondering about a Lisp syntax for vectoriz/matrix/array arithmetic in the style of R/Julia/etc. anyone know one?
[14:13:31] <lukego> I used GENERIC-CL to add methods so that e.g. (+ #(0 1 2) #(1 1 1)) => #(1 2 3) but there are various downsides and I wonder if separate operators make better sense.
[14:14:15] <lukego> GENERIC-CL is pretty heavyweight though, basically an opinionated new interface to COMMON-LISP.
[14:14:39] *** Joins: attila_lendvai (~alendvai@217.65.127.197)
[14:14:42] *** Quits: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100B-static.midco.net) (Ping timeout: 256 seconds)
[14:14:52] <pve> I wonder if there's a way to "switch" readers to eclector while loading/compiling a file? A bit like (eval-when (:compile-toplevel :load-toplevel :execute) (setf *read-table* *my-readtable*)).
[14:20:25] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[14:24:51] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[14:43:09] *** Joins: markasoftware_ (~quassel@107.161.26.124)
[14:44:05] *** Quits: frgo (~frgo@p200300deef0cee0061aa6d334b907ade.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:44:32] *** Joins: frgo (~frgo@p200300deef0cee00e1934af888849c62.dip0.t-ipconnect.de)
[14:48:26] *** Quits: markasoftware (~quassel@107.161.26.124) (Ping timeout: 276 seconds)
[14:49:22] <pjb> lukego: it can be made more lightweight with the help of compiler-macros, but it would be nice if the compiler would give the compiler macro its type inference or declarations results.
[14:50:48] <pjb> (define-compiler-macro my:+ (&whole form &rest args) (&rest types) (if (every (lambda (type) (subtypep type 'number)) types) `(cl:+ ,@args) form))
[14:51:13] *** Joins: makomo (~makomo@user/makomo)
[14:51:52] <pjb> So that in (lambda (x) (let ((y 42)) (and (integerp x) (my:+ x y))))  it would expand to (cl:+ x y).
[14:52:25] <pjb> or in (lambda (x) (declare (real x)) (let ((y 42))  (my:+ x y)))
[14:53:00] <pjb> currently, compiler macros would only know that the arguments are x and y, and wouldn't know anything about them.
[14:53:28] <pjb> Well, it could be realized by giving an implementation dependent API on the &environment parameter to query the type of the parameters.
[14:53:30] <lukego> Nifty. Maybe tricky to predict behavior as a user though? I'm wondering if e.g. (v+ x y) for vector addition makes sense. have to write code and see. Certainly as an occasional R/Julia hacker I often get confused about what is vector, what is scalar, what can be either
[14:53:37] <pjb> That would be more compatible.
[14:54:11] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[14:54:12] <lukego> Julia seems to have quite a lot of DWIM in their "broadcasting" feature where you make editorial decisions about dispatch when extending + etc with methods for new types.
[14:54:18] <pjb> it depends if you think like a programmer or like a mathematician.
[14:54:29] <pjb> Mathematicians like overloading of operators…
[14:54:40] *** Joins: montxero (~user@149.167.149.74)
[14:55:19] <lukego> I liked the Connection Machine Lisp syntax for parallelizing and reducing subexpressions, fwiw.
[14:58:53] <pve> Here's what I got so far regarding "enabling" eclector. Am I on the right track? :)
[14:58:56] <pve> https://plaster.tymoon.eu/view/2615
[15:02:17] <hayley> lukego: Petalisp used to use α and β for maps and reduces, if that's what you mean.
[15:02:32] <pve> it's still missing the client stuff
[15:05:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:06:18] <Lycurgus> apparently it did use alpha; lukego did you have hands on a Connection Machine?
[15:06:54] <lukego> Lycurgus: no, and apparently CMLisp never got productionized anyway, but it was my favourite CS paper for many years anyway, worked hard to grokking the examples.
[15:07:25] <lukego> They had a syntax over a Lisp expression that would map-reduce parallelize it, it was really neat.
[15:08:20] <Lycurgus> https://www.semanticscholar.org/paper/Connection-Machine-Lisp%3A-fine-grained-parallel-Steele-Hillis/0a86be8e1f4dc7942d4c6b113eea8a9434a45702/figure/0
[15:09:04] <Lycurgus> table 1 shows the alpha
[15:09:58] <lukego> yeah. as they say in the paper, like backquote but not for saying what is quoted but rather what is "vectorized"
[15:13:30] <lukego> So if A is an array an N is a number then in R you might simply say "R * N" but maybe in CMLisp style one would write α(+ ̇·A N) to parallelize the expression (α) and splice (·) individual elements in places. (Or maybe I have it backwards.)
[15:15:01] <lukego> I think they also had β to reduce a vector into a scalar, but I need to reread the paper.
[15:29:22] *** Joins: random-nick (~random-ni@87.116.179.72)
[15:33:29] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:39:18] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[15:46:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[16:28:45] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[16:31:35] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:31:55] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[16:32:19] *** Joins: Mandus (~aasmundo@85.112.154.250)
[16:47:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:51:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[16:53:55] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[16:55:12] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[16:55:38] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[16:56:12] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:12:46] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:14:49] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[17:17:51] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:21:49] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[17:21:50] *** Joins: Guest12 (~Guest12@72.64.1.179)
[17:22:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:24:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[17:24:51] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:25:01] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:26:58] *** Quits: utis (~utis@84.208.165.160) (Quit: leaving)
[17:27:31] *** Joins: Oladon (~olad@98.43.81.226)
[17:27:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:28:18] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:28:36] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[17:28:46] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:31:28] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:32:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:34:09] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:55:13] *** Joins: dra (~dra@2a04:4540:6405:600:149e:23ae:c2d3:52a7)
[18:05:07] *** Joins: brettgilio (~brettgili@137.184.3.255)
[18:06:31] <lukego> okay, pushing my luck, now compiling αα(+ ••a •b c)) as the "array comprehension" Vᵢⱼ = Aᵢⱼ + Bᵢ + C. I wonder if this is a reasonable basis for an alternative to R/Julia style vectorized operators? https://imgur.com/a/hdjEK7w
[18:09:50] <hayley> I'd just write (petalisp:α #'+ a b c) which is more APL-esque.
[18:10:20] <lukego> okay, I need to have a look at petalisp...
[18:10:32] <hayley> Though the name is now petalisp:lazy-map, but the point is that the mapping function happily implicily broadcasts.
[18:11:00] <lukego> AGPL. Oops.
[18:11:30] <hayley> I think my operational description would suffice then.
[18:12:46] <hayley> But the nice thing about implicit broadcasting is that you can write code which works on a vector, and then it will still work in parallel on a 2-dimensional array just fine (as well as more dimensions).
[18:13:57] <lukego> Yeah, my idea here was to explicitly avoid that, because I find it confusing in R. but maybe I'm being a wimp.
[18:14:51] <lukego> Julia code at least, at my current level of sophistication, is hard to read when I'm not sure what the actual and intended behavior of passing broadcastable parameters is (and not confident that those are the same thing)
[18:15:02] <hayley> To each their own, there's nothing wimpish about it.
[18:15:47] <lukego> but Julia supports automatic broadcasting on a whole range of types, via adding methods to the broadcasting machinery, and it has a DWIM flavor where there are multiple possible interpretations and the library author picks the one that makes sense to them
[18:16:57] <beach> What should happen when the following form is evaluated: (coerce 1d3 '(complex single-float)) provided single-float and double-float are distinct types?
[18:19:51] *** Quits: random-nick (~random-ni@87.116.179.72) (Quit: quit)
[18:24:50] <hayley> I would intuitively expect it to evaluate to #c(1.0s0 0.0s0), but the HyperSpec description of COERCE seems to leave the element type "unused", and keeps the type of the object being coerced.
[18:25:46] <beach> So then I think the first exceptional situation applies.
[18:26:23] <beach> The coercion is not possible because the definition of "coercion" is that the resulting object is of the type requested.
[18:26:50] <hayley> But the "Arguments and Values" section specifies that the return value is of the provided type specifier (unless a rational is to be coerced to a complex number) - right.
[18:27:04] <beach> Exactly.
[18:27:28] <beach> So it would not be conforming behavior to return an object that is not of the type givcen.
[18:27:32] <beach> given.
[18:27:57] <hayley> Right.
[18:28:17] <beach> Thanks for confirming.
[18:29:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[18:30:06] *** Joins: random-nick (~random-ni@87.116.179.72)
[18:31:47] *** Joins: srhm (~srhm@user/srhm)
[18:31:53] <hayley> In my worthless opinion, if a complex element type was provided, the object provided should be coerced to that type first. But I guess you are asking because you are implementing COERCE, and such a change would be out of scope for WSCL.
[18:33:23] <beach> I think your opinion is contrary to my reading of the standard, and I agree that such a change is out of scope for WSCL.
[18:33:39] <beach> However, WSCL could make this situation more explicit.
[18:33:48] <hayley> ...so notions of "intuitive behaviour" aren't relevant now, and we're just reading the specification. Which is fine.
[18:35:57] <lukego> Petalisp looks pretty awesome, thanks for bringing it to my attention. I think that my hack is meant a bit more as a convenience for day-to-day programming in comparison
[18:36:04] <hayley> Right, yes, it is just what I would expect COERCE to do prior to reading the specification, and I think we have come to the same reading of the standard.
[18:37:39] <beach> Great!
[18:45:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:50:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[19:01:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:04:55] <lisp123> beach: Got it, thanks.
[19:05:31] <beach> Good!  In fact, in SICL, the only slots of a symbol are the name and the package.
[19:07:24] <lisp123> In that case, where does the value attribute, function attribute and property list go?
[19:07:42] <lukego> Hey, I went to all that trouble using a unicode bracket as my LET sugar, and now the thought occurs that [ and ] are actually avaliable for reader macros? :)
[19:07:59] <hayley> Those associations are stored in an environment object.
[19:08:04] <beach> lisp123: In the environment.
[19:08:23] <lisp123> I see, thanks.
[19:08:39] <hayley> lukego: Yes. Oh, so are #t and #f, so you can use your favourite representation of Scheme booleans :)
[19:08:56] <beach> lisp123: The value isn't practical to store there anyway, if the system has threads.
[19:09:24] <beach> lisp123: And by storing things in the environment, a symbol can have different functions and values bound to it in different environments.
[19:10:13] <lukego> anyway it's been a nice exercise in mutating my lisp environment. if I stick at it then maybe my 100th idea will end up being a good one :)
[19:11:26] <lisp123> beach & hayley: On an unrelated but perhaps related note, have you read 'Macroexpand-All - Code Walker' by Richard Waters?
[19:11:57] <beach> Not me, but I know how to write such a thing.
[19:12:13] <lisp123> One of the issues there is extracting information and adding information to Environments in a portable way, is this something SICL will help with?
[19:13:01] <hayley> Nor me, but if I can find the right part of CST-to-AST quickly enough, I can pretend I know how to write such a thing.
[19:13:02] <beach> Yes, Trucler was written for that purpose.
[19:13:34] <lisp123> Great, hopefully that gets adopted across the board.
[19:13:35] <beach> lisp123: Trucler is like a modern CLOS-based version of the environment protocol from CLtL2.
[19:13:46] <beach> lisp123: Don't count on it.
[19:14:11] <lisp123> I see all these code walkers online, but none seem to be perfect
[19:14:22] <lisp123> As in 100% error free
[19:14:47] <beach> A code walker is highly dependent on the host Common Lisp system.
[19:14:55] <hayley> It is tricky to write a code walker when implementations introduce their own special forms, yes.
[19:15:29] <beach> Trucler just proposes a bunch of classes and generic functions that the client Common Lisp system must then configure.
[19:15:58] <beach> Well, "just" is not fair.  It does a good job of maintaining the lexical environment of course.
[19:16:13] <lisp123> Nice
[19:16:21] <beach> In fact, I think Trucler comes with configurations for SBCL.
[19:16:35] <beach> And also for a "reference implementation" which is what SICL uses (of course).
[19:16:57] <lisp123> Can an end user plug and play these modules if the maintainer of the implementation hasn't yet?
[19:18:02] <beach> Sure, nothing special is required, but the end user may need to know how the system represents its environments, and in particular the global environment.
[19:18:46] <lisp123> That sounds good, I look forward to doing so in the future
[19:19:05] <beach> Like, in most Common Lisp systems there is not one object representing the global environment.  It is "spread out", as in functions are often in symbol slots, and method combinations may be in a hash table referenced from a special variable.
[19:19:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:20:06] <lisp123> That makes sense
[19:20:40] <beach> Oh?  Not to me.  I think it makes a lot more sense to collect everything that has to do with the global environment in a first-class object.
[19:21:19] <lisp123> As in it makes sense that one needs to understand how the system represents its environment, if its spread across multiple facets of the implementation
[19:21:39] <lisp123> (i.e. more complex than a simple substitution)
[19:21:42] <beach> Ah, OK.
[19:22:08] <random-nick> there are compatibility libraries for code walking, like http://clast.sourceforge.net/
[19:23:59] <lisp123> random-nick: Thanks for the link. I plan to write my own so that I also learn more about how Lisp works, and since there is always some edge case that isn't covered, I prefer to have a full understanding, if I am going to use it
[19:24:32] <lisp123> But it seems pretty good from a quick read - if I ever had to something serious, I would look to using it
[19:28:09] *** Joins: cosimone (~user@93-44-185-14.ip98.fastwebnet.it)
[19:35:38] <jcowan> beach, hayley: I agree with your interpretation of the COERCE spec.  I think the reason we didn't get an intuitive result is that nobody thought about changing COERCE when the idea of upgraded complex types was introduced into the standard.
[19:37:38] <jcowan> Notice the mention of upgrading under the "SEQUENCE" section of COERCE.
[20:04:00] <borodust> etimmons: are there any recommended github actions to use clpm from?
[20:06:42] <beach> jcowan: That's a very plausible explanation.
[20:07:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:08:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:13:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:17:31] <borodust> yitzi: thanks for adding clpm to aur!
[20:18:27] <yitzi> You are welcome!
[20:18:36] *** Joins: Oladon (~olad@98.43.81.226)
[20:22:44] <etimmons> borodust: Not yet. The vast majority of my time is spent in one Gitlab install or another, so I haven't invested in github actions yet.
[20:23:12] <etimmons> yitzi: Thank you from me as well!
[20:23:51] <yitzi> etimmons: my pleasure. Let me know if you need comaintainer access at any point to the AUR repo.
[20:24:45] <borodust> hmm, sbcl complains the core clpm uses is incompatible, dayum
[20:25:03] <etimmons> yitzi: Ha. I'd have to learn AUR first, otherwise I'd be more dangerous than helpful.
[20:25:33] <etimmons> Ahh, I know that one! https://gitlab.common-lisp.net/clpm/clpm/-/issues/10
[20:26:06] <yitzi> etimmons: Understand...its super simple if you are ever curious. I am also using it generate ubuntu/debian versions of clasp, ccl, etc.
[20:26:09] <etimmons> Something is stripping the executable, which removes the core image.
[20:26:39] <yitzi> There is a strip option on the PKGBUILD. that could be it.
[20:27:06] <borodust> ohhh, yeh, stripping really messes image-based things badly
[20:27:17] <etimmons> Oh interesting. I didn't know it could make debs as well
[20:27:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:27:58] <yitzi> etimmons: https://mpr.hunterwittenborn.com/
[20:28:27] <etimmons> Also, I finally got M1 support (largely thanks to Stas for quickly fixing the SBCL bug I found). So I'm literally in the process of cutting 0.4.0-rc.1.
[20:28:38] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[20:29:21] <etimmons> (and for fixing the bug during a freeze, no less!)
[20:30:42] <yitzi> borodust: Updated the AUR pkg to remove symbol strip
[20:31:42] <borodust> yitzi: that was really fast xD i just downloaded PKBUILD and !strip is already there
[20:31:44] <borodust> thanks
[20:34:19] <borodust> yitzi: yup, it works now
[20:34:55] <borodust> it's better to bump pkbuild version though in such cases cuz some aur manager (such as yay) keep build files for some time
[20:35:16] <borodust> and they won't refresh them if version is the same
[20:36:00] <borodust> meaning they would use outdated package sources
[20:36:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[20:37:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:39:37] <yitzi> borodust: great! I'll bump the pkg version in just a bit.
[20:45:32] *** Quits: attila_lendvai (~alendvai@217.65.127.197) (Ping timeout: 245 seconds)
[20:48:26] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:48:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:52:07] *** charles_ is now known as char
[21:00:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:02:30] <borodust> etimmons: clpm does not search recursively for systems in git/github/gitlab, does it?
[21:02:53] <borodust> like i have a collection of systems as submodules in a single mother repo
[21:03:24] <borodust> like this: https://github.com/borodust/aw-projects
[21:05:28] <borodust> what i wanted to try is to add clpmfile that looks for systems in the repo above and quicklisp, then init that bundle on CI machine, then build a CL application out of that
[21:05:29] <etimmons> It does, but it doesn't clone submodules.
[21:05:35] <borodust> i see
[21:08:14] <etimmons> That could probably be added as an option, but I need to do some experimentation to figure out how to deal with submodules in bare repos (if that's even possible) and if `git archive` also dumps the contents of the submodules
[21:09:35] <etimmons> side note: my work on libgit2 bindings (which I just realized I still need to share) is so that I can bundle libgit2 with CLPM and not worry about having a git executable handy
[21:10:04] <yitzi> etimmons: https://files.clpm.dev/clpm/clpm-0.4.0-rc.1.tar.gz appears broken
[21:10:33] <etimmons> Not published yet. Still building
[21:10:56] <yitzi> Got it. Thx
[21:11:05] <etimmons> I'll ping you when it's up
[21:11:13] <yitzi> Much appreciated
[21:11:50] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Remote host closed the connection)
[21:13:46] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:14:28] <borodust> etimmons: thanks! that would be much helpful
[21:14:51] <borodust> etimmons: also, git lfs is a fairly popular thing too
[21:16:26] <borodust> for now i'll go with more classic approach: quicklisp dist ;p
[21:17:59] <etimmons> Oh, good point about LFS.
[21:27:25] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[21:33:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:37:36] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:50:52] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 256 seconds)
[21:53:49] *** Joins: khrbt (~znc@user/khrbt)
[21:55:10] *** Joins: Josh_2 (~user@37.25.47.130)
[21:56:02] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:57:16] <Josh_2> sbcl comes with asdf doesn't it?
[21:57:45] <Josh_2> Just installed 2.1.8 from the site on a fresh vps and I'm getting an error saying that asdf doesn't exist
[21:59:02] <borodust> Josh_2: try (require 'asdf)
[21:59:35] <Josh_2> Well that worked
[22:00:19] <Josh_2> Guess its because I'm trying to execute a binary I built on a different machine
[22:05:06] <borodust> Josh_2: more likely that your other machine has .sbclrc that setups initial environment
[22:05:24] <borodust> and this clean one doesn't, meaning sbcl starts w/o any initialization
[22:05:42] <Guest12> So I have this quicklisp project in my local-projects directory, having made some significant changes to existing lisp files, I notice that a ql:quickload of the project from fresh lisps is (sbcl or clisp) is loading old cached out of date fasls.  Is there some asdf or quicklisp incantation I'm supposed to use?  I expected the more recent lisp
[22:05:43] <Guest12> source files woule automatically cause the fasls to be regenerated.
[22:06:31] <Josh_2> borodust: the only thing in my .sbclrc is what is added by quicklisp, this is true on both machines
[22:06:48] <borodust> Josh_2: quicklisp most likely initializes asdf via require
[22:06:57] <borodust> cuz it needs it to properly function
[22:07:36] <borodust> #'ensure-asdf-loaded in ~/quicklisp/setup.lisp
[22:08:04] <lukego> oh shoot now I found APRIL, an APL embedded in Common Lisp, and remembered I have a copy of the APL book somewhere...
[22:10:08] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[22:10:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:15:23] <Josh_2> both my user and root have the quicklisp load functionality in .sbclrc
[22:15:46] <Josh_2> https://plaster.tymoon.eu/view/2616#2616
[22:16:11] <Shinmera> Good evening everyone. Just published a new update on our Lisp-powered game, and perhaps more importantly, a new public demo release along with it: https://reader.tymoon.eu/article/400
[22:20:55] <lotuseater> Cool that you come along with that so well. :)
[22:21:21] <Shinmera> I could do with another programmer, honestly!
[22:21:30] <Shinmera> Unfortunately the budget can't afford one :(
[22:22:07] <borodust> Shinmera: congratz!
[22:22:11] <lotuseater> Oh too bad.
[22:22:18] <Shinmera> borodust: thanks!
[22:22:35] <Shinmera> Had two critical bug discoveries yesterday afternoon. Made for a very stressful saturday evening, hah
[22:23:21] <Josh_2> borodust: well I got that single program to work by just building it on my vps
[22:23:23] <lotuseater> phew but hunting bugs is good
[22:24:40] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 240 seconds)
[22:27:40] <etimmons> Shinmera: Congrats! Finally added it to my Steam wishlist as well.
[22:28:33] <Shinmera> etimmons: much appreciated!
[22:33:41] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[22:33:43] <aeth> careful
[22:33:57] <aeth> lotuseater: every time I think I find a use for #. it turns out not to be too useful
[22:34:19] <aeth> usually a clearer alternative way
[22:34:21] <lotuseater> aeth ^^ with great power ...
[22:34:48] <aeth> e.g. #. is necessary in types, or you could just use DEFTYPE. Similarly, you can DEFMACRO a lot of things that would otherwise require #.
[22:35:20] <aeth> the important common factor here is that it gives a name to what you're doing, instead of leaving it up to the reader
[22:35:33] <aeth> (unintentional pun on "reader", I guess)
[22:37:45] <aeth> lukego: for vector/matrix/array arithmetic generics, type-based dispatch makes a lot of sense and this is the library for this sort of thing: https://github.com/markcox80/specialization-store/
[22:38:54] <lotuseater> right like with the #n= labels you can just give number labels
[22:40:23] <lotuseater> I adopted bad style with using that sometimes in real source, from the Let over Lambda book, but doing so is now history.
[22:41:08] <lotuseater> better symbol macros, depending what one does
[22:44:13] <etimmons> yitzi: It's up finally
[22:45:57] <yitzi> etimmons: Thanks! updated the AUR pkg.
[22:46:38] <yitzi> borodust: Updated the clpm aur for rc.1
[22:47:02] <borodust> yitzi: thanks!
[22:47:04] <lotuseater> what's clpm? :)
[22:48:07] <yitzi> lotuseater: its a package manager for cl. https://gitlab.common-lisp.net/clpm/clpm
[22:48:14] <lotuseater> ahh ^^ cool
[22:48:35] <lukego> aeth: thanks for the ref!
[22:48:44] <etimmons> borodust: Also, I looked into it briefly. The submodule stuff is not going to be trivial. I think I'll aim to just code it once using my libgit2 bindings instead of twice (the other place being to hack it together using the git executable directly).
[22:50:25] <borodust> etimmons: no hurry, i'll use plain ql dist for now to arrange all required dependencies and then use it as a source in my clpmfile
[22:50:40] <borodust> etimmons: thanks for you work on clpm
[22:51:02] <etimmons> Great!
[22:51:24] <etimmons> yw! It always makes me happy to learn about more people that are using or interested in using it!
[22:51:36] <borodust> cuz i also use git lfs and i expect that would be a pain to add to clpm
[22:52:28] <borodust> or maybe not, didn't look into that)
[22:52:59] <etimmons> I'm honestly not sure, but I suspect the submodules will be a bigger change
[22:54:25] <etimmons> That's because right now it uses `git archive` to basically extract a specific commit from a repo. And `git archive` does not recurse into submodules at all.
[22:55:29] <etimmons> For LFS, I feel the worst case is clpm needs to check out a working tree and grab stuff from LFS before creating the archive
[22:56:16] <lotuseater> and if you try using darcs or pijul for it?
[22:57:02] <etimmons> git is the only supported VCS at the moment.
[22:57:13] <etimmons> I think mercurial will be next, and then darcs
[23:01:21] <lotuseater> okay I didn't come into touch with older vcs other than git, just darcs cause of Haskell studies
[23:12:52] *** Quits: cosimone (~user@93-44-185-14.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[23:16:30] <borodust> svn is still popular in gamedev ;p
[23:16:53] <lotuseater> :)
[23:17:26] <etimmons> Really? I thought svn went the way of the dinosaurs by now...
[23:18:44] <borodust> yes, unfortunately, git only recently getting more or less acceptable support for handling binary files with git lfs
[23:19:28] <etimmons> That's a good point. I always forget how (relatively) new lfs is
[23:19:29] <borodust> and gamedev is full of binaries and also favors centralized workflows
[23:20:01] <aeth> I'm just barely old enough to have used cvs, svn, and hg before git took over the world. No darcs, though. But, yes, for binary files, git isn't very good, so some niches still use them. For the most part, though, people who work with binary files still don't understand the value of version control at all, though
[23:21:20] <borodust> aeth: well, not quite true
[23:21:35] <lotuseater> there was also some other thing to manage big files with git but not really check them in so the commits won't get unneccessary big ..
[23:21:49] <borodust> artists, animators, modellers, game designers  are all quite understand why this is important to have :)
[23:22:15] <borodust> i mean, in our studio at least
[23:22:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:22:43] <aeth> I don't work for a studio, but my impression from posts online is that the programmers have to convince everyone else about the value of using version control.
[23:22:55] <lotuseater> borodust: all the high detail models seem to be the reason such new games like Cyberpunk 2077 are so big ^^
[23:23:17] <lotuseater> ah right, it was git-annex
[23:23:36] *** Joins: lisp123_ (~lisp123@45.86.202.65)
[23:23:43] <Josh_2> Does cffi follow symlinks?
[23:24:25] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[23:24:32] <borodust> Josh_2: linker does
[23:25:02] <borodust> meaning you can use a link with #'cffi:load-foreign-library
[23:25:15] *** Joins: khrbt (~znc@user/khrbt)
[23:25:24] <Josh_2> Well once again I am having troubles with my new VPS. I start my binary and immediately get the error 'error opening shared object "libolm.so.3"'
[23:25:34] <borodust> lotuseater: pretty much
[23:25:49] <Josh_2> libolm.so.3 is in /usr/local/lib but its a symlink to libolm.so.3.2.4
[23:25:51] <borodust> content is everything games are today
[23:26:04] <Josh_2> on my on my old vps its not a symlink
[23:26:51] <lotuseater> but I don't know why patches are sometimes about 30GB big
[23:27:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[23:28:32] *** Joins: khrbt_ (~znc@user/khrbt)
[23:29:27] <Josh_2> man this is annoying... and I cant skirt around this one by building it on my vps
[23:29:55] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[23:35:39] *** Quits: jans (~Thunderbi@193.138.218.254) (Remote host closed the connection)
[23:42:28] <etimmons> Josh_2: Have you tried running `ldconfig` ?
[23:46:10] *** Joins: cosimone (~user@93-44-185-14.ip98.fastwebnet.it)
[23:50:49] *** Quits: khrbt_ (~znc@user/khrbt) (Ping timeout: 252 seconds)
[23:52:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:55:57] *** Quits: lisp123_ (~lisp123@45.86.202.65) (Ping timeout: 245 seconds)
