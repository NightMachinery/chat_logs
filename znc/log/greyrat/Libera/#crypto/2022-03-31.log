[00:06:06] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[00:07:15] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk)
[00:10:09] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Client Quit)
[00:13:06] *** Joins: Tang3nt-Man (~Tang3nt-M@217.146.83.231)
[00:15:53] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk) (Ping timeout: 260 seconds)
[00:29:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:36:12] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:41:08] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 260 seconds)
[00:41:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:42:09] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:43:19] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:43:55] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:44:37] *** Lord_of_Life_ is now known as Lord_of_Life
[00:48:14] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[00:49:22] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[00:56:19] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[01:01:54] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[01:04:54] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:06:40] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[01:12:35] *** Quits: gevreeen (~gevreeen@2001:470:67:326:d879:e6f4:586a:79af) (Ping timeout: 250 seconds)
[01:18:53] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[01:24:59] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[01:30:31] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:31:43] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 260 seconds)
[01:35:18] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[01:35:57] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[01:36:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:38:31] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[01:38:47] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:43:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[01:56:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:88a0:fb04:2d2:c434) (Ping timeout: 245 seconds)
[01:56:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:56:41] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[02:19:25] *** Quits: trebuh (~trebuh@2001:41d0:a:15c7::1) (Remote host closed the connection)
[02:19:34] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[02:19:47] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:20:11] *** Joins: trebuh (~trebuh@2001:41d0:a:15c7::1)
[02:25:08] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[02:25:18] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 260 seconds)
[02:26:59] *** Quits: Guyver2_ (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:28:59] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:38:47] *** Joins: mad_enz (~mad_enz@2605:8d80:6a1:fc16:6202:128a:b38a:9854)
[02:39:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:45:08] *** Joins: igemnace (~ian@user/igemnace)
[02:50:18] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[03:02:27] *** Joins: skaro (~skaro@2600:8807:180:80:8dc4:6b55:1b0:cba)
[03:07:59] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[03:08:36] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[03:15:48] *** Quits: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04) (Ping timeout: 240 seconds)
[03:16:32] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[03:18:01] *** Joins: HumanG33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net)
[03:28:29] *** Quits: skaro (~skaro@2600:8807:180:80:8dc4:6b55:1b0:cba) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[03:28:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:28:38] *** Quits: mad_enz (~mad_enz@2605:8d80:6a1:fc16:6202:128a:b38a:9854) (Read error: Connection reset by peer)
[03:34:02] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[03:35:19] *** Joins: ottomatik (~ottomatik@196.121.141.75)
[03:35:26] <ottomatik> Hello
[03:35:38] <sarnold> hi
[03:36:07] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[03:37:06] <WishBoy> réééloooooooou dear
[03:37:12] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[03:37:36] *** Joins: Wulf (~Wulf@user/wulf)
[03:37:56] <ottomatik> I'm trying to learn about PSK cracking for IKE v1 in agressive mode
[03:38:45] <ottomatik> I tried the attackwith MD5 and it worked properly but when switching to sha256 it no longer works
[03:39:32] <ottomatik> this is my program: https://bpa.st/FK4A
[03:39:45] *** Quits: halo (~halosghos@user/halosghost) (Quit: WeeChat 3.4.1)
[03:40:00] <ottomatik> For sha256  I just switch to digestmod=SHA256
[03:40:21] <ottomatik> (with the other values gathered from a wireshark capture)
[03:41:03] <ottomatik> the gateway is a pfsense vm
[03:41:34] <sarnold> I know nothing about the problem, but it's pretty legible code
[03:42:04] <sarnold> the one thing that feels slightly funny is the the dhpub_ and cookie_ and id_r, sa_i variables are in one order, and the unhexlify() call is given in a different order
[03:42:36] <sarnold> if you accidentally pasted a value into the wrong variable, just getting them out of order by accident, it could be pretty hard to spot
[03:42:50] <sarnold> I could see myself making that mistake pretty easily, anyway :)
[03:43:37] <ottomatik> sarnlo, I understand, I was wondering if maybe for sha256, there was other things done implementation wise
[03:43:49] <ottomatik> sorry for my english
[03:44:28] <sarnold> no worries, your english is good enough :)
[03:45:14] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[03:45:15] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:48:59] *** Quits: Klotz (~Klotzoman@gateway/tor-sasl/klotz) (Quit: Klotz)
[03:52:45] <ottomatik> sarnold, yeah, I must have made a mistake at one point, it works as expected now, with sha256
[03:52:49] <ottomatik> :)
[03:53:10] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[03:53:48] <sarnold> ottomatik: sweet! :D
[03:55:53] <ottomatik> sarnold, :) I'm relieved, I used to use ike-scan but for some reason, it didn't work with ike-scan and psk-crack doesn't support sha256
[03:56:21] <sarnold> ottomatik: I wonder, with what you learned here, could you patch it into psk-crack?
[03:58:58] <ottomatik> I can always try :)
[04:11:33] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-546d-a2a7-eb54-e4bc.res6.spectrum.com) (Ping timeout: 260 seconds)
[04:34:54] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:38:21] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[04:39:28] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[04:39:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[04:47:02] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[04:53:35] *** Quits: madage (~madage@user/madage) (Ping timeout: 240 seconds)
[04:54:14] *** Joins: madage (~madage@user/madage)
[04:59:55] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[05:06:09] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[05:09:17] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:14:08] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[05:17:13] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 246 seconds)
[05:38:02] *** Quits: Tang3nt-Man (~Tang3nt-M@217.146.83.231) (Remote host closed the connection)
[05:55:24] *** Quits: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[05:57:24] *** Joins: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net)
[05:58:06] *** Quits: brolin (~brolin@179.13.18.50) (Ping timeout: 260 seconds)
[06:02:18] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:14:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:19:08] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[06:35:53] *** Joins: varayu481 (~varayu@47.31.99.63)
[06:38:10] *** Joins: skaro (~skaro@2600:8807:180:80:1168:7b52:eccd:99fb)
[07:08:18] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 260 seconds)
[07:09:10] *** Joins: aleck (~aleck@user/aleck)
[07:17:48] *** Joins: gevreeen (~gevreeen@2001:470:67:326:7c6b:19ca:beb4:741f)
[07:18:14] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Remote host closed the connection)
[07:21:53] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:21:59] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[07:24:38] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[07:42:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[07:46:46] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[07:52:47] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[08:05:13] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[08:36:28] *** Quits: varayu481 (~varayu@47.31.99.63) (Ping timeout: 272 seconds)
[08:37:00] *** Joins: varayu481 (~varayu@47.31.99.63)
[08:41:10] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[09:08:33] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[09:16:46] *** Joins: labrador (~labrador@user/labrador)
[09:22:44] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[09:32:48] *** Quits: ottomatik (~ottomatik@196.121.141.75) (Quit: Leaving)
[10:07:51] *** Quits: varayu481 (~varayu@47.31.99.63) (Quit: Ping timeout (120 seconds))
[10:08:21] *** Joins: varayu481 (~varayu@47.31.99.63)
[10:09:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[10:13:04] *** Joins: varayu4812 (~varayu@47.31.99.63)
[10:14:43] *** Joins: Sofia (~sofia@user/sofia)
[10:15:40] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[10:16:21] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[10:16:28] *** Quits: varayu481 (~varayu@47.31.99.63) (Ping timeout: 246 seconds)
[10:22:33] *** Quits: ua_ (~ua@public-gprs222674.centertel.pl) (Ping timeout: 260 seconds)
[10:26:06] *** Joins: ua_ (~ua@public-gprs222674.centertel.pl)
[10:26:57] *** Joins: maroon2 (tinycrypt@136.32.225.142)
[10:28:19] *** Quits: maroon (tinycrypt@user/maroon) (Ping timeout: 250 seconds)
[10:28:28] *** maroon2 is now known as maroon
[10:28:29] *** Quits: maroon (tinycrypt@136.32.225.142) (Changing host)
[10:28:29] *** Joins: maroon (tinycrypt@user/maroon)
[10:34:58] *** Joins: varayu48122 (~varayu@47.31.99.55)
[10:37:31] *** Quits: varayu4812 (~varayu@47.31.99.63) (Ping timeout: 260 seconds)
[10:42:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[10:45:55] *** Quits: varayu48122 (~varayu@47.31.99.55) (Ping timeout: 260 seconds)
[10:47:02] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[10:48:29] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[10:49:36] *** Joins: igemnace (~ian@user/igemnace)
[10:54:37] *** Joins: Sofia (~sofia@user/sofia)
[10:59:58] *** Joins: labrador (~labrador@user/labrador)
[11:07:18] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[11:07:49] *** Quits: HumanG33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net) (Quit: WeeChat 3.0)
[11:17:29] *** Quits: skaro (~skaro@2600:8807:180:80:1168:7b52:eccd:99fb) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[11:22:24] *** Joins: callq (~callq@2409:4062:2013:e445:c48c:fc50:229d:16f7)
[11:24:04] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[11:48:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[11:59:05] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:04:14] *** Joins: Sofia (~sofia@user/sofia)
[12:09:43] *** Joins: nq_ (~nq@82.79.141.40)
[12:10:28] *** Joins: MajorBiscuit (~MajorBisc@c-001-024-034.client.tudelft.eduvpn.nl)
[12:18:40] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:31:30] *** Quits: callq (~callq@2409:4062:2013:e445:c48c:fc50:229d:16f7) (Ping timeout: 260 seconds)
[12:51:29] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:55:08] <gevreeen> is there some physical property that could substitute time in the sense of reasonable increment per second, and observability?
[12:55:25] <gevreeen> it'd be great if I can just launch an http request for such property
[12:57:29] <gevreeen> say, if a physics lab offer http access to local sunlight measurement in lumen
[12:58:30] <gevreeen> then, instead of testing of whether the time since the epoch in seconds is close the current time, we could test recorded lumens against current lumen
[12:59:12] <gevreeen> and if the difference is reasonably small, then we can claim we are in sync
[12:59:29] <gevreeen> much like we substract two timestamps
[12:59:43] <gevreeen> just that lab must have historic data available
[13:01:12] <gevreeen> suppose this lab has a server A. if B and C would like to know whether they are in sync, then both record the current time and send it to A asking for a lumen reading
[13:01:34] <gevreeen> B get R(B) and C gets R(C)
[13:01:50] <gevreeen> and if the abs(R(B)-R(C)) is small enough, then they are in sync
[13:02:05] <gevreeen> or
[13:02:14] <gevreeen> just forget sending timestamp to A
[13:02:26] <gevreeen> just bloody ask A for the current reading
[13:03:25] <gevreeen> if B's reading is within reasonable distance from C's reading, then they are in sync
[13:04:29] <gevreeen> it doesn't have to be strictly increasing
[13:04:56] <gevreeen> just that the domain or range of the possible values are reasonably large
[13:08:04] <gevreeen> right, and if the stock market offers reasonable resolution and volatility
[13:08:11] <gevreeen> this could also be the stock price
[13:08:33] <gevreeen> just that you can't find a stock market that's in business 7/24
[13:15:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:24:42] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:28:26] *** Quits: X-Scale (~ARM@231.197.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[13:34:15] <gevreeen> a better question is: what's the *best* source of nonce other than time itself?
[13:34:23] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:c06:c5f:5435:411f)
[13:34:25] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[13:36:09] *** Quits: d34dh0r53 (~d34dh0r53@98.97.81.202) (Ping timeout: 256 seconds)
[13:39:25] *** Joins: VoidSync (~sync@user/voidsync)
[13:39:35] *** Joins: fanis30 (~anon@adsl-153.37.6.0.tellas.gr)
[13:49:20] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 272 seconds)
[13:52:01] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 245 seconds)
[13:53:40] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[13:56:09] *** Joins: d34dh0r53 (~d34dh0r53@98.97.81.189)
[14:02:34] *** Quits: d34dh0r53 (~d34dh0r53@98.97.81.189) (Ping timeout: 246 seconds)
[14:03:38] *** Joins: d34dh0r53 (~d34dh0r53@98.97.81.19)
[14:08:38] *** Quits: d34dh0r53 (~d34dh0r53@98.97.81.19) (Ping timeout: 252 seconds)
[14:13:23] *** Joins: d34dh0r53 (~d34dh0r53@98.97.83.27)
[14:20:08] *** Joins: blarnath (~d34dh0r53@98.97.83.179)
[14:20:35] *** Quits: d34dh0r53 (~d34dh0r53@98.97.83.27) (Ping timeout: 250 seconds)
[14:20:55] *** Joins: ivii (~ivan@user/ivii)
[14:22:27] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[14:23:08] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[14:23:30] *** Quits: VoidSync (~sync@user/voidsync) ()
[14:26:00] *** Joins: d34dh0r53 (~d34dh0r53@98.97.81.214)
[14:26:36] *** Quits: blarnath (~d34dh0r53@98.97.83.179) (Ping timeout: 245 seconds)
[14:31:48] *** Quits: fanis30 (~anon@adsl-153.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[14:32:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[14:32:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-024-034.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[14:33:57] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[14:35:40] *** Joins: MajorBiscuit (~MajorBisc@c-001-024-034.client.tudelft.eduvpn.nl)
[14:36:54] <river> gevreeen: check out lamport timestamp
[14:37:18] <river> physical time is just one instance of a monotonic sequence
[14:45:33] *** Joins: llorllale (~llorllale@198.98.119.85)
[14:56:56] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[14:57:15] *** Joins: noonien (~noonien@user/noonien)
[15:09:19] *** Joins: andreasbuhr (~quassel@p549dba4c.dip0.t-ipconnect.de)
[15:19:52] *** Joins: VoidSync (~sync@user/voidsync)
[15:35:06] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 272 seconds)
[15:37:39] *** Joins: hg (~halosghos@user/halosghost)
[16:18:54] *** Joins: raj (uid72176@user/raj)
[16:19:25] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[16:20:59] *** Quits: raj (uid72176@user/raj) (Client Quit)
[16:28:01] *** Joins: toulene (~toulene@user/toulene)
[17:13:48] *** Quits: Pollion (bombar@zamok.crans.org) (Ping timeout: 240 seconds)
[17:13:59] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:28:38] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[17:28:41] *** Joins: Church (~aleph@68.161.207.188)
[17:31:15] *** Joins: Pollion (bombar@zamok.crans.org)
[17:37:13] *** Quits: nq_ (~nq@82.79.141.40) (Quit: Leaving)
[17:39:46] *** Quits: Pollion (bombar@zamok.crans.org) (Changing host)
[17:39:46] *** Joins: Pollion (bombar@crans/pollion)
[17:45:49] *** Quits: onon (~onon@91.228.52.220) (Changing host)
[17:45:49] *** Joins: onon (~onon@user/onon)
[17:47:26] *** Quits: Pollion (bombar@crans/pollion) (Ping timeout: 245 seconds)
[17:50:29] *** Joins: Pollion (bombar@zamok.crans.org)
[17:51:50] *** Quits: Pollion (bombar@zamok.crans.org) (Changing host)
[17:51:50] *** Joins: Pollion (bombar@crans/pollion)
[18:05:20] *** Joins: nq_ (~nq@195.254.133.193)
[18:14:45] *** Joins: brolin (~brolin@186.97.147.26)
[18:21:48] <gevreeen> river: nice pointerfor logical clock
[18:21:56] <river> yw
[18:31:01] *** Quits: nq_ (~nq@195.254.133.193) (Remote host closed the connection)
[18:36:12] *** Quits: halosghost (~halosghos@user/halosghost) (Ping timeout: 240 seconds)
[18:36:19] *** Quits: hg (~halosghos@user/halosghost) (Ping timeout: 260 seconds)
[18:36:44] *** Joins: nq_ (~nq@195.254.133.193)
[18:38:32] *** Quits: nq_ (~nq@195.254.133.193) (Remote host closed the connection)
[18:39:22] *** Joins: nq_ (~nq@195.254.133.193)
[18:47:18] *** Joins: hg (~halosghos@user/halosghost)
[18:52:19] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:56:56] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[18:58:55] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[18:59:56] *** Joins: drocan (~drocan@user/drocan)
[19:02:38] *** Joins: halosghost (~halosghos@user/halosghost)
[19:15:17] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:18:11] <TimMc> gevreeen: Best source of nonce is either incremental (including monotonic clocks with sufficiently high precision) or random.
[19:19:31] <edk> it's much easier to go wrong with incremental imo
[19:20:59] <Alipha> edk: it's much harder to prevent replay or out of order attacks with random. or nonce reuse, if your nonce size isn't sufficiently large
[19:22:37] <edk> that's all true, but i think using deterministic nonces to detect attacks is an advanced use and you'll know if you have to do it; random is a better default
[19:22:49] <Alipha> if you use a new key for each "session", then i'd use incremental nonces. if you need to use the same key across potentially computer restarts or something, then i'd use random
[19:22:50] <edk> but, yes, assuming sufficient size to make accidentall reuse unlikely
[19:22:55] <river> it think the best is random xor counter
[19:23:00] <river> where random is chosen once at start
[19:23:06] <gevreeen> I've given it some thought. say, if the initial nonce is some random 32-bit integer, and for every request we add another random 32-bit integer to the existing value, then the nonce would be summation of a sequence of random 32-bit integer X_i's, assuming the nonce is 64-bit. however, wouldn't this leak info about the number of nonces doled out?
[19:23:33] <edk> it would yes
[19:23:34] <Alipha> gevreeen: does it matter?
[19:23:49] <river> at the risk of over engineering this, there is a beautiful way to use a block cipher to step through a random permutation rather tahn just doing a boring old +1 every time: )
[19:24:04] <gevreeen> Alipha: if some relatively simple method could cloak/avoid this, then it does
[19:24:10] <edk> river: yes, but i don't think it's necessary
[19:25:41] <gevreeen> river: wouldn't it create a chicken-and-egg problem if we are the beginning of the handshake?
[19:25:42] <Alipha> gevreeen: you could use the output from AES-CTR or such as a nonce
[19:25:55] <Alipha> oh, as river said
[19:27:30] *** Joins: gevreeen_ (~gevreeen@2001:470:67:326:3905:3b4d:53b3:1eb6)
[19:27:58] <Alipha> gevreeen: after you get your shared secret from the handshake, you'd use a KDF to generate {message encryption key, nonce generation key, nonce generation IV}
[19:29:28] <gevreeen_> so, this applies only after the initial handshake
[19:29:37] <gevreeen_> when the shared secret is agreed upon
[19:30:09] <Alipha> Yes
[19:30:56] *** Quits: gevreeen (~gevreeen@2001:470:67:326:7c6b:19ca:beb4:741f) (Ping timeout: 260 seconds)
[19:30:57] *** gevreeen_ is now known as gevreeen
[19:31:57] <edk> there doesn't seem much point in that idea if you have to agree the nonce generation scheme with someone else
[19:33:21] <Alipha> ... you already have to agree on a bunch of stuff?
[19:33:28] <Alipha> what's one more?
[19:34:11] <gevreeen> without a block cipher, however, could we do this with linear regression plus random noice though?
[19:34:57] <gevreeen> essentially we keep a recent cache of the nonces, do the linear regression and adds a minor white noise to it for the next
[19:35:17] <gevreeen> both nonces and their timestamp has to be kepts
[19:35:27] <edk> Alipha: if you're doing TLS or something sure, i guess
[19:35:38] <edk> gevreeen: why?
[19:37:47] <Alipha> you could also use random nonces, but then include a sequential message number inside the ciphertext and reject old message numbers in order to prevent replay attacks
[19:38:35] <gevreeen> edk: if someone's trying to guess the nonce, he would do the same thing. and if I just let it be, then a long time of inactivity would give the curve a flat shape (assuming we don't have block ciphers)
[19:39:06] <edk> i still don't understand whhy
[19:39:15] <edk> nonces being guessed is not a threat
[19:40:43] <gevreeen> say, if I only log in at a service at specific time of the day
[19:40:49] <gevreeen> and I might be the only user
[19:41:00] <edk> doesn't matter
[19:41:07] <Alipha> nonces are public knowledge
[19:41:11] *** Quits: pipapipapibo (~pipapipap@c-67-160-123-241.hsd1.wa.comcast.net) (Remote host closed the connection)
[19:41:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[19:41:44] <edk> the only thing nonces need to do is not be reused with a given key
[19:46:09] <Alipha> the only thing i can see about a concern around nonces is that you'll be able to determine how many messages two parties have exchanged... which doesn't seem like a big deal in almost any situation, but *shrugs* Of course, you can also just tell by how much data is exchanged over time?
[19:46:28] <edk> yeah
[19:47:06] <edk> if you want to avoid that you should just do what river said
[19:47:41] <edk> i don't really buy this about "not having" block ciphers, we always have block ciphers and if you can't compute a block cipher what do you need a nonce for
[19:49:28] <gevreeen> admittedly, I shouldn't worry too much about nonces before key agreement 
[19:50:22] <Alipha> before key agreement, you don't have an encrypted channel, so why do you have nonces?
[19:52:05] <gevreeen> is a pre-shared key K case between A and B, they could reach an agreement with hmac(K, nonce)
[19:52:45] <gevreeen> where nonce is sent in plaintext
[19:53:34] <gevreeen> s/is/in/1
[19:54:30] <edk> then one of A and B can just pick a nonce at random
[19:54:44] <edk> or sequentially
[19:55:35] <gevreeen> if A and B pick a nonce at random, then they have to maintain a long list of used nonces
[19:55:49] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[19:56:11] *** Joins: gareppa (~gareppa@user/gareppa)
[19:56:44] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[19:56:48] <Alipha> is there a reason you're not using DH?
[19:58:11] <gevreeen> if it's done sequentially, then some guessing is possible. however, one can't appease everything. I would use DH is the hosting service provides a way for me securely group http requests belonging to one connection. with the request-and-reponse model, however, pre-shared key is the leastly costly way
[19:58:28] <gevreeen> s/is/if/1
[19:58:50] <gevreeen> s/leastly/least/
[19:59:20] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[19:59:25] <gevreeen> s/reponse/response/
[20:00:45] *** Joins: rg (~r-g@gateway/tor-sasl/r-g)
[20:02:03] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[20:05:08] <Alipha> first, it's best to have separate encryption keys for both directions. Then I think you have to do: Alice and Bob each send each other randomly-generated nonces. Then: FromAliceKey = hmac(K, nonceA || nonceB); FromBobKey = hmac(K, nonceB || nonceA); And then alice sends bob: encrypt(FromAliceKey, msg=nonceA || nonceB); And bob sends alice: encrypt(FromBobKey, msg=nonceB || nonceA); Now they can begin secure
[20:05:10] <Alipha> communication.
[20:05:55] <Alipha> the encrypted messages are to verify they indeed negotiated the same keys and there's no mitm
[20:06:30] <Alipha> i suppose it doesn't matter what the msg is actually that's being encrypted
[20:06:39] <Alipha> could be "hi" :-)
[20:07:12] <Alipha> and you don't have to remember previous nonces with this
[20:07:34] <Alipha> .. previous nonces from previous key negotiations
[20:09:07] <gevreeen> (in the original case it would be KDF on hmac(K,nonce) for 4 additional keys)
[20:11:52] <Alipha> the point being with my protocol is that if both parties contribute a random nonce for the session key generation, then you don't have to worry about nonce reuse because even if the other party generates the same nonce (or, rather, a mitm pretending to the other party), i know that i'm not going to randomly generate the same nonce, so the generated session key will end up being different
[20:12:32] <edk> if you have a pre-shared key a lot of this is overki.l
[20:12:33] <gevreeen> (and it would take one exchange to settle this, while yours would take two exchanges---again requiring grouping http requests from the same connection---if I could group them securely I would just do DH directly)
[20:12:36] <edk> or overkill, sorry
[20:13:12] <edk> like you might as well trust one party to unilaterally choose a nonce because if they are untrustworthy they can just publish the key
[20:13:18] <gevreeen> (if you are in doubt, yes, I'm trying to do some crypto directly over unencrypted http)
[20:14:12] <edk> and you can just assume there is no MITM; use authenticated encryption obviously, but an MITM can't guess K
[20:16:48] <Alipha> edk: my concern is that a mitm could replay a negotiation from a previous session, causing the same session key to get generated, which may enable replaying messages from the previous session, or perhaps decryption of messages if alice or bob reused the same nonces with the same key when encrypting messages
[20:17:17] <gevreeen> (but yes, this is certainly better than the one-authoritative-nounce case, assuming the server end knows it's talking to the same client on the same connection)
[20:17:30] <edk> Alipha: ok, that's fair
[20:19:29] <gevreeen> I think I should work more on getting a bloody duplex pipe to work over the request-responsemodel
[20:20:09] <gevreeen> or I'm gonna stay stuck at the lowest stratum of security
[20:21:52] <Alipha> gevreeen: could include a timestamp in the negotiation so that you only have to remember previous nonces for n minutes... with the caveat that now the devices' clocks have to be in sync
[20:24:04] <river> > crypto directly over unencrypted http
[20:24:09] <river> why
[20:24:20] <river> sounds odd
[20:25:01] <Alipha> too poor for free https certs from letsencrypt
[20:25:11] <gevreeen> kazakhstan is already forcing folks to install gov certs for state-sponsored mitm
[20:25:29] <gevreeen> if things keep getting worse, this country's likely to follow
[20:25:37] <Alipha> ah
[20:27:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-024-034.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[20:33:53] *** Joins: sobkas (~sobkas@95.175.17.217)
[20:44:55] *** Joins: dez (uid92154@user/dez)
[20:52:04] *** Joins: d_b_r (~d_b_r@2a01:e0a:366:e160:258c:6dad:6eaf:d111)
[20:56:03] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:29] *** Joins: WishBoy (~WishBoy@user/wishboy)
[21:00:12] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[21:00:17] *** Quits: jab416171 (~jab416171@c-67-172-226-173.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[21:03:06] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[21:06:00] *** Joins: jab416171 (~jab416171@c-67-172-226-173.hsd1.ut.comcast.net)
[21:10:01] *** Quits: d_b_r (~d_b_r@2a01:e0a:366:e160:258c:6dad:6eaf:d111) (Quit: Client closed)
[21:18:19] *** Quits: nq_ (~nq@195.254.133.193) (Ping timeout: 246 seconds)
[21:18:20] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[21:20:32] *** Quits: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us) (Ping timeout: 260 seconds)
[21:22:10] *** Joins: Pythayr (~pither195@072-238-180-064.res.spectrum.com)
[21:29:00] *** Quits: Pythayr (~pither195@072-238-180-064.res.spectrum.com) (Ping timeout: 260 seconds)
[21:29:19] *** Joins: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us)
[21:31:21] *** Joins: nq (~nq@82.79.141.40)
[21:34:15] <Alipha> gevreeen: I would perhaps just do some simplistic encryption redundantly over https
[21:36:33] <Alipha> ie, just use random nonces with a long term key (don't bother with a session key) and don't worry about replay attacks. Are you really concerned that the government would go through the hassle of breaking your encryption? Or even notice that you're running your own encryption under https?
[21:37:53] <Alipha> Unless you're doing specifically anti-government communication
[21:40:27] <yawkat> gevreeen: v2ray?
[21:41:54] <Alipha> But even then, the only real attack is replay attacks, which is kinda hard to exploit in a useful manner. You don't even have perfect forward secrecy, since you're not using DH
[21:58:06] *** Quits: brolin (~brolin@186.97.147.26) (Remote host closed the connection)
[22:11:47] *** Joins: aleck1 (~aleck@user/aleck)
[22:11:53] *** Joins: gildasio1 (~gildasio@gateway/tor-sasl/gildasio)
[22:12:58] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[22:14:12] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 240 seconds)
[22:30:03] *** Quits: gildasio1 (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[22:30:25] *** Joins: gildasio1 (~gildasio@gateway/tor-sasl/gildasio)
[22:31:18] <TimMc> If you just want to disguise TLS -- "tunnelling" it over what looks like plain HTTP -- I'm sure there are various tools out there for just disguising an arbitrary byte stream as an HTTP request and HTML response.
[22:36:05] <river> yeah whats the goal here?
[22:36:31] <river> 'this country' ?
[22:36:49] <int-e> maroon: So after about a CPU month of screening candidates and a few hours of additional MR-tests it looks like 2^65536 - 2356107437 is the largest safe prime below 2^65536.
[22:38:31] <piou> if the goal is to avoid gov tls mitm through gov certs then a simple vpn outside the country sounds enough, in effect adding that extra layer of encryption, I'm not convinced there's a reason to get fancier
[22:45:30] <yawkat> TimMc: if that is the goal, there is also a huge amount of prior work mostly from china, like v2ray
[23:23:47] *** Joins: Tangent-Man (~Tang3nt-M@92.40.179.165.threembb.co.uk)
[23:25:26] *** Quits: Tangent-Man (~Tang3nt-M@92.40.179.165.threembb.co.uk) (Remote host closed the connection)
[23:25:51] *** Joins: Tangent-Man (~Tang3nt-M@92.40.179.154.threembb.co.uk)
[23:31:40] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:35:54] <maroon> congrats, int-e! my calc is that the mean distance would have been around 1.5 billion, so its around 150% of that
[23:44:52] *** Quits: Tangent-Man (~Tang3nt-M@92.40.179.154.threembb.co.uk) (Read error: Connection reset by peer)
[23:44:52] *** Joins: Tang3nt-Man (~Tang3nt-M@92.40.179.157.threembb.co.uk)
[23:47:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[23:48:23] <maroon> edk, you can have the benefit of sequential nonce preventing a birthday collision repeat, plus the behavior of a random nonce, by making a secret nonce_key, then having a 128-bit nonce be ecb_encrypt_aes(data=sequential++ key=nonce_key). this lets you 'decrypt' a nonce to see if it's a reply, prevents a repeat prior to 2^128 nonces, and appears to be 'random'
[23:49:32] <maroon> if your nonce is 64 bits, you cant truncate a 128-bit ciphertext to have this behavior, you'd need to choose a 64-bit cipher like DES or blowfish - or one of the newer 64bit 'lightweight' ciphers
