[00:06:17] *** Joins: oxum (~oxum@106.203.195.217)
[00:15:37] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Ping timeout: 248 seconds)
[00:17:13] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[00:19:58] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[00:20:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[00:22:17] *** Joins: Maxattax97 (~max@208.119.135.8)
[00:28:03] *** Joins: Everything (~Everythin@37.115.210.35)
[00:29:04] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[00:34:30] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[00:37:12] *** Quits: LiftLeft (~LiftLeft@172.83.47.113) (Ping timeout: 245 seconds)
[00:40:04] *** Joins: LiftLeft (~LiftLeft@172.83.47.108)
[00:49:51] *** Joins: oxum (~oxum@106.203.195.217)
[00:54:07] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:54:10] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[00:55:07] *** Joins: flynn (~mcbloch@user/flynn)
[01:04:04] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[01:04:41] *** Quits: Maxattax97 (~max@208.119.135.8) (Ping timeout: 252 seconds)
[01:05:07] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Quit: farmstatejake)
[01:05:43] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[01:16:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:17:59] *** Joins: fikran (~fikran@user/fikran)
[01:24:41] *** Joins: oxum (~oxum@106.203.195.217)
[01:24:58] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[01:26:22] *** Joins: Maxattax97 (~max@12.86.254.234)
[01:34:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:36:35] *** Quits: LiftLeft (~LiftLeft@172.83.47.108) (Ping timeout: 252 seconds)
[01:39:10] *** Joins: LiftLeft (~LiftLeft@172.98.80.121)
[01:39:28] *** Quits: dbr^ (~dbr@wsip-98-188-244-188.mc.at.cox.net) (Remote host closed the connection)
[01:40:07] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[01:43:06] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 250 seconds)
[01:43:44] *** Quits: burningserenity (~burningse@102.129.152.83) (Ping timeout: 252 seconds)
[01:45:52] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[01:53:02] *** Joins: burningserenity (~burningse@102.129.152.118)
[01:59:23] *** Joins: torin_ (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net)
[01:59:23] *** Quits: Torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[02:05:07] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[02:05:40] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 252 seconds)
[02:07:19] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[02:09:34] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:10:34] *** Joins: flynn (~mcbloch@user/flynn)
[02:16:08] *** Joins: oxum (~oxum@106.203.195.217)
[02:16:20] *** Joins: khrbt (~znc@user/khrbt)
[02:21:04] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[02:27:12] *** Joins: Torr (~Torr@user/torr)
[02:32:43] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[02:32:53] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:33:53] *** Joins: flynn (~mcbloch@user/flynn)
[02:49:03] *** Joins: oxum (~oxum@106.203.195.217)
[02:50:57] *** Quits: Maxattax97 (~max@12.86.254.234) (Remote host closed the connection)
[02:53:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[02:54:34] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[02:56:21] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:57:51] *** Quits: kodah (~kodah@user/kodah) (Quit: kodah)
[02:59:40] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[03:00:41] *** Joins: flynn (~mcbloch@user/flynn)
[03:04:02] *** Joins: oxum (~oxum@106.203.195.217)
[03:07:16] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 252 seconds)
[03:07:59] *** Joins: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net)
[03:08:27] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 245 seconds)
[03:10:10] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[03:11:23] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:11:51] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:21:42] *** Joins: oxum (~oxum@106.203.195.217)
[03:25:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:26:24] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[03:26:35] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[03:27:08] *** Parts: jsanford (~jsanford@user/jsanford) ()
[03:27:21] *** Joins: fikran (~fikran@user/fikran)
[03:30:32] *** Joins: jsanford (~jsanford@user/jsanford)
[03:31:40] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[03:32:28] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:58] *** Joins: jsrnop (~mark@user/jsrnop)
[03:40:02] *** Joins: oxum (~oxum@106.203.195.217)
[03:41:11] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:42:03] *** Joins: pepee (~user@user/pepee)
[03:44:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[03:54:19] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:54:48] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:55:54] *** Joins: oxum (~oxum@106.203.195.217)
[04:00:26] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 256 seconds)
[04:01:02] *** Joins: c10l1 (~c10l@89.34.167.207)
[04:03:22] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 252 seconds)
[04:03:22] *** c10l1 is now known as c10l
[04:12:01] *** Joins: oxum (~oxum@106.203.195.217)
[04:14:02] <Torr> ~
[04:16:22] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 245 seconds)
[04:25:13] *** Joins: src (~src@user/src)
[04:27:48] <b0nn>  /
[04:29:25] *** Joins: oxum (~oxum@106.203.195.217)
[04:33:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[04:41:22] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[04:45:18] *** Joins: oxum (~oxum@106.203.195.217)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:11] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[05:03:24] *** Joins: oxum (~oxum@106.203.195.217)
[05:05:02] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:08:02] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 245 seconds)
[05:08:09] <gun1x> =
[05:08:12] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:10:39] *** Joins: andlabs (~andlabs@70.107.171.168)
[05:14:03] *** Quits: realies (~realies@user/realies) (Remote host closed the connection)
[05:15:19] *** Joins: realies (~realies@user/realies)
[05:19:10] *** Joins: oxum (~oxum@106.203.195.217)
[05:23:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[05:26:42] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[05:28:40] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[05:29:11] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:34:21] <b0nn> dostoyevsky2: This is an article by DGraph on using manual memory management in Go https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/
[05:34:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:35:20] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[05:35:22] <b0nn> But, if you're going down that road there are (IMO) better tools, Go's GC works well for Go, and looking to disable it means you're really looking for a different tool/language
[05:36:43] *** Joins: fikran (~fikran@user/fikran)
[05:37:13] *** Joins: oxum (~oxum@106.203.195.217)
[05:37:30] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[05:40:07] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 245 seconds)
[05:41:53] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[05:42:15] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[05:42:24] *** Joins: neurocyte8 (~neurocyte@IP-213188117211.dialin.heagmedianet.de)
[05:42:24] *** Quits: neurocyte8 (~neurocyte@IP-213188117211.dialin.heagmedianet.de) (Changing host)
[05:42:24] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[05:43:34] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[05:45:45] *** Joins: yoonkn (~user@175.197.208.79)
[05:46:17] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:46:17] *** neurocyte8 is now known as neurocyte
[05:46:47] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 245 seconds)
[05:55:09] *** Joins: oxum (~oxum@106.203.195.217)
[06:00:00] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 256 seconds)
[06:01:44] *** Joins: kodah (~kodah@user/kodah)
[06:02:29] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:06:11] *** Joins: andlabs (~andlabs@70.107.171.168)
[06:11:24] *** Quits: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:12:21] *** Joins: oxum (~oxum@106.203.195.217)
[06:15:02] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[06:16:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[06:19:17] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 245 seconds)
[06:28:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[06:29:05] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7) (Read error: Connection reset by peer)
[06:29:47] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7)
[06:30:46] *** Joins: oxum (~oxum@106.203.195.217)
[06:34:31] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:34:37] *** Quits: burningserenity (~burningse@102.129.152.118) (Ping timeout: 252 seconds)
[06:35:10] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[06:47:30] *** Joins: farmstatejake1 (~farmstate@user/farmstatejake)
[06:49:40] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Ping timeout: 240 seconds)
[06:50:05] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 252 seconds)
[06:50:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[06:51:23] *** Joins: flynn (~mcbloch@user/flynn)
[06:59:36] *** Joins: lalitmee_ (~lalitmee@180.94.32.182)
[07:03:07] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[07:03:13] *** Joins: GJdan (~quassel@107-190-25-75.cpe.teksavvy.com)
[07:05:16] *** Joins: oxum (~oxum@106.203.195.217)
[07:09:53] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[07:15:02] *** Joins: prologic (~prologic@mail.mills.io)
[07:15:44] <prologic> I'm a bit confused by how SetReadDeadline(0 works, I'm seeing effective values of -62135596800 (a time in the past?) and 1 (wtf is this?)
[07:15:52] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[07:17:48] <foobaz> where are you getting those numbers from?
[07:18:21] <prologic> from calls being made to my StdioConn's SetReadDeadline methods
[07:19:24] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:19:25] <foobaz> what is -62135596800, nanoseconds since 1970?
[07:19:38] <prologic> I _thought_ I could cheat a little and use contextio (https://pkg.go.dev/github.com/dolmen-go/contextio#NewReader) but I have no idea how to implement this properly given really weird time.Time values I'm seeing
[07:19:59] <prologic> if you print it, it's 0001-01-01 00:00:00 +0000 UTC
[07:20:10] <prologic> i.e: fmt.Printf("%s", t)
[07:20:20] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 252 seconds)
[07:20:31] <foobaz> and i imagine 1 would be 1970?
[07:21:01] <prologic> yeah
[07:21:06] <foobaz> since those times are both in the past, is the caller asking you to fail immediately?
[07:21:19] <prologic> who knows?
[07:21:31] *** Joins: oxum (~oxum@106.203.195.217)
[07:22:12] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:26:10] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[07:27:11] <prologic> https://play.golang.org/p/YCV3TFFFuTx
[07:27:21] <prologic> I guess they are both effectively values in the past?
[07:28:12] <foobaz> yes, which means the deadline has already been reached
[07:28:49] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7)
[07:31:53] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7) (Ping timeout: 252 seconds)
[07:33:47] <prologic> yeah I don't understand this at all
[07:33:59] <prologic> this means we're done before we've even started
[07:37:27] *** Joins: oxum (~oxum@106.203.195.217)
[07:38:31] <bpalmer> prologic: one thing that comes up  a lot is callers get confused about the difference between deadlines (absolute times) and timeouts (relative times)
[07:39:08] <prologic> this is all coming from the std lib :)
[07:40:53] <bpalmer> ah
[07:41:47] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 245 seconds)
[07:42:19] <rewt> prologic, looking at your comment https://github.com/golang/go/issues/48167#issuecomment-912206250, where the quoted text links to https://github.com/golang/go/issues/20963#issuecomment-318467349, i'm guessing stdlib is using values in the past to expire the read
[07:43:32] <prologic> I _thought_ deadlines only affect future Read/Write calls?
[07:43:38] <prologic> at least this is what the docs say no?
[07:43:47] <rewt> yes, any pending reads will only happen in the future
[07:43:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:44:11] *** Joins: Jad (~Nashmi@user/jad)
[07:44:30] <rewt> probably best to respect the deadline and time out the read
[07:46:05] *** Joins: fikran (~fikran@user/fikran)
[07:48:54] <prologic> yeah I'm totally out of my depth here I think
[07:49:50] <prologic> How do I even implement SetReadDealine() properly in the first place in https://git.mills.io/prologic/docker-proxy/src/branch/master/internal/stdio.go#L126-L128 ?
[07:51:03] <pepee> turns out there was a vuln in the IPv4 parsing code after all: https://github.com/sickcodes/security/blob/master/advisories/SICK-2021-016.md
[07:51:06] <rewt> stuff it into sc, and on the next sc.Read, if it's past the deadline, don't read but return a timeout error
[07:51:12] <pepee> https://github.com/golang/go/issues/30999
[07:51:40] <pepee> wish I had made a proof of concept and submitted a CVE request, but...
[07:52:21] <rewt> (or w/e error is appropriate)
[07:53:45] *** Joins: oxum (~oxum@106.203.195.217)
[07:54:29] <prologic> rewt yeah so I've basically done that, I guess what's confusing me now is nothing works anymore
[07:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[07:54:42] <prologic> all Read()'s effectively timeout
[07:55:02] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[07:55:05] <rewt> maybe also have a flag that's set when SetReadDeadline is called
[07:55:14] <rewt> and only check for it if that flag is set
[07:55:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:55:29] <prologic> Okay...
[07:55:54] <rewt> because if SetReadDeadline is not called, the time.Time will contain its zero value, which would be in the past
[07:56:46] <prologic> Sure okay
[07:58:26] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 256 seconds)
[07:59:34] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[08:09:43] *** Joins: oxum (~oxum@106.203.195.217)
[08:12:24] <prologic> hmm despite _trying_ to implement SetReadDeadline() I still get stuck in a net/http.(*conn).hijackLocked mutex
[08:14:10] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[08:15:26] *** Joins: oxum (~oxum@106.203.195.217)
[08:16:35] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[08:20:13] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[08:20:32] *** Parts: ansimita (~ansimita@user/ansimita) ()
[08:21:19] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 252 seconds)
[08:22:25] *** Joins: christophergray (~christoph@190.148.51.3)
[08:22:39] *** Joins: oxum (~oxum@106.203.195.217)
[08:27:10] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 240 seconds)
[08:28:15] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5) (Quit: Leaving)
[08:30:33] *** Quits: christophergray (~christoph@190.148.51.3) (Quit: WeeChat 3.2)
[08:38:27] *** Joins: oxum (~oxum@106.203.195.217)
[08:42:17] *** Quits: LiftLeft (~LiftLeft@172.98.80.121) (Ping timeout: 252 seconds)
[08:43:19] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[08:50:50] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:51:38] *** Joins: jpw (~jpw@user/jpw)
[08:54:42] *** Quits: zwr (~zwr@2804:d45:b966:fb00:9e3f:83ef:ad29:6370) (Ping timeout: 245 seconds)
[08:55:29] *** Joins: zwr (~zwr@2804:d45:b966:fb00:38de:c296:2fbf:c2fe)
[08:55:58] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[09:15:09] *** Joins: adlternative (~adl@117.32.216.71)
[09:17:12] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 256 seconds)
[09:17:17] *** Joins: mei (~mei@user/mei)
[09:18:25] *** Joins: flynn (~mcbloch@user/flynn)
[09:21:35] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[09:27:22] *** Joins: _cb (~cbarreda@2603-80a0-0600-0293-ad47-fb89-5fd5-cfa1.res6.spectrum.com)
[09:29:00] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (Quit: Surfing the great wave off Kanagawa)
[09:30:20] *** Joins: mrus (~mrus@149.28.224.172)
[09:32:33] *** Quits: _cb (~cbarreda@2603-80a0-0600-0293-ad47-fb89-5fd5-cfa1.res6.spectrum.com) (Quit: Ex-Chat)
[09:35:31] *** Joins: _cb (~cbarreda@2603-80a0-0600-0293-ad47-fb89-5fd5-cfa1.res6.spectrum.com)
[09:38:30] *** Quits: _cb (~cbarreda@2603-80a0-0600-0293-ad47-fb89-5fd5-cfa1.res6.spectrum.com) (Quit: Ex-Chat)
[09:47:54] *** Joins: oxum (~oxum@106.206.11.30)
[09:47:55] *** Quits: oxum (~oxum@106.206.11.30) (Read error: Connection reset by peer)
[09:48:40] *** Joins: oxum (~oxum@106.203.195.217)
[09:50:02] *** Joins: jpw_ (~jpw@user/jpw)
[09:51:02] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 252 seconds)
[09:53:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[09:54:57] *** jpw_ is now known as jpw
[09:55:08] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[09:55:27] *** Joins: fikran (~fikran@user/fikran)
[09:56:55] *** Quits: mrus (~mrus@149.28.224.172) (Quit: Surfing the great wave off Kanagawa)
[09:57:03] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[09:57:21] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[09:59:02] *** Joins: Guest66_ (~textual@2603:3020:e00:8100:4d23:3b2f:14f2:bb44)
[10:01:38] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (Client Quit)
[10:01:57] *** Joins: mrus (~mrus@149.28.224.172)
[10:02:59] *** Quits: mrus (~mrus@149.28.224.172) (Client Quit)
[10:07:28] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[10:12:54] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[10:17:50] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[10:30:29] *** Quits: Guest66_ (~textual@2603:3020:e00:8100:4d23:3b2f:14f2:bb44) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:35:34] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[10:47:18] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[11:01:45] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:05:39] *** Joins: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net)
[11:06:47] *** Quits: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net) (Remote host closed the connection)
[11:10:10] *** Quits: src (~src@user/src) (Ping timeout: 240 seconds)
[11:13:28] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[11:14:22] *** Joins: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net)
[11:21:45] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[11:24:37] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[11:25:07] *** Joins: shka (~herr@109.231.62.239)
[11:26:31] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Remote host closed the connection)
[11:35:10] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[11:35:17] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[11:38:43] *** Joins: nattiestnate (~nate@36.81.8.78)
[11:43:35] *** Quits: nattiestnate (~nate@36.81.8.78) (Client Quit)
[11:51:19] *** Joins: mrig (~mrig@user/mrig)
[11:54:47] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[11:55:12] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[11:57:41] *** Joins: gggp (~textual@60.10.194.45)
[12:01:58] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:02:08] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[12:02:10] *** Quits: gggp (~textual@60.10.194.45) (Ping timeout: 240 seconds)
[12:02:55] *** Quits: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net) (Quit: ERC (IRC client for Emacs 28.0.50))
[12:02:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:03:49] *** Joins: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net)
[12:03:53] *** Quits: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net) (Remote host closed the connection)
[12:04:49] *** Joins: fikran (~fikran@user/fikran)
[12:10:52] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[12:11:27] *** Joins: cim (~cim@205.185.117.110)
[12:25:33] *** Quits: farmstatejake1 (~farmstate@user/farmstatejake) (Quit: farmstatejake1)
[12:40:27] <prologic> Lookie what I found
[12:40:27] <prologic> https://github.com/golang/go/issues/21423
[12:40:28] <prologic> and
[12:40:35] <prologic> https://github.com/glycerine/xcryptossh
[12:41:46] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 250 seconds)
[12:46:20] <A_Dragon> mmm
[12:46:22] <A_Dragon> fun
[12:46:53] *** Quits: prologic (~prologic@mail.mills.io) (Quit: ZNC - https://znc.in)
[12:47:13] *** Joins: prologic (~prologic@mail.mills.io)
[12:52:54] <prologic> Anyone seen this issue? https://github.com/golang/go/issues/21423
[12:57:59] <A_Dragon> you should comment and ask
[12:58:46] <prologic> well it references https://github.com/glycerine/xcryptossh back in ~2017
[12:58:58] <prologic> it interestingly adds deadline/context support to ssh.Channel
[13:05:38] *** Joins: lalitmee__ (~lalitmee@180.94.33.65)
[13:08:02] *** Quits: lalitmee_ (~lalitmee@180.94.32.182) (Ping timeout: 245 seconds)
[13:09:19] *** Joins: gggpkm (~gggpkm@60.10.23.169)
[13:17:29] *** Joins: gggpkm_ (~gggpkm@111.63.14.116)
[13:19:54] *** Quits: gggpkm (~gggpkm@60.10.23.169) (Ping timeout: 250 seconds)
[13:23:03] *** Joins: gggpkm (~gggpkm@111.63.14.116)
[13:24:50] *** Quits: gggpkm_ (~gggpkm@111.63.14.116) (Ping timeout: 256 seconds)
[13:28:34] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[13:28:53] <A_Dragon> yeah its one of those things. But if you comment Im, sure you'll get a response
[13:36:34] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[13:37:38] *** Joins: flynn (~mcbloch@user/flynn)
[13:38:30] *** Joins: gggpkm_ (~gggpkm@111.63.14.116)
[13:41:16] *** Quits: gggpkm (~gggpkm@111.63.14.116) (Ping timeout: 256 seconds)
[13:46:36] *** Quits: mei (~mei@user/mei) (Quit: mei)
[13:49:11] *** Joins: hexfive (~eric@50.35.83.177)
[13:51:36] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[13:54:07] *** Joins: gggpkm (~gggpkm@60.10.194.45)
[13:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[13:55:21] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[13:55:26] *** Quits: gggpkm_ (~gggpkm@111.63.14.116) (Ping timeout: 256 seconds)
[13:57:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:58:01] *** Joins: andlabs (~andlabs@70.107.171.168)
[14:11:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[14:14:10] *** Joins: fikran (~fikran@user/fikran)
[14:21:38] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[14:21:44] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[14:22:10] <mikoto-chan> why does RMutex exist? I thought you only required a mutex for functions that change a state
[14:23:05] <nevivurn> mikoto-chan: yeah, you generally need something like a mutex if you have shared state across goroutines, which is why Mutex and RWMutex exist
[14:24:58] *** Joins: gggpkm_ (~gggpkm@111.63.14.116)
[14:27:03] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[14:27:12] *** Quits: gggpkm (~gggpkm@60.10.194.45) (Ping timeout: 245 seconds)
[14:27:32] *** Joins: kcrk (~kcrk@user/kcrk)
[14:34:13] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[14:34:46] *** Quits: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 252 seconds)
[14:36:44] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:37:11] *** Joins: mickey (~user@user/mickey)
[14:41:08] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:41:43] *** Joins: gggpkm (~gggpkm@60.10.194.45)
[14:42:09] *** Joins: flynn (~mcbloch@user/flynn)
[14:43:36] *** Quits: gggpkm_ (~gggpkm@111.63.14.116) (Ping timeout: 256 seconds)
[14:43:42] <A_Dragon> mikoto-chan: RWMutex is helpful when you have mostly reads but occasional writes, it makes things faster because multiple things can hold a read mutex, but only one may hold a write, thus the write waits until people are done, and then everybody waits until the write is done
[14:43:54] *** Joins: Ginja (~nyx@thanatos.gn32.uk)
[14:43:58] *** Joins: ghostbusters2 (~admin@user/ghostbuster)
[14:44:29] <A_Dragon> so it means that on top of allowing more concurrency (eg 30 things all reading a config struct at once), you ensure that you dont get data races when you DO need to update your struct
[14:46:29] <j416> mikoto-chan: I suppose you mean RWMutex, not RMutex?
[14:46:32] *** Joins: feuerrot_ (~feuerrot@shells.chaosdorf.de)
[14:46:50] <j416> RMutex would indeed be an odd thing to have
[14:47:22] <j416> (it'd just be a Mutex in that case)
[14:48:26] *** Quits: ghostbuster (~admin@user/ghostbuster) (Ping timeout: 276 seconds)
[14:48:26] *** Quits: GinjaNinja32 (~nyx@thanatos.gn32.uk) (Remote host closed the connection)
[14:48:26] *** Quits: feuerrot (~feuerrot@shells.chaosdorf.de) (Ping timeout: 276 seconds)
[14:48:52] <mikoto-chan> j416: ah yeah I misread, thanks
[14:50:23] *** Joins: normen (~normen@p200300d7173dc9003971126a580dcd5e.dip0.t-ipconnect.de)
[14:50:50] *** Quits: normen (~normen@p200300d7173dc9003971126a580dcd5e.dip0.t-ipconnect.de) (Client Quit)
[14:51:53] *** Joins: normen (~normen@p200300d7173dc9003971126a580dcd5e.dip0.t-ipconnect.de)
[14:55:05] *** Joins: Snyp (~Snyp@49.207.201.231)
[14:57:46] *** Joins: gggp (~textual@60.10.194.45)
[15:05:11] *** Joins: carlavilla (~carlavill@2a0c:5a84:3206:a800:221:6bff:fe3b:cee4)
[15:06:28] *** Joins: gggpkm_ (~gggpkm@60.10.194.45)
[15:06:54] *** Quits: gggpkm (~gggpkm@60.10.194.45) (Read error: Connection reset by peer)
[15:08:02] *** Quits: gggp (~textual@60.10.194.45) (Ping timeout: 245 seconds)
[15:10:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[15:11:05] *** Andrew is now known as CoHaxPenguino
[15:13:45] *** CoHaxPenguino is now known as HaxPenguino
[15:19:12] *** Quits: Snyp (~Snyp@49.207.201.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:20:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:26:19] *** Joins: gggpkm (~gggpkm@60.10.23.169)
[15:27:40] *** Quits: gggpkm_ (~gggpkm@60.10.194.45) (Ping timeout: 240 seconds)
[15:28:32] *** Joins: Snyp (~Snyp@49.207.201.231)
[15:28:52] *** Quits: yoonkn (~user@175.197.208.79) (Ping timeout: 245 seconds)
[15:30:28] *** Joins: gggpkm_ (~gggpkm@60.10.194.45)
[15:33:04] *** Quits: gggpkm (~gggpkm@60.10.23.169) (Ping timeout: 252 seconds)
[15:40:40] *** Joins: gggpkm (~gggpkm@111.63.14.116)
[15:41:26] *** Quits: Snyp (~Snyp@49.207.201.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:41:47] *** Quits: gggpkm_ (~gggpkm@60.10.194.45) (Ping timeout: 245 seconds)
[15:41:53] *** Joins: Snyp (~Snyp@49.207.201.231)
[15:45:23] *** HaxPenguino is now known as CoCoHaxPenguin
[15:48:29] *** Joins: gggpkm_ (~gggpkm@60.10.23.169)
[15:50:53] *** Quits: Snyp (~Snyp@49.207.201.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:51:01] *** Joins: Guest2 (~Guest2@89-78-16-102.dynamic.chello.pl)
[15:51:36] *** Quits: gggpkm (~gggpkm@111.63.14.116) (Ping timeout: 256 seconds)
[15:51:41] *** Joins: yoonkn (~user@175.197.208.79)
[15:53:51] *** Quits: Guest2 (~Guest2@89-78-16-102.dynamic.chello.pl) (Client Quit)
[15:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:54:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[15:57:45] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[15:58:05] *** Joins: mickey (~user@user/mickey)
[15:59:38] *** Quits: darkapex (~darkapex@user/darkapex) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[16:00:02] *** Joins: darkapex (~darkapex@user/darkapex)
[16:03:06] *** Joins: lalitmee_ (~lalitmee@180.94.33.232)
[16:05:57] *** Quits: lalitmee__ (~lalitmee@180.94.33.65) (Ping timeout: 245 seconds)
[16:08:23] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[16:17:33] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[16:17:59] *** Joins: gggpkm (~gggpkm@60.10.23.169)
[16:18:18] *** Joins: oj (~oj@user/oj)
[16:18:52] *** Quits: gggpkm_ (~gggpkm@60.10.23.169) (Ping timeout: 250 seconds)
[16:21:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:23:32] *** Joins: fikran (~fikran@user/fikran)
[16:25:38] *** Joins: lalitmee__ (~lalitmee@180.94.32.27)
[16:28:04] *** Quits: lalitmee_ (~lalitmee@180.94.33.232) (Ping timeout: 252 seconds)
[16:32:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[16:34:59] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:35:28] *** Joins: gggpkm_ (~gggpkm@60.10.194.45)
[16:35:37] *** Joins: lalitmee_ (~lalitmee@180.94.32.110)
[16:38:02] *** Quits: gggpkm (~gggpkm@60.10.23.169) (Ping timeout: 252 seconds)
[16:38:02] *** Quits: lalitmee__ (~lalitmee@180.94.32.27) (Ping timeout: 245 seconds)
[16:41:28] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[16:47:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:53:05] *** Joins: jsrnop4 (~mark@user/jsrnop)
[16:54:17] *** Quits: jsrnop (~mark@user/jsrnop) (Ping timeout: 245 seconds)
[16:54:17] *** jsrnop4 is now known as jsrnop
[16:58:34] *** Joins: someuser (~user@41.239.243.83)
[17:02:06] *** Quits: Kaivo (~Kaivo@170.249.39.160) (Quit: WeeChat 3.0.1)
[17:02:46] *** Joins: Kaivo (~Kaivo@user/kaivo)
[17:11:41] *** CoCoHaxPenguin is now known as \[
[17:12:07] *** \[ is now known as \}
[17:12:25] *** \} is now known as a_
[17:12:28] *** a_ is now known as Andrew
[17:13:10] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 252 seconds)
[17:16:23] *** Joins: heyTim (uid452799@id-452799.helmsley.irccloud.com)
[17:16:41] *** Joins: jespada (~jespada@90.254.245.194)
[17:16:58] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[17:17:59] *** Joins: flynn (~mcbloch@user/flynn)
[17:21:55] *** Joins: sevenever_web (~sevenever@101.224.148.180)
[17:21:58] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[17:25:09] *** Joins: lalitmee__ (~lalitmee@180.94.32.251)
[17:27:10] *** Quits: lalitmee_ (~lalitmee@180.94.32.110) (Ping timeout: 240 seconds)
[17:31:30] *** Joins: src (~src@user/src)
[17:47:15] *** Joins: bleloch (bleloch@gateway/vpn/protonvpn/bleloch)
[17:48:15] *** Joins: llorllale (~llorllale@97.108.193.189)
[17:50:35] <someuser> hello, i have a struct with several tags, something like `json:"name" xml:"Name"`. what is the easiest way using reflect to retrieve a string slice with the keys names ?
[17:50:57] *** Quits: gggpkm_ (~gggpkm@60.10.194.45) (Ping timeout: 245 seconds)
[17:52:15] *** Joins: klaas (~klaas@simply.kla.as)
[17:52:45] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[17:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[17:55:02] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:55:54] <someuser> okay so maybe if i got a string with the name `json:"myname"` best way using Trim methods in strings to just end up with "json" ?
[17:56:08] <someuser> i did it using find index of : and slice
[17:57:54] <A_Dragon> you're inspecting struct tags? to be clear
[18:01:21] <Compy> yeah, I'm a bit confused as well
[18:03:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[18:05:07] <someuser> ya
[18:05:15] <someuser> i am inspecting struct tags indeed
[18:09:27] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:12:02] *** Joins: cskr (~cskr@49.207.194.98)
[18:16:20] <A_Dragon> someuser: theres a thing in reflect for it
[18:16:23] <A_Dragon> and sorry got distracted
[18:17:27] <A_Dragon> oh just for getting it that way
[18:17:46] <A_Dragon> I'd do either a regex if Im lazy or split() on spaces and then split on : for each
[18:17:57] <A_Dragon> but that doesnt keep you safe from malformed data
[18:24:04] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Ping timeout: 252 seconds)
[18:24:55] *** Joins: ajbot (~komanda@66.161.230.152)
[18:24:57] *** Quits: ajbot (~komanda@66.161.230.152) (Read error: Connection reset by peer)
[18:28:07] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[18:28:38] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[18:30:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[18:32:53] *** Joins: fikran (~fikran@user/fikran)
[18:42:44] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:44:57] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[18:45:07] <mikoto-chan> https://a.cockfile.com/oLboVL.go
[18:46:07] <mikoto-chan> I'm trying to read from a CSV file, multiply all the values by 1.25 and then write all the files to a new folder
[18:47:01] <mikoto-chan> problem is that for some reason it kept appending the old values to the new ones as well
[18:50:05] <A_Dragon> what is the output you get vs the output you expect
[18:53:49] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 252 seconds)
[18:56:15] <mikoto-chan> A_Dragon: I think WriteAll is where I went wrong
[18:56:46] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:57:10] <A_Dragon> that may do it
[18:57:15] *** Joins: c10l (~c10l@89.34.167.207)
[18:57:38] <someuser> thanks A_Dragon  :)
[18:58:04] <A_Dragon> someuser: no problem, slightly annoying that you cant list them
[18:58:18] <A_Dragon> but I guess given that they're intended to be opaque other than to explicit users it makes sense
[18:59:21] <mikoto-chan> A_Dragon: I want to read the CSV files, multiply every value by 1.25 and write them to a new directory with the same filename
[18:59:38] <someuser> I'm still little confused why doing .Interface() in reflect package returns me an interface value and then i need to cast them. I would say i glued it this way in mind, like whenever i want to get the values, i do something like
[18:59:39] <someuser> https://i.imgur.com/HiZbbNv.png
[18:59:47] <A_Dragon> mikoto-chan: you didnt answer my question
[19:00:02] <someuser> ya slightly annoying but it's not that hard to be done i agree
[19:00:11] <A_Dragon> someuser: reflect operates on its own magic, getting stuff in and out is via interface{}
[19:00:23] <A_Dragon> just a part of its API
[19:01:22] <someuser> ah makes sense, it's a handy module indeed, just getting kinda used to it right now hehe
[19:01:45] <someuser> it says in the rules of reflection running .Interface() on an reflection object will return you the interface value
[19:02:02] *** Joins: gggp (~textual@60.10.194.45)
[19:02:28] <someuser> but for my head, the interpretation of interface value confuses me a little, even after me learning about the whole dynamic type and concrete values and how empty interfaces and interface variables work
[19:03:49] *** Quits: cskr (~cskr@49.207.194.98) (Quit: Leaving)
[19:04:46] *** Joins: independent56 (~independe@51.158.144.32)
[19:05:23] *** Joins: andlabs (~andlabs@70.107.171.168)
[19:07:20] <A_Dragon> okay lets put one thing out
[19:07:25] <A_Dragon> go is not dynamically typed
[19:07:25] <A_Dragon> ever
[19:07:35] <A_Dragon> a value within an interface{} remains that type
[19:07:47] <A_Dragon> but a variable of type interface{} is of type interface{}
[19:07:49] <A_Dragon> no more, no less
[19:08:08] <A_Dragon> interfaces themselves, internally, store what type the value is, and a pointer to the actual data
[19:08:14] <A_Dragon> get the type wrong in an assert, bang
[19:08:27] *** Quits: gggp (~textual@60.10.194.45) (Ping timeout: 245 seconds)
[19:08:31] <A_Dragon> but its not dynamic, its just that every type satisfies an empty interface (ie, interface{})
[19:09:10] <A_Dragon> .Interface() is essentially "okay this Value is lovely, but I'd like to work with it back in go-land please"
[19:19:55] <someuser> haha that's a nice way of explaining it :) ty
[19:20:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:31:36] <someuser> this is simple go playground i was testing on https://play.golang.org/p/GBT1EE_7Bzh
[19:32:19] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[19:32:20] <someuser> how do i get the static type of x printed? if that's possible
[19:32:32] <someuser> to see it says interface{} maybe or something
[19:33:46] <A_Dragon> the type is a given based on your code
[19:33:58] <A_Dragon> fmt will drill down though interface{} instances to the reall data
[19:34:36] <someuser> got it
[19:34:43] <A_Dragon> s/all/al/
[19:35:04] <A_Dragon> its an interface{} because thats what type the variable is, but interfaces in general are finniky with fmt.Print
[19:35:18] <A_Dragon> interfaces just describe a list of methods to implement
[19:35:36] <someuser> coming from a daily used dynamic typing language as python, golang can be little tricky, not the trickiest, its simple but not very simple either lol
[19:35:50] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[19:36:06] <A_Dragon> coming from python, pretend interface{} doesnt exist
[19:36:07] <A_Dragon> in general
[19:36:22] <someuser> yup, just whenever i try to check docs and i see it a lot of times
[19:36:30] <A_Dragon> if you try and run everything though interface{} you'll have a bad time
[19:36:33] <A_Dragon> which docs?
[19:36:54] <A_Dragon> for reflect? yes because reflect is the "I dont like the type system, make it go away" nuclear bomb
[19:36:58] <someuser> i had to wrap my head about how it works, as an empty empty box and you can store whatever value in it as every type already satsfies obviously an interface with no methods :D
[19:37:14] <A_Dragon> correct
[19:37:23] <A_Dragon> in other languages you could (kind of) call this boxing
[19:38:03] <someuser> that's a good way to think of it indeed
[19:38:14] <A_Dragon> but note that this is the special case of interfaces
[19:38:23] <someuser> i did see lots of times [][]byte, but so far while I'm learning, I haven't seen this yet
[19:38:27] <A_Dragon> 90% of the time you use them without even thinking
[19:38:34] <someuser> is this a special type or something?
[19:38:35] <A_Dragon> eg io.Reader
[19:38:45] <someuser> true true! saw this one a lot
[19:38:48] <A_Dragon> have you read the go playground?
[19:38:52] <A_Dragon> sorry, tour
[19:38:54] <A_Dragon> not playground
[19:38:55] <someuser> part of it not totally yet
[19:39:04] <A_Dragon> I suggest going though it all from start to finish
[19:39:08] <A_Dragon> it clears up a LOT of questions
[19:39:47] <A_Dragon> you could think of interfaces (NOT interface{}. but ones like io.Reader/Writer/ReadWriter) as a python ABC
[19:40:26] <A_Dragon> you must implement either Read() ([]byte, err), Write([]byte) (int, err), or both to satisfy each
[19:40:46] <A_Dragon> if you've written java, they're very similar to java interfaces except that theres no `implements` keyword
[19:40:53] <someuser> ya the idea of interfaces itself i got that one, it was empty interface and the explicit type checking and casting that confuses me
[19:41:05] <someuser> i know by now how interfaces are implicit in go and so on
[19:41:11] <A_Dragon> `someInterface.(int)` isnt a cast
[19:41:18] <someuser> isn't it ?
[19:41:21] <someuser> sec
[19:41:28] <A_Dragon> its a type assertion, it says "this is an x, if Im wrong, go bang"
[19:41:45] <A_Dragon> nope no cast, not in the way you're thinking
[19:41:59] <A_Dragon> yes it returns the type you asked for, but only if the content of the interface was that type already
[19:42:04] <A_Dragon> it wont convert types
[19:42:08] <someuser> https://i.imgur.com/HvOpzhT.png
[19:42:12] <someuser> https://medium.com/capital-one-tech/learning-to-use-go-reflection-822a0aed74b7
[19:42:17] <A_Dragon> eg if you want to cast a float to an int, you use int(someFloat)
[19:42:26] <someuser> i used this term from this guy, i was used to call it type assertion too
[19:42:33] <A_Dragon> and even thats not quite casting either
[19:42:34] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[19:42:42] <someuser> true true
[19:42:48] <A_Dragon> cast is the wrong word
[19:42:56] <someuser> its type conversion the one you just described right?
[19:42:59] <A_Dragon> that person is using the wrong word. it is a type assertion
[19:42:59] <someuser> the last one
[19:43:04] <someuser> indeed i agree
[19:43:04] <A_Dragon> its not a type conversion either
[19:43:12] <A_Dragon> its a specific to go concept
[19:43:15] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[19:43:31] <A_Dragon> it *behaves* like a cast or type conversion in some ways, but it is not one
[19:43:45] <A_Dragon> if I stick a float in an interface{} and try to assert it to an int, the code panics at runtime
[19:44:15] <someuser> that is enough to not call it type conversion indeed
[19:44:21] <greatgatsby> so like `isinstance(foo, int)` in python?
[19:44:31] <someuser> ya that is False
[19:44:36] <someuser> "foo"
[19:44:58] <A_Dragon> greatgatsby: in that example a type coversion of foo.(int) is eqiv to `if not isinstance(foo, int): raise RuntimeException()`
[19:45:12] <greatgatsby> A_Dragon, thanks, makes perfect sense
[19:45:19] <A_Dragon> if you want something akin to `isinstance`, you can use the second form of a type assertion
[19:45:40] <someuser> what is the second form ?
[19:45:44] <A_Dragon> which is `x, ok := foo.(int)`, in which case if foo is NOT an int, ok is false and x is the zero value of an int, which is 0
[19:45:57] <someuser> oh and it wouldn't panic
[19:46:00] <someuser> i saw that one indeed
[19:46:01] <A_Dragon> mhmm
[19:48:57] <someuser> i also saw this a lot and i got used to it by now var _ I = (*T)(nil) where I is the interface and T is the type we trying to check if it implements the I or not
[19:49:26] <A_Dragon> that, would be a cast
[19:49:48] <A_Dragon> _ of type I is equal to a pointer to type T, that pointer happens to be nil but thats fine
[19:50:09] <A_Dragon> sorry I use both cast and type conversion as the same word
[19:50:09] *** Joins: anon__ (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[19:50:17] <A_Dragon> they're... close enough in go that it doesnt matter
[19:50:26] <A_Dragon> in C they are very different
[19:50:27] <someuser> indeed
[19:50:36] <someuser> oh very bad c guy here lol
[19:50:51] <A_Dragon> oh Im very bad at C
[19:50:58] <A_Dragon> enough to make bad mistakes
[19:51:29] <someuser> hehe i see, same and worse here probably xD
[19:51:34] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 252 seconds)
[19:51:42] <someuser> i was learning c and probably will do at one point, like complete learning it
[19:51:59] <someuser> thankfully i knew more about pointers from c so it wasn't a very big issue to encounter it in go
[19:52:05] <someuser> python doesn't use pointers at all
[19:53:03] <A_Dragon> python is generally pass by refernce
[19:53:11] <A_Dragon> thus everything in python is always a pointer
[19:53:14] <A_Dragon> if you want to think that way
[19:53:50] <someuser> nice, while go is always pass by value, so everything is made a copy of, right?
[19:54:14] <A_Dragon> think of it this way, any time you pass something to a function, it is *always* copied
[19:54:16] <A_Dragon> no matter what
[19:54:29] <A_Dragon> it just so happens that when you copy a pointer, the data is the same on the other end
[19:54:49] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[19:54:51] <A_Dragon> same happens if you pass a struct (not a pointer to a struct, just a plain old struct), which includes pointers within it
[19:55:08] <A_Dragon> all the values are copied, but the ones that are pointers still point to the same data even after being copied
[19:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[19:55:22] <A_Dragon> this is why slices, for example, appear to always be passed by reference
[19:55:32] <A_Dragon> because slices are basically a struct with a pointer in them
[19:58:01] <someuser> nice, iirc, slices if passed just as they are not a pointer to them, and we modify them, if i remember correctly the slice variable gets modified, while structs don't
[19:58:24] <seebs> Slices do not "appear to be passed by reference". Slices are values that contain a reference, but the slice is clearly passed by value.
[19:58:49] <A_Dragon> well the struct is modified inside the function you passed it to, but its just the copy
[19:58:53] <A_Dragon> seebs: yes thats what I said :P
[19:59:04] <A_Dragon> the slice is modified because it contains a reference to the original data
[19:59:12] <seebs> I'm disagreeing with "appear to always be passed by reference".
[19:59:39] <seebs> It doesn't appear to be passed by reference, to me, because if it were, calling a function that appends to a slice would result in the slice you passed it being appended.
[20:01:22] *** Quits: Jad (~Nashmi@user/jad) (Ping timeout: 245 seconds)
[20:01:40] *** Joins: jnml (~jnml@ipservice-092-217-240-247.092.217.pools.vodafone-ip.de)
[20:01:53] *** Parts: jnml (~jnml@ipservice-092-217-240-247.092.217.pools.vodafone-ip.de) ()
[20:02:03] *** Joins: jnml (~jnml@ipservice-092-217-240-247.092.217.pools.vodafone-ip.de)
[20:04:49] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[20:16:03] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:17:25] *** Joins: independent_ (~independe@51.158.144.32)
[20:17:55] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:18:04] <someuser> a newbie go playground https://play.golang.org/p/-F2K8iN14oK
[20:18:30] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[20:19:25] <A_Dragon> seebs: thats a fun edgecase
[20:19:27] *** Quits: independent56 (~independe@51.158.144.32) (Read error: Connection reset by peer)
[20:19:39] <A_Dragon> well "edge" case
[20:21:21] *** Joins: andlabs (~andlabs@70.107.171.168)
[20:22:04] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[20:24:29] *** Joins: halprin (~halprin@45-16-213-131.lightspeed.elpstx.sbcglobal.net)
[20:30:17] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:35:10] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[20:35:20] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[20:40:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:42:13] *** Joins: fikran (~fikran@user/fikran)
[20:44:31] *** Quits: independent_ (~independe@51.158.144.32) (Read error: Connection reset by peer)
[20:44:54] *** Joins: independent_ (~independe@51.158.144.32)
[20:45:32] *** Joins: moog (~moog@mobile-107-107-188-84.mycingular.net)
[20:47:02] *** Joins: endigma (~endigma@134.41.124.82)
[20:52:15] *** Quits: independent_ (~independe@51.158.144.32) (Read error: Connection reset by peer)
[20:52:49] *** Joins: independent_ (~independe@51.158.144.32)
[20:54:07] *** Joins: lalitmee_ (~lalitmee@180.94.33.132)
[20:54:27] *** Joins: pi1 (~pi@177.223.162.41)
[20:56:28] *** Quits: lalitmee__ (~lalitmee@180.94.32.251) (Ping timeout: 252 seconds)
[21:06:44] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[21:07:08] *** Joins: Jigsy (~Jigsy@user/jigsy)
[21:08:51] *** Joins: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net)
[21:09:03] *** Quits: gettogeek (~user@c-67-171-188-88.hsd1.or.comcast.net) (Remote host closed the connection)
[21:09:10] *** Joins: noteness (noteness@user/noteness)
[21:11:20] *** Joins: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net)
[21:11:20] *** Quits: torin_ (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[21:15:26] *** Joins: mrig (~mrig@user/mrig)
[21:18:55] *** Joins: LiftLeft (~LiftLeft@172.98.92.79)
[21:21:22] *** Joins: independent__ (~independe@51.158.144.32)
[21:21:37] *** Quits: independent_ (~independe@51.158.144.32) (Read error: Connection reset by peer)
[21:40:58] *** Quits: lalitmee_ (~lalitmee@180.94.33.132) (Ping timeout: 240 seconds)
[21:45:43] *** Joins: jpw (~jpw@user/jpw)
[21:46:47] *** Quits: nevivurn (~nevivurn@user/nevivurn) (Quit: Goodbye~)
[21:47:28] *** Quits: toretto (~ryan@user/toretto) (Ping timeout: 256 seconds)
[21:47:43] *** Joins: toretto (~ryan@45.15.16.60)
[21:47:53] *** Quits: toretto (~ryan@45.15.16.60) (Client Quit)
[21:48:11] *** Joins: toretto (~ryan@user/toretto)
[21:50:52] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 256 seconds)
[21:53:49] *** Joins: khrbt (~znc@user/khrbt)
[21:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[21:55:18] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[22:01:17] *** Joins: pepee (~user@user/pepee)
[22:09:49] *** Joins: independent56 (~independe@51.158.144.32)
[22:11:49] *** Quits: independent__ (~independe@51.158.144.32) (Ping timeout: 252 seconds)
[22:23:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[22:27:17] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 252 seconds)
[22:29:45] *** Quits: independent56 (~independe@51.158.144.32) (Read error: Connection reset by peer)
[22:35:05] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[22:35:18] *** Joins: pepee (~user@user/pepee)
[22:36:38] *** Joins: independent56 (~independe@95.144.68.39)
[22:37:37] *** Joins: Guest82 (~textual@ool-4579fedc.dyn.optonline.net)
[22:38:12] *** Quits: Guest82 (~textual@ool-4579fedc.dyn.optonline.net) (Client Quit)
[22:49:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:51:35] *** Joins: fikran (~fikran@user/fikran)
[22:59:23] *** Quits: sevenever_web (~sevenever@101.224.148.180) (Ping timeout: 256 seconds)
[22:59:31] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:00:14] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[23:01:25] *** Joins: oxum (~oxum@106.203.195.217)
[23:05:22] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:06:12] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 250 seconds)
[23:10:17] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-71b7-bdff-34f7-41d7.inf6.spectrum.com)
[23:12:17] *** Joins: Guest66 (~textual@2601:586:c180:47d0:ad98:e3f9:ca65:9bfb)
[23:13:02] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7) (Ping timeout: 256 seconds)
[23:19:56] *** Quits: thinkofher (~thinkofhe@user/thinkofher) (Excess Flood)
[23:20:13] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[23:24:25] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[23:25:15] *** Joins: khrbt (~znc@user/khrbt)
[23:28:32] *** Joins: khrbt_ (~znc@user/khrbt)
[23:28:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:29:55] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[23:31:04] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[23:33:00] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[23:35:30] *** Joins: cptaffe (~connor@2600:1700:f08:1110:c843:5621:bfb6:7631)
[23:40:13] *** Joins: anotheruser (~user@45.130.83.54)
[23:43:40] *** Quits: someuser (~user@41.239.243.83) (Ping timeout: 240 seconds)
[23:50:07] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 245 seconds)
[23:50:49] *** Quits: khrbt_ (~znc@user/khrbt) (Ping timeout: 252 seconds)
