[00:01:10] <Dean> constxd: what is wdt?
[00:01:22] <Dean> caze: ok i will inspect it further
[00:02:05] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:bd92:f30c:7395:6f90) (Read error: Connection reset by peer)
[00:02:28] <constxd> Weiss distribution technique
[00:03:32] <caze> constxd: What is pilled?
[00:03:45] *** Joins: freakazoid333 (~matt@2603-9000-cf03-86c3-dcba-088f-f497-9b47.inf6.spectrum.com)
[00:04:13] *** Quits: Waynes (~Waynes@user/waynes) (Quit: Leaving.)
[00:04:45] <constxd> to be X-pilled to is to believe in the utility of X
[00:05:08] <constxd> or superiority of X, depending upon context
[00:06:12] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[00:06:20] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[00:06:24] <caze> Dean: Yes, but you might not notice a difference if everything else is subpar.
[00:06:43] *** Joins: bindu (~bindu@user/bindu)
[00:07:43] <caze> WDT can't fix a bad grinder or bad puck prep.
[00:07:55] <caze> constxd: ^
[00:08:40] *** Quits: noteness (~noteness@user/noteness) (Remote host closed the connection)
[00:09:00] *** Joins: noteness (~noteness@user/noteness)
[00:09:56] <constxd> i have a eureka silenzio and a wdt tool but unfortunately i'm also retarded
[00:10:10] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[00:10:39] <caze> What style of WDT?
[00:15:05] *** Joins: magla (~gelignite@d5367992.access.ecotel.net)
[00:15:10] <constxd> looks like this https://media.prusaprinters.org/media/prints/105123/images/1052122_804727c8-fc46-4bdd-bb70-b1907e003248/thumbs/cover/640x480/jpeg/large_display_wdt_105123.webp
[00:19:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[00:22:16] *** Quits: KevinX (~KevinX@user/KevinX) (Read error: Connection reset by peer)
[00:23:31] *** Joins: KevinX (~KevinX@user/KevinX)
[00:24:12] <caze> Yeah that should be fine. Do you have a bottomless pf?
[00:24:37] <constxd> yes
[00:24:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[00:24:47] <constxd> most of my shots spray all over the place
[00:24:49] <constxd> lmao
[00:26:38] <Dean> caze: do you have any pointers for me on what to research to solve this?
[00:26:46] <Dean> if I bang my head any harder i might get taken away
[00:27:31] <Dean> do i need to use dynamic memory allocation to build up a string?
[00:27:43] <caze> Dean: Did you look at the starting code I gave you?
[00:27:46] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[00:27:47] <Dean> yes
[00:27:50] <caze> Dean: Do you understand how it works?
[00:28:13] <Dean> you take one character at a time with the getchar. and you print that single character back with putchar.
[00:28:20] <Dean> so while you are receiving characters
[00:28:25] <Dean> you are printing them
[00:28:32] <caze> Dean: What is the longest line that this program can echo back?
[00:28:37] <Dean> so it can't overflow because it's only one character at a time
[00:28:46] <Dean> until it gets to eof
[00:29:14] <caze> Dean: Okay. So conceptually, your program wants to work the same way for lines that are longer than 80 lines, correct?
[00:29:30] <caze> 80 characters
[00:29:45] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[00:29:53] <Dean> yeah. so i must build up the input somehow so i don't print out an input that is below 80 characters?
[00:30:50] <caze> Dean: Yes. You need a way to "catch" short lines. The problem is, you don't know if a line is short or not until you see the '\n'. Correct?
[00:31:01] <Dean> yes
[00:31:04] <Dean> so when enter is pressed
[00:31:07] <caze> Dean: Actually, no.
[00:31:17] *** Quits: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:31:17] <Dean> *mind blown*
[00:31:24] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[00:31:36] <Dean> i dont understand this problem
[00:31:42] <caze> Dean: When you see the 81st character, you already know that the line needs to be printed. You don't have to wait for the '\n'.
[00:31:56] <Dean> what
[00:32:10] <Dean> i thought it should print it when it's any length longer than 80?
[00:32:17] <Dean> so it must only print when it hits 81 every time?
[00:32:37] *** Joins: Elladan (~elladan@user/elladan)
[00:33:06] <caze> Dean: No, but once it is 81 characters, it doesn't matter if it end up being 82 or 100 or 1000. It needs to be printed.
[00:33:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:33:39] <caze> Dean: You don't care how many characters it has, as long as it's 80 or more.
[00:34:05] <caze> Or 80. I forget how it's phrased, exactly.
[00:34:08] <caze> ,kr1-17
[00:34:08] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-17. Write a program to print all input lines that are longer than 80 characters.
[00:34:11] *** Joins: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com)
[00:34:13] <caze> Yeah, 81.
[00:34:31] <Dean> but this makes no sense to me. you will still be busy typing and it will start printing?
[00:34:46] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[00:35:10] <caze> Dean: Sure. This is how streams work.
[00:35:36] <caze> Dean: You might not see it yet, because your terminal is buffering input, but your program does not know or care about that.
[00:35:54] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[00:36:12] <caze> Dean: It's probably better to think of input as a file, for now.
[00:36:53] *** Joins: bnchs___ (~bnchs@160.177.197.90)
[00:37:06] <bnchs___> ok (c)hads heres a tough question
[00:37:20] <bnchs___> how do you parse a ip address (with inet) from a non-null terminated string
[00:37:24] <bnchs___> without allocating a new string
[00:37:30] *** Joins: King_jul1an (~King_juli@41.1.92.54)
[00:37:39] <bnchs___> without modifying the input string
[00:38:14] <caze> Use a pair of char pointers for each octet.
[00:39:23] <Dean> caze: ah ok, this will take some time for me to complete then. working with FILE. thank you.
[00:39:38] <bnchs___> caze, elaborate
[00:40:13] <caze> Dean: No, don't do that.
[00:40:24] <caze> Dean: Just pretend conceptually, as if it's a file.
[00:40:42] <constxd> bnchs___: so you know the length of the string
[00:40:48] <bnchs___> yes
[00:40:50] <caze> Dean: Like if you did from shell: ./a.out < input.txt
[00:43:11] *** Quits: King_jul1an (~King_juli@41.1.92.54) (Quit: Lost terminal)
[00:43:34] *** Joins: King_jul1an (~King_juli@41.1.92.54)
[00:44:29] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 256 seconds)
[00:47:31] <constxd> ,cc char addr[] = "12.244.5.66"; int n = sizeof addr - 1; int last = addr[n - 2] == '.' ? 1 : addr[n - 3] == '.' ? 2 : 3; char fmt[16]; sprintf(fmt, "%%d.%%d.%%d.%%%dd", last); int parts[4]; sscanf(addr, fmt, parts, parts + 1, parts + 2, parts + 3); print(parts);
[00:47:33] <candide> constxd:  parts = {12, 244, 5, 66}
[00:47:42] <constxd> bnchs___: ^
[00:47:44] <constxd> based
[00:47:51] <twkm> ewww.
[00:48:19] <rcf> Doing filthy things requires filthy code
[00:48:23] <constxd> ok let's see paul allen's (twkm's) version
[00:48:32] <bnchs___> ,cc char addr[] = "255.255.255.255"; int n = sizeof addr - 1; int last = addr[n - 2] == '.' ? 1 : addr[n - 3] == '.' ? 2 : 3; char fmt[16]; sprintf(fmt, "%%d.%%d.%%d.%%%dd", last); int parts[4]; sscanf(addr, fmt, parts, parts + 1, parts + 2, parts + 3); print(parts)
[00:48:34] <candide> bnchs___:  parts = {255, 255, 255, 255}
[00:48:42] <bnchs___> ok that works
[00:48:54] <bnchs___> well my IPv4 parser doesn't use sprintf or sscanf
[00:49:21] <rcf> That doesn't meet the original requirements though
[00:49:25] <rcf> As it allocates a new string
[00:49:39] <bnchs___> ipv4 is too easy
[00:49:44] <bnchs___> i'm saying ipv6
[00:49:56] <constxd> that should be easy enough to modify for ipv6
[00:50:12] <rcf> Not really
[00:50:15] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:50:15] <constxd> also yeah it does use some auxilliary storage for the format string but that can be reused
[00:50:18] <rcf> At least not if you care about compliance.
[00:50:59] <rcf> At that point you might as well just use the auxiliary storage for the address and gain access to sane functions.
[00:51:04] <constxd> are we supposed to validate the address or just find the parts given a known-to-be-valid one?
[00:51:36] <rcf> If you're writing network software without validating everything you are literally Satan.
[00:52:06] <bnchs___> well you have to
[00:52:09] <fizzie> All this conversation is doing is to inarguably demonstrating why the language should have introduced a `snscanf` function to be orthogonal with the *printf family.
[00:52:33] <bnchs___> plain ipv6 is kinda easy
[00:52:44] <bnchs___> but ipv6 with compression (like ::1) is gonna be hard
[00:53:25] <rcf> Any system with ipv6 should be using getaddrinfo() unless there's a very damn good reason not to.
[00:53:50] <bnchs___> "non-null terminated buffer"
[00:53:56] <bnchs___> "can't allocate a string"
[00:54:01] <caze> bnchs___: https://ideone.com/SgtNdJ
[00:54:03] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:54:25] <rcf> Why on earth did you allocate a buffer that is too small to begin with?
[00:55:04] <bnchs___> lets just say
[00:55:15] *** Quits: nuh^ (~nuh@50.232.121.75) (Remote host closed the connection)
[00:55:18] <bnchs___> duplicating a string is too much memory wasted
[00:56:13] <bnchs___> caze: that code assumes that the ip will always be "xxx.xx.xxx.x"
[00:56:19] <bnchs___> and not some other length
[00:56:27] <bnchs___> but still good job
[00:57:08] <caze> bnchs___: That's just the data format for storing the parsed address.
[00:57:37] <bnchs___> yes
[00:57:53] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:57:54] <caze> bnchs___: The actual parser will fill it in.
[00:57:54] <bnchs___> but the code will fall apart if the ip address is not "xxx.xx.xxx.x"
[00:57:57] *** Joins: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de)
[00:58:04] <bnchs___> oh
[00:58:16] <rcf> bnchs___: In any case, for compressed IPv6 you will have a null terminator, so you can use the usual functions in that special case.
[00:58:56] <bnchs___> rcf: well ok
[00:58:58] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[00:59:10] <rcf> For the full address, just extend what you're doing for IPv4.
[00:59:15] <bnchs___> maybe i can modify the input once
[00:59:16] <fizzie> ,cc char *s = "128.64.243.12345"; size_t len = 12; FILE *f = fmemopen(s, len, "r"); int a1, a2, a3, a4; fscanf(f, "%d.%d.%d.%d", &a1, &a2, &a3, &a4); fclose(f); printf("[%d %d %d %d]", a1, a2, a3, a4); // ssh, ignore the allocation of a FILE object just to avoid making a copy of a string
[00:59:18] <candide> fizzie: [128 64 243 1]
[00:59:22] <bnchs___> and then change back the character
[00:59:24] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[01:00:03] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958)
[01:00:39] <caze> bnchs___: How do you know when you've reached the end of the last octet?
[01:01:01] <bnchs___> when the while loop finishes
[01:01:50] *** Joins: brad_mssw (~bhouse@169.130.230.38)
[01:02:05] <bnchs___> ,cc char *s = "http://[::1]"; char *pointer = s[8]; *(pointer + 4) = '\0'; char ip6[16]; inet_pton(AF_INET6, pointer, ip6); *(pointer + 4) = ']'; print(s); print(ip6); return 0;
[01:02:06] <caze> bnchs___: When you're parsing the string.
[01:02:06] <candide> bnchs___: warning: initialization of 'char *' from 'char' makes pointer from integer without a cast [-Wint-conversion]  warning: implicit declaration of function 'inet_pton' [-Wimplicit-function-declaration]  error: 'AF_INET6' undeclared
[01:02:09] <twkm> technically they should be %i's, though some feel that's too suprising, and it fails for 127.1 or 172.16.1.
[01:02:50] <bnchs___>  ,cc #include <arpa/inet.h> char *s = "http://[::1]"; char *pointer = &s[8]; *(pointer + 4) = '\0'; char ip6[16]; inet_pton(AF_INET6, pointer, ip6); *(pointer + 4) = ']'; print(s); print(ip6); return 0;
[01:02:51] <candide> bnchs___: illegal backslash escape sequence in string, at character offset 18 (before "\\\x{fffd}\\\x{fffd}...") at /usr/local/bin/guest-gdb line 148, <GEN1> line 96.   [Exit 25]
[01:02:52] <caze> Fine, I'll just make it greedy.
[01:03:12] <twkm> getaddrinfo is your friend.
[01:03:21] <rcf> twkm: that would require a real string.
[01:03:32] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:03:33] <twkm> these all are.
[01:03:38] <rcf> Not the ones they're using.
[01:04:02] <bnchs___> ,cc #include <arpa/inet.h> char *s = "http://[::1]"; char *pointer = &s[8]; *(pointer + 4) = '\0'; char ip6[16]; inet_pton(AF_INET6, pointer, ip6); *(pointer + 4) = ']'; printf("%s", s); print("%.*x", 16, ip6); return 0;
[01:04:03] <candide> bnchs___: Same output.
[01:04:16] <bnchs___> i'll be pming
[01:04:31] <twkm> "128.64.243.12345" most certainly is a string.
[01:04:35] *** Joins: brad_mssw|mac (~bhouse@172.110.173.1)
[01:04:49] <rcf> The original question is about doing this for unterminated strings specifically.
[01:05:00] *** Quits: magla (~gelignite@d5367992.access.ecotel.net) (Quit: Stay safe!)
[01:05:00] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:05:13] <twkm> good luck.
[01:05:58] <rcf> In any case if the reason for this is some weird network protocol I urge you to tell UNIX-lovers to shove their love for text where it belongs and just send a binary value
[01:06:35] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[01:06:57] *** Quits: brad_mssw (~bhouse@169.130.230.38) (Ping timeout: 240 seconds)
[01:07:35] <caze> bnchs___: https://ideone.com/0UrTn4
[01:08:07] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:08:28] <fizzie> To be clear, I used in "128.64.243.12345" in the fmemopen "joke" just to demonstrate it correctly ignores the "2345" part even without a terminator.
[01:09:20] <caze> Why is that correct?
[01:10:37] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 240 seconds)
[01:11:09] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[01:11:10] <fizzie> Well, in the context of `size_t len = 12` to indicate that that first 12 characters were the bytes of interest, and everything beyond that should be ignored.
[01:11:36] <caze> oic
[01:13:05] <caze> Well anyway, it's not the parser's job to verify that the digits are valid octal values. That's a higher up job.
[01:13:21] <caze> octet values
[01:13:22] *** Joins: bnchs__ (~bnchs@105.157.27.122)
[01:14:01] <bnchs__> hello
[01:14:06] <bnchs__> testing testing 1223
[01:14:18] <caze> bnchs___: https://ideone.com/0UrTn4
[01:14:24] <bnchs__> ,cc #include <arpa/inet.h> #include <stdlib.h> #include <string.h> char *s = malloc(sizeof "http://[::1]"); strcpy(s, "http://[::1]"); char *pointer = &s[8]; *(pointer + 3) = '\0'; char ip6[16]; inet_pton(AF_INET6, pointer, ip6); *(pointer + 3) = ']'; printf("%s", s); for (int i = 0; i < 16; i++) { printf("%2x", ip6[i]); } return 0;
[01:14:25] <candide> bnchs__: http://[::1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
[01:14:45] <caze> bnchs__: ^
[01:16:04] *** Quits: bnchs___ (~bnchs@160.177.197.90) (Ping timeout: 272 seconds)
[01:16:09] <bnchs__> it replaces the ] with \0 temporarily
[01:16:16] <bnchs__> then it changes it back to ]
[01:16:21] <bnchs__> a bit of a hack but it werks
[01:16:31] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-162.cspire.com)
[01:16:31] <twkm> rcf: binary can suck too.
[01:16:32] <caze> What if it's a string literal?
[01:16:45] <bnchs__> caze: if it's a constant string
[01:16:53] <bnchs__> well ummm it will die
[01:16:56] <caze> That too.
[01:17:05] <caze> It won't even compile.
[01:17:43] <bnchs__> one of my requirements are that i can't modify the input string in any way
[01:17:47] <bnchs__> but i kinda broke that
[01:18:07] <caze> bnchs__: You don't like my idea?
[01:18:19] <bnchs__> caze: i do
[01:18:46] *** Joins: muffin_storm (~muffin_st@50-233-189-146-static.hfc.comcastbusiness.net)
[01:19:04] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:19:18] *** Joins: sweetsymph_ (uid509475@id-509475.lymington.irccloud.com)
[01:19:26] <caze> You'll have to make some modifications for ipv6.
[01:19:36] <bnchs__> i either have to duplicate the string
[01:19:50] <bnchs__> or maybe write my own ipv6 parser
[01:19:51] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:20:33] <caze> Did you see what I said? <caze> Well anyway, it's not the parser's job to verify that the digits are valid octal values. That's a higher up job.
[01:21:03] <bnchs__> well no
[01:21:16] <caze> A parser shouldn't be that hard.
[01:21:31] <bnchs__> if i only support plain ipv6
[01:21:36] <bnchs__> compressed ipv6 is gonna be hell
[01:21:42] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[01:21:51] <caze> If only there were a library.
[01:22:12] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958)
[01:22:13] <twkm> some standard parser ... somewhere.
[01:22:22] <bnchs__> if only they wrote inet_pton with a size argument
[01:22:25] <bnchs__> instead of strlen
[01:22:43] <twkm> replace a byte, then restore it.
[01:22:53] <caze> Why don't you want to copy the string?
[01:22:54] <bnchs__> twkm already tried it
[01:23:11] <bnchs__> it won't work in a constant string
[01:23:14] <bnchs__> caze, memory
[01:23:48] <caze> How big are your strings? How much memory do you have?
[01:24:24] <attaboy> caze:
[01:24:53] <bnchs__> well it's gonna be up to (sizeof "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF") if i only duplicate the ipv6 part
[01:24:59] <bnchs__> but the entire URL
[01:25:03] <caze> oh noes
[01:25:07] <bnchs__> it's gonna be up to 2 GB
[01:25:37] *** Parts: attaboy (~archer@user/tessio) (WeeChat 3.4)
[01:25:50] <sham1> If you're handling URIs that are up to 2 GiB, something is wrong
[01:25:51] *** Quits: mahmutov (~mahmutov@5.176.43.188) (Ping timeout: 256 seconds)
[01:26:04] <bnchs__> sham1, am i supposed to handle small URLs
[01:26:11] <bnchs__> this is a general-purpose program
[01:26:47] <sham1> There are so many ways of doing it
[01:26:49] <caze> Shouldn't the address be near the beginning of URL?
[01:27:17] <bnchs__> yeah
[01:27:42] <caze> I bet there's a URL parsing library somewhere that will just give you the address.
[01:28:06] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[01:28:19] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[01:29:21] <bnchs__> sham1, in reality
[01:29:32] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-162.cspire.com) (Read error: Connection reset by peer)
[01:29:37] <bnchs__> it could handle bigger URLs
[01:29:40] <bnchs__> just need more memory
[01:30:23] <caze> Maybe you could process the URL as a stream, so you don't need to keep it all in memory at once.
[01:31:28] *** Joins: bnchs___ (~bnchs@105.157.214.15)
[01:31:56] *** Joins: slidercrank (~slidercra@user/slidercrank)
[01:33:48] *** Quits: bnchs__ (~bnchs@105.157.27.122) (Ping timeout: 240 seconds)
[01:35:43] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[01:35:48] *** Quits: King_julian (~King_juli@41.1.92.54) (Ping timeout: 256 seconds)
[01:36:08] *** Joins: Guest7498 (~Guest@host202.190-137-39.telecom.net.ar)
[01:36:19] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[01:36:58] *** Quits: King_jul1an (~King_juli@41.1.92.54) (Ping timeout: 272 seconds)
[01:38:12] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[01:38:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[01:39:01] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[01:39:38] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Quit: mcleuder)
[01:40:38] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f892:3809:ac7b:1ca4) (Quit: Quit)
[01:40:44] *** Joins: danisanti (~daniel@user/danisanti)
[01:41:31] <danisanti> how can I alloc one more char into a string char* ?
[01:42:15] <danisanti> and please, an example of how to use
[01:42:26] <masoudd> how did you get that char*
[01:42:38] <danisanti> I have malloced
[01:43:00] <masoudd> realloc
[01:43:20] <danisanti> ok that is what I thought
[01:43:41] <danisanti> with realloc I am having an compiler warning. this:
[01:43:57] <danisanti> warning: ‘realloc’ called on pointer ‘number’ with nonzero offset 1 [-Wfree-nonheap-object]
[01:44:13] <fizzie> "Lo! we have malloc()ed, and we have realloc()ed, and now the time of free() draws near", isn't that what Aragorn said before dying?
[01:44:21] <masoudd> how are you calling realloc
[01:44:52] <danisanti> number = realloc(number, sizeof(number) + 1);
[01:45:12] <fizzie> `sizeof(number) + 1` is unlikely to be correct.
[01:45:52] <danisanti> fizzie: should I strlen(number) + 2 ?
[01:45:53] <fizzie> Because `sizeof` doesn't return the size that's been allocated; it returns the size of a type, in that case the size of a pointer.
[01:46:03] <masoudd> ,cc char *number = malloc(42); size_t s = sizeof(number);
[01:46:05] <candide> masoudd: no output: number = 0x41f1a0 ""; s = 8
[01:46:10] <caze> danisanti: When you did the first malloc, how did you determine the size to allocate?
[01:46:35] <fizzie> `strlen(number) + 2` could be correct, but you might also just want to keep a `size_t size;` on the side.
[01:46:37] <danisanti> caze: from strlen()
[01:47:10] <fizzie> Also, the error message made it sound very much as if you had a call like `realloc(number + 1, ...)` in there.
[01:47:35] <twkm> ewww, strlen on a fresh allocation.
[01:47:54] <danisanti> so
[01:48:14] <fizzie> ,cc char *number = malloc(10); number = realloc(number + 1, 20); // invalid, but gives that error message
[01:48:16] <candide> fizzie: [warning: 'realloc' called on pointer 'number' with nonzero offset 1 [-Wfree-nonheap-object]  note: returned from 'malloc'] realloc(): invalid pointer   Program received signal SIGABRT, Aborted in __pthread_kill_implementation () called by main (argc=1, argv=0x7fffffffe428) at statement: number = realloc(number + 1, 20);
[01:48:50] <masoudd> is number really pointing to the same place that malloc returned? or have you done a number++; somewhere?
[01:49:19] <danisanti> I changed sizeof(number) + 1 to strlen(number) + 2 and I still get the same warning message: warning: ‘realloc’ called on pointer ‘number’ with nonzero offset 1 [-Wfree-nonheap-object]
[01:49:39] <masoudd> yep number is not what you got from malloc
[01:49:41] <twkm> realloc needs the origial pointer value returned by malloc.
[01:49:48] <caze> danisanti: What you changed is not a pointer, and the warning is about a pointer.
[01:51:35] <danisanti> twkm: that might be it
[01:51:53] <fizzie> ,cc char *number = malloc(10); number++; number = realloc(number, 20); // yeah, it looks like GCC will track things like that and give the same warning
[01:51:55] <candide> fizzie: [warning: 'realloc' called on pointer 'number' with nonzero offset 1 [-Wfree-nonheap-object]  note: returned from 'malloc'] realloc(): invalid pointer   Program received signal SIGABRT, Aborted in __pthread_kill_implementation () called by main (argc=1, argv=0x7fffffffe428) at statement: number = realloc(number, 20);
[01:52:11] <danisanti> I have created another pointer pointing to the same place, and I have used it
[01:52:24] <danisanti> am using it
[01:52:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:53:06] <twkm> ... original = working = malloc(42); ... working++ ... temp = realloc(original, n); /* check temp */ original = temp; ...
[01:54:02] <fizzie> (And with something like that, don't try to continue using `working` after the realloc without re-deriving it from `original`.)
[01:54:07] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:57:02] *** Quits: phryk (~totallyno@user/phryk) (Quit: ZNC 1.8.2 - https://znc.in)
[01:58:39] *** Joins: phryk (~totallyno@user/phryk)
[02:00:06] *** Joins: cyberban` (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8)
[02:00:38] *** Joins: hashfunce9c (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:01:20] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[02:02:14] *** Quits: cyberban` (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8) (Remote host closed the connection)
[02:02:49] <danisanti> i still am with the same warning. I am using the realloc on a function and passing to the function the pointer var of malloc. I have the done tmp = realloc(number, strlen(number) + 2)
[02:04:03] <fizzie> How about sharing a little bit more code? Because if `number` is really the original pointer from malloc, you've done something to confuse GCC of that.
[02:04:25] *** Joins: seninha (~chatzilla@user/seninha)
[02:04:30] <danisanti> ok. I am gonna share the code
[02:06:06] <twkm> it was almost certainly changed.
[02:06:28] <danisanti> here is the code (numericx.c) https://termbin.com/dioc . here is the Makefile https://termbin.com/9mzc
[02:07:07] <danisanti> I am working on the increment_number_string()
[02:07:42] <danisanti> and I don't use gcc but c99 compiler
[02:07:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:08:16] <twkm> argv[1] is not something you can reallocate.
[02:08:17] <fizzie> When you call recursively `increment_number_string(number + 1, ...)` on line... oh, no line numbers. But anyway, inside that call the pointer `number` is no longer the original pointer from `malloc`.
[02:09:01] <danisanti> twkm: thanks
[02:09:09] <danisanti> fizzie: thanks
[02:09:23] <danisanti> I will malloc
[02:09:48] <danisanti> should malloc fix it?
[02:10:00] <danisanti> then strcpy
[02:10:13] <twkm> it provides what realloc wants.
[02:10:33] <danisanti> ok
[02:13:42] *** Quits: kektagen (~kektagen@kektagen.org) (Quit: Heading off - Have a good day)
[02:14:01] *** Joins: kektagen (~kektagen@173.211.12.62)
[02:15:37] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[02:17:44] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:20:32] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[02:21:37] *** Quits: kektagen (~kektagen@173.211.12.62) (Remote host closed the connection)
[02:22:56] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:23:30] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:24:37] *** Quits: adip (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[02:24:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[02:25:05] *** Quits: danisanti (~daniel@user/danisanti) (Remote host closed the connection)
[02:25:06] *** Quits: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:29:02] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958) (Ping timeout: 240 seconds)
[02:29:53] *** Quits: hashfunce9c (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[02:31:34] *** Joins: kektagen (~kektagen@kektagen.org)
[02:32:45] *** Quits: pizdets (~pizdets@183.182.110.6) (Ping timeout: 252 seconds)
[02:33:44] *** Joins: fejj (~pitfall@pool-72-94-35-232.phlapa.fios.verizon.net)
[02:33:58] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:34:01] *** Joins: pizdets (~pizdets@183.182.114.253)
[02:34:40] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-162.cspire.com)
[02:38:23] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:38:46] *** Quits: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[02:39:40] <fejj> anyone bored and willing to test a little program I wrote? https://gist.github.com/jstedfast/fbce0821c34ad5b3f19e767683528f4a will also need https://github.com/jstedfast/gmime/blob/master/zentimer.h
[02:39:52] <fejj> the gist is the c source file
[02:40:33] <fejj> I'm trying to get info on how my new base64 encoder/decoder compare to my old base64 encoder/decoder
[02:41:01] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[02:41:21] *** Quits: ekathva_ (~ekathva@n14jp5os0e43ev9my-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[02:41:23] *** Joins: cebor (~cebor@user/cebor)
[02:42:17] <fejj> so far I've only tested it on Mac M1 hardware, but hoping someone on Linux x64 or something  can test it
[02:42:40] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[02:43:13] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[02:43:40] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[02:43:41] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-162.cspire.com) (Read error: Connection reset by peer)
[02:44:58] *** Quits: LuKaRo (~LuKaRo@p57b157e5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:45:50] *** Quits: cebor (~cebor@user/cebor) (Client Quit)
[02:46:04] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[02:46:29] *** Joins: cebor (~cebor@user/cebor)
[02:46:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[02:46:31] *** Joins: ferdna (~ferdna@user/ferdna)
[02:46:37] *** Joins: LuKaRo_ (~LuKaRo@p200300dfa712f15a9a5d23a6a02b67bb.dip0.t-ipconnect.de)
[02:47:58] *** Joins: supakeen_t (~supakeen@python/site-packages/supakeen)
[02:48:14] *** Quits: brad_mssw|mac (~bhouse@172.110.173.1) (Quit: This computer has gone to sleep)
[02:48:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[02:49:43] *** Joins: nope__ (~maxwell@c-98-34-36-32.hsd1.il.comcast.net)
[02:50:57] *** Quits: supakeen_t (~supakeen@python/site-packages/supakeen) (Quit: issued !quit command)
[02:54:06] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[02:54:11] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:54:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:56:28] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[02:56:39] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:05:47] *** Quits: coruja (~coruja@user/coruja) (Ping timeout: 268 seconds)
[03:06:12] *** Quits: bnchs___ (~bnchs@105.157.214.15) (Remote host closed the connection)
[03:06:36] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Ping timeout: 240 seconds)
[03:06:41] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[03:07:04] *** Joins: supakeen_test (~supakeen@2a01:4f9:c010:3f2a:1:1:3:42)
[03:07:21] *** Joins: coruja (~coruja@user/coruja)
[03:10:09] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[03:10:26] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[03:10:48] *** Quits: effexzi (uid474242@id-474242.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:12:59] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[03:15:00] *** Quits: LuKaRo_ (~LuKaRo@p200300dfa712f15a9a5d23a6a02b67bb.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:16:40] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[03:16:50] *** Joins: LuKaRo (~LuKaRo@p200300dfa712f15a9a5d23a6a02b67bb.dip0.t-ipconnect.de)
[03:16:57] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[03:17:50] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[03:18:12] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[03:18:16] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (Ping timeout: 245 seconds)
[03:19:19] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:20:17] *** Joins: seninha (~chatzilla@user/seninha)
[03:20:30] *** Joins: ElPresidente (~ElPreside@172-125-150-28.lightspeed.tukrga.sbcglobal.net)
[03:20:37] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[03:21:49] *** Quits: frostygoth (~frostygot@104-186-97-153.lightspeed.wchtks.sbcglobal.net) (Quit: Leaving)
[03:22:10] *** Quits: Guest7498 (~Guest@host202.190-137-39.telecom.net.ar) (Remote host closed the connection)
[03:24:05] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[03:25:16] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[03:26:26] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[03:26:52] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Ping timeout: 256 seconds)
[03:27:09] *** Joins: biotty (~coien@li35-173.members.linode.com)
[03:28:09] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Client Quit)
[03:28:51] *** Quits: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com) (Quit: The true sign of intelligence is not knowledge but imagination.)
[03:31:24] *** Quits: Xeroine (~Xeroine@user/xeroine) (Ping timeout: 256 seconds)
[03:33:14] *** Joins: Xeroine (~Xeroine@user/xeroine)
[03:33:45] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:f892:3809:ac7b:1ca4)
[03:33:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:35:09] *** Quits: alch (~alch@pd-18-119-96.service.infuturo.it) (Read error: Connection reset by peer)
[03:37:09] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:37:14] *** Joins: LaptopZombie (~LaptopZom@cpebc1401ed5823-cmbc1401ed5820.cpe.net.cable.rogers.com)
[03:38:50] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:39:18] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[03:39:40] *** Joins: alch (~alch@151.82.115.216)
[03:40:28] *** Joins: Jong (~Jong@2620:10d:c090:400::5:b29a)
[03:42:36] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:43:08] <retr0> onlinegdb wont create a text file
[03:43:13] <retr0> with fopen()
[03:43:21] *** Quits: reset (~reset@user/reset) (Quit: reset)
[03:43:26] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 260 seconds)
[03:43:43] <retr0> and my code is fine ive even tried other code to do it
[03:44:45] *** Joins: Wulf (~Wulf@user/wulf)
[03:48:31] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[03:48:31] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Write error: Connection reset by peer)
[03:48:31] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Write error: Connection reset by peer)
[03:48:31] *** Quits: tejr (~tejr@user/tejr) (Write error: Connection reset by peer)
[03:48:31] *** Quits: bindu (~bindu@user/bindu) (Write error: Connection reset by peer)
[03:48:31] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[03:48:31] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Write error: Connection reset by peer)
[03:48:31] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Write error: Connection reset by peer)
[03:48:31] *** Quits: teepee (~teepee@openscad/teepee) (Write error: Connection reset by peer)
[03:48:31] *** Quits: noteness (~noteness@user/noteness) (Write error: Connection reset by peer)
[03:48:31] *** Quits: de-facto (~de-facto@user/de-facto) (Write error: Connection reset by peer)
[03:48:31] *** Quits: tusko (~yeurt@user/tusko) (Write error: Connection reset by peer)
[03:48:31] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Write error: Connection reset by peer)
[03:48:40] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[03:48:40] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[03:48:57] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[03:49:25] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[03:49:57] *** Joins: masoudd_ (~masoudd@user/masoudd)
[03:50:19] *** Joins: teepee (~teepee@openscad/teepee)
[03:50:28] *** Joins: noteness (~noteness@user/noteness)
[03:50:40] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:50:49] *** Joins: de-facto (~de-facto@user/de-facto)
[03:50:52] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[03:50:54] *** Joins: bindu (~bindu@user/bindu)
[03:50:56] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[03:50:58] *** Joins: tusko (~yeurt@user/tusko)
[03:50:59] *** Joins: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083)
[03:51:05] *** Quits: muffin_storm (~muffin_st@50-233-189-146-static.hfc.comcastbusiness.net) (Changing host)
[03:51:05] *** Joins: muffin_storm (~muffin_st@user/muffin-storm/x-3740471)
[03:51:37] <retr0> ....
[03:52:35] *** Joins: King_julian (~King_juli@41.1.141.23)
[03:53:17] *** Joins: tejr (~tejr@user/tejr)
[03:53:18] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[03:53:21] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:53:33] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[03:53:46] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[03:55:31] *** Quits: silky (~silkworks@ctrl-c.club) (Remote host closed the connection)
[03:56:18] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:56:54] *** Quits: King_julian (~King_juli@41.1.141.23) (Ping timeout: 250 seconds)
[03:59:44] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:02:13] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[04:02:30] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:03:59] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:06:33] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[04:06:49] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:07:07] <retr0> ....
[04:11:51] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[04:12:00] *** Joins: farmfrmjakestate (~farmfromj@ganymede.mines.edu)
[04:12:08] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:12:17] *** Quits: farmfrmjakestate (~farmfromj@ganymede.mines.edu) (Client Quit)
[04:15:01] *** Joins: farmfrmjakestate (~farmfromj@user/farmfrmjakestate)
[04:17:25] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[04:18:05] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[04:18:54] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[04:19:10] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[04:19:26] *** Quits: masoudd_ (~masoudd@user/masoudd) (Ping timeout: 250 seconds)
[04:21:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:22:38] *** Quits: LuKaRo (~LuKaRo@p200300dfa712f15a9a5d23a6a02b67bb.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:23:40] *** Joins: LuKaRo_ (~LuKaRo@p57b157e5.dip0.t-ipconnect.de)
[04:23:46] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[04:24:30] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 260 seconds)
[04:24:56] *** Joins: X-Scale` (~ARM@153.213.28.37.rev.vodafone.pt)
[04:25:11] *** sweetsymph_ is now known as sweetsymph
[04:25:29] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[04:25:56] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Max SendQ exceeded)
[04:26:25] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[04:26:36] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 240 seconds)
[04:26:36] *** X-Scale` is now known as X-Scale
[04:28:02] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Max SendQ exceeded)
[04:28:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f892:3809:ac7b:1ca4) (Quit: Quit)
[04:28:30] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[04:29:36] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[04:31:07] *** Quits: nope__ (~maxwell@c-98-34-36-32.hsd1.il.comcast.net) (Quit: Konversation terminated!)
[04:32:53] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:33:10] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[04:36:13] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[04:36:15] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[04:36:30] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:37:01] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[04:39:05] *** Quits: X-Scale (~ARM@153.213.28.37.rev.vodafone.pt) (Ping timeout: 256 seconds)
[04:39:05] *** X-Scale` is now known as X-Scale
[04:39:19] *** Quits: farmfrmjakestate (~farmfromj@user/farmfrmjakestate) (Quit: Textual IRC Client: www.textualapp.com)
[04:41:28] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[04:42:55] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[04:44:43] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[04:45:00] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:45:50] *** Joins: teepee (~teepee@openscad/teepee)
[04:46:16] *** Joins: Betal (~Betal@user/betal)
[04:48:02] *** Joins: ymwm__ (~yingmanwu@117.26.69.144)
[04:49:30] *** Quits: LuKaRo_ (~LuKaRo@p57b157e5.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[04:51:10] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[04:51:27] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:53:44] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[04:54:00] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:54:15] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[04:55:59] *** Joins: LuKaRo (~LuKaRo@p57b157e5.dip0.t-ipconnect.de)
[04:56:33] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[04:57:24] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Ping timeout: 240 seconds)
[04:58:41] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[04:58:42] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[05:00:16] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[05:02:17] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Remote host closed the connection)
[05:02:51] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 245 seconds)
[05:04:57] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[05:06:39] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[05:06:58] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 260 seconds)
[05:07:17] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[05:09:00] *** Quits: LuKaRo (~LuKaRo@p57b157e5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:16:50] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-1c52-7a09-75d4-5be2.res6.spectrum.com) (Remote host closed the connection)
[05:17:21] *** Joins: Dotz0cat_ (~Dotz0cat@mail.cbc.edu)
[05:18:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:18:57] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 240 seconds)
[05:19:09] *** Joins: LuKaRo (~LuKaRo@p200300dfa712f14b7d1690af90762b47.dip0.t-ipconnect.de)
[05:23:17] *** Quits: Dotz0cat_ (~Dotz0cat@mail.cbc.edu) (Ping timeout: 256 seconds)
[05:26:09] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[05:26:24] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[05:26:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:28:36] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[05:34:03] *** Joins: hizon (~zxq@43.129.208.183)
[05:37:25] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:5a9:1bfd:dfd5:df91)
[05:37:25] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:5a9:1bfd:dfd5:df91) (Changing host)
[05:37:25] *** Joins: skapata (~Skapata@user/skapata)
[05:39:44] *** Joins: frost (~frost@user/frost)
[05:41:59] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 256 seconds)
[05:42:15] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[05:47:19] *** Joins: X-Scale` (~ARM@31.22.203.181)
[05:49:40] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[05:49:41] *** X-Scale` is now known as X-Scale
[05:54:44] *** Joins: Posterdati (~posterdat@user/Posterdati)
[05:55:01] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:59:10] *** Quits: gog (~ada@user/gog) (Ping timeout: 272 seconds)
[06:01:23] *** Joins: Dotz0cat_ (~Dotz0cat@24.144.1.234)
[06:03:39] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:05:54] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:06:04] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[06:11:18] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:13:02] *** Joins: brad_mssw (~bhouse@169.130.230.38)
[06:13:49] *** Quits: brad_mssw (~bhouse@169.130.230.38) (Client Quit)
[06:14:36] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[06:15:52] *** Quits: Dotz0cat_ (~Dotz0cat@24.144.1.234) (Quit: Leaving)
[06:15:59] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Remote host closed the connection)
[06:16:37] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:16:37] *** Joins: Inline__ (~Inline@p200300cd470c9c002556fbf58fa37daf.dip0.t-ipconnect.de)
[06:18:39] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (Remote host closed the connection)
[06:19:02] *** Quits: Inline (~Inline@p200300cd4709fe0020393da7e35c629b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:23:00] *** Joins: zer0x (~zer0x@58.186.217.233)
[06:23:22] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 250 seconds)
[06:24:31] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353)
[06:25:41] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:27:51] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[06:28:51] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:34:38] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 272 seconds)
[06:35:27] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Remote host closed the connection)
[06:41:24] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 240 seconds)
[06:43:02] *** Quits: fejj (~pitfall@pool-72-94-35-232.phlapa.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[06:43:11] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Ping timeout: 256 seconds)
[06:44:08] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[06:44:12] *** Parts: v4mp (~v4mp@user/v4mp) ()
[06:44:25] *** Joins: smeso (~smeso@user/smeso)
[06:45:45] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[06:46:33] *** Joins: on^ (~on@50.232.121.75)
[06:49:17] *** Quits: Fl1pFl0p (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[06:49:45] *** Joins: fe23 (~fe23@2409:8a34:466:6010:e00c:1e80:fc60:87b4)
[06:50:50] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[06:52:09] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:57] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 240 seconds)
[06:55:02] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:57:08] *** Joins: King_julian (~King_juli@41.1.141.23)
[06:57:46] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[06:58:10] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:58:41] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353)
[07:01:56] *** Quits: King_julian (~King_juli@41.1.141.23) (Ping timeout: 250 seconds)
[07:05:57] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5c5f:ad85:d2cd:496f)
[07:06:57] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Ping timeout: 240 seconds)
[07:08:07] *** Quits: kurahaupo (~kurahaupo@pa49-197-102-98.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[07:18:37] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[07:21:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:21:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:21:06] *** Joins: wroathe (~wroathe@user/wroathe)
[07:28:07] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.132)
[07:29:03] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[07:29:50] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:34:04] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[07:35:56] *** Quits: alch (~alch@151.82.115.216) (Read error: Connection reset by peer)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:33] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:39:02] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:40:10] *** Joins: alch (~alch@151.38.96.3)
[07:41:08] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[07:45:57] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[07:51:23] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[07:52:38] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353) (Ping timeout: 250 seconds)
[07:54:30] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 260 seconds)
[07:55:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:56:28] *** Joins: rgrinberg (~textual@187.223.141.66)
[07:56:39] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[07:57:18] *** Quits: rgrinberg (~textual@187.223.141.66) (Read error: Connection reset by peer)
[07:57:53] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[07:58:03] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[07:58:48] *** Joins: rgrinberg (~textual@187.223.141.66)
[08:00:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 250 seconds)
[08:02:30] *** Quits: zer0x (~zer0x@58.186.217.233) (Remote host closed the connection)
[08:02:48] *** Joins: zer0x (~zer0x@58.186.217.233)
[08:03:56] *** Joins: s1b1 (~s1b1@user/s1b1)
[08:05:38] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[08:05:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[08:06:45] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:10:27] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[08:15:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:18:30] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[08:18:39] *** Quits: rcf (rcf@sdf.org) (Quit: WeeChat 3.2.1)
[08:21:37] *** Joins: rcf (~rcf@sdf.org)
[08:27:08] *** Joins: asen (~asen@2408:821a:618:28c0:b99d:d408:c433:2245)
[08:27:36] *** Quits: asen (~asen@2408:821a:618:28c0:b99d:d408:c433:2245) (Remote host closed the connection)
[08:34:12] *** Quits: on^ (~on@50.232.121.75) (Ping timeout: 240 seconds)
[08:34:57] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Ping timeout: 240 seconds)
[08:35:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:38:04] *** Joins: King_julian (~King_juli@41.1.141.23)
[08:38:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[08:39:11] *** Quits: AssKoala (~asskoala@user/asskoala) (Read error: Connection reset by peer)
[08:39:22] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[08:39:23] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[08:39:23] *** Joins: AssKoala (~asskoala@user/asskoala)
[08:40:23] *** Joins: King_jul1an (~King_juli@41.1.141.23)
[08:41:43] *** Joins: greeter (fresh@2604:180:2:117:cafe:babe:dead:beef)
[08:42:45] *** Quits: King_julian (~King_juli@41.1.141.23) (Ping timeout: 256 seconds)
[08:43:04] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Ping timeout: 256 seconds)
[08:44:00] *** Joins: King_julian (~King_juli@41.1.141.23)
[08:45:31] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.132)
[08:45:32] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:47:53] *** Joins: v4mp (~v4mp@user/v4mp)
[08:51:19] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[08:52:05] *** Joins: hinata (~hinata@157.33.96.125)
[08:53:40] *** Quits: ckdCreations (~ckdCreati@147.55.130.33) (Read error: Connection reset by peer)
[08:53:59] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[08:55:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 250 seconds)
[08:56:12] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[08:57:57] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:58:40] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[09:00:53] *** Quits: King_jul1an (~King_juli@41.1.141.23) (Ping timeout: 256 seconds)
[09:02:54] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[09:03:58] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[09:09:05] *** Joins: on^ (~on@50.232.121.75)
[09:11:23] *** Joins: kts (~kts@103.73.237.26)
[09:12:13] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 256 seconds)
[09:13:40] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[09:16:15] *** Quits: majors (~majors@user/majors) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[09:17:24] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[09:17:30] *** Joins: majors (~majors@user/majors)
[09:18:12] *** Quits: kts (~kts@103.73.237.26) (Ping timeout: 256 seconds)
[09:18:12] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[09:25:14] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[09:26:12] *** Joins: bzng (~bzng4@2a02:60a0:102:4302:5924:659a:dd1e:fe31)
[09:26:19] *** nortoh_ is now known as nortoh
[09:26:19] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[09:26:19] *** Joins: nortoh (~nortoh@user/nortoh)
[09:26:24] *** Quits: King_julian (~King_juli@41.1.141.23) (Remote host closed the connection)
[09:26:42] *** Joins: King_julian (~King_juli@41.1.141.23)
[09:28:06] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[09:29:26] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[09:32:02] *** Quits: fcresende_ (fcresende@fcresende.jujube.ircnow.org) (Ping timeout: 260 seconds)
[09:32:20] *** Joins: fcresende_ (fcresende@fcresende.jujube.ircnow.org)
[09:32:26] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Ping timeout: 245 seconds)
[09:32:29] *** Quits: les (znc@user/les) (Ping timeout: 250 seconds)
[09:32:35] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[09:32:38] *** Joins: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[09:32:49] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Read error: Connection reset by peer)
[09:32:56] *** Quits: shalok (~shalok@user/shalok) (Ping timeout: 252 seconds)
[09:32:58] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (Ping timeout: 260 seconds)
[09:33:06] *** Joins: les (znc@user/les)
[09:33:25] *** Joins: shalok (~shalok@user/shalok)
[09:33:52] *** Quits: King_julian (~King_juli@41.1.141.23) (Ping timeout: 272 seconds)
[09:34:02] *** Quits: meowray (MaskRay@user/meowray) (Ping timeout: 252 seconds)
[09:34:12] *** Joins: meowray (~MaskRay@li683-166.members.linode.com)
[09:37:30] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[09:39:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:41:32] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:44:47] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Quit: leaving)
[09:49:47] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[09:50:21] *** Joins: semeion (~semeion@user/semeion)
[09:53:01] *** Quits: zer0x (~zer0x@58.186.217.233) (Ping timeout: 256 seconds)
[09:54:09] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 256 seconds)
[09:54:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:54:21] *** Joins: drin (~Geezabisc@user/geezabiscuit)
[09:55:47] *** drin is now known as geezabiscuit
[09:58:57] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[10:02:20] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Read error: Connection reset by peer)
[10:08:42] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 272 seconds)
[10:08:46] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:09:36] *** Joins: the_lanetly_052_ (~the_lanet@194.135.166.251)
[10:09:41] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:10:49] *** Quits: the_lanetly_052_ (~the_lanet@194.135.166.251) (Max SendQ exceeded)
[10:11:50] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:12:05] *** Joins: the_lanetly_052_ (~the_lanet@194.135.168.203)
[10:12:42] *** Quits: v4mp (~v4mp@user/v4mp) ()
[10:12:52] *** Quits: the_lanetly_052_ (~the_lanet@194.135.168.203) (Max SendQ exceeded)
[10:14:34] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.203)
[10:14:52] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[10:15:09] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.203) (Max SendQ exceeded)
[10:15:38] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.251)
[10:15:44] *** Quits: Kawazaki (~Kawazaki@user/Kawazaki) ()
[10:16:25] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.251) (Max SendQ exceeded)
[10:18:12] *** Quits: rgrinberg (~textual@187.223.141.66) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:18:42] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[10:18:44] *** Joins: ekathva (~ekathva@n14joep3rywnjx0h5-1.v6.elisa-mobile.fi)
[10:19:57] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[10:20:16] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[10:24:33] *** Joins: zer0x (~zer0x@58.186.217.233)
[10:24:43] *** Joins: adip (~adip@dil199.neoplus.adsl.tpnet.pl)
[10:24:45] *** Joins: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl)
[10:25:09] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[10:25:10] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 272 seconds)
[10:25:20] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[10:25:48] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 272 seconds)
[10:28:28] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[10:28:44] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[10:28:53] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:29:37] *** Joins: koo5_ (~quassel@51.140.155.227)
[10:32:15] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[10:33:08] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:a0ff:ed0f:a27c:5f4)
[10:34:06] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[10:34:14] *** Quits: tc__ (~tc@103-140-203-11.vic.as139284.net.au) (Remote host closed the connection)
[10:34:38] *** Joins: tc__ (~tc@103-140-203-11.vic.as139284.net.au)
[10:36:31] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[10:38:31] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[10:38:44] *** Joins: semeion (~semeion@user/semeion)
[10:39:25] *** Quits: hinata (~hinata@157.33.96.125) (Quit: Leaving)
[10:39:29] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[10:41:18] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Read error: Connection reset by peer)
[10:41:25] *** Joins: karakedi (~eAC53C340@user/karakedi)
[10:42:38] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[10:47:23] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[10:48:14] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:a0ff:ed0f:a27c:5f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:49:30] *** Joins: loganlee (~Thunderbi@user/loganlee)
[10:50:44] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[10:53:33] *** Joins: eddybilley (~freddieti@217.119.232.174)
[10:56:26] *** Joins: ferdna (~ferdna@user/ferdna)
[10:57:21] *** Joins: badsektor (~badsektor@user/badsektor)
[10:59:58] *** Joins: namkeleser (~namkelese@101.175.104.107)
[11:00:29] <namkeleser> What are the best resources to learn C?
[11:02:32] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[11:03:03] *** Joins: zer0x_ (~zer0x@58.186.217.233)
[11:03:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[11:03:17] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[11:06:11] <dave0> channel topic
[11:06:20] *** Quits: zer0x (~zer0x@58.186.217.233) (Ping timeout: 272 seconds)
[11:07:12] <namkeleser> Are there any interactive ones online?
[11:09:27] <dave0> no idea
[11:13:56] *** Quits: adip (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[11:14:01] *** Joins: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[11:14:05] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[11:14:34] *** Quits: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[11:15:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[11:17:43] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Quit: xiongxin)
[11:18:02] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[11:18:44] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[11:19:58] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[11:20:13] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[11:20:18] *** Quits: LaptopZombie (~LaptopZom@cpebc1401ed5823-cmbc1401ed5820.cpe.net.cable.rogers.com) (Quit: Konversation terminated!)
[11:20:53] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[11:21:06] *** Joins: LaptopZombie (~LaptopZom@cpebc1401ed5823-cmbc1401ed5820.cpe.net.cable.rogers.com)
[11:22:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:24:52] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[11:27:49] *** Joins: masoudd_ (~masoudd@user/masoudd)
[11:31:00] *** Quits: geeknix (~pi@2001:e68:5432:eb65:88fb:443:e2f4:157e) (Ping timeout: 240 seconds)
[11:32:18] *** Joins: constxd_ (~brad@142.134.78.128)
[11:36:16] <NRK> namkeleser: "interactive" how?
[11:36:36] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 240 seconds)
[11:37:15] *** Quits: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:37:26] *** Joins: aradesh (~aradesh@user/aradesh)
[11:37:37] *** Quits: alch (~alch@151.38.96.3) (Ping timeout: 240 seconds)
[11:38:03] *** Joins: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[11:39:27] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:39:35] *** Joins: alch (~alch@151.34.147.215)
[11:40:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:41:12] *** Quits: masoudd_ (~masoudd@user/masoudd) (Quit: Leaving)
[11:41:51] *** Joins: sokan (~sokan@85.73.229.195)
[11:42:08] <caze> namkeleser: No.
[11:44:32] *** Joins: geeknix (~pi@2001:e68:5432:2980:281e:46e1:b91e:3c1c)
[11:44:53] *** Quits: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:45:38] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[11:45:46] *** Joins: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[11:47:30] *** Quits: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se) (Ping timeout: 272 seconds)
[11:47:36] *** Joins: Akiva (~Akiva@user/Akiva)
[11:48:20] *** Joins: ismdeep (~ismdeep@113.57.152.160)
[11:51:11] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 245 seconds)
[11:51:57] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[11:52:18] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[11:52:29] *** Quits: ismdeep (~ismdeep@113.57.152.160) (Client Quit)
[11:53:07] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:54:26] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:56:02] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[11:58:00] *** Quits: constxd_ (~brad@142.134.78.128) (Ping timeout: 256 seconds)
[11:59:32] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 272 seconds)
[12:06:11] *** Quits: cryptonector (~nico@24.28.108.183) (Ping timeout: 256 seconds)
[12:06:24] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:07:50] *** Quits: kriss (~kriss@213.239.83.90) (Remote host closed the connection)
[12:09:40] *** Joins: krissmaster (~kriss@213.239.83.90)
[12:09:42] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:12:33] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[12:13:53] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:14:02] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:16:26] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[12:26:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[12:28:59] *** Joins: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se)
[12:31:21] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[12:32:37] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[12:35:44] *** Joins: cosimone (~user@93.55.99.69)
[12:35:53] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Changing host)
[12:35:53] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[12:35:59] <Dean> hello
[12:36:23] <NRK> hi
[12:36:39] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Ping timeout: 250 seconds)
[12:36:49] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[12:37:27] <caze> hi
[12:37:44] <Dean> caze: i was just thinking about you when i woke up. going to work in 1-17 now.
[12:37:57] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[12:37:58] <NRK> 😳
[12:38:01] <caze> Dean: Okay
[12:38:46] <Dean> NRK what is that? a sad face?
[12:39:56] <NRK> it's a flushed face
[12:40:27] <Dean> why a flushed face? it's a blush face? is flush blush? lol oh my god. english.
[12:41:44] <NRK> https://0x0.st/oZ8h.png
[12:42:55] <dave0> i think someone surprised NRK while he was on the toilet :-p
[12:43:29] <Dean> kawaii NRK senpai.
[12:43:45] <NRK> what the..
[12:44:29] <Dean> XD
[12:46:06] <roxlu> When I've got a struct like `struct something { int age; int amount }` is it valid to create an instance like: `struct something foo = { .age = 10, .amount = 1, .age = 11 }`, so setting the amount twice? I saw something like this in a project.
[12:47:57] *** Quits: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Read error: Connection reset by peer)
[12:48:23] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[12:49:53] *** Quits: bkhl (~bkhl@user/bkhl) (Read error: Connection reset by peer)
[12:50:08] *** Joins: bkhl (~bkhl@user/bkhl)
[12:50:31] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:51:17] *** Quits: fe23 (~fe23@2409:8a34:466:6010:e00c:1e80:fc60:87b4) (Ping timeout: 240 seconds)
[12:52:49] *** Joins: iomari891 (~iomari891@197.210.77.99)
[12:53:03] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[12:53:03] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[12:53:03] *** Joins: some02 (~cat@user/sudden)
[12:53:37] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:53:57] <Dean> caze: just to clarify i don't want to limit the input length. it must be able to take any length of characters theoretically? so i would not use an arr[somesize] i'd use a pointer?
[12:54:13] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[12:54:34] <caze> Dean: What do you mean by "use a pointer"?
[12:54:35] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[12:55:07] <Dean> FILE pointer?
[12:55:12] <dave0> roxlu: the robot might know
[12:55:22] <caze> Dean: No, did you see the last thing I wrote last night?
[12:55:29] *** Quits: zer0x_ (~zer0x@58.186.217.233) (Ping timeout: 256 seconds)
[12:55:39] <dave0> ,cc struct something { int age; int amount; }; struct something foo = { .age = 10, .amount = 1, .age = 11 };
[12:55:41] <candide> dave0: [warning: initialized field overwritten [-Woverride-init]  note: (near initialization for 'foo.age')] no output: foo = {age = 11, amount = 1}
[12:55:51] <dave0> there's a warning
[12:56:09] <dave0> probably best to avoid it
[12:56:23] <Dean> caze: the last thing i recall was talking about FILE. I remember reading something about it but I lost the link so I'm solving again from the start.
[12:56:31] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[12:56:35] <roxlu> dave0: thanks! I thought it was a nice way to make sure members are at least null'd.
[12:56:39] <caze> Dean: I told you not to do it that way.
[12:56:50] <roxlu> dave0: it's used here https://github.com/meetecho/janus-gateway/blob/master/src/plugins/plugin.h#L192
[12:56:57] <Dean> ok wait let me see if i still have the history.
[12:57:07] <caze> Hmm.
[12:57:19] <caze> roxlu: https://ideone.com/KH3q0k
[12:57:36] <Dean> "It's probably better to think of input as a fale, fow now."
[12:58:00] <dave0> roxlu: overkill ... if you initialize your variable, any fields you don't explicitly initialize get a zero
[12:58:10] <Dean> that was the last message i have.
[12:58:12] <caze> <caze> Dean: No, don't do that. <caze> Dean: Just pretend conceptually, as if it's a file. <caze> Dean: Like if you did from shell: ./a.out < input.txt
[12:58:55] <Dean> ok so to do with the fact that it's taking the values to a buffer?
[12:58:55] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[12:59:09] *** Joins: JanC (~janc@user/janc)
[12:59:19] <caze> Dean: Another way to say it is, pretend that you're a really fast typer.
[12:59:25] <roxlu> dave0: not sure if I understand you or if that's correct. members of a struct aren't 0 initialized by default right?
[12:59:56] *** Joins: bladerunner1 (~bladerunn@103.167.123.66)
[13:00:18] <caze> ,c11 6.7.9p21
[13:00:18] <candide> http://www.iso-9899.info/n1570.html#6.7.9p21 [Initialization] If there are fewer initializers in a brace-enclosed list than there are elements or members of an aggregate, or fewer characters in a string literal used to initialize an array of known size than there are elements in the array, the remainder of the aggregate shall be initialized implicitly the same as objects that have static storage duration.
[13:00:24] <caze> roxlu: ^
[13:00:34] <dave0> roxlu: if your variable is static, or you initialize 1 or more values, the rest get 0
[13:00:49] *** Joins: DomD10 (~DomD10@102.176.65.36)
[13:01:00] <bladerunner1> what does a function with a asterisks in front is used for? like void *this_is_a_func()
[13:01:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:01:01] *** Parts: DomD10 (~DomD10@102.176.65.36) ()
[13:01:23] <roxlu> oh nice!
[13:01:23] <caze> bladerunner1: The asterisk is a part of the type.
[13:01:28] *** Joins: DomD10 (~DomD10@102.176.65.36)
[13:01:31] <dave0> bladerunner1: pointer.. just like a variable, except it's return'ed from your function
[13:01:45] <bladerunner1> ohh
[13:01:47] <caze> bladerunner1: this_is_a_func returns a value of type void *.
[13:01:58] *** Parts: DomD10 (~DomD10@102.176.65.36) ()
[13:02:00] <roxlu> so statics are zero initialized anyway? e.g. when I would have `static struct sometthing myvar` then it's members are automatically zero'd?
[13:02:09] <dave0> roxlu: yup
[13:02:31] <roxlu> ah so in that case, that macro/link I pasted above makes no sense actually
[13:02:36] <bladerunner1> and this is function prototype void fatal(char *); but I don't understand what's the char * for?
[13:02:44] <dave0> roxlu: the pasted macro is overkill
[13:03:12] <dave0> roxlu: there's nothing wrong with explicitly initializing every member... you could argue that it's better
[13:03:15] <caze> bladerunner1: That is the type of its parameter.
[13:03:28] *** Joins: King_julian (~King_juli@41.1.73.181)
[13:03:42] <bladerunner1> I mean the "*" what does it mean there?
[13:04:00] <dave0> bladerunner1: pointer ... in a prototype, you can omit the variable name
[13:04:04] *** Joins: King_jul1an (~King_juli@41.1.73.181)
[13:04:14] <caze> bladerunner1: Again, it's a part of the type. The type is char *.
[13:04:27] <dave0> bladerunner1:   extern int func(int foo, int bar);   is the same as   extern int func(int, int);
[13:04:28] <roxlu> dave0: when/why could it be better, maybe when you want some value to be another value then 0
[13:04:49] <bladerunner1> ah ok
[13:05:30] <dave0> roxlu: just for completeness... it says to the reader "i am explicitly initializing everything to NULL"
[13:05:40] <caze> roxlu: ,c11 6.7.9p10
[13:05:42] <candide> roxlu: http://www.iso-9899.info/n1570.html#6.7.9p10 [Initialization] If an object that has automatic storage duration is not initialized explicitly, its value is indeterminate. If an object that has static or thread storage duration is not initialized explicitly, then: -- if it has pointer type, it is initialized to a null pointer; -- if it has arithmetic type, it is initialized to (positive or unsigned) ... <truncated; https://0x0.st/oZKi.txt>
[13:07:25] <dave0> roxlu: you could argue this is better or worse...   int array1[5] = { 3,2,1,0,0 };   int array2[5] = { 3,2,1 };    these are equivalent, it comes down to style
[13:07:40] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[13:07:41] <caze> Dean: I think there is likely something you are not understanding correctly about buffered input.
[13:07:41] <roxlu> I see what you mean, thanks.
[13:08:47] <Dean> caze: yeah. i don't understand this at all. so i'm learning some things.
[13:09:18] <caze> Dean: The program sees input as a stream of characters. There is no concept of time or "delay" between characters. If the program is waiting for input when none is available, then typically the program is blocked, or "frozen".
[13:10:29] <caze> Dean: When input becomes available, the program is awakened to read it. But from the pov of the program, it's as if the input was immediately available. It cannot tell that it had to wait some number of milliseconds for you to press a key on your keyboard.
[13:11:28] <Dean> that explains the weird print functionality when trying to use a counter in the loop
[13:11:38] <caze> Dean: Now, with this model, there is usually a variation. What if instead of all the input appearing as you type each key, there is a middleman that saves up all of your keypresses, and waits until you press enter to deliver them all at once?
[13:12:21] <caze> Dean: From your program's perspective, it cannot tell that is happening. It has no concept of the passage of time as it waits for each character.
[13:12:29] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:05] <caze> Dean: This second part is probably what is confusing you.
[13:14:16] <caze> Dean: This buffered input is external to your program, and you shouldn't write your solution to the exercise with any attention to it.
[13:15:02] <caze> Dean: Afterall, the original echo program I gave you works the same way.
[13:16:15] <caze> Dean: Do you remember the strategy I was telling you about last night?
[13:16:25] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Quit: xiongxin)
[13:18:04] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 272 seconds)
[13:18:09] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 256 seconds)
[13:19:06] *** Joins: masoudd (~masoudd@user/masoudd)
[13:20:00] *** Quits: Matt|home (~matt@adsl-74-233-58-80.mia.bellsouth.net) (Quit: Leaving)
[13:20:59] *** Joins: synbiose (~synbiose@a94-132-224-57.cpe.netcabo.pt)
[13:20:59] *** Joins: King_julian (~King_juli@41.1.73.181)
[13:21:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[13:21:28] *** Quits: synbiose (~synbiose@a94-132-224-57.cpe.netcabo.pt) (Client Quit)
[13:23:33] *** Joins: cromwell (~oliver@thunix.net)
[13:23:58] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[13:24:29] <Dean> power went out caze https://paste.debian.net/1233681/ you don't want this?
[13:25:16] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 256 seconds)
[13:26:05] <caze> Dean: No.
[13:26:36] <caze> Dean: What was the last line of mine that you saw?
[13:27:06] *** Joins: Matt|home (~matt@adsl-74-233-58-80.mia.bellsouth.net)
[13:30:36] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 240 seconds)
[13:32:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[13:33:47] <caze> roxlu: In answer to your original question, yes it is valid, but the initializer that was overriden might not be evaluated at all.
[13:33:55] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:34:07] <Dean> "This second part is probably what is confusing you." We have power outages here. it's interrupting a lot of the messages. you spoke of a middleman to save the keystrokes. but it seems to me that the characters are stuck in the stream until something happens to them inside of the loop. so i thought to build up the input there and print it if its above 80.
[13:34:09] <roxlu> ok thanks caze
[13:34:22] <caze> roxlu: ,c11 6.7.9p19
[13:34:24] <candide> roxlu: http://www.iso-9899.info/n1570.html#6.7.9p19 [Initialization] The initialization shall occur in initializer list order, each initializer provided for a particular subobject overriding any previously listed initializer for the same subobject;151) all subobjects that are not initialized explicitly shall be initialized implicitly the same as objects that have static storage duration. FOOTNOTE.151 Any ... <truncated; https://0x0.st/oZKK.txt>
[13:34:36] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:34:56] <caze> ,F.151
[13:35:00] <Dean> I think I am trying to solve something before I know what is going on. I don't have any understanding of the topic at hand and don't know what to look for to learn about it. so i won't be able to solve the problem.
[13:35:01] <caze> ,c11 F.151
[13:35:02] <candide> No such section 'F.151' in C11 Draft Standard (n1570).
[13:35:30] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:35:33] <caze> > Dean: This buffered input is external to your program, and you shouldn't write your solution to the exercise with any attention to it. > Dean: Afterall, the original echo program I gave you works the same way. > Dean: Do you remember the strategy I was telling you about last night?
[13:35:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:36:17] <Dean> no i don't remember. @_@
[13:36:22] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[13:36:28] <caze> Dean: " but it seems to me that the characters are stuck in the stream until something happens to them inside of the loop." This is not true.
[13:36:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Client Quit)
[13:36:46] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:36:57] <caze> Dean: It is true that the characters are "stuck in the stream", but as I said, "This buffered input is external to your program, and you shouldn't write your solution to the exercise with any attention to it."
[13:37:01] <Dean> so there must be a way to check the size of the buffer?
[13:37:24] <Dean> ah
[13:37:28] <Dean> shouldn't do that
[13:37:33] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[13:37:37] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Client Quit)
[13:37:46] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:37:48] <caze> Dean: What operating system do you use on your computer?
[13:37:54] <Dean> windows.
[13:38:31] <NRK> pain...
[13:38:34] <Dean> yes
[13:38:42] <caze> Dean: What development environment do you use?
[13:39:01] <Dean> many moons ago i was a linux child. but i don't even think i'd recognize myself if i met today with that person.
[13:39:18] <Dean> caze i'm using codespaces from github but also have vs code on desktop
[13:39:18] <caze> roxlu: Did you see my example? https://ideone.com/KH3q0k
[13:39:44] <caze> Dean: Do you know how to redirect a file as input to a program?
[13:39:51] <roxlu> caze: yep, thanks.
[13:40:01] <Dean> caze do you mean open a file pointer and read into the buffer?
[13:40:05] <caze> roxlu: Notice that foo is called only once.
[13:40:10] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (Ping timeout: 250 seconds)
[13:40:18] <caze> Dean: No, I do not mean that.
[13:40:30] <roxlu> ah yeah I see, that's good to know
[13:40:50] <Dean> then no. the only file work i've done was to read pixels and then modify them and write to the file. either in chunks or in single characters.
[13:41:57] <caze> Dean: If you type text into a file called input.txt, from unix shells (and dos), you can redirect the contents of that file as if it were input to a program by executing it as ./a.out < input.txt
[13:42:04] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[13:42:24] <Dean> i haven't done that before.
[13:43:17] <Dean> ./myprogram.c inputfile.txt is what you're saying?
[13:43:28] <Dean> a command line argument to a file?
[13:43:31] <caze> Dean: Well anyhow, this line buffering is *external* to your program, so it's completely irrelevant how you write your program. It won't change it.
[13:44:17] <Dean> caze: this? Line buffering - characters are transmitted to the system as a block when a new-line character is encountered. Line buffering is meaningful only for text streams and UNIX file system files. Full buffering - characters are transmitted to the system as a block when a buffer is filled.
[13:44:19] <caze> ./myprogram.c < inputfile.txt
[13:44:24] <Dean> Ok so I can research this.
[13:45:11] <caze> Dean: It's not worthwhile right now.
[13:45:15] <Dean> so we only ever go inside of the loop body when enter is pressed.
[13:45:29] <Dean> ?
[13:45:31] <caze> Dean: In fact, it's damaging your understanding of how C works.
[13:45:35] <caze> Dean: No.
[13:45:42] <caze> Case in point.
[13:46:17] *** Joins: Tempesta (~Tempesta@user/tempesta)
[13:46:32] <Dean> do you have an easier problem i can work on to build understanding first?
[13:46:35] <caze> Dean: Where are we if not in the loop body?
[13:46:54] <Dean> i feel like this is (surely easy for you), but for me it makes no sense. It's like trying to solve calculus when I don't even know algebra. XD
[13:47:05] <Dean> getchar is where we  are
[13:47:13] <NRK> what was the excercise again? 1-17?
[13:47:22] <Dean> NRK yes
[13:47:22] <caze> Dean: No, this is as basic as it gets. It is complicated because you are seeing the effects of line buffering, which is orthogonal to the problem (and C).
[13:47:48] *** Joins: gog` (~ada@user/gog)
[13:48:27] <caze> > Dean: Where are we if not in the loop body?
[13:49:22] <Dean> caze: ok true. so we are looping constantly, so we are in the loop body every time a character is pressed.
[13:49:53] <caze> Dean: You need to stop thinking in terms of keypresses, and think in terms of streams.
[13:49:56] <NRK> i can't find it on my folder
[13:50:00] <NRK> maybe i skipped it or smth
[13:50:24] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:50:27] <Dean> caze: so we are not in the loop?
[13:50:28] <caze> Dean: A text stream is a sequence of characters that appear in a particular order, one after another.
[13:50:46] <Dean> we go into the loop when enter is pressed after we have the character stream in full?
[13:51:13] <caze> Dean: You are always in the loop until EOF is encountered.
[13:51:34] <Dean> it felt like the stream is 'submitted' for processing when enter is pressed. this is not true?
[13:51:43] <caze> Dean: Again, you're thinking in terms of keypresses.
[13:52:01] <caze> Dean: Yes, it's true, but that is irrelevant to how you write your program.
[13:52:07] <Dean> so it's got nothing to do with enter key.
[13:52:26] <Dean> the characters is a stream
[13:52:56] <NRK> the easiest way to detect a n00b is to see if they use spaces inside their bracket. `if ( n00b )`
[13:52:57] <caze> Dean: Yes, and the getchar function returns each subsequent character from the stream, with each successive call.
[13:53:06] <NRK> and LOTS of blank lines
[13:53:47] <caze> Dean: What happens when your program calls getchar, and there is nothing available in the stream? (you haven't pressed a key yet)
[13:54:05] <Dean> caze it waits?
[13:54:19] <caze> Dean: Does it leave the loop?
[13:54:35] <Dean> no?
[13:54:51] <caze> Dean: Correct. The entire program is blocked. Frozen. Suspended.
[13:55:03] <Dean> *_*
[13:55:19] *** Joins: strajder (~strajder@user/strajder)
[13:55:19] <caze> Dean: When a charactger becomes available, the program is resumed where it was.
[13:56:30] <caze> Dean: To repeat myself, from the pov of the program, no time has passed. It did not have to wait. It appears as if the character was available immediately, when it called getchar, the function returned immediately with the next character in the stream.
[13:56:37] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:56:46] <caze> Dean: Get it?
[13:57:17] <Dean> ok so there is no time to increment a counter because we already left?
[13:57:43] <caze> Dean: What counter?
[13:58:19] <Dean> if i were to track the size of the stream. i could make a counter integer and increment it. but only, i can't. because it would never work as expected.
[13:58:35] <caze> Dean: Streams don't have size.
[13:58:45] <Dean> o.o
[13:58:51] <caze> Dean: Do you mean to count the number of characters you've read from the stream?
[13:58:56] <Dean> yes
[13:59:11] <Dean> how would i know when we are at 81 characters? if i cannot check the stream size. @-e
[13:59:37] <caze> Dean: You count the number of characters you've read from the stream.
[14:00:05] <Dean> but then, do i print the stream outside of the loop?
[14:00:10] *** Joins: zer0x_ (~zer0x@58.186.217.233)
[14:00:35] <caze> What loop?
[14:01:14] <Dean> the while. ok wait. so we have this counter variable to track the size yes? and then when we write, we specify to the stream, print me counter amount of characters from the stream?
[14:01:46] <caze> Dean: How to you interact with the stream?
[14:02:18] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:03:30] <caze> Dean: How does _this_ program interact with the stream? https://ideone.com/81STNK
[14:03:37] <Dean> when working with files there was this fstream functions. is there a similar one for this? so i could say something like... fwrite(image[i], sizeof(RGBTRIPLE), width, outptr);
[14:03:52] <Dean> ok looking at that one
[14:04:22] <Dean> putchar takes a single character from the stream and prints it then moves the pointer to the next character?
[14:04:47] <caze> Dean: In fact, there are two streams. stdin, for receiving input, and stdout, for transmitting output.
[14:05:26] <caze> Dean: getchar takes the character at the head of the queue, and returns its value.
[14:05:37] <Matt|home> is there an easy way to do a comparison with 2 arrays: "scan all values in array 2 and if any of those values are in array 1 then make them inaccessible" or something
[14:05:38] <caze> (stdin)
[14:06:06] <caze> Dean: putchar takes the value you pass to it, and places it in stdout.
[14:06:17] *** Joins: fe23 (~fe23@2409:8a34:466:6010:fc00:bfe9:f038:cee7)
[14:06:33] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:06:44] <Dean> ok, so can't i specify to the output stream the size of what I want to print?
[14:07:07] <caze> Dean: Not with putchar. The size is always 1.
[14:07:21] <Dean> must the program use putchar or can I investigage something else?
[14:07:45] *** Joins: shivesh (~shivesh@user/shivesh)
[14:07:45] <caze> Dean: You can use printf.
[14:08:02] <caze> Dean: Does this make more sense to you? https://ideone.com/HdOEBn
[14:08:23] <caze> Not sure if the loop conditional was causing confusion.
[14:08:59] <Dean> caze: that makes more sense to me.
[14:09:19] <Dean> thank you.
[14:09:37] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:09:44] <caze> Dean: It reads a character from stdin, then write it to stdout. Loops until EOF.
[14:09:52] <caze> Dean: Do you know what this program does?
[14:10:00] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[14:10:01] <Dean> yes.
[14:10:28] <Dean> so we don't want to print it, in there because that will only print a single character and we want to print 81 characters only?
[14:10:37] <Matt|home> int array[5] = {0}; <-- precisely what does this do?
[14:10:53] <Dean> Matt|home: i think it initializes all the values in the array to 0?
[14:10:56] <caze> Matt|home: It initializes all elements to 0.
[14:11:17] <Matt|home> caze : so literally the same thing as if i were to loop through them and set them to 0 manually?
[14:11:22] <caze> Dean: What does the program do?
[14:11:50] <caze> Matt|home: There are some differences, but mostly yes.
[14:11:57] <Matt|home> thanks.
[14:12:01] <Dean> it gets a character from the input stream and puts that character into the variable named c. then it puts the c variable to the terminal onto the output stream?
[14:12:15] <caze> Dean: Only once?
[14:12:20] <Dean> until we get to eof
[14:12:23] <caze> Dean: Only one character?
[14:12:49] <caze> Dean: Do you see the two windows at the bottom of the page labelled stdin and stdout?
[14:13:33] <Dean> oh my god.
[14:13:43] <Dean> i thought it was a single character at a time
[14:13:50] <Dean> because it's a char but... its not
[14:13:54] <caze> Matt|home: For instance, if you declare array as const, then you can't loop through and set them manually.
[14:14:03] <caze> Dean: It is a single character at a time.
[14:14:07] <Matt|home> gotcha.
[14:14:28] <caze> Matt|home: But you can still *initialize* the array.
[14:14:56] <Dean> Matt|home: i don't think we should modify const values on the fly. and even if you can't trick it with pointers it may be undesired behaviors later on. but initialize like master caze said is fine.
[14:15:07] <Dean> can*
[14:15:45] <caze> Dean: What made you think it wasn't a single character at a time?
[14:16:25] <Dean> so it's a single character at a time until we reach eof
[14:16:50] <caze> Dean: Did you think that getchar would just keep giving you the same character over and over again with each call?
[14:16:51] <Dean> but why print a single character at a time, we don't want that, because we will print inputs less than 81 lines unless we use a conditional to check for this?
[14:16:59] <Dean> no caze.
[14:17:18] <caze> > Dean: What made you think it wasn't a single character at a time?
[14:17:34] <Dean> it was a misunderstanding master caze
[14:17:38] *** Joins: hiroshi_ (~freedom@ge-19-120-112.service.infuturo.it)
[14:17:46] <Dean> i understand it is 1 character at a time now
[14:18:10] <caze> Dean: Single character at a time is powerful. For instance, this loop can echo back arbitrarily long lines.
[14:18:54] <caze> Dean: The amount of memory that this program requires to run does not grow in response to the amount of input that is provided to it.
[14:19:18] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[14:19:30] *** Quits: bladerunner1 (~bladerunn@103.167.123.66) (Ping timeout: 252 seconds)
[14:19:54] <caze> Dean: Maybe you should see my solution.
[14:19:55] <Dean> caze: but it should not print less than 81.
[14:19:58] <Dean> what
[14:20:20] <caze> Dean: Okay, let's discuss this strategy.
[14:20:30] <Dean> if we take one char and print one char immediately its not going to work.
[14:20:39] <caze> Dean: Yes, so what should we do?
[14:20:42] <Dean> because we can hit enter at 5 chars and then the condition of 81 chars is not satisfied
[14:20:47] <Dean> not print in this loop
[14:20:57] <caze> What should we do instead of print?
[14:20:59] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[14:21:03] <Dean> save it
[14:21:20] <Dean> or have a counter ++
[14:21:20] <caze> Okay. And the next character?
[14:21:51] <caze> Well you need both.
[14:22:05] <Dean> we keep going until we hit enter?
[14:22:13] <Dean> then we break out the loop?
[14:22:35] <caze> How about we keep going until we hit 80 characters?
[14:22:46] <caze> Because you know what happens then?
[14:22:57] <Dean> we have the condition met?
[14:23:04] <caze> What condition?
[14:23:05] <Dean> we will get 1 more character.
[14:23:11] <Dean> the one we have to implement
[14:23:25] <caze> Yes, so what do we do now that the condition has been met?
[14:23:36] <Dean> we break; ? and then we go to print the input?
[14:23:42] <Dean> as one thing
[14:23:46] <caze> Be more specific.
[14:23:56] <caze> Print the input how?
[14:24:07] <Dean> we print c?
[14:24:21] <caze> c contains the 81st character of the line.
[14:24:40] <Dean> we have to loop from the start to the counter and print from the start to the counter
[14:24:46] <caze> Don't you want to firts print the previous 80 characters that you've saved?
[14:25:03] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Remote host closed the connection)
[14:25:12] <Dean> wait the input cannot be more than 80?
[14:25:32] *** Joins: unknow (~i.am@user/marlboro)
[14:25:34] <caze> Dean: No. You've saved 80 characters.
[14:25:47] <Dean> we print them all.
[14:25:54] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 256 seconds)
[14:25:58] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[14:26:06] <caze> Dean: When you've read the 81st character of the line, you have 80 previous characters saved, correct?
[14:26:19] <Dean> yes
[14:26:50] <caze> Dean: So you can't just print the 81st character without first printing the previous characters.
[14:26:58] <Dean> correct
[14:27:08] <caze> Dean: Before printing c, you need to print everything that came before c.
[14:27:27] <Dean> yes
[14:27:38] <Dean> with a while loop?
[14:27:40] <caze> Dean: Okay, so we do printf("%s", buffer); putchar(c);
[14:27:42] <Dean> or a for loop?
[14:27:44] <Dean> oh
[14:27:47] <Dean> ooh
[14:28:07] <caze>  printf("%s", buffer); priunts the 80 characters saved, and putchar(c); prints c.
[14:28:12] <caze> Now what?
[14:28:17] <clarity> coffee?
[14:28:50] <Dean> printf("%.*s\n", 80, input);
[14:29:10] <Dean> oh
[14:29:26] <caze> Dean: Okay, now we've read and printed the first 81 characters of the line. Now what?
[14:29:35] <Dean> we want more inputs?
[14:29:46] <caze> Dean: We want to print the rest of the line?
[14:30:02] <caze> Dean: The line might have another 1000 characters.
[14:30:12] <Dean> so we print 80 more?
[14:30:22] *** Joins: Bou (sid274843@user/bou)
[14:30:29] <caze> Dean: How about we print 1 more.
[14:30:36] <Dean> o.e
[14:30:40] <caze> Dean: And then 1 more after that.
[14:30:45] <caze> Dean: And then 1 more after that.
[14:30:45] <Dean> so we pinted 80 characters?
[14:30:50] <Dean> oh.
[14:30:57] <Dean> so we printed 80 and then we print all the rest?
[14:31:04] <Dean> because the entire input is more than 80?
[14:31:58] <caze> Dean: It's possible that the line is 100000000.
[14:32:13] <caze> Dean: Who knows.
[14:32:31] <Dean> is it right to print the first 80 and then do all of them after?
[14:32:36] <Dean> it feels so weird.
[14:32:40] <Dean> like it's a trap and it's wrong.
[14:32:58] <caze> Dean: That is because you are not used to using C.
[14:33:31] <caze> Dean: https://ideone.com/UFAqo1
[14:36:34] <caze> Dean: What you are not used to is making the decision about whether to print or not so early.
[14:38:07] <caze> Dean: Once the information is known (that the line is longer than 80 characters), there is no reason to continue storing characters. This is the most efficient in terms of memory.
[14:38:15] *** Joins: Burgundy (~NA@86.121.143.206)
[14:38:29] <Dean> caze: i was just thinking about that. thank you so much.
[14:38:33] <Dean> and yes, i am not used to c.
[14:38:42] <Dean> it is very difficult in comparison to things like java or javascript.
[14:39:11] <caze> Dean: Yes, newcomers often try to program C as if it were some other language that they are familiar with.
[14:39:29] <clarity> It is not very difficult
[14:39:38] <clarity> Just.. different.
[14:40:16] <Dean> i dont understand this line column += column <= LEN;
[14:41:04] <Dean> particularly the part column <= LEN
[14:41:10] <clarity> That's a comparison
[14:41:20] <clarity> column less than or equal to len
[14:41:29] <caze> Dean: So normally that could be "column++". But the problem is that if a line is long enough, that variable will wrap around to 0.
[14:41:52] <clarity> Pretty sure it works the same in java and javascript?
[14:42:13] <Dean> so if the column is less than or equal to LEN we append?
[14:42:40] <Dean> no idea clarity
[14:42:57] <caze> Dean: That line can be rewritten as: if (column <= LEN) column = column + 1; else column = column + 0;
[14:42:58] <nomagno> case: that code you linked buffers three characters then manually prints them as it receives them if the input exceeds the buffer length?
[14:43:12] <nomagno> I guess it's more efficient with a larger buffer length
[14:43:20] <trenka> Dean: <= returns 1 or 0
[14:43:42] <Dean> trenka: thank you
[14:44:15] <caze> nomagno: Yes, it's a solution to ,kr1-17
[14:44:26] <nomagno> Ah
[14:44:52] *** Joins: RadimPavlik_ (~RadimPavl@176-74-132-138.netdatacomm.cz)
[14:45:52] <caze> Dean: The idea being that once column has reached LEN + 1, we actually don't need to continue to increment it anymore. We just keep getchar/putchar characters until we see the '\n' character. It's completely irrelevant how many characters that is.
[14:46:25] <Dean> thank you caze
[14:46:39] <Dean> if we were in the same country i'd buy you a beer.
[14:47:19] <clarity> Aren't you too young for that?
[14:47:38] <Dean> o.e
[14:47:48] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 240 seconds)
[14:48:00] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[14:49:45] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[14:49:46] *** Joins: Darkcoal (~user@user/Darkcoal)
[14:50:05] *** Quits: hiroshi_ (~freedom@ge-19-120-112.service.infuturo.it) (Quit: hiroshi_)
[14:50:09] <caze> Dean: Do you understand everything else about the program?
[14:50:51] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 256 seconds)
[14:51:19] <caze> Dean: When column < LEN, c gets saved in buffer, and if '\n' is encountered early, then the contents of the buffer are abandoned.
[14:51:49] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Client Quit)
[14:51:59] <caze> Dean: That is accomplished simply by setting column to 0.
[14:52:35] <caze> That allows the contents of buffer to be overwritten in the next iterations of the loop.
[14:53:07] *** Joins: King_julian (~King_juli@41.1.73.181)
[14:53:34] <caze> But if enough is saved and column == LEN, then first the buffer is printed, and then c is printed.
[14:53:54] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[14:54:31] <caze> And if there are any more characters, then it becomes the same as the getchar/putchar loop in the echo program, until '\n' is read.
[14:54:39] *** Joins: fstd (~fstd@xdsl-78-35-88-2.nc.de)
[14:54:49] *** Quits: fstd_ (~fstd@xdsl-87-79-45-162.nc.de) (Ping timeout: 256 seconds)
[14:55:19] *** Joins: bladerunner1 (~bladerunn@103.167.123.127)
[14:55:33] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[14:55:54] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.132)
[14:56:48] <caze> One thing I did is that I initialize buffer with all '\0', and I make sure that the loop never touches the last element, so that it's always null terminated.
[14:56:54] <Dean> caze studying it now.
[14:57:55] <Dean> caze: LEN would've been 80 for our purposes?
[14:58:23] <caze> Dean: Yes, I set it to 3 for ease of testing, which you can see in the stdin and stdout windows at the bottom of the page.
[14:58:35] <Dean> thank you caze
[15:00:10] *** Joins: seninha (~chatzilla@user/seninha)
[15:00:25] <Dean> caze: yes i understand.
[15:00:36] <caze> Dean: Can you imagine some people have used malloc and then realloc in order to try to hold the entire line in memory?
[15:00:46] <bladerunner1> is the function write() renamed to something else?
[15:00:47] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:00:50] <Dean> caze: that was what i was going to do.
[15:00:59] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[15:01:04] <Dean> the way you did it is so clean caze
[15:01:06] <caze> Dean: Does that seem - silly to you, now?
[15:01:31] <Dean> caze: it seems like it would've over complicated things a lot.
[15:01:39] *** Quits: supakeen_test (~supakeen@2a01:4f9:c010:3f2a:1:1:3:42) (Quit: Reconnecting)
[15:01:51] *** Joins: supakeen_test (~supakeen@2a01:4f9:c010:3f2a:1:1:3:42)
[15:02:14] <caze> Dean: One of the skills a programmer needs to develop is the ability to understand the computational requirements of the problem he's trying to solve.
[15:02:34] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 272 seconds)
[15:02:39] <Dean> caze: will this come from experience of using c often?
[15:02:41] <caze> Dean: There are certainly some problems where buffering the entire line in memory is required. This is not one of them.
[15:03:08] <caze> Dean: It's not really anything to do with C.
[15:03:16] <Dean> !
[15:03:34] <Dean> experience as a programmer? or would you say software engineer? what do you call it?
[15:03:48] <caze> Dean: It's a more fundamental understanding of computation in general, and what is required to solve certain problems.
[15:03:50] *** Joins: King_julian (~King_juli@41.1.73.181)
[15:04:01] <Dean> caze: how do i learn this power?
[15:04:17] <caze> Dean: It tends to be taught in a more academic setting.
[15:04:28] <Dean> well...
[15:04:33] <Dean> i wish i could.
[15:04:56] <caze> Dean: But there are books. Algorithms, data structures.
[15:04:56] *** Quits: ymwm__ (~yingmanwu@117.26.69.144) (Read error: Connection reset by peer)
[15:05:03] <Dean> now that i can do.
[15:05:06] <caze> Dean: Knuth books.
[15:05:44] <Dean> these https://www-cs-faculty.stanford.edu/~knuth/books.html
[15:05:45] <Dean> ?
[15:06:45] <caze> Dean: Yes.
[15:06:48] <Dean> caze: do you have a specific book recommendation for me?
[15:06:54] <Dean> or should i just start with TAOCP one?
[15:07:11] <caze> Dean: Start with a more beginner one.
[15:08:11] *** Joins: cadmio (~cadmio@151.37.146.102)
[15:08:15] <cadmio> Hello
[15:08:27] <cadmio> int size = 8; int a[size] = {8,2,7,4,5,6,3,1}; is it correct in C99 ?
[15:08:44] <Dean> caze: how long have you been coding for?
[15:09:24] <caze> Dean: 25 years
[15:09:24] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:09:28] <caze> cadmio: Yes.
[15:09:30] <dave0> cadmio: i don't believe you can initialize a variable length array
[15:09:32] *** Quits: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:09:39] <dave0> oh you can? whoops my bad
[15:09:39] <Dean> caze: the book i am currently going through is 'Effective C' by 'Rober C. Seacord'.
[15:09:45] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 268 seconds)
[15:09:48] <cadmio> error: variable-sized object may not be initialized
[15:10:01] <cadmio> I'd like to flly understand what's going on
[15:10:10] <caze> Ah, I wouldn't know.
[15:10:17] <Dean> caze: it is for beginners i think, but i am such a potato, i must google a lot to understand it.
[15:10:25] <caze> (Never use VBAs directly)
[15:10:28] <caze> VLAs
[15:10:37] <Dean> thank you very much for the help caze. i really appreciate you taking the time to explain things to me.
[15:11:02] <dave0> ,cc int size = 8; int a[size] = {};
[15:11:03] <candide> dave0: error: variable-sized object may not be initialized
[15:11:29] <dave0> cadmio: you're gonna have to initialize it by hand.. with a for loop or perhaps memset/memcpy
[15:11:43] <caze> Dean: This is the book I used in school. There are many others. https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844/ref=zg_bs_132570011_2/144-1947168-0913346
[15:11:45] <candide> Title of caze's link: Introduction to Algorithms, 3rd Edition (The MIT Press): Cormen, Thomas H.: 8601419521876: Amazon.com: Books
[15:12:07] *** Joins: ymwm (~yingmanwu@117.26.69.144)
[15:12:10] <dave0> cadmio: int size = 8; int a[size]; memset(a, 0, sizeof a); int b[8] = {8,2,7,4,5,6,3,1}; memcpy(a, b, sizeof b);
[15:12:11] <caze> Dean: Get used to the idea that "computing" is not tied to any one particular language.
[15:12:30] <dave0> cadmio: could also use a compound literal instead of b[]
[15:12:39] *** Quits: masoudd (~masoudd@user/masoudd) (Remote host closed the connection)
[15:13:02] <dave0> cadmio: gotta do it by hand :-/
[15:13:04] *** Joins: masoudd (~masoudd@user/masoudd)
[15:13:22] <cadmio> that's cumbersome I'd prefer simply  int a[] = {8,2,7,4,5,6,3,1};
[15:13:42] <dave0> cadmio: not with a variable length array
[15:13:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:14:05] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Ping timeout: 256 seconds)
[15:14:06] <Dean> thank you caze . it is from 2009? does it stay relevant that long?
[15:14:11] <dave0> cadmio: however this is perfectly fine... enum { size = 8 }; int a[size] = {8,2,7,4,5,6,3,1};
[15:14:16] *** Quits: ymwm (~yingmanwu@117.26.69.144) (Max SendQ exceeded)
[15:14:22] <Dean> systems change slower than I thought?
[15:14:40] <Dean> I was told what I learn in 1-2 years will be outdated after I learn it. it was really discouraging. but i think that is wrong.
[15:14:41] <caze> Dean: Computing theory essentially does not change.
[15:14:42] *** Joins: ymwm (~yingmanwu@117.26.69.144)
[15:14:42] <cadmio> dave0: that seemed to have solve my problem, but isn't that correct ?
[15:15:02] <bladerunner1> guys I have this code from hacking the art of exploitation book (which is from 2008) but it doesn't work in the current compiler https://bpa.st/IGCA
[15:15:02] <dave0> cadmio: it's all correct
[15:15:07] <caze> Dean: Languages, yes. Theory, no.
[15:15:16] <Dean> caze: thank you very much. ^_^
[15:15:18] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[15:16:03] <caze> dave0: cadmio size is not a variable in that case.
[15:16:44] <caze> You might as well write int a[] = {8,2,7,4,5,6,3,1};
[15:17:57] *** test_ is now known as _flood
[15:18:56] <cadmio> so the problem seems that the compiler doesn't see the 'size' variable when I define the array int a[size] = {8,2,7,4,5,6,3,1};
[15:19:29] <caze> (it's not a variable)
[15:20:06] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Read error: Connection reset by peer)
[15:20:06] <cadmio> why not int size = 8; ?
[15:20:25] <dave0> cadmio: int size = 8; int a[size];    <- this is a variable length array. do you want a variable length array?
[15:21:12] <cadmio> ah ok now I understand so int size = 8; int a[size]; would have been correct
[15:21:39] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[15:21:44] *** Joins: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[15:21:47] <cromwell> what does this mean? typedef void command_func (struct p_struct *, char *);
[15:21:58] <cadmio> but since I'm statically assigning the values with int a[] = {8,2,7,4,5,6,3,1}; int a[size]={..} is not correct
[15:21:58] <caze> cadmio: ,c11 6.7.9p3
[15:21:58] <candide> cadmio: http://www.iso-9899.info/n1570.html#6.7.9p3 [Initialization] The type of the entity to be initialized shall be an array of unknown size or a complete object type that is not a variable length array type.
[15:22:18] <dave0> cromwell: it declares an alias of a function type
[15:22:27] *** Joins: Klinda (~superleag@user/klinda)
[15:23:02] <dave0> cromwell: if you do    command_func *funcptr;    you have a variable that is a pointer to a function
[15:23:18] <cromwell> ah okay
[15:23:42] <dave0> cromwell: using typedef like you just did can make working with function pointers much easier to read
[15:24:02] <caze> Just don't put the pointer part in the typedef.
[15:24:35] <bladerunner1> :/ guys anyone took a look at it?
[15:25:02] <dave0> bladerunner1: exploits are off-topic
[15:25:14] <bladerunner1> the code isn't about exploitation
[15:25:53] <bladerunner1> someone told me this book gives good understanding of C and exploitation as well, I haven't even reached that part so
[15:27:15] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[15:27:17] <NRK> what error do u get/
[15:28:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:28:46] <clarity> A basic lexical error..
[15:29:30] <clarity> missing include
[15:29:47] <clarity> Sorry, that book is way over your head if this kind of stuff is a stumbling block
[15:30:20] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:47] <dave0> bladerunner1: line 24-25 looks like a typo but i'm not sure it would stop the compiler
[15:31:05] <clarity> Newline is not allowed in string literals
[15:31:07] *** Joins: csrf (~csrf@user/csrf)
[15:31:09] <dave0> the only other thing i can see is line 27 ... use   strcat(buffer, "\n");
[15:31:17] <bladerunner1> I fixed the 24-25 ofc
[15:31:42] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[15:31:49] <NRK> ur missing includes
[15:31:51] *** Parts: cadmio (~cadmio@151.37.146.102) (WeeChat 3.0)
[15:31:54] <NRK> are u on linux?
[15:32:14] <NRK> try running `man 3 <func_name>` it'll show u what include u need.
[15:32:18] <dave0> oh right <unistd.h>
[15:32:36] <caze> I wonder why they avoid initialization.
[15:32:38] <NRK> there's plenty of other room for improvement in there as well
[15:32:57] <caze> buffer = (char *) ec_malloc(100);
[15:33:03] <NRK> `if(argc < 2) usage(argv[0], datafile);` pretty sure argv[0] could be NULL here
[15:33:04] *** Joins: rando25892 (~atler@user/rando25892)
[15:33:06] <bladerunner1> me? yeah I'm on Arch Linux
[15:33:19] <dave0> bladerunner1: so what doesn't work?
[15:33:23] <NRK> and ofc, malloc-ing 100 and 20 bytes seems pointless
[15:33:28] <NRK> just use the stack
[15:33:33] *** Quits: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:34:01] <NRK> hardcoded sizes in a couple places too, just a buffer overflow waiting to happen'
[15:34:12] <bladerunner1> I'll just show you the error Ig
[15:34:23] <bladerunner1> NRK I think that's just for practice, I'm not really sure
[15:35:17] <bladerunner1> https://bpa.st/PDCA
[15:35:28] <NRK> sure, but doing shit like this is just building up bad habits.
[15:35:30] *** Quits: alch (~alch@151.34.147.215) (Read error: Connection reset by peer)
[15:35:53] <NRK> bladerunner1: run `man 3 write`
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:08] <dave0> bladerunner1: yeah that's just missing   #include <unistd.h>
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:34] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[15:36:35] <Bou> I can see why it's a confusing error though, write has nothing to do with fwrite
[15:36:43] *** Quits: rando25892 (~atler@user/rando25892) (Read error: Connection reset by peer)
[15:37:22] <NRK> btw, does anyone know why open() is at <fcntl.h> but close() is at <unistd.h> ?
[15:37:24] <bladerunner1> well the strncat error is still there
[15:37:47] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:37:57] <dave0> bladerunner1: change 1 to 2
[15:37:59] <bladerunner1> NRK it might be bad practice, Idk cuz I'm new to this lol
[15:38:35] <bladerunner1> ah thanks it finally works
[15:38:59] <fizzie> NRK: I imagine the reasoning is, you `open` only files (or at least things that have filesystem path names), but you `close` all kinds of things (sockets, unnamed pipes, etc.).
[15:39:27] *** Joins: ondrej008 (uid311009@id-311009.lymington.irccloud.com)
[15:39:30] <bladerunner1> that's a spoiler for me
[15:39:48] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[15:39:57] *** Joins: alch (~alch@151.68.191.239)
[15:42:25] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:42:37] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[15:42:53] *** Joins: ekathva_ (~ekathva@85-76-69-150-nat.elisa-mobile.fi)
[15:43:17] *** Quits: cosimone (~user@93.55.99.69) (Ping timeout: 240 seconds)
[15:43:38] *** Quits: ekathva (~ekathva@n14joep3rywnjx0h5-1.v6.elisa-mobile.fi) (Ping timeout: 252 seconds)
[15:43:44] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 272 seconds)
[15:44:24] *** Joins: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[15:44:50] *** Joins: cadmio (~cadmio@151.37.146.102)
[15:44:55] *** Joins: Darkcoal (~user@user/Darkcoal)
[15:45:13] <cadmio> but I've noticed that const int ARR_SIZE = 3; int arr[ARR_SIZE] = {1, 2, 3}; is considered error as well
[15:45:36] <dave0> cadmio: 'const' is a bad name... it really means 'read-only'
[15:45:38] *** Joins: King_julian (~King_juli@41.1.73.181)
[15:46:14] <dave0> cadmio: in c, you can (ab)use enum to truly make a constant   enum { ARR_SIZE = 3 };
[15:46:42] <dave0> eh it's not really abusing it... it's real handy
[15:46:53] <cadmio> the problem there was that static objects must be initialized with a constant value and not a variable
[15:47:12] <cadmio> the 'const' qualifier should mean that it doesn't change
[15:48:17] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Remote host closed the connection)
[15:48:23] <caze> You sound confused.
[15:48:31] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[15:49:14] <caze> const int ARR_SIZE = 3; int arr[ARR_SIZE] = {1, 2, 3}; is an error for the same reason as the first example.
[15:50:12] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:50:32] <cadmio> yes even if ARR_SIZE is a const value is not correct
[15:50:59] <caze> It's still a variable.
[15:51:35] <cadmio> ok
[15:52:48] *** gog` is now known as gog
[15:52:59] <NRK> cadmio: `const` doesn't mean compile time constant
[15:53:03] <NRK> ,cc const int n = rand();
[15:53:05] <candide> NRK: no output: n = 1804289383
[15:53:10] <fizzie> An array declarator is for a variable length array if the size expression is not an integer constant expression (C11 6.7.6.2p4), and an integer constant expression may only contain a limited list of things not including references to variables, const or not (6.6p6).
[15:56:05] <cadmio> what's the way to define a compile time constant?
[15:56:33] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[15:57:40] <bladerunner1> NRK you said about man 3 func_name for knowing what includes I need, but I dont have those entries
[15:58:24] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 250 seconds)
[15:59:04] <bladerunner1> well Ig I'll figure that out, thanks for lettin me know
[15:59:08] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[15:59:19] <NRK> bladerunner1: i think arch recently had some braindeath and stopped including manpages in their base system
[15:59:31] <NRK> u need to install some `man-db` or smth
[16:00:16] <bladerunner1> I have man-db
[16:00:28] *** Joins: King_julian (~King_juli@41.1.73.181)
[16:01:01] <NRK> then try searching for `posix-manpage` or `linux-manpage`
[16:01:17] <NRK> i dont remember the exact pkg name, but shud be similar
[16:01:38] <bladerunner1> oh ok
[16:02:57] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Ping timeout: 240 seconds)
[16:03:11] <cadmio> so const simly means for read-only but const variables can change their value
[16:04:12] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[16:04:54] *** Joins: thevishy (~Nishant@49.37.242.151)
[16:05:11] <petererer> Put the data onto a ROM to ensure it cannot be changed.
[16:05:16] *** Joins: ironman_ (~ironman@49.36.53.158)
[16:05:48] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[16:06:09] <fizzie> Enumeration constants (`enum { size = 8 };`) and preprocessor macros that expand to integer literals (`#define SIZE 8`) are the most common ways of giving symbolic names to integer constant expressions.
[16:06:14] <cadmio> I was reading the 2nd answer here: https://stackoverflow.com/questions/18848537/can-a-const-variable-be-used-to-declare-the-size-of-an-array-in-c
[16:06:20] <cadmio> and it says that it can be changed
[16:07:56] <fizzie> A const-qualified object might *change* (through some implementation-specific mechanism), but it can't be *changed* by assigning a new value to it.
[16:08:21] <cadmio> can you give me an example?
[16:08:25] <fizzie> C11 6.7.3p6: "If an attempt is made to modify an object defined with a const-qualified type through use of an lvalue with non-const-qualified type, the behavior is undefined."
[16:09:55] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Quit: mikoto-chan)
[16:14:06] *** Joins: arand___ (~arand___@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[16:15:24] <NRK> you can also have volatile const ptr
[16:15:25] <fizzie> Any examples (of a const-qualified object changing) would be pretty particular to a specific implementation. And I wouldn't take that SO example -- `const volatile int timer_tick_register; /* A CPU register. */` -- quite literally. At the very least in a realistic scenario, it'd have an `extern`. Otherwise it's a (tentative) definition, and it's not usual for those to become modified-by-magic objects.
[16:19:20] <cadmio> so it's not true that "it can change"
[16:22:36] *** Quits: slimbo (~qooupapn@user/slimbo) (Ping timeout: 240 seconds)
[16:23:51] <fizzie> If it can change, it would happen through some mechanism outside the scope of the standard (which is why you'd add `volatile` too). Attempting to change an object defined with the `const` qualifier by something like `const int i; *(int *) &i = 123;` is undefined by the standard.
[16:25:12] <fizzie> Here's the C99 rationale on the topic of what the `const` and `volatile` qualifiers are typically used for: https://0x0.st/oZPN.txt
[16:26:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:27:58] *** Joins: marvin\\ (~marvin\\@38.124.151.184)
[16:27:59] *** ChanServ sets mode: +o candide
[16:27:59] *** marvin\\ was kicked by candide (I don't think so)
[16:27:59] *** candide sets mode: +b *!*@38.124.151.184
[16:28:42] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 272 seconds)
[16:29:39] *** Joins: King_julian (~King_juli@41.1.73.181)
[16:31:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:32:40] *** Quits: bladerunner1 (~bladerunn@103.167.123.127) (Quit: WeeChat 3.4)
[16:32:40] *** Joins: gtlsgamr_ (~gtlsgamr@2400:8904::f03c:92ff:feee:b97d)
[16:33:15] *** Joins: pulse (~pulse@user/pulse)
[16:33:37] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 240 seconds)
[16:34:07] *** Joins: meator (~meator@user/meator)
[16:34:29] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:34:46] *** Joins: ymwm_ (~yingmanwu@110.85.121.251)
[16:35:08] <Dean> can denormalized values in float be more precise than normalized ones?
[16:35:26] *** Joins: RadimPavlik__ (~RadimPavl@176-74-132-138.netdatacomm.cz)
[16:37:37] *** Quits: ymwm (~yingmanwu@117.26.69.144) (Ping timeout: 256 seconds)
[16:38:26] <fizzie> It would be weird. If you had more bits available to put that extra precision in, why wouldn't you use them for normal numbers as well?
[16:38:50] *** Quits: RadimPavlik_ (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 272 seconds)
[16:39:17] <Dean> fizzie: i just found out that these things exist. i'm trying to wrap my head around it. XD
[16:39:17] <fizzie> Usually what (sub|de)normal numbers do is, they fill in the gap between 0 and the smallest normal number with exactly the same spacing there is between the smallest and second-smallest normal number.
[16:39:58] <Dean> so it's very precise?
[16:40:00] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:40:21] *** Parts: cadmio (~cadmio@151.37.146.102) (WeeChat 3.0)
[16:41:44] *** Quits: gtlsgamr_ (~gtlsgamr@2400:8904::f03c:92ff:feee:b97d) (Quit: Goodbye!)
[16:41:46] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Read error: Connection reset by peer)
[16:42:06] *** Joins: riposte (~finalripo@2403-5802-74-2--2000.ip6.aussiebb.net)
[16:42:11] *** Joins: dakshiq (~dakship@2400:8904::f03c:92ff:feee:b97d)
[16:42:16] <clarity> Usually precision is measured in bits
[16:42:24] <clarity> Going subnormal doesn't grant you any new bits
[16:42:28] *** Joins: King_julian (~King_juli@41.1.73.181)
[16:42:37] <clarity> And as the number gets smaller, you have fewer bits compared to normal floats
[16:42:45] *** Joins: magla (~gelignite@55d4843f.access.ecotel.net)
[16:42:58] <clarity> I'd describe it as a gradual loss of precision as the quantity approaches zero
[16:43:16] *** Quits: iomari891 (~iomari891@197.210.77.99) (Quit: WeeChat 3.3)
[16:43:16] <Dean> thank you clarity
[16:43:30] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[16:43:54] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.132)
[16:44:05] <Dean> what would be the distinct difference between a denormalized and normalized float be then? the denormalized one represents really really small values and the normalized ones larger ones?
[16:44:49] <Dean> and does devide by 0 in c (or devide by -0) just give infinity? I wrote a small program and got 1.#INF00
[16:46:25] <clarity> Division by zero is ub
[16:46:54] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 252 seconds)
[16:47:10] <Dean> ub?
[16:47:15] <clarity> undefined behavior
[16:47:29] <Dean> for floats?
[16:47:34] <clarity> For everything
[16:48:52] <Dean> I wrote this code: https://paste.debian.net/1233705/ and the value printed is 1.#INF00. does it mean the same as ub?
[16:49:15] *** Joins: King_julian (~King_juli@41.1.73.181)
[16:49:31] <clarity> ,ub
[16:49:31] <candide> Undefined behavior is behavior for which the C standard does not impose any requirements. This is to allow C the freedom to be implemented on systems with different architectures. Programs invoking undefined behavior may appear to compile and even run without errors at first, only to fail on another system, or even at a later time. If you want to write reliable code, don't use such behaviors.
[16:49:43] <NRK> ,cc -w size_t x = 100; printf("%zu", x / "zero");
[16:49:44] <candide> NRK: error: invalid operands to binary / (have 'size_t' {aka 'long unsigned int'} and 'char *')
[16:49:55] <Dean> aah ok i see.
[16:49:55] <fizzie> Dean: C doesn't actually specify all that much about floating-point arithmetic. An implementation may define the __STDC_IEC_559__ macro to indicate it also conforms to Annex F, which I think would include also the usual semantics for floating-point division by 0, i.e., resulting in either positive infinity, nan, or negative infinity, depending on x.
[16:50:05] <NRK> welp, need to cast
[16:50:24] <Dean> thank you clarity NRK and fizzie
[16:50:44] <NRK> my example was a troll
[16:50:52] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 272 seconds)
[16:50:56] <clarity> thank you for trolling
[16:50:57] <NRK> ,cc -w size_t x = 100; printf("%zu", x / (size_t)"zero");
[16:51:07] <candide> NRK: [Timed-out]
[16:51:49] <Dean> so it depends on the implementation but its not really portable and will at some point be ub. it should not be relied on to be inifity, that would be bad programming?
[16:52:17] <clarity> You can rely on whatever platform guarantees you want
[16:52:27] <clarity> It's not bad prgramming to do so
[16:52:36] <Dean> ok clarity thank you.
[16:52:49] <clarity> Just know the difference between guarantees made by C and guarantees made by something else
[16:52:50] <NRK> you often HAVE to
[16:52:50] <fizzie> And the difference between normal and subnormal floating-point numbers is, if normal numbers have the form ±1.xxxxx * 2^e (where 1.xxxxx is a binary fraction), then the subnormal ones are ±0.xxxxx * 2^emin (where 0.xxxxx is also a binary fraction, and emin is the lowest possible exponent for normal numbers).
[16:54:22] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[16:54:35] <Dean> thank you fizzie i think i must learn some more about this. is a strong mathematical background recommend for learning c properly? for java id didn't need to understand mathematics well, but it seems like for c it is important.
[16:57:52] <fizzie> You don't even have to use floats in the first place if you don't want to, it's not really a C language requirement. :)
[16:58:07] *** Joins: PeloPelo (~pelo@85.107.35.165)
[16:58:39] *** ironman_ is now known as ironman
[16:59:03] <fizzie> In Java's case, the math is pretty much the same except Java actually specifies all of those details.
[16:59:41] *** Quits: ironman (~ironman@49.36.53.158) (Quit: Leaving)
[17:00:10] <fizzie> https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.2.3 "A representation in this form is called normalized if m ≥ 2^(N-1); otherwise the representation is said to be subnormal."
[17:00:12] <candide> Title of fizzie's link: Chapter 4. Types, Values, and Variables
[17:00:16] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-162.cspire.com)
[17:00:35] <fizzie> (With an equivalent but slightly differently expressed way of putting it though.)
[17:02:18] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 256 seconds)
[17:02:39] *** Parts: PeloPelo (~pelo@85.107.35.165) ()
[17:03:49] <sham1> Dean: anyway yes, I'd say that having some ma th
[17:04:24] <sham1> Mathematics under one's belt is quite useful in general for programming, considering that CS for the most part is a subfield of applied mathematics
[17:04:36] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:05:48] *** Quits: brdb (~alarm@24.61.226.255) (Ping timeout: 240 seconds)
[17:06:34] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[17:06:48] *** Joins: LucaTM (~LucaTM@user/lucatm)
[17:07:07] <strajder> Dean, 0 doesn't belong to the domain of the function f(x)=1/x
[17:07:31] <strajder> in other words, there is no value 1/0
[17:07:51] <strajder> (this is in mathematics)
[17:07:57] *** Joins: brdb (~alarm@24.61.226.255)
[17:09:22] <sham1> Well you could restrict the domain such that one could define 1/x for x=0, although then you'd need to introduce either infinity or negative infinity to the codomain and that's not fun
[17:09:25] <Dean> ok thank you sham1 strajder and fizzie
[17:12:41] <roxlu> I'm trying to use gdb to figure out when/where a function is called from. I'm getting a stacktrace that doesn't show me enough info or maybe it does, but don't understand it :)  This is the stacktrace: https://gist.github.com/roxlu/582d923fc453fee75718da91a11f3403 any idea how/where-from the call to `register_library()` is made?
[17:12:42] <candide> Title of roxlu's link: gdb.log · GitHub
[17:12:42] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: Lost terminal)
[17:13:24] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[17:13:35] <sham1> That's C++, although I do suspect some kind of stack corruption
[17:14:34] <sham1> That's simply not enough activation frames
[17:14:47] <clarity> It might be enough?
[17:14:50] <roxlu> sham1: I don't think it's a stack corruption; the app works fine (I know that doesn't mean there is no stack corruption, but I think there is something else going on)
[17:15:54] <sham1> When does that occur?
[17:16:03] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c42a:2dad:bcf1:880f)
[17:16:03] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c42a:2dad:bcf1:880f) (Changing host)
[17:16:03] *** Joins: skapata (~Skapata@user/skapata)
[17:16:21] <sham1> Because one thing could be that register_library is an __attribute__((construct))
[17:16:40] *** Quits: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Quit: ZNC 1.8.2 - https://znc.in)
[17:16:51] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[17:17:38] <roxlu> sham1: ah! yes I think it is
[17:18:06] *** Quits: supakeen_test (~supakeen@2a01:4f9:c010:3f2a:1:1:3:42) (Quit: Bridge terminating on SIGTERM)
[17:18:10] <sham1> Alright, so it occurs whenever the global constructors are being called
[17:18:34] <roxlu> https://github.com/CESNET/UltraGrid/blob/master/src/lib_common.h#L139 <-
[17:19:18] <sham1> But that's of course a thing of the ABI that C++ alongside GNU C and clang C take advantage of
[17:19:29] <roxlu> When you use `__attribute__((construct))`, will that function be called automatically when a shared lib is loaded for example?
[17:19:57] <sham1> Yes
[17:20:00] *** Joins: supakeen_test (~supakeen@2a01:4f9:c010:3f2a:1:1:3:42)
[17:20:42] <roxlu> that explains a lot :)
[17:21:23] <roxlu> I'm looking into some projects and how they deal with modules/plugins. I didn't know how the plugins of this project were loaded automagically :)
[17:23:45] <sham1> There's also __attribute__((destructor)) which does the same thing except it's called when you unlink, or more likely, when the execution of the process image stops. I'm not sure whether they're also supposed to run when you exec(2) on POSIX or if just when you exit the main
[17:23:49] <roxlu> It's a nice solution but maybe not the best
[17:24:22] <sham1> I'd need to look into the system V ABI to see that
[17:25:08] *** Joins: King_julian (~King_juli@41.1.73.181)
[17:26:25] *** Quits: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se) (Remote host closed the connection)
[17:26:49] *** Joins: PeloPelo (~pelo@85.107.35.165)
[17:27:05] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[17:27:09] *** Joins: sh0ne (~sh0ne@178.237.217.167)
[17:28:07] <roxlu> it seems that `__attribute__((constructor))` also works w/o shared libs; e.g. when the modules are compiled statically. Is that correct?
[17:28:26] <sham1> Yes
[17:28:48] <sham1> Even when you statically link, you get t
[17:28:54] <sham1> You get the global constructors
[17:29:03] *** Quits: supakeen_test (~supakeen@2a01:4f9:c010:3f2a:1:1:3:42) (Quit: Bridge terminating on SIGTERM)
[17:29:32] *** Joins: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se)
[17:30:08] *** Quits: King_julian (~King_juli@41.1.73.181) (Ping timeout: 272 seconds)
[17:30:13] <roxlu> Ok so w/e I have a function with `__attribute__((constructor))` it will called before(?) `main()` is called?
[17:30:29] <sham1> Yes
[17:30:48] <sham1> roxlu: https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Function-Attributes.html
[17:31:02] <sham1> That's an old document but it does s
[17:31:06] <sham1> Hold true
[17:31:09] <clarity> It's dumb that G keeps bringing up that ancient version of the docs
[17:31:38] *** Joins: supakeen_test (~supakeen@python/site-packages/supakeen)
[17:31:47] <clarity> I think this is current version https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html
[17:32:12] *** Quits: ymwm_ (~yingmanwu@110.85.121.251) (Ping timeout: 240 seconds)
[17:32:39] *** Joins: ymwm_ (~yingmanwu@110.85.121.251)
[17:32:43] <sham1> Well that's probably the one G has indexed and is linked everywhere due to age and such
[17:33:08] <sham1> But yes, use the current docs
[17:33:36] <sham1> One can also use the info-pages if one would like to
[17:33:56] *** Joins: rando25892 (~homefame@user/rando25892)
[17:34:29] <roxlu> thanks for the links and info.
[17:35:51] *** Quits: King_jul1an (~King_juli@41.1.73.181) (Ping timeout: 252 seconds)
[17:36:27] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (Remote host closed the connection)
[17:38:00] <sham1> And alright, on further inspection __attribute__((destructor)) is only called with exit.
[17:39:42] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 252 seconds)
[17:40:50] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[17:40:54] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[17:45:22] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Changing host)
[17:45:22] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[17:45:56] <constxd> kings
[17:46:18] <sham1> Bishops
[17:46:37] *** Quits: ncrowl (~ncrowl@83-233-96-141.cust.bredband2.com) (Quit: leaving)
[17:46:52] *** Joins: ncrowl (~ncrowl@83-233-96-141.cust.bredband2.com)
[17:47:37] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:47:39] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[17:48:18] *** Joins: constxd_ (~brad@142.134.78.128)
[17:48:24] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:52:24] *** Quits: cromwell (~oliver@thunix.net) (Quit: WeeChat 3.4)
[17:52:46] *** Parts: PeloPelo (~pelo@85.107.35.165) ()
[17:53:14] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[17:53:25] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[17:56:53] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[17:58:10] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-162.cspire.com) (Read error: Connection reset by peer)
[17:59:51] *** Quits: bzng (~bzng4@2a02:60a0:102:4302:5924:659a:dd1e:fe31) (Quit: Leaving)
[18:00:53] *** Quits: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com) (Remote host closed the connection)
[18:03:29] *** Joins: pulse (~pulse@user/pulse)
[18:03:54] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Read error: Connection reset by peer)
[18:06:39] *** Joins: figrita (~figrita@2603-7080-9801-332f-5813-eeaf-976d-830a.res6.spectrum.com)
[18:07:34] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[18:08:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[18:08:46] *** Quits: constxd_ (~brad@142.134.78.128) (Ping timeout: 272 seconds)
[18:11:50] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Client Quit)
[18:13:42] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:14:18] *** Inline__ is now known as Inline
[18:15:24] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 240 seconds)
[18:16:11] *** Joins: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se)
[18:16:28] *** Joins: Klinda (~superleag@user/klinda)
[18:20:50] *** Joins: PeloPelo (~pelo@85.107.35.165)
[18:21:01] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[18:21:17] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[18:21:24] *** Quits: LaptopZombie (~LaptopZom@cpebc1401ed5823-cmbc1401ed5820.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[18:23:55] *** Joins: badsektor (~badsektor@user/badsektor)
[18:25:41] <PeloPelo> Hello, I'm trying to make a permutation program in C. I've looked for examples on internet but i couldn't understand examples. Do you know a good source for this project and projects like this?
[18:25:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[18:27:46] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Ping timeout: 272 seconds)
[18:28:01] *** candide sets mode: -o candide
[18:29:43] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:29:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[18:30:05] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[18:30:27] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[18:31:51] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[18:32:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:33:55] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.133)
[18:33:58] *** Joins: cincoswim (~cincoswim@cm-72-241-113-163.buckeyecom.net)
[18:35:32] <constxd> PeloPelo: what do you mean by permutation program
[18:36:21] <PeloPelo> I mean finding all permutation of a word
[18:37:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:37:51] <constxd> oh
[18:38:01] <constxd> yeah there are lots of examples out there
[18:38:47] <constxd> https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/
[18:38:50] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[18:38:53] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Remote host closed the connection)
[18:39:00] <pragma-> geeksforgeeks is such shit
[18:39:11] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[18:39:29] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[18:39:31] <PeloPelo> I'm a really newbie in programming
[18:39:32] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[18:40:36] <PeloPelo> And can you recommend a good resource for C?
[18:41:15] <PeloPelo> Which includes instructional projects like this
[18:41:19] <Inline> http://rosettacode.org/wiki/Permutations#C
[18:41:56] <ondrej008> PeloPelo: Rosetta Code has lots of various tasks done in C (and other languages), could look at some of those
[18:42:03] <PeloPelo> Oh, thank you
[18:42:10] <PeloPelo> :-[
[18:42:30] <ondrej008> turn that frown upside down
[18:42:54] *** Joins: Keikai (~keikai@45.94.5.9)
[18:45:21] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[18:45:30] *** Quits: ymwm_ (~yingmanwu@110.85.121.251) (Ping timeout: 272 seconds)
[18:46:18] *** Joins: gce108 (~gce@user/gce108)
[18:48:17] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (Ping timeout: 240 seconds)
[18:48:57] *** Parts: Keikai (~keikai@45.94.5.9) ()
[18:49:06] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[18:49:36] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[18:50:44] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[18:52:45] *** Quits: on^ (~on@50.232.121.75) (Remote host closed the connection)
[18:56:12] *** Joins: cruncher (~cruncher@user/cruncher)
[18:56:15] *** Joins: kts (~kts@103.73.237.233)
[18:56:53] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[18:59:12] *** Joins: Satin (uid193953@user/Seten)
[18:59:48] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:05:52] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[19:06:58] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 256 seconds)
[19:07:19] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:07:25] <CodeAgain> Heyy, why a binary compiled with gcc 11.2.0 is not linking a binary using the floor function to libm?
[19:07:50] <CodeAgain> I mean, it's compiling, generating the binary and working
[19:07:57] <constxd> what
[19:07:58] <CodeAgain> But running ldd it doesn't show libm
[19:08:14] *** Quits: gog (~ada@user/gog) (Read error: Connection reset by peer)
[19:08:34] <constxd> afaik glibc math stuff is just in libc
[19:08:51] *** Quits: KevinX (~KevinX@user/KevinX) (Read error: Connection reset by peer)
[19:09:16] <CodeAgain> Well, and should it be? I mean, the man pages and everything tell to link with -lm
[19:09:39] *** Joins: KevinX (~KevinX@user/KevinX)
[19:10:28] *** Joins: gog (~ada@user/gog)
[19:11:08] <constxd> yeah it's just an implementation detail, from the user perspective you should assume they're in libm and supply the -lm option
[19:12:26] *** Quits: zer0x_ (~zer0x@58.186.217.233) (Remote host closed the connection)
[19:12:45] *** Joins: zer0x_ (~zer0x@58.186.217.233)
[19:16:37] *** Quits: kts (~kts@103.73.237.233) (Ping timeout: 240 seconds)
[19:17:02] *** Joins: kts (~kts@103.73.237.153)
[19:18:26] *** Quits: KevinX (~KevinX@user/KevinX) (Ping timeout: 272 seconds)
[19:20:26] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:20:29] *** Joins: off^ (~off@50.232.121.75)
[19:21:27] *** Quits: vt (~vt@osa.vbc.su) (Remote host closed the connection)
[19:22:21] *** Joins: vt (~vt@osa.vbc.su)
[19:23:18] *** Quits: PeloPelo (~pelo@85.107.35.165) (Read error: No route to host)
[19:23:23] *** Quits: sh0ne (~sh0ne@178.237.217.167) (Quit: Textual IRC Client: www.textualapp.com)
[19:23:24] *** Quits: cincoswim (~cincoswim@cm-72-241-113-163.buckeyecom.net) (Ping timeout: 256 seconds)
[19:26:24] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:29:09] *** Joins: seninha (~chatzilla@user/seninha)
[19:30:46] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.133) (Ping timeout: 256 seconds)
[19:33:17] <baltazar> hi! is it possible to determine from which network interface a message came from when using recvfrom?
[19:35:16] *** Quits: alch (~alch@151.68.191.239) (Read error: Connection reset by peer)
[19:36:40] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.133)
[19:37:01] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 245 seconds)
[19:37:29] *** Joins: cadmio (~cadmio@rm-19-50-89.service.infuturo.it)
[19:37:41] *** ChanServ sets mode: +o candide
[19:37:41] *** candide sets mode: -q *!*@38.124.151.184
[19:38:23] <cadmio> so regarding the const qualifier I've read this: it makes the value read-only through that symbol; it does not prevent the value from being modified through some other means internal (or even external) to the program
[19:39:23] *** Joins: alch (~alch@151.68.220.92)
[19:40:04] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[19:41:42] *** Quits: l4s8g_ (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Quit: l4s8g_)
[19:42:55] *** Joins: KevinX (~KevinX@user/KevinX)
[19:44:36] <rcf> baltazar: not reliably, you'd want to bind separate sockets to each interface
[19:45:02] *** Quits: zer0x_ (~zer0x@58.186.217.233) (Ping timeout: 272 seconds)
[19:46:18] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.133) (Ping timeout: 272 seconds)
[19:46:55] <clarity> Hmph, I just implemented permutations..
[19:47:10] <clarity> It feels too bloated.
[19:47:21] <clarity> Oh well, whatever
[19:47:27] *** Quits: kts (~kts@103.73.237.153) (Quit: Konversation terminated!)
[19:47:35] <baltazar> can't I somehow deduce which interface would be used from the routing table based on IP?
[19:47:58] <baltazar> honestly not sure which would be more painful, separate sockets or this
[19:49:05] <rcf> That would only work for sending, how things are routed to you may be different.
[19:49:22] *** Joins: cryptonector (~nico@24.28.108.183)
[19:50:17] *** Joins: kts (~kts@103.73.237.153)
[19:50:46] <baltazar> rcf: I mean, I kinda assume it would be the same. I only need the interface because I need to reply to the same address, and the payload is supposed to include my own ip & mac
[19:50:58] <baltazar> so technically I am sending
[19:51:00] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[19:51:50] <clarity> Meh I wanted to give this to PeloPelo http://paste.dy.fi/NFQ/plain
[19:53:54] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 272 seconds)
[19:54:37] <rcf> baltazar: in that case it'd be fine, the problem is that accessing the routing table from C is extremely annoying and OS-specific.
[19:54:42] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[19:55:49] *** Joins: zenstoic (uid461840@id-461840.hampstead.irccloud.com)
[19:57:50] <baltazar> rcf: shame
[19:58:34] *** Parts: Burgundy (~NA@86.121.143.206) ()
[19:58:54] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:59:25] <baltazar> well, I might just not care instead. I think the ip field is not that necessary
[19:59:31] *** Quits: thevishy (~Nishant@49.37.242.151) (Quit: Leaving)
[20:00:05] <baltazar> tbf I don't understand why it's there in the first place
[20:01:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:02:44] *** Joins: mahmutov (~mahmutov@5.176.30.6)
[20:05:29] *** Joins: mceldeen (~mceldeen@h66-222-117-47.mdsnwi.tisp.static.tds.net)
[20:10:02] *** Quits: mceldeen (~mceldeen@h66-222-117-47.mdsnwi.tisp.static.tds.net) (Ping timeout: 240 seconds)
[20:10:24] <MrMobius> im trying to run the CINT C interpreter and getting the error "libcint.so: cannot open shared object file: No such file or directory." the .so file exists in the same directory as the program and LD_LIBRARY_PATH points to it. any idea what's wrong?
[20:10:27] *** Joins: toulene (~toulene@user/toulene)
[20:10:52] *** Joins: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8)
[20:11:00] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Ping timeout: 256 seconds)
[20:11:43] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[20:12:20] *** Quits: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8) (Remote host closed the connection)
[20:12:41] <ondrej008> MrMobius: what's the entire command you're using?
[20:13:08] *** Parts: cadmio (~cadmio@rm-19-50-89.service.infuturo.it) (WeeChat 3.0)
[20:13:10] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[20:13:52] *** Joins: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8)
[20:14:13] <MrMobius> ondrej008, just ./cint
[20:14:31] <MrMobius> nvm, just symbol export problem
[20:17:27] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[20:18:22] *** Joins: savolla (~quassel@95.10.239.22)
[20:18:39] *** Quits: rando25892 (~homefame@user/rando25892) (Ping timeout: 252 seconds)
[20:19:52] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 272 seconds)
[20:20:07] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[20:20:10] *** Joins: SaltHillStroller (~SaltHillS@199.249.111.186)
[20:20:58] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-add4-7d9d-15c4-110a.fixed6.kpn.net)
[20:22:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[20:22:17] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[20:24:31] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[20:24:42] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[20:25:39] *** Joins: ymwm_ (~yingmanwu@110.85.121.251)
[20:25:44] *** Quits: SaltHillStroller (~SaltHillS@199.249.111.186) (Ping timeout: 256 seconds)
[20:25:54] <rcf> baltazar: I suspect for the benefit of deficient platforms without a recvfrom() equivalent for connectionless protocols
[20:26:08] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.133)
[20:26:17] *** Joins: SaltHillStroller (~SaltHillS@199.249.111.186)
[20:26:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:26:54] <baltazar> rcf: I guess... still kinda stupid though (are there such dumb platforms?)
[20:26:56] *** Quits: savolla (~quassel@95.10.239.22) (Remote host closed the connection)
[20:26:57] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-add4-7d9d-15c4-110a.fixed6.kpn.net) (Ping timeout: 240 seconds)
[20:27:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[20:29:42] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[20:30:09] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[20:30:48] *** Joins: adip (~adip@dil199.neoplus.adsl.tpnet.pl)
[20:30:50] *** Joins: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl)
[20:31:17] *** Quits: SaltHillStroller (~SaltHillS@199.249.111.186) (Ping timeout: 240 seconds)
[20:34:55] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[20:36:11] *** Quits: ymwm_ (~yingmanwu@110.85.121.251) (Remote host closed the connection)
[20:37:05] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[20:37:22] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[20:37:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[20:37:35] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Read error: Connection reset by peer)
[20:37:54] *** Joins: gareppa (~gareppa@user/gareppa)
[20:37:54] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[20:38:52] *** Joins: tiotags (~tiotags@user/tiotags)
[20:39:19] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:39:54] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Ping timeout: 256 seconds)
[20:40:46] *** Quits: kts (~kts@103.73.237.153) (Ping timeout: 245 seconds)
[20:41:08] <rcf> baltazar: I’ve never encountered one despite writing network software even on MS-DOS, so there can’t be much of an excuse elsewhere. Depending on the protocol it might have been developed by simply paranoid people who assumed the worst, or back in the days when UDP wasn’t yet formalized.
[20:41:14] *** Joins: kts (~kts@103.73.237.220)
[20:42:12] *** Quits: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[20:42:12] *** Quits: adip (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[20:42:35] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[20:42:45] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Read error: Connection reset by peer)
[20:43:00] <rcf> Perhaps they assumed that the approach would be totally different and isolated from the raw IP datagram APIs it was meant to replace in normal code
[20:44:02] *** Joins: adip (~adip@dil199.neoplus.adsl.tpnet.pl)
[20:44:04] *** Joins: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl)
[20:44:57] *** Quits: RadimPavlik__ (~RadimPavl@176-74-132-138.netdatacomm.cz) (Read error: Connection reset by peer)
[20:45:48] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: brb)
[20:45:51] *** Joins: constxd_ (~brad@142.134.78.128)
[20:47:17] *** Joins: rgrinberg (~textual@187.223.141.66)
[20:47:31] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Quit: Leaving)
[20:47:34] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[20:48:58] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[20:50:46] <cuppajoe> I am practicing for a CTF with reverse engineering, but every binary I encounter generates hundreds of lines of assembly. Are there any tools I can use to better understand what's going on? I can understand short assembly programs with debug symbols, but these longer programs with no symbols are really hard.
[20:51:43] <supakeen_test> Getting a good disassembler that allows you to take notes, rename addresses and routines is the only thing that helps.
[20:52:30] *** Joins: moog_ (~moog@98.97.83.104)
[20:52:34] <cuppajoe> I am just using objdump -d. What else can I use?
[20:52:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:53:13] <supakeen_test> As far as open source goes: radare2, otherwise most tooling is paid: binaryninja, hopper, IDA, etc.
[20:53:31] <cuppajoe> okay, I'll look into those
[20:53:33] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[20:55:20] *** Quits: moog__ (~moog@107.126.53.115) (Ping timeout: 272 seconds)
[20:55:48] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[20:55:54] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:55:57] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[20:56:13] *** Joins: henistein (~henistein@2001:8a0:fc95:1d01:a32a:2ff3:ad47:ef1d)
[20:57:21] *** Joins: Akuli (~Akuli@82-203-165-79.bb.dnainternet.fi)
[20:58:17] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[21:00:15] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[21:00:28] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[21:01:34] *** Joins: moog__ (~moog@98.97.83.104)
[21:02:43] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[21:03:10] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 260 seconds)
[21:04:18] *** Quits: moog_ (~moog@98.97.83.104) (Ping timeout: 252 seconds)
[21:04:53] *** Joins: ConCarne (~ConCarne@118.107.139.188)
[21:06:51] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:07:32] <bionade24> Are there any reasons why one would not call closedir() at the end of the function or is this clearly a bug when the DIR var is in the function's scope?
[21:08:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:09:25] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:09:56] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[21:12:12] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:13:00] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[21:13:16] *** Quits: rgrinberg (~textual@187.223.141.66) (Read error: Connection reset by peer)
[21:13:33] *** Joins: rgrinberg (~textual@187.223.141.66)
[21:15:33] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:16:25] *** Quits: constxd_ (~brad@142.134.78.128) (Ping timeout: 256 seconds)
[21:16:29] <cehteh> its not passed up? then its likely a bug
[21:18:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:19:01] *** Quits: baltazar (~baltazar@176-241-40-35.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:20:20] *** Quits: off^ (~off@50.232.121.75) (Remote host closed the connection)
[21:20:35] *** Joins: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu)
[21:21:13] *** Parts: ConCarne (~ConCarne@118.107.139.188) (Leaving)
[21:21:57] *** Quits: meandrain (~meandrain@2a02:2f0e:f70f:6e00:cd89:fba2:a689:f803) (Ping timeout: 240 seconds)
[21:26:36] *** Joins: wand (~user@gateway/tor-sasl/wand)
[21:26:51] *** Quits: malloy (~jimery@116.30.220.175) (Read error: Connection reset by peer)
[21:26:52] *** Joins: Akiva (~Akiva@user/Akiva)
[21:27:12] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[21:28:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e48f:b916:ea95:460d)
[21:31:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:32:35] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[21:33:14] *** Joins: malloy (~jimery@116.30.221.173)
[21:34:50] * wand whispers "naked main()"
[21:36:03] *** Quits: arand___ (~arand___@c-0a01235c.05-662-7570703.bbcust.telenor.se) (Quit: Client closed)
[21:36:45] *** Quits: magla (~gelignite@55d4843f.access.ecotel.net) (Quit: Stay safe!)
[21:37:51] *** candide sets mode: -o candide
[21:38:36] *** Joins: seninha (~chatzilla@user/seninha)
[21:38:57] *** Quits: kts (~kts@103.73.237.220) (Ping timeout: 252 seconds)
[21:40:16] *** Quits: rgrinberg (~textual@187.223.141.66) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:41:26] *** Joins: strajder (~strajder@user/strajder)
[21:45:39] *** Joins: King_julian (~King_juli@41.1.137.161)
[21:47:12] *** Quits: cruncher (~cruncher@user/cruncher) (Ping timeout: 252 seconds)
[21:47:46] *** Joins: masoudd (~masoudd@user/masoudd)
[21:49:01] *** Joins: cleverrness (~Clevernes@87.249.138.215)
[21:50:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[21:51:42] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[21:52:18] *** Joins: savolla (~quassel@95.10.239.22)
[21:52:18] *** Quits: savolla (~quassel@95.10.239.22) (Client Quit)
[21:52:54] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Read error: Connection reset by peer)
[21:53:24] *** Joins: ik (uid540109@id-540109.uxbridge.irccloud.com)
[21:53:31] *** Joins: vysn (~vysn@user/vysn)
[21:53:42] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[21:57:13] *** Quits: henistein (~henistein@2001:8a0:fc95:1d01:a32a:2ff3:ad47:ef1d) (Ping timeout: 256 seconds)
[21:57:28] *** Joins: off^ (~off@50.232.121.75)
[21:59:52] *** Quits: fe23 (~fe23@2409:8a34:466:6010:fc00:bfe9:f038:cee7) (Quit: fe23)
[22:00:44] *** Joins: Alhazred (~Alhazred@86.106.74.43)
[22:03:02] *** Joins: cleverness__ (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[22:03:36] *** Quits: raym (~raym@user/raym) (Quit: brb)
[22:05:21] *** Quits: cleverrness (~Clevernes@87.249.138.215) (Ping timeout: 252 seconds)
[22:05:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:07:38] *** Joins: raym (~raym@user/raym)
[22:07:44] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:07:52] *** Quits: cleverness__ (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Client Quit)
[22:09:38] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:10:14] *** Joins: meator (~meator@user/meator)
[22:11:21] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[22:14:16] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[22:15:18] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:16:28] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[22:18:46] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[22:23:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[22:23:11] *** Quits: King_julian (~King_juli@41.1.137.161) (Quit: Lost terminal)
[22:25:56] *** Joins: King_jul1an (~King_juli@41.1.137.161)
[22:26:21] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:27:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[22:27:45] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:30:49] *** Quits: Inline (~Inline@p200300cd470c9c002556fbf58fa37daf.dip0.t-ipconnect.de) (Quit: Leaving)
[22:31:26] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[22:31:32] *** Joins: wlemuel_ (~wlemuel@210.22.124.110)
[22:31:43] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:32:12] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:32:21] *** Quits: wlemuel_ (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:32:26] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:32:50] *** Joins: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7)
[22:33:28] *** Joins: Inline (~Inline@p200300cd470c9c002556fbf58fa37daf.dip0.t-ipconnect.de)
[22:35:29] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[22:35:30] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[22:35:30] *** Joins: Teukka (~teukka@user/Teukka)
[22:36:31] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:36:49] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:36:49] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[22:37:10] *** Joins: tejr (~tejr@user/tejr)
[22:37:32] *** Joins: bindu (~bindu@user/bindu)
[22:38:01] *** Quits: KevinX (~KevinX@user/KevinX) (Read error: Connection reset by peer)
[22:38:40] *** Quits: eddof13 (~eddof13@2806:102e:12:64:a0cc:1315:5073:f3f7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:39:18] *** Joins: zop911 (~zop9114@95.59.154.69)
[22:40:17] *** Joins: KevinX (~KevinX@user/KevinX)
[22:41:02] <zop911> best book for learning C?
[22:41:06] <zop911> K&R?
[22:42:19] <sham1> K&R is a classic but it's also quite dated, so while it is a good book to learn from, I'd at least also try to supplement it by something more modern
[22:42:47] <cehteh> you know other programmming languages already?
[22:46:12] <bionade24> Hello, I get unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010002 during compilation. How can I fix that?
[22:47:14] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[22:47:26] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[22:47:52] *** Joins: LaptopZombie (~LaptopZom@cpe84948c379593-cm84948c379590.cpe.net.cable.rogers.com)
[22:48:12] <zop911> cehteh, NO
[22:49:52] *** Quits: zenstoic (uid461840@id-461840.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:50:34] <cehteh> then a) C might be not a good start   b) other things than plain C knowlege are much more important, algorithms/datastructures in general, problem solving skills
[22:56:23] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:58:34] *** Joins: KevinX (~KevinX@user/KevinX)
[23:00:26] *** Quits: LaptopZombie (~LaptopZom@cpe84948c379593-cm84948c379590.cpe.net.cable.rogers.com) (Quit: Konversation terminated!)
[23:04:28] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:06:06] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:07:14] *** Quits: King_jul1an (~King_juli@41.1.137.161) (Ping timeout: 256 seconds)
[23:11:48] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[23:15:57] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Ping timeout: 240 seconds)
[23:18:00] *** Joins: basedovertime (~basedbase@197.1.115.89)
[23:19:42] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9d51-e062-85af-d5a1.res6.spectrum.com)
[23:22:04] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-162.cspire.com)
[23:26:33] *** Joins: magla (~gelignite@55d4843f.access.ecotel.net)
[23:27:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:27:38] *** Quits: zop911 (~zop9114@95.59.154.69) (Ping timeout: 256 seconds)
[23:27:45] *** Joins: zop911 (~zop9114@95.59.154.69)
[23:28:05] *** Joins: King_jul1an (~King_juli@41.1.137.161)
[23:28:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:28:56] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[23:29:56] *** Lord_of_Life_ is now known as Lord_of_Life
[23:30:44] <ioxzev1z> zop911, "Modern C"
[23:31:03] <clarity> n1256.html is pretty good
[23:31:36] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[23:32:48] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[23:33:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:34:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:34:44] <twkm> the standard isn't particulaly good at teaching.
[23:35:30] *** Quits: alch (~alch@151.68.220.92) (Read error: Connection reset by peer)
[23:38:44] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (Ping timeout: 272 seconds)
[23:39:03] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[23:39:42] *** Joins: alch (~alch@151.68.145.190)
[23:40:55] *** Joins: based-overtime (~basedbase@197.1.115.89)
[23:40:55] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (Quit: 420)
[23:40:55] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Quit: ZNC 1.8.2 - https://znc.in)
[23:43:12] *** Quits: avar (avar@vm.nix.is) (Quit: Lost terminal)
[23:43:53] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[23:44:00] *** Joins: avar (avar@vm.nix.is)
[23:44:32] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[23:45:04] *** Quits: basedovertime (~basedbase@197.1.115.89) (Ping timeout: 272 seconds)
[23:46:41] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[23:47:10] *** Joins: nitrix (~nitrix@user/nitrix)
[23:49:05] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.133) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[23:56:36] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
