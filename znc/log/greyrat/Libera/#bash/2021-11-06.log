[00:00:48] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Remote host closed the connection)
[00:02:49] <Bayes> any advice on how to document my custom function?
[00:03:43] *** Joins: d630 (~d630@user/d630)
[00:04:22] <izabera> i wrote a thing to detect emoji support
[00:04:24] <izabera> sorta
[00:05:18] <izabera> https://termbin.com/ecrg  it asks your terminal how wide each character was
[00:10:52] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:11:19] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:14:15] <izabera> i needed this because i have a ton of logs with some sort of a thread id, and it's hard for my eyes to tell them apart in decimal or hex or whatever, so i figured i'd assign a random emoji to each thread, but this of course would only look good if they were all the same size
[00:17:25] <knstn> geirha: I think the difference between "sudo su" and "su" is that the first is logged, the latter not.
[00:18:44] <geirha> you mean between sudo and su. That may be, but that's surely configurable
[00:18:59] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[00:20:01] *** Joins: n4dir (~user@i59F77C5F.versanet.de)
[00:20:16] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Client Quit)
[00:20:54] <docmax> hi there
[00:20:54] <peterrooney> izabera: what about assigning a different color to each line according to a hash of that thread id?
[00:21:16] <docmax> i need to cut 4-2.1.1 with a glob
[00:21:41] <docmax> so that i get 4-2 only.. or any X-Y
[00:21:42] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 260 seconds)
[00:21:57] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[00:22:03] <izabera> peterrooney: that's limited to a handful of colours, or it gets very hard to tell them apart
[00:22:38] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Remote host closed the connection)
[00:23:15] *** Joins: ravan (~ravan@42.201.198.151)
[00:23:38] <knstn> # echo "4-2.1.1.1" | cut -f1 -d.
[00:23:39] <shbot> knstn: 4-2
[00:24:01] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[00:24:08] <geirha> "${var%%.*}"
[00:24:10] * knstn facepalm
[00:24:11] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Remote host closed the connection)
[00:24:20] <knstn> I missed the *glob* part...
[00:25:57] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[00:26:03] *** Quits: d630 (~d630@user/d630) (Quit: quit)
[00:26:16] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Remote host closed the connection)
[00:26:43] <docmax> geirha, thx
[00:27:09] *** Joins: d630 (~d630@user/d630)
[00:27:20] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[00:28:06] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[00:31:26] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[00:31:54] *** Quits: karabaja4 (~karabaja4@dh207-92-149.xnet.hr) (Remote host closed the connection)
[00:34:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:34:24] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[00:35:47] *** Joins: Hackerpcs (~user@user/hackerpcs)
[00:38:21] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[00:38:41] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[00:39:11] *** Joins: NoelFlantier7 (~Hubert@gifi.cassossie.net)
[00:39:16] *** Joins: Maxattax97 (~max@2603:900a:1501:a7ca::77a)
[00:39:38] *** Quits: d630 (~d630@user/d630) (Quit: quit)
[00:39:52] *** Joins: d630 (~d630@user/d630)
[00:40:59] *** Quits: NoelFlantier (~Hubert@gifi.cassossie.net) (Ping timeout: 265 seconds)
[00:45:02] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[00:45:14] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[00:46:15] <nickdiazswag209> 12
[00:46:44] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:a1f5:cc62:fd43:17a7) (Remote host closed the connection)
[00:47:03] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[00:47:43] *** Quits: ravan (~ravan@42.201.198.151) (Quit: Leaving)
[00:49:58] <nickdiazswag209> ignore that ^
[00:50:25] <lopid> fucking can't
[00:50:39] *** Parts: iconoclasthero_ (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[00:51:17] *** Quits: guardian (~guardian@planet-d.net) (Ping timeout: 268 seconds)
[00:53:18] <wiscii> it is not the answer but the questionn which drives you mad! besides, the answer is 42 not 12
[00:53:52] *** Joins: MenschZwoNull__ (~MenschZwo@p200300c8571ac600bfdcfbcfe806c4fc.dip0.t-ipconnect.de)
[00:54:02] *** Joins: tsp_ (~tsp@srv1.xen.prgmr.com)
[00:54:09] *** Quits: MenschZwoNull_ (~MenschZwo@p200300c8571ac600bfdcfbcfe806c4fc.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[00:54:11] *** Quits: tsp (~tsp@srv1.xen.prgmr.com) (Quit: ZNC - http://znc.in)
[00:54:14] *** Joins: dreinull0 (~dreinull@static.50.114.119.168.clients.your-server.de)
[00:54:31] *** Joins: guardian (~guardian@planet-d.net)
[00:55:28] *** Joins: Papa_ (~papa@user/papa)
[00:56:03] *** Joins: starz_ (starz@2001:41d0:8:4bd3::1)
[00:56:11] *** Quits: mindhunter (mindhunter@triton.blinkenshell.org) (Ping timeout: 264 seconds)
[00:56:12] *** Joins: _koolazer (~koo@user/koolazer)
[00:56:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:56:15] *** Joins: tetra (~trane@login.redpill-linpro.com)
[00:56:17] *** Joins: zedde (~mircwars@217-115-51-247.cust.bredband2.com)
[00:56:33] *** Joins: tolecnal_ (tolecnal@login.xiro.net)
[00:56:34] *** Joins: dka_ (~code-is-a@ns3059207.ip-193-70-33.eu)
[00:56:39] *** Joins: depesz_ (~quassel@lana.depesz.com)
[00:56:39] *** Joins: FuraiTHD (~Furai@cookiehoster.furai.pl)
[00:56:41] *** Joins: slaughtr (~slaughter@europa.whatbox.ca)
[00:56:43] *** Joins: nf__ (~n@monade.li)
[00:56:43] *** Quits: dreinull (~dreinull@static.50.114.119.168.clients.your-server.de) (Read error: Connection reset by peer)
[00:56:43] *** Quits: papa (~papa@user/papa) (Ping timeout: 246 seconds)
[00:56:43] *** Quits: dale (dale@user/dale) (Ping timeout: 246 seconds)
[00:56:43] *** dreinull0 is now known as dreinull
[00:56:46] *** Joins: e36freak_ (~e36freak@user/e36freak)
[00:56:47] *** Quits: raz (~raz@user/raz) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: mcint (mcint@user/mcint) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: trane (~trane@login.redpill-linpro.com) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: varazir (~mircwars@217-115-51-247.cust.bredband2.com) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: Fernando-Basso (~fernandob@2001:470:69fc:105::d1d4) (Ping timeout: 246 seconds)
[00:56:49] *** Quits: lkhn (~lkhn@user/lkhn) (Ping timeout: 246 seconds)
[00:56:53] *** Joins: xtor (~xtor@192.99.217.240)
[00:56:56] *** Joins: Enissay2 (~Enissay@user/enissay)
[00:57:07] *** Joins: dale (dale@user/dale)
[00:57:15] *** Joins: _fsg (^^@2600:3c00::f03c:92ff:fec6:da18)
[00:57:16] *** Quits: tamz[m] (~tamzmatri@2001:470:69fc:105::9d6d) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: ForeverNoob[m] (~foreverno@2001:470:69fc:105::8c6) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: aaro (aaro@user/aaro) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: CarlFK (~carlfk@2001:470:69fc:105::5d8) (Ping timeout: 268 seconds)
[00:57:18] *** Joins: Chex_ (~Chex@sleepl.northnook.ca)
[00:57:22] *** Joins: hesco2 (~hesco@209.195.11.75)
[00:57:39] *** Quits: nf (~n@monade.li) (Killed (NickServ (GHOST command used by nf__)))
[00:57:42] *** nf__ is now known as nf
[00:57:43] *** Joins: mindhunter (~mindhunte@triton.blinkenshell.org)
[00:57:45] *** Joins: tofran0 (~tofran@37.189.158.134)
[00:57:46] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Ping timeout: 246 seconds)
[00:57:46] *** Quits: tolecnal (tolecnal@login.xiro.net) (Ping timeout: 246 seconds)
[00:57:46] *** Quits: depesz (~quassel@lana.depesz.com) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: extor (~xtor@192.99.217.240) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: creme[m] (~creme@2001:470:69fc:105::31c8) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: Bilge (~u@2001:41d0:1:e300:0:1:fee1:900d) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: mz` (~mz`@user/mz/x-8532539) (Ping timeout: 246 seconds)
[00:57:49] *** Joins: Bilge- (~u@2001:41d0:1:e300:0:1:fee1:900d)
[00:58:04] *** Quits: prime (~prime@user/prime) (Ping timeout: 268 seconds)
[00:58:23] *** Quits: modobasico (~modobasic@2001:470:69fc:105::1:1bc) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: starz (~starz@2001:41d0:8:4bd3::1) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: pocketprotector- (~pocketpro@user/pocketprotector) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Enissay (~Enissay@user/enissay) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: e36freak (~e36freak@user/e36freak) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: anak0rang[m] (~M9hsmatri@2001:470:69fc:105::1:15fc) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: mrjpaxton[m] (~mrjpaxton@user/mrjpaxtonm/x-9268659) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: glider_ (~glider@user/glider) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: litheum (~kolbe@user/kolbe) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Chex (~Chex@user/chex) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Bikooo2[m] (~bikooo2ma@2001:470:69fc:105::1:1962) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: lautre[m] (~lautreg@2001:470:69fc:105::311f) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: hesco1 (~hesco@209.195.11.75) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: fsg (zzzzz@2600:3c00::f03c:92ff:fec6:da18) (Ping timeout: 264 seconds)
[00:58:24] *** tofran0 is now known as tofran
[00:58:29] *** Quits: dlam (~dlam@dlam.me) (Ping timeout: 246 seconds)
[00:58:59] *** Joins: litheum (~kolbe@user/kolbe)
[00:59:03] *** Joins: dlam (~dlam@dlam.me)
[00:59:05] *** Joins: pocketprotector (~pocketpro@user/pocketprotector)
[00:59:32] *** Joins: mcint1 (mcint@pox.ocf.berkeley.edu)
[00:59:38] *** Joins: prime (~prime@user/prime)
[00:59:49] *** Joins: mz` (~mz`@user/mz/x-8532539)
[01:00:05] *** Quits: armands (~armands@46.109.8.165) (Remote host closed the connection)
[01:00:05] *** Joins: acegallagher (~Ace@174-16-184-4.hlrn.qwest.net)
[01:00:15] *** slaughtr is now known as slaughter
[01:00:27] *** Joins: armands (~armands@46.109.8.165)
[01:00:59] *** Joins: modobasico (~modobasic@2001:470:69fc:105::1:1bc)
[01:01:54] *** Quits: H3dn1ng_ (~H3dn1ng@185.213.154.236) (Quit: leaving)
[01:02:24] *** Joins: aaro (aaro@user/aaro)
[01:03:27] *** Joins: glider (~glider@user/glider)
[01:03:38] *** Quits: mcint1 (mcint@pox.ocf.berkeley.edu) (Changing host)
[01:03:38] *** Joins: mcint1 (mcint@user/mcint)
[01:03:53] *** Quits: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net) (Read error: Connection reset by peer)
[01:04:01] *** Joins: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net)
[01:04:19] *** Joins: ForeverNoob[m] (~foreverno@2001:470:69fc:105::8c6)
[01:04:28] *** Joins: tamz[m] (~tamzmatri@2001:470:69fc:105::9d6d)
[01:05:22] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 268 seconds)
[01:05:58] *** mcint1 is now known as mcint
[01:06:53] *** Quits: armands (~armands@46.109.8.165) (Remote host closed the connection)
[01:07:15] *** Joins: armands (~armands@46.109.8.165)
[01:07:21] *** Joins: Fernando-Basso (~fernandob@2001:470:69fc:105::d1d4)
[01:07:31] *** Joins: lkhn (~lkhn@user/lkhn)
[01:08:02] *** Quits: jasper_ (~user@styria.daemonized.org) (Quit: jasper_)
[01:08:45] *** Joins: jasper_ (~user@styria.daemonized.org)
[01:11:13] *** Joins: mrjpaxton[m] (~mrjpaxton@user/mrjpaxtonm/x-9268659)
[01:13:38] *** Joins: anak0rang[m] (~M9hsmatri@2001:470:69fc:105::1:15fc)
[01:14:16] *** Joins: nickdiazswag209 (~bjpenn_@55.sub-174-194-206.myvzw.com)
[01:16:43] *** Joins: CarlFK (~carlfk@2001:470:69fc:105::5d8)
[01:19:06] *** Joins: creme[m] (~creme@2001:470:69fc:105::31c8)
[01:19:25] *** Joins: lautre[m] (~lautreg@2001:470:69fc:105::311f)
[01:20:03] *** Joins: Bikooo2[m] (~bikooo2ma@2001:470:69fc:105::1:1962)
[01:21:30] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:22:38] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[01:25:08] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[01:27:27] *** Quits: _fsg (^^@2600:3c00::f03c:92ff:fec6:da18) (Quit: quit)
[01:28:05] *** Joins: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35)
[01:32:33] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[01:34:44] *** Quits: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35) (Quit: aramtsamtsam)
[01:35:11] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[01:38:10] *** Quits: gschanuel (~gschanuel@user/gschanuel) (Read error: Connection reset by peer)
[01:38:10] *** Quits: StathisA (~StathisA@80.107.87.125) (Ping timeout: 260 seconds)
[01:38:37] *** Joins: gschanuel (~gschanuel@user/gschanuel)
[01:39:13] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 276 seconds)
[01:39:26] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[01:41:09] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:41:29] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[01:41:49] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:42:43] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Quit: ɯlɐɔ uı ʞɹoʍ oʇ ƃuıoƃ)
[01:43:24] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[01:43:39] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Client Quit)
[01:44:03] *** Joins: StathisA (~StathisA@178-147-109-130.haap.nym.cosmote.net)
[01:44:11] *** Quits: makara (~makara@196.214.171.83) (Ping timeout: 264 seconds)
[01:44:24] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[01:44:51] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[01:44:53] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[01:45:01] *** Quits: makara1 (~makara@196.214.171.83) (Ping timeout: 256 seconds)
[01:45:09] *** Joins: makara (~makara@196.214.171.83)
[01:45:11] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[01:45:28] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 268 seconds)
[01:45:40] *** Joins: makara_ (~makara@196.214.171.83)
[01:46:24] *** Joins: jkwnki2 (~jkwnki@p4fedba9d.dip0.t-ipconnect.de)
[01:46:24] *** Joins: jkwnki1 (~jkwnki@p4fedba9d.dip0.t-ipconnect.de)
[01:46:28] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:46:30] *** Quits: saki (~saki@gateway/tor-sasl/saki) (Quit: Quitting)
[01:46:42] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[01:46:53] *** Joins: saki (~saki@gateway/tor-sasl/saki)
[01:47:01] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[01:47:01] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[01:47:11] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[01:48:16] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[01:48:35] *** Joins: Atque (~Atque@user/atque)
[01:49:04] *** Joins: ano (~ano@user/ano)
[01:50:50] *** Quits: jkwnki2 (~jkwnki@p4fedba9d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:50:50] *** Quits: jkwnki1 (~jkwnki@p4fedba9d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:51:24] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[01:51:48] *** Joins: ano (~ano@user/ano)
[01:53:10] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[01:53:11] *** Joins: goldfish (~goldfish@user/goldfish)
[01:53:27] *** Quits: Samian (~s@user/samian) (Quit: Textual IRC Client: www.textualapp.com)
[01:54:59] *** Joins: ano (~ano@user/ano)
[01:55:59] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[01:56:18] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[01:56:48] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[01:58:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:00:10] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[02:01:29] *** Quits: guardian (~guardian@planet-d.net) (Ping timeout: 268 seconds)
[02:03:03] *** Quits: dre (~dre@2001:8003:c932:c301:c7a0:423f:5a6a:50c7) (Quit: Leaving)
[02:03:22] *** Joins: dre (~dre@2001:8003:c932:c301:c7a0:423f:5a6a:50c7)
[02:09:23] *** Quits: kj (~kj@beta.aerisnetwork.net) (Ping timeout: 264 seconds)
[02:09:42] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[02:09:53] *** Joins: Atque (~Atque@user/atque)
[02:12:23] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 264 seconds)
[02:14:38] *** Quits: n4dir (~user@i59F77C5F.versanet.de) (Remote host closed the connection)
[02:17:32] *** Quits: eblip (~eb0t@90.202.252.138) (Ping timeout: 268 seconds)
[02:17:40] *** Quits: Maxattax97 (~max@2603:900a:1501:a7ca::77a) (Remote host closed the connection)
[02:18:45] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:19:00] *** Joins: eblip (~eb0t@90.202.254.138)
[02:19:27] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:27:12] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:31:13] *** Joins: son0p (~ff@181.136.122.143)
[02:31:51] *** Joins: kj (~kj@kj.aerisnetwork.net)
[02:32:03] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:34:47] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:38:29] *** Joins: akoana (~ah@user/akoana)
[02:39:16] *** Quits: d630 (~d630@user/d630) (Quit: quit)
[02:41:19] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[02:41:31] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[02:42:59] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 264 seconds)
[02:44:02] *** Quits: jrofd (~crombie@cpc127052-lewi23-2-0-cust30.2-4.cable.virginm.net) (Ping timeout: 268 seconds)
[02:46:22] *** Joins: guardian (~guardian@planet-d.net)
[02:47:35] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[02:48:17] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:49:14] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:50:36] *** Joins: alzgh (~alzgh@user/alzgh)
[02:52:54] <OMGOMG> it's not my sword, mondego, but your past that disarmed you!
[02:53:29] *** Joins: Raguile (~Raguile@user/raguile)
[02:54:09] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:54:54] *** Parts: Raguile (~Raguile@user/raguile) ()
[02:59:40] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:02:31] *** Joins: gnoo (gnoo@user/gnoo)
[03:03:54] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[03:05:43] *** Quits: knstn (~knstn@ppp-94-66-57-119.home.otenet.gr) (Quit: leaving)
[03:08:01] *** Joins: thiras (~thiras@user/thiras)
[03:12:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[03:15:01] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:15:05] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:15:39] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[03:16:38] *** Quits: gnoo (gnoo@user/gnoo) (Remote host closed the connection)
[03:18:35] *** Quits: timj (~timj@user/timj) (Ping timeout: 268 seconds)
[03:19:12] *** Joins: totenkoph (~scythe@user/totenkoph)
[03:19:39] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:20:38] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[03:22:02] *** Joins: szutt (~szutt@116.37.2.145)
[03:28:16] *** Joins: gnoo (gnoo@user/gnoo)
[03:32:07] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[03:33:13] *** Joins: timj (~timj@user/timj)
[03:33:51] *** Quits: nickdiazswag209 (~bjpenn_@55.sub-174-194-206.myvzw.com) (Ping timeout: 245 seconds)
[03:36:23] *** Chex_ is now known as Chex
[03:36:30] *** Quits: Chex (~Chex@sleepl.northnook.ca) (Changing host)
[03:36:30] *** Joins: Chex (~Chex@user/chex)
[03:37:42] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[03:38:18] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 268 seconds)
[03:39:13] *** Quits: saki (~saki@gateway/tor-sasl/saki) (Remote host closed the connection)
[03:39:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:8056:a659:b191:c249) (Ping timeout: 260 seconds)
[03:39:32] *** Joins: saki (~saki@gateway/tor-sasl/saki)
[03:42:21] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[03:43:09] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:44:49] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[03:46:56] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 268 seconds)
[03:47:21] *** Joins: nickdiazswag209 (~bjpenn_@13.110.54.39)
[03:52:09] *** Joins: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net)
[03:53:07] *** Quits: GNUHacker (~gnu@fsf/member/GNUHacker) (Quit: Leaving)
[03:53:25] *** Joins: binary011 (~binary01@192.110.171.216)
[03:53:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:54:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:54:13] *** Quits: binary011 (~binary01@192.110.171.216) (Read error: Connection reset by peer)
[03:56:11] *** Quits: magla (~gelignite@55d469ae.access.ecotel.net) (Quit: Stay safe!)
[04:00:22] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:03:16] <tofran> Hello I'm running in circles trying to solve a bash expansion problem. I want to pass the following parameters from a variable to another program: --foo --example '-a --abc' --bar
[04:03:16] <tofran> But I cannot make it work the same way as expected I have tried all the quotes combinations. Can anyone point me in the right direction?
[04:05:53] *** Joins: seninha (~seninha@user/seninha)
[04:06:10] *** Quits: nickdiazswag209 (~bjpenn_@13.110.54.39) (Ping timeout: 260 seconds)
[04:08:45] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:15:11] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[04:16:36] *** Joins: goldfish (~goldfish@user/goldfish)
[04:16:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[04:17:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:18:35] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[04:21:22] <geirha> !faq complex
[04:21:22] <greybot> https://mywiki.wooledge.org/BashFAQ/050 -- I'm trying to put a command in a variable, but the complex cases always fail!
[04:23:04] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[04:24:45] <tofran> Humm nice geirha will have a read, hank you
[04:25:21] *** Joins: goldfish (~goldfish@user/goldfish)
[04:27:39] *** Quits: situ_ (~situ@ip-89-176-145-74.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[04:28:44] *** Quits: gnoo (gnoo@user/gnoo) (Remote host closed the connection)
[04:30:25] *** e36freak_ is now known as e36freak
[04:31:22] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[04:36:38] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[04:36:53] <tofran> Interesting, then it seems that there is no sane way to do this. If anyone wants to give their 5cents here's the problem: https://github.com/tofran/nginx-with-substitutions-filter-docker/blob/main/Dockerfile#L35-L38
[04:37:22] <e36freak> it's always docker
[04:37:56] *** Joins: gnoo (gnoo@user/gnoo)
[04:38:59] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[04:39:21] <e36freak> if nginx -V outputs arguments in a way that's safe for shell parsing you'd need to get eval involved or similar
[04:39:22] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:40:16] <jetchisel> !docker
[04:40:16] <greybot> https://xkcd.com/1988/ The fad of the month (as of June 2018) is Docker. It's always Docker. Why are they doing it THAT WAY? Because Docker.
[04:40:20] <tofran> Haha indeed, but it could be anything else. It's just trying to reuse the previous args
[04:41:22] <jetchisel> \0/
[04:41:49] <e36freak> tofran: well it's not even really bash, exactly
[04:42:14] <e36freak> but like i said, if nginx -V outputs things in a way that are safe to be re-parsed, then you'll need to get the shell to actually re-parse them
[04:42:41] *** Joins: ferdna (~ferdna@user/ferdna)
[04:43:44] <tofran> Hahaha I know, sorry, but I thought this was really the right place to ask this
[04:44:02] <tofran> Makes sense, will give it a try
[04:45:13] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[04:45:29] <e36freak> something like eval "./configure --foo --bar $(nginx -V | sed blah)"
[04:49:11] *** Quits: volgrim (~Volgrim@156-155-224-214.ip.internet.co.za) (Ping timeout: 256 seconds)
[04:49:45] *** Quits: timj (~timj@user/timj) (Ping timeout: 256 seconds)
[05:00:07] <tofran> e36freak yes thank you, it works. The thing is, as always with these things there is no neat solution. At least I understand the problem, thank you all
[05:00:23] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[05:00:43] <tofran> At least now*
[05:02:26] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:05:06] *** Joins: timj (~timj@user/timj)
[05:07:17] <mcint> I'm parsing many arguments with, in essence,  echo "$@"|while read arg; do case -f) read file;; ... esac, so that I can selectively read arguments to a flag. I'm stuggling with lastpipe stuff and setting state as the result of arg parsing
[05:09:43] *** Joins: JohnDoe2_ (~johndoe2@2001:470:1f07:89::dead:bead)
[05:09:45] *** Quits: JohnDoe2 (~johndoe2@2001:470:1f07:89::dead:bead) (Read error: Connection reset by peer)
[05:10:11] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[05:10:56] <e36freak> !faq easily > mcint
[05:10:56] <greybot> mcint: https://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line options and arguments in my script easily?
[05:11:04] <e36freak> while read is not the right thing for parsing arguments
[05:11:17] <mcint> i guess i need to dance with getopt[s] here. I'm not finding a better way to do this
[05:11:19] <mcint> ok
[05:11:23] <e36freak> just use a for loop
[05:11:29] <e36freak> for arg in "$@"; do
[05:11:44] <e36freak> or more traditionally, a while loop and shift
[05:11:45] <e36freak> see the link
[05:12:13] <e36freak> shift is better because it allows you to parse options, remove them, and leave non-option arguments afterward
[05:12:41] *** Quits: vee (~vee@c-73-71-90-145.hsd1.ca.comcast.net) (Quit: WeeChat 3.3)
[05:13:13] <mcint> while :; sweet. thank you
[05:13:26] <e36freak> while [[ $1 ]]; do
[05:13:33] <e36freak> again, just see the link
[05:13:43] <e36freak> it explains it pretty well
[05:14:55] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[05:18:44] *** wiscii is now known as wiscii-agogo
[05:19:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:24:45] *** Joins: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1)
[05:24:58] *** Quits: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1) (Changing host)
[05:24:58] *** Joins: horribleprogram (~user@user/horribleprogram)
[05:27:53] *** Quits: ttys000 (~ttys000@user/ttys000) (Quit: Textual IRC Client: www.textualapp.com)
[05:30:12] *** Joins: John_Ivan (~John_Ivan@user/john-ivan/x-1515935)
[05:40:27] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[05:53:27] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:54:08] *** Joins: Samian (~s@user/samian)
[05:58:06] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[06:02:17] *** Quits: xx (~xx@user/xx) (Ping timeout: 256 seconds)
[06:05:39] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[06:07:32] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[06:10:37] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 268 seconds)
[06:15:25] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[06:25:46] *** Quits: timj (~timj@user/timj) (Quit: Leaving.)
[06:26:53] *** Joins: igemnace (~ian@user/igemnace)
[06:27:04] *** Joins: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com)
[06:31:11] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[06:31:45] *** Quits: zoe (~zoe@fsf/member/zoe) (Ping timeout: 256 seconds)
[06:34:23] *** Joins: N4buc0- (~N4buc0@2804:7f4:3487:cd22:92e:15cc:647a:f57b)
[06:34:30] *** Quits: skered (~dereks@user/skered) (Ping timeout: 260 seconds)
[06:34:37] *** Joins: L3_ (~L3@user/l3)
[06:35:25] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[06:36:41] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[06:37:04] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[06:37:25] *** Joins: N4buc0 (~N4buc0@186.212.203.26)
[06:37:48] *** Quits: N4buc0- (~N4buc0@2804:7f4:3487:cd22:92e:15cc:647a:f57b) (Remote host closed the connection)
[06:40:26] *** Quits: tsp_ (~tsp@srv1.xen.prgmr.com) (Quit: ZNC - http://znc.in)
[06:40:35] *** Joins: tsp (~tsp@allinaccess.com)
[06:41:37] *** Quits: int (~int@0x4.cx) (Quit: see you :))
[06:42:24] *** Joins: int (~int@0x4.cx)
[06:42:42] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 268 seconds)
[06:45:25] *** Quits: int (~int@0x4.cx) (Client Quit)
[06:46:13] *** Joins: int (~int@0x4.cx)
[06:47:25] *** Joins: skered (~dereks@user/skered)
[06:50:58] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:51:10] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[06:55:35] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[06:58:23] *** Quits: jos1 (~jos3@dyndsl-178-142-065-236.ewe-ip-backbone.de) (Ping timeout: 256 seconds)
[06:58:50] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 260 seconds)
[06:59:06] *** Joins: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739)
[06:59:16] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 245 seconds)
[07:01:32] *** Joins: ferdna (~ferdna@user/ferdna)
[07:04:04] *** Joins: ogis (~Android@240d:1c:3d:9500:c5bb:8662:fba7:ec08)
[07:04:51] *** Quits: ogis (~Android@240d:1c:3d:9500:c5bb:8662:fba7:ec08) (Client Quit)
[07:06:15] *** Joins: ogis (~Android@240d:1c:3d:9500:c5bb:8662:fba7:ec08)
[07:07:54] *** Quits: rando25892 (~user@user/rando25892) (Quit: changing servers)
[07:09:19] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[07:12:08] *** Joins: jos1 (~jos3@dyndsl-091-096-033-040.ewe-ip-backbone.de)
[07:13:00] *** Quits: L3_ (~L3@user/l3) (Quit: o/)
[07:13:38] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[07:14:24] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 260 seconds)
[07:14:30] *** Quits: A|an (~Alan@173.216.51.200) (Quit: A|an)
[07:15:02] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:16:36] *** Quits: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com) (Ping timeout: 268 seconds)
[07:19:14] *** Joins: gschanuel2 (~gschanuel@user/gschanuel)
[07:19:44] *** Quits: gschanuel (~gschanuel@user/gschanuel) (Read error: Connection reset by peer)
[07:19:44] *** gschanuel2 is now known as gschanuel
[07:22:42] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:28:53] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[07:30:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:33:52] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 268 seconds)
[07:33:52] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 268 seconds)
[07:35:40] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:40:01] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Client Quit)
[07:40:03] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 268 seconds)
[07:40:19] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:41:26] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[07:41:44] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[07:44:52] *** Joins: vishal (~vishal@fedora/vishal)
[07:48:28] *** Joins: earendel (uid498179@user/earendel)
[07:49:56] *** starz_ is now known as starz
[07:53:46] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[07:58:40] *** Joins: lavaball (felix@31.204.155.215)
[08:12:47] *** Joins: loganlee (~Thunderbi@user/loganlee)
[08:15:48] *** Quits: l4yer (~l4yer@159.48.55.8) (Ping timeout: 268 seconds)
[08:17:02] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:24:48] *** Joins: w0ng (~w0ng@103.1.212.157)
[08:28:30] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:28:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[08:30:01] *** Quits: riff_IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[08:31:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[08:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[08:33:23] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 264 seconds)
[08:33:47] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:34:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[08:38:38] *** Joins: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com)
[08:40:55] *** Quits: Milos (~Milos@user/milos) (Quit: ZNC 1.8.2 - https://znc.in)
[08:41:10] *** Joins: Milos (~Milos@user/milos)
[08:42:51] *** Joins: sazawal (~sazawal@2401:4900:51d3:d1f5:43f9:44a4:47de:b486)
[08:43:04] *** Quits: sazawal (~sazawal@2401:4900:51d3:d1f5:43f9:44a4:47de:b486) (Client Quit)
[08:44:39] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[08:44:55] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 256 seconds)
[08:47:32] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[08:48:19] *** Quits: DeaDSouL (~DeaDSouL@45.86.201.212) (Ping timeout: 256 seconds)
[08:48:30] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: terabit (sid146285@id-146285.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:49:10] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:49:41] *** Quits: nescafe1001 (sid211018@id-211018.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: chromis (sid150893@id-150893.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:44] *** Quits: earendel (uid498179@user/earendel) (Ping timeout: 268 seconds)
[08:49:50] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:49:51] *** Quits: edlou (uid413273@id-413273.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:00] *** Joins: DeaDSouL (~DeaDSouL@45.130.136.28)
[08:50:02] *** Joins: nescafe1001 (sid211018@tinside.irccloud.com)
[08:50:04] *** Quits: pwillard (sid136981@id-136981.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:06] *** Quits: jsatk (sid304796@id-304796.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[08:50:07] *** Quits: odc (sid197788@id-197788.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[08:50:11] *** Quits: ljharb (sid43720@user/ljharb) (Ping timeout: 264 seconds)
[08:50:18] *** Quits: kenyon (sid496813@id-496813.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:50:18] *** Quits: mnabid (uid448607@user/mnabid) (Ping timeout: 260 seconds)
[08:50:18] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: gajus (sid202456@id-202456.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[08:50:39] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[08:50:55] *** Quits: termos (sid18647@id-18647.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:55] *** Quits: Darkfoe_ (sid402081@id-402081.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:55] *** Quits: nem (sid113421@user/nem) (Ping timeout: 260 seconds)
[08:50:57] *** Quits: hwrd (sid64402@id-64402.lymington.irccloud.com) (Read error: Connection reset by peer)
[08:50:57] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 268 seconds)
[08:51:00] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:51:10] *** Joins: hubvu (sid495858@user/hubvu)
[08:51:10] *** Joins: hwrd (sid64402@id-64402.lymington.irccloud.com)
[08:51:15] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[08:51:21] *** Joins: gajus (sid202456@id-202456.tinside.irccloud.com)
[08:51:25] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[08:51:26] *** Joins: mnabid (uid448607@id-448607.lymington.irccloud.com)
[08:51:29] *** Quits: mnabid (uid448607@id-448607.lymington.irccloud.com) (Changing host)
[08:51:29] *** Joins: mnabid (uid448607@user/mnabid)
[08:51:36] *** Joins: odc (sid197788@helmsley.irccloud.com)
[08:51:37] *** Joins: terabit (sid146285@id-146285.uxbridge.irccloud.com)
[08:51:40] *** Joins: Pent (sid313808@2a03:5180:f:2::4:c9d0)
[08:51:52] *** Joins: nem (sid113421@user/nem)
[08:52:01] *** Joins: rustyshackleford (uid236774@2a03:5180:f:1::3:9ce6)
[08:52:01] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[08:52:05] *** Joins: chromis (sid150893@2a03:5180:f::2:4d6d)
[08:52:05] *** Joins: edlou (uid413273@2a03:5180:f:1::6:4e59)
[08:52:05] *** Joins: Darkfoe_ (sid402081@2a03:5180:f:1::6:22a1)
[08:52:06] *** Joins: termos (sid18647@helmsley.irccloud.com)
[08:52:06] *** Joins: earendel (uid498179@2a03:5180:f:2::7:9a03)
[08:52:10] *** Quits: earendel (uid498179@2a03:5180:f:2::7:9a03) (Changing host)
[08:52:10] *** Joins: earendel (uid498179@user/earendel)
[08:52:13] *** Joins: ljharb (sid43720@user/ljharb)
[08:52:17] *** Joins: BlueShark (sid10311@user/blueshark)
[08:52:17] *** Joins: ullbeking (sid5364@user/ullbeking)
[08:52:29] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:52:29] *** Joins: rubin55 (sid175221@2a03:5180:f:4::2:ac75)
[08:52:41] *** Joins: jakesyl_ (sid56879@2a03:5180:f:4::de2f)
[08:52:42] *** Joins: pwillard (sid136981@2a03:5180:f:4::2:1715)
[08:52:49] *** Quits: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com) (Ping timeout: 268 seconds)
[08:54:20] *** Joins: kenyon (sid496813@id-496813.uxbridge.irccloud.com)
[08:57:22] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[09:02:35] *** Quits: Hash (~stoned@hack.the.planet.with.hashsecurity.org) (Remote host closed the connection)
[09:03:09] *** Joins: ano (~ano@user/ano)
[09:04:38] *** Quits: iamGavinJ (~iamGavinJ@user/iamgavinj) (Quit: iamGavinJ)
[09:04:39] *** Joins: Hash (~stoned@hack.the.planet.with.hashsecurity.org)
[09:07:40] *** Quits: totenkoph (~scythe@user/totenkoph) (Remote host closed the connection)
[09:08:18] *** Joins: totenkoph (~scythe@user/totenkoph)
[09:09:56] *** Joins: Jad (~Nashmi@user/jad)
[09:11:33] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 256 seconds)
[09:12:58] *** Joins: analoq (~yashi@user/dies)
[09:19:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:32:36] *** Quits: makara (~makara@196.214.171.83) (Ping timeout: 245 seconds)
[09:34:36] *** Joins: makara (~makara@196.214.171.83)
[09:34:42] *** Quits: makara_ (~makara@196.214.171.83) (Ping timeout: 260 seconds)
[09:34:44] *** Quits: theglass (~glass@user/theglass) (Ping timeout: 246 seconds)
[09:35:07] *** Joins: makara_ (~makara@196.214.171.83)
[09:46:07] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:47:17] *** Joins: sinaowolabi__ (~SinaOwola@102.134.114.1)
[09:48:42] *** Joins: Maxattax97 (~max@2603:900a:1501:a7ca::77a)
[09:49:06] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Ping timeout: 260 seconds)
[09:49:24] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[09:51:51] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[09:59:10] *** Joins: l4yer (~l4yer@159.48.55.10)
[09:59:33] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[10:06:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:08:42] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[10:12:32] *** Joins: Guest59 (~Guest59@217-162-132-92.dynamic.hispeed.ch)
[10:18:57] *** Joins: alzgh (~alzgh@user/alzgh)
[10:20:05] *** Quits: Guest59 (~Guest59@217-162-132-92.dynamic.hispeed.ch) (Quit: Client closed)
[10:20:31] *** Quits: sinaowolabi__ (~SinaOwola@102.134.114.1) (Ping timeout: 245 seconds)
[10:24:34] *** Joins: vysn (~vysn@user/vysn)
[10:24:49] *** Quits: Maxattax97 (~max@2603:900a:1501:a7ca::77a) (Remote host closed the connection)
[10:31:28] *** Quits: eblip (~eb0t@90.202.254.138) (Ping timeout: 268 seconds)
[10:33:06] *** Joins: sinaowolabi__ (~SinaOwola@41.58.86.159)
[10:33:19] *** Joins: eblip (~eb0t@90.209.247.46)
[10:33:29] *** Joins: theglass (~glass@246.ip-137-74-113.eu)
[10:33:29] *** Quits: theglass (~glass@246.ip-137-74-113.eu) (Changing host)
[10:33:29] *** Joins: theglass (~glass@user/theglass)
[10:35:18] *** Joins: igemnace (~ian@user/igemnace)
[10:35:26] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:36:00] *** Joins: loganlee (~Thunderbi@user/loganlee)
[10:37:02] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[10:40:19] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[10:40:39] *** Joins: Raguile (~Raguile@user/raguile)
[10:46:30] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[10:48:10] *** Joins: situ_ (~situ@ip-89-176-145-74.net.upcbroadband.cz)
[10:54:24] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:56:28] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:57:18] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 260 seconds)
[10:57:35] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[10:59:13] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:00:54] *** Joins: travisghansen1 (~travisgha@192.74.130.86)
[11:01:16] *** Quits: travisghansen (~travisgha@192.74.130.86) (Read error: Connection reset by peer)
[11:01:16] *** travisghansen1 is now known as travisghansen
[11:02:11] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 245 seconds)
[11:04:59] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[11:15:59] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:17:29] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[11:18:21] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[11:19:25] *** Joins: lavaball (felix@31.204.155.215)
[11:23:48] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[11:26:52] *** Joins: ogis_ (~Android@neoau1-133-202-121-213.tky.mesh.ad.jp)
[11:28:26] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 245 seconds)
[11:29:47] *** Quits: ogis (~Android@240d:1c:3d:9500:c5bb:8662:fba7:ec08) (Ping timeout: 264 seconds)
[11:30:15] *** Joins: nickdiazswag209 (~bjpenn_@98.42.87.100)
[11:37:10] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[11:39:45] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:43:13] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[11:50:11] *** Quits: zro (~zro@user/zro) (Ping timeout: 264 seconds)
[11:54:11] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 256 seconds)
[11:58:32] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[11:58:41] *** Quits: ogis_ (~Android@neoau1-133-202-121-213.tky.mesh.ad.jp) (Quit: -a- Connection Timed Out)
[11:58:54] *** Joins: mei3 (~mei@user/mei)
[12:03:03] *** Quits: datatech (~specter@user/datatech) (Quit: leaving)
[12:03:16] *** Joins: datatech (~specter@user/datatech)
[12:05:15] *** Joins: ogis (~Android@neoau1-133-202-121-213.tky.mesh.ad.jp)
[12:05:34] *** Joins: szutt (~szutt@116.37.2.145)
[12:06:25] *** Joins: tobybl (~tobybl@213.31.135.91)
[12:11:08] <chiselfuse> Can I have expansions in the body of a while loop become arguments of a command? Something like:     command while read -r foo; do "$foo"; done     Or do I have to do it like this:     command $(while read -r foo; do echo "$foo"; done)     ?
[12:14:04] *** Joins: earnestly (~earnest@user/earnestly)
[12:15:17] <emanuele6> !xy
[12:15:17] <greybot> http://mywiki.wooledge.org/XyProblem -- "I want to do X, but I'm asking how to do Y..."
[12:18:51] *** Quits: sinaowolabi__ (~SinaOwola@41.58.86.159) (Ping timeout: 245 seconds)
[12:21:34] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:22:11] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[12:23:24] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 260 seconds)
[12:25:55] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[12:27:28] <chiselfuse> emanuele6: I have a file with a list of song names that I want to pass as arguments to youtube-dl, I came up with:
[12:27:34] <chiselfuse> youtube-dl -f bestaudio $(while IFS="" read -r name || [ -n "$name" ]; do echo -en "'ytsearch:${name##*:???}' "; done < /tmp/good_list)
[12:28:20] <jetchisel> !faq 1 > chiselfuse
[12:28:20] <greybot> chiselfuse: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
[12:28:35] <emanuele6> no, not faq1
[12:28:50] <chiselfuse> jetchisel: But I already did that
[12:29:06] <emanuele6> mapfile -t < /tmp/good_list; youtube-dl -f bestaudio "${MAPFILE[@]##*:???}"
[12:29:26] <emanuele6> err, you are appending ytsearch, didn't notice
[12:30:17] <emanuele6> mapfile -t < /tmp/good_list; search_queries=( "${MAPFILE[@]##*:???}" ); youtube-dl -f bestaudio "${MAPFILE[@]/#/ytsearch:}"
[12:30:22] <lopid> yt-dlp has --batch-file for this
[12:30:25] <emanuele6> err, not MAPFILE in the last one
[12:30:34] <emanuele6> mapfile -t < /tmp/good_list; search_queries=( "${MAPFILE[@]##*:???}" ); youtube-dl -f bestaudio "${search_queries[@]/#/ytsearch:}"
[12:31:16] <emanuele6> or read the manual for youtube-dl and see if it has a special option for that
[12:31:29] <emanuele6> youtube-dl also has --batch-file
[12:31:35] <emanuele6> and if you pass -, it will read stdin
[12:32:00] <chiselfuse> I know it might but I wanted to do it in bash for practice
[12:32:37] <emanuele6> anyhow, you can read from a file with mapfile
[12:33:20] <chiselfuse> How is mapfile different from read
[12:33:30] <chiselfuse> I read the help page for it, looks almost the same
[12:33:46] <emanuele6> how can it look the same?
[12:34:09] *** Joins: Crescendo (~Crescendo@user/crescendo)
[12:34:17] <chiselfuse> They both read from STDIN, 'read' can also put stuff in an array
[12:34:25] *** Joins: han-solo (~han-solo@user/han-solo)
[12:34:39] <emanuele6> then you don't understand how read -a works
[12:34:45] <chiselfuse> Oh wait
[12:34:53] <chiselfuse> read would need to be looped
[12:35:08] <emanuele6> read -a splits the fields of the read line into an array.
[12:35:15] <chiselfuse> Yes yes, I forgot
[12:35:36] <emanuele6> why do you need ##*:???
[12:36:15] <chiselfuse> Every line in the file starts with something like    12:34:56 song name
[12:36:20] <chiselfuse> I don't need these numbers
[12:36:37] <emanuele6> that removes everything up to the last colon and the three characters after only if there are at least 3 character after the first colon
[12:36:49] <emanuele6> but
[12:37:14] <emanuele6> err, i meant up to the last colon that has at least 3 characters after
[12:37:34] <emanuele6> chiselfuse: what if a song has a colon in the name?
[12:37:39] <chiselfuse> There are always three characters after a colon, but I guess the problem would be if the song name would contain a colon
[12:37:43] <chiselfuse> Yeah that
[12:37:54] <emanuele6> yes, but why are you even using : as a delimiter?
[12:38:16] <emanuele6> > 12:34:56 song name
[12:38:23] <emanuele6> what would be a better delimiter?
[12:38:28] <emanuele6> maybe space?
[12:38:37] <emanuele6> ${var# *}
[12:38:42] <emanuele6> err
[12:38:46] <emanuele6> ${var#* }
[12:38:53] <chiselfuse> I don't understand. I just have this list copy-pasted from somewhere where it mapped the song name to the timestamp in a youtube video
[12:38:54] *** Joins: sinaowolabi__ (~SinaOwola@102.134.114.1)
[12:39:10] <chiselfuse> Oh
[12:39:12] <chiselfuse> I see
[12:39:56] <chiselfuse> emanuele6: Yeah, that is better, IDK how I didn't think of that :P
[12:40:16] <emanuele6> if you really wanted to use :
[12:40:33] <emanuele6> ${var#*:*:*:???} would have been better, no?
[12:40:55] <chiselfuse> Yes
[12:41:12] <chiselfuse> In case it had a colon in the song name, again
[12:42:23] <emanuele6> # printf '%s\n' '12:20:22 song' '01:22:33 another song' > file; mapfile -t < file; declare -p MAPFILE
[12:42:23] <shbot> emanuele6: declare -a MAPFILE=([0]="12:20:22 song" [1]="01:22:33 another song")
[12:42:28] <emanuele6> this is what mapfile does
[12:43:14] <emanuele6> you can also name the array, e.g. `mapfile -t lines', but the default is MAPFILE if nothing is passed (like for read which writes to REPLY by default)
[12:43:51] <emanuele6> # printf '%s\n' '12:20:22 song' '01:22:33 another song' > file; mapfile -t < file; song_names=( "${MAPFILE[@]# *}" ); declare -p song_names
[12:43:52] <shbot> emanuele6: declare -a song_names=([0]="12:20:22 song" [1]="01:22:33 another song")
[12:44:08] <chiselfuse> I don't understand why I don't see mapfile more often than while-reads
[12:44:28] <emanuele6> then you can apply `# *' to all the elements of the array and safe it to another array
[12:44:35] <kurahaupo> chiselfuse: Because mapfile is newer
[12:44:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[12:44:44] <emanuele6> also mapfile is bash only
[12:45:09] *** Joins: rendar (~rendar@user/rendar)
[12:45:10] <jetchisel> iirc it is also mksh
[12:45:28] <emanuele6> !faq feature
[12:45:29] <greybot> https://mywiki.wooledge.org/BashFAQ/061 -- Is there a list of which features were added to specific releases (versions) of Bash?
[12:45:42] <emanuele6> it says native
[12:45:54] <emanuele6> maybe mksh copied it from bash?
[12:46:03] <jetchisel> most likely
[12:46:15] <emanuele6> # printf '%s\n' '12:20:22 song' '01:22:33 another song' > file; mapfile -t < file; song_names=( "${MAPFILE[@]# *}" ); set -x; : youtube -f bestaudio -- "${song_names[@]/#/ytsearch:}"
[12:46:16] <shbot> emanuele6: + : youtube -f bestaudio -- 'ytsearch:12:20:22 song' 'ytsearch:01:22:33 another song'
[12:46:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:46:36] *** Quits: lavaball (felix@31.204.155.215) (Quit: lavaball)
[12:46:54] <emanuele6> chiselfuse: and finally you can apply ${/#/ytsearch:} to all the elements of the array to prepend ytsearch:
[12:47:25] <emanuele6> what did i mess up?
[12:47:39] <chiselfuse> Hmmm
[12:48:34] <emanuele6> oh , again '
[12:48:44] <emanuele6> again ' *' instead of '* ', oops
[12:48:57] <chiselfuse> Yea
[12:49:11] <emanuele6> # printf '%s\n' '12:20:22 song' '01:22:33 another song' > file; mapfileq -t < file; song_names=( "${MAPFILE[@]#* }" ); declare -p song_names; set -x; : youtube -f bestaudio -- "${song_names[@]/#/ytsearch:}"
[12:49:11] <shbot> emanuele6: bash: mapfileq: command not found
[12:49:11] <shbot> emanuele6: declare -a song_names=()
[12:49:11] <shbot> emanuele6: + : youtube -f bestaudio --
[12:49:19] <chiselfuse> :P
[12:49:22] <emanuele6> # printf '%s\n' '12:20:22 song' '01:22:33 another song' > file; mapfile -t < file; song_names=( "${MAPFILE[@]#* }" ); declare -p song_names; set -x; : youtube -f bestaudio -- "${song_names[@]/#/ytsearch:}"
[12:49:22] <shbot> emanuele6: declare -a song_names=([0]="song" [1]="another song")
[12:49:22] <shbot> emanuele6: + : youtube -f bestaudio -- ytsearch:song 'ytsearch:another song'
[12:49:30] <emanuele6> i have no idea how that q got there
[12:49:32] <emanuele6> welp
[12:50:17] <chiselfuse> Wait
[12:50:36] <chiselfuse> Why isn't the first one single-quoted?
[12:50:50] <emanuele6> that is just the debug output of bash
[12:50:53] <chiselfuse> Oh
[12:50:55] <chiselfuse> nm
[12:50:58] <chiselfuse> nvm*
[12:51:01] <chiselfuse> I got it
[12:51:02] <emanuele6> i am using it to show you what command will be run
[12:51:07] <chiselfuse> Yeah yeah
[12:51:13] <emanuele6> quotes there wouldn't matter, so bash isn't adding them
[12:51:33] <earnestly> -p isn't debug
[12:51:38] <emanuele6> set -x is
[12:51:48] <earnestly> The question was about -p
[12:52:03] <emanuele6> no, it was about    ytsearch:song
[12:52:11] <chiselfuse> ^
[12:52:21] <earnestly> Oh, because there's no need to lol
[12:52:56] <chiselfuse> :)
[12:53:02] <earnestly> chiselfuse: quotes in the shell group strings into logical strings.  Everything is already a string
[12:53:14] <earnestly> It's not like C or python
[12:54:09] *** Joins: ravan (~ravan@user/ravan)
[12:54:17] <chiselfuse> Yeah I get, didn't know the way -x worked
[12:55:46] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:58:57] <emanuele6> either way, a better solution would have been (as lopid suggested): while IFS=' ' read -r _ name; do printf 'ytsearch:%s\n' "$name"; done < file | youtube-dl -f bestaudio -a -
[13:00:06] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[13:01:40] <emanuele6> # printf '%s\n' '12:20:22 song' '01:22:33 another song' > file; while IFS=' ' read -r _ name; do printf 'ytsearch:%s\n' "$name"; done < file | cat
[13:01:40] <shbot> emanuele6: ytsearch:song
[13:01:41] <shbot> emanuele6: ytsearch:another song
[13:01:51] <emanuele6> the uuoc is just for demonstration :)
[13:02:22] <emanuele6> chiselfuse: generate the output, and pipe it to: youtube-dl -f bestaudio -a -
[13:04:49] <emanuele6> s/the output/the "ytsearch:" lines with a while read loop/
[13:04:55] *** Quits: docmax (~docmax@dynamic-077-008-156-237.77.8.pool.telefonica.de) (Remote host closed the connection)
[13:05:32] *** Joins: vlm (~vlm@user/vlm)
[13:07:02] *** Quits: nickdiazswag209 (~bjpenn_@98.42.87.100) (Ping timeout: 260 seconds)
[13:08:50] *** Quits: sinaowolabi__ (~SinaOwola@102.134.114.1) (Ping timeout: 260 seconds)
[13:09:04] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 260 seconds)
[13:11:08] *** Joins: WinterStar (~IceLight@user/icelight)
[13:14:48] <chiselfuse> Nice too
[13:16:29] <emanuele6> that is why you should rtfm of the tools you use
[13:16:33] <emanuele6> hehe
[13:16:46] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[13:18:43] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:18:58] <chiselfuse> I actually read and knew about the possibility of assigning to thowaway variables like that using custom IFS as delimiter but it didn't come to mind at all :P
[13:19:17] <chiselfuse> s/thowaway/throwaway/
[13:19:34] <emanuele6> i was referring to youtube-dl's -a/--batch-file
[13:19:42] *** Quits: DeaDSouL (~DeaDSouL@45.130.136.28) (Quit: leaving)
[13:20:28] <chiselfuse> Ah yes, that, I didn't read :P
[13:21:51] *** Joins: sinaowolabi__ (~SinaOwola@160.152.35.53)
[13:26:31] <rendar> after years using bash, never got 100% the  " " thing, for instance, some scripts use i=0 to set counter variables instead of i="0".. why?
[13:30:22] *** Quits: sinaowolabi__ (~SinaOwola@160.152.35.53) (Ping timeout: 260 seconds)
[13:32:47] *** Quits: ogis (~Android@neoau1-133-202-121-213.tky.mesh.ad.jp) (Read error: Connection reset by peer)
[13:33:05] <earnestly> rendar: No reason
[13:33:16] <earnestly> The quotes aren't necessary for simple assignments
[13:33:18] <geirha> the quotes will make no difference there
[13:33:28] *** Joins: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp)
[13:33:38] <han-solo> !quotewhen
[13:33:38] <greybot> "Double quote" every literal that contains spaces/metacharacters and _every_ expansion: "$var", "$(command "$var")", "${array[@]}", "a & b". Use 'single quotes' for code or literal dollar signs: 'Costs $5 US', ssh host 'echo "$HOSTNAME"'. See http://mywiki.wooledge.org/Quotes , http://mywiki.wooledge.org/Arguments and http://wiki.bash-hackers.org/syntax/words .
[13:35:28] <geirha> some assume they need to put quotes around string literals, because that's what you do in most programming languages, but in bash, quotes have a completely different purpose
[13:36:55] <rendar> earnestly, geirha, yes i supposed that
[13:36:57] *** Quits: reset (~reset@user/reset) (Quit: reset)
[13:37:19] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Ping timeout: 256 seconds)
[13:37:25] <rendar> here people told me to always use quotes
[13:37:37] <rendar> so, i="0" to prefer over i=0
[13:37:39] <earnestly> It's like people who use ${} without reason, a lot of people are just mistaken
[13:37:47] <earnestly> rendar: No one here would tell you that
[13:38:01] <rendar> i swear
[13:38:02] <earnestly> google might
[13:38:04] *** Joins: knstn (~knstn@ppp-94-66-57-119.home.otenet.gr)
[13:38:04] <han-solo> maybe they told quote every expansion
[13:38:34] <rendar> no basically someone told me to use " " e.g. in if [[ "${var}" ... ]]; ...
[13:38:37] <earnestly> rendar: It's not hard, quote things where IFS wordsplitting takes place so to avoid the effects of IFS wordsplitting
[13:38:52] <earnestly> rendar: They were wrong
[13:39:02] <rendar> ok
[13:39:52] <emanuele6> $var is not the same as 0 anyway
[13:40:09] <earnestly> As a side note though, also quote things where pattern (globbing) interpretation takes place, notably RHS of = comparisons, some PEs and case statements: [[ $foo == "$bar" ]]
[13:40:36] <emanuele6> maybe they told you to quote [ "$var" = something ] where you actually need quotes
[13:40:47] <earnestly> Unless you want the expansion to be interpreted, some people do this with regex
[13:40:57] <emanuele6> i doubt someone actually told you to use i="0" over i=0 here
[13:41:10] *** Joins: ravan_ (~ravan@user/ravan)
[13:41:29] <emanuele6> or as han-solo said, every expansion
[13:41:39] <emanuele6> but 0, is not an expansion
[13:42:01] <rendar> earnestly, uhm, how that `[[ $foo == "$bar" ]]` uses globbing? because bash think of it as [[ $foo == *$bar* ]] without quotes?
[13:42:25] <earnestly> rendar: If $bar contains patterns and you don't quote it, they'll be used when comparing against $foo
[13:42:32] *** Joins: zro (~zro@user/zro)
[13:42:39] <rendar> oh, ok, right
[13:42:45] <earnestly> rendar: If you want to use globs in addition you'd use *"$bar"* of course
[13:42:53] <emanuele6> !rhs
[13:42:53] <greybot> # var="[a-z]"; [[ $var = $var ]] || echo "this is false, and why you should quote the RHS of = in [[ ]]"
[13:42:53] <shbot> greybot: this is false, and why you should quote the RHS of = in [[ ]]
[13:42:58] *** Joins: furrymcgee (~devuan@cgn-213-196-210-222.nc.de)
[13:43:04] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[13:44:00] <rendar> ok, so every expansion should be quoted, e.g. a="${b}" is to prefer over a=${b}
[13:44:18] <emanuele6> no
[13:44:55] <rendar> what a mess -_-
[13:45:06] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 245 seconds)
[13:46:05] *** Joins: vee (~vee@c-73-71-90-145.hsd1.ca.comcast.net)
[13:46:35] <earnestly> rendar: Why are you like this
[13:46:47] <emanuele6> it's really not that hard, but if the behaviour you intuitively think that [[ $foo == $bar ]] has is "true if $foo contains $bar", then it might be hard to understand
[13:47:01] <rendar> earnestly, my parents made me like this
[13:47:14] <rendar> emanuele6, ok, i see
[13:47:18] <earnestly> That is only 60% true
[13:47:44] <rendar> the rest is crossing-over fault's lol
[13:48:02] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[13:48:44] *** Quits: rwp (~invalid@havoc.proulx.com) (Ping timeout: 260 seconds)
[13:48:44] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:49:23] <rendar> emanuele6, to me, the hardest thing has been reading other's bash code.. people always put " " or they don't, but in everything also in functions, e.g. i saw often rm -rf "${file}" or rm "-rf" ${file} ... stuff like that
[13:49:36] <rendar> i think i should read some very good bash code, hard to find :)
[13:50:02] <earnestly> rendar: To be fair, most bash code in the wild is terrible, so just don't do it
[13:50:10] <emanuele6> one is a little wrong, the other is very wrong
[13:50:12] <rendar> i know
[13:50:14] <emanuele6> !crap
[13:50:14] <greybot> The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
[13:50:37] <rendar> emanuele6, can you elaborate little and very?
[13:50:44] <emanuele6> but again, i really doubt you actually saw   rm "-rf" ${file}
[13:50:46] <earnestly> rendar: That rm is wrong in both cases too.  It should be rm -f -- "$file" # no need for -r for files, use -- to guard rm against hyphens in expansion
[13:50:53] <rendar> emanuele6, yes, i did!
[13:50:59] <emanuele6> exactly what earnestly said
[13:51:09] <rendar> yes exactly
[13:51:35] <earnestly> The {} is useless, quotes are needed because wordsplitting takes place in that location
[13:52:29] <rendar> also, another guy here told me to always use { }
[13:52:34] <rendar> what about `sudo rm -f -- "/etc/apt/sources.list.d/mongodb-org"*` ?
[13:53:20] <earnestly> The quotes aren't neecessary
[13:53:28] <earnestly> There's no spaces or expansions
[13:53:40] <rendar> exactly
[13:53:58] <earnestly> (The -- isn't necessary either since the argument starts with /)
[13:54:16] <earnestly> rendar: No one here tells you to use "always use { }"
[13:54:21] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[13:54:29] <rendar> but someone here told me that, otherwise i wouldn't
[13:54:57] <earnestly> No that is a fairly exclusive consequence of using stackoverflow/google/blogs
[13:55:05] <rendar> i think " " are also useless here `if [[ -f "/sys/kernel/mm/transparent_hugepage/enabled" ]]; then` since there is no expansion
[13:55:33] <rendar> earnestly, i can assure you that someone here told me that, unfortunately i didn't save the log, otherwise i'd show you :)
[13:55:41] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[13:56:18] <earnestly> Apply the general rules instead of asking people to go through every single example you find
[13:56:57] <emanuele6> i don't see it in my logs.
[13:57:08] <rendar> earnestly, some single example helps me to get the general rule, that's how [A.]I. works
[13:57:20] <rendar> emanuele6, it has been like in 2017 or 2018
[13:58:10] <emanuele6> then it can't be *here*
[13:58:28] <earnestly> rendar: Applying thought is how you learn, endless examples is a way to avoid thinking.  I know, because I made the same mistake
[13:59:27] <rendar> ok :)
[13:59:58] <earnestly> Reverse it, apply the rule, generate an example, and test it against the rule to see if it holds
[14:04:40] *** Joins: lavaball (felix@31.204.155.215)
[14:14:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:22:07] *** Quits: rustyshackleford (uid236774@2a03:5180:f:1::3:9ce6) (Quit: Connection closed for inactivity)
[14:24:16] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[14:31:34] *** Quits: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp) (Quit: -a- Connection Timed Out)
[14:33:27] *** Joins: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp)
[14:34:15] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[14:37:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:f453:84d1:9e20:fd44)
[14:38:06] <rendar> can i check if a function has been already defined?
[14:40:21] <emanuele6> weird thing to check, but yes you can
[14:40:29] <rendar> how?
[14:40:48] <emanuele6> if declare -f my_fun > /dev/null; then echo "it's defined"; fi
[14:40:48] <jetchisel> type -f my_functname ?
[14:41:01] <jetchisel> -t
[14:41:04] <jetchisel> sorry ^^
[14:42:03] <emanuele6> sure, you can use that, but then you also need to check the value.
[14:42:10] <rendar> indeed
[14:42:10] <jetchisel> yep
[14:42:39] <emanuele6> like: if t=$(type -t my_fun) && [[ $f == function ]]; then echo "it's defined"; fi
[14:43:40] <rendar> i think i'd go for `if declare -f my_fun > /dev/null;`
[14:44:28] <emanuele6> why do you even need that?
[14:46:47] <rendar> to check if some basic common files has been included (e.g. source that file)
[14:47:47] <emanuele6> but why?
[14:48:13] <emanuele6> you know you can check if source fail right?
[14:48:18] <emanuele6> s/fail/&ed/
[14:49:04] *** Joins: zz1 (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[14:49:43] *** Quits: zz1 (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[14:49:53] *** Joins: zz1 (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[14:51:09] *** Quits: zz1 (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[14:51:41] <rendar> emanuele6, like `if ! source file; then...` ?
[14:51:52] <emanuele6> yes.
[14:52:26] <emanuele6> but you should put "true" at the end of file
[14:52:53] <rendar> oh, ok
[14:52:58] <emanuele6> unless you also want to check if the last command in file failed
[14:53:10] <emanuele6> s/to /&also /
[14:53:19] <rendar> what about that's the case?
[14:54:52] <emanuele6> err, there was already an also, lol
[14:55:01] <emanuele6> rendar: what do you mean?
[14:55:15] <rendar> nevermind
[14:55:25] <emanuele6> # help source | tail -3
[14:55:26] <shbot> emanuele6:     Exit Status:
[14:55:26] <shbot> emanuele6:     Returns the status of the last command executed in FILENAME; fails if
[14:55:26] <shbot> emanuele6:     FILENAME cannot be read.
[14:56:41] *** Joins: zz1 (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[14:57:22] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:57:39] *** zz1 is now known as nyjets
[14:58:13] *** Joins: xx (~xx@user/xx)
[14:58:21] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[14:59:38] *** Joins: timj (~timj@user/timj)
[15:00:24] <rendar> what i want to do N tries of something? i could do `until [[ $i -gt 20 ]] do ... i=(($i-1)) done` right? but my question is: what about i want to set this loop infinite with an option? i could do until [[ $i counter ]] || [[ some_variable_always_true_when_i_want_infinite_loop ]] do ...
[15:01:14] <knstn> !`
[15:01:15] <greybot> The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. The foo=$(command) syntax is recommended instead. Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
[15:01:22] <emanuele6> [[ $i -gt 20 ]] is incorrect as (( $i < 20 )) is incorrect
[15:02:14] <emanuele6> don't put expansions in arithmetic contexts otherwise, they might get result in an unwanted value, or might default to a syntax error instead of 0
[15:02:18] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[15:02:52] <emanuele6> s/get //
[15:03:21] <earnestly> As far as I'm concerned, all $(( or (( is arbitrary code execution and is probably almost enough to kill the shell
[15:03:29] <emanuele6> # if (( $i == 3 )); then echo hi; fi
[15:03:30] <shbot> emanuele6: bash: ((: == 3 : syntax error: operand expected (error token is "== 3 ")
[15:03:35] <emanuele6> # if (( i == 3 )); then echo hi; fi
[15:03:36] <shbot> emanuele6: no output
[15:03:57] <earnestly> I'm not sure how bash and co. is going to fix it either
[15:04:21] <rendar> ok
[15:04:22] <emanuele6> # i=2+3; echo "$(( i * 3 ))"
[15:04:23] <shbot> emanuele6: 15
[15:04:26] <emanuele6> # i=2+3; echo "$(( $i * 3 ))"
[15:04:27] <shbot> emanuele6: 11
[15:04:51] <han-solo> # x=40 y=2 echo $[ x + y ] # jk
[15:04:52] <shbot> han-solo: 0
[15:04:56] <emanuele6> $i is literally injecting an expression into $(( )) or [[ -gt ]] or ((
[15:05:05] <han-solo> # x=40 y=2; echo $[ x + y ] # jk
[15:05:06] <shbot> han-solo: 42
[15:05:14] <knstn> # foo=1; ((foo &= 254)); echo "$foo"
[15:05:15] <shbot> knstn: 0
[15:05:36] <emanuele6> i causes injections for different reason, but at least it's better than $i in most cases
[15:05:46] <earnestly> From bash ml
[15:06:09] <earnestly> # i='x[$(id>&2)]'; test -v "$i"
[15:06:10] <shbot> earnestly: uid=0(root) gid=0(root) groups=0(root)
[15:06:34] <earnestly> It's so fundamentally fucked, there is such a potential shitstorm coming from this
[15:07:12] <emanuele6> # i='x[$(id>&2)]'; echo "${!i}"
[15:07:12] <shbot> emanuele6: uid=0(root) gid=0(root) groups=0(root)
[15:07:34] <emanuele6> # a=(b c); x=a[1]; echo "${!x}"
[15:07:35] <shbot> emanuele6: c
[15:08:00] <earnestly> But this applies to arithmetic contexts
[15:08:01] <earnestly> as well
[15:08:18] <earnestly> So perhaps you may not expose user input to -v, but you probably do to arithmetic
[15:08:39] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Quit: WeeChat 1.1.1)
[15:08:47] <earnestly> emanuele6: The workaround is to use @Q
[15:08:48] *** Joins: bitchin (sid516755@user/bitchin)
[15:08:51] <bitchin> hello
[15:09:02] <bitchin> I try to read string from file in while loop, but every line has missing first character?
[15:09:15] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:09:20] <emanuele6> !REPLY
[15:09:20] <greybot> REPLY is the default variable that read populates, when not supplied with one. The trimming of leading and trailing IFS whitespace does not occur, when used as such. See ''help read'' and http://wiki.bash-hackers.org/commands/builtin/read
[15:09:53] <emanuele6> bitchin: either use:    while IFS= read -r line    instead of    while read -r line
[15:10:14] <emanuele6> or simply user   while read -r   and use the $REPLY variable
[15:10:17] <earnestly> Always use -r
[15:10:42] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[15:10:57] <emanuele6> # printf '%s\n' 'line' ' a line that starts with space'
[15:10:58] <shbot> emanuele6: line
[15:10:58] <shbot> emanuele6:  a line that starts with space
[15:11:05] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:11:14] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:11:19] <emanuele6> # printf '%s\n' 'line' ' a line that starts with space' | while read -r line; do printf '%s\n' "$line"; done
[15:11:19] <shbot> emanuele6: line
[15:11:19] <shbot> emanuele6: a line that starts with space
[15:11:21] <tirnanog> bitchin: for example?
[15:11:25] <emanuele6> bitchin: is probably doing that
[15:11:31] <emanuele6> # printf '%s\n' 'line' ' a line that starts with space' | while IFS= read -r line; do printf '%s\n' "$line"; done
[15:11:31] <shbot> emanuele6: line
[15:11:31] <shbot> emanuele6:  a line that starts with space
[15:11:42] <emanuele6> # printf '%s\n' 'line' ' a line that starts with space' | while read -r line; do printf '%s\n' "$REPLY"; done
[15:11:42] <shbot> emanuele6: no output
[15:11:46] <emanuele6> err
[15:11:49] <emanuele6> # printf '%s\n' 'line' ' a line that starts with space' | while read -r; do printf '%s\n' "$REPLY"; done
[15:11:50] <shbot> emanuele6: line
[15:11:50] <shbot> emanuele6:  a line that starts with space
[15:11:57] <emanuele6> fix is use REPLY or set IFS=''
[15:15:00] *** Joins: zoe (~zoe@fsf/member/zoe)
[15:15:24] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:15:32] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:15:39] <emanuele6> bitchin: are you there?
[15:16:43] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:16:50] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:17:32] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:17:40] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:18:02] <earnestly> Curious sideeffect of REPLY there
[15:18:09] <earnestly> Seems like a bug
[15:18:14] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Client Quit)
[15:18:16] <emanuele6> side effect?
[15:18:21] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[15:18:45] <earnestly> Not removing leading and trailing whitespace without IFS=
[15:18:52] <emanuele6> i am pretty sure it's documented
[15:18:54] <tirnanog> it behaves as is documented.
[15:18:55] <emanuele6> REPLY ignores IFS
[15:18:58] <earnestly> I can't find it yet
[15:19:16] <tirnanog> look up the read builtin in the man page.
[15:19:26] <tirnanog> (help doesn't do much good in this instance)
[15:20:23] <emanuele6> > If  no names are supplied, the line read, without the ending delimiter but otherwise unmodified, is assigned  to  the  variable REPLY
[15:20:39] <tirnanog> or wait for emanuele6 to spell it out verbatim. that works.
[15:20:40] <earnestly> That's all it mentions, yeah
[15:21:19] <earnestly> "otherwise unmodified" is the only text there which isn't exactly clear that it's ignoring IFS
[15:21:35] <earnestly> I was looking for more than just that line which I found initially
[15:22:05] <earnestly> # printf '%s\n' 'line' ' a line that starts with space' | while read -r REPLY; do printf '%s\n' "$REPLY"; done
[15:22:05] <shbot> earnestly: line
[15:22:06] <shbot> earnestly: a line that starts with space
[15:22:10] <earnestly> # printf '%s\n' 'line' ' a line that starts with space' | while read -r; do printf '%s\n' "$REPLY"; done
[15:22:11] <shbot> earnestly: line
[15:22:11] <shbot> earnestly:  a line that starts with space
[15:22:12] <emanuele6> i think that line to describe the behaviour with no names to be honest
[15:22:12] <tirnanog> I think it's clear. it is modified in so far as the line-ending delimiter is removed, otherwise is unmodified.
[15:22:26] <tirnanog> I don't see that as being open to interpretation.
[15:22:28] <emanuele6> s/line/& is enough/
[15:22:34] <earnestly> tirnanog: The idea of "modification" is introduced only there
[15:22:57] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[15:23:08] <earnestly> Nevermind that it's yet another pointlessly inconsistent feature
[15:23:17] <tirnanog> that is certainly true.
[15:23:17] <earnestly> Where I can use REPLY or not use REPLY and get different results
[15:23:28] <tirnanog> although it it's somewhat useful so I'm torn on that.
[15:23:48] <tirnanog> I suppose it's academic as the horse has very much bolted from that particular stable.
[15:24:24] <earnestly> The idea that leading space is removed, and thus "modified" is not discussed prior to the line mentioning it is "unmodified".  It's so subtle when the manual is otherwise quite good at this
[15:24:31] <emanuele6> the case in which you can use REPLY is a special case (when you don't pass any names)
[15:24:47] <emanuele6> and REPLY contains the word unmodified
[15:24:53] <tirnanog> anyway, I see your point.
[15:25:01] <emanuele6> it's consistent to how REPLY works with `select'
[15:25:11] <earnestly> Yeah I saw that too
[15:25:52] <emanuele6> with select REPLY contains the full "unmodified" line
[15:27:13] <emanuele6> # printf '%s\n' ' a line that starts with space and ends with spaces   ' | select _ in s; do declare -p REPLY; done
[15:27:13] <shbot> emanuele6: 1) s
[15:27:14] <shbot> emanuele6: #? declare -- REPLY=" a line that starts with space and ends with spaces   "
[15:27:14] <shbot> emanuele6: #?
[15:27:27] <earnestly> I think what happened is the codebase produced this inconsistent behaviour due to a different code path being taken to produce the result and instead of fixing it or making the path general, it was quickly documented after the fact, which is why the concept isn't properly introduced or explained
[15:27:59] <earnestly> I assume this based on reading variables.c where there are many different ways of doing the same thing which seems to have evolved over time
[15:28:14] <earnestly> And why some "readonly" variables are not so read-only, while others are
[15:28:39] <earnestly> (because the not-so-read-only code seems to use older routines for setting them)
[15:28:50] <earnestly> # UID=abc
[15:28:51] <shbot> earnestly: bash: UID: readonly variable
[15:29:06] <earnestly> # env UID=abc bash -c 'echo $UID'
[15:29:07] <shbot> earnestly: abc
[15:29:22] <rendar> what you think about this https://bpa.st/KDOQ ? now: i wish that with a simple option, that loop will be forever, without i change the internal do..done code, any suggestions?
[15:30:15] *** Quits: gschanuel (~gschanuel@user/gschanuel) (Read error: Connection reset by peer)
[15:30:47] *** Joins: gschanuel (~gschanuel@user/gschanuel)
[15:30:50] <earnestly> rendar: I'm going to no longer offer help or suggestions as it doesn't appear to matter
[15:30:54] <emanuele6> did you ignore the don't use substitutions in arithmetic context discussion?
[15:31:01] <rendar> earnestly, huh?
[15:31:06] <earnestly> They seem to have ignored everything emanuele6
[15:31:09] <earnestly> What a waste of time
[15:31:11] <rendar> emanuele6, of course not! this is just a try..
[15:31:20] <rendar> i did not!
[15:31:29] <rendar> i'm just doing some trying, to learn...
[15:31:35] *** Quits: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp) (Quit: -a- Connection Timed Out)
[15:31:41] <rendar> this is not production code, just hello world testing
[15:33:29] *** Joins: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp)
[15:38:37] <rendar> btw, i think in production i'd use `let "i++"`  seems the sanest way to increment a counter
[15:40:08] <tirnanog> for ((i = tries; i != 0; i -= tries > 0)); do ...; done. set tries=-1 and you'll end up with an infinite loop.
[15:40:17] <han-solo> # x=41; (( ++x )); echo $x
[15:40:18] <shbot> han-solo: 42
[15:40:41] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Read error: No route to host)
[15:41:11] <rendar> tirnanog, yep, nice solution
[15:41:42] *** Joins: tobybl (~tobybl@213.31.135.91)
[15:42:49] *** Joins: shokohsc89 (~shokohsc@161.88.195.77.rev.sfr.net)
[15:43:07] *** Quits: Lunatrius (~Lunatrius@77.38.77.136) (Ping timeout: 256 seconds)
[15:43:58] *** Joins: armands_ (~armands@46.109.8.165)
[15:44:15] *** Quits: guardian (~guardian@planet-d.net) (Ping timeout: 256 seconds)
[15:44:15] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 256 seconds)
[15:44:15] *** shokohsc89 is now known as shokohsc8
[15:44:44] *** wiscii-agogo is now known as wiscii
[15:44:47] *** Joins: Lunatrius (~Lunatrius@77.38.77.136)
[15:44:49] *** Quits: armands (~armands@46.109.8.165) (Ping timeout: 256 seconds)
[15:44:49] *** Quits: mz` (~mz`@user/mz/x-8532539) (Ping timeout: 256 seconds)
[15:44:49] *** Quits: kyr (~kyr@167.71.50.12) (Ping timeout: 256 seconds)
[15:45:34] *** Joins: lavaball (felix@31.204.155.215)
[15:46:05] *** Joins: guardian (~guardian@planet-d.net)
[15:46:21] *** Joins: kyr (~kyr@167.71.50.12)
[15:48:46] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:52:38] <bitchin> hmm emanuele6 it doesn't look like a space
[15:52:43] <bitchin> in front
[15:52:55] <tirnanog> so, again, for example?
[15:53:04] <bitchin> wait i hex dump
[15:53:15] <tirnanog> I'm betting on carriage returns unless I hear anything more.
[15:53:52] <tirnanog> or, rather, the combination of carriage returns and a poor testing methodology.
[15:54:03] <bitchin> \n
[15:54:13] <bitchin> so I have 0\n2123
[15:54:17] <bitchin> second line getting 123
[15:54:35] <tirnanog> getting 123 with what?
[15:54:43] <tirnanog> !mre > bitchin
[15:54:43] <greybot> bitchin: A minimal reproducible example is a small, self-contained command or script that can be executed by someone else, without modification, to concretely demonstrate the problem you are enquiring about. See !paste if it's longer than a few lines.
[15:54:59] <bitchin> cat "$TIMESTAMPS"| ( while read -r ts
[15:55:07] <bitchin> ok
[15:55:20] <emanuele6> > read -r ts
[15:59:27] *** Joins: jess (~jess@libera/staff/jess)
[16:01:57] *** Quits: knstn (~knstn@ppp-94-66-57-119.home.otenet.gr) (Quit: leaving)
[16:03:05] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[16:05:18] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[16:05:45] <xx> anyone have a good explanation on where I would use <<< instead of << (or other way round)?
[16:05:57] <xx> they feel the same to me
[16:07:01] <emanuele6> how?
[16:07:55] <han-solo> any example on when they behaved same ?
[16:08:08] <han-solo> !<<<
[16:08:08] <greybot> Here strings. Similar to here documents: The word after <<< is passed to the standard input of a command, with a newline appended. Syntax: ''command <<< "some sentence"'' (Like ''echo "some sentence" | command'', but without the overhead of the subshell)
[16:08:21] <emanuele6> !<<
[16:08:21] <greybot> Here documents. cat <<EOF followed by several lines of text, followed by the literal string EOF on a new line, NOT indented. The portion between the EOFs is passed to the command as standard input. If 'EOF' is 'quoted', substitutions WON'T be done; otherwise they are. See <<- for the indented variety.
[16:10:56] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 245 seconds)
[16:14:23] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[16:19:45] <mingdao> !<<-
[16:19:45] <greybot> Indented Here documents. Here documents started with <<- will ignore preceding tabs on each line, allowing you to indent your here documents nicely. Refer to << for general information on Here documents. Note that only TABs will work - spaces will not. Some editors can replace the TAB character with spaces, so be careful.
[16:19:57] *** Joins: tech_exorcist_ (~tech_exor@user/tech-exorcist/x-0447479)
[16:22:34] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Ping timeout: 260 seconds)
[16:31:21] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[16:33:01] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 245 seconds)
[16:33:30] <thebombzen> I'm writing a wrapper script in bash. I want to start a process, grep its output, and if I find a particular line I'd like to kill that process and then do something else.
[16:33:53] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Remote host closed the connection)
[16:34:11] <thebombzen> I figure this means I want to do something like, set -m; start_thing & pid="$!"; fg; unfortunately this interferes with my ability to grep the output
[16:34:22] *** Joins: AndreYuhai (~porfavord@088156211167.radom.vectranet.pl)
[16:34:35] *** Quits: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net) (Ping timeout: 264 seconds)
[16:35:21] <AndreYuhai> Hi when I do "git diff --staged --name-only" I want to keep those names in a variable as an array however when I run that git command it shows me the result in another screen(? not sure where that's shown please correct me)
[16:35:37] <AndreYuhai> How could I possibly get those names into a variable?
[16:36:58] <tirnanog> mapfile -td '' paths < <(git diff --staged --name-only -z)
[16:37:03] <bitchin> hmm this is weird, I took out the code and itworks but not in my bigger script
[16:37:31] <tirnanog> and your other "screen" is probably a pager. nothing to worry about.
[16:38:26] *** Quits: timj (~timj@user/timj) (Ping timeout: 260 seconds)
[16:40:08] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[16:42:03] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[16:42:14] <tirnanog> bitchin: consider it an opportunity to level up your debugging technique.
[16:42:50] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[16:42:55] <bitchin> tirnanog: lol
[16:42:58] <bitchin> ok :)
[16:43:10] <bitchin> someting is influencing the read to mess up
[16:43:17] <tirnanog> do you know that, or are you just assuming that?
[16:43:17] <AndreYuhai> tirnanog: Seems like I don't have a mapfile command :D
[16:43:34] * bitchin is a dev
[16:43:35] <emanuele6> AndreYuhai: mapfile is a bash builtin
[16:43:36] <AndreYuhai> tirnanog: what I meant by screen is what you see when you only run the git command, sorry I don't know what that was D:
[16:43:42] <emanuele6> you are probably not using bash
[16:43:43] <tirnanog> AndreYuhai: are you using bash?
[16:43:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:44:17] <AndreYuhai> It's zsh
[16:44:21] <emanuele6> #zsh
[16:44:35] <tirnanog> this channel is for bash and sh.
[16:44:36] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[16:44:42] <emanuele6> / zsh
[16:44:44] *** Quits: b0b (~bob@user/b0b) (Quit: o/)
[16:44:45] <emanuele6> oops
[16:44:55] <AndreYuhai> You mean join zsh? :D
[16:45:01] <tirnanog> yes.
[16:45:05] <tirnanog> zsh is not on topic here.
[16:45:14] *** Joins: b0b (~bob@user/b0b)
[16:45:22] <AndreYuhai> Sure I'll ask there or figure something out. Thank you for the help!
[16:45:34] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[16:46:39] *** Joins: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795)
[16:47:28] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[16:47:57] <tirnanog> bitchin: I would suggest while read -r; do printf '%q\n' "$REPLY" ... as a starting point.
[16:49:58] <rendar> can i start from a crontab line a script that has a while true loop into it?
[16:50:16] <emanuele6> you can also step your bash code: https://mywiki.wooledge.org/BashGuide/Practices
[16:50:52] <tirnanog> rendar: you can execute whatever shell code in a crontab entry as is permissible by the shell that your cron implementation uses (whatever /bin/sh is, commonly).
[16:51:12] <rendar> ok
[16:51:25] <tirnanog> if that shell is used to execute another script, there is no reason for it to care what manner of syntax is employed.
[16:52:03] *** Joins: jinsun (~quassel@user/jinsun)
[16:52:04] *** Joins: zostj (~rue@1-162-47-227.dynamic-ip.hinet.net)
[16:52:18] <tirnanog> "start ... a script" does imply the execution of a standalone script.
[16:52:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[16:52:29] <tirnanog> in which case, it's none of cron's business what the executable does.
[16:53:53] <bitchin> ok I found the line
[16:53:56] *** Joins: timj (~timj@user/timj)
[16:53:59] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:54:00] <bitchin> It was unexpected TBH :D
[16:54:11] <bitchin> a command executed in while loop was intefering
[16:54:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:54:26] <bitchin> but nothing assingd
[16:54:39] <rendar> another thing, can i start a function of a bash script in background, into anther process? e.g. `my_fn &`
[16:55:09] <tirnanog> yes.
[16:59:09] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:59:50] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 260 seconds)
[17:00:31] <phogg> rendar: I recommend that you don't. As a general practice it is best to put your script into a file and then just execute that file from the cron job.
[17:00:36] <phogg> this makes many things simpler
[17:01:03] <rendar> phogg, yes absolutely
[17:01:54] <rendar> but in this case, maybe i need a function, i mean, i have this script mount_remote to mount a remote host NFS filesystem, then i want that it does a while true loop to ping the remote host, and when it doesn't reply to pings anymore it unmounts the remote filesystem with force+lazy
[17:02:11] <rendar> so i guess having a separate script for just a while loop like that, would be a waste?
[17:02:15] *** Joins: seninha (~seninha@user/seninha)
[17:02:42] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[17:03:01] *** Quits: Jad (~Nashmi@user/jad) (Ping timeout: 256 seconds)
[17:04:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[17:04:27] <rendar> what is the best way to achieve this?
[17:04:36] <AndreYuhai> How can I still run with bash instead of zsh even if I am using zsh?
[17:05:52] <xx> AndreYuhai: do you have bash installed?
[17:06:04] <xx> if yes, you just type bash on the command line and then you're in bash
[17:07:05] <AndreYuhai> xx: when I do echo $SHELL within bash I still see zsh why is that?
[17:07:35] <emanuele6> because SHELL is not the shell that is running your script
[17:07:45] <emanuele6> SHELL is your user's login shell
[17:07:58] *** Quits: tech_exorcist_ (~tech_exor@user/tech-exorcist/x-0447479) (Quit: afk, ttyl)
[17:08:16] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Read error: Connection reset by peer)
[17:09:00] <emanuele6> !$SHELL
[17:09:00] <greybot> The SHELL environment variable is normally set to the login shell specified in the passwd database (/etc/passwd) when you log in. It does NOT reflect what shell you're currently in. For that, try: ps -p $$
[17:09:28] <AndreYuhai> emanuele6: but then I still get mapfile command not found in bash. What am I doing wrong?
[17:09:34] <AndreYuhai> Oh thanks for the info!
[17:10:03] <emanuele6> what is the output of: bash -c 'echo "$BASH_VERSION"' ?
[17:10:19] <AndreYuhai> emanuele6: 3.2.57(1)-release
[17:10:34] <emanuele6> that is very old
[17:10:42] <emanuele6> !faq feature
[17:10:42] <greybot> https://mywiki.wooledge.org/BashFAQ/061 -- Is there a list of which features were added to specific releases (versions) of Bash?
[17:11:06] <emanuele6> mapfile was added in bash4.4 (released 2016)
[17:11:21] <AndreYuhai> emanuele6: Oh mapfile is in 4.4 :D Okay  thank you I'll try to update!
[17:11:30] <emanuele6> you need to use a different solution, e.g. a while read -rd '' loop
[17:11:34] <emanuele6> or update, sure
[17:11:48] <rendar> what OS do you use to have a so old bash?
[17:11:58] <xx> AndreYuhai: $SHELL is a meaningless variable
[17:12:09] <AndreYuhai> rendar: macOS :D
[17:12:12] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[17:12:24] <xx> AndreYuhai: brew.sh and install new bash
[17:12:56] <AndreYuhai> Alright I'll do that thank you!
[17:13:25] <xx> and keep in mind that whatever script you create will possibly not work on other macOS devices that don't have an updated bash
[17:13:28] <emanuele6> while read -rd ''; do paths+=( "$REPLY" ); done < <(git diff --staged --name-only -z)
[17:13:39] <emanuele6> otherwise you should be able to use that in bash3 ^
[17:14:12] <emanuele6> as an alternative to:  mapfile -td '' paths < <(git diff --staged --name-only -z)
[17:14:31] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[17:14:50] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[17:15:00] <emanuele6> i was second guessing that bash3 supported +=(), but it does
[17:15:12] <emanuele6> += equal was introduced in 3.1, and you have 3.2
[17:15:16] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[17:15:38] <AndreYuhai> emanuele6: Alright I'll try that one and see if it works! xx: So maybe I could just check the bash version in the beginning and then error out if the version is not supported
[17:15:42] <emanuele6> without +=, it's still doable:   while read -rd ''; do paths=( "${paths[@]}" "$REPLY" ); done < <(git diff --staged --name-only -z)
[17:16:23] <AndreYuhai> Why the second "<" after done?
[17:16:35] <emanuele6> it's not a "second"
[17:16:41] <emanuele6> < is a redirection
[17:16:52] <emanuele6> !<( > <(...) is a process substitution
[17:16:52] <greybot> <(...) is a process substitution: Process Substitution: <(command) or >(command) is replaced by a FIFO or /dev/fd/* entry. Basically shorthand for setting up a named pipe. See <http://mywiki.wooledge.org/ProcessSubstitution>. Example: diff -u <(sort file1) <(sort file2)
[17:17:16] <xx> AndreYuhai: (( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 1 )) || { printf 'Bash 4.1 or newer required\n' >&2; exit 1; }
[17:17:36] <xx> or 4.4 in your case
[17:17:44] <AndreYuhai> Yea I just meant second from the left, sorry :D
[17:18:05] <AndreYuhai> TIL process substitution, thanks!
[17:18:33] <xx> it always confuses me that I have to do < <(command) and not <<(command)
[17:18:37] <AndreYuhai> xx: Thanks for the snippet! :) I am just trying git pre-commit hooks hence the script. :D
[17:19:00] *** Quits: ogis (~Android@fpa0563d97.aicf503.ap.nuro.jp) (Quit: -a- Connection Timed Out)
[17:21:53] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[17:23:00] *** Joins: ogis (~Android@240d:1c:3d:9500:c5bb:8662:fba7:ec08)
[17:23:26] <emanuele6> process substitution is a very old feature; can be used to avoid having to set `shopt -s lastpipe' like in this, but it can also be used to have complex multidimensional pipelines
[17:24:03] <emanuele6> i think the <() syntax and the idea originated from "rc" shell of plan9 operating systems
[17:24:16] *** Quits: zro (~zro@user/zro) (Ping timeout: 245 seconds)
[17:26:08] *** Joins: karabaja4 (~karabaja4@dh207-93-141.xnet.hr)
[17:26:36] <emanuele6> yes, the rc shell has <{} that is equivalent to <() ; see page 4 of https://plan9.io/sys/doc/rc.pdf
[17:26:58] <emanuele6> it does not have an equivalent of >{} though
[17:27:03] <emanuele6> err >()
[17:28:12] <emanuele6> s/having to set `shopt -s lastpipe' like in this/& case/
[17:28:23] *** Joins: sandb0y (~pirate@user/sandb0y)
[17:29:03] <xx> multidimensional pipelines? Will I start getting echos from the dimension of fear?
[17:29:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:30:17] <xx> can I get an example of a complex multidimensional pipeline?
[17:32:54] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[17:33:00] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[17:33:05] <emanuele6> # { { echo 'directly to while'; echo >&4 'to sed'; echo >&3 'to awk' ;} 4> >(sed 's,$, and from sed to while,') 3> >(awk '{ print $0" and from awk to while" }') ;} 3>&1 4>&1 | while read -r; do printf '%s and from while to stdout\n' "$REPLY"; done
[17:33:06] <shbot> emanuele6: directly to while and from while to stdout
[17:33:06] <shbot> emanuele6: to awk and from awk to while and from while to stdout
[17:33:06] <shbot> emanuele6: to sed and from sed to while and from while to stdout
[17:34:35] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[17:34:35] *** Quits: dermoth (~dermoth@dsl-236-124-197.b2b2c.ca) (Ping timeout: 264 seconds)
[17:35:06] <emanuele6> then you could also have the first three words of each line piped to wc -c, and the rest of the words piped to tr '[:lower:]' '[:upper:]' and then combine them swapped, etc
[17:35:42] *** Joins: damxsa_ (~damx@2001:16a2:df3c:b500:52e7:1c66:409b:139f)
[17:41:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[17:43:06] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:43:16] *** Joins: A|an (~Alan@173.216.51.200)
[17:43:17] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:44:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:44:57] *** Joins: sinaowolabi__ (~SinaOwola@160.152.117.193)
[17:45:06] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 245 seconds)
[17:45:40] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[17:47:10] <emanuele6> err, 3>&1 4>&1 was unnecerray
[17:47:42] <emanuele6> i put it there because i initially meant to pipe awk and sed to something else and then join them in the end, but ran out of ideas
[17:49:22] *** Quits: timj (~timj@user/timj) (Ping timeout: 260 seconds)
[17:50:57] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[17:50:59] *** Quits: damxsa_ (~damx@2001:16a2:df3c:b500:52e7:1c66:409b:139f) (Remote host closed the connection)
[17:51:29] *** Joins: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85)
[17:53:57] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[17:58:07] *** Quits: Anton (anton@user/anton) (Read error: Connection reset by peer)
[18:01:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[18:01:24] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:03:59] *** Joins: Anton (anton@user/anton)
[18:04:49] *** Joins: timj (~timj@user/timj)
[18:10:25] *** Quits: Anton (anton@user/anton) (Quit: Anton)
[18:11:31] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:11:50] *** Joins: Anton (anton@user/anton)
[18:12:05] *** Joins: pycurious (~Adium@user/pycurious)
[18:12:15] <pycurious> in a makefile - how do i make this code work: https://dpaste.org/DNbY
[18:14:59] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 256 seconds)
[18:16:43] <emanuele6> !make
[18:16:43] <greybot> Make is not bash, and Makefiles are not scripts. Ask in ##workingset and read http://www.gnu.org/software/make/manual/ or the help documents of your version of make.
[18:18:17] *** Quits: jos1 (~jos3@dyndsl-091-096-033-040.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[18:18:49] <emanuele6> pycurious: anyhow, $(INAME) is make variable expansion, not bash variable expansion
[18:19:00] *** Quits: ogis (~Android@240d:1c:3d:9500:c5bb:8662:fba7:ec08) (Quit: -a- Connection Timed Out)
[18:20:08] <emanuele6> and in your example INAME is a shell variable, not a make variable
[18:20:51] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[18:21:01] <pycurious> emanuele6: does that shell variable even live from one line to the next. Any hope of accessing that variable in the docker line?
[18:21:09] <emanuele6> yes. it do.
[18:21:20] <emanuele6> but $() is make variable expansion
[18:21:55] <geirha> and no, since each line is passed to its own sh -c
[18:22:33] *** Anton is now known as anton
[18:22:37] <emanuele6> you are right geirha
[18:22:46] <emanuele6> also you can't use $ in make files
[18:23:01] *** Joins: ogis (~Android@240d:1c:3d:9500:c5bb:8662:fba7:ec08)
[18:23:01] <emanuele6> to expand variables
[18:23:11] <emanuele6> i mean in the shell command
[18:26:07] <earnestly> It's sometimes hard to suppress the realisation that makefiles are wordsplit city
[18:26:39] <earnestly> Even newer iterations of the idea like ninja can't handle spaces in filenames
[18:26:46] <earnestly> (as targets)
[18:31:38] *** Joins: jos1 (~jos3@host-091-097-187-078.ewe-ip-backbone.de)
[18:32:06] <xx> earnestly: yeah, that one hurts a lot
[18:32:12] <xx> can't use "" to work around it either
[18:32:46] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[18:33:14] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[18:34:21] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[18:35:59] <furrymcgee> # make -f - <<<$'a\\ b:\n\techo "$@"' a\ b
[18:36:00] <shbot> furrymcgee: bash: make: command not found
[18:36:23] <furrymcgee> no?
[18:48:25] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:48:37] <emanuele6> i didn't know that you can have spaces in make target names
[18:48:49] <emanuele6> that use of $@ is funny
[18:49:37] *** Quits: damxsa_ (~damx@2001:16a2:df3c:b500:fcfd:fe1a:694f:da85) (Quit: Leaving)
[18:51:56] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:54:58] *** Joins: docmax (~docmax@dynamic-077-008-156-237.77.8.pool.telefonica.de)
[18:56:13] *** Joins: ferdna (~ferdna@user/ferdna)
[18:59:11] *** Quits: AndreYuhai (~porfavord@088156211167.radom.vectranet.pl) (Ping timeout: 264 seconds)
[19:00:46] *** Quits: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net) (Quit: Leaving...)
[19:01:55] *** Joins: igemnace (~ian@user/igemnace)
[19:02:48] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[19:03:44] *** Joins: ChmEarl (~chmearl@user/chmearl)
[19:06:46] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Ping timeout: 260 seconds)
[19:07:28] *** Joins: Guest83 (~Guest83@103.38.199.98)
[19:10:41] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[19:13:38] <dob1> I have a command at the end of a script that needs to be executed, if I don't have any exit command before it, but maybe some commands in the script before it can fail, can I be sure it will be executed ?
[19:13:46] *** Joins: AndreYuhai (~porfavord@088156211167.radom.vectranet.pl)
[19:14:27] <OMGOMG> yes
[19:14:40] <emanuele6> yes, unless you are using -e
[19:14:41] <emanuele6> !e
[19:14:44] <emanuele6> !-e
[19:14:44] <greybot> "set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
[19:14:49] <emanuele6> that you should not be using
[19:15:23] <lopid> or a trap
[19:15:56] <OMGOMG> or cosmic rays
[19:15:58] <emanuele6> lopid: the trap would have to contain exit, no?
[19:16:10] <OMGOMG> or the cleaning lady trips over a cable
[19:16:34] <dob1> I have nothing of them :)
[19:16:39] <lopid> probably
[19:16:48] <lopid> or a kill?
[19:16:52] <emanuele6> then it doesn't count :p
[19:16:57] <emanuele6> yes, kill works
[19:17:02] <emanuele6> or: x=\${x@P}; : "${x@P}"
[19:17:27] <emanuele6> # x=\${x@P}; : "${x@P}"; echo "i won't run"
[19:17:28] <shbot> emanuele6: /init: line 39:    44 Segmentation fault      LOADABLES=1 setsid bash -l
[19:17:28] <shbot> emanuele6: (shell exited with 139)
[19:18:49] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Quit: ZNC 1.8.2 - https://znc.in)
[19:19:02] *** Joins: mr-red (~drd@93-42-69-115.ip85.fastwebnet.it)
[19:19:21] *** Quits: Guest83 (~Guest83@103.38.199.98) (Quit: Client closed)
[19:19:51] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:19:58] *** Quits: jos1 (~jos3@host-091-097-187-078.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[19:20:44] <emanuele6> # x=\${x@P};${x@P}
[19:20:44] <shbot> emanuele6: /init: line 39:    44 Segmentation fault      LOADABLES=1 setsid bash -l
[19:20:45] <shbot> emanuele6: (shell exited with 139)
[19:20:57] <emanuele6> crashes bash in 16 characters
[19:21:45] <emanuele6> for interactive shells, 13 characters are enough: PS1=\${PS1@P}
[19:21:48] <emanuele6> # PS1=\${PS1@P}
[19:21:49] <shbot> emanuele6: /init: line 39:    44 Segmentation fault      LOADABLES=1 setsid bash -l
[19:21:49] <shbot> emanuele6: (shell exited with 139)
[19:22:14] *** Quits: djph (~dpurgert@cpe-107-10-244-220.neo.res.rr.com) (Ping timeout: 260 seconds)
[19:24:47] *** Joins: Trieste (T@user/pilgrim)
[19:25:15] *** Quits: Trieste_ (T@user/pilgrim) (Ping timeout: 256 seconds)
[19:25:35] *** Quits: timj (~timj@user/timj) (Ping timeout: 264 seconds)
[19:26:25] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Read error: Connection reset by peer)
[19:26:45] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[19:26:54] *** Quits: AndreYuhai (~porfavord@088156211167.radom.vectranet.pl) (Ping timeout: 260 seconds)
[19:27:24] <pycurious> how do i ignore the output of a command in bash. It's currently sending a non-zero exit code to the caller. "docker rmi $(docker images -q -f dangling=true)"
[19:30:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:477:1061:59ab:6b1f)
[19:30:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:477:1061:59ab:6b1f) (Changing host)
[19:30:12] *** Joins: skapata (~Skapata@user/skapata)
[19:30:21] *** Quits: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net) (Ping timeout: 256 seconds)
[19:30:42] <emanuele6> of which command? the one in the subshell or the one outside of the subshell?
[19:31:02] <emanuele6> docker rmi "$(docker images -q -f dangling=true || :)"
[19:31:10] <emanuele6> or: docker rmi "$(docker images -q -f dangling=true)" || :
[19:31:10] <gnoo> pycurious: you could probably use : as an ending command to ignore previous command's exit code. to ignore stdout/stderr, you can use >/dev/null or 2>/dev/null
[19:32:11] * gnoo wishes his typing was as fast as emanuele6's
[19:32:23] *** Joins: jos1 (~jos3@dyndsl-091-096-036-208.ewe-ip-backbone.de)
[19:35:07] <gnoo> what about using $(command ; : ) instead of $(command || : ) ? is there any difference?
[19:36:04] <emanuele6> yes :)
[19:36:46] <emanuele6> well
[19:36:49] <emanuele6> it depends
[19:37:14] <emanuele6> if you have set-e on (which you probably have if you need to do this sort of things), it matters
[19:37:46] *** Joins: rgrinberg (~textual@ip73-183-64-186.ct.co.cr)
[19:37:59] <emanuele6> because $(false; true) make $() overall return 0, but the false command would have still failed and made the subshell (with the main shell) exit
[19:38:44] <emanuele6> # if a=$(false ; :); then echo "$?"; else echo "$?"; fi
[19:38:45] <shbot> emanuele6: 0
[19:38:52] <emanuele6> # if a=$(false); then echo "$?"; else echo "$?"; fi
[19:38:52] <shbot> emanuele6: 1
[19:38:58] <emanuele6> # if a=$(false || :); then echo "$?"; else echo "$?"; fi
[19:38:59] <shbot> emanuele6: 0
[19:39:06] <emanuele6> # set -x; if a=$(false); then echo "$?"; else echo "$?"; fi
[19:39:08] <gnoo> funny use of if there :)
[19:39:13] <shbot> emanuele6: ++ false
[19:39:13] <shbot> emanuele6: + a=
[19:39:13] <shbot> emanuele6: etc... ( http://ix.io/3EcU )
[19:39:15] *** Joins: knstn (~knstn@ppp-94-66-57-119.home.otenet.gr)
[19:39:20] <emanuele6> err, meant to use -e
[19:39:22] <emanuele6> # set -e; if a=$(false); then echo "$?"; else echo "$?"; fi
[19:39:23] <shbot> emanuele6: 1
[19:39:46] <emanuele6> this is a bad example, conditional don't make bash exit
[19:39:56] <emanuele6> # set -e; : "$(false)"
[19:39:57] <shbot> emanuele6: no output
[19:40:02] <emanuele6> # set -e; : "$(false)"; echo something
[19:40:03] <shbot> emanuele6: something
[19:40:11] <emanuele6> oh, nevermind then
[19:40:36] <emanuele6> didn't subshell inherit set -e?
[19:40:45] *** Joins: timj (~timj@user/timj)
[19:41:11] <emanuele6> > When a SubShell is involved, it gets worse still -- the behavior changes depending on whether Bash is invoked in POSIX mode.
[19:41:26] <emanuele6> # set -eo posix; : "$(false)"; echo something
[19:41:26] <shbot> emanuele6: something
[19:41:38] <emanuele6> well, i must be misremembering nevermind
[19:42:20] <gnoo> are you quoting that from !-e ?
[19:42:47] <emanuele6> from the wiki link
[19:43:01] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Ping timeout: 245 seconds)
[19:43:08] <gnoo> yeah, i'll have to look at it someday...
[19:44:54] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:46:31] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[19:47:22] <emanuele6> i am confused: https://fvue.nl/wiki/Bash:_Error_handling#Executed_in_subshell.2C_exit_on_error
[19:47:28] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[19:49:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[19:50:27] <gnoo> that's weird on more than one way
[19:50:39] <gnoo> > (false && true) || false
[19:50:48] <emanuele6> oh, in posix sh, set-e is inherited by command substitutions, but it only crashes the subshell
[19:51:13] <emanuele6> # set -eo posix; echo "$(false; echo my text)"; echo something
[19:51:14] <shbot> emanuele6:
[19:51:14] <shbot> emanuele6: something
[19:51:22] <emanuele6> # set -e; echo "$(false; echo my text)"; echo something
[19:51:23] <shbot> emanuele6: my text
[19:51:23] <shbot> emanuele6: something
[19:51:29] <emanuele6> # set -o posix; echo "$(false; echo my text)"; echo something
[19:51:29] <shbot> emanuele6: my text
[19:51:30] <shbot> emanuele6: something
[19:51:48] <emanuele6> that sounds pretty useless
[19:51:57] <emanuele6> unless you are doing an assignment i guess
[19:52:06] <gnoo> #set -o posix ; set -e ; echo "$(false; echo asdf)"; echo something
[19:52:10] <gnoo>  #set -o posix ; set -e ; echo "$(false; echo asdf)"; echo something
[19:52:13] <gnoo> # set -o posix ; set -e ; echo "$(false; echo asdf)"; echo something
[19:52:14] <shbot> gnoo:
[19:52:14] <shbot> gnoo: something
[19:52:26] <emanuele6> # set -eo posix; echo "$(false || echo my text)"; echo something
[19:52:26] <shbot> emanuele6: my text
[19:52:26] <shbot> emanuele6: something
[19:52:44] <emanuele6> # set -eo posix; if a=$(false ; :); then echo "$?"; else echo "$?"; fi
[19:52:45] <shbot> emanuele6: 0
[19:53:03] <emanuele6> why?
[19:53:33] *** Joins: Jad (~Nashmi@user/jad)
[19:54:21] <emanuele6> # bash -c 'set -eo posix; if a=$(false ; echo a); then echo "$?"; else echo "$?"; fi; declare -p a'
[19:54:22] <shbot> emanuele6: 0
[19:54:22] <shbot> emanuele6: declare -- a="a"
[19:54:39] <emanuele6> err, i didn't mean to copy bash-c, but it doesn't matter
[19:55:11] <emanuele6> it seems that command substitutions in assignments are not effected by set-e even in posix mode
[19:55:17] <emanuele6> set-e is a mess
[19:55:52] <emanuele6> i wonder if that is a bug
[19:56:48] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[19:56:49] <emanuele6> oh, it's not that
[19:57:03] <emanuele6> > The -e setting shall be ignored when executing the compound list following the while, until, if, or elif reserved word, a pipeline beginning with the ! reserved word, or any command of an AND-OR list other than the last.
[19:57:31] <emanuele6> ok, that makes a little more sense
[19:57:37] *** Joins: dermoth (~dermoth@dsl-236-124-197.b2b2c.ca)
[19:57:47] <emanuele6> # set -eo posix; a=$(false ; echo a); echo "$?"; declare -p a
[19:57:48] <shbot> emanuele6: (shell exited with 1)
[19:58:01] <emanuele6> # set -eo posix; a=$(false || echo a); echo "$?"; declare -p a
[19:58:02] <shbot> emanuele6: 0
[19:58:02] <shbot> emanuele6: declare -- a="a"
[19:58:20] <emanuele6> gnoo: see, here || vs ; matters :P
[19:58:30] *** Joins: goldfish (~goldfish@user/goldfish)
[19:58:48] <emanuele6> # set -e; a=$(false || echo a); echo "$?"; declare -p a
[19:58:49] <shbot> emanuele6: 0
[19:58:49] <shbot> emanuele6: declare -- a="a"
[19:58:57] <emanuele6> # set -eo posix; a=$(false; echo a); echo "$?"; declare -p a
[19:58:58] <shbot> emanuele6: (shell exited with 1)
[19:59:10] <emanuele6> # set -e; a=$(false; echo a); echo "$?"; declare -p a
[19:59:11] <shbot> emanuele6: 0
[19:59:11] <shbot> emanuele6: declare -- a="a"
[19:59:23] <gnoo> this proves that set -e shouldn't be touched at all
[19:59:28] <emanuele6> indeed
[20:01:34] <gnoo> # ln -s "$(type -p bash)" sh ; ./sh -c 'set -e; a=$(false; echo a); declare -p a'
[20:01:34] <shbot> gnoo: no output
[20:01:37] <ormaaj> # set -xe; a=$(false; echo a); echo "$?"; declare -p a
[20:01:44] <shbot> ormaaj: ++ false
[20:01:44] <shbot> ormaaj: ++ echo a
[20:01:44] <shbot> ormaaj: etc... ( http://ix.io/3Ed5 )
[20:02:38] <gnoo> # ln -s "$(type -p bash)" notbash ; ./notbash -c 'set -e; a=$(false; echo a); declare -p a'
[20:02:39] <shbot> gnoo: declare -- a="a"
[20:03:09] <gnoo> hmm, so posix mode is activated only if argv[0] is sh? (or if set -o posix)
[20:03:33] <emanuele6> or if -o posix is passed to bash
[20:03:36] <emanuele6> or --posix
[20:03:45] <emanuele6> !posixmode
[20:03:45] <greybot> https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
[20:04:10] <ormaaj> ok it bails out of the comsub in posix mode because posix requires something dumb presumably
[20:05:15] <emanuele6> but i am surprised that it tries to "improve" set-e by changing its behaviour outside of posix mode and making it more confusing
[20:05:17] *** Joins: GNUHacker (~gnu@fsf/member/GNUHacker)
[20:05:22] <emanuele6> that's the bash way i guess
[20:06:14] <ormaaj> I guess someone whined that that bash broke their broken script somehow.
[20:06:17] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[20:06:31] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[20:07:08] <gnoo> any thoughts on !learn posixmode https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html or, info "(bash) Bash POSIX Mode" ?
[20:07:43] <ormaaj> ?
[20:07:53] <gnoo> (basically encouraging local documentation instead of html_node)
[20:08:32] * gnoo happens to like the info reader. probably because he uses emacs
[20:08:53] *** Joins: Jad_ (~Nashmi@91.186.236.11)
[20:09:12] <emanuele6> i use   info --vi-keys
[20:09:18] <emanuele6> which is undocumented :O
[20:09:58] <gnoo> it is documented, info info. then type s --vi RET
[20:09:58] <emanuele6> gnoo: also maybe link  http://tiswww.case.edu/~chet/bash/POSIX  instead of  https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
[20:10:20] <emanuele6> oh, i see it now
[20:10:51] <emanuele6> it is not documented in the  man page though hehe
[20:10:56] *** Quits: Jad (~Nashmi@user/jad) (Ping timeout: 245 seconds)
[20:11:27] <gnoo> yeah, probably where most vi users would look at
[20:11:45] <emanuele6> that has to be intentional, lol
[20:12:04] * gnoo puts tinfoil hat
[20:12:24] <emanuele6> so change the factoid?
[20:13:00] <emanuele6> i suggested to link that page on chet's blog because that is the same link present on the man page
[20:13:07] <ormaaj> The wiki has no page on this?
[20:13:35] <gnoo> !unlearn posixmode
[20:13:53] <emanuele6> forget
[20:13:54] *** Quits: kj (~kj@kj.aerisnetwork.net) (Quit: Textual IRC Client: www.textualapp.com)
[20:14:03] <gnoo> !forget posixmode
[20:14:03] <greybot> OK, gnoo
[20:14:08] <gnoo> !learn posixmode http://tiswww.case.edu/~chet/bash/POSIX or, info "(bash) Bash POSIX Mode"
[20:14:08] <greybot> OK, gnoo
[20:14:20] <gnoo> !posixmode
[20:14:21] <greybot> http://tiswww.case.edu/~chet/bash/POSIX or, info "(bash) Bash POSIX Mode"
[20:15:09] <emanuele6> actually, i think i found --vi-keys in the info page for info
[20:15:30] *** Joins: rwp (~invalid@havoc.proulx.com)
[20:15:52] <emanuele6> but i was using an info reader that used vi keys by default instead of GNU info to read that
[20:16:44] <gnoo> i think info's initial way of explaining how to use info is bad. i only "got it" after using emacs. but before that, no matter how many times i read the "how to use info", never could use it at all
[20:16:55] *** Joins: zro (~zro@user/zro)
[20:19:10] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 268 seconds)
[20:19:52] *** Quits: rgrinberg (~textual@ip73-183-64-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:20:02] *** Joins: johs1 (~johs@70.79-161-48.customer.lyse.net)
[20:21:37] <emanuele6> i knew how it worked, but i never read the pages for too long, because after a bit i would forget i am not in less and navigate to some weird place by trying to use vi navigation.
[20:22:11] <xx> emanuele6: heh, that's exactly what happens to me
[20:22:28] <emanuele6> that is why i was using a separate program instead of GNU info for a long time
[20:22:39] <emanuele6> i think it was called  pinfo
[20:23:03] <emanuele6> then i learn about --vi-keys, and now i can use GNU info without going insane :P
[20:25:17] <xx> emanuele6: did you alias info='info --vi-keys' or does info have a config file somewhere?
[20:25:40] <emanuele6> info () { command info --vi-keys "$@" ;}
[20:26:00] <emanuele6> xx: it also has a config file in which you can create new bindings and do other things
[20:27:36] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 245 seconds)
[20:30:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[20:31:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:32:08] *** Quits: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au) (Read error: Connection reset by peer)
[20:32:18] *** Joins: kurahaupo (~kurahaupo@123-243-221-134.tpgi.com.au)
[20:35:29] <pycurious> emanuele6: Thanks. That worked.
[20:36:09] <pycurious> I want to cat a bunch of files using : cat /tmp/summary.txt *.txt >> /tmp/output.txt — but i want the name of the file before the file is catted into output.txt - how can i do that?
[20:36:54] <emanuele6> of which file?
[20:37:10] <pycurious> emanuele6: each of those files in "*.txt"
[20:37:12] <furrymcgee> more *.txt
[20:37:36] <xx> touch /tmp/output.txt; for f in /path/to/files/*; do echo "$(basename "$f")" >> /tmp/output.txt; cat "$f" >> /tmp/output.txt; done
[20:37:40] <xx> haven't tested it though
[20:37:50] *** Quits: timj (~timj@user/timj) (Ping timeout: 260 seconds)
[20:37:54] <emanuele6> oh, i was thinking you meant something else
[20:38:42] <emanuele6> awk -vOFS=: '{ print FILENAME, $0 }' /tmp/summary.txt ./*.txt
[20:39:30] *** Joins: azerty (~azerty@user/badwolf)
[20:39:41] <emanuele6> # printf 'line in file1\n' > file1.txt; printf 'line in file2\nanother line in file2\n' > file2.txt; awk -vOFS=: '{ print FILENAME, $0 }' ./*.txt
[20:39:41] <shbot> emanuele6: ./file1.txt:line in file1
[20:39:41] <shbot> emanuele6: ./file2.txt:line in file2
[20:39:41] <shbot> emanuele6: ./file2.txt:another line in file2
[20:40:31] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[20:40:44] <rendar> let's say i mount a remote filesystem, i want to `while true; do if ! ping $that_host; then umount ...; sleep 20 ...`  what is the best method to do this in background? running a function in background like `my_fn &` or running another script which does that loop? also: what about permissions? can i do `sudo umount` in another script, without that it asks for root password?
[20:40:45] *** Joins: luva3 (~luva@45.141.152.62)
[20:41:22] *** Quits: luva (~luva@45.141.152.54) (Ping timeout: 268 seconds)
[20:41:22] *** luva3 is now known as luva
[20:42:13] *** Joins: mikeliuk (~mikeliuk@213.205.198.125)
[20:44:18] *** Joins: H3dn1ng (~H3dn1ng@185.213.154.236)
[20:45:08] *** Joins: ano (~ano@user/ano)
[20:45:13] <Freneticks> is there a way to script socket witch netcat ? like echo '{"execute": "guest-network-get-interfaces"}' | nc -U /tmp/qga.sock | jq '.return[1]."ip-addresses"[0]."ip-address"'
[20:45:16] <Freneticks> but it doesn't exist
[20:45:22] <Freneticks> -exist exit*
[20:49:09] *** Quits: furrymcgee (~devuan@cgn-213-196-210-222.nc.de) (Quit: leaving)
[20:50:00] <rendar> anyone?
[20:50:49] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[20:51:33] *** Joins: ano (~ano@user/ano)
[20:52:13] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:52:18] <armin> hm, i noticed the statement after "But many commands return non-zero even when there wasn't an error. For example" on http://mywiki.wooledge.org/BashFAQ/105 is simply not true...
[20:52:37] <armin> has this behaviour changed over time?
[20:52:54] *** Joins: timj (~timj@user/timj)
[20:52:58] <emanuele6> what do you mean?
[20:53:12] <emanuele6> there is literally an example after that
[20:53:25] <emanuele6> [ -d /foo ]
[20:53:29] <armin> if i set -e and do something like if [ -d /doesntexist ]; something ... my bash would not exit.
[20:53:30] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[20:53:32] <armin> try it.
[20:53:41] <emanuele6> [ -d /foo ] is a command.
[20:53:47] <armin> correct, and?
[20:53:48] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[20:54:17] <emanuele6> and you are not reading the next paragraph
[20:54:23] *** Quits: johs1 (~johs@70.79-161-48.customer.lyse.net) (Ping timeout: 264 seconds)
[20:54:26] <armin> i did.
[20:54:31] <armin> *you* didn't.
[20:54:37] <emanuele6> If the directory doesn't exist, the [ command returns non-zero. Clearly we don't want to abort when that happens -- our script wants to handle that in the else part. So the shell implementors made a bunch of special rules, like "commands that are part of an if test are immune", and "commands in a pipeline, other than the last one, are immune".
[20:54:58] <armin> ah!
[20:54:59] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[20:55:04] <armin> THAT's what's meant by immune
[20:55:13] <armin> so why's that a problem?
[20:55:23] <tirnanog> this is going to be fun.
[20:55:58] <armin> this is fun already.
[20:56:10] <emanuele6> very fun
[20:56:53] <armin> emanuele6: ok gotcha, thank you. :)
[20:58:52] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Quit: Quit)
[21:01:38] *** Joins: johs1 (~johs@70.79-161-48.customer.lyse.net)
[21:02:12] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:04:58] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:08:07] *** Quits: pystardust (~pystardus@2001:19f0:4401:fbb:5400:3ff:fe5f:7b75) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[21:08:22] *** Joins: pystardust (~pystardus@45.32.119.11)
[21:08:48] <Friithian> it's fun seeing hacky stuff appearing in my rss feed http://www.luffy.cx/en/blog/2021-rsync-ssh-two-remotes.html
[21:09:11] *** Joins: ravan__ (~ravan@user/ravan)
[21:11:19] *** Joins: annomy (~annomy@103.38.199.98)
[21:11:54] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 260 seconds)
[21:12:18] <rendar> if my root crontab runs some script containing 'sudo command ..' the sudo will be just ignored, since is the root itself running, right?
[21:12:28] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[21:13:31] <xx> rendar: not ignored, but will not add any extra privileges
[21:13:51] <xx> and depending on what's in /etc/sudoers it might sanitize some environment variables that you actually needed
[21:13:53] <rendar> xx, ok
[21:14:12] <rendar> xx, so it may fail the running?
[21:14:23] <xx> depending on what's in your script, yes
[21:16:36] *** Joins: akoana (~ah@user/akoana)
[21:16:42] <xx> # env -i myvar=something sudo env | grep myvar
[21:16:42] <shbot> xx: env: 'sudo': No such file or directory
[21:16:48] <xx> # env -i myvar=something /bin/sudo env | grep myvar
[21:16:49] <shbot> xx: env: '/bin/sudo': No such file or directory
[21:16:57] <xx> guess the bot doesn't have sudo
[21:17:13] <akoana> # id
[21:17:14] <shbot> akoana: uid=0(root) gid=0(root) groups=0(root)
[21:17:27] <akoana> you are already root :)
[21:17:37] <xx> akoana: it was in response to something that happened before you rejoined
[21:17:53] <xx> to demonstrate that sudo in its default config sanitizes the environment
[21:19:01] *** Joins: assezpale (~yannick@lfbn-idf3-1-1109-150.w90-46.abo.wanadoo.fr)
[21:19:10] <akoana> ah, I see, usually I tend to use sudo -i (if at all)..
[21:19:54] <xx> akoana: it was about having sudo inside a script file and running that script under root permissions already
[21:20:09] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:20:25] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:20:26] <xx> sudo is not ignored, it just doesn't give any extra permissions, but can modify the environment in unexpected ways
[21:20:48] <emanuele6> in configuration dependant ways
[21:21:17] *** Joins: rgrinberg (~textual@200.5.63.76)
[21:21:46] <emanuele6> it also adds special variables to the environment SUDO_COMMAND SUDO_USER SUDO_UID SUDO_GID
[21:22:13] <emanuele6> so that a program can detect if it is being run with sudo by root
[21:22:49] <emanuele6> if [[ $USER = root && $SUDO_USER = root ]]; then echo >&2 'why are you doing this????'; fi
[21:23:15] <akoana> yeah, why use sudo when you are already root...
[21:23:52] *** Joins: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1)
[21:23:58] *** Quits: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1) (Changing host)
[21:23:58] *** Joins: horribleprogram (~user@user/horribleprogram)
[21:24:02] <emanuele6> your sudo may be configured to only give you certain permissions if you are using sudo
[21:24:25] <emanuele6> or a program you are using may only be allowed to run when SUDO_USER is in the environment
[21:24:54] <emanuele6> s/may only be allowed to run/may only allow you to run it/
[21:25:15] <emanuele6> sudo is a complex program
[21:27:18] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[21:28:53] *** Joins: djph (~dpurgert@cpe-107-10-235-152.neo.res.rr.com)
[21:30:21] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[21:30:37] <armin>  #bash3 set -e; if /bin/false; then echo yolo; fi; uptime
[21:30:40] <armin> #bash3 set -e; if /bin/false; then echo yolo; fi; uptime
[21:30:51] <armin> # set -e; if /bin/false; then echo yolo; fi; uptime
[21:30:51] <shbot> armin: bash: uptime: command not found
[21:30:52] <shbot> armin: (shell exited with 127)
[21:30:55] <armin> #sh set -e; if /bin/false; then echo yolo; fi; uptime
[21:30:58] <armin> hmm
[21:31:05] <armin> any other prefixes i could try?
[21:31:27] <han-solo> !triggers
[21:31:27] <armin> i suspect this behaviour was changed somewhen in bash 4
[21:31:28] <greybot> /msg shbot # triggers
[21:31:30] <armin> ty
[21:31:44] <han-solo> but try in private window
[21:32:34] *** Quits: ravan__ (~ravan@user/ravan) (Quit: Leaving)
[21:33:09] <xx> emanuele6: wonder if doas will ever replace it in any major distro
[21:33:30] <geirha> 3# set -e ; (( i++ )) ; printf 'All good. Nothing to see here\n'
[21:33:31] <shbot> geirha: All good. Nothing to see here
[21:33:36] *** Joins: riles (~root@dhcp-24-53-243-12.cable.user.start.ca)
[21:35:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:f453:84d1:9e20:fd44) (Ping timeout: 245 seconds)
[21:36:27] *** Quits: jess (~jess@libera/staff/jess) ()
[21:37:45] <emanuele6> !su > xx: doas and sudo are most times, not the right tool
[21:37:45] <greybot> xx: doas and sudo are most times, not the right tool: su (switch user) opens a new interactive session with new privileges. Usually to run some commands as root. Don't use this to drop privileges in scripts; try setpriv instead, if you have it. See <http://jdebp.info/FGA/dont-abuse-su-for-dropping-privileges.html>
[21:38:25] <armin> ok, still, the statement "Even worse, the rules change from one Bash version to another," i can not verify, all versions sh/mksh/bash/dash shbot knows about would not abort.
[21:38:53] <armin> does anyone have an example where this *actually* aborts?
[21:38:54] <emanuele6> they are fine to gain privileges, i guess.
[21:39:35] <emanuele6> > sh/mksh/bash/dash
[21:39:51] <emanuele6> mksh is not bash, dash is not bash, sh# is dash
[21:39:55] <emanuele6> # triggers
[21:39:55] <shbot> emanuele6: Available triggers: +# bash-devel; 1# bash-1.14; 2# bash-2.05b; 32# bash-3.2; 3# bash-3.2; 42# bash-4.2; 43# bash-4.3; 44# bash-4.4; 4# bash-4.4; 50# bash-5.0; 51# bash-5.1; 5# bash-5.1; # bash-5.1; d# dash-0.5.9; sh# dash-0.5.9; k# ksh 93u+ 2012-08-01; m# mksh R59 2021/01/24; b# bourne; j# bourne(w/job);
[21:40:21] <qwerty> or sudo -u user to run a single command as another user, you don't need a new int shell just for one command
[21:40:25] <geirha> 3# set -e ; (( i++ )) ; printf 'All good. Nothing to see here\n'
[21:40:26] <shbot> geirha: All good. Nothing to see here
[21:40:28] <geirha> 4# set -e ; (( i++ )) ; printf 'All good. Nothing to see here\n'
[21:40:29] <shbot> geirha: (shell exited with 1)
[21:40:43] <armin> geirha: ty!
[21:43:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[21:43:53] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:44:21] *** Joins: ravan (~ravan@user/ravan)
[21:44:35] <armin> 4# set -e ; i=0; (( i++ )) ; printf 'All good. Nothing to see here\n'
[21:44:36] <shbot> armin: (shell exited with 1)
[21:44:40] <armin> 4# set -e ; i=-1; (( i++ )) ; printf 'All good. Nothing to see here\n'
[21:44:40] <shbot> armin: All good. Nothing to see here
[21:44:47] *** Joins: Inline (~Inline@2a02:908:1252:7a80:da94:668f:b78c:97b1)
[21:44:52] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739) (Read error: Connection reset by peer)
[21:45:05] <armin> 3# set -e ; i=0; (( i++ )) ; printf 'All good. Nothing to see here\n'
[21:45:05] <shbot> armin: All good. Nothing to see here
[21:45:08] *** Joins: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739)
[21:45:11] <armin> 3# set -e ; i=-1; (( i++ )) ; printf 'All good. Nothing to see here\n'
[21:45:11] <shbot> armin: All good. Nothing to see here
[21:46:27] <geirha> (( )) is a compound command, and set -e used to ignore compound commands
[21:46:29] *** Joins: pelle (~pelle@83-94-28-36-cable.dk.customer.tdc.net)
[21:51:02] <xx> emanuele6: so how would I use it correctly on a system such as debian, instead of abusing su for it?
[21:51:10] <xx> is there a "standard" tool for dropping privs?
[21:51:23] *** Quits: annomy (~annomy@103.38.199.98) (Ping timeout: 264 seconds)
[21:51:35] *** Quits: Jad_ (~Nashmi@91.186.236.11) (Remote host closed the connection)
[21:52:02] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a052:a7f8:c6e4:b537)
[21:52:02] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a052:a7f8:c6e4:b537) (Changing host)
[21:52:02] *** Joins: skapata (~Skapata@user/skapata)
[21:53:28] *** Quits: msmhnd^ (~msmhnd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[21:53:41] <emanuele6> xx: it's in the link
[21:54:14] <xx> the link does not mention setpriv at all
[21:54:36] <xx> and it mentions a bunch of different tools, many of them probably not being maintained anymore
[21:55:35] <xx> but thanks, it solved 1 issue I was having and looking for a solution. `setpriv --reset-env mycommand` is what I was after
[21:56:01] *** Quits: johs1 (~johs@70.79-161-48.customer.lyse.net) (Quit: WeeChat 3.3)
[21:56:26] <emanuele6> iirc greycat hosts the wiki on a debian system that uses daemontools as init system, so i would think that daemontools is still being maintained
[21:58:25] <emanuele6> https://en.wikipedia.org/wiki/Daemontools nevermind
[21:59:04] *** Joins: ano (~ano@user/ano)
[21:59:20] <emanuele6> mm, that page does not contain info about setpriv(1) as you said
[21:59:36] <emanuele6> there was one page about setpriv, but i don't remember in which factoid it was
[21:59:51] *** Joins: glazed (~glazed@2603-8001-6902-f659-f84f-0178-3e06-897e.res6.spectrum.com)
[21:59:58] *** Quits: mr-red (~drd@93-42-69-115.ip85.fastwebnet.it) (Ping timeout: 260 seconds)
[22:01:51] <akoana> on Debian setpriv is in the util-linux package
[22:02:17] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[22:05:33] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Remote host closed the connection)
[22:05:59] <akoana> so setprov is very likely installed on every (not ancient) debian, as util-linux provides fsck...
[22:06:26] <akoana> setpriv even
[22:08:31] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[22:09:19] <xx> thanks, looks like I'll learn setpriv
[22:09:23] *** Quits: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9) (Remote host closed the connection)
[22:09:30] <xx> the `setpriv --reset-env` is something I was already looking for anyway
[22:11:30] *** Joins: mtk (~mtk@2601:185:200:72:44aa:53fe:886b:bee9)
[22:11:50] <armin> daemontools isn't being developed actively anymore since DJB considers the software "finished", but there are some project that work extremely similar (runit for example, which voidlinux is based upon).
[22:12:47] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:13:51] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[22:14:05] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Remote host closed the connection)
[22:15:23] *** Joins: jirido (jirido@gateway/vpn/protonvpn/jirido)
[22:17:43] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[22:18:21] *** Quits: xx (~xx@user/xx) (Remote host closed the connection)
[22:18:56] *** Joins: xx (~xx@user/xx)
[22:19:51] *** Quits: zro (~zro@user/zro) (Remote host closed the connection)
[22:20:16] *** Joins: zro (~zro@user/zro)
[22:21:00] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Quit: Quit)
[22:21:50] *** Joins: AndreYuhai (~porfavord@088156211167.radom.vectranet.pl)
[22:23:13] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[22:25:10] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Ping timeout: 260 seconds)
[22:26:10] *** Quits: xx (~xx@user/xx) (Remote host closed the connection)
[22:26:32] *** Joins: xx (~xx@user/xx)
[22:26:50] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[22:28:42] *** Joins: n4dir (~user@i577BC98A.versanet.de)
[22:30:36] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:58] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[22:35:27] *** Joins: rgrinberg (~textual@200.5.63.76)
[22:36:05] *** Quits: docmax (~docmax@dynamic-077-008-156-237.77.8.pool.telefonica.de) (Read error: Connection reset by peer)
[22:37:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:37:39] *** Joins: docmax (~docmax@dynamic-077-008-238-069.77.8.pool.telefonica.de)
[22:39:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:41:15] *** Quits: mikeliuk (~mikeliuk@213.205.198.125) (Quit: Connection closed)
[22:42:38] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[22:42:59] *** Quits: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net) (Client Quit)
[22:43:14] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[22:44:23] *** Joins: reset (~reset@user/reset)
[22:50:48] *** Quits: pelle (~pelle@83-94-28-36-cable.dk.customer.tdc.net) (Remote host closed the connection)
[22:52:39] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:53:20] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[22:53:32] *** Joins: extern (~archer@80.246.130.109)
[22:54:23] <ormaaj> ruby unit test framework and init system is a strange feature set.
[22:56:01] *** Joins: ano (~ano@user/ano)
[22:59:49] *** Quits: xx (~xx@user/xx) (Remote host closed the connection)
[23:00:05] *** Joins: xx (~xx@user/xx)
[23:00:43] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[23:00:55] *** Quits: xx (~xx@user/xx) (Client Quit)
[23:07:24] *** Quits: irf21k (~irf21k@2401:4900:4bca:2d46:1:0:d4e:7027) (Read error: Connection reset by peer)
[23:07:51] *** Quits: zostj (~rue@1-162-47-227.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[23:09:52] *** Joins: xx (~xx@user/xx)
[23:14:25] *** Quits: gschanuel (~gschanuel@user/gschanuel) (Read error: Connection reset by peer)
[23:14:51] *** Joins: gschanuel (~gschanuel@user/gschanuel)
[23:19:51] *** Quits: dermoth (~dermoth@dsl-236-124-197.b2b2c.ca) (Ping timeout: 268 seconds)
[23:22:21] *** Joins: Atque_ (~Atque@user/atque)
[23:23:38] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:23:45] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[23:23:58] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[23:26:24] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:27:34] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[23:30:34] *** Joins: cdown (~cdown@89.32.122.5)
[23:30:54] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[23:31:19] *** Joins: ano (~ano@user/ano)
[23:34:48] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:35:02] *** Quits: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4) (Read error: Connection reset by peer)
[23:35:40] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[23:36:18] *** Parts: FreeBDSM (~uzer@user/freebdsm) ()
[23:37:02] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[23:37:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:38:08] *** Joins: Benway (~hyrc@p5deb4354.dip0.t-ipconnect.de)
[23:38:41] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:39:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:39:17] *** Quits: John_Ivan (~John_Ivan@user/john-ivan/x-1515935) (Remote host closed the connection)
[23:43:31] *** Joins: vaio (~gary@user/ghost)
[23:43:35] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 264 seconds)
[23:45:22] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:45:47] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:48:13] *** Quits: xx (~xx@user/xx) (Quit: xx)
[23:48:46] *** Joins: xx (~xx@user/xx)
[23:49:40] <rendar> why this line `elif [[ ! -z "${device_is_regular_file}" ]] && [[ -z "${device_is_real_device}" ]]; then` should contain a syntax error?!
[23:50:49] <xx> rendar: that line is fine
[23:50:53] <twkm> probably there's no if above it.
[23:50:55] <xx> the problem will be elsewhere
[23:50:57] <rendar> :(
[23:51:01] <rendar> let's see
[23:51:12] <twkm> if ...; then ...; elif ...
[23:51:44] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[23:51:58] <twkm> if there's a fi above it that ended the if.
[23:52:21] <twkm> if ...; then ...; fi; elif ... # broken
[23:52:34] *** Joins: nyjets (~zz@2001:8003:1612:d500:1a8:7013:fe5c:fbd4)
[23:52:46] <rendar> these are the lines near that line https://bpa.st/GX6Q -- but i don't see any syntax error :(
[23:54:00] <rendar> any clue?
[23:54:11] <xx> !check
[23:54:12] <checkbot> rendar: Line 7: device_file is referenced but not assigned. Line 29: Use -n instead of ! -z. Line 47: loop_dev_has_been_created appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb30252 for all 5 issues.
[23:54:51] <rendar> that doesn't help
[23:56:09] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[23:57:30] <xx> well, maybe it does, the very first error tells you that you don't have a hashbang that would indicate that bash should execute the script
[23:57:34] <xx> how are you running that script?
[23:58:20] <xx> because [[ ... ]] will indeed be a syntax error in sh
[23:59:32] <xx> also, what's the exact error message you're getting?
[23:59:52] <rendar> ok i found the bug
