[00:02:23] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[00:02:52] *** Joins: lambdatheultimat (~psycomic@2a01cb0588c5e400365236799711e677.ipv6.abo.wanadoo.fr)
[00:03:10] *** Quits: psycomic (~psycomic@2a01cb0588c5e400284313f3697cc627.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[00:10:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:12:06] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:12:30] *** Joins: Fare (~fare@c-73-119-28-185.hsd1.ma.comcast.net)
[00:13:29] *** Joins: tyson2 (~user@74.198.26.28)
[00:13:50] *** Joins: gethuen (uid502979@id-502979.stonehaven.irccloud.com)
[00:17:08] <nij-> akater[m]: Yeah, Kenzo is always encouraging in my mind.. I take your advice. For now, I'm just curious how a wrapper can be done right. I know I'm quite far from writing one..
[00:18:22] <nij-> Looking back, Kenzo is also a program that made me determined to stick with CL :) How amazing.
[00:18:50] <akater[m]> nij-: Note that according to press releases (or whatever the appropriate term is), Kenzo achieved more than others and it utilized CLOS substantially.  Not surprising.  Complex problems need advanced tools, and CL offers a lot.  You can benefit from wrappers when you stumble upon a specific algorithm that is tedious to implement.  But I highly doubt they make a good initial target… unless you have (or aim for) a NLNet grant, I guess.
[00:19:40] <akater[m]> Computer algebra is one of my passions (but I don't work on anything related now, sadly).  I was largely brought to Lisp thanks to it.
[00:20:21] <nij-> yay <3 me too brought to lisp thanks to it
[00:26:00] <nij-> For those who are interested in what kenzo is, here's a note to a great summary video: https://bpa.st/OHXQ
[00:26:34] *** Quits: lisp123 (~lisp123@45.130.83.191) (Remote host closed the connection)
[00:26:40] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[00:30:01] *** Quits: lambdatheultimat (~psycomic@2a01cb0588c5e400365236799711e677.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[00:30:28] *** Joins: lambdatheultimat (~psycomic@2a01cb0588c5e400365236799711e677.ipv6.abo.wanadoo.fr)
[00:34:15] *** Quits: tyson2 (~user@74.198.26.28) (Quit: ERC (IRC client for Emacs 27.2))
[00:38:18] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[00:39:31] *** Joins: h3ck3r9696 (~psycomic@2a01cb0588c5e400365236799711e677.ipv6.abo.wanadoo.fr)
[00:41:36] *** Quits: h3ck3r9696 (~psycomic@2a01cb0588c5e400365236799711e677.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[00:41:47] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:41:54] *** Joins: h3ck3r9696 (~psycomic@2a01cb0588c5e400bdba9178f8a97929.ipv6.abo.wanadoo.fr)
[00:41:55] *** Quits: lambdatheultimat (~psycomic@2a01cb0588c5e400365236799711e677.ipv6.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[00:42:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:48:26] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[00:59:40] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[01:01:01] *** Quits: h3ck3r9696 (~psycomic@2a01cb0588c5e400bdba9178f8a97929.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[01:01:24] *** Joins: h3ck3r9696 (~psycomic@2a01cb0588c5e400b570df5425fa1ce9.ipv6.abo.wanadoo.fr)
[01:04:58] *** Joins: lisp123 (~lisp123@45.130.83.191)
[01:06:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:13:40] *** Quits: h3ck3r9696 (~psycomic@2a01cb0588c5e400b570df5425fa1ce9.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[01:14:33] *** Joins: psycomic (~psycomic@2a01cb0588c5e400b570df5425fa1ce9.ipv6.abo.wanadoo.fr)
[01:15:02] *** Quits: psycomic (~psycomic@2a01cb0588c5e400b570df5425fa1ce9.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[01:15:23] *** Joins: psycomic (~psycomic@2a01cb0588c5e400b570df5425fa1ce9.ipv6.abo.wanadoo.fr)
[01:18:22] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[01:18:32] *** Joins: lambdatheultimat (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr)
[01:19:18] *** Joins: Oladon (~olad@98.43.81.226)
[01:19:45] *** Joins: lisp123 (~lisp123@45.130.83.191)
[01:20:40] *** Quits: psycomic (~psycomic@2a01cb0588c5e400b570df5425fa1ce9.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[01:21:42] *** Joins: akoana (~ah@user/akoana)
[01:28:05] *** Quits: lambdatheultimat (~psycomic@lfbn-nan-1-360-205.w82-120.abo.wanadoo.fr) (Remote host closed the connection)
[01:28:23] *** Joins: lambdatheultimat (~psycomic@2a01cb0588c5e4006b80b4e40b877143.ipv6.abo.wanadoo.fr)
[01:28:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[01:30:28] *** Joins: aeth (~aeth@user/aeth)
[01:35:40] *** Quits: lambdatheultimat (~psycomic@2a01cb0588c5e4006b80b4e40b877143.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[01:38:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:41:10] *** Quits: gaqwas (~john@dynamic-095-117-101-222.95.117.pool.telefonica.de) (Ping timeout: 240 seconds)
[01:48:43] <jfb4> nij-: cool, interesting link
[01:51:35] *** Joins: wheelsucker (~user@2600:8801:8c03:1f00::8165)
[01:51:45] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[01:53:08] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b8b0:22c8:d1ea:efcc)
[01:55:02] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[01:55:44] <nij-> yw. I hope one day I can grasp their algorithms.
[01:56:07] <nij-> They didn't use the "algorithms" mathematicians use btw.
[01:56:27] <nij-> In fact, what mathematicians have are not algorithms.. and that's part of the reason why homotopy theory is hard.
[01:56:56] <nij-> KENZO uses true algorithms, which are unrealistic for humans to perform either.
[01:57:27] *** Joins: Oladon (~olad@98.43.81.226)
[02:14:48] *** Quits: lisp123 (~lisp123@45.130.83.191) (Remote host closed the connection)
[02:15:55] *** Joins: lisp123 (~lisp123@45.130.83.191)
[02:16:09] *** Joins: cosimone (~user@93-47-229-186.ip115.fastwebnet.it)
[02:20:08] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[02:21:08] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 268 seconds)
[02:22:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:33:14] <hexology> re: "unnecessary consing", are lisp compilers generally not able to "flatten" operations like (reduce #'+ (mapcar (#'foo data)) into something more akin to (loop for x in data sum x)?
[02:33:44] <hexology> are there any good references on lisp compiler optimizations that would be understandable by non-compiler people?
[02:34:21] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[02:35:59] <White_Flame> that would mean pipelining two looping constructs together
[02:36:05] <White_Flame> mapcar is necessarily consing
[02:36:27] <White_Flame> the semantics mean that all the calls to FOO occur before any calls to #'+
[02:36:37] <phoe> (#'foo data)?
[02:36:43] <Bike> yeah, deforestation is harder if side effects exist.
[02:36:51] <White_Flame> and yeah, I presume you meant (mapcar #'foo data)
[02:37:22] <White_Flame> if CL was a pure functional language, that optimization would be possible
[02:38:03] <Bike> it coudl also be possible if a compiler kept track of enough info about side effects. i don't know if any do.
[02:38:31] <phoe> I think SBCL might do?...
[02:38:35] <moon-child> White_Flame: the compiler knows that + is effect-free, though
[02:38:50] <Bike> not necessarily. the compiler is allowed to be stupid.
[02:38:53] <moon-child> like, I would be very surprised if  (progn (+ 2 2) other stuff) didn't DCE the (+ 2 2)
[02:39:59] <moon-child> sbcl generates identical code for (lambda (x) x) and (lambda (x) (funcall #'+ 2 2) x)
[02:40:30] <White_Flame> probably because it reduces it to (+ 2 2) first, and then can eliminate that
[02:42:26] <moon-child> good point.  It does the same for (reduce #'+ '(2 2)), though, and reduce is just a regular primitive
[02:42:39] <moon-child> but it's weird; (reduce #'+ (list 2 2)) does generate code
[02:43:28] <Bike> reduce is not usually used on constant data, so they probably didn't put in an optimization for it like that
[02:44:18] <moon-child> ohh, wait, maybe with the const data it was inlined and folded?
[02:44:51] <Bike> for (funcall #'+ 2 2) it would be yes.
[02:45:05] <Bike> (funcall #'+ 2 2) -> (+ 2 2) -constantfold-> 4
[02:45:16] <moon-child> (reduce #'+ '(2 2)) generates no code.  (reduce #'+ (list 2 2)) generates a call to REDUCE
[02:45:48] <moon-child> that's what I'm confused about
[02:46:51] *** Joins: srhm (~srhm@user/srhm)
[02:46:57] <White_Flame> LIST is side-effectful by default?
[02:47:03] <White_Flame> at least when it comes to changing the heap
[02:47:28] <White_Flame> and identity of the term when the function is called again, vs literal data
[02:47:29] <moon-child> i don't think changing the heap is generally considered an effect
[02:47:55] <moon-child> and since it's guaranteed unique, there's nothing to compare it to
[02:48:24] <moon-child> but yeah that's actually probably what it is
[02:48:26] <White_Flame> (push *somewhere* (list 2 2)) certainly would leave a trail of testably EQ vs not EQ lsits
[02:48:42] <White_Flame> so this gets into escape analysis
[02:49:07] <moon-child> yea
[02:49:56] <White_Flame> and before any of that is tackled, I'd use my magic wish for a peephole optimizer :-P
[02:50:11] <moon-child> and I think you're right it's not tracking purity; it would have to know reduce is pure to know it doesn't escape any references to its parameter
[02:50:56] *** Joins: lisp123 (~lisp123@45.130.83.191)
[02:55:27] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[02:56:13] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Client Quit)
[02:56:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:58:14] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[03:03:08] *** Quits: frgo (~frgo@p200300deef0cee005457892af5ad4408.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:03:17] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:03:25] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[03:03:33] *** Joins: frgo (~frgo@p200300deef0cee008976347c097f0284.dip0.t-ipconnect.de)
[03:06:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[03:06:17] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[03:06:25] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:09:09] *** Quits: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:19:17] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b8b0:22c8:d1ea:efcc) (Remote host closed the connection)
[03:20:46] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:21:36] <akater[m]> hexology: `mapcar` must return an actual list, according to the standard.  `reduce`, according to the standard, is a function.  It must evaluate the mapcar form.  I thus don't see how deforestation could happen even if compiler could recognise the pattern.  CLtL2 has Appendix about SERIES package that does deforestation, check it out.  I'd love to have a better version of it.  It's not trivial.
[03:24:23] <moon-child> akater[m]: because aside from performance, there would be no observable difference between a 'naive' compilation of that code and a 'deforested' version
[03:34:13] *** Quits: cosimone (~user@93-47-229-186.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[03:34:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[03:36:10] *** Joins: aeth (~aeth@user/aeth)
[03:39:03] <hexology> that was a helpful discussion ^^
[03:39:04] <hexology> thanks all
[03:39:56] <akater[m]> moon-child: There would be if you, say, `(trace mapcar)`.  If data is constant, it's fine to optimize.  In general, however, rewriting the program behind the user's back adds to confusion.  CLtL2 actually discusses a case with SERIES optimization which would be possible to perform automatically but SERIES doesn't do it.  I think it was a good decision.
[03:40:10] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[03:40:10] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-CAE5-dynamic.midco.net) (Ping timeout: 258 seconds)
[03:40:30] <hexology> this looks very interesting https://www.cliki.net/Series
[03:40:59] <hexology> i've been meaning to at least browse cltl2 anyway, so this is good motivation to do so
[03:41:38] <hexology> so purely functional programming languages are able to "deforest" or pipeline/flatten loops specifically because they know there are no side effects happening inside those loops
[03:41:41] <hexology> that makes sense
[03:46:58] <hexology> also i made a typo in my original but i think you all realized what i meant :P
[03:47:09] <hexology> (reduce #'+ (mapcar #'foo data))
[03:47:49] <hayley> You can manually deforest by (reduce #'+ data :key #'foo) at the least.
[03:50:03] <hexology> and there's no "lazy" iteration construct in the standard library / spec right? you would have to use a 3rd party library like that series library above?
[03:50:37] <hexology> or could you do better with plain MAP
[03:53:57] <akater[m]> hexology: Yes, you'd need a non-standard library.  series however is almost cltl2 and cltl2 is almost standard. :-]  You may also fund this https://arxiv.org/abs/1612.06668 interesting.
[03:57:11] <hexology> :) i don't have any qualms about a dependency like that, although i am definitely used to having lazy iteration built-in from python
[03:58:03] <hexology> and thank you for the tip on the paper, the abstract seems interesting
[04:00:09] <hexology> one of the great things in python for example is being able to treat an i/o stream like any a lazy iterator, and you can build arbitrary lazy iterators (really generators/coroutines), makes for surprisingly elegant data processing compared to what i think most people imagine when they think "python"
[04:04:22] <akater[m]> hexology: Some people believe the approach of Series is flawed because it requires too much handcraft.  They suggest using transducers instead.  I happen to favor handcrafting but I'm an amateur; I just want code that is human-readable at every point of transformation (until it's reasonably possible) while transducers seem to follow the “trust the compiler to do the right thing to be as efficient” way which is more opaque.
[04:04:26] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:08:07] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:12:43] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[04:13:00] <akater[m]> hexology: “Elegant” is easy, ”elegant and efficient” is much harder.  “Elegant, efficient and comprehensible at every level” is something that apparently nobody's interested in.  At least, I couldn't find anyone else who explicitly cares about this.
[04:14:41] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[04:22:27] <hexology> akater[m]: transducer?
[04:22:54] <hexology> also - did you all just get a lot of join/leave spam from me?
[04:28:55] <hexology> i see, that's part of Series https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node352.html
[04:29:23] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[04:29:38] <akater[m]> Transducers are popular in Language-That-Must-Not-Be-Named.  Certain partially applied functions.
[04:33:34] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[04:34:08] <hexology> i can imagine a few languages-that-must-not-be-named, but the partially applied function make me think it's the one named after a mathematician's first name that doesn't have a lot of parentheses
[04:34:10] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[04:36:10] *** Joins: igemnace (~ian@user/igemnace)
[04:41:58] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[04:43:48] <nij-> Hi! I have imported maxima into a CL repl following the guide (https://github.com/calyau/maxima/blob/master/INSTALL.lisp). However, it opens a maxima repl in the lisp repl.. which didn't line up with what i was hoping for. I hoped to be able to evaluate the maxima expressions, and have the result returned as a lisp object that I can play with in the lisp repl. Does anyone know how to achieve that?
[04:46:16] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Ping timeout: 252 seconds)
[04:49:48] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[04:50:02] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 245 seconds)
[04:50:44] <_death> akater[m]: note that it's not conforming to trace cl:mapcar
[04:55:09] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[04:55:17] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[04:58:22] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:03:38] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[05:07:00] *** Quits: Fare (~fare@c-73-119-28-185.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[05:07:22] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[05:07:22] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:07:24] *** nij_ is now known as nij-
[05:07:36] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net)
[05:07:36] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:07:44] *** nij_ is now known as nij-
[05:12:07] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-63DA-dynamic.midco.net) (Ping timeout: 245 seconds)
[05:23:34] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:23:40] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[05:23:56] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:24:11] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:24:11] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:24:13] *** nij_ is now known as nij-
[05:24:25] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:24:25] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:24:27] *** nij_ is now known as nij-
[05:24:39] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:24:39] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:24:41] *** nij_ is now known as nij-
[05:24:53] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:24:53] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:24:55] *** nij_ is now known as nij-
[05:25:07] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:25:07] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:25:09] *** nij_ is now known as nij-
[05:25:21] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:25:21] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:25:23] *** nij_ is now known as nij-
[05:25:35] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:25:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:25:37] *** nij_ is now known as nij-
[05:25:49] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:25:49] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:25:51] *** nij_ is now known as nij-
[05:26:03] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:26:03] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:26:05] *** nij_ is now known as nij-
[05:26:17] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:26:17] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:26:19] *** nij_ is now known as nij-
[05:26:31] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:26:31] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:26:33] *** nij_ is now known as nij-
[05:26:45] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:26:46] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:26:46] *** nij_ is now known as nij-
[05:26:59] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:26:59] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:27:01] *** nij_ is now known as nij-
[05:27:13] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:27:14] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:27:15] *** nij_ is now known as nij-
[05:27:27] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:27:27] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:27:29] *** nij_ is now known as nij-
[05:27:41] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:27:41] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:27:43] *** nij_ is now known as nij-
[05:27:55] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:27:55] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:27:57] *** nij_ is now known as nij-
[05:28:09] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:28:10] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:28:11] *** nij_ is now known as nij-
[05:28:23] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:28:23] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:28:25] *** nij_ is now known as nij-
[05:28:37] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:28:38] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:28:39] *** nij_ is now known as nij-
[05:28:51] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:28:51] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:28:53] *** nij_ is now known as nij-
[05:29:05] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:29:06] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:29:07] *** nij_ is now known as nij-
[05:29:19] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:29:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:29:21] *** nij_ is now known as nij-
[05:29:33] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:29:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:29:35] *** nij_ is now known as nij-
[05:29:47] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:29:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:29:49] *** nij_ is now known as nij-
[05:29:50] <semz> Is the server having a hiccup?
[05:30:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:30:02] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:30:03] *** nij_ is now known as nij-
[05:30:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:30:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:30:17] *** nij_ is now known as nij-
[05:30:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:30:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:30:31] *** nij_ is now known as nij-
[05:30:43] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:30:43] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:30:45] *** nij_ is now known as nij-
[05:30:56] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:30:56] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:30:59] *** nij_ is now known as nij-
[05:31:10] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:31:10] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:31:11] *** nij_ is now known as nij-
[05:31:20] <hayley> It helps to remember there are typically multiple servers on a IRC network.
[05:31:23] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:31:23] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:31:26] *** nij_ is now known as nij-
[05:31:37] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:31:37] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:31:39] *** nij_ is now known as nij-
[05:31:51] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:31:52] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:31:53] *** nij_ is now known as nij-
[05:32:05] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:32:05] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:32:07] *** nij_ is now known as nij-
[05:32:19] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:32:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:32:21] *** nij_ is now known as nij-
[05:32:33] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:32:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:32:35] *** nij_ is now known as nij-
[05:32:47] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:32:47] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:32:49] *** nij_ is now known as nij-
[05:33:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:33:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:33:03] *** nij_ is now known as nij-
[05:33:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:33:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:33:17] *** nij_ is now known as nij-
[05:33:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:33:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:33:31] *** nij_ is now known as nij-
[05:33:43] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:33:43] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:33:44] *** nij_ is now known as nij-
[05:33:57] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:33:57] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:33:59] *** nij_ is now known as nij-
[05:34:11] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:34:11] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:34:13] *** nij_ is now known as nij-
[05:34:25] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:34:25] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:34:27] *** nij_ is now known as nij-
[05:34:38] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:34:38] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:34:41] *** nij_ is now known as nij-
[05:34:52] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:34:53] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:34:54] *** nij_ is now known as nij-
[05:35:06] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:35:07] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:35:08] *** nij_ is now known as nij-
[05:35:20] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:35:20] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:35:22] *** nij_ is now known as nij-
[05:35:34] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:35:34] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:35:36] *** nij_ is now known as nij-
[05:35:48] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:35:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:35:50] *** nij_ is now known as nij-
[05:36:02] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:36:03] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:36:04] *** nij_ is now known as nij-
[05:36:16] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:36:16] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:36:18] *** nij_ is now known as nij-
[05:36:30] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:36:30] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:36:32] *** nij_ is now known as nij-
[05:36:44] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:36:44] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:36:46] *** nij_ is now known as nij-
[05:36:58] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:36:58] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:37:00] *** nij_ is now known as nij-
[05:37:12] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:37:12] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:37:14] *** nij_ is now known as nij-
[05:37:26] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:37:26] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:37:28] *** nij_ is now known as nij-
[05:37:40] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:37:40] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:37:42] *** nij_ is now known as nij-
[05:37:54] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:37:55] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:37:56] *** nij_ is now known as nij-
[05:38:08] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:38:08] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:38:10] *** nij_ is now known as nij-
[05:38:21] <lotuseater> blubbediblubb
[05:38:22] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:38:22] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:38:23] *** nij_ is now known as nij-
[05:38:35] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:38:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:38:36] <lotuseater> maybe it's not algebraic and abstract enough
[05:38:37] *** nij_ is now known as nij-
[05:38:49] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:38:49] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:38:50] *** nij_ is now known as nij-
[05:39:03] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:39:03] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:39:04] *** nij_ is now known as nij-
[05:39:17] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:39:17] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:39:19] *** nij_ is now known as nij-
[05:39:31] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:39:31] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:39:32] *** nij_ is now known as nij-
[05:39:45] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:39:45] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:39:47] *** nij_ is now known as nij-
[05:39:58] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:39:58] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:40:01] *** nij_ is now known as nij-
[05:40:12] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:40:12] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:40:14] *** nij_ is now known as nij-
[05:40:26] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:40:26] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:40:27] *** nij_ is now known as nij-
[05:40:40] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:40:40] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:40:41] *** nij_ is now known as nij-
[05:40:54] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:40:54] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:40:55] *** nij_ is now known as nij-
[05:41:08] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:41:08] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:41:10] *** nij_ is now known as nij-
[05:41:22] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:41:22] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:41:23] *** nij_ is now known as nij-
[05:41:36] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:41:36] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:41:37] *** nij_ is now known as nij-
[05:41:50] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:41:50] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:41:51] *** nij_ is now known as nij-
[05:42:04] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:42:04] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:42:05] *** nij_ is now known as nij-
[05:42:18] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:42:18] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:42:19] *** nij_ is now known as nij-
[05:42:32] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:42:32] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:42:34] *** nij_ is now known as nij-
[05:42:46] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:42:46] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:42:49] *** nij_ is now known as nij-
[05:43:00] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:43:00] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:43:02] *** nij_ is now known as nij-
[05:43:14] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:43:14] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:43:15] *** nij_ is now known as nij-
[05:43:19] <akater[m]> Consider hypothetical alist accessor `alist-get`.  `(setf (alist-get key place) new)` will not necessarily call `(setf place)`: when we push a new entry it must, but if we set an existing cdr, it might not.  However, one might implement setf expander for `alist-get` so that `(setf place)` is always called.  For example, I need this to guarantee calling relevant methods of the corresponding generic function `(setf place)`.  Is there a
[05:43:19] <akater[m]> special name for setf expansions that always do this? or for practice of defining such?
[05:43:28] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:43:28] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:43:30] *** nij_ is now known as nij-
[05:43:42] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:43:42] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:43:43] *** nij_ is now known as nij-
[05:43:56] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:43:56] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:43:57] *** nij_ is now known as nij-
[05:44:10] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:44:10] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:44:11] *** nij_ is now known as nij-
[05:44:24] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:44:24] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:44:26] *** nij_ is now known as nij-
[05:44:37] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:44:37] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:44:39] *** nij_ is now known as nij-
[05:44:51] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:44:51] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:44:53] *** nij_ is now known as nij-
[05:45:05] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:45:05] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:45:07] *** nij_ is now known as nij-
[05:45:19] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:45:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:45:21] *** nij_ is now known as nij-
[05:45:33] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:45:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:45:35] *** nij_ is now known as nij-
[05:45:47] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:45:47] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:45:48] *** nij_ is now known as nij-
[05:46:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:46:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:46:02] *** nij_ is now known as nij-
[05:46:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:46:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:46:16] *** nij_ is now known as nij-
[05:46:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:46:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:46:30] *** nij_ is now known as nij-
[05:46:43] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:46:43] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:46:44] *** nij_ is now known as nij-
[05:46:57] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:46:57] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:46:58] *** nij_ is now known as nij-
[05:47:11] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:47:11] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:47:13] *** nij_ is now known as nij-
[05:47:25] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:47:25] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:47:26] *** nij_ is now known as nij-
[05:47:39] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:47:39] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:47:40] *** nij_ is now known as nij-
[05:47:53] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:47:53] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:47:55] *** nij_ is now known as nij-
[05:48:07] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:48:07] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:48:09] *** nij_ is now known as nij-
[05:48:21] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:48:21] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:48:22] *** nij_ is now known as nij-
[05:48:35] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:48:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:48:36] *** nij_ is now known as nij-
[05:48:48] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:48:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:48:50] *** nij_ is now known as nij-
[05:49:02] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:49:02] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:49:03] *** nij_ is now known as nij-
[05:49:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:49:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:49:17] *** nij_ is now known as nij-
[05:49:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:49:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:49:31] *** nij_ is now known as nij-
[05:49:42] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:49:42] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:49:45] *** nij_ is now known as nij-
[05:49:55] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:49:55] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:49:57] *** nij_ is now known as nij-
[05:50:09] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:50:09] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:50:10] *** nij_ is now known as nij-
[05:50:23] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:50:23] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:50:25] *** nij_ is now known as nij-
[05:50:37] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:50:37] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:50:39] *** nij_ is now known as nij-
[05:50:51] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:50:51] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:50:52] *** nij_ is now known as nij-
[05:51:05] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:51:05] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:51:06] *** nij_ is now known as nij-
[05:51:19] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:51:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:51:20] *** nij_ is now known as nij-
[05:51:33] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:51:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:51:34] *** nij_ is now known as nij-
[05:51:47] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:51:47] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:51:49] *** nij_ is now known as nij-
[05:52:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:52:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:52:03] *** nij_ is now known as nij-
[05:52:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:52:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:52:16] *** nij_ is now known as nij-
[05:52:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:52:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:52:31] *** nij_ is now known as nij-
[05:52:43] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:52:43] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:52:44] *** nij_ is now known as nij-
[05:52:57] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:52:57] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:52:59] *** nij_ is now known as nij-
[05:53:11] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:53:11] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:53:12] *** nij_ is now known as nij-
[05:53:25] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:53:25] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:53:26] *** nij_ is now known as nij-
[05:53:39] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:53:39] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:53:40] *** nij_ is now known as nij-
[05:53:53] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:53:53] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:53:54] *** nij_ is now known as nij-
[05:54:06] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:54:06] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:54:08] *** nij_ is now known as nij-
[05:54:20] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:54:20] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:54:21] *** nij_ is now known as nij-
[05:54:34] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:54:34] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:54:36] *** nij_ is now known as nij-
[05:54:48] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:54:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:54:49] *** nij_ is now known as nij-
[05:55:02] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:55:02] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:55:03] *** nij_ is now known as nij-
[05:55:16] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:55:16] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:55:18] *** nij_ is now known as nij-
[05:55:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:55:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:55:32] *** nij_ is now known as nij-
[05:55:43] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:55:43] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:55:44] *** nij_ is now known as nij-
[05:55:57] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:55:57] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:55:58] *** nij_ is now known as nij-
[05:56:11] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:56:11] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:56:12] *** nij_ is now known as nij-
[05:56:25] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:56:25] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:56:27] *** nij_ is now known as nij-
[05:56:39] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:56:39] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:56:40] *** nij_ is now known as nij-
[05:56:53] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:56:53] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:56:55] *** nij_ is now known as nij-
[05:57:07] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:57:07] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:57:09] *** nij_ is now known as nij-
[05:57:21] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:57:21] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:57:22] *** nij_ is now known as nij-
[05:57:34] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:57:34] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:57:36] *** nij_ is now known as nij-
[05:57:48] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:57:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:57:50] *** nij_ is now known as nij-
[05:58:02] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:58:02] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:58:04] *** nij_ is now known as nij-
[05:58:16] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:58:16] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:58:17] *** nij_ is now known as nij-
[05:58:30] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:58:30] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:58:32] *** nij_ is now known as nij-
[05:58:44] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:58:44] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:58:46] *** nij_ is now known as nij-
[05:58:58] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:58:58] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:58:59] *** nij_ is now known as nij-
[05:59:12] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:59:12] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:59:13] *** nij_ is now known as nij-
[05:59:26] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:59:26] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:59:28] *** nij_ is now known as nij-
[05:59:40] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:59:40] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:59:42] *** nij_ is now known as nij-
[05:59:54] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[05:59:54] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[05:59:55] *** nij_ is now known as nij-
[06:00:08] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:00:08] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:00:10] *** nij_ is now known as nij-
[06:00:22] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:00:22] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:00:23] *** nij_ is now known as nij-
[06:00:35] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:00:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:00:37] *** nij_ is now known as nij-
[06:00:49] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:00:49] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:00:50] *** nij_ is now known as nij-
[06:01:03] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:01:03] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:01:04] *** nij_ is now known as nij-
[06:01:17] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:01:17] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:01:19] *** nij_ is now known as nij-
[06:01:31] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:01:31] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:01:32] *** nij_ is now known as nij-
[06:01:45] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:01:45] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:01:47] *** nij_ is now known as nij-
[06:01:59] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:01:59] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:02:01] *** nij_ is now known as nij-
[06:02:13] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:02:13] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:02:14] *** nij_ is now known as nij-
[06:02:27] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:02:27] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:02:28] *** nij_ is now known as nij-
[06:02:41] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:02:41] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:02:42] *** nij_ is now known as nij-
[06:02:55] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:02:55] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:02:56] *** nij_ is now known as nij-
[06:03:09] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:03:09] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:03:11] *** nij_ is now known as nij-
[06:03:23] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:03:23] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:03:25] *** nij_ is now known as nij-
[06:03:37] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:03:37] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:03:38] *** nij_ is now known as nij-
[06:03:51] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:03:51] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:03:53] *** nij_ is now known as nij-
[06:04:05] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:04:05] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:04:07] *** nij_ is now known as nij-
[06:04:19] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:04:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:04:20] *** nij_ is now known as nij-
[06:04:33] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:04:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:04:35] *** nij_ is now known as nij-
[06:04:47] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:04:47] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:04:48] *** nij_ is now known as nij-
[06:05:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:05:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:05:02] *** nij_ is now known as nij-
[06:05:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:05:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:05:16] *** nij_ is now known as nij-
[06:05:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:05:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:05:30] *** nij_ is now known as nij-
[06:05:43] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:05:43] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:05:44] *** nij_ is now known as nij-
[06:05:57] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:05:57] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:05:59] *** nij_ is now known as nij-
[06:06:11] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:06:11] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:06:12] *** nij_ is now known as nij-
[06:06:25] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:06:25] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:06:27] *** nij_ is now known as nij-
[06:06:39] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:06:39] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:06:40] *** nij_ is now known as nij-
[06:06:52] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:06:52] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:06:54] *** nij_ is now known as nij-
[06:07:06] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:07:06] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:07:08] *** nij_ is now known as nij-
[06:07:20] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:07:20] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:07:23] *** nij_ is now known as nij-
[06:07:34] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:07:34] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:07:35] *** nij_ is now known as nij-
[06:07:48] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:07:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:07:49] *** nij_ is now known as nij-
[06:08:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:08:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:08:03] *** nij_ is now known as nij-
[06:08:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:08:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:08:16] *** nij_ is now known as nij-
[06:08:28] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:08:28] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:08:30] *** nij_ is now known as nij-
[06:08:42] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:08:42] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:08:43] *** nij_ is now known as nij-
[06:08:56] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:08:56] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:08:58] *** nij_ is now known as nij-
[06:09:04] <lotuseater> something is going on ..
[06:09:10] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:09:10] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:09:13] *** nij_ is now known as nij-
[06:09:24] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:09:24] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:09:25] *** nij_ is now known as nij-
[06:09:38] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:09:38] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:09:39] *** nij_ is now known as nij-
[06:09:52] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:09:52] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:09:53] *** nij_ is now known as nij-
[06:10:06] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:10:06] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:10:07] *** nij_ is now known as nij-
[06:10:20] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:10:20] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:10:21] *** nij_ is now known as nij-
[06:10:33] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:10:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:10:35] *** nij_ is now known as nij-
[06:10:40] <pillton> (You can add "NICK" to erc-hide-list if you use ERC)
[06:10:47] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:10:47] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:10:48] *** nij_ is now known as nij-
[06:10:53] <lotuseater> I do.
[06:11:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:11:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:11:02] *** nij_ is now known as nij-
[06:11:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:11:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:11:16] *** nij_ is now known as nij-
[06:11:28] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:11:28] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:11:31] *** nij_ is now known as nij-
[06:11:42] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:11:42] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:11:43] *** nij_ is now known as nij-
[06:11:56] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:11:56] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:11:57] *** nij_ is now known as nij-
[06:12:10] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:12:10] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:12:11] *** nij_ is now known as nij-
[06:12:23] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:12:23] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:12:26] *** nij_ is now known as nij-
[06:12:37] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:12:37] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:12:38] *** nij_ is now known as nij-
[06:12:51] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:12:51] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:12:52] *** nij_ is now known as nij-
[06:13:05] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:13:05] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:13:07] *** nij_ is now known as nij-
[06:13:19] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:13:19] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:13:20] *** nij_ is now known as nij-
[06:13:33] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:13:33] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:13:34] *** nij_ is now known as nij-
[06:13:47] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:13:47] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:13:48] *** nij_ is now known as nij-
[06:14:01] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:14:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:14:02] *** nij_ is now known as nij-
[06:14:15] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:14:15] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:14:16] *** nij_ is now known as nij-
[06:14:29] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:14:29] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:14:30] *** nij_ is now known as nij-
[06:14:42] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:14:42] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:14:44] *** nij_ is now known as nij-
[06:14:56] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:14:56] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:14:57] *** nij_ is now known as nij-
[06:15:10] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:15:10] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:15:11] *** nij_ is now known as nij-
[06:15:24] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:15:24] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:15:25] *** nij_ is now known as nij-
[06:15:38] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:15:38] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:15:39] *** nij_ is now known as nij-
[06:15:52] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:15:52] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:15:53] *** nij_ is now known as nij-
[06:16:06] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:16:06] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Killed (NickServ (GHOST command used by nij_)))
[06:16:07] *** nij_ is now known as nij-
[06:16:20] *** Joins: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[06:24:10] <lotuseater> it seems to be over
[06:25:55] <semz> how ominous
[06:26:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[06:26:27] <lotuseater> indeed
[06:26:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[06:30:12] <mfiano> Didn't notice anything until I turned smart-filter off.
[06:30:17] <mfiano> Odd indeed
[06:32:19] <mfiano> smart-filter hides all non-message IRC commands, except for if that person speaks, then it will show their most recent join message, so you know what part of the conversation they have seen. I like it :)
[06:33:08] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[06:35:29] *** Joins: ChanServ (ChanServ@services.libera.chat)
[06:35:29] *** iridium.libera.chat sets mode: +o ChanServ
[06:35:29] *** ChanServ sets mode: +o beach
[06:35:57] <lotuseater> for what is this ghost command?
[06:36:36] <mfiano> to regain control of your nick that hasn't pinged out yet. useful during network splits
[06:37:11] <lotuseater> ahh
[06:42:59] *** Joins: derelict (~derelict@user/derelict)
[06:55:31] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[06:55:40] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[06:56:29] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[06:57:48] <nij-> Hello, I'm trying to define addition for vectors. However, it doesn't seem that `&rest` keyword works well with defmethod: https://bpa.st/NIRQ
[06:58:38] <lotuseater> how can i write a specialized version of + for just two arguments? i mean one that really optimizes on that
[06:59:37] <Bike> nij-: yeah, you can only specialize on required arguments. the usual pattern is to define a binary operator, and then define vect-+ as reduce of it.
[06:59:57] <Bike> lotuseater: (lambda (x y) (+ x y))
[06:59:59] <nij_> :(
[07:00:02] <lotuseater> I'm not nij- ^^
[07:00:13] <lotuseater> okay :)
[07:00:17] <Bike> yes, you happened to ask similar questions is all
[07:00:23] <nij_> :D
[07:00:50] <Bike> and just to be clear i wasn't being sarcastic or anything, that lambda is it. there's only so much optimization to be done with only that information, though. it will still have to work generically.
[07:01:22] <Bike> nij-: by the way, you can write (lambda (x) (apply #'+ x)) as just #'+
[07:01:25] <Bike> wait
[07:01:29] <Bike> no you can't. sorry.
[07:01:34] <nij_> Bike: in your method, vect-+ being a reduce is defined by defun, right?
[07:01:37] <Bike> typing faster than i'm thinking
[07:01:39] <Bike> yes
[07:01:43] <lotuseater> cause i saw in a disassembly where a LOG function is used that it uses specialized versions when just called on two args
[07:01:52] <nij_> :(
[07:01:59] <nij_> That is really bad.
[07:02:06] <nij_> defmethod should support &rest, no?
[07:02:10] <Bike> the defun?
[07:02:13] <nij_> Yeah
[07:02:42] <lotuseater> ok thx :) no problem and i know you're serious
[07:02:44] <lotuseater> yes
[07:02:54] <Bike> being able to specialize on &rest would screw up a fair bit of the machinery, i'd say
[07:03:03] <Bike> it might be doable, but you'd kind of be adding an extra dispatch step on arity
[07:03:15] <lotuseater> oh noez
[07:04:35] <nij_> I'm really sad. OK.. lemme think what I should do.
[07:05:05] <Bike> defining it in terms of a binary operation also makes it possible to work with heterogenuous values
[07:05:39] <Bike> like for just regular addition, you couldn't define (defmethod + (&rest (x anything)) ...) anyway, since you need to describe different behavior for fixnum+fixnum, rational+float, bla bla bla
[07:06:14] <lotuseater> yes to much possibilities with that
[07:15:17] *** Joins: prxq (~quassel@x4db60978.dyn.telefonica.de)
[07:17:35] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[07:18:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:19:10] *** Quits: prxq_ (~quassel@x4db9061d.dyn.telefonica.de) (Ping timeout: 240 seconds)
[07:22:30] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[07:32:45] <beach> Good morning everyone!
[07:33:25] *** beach sets mode: -o beach
[07:34:07] <pillton> nij_: Specialization store has support for it but be careful what you wish for. https://github.com/markcox80/specialization-store/wiki/Tutorial-2:-Optional,-Keyword-and-Rest-Arguments#rest-arguments
[07:36:38] <mfiano> as does polymorphic-functions
[07:43:02] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[07:52:14] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:54:12] <lotuseater> being careful with wishes that are fullfilled by magical beings is a good idea in general :)
[07:57:32] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[08:10:36] *** Joins: semz (~none@user/semz)
[08:14:21] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:27:09] <aeth> if the question involves arrays and/or numbers, the answer is probably specialization-store
[08:27:15] <aeth> unless there are similar libraries that I'm not aware of
[08:29:54] *** Joins: Fare (~fare@2601:184:4a7f:995c:efb1:3343:400b:4a37)
[08:43:32] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:01:34] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[09:03:33] *** Quits: gethuen (uid502979@id-502979.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:18:28] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:20:05] *** Joins: lisp123 (~lisp123@45.130.83.191)
[09:22:40] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[09:22:50] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[09:23:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:25:00] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[09:25:40] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[09:28:58] *** Quits: les (znc@user/les) (Quit: Adios)
[09:29:18] *** Joins: les (znc@user/les)
[09:38:30] *** Quits: les (znc@user/les) (Quit: Adios)
[09:38:48] *** Joins: les (znc@user/les)
[09:40:17] *** Joins: Alfr (~Alfr@user/alfr)
[09:48:10] *** Quits: Fare (~fare@2601:184:4a7f:995c:efb1:3343:400b:4a37) (Quit: Leaving)
[09:53:10] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[09:54:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:59:38] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 272 seconds)
[09:59:57] *** Joins: lisp123 (~lisp123@45.130.83.191)
[10:02:27] *** Joins: robin (~robin@user/terpri)
[10:04:10] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[10:20:36] *** Joins: makomo (~makomo@user/makomo)
[10:39:42] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:46:40] *** Joins: lisp123 (~lisp123@45.130.83.191)
[10:53:06] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:53:35] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[10:54:33] *** Joins: gaqwas (~john@dynamic-077-007-019-030.77.7.pool.telefonica.de)
[11:00:52] *** Joins: silasfox (~sbv@xdsl-78-35-71-64.nc.de)
[11:05:31] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:08:21] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[11:18:04] *** Quits: frgo (~frgo@p200300deef0cee008976347c097f0284.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:46:45] *** Quits: lisp123 (~lisp123@45.130.83.191) (Remote host closed the connection)
[11:46:57] *** Joins: lisp123 (~lisp123@45.130.83.191)
[11:47:40] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[11:48:16] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[11:50:00] *** Joins: pve (~pve@37-33-116-216.bb.dnainternet.fi)
[11:51:25] *** Quits: lisp123 (~lisp123@45.130.83.191) (Ping timeout: 252 seconds)
[12:09:39] *** Joins: shka (~herr@109.231.62.239)
[12:09:53] *** Quits: totoro2021 (~totoro@173.82.187.126) (Quit: WeeChat 2.8)
[12:10:35] *** Joins: totoro2021 (~totoro@173.82.187.126)
[12:14:08] *** totoro2021 is now known as totoro
[12:14:42] *** Quits: totoro (~totoro@173.82.187.126) (Changing host)
[12:14:42] *** Joins: totoro (~totoro@user/totoro)
[12:18:22] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Ping timeout: 245 seconds)
[12:18:47] *** Quits: nij_ (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Ping timeout: 245 seconds)
[12:25:45] *** Quits: gaqwas (~john@dynamic-077-007-019-030.77.7.pool.telefonica.de) (Ping timeout: 248 seconds)
[12:35:25] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:42:44] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[12:42:48] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[12:47:31] *** Joins: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de)
[12:49:10] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Ping timeout: 240 seconds)
[12:51:33] *** Quits: wheelsucker (~user@2600:8801:8c03:1f00::8165) (Remote host closed the connection)
[12:52:07] *** Quits: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[12:54:27] *** Joins: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de)
[13:00:09] <lisp-newbie> hi, good morning. I keep running into this issue. I need to pass in an argument to a function/class and it's one of a few possible values, and I can't find in the docs what the possible values are save from a few non exhaustive examples. I've tried going through the source code without much success. How can I find out the possible values? 2 examples I need now are :valid col-type values for this https://github.com/fukamachi/m
[13:00:09] <lisp-newbie> ito#class-definitions and the second one is valid :type options for https://github.com/fisxoj/sanity-clause (could be this is the CLOS :type not sure)
[13:00:31] <lisp-newbie> 2 examples I need now are :valid col-type values for this https://github.com/fukamachi/mito#class-definitions and the second one is valid :type options for https://github.com/fisxoj/sanity-clause (could be this is the CLOS :type not sure)
[13:02:15] <lisp-newbie> respoted because the link broke...
[13:02:16] *** Joins: lambdatheultimat (~psycomic@2a01cb0588c5e400202c14aa92ba48b8.ipv6.abo.wanadoo.fr)
[13:02:31] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Quit: Bridge terminating on SIGTERM)
[13:02:31] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[13:02:31] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Quit: Bridge terminating on SIGTERM)
[13:02:31] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Quit: Bridge terminating on SIGTERM)
[13:02:32] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[13:02:38] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: heretical_crypte (~heretical@2001:470:69fc:105::8054) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[13:04:01] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[13:05:24] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[13:06:08] <beach> lisp-newbie: Apparently, Fukamachi is not very good with documentation, so information may be hard to find.
[13:06:08] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[13:06:08] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[13:06:09] *** Joins: DiscontentNecess (~heretical@2001:470:69fc:105::8054)
[13:06:09] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[13:06:09] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[13:06:21] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[13:06:21] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[13:06:35] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[13:06:35] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[13:06:35] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[13:06:40] <lisp-newbie> beach is that the same for the other package as well? Since it looks like no one includes it in their docs, I thought it was a lisp thing...
[13:06:47] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[13:06:59] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[13:07:11] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[13:07:11] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[13:07:29] <flip214> when loading my app and getting a compile error, the readtable and pretty printer settings are left modified - the readtable case, for example.
[13:08:02] <beach> lisp-newbie: I don't use his stuff, so I don't know.  This is just what I have heard, and it is apparently the same for other systems he created.  I think there is a language problem, which would explain why he is reluctant to writing documentation in English.
[13:08:07] <flip214> how can I find out which dependency is causing that? and why does ASDF not revert the readtable when handling an error?
[13:09:31] <lisp-newbie> beach thanks, now I understand.. I was trying to use another person's package as well and had the same issue: :type options for https://github.com/fisxoj/sanity-clause
[13:10:45] <beach> lisp-newbie: I am not sure what I am looking at there.
[13:11:57] <beach> lisp-newbie: Your description was a bit cryptic because you mentioned passing an argument to a class, which doesn't make sense.
[13:12:07] <lisp-newbie> beach just the same idea, there's a :type being passed in the classes, dunno if it's just the CLOS :type, and it's supposed to be one of a few options, I just wanted to know how can I find out what the possible options are. The package is for validating constraints on variables...
[13:12:37] <lisp-newbie> beach sorry, don't know the right words to express things in lisp, too new...
[13:12:48] <beach> lisp-newbie: Careful about terminology.  Those are systems, not packages.
[13:13:06] <lisp-newbie> beach thanks, system
[13:13:50] <beach> lisp-newbie: The last link you gave is for the entire system.  I am not willing to go through each source file to guess where this :TYPE argument is needed.
[13:14:12] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:14:47] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[13:14:47] *** Joins: hayley (~theemacss@user/hayley)
[13:14:49] <beach> lisp-newbie: Is it a slot option in DEFCLASS?
[13:15:06] <lisp-newbie> beach oh, exactly that was my question. Thanks, you just answered. I wanted to know if there's a standar way of finding out, maybe like describe for a symbol or class that would answer my question, going through the source is what I was doing... so basically there is no standard way and it's just a lack in their docs
[13:15:56] * hayley wonders how they intend to apply the code of conduct when it is literally called sanity-clause.
[13:15:58] <lisp-newbie> beach here yes: https://github.com/fisxoj/sanity-clause in mito
[13:16:27] <lisp-newbie> in mito it's a macro that I think changes to a defclass
[13:16:47] <lisp-newbie> yes, that's what it is
[13:17:06] <lisp-newbie> beach here's the defclass version https://github.com/fukamachi/mito#deftable-macro for mito
[13:18:18] <beach> lisp-newbie: I don't see a :TYPE argument there, and the other link you gave is to the entire sanity-clause system.
[13:19:18] <hayley> There is a BNF diagram at the end of the Mito README which looks like it would describe the available column types, but the descriptions are far too vague.
[13:19:29] <beach> lisp-newbie: Maybe it's better for someone else to help you.  I am notorious for not understanding what the problem is, unless it is defined with great precision.
[13:20:03] <lisp-newbie> beach for mito it's :col-type https://github.com/fukamachi/mito#deftable-macro and for sanity-clause it's :type https://github.com/fisxoj/sanity-clause
[13:20:09] <hayley> So a col-type in the grammar is a keyword, a CONS cell with a keyword for a CAR and some argument list as the CDR, or a list of the form (OR <keyword> :NULL) where <keyword> is a keyword.
[13:20:36] <lisp-newbie> beach just to know the valid options I can pass in for :col-type in mito, and :type in sanity-clause
[13:20:42] <lisp-newbie> that is the clear problem definition
[13:20:55] <hayley> Actually, the "Relationship" example would be invalid according to this grammar; (or (:varchar 128) :null) doesn't match any of those productions.
[13:21:13] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[13:21:33] <beach> lisp-newbie: It looks to me like they are slot options indicating the type that the slot value can take, in which case, you don't pass anything.  Just make sure your initargs have the right type.
[13:22:04] <lisp-newbie> beach thanks
[13:22:20] <hayley> Then I checked the documentation for SxQL, which also does not describe what a column type would be.
[13:22:29] <beach> I am sorry that I probably don't understand the issue here.
[13:23:07] <shka> is bt:destroy-thread guaranteed to destroy thread?
[13:23:16] <Nilby> lisp-newbie: The col-type in mito looks rather complicated and is spread through a few files, but generally reflects what it would be called in the database. Maybe one way to figure it out would be create columns of various types in the databse and see what a query returns them as.
[13:23:17] <shka> under sbcl to be specifc
[13:23:48] <lisp-newbie> beach thanks so much for trying! sorry i couldn't express it clearly enough
[13:24:04] <lisp-newbie> hayley thanks, reading what you wrote now one sec while I think about it
[13:24:44] <lisp-newbie> hayley yeah, thanks exactly what i've been doing
[13:25:24] <hayley> My best guess is that the names would be the same as in SQL. But guessing and testing yourself aren't replacements for documentation.
[13:25:39] <lisp-newbie> hayley found this for sanity-clause https://github.com/fisxoj/sanity-clause/blob/master/src/field.lisp and for mito I found this https://github.com/fukamachi/mito/blob/master/src/core/class/column.lisp which has a definition of table-column-info with a list
[13:26:06] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:26:20] <lisp-newbie> Nilby thanks good idea
[13:27:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:27:17] <hayley> What did that internet personality say? "This does not spark joy." or something like that.
[13:28:24] <lisp-newbie> hayley haha yeah I thought I was missing something that was obvious and that's why it was lacking in the different projects' docs
[13:28:52] <hayley> I don't think column.lisp has all the types you can use; doesn't SQL have a fair few number types?
[13:30:00] <hayley> Still, funny name, as I started listening to The Damned again, and one of their songs is named "There ain't no sanity clause"...anyways.
[13:30:05] <Nilby> I see keywords such as :int :integer :boolean (:varchar 100) :timestamp :timestamptz :bigint :serial :datetime :date, etc. But it looks like it supports lispy things like (or :null ..) too.
[13:30:39] <hayley> What is more "lispy" about (or :null ...) than :boolean?
[13:31:05] *** Joins: PinealGlandOptic (~PinealGla@178-133-143-185.mobile.vf-ua.net)
[13:31:43] <hayley> The whole database thing is un-Lispy if you ask me. Still, you get the impression you could write (or :integer :varchar) or something, so it would be more precise to write (nullable :integer) or something.
[13:31:52] <Nilby> hayley: I just mean the or type combination, which db's don't usually do.
[13:32:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:32:33] <hayley> Well, databases don't have arbitrary OR types. The library just understands the special cases of (or :null T) and (or T :null).
[13:35:39] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465)
[13:39:10] <pjb> I'm sure Fukamachi is very good at documentation, written in Japanese…
[13:40:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:41:55] <hayley> Not much evidence of that either.
[13:42:20] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[13:42:27] <pjb> lisp-newbie: as mentionned, the syntax for a col-type  object is given in the grammar indicated on https://github.com/fukamachi/mito#class-definitions
[13:43:22] <lisp-newbie> pjb yeah, the questions is what are the valid keywords, but I found it now, thanks! :)
[13:43:28] <pjb> lisp-newbie: this means that a col-type will be a sexp, whic can be either a keyword (eg. :foo), a cons of the form (keyword . arg), a list of the form (or keyword :null) or a list of the form (or :null keyword).
[13:43:33] <pjb> lisp-newbie: ok.
[13:44:15] <Nilby> lack of documentaion seems to transcend natural language/cultural boundaries
[13:44:42] <lisp-newbie> pjb thanks so much!
[13:44:50] <pjb> The difficulty for this class of specifications/documentation, is that it makes reference to other systems that are interfaced. Here, with a database.  So the col-type specifier is used to describe a type of column in the database used.
[13:45:50] <pjb> lisp-newbie: depending on how constraining the lisp code is, it can just pass any value to the database, (and rely on the database to validate the keywords), or it can duplicate the work of the database, validating itself the keywords (but risking to refuse some new keyword a new version of the database would accept).
[13:46:20] <pjb> lisp-newbie: so documentation wise you see the difficulty: the user should read both the documentation of the database and the documentation of the lisp module, to understand all the possibilities.
[13:46:30] <lisp-newbie> pjb, yeah, I found the file where he has te keywords, I'm submitting a pull request and updating the docs
[13:46:31] <pjb> (incf Nilby)
[13:46:42] <pjb> lisp-newbie: great!
[13:47:04] <lisp-newbie> pjb :D
[13:47:15] <pjb> lisp-newbie: we often have the same problem with libraries that are (C)FFI layers over external C libraries.
[13:48:19] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[13:48:20] <lisp-newbie> pjb I hear, that sounds like a pain
[13:49:28] <beach> pjb: Yeah, I hate that situation.  We are presented with a library that is supposed to provide an abstraction layer, but in fact, to use it, one has to understand the software that the library itself uses.
[13:49:34] <hayley> pjb: I had said this already, but it is a nearly useless grammar because it permits anything.
[13:49:47] <Nilby> what's worse is some db's can have db instance specific column types, which used to require dynamicly loading custom C libs.
[13:49:53] <hayley> Say, is :I-am-the-very-model-of-a-modern-major-general a column type?
[13:50:26] <hayley> Or (:varchar 1 2 3 4 5)?
[13:51:26] <hayley> I had also already said that the examples in the README also happily contradict this grammar, as (or (:varchar 128) :null) cannot be produced from the grammar.
[13:51:53] <pjb> beach: this is one aspect of lisp, being so dynamic and runtimey, that it allows buidling conduit software that know very little about what is actually done.
[13:52:25] <hayley> Isn't that the case for anything with sufficient polymorphism?
[13:52:52] <pjb> I like to validate things, and to implement deterministic models, but this is not quite efficient either in programmer time or machine time.  Conduits are often very lightweight.
[13:52:53] <beach> pjb: Possibly.  That's no excuse for not providing complete documentation, though.
[13:53:14] <pjb> basically, copy-and-paste the database documentation (or the foreign library documentation).
[13:53:32] <pjb> It would be good also to translate in terms of lisp, but this would be maintenance nightmares.
[13:54:13] <pjb> If we could do that automatically, that'd be nice, but the source documentations often are not machine-readable or sufficiently formalized to be processed automatically (from one version to the other).
[13:54:26] <hayley> Well, this is not a conduit if that is your definition; as the database and SQL language do not use a form like (or :null :varchar) anywhere.
[13:55:04] <hayley> Thus it is necessary to properly specify the input grammar and how it is rewritten into a SQL type.
[13:58:30] <lisp-newbie> my second question today, how can I create a class that has a itself as a slot, a simple example of this would be an object oriented linked list, where a node has a reference to another node
[13:58:48] <lisp-newbie> I did this, and got some error saying that the class doesn't exist
[13:59:54] <beach> lisp-newbie: Since Common Lisp is a dynamically typed language, a slot can contain anything.
[14:00:08] <beach> lisp-newbie: Including an instance of the class that contains the slot.
[14:00:10] <lisp-newbie> beach hm, ok, let me try again
[14:01:08] <hayley> What is wrong with (defclass foo () ((bar :type foo))) if you really want to provide a type?
[14:01:18] <lisp-newbie> beach I got invalid initialization argument error
[14:01:35] <lisp-newbie> will make a pastebin for the code
[14:01:51] <nij-> lisp-newbie: https://bpa.st/LJWA
[14:01:54] <lisp-newbie> https://pastebin.com/XyPj282T
[14:02:16] <beach> hayley: It will be hard to provide an instance for the first instance.  You would have to use the class prototype.
[14:02:18] <nij-> (extent (extent (extent cup))) ;; => cup
[14:02:55] <nij-> Oh you're dealing with meta-class?
[14:02:56] <lisp-newbie> nij- thanks! will try it now
[14:02:57] * nij- ducks
[14:03:04] <lisp-newbie> nij- yeah, will that not work?
[14:03:14] <lisp-newbie> I need it with two meta-classes...
[14:03:17] <hayley> beach: Yes. One really should use a type specifier like (or foo null) to provide a base case (which I arbitrarily decided would be NIL).
[14:03:23] <nij-> I dunno. I'm afraid. Try it out.
[14:03:28] <lisp-newbie> beach https://pastebin.com/XyPj282T
[14:03:49] <lisp-newbie> ok will try now
[14:04:23] <nij-> A cup in itself in itself in itself in .. xD
[14:04:47] <beach> lisp-newbie: How do you plan to provide a value for that slot for the first instance that you create?
[14:05:02] <hayley> Okay, I suspect that sanity-clause isn't handling :type as gracefully as we hoped.
[14:05:04] <beach> lisp-newbie: What is this obsession with the :TYPE slot option anyway.
[14:05:57] <hayley> lisp-newbie: Did you read the error message?
[14:06:02] <lisp-newbie> beach that's why it's :required NIL but yeah, could be I don't need to, I thought that was the validation, maybe it's something else..
[14:06:07] <beach> lisp-newbie: Put a different way, this chain of old versions, is it infinite?
[14:06:14] <hayley> It says "Invalid initialization argument: PREVIOUS-VERSION in call for class #<STANDARD-CLASS SANITY-CLAUSE SCHEMA:VALIDATED-METACLASS>."
[14:06:32] <beach> lisp-newbie: If you provide NIL, then NIL is not of the right type according to your :TYPE.
[14:06:51] <lisp-newbie> ok, thanks
[14:07:05] <hayley> You put a close paren in the wrong place. Specifically, you ended the slot list just after the description of the ISSUE slot.
[14:07:32] <nij-> Is it really true that I cannot use "&rest" while defining a method?
[14:07:49] <nij-> (defmethod <+> (&rest (v vect)) ..)?
[14:07:49] <beach> nij-: Of course you can.
[14:07:54] <hayley> That is not true, but you cannot specialise on the type of non-mandatory arguments.
[14:08:02] <nij-> :(
[14:08:32] <hayley> (Nonetheless, the class of a &rest argument to me would always be LIST, perhaps either NULL or CONS, so it is not interesting in that instance.)
[14:08:49] <beach> True that.
[14:08:53] *** Joins: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de)
[14:09:21] <nij-> Why not?
[14:09:23] <beach> nij-: I think you were told how to do this.
[14:09:40] <nij-> Why can't I specialize on types of the nonmandatory args?
[14:10:11] <nij-> beach: to do __?
[14:10:48] <Nilby> What would it call with no arguments?
[14:10:53] <beach> nij-: A function that takes any number of arguments, such as + would treat zero or one argument specially.  Then for the other cases, it would reduce a binary version of itself on the arguments.
[14:10:57] <Nilby> But one can (defmethod <+> (v0 &rest (v vect)) ..) and work it out later in the method.
[14:11:37] <beach> Nilby: That's not valid syntax.
[14:11:40] *** Quits: silasfox (~sbv@xdsl-78-35-71-64.nc.de) (Ping timeout: 240 seconds)
[14:12:02] <beach> nij-: Then your binary version would have two required parameters, both of which can be specialized.
[14:12:09] <nij-> beach: yeah, as a function it's fine. But method?
[14:13:01] <beach> nij-: It doesn't make much sens to have a generic function that can take zero arguments.  How would you determine which methods are applicable?
[14:13:52] <nij-> hmm
[14:14:40] <beach> nij-: So again, the way situations like that are handled, is that you make your function that can take an arbitrary number of arguments an ordinary function.  Then the binary version is a generic function.
[14:15:09] <beach> nij-: As I recall, Dylan does exactly that for things like +.
[14:15:10] <nij-> I see.
[14:15:22] <Nilby> beach: I was lazy and just copyied nij's without removing the default arg. You're so good at catching errors, you should write a compiler :)
[14:15:24] <nij-> Who is Dylan?
[14:15:48] <beach> nij-: A Scheme-like language defined by Apple some time ago.
[14:16:00] <beach> Nilby: Nah, way too much work.
[14:16:17] <Nilby> lol
[14:16:19] <nij-> (Isn't sicl a compiler? written by beach?)
[14:16:28] <beach> nij-: Nilby was making a joke.
[14:16:33] <nij-> haha ok
[14:16:43] <Nilby> nij-: opendylan.org
[14:17:08] <beach> nij-: Speaking of which, SICL does it that way as well.
[14:17:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 240 seconds)
[14:17:31] *** Quits: PinealGlandOptic (~PinealGla@178-133-143-185.mobile.vf-ua.net) (Quit: leaving)
[14:17:33] <Nilby> dylan is vaguely like a CL-ish lisp-1 without the parens
[14:18:31] <beach> nij-: https://github.com/robert-strandh/SICL/blob/master/Code/Arithmetic/binary-add-defmethods.lisp
[14:18:33] <nij-> loklll seems cool but I cant live without parens xD
[14:19:04] <beach> https://github.com/robert-strandh/SICL/blob/master/Code/Arithmetic/plus-defun.lisp
[14:19:04] <nij-> I get you beach, thanks :)
[14:19:07] <nij->  Now, I've defined a class 'vector-space. An instance of it is a vector space V. But V should contain vectors! How should I design the system so that its vectors are like objects in "the class V"?
[14:19:08] <Nilby> nij-: I came to the same conclusion after working on it a number of year.
[14:19:26] <nij-> Nilby: you mean "cant live without parens xD"?
[14:19:32] <hayley> Well, I can't live without the interactive development. The syntax is secondary compared to that.
[14:19:33] <Nilby> yes
[14:19:37] <nij-> Ha hahaha I should write a song about it when I havtime.
[14:19:50] <nij-> "CANT LIVE WITHOUT PARENS!"
[14:19:51] <Nilby> Also it makes macro syntax very hard.
[14:20:12] <beach> So RScheme defined at the University of Texas at Austin, is essentially Dylan with parentheses and interaction.
[14:20:18] <nij-> hayley: parens are not just syntax.. they are.. everything (jk)
[14:20:41] <beach> Or, rather, the way Dylan was before they came up with the syntax without parentheses.
[14:20:56] <nij-> Now, I've defined a class 'vector-space. An instance of it is a vector space V. But V should contain vectors! How should I design the system so that its vectors are like objects in "the class V"?
[14:21:53] <beach> nij-: (defclass vector-space () ((%vectors :initarg vectors :reader vectors)))
[14:21:55] <beach> Done.
[14:22:00] <flip214> nij-: V "has" vectors, so have a list of them?
[14:22:02] <nij-> (a vector) \in (a vector space) \in (Categories of vector spaces) \in (2Cat of cats of vector spaces) \in ..
[14:22:10] <beach> Then you supply a list of vectors to the initargs.
[14:22:10] <flip214> beach: was faster than me, again ;)
[14:22:42] <nij-> beach: But I want to treat vectors as CLOS objects.
[14:22:49] <nij-> So I can later define methods on them.
[14:23:09] <nij-> And in math it's often the case that we have a chain of belongingship.
[14:23:17] <beach> (defmethod foo ((vector vector)) ...)
[14:23:23] <nij-> A belongs to B belongs to C belongs to D .. etc
[14:23:39] <beach> There is no "belongs to" relationship in Common Lisp.
[14:23:56] <nij-> An object belongs to a class.
[14:24:15] <nij-> beach: what's your class 'vector here?
[14:24:17] <beach> So you have a chain of metaclasses?
[14:24:23] <beach> clhs vector
[14:24:23] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/a_vector.htm
[14:24:24] <flip214> nij-: then you'll want a new class vector
[14:24:26] *** Joins: selwyn (~selwyn@user/selwyn)
[14:24:27] <hayley> An object is an instance of a class, a class is an instance of a metaclass...
[14:24:33] * nij- ducks .. I'm afraid of metaclasses i dunno what they are
[14:24:44] <beach> classes of classes.
[14:25:00] <hayley> A monoid in the category of endofunctors.
[14:25:04] <nij-> Seems that I must go into that direction?
[14:25:08] <hayley> (No, they're not.)
[14:25:09] <nij-> is a monad
[14:25:27] <hayley> Hah, found the category weenie.
[14:25:35] <nij-> They are actually great.
[14:25:46] <nij-> I'm writing a calculator for a special kind of category.
[14:26:00] <nij-> But I have start with vector spaces and their duals, direct sums, and tensor products =_=
[14:26:06] <nij-> Much harder than I expected.
[14:26:18] <nij-> beach: I dunno if I should go into that direction.
[14:26:37] <nij-> But see, for each vector space V, there is a vector addition <+>_V.
[14:26:42] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[14:26:44] <hayley> That said, I am not sure if categories are a good fit for being modelled with metaclasses. You might need to define another relation for categories.
[14:26:46] <nij-> How do I arrange all of these?
[14:27:06] *** Joins: selwyn (~selwyn@user/selwyn)
[14:27:09] <nij-> hayley: !! oh, I have to hack MOP, you think?
[14:27:34] <nij-> It would be nice to have (defcategory ..) in CL.
[14:27:40] <hayley> My previous statement suggested to me that I don't know if that would be appropriate.
[14:28:07] <nij-> Sigh now I feel I need to at least know MOP to take care of this project.
[14:28:14] <nij-> Or I just simulate the vectors poorly..
[14:28:24] <hayley> Sometimes it seems like everyone my age with some interest in formal verification knows category theory, other than me.
[14:28:42] <nij-> If you know what a group is, category theory isn't hard.
[14:28:45] <nij-> That's the tip.
[14:28:55] <nij-> (isn't hard to start*)
[14:28:59] <hayley> Suppose I do know what a group is.
[14:30:11] <nij-> hayley: To know what a group is, read "Definition and illustration" of https://en.wikipedia.org/wiki/Group_(mathematics)
[14:30:25] <nij-> Feel free to query me if you want.
[14:30:46] <nij-> beach: So in stumpwm too, there are many chains of belonging ships.
[14:30:52] <hayley> I am aware of what a group is.
[14:31:03] <nij-> window, frame, group, screen
[14:31:20] <nij-> etc... and I believe they create each of them as CLOS classes separately
[14:31:35] <hayley> Now, that is a relationship which is different to instance-of. A window is not an instance of a frame, a frame is not an instance of a group...
[14:31:36] <nij-> but in each object, there are slots that keep track of their "masters"
[14:32:08] <nij-> Yeah..
[14:33:21] <nij-> OK, I think I will use the latter method, to keep it simple and stupid.
[14:37:35] <hayley> nij-: I never asked to be messaged to be tutored on groups.
[14:38:50] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[14:38:55] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:39:08] *** Joins: lukego (sid312033@tooting.irccloud.com)
[14:42:37] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[14:46:23] *** Quits: flip214 (~marek@user/flip214) (Remote host closed the connection)
[14:54:18] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[14:56:01] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[14:57:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:03:02] *** Quits: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:03:30] *** Joins: frgo (~frgo@p200300deef0cee000d6de3e0d8973689.dip0.t-ipconnect.de)
[15:05:22] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[15:06:25] *** Joins: lisp123 (~lisp123@45.130.83.208)
[15:09:05] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[15:11:57] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 268 seconds)
[15:15:02] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Ping timeout: 268 seconds)
[15:15:34] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:16:09] *** Joins: lisp123 (~lisp123@45.130.83.208)
[15:20:58] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[15:26:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:28:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:34:01] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:41:40] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[15:42:44] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[15:43:45] *** Joins: lisp123 (~lisp123@45.130.83.208)
[15:47:22] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[15:48:12] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[15:48:57] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 268 seconds)
[15:58:32] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[15:58:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[16:09:12] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 258 seconds)
[16:15:46] *** Joins: lisp123 (~lisp123@45.130.83.208)
[16:16:07] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[16:20:22] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:21:16] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[16:23:26] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[16:27:53] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 248 seconds)
[16:29:24] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[16:37:10] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Ping timeout: 240 seconds)
[16:38:07] *** Joins: amb007 (~a_bakic@87.116.175.5)
[16:41:08] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[16:41:40] <nij-> Why does such defmethod fail? https://bpa.st/Q4DA
[16:42:22] *** Quits: amb007 (~a_bakic@87.116.175.5) (Ping timeout: 252 seconds)
[16:42:35] <hayley> You defined the generic function to take only one mandatory argument.
[16:43:22] *** Joins: amb007 (~a_bakic@109.245.227.99)
[16:45:18] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[16:45:28] <nij-> Oh, I see indeed. Thanks :)
[16:45:29] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 248 seconds)
[16:45:29] *** hhdave_ is now known as hhdave
[16:46:39] <jackdaniel> nij-: it is literally said in the error message
[16:46:56] <hayley> The error message is a bit indirect still.
[16:47:12] <Qwnavery> the quest of practical common lisp begins
[16:47:15] <Qwnavery> x-x
[16:47:33] <Qwnavery> 'tis daunting
[16:48:29] <hayley> One has to know that first ENSURE-METHOD (at least that is what I think the name is) tried to find a method to replace first. And to make it very blatant, the error could have said "This lambda list has two required arguments, not one."
[16:49:33] *** Joins: lisp123 (~lisp123@45.130.83.208)
[16:49:59] <nij-> jackdaniel: Yeah, sorry. I didnt' know why that took only one argument.
[16:50:11] <nij-> hayley's hint let me know that I have done something stupid before.
[16:50:46] *** Joins: yitzi (~yitzi@172.98.105.250)
[16:51:17] <jackdaniel> I'm just pointing out that "You defined the generic function to take only one mandatory argument" is semantically equivalent to the part "generic function ... takes 1 required argument" in the error message
[16:51:18] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[16:51:42] *** Joins: amb007 (~a_bakic@109.245.227.99)
[16:51:54] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[16:52:11] <hayley> That is not really what I think of for it to "literally" appear in the error message.
[16:52:46] <jackdaniel> well, luckily I was making a remark (if it were you then you'd be saying something you don't think ,)
[16:53:53] <hayley> Actually, no, you are right. It is directly stated that the generic function is defined with one required argument.
[16:54:40] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 240 seconds)
[16:55:42] <hayley> But it is only indirectly stated that the provided lambda list for the method has two required arguments. It is not a direct comparison in that way. And the error is phrased around finding a method, not defining a method.
[16:58:21] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[16:58:53] *** Joins: amb007 (~a_bakic@109.245.227.99)
[17:02:31] *** Joins: Bike (~Glossina@71.69.170.70)
[17:02:31] *** ChanServ sets mode: +o Bike
[17:04:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:06:27] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[17:08:57] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[17:08:58] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[17:09:30] *** Joins: amb007 (~a_bakic@91-150-114-91.dynamic.isp.telekom.rs)
[17:11:24] *** Joins: anddam (~anddam@user/anddam)
[17:23:43] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[17:26:16] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:26:17] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[17:26:24] *** Quits: amb007 (~a_bakic@91-150-114-91.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[17:27:23] *** Joins: amb007 (~a_bakic@109.245.227.99)
[17:29:41] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[17:30:13] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: Leaving)
[17:30:52] *** Joins: amb007 (~a_bakic@87.116.175.43)
[17:33:32] *** Quits: lambdatheultimat (~psycomic@2a01cb0588c5e400202c14aa92ba48b8.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[17:35:10] *** Quits: amb007 (~a_bakic@87.116.175.43) (Ping timeout: 240 seconds)
[17:35:48] *** Joins: amb007 (~a_bakic@109.245.227.99)
[17:39:37] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[17:39:59] *** Joins: amb007 (~a_bakic@91-150-114-91.dynamic.isp.telekom.rs)
[17:42:18] *** Joins: derelict (~derelict@user/derelict)
[17:51:40] *** Quits: amb007 (~a_bakic@91-150-114-91.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[17:52:29] *** Joins: amb007 (~a_bakic@109.245.227.99)
[18:00:00] *** Quits: yitzi (~yitzi@172.98.105.250) (Quit: Leaving)
[18:01:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:06:44] *** Joins: igemnace (~ian@user/igemnace)
[18:07:37] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[18:07:48] *** Joins: amb007 (~a_bakic@87.116.175.45)
[18:14:01] *** Parts: Vultyre (~vultyre@user/vultyre) (WeeChat 2.8)
[18:14:07] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:b388:46df:8402:984)
[18:18:49] *** Joins: srhm (~srhm@user/srhm)
[18:22:36] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:b388:46df:8402:984) (Ping timeout: 258 seconds)
[18:23:45] *** Quits: amb007 (~a_bakic@87.116.175.45) (Ping timeout: 268 seconds)
[18:24:42] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:adbc:50b4:508c:311c)
[18:24:52] *** Joins: amb007 (~a_bakic@109.245.227.99)
[18:25:37] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:25:38] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[18:26:12] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[18:29:39] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:adbc:50b4:508c:311c) (Remote host closed the connection)
[18:29:39] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Read error: Connection reset by peer)
[18:29:57] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:80e9:ea3f:a540:8a77)
[18:30:28] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[18:31:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[18:31:35] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[18:34:40] *** Quits: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 240 seconds)
[18:36:41] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[18:36:43] *** Joins: silasfox_ (~sbv@2001-4dd5-31cd-0-1ee-2d35-986d-3df7.ipv6dyn.netcologne.de)
[18:38:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:44:27] <lisp123_> Are there any good resources for learning and/or applying memoizing in Common Lisp?
[18:45:43] <jackdaniel> the implementaiton is rather trivial
[18:46:05] <lisp123_> jackdaniel: Yeah it appears most people simply store the result of the function calls
[18:46:19] <lisp123_> I was thinking of storing all the steps to get there
[18:46:28] <jackdaniel> I don't follow
[18:46:57] <lisp123_> If I got from A ------> B and find the specific path that takes me from A to B
[18:47:06] <lisp123_> (say there are 100 different paths)
[18:47:22] <lisp123_> I don't want to simply store that I can go from A to B, I want to store the specific path that took me there
[18:47:29] <jackdaniel> that does not sound like memoization
[18:48:04] <lisp123_> Well I want both, so in the future, if I see A and need B, I have the solution, but I also have the "how"
[18:48:11] <jackdaniel> if you want to see what code paths were used, then you look for a coverage scanner
[18:48:41] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[18:48:50] <lisp123_> Oh I see, let me research that. Am I correct in saying that if I am recording the results of A -> B, that is memoization?
[18:49:03] <lisp123_> (not the paths, just the result)
[18:49:20] <jackdaniel> yes, memoization is a form of caching results of the function invocation
[18:50:08] <lisp123_> I couldn't find anything online for coverage scanners, do you have a link?
[18:50:28] <jackdaniel> to get it right you must ensure, that for the same value (memoization predicate wise) the function always returns the same results (i.e is referentially transparent)
[18:50:45] <jackdaniel> sb-cover is one available for sbcl
[18:50:49] <lisp123_> Yes, I agree
[18:51:29] <jackdaniel> http://www.sbcl.org/manual/index.html#sb_002dcover
[18:51:48] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 256 seconds)
[18:52:28] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Remote host closed the connection)
[18:53:48] <lisp123_> THat seems to be related to checking how much of code has been run in the test suite - correct?
[18:54:05] <jackdaniel> sure
[18:54:11] <lisp123_> I think I am after something different, but I will probably write it from scractch.
[18:56:08] <lisp123_> (Just to remove any mystery, say I have to get B from '(1 2 3 (E (G B))) (say this is *list*), one would go something like  (cdr (last (last *list*)))) - I probably made a mistake somewhere, but it gives the drift)
[18:56:40] <lisp123_> So I want to store that path (cdr (last (last *list*)), which I will not know until runtime
[18:57:29] *** Quits: silasfox_ (~sbv@2001-4dd5-31cd-0-1ee-2d35-986d-3df7.ipv6dyn.netcologne.de) (Ping timeout: 258 seconds)
[18:57:51] <lisp123_> So I think what I will do is go through each permutation & combination, pushing the operation to a stack for that path, and if I get to B, returning that stack to give the path
[18:58:22] *** Joins: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de)
[19:00:35] <Bike> are you talking about actually traversing a data structure, or are thes4e supposed to represent function calls?
[19:01:28] <lisp123_> function calls
[19:01:44] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:01:54] <_death> sounds like you want to compute and store a list like (last-elt last-elt second)
[19:02:05] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:80e9:ea3f:a540:8a77) (Ping timeout: 258 seconds)
[19:02:54] <lisp123_> _death: yes, that's my plan
[19:03:21] *** Joins: attila_lendvai (~alendvai@apn-94-44-96-207.vodafone.hu)
[19:03:46] <lisp123_> So once I get to B, I return back (a) the list of functions that got there and (b) store both the fact that A -> B & the sequence of functions to do it
[19:04:25] <lisp123_> So I guess its not really memoisation, since I know what I'm looking for, its just that I don't know if I will find it, so its memoising that A -> B is T + this is the steps
[19:04:46] <lisp123_> or A -> B is NIL (B cannot come from A)
[19:05:34] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465) (Quit: Leaving)
[19:06:42] <jcowan> shka: destroy-thread is a baaaad idea in any language, as it can leave data structure in an unstable state.
[19:06:49] *** Quits: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de) (Quit: WeeChat 3.2)
[19:07:07] <jackdaniel> lisp123_: I think that all that would be more comprehensible if you explain what you want to do on a slightly higher level
[19:07:14] <_death> say (defun last-elt (list cont) (let ((*operations* (cons 'last-elt *operations*))) (funcall cont (alexandria:last-elt list)))) ... and the last continuation stores the operations list
[19:09:29] <shka> jcowan: well, i simply made separate process, it just needs to terminate at some point
[19:09:35] <shka> and that's it
[19:09:50] <_death> (or you can compute the list and just call the operations as you go)
[19:09:52] <shka> no shared memory at this point
[19:10:10] <jcowan> That works
[19:10:25] <shka> i hope that it does :D
[19:10:30] <shka> but gonna see about that
[19:10:34] <lisp123_> _death: Thanks, yes I was going to use continuations. Let me play around with that and try and wrap my head around it
[19:10:47] <lisp123_> Continuations always take extra time for me :S
[19:12:44] <lisp123_> jackdaniel: Sorry its a bit convoluted. Basically I have a set of inputs (A) and a set of processes. I want to get a potential output (B) by combining the various processes on the inputs (and their intermediary results), but I don't know if this is possible. However, once I do achieve success, I want to store the fact thats possible to go from A to B and these are the steps.
[19:13:02] <lisp123_> _death: Thanks again for the code, I'm sure it will give me good ideas on how to doit
[19:15:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:21:16] *** Demosthe1ex is now known as Demosthenex
[19:21:33] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:22:34] <lisp-newbie> hi, i know we can mapcar a macro, so what can we do? (mapcar #'macro *list*)
[19:22:40] <lisp-newbie> we *can't
[19:22:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:23:24] <lisp-newbie> I saw this but it looks really hacky https://lispy.wordpress.com/2007/11/30/your-macro-is-in-my-mapcar-no-your-mapcar-is-in-my-macro/
[19:23:49] <lisp-newbie> like it shouldn't be done
[19:23:55] <Bike> (mapcar (lambda (x) (macro x)) *list*)? it depends on what you are actually trying to do.
[19:24:26] <lisp-newbie> https://stackoverflow.com/questions/11341000/emacs-lisp-how-to-mapcar-a-macro-and-evaluate-one-of-the-arguments
[19:24:37] <lisp-newbie> I'm trying to apply a macro to each of the elements of a list
[19:24:38] <lisp-newbie> bik
[19:24:42] <lisp-newbie> Bike
[19:24:50] <Bike> okay but like what macro.
[19:25:03] <lisp-newbie> Bike just one I made
[19:25:33] <Bike> what i'm trying to get at is that what mapping means kind of varies depending on the particular syntax of the macro.
[19:25:45] *** Quits: attila_lendvai (~alendvai@apn-94-44-96-207.vodafone.hu) (Read error: Connection reset by peer)
[19:25:57] <Bike> in the blog post here they use defparameter, which has one argument unevaluated, but some other macros evaluate all of their arguments
[19:26:49] <_death> is it mapcar or mapc..
[19:26:58] <beach> lisp-newbie: What made you decide to write a macro rather than a function?
[19:27:21] <lisp-newbie> oh, I just want to do a macro to a list of things that I'm passing
[19:27:24] <lisp-newbie> Bike
[19:27:42] <Bike> i am asking what the particular macro is.
[19:27:49] <Bike> because that changes the nature of the solution
[19:28:03] <lisp-newbie> beach it's a macro that already exists, just thought it was better to have a one liner applying the macro to a list rather than 10 lines where only the thing I'm passing in to the macro changes...
[19:28:41] <beach> Bike: I guess we'll never know.
[19:28:45] <lisp-newbie> Bike oh it's a macro that calls a bunch of other macros
[19:28:56] <Bike> okay but like
[19:29:06] <Bike> you see how i mentiond defparameter and talked about how it evaluates things for example
[19:29:10] <Bike> that's the kind of thing that would be good to know
[19:29:25] <Bike> if you're keeping it secret you can just say that.
[19:29:54] <lisp-newbie> Bike can send you the code.. one sec
[19:30:32] <lisp-newbie> Bike https://pastebin.com/knkNMv7p
[19:31:15] *** Joins: attila_lendvai (~alendvai@catv-176-63-7-255.catv.broadband.hu)
[19:31:36] <beach> lisp-newbie: It looks like there is absolutely no reason to make this a macro.
[19:32:08] <lisp-newbie> beach can it be a function and will it be evaluated during compile time? I tried and got some error...
[19:32:11] <lisp-newbie> will change it
[19:32:28] <beach> I think you have to make up your mind.
[19:32:49] <beach> Either you want to have it do its thing at compile time, but then you don't mapcar it at run time.
[19:33:05] <beach> Or else, you want it to work at run time, and then you don't make it a macro.
[19:33:42] <beach> lisp-newbie: Don't tell me you are writing macros just for reasons of performance.
[19:34:10] <Bike> this definition doesn't really tell me much since i don't know w hat any of these operators are, you know?
[19:34:11] <lisp123_> beach: I'm not sure if this will add any value, but I have this note in On Lisp (page 110): In some cases, you can get what you want by enclosing the macro call within a lambda-expression. This works, for example, if you want to apply or funcall certain macros. However, this is an inconvenience. It doesn’t always work, either: even if, like avg, the macro has an &rest parameter, there is no way to pass it a varying number of arguments.
[19:34:20] <Bike> could you just explain
[19:34:21] <lisp-newbie> beach no, I was writing it as a macro because when I called the other macros I got a problem
[19:34:50] <lisp-newbie> ok, one sec
[19:34:54] <_death> it looks like a legitimate macro.. I'm guessing lisp-newbie wants to have a single form that expands to multiple def-model-functions forms
[19:35:01] <beach> lisp-newbie: That is not enough of a reason.  First you should figure out the nature of the problem and then determine how to solve it later.
[19:36:08] <lisp-newbie> _death beach Bike I am defining functions with a function. I thought you needed to write a macro for that. Is that incorrect?
[19:36:28] <lisp-newbie> A macro can define a function, but a function cannot create another function. Right?
[19:36:35] <beach> It sure can.
[19:36:49] <beach> (defun make-function (x) (lambda (y) (+ x y)))
[19:37:04] <beach> (funcall (make-function 234) 333)
[19:37:34] <lisp-newbie> beach and then that function is available outside for the system?
[19:37:57] <beach> lisp-newbie: It has indefinite extent, if that is what you mean.
[19:37:58] <lisp-newbie> outside of the function creating it? and I can access it in another package as well?
[19:38:15] <beach> Packages are important only to the reader.
[19:38:30] <beach> They don't have any role to play in the extent of functions.
[19:42:33] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[19:43:28] <beach> lisp-newbie: Try something like this for instance:
[19:43:39] <beach> (defun make-function (x) (lambda (y) (+ x y)))
[19:43:54] <lisp-newbie> beach will do one sec
[19:43:56] <beach> (defparameter *p* (loop for i from 0 to 10 collect (make-function i)))
[19:44:13] <beach> Then something like (mapcar (lambda (fun) (funcall fun 234)) *p*)
[19:44:34] <_death> the I binding there may or may not be distinct
[19:44:40] <beach> Now *p* contains a list of functions, each one created by a call to make-function.
[19:44:52] <beach> _death: Doesn't matter.
[19:45:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:45:31] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 252 seconds)
[19:45:34] *** Quits: attila_lendvai (~alendvai@catv-176-63-7-255.catv.broadband.hu) (Remote host closed the connection)
[19:45:42] <beach> lisp-newbie: So those functions are now contained in a list that you can keep around forever if you like.
[19:45:56] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:349e:2898:2e1c:3332)
[19:46:05] <lisp-newbie> beach I want to create a function that I can call from another package, and if I do I'll get a symbol does not exist error with a function, I think...
[19:46:17] <_death> you can also attach a function to a name (setf (fdefinition 'foo) some-function)
[19:46:33] <lisp123_> lisp-newbie: call it like this package-name::function-name
[19:46:35] <beach> lisp-newbie: The package does not have any impact on what functions you can call.
[19:46:42] <lisp-newbie> _death yeah, got it
[19:47:09] <beach> lisp-newbie: And I would appreciate it if you would acknowledge that you at least read my suggestion.
[19:47:18] <lisp-newbie> beach yeah I read it
[19:47:41] <shka> lisp-newbie: package is not what you think it is
[19:47:41] <lisp-newbie> beach sorry for not replying quicker, I was thinking about what you guys are writing.
[19:47:42] <beach> lisp-newbie: That wasn't obvious since you immediately ignored it and started talking about packages.
[19:47:56] <lisp-newbie> beach I will try to refactor my code, let's see
[19:48:21] <shka> package is not about software distribution, it is all about being containers of symbols
[19:48:39] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:349e:2898:2e1c:3332) (Remote host closed the connection)
[19:48:46] <beach> lisp-newbie: As you perhaps can tell, I am getting a bit annoyed with the way this conversation is going.  You are attempting to use macros even though you don't know whether they are needed, and you don't know the basics of how functions work.
[19:48:49] <lisp-newbie> beach oh that was an answer to what I read... according to that I would have to do paclage-name::*p* and then somehow find the function name that I want. right?
[19:48:57] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:6c42:223a:497d:6c3d)
[19:49:35] *** Joins: tfeb (~tfb@88.98.95.237)
[19:49:40] <lisp123_> lisp-newbie: Sorry if its a bit harsh, but I think you may need to relearn more lisp before trying advance concepts. It will help in the long run
[19:49:44] <beach> lisp-newbie: Why are you mixing up functions and their names.  Some functions have names and some don't.  And as _death pointed out, you can attach an anonymous function to a name.
[19:49:54] <lisp-newbie> beach I hear, I used a macro based on something that cou;dn't be done, I don't remember exactly what it was... perhaps I did misunderstand something.. will think about refactoring everything with functions now
[19:50:30] <beach> lisp-newbie: That's not true.  You said something "didn't work" or something similar.  That is different from "couldn't be done".
[19:50:32] <lisp-newbie> beach ok, let's call it a day, thanks so much for the help, don't want to get anyone angry over here. will try your suggestions
[19:50:42] <lisp-newbie> beach you are right
[19:51:13] <beach> lisp-newbie: When I have something that "doesn't work", I don't turn my functions into macros.  I figure out why it doesn't work.
[19:51:49] <beach> lisp-newbie: So next time, explain what it is that you want done, and show the solution you tried, and why it did not work.
[19:52:09] <beach> lisp-newbie: Then perhaps, you would be told something entirely differently from turning your functions into macros.
[19:52:52] <lisp-newbie> beach ok, thanks
[19:52:56] <beach> Sure.
[19:53:04] <lisp-newbie> beach will use pastebin more often :)
[19:53:13] <beach> Good.
[19:53:31] <beach> And don't forget to include what you tried, what the result was, and what result you expected.
[19:55:57] <tfeb> Can anyone tell me a format directive (my guess is some variant of ~G) which will always display the same number of significant figures and also deal with exponent notion elegantly?
[19:56:16] <lisp-newbie> beach ok got it
[19:56:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:56:56] <tfeb> 'elegantly' meaning 1.234, 123.4 but 1.234E3 say
[19:57:20] <tfeb> I must be missing something here
[19:58:17] <tfeb> what I don't want is exponents when they are not needed
[19:59:07] <_death> think you need to diy
[19:59:32] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:00:01] <tfeb> _death: that's the conclusion I came to: that or always have exponents
[20:00:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:05:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[20:07:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:09:56] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:6c42:223a:497d:6c3d) (Ping timeout: 258 seconds)
[20:12:45] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[20:12:56] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[20:13:12] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[20:13:22] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[20:13:37] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[20:13:47] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[20:14:03] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[20:17:42] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[20:19:54] *** Quits: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net) (Ping timeout: 276 seconds)
[20:21:18] *** Joins: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net)
[20:23:32] *** Joins: lisp123 (~lisp123@45.130.83.208)
[20:26:38] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:27:19] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:29:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:31:10] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[20:31:56] *** Joins: amb007 (~a_bakic@109.245.227.99)
[20:32:39] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[20:32:39] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[20:33:41] *** Joins: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs)
[20:37:15] <lisp123> How much "work" can be done in one second?
[20:37:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:37:43] <lisp123> I am thinking of writing a scheduler type of program that switches between multiple processes every 1 second
[20:38:13] <Bike> that is a question that depends quite a bit on context
[20:39:50] <lisp123> Say I have 5 processes. Time starts at 0. Process 1 can run up to Time 1. Then control is passed to Process 2. .... And then repeat back to Process 1 at 5 seconds. So within each second, not only do the process have to do some amount of "work", but also check if "time is up" and pass control back (and then the scheduler has to pass control to the next process)
[20:40:27] <lisp123> Measuring "work" is going to be hard, but say consing 50 times - could that be done within a second?
[20:40:30] <mfiano> Doesn't seem very useful
[20:40:32] <aeth> the check should be nearly instant
[20:40:34] <Bike> almost certainly.
[20:40:39] <Bike> you are describing cooperative multitasking.
[20:40:49] <mfiano> Just use a regular event queue
[20:40:52] <Bike> but you can probably just use the implementation/OS scheduler.
[20:40:55] <lisp123> Bike: Yes, with a time based approach
[20:41:00] <Bike> okay, but why?
[20:41:08] <Bike> like what does that get you?
[20:41:27] <aeth> is this a game loop thing? to try to get work done in 1/60 of a second?
[20:41:36] <aeth> or something similarly real-time
[20:41:38] <lisp123> It comes back to my earlier problem of going from A - > B. I don't know which path will get be there, so I want to give equal time to each path
[20:42:25] <lisp123> aeth: no, its related to tree traversal (if I am using it correctly)
[20:43:24] <lisp123> Basically green threads
[20:43:42] <lisp123> Because each path will have its own set of branches, which again will have their own threads
[20:43:58] <aeth> I'm not quite sure what you're doing, but modern computers are really, really fast. First, think up the proper algorithm (which should save you a lot) and then use an optimal data structure (which could possibly save you another 10x). And by the end of that, you probably don't even need threads because computers are really fast.
[20:44:00] <lisp123> So hence I was wondering if 1 second is too short for any meaningful number of computations
[20:44:21] <Bike> to give you a sense of scale, your computer executes several billion arithmetic operations every second.
[20:44:35] <Bike> i mean you can just try it. (time (loop repeat 50 (cons nil nil)))
[20:44:48] <Bike> 50 do*
[20:45:08] <Bike> according to sbcl that takes me four microseconds.
[20:45:20] <lisp123> I am looking at theorem solving, so unfortunately there is an exponential growth in the problem set.
[20:45:55] <lisp123> E.g. 120! ends up at 6.689503e+198
[20:46:18] <aeth> OK so now imo you're on step two in saving time: use an optimal data structure rather than conses.
[20:46:20] <lisp123> Bike: That's great to hear, several billion is enough to do enough meaningful work
[20:46:37] <lisp123> aeth: conses was just an example of an expensive computation, not that I will do that
[20:46:57] <lisp123> But I get your point, I need to optimise carefully (but I want to get the basic algorithm down, and then tinker with optimisations)
[20:47:25] <mfiano> 1.7e9 iterations of Bike's loop per second on my low-end machine
[20:47:27] <aeth> First, algorithm because you can get big-O style speedups (but based on your description, that work could take years and a PhD to do)
[20:47:45] <aeth> Then, data structure. Conses are rarely the most optimal and fastest way to do it. But this is going to be some smaller speedup like e.g. 10x
[20:47:53] <aeth> Only after that, do something fancy.
[20:48:14] *** Demosthe1ex is now known as Demosthenex
[20:48:42] <lisp123> aeth: Thanks, so algorithm first then data structure - got it
[20:49:13] <aeth> at least ime, other people will have other approaches
[20:49:31] <lisp123> I got " 7 page faults" when running Bike's expression - is my computer dying :O
[20:49:45] <aeth> Possibly. My old desktop had RAM failure
[20:49:45] <mfiano> Only optimize if you need to. Lisp lets you just write unencumbered by performance concerns...until you need it after your idea is complete
[20:49:47] <Bike> no. you don't need to worry about those.
[20:49:58] <Bike> unless you get way more into optimization than you are, or probably need to for this problem.
[20:50:17] <lisp123> A related question, (get-universal-time) increments by seconds - is there a way to get time at a smaller scale?
[20:50:39] <mfiano> get-internal-real-time
[20:50:40] <lisp123> mfiano: yes I agree. I just wanted to check if 1 second was enough time
[20:50:47] <mfiano> along with internal-time-units-per-second
[20:51:26] <Bike> one second is actually an extremely long time by coputer standards. it's like you're asking how many holes someone can dig in four thousand years. the answer is "a lot" and "maybe you should rethinking your digging program"
[20:51:33] <Bike> rethink*
[20:51:48] <mfiano> on recent SBCL, this is at microsecond scale (used to be millis)
[20:52:16] <lisp123> Bike: Thanks, thats music to my ears. And if it doesn't work then I know I am going about it the wrong way
[20:53:20] <lisp123> mfiano: Is that (get-internal-real-time)?
[20:53:24] <mfiano> Yes
[20:53:42] <mfiano> But the units it is in is implementation-dependent. Do some math with i-t-u-p-s
[20:53:55] <lisp123> mfiano: Thanks. I-t-u-p-s didn't work for some reason
[20:54:02] <mfiano> it does
[20:54:09] <mfiano> or your implementation is not CL conforming
[20:54:19] <beach> clhs i-t-u-p-s
[20:54:19] <specbot> internal-time-units-per-second: http://www.lispworks.com/reference/HyperSpec/Body/v_intern.htm
[20:54:48] <lisp123> The function INTERNAL-TIME-UNITS-PER-SECOND is undefined, and its name is reserved by ANSI CL so that even if it were defined later, the code doing so would not be portable.
[20:54:56] <mfiano> Did you even read the page beach linked?
[20:55:35] <lisp123> mfiano: I read all but the first words ):
[20:55:41] <lisp123> constant
[20:55:50] <mfiano> then you would have seen the second word :P
[20:56:23] <lisp123> :P Clearly I underestimate computer performance by my own inability to do things fast :P
[20:56:41] <aeth> it's one of the unfortunately named things, since +constants-should-look-like-this+
[20:56:56] <lotuseater> i get 1_000_000
[20:57:03] <mfiano> That convention came after standardization
[20:57:06] <aeth> CL's old and it's compatible with older Lisps so sometimes the naming convention that must not be violated by you is violated by the standard in order to maintain compatibility
[20:57:09] <aeth> which does make things confusing
[20:57:11] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465)
[20:57:38] <lisp123> aeth: Thanks
[21:03:00] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:04:53] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:11:23] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: Leaving)
[21:12:23] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[21:13:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:14:54] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net)
[21:15:12] *** Joins: sander (~sander@user/sander)
[21:22:34] *** Joins: attila_lendvai (~alendvai@2a02:ab88:370d:c380:cd71:35b3:19a6:478a)
[21:24:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:24:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[21:25:41] *** Joins: selwyn (~selwyn@user/selwyn)
[21:26:12] *** Quits: amb007 (~a_bakic@cable-94-189-184-110.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[21:26:49] *** Joins: amb007 (~a_bakic@109.245.227.99)
[21:31:04] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[21:33:40] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 240 seconds)
[21:41:40] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 240 seconds)
[21:44:22] *** Quits: lisp123 (~lisp123@45.130.83.208) (Remote host closed the connection)
[21:47:02] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[21:49:59] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Read error: Connection reset by peer)
[21:51:26] <akater[m]> I managed to post my question during some technical shenanigans.  So I repeat it:
[21:51:32] <akater[m]> Consider hypothetical alist accessor `alist-get`.  `(setf (alist-get key place) new)` will not necessarily call `(setf place)`: when we push a new entry it will, but if we set an existing cdr, it might not.  However, one might implement setf expander for `alist-get` so that `(setf place)` is always called.  For example, I need this to invoke methods of the corresponding generic function `(setf place)`.  Is there a special name for setf
[21:51:32] <akater[m]> expansions that always do this? or for practice of defining such?
[21:55:10] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[21:55:39] *** Joins: lisp123 (~lisp123@45.130.83.208)
[21:56:35] <shka> akater[m]: i don't know any in the standard
[21:56:52] <shka> but in this case... simply always call (setf place)
[21:57:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:59:07] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[21:59:22] *** Joins: amb007 (~a_bakic@87.116.162.160)
[22:00:02] <Bike> akater[m]: so, what, it sets the alist to itself?
[22:01:15] <akater[m]> Bike: Yes.
[22:03:34] *** Quits: amb007 (~a_bakic@87.116.162.160) (Ping timeout: 252 seconds)
[22:03:42] <Bike> what if someone has a reference to an alist pair that isn't mediated through the alist?
[22:03:57] <Bike> like (let ((pair (cons a b))) (push pair alist) (setf (cdr pair) c))
[22:04:49] *** Joins: amb007 (~a_bakic@109.245.227.99)
[22:05:53] *** Quits: lisp123 (~lisp123@45.130.83.208) (Remote host closed the connection)
[22:08:06] <akater[m]> Bike: Well, in this case there's a `push` form which according to the standard is equivalent to a corresponding `setf` form.
[22:08:18] <Bike> i'm referring to the later set.
[22:12:05] <Bike> i mean you could for example return pair from a function, and then ten minutes later change its cdr.
[22:13:27] *** Joins: lisp123 (~lisp123@45.130.83.208)
[22:14:46] <akater[m]> Bike: If someone is modifying an arbitrary accessor, there's of course no reasonable way to tell whether some setf accessor should be called.  Here, it won't be called.  But it is still valuable to have `(setf (alist-get key (my-accessor obj)) ..)` in the code.
[22:14:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:15:25] <Bike> i don't understand the value. what distinguishes my situation here from assoc-value altering a pair?
[22:18:21] <akater[m]> Bike: The value is, code being more readable.
[22:18:25] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[22:18:51] <Bike> i don't understand. the setf alist-value looks the same either way. you're just talking about the definition of the (setf assoc-value) function.
[22:19:30] *** Joins: lisp123 (~lisp123@45.130.83.208)
[22:23:09] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:23:27] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[22:24:15] <akater[m]> Bike: I could write `(setf (my-accessor obj) (progn (setf (alist-get key (my-accessor obj)) new) (my-accessor obj)))` or I could define a setf expander for `alist-get` that ensures the `(setf getter)` call and write simply `(setf (alist-get key (my-accessor obj)) new)`.  The latter is much better.
[22:24:41] <Bike> but why do you want the (setf getter) call, and why do you not need the call if you alter the pair by itself?
[22:32:38] <akater[m]> The call would still be needed but it's impossible to trigger this way.  So pairs should not be altered this way.  And I don't do it either in the code.
[22:32:46] *** Quits: lisp123 (~lisp123@45.130.83.208) (Remote host closed the connection)
[22:33:00] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[22:33:18] *** Joins: lisp123 (~lisp123@45.130.83.208)
[22:33:26] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[22:34:31] <Bike> but why is the call needed?
[22:34:38] *** Joins: tfeb (~tfb@88.98.95.237)
[22:37:40] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[22:44:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:44:31] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[22:46:13] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 244 seconds)
[22:46:29] <jcowan> Can someone explain to me what the benefit of slot inheritance in CL is, given that we have multimethods and not method inheritance?  Subtyping I understand.
[22:47:10] <Bike> what do you mean by a lack of method inheritance?
[22:47:21] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:48:15] <jcowan> As in Smalltalk/Java/C#/etc., where a method defined in a class is available to all its subclasses (often with some visibility control)
[22:48:26] <tfeb> a method which applies to an instance of a class also applies (unless overriden) to any subclass.  So if it relies on slots ...
[22:48:52] <tfeb> (to am instance of any subclass)
[22:49:35] <Bike> jcowan: does call-next-method not count?
[22:51:19] *** Quits: attila_lendvai (~alendvai@2a02:ab88:370d:c380:cd71:35b3:19a6:478a) (Ping timeout: 258 seconds)
[22:51:32] <jcowan> I'm not sure why that matters.
[22:52:07] <jcowan> IOW, if all slots were treated as private to the class (by convention in CL), what would be harmed?
[22:53:16] <tfeb> nothing (except expressiveness) but they would still be inherited, of course
[22:53:18] <Bike> it's sometimes useful to declare a tighter type for a slot and stuff.
[22:53:48] <akater[m]> Bike: The call is needed because certain methods should be called each time when certain data is updated.
[22:54:15] <Bike> but the alist place isn't actually updated.
[22:54:18] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:54:24] <jcowan> Bike: For example?
[22:55:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:56:05] <Bike> in cleavir there are a bunch of classes for IR. there is a general instruction class with a sequence of inputs. there is a no-input mixin that additionally declares the inputs to be an empty sequence and gives them an empty sequence initform.
[22:56:21] <Bike> so if you have an instruction that doesn't take inputs you can just give it the no-input mixin.
[22:57:18] <akater[m]> Bike: When `(setf (alist-get ..) ..)` is called, alist is updated (it might end up being the same of course but that's irrelevant).
[22:57:20] <Bike> that said, this is all done within the system, so at best it's like c++ "protected" rather than "public".
[22:57:35] <tfeb> jcowan: the point is that it's not the language's business to make that decision.  If you want to treat slots as private to the class they are defined in, you can.  If you want to override parts of their definition, you can.  CL treats programmers like adults.
[22:58:14] <Bike> akater[m]: i mean for example if you have observer methods, they can't get a before/after value the way they might expect. i don't understand what these methods want to do.
[23:00:26] *** Joins: utis (~utis@84.208.165.160)
[23:02:04] <jcowan> tfeb: That's a matter of degree.  As someone who used to write whole applications in assembly language, *that* language treats you like an adult: it hands you a double-edged straight razor without a handle.
[23:04:05] <tfeb> jcowan: sure, but having the language insist that slots are all private to their class is very definitely treating its programmers as children
[23:04:05] <utis> if there a way to make (read-line) finish on EOF, even if some input was already given?  i was trying to write a simple cat, but it behaves differently from the standard when one types something and then presses ctl-d on a non-empty line
[23:04:39] <utis> s/f/s/
[23:04:42] <tfeb> jcowan: rather than allowing them to do that if they wish (which is easy)
[23:05:24] <Bike> utis: use LISTEN, maybe?
[23:05:46] <jcowan> Do you consider that CL treats you like a child because go tags don't have indefinite scope and extent?
[23:06:06] <tfeb> I give up.
[23:06:21] <jcowan> I'm not mocking you.  I'm quite serious about this.
[23:06:35] <akater[m]> Bike: I don't see why it matters what those methods try to do.  My `:after` method recomputes something according to new data in the changed alist.  `:before` method checks the type (maybe).
[23:06:38] <pjb> akater[m]: typically, to define such a place, you would define a setf-expander: https://termbin.com/rttn
[23:06:42] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 245 seconds)
[23:06:49] <jcowan> You obviously draw the line somewhere, and I'd like to know where.
[23:07:14] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465) (Quit: Leaving)
[23:08:14] <akater[m]> pjb: I already defined everything.  I'm just asking whether there is a term for it that I could use in the explanation and also because it seems the practice should be of general interest.
[23:08:31] <tfeb> Grow more bits in your mind: there is a continuum between being allowed to do what you want and being told by the language what you can do.  But never mind
[23:08:40] <pjb> akater[m]: now the thing is as you an see we test ,acs, and set the cdr of ,acs if the entry is found or just use acons to create a new entry in the front of the list, and the writer-form is used.  But in both cases, it returns the ,vvalue form, ie the name of the variable holding the value that has been set (so that setf can return it).
[23:08:52] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:09:01] <pjb> akater[m]: now if you want to ensure that the writer-form is called in both cases, you can do that, it will not do any harm.
[23:09:08] <Bike> huh.
[23:09:55] <pjb> akater[m]: like this for example: https://termbin.com/lhz6
[23:10:24] <Bike> i think your question was reasonable, for what it's worth, jcowan
[23:10:55] <jcowan> Thanks.
[23:11:35] *** Joins: lisp123 (~lisp123@45.130.83.208)
[23:11:36] <Bike> though i think the dynamic extent of exit points is less about an idea of what programs are allowable and more about efficiency
[23:11:44] <pjb> akater[m]: well, before defining a term, we should observe that in practice the reader-form and the writter-form will not be a call to a pair of functions such as foo and (setf foo).
[23:12:26] <pjb> akater[m]: for example, try a few (get-setf-expansion '(aref foo i)) (get-setf-expansion '(gethash k too)) etc.
[23:12:37] <Bike> i guess you could also make an argument like kmp's unwind-protect thing, but i don't know if that was relevant during the standardization process
[23:12:50] <pjb> akater[m]: you may get pairs such as (ccl::aset #:g16852 #:g16853 #:g16851) (aref #:g16852 #:g16853) and  (ccl::puthash #:g16855 #:g16856 #:g16854) (gethash #:g16855 #:g16856).
[23:13:09] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[23:13:33] <utis> Bike: thanks
[23:13:44] <Guest74> Hi, I've got a question about special variables which I've heard have some performance issues sometimes
[23:14:43] <akater[m]> Guest74: It's productive to think about performance issues when you actually encounter them.
[23:14:46] <Guest74> If all I use a special for is to be bound in a let and used as optional parameters in a function will that be the same as just providing whatever is bound to the function
[23:14:53] <pjb> akater[m]: but in general, the thing is that a mutator of a place doesn't need to always mutate the place.  It can instead mutate the object referenced from the place.
[23:15:19] <shka> Bike: i want to point out that (setf ldb) is a thing
[23:15:20] <Bike> akater[m]: sorry for all the questions. i don't think there is a particular name for what you want. the accessors in the standard don't do it (e.g. cddr)
[23:15:32] <Bike> shka: yes?
[23:15:50] <shka> so perhaps setf on assoc list is not so weird
[23:16:09] <pjb> Guest74: special variables are in general global variables (and even temporary special variables should be considered global), and it is bad to use a lot of global variables all over the code. So if you apply good software enginering techniques and use only a few global variables from a few places, then there should be no performance problem.
[23:16:19] <pjb> Guest74: just avoid to access or set them from inside a deep loop.
[23:16:27] <Bike> i don't think setf on assoc list is weird. i called it "assoc-value" because that's what it's called in alexandria. I think it is a useful operator. I am just not so sure of the use of mandating intermediate writers be run.
[23:16:59] <Guest74> it's just to avoid having to pass graphics contexts, inks, etc... in graphic drawing functions.
[23:17:06] <pjb> akater[m]: you can define (setf (* foo 2) 6) (assert (= foo 3))
[23:17:08] <Bike> Guest74: you mean you have like (let ((*x* 7)) (f *x*))?
[23:17:22] <shka> Bike: ok, i misunderstood you
[23:17:23] <Bike> or (defun f (&optional (x *x*)) ...) (let ((*x* 7)) (f))?
[23:17:40] *** Joins: lotuseater (~lotuseate@p200300e7871b3f0034cae31f44471c25.dip0.t-ipconnect.de)
[23:18:18] <Guest74> (let ((something:*special* graphic-context))(draw:bezier pt1 pt2 pt3 surface &optional (gc something:*special*))
[23:18:39] <Guest74> maybe even having the surface as a special
[23:19:03] <Bike> that seems like my later example, in which case yes. (defun f (&optional (x *x*)) x) (let ((*x* 7)) (f)) => 7
[23:19:31] <pjb> Guest74: there are two things to consider here:  if you call directly the graphic drawing functions that use the parameter, then it may be more efficient to pass a lexical parameter rather than use a global dynamic variable.  But often, you will call custom drawing functions, or other application functions that will call indirectly the graphic drawing functions. And in that case, it would be more inconvenient and less efficient to pass
[23:19:31] <pjb> around all the parameters needed by the inner graphic drawing functions.
[23:19:37] <akater[m]> Bike: Yes I see that standard ones don't do this. But the fact that setfs not only come form define-setf-expander's but may also be generic functions, makes me wonder if it would be better if they would.  Or whether the topic was explored and discussed among Lispers.
[23:19:43] <pjb> Guest74: hence the use of global special variables for such functions.
[23:20:26] <Bike> i don't remember it coming up. i think we in general are less inclined to use observers and stuff. i wrote a system for it once, but the initial impetus was copying some python behavior.
[23:20:28] <pjb> akater[m]: do you need to reset a slot when some object in a galaxy far far away has been mutated, just because you can reach it from that slot?
[23:20:41] <Guest74> you would have to bind the special before calling the functions, it'd just be (defvar something:*special*) at the top, i.e., not bound
[23:20:47] <pjb> akater[m]: what if that object in a galaxy far far away had been referenced thru another path?
[23:21:06] <pjb> Guest74: yes.
[23:21:07] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 252 seconds)
[23:21:16] <Bike> yeah, you can do that, though i will say it can lead to annoying mistakes.
[23:21:40] <pjb> (let ((something:*special* graphic-context))  (some-function-that-will-call-some-function-that-will-call-draw\:bezier))
[23:21:46] <pjb> Guest74: ^
[23:23:11] <pjb> Guest74: and note that it could be more efficient to have: (draw:bezier pt1 pt2 pt3 surface) calling (draw:bezier/gc pt1 pt2 pt3 something:*special*) so no &optional, and you can use draw:bezier/gc directly if you have a gc in a lexical variable.
[23:23:13] <Guest74> yes, that should be fine right?  for example, the generics for rectangle will call line which will call point and all should use the same context.
[23:23:39] <akater[m]> pjb: It's not really far away.  It is actually always lexical, if I'm not missing anything.
[23:23:40] <pjb> Guest74: for internal functions, it's better of they don't use &optional &key and even &rest.
[23:23:47] <pjb> only mandatory parameters.
[23:24:20] <Guest74> I've been wondering if this isn't an issue with sbcl's block compiling.
[23:24:21] <pjb> akater[m]: well, a-list can be long.  What if you are mutating the 1000000th cons cell?
[23:24:41] <Bike> Guest74: wait, what?
[23:24:53] <Bike> what does block compilation have to do with special variables?
[23:25:04] <pjb> akater[m]: also a-list are typically shared. What if 3 other objects can find the same cons cell in different lists sharing a tail, so the same cell is teh 80000th in one and the 20000000th in another?
[23:25:26] <pjb> akater[m]: What I mean here, is that the thing that is mutated may have no direct relationship with the place from which it is accessed.
[23:26:01] <pjb> Guest74: blocks are lexical. This is unrelated to dynamic variables.
[23:26:11] <Guest74> more what it has to do with &optional &key etc... if it can get rid of performance issues when it sees everything is lexical.
[23:26:52] *** Joins: Wairu_Goodman (~Wairu_Goo@2804:389:e018:364a:5dbc:659b:96b4:191d)
[23:27:04] <Bike> well it's not lexical. and i don't know if sbcl ever reduces dynamic variables to lexical ones.
[23:27:55] <akater[m]> pjb But if you use a generic accessor you should be ready for arbitrary side effects anyway.
[23:28:30] <Guest74> would block compiling reduce the impact of calling generic functions within generic functions? as the aforementioned rectangle calling line calling point?
[23:28:58] <moon-child> (let ((*x* y)) ...) can be reduced to (let ((old-x *x*)) (progn (setf *x* y) ...) (setf *x* old-x)).  Which is not terrible
[23:29:14] <pjb> akater[m]: indeed. You can add those side effects when setting the place with a generic accessor. But note that you should also have some restreint, and apply the Lyskoff Substitution Principle, so if you have side effects, they should be innocuous.
[23:29:36] <moon-child> err, add unwind-protect
[23:29:46] <Bike> Guest74: i don't think sbcl block compilation affects generic dispatch at all either.
[23:30:03] <pjb> Guest74: possibly but difficultly. In lisp things are very dynamic: the set of classes and of methods can change at run-time. Even the class of an object can change while evaluating a function (thanks to multi-threading).
[23:30:26] <Bike> you should just write your code in whichever way is clear, and then later if it's slow examine what in particular could change to speed it up.
[23:30:27] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[23:30:27] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[23:30:27] *** Quits: andreyorst (~andreyors@2.92.124.61) (*.net *.split)
[23:30:27] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[23:30:27] *** Quits: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[23:30:27] *** Quits: easye (~user@2a01:4f8:200:8261::b0) (*.net *.split)
[23:30:27] *** Quits: Kabouik (~Kabouik@user/kabouik) (*.net *.split)
[23:30:27] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[23:30:27] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[23:30:27] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[23:30:27] *** Quits: gko (~user@user/gko) (*.net *.split)
[23:30:27] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[23:30:27] *** Quits: specbot (~specbot@common-lisp.net) (Read error: Connection reset by peer)
[23:30:36] <pjb> Guest74: so (defmethod foo ((a class-1)) (bar a)) -> it may be (defmethod bar ((b class-2))) that is called instead of (defmethod bar ((a class-1)))!
[23:30:42] *** Joins: jackdaniel (~jack@turtleware.eu)
[23:30:44] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[23:30:44] *** Joins: gko (~user@user/gko)
[23:30:47] <Guest74> it's already slow :)
[23:30:51] *** Joins: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[23:30:57] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[23:31:03] *** Joins: Kabouik (~Kabouik@2a03:4000:4d:fbd:4fe:b1ff:fee3:35d)
[23:31:06] <pjb> Guest74: if  (defmethod foo ((a class-1))  #| Here, another thread works and (change-class a 'class-2)) |# (bar a))
[23:31:11] <Bike> okay. hve you profiled and seen what about it is slow?
[23:31:13] *** Joins: minion (~minion@common-lisp.net)
[23:31:16] *** Quits: Kabouik (~Kabouik@2a03:4000:4d:fbd:4fe:b1ff:fee3:35d) (Changing host)
[23:31:16] *** Joins: Kabouik (~Kabouik@user/kabouik)
[23:31:23] *** Joins: specbot (~specbot@common-lisp.net)
[23:31:31] *** Joins: jgkamat (~jay@user/jay)
[23:31:31] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[23:31:33] <Bike> because dynamic variables and generic dispatch are usually pretty quick.
[23:31:42] *** Joins: andreyorst (~andreyors@2.92.124.61)
[23:31:45] <pjb> Guest74: so the compiler would have a lot of global analysis and a really hard time that such at thing cannot occur, and that it can compute the methods called from foo at compilation time.
[23:32:10] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[23:32:12] <Guest74> the generic interface is a lot of the problem.  I have a generic protocol.
[23:32:43] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[23:32:49] <Guest74> the generic protocol mainly just calls backend specific functions.  If you compile a file with the backend specific stuff it's much faster.
[23:32:51] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[23:32:51] *** Joins: jackdaniel (~jack@user/jackdaniel)
[23:32:51] *** ChanServ sets mode: +o jackdaniel
[23:33:43] *** Joins: dcx (~dcx@user/dac)
[23:33:50] *** Quits: lotuseater (~lotuseate@p200300e7871b3f0034cae31f44471c25.dip0.t-ipconnect.de) (Quit: lotuseater)
[23:34:25] <pjb> Guest74: that's a good point indeed.  CLOS gives a lot of hooks. It may be more efficient to design the code more "statically" and with more precise and explicit hooks when needed (eg. take a call-back argument).
[23:34:49] <pjb> And of course, you can always wrap such an implementation in some CLOS facade.
[23:35:56] <Bike> if the generic functions just call the backend functions, rather than each other, shouldn't any call only involve one generic dispatch?
[23:38:13] <Guest74> As a bare minimum a backend can be implemented by just defining one method for drawing a pixel.  Then there is a simple implementation for every other draw function that calls other generic functions which ultimately call the pixel function.
[23:38:13] <pjb> Well, it makes the software extensible, but in block. When you define a new class (or even a subclass), you have to re-implement everything.
[23:38:33] <Guest74> I thought it might be a quick way to make backends somewhat usable.
[23:38:38] <Guest74> i may be wrong.
[23:40:21] <pjb> Guest74: that's another point. What you may think as a core and fast function such as draw:bezier, may actually only be the start, a new toplevel function for things way more complex than you imagine. For example, it may perform some symbolic optimization, involve a network protocol with a remote X server or it may have to compile some cuda code to download it to a GPU.  What you thought would be a simple bit flipping operation, may
[23:40:21] <pjb> actually call up megabytes of library code…
[23:40:37] <pjb> Therefore your optimization is entirely useless.
[23:41:58] <Guest74> admittedly the generic overhead is nothing compared to when I draw on remote servers.
[23:42:57] <Guest74> though standard x and render are basically the only full fledged backends I have so no generics calling generics there.
[23:44:23] <Guest74> oh well, I'll try the specials and see if anybody complains about the api when I release it.  I'd just really like the vector drawing and raster drawing to have similar calling conventions.
[23:45:39] <akater[m]> So far I don't actually see any downsides to demanding getters to be setf'd in expansions.  It is more convenient (see the example) and to me it also looks more natural, as long as generic setf's exist at all.  If you want to avoid triggering a setf accessor, you can always bind the value to a local variable.  I don't see it being conceptually different from paying attention to setfable expressions the way we do now.
[23:47:13] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[23:47:13] *** ChanServ sets mode: +o MichaelRaskin
[23:48:21] *** Joins: gaqwas (~john@dynamic-077-007-019-030.77.7.pool.telefonica.de)
[23:48:36] *** Joins: lisp123 (~lisp123@45.130.83.208)
[23:48:39] <Bike> i think the problem is less with doing it and more being able to enforce that updates only take place in these limited defined ways
[23:48:48] <Bike> some conceptual issues would have to do with threading and with circular structures
[23:49:25] <Bike> e.g. if you have #1=(1 2 . #1#) and rplaca it, do you update both conses?
[23:50:12] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[23:50:12] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:50:34] *** Joins: specbot (~specbot@common-lisp.net)
[23:50:35] *** Quits: amb007 (~a_bakic@109.245.227.99) (Read error: Connection reset by peer)
[23:50:50] *** Joins: amb007 (~a_bakic@87.116.162.155)
[23:51:11] *** Joins: minion (~minion@common-lisp.net)
[23:51:30] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-860A-dynamic.midco.net) (Ping timeout: 258 seconds)
[23:51:33] <akater[m]> Bike: rplaca is not a setf form.  And (setf car) is not a generic function.
[23:51:51] <akater[m]> But I do wonder how much of existing code would actually break if all setf expanders suddenly behaved this way.
[23:51:52] <Bike> you can replace the conses with standard objects
[23:52:00] <Bike> they can still be circular
[23:55:41] <akater[m]> Bike: Then you don't update any more conses than written, you update a cons and an object slot.
[23:56:06] *** Quits: amb007 (~a_bakic@87.116.162.155) (Ping timeout: 258 seconds)
[23:57:43] <Bike> i'm talking about having an object that is like a cons, not a cons. but my basic issue is that in programs it is not always obvious when objects "belong to" other objects in a conceptual sense. I already gave the example of an alist pair floating around separately from the alist. It is possible to write programs so that that is never done, but that cannot be enforced by the language and is a pretty
[23:57:49] <Bike> severe restriction.
