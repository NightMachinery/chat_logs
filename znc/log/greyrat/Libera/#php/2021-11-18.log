[00:00:02] <__adrian> *wasn't
[00:00:41] <__adrian> but was also referring to end quality, reliability/support, etc.
[00:11:12] <biberu> relipse: if you're talking about e.g. reinventing a wiki i'd suspect that'd involve a lot of time spent on things that isn't effective for training, might be better to pick specific parts of it to focus on
[00:11:37] <relipse> I chose to do it using flat files
[00:11:46] <relipse> was a nice experience
[00:11:56] <biberu> what did you learn?
[00:12:21] <Albright_> Hopefully that databases are usually better than flat files
[00:17:38] <relipse> databases are better for updating passwords of users
[00:17:59] <relipse> rather than file_get_contents() and file_put_contents()
[00:18:09] <relipse> i probably should have used a lock or something
[00:28:44] <Sammitch> wow those last 3 messages damaged my sanity
[00:29:38] <relipse> why's that
[00:29:48] <relipse> you have a better way to do it if you are constrainted to not using a db?
[00:30:32] <Sammitch> reject the constraint and use a DB, eg: sqlite.
[00:30:40] <__adrian> relipse: point is, that artifical constraint is is nonsense
[00:30:41] <relipse> yeah sqlite would have been nice
[00:35:50] *** Quits: lembron (~admin@user/lembron) (Ping timeout: 256 seconds)
[00:36:33] *** Joins: ordos (~ordos@user/ordos)
[00:39:18] <bytestream> what's the most graceful way to handle open_basedir restriction in effect warnings?
[00:39:34] <__adrian> heh. disable it
[00:40:10] <__adrian> otherwise, what's your alternative? if you can fix it, then check for the error and do the fix. if you can't, then you should throw.
[00:40:38] <__adrian> there's probably no reason to treat it differently than any other filesystem error
[00:41:10] <bytestream> not necessarily fatal in the case I'm using it, @ seems most graceful at the expense of hiding other warnings
[00:42:06] <bytestream> graceful perhaps the wrong word, cleanest :p
[00:42:28] <Sammitch> like putting a piece of electrical tape over the "check engine" light in your car
[00:44:15] <__adrian> @ is not for ignoring. it's for handling in an alternative way.
[00:44:40] *** Quits: guido (~guido@host-79-49-251-78.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[00:44:46] <bytestream> what do you mean by that? lol
[00:44:53] <__adrian> @fopen(...)  // no
[00:45:25] <__adrian> $fh = @fopen(...); if ($fh === false) { throw ...; }  // yes
[00:45:53] <bytestream> yeah only negative is you lose the warnings/notices
[00:46:07] <__adrian> think of @ as the "i'll do the error myself" operator rather than "error suppression."
[00:46:09] <bytestream> thinking if (! empty(ini_get('open_basedir')) return '???'; is the best way to go
[00:46:33] <__adrian> "bytestream> yeah only negative is you lose the warnings/notices"  // if you want the warning/notice... why @ at all?
[00:46:51] <stenno\OK> i used @ recently
[00:46:56] <__adrian> "bytestream> thinking if() is the best way to go"  // why?
[00:47:25] <bytestream> it suppresses the specific open_basedir warning, and still allows others to be thrown
[00:47:28] <__adrian> open_basedir being enabled doesn't tell you anything about whether a particular file operation will work.
[00:47:43] * stenno\OK non-sequitur
[00:47:53] <__adrian> why do you need to treat open_basedir differently?
[00:48:43] <__adrian> (also, fopen() failing when open_basedir is enabled doesn't mean open_basedir was the cause)
[00:49:44] <bytestream> I see your point, so there is no perfect solution
[00:50:03] <__adrian> there's likely a good solution, but it depends on your problem
[00:50:05] <__adrian> why do you need to treat open_basedir differently?
[00:50:32] <bytestream> warning currently bubbles up to a fatal errorexception when it should be gracefully handled
[00:50:37] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 265 seconds)
[00:50:44] <__adrian> "gracefull" how?
[00:50:47] <__adrian> *y
[00:51:06] <__adrian> your example of  return '???';  is certainly not "graceful"
[00:51:23] <bytestream> it's a simple function, imagine "detectServerType" which does stuff like is_dir('/usr/local/cpanel') etc
[00:51:34] <__adrian> ok
[00:51:35] <bytestream> each is_dir throws warnings when open_basedir is in effect
[00:51:47] <bytestream> I am happy to ignore said warning
[00:51:48] <__adrian> so the use case is "I can't check"?
[00:51:54] <bytestream> pretty much
[00:52:17] <__adrian> is that a problem? or are you happy to just say "yes"/"no" as a default?
[00:52:36] <bytestream> it would just return no in that case
[00:52:58] <bytestream> eventually fall through to "Unknown"
[00:53:00] <__adrian> then it's _not_ an error that you aren't able to check. correct?
[00:53:40] <bytestream> it's only an error that i can check if I catch the ErrorException and inspect the message
[00:54:45] <__adrian> "... if I catch the ErrorException"  yeah, i remember this fad. and still have to deal with it sometimes. tip: handling all errors by throwing them as ErrorException is The Wrong Ideaâ„¢.
[00:55:18] <__adrian> right up there with  "use stdClass instead of arrays so it's OOP"
[00:55:22] <bytestream> you can take that up with Laravel :p
[00:55:37] <__adrian> i don't care to  :)
[00:55:51] <bytestream> good cause they don't often listen ;)
[00:56:56] <__adrian> so yes, in that case, you might @. i could also imagine your wanting a -vvv mode that notes why the determination was/wasn't made
[00:58:57] <bytestream> yeh think I'll go with that
[01:03:41] *** Joins: leadgeek (~leadgeek@user/leadgeek)
[01:03:53] *** Joins: Pixi (~Pixi@user/pixi)
[01:05:41] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[01:09:06] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[01:09:47] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:12:32] *** Quits: genomc (uid245282@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:12:51] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[01:23:05] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58007d6372e51fb97c5a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[01:24:52] *** Joins: guenhael (~Thunderbi@2a01cb008c3d58007d6372e51fb97c5a.ipv6.abo.wanadoo.fr)
[01:44:30] *** Quits: Alex8532 (Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[01:49:22] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:51:34] *** Quits: leadgeek (~leadgeek@user/leadgeek) (Quit: Leaving)
[01:56:05] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:01:58] *** Quits: AnrDaemon (~ZNC@darkdragon-nln.starlink.ru) (Ping timeout: 256 seconds)
[02:07:05] *** Quits: TheCapitalistPun (~Capitalis@liledevil.xs4all.nl) (Remote host closed the connection)
[02:07:19] *** Joins: TheCapitalistPun (~Capitalis@liledevil.xs4all.nl)
[02:07:23] *** Joins: AnrDaemon (~ZNC@darkdragon-nln.starlink.ru)
[02:08:53] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[02:10:03] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[02:13:51] *** Joins: noord (~noord@user/noord)
[02:23:17] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[02:44:12] *** Quits: tex (~super@user/dix) (Ping timeout: 265 seconds)
[02:54:01] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:18] *** mjh4386_ is now known as mjh4386
[02:55:49] *** Joins: Junxter (~Junxter@114.221.67.213)
[03:02:44] *** Joins: WishBoy (~WishBoy@user/wishboy)
[03:08:26] *** Joins: wolfshappen (~waff@irc.furworks.de)
[03:19:00] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[03:19:00] *** Joins: lesihctej (jetchisel@user/jetchisel)
[03:31:31] *** Joins: Trobus (~Trobus@157-131-167-57.fiber.dynamic.sonic.net)
[03:36:10] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[03:36:21] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 250 seconds)
[03:37:56] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[03:46:19] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[03:47:37] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 250 seconds)
[03:51:10] *** Quits: The_Jag (~The_Jag@host-87-9-29-108.retail.telecomitalia.it) (Quit: The_Jag)
[04:06:38] *** Joins: ferdna (~ferdna@user/ferdna)
[04:07:07] *** Quits: Hash (~stoned@wants.to.know.howstoned.ru) (Quit: https://hashsecurity.org)
[04:08:09] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of creative supermutants at https://indiedevs.net/)
[04:08:33] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[04:11:53] *** Joins: Hash (~Hash@thestonedapes.com)
[04:24:48] *** Quits: Hash (~Hash@thestonedapes.com) (Quit: https://hashsecurity.org)
[04:25:13] *** Joins: Hash (~Hash@hashsecurity.org)
[04:34:05] *** Quits: Hash (~Hash@hashsecurity.org) (Quit: https://hashsecurity.org)
[04:36:05] *** Joins: Hash (~Hash@hashsecurity.org)
[04:45:42] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[04:45:57] *** Joins: Colt (~Colt@user/colt)
[04:46:00] *** Quits: Junxter (~Junxter@114.221.67.213) (Ping timeout: 265 seconds)
[04:55:43] <relipse> For some reason my code or my webserver or something is spitting out "cfg" before my page: cfg<!DOCTYPE html><html lang="en">
[04:58:31] <relipse> facepalm
[04:58:41] <relipse> echo 'cfg';
[04:58:49] <__adrian> mm
[04:58:51] <__adrian> that'd do it
[05:00:01] <__adrian> tip: if you use git, you can always just  git checkout -- .  when you're done littering your code with troubleshooting lines.
[05:00:21] <__adrian> removes all changes from your working tree
[05:01:09] *** Quits: ms49434 (~ms49434@user/ms49434) (Quit: Leaving)
[05:06:10] <relipse> yep
[05:09:34] *** Joins: Hiccup (cHoy@user/hiccup)
[05:26:47] *** Quits: lesihctej (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[05:35:05] *** Quits: luva (~luva@146.70.62.238) (Remote host closed the connection)
[05:36:09] *** Joins: luva (~luva@45.141.152.54)
[05:36:35] <relipse> if i have an idea, but I stink at marketing, who do I talk to?
[05:37:44] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[05:38:07] <Blondie101010> your marketing agent
[05:38:13] *** Joins: novns (~novns@user/novns)
[05:39:27] <relipse> where do I get one of those from?
[05:44:52] <Blondie101010> this is not on topic here
[05:50:36] *** Joins: geli (~gelignite@55d4e1d7.access.ecotel.net)
[05:53:40] *** Quits: magla (~gelignite@55d4d6da.access.ecotel.net) (Ping timeout: 265 seconds)
[06:07:19] *** Quits: stenno\OK (~stenno@user/stenno) (Quit: WeeChat 3.2)
[06:09:12] *** Joins: stenno (~stenno@user/stenno)
[06:12:37] *** Joins: Rockwood (~Rocky@user/rocky)
[06:25:01] *** Quits: geli (~gelignite@55d4e1d7.access.ecotel.net) (Quit: Stay safe!)
[06:31:12] *** Joins: onichomp (~onichomp@2806:264:4404:8008:8070:b0dc:b4d4:4ce3)
[06:31:19] *** Joins: onichomp666 (~onichomp@2806:264:4404:8008:8070:b0dc:b4d4:4ce3)
[06:41:02] *** Quits: luva (~luva@45.141.152.54) (Ping timeout: 265 seconds)
[06:41:05] *** Joins: luva (~luva@37.120.197.54)
[06:46:40] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[06:47:06] *** Joins: Rockwood (~Rocky@user/rocky)
[06:47:39] *** Joins: Rockwood_ (~Rocky@user/rocky)
[06:48:42] *** Quits: onichomp666 (~onichomp@2806:264:4404:8008:8070:b0dc:b4d4:4ce3) (Quit: onichomp666)
[06:51:47] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 250 seconds)
[07:00:51] *** Joins: Alex8532 (Alex8532@user/alex8532)
[07:01:12] *** Joins: tw2113 (~tw2113@2001-48F8-6-1318-D2AB-D5FF-FE77-2BD5-dynamic.midco.net)
[07:11:28] *** Joins: genomc (uid245282@hampstead.irccloud.com)
[07:52:36] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:58:49] *** Joins: Junxter (~Junxter@114.221.67.213)
[08:11:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:13:39] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[08:27:36] *** Quits: Rockwood_ (~Rocky@user/rocky) (Quit: The Time is Over)
[08:30:10] *** Quits: montybanksnyc (~montybank@pool-108-5-238-57.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[08:54:46] *** Quits: deksar (~deksar@user/deksar) (Quit: "Mundus scena, vita transitus; venisti, vidisti, abiisti.")
[09:06:31] <skyroveRR> Umm, what does "Fatal error: Uncaught Error: Call to undefined function rrd_graph() " means? Google isn't throwing any useful answers...
[09:08:57] <stenno> have you installed php-rrd ?
[09:09:33] <skyroveRR> Oh. That's it. Thanks.
[09:13:12] *** Quits: robotkittenscat (~robotkitt@user/robotkittenscat) (Ping timeout: 256 seconds)
[09:13:31] <CoJaBo> So, I'm just starting on optimizing a client's website, and, uh, wow. Just wow. Wow.
[09:17:26] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:26:23] *** Joins: robotkittenscat (~robotkitt@user/robotkittenscat)
[09:26:34] *** Joins: deksar (~deksar@user/deksar)
[09:30:48] *** Joins: thiras (~thiras@user/thiras)
[09:52:19] <tw2113> wow CoJaBo
[09:54:11] <CoJaBo> It's basically an audio streaming site with social networking functions stapled on. Before I even found the slow, I noticed that..... every sound clip has an unused blank video track that's about 10Ã— the bitrate of the audio. That's not why it's slow, but... Wow.
[09:54:42] <CoJaBo> The most probable bottleneck is using Sqlite with no indexes, not that it would matter, as they're just iterating thru the rows with PHP. Also, it writes to several databases on every single request
[09:55:00] <CoJaBo> Each table has its own DB :/
[10:11:18] <biberu> CoJaBo: sounds like an opportunity to make some improvements, and happy clients :)
[10:14:53] *** Quits: tw2113 (~tw2113@2001-48F8-6-1318-D2AB-D5FF-FE77-2BD5-dynamic.midco.net) (Remote host closed the connection)
[10:27:09] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[10:38:37] *** Quits: deksar (~deksar@user/deksar) (Quit: Mundus scena, vita transitus; venisti, vidisti, abiisti.)
[10:42:13] *** Joins: deksar (~deksar@user/deksar)
[10:43:02] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[10:45:39] <CoJaBo> biberu: It always amazes me how bad these are :/
[10:46:12] *** Quits: deksar (~deksar@user/deksar) (Client Quit)
[10:54:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:02:02] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58007d6372e51fb97c5a.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[11:06:33] <TinoDidriksen> A file per table isn't awful. That's how other RDBMs do it. But all the rest sounds pretty awful.
[11:08:18] <CoJaBo> TinoDidriksen: Yeh, but they don't know how to do joins either, so they do it all in PHP
[11:08:38] <TinoDidriksen> Ah
[11:09:36] <CoJaBo> It's like someone specifically sat down and decided, "Ok. I'm gonna write this in the most wrongest way possible, just to taunt CoJaBo."
[11:10:14] <CoJaBo> I replaced some with MySql, and of course this causes it to output a blank page
[11:10:56] <CoJaBo> Naturally, error logging is turned off and/or broken, and it's nearly 3am, so I guess I'm calling it a night.
[11:11:07] <TinoDidriksen> On the other hand, it's pretty damn fun to optimize something 2 orders of magnitude. Usually one has to settle for a few % faster, but for truly bad code one can go full orders.
[11:11:47] <CoJaBo> TinoDidriksen: Omg, I had a pathologically insane optimization once
[11:12:03] *** Joins: tex (~super@user/dix)
[11:12:30] <CoJaBo> TinoDidriksen: I once sped up an app by 64 orders of magnitude
[11:12:39] <TinoDidriksen> Neat
[11:13:13] <CoJaBo> That's a mind-bending level of improvement lol
[11:15:54] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::1ac8)
[11:16:24] <Naktibalda> CoJaBo: do you really mean 10^64 ?
[11:16:35] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[11:16:53] *** Joins: yCrazyEdd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[11:17:00] *** yCrazyEdd is now known as CrazyEddy
[11:17:02] <CoJaBo> Hilariously, yes. It ran literally eighty-six vigintillion times faster.
[11:18:05] <CoJaBo> It's a keyspace-search type problem, that was implemented in a straightforward but rather naÃ¯ve way
[11:19:15] <Naktibalda> looks like floating point rounding error to me :)
[11:20:15] <Naktibalda> 1 billion years to 1 nanosecond optimization is only 18 orders of magtinude.
[11:21:00] <Naktibalda> 26 actually, but still much shorter
[11:22:06] <CoJaBo> It managed to find several full-length candidate keys (I forget how many bits these were) per second, whereas the previous approach could not have done that with the entropy of the entire universe thruought all time
[11:24:19] <CoJaBo> IIRC, I did something like segmenting the key and attacking each segment in parallel; the prior attempt had failed to recognize that was possible
[11:26:06] *** Quits: onichomp (~onichomp@2806:264:4404:8008:8070:b0dc:b4d4:4ce3) (Read error: Connection reset by peer)
[11:26:43] *** Joins: onichomp (~onichomp@2806:264:4404:8008:8070:b0dc:b4d4:4ce3)
[11:27:47] <CoJaBo> It wasn't supposed to be possible, because it would almost never be valid when recombined. But it turned out that "almost never" was incomprehensibly more often than the brute-force method. Also, I used a hashtable somewhere, tho I don't have a clue how that fit in with the rest of this lol
[11:29:10] *** Joins: deksar (~deksar@user/deksar)
[11:39:00] *** Joins: MCMiic (~mcmic@63.120.199.77.rev.sfr.net)
[11:43:24] *** Joins: ms49434 (~ms49434@user/ms49434)
[11:45:27] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:48:30] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:54:14] *** Quits: DevAntoine (~DevAntoin@155.251.68.91.rev.sfr.net) (Remote host closed the connection)
[11:55:22] *** Joins: Deuchnord (~deuchnord@user/deuchnord)
[11:58:04] *** Quits: Alex8532 (Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[11:58:18] *** Parts: skyroveRR (~skyroveRR@user/skyroverr) (WeeChat 2.5)
[12:07:16] *** Joins: AsenMx (~AsenMx@user/asenmx)
[12:09:54] *** Joins: DevAntoine (~DevAntoin@155.251.68.91.rev.sfr.net)
[12:11:35] *** Joins: luischi (~luigi@80.30.201.209)
[12:14:37] *** Quits: DevAntoine (~DevAntoin@155.251.68.91.rev.sfr.net) (Ping timeout: 250 seconds)
[12:19:49] *** Joins: bodom (~bodom@host-79-40-44-30.business.telecomitalia.it)
[12:21:45] <bodom> Hi there! I need to run untrusted scripts in my PHP web app. At first i've been looking at eval(), but it looks like i cannot "jail" the eval'd script. The i've been looking into php-lua, but it seems scarcely used and documented and looks like i cannot disable features there too. Did anybody here had a similar challenge? How did you solve it?
[12:25:11] <AllenJB> I believe the safest way to run untrusted code would be in a container or VM. I believe this is what sites like https://3v4l.org do (see https://3v4l.org/about , in particular the 1st paragraph under "Backend")
[12:28:03] *** Joins: pulse (~pulse@user/pulse)
[12:28:04] <AllenJB> 2nd para, not 1st
[12:28:40] <AllenJB> It might help if you explained why you're running untrusted code / what you're trying to achieve overall
[12:33:48] <bodom> Thanks, that's interesting. He is using a VM, so i've still been able, by example, to write in a file and read it later. Still not as much confined as i would like to.
[12:34:09] *** Joins: amcsi (~amcsi@1F2E381A.catv.pool.telekom.hu)
[12:34:17] <bodom> I am writing a report system and i need the user to type down some simple code in some language to customize the data for its report
[12:34:59] *** Joins: stutz (~stutz@user/stutz)
[12:35:11] <bodom> noting too complex: things lice concatenating strings, manipulating some arrays, uppercasing letters, etcâ€¦
[12:35:21] *** Joins: DevAntoine (~DevAntoin@155.251.68.91.rev.sfr.net)
[12:36:09] <stutz> running my tests against 8.1 I get this error, https://kopy.io/T5A7d anyone knows of a change in 8.1 that might causes it?
[12:36:45] <Naktibalda> stutz: not a PHP error
[12:36:49] <stutz> I know :)
[12:37:03] <Naktibalda> could be anything, show your code
[12:37:15] <stutz> but since it happens on 8.1 but not on 8.0 I figured there MIGHT be a php related change affecting arrays that I am not aware of
[12:37:42] *** Joins: Miles8of9 (~obrien@93-34-145-79.ip50.fastwebnet.it)
[12:38:01] <Naktibalda> it seems that your code returns empty array
[12:38:26] <stutz> huh?
[12:38:51] <stutz> the array is the same (as shown in the kopy link)
[12:38:57] <stutz> or am I missing something important here?
[12:39:21] <Naktibalda> actual is [] and it has no partner=>test subarray
[12:42:07] <stutz> I am literally confused. we're either looking at a different snippet or I should step out for a sec cos L11-13 is the actual returned value which is definitely not empty because it says partner => test
[12:42:25] <AllenJB> bodom: There's already 3rd party systems such as PowerBI designed for allowing the business to build their own reports from / explore data. The other alternative I'd suggest is some sort of DSL - perhaps based on SQL - that essentially only provides readonly access to the original data with transformation / grouping capabilities
[12:42:40] <Naktibalda> stutz: then your parameters are in wrong order
[12:43:17] <Naktibalda> lines 11-13 is unsatisfied expectation
[12:44:05] <Naktibalda> 10-13
[12:45:09] <stutz> me walks away in shaame
[12:45:14] * stutz walks away in shaame
[12:45:55] <stutz> sorry for the noise (also thanks for the rubber ducking Naktibalda)
[12:45:57] <bodom> AllenJB: i am not choosing a report system to buy/integrate, i am writing one from scratch ;) Do you know any of those DSL? I only know SQL; it's been my first tought, but giving the end user access to the DBMS seemed life an even worse idea than eval()
[12:47:01] <Naktibalda> bodom: have you considered using template engine for simple manipulations that you wanted to allow? like Smarty
[12:47:42] <AllenJB> bodom: And my first suggestion if you don't write such a thing from scratch if you don't need to
[12:48:07] <Naktibalda> {$row.amount|format:"%02d"}
[12:49:46] <bodom> Naktibalda: that's a good idea but smarty itself allows the execution of the whole PHP code and it is not meant to be safe for untrusted sources
[12:49:51] <biberu> bodom: do your users know sql?
[12:50:21] *** Joins: mujo (~ioh@c-73-25-160-104.hsd1.or.comcast.net)
[12:50:33] <Naktibalda> bodom: IIRC {php} tags can be disabled and you have control of what functions are allowed
[12:50:44] <bodom> biberu: yes. they'll get to learn whatever i choose
[12:50:53] <AllenJB> bodom: If you wanted to use SQL directly, you could set up a specific user that has limited (readonly) access only to certain tables. But you could also consider using an SQL parser to essentially create a DSL that's a limited subset of SQL and works with a fake schema (and you can then also hide that actual DB structure, which may change over time
[12:50:53] <AllenJB> , from the reporting)
[12:51:14] <biberu> bodom: if so perhaps they could just use that and run queries against a bi database with read only capabilities?
[12:51:43] <biberu> (you probably don't want them to run it against the regular db since they might cause performance issues, locking etc.)
[12:52:36] <mujo> So I'm using pdo for interacting with a mariadb, using php7.0 and I have a SELECT query that takes around a minute to run. The thing is, I run the query and the function returns immediately with zero results, but the browser page says it is still loading for one minute. I can run the query manually and it works fine. What am I missing?
[12:53:24] <biberu> bodom: that'd also give you the option to remove sensitive or unneeded data from the regular set, optimize it for bi queries etc.
[12:53:25] <Naktibalda> mujo: do you see that SELECT query in the processlist?
[12:54:03] <mujo> Naktibalda: Let me check
[12:54:19] <stutz> what happened to
[12:54:29] <stutz> ##php anyway? the original #php gone?
[12:54:45] <bodom> Naktibalda, AllenJB, biberu: those are good hints, thanks. Running a partially disabled smarty - it could work, i'll lok into it. Writing my own langauge parser and executer (i would choose LUA in that case), takes some effort, but it could work too. Using a temporary db/user in the DBMS could work too, as long as i can find a way to disable some dangerous function (ie for filesystem access, import and export)
[12:55:01] <mujo> Naktibalda: Yes, I see it in the process list
[12:55:18] <Naktibalda> mujo: what's the status?
[12:55:21] <AllenJB> stutz: Freenode imploded and Libera has different channel naming rules that allow community channels to not use the double-#
[12:55:34] <biberu> bodom: if the user has to learn a new language either way you might save everyone a lot of trouble by not inventing one ;)
[12:55:49] <mujo> Naktibalda: there are two processes, one sleep with no status and the other the query with the state "Sending data"
[12:55:57] <bodom> biberu: ahahaha that's a good point
[12:56:00] <stutz> ah so new rules, gotcha. thanks
[12:56:37] <Naktibalda> mujo: have you tried to EXPLAIN that SELECT statement?
[12:56:38] <biberu> bodom: consider what'd happen if you need to make some changes to the syntax further down, for DSL 2.0, you might have a ton of reports to support on an old version already
[12:57:10] <mujo> Naktibalda: yeah, seems fine. If I run the select statement from the cli client, it runs and returns results as expected
[12:57:32] <biberu> bodom: with sql that's not an issue, and users could both learn from general sources, thus offloading you and your resources, and learn something that is valuable to them / the organization
[12:57:35] <Naktibalda> does it really run for a minute when executed by PHP?
[12:58:35] <mujo> Naktibalda: I mean, it sits in the processlist for that long, and the browser is in a "loading" state, but no results are shown.
[12:59:06] <AllenJB> mujo: What's the thread state when it "sits in the processlist"?
[12:59:09] <mujo> after a minute or so, the browser stops loading, the query leaves the process list, but no results
[12:59:26] *** Joins: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[12:59:39] <mujo> The thread state is "Sending data" - though I check it by running "show processlist;" periodically
[13:00:24] <Naktibalda> is it possible that your PHP code runs that query many times in a loop?
[13:01:16] <mujo> Naktibalda: That's an interesting question. No, and if it did, I would see the process Id change when checking the processlist
[13:02:31] <mujo> It reminds me of non-blocking read that is returning too early
[13:04:50] <mujo> The sql is passed to pdo to be prepared, then executed, followed by a loop the does fetch(PDO::FETCH_ASSOC) until it finishes
[13:05:51] <mujo> while ($row = $this->statement->fetch(\PDO::FETCH_ASSOC)) { $data[] = $row; }
[13:07:27] <Naktibalda> process id wouldn't change, because it is the same connection
[13:09:07] <AllenJB> I would profile the PHP code (which can be done on a basic level using microtime(true) and logging). Logging might also tell you if you're doing something like looping an unexpected number of times.
[13:11:41] <mujo> When I run this query manually via the mariadb cli client or in phpmyadmin, it takes a minute or so to run in anycase. Right now I'm just doing a var_dump($query_results) die(); after it's been called.
[13:12:15] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[13:13:02] <Naktibalda> so it is slow
[13:13:03] <mujo> The browser shows output from var_dump as 0 results, but the page continues to be in a loading state for approximately the length of time the query takes to run - and the query is viewable in the processlist during this time.
[13:13:07] <mujo> yeah
[13:13:58] <Naktibalda> then EXPLAIN SELECT and ask #mysql for optimization advice
[13:14:26] <mujo> :/ but I don't care that it's slow. Does php need queries to be fast?
[13:15:03] <Naktibalda> you came here because you care
[13:15:09] <mujo> I mean, I do care, but I'm working under the assumption it shouldn't matter here...
[13:15:16] <mujo> sorry for being flippant
[13:15:44] <Naktibalda> then it is working as expected
[13:16:32] <mujo> The speed is yes, but when run from my app it says there are zero results. But if I take the same statement and run it via the cli, then I get thousands - as expected. Sorry I must not have been describing my problem well
[13:17:02] <mujo> I'm expecting thousands of results, but when run in my php app, it acts like there are zero results
[13:17:20] <Naktibalda> then you really have to show your PHP code
[13:18:06] <Naktibalda> are you running it on the same database?
[13:18:47] <mujo> I'm able to duplicate the issue in a staging env and in production.
[13:19:09] <mujo> yes with the same db the app is connected to
[13:22:32] <mujo> I could copy a few key files somewhere but I don't think I can provide a running example - I'll just have to pull it out of the codebase I'm working on. Do you think that would be helpful?
[13:24:31] <Naktibalda> have you tried to dump in that fetch loop?
[13:24:50] <gde33> mujo: perhaps try a simple query?
[13:26:15] <mujo> those are both good ideas thanks! I assumed so many other queries run fine that it did not occur to me trim this specific one down. I'll also try to dump in the fetch loop - that is a very good idea
[13:26:33] <gde33> flush?
[13:26:42] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:31:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[13:32:02] <mujo> gde33: what do you mean by flush?
[13:34:20] *** Joins: onichomp666 (~onichomp@177.231.43.15)
[13:35:44] *** Quits: onichomp (~onichomp@2806:264:4404:8008:8070:b0dc:b4d4:4ce3) (Ping timeout: 265 seconds)
[13:36:26] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[13:40:39] *** Parts: bodom (~bodom@host-79-40-44-30.business.telecomitalia.it) ()
[13:49:47] *** Joins: Anticom (~anticom@87.190.49.75)
[13:50:49] <mujo> No output from adding dumps in the fetch loop but I got to go. thank you for helping me debug this issue
[13:52:43] *** Joins: sleetdrop (~sleetdrop@61.135.152.248)
[13:57:11] *** Joins: fling (~fling@user/fling)
[13:57:14] <fling> Hi
[13:57:30] <fling> What could cause fpm to error out with 503 if you update page too fast
[13:57:33] *** Joins: freeman_h (~Ume@80.209.149.171)
[13:59:07] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[14:02:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[14:03:54] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Ping timeout: 256 seconds)
[14:04:50] *** Quits: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.3)
[14:08:16] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:12:33] *** Parts: fling (~fling@user/fling) ()
[14:13:01] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[14:14:57] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[14:18:05] *** Quits: da_wunder (~wunder@dsl-jklbng11-54fa51-220.dhcp.inet.fi) (Ping timeout: 246 seconds)
[14:19:12] *** Quits: sleetdrop (~sleetdrop@61.135.152.248) (Ping timeout: 256 seconds)
[14:23:34] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[14:25:47] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:32:01] *** Quits: Anticom (~anticom@87.190.49.75) (Remote host closed the connection)
[14:34:53] *** Quits: onichomp666 (~onichomp@177.231.43.15) (Read error: Connection reset by peer)
[14:38:45] *** Quits: zerosum (~zerosum@user/zerosum) (Quit: Ping timeout (120 seconds))
[14:47:11] *** Quits: Hiccup (cHoy@user/hiccup) (Remote host closed the connection)
[14:58:33] *** Joins: magla (~gelignite@55d4e1d7.access.ecotel.net)
[14:59:03] *** Joins: luigibu (~luigibu@91.126.243.41)
[15:03:58] *** Quits: luigibu (~luigibu@91.126.243.41) (Ping timeout: 256 seconds)
[15:11:30] *** Joins: Anticom (~anticom@87.190.49.75)
[15:12:53] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::1ac8) (Ping timeout: 265 seconds)
[15:13:35] *** Quits: Deuchnord (~deuchnord@user/deuchnord) (Ping timeout: 264 seconds)
[15:14:07] *** Joins: Alex8532 (Alex8532@user/alex8532)
[15:16:09] *** Joins: luigibu (~luigibu@91.126.243.41)
[15:16:11] *** Quits: Anticom (~anticom@87.190.49.75) (Ping timeout: 250 seconds)
[15:20:58] *** Quits: luigibu (~luigibu@91.126.243.41) (Ping timeout: 256 seconds)
[15:32:13] *** Joins: luigibu (~luigibu@91.126.243.41)
[15:35:39] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Read error: Connection reset by peer)
[15:41:47] *** Quits: luigibu (~luigibu@91.126.243.41) (Ping timeout: 264 seconds)
[15:43:06] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[15:47:17] *** Quits: lehinsun (~ttytwiste@188.113.176.117) (Quit: Leaving)
[15:48:12] *** Joins: guido (~guido@host-79-55-135-143.retail.telecomitalia.it)
[15:51:06] *** Joins: Anticom (~anticom@87.190.49.75)
[15:52:36] *** Joins: Deuchnord (~deuchnord@user/deuchnord)
[15:53:37] *** Joins: pulse (~pulse@user/pulse)
[15:55:14] *** Joins: luigibu (~luigibu@91.126.243.41)
[15:56:04] *** Quits: Anticom (~anticom@87.190.49.75) (Ping timeout: 268 seconds)
[15:58:26] *** Joins: Anticom (~anticom@87.190.49.75)
[16:02:59] *** Quits: luigibu (~luigibu@91.126.243.41) (Ping timeout: 250 seconds)
[16:09:27] <velix> Is if(empty($jsons)) equal to if($jsons === []) ?
[16:09:35] <TinoDidriksen> No
[16:09:45] <TinoDidriksen> https://www.php.net/empty
[16:10:02] <velix> TinoDidriksen: OKay, let me read ;)
[16:10:20] <TinoDidriksen> A lot of things are "empty", including surprising things like the string "0"
[16:10:31] <velix> TinoDidriksen: ah, thanks! I remember that
[16:11:32] *** Parts: Trobus (~Trobus@157-131-167-57.fiber.dynamic.sonic.net) ()
[16:18:42] *** Joins: locsmif (~none@user/locsmif)
[16:18:52] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:19:01] *** Joins: luigibu (~luigibu@91.126.243.41)
[16:19:33] *** Joins: noord (~noord@user/noord)
[16:21:34] *** Quits: magla (~gelignite@55d4e1d7.access.ecotel.net) (Quit: Stay safe!)
[16:22:18] <locsmif> Hi all. I've been told checks like if ($var = $this->somemethod($par1, $par2) { ... } are inherently bad, and should be split into: $var = $this->somemethod($par1, $par2) and if ($var) { .... } ... why is that?
[16:23:47] *** Quits: luigibu (~luigibu@91.126.243.41) (Ping timeout: 264 seconds)
[16:24:32] *** Joins: Deuchnord_ (~deuchnord@user/deuchnord)
[16:27:15] *** Quits: Deuchnord (~deuchnord@user/deuchnord) (Ping timeout: 250 seconds)
[16:29:08] *** Quits: Anticom (~anticom@87.190.49.75) (Remote host closed the connection)
[16:29:45] <Blondie101010> because it's easy to confuse an assignment with a condition (only difference being a small '=')
[16:30:36] <Blondie101010> so when you see that, you get to ask youself if it was intended
[16:30:37] *** Joins: Anticom (~anticom@87.190.49.75)
[16:32:38] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Read error: Connection reset by peer)
[16:32:47] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[16:38:10] *** Quits: freeman_h (~Ume@80.209.149.171) (Quit: Konversation terminated!)
[16:40:19] <__adrian> a big part of making code that has no bugs is a code style that makes potential bugs *really obvious*  ;)
[16:40:34] *** Joins: Deuchnord__ (~deuchnord@user/deuchnord)
[16:41:22] <locsmif> __adrian: hmm yes
[16:43:08] *** Quits: Deuchnord_ (~deuchnord@user/deuchnord) (Ping timeout: 256 seconds)
[16:45:05] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::1ac8)
[16:49:10] <locsmif> I wish there were some kind of accepted way to avoid all those extra if blocks then
[16:49:22] <__adrian> "extra" ?
[16:49:38] <locsmif> I should rather say, additional lines of code
[16:49:41] <__adrian> if it's what you want the code to do, it's not extra
[16:49:55] <locsmif> I don't mean to offend
[16:49:56] <__adrian> use as many loc as your program needs.
[16:50:01] <locsmif> ok
[16:50:05] <__adrian> i didn't take offense
[16:50:09] <locsmif> :)
[16:50:41] <locsmif> I guess I'm just a little disappointed that syntax is so frowned upon, because I love it, haha
[16:50:56] <locsmif> But, I understand why it's disliked, as you explained
[16:51:07] <__adrian> many times, people "love" conventions that are "clever"
[16:51:18] <stenno> conventions :/
[16:51:19] <__adrian> problem is, "clever" code is harder to debug.
[16:51:43] *** Quits: guido (~guido@host-79-55-135-143.retail.telecomitalia.it) (Read error: Connection reset by peer)
[16:51:50] <stenno> allows you to write very specific things very quickly but once you need to deviate, you will suffer
[16:51:54] <Blondie101010> locsmif:  you're the one who came here to find out about best practices...  you're free to write your code the way you like but you were given good reasons to learn better
[16:51:55] <__adrian> because you have to think about it more. you should write code that's easy to read with as little thinking as possible required.
[16:52:13] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:53:19] <__adrian> take the assignment-during-comparison example. if you allow that, then every time you see it, you have to stop and think "what's that do? is that what i meant?"
[16:53:39] <__adrian> as opposed to if you don't allow it - you just say "WOAH NOPE fix that"
[16:53:58] <__adrian> minimal thinking. you can save your thinking for all the other things you need to think about
[16:59:03] <stenno> this is why i prefer array_* over for-as loops
[17:03:34] *** Joins: onichomp (~onichomp@2806:264:4404:80fd:7899:e84b:c76c:60a1)
[17:04:57] <arash> Hello, I created a class with some public functions, I want to use some properties in all of the functions, so all of the functions have access to those properties. I'm coding like this: $a = 'here'; $this->a = $a; I want to know if it is wrong or there is a better way to do that?
[17:05:00] <stenno> e.g. array_map tells me: the result will be another array with the same number of elements, map callback gets called for all elements, and the original array wont be mutated
[17:05:18] <stenno> i cannot derive this from a for-as loop
[17:05:21] *** Quits: onichomp (~onichomp@2806:264:4404:80fd:7899:e84b:c76c:60a1) (Read error: Connection reset by peer)
[17:05:46] <arash> I mean I don't declare those properties using public keyword. why should I do that?
[17:05:58] *** Joins: onichomp (~onichomp@2806:264:4404:80fd:7899:e84b:c76c:60a1)
[17:06:13] <__adrian> arash: properties are available to class methods. however, _public_ methods in general are a code smell. you should declare properties, and they should usually be nonpublic.
[17:06:49] <__adrian> when they're public, you have little or no control over the value set. your class should _encapsulate_ (contain and control) those properties/values.
[17:06:57] <Naktibalda> public methods?
[17:07:03] <__adrian> properties
[17:11:02] <arash> I still don't see any reason to declare those properties before using them in my methods. I mean I didn't had any problem till now with using $this.
[17:11:45] <arash> my methods manipulate those properties.
[17:13:08] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:13:46] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[17:15:43] <arash> If I declare them the when I want to use them inside the methods I should pass them to all of the methods. is that right?
[17:16:37] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 265 seconds)
[17:16:47] <arash> are these two the same? public $var1 = 1; and $var = 1;
[17:19:42] <Blondie101010> being explicit is always a good thing
[17:20:35] *** Joins: luigibu (~luigibu@91.126.243.41)
[17:21:14] <__adrian> arash: no
[17:21:23] <__adrian> one is a syntax error
[17:21:58] <__adrian> "arash> If I declare them the when I want to use them inside the methods I should pass them to all of the methods"  no. use  $this->
[17:24:16] <arash> __adrian, syntax error for public $var1 = 1; ? what is the correct syntax?
[17:24:48] <Naktibalda> another way around
[17:24:48] <__adrian> try it.  class X { public $var = 1; }  does it error?
[17:25:18] *** Quits: luigibu (~luigibu@91.126.243.41) (Ping timeout: 260 seconds)
[17:26:41] <arash> I didn't get any error, but you mean Missing property's type declaration?
[17:27:07] <Blondie101010> it was to get you to try both
[17:27:18] <Blondie101010> and sure enough it requires the visibility
[17:27:53] <Naktibalda> var $var = 1; was valid PHP4 code
[17:28:17] <Blondie101010> I tried 5.2 as I did remember it working at some point :)
[17:29:00] <arash> I see it now. I can't use $var1 = 1; in class scope.
[17:29:16] <Blondie101010> nope, even 4.3 requires `var`
[17:33:28] *** Joins: stenno (~stenno@user/stenno)
[17:34:49] *** Joins: luigibu (~luigibu@91.126.243.41)
[17:35:59] *** Joins: rdbeni0 (~rdbeni0@public-gprs375585.centertel.pl)
[17:39:14] *** Quits: luigibu (~luigibu@91.126.243.41) (Ping timeout: 256 seconds)
[17:43:49] *** Joins: freeman_h (~Ume@80.209.149.171)
[17:44:56] <freeman_h> Hi all, I am seeing alot of call back been a static function alot this days e.h. uasort($array, static function($a,$b){ blah });
[17:45:09] <freeman_h> was just wondering what is the benefit if any
[17:46:02] *** Quits: Junxter (~Junxter@114.221.67.213) (Ping timeout: 256 seconds)
[17:46:50] <Naktibalda> PHPStorm inspection says that static function is a bit more efficient
[17:48:40] *** Joins: melin (~melin@84-217-72-174.customers.ownit.se)
[17:49:37] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[17:50:02] <freeman_h> Naktibalda: how?
[17:56:20] <biberu> freeman_h: it's probably more important as a design choice than a micro optimization
[18:05:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[18:19:50] *** Joins: magla (~gelignite@55d4e1d7.access.ecotel.net)
[18:23:26] *** Quits: sharpertool (sid80151@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[18:24:44] *** Joins: sharpertool (sid80151@hampstead.irccloud.com)
[18:31:37] *** Joins: Deuchnord_ (~deuchnord@user/deuchnord)
[18:34:13] *** Quits: Deuchnord__ (~deuchnord@user/deuchnord) (Ping timeout: 250 seconds)
[18:35:07] *** Joins: guenhael (~Thunderbi@pop.92-184-108-199.mobile.abo.orange.fr)
[18:36:35] *** Quits: melin (~melin@84-217-72-174.customers.ownit.se) (Remote host closed the connection)
[18:36:47] *** Quits: Anticom (~anticom@87.190.49.75) (Remote host closed the connection)
[18:37:02] *** Quits: guenhael (~Thunderbi@pop.92-184-108-199.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[18:43:35] <__adrian> freeman_h: there's almost zero reason to do it. performance difference is not appreciable. all it accomplishes to preventing the anon function from having an object scope, which is largely inconsequential
[18:48:15] *** Joins: Anticom (~anticom@87.190.49.75)
[18:48:22] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[18:50:19] *** Quits: Alex8532 (Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[18:53:18] <AllenJB> That inspection comes from PHP Inspections (EA Extended) I believe. The description quotes "15% performance improvement" and links to https://github.com/Ocramius/GeneratedHydrator/releases/tag/3.0.0
[18:54:13] <AllenJB> IMO it's a micro-optimization. Bu this is what you get when you use opinionated static analysis
[18:54:45] *** Joins: goddard (~goddard@user/goddard)
[18:55:06] <goddard> do all high level languages grow an Array the same way
[18:55:24] <goddard> where is the code for how php does it?
[18:56:59] *** Joins: luigibu (~luigibu@80.30.201.209)
[18:58:18] *** Joins: pulse (~pulse@user/pulse)
[19:04:59] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 250 seconds)
[19:05:25] <arash> is there any function to get visibility of a property if a class? I mean I want to pass a property to that function and find out its public or private or static.
[19:05:40] *** Joins: ge (~g@37.214.42.244)
[19:06:39] <Naktibalda> arash: https://www.php.net/ReflectionProperty
[19:10:38] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Quit: WeeChat 1.5)
[19:12:37] *** Quits: rdbeni0 (~rdbeni0@public-gprs375585.centertel.pl) (Quit: Leaving.)
[19:18:02] <arash> I want to test to find out if I don't declare a property in a class using public keyword, its public by default when I use it in methods. is it?
[19:18:52] <Naktibalda> yes, that's right. It is documentend that dynamically created properties are public.  var{dump the object and
[19:19:09] <Naktibalda> var_dump the object and see the difference between public and private properties
[19:20:28] <arash> thank you
[19:25:18] <__adrian> arash: https://php.net/oop
[19:25:46] <__adrian> but also, don't add undeclared properties to an object. this is bad / lack of design.
[19:27:03] <arash> ok. thank you.
[19:27:13] <__adrian> welcome
[19:27:19] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of creative supermutants at https://indiedevs.net/)
[19:31:06] *** Quits: Deuchnord_ (~deuchnord@user/deuchnord) (Remote host closed the connection)
[19:40:50] <__adrian> "AllenJB> ...quotes "15% performance improvement" ..." yeah, note numbers: they're talking about an actual improvement of 0.012 microseconds. not appreciable.
[19:42:19] *** Quits: locsmif (~none@user/locsmif) (Quit: leaving)
[19:49:48] *** Quits: Anticom (~anticom@87.190.49.75) ()
[19:51:41] *** Joins: guest49434_ (~ms49434@user/ms49434)
[19:51:47] *** Joins: rainmkr (~rainmkr@c-73-243-50-45.hsd1.co.comcast.net)
[19:51:50] *** Quits: FloridaMan (~FloridaMa@user/floridaman) (Ping timeout: 256 seconds)
[19:52:44] *** Joins: pulse (~pulse@user/pulse)
[19:53:57] *** Quits: ms49434 (~ms49434@user/ms49434) (Ping timeout: 250 seconds)
[19:54:08] *** Quits: wutzelputz (~wutzelput@2001:470:69fc:105::3117) (K-Lined)
[19:54:09] *** Quits: kuhilas (~kuhilas@2001:470:69fc:105::3040) (K-Lined)
[19:54:11] *** Quits: ramsey[m] (~ramsey@phpc/ramsey) (K-Lined)
[19:54:24] *** Quits: Rubin (~rubin@2001:470:69fc:105::17e) (K-Lined)
[19:56:36] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::1ac8) (Ping timeout: 265 seconds)
[19:57:17] *** Joins: pmercado (~pmercado@186.107.40.51)
[19:59:01] *** Joins: bizolos (~bizolos@176-179-18-127.abo.bbox.fr)
[20:00:22] <bizolos> Hi there. In python I can get one on two elements in a list. Given elems = [0,1,2,3], if I do elems[::2] it will return [0, 2]. I'm looking for a PHP equivalent. What would be the best technique to achieve this?
[20:02:37] *** Quits: magla (~gelignite@55d4e1d7.access.ecotel.net) (Quit: Stay safe!)
[20:02:50] <Naktibalda> bizolos: do you want to extract the first and the third element?
[20:03:20] *** Quits: michele_ (~eraser@user/michele) (Remote host closed the connection)
[20:03:37] *** Joins: michele (~eraser@user/michele)
[20:03:39] <bizolos> Naktibalda, yes, but could be a much longer series. The first, the third, the fitfh, etc.
[20:04:04] <TinoDidriksen> So ::2 selects every 2nd element?
[20:04:55] <bizolos> TinoDidriksen, yep, it's a step of 2
[20:05:12] *** Quits: Oclair (~Oclair@nq3.aventia.pw) (Quit: %Cya%)
[20:05:18] *** Quits: mete (~mete@static.201.165.216.95.clients.your-server.de) (Ping timeout: 244 seconds)
[20:05:23] *** Joins: Rockwood (~Rocky@user/rocky)
[20:05:53] <TinoDidriksen> Eh, use a for() loop.
[20:06:00] <bizolos> TinoDidriksen, elems[0:3] returns the [0,1,2]  elems[1:3] returns [1,2,3]  elems[0:3:2] returns [0,2]
[20:06:05] *** Joins: Oclair (~Oclair@nq3.aventia.pw)
[20:06:21] <Rockwood> __adrian, hi how are you sir>?
[20:06:21] *** Joins: ramsey[m] (~ramsey@phpc/ramsey)
[20:06:25] <Rockwood> __adrian, hi how are you sir?
[20:06:26] *** Joins: kuhilas (~kuhilas@2001:470:69fc:105::3040)
[20:06:26] *** Joins: wutzelputz (~wutzelput@2001:470:69fc:105::3117)
[20:06:40] *** Joins: Rubin (~rubin@2001:470:69fc:105::17e)
[20:06:51] <bizolos> TinoDidriksen, yeah, makes sense indeedâ€¦ Just checking if there is a more "elegant" technique than the for loop
[20:06:52] <Naktibalda> bizolos: there is no equivalent with step, you have to use array_filter with ARRAY_FILTER_USE_KEY   or for loop and if statement
[20:07:04] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Ping timeout: 268 seconds)
[20:07:29] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[20:07:36] <bizolos> Naktibalda, oh, array_filter with a callback checking if key % 2 === 0 ?
[20:07:42] <TinoDidriksen> It's just a for() loop with different initial and step value, so do that. Trivial to put in a helper function.
[20:08:17] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[20:09:02] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 240 seconds)
[20:09:17] *** Joins: guido (~guido@host-79-55-135-143.retail.telecomitalia.it)
[20:09:54] *** Quits: Beryllium (sid186414@lymington.irccloud.com) (Read error: Connection reset by peer)
[20:09:54] *** Quits: genomc (uid245282@hampstead.irccloud.com) (Read error: Connection reset by peer)
[20:09:59] *** Quits: ramsey (sid508214@phpc/ramsey) (Ping timeout: 264 seconds)
[20:10:00] *** Quits: sharpertool (sid80151@hampstead.irccloud.com) (Write error: Connection reset by peer)
[20:10:00] *** Quits: DrowningElysium (sid190788@user/drowningelysium) (Read error: Connection reset by peer)
[20:10:00] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Read error: Connection reset by peer)
[20:10:01] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:01] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:01] *** Quits: paladox (sid373195@wikimedia/paladox) (Read error: Connection reset by peer)
[20:10:04] *** Quits: sunarch (uid526836@user/sunarch) (Read error: Connection reset by peer)
[20:10:04] *** Quits: petris (sid19918@user/petris) (Read error: Connection reset by peer)
[20:11:36] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[20:11:40] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[20:11:50] *** Joins: sunarch (uid526836@user/sunarch)
[20:12:22] *** Joins: paladox (sid373195@wikimedia/paladox)
[20:12:59] *** Joins: petris (sid19918@user/petris)
[20:13:10] *** Quits: MCMiic (~mcmic@63.120.199.77.rev.sfr.net) (Quit: Konversation terminated!)
[20:13:22] *** Joins: DrowningElysium (sid190788@user/drowningelysium)
[20:13:51] *** Joins: ramsey (sid508214@phpc/ramsey)
[20:13:57] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[20:14:11] *** Joins: genomc (uid245282@hampstead.irccloud.com)
[20:14:11] *** Quits: Smeef (~deathonat@user/smeef) (Ping timeout: 264 seconds)
[20:14:42] *** Joins: Beryllium (sid186414@lymington.irccloud.com)
[20:15:20] *** Joins: sharpertool (sid80151@hampstead.irccloud.com)
[20:16:21] <__adrian> bizolos: note you need to for() against the keys (not the array itself)
[20:17:02] <bizolos> __adrian, yes https://gist.github.com/Einenlum/dd396a99ec57b10938b4894da162fe1a Not very elegant, damn ^^
[20:17:02] <__adrian> or against array_values($array).  "checking if key % 2 === 0" would only do what you're asking by accident
[20:17:20] <__adrian> yeah, don't count() every loop either
[20:17:28] <bizolos> Oh true
[20:17:55] <bizolos> thx
[20:17:57] <TinoDidriksen> Why the slice first?
[20:18:00] <__adrian> ^
[20:18:08] <__adrian> just noticed that
[20:18:41] <__adrian> instead of $sliced, i'd expect $values = array_values($elements);
[20:19:10] <__adrian> unless you _know_ that the array is already+always going to have 0..n keys
[20:19:16] <TinoDidriksen> You can use numeric counter and next() + key() to iterate over keys.
[20:19:19] *** Joins: rdbeni0 (~rdbeni0@public-gprs375585.centertel.pl)
[20:19:21] <bizolos> Yeah, it was to have the same behavior as elements[0:5:2] in python
[20:19:30] <__adrian> k
[20:19:40] <TinoDidriksen> Oh, the middle number slices first? That's profoundly odd.
[20:20:04] <__adrian> just remember that php arrays are not like python arrays at all  ;)
[20:20:06] <TinoDidriksen> I guess for backwards compat with the slices.
[20:20:18] *** Joins: celphi (sid97751@user/celphi)
[20:20:30] <bizolos> TinoDidriksen, here is how it works: https://gist.github.com/Einenlum/67514edba81c905813d707b16307eb27
[20:21:35] <TinoDidriksen> Yup yup, the :: syntax is an organic extension of : syntax. It's bad, but historically it makes sense.
[20:21:58] <bizolos> Why would it be bad? Real question, I'm curious. I find it very elegant.
[20:22:46] <bizolos> __adrian, in what sense? Except for the different api to use it? It seems to me that indexed arrays in PHP and lists in Python are quite similar
[20:23:01] *** Quits: rdbeni0 (~rdbeni0@public-gprs375585.centertel.pl) (Quit: Leaving.)
[20:23:03] <__adrian> "indexed array" doesn't mean what you seem to think it does
[20:23:05] <__adrian> all php arrays are associative. they are ordered, but [1] refers to the _key_ 1, not to the element's position.
[20:23:40] <bizolos> mmm interesting
[20:23:54] <__adrian> you can _treat_ a php array with [0..n] keys as a list, but it's not a list.
[20:25:11] <__adrian> e.g., if i gave you  [1=>0,1,2,5=>3,4,5,10=>7,8,9]  your function would not give you back the slice you expect.
[20:26:01] <bizolos> Yes, true
[20:26:16] <__adrian> with array_values(), though, it would.
[20:26:31] <TinoDidriksen> start:stop:step makes sense because start:stop already existed (and you say :7 is actually :start? Surely not). In a vacuum, I'd probably design that differently.
[20:27:05] *** Quits: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:27:26] <__adrian> though if you expect a list, you might consider a non-0..n array to be an error  ;)
[20:28:54] <bizolos> TinoDidriksen, woops, typo. Thanks! I wanted to write elements[7:] indeed
[20:29:17] *** Joins: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net)
[20:30:23] *** Quits: ramsey[m] (~ramsey@phpc/ramsey) (Quit: Client limit exceeded: 20000)
[20:30:45] *** Quits: kuhilas (~kuhilas@2001:470:69fc:105::3040) (Quit: Client limit exceeded: 20000)
[20:31:05] *** Joins: kuhilas (~kuhilas@2001:470:69fc:105::3040)
[20:32:54] <Rockwood> __adrian, hi how are sir?
[20:33:09] *** Joins: ramsey[m] (~ramsey@phpc/ramsey)
[20:33:19] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[20:33:27] <__adrian> hi
[20:34:10] <TinoDidriksen> bizolos, something like https://3v4l.org/hfeI6
[20:34:11] *** Quits: wutzelputz (~wutzelput@2001:470:69fc:105::3117) (Quit: Client limit exceeded: 20000)
[20:34:18] *** Quits: onichomp (~onichomp@2806:264:4404:80fd:7899:e84b:c76c:60a1) (Ping timeout: 265 seconds)
[20:34:35] <bizolos> TinoDidriksen, thx!
[20:34:36] *** Joins: wutzelputz (~wutzelput@2001:470:69fc:105::3117)
[20:43:04] <bizolos> Another question: is there an easy way in PHP to find all the elements that are NOT present in both arrays? I know array_diff but it's only one way I think?
[20:43:26] <__adrian> bizolos: you're halfway there
[20:44:05] <bizolos> haha ok, something like array_merge(array_diff($a1, $b), array_diff($b, $a)) ?
[20:44:12] <__adrian> yep  [...array_diff($a, $b), ...array_diff($b, $a)]
[20:44:17] <bizolos> thx
[20:56:22] *** Quits: put_in (~put_somew@123.20.213.95) (Quit: Leaving)
[21:00:27] <bizolos> Other question: in Python, given you have dimensions = [40, 60, 80] and (width, *args) = dimensions, then width == 40 and args == [60, 80]. Seems like I can't do this in PHP? [$width, ...$others] = $dimensions; // PHP Fatal error:  Spread operator is not supported in assignments
[21:00:31] <bizolos> Is there a way to achieve the same?
[21:02:44] *** Quits: freeman_h (~Ume@80.209.149.171) (Quit: Konversation terminated!)
[21:02:57] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[21:04:04] *** Joins: vlm (~vlm@user/vlm)
[21:06:07] *** Joins: magla (~gelignite@55d4e1d7.access.ecotel.net)
[21:13:27] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: For Sale: Parachute. Only used once, never opened, small stain.)
[21:15:09] *** Quits: DevAntoine (~DevAntoin@155.251.68.91.rev.sfr.net) (Read error: Connection reset by peer)
[21:24:35] *** Joins: teresko (~teresko@user/teresko)
[21:24:39] <teresko> hi everyones
[21:25:04] *** teresko is now known as azazul
[21:25:20] *** Quits: bizolos (~bizolos@176-179-18-127.abo.bbox.fr) (Ping timeout: 256 seconds)
[21:26:41] <azazul> a lot of known faces from freenode
[21:27:24] <azazul> I have a naming question: what should I call a "query builder" that only build a where-clause?
[21:27:51] <azazul> and please dont say Wherewolf
[21:30:46] *** Joins: DevAntoine (~DevAntoin@155.251.68.91.rev.sfr.net)
[21:31:12] <AllenJB> WhereClauseBuilder?
[21:31:53] <azazul> ... maybe I really shouldnt try to be all fancy about it
[21:34:02] *** guest49434_ is now known as ms49434
[21:34:39] *** Joins: z_lehinsun_ (~lehinsun@188.244.142.69)
[21:35:51] *** Quits: DevAntoine (~DevAntoin@155.251.68.91.rev.sfr.net) (Ping timeout: 268 seconds)
[21:37:14] *** Quits: z_lehinsun (~lehinsun@188.113.178.220) (Ping timeout: 256 seconds)
[21:41:20] *** Joins: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5)
[21:41:58] *** Quits: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5) (Read error: Connection reset by peer)
[21:42:36] *** Joins: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5)
[21:45:52] <biberu> FancyWhereClauseBuilder it is
[21:47:46] <azazul> byy the way - there are no plans for "generics" in foreseeable future, right?
[21:52:06] *** Joins: thiras (~thiras@user/thiras)
[21:53:10] *** Quits: amcsi (~amcsi@1F2E381A.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[22:06:21] *** Joins: mooz (~none@23.254.112.158)
[22:14:47] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[22:15:59] *** Quits: darkstardev13 (~darkstard@50.39.114.152) (Ping timeout: 264 seconds)
[22:26:26] *** Quits: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5) (Read error: Connection reset by peer)
[22:27:03] *** Joins: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5)
[22:27:34] <__adrian> https://php-rfc-watch.beberlei.de/
[22:29:43] <__adrian> huh. i actually like this approach. https://wiki.php.net/rfc/first_class_callable_syntax
[22:33:54] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[22:36:35] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[22:39:13] *** Quits: deksar (~deksar@user/deksar) (Quit: Mundus scena, vita transitus; venisti, vidisti, abiisti.)
[22:39:34] *** Joins: deksar (~deksar@user/deksar)
[22:43:36] *** Quits: ge (~g@37.214.42.244) (Remote host closed the connection)
[22:44:37] *** Joins: sakhd__ (~lehinsun@188.113.178.220)
[22:47:23] *** Quits: z_lehinsun_ (~lehinsun@188.244.142.69) (Ping timeout: 268 seconds)
[23:00:28] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[23:25:08] *** Joins: wovixo (~wovixo@128.104.205.49)
[23:35:01] <AnrDaemon> The approach is sound, but I recall I've had issues with fromCallable() in my current project.
[23:35:11] <AnrDaemon> Lemme try to dig it up.
[23:35:20] <AnrDaemon> awww, synergy
[23:41:49] <AnrDaemon> No, it seems I've trashed it :/ stupid.
[23:44:58] *** Quits: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5) (Read error: Connection reset by peer)
[23:45:36] *** Joins: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5)
[23:46:24] *** Joins: luigibu (~luigibu@80.30.201.209)
[23:55:50] *** Quits: onichomp (~onichomp@2806:264:4404:80fd:508c:2162:81be:15d5) (Ping timeout: 268 seconds)
