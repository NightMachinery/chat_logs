[00:03:34] <Alipha> Minvera: yes
[00:05:07] <rpav> but also not if it's -0
[00:05:51] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[00:06:24] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[00:08:27] <paule32> rpav: can you check this;  https://godbolt.org/z/TvzEKW7bs
[00:08:29] <paule32> thx
[00:09:32] <rpav> i feel like way too much is going on there, what's with class tr
[00:10:18] <rpav> i'm not sure why you would go to all that trouble when template syntax is worse
[00:10:36] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 240 seconds)
[00:10:51] <rpav> const auto&& tr = Translations.at(LANG); and go or something
[00:11:09] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b13c:cfe9:4c84:105a)
[00:11:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:90d4:1750:f22d:5ef2) (Ping timeout: 250 seconds)
[00:14:49] <Minvera> thanks Alipha
[00:15:12] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[00:16:11] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[00:16:23] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b13c:cfe9:4c84:105a) (Ping timeout: 250 seconds)
[00:18:16] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:342c:4ea2:4826:ecb)
[00:18:31] *** Joins: magla (~gelignite@55d450ea.access.ecotel.net)
[00:19:21] *** Joins: seninha (~seninha@user/seninha)
[00:19:25] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 240 seconds)
[00:19:33] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:21:36] *** Quits: notevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[00:21:57] *** Joins: notevil (~notevil@user/notevil)
[00:24:37] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:342c:4ea2:4826:ecb) (Ping timeout: 240 seconds)
[00:30:31] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[00:33:23] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[00:33:35] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:1c12:bb21:1c32:53b8)
[00:35:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:89f3:aed9:3683:7eb2)
[00:37:39] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[00:38:35] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:1c12:bb21:1c32:53b8) (Ping timeout: 260 seconds)
[00:39:54] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:514b:b491:478b:bf51)
[00:40:29] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 252 seconds)
[00:40:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:40:41] *** Joins: ivii (~ivan@user/ivii)
[00:41:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:89f3:aed9:3683:7eb2) (Ping timeout: 260 seconds)
[00:43:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:48:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:49:07] *** Joins: filename (~kilitary@188.242.105.134)
[00:51:35] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[00:54:10] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[00:57:01] *** Quits: magla (~gelignite@55d450ea.access.ecotel.net) (Quit: Stay safe!)
[01:08:28] *** PJBoy is now known as Guest1669
[01:08:28] *** Quits: Guest1669 (~PJBoy@user/pjboy) (Killed (strontium.libera.chat (Nickname regained by services)))
[01:08:31] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:10:21] <rpav> ðŸ¤” you can't really predeclare a using alias can you
[01:10:51] <rpav> like `class C; .. using C = SomeOtherClass;` is an error, even though C is still a class
[01:11:26] <paule32> can you give me a hint
[01:11:38] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:11:41] *** Quits: letto (~letto@188.27.114.171) (Ping timeout: 246 seconds)
[01:13:24] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[01:14:03] *** Quits: proller (~p@2a02:6b8:b081:b587::1:26) (Ping timeout: 260 seconds)
[01:14:21] <rpav> paule32: dodongo dislikes smoke
[01:14:32] <paule32> wut
[01:15:50] <rpav> maybe be more specific about what the hint should hint at
[01:16:18] <paule32> ah, why no output
[01:16:28] <paule32> i expect a message
[01:16:47] <rpav> i don't know, the code is too complicated .. write better code and it'll probably be easier to get the rseults you want
[01:16:56] <rpav> i just take one look at that and am like "why"
[01:17:42] <paule32> https://godbolt.org/z/8dKTK95f5
[01:18:11] <paule32> i get undefined reference
[01:18:16] <paule32> error
[01:18:59] *** Quits: robod34 (Username@79.115.134.214) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:22:16] <johnny> i've done this often enough that it's kinda funny when you run into an warning for the first time. "Mixture of designated and non-designated initializers in the same initializer list is a C99 extensionclang(-Wc99-designator)"
[01:22:34] <johnny> i typed so fast and forgot the .
[01:24:24] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[01:25:21] <rpav> paule32: https://godbolt.org/z/P7vfPPf17
[01:25:42] *** Quits: paul424 (~tom@ip-5-172-233-226.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:26:31] <rpav> though it's fairly criminal `tr` needs defined as such at all and there isn't a good optional value access to map types
[01:29:25] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:30:54] *** Quits: Minvera (~Minvera@user/Minvera) (Remote host closed the connection)
[01:32:48] *** Tobbi__ is now known as Tobbi
[01:41:01] *** Quits: vnf_ (~vnf@85.175.252.98) (Quit: Leaving)
[01:45:07] *** Joins: vnf (~vnf@85.175.252.98)
[01:48:23] *** Quits: vnf (~vnf@85.175.252.98) (Client Quit)
[01:50:49] *** lkor is now known as lionkor
[01:52:20] *** Quits: andreasbuhr (~quassel@p549dbbe6.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:54:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 245 seconds)
[02:09:45] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[02:10:52] *** Joins: vnf (~vnf@85.175.252.98)
[02:11:21] *** Quits: vnf (~vnf@85.175.252.98) (Read error: Connection reset by peer)
[02:14:12] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 240 seconds)
[02:16:28] *** Joins: nq (~nq@82.79.141.40)
[02:16:54] <paule32> what do this message mean:
[02:16:55] <paule32> error: no match for 'operator<<' (operand types are 'std::ostream' {aka 'std::basic_ostream<char>'} and 'StringMap' {aka 'std::unordered_map<LocalesMap::Value, std::basic_string_view<char> >'})
[02:16:56] <paule32> ?
[02:17:16] <paule32> i did declare:
[02:17:18] <paule32> friend std::ostream& operator<<(std::ostream& os, StringMap sm)
[02:17:35] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a871)
[02:29:40] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c)
[02:38:19] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[02:40:26] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:514b:b491:478b:bf51) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:40:28] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225) (Ping timeout: 260 seconds)
[02:40:50] *** Joins: AmR (~AmREiSa@156.207.152.245)
[02:42:22] *** Joins: vnf (~vnf@85.175.252.98)
[02:44:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:59] *** ChanServ sets mode: +v npaperbot
[02:50:29] <RandomReader> StringMap isn't your type, it's an alias for a stdlib type .. so it will never be found as a friend
[02:51:14] <RandomReader> friend only works for the same type
[02:51:32] <RandomReader> (to find as an overload, I mean)
[02:52:53] <Alipha> You'd have to define operator<< as a global function, put it in namespace std {}, or put it in the namespace that you want to use it in. And I'll repeat the warning I gave yesterday: overloading operator<< for std types is technically not allowed, but will most likely be fine.
[02:55:38] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[02:59:01] *** Quits: vnf (~vnf@85.175.252.98) (Quit: Leaving)
[03:14:12] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:94fe:3c2b:a7d3:5d92) (Ping timeout: 240 seconds)
[03:16:56] *** Quits: AmR (~AmREiSa@156.207.152.245) (Quit: Konversation terminated!)
[03:38:00] *** RazielXYZ is now known as Raziel
[03:56:20] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:09:39] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:12:36] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[04:19:59] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[04:24:27] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:28:27] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[04:32:26] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[04:34:16] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[04:34:52] <paule32> https://godbolt.org/z/Tco9nchKf
[04:35:03] <paule32> how can i ostream a message
[04:35:04] <paule32> ?
[04:42:00] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a871) (Ping timeout: 250 seconds)
[04:48:23] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:01:03] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 260 seconds)
[05:03:03] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[05:11:53] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:18:37] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:21:19] *** Joins: filename (~kilitary@82.148.25.66)
[05:30:54] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:46:46] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[05:52:23] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[06:02:27] *** Quits: Donno (~donno@58.84.206.182) (Ping timeout: 260 seconds)
[06:08:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:09:20] *** Joins: Donno (~donno@58.84.206.182)
[06:10:51] *** Joins: proller (~p@80.240.216.69)
[06:20:28] *** Joins: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[06:22:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[06:22:59] *** Quits: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:32:08] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:36:04] *** Joins: proller (~p@2a02:6b8:b081:a412::1:1e)
[06:44:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:56] *** ChanServ sets mode: +v npaperbot
[06:58:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:04:15] *** Joins: adeliktas4 (~adeliktas@i59F521DF.versanet.de)
[07:06:23] *** Quits: adeliktas (~adeliktas@i59F52D62.versanet.de) (Ping timeout: 260 seconds)
[07:06:23] *** adeliktas4 is now known as adeliktas
[07:21:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Quit: Konversation terminated!)
[07:26:57] *** Joins: _filename (~kilitary@188.242.105.134)
[07:29:13] *** Quits: filename (~kilitary@82.148.25.66) (Ping timeout: 260 seconds)
[07:41:07] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[07:42:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:56:32] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:59:05] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 246 seconds)
[08:01:08] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[08:03:09] *** Joins: v4mp (~v4mp@user/v4mp)
[08:04:43] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[08:08:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:10:13] *** Quits: v4mp (~v4mp@user/v4mp) ()
[08:19:11] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 256 seconds)
[08:20:04] *** _filename is now known as filename
[08:22:07] *** Joins: letto (~letto@188.27.114.171)
[08:26:11] *** Quits: jsbach (~jsbach@2a01:c22:a5a8:3a00:66bd:f474:9df9:3d84) (Ping timeout: 245 seconds)
[08:30:01] *** Joins: rev1nchn (~rev1nchn@user/rev1nchn)
[08:38:52] *** Joins: jsbach (~jsbach@2a01:c22:ac02:c800:d9e3:236e:a0a1:8b20)
[08:46:01] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:48:26] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 246 seconds)
[08:49:08] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 246 seconds)
[08:52:53] <Gamah> can make be configured to do multiple targets?
[08:53:00] <Gamah> like g++ and mingw-w64
[09:15:07] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:18:53] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[09:18:56] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Quit: Konversation terminated!)
[09:29:34] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:36:23] *** Quits: rev1nchn (~rev1nchn@user/rev1nchn) (Ping timeout: 246 seconds)
[09:44:04] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[09:45:29] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[09:46:58] *** Joins: filename (~kilitary@188.242.105.134)
[09:54:26] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Ping timeout: 250 seconds)
[09:58:32] *** Quits: emerent (~quassel@p200300cd5743c3e8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:58:53] *** Joins: emerent (~quassel@p200300cd5743c3e5ba27ebfffed28a59.dip0.t-ipconnect.de)
[10:21:16] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225)
[10:25:56] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:26:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:27:30] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[10:32:21] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:33:32] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 260 seconds)
[10:44:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:58] *** ChanServ sets mode: +v npaperbot
[10:48:07] <ville> yes
[10:51:38] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[10:51:43] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:01:14] *** Joins: bpalmer (~user@user/bpalmer)
[11:02:38] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[11:05:28] *** Quits: filename (~kilitary@188.242.105.134) (Remote host closed the connection)
[11:06:45] *** Joins: zmt00 (~zmt00@user/zmt00)
[11:11:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c0ae:3c7:95b4:d49d)
[11:18:38] *** Joins: ville (~ville@user/ville)
[11:36:15] *** Joins: vnf (~vnf@46.159.35.178)
[11:46:39] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[11:48:05] *** Joins: filename (~kilitary@188.242.105.134)
[11:48:31] *** Joins: zmt00 (~zmt00@user/zmt00)
[11:51:23] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:53:41] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[11:53:51] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[11:54:12] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:56:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[12:05:57] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Quit: Lost terminal)
[12:06:38] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:12:55] *** Joins: robod34 (Username@79.115.134.214)
[12:20:03] *** Joins: meator (~meator@user/meator)
[12:27:25] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[12:36:03] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[12:40:50] *** Quits: meator (~meator@user/meator) (Ping timeout: 246 seconds)
[13:13:00] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c0ae:3c7:95b4:d49d) (Ping timeout: 240 seconds)
[13:17:02] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e)
[13:17:02] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e) (Changing host)
[13:17:02] *** Joins: skapata (~Skapata@user/skapata)
[13:18:50] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3523:4963:ba83:5394)
[13:19:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:27:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3523:4963:ba83:5394) (Ping timeout: 240 seconds)
[13:27:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:30:23] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[13:33:52] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[13:40:42] *** Joins: meator (~meator@user/meator)
[13:48:30] <antto> ville, what was that video you linked yesterday? i've been offline here so i don't have it in the logs
[13:48:37] *** Joins: ivii (~ivan@user/ivii)
[13:48:59] <antto> something something holmes?
[13:53:32] *** Quits: vnf (~vnf@46.159.35.178) (Ping timeout: 272 seconds)
[13:56:29] *** Joins: callq (~callq@157.41.181.204)
[13:57:02] <TinoDidriksen> antto, https://i.pjj.cc/lb/logs/%23c++-general/
[13:59:59] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[14:00:08] *** Quits: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Quit: Leaving)
[14:01:55] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:03:49] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[14:04:04] <smallville7123_> is a union the equivilant of automatic casts?
[14:04:45] <smallville7123_> for example     `return (jfloat) (int) (long) v;`
[14:05:18] <smallville7123_> vs union { int i; float f; } u; u.i = (long)v; return (jfloat)u.f;
[14:05:42] <smallville7123_> would both be equivilant of eachother ?
[14:07:46] <TinoDidriksen> No, using a union in that way is UB.
[14:08:14] <TinoDidriksen> But yes, that is a common way to use a union, once you've ensured the types are the same width.
[14:11:43] <smallville7123_> oh
[14:11:55] <bpalmer> smallville7123_: consider union { char a[1024]; int b; }
[14:12:00] <smallville7123_> so these would be UB?
[14:12:02] <smallville7123_> https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/share/native/libjava/Float.c#L35
[14:12:18] <smallville7123_> even though they are part of the OpenJDK ?
[14:12:44] <smallville7123_> https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/share/native/libjava/Float.c#L31  *
[14:13:25] <smallville7123_> or would they still do what they are intended to do even tho it is UB ?
[14:13:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:14:04] <TinoDidriksen> I presume OpenJDK has a build check that sizeof(int) == sizeof(float) and thus know it'll work.
[14:14:55] <TinoDidriksen> Also, a union cast is a reinterpret_cast, not a static_cast that would result from the () in this case.
[14:14:55] <bpalmer> smallville7123_: In C99, that is implementation defined, not undefined.
[14:15:11] <smallville7123_> alright
[14:15:26] <TinoDidriksen> Oh right, and that's C which has different rules.
[14:16:03] *** Joins: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[14:19:05] *** Quits: callq (~callq@157.41.181.204) (Quit: callq)
[14:19:11] <bpalmer> Looks like C11 is more explicit about it: "If the member used to read the contents of a union object is not the same as the member last used to store a value in the object, the appropriate part of the object representation of the value is reinterpreted as an object representation in the new type as described in 6.2.6 (a process sometimes called â€˜â€˜type punningâ€™â€™). This might be a trap
[14:19:11] <bpalmer> representation."
[14:19:58] <bpalmer> verbiage taken from, and discussion of how this is dealt with in C++ at, https://stackoverflow.com/questions/11373203/accessing-inactive-union-member-and-undefined-behavior
[14:21:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:21:57] <meator> Hello. I'm trying to refactor someone else's code and I have stumbled upon an interesting class. The class represents a list of items. It generates them in the constructor and stores them in a private class member std::vector<std::string>. The class then defines begin() and end(), which just call begin() and end() of the private vector. The class doesn't provide any additional public functions.
[14:21:59] <meator> This class is basically just a std::vector<std::string>. My question is: Should this class really be a class? Wouldn't a standalone function that would generate the items and return std::vector<std::string> be better? You could say that the class has the benefit of information hiding, who knows where do the iterators from begin() and end() come from, but the code just treats it as a vector, so I think information hiding doesn't provide benefits here.
[14:22:03] <meator> When is inheritance of standard containers appropriate?
[14:22:21] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:23:21] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:23:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:25:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:25:34] *** Joins: callq (~callq@2409:4062:4e16:b59e:d4fa:180e:f8a8:43d6)
[14:28:31] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[14:30:22] <TinoDidriksen> meator, sounds like it should just be a typedef or using alias.
[14:31:47] <TinoDidriksen> Inheritance just for strong typing is also fine, but whether it makes sense depends on how many other kinds of vector<string> are used in the codebase.
[14:32:58] <bpalmer> It doesn't sound like this uses inheritance at all, just a class member; I would almost never use a typedef/using for something I could concretely conceptualize.
[14:34:12] <smallville7123_> is it only UB if the following is ture?
[14:34:15] <smallville7123_> true*
[14:34:16] <smallville7123_>  there are 64 bit platforms which are ILP64 , where int is 8 bytes but float is still 4 bytes. There are also 16 bit platforms where int is 2 bytes and float is still 4 bytes.
[14:37:02] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 246 seconds)
[14:37:12] <bpalmer> smallville7123_: no, although I would say it's at least likely to only fail to work on that sort of platform.
[14:37:47] <smallville7123_> is it still UB even if the size of int and float are the same?
[14:37:58] <smallville7123_> like in C#
[14:38:20] <bpalmer> in C++, using unions for type punning is almost always undefined behavior (there are certain exceptions for structs with common preambles)
[14:38:22] <meator> As I said, I don't think that hiding the vector would be that beneficial.
[14:39:19] <smallville7123_> bpalmer: but not in C ?
[14:39:37] <smallville7123_> or would it also be UB in C
[14:39:43] <smallville7123_> just as it is in C++
[14:39:58] <bpalmer> smallville7123_: correct. I quoted the text from the C11 standard dealing with type punning.
[14:40:26] <bpalmer> in C89, it's implementation defined; in C11, it's got defined behavior, but it may lead to trap representations. On the programmer's head be it.
[14:40:38] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[14:40:47] <smallville7123_> hmm ok
[14:41:20] <smallville7123_> so in https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libjava/Float.c#L31 would it be defined behaviour ?
[14:41:24] *** Quits: callq (~callq@2409:4062:4e16:b59e:d4fa:180e:f8a8:43d6) (Quit: callq)
[14:41:49] *** gentooclimax is now known as climax
[14:42:02] <bpalmer> yes, but using the float might (emphasis on might) trigger undefined behavior. Using a trap representation as a value of that type is UB
[14:42:21] <bpalmer> smallville7123_: and with the caveats about size that TinoDidriksen mentioned
[14:42:41] <smallville7123_> hmmm :/
[14:43:04] <ville> antto: it was odin holmes, well it was more about who the dude was than the particular video
[14:43:36] <antto> yeah, i'm watching another one of his now
[14:44:12] <bpalmer> smallville7123_: the defined way to do this in C++ would involve memcpy
[14:44:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:57] *** ChanServ sets mode: +v npaperbot
[14:45:02] <TinoDidriksen> It should be noted that no widely used CPUs have trap representations. Not sure there are any CPUs still in production that have them.
[14:46:21] *** Joins: vnf (~vnf@188.162.143.23)
[14:47:30] <cbreak> I think you can make some float operations trap on NaN, which does have many representations
[14:47:38] <cbreak> but I don't think that works if you read it via memcpy
[14:47:42] <bpalmer> 'A good example of a trap representation (also the only thing that qualifies as a hardware-level trap representation on any CPU you are likely to encounter) is a signaling NaN in a floating-point type. C99 Annex F (section 2.1) explicitly leaves the behavior of signaling NaNs undefined, even though IEC 60559 specifies their behavior in detail.'
[14:47:50] *** Quits: vnf (~vnf@188.162.143.23) (Remote host closed the connection)
[14:48:04] <bpalmer> I've seen that statement before but never followed up investigating signalling NaNs
[14:48:10] *** Quits: suki (~jimery@116.30.222.11) (Quit: WeeChat 3.0)
[14:48:32] <smallville7123_> bpalmer: alright
[14:49:19] <cbreak> I thin man fesetenv has some docs on how to enable those "exceptions"
[14:49:25] <bpalmer> smallville7123_: at any rate, take a look at https://en.cppreference.com/w/cpp/string/byte/memcpy for an example that reinterprets between an int64_t and a double's
[14:49:41] <cbreak> but I think they only happen when a NaN is created by some float op, not when it is read from memory
[14:50:41] <bpalmer> since most floating point operations that involve NaN will yield NaN, probably the next float op you do with the value would trigger something.
[14:51:19] <bpalmer> or at least has a chance to.
[14:51:23] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[14:51:44] <TinoDidriksen> npaperbot, search union cast
[14:51:44] <npaperbot> Nothing found for: union, cast
[14:54:32] <bpalmer> smallville7123_: as for UB, however, the scary part, imo, about UB isn't usually the particular thing that it does if it evaluates the line (nasal demons notwithstanding) but what the optimizer can do when it decides a line can be considered unreachable if it triggers UB
[14:54:47] *** Joins: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de)
[14:55:58] <cbreak> it's not that it can be considered unreachable
[14:56:08] <cbreak> the optimizer can consider UB itself impossible
[14:56:59] <bpalmer> Sure. float f(bool b) { union { float f; int i; } u; if (b) { u.i = 1; } else { u.f = 2.0; } return u.f; }  <-- it is fully legal for this function to turn into the equivalent of 'return 2.0;' and ignore b.
[14:57:33] *** Quits: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:58:01] <smallville7123_> alright :)
[14:58:03] <cbreak> bpalmer: yeah, of course
[14:58:09] <smallville7123_> https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Float.java#L846
[14:58:11] <bpalmer> in a more complicated function, that can lead to real confusion.
[14:58:26] <cbreak> bpalmer: but that case is intuitive anyway
[14:58:58] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 260 seconds)
[14:58:59] <cbreak> f never contains anything other than 2, so there's no point reading from it
[14:59:22] <smallville7123_> can i use this to extract the sign, exponent, and the mantissa ?
[14:59:27] <cbreak> for example: auto x = *p; if (!p) dosomething(); // here, there's no point ever calling dosomething(), because p is never a nullptr
[14:59:41] <cbreak> smallville7123_: if you want to extract sign and mantissa, use the fp functions
[14:59:50] <bpalmer> yeah, that's a better example.
[14:59:59] <smallville7123_> assuming IEEE 754
[15:00:11] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:6576:47b0:4677:7229)
[15:00:56] <smallville7123_> in which,         int s = ((bits >> 31) == 0) ? 1 : -1;       int e = ((bits >> 23) & 0xff);          int m = (e == 0) ? (bits & 0x7fffff) << 1 : (bits & 0x7fffff) | 0x800000;
[15:01:07] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: The Lounge - https://thelounge.chat)
[15:01:19] <cbreak> smallville7123_: why assuming that?
[15:01:30] <cbreak> smallville7123_: how about you call https://en.cppreference.com/w/cpp/numeric/math/frexp ?
[15:01:51] <smallville7123_> cus the Java docs state that in the documentation for intBitsToFloat
[15:02:19] <smallville7123_> would it also be appliable elsewhere where IEEE 754 is implemented?
[15:02:56] <cbreak> smallville7123_: java?
[15:03:07] <cbreak> who cares about that thing? :/
[15:03:11] <cbreak> in c++, you can call these functions
[15:03:14] <smallville7123_> eg, C, C++, C#, and other languages that support IEEE 754 and bitwise operations
[15:03:26] <cbreak> they will be available for you to decompose float numbers on all platforms where c++ runs
[15:04:08] <TinoDidriksen> Assuming IEEE 754, then yes those operations must hold.
[15:04:22] <smallville7123_> ok :)
[15:04:38] <TinoDidriksen> But IEEE 754 doesn't say anything about integer width, so using plain "int" is dangerous. Use an int with the same width as the float.
[15:05:04] <smallville7123_> TinoDidriksen: assuming the size of int and float are the same, it will work?
[15:05:27] <TinoDidriksen> Yes
[15:05:36] <smallville7123_> ok :)
[15:06:46] *** Joins: xkuru (~xkuru@user/xkuru)
[15:06:49] <smallville7123_> does this `*(int*)&value`  hold true for the following statement?
[15:06:50] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[15:07:06] <smallville7123_> "  Unlike the {@code floatToIntBits}          * method, {@code floatToRawIntBits} does not collapse all the          * bit patterns encoding a NaN to a single "canonical"          * NaN value."
[15:07:52] <smallville7123_> or would a different statement/expression thing need to be used in order to hold true to the above
[15:08:23] <cbreak> there are many different NaN values.
[15:08:43] <cbreak> why would you assume that pretending the float is an int will give you a single unique int?
[15:08:50] <cbreak> of course it won't collapse the values
[15:09:15] <cbreak> also, you fail to account for endianness in your code
[15:09:43] <cbreak> int endianness and float endianness is not always the same
[15:11:13] <TinoDidriksen> Are there any CPUs where endianness differs? I know it's technically allowed, but has it ever happened?
[15:11:17] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Client Quit)
[15:12:15] <cbreak> what's the endianness of float on x86?
[15:12:30] <TinoDidriksen> Same as integers.
[15:14:59] <cbreak> hmm... I've never checked... the wiki says: " There are ARM processors that have half little-endian, half big-endian floating-point representation for double-precision numbers; both 32-bit words are stored in little-endian like integer registers, but the most significant one first."
[15:18:27] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[15:18:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[15:24:09] <smallville7123_> https://stackoverflow.com/a/58214029/8680581 does this apply to C and C++ too ?
[15:24:22] <smallville7123_> "1234 as a float is 0x449A4000" and "1234 as an int is 0x000004D2"
[15:24:35] <TinoDidriksen> Yes
[15:25:04] <smallville7123_> eg, 32 bit float cast to 32 bit int will convert it to its NUMARICAL representation and not to its BINARY representation ?
[15:25:11] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[15:25:41] <TinoDidriksen> static_cast will convert the value, reinterpret_cast will convert the raw memory.
[15:25:54] <TinoDidriksen> And union cast = reinterpret_cast
[15:26:15] <smallville7123_> is *(int*)&value equivilant to a union cast
[15:26:35] <TinoDidriksen> Yes, that's reinterpreting the bits as something else.
[15:26:43] *** Quits: jsbach (~jsbach@2a01:c22:ac02:c800:d9e3:236e:a0a1:8b20) (Remote host closed the connection)
[15:26:44] <smallville7123_> oh ok :)
[15:27:07] *** Quits: Donno (~donno@58.84.206.182) (Ping timeout: 260 seconds)
[15:28:51] <TinoDidriksen> geordi, -w { float x = 1234.0; cout << hex << *(int*)(&x); }
[15:28:52] <geordi> 449a4000
[15:31:39] *** Joins: jsbach (~jsbach@2a01:c22:ac02:c800:8de3:616e:b39e:c852)
[15:33:45] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a80e)
[15:38:30] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[15:39:47] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[15:41:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[15:43:01] *** climax is now known as gentooclimax
[15:43:12] *** Joins: vnf (~vnf@85.174.194.51)
[15:48:54] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[15:49:26] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[15:52:17] *** Quits: filename (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[15:53:05] *** Joins: paule32_ (~paul@user/paule32)
[15:53:09] <paule32_> hello
[15:53:29] <paule32_> https://godbolt.org/z/EeaqEss5j
[15:53:50] <paule32_> can i output a information message per pre-processor?
[15:54:22] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[15:54:30] <paule32_> i have try #elif but then the command below is invalid, i use #elseif, then no error, but no output, too
[15:55:19] <paule32_> somewide deeper in code, i use #elif, for select the language string map, and this would be work - it seems so
[15:55:47] <paule32_> general question: godbolt eats up pre-processor output ?
[15:56:16] *** Quits: paule32 (~paul@user/paule32) (Quit: Leaving)
[15:56:32] <paule32_> so, here, i am
[15:56:37] *** paule32_ is now known as paule32
[15:56:56] <TinoDidriksen> That's the wrong way to do l10n.
[15:57:28] <paule32> you mean the #if pre-processor commands ?
[15:57:32] *** gentooclimax is now known as climax
[15:57:51] <TinoDidriksen> Just have identifiers in your code, then load a language-specific database with identifiers->string mappings.
[15:58:25] <TinoDidriksen> Keep the strings out of the code, so that they can be changed and updated without compilation.
[15:58:38] <paule32> okay, also .mo files ?
[15:58:45] <TinoDidriksen> .mo files are fine.
[15:58:51] <paule32> okay
[15:59:12] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[15:59:25] <TinoDidriksen> But building a binary per language is just no longer done.
[16:00:12] <TinoDidriksen> Produce a single binary capable of loading infinite languages. At most, hardcode the language identifiers, but even that can be dynamic from the database.
[16:00:47] <paule32> right
[16:02:22] *** climax is now known as gentooclimax
[16:02:46] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:02:59] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[16:03:11] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:05:25] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[16:08:14] <meator> Is converting the class to a function reasonable in this case? Would it improve the code?
[16:08:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c) (Quit: Quit)
[16:10:03] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 260 seconds)
[16:15:10] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[16:15:43] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:20:26] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 252 seconds)
[16:21:10] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:21:50] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[16:22:08] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:22:46] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[16:35:21] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[16:35:49] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[16:36:03] *** gentooclimax is now known as climax
[16:37:49] *** climax is now known as gentooclimax
[16:40:35] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:45:43] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 260 seconds)
[16:45:50] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:46:39] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[16:46:51] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:49:25] *** Quits: kevr` (~kevr@user/kevr) (Remote host closed the connection)
[16:49:46] *** Joins: kevr (~kevr@user/kevr)
[16:57:09] *** Joins: Roughy (~mdaw45ns@user/roughy)
[17:07:02] <smallville7123_> wll  *(float*)&int_bits  and  *(float*)&uint_bits     result in the same float value?
[17:07:14] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[17:07:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[17:09:04] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a80e) (Ping timeout: 250 seconds)
[17:10:21] *** gentooclimax is now known as climax
[17:10:38] <LordKalma> smallville7123_, if you have c++20, use std::bit_cast
[17:10:53] <LordKalma> but, diregarding that that code is UB
[17:10:53] <LordKalma> yeah
[17:12:45] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:14:17] <smallville7123_> ok :)
[17:14:33] <bpalmer> oh, I forgot about bit_cast. It's basically the memcpy solution mentioned earlier.
[17:14:42] <bpalmer> Or, rather, it could be.
[17:18:41] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d48:a76e:6719:453a)
[17:19:05] *** Joins: stefanos82 (~stefanos8@31-14-125.netrun.cytanet.com.cy)
[17:19:14] *** climax is now known as gentooclimax
[17:20:31] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[17:20:52] *** Joins: plastico (~plastico@neomutt/plastico)
[17:22:08] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[17:27:18] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[17:37:19] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a80e)
[17:37:21] *** Joins: sentry1 (~senry@c-73-149-233-242.hsd1.ma.comcast.net)
[17:37:59] *** Parts: rpath (~rpath@gateway/tor-sasl/rpath) (Leaving)
[17:39:01] *** gentooclimax is now known as climax
[17:42:02] <sentry1> in case someone needs a one time job https://github.com/marcovelon/tdesktop/issues/2 (medium difficulty C++)
[17:42:09] *** Quits: sentry1 (~senry@c-73-149-233-242.hsd1.ma.comcast.net) (Quit: Leaving)
[18:01:53] *** climax is now known as gentooclimax
[18:01:55] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:04:24] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[18:04:58] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:09:42] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[18:20:21] *** Joins: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it)
[18:26:01] *** Joins: Mat_42 (~mat_42@178.238.164.37)
[18:26:12] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d48:a76e:6719:453a) (Ping timeout: 240 seconds)
[18:33:45] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[18:34:05] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[18:34:43] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[18:36:16] *** Quits: Mat_42 (~mat_42@178.238.164.37) (Remote host closed the connection)
[18:36:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:39:22] *** Joins: RoKenn (~RoKenn@2001:a61:35f0:c501:a927:9fa9:dfb9:e50c)
[18:39:23] *** Quits: RoKenn (~RoKenn@2001:a61:35f0:c501:a927:9fa9:dfb9:e50c) (Changing host)
[18:39:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
[18:40:56] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[18:41:15] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[18:42:12] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:44:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:58] *** ChanServ sets mode: +v npaperbot
[18:46:34] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a80e) (Ping timeout: 250 seconds)
[18:52:38] *** Joins: pulse (~pulse@user/pulse)
[18:56:09] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[18:56:19] *** Joins: ville (~ville@user/ville)
[18:56:42] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:57:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[18:58:50] *** Quits: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[19:01:26] *** Joins: filename (~kilitary@188.242.105.134)
[19:01:36] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 252 seconds)
[19:06:19] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 256 seconds)
[19:12:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:16:05] *** Joins: paul424 (~tom@ip-5-172-238-248.multi.internet.cyfrowypolsat.pl)
[19:20:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:21:28] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[19:24:45] *** Quits: filename (~kilitary@188.242.105.134) (Quit: joined libera)
[19:26:44] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[19:34:00] *** Joins: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it)
[19:34:32] *** Parts: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it) ()
[19:38:03] *** Quits: jsbach (~jsbach@2a01:c22:ac02:c800:8de3:616e:b39e:c852) (Ping timeout: 256 seconds)
[19:46:09] *** Joins: soman (~soman@83.139.179.68)
[19:47:03] *** Quits: meator (~meator@user/meator) (Ping timeout: 260 seconds)
[19:49:30] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[19:49:49] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[19:50:02] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:01:21] *** Quits: stefanos82 (~stefanos8@31-14-125.netrun.cytanet.com.cy) (Quit: Leaving)
[20:14:25] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[20:14:58] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:19:31] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 245 seconds)
[20:20:32] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:24:19] *** Joins: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de)
[20:30:27] *** Quits: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:33:24] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:33:35] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[20:45:45] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:90fc:42e8:e764:89e0)
[20:45:46] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:90fc:42e8:e764:89e0) (Changing host)
[20:45:46] *** Joins: skapata (~Skapata@user/skapata)
[20:48:16] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:48:30] *** Joins: xkuru (~xkuru@user/xkuru)
[20:49:39] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:50:35] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[20:50:36] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:50:47] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:52:10] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[20:52:20] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[20:53:05] *** Joins: letto (~letto@188.27.114.171)
[20:55:08] *** Joins: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de)
[20:55:39] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[21:01:20] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[21:01:54] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[21:06:33] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 250 seconds)
[21:09:10] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[21:10:19] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Client Quit)
[21:27:48] *** great_taste is now known as greater_taste
[21:31:39] *** Joins: _filename (~kilitary@188.242.105.134)
[21:33:32] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 246 seconds)
[21:34:33] *** Joins: Snyp (~Snyp@49.207.197.152)
[21:37:02] *** Quits: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:38:22] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[21:51:17] *** Joins: KombuchaKip (~kip@192.252.230.5)
[22:14:30] *** Joins: troller (~p@80.240.216.69)
[22:18:43] *** Quits: sonic (~sonic@user/sonic) (Read error: Connection reset by peer)
[22:22:00] *** Quits: pulse (~pulse@user/pulse) (Quit: { indiedevs.net })
[22:31:01] *** Joins: pulse (~pulse@user/pulse)
[22:31:38] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[22:37:23] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:6576:47b0:4677:7229) (Ping timeout: 260 seconds)
[22:38:34] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e14b:b35c:9d30:4a6c)
[22:39:06] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:44:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:59] *** ChanServ sets mode: +v npaperbot
[22:45:54] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[22:57:50] *** Inline__ is now known as Inline
[23:02:07] *** Quits: RoKenn (~RoKenn@user/rokenn) (Ping timeout: 260 seconds)
[23:02:49] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:12:15] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: Textual IRC Client: www.textualapp.com)
[23:12:32] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:13:21] *** Quits: paul424 (~tom@ip-5-172-238-248.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:21:13] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Ping timeout: 260 seconds)
[23:31:03] *** Joins: jsbach (~jsbach@2a01:c22:ac02:c800:b759:52a1:6b80:928b)
[23:34:44] *** Quits: soman (~soman@83.139.179.68) (Quit: Client closed)
[23:47:44] *** Joins: AmR (~AmREiSa@156.207.152.245)
[23:48:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[23:56:29] *** Joins: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be)
