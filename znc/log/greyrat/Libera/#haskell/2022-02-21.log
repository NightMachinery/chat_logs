[00:00:23] *** Joins: jao (~jao@static-68-235-44-45.cust.tzulo.com)
[00:01:44] *** Quits: deadmarshal (~deadmarsh@95.38.116.229) (Ping timeout: 272 seconds)
[00:02:43] *** Quits: mcglk (~mcglk@131.191.49.120) (Quit: (seeya))
[00:03:14] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:04:25] *** Joins: EDP1035 (~EDP1035@2607:fb90:2164:7428:e55c:6036:7494:489e)
[00:04:46] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Ping timeout: 250 seconds)
[00:05:07] *** Quits: EDP1035 (~EDP1035@2607:fb90:2164:7428:e55c:6036:7494:489e) (Client Quit)
[00:05:26] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[00:06:25] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[00:09:21] *** Joins: michalz (~michalz@185.246.204.61)
[00:09:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[00:14:25] <FernandoChu[m]> `StateT s m a` is a functor as long as `m` is a functor, similarly with monads. If `m` is an Applicative does that implies that `StateT s m a` is Applicative too?
[00:17:02] <jackdk> % :info StateT
[00:17:03] <yahb> jackdk: type role StateT nominal representational nominal; type StateT :: * -> (* -> *) -> * -> *; newtype StateT s m a = StateT {runStateT :: s -> m (a, s)}; -- Defined in `Control.Monad.Trans.State.Lazy'; instance [safe] forall (m :: * -> *) s. (Functor m, MonadPlus m) => Alternative (StateT s m) -- Defined in `Control.Monad.Trans.State.Lazy'; instance [safe] forall (m :: * -> *) s. (Functor m, Monad m) =
[00:17:28] <geekosaur> %% :info StateT
[00:17:28] <yahb> geekosaur: http://qp.mniip.com/y/43
[00:17:34] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[00:17:55] <jackdk> `instance [safe] forall (m :: * -> *) s. (Functor m, Monad m) => Applicative (StateT s m) -- Defined in `Control.Monad.Trans.State.Lazy'` Guess not, but probably for historical reasons.
[00:18:04] <geekosaur> interestingly it seems to require (Functor m, Monad m) which sounds like a holdover from pre-AMP
[00:18:40] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:45bc:2e9e:c6:5360)
[00:18:42] <FernandoChu[m]> yep, that's why I'm wondering if that's just an unnecessary (historic) constraint
[00:19:04] <geekosaur> Monad implies Functor so the extra constraint is pointless, yes
[00:19:17] <geekosaur> the question is whether it should be Application =>
[00:19:21] <geekosaur> erApplicative
[00:19:35] <FernandoChu[m]> not that, I meant Monad implies Applicative too, so wondering if Applicative is enough
[00:19:38] <FernandoChu[m]> yeah that
[00:20:17] <geekosaur> right, but as these constraints predate that too, I think it's just an oversight
[00:20:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Remote host closed the connection)
[00:20:41] <geekosaur> wonder if the infamous next release will fix it
[00:21:30] <geekosaur> (infamous because we've been waiting a couple years for itâ€¦)
[00:22:38] *** Quits: jao (~jao@static-68-235-44-45.cust.tzulo.com) (Ping timeout: 272 seconds)
[00:23:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[00:24:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[00:24:18] *** Joins: Akiva (~Akiva@user/Akiva)
[00:24:22] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:24:22] *** Joins: jao (~jao@static-68-235-44-77.cust.tzulo.com)
[00:26:52] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (Ping timeout: 250 seconds)
[00:27:00] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[00:27:40] *** Joins: barzo (~hd@31.155.65.151)
[00:28:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[00:29:10] *** Joins: mcglk (~mcglk@131.191.49.120)
[00:31:26] *** Joins: pavonia (~user@user/siracusa)
[00:31:32] *** Joins: simplicius (~simplicio@2a02-a45b-3dc8-1-1d3a-6766-2ae7-f393.fixed6.kpn.net)
[00:31:37] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[00:32:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:33:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[00:35:25] <ski> FernandoChu[m] : "If `m` is an Applicative does that implies that `StateT s m a` is Applicative too?" -- no
[00:35:36] *** Joins: alp (~alp@user/alp)
[00:36:04] <FernandoChu[m]> I agree but wondering if there's some way of proving that
[00:36:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[00:37:45] <FernandoChu[m]> also I've been reading the source code for StateT and there's code like `~(a, _) <- runStateT m s`, any ideas what the `~` is? very hard to search for something like that on google
[00:38:17] <geekosaur> lazy pattern match
[00:38:29] <geekosaur> the technical term is "irrefutable pattern match"
[00:38:53] <FernandoChu[m]> I see, thanks
[00:39:15] <ski> `Control.Monad.State.Lazy', i presume
[00:40:28] <jackdk> FernandoChu[m]: attempt to write the instance, and you will find that to implement (<*>), you'll need to plumb an `s` parameter through things, and I'm pretty sure that's going to require bind
[00:40:36] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[00:41:00] <ski> matching on a pattern `~<pat>' succeeds immediately, binding all identifiers bound by `<pat>'. when any of them are forced, the pattern `<pat>' is matched with the scrutinee (which may result in match failure)
[00:41:40] *** Joins: dextaa_ (~dextaa@user/dextaa)
[00:42:59] *** Joins: cynomys (~cynomys@user/cynomys)
[00:43:35] *** Quits: barzo (~hd@31.155.65.151) (Quit: Leaving)
[00:45:11] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[00:45:52] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:51:24] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:52:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:52:56] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:53:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:54:06] *** Parts: icrbow[m] (~icrbowmat@2001:470:69fc:105::ee3) ()
[00:54:36] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:56:43] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[00:58:19] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[00:58:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:03:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[01:07:36] *** Quits: nek0 (~nek0@nek0.eu) (Quit: The Lounge - https://thelounge.chat)
[01:07:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:09:51] *** Quits: simplicius (~simplicio@2a02-a45b-3dc8-1-1d3a-6766-2ae7-f393.fixed6.kpn.net) (Quit: Leaving)
[01:10:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:13:56] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[01:14:16] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[01:15:19] *** Joins: acidjnk (~acidjnk@p200300d0c7363f90955657ea6b285d32.dip0.t-ipconnect.de)
[01:17:24] *** Joins: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[01:18:50] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:447b:39c4:735e:5310) (Quit: ccntrq)
[01:18:52] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:20:50] *** Joins: nek0 (~nek0@nek0.eu)
[01:25:21] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:32:56] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 272 seconds)
[01:35:11] *** Joins: Topsi (~Tobias@dyndsl-095-033-018-175.ewe-ip-backbone.de)
[01:39:22] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[01:39:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:40:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:40:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:44:14] <random-jellyfish> how many times did you get fired?
[01:50:27] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf)
[02:00:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d50:ed7b:88e6:c382) (Read error: Connection reset by peer)
[02:01:41] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:39f9:90f7:922:e73b) (Remote host closed the connection)
[02:02:01] *** Quits: jackalope (~jackalope@50-24-138-131.bcstcmta02.res.dyn.suddenlink.net) (Quit: = "vale")
[02:04:06] *** Joins: Akiva (~Akiva@user/Akiva)
[02:10:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:10:58] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:14:18] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[02:14:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:16:02] *** Quits: michalz (~michalz@185.246.204.61) (Remote host closed the connection)
[02:20:15] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[02:20:28] *** Quits: Topsi (~Tobias@dyndsl-095-033-018-175.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[02:21:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Remote host closed the connection)
[02:21:21] *** Quits: thyriaen (~thyriaen@dynamic-077-191-029-223.77.191.pool.telefonica.de) (Remote host closed the connection)
[02:32:40] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[02:32:58] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:34:10] *** Joins: hololeap (~hololeap@user/hololeap)
[02:39:05] *** Quits: cosimone (~user@93-34-133-75.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:41:49] *** Joins: Pickchea (~private@user/pickchea)
[02:42:07] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:43:50] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[02:48:52] <hololeap> ok, pandoc is amazing
[02:50:28] <Unicorn_Princess> how strong is the haskell convention of using 2-space indents?
[02:51:23] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[02:51:29] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[02:58:01] <justsomeguy> It can bench press 300 pounds, and squat 900.
[02:59:22] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[03:00:20] <geekosaur> I wouldn't say it's that strong; I see and occasionally edit source with 4-space indents
[03:00:52] <geekosaur> it's common, but this isn't Python
[03:01:44] *** Quits: jalil (~jalil@2a01:e0a:277:4100:5321:349f:8c6a:80f8) (Quit: jalil)
[03:02:00] <Unicorn_Princess> thanks
[03:03:03] *** Quits: pgib (~textual@173.38.117.90) (Ping timeout: 252 seconds)
[03:04:33] *** Joins: srk- (~sorki@user/srk)
[03:05:16] *** Joins: Topsi (~Tobias@dyndsl-095-033-018-175.ewe-ip-backbone.de)
[03:06:10] *** Quits: acidjnk (~acidjnk@p200300d0c7363f90955657ea6b285d32.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:07:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:07:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:07:41] *** Joins: wroathe (~wroathe@user/wroathe)
[03:07:42] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[03:08:25] *** Quits: srk (~sorki@user/srk) (Ping timeout: 256 seconds)
[03:08:25] *** srk- is now known as srk
[03:08:27] *** travisb is now known as tabemann
[03:09:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:10:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Remote host closed the connection)
[03:14:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[03:21:44] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[03:23:10] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:24:24] *** Quits: jao (~jao@static-68-235-44-77.cust.tzulo.com) (Ping timeout: 272 seconds)
[03:26:13] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[03:26:27] *** Joins: juhp (~juhp@128.106.188.82)
[03:26:30] *** Quits: juhp (~juhp@128.106.188.82) (Remote host closed the connection)
[03:26:41] *** Joins: juhp (~juhp@128.106.188.82)
[03:26:47] *** Quits: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Read error: Connection reset by peer)
[03:29:56] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:30:26] * hololeap only uses 4-space indents
[03:30:44] <Unicorn_Princess> well it is the objectively correct number of spaces
[03:30:52] <hololeap> dunno why, but two space has always bugged me
[03:31:06] * hololeap nods
[03:31:20] <Unicorn_Princess> alas, the world is full of heretics
[03:31:48] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[03:32:06] *** Joins: juhp (~juhp@128.106.188.82)
[03:32:42] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:33:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[03:39:01] <int-e> hololeap: Surely "where" deserves a 2 space indent
[03:39:44] <hpc> this is why i always indent to prime-numbered tab stops
[03:39:52] <hololeap> yeah, it does :)
[03:39:52] <hpc> 2 spaces, then 3, then 5, then 8, then 13
[03:39:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:39:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:39:57] *** Joins: wroathe (~wroathe@user/wroathe)
[03:40:01] <geekosaur> isnt that fibo?
[03:40:09] <hpc> my math is too advanced for you
[03:40:13] <hpc> (also yes)
[03:40:14] <hololeap> 8 aint no prime
[03:40:40] <hpc> look i am a programmer, not a mathematician
[03:40:42] <int-e> hpc: is that a Haskell prime joke
[03:41:12] <hololeap> hpc, nice use of golden ratio in your line starts
[03:41:52] <hololeap> very artistic
[03:41:56] <hpc> i also separate all my definitions with vertical tabs instead of newlines
[03:44:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:45:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:45:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:45:20] *** Joins: wroathe (~wroathe@user/wroathe)
[03:46:49] * geekosaur reminded of back when it was de riguer for C programmers to separate function definitions with formfeeds
[03:48:57] <monochrom> Consider putting multiple Haskell modules in the same file separated by formfeeds >:)
[03:49:05] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[03:50:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[03:54:19] *** Quits: wavemode (~wavemode@2601:241:0:fc90:79a9:b149:73a6:32c7) (Ping timeout: 256 seconds)
[03:58:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:01:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:01:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:01:05] *** Joins: wroathe (~wroathe@user/wroathe)
[04:03:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[04:03:40] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 272 seconds)
[04:05:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[04:10:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[04:14:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Ping timeout: 240 seconds)
[04:18:54] *** Quits: dvdrw (~dvdrw@87.116.177.189) (Quit: leaving)
[04:21:31] *** Joins: irishman (~vshev4enk@178.151.117.243)
[04:23:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799)
[04:24:25] <int-e> monochrom: cute, but who'd compile that?
[04:24:39] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:45bc:2e9e:c6:5360) (Remote host closed the connection)
[04:25:48] *** Quits: irishman (~vshev4enk@178.151.117.243) (Ping timeout: 240 seconds)
[04:27:03] *** Joins: dons (~dons@user/dons)
[04:34:41] *** Joins: leungbk (~user@2603-8000-1201-2dd2-e8ab-4c7e-ecf4-c621.res6.spectrum.com)
[04:36:56] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:38:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:40:41] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:51] *** Quits: Me-me (~me-me@v.working.name) (Changing host)
[04:41:51] *** Joins: Me-me (~me-me@user/me-me)
[04:46:11] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:46:47] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:47:22] *** Quits: random (~random@46.254.129.49) (Ping timeout: 272 seconds)
[04:58:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:02:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:05:50] *** Joins: vysn (~vysn@user/vysn)
[05:11:25] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (Ping timeout: 240 seconds)
[05:13:07] * ski often puts form feeds into Haskell source
[05:14:00] <ski> (multiple modules .. i wish)
[05:16:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:27:58] *** Quits: leungbk (~user@2603-8000-1201-2dd2-e8ab-4c7e-ecf4-c621.res6.spectrum.com) (Remote host closed the connection)
[05:30:00] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[05:31:42] *** Joins: freeman42x[m] (~freeman42@2001:470:69fc:105::7d29)
[05:32:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:34:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:39:56] *** Quits: Topsi (~Tobias@dyndsl-095-033-018-175.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[05:40:26] <Me-me> int-e: I followed some of that.
[05:43:43] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:44:49] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[05:51:20] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[05:57:10] *** Joins: cheater (~Username@user/cheater)
[06:03:56] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[06:04:06] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[06:05:20] *** Quits: Hash (~Hash@hashsecurity.org) (Quit: https://hashsecurity.org)
[06:05:45] *** Joins: Hash (~Hash@hashsecurity.org)
[06:05:53] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:06:48] *** Joins: justAstache (~justache@user/justache)
[06:09:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[06:14:44] <Unicorn_Princess> is there any way to set the indent width used by the haskell language server? specifically in spacemacs, but i'll accept any kind of answer, maybe it'll provide me with a hint
[06:16:39] <Unicorn_Princess> it's currently using 2-space offsets, despite c-basic-offset, standard-offset, and tab-width all set to 4
[06:16:53] <freeman42x[m]> Unicorn_Princess: isn't the indentation done by the editor/IDE based on whatever you set it to be tabs/spaces/size ? I am not aware of HLS doing anything regards indentation unless maybe you are asking about linting?
[06:17:15] <freeman42x[m]> maybe auto-format hmm
[06:17:37] <Unicorn_Princess> it's done by lsp if you call lsp--format-region
[06:18:17] <Unicorn_Princess> lsp-format-region*
[06:18:17] *** Quits: xff0x (~xff0x@2001:1a81:5301:6400:b772:c1d8:3c5d:2da4) (Ping timeout: 240 seconds)
[06:18:23] <freeman42x[m]> oh, so you are asking how to set the indentation when running that command?
[06:18:44] <Unicorn_Princess> yep
[06:19:05] * ski . o O ( "Yet Another Tabs v. Spaces Debate" ("I mix tabs and spaces.") by dmwit at <http://dmwit.com/tabs/> )
[06:19:58] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:20:22] *** Joins: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8)
[06:20:30] <Unicorn_Princess> sorry, s/standard-offset/standard-indent
[06:21:13] <Unicorn_Princess> which is also what is returned by (lsp--get-indent-width major-mode) when in haskell-mode. and its value is again 4. yet, 2-space indent persists. i'll probably just live with 2, tbh
[06:24:36] *** Joins: notzmv (~zmv@user/notzmv)
[06:24:53] <freeman42x[m]> Unicorn_Princess: by default HLS seems to be using stylish-haskell. Maybe try setting a configuration for it and see if it gets applied: https://github.com/haskell/stylish-haskell#configuration
[06:26:11] <freeman42x[m]> this also might help, in case it is not the default provider: https://github.com/haskell/stylish-haskell#haskell-language-server
[06:28:44] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[06:32:14] <Unicorn_Princess> looks like ormolu is the default. but how do i 1) change it, 2) check what the provider is, to make sure the change worked?
[06:32:57] <freeman42x[m]> Unicorn_Princess: curious, how did you figure out which provider was default?
[06:33:50] <Unicorn_Princess> by desperately groping around in the dark in all directions
[06:33:56] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:34:15] <Unicorn_Princess> one of those gropes landed me on https://haskell-language-server.readthedocs.io/en/latest/configuration.html, which says it's the default
[06:34:52] <Unicorn_Princess> it also mentions customization variables, which reminded me to check M-x customize-variable, and search for haskell format
[06:35:45] <Unicorn_Princess> i'm in the unenviable position of knowing next to nothing about emacs and lsp, and trying to configure lsp for emacs :)
[06:35:57] <freeman42x[m]> Unicorn_Princess: do you want to change from Ormolu to another provider?
[06:36:19] <Unicorn_Princess> i have no idea
[06:36:44] <Unicorn_Princess> i'd like 4-space indents, but don't want to sacrifice too much to get it
[06:37:17] <Unicorn_Princess> so if ormolu doesn't support changing this, but some other, less mature provider does, i'd stick with ormolu/2-spaces
[06:37:27] <freeman42x[m]> <freeman42x[m]> "this also might help, in case it..." <- ^ this tells you how to switch to stylish-haskell if you want to
[06:39:28] <freeman42x[m]> once you switched to it, use the previous link about how to configure stylish-haskell via config files
[06:40:27] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[06:40:50] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[06:43:35] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:46:35] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:6823:32a0:8d3a:9add)
[06:46:57] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:53:48] *** Quits: td_ (~td@94.134.91.130) (Ping timeout: 240 seconds)
[06:54:56] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[06:56:01] *** Joins: td_ (~td@muedsl-82-207-238-047.citykom.de)
[06:57:58] *** Joins: random (~random@46.254.129.49)
[07:02:19] *** Quits: random (~random@46.254.129.49) (Remote host closed the connection)
[07:03:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:06:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[07:08:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:21:10] *** Joins: random (~random@46.254.129.49)
[07:30:03] *** Quits: kadobanana (~mud@user/kadoban) (Quit: quit)
[07:31:13] <freeman42x[m]> Unicorn_Princess: did you get it to work?
[07:32:52] <Unicorn_Princess> The oak fought the wind and was broken, the willow bent when it must and survived.
[07:33:18] <Unicorn_Princess> i gave up >_>
[07:33:56] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 272 seconds)
[07:34:26] <freeman42x[m]> Unicorn_Princess: why? it didn't seem that hard to configure (famous words before being hard to configure). run into any issues? what did you try?
[07:34:30] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:34:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[07:34:37] <Unicorn_Princess> i'm wary of making my configuration too much of a special unique case
[07:35:07] *** Joins: mud (~mud@user/kadoban)
[07:36:46] <Unicorn_Princess> all i tried was sticking a 'stylish-haskell into the lsp-haskell layer variables. 1st attempt failed, then i reconsidered if i want to do this at all
[07:37:42] <Unicorn_Princess> since after that i'd need like, .yaml files to customize the formatting somewhere, and that's more configuration than i'm willing to deal with, since 2-space indent doesn't bother me /that/ much
[07:37:54] <Unicorn_Princess> i just, foolishly, thought it would be easy to adjust :|
[07:37:57] <freeman42x[m]> Unicorn_Princess: you'd need to switch to stylish-haskell for that to work. maybe try configuring ormolu instead
[07:39:05] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[07:40:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:40:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:40:02] *** Joins: wroathe (~wroathe@user/wroathe)
[07:40:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:41:11] <Unicorn_Princess> the willow bent and survived, freeman42x[m]
[07:41:23] <Unicorn_Princess> 2 spaces is fine..
[07:42:20] <Sqaure> I read that the number of records fields blows up core size by O(n^2). Curious to see if theres an ongoing fix for this but couldnt find it. Anyone know?  
[07:42:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:44:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[07:44:48] <freeman42x[m]> Unicorn_Princess: aight, most Haskell githup repositories use 2 spaces, 62% https://ukupat.github.io/tabs-or-spaces/
[07:46:50] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:47:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[07:48:28] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[07:48:32] <c_wraith> Sqaure: it's just...  field selectors.  They're just going to be that big as long as they're functions.  (I wonder if -XNoFieldSelectors removes that)
[07:49:48] *** Joins: vonfry (~user@119.135.207.43)
[07:50:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:51:41] *** Joins: Guest|17 (~Guest|17@172.93.132.243)
[07:52:00] *** Quits: Guest|17 (~Guest|17@172.93.132.243) (Client Quit)
[07:55:33] <Sqaure> c_wraith, i was thinking of the motivation for the creation of this https://well-typed.com/blog/2021/08/large-records/
[07:56:47] <c_wraith> I mean, sure, there are things that addresses, but...  seriously, write out field accessors for a record.  You'll find the amount of code you write is quadratic in the number of fields.
[08:01:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:01:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:01:32] *** Joins: wroathe (~wroathe@user/wroathe)
[08:06:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:11:11] <sm> seen in #haskell:matrix.org , tomsmeding:
[08:11:23] <sm> > I wish these pastebin sites would allow highlighting specific rows like gist/github
[08:11:25] <lambdabot>  error:
[08:11:25] <lambdabot>      Data constructor not in scope:
[08:11:25] <lambdabot>        I :: t0
[08:11:44] *** Quits: h_ (rootvegeta@fsf/member/hays) (Remote host closed the connection)
[08:12:36] *** Joins: cynomys (~cynomys@user/cynomys)
[08:14:24] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[08:14:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:15:19] *** Joins: machinedgod (~machinedg@24.105.81.50)
[08:15:26] *** Joins: deadmarshal (~deadmarsh@95.38.117.184)
[08:21:43] *** Quits: vonfry (~user@119.135.207.43) (Remote host closed the connection)
[08:22:12] *** Joins: vonfry (~user@119.135.207.43)
[08:22:34] *** Parts: vonfry (~user@119.135.207.43) ()
[08:22:36] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[08:29:42] *** Joins: toastloop (~toastloop@user/toastloop)
[08:32:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:32:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:32:20] *** Joins: wroathe (~wroathe@user/wroathe)
[08:35:35] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[08:35:41] <freeman42x[m]> is there any "reload GHCI and re-run last command" capable VSCode plugin or external program?
[08:35:57] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[08:36:13] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[08:37:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:40:46] *** Joins: Guest89 (~Guest89@2a01:41e1:464f:6b00:42ac:86d9:c817:5197)
[08:48:21] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[08:49:16] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:49:24] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[08:50:26] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[08:51:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[08:51:50] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[08:52:20] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[08:52:25] *** Joins: lechner (~lechner@debian/lechner)
[08:56:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:57:58] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:02:41] *** astra is now known as amish
[09:03:11] *** amish is now known as Guest120
[09:04:00] *** Guest120 is now known as amish
[09:04:04] *** Quits: amish (sid289983@2a03:5180:f:4::4:6cbf) (Changing host)
[09:04:04] *** Joins: amish (sid289983@user/amish)
[09:04:21] *** amish is now known as astra
[09:09:17] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[09:17:00] *** Quits: dons (~dons@user/dons) (Ping timeout: 260 seconds)
[09:19:01] *** Quits: deadmarshal (~deadmarsh@95.38.117.184) (Ping timeout: 256 seconds)
[09:19:39] <Guest89> Hi, beginner question here: I am using Haskell-src-exts analysing Github projects I've scraped. However when parsing them with 'parseFile', I get tons of ParseErrors in repos which compile just fine when I clone them. The Errors mostly concern missing language extensions and advise to add a corresponding pragma. Am I using the wrong function? I
[09:19:40] <Guest89> thought 'parseFile' should respect language pragmas?
[09:21:09] <freeman42x[m]> Guest89: language pragma's can also be declared globally in a cabal file, that might be cause of the issue
[09:29:09] <Guest89> freeman42x[m]: Thanks! At least for some of the errors that seems to be the case. Do you perchance know any lib which can parse cabal files since haskell-src-exts can't do that?
[09:29:46] <sclv> The Cabal lib itself
[09:32:36] *** Quits: poss (~fes@mobile-access-567357-189.dhcp.inet.fi) (Ping timeout: 240 seconds)
[09:33:46] <Guest89> Oh... maybe I could've thought of that, thanks again!
[09:42:24] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:45:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[09:48:49] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[09:55:41] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:56:04] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[10:01:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[10:05:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:07:58] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[10:09:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[10:13:06] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:13:52] *** Joins: deadmarshal (~deadmarsh@95.38.117.184)
[10:30:54] *** Joins: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:30:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[10:31:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[10:33:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:33:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:33:09] *** Joins: wroathe (~wroathe@user/wroathe)
[10:33:38] <sshine> Guest89, I stopped putting my pragmas in package.yaml/.cabal because the language server couldn't parse that back when I did it.
[10:34:06] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:36:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[10:36:50] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:37:38] <sm> freeman42x: ghcid -t sort of thing ?
[10:38:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[10:40:26] <freeman42x[m]> sm: what is the description of that in help? sorry, I don't have it installed
[10:42:38] <sm> https://github.com/ndmitchell/ghcid#evaluation
[10:43:05] *** Quits: arkeet (arkeet@moriya.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[10:43:25] *** Joins: arkeet (arkeet@moriya.ca)
[10:44:58] *** Joins: ardell (~ardell@user/ardell)
[10:47:24] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[10:51:51] *** Joins: michalz (~michalz@185.246.204.61)
[10:53:14] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:6823:32a0:8d3a:9add) (Remote host closed the connection)
[10:59:15] <freeman42x[m]> <sm> "https://github.com/ndmitchell/..." <- that is close, what I meant is to provide a REPL eg. GHCI and when saving a file the last command you run in the repl will be rerun. This is what ide-haskell-repl Atom extension does and it is very useful. Can't find anything like it for VSCode though, nor external application
[10:59:43] <freeman42x[m]> `ghcid -t` says it is for `Set window topmost (Windows only)`
[11:00:49] *** Joins: califax (~califax@user/califx)
[11:04:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:08:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[11:09:00] *** Joins: coot (~coot@213.134.190.95)
[11:12:01] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:14:21] <dminuoso> maerwald[m]: Yes.
[11:15:25] <dminuoso> Postfix configuration generally is not that complicated if you make a few design decisions.
[11:16:21] <dminuoso> rspamd and dovecot are way more complicated in terms of how you usually configure them
[11:16:29] <dminuoso> If you make use of these 
[11:16:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:18:07] <dminuoso> But yeah, we feel very comfortable this works out nicer with nix. For instance, we have a base profile that configures `services.postfix.config.disable_vrfy_command = true;`, so every postfix we have in our infrastructure has VRFY disabled by default. And this profile is composable with other settings, it's small things like this that are very expressible with nixos.
[11:19:34] <dminuoso> And we have some pretty sleek automatism to generate multiplexed prometheus exporters on each server, and the nix code generates a discovery.json that gives us automatic service discovery.
[11:19:55] <dminuoso> So we just have to turn on `services.postfix.enable = true;` on any server, and it will automatigally be included by our monitoring
[11:20:17] <dminuoso> Anyway. Not trying to convince you it's great which Im sure you disagree with.
[11:25:25] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:26:59] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:48c3:41d8:b68d:811a)
[11:27:02] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:f583:242c:b5f1:2422)
[11:27:14] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:31:04] *** Joins: neurocyte0917090 (~neurocyte@IP-045136169050.dynamic.medianet-world.de)
[11:31:04] *** Quits: neurocyte0917090 (~neurocyte@IP-045136169050.dynamic.medianet-world.de) (Changing host)
[11:31:04] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[11:31:55] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[11:32:21] *** Joins: chele (~chele@user/chele)
[11:33:13] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:35:26] *** Joins: kuribas (~user@188.188.61.69)
[11:35:35] *** Quits: Logio (em@kapsi.fi) (Ping timeout: 256 seconds)
[11:35:35] *** Quits: micro (~micro@user/micro) (Ping timeout: 256 seconds)
[11:35:42] *** Joins: Logio (em@kapsi.fi)
[11:36:21] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:36:30] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[11:37:03] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:f583:242c:b5f1:2422) (Ping timeout: 256 seconds)
[11:37:04] *** Joins: Sgeo (~Sgeo@user/sgeo)
[11:37:07] *** Joins: micro (~micro@user/micro)
[11:37:42] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:37:43] *** Joins: mbuf (~Shakthi@122.174.44.9)
[11:38:38] *** Joins: raym (~raym@user/raym)
[11:39:28] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[11:39:37] *** Joins: kuribas` (~user@dD5779AA0.access.telenet.be)
[11:40:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:40:57] *** Joins: alp (~alp@user/alp)
[11:41:49] *** Quits: kuribas (~user@188.188.61.69) (Ping timeout: 256 seconds)
[11:45:40] *** Joins: phma_ (phma@2001:5b0:211f:f48:ea23:e8cf:9b9f:fa4a)
[11:46:16] *** Quits: phma (phma@2001:5b0:211c:8bf8:1555:98c1:2056:8534) (Read error: Connection reset by peer)
[11:48:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:48:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:48:54] *** Joins: wroathe (~wroathe@user/wroathe)
[11:52:10] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:53:34] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[11:53:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[11:55:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:57:08] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:58:20] *** Joins: k8yun (~k8yun@user/k8yun)
[11:58:43] *** Quits: k8yun (~k8yun@user/k8yun) (Remote host closed the connection)
[12:03:45] *** Quits: kuribas` (~user@dD5779AA0.access.telenet.be) (Remote host closed the connection)
[12:05:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:07:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:10:53] *** Joins: cfricke (~cfricke@user/cfricke)
[12:14:56] *** Joins: acidjnk (~acidjnk@p200300d0c7363f90286e28f39b70c9d3.dip0.t-ipconnect.de)
[12:15:16] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:17:14] *** Quits: random (~random@46.254.129.49) (Remote host closed the connection)
[12:18:57] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[12:19:22] *** Joins: toastloop (~toastloop@user/toastloop)
[12:19:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:19:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:19:43] *** Joins: wroathe (~wroathe@user/wroathe)
[12:25:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[12:25:24] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:26:40] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[12:27:36] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:28:27] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 272 seconds)
[12:28:30] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[12:28:43] *** Joins: wolfshappen (~waff@irc.furworks.de)
[12:33:00] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:33:12] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[12:35:49] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:9e4b:b673:9870:6415)
[12:40:20] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:42:38] *** Joins: arievw (~arievw@85.148.234.95)
[12:46:57] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Ping timeout: 240 seconds)
[12:46:57] *** Quits: raghavgururajan (ea769b8000@user/raghavgururajan) (Ping timeout: 240 seconds)
[12:47:01] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Ping timeout: 245 seconds)
[12:47:01] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (Ping timeout: 245 seconds)
[12:47:01] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (Ping timeout: 245 seconds)
[12:47:17] *** Quits: pranaysashank (ef3e56ca8b@2604:bf00:561:2000::3c4) (Ping timeout: 240 seconds)
[12:48:02] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (Ping timeout: 240 seconds)
[12:48:03] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Ping timeout: 250 seconds)
[12:48:15] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[12:48:17] *** Quits: jleightcap (7bc4014b62@user/jleightcap) (Ping timeout: 240 seconds)
[12:48:27] *** Joins: jleightcap (7bc4014b62@user/jleightcap)
[12:48:37] *** Quits: dawdler (035b60b5aa@user/dawdler) (Read error: Connection reset by peer)
[12:48:37] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (Ping timeout: 240 seconds)
[12:48:39] *** Joins: jakzale_ (6291399afa@user/jakzale)
[12:48:39] *** Joins: pranaysashank (ef3e56ca8b@2604:bf00:561:2000::3c4)
[12:48:39] *** Joins: evanrelf_ (3addc196af@2604:bf00:561:2000::f0)
[12:48:40] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[12:48:55] *** Quits: sm2n (ae95cb1267@user/sm2n) (Ping timeout: 250 seconds)
[12:48:59] *** Joins: dawdler (035b60b5aa@2604:bf00:561:2000::3b6)
[12:48:59] *** Quits: dawdler (035b60b5aa@2604:bf00:561:2000::3b6) (Changing host)
[12:48:59] *** Joins: dawdler (035b60b5aa@user/dawdler)
[12:49:02] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (Ping timeout: 240 seconds)
[12:49:02] *** Quits: jakzale (6291399afa@user/jakzale) (Ping timeout: 240 seconds)
[12:49:02] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (Ping timeout: 240 seconds)
[12:49:02] *** jakzale_ is now known as jakzale
[12:49:03] *** evanrelf_ is now known as evanrelf
[12:49:10] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[12:49:11] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[12:49:20] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[12:49:23] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[12:49:41] *** Joins: sm2n (ae95cb1267@user/sm2n)
[12:49:49] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[12:49:54] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[12:49:54] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[12:53:04] *** Joins: jespada (~jespada@148.252.132.52)
[12:59:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[13:00:59] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[13:02:53] *** Joins: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[13:05:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:5928:8400:a51e:7799) (Ping timeout: 240 seconds)
[13:11:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:12:19] *** Parts: toastloop (~toastloop@user/toastloop) (Leaving)
[13:15:01] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[13:23:33] *** Quits: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[13:23:49] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:24:54] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[13:25:59] *** Joins: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl)
[13:26:59] *** Quits: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8) (Ping timeout: 256 seconds)
[13:27:47] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:29:46] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:31:08] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 272 seconds)
[13:31:44] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[13:33:33] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[13:35:16] *** Joins: fendor (~fendor@77.119.193.215.wireless.dyn.drei.com)
[13:35:37] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:36:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:38:54] *** Joins: xff0x (~xff0x@2001:1a81:5339:f000:1ec4:ce6f:8558:a9e8)
[13:39:41] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:41:31] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:9e4b:b673:9870:6415) (Remote host closed the connection)
[13:43:36] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:768b:1849:a78b:4ad)
[13:43:47] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:43:57] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:46:51] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:51:29] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[13:53:39] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[13:55:53] *** Joins: coot (~coot@213.134.190.95)
[14:06:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:10:19] <turlando> Using a stack project, is it possible to load from ghci the modules residing in the app directory without touching the package.yaml?
[14:11:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[14:13:39] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[14:16:05] *** Quits: fendor (~fendor@77.119.193.215.wireless.dyn.drei.com) (Remote host closed the connection)
[14:16:54] *** Joins: zachel (~zachel@user/zachel)
[14:17:21] <ski> "The only real strong opinion I have is that you should avoid Stack's (optional) use of `hpack' at all costs.    `hpack' is a tool that generates `.cabal' files from `package.yaml'. In the past there were some (in my personal opinion, weak) reasons for using `package.yaml', but those are nowadays possible in `.cabal' too."
[14:17:33] <ski> "`package.yaml' does not support all CABAL features and requires all your potential users to install extra tooling. The `.cabal' format is understood by both `cabal-install' and `stack' without extra tools, so everyone can just use/contribute with their preferred tools." -- "The Cabal/Stack Disambiguation Guide" <https://gist.github.com/merijn/8152d561fb8b011f9313c48d876ceb07>
[14:18:57] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[14:18:57] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:48c3:41d8:b68d:811a) (Ping timeout: 240 seconds)
[14:20:44] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[14:21:35] <geekosaur> not that that answers the question, I think,but then I'm not entirely sure what the question is
[14:21:49] <geekosaur> note that ghci is dumb and doesn't handlemultiple modules well
[14:21:59] <merijn> s/well//
[14:22:01] <geekosaur> neither stacknor cabal can help much with this
[14:22:48] <geekosaur> there is some limited support, see :add
[14:23:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[14:25:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[14:26:54] * geekosaur wonders if a PhD thesis could be squeezed out of designing a better repl
[14:28:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Ping timeout: 240 seconds)
[14:30:37] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:31:14] *** Joins: dvdrw (~dvdrw@87.116.162.63)
[14:31:40] *** Quits: dvdrw (~dvdrw@87.116.162.63) (Changing host)
[14:31:40] *** Joins: dvdrw (~dvdrw@user/dvdrw)
[14:32:08] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:32:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:33:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:36:58] <merijn> there was work in progress on multi-component GHCI
[14:37:00] <merijn> for GSoC
[14:38:38] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Quit: leaving)
[14:42:52] *** Joins: jao (~jao@static-68-235-44-61.cust.tzulo.com)
[14:44:12] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[14:45:07] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:46:41] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[14:49:37] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[14:50:18] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[14:53:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[14:54:46] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[14:55:03] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:55:10] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:03:28] *** Joins: __monty__ (~toonn@user/toonn)
[15:05:30] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 272 seconds)
[15:07:49] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[15:08:33] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be)
[15:09:03] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:10:08] *** Joins: Midjak (~Midjak@82.66.147.146)
[15:10:23] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:10:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:11:16] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[15:11:36] <turlando> Tanks ski, will check that
[15:12:04] <turlando> Eventually what I really needed was as simple as stack ghci project:project-exe with the default stack naming
[15:19:03] *** Joins: Guest|99 (~Guest|99@n151-p1.eduroam.kth.se)
[15:19:22] *** Quits: Guest|99 (~Guest|99@n151-p1.eduroam.kth.se) (Client Quit)
[15:21:20] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[15:21:48] *** Joins: zachel (~zachel@user/zachel)
[15:23:21] <FernandoChu[m]> why do type classes require that their methods use all the types? E.g. if `Foo a b` is my type class, `f :: a` can't be a method, as the compiler complains that `f` is now ambiguous (which seems to me to be true but only as long as there are multiple instances). But it seems to me that even if I replaced `f` with `g :: (a,b)` then `g` is still ambiguous (again, if I have multiple instances)
[15:23:52] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[15:24:06] *** Quits: acidjnk (~acidjnk@p200300d0c7363f90286e28f39b70c9d3.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:26:57] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[15:27:10] *** Joins: califax (~califax@user/califx)
[15:31:19] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:32:35] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:35:01] *** Joins: vickyHaskell (~textual@49.37.161.125)
[15:35:52] <vickyHaskell> Hello all, I am newbie to haskell/purescript, is this the right place to ask basic queries
[15:36:55] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[15:37:44] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[15:38:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:39:49] <vickyHaskell> please refer to https://paste.tomsmeding.com/sCbxddGX my question is flip takes in a function with 2 inputs, where as if you look at line 21 flip is taking in the function apply that only takes one input, this is working and I am not able to get my head around on how it is working, any help highly appreciated
[15:40:30] <Franciman> hi vickyHaskell it sure is
[15:40:39] <Franciman> regarding purescript there is also the dedicated channel #purescript
[15:40:57] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c36d:f85d:bf20:a174)
[15:41:33] <vickyHaskell> Sure I will go there, thanks francis, but I guess this question can be answered by haskell users as well.
[15:41:37] *** phma_ is now known as phma
[15:43:13] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:43:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32)
[15:44:06] <Franciman> vickyHaskell: i would reason as follows
[15:44:48] <Franciman> you can easily understand how flip works, right?
[15:45:14] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:45:21] <Franciman> :t flip
[15:45:23] <lambdabot> (a -> b -> c) -> b -> a -> c
[15:45:31] <Franciman> haskell has it too lol
[15:45:46] *** Quits: deadmarshal (~deadmarsh@95.38.117.184) (Ping timeout: 256 seconds)
[15:45:53] <Franciman> given a function, it creates a new function which accepts the argument in reverse order
[15:45:57] <Franciman> let me explain what i mean
[15:46:02] <Franciman> :t (-)
[15:46:03] <lambdabot> Num a => a -> a -> a
[15:46:06] <Franciman> this is subtraction
[15:46:08] <vickyHaskell> I usnderstand how flip works
[15:46:10] <Franciman> and 
[15:46:19] <Franciman> > (-) 3 1
[15:46:21] <lambdabot>  2
[15:46:31] <Franciman> now if i apply flip to (-), i get a new function
[15:46:33] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[15:46:40] <Franciman> > (flip (-)) 3 1
[15:46:42] <lambdabot>  -2
[15:47:09] <Franciman> the new function runs the subtraction `1 - 3`
[15:47:46] <vickyHaskell> that is correct, but fundamentally the first input to flip is a function (a->b->c) that takes 2 inputs, but apply is only taking 1 input, how is that passing
[15:47:57] <Franciman> apply takes 2 inputs
[15:47:59] <vickyHaskell> (-
[15:48:01] <Franciman> the first is a function
[15:48:09] <Franciman> and the second is the argument  to which you want to apply the function
[15:48:14] <Franciman> in haskell the name of apply is:
[15:48:16] <Franciman> :t ($)
[15:48:17] <lambdabot> (a -> b) -> a -> b
[15:48:59] <Franciman> apply takes two arguments, a function f :: a -> b, and an argument x :: a
[15:49:00] <vickyHaskell> same in purescript as well
[15:49:03] <Franciman> yes
[15:49:07] *** Joins: notzmv (~zmv@user/notzmv)
[15:49:10] <Franciman> apply f a = f a
[15:49:36] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:49:52] <Franciman> so, flip apply's type is
[15:49:53] <vickyHaskell> ok now I get it, apply is also taking 2 aguments
[15:49:56] <Franciman> :t flip ($)
[15:49:57] <lambdabot> a -> (a -> c) -> c
[15:50:00] <Franciman> yes
[15:50:29] <Franciman> apply (\x -> x + 1) 3
[15:50:33] <Franciman> this is how you call it
[15:50:43] <Franciman> > ($) (\x -> x + 1) 3
[15:50:44] <lambdabot>  4
[15:50:52] <Franciman> > ($) (\x -> x + 5) 3
[15:50:53] <lambdabot>  8
[15:50:58] <Franciman> > ($) (\x -> x * 5) 3
[15:50:59] <lambdabot>  15
[15:51:06] *** Quits: jao (~jao@static-68-235-44-61.cust.tzulo.com) (Ping timeout: 272 seconds)
[15:51:11] <Franciman> i ran apply (or haskell's name for it), to 3 different functions
[15:51:25] <vickyHaskell> Thank you Francis & lamdabot, now it seems to me the question was dumb on my part, I did not understand apply properly. 
[15:51:51] <Franciman> vickyHaskell: what matters is that you understood
[15:51:56] <Franciman> questions are cheap
[15:52:34] <dvdrw> no reason to fret, it's always a bunch of small steps :)
[15:52:52] *** Joins: jao (~jao@66.63.167.109)
[15:53:05] <vickyHaskell> Yes I did, basically flip, flips the order of inputs, as apply has 2 inputs it is simply fliping the order
[15:53:24] <Franciman> correct
[15:54:53] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 256 seconds)
[15:57:52] <[exa]> vickyHaskell: it is slightly interesting to check out what actually happens with the type of "flip" in that expression
[15:58:48] *** Quits: jao (~jao@66.63.167.109) (Ping timeout: 256 seconds)
[15:59:14] <[exa]> vickyHaskell: the argument of `flip` has type `a -> b -> c` for some combination of a,b,c types, and you're pushing ($) into that, which has type `(x -> y) -> x -> y`
[15:59:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[15:59:51] *** Quits: exadifficult (~etadiffic@95.155.49.108) (Quit: Client closed)
[16:01:17] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:03:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:05:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be)
[16:11:19] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[16:18:20] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[16:24:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[16:26:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[16:26:31] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:29:27] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:30:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Ping timeout: 256 seconds)
[16:35:33] *** Joins: deadmarshal (~deadmarsh@95.38.117.184)
[16:37:52] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:37:59] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:39:32] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:25f4:e878:3056:b5be)
[16:44:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[16:44:59] *** Quits: Hecate (~mariposa@user/hecate) (Ping timeout: 256 seconds)
[16:45:28] *** Joins: Hecate (~mariposa@user/hecate)
[16:47:28] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[16:47:45] *** Joins: alp (~alp@user/alp)
[16:51:21] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:53:16] <dminuoso> FernandoChu[m]: 
[16:53:50] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[16:54:30] <dminuoso> FernandoChu[m]: The ambiguity problem exists irrespective of how many instances we have.
[16:54:42] <dminuoso> Consider we are writing a module in isolation:
[16:55:09] <dminuoso> `module Foo () where instance Foo Int String where f = 1`
[16:55:10] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:55:59] <dminuoso> You might say "well, `f` cant possibly be ambiguous. But the problem is, we have what's called an open world assumption. Anyone, anywhere, in any point in the future or past, can define an additional `instance Foo Int Char`
[16:57:16] <dminuoso> So we assume that the typeclass instances are open, that means we never know the full extend of available instances.
[16:57:46] <dminuoso> However, your second option is perfectly valid and not ambiguous
[16:57:49] *** Joins: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[16:58:07] <dminuoso> % class Two a b where g :: (a, b)
[16:58:08] <yahb> dminuoso: 
[16:58:18] <dminuoso> % instance Two Int String where g = (1, "foo")
[16:58:18] <yahb> dminuoso: 
[16:58:25] <dminuoso> % instance Two Char Double where g = ('a', 3.0)
[16:58:25] <yahb> dminuoso: 
[16:58:41] <dminuoso> The reason this works out is because `g` is a polymorphic value. That means:
[16:58:43] <dminuoso> % :t g
[16:58:43] <yahb> dminuoso: forall {a} {b}. Two a b => (a, b)
[16:59:38] <dminuoso> The *consumer*/*user* of a polymorphic value, like `g` above, must decide for the type variables `a` and `b`. i.e. they must make some choice, as long as the cosntraint `Two a b` is satisfied
[16:59:51] <dminuoso> % g :: (Char, Double)
[16:59:52] <yahb> dminuoso: ('a',3.0)
[16:59:57] <dminuoso> % g :: (Int, String)
[16:59:58] <yahb> dminuoso: (1,"foo")
[17:00:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[17:00:20] <dminuoso> That rule, that the caller/consumer/user of a polymorphic thing must decide what the type variables be, always holds. :)
[17:01:15] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[17:01:45] <FernandoChu[m]> hmm ok, but what about something like `h :: a -> b`. As you said there could be instances `Foo Int Char` and `Foo Int String` so that `charOrInt = h 0` is ambiguous, right?
[17:01:49] *** Joins: hololeap (~hololeap@user/hololeap)
[17:02:08] <dminuoso> FernandoChu[m]: Consider what I wrote at face value.
[17:02:22] <dminuoso> The *user* of a polymorphic thing must decide the types of its type variables.
[17:02:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:02:56] <dminuoso> So if `h` was a method of `Two`, then whoever *uses* h must decide what `a` and `b` are going to be.
[17:02:58] <FernandoChu[m]> ohhhh
[17:03:09] <dminuoso> This usage is *usually* inferred
[17:03:16] <dminuoso> But sometimes it needs a helping hand
[17:03:59] <dminuoso> FernandoChu[m]: More to the point, he has the obligation (and freedom) to chose *any* type for a type variable, as long as the constraint (the thing left to the => arrow) is satisfied.
[17:04:04] <dminuoso> Or she/it.
[17:04:20] <FernandoChu[m]> got it, that's why `f :: a` is illegal, because it's not possible to specify which instance you're referring to even with annotations
[17:04:28] <dminuoso> Exactly.
[17:04:33] <FernandoChu[m]> thanks a lot for your time and explanation!
[17:04:36] *** Quits: ardell (~ardell@user/ardell) (Ping timeout: 240 seconds)
[17:05:34] <dminuoso> FernandoChu[m]: By the way, we can still make `f :: a` work with a bit of trickery!
[17:05:51] <FernandoChu[m]> fundeps right?
[17:05:54] <dminuoso> No, much simpler
[17:06:00] <dminuoso> We make a very simple helper data type 
[17:06:02] <FernandoChu[m]> :O
[17:06:04] <dminuoso> % data Proxy a = Proxy
[17:06:05] <yahb> dminuoso: 
[17:06:12] <dminuoso> This thing is completely blant, it's almost like () right?
[17:06:26] <FernandoChu[m]> I see
[17:06:28] <dminuoso> So now we can conjure this:
[17:06:38] <FernandoChu[m]> so `f :: a -> Proxy a
[17:06:40] <FernandoChu[m]> ?
[17:06:45] <dminuoso> Not quite
[17:06:50] <dminuoso> % data Foo a b where h :: Proxy a -> b
[17:06:50] <yahb> dminuoso: ; <interactive>:90:20: error: parse error on input `h'
[17:07:01] <dminuoso> % class Foo a b where h :: Proxy a -> b
[17:07:01] <yahb> dminuoso: 
[17:07:01] <FernandoChu[m]> yeah oops
[17:07:06] <dminuoso> So now you can do:
[17:07:06] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:41b:9f3:a75a:9b8b) (Ping timeout: 260 seconds)
[17:07:13] <dminuoso> h (Proxy :: Proxy Int)
[17:07:48] <FernandoChu[m]> very interesting, it's just extra fodder to carry the type information
[17:07:52] <dminuoso> Exactly! :)
[17:07:57] <FernandoChu[m]> thanks for sharing that too :)
[17:09:46] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:16:13] *** Joins: komikat (~komikat@183.82.154.44)
[17:16:27] <komikat> hi
[17:16:51] <geekosaur> hi
[17:16:56] <komikat> epic this works
[17:17:58] <geekosaur> you might also be interested in matrix, which gives you a more web-like environment. I think we're #haskell@matrix.org
[17:18:54] <dminuoso> Mmm, Im not sure that a "more web-like environment" is a good thing... :)
[17:19:09] <dminuoso> Next thing you know, people can just write javascript or haskell code in the chat, and your client will execute it for your convenience...
[17:19:15] <komikat> XD
[17:19:23] <komikat> is there any benefit to using matrix over irc?
[17:19:31] <komikat> because I'm comfortable with irc 
[17:19:36] <[exa]> unlikely
[17:19:46] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[17:19:50] <komikat> cool
[17:19:54] <geekosaur> #haskell:matrix.org apparently
[17:20:00] <[exa]> perhaps do they provide chat history?
[17:20:09] <geekosaur> some people like IRC, some prefer the more "modern" matrix environment
[17:20:10] <hpc> if you're already using matrix for something else the bridge means you don't need more than one chat client
[17:20:13] <hpc> and that's about it
[17:20:20] <geekosaur> matrix does have chat history, yes
[17:20:32] <komikat> I think I'm already on the matrix 
[17:20:50] <komikat> makes sense
[17:21:05] <komikat> I prefer discord but IRC seems nice
[17:21:39] <dminuoso> I never quite understood why matrix took off but jabber did not.
[17:21:51] <[exa]> better name
[17:22:02] <geekosaur> I haven't seen many good jabber clients tbh
[17:22:14] <komikat> "joining the matrix"
[17:22:17] <komikat> sounds cool so theres that
[17:22:22] <geekosaur> tried a bunch of them a couple years agoand all of them sucked in one way or another
[17:22:37] <[exa]> we've run jabber clients and servers for like 10 years, but everyone moved to slacks nowadays
[17:23:01] <dminuoso> geekosaur: whatsapp and zoom use xmpp variants.
[17:23:02] *** Quits: Guest89 (~Guest89@2a01:41e1:464f:6b00:42ac:86d9:c817:5197) (Quit: Client closed)
[17:23:32] <merijn> jabber is mostly dead anyway. There was some hope when GoogleTalk still supported it, but now there's no critical mass
[17:23:36] <dminuoso> But I guess this is the typical "if its not new, its not hip" problem
[17:23:56] <dminuoso> Add some "json", "go libraries" and "npm packages" - and you've won your popularity contest.
[17:24:59] <komikat> add some "Artificial intelligence" for some more traction 
[17:25:41] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Remote host closed the connection)
[17:25:43] <Clint> i would guess that it's because matrix prioritized group chat in a way that jabber never did
[17:25:48] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[17:25:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[17:28:34] <komikat> stack or cabal
[17:29:16] <geekosaur> pick one. the community'sabout 50-50 on it these days
[17:29:35] <geekosaur> cabal used to have problems but cabal 2.x and above work quite well
[17:29:46] <komikat> coo
[17:29:47] <komikat> l
[17:29:50] <dminuoso> And stack has its own share of issues.
[17:30:11] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:30:49] *** Joins: peri4n (~peri4n@85.232.9.17)
[17:31:38] <dminuoso> komikat: https://gist.github.com/merijn/8152d561fb8b011f9313c48d876ceb07
[17:31:51] <dminuoso> This is a relatively neutral comparison between the two
[17:31:51] <komikat> dminuoso: thanks
[17:32:07] <komikat> oh is this how you reply to people, very cool
[17:32:34] <geekosaur> yes, colon or comma will work. and for many of us a mention anywhere in the line will work (but this is not universal)
[17:32:57] <dminuoso> The colon and space (or some similar separator) is automatically inserted by most clients tab-completion.
[17:33:37] <komikat> interesting
[17:35:46] <freeman42x[m]> ski: question regarding the stack / cabal gist you shared: https://gist.github.com/merijn/8152d561fb8b011f9313c48d876ceb07?permalink_comment_id=4073014#gistcomment-4073014
[17:38:21] <geekosaur> cabal has -w. cabal's assumption is you have standardized on one ghc version and it adapts to that, rather than the ghc version being picked per project
[17:38:56] <geekosaur> this isn't always ideal, since you don;t have any say in what version of `base` is used with that compiler
[17:39:06] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[17:39:32] <geekosaur> also, you can get from  stackage a cabal freeze file which serves many of the purposes of a resolver
[17:40:06] <dminuoso> But you can address this with very minor overhead of setting up `ghc` and `cabal` using a) nix-shell, b) direnv, some other mechanism
[17:40:58] <dminuoso> so Im a cabal user, and every project has at least some 10 line shell.nix to set up ghc, cabal and libraries at specific versions needed for that project
[17:40:59] *** Joins: Guest89 (~Guest89@2a01:41e1:464f:6b00:42ac:86d9:c817:5197)
[17:42:26] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[17:44:02] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:44:42] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[17:49:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:53:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[17:55:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:55:18] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:55:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:55:18] *** Joins: wroathe (~wroathe@user/wroathe)
[17:58:48] *** Joins: hololeap_ (~hololeap@user/hololeap)
[17:59:16] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:59:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[18:00:06] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[18:00:27] *** Joins: komikat (~komikat@183.82.154.44)
[18:00:39] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[18:00:39] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[18:01:28] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[18:03:27] <freeman42x[m]> dminuoso: If I could I would use Nix + Cabal everywhere since it gives very stable builds etc.; but on native Windows it's not possiblet yet (no WSL, CYGWIN, MINGW, or other VM or emulation) because of no Nix on Windows yet
[18:04:30] <dminuoso> freeman42x[m]: regarding "stable builds", ask davean about that.. :)
[18:04:47] <dminuoso> They have a great story about doJailbreak and its widespread use in nixpkgs
[18:06:06] *** Joins: telser (~quassel@user/telser)
[18:06:25] <komikat> is there a way to get ghci to "remember" my settings 
[18:06:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[18:06:39] <geekosaur> create a .ghci file
[18:06:42] <komikat> like remembering I :set prefix to something else
[18:06:43] <komikat> oh
[18:06:47] <komikat> cool
[18:06:57] <freeman42x[m]> dminuoso: I was asking specifically for native Windows cabal only development (no Nix). what geekosaur said, the cabal freze from stackage would be a solution. does cabal by itself have any other way to solve the issue that stackage fixes?
[18:06:58] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#the-ghci-and-haskeline-files
[18:07:38] <geekosaur> you can create a global one, or per project
[18:07:56] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[18:08:02] <dminuoso> freeman42x[m]: I dont understand the question.
[18:08:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:08:44] <komikat> geekosaur: thanks
[18:08:45] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[18:09:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[18:09:34] <freeman42x[m]> dminuoso: stack used to solve the main cabal hell issue: packages not compiling well together via stackage. did cabal (no Nix) solve that issue in any other way except using a stackage freeze file?
[18:09:50] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[18:10:01] <dminuoso> freeman42x[m]: cabal solves it like nix does, roughly
[18:10:05] <dminuoso> it's nix-inspired
[18:10:30] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:10:33] <dminuoso> Which is why you sometime see the v2-* style commands (which are now the default comments) referred to as nix-style commands.
[18:10:38] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[18:10:50] <dminuoso> or rather, it solves it better than nix
[18:11:14] <dminuoso> the cabal resolver has the entirety of hackage at its disposal and will compute a build plan that satisfies all given constraints
[18:11:24] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:11:45] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[18:12:13] <dminuoso> and then, it will fetch and build all packages at the exact versions/styles for that build plan - they are then put and shared in a global store
[18:12:18] <geekosaur> right, stack and cabal do things completely differently here. but you can use freeze files to get cabal to behave like stack
[18:12:18] <dminuoso> differentiated by some hash
[18:12:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[18:13:10] <geekosaur> the downside of the stack way is you're dependent on someone continuing to maintain stackage
[18:13:13] *** Joins: zaquest (~notzaques@5.130.79.72)
[18:13:22] <merijn> and stack itself :p
[18:13:43] <geekosaur> as stack itself has been relegated to "community maintenance" (which in practice seems to mean not much), one can wonder about stackage
[18:13:54] <geekosaur> as merijn just commented :)
[18:17:17] <freeman42x[m]> someone told me: "why are you using Stack? it's 2022 and you know better" :)) tbh. I installed Stack thinking it might provide more functionality than stack and I was also not aware that Cabal fixed the hell related issues. how come there is no cabal/stack feature comparison anywhere? especially considering all the wars fought over which to use
[18:17:29] <freeman42x[m]> s/stack/cabal/
[18:17:37] <dminuoso> I dont think there's a way being fought anywhere.
[18:17:45] <dminuoso> There might be some overzealous individual users
[18:18:34] *** Quits: hud (~hud@uwyo-129-72-161-67.uwyo.edu) (Quit: Client closed)
[18:18:35] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Ping timeout: 240 seconds)
[18:18:36] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[18:18:37] <dminuoso> Here on libera the consensus is generally "Either is fine, chose what you want" - though in recent news there's some rising skepticism about the future of stack due to Snoyman taking a timeout 
[18:19:41] <dminuoso> And it does also beg the question of whether we should build all our projects based on software that has a bus factor of little over 1.0
[18:19:48] <dminuoso> In the first place.
[18:20:23] <geekosaur> that said, nobody really knows the bus factor of cabal
[18:20:33] <geekosaur> except the insiders who don't say much
[18:20:56] *** Joins: max22- (~maxime@2a01cb0883359800280d6109c37c5449.ipv6.abo.wanadoo.fr)
[18:21:10] <merijn> geekosaur: Better than it was before :p
[18:21:19] *** Quits: vickyHaskell (~textual@49.37.161.125) (Ping timeout: 256 seconds)
[18:22:23] <merijn> Emily and a couple others have taken over after hvr disappeared and phadej quit
[18:22:30] *** Quits: telser (~quassel@user/telser) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:24:02] <geekosaur> poor hvr is probably trapped somewhere in the source trying to find a way out :)
[18:24:14] <geekosaur> (either cabal or the matrix builderâ€¦)
[18:25:00] *** Joins: ardell (~ardell@user/ardell)
[18:25:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[18:26:20] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:27:25] *** Joins: telser (~quassel@user/telser)
[18:27:37] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[18:28:20] <freeman42x[m]> any significant features one would miss if switching from Stack to Cabal? or just minor stuff with simple solutions
[18:29:07] <carbolymer> freeman42x[m]: with cabal freeze I guess it's the same; also LTS constains libraries tested against each other so it's a bit of stability guarantee
[18:29:12] <geekosaur> the switch from a resolver mindset to a nix-like mindset is the big one
[18:29:50] <geekosaur> beyond that it should allbe pretty much the same, including that neither one likes to install libraries globally but both will install executables globally if asked
[18:30:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[18:30:06] <carbolymer> and stack likes to install GHC ;-]
[18:30:39] <carbolymer> I need fast, mutable variable (unboxed I guess?) - an array of bytes, I will need to modify it lot (and later pipe to stdout). What would be better, STRef, Foreign.Ptr, or something else?
[18:31:05] <maerwald> freeman42x[m]: automatic installation of GHC
[18:31:12] <maerwald> cabal doesn't have it
[18:31:29] <maerwald> or hpack integration
[18:31:30] <geekosaur> well, yes, I mentioned that one earlier, stackconsiders ghc version to be a project attribute and will automatically install one based on the resolver, cabal assumes you have standardized on a spexific version
[18:31:37] <maerwald> I find both features annoying, but if you like those...
[18:31:56] <geekosaur> hpack is seen as something of a downside these days even by the stack folks
[18:31:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Ping timeout: 240 seconds)
[18:32:04] <maerwald> finally some sanity
[18:32:05] <carbolymer> geekosaur: why is that?
[18:32:30] <maerwald> next step: implement an actual constraint solver for stack
[18:32:54] <geekosaur> because package.yaml isn't as flexible as cabal files and doesn't support as much, so for anything beyond simple projects you need toswitch to cabal files anyway
[18:33:00] *** Quits: polyphem (~rod@2a02:810d:840:8754:22de:a5de:2070:f535) (Ping timeout: 240 seconds)
[18:33:12] <geekosaur> and anyone who doesn't use stack has to install hpack and generate a cabal file to install
[18:33:16] <maerwald> and it's also annoying to deal with generated files, it causes other problems
[18:34:32] *** Quits: Guest89 (~Guest89@2a01:41e1:464f:6b00:42ac:86d9:c817:5197) (Quit: Client closed)
[18:34:34] <carbolymer> right
[18:35:11] <carbolymer> but it would be nice to have some kidn of templating layer over cabal files
[18:36:14] <Artem[m]> carbolymer: like `cabal init`?
[18:36:35] <geekosaur> cabal's kinda trying to serve two masters here
[18:36:54] <geekosaur> on the one hand, developers would like something more flexible
[18:37:02] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 272 seconds)
[18:37:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:37:30] <geekosaur> on the other, one big advantage of current cabal files is they're almost(?) identical to what gets registered in the package database when a package is installed
[18:37:47] <geekosaur> which is why e.g. they don't want to support module wildcards
[18:38:37] *** Joins: dextaa_ (~dextaa@user/dextaa)
[18:38:44] <carbolymer> Artem[m]: rather other way, just to be able to build modular cabal files which can have parts that can be re-used; but considering how often I modify cabal files it has diminishing returns...
[18:38:50] <merijn> geekosaur: Also, because hpack isn't stable
[18:39:10] <merijn> geekosaur: The real problem why Snoyberg stopped recommending hpack is that the cabal files generated change between hpack versions
[18:39:18] <merijn> Which made reproducible builds hard
[18:39:32] <maerwald> nixify everything and pin all binaries, libraries, ...
[18:39:36] <merijn> Unless you just committed the cabal file
[18:39:38] <maerwald> oh wait, that causes security havoc
[18:40:28] <dminuoso> why does that cause security havoc?
[18:40:39] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:40:40] <maerwald> pinning library versions does
[18:40:46] <dminuoso> Your nix hyperboles are getting a bit tiring...
[18:40:54] <maerwald> this isn't nix specific
[18:41:02] <maerwald> freeze files do the same
[18:41:18] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:41:22] <dminuoso> Usually you pin the nixpkgs in nix, and regularly update it. That way you get security updates automatically
[18:41:25] <maerwald> PVP was designed so that you get security bugfixes
[18:41:42] <maerwald> but since it doesn't really work, we're left with excessive dependency pinning
[18:41:57] <dminuoso> Right, so building straight with nix is fairly ugly for a variety of reasons
[18:42:01] <maerwald> that is never good security practice
[18:42:06] <sclv> i mean its the tradeoff. "fully reproducible" means "reproducible bugs and security flaws and all"
[18:42:11] <maerwald> yeah
[18:42:18] <dminuoso> haskell.nix does solve it more adequately, at the cost of "yet another ball of nix in the middle"
[18:42:22] *** Joins: acidjnk (~acidjnk@p200300d0c7363f90286e28f39b70c9d3.dip0.t-ipconnect.de)
[18:46:30] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[18:46:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[18:46:56] *** Quits: m1dnight (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[18:46:57] <carbolymer> so... stack and its LTS is the ultimate stable solution for haskell projects?
[18:47:57] <Clint> stackage â‰  stack
[18:47:57] <maerwald> no, that's stackage (a package set where everything builds with each other and test suites pass)
[18:48:04] <maerwald> those can be used with cabal too
[18:48:04] *** Joins: m1dnight (~christoph@78-22-9-5.access.telenet.be)
[18:48:32] <carbolymer> rly? I didn't know that. How can I point cabal to certain stackage version?
[18:48:55] <maerwald> https://www.stackage.org/lts-18.26/cabal.config
[18:49:02] <maerwald> or use stack2cabal 
[18:49:17] <maerwald> that cabal.config can (or rather should) be user as cabal.project.freeze
[18:49:42] <carbolymer> but either way I should ping GHC version somehow, right?
[18:49:46] <maerwald> https://cabal.readthedocs.io/en/3.6/cabal-project.html?highlight=cabal.project
[18:49:48] <carbolymer> s/ping/pin
[18:50:09] <maerwald> carbolymer: no, GHC is stable within the first two version components
[18:50:38] <carbolymer> maerwald: so there's no stability guarantee between 8.x and 9.x
[18:50:47] <carbolymer> maerwald: so still I should pin its version somehow
[18:51:04] <sclv> you "pin" the ghc version by pinning the version if the "base" library which ships with the ghcs you want to allow
[18:51:21] <carbolymer> that should work
[18:51:43] <maerwald> see `ghcup list -t ghc` to see the mapping of ghc version to base version`
[18:51:45] *** Joins: komikat (~komikat@183.82.154.44)
[18:51:53] <carbolymer> nice
[18:52:18] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 250 seconds)
[18:53:34] *** Joins: polyphem (~rod@2a02:810d:840:8754:2123:9506:671d:c7f0)
[18:54:49] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Write error: Broken pipe)
[18:54:49] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[18:54:49] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[18:54:49] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[18:54:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Write error: Connection reset by peer)
[18:55:02] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[18:55:06] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:55:08] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:55:15] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[18:55:26] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:56:13] *** Quits: komikat (~komikat@183.82.154.44) (Ping timeout: 256 seconds)
[19:00:07] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[19:00:52] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[19:02:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[19:02:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:03:11] *** Joins: komikat (~komikat@183.82.154.44)
[19:04:25] *** Joins: zaquest (~notzaques@5.130.79.72)
[19:07:57] *** Quits: dfg (~dfg@user/dfg) (Quit: I hate quit messages.)
[19:10:05] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[19:11:36] *** Quits: acidjnk (~acidjnk@p200300d0c7363f90286e28f39b70c9d3.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[19:11:52] *** Quits: michalz (~michalz@185.246.204.61) (Ping timeout: 272 seconds)
[19:13:30] *** Joins: michalz (~michalz@185.246.204.61)
[19:19:52] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1)
[19:26:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:26:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:26:11] *** Joins: wroathe (~wroathe@user/wroathe)
[19:26:46] *** Joins: xkuru (~xkuru@user/xkuru)
[19:29:53] *** Quits: peri4n (~peri4n@85.232.9.17) (Ping timeout: 256 seconds)
[19:30:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[19:30:24] *** Quits: mbuf (~Shakthi@122.174.44.9) (Quit: Leaving)
[19:31:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:32:23] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[19:34:00] *** Joins: ub (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de)
[19:34:05] *** Joins: komikat (~komikat@183.82.154.44)
[19:34:24] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c36d:f85d:bf20:a174) (Quit: WeeChat 2.8)
[19:34:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[19:34:42] *** Quits: ubert (~Thunderbi@86.107.21.238) (Ping timeout: 256 seconds)
[19:34:42] *** ub is now known as ubert
[19:41:50] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (Remote host closed the connection)
[19:41:50] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (Remote host closed the connection)
[19:41:50] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[19:41:50] *** Quits: pranaysashank (ef3e56ca8b@2604:bf00:561:2000::3c4) (Remote host closed the connection)
[19:41:50] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Remote host closed the connection)
[19:41:50] *** Quits: jakzale (6291399afa@user/jakzale) (Remote host closed the connection)
[19:41:50] *** Quits: jleightcap (7bc4014b62@user/jleightcap) (Remote host closed the connection)
[19:41:50] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (Remote host closed the connection)
[19:41:50] *** Quits: dawdler (035b60b5aa@user/dawdler) (Remote host closed the connection)
[19:41:50] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (Remote host closed the connection)
[19:41:50] *** Quits: adamcstephens (161730d29b@2604:bf00:561:2000::2d5) (Remote host closed the connection)
[19:41:50] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (Remote host closed the connection)
[19:41:50] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (Remote host closed the connection)
[19:41:50] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (Write error: Connection reset by peer)
[19:41:50] *** Quits: raghavgururajan (ea769b8000@user/raghavgururajan) (Remote host closed the connection)
[19:41:51] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Remote host closed the connection)
[19:41:51] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Remote host closed the connection)
[19:41:56] <freeman42x[m]> I'm trying to figure out how to use the more typesafe API from this code: https://github.com/puffnfresh/fp-course/blob/twitch/projects/TicTacToe/Main.hs The version with more compile time guarantees would be using Move1, Move2, etc. instead of MainMoves which is currently used in run function. The reason I don't understand how to use the api via Move1, Move2 etc. is because I can't figure out any way to use those types in a recursive
[19:41:56] <freeman42x[m]> function (or equiv), since on first loop I'd try to construct Move1, in a later loop Move2 etc. I think this issue might be solved by dependent types, no idea how else. Also I can't figure out how exactly it would be implemented anyway. I hope I explained clearly enough why I don't know how to use the API via Move1, Move2, etc., kind of struggling to put in a clea way the issue I have with solving it
[19:42:30] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[19:42:30] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[19:42:31] *** Joins: dawdler (035b60b5aa@2604:bf00:561:2000::3b6)
[19:42:31] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[19:42:32] *** Joins: jakzale (6291399afa@user/jakzale)
[19:42:32] *** Joins: adamcstephens (161730d29b@2604:bf00:561:2000::2d5)
[19:42:33] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[19:42:38] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[19:42:38] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:42:38] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[19:42:44] *** Quits: dawdler (035b60b5aa@2604:bf00:561:2000::3b6) (Changing host)
[19:42:44] *** Joins: dawdler (035b60b5aa@user/dawdler)
[19:42:50] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[19:42:50] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[19:42:50] *** Joins: jleightcap (7bc4014b62@user/jleightcap)
[19:42:51] *** Joins: pranaysashank (ef3e56ca8b@2604:bf00:561:2000::3c4)
[19:42:54] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[19:42:54] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[19:42:54] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[19:46:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[19:52:25] *** Quits: arievw (~arievw@85.148.234.95) (Quit: Nettalk6 - www.ntalk.de)
[19:55:01] *** Joins: fendor (~fendor@178.115.60.54.wireless.dyn.drei.com)
[20:02:05] <komikat> how do I do GSoC with haskell as my org
[20:02:23] <komikat> do I have to make contribs beforehand or do I contact a mentor right away
[20:03:54] *** Joins: zebrag (~chris@user/zebrag)
[20:04:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 256 seconds)
[20:05:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:11:25] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[20:11:42] *** Quits: MasseR4 (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[20:12:19] *** Joins: MasseR4 (~MasseR@51.15.143.128)
[20:13:20] *** Joins: sagax (~sagax_nb@user/sagax)
[20:13:58] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:15:09] *** Quits: MasseR4 (~MasseR@51.15.143.128) (Client Quit)
[20:16:02] <freeman42x[m]> did my question above make sense? sweating profusely
[20:17:34] <freeman42x[m]> are there solutions for reducing duplications in functions like: https://github.com/puffnfresh/fp-course/blob/01dff1f47424fc2e724a969e44a92ee0c5a30f71/projects/TicTacToe/Main.hs#L38-L76 ? would lenses work for that purpose or what?
[20:18:29] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[20:18:30] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:19:08] <geekosaur> your question made sense, I just can't answer it
[20:19:21] * geekosaur avoids type level shenanigans
[20:20:18] <merijn> ^^ that :p
[20:22:00] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[20:24:53] <freeman42x[m]> seems that to get more compile time safety typically leads to writing more  code. Which makes me wonder if or when is that even worth it. Substantially more code is much more likely to lead to it having bugs. The Move1, Move2 etc. code for the case above could be fully replaced with 1 runtime condition I think (total valid moves always <= 9)
[20:25:40] <geekosaur> but typelevel mitigates the bugs aspect: if it compiles it'sfar more likely to be correct
[20:26:20] <merijn> freeman42x[m]: IMO fancy type-y things are like spices "a little can go a long way" :p
[20:26:27] <geekosaur> that said,in general yes, dependent types or even haskell type-level fake dependent types means a lot more code and a lot more annoyance to keep the compiler happy
[20:26:57] <sm> and the turmeric will stain everything
[20:27:14] <geekosaur> the original paper ondoing typelevelin haskell was called "hasochism" for a reason :)
[20:27:25] <freeman42x[m]> geekosaur: of course, my point is that it's a tradeoff because by writing more code to make code more compile time safe you are writing more code which can lead to more bugs because it's most stuff that could possibly go wrong
[20:28:09] <fendor> komikat, Essentially, you write a proposal what you want to work on, how you plan to tackle it, etc... 
[20:28:11] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Remote host closed the connection)
[20:28:11] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (Remote host closed the connection)
[20:28:11] *** Quits: jleightcap (7bc4014b62@user/jleightcap) (Remote host closed the connection)
[20:28:11] *** Quits: jakzale (6291399afa@user/jakzale) (Remote host closed the connection)
[20:28:11] *** Quits: pranaysashank (ef3e56ca8b@2604:bf00:561:2000::3c4) (Remote host closed the connection)
[20:28:11] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[20:28:11] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (Remote host closed the connection)
[20:28:12] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (Remote host closed the connection)
[20:28:12] *** Quits: dawdler (035b60b5aa@user/dawdler) (Remote host closed the connection)
[20:28:12] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (Remote host closed the connection)
[20:28:12] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (Remote host closed the connection)
[20:28:12] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (Remote host closed the connection)
[20:28:12] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Remote host closed the connection)
[20:28:12] *** Quits: raghavgururajan (ea769b8000@user/raghavgururajan) (Remote host closed the connection)
[20:28:12] *** Quits: adamcstephens (161730d29b@2604:bf00:561:2000::2d5) (Remote host closed the connection)
[20:28:12] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (Remote host closed the connection)
[20:28:17] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Remote host closed the connection)
[20:28:20] <geekosaur> freeman42x[m], the key point is that yes, it'smore stuff that could go wrong, but it's also far more likely to go wrong *at compile time*
[20:28:34] <geekosaur> instead of crashing at runtime
[20:29:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[20:29:03] <geekosaur> sadly, haskell is not well equipped to give you help fixing what you broke
[20:29:09] *** Joins: nehsou^ (~nehsou@50.233.120.162)
[20:29:10] <fendor> In general, you better chances that your proposal is accepted the more details it contains and the more people know you. So, finding a mentor beforehand and contributing to OSS projects will increase your chances usualy
[20:29:48] <komikat> fendor: how exactly do i go about finding a mentor
[20:30:05] <fendor> komikat, Depends on where you want to contribute
[20:30:35] <fendor> People post here ideas sometimes: https://summer.haskell.org/ideas.html
[20:30:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:30:52] <komikat> ah makes sense
[20:31:06] <komikat> fendor: suppose I've decided what I want to contribute
[20:31:14] <komikat> where do I post in order to get a mentor
[20:31:21] <fendor> then big projects have sometimes a meta issue for collecting ideas
[20:31:36] <fendor> who would benefit from your idea/project?
[20:31:53] <komikat> the community in general?
[20:32:07] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[20:32:09] <komikat> like I think I'm interested in working on the language server
[20:32:30] <fendor> great thing! then start by joining #haskell-language-server, and look at the meta issue we have posted
[20:32:49] <fendor> (I am looking for it now)
[20:33:02] <komikat> ah great, thanks
[20:33:09] <geekosaur> https://summer.haskell.org/tips.html suggests they can help you with mentors
[20:33:13] <freeman42x[m]> geekosaur: I am not sure that is the case. Look at this code: https://github.com/puffnfresh/fp-course/blob/01dff1f47424fc2e724a969e44a92ee0c5a30f71/projects/TicTacToe/Main.hs#L38-L76 There are so many ways to make mistakes in it which would not be caught at compile time. For example: setBoardPosition P1 a (Board _ b c d e f g h i) =   Board a b b d e f g h i So there are countless ways where a simple typo could completely break the
[20:33:13] <freeman42x[m]> program without any compile time warning yet the only benefit (as far as I can tell) is just the fact that Board limits at compile time all the possible positions to be exactly 9
[20:33:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Ping timeout: 250 seconds)
[20:33:34] *** Quits: yrlnry (~mjd@pool-74-109-20-19.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[20:33:43] <fendor> komikat, can you view this page? https://github.com/haskell/haskell-language-server/discussions/2700 (no idea whether that's public already)
[20:33:47] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[20:34:07] <komikat> fendor, I can yeah
[20:34:15] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[20:34:15] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[20:34:15] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[20:34:15] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[20:34:15] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[20:34:15] *** Joins: dawdler (035b60b5aa@2604:bf00:561:2000::3b6)
[20:34:24] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[20:34:26] *** Joins: sm2n (ae95cb1267@user/sm2n)
[20:34:28] *** Quits: dawdler (035b60b5aa@2604:bf00:561:2000::3b6) (Changing host)
[20:34:28] *** Joins: dawdler (035b60b5aa@user/dawdler)
[20:34:30] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[20:34:31] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[20:34:31] *** Joins: jakzale (6291399afa@user/jakzale)
[20:34:31] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[20:34:33] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[20:34:35] <geekosaur> freeman42x[m], that's actually just bad code. I'd define Board as a record and the appropriate update becomes `Board {_a = a}` or equivalent
[20:34:35] *** Joins: jleightcap (7bc4014b62@user/jleightcap)
[20:34:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[20:34:37] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[20:34:39] *** Joins: pranaysashank (ef3e56ca8b@2604:bf00:561:2000::3c4)
[20:34:40] *** Joins: adamcstephens (161730d29b@2604:bf00:561:2000::2d5)
[20:35:16] <komikat> hey shreyasminocha, I think I remember you from GCI :P
[20:35:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:35:42] <geekosaur> any language will let you write garbage; the trick is knowing how to use the language to minimize it
[20:36:58] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[20:37:47] <geekosaur> setBoardPosition P1 newA board = board {a = newA}
[20:38:13] <geekosaur> easier to read and much safer
[20:38:28] *** Joins: Akiva (~Akiva@user/Akiva)
[20:38:28] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[20:43:25] <freeman42x[m]> geekosaur: fair point, your solution doesn't introduce more run time bugs. I'm not sure what would convince someone that is always the case though eg. adding compile type safety does not increase number of possible run time bugs caused by typo's or other types of mistakes
[20:45:37] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:46:19] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875)
[20:47:25] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[20:47:48] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[20:48:05] *** Joins: bahamas (~lucian@84.232.140.52)
[20:50:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32) (Ping timeout: 256 seconds)
[20:51:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:52:01] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[20:52:25] *** Joins: komikat (~komikat@183.82.154.44)
[20:54:59] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:55:04] <geekosaur> freeman42x[m], the whole point of type level is moving such errors into the types so they happen at compile time
[20:55:32] *** Quits: ubert (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:55:41] <geekosaur> tbh what that looks like does not make me think type level though, it makes me think Template Haskell. which would again move potential errors to compile time as it referenced values or fields that didn't exist
[20:55:52] *** Joins: ubert (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de)
[20:56:20] *** Joins: edge (~edge@111.92.81.133)
[20:56:55] *** Joins: Sgeo (~Sgeo@user/sgeo)
[20:59:58] *** Quits: edge (~edge@111.92.81.133) (Client Quit)
[21:01:18] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:150f:8c19:261d:f4d9)
[21:02:56] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:05:18] *** Joins: spacenautx (~spacenaut@111.92.81.133)
[21:05:24] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Ping timeout: 240 seconds)
[21:07:01] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[21:07:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:07:33] *** Quits: spacenautx (~spacenaut@111.92.81.133) (Changing host)
[21:07:33] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[21:07:44] <freeman42x[m]> geekosaur: the goal is to get compile time errors yes, that is not what I am asking or questioning. I am asking how would you know whether using compile time bug catching code won't in average introduce more runtime bugs than compile time bugs it catches. Note that in that example above it introduces way more possible runtime bugs than compile time guarantees, even though there is a better solution which you mentioned and does not have
[21:07:44] <freeman42x[m]> this issue. Let's say a developer could somehow always write "good" compile time checked code. Will that: never introduce new runtime bugs? sometimes introduce new runtime bugs? tbh. I doubt this is an easy question
[21:08:09] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Client Quit)
[21:08:27] *** Joins: edge (~spacenaut@111.92.81.133)
[21:08:31] <geekosaur> no, it'snot an easy question, but a lot depends on just knowing how to use your tools
[21:09:00] <geekosaur> I'[m not sure there is ever a guaranteed "perfect" way to do it
[21:09:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[21:10:26] <geekosaur> and some of your tools will catch some errors but potentially introduce others, so you need to decide which errors you care more about => catch at runtime
[21:10:38] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[21:10:54] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:11:13] *** Joins: edge (~spacenaut@111.92.81.133)
[21:11:31] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[21:11:31] <geekosaur> or if one tool will catch more errors than another (as I mentioned earlier, TH might be a better choice than type level here)
[21:11:37] *** Joins: alp (~alp@user/alp)
[21:12:52] <maerwald> don't forget intellectual complexity... which by itself introduces programmer errors
[21:12:59] <maerwald> that includes type level programming
[21:13:10] <maerwald> if you think you can't write bugs with it, you're wrong :p
[21:15:59] *** Joins: econo (uid147250@user/econo)
[21:17:33] <freeman42x[m]> geekosaur: do you have a (link to a) definition for "type level"? I took it to be related to "compile time type safety" but I assume they are not exactly the same
[21:18:03] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:19:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[21:19:32] <geekosaur> "type level programming" in Haskell typically means moving as much value level programming as possible up to the type level so errors will be caught at compile time instead of run time, since run time values often originate from outside the program but the "universe" of types must be completely defined at compile time
[21:19:36] *** Joins: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[21:22:21] <freeman42x[m]> geekosaur: would all "compile time type safety" programming methods fit under "type level programming" or just a part of them?
[21:22:52] <maerwald> you could run your test suite via TH at compile time xD
[21:23:02] <geekosaur> even basic Haskell gives you compile time type safety, but I wouldn't call it type level programming
[21:23:48] *** Quits: yauhsien_ (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[21:23:50] <geekosaur> I mean, arbitrary python or JS code can toss you a None/nil/whatever with no warning, but Haskell makes you use Maybe and deal with the possibility
[21:24:11] <freeman42x[m]> maerwald: can it also launch nukes at compile time? I always wanted to do that!11
[21:24:24] <geekosaur> and you can't even begin to produce a String/Text where a number is expected
[21:24:39] <maerwald> freeman42x[m]: that's only of concern to the president, really
[21:24:45] *** Joins: ub (~Thunderbi@p548c8d84.dip0.t-ipconnect.de)
[21:24:54] *** Quits: ubert (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:24:54] *** ub is now known as ubert
[21:24:59] <geekosaur> typelevel programming can't launch nukes. TH can though
[21:25:44] <maerwald> without the launch codes?
[21:30:41] *** Quits: coot (~coot@213.134.190.95) (Read error: Connection reset by peer)
[21:30:53] *** Joins: coot (~coot@213.134.190.95)
[21:31:14] *** Quits: alp (~alp@user/alp) (Ping timeout: 260 seconds)
[21:31:19] *** Joins: sndr (~sander@user/sander)
[21:31:25] <freeman42x[m]> geekosaur: how do you tell wether something is "typelevel" or not? is there some clear distinction or fuzzy like most of the stuff we humans deal with. philosophers could talk for millenia over what can be considered to be a chair. any good tutorial for typelevel programming? maybe converting non-typelevel code to the typelevel version
[21:32:17] *** Quits: sander (~sander@user/sander) (Ping timeout: 256 seconds)
[21:32:17] *** sndr is now known as sander
[21:32:29] <geekosaur> it's fuzzy. my guideline for typelevel is use of the "singletons" library (or manual defunctionalization which probably ought to be done with singletones instead)
[21:32:35] <geekosaur> *singletons
[21:33:58] <geekosaur> in particular I don't regard smart "ordinary" (non-defunctionalization) use of types to be type level programming for the most part
[21:34:14] <geekosaur> you can look up defunctionalization to see what I'm talking about there
[21:35:20] <bahamas> freeman42x[m]: there's a book https://www.goodreads.com/book/show/42736297-thinking-with-types-type-level-programming-in-haskell
[21:35:42] <geekosaur> we have strict typing, it's often good enough without getting into the weirder stuff
[21:36:10] <Franciman> if you want great type level power, i suggest you totally forget haskell
[21:36:14] <Franciman> it is too hairy
[21:36:14] <bahamas> freeman42x[m]: also, there's this blog post https://lexi-lambda.github.io/blog/2021/03/25/an-introduction-to-typeclass-metaprogramming/
[21:36:21] <Franciman> just switch to idris / agda 
[21:37:03] <Franciman> haskell tries really hard to get you things, with its zillion of ghc extensions, but idris and agda given their naturally more powerful type system, give you those things and more in a cleaner way
[21:37:04] <geekosaur> I'm actually inclined to agree. Idris is often a good place to start on typelevel programming if you already know Haskell
[21:37:09] <Franciman> so it's like coding in C++ or in Haskell
[21:37:16] <Franciman> except that now Haskell is C++, and Idris is Haskell
[21:37:25] <Franciman> ok not this much maybe :P
[21:38:44] <Franciman> now, people still code in C++ with profit
[21:39:49] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:41:21] <maerwald> people do all sorts of stupid things, true
[21:42:21] <Franciman> well, servant for example, seems to me readable
[21:42:25] <Franciman> and a form of type level programming
[21:42:56] <Franciman> so if you don't need _a lot_ haskell gant you enough power in an understandable way
[21:43:12] <Franciman> grants*
[21:43:52] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:46:52] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Remote host closed the connection)
[21:47:38] <maerwald> yeah, I love servant... I bought 5 new screens to be able to read the GHC errors
[21:50:50] <freeman42x[m]> <Franciman> "just switch to idris / agda..." <- there are much more stuff involved in choosing a programming language to use for a project besides just the merits of the language itself. Stuff like community, libraries, language maintainers bus factor, difficulty to learn, interop, etc. etc. A lot of these prevent me from using Idris / Agda for most use cases I have
[21:51:33] <EvanR> "bus factor" ?
[21:52:33] <MosheTeutsch[m]> Lens question: I have values of the form: [("label1", value1), ..., ("label-n", valuen)]
[21:52:33] <MosheTeutsch[m]> and I want to compose lenses/traversals/etc. that operate that will get me some values *from the values*, but keep the labels available at the end.
[21:53:03] <MosheTeutsch[m]> So I want an output of the form [("label1", something1), ... ]
[21:53:06] <Franciman> i agree freeman42x[m] 
[21:53:12] <maerwald> EvanR: there's a wikipedia article on it even :p
[21:53:19] <Franciman> and i understand
[21:53:29] <freeman42x[m]> EvanR: like https://en.wikipedia.org/wiki/Bus_factor languages like Agda / Idris have very few core contributors, typical 1 does most of the work
[21:54:00] <EvanR> it's funny someone just used this term in a totally different context like 1 hour ago
[21:54:04] <EvanR> and i never heard it before
[21:54:21] <geekosaur> not sure haskell is that much better: if bgamari gets hit by a bus it won't matter much how many other ghc devs we have :(
[21:54:22] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:54:34] <EvanR> ah, getting hit by a bus
[21:55:40] <bgamari> Thankfully things are much better now than they used to be; mpickering and AndreasK pull quite a bit of weight
[21:56:05] <maerwald> geekosaur: haha
[21:56:10] <bgamari> but indeed all language projects tend to have pretty small sets of core contributors
[21:56:39] <maerwald> bgamari needs a bodyguard... employed by the HF maybe
[21:58:00] <geekosaur> bgamari, not thinking so much of weight. I kinda get the impression you're the keeper of the master plan and things will go off the rails quickly without that central coordination
[21:58:04] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[21:58:25] <bgamari> mpickering is picking up more of the planning now
[21:59:19] <bgamari> but yes, historically that has been true
[22:01:15] *** Joins: edge (~spacenaut@111.92.81.133)
[22:01:45] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Remote host closed the connection)
[22:02:03] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:02:13] <Rembane> bgamari: Have you ever considered cloning yourself? 
[22:03:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[22:04:14] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[22:04:56] *** Joins: spacenautx (~spacenaut@111.92.81.133)
[22:06:24] *** Quits: spacenautx (~spacenaut@111.92.81.133) (Client Quit)
[22:06:28] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[22:06:33] <freeman42x[m]> any way to tell whether someone is connected via Element (except those read receipt indicators)?
[22:07:02] *** Joins: komikat (~komikat@183.82.154.44)
[22:07:44] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[22:08:57] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[22:09:18] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[22:09:59] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[22:10:30] <hololeap_> geekosaur: what was the command in cabal again that could help locate binaries in dist-newstyle? I saw you mention it a couple times on here
[22:10:46] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[22:10:59] *** Joins: komikat (~komikat@183.82.154.44)
[22:11:01] <sclv> `cabal list-bin`
[22:11:09] *** hololeap_ is now known as hololeap
[22:11:25] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Remote host closed the connection)
[22:12:25] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:12:30] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[22:12:48] <hololeap> thank you
[22:13:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:14:37] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[22:15:22] <geekosaur> freeman42x[m], in general the folks using Matrix have IPv6 addresses of the form 2604:bf00:561:2000::<something>. but this changes occasionally
[22:16:48] *** Joins: benin (~benin@59.88.179.150)
[22:17:55] <geekosaur> mostly I watch for bridge hiccups when a bunch of people with ip6 addrs with the same prefix go missing all at once, many but not all with [m] suffixes
[22:19:21] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:21:36] *** Quits: komikat (~komikat@183.82.154.44) (Quit: Leaving...)
[22:23:16] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[22:24:25] *** Quits: phma (phma@2001:5b0:211f:f48:ea23:e8cf:9b9f:fa4a) (Read error: Connection reset by peer)
[22:25:19] *** Joins: phma (~phma@host-67-44-208-227.hnremote.net)
[22:25:32] *** Joins: cynomys (~cynomys@user/cynomys)
[22:25:42] *** Joins: komikat (~komikat@183.82.154.44)
[22:26:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[22:27:34] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[22:29:17] <freeman42x[m]> <geekosaur> "freeman42x, in general the folks..." <- I don't see any IP address available in Element. is that some IRC command?
[22:30:22] <geekosaur> my IRC client shows me e.g. [21 17:04:15] * lukec (9dfd4d094e@2604:bf00:561:2000::10e) has joined
[22:30:30] <geekosaur> but there is also /WHOIS
[22:30:51] <geekosaur> I wouldn't know what the equivalent on the Matrix side of things is
[22:31:19] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[22:31:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:32:36] *** Quits: deadmarshal (~deadmarsh@95.38.117.184) (Ping timeout: 240 seconds)
[22:33:08] <geekosaur> or how you'd access it from Element
[22:35:48] <komikat> how exactly do you reply in that format on IRC freeman42x[m]
[22:36:10] <komikat> I'm guessing you just used the reply feature on matrix
[22:36:32] <geekosaur> that is presumably a reply command in element
[22:36:51] <komikat> yeah I meant element* never mind
[22:37:03] <freeman42x[m]> yeah, I just used the Element reply and I hope it does not show like some mangled suff on IRC
[22:37:04] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[22:37:13] <geekosaur> what parts of it come from the client, what from the server, and what from the bridge I couldn't tell you
[22:37:29] <geekosaur> there are a lot of moving parts here :)
[22:37:35] <komikat> very interesting
[22:38:08] *** Joins: benin7 (benin@gateway/vpn/protonvpn/benin)
[22:38:32] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[22:38:49] *** Joins: cynomys (~cynomys@user/cynomys)
[22:38:54] <geekosaur> hm,that earlier address might be a different bridge
[22:39:01] *** Joins: bahamas (~lucian@84.232.140.52)
[22:39:30] <geekosaur> 2001:470:69fc:105::<stuff> looks more familiar
[22:39:37] *** Quits: benin (~benin@59.88.179.150) (Ping timeout: 240 seconds)
[22:39:37] *** benin7 is now known as benin
[22:42:13] *** Joins: benin2 (~benin@59.88.179.150)
[22:43:22] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[22:43:43] *** Joins: Zemyla (~Zemyla@2603-8080-4901-6095-a8ef-cc67-cf0b-f093.res6.spectrum.com)
[22:43:57] *** Quits: benin (benin@gateway/vpn/protonvpn/benin) (Ping timeout: 240 seconds)
[22:43:57] *** benin2 is now known as benin
[22:47:42] *** Quits: Zemyla (~Zemyla@2603-8080-4901-6095-a8ef-cc67-cf0b-f093.res6.spectrum.com) (Client Quit)
[22:48:03] *** Joins: Zemyla (~ec2-user@ec2-54-196-172-247.compute-1.amazonaws.com)
[22:50:18] <Zemyla> > 1 + 1
[22:50:20] <lambdabot>  2
[22:51:57] <freeman42x[m]> > let 2 + 2 = 5 in 2 + 2
[22:51:58] *** Quits: bahamas (~lucian@84.232.140.52) (Quit: leaving)
[22:51:58] <lambdabot>  5
[22:55:19] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:01:39] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[23:04:05] *** Joins: yauhsien_ (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[23:04:32] *** Joins: Pickchea (~private@user/pickchea)
[23:06:55] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[23:06:59] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:768b:1849:a78b:4ad) (Ping timeout: 252 seconds)
[23:07:00] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[23:07:28] *** Quits: yauhsien (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[23:11:04] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:14:27] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:14:55] *** Joins: califax (~califax@user/califx)
[23:14:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:15:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:15:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:18:22] *** Lord_of_Life_ is now known as Lord_of_Life
[23:19:00] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[23:19:15] *** Joins: cynomys (~cynomys@user/cynomys)
[23:21:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[23:22:22] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[23:23:12] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[23:24:04] *** Joins: cynomys (~cynomys@user/cynomys)
[23:24:10] *** Quits: jespada (~jespada@148.252.132.52) (Ping timeout: 260 seconds)
[23:27:39] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[23:30:52] <hololeap> I'm surprised there hasn't been any effort to get cabal highlighting support working for skylighting
[23:33:30] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 260 seconds)
[23:35:17] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:35:43] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:36:40] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:59] *** Quits: komikat (~komikat@183.82.154.44) (Remote host closed the connection)
[23:46:34] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[23:46:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:48:53] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:49:08] *** Joins: komikat (~komikat@183.82.154.44)
[23:49:49] <ski> freeman42x[m] : it does show as somewhat mangled
[23:50:59] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Remote host closed the connection)
[23:51:22] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[23:52:22] *** Quits: fendor (~fendor@178.115.60.54.wireless.dyn.drei.com) (Remote host closed the connection)
[23:53:40] *** Quits: komikat (~komikat@183.82.154.44) (Ping timeout: 256 seconds)
[23:55:00] <freeman42x[m]> <ski> "freeman42x : it does show as..." <- how does it look like? any clear indication of where the quoted part ends and the reply starts?
[23:55:30] <ski> <freeman42x[m]> <ski> "freeman42x : it does show as..." <- how does it look like? any clear indication of where the quoted part ends and the reply starts?
[23:55:54] <ski> (not sure whether you typed the "<-" part of that, or not)
[23:56:10] <geekosaur> no, that'sa normal partof the reply from what I've seen
[23:56:13] <maerwald> is there a backend library that supports SSE?
[23:56:26] <geekosaur> still don't know if that's the bridge or matrix or element
[23:56:31] *** Joins: komikat (~komikat@183.82.154.44)
[23:57:41] <ski> freeman42x[m] : the quotes around the message (but not around the nickname who uttered it) does look slightly confusing, to me
[23:58:42] <geekosaur> maerwald, do you want -msse ?
[23:58:48] <maerwald> server-sent events
[23:58:49] *** Joins: cjb (~cjb@user/cjb)
[23:59:32] <monochrom> Oh, web backend and web SSE?
