[01:03:44] <FromDiscord> <Patitotective> how do i convert an int to an int32?
[01:04:26] <FromDiscord> <spoon> think you can just cast it with `int32 varname`
[01:05:07] <FromDiscord> <Patitotective> yea nvm
[01:06:04] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[01:06:37] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[01:43:53] <FromDiscord> <Phil> Erm... how did you tell your project again to use a specific different version for compiling than it did before?‚ÜµI'm playing around with that one and just installed prologue@#head (previously prologue 0.5.4), now I'm trying to compile but the compiler just searches for 0.5.4, not accepting anything else
[01:44:22] <FromDiscord> <Phil> It's not the <projectName>.nimble file is it? That one's only used for nimble install, right?
[01:44:35] <FromDiscord> <Bubblie> Can nim use meson
[01:45:04] <FromDiscord> <creikey> In reply to @Bubblie "Can nim use meson": you can build the generated C with meson
[01:45:06] <FromDiscord> <Bubblie> I asked this question previously but I didnt get an answer so im just asking again
[01:45:18] <FromDiscord> <Bubblie> Oh
[01:45:19] <FromDiscord> <Bubblie> I see
[01:45:44] <FromDiscord> <Bubblie> I love nim‚Äôs package management but it would be nice to be able to use seperate build tools as well
[01:50:24] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:59:22] <FromDiscord> <demotomohiro> How about to configure meson to build Nim project?
[02:00:08] <FromDiscord> <demotomohiro> Or call meson from .nims file
[02:08:12] <FromDiscord> <demotomohiro> !eval echo cast[int32](int.high), ",", cast[int32](-1)
[02:08:16] <NimBot> -1,-1
[02:08:39] <FromDiscord> <demotomohiro> !evall
[02:09:12] <FromDiscord> <demotomohiro> !eval echo (var x = int.high; x).int32
[02:09:16] <NimBot> /usercode/in.nim(1)      in‚Üµ/playground/nim/lib/system/fatal.nim(53) sysFatal‚ÜµError: unhandled exception: value out of range: 9223372036854775807 notin -2147483648 .. 2147483647 [RangeDefect]
[02:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:12:56] <FromDiscord> <demotomohiro> Explicitly conveting int to int32 is safer than casting int to int32 as explicit type convertion do range check.
[02:13:17] <FromDiscord> <Elegantbeef> You use the type converters unless you want the same bit signature
[02:15:02] <nrds> <06Prestige99> Am I the only one bothered by unittest requiring test file names to start with `t` ?
[02:15:10] <FromDiscord> <Elegantbeef> Yep
[02:15:21] <nrds> <06Prestige99> ACTION flips a table
[02:15:37] <FromDiscord> <Elegantbeef> It's an ok idea that means you dont compile files that shouldnt be tested
[02:15:48] <FromDiscord> <Elegantbeef> say you have a module your tests depend upon that you import in them
[02:16:15] <nrds> <06Prestige99> I prefer having like, foo.test.nim or something. Like what if you had a file you _didn't_ want to test but it started with a t?
[02:16:28] <FromDiscord> <Elegantbeef> You dont name it with a t
[02:16:34] <nrds> <06Prestige99> :(
[02:16:37] <FromDiscord> <Elegantbeef> What kinda question is that
[02:17:07] <FromDiscord> <Elegantbeef> Tests arent user facing code, aslong as you can discern the test i dont see the isssue
[02:17:32] <nrds> <06Prestige99> maybe I'm a bit ocd
[02:17:38] <FromDiscord> <Elegantbeef> We disagree on a lot though so clearly disregard me
[02:17:50] <nrds> <06Prestige99> I like my file names to be what I want them to be, not dictated by a framework
[02:17:52] <nrds> <06Prestige99> true
[02:18:36] <FromDiscord> <Elegantbeef> Also dont know if you seen but if you want to run nimsuggest without false errors i can fix them with a few lines of code, though dont know if it'd be accepted as a PR
[02:18:42] <FromDiscord> <Rika> In reply to @Elegantbeef "You dont name it": How is that reasonable I cannot see
[02:19:14] <FromDiscord> <Elegantbeef> No clue
[02:19:21] <FromDiscord> <Elegantbeef> It seems fine to me
[02:19:31] <nrds> <06Prestige99> Elegantbeef I'd like them to be merged as a fix, maybe backported if Nim does that sorta thing for bugs
[02:19:48] <nrds> <06Prestige99> Who do I have to sweet talk to make that a thing?
[02:19:49] <FromDiscord> <Elegantbeef> Yea i'd also like them to but it works around the bug instead of fixing it
[02:21:43] <nrds> <06Prestige99> perhaps I should work on my own mini testing framework
[02:22:29] <FromDiscord> <Elegantbeef> Or you know just fork unittest and make it search for the `test` part of the path
[02:22:33] <FromDiscord> <Elegantbeef> Or you know use balls
[02:23:59] <FromDiscord> <Elegantbeef> I feel like making your own test framework due to a disagreement is quite silly when you could just fork a feature of `searchPath = .test.nim`
[02:24:00] <nrds> <06Prestige99> wasn't a huge fan of either tbh
[02:27:16] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[02:28:10] <FromDiscord> <Elegantbeef> Well i guess write your own
[02:35:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:59:59] <FromDiscord> <creikey> I think Ijust found a compiler error
[03:00:03] <FromDiscord> <creikey> compiler bug
[03:00:05] <FromDiscord> <creikey> 
[03:00:12] <FromDiscord> <creikey> `  d.texture(tex, transform  translate(snappedBounds.wh/2.0))` if I have this it compiles
[03:00:35] <FromDiscord> <creikey> `  d.texture(tex, transform  translate(snappedBounds.wh /2.0))` if I have this it doesn't
[03:00:45] <FromDiscord> <Elegantbeef> no bug
[03:00:50] <FromDiscord> <creikey> no bug?
[03:01:02] <FromDiscord> <Elegantbeef> operators bound tightly as unary if touching
[03:01:02] <FromDiscord> <creikey> is /2.0 a different expression or so mething
[03:01:12] <FromDiscord> <Elegantbeef> `1 +2.0` is parsed as `1 (+2.0)`
[03:01:17] <FromDiscord> <creikey> interseting
[03:01:21] <FromDiscord> <creikey> (edit) "interseting" => "interesting"
[03:01:28] <FromDiscord> <creikey> so nim cares about whitespace in every sense of the word
[03:01:29] <FromDiscord> <Elegantbeef> Spacing is important for operators
[03:02:02] <FromDiscord> <Elegantbeef> There used to be some whitespace overriding of precedence so it used to be even weirder
[03:02:13] <FromDiscord> <Elegantbeef> `2+2  3` used to equal 12 not 8
[03:03:04] <FromDiscord> <Elegantbeef> The tightly bounding operator makes sense though given command syntax `myProc $someValue` only makes sense as `myProc $(someValue)`
[03:05:32] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[03:09:55] <FromDiscord> <demotomohiro> If you get a compiler error and don't understand why your code cause that error, `dumpTree` macro in macros module might helps you by showig how Nim parse your code.
[03:11:01] <FromDiscord> <demotomohiro> !eval import macros; dumpTree(6 /3)
[03:11:05] <NimBot> <no output>
[03:11:53] <FromDiscord> <demotomohiro> Bot does't shows compile time outputs :(
[03:21:16] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:23:19] <FromDiscord> <hmmm> hmm very interesting, I just created two 0k undeletable files trying to write a file with nim üßê
[03:23:38] <FromDiscord> <hmmm> I think it has to do with special chars windows filesystem doesn't allow
[03:36:39] <nrds> <06Prestige99> Why would I be getting an error about alloc0 not existing when using osproc?
[03:38:31] <nrds> <06Prestige99> ah some weird recursive import issue
[03:45:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:46:49] <FromDiscord> <spoon> now create a folder named CON
[04:58:06] <FromDiscord> <Bubblie> With nimble can you change the local repo path?
[04:58:21] <FromDiscord> <Elegantbeef> What do you mean?
[04:59:13] <FromDiscord> <Bubblie> Local git repo path
[04:59:38] <FromDiscord> <Elegantbeef> Do you mean like symlinking it to develop it?
[04:59:49] <FromDiscord> <Elegantbeef> There is a `nimble develop`
[05:00:23] <FromDiscord> <Bubblie> I think that may be it, sorry idk how else to say it
[05:00:37] <FromDiscord> <Bubblie> Ill look at nimble develop
[05:01:24] *** Joins: Stink (~chris@li670-83.members.linode.com)
[05:03:42] <FromDiscord> <Bubblie> Yeah nimble develop seems to be what I needed
[05:04:12] <FromDiscord> <Bubblie> Ty
[05:11:07] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:46:43] <FromDiscord> <Patitotective> In https://nim-lang.org/docs/colors.html how do I `extractRgb` as float values (from 0.0-1.0 instead of 0-255)?
[05:47:35] <FromDiscord> <Elegantbeef> `myCol.extractRgb.mapIt(it.float / 255)`
[05:47:56] <FromDiscord> <Elegantbeef> Hmm that probably makes a seq eh
[05:49:24] <FromDiscord> <Elegantbeef> Actually it doesnt work cause `mapit` expects `typed`
[05:49:32] <FromDiscord> <Elegantbeef> so just iterate over the result and div by 255
[05:50:01] <FromDiscord> <auxym> see also https://github.com/treeform/chroma which has many color types, including some that use float32
[06:12:37] <FromDiscord> <Bubblie> Nim + java = nimava
[06:13:02] <FromDiscord> <Bubblie> Cursed
[06:15:40] <FromDiscord> <treeform> I agree
[06:16:16] <nrds> <06Prestige99> Jim
[06:16:30] <FromDiscord> <Bubblie> since nim has an embeddable vm for scripting its entirely possible
[06:16:32] <FromDiscord> <Bubblie> üòà
[06:16:54] <FromDiscord> <Bubblie> In reply to @nrds "<Prestige> Jim": Perfect
[06:16:54] <FromDiscord> <Elegantbeef> Except Nim's VM is relatively simple and not JVM supporting
[06:16:56] <FromDiscord> <Bubblie> Jim
[06:17:10] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Except Nim's VM is": Yeah id have to alter things to support it
[06:17:15] <FromDiscord> <Bubblie> But its very possible
[06:17:24] <FromDiscord> <Bubblie> Its been done with other langs
[06:17:36] <FromDiscord> <Elegantbeef> I mean Nim's VM is relatively simple
[06:17:42] <FromDiscord> <Bubblie> Ye
[06:17:44] <FromDiscord> <Bubblie> Which is good
[06:30:02] <FromDiscord> <Girvo> Hi all üôÇ
[06:32:44] <FromDiscord> <m4ul3r> With nimcrypto CTR aes256, I'm getting a different decryption with the same key and iv in one program than another. ‚ÜµI have one program that generates the key, iv, and encoded sequence. I am then wanting to implement the decryption in another program
[06:33:59] <FromDiscord> <Elegantbeef> Hello girvo
[06:39:52] <FromDiscord> <m4ul3r> In reply to @m4ul3r "With nimcrypto CTR aes256,": Here is my code:‚Üµhttps://pastebin.com/iK2XRwma
[06:40:51] <FromDiscord> <m4ul3r> (edit) "code:‚Üµhttps://pastebin.com/iK2XRwma" => "code:‚Üµhttps://pastebin.com/iK2XRwma‚ÜµError at the bottom, out should be `sc`"
[06:46:09] <FromDiscord> <Girvo> I'm having a lot of fun getting interactive JTAG debugging of Nim code working haha
[06:46:28] <NimEventer> New question by Steve0Greatness: Join array in nim, see https://stackoverflow.com/questions/71566204/join-array-in-nim
[06:46:49] <FromDiscord> <Elegantbeef> Is that fun like i use the word or the actual meaning of fun?
[06:47:20] <FromDiscord> <Girvo> Both üòÑ
[06:47:44] <FromDiscord> <Girvo> Its genuinely fun to see interactive debugging of an embedded chip working with Nim code. Its _nearly_ working perfectly with PlatformIO
[06:48:03] <FromDiscord> <Girvo> Nearly. Seems to work best with `-d:danger` interestingly
[06:48:12] <FromDiscord> <Elegantbeef> Ah i'm having "fun" tracking down a concept bug üòõ
[06:48:38] <FromDiscord> <Elegantbeef> Why work on my game when i can fix this bug that isnt impacing
[06:48:42] <FromDiscord> <Elegantbeef> impacting me\
[06:48:46] <FromDiscord> <Girvo> Haha, yeah that sounds "fun" for sure
[06:50:54] <FromDiscord> <Girvo> But yeah, `-d:danger` has the regular old PlatformIO debugging working, though obviously minus the Nim info internally to it. Does `-d:danger` override `--lineDir:on`?
[06:51:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:51:53] <FromDiscord> <Elegantbeef> do not think so
[06:52:07] <FromDiscord> <Girvo> Alright, I'm going to have a play
[06:52:10] <FromDiscord> <Elegantbeef> Think you should be using `--debugger:native`
[06:52:24] <FromDiscord> <Girvo> Yeah I am
[06:52:40] <FromDiscord> <Elegantbeef> Doesnt that imply lineDir?
[06:52:59] <FromDiscord> <Girvo> I believe so, I'm just not 100% sure what I should be getting haha
[06:53:15] <FromDiscord> <Girvo> As its also all `--compileOnly` which makes things slightly more interesting I think
[06:53:35] <FromDiscord> <Elegantbeef> Nah it's all the same
[06:53:43] <FromDiscord> <Girvo> With `-d:danger` the PlatformIO GDB stuff breaks on AppMain correctly. Without it, it does not
[06:53:57] <FromDiscord> <Girvo> sent a code paste, see https://play.nim-lang.org/#ix=3T7T
[06:55:49] <FromDiscord> <Girvo> To be honest, it's working well enough for me to debug the C code and map it myself anyway so I'm not too stressed. Would be lovely if there was some way to set a breakpoint in the Nim code and have it map to the C code. Or failing that, I'd love a way to click on a Nim line and have it take me to the corresponding nimcache C code line if it exists haha
[06:56:10] <FromDiscord> <Girvo> I might write an extension for VSCode to do that myself actually, the latter idea anyway
[07:00:21] <FromDiscord> <Elegantbeef> Time to extend the Nim extension üòõ
[07:02:18] <FromDiscord> <Girvo> If people would find that useful, absolutely!
[07:04:17] <FromDiscord> <Girvo> Interestingly, with `-d:danger` the debugger picks up the C source in nimcache correctly. Without it, it gives me assembly output haha
[07:06:55] <FromDiscord> <Girvo> Oh!
[07:07:24] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[07:07:39] <FromDiscord> <Girvo> So: `--debugger:native` and _then_ `-d:danger` -- no `#line` macros in the C source. But with `--debugger:native` _after_ `-d:danger`, there is!
[07:08:33] <FromDiscord> <Elegantbeef> Seems like danger does indeed remove `lineDir`
[07:09:04] <FromDiscord> <Girvo> Yeah but only if passed after `--lineDir` or `--debugger` -- if passed before, it doesn't override it, it seems
[07:09:32] <FromDiscord> <Girvo> I'll have a play and see if I can nail down exactly how to approach this, and I'll document it for others
[07:09:56] <FromDiscord> <Girvo> Holy shit it works haha
[07:10:03] <FromDiscord> <Girvo> Including Nim code debugging properly
[07:10:08] <FromDiscord> <Bubblie> does nim have that ! for flagging whether something should not be true
[07:10:13] <FromDiscord> <Bubblie> like c++ and java
[07:10:13] <FromDiscord> <Bubblie> so
[07:10:18] <FromDiscord> <Bubblie> !isNotClosed
[07:10:18] <FromDiscord> <Elegantbeef> `not x`
[07:10:21] <FromDiscord> <Bubblie> thanks
[07:10:27] <FromDiscord> <Girvo>  https://media.discordapp.net/attachments/371759389889003532/955657175429165056/unknown.png
[07:12:11] <FromDiscord> <Elegantbeef> Congrats
[07:12:53] <FromDiscord> <Girvo> I'm stoked, this is going to make things so much easier haha
[07:14:00] <FromDiscord> <Girvo> Will still need to work out how to get a decent representation of certain nim variables in this, but honestly low-level is better on this embedded stuff anyway.
[07:14:56] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[07:15:29] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[07:48:07] <FromDiscord> <ajusa> anyone know the status of https://nim-lang.org/docs/hcr.html ? Doesn't seem to work with the example I tried, C codegen issues
[07:52:03] <FromDiscord> <Elegantbeef> HCR isnt well supported so that's par for the corse
[07:52:10] <FromDiscord> <Elegantbeef> course even
[07:52:15] <FromDiscord> <Elegantbeef> Maybe even coarse for funsies
[07:54:19] <FromDiscord> <creikey> wait is nim profitable
[07:54:30] <FromDiscord> <creikey> like are there people who get paid full time to work on the compiler
[07:54:49] <FromDiscord> <Elegantbeef> There are 2/3 core team members who work full time afaik
[07:56:36] <FromDiscord> <Elegantbeef> Araq is full time, miran is the paid community manage and i think flywind is soon to be paid in some capacity
[07:56:37] <FromDiscord> <Bubblie> nimgl vulkan bindings are annoying
[07:56:55] <FromDiscord> <Bubblie> the opengl wrapper from nim uses glfw right?
[07:57:12] <FromDiscord> <Bubblie> or, it doesn't
[07:57:13] <FromDiscord> <Elegantbeef> No it doesnt use anything
[07:57:19] <FromDiscord> <Elegantbeef> What's annoying with the vulkan bindings?
[07:57:32] <FromDiscord> <Bubblie> for some reason, I keep coming across this issue with glfwCreateWindow
[07:57:38] <FromDiscord> <Bubblie> which is very odd
[07:57:43] <FromDiscord> <Bubblie> its specifically that
[07:57:56] <FromDiscord> <Elegantbeef> What issues?
[07:58:22] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=
[07:58:31] <FromDiscord> <Bubblie> is there a stacktrace or something I can do to get more info
[07:58:45] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=
[07:58:53] <FromDiscord> <Bubblie> this is also one of the things that comes up
[07:58:58] <FromDiscord> <Elegantbeef> That's a C assertion
[07:59:01] <FromDiscord> <Bubblie> yeah
[07:59:08] <FromDiscord> <Elegantbeef> So the issue is you're passing a nil window
[07:59:17] <FromDiscord> <Elegantbeef> Or non nil window rather
[07:59:27] <FromDiscord> <Bubblie> weird... because even in the glfw usage example in nimgl
[07:59:31] <FromDiscord> <Elegantbeef> Cant get a stacktrace from non nim code
[07:59:31] <FromDiscord> <Bubblie> it does exactly that
[07:59:35] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Cant get a stacktrace": yeah
[07:59:36] <FromDiscord> <Bubblie> thought so
[07:59:52] <FromDiscord> <Bubblie> so im assuming this may be from the bindings themselves, as it then species two things
[08:00:02] <FromDiscord> <Bubblie> my let window
[08:00:02] <FromDiscord> <Bubblie> and
[08:00:11] <FromDiscord> <Bubblie> the glfw.nim line 5130
[08:00:20] <FromDiscord> <Bubblie> where the binding for createWindow is
[08:00:34] <FromDiscord> <Bubblie> this is the code for the proc
[08:00:34] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=3T81
[08:00:41] <FromDiscord> <Bubblie> (edit) 
[08:00:42] <FromDiscord> <Bubblie> well uh
[08:00:46] <FromDiscord> <Bubblie> discord didn't do the indents right
[08:00:47] <FromDiscord> <Bubblie> thanks discord
[08:01:36] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=
[08:01:40] <FromDiscord> <Elegantbeef> It's fine here
[08:01:40] <FromDiscord> <Bubblie> seems to be causing the trouble
[08:01:42] <FromDiscord> <Bubblie> apparantly
[08:01:47] <FromDiscord> <Bubblie> In reply to @Elegantbeef "It's fine here": it works?
[08:01:49] <FromDiscord> <Bubblie> wait what
[08:01:54] <FromDiscord> <Elegantbeef> The code
[08:02:11] <FromDiscord> <Elegantbeef> just noticed you edited
[08:02:17] <FromDiscord> <Elegantbeef> Generally edits from discord do the die and disappear
[08:02:26] <FromDiscord> <Bubblie> you using nimgl's glfw bindings and everything and it worked? Is it okay if I see what you did?
[08:02:28] <FromDiscord> <Bubblie> In reply to @Elegantbeef "*just noticed you edited*": oh
[08:02:29] <FromDiscord> <Bubblie> LMAO
[08:02:42] <FromDiscord> <Bubblie> im not sure if windows is being a piece of shit
[08:02:45] <FromDiscord> <Bubblie> I mean I did restart
[08:02:54] <FromDiscord> <Bubblie> this wouldn't be the first time windows fucked with glfw windowing
[08:03:02] <FromDiscord> <Bubblie> had a problem with lwjgl glfw as well
[08:03:05] <FromDiscord> <Bubblie> where windows was the issue
[08:03:12] <FromDiscord> <Bubblie> so I restarted and it worked
[08:05:39] <FromDiscord> <Elegantbeef> I cant even get the tvulkan example to compile
[08:06:59] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:11:35] <FromDiscord> <Bubblie> Oh lord
[08:11:41] <FromDiscord> <Bubblie> You think the bindings are fucked then?
[08:12:19] <FromDiscord> <Elegantbeef> Well the example might not have been kept up to date
[08:12:48] <FromDiscord> <Bubblie> Yeah
[08:14:19] <FromDiscord> <Bubblie> Its okay if the vulkan bindings cannot work, I might use futhark or c2nim to just use the vulkan dll and glfw stuff instead or just statically link it myself
[08:14:42] <FromDiscord> <Bubblie> Thats less than ideal however
[08:15:25] <FromDiscord> <Elegantbeef> Static linking vulkan seems weird
[08:16:17] <FromDiscord> <Bubblie> Whats also odd is the way nimgl decided to alter some of the glfw methods, weirdly instead of glfwDestroyWindow or ShouldDestroyWindow you assign the glfwwindow variable and then use that variable to destroy it which is window.destroyWindow() which goes against the general flow of glfw entirely its pretty weird
[08:16:25] <FromDiscord> <Bubblie> Other bindings dont do this
[08:16:33] <FromDiscord> <Bubblie> For glfw
[08:16:37] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Static linking vulkan seems": It does
[08:16:51] <FromDiscord> <Bubblie> I could use c2nim it may make things super easy
[08:16:56] <FromDiscord> <Bubblie> Cause then its just, import and be done
[08:17:03] <FromDiscord> <Bubblie> Or futhark maybe
[08:17:10] <FromDiscord> <Bubblie> Am I spelling that right?
[08:17:11] <FromDiscord> <Bubblie> Idk
[08:17:23] <FromDiscord> <Elegantbeef> Well you generally want to dynamically link to give more freedom
[08:17:55] <FromDiscord> <Bubblie> Yeah
[08:18:10] <FromDiscord> <Bubblie> Ill try dynamic linking maybe, if I cant get nimgl to work
[08:18:18] <FromDiscord> <Bubblie> I hope I can because idk whats going on
[08:18:36] <FromDiscord> <Bubblie> If you have any ideas or if you get it working throw it my way if you can
[08:19:44] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:3407:3004:4261:fa04)
[08:19:58] <FromDiscord> <Bubblie> Is there any docs on dynamic linking in nim btw?
[08:20:32] <FromDiscord> <Elegantbeef> Oh i didnt realize i needed a flag
[08:20:44] <FromDiscord> <Bubblie> üëÄ
[08:23:10] <FromDiscord> <Elegantbeef> Example runs here in linux land
[08:23:25] <FromDiscord> <Bubblie> üëÄcan I see what you did
[08:23:38] <FromDiscord> <Elegantbeef> I used their TVulkan example
[08:23:51] <FromDiscord> <Elegantbeef> then i compiled with `-d:vulkan`
[08:24:05] <FromDiscord> <Elegantbeef> And for dynamic linking refer to https://nim-lang.org/docs/manual.html#foreign-function-interface-dynlib-pragma-for-import
[08:24:09] <FromDiscord> <Bubblie> Tysm
[08:28:16] <FromDiscord> <Bubblie> And oh, maybe thats why
[08:28:21] <FromDiscord> <Bubblie> I forgor the flag
[08:28:26] <FromDiscord> <Bubblie> -d:vulkan
[08:28:39] <FromDiscord> <Bubblie> Although the error in which im getting seems unrelated
[08:29:13] <FromDiscord> <Bubblie> Ill try fully compying the example, as I did this with my own code rather than using their example directly
[08:31:07] <FromDiscord> <Bubblie> (edit) "compying" => "copying"
[08:31:08] <FromDiscord> <Elegantbeef> If it doesnt work for you i can only imagine an issue with windows bindings, drivers
[08:31:14] <FromDiscord> <Bubblie> Yeah
[08:31:24] <FromDiscord> <Bubblie> I forked nimgl vulkan
[08:31:32] <FromDiscord> <Bubblie> So I can take a look at a possible fix
[08:32:15] <FromDiscord> <Bubblie> Windows dont be shit challenge IMPOSSIBLE
[08:34:23] <FromDiscord> <Bubblie> I want to switch to fedora soon for programming, but its also good im developing on windows since id want my application run everywhere so working on a shit OS has benefits
[08:34:56] <FromDiscord> <Elegantbeef> Benefits like riding a bike with no seat, it's all a pain in the ass
[08:41:27] <FromDiscord> <Bubblie> Fr
[08:52:46] <nrds> <06Prestige99> Could you just try running the application via wine?
[09:01:12] <FromDiscord> <Elegantbeef> Yea wine build errors @Bubblie
[09:01:29] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T8j
[09:01:54] <FromDiscord> <Elegantbeef> Ah that's gfw init
[09:06:52] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:20:11] <FromDiscord> <Girvo> In reply to @Elegantbeef "If it doesnt work": Of which there are many üòÑ so much "fun"...
[09:21:02] <FromDiscord> <Elegantbeef> There you go
[09:25:38] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[09:37:15] <FromDiscord> <Shinyzenith> Is it possible to use OOP in nim? I was thinking of implementing some functions on this type with a parameter of Self https://media.discordapp.net/attachments/371759389889003532/955694122121986058/unknown.png
[09:38:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T8p
[09:38:18] <FromDiscord> <Elegantbeef> For instance
[09:38:43] <FromDiscord> <Shinyzenith> well I have done that
[09:39:00] <FromDiscord> <Shinyzenith> but is that all the choice I have?
[09:39:03] <FromDiscord> <Shinyzenith> that's what I wanted to ask
[09:39:13] <FromDiscord> <Elegantbeef> I mean you can use libraries to emulate classes
[09:39:23] <FromDiscord> <Elegantbeef> What's the issue with  the above though?
[09:39:41] <FromDiscord> <Shinyzenith> Nothing, I was just wondering if there are other choice
[09:39:42] <FromDiscord> <Shinyzenith> (edit) "choice" => "choices"
[09:39:50] <FromDiscord> <Elegantbeef> oolib is one example of a macro that implements a classlike behaviour
[09:40:07] <FromDiscord> <Shinyzenith> what's that
[09:40:36] <FromDiscord> <Elegantbeef> If you want to be able to override the behaviour have inheritance you can make `HerbServer = ref object of RootObj` then you can later do `MyChild = ref object of HerbServer` and use methods
[09:40:40] <FromDiscord> <Elegantbeef> Oolib is library
[09:41:01] <FromDiscord> <Shinyzenith> Oh ok
[09:41:03] <FromDiscord> <Shinyzenith> thank you
[09:41:38] <FromDiscord> <Shinyzenith> is it possible to store procedures in a typedef?
[09:42:15] <FromDiscord> <Elegantbeef> You mean have pointer procs?
[09:42:28] <FromDiscord> <Shinyzenith> loved that feature from zig, just straight up storing functions in structs https://media.discordapp.net/attachments/371759389889003532/955695433395630080/unknown.png
[09:42:33] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "You mean have pointer": Nope
[09:42:36] <FromDiscord> <Shinyzenith> just raw procedures
[09:42:48] <FromDiscord> <Elegantbeef> No Nim type sections are purely type sections
[09:42:58] <FromDiscord> <Shinyzenith> Ok understood
[09:42:59] <FromDiscord> <Shinyzenith> thanks!
[09:43:12] <FromDiscord> <Elegantbeef> would that be accessed `Server.init`?
[09:43:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/XWw
[09:43:59] <FromDiscord> <Elegantbeef> Though it'd be more idiomatic to return the server
[09:44:14] <FromDiscord> <Elegantbeef> `proc init(_: type Server): Server` for instance
[09:46:40] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "would that be accessed": yep
[09:46:54] <FromDiscord> <Elegantbeef> Then the above would work for you
[09:47:08] <FromDiscord> <Shinyzenith> Cool! i'll try it
[09:48:28] <FromDiscord> <Shinyzenith> yep that's how I called it in zig https://media.discordapp.net/attachments/371759389889003532/955696946784395284/unknown.png
[09:48:49] <FromDiscord> <Elegantbeef> Oh it's for an instance
[09:49:14] <FromDiscord> <Shinyzenith> yep not the raw type, that wouldn't make much sense
[09:49:18] <FromDiscord> <Elegantbeef> If it's for an instance just do `proc init(server: var Server)`
[09:49:20] <FromDiscord> <Shinyzenith> nor would I t work I think
[09:49:30] <FromDiscord> <Elegantbeef> It does make sense in Nim atleast
[09:49:45] <FromDiscord> <Shinyzenith> well in the init function I am populating the struct
[09:49:46] <FromDiscord> <Shinyzenith> so
[09:49:49] <FromDiscord> <Shinyzenith> I think that should work
[09:49:59] <FromDiscord> <Shinyzenith> (the example you posted above)
[09:50:09] <FromDiscord> <Elegantbeef> You can populate the result in the `proc init(_: type Server): Server`
[09:50:18] <FromDiscord> <Elegantbeef> They're the same thing just different use semantics
[09:50:22] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "You can populate the": Yeah I'll do that
[09:50:35] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "They're the same thing": I come from the line of scala and java lol, so the above appeals the most to me
[09:50:48] <FromDiscord> <Shinyzenith> ü§£
[09:51:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/bTH
[09:51:24] <FromDiscord> <Elegantbeef> Is one way of doing it
[09:51:30] <FromDiscord> <Shinyzenith> I see
[09:51:35] <FromDiscord> <Shinyzenith> Just one question
[09:51:51] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3T8q
[09:52:14] <FromDiscord> <Elegantbeef> Cause that's what i thought the semantics were in Zig
[09:52:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T8r
[09:52:33] <FromDiscord> <Elegantbeef> I thought it was forced to be used `Server.init(myVar)`
[09:52:33] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "Or the zig port": yep
[09:52:40] <FromDiscord> <Elegantbeef> Cause you said it was
[09:52:41] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "I thought it was": Nope
[09:52:52] <FromDiscord> <Elegantbeef> Well you said it was which is why
[09:52:53] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "Cause you said it": I think I didn't explain it properly
[09:53:07] <FromDiscord> <Elegantbeef> Yea i got it now
[09:53:11] <FromDiscord> <Elegantbeef> It's dispatched on instance not on type
[09:53:38] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3T8s
[09:53:42] <FromDiscord> <Shinyzenith> why pass a type and a server struct to it
[09:54:17] <FromDiscord> <Elegantbeef> Like i said it was based off what i understood the semantics was
[09:54:18] <FromDiscord> <Shinyzenith> idk if self exists in nim, in which case proc init():HerbServer=
[09:54:27] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "Like i said it": Ah Ok, got it
[09:54:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T8t
[09:54:45] <FromDiscord> <Elegantbeef> Since it's a free standing function and nim doesnt have return inference
[09:55:04] <FromDiscord> <Shinyzenith> got it, but why the _:type Server?
[09:55:16] <FromDiscord> <Elegantbeef> Cause you need to dispatch based off the type
[09:55:16] <FromDiscord> <Shinyzenith> this is the return type, right? https://media.discordapp.net/attachments/371759389889003532/955698655032123462/unknown.png
[09:55:31] <FromDiscord> <Elegantbeef> `init(): X` and `init(): Y` are ambigious and nim cannot disambiguate
[09:55:40] <FromDiscord> <Elegantbeef> Nim does not do inference based off return type
[09:55:46] <FromDiscord> <Shinyzenith> huh I see
[09:56:01] <FromDiscord> <Elegantbeef> So you need to pass in `Server` so you can do `Server.init`
[09:56:35] <FromDiscord> <Shinyzenith> Oh yea, i remember reading that ‚Üµmyfunct(param1) ‚Üµand param1.myfunct are the same
[09:56:36] <FromDiscord> <Shinyzenith> in nim
[09:56:39] <FromDiscord> <Shinyzenith> So it makes sense now
[09:57:02] <FromDiscord> <Elegantbeef> Yes it's UFCS or MCS as nim calls it and it's wonderful
[09:57:27] <FromDiscord> <Shinyzenith> Good stuff üòÅ
[09:57:38] <FromDiscord> <Elegantbeef> Allows you to easily expand the functionality of types you dont even author
[09:58:43] <FromDiscord> <Shinyzenith> hmm while doing that, the result keyword lost all syntax highlighting ‚Üµi assume I did something wrong? https://media.discordapp.net/attachments/371759389889003532/955699525283106876/unknown.png
[09:59:09] <FromDiscord> <Shinyzenith> or is result not a valid keyword here?
[09:59:18] <FromDiscord> <Elegantbeef> Syntax highlighting isnt compilation
[09:59:27] <FromDiscord> <Shinyzenith> well yes
[09:59:30] <FromDiscord> <Elegantbeef> It's a proc with a return type `result` exists
[09:59:33] <FromDiscord> <Shinyzenith> but most of the time somethnig fucks up
[09:59:40] <FromDiscord> <Elegantbeef> You're defining the proc in the type section
[09:59:52] <FromDiscord> <Elegantbeef> You cannot define procs in the type section
[10:00:18] <FromDiscord> <Shinyzenith> Oh no I just fucked up the indentation
[10:00:44] <FromDiscord> <Elegantbeef> That's what i said in different words
[10:01:10] <FromDiscord> <Shinyzenith> yus I was acknowledging that üôè
[10:02:05] <FromDiscord> <Elegantbeef> Thought the "oh no" was to me
[10:02:26] <FromDiscord> <Shinyzenith> :catno:
[10:02:52] <FromDiscord> <Shinyzenith> anyways, I'm liking nim for complex c projects
[10:03:01] <FromDiscord> <Shinyzenith> i think it will be my first class candidate after zig and cpp
[10:03:13] <FromDiscord> <Shinyzenith> (edit) "i think it will be my first class candidate after zig and cpp ... " 03added "for c interop"
[10:03:31] <FromDiscord> <Elegantbeef> That far down the list
[10:03:32] <FromDiscord> <Elegantbeef> Shame üòÄ
[10:03:52] <FromDiscord> <Shinyzenith> well zig has support for inline functions, it's annoying to redefine them every single time
[10:04:03] <FromDiscord> <Shinyzenith> maybe if pmunch patches support for it, it'll definitely be neck to neck with zig
[10:04:11] <FromDiscord> <Shinyzenith> (edit) "well zig has support for inline functions, it's annoying to redefine them every single time ... " 03added "in ni"
[10:04:14] <FromDiscord> <Shinyzenith> (edit) "ni" => "nim"
[10:04:35] <FromDiscord> <Elegantbeef> Wonder if he can just make a template which emits the C code internally
[10:05:01] <FromDiscord> <Shinyzenith> hm that sounds like a possible workaround
[10:05:15] <FromDiscord> <Elegantbeef> How many times do we have to say his name to summon him
[10:05:23] <FromDiscord> <Shinyzenith> ü§£
[10:05:35] <FromDiscord> <Shinyzenith> @PMunch @PMunch üëÅÔ∏è Hi
[10:05:45] <FromDiscord> <Elegantbeef> Beetlejuice
[10:05:46] <FromDiscord> <Elegantbeef> Wait that's not it
[10:05:58] <FromDiscord> <Shinyzenith> that's not pmunch?
[10:06:18] <FromDiscord> <Elegantbeef> No beetlejuice is surprisingly not pmunch
[10:06:32] <FromDiscord> <Shinyzenith> what now https://media.discordapp.net/attachments/371759389889003532/955701491610566686/unknown.png
[10:06:33] <FromDiscord> <Elegantbeef> He uses matrix  and irc anyway so he'll be here when he's here
[10:06:45] <FromDiscord> <Shinyzenith> In reply to @Elegantbeef "He uses matrix ": Oh ok
[10:07:07] <FromDiscord> <Elegantbeef> It's probably morning  for him so he'll be on soon TM
[10:07:46] <FromDiscord> <Shinyzenith> Ah ok
[10:08:53] *** Joins: sagax (~sagax_nb@user/sagax)
[10:11:12] <FromDiscord> <Elegantbeef> Suppose he could also emit a procedure that's annotated inline and just emits the C code aswell
[10:11:19] <FromDiscord> <Elegantbeef> Should in theory solve the issue
[10:13:26] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/955703227129659412/unknown.png
[10:13:37] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/955703275720675368/unknown.png
[10:13:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 256 seconds)
[10:13:50] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/955703329277751306/unknown.png
[10:13:54] <FromDiscord> <Shinyzenith> we had a small chat about the issue
[10:14:48] <FromDiscord> <Elegantbeef> Oh right we're looking at headers not implementation
[10:14:58] <FromDiscord> <Elegantbeef> I'm a dumb dumb
[10:15:36] *** Joins: toulene (~toulene@user/toulene)
[10:15:45] <FromDiscord> <Elegantbeef> If you can get the implementation my idea doesnt seem to bad to me, but good luck doing that automatically
[10:16:25] <FromDiscord> <Shinyzenith> yeah , hence zig and cpp on top for now üôè
[10:19:49] <FromDiscord> <Elegantbeef> Do you have an example C file with an inline proc?
[10:22:53] <FromDiscord> <Elegantbeef> Found that issue
[10:35:23] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[11:08:55] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[11:09:28] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[11:20:47] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[11:21:20] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[11:24:05] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[12:11:58] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[13:08:39] <NimEventer> New Nimble package! run_exe - A mini DSL for Nim that provides syntactic sugar for running/piping shell commands. , see https://github.com/V0idMatr1x/run_exe
[13:09:14] <FromDiscord> <pmunch> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\: these are header files where the inline procedures have their implementation in the header.
[13:09:42] <FromDiscord> <Elegantbeef> Yea i realize how dumb my calling myself dumb was after
[13:09:47] <FromDiscord> <pmunch> What you where proposing is pretty much exactly what I intend to do in order to support them
[13:10:11] <FromDiscord> <Elegantbeef> I was thinking how C++ and Zig could use them, then realized my dumb dumb was a dumb dumb dumb
[13:10:17] <FromDiscord> <pmunch> But you have to be careful so that all the parameter names match up
[13:10:34] <FromDiscord> <pmunch> And that they can call other inlines from their bodies
[13:10:52] <FromDiscord> <pmunch> It's just a bit tricky though, should be able to make it work.
[13:11:09] <FromDiscord> <Elegantbeef> The calling other inlines shouldnt be a big deal given first in first out of C
[13:11:47] <FromDiscord> <pmunch> Of course, but it means I can't rename anything. I need to make sure the inline procedures have the exact same name as in C
[13:12:17] <FromDiscord> <Elegantbeef> Yea it's a bunch of tedious work done in string lits üòõ
[13:13:09] <FromDiscord> <pmunch> Pretty much
[13:13:21] <FromDiscord> <pmunch> Which is a pita, but not impossible
[13:14:01] <FromDiscord> <Elegantbeef> Which suprises me üòÄ
[13:14:02] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/kvq
[13:14:17] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 240 seconds)
[13:17:00] <FromDiscord> <pmunch> Already thought of that üòâ
[13:17:08] <FromDiscord> <Elegantbeef> Pmunch writes another tick on his notepad of "I already know that beef tells me still"
[13:17:23] <FromDiscord> <Rika> bingo
[13:17:47] <FromDiscord> <Elegantbeef> Bango bongo
[13:17:57] <FromDiscord> <pmunch> Gotta have an exportc and inline on the body as well of course. But the problem is if you're building directly against the sources like in the STB example and not linking to a library
[13:18:27] <FromDiscord> <pmunch> Now you will have two of the same definition bearing the same name..
[13:19:12] <FromDiscord> <Elegantbeef> Well this is only for header only so clearly time for a new distinct string üòõ
[13:19:42] <FromDiscord> <Elegantbeef> `implPath"stb_image.h"`!
[13:21:25] <FromDiscord> <Elegantbeef> Unless you want to automagically want to detect it by analyzing the entire file
[13:45:19] <FromDiscord> <enthus1ast> do we have a module that implements parseutils like procs (parseUntil, skipWhile) etc, but for sequences of objects?
[13:47:01] <FromDiscord> <Phil> In reply to @enthus1ast "do we have a": like, parse every individual entry in a seq from type A to B?
[13:47:18] <FromDiscord> <Phil> (edit) "B?" => "B causing the creation of a new seq?"
[13:47:21] <FromDiscord> <enthus1ast> yep
[13:47:22] <FromDiscord> <Elegantbeef> Sounds like they want to define a matcher for a type and use a parser to iterate over it
[13:47:29] <FromDiscord> <Phil> Wouldn't you just use sequtils?
[13:47:47] <FromDiscord> <enthus1ast> i could use sequtils, but i like the api of parseutils
[13:47:56] <FromDiscord> <Phil> seq.map(entry -> parseToMyOtherType(entry))
[13:48:02] <FromDiscord> <enthus1ast> i mean, i could just build it
[13:48:03] <FromDiscord> <Phil> Fair, I haven't looked at that one so no clue
[13:48:06] <FromDiscord> <Elegantbeef> Say you have "10, 20, 30, 40, 50" and you want to just do `i += parseSeq[int](myString, i)`
[13:48:18] <FromDiscord> <Elegantbeef> I guess also adding to that value
[13:49:53] <FromDiscord> <Elegantbeef> There isnt an api that i know of aside from frosty, but it's not really like parseutils
[13:50:13] <FromDiscord> <Elegantbeef> Would be cool to support more intelligent parse ops inside parseutils
[13:51:34] <FromDiscord> <Phil> Ohhh you have the entire seq as a string, not a string of seq
[13:51:43] <FromDiscord> <Phil> Okay, my misunderstanding
[14:02:14] <FromDiscord> <System64 ~ Flandre Scarlet> macros in Nim are the equivalent of #define in C?
[14:02:42] <NimEventer> New Nimble package! nimSocks - A filtering SOCKS proxy server and client library written in nim., see https://github.com/enthus1ast/nimSocks
[14:05:13] <FromDiscord> <enthus1ast> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\: i'm building a parser, i want to do something like this (on lexer Tokens)   pos += lexerTokens.parseUntil(newTokenList, it.kind == TokSeperator, pos)
[14:05:39] <FromDiscord> <Phil> Why socks of all things?
[14:06:12] <FromDiscord> <enthus1ast> i could use pattern matching for this, but this is to complicated for me \:/
[14:06:38] <FromDiscord> <enthus1ast> @Phil\: i try to build a scss parser in nim
[14:07:47] <FromDiscord> <enthus1ast> i'm imagine a package that resembles the parseutils api but for sequences \:)
[14:08:01] <FromDiscord> <Rika> In reply to @System64 "macros in Nim are": Not exactly
[14:08:27] <FromDiscord> <enthus1ast> maybe i could work on it and maybe make a pr to sequtils
[14:09:14] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[14:09:39] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3T9h
[14:09:51] <FromDiscord> <Rika> Make a template then
[14:10:16] <FromDiscord> <enthus1ast> ah socks ... i'm still sleepy lol‚Üµ(@Phil)
[14:10:35] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright, thanks
[14:12:17] <FromDiscord> <enthus1ast> also for socks, i think its a bummer that the httpclient api cannot do custom proxy implementations
[14:12:45] <FromDiscord> <enthus1ast> would have patched it to also use socks proxies long ago
[14:18:27] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Rika "Make a template then": I have a small problem now https://media.discordapp.net/attachments/371759389889003532/955764889610252338/unknown.png
[14:18:47] <FromDiscord> <Rika> Don‚Äôt put return
[14:19:43] <FromDiscord> <System64 ~ Flandre Scarlet> Now it's worse https://media.discordapp.net/attachments/371759389889003532/955765207513317457/unknown.png
[14:21:13] <FromDiscord> <Rika> Have you tried compiling it
[14:21:32] <FromDiscord> <Rika> Ah
[14:21:47] <FromDiscord> <Rika> That division makes a float but all of the other types are integers
[14:22:07] <FromDiscord> <System64 ~ Flandre Scarlet> what should I do?‚ÜµAll values are untyped
[14:22:25] <FromDiscord> <Rika> Convert them? With .float or something
[14:22:54] <FromDiscord> <Rika> Also be more explicit with the type, like use SomeInteger instead and returning a float
[14:24:22] <FromDiscord> <System64 ~ Flandre Scarlet> I can want interpolate floats one day
[14:24:29] <FromDiscord> <enthus1ast> there also is https://github.com/nim-lang/Nim/blob/devel/lib/pure/lenientops.nim
[14:25:32] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @enthus1ast "there also is https://github.com/nim-lang/Nim/blob/": I can create new operators?
[14:25:38] <FromDiscord> <enthus1ast> sure
[14:25:56] <FromDiscord> <System64 ~ Flandre Scarlet> oh interesting!
[14:26:33] <FromDiscord> <enthus1ast> imho when you import lenientops your code might start to work
[14:26:47] <FromDiscord> <Rika> It probably would
[14:31:19] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[14:35:59] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[14:37:51] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[14:45:20] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[14:47:16] *** Joins: toulene (~toulene@user/toulene)
[14:51:46] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:3407:3004:4261:fa04) (Remote host closed the connection)
[14:59:38] <NimEventer> New thread by Dabod: How to debug macros used with concept?, see https://forum.nim-lang.org/t/9027
[15:04:55] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[15:06:53] *** Joins: toulene (~toulene@user/toulene)
[15:07:45] <FromDiscord> <Phil> I keep reading up on the repository pattern and when it's a bad idea and I keep running into walls about it.‚ÜµLike, I read the article, it says "avoid repositories with too many methods such as 'findBySurname(surname)', 'findByFirstName(firstName)' etc. " ‚Üµ‚Üµbut.... if I need those, the best I can do is reduce function calls by genericizing that away into a "findByField(fieldName, value)" and at that point your services need to know abou
[15:11:10] <FromDiscord> <Phil> If anyone has any good material about it I'd gladly give it a read
[15:11:26] <FromDiscord> <Rika> find(filter) where filter is an arbitrary procedure that gets passed information and returns a Boolean whether the entry is to be kept or not?
[15:11:50] <FromDiscord> <Rika> That way you can make any kind of find by procedure
[15:12:12] <FromDiscord> <Rika> Maybe you should look into functional programming for a change of pace or ideology
[15:15:36] <FromDiscord> <Phil> You mean instead of writing separate SQL for the repository-query to a relational database, query all and filter within the nim-code using the proc?
[15:16:32] <FromDiscord> <Rika> Ah
[15:16:35] <FromDiscord> <Rika> This is for databases
[15:17:01] <FromDiscord> <Rika> Give me a moment I will think
[15:20:48] <FromDiscord> <Phil> Thanks for taking the time either way!
[15:21:27] <FromDiscord> <sheldon> sent a long message, see https://paste.rs/Afa
[15:21:48] <FromDiscord> <sheldon> build_all.sh doesn't work.
[15:22:07] <FromDiscord> <Phil> Apparently a lot of the time people work against "too large repositories" by splitting the read-operations from the write operations... which, well, helps against modules of overgrown size but I'm not sure if that addresses the core problem of "too many functions"
[15:22:31] <FromDiscord> <Rika> You can do the ‚ÄúFilter object‚Äù approach I guess
[15:22:46] <FromDiscord> <Rika> Where you pass a filter object with optional fields and whatsoever
[15:23:00] <FromDiscord> <Rika> Basically encoding your desired filters there instead of in procedures
[15:24:21] <FromDiscord> <Phil> If I were to imagine this in code, that filter object would be something that I build the SQL query with?
[15:25:20] <FromDiscord> <Rika> I guess? Seems so yeah
[15:25:28] <FromDiscord> <Rika> It‚Äôs something you use to make the query
[15:49:18] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Ah that's gfw init": Called it
[15:49:20] <FromDiscord> <Bubblie> Windows is fucking shit
[15:49:28] <FromDiscord> <Bubblie> Ill try and make a fix
[15:50:04] *** Joins: gsalazar (~gsalazar@194.38.148.130)
[15:52:37] <FromDiscord> <Bubblie> sent a long message, see http://ix.io/3T9Q
[15:53:52] <FromDiscord> <Rika> Easy way to fix: don‚Äôt use any sort of GUI or even TUI
[15:53:53] <FromDiscord> <enthus1ast> from rants import windows, macos
[15:53:59] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[15:54:03] <FromDiscord> <Rika> Even then though it‚Äôs a pain
[16:01:33] <FromDiscord> <Phil> sent a long message, see https://paste.rs/663
[16:01:40] <FromDiscord> <Phil> Which one of these is the best solution I'll need to meditate over
[16:02:04] <FromDiscord> <Phil> (edit) "http://ix.io/3T9V" => "http://ix.io/3T9W"
[16:02:35] <FromDiscord> <Rika> I think the way I proposed is more elegant in the user facing sense but hairy to implement
[16:03:07] <FromDiscord> <Phil> I'll need to read up on that approach more to even get an idea for an implementation
[16:03:29] <FromDiscord> <Phil> Because I'm way too polluted by java to think of one that would make sense for nim
[16:03:56] <FromDiscord> <Bubblie> DONT use ANY graphics programs for mac unless its MoltenVK for vulkan
[16:03:59] <FromDiscord> <Bubblie> Holy shit
[16:04:02] <FromDiscord> <Bubblie> Opengl is deprecated for mac
[16:04:08] <FromDiscord> <Bubblie> They want you to use metal
[16:04:12] <FromDiscord> <Bubblie> Thankfully molten exists holy shit
[16:04:13] <FromDiscord> <Phil> wait what?
[16:04:16] <FromDiscord> <Bubblie> Yeah
[16:04:21] <FromDiscord> <Phil> Isn't opengl a pretty wide standard?
[16:04:26] <FromDiscord> <Phil> widely used
[16:04:31] <FromDiscord> <Rika> Well too bad Apple decided fuck that shit
[16:04:36] <FromDiscord> <Bubblie> Widely used, but apple fucks up everything
[16:04:44] <FromDiscord> <Bubblie> They want programs to use their stuff
[16:04:47] <FromDiscord> <Phil> ~~Still not as bad as nvidia~~
[16:04:47] <FromDiscord> <Bubblie> So they force it on you
[16:04:51] <FromDiscord> <Bubblie> In reply to @Isofruit "~~Still not as bad": Agreed
[16:04:55] <FromDiscord> <Bubblie> I hate nvidia
[16:04:58] <FromDiscord> <Bubblie> With a passion
[16:05:03] <FromDiscord> <Bubblie> Apple still sucks though
[16:05:24] <FromDiscord> <Phil> Fair, I never developed anything for apple so I couldn't get around to that side of disliking them
[16:05:42] <FromDiscord> <Rika> Apple deprecates things really quickly
[16:05:46] <FromDiscord> <Phil> My approach of dislike stems pretty much from the amount of money they're willing to pour into their products to make them shite to repair
[16:06:03] <FromDiscord> <Phil> That and walled garden is annoying
[16:06:53] <FromDiscord> <enthus1ast> And all the bugs, and the apple users that still tell you "it just works", and the forums where noone seems to have a clue about anything
[16:07:18] <FromDiscord> <Rika> It just works until it doesn‚Äôt
[16:07:23] <FromDiscord> <auxym> In reply to @Girvo "Will still need to": please do document this somewhere! Very interested üôÇ
[16:07:23] <FromDiscord> <Phil> But enthus1ast, there is no need for those forums
[16:07:25] <FromDiscord> <Phil> It just works
[16:07:37] <FromDiscord> <enthus1ast> because all works?
[16:07:41] <FromDiscord> <Phil> Precisely
[16:07:47] <FromDiscord> <Phil> It's apple, so it just works
[16:07:51] <FromDiscord> <Phil> Or you're using it wrong
[16:08:14] <FromDiscord> <enthus1ast> it just works! And if not, just buy new stuff
[16:08:28] <FromDiscord> <Rika> If it doesn‚Äôt work then you‚Äôre wrong
[16:08:38] <FromDiscord> <Phil> If a chargeport breaks because of very foreseeable wear and tear then you just plugged and unplugged wrong
[16:08:50] <FromDiscord> <Rika> It‚Äôs not even ‚Äúyou‚Äôre using it wrong‚Äù, you‚Äôre just outright wrong
[16:09:11] <FromDiscord> <Phil> Ah yes, the next level of wrong
[16:09:36] <FromDiscord> <enthus1ast> "On my Mac Book Proo 2018 it just works"
[16:09:51] <FromDiscord> <enthus1ast> 'my'
[16:10:26] <FromDiscord> <enthus1ast> Oh man i cannot be triggered every time someone says apple
[16:10:35] <FromDiscord> <Phil> How about oranges?
[16:10:36] <FromDiscord> <enthus1ast> bad for heart
[16:11:27] <FromDiscord> <enthus1ast> My issue is, i have to support apple users and deal with the apple crap and bugs every das
[16:11:28] <FromDiscord> <enthus1ast> day
[16:11:29] <FromDiscord> <Rika> Pear
[16:12:04] <FromDiscord> <Phil> In reply to @enthus1ast "My issue is, i": I still remember in the python implementation of nimstoryfont I was so proud when it finally worked
[16:12:15] <FromDiscord> <Phil> Wanted to show my dad during vacation time
[16:13:05] <FromDiscord> <Phil> Turns out safari straight up does not do a certain type of redirect (I think from a non "/" ending url to one that ends in "/", something that Django did automatically for you to make your URLs more correct)
[16:13:12] <FromDiscord> <Rika> Thank god I‚Äôm not one to write desktop applications and instead I have to deal with bespoke operating systems and databases and other bullshit okay I don‚Äôt think this is something to thank god for anymore
[16:13:15] <FromDiscord> <Phil> Which they changed a couple months ago
[16:13:24] <FromDiscord> <Phil> (edit) "ago" => "ago, and suddenly my application worked again"
[16:13:41] <FromDiscord> <Rika> In reply to @Isofruit "Turns out safari straight": Well technically they are different URLs
[16:14:16] <FromDiscord> <System64 ~ Flandre Scarlet> when using the --opt:speed flag, does it use the -o3 argument in GCC?
[16:14:20] <FromDiscord> <Phil> In reply to @Rika "Well technically they are": They are, it's just very hard to account for that kind of stuff if you don't know about it and neither firefox, nor chrome have that sort of behaviour
[16:14:36] <FromDiscord> <Rika> In reply to @System64 "when using the --opt:speed": I think only 2
[16:14:52] <FromDiscord> <Rika> 3 is funky and I recommend never using it lol
[16:14:52] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Rika "I think only 2": Ah alright, and how to setup to -o3?¬µ
[16:14:57] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright
[16:15:02] <FromDiscord> <System64 ~ Flandre Scarlet> why is it funky?
[16:15:15] <FromDiscord> <Rika> Some stuff become nonstandard
[16:15:24] <FromDiscord> <System64 ~ Flandre Scarlet> ah so dangerous I guess?
[16:16:55] <FromDiscord> <Rika> I searched it up and it seems they moved the nonstandard stuff to -Ofast
[16:17:27] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright so now -o3 is safe?
[16:18:32] <FromDiscord> <Rika> Probably? But the effect is likely minuscule in runtime speed and large in compile time speed
[16:19:02] <FromDiscord> <System64 ~ Flandre Scarlet> Ah alright
[16:23:04] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[16:23:30] <FromDiscord> <Zoom> @Hamid_Bluri\: You promptly giving up on iterrr made me finally poking around ZF's code \:P. Fixed their enumerate, but judging they closed my issue about it earlier, there won't be a merge.
[16:25:58] <FromDiscord> <Rika> Why did he give up
[16:28:39] <FromDiscord> <Zoom> @Rika)
[16:29:15] <FromDiscord> <Zoom> https://github.com/hamidb80/iterrr/issues/18
[16:31:18] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:32:40] *** Joins: toulene (~toulene@user/toulene)
[16:49:51] <NimEventer> New thread by Mros: Multiple definition of NimMainInner, see https://forum.nim-lang.org/t/9029
[17:15:23] <FromDiscord> <Bubblie> Apple doesnt even have fuckijg vulkan
[17:15:39] <FromDiscord> <Bubblie> You have to use molten
[17:15:44] <FromDiscord> <Bubblie> In order to use vulkan on mac
[17:15:50] <FromDiscord> <Bubblie> So im glad molten exists
[17:15:52] <FromDiscord> <Bubblie> But DAMN
[17:16:15] <FromDiscord> <Bubblie> If there is one thing I like about microsoft its the fact they dont deprecate and limit programming
[17:16:20] <FromDiscord> <Bubblie> Its just, windows is shit
[17:27:59] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[17:28:32] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[17:29:33] *** Joins: rockcavera (~rc@192.12.113.72)
[17:29:33] *** Quits: rockcavera (~rc@192.12.113.72) (Changing host)
[17:29:33] *** Joins: rockcavera (~rc@user/rockcavera)
[17:29:35] <FromDiscord> <enthus1ast> at least smb works on windows
[17:29:44] <FromDiscord> <enthus1ast> and office
[17:30:43] <FromDiscord> <enthus1ast> and email
[17:30:59] <FromDiscord> <enthus1ast> argh i'm triggered again, sorry will stop offtopic stuff now
[17:40:15] <FromDiscord> <Phil> One of these days I'll get smb share stuff to actually work well on arch-gnome-nautilus instead of having to mount manually
[17:42:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[17:45:02] *** Joins: toulene (~toulene@user/toulene)
[17:48:05] <FromDiscord> <Bubblie> I have an idea
[17:48:23] <FromDiscord> <Bubblie> So, im gonna fix the nimgl vulkan bindings, but im gonna edit things so its not as weird
[17:48:47] <FromDiscord> <Bubblie> Cause, the way it does things is not normal in general, it messes with the way you use glfw
[17:52:13] <FromDiscord> <Bubblie> And for vulkan init, thats not normal with vulkan either, the way vulkan is meant to be initialized is through your own creation of the pipeline, the problem with having it initialized for you is because now you cant properly add things for your pipeline
[17:52:26] <FromDiscord> <Bubblie> Its the reason why the vulkan triangle tutorial has you set up everything yourself
[17:55:49] <FromDiscord> <Bubblie> These bindings could be done better
[17:56:14] <FromDiscord> <Bubblie> Also, the neat thing about vulkan bindings is that all the headers are generated from an xml file, which helps with bindings surprisingly
[17:56:18] <FromDiscord> <Bubblie> Even though its xml
[17:56:21] <FromDiscord> <Bubblie> üíÄ
[18:01:03] <FromDiscord> <Zoom> Use systemd to mount smb on boot /offtopic‚Üµ(@Phil)
[18:18:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:28:12] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[18:28:44] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[18:52:35] <FromDiscord> <Forest> Why is Nim's JS backend still around? Wouldn't WASM be better since WASM can be ran in many runtimes and is still just as portable?
[18:52:42] <FromDiscord> <Forest> Also I'd imagine it'd be faster too
[18:53:18] <FromDiscord> <Forest> Sure you could use Emscripten but wouldn't it just generally make more sense to compile to WASM directly?
[18:54:51] <FromDiscord> <demotomohiro> Why make more sense to compile to WASM directly?‚ÜµNim has C generator and I think reuse it for WASM make sense.
[18:54:52] *** Joins: arkurious (~arkurious@user/arkurious)
[18:55:19] <FromDiscord> <demotomohiro> And you can easily use C/C++ libraries also for WASM.
[18:55:31] <FromDiscord> <Rika> does wasm have dom manipulation now
[18:55:35] <FromDiscord> <Rika> it didnt before
[18:55:43] <FromDiscord> <Rika> nims js gen has been around for a long time
[19:03:45] <FromDiscord> <demotomohiro> Maybe when Nim compile to WASM directly, Nim have to optimize code itself. When Nim compile to C and emscripten compile C to WASM, Clang or emcc optimize code and Nim doesn't need to optimize code so much.
[19:06:02] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[19:06:34] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[19:26:57] <FromDiscord> <fbpyr> last times I used wasm it always needed at least a loader (e.g. go wasm) ‚Üµor some generated js glue code (e.g. rust via yew) . ‚Üµcan nowadays everything be done now from wasm as from js? ü§î
[19:37:19] *** Joins: ma7mad (~ma7mad@ip5f5af6bb.dynamic.kabel-deutschland.de)
[19:47:08] <FromDiscord> <Phil> I would doubt it
[19:55:57] *** Quits: ma7mad (~ma7mad@ip5f5af6bb.dynamic.kabel-deutschland.de) (Quit: Client closed)
[20:04:42] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:05:24] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[20:08:26] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:10:04] <FromDiscord> <Forest> Ah okay, fair enough
[20:11:12] *** Joins: rockcavera (~rc@192.12.113.72)
[20:11:12] *** Quits: rockcavera (~rc@192.12.113.72) (Changing host)
[20:11:12] *** Joins: rockcavera (~rc@user/rockcavera)
[20:13:29] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:16:31] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:18:22] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[20:26:57] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[20:27:28] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[20:43:38] <FromDiscord> <enthus1ast> why do wasm when you want to live in js land?
[20:44:42] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:46:38] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[21:00:02] <FromDiscord> <Hamid_Bluri> In reply to @Zoom "<@745944009918251010>\: You promptly giving": honestly, today i thought about some crazy tricks to make it work,  but it doesn't seem much readable
[21:01:14] <FromDiscord> <Hamid_Bluri> i mean, currently you can easily define your custom reducer, but defining a transformer (AKA adapter) is not as easy as defining a reducer
[21:02:29] <FromDiscord> <Hamid_Bluri> the solution in my mind contains `wrapLoop`, `transformer` pragamas, which is not very nice
[21:04:09] <FromDiscord> <Hamid_Bluri> maybe I tried it on weekend, but i don't think it worth it. because there are so many edge cases
[21:04:17] <FromDiscord> <Hamid_Bluri> (edit) "I tried" => "I'll try"
[21:04:36] <FromDiscord> <Hamid_Bluri> (edit) "it" => "it's gonna"
[21:06:19] <FromDiscord> <hmmm> hmmm
[21:06:39] <FromDiscord> <Hamid_Bluri> in the meantime, you can give me more examples that can encourage me to do so
[21:06:40] <FromDiscord> <hmmm> broskis remind me why thingy-1 is different from thingy -1 which is different from thingy - 1
[21:06:58] <FromDiscord> <Hamid_Bluri> In reply to @hmmm "broskis remind me why": what
[21:07:07] <FromDiscord> <Rika> thingy-1 is the same as thingy - 1
[21:07:13] <FromDiscord> <Rika> thingy -1 is the same as thingy(-1)
[21:07:16] <FromDiscord> <Hamid_Bluri> oh infix prefix üòÑ
[21:07:27] <FromDiscord> <hmmm> rika now I'm even more confus
[21:07:38] <FromDiscord> <Rika> do you remember how procedures are called
[21:07:46] <FromDiscord> <Rika> the multiple ways
[21:07:50] <FromDiscord> <hmmm> basically I need to type thingy - 1 with two spaces or things don't work ü§î
[21:07:57] <FromDiscord> <Rika> either two or none
[21:08:05] <FromDiscord> <Rika> as long as the spacing is consistent on each side
[21:08:59] <FromDiscord> <Rika> because let's say you use `echo` as thingy
[21:09:04] <FromDiscord> <enthus1ast> its actually quite simple‚Üµthingy - 1 and thingy-1 is\: `-`(thingy, 1)    while  thingy -1 is\: thingy(-1)
[21:09:06] <FromDiscord> <hmmm> you are right, zero spaces works the same
[21:09:12] <FromDiscord> <Hamid_Bluri> sent a long message, see http://ix.io/3TbD
[21:09:29] <FromDiscord> <Rika> `1- 1` should probably ideally be invalid but afaik rn it is but a warning
[21:10:25] <FromDiscord> <hmmm> and the reason is because we call functions without parenthesis and nim gets confused?
[21:10:40] <FromDiscord> <Hamid_Bluri> !eval 1- 1
[21:10:41] <FromDiscord> <Rika> not that nim gets confused
[21:10:42] <NimBot> Compile failed: /usercode/in.nim(1, 2) Error: expression '0' is of type 'int literal(0)' and has to be used (or discarded)
[21:10:54] <FromDiscord> <Hamid_Bluri> !eval echo 1- 1
[21:10:58] <NimBot> 0
[21:11:04] <FromDiscord> <Rika> well i guess you can say it does get confused
[21:11:10] <FromDiscord> <Rika> but its ambiguous anyway
[21:13:23] <FromDiscord> <hmmm> also can I do something like $(thingy - 1) without nim thinking it's weird stuff?
[21:13:40] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3TbF
[21:14:06] <FromDiscord> <enthus1ast> $(thingy - 1) is perfectly valid
[21:14:07] <FromDiscord> <Rika> In reply to @hmmm "also can I do": wdym?
[21:14:10] <FromDiscord> <Rika> it looks fine
[21:14:30] <FromDiscord> <enthus1ast> thingy decremented then made to string
[21:15:00] <FromDiscord> <Rika> In reply to @hamidb80 "I don't know how": maybe try exporting $? idk, possibly some sort of bug
[21:15:00] <FromDiscord> <hmmm> perfect, I always think I'm tupling things or calling functions when using parenthesis
[21:15:07] <FromDiscord> <Rika> or not bug but
[21:15:19] <FromDiscord> <Rika> "unexpected but specified behaviour"
[21:15:36] <FromDiscord> <Hamid_Bluri> is there any articles expalning distinct types ? üòï
[21:16:06] <FromDiscord> <Rika> what's difficult?
[21:16:28] <FromDiscord> <Rika> In reply to @hmmm "perfect, I always think": tuple -> space before function call
[21:16:42] <FromDiscord> <Rika> ...usually
[21:33:37] <FromDiscord> <Solitude> In reply to @hmmm "perfect, I always think": do you only think about code without ever actually running it?
[21:37:00] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:37:50] <FromDiscord> <auxym> In reply to @hamidb80 "is there any articles": there's the manual https://nim-lang.org/docs/manual.html#types-distinct-type
[21:38:04] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[21:40:30] <FromDiscord> <hmmm> In reply to @Solitude "do you only think": bold of you assuming I'm thinking when I code üòÉ
[21:41:39] <FromDiscord> <hmmm> tbh things are getting better, I'm less stumped then before ü§î
[21:43:36] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 268 seconds)
[21:47:32] <FromDiscord> <kevin> is it possible to have variables inside of a formatstring for length, padding character, etc?
[21:48:25] <FromDiscord> <kevin> `&"{str:<10}"`‚ÜµTo‚Üµ`&"{str:<{len}}"`
[21:48:32] <FromDiscord> <kevin> or something like that
[21:49:56] <FromDiscord> <Solitude> !eval import strformat; let str = "test"; let len = 1; echo &"{str:<{len}}"
[21:49:59] <NimBot> Compile failed: /playground/nim/lib/system/fatal.nim(53, 5) Error: unhandled exception: /playground/nim/lib/pure/strformat.nim(660, 18) `false` invalid format string: '}' instead of '}}' [AssertionDefect]
[22:01:23] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (Quit: WeeChat 3.3)
[22:03:11] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[22:16:30] <FromDiscord> <Bubblie> If I compile nim to cpp, and I use nim templates, does it compile to cpp‚Äôs templates?
[22:17:11] <FromDiscord> <Rika> no
[22:17:22] <FromDiscord> <Bubblie> What does it compile to
[22:17:36] <FromDiscord> <Rika> nothing, they are gone after compiletime
[22:19:33] <FromDiscord> <Bubblie> ? Okay but nim can compile to cpp so how does that template code look in the cpp code you just compiled nim to
[22:20:04] <FromDiscord> <Solitude> nim templates have nothing to do with cpp templates
[22:20:05] <FromDiscord> <Rika> it looks like as if the nim templates were substituted with their bodies
[22:20:06] <FromDiscord> <Solitude> its like asking how nim macros look when compiling to c
[22:20:17] <FromDiscord> <Bubblie> Oh okay got it
[22:26:30] <FromDiscord> <demotomohiro> @kevin Text after ':' in '{}' in strformat is parsed by this proc and you cannot put variables. https://github.com/nim-lang/Nim/blob/c4a0d4c5e35f09430a1c3d465fc62eb1001b7f9f/lib/pure/strformat.nim#L419
[22:27:45] <FromDiscord> <kevin> makes sense. I restored to writing my own padding function that does take variable length padding
[22:27:58] <FromDiscord> <demotomohiro> generics in Nim is similar to template in C++. template in nim is similar to macro in C.
[22:28:01] <FromDiscord> <Rika> you can create custom formatters for strformat, i just forgot how
[22:28:34] <FromDiscord> <Bubblie> Alright, yeah I know nim templates are very different but I was confused to whether it was somehow able to compile to cpp templates
[22:30:10] <FromDiscord> <hmmm> friendsies how do I extract the last element of a slice range
[22:30:28] <FromDiscord> <hmmm> .high and [^-1] don't seem to work
[22:31:31] <FromDiscord> <demotomohiro> !eval echo [1, 2, 3, 4][1..2][^1]
[22:31:35] <NimBot> 3
[22:31:58] <FromDiscord> <Rika> !eval echo (1..2).high
[22:32:00] <NimBot> Compile failed: /usercode/in.nim(1, 12) Error: type mismatch: got <HSlice[system.int, system.int]>
[22:32:04] <FromDiscord> <Rika> did you mean this?
[22:32:08] <FromDiscord> <hmmm> ye
[22:32:10] <FromDiscord> <Rika> !eval echo (1..2).B
[22:32:13] <NimBot> Compile failed: /usercode/in.nim(1, 12) Error: undeclared field: 'B' for type system.HSlice [type declared in /playground/nim/lib/system.nim(497, 3)]
[22:32:14] <FromDiscord> <Rika> or was it b
[22:32:20] <FromDiscord> <Rika> !eval echo (1..2).b
[22:32:24] <NimBot> 2
[22:32:34] <FromDiscord> <hmmm> ü§®
[22:32:36] <FromDiscord> <hmmm> what is b
[22:32:41] <FromDiscord> <Rika> a is 1
[22:32:42] <FromDiscord> <Rika> b is 2
[22:32:49] <FromDiscord> <Rika> lmfao
[22:32:54] <FromDiscord> <Rika> you must be confused as hell
[22:33:01] <FromDiscord> <Rika> go to the type def of HSlice in system
[22:33:30] <FromDiscord> <hmmm> .b actually works üëÄ
[22:33:34] <FromDiscord> <hmmm> wtf
[22:34:10] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/system.html#HSlice
[22:35:58] <FromDiscord> <Phil> I will be honest, b would have been the last thing I would have assumed would be the name for one of the boundaries
[22:36:08] <FromDiscord> <demotomohiro> !eval echo (let r = 1..3; r).typeof
[22:36:11] <NimBot> HSlice[system.int, system.int]
[22:36:49] <FromDiscord> <Phil> That feels like a pretty weird name
[22:36:56] <FromDiscord> <Rika> Homogeneous Slice
[22:37:10] <FromDiscord> <Rika> because the start and end may have differing types
[22:37:10] <FromDiscord> <hmmm> ha! Phil confirms I'm not getting completely insane ü•≥
[22:37:30] <FromDiscord> <Rika> are you sure it isnt just that both of you are insane
[22:37:43] <FromDiscord> <Phil> No no, I only use nisane
[22:37:48] <FromDiscord> <Phil> Barry different
[22:37:51] <FromDiscord> <Phil> Very
[22:37:57] <FromDiscord> <Phil> Damnit autocorrect
[22:38:11] <FromDiscord> <Rika> Barry
[22:38:34] <FromDiscord> <Phil> If anyone is insane, then it's Barry
[22:38:53] <FromDiscord> <hmmm> Barry is known crackpot imo
[22:42:05] <FromDiscord> <Phil> Anyway, even if types in the slice can vary, why not just "upper" and "lower" since apparently that's accurate enough to describe these bounds with comments
[22:42:07] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/system.html#HSlice‚ÜµThat document says "Heterogeneous" slice type
[22:42:20] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:3407:3004:4261:fa04)
[22:42:49] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:43:03] <FromDiscord> <hmmm> the only legit slice type is pizza
[22:43:30] <FromDiscord> <Rika> oh hetero homo still confuses me
[22:43:31] <FromDiscord> <Rika> whatever
[22:43:36] <FromDiscord> <Phil> Eh, I'm pretty sure I'm just not understanding one thing about it and that's leading me down dumb roads
[22:43:36] <FromDiscord> <Vindaar> In reply to @hmmm "the only legit slice": you do you, I'm enjoying my slice of banana bread alone then üòã
[22:43:43] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:43:48] <FromDiscord> <Rika> In reply to @Vindaar "you do you, I'm": wtf i want
[22:44:48] <FromDiscord> <Vindaar> hop onto a plane. If you're quick it's still good by the time you arrive!
[22:45:23] <FromDiscord> <Phil> EU?
[22:45:36] *** Joins: vicfred (~vicfred@user/vicfred)
[22:45:46] <FromDiscord> <Vindaar> Yeah, Germany
[22:46:22] <FromDiscord> <Phil> Mwahahaha your banana bread is at most 6h away from me if you're not super far south
[22:47:04] <FromDiscord> <Vindaar> near Cologne, so hurry üòõ
[22:47:40] <FromDiscord> <Phil> With the speed of light!
[22:47:45] <FromDiscord> <Phil> I mean ICE
[22:47:47] <FromDiscord> <Rika> Damn man I live in Asia‚Ä¶
[22:47:57] <FromDiscord> <Phil> Almost same thing!
[22:48:38] <FromDiscord> <Phil> Plane or really long train ride for you it is
[22:48:51] <FromDiscord> <Rika> im not on mainland
[22:48:53] <FromDiscord> <Rika> plane
[22:49:23] <FromDiscord> <Vindaar> also better avoid that train through Russia atm
[22:50:34] <FromDiscord> <untoreh> How can I convert an `untyped` variable into a string?
[22:50:45] <FromDiscord> <Vindaar> `astToStr` is probably what you want
[22:56:05] <FromDiscord> <untoreh> I want to write something like `withX: code...` and wrap all the code into a string
[22:57:26] <FromDiscord> <Vindaar> either I misunderstand, or this is precisely what `astToStr` does: https://play.nim-lang.org/#ix=3Tc2
[22:57:46] <FromDiscord> <Vindaar> misunderstand what you want I mean
[23:01:13] <FromDiscord> <untoreh> sent a code paste, see https://play.nim-lang.org/#ix=3Tc6
[23:06:06] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[23:07:43] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3Tc9
[23:07:55] <FromDiscord> <hmmm> and then autocloses at the end
[23:08:01] <FromDiscord> <hmmm> I want that in nim too
[23:09:01] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:3407:3004:4261:fa04) (Ping timeout: 240 seconds)
[23:10:21] <FromDiscord> <demotomohiro> @untoreh Maybe `toStrLit` in macros module is what you need: https://nim-lang.org/docs/macros.html#toStrLit%2CNimNode
[23:11:05] <FromDiscord> <Rika> doesnt nim arc/orc use RAII?
[23:11:22] <FromDiscord> <Rika> so wouldnt blocks then opening then just exiting the block close the file?
[23:11:28] <FromDiscord> <Rika> (edit) "blocks" => "entering a block"
[23:11:52] <FromDiscord> <demotomohiro> @hmmm with in Nim is different from python: https://nim-lang.org/docs/with.html
[23:12:49] <FromDiscord> <Vindaar> @hmmm write your own, it's cheap in nim https://play.nim-lang.org/#ix=3Tcc
[23:12:56] <FromDiscord> <Vindaar> (feel free to adjust to your needs üòâ )
[23:13:40] <FromDiscord> <b4mbus> In reply to @Rika "so wouldnt entering a": I was pretty positive one of nim's mm tactis was some raii shit
[23:13:44] <FromDiscord> <b4mbus> but idk I cant find it
[23:14:06] <FromDiscord> <Rika> i just said that
[23:14:25] <FromDiscord> <b4mbus> no, you asked a question
[23:14:37] <FromDiscord> <Rika> In reply to @Rika "doesnt nim arc/orc use": .
[23:14:44] <FromDiscord> <b4mbus> and that's a questionm
[23:14:45] <FromDiscord> <b4mbus> (edit) "questionm" => "question"
[23:14:54] <FromDiscord> <Rika> questions can be rhetorical
[23:15:06] <FromDiscord> <b4mbus> ^ this guy https://media.discordapp.net/attachments/371759389889003532/955899940993912873/unknown.png
[23:15:14] <FromDiscord> <b4mbus> (edit) "^" => "\\/"
[23:15:17] <FromDiscord> <Rika> i dont know what you want,
[23:15:38] <FromDiscord> <hmmm> hmm I'm still taking template and macro lessons from elegantbeef, iirc we left it at printing dumped ast nodes, so I don't think I'm quite up to it rn Vind
[23:16:20] <FromDiscord> <Solitude> In reply to @hmmm "hmm I'm still taking": just write someshit, its that easy
[23:16:47] <FromDiscord> <hmmm> yeye it's like learning to ride bycicle
[23:17:54] <FromDiscord> <Vindaar> In reply to @hmmm "hmm I'm still taking": just ask about what you don't understand in that template. The `{.inject.}` makes the variable available for the user using the template in the body of it. The rest is pretty straight forward. `body` is just the block given to the template, that is inserted verbatim into that spot in the template
[23:18:45] <FromDiscord> <Vindaar> the template essentially just generates this code:
[23:18:55] <FromDiscord> <Vindaar> sent a code paste, see https://play.nim-lang.org/#ix=3Tcd
[23:19:29] <FromDiscord> <hmmm> hmmmmmm
[23:19:39] <FromDiscord> <hmmm> the first question would be why do we untype fvar
[23:19:50] <FromDiscord> <hmmm> why we return untyped
[23:19:54] <FromDiscord> <Vindaar> @Rika I could be wrong, but I don't think there's `=destroy` hooks for things like `File` objects under ARC by default that close the file again
[23:20:12] <FromDiscord> <Vindaar> but you can easily implement some RAII behavior with arc
[23:20:15] <FromDiscord> <Rika> probably trivial to implement
[23:20:24] <FromDiscord> <Vindaar> In reply to @hmmm "why we return untyped": that's just saying "we return code"
[23:20:38] <FromDiscord> <Rika> and it would be better IMO than the template
[23:21:47] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[23:23:03] *** Joins: xet7 (~xet7@user/xet7)
[23:23:07] <FromDiscord> <exelotl> In reply to @Vindaar "<@!259277943275126785> I could be": I hope this comes for Nim 2.0
[23:23:24] <FromDiscord> <Rika> i mean you could just implement it yourself right now no?
[23:23:33] <FromDiscord> <demotomohiro> If your template/macro always turn an expression that is int type, you can specify int as return type
[23:23:34] <FromDiscord> <hmmm> sent a code paste, see https://paste.rs/B6m
[23:23:48] <FromDiscord> <Rika> In reply to @hmmm "vind and why the": to pass the indented block of code as a parameter to the template
[23:24:05] <FromDiscord> <demotomohiro> return
[23:24:29] <FromDiscord> <Rika> you spelled return properly
[23:24:33] <FromDiscord> <Rika> yes
[23:24:34] <FromDiscord> <hmmm> woa pretty neat
[23:24:35] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3Tcf
[23:24:49] <FromDiscord> <Vindaar> yeah, would have been clearer had I written multiple lines, but I was lazy
[23:25:47] <FromDiscord> <Solitude> In reply to @Rika "i mean you could": hooks have to be defined in the same module as their type
[23:26:03] <FromDiscord> <Rika> oh yeah i was wondering about that, i forgot about it
[23:26:04] <FromDiscord> <Rika> okay
[23:30:31] <FromDiscord> <Shinyzenith> should I just stick var infront of my parameter? https://media.discordapp.net/attachments/371759389889003532/955903813099880478/unknown.png
[23:32:04] <FromDiscord> <auxym> you should put var in front of the declaration of whatever identifier your are passing in
[23:32:28] <FromDiscord> <auxym> if you do actually intend to mutate it
[23:32:44] <FromDiscord> <Shinyzenith> well I do not, it's just so nim doesn't copy it under the hood
[23:32:49] <FromDiscord> <Shinyzenith> which was an issue earlier
[23:33:57] <FromDiscord> <Shinyzenith> In reply to @auxym "you should put var": yep thanks, worked
[23:34:02] <FromDiscord> <Shinyzenith> I don't know why I didn't think of it
[23:34:08] <FromDiscord> <Shinyzenith> 1 am coding does this to me ü•¥
[23:34:25] <FromDiscord> <auxym> nim normally does not make a copy unless the object is larger than some size threshold, IIRC 24 bytes
[23:34:58] <FromDiscord> <Shinyzenith> In reply to @auxym "nim normally does not": https://canary.discord.com/channels/371759389889003530/371759389889003532/954882215945330719‚Üµhttps://canary.discord.com/channels/371759389889003530/371759389889003532/954882376125775903
[23:35:02] <FromDiscord> <auxym> for smaller objects, the reasoning is that making a copy is actually faster than the cost of a dereference
[23:35:19] <FromDiscord> <Shinyzenith> In reply to @auxym "for smaller objects, the": Yeah makes sense
[23:35:33] <FromDiscord> <auxym> In reply to @Shinyzenith "https://canary.discord.com/channels/371759389889003": yes, as beef said, "small enough"
[23:35:52] <FromDiscord> <Shinyzenith> alskdjad for fucks sake, I had this issue before‚Üµended up just moving the function call to another file which fixed it but I still don't get why this throws https://media.discordapp.net/attachments/371759389889003532/955905166685659146/unknown.png
[23:36:29] <FromDiscord> <auxym> segfaults yay. good luck.
[23:36:37] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/955905354611425280/unknown.png
[23:36:38] <FromDiscord> <Shinyzenith> ü•≤
[23:36:43] <FromDiscord> <Shinyzenith> strace moment I guess
[23:37:43] <FromDiscord> <Solitude> In reply to @auxym "nim normally does not": looks like he uses some wrapped shit, so it gets declared wtih `{.bycopy.}` which overrides this
[23:37:59] <FromDiscord> <Shinyzenith> Yeah I'm using futhark
[23:38:22] <FromDiscord> <auxym> In reply to @Solitude "looks like he uses": ah. does that also override a hypothetical `lent` or `sink` annotation?
[23:38:33] <FromDiscord> <Shinyzenith> and I don't think bycopy pragma is used anywhere
[23:39:02] <FromDiscord> <Shinyzenith> I'm not sure but it might be cdecl pragma leading to that behavior
[23:39:20] <FromDiscord> <auxym> c2nim annotates every struct def with bycopy for c compatibility, would not surprise me if futhark did the same
[23:39:30] <FromDiscord> <Shinyzenith> futhark does not
[23:39:36] <FromDiscord> <Solitude> In reply to @auxym "ah. does that also": i CBA to test that, i would guess that no one bothered to test this interaction
[23:39:42] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/955906133955055636/unknown.png
[23:39:44] <FromDiscord> <Shinyzenith> here's the proof
[23:39:50] <FromDiscord> <Shinyzenith> no bycopy pragma used in the entire source tree
[23:39:54] <FromDiscord> <Shinyzenith> (edit) "no bycopy pragma used in the entire ... source" 03added "compiled"
[23:40:17] <FromDiscord> <auxym> `rg -ui`, in case your `.cache` is gitignored üôÇ
[23:40:24] <FromDiscord> <Shinyzenith> it's not
[23:40:33] <FromDiscord> <Solitude> he is inside the directory
[23:40:33] <FromDiscord> <Shinyzenith> why would I gitignore ~/.cache lol
[23:41:11] <FromDiscord> <Shinyzenith> nonetheless https://media.discordapp.net/attachments/371759389889003532/955906506333769770/unknown.png
[23:41:16] <FromDiscord> <auxym> In reply to @Solitude "he is inside the": oh yeah you're right.
[23:41:46] <FromDiscord> <auxym> though if he wasn't, rg ignores not just gitignore, but hidden folders too
[23:42:03] <FromDiscord> <Shinyzenith> that is true if I remember correctly
[23:42:31] <FromDiscord> <auxym> anyways, sink/lent could be another way to avoid a copy in case you want to enforce immutability
[23:43:00] <FromDiscord> <Shinyzenith> In reply to @auxym "though if he wasn't,": Ok nvm https://media.discordapp.net/attachments/371759389889003532/955906963852627998/unknown.png
[23:43:13] <FromDiscord> <Shinyzenith> In reply to @auxym "anyways, sink/lent could be": well var works for now, I don't really mind it
[23:44:13] <FromDiscord> <Solitude> its unfortunate that you cant decide that with function declaration
[23:44:20] <FromDiscord> <Shinyzenith> I still don't get why it segfaults tho!!1111 üòî
[23:44:49] <FromDiscord> <Shinyzenith> the same call in the main file works, but as soon as I try it from within the lib file it segfaults ü•≤ https://media.discordapp.net/attachments/371759389889003532/955907421606404136/unknown.png
[23:44:52] <FromDiscord> <Generic> you can also just explicitly pass a pointer
[23:45:09] <FromDiscord> <Shinyzenith> In reply to @Generic "you can also just": I did that and it worked but beef specifically told me to use var
[23:45:17] <FromDiscord> <Shinyzenith> i'm not entirely sure of the reason, again I'm not that good at nim
[23:45:20] <FromDiscord> <Shinyzenith> still quite new
[23:53:33] <FromDiscord> <auxym> what does wl_signal_add do? do you ever use addr to get a raw pointer in there? If so you might be keeping a pointer to something like get gc'd
[23:54:23] <FromDiscord> <auxym> (edit) "like get" => "that gets"
[23:55:01] <FromDiscord> <auxym> or a pointer to a stack-allocated var that gets popped
