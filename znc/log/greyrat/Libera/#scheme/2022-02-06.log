[00:00:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:01:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:20:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:22:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:24:57] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[00:27:11] *** Joins: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net)
[00:38:12] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[01:18:13] <mdhughes> lambda-the-ultimate-lazy-eval
[01:25:53] <sham1> I love me goto-with-arguments
[01:48:05] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 256 seconds)
[02:05:45] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:09:55] *** Joins: badkins (~badkins@136.56.92.199)
[02:14:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[02:16:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:19:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:19:26] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[02:31:46] *** Quits: rx80 (~quassel@user/rx80) ()
[02:34:01] *** Joins: rx80 (~quassel@user/rx80)
[02:39:52] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[02:46:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[02:49:09] *** Joins: gproto23 (~gproto23@user/gproto23)
[02:59:42] *** Joins: badkins (~badkins@136.56.92.199)
[03:01:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:01:54] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[03:04:29] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[03:18:11] *** Joins: badkins (~badkins@136.56.92.199)
[03:28:04] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[03:57:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[03:58:26] *** Joins: badkins (~badkins@136.56.92.199)
[04:15:03] *** rudybot_ is now known as rudybot
[04:26:29] *** Joins: m455 (~m455@user/m455)
[04:31:51] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:33:51] *** Joins: jao (~jao@68.235.43.173)
[04:41:23] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[04:53:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:56:23] *** Joins: seninha (~seninha@user/seninha)
[05:03:51] <mdhughes> Yes? That's what a function is.
[05:06:15] <edgar-rft> yes, a function is what functions
[05:16:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:21:21] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:22:32] *** Joins: badkins (~badkins@136.56.92.199)
[05:26:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:26:26] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[05:27:14] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[05:32:30] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:57:28] *** Quits: jao (~jao@68.235.43.173) (Remote host closed the connection)
[06:04:57] *** Quits: schulze (~schulze@dynamic-077-008-200-053.77.8.pool.telefonica.de) (Ping timeout: 240 seconds)
[06:13:58] *** Joins: TCZ (~tcz@91.150.178.124)
[06:28:55] *** Joins: xsperry (~xs@user/xsperry)
[06:29:02] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[06:30:53] *** Joins: badkins (~badkins@136.56.92.199)
[06:35:51] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:07:28] *** Joins: jao (~jao@68.235.43.173)
[07:12:06] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:12:35] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:20:20] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 250 seconds)
[07:24:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:26:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:32:36] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:36:41] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[07:53:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:56:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:00:03] *** Joins: badkins (~badkins@136.56.92.199)
[08:06:14] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[08:06:44] *** Joins: badkins (~badkins@136.56.92.199)
[08:11:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[08:12:57] *** Joins: badkins (~badkins@136.56.92.199)
[08:16:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:17:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[08:18:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:28:00] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:28:12] *** Joins: akarle (~akarle@user/akarle)
[08:35:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:35:43] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 250 seconds)
[08:43:41] *** Quits: jao (~jao@68.235.43.173) (Ping timeout: 256 seconds)
[08:47:41] *** Joins: akarle (~akarle@user/akarle)
[08:48:10] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:50:11] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[08:56:34] *** Joins: masoudd (~masoudd@user/masoudd)
[09:01:02] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:04:42] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[09:06:13] *** Joins: badkins (~badkins@136.56.92.199)
[09:06:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:08:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:10:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[09:23:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:25:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:34:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:36:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:38:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:48:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:50:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:53:18] *** Joins: Everything (~Everythin@37.115.210.35)
[10:22:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:24:31] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[10:24:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[10:24:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:31:47] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[10:32:06] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[10:44:11] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[10:44:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:47:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:04:54] *** Joins: badkins (~badkins@136.56.92.199)
[11:15:00] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[11:15:12] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[11:17:16] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[11:17:51] *** Joins: badkins (~badkins@136.56.92.199)
[11:22:35] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[12:17:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:22:23] *** Joins: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce)
[12:31:40] *** Quits: akarle (~akarle@user/akarle) (Remote host closed the connection)
[12:31:50] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:39:33] *** Joins: frost (~frost@user/frost)
[12:39:34] *** Quits: frost (~frost@user/frost) (Client Quit)
[12:39:59] *** Joins: frost (~frost@user/frost)
[12:49:26] *** Joins: akarle (~akarle@user/akarle)
[13:08:12] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[13:08:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:10:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:16:02] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[13:26:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8)
[13:26:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c49f:99ea:fe:b5c8) (Changing host)
[13:26:32] *** Joins: skapata (~Skapata@user/skapata)
[13:33:32] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[13:45:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:45:37] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[13:47:33] *** Joins: civodul (~user@guix/contributor/civodul)
[13:48:52] *** Quits: mjsir911 (~bnc@user/mjsir911) (Quit: Goodbye, World!)
[13:49:07] *** Joins: mjsir911 (~bnc@user/mjsir911)
[13:49:14] <s-liao> Zipheir I looked at the finger tree, what I understood is mostly about the storage of the structure tree. For the  haskell version of it still is new for me.
[13:57:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:57:27] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[13:59:33] *** Joins: seninha (~seninha@user/seninha)
[14:00:08] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[14:00:13] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:00:32] *** Joins: seninha (~seninha@user/seninha)
[14:00:52] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[14:02:25] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:04:16] *** Joins: Everything (~Everythin@37.115.210.35)
[14:06:26] *** Parts: Everything (~Everythin@37.115.210.35) ()
[14:09:55] *** Joins: seninha (~seninha@user/seninha)
[14:16:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:23:14] *** Joins: badkins (~badkins@136.56.92.199)
[14:27:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[14:29:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[14:30:26] *** Joins: amk (~amk@109.255.169.126)
[14:38:16] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 245 seconds)
[14:41:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[14:43:05] *** Joins: aeth (~aeth@user/aeth)
[15:26:35] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[15:40:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:41:33] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[15:42:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:58:40] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (Quit: leaving)
[15:58:58] *** Joins: sjamaan (~sjamaan@chicken/developer/sjamaan)
[16:26:21] *** Joins: ChoHag (~mking@81.187.183.71)
[16:26:51] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:47bd:184a:3faf:50d) (Quit: Client closed)
[16:37:35] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:13:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[17:20:40] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:25:25] <dpk> Zipheir: https://gitlab.com/dpk/presrfis/-/blob/master/finger-tree/finger-tree.scm
[17:27:00] <dpk> i see nothing in the paper up to this point (have implemented up to the end of ‘Deque operations’) which truly depends on lazy evaluation, except the point where it explicitly notes that it would probably be better in a strict language to avoid computing the tail when getting the head and vice-versa, which this implementation does
[17:34:34] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:68d8:ec99:8e45:2472)
[17:35:41] <dpk> i'm puzzled about why vector->finger-tree doesn't work on Guile (it complains about ‘Wrong number of arguments to #<procedure finger-tree-add-right (ft val)>’)
[17:38:14] <dpk> oh, SRFI 43 fold gives you an index argument, sigh
[17:38:24] <dpk> and no SRFI 133 in Guile
[17:40:55] *** Joins: TCZ (~tcz@91.150.178.124)
[17:43:50] <dpk> hmm, it could well be that this stuff about annotation and measurement depends on lazy eval
[17:43:58] <Franciman> dpk: gorgeous
[17:44:03] <Franciman> yes
[17:44:05] <Franciman> it does
[17:44:14] <dpk> but one could, for example, implement SRFI 134 with just what i have already
[17:49:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:58:10] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:58:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:59:25] <dpk> from a Scheme perspective, it's very weird reading a program where the case-sensitivity of identifiers is actually used
[17:59:37] <dpk> node2 and node3 are different things from Node2 and Node3
[18:00:01] *** Joins: badkins (~badkins@136.56.92.199)
[18:04:31] *** Joins: DKordic (~DKordic@93-86-84-123.dynamic.isp.telekom.rs)
[18:05:02] <dpk> they write: "for clarity, we use mixfix notation, which is not possible in Haskell". 'clarity' in this case means not only is it inaccessible for non-Haskell programmers, it's inaccessible for people who *are* Haskell programmers as well
[18:06:41] <dpk> trying to find out what their actual Haskell implementation says
[18:07:46] <dpk> (result: apparently mixfix is their name for what i'd call circumfix, and doesn't refer to what i thought it referred to)
[18:20:57] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 240 seconds)
[18:22:37] *** Joins: psf (~pi@206.55.172.18)
[18:27:46] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862)
[18:27:46] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c12f:e1ba:6835:4862) (Changing host)
[18:27:46] *** Joins: skapata (~Skapata@user/skapata)
[18:29:25] *** Franciman is now known as cps
[18:29:33] *** cps is now known as Franciman
[18:46:15] *** Joins: m455 (~m455@user/m455)
[18:50:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:53:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:04:47] *** Parts: mason (~mason@redhat/mason) ()
[19:05:03] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[19:05:27] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:08:14] <dpk> okay, i think i understand the measure stuff well enough to implement it
[19:08:24] <dpk> will take a look in a few hours
[19:08:45] <Franciman> dpk: do you need lasiness?
[19:09:17] <dpk> need, no (in the sense that it doesn’t diverge in a strict language)
[19:09:49] <dpk> but i think Zipheir is right that the amortized performance guarantees only apply if you delay the measurement
[19:10:24] <Franciman> the analysis of the paper only applies with laziness
[19:10:27] <Franciman> true
[19:10:33] <Franciman> because it uses the so called physicist method
[19:22:17] *** Quits: nalaginrut (~nalaginru@113.118.235.81) (Ping timeout: 240 seconds)
[19:22:36] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[19:23:15] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Client Quit)
[19:23:17] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[19:34:27] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[19:41:22] *** Joins: nalaginrut (~nalaginru@113.118.235.81)
[19:43:28] <dpk> bah, hard computer science problems are involved
[19:43:30] <dpk> (naming things)
[19:44:30] <dpk> specifically (get ready, Common Lispers, are you ready to hear this) i was about to write code in which i needed a procedure and a variable to have the same name
[19:44:43] <Franciman> el-o-el
[19:44:49] <Franciman> emacs lisp, oh, emacs lisp
[20:03:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5e88:e8a2:f183:6782) (Ping timeout: 245 seconds)
[20:04:06] *** Joins: zwr (~zwr@2804:d45:b966:fb00:af27:6e8f:df74:3523)
[20:08:24] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[20:11:05] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Client Quit)
[20:16:20] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:16:49] *** Joins: badkins (~badkins@136.56.92.199)
[20:17:29] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:17:39] *** Joins: badkins (~badkins@136.56.92.199)
[20:21:44] <amazigh> o)
[20:22:27] * amazigh trying to make wcs match test suite pass with scheme-live
[20:22:34] <amazigh> (a subset of the test suite)
[20:22:40] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:22:43] <amazigh> at least **1 does not work, and there is a problem with _
[20:38:15] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:68d8:ec99:8e45:2472) (Ping timeout: 256 seconds)
[20:39:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:41:38] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[20:50:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:52:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:57:43] *** Quits: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:59:34] <sham1> dpk: sounds horrifying
[21:00:16] <sham1> But the real question is whether the procedure and the variable had the same name whilst in the same lexical scopre
[21:00:20] <sham1> scope*
[21:07:40] *** Joins: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr)
[21:11:13] *** Quits: nalaginrut (~nalaginru@113.118.235.81) (Ping timeout: 250 seconds)
[21:24:14] *** Joins: nalaginrut (~nalaginru@183.11.130.58)
[21:39:56] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[21:44:18] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Client Quit)
[21:45:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:47:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:51:38] *** Joins: schulze (~schulze@dynamic-077-001-118-149.77.1.pool.telefonica.de)
[21:52:11] <Zipheir> dpk: Thanks.
[21:52:30] <Zipheir> dpk: I highly recommend the Claessen paper.  It makes a lot more sense than the original, to me.
[21:53:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[21:53:47] <Zipheir> I'm going to test the measurement stuff shortly with and without lazy eval., so we'll see how it goes.
[21:54:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:57:42] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[21:59:42] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[22:00:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[22:00:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:03:24] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[22:06:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:07:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:08:10] <Zipheir> dpk: https://www.cs.tufts.edu/~nr/cs257/archive/koen-claessen/finger-trees.pdf
[22:10:34] <dpk> I’ll take a look, but i found the Hinze/Paterson paper actually quite accessible, despite being very inexperienced with Haskell
[22:11:26] <dpk> that said, my current finger tree implementation thinks the alphabet has 9 letters, so i’m obviously missing something. maybe Claessen can enlighten me
[22:15:26] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:24:16] <Zipheir> I find that an extensive test suite is going to be a must for finger trees, since there's so many internal configurations they can get into.
[22:30:10] <ski> property-based testing ?
[22:30:42] <Franciman> a macro-based system for asserting invariants
[22:30:47] <Franciman> and proving correctness by construction?
[22:35:19] <Zipheir> ski: I'm not familiar with that idea.
[22:35:34] <Franciman> Zipheir: quickcheck?
[22:35:42] <Franciman> you specify properties you want to hold
[22:35:46] <Franciman> then run a randomiser
[22:35:49] <Franciman> and gnerate samples
[22:35:59] <Zipheir> Right, that's what Claessen used.
[22:36:09] <Franciman> if the porperty holds on the samples, you have a certain probability that your implementation be correct
[22:36:29] <Zipheir> Only for Haskell programs, though?
[22:36:39] <Franciman> it works for functional languages, i think?
[22:36:42] <Franciman> well more generally it works
[22:37:02] <Franciman> but with side effects it's hard to prove some things, because of side effects :)
[22:37:13] <Zipheir> At the moment I'm just catching dumb representation mistakes.
[22:37:26] <Franciman> it's really neat that you just express the condition and have the system automatically run tests
[22:37:35] <ski> well, you can only prove the presence of bugs, with testing (unless you happen to be able to test exhaustively ..)
[22:37:36] <Zipheir> It's a very good idea.
[22:38:00] <sham1> Quickcheck, aka fuzzing but functional
[22:38:03] <Franciman> ski: actually you can prove absence of bugs within a certain range of certainty
[22:38:22] <ski> yea, but then that's evidence, not proof
[22:38:26] <Franciman> no
[22:38:27] <Zipheir> In Scheme, you often don't catch bugs until a specific path gets taken, and, with finger trees, there are a lot of paths.
[22:38:31] <Franciman> i mean, ofc
[22:38:36] <Franciman> but it's not just evidence
[22:38:41] <Franciman> it's evidence, plus a measure of the uncertainty
[22:38:44] <Franciman> so it's a bit better imho :)
[22:38:46] * ski nods
[22:39:30] <ski> i don't like to use the term "proof" for anything short of guarantees
[22:40:04] <ski> (these premises logically leads to this conclusion)
[22:40:51] <ski> anyway .. for property-based, you do need to keep an eye out for the distributions you're getting
[22:41:19] <ski> if a majority of cases tests collections of at most two elements, then that's not that good ..
[22:42:32] <sham1> I don't like the term proof for non-formal stuff
[22:43:25] <Franciman> ok you are both right, but i was stressing that you can get a formal proof of the uncertainty measure
[22:43:53] <Franciman> i.e. the probability that tests are exhaustive
[22:43:56] <Zipheir> Dijkstra usually said "testing *shows* the presence of bugs, but ..."
[22:44:11] <Franciman> wait, i like more saying the probability that the program conforms the specification
[22:44:18] <Zipheir> (Many citations on Wikiquote; clearly this was a favorite saying of his.)
[22:44:28] <Franciman> assuming a specific distribution, this is true
[22:44:37] <Franciman> and we not always know what's the input distribution
[22:46:05] <ski> preprocessing, as well as filtering (preconditions), often skew distributions
[22:46:48] <ski> (instead of filtering, it's commonly better to use a custom generator, if you can manage, that has a sensible distribution)
[22:50:38] <ski> (well, that can go for preprocessing, too. generating a sorted list, generating a sorted tree, generating a balanced tree, ..)
[22:56:36] *** Joins: energizer (~energizer@user/energizer)
[22:58:02] <energizer> "If we comment out the first shift, we already know the result, it is (2)" https://en.wikipedia.org/wiki/Delimited_continuation
[22:58:15] <energizer> why can we evaluate the second one first?
[22:58:29] <Zipheir> Urgh, Hinze & Paterson and calling their complex, tree-recursive measurement functions "pleasingly simple".  It's like proof by intimidation.
[23:01:13] <Zipheir> energizer: Because the first one is commented-out?
[23:01:19] <Zipheir> That page could certainly be clearer.
[23:02:09] <energizer> it is only useful to claim "we can comment out foo" if we have some reason to believe that commenting out foo and then putting it back yields equivalent results
[23:04:03] <Zipheir> Yes, and it does, at least in that very short example.
[23:04:43] <Zipheir> The reason they're equivalent is the same reason why (begin 1 2) is equivalent to (begin 2)
[23:06:48] <sham1> It'd be weird if literals had a side-effect yeah
[23:06:55] <sham1> Well, integer literals
[23:07:17] <Franciman> lol i'd love to see it
[23:16:45] <energizer> ok thanks
[23:20:50] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[23:30:31] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:33:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:35:49] <dpk> the weirdest thing about the Hinze/Paterson paper is how it has exercises. isn't this a journal article? why are they giving me exercises to do as if it's a textbook?
[23:35:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:36:43] *** Joins: robin__ (~robin@user/terpri)
[23:37:04] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[23:38:04] <Zipheir> dpk: https://abstrusegoose.com/12
[23:58:37] *** Quits: robin__ (~robin@user/terpri) (Ping timeout: 240 seconds)
[23:59:52] <mdhughes> If I comment out all code, it becomes pleasingly simple and error-free.
