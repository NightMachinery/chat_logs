[02:55:10] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[09:00:00] *** Joins: tristanC_ (~tristanC@user/tristanc)
[09:05:11] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[09:05:13] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[09:08:51] *** Quits: tristanC_ (~tristanC@user/tristanc) (Ping timeout: 256 seconds)
[09:10:13] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[09:10:33] *** Joins: tristanC (~tristanC@user/tristanc)
[10:07:03] *** Joins: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374)
[11:26:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:30:08] *** Quits: madjestic[m] (~madjestic@2001:470:69fc:105::a4e) (Quit: You have been kicked for being idle)
[13:20:00] *** Joins: __monty__ (~toonn@user/toonn)
[14:12:06] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[15:04:24] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:33:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:24:38] <EvanR> trying to wrap my head around this supposedly simple 3 point bulleted list of principles https://apfelmus.nfshost.com/blog/2012/03/29-frp-three-principles-bidirectional-gui.html by heinrich apfelmus
[19:24:57] <EvanR> about gui elements
[19:25:36] <EvanR> was trying to understand knobs sliders textboxes etc but not sure if this is related
[19:25:54] <f-a> is there a specific reason why you are courting FRP?
[19:26:06] <f-a> («learning something new» is an excellent answer)
[19:28:31] <EvanR> this guy's blog has a lot of old stuff on it, just seeing if there's any wisdom
[19:29:51] <icrbow[m]> Those looks like a basis for a pretty common pattern (the elm architecture and whatever the react used).
[19:30:06] *** Quits: krakuasonic[m] (~krakuason@2001:470:69fc:105::1:18ab) (Quit: You have been kicked for being idle)
[19:30:20] <EvanR> the fact that there are 3 principles should mean they are easy to grok right xD
[19:30:32] <EvanR> like feynmann's method
[19:30:59] <EvanR> or 1. do whatever 2. ??? 3. profit
[19:31:03] <icrbow[m]> A rendering part of a widget only display some input data, the widget only sends signals somewhere else, somewhere else accumulates signals and updates widget state.
[19:31:45] <icrbow[m]> s/A rendering part of a widget only display some input data, the widget only sends signals somewhere else, somewhere else accumulates signals and updates widget state./A rendering part of a widget only display some input data (presumably derived from a widget state), a widget only sends signals somewhere else, somewhere else accumulates signals and updates the widget state./
[19:32:40] <EvanR> 1. render part of widget, 2. widget itself, 3. somewhere else
[19:33:20] <EvanR> i'll see if i can draw a diagram
[19:33:42] <EvanR> so the premise is that the program or the user could update a widget
[19:33:56] <EvanR> but if you do it wrong, it explodes
[19:34:30] <EvanR> so principles
[19:35:11] <icrbow[m]> it enters a feedback loop, making that annoying loud noise
[19:37:14] <EvanR> i made a shitty javascript gui one time for controlling an escape room, and for whatever reason i made it so the buttons pressed state indicated something about the status of the room element. And allow you to press button to trigger the element like open a door
[19:37:56] <EvanR> I never got any feedback on it but I hope that was part of a larger smart thing to do
[19:38:49] <EvanR> in retrospect that would be hard to do on a physical control board
[19:40:33] <EvanR> I guess browsers have been doing this lately with their config
[19:40:52] <EvanR> if you change a setting, it actually changes the setting, no Apply Button
[19:41:12] <EvanR> and the widget's state indicates the setting
[19:41:52] <EvanR> lets see if haskell can do it
[19:44:38] <EvanR> what do you guys use for widget behavior in terminal land
[19:44:53] <icrbow[m]> Of course it can. Haskell was at it way before the web.
[19:46:53] <icrbow[m]> EvanR: Is there an alternative to brick/ansi-terminal those days?
[19:47:10] <EvanR> i really don't know, haven't used either one
[19:47:13] <EvanR> nor ncurses
[19:47:28] <EvanR> I think every other user in here knows more
[19:47:41] <icrbow[m]> hit it https://hackage.haskell.org/package/ansi-terminal-game
[19:50:59] <f-a> enjoy it icrbow[m] 
[19:51:08] <f-a> and if you have requests, let meknow
[19:51:36] <EvanR> so you have draw a textbox with this, but how do you express the behavior, get it to work
[19:51:48] <EvanR> s/have draw/can draw/
[20:35:27] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:36:23] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:58:52] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[21:09:28] <sm> there's a reflex-vty I think
[21:12:18] <EvanR> in my review of all these libs, i still don't really understand reflex
[21:13:36] <EvanR> unrelated, zachtronics should make a game based on lazy evaluation xD
[21:24:43] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[21:26:38] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[21:29:36] <EvanR> ok so basically apfelmus's principles https://i.imgur.com/HHJqi2s.jpg ... revealing the slider has two non-interacting pieces xD
[21:30:16] <EvanR> if updating updates the value, the slider works
[21:33:51] <icrbow[m]> Do you want profunctors? Because that's how you get profunctors!
[21:36:25] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[21:41:08] <EvanR> in this case, a Biprofunctor :thonk:
[21:43:15] <icrbow[m]> IBuprofunctor 400mg - for all your UI headaches
[21:44:33] <EvanR> so you want to put a simple slider, let me first introduce you to some category theory
[21:45:49] <icrbow[m]> "But you asked for some composable UI widgets..."
[21:47:05] <icrbow[m]> - I never asked for this. They say they saved me, but I'm not sure saved is the right word.
[21:55:11] <f-a> reflex requires you to buy into their toolchain…
[22:00:22] *** Joins: carter_ (sid14827@helmsley.irccloud.com)
[22:05:17] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[22:05:18] *** Quits: welterde (welterde@thinkbase.srv.welterde.de) (*.net *.split)
[22:05:19] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (*.net *.split)
[22:05:19] *** Quits: kanamoricoauthor (~kanamoric@2001:470:69fc:105::873a) (*.net *.split)
[22:05:19] *** Quits: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d) (*.net *.split)
[22:05:19] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (*.net *.split)
[22:05:21] *** Quits: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374) (*.net *.split)
[22:05:21] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (*.net *.split)
[22:05:22] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (*.net *.split)
[22:05:24] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[22:05:25] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[22:05:26] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[22:05:26] *** Quits: eqf0[m] (~eqf0matri@2001:470:69fc:105::1:331a) (*.net *.split)
[22:05:26] *** Quits: thekyriarchy (~thekyriar@2001:470:69fc:105::493) (*.net *.split)
[22:05:26] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[22:05:26] *** Quits: icrbow[m] (~icrbowmat@2001:470:69fc:105::ee3) (*.net *.split)
[22:05:27] *** Quits: sm (~sm@plaintextaccounting/sm) (*.net *.split)
[22:05:28] *** Quits: kritzefitz[m] (~kritzefit@2001:470:69fc:105::1:1186) (*.net *.split)
[22:05:30] *** Quits: sudoreboot (~sudoreboo@2001:470:69fc:105::c824) (*.net *.split)
[22:05:30] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[22:05:30] *** Quits: tristanC[m] (~tristancm@2001:470:69fc:105::6cd) (*.net *.split)
[22:05:31] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (*.net *.split)
[22:05:32] *** Quits: boxscape (~boxscape@user/boxscape) (*.net *.split)
[22:05:32] *** Quits: jakub[m] (~jakubfami@2001:470:69fc:105::a43) (*.net *.split)
[22:05:33] *** Quits: harrow (~harrow@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[22:05:34] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (*.net *.split)
[22:05:35] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[22:05:35] *** Quits: rys_ostrovid[m] (~rysostrov@2001:470:69fc:105::1:f9) (*.net *.split)
[22:05:36] *** Quits: kilolympus (~kilolympu@31.205.200.235) (*.net *.split)
[22:05:38] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[22:05:38] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[22:05:38] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[22:05:39] *** Quits: nek0 (~nek0@nek0.eu) (*.net *.split)
[22:09:36] *** Joins: pie__ (~pie_bnc@user/pie/x-2818909)
[22:09:36] *** Joins: welterde (welterde@thinkbase.srv.welterde.de)
[22:09:36] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[22:09:36] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:09:36] *** Joins: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374)
[22:09:36] *** Joins: tristanC (~tristanC@user/tristanc)
[22:09:36] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[22:09:36] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[22:09:36] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[22:09:36] *** Joins: srk (~sorki@user/srk)
[22:09:36] *** Joins: fluxit (~fluxit@techsmix.net)
[22:09:36] *** Joins: nek0 (~nek0@nek0.eu)
[22:09:36] *** Joins: sm (~sm@plaintextaccounting/sm)
[22:09:36] *** Joins: eqf0[m] (~eqf0matri@2001:470:69fc:105::1:331a)
[22:09:36] *** Joins: kanamoricoauthor (~kanamoric@2001:470:69fc:105::873a)
[22:09:36] *** Joins: sudoreboot (~sudoreboo@2001:470:69fc:105::c824)
[22:09:36] *** Joins: thekyriarchy (~thekyriar@2001:470:69fc:105::493)
[22:09:36] *** Joins: boxscape (~boxscape@user/boxscape)
[22:09:36] *** Joins: VarikValefor[m] (~varikvale@2001:470:69fc:105::a5d)
[22:09:36] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[22:09:36] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[22:09:36] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[22:09:36] *** Joins: kritzefitz[m] (~kritzefit@2001:470:69fc:105::1:1186)
[22:09:36] *** Joins: jakub[m] (~jakubfami@2001:470:69fc:105::a43)
[22:09:36] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[22:09:36] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[22:09:36] *** Joins: tristanC[m] (~tristancm@2001:470:69fc:105::6cd)
[22:09:36] *** Joins: icrbow[m] (~icrbowmat@2001:470:69fc:105::ee3)
[22:09:36] *** Joins: rys_ostrovid[m] (~rysostrov@2001:470:69fc:105::1:f9)
[22:09:36] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[22:09:36] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[22:09:36] *** Joins: harrow (~harrow@static.38.6.217.95.clients.your-server.de)
[22:09:36] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[22:09:36] *** molybdenum.libera.chat sets mode: +o sm
[22:10:32] *** Quits: pie__ (~pie_bnc@user/pie/x-2818909) (Ping timeout: 263 seconds)
[22:10:34] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[22:15:43] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:05:26] *** carter_ is now known as carter
