[00:09:13] *** Quits: vcarvalho (~vcarvalho@161.230.15.110) (Ping timeout: 256 seconds)
[00:21:20] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[01:12:13] *** Quits: dre (~dre@2001:8003:c932:c301:c29e:700:d5d3:6fcd) (Ping timeout: 240 seconds)
[01:28:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:33:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[01:54:23] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:9d7d:7385:bf16:b209) (Ping timeout: 256 seconds)
[02:16:02] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[02:26:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:31:54] *** Joins: dre (~dre@2001:8003:c932:c301:3b1d:32bd:2b3e:4d5b)
[02:38:04] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[02:40:37] *** Quits: tewi (~tewi@apn-95-41-20-73.dynamic.gprs.plus.pl) (Ping timeout: 240 seconds)
[02:46:59] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:47:14] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[02:53:01] *** Joins: epony (epony@user/epony)
[03:03:54] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[03:10:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[03:16:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:17:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:20:21] *** Joins: rotateq` (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[03:21:36] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:30:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:30:44] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:34:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:35:41] *** Quits: rotateq` (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:25:00] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:25] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[04:27:19] *** Joins: occ (~occ@user/occ)
[04:51:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[05:06:13] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[05:10:53] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:12:20] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[05:16:51] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[05:21:11] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:22:12] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:25:34] *** Joins: Bike (~Bike@71.69.170.70)
[05:32:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:34:07] *** Rue is now known as Carp
[05:34:43] *** Carp is now known as hlz
[05:36:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[05:37:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[05:39:17] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[05:51:51] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:59:35] <speskk> This is more a question about encryption than CL, I guess, but I'm using Ironclad. When I'm making a cipher, and I need to provide a key -- what exactly should I be providing here. It's working completely how I expect, but what is the 'correct' input for that argument? A super long randomly generated number? The library documentation assumes the user knows about encryption, which I obviously dont
[05:59:41] <speskk> I can provide more context if desired
[06:00:19] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[06:04:16] <Bike> well, it's like a mechanical key and lock. they key is something you use when you want to open or close the lock.
[06:04:34] <Bike> the particular nature of the key is going to depend on what type of ciphering you're doing.
[06:05:08] <speskk> Ah great explanation. Instantly simplified the whole situation. Thanks Bike
[06:06:25] <Bike> the key* and no problem
[06:09:26] <speskk> Ah I feel stupid now, I was making this way more complicated than it needed to be. It's like entering in a password at a GPG prompt.
[06:10:23] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[06:10:33] *** Joins: jealousmonk (~user@user/jealousmonk)
[07:01:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:04:37] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[07:18:03] <edgar-rft> don't feel stupid, even shoe binding is complicated if you do it for the first time
[07:18:44] <Bike> yeah. and pretty much everyone does the overcomplication thing at one point or another.
[07:21:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[07:30:17] <beach> Good morning everyone! 
[08:02:28] *** Quits: hlz (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[08:02:49] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[08:06:13] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Client Quit)
[08:07:14] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[08:24:48] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[08:53:03] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[08:57:17] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Client Quit)
[08:57:33] *** Joins: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net)
[09:04:45] *** Quits: Bike (~Bike@71.69.170.70) (Quit: sleep)
[09:46:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[09:48:01] *** Joins: occ (~occ@user/occ)
[09:51:51] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:91b:49f7:fde:97e3)
[10:08:33] *** Joins: rain3 (~rain3___@2a02:2f09:d103:6400:778f:987:8477:e76d)
[10:27:24] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:ec96:d9ec:ea2:f365)
[10:28:14] *** Quits: rain3 (~rain3___@2a02:2f09:d103:6400:778f:987:8477:e76d) (Quit: Leaving)
[10:33:26] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:ec96:d9ec:ea2:f365) (Ping timeout: 250 seconds)
[10:58:54] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[11:03:45] *** Quits: Rue (~rue@2001-b011-1000-1402-f4fe-f6f9-1dd3-9979.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[11:12:47] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[11:16:58] *** Joins: tewi (~tewi@apn-95-41-175-122.dynamic.gprs.plus.pl)
[11:18:36] *** Joins: shka (~herr@109.231.0.226)
[11:18:58] *** Joins: treflip (~user@user/treflip)
[11:39:21] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:91b:49f7:fde:97e3) (Quit: Textual IRC Client: www.textualapp.com)
[11:57:04] *** Quits: dre (~dre@2001:8003:c932:c301:3b1d:32bd:2b3e:4d5b) (Ping timeout: 250 seconds)
[12:09:00] *** Joins: dre (~dre@119-18-1-208.771201.syd.nbn.aussiebb.net)
[12:59:53] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[13:17:12] *** Quits: dre (~dre@119-18-1-208.771201.syd.nbn.aussiebb.net) (Quit: dinner with inlaws)
[13:39:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:43:04] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:43:22] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[13:46:22] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[13:50:15] <tewi> am I thinking right, that in SBCL the function designator is coerced right away, as opposed to being re-coerced each time it's utilized?
[13:52:54] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[13:54:08] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:fd11:9449:e2c7:833f)
[13:58:11] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:58:39] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:00:12] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[14:00:34] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:01:14] <mfiano> This channel is for Common Lisp. Implementation-specific questions should be asked in their respective channels, in this case #sbcl. That said, I think this is really a Common Lisp question in hiding. Otherwise I don't know what is actually being asked.
[14:01:57] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:fd11:9449:e2c7:833f) (Ping timeout: 240 seconds)
[14:05:04] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:99ac:6a4c:9a78:bb72)
[14:05:07] <mfiano> A function designator is a symbol or a function object. A function object is just a reference to some memory. A symbol when used a a function designator looks for a function of the same name in the global environment at runtime. Does that answer your question?
[14:06:11] <mfiano> The latter involves a level of indirection at runtime each time. A smart compiler may be able to perform some optimizations here though.
[14:10:26] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:99ac:6a4c:9a78:bb72) (Killed (zinc.libera.chat (Nickname regained by services)))
[14:11:11] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:11:36] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:12:03] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:3027:c841:ac8b:d6f4)
[14:14:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:20:30] *** Joins: lisp123w (~user@80.227.170.170)
[14:20:56] <lisp123w> How is (remove nil [list]) best implemented?
[14:21:26] <lisp123w> Does one push each non-nil item to a new list and reverse at the end?
[14:21:49] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:3027:c841:ac8b:d6f4) (Ping timeout: 256 seconds)
[14:29:23] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:29:50] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:39:59] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[14:40:31] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[14:41:44] <phoe> yes
[14:41:49] <phoe> either that or keep track of the list tail
[14:42:09] <mfiano> That would involve twice the work. Just maintain pointers as you walk, and connect them.
[14:42:36] <phoe> twice the work?
[14:42:45] <phoe> IMO they are equivalent because each created cons cell is walked exactly once in each case
[14:42:59] <phoe> either one cons cell at every iteration with tail chasing, or all cells at once with NREVERSE
[14:43:23] <mfiano> Walking the original list amd reversing the new one, whether in-place or not.
[14:43:43] <phoe> what do you mean by "maintain pointers as you walk" then
[14:43:44] <mfiano> There was a better solution to this problem a few days ago in #commonlisp I think...but I forget it
[14:44:30] <phoe> you must walk the original list, that's a no-brainer
[14:44:42] <phoe> but I cannot see how you can avoid walking the result
[14:54:50] <lisp123w> Thanks both
[14:57:53] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[15:01:51] <tewi> mfiano: sorry, I didn't know you shouldn't ask implementation specific questions here. also no, whether the function designator is given as a symbol or function object doesn't matter in this particular application. it's more of a question of given the last example in http://clhs.lisp.se/Body/01_dae.htm would it be first or second result [it's first]
[15:14:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:19:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[15:21:41] <beach> tewi: A function name usually needs to be converted each time it is used, unless it is known that the function can't have its definition altered at some later point.
[15:21:55] <beach> tewi: imagine (funcall 'hello ...) for instance.
[15:22:28] <beach> tewi: The semantics here is that whenever this form is evaluated, the definition of HELLO is looked up in the global environment.
[15:23:02] <beach> tewi: So if between two evaluations of this form, the definition of HELLO changes, then the second evaluation must give the new definition.
[15:23:02] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[15:23:21] <beach> tewi: Therefore, the symbol can not be converted to a function once.
[15:23:28] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[15:28:48] <beach> tewi: Does that make sense to you?
[15:30:49] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:31:59] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[15:32:25] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[15:44:32] *** Quits: treflip (~user@user/treflip) (Quit: rebooting...)
[15:50:01] *** Joins: treflip (~user@user/treflip)
[16:16:17] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:833f:e9c7:6325:4206) (Ping timeout: 240 seconds)
[17:05:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:10:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:20:15] <tewi> beach: i'm not sure which one of my messages is that an answer to
[17:22:56] <beach> The one about whether SBCL converts a function designator to a function only once.
[17:23:03] *** Parts: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (WeeChat 3.4)
[17:24:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:29:00] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:5cd2:cc94:8c4b:19bb)
[17:30:03] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:bd48:3fa6:d41:7f9)
[17:30:43] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:30:58] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[17:32:17] <tewi> but the example i linked was talking about coercing a function designator in a single call to mapcar, not between two calls to something like funcall (since that would update the definition, sure) beach 
[17:32:29] <tewi> unless i'm being dumb and missing the point
[17:32:33] *** Joins: aeth (~aeth@user/aeth)
[17:41:17] <beach> Oh, I misunderstood.  Sorry.
[17:41:37] <beach> That might be a case where it is not so well specified.
[17:42:04] <beach> I would assume MAPCAR would be allowed to access the function once at the beginning. 
[17:43:14] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:5cd2:cc94:8c4b:19bb) (Killed (zinc.libera.chat (Nickname regained by services)))
[17:46:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[17:46:54] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[17:48:04] *** Joins: aeth (~aeth@user/aeth)
[17:56:10] *** Joins: Harag (~user@105.243.9.173)
[18:08:41] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:16:01] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:20:20] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[18:23:29] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[18:24:15] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[18:24:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:29:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[18:31:50] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:bd48:3fa6:d41:7f9) (Quit: Konversation terminated!)
[18:43:43] *** Joins: epony (epony@user/epony)
[18:49:21] *** Quits: treflip (~user@user/treflip) (Quit: rebooting)
[19:00:17] *** Joins: occ (~occ@user/occ)
[19:05:07] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:05:28] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:06:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:08:15] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Client Quit)
[19:09:07] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:12:11] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[19:15:07] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:18:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:30:22] *** Joins: treflip (~user@95.79.32.99)
[19:40:02] *** Quits: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:40:29] *** Joins: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net)
[19:42:17] *** Joins: epony (epony@user/epony)
[19:43:33] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[19:47:02] *** Quits: treflip (~user@95.79.32.99) (Quit: ERC (IRC client for Emacs 27.2))
[19:47:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:47:25] *** Joins: treflip (~user@user/treflip)
[19:52:36] *** Joins: epony (epony@user/epony)
[19:56:19] *** Parts: Rue (~rue@2001-b011-1000-1cb7-da1d-fbf4-ac2a-f9f7.dynamic-ip6.hinet.net) (WeeChat 3.4)
[20:12:52] <lisp123> From the earlier discussion, is there anything wrong with this approach 
[20:13:08] <lisp123> (defun remove-nils (list)  (let ((car (car list))) (cond ((null list) nil)        ((null car) (remove-nils (cdr list)))  (t (cons car (remove-nils (cdr list)))))))
[20:13:45] <rotateq> i thought for that we have REMOVE-IF(-NOT)
[20:13:47] <lisp123> Only walks the list once or am I missing something apart from tail call optimisation
[20:14:15] <lisp123> rotateq: I was just wondering how its implemented efficiently
[20:14:23] <beach> It is recursive, so wasteful.  It implements something that exists.  And it takes the CAR of something that is not known to be a CONS.
[20:14:41] <beach> It is certainly not tail recursive.
[20:15:39] <beach> You can use LOOP with COLLECT.  Or you can use PUSH + NREVERSE.
[20:15:54] <lisp123> The earlier discussion mentioned having to walk the list twice with PUSH + NREVERSE
[20:16:13] <beach> And you think that is worse than calling a function for each CONS cell?
[20:16:16] <beach> I don't think so.
[20:16:25] <lisp123> No idea, it was a question :)
[20:16:45] <lisp123> I was wondering if this was faster at the expense of taking more memory
[20:17:11] <beach> It takes a lot more stack.
[20:17:36] <beach> LOOP + COLLECT essentially uses the technique where a pointer to the last CONS cell is kept.
[20:17:45] <beach> But the cost is an additional test.
[20:18:12] <beach> So if you are obsesses with traversing the list only once, then LOOP + COLLECT is great.
[20:19:36] <lisp123> Thanks
[20:19:43] <beach> Sure.
[20:21:12] <lisp123> Is there a way to convert this function into LOOP + COLLECT?
[20:21:38] <lisp123> https://plaster.tymoon.eu/view/2940#2940
[20:22:39] <lisp123> (LW has a strange indentation on IF for some reason, I may ask Martin at one point or maybe you can at ELS)
[20:23:35] <beach> So you have a plist where even elements (starting with 0) are keywords, and you want to remove pairs where the odd element is nil?
[20:24:45] <lisp123> I have lists like (A B :C nil D E) and whenever there is a keyword followed by nil, both elements are to be removed
[20:24:52] <lisp123> And also all nils are to be removed
[20:25:49] <lisp123> This is to translate lambda lists to function calls, the final piece in the puzzle to my DEFINE-INTERFACE macro
[20:26:13] <lisp123> So it should error out if a keyword is used not in pairs
[20:28:39] <beach> I don't think there is a pretty solution.
[20:29:09] <lisp123> Should I just use PUSH + NREVERSE then?
[20:29:17] <lisp123> The list can be odd
[20:29:21] <beach> No, that's not pretty either.
[20:29:30] <beach> With LOOP it probably starts with (loop for (a b) on list ...
[20:30:58] <lisp123> Thanks for the pointer, I found an example of that clause
[20:31:58] <lisp123> The unfortunate part to my DEFINE-INTERFACE macro is that the function call needs to be parsed during runtime, so its very inefficient...its almost easier just to write out the functions (like you do in Eclector)
[20:33:05] <lisp123> But I guess its good for prototyping :) I've been able to successfully separate my VI mode implementation from the low-level LW code, and very soon will try implementing a DREI backend for it
[20:33:55] <lisp123> Suprisingly one can do quite a bit of analysis of the contents of the buffer without any noticeable slowdown from the user perspective
[20:34:04] <lisp123> Goes to show the power of compiled languages!
[20:35:25] <beach> People have a very bad idea of what takes time and what does not.  They also seem incapable of doing a simple back-of-envelope calculation, or they are too lazy to do it.
[20:36:35] <beach> I think that's the main reason we have so much premature low-level optimization. 
[20:37:41] <beach> If someone is not smart enough to do the real calculation, that someone feels a lot smarter by being preoccupied by low-level optimization stuff.
[20:38:27] <lisp123> Thats true :) Its a form of procrastination IMO
[20:38:33] <lisp123> Perhaps. My theory on Lisp was that many people enjoy the finer details and get stuck on that fruitlessly (look at how many people want to implement toy lisps for example)
[20:39:21] <lisp123> But there's definitely a real issue with web dev, where they load 100s of frameworks and very basic tasks take very long to complete, and unfortunately with the growth of SaaS and JS, that has skewed the perspective of many
[20:39:45] <beach> I suspect that people enjoy those details because they don't know how to do something more productive.
[20:39:52] <lisp123> +1 :)
[20:40:20] <beach> Oh, sure.  Web stuff is a disaster.
[20:41:02] <lisp123> In my personal defence, I wrote 2,000 lines of lisp on the weekend, so wanted to "treat" myself with a break on optimisation :)
[20:41:06] <beach> Maybe that's the root of the problem.  People think they are on the web when they are really in a single image of a Common Lisp implementation. 
[20:41:39] <lisp123> I think for the newer generation that definitely holds true, especially with VSCode being an electron app
[20:41:49] <beach> That would not surprise me at all.  Many programmers seem to have no idea about how a processor and a compiler work.
[20:41:53] <lisp123> *shudders when thinking of VS Code*
[20:42:28] <lisp123> Yes (that includes me)
[20:42:32] <beach> I think it should be a requirement in order to be allowed to write applications, to know about computer architecture and compiler design.
[20:43:09] <beach> Otherwise, people with have an incorrect model of how things work in their heads, and they will program according to that incorrect model.
[20:43:33] <beach> Like in C when they replace a function call with a macro, for instance. 
[20:44:05] <lisp123> I see
[20:45:09] <lisp123> Hopefully the situation improves, but it seems to be going in the other direction (less rigorous education)
[20:45:35] <lisp123> Sometimes I wonder if its a devious plot by Big Tech to prevent the population being empowered
[20:45:53] <beach> Nah, just incompetence. 
[20:46:07] <lisp123> Heh
[20:46:45] <beach> What's the quote again?  Don't attribute to malice what could be explained by incompetence?  
[20:47:39] <lisp123> Never attribute to malice that which can be adequately explained by stupidity
[20:47:42] <lisp123> (google)
[20:47:44] <beach> Right.
[20:49:55] <beach> Since the software industry is incompetent, it does not request the training they need; just the training they incorrectly believe they need.  So there are places willing to supply that kind of training.
[20:50:20] <beach> If industry started rejecting our students, things would change pretty fast.
[20:50:59] <lisp123> Yep
[20:51:04] <beach> But it is also the fault of my (former) colleagues.  They too have no idea what industry needs, so they give industry what it asks for.
[20:52:00] <lisp123> Thats unfortunate
[20:52:22] <beach> This is the more serious problem, because it preserves incompetence indefinitely. 
[20:52:35] <lisp123> As someone who dropped out of Computer Science, I'm suprrised to see its hasn't been taught properly
[20:53:12] <lisp123> Yes, and among those who know no better, it becomes their truth
[20:53:31] <beach> Its a systemic problem.  Teachers are hired for competence in narrow research specialties.  So they know nothing about what the students and industry need.
[20:53:56] <lisp123> Yep thats true
[20:54:11] <lisp123> Unfortunately Education hasn't been prioritised by universities across most fields
[20:55:02] <lisp123> If they paid educators more, gave them better positions vs. chasing glory in research, it would definitely have had a different outcome
[20:55:07] <lisp123> Both can go hand in hand
[20:55:33] *** Joins: Oladon (~olad@98.43.81.226)
[20:55:34] <beach> That might help, yes.
[20:57:21] <beach> So with Common Lisp, we may have a slight advantage here.  The community has a disproportionate number of very smart and very knowledgeable people.  If we can transmit that attitude to newbies who come here, then Common Lisp programmers will be more competent than others on the average.
[20:58:30] <lisp123> That's very true. As newbies, we are actually blessed by the quality of textbooks and also the quality of programmers in the community
[20:59:41] <beach> But some newbies don't appreciate the unusually (for them) high expectations, and the not-so-subtle hints that they need to improve. 
[21:01:22] <lisp123> Yes
[21:01:22] <beach> It is sometimes "amusing" to find newbies exposing their code, but then it turns out, it was not to get feedback on it, but just a pat on the back "good newbie!!!".
[21:01:53] <lisp123> I think most of actually do it for that reason sometimes :) So its a rude shock when the response isn't what one expects
[21:02:16] <beach> That's very surprising to me, but you may be right. 
[21:02:39] <lisp123> But I think that's once place the CL community can be a bit kinder. Occasionally the responses are too technical, and some positive encouragement is welcome
[21:03:22] <lisp123> Not on IRC, but for example on reddit or other places
[21:03:26] <beach> Sounds plausible.  My remarks are usually considered "dry", because I am busy, so I don't take enough time to handle the social part. 
[21:03:42] <beach> I see.
[21:03:48] <lisp123> No, I think here all the comments tend to be very helpful, also because they are in real time
[21:03:51] <beach> I am not in those other places.
[21:04:15] <lisp123> But when you go to slower paced places, things can get misconstrued
[21:04:32] <beach> Makes sense, sort of.
[21:05:08] <lisp123> Like if somebody new posted a blog article or project, the first thing I would do is congratulate them because they are trying to do more Lisp. But others may come back instead with a list of corrections
[21:05:24] <lisp123> As they say, PIP - Praise Improvement Praise
[21:05:48] <beach> I see.  I often forget (or don't have time for) the praise. 
[21:06:55] <lisp123> You are already too helpful on these channels :)
[21:07:12] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:07:26] <lisp123> The gentle encouragement can be left to others (like me) who have less technical contributions to be made
[21:08:08] <beach> Good to know.
[21:13:02] <beach> Anyway, dinner is imminent.  Time to call it a day.
[21:13:27] <lisp123> Enjoy!
[21:39:54] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:56:07] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[22:01:04] *** Joins: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de)
[22:12:51] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:22:39] *** Joins: treflip (~user@user/treflip)
[22:24:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:30:49] *** Joins: epony (epony@user/epony)
[22:32:17] *** Quits: silasfox (~sbv@p200300cec71a5900cb7bd80228c74564.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:36:22] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:38:55] *** Joins: aeth_ (~aeth@user/aeth)
[22:39:01] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:39:06] *** aeth_ is now known as aeth
[22:41:45] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:47:10] *** Joins: treflip (~user@user/treflip)
[22:48:10] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:54:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[23:25:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:29:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[23:39:07] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Remote host closed the connection)
[23:51:06] *** Joins: epony (epony@user/epony)
