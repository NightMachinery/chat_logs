[00:06:07] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (Quit: Gdyby mi się chciało tak jak mi się nie chce...)
[00:06:27] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[00:14:27] <FromDiscord> <haxscramper> No, as condition, instead of repeating goal ==
[00:14:43] <FromDiscord> <enthus1ast> yes
[00:14:47] *** Joins: cyraxjoe (~joe@201.150.5.24)
[00:26:49] *** Quits: xxov (~xxov@37.172.65.212) (Ping timeout: 246 seconds)
[00:42:46] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[00:43:52] *** Joins: xet7 (~xet7@user/xet7)
[01:02:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:9cef:7c5:9943:44fb)
[01:04:54] *** Quits: tdc (~tdc@217.61.224.137) (Quit: Leaving)
[01:06:23] <madprops> s &= if (m and vf) or (not m and not vf): 
[01:06:26] <madprops> is that allowed?
[01:06:31] <madprops> (it also has an else)
[01:06:46] <madprops> I mean can I append &= from an if like that?
[01:07:19] <FromDiscord> <Elegantbeef> You can
[01:08:19] <FromDiscord> <Elegantbeef> You could also do https://play.nim-lang.org/#ix=3wue but this is getting into bikeshed territory
[01:09:15] <madprops> interesting
[01:09:56] <madprops> it's just that im getting
[01:09:57] <madprops> Error: expression expected, but found 'keyword if'
[01:10:09] <FromDiscord> <Elegantbeef> full code example?
[01:10:11] <madprops> https://dpaste.org/vx1L
[01:10:23] <madprops> or i can post fuller
[01:10:38] <madprops> ns_vowels and ns_constants are arrays of chars
[01:11:31] <madprops> if i use an intermediary variable to store the result
[01:11:34] <madprops> i then can append it to s
[01:11:54] <FromDiscord> <Elegantbeef> Fuller code would be nicer, something i can run
[01:12:09] <madprops> ok 
[01:13:34] <madprops> https://play.nim-lang.org/#ix=2sSr
[01:13:54] <madprops> ok forgot to add n
[01:14:02] <madprops> n can be 4 for example
[01:14:39] <madprops> also that returns shouldn't be there
[01:14:59] <FromDiscord> <Elegantbeef> ix.io didnt like that url, only getting a C file
[01:15:47] <madprops> https://dpaste.org/LWQ4
[01:18:09] <madprops> https://play.nim-lang.org/#ix=3wuf
[01:18:20] <FromDiscord> <Elegantbeef> Ah ok so the issue seems to be with the `&=` operator you need to enclose the expression in `()` otherwise it doesnt work
[01:19:11] <madprops> the whole if else or just the if ?
[01:20:15] <madprops> ok it's the full if else
[01:20:16] <madprops> why is that though
[01:21:58] <FromDiscord> <Elegantbeef> Seems assignment operators do not like unwrapped expressions
[01:23:44] <FromDiscord> <j-james> How is this project able to reference files from a containing directory?
[01:23:44] <FromDiscord> <j-james> https://github.com/pragmagic/godot-nim/blob/master/godot/core/aabb.nim#L6
[01:25:45] <FromDiscord> <⃟⃟> can you make a `++` operator like `a ++ b`
[01:26:07] <FromDiscord> <Elegantbeef> You can make binary and infix operators
[01:26:14] <FromDiscord> <Elegantbeef> no postfix
[01:26:53] <FromDiscord> <j-james> In reply to @j-james "How is this project": Ah, never mind, I missed the sneaky `nim.cfg` file
[01:27:45] <FromDiscord> <Elegantbeef> i mean infix and prefix, no postfix operators
[01:31:29] <FromDiscord> <⃟⃟> wait
[01:31:36] <FromDiscord> <⃟⃟> what type are strings
[01:32:01] <FromDiscord> <Elegantbeef> Strings
[01:32:02] <FromDiscord> <Elegantbeef> `string` exactly
[01:32:18] <FromDiscord> <⃟⃟> so they arent some char[] type or something?
[01:32:28] <FromDiscord> <Elegantbeef> No they're pascal style strings
[01:32:34] <FromDiscord> <Elegantbeef> if you want a C string use `cstring`
[01:33:05] <FromDiscord> <⃟⃟> i dont
[01:33:47] <FromDiscord> <⃟⃟> i was just expecting them to be some sort of arraylist of characters
[01:33:50] <FromDiscord> <⃟⃟> not a special type
[01:34:21] <FromDiscord> <Elegantbeef> Well they're internally the same as `seq[char]` with some caveats
[01:34:38] <FromDiscord> <⃟⃟> like what
[01:34:39] <FromDiscord> <Elegantbeef> the character after the last one is always a `\0` so you can do `.cstring` for free
[01:44:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:44:51] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:53:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:9cef:7c5:9943:44fb) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:14:42] <madprops> how should I doc-comment this? https://dpaste.org/OAkv
[02:15:29] <FromDiscord> <Elegantbeef> well you shouldnt use a table for a start
[02:17:28] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3wuv is just better 😀
[02:17:58] <madprops> ah nice
[02:18:43] <FromDiscord> <Elegantbeef> also could've used `array['a'..'c', int]` but not overly needed since this is a simple conversion
[02:19:20] <madprops> so by implementing toAlphabetPos you get a toIndex method ?
[02:19:39] <FromDiscord> <Elegantbeef> Nah i just changed the name
[02:19:43] <FromDiscord> <Elegantbeef> I'm a dumb dumb
[02:20:21] <FromDiscord> <Elegantbeef> it was `toIndex` but that wasnt a good name so changed it to `toAlphabetPos` and forgot to change the calling code
[02:20:24] <madprops> so that's faster than a table?
[02:20:35] <FromDiscord> <Elegantbeef> Vastly
[02:20:59] <FromDiscord> <Elegantbeef> Well it doesnt need to hash a byte, so it's not "vastly" but is faster
[02:21:33] <madprops> i see
[02:21:39] <FromDiscord> <Elegantbeef> You can always benchmark it, i imagine it'll be faster in larger numbers, but it's more of a case of not using a useless table and using more memory
[02:22:51] <madprops> ok using that also got rid of 2 imports
[02:22:56] <madprops> tables and enumerate
[02:31:04] *** Quits: max22- (~maxime@2a01cb0883359800c602eedd9973c4e4.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:40:39] <madprops> hmm having some issue not sure why https://dpaste.org/KPT1
[02:45:22] <madprops> ok seems it was a strformat issue again
[02:45:28] <madprops> had to precalculate a var
[02:47:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[02:48:52] <FromDiscord> <enthus1ast> yeah first runtime evaluated nimja templates \:D
[02:51:27] <madprops> how can I specify output for nim docs?
[02:51:46] <madprops> instead of putting it in src/
[02:52:29] <madprops> or should I move the output manually
[02:52:42] <FromDiscord> <enthus1ast> ` -o:docs/`
[02:53:13] <FromDiscord> <enthus1ast> nim doc --project -o\:docs/ src/nimja.nim
[02:53:19] <madprops> why --project ?
[02:53:51] <FromDiscord> <enthus1ast> this also generates docs for all imported modules
[02:54:16] <madprops> oh
[02:54:25] <madprops> including std modules?
[02:54:48] <FromDiscord> <enthus1ast> ähm
[02:55:01] <FromDiscord> <enthus1ast> i don't think so
[02:55:20] <madprops> local modules yeah
[02:55:24] <madprops> it's just that i have a single file
[02:56:18] <FromDiscord> <enthus1ast> then you dont need --project i suppose
[02:57:20] <madprops> weird thing is that it creates theindex.html
[02:57:28] <madprops> and thelibname.html
[02:57:48] <FromDiscord> <enthus1ast> this you can disable
[02:58:21] <madprops> ok I see
[02:58:25] <madprops> using --indexs
[02:58:29] <madprops> --index
[02:58:38] <FromDiscord> <Elegantbeef> Mad you may want to use `strformat.%`
[02:59:13] <FromDiscord> <Elegantbeef> Actually why are you even using formatting there
[03:00:26] <madprops> to avoid & " " &  ?
[03:03:05] <FromDiscord> <Elegantbeef> Sure but https://play.nim-lang.org/#ix=3wuE
[03:03:58] <FromDiscord> <Elegantbeef> sorry forgot the `import std/strformat`
[03:04:25] <madprops> you're right
[03:04:53] <FromDiscord> <Elegantbeef> Jesus today is not my day, cannot right any usable code today 😀
[03:06:56] <madprops> https://dpaste.org/xnom
[03:07:10] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[03:07:27] <FromDiscord> <Elegantbeef> Why are you writing to a temp variable then returning?!
[03:09:09] <madprops> because i might add to the s variable
[03:09:24] <FromDiscord> <Elegantbeef> But result exists
[03:11:03] <madprops> you mean the if result?
[03:11:08] <FromDiscord> <Elegantbeef> The uppityness about result is mostly joking, but https://play.nim-lang.org/#ix=3wuF
[03:11:19] <FromDiscord> <Elegantbeef> Nim has the explict result variable, no reason to make your own
[03:11:25] <FromDiscord> <Elegantbeef> implicit\
[03:11:30] <FromDiscord> <Elegantbeef> I really cannot do anything right today
[03:12:26] <madprops> oh i forgot nim had the result thing
[03:17:46] <madprops> cleaned up some lines using result, nice
[03:27:16] <FromDiscord> <QueenFuckingAdrielle> hulloh
[03:28:54] <FromDiscord> <QueenFuckingAdrielle> Its been a while since I've been here, still my favorite programming discord
[03:29:00] <FromDiscord> <Elegantbeef> Hello
[03:29:07] <FromDiscord> <QueenFuckingAdrielle> Hey elegant
[03:29:36] <FromDiscord> <QueenFuckingAdrielle> changed my name, used to be gyllou, im the robot chick
[03:30:24] <FromDiscord> <Elegantbeef> Ah
[03:30:49] <FromDiscord> <QueenFuckingAdrielle> you gave me a bunch of advice a while back lol
[03:30:50] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:31:12] <FromDiscord> <QueenFuckingAdrielle> i have a new consulting job i might be able to use nim for so im excited
[03:31:43] <FromDiscord> <Elegantbeef> Nice, becoming a more common phrase to hear
[03:31:56] *** Joins: flynn (~mcbloch@user/flynn)
[03:32:00] <FromDiscord> <QueenFuckingAdrielle> yea im in a good spot to push for it now thankfully
[03:32:31] <FromDiscord> <QueenFuckingAdrielle> still working on our robotics platform as well. not sure what sort of bd we are headed for though
[03:33:04] <FromDiscord> <QueenFuckingAdrielle> im hopefully going to be using in this biotech contract i have though
[03:33:37] <FromDiscord> <QueenFuckingAdrielle> are you in the us elegant?
[03:34:37] *** Joins: xet7 (~xet7@user/xet7)
[03:38:59] <nrds> <06Prestige99> Hope you get to use Nim, that would be awesome
[03:40:08] <FromDiscord> <Elegantbeef> Nope
[03:40:19] <FromDiscord> <Elegantbeef> Slightly north of that land
[03:41:00] <FromDiscord> <ynfle (ynfle)> Canada! No way!
[03:41:24] <FromDiscord> <Elegantbeef> Very much so
[03:42:32] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:42:50] <FromDiscord> <Elegantbeef> ynfle what's so impressive with RNGing myself here? 😛
[03:43:32] <FromDiscord> <QueenFuckingAdrielle> O_o
[03:46:22] <FromDiscord> <ynfle (ynfle)> I'm from Canada too
[03:46:45] <FromDiscord> <QueenFuckingAdrielle> not far off here, upstate ny
[03:47:09] <FromDiscord> <Elegantbeef> I mean i'm far from NY so yes i am
[03:47:44] <FromDiscord> <QueenFuckingAdrielle> lol well yes, i imagine not everyone lives that close to nys
[03:48:26] <FromDiscord> <QueenFuckingAdrielle> i just wanted to live somewhere decent thats as far away without needing a visa
[03:48:40] <FromDiscord> <ynfle (ynfle)> Alaska?
[03:48:58] <FromDiscord> <ynfle (ynfle)> Hawaii?
[03:48:59] <FromDiscord> <QueenFuckingAdrielle> i thought about it, but they arent very nice to gay people there for the most part
[03:49:12] <FromDiscord> <QueenFuckingAdrielle> no thanks on hawaii, too hot
[03:49:55] <FromDiscord> <QueenFuckingAdrielle> It was between main and nys, decided on nys because of the economy
[03:50:09] <FromDiscord> <QueenFuckingAdrielle> (edit) "main" => "maine"
[03:54:29] <FromDiscord> <Elegantbeef> Where you located ynfle, i'm in bumfuck nowhere alberta? \:D
[03:57:33] <FromDiscord> <ynfle (ynfle)> Lol,  sounds like it
[03:57:36] <FromDiscord> <ynfle (ynfle)> Ontario
[03:57:53] <FromDiscord> <ynfle (ynfle)> Well not now. I'm a student elsewhere
[04:33:34] <madprops> https://madprops.github.io/numberstring/
[04:35:48] <FromDiscord> <Elegantbeef> Want a code review?
[04:36:52] <madprops> if you want to do that, sure
[04:38:46] <madprops> just so you know there are some bash scripts to run and test
[04:38:55] <FromDiscord> <Elegantbeef> Yea i seen the useless scripts
[04:39:13] <madprops> how are they useless?
[04:39:17] <FromDiscord> <Elegantbeef> nimble has a built in `nimble test` which will run all files with `t.nim`
[04:39:50] <FromDiscord> <Elegantbeef> so if you just named `intergration` `tintergration` you'd have it apart of the test suite
[04:40:09] <madprops> ah
[04:40:13] <madprops> good to know
[04:40:26] <madprops> t_integration
[04:40:31] <FromDiscord> <Elegantbeef> the run is pointless since there is no code ran in the main file
[04:40:54] <madprops> i think it's mostly so the binary gets placed in /bin
[04:41:26] <FromDiscord> <Elegantbeef> So then make a `config.nims` dont use bash 😀
[04:51:57] <madprops> got an example of a config.nims ?
[04:53:09] <madprops> ok think i found an example
[04:55:18] <madprops> switch("out", "bin/debug")    won't cut it
[04:55:26] <madprops> Error: command expects a filename
[04:55:51] <madprops> oh nvm
[04:57:39] <madprops> i guess there's no way in avoiding adding: src/numberstring.nim as an argument to the command
[05:00:12] <madprops> also wondering if the config in config.nims affects both debug and release binaries
[05:01:32] <FromDiscord> <Elegantbeef> Well here is my quick review https://github.com/beef331/numberstring/commit/db60d293436fccb46dfb56d3a1c6bdcd7310bb7e#diff-a607b90233afd98462387f44deda392986bec82aab75db20ce1b161e904d0a65 removed stuff that isnt overly sensible and comment for stuff that felt needed an explanation
[05:03:07] <madprops> the constants file wasn't supposed to be there
[05:03:10] <madprops> forgot to delete it
[05:03:31] <madprops> lets see
[05:04:20] <FromDiscord> <Elegantbeef> config.nims is passed to the compiler as a config file so yes
[05:06:21] <FromDiscord> <Elegantbeef> Feel free to ask any questions of course
[05:07:14] <madprops> the idea of the ns_x vars was because they were going to be exported
[05:07:17] <madprops> and didn't want to pollute ns
[05:07:20] <madprops> namespace
[05:07:27] <FromDiscord> <Elegantbeef> Well that's silly
[05:07:35] <FromDiscord> <Elegantbeef> yes i have abrasive views
[05:09:01] <madprops> why though
[05:09:11] <madprops> names like "vowels" could cause problems
[05:09:13] <FromDiscord> <Elegantbeef> It's not an issue at least in my view, cause there are vehicles to get around it
[05:09:27] <FromDiscord> <Elegantbeef> It could cause problems and the compiler will tell you when it does
[05:11:40] <madprops> "No reason to parse int here, there are cheaper methods of getting leading digit"
[05:11:48] <FromDiscord> <Elegantbeef> let's look at the difference between your version and and mine when if there is ambiguity `ns_vowels` vs. `numberstring.Vowels` we did the exact same thing but my way is optional
[05:12:08] <FromDiscord> <Elegantbeef> This isnt C so i dont get the C style approach, but YMMV
[05:12:29] <FromDiscord> <Elegantbeef> Nothing states you have to accept my view, so live life the way you want to
[05:12:46] <madprops> the randomize thing was interesting
[05:12:56] <madprops> didn't realize it could change the program itself
[05:12:59] <madprops> which can cause problems
[05:15:13] <madprops> oh you changed the timeago output lol
[05:15:42] <madprops> it was meant to be used like on internet posts "posted 1 hour ago"
[05:15:48] <madprops> so it carried less information
[05:18:07] <FromDiscord> <Elegantbeef> Ah was unclear by the name and description
[05:18:22] <madprops> yeah i should have described it better
[05:18:53] <FromDiscord> <Elegantbeef> Well calling randomize inside the main body is certain to cause issues if anyone has a randomized state, when dealing with random you should have a lazy one that uses global state and a non lazy one which takes a `Rand`
[05:19:03] <FromDiscord> <Elegantbeef> This way you dont change the seed unless the programmer doesnt care
[05:24:50] <madprops> so I should be adding runnableExamples to each proc 
[05:25:02] <madprops> how is it actually runnable?
[05:25:07] <FromDiscord> <Elegantbeef> It's a second layer of testing and gives a code example
[05:25:12] <FromDiscord> <Elegantbeef> It runs on doc gen
[05:27:48] <madprops> ok so Digits and digits is not the same var, I thought it would, so the namespacing makes less sense now
[05:28:30] <madprops> since this_cat == thisCat i wasn't sure
[05:28:50] <FromDiscord> <Elegantbeef> Ah first character is case sensitive
[05:51:44] <madprops> how can I pass arguments to nimble test?
[05:51:51] <madprops> i mean arguments for the test itself
[05:51:53] <madprops> not to nimble
[05:53:18] <FromDiscord> <Elegantbeef> Dont know if you can
[05:54:17] <madprops> yeah probably doesn't make sense
[05:54:28] <FromDiscord> <impbox [ftsf]> they should be self-contained ideally
[05:54:47] <FromDiscord> <impbox [ftsf]> if you need to test multiple arguments, just make more checks
[05:54:56] <FromDiscord> <impbox [ftsf]> and test them all
[05:56:44] *** Joins: tiorock (~rc@192.12.114.207)
[05:56:44] *** Quits: tiorock (~rc@192.12.114.207) (Changing host)
[05:56:44] *** Joins: tiorock (~rc@user/rockcavera)
[05:56:44] *** rockcavera is now known as Guest1210
[05:56:44] *** tiorock is now known as rockcavera
[05:59:40] *** Quits: Guest1210 (~rc@user/rockcavera) (Ping timeout: 240 seconds)
[06:03:04] <FromDiscord> <NumLock> hello
[06:03:20] <FromDiscord> <Elegantbeef> Hello
[06:03:43] <FromDiscord> <NumLock> Why is the main conversation in this server taken up by bots
[06:05:00] <FromDiscord> <JSONBash> Not actual bots
[06:05:16] <FromDiscord> <JSONBash> It’s a way to distinguish people who are bridged over from other platform
[06:05:23] <FromDiscord> <JSONBash> ElegentBeef is on matrix
[06:05:29] <FromDiscord> <NumLock> Ok
[06:05:32] <FromDiscord> <JSONBash> Other are on IRC
[06:05:38] <FromDiscord> <JSONBash> But I am on discord
[06:05:57] <FromDiscord> <JSONBash> Hello btw! 👋
[06:06:04] <FromDiscord> <NumLock> Hello\
[06:06:05] <FromDiscord> <NumLock> hru
[06:07:17] <madprops> beep boop
[06:07:42] <FromDiscord> <⃟⃟> design discussion:
[06:07:52] <FromDiscord> <⃟⃟> file path joining with the `/` operator should be removed
[06:08:08] <FromDiscord> <⃟⃟> or atleast written that its not reccomended
[06:08:14] <FromDiscord> <Elegantbeef> Why?
[06:08:31] <FromDiscord> <⃟⃟> because i find i extremely confusing
[06:08:39] <FromDiscord> <⃟⃟> its dividing a path
[06:08:47] <FromDiscord> <Elegantbeef> It's an operator
[06:08:55] <FromDiscord> <⃟⃟> really they use `/` cause theyre used to filesystem that uses `/` to seperate paths
[06:09:20] <FromDiscord> <Elegantbeef> Yes, so what's the issue
[06:09:28] <FromDiscord> <⃟⃟> its confusing
[06:09:33] <FromDiscord> <⃟⃟> compared to a function call which is not
[06:09:41] <FromDiscord> <Elegantbeef> So then use the function
[06:09:51] <FromDiscord> <⃟⃟> i would
[06:10:02] <FromDiscord> <Elegantbeef> So then what's the issue
[06:10:03] <FromDiscord> <⃟⃟> but i want to discourage the use of `/` or remove it all together
[06:10:06] <FromDiscord> <⃟⃟> like i said
[06:10:14] <FromDiscord> <Elegantbeef> Not going to happen it's fantastic
[06:10:32] <FromDiscord> <⃟⃟> why ?
[06:10:52] <FromDiscord> <⃟⃟> i do not like using operators in ways like this
[06:11:09] <FromDiscord> <⃟⃟> i expect `/` to divide something
[06:11:18] <FromDiscord> <Elegantbeef> Cause it's more ergonomic than `"dir".joinPath("subDir").joinPath("subSubDir")` `"dir" / "subDir" / "subSubDir"`
[06:11:29] <FromDiscord> <Elegantbeef> Well i like operators to do operations, so it's fine
[06:11:56] <FromDiscord> <⃟⃟> `joinPath("a", "b", "c")`
[06:12:14] <FromDiscord> <⃟⃟> also
[06:12:21] <FromDiscord> <Elegantbeef> Ah didnt realize there was a vararg version
[06:12:25] <FromDiscord> <⃟⃟> thats already so confusing
[06:12:33] <FromDiscord> <⃟⃟> it looks like youre dividing a string
[06:12:51] <FromDiscord> <⃟⃟> c++ uses `/` too but atleast there it has to clearly be with a file path object
[06:12:54] <FromDiscord> <Elegantbeef> No it looks like i'm calling `/("dir", "subDir")`
[06:13:19] <madprops> since you can't divide strings, it makes sense to me. Also python does the same thing with Path
[06:13:21] <FromDiscord> <Elegantbeef> So then what should `{10u8}  {20u8}` do?
[06:13:46] <FromDiscord> <Elegantbeef> or `"hello $#" % 100`
[06:15:04] <FromDiscord> <⃟⃟> if you wrote `divide("a", "b", "c")` it would be confusing, so using `/` is also confusing because you expect this to be for division, so now the programmer is expected to put it in his mind that `/` can also mean file path seperator (his operating system might not even use `/` for it too)
[06:15:41] <FromDiscord> <Elegantbeef> but that isnt `divide` that is the `/` operator
[06:16:18] <FromDiscord> <⃟⃟> if you want to start using operators arbitrarily instead of functions thats gonna be very confusing in my opinion
[06:16:30] <FromDiscord> <⃟⃟> now `+` or `/` no longer mean roughly the same thing
[06:16:35] <FromDiscord> <Elegantbeef> And nim encourages ergonomics by enabling the above
[06:16:42] <FromDiscord> <Elegantbeef> So i dont see the issue
[06:16:56] <FromDiscord> <Elegantbeef> It's more ergonomic/readable, if you dont like it dont use it
[06:17:09] <madprops> ergonomics ... if that was so strings would be concatenated with + instead of & 
[06:17:21] <madprops> but i got used to it eventually
[06:17:34] <FromDiscord> <Elegantbeef> If you dont know what the operator is doing you can always goto definition
[06:17:43] <FromDiscord> <⃟⃟> i dont think thats a valid response to this problem, its in the standard library, people are going to use `/`, i might be reading the code of people who use it
[06:18:05] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/878092994073489438/image.png
[06:18:06] <FromDiscord> <Elegantbeef> Or even just hover it
[06:18:28] <FromDiscord> <Elegantbeef> yes i realize my code here is dumb, dont question it
[06:18:51] <FromDiscord> <⃟⃟> reducing operators to just arbitrary symbols is not something i would do
[06:18:55] <FromDiscord> <⃟⃟> i want `+` to add
[06:18:58] <FromDiscord> <⃟⃟> `-` to substract
[06:18:59] <FromDiscord> <⃟⃟> etc
[06:21:18] <madprops> I think it's easy to get the concepts after some thought though
[06:21:27] <madprops> context based operators
[06:21:38] <madprops> but i do get what you're saying
[06:23:04] <madprops> most languages at least use + for addition and string concat
[06:23:43] <madprops> well at least some do
[06:25:25] <FromDiscord> <Elegantbeef> i dont buy the "i dont like it so it must be removed" make an RFC so people can either agree or disagree, instead of complaining here
[06:29:26] <FromDiscord> <exelotl> I like `/` for paths, its readable and unambiguous in all the situations I've ever seen it
[06:31:38] <FromDiscord> <exelotl> I think we have our share of questionable operators (why is there a json operator lol) but / isn't one of them
[06:33:50] <FromDiscord> <impbox [ftsf]> I also like `/` for path joining
[06:34:04] <FromDiscord> <impbox [ftsf]> but what about `\\` ? ;)
[06:34:20] <FromDiscord> <Elegantbeef> Lol impbox
[06:34:50] <FromDiscord> <⃟⃟> since paths seem to just be strings i think that makes `/` even worse than it normally would be
[06:35:08] <FromDiscord> <⃟⃟> string now have an operator specifically for using the paths api
[06:35:18] <FromDiscord> <impbox [ftsf]> have you encountered a place where it's problematic and confusing?
[06:35:26] <FromDiscord> <⃟⃟> yes
[06:35:31] <FromDiscord> <Elegantbeef> Oh noes, when you `import std/os`  you get code that it exports!
[06:35:47] <FromDiscord> <impbox [ftsf]> you don't get std divided by os?
[06:35:50] <FromDiscord> <Elegantbeef> Wait until you learn about distinct types
[06:36:17] <FromDiscord> <Elegantbeef> Impbox that is the most evil question i've seen today
[06:36:17] <FromDiscord> <⃟⃟> those are nice
[06:36:36] <FromDiscord> <⃟⃟> why arent paths a distinct type
[06:37:29] <FromDiscord> <Elegantbeef> There are probably answers to that question on github, the forums or irclogs
[06:38:02] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/compiler/pathutils.html
[06:38:18] <FromDiscord> <impbox [ftsf]> they are
[06:38:32] <FromDiscord> <⃟⃟> well the joinPath function dosent seem to use those
[06:39:26] <FromDiscord> <⃟⃟> this makes me even more confused
[06:39:34] <FromDiscord> <⃟⃟> do i use this or the other library?
[06:40:46] <FromDiscord> <impbox [ftsf]> what are you trying to do?
[06:41:20] <FromDiscord> <⃟⃟> work with file paths
[06:41:42] <FromDiscord> <impbox [ftsf]> i'd just use strings and `/`
[06:42:15] <FromDiscord> <impbox [ftsf]> but if you want to add extra security you could add your own version that only takes a distinct type
[06:42:46] <FromDiscord> <impbox [ftsf]> what kind of work are you doing with file paths?
[06:43:11] <FromDiscord> <⃟⃟> what pathJoin or `/` do
[06:43:30] <FromDiscord> <⃟⃟> well even if i use this distinct library
[06:43:38] <FromDiscord> <⃟⃟> my strings will still have `/` if i import os
[06:43:39] <FromDiscord> <impbox [ftsf]> if your application is just joining paths, sounds like you should use `/` since it works
[06:44:07] <FromDiscord> <Elegantbeef> so then do \`\`\`import std/os except \`/\`\`\`\`
[06:44:15] <FromDiscord> <impbox [ftsf]> yep
[06:44:37] <FromDiscord> <Elegantbeef> I fucked that formatting up but anywho
[06:44:59] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://paste.rs/y7W
[06:50:21] <FromDiscord> <Elegantbeef> and mad seems `&` was copied from ada, if interested why it's not `+`
[06:50:31] <madprops> ah
[06:51:21] <madprops> i would prefer + but whatevs
[06:51:35] <FromDiscord> <Elegantbeef> well you can alias it, so you can have what you want
[06:51:39] <FromDiscord> <impbox [ftsf]> yeah, i wouldn't mind it being +, you can always add it i guess
[06:51:47] <FromDiscord> <impbox [ftsf]> is aliasing a thing now?
[06:52:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3wvh
[06:52:10] <FromDiscord> <Elegantbeef> I consider that aliasing
[06:53:24] <madprops> & has the advantage that you know for sure that your'e dealing with strings
[06:54:18] <madprops> which can be their own realm
[06:57:04] <FromDiscord> <JohnAD (John Dupuy)> The mathemetician in me dislikes using `+` for strings since ("a" + "b") != ("b" + "a"). That is, you cannot really add strings since they do not follow the communitive property.
[06:58:31] <FromDiscord> <JohnAD (John Dupuy)> Unless, of course, the plus sign represents some kind of rolling cipher operation.  "abc" + "foo" == "foo" + "abc" == "e8\\"
[06:59:44] <FromDiscord> <JohnAD (John Dupuy)> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/878102810963632158): The mathemetician in me dislikes using `+` for strings since ("a" + "b") != ("b" + "a"). That is, you cannot really add strings since they do not follow the communative property.
[07:00:02] <FromDiscord> <Elegantbeef> Quick someone get the nerd beating stick 😛
[07:00:45] <FromDiscord> <Elegantbeef> I'm pretty in different about `+` vs. `&` since it's just an operator and not overly messy either way
[07:01:17] <FromDiscord> <Elegantbeef> It's not like we're doing `a +&%#@ b` 😀
[07:01:25] <madprops> + is faster to type with my hands though
[07:01:42] <madprops> muscle memory etc
[07:02:27] <madprops> but it's almost the same
[07:03:37] <FromDiscord> <Elegantbeef> Dont make me suggest we should only use `a` for everything to make it so we have the easiest language to type
[07:04:51] <FromDiscord> <Elegantbeef> Yes i have no control over my hyperbolic comments they just appear after i think them, quite odd
[07:05:20] <madprops> even brainfuck uses + 
[07:05:45] <madprops> ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.
[07:05:46] <madprops> <<+++++++++++++++.>.+++.——.——–.>+.>.
[07:05:51] <madprops> haha
[07:22:57] <madprops> i decided to not put runnableExamples
[07:23:05] <madprops> theres' already an integration test
[07:23:09] <madprops> and the comments get too bloated
[07:23:23] <FromDiscord> <Elegantbeef> The examples are for showing examples
[07:23:30] <FromDiscord> <Elegantbeef> So what your comments already do
[07:24:42] <madprops> except comments don'pt need to be compilable
[07:24:58] <madprops> so i can freely explain with some sentences
[07:25:10] <madprops> i do like showing examples but it feels bloated
[07:25:12] <FromDiscord> <Elegantbeef> Which is a problem imo
[07:25:12] <FromDiscord> <Elegantbeef> Sure but do a doc comment then throw the example in
[07:26:05] <FromDiscord> <Elegantbeef> Yea idk it's not that bloated https://nim-lang.org/docs/strutils.html#allCharsInSet%2Cstring%2Cset%5Bchar%5D
[07:26:39] <madprops> it looks great on the doc
[07:26:42] <madprops> but i mean in the src itself
[07:27:38] <madprops> but yeah probably worth it
[07:28:28] <FromDiscord> <impbox [ftsf]> the doAssert in the docs looks odd
[07:28:40] <FromDiscord> <impbox [ftsf]> since that's now how you'd use it in practice
[07:28:44] <FromDiscord> <Elegantbeef> old docs should be `assert`
[07:28:48] <FromDiscord> <impbox [ftsf]> which is what an example should be
[07:29:04] <FromDiscord> <Elegantbeef> Oh that's what you mean \:D
[07:29:45] <FromDiscord> <impbox [ftsf]> yep
[07:30:08] <FromDiscord> <Elegantbeef> Idk for documenting procedures it seems fine to me, for explaining things more advanced you can always write more elaborate RST
[07:35:54] <FromDiscord> <gogolxdong (liuxiaodong)> Is there any yaml library is Nim?
[07:38:18] <nrds> <06Prestige99> I see https://nimble.directory/pkg/yaml
[07:38:44] <nrds> <06Prestige99> oh a whole site - https://nimyaml.org/
[07:41:24] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:44:14] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:49:51] <madprops> decided to add the runnableExamples
[08:05:05] <FromDiscord> <creonico> Is it possible to view the compiled c version of my nim code?
[08:05:14] <FromDiscord> <creonico> and if so, how?
[08:07:25] *** Joins: vicfred (~vicfred@user/vicfred)
[08:07:52] <nrds> <06Prestige99> I believe there's a cache somewhere, but I don't recall where
[08:08:11] <FromDiscord> <Elegantbeef> the output C is thrown in a temp folder, you can tell it to output it somewhere else with `--nimCache:somePath`
[08:08:22] <FromDiscord> <impbox [ftsf]> @creonico yep, it's stored in "nimcache", but you can specify with --nimCache:dirname
[08:08:24] <FromDiscord> <Elegantbeef> It's in `.cache/nim/projectname` on linux
[08:08:25] <FromDiscord> <impbox [ftsf]> damn beef
[08:08:40] <FromDiscord> <Elegantbeef> It's ok imp you'll be faster next time
[08:08:56] <FromDiscord> <impbox [ftsf]> nah, my RSI means i'll never be able to compete
[08:09:15] <FromDiscord> <impbox [ftsf]> https://nim-lang.org/docs/nimc.html#compiler-usage-generated-c-code-directory
[08:19:08] <madprops> doc generation always trigger a git diff becuse it uses a timestamp
[08:19:26] <madprops> is there a way to just check the doc runnableExamples without generating ?
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:46:35] <madprops> what's the equivalent of: import std/[os, parseopt, strformat, strutils]
[08:46:39] <madprops> for local modules?
[08:46:49] <madprops> should I use pkg?
[08:48:28] <madprops> ok nvm I just comma separate it
[08:50:22] <madprops> weird thing is, if I import the modules like: import types, utils, types
[08:50:29] <madprops> then I get an error about something being undefined
[08:50:46] <madprops> wait why is types twice there..
[08:50:59] <madprops> oh that was an export
[08:51:08] <madprops> nvm
[09:13:28] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[09:14:35] *** Joins: flynn (~mcbloch@user/flynn)
[09:33:21] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[09:56:57] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[09:57:16] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[11:21:06] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:25:01] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:29:15] <FromDiscord> <j-james> What is the C type `dev_t`'s equivalent in Nim?
[11:29:23] <FromDiscord> <j-james> I've found things saying both `int32` and `culong`, depending on where I look
[11:31:11] <FromDiscord> <Rika> https://nim-lang.org/docs/posix.html#Dev
[11:31:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:9cef:7c5:9943:44fb)
[11:37:37] <FromDiscord> <j-james> Fantastic, thank you
[11:50:02] <FromDiscord> <j-james> Do you know what `ssize_t` is?
[11:52:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:9cef:7c5:9943:44fb) (Ping timeout: 250 seconds)
[11:53:38] <FromDiscord> <Rika> https://jameshfisher.com/2017/02/22/ssize_t/
[12:04:08] *** Joins: max22- (~maxime@2a01cb0883359800bd1f19fc826e4ab5.ipv6.abo.wanadoo.fr)
[12:13:08] *** Quits: max22- (~maxime@2a01cb0883359800bd1f19fc826e4ab5.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[12:19:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[12:38:37] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:08:42] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:09:13] *** Joins: xxov (~xxov@37.170.239.13)
[13:21:55] <FromDiscord> <moein> what array of object in js would be in a nim app? objects have fixed keys and value types
[13:24:17] <FromDiscord> <moein> sent a long message, see http://ix.io/3ww8
[13:24:27] <FromDiscord> <moein> what i wrote so far but it has some issues.
[13:25:06] <FromDiscord> <moein> how can i specify return proc is array of CaloriesMap? am i adding object to calories array in right way?
[13:29:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[13:32:46] <FromDiscord> <Elegantbeef> seems fine, though wouldnt call it a map
[13:32:47] <FromDiscord> <Elegantbeef> remove square braces
[13:32:52] <FromDiscord> <Elegantbeef> just `: CaloriesMap`
[13:36:42] <FromDiscord> <Rika> I think he wants an array and not a single value
[13:36:44] <FromDiscord> <moein> yeah table is right name i guess. shouldn't it be array[1,CaloriesMap]? since i'm want to return array of  CaloriesMap
[13:36:57] <FromDiscord> <moein> (edit) "i'm" => "i"
[13:37:12] <FromDiscord> <Elegantbeef> `seq[CaloriesMap]` possibly since you're adding
[13:37:22] <FromDiscord> <Elegantbeef> Arrays are fixed size in Nim they have to be known at compile time
[13:41:44] <FromDiscord> <moein> so I can initiate empty sequence like var calories = @[] ?
[13:41:55] <FromDiscord> <moein> and how to add to it?
[13:43:26] <FromDiscord> <moein> what i tried
[13:43:29] <FromDiscord> <moein> var calories = seq[CaloriesMap]↵  calories.add(CaloriesMap(calorie:1000,difficulty:"hard",suitable:false))
[13:44:00] <FromDiscord> <Elegantbeef> you need to do `var calories: seq[CalorieMap]` then just `calories.add`
[13:45:25] <FromDiscord> <moein> thank you
[13:46:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:54:20] <NimEventer> New post on r/nim by tobiasbarco666: How to get files from a directory?, see https://reddit.com/r/nim/comments/p81nza/how_to_get_files_from_a_directory/
[14:05:23] <FromDiscord> <moein> do people use nim to create rest apis?
[14:06:42] <FromDiscord> <moein> right now i'm learning new languages simply to increase my knowledge about more languages and their differences
[14:07:09] <FromDiscord> <moein> for what purposes nim is a good choice?
[14:07:49] <FromDiscord> <enthus1ast> sure↵(@moein)
[14:10:07] <FromDiscord> <haxscramper> CLI tooling, compiler development, working with C libraries from a saner language↵(@moein)
[14:14:53] <FromDiscord> <enthus1ast> @moein\: i honestly think you can use nim for mostly everything (and i do)
[14:15:18] *** Joins: max22- (~maxime@2a01cb0883359800fbeacc018b84d50e.ipv6.abo.wanadoo.fr)
[14:15:36] <FromDiscord> <xflywind> > Good for everything, from shell scripting to web front and backend, to machine learning, high-performance computing (HPC), and embedded.
[14:16:51] <FromDiscord> <enthus1ast> you will of course find rough edges here and there, but if more people start using it, finding bugs, and contributing it gets better and better (and it got a LOT better since i used nim)
[14:17:21] <FromDiscord> <moein> is it right to say writing rest apis in let's say something like nodejs is easier in terms of  libraries and development speed comparing to nim?
[14:18:26] <NimEventer> New post on r/nim by hotmilki: Is nim good for my use case?, see https://reddit.com/r/nim/comments/p82026/is_nim_good_for_my_use_case/
[14:18:29] <FromDiscord> <haxscramper> Js has more libraries, but development speed depends on what you used to
[14:19:39] <FromDiscord> <haxscramper> It is possible hack together semi-working js code pretty quickly, from what I can tell, nim requires a little more forethought, being statically typed language and all
[14:19:54] <FromDiscord> <moein> In reply to @moein "is it right to": but in other hand nim offers better type checking and performance (I guess)
[14:19:57] <FromDiscord> <haxscramper> And it has more built-in features that you would need to learn
[14:20:26] <FromDiscord> <haxscramper> Like macros
[14:39:14] *** Quits: max22- (~maxime@2a01cb0883359800fbeacc018b84d50e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:43:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[15:20:21] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Read error: Connection reset by peer)
[15:21:14] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:21:56] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[15:24:54] *** Joins: max22- (~maxime@2a01cb0883359800bca84fd0bb0f0f8a.ipv6.abo.wanadoo.fr)
[15:28:35] <PMunch> @moein, I've used Nim to set up REST APIs before, and I've never been able to do it more easily than with Nim. Performance will be good, but since performance of web stuff is mostly down to handling HW interactions and async behaviour you won't see as great a boost with Nim as you do in more computationally heavy areas when compared to e.g. Node.
[15:47:36] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[15:49:23] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[15:57:21] <FromDiscord> <moein> In reply to @PMunch "<@368734642679054338>, I've used Nim": do you recommend any tutorial or library to write rest api?
[15:59:28] <FromDiscord> <moein> jester looks a decent tool
[15:59:34] <FromDiscord> <moein> (edit) "jester looks ... a" 03added "like"
[15:59:40] <PMunch> Yeah I was using Jester
[16:00:17] <PMunch> Didn't really use any tutorials for it though, it's pretty straight forward to use
[16:06:58] *** Joins: pro (~pro@user/pro)
[16:18:24] <NimEventer> New thread by Chat_noir: [termux pkg] nim:SSL routines:tls_process_server_certificate:certificate verify failed [SslError], see https://forum.nim-lang.org/t/8345
[16:21:43] <FromDiscord> <moein> how can i convert array of sequence to json?
[16:21:57] <FromDiscord> <moein> routes:↵  get "/":↵    resp result
[16:22:18] <FromDiscord> <moein> result variable is an array of sequence
[16:22:18] <FromDiscord> <enthus1ast> does `% ` work?
[16:22:41] <FromDiscord> <enthus1ast> resp %\ result
[16:23:44] <FromDiscord> <moein> no compiler says Error: undeclared identifier: '%'
[16:23:51] <FromDiscord> <enthus1ast> import json
[16:24:49] <FromDiscord> <moein> i did that before, didn't find anything in docs
[16:25:30] <FromDiscord> <enthus1ast> https://nim-lang.org/docs/json.html#%25%2A.m%2Cuntyped
[16:26:01] <FromDiscord> <moein> In reply to @moein "var calories = seq[CaloriesMap]": it's related to this. the calories is what i want to convert to json
[16:26:26] <PMunch> What is a CaloriesMap?
[16:26:45] <FromDiscord> <moein> it's an object
[16:26:53] <FromDiscord> <moein> sent a long message, see http://ix.io/3wwX
[16:28:17] <PMunch> Seems to work fine: https://play.nim-lang.org/#ix=3wwZ
[16:29:39] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[16:30:43] *** Quits: xxov (~xxov@37.170.239.13) (Ping timeout: 246 seconds)
[16:31:39] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3wx3
[16:33:01] <FromDiscord> <enthus1ast> https://play.nim-lang.org/#ix=3wx4
[16:33:33] *** Joins: xxov (~xxov@37.170.239.13)
[16:34:08] <FromDiscord> <moein> sent a code paste, see https://play.nim-lang.org/#ix=3wx5
[16:34:11] <FromDiscord> <moein> sent a long message, see https://paste.rs/iKx
[16:34:25] <FromDiscord> <enthus1ast> you can only return string
[16:34:34] *** Quits: max22- (~maxime@2a01cb0883359800bca84fd0bb0f0f8a.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:34:35] <FromDiscord> <enthus1ast> so `$ % `  should be it
[16:34:59] <FromDiscord> <enthus1ast> %\ transforms your input to JsonNode
[16:35:25] <FromDiscord> <enthus1ast> but jester wants strings \:)
[16:35:55] <PMunch> So you need to use $ to turn the JSON into a string :)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:24] <PMunch> Like so: https://play.nim-lang.org/#ix=3wx7
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:38:21] <FromDiscord> <moein> oddly neither of those works
[16:38:31] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[16:40:06] <PMunch> Could you share your full snippet? Or a minimal version?
[16:40:18] <PMunch> Much easier to test when you actually have the code
[16:41:55] <FromDiscord> <moein> sent a code paste, see https://paste.rs/y81
[16:42:19] <FromDiscord> <moein> it's just a simple exercise for me to get familiar with nim
[16:42:45] <FromDiscord> <enthus1ast> result
[16:42:49] <FromDiscord> <enthus1ast> ist the issue
[16:42:54] <FromDiscord> <enthus1ast> call it something else
[16:42:59] <FromDiscord> <enthus1ast> seems like a bug
[16:43:14] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3wxa
[16:43:40] <FromDiscord> <enthus1ast> maybe worth an issue at jesters repo
[16:44:19] <PMunch> By the way, you don't need float64, float is by default 64 bits
[16:44:40] <FromDiscord> <moein> In reply to @enthus1ast "call it something else": oh ok. thank you for helping
[16:44:58] <FromDiscord> <moein> In reply to @PMunch "By the way, you": nice. I didn't know that
[16:45:57] <PMunch> That was my suspicion as well, but I wanted to try it out myself
[16:46:20] <PMunch> Basically `result` is a special variable in Nim, it's automatically declared to be the same type as your return type
[16:46:55] <PMunch> So in your nearestCalorie procedure for example you can drop the `var nearest = 0` part and simply use result instead
[16:47:09] <PMunch> It will default to binary zero for whatever your type is, so for an int it would be zero
[16:51:56] <FromDiscord> <moein> In reply to @PMunch "So in your nearestCalorie": like this? var nearest = result
[16:53:18] <FromDiscord> <haxscramper> Like this
[16:53:22] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wxc
[16:54:03] <PMunch> Nope, simple remove `var nearest = 0` and then use `result` instead of `nearest`, like this: https://play.nim-lang.org/#ix=3wxe
[16:54:21] <PMunch> `result` is automatically returned at the end of the procedure
[16:54:41] <PMunch> @haxscramper, you missed one on line 7
[16:56:16] <FromDiscord> <moein> nice this really makes it cleaner
[16:57:28] <PMunch> Nim has a couple of neat features like that
[16:57:53] <PMunch> Here you can read more about implicit return and result: https://peterme.net/tips-and-tricks-with-implicit-return-in-nim.html
[16:59:23] <FromDiscord> <moein> since you read my code would you give me feedback about usage of array and object and sequences i used in my app? I mean did i use proper methods for those data or there is better approach? I'm coming from javascript and we use array and object for everything 🙂
[17:04:05] <PMunch> Hmm, well in calcCaloriesToLose I would return a tuple instead
[17:04:11] <PMunch> Much faster than building a hash table
[17:05:37] <PMunch> Hmm, well that might be hard with the other stuff you're doing. It's a bit hard to tell what the goal here is
[17:07:00] <PMunch> You can use result in calcCaloriesToLoseMap by the way
[17:07:09] <PMunch> The default value of a seq is an empty sequence
[17:08:08] <FromDiscord> <moein> sent a code paste, see https://paste.rs/RBA
[17:09:08] <PMunch> Right..
[17:10:15] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wxl
[17:10:41] <FromDiscord> <haxscramper> You can use enum instead of magical strings like "medium", and nim allows you to index into `array` using enums as well
[17:11:40] <PMunch> Makes it a bit more work to turn it into that JSON output though
[17:11:50] <PMunch> Definitely a balance to be struck here
[17:13:18] *** Joins: rockcavera (~rc@192.12.114.207)
[17:13:18] *** Quits: rockcavera (~rc@192.12.114.207) (Changing host)
[17:13:18] *** Joins: rockcavera (~rc@user/rockcavera)
[17:21:05] <PMunch> I'd probably do something like this: http://ix.io/3wxn/
[17:21:12] *** Joins: arkurious (~arkurious@user/arkurious)
[17:23:00] <PMunch> A bit dependent on what that "activity" thing actually is
[17:23:18] <PMunch> But I assume it might come from the request, and as such is a string
[17:23:54] <PMunch> But you could do that as an enum/array combination as well, and use parseEnum to convert it
[17:24:09] <PMunch> @moein ^
[17:24:44] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Read error: Connection reset by peer)
[17:27:32] <FromDiscord> <moein> yeah exactly activity could be an enum since it values are specific.
[17:28:03] <FromDiscord> <moein> so this changes also affect to performance?
[17:28:13] <FromDiscord> <moein> (edit) "affect to" => "affects"
[17:28:19] <PMunch> Yes, this will be more performant than your version
[17:29:25] <PMunch> A table is a full hash table with buckets and room to grow (all of which involves using the GC both for the string keys but also for the buckets themselves). An array[Difficulty, int] is simply three integers crammed together in memory and might even be passed directly on the stack.
[17:30:40] <PMunch> Since we're using the result variable it's also possible that they are written to directly on the callers stack and not even copied from one place to another. Or the whole procedure might even be inlined because it's not trivially simple.
[17:36:41] <FromDiscord> <haxscramper> If we are talking about microoptimizations like inlining you can also use `toJson(calMap)` from https://github.com/treeform/jsony instead of `$(%(calMap))`. jsony converts directly to string, avoiding lots of intermediate allocations that std/json does
[17:38:02] <FromDiscord> <haxscramper> On the sequence of four CaloriesMaps difference is about five times (faster)
[17:38:09] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wxr
[17:46:39] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:04:10] *** Quits: xxov (~xxov@37.170.239.13) (Ping timeout: 246 seconds)
[18:07:14] *** Joins: max22- (~maxime@2a01cb0883359800a423dfd44f951d88.ipv6.abo.wanadoo.fr)
[18:07:14] <arkanoid> how bad is the idea to automatically convert nil of T in none(T) of Option[T]
[18:08:56] <FromDiscord> <Rika> if you wrap a ref type in an option that is automatically done i believe
[18:09:09] <PMunch> Not any longer I believe
[18:09:12] <FromDiscord> <Rika> or do you mean a converter of T to Option[T]?
[18:09:27] <PMunch> It was supposed to be an optimisation, but it turns out that it was a silly idea
[18:09:34] <FromDiscord> <Rika> oh really? huh
[18:09:41] <arkanoid> not sure yet how to implement it, but I was just thinking if it was worth it
[18:10:04] <arkanoid> yeah, I also smell that it might be a silly idea
[18:11:25] <FromDiscord> <konsumlamm> it's still done, because changing the behaviour would be a breaking change
[18:11:30] <PMunch> The problem is that you suddenly have no way of having Option[pointer] that makes any sense
[18:11:32] <FromDiscord> <konsumlamm> but it is a silly idea, ye
[18:11:47] <FromDiscord> <konsumlamm> see https://github.com/nim-lang/Nim/pull/18401
[18:12:01] <PMunch> You could just use a normal pointer and have it take special value nil, but if you need more than that there simply would be no way to do it
[18:12:13] <PMunch> Well, there would be a way, just not a very practical one
[18:13:01] <FromDiscord> <konsumlamm> In reply to @arkanoid "not sure yet how": are you aware that stdlib already has an `Option[T]` type?
[18:13:28] <PMunch> Ah, so it still has this behaviour..
[18:17:15] <arkanoid> konsumlamm, sure, but I didn't know that it was automatically doing the nil to none thing
[18:24:04] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:25:11] *** Joins: flynn (~mcbloch@user/flynn)
[18:25:39] <FromDiscord> <moein> In reply to @PMunch "But you could do": why array? why not an object?
[18:26:09] <FromDiscord> <moein> (edit) "In reply to @PMunch "But you could do": why array? why not an object?" => "sent a code paste, see https://play.nim-lang.org/#ix=3wxF"
[18:27:00] *** Quits: max22- (~maxime@2a01cb0883359800a423dfd44f951d88.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[18:30:00] <FromDiscord> <moein> In reply to @moein "why array? why not": I'm asking this because i need to get value by key name if that's possible with array I'm good to go
[18:30:08] <FromDiscord> <⃟⃟> in relation to the previous conversation
[18:30:14] <FromDiscord> <⃟⃟> i dont think `+` should be used for strings
[18:30:30] <FromDiscord> <⃟⃟> basically for the same reasons why i dont think `/` should be used
[18:31:39] <PMunch> @moein, array because you can use parseEnum to get an enum that can index an array. But you can't (easily) parse a string into a field to access from the object.
[18:32:13] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[18:32:22] <PMunch> Anyways, I'm off
[18:32:25] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:33:25] *** Joins: xet7 (~xet7@user/xet7)
[18:34:55] *** Joins: max22- (~maxime@2a01cb08833598003f1ad1910e6dfb73.ipv6.abo.wanadoo.fr)
[18:35:41] <arkanoid> how can I declare aliases for generic procs? 
[18:43:56] <FromDiscord> <moein> can i set enum values while defining enum in first place?
[18:45:07] <FromDiscord> <moein> sent a code paste, see https://paste.rs/Av1
[18:45:11] <FromDiscord> <moein> but i get: Error: ordinal type expected; given: float
[18:59:03] <NimEventer> New thread by Doctor: Read command-line arguments, see https://forum.nim-lang.org/t/8346
[18:59:12] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:59:23] <FromDiscord> <moein> sent a code paste, see https://play.nim-lang.org/#ix=3wxP
[19:00:04] <FromDiscord> <moein> those values are always the same, is there better way to initial them?
[19:03:12] <arkanoid> is there any convenience in replacing all equal string literals with a const?
[19:03:17] <FromDiscord> <ynfle (ynfle)> parseEnum needs a string
[19:03:28] <arkanoid> I mean, they should be const anyway, right?
[19:04:14] <FromDiscord> <Rika> In reply to @moein "ok i changed my": what's the last line supposed to do?
[19:04:25] <FromDiscord> <ynfle (ynfle)> They aren't const, strings are imutable
[19:04:30] <FromDiscord> <ynfle (ynfle)> \mutable
[19:04:38] <FromDiscord> <Rika> you can probably do `var ... = [1.2, 1.37, 1.55, 1.72, 1.9]`
[19:04:47] <FromDiscord> <moein> In reply to @Rika "what's the last line": returns 1.37
[19:05:07] <FromDiscord> <Rika> `paParams[light]`
[19:05:18] <FromDiscord> <ynfle (ynfle)> @moein, `Activity` isn't an enum
[19:05:27] <arkanoid> ynfle, but literal strings? compiler should know if they are actually changed or not
[19:06:28] <FromDiscord> <ynfle (ynfle)> You mean as an optimization? Maybe. You'd have to check the c code and assembler
[19:08:22] <arkanoid> k, I think I will leave them as string literals
[19:08:33] <FromDiscord> <moein> sent a long message, see http://ix.io/3wxR
[19:09:53] <FromDiscord> <ynfle (ynfle)> You can have an object type and access the fields like pa.light.
[19:11:12] <FromDiscord> <ynfle (ynfle)> sent a code paste, see https://paste.rs/vV7
[19:12:44] <FromDiscord> <Ondrejoda> sent a code paste, see https://paste.rs/Azw
[19:12:59] <FromDiscord> <ynfle (ynfle)> No
[19:13:12] <FromDiscord> <ynfle (ynfle)> you need to do var rect = new Rect
[19:13:25] <FromDiscord> <Ondrejoda> 🤦‍♂️
[19:13:32] <FromDiscord> <ynfle (ynfle)> There is probably a wrapper proc for it
[19:13:45] <FromDiscord> <Ondrejoda> i was trying `var rect = Rect.new()`
[19:13:57] <FromDiscord> <Rika> that should work too
[19:15:00] <FromDiscord> <Ondrejoda> well it doesn't seem to
[19:15:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[19:16:04] <FromDiscord> <Rika> what error are you getting
[19:25:09] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[19:39:32] <FromDiscord> <Yardanico> In reply to @Ondrejoda "i have a small": with sdl2 or sdl2_nim ?
[19:40:29] <FromDiscord> <Yardanico> in sdl2 Rect is a tuple
[19:40:37] <FromDiscord> <Yardanico> so you do it like↵↵`var rect = (x, y, 50, 50)`
[19:40:47] <FromDiscord> <Yardanico> or, if you like specifying the type explicitly, `var rect: Rect = (x, y, 50, 50)`
[19:42:46] <FromDiscord> <Yardanico> there's also a helper `rect` proc in sdl2 so you can create a rect like `rect(x, y, 50, 50)`
[19:43:16] <FromDiscord> <Yardanico> that said, sdl2_nim has Rect as a Nim object
[19:44:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:45:27] *** Joins: xxov (~xxov@37.170.239.13)
[19:51:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[19:57:14] *** Quits: robertmeta (sid514@user/robertmeta) (Read error: Connection reset by peer)
[20:01:55] *** Joins: robertmeta (sid514@user/robertmeta)
[20:15:03] <FromDiscord> <Ondrejoda> how do i convert int to cint?
[20:15:26] <FromDiscord> <enthus1ast> 123.cint
[20:15:32] <FromDiscord> <Ondrejoda> oh
[20:15:40] <FromDiscord> <Ondrejoda> so int(my_variable).cint?
[20:16:55] <FromDiscord> <Ondrejoda> yeah that works
[20:17:02] <FromDiscord> <Rika> no need for int()
[20:18:22] <FromDiscord> <Yardanico> also sdl2_nim doesn't require such conversions :P
[20:18:55] <FromDiscord> <enthus1ast> my\_variable.cint should also work
[20:22:30] *** Quits: max22- (~maxime@2a01cb08833598003f1ad1910e6dfb73.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:23:19] *** Joins: max22- (~maxime@2a01cb08833598002b7be5f573e0de04.ipv6.abo.wanadoo.fr)
[20:23:48] <FromDiscord> <marceneiro> sent a long message, see https://paste.rs/Z3u
[20:24:31] <FromDiscord> <marceneiro> (edit) "long message," => "code paste," | "http://ix.io/3wyK" => "https://paste.rs/L7a"
[20:25:17] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wyM
[20:25:26] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#statements-and-expressions-case-statement
[20:26:48] <FromDiscord> <Rika> `'+'` not`"+"`
[20:27:20] <FromDiscord> <Yardanico> In reply to @Rika "`'+'` not`"+"`": huh?
[20:27:33] <FromDiscord> <Yardanico> why char instead of string? marceniero asked about matching strings
[20:27:50] <FromDiscord> <Yardanico> in rust strings are double quotes, chars are single quotes
[20:27:56] <FromDiscord> <Rika> yes but doesnt regular case not allow for matching strings
[20:27:59] <FromDiscord> <Yardanico> it does
[20:28:02] <FromDiscord> <Yardanico> there's no problem with that
[20:28:03] <FromDiscord> <Rika> it does?
[20:28:06] <FromDiscord> <Yardanico> yes lol
[20:28:12] <FromDiscord> <Yardanico> it always did :P
[20:28:17] <FromDiscord> <Rika> i probably forgot over time
[20:30:25] <FromDiscord> <Yardanico> you can't have runtime strings in of branches, maybe that's what you remembered
[20:30:32] <FromDiscord> <Yardanico> but literal strings are fine
[20:30:36] <FromDiscord> <Yardanico> (or const ones)
[20:31:45] <FromDiscord> <Rika> no i dont know im probably mixing some other language
[20:34:10] <FromDiscord> <marceneiro> Thanks @Rika and @Yardanico , that worked
[20:34:21] <FromDiscord> <Rika> dont forget hax lol
[20:35:10] <FromDiscord> <marceneiro> Oh, god. Sorry mate @haxscramper , much appreciated
[20:58:20] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[21:04:49] <arkanoid> whoever invented xml and decided to build a schema around it, must be a kind of evil man
[21:12:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:12:49] <FromDiscord> <⃟⃟> how do i make the automatic name changing thing an error
[21:12:50] <FromDiscord> <⃟⃟> so like
[21:13:01] <FromDiscord> <⃟⃟> `parse_file` instead of `parseFile`
[21:13:04] <FromDiscord> <⃟⃟> how do i make that an error
[21:17:43] <FromDiscord> <Rika> cannot
[21:17:53] <FromDiscord> <Rika> you can make `parse_file` an error but not the reverse
[21:19:17] <FromDiscord> <Rika> oh, apparently `--styleCheck:usages` exists now, not sure when but i assume only in devel
[21:19:38] <FromDiscord> <haxscramper> 1.4.8 has it
[21:19:58] <FromDiscord> <Rika> i assume this emits errors, right?
[21:22:08] <FromDiscord> <⃟⃟> it dosent seem to emit errors or warnings
[21:22:12] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wyQ
[21:22:16] <FromDiscord> <⃟⃟> ^
[21:23:03] <FromDiscord> <Rika> maybe requires a prior --styleCheck:error
[21:23:24] <FromDiscord> <haxscramper> `command line(1, 2) Error: 'on' or 'off' expected, but 'error' found`
[21:23:44] <FromDiscord> <haxscramper> `--styleCheck:off|hint|error` literally in fullhelp
[21:23:47] <FromDiscord> <haxscramper> wtf
[21:23:47] <FromDiscord> <Rika> `echo -e "proc aaa_q() = discard\naaaQ()" | nim r --styleCheck:error --styleCheck:usages`
[21:23:50] <FromDiscord> <Rika> (edit) "--styleCheck:usages`" => "--styleCheck:usages -`"
[21:23:58] <FromDiscord> <Rika> doesnt work either
[21:24:26] <FromDiscord> <Rika> yeah i dont think it works at all
[21:25:19] <FromDiscord> <haxscramper> https://github.com/nim-lang/fusion/issues/82 it works when someone is concerned with stray capital S at least
[21:27:15] <FromDiscord> <⃟⃟> so i cant do it?
[21:29:00] <FromDiscord> <Rika> could if the issue is fixed
[21:29:23] <FromDiscord> <Sorrow> Hello. Is it possible to build a single executable? Looked at the documentation and couldn't see a way.
[21:29:39] <FromDiscord> <Sorrow> With all the required dlls etc packed in.
[21:29:56] <FromDiscord> <Rika> what dynamic libraries are you using
[21:30:13] <FromDiscord> <Sorrow> I mean Nim's own dlls.
[21:30:18] <FromDiscord> <⃟⃟> do you really want ALL the required things?
[21:30:29] <FromDiscord> <⃟⃟> probably you will have to use a alternative libc
[21:30:59] <FromDiscord> <Rika> i dont know for windows sorry
[21:31:25] <FromDiscord> <Rika> maybe just a --passL:-static would work
[21:31:56] <FromDiscord> <Sorrow> I'll try that later, thanks. Go's my main lang, but wanna start using Nim, too.
[21:32:00] <FromDiscord> <Rika> what dynlibs does nim even use on windows?
[21:32:09] <FromDiscord> <Sorrow> Quite a few.
[21:32:27] <FromDiscord> <⃟⃟> how do you check
[21:32:33] <FromDiscord> <Sorrow> (edit) "Nim," => "Nim again,"
[21:32:34] <FromDiscord> <Rika> i asked what, not how many
[21:32:47] <FromDiscord> <Sorrow> Idk, not at pc.
[21:32:50] <FromDiscord> <Rika> okay
[21:33:00] <FromDiscord> <Rika> anyone who can check>
[21:33:00] <FromDiscord> <⃟⃟> im using windows and at my pc
[21:33:04] <FromDiscord> <⃟⃟> so just tell me how to check
[21:33:10] <FromDiscord> <⃟⃟> quickly though im going soon
[21:36:19] <FromDiscord> <⃟⃟> i found KERNEL32 and msvcrt
[21:36:31] <FromDiscord> <Rika> `dumpbin /imports`
[21:36:32] <FromDiscord> <Rika> ?
[21:36:42] <FromDiscord> <⃟⃟> i dont have that
[21:36:47] <FromDiscord> <Sorrow>  https://media.discordapp.net/attachments/371759389889003532/878324195581366343/Untitled.png
[21:37:21] <FromDiscord> <Rika> only needed for certain modules
[21:40:15] <FromDiscord> <Sorrow> Didn't work unfortunately.
[21:40:30] <FromDiscord> <Sorrow> (edit) "Didn't work unfortunately. ... " 03added "`could not load: (libcrypto-1_1-x64|libeay64).dll`"
[21:45:23] <FromDiscord> <Rika> well what did the code you compiled look like
[21:45:56] <FromDiscord> <Sorrow> Just a basic script using json and httpclient.
[21:46:14] <FromDiscord> <Rika> theres the module
[21:46:20] <FromDiscord> <Rika> httpclient requires that dll
[21:46:28] <FromDiscord> <Rika> (of course, SSL)
[21:46:50] <FromDiscord> <Sorrow> I wanna include that in the compilation.
[21:47:32] <FromDiscord> <Rika> yes im looking into it
[21:48:32] <FromDiscord> <Rika> https://github.com/nim-lang/Nim/issues/15220
[21:50:05] <FromDiscord> <Sorrow> Thanks.
[21:51:02] <FromDiscord> <Rika> not sure if it helps, actually
[21:56:24] *** Joins: pro (~pro@user/pro)
[22:07:16] <FromDiscord> <JSONBash> I am in the process of making a website (https://www.nim.wiki/) that gives people with nim related GitHub Pages websites a domain name (https://demo.nim.wiki/). I could use a couple people going through thr process and giving feedback if that is something people would be willing to do
[22:25:34] <FromDiscord> <RattleyCooper> How can I add something to the event loop with `asyncdispatch`?  I'm trying to make a discord bot with `dimscord` and need to check an outside api for something then post a message depending on the result, but I can't figure out how to add something to the event loop.  It seems that I can either `runForever` or `waitFor`.  What am I missing here?
[22:32:10] <FromDiscord> <Yardanico> In reply to @RattleyCooper "How can I add": I don't exactly understand, do you mean that you want to periodically check for something and then send a discord message if that check is successful?
[22:32:22] <FromDiscord> <RattleyCooper> Correct
[22:32:56] <FromDiscord> <Yardanico> you can just create a proc with a infinite loop (+ await sleepAsync) and call it with asyncCheck proc()
[22:33:02] <FromDiscord> <Yardanico> and do whatever checking you need inside the loop's body
[22:33:44] <FromDiscord> <RattleyCooper> Ok cool, do you know if `poll` is also required?
[22:33:52] <FromDiscord> <Yardanico> no
[22:33:56] <FromDiscord> <RattleyCooper> sent a code paste, see https://paste.rs/CXj
[22:33:57] <FromDiscord> <Yardanico> no, you misunderstood me
[22:33:58] <FromDiscord> <RattleyCooper> Ok
[22:34:06] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3wz2
[22:34:10] <FromDiscord> <Yardanico> then call that with "asyncCheck" somewhere at the start of your program once
[22:34:16] <FromDiscord> <Yardanico> asyncCheck waitForEvent()
[22:34:45] <FromDiscord> <Yardanico> there's also another way
[22:43:15] <FromDiscord> <Rika> In reply to @Yardanico "then call that with": And then at the end you call run forever right?
[22:43:26] <FromDiscord> <Yardanico> In reply to @Rika "And then at the": well, that depends on how your async app works generally
[22:43:36] <FromDiscord> <Yardanico> i assumed he already had that set up so didn't mention it
[22:43:40] <FromDiscord> <Rika> As long as something calls poll at the end
[22:44:02] <FromDiscord> <RattleyCooper> Yeah, ngl I'm pretty lost bc the docs don't really explain it
[22:44:11] <FromDiscord> <Yardanico> well, what's your issue exactly?
[22:44:16] <FromDiscord> <Yardanico> dimscord has plenty of examples
[22:44:22] <FromDiscord> <RattleyCooper> It's not running anything in while true:
[22:44:30] <FromDiscord> <Rika> Basically, by merely calling an async proc, it is put in the event loop
[22:44:41] <FromDiscord> <RattleyCooper> I'm not having issues with dimscord though
[22:44:42] <FromDiscord> <Rika> As far as I know, at least
[22:44:48] <FromDiscord> <Yardanico> In reply to @RattleyCooper "It's not running anything": well, that was a code example, you're supposed to add your own checking for whatever api you need instead of # ...
[22:44:50] <FromDiscord> <RattleyCooper> I need to add a simple while loop to the event loop
[22:45:01] <FromDiscord> <Yardanico> In reply to @RattleyCooper "I need to add": as I said, write a proc like that and add it with asyncCheck
[22:46:47] <FromDiscord> <RattleyCooper> In reply to @Yardanico "as I said, write": I got you, looks like it did need `runForever`
[22:46:55] <FromDiscord> <Yardanico> well, but you do that for dimscord usually
[22:47:03] <FromDiscord> <Yardanico> e.g. `waitFor discord.startSession()` for dimscord
[22:47:05] <FromDiscord> <RattleyCooper> Here is what works for me
[22:47:22] <FromDiscord> <RattleyCooper> sent a code paste, see https://play.nim-lang.org/#ix=3wz4
[22:47:25] <FromDiscord> <Yardanico> nonono
[22:47:52] <FromDiscord> <RattleyCooper> Don't need runForever
[22:47:54] <FromDiscord> <RattleyCooper> Gotcha
[22:47:54] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3wz5
[22:47:55] <FromDiscord> <Yardanico> that's all you need
[22:47:58] <FromDiscord> <RattleyCooper> Ok cool
[22:48:09] <FromDiscord> <RattleyCooper> Thanks for the help 😄
[22:56:05] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[23:00:44] <nrds> <06Prestige99> I feel like the async system could have better docs, it's always a bit confusing to me
[23:01:28] <FromDiscord> <Yardanico> well, idk, nim's default async seems pretty natural to me
[23:01:33] <FromDiscord> <Yardanico> and similar to e.g. python's async
[23:02:14] <nrds> <06Prestige99> The different keywords throw me off, I need to learn it in-depth. Feel like I'm missing something
[23:02:47] <FromDiscord> <Yardanico> well, not sure I can relate, never had a problem with them :P
[23:03:35] <FromDiscord> <Yardanico> asyncCheck - start a future, don't wait for completion, waitFor - start and wait for the future to complete
[23:03:39] <FromDiscord> <Yardanico> runForever - run the event loop forever
[23:03:48] <FromDiscord> <Jakraes> Does nim have a perlin noise library?
[23:03:54] <FromDiscord> <Yardanico> waitFor is the "await" for non async procs
[23:03:58] <FromDiscord> <Yardanico> or for global-level code
[23:04:23] <nrds> <06Prestige99> I would think all non-async procs would be blocking
[23:04:25] <FromDiscord> <Yardanico> In reply to @Jakraes "Does nim have a": check https://github.com/search?q=language%3Anim+perlin+noise maybe there's something that suits your needs
[23:04:36] <FromDiscord> <Yardanico> @Prestige in what sense?
[23:04:58] <nrds> <06Prestige99> like if I call foo() I would expect execution to not continue, until foo has finished
[23:05:04] <nrds> <06Prestige99> unless foo were async
[23:05:11] <FromDiscord> <Yardanico> yes, that is true for all non-sync procs
[23:05:16] <FromDiscord> <Yardanico> non-async
[23:05:47] <nrds> <06Prestige99> the sentence "waitFor is the "await" for non async procs" didn't make sense to me
[23:06:30] <FromDiscord> <Yardanico> I meant that waitFor is when you need to wait for future's completion and get a result, but you're not in an async context
[23:06:43] <FromDiscord> <Yardanico> so usually global code or the proc where you start your main async proc
[23:07:08] <FromDiscord> <Yardanico> and waitFor itself does block (since it waits till the future completes)
[23:07:41] <nrds> <06Prestige99> oh I see. Interesting
[23:08:07] <FromDiscord> <Yardanico> also don't be scared by async stuff in the stdlib, it has pretty readable source code as well :P
[23:08:31] <FromDiscord> <Yardanico> e.g. waitFor is just 3 lines https://github.com/nim-lang/Nim/blob/devel/lib/pure/asyncdispatch.nim#L1932
[23:08:35] <nrds> <06Prestige99> My knee-jerk reaction tells me it'd make more sense if it was still "await" instead of "waitFor", and it just handled things differently in different contexts
[23:08:58] <FromDiscord> <Yardanico> well, I think that'd be even more confusing - the same thing will be doing different stuff based on the context it's in
[23:09:07] <nrds> <06Prestige99> true
[23:09:25] <FromDiscord> <Yardanico> you don't use waitFor a lot anyway
[23:09:39] <FromDiscord> <Yardanico> it's mainly used to start some main async loop or something similar
[23:09:41] <nrds> <06Prestige99> I guess the part that confuses me is that the proc names aren't super descriptive but that'd be really hard to pull off
[23:13:42] <nrds> <06Prestige99> Probably just need to work on more async stuff in Nim 🙂
[23:14:38] *** Quits: max22- (~maxime@2a01cb08833598002b7be5f573e0de04.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[23:23:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[23:40:09] <madprops> Nim is the most powerful programming language!
[23:45:37] *** Joins: max22- (~maxime@2a01cb0883359800cbecd55f609f62e2.ipv6.abo.wanadoo.fr)
[23:47:10] <FromDiscord> <⃟⃟> how do i make `join_path` instead of `joinPath` a compile error then
[23:49:57] <FromDiscord> <haxscramper> I don't think nim compiler has a way to enforce identifiers that don't conform to the official style guide
[23:51:01] <FromDiscord> <haxscramper> And IIRC `styleCheck:usage` is supposed to make it possible to use library with "incorrect" identifiers in your code together with `--styleCheck:error`
[23:51:38] <FromDiscord> <⃟⃟> :(
[23:54:17] <FromDiscord> <haxscramper> Ah, sorry I read your question backwards, though second part still applies ... and styleCheck is like supposed to work, but maybe I don't know what exactly triggers it
[23:54:30] <FromDiscord> <tandy> \`Error\: unhandled exception\: assignment to discriminant changes object branch; compile with -d\:nimOldCaseObjects for a transition period [FieldDefect]\`
[23:54:36] <FromDiscord> <tandy> what does this mean?
[23:57:53] <FromDiscord> <haxscramper> You can't assign to discriminant fields
[23:58:02] <FromDiscord> <haxscramper> case kind\:
[23:59:00] <FromDiscord> <tandy> oh
[23:59:10] <FromDiscord> <⃟⃟> nim syntax
[23:59:25] <FromDiscord> <⃟⃟> sent a code paste, see https://paste.rs/c2W
[23:59:37] <FromDiscord> <haxscramper> do you need to switch object branch or this just happened accidentally?
[23:59:37] <FromDiscord> <⃟⃟> sent a code paste, see https://paste.rs/NCD
[23:59:40] <FromDiscord> <⃟⃟> you have to watch out for spaces
[23:59:53] <FromDiscord> <haxscramper> I.e there a ways to work around this if you need
