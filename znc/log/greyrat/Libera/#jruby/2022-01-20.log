[02:37:24] <lopex[m]> numbers
[03:01:58] <puritylake[m]> enebo: that doc is short but a puzzle for certain
[03:15:03] <rebelwarrior[m]> FYI my attempt to install 9.3.3.0 thru homebrew rbenv failed gonna try dropping in a zip 
[03:26:34] <rebelwarrior[m]> zip works! but predictably sassc gem fails to install. 
[03:27:02] <rebelwarrior[m]> tested rails 5.2.6 btw
[03:30:23] <rebelwarrior[m]> rails v 6.1 doesn't install (railties?)
[04:39:09] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[05:31:08] <headius> Yeah we should take a bit and fix anything preventing current rails versions from working
[05:31:15] <headius> Open issues for anything you see
[05:45:29] *** Joins: oblutak[m] (~oblutakma@2001:470:69fc:105::1:7039)
[14:18:06] <puritylake[m]> enebo: I donâ€™t think that document can help me, if I wanted the binary I could just get the long value with Double.doubleToLongBits
[15:45:42] <puritylake[m]> I won't give up on it yet, I can be a bit slow to the uptake on maths and similar topics
[15:47:37] <puritylake[m]> I'm gonna do a quick look through of dtoa.c to see if I can understand  some of what it is doing
[17:32:32] <rebelwarrior[m]> ```
[17:33:16] * rebelwarrior[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/4a8252a0347f6c48d564ddcf3bfdfa690190aa1e
[17:33:55] <rebelwarrior[m]> FYI error when using rbenv to install ^^ (I dropped the zip file and that worked instead)
[17:34:26] <rebelwarrior[m]> Don't know if it's relevant but wanted to share before I closed the terminal window. 
[17:37:05] <enebo[m]> rebelwarrior: any chance you can open an issue on rbenv project?
[17:37:38] <enebo[m]> Looks like they use tr command for something and it is unhappy
[17:40:10] <rebelwarrior[m]> yes I can enebo I'll open an issue there. 
[17:40:50] <enebo[m]> rebelwarrior: Also which env did Rails 6.1 not work for you?
[17:40:57] <enebo[m]> https://gist.github.com/enebo/82114df3eb9f907ef468dabfdc7bd0d5
[17:41:27] <enebo[m]> This was on fedora and I test with totally clean env
[17:41:41] <enebo[m]> oh you said homebrew
[17:41:58] <enebo[m]> rebelwarrior: are you on M1?
[17:43:55] <rebelwarrior[m]> Yes I'm on M1 
[17:44:15] <rebelwarrior[m]> https://github.com/rbenv/rbenv/issues/1380
[17:44:26] <rebelwarrior[m]> issue open feel free to add or edit if necessary.
[17:45:45] <enebo[m]> rebelwarrior: yeah I suspect that is enough for someone to try assuming they have an M1 mac to try it on
[17:45:57] <enebo[m]> I wouldn't really expect M1 to be a big deal for unpacking something but who knows
[17:46:53] <enebo[m]> When headius is around I suspect he will be able to repro your Rails 6.1 install issue since he can run on M1
[17:47:04] <enebo[m]> We will open an issue based on that or get back to you
[17:47:26] <enebo[m]> although if you care to you could make an issue for that too :)
[17:52:46] <rebelwarrior[m]> where should I open the issue?
[17:53:57] <enebo[m]> for the railties install open it on jruby project
[17:54:33] <enebo[m]> This almost certainly will be an M1 issue since I can install it on Fedora (and I am not really sure what would not work with railties itself)
[17:55:15] <enebo[m]> Oh unless it is doing some binstub thing and not working?  Like chmod or ln
[17:55:36] <enebo[m]> but done from Ruby which would hit doing native calls
[17:55:42] <enebo[m]> Totally a guess though
[18:13:14] <rebelwarrior[m]> https://github.com/jruby/jruby/issues/7019
[18:17:02] <enebo[m]> rebelwarrior: That is strange when I installed this I did not get mimemagic as a transitive dep
[18:17:24] <enebo[m]> If I had to guess I would it picked mini_mime instead
[18:18:35] <enebo[m]> rebelwarrior: can you try 6.1.3.2 of rails?  I wonder if there was a problem early in 6.1 where it was doing the wrong thing for JRuby
[19:03:43] <rebelwarrior[m]> rails issue was not an issue. resolved. 
[19:04:14] <rebelwarrior[m]> `gem install rails -v 6.1.4.4` solved the issue they'd migrated to marcel due to licensing issues -v 6.1 tries to install the old one. 
[19:04:38] <enebo[m]> rebelwarrior: ah great.  So back down to one issue
[19:28:55] *** Joins: subbu (~subbu@user/subbu)
[20:54:17] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 240 seconds)
[21:04:07] <enebo[m]> | Syntax      | Description |
[21:04:07] <enebo[m]> | ----------- | ----------- |
[21:04:07] <enebo[m]> | Header      | Title       |
[21:04:07] <enebo[m]> | Paragraph   | Text        |
[21:04:10] <enebo[m]> bummer
[21:04:19] <headius> ha
[22:12:00] *** Joins: subbu (~subbu@user/subbu)
[22:42:09] <headius> enebo: https://github.com/jruby/jruby/pull/7020
[22:42:30] <headius> that fixes the tainted string issue on 9.3
[22:42:36] <headius> https://github.com/jruby/jruby/pull/7021
[22:42:46] <enebo[m]> lol yeah I saw that
[22:42:47] <headius> backports changes to string deduplication from 9.3 plus the relevant part of the fix above
[22:43:29] <headius> the 9.3 PR passed CI already so it seems good
[22:43:29] <enebo[m]> seems fine to me...it is just sad we are fixing things which Ruby has removed
[22:43:29] <headius> I did not check for specs or tags
[22:43:40] <headius> yeah I am a little annoyed at having to do one last taint fix
[22:43:52] <headius> merging this to master will basically just ignore the entire patch
[22:45:21] <enebo[m]> the combo PR for 9.2 looks fairly benign to me as well
[22:45:40] <enebo[m]> isBare is clearly just being more constrained on what is deduped
[22:45:49] <headius> yeah mostly refactoring that only happened in 9.3
[22:46:00] <enebo[m]> so I highly doubt 2.5 users are depending on them to be the same instance
[22:46:14] <enebo[m]> so I don't see much risk
[22:46:14] <headius> I reapplied the same commits so there'd be some accounting of the changes
[22:46:23] <enebo[m]> make sense
[22:46:34] <enebo[m]> I fixed an issue with your subclasses update
[22:46:58] <enebo[m]> you missed 'klass.' in part of it
[22:46:59] <headius> hah oh yeah I forgot to test it
[22:47:00] <headius> oops
[22:47:13] <enebo[m]> np...it was correct other than that so sayeth ruby/spec
[22:47:40] <enebo[m]> I am readding gettable so ^var will work as we expect right now
[22:49:23] <headius> Ruby's turning into perl 6
[22:49:59] <enebo[m]> I honestly don't even remember this syntax 
[22:50:30] <enebo[m]> adding this method back bums me out.  I worked so hard to remove it
[22:51:14] <headius> one failure for 9.2 fix: String#-@ does not deduplicate already frozen strings FAILED
[22:51:31] <enebo[m]> whoo hooo
[22:51:34] <headius> came in with one of the 9.3/2.6 cherry-picks
[22:52:07] <headius> 2.5 also does not deduplicate hash keys so I filtered those parts out, but I guess I missed this side
[22:52:57] <headius> ahh yeah.. this commit added isBare and changed the behavior of -@
[22:52:58] <headius> 42eace21e4547d8ec49ba46b27731021f90746a8
[22:53:16] <headius> eb11c5de9d9f9e220c6166b440c484639384e291 on 9.3
[23:09:34] <headius> I found an additional related bug: the JIT does not deduplicate frozen strings when first creating them
[23:10:12] <headius> FrozenString operand deduplicates based on the raw bytelist so if some code interns a string and other code is loaded with that same frozen string it will be the same deduplicated object
[23:10:25] <headius> not sure if this just diverged naturally or if something was changed on purpose
[23:11:00] <headius> JIT will cache the frozen string but each unique frozen string will still be created new for that file
[23:11:28] <enebo[m]> headius: oh I should bring this up...I broke JVMVistor with my call to markAsRuby2KetwordArg in emitScope
[23:12:01] <headius> good job
[23:12:09] <enebo[m]> the aload(1) could be a different call but I think it is staticScope but the m.loadArgs is clearly not right
[23:12:44] <enebo[m]> I don't see why though...I thought it was just loading args.
[23:15:06] <headius> hmm maybe I'm wrong, JIT and operand both seem to call the same function to produce the frozen string
[23:15:23] <headius> enebo: I can look at it if you have a repro
[23:15:29] <headius> I assume it is failing some tests
[23:16:15] <enebo[m]> run spec:compiler
[23:16:30] <headius> aha
[23:16:35] <headius> indy mode always creates a new frozen string
[23:16:39] <headius> normal mode does not but normal mode did not exist until AOT work to remove all indy
[23:16:49] <headius> and for this we always use indy still
[23:16:59] <headius> enebo: ok
[23:17:03] <headius> after I fix this
[23:22:06] <headius> oh haha the answer is weirder than that
[23:22:14] <headius> enebo: so I'm not sure about this one...
[23:22:45] <headius> the reason it only affects interp is because interp StringLiteral is evaluated by retriving the FrozenString it contains and duping it
[23:22:52] <headius> that's how yarv does it also
[23:23:16] <headius> so when it dups the FrozenString it picks up any flags like tainting
[23:23:52] <headius> when the dedup cache is afflicted with a tainted string, that means all non-frozen literals of that string will duplicate that tainting
[23:24:29] <headius> JIT mode ignores the contained FrozenString and just caches the ByteList on first access for creating a new string every time
[23:25:00] <headius> so no tainting infection from a bad dedup cache
[23:25:43] <enebo[m]> hmm
[23:25:46] <headius> I'm not sure either way is wrong
[23:26:08] <enebo[m]> so one would argue it should not cache a tainted string
[23:26:10] <enebo[m]> and tainting does not exist in 3.0
[23:26:29] <headius> FrozenString being inside StringLiteral is basically just a way to reuse the FrozenString logic to produce new mutable strings
[23:26:44] <headius> yeah maybe I should just leave it
[23:26:49] <headius> in both cases you get a new string
[23:27:09] <headius> interpreter does it by duping from cache, JIT does it by creating a new object with cached bytelist
[23:27:40] <headius> duping is probably slightly slower because of useless flags propagation
[23:27:46] <enebo[m]> should JIT be returning new Strings in 3+?
[23:27:49] <enebo[m]> It should be using table right?
[23:28:26] <headius> both branches taint fixes are merged fyi
[23:28:36] <headius> well mutable strings always produce a new object
[23:29:02] <headius> so no .freeze or -"string" literal or frozen-literal-string pragma
[23:29:27] <headius> the only difference is how the mutable string object gets created, either by duping a cached frozen version of it or by just creating a new object
[23:29:59] <enebo[m]> oh I see I was reading that backwards
[23:35:18] <headius> https://github.com/jruby/jruby/issues/7018#issuecomment-1017874911
[23:35:19] <headius> that kinda sums it up
[23:36:15] <headius> the JIT certainly could switch to producing new mutable strings by duping from the cache but I would expect it to be a bit more overhead for no real gain
[23:36:40] <headius> it would also move the construction of the new mutable string object further away from the code, and that will impact inlining
