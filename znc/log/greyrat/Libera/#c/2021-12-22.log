[00:00:00] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[00:00:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:00:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:01:02] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[00:02:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:02:15] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Quit: Konversation terminated!)
[00:04:36] *** Joins: Viewday112 (~Viewday@user/viewday)
[00:04:56] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[00:06:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:06:31] *** Viewday112 is now known as Viewday11
[00:06:32] *** Joins: duuude (~user@user/duuude)
[00:07:24] *** Joins: kurahaupo (~kurahaupo@pa49-182-71-223.pa.qld.optusnet.com.au)
[00:07:41] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[00:08:05] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[00:09:58] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[00:10:12] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[00:11:24] *** Quits: kurahaupo (~kurahaupo@pa49-182-71-223.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[00:15:35] *** Joins: wafer31337 (~wafer3133@197.15.122.150)
[00:15:39] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[00:17:09] *** Quits: alch (~alch@151.68.96.99) (Read error: Connection reset by peer)
[00:19:10] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[00:19:23] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[00:20:46] *** Joins: alch (~alch@151.36.55.212)
[00:21:22] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[00:21:46] *** Joins: noonien (~noonien@user/noonien)
[00:22:03] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[00:22:18] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:22:23] *** Joins: goddard (~goddard@user/goddard)
[00:25:12] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[00:26:43] *** Joins: ffguest (~ffguest@178.151.94.123)
[00:27:01] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:29:56] *** Quits: duuude (~user@user/duuude) (Ping timeout: 245 seconds)
[00:30:24] *** Quits: ffguest (~ffguest@178.151.94.123) (Client Quit)
[00:31:17] *** Quits: th1 (~th@test.secomondo.dk) (Ping timeout: 252 seconds)
[00:31:51] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:32:45] *** Joins: Viewday113 (~Viewday@user/viewday)
[00:33:26] *** Joins: th1 (~th@test.secomondo.dk)
[00:33:29] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:33:40] *** Joins: quartz (~nick@user/quartz)
[00:34:13] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:34:13] *** Viewday113 is now known as Viewday11
[00:34:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:46:44] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[00:46:52] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[00:47:38] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:49:07] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:52:07] *** Joins: codethulu (~codethulu@cpe-173-174-108-148.austin.res.rr.com)
[00:52:10] *** Joins: zzzod` (~user@196.64.42.204)
[00:53:54] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:54:06] *** Quits: zzzod (~user@160.178.6.111) (Ping timeout: 256 seconds)
[00:56:35] *** Joins: u0_a391 (~u0_a391@2600:380:8a15:2de3:e3:e81a:ec7d:cfdb)
[00:57:13] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[00:57:19] <ldlework> Why can't I define a function pointer type
[00:57:22] <ldlework> typedef bool (*EqFun)(void* p1, void* p2);
[00:57:30] <ldlework> error: expected declaration specifiers or ‘...’ before ‘*’ token
[00:57:42] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com)
[00:57:57] *** Quits: mahmutov (~mahmutov@37.155.49.19) (Ping timeout: 240 seconds)
[01:00:13] *** Quits: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 240 seconds)
[01:00:59] <fizzie> That's just fine. I suspect a missing semicolon elsewhere, or an unfortunate macro.
[01:01:07] <fizzie> ,cc typedef bool (*EqFun)(void* p1, void* p2); // no errors here
[01:01:09] <candide> fizzie: Success (no output).
[01:01:15] <fizzie> ,english typedef bool (*EqFun)(void* p1, void* p2);
[01:01:16] <candide> fizzie: Declare `EqFun` as another name for a pointer to function taking `p1` as pointer to void and `p2` as pointer to void and returning bool.
[01:01:55] <fizzie> (Also personally I'd typedef the _function_ type rather than the pointer type, but I've almost given up hope anyone else will start doing that.)
[01:02:50] *** u0_a391 is now known as Kit
[01:03:19] *** Joins: PortableDave (~portabled@220.253.22.64)
[01:05:11] *** Joins: Viewday115 (~Viewday@user/viewday)
[01:05:34] *** Joins: CaCode (~CaCode@user/cacode)
[01:06:00] <quartz> Hi everyone
[01:07:08] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:07:09] *** Viewday115 is now known as Viewday11
[01:07:17] <twkm> moo.
[01:08:27] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[01:08:42] <quartz> Did some programming in python the other day, my god the difference between C and python haha
[01:08:48] <quartz> Like night and day
[01:09:30] <savy_> python is just a script 
[01:09:36] <quartz> Hahaha!
[01:09:40] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[01:09:46] <Kit> python is unbased, c is based
[01:09:51] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[01:09:52] <Kit> thats the difference
[01:10:08] <savy_> and we won't speak about typing no need to feed teh troll
[01:10:36] <Kit> uint_least8_t my beloved
[01:12:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:12:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:12:12] *** Joins: wroathe (~wroathe@user/wroathe)
[01:12:59] <pony> https://www.flake8rules.com/rules/W503.html python
[01:13:00] <candide> Title of pony's link: Line break occurred before a binary operator (W503)
[01:16:41] <savy_> at least we have ffi with ctypes module :>
[01:16:46] *** Joins: stonkey (~stonkey@user/stonkey)
[01:17:40] *** Joins: Daisenryaku (~sh4@user/sh4)
[01:17:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:19:18] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:19:21] <Daisenryaku> i've got an array that looks like uint8_t *foo[] = { "aaaaa", "bbbbb", ... }, however writing to e.g. foo[0][1] segfaults, as the compiler put the data apparently in .text. what's needed to make the data writable ?
[01:19:26] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:20:41] <fizzie> Don't point them at the contents of a string literal.
[01:21:02] <Daisenryaku> ok, but how ?
[01:21:22] <fizzie> Either `uint8_t foo[][6] = {...}`, or a bunch of separate arrays, or a bunch of composite literals.
[01:21:57] <Daisenryaku> well, the size of each string block inside the array is different
[01:22:07] <fizzie> Then either the second or third option.
[01:22:14] <fizzie> uint8_t foo_a[] = "aaaaa"; uint8_t foo_b[] = "bbbbb"; uint8_t *foo[] = {foo_a, foo_b}; // or with composite literals
[01:22:45] <Daisenryaku> how'd that look with composite literals ?
[01:22:49] <fizzie> Er, compound literals, I mean. (I keep mixing it up with Go.)
[01:23:10] <fizzie> uint8_t *foo = {(uint8_t[]){"aaaaa"}, (uint8_t[]){"bbbbb"}};
[01:23:55] <Daisenryaku> ah, that seems a lot nicer than having to declare a name for each "string"
[01:23:56] <quartz> If I have something like char *x = "Hey there" does that mean x is stored on the heap?
[01:24:06] *** Quits: wafer31337 (~wafer3133@197.15.122.150) (Quit: Quit)
[01:24:11] <quartz> Or must it be char *x = malloc(sizeof(char));
[01:24:49] *** Quits: magla (~gelignite@55d4a813.access.ecotel.net) (Quit: Stay safe!)
[01:25:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56)
[01:25:24] <fizzie> `x` is a pointer with either automatic or static storage duration (depending on whether that declaration is inside a function or not); with `char *x = "Hey there"`, what it will point _at_ will be an array with static storage duration.
[01:27:32] <quartz> fizzie: but static storage duration means the heap right?
[01:27:48] <fizzie> Usually people use the "heap" to mean allocated storage.
[01:27:57] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[01:28:13] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[01:28:35] <floatcomplex> char * x = strdup("lol");
[01:28:52] <quartz> OK
[01:29:34] <fizzie> I'm a little worried something odd might be going on there.
[01:29:37] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[01:29:42] <floatcomplex> static storage does not mean the heap
[01:29:55] <tk> >the heap
[01:30:02] <tk> implying there is one heap or that it exists :P
[01:30:04] <quartz> heap to me means "just use malloc"
[01:30:09] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:30:25] <fizzie> The heap, the heap, the heap is on fire.
[01:30:41] <pragma-> What a heap of nonsense.
[01:30:41] <pony> there is a similar hatred for "the stack"
[01:30:42] <quartz> Is that a song from somewhere?
[01:31:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b7fd:fa95:80d6:f41) (Ping timeout: 240 seconds)
[01:31:24] <pragma-> The channel bot used to automatically say something whenever someone would say "the stack"
[01:31:41] <floatcomplex> that's asinine
[01:32:23] <floatcomplex> just because the c standard document itself doesn't use that nomenclature doesn't mean we should pretend it doesn't exist, when we all know what it means
[01:33:40] <tk> The C standard does not simply "not use that nomenclature"
[01:34:05] <tk> the C standard imposes no requirements on how you might implement function calls, locals, allocations etc
[01:34:23] <tk> in reality, at least the allocation situation is more often these days a lot more complicated than just "the heap"
[01:34:30] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:34:30] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:34:30] *** Joins: wroathe (~wroathe@user/wroathe)
[01:34:41] <pony> Rust nomenclature does. It makes me wonder whether Rust does specify a stack/heap or they don't understand their own thing, or if it's a lie.
[01:34:52] <tk> there's no real reason why separate call and data stacks shouldn't suddenly become popular tomorrow
[01:35:29] <tk> it seems pointless and limiting to heavily rely on concepts which a: do not necessarily accurately describe the implementation and b: don't actually add anything
[01:36:02] <tk> you can explain allocated storage without concepts such as "the heap" just as much as you can explain limits the number of nested function calls without referring to concepts such as "the stack"
[01:36:09] <floatcomplex> ok but we weren't talking about the stack, we were talking about the heap, in the context of whether that's where a string literal was stored or not
[01:36:12] <floatcomplex> it's not
[01:36:23] <tk> and in the end, you would avoid pre-seeding concepts which might lead someone less experienced to make the wrong assumptions down the line
[01:36:24] <floatcomplex> the word heap doesn't have to appear in the c standard for that to be true
[01:36:26] *** Joins: Viewday114 (~Viewday@user/viewday)
[01:36:51] <tk> actually, this case demonstrates the issue quite well
[01:37:23] <tk> "static storage duration" does not have anything to do with "the stack" or "the heap"
[01:37:30] <floatcomplex> right
[01:37:33] <floatcomplex> and that was the answer
[01:37:46] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:499c:186d:f10d:6a24) (Ping timeout: 260 seconds)
[01:37:48] <pony> the stack
[01:37:49] <tk> to someone who has learned about programming focusing on just these two terms, it suddenly becomes confusing (as demonstrated) when something does not fall into those two categories
[01:38:05] <pragma-> the heap
[01:38:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:38:19] *** Viewday114 is now known as Viewday11
[01:38:34] <floatcomplex> i don't see how. it's not on the stack nor the heap. you don't need to get philosophical about whether those things exist to know that a string literal isn't in either of them
[01:39:14] <tk> floatcomplex: right but if you look carefully it appears that quartz was literally confused by the fact that it was in neither of those categories
[01:39:43] <tk> or at least there was some confusion
[01:39:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[01:39:51] <tk> otherwise the question wouldn't have been posed
[01:39:57] <quartz> Uhhhhh
[01:40:52] <floatcomplex> quartz: char * x = "this is a string literal that is just somewhere in program memory but not on the stack nor the heap and you can't modify it but you can point x at something else";
[01:40:55] <quartz> So it's true that if I use malloc() than the variable is allocated to the heap?
[01:41:05] <quartz> floatcomplex: Oh ok
[01:41:10] <quartz> That helps
[01:41:12] <tk> quartz: it's allocated somewhere, not necessarily "the heap" if one exists
[01:41:12] <floatcomplex> quartz: colloquially, yes, it is on the heap
[01:41:32] <floatcomplex> taking "the heap" to mean "memory returned by malloc and strdup and friends"
[01:41:32] <quartz> int y = 10; is just a stack variable then?
[01:41:46] <floatcomplex> quartz: possibly. it's not required to be anywhere yet
[01:42:07] <pony> the larch
[01:42:21] <pony> the
[01:42:22] <pony> larch
[01:42:26] <quartz> ?
[01:42:28] <tk> not everyone understands that "the heap" means "one of a multiple different OS specific, implementation specific, language specific methods of allocating storage which is detached from stack frames"
[01:42:54] <tk> heck even describing "the heap" is incredibly difficult without then having to explain stack frames as a reason why "the heap" is not like "the stack"
[01:43:07] <fizzie> `int y = 10;` needs more context around it. And for `char *x = ...;` there are two different answers, one for `x` (the pointer) and one for whatever it's pointing at.
[01:43:10] <tk> and now you've roped yourself into explaining 10 different concepts, except you don't have enough time to describe them so you take lots of shortcuts
[01:43:45] <floatcomplex> or you could just use the term heap to colloquially describe memory that acts as if it were returned by malloc because you shouldn't need to know anything else about it
[01:43:55] <floatcomplex> in fact if you do need to know anything else about it you're probably already fucked 
[01:44:00] <fizzie> The reason why the question confused me a little is, sometimes when people ask things like "is X on 'the heap'?" what they /really/ want to know is whether its lifetime will be sufficient for their purposes.
[01:44:17] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[01:44:17] <tk> if you just explain: "malloc returns storage which lasts until you call free on the resulting pointer and is not tied to things such as where you allocated the storage or when you allocated it" it's actually a lot more descriptive of what malloc actually does and does not require you to then explain 10 other equally complicated concepts"
[01:44:43] *** Quits: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:44:52] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[01:45:08] <floatcomplex> > not everyone understands that "the heap" means "one of ...."
[01:45:11] <floatcomplex> yeah and they don't need to
[01:45:32] <tk> floatcomplex: I think you've forgotten what it's like to be a beginner programmer
[01:45:36] <floatcomplex> in practice it's just shorthand for something that behaves the way memory returned by malloc behaves
[01:46:02] <tk> lots of crappy shorthands were the cause of numerous misunderstandings which I had to overcome when I was much less experienced
[01:46:34] <quartz> Do ya'll mind helping me study for my C exam?
[01:46:45] <pragma-> "Y'all"
[01:46:49] <quartz> :P
[01:46:53] <pony> does the exam have questions about the stack and the heap?
[01:47:03] <quartz> Possibly
[01:47:04] <tk> quartz: no, but would warn you that if we had to take your exam, the answers might end up being wrong because the exam is wrong.
[01:47:23] <quartz> tk: Hahaha
[01:47:31] <floatcomplex> if by "study for your exam" you mean "send bags of flaming doggy doodoo to your professor" then you don't even need to ask
[01:47:34] <pony> did your professor tell you there's a stack/heap?
[01:47:42] <quartz> pony: Yes
[01:47:44] <floatcomplex> quartz's professor has said many things
[01:47:46] <tk> floatcomplex: how do you explain to someone the difference between sbrk, an allocator on top of sbrk, mmap, an allocator on top of mmap, etc?
[01:47:47] <floatcomplex> so many things
[01:47:50] <tk> with the concept of "the heap"
[01:47:52] <floatcomplex> tk: you don't
[01:48:03] <tk> you might eventually need to
[01:48:18] <tk> and when that time comes, that person will have to unlearn assumptions rooted in the exact wording of "the heap"
[01:48:22] <floatcomplex> tk: nobody should need to know what sbrk is unless they are maintaining 20 year old software and you don't assign that to a beginner
[01:48:23] <quartz> I love how everyone here destroys my poor professor haha
[01:48:36] <tk> it's irrelevant what you assign to a beginner or not floatcomplex 
[01:48:44] <tk> beginners are not a separate entity from experienced programmers
[01:48:51] <tk> they are the same entity, earlier on an experience continuum
[01:49:32] <tk> you can't just pretend like teaching beginners something completely contrary to what an experienced programmer might need to know is a good idea unless you've forgotten exactly what it's like to be taught something to then be taught something contradictory
[01:49:47] <tk> yes, simplifications are great for beginners, I agree, but there's a line between simplifications and contradictions
[01:50:10] <floatcomplex> well sbrk isn't in the standard either
[01:50:15] <tk> it's usually possible to simplify things in a way which is not contradictory unless you're literally teaching kids newtonian physics and then have to expand into einstein's relativity
[01:50:20] <floatcomplex> i don't understand where this line of thought is coming from
[01:50:36] <floatcomplex> you don't need to know how malloc is implemented in order to use malloc
[01:50:55] <tk> of course it's not in the standard, but if you're going to talk about non-standard concepts and how they relate to the standard (for example if you were explaining to someone how malloc might actually be implemented) if you don't have to unteach them something it's definitely much easier than if you do have to unteach them something
[01:51:00] <floatcomplex> you do need to know that when your colleagues refer to something as being on the heap, they most likely mean it was obtained from malloc, and that's ALL they mean by it
[01:51:32] <pony> why call it the heap then
[01:51:37] <tk> yes, you don't need to know how malloc is implemented in order to use malloc, that is true, but when you say that "malloc allocates memory on the heap" you are literally explaining how malloc is implemented poorly
[01:51:59] <quartz> https://bpa.st/KHCA
[01:52:27] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f197:203e:92f7:a4c2)
[01:52:27] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f197:203e:92f7:a4c2) (Changing host)
[01:52:27] *** Joins: skapata (~Skapata@user/skapata)
[01:52:51] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[01:52:54] <floatcomplex> tk: i would never say that sentence though. what i WOULD say is "on the heap" is shorthand for "returned by malloc or a malloc-like function, must eventually be passed to free, and has lifetime not coterminous with the initial scope of the call that created it
[01:52:55] <quartz> Ahhh sorry I think I got it.
[01:52:58] <floatcomplex> "
[01:53:27] <mcf> you could also say "has allocated storage duration", which is how it's described in the standard
[01:53:39] <tk> floatcomplex: right, but by telling someone that there exists such a space called "the heap" you are literally prompting them to ask what a heap is
[01:53:54] <tk> at least anyone with a modicum of curiosity
[01:54:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:54:31] <floatcomplex> "a heap" and "the heap" are unrelated here. there are 3 or more things called "tack" on a small sailboat and you need to know the context for each of them to know which is being referred to. that's just the way nomenclature is sometimes
[01:55:03] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[01:55:23] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[01:55:30] <tk> the fact that boats have poor nomenclature doesn't mean that in a language where you've literally been provided the tools to have accurate-er nomenclature you should discard those tools because you feel like it's a hopeless endeavour
[01:55:52] <floatcomplex> i'm not saying that "allocated storage duration" isn't the right thing to say
[01:56:25] <floatcomplex> i am saying that if you steadfastly refuse to acknowledge that "the heap" has an established colloquial meaning then you are causing communication problems, not solving them
[01:56:54] * floatcomplex tries a different tack
[01:58:12] <apotheon> floatcomplex: Thank you for using "tack" correctly.
[01:58:28] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:58:33] <floatcomplex> "ok he's on starboard tack, you need to stop fucking with the tack and fucking tack"
[01:58:45] <tk> the fundamental issue really is that when someone says "the heap" you don't know what is going on in their mind, especially when they learn about heap datastructures and may become confused into thinking that "the heap" has anything to do with them, replying to a question such as "is X on the heap" with "yes" or "no" when you have no idea what experience level that person has is at best going to result
[01:58:46] <tk> in nothing worse than replying "X has allocated storage duration" and at worst it's saying "It's allocated by calling sbrk." or something equally either highly implementation specific or just flat out wrong
[01:59:25] <tk> by being accurate, you are going to either answer the question, or you're going to prompt a question which may clear a misunderstanding
[01:59:38] <tk> by being inaccurate, you are either going to answer the question or deepen a misunderstanding
[02:00:10] <floatcomplex> apotheon: in practice there would have been several more fucks in there
[02:00:44] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:00:54] <apotheon> floatcomplex: like a sailor
[02:00:58] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[02:01:17] <tk> floatcomplex: my point is that irrelevant to "the heap's" established nature, it's a shitty term which is too vague to be useful in the modern programming world, this leads to confusion of beginner programmers and even confusion of experienced programmers, genuinely I disagree with it's vagueness even as someone who knows what it "probably" means in most cases
[02:01:42] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1bce:ba7c:3f01:c9f3)
[02:02:00] <apotheon> Is there any reason that "dynamically allocated" isn't a good stand-in for "returned by malloc or a malloc-like function, must eventually be passed to free, and has a lifetime not coterminous with the initial scope of the call that created it"?
[02:02:31] <tk> I mean dynamically allocated is a hell of a lot better than "allocated on the heap" or "on the heap"
[02:02:37] <floatcomplex> tk: i mean i get it. i wish people didn't use the term "coroutines" to describe abuse of duff's device. it's literally the first google result and it shouldn't be
[02:02:43] <quartz> Can I ask anotehr question?
[02:02:48] <anddam> when declaring `char my_string[20];` is there a way to make an assignment to my_string later on in the code? (i.e. not an initialization)
[02:02:48] <tk> quartz: of course
[02:02:48] <apotheon> of course
[02:02:50] <tk> don't ask
[02:02:52] <apotheon> tk: jinx
[02:02:53] <floatcomplex> apotheon: https://forums.sailinganarchy.com/uploads/monthly_10_2008/post-13013-1223609580.jpg
[02:02:55] <tk> (don't ask to ask)
[02:03:09] <apotheon> don't ask to ask; just ask (to clarify what tk means)
[02:03:29] <apotheon> floatcomplex: nice
[02:03:33] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[02:03:52] <tk> anddam: there's no way to assign to multiple elements at once if that's what you mean, unless it's inside a struct itself, then you can assign the enclosing struct
[02:04:02] <apotheon> quartz: In short, your question is welcome, and you don't need permission to ask it.
[02:04:34] *** Joins: Viewday115 (~Viewday@user/viewday)
[02:04:45] *** Quits: codethulu (~codethulu@cpe-173-174-108-148.austin.res.rr.com) (Quit: The computer fell asleep)
[02:04:57] <anddam> tk: mm that's because the array is actually comprised of multiple elements, char in my example?
[02:04:57] <quartz> Is there anyway for two system processes, (pid_t pid1, pid_t pid2), to ever be the same?
[02:04:58] <tk> anddam: as an alternative to that, you can use one of the string.h functions to copy from something (e.g. a literal)
[02:05:11] <apotheon> After that "of course of course" bit earlier, I now have the theme of Mr. Ed in my head, but with "quartz" in place of "horse".
[02:05:47] <quartz> Like if you have pid_t pid1 = waitpid(), than pid_t = getpid()
[02:05:59] <anddam> tk: yeah, in fact I used strncpy() using the array as dest, but I was curious about the reason why I could make an assigment. In my (ignorant) mind `char foo[N]` meant foo had a type of (char *)
[02:06:06] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:06:07] *** Viewday115 is now known as Viewday11
[02:06:28] <anddam> and obviously stumbled on "assignment to expression with array type" error
[02:06:38] <floatcomplex> just strcpy from a string literal
[02:06:43] <floatcomplex> or memcpy if possible
[02:06:59] *** Quits: zzzod` (~user@196.64.42.204) (Ping timeout: 252 seconds)
[02:07:29] <tk> anddam: arrays get confused for pointers because in a lot of situations an array in C will be implicitly converted to a pointer to its first element
[02:07:32] *** Quits: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a) (Quit: Konversation terminated!)
[02:07:47] <apotheon> s/strcpy/strlcpy/
[02:07:56] <tk> anddam: even so, if you tried to assign to THAT, it would complain about it not being an lvalue
[02:07:56] <apotheon> also s/strncpy/strlcpy/
[02:08:19] <tk> strcpy/strncpy/strlcpy/strnlcpy/strlnllnlncpy should be all ignored
[02:08:49] <tk> there was a very nice article written with very good explanations as to why, I should find it
[02:08:59] <apotheon> As long as you aren't using strcpy or strncpy, I guess I'm fine.
[02:09:07] <pony> tk, I'd like to read that
[02:09:10] <apotheon> tk: yes, please find it
[02:09:20] <apotheon> I want to know what it has to say about strlcpy in particular.
[02:09:50] <tk> https://nullprogram.com/blog/2021/07/30/
[02:09:54] <apotheon> Does it think snprintf should be used instead?
[02:09:59] <tk> no
[02:10:17] <tk> well I think snprintf is useful in a lot of cases where people use the str functions but I can recognise when it might not be appropriate
[02:10:24] <tk> this article covers what should be used in those cases instead
[02:10:46] <tk> the article advocates for memcpy instead
[02:10:49] <tk> and I agree with the reasoning
[02:10:52] <apotheon> Oh, it seems to dislike strlcpy for not being in the stdlib.
[02:11:02] <tk> no
[02:11:19] <tk> I mean that's ONE of the reasons
[02:11:29] <apotheon> strlcpy (non-standard)
[02:11:42] <tk> but the reasons for why strcpy shouldn't be used which are detailed in the rest of the article are all perfectly applicable to strlcpy
[02:11:44] <apotheon> That's the only place strlcpy appears in the text.
[02:11:48] <tk> yes but read the article
[02:11:52] <apotheon> I see.
[02:12:02] <apotheon> well . . . I plan to read it
[02:12:31] *** Joins: rgrinberg (~textual@187.223.144.204)
[02:13:19] <anddam> tk | strcpy/strncpy/strlcpy/strnlcpy/strlnllnlncpy should be all ignored   <--  which one should I pick then?
[02:13:43] <apotheon> anddam: see the article, but it seems to suggest memcpy
[02:13:44] <anddam> ah nvm
[02:13:47] <anddam> read the article
[02:13:55] <tk> anddam: is your usecase performance intensive and you need to make sure things are done as quickly as possible? memcpy, otherwise? snprintf
[02:14:30] <anddam> tk: not performance intensive at all
[02:14:34] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[02:14:42] <tk> but you just want to replace the contents of a buffer
[02:14:53] <tk> if you're not formatting anything I would still recommend memcpy
[02:14:53] <anddam> yes
[02:14:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:15:32] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 268 seconds)
[02:16:02] *** Quits: int (~int@0x4.cx) (Ping timeout: 260 seconds)
[02:17:13] <tk> if you're dealing with a string literal and an array, you can actually fit into a macro an entire incantation which will both: check that the replacement literal is definitely smaller, calculate it's size at compile time and memcpy it
[02:17:48] <tk> and I think you could even make it break catastrophically (or configure your compiler to scream at you) if you misuse it in a scenario where you're not working with specifically a string literal and an array
[02:18:17] *** Joins: int (~int@0x4.cx)
[02:18:46] *** Joins: Viewday114 (~Viewday@user/viewday)
[02:20:14] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:20:15] *** Viewday114 is now known as Viewday11
[02:21:31] *** Parts: Daisenryaku (~sh4@user/sh4) (Leaving)
[02:22:30] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[02:23:12] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com)
[02:23:53] *** Joins: rgrinberg (~textual@187.223.248.37)
[02:29:37] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 240 seconds)
[02:30:53] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:32:28] *** Quits: Akuli (~Akuli@213.216.211.146) (Quit: Akuli)
[02:33:46] *** Quits: pizdets_ (~pizdets@183.182.110.80) (Ping timeout: 260 seconds)
[02:34:07] *** Joins: pizdets (~pizdets@183.182.110.174)
[02:35:35] *** Joins: Viewday113 (~Viewday@user/viewday)
[02:36:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:37:08] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:37:08] *** Viewday113 is now known as Viewday11
[02:41:03] *** Joins: rgrinberg (~textual@187.223.248.37)
[02:44:34] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[02:45:59] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:46:17] *** Joins: ferdna (~ferdna@user/ferdna)
[02:46:18] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[02:47:35] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[02:48:02] *** Quits: quartz (~nick@user/quartz) (Quit: WeeChat 3.3)
[02:48:15] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:48:54] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[02:49:13] *** Joins: Viewday116 (~Viewday@user/viewday)
[02:50:17] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:50:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:50:48] *** Viewday116 is now known as Viewday11
[02:52:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:52:55] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[02:53:11] *** Quits: Kev_ (~Kev@2a01cb0400149f00f5d4de1a0e99d4da.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[02:53:14] *** Joins: Colt (~Colt@user/colt)
[02:53:41] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:54:21] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[02:54:29] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:57:05] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 250 seconds)
[02:58:00] *** Joins: rgrinberg (~textual@187.223.144.204)
[02:59:23] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[02:59:24] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:59:50] *** Joins: Colt (~Colt@user/colt)
[03:01:40] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[03:06:51] *** Joins: cemguresci (~cemguresc@2001:a61:1181:6d01:e8fa:d8ff:5231:22a5)
[03:08:17] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 240 seconds)
[03:10:32] *** Joins: spuz (~spuz@95.149.135.182)
[03:10:52] <cousteau> speaking of compilers screaming at you... I wonder if you can make a macro that returns the length of an array, and screams at you if you pass anything other than an array
[03:12:32] <NRK[m]> i think gcc already has warning for that
[03:12:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:13:20] <floatcomplex> there should be an option that screams at you if you make a macro
[03:14:03] <NRK[m]> ,cc #define ARRLEN(X) (sizeof(X)/sizeof(X[0])\n int *x; printf("%d\n", ARRLEN(x));
[03:14:06] <candide> NRK[m]: warning: division 'sizeof (i​nt *) / sizeof (i​nt)' does not compute the number of array elements [-Wsizeof-pointer-div]  note: in expansion of macro 'ARRLEN'  note: first 'sizeof' operand was declared here  error: expected ')' before ';' token
[03:15:00] <floatcomplex> "what if we had typedefs but they were turing complete"
[03:15:41] <cousteau> ,cc -w #define LENGTH(x) ((&(x) == (void *)&*(x)) ? sizeof (x) / sizeof *(x) : 0) \n  int arr[69]; printf("%zu", LENGTH(arr))
[03:15:43] <candide> cousteau: 69
[03:15:53] <cousteau> ,cc -w #define LENGTH(x) ((&(x) == (void *)&*(x)) ? sizeof (x) / sizeof *(x) : 0) \n  int *arr; printf("%zu", LENGTH(arr))
[03:15:55] <candide> cousteau: 0
[03:15:58] <cousteau> ,cc -w #define LENGTH(x) ((&(x) == (void *)&*(x)) ? sizeof (x) / sizeof *(x) : 0) \n  int arr; printf("%zu", LENGTH(arr))
[03:16:00] <candide> cousteau: error: invalid type argument of unary '*' (have 'i​nt')  note: in expansion of macro 'LENGTH'  error: invalid type argument of unary '*' (have 'i​nt')  note: in expansion of macro 'LENGTH'
[03:16:20] <cousteau> I guess I could make it yell more using _Static_assert
[03:16:24] *** Quits: cemguresci (~cemguresc@2001:a61:1181:6d01:e8fa:d8ff:5231:22a5) (Quit: Leaving)
[03:16:47] <floatcomplex> static_assert is good yes
[03:17:57] <floatcomplex> yes, the c preprocessor is a necessary evil. it requires discipline to not abuse it to make code that only you can debug
[03:18:56] <fizzie> You can't have _that_ test yell with _Static_assert, because `(&(x) == (void *)&*(x))` won't be an integer constant expression.
[03:19:07] <floatcomplex> function like macros should have names that make what they expand to 100% unsurprising
[03:19:24] <cousteau> ok I tried to use _Static_assert together with the comma operator but it turns out that _Static_assert is a statement, not an operator or function or macro or whatever
[03:19:36] <fizzie> It's a declaration, not a statement.
[03:19:39] <cousteau> fizzie: oh, ouch
[03:19:50] <fizzie> You can stick it in a macro by wrapping it in an otherwise unused compound literal.
[03:19:58] <fizzie> ,cc #define ARRAY_SIZEOF(arr) ((struct { _Static_assert(sizeof (arr) != sizeof ((arr)+0), "not an array"); int dummy; }){0}, sizeof (arr)) \n int arr[7], *ptr = arr; printf("%zu, %zu", ARRAY_SIZEOF(arr), ARRAY_SIZEOF(ptr)); // has some false negatives for exactly pointer-sized arrays
[03:20:00] <candide> fizzie: error: static assertion failed: "not an array"  note: in expansion of macro 'ARRAY_SIZEOF'
[03:20:15] <cousteau> oh wow
[03:20:16] <cousteau> I see
[03:20:56] <cousteau> yeah I guess _Static_assert (condition) is a replacement for char _unused[!!condition]
[03:21:19] *** Quits: Libero (~Libero@77.49.184.64.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:21:29] <fizzie> For the record, I suspect it's a declaration because it's used a lot at file scope, and you can only have declarations there.
[03:21:49] <cousteau> fizzie: yeah, my trick doesn't fail on exactly pointer-sized arrays, but I see how it wouldn't be a constant expression
[03:22:56] <cousteau> also notice I used &*(x) and not just (x), that way if (x) is not a pointer/array it'll fail
[03:23:50] <cousteau> pointer/array/function, apparently
[03:25:02] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com)
[03:25:22] *** Quits: anton (anton@user/anton) (Quit: anton)
[03:26:24] <cousteau> interesting that &(x)==&*(x) also works if (x) is a function
[03:26:35] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:26:53] <cousteau> (since functions are pretty much the same as pointers to functions, value-wise)
[03:28:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:28:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:28:10] *** Joins: wroathe (~wroathe@user/wroathe)
[03:29:28] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[03:30:07] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Remote host closed the connection)
[03:30:15] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[03:30:20] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[03:30:37] *** Quits: chomwitt (~chomwitt@94.66.63.187) (Ping timeout: 240 seconds)
[03:31:59] <fizzie> ,cc #define CHECK_ARRAY(arr) _Generic((arr), __typeof__ (*&(arr)) : 0, default : 1) \n int arr[2], *ptr = arr, neither; printf("%d %d %d", CHECK_ARRAY(arr), CHECK_ARRAY(ptr), CHECK_ARRAY(neither));
[03:32:02] <candide> fizzie: 1 0 0
[03:32:13] <fizzie> Aw, cousteau left. :/
[03:32:49] <fizzie> I think that should be an integer constant expression, but sadly nonstandard.
[03:33:17] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:33:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:35:21] *** Joins: Charadon (~Charadon@155.138.164.183)
[03:36:19] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[03:38:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:38:47] *** Joins: Viewday11 (~Viewday@user/viewday)
[03:40:03] *** Joins: spuz55 (~spuz@2a01:4c8:1123:74b3:f97d:8bfd:8660:3aa7)
[03:41:24] *** Parts: sloanr (~user@70-59-70-189.mpls.qwest.net) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[03:41:26] *** Joins: spuz7 (~spuz@2a01:4c8:1123:74b3:4869:cfc3:f18a:dd7c)
[03:41:43] *** Quits: spuz (~spuz@95.149.135.182) (Ping timeout: 256 seconds)
[03:41:56] *** Quits: spuz7 (~spuz@2a01:4c8:1123:74b3:4869:cfc3:f18a:dd7c) (Client Quit)
[03:42:06] *** Joins: spuz (~spuz@2a01:4c8:1123:74b3:4869:cfc3:f18a:dd7c)
[03:42:49] *** Quits: spuz55 (~spuz@2a01:4c8:1123:74b3:f97d:8bfd:8660:3aa7) (Client Quit)
[03:45:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:45:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:45:01] *** Joins: wroathe (~wroathe@user/wroathe)
[03:45:35] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[03:45:39] *** Joins: nuxil (~nuxil@141.195.51.213)
[03:46:12] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1bce:ba7c:3f01:c9f3) (Ping timeout: 268 seconds)
[03:48:05] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[03:48:13] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[03:49:13] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[03:50:39] *** Joins: Torr (~Torr@user/torr)
[03:51:36] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[03:51:37] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[03:56:28] *** Joins: kuoi (~kuoi@109.175.166.57)
[03:57:10] *** Quits: Geezabiscuit (~Geezabisc@user/geezabiscuit) (Quit: ZNC 1.8.2 - https://znc.in)
[03:57:32] *** Joins: Geezabiscuit (~Geezabisc@user/geezabiscuit)
[04:01:15] *** Joins: pnbeast (~pnbeast@2601:140:4200:e3d0::1)
[04:01:17] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[04:04:44] *** Joins: Viewday116 (~Viewday@user/viewday)
[04:04:56] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:05:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:05:10] *** Viewday116 is now known as Viewday11
[04:19:29] *** Quits: alch (~alch@151.36.55.212) (Ping timeout: 268 seconds)
[04:20:55] *** Joins: stultusv (~stultusv@user/stultusv)
[04:21:11] *** Joins: alch (~alch@151.36.31.52)
[04:24:41] *** Joins: Guest85 (~Guest85@ec2-52-34-19-133.us-west-2.compute.amazonaws.com)
[04:25:19] *** Joins: Jantz (~IceChat95@118-93-131-79.dsl.dyn.ihug.co.nz)
[04:25:57] *** Quits: Jantz (~IceChat95@118-93-131-79.dsl.dyn.ihug.co.nz) (Excess Flood)
[04:26:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:28:12] *** Joins: Wulf (~Wulf@user/wulf)
[04:28:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:31:42] *** Quits: Guest85 (~Guest85@ec2-52-34-19-133.us-west-2.compute.amazonaws.com) (Quit: Client closed)
[04:32:01] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com)
[04:32:45] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com) (Client Quit)
[04:32:56] *** Joins: monkey_ (~user@190.104.116.153)
[04:33:49] *** Joins: Viewday118 (~Viewday@user/viewday)
[04:34:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:157f:fad:702e:d7a)
[04:34:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:34:15] *** Viewday118 is now known as Viewday11
[04:39:38] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[04:43:11] *** Joins: NEYi (~NEYi@109.251.216.38)
[04:44:31] *** Joins: Viewday112 (~Viewday@user/viewday)
[04:45:25] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[04:45:41] *** Quits: spuz (~spuz@2a01:4c8:1123:74b3:4869:cfc3:f18a:dd7c) (Quit: Client closed)
[04:46:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:46:27] *** Viewday112 is now known as Viewday11
[04:55:05] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[05:01:14] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[05:01:32] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[05:06:59] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[05:07:21] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[05:18:54] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[05:27:17] *** Quits: bigjonny (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[05:28:00] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[05:28:02] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:28:18] *** Joins: bigjonny (~pi@154.6.152.74)
[05:28:40] *** Quits: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) ()
[05:28:58] *** u0_a391 is now known as kit-ten
[05:31:38] *** Quits: Kit (~u0_a391@2600:380:8a15:2de3:e3:e81a:ec7d:cfdb) (Ping timeout: 268 seconds)
[05:31:47] *** kit-ten is now known as Kit
[05:32:37] *** Joins: fe23 (~fe23@2409:8a34:468:83d0:742b:2fdf:614c:6394)
[05:36:46] *** Joins: Viewday116 (~Viewday@user/viewday)
[05:36:48] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:38:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:38:35] *** Viewday116 is now known as Viewday11
[05:39:42] *** Quits: AmR (~AmREiSa@156.199.5.112) (Ping timeout: 256 seconds)
[05:50:34] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:52:07] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[05:52:09] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[05:53:22] *** Joins: CaCode (~CaCode@user/cacode)
[05:54:37] *** Joins: fstd (~fstd@xdsl-84-44-230-164.nc.de)
[05:55:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:55:37] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 250 seconds)
[05:57:33] *** Quits: fstd_ (~fstd@xdsl-85-197-54-43.nc.de) (Ping timeout: 250 seconds)
[05:58:33] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[05:58:46] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[05:59:32] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:02:39] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[06:03:17] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[06:04:14] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:05:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:06:10] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[06:06:47] <SamuelMarks> hi
[06:07:10] <SamuelMarks> On Ubuntu but not Debian I'm getting: "/usr/include/string.h:33:10: fatal error: 'stddef.h' file not found". Any ideas?
[06:07:13] <SamuelMarks> LLVM https://github.com/SamuelMarks/type-correct/runs/4583832029?check_suite_focus=true#step:7:104
[06:07:14] <candide> Title of SamuelMarks's link: [.github/workflows/x86-ubuntu-llvm-from-sources.yml] Debug `ctest` failure · SamuelMarks/type-correct@802c554 · GitHub
[06:15:39] *** Joins: CaCode_ (~CaCode@user/cacode)
[06:16:39] *** Joins: kdc (~kdc@196.211.197.159)
[06:17:06] *** Joins: CaCode- (~CaCode@user/cacode)
[06:17:57] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[06:18:58] <pnbeast> l
[06:19:06] <Kit> l
[06:19:10] <pnbeast> m
[06:19:22] <Kit> noo you forgot the v
[06:19:33] <pnbeast> I always get that wrong.  :(
[06:19:57] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[06:20:00] *** Joins: AmR (~AmREiSa@156.199.236.68)
[06:20:49] *** Joins: constxd (~brad@142.134.38.68)
[06:21:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:21:37] *** Joins: Guest24 (~textual@4.79.236.140)
[06:22:55] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:24:41] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:25:36] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[06:27:14] *** Quits: Guest24 (~textual@4.79.236.140) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:28:59] *** Joins: Viewday112 (~Viewday@user/viewday)
[06:29:16] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: Lost terminal)
[06:30:11] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:30:42] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:30:43] *** Viewday112 is now known as Viewday11
[06:33:14] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[06:33:18] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:33:27] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[06:34:54] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:35:09] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[06:35:42] *** Joins: zensei (~zensei@user/zensei)
[06:36:32] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:37:17] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[06:38:56] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:41:50] *** kurahaupo_ is now known as kurahaupo
[06:51:06] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:52:25] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 268 seconds)
[06:52:41] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:56] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[06:53:09] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[06:56:45] *** Joins: Viewday113 (~Viewday@user/viewday)
[06:58:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:58:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:58:00] *** Joins: wroathe (~wroathe@user/wroathe)
[06:58:09] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:58:10] *** Viewday113 is now known as Viewday11
[06:58:11] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:59:35] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[06:59:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56) (Quit: Quit)
[06:59:50] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:02:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ab00:3631:96fa:4872) (Ping timeout: 268 seconds)
[07:02:30] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5e95:5d3f:af2c:e213)
[07:03:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:04:26] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:05:37] *** Joins: Viewday116 (~Viewday@user/viewday)
[07:07:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[07:07:33] *** Viewday116 is now known as Viewday11
[07:09:08] *** Quits: zensei (~zensei@user/zensei) (Quit: zensei)
[07:09:12] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[07:09:32] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:10:40] *** Joins: Guest24_ (~textual@4.79.236.140)
[07:10:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:10:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:10:48] *** Joins: wroathe (~wroathe@user/wroathe)
[07:12:04] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[07:12:07] *** Joins: zensei (~zensei@user/zensei)
[07:13:07] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[07:13:20] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[07:15:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:16:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:18:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:19:26] *** Quits: begriffs (~begriffs@user/begriffs) (Quit: Leaving)
[07:22:27] *** Quits: moog (~moog@107.126.53.64) (Remote host closed the connection)
[07:25:14] *** Joins: begriffs (~singleuse@user/begriffs)
[07:25:49] *** Quits: begriffs (~singleuse@user/begriffs) (Remote host closed the connection)
[07:30:42] *** Joins: monchi (~joints@143.198.92.132)
[07:31:22] *** Joins: Viewday116 (~Viewday@user/viewday)
[07:32:17] *** Quits: bigjonny (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[07:32:50] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:32:50] *** Viewday116 is now known as Viewday11
[07:35:01] *** nuxil_ is now known as nuxil
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:39:35] *** Joins: anton (anton@user/anton)
[07:42:01] *** Quits: anton (anton@user/anton) (Client Quit)
[07:43:18] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[07:43:31] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[07:44:37] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[07:46:25] <kurahaupo> tk: separate call and data stacks are already a thing: the newer x86_64 CPUs have a shadow stack, which acts as the call stack; for backwards compatibility the return addresses are also written into the "main" stack, but if the return address read from both stacks don't match, an exception is raised and the OS usually will kill the process.
[07:47:44] <dave0> reinventing forth
[07:47:57] *** Quits: CaCode- (~CaCode@user/cacode) (Quit: Leaving)
[07:51:08] *** Joins: Satin (uid193953@user/Seten)
[07:54:34] *** Quits: Guest24_ (~textual@4.79.236.140) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:54:54] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[07:55:17] <pnbeast> It obviouthly wathn't good enough the firtht time.
[07:58:58] *** Joins: mahmutov (~mahmutov@5.176.51.189)
[07:59:19] <ISO-4683-1> lol
[07:59:31] <ISO-4683-1> it's a similar optimization to being harvard architecture at the l1 level
[08:02:59] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[08:03:13] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[08:03:59] *** Joins: Viewday112 (~Viewday@user/viewday)
[08:04:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:05:54] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:05:55] *** Viewday112 is now known as Viewday11
[08:06:28] *** Quits: mahmutov (~mahmutov@5.176.51.189) (Ping timeout: 256 seconds)
[08:07:00] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[08:07:28] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[08:07:57] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 240 seconds)
[08:08:37] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[08:09:26] *** Joins: anton (anton@user/anton)
[08:09:50] *** Quits: anton (anton@user/anton) (Client Quit)
[08:10:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com)
[08:17:43] *** Quits: alch (~alch@151.36.31.52) (Read error: Connection reset by peer)
[08:17:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:21:33] *** Joins: Viewday117 (~Viewday@user/viewday)
[08:21:36] *** Joins: alch (~alch@151.38.78.252)
[08:23:05] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:23:05] *** Viewday117 is now known as Viewday11
[08:23:11] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[08:23:25] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[08:23:30] *** Joins: node1 (~node1@user/node1)
[08:26:09] <node1> Good morning !!
[08:28:02] <pnbeast> It's not even midnight.
[08:31:10] <node1> But i believe when we first interact with anyone we should wish him/her with `good morning`
[08:32:46] <node1> well let me share my question here.  What does it mean `before every iteration of the loop`? It has been observed that all the conditions are TRUE before going into the while loop. https://pastebin.com/raw/QnSKqtUd
[08:33:05] *** Joins: Viewday112 (~Viewday@user/viewday)
[08:33:22] <node1>  it also observed that after one iteration or after complete iteration only C. option is valid.
[08:34:15] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[08:34:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:34:50] *** Viewday112 is now known as Viewday11
[08:39:25] <dave0> looks like it's c
[08:39:47] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:41:22] <dave0> it's exponentiation by squaring.. thre's probably a wikipedia page on it
[08:42:47] *** Joins: Torr (~Torr@user/torr)
[08:42:59] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[08:43:03] <floatcomplex> while( b! = 0 )
[08:43:15] * floatcomplex takes your space bar away
[08:43:23] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[08:43:36] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[08:46:25] *** Joins: analognoise (~analognoi@185.202.221.238)
[08:47:20] <node1> `before every iteration of the loop`  all the options are valid.
[08:51:46] *** Joins: gco (~gco@2601:647:4c80:2424:9443:2546:1922:84d7)
[08:51:46] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d834-b7f2-fd3e-c3e9.res6.spectrum.com)
[08:56:37] *** Joins: Rounin (~david@84.212.130.215)
[08:56:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:57:26] <smallville7123> "If the name of the macro being replaced is found during this scan of the replacement list (not including the rest of the source file’s preprocessing tokens), it is not replaced" does that mean, that if i do #define bar a \n #define a a bar \n     bar      then when "bar" > "a bar" > "a bar" and "a bar" is rescanned neither "bar" nor "a" will be expanded?
[09:00:34] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[09:00:47] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[09:03:24] *** Quits: analognoise (~analognoi@185.202.221.238) (Quit: Leaving)
[09:05:47] *** Joins: Viewday114 (~Viewday@user/viewday)
[09:07:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:07:41] *** Viewday114 is now known as Viewday11
[09:08:07] *** Joins: analognoise (~analognoi@185.202.221.238)
[09:12:10] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:12:44] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[09:16:47] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[09:17:02] *** Joins: de-facto (~de-facto@user/de-facto)
[09:18:09] *** Quits: soapsudsxx (~soapsudsx@209.221.40.139) (Remote host closed the connection)
[09:19:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:23:07] *** Joins: Wulf (~Wulf@user/wulf)
[09:23:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:24:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:25:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:26:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:27:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:28:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:28:51] *** Joins: Viewday118 (~Viewday@user/viewday)
[09:29:15] *** Joins: nyjets (~zz@2001:8003:1612:d500:dd7a:a560:5214:a044)
[09:29:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:30:54] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:30:55] *** Viewday118 is now known as Viewday11
[09:32:17] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[09:33:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[09:34:33] *** Joins: frost (~frost@user/frost)
[09:39:41] *** Quits: stultusv (~stultusv@user/stultusv) (Remote host closed the connection)
[09:41:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:43:15] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[09:43:50] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:44:57] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[09:46:16] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[09:48:15] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[09:48:28] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[09:50:39] *** Joins: Chpy0 (~chpy@30-8-178-69.static.gci.net)
[09:58:54] *** Quits: gco (~gco@2601:647:4c80:2424:9443:2546:1922:84d7) (Quit: ZZZzzz…)
[10:03:06] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[10:04:12] *** Joins: Viewday119 (~Viewday@user/viewday)
[10:06:02] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:06:03] *** Viewday119 is now known as Viewday11
[10:07:12] *** Quits: nyjets (~zz@2001:8003:1612:d500:dd7a:a560:5214:a044) (Quit: WeeChat 1.1.1)
[10:12:14] *** Quits: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) (Ping timeout: 268 seconds)
[10:12:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:13:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:17:02] *** Joins: koki (~koki@host-87-17-16-123.retail.telecomitalia.it)
[10:17:59] *** Joins: loganlee (~Thunderbi@user/loganlee)
[10:19:05] *** Parts: koki (~koki@host-87-17-16-123.retail.telecomitalia.it) ()
[10:22:26] *** Joins: chenqisu12 (~bhca7d@183.217.201.63)
[10:22:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Ping timeout: 240 seconds)
[10:24:02] *** Joins: stultusv (~stultusv@user/stultusv)
[10:29:59] *** Quits: puke (~puke@user/puke) (Quit: puke)
[10:30:50] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[10:31:28] *** Joins: Viewday116 (~Viewday@user/viewday)
[10:31:41] *** Joins: puke (~puke@user/puke)
[10:32:15] <caze> smallville7123: Don't cast.
[10:32:28] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:32:29] <smallville7123> ?
[10:33:14] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:33:15] *** Viewday116 is now known as Viewday11
[10:33:42] *** Joins: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[10:37:45] *** Joins: constxd (~brad@142.134.38.68)
[10:37:49] *** Joins: koki (~koki@host-87-17-16-123.retail.telecomitalia.it)
[10:38:19] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:39:05] <caze> smallville7123: Casting is bad.
[10:42:03] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[10:43:04] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[10:47:38] * rcf must be missing something
[10:47:58] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Ping timeout: 260 seconds)
[10:48:08] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[10:48:35] <smallville7123> rcf: same
[10:50:07] *** Joins: kashyaprushi_ (~kashyapru@49.36.103.177)
[10:50:17] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Ping timeout: 240 seconds)
[10:54:51] *** Joins: Libero (~Libero@77.49.184.64.dsl.dyn.forthnet.gr)
[10:55:17] *** Quits: PortableDave (~portabled@220.253.22.64) (Ping timeout: 240 seconds)
[10:58:44] *** Joins: diamondbond (~diamondbo@175.157.252.96)
[11:01:08] *** Joins: Viewday118 (~Viewday@user/viewday)
[11:03:16] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[11:03:17] *** Viewday118 is now known as Viewday11
[11:08:36] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[11:09:49] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[11:09:55] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[11:11:21] *** Quits: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) ()
[11:11:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 268 seconds)
[11:12:56] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:15:48] *** Joins: rcoote (~rcoote@2a02:908:69a:58a0:f495:f600:84e1:3ace)
[11:16:09] *** Joins: ts_ (~ts@114.254.3.22)
[11:17:27] *** Joins: node1 (~node1@user/node1)
[11:17:47] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[11:19:29] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:28:37] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 240 seconds)
[11:28:57] *** Joins: Viewday113 (~Viewday@user/viewday)
[11:30:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:30:33] *** Viewday113 is now known as Viewday11
[11:32:33] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[11:33:41] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:33:45] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[11:34:49] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[11:35:35] *** Joins: malloy (~jimery@116.30.221.255)
[11:35:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:36:13] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[11:37:32] *** Joins: mrig (~AdiIRC@user/mrig)
[11:38:03] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:38:33] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[11:39:20] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:40:11] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[11:47:43] *** Joins: diiirt (~diiirt@user/diiirt)
[11:51:22] *** kashyaprushi_ is now known as kashyaprushi
[11:53:11] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:54:21] *** Quits: yo (~0xfe0@49.36.186.18) (Read error: No route to host)
[11:54:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[11:54:50] *** Joins: yo (~0xfe0@49.36.186.18)
[11:59:50] *** Quits: skipper (~whatsupbo@user/scobydoo) (Quit: brb)
[12:00:38] *** Joins: x03nnn (~x03nnn@gateway/vpn/pia/x03nnn)
[12:00:57] *** Quits: kashyaprushi (~kashyapru@49.36.103.177) (Ping timeout: 240 seconds)
[12:01:24] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-71-223.pa.qld.optusnet.com.au)
[12:01:52] *** Joins: Viewday113 (~Viewday@user/viewday)
[12:03:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:03:29] *** Joins: |7| (~seachdamh@user/seachdamh)
[12:03:37] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[12:04:37] *** Joins: Viewday11 (~Viewday@user/viewday)
[12:04:50] *** Joins: PortableDave (~portabled@220.253.22.64)
[12:05:09] *** Joins: Darkcoal (~user@143.92.183.183)
[12:06:45] *** Quits: Viewday113 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:08:14] *** Quits: diamondbond (~diamondbo@175.157.252.96) (Ping timeout: 260 seconds)
[12:09:32] *** Parts: x03nnn (~x03nnn@gateway/vpn/pia/x03nnn) (Leaving)
[12:10:09] *** Quits: PortableDave (~portabled@220.253.22.64) (Ping timeout: 256 seconds)
[12:12:59] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:16:41] *** Joins: bbju (~bbju@103.144.149.220)
[12:16:58] *** Quits: alch (~alch@151.38.78.252) (Read error: Connection reset by peer)
[12:20:56] *** Joins: alch (~alch@151.36.53.85)
[12:24:19] *** Joins: Klinda (~superleag@user/klinda)
[12:28:55] *** Quits: nullptr| (~nullptr@user/nullptr/x-2182142) (Quit: ZNC - http://znc.in)
[12:29:38] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[12:29:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:29:49] *** Joins: nullptr| (~nullptr@user/nullptr/x-2182142)
[12:30:12] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:33:02] *** Joins: Viewday110 (~Viewday@user/viewday)
[12:34:30] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[12:34:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:34:37] *** Viewday110 is now known as Viewday11
[12:35:03] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[12:36:53] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:44:44] *** Quits: meandrain (~meandrain@86.123.72.102) (Quit: Leaving...)
[12:47:12] *** Joins: Satin (uid193953@user/Seten)
[12:49:48] *** Joins: Charadon (~Charadon@155.138.164.183)
[12:52:40] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:53:48] *** Quits: pnbeast (~pnbeast@2601:140:4200:e3d0::1) (Quit: WeeChat 2.7.1)
[12:56:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:56:41] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[12:57:51] *** Joins: supajerm_ (~supajerm@gateway/vpn/pia/supajerm)
[13:01:11] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Ping timeout: 268 seconds)
[13:01:20] *** Quits: baloona (~baloona@mail.baloona.de) (Quit: WeeChat 2.3)
[13:02:13] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[13:04:33] *** Quits: ts_ (~ts@114.254.3.22) (Quit: Leaving)
[13:07:35] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[13:08:24] *** Joins: node1 (~node1@user/node1)
[13:11:12] *** Joins: meandrain (~meandrain@2a02:2f0e:f305:2800:2423:21f3:294b:e892)
[13:17:30] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[13:20:08] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:23:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:24:03] *** Joins: aradesh (~aradesh@user/aradesh)
[13:25:52] *** Quits: stultusv (~stultusv@user/stultusv) (Remote host closed the connection)
[13:29:04] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[13:29:08] *** Quits: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe) (Client Quit)
[13:29:16] *** Joins: Viewday110 (~Viewday@user/viewday)
[13:30:43] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:30:44] *** Viewday110 is now known as Viewday11
[13:31:01] *** Joins: xa0s (~xa0s@mab.sdf.org)
[13:31:09] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[13:31:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[13:37:06] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:37:49] *** Joins: baloona (~baloona@mail.baloona.de)
[13:37:55] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Remote host closed the connection)
[13:39:35] *** Joins: Viewday117 (~Viewday@user/viewday)
[13:40:06] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:40:17] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:40:17] *** Viewday117 is now known as Viewday11
[13:40:32] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:41:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:43:04] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-71-223.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[13:46:38] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:48:36] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[13:49:38] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:51:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:51:01] *** Lord_of_Life_ is now known as Lord_of_Life
[13:52:18] *** Quits: baloona (~baloona@mail.baloona.de) (Ping timeout: 260 seconds)
[13:52:30] *** Joins: g2anj (~v@58.228.230.4)
[13:54:57] *** Joins: baloona (~baloona@mail.baloona.de)
[13:55:22] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:01:27] *** Joins: Viewday117 (~Viewday@user/viewday)
[14:03:28] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[14:03:29] *** Viewday117 is now known as Viewday11
[14:05:05] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[14:05:17] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[14:07:36] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[14:07:47] *** Quits: chenqisu12 (~bhca7d@183.217.201.63) (Ping timeout: 268 seconds)
[14:09:13] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Remote host closed the connection)
[14:09:43] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[14:12:15] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[14:12:37] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:14:25] *** Joins: ko (~i.am@user/marlboro)
[14:14:37] *** Joins: nmat[m] (~nmatsemat@2001:470:69fc:105::1:5553)
[14:14:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[14:15:26] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:21:44] *** Joins: kurahaupo (~kurahaupo@pa49-182-31-183.pa.qld.optusnet.com.au)
[14:22:23] *** Joins: nicko (~iClass@222.211.28.110)
[14:25:01] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:28:59] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[14:32:26] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:32:45] *** Joins: Kev_ (~Kev@2a01cb0400149f0030c04b21e9468286.ipv6.abo.wanadoo.fr)
[14:33:11] *** Joins: csrf (~csrf@user/csrf)
[14:34:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Ping timeout: 240 seconds)
[14:37:57] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[14:38:32] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:e954:6a22:3202:5b23)
[14:38:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[14:39:45] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:40:04] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-037.client.tudelft.eduvpn.nl)
[14:42:42] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Remote host closed the connection)
[14:44:45] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:46:54] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:e79c:6460:44ed:8423)
[14:48:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:50:21] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[14:53:53] *** Joins: tewrdh^ (~tewrdh@64.253.22.77)
[14:56:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:00:59] *** Joins: artie (~artie@pool-173-59-250-143.bltmmd.fios.verizon.net)
[15:01:07] *** Quits: Darkcoal (~user@143.92.183.183) (Quit: Darkcoal)
[15:01:18] *** Joins: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8)
[15:02:56] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[15:05:19] *** Joins: Viewday118 (~Viewday@user/viewday)
[15:06:22] *** Quits: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8) (Ping timeout: 268 seconds)
[15:06:39] *** Joins: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8)
[15:06:49] *** Joins: earnestly (~earnest@user/earnestly)
[15:06:55] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:06:55] *** Viewday118 is now known as Viewday11
[15:07:31] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[15:08:09] *** Joins: plantman (~plantman@2601:405:4680:1b0::f)
[15:09:13] *** Quits: kurahaupo (~kurahaupo@pa49-182-31-183.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[15:17:37] *** Joins: kish` (~sid742412@user/aqua)
[15:17:56] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[15:18:17] *** Joins: kish` (~sid742412@user/aqua)
[15:20:50] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[15:21:35] *** Joins: xSavitar (~xSavitar@user/xsavitar)
[15:23:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[15:23:58] *** Joins: xsperry (~xs@user/xsperry)
[15:24:27] *** Joins: zardoz2 (~bc8147f2@cerf.good1.com)
[15:24:30] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:27:40] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:28:40] *** Joins: Viewday118 (~Viewday@user/viewday)
[15:30:09] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:30:10] *** Joins: seninha (~seninha@user/seninha)
[15:30:10] *** Viewday118 is now known as Viewday11
[15:31:16] *** Quits: plantman (~plantman@2601:405:4680:1b0::f) (Quit: Leaving)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:48] *** Joins: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net)
[15:39:20] <katp32> hey, weird question but, is there any way to like, override a standard library function (eg fopen)? bonus points if it can be done transparently by linking a library?
[15:41:00] *** Joins: pulse (~pulse@user/pulse)
[15:42:02] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:43:41] *** Joins: stonkey (~stonkey@user/stonkey)
[15:44:16] <Wulf> katp32: LD_PRELOAD?
[15:47:49] <katp32> the issue is that I still ultimately need to call the standard library function, so the LD_PRELOAD'd library would have to link against the libc function *and* have an identical symbol for its own wrapper around that function, which I'm not sure how to do
[15:48:59] <Wulf> katp32: dlsym, RTLD_NEXT, RTFM.
[15:49:06] <katp32> ahh, did some more searching on LD_PRELOAD and I think I understand now. thanks for the tip
[15:49:10] <dave0> i have example code but for malloc, not fopen
[15:49:47] <katp32> doesn't matter what specific function it is, and I think I've got it now anyways, but thanks
[15:50:22] <omegatron> as Wulf said, use RTLD_NEXT and read the manual (of dlsym)
[15:50:46] <katp32> yes, again, already have the dlsym manpage open now
[15:51:07] <dave0> https://paste.c-net.org/NineteenTribunal
[15:51:59] <dave0> it seems my code creates a shared library to be linked to your program
[15:52:09] <dave0> no fussing with environment variables
[15:52:39] <Wulf> advantage of using an env variable is that you don't have to recompile the target program.
[15:52:50] <dave0> oh you also want to call the original function.. hmm dunno
[15:52:59] <katp32> indeed, LD_PRELOAD would let you avoid recompiling, but in my case I don't mind recompiling
[15:53:20] <dave0> don't have to recompile, just have to relink
[15:54:22] <katp32> that's true
[15:54:37] *** Joins: nyah (~nyah@94.6.71.219)
[15:58:26] *** Joins: strajder (~strajder@user/strajder)
[15:58:35] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr) (Ping timeout: 252 seconds)
[15:58:56] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:00:52] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[16:00:56] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:01:11] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:01:18] *** Joins: Viewday112 (~Viewday@user/viewday)
[16:03:18] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[16:03:37] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:03:37] *** Viewday112 is now known as Viewday11
[16:04:29] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:05:05] *** Joins: teepee (~teepee@openscad/teepee)
[16:05:34] *** Quits: Darkcoal (~user@2001:16a2:787a:e700:a5a8:40eb:d362:2ff8) (Ping timeout: 268 seconds)
[16:05:36] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:05:56] *** Joins: Darkcoal (~user@143.92.183.183)
[16:07:24] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[16:07:27] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:08:08] *** Parts: katp32 (~katp32@S010680ea96e8dbba.vc.shawcable.net) ()
[16:09:15] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[16:09:41] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f)
[16:09:41] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f) (Changing host)
[16:09:41] *** Joins: skapata (~Skapata@user/skapata)
[16:11:14] *** Joins: sicelo_ (~sicelo@ip170.ip-141-95-83.eu)
[16:11:14] *** Quits: sicelo_ (~sicelo@ip170.ip-141-95-83.eu) (Changing host)
[16:11:14] *** Joins: sicelo_ (~sicelo@user/sicelo)
[16:11:49] *** Joins: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net)
[16:13:11] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:13:39] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[16:13:59] *** Quits: nicko (~iClass@222.211.28.110) (Read error: Connection reset by peer)
[16:14:17] *** Joins: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374)
[16:17:10] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[16:18:47] *** Quits: artie (~artie@pool-173-59-250-143.bltmmd.fios.verizon.net) (Ping timeout: 256 seconds)
[16:19:29] *** Quits: alch (~alch@151.36.53.85) (Ping timeout: 256 seconds)
[16:21:18] *** Joins: alch (~alch@151.36.15.62)
[16:29:00] *** Quits: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[16:29:05] *** Joins: seninha (~seninha@user/seninha)
[16:29:58] *** Joins: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374)
[16:31:18] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[16:33:03] *** Joins: ffguest (~ffguest@178.151.94.123)
[16:33:12] *** Joins: constxd (~brad@142.134.38.68)
[16:33:13] *** Joins: Viewday111 (~Viewday@user/viewday)
[16:35:21] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:35:21] *** Viewday111 is now known as Viewday11
[16:37:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[16:37:37] *** Quits: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[16:45:18] *** Joins: Viewday118 (~Viewday@user/viewday)
[16:45:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:47:25] <nomagno> What is the scope of a pointer to a value returned as part of a function argument? e.g. foo(..., &returnval¡¡(2))
[16:47:31] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 268 seconds)
[16:47:31] *** Viewday118 is now known as Viewday11
[16:47:54] <nomagno> Sorry, little two extra symbols there, but returnval() returns an integer, and I am passing a pointer to that to foo()
[16:48:14] <nomagno> what is the scope of this this integer?
[16:51:38] *** Joins: humky (~humky@user/humky)
[16:51:50] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[16:52:19] <clarity> Have you tried to compile that?
[16:52:34] <clarity> The compiler might educate you about lvalues
[16:53:10] <clarity> Identifiers have scope, btw
[16:53:35] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: Lost terminal)
[16:55:30] <nomagno> Interesting
[16:56:20] <nomagno> Is there not some convenient syntax to pass a pointer to a new variable without declaring it before the function call?
[16:59:09] *** Joins: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374)
[16:59:22] <nomagno> int myint = 0; int *myintptr = operate_with_int(&myint);
[16:59:34] <Neui[m]> I think C99 combound thing can work
[17:01:40] <nomagno> A compound literal does indeed work
[17:02:12] <nomagno> int *takeptr(int *ptr){ return ptr; }
[17:02:12] <nomagno> int main(void){ takeptr(&(int){0}); return 0; }
[17:02:21] *** Quits: jiffe (~jiffe@mail.nsab.us) (Quit: WeeChat 2.9)
[17:02:39] <nomagno> What is the scope of (int){0} here?
[17:03:37] <Neui[m]> If I recall correctly until the end of the block like a normal variable
[17:04:26] <nomagno> So it is equivalent to `int myint = 0; takeptr(&myint);` ?
[17:04:31] <Xgc> "If the compound literal occurs outside the body of a function, the object has static storage duration; otherwise, it has automatic storage duration associated with the enclosing block."
[17:04:32] <Neui[m]> Yes
[17:04:58] *** Joins: Viewday112 (~Viewday@user/viewday)
[17:05:51] <nomagno> OH! This actually seems like a great way of designing interfaces that return pointers without malloc'ing
[17:06:10] <nomagno> You pass your normal list of arguments, then a pointer to an empty compound literal at the end.
[17:06:27] *** Joins: meator (~meator@user/meator)
[17:06:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[17:06:34] *** Viewday112 is now known as Viewday11
[17:11:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56)
[17:12:31] <Matt|home> so i noticed windows doesn't have getopt() .. and im using a few linux-only headers. in general if i wanted to write code for windows too how do you do that.. check if x headers exist if not then install them from somewhere? or do i need to physically include copies with the source file?
[17:13:23] <Matt|home> i assume all done with some makefile?
[17:15:46] <nomagno> Matt|home: POSIX-compatible environments (Linux, MacOS, etc) are inherently incompatible with the default Windows/win32 standard library in this way. You can't do most of those things, because Windows doesn't support getopt(). However, you can use cygwin, a custom non-Microsoft runtime for Windows which replicates simple parts of the POSIX standard library for Windows, such as getopt()
[17:16:04] <Matt|home> aw
[17:16:11] <nomagno> You can also try MinGW, a cross-compiler from Linux to Windows that can provide enhanced functionality
[17:16:16] <Matt|home> so tl;dr i'd have to write two separate versions of code 
[17:16:19] *** Quits: ffguest (~ffguest@178.151.94.123) (Remote host closed the connection)
[17:16:25] <Matt|home> or use something like cygwin
[17:16:49] <nomagno> Yes, you can't use the MSVC compiler for this, unfortunately
[17:16:57] <nomagno> you can use Cygwin or MinGW
[17:17:33] <nomagno> those are the two main toolchains for compiling programs using a subset of the POSIX stdlib to Windows
[17:18:10] <nomagno> Cygwin implements more of the interface than MinGW, with what being a runtime and not just a compiler toolchain, so I'd try it first
[17:19:23] <dave0> if you just need getopt() copy it from some *bsd
[17:19:44] <dave0> cut and paste from their standard library
[17:20:01] <nomagno> Make sure to compile with the license*
[17:20:06] <nomagno> You can try Plan9
[17:20:19] <nomagno> they usually have more readable and prettier code in my experience :P
[17:20:40] <nomagno> comply*
[17:21:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:23:39] <Matt|home> what's an example of a call to exit() failing .. and _exit() not?
[17:24:27] <Matt|home> or hell just, give me an example case scenario where exit() would fail
[17:25:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[17:26:18] <earnestly> Matt|home: See NOTES for exit(3)
[17:28:02] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:28:06] *** Joins: pulse (~pulse@user/pulse)
[17:28:19] <nomagno> Wow, a reference to VMS in a Unix manpage
[17:28:40] *** Joins: Viewday114 (~Viewday@user/viewday)
[17:29:04] <nomagno> ... Sidenote, I got an OpenVMS license a few years ago to try and make some software for it for the heck of it, horrendously boring operating system
[17:29:42] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:30:14] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[17:30:32] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[17:30:53] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:30:53] *** Viewday114 is now known as Viewday11
[17:32:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[17:35:14] *** Joins: acerbic (~acerbic@cs-xdata-50-86-54-195.cspire.com)
[17:36:47] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: leaving)
[17:37:01] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[17:37:17] <markand> MinGW does not provide many things more than windows
[17:37:39] <markand> but when you use POSIX, you have to keep in mind that your code will not be windows compatible without a large amount of #ifdef
[17:37:41] *** Joins: monkey_ (~user@190.104.116.153)
[17:38:05] <markand> you can still try to bug microsoft so they comply with POSIX 
[17:38:20] *** Quits: zardoz2 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:38:37] *** Quits: supajerm_ (~supajerm@gateway/vpn/pia/supajerm) (Ping timeout: 240 seconds)
[17:39:00] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:39:51] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:40:30] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:41:02] <Matt|home> alright apparently my IQ is zero.. can somebody show me some example code with getopt() that uses mandatory parameters? e.g. ./programname targetfile -p <-- spits out error if _both_ targetfile and -p isn't included
[17:41:14] <nomagno> they explicitly gave up on POSIX compliance when they replaced their POSIX compatibility layer with a Linux VM
[17:41:32] <Matt|home> or ./programname targetfile -f <-- if both targetfile and -f isn't included
[17:41:59] <Matt|home> i.e. the first argument, the filename , must be included. there must also be another parameter _after_ the filename, but it doesn't matter which one in this case
[17:42:07] <Matt|home> does that make sense?
[17:45:06] *** Joins: ffguest (~ffguest@178.151.94.123)
[17:46:27] *** Joins: moog (~moog@107.126.53.224)
[17:47:53] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 256 seconds)
[17:51:53] *** Quits: ffguest (~ffguest@178.151.94.123) (Ping timeout: 252 seconds)
[17:52:25] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[17:53:24] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[17:54:45] *** Quits: sicelo_ (~sicelo@user/sicelo) (Quit: Bye!)
[17:55:25] *** Joins: shivesh (~shivesh@user/shivesh)
[17:57:34] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:01:20] *** Joins: Viewday117 (~Viewday@user/viewday)
[18:01:44] *** Joins: sicelo_ (~sicelo@ip170.ip-141-95-83.eu)
[18:01:44] *** Quits: sicelo_ (~sicelo@ip170.ip-141-95-83.eu) (Changing host)
[18:01:44] *** Joins: sicelo_ (~sicelo@user/sicelo)
[18:03:11] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:03:11] *** Viewday117 is now known as Viewday11
[18:08:45] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:10:36] *** Joins: LanDi (~landi@177.37.146.152)
[18:10:44] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Read error: No route to host)
[18:11:00] *** Quits: LanDi (~landi@177.37.146.152) (Remote host closed the connection)
[18:11:19] *** Joins: LanDi (~landi@177.37.146.152)
[18:14:33] *** Quits: acerbic (~acerbic@cs-xdata-50-86-54-195.cspire.com) (Quit: Leaving)
[18:14:59] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[18:15:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:15:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:15:12] *** Joins: wroathe (~wroathe@user/wroathe)
[18:15:28] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:16:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:17:36] *** Quits: ko (~i.am@user/marlboro) (Read error: Connection reset by peer)
[18:24:35] *** Joins: ffguest (~ffguest@178.151.94.123)
[18:26:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[18:30:16] *** Quits: ffguest (~ffguest@178.151.94.123) (Remote host closed the connection)
[18:32:45] <twkm> Matt|home: the "opt" in getopt is "option", as in not certain to be present.  you make an option mandatory by failing if wasn't provided, a'la, int x = -1; ... getopt(...) ...; if (x == -1) abort();
[18:32:47] *** Joins: Viewday117 (~Viewday@user/viewday)
[18:34:52] <earnestly> ('Making an option mandatory' is a useful sentence because it so precisely highlights a failure of design due to the contradiction)
[18:34:55] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:34:55] *** Viewday117 is now known as Viewday11
[18:35:05] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:35:30] <earnestly> Sometimes unavoidable but does help to make one stop and think
[18:35:50] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:38:03] <wroathe> You're a contradiction 
[18:39:23] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:41:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:44:58] *** Joins: Viewday111 (~Viewday@user/viewday)
[18:46:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[18:46:24] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[18:46:49] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:46:49] *** Viewday111 is now known as Viewday11
[18:46:50] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:47:57] <earnestly> wroathe: https://0x0.st/-CGC.txt
[18:49:37] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[18:49:47] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[18:50:53] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[18:51:12] *** Joins: meator (~meator@user/meator)
[18:51:54] <Amun-Ra> option doesn't have to mean 'optional'
[18:52:03] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[18:53:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:56:19] *** Joins: strajder (~strajder@user/strajder)
[18:59:17] *** Quits: Dotz0cat (~Dotz0cat@h97.197.117.75.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[18:59:35] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[18:59:56] *** Quits: sicelo_ (~sicelo@user/sicelo) (Quit: Bye!)
[19:01:42] *** Joins: sicelo_ (~sicelo@user/sicelo)
[19:02:29] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:05:09] *** Joins: Viewday115 (~Viewday@user/viewday)
[19:06:32] *** Joins: mrig (~mrig@user/mrig)
[19:06:44] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:06:44] *** Viewday115 is now known as Viewday11
[19:07:20] *** Joins: evocatus (~evocatus@62.182.78.42)
[19:10:08] * earnestly should add 'generally being a midwit' to the list
[19:10:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:10:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:10:16] *** Joins: wroathe (~wroathe@user/wroathe)
[19:11:48] <smallville7123> function-like macro expansion is confusing :( https://godbolt.org/z/WzfxP3dvM    y should not be expanded since it was already expanded, right?
[19:12:46] <smallville7123> "If the name of the macro being replaced is found during this scan of the replacement list (not including the rest of the source file’s preprocessing tokens), it is not replaced. Furthermore, if any nested replacements encounter the name of the macro being replaced, it is not replaced. These nonreplaced macro name preprocessing tokens are no longer available for further replacement even if they are later (re)ex
[19:12:46] <smallville7123> amined in contexts in which that macro name preprocessing token would otherwise have been replaced."
[19:15:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:20:23] *** Quits: kuoi (~kuoi@109.175.166.57) (Quit: kuoi)
[19:21:55] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:22:49] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[19:25:51] *** Joins: mahmutov (~mahmutov@37.155.72.129)
[19:28:10] *** Joins: Satin (uid193953@user/Seten)
[19:28:43] *** Joins: Viewday116 (~Viewday@user/viewday)
[19:30:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:30:15] *** Viewday116 is now known as Viewday11
[19:34:27] *** Quits: sicelo_ (~sicelo@user/sicelo) (Quit: Bye!)
[19:34:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[19:34:38] *** Quits: rcoote (~rcoote@2a02:908:69a:58a0:f495:f600:84e1:3ace) (Ping timeout: 268 seconds)
[19:36:11] *** Joins: sicelo_ (~sicelo@ip170.ip-141-95-83.eu)
[19:36:11] *** Quits: sicelo_ (~sicelo@ip170.ip-141-95-83.eu) (Changing host)
[19:36:11] *** Joins: sicelo_ (~sicelo@user/sicelo)
[19:39:45] *** Quits: sicelo_ (~sicelo@user/sicelo) (Client Quit)
[19:41:11] <Matt|home> hm. I need a function to return 2 separate data type values: a void pointer, and something like a boolean or int or something to state if a file is 32 or 64 bit. 
[19:41:34] *** Joins: monkey_ (~user@190.104.116.153)
[19:41:37] <Matt|home> what should i do..
[19:41:51] *** Joins: kuoi (~kuoi@109.175.166.60)
[19:42:32] *** Joins: sicelo_ (~sicelo@user/sicelo)
[19:42:39] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[19:43:00] <floatcomplex> how can a file be 32 or 64 bit
[19:43:00] <Matt|home> oh i know
[19:43:25] <Matt|home> floatcomplex : im writing a command line utility for parsing ELF object files, they can be 32 or 64 bit executables
[19:43:37] <Matt|home> i can just pass a pointer
[19:44:03] <Amun-Ra> pointer as an arg
[19:44:14] <Matt|home> yes but of what type
[19:44:16] <Matt|home> let me see
[19:44:32] *** Joins: malina (~malina@user/malina)
[19:45:09] <Amun-Ra> an union would be an equivalent of option in C
[19:45:23] <NRK[m]> you can also return a struct
[19:46:06] <Matt|home> the value im looking for is in an unsigned character array
[19:46:08] <smallville7123> Matt|home: are you writing a linker?
[19:46:15] <Matt|home> nope
[19:46:20] <smallville7123> :)
[19:46:30] <smallville7123> readelf?
[19:46:33] <Amun-Ra> good for you
[19:46:42] <Matt|home> that would be beyond me. this is an extremely rudimentary and simple objdump/readelf clone with significantly less functionality
[19:47:07] <smallville7123> haha :)
[19:47:08] <Matt|home> struct might be a good idea
[19:47:36] <smallville7123> even a simply symbol dump requires decent knowlege of ELF spec
[19:48:35] <smallville7123> ELF has many different sections and some depend on how the ELF object is compiled
[19:49:10] <Matt|home> so i need to create the struct, and then the function declaration would look like: structname *functionname(args); ?
[19:50:39] <Matt|home> how should i handle failure. like on success it returns a pointer to the struct, on failure it returns what?
[19:51:16] <clarity> what do you want to happen on failure?
[19:51:19] <smallville7123> if you want, this may help https://github.com/mgood7123/universal-dynamic-loader/blob/master/loader/readelf_STABLE.c
[19:51:21] <smallville7123> Matt|home: 
[19:51:35] <Matt|home> ty
[19:51:36] *** Joins: sqrt (~sqrt@user/sqrt)
[19:52:10] *** Joins: terminalpusher (~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12)
[19:52:38] <smallville7123> be warned that it is not complete and it does not fully conform to the GNU linker/symbol resolution so there will be some symbols that it may not resolve and it may crash
[19:52:52] *** Quits: fe23 (~fe23@2409:8a34:468:83d0:742b:2fdf:614c:6394) (Quit: fe23)
[19:53:18] <smallville7123> tho it is decently documented
[19:54:37] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[19:54:40] *** Joins: zeroes (~fitangu@88-112-72-100.elisa-laajakaista.fi)
[19:54:49] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[19:55:01] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:57:00] <smallville7123> Matt|home: you may want to skip to line 608 and start from there
[19:58:48] <sqrt> https://bpa.st/DDEA I thought that arrays do not need to be referenced using `&`. Why is it that I get segmentation faults unless I do reference it?
[19:58:49] *** Quits: UsbSick (~UsbSick@2600:6c48:757f:e654:217f:9d34:6545:b1a6) (Read error: Connection reset by peer)
[20:00:33] <smallville7123> Matt|home: do note that the elf spec CAN change between libc versions 
[20:00:42] <Matt|home> yes
[20:01:45] *** Quits: geeknix (~pi@2001:e68:5432:c000:3795:5c40:487:1d37) (Ping timeout: 268 seconds)
[20:01:55] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[20:01:55] <smallville7123> sqrt: that isnt reference
[20:02:11] <smallville7123> sqrt: it is "address of" operator
[20:02:22] <smallville7123> reference is C++
[20:02:25] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:02:38] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[20:02:55] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:03:03] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[20:03:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:03:13] <smallville7123> and does not exist in C tho is the closest to a reference in C is via pointer and dereferencing
[20:03:38] *** Quits: evocatus (~evocatus@62.182.78.42) (Quit: Leaving)
[20:03:41] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:04:44] <smallville7123> sqrt: scanf is likely storing the value read by "%d" into the address passed to it via &v[i];    if you pass v[i] then it will attempt to dereference this value which is UB unless it is a pointer
[20:05:39] <sqrt> I see. Thanks.
[20:06:20] <smallville7123> eg v[0][1] // int ** v; v[0] is index 0 of the first pointer, v[0][1] is index 1 of index 0 of the first pointer, or int * tmp = v[0]; tmp[1] // index 1 of the pointer tmp
[20:06:37] *** Quits: rahl (~rahl@102.114.167.205) (Ping timeout: 240 seconds)
[20:07:13] <smallville7123> also note that just because it is a pointer does NOT mean that whatever value it has will ALWAYS be valid
[20:07:55] *** Quits: sqrt (~sqrt@user/sqrt) (Quit: Client closed)
[20:07:57] <smallville7123> eg v itself may point to 0x0 (NULL) or a garbage address
[20:08:21] <smallville7123> v[5] may also be 0x0 or any garbage address
[20:08:53] <constxo> kings
[20:08:54] *** Joins: rahl (~rahl@102.114.240.19)
[20:09:11] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:10:25] *** Quits: zeroes (~fitangu@88-112-72-100.elisa-laajakaista.fi) (Write error: Connection reset by peer)
[20:10:36] *** Joins: monkey_ (~user@190.104.116.153)
[20:10:39] *** Joins: zeroes (~fitangu@88-112-72-100.elisa-laajakaista.fi)
[20:10:40] <constxo> what music u guys listen to when u need to be productive and do some deep debugging
[20:11:07] <constxo> dump in a few vyvanse and just grind 10 hrs
[20:11:08] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:11:15] <smallville7123> Matt|home: also the way a pointer works, for example, int * foo;     is it has an address, and a value (as with any other variable in C)
[20:11:37] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[20:11:57] <smallville7123> lets assume this "foo" is assigned to the address 0x32523552 and has a value of 0x435232356
[20:12:21] <koollman> constxo: https://www.di.fm/goapsy sometimes I listen to this
[20:12:22] <candide> Title of koollman's link: Goa-Psy Trance Radio - DI.FM | addictive electronic music
[20:12:41] <constxo> based
[20:12:53] <koollman> repetitive rythms, generally nothing breaking my focus
[20:13:07] <smallville7123> when you do *foo or foo[0], you are asking the computer to take whatever  value is currently at address 0x32523552, which is 0x435232356, and then interperate this as an address instead of a value
[20:13:10] <constxo> gonna try it out
[20:13:36] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[20:13:50] <smallville7123> so then it will attempt to read the address 0x435232356 and then obtain the value that is at this address
[20:14:28] <smallville7123> wether this address can be read or not depends on many factors such as paging, virtual memory, mmap's, allocations, and others
[20:14:50] *** Joins: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869)
[20:14:53] <smallville7123> if it CANNOT be read then it will usually crash
[20:15:27] <smallville7123> when you have int ** foo then this process just repeats itself for however many * you have
[20:15:41] <koollman> constxo: they have a lot of other choices, but this one is still my preferred. I've been using it for ~18 years or so
[20:15:52] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:74ef:f1b6:d77e:66a2)
[20:16:00] <constxo> koollman: this website has existed for 18 years?
[20:16:21] <koollman> constxo: it started in 1999
[20:16:26] <smallville7123> eg if you do **foo or foo[0][0] or *foo[0] it will take the value at address 0x435232356 and interperate that value as an address and then try to obtain the value at that address
[20:16:34] *** Quits: alch (~alch@151.36.15.62) (Read error: Connection reset by peer)
[20:17:26] <constxo> very based
[20:18:03] <smallville7123> for example, lets say the complete chain is 0x32523552=0x435232356, 0x435232356=0x0       the address is 0x32523552, it's value is 0x435232356, interperate this value as an address, the address is 0x435232356, its value is 0x0
[20:19:05] <smallville7123> if you have *** and you attempt to dereference three times, then it will do     the address is 0x0, SEGV (attempting to dereference NULL)
[20:20:47] <smallville7123> or if 0x435232356 CANNOT be read, then maybe     the address is 0x435232356, (SIGBUS?)      depending on the location it is attempting to access
[20:21:43] *** Joins: alch (~alch@151.38.80.124)
[20:21:44] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[20:23:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:23:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:24:14] *** Quits: tejr_ (~tejr@user/tejr) (Remote host closed the connection)
[20:24:28] <smallville7123> oh sqrt left
[20:24:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:24:35] <smallville7123> welp https://www.geeksforgeeks.org/segmentation-fault-sigsegv-vs-bus-error-sigbus/ :)
[20:24:40] *** Joins: sonny (~sonny@8.6.144.252)
[20:24:46] *** Joins: tejr (~tejr@user/tejr)
[20:27:51] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:27:59] *** Quits: LanDi (~landi@177.37.146.152) (Quit: Leaving)
[20:28:11] *** Joins: UsbSick (~UsbSick@2600:6c48:757f:e654:a863:efc5:fd1:1de4)
[20:29:08] *** Joins: monkey_ (~user@190.104.116.153)
[20:31:16] *** Joins: LanDi (~landi@177.37.146.152)
[20:31:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:31:48] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:32:35] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:33:36] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[20:36:17] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[20:37:33] *** Joins: magla (~gelignite@55d41339.access.ecotel.net)
[20:39:18] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[20:40:12] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:40:20] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[20:43:52] *** Joins: slidercrank (~slidercra@user/slidercrank)
[20:44:29] *** Joins: de-facto (~de-facto@user/de-facto)
[20:46:06] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[20:46:08] *** Joins: mahmutov_ (~mahmutov@5.176.55.39)
[20:46:14] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[20:48:39] *** Quits: mahmutov (~mahmutov@37.155.72.129) (Ping timeout: 256 seconds)
[20:48:39] *** Quits: xse (~xse@user/xse) (Ping timeout: 256 seconds)
[20:48:44] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:49:05] *** Joins: xse (~xse@user/xse)
[20:52:38] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[20:52:38] *** Quits: xSavitar (~xSavitar@user/xsavitar) (Quit: Leaving...)
[20:53:18] *** Joins: xSavitar_ (~xSavitar@kinserve.com)
[20:53:19] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[20:53:32] *** xSavitar_ is now known as xSavitar
[20:53:33] *** Joins: analognoise1 (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[20:53:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[20:53:43] *** Quits: xSavitar (~xSavitar@kinserve.com) (Changing host)
[20:53:43] *** Joins: xSavitar (~xSavitar@user/xsavitar)
[20:54:49] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[20:54:56] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Client Quit)
[20:57:53] *** Quits: analognoise (~analognoi@185.202.221.238) (Ping timeout: 268 seconds)
[20:58:24] *** Joins: bbju (~bbju@103.144.149.220)
[20:58:25] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:58:40] *** Joins: analognoise (~analognoi@91.196.220.236)
[21:02:15] *** Quits: analognoise1 (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Ping timeout: 256 seconds)
[21:04:08] *** Joins: Akuli (~Akuli@82-203-162-28.bb.dnainternet.fi)
[21:05:04] *** Quits: Akuli (~Akuli@82-203-162-28.bb.dnainternet.fi) (Client Quit)
[21:05:29] *** Joins: Akuli (~Akuli@82-203-162-28.bb.dnainternet.fi)
[21:07:07] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:13:27] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:13:35] *** Quits: moog (~moog@107.126.53.224) (Read error: Connection reset by peer)
[21:14:09] *** Quits: zensei (~zensei@user/zensei) (Ping timeout: 256 seconds)
[21:14:15] *** Joins: moog (~moog@107.126.53.224)
[21:18:08] *** Joins: Betal (~Betal@user/betal)
[21:20:49] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[21:21:13] *** Joins: novns (~novns@user/novns)
[21:23:50] *** Joins: Akiva (~Akiva@user/Akiva)
[21:28:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:29:38] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 260 seconds)
[21:29:56] <smallville7123> if a function-like macro is expanded, is it only the parameter's that are not further expanded?
[21:31:25] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[21:32:45] <smallville7123> for example, in "#define x y 1\n #define y x 2 \n #define foo(x) x\n foo(x)"  "foo(x) x" is first expanded to whatever "x" is for the paramater, and then "x" is no longer expanded even if there is a normal definition of the same name as the parameter name?
[21:34:24] <smallville7123> eg foo(x) -> replace "x" with "x 2 1" -> "x" is not expanded further -> foo(x 2 1) -> replace "x" with "x 2 1" -> "x" is not expanded further -> "x 2 1"
[21:35:28] *** Quits: jaeckel (~jaeckel@sleipnir.jaeckel.eu) (Remote host closed the connection)
[21:36:30] <smallville7123> and foo(y) -> replace "y" with "y 1 2" -> "y" is not expanded further -> foo(y 1 2) -> replace "x" with "y 1 2" -> "y" is not expanded further? -> "x 2 1"
[21:36:46] <smallville7123> -> "y 1 2" *
[21:36:54] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[21:37:17] *** Quits: mahmutov_ (~mahmutov@5.176.55.39) (Ping timeout: 240 seconds)
[21:37:40] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[21:38:20] *** Quits: LanDi (~landi@177.37.146.152) (Remote host closed the connection)
[21:38:59] *** Joins: jaeckel (~jaeckel@sleipnir.jaeckel.eu)
[21:39:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:39:12] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-037.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:40:44] <smallville7123> or is only the top level paramater not further expanded?
[21:40:57] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:41:18] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[21:41:21] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[21:41:26] <smallville7123> eg in "foo(x)", "x" is not further expanded, but "y" is even though "x" expands to "y" which expands to "x"
[21:42:26] <smallville7123> (only way i can think of that yeilds "y 1 2 y 1 2" in "#define foo(x) x y \n foo(y)"
[21:42:28] *** Joins: analognoise1 (~analognoi@2600:8801:8c26:9e00:9810:dcc2:3d73:bd7a)
[21:43:52] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Quit: Leaving)
[21:44:07] *** Joins: Dotz0cat (~Dotz0cat@173.186.193.207)
[21:45:21] <Smilex> When getting monotonic time from clock_gettime, do you guys ever worry about the timer "wrapping" back to zero because sufficient time has elapsed? I'm wondering if I need to handle this case for an app that might run for several days, if not months
[21:46:07] *** Quits: analognoise (~analognoi@91.196.220.236) (Ping timeout: 250 seconds)
[21:46:24] <smallville7123> use a timer that returns time in nanoseconds, preferably as uint64 if possible
[21:46:32] <smallville7123> clock*
[21:46:36] <Smilex> clock_gettime does that
[21:47:16] <smallville7123> int clock_gettime(clockid_t clk_id, struct timespec *tp);
[21:47:21] <Smilex> but it says it starts from an "unspecified time", so can I rely on it to not be close to overflow?
[21:47:34] *** Joins: analognoise (~analognoi@23.105.41.153)
[21:47:53] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[21:49:59] <smallville7123> Smilex: try this https://stackoverflow.com/a/39439405
[21:50:57] *** Quits: analognoise1 (~analognoi@2600:8801:8c26:9e00:9810:dcc2:3d73:bd7a) (Ping timeout: 240 seconds)
[21:51:08] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:52:00] <smallville7123> note that uint64_t is large enough to hold time in nanoseconds up to 500+ years
[21:52:09] <Smilex> oh
[21:52:31] <Smilex> do you know how long u32 lasts?
[21:52:48] <smallville7123> nope
[21:53:23] <smallville7123> think its around 3 years max?
[21:53:26] <smallville7123> not sure
[21:54:24] <Smilex> anyway I'm in tty, and struggle to copy your link. I'm just gonna trust it for now
[21:56:39] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[21:57:42] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[21:58:02] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[21:58:50] *** Joins: meator (~meator@user/meator)
[21:59:17] <smallville7123> Smilex: then in short     struct timespec spec;   clock_gettime(CLOCK_REALTIME, &spec);    uint64_t ns = (uint64_t) spec.tv_sec * BILLION + (uint64_t) spec.tv_nsec; 
[21:59:33] *** Quits: sicelo_ (~sicelo@user/sicelo) (Quit: Bye!)
[21:59:50] *** Joins: beencubed (~beencubed@209.131.238.248)
[22:01:08] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:01:19] *** Joins: sicelo_ (~sicelo@ip170.ip-141-95-83.eu)
[22:01:19] *** Quits: sicelo_ (~sicelo@ip170.ip-141-95-83.eu) (Changing host)
[22:01:19] *** Joins: sicelo_ (~sicelo@user/sicelo)
[22:01:53] *** Joins: mahmutov_ (~mahmutov@5.176.61.200)
[22:02:37] <twkm> ewww, uintN_t.
[22:05:32] *** Quits: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[22:05:48] <smallville7123> twkm: lol
[22:06:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[22:06:57] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 240 seconds)
[22:08:17] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 240 seconds)
[22:08:37] *** Joins: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374)
[22:09:30] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:11:35] *** Joins: monkey_ (~user@190.104.116.153)
[22:11:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:12:53] *** Joins: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[22:13:12] <retro> can C be used as a functionally paradigm language
[22:13:32] <retro> surley you can just nest functions
[22:13:50] <retro> if() for() while() do() else()
[22:14:03] <retro> printf() scanf() return() etc
[22:14:21] <pragma-> standard C doesn't allow nested functions or naming functions after keywords. gcc allows nested functions as an extension.
[22:14:33] <retro> so make them uppercase
[22:14:40] <retro> I mean nest function calls
[22:14:49] <pragma-> apple blocks and other similiar extensions/libraries can provide closures
[22:15:17] <retro> idk what closures are
[22:15:54] <retro> im not sure how functional programming is its own thing
[22:16:51] <retro> can someone explain that
[22:17:09] <nomagno> The only thing I am missing in C is honestly the ability to give struct members a specific value to be initialized with
[22:18:03] <pragma-> nomagno: one typically does that by providing a struct_init()/struct_create() function
[22:18:27] <pragma-> a constructor
[22:18:29] <retro> myStruct _m1 = {0};
[22:18:56] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[22:19:00] <pragma-> retro: I suspect he's talking more about something like struct foo { int thing = 42; }; to provide a default value 42 for all instances of struct foo.
[22:19:49] <pragma-> which would be kind of nice to have.
[22:19:56] <pragma-> of course you could initialize it explicitly.
[22:19:57] <retro> statically? yes
[22:20:21] <nomagno> pragma- Well the issue is constructors are annoying
[22:20:27] *** Joins: sonny (~sonny@8.6.144.252)
[22:20:37] <nomagno> Also, I have an idea
[22:21:43] <pragma-> in that same vein, default arguments to functions, int func(int a, int b = 42, char *s = "foobar") {}, would be nice to have too.
[22:21:52] <nomagno> struct foo mystruct = { .val1 = 2, .val2 = 3}; mystruct = (struct foo){ .val2 = 4};
[22:21:57] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[22:22:08] <nomagno> Is mystruct.val1 guaranteed to remain 2 here?
[22:22:23] <retro> struct foo { foo() { thing = 42; }, int thing; }
[22:22:57] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 240 seconds)
[22:23:36] <pragma-> nomagno: no
[22:24:55] <pragma-> (struct foo){ .val2 = 4 } creates an anonymous struct foo with val2 initialized to 4 and any remaining uninitialized members initialized as if they were static
[22:25:06] <retro> nomagno  constructors are also less efficiant
[22:25:25] <pragma-> the "uninitialized" members don't become holes that aren't assigned
[22:26:26] <retro> cant you use #define with paramaters that expand to suff, to build a bunch of structs
[22:26:27] <nomagno> I guess I can have a constructor that takes a pointer to struct foo
[22:26:38] <nomagno> Seems like most efficient option, anyways
[22:26:40] <retro> #define STRUCT(X) struct X
[22:27:20] <nomagno> Or even a monster constructor that takes an enum with the type specifier, and a void pointer
[22:27:43] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[22:28:35] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[22:28:38] <retro> MyFart mf = { .pitch = 42; .flap = 2.5; };
[22:29:07] <retro> this may require STD99
[22:29:45] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[22:29:48] <retro> yeah -std=c99
[22:30:01] *** Joins: tejr (~tejr@user/tejr)
[22:30:34] <retro> __default__ should work on structs maybe not just functions
[22:32:15] <retro> is it _default_ default or __default__ for the latest C version
[22:32:29] <retro> one is c++ I think
[22:32:35] *** Joins: vin (~vin@user/crash)
[22:33:01] <vin> Is there a way to verify if pthreads are created by a program on linux?
[22:33:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[22:37:09] <vin> `pgrep -xw <program> | wc` is the only way?
[22:37:27] <nomagno> Does the standard say anything about redeclaring standard functions when you don't include the header in question?
[22:38:44] *** Quits: terminalpusher (~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12) (Remote host closed the connection)
[22:39:18] *** Joins: terminalpusher (~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12)
[22:40:33] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[22:43:57] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[22:45:02] <floatcomplex> vin: strace
[22:45:05] *** Quits: Haxxa (~Haxxa@202-130-211-204.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:14] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 252 seconds)
[22:47:18] *** Quits: monkey_ (~user@190.104.116.153) (Quit: ERC (IRC client for Emacs 27.2))
[22:47:21] *** Joins: Haxxa (~Haxxa@202-130-211-204.ip4.superloop.com)
[22:47:47] *** Joins: monkey_ (~user@190.104.116.153)
[22:50:40] <apotheon> nomagno: I don't recall it saying anything about that.
[22:50:43] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[22:51:22] <savy_> vin: under linux maybe /proc/$pid/task/
[22:52:35] *** Joins: Charadon (~Charadon@155.138.164.183)
[22:54:13] *** Joins: mimmy (~mimmy@69.174.8.146)
[22:55:57] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[22:58:44] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:00:10] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[23:02:38] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:02:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[23:02:57] <fizzie> nomagno: apotheon: It does say a thing about that, namely that it's allowed as long as you are able to declare the function without referring to types in the header.
[23:02:59] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[23:03:31] <fizzie> C11 7.1.4p2: "Provided that a library function can be declared without reference to any type defined in a header, it is also permissible to declare the function and use it without including its associated header."
[23:03:36] <bionade24> Hi, pkg-config can't find libatomic. Do I not have to link against it sine it's gcc builtin?
[23:05:46] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 245 seconds)
[23:06:10] *** Quits: xSavitar (~xSavitar@user/xsavitar) (Remote host closed the connection)
[23:06:18] <apotheon> Is that more of a ##workingset or #gcc question?
[23:06:29] <apotheon> (I'm guessing at the #gcc channel name.)
[23:06:37] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Client Quit)
[23:06:58] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[23:07:14] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Client Quit)
[23:07:35] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[23:07:38] <apotheon> /msg alis list *#gcc*
[23:07:46] <apotheon> . . . reports that it's #gcc after all.
[23:09:52] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[23:13:02] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[23:15:24] *** Joins: sonny (~sonny@8.6.144.252)
[23:15:51] *** Quits: sonny (~sonny@8.6.144.252) (Client Quit)
[23:16:24] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:16:25] *** Joins: d3r1ck (~xSavitar@154.72.153.206)
[23:18:01] *** Quits: d3r1ck (~xSavitar@154.72.153.206) (Client Quit)
[23:18:19] *** Joins: Guest7170 (~xSavitar@kinserve.com)
[23:18:23] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[23:18:42] *** Quits: Guest7170 (~xSavitar@kinserve.com) (Changing host)
[23:18:42] *** Joins: Guest7170 (~xSavitar@user/xsavitar)
[23:19:16] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[23:19:59] *** Parts: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) ()
[23:21:01] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[23:21:16] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[23:23:34] *** Quits: rany (~rany@user/rany) (Quit: The Lounge - https://thelounge.chat)
[23:23:47] *** Joins: rany (~rany@user/rany)
[23:24:53] <seninha> I think I'm using poll(3) wrong here, can someone check this snippet? https://0x0.st/-Cd7.c
[23:24:53] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[23:25:18] <seninha> *poll(2)
[23:25:24] <seninha> it is not entering the poll loop.
[23:26:03] <seninha> but I do not know why
[23:27:42] *** Quits: darkstarx (~darkstard@50.39.115.145) (Quit: Leaving)
[23:27:43] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[23:28:45] *** Quits: monkey_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[23:31:00] *** Quits: Darkcoal (~user@143.92.183.183) (Quit: Darkcoal)
[23:35:01] *** Joins: Klinda (~superleag@user/klinda)
[23:38:39] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[23:40:40] *** Joins: Guest3089 (~anon@iskon3223.duo.carnet.hr)
[23:43:29] *** Joins: vicfred (~vicfred@user/vicfred)
[23:44:59] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 252 seconds)
[23:50:10] *** Quits: constxo (~brad@142.134.38.68) (Quit: WeeChat 2.8)
[23:50:36] *** Joins: rgrinberg (~textual@2806:101e:1:83af:75fb:59a:2ee:28fe)
[23:51:26] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[23:52:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[23:53:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[23:59:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
