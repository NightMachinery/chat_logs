[00:00:07] <sokan> I really need to read up on while
[00:00:18] *** Joins: stonkey (~stonkey@user/stonkey)
[00:00:25] <nomagno> Or, well `grep '^ATOM' file > newfile`
[00:00:29] <caze> sokan: I think you need to read up on types.
[00:00:31] *** Quits: sdfgsdfgds (~sdfgsdfgd@46.235.96.249) ()
[00:00:38] <sokan> that too :P
[00:00:49] <sokan> fizzie: why 82 and not 81?
[00:00:55] <sokan>  /n included?
[00:00:57] <caze> sokan: Do you know what fgets returns if the end of file has not been reached?
[00:01:03] *** Quits: stonkey (~stonkey@user/stonkey) (Max SendQ exceeded)
[00:01:13] <sokan> caze: nothing?
[00:01:17] <rsjw> 80 chars + \n to \0 = 82
[00:01:24] <rsjw> s/to/+/
[00:01:28] <sokan> rsjw: thought as much.
[00:01:29] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:01:30] <sokan> thanks
[00:01:41] *** Joins: stonkey (~stonkey@user/stonkey)
[00:01:44] <caze> sokan: It's not possible for fgets to return something in one intance, and nothing in another instance.
[00:02:01] *** Quits: ko (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying 0->R->R^2->0)
[00:02:06] <caze> sokan: fgets is declared to return a value of type char *.
[00:02:17] *** Quits: stonkey (~stonkey@user/stonkey) (Max SendQ exceeded)
[00:02:25] <caze> sokan: This means that every single call to fgets must return a char * value, no exceptions.
[00:02:25] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[00:02:37] <caze> sokan: This is how typed languages work.
[00:03:00] <rsjw> it's how statically typed languages work. can't dynamically typed do that?
[00:03:00] *** Quits: rgrinberg (~textual@2806:101e:7:2b:35cd:febc:a65a:3a4f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:03:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[00:03:29] <caze> sokan: It can't return "nothing", and it cannot return say, an integer (which is what EOF is).
[00:03:31] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[00:03:39] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:04:05] <nomagno> yes, NULL is used to indicate end of file in this case with fgets
[00:04:11] *** kl1n3 is now known as kline
[00:05:19] <rsjw> NULL can indicate error too, you'd have to call feof or ferror to figure out which it is
[00:06:07] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:06:08] *** Joins: nicode (~nic@2607:f2c0:9479:8500:1518:aee1:e163:8981)
[00:06:22] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-85b6-f2b4-35d4-321f.res6.spectrum.com)
[00:06:23] <caze> sokan: And if you actually read the documentation for fgets, it also says this.
[00:06:28] <nomagno> rsjw: At which point you'd probably fall asleep reading through your own code, but yeah it can mean multiple things
[00:06:39] <caze> ,c11 7.21.7.2p3
[00:06:40] <candide> http://www.iso-9899.info/n1570.html#7.21.7.2p3 [The fgets function] returns s if successful. If end-of-file is encountered and no characters have been read into the array, the contents of the array remain unchanged and a null pointer is returned. If a read error occurs during the operation, the array contents are indeterminate and a null pointer is returned.
[00:06:42] <sokan> caze: thanks for clarifying it. Really :)
[00:07:20] <rsjw> nomagno: you can save on sleeping pills that way
[00:07:37] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[00:07:47] <nomagno> I always find these random undefined behaviour edge cases unsettling
[00:07:54] <sokan> caze: I had no idea that EOF was an integer either
[00:08:00] <nomagno> In line with "trust the programmer", but also make me very paranoid
[00:08:55] <nomagno> sokan: You want to have both the relevant headers, the preprocessor, and the standard at hand
[00:09:12] <rsjw> a NULL return from fgets meaning EOF or error isn't undefined behavior. it's very plainly defined
[00:09:14] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[00:09:21] <nomagno> Also you can kinda figure it out by looking at examples
[00:09:45] <nomagno> If a scalar is compared with EOF, good chance EOF is also a scalar
[00:10:10] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-85b6-f2b4-35d4-321f.res6.spectrum.com) (Client Quit)
[00:10:13] <caze> Not if you don't understand types.
[00:10:54] <nomagno> rsjw: was referring to the fact the contents of the array are undefined with error is encountered
[00:11:25] *** Joins: nyah (~nyah@94.6.71.219)
[00:11:26] <rsjw> oh ok. well it kind of makes sense... fgets may have written only part of the string
[00:11:27] <caze> They're indeterminate.
[00:12:06] <nomagno> Undefined, according to the standard itself
[00:12:14] <sokan> is it possible to use len("ATOM") instead of 4?
[00:12:53] <caze> nomagno: I just quoted the standard where it says it's indeterminate.
[00:13:02] <nomagno> sokan: strlen("ATOM")
[00:13:15] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[00:13:17] *** Quits: Guest143332 (~Guest1433@77.69.70.40) (Ping timeout: 240 seconds)
[00:13:25] <nomagno> caze: How the heck did I read undefined there!?
[00:13:35] <nomagno> Oopsie
[00:13:40] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[00:13:45] <rsjw> sokan: you mean strlen("ATOM")? it depends on where you use it. you can't put it as the size of an array when declaring it: char string[strlen("ATOM")]; because the bit in the brackets needs to be a constant expression. but you could use it in other places
[00:13:56] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[00:14:20] <sokan> and one final question for this program: sizeof(foobar) is different from sizeof foober?
[00:14:30] <rsjw> function calls are not considered constant expressions because a function call is a runtime thing
[00:14:39] <caze> You can do char string[strlen("ATOM")]; as long as it's not in file scope.
[00:15:04] <rsjw> caze: not in ANSI C though
[00:15:23] *** Joins: Guest143332 (~Guest1433@77.69.70.40)
[00:15:35] <rsjw> and not as parameters of functions
[00:15:51] <nomagno> C99 is common enough
[00:16:04] <nomagno> ... Microsoft would disagree, but we say no to Microsoft
[00:16:06] <caze> rsjw: Do you use // comments?
[00:16:07] <rsjw> maybe it is, maybe it's not
[00:16:25] *** Quits: Guest143332 (~Guest1433@77.69.70.40) (Client Quit)
[00:16:26] *** Joins: youssef (~youssef@26.173.112.78.rev.sfr.net)
[00:16:28] <rsjw> caze: I tend to use /* */ but I am not above using // if I feel like it
[00:16:38] <nomagno> The reasoning for VLAs not being a thing in MSVC is literal bs
[00:16:50] <nomagno> I never use //
[00:17:01] <nomagno> Annoying behaviour IMO
[00:17:45] <nomagno> C++_comment: //.+$
[00:17:46] <nomagno> C_comment: /\*.+\*/
[00:18:12] <caze> rsjw: You can use VLAs anywhere you can use // comments.
[00:18:12] <nomagno> C has better defined delimiters
[00:19:02] <rsjw> caze: I highly doubt that's true. I'm pretty sure there are more-or-less ANSI C compilers out there that support // but not VLAs
[00:19:05] *** Joins: Guest143332 (~Guest1433@77.69.70.40)
[00:19:05] *** Quits: Guest143332 (~Guest1433@77.69.70.40) (Read error: Connection reset by peer)
[00:19:23] <nomagno> Anyone agree a power operator would be nice?
[00:19:26] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[00:19:42] <rsjw> nomagno: your C++ comment regex won't catch empty comments... maybe //.*$ instead
[00:19:52] *** Joins: youssef_ (~youssef@26.173.112.78.rev.sfr.net)
[00:19:53] <nomagno> q**3 -> q*q*q, but nicer
[00:20:09] *** Parts: youssef (~youssef@26.173.112.78.rev.sfr.net) (Leaving)
[00:20:12] <caze> rsjw: Perhaps as extensions, but then you're not really talking about C compilers anymore.
[00:20:22] <rsjw> same with the C comments... /\*.*\*/
[00:20:25] *** Quits: youssef_ (~youssef@26.173.112.78.rev.sfr.net) (Client Quit)
[00:20:44] <rsjw> caze: of course we're talking about C compilers. why would you think we're not?
[00:20:50] *** Joins: youssef (~youssef@26.173.112.78.rev.sfr.net)
[00:21:03] <cryptonector> nomagno: problem is that for integral types the risk of overflow is high, and for floating point types there already is a pow() and pow10()
[00:21:07] <nomagno> C99 is C
[00:21:23] <caze> rsjw: Do you consider gnu89 to be C?
[00:21:54] *** Joins: Guest143332 (~Guest1433@77.69.70.40)
[00:22:09] <rsjw> caze: I don't consider gnu89 to be standard C, but I consider the compiler that compiles gnu89 code to be a C compiler
[00:22:41] <nomagno> Floating points being a native type in C doesn't really convince me
[00:22:44] <rsjw> and I consider gnu89 a dialect of C
[00:22:46] <nomagno> I mean, it is useful
[00:23:12] <rsjw> I also consider standard C to be a dialect of C
[00:23:48] <nomagno> But it is like, literally just the ONLY deviation from the elegant {char, int, struct, union, ptr, array, function} type system
[00:24:04] <nomagno> Useful but has a bit of friction
[00:25:24] <mcf> c11 supports // comments, but not necessarily VLAs since they are optional
[00:25:30] *** Parts: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) ()
[00:25:51] <nomagno> It's like floats are the only type with limited usefulness, specially now that signed integer arithmetic is fully defined with C2x
[00:25:57] *** Quits: Guest143332 (~Guest1433@77.69.70.40) (Ping timeout: 240 seconds)
[00:26:12] <nomagno> Their usefulness is in being fast, I guess
[00:26:44] <omegatron> that's the deal - you loose your sanity and get speed
[00:26:57] <cryptonector> VLAs and alloca() should not be optional, damn it
[00:27:50] <cryptonector> well, ok, VLAs should be, because you can have a C whose runtime puts all function frames on the heap, and we don't want syntactic features to impose on the runtime heap allocator
[00:27:58] <nomagno> Microsoft Disagrees TM
[00:28:00] <cryptonector> fine, nvm
[00:28:13] <cryptonector> there's an alloca on WIN32
[00:28:23] <rsjw> caze: do you consider K&R C to be C?
[00:28:27] *** Joins: pingpongball (~pingpongb@27.34.47.94)
[00:28:34] <pingpongball> Hey C guys
[00:29:01] <pingpongball> How to check where will compiled programs stored when using `make install` ?
[00:29:14] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[00:29:23] <omegatron> check your Makefile
[00:29:23] <sham1> You don't
[00:29:32] <pingpongball> If it is that Makefile, which one?
[00:29:34] <sham1> Also ##workingsets or whatever it's called
[00:29:35] <cryptonector> that's not a C question
[00:29:48] <pingpongball> oh ok
[00:29:51] <rsjw> make -n install
[00:30:09] <omegatron> read the man page of page for a list of candidate files it tries
[00:30:13] <omegatron> of make
[00:30:13] <cryptonector> pingpongball: _typically_ you can make DESTDIR=/tmp/whatever install
[00:30:19] <caze> rsjw: Not really.
[00:30:26] <cryptonector> but if you don't trust it, don't do it
[00:30:35] *** Joins: coruja (~coruja@user/coruja)
[00:30:38] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[00:30:54] <rsjw> caze: are you of the opinion that C89 was the first C?
[00:30:54] <pingpongball> aumm I'm compiling this preconfigured suckless terminal  https://github.com/lukesmithxyz/st
[00:30:55] <candide> Title of pingpongball's link: GitHub - LukeSmithxyz/st: Luke's fork of the suckless simple terminal (st) with vim bindings and Xresource compatibility.
[00:31:22] <caze> rsjw: From the pov of standardization, yes.
[00:31:26] *** Joins: meator (~meator@user/meator)
[00:31:26] *** Quits: coruja (~coruja@user/coruja) (Client Quit)
[00:31:37] <cryptonector> pingpongball: there's also the docs -- read them
[00:31:39] * APic laughs magically.
[00:32:07] <caze> K&R C although authoritative at the time, didn't have the same sort of codification.
[00:32:23] <caze> No version of C did at the time.
[00:32:39] <caze> So I don't consider gnu89 to be C.
[00:32:58] <rsjw> really? because K&R1 read a lot like the ANSI standard, at least the "reference" part of "tutorial and reference"
[00:33:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[00:33:29] <caze> rsjw: Care to be more specific?
[00:33:36] <nomagno> C99 is a huge usefulness bump compared to C89 for freestanding implementations
[00:33:47] <nomagno> Which is why I consider it my personal bare minimum
[00:33:50] *** Joins: coruja (~coruja@user/coruja)
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:59] *** Quits: coruja (~coruja@user/coruja) (Client Quit)
[00:36:30] *** Joins: coruja (~coruja@user/coruja)
[00:36:33] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[00:36:56] *** Quits: pingpongball (~pingpongb@27.34.47.94) (Quit: Client closed)
[00:37:05] <rsjw> caze: appendix A in K&R1 has the grammar and a fair bit of technical exposition that seems to me to be similar to ANSI C documents, which is not very surprising considering that that part of K&R was meant to be used as a reference
[00:37:39] <rsjw> looking at it again, it seems there is less of it than I thought, but it's still there
[00:39:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[00:39:48] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:5de6:1c42:8396:cb23)
[00:42:19] <rcf> It's definitely C, though whether it is good C by today's standards is often another matter
[00:42:27] *** Quits: Narrat (~omnius@p200300df5f0d7b8106ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[00:42:49] *** Quits: iomari891 (~iomari891@105.112.138.38) (Remote host closed the connection)
[00:44:21] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:44:31] <jgart> can someone point out the error in this Makefile?
[00:44:32] <jgart> https://bpa.st/QNQQ
[00:44:56] <jgart> it is a Makefile for this repo: https://github.com/klampworks/roman-to-kana
[00:45:06] <nomagno> C's typing is really curious, because it manages to say pretty much nothing while saying pretty much anything
[00:45:21] <jgart> The error I get is the following:
[00:45:23] <jgart> make: *** No rule to make target 'roman-to-kana', needed by 'all'.  Stop.
[00:45:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:45:37] <fizzie> jgart: The source file is named roman_to_kana, not roman-to-kana.
[00:46:02] <fizzie> The implicit rule to make an executable `foo` from `foo.c` only works if `foo` is an exact match.
[00:46:11] <rsjw> in my experience, "today's standards" have a lot of bias in them that often aren't technical arguments (or are irrelevant technical arguments) so I'd take that with a few grains of salt
[00:46:41] <nomagno> C types are: {different sizes of unsigned/ints}, pointer?, array?, function?
[00:46:54] <nomagno> Then you group them together to form new types
[00:46:59] <nomagno> Very elegant
[00:47:25] <jgart> fizzie, hahahaha thanks for pointing that out!
[00:47:30] <jgart> I was blind
[00:47:36] <jgart> but now I'm found
[00:47:50] <pragma-> C's type system is a weak sloppy mess.
[00:48:17] <nomagno> pragma-: Because it acknowledges data is just data, and types serve a practical purpose
[00:50:52] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[00:58:01] *** Quits: cosimone (~user@93-47-229-195.ip115.fastwebnet.it) (Remote host closed the connection)
[01:00:46] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:03:17] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[01:03:31] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:07:44] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:09:18] *** Quits: alch (~alch@to-18-90-201.service.infuturo.it) (Ping timeout: 256 seconds)
[01:11:11] *** Joins: alch (~alch@mi-18-34-82.service.infuturo.it)
[01:11:33] *** Quits: youssef (~youssef@26.173.112.78.rev.sfr.net) (Quit: Leaving)
[01:11:51] *** Joins: youssef (~youssef@26.173.112.78.rev.sfr.net)
[01:13:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[01:13:38] <sham1> Well, the data can have all kinds of interesting things about it, like algebrae and relations
[01:13:46] *** Joins: cosimone (~user@93-47-229-195.ip115.fastwebnet.it)
[01:15:08] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[01:17:03] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[01:18:19] *** Joins: skapata (~Skapata@user/skapata)
[01:19:02] *** youssef is now known as ys
[01:19:12] *** ys is now known as _ys
[01:19:30] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 256 seconds)
[01:23:22] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[01:24:48] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:24:58] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[01:26:12] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[01:26:35] <Macuser> I need some help. I'm trying to use fgets() to read a CSV line by line, but I want to use some counter variable to keep track of the line. Because this is happening inside a function and each time the function runs I want it to read/process the line then move to the next one when it runs the next time
[01:26:41] <Macuser> How do I go about doing this?
[01:27:11] *** Quits: Darkcoal (~user@130.164.146.159) (Quit: Darkcoal)
[01:27:28] <omegatron> make your counter variable 'static' might work (if I understand you correctly)
[01:27:44] *** Quits: malloy (~jimery@113.116.52.22) (Ping timeout: 250 seconds)
[01:27:45] <Macuser> i don't even know where the counter variables goes for fgets
[01:27:47] *** Quits: magla (~gelignite@55d4ea14.access.ecotel.net) (Quit: Stay safe!)
[01:27:57] *** Quits: malina (~malina@user/malina) (Ping timeout: 240 seconds)
[01:28:01] <omegatron> ?? well make one
[01:28:13] <Macuser> no I mean where does it fit in
[01:28:24] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[01:28:39] *** Joins: n3rdy1 (~n3rdy1@2a00:79e1:abc:1564:ccb7:9ff4:1442:61e5)
[01:28:52] <omegatron> ... can you show us your code .. ?
[01:29:13] <Macuser> sure
[01:29:17] <omegatron> otherwise we might think about two different things
[01:29:28] <Macuser> i removed it from the while loop at the moment
[01:29:30] <sokan> Reasking (I didn't read an answer :P) sizeof(foobar) is different from sizeof foober?
[01:29:51] <Macuser> https://bpa.st/6X2A
[01:29:57] *** Joins: malloy (~jimery@116.30.223.163)
[01:30:17] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:30:27] <sham1> sokan: no
[01:31:28] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[01:33:02] <omegatron> Macuser: I get the feeling, it would be helpful to see the complete file
[01:33:11] <Macuser> not really lol
[01:33:25] <Macuser> if you want I could show the complete function
[01:33:36] <omegatron> or the complete function ..
[01:35:00] <Macuser> https://bpa.st/UWUA
[01:35:01] <omegatron> besides, use of fgets() is common enough, that you might find via google or on github a lot of source code of actually working software, to check, how they do it
[01:35:57] <Macuser> yeah they use a while loop
[01:36:02] <Macuser> but that reads the whole file at once
[01:36:08] <Macuser> I need to do it only once every time the function runs
[01:36:23] <Macuser> one line per function call
[01:36:35] <omegatron> I see
[01:37:06] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[01:38:02] <omegatron> but your function terminates in lines 17-22 in any case - I guess  that's only test code ?
[01:38:26] <Macuser> that's right
[01:38:32] <Macuser> below 22 is not my code
[01:38:36] <Macuser> er below 24
[01:38:41] <omegatron> ah
[01:38:41] <Macuser> oops
[01:38:43] <Macuser> i see what you're saying
[01:39:01] <Macuser> i should move line 24 up above the if/else
[01:39:04] <Macuser> to reset the token variable
[01:39:07] <omegatron> does the file change its contents constantly ?
[01:39:11] <Macuser> wait no
[01:39:12] <Macuser> lol
[01:39:18] <Macuser> omegatron nope
[01:39:25] *** Quits: pippijn (~pippijn@ra.xinutec.org) (Quit: Segmentation fault)
[01:39:30] <Macuser> it's set to a bunch of lines that say TRUE/FALSE once each line
[01:39:35] <Macuser> fixed.
[01:39:44] <jgart> Hi, I'd like to rewrite this script in C: https://bpa.st/3CDA
[01:39:44] <omegatron> ok, and is it too large to read it whole ?
[01:39:57] <jgart> It takes as input a file like this: https://bpa.st/E5YA
[01:40:04] <Macuser> it probably will be pretty large
[01:40:19] <omegatron> hm, ok
[01:40:24] <jgart> and parses the times to calculate the total number of hours/minutes
[01:40:47] <jgart> as an exercises
[01:40:48] <omegatron> I can give you some sample code, which might work for you .. (will take some minutes)
[01:41:03] <Macuser> omegatron that would be great. I think it should be a simple fix
[01:41:16] <jgart> What library functions/constructs should I look into for getting started?
[01:41:19] <Macuser> you understand what I'm tryin to do now right?
[01:41:28] <omegatron> probably
[01:42:26] <sokan> fgets(char *s, int n, FILE *in): so fgets, reads the file in, chracter by character, for n characters and stores them in s?
[01:42:32] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[01:43:29] <jgart> sokan, cool
[01:43:36] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:43:37] <jgart> I'll start there
[01:43:49] <sokan> what?
[01:43:56] <sokan> jgart: no no.
[01:44:03] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:44:04] <sokan> I'm new in C as well :P
[01:44:33] <sokan> I was asking for knowledge (to clarify if I understand something correctly)
[01:44:36] <jgart> ha but I think you did answer my question unintentionally maybe
[01:44:54] <sokan> I had no idea you had asked something xD
[01:45:01] <jgart> i know now
[01:45:02] <jgart> ha
[01:45:16] *** Joins: PortableDave (~portabled@203.87.67.190)
[01:45:26] <jgart> the end result is the same for me though. I'll go start there nonetheless
[01:45:29] <jgart> THNX
[01:45:46] <sokan> yw :P
[01:45:47] <jgart> I need to open a file and read it in so...
[01:46:06] <jgart> wasn't sure how to do that
[01:46:50] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Client Quit)
[01:47:10] <sokan> jgart: http://dpaste.com/9VWTGSC4Y
[01:47:15] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:47:23] <sokan> this is a program I wrote to open a file and do some staff with it
[01:47:31] <jgart> thanks!
[01:47:33] <sokan> take a look. This might actually be helpful
[01:47:39] <jgart> that'll be helpful
[01:47:40] <jgart> yes
[01:47:43] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[01:47:45] <jgart> thnx
[01:47:53] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:48:14] <jgart> does that allow you to just give the file at the cli?
[01:48:26] <jgart> or you have to go through the prompt only?
[01:48:33] <jgart> I'll try compiling it
[01:49:33] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:49:48] *** Quits: PortableDave (~portabled@203.87.67.190) (Ping timeout: 250 seconds)
[01:50:14] *** Quits: n3rdy1 (~n3rdy1@2a00:79e1:abc:1564:ccb7:9ff4:1442:61e5) (Ping timeout: 268 seconds)
[01:50:16] *** Quits: Beastie (~lcu@user/thebeastie) (Read error: Connection reset by peer)
[01:50:18] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:50:44] <jgart> nm the question
[01:50:48] <sokan> ;)
[01:51:36] *** Joins: Beastie (~lcu@user/thebeastie)
[01:51:38] <jgart> what function can I use to give the file as arg at the terminal?
[01:51:44] <sokan> if you want to open a file from within the program you can " FILE *in; in = fopen("foo.bar", "r");
[01:51:44] <jgart> argv[1]?
[01:52:09] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:52:11] <sokan> I don't know the answer to what you just asked :(
[01:53:47] <jgart> I thinksomething like this: https://github.com/pflanze/utf-8-lineseparator/blob/4c23ebd561a509c0e2983ff82a2f8135d3ed0c9c/utf-8-lineseparator.c#L145
[01:53:47] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[01:53:53] <nomagno> <sham1> Well, the data can have all kinds of interesting things about it, like algebrae and relations
[01:53:59] <nomagno> This is precisely why we have types!
[01:54:11] <mcf> jgart: argv is an array of arguments to the program. argv[0] is the name of the executable, and argv[1] is indeed the first argument. but you should check that argc >= 2 before using argv[1]
[01:54:29] *** Joins: PortableDave (~portabled@203.87.67.190)
[01:54:40] <Macuser> sokan fgets reads whole lines. not characters
[01:55:04] <jgart> mcf, so, to check for any flags?
[01:55:16] <sham1> nomagno: indeed
[01:55:40] <nomagno> The reason why C has static typing is because data has type-dependent relations, and the reason why type punning is so easy is because sometimes you want the raw data
[01:55:54] <jgart> does any one happen to know any simple examples of argv and argc in a code base?
[01:56:09] <jgart> like hello world level stated simply
[01:56:26] <sham1> What do you mean by examples? Parsing the arguments?
[01:56:33] <jgart> maybe an exercise codebase for c would do
[01:56:37] <jgart> sham1, yup
[01:56:53] <jgart> just without a ton of complicated code around it
[01:57:09] <nomagno> I have simple codebase but it doesn't do any parsing
[01:57:12] <mcf> jgart: if you want to support flags, posix has getopt. for plain c, you'll have to do it yourself. i tend to use an arg.h with plan9-style ARGBEGIN ARGEND macros
[01:57:14] <jgart> complicated = code I don't understand yet
[01:57:16] <nomagno> It just takes first and second argument
[01:58:03] <jgart> mcf, do you have an example you can share of that in context?
[01:58:11] <jgart> from some extant code
[01:58:25] <jgart> it would be much appreciated
[01:59:35] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[01:59:36] <mcf> for getopt, there's an example in the specification: https://pubs.opengroup.org/onlinepubs/9699919799/functions/getopt.html#tag_16_206_06
[01:59:45] <jgart> cool! thnx
[02:00:40] <jgart> I probably just need argv[1] though for now
[02:00:43] <jgart> no flags
[02:01:22] <jgart> so I should be safe and make sure to ignore `argc >= 2`?
[02:01:39] <omegatron> Macuser:  https://bpa.st/HPYA   to get the general idea ..  initfunction(), then checkSatViz() as often as required and closefunction() at end ..
[02:01:53] <mcf> yeah. so you could just print a usage message and return 1 if argc != 2, then fopen(argv[1], "r")
[02:01:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:02:10] *** Joins: seninha (~seninha@user/seninha)
[02:02:28] <jgart> cool!
[02:02:35] <jgart> I'll try that first
[02:02:43] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[02:04:07] <Macuser> omegatron a little confused
[02:04:07] <omegatron> though, i'm still not 100% sure, if I understood it right
[02:04:29] <Macuser> I just want to do everything within the checkSatViz function
[02:04:33] <Macuser> make it super simple.
[02:04:37] <Macuser> I come from Python programming :/
[02:05:15] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[02:05:15] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Client Quit)
[02:06:02] <omegatron> .. and why has it then to be C ?
[02:06:44] <Macuser> because i'm integrating into an already written progrma
[02:06:52] <Macuser> called gps-sdr-sim
[02:06:56] <Macuser> gpssim.c
[02:07:12] *** Joins: rgrinberg (~textual@2806:101e:7:2b:8582:352:d913:c6a5)
[02:07:40] *** Quits: Akuli (~Akuli@213.216.211.215) (Quit: Akuli)
[02:07:54] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[02:08:33] *** Quits: Alhazred (~Alhazred@86.106.74.40) (Quit: leaving)
[02:08:45] <omegatron> if I would tell you, to make some variables 'static', you would certainly end up with a function, that's not free()-ing memory as it should .. I would expect at least some experience in C for someone to do this work
[02:08:47] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[02:09:11] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Client Quit)
[02:10:02] <Macuser> omegatron i have very limited :(
[02:10:07] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[02:10:17] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Client Quit)
[02:10:51] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[02:11:14] <Macuser> the length of each line will always be 4 characters
[02:11:16] <Macuser> so I could use fseek()
[02:11:39] <Macuser> keep incrementing by 4 or somethin
[02:11:46] <omegatron> is this some work which must be done in a hurry?
[02:11:58] <Macuser> not exactly
[02:12:01] <omegatron> C means you are in (almost total) control - but with that power comes also great responsibility - since I doubt you will find someone (in this channel) to do your work, I suggest you either learn C beforehand or give that task to someone, who can
[02:12:08] <Macuser> er i mean
[02:12:08] <Macuser> yes
[02:12:10] <Macuser> it does
[02:12:31] <Macuser> I may hand this task over to someone if he knows C
[02:12:43] <Macuser> if I can't then we have a backup plan
[02:12:55] <omegatron> otherwise, you can try to ask around, if someone would do it for you ..
[02:13:21] *** Quits: strajder (~strajder@user/strajder) (Quit: gn)
[02:14:13] <omegatron> I still don't get, why everything must be done in that function?  will that be a callback function for python bindings ?
[02:14:23] <Macuser> i just said that because of my limited experience
[02:14:38] <Macuser> nope, but we have a backup plan that uses python for kalman filtering
[02:14:43] <Macuser> I think..
[02:14:58] <Macuser> this is the problem with using something that wasn't intended to be used the way you're using it
[02:17:12] <Macuser> whole project is a train wreck.
[02:17:23] <omegatron> that's sad to hear
[02:18:13] <omegatron> are you talking about  https://github.com/osqzss/gps-sdr-sim ?
[02:18:15] <candide> Title of omegatron's link: GitHub - osqzss/gps-sdr-sim: Software-Defined GPS Signal Simulator
[02:19:07] <sokan> Macuser: and the int in fgets points to how many lines it reads?
[02:19:17] <Macuser> yes omegatron
[02:19:28] <Macuser> sokan no
[02:19:36] <Macuser> that's how many characters it reads in each line
[02:19:39] <Macuser> 500 max
[02:20:07] <sokan> fgets finally makes sense! Thanks :D
[02:20:11] <Macuser> lol np.
[02:20:21] <Macuser> feels weird helping someone with my severe lack of knowledge
[02:20:33] <caze> sokan: What about the documentation were you having trouble reading?
[02:20:50] <omegatron> when I look at https://github.com/osqzss/gps-sdr-sim/blob/master/gpssim.c  , I can only shake my head ..
[02:21:42] <omegatron> hurts my eyes just looking at it
[02:21:55] *** Joins: alex11 (~alex11@user/alex11)
[02:22:11] <sokan> caze: in paragraph 2 I couldn't exactly figure out if int n concerned number of strings or characters.
[02:22:18] <Macuser> lo omegatron that bad?
[02:22:20] <Macuser> lol*
[02:22:32] *** Quits: cosimone (~user@93-47-229-195.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:22:47] <sokan> caze: After reading it now it makes more sense.
[02:22:49] <caze> sokan: "one less than the number of characters specified by n"
[02:22:54] <omegatron> in my own terms of code readability and quality: yes, it's quite bad
[02:23:30] <sokan> caze: It was confusing :
[02:23:32] <sokan> :/
[02:23:38] <sokan> not that particular sentence
[02:24:04] <omegatron> unless that code is meant to compile for and run on embedded systems, where no libc or similar is available (for some stuff in that file - but still)
[02:24:04] <sokan> It'll get easier in time
[02:25:14] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:30:56] *** Quits: adip (~adip@deo188.neoplus.adsl.tpnet.pl) (Ping timeout: 268 seconds)
[02:32:17] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[02:32:25] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 256 seconds)
[02:32:36] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[02:33:33] *** Quits: pizdets (~pizdets@183.182.114.97) (Ping timeout: 256 seconds)
[02:33:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:34:05] *** Joins: pizdets_ (~pizdets@183.182.111.82)
[02:34:23] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[02:36:23] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:204f:d9ad:3f40:bb32) (Quit: Leaving)
[02:36:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:40:02] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[02:42:05] *** Joins: pulse (~pulse@user/pulse)
[02:42:31] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[02:43:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:45:18] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Quit: This computer has gone to sleep)
[02:47:43] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:47:56] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[02:49:09] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[02:49:25] *** Quits: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 256 seconds)
[02:49:51] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:51:15] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:53:54] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:54:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[02:55:05] *** Joins: notzmv (~zmv@user/notzmv)
[02:55:12] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:56:50] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[03:00:10] *** Joins: skapata (~Skapata@user/skapata)
[03:03:52] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:04:43] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:06:11] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:06:16] *** Joins: luizfrds (~Luiz@152.250.243.147)
[03:06:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[03:07:21] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:09:24] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[03:12:54] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:5de6:1c42:8396:cb23) (Quit: CodePoint)
[03:14:21] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[03:14:54] *** Joins: inlight (~inlight@user/inlight)
[03:15:12] <rsjw> a signed integer type is not compatible with its corresponding unsigned type, correct?
[03:19:01] <omegatron> in what way?
[03:19:11] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[03:19:30] <rsjw> in terms of standard C legalese. "compatible type" is a term used in those documents
[03:21:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:23:45] <mcf> correct, they are not compatible
[03:24:00] *** Joins: festerdam (~monix@185.51.93.165)
[03:24:17] *** Parts: festerdam (~monix@185.51.93.165) ()
[03:25:29] *** Joins: aqua (~aqua@user/aqua)
[03:26:35] <rsjw> then how can printf call va_arg when given a %zn argument, given that %zn "applies to a pointer to a signed integer type corresponding to size_t"?
[03:26:37] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[03:29:33] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[03:32:06] <mcf> the implementation of printf probably needs some internal knowledge of what type size_t is
[03:32:07] <fizzie> Just because there's no identifer defined to name it doesn't mean the type doesn't exist.
[03:32:33] <fizzie> Also, printf is part of the implementation; it doesn't necessarily need to call `va_arg`. Up until the current C23 draft, it hasn't even needed to work _as if_ it called `va_arg`.
[03:34:27] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c030:2b1f:300e:31b6) (Ping timeout: 268 seconds)
[03:34:49] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7343:4b4d:81a6:38d9)
[03:34:57] <rsjw> but isn't disallowing a C implementation for printf kind of... wrong?
[03:39:16] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:40:09] *** Joins: liba (~liba@user/liba)
[03:40:19] <fizzie> I certainly wouldn't *complain* if there was a way of specifying the corresponding signed type of `size_t`, or the corresponding unsigned type of `ptrdiff_t`, that worked for any conforming implementation. But can't say I've ever lost any sleep over it.
[03:41:10] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:42:27] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:45:56] *** Quits: PortableDave (~portabled@203.87.67.190) (Ping timeout: 250 seconds)
[03:45:59] *** Joins: graywolf (~wolf@user/graywolf)
[03:46:05] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:47:01] <rsjw> maybe "signed size_t" would be a good idea? with "unsigned size_t" = "size_t"
[03:49:25] <jgart> what's a good resource on learning string manipulation with C?
[03:51:17] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.4)
[03:52:15] <omegatron> rsjw: there is ssize_t
[03:53:20] <omegatron> jgart: what kind of string?
[03:53:24] <rsjw> there is, but is it specified as the signed integer type corresponding to size_t? and I think it's only part of unixy standards like posix, not C
[03:53:37] <omegatron> ascii, unicode in general, utf8?
[03:53:37] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:8d27:e107:2edb:b4a9) (Ping timeout: 240 seconds)
[03:54:13] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[03:54:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[03:55:20] <jgart> ascii
[03:55:31] <jgart> but I'll also be interested in utf8 pretty soon afterwards
[03:56:06] <jgart> at the moment just basic ascii string manipulation with C, to keep it simpler
[03:56:54] <fizzie> It's in POSIX, and it's not specified as the corresponding signed type of `size_t`.
[03:57:06] <omegatron> jgart: aside from the c library itself (though the code may be cryptic) there are several low-level libraries, which (also) do string manipulation (apr for example)
[03:58:24] *** Joins: pyook (~pyook@user/puke)
[03:58:30] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 250 seconds)
[04:04:24] *** aqua is now known as kish`
[04:04:45] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Ping timeout: 250 seconds)
[04:04:54] *** Joins: PortableDave (~portabled@203.87.67.190)
[04:05:30] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:08:15] <jgart> omegatron, apr = The Apache Portable Runtime Library?
[04:08:20] <omegatron> yep
[04:08:23] <jgart> k
[04:08:24] <jgart> thnx
[04:09:22] <jgart> omegatron, this is an example of the utf8 manipulation you were thinking of? https://github.com/klampworks/roman-to-kana/blob/master/roman_to_kana.c
[04:09:27] <omegatron> or icu4c for unicode
[04:09:41] <omegatron> ( http://site.icu-project.org/ )
[04:09:43] <candide> Title of omegatron's link: ICU - International Components for Unicode
[04:09:47] *** Joins: Rounin (~david@84.212.130.215)
[04:09:56] <jgart> one way atleast to use utf8 from C
[04:10:07] <rsjw> jgart: are you just looking for practice?
[04:10:08] <jgart> converting from one to another
[04:10:12] <jgart> rsjw, yes
[04:10:54] <jgart> just practice
[04:10:54] <rsjw> ah. well then any c book would give you exercises that would give you that ability
[04:10:57] <omegatron> if it's unicode stuff you want to do, use the icu4c library ..
[04:12:08] <omegatron> https://julialang.org/utf8proc/  is somewhat more lightweight
[04:12:46] <rsjw> there are functions, whose declarations are in string.h that should be ok for doing basic stuff
[04:13:59] <rsjw> the libraries omegatron is mentioning is more for more complicated stuff
[04:14:32] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[04:15:33] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[04:16:05] *** Joins: Wulf (~Wulf@user/wulf)
[04:16:14] <rsjw> and yes, unicode qualifies as complicated... unless you're talking about utf-8, in which case that's just like ascii as long as your character codes stay under 128
[04:17:28] <omegatron> what part exactly is 'complicated' ?
[04:17:30] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[04:17:39] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:18:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:19:38] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:20:08] <omegatron> layout and page break algorithms - yes, they can be difficult - but the plain encoding and  decoding is not - the rules are simple; for example : https://en.wikipedia.org/wiki/UTF-8#Encoding
[04:23:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:23:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:23:30] *** Joins: wroathe (~wroathe@user/wroathe)
[04:23:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:23:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:25:36] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[04:25:43] *** Joins: kit-ten (~u0_a391@2600:380:5e72:fd2e:679c:2a66:83ff:c754)
[04:25:57] *** Quits: kit_ten (~u0_a391@2600:380:5f1a:aa4d:5402:37ec:5607:e1c) (Ping timeout: 240 seconds)
[04:28:32] *** Joins: youssef_ (~youssef@26.173.112.78.rev.sfr.net)
[04:28:37] <rsjw> I don't mean that it's insurmountably difficult, but it sure is a lot more complicated than ascii
[04:28:58] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[04:29:41] <rsjw> just the fact that you have variable length encodings makes things more difficult for a beginner to get a handle on how to do things
[04:29:54] <omegatron> hm - for me, it's complex, not complicated
[04:30:11] <omegatron> just don't try to understand everything at once
[04:30:22] <rsjw> ok sure, I wasn't trying to distinguish between those two
[04:30:57] *** Quits: _ys (~youssef@26.173.112.78.rev.sfr.net) (Ping timeout: 240 seconds)
[04:33:14] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[04:33:39] *** Joins: constxd_ (~brad@142.167.170.88)
[04:35:51] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[04:36:05] *** Joins: BUSY (~BUSY@user/busy)
[04:37:41] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[04:38:24] *** Joins: Satin (uid193953@user/Seten)
[04:38:51] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:42:10] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:42:45] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[04:44:30] *** Joins: Torr (~Torr@user/torr)
[04:46:12] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[04:51:22] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[04:51:32] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[04:54:08] <fizzie> There's plenty in Unicode that's compl(ex|icated) in the abstract, though, even without getting to layout and page breaks and rendering. Not the part about going between UTF-8 to code points, or just passing opaque strings along, sure. But normalization, or collation, or grapheme/word/sentence boundaries. Or bidirectional text. Well, maybe that last's sort of rendering-adjacent.
[04:54:15] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:54:51] *** Joins: skapata (~Skapata@user/skapata)
[04:56:32] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 256 seconds)
[04:58:55] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[05:00:30] *** Quits: malloy (~jimery@116.30.223.163) (Ping timeout: 250 seconds)
[05:00:54] *** Joins: vysn (~vysn@user/vysn)
[05:00:56] *** Quits: rsjw (~quassel@user/rsjw) (Quit: rsjw)
[05:01:02] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[05:02:40] *** Joins: malloy (~jimery@116.30.223.163)
[05:02:45] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[05:04:16] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[05:07:37] *** Quits: alch (~alch@mi-18-34-82.service.infuturo.it) (Read error: Connection reset by peer)
[05:08:18] *** Joins: rsjw (~quassel@user/rsjw)
[05:09:07] *** Joins: gco (~gco@2601:647:4c80:2424:48f0:57ae:323:8448)
[05:10:29] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[05:11:38] *** Joins: alch (~alch@mi-18-58-167.service.infuturo.it)
[05:12:05] *** Joins: Xatenev (~xatenev@2a02:8108:9640:74d4:7408:a0bd:d6cb:81c)
[05:12:21] *** Quits: Xatenev (~xatenev@2a02:8108:9640:74d4:7408:a0bd:d6cb:81c) (Changing host)
[05:12:21] *** Joins: Xatenev (~xatenev@user/xatenev)
[05:12:29] *** Parts: Xatenev (~xatenev@user/xatenev) ()
[05:12:58] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[05:14:16] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[05:16:19] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Remote host closed the connection)
[05:16:37] *** Joins: zmt01 (~zmt00@user/zmt00)
[05:16:57] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[05:17:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[05:18:04] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:18:50] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[05:19:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[05:20:03] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[05:21:16] *** Joins: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au)
[05:22:34] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[05:23:34] *** Joins: youssef__ (~youssef@37.175.255.50)
[05:23:52] *** Quits: kit-ten (~u0_a391@2600:380:5e72:fd2e:679c:2a66:83ff:c754) (Ping timeout: 250 seconds)
[05:25:57] *** Quits: youssef_ (~youssef@26.173.112.78.rev.sfr.net) (Ping timeout: 240 seconds)
[05:26:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:26:37] *** Joins: dec0d3r_ (~dec0d3r@101.181.83.205)
[05:26:47] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[05:28:14] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[05:29:54] *** Joins: Atque (~Atque@user/atque)
[05:30:34] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[05:32:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[05:36:10] *** Joins: skapata (~Skapata@user/skapata)
[05:36:22] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:37:48] *** Quits: ndorf (~nd@ob.noxio.us) (Remote host closed the connection)
[05:38:17] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[05:38:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:41:29] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:47:32] *** Quits: trvv (555a816688@user/trvv) (Ping timeout: 240 seconds)
[05:47:32] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (Ping timeout: 240 seconds)
[05:47:46] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[05:47:52] *** Joins: trvv (555a816688@user/trvv)
[05:49:02] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:49:03] *** Joins: ndorf (~nd@ob.noxio.us)
[05:49:34] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[05:51:48] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[05:55:02] *** Joins: youssef_ (~youssef@26.173.112.78.rev.sfr.net)
[05:55:24] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[05:55:56] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 250 seconds)
[05:57:35] *** Joins: tejr (~tejr@user/tejr)
[05:57:44] *** Quits: youssef__ (~youssef@37.175.255.50) (Ping timeout: 256 seconds)
[05:58:48] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[06:02:19] *** Joins: Guest44100 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net)
[06:03:38] *** Joins: hanzo (uid532183@user/hanzo)
[06:04:03] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:06:36] *** Quits: synbiose (~synbiose@user/synbiose) (Ping timeout: 245 seconds)
[06:10:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[06:11:00] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[06:11:05] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:13:55] <jgart> what do people think of this book for learning C for a beginner? http://aelinik.free.fr/c/
[06:14:13] <jgart> Sams Teach Yourself C in 24 Hours
[06:14:58] <jgart> I'm looking for an easy modern read to explain concepts clearly and simply but not too simple
[06:21:09] <omegatron> at least I can say, that the author has zero knowledge about typography
[06:22:07] <jgart> i think the book is published officially by a publisher
[06:22:16] <jgart> but that version someone put online
[06:22:23] <omegatron> ah - I see
[06:22:27] <jgart> but was just wondering about the content
[06:22:40] <jgart> omegatron, what books do you prefer for learning C?
[06:22:44] <omegatron> I have seen much worse
[06:23:15] *** Joins: skapata (~Skapata@191.177.185.183)
[06:23:15] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[06:23:15] *** Joins: skapata (~Skapata@user/skapata)
[06:23:32] <omegatron> i'm 65 - my time of learning C is well in the past
[06:26:06] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[06:27:21] <jgart> omegatron, what does displaySeparator() do in the context of this code? https://bpa.st/C37A
[06:27:23] <youssef_> I recommend "Richard Reese Understanding C Pointers" and the classic R&K "The C Programming Language"
[06:27:30] <jgart> I see it just returns 0
[06:27:46] <jgart> but not sure what that means in the larger scheme of things
[06:28:16] <jgart> I've just heard warnings about things in knr being out of date or not good practice anymore
[06:28:37] <jgart> but I've read knr once. Should probably give it another chance
[06:28:53] <jgart> I'll check out "Richard Reese Understanding C Pointers"
[06:28:54] <jgart> thnx
[06:28:56] <omegatron> i'm auto-didact and taught many people including my employees C, bash and other stuff ... without ever recommending any certain book aside from the K&R book
[06:30:08] <jgart> how about the King book?
[06:30:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[06:30:19] <youssef_> O'Reilly Collection books are awesome. A lot of classics in here on Bash, Bison & Flex, GNU make
[06:30:58] <jgart> C Programming: A Modern Approach, by King, ISBN: 0393969452
[06:31:03] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[06:31:05] <youssef_> Never read K. N King
[06:31:18] <youssef_> Should be good too
[06:31:24] <jgart> Or https://www.manning.com/books/modern-c
[06:31:28] <jgart> from INRIA
[06:31:45] <youssef_> Yes he's from INRIA
[06:32:03] <jgart> Jens Gustedt
[06:32:03] <jgart> ye
[06:32:14] <jgart> youssef_, have you read that one?
[06:32:48] <youssef_> which one ?
[06:32:49] <jgart> > Great introductory material to the ‘new’ C. This isn’t your grandfather’s C anymore!
[06:32:54] <jgart> modern-c
[06:33:08] <jgart> Modern C - Jens Gustedt
[06:33:15] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[06:33:23] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[06:33:57] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:34:32] <youssef_> yes I have Jens Gustedt's book. It uses a different approach and is really good
[06:34:43] <jgart> cool
[06:35:08] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[06:35:15] <youssef_> Many examples
[06:35:25] <youssef_> State machines etc
[06:35:32] <jgart> great!
[06:35:36] <jgart> examples is what I need
[06:35:53] <jgart> examples of how to do the fundamentals/basics
[06:38:34] <omegatron> yeah - and that's how I teach - by giving out / exercising with many examples - so that I can see, how (and how fast) the student is able to come to the correct conclusion
[06:38:37] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[06:39:38] *** Joins: liba (~liba@user/liba)
[06:39:45] <jgart>  sounds like a great approach
[06:40:01] <omegatron> it enables me to tell people (though that rarely happened), that they just not fit for that stuff (and most likely never will be - because they have other talents) - so they don't waste their money and my time
[06:40:53] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[06:40:53] <youssef_> Sometimes I think I understand until the exercices section
[06:41:02] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[06:41:52] <omegatron> and since i'm only a few years away from retirement, i'm already working on a little online platform where people can do that stuff
[06:44:57] *** Quits: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (Quit: Bye!)
[06:45:57] *** Quits: PortableDave (~portabled@203.87.67.190) (Ping timeout: 240 seconds)
[06:46:25] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:46:51] *** Joins: mplio (~mplio@81-205-35-3.fixed.kpn.net)
[06:47:56] *** Joins: skapata (~Skapata@191.177.185.183)
[06:47:56] *** Quits: skapata (~Skapata@191.177.185.183) (Changing host)
[06:47:56] *** Joins: skapata (~Skapata@user/skapata)
[06:52:11] *** Joins: PortableDave (~portabled@203.87.67.190)
[06:52:17] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[06:54:09] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:18] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[06:55:18] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 250 seconds)
[06:56:29] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:56:52] <jgart> is there just a man page for every C function in the stdlib?
[06:57:13] <omegatron> no, only for the public interface
[06:57:38] <jgart> but there's a man page for all of the public interface?
[06:58:03] <jgart> for example: https://github.com/invertime/CSV-parser-C/blob/main/main.c
[06:58:24] <jgart> what can't I man page from that code
[06:58:33] <jgart> besides for, if, while, etc...
[06:58:44] <jgart> and any user created functions of course
[06:58:45] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:58:59] <jgart> `man strtok` works
[06:59:12] <jgart> `man realloc` works
[06:59:31] <jgart> `man free` etc...
[06:59:58] <jgart> `man fopen`, `man fgets`
[07:00:17] <jgart> `man strdup`
[07:00:44] <omegatron> https://ftp.gnu.org/pub/gnu/glibc/glibc-2.34.tar.xz and https://linuxfromscratch.org/lfs/view/development/chapter08/glibc.html  might give you some clues
[07:01:22] <omegatron> the first is the tarball of the current gnu libc implementation - just unpack it somewhere and look around
[07:01:58] <omegatron> the second is a page where a sample compilation and installation is performed (in a certain context, but it might give you some hints)
[07:02:45] <omegatron> but, please do not actually do the stuff on the second page, without reading the whole LFS book first
[07:02:46] <jgart> cool, so just read through glibc?
[07:03:14] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[07:03:25] <jgart> I've tried reading through busybox code base before
[07:03:32] <jgart> but that's a whole other thing
[07:03:41] <omegatron> well, not the entire source code, as it's quite large - but .. start looking for the fgets() function implementation for example and then continue where ever you want to
[07:03:44] <jgart> would musl be easier to read than glibc?
[07:04:03] <jgart> as musl is a simpler rewrite
[07:04:16] <jgart> s/simpler/cleaner
[07:05:04] <omegatron> don't know - I assume all libc implementations are, when it's about human readability, not the best examples for good source code readability - but the last time I checked was some years ago, so ..
[07:08:14] <omegatron> I just looked into the glibc source code ..
[07:08:35] *** Joins: chenqisu12 (~bhca7d@183.217.201.21)
[07:08:55] <omegatron> while stdlib/atoi.c  is as simple as expected,  stdlib/abort.c  is of course a little bit more complex, as it has to handle locks etc.
[07:10:17] <jgart> so fgets is a macro?
[07:10:17] *** Quits: tekniq (~tekniq@82-169-181-124.biz.kpn.net) (Remote host closed the connection)
[07:11:37] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[07:11:54] <jgart> atleast according to stdlib/isomac.c
[07:11:59] <omegatron> what you can also do, in some far future, is to actually follow that LFS book and build your own linux distro (on some spare machine) and when you get to the glibc package, build it and save the make output as log somewhere - then you can see how all the files are compiled and can do the same for single files, this time with the '-E' option, to see the source file after preprocessing (the actual source code)
[07:13:26] <jgart> -E flag from gcc compiler you're referring to?
[07:13:32] <omegatron> gcc or clang
[07:13:56] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[07:14:13] <jgart>  -E Preprocess only; do not compile, assemble or link.
[07:14:16] <jgart> k
[07:14:41] <omegatron> about the 'macro' thing in isomac.c : no - just in this file something is called a macro doesn't mean anything for you without more context - it could be, this file is not even used anymore or whatever ..
[07:14:44] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:14:57] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:14:59] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:15:05] <jgart> do you happen to know where fgets implementation is?
[07:15:10] <jgart> in that codebase
[07:15:24] <jgart> I tried grepping but I'm having a little bit of trouble finding it
[07:16:11] <omegatron> reading the glibc source with your current knowledge is NOT about how a certain implementation is done, but how other people write code in general
[07:16:32] <jgart> ah ok
[07:16:46] <jgart> what things should I notice?
[07:16:54] <jgart> as I go along perusing it
[07:17:42] <omegatron> simple stuff - functions which are not too long - functions which do stuff you can understand after reading them - techniques which are used
[07:17:46] <jgart> besides general syntax in C
[07:18:07] <jgart> I guess noticing how structs are declared and used?
[07:18:09] <jgart> is one thing
[07:18:11] *** Joins: fe23 (~fe23@2409:8a34:461:9470:a521:525c:ef1e:edd7)
[07:18:13] <mcf> jgart: look at section 7 of the C spec (https://port70.net/~nsz/c/c11/n1570.html#7). it documents the interfaces of all standard C functions
[07:18:17] <jgart> the use of typedef
[07:18:25] <jgart> mcf, THNX
[07:18:29] <jgart> I'll check that too
[07:18:33] <jgart> thanks much
[07:18:36] <dave0> jgart: what are you looking at for fgets?
[07:19:01] <jgart> dave0, I'm looking in here: https://ftp.gnu.org/pub/gnu/glibc/glibc-2.34.tar.xz
[07:19:01] <dave0> jgart: this is from freebsd libc: https://svnweb.freebsd.org/base/head/lib/libc/stdio/fgets.c?view=markup
[07:19:02] <candide> Title of dave0's link: [base] Contents of /head/lib/libc/stdio/fgets.c
[07:19:35] <dave0> jgart: oh okay... i find gnu stuff unreadable
[07:19:37] <jgart> In glibc there is ./libio/iofgets.c
[07:19:48] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:19:51] <jgart> I'll check out the freebsd libc thanks
[07:20:01] <jgart> so many libc's ha
[07:20:28] *** Joins: hayden (~hayden@128-193-154-36.ptpg.oregonstate.edu)
[07:20:36] <mcf> just curious, but why are you interested in the implementation of fgets?
[07:20:43] <dave0> i've heard *BSD code is good quality and i had a link to freebsd, but i believe openbsd has the best code (unconfirmed)
[07:21:59] <jgart> mcf, I'm just looking at anything at the moment. I came across fgets and then said to myself: how is that implemented? And then, went off looking for it through code
[07:22:55] <jgart> I'm jumping around a bit I should maybe just be following a book at the moment
[07:24:53] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[07:25:18] *** spidermonkey54 is now known as joomla5
[07:25:26] <omegatron> yeah, if I had to write  iofgets.c  it would look like this  https://bpa.st/EAHA   (for readability)  besides, the timezone/zic.c  program is quite long but might also contain some insights as a stand-alone program  (maybe you want to run some source code beautifier before reading it)
[07:26:50] <jgart> FILE always refers to a stream?
[07:26:51] <Rounin> I was just looking into libcs the other day, and I found several libcs for Linux, but not a lot of alternative ones for BSDs... I think Google made one for Linux based partly on one from BSD?
[07:27:18] <Rounin> I suppose BSD is more monolithic in its organization, whereas Linux has the central kernel developers, but is otherwise more of a patchwork
[07:27:25] <omegatron> Rounin:  use libSystem.B.dylib!
[07:27:31] * omegatron *runs away*
[07:28:41] <pony> that's because FreeBSD and OpenBSD are complete systems
[07:28:44] <pony> Linux is just a kernel
[07:29:42] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:30:13] <dave0> gasp! "just a kernel" ! was picasso "just a painter" !
[07:30:24] <Rounin> Right... So with Linux, you can either use a lot of Gnu stuff or go with Musl and Busybox, say, whereas if you make a new BSD libc, you've just made a new BSD
[07:30:40] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:31:48] *** Quits: youssef_ (~youssef@26.173.112.78.rev.sfr.net) (Ping timeout: 256 seconds)
[07:32:56] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[07:33:03] <jgart> where can I get a list of all the types available in C?
[07:33:14] <jgart> the core ones
[07:33:41] <jgart> float int uint etc...
[07:33:49] <jgart> is there a man page for that?
[07:34:24] <dave0> not that i know of.. try googling for c reserved words
[07:34:30] *** Quits: gco (~gco@2601:647:4c80:2424:48f0:57ae:323:8448) (Quit: ZZZzzz…)
[07:34:44] <dave0> there's about 30 of them, that should have int char float etc
[07:34:47] <Rounin> Whatever ISO/ANSi standard defines your chosen version of C will probably have it
[07:35:45] *** Joins: Z[m] (~zincognit@2001:470:69fc:105::e306)
[07:35:49] <mcf> maybe https://port70.net/~nsz/c/c11/n1570.html#6.7.2p2 or https://port70.net/~nsz/c/c11/ctypes.pdf ?
[07:35:52] <dave0> jgart: this lists some: https://man.netbsd.org/inttypes.3
[07:35:55] <jgart> how come there is not a man page for `sizeof`?
[07:36:00] <jgart> mcf, dave0 thanks!
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:08] <jgart> reading those now
[07:36:09] <dave0> yeah you could check the std i guess
[07:36:11] <jgart> much appreciated
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:36] <mcf> sizeof isn't a function, it's an operator. probably similar to why there's no man page for ++
[07:37:06] <jgart> re: sizeof isn't a function, it's an operator.: interesting
[07:37:11] <mcf> https://port70.net/~nsz/c/c11/n1570.html#6.5.3.4
[07:37:25] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[07:37:55] *** Joins: youssef (~youssef@26.173.112.78.rev.sfr.net)
[07:38:30] <jgart> thnx
[07:38:58] <jgart> I guess sizeof is a bit like length()
[07:39:08] <mcf> what is length()?
[07:39:24] <jgart> (length '(0 1 2 3 4))
[07:39:28] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[07:39:28] <jgart> 5
[07:39:30] *** Quits: hayden (~hayden@128-193-154-36.ptpg.oregonstate.edu) (Ping timeout: 250 seconds)
[07:39:39] <jgart> like getting the size of an array
[07:39:43] <jgart> or list
[07:40:19] <jgart> length([0,1,2,3,4])
[07:40:36] <jgart> or, am I trippin'?
[07:40:52] <mcf> not necessarily. sizeof returns the size in bytes of an object or type. if that object or type is an array whose elements are larger than one byte, you won't get the length of the array
[07:40:53] <ski> that `length' is some Lisp procedure/function. not comparable to `sizeof'
[07:40:58] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[07:40:59] *** Quits: cryptonector (~nico@24.28.108.183) (Quit: leaving)
[07:41:06] <dave0> it's a good idea for you to get a book on c.. you seem to know other langauges so you should be able to pick up c pretty easily *from a book*
[07:41:40] *** Quits: chenqisu12 (~bhca7d@183.217.201.21) (Ping timeout: 250 seconds)
[07:42:06] <jgart> re: you won't get the length of the array: what will you get instead?
[07:42:20] <mcf> the size in bytes of the array
[07:42:27] <jgart> oh ok
[07:42:37] <jgart> as a hex number?
[07:42:42] <dave0> diving straight into libc is fine if your time is not worth anything :-)
[07:43:01] <jgart> dave0, good point
[07:43:26] <mcf> ,cc int x[] = {0,1,2,3,4}; printf("%zu %zu %zu\n", sizeof x, sizeof *x, sizeof x / sizeof *x);
[07:43:29] <candide> mcf: 20 4 5
[07:44:15] *** Quits: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[07:45:00] <jgart> I see that `man printf` does not explain what `%zu` is. Why is that?
[07:45:30] <jgart> should I be looking in some other man page for the meaning of that interpolation specifier
[07:45:54] <jgart> not sure if interpolation specifier is the right term here but just trying to describe it
[07:46:30] <mcf> i always look at specifications, i.e https://port70.net/~nsz/c/c11/n1570.html#7.21.6.1p6, since that's the source of truth
[07:46:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:47:17] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[07:48:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:48:33] <jgart> candide, so `sizeof x / sizeof *x` gives you the number of items in the array?
[07:48:33] <candide> so is http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html
[07:48:36] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:48:37] *** Quits: Guest44100 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:48:52] <jgart> sizeof *x is the pointer to the array of integers in memory?
[07:48:59] <mcf> the z length modifier means size_t, which is the type of the result of sizeof
[07:50:12] <mcf> *x is the first element of the array, so sizeof *x is the size of that single element. in this case, x is an array of int, so sizeof *x == sizeof(int)
[07:50:46] *** Joins: savanz (~savanz@1.157.231.3)
[07:52:20] <jgart> which is 4?
[07:52:25] <jgart> as candide said
[07:52:35] <mcf> i'm a bit surprised that your manual doesn't mention the z length modifier. maybe you'll have better luck with the posix man page (man 3p fprintf)
[07:53:40] <mcf> it depends on the system and could be anything. but yeah, sizeof(int) is often 4
[07:54:18] <jgart> Specifies that a following d, i, o, u, x, or X conversion specifier applies to a size_t or the corresponding signed integer type argument;
[07:54:19] <jgart> or that a following n conversion specifier applies to a pointer to a signed integer type corresponding to a size_t argument.
[07:54:33] <jgart> `man 3p fprintf` mentions it
[07:54:39] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[07:55:06] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[07:56:36] *** Joins: frost (~frost@user/frost)
[07:57:07] <dave0> jgart: i use this for man pages, it's posix, which is sort of on topic in #c ... https://pubs.opengroup.org/onlinepubs/9699919799/idx/functions.html
[07:57:09] <candide> Title of dave0's link: System Interfaces
[07:59:15] <pragma-> mcf: he probably did a software search for "zu" rather than using their eyes to read it and find "z"
[08:00:13] <mcf> yeah, the posix specification is a good reference. it sounds like you have man-pages-posix installed, so all of those functions should be available as man pages in section 3p
[08:00:23] <jgart> pragma-, I did both
[08:00:43] <jgart> saw that u is unsigned int
[08:01:03] *** Joins: cryptonector (~nico@24.28.108.183)
[08:02:47] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[08:03:28] <jgart> it's not necessarily clear from any context unless you have prior knowledge of format specifiers in C that "zu" are a composite of two separate types
[08:04:30] <jgart> anyways, now it's clear ;()
[08:04:48] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:05:54] *** Joins: stblaha (~stblaha@user/stblaha)
[08:06:11] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:08:06] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[08:09:37] *** Joins: pilyn (~pilyn@user/pilyn)
[08:10:17] *** Quits: PortableDave (~portabled@203.87.67.190) (Ping timeout: 240 seconds)
[08:12:55] *** Joins: Kerr (~Kerr@047-051-165-171.biz.spectrum.com)
[08:13:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:14:27] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:14:58] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[08:16:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[08:16:21] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:20:10] *** Joins: j-james (~apropos@dhcp-206-87-156-73.ubcsecure.wireless.ubc.ca)
[08:24:33] *** Quits: j-james (~apropos@dhcp-206-87-156-73.ubcsecure.wireless.ubc.ca) (Client Quit)
[08:24:52] *** Joins: j-james (~apropos@dhcp-206-87-156-73.ubcsecure.wireless.ubc.ca)
[08:26:42] *** Joins: PortableDave (~portabled@203.87.67.190)
[08:31:13] *** Joins: frost (~frost@user/frost)
[08:31:57] <youssef> dave0 , any pdf version of this exists ?
[08:32:28] *** Quits: j-james (~apropos@dhcp-206-87-156-73.ubcsecure.wireless.ubc.ca) (Quit: leaving)
[08:33:18] <caze> What are you saying, that you should read the documentation for functions before using them?
[08:34:49] <dave0> youssef: sorry don't know
[08:35:21] <dave0> i just use it as a reference
[08:36:22] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[08:40:53] *** Joins: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr)
[08:42:42] *** Joins: BGL (twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[08:43:02] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:46:05] *** Joins: crankslider (~slidercra@user/slidercrank)
[08:47:12] *** Quits: savanz (~savanz@1.157.231.3) (Quit: Leaving)
[08:47:43] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:53:54] *** Joins: Burgundy (~NA@86.121.143.206)
[08:54:31] <mcf> youssef: if you create an opengroup account, you can download pdfs from https://www.opengroup.org/austin/restricted/
[08:56:18] *** Joins: frost15 (~frost@user/frost)
[08:56:30] *** Quits: frost15 (~frost@user/frost) (Client Quit)
[08:56:44] *** Joins: frost21 (~frost@user/frost)
[08:57:15] *** Quits: frost21 (~frost@user/frost) (Client Quit)
[08:57:53] *** Joins: Guest4433 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net)
[08:57:59] *** Joins: frost31 (~frost@user/frost)
[08:58:22] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 250 seconds)
[08:58:41] *** Quits: Guest4433 (~Guest44@c-73-202-229-95.hsd1.ca.comcast.net) (Client Quit)
[08:59:04] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:00:14] *** Parts: frost31 (~frost@user/frost) ()
[09:01:13] *** Joins: frost (~frost@user/frost)
[09:02:03] *** Joins: Burgundy (~NA@86.121.143.206)
[09:03:23] *** Joins: mrlemke (~quassel@2604:a880:4:1d0::394:0)
[09:06:17] *** Quits: pilyn (~pilyn@user/pilyn) (Quit: Leaving)
[09:08:25] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:08:57] *** Quits: clockworkgirl (sophie@user/clockworkgirl) (Ping timeout: 250 seconds)
[09:09:04] *** Joins: clockworkgirl (sophie@funkykitty.net)
[09:09:04] *** Quits: clockworkgirl (sophie@funkykitty.net) (Changing host)
[09:09:04] *** Joins: clockworkgirl (sophie@user/clockworkgirl)
[09:09:12] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:148a:1ddd:e9e:7777) (Ping timeout: 250 seconds)
[09:09:57] *** Quits: alch (~alch@mi-18-58-167.service.infuturo.it) (Ping timeout: 240 seconds)
[09:10:13] *** Quits: Kerr (~Kerr@047-051-165-171.biz.spectrum.com) (Ping timeout: 256 seconds)
[09:10:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:10:31] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:11:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[09:12:07] *** Joins: alch (~alch@151.82.52.97)
[09:17:46] *** Quits: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[09:17:51] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (Ping timeout: 250 seconds)
[09:18:35] *** Joins: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3)
[09:18:43] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Ping timeout: 250 seconds)
[09:19:03] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[09:20:31] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[09:22:18] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:22:37] *** Quits: pyook (~pyook@user/puke) ()
[09:25:06] *** Joins: frost (~frost@user/frost)
[09:30:17] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[09:31:22] *** crankslider is now known as slidercrank
[09:32:18] *** Joins: llh (~llh@user/llh)
[09:37:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[09:38:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:39:25] *** Quits: Jong (~Jong@2620:10d:c090:400::5:263a) (Ping timeout: 240 seconds)
[09:43:58] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:47:37] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:53:17] *** Quits: caze (~caze@user/caze) (Quit: caze)
[09:56:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:56:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:56:02] *** Joins: wroathe (~wroathe@user/wroathe)
[09:57:49] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[09:59:56] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:157e:6f97:4b74:e7ad:3ce4)
[10:01:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:07:40] *** Quits: dec0d3r_ (~dec0d3r@101.181.83.205) (Quit: Leaving)
[10:07:54] *** Joins: caze (~caze@user/caze)
[10:10:14] *** Joins: adip (~adip@deo188.neoplus.adsl.tpnet.pl)
[10:11:02] *** Quits: PortableDave (~portabled@203.87.67.190) (Ping timeout: 256 seconds)
[10:11:35] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:25:03] *** Joins: et09 (~et09@user/et09)
[10:25:38] <et09> what's the c equivalent of echo "mem" > /sys/power/state
[10:25:57] <et09> it's not a normal fp
[10:26:24] <et09> kind of a linux kernel question
[10:27:43] <dave0> fopen doesn't work?
[10:30:06] <et09> segfaults
[10:30:38] *** Joins: myusername (~myusernam@user/myusername)
[10:31:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:33:15] <dave0> nope
[10:34:40] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[10:35:24] <dave0> ,cc FILE *f = fopen("/sys/power/state", "w"); if(f == 0) perror("fopen"); if(fputs("mem\n", f) == EOF) perror("fputs"); if(fclose(f) == EOF) perror("fclose");
[10:35:27] <candide> dave0: fopen: Permission denied  runtime error: null pointer passed as argument 2, which is declared to never be null Program received signal SIGSEGV, Segmentation fault in fputs () called by main () at statement: if (fputs("mem\n", f) == EOF) perror("fputs"); <local variables: f = 0x0>
[10:35:43] <dave0> oh well permission denied
[10:35:53] <dave0> use that code with better error checking
[10:36:06] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 260 seconds)
[10:36:07] *** Quits: PaulePanter (~paul@mail.gw90.de) (Remote host closed the connection)
[10:36:22] *** Joins: [R] (~rs@genoce.org)
[10:37:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[10:38:04] <et09> yeah that worked
[10:38:04] <et09> needs suid bit of course
[10:38:06] <et09> thanks!
[10:38:21] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[10:38:44] <et09> i think it was the newline
[10:39:17] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[10:40:17] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 240 seconds)
[10:40:35] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:46:12] *** Joins: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au)
[10:46:48] *** Quits: rgrinberg (~textual@2806:101e:7:2b:8582:352:d913:c6a5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:48:37] *** Quits: et09 (~et09@user/et09) (Ping timeout: 240 seconds)
[10:48:59] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[10:49:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[10:50:02] *** Joins: BinarySavior_ (~BinarySav@josh.vet)
[10:50:08] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Ping timeout: 256 seconds)
[10:51:05] *** Quits: edr (~edr@user/edr) (Ping timeout: 256 seconds)
[10:51:47] *** Joins: edr (~edr@enlo.co)
[10:51:47] *** Quits: edr (~edr@enlo.co) (Changing host)
[10:51:47] *** Joins: edr (~edr@user/edr)
[10:53:08] <markand> I think pthread are largely superior to C11 threads, more flexible, convenient errno set (so you can just use strerror/perror to show actual error)
[10:53:21] <jgart> static void      ewritestr(int, const char *);
[10:53:30] <jgart> what does static mean in the above line?
[10:53:41] <markand> it means the function is local to the TU (aka source file)
[10:55:26] *** Joins: hayden (~hayden@2601:1c0:8101:7310::ffe5)
[10:55:43] *** Joins: notzmv (~zmv@user/notzmv)
[10:57:10] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[10:57:36] <jgart> thanks, what does TU stand for?
[10:57:37] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:157e:6f97:4b74:e7ad:3ce4) (Ping timeout: 240 seconds)
[10:58:36] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[10:59:06] *** Joins: Darkcoal (~user@130.164.146.159)
[10:59:37] *** Joins: nostar (~nostar@45.14.195.74)
[11:00:05] <jgart> Translation Unit?
[11:00:16] *** Joins: frost (~frost@user/frost)
[11:01:19] *** Joins: meator (~meator@user/meator)
[11:01:28] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[11:01:47] <gnoo> is there a way to know the number of arguments passed to a variadic function ?
[11:01:59] <gnoo> variadic macro
[11:02:11] <dave0> gnoo: no, you have to tell it
[11:02:33] <markand> jgart, yes
[11:02:35] <gnoo> thanks, now i'm using #define fun(len,...) \
[11:02:44] <gnoo> so that's the best way?
[11:02:44] <jgart> markand, thnx
[11:02:46] <dave0> oh macro
[11:02:56] <markand> gnoo, the usual way is to have a format string or something similar
[11:03:17] <markand> e.g. json_pack (from jansson) also use a format string: json_pack("{ss}", "property", "myvalue");
[11:03:55] <gnoo> yeah, this macro wraps around scanf, ignoring the case where stdin is not available (for now, because test code, not real)
[11:03:58] <markand> exec (from POSIX) use a NULL sentinel value: execl("foo", "bar", "baz", "quux", NULL);
[11:04:17] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[11:04:37] <dave0> which is it? variadic macro or variadic function?
[11:04:42] <gnoo> macro
[11:05:13] <dave0> ok sorry i don't know about variadic macros
[11:05:49] <gnoo> ok, i'll keep using the fun(len,...), that seems the easiest :)
[11:07:49] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:15:27] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[11:15:44] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[11:15:51] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Remote host closed the connection)
[11:16:04] *** Joins: diophantoz (~diophanto@user/diophantoz)
[11:17:02] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:214a:84c4:2877:e621:cda5)
[11:17:20] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[11:17:25] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[11:18:03] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[11:18:41] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[11:18:58] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[11:19:33] <mcf> markand: note that execl variadic arguments must have type char *, and NULL has type void * or any integer type. so you should use (char *)0 as the sentinel, not NULL
[11:21:28] <dave0> you have to cast NULL which kind of defeats the purpose
[11:22:05] *** Parts: Z[m] (~zincognit@2001:470:69fc:105::e306) ()
[11:23:37] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[11:24:30] *** Joins: pi0 (~default@user/pi0)
[11:24:40] <pi0> is the c manual avail for free download?
[11:27:01] <gnoo> there's a link in the topic for the standard
[11:28:01] <pi0> c99?
[11:28:11] <pi0> is that the current standard?
[11:29:00] <pi0> 2007 is the most current?
[11:29:33] <gl> https://iso-9899.info/wiki/The_Standard
[11:29:40] <gnoo> no, c17/c18 draft is found in: https://iso-9899.info/wiki/The_Standard
[11:29:57] *** Quits: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[11:34:08] *** Joins: malina (~malina@user/malina)
[11:36:36] <pi0> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2310.pdf ?
[11:36:45] <pi0> the other one seems like its 200 bucks
[11:37:24] *** Joins: Jong (~Jong@2620:10d:c090:400::5:4f54)
[11:38:08] <NRK[m]> then get it from _free places_ if you know what i mean, aye?
[11:40:00] *** Quits: Darkcoal (~user@130.164.146.159) (Ping timeout: 256 seconds)
[11:40:19] *** Joins: aradesh (~aradesh@user/aradesh)
[11:40:45] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:41:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:41:54] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[11:41:57] *** Joins: Darkcoal (~user@2001:16a2:77c9:6300:26a6:c9f4:dfde:a93c)
[11:42:34] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[11:42:55] *** Quits: myusername (~myusernam@user/myusername) (Quit: Leaving)
[11:43:30] *** Joins: mrig (~mrig@user/mrig)
[11:44:56] <chiselfuse> #define handle_error_en(en, msg) \
[11:44:58] <chiselfuse> do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)
[11:45:25] <chiselfuse> why does this example use the return value as errno instead of using whatever the function set it as?
[11:45:55] *** Joins: Major_Biscuit (~MajorBisc@c-001-024-001.client.tudelft.eduvpn.nl)
[11:46:23] <chiselfuse> it is called with:   if(!(s = pthread_attr_init(&attr)) handle_error_en(s, "pthread_attr_init");
[11:46:37] *** Quits: hayden (~hayden@2601:1c0:8101:7310::ffe5) (Ping timeout: 240 seconds)
[11:47:22] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 250 seconds)
[11:47:55] <fizzie> I imagine because `pthread_attr_init` returns an error code rather than setting errno.
[11:48:06] *** Joins: inlight (~inlight@157.42.194.140)
[11:48:06] *** Quits: inlight (~inlight@157.42.194.140) (Changing host)
[11:48:06] *** Joins: inlight (~inlight@user/inlight)
[11:48:21] <fizzie> POSIX sez: "Upon successful completion, pthread_attr_destroy() and pthread_attr_init() shall return a value of 0; otherwise, an error number shall be returned to indicate the error."
[11:48:57] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[11:49:20] <chiselfuse> why do some do that instead of settng errno
[11:49:28] <chiselfuse> by design i mean
[11:50:37] *** Quits: Darkcoal (~user@2001:16a2:77c9:6300:26a6:c9f4:dfde:a93c) (Ping timeout: 240 seconds)
[11:51:24] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:52:15] <chiselfuse> fizzie: is it safe to do this:  if(!s = pthread_attr_init(&attr)) perror("pthread_attr_init");   ?
[11:52:20] <chiselfuse> oops
[11:52:22] <chiselfuse> errr
[11:52:38] <chiselfuse> this:  if(!errno = pthread_attr_init(&attr)) perror("pthread_attr_init");   ?
[11:52:41] *** Joins: Darkcoal (~user@139.64.70.208)
[11:53:20] <fizzie> You need the parentheses, but I imagine it should be.
[11:53:40] <fizzie> (`!x = y` is the same as `(!x) = y`, not `!(x = y)`.)
[11:54:06] <chiselfuse> i see
[11:55:26] *** Joins: fwg (~fwg@user/fwg)
[11:55:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[11:55:59] <NRK[m]> i like handling error through return value.
[11:56:26] <chiselfuse> NRK[m]: me too, but i like standardizing more
[11:56:33] <NRK[m]> if ((a = fun()) == NULL) error();
[11:56:34] <chiselfuse> either this or that
[11:56:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:56:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:56:49] *** Joins: wroathe (~wroathe@user/wroathe)
[11:56:57] <NRK[m]> but that obviously doesn't work for all functions
[11:59:57] *** Joins: dsrt^ (~dsrt@207.182.73.202)
[12:00:28] <sham1> if ((ret = fn()) == -1) { /* POSIX errors */ }
[12:00:38] <sham1> I'd rather that the errors be consistent
[12:01:15] <sham1> But pthreads breaks the assumption
[12:01:25] <NRK[m]> i like to compare against 0 instead, `< 0`
[12:01:39] *** Quits: mrh (~mrh@c-67-161-88-249.hsd1.wa.comcast.net) ()
[12:01:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:02:17] *** Quits: fe23 (~fe23@2409:8a34:461:9470:a521:525c:ef1e:edd7) (Ping timeout: 240 seconds)
[12:02:18] <NRK[m]> less to type and also *looks* better :)
[12:04:58] *** Quits: xSavitar (~xSavitar@user/xsavitar) (Quit: Good night from Africa!)
[12:06:32] *** Quits: kzootech (~contact@kzoo.tech) (Ping timeout: 240 seconds)
[12:06:57] *** Quits: clockworkgirl (sophie@user/clockworkgirl) (Ping timeout: 240 seconds)
[12:10:27] <sham1> It's also less portable
[12:12:04] *** Quits: Darkcoal (~user@139.64.70.208) (Ping timeout: 250 seconds)
[12:12:12] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:14:00] *** Joins: bud (~bud@user/bud)
[12:14:28] <bud> hello people! i am trying to do a "reversed tilde expansion thing".
[12:14:43] <bud> so /home/bud/something -> ~/something
[12:14:46] <bud> https://0x0.st/ooMc.txt
[12:15:32] <bud> link is what i have now, and it seems to work, is it ok?
[12:15:34] *** Joins: Darkcoal (~user@130.164.163.44)
[12:16:48] *** Joins: kzootech (~contact@kzoo.tech)
[12:16:51] <apotheon> holy crap, I've seen someone using GNU code style
[12:16:57] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 240 seconds)
[12:17:00] <apotheon> I need sleep.  G'night.
[12:17:10] *** Joins: xSavitar (~xSavitar@kinserve.com)
[12:17:27] <bud> not sure why it indented the braces, in the paste.
[12:17:34] *** xSavitar is now known as Guest1911
[12:17:43] *** Quits: malina (~malina@user/malina) (Quit: malina)
[12:18:03] *** Joins: clockworkgirl (sophie@funkykitty.net)
[12:18:04] *** Quits: clockworkgirl (sophie@funkykitty.net) (Changing host)
[12:18:04] *** Joins: clockworkgirl (sophie@user/clockworkgirl)
[12:18:40] <bud> i mean, is my memmove(text+1 ... fine to ok to do here?
[12:21:23] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:21:56] *** Joins: Nutte35 (~Nutte@202.153.82.158)
[12:23:30] <sham1> Yea
[12:24:38] <sham1> memmove is exactly for this kind of "copying overlapping regions" thing. Although you might want to add a \0 after the newly minted path
[12:25:09] <bud> thanks sham1
[12:31:14] *** Parts: nathanael (~nathanael@user/nathanael) ()
[12:31:32] *** Joins: constxd_ (~brad@142.167.170.88)
[12:32:31] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[12:33:50] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:37:30] <bud> took a minute to write that code including manpage reading. wasted 20 minutes googling "C programming tilde expansion HOME to ~".
[12:37:51] <bud> too many unix buzzwords
[12:39:40] <bud> https://0x0.st/ooMQ.png
[12:40:27] *** Quits: youssef (~youssef@26.173.112.78.rev.sfr.net) (Ping timeout: 256 seconds)
[12:42:10] *** ozzz is now known as omga
[12:44:53] *** Quits: mixfix41 (~homefame@user/mixfix41) (Quit: Lost terminal)
[12:46:07] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 256 seconds)
[12:46:18] *** Quits: jkotra (~jkotra@122.169.214.214) (Ping timeout: 250 seconds)
[12:46:22] *** Quits: andjjj23_ (~irc@107.170.228.47) (Ping timeout: 268 seconds)
[12:46:41] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[12:47:19] *** Joins: jkotra (~jkotra@122.169.214.214)
[12:48:13] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[12:48:40] *** Joins: klys (~mdasoh@show.op8.us)
[12:48:52] *** Joins: dstein64 (~dstein64@dannyadam.com)
[12:48:59] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:17c:7455:c683:1f78)
[12:49:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[12:49:52] *** Joins: inlight (~inlight@user/inlight)
[12:50:33] *** Joins: teut (~teut@2401:4900:1c68:6b85:29a1:5e80:8386:5c5c)
[12:51:37] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[12:53:16] *** Joins: mixfix41 (~homefame@user/mixfix41)
[12:54:50] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[12:55:11] *** Quits: teut (~teut@2401:4900:1c68:6b85:29a1:5e80:8386:5c5c) (Ping timeout: 256 seconds)
[12:55:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[12:55:22] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[12:55:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[12:56:34] *** Joins: nyah (~nyah@94.6.71.219)
[12:56:57] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:59:07] *** Quits: Nutte35 (~Nutte@202.153.82.158) (Read error: Connection reset by peer)
[13:01:42] *** Joins: andjjj23_ (~irc@107.170.228.47)
[13:01:44] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[13:01:59] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 256 seconds)
[13:02:10] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[13:02:21] *** Joins: klys (~mdasoh@show.op8.us)
[13:04:18] *** Joins: dstein64 (~dstein64@dannyadam.com)
[13:05:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[13:06:51] *** Quits: alch (~alch@151.82.52.97) (Read error: Connection reset by peer)
[13:07:37] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 240 seconds)
[13:08:57] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:214a:84c4:2877:e621:cda5) (Ping timeout: 240 seconds)
[13:09:47] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:17c:7455:c683:1f78) (Quit: Konversation terminated!)
[13:11:05] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:11:28] *** Joins: alch (~alch@151.38.114.7)
[13:11:41] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:12:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:12:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:12:36] *** Joins: wroathe (~wroathe@user/wroathe)
[13:14:37] *** Quits: jkotra (~jkotra@122.169.214.214) (Ping timeout: 240 seconds)
[13:16:54] *** Quits: BinarySavior_ (~BinarySav@josh.vet) (Ping timeout: 256 seconds)
[13:17:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[13:18:15] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[13:18:53] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:2422:94d7:a47d:d907:5840)
[13:18:57] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:21:37] *** Joins: jkotra (~jkotra@122.169.214.214)
[13:22:01] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:22:57] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:2422:94d7:a47d:d907:5840) (Ping timeout: 240 seconds)
[13:24:08] *** Joins: fe23 (~fe23@2409:8a34:461:9470:2160:5174:9a76:bc7)
[13:25:51] *** Joins: strajder (~strajder@user/strajder)
[13:33:17] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 240 seconds)
[13:33:43] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 256 seconds)
[13:33:58] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 250 seconds)
[13:35:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:39:00] *** Quits: andjjj23_ (~irc@107.170.228.47) (Ping timeout: 256 seconds)
[13:40:21] <mar77i> eww, pidgin on retard wm
[13:40:32] <mar77i> uh oh. did I type that out loud?
[13:41:03] <mar77i> I'm gonna take a break :)
[13:43:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:44:18] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[13:50:55] *** Joins: chenqisu12 (~bhca7d@183.217.201.21)
[13:52:19] *** Joins: andjjj23_ (~irc@107.170.228.47)
[13:52:20] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:53:14] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[13:53:33] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[13:54:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[13:54:59] *** Joins: inlight (~inlight@157.35.66.128)
[13:54:59] *** Quits: inlight (~inlight@157.35.66.128) (Changing host)
[13:54:59] *** Joins: inlight (~inlight@user/inlight)
[13:55:19] *** Joins: klys (~mdasoh@show.op8.us)
[13:55:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:55:49] *** Joins: dstein64 (~dstein64@dannyadam.com)
[13:59:37] *** Joins: ko (~i.am@user/marlboro)
[14:00:32] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[14:08:27] *** Joins: vysn (~vysn@user/vysn)
[14:11:17] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:11:52] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:13:32] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:14:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:14:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:15:05] *** Joins: teut (~teut@2401:4900:1c68:6b85:29a1:5e80:8386:5c5c)
[14:15:18] *** Lord_of_Life_ is now known as Lord_of_Life
[14:15:47] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:16:03] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:16:47] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[14:27:40] <bud> i3wm is high IQ.
[14:29:12] *** Joins: paulo (paulo@paulo.jujube.ircnow.org)
[14:29:41] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[14:30:37] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:31:28] *** Quits: malloy (~jimery@116.30.223.163) (Quit: WeeChat 3.0)
[14:32:36] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:22] *** Joins: csrf (~csrf@user/csrf)
[14:33:57] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:34:33] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:43:20] *** Joins: synbiose (~synbiose@user/synbiose)
[14:44:10] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 250 seconds)
[14:44:51] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[14:46:43] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:47:44] <tk> wow mar77i is back
[14:57:22] *** Guest1911 is now known as xSavitar
[14:57:28] *** Quits: xSavitar (~xSavitar@kinserve.com) (Changing host)
[14:57:28] *** Joins: xSavitar (~xSavitar@user/xsavitar)
[14:58:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:59:36] *** Joins: sheb (~sheb@31.223.228.71)
[15:04:59] *** Joins: Guest8 (~Guest8@197.47.58.19)
[15:05:00] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:06:30] *** Guest8 is now known as Khaled_
[15:06:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:06:50] *** Khaled_ is now known as Khaled__
[15:06:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:07:17] *** Parts: Khaled__ (~Guest8@197.47.58.19) ()
[15:08:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:12:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Read error: Connection reset by peer)
[15:13:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:15:15] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[15:24:33] *** Joins: kit-ten (~u0_a391@2600:380:5e31:4b63:b498:db7f:f13b:e4c4)
[15:26:40] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 256 seconds)
[15:28:17] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:29:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:29:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:29:21] *** Joins: wroathe (~wroathe@user/wroathe)
[15:34:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:34:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:35:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:33] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[15:39:08] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[15:40:04] *** Joins: inlight (~inlight@157.35.66.128)
[15:40:04] *** Quits: inlight (~inlight@157.35.66.128) (Changing host)
[15:40:04] *** Joins: inlight (~inlight@user/inlight)
[15:40:09] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Client Quit)
[15:40:20] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[15:42:37] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 240 seconds)
[15:43:56] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[15:51:40] *** Joins: lunix00 (~lunix00@177.200.75.136)
[15:54:58] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Quit: This computer has gone to sleep)
[15:57:50] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[15:58:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:58:18] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[15:58:24] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:59:36] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[16:01:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[16:04:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:05:26] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[16:06:09] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[16:08:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Quit: Quit)
[16:16:12] *** Joins: Klinda (~superleag@user/klinda)
[16:20:12] *** Joins: Viewday11 (~Viewday@user/viewday)
[16:21:48] *** Quits: ko (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R^2->0)
[16:26:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[16:26:52] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:27:53] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[16:31:14] *** Joins: elemongw (~elemongw@20.107.36.50)
[16:35:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:36:06] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Read error: No route to host)
[16:36:59] *** Joins: marlboro (~i.am@191.248.124.154)
[16:36:59] *** Quits: marlboro (~i.am@191.248.124.154) (Changing host)
[16:36:59] *** Joins: marlboro (~i.am@user/marlboro)
[16:38:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:38:39] <dave0> https://arxiv.org/abs/2201.07845
[16:38:41] <candide> Title of dave0's link: [2201.07845] How ISO C became unusable for operating systems development
[16:41:24] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:42:02] *** Quits: chenqisu12 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[16:43:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[16:43:34] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:44:40] *** Joins: echoSMILE (uid504326@user/echosmile)
[16:44:40] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[16:45:38] *** Quits: strajder (~strajder@user/strajder) (Quit: later)
[16:51:11] *** Quits: nicode (~nic@2607:f2c0:9479:8500:1518:aee1:e163:8981) (Ping timeout: 268 seconds)
[16:52:02] *** Joins: teut93 (~teut@2401:4900:1c68:6b85:29a1:5e80:8386:5c5c)
[16:53:30] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:53:53] *** Joins: seninha (~seninha@user/seninha)
[16:54:48] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:55:27] *** Quits: teut (~teut@2401:4900:1c68:6b85:29a1:5e80:8386:5c5c) (Ping timeout: 256 seconds)
[16:56:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:56:51] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[16:57:15] <sham1> ISO C is plenty usable for OS development. One just needs to play by the rules
[16:57:43] <clarity> vyodaiken never gets tired of complaining about C
[16:57:45] <clarity> :D
[16:59:03] *** Joins: Atque (~Atque@user/atque)
[17:01:20] <vysn> is the C programming language book by Brian and Ritchie second edition still relevant?
[17:01:46] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[17:01:53] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:02:29] *** Joins: liba (~liba@user/liba)
[17:03:24] <sham1> Yes
[17:04:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d502:6835:efc4:ea15)
[17:06:02] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 240 seconds)
[17:07:15] *** Quits: alch (~alch@151.38.114.7) (Read error: Connection reset by peer)
[17:08:09] *** Quits: lunix00 (~lunix00@177.200.75.136) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:10:02] *** Joins: stonkey (~stonkey@user/stonkey)
[17:10:40] *** Joins: ivl (~ivl@59.59.132.242)
[17:11:33] *** Quits: ivl (~ivl@59.59.132.242) (Remote host closed the connection)
[17:11:48] *** Joins: alch (~alch@151.34.121.214)
[17:14:02] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-110-12.mobile.abo.orange.fr)
[17:15:25] *** Joins: badsektor (~badsektor@user/badsektor)
[17:16:23] *** Quits: cosimone (~user@93-47-230-23.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[17:17:08] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Ping timeout: 250 seconds)
[17:17:11] *** Joins: frost (~frost@user/frost)
[17:19:42] *** Joins: pulse (~pulse@user/pulse)
[17:20:05] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[17:20:23] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[17:21:50] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:22:17] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:23:17] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[17:24:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d502:6835:efc4:ea15) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:24:16] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:25:12] <zwr> ultimately it's a timeless book, but you'll need more than that to learn C
[17:26:01] *** omga is now known as om3ga
[17:26:10] *** Joins: Nutte35 (~Nutte@202.153.82.158)
[17:27:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[17:28:01] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[17:30:17] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Ping timeout: 240 seconds)
[17:31:17] <sham1> An algorithms book of sorts should also be read
[17:31:45] <sham1> That's oft forgotten by programmers until too late
[17:33:19] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[17:33:23] *** Quits: cosimone (~user@93-47-230-23.ip115.fastwebnet.it) (Remote host closed the connection)
[17:33:29] <sokan> I've been told that fscanf is bad practice. Does this stand?
[17:35:15] *** Joins: cosimone (~user@93-47-230-23.ip115.fastwebnet.it)
[17:35:45] <omegatron> did they give you reasons - or just told you so?
[17:36:49] *** Quits: teut93 (~teut@2401:4900:1c68:6b85:29a1:5e80:8386:5c5c) (Ping timeout: 256 seconds)
[17:37:44] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:38:13] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Quit: Leaving)
[17:38:26] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:39:02] <sokan> "The fscanf() function is generally considered unsafe for string handling; it's safer to use fgets() to get a line of input and then use sscanf() to process the input."
[17:39:26] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Remote host closed the connection)
[17:39:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[17:40:07] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[17:40:23] <dave0> sokan: that complaint is pretty valid for scanf, but using fscanf on a formatted file is imho fine
[17:40:47] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[17:41:34] *** Parts: Mindiell (~Mindiell@82-64-206-161.subs.proxad.net) ()
[17:42:15] <vysn> is this following a relevant course of action? or is just a waste of time to try and learn all these things to be exceptional in C and programming in general?
[17:42:19] <dave0> the problem is user input is kinda unpredictable
[17:42:40] <vysn> https://teachyourselfcs.com
[17:42:43] *** Joins: badsektor (~badsektor@user/badsektor)
[17:43:11] <dave0> learning a new language is always gonna .. well hopefully teach you something new
[17:43:20] *** tempus_fol is now known as tempora
[17:44:28] *** Joins: et09 (~et09@user/et09)
[17:44:36] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[17:45:23] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:45:44] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: CVE reboot :))
[17:46:57] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:47:14] <sham1> I'd even use fgets and sscanf with files, because even with a formatted file, you can still get weird stuff
[17:47:43] <sham1> Although I don't know if I'd use sscanf either, I'd probably just tokenise and parse like normal
[17:50:05] <pragma-> Interesting post on HN today: https://arxiv.org/pdf/2201.07845.pdf
[17:51:11] <clarity> rewrite it in rust
[17:51:20] <sham1> pragma-: dave0 already posted that above
[17:51:37] <pragma-> oh
[17:51:41] <sham1> Also yeah, orange site users would probably tell you to RIIR
[17:51:57] <sham1> Because Orange Site likes the Orange Crab
[17:52:12] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[17:53:37] <sham1> > Before anyone of the vegans open their mouth: no, Rust is not the solution.
[17:53:47] <sham1> At least HN is somewhat self-aware
[17:53:49] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[17:53:56] <sham1> Somewhat
[17:53:56] <clarity> > Given that this has been going on for a long time, my hope is that Rust will be the next systems programming language.
[17:53:59] <clarity> :D
[17:54:08] <omegatron> heretic!
[17:54:19] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[17:54:24] <clarity> I wonder how many of the rustwanters actually know Rust and C
[17:54:42] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[17:54:43] <clarity> I'm especially suspicious when they seem to think that Rust isn't complex
[17:55:09] <sham1> It's like yeah, C has complicated rules imposed by the standard but a) there actually *is* a standard, 4 of them with three actually in usage
[17:55:32] <nomagno> I find claims equating coding in C to coding in Rust to be a bit insane
[17:55:35] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[17:55:36] <nomagno> It's a systems programming language.
[17:55:44] <nomagno> The rest is up for debate
[17:56:04] <sham1> And b) if we talk complexity, Rust has no right to talk. It has many neat qualities but it certainly doesn't lack complexity
[17:56:17] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Client Quit)
[17:56:47] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:57:25] <sham1> It's more like C++ or D in terms of complexity. And all three languages have their virtues but God damn, they also have oodles of complexity
[17:57:32] *** Joins: badsektor (~badsektor@user/badsektor)
[17:57:47] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 268 seconds)
[17:58:34] <nomagno> The Rust ecosystem seems to be (partly) a cult following thay aims to write a replacement for everything
[18:00:13] <bud> cargo .. cult
[18:00:37] <sham1> Rewriting things that arguably don't need rewrites. Especially by people who don't necessarily have the domain knowledge
[18:01:09] *** Joins: rcoote (~rcoote@2a02:908:690:a140:4f69:107:61d1:b37b)
[18:01:53] <sham1> And of course rewriting things like ls or grep in Rust makes more sense to me. If anything, it'd be better if these tools actually used actual managed languages
[18:02:05] <sham1> s/more/no/
[18:02:12] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Ping timeout: 250 seconds)
[18:02:37] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[18:02:42] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[18:02:46] <clarity> Well I don't mind rewriting, it's a good way to learn new stuff and try the language.  And sometimes come up with a tool that turns out better than what it replaces.
[18:03:19] *** Joins: killadi (~u0_a161@27.97.169.11)
[18:04:02] <sham1> This is true, although one may also end up with a lot of superfluous stuff
[18:04:22] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[18:04:30] <clarity> Yea.  But it's not as if the world weren't full of it already.  Thankfully I can ignore most of it
[18:04:33] <clarity> Heh https://news.ycombinator.com/item?id=30023832
[18:04:34] <candide> Title of clarity's link: > It's admiring how quickly they fix these This is a weird comment, especially o... | Hacker News
[18:05:06] <dave0> gnu rewrote unix :-p
[18:05:21] <sham1> And look at the mess it left behind
[18:05:33] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[18:05:38] <bud> C is a rewrite of B
[18:05:52] <sham1> RMS should have pushed for more Scheme
[18:05:55] <nomagno> C is a language, not an implementation
[18:06:24] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:06:31] <nomagno> GNU is a complete technical mess, yes
[18:06:43] <nomagno> I get dizzy every time I take a look at the code
[18:07:11] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Remote host closed the connection)
[18:07:16] <nomagno> Specially coreutils and gcc
[18:08:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[18:08:20] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[18:08:29] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[18:08:53] <sham1> glibc is always a trip
[18:08:55] *** Joins: inlight (~inlight@157.35.66.128)
[18:08:55] *** Quits: inlight (~inlight@157.35.66.128) (Changing host)
[18:08:55] *** Joins: inlight (~inlight@user/inlight)
[18:09:12] <sham1> And it's like, I never look forwards to spelunking there
[18:09:34] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Read error: Connection reset by peer)
[18:11:06] <sham1> And as for the mess that is GNU coreutils, I can remind everyone here that their implementation of `true(1)` can fail
[18:11:15] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[18:11:34] *** killadi is now known as ott
[18:11:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:11:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:11:59] *** Joins: wroathe (~wroathe@user/wroathe)
[18:12:11] <bud> the OG true was just a empty shell script if i remember correctly.
[18:13:59] <sham1> That could work yeah
[18:14:40] *** Joins: minto (~mintograd@47.201.5.61)
[18:14:48] <sham1> Of course the implementation in C is literally one line, `int main(void) { return 0; }`
[18:15:02] <sham1> I suppose that because `main` is special, one could even leave the return 0 out
[18:15:21] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:15:21] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Quit: institute budget)
[18:15:25] <sham1> Ah yes
[18:15:39] <sham1> ,cc -std=c2x int main(void) {}
[18:15:42] <candide> sham1: Success (no output).
[18:15:59] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:c8a8:b569:60e3:f67f)
[18:16:31] *** Joins: badsektor (~badsektor@user/badsektor)
[18:16:42] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[18:16:52] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[18:17:08] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Read error: Connection reset by peer)
[18:17:31] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Ping timeout: 268 seconds)
[18:17:32] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 240 seconds)
[18:17:38] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[18:17:49] <dave0> what about the --help and --version flags?
[18:18:10] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[18:18:31] *** Quits: Nutte35 (~Nutte@202.153.82.158) (Read error: Connection reset by peer)
[18:20:02] <sham1> Indeed, those are a thing that GNU insists on, and those incidentally are where GNU's true(1) implementation can fail
[18:20:26] <dave0> lol
[18:21:08] <dave0> hmm maybe you can link false to true and save a disk block
[18:21:42] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-110-12.mobile.abo.orange.fr) (Ping timeout: 250 seconds)
[18:23:53] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[18:24:04] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Client Quit)
[18:25:03] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e5b7:2049:7be:2775)
[18:25:03] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e5b7:2049:7be:2775) (Changing host)
[18:25:03] *** Joins: skapata (~Skapata@user/skapata)
[18:25:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Quit: WeeChat 3.3)
[18:26:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:27:15] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:c17:d8ca:f795:73f0)
[18:27:30] <badsektor> any help with this? https://onlinegdb.com/Xy1nhHmih
[18:28:18] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[18:30:39] *** Quits: alch (~alch@151.34.121.214) (Ping timeout: 256 seconds)
[18:30:53] *** Joins: alch (~alch@151.34.121.214)
[18:31:24] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[18:32:03] <Xgc> badsektor: What is the value of token at line 51?
[18:32:25] <badsektor> let me see
[18:32:41] <Xgc> badsektor: Read the code first.  Tell me what you think that value should be.
[18:32:52] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:33:39] <badsektor> it is going to be the first word in "line" string
[18:33:50] <Xgc> badsektor: Check again.
[18:34:15] <Xgc> badsektor: When do you set token to point to that part of the string?
[18:34:31] <badsektor>         token=strtok(line," ");
[18:34:38] <badsektor> in line 50 i have this
[18:35:31] <Xgc> badsektor: What happens when strtok gets to the end of the string being parsed?
[18:35:40] *** Quits: andi_ (~andi@2a01:4f8:c0c:a014::2) (Changing host)
[18:35:40] *** Joins: andi_ (~andi@user/andi/x-3467420)
[18:36:33] <Xgc> badsektor: What are the possible return values of strtok?
[18:36:43] *** Joins: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411)
[18:37:33] <markand> I strongly advise to not use strtok
[18:37:34] <badsektor> it returns NULL
[18:37:41] <markand> strtok_r if you have POSIX portability in mind
[18:38:34] <badsektor> Xgc: in this input the format is regular: it is like an assembly language, like "snd a", and "set a 5"
[18:38:49] <badsektor> it is an AOC question: https://adventofcode.com/2017/day/18
[18:38:50] <candide> Title of badsektor's link: Day 18 - Advent of Code 2017
[18:39:13] <badsektor> so i expect to run strtok only twice or three times
[18:39:23] <badsektor> two words or three words
[18:39:35] <badsektor> markand: ok i will look into it
[18:39:41] *** Joins: Nutte35 (~Nutte@202.153.82.158)
[18:40:00] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:40:16] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[18:40:33] *** Quits: Nutte35 (~Nutte@202.153.82.158) (Read error: Connection reset by peer)
[18:40:48] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Read error: Connection reset by peer)
[18:40:52] *** Joins: Nutte35 (~Nutte@202.153.82.158)
[18:41:26] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[18:47:25] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[18:48:04] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Client Quit)
[18:49:35] <apotheon> 03:57 < bud> i3wm is high IQ.
[18:49:44] <apotheon> bud: I don't disagree.
[18:51:13] <teocle> https://raw.githubusercontent.com/coreutils/coreutils/master/src/true.c
[18:53:07] <teocle> check false.c too
[18:54:01] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[18:54:37] <cassepipe> Hi ! I have heard that I should avoid globals so I thought of a little scheme to get the benefit of globals without the risks but I would like your opinion on it : https://paste.gg/p/cassepipe/a461974b6ea44b81870c16537099d560
[18:55:29] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[18:56:44] <caze> cassepipe: Can you please say more about the problem that you're trying to solve?
[18:56:45] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[18:57:36] <cassepipe> caze: Not really a problem but I would like to know your opinion. Is what I'm about to do good practice or should be avoid because of X and Y ?
[18:58:23] <cassepipe> The idea is to have a function returning a static struct so you call the function and it only return a copy of the data so it's read only. But I wanted a way to set its value at the start of my program depending on the args it received. So I thought about using a flag that allows you to only define the value once.
[18:58:36] <cassepipe> I guess you could call it runtime initialized const
[18:58:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:59:13] <GyrosGeier> cassepipe, that's basically a singleton
[18:59:26] <GyrosGeier> except it's copied all the time
[18:59:47] <cassepipe> GyrosGeier: I have been looking for a name for that but could not find one. Thanks.
[18:59:48] <caze> The problem with "globals" is that you can only have singletons.
[18:59:58] <GyrosGeier> the actual object is still a global, just not accessible
[19:00:48] <caze> cassepipe: You don't really need defined.
[19:00:49] <GyrosGeier> what we did on the Amiga to build "pure" executables was to define a struct with all the globals, allocate one of these on start and pass it around
[19:01:04] <cassepipe> caze: So what is the problem ?
[19:01:16] <caze> cassepipe: That is what I was asking you.
[19:01:28] <caze> cassepipe: What problem does your solution solve?
[19:01:54] <cassepipe> caze: Having read-only globals I can set at the start of my program
[19:02:06] <GyrosGeier> avoiding globals means that "size myprogram" reports 0 for data and bss size
[19:02:17] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[19:02:18] <cassepipe> Well global inasmuch as the other files have access to function
[19:03:00] <cassepipe> GyrosGeier: I get your point but having data in bss is not really a problem in itself is it ?
[19:03:10] <GyrosGeier> neither is global data
[19:03:24] <GyrosGeier> basically, the mechanism is there for people to use it
[19:03:46] <GyrosGeier> a typical program consists of text,data and bss
[19:04:02] <GyrosGeier> the on-disk representation is text + data
[19:04:05] <caze> cassepipe: Are you going to make one of these functions for every instance of t_time_info that you have?
[19:04:21] <apotheon> 07:12 < vysn> https://teachyourselfcs.com
[19:04:22] <GyrosGeier> and the in-memory representation is read-only test, and read-write data + bss
[19:04:41] <apotheon> vysn: This is not for the faint of heart, if it *starts* with SICP to learn "programming".
[19:04:55] <caze> Not a bad way to start.
[19:05:02] <cassepipe> caze: No, I just instance that different threads can read from without having to pass it around
[19:05:14] <GyrosGeier> so initialized data is copied to the beginning of the data section at program start, and the bss section is just more global data
[19:05:28] <GyrosGeier> except that it is zero-initialized and doesn't take up space on disk
[19:05:29] <caze> GyrosGeier: You're in the weeds.
[19:05:36] <GyrosGeier> somewhat
[19:05:52] <caze> C doesn't really have globals, technically.
[19:06:06] <cassepipe> caze: Just one instance I meant
[19:06:17] <GyrosGeier> I'm trying to explain that bss isn't any better than initialized data
[19:06:30] <caze> Why? Nobody asked about that stuff.
[19:06:58] <markand> very strange convention to prefix types with t_
[19:07:32] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[19:07:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:07:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:07:43] *** Joins: wroathe (~wroathe@user/wroathe)
[19:07:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[19:08:01] <Svitkona> apotheon, it's very classical
[19:08:19] <cassepipe> markand: School convention. I guess it's better to have one. Can't find a convention that everyone will like. On the other Hand, custom syntax highlighting is rather easy on Vim.
[19:09:21] <apotheon> Saying you should start with SICP is actually unstatedly establishing a particular level of math education as a prerequisite.
[19:09:56] <apotheon> . . . and probably a recently undertaken math education, so you haven't forgotten stuff it mentions as though it's common knowledge.
[19:10:30] <caze> apotheon: Several schools start their CS program with SICP.
[19:10:36] <caze> There isn't that much math.
[19:10:40] <apotheon> SICP is great, but it's not for beginners.
[19:10:54] <apotheon> caze: It's not a lot of math.  It just depends on unspoken math requirements.
[19:11:05] <caze> Like what?
[19:11:28] <apotheon> I don't recall at this point, but I remember being not far into SICP (years after my last schooling) and thinking
[19:11:36] <apotheon> "I think I remember that term."
[19:12:09] <apotheon> . . . then having to reverse-engineer what it was talking about to continue.
[19:12:12] *** Joins: mrig_ (~mrig@lfbn-orl-1-667-234.w86-220.abo.wanadoo.fr)
[19:12:22] <caze> I know of at least two schools that started their freshman with SICP, and I did SICP my sophomore year.
[19:12:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:12:37] <apotheon> How far did a freshman class get through SICP?
[19:12:59] <apotheon> . . . and was it timed to depend on a co-requisite?
[19:13:08] <caze> As far as their curriculum? I have no idea.
[19:13:17] <apotheon> (Yes, I've seen co-requisite classes in school.)
[19:13:43] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:13:48] <cassepipe> GyrosGeier: You said "Except it's copied all the time" but I think I have read somewhere, a book about raytracing maybe, that passing around struct instead of pointers was fine because either 1) copying was very fast or just as fast as querying data from a pointer 2) or the compiler would optimize the code and choose to just pass a pointer to the struct instead if that made sense.
[19:14:15] <cassepipe> As long it wasn't really big structs
[19:14:53] *** Quits: mrig_ (~mrig@lfbn-orl-1-667-234.w86-220.abo.wanadoo.fr) (Changing host)
[19:14:53] *** Joins: mrig_ (~mrig@user/mrig)
[19:14:53] *** Quits: mrig (~mrig@user/mrig) (Killed (tantalum.libera.chat (Nickname regained by services)))
[19:14:53] *** mrig_ is now known as mrig
[19:15:03] <apotheon> 07:36 < nomagno> I get dizzy every time I take a look at the code
[19:15:14] <apotheon> Gaze not too long into GNU sources, lest they also gaze into you.
[19:15:28] <apotheon> 07:37 < nomagno> Specially coreutils and gcc
[19:15:42] <apotheon> I strongly recommend against ever opening up GNU Screen.
[19:16:19] <apotheon> sham1: I'm curious about how GNU true can fail, but not curious enough to open up the source and go spelunking.
[19:16:57] *** Joins: Hard_Math (~Hard_Math@31.143.47.70)
[19:17:05] *** Quits: Hard_Math (~Hard_Math@31.143.47.70) (Read error: Connection reset by peer)
[19:17:39] *** Joins: jkotra4 (~jkotra@117.98.208.88)
[19:17:48] <rkta> apotheon: /* Note true(1) will return EXIT_FAILURE in the edge case where writes fail with GNU specific options.  */
[19:18:24] <pragma-> /bin/true does not need --help or --version or localization.
[19:18:32] <pragma-> it needs to just return 1 from main()
[19:18:37] <pragma-> GNU has lost the plot.
[19:18:45] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:4cb5:1453:777d:3b64) (Read error: Connection reset by peer)
[19:19:02] <teocle> hmm, https://www.gnuplot.info/
[19:19:17] *** Quits: jkotra (~jkotra@122.169.214.214) (Ping timeout: 240 seconds)
[19:19:17] *** jkotra4 is now known as jkotra
[19:19:26] *** Joins: freakazoid343 (~matt@2603:9000:cf03:86c3:4cb5:1453:777d:3b64)
[19:21:57] *** Joins: kubrickdave_ (~kubrickda@80-121-13-33.adsl.highway.telekom.at)
[19:23:47] <apotheon> rkta: oh, lovely
[19:23:54] <apotheon> rkta: thanks for that
[19:24:13] <apotheon> teocle: I think GNU lost that, too.
[19:24:14] <rkta> np
[19:25:13] <sham1> pragma-: true needs to return 0. It's false that needs to return… well, non-zero, so 1]
[19:25:28] <sham1> Because shell is weird
[19:25:31] * pragma- throws his hands in the air.
[19:25:40] *** Joins: mahmutov (~mahmutov@37.155.59.224)
[19:25:48] <rkta> btw, here is the openbsd true: https://raw.githubusercontent.com/openbsd/src/master/usr.bin/true/true.c
[19:26:00] <sham1> That's so clean
[19:26:05] <sham1> By comparison
[19:27:23] <kubrickdave_> out of curiosity, on a system without memory protection and memory mapped IO, a stack overflow (i.e. infinite recursion) could theoretically cause hardware damage (writing trash to device registers), right?
[19:28:26] <pragma-> except for the exceedingly stupid parentheses.
[19:28:39] * pragma- stares the fuck at `return (0);` and is extremely vexed
[19:28:55] *** Joins: Guest47 (~Guest47@80-121-13-33.adsl.highway.telekom.at)
[19:29:05] <pragma-> pointlessly declaring argc and argv too
[19:29:12] <clarity> meow.
[19:29:39] <pragma-> Apparently that's version 1.1. I can only imagine at what horrors 1.0 contained.
[19:30:04] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:30:56] <rsjw> maybe return() is a macro
[19:31:01] <rsjw> </troll>
[19:31:15] <teocle> good thing it's in the public domain now
[19:31:20] <markand> cassepipe, never seen t_ prefixes in the wild
[19:31:26] *** kubrickdave_ is now known as kubrickdave
[19:31:51] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Read error: Connection reset by peer)
[19:31:53] <markand> don't trust schools too much, professors are widely out of date
[19:31:58] <markand> especially in C++ area
[19:32:10] *** Quits: Nutte35 (~Nutte@202.153.82.158) (Read error: Connection reset by peer)
[19:32:14] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:33:59] <apotheon> OpenBSD true.c contains precisely half as many non-whitespace characters in the implementation code as in the comments in the file.
[19:34:12] <apotheon> clean indeed
[19:34:29] <apotheon> could shave a character by using **argv
[19:35:43] *** Quits: Guest47 (~Guest47@80-121-13-33.adsl.highway.telekom.at) (Quit: Client closed)
[19:35:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:36:13] <apotheon> two more with parenthesis management, as pragma- points out
[19:36:34] <apotheon> but yeah, I noticed the pointless argc/argv in there
[19:36:36] <apotheon> weird
[19:36:37] <ChoHag_> 'main() {' would work.
[19:36:38] <pragma-> could just replace the entire `int argc, char *argv[]` thing with `void`
[19:36:41] * pragma- nods
[19:37:14] *** Quits: freakazoid343 (~matt@2603:9000:cf03:86c3:4cb5:1453:777d:3b64) (Quit: Leaving)
[19:37:19] *** Joins: inlight (~inlight@user/inlight)
[19:37:24] <apotheon> 09:01 < markand> especially in C++ area
[19:37:25] <caze> https://cvsweb.openbsd.org/src/usr.bin/true/Attic/true.sh
[19:37:26] <candide> Title of caze's link: CVS log for src/usr.bin/true/Attic/true.sh
[19:37:44] <cassepipe> markand: This the 42 school network. We self-teach each other and have to read each other's code. Hence the convention.
[19:37:52] <apotheon> My first clue to not trust profs was when one told me that, because we have C++, we can shitcan C.
[19:37:58] *** Joins: nmi (~deflected@user/deflected)
[19:38:07] <fizzie> They should've written the return statement as `return-0;`, I think that would look funny.
[19:38:32] *** Quits: deflected_ (~deflected@user/deflected) (Ping timeout: 240 seconds)
[19:38:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:38:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:38:45] *** Joins: wroathe (~wroathe@user/wroathe)
[19:39:17] <apotheon> Is "look funny" a goal?
[19:39:45] <apotheon> It'd probably look like an opportunity to do something stupid if one was looking at the code very late in a high-workload day.
[19:40:23] <teocle> caze: I wonder how much use those binaries get anyway; it's usually just the shell builtins getting called
[19:40:43] <emias> apotheon: NetBSD wins by using a higher level language: https://github.com/NetBSD/src/blob/trunk/usr.bin/true/true.sh
[19:41:07] <cassepipe> So I have read many reasons on why Singletons are bad but I don't think they apply in my case. I just want runtime initialized then const data for just one instance so I don't have to "manage" it since I neither have to free it nor to handle its state after it's set. Seems like a legit use case.
[19:41:15] <emias> Avoids the potential risks and additional development time involved when using C.
[19:42:51] <caze> lol
[19:43:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:44:08] *** Joins: reset (~reset@user/reset)
[19:44:47] <emias> (Oh missed Attic/true.sh above.)
[19:44:52] <caze> I wonder if anyone else still uses CVS.
[19:46:04] <markand> OpenBSD
[19:46:16] <teocle> fwiw, they have it mirrored to github: https://github.com/openbsd/src
[19:46:18] <candide> Title of teocle's link: GitHub - openbsd/src: Public git conversion mirror of OpenBSD's official CVS src repository. Pull requests not accepted - send diffs to the tech@ mailing list.
[19:46:51] <GyrosGeier> true --help is important so you can use help2man to generate a manpage for it
[19:47:18] <emias> true
[19:47:19] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:47:19] <teocle> true
[19:47:31] <caze> The devs use git/github or whatever for their own development work, but the source tree is still CVS.
[19:47:48] <emias> CVS is just way too awesome to be dropped.
[19:48:10] <GyrosGeier> cassepipe, you can just use normal data for that, the loader code will copy it from the file into memory without requiring you to write extra code
[19:48:10] <caze> I guess everything should be tested enough before it's committed that CVS is all that's needed.
[19:48:26] <GyrosGeier> technically, all data is runtime initialized
[19:48:36] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411) (Remote host closed the connection)
[19:48:54] <markand> https://github.com/libtrue/libtrue
[19:48:55] <candide> Title of markand's link: GitHub - libtrue/libtrue: You can't handle the truth
[19:48:59] *** Joins: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411)
[19:50:05] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:50:28] <teocle> https://github.com/libfalse
[19:50:37] <caze> cassepipe: Technically you don't really need the defined variable, although the alternative is to test each member of time_info for equality with 0.
[19:50:54] <teocle> oh, candide doesn't fetch the title if it 404s
[19:51:52] <caze> cassepipe: A more traditional way to do it is to have separate getter/setter functions.
[19:53:32] <pragma-> teocle: indeed, the bot does smart-titling. It does a fuzzy-match of the URL against the title and if they're at least 50% similiar then the title is not displayed since the URL is understandable to humans.
[19:53:53] <pragma-> It also doesn't repeat titles for recently used URLs.
[19:54:14] <pragma-> It really annoys me how other channels have bots that spew titles unnecessarily all the time.
[19:54:19] * pragma- stares at #perl
[19:54:37] <pragma-> I had to ignore 75% of the bots in Perl because they are so noisy.
[19:54:43] <pragma-> s/Perl/#perl/
[19:54:58] *** Joins: malina (~malina@user/malina)
[19:55:13] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:30c7:6c33:e839:6e4c)
[19:55:13] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:30c7:6c33:e839:6e4c) (Changing host)
[19:55:13] *** Joins: skapate (~Skapata@user/skapata)
[19:55:44] <teocle> that fuzzy-matching bit is clever
[19:56:59] <apotheon> 09:10 < emias> apotheon: NetBSD wins by using a higher level language: https://github.com/NetBSD/src/blob/trunk/usr.bin/true/true.sh
[19:57:02] <apotheon> cool
[19:57:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[19:57:27] <apotheon> emias: until you count the lines of code in sh, I suppose
[19:57:37] <apotheon> not sure that's a valid complaint
[19:59:02] <zwr>  fixed major brain fault: echo -> exit
[19:59:03] <zwr> lol
[19:59:37] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[19:59:40] <pragma-> lol, that commit has been there since 1994
[19:59:46] <pragma-> I would have just wiped the repo and recreated it instead
[20:00:37] <caze> cassepipe: https://ideone.com/AYeyfV
[20:00:52] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:e5c0:594b:f294:f0a)
[20:00:55] <caze> cassepipe: Everything below line 18 would normally be in a separate file.
[20:02:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:02:37] *** Quits: rcoote (~rcoote@2a02:908:690:a140:4f69:107:61d1:b37b) (Ping timeout: 240 seconds)
[20:03:23] <emias> "/usr/bin/true and /usr/bin/false are too big." ("12k each") https://www.netbsd.org/cgi-bin/query-pr-single.pl?number=361
[20:03:24] <candide> Title of emias's link: NetBSD Problem Report #361: true and false are 12kb each..
[20:04:56] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:05:02] <zwr> "If I remember correctly, the AT&T "true" was just a big copyright"
[20:05:13] <zwr> "If I remember correctly, the AT&T "true" was just a big copyright notice"
[20:05:15] <zwr> lmao
[20:05:20] <emias> Was just going to mention: Includes an explanation of how this doesn't infringe AT&T's copyright on their implementation which aparently was /bin/sh as well.
[20:05:44] <emias> It's not like you don't learn relevant stuff on IRC.
[20:05:59] <clarity> Yesterday I wrote a freestanding program with about 12 bytes of assembly and somehow the elf file ended up being ~60 kilobytes.
[20:06:03] <rsjw> I think it's hilarious that they were worried about copyright issues for an empty file or for a one-liner of exit 255
[20:06:54] *** justJustache is now known as justache
[20:07:23] *** Joins: theseb (~theseb@c-98-200-200-66.hsd1.tx.comcast.net)
[20:07:44] <emias> Ok last not least 4.4BSD: https://github.com/weiss/original-bsd/blob/master/usr.bin/true/true.c
[20:07:52] <theseb> how define 2 functions in one file that call each other? is the answer always function signatures?
[20:07:54] <teocle> what could have been the reason for making true/false shell scripts?
[20:08:11] <emias> Avoids all that argc/argv bloat, but has macro crap.
[20:08:14] <zwr> smaller file
[20:08:29] <theseb> if func1 calls func2 then func2 MUST be defined before! but what if func2 calls func1...stuck!
[20:08:46] <clarity> Just declare them
[20:08:52] <caze> theseb: Use prototypes.
[20:08:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:08:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:08:59] *** Joins: wroathe (~wroathe@user/wroathe)
[20:09:06] *** Joins: strajder (~strajder@user/strajder)
[20:09:22] <theseb> clarity: is "declare" where you add those 1 liners like....int func1(int a); ??
[20:09:24] <apotheon> rsjw: It was probably a matter of either bureaucratic stupidity (every tool must have the copyright notice) or malicious compliance (fuck my bosses, let's try to copyright an empty file and see if the lawyers ever get annoyed).
[20:09:29] *** Joins: magla (~gelignite@55d4db0b.access.ecotel.net)
[20:09:37] <pony> henlo
[20:10:21] <clarity> theseb: Yep
[20:10:25] <ChoHag_> I expect you'll find the source of the stupidity is the lawyers.
[20:10:43] <clarity> I thought it was a universal human trait
[20:10:55] <rsjw> apotheon: oh I understand AT&T's side of it... it's just boilerplate. I was laughing at the NetBSD side of it, that they were actually concerned about it
[20:11:14] <emias> teocle: Indeed smaller file, that NetBSD issue above has the reasoning: "the minimum shared-library executable size seems to be 12K (3, 4k blocks), which seems to be larger than desirable.."
[20:11:14] <pony> rsjw: but muh kilobytes
[20:12:26] <apotheon> rsjw: Oh, I didn't actually read any of it, so I didn't realize they were worried about the copyright.
[20:12:53] <zwr> just statically linked a true.c and the result is scary, 109K stripped
[20:13:08] <apotheon> wtf
[20:13:13] <apotheon> why in the world
[20:13:33] *** Joins: Akiva (~Akiva@user/Akiva)
[20:13:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:13:49] <caze> cassepipe: Of course to have both get_time_info and set_time_info access the same variable, the variable has to be at file scope.
[20:13:53] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[20:14:06] <caze> candide: But this does not mean that it is global, because as I said before, C doesn't really have globals.
[20:14:15] <candide> c﻿aze, I think not.
[20:14:21] <caze> cassepipe: ^
[20:16:13] <teocle> https://clbin.com/nIKfc
[20:17:09] *** Quits: marlboro (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[20:17:09] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[20:17:17] *** Joins: Nutte35 (~Nutte@202.153.82.158)
[20:17:18] *** Joins: lunix00 (~lunix00@177.200.75.136)
[20:17:48] *** Joins: marlboro (~i.am@user/marlboro)
[20:18:11] <caze> "Noone cares about the file sizes on disk."
[20:19:14] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[20:19:30] *** Quits: fe23 (~fe23@2409:8a34:461:9470:2160:5174:9a76:bc7) (Quit: fe23)
[20:20:03] <teocle> https://clbin.com/wTU5l
[20:20:28] <zwr> teocle: try `cc -static -O2 -Wl,--strip-all -o true true.c`
[20:20:52] <teocle> zwr: 696K
[20:21:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:21:28] <nomagno> https://gist.github.com/xorrbit/2771494
[20:21:30] <candide> Title of nomagno's link: GNU true source · GitHub
[20:21:32] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[20:21:36] <nomagno> apotheon: WHY
[20:22:03] <teocle> nomagno: read the last comment, check out false.c :)
[20:22:22] <teocle> https://raw.githubusercontent.com/coreutils/coreutils/master/src/false.c
[20:23:24] <apotheon> I think what candide said was misleading.  All GNU source is false.
[20:23:30] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[20:24:28] <zwr> hey, at least they saved some lines of code in the false implementation
[20:24:44] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[20:25:13] *** Joins: Alhazred (~Alhazred@86.106.74.37)
[20:26:02] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:295b:27c3:87b1:2b8f) (Ping timeout: 240 seconds)
[20:26:13] *** Joins: Betal (~Betal@user/betal)
[20:27:23] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 256 seconds)
[20:27:40] <nomagno> Now not to do code - The project
[20:27:43] <apotheon> The false.c implementation from GNU is excessively clever.
[20:27:56] <zwr> musl libc is better here, 13360 bytes
[20:28:31] <teocle> it's literally a one-bit difference
[20:28:33] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411) (Remote host closed the connection)
[20:28:37] <nomagno> Oh, what could true and false do? false; echo $?; true; echo $?
[20:28:55] *** Joins: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411)
[20:28:57] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[20:29:20] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:29:52] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:30:24] *** Quits: remedan (~remedan@octo.cafe) (Ping timeout: 256 seconds)
[20:31:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:32:29] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[20:32:55] <fizzie> https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html gets a true/false-y ELF executable down to 45 bytes. By breaking all the rules.
[20:32:56] <candide> Title of fizzie's link: A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux
[20:33:09] *** Quits: ott (~u0_a161@27.97.169.11) (Read error: Connection reset by peer)
[20:33:17] *** Quits: malina (~malina@user/malina) (Quit: malina)
[20:34:26] *** Quits: Nutte35 (~Nutte@202.153.82.158) (Read error: Connection reset by peer)
[20:34:49] *** Joins: Nutte35 (~Nutte@202.153.82.158)
[20:35:25] *** Joins: remedan (~remedan@octo.cafe)
[20:39:30] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:39:47] *** Joins: wroathe (~wroathe@user/wroathe)
[20:40:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:41:06] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[20:41:52] *** Joins: AmR (~AmREiSa@156.199.9.4)
[20:42:20] *** Quits: MrAureliusR_ (~MrAureliu@user/mraureliusr) (Quit: ZNC - https://znc.in)
[20:42:46] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[20:43:49] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[20:43:51] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:44:05] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[20:44:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:44:59] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:45:08] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[20:46:04] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[20:46:26] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 250 seconds)
[20:46:49] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[20:47:02] *** Quits: Major_Biscuit (~MajorBisc@c-001-024-001.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[20:47:05] *** Joins: rgrinberg (~textual@2806:101e:7:2b:8582:352:d913:c6a5)
[20:49:31] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[20:49:32] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[20:49:49] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[20:49:59] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[20:52:47] <cassepipe> caze: Thanks for the example !
[20:56:51] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Ping timeout: 256 seconds)
[20:58:38] *** Quits: rgrinberg (~textual@2806:101e:7:2b:8582:352:d913:c6a5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:28] *** Quits: Nutte35 (~Nutte@202.153.82.158) (Read error: Connection reset by peer)
[21:01:43] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:02:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d502:6835:efc4:ea15)
[21:04:58] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[21:07:58] *** Quits: alch (~alch@151.34.121.214) (Read error: Connection reset by peer)
[21:11:49] *** Quits: Alhazred (~Alhazred@86.106.74.37) (Quit: leaving)
[21:11:54] *** Joins: alch (~alch@pd-18-100-163.service.infuturo.it)
[21:13:58] *** Joins: Alhazred (~Alhazred@86.106.74.37)
[21:15:45] *** Joins: inlight (~inlight@157.35.69.237)
[21:15:45] *** Quits: inlight (~inlight@157.35.69.237) (Changing host)
[21:15:45] *** Joins: inlight (~inlight@user/inlight)
[21:16:12] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[21:16:51] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:17:06] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:18:30] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[21:18:31] *** Joins: mrig (~mrig@user/mrig)
[21:18:32] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Client Quit)
[21:23:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:27:07] *** Joins: rgrinberg (~textual@2806:101e:7:2b:8582:352:d913:c6a5)
[21:27:32] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:29:53] *** Joins: vicfred (~vicfred@user/vicfred)
[21:29:59] *** Joins: constxd (~brad@192.75.101.164)
[21:30:03] <constxd> kings
[21:30:35] <sham1> queens
[21:31:59] *** Joins: Bruda (~Bruda@172.58.60.162)
[21:32:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Ping timeout: 268 seconds)
[21:33:31] *** Joins: Satin (uid193953@user/Seten)
[21:35:30] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Quit: can you please adjust your IRC quit message to be less transphobic?)
[21:36:54] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[21:39:12] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:45:12] *** Joins: wroathe (~wroathe@user/wroathe)
[21:47:05] *** Joins: Akiva (~Akiva@user/Akiva)
[21:47:20] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.156)
[21:47:32] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411) (Ping timeout: 250 seconds)
[21:47:58] *** Quits: almaembe` (~user@1F2EAE36.dsl.pool.telekom.hu) (Ping timeout: 250 seconds)
[21:49:49] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[21:49:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:50:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[21:51:03] *** Joins: inlight (~inlight@157.35.69.237)
[21:51:03] *** Quits: inlight (~inlight@157.35.69.237) (Changing host)
[21:51:03] *** Joins: inlight (~inlight@user/inlight)
[21:51:49] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.156) (Ping timeout: 256 seconds)
[21:52:00] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R/2R->0)
[21:52:45] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[21:55:07] *** Joins: youssef (~youssef@26.173.112.78.rev.sfr.net)
[21:56:03] <Amun-Ra> jokers
[21:57:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:58:33] *** Quits: alch (~alch@pd-18-100-163.service.infuturo.it) (Read error: Connection reset by peer)
[21:58:39] *** Joins: Nutte35 (~Nutte@202.153.82.158)
[22:00:50] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:02:03] *** Joins: alch (~alch@151.38.142.188)
[22:02:57] *** Quits: Dreg- (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[22:03:05] *** Joins: Dreg (~Dreg@fr33project.org)
[22:04:46] *** Joins: kts (~kts@103.73.237.172)
[22:05:02] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[22:05:47] <Jmtrix> let's say i've got lots of source files and each source file has multiple functions. i'm asked to report how much memory each of them uses at its peak. would using -fstack-usage make sense at all?
[22:05:59] *** Joins: raym (~raym@user/raym)
[22:07:08] <oldlaptop> Is it possible the person asking also cares about how much each of them malloc()s?
[22:07:27] <Jmtrix> oldlaptop, there's no malloc. only stack
[22:08:00] <Jmtrix> i guess i could just add up all variables etc and see how much they take up space. but i imagine there's a smarter way
[22:08:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[22:11:16] *** Quits: Bruda (~Bruda@172.58.60.162) (Quit: just checking in. Gotta run.)
[22:11:49] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[22:12:29] *** Joins: Dreg (~Dreg@fr33project.org)
[22:18:03] *** Joins: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411)
[22:20:02] *** Joins: vysn (~vysn@user/vysn)
[22:20:28] *** Quits: stonkey (~stonkey@user/stonkey) (Read error: Connection reset by peer)
[22:22:06] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[22:22:16] *** Joins: Dreg (~Dreg@fr33project.org)
[22:22:30] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[22:22:31] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) ()
[22:25:26] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:f9d7:5bd:fb0b:3411) (Quit: Leaving)
[22:27:00] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[22:31:59] *** Joins: Akuli (~Akuli@213.216.208.31)
[22:33:12] *** Quits: jkotra (~jkotra@117.98.208.88) (Quit: The Lounge - https://thelounge.chat)
[22:33:56] *** Quits: theseb (~theseb@c-98-200-200-66.hsd1.tx.comcast.net) (Ping timeout: 256 seconds)
[22:34:39] *** Joins: jkotra (~jkotra@117.98.208.88)
[22:38:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d502:6835:efc4:ea15) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:40:37] *** Joins: hayden (~hayden@c-71-238-92-143.hsd1.or.comcast.net)
[22:43:21] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[22:43:32] *** Joins: shivesh (~shivesh@user/shivesh)
[22:47:34] *** Quits: rgrinberg (~textual@2806:101e:7:2b:8582:352:d913:c6a5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:50:43] *** Joins: rgrinberg (~textual@2806:101e:7:2b:8582:352:d913:c6a5)
[22:51:14] *** Quits: youssef (~youssef@26.173.112.78.rev.sfr.net) (Ping timeout: 250 seconds)
[22:51:32] *** Quits: tafama (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[22:53:40] *** Joins: tafa (~tafa@user/tafa)
[22:55:36] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[22:55:45] *** Joins: Dreg- (~Dreg@fr33project.org)
[22:57:18] *** Quits: SpringSprocket (~srv@hobby.esselfe.ca) (Remote host closed the connection)
[22:58:14] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Remote host closed the connection)
[23:03:00] *** Joins: aliosablack (~chomwitt@ppp-94-67-1-27.home.otenet.gr)
[23:04:14] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:04:57] *** Quits: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 240 seconds)
[23:05:50] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[23:06:51] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[23:07:07] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[23:07:59] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[23:08:11] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[23:08:28] *** Joins: bick (~kotaman@94.46.203.147)
[23:13:50] *** Quits: Nutte35 (~Nutte@202.153.82.158) (Read error: Connection reset by peer)
[23:18:47] *** Joins: youssef (~youssef@26.173.112.78.rev.sfr.net)
[23:20:50] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[23:25:10] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[23:27:28] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[23:27:31] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:27:37] *** Quits: mahmutov (~mahmutov@37.155.59.224) (Ping timeout: 240 seconds)
[23:30:57] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 240 seconds)
[23:31:48] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[23:32:05] *** Joins: stonkey (~stonkey@user/stonkey)
[23:33:26] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[23:33:37] *** Joins: youssef_ (~youssef@26.173.112.78.rev.sfr.net)
[23:35:02] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[23:36:05] *** Quits: youssef (~youssef@26.173.112.78.rev.sfr.net) (Ping timeout: 256 seconds)
[23:39:50] <constxd> slatt!
[23:40:51] *** Joins: nicode (~nic@2607:f2c0:9479:8500:f5de:3d8e:616d:e80f)
[23:41:09] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:45:19] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[23:50:07] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[23:50:15] *** Quits: hayden (~hayden@c-71-238-92-143.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[23:50:45] *** Joins: bick (~kotaman@94.46.203.147)
[23:50:51] *** Parts: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Leaving)
[23:50:59] <sokan> My code is: http://dpaste.com/28P4FY69J. File that the program reads is: http://dpaste.com/48KEE2PNS. I want the user to enter 2 numbers which the program will scan (the number is 6th column of the file). When it finds these lines that start with ATOM && have CA (in 3rd column) it will store x, y, z coordinates (7th, 8th, 9th columns) and calculate their distance. Does my program seems ok for that?
[23:51:01] <sokan> (PLEASE I know that this is not what C is used for and it's a v. bad way to learn C this way, but it's what I've been asked to do so... :/ )
[23:51:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:51:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:51:55] *** Joins: wroathe (~wroathe@user/wroathe)
[23:54:57] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:56:32] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 240 seconds)
[23:59:54] *** Quits: bick (~kotaman@94.46.203.147) (Quit: Lost terminal)
