[00:02:57] *** Quits: rain3 (~rain3___@2a02:2f09:d101:7300:2e51:8c61:fb63:c9ee) (Ping timeout: 240 seconds)
[00:05:48] <Demosthenex> so, i tried making lazy eval'ed slots on my object, and i defined accessors to cover it. however if with-slot or slot-value is used, it appears to bypass that. how can i trigger that lazy eval?
[00:08:32] *** Quits: kevingal_ (~quassel@2001:770:c0:401:4084:8af8:62d1:2e8) (Ping timeout: 240 seconds)
[00:08:35] <jackdaniel> define slot-unbound method for each and don't initialize them with any value
[00:08:50] <jackdaniel> when slot-unbound method is called then set the slot value and return it
[00:09:48] <Demosthenex> i'll go read on that
[00:09:49] <Demosthenex> ty
[00:23:48] *** Quits: wacki (~wacki@87.122.88.237) (Quit: Leaving.)
[00:26:32] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[00:27:09] *** Quits: Brucio-61 (~Brucio-86@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 268 seconds)
[00:27:31] *** Inline__ is now known as Inline
[00:30:12] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[00:30:34] *** Joins: notzmv (~zmv@user/notzmv)
[00:31:06] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:37:47] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:00:12] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:08:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:08:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:09:29] *** Joins: wacki (~wacki@87.122.88.237)
[01:25:45] *** Quits: wacki (~wacki@87.122.88.237) (Quit: Leaving.)
[01:31:58] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[01:34:12] *** Joins: opcode (~opcode@user/opcode)
[01:34:14] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[01:36:06] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:42:32] *** Joins: hashfunc1160 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:43:54] <hashfunc1160> in file:///usr/share/doc/hyperspec/Body/f_mexp_.htm "Neither macroexpand nor macroexpand-1 makes any explicit attempt to expand macro forms that are either subforms of the form or subforms of the expansion. Such expansion might occur implicitly, however, due to the semantics or implementation of the macro function."
[01:44:06] <hashfunc1160> isn't that contradictory to the behavior of macroexpand?
[01:44:20] <hashfunc1160> "macroexpand repeatedly expands form until it is no longer a macro form. In effect, macroexpand calls macroexpand-1 repeatedly until the secondary value it returns is nil."
[01:50:02] *** Joins: Oladon (~olad@98.43.81.226)
[01:52:56] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[01:56:37] <Bike> hashfunc1160: macroexpand repeatedly expands the form, not its subforms. the first thing you qouted is about subforms
[02:00:09] <hashfunc1160> Bike: oh ok. so macroexpand essentially looks at the car of the form and sees that it's a macro form, then expands the form, looks again at the car of the form to see if it's a macro form, etc. etc.
[02:00:10] *** Joins: pillton (~user@118.102.104.189)
[02:00:20] <hashfunc1160> while macroexpand-1 just does one iteration of that
[02:00:54] <hashfunc1160> & macroexpand-all (which doesn't appear to be in the spec) macroexpands the macro form and all of its subforms recursively
[02:01:12] <hashfunc1160> i get it now
[02:02:10] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[02:02:33] <hashfunc1160> correct me if i'm wrong please
[02:03:08] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:03:53] <Bike> no, you've got it right
[02:06:00] <hashfunc1160> thanks Bike. that's reassuring that things are starting to click for me
[02:10:30] *** Quits: hashfunc1160 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[02:29:28] *** Joins: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net)
[02:31:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[02:34:38] <jealousmonk> Here is a section from the book "A Gentle Introduction to Symbolic Computation" https://0x0.st/oKW-.png
[02:34:44] <jealousmonk> According to the CLHS, the function LENGTH is defined only for proper sequences. I wonder if in older implementations it was possible to use LENGTH in a dotted list. The book is from 1990.
[02:35:06] <phoe> yes, that is from before ANSI CL
[02:35:43] <phoe> I assume that old LENGTH on non-null lists simply checked if the CDR was CONSP
[02:35:43] <jealousmonk> Ah!
[02:36:17] <phoe> therefore (A B C . NIL) which is a proper list would get treated the same way as (A B C . T) which is a dotted list
[02:38:18] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:51:19] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:54:17] *** Joins: igemnace (~ian@user/igemnace)
[02:57:13] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[03:03:16] *** Joins: dra (~dra@2a04:4540:640e:6500:b97f:5448:5179:6d24)
[03:06:38] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 250 seconds)
[03:10:00] *** Quits: amb007 (~a_bakic@5.149.174.181) (Ping timeout: 256 seconds)
[03:18:13] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[03:21:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[03:23:16] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[03:30:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:32:43] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[03:33:20] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[03:35:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:36:09] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:46:16] *** Joins: akoana (~ah@user/akoana)
[03:47:48] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::175)
[03:47:48] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 240 seconds)
[03:55:31] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[03:56:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[03:56:37] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 240 seconds)
[03:58:26] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[04:01:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:01:55] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:03:03] *** Quits: dra (~dra@2a04:4540:640e:6500:b97f:5448:5179:6d24) (Remote host closed the connection)
[04:03:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:09:58] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:10:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:12:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:14:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[04:14:54] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:22:13] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[04:27:06] *** Joins: s-liao12 (~s-liao@101.86.96.21)
[04:30:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:34:36] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:48:20] *** Quits: s-liao12 (~s-liao@101.86.96.21) (Quit: Client closed)
[04:49:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:53:00] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[04:56:12] *** Quits: varjag (~user@scandic757.host.songnetworks.se) (Ping timeout: 240 seconds)
[04:56:36] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 240 seconds)
[04:59:42] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[05:11:11] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[05:15:28] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[05:21:40] *** Joins: zacque (~zacque@175.140.124.235)
[05:21:55] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:23:13] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[05:29:12] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[05:38:36] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[05:40:32] *** Joins: c (~o@2600:1700:94c0:69a0::44)
[05:40:36] *** Quits: c (~o@2600:1700:94c0:69a0::44) (Client Quit)
[05:41:09] *** Joins: c (~o@2600:1700:94c0:69a0::44)
[05:41:35] *** c is now known as Common-Lisp
[05:58:55] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[06:01:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[06:09:10] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[06:25:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:38:22] *** Quits: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net) (Ping timeout: 272 seconds)
[06:38:56] *** Quits: Common-Lisp (~o@2600:1700:94c0:69a0::44) (Quit: Leaving)
[06:39:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:41:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:54:03] *** Joins: Oladon (~olad@98.43.81.226)
[06:59:20] <ns12> Hello, how do I use Unix/Linux features in Common Lisp? How do I use fork(), exec(), sigprocmask() in Common Lisp? https://lispcookbook.github.io/cl-cookbook/os.html doesn't really say much about these.
[07:10:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[07:16:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:16:49] <White_Flame> ns12: sbcl has the sb-posix package with a lot of stuff in it, not sure about compatiblity libraries for them
[07:16:59] <White_Flame> it's not standard CL
[07:22:18] <ns12> White_Flame: Most sb-posix functions do not seem to be documented in the SBCL manual http://www.sbcl.org/manual/
[07:22:40] <White_Flame> right, check their docstrings & refer to posix knowledge
[07:23:04] <ns12> I guess the full list can only be found in the source code https://github.com/sbcl/sbcl/blob/sbcl-2.2.1/contrib/sb-posix/interface.lisp
[07:23:43] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[07:24:16] <ns12> Does sb-posix work on Windows?
[07:24:38] <White_Flame> inasmuch that windows has APIs for posixy things, probably
[07:27:19] <ns12> Is see that there is #'sb-posix:fork but no exec()?
[07:28:55] <White_Flame> I don't think that would work very well with the lisp image
[07:29:09] <White_Flame> why would you fork/exec instead of just launch?
[07:30:28] <White_Flame> I guess open FDs would be a thing if you want to share them with pipes or whatever
[07:31:06] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:32:31] <beach> Good morning everyone!
[07:33:44] <ns12> White_Flame: It is also missing select(), poll(), and signal handling functions.
[07:33:46] <ns12> Oh well.
[07:33:54] <ns12> Good morning beach.
[07:34:01] <White_Flame> there are other libs specifically for that functionality
[07:34:43] <White_Flame> and signal handling should not be done with raw posix calls from inside lisp.  Use the implementation's wrappers for them
[07:34:54] <White_Flame> because you'll probably mung the image's use of them
[07:36:08] <ns12> There's trivial-signal for signals https://github.com/guicho271828/trivial-signal
[07:36:08] <ns12> But how do I get poll() and select()?
[07:36:20] <White_Flame> look in cliki for libraries
[07:37:32] <White_Flame> I know usockets uses select() in its backend
[07:37:40] <White_Flame> as one example to poke into
[07:38:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[07:39:24] <White_Flame> I do wonder what you're doing, though, as many of these things should more be viewed in terms of the functionality you're going for, not the specific posix api
[07:41:36] <beach> Maybe ns12 is writing a Unix shell.
[07:41:59] <ns12> White_Flame: I have no particular project. I have been learning about the POSIX API, and I am evaluating Common Lisp's existing ability in this area.
[07:42:45] <beach> ns12: It is not about the language Common Lisp.
[07:44:05] <ns12> beach: Is it off-topic here?
[07:44:51] <beach> No.
[07:45:03] <beach> But you said you are evaluating Common Lisp.
[07:47:40] <beach> Maybe I should mention this embryonic idea for POSIX protocols: http://metamodular.com/POSIX-API/
[07:47:46] <ns12> Yes, the Common Lisp ecosystem. Not the language itself.
[07:50:28] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[08:00:20] *** Joins: semz_ (~semz@user/semz)
[08:01:48] <Guest74> how many implementations have posix functions? is there much difference between the implementations? I figure everybody would stay pretty close to the c definitions.
[08:02:47] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:05:14] <ns12> Guest74: "how many implementations have posix functions?" - From my observations, it is not a priority for many Common Lisp implementations.
[08:05:39] <beach> Guest74: It gets tricky when the C API uses C structs.
[08:06:11] <ns12> There's osicat https://osicat.common-lisp.dev/manual/osicat.html but it provides limited features.
[08:06:45] <White_Flame> and uiop has its own limited set to support what asdf needs
[08:07:08] <Guest74> beach: i've been thinking about that, and maybe just treating structs as arrays.  It's the pointers that make things tricky.
[08:07:17] <White_Flame> (mostly around the filesystem)
[08:07:51] <White_Flame> also the actual C memory layout needs to be consistent, and I don't know how packing plays into that
[08:08:04] <Guest74> ns12:  isn't osicat ffi?  I was wondering about implementations.
[08:08:07] <White_Flame> eg if there's a mix of 32-bit and 64-bit fields
[08:09:04] <Guest74> just treat everything as arrays of ub8 with accessing functions that assemble the bits.
[08:09:32] <Guest74> Something I'm toying with for writing reader/writers for binary formats.
[08:09:50] <White_Flame> and now you have to deal with endianness ;)
[08:10:09] <Guest74> just call a different accessor.
[08:10:28] <White_Flame> but yeah, I did write a big declarative spec for binary file formats
[08:10:52] <White_Flame> I only ever implemented the reader, though.  Can read an entire java .class file into list-based structures
[08:11:06] <Guest74> any links? always curious how others attack things.
[08:11:31] <ns12> Is there any Common Lisp implementation that provides a larger POSIX API than what SBCL has?
[08:11:31] <ns12> I am used to the POSIX functionality provided out of the box in OCaml (https://ocaml.org/api/Unix.html) and in Standard ML (https://smlfamily.github.io/Basis/posix.html).
[08:12:01] <beach> Guest74: There is at least one library that deals with bits in vectors like that.
[08:13:01] <beach> But I don't think that's the protocol you would want to expose to Common Lisp application code.
[08:13:05] <White_Flame> Guest74: https://white-flame.com/classfile.lisp
[08:13:18] <White_Flame> the implementation is a mudball as I was adding features
[08:13:30] <Guest74> I'm sure there's a few.  I've taken to using nibbles for the reading/writing that everything deconstructs to.
[08:13:43] <White_Flame> but it's the spec (and knowledge that it is unambiguously implementable) that's the important part
[08:14:48] <ns12> Does LispWorks and Allegro have comprehensive POSIX APIs?
[08:15:01] <ns12> s/Does/Do/
[08:19:58] <Guest74> white_flame: I hope to have some that reads more like common lisp with a small precise specification.
[08:20:33] <White_Flame> well, this is a declarative data specification.  the lisp stuff then uses it to interpret how to pull in a file into a tree of values
[08:20:54] <White_Flame> and take a tree of values and write it into bytes
[08:21:24] <White_Flame> because all sorts of file formats do all sorts of crazy things, it needs a very comprehensive library
[08:21:33] <White_Flame> I didn't want a bunch of black-box imperative code defining things
[08:21:52] <White_Flame> s/library/vocabulary/
[08:22:47] <Guest74> I'm thinking I don't want to support stupid things.
[08:23:24] <Guest74> Many years ago I thought I would write a buffer replacement for clx to work with modern extensions.  but it's just too stupid.
[08:23:36] <beach> Guest74: We seem to be talking about different aspects.  I think as an implementation technique, stuffing things in a Common Lisp vector might work.  I am more interested in what data structures will be presented to the Common Lisp application programmer.  That's what my page on that link is about.
[08:24:10] <beach> ... and that's why I mentioned that structs are tricky.
[08:26:09] <White_Flame> ns12: ocaml probably fits the C process structure more cleanly?
[08:26:21] <White_Flame> lisp really grew big _as_ an OS
[08:26:38] <Guest74> beach: for my current work on ioctls I autogenerate a lisp struct with the same fields, and also generate a reader for that struct that populates the c struct. I find it a bit tedious. I also have the option for the lisp function to take an alist of slots and values which populates the c structs/arrays for the ioctl.
[08:27:03] <Guest74> s/reader/reader & writer/
[08:27:50] <Guest74> I'm guessing lisp function built upon those autogenerated structs/readers/writers will just take keywords?
[08:30:19] <Guest74> though I think I need still allow to pass lisp structs(and maybe even c structs?) for things where it makes sense. e.g. force feedback effects for controllers are nicely contained within c-structs, and having a library of them you could send to the device seems like something useful.
[08:33:22] <White_Flame> it wouldn't seem like the end of the word to marshall between a reused lisp struct and a reused C struct
[08:33:34] <Josh_2> Good morning
[08:33:41] <White_Flame> but I get that some of them can get quite large
[08:33:54] <White_Flame> and of course that wouldn't work if they're holding volatile values
[08:34:24] <Guest74> I don't reuse any c structs at the moment.  A new one is created for every ioctl call.  I don't know if that's as bad as I think it might be.
[08:34:50] <White_Flame> if it's stack-allocated that's reasonable
[08:35:03] <Guest74> It only reads or writes to a lisp struct if it was provided by the caller.
[08:35:48] <Guest74> i.e. the default is it will just return values as a plist of slot value.
[08:36:11] *** Joins: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[08:36:21] *** Quits: _patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[08:42:35] <Guest74> thankfully it doesn't seem like there's anything too crazy in c stuff for ioctls.  The worst I've run across so far is nested structs and pointers to arrays within the struct, but it's all seemed to work out so far.
[08:43:28] <Josh_2> beach: Has anyone worked on a practical implementation of a posix interface like the one you have started specifying?
[08:46:41] <Guest74> sb-posix doesn't seem so bad.
[08:47:54] <Guest74> well, except sb-posix:ioctl doesn't really work and I have to use sb-unix:unix-ioctl, but besides that, i'm not sure how much more lispy you can get for posix calls.
[08:50:34] <Guest74> actually, i shouldn't say it doesn't work.  It probably works as specified by posix but linux changed how it works and bsd users were made sad.
[08:52:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:56:11] *** Joins: jmes (~james@216.154.22.238)
[08:58:10] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[09:02:43] *** Joins: wacki (~wacki@87.122.86.181)
[09:03:34] <pillton> There must be a better way to expose OS functionality then via C APIs.
[09:03:41] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:05:36] <Guest74> i guess it depends on what OS functionality you are talking about.  We could write our own interfaces to file systems.
[09:07:10] <Guest74> and love it or hate it, since everything is a file in unix, you can just open-file.
[09:08:00] * edgar-rft suggests using assembly interrupts again instead :-)
[09:08:45] <pillton> I am not sure that is true. I can't open a file which connects to a website for example. I also can't open a file to execute a command.
[09:08:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:10:19] <Guest74> execute a command?
[09:10:34] *** Quits: raeda (~raeda@74.215.159.82) (Quit: Leaving)
[09:10:45] <Guest74> you can talk directly to the virtual terminals if you want.
[09:10:51] <opcode> anyone here run a swank/slynk repl on a remote server accessible via the internet?  if so how do you secure it?
[09:11:32] <pillton> Guest74: Start another process e.g. fortune.
[09:11:47] <White_Flame> pretty sure you can open a file to a website in Plan9
[09:12:15] <White_Flame> unix just sucks ;)
[09:12:29] <Guest74> but i'm not sure how that's even a complaint when we have drakma/dexador?
[09:12:35] <White_Flame> but as long as OSes have a C heritage, it will expose its APIs in C
[09:13:50] <Guest74> So all you have to do is write your OS in lisp.
[09:17:05] <White_Flame> yep
[09:17:11] <White_Flame> or do something other than function calls
[09:17:21] <White_Flame> message passing, software interrupts, etc
[09:18:04] <pillton> Why do you have to write your OS in lisp? What does it solve?
[09:18:15] <White_Flame> the OS API wouldn't be exposed in C
[09:18:40] <pillton> Then the people who like C will complain about it being in CL.
[09:18:49] <White_Flame> stuff 'em
[09:18:51] <White_Flame> ;)
[09:18:55] <Josh_2> opcode: Yes, you should use ssh tunnels
[09:19:12] <opcode> i was going to use wireguard
[09:19:19] <White_Flame> opcode: swank by default only listens to localhost, not external ports
[09:19:40] <beach> Josh_2: I don't think so.
[09:20:16] <opcode> White_Flame: can't you just set swank::*loopback-address* ?
[09:20:35] <beach> pillton: Do you not think my proposal is better than the C API?
[09:22:38] <beach> Actually, never mind.  I should be quiet.
[09:22:48] <pillton> beach: I'd have to think about it. I'd rather people write libraries which solve specific problems rather than offer interfaces to APIs of other languages.
[09:23:02] <beach> I fully understand.
[09:25:18] <White_Flame> opcode: I mean its default is secured away from outside connections, so it's less of a concern.  But anybody with access to execute code on the box can access swank
[09:26:01] <opcode> White_Flame: maybe i'm not clear, but I want to have a long-running lisp process on a server, and i want to expose a repl so I can hack on it from home
[09:26:08] <White_Flame> right, I've done that
[09:26:11] <opcode> but obviously as you said, the repl presents a security concern
[09:26:31] <White_Flame> it wasn't on an internet-accessible box, technically, btu we could tunnel in
[09:26:54] <opcode> yeah, I was planning to use nftables to only expose swank on a wireguard tunnel
[09:27:00] <White_Flame> and I don't think you should open the listener to anything but the loopback device, and externalize the access via ssh or whatever
[09:27:00] <opcode> it's my box, I'm not worried about other users
[09:27:08] <opcode> ah ok
[09:27:37] <opcode> that's probably much simpler than what I'm trying to get going here
[09:33:05] *** Joins: dirtcastle (~dirtcastl@103.43.203.228)
[09:46:28] <Josh_2> You should just use ssh tunnels
[09:46:53] *** Joins: epony (epony@user/epony)
[09:46:57] <Josh_2> I have 3 lisp images running on one of my VPS's and I can just open my ssh connection with tunnelling and then I can connect to them
[09:50:33] <pillton> beach: For example, asynchronous I/O, synchronous I/O and non-blocking I/O. I think CL can do a much better job of offering interfaces to these I/O strategies that actually helps the user organise /their/ application. The underlying C API does not do that. The functionality is "exposed" by a convoluted set of C constants, functions and file descriptor modes, obfuscating each individual strategy. I think the C constants aren't even
[09:50:34] <pillton> consistent across the different unixes. And, once you're done with the unix world, you also have to consider the non-Unix world as well.
[09:51:31] <beach> pillton: I see.
[09:53:03] <beach> The idea of my suggested protocols was to do it in 2 layers.  The lower layer would be closer to the C API, and the upper layer would present something much more convenient to the Common Lisp application programmer.  Perhaps the upper layer would be the place to do a better job.
[09:53:28] <beach> Actually, I didn't come up with the 2-layer idea.  But I forget who it was who did.
[09:56:33] <beach> Not that it matters.  I won't have time to work on it in the near future anyway.
[09:56:58] <pillton> beach: Sure. I am just giving my two cents.
[09:57:14] <beach> Yes, what you say makes a lot of sense.
[10:13:54] *** Joins: rain3 (~rain3___@5-12-79-200.residential.rdsnet.ro)
[10:18:26] <dirtcastle> i installed slime. but If I  M-x slime , it shows " searching for program: No such file or directory,lisp"
[10:25:33] *** Joins: amb007 (~a_bakic@116.150.22.93.rev.sfr.net)
[10:25:33] *** Quits: amb007 (~a_bakic@116.150.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:25:48] *** Joins: amb007 (~a_bakic@5.149.174.181)
[10:26:27] <White_Flame> dirtcastle: you probably have to define which lisp it's going to call, and is just defaulting to "lisp"
[10:26:51] <dirtcastle> I fixed it .
[10:26:54] <White_Flame> however it's easier to use portacle for an all-in-one solution, or quicklisp-slime-helper to install slime individually
[10:26:57] <dirtcastle> u r right
[10:26:57] <White_Flame> ah, k
[10:27:15] <dirtcastle> I set inferior lisp program sbcl
[10:27:54] <dirtcastle> it's there in my init but it won't load properly because my init produces errors
[10:28:52] *** Quits: dirtcastle (~dirtcastl@103.43.203.228) (Remote host closed the connection)
[10:29:00] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[10:32:28] <molson> yeah, emacs doesn't load the init if it has errors.
[10:47:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:59:02] <jmes> Question for Parenscript users: how do I call a macro inside a PS form? When I want to use MY-MACRO (which should spit out some Parenscript code) and I write (ps (my-macro)) it gets compiled to myMacro. I tried to RTFM but my brain might be too small
[11:02:26] <jmes> I have a situation more like this, where if I use Parenscript's LISP like so (ps (let ((something 1)) (lisp (my-macro something)))) then SOMETHING will be unbound
[11:13:22] *** Joins: hashfunca51 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[11:16:53] <hashfunca51> White_Flame: i did the exercise of constructing a templated macro without using quasiquotes. but i've been stuck on how i get around splicing lists without using ,@
[11:17:12] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[11:20:29] <Josh_2> jmes: PS has its own defmacro, try that
[11:23:16] *** Joins: pve (~pve@37-136-254-49.rev.dnainternet.fi)
[11:25:48] <Josh_2> jmes:   (ps:defpsmacro js%console-log (val) `((ps:getprop console 'log) ,val))
[11:27:29] *** Quits: amb007 (~a_bakic@5.149.174.181) (Read error: Connection reset by peer)
[11:28:08] <hashfunca51> White_Flame: especially arguments given to an &body parameter in said macro, because the argument passed is wrapped in a list ... (1 2) => ((1 2)) ... thus the list must be spiced, since, if not, an erroneous function call is made. e.g., ... (1 2) => ((1 2)) => "illegal function call". i've been at it for a long time and still haven't found a way around not using ,@
[11:29:09] <jmes> Josh_2: ah, somehow I missed that, thanks! I hope this does the trick :)
[11:31:20] *** Joins: amb007 (~a_bakic@5.149.174.181)
[11:39:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:42:10] *** Joins: shka (~herr@109.231.3.55)
[11:45:20] <hashfunca51> White_Flame: sorry, you were involved in that conversation but it was @moon-child that recommended that exercise
[11:45:53] <hashfunca51> annnd he/she isn't online
[11:46:15] *** Quits: hashfunca51 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[11:51:03] <White_Flame> you have to use append
[11:51:10] <White_Flame> aaaaand he/she isn't online
[12:04:57] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[12:06:03] <beach> I think this has been said already.  Oh well.
[12:07:36] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:08:30] <flip214> White_Flame: list*, concatenate, dot notation, explicit CONS calls...
[12:10:25] <White_Flame> hmm, you sure about explicit CONS calls?  also dot notation
[12:10:44] <White_Flame> for splicing in the middle of lists
[12:21:07] <flip214> depending on the input data an (alexandria:flatten (cons list1 (cons list2 (cons list3 nil)))) might work for you as well ;)
[12:26:12] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:37ab:3c6c:a9ec:c971)
[12:26:24] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:37ab:3c6c:a9ec:c971) (Client Quit)
[12:26:42] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:37ab:3c6c:a9ec:c971)
[12:27:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:28:12] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:77ff:49ec:2b9c:10c4) (Ping timeout: 240 seconds)
[12:29:00] *** Joins: eugercek (~user@user/eugercek)
[12:30:06] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: You have been kicked for being idle)
[12:36:01] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:42:59] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:43:46] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:44:01] *** Quits: rain3 (~rain3___@5-12-79-200.residential.rdsnet.ro) (Ping timeout: 250 seconds)
[12:48:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:49:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:50:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:55:39] *** Quits: amb007 (~a_bakic@5.149.174.181) (Read error: Connection reset by peer)
[12:56:41] *** Joins: amb007 (~a_bakic@5.149.174.181)
[12:56:45] *** Joins: attila_lendvai (~alendvai@catv-89-135-147-129.catv.fixed.vodafone.hu)
[13:02:29] *** Joins: morganw (~user@80.225.24.132)
[13:02:37] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[13:02:47] <neominimum> Anyone know of projects that are looking for hands? I have two brain cells that I would like to put to good use.
[13:05:34] <beach> Tons!  What do you know how to do, and what kind of project would you prefer?
[13:12:44] *** Joins: admich (~user@ip-146-12.sn-213-198.clouditalia.com)
[13:14:20] <neominimum> I'd like to take the opportunity to work in a variety of domains to further my knowledge. I don't think I really have a preference as to what I want to work on, as I hope the problems can be interesting in and of themselves. That being said I have recently begun some study into basic computer architecture, up through to high-level language compilers and I found it pretty interesting. I am sorely lacking in theoretical foundations, but am
[13:14:20] <neominimum> willing to learn.
[13:17:41] <beach> I'll keep that in mind.  You could also start a new project.
[13:18:10] <beach> http://metamodular.com/Common-Lisp/suggested-projects.html
[13:19:22] <beach> We would help you with advice, code reviews, etc.
[13:21:22] <beach> Or you could check with Shinmera (games) and jackdaniel (McCLIM, ECL).
[13:26:08] <neominimum> I've been developing an actor runtime for message passing style concurrency, it's rather primitive still, but it has been the vehicle by which I've been learning common lisp. I have coupled that with a basic syntax for coordinating the execution of lisp code using an asynchronous evaluation semantics, so that one can continue to code in direct style as opposed to a continuation passing style.
[13:26:27] <neominimum> Okay great I'll take a look, thanks.
[13:32:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[13:33:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:45:21] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[13:51:02] *** Quits: amb007 (~a_bakic@5.149.174.181) (Ping timeout: 240 seconds)
[13:52:05] *** Joins: amb007 (~a_bakic@61.104.204.77.rev.sfr.net)
[13:57:39] *** Joins: kevingal (~quassel@149.157.121.115)
[14:00:15] *** Joins: random-nick (~random-ni@87.116.179.129)
[14:02:58] *** Quits: kevingal (~quassel@149.157.121.115) (Ping timeout: 272 seconds)
[14:03:05] *** Joins: kevingal (~quassel@2001:770:c0:401:cda8:222c:1360:bd45)
[14:04:32] *** Quits: pillton (~user@118.102.104.189) (Quit: ERC (IRC client for Emacs 27.2))
[14:12:48] <Shinmera> Games touch on a ton of domains
[14:15:16] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[14:15:16] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[14:16:18] *** Joins: minion (~minion@common-lisp.net)
[14:16:19] *** Joins: specbot (~specbot@common-lisp.net)
[14:20:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:23:13] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[14:23:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:29:04] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Remote host closed the connection)
[14:31:08] *** Joins: alfonsox (~quassel@103.87.57.4)
[14:42:04] *** Joins: sammi (~sammi@c-98-244-55-191.hsd1.ca.comcast.net)
[14:46:35] *** Quits: sammi (~sammi@c-98-244-55-191.hsd1.ca.comcast.net) (Client Quit)
[14:55:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:04:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[15:12:43] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:17:06] *** Joins: patrice (~patrice@user/patrice)
[15:17:21] <neominimum> I like the world building aspect of game development, not so much gameplay mechanics though, but I'd like to have a go at creating some imersive 3d environements one day. AIUI there is an absolute ton of work that goes into the implementation of game engines.
[15:27:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:30:13] *** Joins: varjag (~user@scandic757.host.songnetworks.se)
[15:39:24] *** Quits: amb007 (~a_bakic@61.104.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[15:39:41] <jackdaniel> usually you start from something that is interesting to you and you end god knows where :)
[15:43:05] *** Joins: amb007 (~a_bakic@167.15.23.93.rev.sfr.net)
[15:48:06] *** Quits: amb007 (~a_bakic@167.15.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[15:48:08] *** Joins: Brucio-61 (~Brucio-97@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[15:58:42] *** Joins: cosimone` (~user@93-34-132-33.ip49.fastwebnet.it)
[16:00:02] *** Joins: amb007 (~a_bakic@16.14.23.93.rev.sfr.net)
[16:00:08] <neominimum> true! :) Honestly sometimes I feel overwhelmed with how many forks and detours there seem to be in the path. Theres way to much to master in a single lifetime, I get a bad case of analysis paralysis at times.
[16:00:34] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[16:00:46] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[16:01:15] *** Joins: pjb (~pjb@user/pjb)
[16:04:18] <jackdaniel> no worries, if it is true that the world is just, then everyone must have the same share-  in other words we reincarnate as each possible person in each possible time with all possible scenarios ,-)
[16:06:54] *** Joins: treflip (~user@user/treflip)
[16:10:47] *** Quits: amb007 (~a_bakic@16.14.23.93.rev.sfr.net) (Ping timeout: 252 seconds)
[16:13:46] *** Joins: amb007 (~a_bakic@82.172.185.81.rev.sfr.net)
[16:17:06] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:17:07] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[16:17:30] *** Joins: jeosol (~jeosol@user/jeosol)
[16:17:51] <neominimum> Personally I can't wait to reincarnate as a sea cucumber. No care in the world, gently being  tossed around by the warm sea currents. Magnifique.
[16:21:39] <neominimum> Night all
[16:21:58] <beach> 'night neominimum.
[16:31:41] *** Joins: notzmv (~zmv@user/notzmv)
[16:36:30] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[16:53:03] *** Quits: zacque (~zacque@175.140.124.235) (Quit: Goodbye :D)
[16:56:23] *** Joins: dirtcastle (~dirtcastl@103.43.203.228)
[16:56:26] *** Quits: dirtcastle (~dirtcastl@103.43.203.228) (Client Quit)
[16:56:36] *** Joins: dirtcastle (~dirtcastl@103.43.203.228)
[16:59:06] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[17:00:04] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[17:00:18] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[17:02:40] *** Joins: rain3 (~rain3___@2a02:2f09:d101:7300:2e51:8c61:fb63:c9ee)
[17:04:04] *** Joins: patrice (~patrice@user/patrice)
[17:08:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:12:28] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[17:12:56] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Quit: Boom.)
[17:27:51] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[17:28:17] *** Joins: Bike (~Glossina@71.69.170.70)
[17:32:45] *** Quits: clos-encounters (user@2600:3c00::f03c:92ff:fe19:3350) (Quit: ERC (IRC client for Emacs 27.2))
[17:45:16] *** Quits: admich (~user@ip-146-12.sn-213-198.clouditalia.com) (Ping timeout: 272 seconds)
[17:52:42] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:55:01] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[18:08:47] *** Quits: rain3 (~rain3___@2a02:2f09:d101:7300:2e51:8c61:fb63:c9ee) (Ping timeout: 256 seconds)
[18:21:02] *** Quits: kevingal (~quassel@2001:770:c0:401:cda8:222c:1360:bd45) (Ping timeout: 240 seconds)
[18:25:35] *** Joins: kevingal (~quassel@149.157.121.115)
[18:33:27] *** Joins: ebrasca (~user@librepanther.com)
[18:46:41] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[18:48:56] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Client Quit)
[18:49:23] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[18:55:27] *** Quits: dirtcastle (~dirtcastl@103.43.203.228) (Remote host closed the connection)
[19:13:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[19:14:21] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[19:16:18] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:5bf7:7723:bd1c:6732)
[19:19:36] *** Quits: kevingal (~quassel@149.157.121.115) (Remote host closed the connection)
[19:20:46] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 245 seconds)
[19:23:26] *** Quits: amb007 (~a_bakic@82.172.185.81.rev.sfr.net) (Ping timeout: 272 seconds)
[19:23:57] *** Joins: amb007 (~a_bakic@82.172.185.81.rev.sfr.net)
[19:26:46] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:28:29] <jmes> Does anyone know of an Argon2 implementation (or bindings) in CL? My cursory search reveals nothing
[19:31:57] <Bike> jmes: looks like ironclad has it https://github.com/sharplispers/ironclad/blob/master/src/kdf/argon2.lisp
[19:33:10] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[19:33:32] <jmes> Oh nice, thanks Bike
[19:41:08] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[19:53:38] *** Joins: dirtcastle (~dirtcastl@103.43.203.230)
[19:54:06] *** Joins: rain3 (~rain3___@2a02:2f09:d101:7300:2e51:8c61:fb63:c9ee)
[19:56:13] *** Joins: Oladon (~olad@98.43.81.226)
[19:57:11] *** form_feed is now known as \f
[20:11:30] *** Joins: kevingal (~quassel@149.157.121.115)
[20:21:41] *** Quits: kevingal (~quassel@149.157.121.115) (Remote host closed the connection)
[20:26:19] *** Joins: rtoy (~Thunderbi@98.51.32.60)
[20:38:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:40:31] <edgar-rft> inert gas bindings are tricky :-)
[20:46:02] *** Quits: attila_lendvai (~alendvai@catv-89-135-147-129.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[20:47:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:55:16] *** Joins: ghost4096 (pranshukha@envs.net)
[21:01:01] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[21:08:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:26:46] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:26:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 272 seconds)
[21:31:46] *** Quits: easye (~user@oxi.slack.net) (Remote host closed the connection)
[21:45:10] *** Quits: rain3 (~rain3___@2a02:2f09:d101:7300:2e51:8c61:fb63:c9ee) (Quit: Leaving)
[21:50:03] *** Joins: nature (~nature@45.32.235.173)
[21:59:12] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:04:42] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:05:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:06:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:17:04] *** Joins: hashfunc1818 (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be)
[22:22:52] *** Joins: easye (~user@oxi.slack.net)
[22:23:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[22:24:19] *** Quits: alfonsox (~quassel@103.87.57.4) (Read error: Connection reset by peer)
[22:26:28] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[22:32:27] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[22:39:51] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[22:44:53] *** Quits: amb007 (~a_bakic@82.172.185.81.rev.sfr.net) (Read error: Connection reset by peer)
[22:45:34] *** Joins: amb007 (~a_bakic@82.172.185.81.rev.sfr.net)
[22:47:39] *** Quits: amb007 (~a_bakic@82.172.185.81.rev.sfr.net) (Read error: Connection reset by peer)
[22:53:16] *** Joins: amb007 (~a_bakic@5.149.174.181)
[22:54:37] *** Quits: dirtcastle (~dirtcastl@103.43.203.230) (Ping timeout: 240 seconds)
[22:56:32] *** Joins: dirtcastle (~dirtcastl@2409:4072:e95:f9da:ccb8:83ff:fe65:2fd1)
[23:00:36] *** Quits: dirtcastle (~dirtcastl@2409:4072:e95:f9da:ccb8:83ff:fe65:2fd1) (Ping timeout: 240 seconds)
[23:02:19] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[23:04:26] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[23:12:59] *** Joins: Oladon (~olad@98.43.81.226)
[23:15:48] *** Joins: tane (~tane@user/tane)
[23:17:08] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 272 seconds)
[23:17:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:18:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:18:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:20:16] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[23:20:30] *** Lord_of_Life_ is now known as Lord_of_Life
[23:21:10] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[23:23:52] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[23:26:42] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[23:42:04] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:42:38] <jmes> Let's say I have 2 macros A & B where A calls B. With Sly, if I make a change to B I (seemingly) have to re-evaluate B and then A for the change to fully take effect. If A is a set of macros all using B this gets unwieldy. Is there a clever or obvious way to manage this better?
[23:44:44] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[23:44:52] <jmes> other "solutions" I've been using are reloading the whole file containing A & B, or reloading the whole project with quickload when A & B are in different files/systems/etc.
[23:46:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:47:21] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:51:57] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Quit: WeeChat 3.0.1)
[23:57:26] <Bike> when you say "calls", do you mean the A macroexpander uses the B macro, or that A forms expand into B forms?
[23:59:45] <jmes> Bike: I mean the A macroexpander uses the B macro
