[00:30:58] <headius> e
[00:31:15] <headius> enebo: I'm going to remove azure pipelines from 9.2 branch since it has not worked for months or years
[00:31:23] <headius> travis works sometimes, not sure why it doesn't always
[00:32:34] <enebo[m]> ok
[00:40:30] <headius> enebo: https://twitter.com/kovyrin/status/1483545578621456384
[00:40:59] <headius> guy trying to migrate to 9.3, the snapshots got him past M1 issues but some signatures you removed (deprecated for some time) are still in use by the "fishwife" extension
[00:41:14] <headius> well, just one signature we know of
[00:41:37] <headius> see my replies there, it was from your arity-killing PR
[00:41:45] <enebo[m]> yeah I tried to not kill public signatures
[00:42:12] <enebo[m]> that was poor phrasing...I tried not to eliminate anything with Arity that I thought anyone would use
[00:42:17] <headius> these were all deprecated for quite some time
[00:42:57] <enebo[m]> I actually remember doing it
[00:44:12] <headius> aha fishwife is a form of mizuno, a jetty wrapper for JRuby
[00:44:14] <enebo[m]> And I thought I left most public methods as deprecated
[00:44:17] <headius> fork not form
[00:44:24] <enebo[m]> "most"
[00:44:59] <enebo[m]> ok so maybe we can see what fishwife is missing and add them back if it is reasonable
[00:45:58] <enebo[m]> HAHAH
[00:46:00] <enebo[m]> Downloaded from central: https://repo.maven.apache.org/maven2/org/jruby/jruby-core/1.6.6/jruby-core-1.6.6.jar (6.9 MB at 2.3 MB/s)
[00:46:20] <enebo[m]> That is some backwards compay
[00:50:30] <byteit101[m]> >  I would pbly not want to do the auto conversion while reading a field 
[00:50:31] <byteit101[m]> yes, that's the tricky bit. I do have to make it be an IRubyObject, but is there a better way to marshall it through an IRO? (Planning on making it a bit more configurable)
[00:50:38] <byteit101[m]> kares: ^
[00:52:57] <byteit101[m]> I'm more concerned with the auto conversion on write, why  are you more concerned about the reads?
[00:55:34] *** Joins: kovyrin[m] (~kovyrinma@2001:470:69fc:105::1:6d6c)
[00:57:27] <kovyrin[m]> Hi, everyone! Wanted to bring this to your attention (seems like some internal API removed/changed some time between 9.2.16.0 and 9.3.3.0): https://github.com/dekellum/fishwife/issues/23. 
[00:57:39] <headius> kovyrin: hello there!
[00:57:57] <headius> I have a PR that fixes the line in question but fishwife has a lot of old JRuby references in it
[00:58:13] <enebo[m]> https://github.com/jruby/jruby/commit/53f18bc936001eaeab4a5344f034b31d015f3aa4
[00:58:13] <headius> the pom.xml for building the Java code uses JRuby 1.6.6 as a dependency
[00:58:38] <headius> I've got a patch compiling but building and testing fishwife needs updates to work
[00:58:46] <enebo[m]> So this does not hurt us in any way and we have so many deprecated methods.  So I put in a note above it and when someone updates fishwife they can solve it
[00:59:29] <kovyrin[m]> I can update our vendored version of fishwife directly to use the new version of the method, so no rush there.
[00:59:29] <headius> https://gist.github.com/headius/5df95b27eceb151257234e0e68b2f842
[00:59:41] <enebo[m]> I did not actually make sure fishwife works but this particular case should not be broken as arity for one arg is really simple and it will convert to proper signature
[01:00:03] <kovyrin[m]> Going to apply the patch and see if our app works. Will report in a few minutes.
[01:00:13] <headius> the Signature version of this API should go back pretty far, and the Arity version has been deprecated for almost as long I think
[01:00:31] <enebo[m]> kovyrin you may also try just try head of jruby-9.3 since I added back the deprecated method
[01:01:03] <enebo[m]> I think headius did the right thing in updating that gem but if you were using a released version of this gem I think it is likely to still work
[01:01:53] <headius> yeah doesn't seem like the gem has been updated in some time, which I guess is why you vendor it
[01:01:55] <kovyrin[m]> In our case we could not use the released version since we only use the servlet class from it and not the whole thing. So it is more like forking than vendoring.
[01:01:58] <enebo[m]> This is such a simple native extension
[01:02:28] <enebo[m]> I can see other problems on the horizon with createNativeRaiseException but those should still work
[01:02:31] <enebo[m]> oh I see
[01:02:38] <headius> I also got those on my compile
[01:02:54] <headius> [WARNING] /Users/headius/projects/fishwife/src/main/java/fishwife/IOUtil.java:[115,8] [deprecation] RuntimeHelpers in org.jruby.javasupport.util has been deprecated
[01:02:55] <headius> [WARNING] /Users/headius/projects/fishwife/src/main/java/fishwife/IOUtil.java:[133,16] [deprecation] createNativeRaiseException(Ruby,Throwable) in RaiseException has been deprecated
[01:02:55] <headius> [WARNING] /Users/headius/projects/fishwife/src/main/java/fishwife/IOUtil.java:[204,18] [deprecation] createNativeRaiseException(Ruby,Throwable) in RaiseException has been deprecated
[01:03:15] <enebo[m]> yeah I saw those when I was compiling
[01:04:53] <enebo[m]> The Java part of this is pretty small
[01:05:15] <enebo[m]> The Ruby part is smaller than I would expect but I can see how converting some of this to Java would be a help
[01:05:39] <headius> I can put together a PR for the gem just so it's out there but I can't get a full rake test to work due to some old http maven URLs somewhere in the support libraries
[01:05:53] <headius> rjack-whatever seems to be trying to use an http URL for maven but they force https now
[01:07:21] <enebo[m]> So in one direction we added back a deprecated method and in the other we are udpating the gem to have more modern artifacts and non-deprecated methods
[01:17:16] <headius> kovyrin: https://github.com/dekellum/fishwife/pull/24
[01:17:38] <headius> I'm fine with us restoring this signature for 9.3.3 but here's the fixes needed
[01:24:43] <headius> enebo: snapshot builds appear to be working now
[01:25:01] <headius> the logic to only run on master or 9.3 was not right
[01:25:12] <headius> snapshot builds on every push that is... manual ones worked fine
[01:25:24] <headius> so your change is out there now
[01:26:30] <enebo[m]> coolio
[01:29:53] <headius> I will leave https://github.com/jruby/jruby/pull/7016 until after 9.3.3 release
[01:30:00] <headius> I merged the 9.2 equivalent though
[01:38:03] <kovyrin[m]> headius: Tested your fishwife patch on our solution and it works! HTTP requests work as expected.
[01:38:14] <headius> great news!
[01:38:28] <kovyrin[m]> NoMethodError: undefined method `java_kind_of?' for #<Java::SunSecuritySsl::X509TrustManagerImpl:0x28ffb3a>
[01:38:28] <kovyrin[m]> Found another issue in our code: 
[01:39:12] <kovyrin[m]> aha, found this: https://github.com/jruby/jruby/issues/6862
[01:39:31] <headius> another removed feature in 9.3
[01:43:41] <kovyrin[m]> No problem, replaced it with `kind_of?` and it seems to work as expected (all specs pass). Trying out the final set of tests before declaring it all done.
[01:43:58] <headius> thanks so much for running through this with us
[01:45:03] <kovyrin[m]> No problem, thank you guys for all your efforts on Jruby and the recent M1 push in particular. I've been following it from afar and I know it wasn't fun.
[01:50:32] <kovyrin[m]> Ok, finished all my tests and everything seems to work perfectly! Hugest thanks to all of you for making it so easy. Now we'll be able to upgrade to the latest version and continue our development on M1 macs.
[01:50:59] <headius> Excellent! Ship it!
[01:57:27] <byteit101[m]> headius: When you get a chance, could you make sure the approach I took with the MethodHandle/Binder in the @ivar PR is workable before I spend time polishing that up?
[01:57:49] <byteit101[m]> ( https://github.com/jruby/jruby/pull/7012 )
[01:58:12] <byteit101[m]> no rush
[02:14:53] <headius> yeah cool, looking like we are in great shape for 9.3.3 so I will have a look through this tomorrow
[02:48:53] <headius> enebo: there are a number of PRs for 3.0/3.1 stuff, have you looked over them at all?
[02:49:13] <headius> I'm going to merge in the trivial ones as I look through them
[02:52:35] <headius> ok they were all trivial
[02:54:42] <headius> kovyrin: closing the loop on that missing method... we will have the signature restored, but still want to eliminate it at some point; you have it patched locally so no worries on your end; PR is submitted but who knows if it will ever get merged
[03:15:22] *** Joins: subbu (~subbu@user/subbu)
[04:06:07] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 256 seconds)
[04:10:42] *** Joins: subbu (~subbu@user/subbu)
[04:35:27] <puritylake[m]> Ok things are improving, only failing 3 tests atm
[04:42:08] <puritylake[m]> One of which I am unsure how to solve
[05:21:11] <puritylake[m]> Eventually figured out a way
[05:34:12] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[06:30:58] <puritylake[m]> Also noticed an inconsistency in the spec for sprintf
[06:31:25] <puritylake[m]> I'm majorly tired now so I'll look into other tests tomorrow
[12:30:14] *** Quits: edipofederle[m] (~edipofede@2001:470:69fc:105::30f1) (Quit: You have been kicked for being idle)
[13:37:32] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[13:38:38] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[16:12:41] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[16:13:02] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[16:14:16] *** Joins: yosafbridge` (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[16:15:53] *** Server sets mode: +nt 
[16:16:06] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:08] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[16:38:43] <mattpatt[m]> On the off-chance anyone's here and doesn't mind a somewhat OT question, I'm having problems with a Java project. The original dev builds with Eclipse, and we have to supply to code to someone who builds it with Maven. This hasn't been a problem, except now it is because not all the source .java files use the same character encoding. There's a per-file override in the Eclipse settings, but I can't find anything equivalent in Maven. Am I
[16:38:43] <mattpatt[m]> missing something, or do I need to get the original dev to be consistent.
[16:39:29] <mattpatt[m]> (I have been googling all morning and am pretty convinced that, aside from being a bad idea, it doesn't work in Maven.)
[16:47:25] <puritylake[m]> enebo: I can point out what tests I think are wrong later as Ruby 3 prints what I print and buy JRuby expects something different
[17:46:44] <enebo[m]> puritylake: Sure.  It is possible we were doing some things wrong.  I am not sure which tests you are running but we do have tags/excludes (ruby/spec, mri test suite). 
[17:54:54] <puritylake[m]> enebo: I'm running spec you specified in a gist
[17:54:55] <puritylake[m]> https://gist.github.com/enebo/f75b341c5d3db6ee05c1385f8097872c
[17:57:18] <enebo[m]> puritylake: ah yeah the first spec run command-line is not using any tags so if it is in there then it is likely just something we have always been doing wrong
[17:57:32] <enebo[m]> If it is the MRI one that is using the excludes and we should pass all of that
[17:57:55] <enebo[m]> If the new version doesn't but does match Ruby 3.1 then that is really cool
[17:57:55] <puritylake[m]> Yup everything else passes, just two specs failing
[17:58:36] <puritylake[m]> Will I edit the spec to match ruby's output?
[18:00:00] <enebo[m]> nope.  This is likely because we are running as Ruby 2.6 and if you look in the spec files you will see it has version checks
[18:00:19] <enebo[m]> So if you ran with Ruby 3 you would probably see it pass because it is running a different test
[18:00:54] <enebo[m]> (which of course I don't know to be true but it would be strange for spec to not work properly for printf if behavior is wrong)
[18:01:45] <enebo[m]> We could change our version on that branch to advertise 3.1 even though we are implementing on 2.6 (we branched from JRuby 9.3 codebase)
[18:02:02] <enebo[m]> puritylake: If you can gist I will see what is up
[18:02:25] <enebo[m]> I actually did not think printf output would change between versions unless error reporting change
[18:03:13] <puritylake[m]> https://gist.github.com/PurityLake/635f3326cf59790d8773d688e89b3801
[18:04:24] <puritylake[m]> I'll do a quick check on ruby 2.6 just to be sure
[18:04:30] <enebo[m]> interesting and ruby 3 does this differently...interesting to see a rounding change
[18:05:49] <enebo[m]>         it "cuts excessive digits and keeps only 6 ones" do
[18:05:49] <enebo[m]>           @method.call("%#{f}", 1.123456789).should == "1.123457#{exp}+00"
[18:05:49] <enebo[m]>         end
[18:06:27] <enebo[m]> oh that is for 'eE' but it is the same basic one as 'f'
[18:07:42] <enebo[m]>       it "cuts excessive digits and keeps only 6 ones" do
[18:07:42] <enebo[m]>         @method.call("%f", 1.123456789).should == "1.123457"
[18:07:42] <enebo[m]>       end
[18:08:02] <enebo[m]> I see no guard for pre-3 so I am a bit confused
[18:08:43] <enebo[m]> mri31 -e 'printf("%f", 1.123456789)'
[18:09:01] <enebo[m]> 1.123457
[18:10:25] <puritylake[m]> O_o that's ruby 3? I need to double check my calls
[18:12:04] <enebo[m]> Looks like it truncates but performs a round
[18:12:28] <enebo[m]> Our code has a weirdness in that we call Java's format library then reprocess the value again
[18:13:03] <enebo[m]> That is a stretch goal is to just directly implement the whole float formatting code but not an immediate one
[18:13:24] <enebo[m]> So I am not sure whether Java NumberFormat does this rounding for us or whether we do it in the second pass
[18:14:00] <puritylake[m]> Kinda rolled my own thing
[18:14:30] <headius> mattpatt: I would say you definitely need to get the developer to fix their file encoding
[18:16:02] <enebo[m]> headius: mattpatt If this is checked out via git maybe there is a posthook like on windows which does some basic translation.  I don't know if that exists but on windows you can do that for CRLF 
[18:18:28] <puritylake[m]> enebo: if ya look at my mess out a code, you'll see how much pain I caused myself lol
[18:18:44] <enebo[m]> puritylake: I look forward to it :)
[18:19:11] <enebo[m]> puritylake: although if you did start rolling your own you could consider implementing this without using numberformat and doing the entire format
[18:19:26] <puritylake[m]> 200+ lines just fo %f lol
[18:19:41] <enebo[m]> puritylake: The only challenge is to not break any copyrights (e.g. do not just whole cloth steal another impl)
[18:19:48] <enebo[m]> oh ok does it use numberformat?
[18:20:03] <puritylake[m]> Nope, all my own code
[18:20:06] <enebo[m]> I am not even sure 200 is a lot for this
[18:20:44] <enebo[m]> That is super.  If you understand what you wrote and it works then it will be fun to see e/g/a get added
[18:21:38] <puritylake[m]> Ya, it's gonna be fun to write
[18:22:18] <puritylake[m]> Not many comments on the %f so before I go to and others I'll fix the spec fails and add comments where things are unclear
[18:22:33] <puritylake[m]> s/and/any/
[18:23:04] <enebo[m]> yeah it makes sense to totally iron out %f
[18:23:49] <enebo[m]> when you feel you have the tests from those command-lines running there are more tests which hit this code
[18:24:30] <puritylake[m]> I'll report back when they are passing so
[18:25:02] <enebo[m]> test/mri/ruby/test_sprintf_comb.rb is a big one
[18:25:06] <enebo[m]> It has tons of more esoteric tests in it
[18:25:47] <enebo[m]> If you run that from our old to new code you will see most of the new ones are fixed except for us having more "perfect" values
[18:26:54] <enebo[m]> MRI seems to introduce precision oddities but I think this is because our use of things like BigInteger make us come up with the 'perfect' answer and theirs seems to partially get hung up on whatever precision they are using
[18:27:15] <enebo[m]> (and to be honest I am not sure if we should fix those or not so I have been ignoring them)
[18:30:43] <puritylake[m]> Ya I’m unsure how mri handles floats or bignums although working on mri in the future might be a thing I’m interested in
[19:06:13] *** Joins: subbu (~subbu@user/subbu)
[19:34:15] <headius> ok release notes time
[20:13:03] <headius> enebo: https://gist.github.com/headius/db1f528247925ce314f96198b97d7a9f
[20:13:28] <headius> I didn't include all issues in notes but the super fixes being regressions seemed worth a call-out
[20:13:41] <enebo[m]> We should mention simplecov
[20:14:11] <enebo[m]> It is not specifically for that but anyone use simplecov and mailer? would explode
[20:14:35] <headius> which issue is that
[20:15:02] <enebo[m]> https://github.com/jruby/jruby/issues/6984
[20:15:16] <enebo[m]> I guess one generated file for a gem had >32k lines
[20:15:36] <enebo[m]> I raised parsing to use full int (since we store an int for line already in AST)
[20:16:32] <headius> ok I'll add something for it
[20:16:54] <enebo[m]> cool.  I have all bits uploaded and site edited sans release notes
[20:17:26] <enebo[m]> once site it up let's divide up rest like last couple of releases
[20:17:54] <enebo[m]> Maven is propagated too and I think I hate the lack of feedback that oss sonatype web interface gives
[20:18:33] <enebo[m]> I did everything right but I sit there for like 10 minutes sweating it anyways paranoidly thinking I hit drop instead of release
[20:20:26] <enebo[m]> puritylake: I think you said you are using Emacs?  I think you are in that mode where you are mixing tabs and spaces
[20:20:35] <headius> enebo: ok added
[20:20:41] <headius> you can wordsmith if you want
[20:22:11] <enebo[m]> just going to proof and make sure site displays before I push
[20:22:25] <enebo[m]> then when we see site is live we can do notifications
[20:23:42] <headius> I'm using link references in my markdown so let me know if that works oik
[20:23:43] <headius> ok
[20:23:48] <enebo[m]> headius: we could link to stadium's page or not?
[20:24:19] <headius> yeah good idea, 
[20:24:22] <headius> https://www.macstadium.com/opensource
[20:24:42] <puritylake[m]> enebo: oops, sorry I’ll fix that, tabs or spaces?
[20:25:02] <headius> added
[20:25:11] <enebo[m]> we only use spaces...I think I have this in my .emacs file...I can find it
[20:25:29] <puritylake[m]> Please do, thanks
[20:27:31] <enebo[m]> headius: That is not rendering for me
[20:27:54] <headius> where?
[20:28:14] <enebo[m]> on our rake server but get this....
[20:28:28] <enebo[m]> I do raw on that and what I get is most definitely not what you put in
[20:28:34] <headius> hmm
[20:28:38] <enebo[m]> [MacStadium's OSS program][macstadium]
[20:28:44] <enebo[m]> That is definitely weird
[20:29:00] <headius> that's how you do a link reference with text
[20:29:24] <headius> it works right in the gist, hmm
[20:29:31] <headius> the other links render ok?
[20:29:36] <enebo[m]> oh wait this is my mistake
[20:29:49] <enebo[m]> I did not add the footnote
[20:29:54] <headius> oh ok
[20:30:44] <enebo[m]> I have not actually use this form.  I have only uses the []() form where it is inlined
[20:31:14] <headius> yeah this is a bit easier to handle when putting together the issue lists
[20:31:16] <enebo[m]> funny I typed in "[]()"
[20:31:19] <enebo[m]> hahah neat
[20:31:34] <enebo[m]> ok so matrix must get that markdown
[20:31:42] <enebo[m]> [#6989 - case when with an empty array](https://github.com/jruby/jruby/pull/6989)
[20:31:44] <enebo[m]> fun
[20:31:45] <headius> [foo](bar)
[20:32:03] <enebo[m]> so that is pretty cool
[20:32:04] <headius> mine isn't a real link
[20:32:11] <headius> but yeah I guess so
[20:32:20] <enebo[m]> not sure I just rattle that off with my fingies but it is still cool you can do it
[20:32:27] <headius> hello
[20:32:27] <headius> ====
[20:32:34] <headius> yeah md throughout
[20:32:38] <enebo[m]> Does this mean we can paste tables in here :)
[20:32:51] <headius> kickban
[20:33:13] * headius slaps enebo around a bit with a large trout
[20:33:21] * enebo[m] reacts
[20:33:23] <enebo[m]> haha
[20:33:38] <enebo[m]> slash me is a thing which makes sense
[20:33:38] <enebo[m]> so many ways
[20:33:41] <headius> yeah
[20:33:50] <headius> tweet is locked and loaded
[20:34:56] <enebo[m]> HAHA I merged someones PR the other week taking exception to 'C Ruby' over 'CRuby'
[20:35:14] <headius> crooby
[20:35:18] <enebo[m]> I pushed site so it should be soon
[20:36:38] <enebo[m]> site is up.  I will make GH release and send out emails
[20:37:33] <headius> ugh none of my recent rvm PRs have merged because I didn't include a changelog entry
[20:38:37] <enebo[m]> puritylake: I believe it is this (setq-default indent-tabs-mode nil)
[20:39:03] <headius> I'll get these other PRs cleaned up today along the way to 9.3.3 PRs
[20:39:23] <enebo[m]> Although I do not edit Java with emacs so it may not be for Java mode (although it probably will)
[20:39:28] <enebo[m]> ok
[20:47:15] *** Joins: enebo (~enebo@c-75-73-81-96.hsd1.mn.comcast.net)
[20:47:36] *** ChanServ changes topic to 'Get 9.3.3.0! http://jruby.org/ | http://wiki.jruby.org | http://logs.jruby.org/jruby/ | http://bugs.jruby.org | Paste at http://gist.github.com'
[20:47:43] *** Parts: enebo (~enebo@c-75-73-81-96.hsd1.mn.comcast.net) ()
[20:55:16] <headius> https://github.com/rvm/rvm/pull/5175
[20:55:24] <headius> rvm is like ten times more work to update than the others
[20:55:44] <headius> changelog entry needs to be included, but for this it needs to include the PR, so I have to push the PR, get the URL, edit changelog, and push again
[20:58:49] <headius> https://twitter.com/jruby/status/1483853882732253189
[21:01:57] <enebo[m]> cool
[21:02:41] <enebo[m]> puritylake: There is a significant problem with %f impl you will need to change
[21:03:17] <enebo[m]> You call RubyFloat.toString which ends up calling .to_s which ends up calling our sprintf impl using %e and %g
[21:05:19] <enebo[m]> I think making a String numeric value to reprocess this again to make another String is how the old way worked but it would be nice to just process the number apart and build up a String a single time vs have another library give us a source string to process.
[21:06:23] <enebo[m]> As I said earlier today this was what I considered a stretch goal but if you are going to change from original method you may as well look at doing the processing yourself (and it will also be way faster when you are done)
[21:06:44] <enebo[m]> It is a bigger ask though
[21:07:08] <puritylake[m]> Ok, I can see how that is a problem, I'll work on that asap
[21:07:35] <puritylake[m]> I'll ignore the specs for the time being
[21:08:01] <enebo[m]> A second smaller thing I noticed is I do not think we want integers to be auto converted into floats because it means constructing a new ruby object
[21:08:38] <puritylake[m]> Should I throw if that is the case?
[21:08:53] <enebo[m]> The original code handled the int as its own case
[21:09:15] <enebo[m]> It just never had anything past the period so that part of it was simpler
[21:09:16] <headius> installers and docker are in flight
[21:09:19] <headius> gonna finish up socials
[21:09:39] <enebo[m]> I admit I liked the simplicity of what you did but we don't want to have that overhead
[21:10:06] <puritylake[m]> Of course, completely understand
[21:13:19] <headius> https://www.reddit.com/r/ruby/comments/s7vqj7/jruby_9330_released_with_support_for_apple_m1/
[21:13:23] <headius> like and subscribe
[21:15:56] <headius> socials are done
[21:16:08] <headius> I think that's all my tasks
[21:16:47] <headius> good work everybody, take a long lunch
[21:18:54] <headius> onward to 9.4
[21:19:23] <enebo[m]> hahah
[21:36:43] <puritylake[m]> Congrats, here is to many more versions
[21:49:46] <puritylake[m]> enebo: having trouble with running the mri tests on windows saying that wait is unsupported
[22:19:23] <enebo[m]> puritylake: ok I will take a look. 
[22:19:47] <puritylake[m]> I appreciate it, I'll run it in WSL until then
[22:20:28] <enebo[m]> puritylake: yeah WSL should be fine
[22:35:31] <enebo[m]> puritylake: https://www.researchgate.net/publication/2295884_How_to_Read_Floating_Point_Numbers_Accurately
[22:36:13] <enebo[m]> If you know lispy langs this is a couple of algos for converting floating point values to binary
[22:36:49] <puritylake[m]> Will I need to turn a float to binary?
[22:37:42] <enebo[m]> well you need to convert the float into a string so you need to accurately parse a float value
[22:39:08] <enebo[m]> Getting the proper values which align with how it may compute by other printfs is likely to just work using someone's academic paper on the subject
[22:39:27] <enebo[m]> with that said I have not read this yet.  I just noticed a dtoa impl mentioned this paper
[22:48:51] <puritylake[m]> I'll definitely read it, might take some time to reimplement it if it helps
[22:49:51] <enebo[m]> puritylake: the thing is you have a double in Java and we need a string which represents it so we need to be able to break it down so we can output chars
[22:50:23] <enebo[m]> puritylake: in ye olden days no one wanted to take this on and Java did about 95% of what we needed so we sort of double parse
[22:50:37] <enebo[m]> but the second parse is taking a string to make another string
[22:50:43] <enebo[m]> Let's take out the middleman
[22:54:17] <puritylake[m]> Ya, that makes sense, the way I am doing it I might as well just use System.out.printf
[22:54:51] <enebo[m]> well the way you are doing it is very similar to how we are doing it currently just differently
[22:55:10] <enebo[m]> so in that sense it is no worse off and it seemingly works for at least as much as we had before
[22:55:29] <enebo[m]> but if we are going to change how we do it that much we may as well go the rest of the way
[22:55:48] <enebo[m]> new impls mean new risk so we may as well get as much out of that risk as possible
[22:56:29] <puritylake[m]> Indeed, I appreciate the link, I'll see what I can do
[23:30:30] <mattpatt[m]> <enebo[m]> "headius: mattpatt If this is..." <- The problem was chars valid in 1252 but not utf-8 and vice versa 
[23:31:04] <enebo[m]> ouch...you can 1252 java?
[23:33:19] <mattpatt[m]> <headius> "mattpatt: I would say you..." <- That is what is happening. After so long with Ruby and the potential for explicit declaration of source file encoding i kind of assumed you could do that in Java too, and there’s some kind of eclipse specific config that stores the encoding as sidecar metadata, which was what was being used by the dev. But not in maven
[23:39:03] <mattpatt[m]> enebo: you can, and it kinda makes sense here because we’re parsing a thing that predates 1252 and makes heavy use of all the bits. Typesetting markup from the 70s. 👍
