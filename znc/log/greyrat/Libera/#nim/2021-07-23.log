[00:07:40] *** Joins: xet7 (~xet7@user/xet7)
[00:30:08] <federico3> some proc names are treated specially so that `*`(a, b)   can be used in  "a * b"  without a dot after "a"
[00:31:32] <federico3> can I do that with other proc names?
[00:35:56] <FromDiscord> <carmysilna> sent a code paste, see https://play.nim-lang.org/#ix=3tJN
[00:36:02] <FromDiscord> <treeform> In reply to @RattleyCooper "nimdocs.com is down or": Nim docs is up again. Some thing just Killed the nim process.
[01:18:23] <FromDiscord> <krisppurg> sent a code paste, see https://play.nim-lang.org/#ix=3tK6
[01:18:53] <FromDiscord> <krisppurg> (edit) "https://play.nim-lang.org/#ix=3tK6" => "https://play.nim-lang.org/#ix=3tK7"
[01:22:41] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 255 seconds)
[01:37:45] <FromDiscord> <haxscramper> It would only show types from a single branch
[01:38:40] <FromDiscord> <haxscramper> IIRC there is no way around that. https://github.com/nim-lang/RFCs/issues/337 might address this in the future
[01:39:40] <FromDiscord> <saem> does it seem sound that enum string values can be non-unique within the enum's set of values?
[01:39:52] <FromDiscord> <haxscramper> Nim doc could've operated on the raw AST, but that would loose other info
[01:40:06] <FromDiscord> <haxscramper> Yes, sounds perfectly fine to me
[01:40:35] <FromDiscord> <saem> yet we're particular about the numbering and declaration order... I guess.
[01:40:36] <FromDiscord> <haxscramper> From what I can tell enum string values are just shorthand for overriding $
[01:40:45] <FromDiscord> <planetis> [Clonkk](https://matrix.to/#/@rf.c:matrix.org), haxscramper thanks guys
[01:40:48] <FromDiscord> <ElegantBeef> They're also used in `parseEnum` so that'll be odd
[01:41:10] <FromDiscord> <saem> that too
[01:41:15] <FromDiscord> <haxscramper> Yes, that is strange but not unheard of
[01:41:28] <FromDiscord> <ElegantBeef> Ah it does raise an exception
[01:41:36] <FromDiscord> <ElegantBeef> Well actually a compile time error 😄
[01:41:51] <FromDiscord> <haxscramper> Ah, well, then we are good
[01:42:07] <FromDiscord> <saem> "good"
[01:42:40] <FromDiscord> <haxscramper> "Don't should yourself and you will be fine"
[01:43:29] <FromDiscord> <ElegantBeef> Seems odd there isnt a `parseEnumVal` or better named that doesnt look at the string representation
[01:43:44] <FromDiscord> <ElegantBeef> Or a overload for `useStringName`
[01:43:49] <FromDiscord> <ElegantBeef> (edit) "for" => "with"
[01:43:51] <FromDiscord> <saem> There are things like `discard` to ensure a value isn't forgotten as that leads to bugs, but some data entry for an enum value string, which seems like a similar class of error is ignored.
[01:44:29] <FromDiscord> <haxscramper> It don't think it is the same class of errors
[01:44:51] <FromDiscord> <haxscramper> Duplicate enum strings is a serialization problem
[01:45:16] <FromDiscord> <haxscramper> And only if you use string enum values instead of int representation
[01:45:24] <FromDiscord> <saem> serdes along JSON/etc API boundaries with enums isn't all that uncommon.
[01:46:03] <FromDiscord> <ElegantBeef> Considering you cannot use parseEnum on them i feel like that's not an issue, though i'd like to be proven wrong 😄
[01:46:09] <FromDiscord> <haxscramper> If you have repeated enum string it is a compile error as @ElegantBeef just said
[01:46:40] <FromDiscord> <saem> fair enough, it at least shows up when you go to use it.
[01:47:20] <FromDiscord> <ElegantBeef> I imagine there are some cases where you'd want share values and even if you want to use parse enum with them, you could always store them in an `array[enum, string]`
[01:47:40] <FromDiscord> <ElegantBeef> Or your own parseEnum of course
[01:48:26] <FromDiscord> <ElegantBeef> Like i said it's kinda odd there isnt a way around the parsing with duplicate string values in the stdlib
[01:48:47] *** Quits: max22- (~maxime@2a01cb088335980056c49211150f1458.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:51:37] <FromDiscord> <haxscramper> `allowDuplicates: static[bool] = false` and `when allowDuplicates`
[01:52:22] <FromDiscord> <ElegantBeef> Yea i know how it'd work 😄
[02:07:48] *** Parts: fputs_ (~fputs@137.220.33.212) ()
[03:33:02] <FromDiscord> <deech> Anyone know of efforts to get nimble to generate Nix recipes? Not a third party tool that parses a .nimble file but adding that functionality to the nimble tool itself
[03:34:16] <FromDiscord> <carmysilna> You could probably add a Nimble task
[03:39:12] <FromDiscord> <deech> I'm looking for deeper integration.
[03:39:17] <FromDiscord> <deech> But thanks!
[03:52:08] <FromDiscord> <creonico> Do I always have to cast the `nil` when assigning it to any type? `var graphics_queue_family:uint32 = nil;` `Error: type mismatch: got <typeof(nil)> but expected 'uint32'`
[03:54:34] <FromDiscord> <saem> uint32 isn't a reference type so you can't assign nil to it. You'd have to cast it, but there are probably more fundamental things you want to consider about your design.
[03:55:57] <FromDiscord> <creonico> So I can only assign nil to reference types?
[03:57:06] <FromDiscord> <ElegantBeef> Yes that's what nil means
[03:57:14] <FromDiscord> <ElegantBeef> it's a ptr that points to nothing
[03:57:31] <FromDiscord> <creonico> And would casting it to uint32 type give me 0?
[03:57:32] <FromDiscord> <ElegantBeef> If you want this "optional" behaviour checkout `options`
[03:57:37] <FromDiscord> <ElegantBeef> yes
[03:58:44] <FromDiscord> <saem> Is `graphics_queue_family` an opaque id that you receive some how?
[04:04:45] <FromDiscord> <creonico> yes
[04:06:34] <FromDiscord> <saem> you could also consider making a distinct type to model the behaviour you want.
[04:08:22] <FromDiscord> <saem> I'm presuming you don't want to really add, subtract, etc... so the vast majority of integer operations are unnecessary. You likely only want a range and a func for a predicate to check if it's valid (not zero?)?
[04:20:43] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:26:09] <fn> <11ForumUpdaterBot99> New thread by Stu002: Need confirmation this code causes a `SIGSEGV: Illegal storage access`, see https://forum.nim-lang.org/t/8260
[05:50:35] <FromDiscord> <creonico> Hey, Sorry for asking so many questions(and probably stupid ones). In C, I have this `if(queue_family_properties[i].queueFlags & (enum VkQueueFlagBits)1){` and  in Nim this `if queue_family_property.queueFlags and cast[VkQueueFlagBits](1):`, but I get `type mismatch: got <VkQueueFlags, VkQueueFlagBits>`. So my question is, do I need to overload `and` for this to work?
[05:51:34] <FromDiscord> <ElegantBeef> What vulkan bindings are you using?
[05:51:41] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:54:14] <FromDiscord> <creonico> https://github.com/nimgl/vulkan
[05:54:15] <fn> <12R2D299> 4GitHub: 7"Vulkan bindings for Nim"
[05:55:21] <FromDiscord> <ElegantBeef> Ok so what you should be able to do is `queueFlags.uint32 and 1u32`
[05:55:40] <FromDiscord> <creonico> Thats what I though I would need
[05:55:51] <FromDiscord> <creonico> But why won't it work like iin C
[05:55:59] <FromDiscord> <creonico> (edit) "iin" => "in"
[05:56:03] <FromDiscord> <ElegantBeef> Cause there is no and operator for enums
[05:56:16] <FromDiscord> <creonico> oh
[05:56:46] <FromDiscord> <checkersai> you could overload the operator for that enum type
[05:56:51] <FromDiscord> <ElegantBeef> well more accurately no and operator for `type(queueFlags), VkQueueFlagBits`
[05:57:12] <FromDiscord> <ElegantBeef> Yea that's a solution
[05:57:27] <FromDiscord> <ElegantBeef> Personally i try to holeless enums as much as possible
[05:57:43] <FromDiscord> <ElegantBeef> Might be a bit of an overhead but makes life easier imo
[05:58:39] <FromDiscord> <checkersai> holeless?
[05:59:00] <FromDiscord> <ElegantBeef> Enum's without any gaps inbetween values that can be used in an array or a bitset safely
[06:00:13] <FromDiscord> <checkersai> ah yeah makes perfect sense
[06:00:34] <FromDiscord> <checkersai> personally I'd probably just use a bitfield and consts
[06:00:36] <FromDiscord> <creonico> In reply to @ElegantBeef "Enum's without any gaps": How make?
[06:00:56] <FromDiscord> <creonico> I never heard that concept
[06:00:59] <FromDiscord> <checkersai> (edit) "bitfield" => "bitset"
[06:01:35] <FromDiscord> <ElegantBeef> Well i'm probably one of the few that's odd enough to do it 😄
[06:02:05] <FromDiscord> <ElegantBeef> He's my example with assimp i did today https://github.com/beef331/nimassimp/blob/master/src/assimp.nim#L232-L290
[06:02:46] <FromDiscord> <ElegantBeef> Which is a replacement for https://github.com/awr1/nimassimp/blob/master/assimp.nim#L235-L276
[06:03:22] <FromDiscord> <ElegantBeef> there is an overhead of going from the bitset to the original int ofc, but i'm a silly bastard
[06:03:50] <FromDiscord> <ElegantBeef> I did a similar thing for SDL2
[06:04:33] <FromDiscord> <checkersai> What is assimp lol
[06:05:07] <FromDiscord> <checkersai> is it as-simp like "as a simp, I ..." or ass-imp like "an imp's ass"
[06:05:10] <FromDiscord> <ElegantBeef> An asset importing library
[06:05:51] <FromDiscord> <@bracketmaster-5a708063d73408ce4> obviously
[06:06:16] <FromDiscord> <@bracketmaster-5a708063d73408ce4> jk - I didn't know what assimp meant at all either
[06:06:50] <FromDiscord> <ElegantBeef> For context i wrote a macro to convert the sdl2 keycode enum to a holeless one and emit a converter to the new version for the sdl poll event logic, which outputs  https://play.nim-lang.org/#ix=3tLS
[06:07:18] <FromDiscord> <ElegantBeef> I do silly shit all the time, only worthwhile to copy me if you like it 😛
[06:19:50] <FromDiscord> <checkersai> I'll tackle inputs if my software renderer ends up fast enough to be able to make a game out of it
[06:23:04] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Shouldn't static in the macro work here? https://play.nim-lang.org/#ix=3tMa
[06:23:33] <FromDiscord> <Elegantbeef> No `let` is a runtime value
[06:23:41] <FromDiscord> <@bracketmaster-5a708063d73408ce4> oh
[06:23:46] <FromDiscord> <@bracketmaster-5a708063d73408ce4> How do I get around that?
[06:23:51] <FromDiscord> <Elegantbeef> `const`
[06:34:09] *** Quits: aeverr (~deodex@ai126162184205.56.access-internet.ne.jp) (Ping timeout: 265 seconds)
[06:41:57] *** Joins: rockcavera (~rc@192.12.114.221)
[06:41:57] *** Quits: rockcavera (~rc@192.12.114.221) (Changing host)
[06:41:57] *** Joins: rockcavera (~rc@user/rockcavera)
[06:46:05] <FromDiscord> <checkersai> Is it worth compiling with -d:danger instead of -d:release?
[06:46:19] <FromDiscord> <Rika> Your call
[06:46:28] <FromDiscord> <Rika> You lose runtime checks that way
[06:46:32] <FromDiscord> <Elegantbeef> If you want speed
[06:46:50] <FromDiscord> <Elegantbeef> It's a lot like "is it worth going down hill on a bicycle without a helmet"
[06:47:05] <FromDiscord> <Rika> Don’t out me like that beef what the hell
[06:47:26] <FromDiscord> <Elegantbeef> Rika doesnt wear protection confirmed
[06:47:48] <FromDiscord> <Rika> I like doing it without, feels much better
[06:47:51] <FromDiscord> <Rika> Feels open
[06:48:05] <FromDiscord> <Elegantbeef> The wind in your hair eh?
[06:49:21] <FromDiscord> <Rika> Yeah especially with the length of it
[06:49:30] <FromDiscord> <Rika> My hair’s very long
[06:52:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> COVID hair?
[06:52:48] <FromDiscord> <@bracketmaster-5a708063d73408ce4> also - templates don't seem to like  `consts`
[06:52:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> https://play.nim-lang.org/#ix=3tMo
[06:52:58] <FromDiscord> <Elegantbeef> If your covid has hair it's not covid, but mould
[06:53:23] <FromDiscord> <@bracketmaster-5a708063d73408ce4> well - during covid - it was hard to find brave barbers for some
[06:53:28] <FromDiscord> <@bracketmaster-5a708063d73408ce4> so they just didn't cut their hair
[06:53:51] <FromDiscord> <Elegantbeef> I'm not stupid i make jokes
[06:54:02] <FromDiscord> <@bracketmaster-5a708063d73408ce4> where I live though, many people pretended like covid wasn't a thing
[06:54:04] <FromDiscord> <Rika> No more of “I was planning on growing it out and COVID hit so I had an actual excuse now”
[06:54:20] <FromDiscord> <Elegantbeef> So consts dont seem to support tuple unpacking?
[06:54:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> they do, just not in templates
[06:54:37] <FromDiscord> <Rika> Why?
[06:54:44] <FromDiscord> <Rika> I mean the template part
[06:54:45] <FromDiscord> <@bracketmaster-5a708063d73408ce4> i have no idea
[06:54:58] <FromDiscord> <@bracketmaster-5a708063d73408ce4> so I've been doing some really weird AST manipulations in Nim
[06:55:10] <FromDiscord> <@bracketmaster-5a708063d73408ce4> And let me tell you, nim macros have some really dark corners
[06:55:13] <FromDiscord> <@bracketmaster-5a708063d73408ce4> where things just break
[06:55:22] <FromDiscord> <Rika> Yes
[06:55:35] <FromDiscord> <@bracketmaster-5a708063d73408ce4> maybe nim should learn from lisp
[06:55:45] <FromDiscord> <@bracketmaster-5a708063d73408ce4> lisp is know for being a little more robust in the AST department
[06:56:36] <FromDiscord> <Rika> I believe that lisp is a bit too different in terms of AST to learn from?
[06:58:26] <FromDiscord> <Elegantbeef> This seems like a simple fix, but we'll see
[07:03:20] <FromDiscord> <Elegantbeef> Doesnt seem like there is an existing issue related to this
[07:03:38] <FromDiscord> <@bracketmaster-5a708063d73408ce4> oh?
[07:03:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> huh...
[07:03:51] <FromDiscord> <@bracketmaster-5a708063d73408ce4> maybe is a feature?
[07:03:56] <FromDiscord> <@bracketmaster-5a708063d73408ce4> it -\> its
[07:04:18] <FromDiscord> <Elegantbeef> Well it's useless code presently
[07:04:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> i actually make good use of that
[07:04:32] <FromDiscord> <Elegantbeef> Since those cannot be accessed outside the template 😀
[07:05:00] <FromDiscord> <@bracketmaster-5a708063d73408ce4> i'm currently writing a hardware virtual machine
[07:05:29] <FromDiscord> <@bracketmaster-5a708063d73408ce4> its a virtual machine where you can instantiate adders, subtractors, multipliers, nand gates, or gates, etc.
[07:05:34] <FromDiscord> <@bracketmaster-5a708063d73408ce4> and connect them up and simulate
[07:05:56] <FromDiscord> <Elegantbeef> Anywho i'm looking fixing it, though idk if i can
[07:06:05] <FromDiscord> <@bracketmaster-5a708063d73408ce4> a higher level RTL would emit hardware VM code which is valid nim
[07:06:29] <FromDiscord> <@bracketmaster-5a708063d73408ce4> the reason I use so many macros is I require the all the connections to be frozen by runtime
[07:06:49] <FromDiscord> <@bracketmaster-5a708063d73408ce4> which means I need to traverse and build parts of the netlist during compiletime
[07:07:21] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I say this to justify me using const - in that weird way
[07:07:42] <FromDiscord> <Elegantbeef> Yea yea i get it
[07:08:44] <FromDiscord> <@bracketmaster-5a708063d73408ce4> oh?
[07:08:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ok cool
[07:08:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm glad I don't have to explain more
[07:09:31] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Although I do provide a higher level overview here\: https://yehowshuaimmanuel.com/posts/polish_new_rtl/
[07:13:19] <FromDiscord> <@bracketmaster-5a708063d73408ce4> actually it seems it works if you don't use tuples
[07:13:27] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a long message, see http://ix.io/3tMA
[07:14:05] <FromDiscord> <Elegantbeef> Yea i'm looking at the compiler and i see why it fails, now to just fix it \:P
[07:14:31] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sounds very advanced
[07:15:06] <FromDiscord> <@bracketmaster-5a708063d73408ce4> One of my friends works at Google and he knows a compiler engineer there that gets paid 1M/yr.
[07:15:11] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Maybe you should work at Google
[07:15:15] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Probably won't be on nim
[07:15:21] <FromDiscord> <Elegantbeef> I'm not a compiler dev though
[07:15:43] <FromDiscord> <Elegantbeef> I just like fixing issues if I can
[07:15:57] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that's how it starts
[07:22:18] <FromDiscord> <Elegantbeef> ehh
[07:22:18] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/867962298503933972/image.png
[07:33:02] <FromDiscord> <Jakraes> Does anyone have a tutorial for the net library?
[07:33:27] <FromDiscord> <Jakraes> Kinda struggling here trying to find out how to do certain things
[07:36:01] <FromDiscord> <Elegantbeef> What's the problem?
[07:37:14] <FromDiscord> <Jakraes> I'm trying to make a client send info over TCP to a server and then make the server send an updated version of the info back to the client
[07:38:34] <FromDiscord> <Jakraes> I get that you can use trySend() in the client, but how could I read that message in the server?
[07:39:40] <FromDiscord> <Elegantbeef> one of the recv functions if i get the question
[07:40:04] <FromDiscord> <Jakraes> Gotcha, I'll see if it works
[07:40:09] <FromDiscord> <Jakraes> Thank you in advance!
[08:00:47] <FromDiscord> <Bung> @treeform do you have todo list of fidget? I might contribute some code
[08:03:58] <FromDiscord> <Elegantbeef> Well bracketmaster watch this PR for me, thanks 😛 https://github.com/nim-lang/Nim/pull/18562
[08:04:50] <FromDiscord> <Elegantbeef> Back to opengl
[08:09:35] <FromDiscord> <Bung> nice catch
[08:10:01] <FromDiscord> <treeform> In reply to @Bung "<@!107140179025735680> do you have": Sorry, I am currently working on Fidget 2 and I am not looking for help.
[08:10:58] <FromDiscord> <Bung> okay
[08:21:34] <FromDiscord> <demotomohiro> @Jakraes This is Nim's asyncnet tutorial: https://xmonader.github.io/nimdays/day15_tcprouter.html
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:39] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:33:52] <FromDiscord> <i_right_i> How do you  'echo i'  and i be printed in hexadecimal?
[09:35:04] <FromDiscord> <ElegantBeef> !eval import std/strutils; echo 100.toHex
[09:35:09] <NimBot> 0000000000000064
[09:35:25] <FromDiscord> <i_right_i> okay thanks
[09:46:05] <FromDiscord> <Rika> In reply to @NimBot "0000000000000064": Strange representation
[09:58:50] *** Joins: tiorock (~rc@192.12.114.221)
[09:58:50] *** Quits: tiorock (~rc@192.12.114.221) (Changing host)
[09:58:50] *** Joins: tiorock (~rc@user/rockcavera)
[09:58:50] *** rockcavera is now known as Guest5036
[09:58:50] *** Quits: Guest5036 (~rc@user/rockcavera) (Killed (cadmium.libera.chat (Nickname regained by services)))
[09:58:50] *** tiorock is now known as rockcavera
[10:00:19] <FromDiscord> <Jakraes> How can I turn an int into a string? I can't find it in the documentation, I tried doing string(int) and it didn't work
[10:00:29] <FromDiscord> <treeform> you would use `$i`
[10:00:39] <FromDiscord> <Elegantbeef> `$` is the nim stringify operator
[10:00:47] <FromDiscord> <Jakraes> Oh nice, thank you
[10:02:09] <FromDiscord> <Elegantbeef> Oh hey treeform would you be opposed to a PR that added distinct `Radian` and `Degree` types to VMath to not run into runtime errors? 😀
[10:02:43] <FromDiscord> <Elegantbeef> I say runtime errors, but it's more just wrong runtime logic
[10:03:11] <FromDiscord> <treeform> so you would have to cast to Degree or Radians?
[10:03:17] <FromDiscord> <treeform> Naa I don't think I like that
[10:03:35] <FromDiscord> <treeform> all math should be done in radians
[10:03:45] <FromDiscord> <Elegantbeef> Tell that to `perspective`
[10:03:50] <FromDiscord> <treeform> Degree should be display only
[10:04:43] <FromDiscord> <treeform> fovy should probably be in radians you are right
[10:05:59] <FromDiscord> <treeform> On the other hand fovy is more of a user preference
[10:06:31] <FromDiscord> <treeform> when you set fov 90 you don't take out a ruler to measure how far your eyes from the screen
[10:06:39] <FromDiscord> <treeform> you just adjust the number till it feels good
[10:08:04] <FromDiscord> <treeform> https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml
[10:08:10] <FromDiscord> <treeform> "Specifies the field of view angle, in degrees, in the y direction."
[10:08:17] <FromDiscord> <treeform> even openGL did it in degrees
[10:08:21] <FromDiscord> <treeform> I don't know
[10:09:12] *** Joins: max22- (~maxime@2a01cb088335980012d1581da90dd311.ipv6.abo.wanadoo.fr)
[10:09:30] *** Quits: max22- (~maxime@2a01cb088335980012d1581da90dd311.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[10:09:42] <FromDiscord> <Elegantbeef> Still thinking about distincts could do `-d:vmathUnsafeAngles`, but would ruin all that depend on vmath
[10:09:54] *** Joins: max22- (~maxime@2a01cb088335980012d1581da90dd311.ipv6.abo.wanadoo.fr)
[10:12:44] <FromDiscord> <treeform> GLM also uses perspective: https://knowww.eu/nodes/59b8e93cd54a862e9d7e40e3 in degrees
[10:13:04] <FromDiscord> <Elegantbeef> Yea it might be common
[10:13:05] <FromDiscord> <treeform> but it uses 45 when I use 90 so there is that
[10:13:57] <FromDiscord> <treeform> I don't like the distinct Radian and Degree because it almost never comes up
[10:14:12] <FromDiscord> <treeform> and there is ton of angle math everywhere
[10:39:11] <fn> <11ForumUpdaterBot99> New Nimble package! mycouch - a couchDB client written in Nim, see https://github.com/hamidb80/mycouch
[10:39:11] <fn> <12R2D299> 4GitHub: 7"a CouchDB client for nimmers"
[11:22:55] *** Joins: fredrikhr (~fredrikhr@89-162-57-126.fiber.signal.no)
[11:29:17] *** Quits: max22- (~maxime@2a01cb088335980012d1581da90dd311.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[11:30:30] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:04:59] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[12:05:30] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 252 seconds)
[12:08:02] *** Joins: rockcavera (~rc@192.12.114.221)
[12:08:02] *** Quits: rockcavera (~rc@192.12.114.221) (Changing host)
[12:08:02] *** Joins: rockcavera (~rc@user/rockcavera)
[12:12:33] <FromDiscord> <enthus1ast> If it runs on linux, maybe start it via systemd with its service restart feature.↵(@treeform)
[12:38:24] *** Joins: max22- (~maxime@2a01cb08833598000b5bf8932a7d60ea.ipv6.abo.wanadoo.fr)
[12:49:08] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 252 seconds)
[13:00:38] *** Joins: pro (~pro@user/pro)
[13:16:31] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3tQ7
[13:32:03] <FromDiscord> <haxscramper> If you guarantee `x: var T` would outlive closure you can just capture pointer to it instead
[13:33:02] <FromDiscord> <haxscramper> `var ptrX = addr x`  and `fieldPairs(ptrX[])`
[13:33:28] <FromDiscord> <impbox [ftsf]> thanks! that works
[13:33:46] <FromDiscord> <haxscramper> But be aware of use-after-free in that case
[13:47:25] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:19:59] <FromDiscord> <hamidb80> In reply to @fn "<ForumUpdaterBot> New Nimble package!": yay
[14:38:04] *** Joins: aeverr (~deodex@ai126162184205.56.access-internet.ne.jp)
[14:42:05] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[14:58:44] *** Quits: max22- (~maxime@2a01cb08833598000b5bf8932a7d60ea.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:59:08] *** Joins: max22- (~maxime@2a01cb08833598000b5bf8932a7d60ea.ipv6.abo.wanadoo.fr)
[16:19:52] *** Joins: arkurious (~arkurious@user/arkurious)
[16:25:30] *** Quits: max22- (~maxime@2a01cb08833598000b5bf8932a7d60ea.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[17:25:42] <FromDiscord> <@bracketmaster-5a708063d73408ce4> How can I set up a variable that lets me keep track of how many times I've called a macro?
[17:28:28] *** Joins: max22- (~maxime@2a01cb088335980017568d6be50870de.ipv6.abo.wanadoo.fr)
[17:32:54] <FromDiscord> <Tuatarian> Hello
[17:33:22] <FromDiscord> <Tuatarian> I'm trying to implement an ML agent for a risk-like strategy game
[17:33:58] <FromDiscord> <Tuatarian> Was thinking of using neuroevolution (nnet + genetic selection for weights and biases)
[17:34:10] <FromDiscord> <Tuatarian> The issue being... What is the output layer?
[17:34:25] <FromDiscord> <Tuatarian> The set of possible moves every turn is variable
[17:34:35] <FromDiscord> <Tuatarian> And the first item in that list might change every turn
[17:35:03] <FromDiscord> <Tuatarian> Any ideas?
[17:35:16] <FromDiscord> <@bracketmaster-5a708063d73408ce4> What's the issue?
[17:35:32] <FromDiscord> <Tuatarian> What do I put for the output layer?
[17:35:34] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Have you done an nnet successfully before?
[17:35:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> perhaps in another language?
[17:35:42] <FromDiscord> <Tuatarian> Yes, but simpler one
[17:35:59] <FromDiscord> <Tuatarian> Bog standard mnist recog
[17:36:11] <FromDiscord> <Tuatarian> Didn't use a keras/tf/anything though
[17:36:45] <FromDiscord> <Tuatarian> This is way more complex imo
[17:37:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> are you trying to get help choosing the right data structure for your evonet?
[17:37:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @elegantbeef\:matrix.org \: I feel like this macro should work\: https://play.nim-lang.org/#ix=3tSQ
[17:39:15] <FromDiscord> <Tuatarian> Yeah
[17:39:38] <FromDiscord> <Tuatarian> Or maybe the entire approach is wrong and I should be using something other than an evonet
[17:40:20] <FromDiscord> <@bracketmaster-5a708063d73408ce4> you're saying that the order of layers can change?
[17:40:38] <FromDiscord> <Tuatarian> No
[17:40:48] <FromDiscord> <Tuatarian> But I'm really not sure what the output neurons should be
[17:41:23] <FromDiscord> <@bracketmaster-5a708063d73408ce4> in nnets, outputs are almost always some n-dimensional array
[17:41:49] <FromDiscord> <Tuatarian> But each output neuron represents something right?
[17:42:01] <FromDiscord> <Tuatarian> With mnist each output neuron was the number the nnet war guessing it was
[17:42:23] <FromDiscord> <Tuatarian> With evonets for other games, each output neuron was a button input
[17:42:30] <FromDiscord> <Tuatarian> But that doesn't really make sense here
[17:42:57] <FromDiscord> <Tuatarian> There are 2 issues with making one neuron for every possible move across the board imo
[17:43:12] <FromDiscord> <Tuatarian> 1. Huge number of possible moves if you ignore the rules of the game
[17:43:24] <FromDiscord> <Tuatarian> 2. Don't know how to ensure a legal one is picked
[17:43:52] <FromDiscord> <Tuatarian> Guess I can just filter through them and choose the legal move it's most confident about?,
[17:43:57] <FromDiscord> <Tuatarian> But there has to be a better way
[17:44:58] <FromDiscord> <@bracketmaster-5a708063d73408ce4> There are nets that can play chess - which has a very large space of possible moves
[17:44:59] <FromDiscord> <haxscramper> `const counter = CacheCounter("counterName")` from https://nim-lang.org/docs/macrocache.html#CacheCounter
[17:45:09] <FromDiscord> <@bracketmaster-5a708063d73408ce4> You may wish to read papers on chess nnets
[17:45:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> They may provide insight into how they structured the output layers
[17:46:20] <FromDiscord> <Tuatarian> I'll look into that
[17:46:24] <FromDiscord> <Tuatarian> Thanks for the pointer
[17:46:39] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sure
[17:49:36] <FromDiscord> <Tuatarian> One method seems to be using the net to evaluate moves on a 0-1 scale
[17:49:43] <FromDiscord> <Tuatarian> So one output neuron for eval
[17:49:50] <FromDiscord> <Tuatarian> Then just picking the move with the best eval
[17:50:01] <FromDiscord> <Tuatarian> Which is very clever, I will try that
[17:54:12] <FromDiscord> <Tuatarian> But there are some issues there as well
[17:59:16] <FromDiscord> <rb3.nim> sent a code paste, see https://play.nim-lang.org/#ix=3tT2
[18:00:58] <FromDiscord> <@bracketmaster-5a708063d73408ce4> what is in "./src/game/system/script.nim"?
[18:01:34] <FromDiscord> <rb3.nim> sent a code paste, see https://play.nim-lang.org/#ix=3tT5
[18:04:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> So I have a mac and just tried code similar to yours with the compiler package - and I have different errors - not really familiar with nim compiler internals personally though
[18:05:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> maybe @haxscramper\:matrix.org  might have some ideas?
[18:06:35] *** Joins: Guest27 (~Guest27@2a02:2f01:7211:a200:89e0:afe5:8c7a:3f06)
[18:06:44] *** Quits: Guest27 (~Guest27@2a02:2f01:7211:a200:89e0:afe5:8c7a:3f06) (Client Quit)
[18:09:31] <FromDiscord> <haxscramper> your code example compiles and runs perfectly fine for me
[18:09:47] <FromDiscord> <haxscramper> and `echo "hello world"` for the script file
[18:09:48] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/4yd
[18:09:55] <FromDiscord> <rb3.nim> Thanks for looking into it @bracketmaster. Ya, I don't understand why I can't get that code to work if it's in a test in a stable branch. I'm trying to do this with the cpp backend, maybe that's unsupported?
[18:10:03] <FromDiscord> <haxscramper> `nim r test.nim`
[18:10:17] <FromDiscord> <rb3.nim> @haxscramper Really? That's the c backend right?
[18:10:39] <FromDiscord> <haxscramper> C++ backend as well
[18:10:54] <FromDiscord> <haxscramper> nim compiler package v1.4.8, compiler version also 1.4.8
[18:12:02] *** Quits: max22- (~maxime@2a01cb088335980017568d6be50870de.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:12:08] <FromDiscord> <rb3.nim> sent a code paste, see https://play.nim-lang.org/#ix=3tT6
[18:13:48] <FromDiscord> <rb3.nim> (edit) "https://play.nim-lang.org/#ix=3tT6" => "https://play.nim-lang.org/#ix=3tT8"
[18:14:10] <FromDiscord> <rb3.nim> Thanks @haxscramper. Ill try with some of the switches off, it's gotta be in my config somewhere
[18:15:23] <FromDiscord> <haxscramper> When I try to compile with your switches I get codegen errors
[18:16:21] <FromDiscord> <haxscramper> if I remove `--gc:orc` it runs fine
[18:16:43] <FromDiscord> <haxscramper> I'm not sure if compiler is capable of using ORC and C++ backend at the same time
[18:17:02] <FromDiscord> <haxscramper> IIRC it is bootstrapped with ARC, but I'm pretty sure this is a C backend
[18:19:13] <FromDiscord> <rb3.nim> Ahh. That's wierd though, the project itself runs fine with orc and c++ on (without this code). I've looked at the generated c++ and it seems to be adding the correct RC stuff in...
[18:19:33] <FromDiscord> <rb3.nim> (edit) "this code)." => "the `compiler` import)."
[18:19:52] <FromDiscord> <haxscramper> you use compiler API somewhere else?
[18:20:31] <FromDiscord> <haxscramper> Compiler failing on ORC+C++ is completely unrelated to your project and the fact it runs fine
[18:20:42] <FromDiscord> <haxscramper> Compiler just managed to hit some codegen bug in that combination
[18:21:30] <FromDiscord> <rb3.nim> nowhere else. just trying it tonight so I can start adding hot reloading. at the moment the project is far enough along that if I dont compile it with ORC I get crashes at runtime...
[18:22:04] <FromDiscord> <haxscramper> yeah, I've had this weird "crashes with different GC, don't know why"
[18:22:28] <FromDiscord> <haxscramper> btw, you want to use nimscript for hot code reloating?
[18:22:42] <FromDiscord> <haxscramper> we have native HRC
[18:22:50] <FromDiscord> <haxscramper> HCR\
[18:23:00] <FromDiscord> <haxscramper> Though I haven't tried it in years
[18:23:16] <FromDiscord> <rb3.nim> Ya it seems to be the best way. I've tried the --hotcodereload (or similar) switch but I get wierd errors at compile time there too
[18:23:33] <FromDiscord> <rb3.nim> If I remove ORC it compiles but the program crashes immediately
[18:25:15] <FromDiscord> <dom96> Oh cool. An email from someone that works at an av company
[18:26:04] <FromDiscord> <rb3.nim> I filed a bug report for it (admittedly not very detailed), let me dig it out in case you notice something
[18:27:55] <FromDiscord> <rb3.nim> @haxscramper this one: https://github.com/nim-lang/Nim/issues/18393. The compile error happened with an empty main.nim file I think
[18:42:32] <FromDiscord> <SirOlaf> How to statically link imgui to a nim project? (Never used imgui, so maybe I'm missing something obvious here)
[18:43:52] <FromDiscord> <Hi02Hi> `--passL:-static` statically links everything
[18:45:29] <FromDiscord> <rb3.nim> @SirOlaf the same way you would with a c++ project; you can pass something like `--passL:"${VULKAN_SDK}/Lib/vulkan-1.lib"` to `nim` and it will forward that switch to your backend. you'll have to convert the imgui c++ headers to nim though
[18:46:23] <FromDiscord> <SirOlaf> In reply to @Hi02Hi "`--passL:-static` statically links everything": That did it, thanks
[18:55:00] <nixfreak_nim[m]> is the re library the only one for regex ? 
[18:55:23] <nixfreak_nim[m]> or is there a pure one ? 
[18:56:26] <FromDiscord> <Rika> Third party
[18:56:34] <FromDiscord> <Rika> GitHub called “regex”
[19:13:24] <nixfreak_nim[m]> ok , do you know anything about it? 
[19:13:31] <nixfreak_nim[m]> does it work like PCRE ? 
[19:22:54] *** Quits: fredrikhr (~fredrikhr@89-162-57-126.fiber.signal.no) (Quit: Disconnecting)
[19:27:09] <FromDiscord> <hamidb80> there is a `nre` module in std lib
[19:27:23] <FromDiscord> <hamidb80> https://nim-lang.org/docs/nre.html
[19:27:37] <FromDiscord> <hamidb80> In reply to @nixfreak_nim "or is there a": what do you mean by "pure" ?
[19:30:59] <federico3> The Nim developer meeting is starting now at https://meet.jit.si/NimDevMeet
[19:32:50] <fn> <06Prestige99> \o/
[19:38:33] <FromDiscord> <haxscramper> Does anyone use Firefox & nim forum? "Preview" for new messages does not work correctly for me (clicking preview does not actually change anything), and I was wondering if that is something special, or someone else experienced that?
[19:46:40] *** Joins: max22- (~maxime@2a01cb088335980007b9a1aa406a67c1.ipv6.abo.wanadoo.fr)
[19:54:13] <FromDiscord> <dom96> check console, guessing Karax failure
[19:54:18] <FromDiscord> <dom96> but works for me on Firefox
[20:00:17] <FromDiscord> <haxscramper> No errors in console, just dumps some debug info like `<em>12<12>` for `test 12`
[20:00:22] <FromDiscord> <haxscramper> Aaand I accedentally posted it
[20:00:43] <FromDiscord> <haxscramper> Also it seems like I can't delete my post
[20:08:19] <FromDiscord> <Rika> In reply to @nixfreak_nim "does it work like": no, it is not one-to-one with pcre
[20:09:35] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3tU2
[20:37:14] <FromDiscord> <haxscramper> `CppVirtualInterface` is a C++ type, or nim type?
[20:37:34] <FromDiscord> <haxscramper> `/` did you wrap C++ type or created new one in C++
[20:38:07] <FromDiscord> <haxscramper> you should use `pointer` mostly for `void payload` scenarios, otherwise it is a good idea to preserve types
[21:02:43] <FromDiscord> <haxscramper> From discussion couple days ago about tree-sitter vs nim parser fork for pretty-printing - I started working in proof-of-concept implementation, so far it seems like this could work out rather well
[21:03:24] <FromDiscord> <haxscramper> I've made a simple proof-of-concept implementation for this, most likely I will add it to hnimast as well
[21:04:22] <FromDiscord> <haxscramper> Right now I just do simple conversion of the CST to layout blocks, maybe with optional layouts for arguments/etc
[21:04:22] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/commit/4925ca25b00a172bab4d946706821780bad7a93f#diff-d94d9112efdf22c30531e2432ce10cbbda17977627c5de7ca2f0b60a93c65910R443-R458
[21:06:00] <FromDiscord> <haxscramper> Also, does anyone know a good solution for optimizing lots of allocations for a AST nodes/strings? Would it be possible to allocate `seq[Node]` for example, and then use it?
[21:07:26] <FromDiscord> <haxscramper> I create lots of alternative solutions for layouts, so I want to try and optimize it (even though it might be a premature optimization as profiler shows it is not really a bottleneck now)
[21:08:50] <FromDiscord> <saem> How custom a structure you thinking?
[21:10:11] <FromDiscord> <saem> Because if you're willing to go while hog then there are lots of options.
[21:11:02] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/KpR
[21:11:42] <FromDiscord> <saem> Oh, then yes there are ways to optimize it for sure
[21:11:45] <FromDiscord> <haxscramper> And I don't even need to think about reusing memory for othjer allocations
[21:11:56] <FromDiscord> <haxscramper> I create tons of them, then dispose all at once
[21:13:01] <FromDiscord> <haxscramper> I can make it non-ref and use `ptr seq[Block]` and `subnodes: seq[int16]` to store indices of child nodes
[21:13:21] <FromDiscord> <haxscramper> https://www.reddit.com/r/ProgrammingLanguages/comments/79fkpu/representing_asts_as_byte_strings_with_with_small/
[21:14:04] <FromDiscord> <saem> Doing the associations in big chunks is good. But I'd start with simplifying that core node. It's a bunch of lessons from data oriented designs.
[21:14:41] <FromDiscord> <Ayy Lmao> In reply to @haxscramper "`CppVirtualInterface` is a C++": `CppVirtualInterface` in my case is actually `LICE_IBitmap`, which is exposed to me in an API header as simply `class LICE_IBitmap`, and a bunch of api functions take a pointer to that.
[21:14:56] <FromDiscord> <saem> A good one being opaque indices and more column oriented storage
[21:15:19] <FromDiscord> <saem> Can you link me to you main types?
[21:15:53] <FromDiscord> <haxscramper> https://github.com/haxscramper/hmisc/blob/master/src/hmisc/other/blockfmt.nim#L97
[21:16:14] <FromDiscord> <saem> It might be easier for me to describe over voice after I get a minute to read over the types.
[21:16:31] <FromDiscord> <saem> But up to you
[21:18:02] <FromDiscord> <haxscramper> I'm not sure if I can do voice right now, and you can just do a brief outline of what can be improved, no need for extra detailed explanation
[21:24:57] <FromDiscord> <saem> Took a quick look, I'm not 100% sure about the cardinality of that data. For the block, just have an id and then if the two variable width pieces of data you can shrink that to two indices, one is start and one is stop. Then the node type and the start stop can tell you which array/seq to look in and what range. This depends upon your data churn, but it would shrink your block node which I think you'd have a ton of. Then it would be using th
[21:25:18] <FromDiscord> <saem> The other fields would move into their own lookup structures.
[21:26:43] <FromDiscord> <saem> If they're super sparse use tables, if they're very sense just use 1 to 1 array/seqs, if they're dense when there is an entry but sparse otherwise, use the two index structure I mentioned.
[21:31:16] <FromDiscord> <saem> It's basically creating a simplified column oriented database in memory. Uses very little storage and you can rapidly allocate broad chunks of the core small data type depending upon your workload. If you know how many or can estimate then allocate that and flag them as valid or not. If you know precisely then it's way easier.
[21:34:54] <FromDiscord> <saem> If you don't know at all then allocate some amount and keep adding chunks as you need them. There total associations will be smaller as the core data type is smaller and you can minimize the overhead of allocating the ancillary structures (specialized data for node type).
[21:36:00] <FromDiscord> <saem> This changes quite a bit based on your workload, the various phases of the workload/what you can rearrange.
[21:36:49] <FromDiscord> <saem> Hope that helps, ping me if you have further questions.
[21:39:38] <FromDiscord> <haxscramper> No, it seems pretty clear, and I know what to look for, so it should be easy to go on with implementation. It seems like packed AST for IC in compiler might have something similar (with regard to subnodes index ranges). I don't exactly know how dense/sparse some lookup fields (as well as data churn (though I know it is non-existent for `LytBlock`, but other elements (like layout cache) might behave differently)
[21:41:00] <FromDiscord> <saem> That's very much inline with data oriented design.
[21:41:27] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3tUw
[21:41:34] <FromDiscord> <saem> Packed AST, ECS, data oriented design, column oriented database optimizations, all that stuff.
[21:42:21] <FromDiscord> <saem> Oh yeah, that's begging to be lookups.
[21:42:51] <FromDiscord> <saem> One big string and index into it or whatever.
[21:43:51] <FromDiscord> <haxscramper> I don't exactly know memory access patterns for the layout computation algorithm, but I assume it would not benefit much from column data layout, as it processes one block completely, but underlying data is almost never considered
[21:43:57] <FromDiscord> <haxscramper> Only for string length
[21:44:02] <FromDiscord> <saem> I find Andrew Kelly's write up for how Zig did their packed AST super instructive. Really dug deep into the design decisions. The abstractions in Nim make some of that stuff easier.
[21:45:36] <FromDiscord> <haxscramper> Do you have a link? I can't seem to find it (at least with quick search)
[21:46:18] <FromDiscord> <saem> Well it would benefit from it traversing fewer physical bytes as the data would be denser? Also if more dynamic associations are required is nice as they'd always be in the "forward" direction and you can then reason about recycling previous allociations.
[21:47:59] <FromDiscord> <saem> Here you go\: https://ziglang.org/download/0.8.0/release-notes.html#Reworked-Memory-Layout
[21:50:55] <FromDiscord> <haxscramper> Yeah, now wonder I couldn't find it. Again, thanks for an explanation, I will try to use it when I get to optimizing this whole thing
[21:51:05] <FromDiscord> <saem> Happy to help.
[21:51:20] <FromDiscord> <saem> Good luck, looking forward to it.
[22:00:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> any ideas on why this simple macro doesn't work? https://play.nim-lang.org/#ix=3tSQ
[22:06:00] <FromDiscord> <haxscramper> I don't think `sum1 := "a", "b"` could be implemented as `:=` macro
[22:06:08] <FromDiscord> <haxscramper> First - it would parse `:=` as an infix
[22:06:17] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/eNx
[22:06:25] <FromDiscord> <haxscramper> This could work, but that's not what you are looking for (I assume)
[22:06:41] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that's fine I think
[22:06:43] <FromDiscord> <@bracketmaster-5a708063d73408ce4> thx
[22:10:59] <fn> <11ForumUpdaterBot99> New thread by Xioren: Random async exception when downloading, see https://forum.nim-lang.org/t/8261
[22:15:50] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3tUD
[22:16:10] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yes, with backticks it appears
[22:29:17] <FromDiscord> <gerwy> is there any comparison Nim with Cython?
[22:33:49] <FromDiscord> <carmysilna> There's a comparison with Python in general, have you seen that?
[22:34:45] <FromDiscord> <gerwy> no, i want Cython not Python
[22:34:54] <FromDiscord> <gerwy> because i need speed difference between those two
[22:35:10] <FromDiscord> <carmysilna> Is there a reason `os.relativePath` doesn't have a `tag:` pragma? Its messing up my effect annotations all over because I have to propagate `RootDirEffect` all over
[22:35:36] <FromDiscord> <carmysilna> In reply to @Life Sucks "because i need speed": Oh, you want just comparison of speed? I'm sure there's some benchmarks you could look at.
[22:36:09] <FromDiscord> <carmysilna> this article seems to address it https://towardsdatascience.com/could-nim-replace-python-547145afcfd5
[22:36:59] <FromDiscord> <haxscramper> `RootDirEffect`?
[22:37:06] <FromDiscord> <carmysilna> sent a long message, see http://ix.io/3tUI
[22:37:08] <FromDiscord> <haxscramper> Maybe you meant `RootEffect`
[22:37:24] <FromDiscord> <carmysilna> In reply to @haxscramper "`RootDirEffect`?": sorry, `RootEffect`
[22:37:32] <FromDiscord> <haxscramper> And I honestly have no idea why it was inferred this way
[22:37:46] <FromDiscord> <haxscramper> But you can try to copy implementation and cut down parts that cause this effect
[22:37:58] <FromDiscord> <carmysilna>  https://media.discordapp.net/attachments/371759389889003532/868192728289275904/Capture_decran_2021-07-23_a_13.07.51.png
[22:38:05] <FromDiscord> <carmysilna> In reply to @haxscramper "But you can try": okay, I might do that
[22:38:26] <FromDiscord> <haxscramper> yeah, I know it has this, but why Root effect
[22:38:26] <FromDiscord> <gerwy> In reply to @carmysilna "this article seems to": okay thanks i will read that
[22:48:55] <FromDiscord> <carmysilna> In reply to @haxscramper "yeah, I know it": when I copied the implementation, it didn't require any effects, so I'm not sure either. maybe missing annotations somewhere?
[22:52:22] *** Joins: tiorock (~rc@192.12.114.221)
[22:52:22] *** Quits: tiorock (~rc@192.12.114.221) (Changing host)
[22:52:22] *** Joins: tiorock (~rc@user/rockcavera)
[22:52:23] *** rockcavera is now known as Guest1352
[22:52:23] *** Quits: Guest1352 (~rc@user/rockcavera) (Killed (osmium.libera.chat (Nickname regained by services)))
[22:52:23] *** tiorock is now known as rockcavera
[22:56:59] *** Quits: max22- (~maxime@2a01cb088335980007b9a1aa406a67c1.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[23:31:51] <arkanoid> would you tell me what is "^it" here, and where is it documented? https://github.com/dimroc/etl-language-comparison/blob/1c82057f148c164e771b5b8ee9413d64a11b5f58/nim/mapper.nim#L28
[23:33:13] <arkanoid> oh, wait, I think I've found it. It's a FlowVar https://nim-lang.org/docs/threadpool.html#%5E%2CFlowVar%5BT%5D
[23:33:33] <FromDiscord> <carmysilna> `mapIt(do stuff with it)` is a template that is effectively equal to `map(it => do stuff with it)`
[23:34:08] <arkanoid> yeah I know that, was the ^it that was puzzling me. I now see that's a flowvar
[23:35:40] <arkanoid> what should I prefer nowadays for parallel programming: threads module, threadpool module (spawn), something else?
[23:38:15] <arkanoid> or https://github.com/mratsim/weave
[23:38:17] <fn> <12R2D299> 4GitHub: 7"A state-of-the-art multithreading runtime: message-passing based, fast, scalable, ultra-low overhead"
[23:47:04] *** Joins: max22- (~maxime@2a01cb0883359800bd116740ea76b4cc.ipv6.abo.wanadoo.fr)
