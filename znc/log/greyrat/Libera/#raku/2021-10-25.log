[00:44:13] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:44:53] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:43:21] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[01:43:21] *** Quits: vrurg (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[01:43:56] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[01:44:18] *** Joins: vrurg (~vrurg@45.74.95.181)
[02:31:42] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 260 seconds)
[02:35:39] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[02:48:33] <Xliff> sena_kun: Why did you mention sqlite?
[03:03:00] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.3)
[03:32:50] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:35:46] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:29:06] <[Coke]> https://raku-musings.com/sedol-middle.html - points out that "-123" isn't accepted if you have a MAIN arg declared as Int. 123 does, but not -123
[04:35:46] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:35:46] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:36:08] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[05:23:25] <japhb> Confusion with argument parsing?  Might work with "-- -123
[05:23:26] <japhb> "
[05:36:08] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[05:38:56] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[06:00:52] *** Joins: Xliff_ (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[06:03:34] *** Quits: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 265 seconds)
[06:09:16] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Remote host closed the connection)
[06:37:51] *** Quits: Xliff_ (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Quit: Leaving)
[06:38:15] *** Joins: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[06:58:31] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[07:46:17] *** Joins: fpittel (~fpittel@50-206-250-254-static.hfc.comcastbusiness.net)
[07:47:04] *** Quits: fpittel (~fpittel@50-206-250-254-static.hfc.comcastbusiness.net) (Client Quit)
[08:07:05] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:07:55] *** Joins: tejr (~tejr@user/tejr)
[08:08:33] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:12:59] *** Joins: tejr (~tejr@user/tejr)
[08:30:25] *** Quits: bartolin_ (~christian@mail.aglaz.de) (*.net *.split)
[08:30:25] *** Quits: sftp (~sftp@79.174.36.182) (*.net *.split)
[08:30:25] *** Quits: dac (~dcx@user/dac) (*.net *.split)
[08:30:25] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[08:30:25] *** Quits: lucs (~lucs@user/lucs) (*.net *.split)
[08:30:25] *** Quits: samcv (~samcv@194.233.102.77) (*.net *.split)
[08:30:25] *** Quits: ecocode (~ecocode@2001:41d0:1:6a74::1) (*.net *.split)
[08:30:33] *** Joins: bartolin (~christian@mail.aglaz.de)
[08:30:33] *** Joins: ecocode (~ecocode@ks39550.kimsufi.com)
[08:30:34] *** Joins: lucs (~lucs@user/lucs)
[08:31:02] *** Joins: samcv (~samcv@194.233.102.77)
[08:31:21] *** Joins: sftp (~sftp@79.174.36.182)
[08:31:51] *** Joins: dcx (~dcx@user/dac)
[08:32:46] *** Joins: Ekho (~Ekho@user/ekho)
[08:36:20] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:30:30] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[09:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:36:43] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 265 seconds)
[09:37:27] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[09:41:46] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[09:51:24] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[10:16:38] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[10:35:15] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:51:50] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:01:03] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[11:22:01] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[11:24:03] <sena_kun> Xliff, cause I remember https://github.com/raku-community-modules/DBIish/pull/130 and was wondering why would you want to. ANd if you're working with postgres, I wonder if DB::Pg is another option to consider.
[11:26:46] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[11:31:33] *** Quits: m6locks (thebbo@2001:708:30:2160::4) (Remote host closed the connection)
[11:32:57] *** Joins: jess (~jess@libera/staff/jess)
[11:50:55] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[12:07:40] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[12:12:18] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Restarting client and system…)
[12:30:39] *** Joins: solitario (~adrian@www3.kiess.onl)
[12:31:58] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[12:32:15] *** Joins: solitario (~adrian@www3.kiess.onl)
[12:32:30] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.3)
[12:34:21] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[12:53:07] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[13:17:00] *** Joins: pony (~ed@smol/hors)
[13:30:47] *** Quits: Od1n1 (~Od1n@aurora-borealis.phear.org) (Ping timeout: 268 seconds)
[13:31:12] *** Joins: Od1n1 (~Od1n@aurora-borealis.phear.org)
[13:51:57] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Restart…)
[13:58:23] *** Joins: solitario (~adrian@www3.kiess.onl)
[14:03:21] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[14:03:44] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:04:42] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:17:39] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[14:22:04] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[15:22:04] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:22:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:22:52] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[15:23:09] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[15:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:33:12] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:55:56] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Restarting…)
[15:56:36] *** Joins: solitario (~adrian@www3.kiess.onl)
[15:58:24] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[15:58:41] *** Joins: solitario (~adrian@www3.kiess.onl)
[16:02:34] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[16:02:52] *** Joins: solitario (~adrian@www3.kiess.onl)
[16:05:05] *** Quits: solitario (~adrian@www3.kiess.onl) (Client Quit)
[16:05:24] *** Joins: solitario (~adrian@www3.kiess.onl)
[16:15:56] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:21:22] <tbrowder> g'day, mates, a raku ? if you pls
[16:21:46] <tbrowder> *plz
[16:23:06] <CIAvash> Shouldn't the new-dispatch release have been delayed until the bugs involving ecosystem modules get fixed?
[16:24:46] <lizmat> CIAvash: any particular ecosystem module you're referring to ?
[16:25:17] <Altai-man> CIAvash, what bugs were not fixed, https://github.com/rakudo/rakudo/issues/4562 ? Jonathan has stated the behaviour of previous releases are buggy as itself, so it is not feasible to for it to be a blocker.
[16:25:35] <Altai-man> s/are/is/
[16:25:49] <tbrowder> i have a class i want to instantiate from a hash. for a given key 'foo', i want to set class attribute $!foo to hash key 'foo's value. i naively tried "$!{$key} = $value" but that doesn't work.
[16:26:08] <Altai-man> tbrowder, self.bless(|%hash)?
[16:26:31] <tbrowder> i know there is a way to do it, but not sure how
[16:26:33] <Altai-man> m: class A { has $.a; has $.b; }; my %h = a => 42, b => 50; A.new(|%h).say;
[16:26:33] <camelia> rakudo-moar 736ffd228: OUTPUT: «A.new(a => 42, b => 50)␤»
[16:26:39] <Altai-man> like this?
[16:27:38] <tbrowder> Altai-man: looks good, thanks! i'll go try it out..,
[16:28:25] <CIAvash> Altai-man:  yes, (module involved is Curry), so should I wait for correct behavior to be decided or find a workaround?
[16:30:44] <Altai-man> CIAvash, if I would be a release manager, I'd make the ticket a blocker and suggested delaying updates, monthly releases are not that far off. Finding a workaround is maybe a good idea, it might also help golfing down the issue. Ah, and golfing down the issue would help _a lot_ in getting a fix faster.
[17:17:41] *** Joins: erniogi (~erniogi@fp9f1cc3c3.tkyc626.ap.nuro.jp)
[17:18:35] *** Quits: erniogi (~erniogi@fp9f1cc3c3.tkyc626.ap.nuro.jp) (Client Quit)
[17:25:24] *** Joins: aitron (~aitron@188.170.196.154)
[17:26:24] *** Quits: aitron (~aitron@188.170.196.154) (Client Quit)
[17:26:38] *** Joins: aitron (~aitron@188.170.196.154)
[17:28:26] <[Coke]> japhb: -- -123 worked. Sadly doesn't look like Arne allows comments.
[17:28:56] <Altreus> that seems like one of those problems that could be solved by backtracking in the option parser
[17:31:49] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[17:32:42] <melezhik> weekly: weekly updates of Raku projects on mybfio - https://mybf.io/?language=Raku
[17:32:43] <notable6> melezhik, Noted! (weekly)
[17:33:20] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:46:58] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[17:56:15] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[18:00:07] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[18:04:34] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 260 seconds)
[18:06:42] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[18:15:51] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[18:25:21] <melezhik> does Raku have a dummy operator, that does nothing?
[18:26:13] *** Quits: jdv (~jdv79@jdv.devuyst.com) (Ping timeout: 252 seconds)
[18:26:22] *** Joins: jdv (~jdv79@jdv.devuyst.com)
[18:27:29] <Altai-man> melezhik, for routines?
[18:27:46] <discord-raku-bot> <RaycatWhoDat#0001> ..., right?
[18:27:50] <melezhik> no, for while loop
[18:27:59] <Altai-man> ignore my question
[18:28:07] <Altai-man> no, ... is a bit different.
[18:28:16] <Altai-man> melezhik, can you provide a small example of what you want to do?
[18:28:20] <lizmat> melezhik: while 1 { Nil } ??
[18:28:34] <melezhik> m:  1 while "aaa" ~~ s/a/b/;
[18:28:35] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (use Nil instead to suppress this warning) (line 1)␤Cannot modify an immutable Str (aaa)␤  in block <unit> at <tmp> line 1␤␤»
[18:28:51] <melezhik> m:  Nil while "aaa" ~~ s/a/b/;
[18:28:51] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «Cannot modify an immutable Str (aaa)␤  in block <unit> at <tmp> line 1␤␤»
[18:28:55] <melezhik> m:  1 while "aaa" ~~ s/a/b/;
[18:28:56] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (use Nil instead to suppress this warning) (line 1)␤Cannot modify an immutable Str (aaa)␤  in block <unit> at <tmp> line 1␤␤»
[18:29:01] <melezhik> this is an example
[18:29:17] <melezhik> I don't want `Useless use of constant integer 1 in sink context` warnings
[18:29:17] <lizmat> Nil while ....  is what I use for those cases
[18:29:53] <melezhik> m:  my $a = "aaaa"; Nil while $a ~~ s/a/b/;
[18:29:54] <camelia> rakudo-moar a3c68bdf5: ( no output )
[18:29:55] <lizmat> m: my $foo = "aaa"; Nil while $a ~~ s/a/b/; say $foo
[18:29:55] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3my $foo = "aaa"; Nil while 7⏏5$a ~~ s/a/b/; say $foo␤»
[18:29:59] <melezhik> thanks lizmat
[18:30:00] <melezhik> it workas
[18:30:03] <melezhik> works
[18:30:07] <lizmat> m: my $foo = "aaa"; Nil while $foo ~~ s/a/b/; say $foo
[18:30:08] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «bbb␤»
[18:30:46] <lizmat> m: say "aaa".subst(/a/, "b", :global)
[18:30:47] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «bbb␤»
[18:31:04] <melezhik> :g does not work for me
[18:31:10] <lizmat> m: my $foo = "aaa"; $foo ~~ s:g/a/b/; say $foo
[18:31:10] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «bbb␤»
[18:31:21] <lizmat> or that ^^
[18:31:47] <melezhik> i have more complex regexp pattern, where :g does not do what I want, so I have to do `Nil while $a ~~ s///;` workround
[18:32:40] <lizmat> that feels... weird
[18:32:51] <melezhik> ok. let me show MY example
[18:37:59] <melezhik> give me 5 minutes
[18:39:32] <melezhik> m:  my $res = ":home: ::ok:: :foo:bar: :fire: :man:"; Nil while $res ~~ s!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res;
[18:39:33] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «<span class="icon"><i class="fas fa-home"></i></span> ::ok:: :foo:bar: <span class="icon"><i class="fas fa-fire"></i></span> <span class="icon"><i class="fas fa-man"></i></span>␤»
[18:39:59] <melezhik> so this is WORKING solution without `g`
[18:40:15] <melezhik> I can't make it work using `~~ s:g` 
[18:41:03] <melezhik> the tricky part regexp replacement should only replace `:foo:` but not `::foo::` or `foo::foo`
[18:43:00] <Altai-man> that's the only possible input you have or do you parse arbitrary messages where anything can be?
[18:43:17] <melezhik> so basically it should only replace anything between `:` but WHEN there is no none space symbols before first `:` and no none space symbols after the second `:` 
[18:43:45] <Altai-man> if yes, then I don't think a regex is necessary at all, just split the string and check properties you want with starts-with / ends-with / substring.
[18:44:04] <lizmat> I was thinking along similar lines :-)
[18:44:40] <melezhik> yes, but my first thought was to use regexp replacement with global, because this what replacement is designed , I don't want to write extra code for split, etc ...
[18:44:57] <Altai-man> if regex solution starts to become a real pain maybe it's not the right toot at all.
[18:45:00] <Altai-man> extra code...
[18:45:14] <Altreus> m:  my $res = ":home: ::ok:: :foo:bar: :fire: :man:"; $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res; # what DOES it do?
[18:45:15] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «<span class="icon"><i class="fas fa-home"></i></span> ::ok:: :foo:bar: <span class="icon"><i class="fas fa-fire"></i></span> :man:␤»
[18:45:18] <melezhik> I am not sure if this is bug or not by my `s:g` attempts failed, let me show youy
[18:45:20] <Altreus> oh
[18:45:38] <Altreus> it doesn't reënter as you'd expect
[18:46:04] <melezhik> ?
[18:46:36] <Altreus> well it seems like it got most of it right but didn't reapply the regex as you'd have expected when it finished :fire:
[18:46:47] <Altreus> does it perhaps consume the space twice?
[18:46:56] <Altreus> such that when you use a loop it forgets it consumed it
[18:47:20] <melezhik> Altreus loop code works correctly for me
[18:47:23] <Altreus> yes
[18:47:47] <Altreus> but I think the problem with s:g is that you've asked for a space at the start and end, and there's only one space between :fire: and :man:, so you can't have both
[18:48:59] <melezhik> m:  my $res = ":home: ::ok:: :foo:bar: :fire: :man:";  $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res;
[18:48:59] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «<span class="icon"><i class="fas fa-home"></i></span> ::ok:: :foo:bar: <span class="icon"><i class="fas fa-fire"></i></span> :man:␤»
[18:49:08] <Altreus> m:  my $res = ":home: ::ok:: :foo:bar: :fire: :man:"; $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' <?before ( $$  || \s+ )>!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res; # what DOES it do?
[18:49:08] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<( )>; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 (<-[\:]>+) ':' <?before ( $$  || \s+ )>7⏏5!{$0}<span class="i…»
[18:49:25] <melezhik> so this one does not work as you can see, as it ignore the last `:man:`
[18:49:36] <melezhik> but it should not
[18:50:03] <Altreus> m:  my $res = ":home: ::ok:: :foo:bar: :fire: :man:"; $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' <?( $$  || \s+ )>!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res; # what DOES it do?
[18:50:03] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at <tmp>:1␤------> 3 s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' <?7⏏5( $$  || \s+ )>!{$0}<span class="icon"><␤Couldn't find terminator !␤at <tmp>:1␤-…»
[18:50:08] <melezhik> m:  my $res = ":home: :fire: :man:";  $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res;
[18:50:08] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «<span class="icon"><i class="fas fa-home"></i></span> :fire: <span class="icon"><i class="fas fa-man"></i></span>␤»
[18:50:42] <melezhik> here is another example of incorrect work, where `:fire` in the middle gets ignored
[18:50:58] <Altreus> m:  my $res = ":home: ::ok:: :foo:bar: :fire: :man:"; $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' <? $$  || \s+ >!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res; # what DOES it do?
[18:50:59] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at <tmp>:1␤------> 3 s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' <?7⏏5 $$  || \s+ >!{$0}<span class="icon"><i ␤Couldn't find terminator !␤at <tmp>:1␤-…»
[18:51:09] <melezhik> so I ended up with `Nil while $res ~~ s///` alternative, at least it works
[18:51:35] <melezhik> m:  my $res = ":home: :fire: :man:";  Nil while $res ~~ s!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0}<span class="icon"><i class="fas fa-{$1}"></i></span>{$2}!; say $res;
[18:51:36] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «<span class="icon"><i class="fas fa-home"></i></span> <span class="icon"><i class="fas fa-fire"></i></span> <span class="icon"><i class="fas fa-man"></i></span>␤»
[18:51:54] <Altreus> I do not understand why it has a problem with my <
[18:51:57] <melezhik> so like I said, _maybe_ rakudo regexp bug?
[18:52:44] <Altreus> noooooo I'm pretty sure the problem is that it consumes the space and continues looking *after* the space
[18:52:57] <Altreus> and you've asked for it to have a space or ^^, which now there is not
[18:52:59] <Altreus> e.g.
[18:53:37] <Altreus> m:  my $res = ":home:  :fire:  :man:";  $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0} (({$1})) (({$2}))!
[18:53:38] <camelia> rakudo-moar a3c68bdf5: ( no output )
[18:53:40] <Altreus> oops
[18:53:43] <Altreus> m:  my $res = ":home:  :fire:  :man:";  $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0} (({$1})) (({$2}))!l; say $res;
[18:53:44] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3' ( $$  || \s+ )!{$0} (({$1})) (({$2}))!7⏏5l; say $res;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤       …»
[18:53:58] <Altreus> m:  my $res = ":home:  :fire:  :man:";  $res ~~ s:g!( ^^ || \s+ ) ':' (<-[\:]>+) ':' ( $$  || \s+ )!{$0} (({$1})) (({$2}))!; say $res;
[18:53:59] <camelia> rakudo-moar a3c68bdf5: OUTPUT: « ((home)) ((  )):fire:   ((man)) (())␤»
[18:54:03] <Altreus> hmm!
[18:54:10] <Altreus> I guess not!
[18:54:14] <melezhik> I also tried to use word boundaries `<<` `>>` but for some reasons this did not work either
[18:54:45] <melezhik> yes, it's possible to golf to more concise example 
[18:56:01] <melezhik> afk &
[19:05:36] <Altreus> m: my $res = ":home: ::ok:: :foo:bar: :fire: :man:"; s:g/ <?after \s || ^^> ':' (<-[^\:]>+) ':' <?before \s || $$> /[[$0]]/; say $res;
[19:05:37] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .raku, .gist, or .say can be used to stringify it to something meaningful.␤:home: ::ok:: :foo:bar: :fire: :man:␤  in block <unit> at <tmp> line 1␤»
[19:05:46] <Altreus> m: my $res = ":home: ::ok:: :foo:bar: :fire: :man:"; $res ~~ s:g/ <?after \s || ^^> ':' (<-[^\:]>+) ':' <?before \s || $$> /[[$0]]/; say $res;
[19:05:47] <camelia> rakudo-moar a3c68bdf5: OUTPUT: «[[home]] ::ok:: :foo:bar: [[fire]] [[man]]␤»
[19:05:57] <Altreus> melezhik: This seems to work :)
[19:06:05] <Altreus> replace [[ ]] with span etc
[19:10:59] <Altai-man> Xliff, ping?
[19:12:10] <Altai-man> .tell Xliff wrt your question about local modules in Comma. I didn't think about it yesterday, but jnthn has suggested to just add the other modules you have locally as "modules" of the project and now I don't see why wouldn't it work as you want.
[19:12:11] <tellable6> Altai-man, I'll pass your message to Xliff
[19:14:52] <Xliff> Altai-man: How is this done?
[19:14:53] *** Quits: aitron (~aitron@188.170.196.154) (Read error: Connection reset by peer)
[19:15:37] <Altai-man> Xliff, File -> Project Structure -> Modules -> Import Module.
[19:15:45] <Xliff> Thank you.
[19:16:47] <Altai-man> and if it doesn't work, at least you will have some steps to reproduce like "Download the distribution locally from X, then create a dummy project and try to add it as a module".
[19:20:09] *** Joins: aitron (~aitron@188.170.196.154)
[19:26:19] *** Quits: aitron (~aitron@188.170.196.154) (Quit: Quit)
[19:26:32] *** Joins: aitron (~aitron@188.170.196.154)
[19:30:12] *** Quits: aitron (~aitron@188.170.196.154) (Client Quit)
[19:34:03] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[20:00:51] <melezhik> Altreus I was also thinking about look ahead / look behind constructions for this , I just did not know the Raku syntax for them
[20:01:28] <melezhik> I guess it's more or less most logical way to solve this, however the question why this does not work without loop and look behind/ahead ?
[20:01:39] <melezhik> is not it a bug?
[20:03:11] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 244 seconds)
[20:06:38] <Altreus> no I still think you're consuming too much but I'm struggling to prove it
[20:07:19] <Altreus> by using look-around the match becomes zero-width and can therefore match both before pos() and after it, basically
[20:07:24] <Altreus> oh!
[20:07:48] <Altreus> m:  my $res = ":home:  :fire:  :man:";  $res ~~ s:g!( ^^ || \s ) ':' (<-[\:]>+) ':' ( $$  || \s )!{$0} (({$1})) (({$2}))!; say $res;
[20:07:49] <camelia> rakudo-moar a3c68bdf5: OUTPUT: « ((home)) (( ))  ((fire)) (( ))  ((man)) (())␤»
[20:07:59] <Altreus> m:  my $res = ":home: :fire: :man:";  $res ~~ s:g!( ^^ || \s ) ':' (<-[\:]>+) ':' ( $$  || \s )!{$0} (({$1})) (({$2}))!; say $res;
[20:07:59] <camelia> rakudo-moar a3c68bdf5: OUTPUT: « ((home)) (( )):fire:  ((man)) (())␤»
[20:08:11] <Altreus> melezhik: you were consuming *all* the whitespace
[20:08:30] <Altreus> so the first match consumed ':home: '
[20:08:51] <Altreus> And then :g needed ' :fire: ' for the next match, but in fact it was only ':fire: '
[20:09:13] <Altreus> I tried to prove it with more spaces but it just consumed those too :D
[20:13:30] *** Joins: lichtkind (~lichtkind@p200300d0a704f00aecc23c3621873a17.dip0.t-ipconnect.de)
[20:53:17] <melezhik> Altreus++
[21:15:27] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:19:20] <lizmat> and yet another Rakudo Weekly News hits the Net: https://rakudoweekly.blog/2021/10/25/2021-43-thank-you/
[21:23:11] <codesections> lizmat++ I think the 
[21:23:38] <codesections> Vue + Raku link points to the previous video
[21:25:18] <lizmat> meh
[21:25:36] <lizmat> indeed
[21:26:53] <lizmat> should be fixed now # codesections++
[21:32:40] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:43:00] <[Coke]> thank you lizmat!
[21:45:08] <melezhik> lizmat++
[22:32:40] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:32:41] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:34:58] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[22:35:21] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[23:24:13] <Ulti> just tried the latest release and my bioinformatics tests are 2x as fast compared with December 2020
[23:24:49] <El_Che> nice
[23:25:42] <Ulti> 20850 deopt before down to 142... I'd say that's a significant improvement!
[23:26:33] <Ulti> 50% jitted frames to 85%
[23:27:52] <MasterDuke> nice
[23:33:04] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[23:36:29] <Ulti> prime benchmark has gotten a little bit slower https://gist.github.com/MattOates/c5879a07b1ef2c013097 but only a tiny bit
[23:49:05] * [Coke] laments not having enough cycles to work on a .NET backend yet.
[23:52:43] <[Coke]> (though at least I do have some admin stuff written in Raku that is making my job much easier)
