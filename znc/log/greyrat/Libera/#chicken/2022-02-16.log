[00:50:21] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[00:51:41] *** Joins: ublx (~ublx@user/ublx)
[01:17:22] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 272 seconds)
[01:25:52] *** Quits: klovett (~klovett@107.127.17.177) (Quit: ZZZzzz…)
[01:59:45] *** Quits: m455 (~m455@user/m455) (Ping timeout: 252 seconds)
[02:44:33] *** Quits: crumpo (~crumpo@user/crumpo) (Quit: Buh bye)
[02:51:28] *** Quits: ASau (~user@lmpc.drb.insel.de) (*.net *.split)
[02:51:28] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (*.net *.split)
[02:51:28] *** Quits: Kooda (~kooda@natsu.upyum.com) (*.net *.split)
[02:51:28] *** Quits: chicken_m (~chickenru@2604:3d08:5684:3000::5fab) (*.net *.split)
[02:51:28] *** Quits: citrons (~citrons@alt.mondecitronne.com) (*.net *.split)
[02:51:28] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[02:53:46] *** Joins: ASau (~user@lmpc.drb.insel.de)
[02:53:46] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[02:53:46] *** Joins: Kooda (~kooda@natsu.upyum.com)
[02:53:46] *** Joins: chicken_m (~chickenru@2604:3d08:5684:3000::5fab)
[02:53:46] *** Joins: citrons (~citrons@alt.mondecitronne.com)
[02:53:46] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[03:06:31] *** Joins: klovett (~klovett@107.127.17.177)
[03:12:32] *** Quits: klovett (~klovett@107.127.17.177) (Quit: ZZZzzz…)
[03:17:48] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[03:53:43] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:08:20] *** Joins: klovett (~klovett@107.127.17.177)
[04:11:38] <vandusen> [eggs] edn version 0.5.3 (for CHICKEN 5) has been released
[05:02:20] *** Joins: m455 (~m455@user/m455)
[05:17:08] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:58f5:a83c:3a8a:25e6)
[05:17:08] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:58f5:a83c:3a8a:25e6) (Changing host)
[05:17:08] *** Joins: skapate (~Skapata@user/skapata)
[05:18:51] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[05:40:58] *** Joins: keyehzh_ (~keyehzh@user/keyehzh)
[05:41:05] *** Quits: keyehzh (~keyehzh@user/keyehzh) (Read error: Connection reset by peer)
[06:04:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:02:44] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[07:18:22] *** Quits: sts-q (~sts-q@91.200.108.201) (Ping timeout: 272 seconds)
[07:18:51] *** Joins: sts-q (~sts-q@212.53.219.239)
[07:51:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:15:24] <m455> hey there, is there a reason the first tab in this formatted string is shorter than the rest of the tabs?: https://paste.m455.casa/test.scm.txt
[08:15:37] <m455> that returns "hello   test    another test    yet another one"
[08:15:53] <m455> the tab between the "hello" and the "test" is shorter than the others for some reason D:
[08:17:44] <florz> m455: tabs don't have a length!?
[08:17:53] <m455> florz: oh shit i didn't know that haha
[08:18:03] <m455> florz: so in the file, it's still tabs that are being created right?
[08:18:19] <m455> i mean, if i were to write that to a file
[08:18:21] <florz> I'd think so :-)
[08:18:23] <m455> thanks though i didn't know that! haha
[08:18:27] <m455> ouu cool thank you! <3
[08:19:48] <florz> also, doesn't really have anything to do with the use of format either, \t in a string is simply an input syntax for a byte with value 9 within the string, and that should just be passed through by format unchanged
[08:20:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:20:22] <florz> *in a string literal, to be precise
[08:46:47] *** Quits: keyehzh_ (~keyehzh@user/keyehzh) (Remote host closed the connection)
[09:00:16] *** Quits: klovett (~klovett@107.127.17.177) (Quit: ZZZzzz…)
[09:08:18] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:36:50] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Read error: Connection reset by peer)
[09:37:22] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[09:37:45] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:47:18] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Quit: Leaving)
[10:03:38] <m455> florz: ohhhh good to know!
[10:05:21] <wasamasa> \t is typically interpreted as alignment hint :P
[10:07:25] <wasamasa> not always though, some chat systems for example expand it to a fixed amount of spaces
[10:07:31] <wasamasa> or turn it into a control character
[10:11:53] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[10:20:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:22:34] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[10:22:57] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[10:23:56] *** Quits: yagamisa3o (~SingSong@user/yagamisato) (Ping timeout: 272 seconds)
[10:24:13] *** Joins: yagamisa2o (~SingSong@user/yagamisato)
[12:21:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:24:35] *** Joins: crumpo (~crumpo@user/crumpo)
[12:42:37] *** Quits: klm (root@2a01:7e01::f03c:91ff:fe3f:a1d6) (Quit: WeeChat 3.4)
[12:47:50] *** Joins: floppy_disk (~floppy_di@user/floppy-disk/x-6577422)
[12:52:05] *** Joins: root1 (root@2a01:7e01::f03c:91ff:fe3f:a1d6)
[12:52:19] *** Joins: rgherdt (~rgherdt@83.236.18.121)
[12:55:15] *** Quits: floppy_disk (~floppy_di@user/floppy-disk/x-6577422) (Quit: Leaving)
[13:12:04] <zilti[m]> You'd think developers would've moved on from that YAML crap by now, but noo...
[13:12:29] <crumpo> :(
[13:12:34] <crumpo> I'm quite partial to a bit of YAML
[13:13:56] <zilti[m]> It's a horrid abomination and should be nuked from orbit
[13:15:17] <zilti[m]> I mean, look at stuff like this: https://pastebin.com/dtjytd5M
[13:16:58] <crumpo> I'm quite relaxed
[13:17:06] <crumpo> If in doubt, quote things anyway
[13:17:14] <crumpo> And don't leave out cp
[13:18:28] <crumpo> I think the real issue is that services (gitlab here?) expect people to store scripts in a data format like this
[13:18:54] <zilti[m]> OBS in this case, and god beware you don't use two spaces for indentation
[13:19:08] <crumpo> haha
[13:19:44] <crumpo> Another option is to use folded scalars; maybe that would help
[13:19:55] <crumpo> I get what you mean about the quoting. It's a bit of a pain sometimes.
[13:20:12] <crumpo> But overall I quite like using YAML over other formats to configure this stuff
[13:20:22] <zilti[m]> I mean why on earth does it even care about the first character after the "-"?
[13:21:01] <crumpo> Oh, is that happening? Interesting
[13:21:12] <crumpo> tbh I wouldn't be surprised if that was implementation-specific
[13:21:15] <zilti[m]> Well apparently, that is the only thing I can imagine is going wrong here
[13:21:31] <zilti[m]> It is the only line where a quote is the first character, and the only line that causes trouble
[13:22:03] <zilti[m]> XML would be perfect for files like this with embedded scripts. Just do a <script></script> block and call it a day...
[13:24:00] <crumpo> I'd find that very difficult to read tbh
[13:24:13] <crumpo> Maybe the scripts would be easier but everything else would be verbose and difficult for me to parse
[13:24:36] <crumpo> I've been looking at this in Gitlab's CI linter and it seems every item in the script list is an issue
[13:24:42] <crumpo> I had to quote everything
[13:24:47] <zilti[m]> lol
[13:25:24] <crumpo> I mean, at least you have consistency there
[13:25:42] <crumpo> But it suggests it is indeed an implementation detail rather than the language itself
[13:26:54] <crumpo> When I have to configure CI with lots of scripts like this I tend to use the folded style; maybe that would help here
[13:28:34] <zilti[m]> I mean, seriously, why don't we do it somewhat like this? https://pastebin.com/hENDCJxw Unorthodox, I know, but it's readable and all
[13:29:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:29:29] <crumpo> Yeah that makes me queasy
[13:30:46] <s-liao> What?
[13:31:02] <crumpo> CI config as XML
[13:31:08] <zilti[m]> It makes me a lot less queasy than yaml...
[13:31:10] <crumpo> I just find YAML a lot nicer to read
[13:31:33] <crumpo> Well, each opinion is valid
[13:31:37] <crumpo> Though I seem to have it easy :D
[13:32:51] <s-liao> docker composer has the YAML as config
[13:34:36] <crumpo> Yeah, most CI I've used is configured via YAML too, which is lucky for me I suppose :)
[13:35:30] <zilti[m]> There must be a better way than YAML that doesn't piss off XML haters :P Someone just has to write the spec
[13:36:33] <crumpo> Could write it in JSON and make everybody unhappy
[13:36:47] <zilti[m]> I'd rather jump off a cliff
[14:13:58] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:36:33] <ASau> crumpo: how do you make sure that your yaml file is not truncated?
[14:37:04] <ASau> crumpo: XML is definitely a lot better.
[14:37:10] <ASau> Really a lot.
[14:37:15] <crumpo> What might be truncated?
[14:37:57] <ASau> Wha happens if your yaml input is truncated?
[14:38:07] <ASau> Can you really detect it?
[14:38:10] <crumpo> I'm not keen on getting into a flame war over serialisation formats
[14:38:20] <crumpo> I just find it readable and convenient
[14:38:32] <ASau> Sure, because yaml loses instantly without starting it.
[14:38:40] <crumpo> haha great
[14:40:33] <ASau> It is just only one thing of file or stream truncation.
[14:41:53] <ASau> That's well before getting to more complex things like validation and encapsulation.
[14:45:07] <ASau> (Also note that I don't talk about problems with well-formedness like zilti[m]. But I fully agree that this also quite a big problem.)
[14:57:09] <rnlf_> what's wrong with json for haters of both xml and yaml ^^
[14:57:17] <rnlf_> or just s-expressions
[15:11:21] <zilti[m]> rnlf_: The issue there is that you 1. can't add comments, and 2. have to escape characters.
[15:14:20] <ASau> rnlf_: what about tooling?
[15:16:15] <ASau> rnlf_: yet for start, I want to point that JSON _very_ restricted and because of that it needs a lot more elaborate and more complicated validation tools, yet it lacks even analogs of Schematron.
[15:17:35] <ASau> rnlf_: plus, JSON is underspecified, which is why it is just fine not to ignore whitespace, thus making JSON serialization one ve-e-e-e-e-e-e-e-e-e-e-e-e-e-e-e-e-e-e-e-e-e-ery long line.
[15:17:43] <ASau> The latter is so convenient!
[15:22:15] <rnlf_> maybe we're not meant to have human-readable serialization
[15:22:51] <ASau> Oh!
[15:22:54] <ASau> Cool!
[15:22:58] <rnlf_> XML is only human-readable when you squint really hard :P
[15:23:02] <ASau> Why do you want to _read_ it then?
[15:23:34] <ASau> XML is very readable, even if you don't have highlighting and structured navigation.
[15:24:01] <ASau> If you don't care of readability (like in JSON), then it would be much much better to use something like BER.
[15:24:45] <rnlf_> never heard of BER
[15:24:54] <ASau> That's the problem.
[15:25:25] <rnlf_> as someone who has been forced to write a lot of XML over the years, it's definitely not fun. i understand it has lots of advantages for parsing and all that
[15:25:30] <ASau> It is exactly the problem with JSON lovers, YAML lovers and all alike.
[15:25:32] <rnlf_> but it's definitely not fun to work with in a text editor
[15:25:48] <rnlf_> i guess there's a reason nobody ever heard of BER
[15:25:54] <ASau> They have never heard of technologies that were properly designed to take care of universality and efficiency.
[15:25:56] <zilti[m]> Well then your text editor is crap
[15:26:44] <ASau> rnlf_: my text editor manages binary archives almost as if they were continuation of file system.
[15:27:25] <rnlf_> i guess that's cool? what does it have to do with the readability of XML?
[15:27:38] <ASau> Yes, that's cool.
[15:28:05] <ASau> Perhaps what you need is to learn using modern tools (compared to those restricted ones stemming from home computers of late 70ies.
[15:28:35] <ASau> In XML I have not only highlighting, I have folding and structured navigation.
[15:28:51] <rnlf_> you said XML was very readable even without that
[15:28:56] <rnlf_> i disagree
[15:29:04] <rnlf_> i guess XML is okay if you add on all of that
[15:29:15] <ecraven> there's readable XML and then there's other XML ;)
[15:30:01] <ASau> I'm yet to see readable JSON that serializes more than couple thousand elements.
[15:30:28] * ASau points to underspecification of whitespace handling.
[15:31:21] <rnlf_> something being underspecified doesn't mean one couldn't just specify it to solve the issue. look, i don't care either way, as long as i never have to touch raw XML again, i'm happy
[15:31:32] <zilti[m]> Tbh the only formats that don't have underspecification of whitespace handling are freakshows like yaml
[15:31:56] <ASau> rnlf_: come back when you make Mozilla Foundation comply to that addition to specification.
[15:32:39] <rnlf_> yeah, i don't care about webstuff either :P
[15:32:42] <ASau> (And not only them, but that's the most well-known of examples.)
[15:33:06] <ASau> rnlf_: they do it not on the web.
[15:33:31] <ASau> I don't know, if they do that on the web too, but I've run into that not on the web.
[15:34:19] <ASau> zilti[m]: well... markdown and likes... hrm!
[15:35:16] <zilti[m]> I thought we were talking data serialization formats. Markdown definitely isn't one of them
[15:36:04] <ASau> Well... Strictly speaking, XML isn't either. Its use in serialization is a rather significant stretch.
[15:36:29] <ASau> But all these jsons and yamls do not improve at all. 
[15:43:59] <ASau> zilti[m]: BTW, the weirdest complaint on XML that I ever heard was at closing tags, and it came from developers who considered themselves quite well in concurrent programming in C or C++.
[15:52:00] *** Quits: yagamisa2o (~SingSong@user/yagamisato) (Ping timeout: 272 seconds)
[16:02:35] *** Joins: yagamisa2o (~SingSong@user/yagamisato)
[16:05:54] <jcowan> BER is one way to lay out ASN.1 encoding; others are DER and CER
[16:06:49] <jcowan> {Basic,Distinguished, Canonical)
[16:09:47] <jcowan> and whitespace handling is *not* underspecified in XML: whitespace in the character content of an element is meaningful, all other whitespace is not.  The fact that this prevents you from pretty-printing random XML is not XML's fault.
[16:14:44] <ASau> jcowan: my comment is about JSON, its specification is rather vague and this lets various implementors ignore the whole thing.
[16:15:09] <ASau> Consequence is multimillion long "text lines".
[16:15:24] <jcowan> All specs, however tight, allow implementers to ignore the whole thing.
[16:16:18] <ASau> For such small languages as JSON they could have bothered a little bit.
[16:23:44] <zilti[m]> Don't forget that JSON was never meant for what it is used for now
[16:26:54] <rnlf_> people are voting with their feet. json wouldn't have gotten as popular as it is if it wasn't many people who consider it a sufficient solution for their needs
[16:27:47] *** Joins: floppy_disk (~floppy_di@user/floppy-disk/x-6577422)
[16:29:06] <zilti[m]> That doesn't say anything about its quality. I mean, look at JavaScript itself
[16:29:21] *** Quits: crumpo (~crumpo@user/crumpo) (Quit: Buh bye)
[16:29:36] <rnlf_> no, it doesn't
[16:29:41] <ASau> rnlf_: "Lets' eat shit. Millions of flies cannot mistake!"
[16:30:12] <zilti[m]> ASau: That is extremely close to what a lot of people on pages like dev.to spread
[16:30:40] <rnlf_> sometimes it's better to just be pragmatic
[16:31:02] <zilti[m]> I just tried compiling Chicken with TinyCC and failed miserably. It seems at some point, `make install` drops custom C flags. Which I need, due to where TinyCC places its header files
[16:31:05] <zilti[m]> Yea, and the pragmatic approach is to not use JS :P
[16:32:42] <ASau> I don't quite understand what is pragmatic here.
[16:33:03] <ASau> AFAIK, JSON is no longer valid JS.
[16:33:28] *** Joins: crumpo (~crumpo@user/crumpo)
[16:33:36] <rnlf_> it's pragmatic that many many tools have json import and export
[16:33:41] <rnlf_> same for xml, true
[16:33:55] <rnlf_> zilti[m], i'm by no means someone who enjoys JS :P
[16:34:39] <crumpo> Still serialisation formats huh
[16:35:00] <rnlf_> i'm an embedded developer by trade, whenever i do JS i get a bad mood and very angry
[16:35:18] <ASau> rnlf_: "many tools" do not appear like flies or mice in Medieval understanding.
[16:35:58] <ASau> rnlf_: no, you're not.
[16:36:06] <rnlf_> lol?
[16:36:09] <ASau> If you don't know BER, you're not embedded developer.
[16:36:10] <rnlf_> tell my employer
[16:36:16] <rnlf_> uh huh
[16:36:47] <ASau> Strictly speaking, to be embedded developer you need to be aware of PER as well.
[16:38:04] <rnlf_> dude, i have worked on code running on the international space station and on various satellites. you telling me i'm no embedded developer is quite hilarious, really
[16:38:15] <ASau> So what?
[16:38:49] <rnlf_> your opinion of what constitutes an embedded developer is biased towards whatever you think is valid
[16:39:51] <rnlf_> maybe learn to see further than the end of your own nose
[16:40:23] <ASau> In my life I met people who were considered embedded developers just because they developed web applications for network appliance a la FritzBox.
[16:41:42] <rnlf_> so what? what will your gatekeeping achieve except make you look bad?
[16:42:50] <ASau> Nothing. I'm skeptical of humans. :)
[16:46:19] <ASau> In any case, if something "embedded" has space and time to parse JSON, it is almost next to SOHO routers and alike already. :)
[16:47:07] *** Joins: keyehzh (~keyehzh@user/keyehzh)
[16:48:03] <rnlf_> there's tooling outside of the actual embedded code. we ended up writing code generators that turned XML into C code for some of the projects
[16:48:24] <rnlf_> could have used json, went with XML, it wasn't fun, dunno if it would have been more fun with json. maybe not
[16:49:12] <ASau> Try doing it in some restricted way.
[16:49:22] <ASau> You'll learn the difference very fast.
[16:50:05] <rnlf_> yeah no need. i went on to write linux kernel code now :P
[16:50:17] <rnlf_> i guess that's not embedded enough for you
[16:51:05] <ASau> I can compare using XML and "something simpler" in the style of runoff.
[16:51:45] <ASau> Even though it supports adding commends (hi, zilti[m]!), it is still quite horrible solution due to lack of structure.
[16:52:18] <rnlf_> anyway,gotta go. it was nice talking to you, i hope you are not as aggressive towards people you work with in real life
[17:07:36] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:19:04] *** Quits: floppy_disk (~floppy_di@user/floppy-disk/x-6577422) (Remote host closed the connection)
[17:26:03] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:9907:fd57:1e89:a529)
[17:26:03] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:9907:fd57:1e89:a529) (Changing host)
[17:26:03] *** Joins: skapata (~Skapata@user/skapata)
[17:58:38] *** Joins: klovett (~klovett@107.127.17.177)
[18:07:00] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[18:07:10] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[18:07:48] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[18:10:15] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[18:13:46] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:17:06] <vandusen> [eggs] Error fetching CHICKEN 5 .release-info file for the following eggs: edn, awful-sse
[19:35:36] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:15:13] <m455> wasamasa: thanks for the info about \t! i was confused cause i'm so used to printing tabs and them having a consistent length in my bash shell haha
[20:22:55] <Zipheir> \t is just vanilla tab, not a magic GNU tab with chocolate frosting. :)
[20:57:54] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Ping timeout: 272 seconds)
[21:01:09] *** Joins: crumpy (~crumpo@user/crumpo)
[21:03:45] *** Quits: crumpo (~crumpo@user/crumpo) (Ping timeout: 252 seconds)
[21:06:18] *** Quits: crumpy (~crumpo@user/crumpo) (Quit: Buh bye)
[21:32:30] <jcroisant> Can we please not have arguments about serialization formats and who counts as a "real" developer in #chicken? CHICKEN is known for its helpful and kind community
[21:33:44] <Bunny351> some arguments here and there can be refreshing. but this particular one leads to nothing, I agree.
[21:34:01] <Bunny351> yet, it hasn't really gotten out of hand, I'd say...
[21:35:20] <Bunny351> oh and...
[21:35:24] <Bunny351> vandusen: XML SUCKS!
[21:35:26] <vandusen> Bunny351: FREESTYLE RAP COMICS
[21:38:06] <vandusen> SPAM! SPAM! SPAM! by freeee
[22:13:01] <Corbin> crumpo hit it early on in the discussion: "I think the real issue is that services expect people to store scripts in a data format"
[22:14:03] <zilti[m]> Yea, and I stand by my opinion that of the formats available, XML would be by far the best for CI/CD scripts
[22:14:45] <Corbin> What, no love for Make~?
[22:15:01] * ASau has done a lot of make.
[22:15:09] <ASau> No, no love, sorry. :)
[22:16:53] <Corbin> Aw. Well, hopefully you're not doing `make war`, at least~
[22:18:23] <zilti[m]> Plain old Make is decent, but I don't see how it would fit the requirements of these CI/CD configs
[22:18:41] * ASau did ant war previously.
[22:19:01] <zilti[m]> I'm glad I never had to put up with Ant
[22:19:49] <ASau> Comparing to make, Ant has extensions mechanism at least.
[22:20:20] <ASau> As for "plain old" Make...
[22:21:20] <ASau> Have you ever needed to introduce a number of fictitious .SUFFIXES to work around tiny complications of process?
[22:21:43] <jcowan> Not I.
[22:21:46] <zilti[m]> I mean, Make (and - which is a tool I just looked at the other day - Mk from Plan9) is just a classic "do one job, and do it well" UNIX tool. And it kinda seems to me that the extensions-for-build-tools thing has never really been solved, seeing what massive amounts of build tools there are. And they're almost all a total PITA
[22:21:58] <ASau> "makedepend" is another fun...
[22:22:04] <jcowan> +1
[22:22:27] <jcowan> foof (Alex Shinn) describes it as "a beautiful little Prolog for the file system"
[22:23:10] <ASau> Except it would be much better, if it were plain Prolog.
[22:23:22] <ASau> There would be a chance...
[22:23:31] <jcowan> And the nice thing about Make is that, like Prolog, it doesn't do extra work.  Maven for example will compile hundreds of files even though only one has changed with no dependencies.
[22:23:49] <jcowan> I daresay you could write a Prolog front end easily enough
[22:24:03] <ASau> "If you have implemented it correctly."
[22:24:21] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[22:24:51] <ASau> zilti[m]: Since I did really a lot of "make" in my life, I'm of somewhat opposite opinion.
[22:25:27] <Corbin> "plain Prolog" might be nostalgia for something that never existed. I'm young, but I've only ever encountered Prolog in dialects. I'm critical of romantic purity in general.
[22:25:28] <zilti[m]> I gotta give credits for the worst build system I've ever come across to Scala's SBT though. It is mind-bogglingly cumbersome despite its acronym meaning "Simple Build Tool". And I've worked with Automake/Autoconf, so make of that what you wish...
[22:25:29] <ASau> Make is just classic Unix tool that "do one job, do it bad and do it incorrect".
[22:25:30] <jcowan> If you try to make make(1) do more than its designed for then yes.
[22:26:19] <vandusen> SPAM! SPAM! SPAM! by freee
[22:26:21] <zilti[m]> ASau: POSIX Make or GNU Make? ^^
[22:27:14] <ASau> zilti[m]: I did all. NetBSD make is more tolerable, but only to a degree.
[22:27:40] <Corbin> ASau: As long as we're doing hot takes, which flavor of awk is best/worst?
[22:28:16] <ASau> Corbin: if you can avoid it, do it.
[22:28:36] <zilti[m]> ASau: what's your favourite language-agnostic build tool? Because I have very little knowledge about any
[22:28:42] <zilti[m]> Ninja seems to have become popular
[22:28:56] <ASau> Corbin: Better invest some time understanding why it was needed in the first place.
[22:29:09] <Corbin> ASau: Typically I use awk because I'm too lazy to remember how to do it in Perl?
[22:31:11] <ASau> Corbin: I have ended in the opinion, that under some conditions (like availability of, say, Scheme with regexps), I'd rather implement that top level loop myself.
[22:31:38] <jcowan> The original ksh build script is written in sh, and it's just "cc this; cc that; " etc.
[22:32:17] <Corbin> ASau: Ah, a matter of pride. Well, whatever latches your hatches.
[22:36:30] <ASau> Corbin: no, it is just this: if you have something really trivial, then, sure, awk makes it shorter by eliminating the outside loop.
[22:36:45] <ASau> But if it is a little bit more complicated, I'd rather write full-blown program with initialization, loop and finalization.
[22:37:01] <ASau> With awk I need to convert it into callback style, and this alone makes it harder to analyze, if anything goes wrong.
[22:37:42] <Zipheir> AWK is very optimized for a certain kind of task.
[22:38:13] <ASau> In the end it turns out that the price paid for eliminating one or two lines of that I/O loop is too high.
[22:39:36] <ASau> Don't forget that AWK lacks data structures, it has only something like has hashed mapping string to string.
[22:41:32] <Corbin> ASau: Note that your "full-blown program" is just a matter of choosing a language, since even short awk programs are already "full-blown" in the typical sense. So, what you're really saying is a tribal statement about your allegiances and emotional attachments.
[22:43:11] <ASau> Corbin: what I mean here is that it takes more than one line even in AWK, if you want to make it clear.
[22:45:03] <ASau> It is well possible to write programs in style like 'BEGIN {...} 1 {...} $0 ~ ... {...} $2 == ... && $5 ~ ... {...} 1 {...} END {...}'.
[22:46:22] <ASau> I'm of opinion that it is much better if that is written in multiple lines.
[22:46:52] <Corbin> By which metric? It certainly is better in terms of total lines written (more is better), I guess.
[22:46:57] <ASau> Let me find one thing.
[22:49:13] <ASau> awk 'BEGIN {count='"${npages}"'; for (i = 1; i <= count; i+=4) {printf ("%d,%d,", i+2, i);} printf("\n");  for (i = 1; i <= count; i+=4) {printf ("%d,%d,", i+1, i+3);} printf("\n"); exit;}'
[22:49:47] <Corbin> Nice.
[22:50:29] <ASau> This is what happens when you use awk for anything less trivial than doing simple selection/aggregation.
[22:51:26] *** Joins: ublx (~ublx@user/ublx)
[22:52:10] <ASau> Note that I consider only one-liners because when you write multiple lines you're _already_ in the area where using any other decent programming language is much better.
[22:52:53] <Corbin> What, no love for jq~? I remember the last time I wrote more than one line of jq: https://github.com/MostAwesomeDude/klesi/blob/master/cat.jq
[22:54:30] <siiky> question about http-client and multipart/form-data: is there a way to send "directories"? I see that "directories" aren't supposedly a thing with multipart/form-data, but the API I'm implementing supports them anyway (as long as I include a specific header). What I found was that http-client will try to read the directory as if it was a file (which makes sense); however, the docs say that I may give a 
[22:54:37] <siiky> port, so if I give it an "empty" port, should that work? How can I create an empty port? Maybe I'm missing the obvious... (looked at chicken.port) (maybe sjamaan ? sorry for direct ping, but I fear the msg would go unnoticed)
[22:54:47] <ASau> siiky: pack them into archive.
[22:55:11] <siiky> ASau: that isn't the point at all, but thanks for the suggestion :)
[22:55:45] <siiky> I just need to send an "empty file" with the correct content-type for the server to interpret it correctly as a directory
[22:56:29] <ASau> (Sounds weird to me, but that's what web programming is in general...)
[22:58:39] <siiky> yeah, ikr, but it is what it is, I just want to make it possible to do that with the library since the server (and other clients) support it
[22:59:55] <zilti[m]> WebDAV?
[23:00:14] <ASau> Corbin: Based on my experience I give advice to newcomers who want to check AWK that it is better to understand its general operation and never use it again.
[23:00:40] <ASau> Corbin: because essentially it does "while not eof; do $0 = readline; fields = split($0, RS); if ... then ... endif; if ... then .... endif; ... end do".
[23:01:21] <ASau> (FS, obviously, but I think you get the idea.)
[23:02:18] <siiky> zilti[m]: no, IPFS
[23:02:56] <zilti[m]> sigh and I hoped the world had learned its lesson after WebDAV...
[23:03:30] <Corbin> ASau: Sure, we can write basic compilers for any language in terms of another with this sort of template-driven logic (ignoring size constraints~) and that generally can be done in any Turing-complete setting, as well as important settings like PTIME.
[23:04:28] <siiky> zilti[m]: lol you mean directories & multipart/form-data specifically or something else?
[23:04:55] <zilti[m]> silky: well, handling what's essentially "file system operations over HTTP"
[23:05:12] <zilti[m]> Speaking of compiling. I get "error: 'C_INSTALL_SHARE_HOME' undeclared" trying to compile Chicken with TCC, anyone had that before?
[23:06:48] <Bunny351> no, weird. config debris perhaps? try "make ... confclean"
[23:07:08] <Bunny351> also, you'll need the "mob" branch of tcc
[23:07:25] <Zipheir> ASau: I agree, for the most part.  AWK gets very messy when programs do more than aggregate and print.
[23:08:14] <Zipheir> I wouldn't go as far as Rob Pike, though: "If your solution is AWK, you don't understand the problem."
[23:08:48] <zilti[m]> Bunny351: Thanks, hmm... sadly that didn't help. Ah I see. Currently I am using a patched commit from the master branch. I got the patches from Gentoo and built an OpenSUSE package from it
[23:11:54] <ASau> Corbin: Sure you can, but don't forget that AWK is limited to only one data structure and only few control operators that need to interact with implicit loop.
[23:13:45] <Corbin> ASau: I think we're talking past each other. Your point is "awk sucks for general-purpose programming". I'll agree on "awk sucks", but my point is "there's no such thing as general-purpose programming".
[23:15:09] <ASau> Corbin: No, my point is that awk sucks even on tasks it was meant for (except really trivial cases).
[23:16:56] <ASau> Corbin: My point is: when you compare your solution in AWK with explicit loop (and few additional code that AWK tries to do for you) in, say, Python or (hrm!) Perl, you see that the difference is minimal and time spent mastering AWK quirks doesn't pay off.
[23:17:57] <Corbin> ASau: Your dismissal of "really trivial cases" doesn't mean that those usecases stop existing; it just means that you think you're above them.
[23:18:51] <ASau> Corbin: that's separate topic that has to do with user command shells.
[23:20:30] <Corbin> At least on this system (GNU/Linux), my shell (bash) is Turing-complete (according to folklore). The divisions you're imagining are artificial.
[23:20:44] <ASau> (Besides, in my experience such trivial cases are rather rare and way too frequently grow into generic cases surprisingly fast.)
[23:21:48] <ASau> You can pick any descent shell, Almquist or Korn, it is Turing-complete already.
[23:22:30] <siiky> so many schemers around here discussing how AWK sucks/rocks... no one knows how to create an "empty" input port? :D
[23:22:36] <ASau> BTW, if you read manual for Almquist shell, you'll find the way how you can do almost everything what AWK does in plain shell.
[23:23:59] <ASau> siiky: I have excuse: I'm arguing that if you have descent way to implement I/O loop and regex operations, Scheme beats AWK even on tasks for which AWK was meant. :)
[23:24:09] <Zipheir> siiky: (open-input-file "/dev/null") ?
[23:24:40] <ASau> Zipheir: I'd rather use empty string...
[23:24:45] <Zipheir> Or that.
[23:25:18] <siiky> ASau: lol fair enough... (do-ec ...) is pretty good (though I usually still spend way longer than should be necessary on boilerplate)
[23:25:49] <ASau> ...'cause there may be no "/dev/null" or you may have no access to it (speaking of embedded systems).
[23:26:05] <siiky> ASau: Zipheir: What do you mean by "empty string"? can I make a port from a string? I didn't find it in the docs...
[23:26:18] <Zipheir> siiky: call-with-input-string, or the equivalent.
[23:26:41] <siiky> maybe, I'm blind, I will see to that afterwards... thanks Zipheir !
[23:26:53] <Zipheir> I can't remember what CHICKEN uses.  open-input-string is R7RS.
[23:27:33] <Zipheir> ASau: Right, right.  The /dev/null example was just thinking "off the cuff".  I'd avoid filesystem access if possible, and it's obviously possible here.
[23:28:49] <siiky> ah call-with-input-string is a no go... I need the port object :/ I'm guessing that it's no longer valid if I return it from the thunk? maybe I'll try that
[23:29:56] <Zipheir> (open-input-string "")
[23:30:07] <Zipheir> That returns a port at EOF.
[23:31:27] <ASau> (Playing with continuations just to capture current port...)
[23:31:45] <Zipheir> This seems very funky, though.
[23:32:33] <siiky> ah thanks Zipheir, sorry for making you search for me... I feel so numb today, can't find anything
[23:32:59] <Zipheir> np!
[23:35:07] *** Joins: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at)
[23:38:14] <ASau> (Oh, you, great Autoconf, could you tell me, how come that after all you have done, linker cannot find srandom in libm?..)
[23:38:40] <ASau> ...Speaking of "make".
[23:47:53] <zilti[m]> After a day of hair-pulling frustrating compilation attempts on Linux I appreciate BSD all the more...
[23:49:14] <Zipheir> https://www.alessonislearned.com/index.php?comic=22 and execves(1)
[23:49:22] <Zipheir> *execve(1)s
[23:49:55] <Zipheir> *execve(2)
[23:49:55] <zilti[m]> No clue about execve(1)s, but the link is pretty accurate indeed
[23:49:59] <Zipheir> Man, I'm out of it.
[23:51:59] <ASau> Is there anything like that about fork(2)?
[23:53:01] <jcroisant> I'm trying to understand the usage difference between continuable and non-continuable conditions. Am I right in thinking that they are both the same type, the difference is whether you call signal or abort? And that if you use signal, control flow will automatically resume from the place you called signal, using the value(s) returned by the exception handler? Or do you need to manually invoke a continuation somehow?
