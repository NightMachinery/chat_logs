[00:29:17] *** Quits: tewi (~tewi@apn-95-40-58-246.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[00:57:19] *** Joins: lisp123 (~lisp123@143.238.171.43)
[01:02:09] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 256 seconds)
[01:35:57] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[02:11:11] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[02:45:39] *** Joins: lisp123 (~lisp123@143.238.171.43)
[02:50:23] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[03:21:09] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[03:22:49] *** Joins: mala (~mala@user/malaclyps)
[03:26:49] *** Joins: occ (~occ@user/occ)
[03:45:17] *** Quits: occ (~occ@user/occ) (Ping timeout: 260 seconds)
[04:33:53] *** Joins: lisp123 (~lisp123@143.238.171.43)
[04:36:53] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 250 seconds)
[04:38:13] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 240 seconds)
[04:49:52] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:27:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[06:14:19] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 260 seconds)
[06:21:52] *** Joins: lisp123 (~lisp123@143.238.171.43)
[06:26:51] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 256 seconds)
[07:23:56] *** Joins: occ (~occ@user/occ)
[07:30:19] <beach> Good morning everyone! 
[07:44:15] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:00:14] *** Joins: Bike (~Bike@71.69.170.70)
[08:10:14] *** Joins: lisp123 (~lisp123@143.238.171.43)
[08:14:43] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[09:14:39] <occ> beach: morning 
[09:23:54] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:26:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:30:43] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[09:58:33] *** Joins: lisp123 (~lisp123@143.238.171.43)
[10:02:49] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[10:43:11] *** Joins: tewi (~tewi@apn-31-2-80-43.dynamic.gprs.plus.pl)
[10:51:04] *** Joins: pjb (~pjb@user/pjb)
[10:51:27] *** Joins: Harag (~user@105.243.9.173)
[11:02:11] *** Joins: treflip (~user@user/treflip)
[11:06:12] *** Quits: mala (~mala@user/malaclyps) (Quit: ZNC 1.6.1 - http://znc.in)
[11:06:25] *** Joins: mala (~mala@user/malaclyps)
[11:09:18] *** Quits: Josh_2 (~user@197.184.168.137) (Remote host closed the connection)
[11:12:43] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[11:46:50] *** Joins: lisp123 (~lisp123@143.238.171.43)
[11:49:02] *** Joins: shka (~herr@109.231.3.55)
[11:51:19] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[11:58:01] *** Joins: Josh_2 (~user@197.184.168.137)
[12:14:35] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 260 seconds)
[12:17:51] *** Quits: occ (~occ@user/occ) (Remote host closed the connection)
[12:22:59] *** Joins: lisp123 (~lisp123@143.238.171.43)
[12:38:57] *** Andrew is now known as fadsfdsafdsa
[12:39:41] *** fadsfdsafdsa is now known as Andrew
[12:51:36] *** Quits: shka (~herr@109.231.3.55) (Quit: Konversation terminated!)
[12:51:52] *** Joins: shka (~herr@109.231.3.55)
[13:06:16] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[13:13:46] *** Joins: trocado (~uiop9@183.49.54.77.rev.vodafone.pt)
[13:17:05] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:27:05] <lisp123> Whats a compiler macro?
[13:37:58] <rotateq> lisp123: good question :)
[13:38:31] <rotateq> it's possibly called on patterns of your code for lisp side optimizations 
[13:39:17] <rotateq> you can define it (with the same name) for (generic) functions
[13:40:21] <rotateq> simple example: you have the expression (reverse (reverse x)) and then it could be made to (identity x) or just x before it's compiled to machine code
[13:41:06] <lisp123> interesting
[13:41:30] <pjb> lisp123: a compiler macro is a hook into the compiler for a specific function.  Each call to that function are processed by the compiler macro first.
[13:41:39] <lisp123> So how would you write the compiler macro for (reverse (reverse x)) -> (identity x)?
[13:41:46] <pjb> lisp123: so that indeed allows you to provide optimizations like this.
[13:42:01] <pjb> Note: you're forbidden to add compiler macros to CL functions.
[13:42:14] <pjb> But for a myfuncs:reverse function, you could write…
[13:43:07] <lisp123> pjb: Thanks
[13:44:52] <pjb> https://termbin.com/yf5z
[13:45:05] <pjb> Of course, you could want to add more cases.
[13:45:17] <pjb> there are alot of examples: grep -nHRi define-compiler-macro ~/quicklisp
[13:47:15] <lisp123> pjb: thats interesting
[13:48:31] <lisp123> (second sequence-expression) -> does that evaluate (my-reverse x) which then returns x?
[13:50:18] <lisp123> trying to get my head around why (defun my-reverse ..) is required
[13:50:45] <lisp123> first time I have seen both a function and macro with the same name 
[13:51:24] <lisp123> Is (defun ..) required to be called by the interpreter and (define-compiler-macro ...) for the compiler?
[13:51:35] *** Joins: treflip (~user@user/treflip)
[13:51:36] <rotateq> you mean a normal macro?
[13:52:06] <lisp123> yes, one can't have the same name for both functions & normal macros
[13:53:24] <pjb> lisp123: yes it will return x.
[13:53:36] <rotateq> i see four types of standard macros: read, compiler, normal, symbol
[13:53:38] <pjb> lisp123: because 11.1.2.1.2
[13:54:13] <pjb> Except where explicitly allowed, the consequences are undefined if any of the following actions are performed on an external symbol of the COMMON-LISP package: 3. Defining, undefining, or binding it as a macro or compiler macro. 
[13:54:57] <pjb> rotateq: yes, but they can hardly be gathered under a single category, each of the four kinds of macros are quite different in principle.
[13:55:14] <rotateq> fair enough
[13:55:14] <pjb> Well, they're all substitutions.
[13:55:57] <rotateq> Word and C macros :)
[13:58:23] *** Quits: trocado (~uiop9@183.49.54.77.rev.vodafone.pt) (Ping timeout: 260 seconds)
[13:59:08] <lisp123> Still a bit confused, probably have do some examples myself to get it
[13:59:31] <lisp123> thanks pjb and rotateq
[14:02:23] <rotateq> why confused?
[14:03:13] <lisp123> I need to read into &whole more
[14:04:20] <rotateq> &whole is for binding a symbol to well .. the whole form of your expression
[14:05:22] <rotateq> so maybe in other kind of not just contents of your original expression but also it's hull, so everything in original form
[14:06:23] <lisp123> (&whole form (sequence-expression)
[14:06:40] <lisp123> form = (my-reverse (my-reverse x) and second-expression = (my-reverse x)?
[14:11:33] <rotateq> yes kind of
[14:11:55] <rotateq> so it saves you from the danger of mistyping the original expression
[14:12:47] <lisp123> i see
[14:12:51] <lisp123> thanks!
[14:15:56] <rotateq> it's allowed to be used in define-compiler-macro, macrolet, define-setf-expander and defmacro
[14:19:43] <lisp123> got it
[14:21:15] <rotateq> it was more for me to remember :D
[14:27:52] <pjb> lisp123: probablyu it was wrong. (define-compiler-macro my-reverse (&whole form sequence-expression) …) would be better.
[14:29:19] <lisp123> pjb: Thanks!
[14:34:09] <pjb> if you add print,  form = (my-reverse (my-reverse x))  sequence-expression = (my-reverse x)  and (second sequence-expression) = x
[14:50:37] <lisp123> pjb: Thanks for that, learnt something new
[15:09:43] *** Quits: lisp123 (~lisp123@143.238.171.43) (Quit: Leaving...)
[15:35:13] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:45:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:37:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[16:38:52] *** Joins: aeth (~aeth@user/aeth)
[17:19:53] *** Joins: occ (~occ@user/occ)
[17:29:06] *** Joins: Bike (~Glossina@71.69.170.70)
[17:46:05] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:54:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:22:10] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[18:32:12] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:42:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[18:44:47] *** Joins: thrig (~thrig@207.108.197.156)
[19:00:13] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[19:42:17] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:42:46] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:47:48] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[20:27:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:34:06] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:39:39] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[21:49:35] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[21:50:56] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[21:53:54] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[22:26:17] *** Joins: tyson2 (~user@cpec4411eab32aa-cm64777d9876e0.sdns.net.rogers.com)
[22:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[22:30:54] *** Joins: ns12 (~ns12@user/ns12)
[23:22:31] *** Quits: tyson2 (~user@cpec4411eab32aa-cm64777d9876e0.sdns.net.rogers.com) (Remote host closed the connection)
[23:58:44] <kagevf> yeah &whole is a new one (for me) .... clhs lookup goes to 3.4.4 Macro Lambda Lists
