[00:03:17] *** Quits: BOWnbERTHA (~BOWnbERTH@178.239.165.204) (Ping timeout: 240 seconds)
[00:04:22] *** Joins: BOWnbERTHA (~BOWnbERTH@178.239.165.205)
[00:11:12] *** Quits: BOWnbERTHA (~BOWnbERTH@178.239.165.205) (Ping timeout: 256 seconds)
[00:21:22] *** Joins: splud (~noneya.bi@user/splud)
[00:38:42] *** Quits: batrick_ (batrick@2600:3c00::f03c:91ff:fe96:477b) (Quit: WeeChat 3.3)
[01:09:17] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[01:13:33] *** Quits: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith) (Quit: .)
[01:15:41] *** Joins: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith)
[01:25:48] *** Quits: wigums (~wigums@user/wigums) (Read error: Connection reset by peer)
[01:26:14] *** Joins: wigums (~wigums@user/wigums)
[01:48:35] *** Quits: vlm (~vlm@user/vlm) (Remote host closed the connection)
[01:49:07] *** Joins: vlm (~vlm@user/vlm)
[02:03:06] *** Joins: hqdruxn08_ (~hqdruxn08@user/hqdruxn08)
[02:07:22] *** Quits: hqdruxn08__ (~hqdruxn08@user/hqdruxn08) (Ping timeout: 268 seconds)
[02:32:39] *** Quits: hyper_ch (~hyper_ch@user/hyper-ch/x-8215596) (Quit: Something unexpected happened...)
[02:34:55] *** Joins: hyper_ch (~hyper_ch@user/hyper-ch/x-8215596)
[03:54:47] *** Joins: batrick (batrick@2600:3c00::f03c:91ff:fe96:477b)
[04:43:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:46:27] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[05:31:11] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:33:35] *** Joins: vlm (~vlm@user/vlm)
[06:10:39] *** Quits: mannequin (uid453465@id-453465.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:05:22] *** Joins: adeliktas4 (~adeliktas@i59F52D68.versanet.de)
[07:06:37] *** Quits: adeliktas (~adeliktas@i59F527F1.versanet.de) (Ping timeout: 240 seconds)
[07:06:37] *** adeliktas4 is now known as adeliktas
[07:37:13] *** Quits: vectr0n (~vectr0n@user/vectr0n) (Quit: ZNC - https://znc.in)
[07:42:33] *** Joins: BOWnbERTHA (~BOWnbERTH@178.239.165.205)
[08:11:06] *** Joins: vectr0n (~vectr0n@user/vectr0n)
[08:47:57] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! ðŸ‘‹)
[10:27:48] *** Quits: Fohsap (~Muimi@175.170.14.166) (Quit: Going offline, see ya! (www.adiirc.com))
[10:31:49] *** Joins: nerozero (~nerozero@87.253.63.54)
[11:03:37] *** Quits: Haxxa (~Haxxa@125-253-30-155.ip4.superloop.com) (Ping timeout: 240 seconds)
[11:26:34] *** Joins: ultramag1 (~umage@user/ultramage)
[11:28:25] <ultramag1> hi, I might have run into a bug: when I hibernated my windows 7 pc for a few minutes due to a power outage, and then resumed, my openvpn link came back up but the additional route pushed by the server was missing (I tunnel DNS so it's very obvious when it happens).
[11:31:43] *** ultramag1 is now known as ultramage
[11:32:41] <ultramage> when the OS came back up, openvpn gui logged "ROUTE: route deletion failed using service: Element not found.   [status=1168...], presumably it tried to clean up and didn't realize that all temporary changes to interfaces were lost/reset
[11:34:26] <ultramage> actually no, this was logged after I requested a full reconnect. When the OS came back up, openvpn raised inactivity timeout and did a soft reconnect, with "preserving previous TUN/TAP interface".
[11:36:47] <ultramage> so this might be showing that OpenVPN is not handling hibernation correctly (or at all), and additional pushed routes are not restored. Strangely though, the main route through the vpn does get handled correctly.
[11:40:49] <ultramage> Oh, and the GUI log timestamps are 10 minutes behind the system clock. My RTC drifts and is being resynchronized frequently, but the app is seemingly using its own way of tracking time? Strange that it's precisely 10 minutes off.
[11:47:59] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[12:11:27] *** Joins: Snegodick (~ne@user/Snegodick)
[13:40:06] *** Quits: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith) (Remote host closed the connection)
[13:40:21] *** Joins: winstonsmith (~winstonsm@gateway/vpn/pia/winstonsmith)
[14:17:16] *** Joins: mannequin (uid453465@id-453465.helmsley.irccloud.com)
[14:42:18] *** Quits: splud (~noneya.bi@user/splud) (Ping timeout: 260 seconds)
[14:44:01] *** Parts: [diablo] (~diablo]@user/diablo/x-9068044) (The Lounge - https://thelounge.chat)
[15:32:47] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:33:32] *** Joins: csrf (~csrf@user/csrf)
[16:03:33] *** Quits: Snegodick (~ne@user/Snegodick) (Quit: Going offline, see ya! (www.adiirc.com))
[17:04:11] *** Joins: Kruppt (~Kruppt@50.111.23.107)
[18:40:22] *** Quits: PipeItToDevNull (~PipeItToD@user/pipeittodevnull) (Quit: The Lounge - https://thelounge.chat)
[19:09:34] *** Joins: DoucheEnrique (~quassel@i5C7571F4.versanet.de)
[19:16:16] *** Quits: DoucheEnrique (~quassel@i5C7571F4.versanet.de) (Quit: I'm quitting.)
[19:17:48] *** Joins: DoucheEnrique (~quassel@i5C7571F4.versanet.de)
[19:41:13] *** Quits: DoucheEnrique (~quassel@i5C7571F4.versanet.de) (Quit: I'm quitting.)
[19:48:33] *** Joins: splud (~noneya.bi@user/splud)
[19:50:15] *** Joins: DoucheEnrique (~quassel@i5C7571F4.versanet.de)
[20:00:26] <kitsune1> ultramage: OpenVPN does not do anything special on hybernation -- as Windows may reset the tap adapter, the connection may be lost even if its a short nap, and will restart on wake up. Loss of pushed routes should not happen -- cant say more without seeing the logs. The timestamp offset sounds strange -- you could open an issue in the Windows-GUI github repo.
[20:02:56] *** Joins: DoucheEnrique_ (~quassel@i5C7571F4.versanet.de)
[20:05:44] *** Quits: DoucheEnrique (~quassel@i5C7571F4.versanet.de) (Ping timeout: 256 seconds)
[20:08:31] *** Joins: PipeItToDevNull (~PipeItToD@user/pipeittodevnull)
[20:11:21] <ultramage> kitsune1: well, that was my observation so far - I hibernated for 3 minutes, then resumed, checked routes and the extra route was not there anymore. The disconnect was short enough for a soft-reset to still work, and I assume soft reset does not try to re-apply pushed routes. It did try to delete them after I requested a hard reset.
[20:12:44] <ultramage> I'm fairly sure I can reproduce this on demand, so it's just a question if I should put in the time to dig further and/or report it. Recovering from that state is easy enough.
[20:14:19] <ultramage> GUI's uptime is 6 days. I have not paid attention to the logged timestamps until today, when I tried to match them to system event log entries
[20:18:34] <ultramage> currently the timestamps are 10m30s behind system time. My first guess is that the GUI gets the current time at startup, and then derives all other times based on some kind of source of 'seconds-elapsed' that's vulnerable to gradual clock drift.
[20:20:10] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:21:56] <kitsune1> I could be wrong but I think what the logs GUI displays is just as received from openvpn.exe process which includes the timestamp. And openvpn.exe does use Windows API. So this should not happen.
[20:23:19] <kitsune1> Check the time stamp in the log file.
[20:23:30] <ultramage> yeah, just realized that. trying to locate sample code for the logging... but can't find it
[20:24:40] <kitsune1> If loss of routes after wakeup is real, its worth opening a ticket in trac.
[20:26:27] <ultramage> whoever wrote those msg() wrappers needs to be spanked. that code is hard to follow
[20:31:42] <kitsune1> OpenVPN is (has been) widely used on Windows 7 and no one has reported this time drift -- it could be a local issue..
[20:32:47] <ultramage> ok, otime.c says time_string() uses gettimeofday() + localtime() to produce the timestamp... is what I was going to say, but the timestamp format doesn't match, so I failed at following the code
[20:35:13] <ultramage> long ago we determined that gtod is not monotonic (jumps ahead and back based on system clock, especially at the 3AM daylight saving time transition), so we switched to clock_gettime(CLOCK_MONOTONIC) for linux and stuck with gettickcount on windows.
[20:37:04] <ultramage> but that was for handling internal timers, where precisely 500 seconds must elapse and the clock must absolutely not go backwards. For displaying text timestamps, anything should be fine... so idk what's going on here
[20:39:11] *** Quits: nerozero (~nerozero@87.253.63.54) (Ping timeout: 250 seconds)
[20:41:05] <ultramage> is it possible that openvpn-gui asks the client to output logs without timestamps, and then glues its own timestamp prefix onto them?
[20:46:24] <kitsune1> No
[20:48:57] <ultramage> /* on _WIN32, gettimeofday is faster than time(NULL) */ 
[20:49:44] <ultramage> compat-gettimeofday.c  jesus f christ what happened there (rolling own gtod that's just a fancy wrapper for time() with a lot of crap around it, which makes the above line provably false)
[20:49:51] <kitsune1> As I said you can check the time stamp in the log file written by openvpn.exe and compare it with that output by the GUI into the status window.
[20:50:53] <ultramage> kitsune1: just saying that otime.c::time_string() has buf_printf(&out, "%04d-%02d-%02d %02d:%02d:%02d" (Y-m-d h:m:s), but in the logs I'm seeing Sun Jan 30 h:m:s 2022
[20:51:19] <ultramage> so strftime()-style processing probably
[20:53:14] <kitsune1> That format is used by openvpn.exe to print the log to log file. It communicates with the GUI via the management interface where timestamp is passed as an int. The GUI will format it in a way that matches your locale. So again, check the log file and compare that with the status window output. 
[20:59:50] <ultramage> ah, so it uses the 'machine-readable' log format mode. ok, so I was partially right.
[21:00:38] <ultramage> I started by looking for log message strings, could only find some, then tracked down the logging code, noticed it branched a bunch, then followed the default path. 
[21:09:53] <ultramage> ok so gui just uses basic _ctime(). so I'll go back to the client and look into the timestamp
[21:31:19] *** DoucheEnrique_ is now known as DoucheEnrique
[21:38:27] <ultramage> compat-gettimeofday seems to be using unix time() as base, and then adding a gettickcount difference. So it is relying on GTC to count the seconds elapsed since program startup (or, since last detected clock jump)
[21:55:20] *** Joins: becm (~becm@55d44cfb.access.ecotel.net)
[22:02:50] <kitsune1> Can you try disconnecting and connecting again? If that fixes it we know this is a bug -- likely another one caused by recent move to MSVC builds (compat-gettimeofday gets used with newer MSVC builds, not with older builds).
[22:04:43] <kitsune1> ultramage: ^
[22:09:22] <ultramage> I did a hard reconnect several times to get an accurate timestamp printed. the drift is still there, I assume until I restart the client
[22:10:16] <ultramage> right now I'm running some small test code to see if / how much GTC and TGT drift on my old hardware
[22:11:40] <ultramage> what I'll probably need to do is set a long timer on my phone and then tell my time counting program to end, and hopefully see a result that's above the margin of human error
[22:14:09] <ultramage> fyi my system clock drifts 4-5 seconds every hour, that's how worn/damaged it is
[22:14:19] <kitsune1> wow!
[22:15:59] <ultramage> age is 12 years, don't know if this is normal or if asus cheaped out on the component, or if it suffered electrical damage somewhere along the way
[22:18:45] <kitsune1> That would explain drift of GetTickCount() but when OpenVPN is restarted, the time base will go back to what time() reports which will include your adjustments. So I'm still at a loss where the 10 minutes come from. In your test program check time() returns. 
[22:19:26] <kitsune1> Which version of OpenVPN?
[22:27:55] <ultramage> 2.5.5. Uptime is 6 days, so assuming that GTC drifts 4 seconds per hour, 4*24*6 is approx. 10 minutes.
[22:35:06] <kitsune1> But GTC drift wouldn't matter when OpenVPN process is restarted as it recalculates the offset between time() and gtc. If time() returns current system time, compat_gettimeofday() should be right at least for the purpose of logging.
[22:39:11] <ultramage> compat gtd uses time() as base, but then uses current gtc minus starting gtc as a measure of time elapsed. and it only resyncs once every 40 days, when the value overflows and a 'drift' is detected. 
[22:40:53] <kitsune1> Yes, but the first sycn is at program start and so early in the process lifetime it just returns time() + a small error() due to gtc drift. 
[22:41:02] <kitsune1> sync
[22:41:26] <rob0> everything but the kitchen synch
[22:41:57] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[22:45:05] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:23] <thumbs> rob0: you're too old for that to be funny
[22:46:53] *** Quits: Kruppt (~Kruppt@50.111.23.107) (Quit: Leaving)
[22:48:01] <rob0> sigh, I guess that is true
[22:48:29] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:50:49] <ultramage> kitsune1: after openvpn startup, all time tracking is done based on GTC. as in, curUnixTime = (startUnixTime - startGTC) + curGTC
[22:53:21] <ultramage> where curGTC is the only value that varies over time. The setup assumes that unix time and gtc*1000 increase at the same rate, which is precisely 1 per second. In my case, gtc's rate is 0.9986 per second.
[22:53:50] <kitsune1> reqrite that as startUnixtime + (curGTC-startGTC), so the max error is the error in that last term in brackets. That is zero at startup and mx 4-5 seconds 1 hour after process start.
[22:53:56] <kitsune1> rewrite
[22:55:11] <kitsune1> The same as saying that if you restart OpenVPN.exe you should get the right time in logs again at least for a while. If not, your system is not returning the correct unix time.
[22:55:22] <ultramage> I have never considered that this could be a thing. Now I imagine all the software I'm running, that just wants to die after 30 days uptime. It's sad that my newer main pc at home probably doesn't have this problem.
[22:56:14] <ultramage> kitsune1: yes, it's 5 seconds 1 hour after program star. 120 seconds after 1 day of uptime. 10 minutes after 6 days of uptime. 1 hour after 30 days of uptime.
[22:56:50] <kitsune1> Okay, now we are on the same page. I thought you said it remains at 10 minutes after process start..
[22:57:56] <ultramage> ah, sorry. Initially when I looked, it was 10 minute-ish from hour to hour. The drift was too small to really notice within that time interval.
[22:59:06] <kitsune1> Now we could lobby for a new option --resync-interval-in-compat-gtd 60sec ;)  
[23:01:15] <ultramage> I'm looking into w32tm and other docs to see if I can find a time source that is more stable than whatever windows is using right now
[23:03:33] <ultramage> from how it seems like, the computer is fully convinced that it's ticking at 1s per second, so even time() will probably return a matching value (I let my test program run for 30 minutes and ctime() said that exactly 30 minutes elapsed.
[23:03:35] <kitsune1> Alternatives to gtc are slow and openvpn needs a fast time function as its used in some tight loops. For logging, one could call time() for every line though.
[23:04:11] <kitsune1> Yes, but you could use ntp to keep the time in sync and time() should reflect that (not GTC).
[23:04:35] <ultramage> yah. I'm wondering if windows has a niche setting for this
[23:05:37] <kitsune1> windows 10 has, dont recall win7..
[23:05:51] <ultramage> ooh? tell me
[23:06:50] <ultramage> I wonder if a time driver is expected to be capable of measuring local clock drift against ntp and learning its characteristics, then applying that to compensate
[23:07:33] <kitsune1> Date and Time has a tab named internet time or something similar.
[23:08:43] <kitsune1> API's that read the utc time will adjust to time changes made by ntp client. GTC which is OS view of ticks since boot will not (I guess).
[23:09:12] <ultramage> oh, XP has that too, that's the windows time / ntp update feature. It runs periodically. I forced it to run every hour after noticing how sketchy the time is on this thing. Didn't realize GTC was affected by this
[23:10:32] <ultramage> (somehow in my head I assumed that the system time clock just lived off the old 8086 RTC hardware)
[23:11:18] <kitsune1> I think RTC is relevant only when the system is not running -- something to keep track of time when OS is not counting it.
[23:11:45] <kitsune1> Anywyay, time going slow is not a bad thing -- you get more time to live.
[23:11:46] <ultramage> (well, it actually does... so I assumed only it was the problem. didn't realize RTC / HPET / APIC were dying as well)
[23:12:16] <ultramage> s/RTC/TSC
[23:21:57] <ultramage> The problem on the openvpn side is that the coders implemented compat-gettimeofday in a pretty convoluted way. Linux man pages explicitly say that it's not monotonic and will jump around when the system clock is adjusted (which btw is why you should only use gtod for benign stuff, like logging, and not for sensitive things like timers)
[23:27:31] <ultramage> the other thing is that this weird construct is being used in a place to literally print the current system clock value. So instead of just asking the system for the current value, it uses a static cache plus this other timer that also maybe ticks at 1s/s. However, that one is subject to clock drift and is not subject to ntp synchronization.
[23:31:51] <ultramage> tbh this is a super niche thing that would only bother perfectionists. I'll try hard to see if I can somehow patch it on my end.
[23:34:44] <kitsune1> If you are patching locally use GetSystemTimeAsFileTime() -- its fast and gives you utc time. Will need to scale and shift (from 1/1/1601) to convert to unix time.
[23:38:40] <ultramage> I checked the msvcrt sources and all the relevant C calls end up in that thing already :)
[23:42:15] <ultramage> I have not checked the other code, but I would find it strange if openvpn was relying on the non-monotonic gettimeofday() as its main high precision time source. The code contains handling of time skips, but it makes me wonder, why not use a guaranteed monotonic time source instead?
[23:46:59] <ultramage> interestingly, clock_gettimg(CLOCK_MONOTONIC) on linux does get adjusted / synchronized by ntp, supposedly if it needs to go backward it'll slow the clock down to catch up. That's also not great.
