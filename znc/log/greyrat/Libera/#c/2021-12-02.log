[00:02:09] <fizzie> Implicit function declarations were perfectly legal in C89, and implementations are still pretty permissive about them.
[00:03:00] <riv> static in header is for inline functions I think
[00:03:22] *** Joins: Zenton (~user@user/zenton)
[00:04:06] *** Quits: plantman (~plantman@2601:405:4680:1b0::2) (Ping timeout: 245 seconds)
[00:07:08] *** Joins: u0_a391 (~u0_a391@2600:380:5e44:9b10:3cb7:2320:33e7:5c39)
[00:07:50] *** Joins: shivesh (~shivesh@user/shivesh)
[00:07:52] *** Joins: u0_a3911 (~u0_a391@64.85.173.130)
[00:08:05] <Bou> I get that compilers need to support ancient code, but when I explicitly say `-std=c11` it should apply C11 strictly
[00:08:34] <NRK[m]> asd: you can probably cast the address of int into a char ptr.
[00:08:39] <dostoyevsky2> Is there an easy command to see where "-lc" is actually located?
[00:08:43] <dostoyevsky2> (on linux)
[00:09:02] <riv> why do we need to support old code, why  not just make evryone rewrite everything
[00:09:08] <riv> I feel like that's what people are doing anyway
[00:09:16] *** Quits: charadon (~charadon@155.138.164.183) (Quit: Konversation terminated!)
[00:09:35] *** Joins: charadon (~charadon@155.138.164.183)
[00:10:01] <hxx> I'm reading about good practices in C. Is using static for a function always a bad idea? The practice seems to be discouraged on this one web page.
[00:10:19] <asd> NRK[m]: sounds like a disaster nvm C++ will do for now
[00:10:44] *** Quits: Kit (~u0_a391@2600:380:5e44:9b10:bf2c:9e7e:af48:1823) (Ping timeout: 252 seconds)
[00:10:49] <asd> riv: i've practically left most languages that broke my code with new releases
[00:11:50] *** Quits: u0_a391 (~u0_a391@2600:380:5e44:9b10:3cb7:2320:33e7:5c39) (Ping timeout: 252 seconds)
[00:12:23] <NRK[m]> why would it be a disaster?
[00:13:43] <asd> i want the int to be the key. not a random memory address which may be lost when the lifetime of the variable ends
[00:14:04] <NRK[m]> hmm nvm, you'd need to null terminate the int.
[00:14:31] <NRK[m]> why would memory address be the key? it's hashing what's inside the address
[00:14:54] *** Quits: nyah (~nyah@94.6.71.219) (Quit: leaving)
[00:14:55] <asd> i could just reapply that hash algo ontop of the int, but iirc hashing methods are fit for different data types. this problem isn't worth this much effort ill just go on instead
[00:16:20] <asd> oh i thought you meant i should hash the memory address. my bad. but nvm ill continue with another approach
[00:17:02] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[00:17:17] *** Quits: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com) (Quit: leaving)
[00:17:53] <NRK[m]> well it has a bad advice anyways, since the hashing stops on null byte
[00:18:05] *** Joins: nyah (~nyah@94.6.71.219)
[00:19:50] <NRK[m]> s/has/was
[00:20:27] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[00:23:42] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[00:24:37] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:25:07] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[00:25:27] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:28:53] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[00:29:04] *** Joins: BCMM (~BCMM@user/bcmm)
[00:29:52] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[00:30:14] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[00:30:43] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 252 seconds)
[00:31:01] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[00:31:37] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Ping timeout: 256 seconds)
[00:31:38] *** Joins: dutch (~DutchIngr@user/dutch)
[00:32:54] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:36:12] *** Joins: zyweo (~Svew@user/zyweo)
[00:37:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[00:37:32] *** Joins: rgrinberg (~textual@200.5.63.76)
[00:37:59] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:39:24] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:39:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:41:33] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:181c:9950:8708:b1f) (Quit: This computer has gone to sleep)
[00:44:59] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[00:45:28] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:46:29] *** Quits: alch (~alch@151.68.44.64) (Ping timeout: 252 seconds)
[00:48:22] *** Joins: alch (~alch@151.34.130.209)
[00:48:41] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[00:49:11] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 256 seconds)
[00:50:52] *** Quits: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8) (Ping timeout: 268 seconds)
[00:51:15] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[00:52:13] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[00:52:48] *** Quits: neiluj (~neiluj@2a01:e0a:1f2:d960:3591:6358:5367:6bcd) (Quit: WeeChat 3.1)
[00:55:16] *** Joins: constxd (~brad@192.75.101.164)
[00:55:50] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[00:55:52] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[00:56:09] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:59:49] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:00:02] *** Joins: n_crm (~n_crm@2601:680:c880:d280:4568:4ddd:d84f:15cc)
[01:00:43] *** nuxil_ is now known as nuxil
[01:01:06] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[01:02:27] *** Quits: Satin (uid193953@id-193953.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:03:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:03:43] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[01:04:07] *** Joins: plantman (~plantman@2601:405:4680:1b0::2)
[01:05:06] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[01:08:20] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:08:36] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:09:38] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:10:09] *** Quits: baltazar (~baltazar@185-29-82-78.pool.digikabel.hu) (Ping timeout: 256 seconds)
[01:11:21] *** Quits: constxd (~brad@192.75.101.164) (Quit: WeeChat 2.8)
[01:12:47] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[01:13:14] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[01:13:56] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[01:14:21] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 252 seconds)
[01:17:34] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:17:52] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:19:10] *** Quits: singularity00 (~singulari@85.187.64.126.client.entry.bg) (Quit: The true sign of intelligence is not knowledge but imagination.)
[01:21:53] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:22:57] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[01:23:31] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[01:27:58] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[01:28:04] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:28:27] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:30:27] *** Joins: baltazar (~baltazar@87-97-23-118.pool.digikabel.hu)
[01:30:33] *** Joins: gitargy (~gitargy@76.78.94.79)
[01:31:36] *** Joins: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au)
[01:31:44] *** Quits: charadon (~charadon@155.138.164.183) (Remote host closed the connection)
[01:33:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:33:47] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:34:14] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Quit: WeeChat 3.3)
[01:35:22] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:35:41] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[01:36:04] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Client Quit)
[01:36:47] *** Joins: Guest1731 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:37:32] *** Joins: squoose (~Thunderbi@50-204-229-186-static.hfc.comcastbusiness.net)
[01:37:55] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 256 seconds)
[01:42:01] *** Joins: jscottb (~jscottb@2600:1700:2063:35d0:e12d:6d38:88ee:cace)
[01:42:15] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[01:42:40] *** Joins: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net)
[01:44:12] *** Quits: abip20 (~abdullah@user/abip20) (Ping timeout: 256 seconds)
[01:44:40] *** Joins: ralinux (~saje@37.156.191.92)
[01:45:55] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Client Quit)
[01:56:19] *** Quits: ckdCreations (~ckdCreati@147.55.133.133) (Read error: Connection reset by peer)
[01:56:36] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[01:59:18] *** Quits: BCMM (~BCMM@user/bcmm) (Quit: Konversation terminated!)
[02:00:40] *** Joins: jscottb_ (~jscottb@cpe-173-92-212-35.carolina.res.rr.com)
[02:01:08] *** Joins: elPuma (~elPuma@45-31-64-70.lightspeed.jcvlfl.sbcglobal.net)
[02:01:54] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:03:51] *** Quits: jscottb (~jscottb@2600:1700:2063:35d0:e12d:6d38:88ee:cace) (Ping timeout: 252 seconds)
[02:04:24] *** Quits: Akuli (~Akuli@213.216.211.96) (Quit: Akuli)
[02:06:35] *** Joins: abip20 (~manjaro-u@103.66.177.186)
[02:07:56] *** Quits: strajder (~strajder@user/strajder) (Quit: nn)
[02:09:05] *** Quits: squoose (~Thunderbi@50-204-229-186-static.hfc.comcastbusiness.net) (Quit: squoose)
[02:09:43] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[02:09:58] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[02:10:58] <bionade24> How does the ternary operator behave when the value between ? and : is omitted ? E.g. var1 ?: var2
[02:11:38] <zwr> that's a syntax error
[02:12:04] <bionade24> zwr: It's not https://gitlab.freedesktop.org/drm/igt-gpu-tools/-/blob/igt-gpu-tools-1.26/tools/intel_gpu_top.c#L1415
[02:12:09] <floatcomplex> it's an extension
[02:12:14] <floatcomplex> it's called the elvis operator and it's great
[02:12:24] <floatcomplex> some people hate it because it's an extension but it makes some things super convenient
[02:12:25] <zwr> GCC accepts it as an extension but I'd avoid it
[02:12:32] <floatcomplex> clang accepts it too
[02:12:39] <floatcomplex> the only compiler i'm aware of that does not accept it is cproc
[02:12:53] *** Joins: immibis_ (~hexchat@62.156.144.218)
[02:13:04] *** Quits: immibis (~hexchat@62.156.144.218) (Read error: Connection reset by peer)
[02:15:15] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[02:18:20] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 252 seconds)
[02:18:30] <caze> What do they do with the omitted expression?
[02:18:30] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-12.cspire.com) (Read error: Connection reset by peer)
[02:19:05] *** Quits: tolog (~tolog@89.36.78.165) (Remote host closed the connection)
[02:19:06] <floatcomplex> "a ?: b" is equivalent to "a ? a : b" except a is only evaluated once
[02:19:23] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[02:19:28] <floatcomplex> it's really convenient when the thing it's being assigned to is const, for example
[02:20:03] *** Joins: nvmd (~nvmd@user/nvmd)
[02:21:11] <floatcomplex> ,recall me -t '= strchr'
[02:21:11] <candide> [13d4h ago] <f​loatcomplex> const char * newline = strchr(line, '\r') ?: strchr(line, '\n'); is nice and const-correct, but not portable
[02:22:10] *** Quits: mahmutov (~mahmutov@5.176.7.214) (Ping timeout: 256 seconds)
[02:22:24] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[02:22:53] *** Quits: Guest1731 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:22:55] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 252 seconds)
[02:23:04] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:23:05] <NRK[m]> could just store it into a tmp var first i guess
[02:23:17] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 252 seconds)
[02:23:40] <floatcomplex> could
[02:23:57] <floatcomplex> but come on, this is nicer, and they are talking about adding some way way way dumber shit to c23
[02:24:17] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:25:13] <rcf> ?: is a fine operator and useful. 
[02:26:26] <NRK[m]> tldr on what dumb shit they're adding?
[02:29:09] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[02:29:47] <Bou> this page https://gcc.gnu.org/onlinedocs/gcc-3.4.6/gcc/Min-and-Max.html says there's `a >? b` and `a <? b` too
[02:30:39] <caze> Not in C or GNU C.
[02:30:41] <Bou> but only for c++, and it says "gcc-3.4.6", and it doesn't work on my current gcc
[02:31:04] <hxx> What C styles/practices/rules do you guys prefer to follow?
[02:31:31] <Bou> no, but I like the idea. `a<b ? a : b` is clumsy
[02:31:49] *** Joins: jscottb (~jscottb@cpe-173-92-212-35.carolina.res.rr.com)
[02:31:54] *** Joins: loganlee (~Thunderbi@user/loganlee)
[02:32:27] *** Quits: u0_a3911 (~u0_a391@64.85.173.130) (Ping timeout: 252 seconds)
[02:32:49] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[02:33:01] *** Joins: u0_a3911 (~u0_a391@2600:380:5e44:9b10:6316:f06c:e4a7:c611)
[02:33:27] *** Quits: pizdets (~pizdets@183.182.110.245) (Ping timeout: 256 seconds)
[02:33:57] *** Joins: pizdets_ (~pizdets@183.182.115.34)
[02:34:04] *** Quits: jscottb_ (~jscottb@cpe-173-92-212-35.carolina.res.rr.com) (Ping timeout: 256 seconds)
[02:35:15] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[02:35:32] *** Joins: bindu (~bindu@user/bindu)
[02:35:40] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-12.cspire.com)
[02:36:18] *** Quits: p0g0 (~p0g0@64.45.183.0) (Ping timeout: 265 seconds)
[02:36:28] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[02:36:37] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:36:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:38:44] <floatcomplex> Bou: how the heck actual fuck are you stuck on gcc-3.4.6
[02:38:45] *** u0_a3911 is now known as Kit
[02:38:56] <floatcomplex> that's from like 16 years ago
[02:39:46] <Bou> hah, I'm not! it showed up as a google result
[02:39:52] <floatcomplex> oh
[02:39:56] <floatcomplex> i misunderstood
[02:40:09] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 252 seconds)
[02:40:10] *** Joins: arinov (~arinov@213.194.126.155)
[02:40:58] <Bou> and my gcc (11) doesn't like >? and <? so I guess they removed it at some point
[02:42:17] <floatcomplex> i'm sure those are entirely unrelated to the elvis operator extension
[02:42:18] <NRK[m]> hxx: TABS for indentation, SPACES for alignment
[02:42:20] <Twix> hxx, i like the linux kernel code style in most cases
[02:42:23] * NRK[m] leaves
[02:43:24] * Twix slaps NRK[m] on the neck
[02:43:56] * Kit chuckles at hir psychopathic coding style
[02:44:01] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[02:44:17] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:44:31] <Bou> hxx: I'm not a fan of hard rules like "never ever ever use goto"
[02:44:42] <Twix> i'm a fan of goto
[02:44:47] <Bou> know that it exists, know that you should generally avoid it, but have it ready just in case
[02:44:52] *** Quits: Kit (~u0_a391@2600:380:5e44:9b10:6316:f06c:e4a7:c611) (Quit: aeplus)
[02:44:57] <Twix> for clean ups, but only for clean ups
[02:45:07] <zwr> nice for clean ups, terrible for your hand written parser
[02:45:16] *** Joins: u0_a391 (~u0_a391@2600:380:5e44:9b10:6316:f06c:e4a7:c611)
[02:45:25] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Client Quit)
[02:45:29] <hxx> How exactly does a public API work? Like take the linux API or the x11 API, are API's a C specific thing?
[02:45:29] *** u0_a391 is now known as Kit
[02:45:31] *** Quits: elPuma (~elPuma@45-31-64-70.lightspeed.jcvlfl.sbcglobal.net) (Quit: Client closed)
[02:45:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[02:45:42] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:46:33] <Twix> hxx, you mean the linux kernel api? There is simply some documentation in the kernel sources some where. Like spec for function names and arguments and what they do
[02:46:45] <Twix> and there is a platform specific ABI description
[02:46:56] <Twix> how you call those functions/syscalls
[02:47:11] <hxx> But how is it possible to use say C++ with a C API?
[02:47:25] <Kit> uh
[02:47:31] <Twix> in which register to put the function number, in which to put the first argument and so on
[02:47:37] <Twix> how the stack needs to be prepared
[02:48:05] <Kit> the compiler can recognize .o and ,so files
[02:48:25] <Twix> and there is also a ABI specification for C on most platforms. So your C++ compiler just implements your call C function using that ABI
[02:48:31] <Kit> and can insert the partially compiled code into your executable/read it from a file
[02:48:57] <Kit> its a "standardized" format
[02:49:09] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of pillow knights at https://indiedevs.net/)
[02:49:16] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[02:49:36] <Twix> yes, there is a standard how the naming works, how the ABI works. There is the ELF standard for your executables and object files
[02:49:41] <twkm> s/for c//
[02:50:14] <Twix> twkm is right. I always think in C and i always assume that C is the root for everything
[02:50:32] <Kit> it practically is
[02:50:49] <Twix> on linux, because the linux kernel is mostly written in C
[02:50:54] <Kit> ya
[02:51:01] <zwr> not on Haiku OS
[02:51:18] <Kit> shush
[02:51:29] <Kit> we dont talk about that
[02:51:41] <Twix> is haiku still a thing?
[02:51:48] <Kit> i have no idea
[02:52:09] <Kit> never even heard of it but it does sound somewhat familiar
[02:52:11] <NRK[m]> i think so
[02:52:25] <NRK[m]> they got hardware acceleration a couple days ago or smth
[02:52:25] <zwr> the website has plenty of recent news https://www.haiku-os.org/
[02:53:06] <zyweo> anyway to print stack on C ???
[02:53:18] <Kit> huh
[02:53:18] <zyweo> return 4 return  8 in asm?
[02:53:23] <Kit> wha
[02:53:29] <Kit> wdym
[02:54:06] *** Quits: stevelitt (~stevelitt@2603:9001:70d:6d00:2ef0:5dff:fe7a:5c1d) (Quit: Leaving)
[02:54:45] <Twix> zyweo, maybe you could use gdb :o
[02:54:53] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[02:55:13] <NRK[m]> printf > gdb
[02:55:42] <Kit> what about puts and sprintf
[02:56:02] <zyweo> Twix: i thing it might be not difficult to #ifdef DEBUG,,, print c stack
[02:56:09] <zyweo> need to find some good example of C project code,,,
[02:56:10] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:56:13] <zyweo> then copy and paste
[02:56:59] <zyweo> inline debug,,,assert( _FILE_,,, _FUNCTION_ ) things
[02:57:20] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:57:54] <zyweo> what about vim project??? or others
[02:58:23] <NRK[m]> i don't think FUNCTION is standard
[02:58:41] <twkm> __func__ is standard.
[02:58:53] <NRK[m]> but if it's just for debug then should be fine as long as it "works on your machine"
[02:59:12] <NRK[m]> twkm i thought that was compiler extension
[02:59:40] <Kit> unless youre super based like me and try to make everything 100% compliant
[02:59:53] <twkm> prior to c99 it might be.
[03:00:36] <NRK[m]> Kit: yes, always use -Wpedantic
[03:00:44] <NRK[m]> without defining -std
[03:00:51] <NRK[m]> very based :)
[03:00:57] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-12.cspire.com) (Quit: Leaving)
[03:01:14] <Kit> i use -Weverything HAHA
[03:01:38] <zyweo> c is as plain as vanilla,,, if i could inline print stack than things might be quite simple and useful,,,
[03:01:42] <zyweo> i think java can do that,,
[03:02:02] <Kit> you mean like a call stack?
[03:02:21] <Bou> zyweo: for Linux there's https://man7.org/linux/man-pages/man3/backtrace.3.html, but, non-standard so technically off-topic here
[03:02:56] <twkm> topical just not portable.
[03:03:13] <NRK[m]> twkm: i don't see __func__ in here https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html#Standard-Predefined-Macros
[03:03:38] <twkm> it isn't a macro.
[03:04:07] <caze> C doesn't have a stack.
[03:04:08] <NRK[m]> ahh wtf then?
[03:04:24] <Kit> wtf
[03:04:25] <twkm> see 6.4.2.2.
[03:04:27] <Kit> wait
[03:04:37] <Kit> how does it store return values then
[03:04:43] <Kit> and like
[03:04:55] <Kit> things
[03:05:00] <twkm> it doesn't return a value.
[03:05:05] <caze> ,c11 stack
[03:05:05] <candide> No such text 'stack' found in C11 Draft Standard (n1570).
[03:05:16] <twkm> it seems to be a string literal.
[03:05:29] <Kit> i think im misunderstanding what yall are talking about
[03:05:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[03:05:43] <twkm> rather the identifier for such.
[03:06:09] <NRK[m]> ahh, i see. it looked like a macro, so that's where i was looking
[03:06:24] <caze> The C spec specifies behavior that can be implemented using a stack, but it doesn't out right say that there is a stack anywhere.
[03:06:42] <zwr> ,c11 6.4.2.2p1
[03:06:44] <candide> http://www.iso-9899.info/n1570.html#6.4.2.2p1 [Predefined identifiers] The identifier __func__ shall be implicitly declared by the translator as if, immediately following the opening brace of each function definition, the declaration static const char __func__[] = "function-name"; appeared, where function-name is the name of the lexically-enclosing function.72) FOOTNOTE.72 Since the name __func__ is reser... <truncated; https://0x0.st/-haC.txt>
[03:07:06] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:07:06] <caze> You could implement a call stack using a linked list if you want. C doesn't care.
[03:07:30] <Bou> isn't that still a stack then
[03:07:47] <Kit> C is practically an optimizing macro assembler and love thati
[03:07:56] <Kit> s/thati/that
[03:08:00] <caze> Kit: Not at all.
[03:08:12] <Kit> practically
[03:08:14] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:08:17] <Kit> compared to like
[03:08:23] <Kit> jvav
[03:08:27] <Kit> and js
[03:08:29] <twkm> yes, it is a stack.  it doesn't necessarily grow up or down, nor is it necessarily something that directly relates to h/w.
[03:08:31] <Kit> and python
[03:08:38] <caze> ,cc -w int c = 0; printf("%d %d %d %d", c, c++, c, c++);
[03:08:40] <candide> caze: 2 1 2 0
[03:08:45] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[03:09:00] <caze> Kit: What assembly instructions produce that output?
[03:09:30] <Kit> okay you got me
[03:09:47] <Kit> i actually dont know waht im talking about
[03:09:47] <caze> And how is the stack working there, while we're at it.
[03:09:58] <NRK[m]> that's just undefined behavior though
[03:09:59] <twkm> undefined anyway, so almost a trick question.
[03:10:11] <Kit> i actuallu know very little about the internals of C
[03:10:13] <caze> NRK[m]: Does assembly have undefined behavior?
[03:10:22] <zwr> yes actually
[03:11:08] <zwr> on the 8086 for instance an invalid instruction is "undefined behavior," not sure if intel calls it by that name though. they eventually released a processor that gives you a proper error if you feed it an invalid instruction though
[03:11:39] <NRK[m]> go on...
[03:12:51] *** Quits: The_Jag (~The_Jag@host-79-36-38-58.retail.telecomitalia.it) (Quit: The_Jag)
[03:13:02] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com)
[03:13:15] <zwr> you can probe into the processor's implementation by feeding it invalid instructions, some happen to work and have unusual and even useful behavior, just like some C undefined behaviors I guess
[03:14:03] <floatcomplex> wtf
[03:14:12] <floatcomplex> oh i hadn't scrolled all the way down
[03:14:14] <hxx> Unpopular opinion: AT&T syntax is better than intel syntax.
[03:15:26] *** u0_a391 is now known as Kit_
[03:15:50] <floatcomplex> similarly off-topic unpopular opinion: c++ (or any object-oriented language) member variables are just as problematic as globals
[03:16:06] <NRK[m]> i read somewhere people discovering "hidden" instructions on intel cpus a couple months back
[03:16:13] <NRK[m]> (not sure if true or hoax though)
[03:16:20] <hxx> Wasn't really off topic because we were already talking about assembly.
[03:16:24] *** Quits: Kit (~u0_a391@2600:380:5e44:9b10:6316:f06c:e4a7:c611) (Ping timeout: 268 seconds)
[03:16:33] *** Kit_ is now known as Kit
[03:16:34] <zwr> it's off topic because it's not standard C
[03:17:14] *** Joins: vysn (~vysn@user/vysn)
[03:17:20] <twkm> we discuss non-standard c as well.
[03:17:32] <Kit> how psychopathic is it that i call functions like `func () ;`
[03:17:35] <zwr> that sort of thing is not unusual in these old chips NRK[m], it's very real, there's a book called "Compute's Programming the Commodore 64" which describes a few of those instructions for the 6502 I believe
[03:17:55] <zwr> whatever the Commodore's CPU was, don't remember the exact model
[03:18:00] <twkm> but not so far from c that it has acquired another nam.
[03:18:04] <Kit> 6507 something
[03:18:18] <Kit> not 6057
[03:18:26] <Kit> 6502 something
[03:18:35] <Kit> 6507 has 8kib addr space
[03:18:39] <twkm> sigh.
[03:18:39] <hxx> C64 was actually the 6502
[03:19:43] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:20:56] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:23:18] *** Joins: premultiplied (~premultip@69.84.6.130)
[03:24:22] <Kit> no it was a weird version of it
[03:24:25] <Kit> like
[03:24:33] <Kit> with minor dofferences
[03:25:22] <fizzie> The 6510, sure. With an extra GPIO port.
[03:25:26] <Kit> ya
[03:25:31] <Kit> thats what i mean
[03:25:33] <Kit> y
[03:25:40] <Kit> s/mean/meant
[03:26:19] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:28:02] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[03:30:50] *** Joins: seninha (~seninha@user/seninha)
[03:40:30] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[03:40:43] *** Joins: rardiol (~rardiol@user/rardiol)
[03:41:24] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 276 seconds)
[03:42:01] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[03:42:02] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[03:42:05] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[03:42:40] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:43:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[03:45:34] *** pflanze_ is now known as pflanze
[03:45:54] *** Quits: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net) (Client Quit)
[03:46:10] *** Quits: rardiol (~rardiol@user/rardiol) (Quit: Leaving)
[03:46:31] *** pflanze is now known as pflanze_
[03:47:19] *** pflanze_ is now known as pflanze
[03:47:20] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e1ca:8d5a:1c5d:18a6)
[03:47:20] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e1ca:8d5a:1c5d:18a6) (Changing host)
[03:47:20] *** Joins: skapata (~Skapata@user/skapata)
[03:51:33] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 268 seconds)
[03:52:01] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 252 seconds)
[03:52:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[03:55:02] *** Joins: nostar (~nostar@45.14.195.55)
[03:56:37] <caze> My point with that example is that C is not just a macro assembler.
[03:57:13] <Kit> ya i got that
[03:57:18] <Kit> im just dumb
[03:57:19] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:58:39] *** Joins: Wulf (~Wulf@user/wulf)
[03:58:41] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:59:07] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (Read error: Connection reset by peer)
[03:59:22] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:02:01] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[04:03:38] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[04:04:12] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[04:04:25] *** Joins: derelict (~derelict@user/derelict)
[04:04:29] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[04:05:56] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Client Quit)
[04:06:36] <derelict> hi everyone, im having some trouble understanding the behavior of ualarm(). specifically, does the interval parameter specify the delay after SIGALRM is received? or are new alarms scheduled regardless of whether SIGALRM is emitted?
[04:06:50] <zwr> yeah, don't try to assume how the assembly produced from your C code will look like. https://godbolt.org/z/fhYfv5jM9
[04:09:52] <Twix> it seems like the optimization stages inside compiler actually do work
[04:11:14] <zwr> derelict: perhaps this man page is clearer than the specific documentation you're reading https://man.netbsd.org/ualarm.3
[04:11:16] <candide> Title of zwr's link: ualarm(3) - NetBSD Manual Pages
[04:12:10] <derelict> thank you zwr!
[04:12:23] <Twix> zwr, i also do like https://godbolt.org/z/G7vno5rKG :P
[04:13:49] <zwr> uh that's UB and I don't get what it's doing
[04:13:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[04:14:07] <Twix> yes, its UB :P
[04:15:22] *** vinleod is now known as vdamewood
[04:15:23] <Twix> but it nicely shows, that usual C compilers might do different things than people would expect
[04:16:10] <Twix> (and that C is no macro assembler)
[04:16:14] *** Quits: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:16:54] *** Parts: tusko (~yeurt@copyfree/advocate/tusko) (Byeee)
[04:17:59] <Twix> and i might be offtopic, because i didn't read the full scrollback
[04:17:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:17:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:17:59] *** Joins: wroathe (~wroathe@user/wroathe)
[04:18:03] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[04:19:01] <vdamewood> Twix: Perhaps C could use an andelse keyword. ;)
[04:19:09] *** Joins: charadon (~charadon@155.138.164.183)
[04:19:19] <zwr> nah you're on topic, C is definitely no macro assembler, and it'll get further and further away from that as compilers become more clever 
[04:21:11] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[04:21:17] <Twix> vdamewood, should even work, if the condition is some argument
[04:21:31] <Twix> as long a and b are not initialized
[04:22:12] *** Quits: ralinux (~saje@37.156.191.92) (Quit: Leaving)
[04:23:00] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 268 seconds)
[04:23:32] <caze> https://godbolt.org/z/5T9Pzd6z5
[04:24:12] *** Quits: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au) (Read error: Connection reset by peer)
[04:24:36] *** Joins: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au)
[04:24:56] <floatcomplex> caze: thanks i hate it
[04:25:24] <caze> Hmm, lemme check something.
[04:25:33] <caze> ,paren sizeof a ? b : c
[04:25:34] <candide> caze: (sizeof a) ? (b) : (c)
[04:25:44] <caze> Yup, the parens are definitely needed there.
[04:26:53] <floatcomplex> candide: ,echo floatcomplex
[04:26:54] <candide> candide: f​loatcomplex
[04:27:07] <Twix> i didn't even know that this is valid syntax in c o_O
[04:27:16] <caze> Which?
[04:27:27] <Twix> sizeof (a ? b : c)
[04:27:51] <floatcomplex> it should be a compiler warning or three or four
[04:28:13] <caze> Yeah, and despite `a` having the value 0, it takes the size of b anyway.
[04:28:17] <Twix> i really hope so. At least the static analyzer should show it, i hope
[04:28:39] *** Quits: charadon (~charadon@155.138.164.183) (Remote host closed the connection)
[04:28:43] <caze> Why wouldn't it be valid syntax?
[04:28:59] <caze> ,cc sizeof (1 + 2)
[04:29:02] <candide> caze: no output: sizeof(1 + 2) = 4
[04:29:35] <Twix> Hmm, maybe
[04:29:58] <caze> int *p = malloc(10 * sizeof *p)
[04:30:01] <caze> Ever seen that idiom?
[04:30:12] <Twix> yes, of course
[04:30:43] <Twix> i don't use malloc very often, but yes
[04:30:56] <caze> Well then you know that sizeof can take espressions as operands.
[04:31:18] <caze> It just yields the size of the type of that expression.
[04:31:40] <floatcomplex> caze: oh yeah i guess i don't know under what conditions the ternary operator results in promotions of its second and third arguments to a common type, and under what conditions it simply requires them to have the same type
[04:31:47] <floatcomplex> that's what surprised me though
[04:31:50] <Twix> it makes sense and i think i even understood how it is possible
[04:31:51] <zwr> the 2nd and 3rd operands of the ternary operator go through integer promotions
[04:32:12] <caze> ,cc char a[23]; printf("%zu %zu", sizeof a, sizeof (a + 0));
[04:32:14] <Twix> i was about to ask about that, zwr :D
[04:32:14] <candide> caze: 23 8
[04:32:31] <caze> ,c11 6.5.15p5
[04:32:31] <candide> http://www.iso-9899.info/n1570.html#6.5.15p5 [Conditional operator] If both the second and third operands have arithmetic type, the result type that would be determined by the usual arithmetic conversions, were they applied to those two operands, is the type of the result. If both the operands have structure or union type, the result has that type. If both operands have void type, the result has void type.
[04:33:58] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:34:46] *** Joins: rgrinberg (~textual@200.5.63.76)
[04:35:08] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[04:35:20] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:36:02] *** Joins: chenqisu1 (~chenqisu1@183.217.200.156)
[04:38:41] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:39:44] <floatcomplex> is this UB: https://godbolt.org/z/PxPedfxv7
[04:40:56] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[04:41:15] *** Quits: chenqisu1 (~chenqisu1@183.217.200.156) (Quit: Leaving)
[04:41:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:41:29] <caze> Which part are you worried about?
[04:41:58] <floatcomplex> is it always ok to assume the starting address of the FAM is that many bytes into the allocation, and access it thus
[04:42:34] <floatcomplex> i think the answer to the first part is definitely yes, but it might still be UB due to some you can't-assume-shit caveat somewhere else
[04:42:49] *** Joins: malloy (~jimery@116.30.222.115)
[04:43:32] <caze> Just use the member.
[04:43:57] *** Quits: alch (~alch@151.34.130.209) (Read error: Connection reset by peer)
[04:45:16] <kurahaupo> Does anyone else think it's weird to refer to the conditional operator as "ternary operator" without an article as if it's the name of something? C has a99,99 ternary operator, but there's no particular reason a language can't have more than one, or have one that performs a different function.
[04:45:47] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:46:22] <pragma-> yes, I often correct people who do that.
[04:46:30] <pragma-> ,ternary
[04:46:30] <candide> ?: is called the conditional operator. Some people refer to it as the ternary operator. This is not its name. While it is currently the only operator in C that takes three operands, this may not always be the case. It's just a description of it, not its name. It's called the conditional operator.
[04:47:24] <caze> Is it too late to get a quaternary operator into C23?
[04:47:41] <zwr> uh-oh I'll call it conditional operator from now on
[04:47:49] <apotheon> caze: Try for C++ instead.  That'd be easier, I think.
[04:47:51] *** Joins: alch (~alch@151.34.174.145)
[04:47:54] <zwr> that's assuming I remember this when I wake up tomorrow of course
[04:48:37] <apotheon> Eventually, you can probably get anything into C++.
[04:48:43] *** Quits: nostar (~nostar@45.14.195.55) (Quit: Leaving)
[04:48:50] <floatcomplex> caze: look at the code, that function doesnt have any knowledge of the struct layout
[04:48:51] *** Quits: superdupond (~Kev@2a01cb0400149f00f03b899acc615d4e.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[04:49:19] <floatcomplex> it's meant to be used with multiple such structs and have to assume as little as possible about them
[04:49:25] <caze> floatcomplex: It's never okay to assume the layout of a struct's members.
[04:49:46] <kurahaupo> floatcomplex: I would worry that sizeof(struct list) > offsetof(struct list, string). Does the std guarantee that they're equal?
[04:49:46] <floatcomplex> strictly speaking the struct doesn't even need an FAM
[04:49:54] <floatcomplex> and the function doesn't
[04:50:12] <floatcomplex> kurahaupo: pretty sure it does, for an FAM
[04:50:38] <floatcomplex> if it's not actually an FAM then yeah you're in trouble
[04:50:43] <caze> In fact, the paragraph in the spec states, "In particular, the size of the structure is as if the flexible array member were omitted except that it may have more trailing padding than the omission would imply."
[04:51:38] <floatcomplex> wtf does that mean
[04:52:00] <caze> It means there can be padding before the FAM.
[04:52:14] <floatcomplex> right, but that would be fine
[04:52:15] <kurahaupo> So struct { long a; char b; char c[]; } could have sizeof=16 but offsetof(c)=9 ?
[04:52:24] <floatcomplex> the FAM would still point past the struct size
[04:52:33] *** Joins: pnbeast (~pnbeast@2601:140:4200:b500::1)
[04:52:47] <floatcomplex> kurahaupo: no, that can't happen
[04:53:10] *** Quits: Drin (~Geezabisc@user/geezabiscuit) (Read error: Connection reset by peer)
[04:53:18] <kurahaupo> But struct { long a; char b; char c[1]; } could have offsetof(c)=9 ?
[04:53:36] <floatcomplex> yea
[04:53:42] <kurahaupo> argh
[04:53:53] <floatcomplex> and this would all break, because it's not an FAM
[04:54:44] *** Quits: n_crm (~n_crm@2601:680:c880:d280:4568:4ddd:d84f:15cc) (Quit: Leaving)
[04:55:05] <kurahaupo> I mean, I can see the reasoning, but the inconsistency is bananas
[04:56:23] *** Quits: premultiplied (~premultip@69.84.6.130) (Quit: WeeChat 3.3)
[04:56:24] <floatcomplex> nah
[04:56:25] *** Joins: Geezabiscuit (~Geezabisc@user/geezabiscuit)
[04:56:34] <floatcomplex> it's for good reasons
[04:57:21] <kurahaupo> You can't make an array of a FAM type, so why not require sizeof=offsetof by adjusting what sizeof returns (to explicitly ignore trailing padding)
[04:57:49] <kurahaupo> s/returns/evaluates to/
[05:03:17] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[05:04:07] *** Joins: dohtem (uid524096@user/dohtem)
[05:04:41] *** Joins: frost (~frost@user/frost)
[05:04:50] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[05:08:42] *** Joins: nostar (~nostar@68.51.221.108)
[05:09:18] *** Joins: robert_ (~hellspawn@47.203.169.95)
[05:09:59] <floatcomplex> it does
[05:10:02] <floatcomplex> that is what it does
[05:10:07] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[05:10:18] <floatcomplex> the trailing padding is before the fam
[05:15:46] *** Joins: dutch (~DutchIngr@user/dutch)
[05:18:21] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:26:00] *** Joins: ferdna (~ferdna@user/ferdna)
[05:26:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[05:30:34] *** Quits: BSaboia (~bsaboia@177.37.198.35) (Quit: This computer has gone to sleep)
[05:31:48] <derelict> what is the proper way to make the signal handlers and masks set by sigaction pesistent (i.e. only need to be set once without having to call sigaction from the handler each time the signal is received)
[05:32:41] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[05:34:04] *** Joins: charadon (~charadon@155.138.164.183)
[05:34:39] <pflanze> Can I tell the compiler that a struct field is "mostly-readonly", and it's not aliased? Somehow Clang does not put a field in a register when I think it should.
[05:34:53] <pflanze> s/put/cache in/
[05:36:53] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 252 seconds)
[05:39:05] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 252 seconds)
[05:44:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:45:36] <kurahaupo> derelict: isn't there a flag that you pass to sigaction to do that?
[05:45:55] <kurahaupo> ie not "one time"
[05:45:56] *** Joins: quartz (~quartz@user/quartz)
[05:46:45] <kurahaupo> derelict: (this is a POSIX question, not a C language question)
[05:48:27] *** Quits: nicholaus04 (~nicholaus@172.58.17.115) (Quit: Joined Game)
[05:49:54] <kurahaupo> derelict: come to think of it, persistent handlers are the default when set with sigaction (), unlike when setting with signal(). From man sigaction: SA_RESETHAND — Restore the signal action to the default upon entry to the signal handler.  This flag is meaningful only when establishing a signal handler. SA_ONESHOT is an obsolete, nonstandard synonym for this flag.
[05:51:52] <kurahaupo> derelict: ie, simply avoid setting that flag. You might also want to consider whether you want signals to be countable and/or reentrant (not suspended while the signal handler is running)
[05:52:01] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:56:53] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[06:00:40] *** Joins: Macuser (~Macuser@216.30.159.201)
[06:04:21] *** Quits: Macuser (~Macuser@216.30.159.201) (Client Quit)
[06:05:57] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:06:40] *** Joins: jancoow (~jancoow@user/jancoow)
[06:10:09] *** Quits: charadon (~charadon@155.138.164.183) (Remote host closed the connection)
[06:11:28] *** Joins: charadon (~charadon@155.138.164.183)
[06:13:26] *** Quits: charadon (~charadon@155.138.164.183) (Remote host closed the connection)
[06:14:27] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:17:30] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:e066:aa05:3312:8afa)
[06:18:00] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[06:18:28] *** Quits: VincentValentine (~VincentVa@79.126.106.250) (Ping timeout: 256 seconds)
[06:20:08] *** Joins: malloy (~jimery@116.30.222.115)
[06:22:06] *** Quits: nomn (nomn@user/nomn) (Ping timeout: 260 seconds)
[06:23:03] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[06:23:52] *** Joins: charadon (~charadon@155.138.164.183)
[06:24:08] *** Joins: nomn (nomn@user/nomn)
[06:27:41] *** Joins: VincentValentine (~VincentVa@95.84.48.87)
[06:32:35] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:05] *** Joins: Alhazred_ (~Alhazred@s91904425.blix.com)
[06:34:08] *** Quits: Alhazred_ (~Alhazred@s91904425.blix.com) (Client Quit)
[06:36:33] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[06:41:03] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 252 seconds)
[06:45:28] *** Quits: jscottb (~jscottb@cpe-173-92-212-35.carolina.res.rr.com) (Quit: Leaving)
[06:48:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:52:04] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:37] <malloy> hello, why this code will segmentation fault when longjump invoked?
[06:54:47] <malloy> https://paste.rs/OMj
[06:58:27] <pflanze> malloy, it tries to resume the program at the point where setjmp is called, and that call frame is gone by the time you longjmp to it.
[06:58:59] <pflanze> You can only use longjmp to call to places in your current call stack.
[06:59:47] <pflanze> longjmp can only do the same that exceptions can; your example sets up a "catch" in a place that's gone by the time you "throw".
[07:02:02] <pflanze> It's documented in the man page, "If the function which called setjmp() returns before longjmp() is called, the behavior is undefined."
[07:04:39] <floatcomplex> symmetrical sjlj is also undefined but i don't remember the exact wording that makes it so
[07:05:09] <floatcomplex> glibc enforces it with a check in longjmp that the stack pointer only increments
[07:06:31] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:08:38] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:d330:c2ea:5c5e:346a)
[07:10:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:16:16] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[07:17:50] *** Quits: immibis_ (~hexchat@62.156.144.218) (Remote host closed the connection)
[07:18:35] *** Joins: immibis_ (~hexchat@62.156.144.218)
[07:21:58] <fizzie> For the record, `int ret = setjmp(...);` is also undefined in any case because of C11 7.13.1.1p4-5.
[07:22:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[07:22:39] <floatcomplex> kurahaupo: you were right
[07:23:06] <floatcomplex> kurahaupo: https://godbolt.org/z/xjvcMcEbf a static_assert eliminates the possibility of a fuckup due to that
[07:23:15] <floatcomplex> but it is definitely possible otherwise
[07:23:42] <floatcomplex> i have absolutely no idea why the padding is not inserted *before* the fam
[07:24:33] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:24:58] <floatcomplex> throwing  __attribute((aligned)) on the FAM in the struct definition also fixes it
[07:28:33] *** Joins: on^ (~on@68.101.58.90)
[07:30:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[07:31:01] <fizzie> Uh, I'm confused. Certainly it must be the case that for any struct with a FAM, `sizeof (struct foo) == offsetof(struct foo, fam)`. Otherwise the standard way to allocate storage for a struct and its trailing FAM, given e.g. in the rationale, would not work correctly.
[07:32:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[07:33:20] <fizzie> If `offsetof(struct foo, fam) > sizeof(struct foo)` was allowed, then `struct foo *ptr = malloc(sizeof *ptr + <N bytes needed for the FAM>)` would not have allocated enough storage to hold N bytes starting from the address of `ptr->fam`.
[07:34:45] <floatcomplex> fizzie: other way around
[07:34:56] <floatcomplex> sizeof is apparently allowed to be > offsetof
[07:35:49] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:03] <fizzie> Hmm. Well, okay. I guess that's not _explicitly_ forbidden. But I'm pretty sure the _intention_ of the sentence about "may have more trailing padding than the omission would imply" is not to suggest it would ever have more padding than what's necessary to make the size equal to the offset of the member.
[07:38:25] <floatcomplex> and yet
[07:38:44] <floatcomplex> if you stick a short in there, the static_assert fails
[07:39:02] <floatcomplex> and the alloc routine would silently do the wrong thing without segfaultinf
[07:39:20] <fizzie> Stick a short in where? 
[07:39:25] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:39:36] <floatcomplex> before the fam, in that godbolt
[07:40:21] <floatcomplex> stick a short in there and it breaks, put attribute aligned on the fam and it fixes it again
[07:41:54] <fizzie> Oh. Right. I guess that makes _some_ sense. It's not that the struct has any "unnecessary" padding: it's same as the size it would have if the FAM was omitted. It's just that the FAM is allowed to start "inside" the struct.
[07:43:47] <floatcomplex> yeah and idk why that would help anyone ever
[07:44:42] <fizzie> I guess it's sort of "more compatible" with a regular array. Because then it has the offset a normal array of a defined size would have, in a similar struct.
[07:44:58] <fizzie> (Not that a FAM is required to have the same offset as a non-FAM of any particular size.)
[07:46:56] * floatcomplex adds static_asserts to more code
[07:48:20] <dave0> my curiousity has overcome my embarassment and i must ask.. what is static_assert ? is it a c++ thing?
[07:48:43] <fizzie> No, it's a C11 feature.
[07:49:01] <fizzie> Written `_Static_assert` without the relevant header, as is typical for C things.
[07:49:59] <fizzie> And syntactically it's a kind of a declaration, which has the effect of causing a constraint violation and a diagnostic message if the provided expression (which must be an integer constant expression) compares equal to zero.
[07:50:23] <fizzie> ,cc _Static_assert(sizeof (int) > 100, "this program needs big iron to run");
[07:50:25] <candide> fizzie: error: static assertion failed: "this program needs big iron to run"
[07:50:39] <floatcomplex> iow it allows you to fuck up at compile time instead of run time
[07:50:44] <dave0> oh
[07:50:48] <dave0> different to assert
[07:51:12] <floatcomplex> yeah it's an assert evaluated at compile time, which produces a compiler error
[07:51:42] *** Joins: fstd_ (~fstd@xdsl-81-173-139-70.nc.de)
[07:51:49] <fizzie> There's also a number of more or less kludgy macros to accomplish the same pre-C11, things that (when the expression is false) expand to bitfields of negative widths or arrays of negative size or I forget what the third common thing is.
[07:51:56] <floatcomplex> so if you need to assume that some sizeof == offset of a fam, you can make it a compiler error for it not to be
[07:52:48] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:53:08] <fizzie> One annoying thing about _Static_assert is it's a declaration, which means you need to do syntactically awkward things if you want to use it in a macro that's usable as an expression.
[07:53:45] <floatcomplex> why would you want to do that though
[07:54:06] <floatcomplex> i pretty much only use it on a line by itself at file scope, or in a header
[07:54:16] <fizzie> For compile-time checks that verify the macro's being used in the expected way.
[07:54:32] <fizzie> I have a concrete example as well, but I can't recall it.
[07:54:59] *** Quits: fstd (~fstd@xdsl-87-79-98-69.nc.de) (Ping timeout: 265 seconds)
[07:55:30] <floatcomplex> never underestimate the ability of your coworkers to misuse even a macro that it is intended to enforce that they are not misusing something else
[07:55:46] <fizzie> Well, sure. But you can always try.
[07:56:26] <dave0> ,clang _Static_assert(__GNUC__ > 0, "you need the gnu compiler");
[07:56:31] <candide> dave0: Success (no output).
[07:56:49] <floatcomplex> ,cc static_assert(1);
[07:56:53] <candide> floatcomplex: Success (no output).
[07:57:08] <floatcomplex> ,clang static_assert(1);
[07:57:13] <candide> floatcomplex: [warning: static_assert with no message is a C++17 extension [-Wc++17-extensions]]  Success (no output).
[07:57:19] <floatcomplex> thought so
[07:57:29] <floatcomplex> it's a c2x extension too iirc
[07:57:31] <dave0> so it's not quite a function?
[07:57:39] <floatcomplex> newer clang calls it that instead of c++
[07:57:44] <floatcomplex> ,clang -v
[07:57:48] <candide> floatcomplex: [clang version 12.0.1 (Fedora 12.0.1-2.fc35) Target: x86_64-unknown-linux-gnu Thread model: posix InstalledDir: /usr/bin Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-redhat-linux/11 Found candidate GCC installation: /usr/lib/gcc/x86_64-redhat-linux/11 Selected GCC installation: /usr/lib/gcc/x86_64-redhat-linux/11 Candidate multilib: .;@m64 Candidate multilib: 32;@m32 Selected... <truncated; https://0x0.st/-hMq.txt>
[07:57:54] <fizzie> It's not at all a function, it's a declaration.
[07:58:32] <floatcomplex> pragma-: upgrade your cling clong
[07:58:43] <fizzie> Anyway, something like `#define foo(x) ((void) (struct { int dummy; static_assert(foo, "bar"); }){0}, ...)` does work for an embedded-in-an-expression static assert. It's just not pretty. I'm sad I can't remember where I needed that, it felt entirely justifiable at the time.
[07:58:46] *** Joins: noarb (~noarb@user/noarb)
[08:00:24] *** Joins: gco (~gco@2601:647:5a00:223:11e0:2996:dd48:558a)
[08:01:00] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:02:03] <dave0> fizzie: cocaine is a helluva drug
[08:20:10] *** Quits: gco (~gco@2601:647:5a00:223:11e0:2996:dd48:558a) (Quit: ZZZzzz…)
[08:25:45] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[08:31:10] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:35:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:35:59] *** Quits: abip20 (~manjaro-u@103.66.177.186) (Quit: Konversation terminated!)
[08:38:19] *** Quits: on^ (~on@68.101.58.90) (Remote host closed the connection)
[08:40:24] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[08:43:11] *** Joins: dlew^ (~dlew@68.101.58.90)
[08:43:33] *** Quits: finalsummer (~finalsumm@user/finalsummer) (Ping timeout: 250 seconds)
[08:43:35] *** Quits: alch (~alch@151.34.174.145) (Read error: Connection reset by peer)
[08:44:59] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[08:47:33] *** Quits: ARoxdale (~ARoxdale@84.203.26.40) (Ping timeout: 252 seconds)
[08:48:24] *** Joins: finalsummer (~finalsumm@user/finalsummer)
[08:49:59] *** Joins: pyook (~puke@user/puke)
[08:49:59] *** Quits: puke (~puke@user/puke) (Killed (strontium.libera.chat (Nickname regained by services)))
[08:49:59] *** pyook is now known as puke
[08:51:38] *** Joins: Nadalle (~elladan@user/elladan)
[08:52:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[08:52:19] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 252 seconds)
[08:52:19] *** Nadalle is now known as Elladan
[08:53:11] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:02:57] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[09:02:58] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[09:11:18] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:15:28] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[09:21:03] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:22:59] *** Joins: rgrinberg (~textual@200.5.63.76)
[09:23:07] *** Quits: rgrinberg (~textual@200.5.63.76) (Client Quit)
[09:24:49] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[09:25:19] *** Quits: rahl (~rahl@102.114.75.94) (Ping timeout: 252 seconds)
[09:25:27] *** Joins: overrider (~overrider@user/overrider)
[09:27:04] *** Joins: rahl (~rahl@102.114.39.24)
[09:27:20] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[09:32:04] *** Joins: seninha (~seninha@user/seninha)
[09:32:44] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[09:33:55] *** Quits: charadon (~charadon@155.138.164.183) (Ping timeout: 256 seconds)
[09:34:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:41:16] *** Joins: rgrinberg (~textual@200.5.63.76)
[09:42:27] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:47:30] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[09:52:51] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:59:24] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:00:21] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:00:46] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:00:50] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[10:04:05] *** Joins: Rounin (~david@84.212.130.215)
[10:04:19] *** Joins: mniip_ (mniip@libera/staff/mniip)
[10:05:24] *** Quits: mniip (mniip@libera/staff/mniip) (Quit: This page is intentionally left blank.)
[10:05:43] *** mniip_ is now known as mniip
[10:05:50] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[10:09:06] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[10:09:31] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:09:42] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:09:57] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:12:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 265 seconds)
[10:13:05] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[10:14:17] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:15:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:16:43] *** Joins: seninha (~seninha@user/seninha)
[10:24:25] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[10:27:30] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:27:55] *** Joins: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr)
[10:32:21] *** Quits: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au) (Ping timeout: 256 seconds)
[10:41:17] *** Joins: mrig (~AdiIRC@user/mrig)
[10:46:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.156)
[10:48:15] *** Joins: Atque (~Atque@user/atque)
[10:48:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[10:54:38] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:55:44] *** Quits: pnbeast (~pnbeast@2601:140:4200:b500::1) (Quit: WeeChat 2.7.1)
[11:01:58] *** Joins: Jong (~Jong@2620:10d:c090:400::5:d0b7)
[11:10:08] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:10:40] <Mindiell> dave0: you weren't there anymore yesterday => solution to my problem was to include string.h to make things work. thx again for your help ;o)
[11:10:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:17:56] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[11:19:20] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[11:21:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:22:02] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:d330:c2ea:5c5e:346a) (Quit: Leaving)
[11:22:13] *** Joins: miqztee (~username@user/miqztee)
[11:27:23] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[11:29:54] <dave0> Mindiell: cool, no worries
[11:35:49] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:37:44] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[11:38:22] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 268 seconds)
[11:39:07] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[11:39:56] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:40:40] *** Joins: aradesh (~aradesh@user/aradesh)
[11:43:06] *** Joins: BSaboia (~bsaboia@177.37.198.35)
[11:45:47] *** Joins: vysn (~vysn@user/vysn)
[11:49:32] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 240 seconds)
[11:49:34] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[11:52:56] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[11:53:15] *** Joins: frost (~frost@user/frost)
[11:55:21] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:136b:b21d:9d13:d1bb)
[11:55:47] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:00:39] *** Joins: lleo (~leo@31-161-141-22.mobile.kpn.net)
[12:01:54] *** Quits: lleo (~leo@31-161-141-22.mobile.kpn.net) (Remote host closed the connection)
[12:02:22] *** Joins: lleo (~leo@31-161-141-22.mobile.kpn.net)
[12:03:14] *** Joins: zakora (~zakora@dzd6d6yhqy025k7ptt0dt-3.rev.dnainternet.fi)
[12:03:49] *** Quits: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr) (Quit: Leaving)
[12:10:07] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[12:12:31] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:e066:aa05:3312:8afa) (Ping timeout: 252 seconds)
[12:13:38] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:13:59] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:136b:b21d:9d13:d1bb) (Ping timeout: 252 seconds)
[12:14:51] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[12:15:57] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:16:55] *** ai is now known as nukedclx
[12:17:32] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:8c72:5e57:c8f:9d6d)
[12:20:02] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[12:21:02] *** Joins: kashyaprushi_ (~kashyapru@2405:201:1010:b033:9b1f:1c90:af9c:7cb)
[12:23:25] *** Joins: lightningwright (~lightning@user/lightningwright)
[12:24:59] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:8c72:5e57:c8f:9d6d) (Ping timeout: 252 seconds)
[12:27:10] *** kashyaprushi_ is now known as kashyaprushi
[12:29:43] *** Joins: Klinda (~superleag@user/klinda)
[12:30:10] *** Quits: guest[m] (~guestkdeo@2001:470:69fc:105::ffb0) (Quit: You have been kicked for being idle)
[12:31:43] *** Joins: arinov (~arinov@213.194.126.155)
[12:37:01] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 245 seconds)
[12:40:00] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[12:40:21] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:43:48] *** Joins: pulse (~pulse@user/pulse)
[12:47:28] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:47:33] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:48:15] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[12:49:23] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:49:31] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[12:52:43] *** Quits: chenqisu1 (~chenqisu1@183.217.200.156) (Quit: Leaving)
[12:57:43] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[13:00:31] *** Joins: luizfrds (~Luiz@152.250.243.147)
[13:04:27] <krissmaster> emak
[13:11:27] *** Quits: BSaboia (~bsaboia@177.37.198.35) (Read error: Connection reset by peer)
[13:12:20] *** Joins: BSaboia (~bsaboia@177.37.198.35)
[13:12:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:16:56] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[13:17:00] *** Joins: stonkey (~stonkey@user/stonkey)
[13:20:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[13:20:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:20:24] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[13:24:57] *** Quits: gitargy (~gitargy@76.78.94.79) (Remote host closed the connection)
[13:25:29] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:25:51] *** Quits: Kit-ten (~NotApplic@2603-6010-a141-6fa3-b1d8-76bd-778e-3165.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:27:37] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:941c:129d:9dcf:dc20)
[13:31:47] *** Joins: NotApplicable (~NotApplic@2603-6010-a141-6fa3-64a3-e44c-079c-3dc4.res6.spectrum.com)
[13:32:10] *** Joins: hiepph (~hiepph@wifinat-225.polito.it)
[13:33:03] *** Quits: zakora (~zakora@dzd6d6yhqy025k7ptt0dt-3.rev.dnainternet.fi) (Quit: Konversation terminated!)
[13:33:04] *** Parts: hiepph (~hiepph@wifinat-225.polito.it) ()
[13:33:07] *** Joins: Kit (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com)
[13:34:42] *** Joins: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr)
[13:35:00] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:35:14] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:35:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:36:32] *** Lord_of_Life_ is now known as Lord_of_Life
[13:39:46] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[13:40:20] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[13:41:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:43:16] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:44:11] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[13:47:24] *** Quits: lleo (~leo@31-161-141-22.mobile.kpn.net) (Remote host closed the connection)
[13:47:55] *** Joins: lleo (~leo@31-161-141-22.mobile.kpn.net)
[13:50:41] *** Quits: bookworm (~bookworm@neomutt/bookworm) (Changing host)
[13:50:41] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[13:53:53] *** Joins: falkor (~falkor@90.242.155.158)
[13:54:17] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:56:02] *** Joins: uidops (uidops@gateway/vpn/protonvpn/uidops)
[13:56:05] *** Parts: uidops (uidops@gateway/vpn/protonvpn/uidops) ()
[14:02:31] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 256 seconds)
[14:04:16] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[14:06:18] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Read error: Connection reset by peer)
[14:10:05] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[14:12:09] *** Quits: lleo (~leo@31-161-141-22.mobile.kpn.net) (Ping timeout: 256 seconds)
[14:20:12] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (Ping timeout: 265 seconds)
[14:25:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:26:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:29:52] *** Joins: cousteau_ (~cousteau@user/cousteau)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:05] *** Joins: csrf (~csrf@user/csrf)
[14:42:20] *** Joins: Hax0r (~Hax0r@93.169.49.84)
[14:46:31] *** Quits: lightningwright (~lightning@user/lightningwright) (Ping timeout: 252 seconds)
[14:50:50] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[14:55:34] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[14:58:10] *** Joins: shivesh (~shivesh@user/shivesh)
[14:59:30] *** Joins: nOfx (~i.am@189.58.156.81.dynamic.adsl.gvt.net.br)
[14:59:49] *** Quits: singularity00 (~singulari@85.187.64.126.client.entry.bg) (Ping timeout: 256 seconds)
[15:00:30] *** Quits: dhch (~dhch@185.213.154.168) (Read error: Connection reset by peer)
[15:00:41] *** Quits: BSaboia (~bsaboia@177.37.198.35) (Quit: Leaving)
[15:01:31] *** Joins: dhch (~dhch@185.213.154.168)
[15:02:08] *** Joins: riskoir (~karaixx@user/riskoir)
[15:03:04] *** Joins: hxztnxt (~hxztnxt@145.red-80-59-28.staticip.rima-tde.net)
[15:04:16] <hxztnxt> can a thread use the same lock in 2 different sections of its code?
[15:04:57] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[15:05:01] *** Joins: jess (~jess@libera/staff/jess)
[15:05:17] <hxztnxt> like in a for loop, lock every iteration. Then at the end of the for loop grab the lock again.
[15:05:30] *** Joins: masterbuilder (~user@user/masterbuilder)
[15:05:48] <hxztnxt> at the end I mean after closing brackets
[15:08:17] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[15:08:17] *** Quits: Hax0r (~Hax0r@93.169.49.84) (Quit: Leaving)
[15:12:46] <bookworm> sure, as long as the lock is still in scope
[15:13:18] *** Joins: earnest (~earnest@user/earnestly)
[15:14:32] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[15:15:07] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[15:21:12] <dave0> hxztnxt: yep that's fine
[15:21:35] <tsujp> How does one read a DirectX FrameBuffer from a game on Windows in C?
[15:23:15] <riskoir> Is it possible to cast one struct to another?
[15:28:05] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:28:41] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[15:35:03] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:04] <trenka> hxztnxt: did you mean 'recursive' mutex?
[15:36:20] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:15] <dave0> riskoir: no
[15:38:54] *** Joins: sebag (~guest@91.245.82.2)
[15:39:15] <dave0> trenka: ah good point
[15:43:33] <HisShadow> riskoir: you can of course type cast a pointer to one struct to a pointer to another struct, but doing so would be a bad idea
[15:44:04] *** Quits: cousteau_ (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[15:44:22] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:45:03] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:45:20] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[15:45:53] <riskoir> ty :-) 
[15:45:54] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:46:34] *** Joins: arinov (~arinov@178.240.181.140)
[15:50:11] *** Quits: dhch (~dhch@185.213.154.168) (Ping timeout: 256 seconds)
[15:51:08] *** Joins: strajder (~strajder@user/strajder)
[15:51:18] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[15:51:22] *** Joins: pc__ (~pc@41.69.129.98)
[15:51:41] <dave0> riskoir: the right way is to use a union of those two structs
[15:52:26] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[15:52:35] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[15:52:45] *** Quits: pc__ (~pc@41.69.129.98) (K-Lined)
[15:54:46] <riskoir> dave0, got it
[15:57:23] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:58:20] *** Joins: u0_a391 (~u0_a391@2600:380:5e25:1a30:c66d:bf67:a10:2a26)
[16:01:08] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com) (Ping timeout: 252 seconds)
[16:03:11] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[16:05:41] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[16:06:22] *** Joins: kurfen (~kurfen@lfbn-ann-1-320-249.w86-200.abo.wanadoo.fr)
[16:10:02] *** Quits: hxztnxt (~hxztnxt@145.red-80-59-28.staticip.rima-tde.net) (Remote host closed the connection)
[16:12:01] *** Quits: dlew^ (~dlew@68.101.58.90) (Remote host closed the connection)
[16:16:02] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:17:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:18:11] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[16:18:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:19:50] *** Joins: leo__ (~leo@31-161-141-22.mobile.kpn.net)
[16:21:45] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:21:57] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:23:04] *** Joins: u0_a3911 (~u0_a391@64.85.173.130)
[16:25:26] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:25:53] *** Quits: u0_a391 (~u0_a391@2600:380:5e25:1a30:c66d:bf67:a10:2a26) (Ping timeout: 252 seconds)
[16:26:36] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:28:18] *** Joins: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au)
[16:30:02] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[16:30:15] *** Quits: leo__ (~leo@31-161-141-22.mobile.kpn.net) (Quit: Leaving)
[16:32:29] *** Quits: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au) (Ping timeout: 252 seconds)
[16:33:23] *** flooded is now known as _flood
[16:35:13] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:36:43] *** Joins: Atque (~Atque@user/atque)
[16:39:23] *** Joins: seninha (~seninha@user/seninha)
[16:42:13] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:48:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:9b1f:1c90:af9c:7cb) (Quit: Leaving)
[17:06:40] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:07:08] *** Joins: riskoir (~karaixx@user/riskoir)
[17:09:21] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:09:44] *** Joins: riskoir (~karaixx@user/riskoir)
[17:11:46] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:12:14] *** Joins: riskoir (~karaixx@user/riskoir)
[17:14:04] *** Parts: Burgundy (~yomon@79.115.213.171) ()
[17:14:17] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[17:14:47] *** Joins: Burgundy (~yomon@79.115.213.171)
[17:18:46] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[17:22:25] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 265 seconds)
[17:24:25] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[17:24:32] *** Joins: LucaTM (~LucaTM@user/lucatm)
[17:24:50] *** u0_a3911 is now known as Kit
[17:25:01] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:28:13] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:31:55] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:32:39] *** Joins: premultiplied (~premultip@69.84.6.130)
[17:33:32] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[17:37:13] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:37:42] *** Joins: riskoir (~karaixx@user/riskoir)
[17:39:44] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:40:05] *** Joins: riskoir (~karaixx@148.87.23.12)
[17:40:05] *** Quits: riskoir (~karaixx@148.87.23.12) (Changing host)
[17:40:05] *** Joins: riskoir (~karaixx@user/riskoir)
[17:41:31] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.33)
[17:45:03] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:45:33] *** Joins: riskoir (~karaixx@user/riskoir)
[17:47:22] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:10] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:49:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:51:27] *** Quits: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[17:52:03] *** Quits: ARoxdale (~ARoxdale@84.203.26.40) (Ping timeout: 252 seconds)
[17:54:39] *** Quits: riskoir (~karaixx@user/riskoir) (Remote host closed the connection)
[17:55:06] *** Joins: riskoir (~karaixx@148.87.23.12)
[17:55:06] *** Quits: riskoir (~karaixx@148.87.23.12) (Changing host)
[17:55:06] *** Joins: riskoir (~karaixx@user/riskoir)
[17:56:05] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[17:57:30] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[17:59:23] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[17:59:37] *** Joins: constxd (~brad@192.75.101.164)
[18:00:14] *** Quits: riskoir (~karaixx@user/riskoir) (Quit: Leaving)
[18:01:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[18:02:14] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[18:02:25] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[18:03:59] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 256 seconds)
[18:05:00] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[18:08:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:08:27] *** Quits: Zenton (~user@user/zenton) (Ping timeout: 256 seconds)
[18:09:33] *** Joins: nyah (~nyah@94.6.71.219)
[18:11:29] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 252 seconds)
[18:11:55] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[18:15:04] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:15:38] *** Joins: soul-d (~uknown@user/soul-d)
[18:16:59] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[18:17:34] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:23:24] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[18:23:35] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.33) (Ping timeout: 252 seconds)
[18:24:06] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[18:29:17] *** Joins: kish` (~sid742412@user/aqua)
[18:36:00] *** Joins: arinov (~arinov@213.194.126.155)
[18:36:31] *** Joins: karakedi (~eAC53C340@user/karakedi)
[18:42:34] *** Joins: Klinda (~superleag@user/klinda)
[18:44:25] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[18:44:31] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[18:47:06] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[18:47:25] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[18:49:12] *** Quits: puke (~puke@user/puke) (Quit: puke)
[18:51:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[18:56:38] *** Joins: lightningwright (~lightning@user/lightningwright)
[18:58:18] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[18:58:37] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[19:02:54] *** Joins: BSaboia (~bsaboia@177.37.198.35)
[19:03:16] *** Quits: BSaboia (~bsaboia@177.37.198.35) (Read error: Connection reset by peer)
[19:03:46] *** Joins: quartz (~quartz@user/quartz)
[19:07:05] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:07:24] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[19:10:50] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:11:03] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:11:19] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:13:05] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Ping timeout: 252 seconds)
[19:13:24] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[19:13:37] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 256 seconds)
[19:15:52] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:16:11] *** Joins: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552)
[19:18:13] *** Quits: singularity00 (~singulari@85.187.64.126.client.entry.bg) (Ping timeout: 256 seconds)
[19:20:09] *** Quits: crudo (~crudo@2804:7f7:d883:31e5:75ae:f1ab:2f40:d552) (Remote host closed the connection)
[19:21:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:6875:9d65:d898:a509)
[19:21:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:6875:9d65:d898:a509) (Changing host)
[19:21:53] *** Joins: skapata (~Skapata@user/skapata)
[19:22:51] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Quit: WeeChat 3.3)
[19:23:48] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:27:09] *** ^tinyweasel^ is now known as firefish
[19:29:27] *** firefish is now known as channichthyidae
[19:29:41] *** Joins: hxztnxt (~hxztnxt@ceduroam31.us.es)
[19:30:17] <hxztnxt> should I read "the c programming language" from begining to end even though I already know some c?
[19:30:43] *** channichthyidae is now known as icefish
[19:30:51] <floatcomplex> couldn't hurt, as long as you don't decide to stop writing idiomatic c99 and become a c89 zealot
[19:31:06] *** icefish is now known as icefish_
[19:31:10] *** icefish_ is now known as icefish
[19:32:08] <hxztnxt> so maybe i should learn c99 better (?)
[19:32:21] <floatcomplex> well there's no c99-or-later edition of k&r unfortunately
[19:33:09] <hxztnxt> some chapters here are very beginner oriented, should I really read it all?
[19:34:04] <floatcomplex> short answer: yes
[19:34:32] <hxztnxt> would you give me a reason?
[19:34:44] <floatcomplex> there's no such thing as not-a-beginner
[19:35:09] <hxztnxt> meaning everyone is a beginner is some way?
[19:35:19] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:35:30] <floatcomplex> yeah and once you have some experience, the ways in which you are still a beginner are no longer obvious to you
[19:35:53] <Thedarkb-Desktop> Join me on the bottom of the dunning kruger curve.
[19:36:07] <floatcomplex> the water's fine
[19:36:08] <twkm> i suggest you read the whole thing, and do every exercise.
[19:36:36] *** nOfx is now known as nofx
[19:38:24] * Thedarkb-Desktop has accidentally infinite looped candide twice.
[19:38:48] <pragma-> oh noes
[19:38:53] * floatcomplex laughs in #include "/dev/zero"
[19:40:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:40:04] <Thedarkb-Desktop> #include "/dev/tty" won IOCCC one year.
[19:43:20] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Ping timeout: 252 seconds)
[19:43:53] *** Quits: icefish (~weasel@user/tinyweasel/x-0495158) (Quit: quit)
[19:45:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:20] *** Joins: charadon (~charadon@155.138.164.183)
[19:46:43] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:47:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:48:11] *** Joins: BSaboia (~bsaboia@177.37.198.35)
[19:48:25] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:48:28] <earnest> Delightful
[19:48:42] <HisShadow> Thedarkb-Desktop: I think it was stdin though
[19:49:06] <Thedarkb-Desktop> Could've been, I can't really remember.
[19:49:24] *** Quits: lightningwright (~lightning@user/lightningwright) (Remote host closed the connection)
[19:49:48] *** Joins: lightningwright (~lightning@user/lightningwright)
[19:49:51] *** Joins: cheakoirccloud (uid293319@id-293319.ilkley.irccloud.com)
[19:51:36] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:52:48] *** Quits: hxztnxt (~hxztnxt@ceduroam31.us.es) (Remote host closed the connection)
[19:52:50] <floatcomplex> it was dev tty according to goggle
[19:53:20] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[19:54:21] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:01:04] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:01:40] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:02:34] <HisShadow> hm, well I guess stdin would work just as well
[20:04:55] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[20:05:20] <twkm> except it might not exist, where tty should always exist if /dev/ exists.  not that that's really c related.
[20:05:45] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[20:10:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:10:38] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl.)
[20:12:30] *** Quits: BSaboia (~bsaboia@177.37.198.35) (Quit: This computer has gone to sleep)
[20:14:15] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[20:15:32] *** Joins: node1 (~node1@user/node1)
[20:19:14] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[20:19:21] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[20:21:24] *** Joins: asem (~asem@156.218.163.75)
[20:28:15] <floatcomplex> do y'all use calloc(size, 1) or calloc(1, size) when there's no logical number other than 1 to put there
[20:29:29] <EtherNet> df
[20:29:58] <EtherNet> sorry wrong window.
[20:32:12] <Satin> Beginner question here. I'm having some trouble understanding why this is doing what it's doing. It's meant to parse the tokens in, but I'm having output that doesn't match the file.  https://www.toptal.com/developers/hastebin/asonumesan.cpp and https://i.imgur.com/8ILI6lC.png
[20:32:32] *** Joins: mahmutov (~mahmutov@5.176.7.214)
[20:32:35] <Satin> s/the tokens/lines/
[20:32:54] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[20:33:57] *** Joins: JeffH (~JeffH@46.sub-174-198-145.myvzw.com)
[20:34:34] *** Parts: Mindiell (~Mindiell@python/afpy/mindiell) ()
[20:35:44] <JeffH> Is there an easy way to find unused structs and enums (not individual values) and unimplimented prototypes?
[20:35:45] <Teckla> floatcomplex: I use calloc(1, size)
[20:35:52] <fizzie> I think I tend to go for `calloc(size, 1)` when it's conceptually just a bunch of bytes, and `calloc(1, size)` when it's a single object of some particular type (i.e., the second argument is `sizeof *x` for example).
[20:36:10] <Teckla> fizze++
[20:36:15] <Teckla> fizzie++
[20:37:39] <twkm> suggesting use as originally intended, even though that idea was abandoned.
[20:38:29] <twkm> sorry Satin, there's no c present when i fetch that url.
[20:39:08] *** Joins: Zenton (~user@user/zenton)
[20:39:52] <twkm> JeffH: generally compilers already sort of ignore what's not used so there isn't a lot of call for identifying such.
[20:40:18] <fizzie> Satin: The problem there is that `feof` does not mean "am I at end of file now", it means "has a read operation already failed because of an end-of-file condition".
[20:40:30] <Satin> Oh.
[20:40:40] *** Joins: BSaboia (~bsaboia@177.37.198.35)
[20:40:43] <fizzie> In general, prefer to check the return value of `fgets` rather than test `feof`.
[20:41:08] <fizzie> (You may use `feof`, or `ferror`, after fgets has returned NULL to determine if it failed because of an end-of-file condition or an error.)
[20:41:44] <fizzie> Cf. http://c-faq.com/stdio/feof.html "Why does the simple line-copying loop -- copy the last line twice?"
[20:41:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:42:27] <floatcomplex> twkm: so calloc(1, sizeof the single thing) ?
[20:42:28] <JeffH> twkm: I understand the compiler ignores it. I’m heavily modifying some legacy code and don’t want to leave unused cruft. 
[20:42:30] <Satin> I see, so I was using the wrong approach there. Thanks, just moved the line that had fgets into the while condition.
[20:42:52] <pragma-> ,faq feof
[20:42:52] <candide> http://c-faq.com/stdio/feof.html - 12. Stdio, 12.2: Why does the simple line-copying loop while(!feof(infp)) { fgets(buf, MAXLINE, infp); fputs(buf, outfp); } copy the last line twice?
[20:43:36] <twkm> floatcomplex: i tend not to use calloc and when i do i don't particularly care (or really notice) which way i write it.
[20:44:36] <twkm> JeffH: i guess you could analyze the compiler's intermediates, if any.
[20:45:26] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:45:59] <floatcomplex> ,cc strdup(NULL);
[20:46:04] <candide> floatcomplex: [warning: argument 1 null where non-null expected [-Wnonnull] note: in a call to function 'strdup' declared 'nonnull']  runtime error: null pointer passed as argument 1, which is declared to never be null Program received signal SIGSEGV, Segmentation fault in __strlen_sse2 () called by strdup () called by main () at statement: strdup(NULL);
[20:46:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[20:46:19] <floatcomplex> fascinating
[20:46:34] *** Joins: Inline (~Inline@aftr-37-201-240-43.unity-media.net)
[20:46:45] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[20:47:00] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Read error: Connection reset by peer)
[20:48:04] *** Quits: charadon (~charadon@155.138.164.183) (Remote host closed the connection)
[20:48:24] *** Joins: charadon (~charadon@155.138.164.183)
[20:48:29] *** Quits: charadon (~charadon@155.138.164.183) (Remote host closed the connection)
[20:50:15] *** Quits: plantman (~plantman@2601:405:4680:1b0::2) (Ping timeout: 252 seconds)
[20:50:17] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[20:50:23] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[20:51:31] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[20:51:43] *** Quits: Inline (~Inline@aftr-37-201-240-43.unity-media.net) (Ping timeout: 256 seconds)
[20:52:02] *** Joins: Charadon (~Charadon@2601:ce:4100:6b0::c4ce)
[20:52:04] *** Quits: JeffH (~JeffH@46.sub-174-198-145.myvzw.com) (Remote host closed the connection)
[20:52:28] *** Quits: Charadon (~Charadon@2601:ce:4100:6b0::c4ce) (Client Quit)
[20:52:46] *** Joins: Charadon (~Charadon@2601:ce:4100:6b0::c4ce)
[20:52:49] *** Quits: Charadon (~Charadon@2601:ce:4100:6b0::c4ce) (Client Quit)
[20:53:14] *** Joins: Charadon (~Charadon@2601:ce:4100:6b0::c4ce)
[20:53:21] *** Quits: Charadon (~Charadon@2601:ce:4100:6b0::c4ce) (Remote host closed the connection)
[20:53:41] *** Joins: Charadon (~Charadon@155.138.164.183)
[20:56:32] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[20:58:18] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:f1ed:6887:90f:533) (Quit: Leaving)
[21:00:32] *** Joins: JeffH (~JeffH@46.sub-174-198-145.myvzw.com)
[21:03:36] *** Joins: nabaiste^ (~nabaiste@68.101.58.90)
[21:04:56] *** Joins: arinov (~arinov@46.154.79.152)
[21:07:12] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[21:09:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:15:27] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[21:18:10] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[21:19:30] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[21:20:19] *** Quits: shivesh (~shivesh@user/shivesh) (Ping timeout: 252 seconds)
[21:21:08] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:22:15] *** Joins: shivesh (~shivesh@user/shivesh)
[21:27:17] *** Quits: shivesh (~shivesh@user/shivesh) (Ping timeout: 252 seconds)
[21:28:08] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:941c:129d:9dcf:dc20) (Quit: simon323)
[21:29:05] *** Joins: shivesh (~shivesh@user/shivesh)
[21:33:05] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[21:33:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[21:35:32] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[21:35:46] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[21:41:35] *** Quits: gig (~gig@2a01:4f8:141:4424::2) (Remote host closed the connection)
[21:42:21] *** Joins: Akuli (~Akuli@82-203-160-219.bb.dnainternet.fi)
[21:44:47] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:44:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[21:45:35] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[21:47:05] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[21:47:29] *** Joins: Mindiell (~Mindiell@python/afpy/mindiell)
[21:48:22] <Mindiell> Hello again, simpler question => I have some source code that I can compile via ./configure and make. How do I do the "./configure" part under windows ?
[21:48:47] <floatcomplex> probably wsl or virtualbox
[21:49:01] <floatcomplex> mingw-w64 if you're particularly adventurous
[21:49:17] <pragma-> cygwin's fairly painless too
[21:49:17] <floatcomplex> (and lucky)
[21:49:36] <floatcomplex> pragma-: depends on how you define pain
[21:50:11] <floatcomplex> pragma-: cygwin doesn't result in binaries that can be compiled in one place and run in another, and they can be dog slow compared to even code running under vbox
[21:50:37] <twkm> configure is a shell script.
[21:50:49] <twkm> (typically)
[21:50:52] <floatcomplex> idk why people say dog slow, dogs are fast
[21:51:17] <pragma-> I've never had a problem with cygwin binaries as long as I shipped cygwin1.dll alongside.
[21:52:06] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[21:52:07] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[21:54:03] *** Joins: gitargy (~gitargy@76.78.94.79)
[21:54:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:56:31] *** Quits: arinov (~arinov@46.154.79.152) (Read error: Connection reset by peer)
[21:57:14] *** Joins: arinov (~arinov@46.154.79.152)
[21:57:16] <Mindiell> pragma-: thx I'll try that
[21:57:32] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[21:57:58] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[21:59:03] <floatcomplex> good luck
[21:59:39] <pragma-> I trust you have familiarity with posix and you know what libraries you need.
[22:01:23] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[22:01:42] *** Quits: falkor (~falkor@90.242.155.158) (Quit: Leaving)
[22:02:34] *** Joins: superdupond (~Kev@2a01cb0400149f00b8fab7e94a382922.ipv6.abo.wanadoo.fr)
[22:03:29] *** Joins: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net)
[22:03:32] *** Quits: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net) (Max SendQ exceeded)
[22:03:49] *** Joins: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net)
[22:03:59] *** Quits: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net) (Max SendQ exceeded)
[22:04:18] *** Joins: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net)
[22:04:38] *** Quits: chillin_penguin (~igloo@mobile-166-175-56-140.mycingular.net) (Max SendQ exceeded)
[22:05:15] *** Joins: plastico (~plastico@neomutt/plastico)
[22:07:14] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:07:51] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[22:10:11] *** Quits: llh (~llh@user/llh) (Ping timeout: 252 seconds)
[22:10:40] *** Joins: llh (~llh@user/llh)
[22:12:10] *** Joins: zyweo (~Svew@user/zyweo)
[22:12:53] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:14:03] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[22:15:20] *** Quits: asem (~asem@156.218.163.75) (Quit: Client closed)
[22:16:32] *** Joins: monkey_ (~user@181.114.17.106)
[22:17:13] *** Joins: mongrel (uid508343@id-508343.ilkley.irccloud.com)
[22:18:07] *** Quits: arinov (~arinov@46.154.79.152) (Remote host closed the connection)
[22:18:48] <Satin> [beginner question] shouldn't atoi convert char pointer string to an int? https://ideone.com/BFSqWB It's segfaulting on me
[22:20:11] <floatcomplex> Satin: order of operations error with strtok
[22:21:04] <Satin> Ahhh... I see now
[22:21:09] *** Quits: BSaboia (~bsaboia@177.37.198.35) (Quit: This computer has gone to sleep)
[22:22:03] <Satin> I think. Will try to do some debugging.
[22:22:08] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:28:45] *** Joins: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au)
[22:30:00] <fizzie> See also strcmp (vs. ==).
[22:30:36] <fizzie> There's often a warning about that particular issue.
[22:32:25] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:33:43] *** Quits: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au) (Ping timeout: 256 seconds)
[22:34:38] <fizzie> ,cc char buf[10]; fgets(buf, 10, stdin); char *s = strtok(buf, " "); if (s == "foo") puts("ok"); else printf("what, [%s] is not foo?", s); -stdin=foo bar
[22:34:41] <candide> fizzie: [warning: comparison with string literal results in unspecified behavior [-Waddress]] what, [foo] is not foo?
[22:37:10] <floatcomplex> imagine how many common problems would go away if gccc didn't let beginners accidentally compile code with all warnings disabled
[22:38:11] <pragma-> I fucking don't undersatnd why warnings are an opt-in thing instead of opt-out.
[22:38:27] <pragma-> I've been complaining about this for decades.
[22:38:37] <floatcomplex> pragma-: it's because they don't want to break some 30-year old configure scripts that probably have some -Werror-like behaviour
[22:39:01] * APic laughs magically.
[22:39:03] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[22:39:05] <floatcomplex> there are many many many decent solutions to this problem but good luck convincing compiler devs
[22:39:13] <pragma-> smh
[22:39:50] <APic> Backward compatibility pwns. But even the Micro$ofts had to drop their DOS-Box in Favour of DOSBox
[22:39:58] <apotheon> . . . magically?
[22:40:03] <APic> pragma-: Sorry for the caps
[22:40:05] * APic is too tired
[22:40:08] <apotheon> Should that be "manically" or "maniacally"?
[22:40:21] * pragma- mutters about spelling "Microsoft" with a dollar sign instead of an 's'.
[22:40:43] <floatcomplex> micro::soft
[22:40:52] <APic> apotheon: My best friend and health care proxy reprogrammed me via NLP from manic to magic
[22:40:53] <apotheon> tinysquishy
[22:41:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[22:41:02] <apotheon> weird
[22:41:06] <APic> Nah, great
[22:41:12] *** Joins: NEYi (~NEYi@109.251.216.38)
[22:45:45] *** Quits: NEYi (~NEYi@109.251.216.38) (Remote host closed the connection)
[22:48:16] *** Joins: alch (~alch@151.36.120.37)
[22:51:22] *** Joins: dudek (~dudek@185.150.236.103)
[22:52:44] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[22:56:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:57:17] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[23:01:15] *** Joins: de-facto (~de-facto@user/de-facto)
[23:01:20] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[23:02:33] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[23:11:07] *** Quits: singularity00 (~singulari@85.187.64.126.client.entry.bg) (Ping timeout: 256 seconds)
[23:11:07] *** Joins: u0_a391 (~u0_a391@2600:380:5e26:855a:fe91:2939:4032:77cf)
[23:12:53] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 252 seconds)
[23:13:42] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[23:14:20] *** Joins: Narrat (~omnius@p200300df5f14e29206ea56fffe2e7cdc.dip0.t-ipconnect.de)
[23:15:05] *** Quits: Kit (~u0_a391@64.85.173.130) (Ping timeout: 252 seconds)
[23:15:20] *** u0_a391 is now known as Kit
[23:15:26] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[23:16:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[23:19:51] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Ping timeout: 252 seconds)
[23:19:56] *** Quits: elemongw (~elemongw@20.107.36.50) (Ping timeout: 245 seconds)
[23:20:11] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[23:26:19] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[23:27:08] *** Joins: elemongw (~elemongw@20.107.36.50)
[23:27:17] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:27:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[23:28:57] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[23:29:00] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[23:31:51] *** Quits: JeffH (~JeffH@46.sub-174-198-145.myvzw.com) (Remote host closed the connection)
[23:33:18] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:c006:182a:a2a6:4f9b)
[23:35:15] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:36:08] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[23:36:30] *** Quits: NEYi (~NEYi@109.251.216.38) (Remote host closed the connection)
[23:36:55] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:37:14] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com)
[23:37:47] *** Joins: monkey_ (~user@181.114.17.106)
[23:38:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5d0a:d7eb:30c:e02b)
[23:38:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5d0a:d7eb:30c:e02b) (Changing host)
[23:38:33] *** Joins: skapata (~Skapata@user/skapata)
[23:40:18] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:40:46] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:b882:42b4:f44e:9996)
[23:41:06] *** Quits: Kit (~u0_a391@2600:380:5e26:855a:fe91:2939:4032:77cf) (Ping timeout: 268 seconds)
[23:43:11] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:43:46] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:880d:65a8:d656:32cc) (Remote host closed the connection)
[23:45:06] <bionade24> Is the * format specifier only for formatting or does it have a general meaning? Manpage doesn't help me understanding it much.
[23:47:53] *** u0_a391 is now known as Kit
[23:48:06] <pragma-> ,c11 7.21.6.2p3
[23:48:08] <candide> http://www.iso-9899.info/n1570.html#7.21.6.2p3 [The fscanf function] The format shall be a multibyte character sequence, beginning and ending in its initial shift state. The format is composed of zero or more directives: one or more white-space characters, an ordinary multibyte character (neither % nor a white-space character), or a conversion specification. Each conversion specification is introduced by ... <truncated; https://0x0.st/-h10.txt>
[23:48:38] *** Quits: nofx (~i.am@189.58.156.81.dynamic.adsl.gvt.net.br) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:49:24] *** NotApplicable is now known as Kit-ten
[23:49:52] <pragma-> Actually, I have no idea if you're talking about scanf of printf.
[23:49:57] <pragma-> or
[23:50:15] <pragma-> ,c11 7.21.6.1p4
[23:50:16] <candide> http://www.iso-9899.info/n1570.html#7.21.6.1p4 [The fprintf function] Each conversion specification is introduced by the character %. After the %, the following appear in sequence: -- Zero or more flags (in any order) that modify the meaning of the conversion specification. -- An optional minimum field width. If the converted value has fewer characters than the field width, it is padded with spaces (by de... <truncated; https://0x0.st/-h1G.txt>
[23:50:32] <bionade24> pragma-: I was talking about printf. But I'm intrested into scanf, too, if the meanings differ
[23:53:55] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[23:56:04] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:57:49] *** Quits: Akuli (~Akuli@82-203-160-219.bb.dnainternet.fi) (Quit: Akuli)
[23:58:29] *** Joins: Akuli (~Akuli@82-203-160-219.bb.dnainternet.fi)
[23:58:33] <floatcomplex> ,scanf
[23:58:34] <candide> scanf is a function that can be unsafe and unproductive - "It's nearly impossible to do decent error recovery with scanf; usually it's far easier to read entire lines (with fgets or the like), then interpret them, either using sscanf or some other techniques." - See http://www.eskimo.com/~scs/C-faq/q12.20.html
