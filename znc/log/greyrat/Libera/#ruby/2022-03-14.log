[00:01:33] <nakilon> it's in
[00:05:06] *** Joins: John_Ivan_ (~John_Ivan@user/john-ivan/x-1515935)
[00:09:21] *** Quits: John_Ivan (~John_Ivan@user/john-ivan/x-1515935) (Ping timeout: 252 seconds)
[00:16:52] *** Joins: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[00:19:50] <havenwood> John_Ivan_: Logger in the stdlib.
[00:20:03] <John_Ivan_> thakns
[00:24:07] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:29:54] *** Quits: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[00:30:16] *** Joins: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu)
[00:32:29] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:32:51] *** Quits: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[00:33:16] *** Joins: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu)
[00:33:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:42:23] *** Quits: libsys (~libsys@186.105.157.179) (Ping timeout: 256 seconds)
[00:42:36] *** Joins: libsys (~libsys@186.105.148.117)
[01:28:37] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.132)
[01:41:58] *** Joins: John_Ivan__ (~John_Ivan@user/john-ivan/x-1515935)
[01:43:51] *** Quits: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu) (Quit: Leaving)
[01:46:38] *** Quits: John_Ivan_ (~John_Ivan@user/john-ivan/x-1515935) (Ping timeout: 272 seconds)
[01:51:54] *** Quits: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Read error: Connection reset by peer)
[01:51:59] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[02:01:12] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Ping timeout: 272 seconds)
[02:06:40] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.133)
[02:11:05] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:27:10] *** Joins: vit (~vit@chello085216193138.chello.sk)
[02:27:34] *** vit is now known as Guest8508
[02:28:29] *** Quits: Guest8508 (~vit@chello085216193138.chello.sk) (Client Quit)
[02:28:48] *** Joins: vit (~vit@chello085216193138.chello.sk)
[02:29:12] *** vit is now known as Guest7375
[02:34:53] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[02:39:17] *** Joins: eddof13 (~eddof13@192.154.196.148)
[02:40:38] *** Guest7375 is now known as freeworld
[02:42:00] *** Quits: eddof13 (~eddof13@192.154.196.148) (Client Quit)
[02:42:17] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Ping timeout: 240 seconds)
[02:42:46] *** freeworld is now known as Guest7375
[02:52:58] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:59:43] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[03:30:44] *** Joins: TCZ (~tcz@91.150.178.124)
[03:41:43] *** Joins: constxd_ (~brad@142.134.78.128)
[03:41:47] <constxd_> hey kings
[03:45:00] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 240 seconds)
[03:54:06] <constxd_> what's wrong with my program
[03:54:08] <constxd_> http://paste.pr0.tips/an
[03:54:27] <constxd_> why isn't xs in scope
[03:55:57] *** Quits: Guest7375 (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[04:16:32] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:20:37] *** Joins: runlab (~runlab@176-22-28-171-dynamic.dk.customer.tdc.net)
[04:23:12] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.133) (Ping timeout: 250 seconds)
[04:46:23] *** Joins: axisys (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com)
[04:47:40] *** Parts: axisys (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com) ()
[04:59:40] <mooff> constxd_: def/class/module create a new local variable scope
[05:00:44] <mooff> :: a = 'a'; def foo() local_variables end; foo
[05:00:44] <ruby-eval> => []
[05:01:24] <ox1eef> :: a = 1; class Foo; a; end
[05:01:25] <ruby-eval> ERROR: undefined local variable or method `a' for Foo:Class
[05:01:25] <ruby-eval> (eval):1:in `<class:Foo>'
[05:01:43] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[05:02:18] <ox1eef> :: a = 1; Foo = Class.new { a }
[05:02:18] <ruby-eval> (eval):1: warning: already initialized constant Foo
[05:02:18] <ruby-eval> (eval):1: warning: previous definition of Foo was here
[05:02:19] <ruby-eval> => Foo
[05:02:46] <ox1eef> mooff: can i clear my session, is that scoped to user or are we all sharing the same memory space
[05:03:03] <mooff> ::!
[05:03:03] <ruby-eval> [Terminated]
[05:03:11] <mooff> we share it but it can be reset like that ^
[05:03:18] <ox1eef> cool, nice
[05:04:45] <gr33n7007h> constxd_: also, a lambda/proc needs to be called using; f.call/f.()/f[]
[05:05:16] *** Joins: ur5us__ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[05:05:36] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Read error: Connection reset by peer)
[05:14:12] <mooff> https://dpaste.org/Mv1E/raw
[06:03:26] *** Joins: jneedham (~jneedham@2600:1700:2b81:8890:697b:58c6:4b8f:c528)
[06:11:23] *** Quits: jneedham (~jneedham@2600:1700:2b81:8890:697b:58c6:4b8f:c528) (Changing host)
[06:11:23] *** Joins: jneedham (~jneedham@user/jneedham)
[06:37:49] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[06:49:29] *** Joins: eddof13 (~eddof13@192.154.196.148)
[06:49:39] *** Quits: eddof13 (~eddof13@192.154.196.148) (Client Quit)
[06:55:06] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[07:02:15] *** Quits: wand (~user@gateway/tor-sasl/wand) (Ping timeout: 240 seconds)
[07:09:53] *** Quits: jneedham (~jneedham@user/jneedham) (Quit: Leaving...)
[07:11:58] *** Quits: ur5us__ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Remote host closed the connection)
[07:13:59] *** Joins: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[07:14:14] *** Joins: jneedham (~jneedham@user/jneedham)
[07:19:54] *** Joins: wand (~user@gateway/tor-sasl/wand)
[07:35:00] *** Quits: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[07:35:42] *** Quits: jneedham (~jneedham@user/jneedham) (Remote host closed the connection)
[07:50:41] *** Quits: runlab (~runlab@176-22-28-171-dynamic.dk.customer.tdc.net) (Remote host closed the connection)
[07:50:50] *** Joins: bluedust (~bluedust@37.120.198.151)
[08:38:30] *** Joins: Synthead (~Synthead@50.35.186.220)
[08:38:46] <Synthead> hey any thoughts on this? https://old.reddit.com/r/rails/comments/tdkkuw/stylesheet_link_tag_returns_compiled_asset_path/
[08:56:32] *** Joins: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net)
[09:00:21] *** Quits: victori (~victori@cpe-76-89-139-69.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[09:02:34] *** Quits: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net) (Quit: leaving)
[09:11:41] *** Quits: duds- (~duds-@user/duds) (Quit: Leaving.)
[09:20:52] *** Joins: duds- (~duds-@user/duds)
[09:46:15] *** Joins: SteveR (~SteveR@2600:6000:ff7e:cdef::1f4)
[09:49:53] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[09:53:02] *** Quits: bluedust (~bluedust@37.120.198.151) (Ping timeout: 272 seconds)
[10:01:40] <constxd_> mooff: ok i fixed it http://paste.pr0.tips/Ns
[10:02:06] <constxd_> but why does the first thread finish before the second thread starts
[10:47:44] <Synthead> constxd_: probably because it's just very fast :)
[10:47:51] <Synthead> you should be using thread-safe vars, though
[10:47:52] <Synthead> http://ruby-concurrency.github.io/concurrent-ruby/1.1.9/Concurrent/TVar.html
[10:48:15] <Synthead> I highly recommend reading up on concurrent-ruby
[10:57:48] *** Joins: Guest7375 (~vit@chello085216193138.chello.sk)
[11:00:37] *** Joins: Rounin (~david@84.212.130.215)
[11:08:33] *** Quits: SteveR (~SteveR@2600:6000:ff7e:cdef::1f4) (Ping timeout: 256 seconds)
[11:12:38] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[11:32:34] *** Quits: Synthead (~Synthead@50.35.186.220) (Quit: Leaving)
[11:36:14] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[11:48:58] *** Joins: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[11:58:37] <skandal> Hello.
[11:59:05] <skandal> How i can extend erb file  with base.erb ?
[12:07:47] *** Quits: duds- (~duds-@user/duds) (Remote host closed the connection)
[12:10:44] *** Joins: duds- (~duds-@user/duds)
[12:12:43] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:13:09] *** Quits: Furai (~Furai@furai.pl) (Remote host closed the connection)
[12:13:35] *** Joins: Furai (~Furai@furai.pl)
[12:30:10] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[12:31:29] *** Joins: justAstache (~justache@user/justache)
[12:35:00] *** Quits: constxd_ (~brad@142.134.78.128) (Ping timeout: 240 seconds)
[12:35:27] *** Quits: jhass (znc@about/ruby/jhass) (Ping timeout: 250 seconds)
[12:53:04] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:53:40] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[12:54:00] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Client Quit)
[12:55:36] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-554a-38a2-90fe-9029.ip6.gigabit.dk) (Ping timeout: 268 seconds)
[12:56:40] *** Joins: jhass (znc@about/ruby/jhass)
[13:06:49] *** Quits: roadie (~user@2a02:8108:5a40:1d87:c9a7:57e1:86d:e28b) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[13:13:47] *** Joins: fercell (~ferr@185.65.50.39)
[13:15:00] *** Quits: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[13:28:01] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[13:29:31] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Client Quit)
[13:29:51] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[13:30:19] *** dionysus69 is now known as help
[13:31:11] *** help is now known as dionysus69
[13:52:24] *** Joins: sylario (uid115390@id-115390.tinside.irccloud.com)
[13:56:57] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-d8d0-f6a2-b1f5-ecd8.ip6.gigabit.dk)
[14:04:18] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[14:04:49] *** Joins: wand (~user@gateway/tor-sasl/wand)
[14:50:49] *** Joins: infinityfye (~infinityf@156.212.11.182)
[14:58:42] *** Quits: mahlon_ (~mahlon@martini.nu) (Ping timeout: 252 seconds)
[14:58:57] *** Quits: ged (~ged@deveiate.org) (Ping timeout: 256 seconds)
[15:17:11] *** Joins: constxd (~brad@142.134.78.128)
[15:21:58] *** Joins: bluedust (~bluedust@103.160.194.139)
[15:28:05] *** Joins: unyu (~pyon@user/pyon)
[15:30:32] *** Joins: fandre1986 (~fandre198@78.10.85.96)
[15:39:26] *** Joins: bluedust_ (~bluedust@117.217.158.59)
[15:42:26] *** Quits: bluedust (~bluedust@103.160.194.139) (Ping timeout: 245 seconds)
[15:43:54] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[15:48:25] *** Joins: TCZ (~tcz@91.150.178.124)
[15:53:01] *** Quits: bluedust_ (~bluedust@117.217.158.59) ()
[15:57:46] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[16:06:03] <constxd> kings
[16:06:53] <constxd> can anyone explain to me why the first thread finishes running before the second one starts? http://paste.pr0.tips/Ns
[16:07:19] <constxd> sorry if someone answered earlier i fell asleep any my laptop died so i couldn't check the channel history
[16:10:08] *** Joins: TCZ (~tcz@91.150.178.124)
[16:12:42] <jhass[m]> constxd: Because your function doesn't do any IO or otherwise blocking operation handled outside the RubyVM. MRI (the main ruby implementation) has a global lock around executing Ruby code. In Ruby 3 this was lessened somewhat by the introduction of Ractors which you could use instead of threads but which impose limits on data sharing between them
[16:13:23] <constxd> yeah but even with a GIL can't you interleave execution?
[16:14:15] <jhass[m]> Only if there was a reason to release the GIL, which doesn't happen until there's a blocking operation that causes a release
[16:15:06] <jhass[m]> This channel is logged at https://libera.irclog.whitequark.org/ruby/ btw, and contains some queens among the kings I hope :D 
[16:15:45] <constxd> ok so
[16:16:17] <ox1eef> that code is not gonna be thread safe
[16:17:57] <constxd> how
[16:18:19] <ox1eef> because of the shared state you're writing to concurrently
[16:18:39] <constxd> it's protected by the GIL though
[16:19:05] <ox1eef> the gil is implementation specific, and afair it does not save you from thread safety issues like that.
[16:19:43] <constxd> cringe
[16:20:01] <constxd> first they rob u of true parallelism with the gil then they tell u u can't even rely on it?
[16:20:32] <ox1eef> if you want that there's other ruby impls without it, and there's Process#fork too
[16:20:42] <ox1eef> sorry Kernel#fork
[16:21:37] <constxd> is it possible to actually trigger undefined behavior in MRI using threads in ruby?
[16:22:01] <constxd> like actual unsafe code not just incorrect code
[16:22:03] <ox1eef> i dont think so, that sounds like a C worry - not a ruby one.
[16:22:29] <ox1eef> you can still have race conditions though
[16:23:20] <constxd> is that why the GIL exists
[16:23:29] <constxd> just to make sure nothing is truly unsafe
[16:24:10] <ox1eef> as far as i understood, the GIL makes life easier in C and C extensions.
[16:24:19] <ox1eef> it's an implementation detail.
[16:24:23] <ox1eef> jruby for example doesnt have it.
[16:24:39] <constxd> my language has no GIL but a consequence of that is that you can easily make the runtime segfault by writing incorrect multithreaded code so it shifts the burden to the user
[16:25:38] <ox1eef> cool
[16:25:39] <constxd> if only jvm wasn't so big and heavy jruby sounds pretty sick
[16:25:58] <ox1eef> personally not my thing. i hate the jvm.
[16:26:32] <constxd> given the sheer amount of ruby code out there, even at large companies, i'm surprised nobody has built a new ruby vm from the ground up
[16:26:58] <ox1eef> it's a huge effort, there have been attemts, some abandoned, some not
[16:26:58] <constxd> imagine the amount of engineering power that has gone into v8 being put into ruby
[16:28:11] <ox1eef> rubinius was really cool for a time but more or less dead now, or at least diverged into something else entirely - not even strictly ruby anymore.
[16:29:36] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[16:39:18] *** Joins: roadie (~user@2a02:8108:5a40:1d87:c9a7:57e1:86d:e28b)
[16:41:26] <mooff> if JRuby has no GIL, is its Array, Hash, Object etc thread safe?
[16:46:47] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[16:47:17] <ox1eef> i don't believe so. i think concurrent_ruby or some other lib providing thread-safe data structures is recommended. that may have changed, i dont follow jruby closely.
[16:50:04] <ox1eef> i think it's a stroke of fate that i dont find jruby useful. i'm a fan of fork, and the JVM does not support it. that and other differences with MRI drove me away.
[16:55:18] <constxd> ah yeah that is very very cringe
[16:56:24] <constxd> multiple processes with good IPC is nice way to solve a lot of problems
[16:56:34] <ox1eef> yeah i love that mode of development
[16:56:50] <ox1eef> or style, i guess
[17:00:07] <ox1eef> still though, jruby deserves credit for those in the java and jvm world, you can interface with jvm pretty well and have all the tooling & libs that come with it.
[17:02:20] *** Quits: roadie (~user@2a02:8108:5a40:1d87:c9a7:57e1:86d:e28b) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[17:08:39] <mooff> Ruby on Spring Boot 😎
[17:12:03] <ox1eef> i know of Spring as a java web framework, what is Spring Boot?
[17:19:38] <jhass[m]> Actor model (and thus Ractors, basically) is pretty much the multi process + IPC model without the multi-process overhead
[17:19:56] <mooff> ox1eef: some new thing to make it less awkward to deploy and use
[17:21:00] <constxd> jhass[m]: yes which makes it a good alternative to fork() but a bad alternative to proper threads
[17:21:07] <ox1eef> i was reading about spring, it does not seem to strictly be a web framework but a collection of things, one of which can be used for the web?
[17:21:55] <ox1eef> jhass[m]: good to know, but when you have copy-on-write, is the overhead that much?
[17:22:08] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[17:22:41] <mooff> if you have somewhat proper threads, but no fork, is the downside that much? :)
[17:22:56] <jhass[m]> depends on your usecase (and OS, somewhat) always. Certainly can spam a lot more actors than processes
[17:23:28] <constxd> what can you send between Ractors
[17:23:31] <jhass[m]> Also consider Kernel managed swapping vs application (runtime) managed if you'd built your actor implementation on top of coroutines
[17:23:36] <ox1eef> mooff: i guess it depends, the unix API is what i enjoy to use. i havent checked out actors though. i will look into that.
[17:23:53] <jhass[m]> Haven't really looked at Ractors yet, but I thought each runs in its own thread?
[17:24:12] <jhass[m]> so they're basically full threads sans shared state, I think?
[17:24:24] <ox1eef> thats my understanding, i also havent looked into them deeply.
[17:25:13] <jhass[m]> so I'd expect you can send anything, Ruby just tracks which object is owned by what ractor or something like that, I would guess
[17:26:14] <jhass[m]> https://rubyapi.org/3.1/o/ractor#method-c-make_shareable looks like you can even share immutable things
[17:26:14] <mooff> i wish enabling hostname + peer verification was easier with OpenSSL in Ruby
[17:26:22] <ox1eef> thats a limitation in the IPC model, at least if you want to send objects between processes. at best, you can send what Marshal can serialize.
[17:26:59] <mooff> i hoped to avoid this library having anything to do with dialing - you just give it an IO object as its socket
[17:27:28] <mooff> that's neat for plain connections, but SSL with verification takes four or five lines that are hard to discover
[17:27:32] <ox1eef> mooff: i guess it is like curses, a one-to-one mapping of the C API?
[17:29:01] <jhass[m]> > When an unshareable object is sent, it can be either copied or moved. 
[17:30:01] <mooff> make that ~7 lines: https://dpaste.org/TxMD
[17:30:59] <ox1eef> doesn't look too bad tbh
[17:31:03] <mooff> ox1eef: you have to make a context, make an X509 store, ask the X509 store to set its paths to the system defaults, set the store as the store for the context, *then* make a socket with that context
[17:31:31] <ox1eef> good to know :)
[17:31:38] <adam12> morning
[17:31:45] <mooff> i think i left out telling the context what hostname it should verify, and therefore it may succeed w/o verifying it, silently
[17:31:46] <ox1eef> gmorning
[17:32:06] <ox1eef> mooff: ah thats definitely bad.
[17:32:16] <mooff> ox1eef: it's too much to ask someone to do in bot scripts!
[17:32:44] <ox1eef> i agree, but theyre not at the socket level are they?
[17:33:03] <mooff> i'd gotten away with sock = OpenSSL::SSL::SSLSocket.new(Socket.tcp(host, port)).tap(&:connect) for brevity, but that does no verification
[17:33:17] <mooff> i wanted 'iirc' not to be responsible for dialing
[17:33:53] <mooff> morning, adam12 
[17:33:59] <adam12> how goes it today
[17:34:30] <mooff> just keep swimming, just keep swimming..
[17:36:24] <adam12> heh
[17:50:28] <mooff> https://dpaste.org/Wtzq <-- this is required for hostname + peer verification
[17:51:00] <mooff> if any of the three parts marked ‼️ are omitted, it will succeed silently w/o verifying
[17:55:39] <mooff> something like SSL shouldn't be hard to get right for the typical case
[18:06:11] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:12:05] *** Joins: Guest53 (~Guest53@85.31.204.120)
[18:12:27] *** Quits: Guest53 (~Guest53@85.31.204.120) (Client Quit)
[18:13:40] *** Quits: fandre1986 (~fandre198@78.10.85.96) (Quit: Connection closed)
[18:26:48] *** Joins: fredlinhares (~fredlinha@201.17.158.14)
[18:42:12] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 240 seconds)
[18:43:12] <adam12> mooff: I agree. Not a very nice sharp edge.
[18:44:02] *** Quits: gigamo (~gigamo@user/gigamo) (Ping timeout: 240 seconds)
[18:46:17] *** Joins: gigamo (~gigamo@user/gigamo)
[18:48:55] *** Joins: bit4bit (~bit4bit@191.106.184.19)
[18:54:08] <ox1eef> i agree, 3
[19:12:13] *** Quits: g_sg (c415a3cd12@2604:bf00:561:2000::15e) (Remote host closed the connection)
[19:12:13] *** Quits: matta (2cdf936e70@2604:bf00:561:2000::3a0) (Remote host closed the connection)
[19:12:13] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (Write error: Broken pipe)
[19:12:13] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (Remote host closed the connection)
[19:12:13] *** Quits: graemefawcett (55322ea766@2604:bf00:561:2000::2ab) (Remote host closed the connection)
[19:12:13] *** Quits: srushe (fa1e6d5062@2604:bf00:561:2000::ad) (Remote host closed the connection)
[19:12:13] *** Quits: Bounga (88434f6916@2604:bf00:561:2000::393) (Remote host closed the connection)
[19:12:23] *** Joins: bit4bit_ (~bit4bit@191.106.184.19)
[19:12:39] *** Joins: graemefawcett (55322ea766@2604:bf00:561:2000::2ab)
[19:12:39] *** Quits: fredlinhares (~fredlinha@201.17.158.14) (Read error: Connection reset by peer)
[19:12:40] *** Joins: Bounga (88434f6916@2604:bf00:561:2000::393)
[19:12:48] *** Joins: hwrd (aa272caead@2604:bf00:561:2000::137)
[19:12:48] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[19:12:48] *** Joins: g_sg (c415a3cd12@2604:bf00:561:2000::15e)
[19:12:56] *** Joins: matta (2cdf936e70@2604:bf00:561:2000::3a0)
[19:13:03] *** Joins: srushe (fa1e6d5062@2604:bf00:561:2000::ad)
[19:13:07] *** Joins: fredlinhares (~fredlinha@201.17.158.14)
[19:16:12] *** Quits: bit4bit (~bit4bit@191.106.184.19) (Ping timeout: 240 seconds)
[19:19:20] *** Joins: mahlon (~mahlon@martini.nu)
[19:30:56] *** Quits: bit4bit_ (~bit4bit@191.106.184.19) (Read error: Connection reset by peer)
[19:41:59] *** Quits: fredlinhares (~fredlinha@201.17.158.14) (Read error: Connection reset by peer)
[19:42:26] *** Joins: fredlinhares (~fredlinha@201.17.158.14)
[19:44:56] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[19:45:24] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[19:48:03] *** Quits: fredlinhares (~fredlinha@201.17.158.14) (Read error: Connection reset by peer)
[19:53:44] *** Joins: fredlinhares (~fredlinha@201.17.158.14)
[20:17:23] *** Joins: gproto23_ (~gproto23@user/gproto23)
[20:19:54] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[20:41:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:47:02] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:47:03] *** Quits: fredlinhares (~fredlinha@201.17.158.14) (Read error: Connection reset by peer)
[20:49:33] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Remote host closed the connection)
[20:49:51] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[20:52:42] *** Joins: fredlinhares (~fredlinha@201.17.158.14)
[20:52:52] *** Joins: RougeR (~rougex250@user/rouger)
[21:00:35] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[21:26:51] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[21:48:05] *** Joins: reset (~reset@user/reset)
[21:48:05] *** Quits: fredlinhares (~fredlinha@201.17.158.14) (Read error: Connection reset by peer)
[21:54:06] *** Joins: fredlinhares (~fredlinha@201.17.158.14)
[22:00:25] *** Joins: hololeap (~hololeap@user/hololeap)
[22:02:30] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:07:37] *** Quits: fredlinhares (~fredlinha@201.17.158.14) (Read error: Connection reset by peer)
[22:09:16] *** Joins: Tasi (~Tasi@20014C4C220C8F0075294762935D112C.catv.pool.telekom.hu)
[22:13:26] *** Joins: fredlinhares (~fredlinha@201.17.158.14)
[22:17:49] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Ping timeout: 240 seconds)
[22:21:44] *** Joins: danjo07 (~danjo@2001:a61:bbd:5a01:4df5:4f28:3416:9e59)
[22:23:56] *** Quits: danjo0 (~danjo@2001:a61:3a86:1501:4e67:74e8:f49b:59d9) (Ping timeout: 250 seconds)
[22:23:56] *** danjo07 is now known as danjo0
[22:37:19] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:41:11] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[22:42:25] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[22:46:12] *** Quits: fredlinhares (~fredlinha@201.17.158.14) (Quit: WeeChat 3.4)
[23:31:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:31:26] *** Quits: gproto23_ (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[23:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:35:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:36:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:38:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:42:19] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Read error: Connection reset by peer)
[23:53:12] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Ping timeout: 250 seconds)
[23:54:42] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:58:01] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[23:59:19] *** Joins: ur5us (~ur5us@2406:e002:6845:dc01:b921:6822:fa0e:e017)
