[00:00:39] <dTal> well the devil is in the detail of "twiddle the bits"
[00:03:11] <^[> Generally just shift, mask, repeat.
[00:03:43] <^[> Hopefully the bits are already in the right order, and you can just stuff them all into a UInt64.
[00:20:14] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:20:47] *** Joins: kmh (~kmh@2a00:6020:5004:6800:11b9:b8b:ca08:bfc9)
[02:26:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[03:10:57] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[03:55:30] <dTal> so basically, program it C style
[04:34:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[04:38:59] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[05:42:06] *** Joins: notzmv (~zmv@user/notzmv)
[05:42:16] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[07:19:31] <nagefire> If you're going to be doing work with bits directly, you would be better off programming directly in C
[07:20:08] <nagefire> and using `ccall`
[07:50:12] <^[> nagefire: Is there something wrong with the bitwise operators in Julia?
[07:50:46] <nagefire> Not at all
[07:51:37] <nagefire> I consider Julia a "high-level language," and working with bits is not very high-level
[07:51:48] <nagefire> It's a personal preference on writing clean code
[07:53:43] <^[> Seems cleaner to do a few shifts in Julia than to involve a C compiler. :)
[08:07:44] <nagefire> That's probably true, it's just not my preferred way to do things
[14:15:06] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[16:44:21] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:39:15] *** Joins: wrycode (~wrycode@168.235.110.39)
[18:15:19] <dTal> I thought the whole point of Julia was to not do that
[18:15:30] <dTal> "solving the 2 language problem" etc
[20:09:50] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[20:39:41] *** Quits: ermo (~ermo@user/ermo) (Quit: ZNC 1.8.2 - https://znc.in)
[20:42:50] *** Joins: ermo (~ermo@user/ermo)
[20:51:38] <nagefire> I'm not sure that Julia will ever be free from Fortran linear algebra libraries
[20:53:35] <nagefire> And not much effort has been put towards providing a suitable replacement for sympy
[21:31:24] <mikko> wasn't there some talk about starting work to replace some of those linear algebra libraries with pure julia implementations during last juliacon?
[21:31:57] <nagefire> Yeah, so far there are two packages that are coming along, IterativeSolvers and ArnoldiMethods
[21:33:16] <nagefire> But ArnoldiMethods has been in development for a while and hasn't seen a ton of progress
[21:33:25] <mikko> in any case i wouldnt write any new code in c, even if interacting with old c is occasionally necessary
[21:35:37] <nagefire> Words to live by
[23:13:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[23:16:10] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[23:40:42] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
