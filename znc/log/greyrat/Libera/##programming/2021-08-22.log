[00:02:10] *** Quits: elnavigator (~elnavigat@105.196.201.223) (Ping timeout: 250 seconds)
[00:02:43] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[00:04:22] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Ping timeout: 252 seconds)
[00:05:29] *** Quits: medard (~sinhue@stip-static-55.213-81-207.telecom.sk) (Ping timeout: 248 seconds)
[00:05:39] <rxndxs> Stefan26: i don't imagine anyone would want to do that, if someone want's some assembly, they would probably use inline assembly or just write it in some file.s
[00:06:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:07:48] *** Quits: snake (~snake@user/snake) (Ping timeout: 250 seconds)
[00:08:03] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:09:33] *** Quits: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com) (Quit: WeeChat 3.2)
[00:09:50] <bjs> Stefan26: you wouldn't ever edit the thing the compiler gave you,  that'd almost certainly be impossible
[00:10:24] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 250 seconds)
[00:10:29] *** Joins: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com)
[00:10:57] <bjs> as the compiled output will be a block of machine code with a bunch of fixed offsets and magic numbers in it
[00:11:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:13:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:13:46] <GeDaMo> You can get the compiler to generate asm then edit it before assembling
[00:14:25] <mawk> it's not that impossible to edit, the offsets aren't fixed in before the linking
[00:14:32] *** Lord_of_Life_ is now known as Lord_of_Life
[00:14:37] <mawk> you have unfilled relocations so you're allowed to even move stuff
[00:14:49] <mawk> not inside the function itself though
[00:15:00] <mawk> you'd have to change yourself the stack offset and so on if you do that
[00:15:23] <mawk> and you have to respect the calling convention
[00:15:59] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[00:16:32] <mawk> if you want to tweak compilation output you can just ask gcc, Stefan26 
[00:16:47] <mawk> you have a bunch of attributes to specify which section you want, you have the __asm__ directive, and so on
[00:17:01] <mawk> you can do a lot of stuff without having to modify ugly compiler assembly
[00:17:20] <mawk> and anyway if you modify the compiler assembly you invariably will mess up the fixed offsets it uses for debugging, so you can forget debugging
[00:18:43] *** Joins: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901)
[00:18:49] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 248 seconds)
[00:20:00] *** Joins: elnavigator (~elnavigat@105.196.201.223)
[00:20:06] *** Joins: cation (cation@user/cation)
[00:20:53] <Donitz> hmm
[00:21:02] <Donitz> you can compare a floating point literal right?
[00:21:06] <Donitz> a = 0.5;
[00:21:08] <Donitz> a === 0.5;
[00:21:17] <mawk> you can, but that doesn't mean you should
[00:21:21] <mawk> and actually you shouldn't
[00:21:22] <Donitz> I think it should
[00:21:37] <mawk> no, you should compare up to a certain precision
[00:21:37] <Donitz> what do you think it means
[00:21:47] <mawk> instead of a == b you do fabs(a - b) <= 1e-6 for instance
[00:21:51] <Donitz> not quite
[00:21:54] <Donitz> I am comparing the literal
[00:21:55] <Donitz> with itself
[00:22:04] <mawk> that"s not what you said
[00:22:14] <mawk> but sure, you can do that and it will be true
[00:22:14] <Donitz> <Donitz> you can compare a floating point literal right?
[00:22:19] <Donitz> that's what I meant
[00:22:21] <mawk> you didn't say "with itself"
[00:24:44] *** Quits: kobalt (~rsonx@user/kobalt) (Quit: quit)
[00:27:35] <Lyn> is iPhone XS a good purchase if I want to test iOS apps?
[00:27:44] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 250 seconds)
[00:29:07] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[00:29:41] <mawk> there's a simulator Lyn 
[00:29:45] <mawk> do you really need a real phone?
[00:29:51] <mawk> unless you're testing the accelerometer or something like that
[00:30:08] <bjs> mawk: I don't mean offsets to like variables, I just mean it'll have fixed offsets for stack frames and branches and other crap like that
[00:30:27] <mawk> yes bjs 
[00:30:28] <bjs> that you'd have to manually update if you hand-edited and it gets very messy very quickly
[00:30:30] <mawk> for inside the function itself
[00:30:32] <mawk> yes
[00:30:35] <Lyn> not really sure :S I was told it's a good idea to test with a real phone to realize certain problems in actual use
[00:30:45] <mawk> I meant edit before linking also, after linking it gets real harder
[00:31:51] <bjs> mawk: after linking you may as well give up :D
[00:32:06] *** Joins: snake (~snake@user/snake)
[00:32:37] <mawk> yeah I wonder how binary hackers did before they had nice tools to do that for them
[00:32:52] <bjs> mawk: the programs were much smaller and the tools much dumber
[00:33:04] *** Quits: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901) (Read error: Connection reset by peer)
[00:34:46] <mawk> yeah
[00:35:44] *** Joins: independent_ (~independe@185.50.0.80)
[00:36:54] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (Quit: „Éê„Ç§„Éê„Ç§)
[00:37:34] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[00:38:32] *** Joins: brabrax (~brabrax@user/brabrax)
[00:39:42] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:39:43] <pyzozord> Lyn: you don't need to buy any apple device, you can rent macos machines online
[00:40:11] *** Joins: cthulchu (~Cthulchu@46.211.33.198)
[00:40:18] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 250 seconds)
[00:40:21] *** Quits: cthulchu (~Cthulchu@46.211.33.198) (Read error: Connection reset by peer)
[00:40:39] *** Joins: cthulchu (~Cthulchu@46.211.33.198)
[00:41:04] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[00:41:31] <Lyn> pyzozord: yeah, I was thinking of using Azure pipelines for building the app, but the testing aspect I'm still unsure of, maybe an emulator could be sufficient then
[00:42:04] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Quit: Leaving.)
[00:42:32] <pyzozord> Lyn: also check out https://www.browserstack.com/
[00:42:34] <bayaz> Title: Most Reliable App & Cross Browser Testing Platform 
[00:44:19] *** Joins: independent_ (~independe@185.50.0.80)
[00:44:31] *** Quits: elnavigator (~elnavigat@105.196.201.223) (Ping timeout: 252 seconds)
[00:44:38] *** Joins: CalimeroTeknik (~calimero@185.13.36.50)
[00:45:02] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[00:45:20] *** Joins: webnet4 (~0x100@32.211.211.39)
[00:45:27] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[00:46:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:48:29] *** Quits: independent_ (~independe@185.50.0.80) (Remote host closed the connection)
[00:48:47] *** Joins: independent_ (~independe@185.50.0.80)
[00:49:13] *** Joins: fran (~fran@181.228.138.133)
[00:49:15] <fran> h
[00:49:19] <fran> hi
[00:49:25] <webnet4> high
[00:51:03] <InPhase> highlyelongatedgreeting
[00:51:21] <deniska> Lyn: whether it's a good purchase depends on whether and how much you earn by developing iOS apps, and whether you'll use the phone for other purposes
[00:51:35] <deniska> to "play around" I'd certainly go with an older cheaper model
[00:52:05] <twomoon> hi deniska =)
[00:52:32] <deniska> hi
[00:53:06] <Lyn> I've never tried an iPhone, but I'm thinking it could be a good 2nd phone - the browserstack seems really interesting though, unlimited interactive app testing with real devices for 39$/mo (or 29$/mo with annual plan)
[00:53:35] <webnet4> iPhone is a nice prison
[00:54:07] <pyzozord> the browstack thing is not prefect, it's kind of laggy
[00:54:48] <pyzozord> but it has a cool pluggin you can install on your machine to resolve your local network, meaning it can load your localhost
[00:56:58] *** Joins: zaher (~zaher@37.48.150.72)
[00:57:18] <deniska> when I needed to test a website in safari-the-new-IE, I spun up a hackintosh install in a kvm VM :)
[00:58:17] *** Quits: zaher_ (~zaher@37.48.154.251) (Ping timeout: 248 seconds)
[01:00:54] <fran> most haskell compilers like GHC aren't really portable, right?
[01:01:07] <oldlaptop> define "really portable"
[01:01:25] <fran> i dont know a lot about haskell but
[01:01:54] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[01:02:02] <fran> if they use allocation in many important places and you cant really easly disable that they're not very portable
[01:02:05] <fran> i mean the runtime
[01:02:32] <fran> so in rust you can use no_std and avoid using the alloc module and you'll be able to write code without allocations
[01:02:51] <oldlaptop> It's going to be harder make work on some microcontroller than C, if that's what you mean, and it's not exactly the kind of thing that belongs in kernel space
[01:03:04] <oldlaptop> but neither is it one of these "all the world is windows/mac/linux" things
[01:07:11] *** Quits: nekobyte (~cat@user/nekobit) (Quit: cute!!!!)
[01:07:34] *** Joins: nekobyte (~cat@user/nekobit)
[01:08:59] <fran> i wonder if a "standalone" pure functional programming language would be worth creating
[01:09:17] <fran> a modern one
[01:09:42] <webnet4> what's the main benefit of functional programming
[01:10:17] <fran> hm, well, i'm not really a functional programming hardcore fan myself but i can tell you some of the usual arguments
[01:10:45] <fran> 1. pure functions have no side effects so its easier to see the data and control flow which makes bugs less common
[01:11:03] <fran> 2. it heavily encourages modularity
[01:11:15] <webnet4> you can have pure fuinctions without functional programming
[01:11:26] <bjs> webnet4: functional programming is a kind of declarative programming
[01:11:38] <bjs> some people like programming declaratively rather than imperatively
[01:11:44] <fran> functional programming languages are all about pure functions
[01:11:55] <webnet4> ONLY pure functions?
[01:11:56] <fran> so everything is pure there
[01:11:58] <webnet4> hmm
[01:12:42] <bjs> webnet4: functional programming is declarative programming + functions,  people like it because it's declarative and functions are powerful and let you do lots of things so it's general purpose
[01:12:49] <webnet4> yeah i can see that being beneficial for proving stuffs
[01:13:38] <fran> you usually never have significant impure functions in pure programming languages. impure things such as IO are wrapped to make pure-ish functions
[01:14:13] <fran> obviously if you consider showing text in the terminal screen as a side effect then its impure, but they're changed to make them as pure as possible
[01:16:44] <webnet4> its a side effect IMO if you are also reading text from the terminal screen
[01:16:56] <bjs> webnet4: I think the purity is a little over-stated here
[01:17:37] <bjs> webnet4: the real core parts are the declarative nature (you can have pure imperative functions) and the emphasis on *functions* as real first-class values
[01:19:43] <bjs> webnet4: and this gives you a place to work that is totally general-purpose just like the "normal" languages you may be used to (procedural and imperative and object-orientated ones);  it's not "better" necessarily but it's just a different way to approach the same set of problems. 
[01:20:16] <webnet4> https://alvinalexander.com/scala/fp-book/benefits-of-functional-programming/
[01:20:17] <bayaz> Title: Benefits of Functional Programming | alvinalexander.com 
[01:20:21] <webnet4> this site has a bunch of good points
[01:21:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[01:21:27] <webnet4> it may be better for certain projects
[01:21:44] *** Quits: fran (~fran@181.228.138.133) (Quit: Connection closed)
[01:21:49] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:22:22] <bjs> webnet4: there is a crazy fanaticism out there about pure computation and there are whole sites that just talk about "FP" but only ever talk about purity and some of them sometimes even forget to mention that functions are a thing :P
[01:24:06] <InPhase> webnet4: It glazes over the harms of functional programming that can also make it much harder to reason about.
[01:24:31] <webnet4> i need to do a comparison of various languages on the rosetta code
[01:24:40] <webnet4> they're all too new to me
[01:25:01] <InPhase> webnet4: While pretending there is no state in functional programming requiring reasoning, it ignores the fact that functional programming ends up passing and returning far more complicated state once programs become complicated, and then you have to be able to reason about, trace, and debug that.
[01:27:23] <bjs> webnet4: just note that a lot of comparisons of "functional programming" are really going to be talking about "pure functions" and you have to remember that you can write pure functions in non-FP languages and that FP languages can contain impure functions
[01:28:03] <InPhase> webnet4: This is why I have come to believe OOP is generally superior to pure FP.  (And why it has consequently become much much more popular.)  With pure imperative languages, you have complicated state to track.  With pure FP languages you have to pass and receive more complicated state, perhaps including functions of functions of functions and complicatedly wrapped data with layers of embedded 
[01:28:09] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 248 seconds)
[01:28:09] <InPhase> error or intended outputs.  With OOP you segment your state into pieces small enough to mentally process, and you adjust how much state and passing you need for a particular piece of each problem, or to match the structure of that problem.
[01:29:08] <InPhase> webnet4: OOP approaches allow FP mindsets where everything is pure and only what you pass in and out gets modified.  You can still do it.  But you can deviate from that when this would explode in complexity on you.
[01:30:21] <InPhase> webnet4: Also you can typically specify which situation you're in with const modifiers.
[01:31:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:31:33] <pulse> nice, i like oop
[01:31:45] <pulse> :-)
[01:32:47] <webnet4> it's an interesting way to write code,  the extra rules on immutable-or-less-mutable-at-least state might allow for different optimization tricks, or translating to other languages
[01:33:11] <bjs> webnet4: again functional programming is a much broader idea that just "make everything immutable"
[01:33:14] <webnet4> not that i have any experience in these individual fields,just a thought
[01:33:18] <InPhase> webnet4: The point about parallel programming is partially true.  Although you can architect those same advantages into an OOP program.  Rust has additional variable tracking that provides the same benefits.
[01:33:48] <pulse> to me OOP seems a lot like real world. you have objects, and you have things you can do to/with said objects. meanwhile FP looks like some kind of recursive fever dream
[01:34:15] <bjs> pulse: FP also looks like the real world,  but maybe which parts of the real world they each look like is different
[01:34:22] <bjs> and it depends how you view it
[01:34:34] <pulse> could be yes
[01:34:40] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 240 seconds)
[01:34:44] <pulse> if you look at the world mathematically FP is a natural fit
[01:34:54] <pulse> if you look at the world like an engineer, OOP might seem better though
[01:35:06] *** Joins: Samian (~Sami@2620:10d:c091:480::1:97d9)
[01:35:12] <InPhase> webnet4: When I do multithreaded C++, I simply don't share non-constant state across objects belonging to different threads.  Then the state segmentation of OOP automatically provides the same cleanness for multhreading that FP claims.
[01:36:46] <InPhase> webnet4: The "call stack" is really just one place to store state.
[01:37:46] <bjs> pulse: well it depends, you can look at the same thing from both an OOP and a FP perspective and perhaps both (or neither!) will be more natural
[01:38:04] <bjs> and of course within each there are many ways to represent the same thing
[01:38:19] <pulse> all i can tell you that a FP based game code is quite a weird idea
[01:38:20] <InPhase> webnet4: One of the downsides of forcing it into that model, is sometimes this introduces a massive overhead.  Logging is a side-effect.  If you want to introduce debug logging into your program, suddenly you have to add a logger to almost every call everywhere even though it has nothing to do with the code you're trying to write.
[01:38:26] *** Quits: Drek45 (~jrept371@102.129.152.109) (Ping timeout: 258 seconds)
[01:38:57] <InPhase> webnet4: Or, you know, return logging information even though that has nothing to do with the core business logic you're trying to implement.
[01:39:20] <InPhase> webnet4: This breaks abstraction.
[01:39:26] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[01:40:48] *** Joins: arcatech (~arcatech@user/arcatech)
[01:40:57] <InPhase> webnet4: Maybe you want to turn logging on and off, and not have much overhead if it's off.  Now you have to figure out how to adaptively change all the types of everything passed to somehow be configurable to bundle or not bundle this information.
[01:41:40] <webnet4> instead of logging just print the programs memory layout but make sure you have plenty of ink first
[01:41:57] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[01:43:04] *** Joins: moha (uid506645@id-506645.brockwell.irccloud.com)
[01:43:05] <webnet4> and your print function has abstracetd paper jam error handling
[01:45:38] *** Quits: brutusmcforce (mannu@wodanaz.se) (Quit: WeeChat 3.0)
[01:45:51] *** Joins: zwr (~zwr@191.47.94.157)
[01:47:21] *** Quits: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx) (Ping timeout: 248 seconds)
[01:47:42] <InPhase> webnet4: In summary, I like FP sometimes for some things.  There's an elegance to it.  But sometimes it's really hard to hammer in a screw, so I hope that highlights some of the other aspects of the issue.
[01:50:25] <webnet4> yeah thanks, i always see people chatting about FP and never bothered to ask what all the commotion was about. if i was dealing with heavy math code i would probably be all over it
[01:51:29] *** Joins: Drek45 (~jrept371@129.59.122.18)
[01:53:09] <bjs> webnet4: FP is used for a lot more than just math
[01:53:48] <webnet4> you're going to have a hard time convincing me
[01:53:57] <webnet4> without some code to look at
[01:54:04] <bjs> webnet4: take a look at pandoc then
[01:55:03] <bjs> definitely not "math" and is certainly the kind of place where people all agree that FP is well-suited (lots of parsing and pipelines and pretty-printing and all that stuff)
[01:58:26] *** Joins: elnavigator (~elnavigat@105.196.201.223)
[01:58:32] *** Joins: anovick (~anovick@igld-83-130-61-178.inter.net.il)
[01:58:43] *** Joins: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx)
[01:59:18] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[01:59:38] <bjs> webnet4: here for example https://github.com/jgm/pandoc/blob/master/src/Text/Pandoc/Readers/Markdown.hs#L305  it says that a markdown file has an (optional) title block, followed by some "blocks" then once it's parsed it all it reads just the markdown "notes" (idk what they are, presumably footnotes or something) and reports a warning if they're unreferenced (again idk what that means but you get the idea).
[01:59:39] <bayaz> Title: pandoc/Markdown.hs at master ¬∑ jgm/pandoc 
[02:00:14] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:2489:d8ec:6e6c:e38b) (Quit: Textual IRC Client: www.textualapp.com)
[02:00:21] <bjs> webnet4: it's very declarative (it describes the parser by saying *what* a markdown file is composed of) and when it does talk about other parts of the "state" it refers to only what it needs (in this case, the "notes" whatever they are)
[02:01:37] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:01:49] <bjs> (and you can look up to see that a parseBlocks is many "block"s, and each "block" is made of blank lines or some code block or etc, again instead of describing *how* to parse the file the FP way is to describe *what* the structure of the file is, using functions) 
[02:03:00] <webnet4> wow
[02:03:05] <bjs> webnet4: wow?
[02:03:07] <webnet4> this is quite dense
[02:03:10] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 252 seconds)
[02:03:37] <bjs> webnet4: well, any "real" fairly well-used large program in a programming language you don't understand will always feel dense :)
[02:06:26] *** Joins: Rounin (~david@84.212.130.215)
[02:07:10] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[02:07:23] *** Joins: webnet4 (~0x100@32.211.211.39)
[02:08:01] * webnet4 crawls back to his pascall-style lang
[02:08:10] <bjs> webnet4: okay well uhm
[02:08:23] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[02:08:49] <webnet4> this would take me months to figure out
[02:08:51] <bjs> webnet4: look at line 444 in that file, that starts `block ::`.  This is a parser for a Markdown "block".
[02:08:52] <webnet4> :(
[02:09:33] <bjs> webnet4: just notice how the description of the parser (just as it's written in FP) doesn't mention the input it's parsing at all.  Instead the parser just describes *what* a block is
[02:09:47] <bjs> that it's one of a choice of things
[02:11:52] *** cache is now known as cacheyourdreams
[02:11:52] <webnet4>  ok block is an instance of a markdownparser ?
[02:12:16] <bjs> webnet4: well not "instance", it *is* a MarkdownParser
[02:12:17] <webnet4> or its a switch
[02:12:21] <webnet4> case statement
[02:12:43] <bjs> webnet4: no there is no input to switch on here, do you see?
[02:13:23] <bjs> webnet4: this is -classic- FP, and this particular case is so common it even has a name "parser combinators"
[02:13:50] *** Joins: cthulchu_ (~Cthulchu@94.153.87.125)
[02:14:31] <bjs> webnet4: the trick is that a MarkdownParser object/value/whatever you want to call it is really a *function*  (hidden behind some other datatypes for sure here)
[02:15:10] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:15:16] <webnet4> i'm going to try to find a smaller example, theres so much going on here for me to figure out all at once
[02:15:59] <bjs> webnet4: sure but often people find smaller examples and it all looks silly so I really want to push this upfront:  this is a real utility that people actually use doing completely classic FP things
[02:16:55] *** Quits: cthulchu (~Cthulchu@46.211.33.198) (Ping timeout: 252 seconds)
[02:17:11] <bjs> webnet4: and the key thing is it's -not- just "oh it's like normal programming but just immutable" but actually it's just a very different approach.  Again look at that "block" definition and notice that the input/the actual markdown file/the string to parse just isn't mentioned anywhere in the definition of the parser.
[02:17:28] *** Quits: blahboybaz (~blahboyba@67-5-101-245.spok.qwest.net) (Ping timeout: 252 seconds)
[02:18:06] <Donitz> is it valid to call gain between 0-1 "volume"?
[02:18:20] <Donitz> the linear scale value
[02:18:31] <webnet4> no
[02:18:37] <webnet4> unless its just an on/off switch
[02:18:43] <Donitz> so audio elements are wrong
[02:18:52] <webnet4> 0.0 -> 1.0 you mean?
[02:19:45] <Donitz> https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createGain
[02:19:46] <bayaz> Title: BaseAudioContext.createGain() - Web APIs | MDN 
[02:19:51] <webnet4> bjs the block thing was confusing because there were like 8 other types of blocks in that file
[02:19:56] *** Joins: SmokenatorZ5 (~Smokenato@187.10.52.109)
[02:20:00] <webnet4> maybe not 8 but more than two
[02:20:34] <bjs> webnet4: line 444 https://github.com/jgm/pandoc/blob/master/src/Text/Pandoc/Readers/Markdown.hs#L444  it has the main "block" parser (for whatever markdown calls a block)
[02:20:39] <bayaz> Title: pandoc/Markdown.hs at master ¬∑ jgm/pandoc 
[02:21:40] *** Quits: SmokenatorZ (~Smokenato@187.10.52.109) (Ping timeout: 240 seconds)
[02:21:41] *** SmokenatorZ5 is now known as SmokenatorZ
[02:22:09] *** Quits: Drek45 (~jrept371@129.59.122.18) (Remote host closed the connection)
[02:22:21] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[02:23:18] <bjs> webnet4: notice how the code says a "block" is one of a "htmlBlock", or a "codeBlockFenced" or a "noteBlock"  etc. Each of those are other definitions earlier in the file and themselves are written the same way, and are themselves just functions.
[02:23:27] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[02:24:06] <bjs> webnet4: take a watch of https://www.youtube.com/watch?v=dDtZLm7HIJs&ab_channel=Computerphile  hopefully it'll give you a better "feel" for what that file is doing
[02:24:07] <bayaz> Title: Functional Parsing - Computerphile 
[02:25:19] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Client Quit)
[02:26:16] *** Quits: anovick (~anovick@igld-83-130-61-178.inter.net.il) (Ping timeout: 252 seconds)
[02:26:27] <webnet4> ok ok, so then the question becomes how does it know how to identify a given block
[02:26:46] <bjs> webnet4: what do you mean "identify"
[02:27:06] <webnet4> to know difference of htmlBlock vs rawTeXBlock
[02:28:11] <bjs> webnet4: well, the definition of htmlBlock describes what a HTML Block looks like and rawTexBlock describes what a TeX block looks like and then the function/parser that choice() returns will check to see which block type from the list the input matches
[02:28:31] *** Joins: audiocat (~audio@2603-8081-1801-3bb5-7dbd-69ed-c482-bcce.res6.spectrum.com)
[02:28:46] <bjs> (for parsers specifically you have questions about performance and ambiguity like you do in "imperative" parsers, so typically these choice operators are ordered, so it looks at the first one first etc)
[02:29:24] <webnet4> the (TagOpen _ attrs) <- lokAhead $ fst <$> htmlTag isBlockTag line?
[02:29:36] <bjs> webnet4: no, line 444
[02:29:42] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:30:17] <bjs> webnet4: line 444-472 *is* the parser for a block, and blocks it parses look like one of the many things in that big list of `choice`s
[02:32:08] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:32:32] <bjs> webnet4: to choose between two parsers, e.g. (`p <|> q`) you can think about making a new function that tries to run `p` and if it fails, runs `q`.
[02:32:58] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[02:33:35] <bjs> (and that's exactly what `choice` is doing, it's a function that given a list of parser functions makes a new function that just tries each of them in order)
[02:33:36] <webnet4> i'm going to watch this video, i'm too noob to make sense of this parser creation
[02:35:09] <bjs> webnet4: okay but I guess the point I wanted to get across was: (1) FP is just a different but equally general-purpose style of programming, that (2) is very declarative in nature (you say *what* a thing is rather than *how* to make it) with (3) using functions freely to do this (e.g. a parser is a function and you make bigger parsers by using functions to combine functions to make bigger functions) and (4) this extends to real-world examples
[02:35:15] *** Quits: kmh (~kmh@p200300df5f365c009493f11912ec5635.dip0.t-ipconnect.de) (Quit: Leaving)
[02:35:17] <webnet4> oooooh it's trying them all
[02:35:56] *** Quits: nekodesu (~bit@user/nekobit) (Quit: uninstall gentoo)
[02:35:58] <webnet4> that seems wrong until i saw the try block
[02:36:22] *** Joins: nekodesu (~bit@user/nekobit)
[02:36:48] <bjs> webnet4: that is typically how you do choice in a parser yeah, imperatively you'd have to write code to try each different option or to read the first char then call the right function.  But here you don't do that you just say "a block is just one of these other things"
[02:38:30] <bjs> webnet4: there's nothing particularly special about parsers here,  or really about purity.  It could be some fancy drawing package and the functions could send messages to the GPU to put things on the screen or something instead of doing some text processing
[02:38:56] <bjs> (although if in a impure world your choice operator has to be a little smarter ofc)
[02:39:09] <bjs> but then I'd say you always have to be a little smarter if you're in an impure world :)
[02:39:23] <webnet4> what happens if they all fail, does it use the last one "plain" ?
[02:39:51] <bjs> webnet4: well if they all fail it doesn't matter which it uses, since the whole thing will fail too then :)
[02:40:14] *** Joins: CaptainJ (~CaptainJ@user/captainj)
[02:40:22] <webnet4> ok that makes sense now thanks for explaining this
[02:40:22] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:40:52] <CaptainJ> For how long have you been using IRC?
[02:41:24] <webnet4> on and off over 20 years
[02:41:39] <bjs> webnet4: parsers are a great place for declarative programming. Even in our imperative worlds we write grammars using e.g. BNF (a declarative language) and then write horrible programs to try "turn" that grammar into a parser.  That's why FP works so well here
[02:41:52] <bjs> not because of the purity, but because of the declarative nature
[02:42:21] <CaptainJ> webnet4, most memorable world event that you witnessed unfolding through reports on irc, live?
[02:42:41] *** Quits: Akuli (~Akuli@82-203-162-147.bb.dnainternet.fi) (Quit: Leaving)
[02:42:44] <bjs> webnet4: you could do this in Prolog (and people have), but the trick here is to use *functions* to represent your parsers so you can write your combinators (e.g. your BNF operators) directly in your code
[02:45:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz‚Ä¶)
[02:45:44] *** Joins: Thedarkb (~Thedarkb@185.69.145.19)
[02:46:50] *** Quits: rany (~rany@user/rany) (Ping timeout: 250 seconds)
[02:50:39] <webnet4> i've seen too much captainJ it's all a blur
[02:51:09] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Remote host closed the connection)
[02:51:34] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[02:57:10] *** Quits: xff0x (~xff0x@2001:1a81:523e:7200:987e:5abc:19e1:66f6) (Ping timeout: 240 seconds)
[02:58:37] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:d099:ff1b:cb18:435e)
[02:59:40] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[02:59:49] *** Quits: elnavigator (~elnavigat@105.196.201.223) (Ping timeout: 252 seconds)
[03:01:42] *** Joins: elnavigator (~elnavigat@105.196.201.223)
[03:03:13] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:04:32] *** Joins: rany (~rany@user/rany)
[03:05:35] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[03:08:03] *** Joins: rany (~rany@user/rany)
[03:09:06] <beaky> are there frameworks for deep learning that are not in python like pytorch
[03:09:24] <beaky> like one in haskell that is more category theory oriented and not so stateful 
[03:09:44] <beaky> or one in rust 
[03:09:49] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[03:10:50] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[03:11:06] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 250 seconds)
[03:12:54] *** Quits: rany (~rany@user/rany) (Client Quit)
[03:15:17] *** Joins: rany (~rany@user/rany)
[03:16:30] *** Quits: nekodesu (~bit@user/nekobit) (Quit: uninstall gentoo)
[03:17:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:18:49] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Remote host closed the connection)
[03:19:09] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[03:19:57] *** Joins: xff0x (~xff0x@2001:1a81:5267:2d00:60:bdd1:fa4d:cbd0)
[03:20:27] *** Quits: jaysicks (~jaysicks@212-40-83-106.pool.digikabel.hu) (Remote host closed the connection)
[03:22:08] *** Joins: JanC_ (~janc@user/janc)
[03:24:10] *** Quits: JanC (~janc@user/janc) (Ping timeout: 240 seconds)
[03:24:40] *** Quits: Samian (~Sami@2620:10d:c091:480::1:97d9) (Ping timeout: 240 seconds)
[03:25:07] *** JanC_ is now known as JanC
[03:30:04] *** Quits: nekobyte (~cat@user/nekobit) (Ping timeout: 252 seconds)
[03:32:17] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 258 seconds)
[03:36:45] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:38:43] *** Auctus is now known as warlord_auctus
[03:38:50] *** Quits: cthulchu_ (~Cthulchu@94.153.87.125) (Ping timeout: 250 seconds)
[03:41:04] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[03:44:18] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:46:00] *** Joins: nekobyte (~cat@user/nekobit)
[03:46:10] *** Joins: nekodesu (~bit@user/nekobit)
[03:46:15] *** Quits: nekodesu (~bit@user/nekobit) (Client Quit)
[03:51:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[03:53:45] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Ping timeout: 248 seconds)
[03:56:28] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:56:31] *** Quits: mathAndRhetorics (~juliaEnv@ip-86-49-242-28.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[04:02:10] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[04:02:14] *** Joins: nekodesu (~bit@user/nekobit)
[04:03:37] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[04:03:49] *** Joins: zaher_ (~zaher@37.48.181.11)
[04:04:09] *** Joins: Crescendo (~Crescendo@user/crescendo)
[04:05:42] *** Quits: zaher (~zaher@37.48.150.72) (Ping timeout: 250 seconds)
[04:08:03] *** Quits: jacks2 (~bc8167eb@217.29.117.252) (Quit: http://www.okay.uz/)
[04:13:18] *** Quits: xff0x (~xff0x@2001:1a81:5267:2d00:60:bdd1:fa4d:cbd0) (Ping timeout: 258 seconds)
[04:15:31] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[04:16:10] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[04:16:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:16:37] *** Joins: flynn (~mcbloch@user/flynn)
[04:16:59] *** Joins: blahboybaz (~blahboyba@67-5-101-245.spok.qwest.net)
[04:21:26] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Quit: Konversation terminated!)
[04:23:37] *** Joins: yaboiburner (~yaboiburn@136.176.20.27)
[04:25:03] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[04:25:30] *** Joins: xff0x (~xff0x@2001:1a81:5267:2d00:3019:a525:5831:f042)
[04:27:45] *** Quits: Iryon (~Iryon@185-12-21-77.sigma.jaslo.pl) (Remote host closed the connection)
[04:28:10] <beaky> nice wonder how many minutes a day is consumed just waiting for enterprise-grade software to finish loading when every screen takes like half a minute to load https://www.fastcompany.com/90667790/the-real-reason-youre-not-more-productive-at-work-its-not-boredom-its-bad-ux
[04:28:12] <bayaz> Title: The real reason you‚Äôre not more productive at work? It‚Äôs not boredom‚Äîit‚Äôs bad UX 
[04:28:14] *** Quits: yaboiburner (~yaboiburn@136.176.20.27) (Ping timeout: 250 seconds)
[04:34:44] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[04:36:33] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[04:42:42] *** Quits: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx) (Ping timeout: 268 seconds)
[04:43:17] <edgar-rft> let's write software that loads faster the more you pay for it
[04:48:01] *** Joins: mathAndRhetorics (~juliaEnv@ip-86-49-242-28.net.upcbroadband.cz)
[04:53:02] <webnet4> edgar-rft like youtube?
[04:54:26] *** Joins: elnaviga1or (~elnavigat@105.196.190.191)
[04:54:54] <arahael> Finally got vaccinated! :D  First shot.
[04:55:58] <JanC> edgar-rft: you will remove features the more people pay?  :)
[04:56:28] *** Joins: Izem (~Izem@65.95.41.242)
[04:56:40] *** Quits: elnavigator (~elnavigat@105.196.201.223) (Ping timeout: 240 seconds)
[05:00:35] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[05:01:56] *** Quits: [R] (~rs@genoce.org) (Quit: No Ping reply in 180 seconds.)
[05:02:04] *** Joins: [R] (~rs@genoce.org)
[05:02:28] <edgar-rft> JanC: thank you, that's a brilliant idea!
[05:02:44] <Izem> Why didn't microsoft build their cloud/network stack on windows?
[05:02:57] <webnet4> they did
[05:03:12] <beaky> nice i like windows
[05:03:15] <Izem> I thought azure et al was linux based?
[05:03:20] <webnet4> citation?
[05:03:28] <Izem> I have none
[05:03:42] <webnet4> i could have sworn it was NT based or somethin
[05:03:46] <webnet4> but also no citation
[05:04:07] <webnet4> or hyperv
[05:04:41] <edgar-rft> let's sell some clouds to windows users
[05:05:38] <oldlaptop> They consider linux-on-hyperv sufficiently important to their business that they contributed drivers for hyperv's paravirtual devices to linux
[05:05:40] *** Quits: xff0x (~xff0x@2001:1a81:5267:2d00:3019:a525:5831:f042) (Ping timeout: 240 seconds)
[05:06:14] <oldlaptop> whether that implies anything about their azure services I don't know; presumably it makes windows slightly easier to sell if you can run linux on hyperv
[05:07:42] <edgar-rft> wasn't being perv bad enough?
[05:07:43] <Izem> interesting
[05:10:10] *** Quits: elnaviga1or (~elnavigat@105.196.190.191) (Ping timeout: 240 seconds)
[05:12:14] *** Joins: RenAdjest (~RenAdjest@user/renadjest)
[05:12:21] <webnet4> "Xen will now run as a guest under Hyper-V, the hypervisor developed by Microsoft which runs Microsoft's Azure cloud." https://linuxiac.com/xen-project-hypervisor-4-14-brings-support-for-azure-and-raspberry-pi-4/
[05:12:22] <bayaz> Title: XEN Project Hypervisor 4.14 Brings Support for Azure and Raspberry Pi 4 
[05:13:41] <Izem> Xen is a hypervisor that seems to have little information on how to install and run
[05:14:10] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[05:16:46] *** Quits: MangyDog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 252 seconds)
[05:17:04] <Izem> What is the tldr on (web) certificates? Who issues them and why should you trust them?
[05:18:31] *** Joins: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx)
[05:19:12] <webnet4> the browser devs issue them
[05:19:30] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[05:19:43] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:20:55] <oldlaptop> Izem: There are numerous 'certificate authorities' who issue tls certificates. "Why should you trust them?" is an excellent question, given how many of them there are and how lax their practices have been historically. "Browser devs" do *NOT* issue tls certificates, but they decide, in practice, which issuers you "trust".
[05:21:10] <mawk> no webnet4 
[05:21:19] <mawk> the browser dev does not issue them
[05:21:28] <Izem> oh ok
[05:21:34] <webnet4> lol
[05:21:46] <Izem> that is something to pay attention to, I never cared about before though
[05:21:51] *** Joins: damxsa (~damx@2001:16a2:cd07:7e00:a8bc:1716:95f4:86ed)
[05:22:07] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[05:22:14] <oldlaptop> https://en.wikipedia.org/wiki/Certificate_authority#Providers
[05:22:15] <bayaz> Title: Certificate authority - Wikipedia 
[05:22:22] <mawk> where is teus
[05:22:27] <mawk> plz someone summon him
[05:23:05] <RenAdjest> Browser dev can blacklist some certificate though.
[05:23:21] <Izem> blackmail?
[05:23:24] *** Joins: sevla (~platen@user/sevla)
[05:23:29] <mawk> not blackmail
[05:23:29] <webnet4> browser devs + system devs
[05:23:31] <webnet4> sorrrrrrrrrrrrrrrrrrrrry
[05:23:39] <mawk> no webnet4 not that either
[05:23:45] <webnet4> lol
[05:23:57] <mawk> certificate authorities are at the root of the chain
[05:24:10] <mawk> then browser or system dev just embed certificates from these authorities
[05:24:13] <Izem> I've heard of Let's Encrypt, but wow 1.8 % market share
[05:24:33] <mawk> yes use that one
[05:24:37] <RenAdjest> I remember when some country in middle east trying to mitm the internet with genuine certificate, it's immediately got blacklisted by Mozila & Google
[05:24:44] <mawk> you don't need to pay for something free that works equally well
[05:25:11] <oldlaptop> I would expect Let's Encrypt to gain strength in the coming years, but it's still quite new and there are a *lot* of sites, especially commercial ones, that already have certificates from commercial authorities.
[05:25:21] *** Joins: independent_ (~independe@185.50.0.80)
[05:26:19] <oldlaptop> There will also be a certain amount of FUD around how trustworthy Let's Encrypt is, although in practice I'd say it's better than the various "real" CAs that have been caught doing lazy and insecure things over the years. It's already well past the point where it could have been ignored into oblivion like CAcert.
[05:26:51] <oldlaptop> Some corporate types will probably always pay for EV certificates and claim that makes them more ultra super hyper extra secure than the competition.
[05:27:52] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[05:28:23] *** Joins: jazzy (~jaziz@2600:380:c150:cfb9:485f:3c30:f3c1:9e98)
[05:28:47] <mawk> well chrome doesn't show the green bar from ev certs anymore
[05:28:51] <mawk> so they're basically useless
[05:28:54] <beaky> yes i miss the green bar
[05:29:11] <oldlaptop> imagine *that* being the measure of whether they're "useful"
[05:29:13] <mawk> uranium bar
[05:29:35] <mawk> well yes, what else do you need it for if it does the exact same as a regular cert?
[05:29:43] <oldlaptop> not whether or not they provide any security benefit (which they really don't - alas, the actual site seems to be gone, but see https://arstechnica.com/information-technology/2017/12/nope-this-isnt-the-https-validated-stripe-website-you-think-it-is/
[05:29:44] <bayaz> Title: Nope, this isn‚Äôt the HTTPS-validated Stripe website you think it is 
[05:30:13] <mawk> nobody said anything about extra security
[05:30:22] <mawk> they've always been just to gain a fancy green bar
[05:30:27] <mawk> it's the same encryption in the end
[05:30:46] <oldlaptop> Yes, I think that's an extraordinary thing to say. (All the more so because it's basically true.)
[05:31:16] <PlanckWalk> In principle it was supposed to be better security for non-technical reasons
[05:31:39] <oldlaptop> The idea is *supposedly* that the "EV" flag means the CA has taken extra special care to make sure you are who you say you are; the CAs demonstrably cannot be trusted to be usefully careful.
[05:31:47] <PlanckWalk> "We did a little bit more work to check that this certificate was issued to who they claim to be"
[05:32:43] <oldlaptop> In the case I linked, someone registered - fortunately, for the purpose of demonstrating the vulnerability, not exploiting it - a corporation named "Stripe, Inc" (i.e. *not* the well-known payment processing service, another entity under the same name) and successfully obtained an EV certificate for it
[05:32:45] *** Quits: moha (uid506645@id-506645.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[05:33:34] <PlanckWalk> Yep.  The CA can't verify that they are issuing to who the *user* thinks they are.
[05:33:45] <oldlaptop> it was subsequently revoked when the story went viral and embarrassed the culpable CA (Comodo, IIRC), but of course if it were a real phishing attack that wouldn't have happened until after the scam made a fair chunk of cash.
[05:39:02] <arahael> mawk: The issue is ensuring there's no MITM happening - which is somethign the current CA system does poorly.
[05:46:35] *** warlord_auctus is now known as auctus
[05:47:21] *** Quits: zaher_ (~zaher@37.48.181.11) (Ping timeout: 248 seconds)
[05:48:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:50:04] *** Quits: damxsa (~damx@2001:16a2:cd07:7e00:a8bc:1716:95f4:86ed) (Quit: Leaving)
[05:51:02] <beaky> haskell functions are not math functions because haskell functions definitions are not 'such that' definitions whereas in math (aka TLA+) they are https://old.reddit.com/r/tlaplus/comments/enencr/yet_another_example_that_tla_is_math_not/
[05:51:03] <bayaz> Title: Yet another example that TLA+ is math, not programming 
[05:52:18] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Ping timeout: 250 seconds)
[05:53:54] *** Joins: pandakekok9 (~job@wikimedia-commons/pandakekok9)
[05:55:41] <Izem> I remember there is a where clause in haskell ;)
[05:56:55] *** Joins: trace987 (~trace@95.90.106.112)
[06:02:19] *** Quits: Izem (~Izem@65.95.41.242) (Quit: Going offline, see ya! (www.adiirc.com))
[06:03:30] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 268 seconds)
[06:05:34] <beaky> yes where clauses is one of the most important macros to define in lisp it is more convenient than let because you can put the final definition at the beginning
[06:05:36] <Lyn> if many gitlab runners are used, and they pull docker images from gitlab's container registry, can they persist the images in cache, or do they always need to pull them again from the registry with each pipeline run?
[06:06:33] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 248 seconds)
[06:07:28] *** Joins: gambl0re (~gambl0re@2607:fea8:a59e:87e0::b7d1)
[06:08:41] *** Quits: soapsudsxx (~soapsudsx@141.193.188.154) (Ping timeout: 248 seconds)
[06:08:44] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:12:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:12:25] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 248 seconds)
[06:13:24] *** pikapika is now known as catboy
[06:14:08] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[06:14:20] *** Joins: mickey (~user@user/mickey)
[06:14:22] *** catboy is now known as pikapika
[06:14:45] *** Joins: soapsudsxx (~soapsudsx@141.193.188.138)
[06:20:32] *** Joins: xff0x (~xff0x@2001:1a81:52ba:f800:f4cf:86a:773:6851)
[06:22:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[06:22:37] *** Quits: mathAndRhetorics (~juliaEnv@ip-86-49-242-28.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[06:23:00] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:23:21] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[06:23:30] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 250 seconds)
[06:23:49] *** Joins: brabrax (~brabrax@user/brabrax)
[06:25:18] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[06:25:31] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[06:25:33] *** Joins: Izem (~Izem@bras-base-london1483w-grc-38-65-95-41-242.dsl.bell.ca)
[06:25:42] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:26:53] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de) (Read error: Connection reset by peer)
[06:27:33] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de)
[06:33:27] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[06:34:59] <arahael> Lyn: I don't know, but I'd assume it would be cached.
[06:42:54] *** Joins: gggp (~textual@60.10.194.48)
[06:43:26] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:45:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[06:47:00] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:55:32] *** nekobyte is now known as neko-chan
[06:55:53] *** neko-chan is now known as nekobit
[06:58:18] *** Quits: nekobit (~cat@user/nekobit) (Quit: cute!!!!)
[06:58:25] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[07:00:57] *** Quits: sevla (~platen@user/sevla) (Ping timeout: 248 seconds)
[07:08:16] *** Quits: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com) (Ping timeout: 256 seconds)
[07:10:32] *** Quits: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx) (Quit: leaving)
[07:13:47] *** Quits: Batzy (~Batzy@user/batzy) (Ping timeout: 245 seconds)
[07:14:02] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[07:15:01] *** Joins: Batzy (~Batzy@user/batzy)
[07:15:18] *** Joins: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx)
[07:22:40] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[07:22:43] *** Quits: gggp (~textual@60.10.194.48) (Ping timeout: 252 seconds)
[07:23:05] <Izem> Why use a null terminator instead of another field that has a size?
[07:23:39] *** Quits: nekodesu (~bit@user/nekobit) (Quit: uninstall gentoo)
[07:25:55] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 245 seconds)
[07:26:54] *** Joins: Samian (~Sami@2620:10d:c091:480::1:bbc6)
[07:38:53] <beaky> the idea of null terminators is that the overhead for tracking the size of the string is constant and minimized to a single byte since the null character implicitly defines the size of the string while the string can be arbitrarily long, with the field approach you have a size field of size O(log n) where n is the size of the string in general, or if you want to keep the size of the size
[07:38:55] <beaky> value as small as possible you get something like the pascal string where you have a one byte prefix on the string but the string can only have a maximum size of 255 bytes long
[07:40:13] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[07:41:49] <Izem> ok, so the main upside is that the data can be arbitratily long as opposed to the size in the size field
[07:41:56] <Izem> that makes a lot of sense actually
[07:42:07] *** Joins: gggp_ (~textual@123.113.186.169)
[07:42:17] <Izem> but then you could just make the size field a pointer
[07:42:36] <Izem> hmm, that won't work
[07:45:54] *** Joins: nevoyu (~joshua@cpe-192-180-19-146.kya.res.rr.com)
[07:47:36] *** Quits: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com) (Quit: WeeChat 3.2)
[07:49:59] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[07:50:24] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[07:50:33] *** Quits: Izem (~Izem@bras-base-london1483w-grc-38-65-95-41-242.dsl.bell.ca) (Ping timeout: 248 seconds)
[07:52:22] *** Joins: nekobyte (~cat@user/nekobit)
[07:52:24] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Max SendQ exceeded)
[07:53:12] *** Joins: gggp (~textual@60.10.23.160)
[07:53:19] *** Quits: audiocat (~audio@2603-8081-1801-3bb5-7dbd-69ed-c482-bcce.res6.spectrum.com) (Remote host closed the connection)
[07:53:31] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[07:53:37] *** Joins: audiocat (~audio@2603-8081-1801-3bb5-1c98-6fe6-7a7c-0e20.res6.spectrum.com)
[07:56:05] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Max SendQ exceeded)
[07:56:16] *** Quits: gggp_ (~textual@123.113.186.169) (Ping timeout: 252 seconds)
[07:56:39] *** Quits: audiocat (~audio@2603-8081-1801-3bb5-1c98-6fe6-7a7c-0e20.res6.spectrum.com) (Remote host closed the connection)
[07:56:56] *** Joins: audiocat (~audio@2603-8081-1801-3bb5-39b4-e23c-b23f-7386.res6.spectrum.com)
[07:58:06] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[07:59:37] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[08:00:48] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[08:02:30] *** Quits: blahboybaz (~blahboyba@67-5-101-245.spok.qwest.net) (Ping timeout: 268 seconds)
[08:02:36] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[08:03:23] *** Quits: nevoyu (~joshua@cpe-192-180-19-146.kya.res.rr.com) (Read error: Connection reset by peer)
[08:03:28] <lockywolf> why doesn't a gtk app die when its parent dies?
[08:05:04] *** Quits: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx) (Ping timeout: 252 seconds)
[08:06:49] <PlanckWalk> Having a terminating null is worse in nearly every way from a size field.
[08:08:27] *** RenAdjest2 is now known as RenAdjest
[08:11:21] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[08:12:24] *** Quits: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler) (Remote host closed the connection)
[08:12:47] *** Joins: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler)
[08:14:00] *** Joins: Izem (~Izem@65.95.41.242)
[08:17:39] <lockywolf> I thought that it should receive sighup, and die
[08:18:21] <TJ-> PlanckWalk: that's like saying having a terminating full-stop (period) at the end of every sentence is worse in nearly every way :)
[08:18:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:26:05] *** Joins: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx)
[08:26:56] *** Quits: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx) (Client Quit)
[08:27:12] *** Joins: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx)
[08:27:54] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[08:28:16] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Killed (NickServ (GHOST command used by RenAdjest2)))
[08:28:23] *** RenAdjest2 is now known as RenAdjest
[08:32:55] <edgar-rft> lockywolf: my parents are both dead, do you expect me to die now, too?
[08:33:30] <lockywolf> very funny
[08:33:51] <lockywolf> you should have received a SIGHUP at their funeral
[08:34:18] <edgar-rft> I only got a letter some weeks later :-(
[08:36:03] <lockywolf> seriously, it works like this for almost all scripts
[08:36:04] *** Joins: wei2912 (~wei2912@112.199.250.21)
[08:36:22] <lockywolf> they die unless you run then with `nohup`
[08:36:25] <lockywolf> *them
[08:38:00] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 245 seconds)
[08:42:57] <lockywolf> I am missing some understanding of the unix semantics
[08:47:55] <InPhase> beaky: The space overhead for tracking size becomes constant with a terminator, but the runtime overhead for tracking size suddenly went from O(1) to O(N), which is a disaster on these "arbitrarily long" strings.
[08:50:50] <PlanckWalk> TJ-: If every period was unconditionally interpreted as the end of a sentence, then numbers would be hard to write in sentences.
[08:51:00] <PlanckWalk> But I do get the humour :-)
[08:52:41] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[08:52:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[08:53:45] <PlanckWalk> The general pattern of terminators that cannot occur in the content causes problems for all sorts of other situations too.
[08:54:29] <PlanckWalk> You end up with quoting rules and other workarounds that can become quite bizarre.
[08:54:35] <TJ-> PlanckWalk: but that's the point. The NUL was chosen as it was in the context of ASCII character arrays
[08:54:44] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:55:00] <TJ-> if you change the context then yes, change the way the size is stored, if it makes sense
[08:55:40] <PlanckWalk> ASCII already had a text terminator
[08:55:54] <PlanckWalk> EOT \004
[08:56:45] <PlanckWalk> Err, not just text.  End of "transmission"
[09:00:15] *** Joins: mmlj4 (~mmlj4@ip68-230-228-233.no.no.cox.net)
[09:01:58] <lockywolf> Terminator 4 is a flop though
[09:02:26] <TJ-> just blame the PDP-10 :)
[09:03:42] *** Quits: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx) (Quit: leaving)
[09:10:24] <Lyn> how many flops is it
[09:21:15] *** Quits: Samian (~Sami@2620:10d:c091:480::1:bbc6) (Read error: Connection reset by peer)
[09:23:36] *** Quits: wei2912 (~wei2912@112.199.250.21) (Read error: Connection reset by peer)
[09:25:18] *** Joins: manin (~x@185.242.190.95)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:31:21] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:36:08] *** Joins: mei (~mei@user/mei)
[09:37:12] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Ping timeout: 250 seconds)
[09:39:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:41:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:43:36] *** Joins: wei2912 (~wei2912@112.199.250.21)
[09:48:30] *** Quits: nekobyte (~cat@user/nekobit) (Quit: uncute)
[09:48:54] *** Quits: gambl0re (~gambl0re@2607:fea8:a59e:87e0::b7d1) (Ping timeout: 250 seconds)
[09:49:26] *** Joins: kobalt (~rsonx@user/kobalt)
[09:49:36] *** Joins: nekodesu (~bit@user/nekobit)
[09:50:52] *** Joins: anovick (~anovick@IGLD-83-130-61-178.inter.net.il)
[09:51:39] <arahael> Just a question about mice...  Many mice now have multiple buttons - can they be easily programmed on windows and mac systems so that those extra buttons can be like, cut&paste?
[09:51:45] <arahael> *without* installing software or drivers.
[09:52:31] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[09:52:46] *** Quits: nekodesu (~bit@user/nekobit) (Read error: Connection reset by peer)
[09:52:54] *** Joins: nekodesu (~bit@user/nekobit)
[09:53:54] <Izem> won't a mouse always require a driver?
[09:54:13] <Izem> I know ps/2 is everywhere :P
[09:54:27] <arahael> Izem: Rarely, infact.  I mean, you're technically right, but most mice today use a standard driver that you don't have to install explicitly.
[09:54:40] <Izem> oh ok
[09:54:43] <arahael> I mean, I don't have admin adccess to thiese systems.
[09:54:48] <arahael> *these
[09:56:16] *** Quits: anovick (~anovick@IGLD-83-130-61-178.inter.net.il) (Ping timeout: 250 seconds)
[09:56:25] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:56:30] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[09:56:33] <PlanckWalk> Yes, generic driver comign with OS instead of manufacturer supplied driver.
[09:57:10] <PlanckWalk> The multi-button mouse I have has the extra buttons exposed through the standard driver (on Linux)
[09:57:31] <PlanckWalk> As far as I can tell, it's not using a specific driver for this specific mouse.
[09:59:27] <arahael> Yeah, I'm mostly wondering about how this works on my wife's locked-down staff laptop.
[10:01:26] *** Quits: mei (~mei@user/mei) (Quit: mei)
[10:01:50] *** Joins: mei (~mei@user/mei)
[10:02:04] <lockywolf> Is there a way to get all CMake project options without running cmake first?
[10:02:31] <lockywolf> Motivation: ogre (the 3d) engine, is downloading an building stuff configure-time.
[10:02:44] <lockywolf> Sounds bad to me, but that is what they do.
[10:09:40] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:11:19] *** Quits: mei (~mei@user/mei) (Quit: mei)
[10:11:46] *** Joins: mei (~mei@user/mei)
[10:18:09] <arahael> Is Razor a good keyboard these days?  Thinking of their "Orange" keyswitches.
[10:18:18] <arahael> In particular, their "RAZER BLACKWIDOW LITE SILENT MECHANICAL KEYBOARD, ORANGE SWITCH".
[10:18:34] * arahael muses: Why do PC parts always have full-caps?
[10:20:35] *** Joins: blahboybaz (~blahboyba@67-5-101-245.spok.qwest.net)
[10:22:38] *** Joins: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx)
[10:23:08] *** Quits: CaptainJ (~CaptainJ@user/captainj) (Ping timeout: 250 seconds)
[10:24:30] *** Joins: kodah (~kodah@user/kodah)
[10:25:54] *** Quits: kobalt (~rsonx@user/kobalt) (Quit: quit)
[10:29:17] *** Joins: anovick (~anovick@IGLD-83-130-61-178.inter.net.il)
[10:29:40] *** Quits: soapsudsxx (~soapsudsx@141.193.188.138) (Remote host closed the connection)
[10:31:40] *** Quits: jazzy (~jaziz@2600:380:c150:cfb9:485f:3c30:f3c1:9e98) (Ping timeout: 240 seconds)
[10:34:05] *** Joins: Raguile (~Raguile@user/raguile)
[10:34:14] *** Quits: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx) (Quit: leaving)
[10:36:11] <beaky> gotta go for the hyper 7 keyboard for maximum emacs productivity https://groupbuys.mechboards.co.uk/shop/hyper-7-keyboard-r3/
[10:36:14] <bayaz> Title: Hyper 7 Keyboard R3 | Mechboards Group Buys 
[10:37:32] <beaky> emacs optimized by having control where modern layouts would have alt (likewise for meta and control) 
[10:42:22] <beaky> sadly long gone i cant buy one :<
[10:45:43] <Izem> why didn't itanium catch on?
[10:46:31] <Izem> also do you think this chip shortage will force devs to make more efficient software?
[10:46:45] <Izem> even toyota is being affected
[10:49:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:50:49] *** Quits: src (~src@user/src) (Quit: Leaving)
[10:54:22] *** Joins: joes (~joes@2a02:8109:d80:38c8::d29c)
[10:55:34] *** Quits: zwr (~zwr@191.47.94.157) (Remote host closed the connection)
[10:59:22] *** Quits: Ara (~Ara@user/ara) (Ping timeout: 240 seconds)
[11:00:18] <beaky> itanium did not catch on because the idea ofi itanium out of ordertanium instruction set architecture where all the sick instruction-level parallelism manifests in the isa, but there was no programming language implementation back then designed for it so 
[11:00:38] <beaky> it sank until finally cuda came along
[11:02:00] <beaky> and the goal of the cuda was to perfect the art of programming for massive parallelism and schedulnig
[11:04:06] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[11:06:34] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[11:06:41] *** Joins: Ara (~Ara@user/ara)
[11:07:29] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:08:13] *** Joins: palasso (~palasso@user/palasso)
[11:08:19] <beaky> but now we have simd and avx512 
[11:10:13] <Izem> beaky: so it was hard for compiler writers?
[11:10:39] *** Quits: dre (~dre@2001:8003:c932:c301:ef2c:1b38:ddbc:e3bd) (Quit: Leaving)
[11:12:58] *** Joins: gambusia (~gambusia@2604:3d09:3e7c:e5a0:6ed9:529c:a4bf:9e51)
[11:16:26] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[11:19:51] *** Joins: pulse (~pulse@user/pulse)
[11:22:13] *** Quits: nekodesu (~bit@user/nekobit) (Quit: uninstall gentoo)
[11:23:03] <beaky> it was not hard in itself but hard because the language models were not sufficient to fully capture the information needed to make it go screaming-fast and come up with the most optimal sequence of instructions where you can globally optimize for maximum bandwidht https://inst.eecs.berkeley.edu//~cs252/sp17/papers/VLIW-fisher1983.pdf
[11:23:04] <bayaz> Type: application/pdf Size: 837.9 kB 
[11:23:15] *** Joins: Guest96 (~Guest96@151.24.205.25)
[11:23:35] *** Quits: Guest96 (~Guest96@151.24.205.25) (Client Quit)
[11:23:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[11:24:17] <beaky> sick speeds 
[11:25:44] *** Joins: lapno (~lapno@eoh163.neoplus.adsl.tpnet.pl)
[11:26:50] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547)
[11:27:05] *** Quits: kaivai (~kaivai@user/kaivai) (Ping timeout: 248 seconds)
[11:28:10] <audiocat> i have a dev database and a production database. my app code which uses each database depending on branch (dev vs master) seems not to be the best solution (for example, what if i want to push changes on dev to master without changing database settings?) can anyone help
[11:30:06] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:30:11] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:30:20] *** Joins: entuland (~entuland@user/entuland)
[11:32:10] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[11:32:58] *** Joins: cthulchu (~Cthulchu@94.153.10.122)
[11:32:58] *** Quits: cthulchu (~Cthulchu@94.153.10.122) (Read error: Connection reset by peer)
[11:33:18] *** Joins: cthulchu (~Cthulchu@94.153.10.122)
[11:33:45] <Izem> beaky: thanks
[11:33:50] *** Joins: gggp (~textual@114.245.111.238)
[11:34:06] <beaky> yes rather than have it hardcoded in specific branches separate the configuration so that it is provided as a parameter to the application (for example as command line arguments or a set of environment variables)
[11:35:10] *** Quits: blahboybaz (~blahboyba@67-5-101-245.spok.qwest.net) (Ping timeout: 252 seconds)
[11:36:19] <beaky> Izem: on the other hand with the designs that won out for processors the cpus microarchitecture are designed to maximally infer and exploit those dependencies at runtime thru things like speculative out of order superscalar pipelined execution with register renaming and branch prediction and caching and...
[11:38:04] <Izem> yeah
[11:38:26] <Izem> risc seems to also have made quite the turn around since the 90s
[11:38:29] *** Joins: vysn (~vysn@user/vysn)
[11:39:03] <Izem> there was an interesting segment on computer chronicles about it, but I guess intel was not worried then
[11:39:10] *** Joins: jinsun_ (~quassel@user/jinsun)
[11:39:44] <beaky> so even though it looks more complex than itanium i.e. vliw architectures, with those fancy features processors get to take more advantage of parallelism thanks to being able to get the required scheduling information at runtime and the freedom to exploit it
[11:40:10] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[11:40:13] *** jinsun_ is now known as jinsun
[11:40:42] <beaky> and instead of makingg compiler authors impose the order on their own and figure everything out beforehand the compiler authors can focus on only feeding the cpu
[11:41:37] *** Quits: gggp (~textual@114.245.111.238) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[11:42:09] *** Joins: gggp (~textual@60.10.23.160)
[11:43:46] <Izem> I see
[11:44:16] *** Joins: jinsun_ (~quassel@user/jinsun)
[11:45:28] *** Quits: anovick (~anovick@IGLD-83-130-61-178.inter.net.il) (Ping timeout: 250 seconds)
[11:45:40] <beaky> which becomes a big problem with the lmitations of memoryu bandwidth (so all the research is about figuring out what to do with maximizing caching and locality of data)
[11:46:46] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 250 seconds)
[11:47:07] <Izem> which is why functional programming is getting renewed interest?
[11:48:18] *** Joins: nevoyu2 (~joshua@cpe-192-180-19-146.kya.res.rr.com)
[11:48:49] *** Quits: nevoyu2 (~joshua@cpe-192-180-19-146.kya.res.rr.com) (Client Quit)
[11:49:06] *** Joins: nevoyu2 (~joshua@cpe-192-180-19-146.kya.res.rr.com)
[11:49:14] *** Quits: nevoyu2 (~joshua@cpe-192-180-19-146.kya.res.rr.com) (Client Quit)
[11:50:01] *** Joins: nevoyu (~joshua@cpe-192-180-19-146.kya.res.rr.com)
[11:50:33] <beaky> no i think functional programming is getting renewed interest because it is a very convenient and expressive model (not because it solves those problems of cache efficiecny and memory bottlenecking; most functional programming langauge implementations in general are pretty bad in this they use a pointer-heavy memory model by default for example)
[11:51:30] *** jinsun_ is now known as jinsun
[11:52:14] <Izem> oh ok, just seems like it would be really good because of locality and concurrent stuff since it's easy to see the relationships between data
[11:58:46] <beaky> yes its bad because by default data in languages like standard ml, ocaml, haskell, scala, etc. are recursive data types implemented via pointer-based trees (which is the opposite of optimizing for locality of data) whereas in other languages like c or rust the default is not pointers but flat records (you only need pointers for recursive data types but even then unlike those other languages
[11:58:48] <beaky> they dont have the high overhead things like 'boxing' involved by default)
[11:59:40] *** Quits: joes (~joes@2a02:8109:d80:38c8::d29c) (Ping timeout: 240 seconds)
[12:00:32] <beaky> the dream would be for a new programming language where all the data types by default are implemented via information theoretic minimal structures rather than massive ints and machine pointers but i dont think there are languages working on that kind of thing
[12:01:13] <Izem> ah interesting
[12:02:17] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[12:03:01] <Izem> could safe space by having 32 bit pointers and the other 32 for type encoding or something
[12:03:07] <Izem> s/safe/save/
[12:03:58] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[12:03:58] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[12:03:58] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[12:04:16] *** Joins: Auron (~Auron956@user/auron)
[12:04:54] <beaky> yes the only language i can recall off the top of my head that does anything to approach the issue of cache-friendly data structures by default is this is jonathan blow's jai language which unfortunately is not public and not designed in the style of a functional programming language (it's c++-like)
[12:05:23] <beaky> with transparent array of structs <-> struct of arrays swapping but thats it i think
[12:05:29] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 256 seconds)
[12:06:06] <beaky> they could go further with sick arbitraryly-sized pointers so that you only have the information-theoretic minimum you need to fit in cache and nothing more so it doesnt spill over for example
[12:08:01] *** Joins: gggp (~textual@60.10.23.160)
[12:08:01] <Izem> yeah that'd be really interesting
[12:08:15] <Izem> not nice for the programming to look at the generated code however :P
[12:11:18] *** Joins: mathAndRhetorics (~juliaEnv@ip-86-49-255-140.net.upcbroadband.cz)
[12:12:23] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[12:13:58] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[12:14:41] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[12:14:56] *** Joins: Raguile (~Raguile@user/raguile)
[12:16:19] *** Quits: gambusia (~gambusia@2604:3d09:3e7c:e5a0:6ed9:529c:a4bf:9e51) (Quit: WeeChat 3.0.1)
[12:17:34] *** Joins: gggp (~textual@60.10.23.160)
[12:18:04] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 252 seconds)
[12:22:44] *** Quits: cthulchu (~Cthulchu@94.153.10.122) (Ping timeout: 268 seconds)
[12:25:11] <beaky> yes the dream would be for a sophisticated compiler and assembler to preserve all the semantics so the generated code will still have the information to denote the meaning of it as in william j bowman's work on dependently-typed assembly https://williamjbowman.com
[12:25:14] <bayaz> Title: William J. Bowman | Home 
[12:25:31] <beaky> (also dependently-typed linkers)
[12:26:12] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[12:28:32] *** Joins: gggp (~textual@221.219.72.60)
[12:29:19] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:29:20] *** Joins: mrig (~mrig@user/mrig)
[12:31:48] *** Quits: Izem (~Izem@65.95.41.242) (Quit: Going offline, see ya! (www.adiirc.com))
[12:32:43] *** Joins: anovick (~anovick@IGLD-83-130-61-178.inter.net.il)
[12:34:52] *** Quits: gggp (~textual@221.219.72.60) (Ping timeout: 250 seconds)
[12:35:11] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:38:33] *** Joins: gggp (~textual@60.10.23.160)
[12:41:10] *** Quits: nevoyu (~joshua@cpe-192-180-19-146.kya.res.rr.com) (Remote host closed the connection)
[12:50:11] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:52:23] *** Quits: lapno (~lapno@eoh163.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[12:57:37] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[12:58:30] *** Joins: aradesh (~aradesh@user/aradesh)
[13:01:24] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[13:04:00] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[13:08:20] *** Joins: amigojapan (uid86330@id-86330.brockwell.irccloud.com)
[13:14:04] *** Joins: gggp (~textual@221.219.78.247)
[13:15:36] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[13:17:34] *** Joins: mrig (~mrig@user/mrig)
[13:18:40] *** Quits: gggp (~textual@221.219.78.247) (Ping timeout: 240 seconds)
[13:20:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:27:21] *** Joins: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com)
[13:28:36] *** Joins: immibis (~hexchat@62.156.144.218)
[13:28:44] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[13:29:10] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[13:31:00] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[13:31:35] *** Joins: DasBrain (~DasBrain@user/dasbrain)
[13:31:38] *** Joins: rany_ (~rany@user/rany)
[13:31:42] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[13:36:58] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[13:40:28] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[13:40:34] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[13:44:39] *** Joins: gggp (~textual@123.113.190.24)
[13:48:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:48:27] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:51:39] *** Joins: jaysicks (~jaysicks@212-40-83-106.pool.digikabel.hu)
[13:52:11] *** Joins: elnavigator (~elnavigat@105.196.100.217)
[13:54:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[13:55:14] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[14:00:47] *** Quits: gggp (~textual@123.113.190.24) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[14:01:26] *** Joins: kmh (~kmh@p200300df5f47f400a948c5200deef743.dip0.t-ipconnect.de)
[14:02:00] *** Joins: nunxerl (~nunxerl@192.145.118.70)
[14:02:18] <nunxerl> What doesn't match this PHP regex? https://pastebin.com/dxc5LEWF
[14:02:22] <bayaz> Title: if (preg_match_all("/<!(?:DOCTYPE|ENTITY)(?:\s|%|&#[0-9]+;|&#x[0-9a-fA-F]+;)+[^\ - Pastebin.com 
[14:03:34] *** Joins: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854)
[14:05:27] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[14:06:41] *** Joins: gggp (~textual@60.10.23.160)
[14:08:18] *** Joins: mannu (mannu@wodanaz.se)
[14:08:46] *** Quits: gggp (~textual@60.10.23.160) (Client Quit)
[14:09:51] *** Joins: reumeth (~reumeth@user/reumeth)
[14:10:02] <arahael> nunxerl: I hope you're not parsing HTML with regexp.  Chthullu would have a word with you.
[14:10:32] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:91bb:bd77:ba3e:76cd) (Ping timeout: 258 seconds)
[14:10:41] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:7cdb:9c9a:8dd3:4cf4)
[14:10:49] <nunxerl> arahael why? :)
[14:11:03] <arahael> nunxerl: Let me locate the famous stackoverflow, one moment.
[14:11:28] <nunxerl> Okay thanks, but what words dont match that regex?
[14:11:29] <arahael> nunxerl: https://stackoverflow.com/a/1732454/52273
[14:11:31] <bayaz> Title: RegEx match open tags except XHTML self-contained tags 
[14:11:49] <arahael> nunxerl: It's frankly besides the point, you just don't do it. :)
[14:12:01] *** Joins: gggp (~textual@221.219.72.60)
[14:12:15] <nunxerl> arahael yeah i know i am just curious if there is anything to
[14:13:06] <nunxerl> whats the security implications
[14:13:19] <pulse> what would brian boitano do
[14:18:46] *** Joins: kissofdeath (~fedorafan@user/fedorafan)
[14:19:14] <pyzozord> bencevans: is mr Bowman write about himself in a third person?
[14:19:19] <kissofdeath> hello
[14:22:52] <pyzozord> beaky: ^
[14:24:26] *** Quits: mathAndRhetorics (~juliaEnv@ip-86-49-255-140.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[14:24:30] <GeDaMo> https://notes.eatonphil.com/parser-generators-vs-handwritten-parsers-survey-2021.html
[14:24:30] <bayaz> Title: Parser generators vs. handwritten parsers: surveying major language implementations in 2021 | notes.eatonphil.com 
[14:25:42] <pyzozord> I saw it yesterday too. Intuitively I don't really see the point for a parser generator when working on a single language.
[14:25:49] *** Quits: mnrmnaugh (~mnrmnaugh@68.162.206.56) (Quit: Leaving)
[14:26:23] <GeDaMo> It's a tool which could have other uses
[14:27:33] <pyzozord> I'm not sure but I think lex and yacc were invented to make it easy to make many domain specific languages at bell labs. It seems like they did not intend to use it for big general purpose languages, just small scripting languages, embeded languages, things like that.
[14:27:53] <bjs> pyzozord: there is no such thing as "a single language", look at Python for example, its syntax changes regularly, the parser is constantly updated and the grammar is not trivial
[14:28:07] <pyzozord> But being amazing people their lex/yacc tools turned out so powerful that way more things were built in it
[14:28:18] <bjs> and LR parsers are awful to maintain by hand
[14:28:19] <pyzozord> That's my working theory
[14:29:27] <pyzozord> Yeah that's true, I guess the benefit of parser generator is that you can change the syntax quickly.
[14:30:59] <pyzozord> But I don't have any experience, maybe I'll change my mind once I write my own parser and use yacc
[14:32:13] <bjs> pyzozord: also note that if you've experience hand-writing parsers, you've almost certainly written some kind of recursive descent parser
[14:33:05] <pyzozord> It's just that kind of code generator tools seem to me function like "factories", designed for high volume produce from template. Not for artisonal, lovingly crafted thing
[14:33:09] <bjs> but note that these parsers (which parse LL(1) grammars) are actually very restrictive and almost no grammar for any real language is ever given in LL(1) form and so the hand-written parser needs *lots* of hacks
[14:33:23] <bjs> and a lot of the time in fairly unintuitive ways
[14:34:17] <bjs> and hand-writing parsers that can efficiently and unambiguously parse the language the way you'd actually *like* to write the grammar is a really hard thing to balance. It's one of the reasons people like PEG,  but of course many language parsers pre-date PEG
[14:34:43] <pyzozord> I think the efficiency of parsers is pretty much a non-problem with current hardware
[14:34:50] <bjs> pyzozord: haha
[14:35:23] *** Joins: Izem (~Izem@65.95.41.242)
[14:35:24] <pyzozord> compilers spend all their time in optimizers, not in parsers
[14:35:37] *** Quits: gggp (~textual@221.219.72.60) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[14:35:39] *** Quits: Raguile (~Raguile@user/raguile) (Ping timeout: 256 seconds)
[14:35:42] <bjs> pyzozord: again I'm suspecting the only parser you've ever written is recursive descent,  something that just looks ahead
[14:36:21] <pyzozord> I can see a scheme with hashmap table of all symbols that uses backtracking and recursive descent to parse a context sensitive language
[14:36:36] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[14:36:36] <bjs> and writing a recursive descent parser (e.g. for C or Python or something like that) is not easy because the language is more complicated than an LL(1) grammar can really represent  (I don't know if there exists a theoretical LL(1) grammar)
[14:36:53] <bjs> pyzozord: well now backtracking takes you out of your nice world of efficient parsers
[14:37:05] <bjs> parsers with backtracking can be *horrendous* performance if not done right
[14:37:13] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 252 seconds)
[14:37:42] <bjs> The thing you have to remember that is while parsing is often considered a "solved" problem that's not because it's easy but just because it's something that people have spent _decades_ studying and understanding and trying different things
[14:37:51] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[14:38:04] <pyzozord> I think the time parsers take is negligable. I think the subject of perser efficiency was a big concern in the 60s-80s but not today.
[14:38:19] <pyzozord> We got loads of memory, and extremly fast processors.
[14:38:28] <bjs> pyzozord: yes because we use these standard techniques,  but e.g. the technique you just suggested is very much not an efficient parser
[14:38:40] *** Quits: xff0x (~xff0x@2001:1a81:52ba:f800:f4cf:86a:773:6851) (Ping timeout: 240 seconds)
[14:38:41] *** Joins: rsx (~dummy@ppp-188-174-142-175.dynamic.mnet-online.de)
[14:39:01] <pyzozord> it's not efficient, but it's still going to be done with entire codebase under a second
[14:39:07] <bjs> pyzozord: hahahaha
[14:39:16] <bjs> you really have never seen a parser with backtracking before have you? :P
[14:39:42] <pyzozord> bjs: I am talking about real life example, Jonathan Blow's JAI language does exactly that, and complies serious codebases under a second
[14:39:43] *** Joins: xff0x (~xff0x@2001:1a81:52ba:f800:ba30:5326:3556:79a1)
[14:39:54] <pyzozord> that's where I got the idea from
[14:40:58] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:41:15] *** Joins: mickey (~user@user/mickey)
[14:41:59] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[14:42:06] <pyzozord> I wrote a sudoku solver with backtracking.
[14:42:13] <bjs> pyzozord: I am suspect about that,  context-sensitive languages are *really* hard to parse. That seems unlikely
[14:42:28] *** Joins: kcrk (~kcrk@user/kcrk)
[14:42:32] <bjs> and why would the language be context-sensitive?
[14:43:33] <pyzozord> Well I don't know if it's context sensitive, but it's like C
[14:43:40] *** Quits: audiocat (~audio@2603-8081-1801-3bb5-39b4-e23c-b23f-7386.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:43:49] <bjs> C is nowhere near context-sensitive
[14:43:52] *** Joins: gggp (~textual@60.10.23.160)
[14:44:13] <bjs> it's syntax is a context-free language
[14:45:04] <pyzozord> I don't think it's context-free
[14:45:20] <pyzozord> besides from what I heard these categories get blurred
[14:45:57] <pyzozord> http://trevorjim.com/c-and-cplusplus-are-not-context-free/
[14:46:37] <bjs> pyzozord: I mean there are some weird corner-cases where C literally needs to look up the name of something to figure out
[14:47:00] <pyzozord> bjs: hahahaha
[14:48:00] <pyzozord> that sounds like context to me
[14:48:40] *** Quits: elnavigator (~elnavigat@105.196.100.217) (Ping timeout: 240 seconds)
[14:50:18] <bjs> Hmm it's not obvious to me, people often misunderstand context-sensitive
[14:50:39] <smallville7123> if a touch is allowed to go outside of a view, does the view itself need to keep track of what touch pointers it has? https://gist.github.com/mgood7123/e82b0bf95118c49fddbc6e8b04a5aec4
[14:50:40] <bayaz> Title: ViewGroup.cpp 
[14:53:19] *** Quits: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler) (Ping timeout: 244 seconds)
[14:54:44] <bjs> pyzozord: I don't think the example that site uses demonstrates it's context-sensitive. I think there *is* an example, but it's a much more cornery edgey case
[14:55:10] *** Joins: kobalt (~rsonx@user/kobalt)
[14:56:24] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:56:54] <pyzozord> bjs: no matter how cornery it is, if it doesn't fit formal definition then it is not a context-free grammar.
[14:58:55] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[14:59:55] <bjs> pyzozord: yeah yeah,  I mean it's a question really about what you consider part of the "parser".  e.g. if a language has a type system do you consider it part of the parser
[15:00:32] <pyzozord> bjs: I consider all of the language as the language, and I consider a parser, the parser that parses the language.
[15:01:30] <pyzozord> You see, it's all not so obvious, and honestly the way you tried to discuss it with me wasn't really too pleasent.
[15:01:53] <bjs> pyzozord: well okay then,  things get a lot more complicated then because "parsing" is usually only one step in the language and you also have lexing (which can be non-trivial although usually not more than parsing) but then you have extra checks and type checking and things
[15:02:09] <bjs> and those can really stretch beyond context-sensitive even
[15:02:25] <bjs>  and macro systems and templating (e.g. look at C++ templates)
[15:04:41] <pyzozord> my point was, efficiency of parsers is a non-concern anymore. As long as you know what you are doing.
[15:05:14] <bjs> pyzozord: yes that's why people use parser generators because they get it right,  or for a small number of languages with really dedicated teams they can hand-write them correctly
[15:05:36] <pyzozord> the link GeDaMo shared shows that most people actually do not use parser generators
[15:06:41] <bjs> pyzozord: yep,  the bigger the language the more likely it is to be hand-written
[15:06:49] <pyzozord> bjs: haha
[15:06:53] <bjs> haha?
[15:07:53] *** Joins: gaussblurinc (~lolgear@broadband-77-37-173-68.ip.moscow.rt.ru)
[15:08:33] <pyzozord> just trying to make a point it wasn't easy to have a meritorical discussion with you
[15:08:55] <kissofdeath> what are you doing theories
[15:09:48] <bjs> pyzozord: I'm not really sure what you mean.  Modern languages are complicated and it's never clear what granularity to pick when talking about their syntax
[15:10:04] <gaussblurinc> Hello! Is it a mirror of programming chat at freenode?
[15:10:39] <bjs> pyzozord: in theory I guess you want to talk about the entire stage up to compilation, so lexing+parsing+validation+typechecks which is almost certainly not going to be context-free
[15:10:50] <GeDaMo> gaussblurinc: there was some drama at Freenode so most people moved over here
[15:11:09] <kissofdeath> if you want to learn then code code code code
[15:11:13] *** Parts: kissofdeath (~fedorafan@user/fedorafan) (Textual IRC Client: www.textualapp.com)
[15:11:45] <gaussblurinc> GeDaMo: Could you explain a bit? I try to connect to freenode and‚Ä¶ no luck
[15:12:16] <GeDaMo> gaussblurinc: https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409
[15:13:41] <bjs> pyzozord: I remember that Python for example used to have an over-approximate grammar (e.g. it allowed `return` anywhere) and would later do validation to check that the `return` was inside a `def`
[15:14:09] <arahael> gaussblurinc: You have a *lot* of catching up to do! :(  Short summary: Someone bought/tookover freenode, and did not engage the community.  Staff got the heck out. Almost everybody followed the staff they trusted and liked.
[15:14:20] *** Quits: Lyn (~Lyn@user/law) (Ping timeout: 250 seconds)
[15:15:06] <arahael> gaussblurinc: And one of the things the new owner did was suddenly decide to replace the IRC servers and simply toss the user registrations database out - and require that all new users use a particular authentication flow.
[15:15:39] <bjs> pyzozord: the combination of these steps made it easier to write the LL(1) parser, but (at least these two steps) were still context-free.  However then you get questions about, "Python gives me SyntaxErrors if I refer to non-local variables that dont exist" and now you have to ask whether *this* is still context-free
[15:15:59] <arahael> bjs: Or *self*. </troll>
[15:16:27] <bjs> Actually I'm not sure about that case, it might still be context-free although the required grammar would be horrible to write
[15:16:58] <bjs> so like above it "parses" `nonlocal x` happily and then later does a validation to see if `x` really existed.
[15:17:16] *** Joins: Atque (~Atque@user/atque)
[15:17:57] <GeDaMo> "From July 2021 no more connections to freenode could be established. The network was accordingly classified as historic." https://netsplit.de/networks/statistics.php?net=freenode
[15:19:05] <bjs> GeDaMo: they turned of non-SASL connections iirc
[15:19:33] <GeDaMo> Ah
[15:19:47] <arahael> GeDaMo: And they also require new accounts be setup via some web page, I believe.
[15:20:17] <bjs> pyzozord: as for C,  here's a much better site that tries to actually explain the validation step that GCC does that is the troublesome not-context-free part: https://eli.thegreenplace.net/2007/11/24/the-context-sensitivity-of-cs-grammar
[15:20:18] <bayaz> Title: The context sensitivity of C's grammar - Eli Bendersky's website 
[15:21:12] <kobalt> anyone tried google kickstart today?
[15:22:09] <kobalt> how do you take arbitrary string input in c++
[15:25:37] <pyzozord> bjs: 12:13 < bjs> C is nowhere near context-sensitive, but now you are showing me a link that says in the first paragraph "What most people don‚Äôt know1 is that the vast majority of programming languages have grammars that are not context free.". That's what I was trying to tell you in the first place.
[15:25:59] <vdamewood> kobalt: std::cin >> some_string;
[15:26:13] <vdamewood> where some_string is a std::string.
[15:26:15] <bjs> pyzozord: okay sure I was too hasty in that comment.  There is an interesting conversation here about exactly what part we classify as "the parser"
[15:26:37] <pyzozord> bjs: yes, certainly doesn't warrant a sarcastic "hahaha" :P
[15:27:09] <bjs> pyzozord: I think that comment was to backtracking.
[15:28:03] <bjs> backtracking is something you really want to avoid in parsers, as much as possible.  One place this appears a lot is actually in FP with parser combinators
[15:28:14] <kobalt> yes but how do I allocate space for unknown length string
[15:28:28] <kobalt> vdamewood: 
[15:28:33] *** Joins: jazzy (~jaziz@2600:380:863c:4fce:20a0:52d4:968d:eb40)
[15:28:47] <vdamewood> kobalt: You don't. std::string handles that for you.
[15:28:48] <bjs> pyzozord: where it's very easy to write a bad parser with a choice operator and get exponential complexity in your parser
[15:28:50] <pyzozord> bjs: that comment is not good to anything other than a joke
[15:30:02] <bjs> pyzozord: I feel like you get very offended very easily, I am sorry
[15:30:46] *** Joins: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901)
[15:31:53] <pyzozord> bjs: it's ok, I just have low threshold for that kind of thing.
[15:33:37] <bjs> pyzozord: I suspect that in a few decades all the big languages will move towards parser generators,  although I said parsing is a "solved problem" earlier this is one area that progress still continues and the parser generators get better all the time
[15:34:52] <bjs> it used to be that the parser generators only accepted really simple grammars (that is, LL(1) or LALR(k) at most) and so you had to add lots of extra verification steps to reject extra stuff. and then stuff like this C typedef you'd have to choose between making the grammar CFG but a little more ugly and with some extra validation, or hand-editing the parser to try attach the right information
[15:35:36] *** Quits: _derpy_ (~quassel@dslb-002-202-069-037.002.202.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[15:36:10] <pyzozord> I agree about exponential complexity. My point is that the exponential complexity doesn't have time to explode when the language and the parser are designed right
[15:36:27] <bjs> pyzozord: that is always true
[15:36:55] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[15:36:59] *** Quits: Thedarkb (~Thedarkb@185.69.145.19) (Ping timeout: 268 seconds)
[15:37:10] <bjs> i'd argue that if it did get out of control then you can't say they were "designed right"
[15:39:25] <bjs> pyzozord: what I see is basically 3 options if you want to write a parser for a "real" language: to use a parser generator with an over-approximate grammar and either hand-edit the output or add extra validation steps over the top; or hand-write a simple (e.g. recursive-descent) parser but with lots of hacks which might mean the parser itself isn't even working over a context-free grammar anymore; or to hand-write a "real" parser directly and properly.
[15:39:35] *** Joins: derpy (~quassel@dslb-002-202-069-037.002.202.pools.vodafone-ip.de)
[15:39:40] *** Joins: Guest60 (~Guest60@37.157.32.226)
[15:39:41] <bjs> as far as I know, nobody does the last one and everyone does one of the first two
[15:39:44] <Guest60> hi
[15:39:54] <GeDaMo> Hi Guest60 :)
[15:40:11] <Guest60> apart of programming have you done some other jobs online? working from home
[15:40:29] <bjs> pyzozord: and the larger and more complicated the language is, the more problems parser generators have in practice and the more likely you are to give up and write your own hacky parser.
[15:40:35] <Guest60> i aim to escape office soon lol
[15:40:43] <Guest60> too many problems 
[15:40:54] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[15:41:13] <Guest60> ok guess its a no
[15:42:16] <X-Scale> bjs: 'or to hand-write a "real" parser directly and properly.' <-- how would you do this ? is there some reference strategy ?
[15:42:28] <bjs> X-Scale: you have discovered why people don't it
[15:43:26] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[15:43:50] *** Joins: [R] (~rs@genoce.org)
[15:44:28] <Guest60> also hotels in japan are 2 to 3 times cheaped than in uk lol
[15:44:30] <Guest60> just checked
[15:45:08] <bjs> X-Scale: people know how to write parsers for restricted grammars, e.g. LL(k) and LALR(k) and PEG and things, so that's what people do, then they hack extra stuff on top.  Infact most hand-written parsers are just going to be recursive-descent I bet
[15:45:28] *** Joins: gggp (~textual@123.113.180.13)
[15:47:20] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:d099:ff1b:cb18:435e) (Quit: Textual IRC Client: www.textualapp.com)
[15:48:11] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[15:49:09] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:49:21] <Guest60> do you guys live in usa?
[15:49:23] <Guest60> lol
[15:50:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:50:54] <kobalt> united south africa?
[15:51:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[15:51:29] <Guest60> kobalt k lined lol
[15:52:48] <kobalt> i was just kidding. got bored.
[15:52:54] <Guest60> lol
[15:53:04] <Guest60> are you an american?
[15:53:10] <X-Scale> bjs: i've always wondered how the best IDEs do interactive parsing of code being written in a decent way.
[15:53:18] <Guest60> i just want to say usa japan and thailand are so good lol
[15:54:42] <bjs> X-Scale: idk i've never looked inside an IDE
[15:55:20] *** Quits: gggp (~textual@123.113.180.13) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[15:55:34] <kobalt> no I am not american. but maybe I would retire there.
[15:55:43] <kobalt> I wish to.
[15:55:52] <Guest60> america used to be awesome
[15:56:02] <bjs> X-Scale: I assume for straight-up syntax-highlighting there's no need to have a full parser and you can just have regexs to approximate,  for more complicated introspection perhaps it just uses a proper parser like the compiler itself would
[15:56:03] <Guest60> prior to fake epidemic lol
[15:57:24] <mrig> syntax highlighting that does not use a parser can be a little annoying though, as it gets some quite simple context relevant stuff wrong.
[15:57:56] <bjs> mrig: yup, see: pygments
[15:58:41] <mrig> I'm quite bemused by why it is that i'm writing a parser at the moment, seems to be the only sane way to approach using a markup language in a program.
[15:59:22] <mrig> Which had never occurred to me before.
[15:59:49] *** Quits: Guest60 (~Guest60@37.157.32.226) (Quit: Client closed)
[16:00:17] *** Quits: kobalt (~rsonx@user/kobalt) (Quit: quit)
[16:01:38] <GeDaMo> "How to Build Static Checking Systems Using Orders of Magnitude Less Code" https://web.stanford.edu/~mlfbrown/paper.pdf
[16:01:39] <bayaz> Type: application/pdf Size: 309.5 kB 
[16:03:33] *** Joins: damxsa (~damx@2001:16a2:cd07:7e00:c69c:ea15:4679:2b93)
[16:03:40] <mrig> Fascinating balance of regexp with micro grammars in that article, lots of food for thought.
[16:03:54] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Quit: leaving)
[16:04:11] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[16:05:03] *** Joins: gggp (~textual@60.10.23.160)
[16:07:58] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Ping timeout: 252 seconds)
[16:08:28] *** Quits: damxsa (~damx@2001:16a2:cd07:7e00:c69c:ea15:4679:2b93) (Quit: Leaving)
[16:08:52] *** Joins: damxsa (~damx@2001:16a2:cd07:7e00:c69c:ea15:4679:2b93)
[16:09:40] *** Quits: gggp (~textual@60.10.23.160) (Ping timeout: 268 seconds)
[16:09:57] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[16:11:19] *** Joins: elnavigator (~elnavigat@105.196.100.217)
[16:12:54] *** Quits: damxsa (~damx@2001:16a2:cd07:7e00:c69c:ea15:4679:2b93) (Client Quit)
[16:14:21] *** Joins: zaher_ (~zaher@37.48.159.154)
[16:15:18] <mrig> bjs: that's a python parser then I guess?
[16:15:42] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[16:16:19] *** Joins: Twipply (~Twipply@user/twipply)
[16:17:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 258 seconds)
[16:19:30] *** Joins: Lyn (~Lyn@user/law)
[16:24:07] <mrig> An interesting talk https://www.youtube.com/watch?v=kc_Jq42Og7Q
[16:24:09] <bayaz> Title: Jaron Lanier interview on how social media ruins your life 
[16:24:15] *** Quits: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901) (Read error: Connection reset by peer)
[16:24:39] <mrig> seems that this guy things that big tec giants are ignorant as to the workings of professional trolls.
[16:24:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[16:24:53] <mrig> That they are naive.
[16:25:01] *** Joins: magla (~gelignite@55d4e32c.access.ecotel.net)
[16:25:12] <mrig> I'd not thought of it like that before.
[16:26:19] <mrig> Its such a melting pot of domains, amazing really.
[16:27:34] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[16:28:54] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[16:31:42] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Remote host closed the connection)
[16:32:02] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[16:32:15] *** Parts: dsrt^ (~dsrt@209.65.131.194) ()
[16:32:43] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:33:19] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (Ping timeout: 268 seconds)
[16:34:58] *** Joins: RenAdjest (~RenAdjest@user/renadjest)
[16:36:53] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) ()
[16:39:23] *** Joins: gggp (~textual@221.219.72.60)
[16:40:13] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[16:40:36] *** Quits: gggp (~textual@221.219.72.60) (Client Quit)
[16:41:27] *** Joins: kobalt (~rsonx@user/kobalt)
[16:42:21] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[16:44:34] <bjs> mrig: no it‚Äôs a syntax highlighter, it uses regex to match bits of language to highlight
[16:45:21] *** Joins: kmq (~kmq@x4db91f91.dyn.telefonica.de)
[16:46:05] *** Joins: gggp (~textual@221.219.72.60)
[16:46:06] <mrig> Ah ok, just a more finely built highlighter then, if you are recommending it?
[16:46:12] *** Quits: Auron (~Auron956@user/auron) (Ping timeout: 250 seconds)
[16:47:07] <pyzozord> mrig: I like that video, I fully agree
[16:49:22] <pyzozord> mrig: but I don't thin tech ginas are naive, they are just greedy to the poin where they don't care
[16:49:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[16:49:37] *** Joins: flynn (~mcbloch@user/flynn)
[16:51:12] <bjs> mrig: I wasn‚Äôt recommending, I was using it as an example of a common syntax highlighter that uses regex and sometimes gets contextual information wrong because of it
[16:51:52] <mrig> Oh I see
[16:51:56] <mrig> bjs^
[16:52:22] <mrig> pyzozord: initially naive perhaps, the foundation.
[16:54:12] <pyzozord> mrig: oh yes, they probably did start as naive and wellmeaning engineers. Once they got successful the bad apples crept in and overtook it from the inside
[16:55:28] <pyzozord> Although I'm not sure. Steve Jobs wasn't really all that well meaning in the first place. Mostly just concerned with his corporate success. Same with Bill Gates.
[16:56:50] <pyzozord> But perheps not quite to the evil leves we are in right now, that's a product of carefully curated evolution of those initial seeds by greedy actors
[16:56:51] <Izem> this was happening before those kids got there wasn't it?
[16:57:55] <Izem> e.g. A9.com and apparantly some stuff with dns?
[16:58:17] <Izem> I'm just talking about adtech though I didn't read the article
[16:59:12] *** Quits: elnavigator (~elnavigat@105.196.100.217) (Ping timeout: 250 seconds)
[16:59:37] <pyzozord> I mean it was before too, just on smaller scale, in person advertisers walking from house to house etc. Just the technology amplified it to unbelivable heights
[16:59:46] *** Joins: lapno (~lapno@eoh163.neoplus.adsl.tpnet.pl)
[17:00:40] <Izem> yeah I huge market for user data doesn't pop up over night
[17:00:41] <pyzozord> Funn way to think about Facebooks and Googles as the digital, automated, megacorporationalized snake oli salsemen
[17:00:48] <Izem> it's pretty bad right now though
[17:01:01] <Izem> s/I/a
[17:05:13] *** Joins: EmOwl (~Em@202.150.113.111)
[17:06:20] *** Joins: enyc (~enyc@user/enyc)
[17:07:25] <pyzozord> except they don't sell snake oil, they sell their ability to sell, and anyone can buy
[17:07:40] *** Joins: elnavigator (~elnavigat@105.196.100.217)
[17:09:05] *** Joins: Guest17 (~Guest17@37.157.32.226)
[17:09:24] *** Joins: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901)
[17:09:52] <Guest17> hehe
[17:09:59] <Guest17> good evening :)
[17:10:06] <EmOwl> Good evening, Guest17 ! 
[17:10:09] <EmOwl> How goes things?
[17:10:13] <Guest17> wild
[17:10:18] *** Parts: gaussblurinc (~lolgear@broadband-77-37-173-68.ip.moscow.rt.ru) ()
[17:10:46] <Guest17> was talking to a friend
[17:10:58] <EmOwl> Yeah?
[17:11:00] <Guest17> that it is easier to get into programming in usa
[17:11:03] <Guest17> than uk :)
[17:11:07] <EmOwl> Howso?
[17:11:20] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 250 seconds)
[17:11:22] <Guest17> different culture
[17:11:32] <Guest17> usa is more entrepreneurial 
[17:11:48] <EmOwl> So this is more like, programming professionally than as a hobby? 
[17:11:57] <Guest17> 100%
[17:12:05] *** Joins: uzee (~uzee@86.36.37.198)
[17:12:36] <EmOwl> Ah yeah, I suppose that makes sense. Hobby-wise I'd say it's really just as easy as someone is willing to learn it 
[17:12:46] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[17:13:46] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[17:14:09] *** Quits: Izem (~Izem@65.95.41.242) (Quit: Going offline, see ya! (www.adiirc.com))
[17:16:24] <mrig> There is a possibility for abuse of this system that is so obvious, yet it remains an unspoken topic; Perhaps the domains concerned are not yet conscious of it, or something like that.
[17:16:45] <mrig> the targeted ads and profiling.
[17:16:55] <Guest17> https://www.youtube.com/watch?v=YqseTGOnzYg lol
[17:16:57] <bayaz> Title: Expensive Boat Fails Caught On Camera | FailArmy 
[17:17:16] <mrig> Perhaps the psychology buffs are just to ignorant of the technology?
[17:18:33] <EmOwl> mrig, I hope you don't mind me asking, abuse of what system? 
[17:18:47] <pyzozord> Yeah it seems that society at large is not interested in more pronounced measures until they see things getting drastically worse. And aside of the fact that individuals get more depressed, many people can ejoy the new comforts. So at large people still feel that things are better then they were
[17:19:05] <mrig> EmOwl: not at all, the collection of data and profiling of people for targeted add.
[17:19:21] <mrig> I suppose the information is just there though.
[17:19:24] <EmOwl> mrig, Oh yeah. I hate that. Real 1984 stuff right there 
[17:19:28] <pyzozord> And the suggestion algorithms
[17:19:45] <EmOwl> Sadly it seems so many people just don't care about it, even in spite of the actual long-term implications it has 
[17:20:20] <mrig> EmOwl: when combined with some of the psychological techniques, that are actually 
[17:20:30] <mrig> innate to certain types of people.
[17:21:31] <pyzozord> it's very hard to see for people since they lost the bigger context by the result of being kept compartmentalized
[17:22:12] *** Quits: Nact (~l@2a02:a03f:c0b0:f600:3253:5994:1b4f:e854) (Ping timeout: 258 seconds)
[17:22:25] <mrig> EmOwl: I think that for the most part it is because they are ignorant of it.
[17:22:43] <mrig> It is not that they dont care, it is that they are not conscious of it.
[17:23:22] <EmOwl> I mean, sadly it's become such a mainstream part of society that trying to fight that ignorance might not even prove too effective. The actual long-term implications of predictive algorithms are the kind of things written in old dystopian books and all that 
[17:23:26] <mrig> pyzozord: yes compartmentalisation of thought, the old mirror effect.
[17:24:19] <mrig> EmOwl: Oh I see the future as positive, there is no fight, the reality that we are discussing will just become more and more self evident.
[17:24:45] <mrig> that there will be a flip or a flop, and off we will go on some new tac.
[17:24:48] <pyzozord> I personally experience this as even more extreme: if you are not participating in this process, or even acknowledge it you are labled as the weird one
[17:24:56] *** Joins: cthulchu (~Cthulchu@94.153.89.70)
[17:24:58] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 252 seconds)
[17:25:01] <EmOwl> mrig, Yeah, I suppose. I'm fine with things like it when it's used properly. But how it's being used mixed with the general public ignorance and lack of understanding kind of paints a sour picture of the future of it in my mind
[17:25:24] *** Quits: cthulchu (~Cthulchu@94.153.89.70) (Read error: Connection reset by peer)
[17:25:30] *** Joins: cthulchu_ (~Cthulchu@94.153.89.70)
[17:25:58] <EmOwl> The point is, something like it used in the wrong context by the wrong people could have very bad implications and usage is all I'm saying, so instead of just used for marketing but used for any number of things. Especially on the scale of a government and an entire nation for less-than-savoury goals
[17:26:07] <mrig> EmOwl: in the light of day, it is really all based in some very pretty math and natural phenomenon.
[17:26:35] <Guest17> it's very hard to see for people since they lost the bigger context by the result of being kept compartmentalized yep lol
[17:26:41] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[17:26:53] <EmOwl> Compartmentalized? Please elaborate 
[17:27:12] <pyzozord> by the suggestion algorithms deciding what you see
[17:27:42] <EmOwl> Ah
[17:27:42] <mrig> navel gazing has become a world wide pastime, at the same time, perhaps encouraged by this.
[17:27:59] <mrig> and not in any deep subjective way either.
[17:28:17] <pyzozord> that builds distorted image of reality. It may seem like everyone is going on vacation to Italy now and you may feel fabricated peer pressure to go on vacation to Italy too
[17:28:17] <mrig> In an objective, me first way.
[17:28:46] <EmOwl> I see, thank you for elaborating on the point, pyzozord 
[17:29:19] <mrig> pyzozord: oh the not being a part of it thing, I just see as a flock of birds acting together, so it does not bother me; Find it to be quite pretty.
[17:29:25] *** Joins: nrl^ (~nrl@209.65.131.194)
[17:29:42] <mrig> it is not that people are mindless, it is that there minds are acting as one.
[17:30:43] <pyzozord> I am not found of crowds or masses. I mostly think they devaluate to the lowest common denominator
[17:30:44] <mrig> It is a fascinating area of UI though, and it is UI.
[17:30:57] <mrig> pyzozord: oh it is all natural though.
[17:31:41] <mrig> value is something that we ascribe at a much higher level of abstraction :D
[17:32:00] <pyzozord> mrig: true, I guess I just wish people more conciously chose the right flock for them, one that will bring them up instead of down
[17:32:12] *** Quits: gggp (~textual@221.219.72.60) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[17:32:32] <mrig> UI projecting outwards rather than taking input inwards.
[17:32:43] <mrig> very wrong.
[17:32:46] <pyzozord> and suggestion algorithms don't are about that, they'll find the flock that will make you do whatever the highest bidder wants you to do
[17:32:54] <mrig> I think, obviously only opinion though.
[17:33:20] *** Joins: humky (~humky@user/humky)
[17:33:31] <mrig> pyzozord: this in the hands of machiavellian people is extremely dangerous.
[17:33:45] <mrig> Business is more than just the money.
[17:33:52] *** Joins: Lisyn (~lisyn@user/deepspace-link)
[17:34:06] <pyzozord> Yes, from my personal experience that's exactly the kind of people attracted to this kind of thing sadly
[17:34:13] <mrig> yep
[17:34:28] <EmOwl> Sadly I'm probably gonna have to head to bed in a while. It's 1 am. Hope you lot have a great day! 
[17:34:52] <mrig> but the more obvious this becomes, the more believable is ant science that describes it.
[17:34:53] <Guest17> drink coffee lol
[17:34:55] <mrig> any
[17:34:58] <Guest17> and stay awake
[17:35:21] <mrig> EmOwl: good night!
[17:35:36] <pyzozord> ant science sounds interesting :D Ant colony comes to mind
[17:35:36] *** Quits: elnavigator (~elnavigat@105.196.100.217) (Ping timeout: 250 seconds)
[17:35:38] <EmOwl> Guest17, I wish, I'm only up because I have no self control and I have to do exercise and stuff tomorrow to get in shape for my job application. I failed the first physical assessment so failing the re-test wouldn't be great for me
[17:35:52] <mrig> pyzozord: so I see it as good, the evidence becomes more apparent by the day :)
[17:36:07] <Guest17> joining police?
[17:36:07] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[17:36:12] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Client Quit)
[17:36:13] <Guest17> in uk requirements are lax lol
[17:36:19] <mrig> a whole new field of science that needs illumination.
[17:36:26] <EmOwl> Joining the NZDF, as an armourer. 
[17:36:37] <EmOwl> I'll be the person making sure guns explode in the CORRECT direction
[17:36:40] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[17:36:46] <EmOwl> As in, not back into the user.
[17:37:09] *** Joins: qu4nt1n|2 (~qu4nt1n@78.198.214.34)
[17:37:14] *** Quits: qu4nt1n|2 (~qu4nt1n@78.198.214.34) (Client Quit)
[17:37:21] *** Joins: azed (~azed@102.108.9.164)
[17:37:35] <pyzozord> mrig: yes, I'm also glad that facebook is not growing a lot of new users. Hopefully the network is dying. Although it looks like other social media is replacing it like tiktok
[17:37:57] <pyzozord> never used it but from what I understand it's a bit like Vine was
[17:38:12] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[17:38:20] <pyzozord> which is just the idea of twitter but with video
[17:38:55] <mrig> There are people making their lively hoods from home selling pornography online; Pretty whacked if you ask me.
[17:39:09] <mrig> I gather some platform has just banned it.
[17:39:12] <Guest17> not easy now
[17:39:18] *** Quits: EmOwl (~Em@202.150.113.111) (Quit: Spaghettified by a blackhole)
[17:39:25] <Guest17> only fans stopped porn on their platform
[17:39:47] *** Quits: molt (~molt@79.140.150.21) (Read error: Connection reset by peer)
[17:39:53] <PlanckWalk> (which is funny because it's famous for porn)
[17:40:11] *** Joins: molt (~molt@79.140.150.21)
[17:40:14] <Guest17> you can still make money on another platforms
[17:40:24] <Guest17> if you are sexy or fun lko
[17:40:26] <Guest17> lol
[17:41:07] <mrig> But money is only supposed to be something that smooths over the ups and downs that a culture goes through.
[17:41:11] <mrig> a tool.
[17:41:19] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:41:34] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Ping timeout: 268 seconds)
[17:41:41] <Guest17> get it first then talk lol
[17:41:51] <mrig> why?
[17:41:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:41:59] <Guest17> experience
[17:42:02] <mrig> I am studying science, dont need money.
[17:42:08] <Guest17> whatever is not experienced is not real lol
[17:42:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:43:09] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:43:15] <mrig> Anyhow, as I say, the empirical evidence is now piling up :D
[17:43:22] <mrig> and it is all pretty much free.
[17:43:36] <mrig> Future looks bright in some fields :)
[17:43:44] *** Joins: elnavigator (~elnavigat@105.196.100.217)
[17:44:01] <mrig> Guest17: what is real depends greatly upon your context, are you context free?
[17:44:03] <mrig> :P
[17:44:44] <pyzozord> I need a certain level of comfort but not much beyond that. I think I could live in a cabin in woods if I build it up enough to have solar/air/hydro electricty
[17:45:30] <pyzozord> Well not true, I need good health care system.
[17:45:45] <mrig> heh, good luck in finding that :P
[17:46:25] <pyzozord> mrig: honestly The health care system in The Netherlands is pretty amazing. And absolutely free.
[17:46:28] <Guest17> theory
[17:46:31] <Guest17> do and see lol
[17:46:53] <pyzozord> mrig: by far the strongest factor keeping me in the country
[17:47:00] <Guest17> same as most
[17:47:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:47:07] <Guest17> simply dont use it
[17:47:11] *** Joins: src (~src@user/src)
[17:47:12] <mrig> pyzozord: The one thing that i did notice on the occasion that I did visit the Netherlands was that you could see where the taxes were being spent.
[17:47:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:47:29] <Guest17> its not mandatory to use health system lol
[17:47:44] <arahael> r
[17:48:02] <mrig> It is the validity of some of the doctrines that concern me, in many health systems.
[17:48:14] <mrig> not the system itself but some of the underlying beliefs.
[17:48:16] <pyzozord> yes, taxes are tough, but they get tougher as you earn more. The gap between the ritch and the poor is norrower than in many other countries
[17:48:31] <mrig> pyzozord: but you do see where they are spent is what I mean.
[17:48:35] <Guest17> which country would you go to if you would not care about health system?
[17:48:43] <Guest17> taxes ehehe
[17:48:46] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:70b0:8bd4:3605:ce5c)
[17:49:03] <pyzozord> Guest17: somewhere pretty
[17:49:04] <mrig> Guest17: I would like to live somewhere that people live closer to nature.
[17:49:07] <Guest17> maybe afganistan?>
[17:49:20] <jelly> the countryside
[17:49:40] <Guest17> cheap food and plenty of opportunities in afganistan
[17:49:45] <mrig> Guest17: sure why not, up in the Himalayas there are still valleys that have never been explored nor documented.
[17:49:52] <Guest17> no mountains
[17:49:58] <Guest17> some poppy fields lol
[17:50:01] *** Quits: cthulchu_ (~Cthulchu@94.153.89.70) (Ping timeout: 248 seconds)
[17:50:10] <Guest17> or join afgani government :P
[17:50:43] <mrig> Would love to see the hindu kush
[17:50:55] <mrig> hindustan
[17:51:06] <pyzozord> I'd wanna spend some time in greece I think it's super cool on islands there. Iceland... Hmm what else
[17:51:13] <mrig> the nomenclature gets a bit fuzzy in modern time :D
[17:51:26] <mrig> due to imperialist practices.
[17:51:31] <Guest17> lets say if person has a high risk tolerance what is a best place to make money fast?
[17:51:32] <Guest17> lol
[17:51:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[17:52:06] <mrig> Guest17: you could go mine the sun for helium?
[17:52:09] *** Joins: mathAndRhetorics (~juliaEnv@ip-86-49-255-128.net.upcbroadband.cz)
[17:52:10] <Guest17> usa army is one of such places
[17:52:30] *** Quits: mathAndRhetorics (~juliaEnv@ip-86-49-255-128.net.upcbroadband.cz) (Client Quit)
[17:52:34] <Guest17> you get % from stuff going via base
[17:52:35] *** Quits: kobalt (~rsonx@user/kobalt) (Ping timeout: 245 seconds)
[17:53:13] <Guest17> coding wise maybe join some insane startup in iran or north korea
[17:53:13] <mrig> Guest17: what sort of programming are you interested by?
[17:53:21] <pyzozord> Generally many old places with amazing views and/or very historical cities
[17:53:28] <Guest17> mrig I dontr like cowards lol
[17:53:37] <mrig> what?
[17:53:46] <mrig> Guest17: you are not making a lot of sense right now.
[17:53:47] <Guest17> so gotta be wild
[17:53:57] <Guest17> my preference is to work with wild people
[17:54:05] <Guest17> including coding
[17:54:05] <mrig> Guest17: what type of programming do you like?
[17:54:11] <Guest17> type?
[17:54:11] <pyzozord> That was a good question, I'll spend few hours now daydreaming and looking at the map :P
[17:54:18] <Guest17> its all the same
[17:54:20] <mrig> Guest17: sure, which domain
[17:54:23] <Guest17> all languages are similar
[17:54:26] <Guest17> i like all
[17:54:31] <Guest17> front back ml
[17:54:32] <Guest17> xd
[17:54:37] <mrig> But what do you like to do with them?
[17:54:43] <Guest17> make money
[17:55:12] <mrig> Guest17: how very dull.
[17:55:20] <mrig> SO sorry for you.
[17:55:29] <Guest17> haha said someone who is scared :P
[17:55:35] <mrig> scared?
[17:55:39] <Guest17> living in north korea is not dull
[17:56:14] *** Joins: sevla (~platen@user/sevla)
[17:56:25] <mrig> Guest17: geez, you are like a one track record.
[17:56:38] <mrig> do you have anything on the b side? :P
[17:56:42] <X-Scale> it's Julius
[17:56:48] <X-Scale> the same old troll
[17:57:23] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:57:25] <mrig> well all animals have there right to be :)
[17:57:47] <Guest17> dont worry cowards
[17:57:48] <Guest17> :)
[17:57:53] <Guest17> your body reminds you
[17:58:03] <mrig> Since humans evolved a conscious, we got promoted to the rank of care takers :)
[17:58:13] <mrig> Guest17: I am a happy cow ward yes :P
[17:58:14] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[17:58:22] <Guest17> i does not exist
[17:58:23] * mrig lassos Guest17
[17:58:27] <Guest17> physical body does
[17:58:28] <Guest17> ;)
[17:58:34] *** Quits: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901) (Ping timeout: 250 seconds)
[17:58:47] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Killed (NickServ (GHOST command used by RenAdjest2)))
[17:58:55] *** RenAdjest2 is now known as RenAdjest
[17:59:28] <Guest17> mrig offline or online personality is same, since you claim to be smart you do understand people will treat same personality same way ;)
[17:59:29] <Guest17> xd
[17:59:39] <Guest17> there is no safe space lol
[17:59:50] <mrig> Guest17: what are you on about?
[18:00:04] <Guest17> so a stupid then? said smart? xd
[18:00:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:00:15] <mrig> Guest17: I made no such claim, now full well how limited I am :)
[18:00:36] <mrig> Guest17: would you like to be quieted?
[18:00:43] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[18:01:03] <mrig> You are getting quite close to being insulting and this conversation went off the rails quite a few posts ago.
[18:01:05] <Guest17> mrig re read and dont beg me lol
[18:01:15] *** Joins: kobalt (~rsonx@user/kobalt)
[18:01:51] *** Joins: Crescendo (~Crescendo@user/crescendo)
[18:03:40] <mrig> well little point as you are not registered here, Have a nice day anyhow.
[18:03:56] *** Quits: Doffi (~doffi@91.132.197.188) (Read error: Connection reset by peer)
[18:04:16] *** Joins: Doffi (~doffi@91.132.197.188)
[18:05:14] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[18:05:55] *** Quits: kobalt (~rsonx@user/kobalt) (Ping timeout: 245 seconds)
[18:05:55] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 245 seconds)
[18:06:04] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:06:10] <mrig> Hum dealing with long lists of attributes, I really should be automatically generating my code at the moment. Still not quite make the thought leap into doing that.
[18:06:32] <mrig> Will do soon I think, seems to be brewing.
[18:08:48] <pyzozord> Guest17: irc is my safe space :P
[18:09:22] <pyzozord> safe from all the social games and office politics
[18:09:31] <Guest17> bs lol
[18:10:02] <pyzozord> unfortunatelly infested with trolls, but better trolls than office politics. At least the game has no real value attached to it
[18:10:13] <Guest17> pyzozord well dont troll
[18:10:17] <Guest17> ;)
[18:10:34] *** Quits: azed (~azed@102.108.9.164) (Quit: WeeChat 3.2)
[18:10:41] <Guest17> plus with no one to talk too you will eat each other
[18:10:41] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[18:10:43] <Guest17> haha
[18:11:12] <Guest17> safe space aggression is same bs as office politics xd
[18:11:53] <mrig> Not everyone feels the need for safe spaces and security, those are rakshas generally.
[18:12:02] <mrig> the sanskrit word here is excellent.
[18:12:10] <Guest17> irc need not to be occupied by mental safe spacers, who ruined discord servers lol
[18:12:15] <mrig> love this logical language ;)
[18:12:29] <Guest17> people want energy and so they will not stay in a safe space ;)
[18:12:35] <mrig> Guest17: aww are you needing some attention?
[18:12:46] <Guest17> instead they will invade and try to shut down any thing online
[18:12:52] <Guest17> parasites xd
[18:12:53] * mrig pats and strokes his new pet Guest17 :P
[18:13:09] <Guest17> however who said cure does not exist :P
[18:13:21] <mrig> pyzozord: would you like some popcorn?
[18:13:32] <Guest17> a) ignore them 2) use creativity xd
[18:13:49] <pyzozord> mrig: nah thanks, I'mma order some food and spend some time with google maps
[18:14:13] <mrig> Guest17: nice, yes I am going to harness you and feature you in a game :D
[18:14:31] <Guest17> as time goes by body works lol
[18:14:40] <Guest17> reality xd
[18:15:07] <Guest17> also dogs can sniff such people ;)
[18:15:20] <Guest17> so acting skills are of no use
[18:15:31] <Guest17> to try and pretend offline lol
[18:15:32] *** Joins: img (~img@user/img)
[18:16:10] <pyzozord> I'm still confused about the context-free vs context-sensitive grammars. I checked out few popular books and they don't seem to mention "context-sensitive" almost at all
[18:16:43] <mrig> pyzozord: it is really very simple, does the context in which a token is read effect its meaning?
[18:16:58] <mrig> if it does, then it is not context free.
[18:17:14] <mrig> context free grammar are used to constrain language with context.
[18:17:26] <mrig> to make them manageable.
[18:17:39] <mrig> Unless I am mistaken this is how I currently perceive it.
[18:17:56] *** Joins: independent56 (~independe@148.122.187.2)
[18:18:17] <mrig> used to describe them, categorise them.
[18:18:46] *** Quits: inky (~inky@46.36.119.19) (Remote host closed the connection)
[18:19:06] *** Joins: inky (~inky@46.36.119.19)
[18:19:25] *** Quits: elnavigator (~elnavigat@105.196.100.217) (Ping timeout: 252 seconds)
[18:19:40] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:19:50] <mrig> I read an interesting description of the POSIX file system and the C language that has stuck in mind, if the POSIX file system had been made to be context free it might have worked better. It is not, and the context of the OS effects how the file system is formed.
[18:20:35] <mrig> As such cmake and friends are required to implement a hundred special rules for each different context.
[18:20:38] <pyzozord> From what I understand now, C as has a "context-free" syntax (A) (B) is a valid "context-free" syntax, but it has "context-sensitive" semantics, meaning (A) (B) can be semantically correct as a type cast or function call or may be not sementically correct, depending on what A and B are
[18:21:35] <mrig> In C the word 'static' has a different meaning depending upon its context.
[18:21:40] *** Joins: independent56 (~independe@148.122.187.2)
[18:21:57] <pyzozord> meaning where it is located?
[18:22:01] <mrig> yes
[18:22:10] <mrig> its context effects the meaning.
[18:22:20] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[18:22:36] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:22:37] <mrig> you need a stack to remember which context you are in.
[18:22:50] <mrig> or a function scope
[18:23:20] *** Joins: independent56 (~independe@148.122.187.2)
[18:23:31] <pyzozord> hmmmm I see some corelation between these grammars and finate state automata
[18:24:40] <pyzozord> I also saw example of context sensitive syntax here https://www.geeksforgeeks.org/context-sensitive-grammar-csg-and-language-csl/ and I'm not sure how it relates to for example C
[18:24:41] *** Quits: Lisyn (~lisyn@user/deepspace-link) (Remote host closed the connection)
[18:24:41] <bayaz> Type: text/plain; charset=utf-8 Size: 452 B 
[18:24:59] <pyzozord> That example seems to be a kind of self referential syntax
[18:25:14] <pyzozord> but that seems different from the (A) (B) example 
[18:25:19] <pyzozord> or the static example
[18:25:22] *** Joins: plastico (~plastico@neomutt/plastico)
[18:25:32] <mrig> I go cross eyed when I see the majority of the languages used to describe all this.
[18:25:42] <mrig> so ugly and so contrived somehow.
[18:25:53] <mrig> seems to make it more complicated that it really is.
[18:26:16] <pyzozord> yeah the formal definition goes over my head, but below is a nice example with just AaBb letters expanding
[18:26:20] <mrig> Perhaps it will look and be legible as I progress.
[18:26:49] <mrig> I hate the use of acronyms too.
[18:26:56] <Guest17> well they dont care how you feel lol
[18:27:01] <mrig> prefer language that remains lucid.
[18:27:18] <mrig> love sanskrit, far more civilised as a scientific langauge.
[18:29:29] <mrig> In sanskrit methodology the meanings do not shift about all the time.
[18:29:39] <mrig> I hate the way that this is done.
[18:30:47] <mrig> That said, I do need to study it some more so that I can explain this with more clarity.
[18:32:21] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 258 seconds)
[18:33:55] *** Joins: gggp (~textual@221.219.72.60)
[18:35:14] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:36:36] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:37:31] *** Joins: independent56 (~independe@148.122.187.2)
[18:38:33] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:39:24] *** Joins: independent56 (~independe@148.122.187.2)
[18:40:16] *** Quits: jess (~jess@libera/staff/jess) (Quit: brb real quick)
[18:40:38] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:40:41] *** Joins: jess (~jess@libera/staff/jess)
[18:40:54] *** Joins: independent56 (~independe@148.122.187.2)
[18:42:46] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 250 seconds)
[18:42:52] *** Joins: kZel (~kZel@90.199.64.48)
[18:43:35] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[18:43:56] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:44:53] *** Quits: Guest17 (~Guest17@37.157.32.226) (Quit: Client closed)
[18:45:26] *** Joins: nekodesu (~bit@user/nekobit)
[18:45:43] *** Joins: azed (~azed@102.108.9.164)
[18:46:22] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:47:06] *** Joins: CaptainJ (~CaptainJ@141.226.12.62)
[18:48:48] <bjs> pyzozord: I think I was trying to say something similar earlier,  but I couldn't quite word it in a way that makes sense.
[18:49:04] *** Joins: kaivai (~kaivai@user/kaivai)
[18:49:42] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[18:49:45] <bjs> pyzozord: when it comes to implementing a language there is in practice a wide range to choose from for what the "parser" does. Often the simplest way to implement a language is to make a (real) context-free parser and then have a separate pass over the top that understands simple contextual information (such as scopes and types and stuff)
[18:51:39] <bjs> pyzozord: when we say "semantics" of a language we often mean "interpreting" the language not just parsing it.  e.g. maybe C has context-free syntax but it's a turing complete language.   (Obviously as you know there are arguments as to why it's syntax is not really context-free perhaps and why the language might not be turing complete)
[18:51:53] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[18:52:52] <bailsman> bjs: is that first pass what they call a tokenizer
[18:53:33] <bjs> bailsman: a typical compiler pipeline might look like "Tokenizer -> Parser -> Checker -> Optimizer -> Code Generation"
[18:54:55] <bjs> bailsman: but it's not well-defined precisely *what* should go into which step and different compilers (even for the same language) may choose to do things differently.
[18:55:34] *** Quits: gggp (~textual@221.219.72.60) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[18:57:00] <mrig> What about when the intput is being parsed to be put into a programs specific datatypes?
[18:57:01] *** Joins: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901)
[18:57:21] <mrig> I suppose this is rather dependant upon the specific use case.
[18:57:57] <mrig> a languages specific data types, would be more accurate.
[18:57:57] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:58:00] <bjs> mrig: what do you mean?
[18:58:38] <mrig> When parsing a document, that has a generic form, such as xml, and marshalling that data into a program.
[18:58:51] <bjs> mrig: I'm not following
[18:59:17] <mrig> Well if you are not generating code from a parser but are using it to set up your programs state.
[18:59:43] <bjs> mrig: okay,  what about that case?
[18:59:44] <mrig> to set the state of a state of another state machine would be the generic term I suppose.
[19:00:08] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[19:00:23] <mrig> I was wondering if the stages are as clearly defined, if there are methodologies described, that sort of thing.
[19:00:32] *** Joins: independent56 (~independe@148.122.187.2)
[19:01:06] *** Joins: audiocat (~audio@2603-8081-1801-3bb5-def8-5e99-ae61-1013.res6.spectrum.com)
[19:01:08] <mrig> Presumably parsers are used every time two programs interact as well as when compiling programs.
[19:02:16] <bjs> mrig: oh.  I specifically said they're *not* well-defined and that even two compilers for the same program for the same language can have different stages.
[19:02:46] <bjs> mrig: yeah parsers can appear in lots of places, e.g. it's common to have xml and csv and json parsers inside libraries that instead of optimizing and code generation make some datatype to return
[19:03:47] <pyzozord> Is there some oficial texts that defines these things? Ugh I guess that would be some Chomsky's papers about grammars. 
[19:03:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:04:02] <pyzozord> I'm not ready to read that kind of stuff
[19:04:24] <bjs> pyzozord: pretty much any standard textbook on computation + languages would do it in this modern way
[19:05:03] <mrig> bjs: Ah right yes, so it really is a case of getting used to thinking about them and practice.
[19:07:00] <mrig> pyzozord: I came across an early one a while back, must finish reading it actually, now that you mention.
[19:07:01] <pyzozord> bjs: from what I heard literature on compilers is considerably outdated atm
[19:07:02] <mrig> https://www.sciencedirect.com/science/article/pii/S0019995859903626
[19:07:28] <pyzozord> mrig: oh nice thanks
[19:07:33] <bjs> pyzozord: compiler technology books will be yes,  but books on the underlying computer science (the formal languages and their hierarchy) are not
[19:07:47] <bjs> pyzozord: sipster's "Introduction to the Theory of Computation" is a classic here
[19:07:48] <pyzozord> bjs: just realized I confused those two
[19:08:12] <mrig> A google scholar search with the maximum date set to 1960 throws up some more gentle reading than the modern stuff.
[19:09:26] <bjs> pyzozord: and books with similar titles will cover similar things; look for books that cover formal languages, automata, regular languages+finite state machines, context-free-languages + pushdown automata, context-sensitive languages + linear-bounded automata and finally Turing machines and decidability.  These form the basis of what "computation" is formally and theoretically 
[19:10:44] <bjs> pyzozord: parsers typically live in the regular language/context-free language territory and that kind of resource will explain exactly what those terms mean and what machines that accept them look like and how the grammars relate to the languages and all that
[19:10:44] <pyzozord> yeah that sounds like 101 of theory of computation
[19:11:14] <mrig> https://www.sciencedirect.com/science/article/abs/pii/S0049237X09701041
[19:11:32] *** Quits: pandakekok9 (~job@wikimedia-commons/pandakekok9) (Remote host closed the connection)
[19:12:09] <pyzozord> nice! that looks like right from the source
[19:12:25] <bjs> pyzozord: yes,  I mean it's the equivalent of a textbook on linear algebra;  if you just want to make neural networks in a pre-made library no you don't need to read Strang, but if you actually want to build your own library to make your own ones and to understand things then yes this kind of textbook is a good idea
[19:12:35] <bjs> although it won't tell you *how* to write a parser or a compiler, or even get anywhere near
[19:13:27] *** Joins: rxndxs (~ed@201.160.157.102.cable.dyn.cableonline.com.mx)
[19:13:54] *** Quits: jess (~jess@libera/staff/jess) ()
[19:14:14] *** Quits: azed (~azed@102.108.9.164) (Quit: WeeChat 3.2)
[19:14:37] <pyzozord> looks like I will need to learn more math before I can get deeper into the theoretical subjects
[19:14:47] <pyzozord> so that will have to wait few years
[19:15:13] *** Joins: dan1001 (~dan01@2a02:2f09:3418:7e00:5c29:9d8d:4303:bd0)
[19:15:34] <pyzozord> but I want to try that idea of symbol table + backtracking + recursive descent. I feel like that combination migh be potentially able to parse any programming language I can imagine
[19:15:38] <bjs> pyzozord: computation is basically its own field, there's very little pre-requisite math needed
[19:15:51] *** Joins: snake (~snake@user/snake)
[19:16:26] <bjs> pyzozord: well it can parse anything that has an underlying context-free structure, with some extra constraints on what e.g. scoping rules
[19:16:37] <pyzozord> bjs: ok good to know, still there is that certain level of experience with symbols and generally structured and rigorous thinking that tires me very quickly
[19:16:57] *** Quits: inky (~inky@46.36.119.19) (Ping timeout: 248 seconds)
[19:17:17] <mrig> pyzozord: the source is always a lot easy to drink than the water that all the kiddies have been playing in :D
[19:17:36] <rxndxs> i just got on, are you good fellas talking about compilers maybe ? c:
[19:17:53] <bjs> pyzozord: like with most fields of mathematics,  computation has its own symbols that you don't find anywhere else (or they mean different things elsewhere) so learning other things doesn't help so much.  The only thing that might help is just broad background knowledge of basic boolean algebra and logic
[19:17:55] <pyzozord> so I just need a general experience in operating in that kind highly abstract, highly structured and highly rigorous systems. Programming is a nice primer for that, but programming is also automates part of it. So those are the parts I think I am the weakest at
[19:18:22] <bjs> pyzozord: programming is a very different discipline to computer science in the same way that engineering is quite different to theoretical physics :)
[19:18:37] <bjs> but there is of course a spectrum inbetween
[19:18:40] *** Quits: dan01 (~dan01@2a02:2f09:3418:7e00:ad93:1f1f:fb82:d901) (Ping timeout: 240 seconds)
[19:18:49] <GeDaMo> rxndxs: I've not been following closely but it's parsing and grammars
[19:19:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:21:08] <pyzozord> rxndxs: yeah parsing and grammars. Whether C is context-free. What is the difference between context-free and context-sensitive grammar. What is the difference between syntax and semantics. That kind of thing
[19:21:10] *** Quits: Doffi (~doffi@91.132.197.188) (Read error: Connection reset by peer)
[19:21:19] *** Joins: Doffi (~doffi@91.132.197.188)
[19:21:32] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[19:21:46] <rxndxs> nice, i like the topic, i've been meaning to write my own compiler, its kinda my current project
[19:22:13] <bjs> pyzozord: well a context-free grammar is simple, the grammar is made of productions like `N -> ...` where N is a single non-terminal, context-sensitive languages allow you to put non-terminals on the left-hand side of the production
[19:22:36] <bjs> pyzozord: e.g. `ab -> ba` (to swap a and b) is a valid context-sensitive rule but not a valid context-free one.
[19:22:37] <pyzozord> oh nice! that is a very nice definition
[19:22:38] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 250 seconds)
[19:22:43] <[itchyjunk]> What kinda of stuff do people learn before writing a compiler
[19:22:57] <[itchyjunk]> writing compiler seems to be a thing people do once they feel like they are seasoned programmer right?
[19:23:02] <bjs> [itchyjunk]: as much as you want or as little as you want
[19:23:13] <pyzozord> however that seems to have a lot of implications, I can't wrap my head around that right now. That there might be non-terminals on the left side
[19:23:22] <[itchyjunk]> oh you can start on a compiler early in programming journey?
[19:23:29] <bjs> [itchyjunk]: it's also a thing that very experienced programmers do to write DSLs to do specific useful things in their job, and it's also a thing more beginners do to try learn and understand
[19:23:48] <[itchyjunk]> I used to know a few cool coders back in the day and the 2 most impressive things they did was compiler and writing OS
[19:23:54] <bjs> [itchyjunk]: yes, but don't expect the compiler you write to be very good, my first compiler certainly wasn't :)
[19:23:55] *** Joins: nekobyte (~cat@user/nekobit)
[19:23:59] <[itchyjunk]> what's DSL?
[19:24:11] <[itchyjunk]> oh it it compiles itself, i'd be happy
[19:24:15] <bjs> [itchyjunk]: domain-specific language,  like making mini programming languages to do specific things
[19:24:16] <GeDaMo> Domain Specific Language
[19:24:17] <[itchyjunk]> let alone good in any sense
[19:24:21] <[itchyjunk]> oh i see!
[19:24:30] <[itchyjunk]> that's kinda cool
[19:24:36] <[itchyjunk]> writing DSL because of need
[19:24:37] <rxndxs> [itchyjunk]: i'm taking on the project pretty much as my first big project, i do know quite a lot about the topic but it is a pretty complex task
[19:24:37] *** Joins: inky (~inky@46.36.119.19)
[19:24:40] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[19:24:43] <GeDaMo> Something like SQL for example
[19:24:48] <mrig> Hum, right, I think that is what i'm inadvertently doing right now.
[19:24:56] <mrig> learning to write a DSL
[19:25:13] <[itchyjunk]> Do you need to now asm to write a compiler?
[19:25:17] <GeDaMo> No
[19:25:20] <[itchyjunk]> :D
[19:25:34] <pyzozord> I'm thinking desiging a language for magic the gathering cards would be a cool idea
[19:25:40] <mercenary> anybody can write a compiler. Not many can write a production-quality compiler
[19:25:41] <GeDaMo> You can generate bytecode for a virtual machine or generate C and run it through a C compiler
[19:25:55] <bjs> [itchyjunk]: if you want the compiler to be written in asm or to output asm then yes, but there's no reason you need to know asm to write a compiler at all.
[19:25:58] <pyzozord> well not specifically mtg, but something with that level of flexibility. Mtg is turing complete
[19:25:58] <rxndxs> i mean it probably helps knowing how code is written at low level, can't write something that generates assembly wihtout knowing how to do it yourself right ?
[19:26:07] <bjs> [itchyjunk]: a compiler is just a program that takes one program as input and generates another program as output
[19:26:22] <mrig> Not all compilers compile code, there could be cars coming out of the end of a production line.
[19:26:41] <GeDaMo> "PEG-based transformer provides front-, middle and back-end stages in a simple compiler" http://www.vpri.org/pdf/tr2010003_PEG.pdf
[19:26:41] <bayaz> Type: application/pdf Size: 351.0 kB 
[19:27:09] <mercenary> mrig: that's not compilers. That's EDI
[19:27:25] <mrig> mercenary: semantics.
[19:27:32] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 245 seconds)
[19:27:39] <mrig> what is EDI other than an acronym?
[19:27:54] <mercenary> A bunch of rusty standards
[19:28:00] <mrig> https://www.youtube.com/watch?v=F3FUH9fVC_M <- description of a car compiler :D
[19:28:01] <bayaz> Title: Porsche: High-Level Car Manufacturer | Mega Manufacturing | Free Documentary 
[19:28:18] <[itchyjunk]> bjs, oh compiler doesn't have to turn it to machine code directly then
[19:28:19] <[itchyjunk]> hmm
[19:28:35] <[itchyjunk]> always thought compiler was something that turned english looking stuff to machine understandable stuff
[19:28:50] <[itchyjunk]> so a programming language translator of sorts is also a compiler
[19:28:59] <[itchyjunk]> guess you need to use two languages to do this
[19:29:08] <mrig> Seems to me that compilers are really all about automated transformation of any sort, but I do like to go for the abstraction when I can.
[19:29:09] <bjs> [itchyjunk]: a translator is one way of thinking about it but there's no reason the two ends of the translator cannot be human-readable
[19:29:15] <bjs> [itchyjunk]: i mean that is how normal translators work after all
[19:29:33] <bjs> [itchyjunk]: yes there is an "input" language to the compiler/translator and an "output" language. Just like you'd expect 
[19:29:39] <bjs> French -> German  :)
[19:29:56] <mrig> Love that there is Fourier transforms and theory in this, so looking forward to that part of the study. :D
[19:30:13] <mrig> It is all sound at the end of the day, to my mind anyhow.
[19:30:52] *** Quits: CaptainJ (~CaptainJ@141.226.12.62) (Ping timeout: 250 seconds)
[19:31:21] *** Quits: inky (~inky@46.36.119.19) (Ping timeout: 248 seconds)
[19:31:37] <mrig> mercenary: are you referring to this? https://www.ibm.com/topics/edi-electronic-data-interchange
[19:31:39] <bayaz> Title: What is EDI: Electronic Data Interchange? | IBM 
[19:31:59] *** Joins: inky (~inky@46.36.119.19)
[19:32:19] <mrig> still digesting the first 3 lectures on computational theory though :) 
[19:32:35] <GeDaMo> The Fourier transform translates between the frequency domain and the temporal domain
[19:32:55] *** Quits: zaher_ (~zaher@37.48.159.154) (Quit: Leaving)
[19:33:29] <rxndxs> mrig: are you in college or something like that ?
[19:34:31] <mrig> rxndxs: na, never been one for institutionalised study, am just investigating things that I need for my project.
[19:34:45] <mercenary> mrig: that yes. A car plant doesn't produce anything, it orders lots of things, and bolts/welds them together
[19:35:15] <pyzozord> mercenary: the dream is though to build everything inhouse, tesla is trying it's best to do that
[19:36:37] <mrig> mercenary: a stream of tokens that it assembles, by running context dependant subroutines, following a specific input schema.
[19:36:54] <mercenary> pyzozord: tesla only does that 'because we can'. Most assembly plants work with hundreds of suppliers, and JIT ordering
[19:37:15] *** Quits: Guest8114 (~smlckmatr@2001:470:69fc:105::c885) (Changing host)
[19:37:15] *** Joins: Guest8114 (~smlckmatr@user/smlckz)
[19:37:30] <rxndxs> mrig: damn wish I could be like that, all my life I've had to go to school 'cause that's how it is' ):
[19:37:36] *** Guest8114 is now known as smlck
[19:37:47] <GeDaMo> rxndxs: there's lots of information online for free
[19:37:49] <mrig> GeDaMo: Is this useful for buffering, setting the sizes and that kind of thing?
[19:37:55] <GeDaMo> Which?
[19:39:21] <pyzozord> rxndxs: it's not easy on the other side, you need to make time, build motivation, and struggle through a lot of uncertainty, not know which sources are the best one, and which one are appropriate at your level
[19:39:30] <mrig> rxndxs: I think that everyone learns in different ways, part of which is due to the type of person that they are and other part is the context that they live in; Not an easy way to study, but there are not always other options either.
[19:39:32] <rxndxs> GeDaMo: I know, I don't actually think I need school, in fact, I don't think it is useful at all, but getting a degree seems to be what everyone wants me to do
[19:40:04] <mrig> rxndxs: I worked and traveled for years before coming back to study.
[19:40:05] <rxndxs> I can confidently say that everything I know, I taught myself
[19:41:00] <smlck> mrig: https://youtu.be/rhgwIhB58PA
[19:41:01] <bayaz> Title: The Biggest Myth In Education 
[19:41:27] <mrig> smlck: that guy is really irritating.
[19:41:28] <rxndxs> mrig: so when you say that you mean, work in the industry ? cause my biggest question is how people get into the industry without a degree and how easily
[19:42:23] <mrig> smlck: timing is not mentioned once in the video; But it is true that combinations of formats are best.
[19:43:07] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[19:43:09] <mrig> rxndxs: different for every person, impossible to generalises without knowing someone.
[19:43:12] <pyzozord> rxndxs: I can answer this one: they enter early and for a minimum wage
[19:43:20] <pyzozord> and keep learning on the job
[19:43:35] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[19:44:15] *** Joins: independent56 (~independe@148.122.187.2)
[19:44:25] <pyzozord> rxndxs: on the job and at home. And they start learning much earlier than they start the job. I started learning programming when I was about 14
[19:44:26] <rxndxs> sometimes I feel like I just came too late to the picture, I wish I had been there when technology really exploded, missed it by a couple years :|
[19:44:39] <mrig> smlck: how memory works is not the same in different people, and how those different people work together to make up the collective human mind is completely negated as a subject in it.
[19:44:39] <pyzozord> and the first books I was reading were about c++
[19:44:53] <mrig> quite laughably naive.
[19:45:02] <rxndxs> pyzozord: see for that I think I'm  in time, I got started really early, bot programming and math
[19:45:13] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Ping timeout: 248 seconds)
[19:45:49] <mrig> The way that people react to authoritative people with clipboards or cameras, is however always the same.
[19:46:21] <mrig> as for calling that science, well, need I say more ...
[19:47:46] *** Quits: nekodesu (~bit@user/nekobit) (Read error: Connection reset by peer)
[19:48:02] <mrig> rxndxs: you could write software for people who need it, if it is good it will pay.
[19:48:06] <pyzozord> rxndxs: don't know how tough are things at the entry level now, but I have a feeling they are tougher now, although there are also more facilities now. You can pretty much raise money, go through a good bootcamp and start a programming job after. You'll earn pennies, but you'll have a foothold on the market, and with time and experience things become more fun
[19:48:09] <mrig> there is now way that it could not.
[19:48:31] *** Joins: nekodesu (~bit@user/nekobit)
[19:49:37] <mrig> rxndxs: If you write an ERP that streamlines the running of an as yet non computerised business, and that business starts making more money because of your program; Are you not then the very definition of a professional?
[19:50:08] <pyzozord> rxndxs: can't just do what people before you did. You need to learn from them the metaskills and apply it to your circumstance. Find what opportunities are out there now
[19:50:14] <mrig> That said, if you have no experience of the real world, that is unlikely to happen.
[19:51:01] <rxndxs> yeah I agree with what bout of you are saying, I'm actually reaaaal lucky, I do have a planned internship soon, so I hope to get into the real world quite soon
[19:51:03] <deniska> you can get far by saying "yes" to things
[19:51:14] <mrig> heh
[19:51:25] <deniska> (you can also get into silly circumstances that way though)
[19:51:28] <mrig> the bigger the company, the more yes's required.
[19:51:36] <rxndxs> I have to say tho, I'm sooo very much salty with the education establishment, never did anything good for me, and is just an expense that puts a toll on my family
[19:52:06] <rxndxs> mrig: (I may have already signed a bunch of 'yes' for a certain company :p )
[19:52:14] <mrig> ... and don't forget to nod in agreement a lot too.
[19:52:34] <deniska> rxndxs: the IT world is kinda split between "schools aren't teaching relevant skill anyway" and "schools aren't teaching relevant skills anyway, but we have 50 candidates for this position, may as well ask for a diploma to weed out half"
[19:52:40] *** Quits: nekodesu (~bit@user/nekobit) (Ping timeout: 240 seconds)
[19:53:12] *** Joins: nekodesu (~bit@user/nekobit)
[19:53:18] <pyzozord> the student debt is a crazy thing, I never experienced it but it sounds really bad
[19:53:40] <deniska> the fact that you can't bankrupt on it is just bonkers
[19:53:44] <mrig> rxndxs: the art is always in spotting what the next trend will be, and serving those who chase it. No point in regretting not being there then.
[19:54:39] <mrig> I would not go near student loans.
[19:54:41] <rxndxs> pyzozord: where I live I think it is not as crazy as say the US (i think) a full semester is roughly 5KUSD on any top university
[19:55:03] <mrig> do it if you have the money, but dont sell your soul to the devil.
[19:55:20] <mrig> which is what those loans are in my opinion.
[19:55:26] <rxndxs> mrig: I definitely don't want to, thank god I hold a sponsorship or whatever is called in English
[19:55:35] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[19:55:36] <mrig> cool, that is great.
[19:55:39] *** Quits: xff0x (~xff0x@2001:1a81:52ba:f800:ba30:5326:3556:79a1) (Quit: xff0x)
[19:55:59] *** Joins: independent56 (~independe@148.122.187.2)
[19:56:02] <mrig> so keep your head down, work hard and make the most of it!
[19:56:25] *** Quits: inky (~inky@46.36.119.19) (Ping timeout: 248 seconds)
[19:57:07] *** Joins: Guest39 (~Guest39@83.240.63.197)
[19:57:15] *** Parts: Guest39 (~Guest39@83.240.63.197) ()
[19:58:15] *** Joins: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[19:58:19] <rxndxs> Will do! I know for a fact I can get very far
[20:00:52] <InPhase> rxndxs: You said, "sometimes I feel like I just came too late to the picture, I wish I had been there when technology really exploded, missed it by a couple years"  I'm really curious.  From your vantage-point, which years do you picture those as?
[20:00:54] <mrig> well belief will take you far, so you are off to a good start :P
[20:00:56] *** Quits: nitro (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Ping timeout: 268 seconds)
[20:01:39] *** Joins: elnavigator (~elnavigat@105.196.100.217)
[20:02:43] *** Joins: entuland (~entuland@user/entuland)
[20:03:03] <deniska> we have about one technology explosion per decade
[20:03:26] <pyzozord> deniska: what's the 2020 decade? :)
[20:03:46] <deniska> pyzozord: either it didn't happen yet, or we didn't recognize it
[20:03:58] <pyzozord> yeah I wish I knew...
[20:04:04] <deniska> unlike literal explosions it's hard to see the explosion happening until after it happened
[20:04:24] <pyzozord> what's the 2010s though? Not sure about that. Is it AI, blockchain?
[20:04:31] <rxndxs> InPhase: I'm really fascinated by things like computer architectures, GPU's, the low level workigns of systems, etc. So I would have LOVE to get to grow with this parts from the beginning, how the architectures evolved, working with new hardware in my garage, that sort of thing :)
[20:04:44] <deniska> pyzozord: smartphones and social media I think
[20:05:10] <GeDaMo> Machine learning for the 2010s, I think
[20:05:15] *** Joins: inky (~inky@46.36.119.19)
[20:05:24] <InPhase> rxndxs: And which year range do you view as the critical ones for this for the things you wished you could have been a part of?
[20:05:55] <pyzozord> hmm we are just after a pandemic, that will probably have a considerable influence over the next big explosion
[20:06:26] <deniska> I doubt pandemic will influence any tech in particular, besides WFH becoming much more acceptable
[20:06:34] <InPhase> rxndxs: I'm trying to assess how we see technology based on when we come of age in the field.
[20:07:19] <rxndxs> InPhase: I'm definitely too young to know the whole history of this things, but for instance around where the first 386 processors appeared maybe ?
[20:07:32] <GeDaMo> Late 80s
[20:08:19] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[20:09:03] <deniska> go back in time and make google acquire webos instead of android :P
[20:09:11] *** Joins: CaptainJ (~CaptainJ@141.226.12.62)
[20:09:16] <InPhase> rxndxs: And what year were you born?
[20:09:43] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 258 seconds)
[20:09:46] <deniska> InPhase: (also, favorite movie, and the first pet)
[20:09:55] * mrig gives rxndxs a pair of leg warmers and some bobbles on springs to wear on their head for that 80's era vibe.
[20:10:17] <InPhase> deniska: :)
[20:10:41] <mrig> I think whistle to find your key ring devices were hot back then too!
[20:10:45] <mrig> :D
[20:11:05] <rxndxs> InPhase: '01 c:
[20:11:48] <GeDaMo> https://en.wikipedia.org/wiki/Deely_bopper
[20:11:49] <bayaz> Title: Deely bobber - Wikipedia 
[20:12:11] <[itchyjunk]> uni dropped my out of the fucking class i need to graduate
[20:12:15] <[itchyjunk]> i'm ready to cry
[20:12:23] <[itchyjunk]> i'm gonna go beg to the professor tomorrow or something
[20:12:32] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[20:12:49] <mrig> Oh no, sorry to hear that :(
[20:12:57] <[itchyjunk]> i'm moving states
[20:13:03] <[itchyjunk]> so if i don't graduate this time, im fucked
[20:13:16] <mrig> GeDaMo: I bet all the hipsters were coding wearing those back in the day!
[20:13:17] <InPhase> rxndxs: Ok.  I graduated in 2002, and I found myself feeling like I had just missed professionally participating in the "boom".  Although I figure that was probably in some part an arbitrary perspective.  Youtube for example only appeared 3 years after I graduated.  Clearly there was some booming left, just of a different form.
[20:13:19] <[itchyjunk]> this is the worst posisble thing that could have happened
[20:13:22] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:13:34] <pyzozord> [itchyjunk]: first of all it may seem like a big deal but it's not. Noone even will notice on your CV. And one year is really nothing
[20:13:45] <[itchyjunk]> huh?
[20:13:49] <[itchyjunk]> i'm moving state
[20:13:56] <[itchyjunk]> i can't attent classes next semester
[20:13:58] <[itchyjunk]> i can't graduate
[20:14:36] <rxndxs> InPhase: Yeah the industry definitely keeps going, what I feel is mostly like a 'born in the wrong time' sentiment, like you get from people wanting to live in the 60's for whatever nostalgic reason
[20:15:05] <pyzozord> [itchyjunk]: it's really not a big deal in the real world. I didn't finish middle school. I'm doing quite ok.
[20:15:38] <[itchyjunk]> okay, so i spend 5 1/2 years go get a degree and i give it up now because it's no big deal
[20:15:39] <[itchyjunk]> got it
[20:15:55] <pyzozord> [itchyjunk]: most of my collegues I ever worked with (and I worked in like 8 different companies big and small) don't have cs educataion. Many have aboslutely random backgrounds.
[20:16:15] <pyzozord> Some of these people are amazing engineers
[20:16:55] <pyzozord> so it's not a big deal if never finish school, let alone if you just get delayed one year
[20:17:09] <InPhase> rxndxs: My suspicion is partly from us seeing the history of technology from the perspective of its filtered successes.  The piles of failures disappear, and we're left with this narrative of major impactful leaps.  But it's harder to see which ones around us now will be those.
[20:17:16] <GeDaMo> [itchyjunk]: did they say why you were dropped?
[20:17:31] <[itchyjunk]> GeDaMo, they twaked some stuff
[20:17:35] <[itchyjunk]> bunch of people got dropped
[20:17:37] <mrig> [itchyjunk]: could you not stay put for the study?
[20:17:38] <[itchyjunk]> they didn't say why
[20:17:46] <[itchyjunk]> mrig, i would have no place to stay
[20:17:47] <pyzozord> [itchyjunk]: my manager is an ex architect (as in civil architect), my lead engineer has musical education
[20:18:00] *** Joins: ugjka (~ugjka@ugjka.net)
[20:18:07] <[itchyjunk]> mrig, and taking more loan wouldn't solve the issue
[20:18:13] <[itchyjunk]> even if i opeted to take out more loan
[20:18:26] <[itchyjunk]> 1 class to graduate and they drop me out of it
[20:18:29] <mrig> yikes, no that's never a good solution.
[20:18:40] <[itchyjunk]> i can't even process this mentally anymore
[20:18:51] <InPhase> rxndxs: For example the sound and video capabilities of those early 386 machines were so terrible compared to competitors at the time, that it was hard to picture this being the lineage that would lead to the dominant gaming systems of the future.  :)
[20:19:09] <rxndxs> InPhase: I agree, we are obviously biased by the fact we exist in the future, maybe I wouldn't feel like this if I hadactually been there at the time
[20:19:14] <mrig> [itchyjunk]: could you not go and find someone in admin who might be able to help you out?
[20:19:31] <deniska> rxndxs: in 80s you'd feel like all the important progess was done in 60s etc :)
[20:19:39] <[itchyjunk]> mrig, i'll try tomorrow
[20:19:47] <[itchyjunk]> it starts tomorrow, i was dropped friday apparently
[20:19:51] <[itchyjunk]> i didn't check till today
[20:20:00] <[itchyjunk]> but idk who i would even go talk to
[20:20:02] <mrig> [itchyjunk]: stay positive and go find them with a good mindset for finding a solution :)
[20:20:05] <[itchyjunk]> but i'll try everyone
[20:20:06] <GeDaMo> [itchyjunk]: are there other classes you could take to make up credits?
[20:20:11] <[itchyjunk]> GeDaMo, nope
[20:20:13] <rxndxs> InPhase: but still, I cant help but fall in love with the _idea_ of that happening you know ? like people say, you don't actually like X, you like the idea of X
[20:20:20] <[itchyjunk]> this is the only 1 class in the entire university that will work
[20:20:26] <[itchyjunk]> and they offer a total of 1 section
[20:20:44] <[itchyjunk]> and i was registered to it but some magic got me dropped and it's closed so can't register
[20:20:51] <rxndxs> deniska: maybe, but I think it is kinda different, technology as we know today is not like most of humanity which actually exists since like for ever
[20:21:06] <rxndxs> deniska: I worded that very poorly :|
[20:21:14] <deniska> rxndxs: you can always pretend that it's 80s and build yourself a computer with Z80 cpu :)
[20:22:49] <InPhase> rxndxs: My prediction of the next major leap is massively parallel computing.  This will be even more important than the first protected mode desktop machines.
[20:23:31] <InPhase> rxndxs: So if you want to get in on the ground floor of something, help us figure out how to actually do that.  Because right now, we're mostly all really terrible at the things needed for massively parallel computing.
[20:23:36] <rxndxs> deniska: oh and I will definitely do, I'm just waiting to be a self-sustainable member of society before beginning my geek endeavours :)
[20:23:45] <mrig> rxndxs: the art seems to be in discerning what it is that will still be relevant in the future, personally I think that you are here at a defining moment in that regard.
[20:24:15] <mrig> Good to learn from the past to understand the now, so that you can do this well :)
[20:24:23] <rxndxs> InPhase: That sounds really cool, I'm hoping I can get to work in that sometime soon
[20:24:54] <rxndxs> Damn y'all are really shifting my whole view on life hahaah apreciate it :)
[20:25:10] <rxndxs> Now I'm even more excited than before for what the future has in store for me
[20:25:43] * mrig always wears Deely bobber when contemplating the future :)
[20:25:50] *** Joins: kobalt (~rsonx@user/kobalt)
[20:27:51] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[20:27:59] <rxndxs> This chat is really nice :) I just got started with IRC and already feel welcome in here
[20:28:10] <rxndxs> I assume this is what you used to use a lot in the early days ?
[20:28:49] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:28:58] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[20:29:07] *** Joins: mickey (~user@user/mickey)
[20:29:15] <InPhase> rxndxs: Although I had been programming before there was Internet access available, IRC is what first got me into Linux, which is what got my me first free compilers.  So I suppose it was pretty influential to my path.
[20:31:19] <InPhase> Although back then one typically did not "download" Linux.  Instead you filled out a form and some people snail mailed you some install disks.  :)  I don't know who those people were, but thanks, random people out there who sent stuff out.
[20:31:47] <pyzozord> heh, that's pretty cool
[20:32:06] <GeDaMo> Shareware
[20:32:29] <GeDaMo> Also some magazines had cover floppies/CDs
[20:32:49] <pyzozord> ooh so that is where the name comes from? I am familiar with shareware only on CDs of computer/game magazines and later internet
[20:33:42] <pyzozord> Doom was shareware. And the original developers mentioned multiple times that this was a big factor in it's success
[20:33:45] <deniska> yeah, you are supposed to share it
[20:34:02] <GeDaMo> https://archive.org/details/walnutcreekcdrom
[20:34:03] <bayaz> Title: The Walnut Creek CD-ROM Collection : Free Software : Free Download, Borrow and Streaming : Internet Archive 
[20:34:19] <GeDaMo> They would release part of the game for free and you could buy the rest if you liked it
[20:34:38] <pyzozord> From my perspective shareware were "shared with you" via magazines or internet. Didn't know the original intent was that people were supposed to copy and share with other people
[20:34:43] <GeDaMo> I bought the full version of a game called Cosmo's Cosmic Adventure and got the shareware of Wolfenstein 3D with it
[20:35:07] <mrig> At least that way you know what you are getting.
[20:35:28] <mrig> So many disappointing games when you buy without trying them first.
[20:36:04] <mrig> InPhase: were you using the first versions of Linux back then?
[20:36:26] <deniska> first linuxi I tried were from magazine cover CDs
[20:36:41] <mrig> oh cool
[20:38:37] <InPhase> mrig: I tried a Redhat and a Slackware version briefly, like for a day or two each.  Then the first distribution I stuck with was Debian 0.91, the first Debian release which had a package manager.
[20:39:24] <GeDaMo> My first Linux was Slackware in 1994, I was at uni and just about to start a Unix/C module
[20:39:40] <InPhase> mrig: It was released in early 1994, and I installed it sometime in the later half of 1994.
[20:39:56] *** Joins: austincheney (~austinche@2600:1700:1220:76c8:5da0:9bcd:bf31:d6c4)
[20:40:02] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Quit: Leaving)
[20:40:23] *** Quits: nekodesu (~bit@user/nekobit) (Ping timeout: 258 seconds)
[20:40:58] <pyzozord> Isn't linux started in 1991? That would make it some very early version. I don't imagine it had a GUI
[20:41:02] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[20:41:10] <mrig> Awesome stuff, must have been exciting to be getting started with it, and having the OS to match the ones used on campuses too.
[20:41:22] <GeDaMo> X Windows was around 
[20:41:42] <mrig> I loved discovering linux and learning a bit of C at the same time.
[20:41:51] <mrig> but very late in the day :)
[20:42:28] <InPhase> pyzozord: Well Windows 95 hadn't been released yet, so I was mostly working in DOS at the time anyway.  Windows 3.1 was something you launched up only when you needed it to run some Windows program.  Otherwise you could just run stuff from DOS.
[20:43:09] <InPhase> pyzozord: So this was not a major change when I switched over to Linux, and it booted to console.  Then I would launch X-Windows when I needed a gui.
[20:43:31] <mrig> Id no idea that Redhat has been around for so long.
[20:44:38] <InPhase> pyzozord: It was actually disconcerting when Microsoft first released an OS (Win95) that didn't come with a DOS mode, and instead launched straight into a gui.  It was even more disconcerting when that OS was extremely buggy and full of crashes and security holes.  :)  So this helped drive me into the arms of Linux further.
[20:45:24] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 250 seconds)
[20:46:44] <deniska> hey, 95 and 98 had a DOS mode, with DOS 7, supporting larger drives and long file names :P
[20:46:50] * enyc meows
[20:47:00] <deniska> windows 98 is arguably the best way to run DOS in many circumstances :P
[20:47:11] <enyc> deniska: yes though i'm not sure how much the do-\do- actuay supported the L_FNs
[20:47:25] <enyc> deniska: that is, outside of windows itself ...
[20:47:56] <enyc> deniska: win98 dos eurgh used too much convertional RAM
[20:48:04] <InPhase> deniska: C:\PROGRA~1\ was one of the hackiest filesystem things ever invented.  :)
[20:48:23] <deniska> InPhase: you are just not too familiar with HFS :)
[20:48:25] <enyc> de	I got along much better with dos 6.22 and  my complex qemm386/iesqview/stacker setup  with multiple soutdpblasters and ethernet adapters and packet drivers and telnet and stuff =)).
[20:49:11] *** Joins: independent56 (~independe@148.122.187.2)
[20:50:06] <pyzozord> InPhase: heh, I managed to live through a bit of the windows 98 era. Blue Screen Of Death was notorius. It got better late in XP's life.
[20:50:32] <deniska> I have some fond memories of Windows 2000
[20:50:57] <enyc> deniska: i just .. used dos thesn linuk and neve used windows for my own stuff
[20:51:07] <enyc> deniska: i mean i was very godo at finixing other windows systems but thats' another matter
[20:51:32] <deniska> I did't really start using linux until late 00s
[20:52:47] <enyc> 'aah hrrm I had linu at school and later ;p
[20:52:48] <enyc> hey-ho!
[20:53:30] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[20:53:45] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Quit: Bye)
[20:53:58] *** Quits: inky (~inky@46.36.119.19) (Ping timeout: 252 seconds)
[20:54:51] <deniska> I was booting knoppix on and off in ~2003-2006, especially when my parents put passwords on windows thinking I'll do better at school without an access to a computer
[20:55:18] <deniska> but the first linux I was using long term was ubuntu 8.04 which means, well, april 2008 :)
[20:56:44] *** Joins: inky (~inky@46.36.119.19)
[20:57:18] <deniska> wubi installer was a really nice feature
[20:57:32] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 250 seconds)
[20:57:32] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Ping timeout: 250 seconds)
[20:58:49] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 248 seconds)
[21:00:43] <rxndxs> unrelated but to the people in here, I decided to try something new, and I'm starting to write a blog-like section about my process learning C and what it means to write good code, I would appreciate any feedback you might have :) https://github.com/ed-proj/propc-blog
[21:00:45] <bayaz> Title: GitHub - ed-proj/propc-blog: Notes and thoughts while developing propc 
[21:01:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:01:23] <InPhase> rxndxs: Before I read...  "what it means to write good code"...  could mean using C++ instead of C.  ;)
[21:02:16] *** Joins: independent56 (~independe@148.122.187.2)
[21:02:46] *** Quits: snake (~snake@user/snake) (Ping timeout: 252 seconds)
[21:03:05] <rxndxs> InPhase: haha, I actually decided to use C before C++, I was never really a fan of some things you do in C++, but I might move on when I feel more experienced
[21:03:55] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[21:04:10] <rxndxs> InPhase: also, the point of the blog is more like a blog about my experience, I realised I improve a lot more if I actually reflect and write down my thoughts
[21:04:18] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[21:04:36] *** Joins: independent56 (~independe@148.122.187.2)
[21:05:23] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[21:05:51] *** Joins: independent56 (~independe@148.122.187.2)
[21:06:39] <InPhase> rxndxs: Yep.  It's important to force yourself somehow to think explicitly about the big picture of your approaches, structures, and general patterns.
[21:07:00] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[21:07:04] <kobalt> after reading a compiler design book, now I write C programs while keeping compilation process in mind.
[21:07:49] * [itchyjunk] compiles kobalt into byte codes
[21:08:28] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[21:08:48] *** Joins: independent56 (~independe@148.122.187.2)
[21:08:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[21:08:59] *** Joins: Pixi_ (~Pixi@user/pixi)
[21:11:01] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[21:11:30] *** Joins: Crescendo (~Crescendo@user/crescendo)
[21:12:16] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 250 seconds)
[21:12:19] <kobalt> itchy, human brain is Turing complete?
[21:12:56] <mawk> if you provide enough food and water
[21:13:05] <InPhase> kobalt: Some of them can pass the test.
[21:13:21] *** Quits: jazzy (~jaziz@2600:380:863c:4fce:20a0:52d4:968d:eb40) (Ping timeout: 258 seconds)
[21:14:26] *** Quits: nekobyte (~cat@user/nekobit) (Ping timeout: 250 seconds)
[21:15:58] <InPhase> kobalt: But in reality, no physical computing device is formally "Turing complete" unless you waive the infinite memory requirement.  It is therefore important frequently to waive this, or else the concept becomes almost useless.
[21:16:21] *** Joins: dunkeln (~dunkeln@94.129.69.87)
[21:16:21] *** Quits: dunkeln (~dunkeln@94.129.69.87) (Changing host)
[21:16:21] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[21:16:54] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Read error: Connection reset by peer)
[21:17:00] <GeDaMo> Turing completeness is a theoretical property but it's not necessary for a system to do useful work
[21:17:37] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 252 seconds)
[21:18:51] *** Joins: Pixi__ (~Pixi@user/pixi)
[21:18:53] <InPhase> GeDaMo: Pretty much any computing system without finite Turing completeness is limited it what it can do in some notably significant way.  So it's a pretty important on/off threshold.
[21:19:32] <InPhase> The reverse is not always true though.  There are some Turing complete things that remain functionally useless for computing because they scale terribly.  An example of this is the Turing machine itself.  :)
[21:19:34] <pyzozord> Isn't real turing completness impossible because of the requirement for infinite tape?
[21:19:49] *** Joins: andypandy (~andypandy@h-178-174-148-234.a163.priv.bahnhof.se)
[21:20:07] <GeDaMo> https://en.wikipedia.org/wiki/Total_functional_programming
[21:20:08] <bayaz> Title: Total functional programming - Wikipedia 
[21:20:25] <kobalt> InPhase: But won't human brain can have as many notebooks as it requires.
[21:21:30] *** Joins: independent56 (~independe@148.122.187.2)
[21:22:14] *** Quits: Pixi_ (~Pixi@user/pixi) (Ping timeout: 250 seconds)
[21:22:32] <InPhase> kobalt: Human memory is definitely not infinite, although it appears to be quite large.
[21:23:20] <GeDaMo> Human memory is also not precise, it's a bit fuzzy :P
[21:24:23] <kobalt> but we can document our memories like using a photo, audio-video, making notes, etc.
[21:25:34] <InPhase> kobalt: If you count humans as only part of a machine, and provide external storage for them, then this combined machine has a much greater memory capacity.  It still, however, is not infinite.
[21:26:04] <InPhase> kobalt: Your problem is that the available material in the universe is finite, even though large.
[21:26:41] *** Joins: mnrmnaugh (~mnrmnaugh@68.162.206.56)
[21:26:46] *** Quits: mnrmnaugh (~mnrmnaugh@68.162.206.56) (Remote host closed the connection)
[21:27:35] <InPhase> kobalt: A human will die before running out of paper, so this might seem inconsequential in reality.  But, this again, means it is not formally fully Turing complete.  This formal level of infinite Turing completeness is near useless though outside of mathematical formalism, so we can consider the human finite Turing complete and move on with our day.
[21:28:47] *** Quits: andypandy (~andypandy@h-178-174-148-234.a163.priv.bahnhof.se) (Read error: Connection reset by peer)
[21:28:51] <pyzozord> Heh that means we should focus on optimizing for smaller time complexity and care less about space complexity when designing algorithms for human-notebook machines
[21:29:13] <mawk> it takes time to fetch the right notebook
[21:29:18] <GeDaMo> You still need to be able to find the relevant information in the notebooks
[21:29:45] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 248 seconds)
[21:30:21] *** Quits: austincheney (~austinche@2600:1700:1220:76c8:5da0:9bcd:bf31:d6c4) (Read error: Connection reset by peer)
[21:30:22] <InPhase> kobalt: In fact I think it's possible that humans operate in a higher computational class than a Turing machine, but it is challenging to prove.  My best proof is that the halting problem is undecidable by Turing machines, but every programmer worth their paycheck can examine a program, and with enough effort, determine whether or not it will halt.  We are obviously doing something else.
[21:30:38] <pyzozord> InPhase: so "human-finite turing completeness" or "human-complete" for short :) I think you just proved that humans are human-complete
[21:31:13] *** Joins: Auron (~Auron956@user/auron)
[21:31:39] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[21:32:25] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 248 seconds)
[21:33:41] <deniska> InPhase: well, you can add heuristics to a compiler to detect infinite loops and such
[21:34:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:34:15] <deniska> halting problem prohibit detecting whether a program halts for a subset of programs :)
[21:34:24] <deniska> halting problem doesn't* prohibit detecting whether a program halts for a subset of programs :)
[21:34:46] <deniska> it prohibits inventing a program which would work for an arbitrary program
[21:35:03] <clarjon1> idk my brain can get into some pretty nasty loops that require intervention to exit 
[21:35:47] *** Joins: xff0x (~xff0x@2001:1a81:52ba:f800:27e0:55e3:7826:b52d)
[21:35:53] *** Quits: inky (~inky@46.36.119.19) (Ping timeout: 268 seconds)
[21:36:39] *** Joins: freakazoid343 (~matt@35.136.210.185)
[21:37:19] *** Quits: kZel (~kZel@90.199.64.48) ()
[21:39:12] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 245 seconds)
[21:39:18] <kobalt> InPhase: I agree with you. I think the dying part was good thinking.
[21:39:34] <bjs> pyzozord: see also: linear-bounded automata
[21:39:37] <InPhase> deniska: Except that the proof of the halting problem being undecidable relies on the halting evaluator program not evaluating itself while running.  It assumes the routine that evaluates the halting lacks self-awareness.
[21:39:48] <Stefan26> there's nothing special about halting right, reaching halting state could be replaced by "eventually prints a certain symbol" ?
[21:39:56] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de) (Read error: Connection reset by peer)
[21:39:57] <bjs> Stefan26: correct
[21:40:17] <InPhase> deniska: We however can detect when we as the halting decider are caught in a state loop which will not terminate.
[21:40:18] <bjs> Stefan26: infact *any* non-trivial semantic property of a program is undecidable
[21:40:32] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de)
[21:41:16] *** Joins: izak (~user@196.189.63.248)
[21:41:31] <kobalt> I can think to counter it this way: the person teaches all it's knowledge to a disiple and let him/her continue the computation. The brain would change of course but the computation remains the same.
[21:41:42] <kobalt> before dying
[21:41:52] <Stefan26> what is an example of something that is *not* a "non-trivial semantic property" ?
[21:42:27] <Stefan26> what is a trivial property?
[21:42:39] *** Joins: zaher (~zaher@37.48.185.156)
[21:42:50] <bjs> Stefan26: "does the program source contain the print() statement" is a non-semantic property,  it's a property of the *syntax* of the program not its semantics
[21:43:01] <InPhase> deniska: Now probably we can write a multithreaded program which does the same if we're sufficiently clever, but I haven't seen a good proof that a full modern computer with all of its features is ONLY as powerful as a Turing machine.  We tend to only talk about "at least as powerful" as a Turing machine.
[21:43:12] <pyzozord> bjs: thanks
[21:43:15] <bjs> Stefan26: a trivial one is one that true for all programs
[21:43:24] <Stefan26> thanks bjs
[21:43:31] <bjs> and of course those are decidable because you don't need to look at the program to know
[21:43:48] <bjs> they're kind of dumb side-conditions because really it means any "interesting" property is undecidable
[21:44:02] *** Joins: inky (~inky@46.36.119.19)
[21:44:38] *** Joins: Crescendo (~Crescendo@user/crescendo)
[21:44:40] *** Quits: izak (~user@196.189.63.248) (Client Quit)
[21:44:51] <bjs> Stefan26: a trivial property might be something like "the program either halts or does not halt" which is just "duh of course"
[21:45:16] <bjs> again that property is trivially decidable ;)
[21:45:35] <InPhase> deniska: And if you disagree, here is my challenge:  Try to write a program that is completely impossible for a programmer to determine whether or not it halts.  (Without the cheat of just obfuscating so much that no one would spend their time on it.)
[21:46:04] *** Quits: elnavigator (~elnavigat@105.196.100.217) (Ping timeout: 250 seconds)
[21:46:06] *** Joins: izak (~user@196.189.63.248)
[21:46:20] <bjs> InPhase: it's not obvious such a program exists
[21:46:43] <InPhase> bjs: Which means it's not obvious that the halting problem is undecidable for the human algorithm.
[21:47:09] <bjs> InPhase: what?
[21:47:14] <InPhase> Yes.
[21:47:22] *** Quits: xff0x (~xff0x@2001:1a81:52ba:f800:27e0:55e3:7826:b52d) (Ping timeout: 250 seconds)
[21:47:28] <bjs> InPhase: the halting problem does not say that there exists a program for which you cannot build a program that knows whether it halts
[21:47:48] *** Joins: arcatech (~arcatech@user/arcatech)
[21:48:06] <bjs> it might be that every program can be decided to halt or not halt, or every class of programs can be. it's just that there cannot be recursively enumerable number of such classes
[21:48:06] *** Joins: xff0x (~xff0x@2001:1a81:52ba:f800:b837:8a9e:e00a:9d36)
[21:48:18] <bjs> cannot not be
[21:48:18] <InPhase> bjs: It says that there does not exist a general algorithm which can solve the halting problem for all possible program-input pairs.  I'm saying one such general algorithm which appears able to solve this is the human brain.
[21:48:19] <bjs> sorry
[21:48:42] <bjs> InPhase: ah okay
[21:49:01] <InPhase> And that the proof otherwise is not done on a human computational system.
[21:49:12] <bailsman> InPhase: hm? It seems easy to come up with a program that a human being cannot decide whether it halts or not. Am I misunderstanding you?
[21:49:16] <bjs> InPhase: this is true,  Turing machines are just our best guess at what the most general idea of "computation" is
[21:49:20] <InPhase> bailsman: Go ahead.
[21:49:36] <bjs> bailsman: I mean are you *sure* no human can decide?  even if humans spent the next 1000 years working it out?
[21:49:38] <InPhase> bailsman: Note that it must be a program plus a known input.
[21:49:59] <bjs> I think that's what InPhase is getting at
[21:51:01] <InPhase> Literally the proof of the halting problem's undecidability was a human recognizing that the Turing halting decider must sometimes not halt.  :)
[21:51:35] *** Joins: nevoyu (~joshua@cpe-192-180-19-146.kya.res.rr.com)
[21:51:47] <bailsman> Say, a program that applies the collatz algorithm for all inputs up to some large N.
[21:52:03] <InPhase> If the Turing halting decider recognized this as well, it would have had its correct answer.
[21:52:36] <bjs> bailsman: I mean you're asserting that humans *cannot* prove the Collatz conjecture then (assuming it's True)
[21:52:47] <Stefan26> so it's possible there exists an algorithm that solves the halting problem for all program-input pairs using less than 10^100 symbols?
[21:53:08] <bjs> Stefan26: yes, infact it's not just possible that is one class that is definitely true
[21:54:05] <bailsman> bjs: the standard of proof was "appears to be". It appears the be that humans cannot currently decide whether such a program halts, even though such a program can be stated quite simply.
[21:54:24] <bailsman> you can always rely on uncertainty to decide the matter one way or the other, depending on who has burden of proof. No one can predict the next 1000 years
[21:54:36] <Stefan26> sounds like a scam
[21:54:57] *** Joins: death916_ (UserNick@c-67-182-183-147.hsd1.ca.comcast.net)
[21:54:58] *** Quits: death916_ (UserNick@c-67-182-183-147.hsd1.ca.comcast.net) (Excess Flood)
[21:55:11] <bjs> Stefan26: if you have a finite set of programs, you can always write a program that decides halting over those programs
[21:55:32] <bjs> Stefan26: you can easily "prove" that such a program exists... uh but we don't know how to do it by construction ;)
[21:55:35] *** Joins: death916_ (UserNick@c-67-182-183-147.hsd1.ca.comcast.net)
[21:56:07] *** Quits: death916 (AdiIRC@user/death916) (Ping timeout: 252 seconds)
[21:56:17] *** death916_ is now known as death916
[21:56:48] *** Quits: death916 (UserNick@c-67-182-183-147.hsd1.ca.comcast.net) (Changing host)
[21:56:48] *** Joins: death916 (UserNick@user/death916)
[21:58:57] <InPhase> bailsman: Do you think someone will solve the Collatz conjecture someday with a proof?
[21:59:18] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[21:59:23] <bailsman> By such a time the Collatz conjecture is proven, there will be other unsolved problems, and you can substitute that one instead.
[21:59:30] <InPhase> bailsman: Nope.
[21:59:44] <InPhase> bailsman: Because that does not make it undecidable.
[21:59:53] <InPhase> bailsman: That just makes it a hard problem.
[22:00:26] <InPhase> bailsman: Note the difference between "undecided" and "undecidable" on this.
[22:00:29] *** Joins: elnavigator (~elnavigat@105.196.100.217)
[22:00:47] <bailsman> OK. Can you not extend the proof of the undecidability of the halting problem to human brains?
[22:01:15] <bjs> bailsman: no,  because we don't really know what the human brain can and cannot do
[22:01:35] <bjs> I mean you can try but it's mostly a fun but slightly meaningless exercise
[22:02:14] <kobalt> bjs: Is it always possible to decide for a given algorithm whether it halts on it's input or not.
[22:02:39] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[22:02:41] <bjs> kobalt: you have to be very careful with how you phrase that question
[22:03:36] <bjs> kobalt: if your question is "Given a fixed program P, and a fixed input X,  does there exist a program that says whether P halts when ran with X" the answer is trivially yes, (the program is either "return True" or "return False", so it exists you just don't know which it is ...)
[22:04:02] *** Joins: Akuli (~Akuli@87-94-109-4.bb.dnainternet.fi)
[22:04:02] *** Joins: zaher_ (~zaher@37.48.146.162)
[22:04:58] <InPhase> bailsman: You can't really.  Because a programmer caught in the same loop as the standard undecidability proof will conclude "This program will halt if I say it won't, and won't halt if I say it will.  That is its haltability status."
[22:05:16] <edgar-rft> kobalt: if you include wrong decisions then always yes
[22:05:45] <bjs> kobalt: The usual stating of the Halting Problem is something like "Does there exist a program H, such that for all programs P and all inputs X, H(P, X) say whether P halts when ran with X". Intuitively this because H is the *Same* for all programs and inputs
[22:05:47] <InPhase> bailsman: Rather than return 0 or 1, we see the whole game board.
[22:06:00] *** Quits: zaher (~zaher@37.48.185.156) (Ping timeout: 250 seconds)
[22:06:01] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:06:02] *** Joins: snake (~snake@user/snake)
[22:06:21] *** Parts: kobalt (~rsonx@user/kobalt) (part)
[22:06:39] *** Joins: kobalt (~rsonx@user/kobalt)
[22:06:45] <bjs> kobalt: if you relax this and ask "Given P, does there exist H..." now the question might be decidable,  although you do have to be careful: What if P was a universal Turing machine and the input was an encoding of a TM + its input, etc
[22:07:08] <bjs> kobalt: so if you really fix it and yo usay "Given P *and* a particular input X, ..." you've reduced it down to something kind of pointlessly simple (theoretically that is)
[22:08:07] <bjs> (obviously we do not know how to construct this last H for all programs and inputs,  for if we did that'd be one solution to the original halting problem.)
[22:10:30] <kobalt> Suppose we are given a very specific algorithm. we dont know its working principle. we are given an input w and require to determine if algo halts on this input w. Can we do this. What if the algo loops on w?
[22:10:37] <kobalt> bjs: ^
[22:11:04] <kobalt> How would we determine that it is looping
[22:11:06] <InPhase> bailsman: For another way of looking at it, a Turing machine must return a formulaic conclusion.  We can return a valid conclusion of any arbitrary type and structure based on our analysis of the true situation.  This is... different.
[22:11:08] <kobalt> on w
[22:12:42] <bjs> kobalt: theoretically yes
[22:12:57] <InPhase> bailsman: A Turing machine algorithm cannot have a defined contradictory conclusion that causes a contradiction with any arbitrary result we choose to return to explain that contradiction.  We're one level higher when we do that, and win the logic war.
[22:12:58] *** Joins: nekobyte (~cat@user/nekobit)
[22:13:06] <bjs> kobalt: there is no one program/algorithm that you can use to work it out,  but there's no reason for a given machine and input you *cannot* work it out
[22:14:09] <bailsman> bjs: why do we ourselves not qualify as one program
[22:14:09] <bjs> kobalt: as for, "given an algorithm,  can you make a machine that given w whether it halts" then this is also undecidable (that is there is no generic machine we can use for this, and even for a specific algorithm there is no need for such a machine to exist)
[22:14:24] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[22:14:33] <bjs> bailsman: it's a terminology problem,  you need to define what you mean by "program" and what programs can and cannot do
[22:14:42] <bailsman> Why can we do things that programs can't?
[22:14:49] <bjs> bailsman: nobody knows that we can
[22:14:56] <bjs> nobody knows that we can't either
[22:15:25] <bjs> infact nobody even has a good reason to believe a Turing machine is the best definition of "program",  maybe there's a more powerful idea we haven't discovered yet
[22:15:31] <bailsman> Is this one of those hard problems of conciousness? I've been envisioning us as just a very complicated program running on wetware.
[22:15:45] *** Quits: nevoyu (~joshua@cpe-192-180-19-146.kya.res.rr.com) (Remote host closed the connection)
[22:16:18] <bailsman> Can a turing machine, in principle, simulate a human?
[22:16:20] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:16:34] <pyzozord> a neural network seems like seems like it could be a more powerful model
[22:16:36] *** Joins: jamea (~jamea@189.237.57.59)
[22:16:53] <bailsman> but a turing machine can definitely simulate a neural network - they do this all the time
[22:17:41] *** Quits: nrl^ (~nrl@209.65.131.194) (Remote host closed the connection)
[22:18:21] <jamea> hi all in c# where can i verify a date: i want verify the date before run the first formm (winform) where can i check? if dateNow>'2021/09/20' then app.terminate something
[22:18:34] <kobalt> bjs: did you mean it is not possible to determin whether a given specific algo halts on it's arbitrary input?
[22:19:26] <kobalt> not always
[22:19:44] *** Joins: independent56 (~independe@148.122.187.2)
[22:19:46] <kobalt> I meant, it is not always possible to determine whether a given specific algo halts on it's arbitrary input?
[22:20:08] <bjs> kobalt: yes it is not always possible to make a machine for a specific algorithm, which tells you given some input whether it halts
[22:20:34] <bjs> (think about if that "specific algorithm" was just a Turing-machine-emulator and its inputs were Turing-machines)
[22:20:45] <InPhase> bailsman: So the answer to those questions are unknown.  I presented it as possibly a different computational class.  Because, it might be.  But another possibility is that the original proof about halting decidability simply made a mistake when labeling the answer as a bool, when halting decidability does not have type bool, and bool is just two of the possible answers.
[22:20:56] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:d9b9:ab65:5f0:bdea)
[22:21:37] <Stefan26> for very specific algorithms, (just some loops and increments) how do you constructively go about proving it halts?
[22:21:53] <bjs> Stefan26: usually with loop variants
[22:22:08] <InPhase> Stefan26: Infinite loops enter the same total state twice.
[22:22:08] <bjs> that's a very common way to show totality
[22:22:22] <bjs> InPhase: not always
[22:22:44] <InPhase> Stefan26: Infinite loops enter the same state twice for all values impacting the path it obtained to get back there.
[22:22:54] <InPhase> bjs: Fixed that.  ;)
[22:22:56] <bjs> that's also not always true
[22:23:14] <bjs> well it depends how you define "path"
[22:24:45] <InPhase> I suppose it needs to be slightly more rigorous, yes.  But, it's in that direction.
[22:25:03] <bjs> Stefan26: e.g. imagine you had `while (x > 0) { x-- }` this loop has a variant that x decreases
[22:25:19] *** Joins: aniruddha (uid340443@id-340443.charlton.irccloud.com)
[22:25:59] <bjs> Stefan26: if you show that x decreases each time (pretty trivial),  and that x started positive, then you can show that this loop eventually terminates.  You can apply the same technique on a much larger scale.
[22:26:08] *** Quits: Caffeinated (~Caffeine@user/alexdelarge) (Read error: Connection reset by peer)
[22:26:38] <bjs> Stefan26: see https://en.wikipedia.org/wiki/Loop_variant#Rule_of_inference_for_total_correctness  the second inference rule there is one you'd use to show total correctness (i.e. halting) of the loop
[22:26:40] <bayaz> Title: Loop variant - Wikipedia 
[22:27:12] <Stefan26> thanks 
[22:27:15] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[22:27:29] <InPhase> Whereas for positive x:  while (x > 0) { x++; } requires you to know what happens as x grows.  (wrap-around, terminates.  bigint growing indefinitely, doesn't.)
[22:28:06] *** Joins: rexar89 (~alexi5@208.83.82.233)
[22:28:11] <rexar89> hi everyone
[22:28:23] *** Quits: dan1001 (~dan01@2a02:2f09:3418:7e00:5c29:9d8d:4303:bd0) (Quit: Leaving)
[22:28:37] *** Joins: dan1001 (~dan01@2a02:2f09:3418:7e00:5c29:9d8d:4303:bd0)
[22:29:03] *** Joins: vysn (~vysn@user/vysn)
[22:29:03] <InPhase> Stefan26: An inductive proof there reveals the second case will never terminate.
[22:29:27] <kobalt> so for simple programs you could analyse the behaviour by looking at thier control flow.
[22:32:19] <kobalt> but then there are programs like the one that calculates the nth prime number, given the input you cannot just conclude the output. You have to literally go through the steps to get know the result, i.e simulate the algorithm on the input.
[22:33:18] *** Joins: cthulchu (~Cthulchu@46.211.59.153)
[22:34:15] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[22:34:45] <InPhase> kobalt: Fortunately Euclid solved the halting of that algorithm in 300BC.
[22:35:02] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Ping timeout: 250 seconds)
[22:35:42] <[itchyjunk]> kobalt, human brain is probably not turning complete
[22:35:48] <[itchyjunk]> or is it?
[22:36:04] <kobalt> no I meant, not for every program it is possible to look at the control flow and conclude the result. For some programs we have to run it to know the result.
[22:36:09] <kobalt> InPhase: ^
[22:37:23] <kobalt> [itchyjunk]: you missed the entire party.
[22:37:31] <[itchyjunk]> too stressed
[22:37:43] <[itchyjunk]> what kind of party was it?
[22:37:46] <[itchyjunk]> rona party?
[22:38:12] <kobalt> nah Models of Computation and Complexity theory party
[22:38:25] <[itchyjunk]> oh..
[22:38:30] <[itchyjunk]> sounds interesting
[22:38:36] <[itchyjunk]> i should have probably piad attention
[22:38:40] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:38:41] *** Joins: pavonia (~user@user/siracusa)
[22:38:49] <[itchyjunk]> I don't remember Big O and small O..
[22:38:54] <[itchyjunk]> i'd learnt it at some point
[22:39:08] <[itchyjunk]> Bit O was lim x-> inf f(x) / g(x) or something?
[22:39:11] <[itchyjunk]> poop
[22:41:04] <kobalt> I have to learn these big O, Œ© and thetha(can't find it's unicode on keyboard)
[22:41:08] <kobalt> too
[22:42:29] *** Quits: pyzozord (pyzozord@user/pyzozord) (Remote host closed the connection)
[22:43:13] <[itchyjunk]> i dont know the other ones
[22:43:25] <[itchyjunk]> outside of that, i'm not too invested in complexity theory
[22:43:46] <[itchyjunk]> seems to be mostly lined to "how hard is it to solve problem x computationally" type topics
[22:43:55] <[itchyjunk]> and idk enough computer to care of that in too much detail
[22:44:09] <[itchyjunk]> type theory seems interesting but that's hard too :<
[22:44:15] <deniska> InPhase: so you're assuming that self awareness isn't computable
[22:47:02] *** Joins: Rounin (~david@84.212.130.215)
[22:47:12] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[22:48:03] <kobalt> [itchyjunk]: type theory? type checking thingies in compilers?
[22:48:57] <deniska> InPhase: and the halting problem is posed to return yes or no. Not "screw you, I'm not doing that" :)
[22:48:59] *** Quits: rsx (~dummy@ppp-188-174-142-175.dynamic.mnet-online.de) (Quit: rsx)
[22:51:27] <deniska> InPhase: if you redefine halting problem as "return yes, no, or dunno", then it's solvable, and computers are as good as humans if not better at it 
[22:52:19] *** Joins: sinhue (~sinhue@stip-static-55.213-81-207.telecom.sk)
[22:54:29] *** Joins: menace (~someone@ppp-93-104-160-204.dynamic.mnet-online.de)
[22:54:39] *** Quits: menace (~someone@ppp-93-104-160-204.dynamic.mnet-online.de) (Changing host)
[22:54:39] *** Joins: menace (~someone@user/menace)
[22:54:40] <[itchyjunk]> type theory is theoritical CS
[22:54:43] *** menace is now known as Deknos
[22:54:46] <InPhase> deniska: "dunno" is not what I proposed returning.
[22:54:50] <[itchyjunk]> it dels with a lot of type related idea
[22:54:57] <[itchyjunk]> formal proofs for arbitrary types etc
[22:55:03] <kobalt> [itchyjunk]: I beleive human brain is Turing complete. but I might be wrong if there is a constraint on memory
[22:55:09] <InPhase> deniska: Since "dunno" is undecided.  But there are correct complete answers other than yes and no.
[22:55:20] <[itchyjunk]> there is 100% finite memory
[22:55:54] <InPhase> deniska: The proof of undecidability is basically "This sentence is false."  Do you think "This sentence is false." proves that logic doesn't exist?  We can explain exactly what's wrong with it.
[22:56:04] <[itchyjunk]> yeah if you return anything other than yes or no, it's the same as not having decided
[22:56:23] <[itchyjunk]> dont think you can redefine your way out of halting problem..
[22:56:25] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[22:56:37] <[itchyjunk]> thought i am not sure, do all formal systems have halting problem?
[22:56:47] <[itchyjunk]> would a q computer have halting problem?
[22:56:58] <[itchyjunk]> pure q computer, not one what is partially classical
[22:57:55] <InPhase> [itchyjunk]: But the standard proof of undecidability is an algorithm that will refuse to halt if you say it will, and vice versa.
[22:58:37] <InPhase> [itchyjunk]: Which is fine.  One can write that algorithm.  But the analysis of its haltability is not of type bool.
[22:58:59] <InPhase> Just like "Is this true or false:  'This sentence is false.'" does not have a correct answer of true or false.
[22:59:37] <InPhase> The truth value of that sentence is not undecidable.  It's completely understandable.
[23:01:28] <bjs> [itchyjunk]: quantum computers are not computationally more powerful, so they also have the same halting problem questions
[23:01:39] <bjs> [itchyjunk]: infact we have never found anything more computationally powerful than a Turing Machine
[23:02:06] *** Joins: pyzozord (pyzozord@user/pyzozord)
[23:03:06] <InPhase> bjs: If using the "what can be computed" definition o fthat only.
[23:03:12] <InPhase> s/o fthat/of that/
[23:03:42] <bjs> InPhase: what do you mean?
[23:04:00] <InPhase> bjs: They are clearly in a different computational class in terms of performance scaling.
[23:04:11] <bjs> complexity class
[23:04:14] <bjs> Yes
[23:04:19] *** Joins: reddit89 (~user@user/reddit89)
[23:04:57] <bjs> There are no problems that a quantum machine can solve (as far as we know) that a classical one also cannot solve,  even if all the classical machine does is emulate a quantum machine very slowly
[23:05:26] <InPhase> Assuming an infinite classical machine.
[23:05:37] <bjs> I was talking about Turing machines
[23:05:38] *** Joins: Pickchea (~private@user/pickchea)
[23:05:44] *** Joins: dunkeln (~dunkeln@94.129.69.87)
[23:05:44] *** Quits: dunkeln (~dunkeln@94.129.69.87) (Changing host)
[23:05:44] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[23:06:00] <APic> Quantumstrings pwn
[23:06:08] <APic> Also the Higgs-Bosons
[23:06:49] *** Quits: reddit89_ (~user@user/reddit89) (Ping timeout: 248 seconds)
[23:06:59] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Read error: Connection reset by peer)
[23:07:10] *** Joins: reddit89_ (~user@user/reddit89)
[23:07:21] <InPhase> bjs: It just so rapidly exceeds the computational power of the classical universe, that the argument becomes very specious outside of mathematical formalism.
[23:07:42] <bjs> we are talking about Turing machines and the halting problem so ...
[23:07:48] <kobalt> If some computational model could have a non-recursively enumerable language as it's language then it would be more powerful than Turing machines.
[23:09:00] <deniska> InPhase: it's not halting problem anymore as far as we assume answers other than "yes" and "no" exist
[23:09:10] * enyc meows =)
[23:09:16] *** Quits: reddit89 (~user@user/reddit89) (Ping timeout: 252 seconds)
[23:09:45] *** Joins: hexfive (~eric@50.35.83.177)
[23:10:37] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Client Quit)
[23:10:41] <deniska> InPhase: there're uncomputable questions about the nature of computing, and that's fine, similar limitation exists for provability :)
[23:11:23] <[itchyjunk]> hmm
[23:11:36] <[itchyjunk]> isn't halting problem equivalent to incompletness ?
[23:11:47] <deniska> [itchyjunk]: in a sense
[23:12:43] <[itchyjunk]> so you could pick a set of axioms for a different formal system where an oracle could exist
[23:12:44] <[itchyjunk]> no?
[23:13:21] <deniska> humans can step back and say "welp, that's our life now" after such thing is discovered, but I'd argue that discovering limits of computability was itself a computable operation :)
[23:13:39] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[23:14:10] <InPhase> deniska: The real question is, for a given program and input, can we know if it will halt?  After laying out assumptions, the halting problem proof says no.  Yet any time you present a given program and input to a person they can work on it and figure out whether or not it will halt.  Something definitely fell apart from A to B on this path.
[23:14:59] <deniska> InPhase: a person may actually execute the program in their head. Or a person can see an obvious infinite loop
[23:15:15] <deniska> InPhase: a sufficiently smart compiler also has this possibility
[23:16:13] *** Joins: Izem (~Izem@bras-base-london1483w-grc-38-65-95-41-242.dsl.bell.ca)
[23:16:28] <deniska> no loops or recursive calls? A program terminates, again, human and a compiler can be equally good about figuring that out
[23:16:47] *** Quits: xff0x (~xff0x@2001:1a81:52ba:f800:b837:8a9e:e00a:9d36) (Ping timeout: 258 seconds)
[23:17:14] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[23:17:35] <deniska> there're plenty of special cases in which it's easy to figure out whether a program terminates or not
[23:17:42] *** Joins: xff0x (~xff0x@2001:1a81:52ba:f800:f347:6f1f:6209:b9ad)
[23:17:50] <[itchyjunk]> https://en.wikipedia.org/wiki/Presburger_arithmetic
[23:17:51] <bayaz> Title: Presburger arithmetic - Wikipedia 
[23:17:56] *** Quits: elnavigator (~elnavigat@105.196.100.217) (Ping timeout: 250 seconds)
[23:18:10] <[itchyjunk]> "Presburger arithmetic is much weaker than Peano arithmetic, which includes both addition and multiplication operations. Unlike Peano arithmetic, Presburger arithmetic is a decidable theory. This means it is possible to algorithmically determine, for any sentence in the language of Presburger arithmetic, whether that sentence is provable from the axioms of Presburger arithmetic."
[23:18:18] <[itchyjunk]> so an oracle would probably exist here
[23:18:25] <[itchyjunk]> althought you'ed have other problems :)
[23:19:02] <InPhase> deniska: So now open up your text editor and write a special case that's not decidable.
[23:19:58] <deniska> Well, Duff's device certainly looks funky enough that it'd take me some time to figure out what's going on
[23:21:01] <deniska> InPhase: as if you never wrote a program which should terminate but instead it blows up the stack :)
[23:21:13] <deniska> Hard to make one on purpose, easy by accident :P
[23:21:48] <[itchyjunk]> def f(): { if half(f) == true { dont halt} else { halt} } ?
[23:21:55] <InPhase> deniska: Or feel free to google for an example of source code and input that's not decidable.  :)
[23:21:57] <[itchyjunk]> that's like the classical counter example to oracles right?
[23:22:43] <InPhase> deniska: It should be concerning that there are no such examples in existence that we consider undecidable to humans.
[23:23:17] <[itchyjunk]> tons of undecidable problems
[23:23:21] <deniska> InPhase: if a human can decide, they followed an algorithm, which we may put in a compiler
[23:23:22] <[itchyjunk]> just visit starbucks
[23:23:30] <InPhase> deniska: Yes.
[23:23:48] <[itchyjunk]> Humans can't decide if f terminates or not
[23:23:59] <InPhase> deniska: We can skip the in-between step and say the human is already some sort of algorithm on some sort of computing device.
[23:23:59] <mercenary> InPhase: for(;;) { calculateNextDigitOfPi(); if (repeatingPattern()) break; }
[23:24:37] <InPhase> mercenary: Give a formal definition of repeatingPattern by actually writing that out.
[23:25:21] <mercenary> InPhase: digits[0..n/2-1] == digits[n/2..n]
[23:26:00] <Stefan26> is that known whether there is a repeating pattern?
[23:26:31] <InPhase> It's known pi is irrational and does not repeat.
[23:26:36] <kobalt> it's irrational, how would there be repeating pattern
[23:26:55] <kobalt> mercenary: ^
[23:27:00] <GeDaMo> It doesn't end, there can still be repeating patterns
[23:27:09] <mercenary> That.
[23:27:34] <pyzozord> if it infinite, isn't it bound to have a repeating pattern?
[23:27:36] <deniska> InPhase: but again, with human judgment (or compiler heuristics) we don't mind the answer like "dunno, maybe, just let it run" because programs are actually written to be ran :)
[23:27:43] <Stefan26> you could call 12.12...<remaining digits copied from some irrational number> repeating
[23:27:48] <bjs> pyzozord: 0.1234567891011121314... 
[23:27:57] <deniska> InPhase: halting problem is a mathy problem with a mathy proof
[23:28:39] <pyzozord> bjs: oh ok i guess infinity doesn't imple the repating pattern per se
[23:28:41] <InPhase> pyzozord: No.  The probability of a single repeat pattern at point N in pi rapidly plunges to 0.
[23:28:46] *** Quits: dan1001 (~dan01@2a02:2f09:3418:7e00:5c29:9d8d:4303:bd0) (Read error: Connection reset by peer)
[23:29:23] <deniska> InPhase: and people who care really a lot about various sorts of correctness are too busy inventing non-turing-complete languages (which turns out to be a really complex task)
[23:29:39] <pyzozord> but wait, at some point you'll get to numbers over 100 and you will end up with another 111
[23:30:13] <bjs> pyzozord: I mean eventually you have to repeat one of the digits
[23:30:30] <bjs> pyzozord: when we say "repeating patterns" we usually mean the entire pattern is not repetitious 
[23:30:33] <pyzozord> actually there is already 7 ones in that list, that is a pattern repating 7 times, isn't it?
[23:31:01] <InPhase> pyzozord: The definition provided by mercenary is that it repeats the sequence from the beginning.
[23:31:01] <pyzozord> in that case we have 1 consecutive ones
[23:31:19] <pyzozord> oh ok, that's different then I was thinking about anything repeating
[23:31:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:31:28] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[23:32:20] <izak> merijn: JOIN welcome!
[23:32:47] <InPhase> And the probability of that being true is already known astronomically close to 0.  A proof of it being 0 probably exists.  New work still comes out in that area, such as the recent algorithm that will allow you to calculate arbitrary hex digits of pi without calculating the preceding digits.
[23:33:36] <mercenary> InPhase: I would guess the probability goes asymptotically to 0. Which will only be 0 at infinity
[23:34:13] <[itchyjunk]> so
[23:34:25] <[itchyjunk]> OOP is about objects. this part, sure.
[23:34:34] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[23:34:35] <[itchyjunk]> Everything can in turn be an object though, right?
[23:34:48] <[itchyjunk]> Types would be all objects too
[23:34:56] <deniska> [itchyjunk]: depends on the specific language
[23:34:59] <[itchyjunk]> So i think this already happens. i can do var.split
[23:35:00] <[itchyjunk]> oh
[23:35:04] <deniska> [itchyjunk]: in some languages types are objects indeed
[23:35:10] <[itchyjunk]> Is Types object in Java?
[23:35:32] <deniska> not sure about java, but it certainly has some non-object things like primitives
[23:35:45] <InPhase> mercenary: I classify this as simply a problem that is considered hard, not a problem that is undecidable.  The algorithm exists to solve it:  Study more about the behavior of pi digits until a proof emerges.
[23:35:55] <[itchyjunk]> I think it's true in py but i'd want to think in terms of Java :(
[23:35:56] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de) (Remote host closed the connection)
[23:36:13] <deniska> https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html that's a thing
[23:36:13] <bayaz> Title: Class (Java Platform SE 8 ) 
[23:36:20] <Stefan26> So if we say [x_1,x_2,...] is repeating* if there exists some positive even number N such that  [x_1,x_2,...,x_(N/2)]=[x_(N/2)+1,x_(N/2)+2,...,x_N] then nobody believes pi is repeating* ? but how many of our named irrational numbers would be repeating* ?
[23:36:22] <deniska> but not sure, never looked deep into java object model
[23:36:25] <pyzozord> [itchyjunk]: javascript already has that. Everything is an object. You can do typeof 'hello' that will give you a string 'string' which itself is an object
[23:36:39] <InPhase> mercenary: To show that it's undecidable, you must prove that the proof about the digits is impossible.
[23:36:46] <kobalt> Are all non recursively enumerable languages paradoxical?
[23:36:53] <Stefan26> (where pi would be represented as  [x_1,x_2,...] with x_1=3, x_2=1, x_3=4, ...)
[23:37:27] <pyzozord> I'm not sure but I think in java situation is similar, everything inherits from generic Object
[23:39:44] *** Joins: arcatech (~arcatech@user/arcatech)
[23:40:03] <izak> [itchyjunk]: not all types are objects in java, becaue in java there are premitive types like int and ..., hence java is not a purely object oriented language.
[23:40:50] <Stefan26> how is machine language categorized?
[23:41:48] *** Joins: elnavigator (~elnavigat@105.196.100.217)
[23:42:45] <[itchyjunk]> Oh java is not considered pure OOP? :O
[23:42:50] <[itchyjunk]> is JS pure oop?
[23:43:21] <[itchyjunk]> to prove it's undecidable, just start with the assume that it's decidable
[23:43:44] <deniska> [itchyjunk]: there's no really such thing as "pure OOP"
[23:43:55] <[itchyjunk]> oh
[23:44:12] <deniska> [itchyjunk]: OOP is more of "you'll know it when you see it" kind of thing
[23:44:24] <[itchyjunk]> But all these language specific details are a bit too much no? Each language with it's own quirks
[23:44:41] <[itchyjunk]> you're stuck learning the details of the tool rather than the CS stuff itself.. but anyways
[23:44:48] *** Quits: anovick (~anovick@IGLD-83-130-61-178.inter.net.il) (Ping timeout: 250 seconds)
[23:44:55] <[itchyjunk]> why would not everything be objects? Whats the advantage?
[23:44:56] <Izem> oop isn't cs stuff
[23:45:12] <[itchyjunk]> Eh? School of computing teaches oop
[23:45:18] <[itchyjunk]> is most major unis
[23:45:23] <Izem> that is an additional overhead if everything is an object
[23:45:36] <Izem> s/that/there/
[23:45:42] <pyzozord> oop isn't even what it was supposed to be anyway
[23:45:43] <[itchyjunk]> OOP is an overhead already anyways :s
[23:45:47] <izak> to be honest i done know if JS it is pure oop or not, i just know all statements are re interpreted to machin code by the infamous v8.
[23:46:07] <Izem> some types can fit in registers, so for the ones that can it makes it faster
[23:46:18] <Izem> it ended up being a mistake to mix it anyways
[23:46:29] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[23:46:59] <Izem> [itchyjunk] it was a hot take, there is like OOPSLA and stuff
[23:47:08] <[itchyjunk]> So Java has Objects and other assorted stuff. What are non object stuff called in Java? If i create a new type NewType by making a class NewType and i do NewType a = new NewType();
[23:47:09] <pyzozord> afaik javascript engines use a trick called "boxing". An int will be simple type as long as it can, and when someone will start treating it as a Number object it will get "boxed" into a Number object
[23:47:12] <[itchyjunk]> a is an object, not?
[23:47:16] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:47:19] <[itchyjunk]> no* ?
[23:47:21] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[23:47:27] <Izem> yeah
[23:47:32] <[itchyjunk]> hmmmmmmm
[23:47:54] <Izem> non objects are the primitive types in java: char, int, double, boolean
[23:47:55] <Izem> etc
[23:47:57] <[itchyjunk]> I am having hard time imagining non object things
[23:48:00] <[itchyjunk]> oh
[23:48:20] <Izem> objects are Capitalised typically
[23:48:30] <[itchyjunk]> String is an object but not char
[23:48:36] <Izem> yeah
[23:48:38] <[itchyjunk]> I suppose String uses char
[23:48:44] <[itchyjunk]> hmmm
[23:48:47] <[itchyjunk]> makes sense
[23:48:57] <Izem> i dunno, there is the problem of encoding
[23:49:02] <Izem> but yeah I suppose it does
[23:49:45] <Izem> what is a good way to handle encoding? just use utf-8? :P
[23:50:01] <Izem> but that seems to be an annoying issue to deal with
[23:50:39] <deniska> Izem: for a typical case "text goes in, text goes out" using utf-8 is fine because that's what text is quite likely to be in nowadays
[23:50:46] <Izem> cause technically if you had a string type it might as well just be byte, and you would not be able to make methods like length()
[23:50:59] <Stefan26> machine code is interpreted language?
[23:51:04] <Izem> yes
[23:51:14] <Izem> by the cpu
[23:51:20] <[itchyjunk]> what does it mean to cast types thought?
[23:51:24] <[itchyjunk]> if types are not object
[23:51:24] <deniska> Stefan26: depends on your definition of "interpreted"
[23:51:28] <[itchyjunk]> how do you do things to them?
[23:51:36] <[itchyjunk]> you do things to object via methods and such right?
[23:51:43] <[itchyjunk]> but how do you do things to non objects?
[23:51:45] *** Quits: kobalt (~rsonx@user/kobalt) (Ping timeout: 245 seconds)
[23:51:55] <Izem> you cannot
[23:52:09] <Izem> they are only in paramters or fields
[23:52:22] <deniska> [itchyjunk]: hard to carry on with this conversation in abstract, without picking a specific language
[23:52:33] <[itchyjunk]> what happens when i have some bytes in some var and i `(int) var` it ?
[23:52:40] <Izem> cast just means to change the name of the type, you are responsible for what happens after
[23:52:41] <[itchyjunk]> Java
[23:52:50] <Izem> Java uses nominal typing right?
[23:53:03] <[itchyjunk]> Izem, oh it lets me cast wrong things to other wrong things ?
[23:53:07] <deniska> [itchyjunk]: in java that means "convert this char to int"
[23:53:08] <Izem> yes
[23:53:09] <[itchyjunk]> it's up to me to make sure it makes sense?
[23:53:13] <Stefan26> if 101..11 is a machine instruction transmitted to the CPU somehow, can it happen that the CPU incorrectly parses it as another instruction cause some bit was flipped accidentally?
[23:53:14] <[itchyjunk]> oh shit
[23:53:14] <Izem> yeah
[23:53:19] <[itchyjunk]> lol
[23:53:27] <[itchyjunk]> i thought it would only let me cast stuff that made sense
[23:53:28] <deniska> Stefan26: sure
[23:53:28] <izak> [itchyjunk]: i think primitive types are references to native objects in java
[23:53:34] <Izem> cast means idk about the type checker, let me do what ever
[23:53:40] <[itchyjunk]> native "objects" ?
[23:53:44] <[itchyjunk]> they are objects!?!?
[23:53:54] <GeDaMo> Stefan26: it's possible for bits in memory to be flipped by cosmic rays
[23:54:18] <[itchyjunk]> big problem with SSD's!
[23:54:21] <Stefan26> (im amazed how im unafraid to ask stupid questions here, i'd never dare ask that in real life cause people would know im stupid)
[23:54:22] <[itchyjunk]> according to google at least
[23:54:33] *** Joins: medard (~sinhue@stip-static-55.213-81-207.telecom.sk)
[23:54:33] <Stefan26> but it's really uncommon?
[23:54:36] <[itchyjunk]> I ask stupid question everywhere
[23:54:44] <Izem> yeah
[23:54:46] <[itchyjunk]> it's common enough that tapes is used for long term storage
[23:54:50] <[itchyjunk]> over SSD's
[23:55:01] <[itchyjunk]> google did several years studies and decided agianst SSD's for those tasks
[23:55:10] <Izem> though some guy at a black hat conference says x86 does some stuff incorrectly
[23:55:12] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Ping timeout: 250 seconds)
[23:55:20] <pyzozord> I think modern hardware has some checks against that kind of random fault things
[23:55:28] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[23:55:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:55:41] <izak> char, int, long are a native object pointer from the prespective of java jni
[23:55:44] <deniska> Stefan26: executable code is relatively small, and if you flip a random bit, chances are it will crash soon
[23:55:48] <pyzozord> It usually run things at least twice in parallel or something and if results don't agree it reruns
[23:55:49] <Stefan26> like error correcting codes? no two instructions differ in 1 bit?
[23:55:54] <deniska> Stefan26: the bigger problem is a bit in a data section
[23:55:55] <GeDaMo> https://en.wikipedia.org/wiki/ECC_memory
[23:55:55] <bayaz> Title: ECC memory - Wikipedia 
[23:56:29] *** Joins: Raguile (~Raguile@user/raguile)
[23:56:33] <deniska> Stefan26: so a program will just work on wrong data, and if it's not check summed in any way, the erronous data will be saved further on other media
[23:56:37] <[itchyjunk]> izak, what is the difference between native object and non native object?
[23:56:47] <[itchyjunk]> do native object also have methods and such?
[23:56:49] <pyzozord> Interesting how often this happens though. For what I know it may happen non stop all the, we just engineered around it
[23:57:04] <pyzozord> maybe it happend much less in the past because the components were much bigger
[23:57:11] *** Joins: arcatech (~arcatech@user/arcatech)
[23:57:18] <[itchyjunk]> error correcting code is too costly to run it for everything
[23:57:40] *** Quits: sinhue (~sinhue@stip-static-55.213-81-207.telecom.sk) (Ping timeout: 252 seconds)
[23:57:46] <GeDaMo> https://en.wikipedia.org/wiki/Radiation_hardening
[23:57:46] <bayaz> Title: Radiation hardening - Wikipedia 
[23:58:07] *** Quits: mei (~mei@user/mei) (Quit: mei)
[23:58:37] <Stefan26> are error correcting codes present in some form in my home? (in my computer or router etc)
[23:58:47] <deniska> we have tech which deals with your typical bit flip, it's called ECC RAM
[23:59:11] <Izem> https://youtu.be/eunYrrcxXfw
[23:59:12] <bayaz> Title: DEF CON 25 - XlogicX - Assembly Language is Too High Level 
[23:59:34] <izak> [itchyjunk] a native object is a long pointer and a none native <<
[23:59:42] <InPhase> Stefan26: Here's something for you to chew on...  This is also why testing is not adequate for program.  It results in a faulty model of how computers work in a physical world.
[23:59:50] <[itchyjunk]> :(
[23:59:51] <InPhase> not adequate for program reliability
[23:59:57] <deniska> and ECC ram isn't even expensive, except for one CPU manufacturer which doesn't give you access to it unless you buy an enterprise grade CPU
[23:59:58] * [itchyjunk] googles what a long pointer is
