[00:07:35] <neominimum> How does one escape newlines within docstrings? I tried using backslash to no avail.
[00:09:04] <ogamita> neominimum: why do you want to escape them?
[00:09:20] <ogamita> Either you have a newline, or you don't.
[00:09:56] <ogamita> Now, you could use #. with some lisp expression to build a long line from smaller lines.
[00:10:03] <ogamita> #.(concatenate 'string "foo" 
[00:10:05] <ogamita> "bar"
[00:10:08] <ogamita> "baz")
[00:10:19] <ogamita> or #.(format nil "foo~
[00:10:21] <ogamita> bar~
[00:10:24] <ogamita> baz")
[00:10:37] <neominimum> I would like to manually wrap the long lines of a docstring in my editor to 80 columns while keeping the docstring in tact.
[00:11:22] <ogamita> Yes, then using such a #. expression.
[00:11:43] <neominimum> I see, that's not ideal but thanks for the tip! :)
[00:11:56] <ogamita> Note also, that nothing prevents you to use 80-column docstrings. In anycase, it's out of the scope of CL to specify how docstrings are processed and rendered.
[00:12:37] <ogamita> You can use any markup format you want, and provide a documentation navigation or extraction system that processes them.
[00:13:20] <ogamita> Note also that you can attach the docstring separately, using (setf documentation).  Even in a separate file.
[00:13:35] <ogamita> This can be useful if you want  to provide localised docstrings.
[00:15:47] <neominimum> Okay cool! I think I'll keep the docstrings without any hard formatting and try to find a way to make emacs wrap them instead.
[00:16:44] <ogamita> or vice versa.  Eg. in html, you can add newlines, they're ignored, and the text is reflowed anyways.
[00:16:59] <ogamita> Most markups work like that.
[00:17:30] <neominimum> I didn't consider that, hmm
[00:22:01] <neominimum> I need to think about this, not sure which way I'm going to go but thanks for the hints ogamita
[00:23:07] <White_Flame> the only downside to literal newlines is that the further lines don't indent, and that's a problem with using a text editor in general
[00:23:10] <ogamita> For an example http://informatimago.com/develop/lisp/doc/  another: https://quickdocs.org  there are a lot of doc extration/generation systems. it's a good exercise.
[00:23:38] <ogamita> Well, you can use some emacs multi-mode, and write your docstring, eg in org-mode.
[00:23:49] <ogamita> docstrings and comments…
[00:24:09] <ogamita> or do it manually with narrow-to-region and widden.
[00:24:57] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[00:25:37] <ogamita> neominimum: https://github.com/informatimago/lisp/tree/master/lispdoc there are severa generator formats: genhtml genrst gentext.
[00:27:11] *** Joins: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net)
[00:29:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:30:35] <tewi> does EQUAL compare pathname components using EQUAL rules?
[00:34:29] <tewi> or does it use EQL in the spirit of "eql is the default predicate when none is mentioned explicitly"
[00:34:38] <neominimum> ogamita: Okay, just had a quick look and I'll keep that in mind if I need to extract information from docstrings in the future.
[00:35:31] <Bike> tewi: depends on how the filesystem works
[00:35:38] <Bike> probably not eql, though
[00:39:50] <neominimum> White_Flame: Yeah I had that issue, but I tried to tell myself that I could learn to live with it, eventually. I just want to keep the docstrings content with little presentation but I guess even a plaintext markup language is has a little presentation to it. I think I should keep the docstrings short and work out something different for longer form documentation.
[00:41:17] <White_Flame> just make a #.(docstring "...." "..."....) macro to let you write it the way you want in source, but then also massaged to look as you want as a data string
[00:41:30] <White_Flame> it doesn't have to always be 1:1
[00:48:46] <neominimum> White_Flame: ogamita recommended that too, I may just try out. I think I am being a little rigid in my approach, so thanks.
[01:13:57] *** Joins: dre (~dre@2001:8003:c932:c301:3356:3f6e:5d90:d014)
[01:14:37] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:b5bf:8685:d5d5:da42) (Ping timeout: 240 seconds)
[01:16:22] *** Quits: dra (~dra@2a04:4540:6411:e900:7815:ce5f:337c:547c) (Quit: Leaving)
[01:54:33] *** Joins: [w] (~w]@2601:8c1:80:70d0::4b06)
[02:30:50] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:36:05] *** Joins: Bike (~Bike@71.69.170.70)
[03:14:47] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[03:51:27] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:03:08] *** Joins: Bike (~Bike@71.69.170.70)
[05:20:15] *** Quits: tewi (~tewi@apn-95-40-111-40.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[05:44:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:46:04] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[05:56:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[05:59:25] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:06:34] *** Joins: Oladon (~olad@98.43.81.226)
[06:40:57] *** Joins: Bike (~Bike@71.69.170.70)
[07:12:06] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:12:35] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:13:35] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:4100:dd4:ee5e:72a7)
[07:32:06] <beach> Good morning everyone! 
[07:57:21] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:05:16] *** Quits: Bike (~Bike@71.69.170.70) (Quit: the night)
[08:10:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:12:14] *** Joins: lispnik (~lispnik@68.21.148.119)
[08:28:10] *** Quits: lispnik (~lispnik@68.21.148.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:35:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:52:17] *** Joins: lispnik (~lispnik@68.21.148.119)
[09:09:09] *** Quits: lispnik (~lispnik@68.21.148.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:31:44] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a)
[09:34:35] *** Joins: sts-q (~sts-q@91.200.108.233)
[11:14:10] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:2509:bf2b:aa9a:d931)
[12:47:42] *** Joins: shka (~herr@109.231.0.226)
[13:20:04] *** Joins: lisp123 (~lisp123@45.86.203.177)
[13:20:42] <lisp123> Once I use a symbol that is inherited from another package via USE-PACKAGE, it will no longer have status :inherited in FIND-SYMBOL?
[13:27:59] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[13:29:47] <lisp123> ignore me
[13:29:53] <lisp123> looks to be a bug in my code
[13:38:51] <beach> It depends on the package in which you are looking for it.
[13:39:08] <beach> But, I'll ignore you as requested. 
[13:39:36] *** Quits: lisp123 (~lisp123@45.86.203.177) (Quit: Leaving...)
[13:39:44] *** Joins: tewi (~tewi@apn-95-41-134-132.dynamic.gprs.plus.pl)
[14:29:45] *** Quits: santiagopim (~user@84.78.243.45) (Remote host closed the connection)
[14:32:40] *** Quits: sts-q (~sts-q@91.200.108.233) (Remote host closed the connection)
[14:33:05] *** Joins: sts-q (~sts-q@91.200.108.233)
[14:41:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[14:43:05] *** Joins: aeth (~aeth@user/aeth)
[15:10:57] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:15:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:44:05] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Remote host closed the connection)
[15:45:09] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[15:54:02] *** Joins: lisp123_ (~lisp123@45.86.203.177)
[15:54:43] *** Quits: lisp123_ (~lisp123@45.86.203.177) (Client Quit)
[15:57:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[16:05:07] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[16:06:56] *** Joins: Bike (~Bike@71.69.170.70)
[16:10:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:35:08] *** Quits: sts-q (~sts-q@91.200.108.233) (Remote host closed the connection)
[16:36:08] *** Joins: sts-q (~sts-q@91.200.108.233)
[16:49:46] *** Joins: treflip (~user@user/treflip)
[17:49:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:24:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[19:24:46] *** Joins: Bike (~Glossina@71.69.170.70)
[19:37:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:46:44] <lisp123> Practical Common Lisp on Lambda List Keywords: they must be declared in the order I've discussed them: first the names of the required parameters, then the optional parameters, then the rest parameter, and finally the keyword parameters.
[19:46:54] <lisp123> Is this actually true?
[19:47:36] <Bike> sure is.
[19:47:49] <lisp123> Interesting
[19:48:11] <lisp123>  (defun test (&key a &rest b) (print a) (print b)) & then (test :a 3 4 5 6) gave an error on 'unpaired keyword'
[19:48:26] <Bike> clhs 3.4.4 lists the grammar for ordinary lambda lists
[19:49:17] <lisp123> I see, I didn't know it was in order (http://www.lispworks.com/documentation/lw60/CLHS/Body/03_da.htm)
[19:49:39] <lisp123> So [ ... ] is always in order right when reading these syntax descriptions?
[19:50:01] <Bike> it's in a slightly modified BNF. [whatever] means optional.
[19:50:10] <Bike> the required order is just the order of the clauses.
[19:50:14] <lisp123> Is there a particular reason why order is enforced?
[19:50:33] <Bike> the semantics don't make sense in any other order.
[19:51:35] <lisp123> Why is that?
[19:51:38] <Bike> like, what would having &rest before &optional mean?
[19:52:31] <lisp123> Thing is &rest collects all the items with keywords
[19:53:00] <Bike> What?
[19:53:04] <lisp123> So I thought the order in defining the (ordinary) lambda list in the function definition wouldn't matter
[19:53:17] <lisp123> but when calling it, it is more important
[19:53:34] <Bike> I don't understand what you mean by "collects all the items with keywords".
[19:53:42] <lisp123> PCL:  If both &rest and &key appear in a parameter list, then both things happen--all the remaining values, which include the keywords themselves, are gathered into a list that's bound to the &rest parameter, and the appropriate values are also bound to the &key parameters. 
[19:53:54] <Bike> well, yes, but you can do &rest without also having &key.
[19:54:04] <Bike> &rest just gives you a list of all parameters subsequent to the required and optional ones.
[19:54:58] <lisp123> I see
[19:55:00] <Bike> i suppose you could imagine allowing &rest and &key to be reordered while not changing the meaning, but what would be the point? makes code potentially a little harder to read for no obvious reason.
[19:55:29] <lisp123> Yeah no point, was just curious because I was writing a parser for ordinary lambda lists
[19:56:07] <lisp123> And I was going to store the order in which the lambda-list keywords appeared, but now don't have to
[19:58:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[20:00:20] <lisp123> One more question, is &key &rest &optional - symbols?
[20:00:43] <lisp123> (find-package (symbol-name &key)) &  (find-package '&key) both returned nil
[20:01:09] <lisp123> ignore me!
[20:01:18] <lisp123> I wish there was recall in IRC!!
[20:07:54] <lisp123> https://plaster.tymoon.eu/view/2924#2924
[20:08:16] <lisp123> Is there a way to get this to work?
[20:08:52] <lisp123> I want to push to the variable stored in CURRENT-PARAMETER-TYPE, not to CURRENT-PARAMETER-TYPE itself
[20:10:59] <lisp123> I get a bit closer with (symbol-value current-parameter-type)
[20:11:16] <lisp123> But it then seems to refer to a global variable and not the local version
[20:15:16] <lisp123> https://plaster.tymoon.eu/view/2925#2925
[20:15:18] <lisp123> Works
[20:16:04] <lisp123> But does anybody have a better way?
[20:18:05] <Bike> why do you want to make all of these special variables, exactly?
[20:18:07] <lisp123> (not so much on parsing the lambda list, but on storing pointers to local variables)
[20:18:22] <lisp123> I added that hack to get symbol-value to work
[20:19:09] <Bike> oh, i see what you're doing now. i can't recommend writing your code like this. i'd do something like (case current-parameter-type ((required-parameters) (push item required-parameters)) ...)
[20:19:43] <Bike> or you could have a list or array structure or something instead of variables
[20:19:48] <lisp123> Yeah, that's how I usually did it. Just tried something new
[20:20:00] <lisp123> or you could have a list or array structure or something instead of variables -> thanks
[20:20:07] <lisp123> that sounds like a better way
[20:20:14] <lisp123> (when trying to avoid the case)
[20:39:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:41:10] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[20:41:44] *** Joins: derelict (derelict@user/derelict)
[21:02:22] <lisp123> (defun inner (&rest a) (print a)) -> (inner 1) -> (1)
[21:02:35] <lisp123> (defun outer (&rest a) (inner a)) -> (outer 1) -> ((1))
[21:02:50] <lisp123> How to write outer so that it prints (1)?
[21:03:50] <lisp123> (defun outer (&rest a) (apply #'inner a))
[21:04:02] <lisp123> Now I hope it works with keyword & optional arguments...watch this space
[21:05:07] <mfiano> Use #'apply
[21:05:22] <mfiano> Oh sorry you answered your own question.
[21:12:41] <lisp123> mfiano: Thanks
[21:15:37] <lisp123> From Stack Overflow: By mixing &rest parameters and keyword parameters in the same parameter list, you won't be able to enter any rest parameters that don't match your keyword parameter which is why you enter into a breakloop here.
[21:16:12] <lisp123> Does that mean, in the absence of &allow-other-keys, there is no point to mixing &rest and &key unless one wants to collect all the arguments into a list?
[21:16:36] <lisp123> Seems like you can't have any more variables apart from those defined by keywords, but just want to confirm as I wasn't sure from reading this
[21:18:42] <bremner> well, not sure what you mean, but &aux variables are a thing
[21:20:39] <lisp123> bremner: Yeah, thats a whole another level of complexity :O
[21:20:44] <lisp123> CLHS: It is permitted to specify both &rest and &key. In this case the remaining arguments are used for both purposes; that is, all remaining arguments are made into a list for the rest parameter, and are also processed for the &key parameters. If &key is specified, there must remain an even number of arguments; see Section 3.5.1.6 (Odd Number of Keyword Arguments).
[21:21:25] <lisp123> This suggests that once I have &key, I must enter any parameters after required & optional in pairs?
[21:23:02] <bremner> it suggest to me you should avoid having both &rest and &key :P
[21:23:48] <lisp123> :)
[21:24:25] <mfiano> bremner: That is bad advice. It is a very common idiom
[21:24:55] <bremner> yeah, I know, but that documentation...
[21:25:08] <bremner> I mean, I guess I don't know what is common, but I use it
[21:25:34] <bremner> afair, it just works
[21:26:25] <bremner> the docs sound (to me) like keyword parameters end up in the &rest list
[21:26:29] <bremner> but I think that's wrong
[21:29:11] <lisp123> bremner: they do
[21:29:16] <bremner> blergh
[21:29:47] <lisp123> (defun test (&rest a &key b) (list a b))
[21:29:59] <lisp123> (test :b 2) -> ((:B 2 ) 2)
[21:30:33] <lisp123> (test 'a :b 2) -> error
[21:30:42] <lisp123> (test :b 2 'a) -> error
[21:31:48] <lisp123> https://stackoverflow.com/questions/55130957/lambda-list-error-with-rest-and-key-arguments-in-common-lisp/55131982 was the most useful source
[21:32:29] <bremner> huh. TIL. Or maybe I knew and forgot.
[21:33:01] <lisp123> probably the latter
[21:33:06] <lisp123> :)
[21:33:12] <bremner> and is there some standard function or macro to postprocess the &rest list and get rid of the keywords?
[21:33:29] <bremner> because hand parsing argument lists, not for me.
[21:33:33] <lisp123> just don't use &key?
[21:34:01] <lisp123> i think you may be after &optional
[21:34:13] <lisp123> the reason for &key is to allow for out of order arguments
[21:34:17] <bremner> no, I prefer &key to &optional
[21:34:55] <bremner> but whatever, it is what it is.
[21:35:17] <lisp123> I guess you can write something very easily, a quick funciton that takes the second argument of the list in &rest
[21:35:38] <lisp123> But from what I can see &rest and &key are combined to allow for &allow-other-keys in generic functions
[21:35:49] <lisp123> haven't see any another meaningful use cases
[21:36:06] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:36:24] <lisp123> (although I guess it could be useful at times to analyse what was passed in, but then again there is supplied-argument-p for that too)
[21:47:52] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:50:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:57:24] *** Joins: speskk (~speskk@c-71-234-67-119.hsd1.ct.comcast.net)
[21:57:24] *** Quits: speskk (~speskk@c-71-234-67-119.hsd1.ct.comcast.net) (Changing host)
[21:57:24] *** Joins: speskk (~speskk@user/speskk)
[21:57:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:57:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[22:18:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[22:24:20] <tewi> is there even a point in mixing &rest parameters with &key parameters? from what I can see, in that situation the only parameters that can be passed are keyword parameters anyway, so unless you want to have a list containing keywords and values passed with them i don't see the point
[22:24:29] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 252 seconds)
[22:34:35] <Bike> the most common usage is to pass the keywords to some other function
[22:35:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:36:29] <Bike> e.g., say you write an extension to cl:find so that it can work on some kind of object other than sequences. if your function gets a sequence, you want to just pass on to cl:find. so you can do (defun find (item collection &rest keys &key ...etc...) (if (sequencep collection (apply #'cl:find item collection keys) ...))
[22:38:14] *** Quits: sts-q (~sts-q@91.200.108.233) (Remote host closed the connection)
[22:39:19] *** Joins: sts-q (~sts-q@91.200.108.233)
[22:44:38] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:48:23] *** Joins: santiagopim (~user@44.pool90-167-219.static.orange.es)
[22:50:03] *** Quits: sts-q (~sts-q@91.200.108.233) (Remote host closed the connection)
[22:51:54] *** Joins: sts-q (~sts-q@91.200.108.233)
[22:53:03] *** Quits: sts-q (~sts-q@91.200.108.233) (Remote host closed the connection)
[22:54:46] *** Joins: sts-q (~sts-q@91.200.108.233)
[23:45:35] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:2509:bf2b:aa9a:d931) (Ping timeout: 256 seconds)
