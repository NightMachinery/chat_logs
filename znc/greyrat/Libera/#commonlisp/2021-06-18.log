[00:34:30] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 268 seconds)
[00:35:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 268 seconds)
[00:36:06] *** Joins: aeth (~Michael@user/aeth)
[00:37:24] *** Joins: akoana (~ah@user/akoana)
[00:40:21] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[00:47:34] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 268 seconds)
[00:51:23] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:52:29] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[00:55:00] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[01:04:14] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:05:35] *** Quits: frgo (~frgo@dynamic-046-114-145-044.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[01:06:39] *** Quits: tfb (~tfb@88.98.95.237) ()
[01:08:05] *** Joins: derelict (~derelict@user/derelict)
[01:09:05] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[01:09:53] *** Joins: frgo (~frgo@dynamic-046-114-150-070.46.114.pool.telefonica.de)
[01:11:02] *** Joins: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7)
[01:12:23] *** Quits: pve (~pve@188-67-209-150.bb.dnainternet.fi) (Quit: leaving)
[01:15:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[01:17:25] *** Joins: selwyn (~selwyn@user/selwyn)
[01:17:36] *** Joins: selwyn_ (~selwyn@user/selwyn)
[01:31:17] <phoe> grab a lisp object database/4
[01:31:21] <phoe> oops sorry
[01:31:52] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[01:36:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[01:42:19] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 272 seconds)
[01:42:20] *** Joins: zacts (~zak@user/zacts)
[01:46:39] *** Quits: akoana (~ah@user/akoana) (Ping timeout: 268 seconds)
[01:47:38] *** Joins: akoana (~ah@user/akoana)
[01:54:32] *** Quits: zacts (~zak@user/zacts) (Quit: gtg)
[01:59:40] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[02:00:35] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:25:27] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.0.1)
[02:32:24] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[02:33:54] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806) (Ping timeout: 264 seconds)
[02:34:34] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:34:58] *** Joins: selwyn (~selwyn@user/selwyn)
[02:52:28] *** Joins: derelict (~derelict@user/derelict)
[02:54:18] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 240 seconds)
[02:57:55] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 244 seconds)
[03:06:25] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[03:16:17] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:22:01] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[03:42:10] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:24:16] *** Joins: cjb (~cjb@user/cjb)
[04:28:30] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 264 seconds)
[04:53:08] *** Joins: igemnace (~ian@user/igemnace)
[04:59:31] *** Joins: trufas (~trufas@177.240.218.218)
[05:06:52] *** Joins: torbo (~user@72.15.63.17)
[05:15:32] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:15:33] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[05:18:56] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:3dfa:5a42:41cd:a4f9) (Remote host closed the connection)
[05:22:14] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:25:19] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[05:25:30] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 264 seconds)
[05:27:20] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[05:29:24] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[05:55:48] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[06:11:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[06:15:26] *** Quits: lottaquestions (~nick@2607:fa49:5040:7500:980:5683:345c:5bed) (Remote host closed the connection)
[06:15:51] *** Joins: lottaquestions (~nick@2607:fa49:5040:7500:79d6:b2a9:7eb2:2cc1)
[06:32:10] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 268 seconds)
[06:40:55] *** Joins: killsushi (~killsushi@user/killsushi)
[06:44:04] *** Joins: prxq_ (~quassel@x4db4e73d.dyn.telefonica.de)
[06:48:13] *** Quits: prxq (~quassel@x4dbe0bff.dyn.telefonica.de) (Ping timeout: 272 seconds)
[06:59:13] *** Quits: bilegeek (~bilegeek@2600:1008:b017:63a6:c26d:d119:faaa:a6d7) (Quit: Leaving)
[07:00:00] *** Quits: esb (~esb@2804:14c:1ad:8b70:e02e:8760:b78b:b38e) (Remote host closed the connection)
[07:04:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[07:07:02] *** Quits: killsushi (~killsushi@user/killsushi) (Quit: Leaving)
[07:07:22] *** Joins: killsushi (~killsushi@user/killsushi)
[07:08:46] *** Quits: torbo (~user@72.15.63.17) (Remote host closed the connection)
[07:16:02] *** Joins: marcrosoft (uid504919@id-504919.tooting.irccloud.com)
[07:24:19] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 272 seconds)
[07:31:56] *** Joins: casual_friday_ (~casual_fr@216.71.110.168)
[07:32:16] *** Quits: casual_friday (~casual_fr@216.71.110.168) (Ping timeout: 244 seconds)
[07:44:19] *** Joins: dsk (~dsk@user/dsk)
[07:51:38] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:56:05] <beach> Good morning everyone! 
[08:02:07] *** terpri is now known as robin
[08:04:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[08:04:59] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:10:48] *** Joins: doulos05 (~user@119.195.98.240)
[08:12:13] <doulos05> Hi, I'm trying to wrap my head around packages and systems in Common Lisp.
[08:12:14] <doulos05>  
[08:12:44] <doulos05> I've just written my first live CL code (https://github.com/jonathanabennett/gtd-review).
[08:13:38] <doulos05> This is just the simplest part of the program (system?) I want to create. It is an on-exit script for taskwarrior.
[08:13:47] <knusbaum> A package is just a namespace. A system is just a collection of packages.
[08:14:35] <doulos05> So does that little script need to be its own package within my gtd-review system? Or it's own system?
[08:15:00] <doulos05> If I want to be able to asdf:make it into the executable I need to drop into the hooks folder.
[08:15:33] <doulos05> I've read a couple websites about this now and for some reason this concept isn't translating into what I'm trying to create.
[08:15:44] <doulos05> Which tells me I'm not understanding the concept.
[08:15:54] <knusbaum> What errors are you seeing?
[08:16:10] <knusbaum> I've not used asdf:make for a while, but I'll look.
[08:16:49] <doulos05> Not seeing any errors, what I've got works perfectly.
[08:17:06] <doulos05> I'm just not sure how to add the next component of the tool I want to make.
[08:17:28] <knusbaum> You can add it to the existing system, or create a new system.
[08:17:39] <knusbaum> You can add it to the same package even.
[08:17:52] <knusbaum> It is up to your organizational desires.
[08:18:49] <doulos05> I feel like (stop me if I'm mis-understanding CL) I want it to be same system, different package because it's the second in a suite of tools that work together but run separately.
[08:19:41] <beach> doulos05: I usually split a project of mine into one or (usually) more "modules", where each "module" lives in a directory, has an ASDF system definition, and has its own own package definition. 
[08:20:47] <beach> doulos05: If the software is large, there will be a top ASDF system that :DEPENDS-ON the others, thereby creating the entire system from its modules.
[08:21:14] <knusbaum> I'm trying to remember how asdf:make works, but if you want separate executables, you might want separate systems.
[08:21:22] <doulos05> beach: So then I'd move this to the gtd-review/taskwarrior-hook directory, rename appropriately, and create a new project in a sibling folder for the next part?
[08:22:11] <beach> It looks like it is already appropriately named. 
[08:22:38] <beach> But yes, if you are going to add more stuff that can be considered separate modules, I would create a new directory for each one. 
[08:23:05] <doulos05> beach: Yeah, but it has the name for the whole suite when this is only the smallest part.
[08:23:18] <beach> Oh, maybe it is not appropriately named.
[08:23:26] <beach> Got it.
[08:23:31] <beach> Yes, then I would rename it.
[08:23:54] <beach> doulos05: Do you take other remarks on your code?
[08:24:40] <beach> It is often a bad idea to :USE packages other than the CL package.  It is better to use explicit package prefixes to refer to symbols in different packages.  
[08:25:10] <beach> The Common Lisp HyperSpec has opinions on the number of semicolons you use in comments, and top-level comments should have at least 3. 
[08:26:35] <beach> There is usually a single blank line between top-level forms, but you have one occurrence of no blank line and one occurrence of two blank lines.
[08:27:45] <beach> The function GET-CURRENT-PROJECT-LIST does not use its parameter as far as I can see.
[08:28:18] <doulos05> beach: absolutely! This is literally the first time I've written CL code not copy/pasted from tutorials.
[08:28:39] <beach> I see.  Congratulations! 
[08:28:41] <mfiano> doulos05: Congratulations!
[08:29:18] <mfiano> If you haven't already, check out Practical Common Lisp online. That will open up your eyes to a lot of ideas and get some more familiarity
[08:31:28] <doulos05> beach: Whoops on the missing parameter! How do I ensure that INFERIOR-SHELL is available if I don't :USE it?
[08:32:20] <doulos05> I actually used an explicit package prefix in the code itself I think
[08:32:41] <mfiano> :USE brings in the symbols of the given package into the package being defined, so no qualification is needed. To qualify it, you write it as PACKAGE:SYMBOL
[08:33:39] <mfiano> :USE makes reading/maintaining code difficult because you don't know where symbols came from, and also makes it easy to get conflicts
[08:33:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 252 seconds)
[08:33:57] <beach> doulos05: What mfiano said.  The symbols are available as soon as the external package is defined and the symbols are exported.  :USE just makes it possible to use them without a package prefix. 
[08:34:42] <mfiano> If the package is long and your fully-qualified symbols are too noisy, you can look into package-local nicknames
[08:36:14] <doulos05> Aha, the :DEPENDS-ON makes sure that it's there. Ok, now this is making sense
[08:36:20] *** Joins: zacts (~zak@user/zacts)
[08:36:34] *** Quits: zacts (~zak@user/zacts) (Client Quit)
[08:36:53] <mfiano> Hmm?
[08:37:03] <mfiano> :DEPENDS-ON has nothing to do with packages/symbols :)
[08:37:11] <mfiano> That is a "system" concept
[08:37:57] <doulos05> right, but :DEPENDS-ON makes sure that inferior shell gets loaded when my system gets loaded so that I can call on it in my packages
[08:38:01] <beach> doulos05: The package is defined when the file that contains the definition is loaded.  That may or may not be as a result of the file appearing in an ASDF system definition. 
[08:38:35] <mfiano> doulos05: THat sounds right, ok.
[08:38:56] <mfiano> Keep in mind that there is no association between systems and packages and you will be a step ahead of many CL newbies :)
[08:39:08] <beach> Heh.
[08:39:23] <beach> That's true.
[08:41:48] <mfiano> A package is for the most part just a collection of symbols. A system is a collection of modules/files, which may be comprised of any number of packages. N files with 1 package, N files with N packages, etc etc. It's up to you
[08:43:05] <mfiano> It's unfortunate that other languages call the source distribution manifest a package...that's what CL systems are, not packages.
[08:43:23] *** Joins: zacts (~zak@user/zacts)
[08:46:23] <doulos05> Awesome, thank you so much!
[08:49:31] <mfiano> Sure, anytime, and welcome to the party.
[09:26:01] *** Quits: zacts (~zak@user/zacts) (Quit: gtg)
[09:28:30] *** Joins: ramenbytes (~vir@071-009-124-057.res.spectrum.com)
[09:50:58] <doulos05> Another quick followup, someone mentioned they hadn't used ASDF:MAKE. Do you just use sb-ext:save-lisp-and-die?
[09:51:34] <beach> I don't know about others, but I never bother to make an executable.  I consider my Common Lisp REPL to be my shell.
[09:51:59] <doulos05> That makes sense.
[09:52:07] <knusbaum> I prefer to work that way too.
[09:52:48] <beach> I guess I just refuse to accept the crappy application interface that "modern" operating systems give us, and pretend that I have a Lisp OS instead.
[09:53:26] <moon-child> someday we won't have to pretend
[09:53:37] * beach crosses fingers.
[09:55:37] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[09:55:48] <doulos05> lol. Emacs is close, but it isn't common lisp
[09:58:33] <kakuhen> Rainer Joswig vehemently disagrees with that
[09:58:45] <knusbaum> I like the unix shell. But if I'm writing common lisp, I prefer to take advantage of the lisp REPL.
[10:01:16] <moon-child> the unix shell is at somewhat of a local optimum in the context of a unix system.  But unix as a paradigm has overstayed its welcome
[10:03:38] <knusbaum> I'm happy to be introduced to anything better. Plan 9 is the only paradigm I've seen that seems to beat it (and is widely available)
[10:05:23] <White_Flame> from what I've seen, plan 9 is unix plus some cleanup, tooling, and utf-8, but it still certainly in the unix style
[10:05:29] <moon-child> text composes well, but lacks structure.  Shell and c are poor languages.  Hardware isolation means IPC is slow, which limits architecture design
[10:05:46] <White_Flame> moon-child: unix isn't about text, it's about C char streams/buffers
[10:05:54] <moon-child> plan9 is an incremental improvement to unix
[10:06:30] <knusbaum> moon-child: more or less, yes.
[10:06:45] <moon-child> White_Flame: char streams, sure.  I don't see as that makes a meaningful difference
[10:06:54] <White_Flame> moon-child: it could be binary or whatever
[10:07:09] <knusbaum> Plan 9 serves lots of binary protocols over C char streams
[10:07:37] <moon-child> White_Flame: ok.  It still composes well but lacks structure and expressiveness, which was my main point
[10:08:14] <knusbaum> What is available and more structured than unix?
[10:08:29] <White_Flame> anything that has higher level serialization protocols
[10:08:39] <moon-child> available?  Nothing
[10:08:44] <White_Flame> but, these tend not to be done at the OS level anymore
[10:08:57] <White_Flame> which means the OS is unaware of anything going on.  Everything is black box to it
[10:09:09] <knusbaum> Sure. 
[10:09:16] <knusbaum> So something like erlang?
[10:09:17] <moon-child> White_Flame: yes, you can layer higher-level serialization protocols _on top of_ text.  But text lacks them inherently, which is problematic.  If you want a byte stream, you can do that inside of a structured data paradigm, but you cannot do the other way around
[10:09:49] <knusbaum> Why is it important to have structured data at the OS level?
[10:09:51] <White_Flame> a few other problems with the unix model is the heirarchical filesystem, and the privilege model
[10:10:00] <moon-child> in a general sense.  IOW every program invents its own serialization mechanisms, and they are not commensurate.  At that point, you lose the composability.  Like fullscreen applications.  I can't pipe alpine into something, for instance
[10:10:24] <White_Flame> moon-child: right, and it gets difficult to automate things when every single text file has a different format
[10:10:33] <knusbaum> White_Flame: Yes, both of those are problematic if you want to represent non-file resources in the file system.
[10:10:45] <moon-child> knusbaum: erlang is cool.  Somebody did an erlang os once, hydros.  (There were a few others, but hydros was the most notable one, I think)
[10:11:00] <knusbaum> Oh, that's cool. I'll have to check that out.
[10:11:11] <moon-child> knusbaum: everything is a file, but a file is not a record.  That aspect of unix is not terrible
[10:11:27] <White_Flame> knusbaum: even with files, choosing a singular directory for a file to be in becomes more and more troublesome, and links are just a bandaid
[10:11:44] <knusbaum> White_Flame: Yes. Plan 9 fixed a lot of this.
[10:11:48] <moon-child> White_Flame: file descriptors are not terrible.  The user/group system isn't great, though.  Hierarchy is one of the biggest problems
[10:12:13] <knusbaum> Hierarchy is good if it can be controlled by the process. I.e. namespaces
[10:12:18] <moon-child> White_Flame: notably, you can only hardlink files, not directories, because apparently unix people don't know how to write garbage collectors
[10:12:51] <knusbaum> moon-child: So what's an unavailable but better system?
[10:13:06] <beach> CLOSOS. :)
[10:13:14] <White_Flame> and of course, the unix model exposes a C api, which means by default you're writing applications in a system level language
[10:13:14] <moon-child> http://metamodular.com/closos.pdf
[10:13:22] <knusbaum> Did it ever exist?
[10:13:32] <beach> CLOSOS does not yet exist.
[10:13:35] <knusbaum> Ohhh! 
[10:13:38] <beach> But we are working (slowly) on it.
[10:13:42] <knusbaum> I remember talking to Robert about this.
[10:13:48] <beach> That would be me.
[10:13:49] <knusbaum> (I think it was Robert)
[10:13:52] <knusbaum> Yeah, hi!
[10:14:01] <beach> Hey.
[10:14:14] <knusbaum> I talked to you about this in probably ~2016
[10:14:27] <beach> Hence "slowly" :)
[10:14:29] <moon-child> there's also arcan.  I'm working on something (slowly) of my own.  As is corbin
[10:14:31] * beach is off to buy food before the store gets too crowded. 
[10:14:31] <knusbaum> haha.
[10:14:48] <knusbaum> beach: I'll read through this.
[10:15:16] <moon-child> arcan exists within unix, and as such is less idealistic but much more practical
[10:15:39] <knusbaum> How does it differ from something like common-lisp?
[10:15:52] <White_Flame> I've only looked a bit at arcan, but I'm impressed by the comprehensiveness around its ideas
[10:15:56] <knusbaum> I can write whatever I want in common-lisp. What does arcan provide?
[10:16:13] <White_Flame> arcan isn't a language, it's a graphics system
[10:16:19] <knusbaum> Ahh.
[10:16:25] <moon-child> arcan is very different from common lisp.  Arcan is a platform for protocols
[10:16:36] <White_Flame> which basically brings in elements of desktop UIs, applications, games, generalized human interfaces, etc
[10:16:40] <moon-child> It's not so much a programming language _or_ a graphics system as the natural culmination of dtrace
[10:16:51] <moon-child> it happens to include a graphics system, and an audio system, and ...
[10:16:56] <knusbaum> I am totally confused by these descriptions.
[10:17:01] <moon-child> but the only reason it has those things is that so you can dtrace your graphical and audio applications
[10:17:18] <White_Flame> knusbaum: basically, think about how things in a system have to interact, and design a system to cover all the bases
[10:17:31] <knusbaum> IPC, basically
[10:17:37] <moon-child> (also network transparency, session resumption, etc)
[10:17:39] <knusbaum> For whatever definition of "process" you hav.
[10:17:46] <White_Flame> not "process", "things" ;)
[10:17:50] <knusbaum> Sure.
[10:17:54] <knusbaum> Call them whatever.
[10:18:09] <White_Flame> all the interactions that happen, between humans, different modules in the system, all the various resources in simultaneous use, etc
[10:18:28] <White_Flame> it's definitely not segregated by the os process distnction
[10:18:35] <moon-child> (also sane security model)
[10:18:43] <knusbaum> arcan mediates communication between modules?
[10:19:23] <knusbaum> Or arcan defines the interfaces
[10:19:26] <moon-child> yes, and more to the point communication with the user
[10:19:43] <knusbaum> So it defines how the user interacts with the system
[10:20:02] <knusbaum> Or how module <-> user communication works?
[10:21:05] <knusbaum> Is there a doc I can read? I'm having trouble with the search engines.
[10:21:45] <moon-child> https://www.divergent-desktop.org/blog/2020/08/10/principles-overview/  this may be helpful
[10:21:54] <moon-child> primary website is https://arcan-fe.com/
[10:23:53] <knusbaum> Cool, thanks.
[10:28:19] <ramenbytes> moon-child: That reminds me of particle: https://github.com/Seteeri/particle
[10:28:54] <ramenbytes> Originally it was using CL, however the author switched to PicoLisp because of gc performance I believe.
[10:28:56] <moon-child> hey, somebody made a picolisp operating system!
[10:30:39] <ramenbytes> Specifically, SBCL gc performance. They didn't want to have to replace the gc themselves after mucking around a bit with the sources if I recall.
[10:32:10] <White_Flame> yeah, that's something I look forward to in SICL, is the possibility of easier, and even maybe interactive GC exploration
[10:32:37] <ramenbytes> I didn't know that was on the roadmap. I suppose there is a paper in the repo?
[10:32:50] <White_Flame> I'm under the assumption that the GC will be in CL as well
[10:33:12] <White_Flame> I don't recall if that was in a paper, in a discussion with beach, or a fabrication of my imagination ;)
[10:33:26] <moon-child> mezzano gc is also in cl
[10:33:31] <White_Flame> ah true
[10:34:46] <ramenbytes> Fingers crossed we get a SICL gc library...
[10:34:57] <ramenbytes> Something like a MOP for gc maybe...
[10:46:53] *** Joins: shka (~herr@109.231.62.239)
[10:56:01] *** Quits: killsushi (~killsushi@user/killsushi) (Quit: Leaving)
[11:04:31] <phoe> trivial-garbage already exists but it has a very very basic GC interface
[11:04:43] <phoe> everything else would need to be highly implementation dependent
[11:05:11] <phoe> also the SICL garbage collector makes some assumptions that simply won't be true for other implementations, so AFAIU it won't be possible to easily port it
[11:05:45] <moon-child> I think the goal was to experiment with different GC designs within sicl, not to use multiple CL implementations with sicl's gc
[11:06:57] <ramenbytes> phoe: I was thinking something more like gc-as-a-library, sort of like MPS or the upcoming mmtk but in Lisp. Like how SICL has the reader available as a library.
[11:06:58] <phoe> oh, like that - then you'll also need custom allocators, since AFAIK the SICL one is tied to the GC
[11:07:35] <moon-child> mmtk is upcoming?  Isn't it decades old now?
[11:08:14] <ramenbytes> I was thinking about the front page saying something about "not ready for deployment".
[11:08:16] *** Quits: cjb (~cjb@user/cjb) (Remote host closed the connection)
[11:08:58] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[11:10:13] *** Joins: frgo_ (~frgo@p200300deef27d7006048e01a521e1d84.dip0.t-ipconnect.de)
[11:10:19] *** Quits: frgo (~frgo@dynamic-046-114-150-070.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[11:13:56] *** Parts: ramenbytes (~vir@071-009-124-057.res.spectrum.com) (#commonlisp)
[11:18:38] *** Joins: chrysanthematic (~chrysanth@82.2.21.4)
[11:22:57] <beach> I think it is very hard to design a good GC that is independent of other parts of the system.
[11:23:35] <beach> And the (untested) design of the SICL GC relies on the object representation. 
[11:24:35] <beach> I think MPS is probably perfectly good for a library GC.  I believe one version of Clasp is using it.
[11:24:44] *** Joins: pve (~pve@188-67-202-224.bb.dnainternet.fi)
[11:37:05] *** Quits: chrysanthematic (~chrysanth@82.2.21.4) (Quit: chrysanthematic)
[11:42:11] *** Joins: Cymew (~ante@c-b985225c.023-1144-7570702.bbcust.telenor.se)
[11:42:15] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806)
[12:00:45] *** Quits: ludston (~ludston@203.129.29.40) (Quit: Connection closed)
[12:02:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:05:37] *** Joins: tfb (~tfb@88.98.95.237)
[12:08:26] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 252 seconds)
[12:21:12] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Ping timeout: 268 seconds)
[12:36:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:39:31] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:40:31] *** Quits: doulos05 (~user@119.195.98.240) (Remote host closed the connection)
[12:42:58] *** Quits: frgo_ (~frgo@p200300deef27d7006048e01a521e1d84.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:43:32] *** Joins: frgo (~frgo@dynamic-046-114-150-070.46.114.pool.telefonica.de)
[12:48:55] *** Joins: Wilfred (uid159@id-159.highgate.irccloud.com)
[12:56:02] *** Joins: selwyn (~selwyn@user/selwyn)
[12:57:23] *** prxq_ is now known as prxq
[13:01:50] *** Joins: Alfr (~Alfr@user/alfr)
[13:10:08] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a600:79d6:b2a9:7eb2:2cc1)
[13:10:39] *** Quits: lottaquestions (~nick@2607:fa49:5040:7500:79d6:b2a9:7eb2:2cc1) (Ping timeout: 268 seconds)
[13:25:01] *** Quits: prxq (~quassel@x4db4e73d.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:38:39] *** Joins: hhdave (~user@ip212.ip-193-70-71.eu)
[13:57:26] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:613a:f2b5:91db:f12e)
[14:00:47] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[14:07:06] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 240 seconds)
[14:09:31] *** Joins: cranium (~cranium@user/cranium)
[14:10:01] *** Joins: selwyn (~selwyn@user/selwyn)
[14:15:35] *** Joins: derelict (~derelict@user/derelict)
[14:30:18] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[14:56:14] *** Joins: dlowe (~dlowe@user/dlowe)
[15:01:05] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:07:39] *** Joins: zacts (~zak@user/zacts)
[15:14:22] *** Quits: amk (~amk@176.61.106.150) (Read error: Connection reset by peer)
[15:14:40] *** Joins: amk (~amk@176.61.106.150)
[15:18:41] *** Quits: Wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[15:33:11] *** Joins: prxq (~quassel@x4db4e73d.dyn.telefonica.de)
[15:36:05] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:37:32] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[15:41:19] <luis> beach: at the last Boston Lisp Meeting, drmeister mentioned he wasn't happy with the performance of MPS, particularly compared to Bohem
[15:51:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[16:02:15] *** Joins: zacts_ (~zak@user/zacts)
[16:02:39] <phoe> luis: is there a recording of that meeting? I missed it and I'd want to see it nonetheless
[16:03:01] *** Quits: zacts (~zak@user/zacts) (Ping timeout: 272 seconds)
[16:04:52] *** zacts_ is now known as zacts
[16:20:19] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[16:20:51] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:23:55] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[16:40:01] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[16:46:43] *** Quits: zacts (~zak@user/zacts) (Quit: gtg)
[17:05:33] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[17:06:11] *** Quits: frgo (~frgo@dynamic-046-114-150-070.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[17:06:36] *** Joins: frgo (~frgo@p200300deef27d7007d8324eac458b606.dip0.t-ipconnect.de)
[17:13:30] <beach> luis: I see.  Interesting.  It would seem to confirm that it is hard to write a good garbage collector that is independent of the rest of the systme.
[17:13:56] *** Joins: shka (~herr@109.231.62.239)
[17:14:44] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 268 seconds)
[17:16:19] *** Joins: aeth (~Michael@user/aeth)
[17:17:00] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:27:09] *** Quits: gko (~user@2400:8902::f03c:91ff:fe70:e605) (Changing host)
[17:27:09] *** Joins: gko (~user@user/gko)
[17:31:53] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:53] *** ChanServ sets mode: +o Bike
[17:42:18] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 264 seconds)
[17:43:40] *** Joins: amk (~amk@176.61.106.150)
[17:48:02] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[17:50:57] <jmercouris> hello tomato!
[17:54:15] <beach> I see no such nick around.
[17:57:56] *** ChanServ sets mode: +o jackdaniel
[17:58:08] *** jackdaniel sets mode: -r 
[17:58:24] *** jackdaniel sets mode: -o jackdaniel
[17:58:35] *** Joins: igemnace (~ian@user/igemnace)
[18:00:14] *** Joins: francogrex (~user@2a02:a03f:6096:2f00:8150:8d6e:b4d8:39ec)
[18:00:21] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[18:00:58] *** Joins: Guest635 (~Guest63@5.30.23.247)
[18:04:23] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Remote host closed the connection)
[18:04:54] <jcowan> libgc is a close approximation
[18:05:29] <jackdaniel> libgc is abovementioned boehm:)
[18:05:45] <jackdaniel> mps aims to be better and (general purpose too)
[18:05:53] <jackdaniel> s/and (/(and /
[18:08:00] *** Joins: X-Scale` (~ARM@24.117.108.93.rev.vodafone.pt)
[18:08:04] <jmercouris> beach: well, it rhymed, I was just saying hello :-)
[18:08:23] *** Quits: X-Scale (~ARM@83.223.233.159) (Ping timeout: 268 seconds)
[18:10:24] <beach> jcowan: I don't consider a conservative garbage collector to be a "good" one.  It is just one that is better than manual memory management when you have to use a language with manual memory management for application programming, while keeping your sanity intact. 
[18:11:33] <jackdaniel> beach: libgc may be configured to run in precise mode (you need to provide additional information to it then of course)
[18:12:13] *** Joins: findow (688118f3@ircip1.mibbit.com)
[18:12:30] <beach> Now, how on earth would you do that?  As in, how do you provide precise stack scanning without knowing what the compiler does with your lexical variables?
[18:13:45] *** Joins: aeth_ (~Michael@user/aeth)
[18:13:58] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 244 seconds)
[18:14:22] <jackdaniel> you mark each allocated object yourself
[18:14:25] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:14:31] <jackdaniel> I'll link ecl file in a second
[18:15:10] *** aeth_ is now known as aeth
[18:15:15] <beach> So, again, how do you find all the GC roots on the stack if you don't know what the compiler does with your lexical variables?
[18:15:54] <beach> And that's just for starters. 
[18:16:35] <beach> You must then also provide information about every data structure you define so that the GC knows which fields contain pointers and which fields do not.
[18:16:57] <jackdaniel> yes, that's the additional information I've mentioned you need to provide
[18:17:03] <jackdaniel> https://gitlab.com/embeddable-common-lisp/ecl/-/blob/develop/src/c/alloc_2.d#L173
[18:17:05] <beach> But that's not enough.
[18:17:30] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:17:37] <beach> I don't see the root-finding code in there.
[18:17:38] <jackdaniel> I don't consider myself qualified to dispute, I'm just sharing information that libgc may be configured to run in precise mode (and ecl may be build using that option)
[18:22:19] <jackdaniel> it might be that I have misrepresented what libgc does - after some search it looks that it still scans the memory; the precise mode only gives it necessary information about objects structure (so it knows where to look for pointers in objects)
[18:23:26] <jcowan> https://www.hboehm.info/gc/conservative.html is an interesting comparison of conservative/precise gc, pointing out that precise gc also has costs
[18:23:38] <jcowan> even disregarding programmer convenience
[18:26:51] *** Joins: sp41 (~spal@70.241.120.35)
[18:29:33] <beach> jcowan: Notice that the header of the paragraph talks only about pointer identification.  
[18:29:58] <jcowan> sorry, which paragraph?
[18:30:17] <beach> jcowan: And apparently, interoperability is important to this author.
[18:30:31] <beach> The one that talks about the cost of precise GC.
[18:31:05] <jcowan> Yes.  This is why Guile uses libgc, because pointers can be passed aboug between libguile and its host
[18:31:12] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:31:37] <beach> So the entire page is biased.
[18:31:59] <beach> It is not a comparison between conservative and precise GC.
[18:32:08] <jcowan> Of course.  What page is not?  We write from our own perspective, as we have no access to any other.
[18:32:26] <beach> It is a comparison between the pointer-finding part of the two, given that it operates in an environment together with a hostile language. 
[18:32:41] <jcowan> If I wrote a page comparing Scheme to CL, there would undoubtedly be Scheme bias in it.
[18:32:57] <jcowan> (so I do not do such things)
[18:33:10] <luis> phoe: I don't think it was recorded, no.
[18:33:26] <beach> I am merely pointing out to the participants of #commonlisp not to draw the conclusion from this discussion and that page, that conservative GC is always better than precise.
[18:33:35] *** Joins: doulos05 (~user@119.195.98.240)
[18:34:03] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[18:34:21] *** Joins: igemnace (~ian@user/igemnace)
[18:34:33] <beach> Don't get me wrong though.  I think the Boehm GC is a great piece of work, that was thought to be impossible before someone actually did it.
[18:34:52] * jcowan nods
[18:35:47] <beach> And, as I pointed out, it is basically the only option available to applications programs who 1. are forced to use a language with manual memory management, and 2. wish to keep their sanity intact. 
[18:35:57] <beach> *programmers
[18:36:59] <doulos05> So I'm still thoroughly confused by packages. I seem to have broken my local-projects for quicklisp.
[18:37:37] *** Joins: tfeb (~tfb@88.98.95.237)
[18:37:51] <doulos05> When I run (ql:quicklisp "gtd-review"), it loads it.
[18:38:11] <luis> Boehm went on to achieve other great things such as adding precise real number arithmetic to the Android calculator. :D
[18:38:17] <doulos05> But when I try to then (in-package "gtd-review"), it says the package doesn't exist.
[18:38:35] <sm2n> doulos05, those are two separate things
[18:38:35] <jcowan> I used it in enhancing the C implementation of Joy, which formerly used malloc/free for strings
[18:38:47] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[18:38:53] <jcowan> luis: Nice
[18:38:54] <Xach> doulos05: the package defined by loading the system is likely to have an uppercase name.
[18:38:59] <luis> doulos05: your package's name is probably "GTD-REVIEW"
[18:39:14] <Xach> the system name and the packages it defines are not necessarily the same.
[18:39:19] <doulos05> aha, let me try that
[18:39:22] <luis> doulos05: you can also refer to it as :gtd-review if you're not into shouting
[18:39:48] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[18:40:02] <beach> True story: When consulting for a small company here, I recommended they use Boehm, because they had an application written in C++, and they were unable to get the defect count down.  They had memory leaks and dangling pointers.  The project leaders then told me that they thought the programmers had a moral obligation to clean up after themselves, by freeing the objects they allocated.
[18:40:05] *** Joins: igemnace (~ian@user/igemnace)
[18:40:23] *** Quits: igemnace (~ian@user/igemnace) (Client Quit)
[18:40:30] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[18:40:40] *** Joins: igemnace (~ian@user/igemnace)
[18:41:41] <jackdaniel> that's very noble of that company to embrace morals :)
[18:41:45] <beach> The company later canceled the product, after having spent a few million € on it.
[18:42:10] <jackdaniel> n.b libgc may be used as a leak detector
[18:42:37] <beach> jackdaniel: I didn't know what to say to that.  But the CTO agreed with me.  They never did follow my advice though.
[18:43:27] <doulos05> Ok, that seems to have helped but I still can't seem to access my exported symbols.
[18:43:53] <jackdaniel> beach: so it seems that the project was cancelled because the developer team was demoralized ,)
[18:44:09] <beach> doulos05: What do you do to access them, and how does the failure manifest itself?
[18:44:30] <beach> jackdaniel: Heh.
[18:44:42] *** Quits: igemnace (~ian@user/igemnace) (Client Quit)
[18:45:00] *** Joins: igemnace (~ian@user/igemnace)
[18:45:03] <beach> It's a sad story, that unfortunately reflects the sorry state of the software industry.  But don't get me started.
[18:46:11] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:46:11] <doulos05> In my Sly buffer, I ran (ql:quickload "gtd-review"). Then (GTD-REVIEW:merge-lists test1 test2).
[18:47:03] <doulos05> I get the error "undefined function" despite it being in the list produced by running the "list all external symbols" recipe in the cookbook
[18:47:44] <beach> doulos05: Then you managed to access the symbol in the package, but the function does not exist.  That's different. 
[18:48:09] <beach> doulos05: The symbol might exist and be exported, but there may not be a function by that name.
[18:48:41] <doulos05> Let me check for typos, but I'm pretty sure it's correct.
[18:48:44] <beach> doulos05: You may then want to check that your ASDF system actually loads a file that contains the definition of the function.
[18:49:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[18:49:42] <beach> Also, you don't have to use upper-case for the package prefix.  The reader will automatically up-case it for you (if you are using default settings).
[18:50:04] <doulos05> I told it to. I moved that function and another one (which generates the same error message) out into a utils.lisp file which is in the components list.
[18:50:26] <jackdaniel> doulos05: in the file that defines that function
[18:50:31] <beach> But is that file loaded in the right package?
[18:50:33] <jackdaniel> did you put (in-package gtd-review) at the top?
[18:50:54] <jackdaniel> or to be a purist -- (in-package #:gtd-review) 
[18:51:01] <doulos05> Ah... yeah, that'll be it then jackdaniel, thank you!
[18:51:21] <jackdaniel> great, happy hacking and good luck :)
[18:51:42] <beach> doulos05: Normally, every file should start with an IN-PACKAGE form.
[18:51:43] <jackdaniel> (n.b beach question was about the same thing)
[18:52:09] <beach> Yes, but jackdaniel expressed it more directly. :)
[18:59:16] <Xach> Guest635: that is not a concept in common lisp. there are some restrictions on what you can do with the symbols in the CL package, though.
[18:59:33] <Xach> http://l1sp.org/cl/11.1.2.1.2 has some detail
[18:59:34] *** Quits: doulos05 (~user@119.195.98.240) (Ping timeout: 268 seconds)
[19:00:34] <beach> Xach: I don't see any message from Guest635.
[19:00:44] <MichaelRaskin> For me they show up in _#commonlisp
[19:00:52] <MichaelRaskin> I am not completely sure _how_
[19:00:53] <jmercouris> I don't see hem either
[19:00:59] <jmercouris> s/hem/them
[19:01:25] <Xach> beach: Hmm. I do, but it looks strange to me. 
[19:01:44] <beach> Must be one of those defective bridges. 
[19:02:36] <Xach> seems plausible
[19:02:40] <MichaelRaskin> Xach: did you see my message?
[19:02:47] <MichaelRaskin> Whois suggests KiwiIRC, though
[19:03:02] <MichaelRaskin> (my message I tried to send via _#commonlisp)
[19:03:16] <Xach> MichaelRaskin: i see messages from you, but they look normal.
[19:03:19] <phoe> or you are operators
[19:03:21] <phoe> and we are not
[19:03:28] *** ChanServ sets mode: +o phoe
[19:03:29] <Xach> oh, that may explain it.
[19:03:34] <phoe> Guest635: say something now?
[19:03:45] <Xach> I haven't seen that feature in action before.
[19:04:04] <phoe> 16:33 < Guest635:@#commonlisp> Life is Good
[19:04:09] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:04:17] <phoe> I see your message now
[19:04:28] <luis> My IRC client says Guest635's are only visible to channel operators.
[19:04:35] <phoe> OK, that might explain it
[19:04:44] <beach> How bizarre. 
[19:04:46] <phoe> I have no ability to check the channel modes at the moment - could someone take a look?
[19:04:58] <mfiano> +ntz
[19:05:35] <phoe> hm
[19:05:40] *** Quits: francogrex (~user@2a02:a03f:6096:2f00:8150:8d6e:b4d8:39ec) (Read error: Connection reset by peer)
[19:05:44] <phoe> maybe #help will be of some support
[19:05:53] <phoe> I need to run off now so I can't be of help myself
[19:05:58] *** Quits: Guest635 (~Guest63@5.30.23.247) (Quit: Connection closed)
[19:07:17] <beach> It is really disconcerting that people can think that their messages are seen by everyone, but then they aren't.  It can make these people think that we are ignoring them.
[19:07:30] <phoe> yes, that's a problem
[19:07:35] *** ChanServ sets mode: -o phoe
[19:07:38] * phoe afk
[19:09:17] <aeth> it has to be the z
[19:09:32] <aeth> +nt are standard reverywhere, the defaults when you open a new channel
[19:09:33] *** Joins: Guest63 (~user@5.30.23.247)
[19:10:00] <jackdaniel> it is
[19:10:04] <jackdaniel> I've just checked the manual
[19:10:13] *** ChanServ sets mode: +o jackdaniel
[19:10:17] *** jackdaniel sets mode: -z 
[19:10:24] <jackdaniel> Guest63: try now
[19:11:08] *** Parts: Guest63 (~user@5.30.23.247) ()
[19:12:18] *** Joins: aeth_ (~Michael@user/aeth)
[19:12:40] <jmercouris> I still don't see anything
[19:12:45] <jmercouris> in the event that there has been any typing
[19:12:46] <luis> +z means "reduced moderation: The effects of +b, +q, and +m are relaxed. For each message, if that message would normally be blocked by one of these modes, it is instead sent to channel operators (+o)."
[19:12:46] <jackdaniel> because they said nothing
[19:12:52] <jmercouris> just verifying
[19:12:53] <jackdaniel> https://libera.chat/guides/channelmodes
[19:13:31] *** Quits: findow (688118f3@ircip1.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[19:13:31] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[19:13:36] *** aeth_ is now known as aeth
[19:13:40] <luis> I think I recognize that IP from our first channel ban, so they may be under some sort of ban.
[19:13:54] <luis> Without +z not even OPs see his messages.
[19:14:01] <jackdaniel> ah! interesting
[19:14:19] <aeth> is there a too-broad +b or +q?
[19:14:29] <luis> The banlist for this channel is empty.
[19:14:45] <jackdaniel> a bug perhaps? oh well
[19:14:47] <mfiano> What about the quiet list?
[19:15:47] <mfiano> If they were +b they wouldn't be able to join. +q and they can join but not speak. +qz and they can speak but only ops see it
[19:16:12] <luis> mfiano: how do I see the quiet list?
[19:19:16] <jackdaniel> is there a quiet list?
[19:19:31] <jackdaniel> I thought it works the other way around: when you set +q mode, then only voiced members can talk
[19:19:43] <luis> That was my impression too.
[19:21:32] <luis> So +z seems to work like shadow banning. That sounds useful for dealing with trolls.
[19:21:39] *** luis sets mode: +z 
[19:21:56] <mfiano> When +z is set, the effects of +m, +b and +q are relaxed. For each message, if that message would normally be blocked by one of these modes, it is instead sent to all channel operators. This is intended for use in moderated debates.
[19:22:16] <jackdaniel> /deop luis /mode +z /takeover #commonlisp
[19:22:17] <jackdaniel> :)
[19:22:22] *** jackdaniel sets mode: -o jackdaniel
[19:22:41] *** Joins: selwyn (~selwyn@user/selwyn)
[19:23:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:24:01] <Xach> fe[nl]ix: i am getting "Unknown CFFI type SIZE-T" from static-vectors. 
[19:24:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:24:33] <luis> #libera tells me "/mode #commonlisp q" is the way to check the quiet list
[19:25:04] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:26:25] <mfiano> $~a quieted by zirconium.libera.chat on Tue, 08 Jun 2021 21:40:46
[19:26:33] <mfiano> That's an extban
[19:28:10] <luis> Apparently this means anyone not registered with nickserv is on the quiet list. #libera recommends only doing that if there's spam going on.
[19:29:16] <luis> $ = special, ~ = not, a = account
[19:29:44] <mfiano> Yes, well $ = type
[19:30:14] *** luis sets mode: -q $~a
[19:34:42] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[19:34:57] *** pl sets mode: +Cc 
[19:35:52] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 252 seconds)
[19:36:57] <pl> we're back to modes we had on freenode
[19:38:07] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:38:37] <pl> also, we used to have some quiet extbans due to spam on freenode, and possibly someone copied them?
[19:38:38] <fe[nl]ix> Xach: fixed it, I made a new release
[19:39:10] *** Joins: selwyn (~selwyn@user/selwyn)
[19:40:26] *** Joins: Posterdati (~posterdat@host-79-12-208-242.retail.telecomitalia.it)
[19:40:46] <Posterdati> ok
[19:40:48] <Posterdati> hi
[19:42:05] <beach> Hello Posterdati.
[19:48:16] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[19:50:03] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:50:04] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 244 seconds)
[19:51:10] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:01:14] *** Joins: derelict (~derelict@user/derelict)
[20:02:08] <pjb> Posterdati: so, what's broken in gsll?
[20:08:06] <selwyn> pjb: the nonlinear least squares fitting iirc
[20:11:56] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:13:34] *** Quits: Cymew (~ante@c-b985225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 268 seconds)
[20:19:53] *** Joins: selwyn (~selwyn@user/selwyn)
[20:26:52] <Posterdati> pjb: the groveller
[20:27:13] <Posterdati> pjb: openbsd has supplemental directory for includes
[20:43:21] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[20:43:50] *** Joins: derelict (~derelict@user/derelict)
[20:46:05] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[20:47:08] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:49:31] <Posterdati> fixed! But it's becoming tiresome
[20:51:11] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 272 seconds)
[20:56:29] <Posterdati> https://www.youtube.com/watch?v=Nl_Eo2QzqU4
[20:59:40] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[21:12:56] *** Joins: aeth_ (~Michael@user/aeth)
[21:13:21] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 272 seconds)
[21:13:23] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:13:33] *** aeth_ is now known as aeth
[21:13:50] *** Joins: makomo (~makomo@user/makomo)
[21:14:27] *** Joins: amb007 (~a_bakic@39.149.22.93.rev.sfr.net)
[21:15:21] <Posterdati> pjb: problem where in cffi and gsll sources
[21:19:01] <jcowan> the thing to learn about CTOs is that they have no power
[21:19:48] <jcowan> this is especially important if you are applying for (or being asked about) the role, but important for grunts too.  You may get sykmpathy, but not change
[21:20:36] <jcowan> also, destructors are not (and should not be) invoked by the GC, so if they are (Ghu forbid) pervasive, there is indeed nothing to do to clean up.
[21:29:25] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[21:29:59] *** Quits: amb007 (~a_bakic@39.149.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:30:08] *** Joins: amb007 (~a_bakic@193.145.204.77.rev.sfr.net)
[21:31:48] *** Joins: ramenbytes (~vir@071-009-124-057.res.spectrum.com)
[21:33:33] <tfb> jcowan: it's perfectly reasonable for *some* hook to be called at the point something becomes garbage.  I'd much rather that happen than (say) file descriptor exhaustion
[21:34:52] <jcowan> Sure.  But you want to use a finalizer, not a C++ destructor, which may end up being called too early
[21:35:06] *** Quits: clintm (~user@2603:3023:a74:d000:d217:c2ff:feac:651b) (Remote host closed the connection)
[21:37:42] <tfb> jcowan: Oh, OK, I don't know the difference.  Yes, finalizers is what I meant.  Is a destructor the 'this is now out of dynamic scope' thing?
[21:38:27] <tfb> whatever, if it's something C++ does I'll just assume it's wrong (and also made out of jelly and crayon)
[21:39:03] <jcowan> There are various cases: https://en.cppreference.com/w/cpp/language/destructor#Explanation
[21:41:54] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 240 seconds)
[21:44:28] *** Joins: dsk (~dsk@user/dsk)
[21:48:23] *** Joins: akoana (~ah@user/akoana)
[21:52:30] * tfb remembers when CL spec was complicated
[21:54:45] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:613a:f2b5:91db:f12e) (Remote host closed the connection)
[21:55:19] *** X-Scale` is now known as X-Scale
[21:58:30] *** Quits: amb007 (~a_bakic@193.145.204.77.rev.sfr.net) (Ping timeout: 264 seconds)
[21:58:41] *** Joins: amb007 (~a_bakic@129.147.204.77.rev.sfr.net)
[22:11:08] <jcowan> Some corners are still no simple matter
[22:23:06] *** Quits: amb007 (~a_bakic@129.147.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:23:27] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:25:45] <loke[m]> tfb: thank you for reminding me why I hate C++
[22:25:47] *** Joins: Guest63 (~Guest63@45.130.83.181)
[22:26:05] <loke[m]> I mean that page reads like the description of a bad joke language
[22:26:53] <shka> oh, destructors are perhaps among the least fucked up part of c++
[22:27:46] <Guest63> Hi
[22:27:59] <loke[m]> I just got to the section about pure virtual destructors... Like... wtf!?
[22:29:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:30:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:31:17] <shka> ummm yeah, all destructors should have been virtual from the start but it is what it is :-)
[22:36:28] *** Joins: derelict (~derelict@user/derelict)
[22:37:14] <loke[m]> shka: True. But check the rule on pure virtual destructors.
[22:37:36] <loke[m]> Never mind why on earth why one may want them... But you also need to implement them even though they're pure virtual.
[22:41:12] <Guest63> Does anybody know how to fix this macro?
[22:41:14] <Guest63> (defmacro prints (&body body)
[22:41:14] <Guest63>   `(loop for item in ,body
[22:41:15] <Guest63>        do (print item)))
[22:41:44] <phoe> Guest63: first of all, this likely doesn't need to be a macro
[22:41:53] <phoe> don't use macros wherever you don't need to use macros
[22:41:55] <loke[m]> Guest63: what are you trying to do?
[22:42:12] <Guest63> phoe: thanks, just want to learn how to do macros atm
[22:42:19] <phoe> Guest63: try reading On Lisp
[22:42:24] <Guest63> loke[m]: do a macro with a loop across the input variables
[22:42:33] <phoe> once you know the basics of CL, then On Lisp is a good crash course to Lisp macros
[22:42:49] *** Joins: selwyn (~selwyn@user/selwyn)
[22:42:52] <Guest63> phoe: yeah I am on chapter 7, I understand ,@ splices items, but not sure how to loop with a list of inputs?
[22:42:57] <loke[m]> Guest63: I mean, what is the goal you wish to achieve?
[22:43:26] <Guest63> loke[m]: I want to loop across body in a macro
[22:44:10] <phoe> Guest63: a &body usually is code to be executed, not data to be processed; for that, you usually want &rest
[22:44:18] <phoe> it's technically equivalent but conveys a different meaning to programmers
[22:44:42] <Guest63> phoe: thanks for the tip
[22:44:45] <phoe> (defmacro prints (&rest things) `(loop for thing in ',things do (print thing)) would be a good start
[22:44:54] <phoe> and then use WITH-GENSYMS for THING to avoid variable capture
[22:44:59] <phoe> IIRC it's On Lisp chapter 8.4
[22:45:19] <phoe> also note that this version of such a macro will not evaluate anything
[22:45:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:45:32] <phoe> so (prints (+ 2 2)) will print the literal list (+ 2 2) and not 4
[22:45:49] <Guest63> I think I have the same code
[22:45:54] <Guest63> but it gives me an error
[22:46:21] <Guest63> let me read 8.4 - thanks for that
[22:46:58] *** Quits: ramenbytes (~vir@071-009-124-057.res.spectrum.com) (Remote host closed the connection)
[22:47:05] <phoe> Guest63: https://plaster.tymoon.eu/view/2496#2496
[22:47:07] <phoe> works for me
[22:47:42] <Guest63> phoe: thanks - just realised I was missing a ' before ,rest
[22:47:50] <phoe> yes, that will be important
[22:47:55] <Guest63> what does that do?
[22:47:58] <phoe> quoting?
[22:47:59] <Guest63> seems like it cancel each other?
[22:48:04] <phoe> oh boy
[22:48:16] <phoe> you *really* need to pick up on CL basics before you go and do macros
[22:48:23] <Guest63> ok :)
[22:48:30] <phoe> like, this is the least painful way
[22:48:50] <Guest63> thanks :)
[22:48:53] <phoe> first understand what quoting does, then understand what backquoting and unquoting do
[22:49:00] <phoe> and then you can use this knowledge to write macros
[22:49:54] <Guest63> I guess ,rest puts the parameters into the macro and then the ' prevents it from being evaluated
[22:50:41] <Guest63> makes sense once I look at the macroexpand-1
[22:50:47] <Guest63> thanks for the solution :)
[22:51:08] <Guest63> Now I will try to figure out how to evaluate (print (+ 2 2)) as you said (on my own)
[22:51:35] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[22:51:53] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[22:52:40] <jackdaniel> `',foo
[22:52:56] <jackdaniel> cl may look like perl too!
[22:53:46] <Guest63> jackdaniel: 'format definitely has a lot of crazy configurations
[23:00:15] <shka> ok, so i will sound like a broken record
[23:00:27] <shka> but macros are overrated
[23:00:42] <shka> people say that it is the killer feature of cl
[23:00:47] <shka> or lisp in general
[23:01:04] *** Joins: ramenbytes (~vir@071-009-124-057.res.spectrum.com)
[23:01:33] <shka> i would call it "force multiplier"
[23:01:49] <shka> it makes every other feature in the language better
[23:02:02] <shka> but on it's own, macros are nothing
[23:04:11] <Guest63> Macros are good for DSL
[23:04:17] <tfb> loke[m]: it doesn't read like the description of a bad joke language: it *is* the description of a bad joke language
[23:04:54] <loke[m]> tfb: yeah, fair enough. It's the only explanation that makes sense.
[23:06:27] *** Quits: tfb (~tfb@88.98.95.237) ()
[23:14:04] <shka> Guest63: yes, but actually you should not start designing DSL starting with macros
[23:14:25] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[23:14:59] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 244 seconds)
[23:16:53] *** Joins: aeth (~Michael@user/aeth)
[23:17:00] <shka> macros allow you to simply implement your design while otherwise you could get stcuk
[23:17:04] <shka> *stuck
[23:17:37] <shka> or be forced into compromises
[23:17:54] <shka> but you would be surprised how far you can get without a single defmacro
[23:18:14] <shka> even in DSL
[23:21:10] <Guest63> shka: do you mean by compiling inline
[23:21:28] <Guest63> otherwise I would assume the performance benefits of Defmacro can't be ignored in DSLs?
[23:22:10] <Bike> defmacro isn't generally used for performance reasons
[23:22:46] <shka> Guest63: think about the DSL as a style of API design
[23:23:13] <shka> where you are trying to build some sort of the grammar
[23:24:28] <shka> implementation can be more or less efficient
[23:25:26] <Guest63> sorry - I got confused, I was thinking of reader macros (I think that's it)
[23:25:37] <AnimalClatter> Is there a more obvious way to get the last char of a string than (char mystring (1- (length mystring)))?
[23:25:39] <Guest63> those are very helpful to create DSLs that deviate from the lisp () approach
[23:25:43] <phoe> reader macros aren't used for performance either
[23:25:55] <Bike> AnimalClatter: nope
[23:25:56] <Guest63> not for performance, but for creating DSLs
[23:26:04] <AnimalClatter> @Bike thanks
[23:26:07] <Bike> AnimalClatter: i think alexandria has a lastelt function or suchlike to do that for you
[23:26:12] <Bike> but it's implemented something like that
[23:26:29] <phoe> yes, (alexandria:last-elt "abc") works
[23:26:29] <shka> yes, lastelt in alexandria
[23:27:12] <shka> Guest63: DSLs are not about the syntax, i think that this point elude you
[23:29:35] <AnimalClatter> Thanks all
[23:34:20] <shka> DSL are about structuring interactions
[23:36:55] <dieggsy> is there an easy to way to jump to the sources where the error occured using slime?
[23:37:33] <shka> yes
[23:37:47] <shka> first, you need to navigate to a stack frame
[23:37:57] <shka> then use v key (IIRC)
[23:38:07] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[23:45:48] *** Joins: chrysanthematic (~chrysanth@109.70.150.245)
[23:47:06] *** Quits: ramenbytes (~vir@071-009-124-057.res.spectrum.com) (Remote host closed the connection)
[23:51:32] *** Quits: Guest63 (~Guest63@45.130.83.181) (Quit: Ping timeout (120 seconds))
[23:53:30] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[23:59:19] *** Joins: aeth_ (~Michael@user/aeth)
[23:59:46] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:59:51] *** aeth_ is now known as aeth
