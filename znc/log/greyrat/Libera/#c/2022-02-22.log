[00:00:12] <nitrix> Composition is preferable over inheritance and composition works trivially in all structured languages.
[00:02:02] *** Quits: j-james (~apropos@206.12.14.46) (Quit: leaving)
[00:02:17] *** Joins: j-james (~apropos@206.12.14.46)
[00:02:30] <sham1> Yeah, a composition relation can also model inheritence
[00:02:52] <nitrix> sham1, I think it's a rite of passage from OOP languages to C. The person spends a ridiculous amount of time trying to emulate what they're familiar with, banging their heads against C refusing to comply, learning C in the process, then realizing all of it wasn't even needed.
[00:03:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:03:59] <nitrix> You go from the oop, dangerous downcasts, to the union, to the macros, to eventually boring procedures, organized neatly.
[00:05:11] <sham1> I tend to do OOP but no composition nor inheritence. And what I mean by that is that I do like to specify behaviour of a struct and tie it to the data. And of course one could maybe do arguments about how "OOP" that truly is but I tend to view it as such
[00:05:27] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:05:40] <sham1> Although I don't use vtables or other such nonsense unless the API I'm using explicitly does those
[00:06:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[00:06:42] *** Joins: gry (~quassel@botters/gry)
[00:07:40] <nitrix> Yeah. It's almost always thelibraryprefix_theobject_theoperation(struct thelibraryprefix_theobject *theobject, ...)
[00:08:39] <nitrix> The prefix can go away when it's an executable.
[00:09:18] <sham1> I use prefixes even for executables because some libraries are naughty
[00:09:56] *** Quits: DSee (~DSee@66.115.182.107) (Quit: Quit)
[00:10:29] <nitrix> I think I've even silenced unused variables sometimes, just because I wanted to organize the functionality but didn't _really_ need the struct to do the operation.
[00:10:47] *** Joins: Dsee4 (~DSee@66.115.182.107)
[00:11:24] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 240 seconds)
[00:11:26] *** Quits: Dsee4 (~DSee@66.115.182.107) (Client Quit)
[00:11:37] <nitrix> Time-related stuff based on the initialization of a windowing system. It doesn't _need_ anything from the window to work, but it does need the window to be initialized, so I attached it to it.
[00:12:07] <nitrix> (It gave the time elapsed since the window launched if I remember).
[00:12:30] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[00:12:57] <nitrix> Ah yep, this thing. https://www.glfw.org/docs/3.0/group__time.html
[00:13:57] *** Joins: DSee (~DSee@66.115.182.107)
[00:14:38] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:14:47] <nitrix> Ended up `double window_time(struct window *window);` to force you to have a `struct window *` initialized with `window_init`, therefore GLFW is also guaranteed to be initialized.
[00:15:49] *** Parts: pony (sid524992@smol/hors) ()
[00:16:30] <nitrix> sham1, I find it hilarious that when you look at languages like Rust, that boast safety, these calls are often just wrapped in an unsafe {} block and they think that they're done...
[00:16:34] *** Beastie is now known as beastie
[00:16:48] <sham1> No but you see, it's a safe wrapper so it's okay
[00:16:50] <nitrix> sham1, It's like, no, there's an implicit global state that you haven't modeled.
[00:18:01] <nitrix> Like, wtf is this https://github.com/PistonDevelopers/glfw-rs/blob/master/src/lib.rs#L1231-L1233
[00:19:06] <nitrix> Oh wait, this one is properly on &self, but I've seen broken ones.
[00:19:17] *** Joins: hiroshi_ (~freedom@ge-19-99-251.service.infuturo.it)
[00:20:11] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[00:23:33] *** Joins: seninha (~chatzilla@user/seninha)
[00:23:54] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875) (Ping timeout: 260 seconds)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:34:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:35:03] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:35:57] *** Joins: cart_ (~cart@2a00:23c7:9990:d701:5fbf:5b29:9683:dd1)
[00:36:20] *** Joins: crashrep (~crashrep@user/crashrep)
[00:40:41] *** Quits: Tang3nt-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[00:40:56] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:41:32] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:42:41] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:42:47] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:43:42] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:44:07] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:45:02] *** Joins: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[00:45:17] *** Quits: j-james (~apropos@206.12.14.46) (Ping timeout: 240 seconds)
[00:45:35] *** Quits: Tangent-Man (~Tangent-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[00:45:55] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[00:46:24] *** Joins: Tangent-Man (~Tangent-M@217.146.92.224)
[00:47:31] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[00:48:10] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[00:48:19] *** Joins: meator (~meator@user/meator)
[00:52:57] *** Joins: circd (~circd@142.167.143.188)
[00:54:50] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:55:29] *** Quits: circd (~circd@142.167.143.188) (Client Quit)
[00:55:53] *** Joins: rgrinberg (~textual@187.223.139.175)
[00:56:53] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:57:11] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[00:57:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[00:58:57] <meator> Hello. Do I have to use the volatile qualifier on global variables used in signal handlers when the handler doesn't modify the variable?
[00:59:07] *** Joins: crashrep (~crashrep@user/crashrep)
[00:59:31] <sham1> No
[00:59:44] <sham1> Only if you modify the variable inside a signal/interrupt handler
[01:00:27] <meator> Ok, thanks!
[01:00:56] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[01:01:06] <cherrry9> is this code valid or is that ub? https://0x0.st/oKPE.c
[01:02:16] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:03:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:06:21] *** Joins: crashrep (~crashrep@user/crashrep)
[01:07:45] *** Quits: heineken (~i.am@user/heineken) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[01:10:06] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[01:10:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:11:26] *** Quits: Rynn (rynn@gateway/vpn/protonvpn/rynn) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:11:40] *** Joins: Livio (~livio@user/livio)
[01:12:53] *** Joins: Akiva (~Akiva@user/Akiva)
[01:17:28] *** Joins: crashrep (~crashrep@user/crashrep)
[01:17:57] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[01:18:09] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:21:33] *** Quits: kfv (~kfv@mail.kfv.io) (Read error: Connection reset by peer)
[01:24:17] *** Joins: kfv (~kfv@mail.kfv.io)
[01:24:23] *** Joins: Rynn (~rynn@216.30.158.198)
[01:26:17] <fizzie> Undefined, I imagine, since the "common initial sequence" rule that would explicitly make it okay to access the common initial members of two structs via the "wrong" type is specific to only union objects that contain both struct types.
[01:27:38] <fizzie> Now if you made it https://0x0.st/oKP5.txt instead, that should be fine (at least assuming `int` has no trap representations, or at least that those assignments don't make one).
[01:28:06] *** Quits: Rynn (~rynn@216.30.158.198) (Client Quit)
[01:28:19] *** Quits: alch (~alch@mi-18-42-17.service.infuturo.it) (Quit: leaving)
[01:30:37] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-90.cspire.com)
[01:30:40] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[01:31:07] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[01:31:08] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[01:33:47] *** Joins: beejjorgensen (~Thunderbi@h67-204-180-53.bendor.broadband.dynamic.tds.net)
[01:34:08] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Read error: Connection reset by peer)
[01:34:22] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[01:34:25] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[01:34:29] *** Joins: moose` (~moose@user/moose)
[01:34:37] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[01:34:51] *** Joins: Rynn (~rynn@216.30.158.198)
[01:35:27] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[01:37:55] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[01:37:59] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[01:38:12] *** Quits: _nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 272 seconds)
[01:45:08] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:46:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:48:27] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[01:51:48] *** Quits: DSee (~DSee@66.115.182.107) (Ping timeout: 240 seconds)
[01:52:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:55:29] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:56:33] *** Joins: kilolympus (~kilolympu@vpn-fn-229.net.ed.ac.uk)
[01:56:44] <cherrry9> thanks fizzie
[01:59:28] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: quitter)
[02:03:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:05:02] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Quit: Leaving)
[02:06:50] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[02:10:31] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:10:57] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:11:08] *** Joins: j-james (~apropos@206.12.14.130)
[02:11:08] *** Quits: j-james (~apropos@206.12.14.130) (Client Quit)
[02:14:52] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[02:15:13] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:99e3:ff1:8449:7892)
[02:17:15] *** Joins: Rynn (~rynn@216.30.158.198)
[02:21:14] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[02:24:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:25:41] *** Joins: zuplex (~zuplex@202.51.76.195)
[02:26:05] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:26:22] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:27:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[02:28:13] <Dean> hey i am trying to read from a file but i keep getting segmentation fault. https://paste.debian.net/1231809/ i try to read 512 bytes at a time and have specified to fread to give me 512 chunks 1 at a time. I'm baffled as to why this gives segmentation fault. my array is declared to be of 512 elements.
[02:30:35] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:30:54] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:30:56] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[02:32:07] <Dean> ah nevermind i had a variable i wasn't using that was causing the issue. -.-
[02:33:22] *** Joins: moog (~moog@107.77.244.141)
[02:33:41] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[02:33:50] *** Quits: pizdets (~pizdets@183.182.115.230) (Ping timeout: 250 seconds)
[02:33:58] *** Joins: pizdets_ (~pizdets@183.182.111.141)
[02:34:19] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[02:36:06] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:37:24] *** flooded is now known as _flood
[02:39:30] *** Joins: ferdna (~ferdna@user/ferdna)
[02:41:02] *** Quits: Akuli (~Akuli@82-203-165-139.bb.dnainternet.fi) (Quit: Akuli)
[02:45:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[02:47:37] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:99e3:ff1:8449:7892) (Quit: Leaving)
[02:47:47] *** Quits: hiroshi_ (~freedom@ge-19-99-251.service.infuturo.it) (Quit: hiroshi_)
[02:48:10] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:48:31] *** Joins: Torr (~Torr@user/torr)
[02:49:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[02:50:49] *** Joins: pert (~pert@fsf/member/pert)
[02:52:28] <Dean> i have a loop to read from a file but the loop condition is always false. why is it false? https://paste.debian.net/1231810/
[02:53:24] *** Joins: Rynn (~rynn@216.30.158.198)
[02:53:42] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:54:01] <fizzie> fread returns the number of elements read, not the number of bytes.
[02:54:15] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[02:54:46] <fizzie> And the prototype is `size_t fread(void *restrict ptr, size_t size, size_t nmemb, FILE *restrict stream);`, so in a call like `fread(buffer, BLOCK, 1, input)`, the number of elements is 1. So it's never going to return more than 1.
[02:55:00] *** Quits: Livio (~livio@user/livio) (Ping timeout: 256 seconds)
[02:56:08] <fizzie> (You'll also run into trouble with `char *filename = ""; ...; sprintf(filename, ...);` later on.)
[02:56:34] *** Quits: cart_ (~cart@2a00:23c7:9990:d701:5fbf:5b29:9683:dd1) (Quit: Konversation terminated!)
[02:56:36] *** Quits: asszi (~AdminUser@2a02:ab88:2a00:6d00::ae7) (Ping timeout: 245 seconds)
[02:57:50] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[02:58:05] <Dean> thank you fizzie . if i understand correctly it should be while (fread(buffer, BLOCK, 1, input) == 1) ?
[02:58:36] *** Quits: h4zel (~hazel@user/h4zel) (Ping timeout: 240 seconds)
[02:59:05] <fizzie> That's reasonable. Or fread(buffer, 1, BLOCK, input) == BLOCK. The difference between reading N 1-byte items and one N-byte item isn't huge.
[02:59:27] *** Quits: rgrinberg (~textual@187.223.139.175) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:00:05] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:00:15] <fizzie> (Other than what the return value is. And technically the value of a partially read element is indeterminate, but you seem to care only about complete reads anyway.)
[03:00:39] <Dean> Ok thank you fizzie
[03:03:08] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:03:32] *** Quits: Terlisimo (~Terlisimo@ns3077160.ip-147-135-129.eu) (Quit: Connection reset by beer)
[03:03:53] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Ping timeout: 250 seconds)
[03:04:15] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[03:04:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:06:34] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:06:52] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[03:15:40] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[03:16:48] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[03:24:25] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8)
[03:27:28] *** test_ is now known as _flood
[03:28:48] *** Quits: beejjorgensen (~Thunderbi@h67-204-180-53.bendor.broadband.dynamic.tds.net) (Quit: beejjorgensen)
[03:29:01] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:30:36] *** Joins: masoudd (~masoudd@user/masoudd)
[03:30:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[03:30:56] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 272 seconds)
[03:32:37] <Dean> fizzie: i'd like to keep reading 512 bits at a time. so i put fread to compare to 1. i get segmentation fault when I try to write to the files on line 58. the initial write of the header seems OK. but then when i try to write the body of the file it gives segmentation fault.
[03:32:51] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[03:33:03] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:33:49] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[03:35:20] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[03:35:28] <fizzie> Are you sure it's not just that you're trying to call `fwrite(buffer, BLOCK, 1, output);` while output is still a null pointer?
[03:35:44] <Dean> fizzie: i managed to fix it, i did not check for null when opening the file
[03:35:55] <Dean> yeah it was exactly that.
[03:36:35] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:37:02] *** Joins: mrig (~mrig@user/mrig)
[03:37:19] <Dean> thank you very much fizzie for the help
[03:37:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:38:17] *** Quits: mahmutov (~mahmutov@37.155.93.183) (Ping timeout: 240 seconds)
[03:39:08] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:42:11] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-90.cspire.com) (Quit: Leaving)
[03:42:36] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Quit: Lost terminal)
[03:46:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:48:20] *** Joins: Wulf (~Wulf@user/wulf)
[03:48:47] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[03:49:12] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d5a0:edd8:6280:59e9)
[03:49:12] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d5a0:edd8:6280:59e9) (Changing host)
[03:49:12] *** Joins: skapata (~Skapata@user/skapata)
[03:49:44] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8)
[03:51:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:51:20] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 252 seconds)
[03:52:02] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[04:00:44] *** Quits: kurahaupo (~kurahaupo@pa49-197-28-217.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[04:02:26] *** Quits: Tangent-Man (~Tangent-M@217.146.92.224) (Remote host closed the connection)
[04:04:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:04:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:04:20] *** Joins: wroathe (~wroathe@user/wroathe)
[04:11:41] *** Joins: seninha (~chatzilla@user/seninha)
[04:14:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:20:53] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[04:22:41] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[04:23:03] *** Joins: pert (~pert@fsf/member/pert)
[04:23:03] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[04:25:16] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:25:44] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[04:28:47] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[04:35:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8c05:d57e:b0ce:2212)
[04:36:06] *** Quits: Bitflux (~byte@byteflux.net) (Quit: ZNC - https://znc.in)
[04:36:14] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Quit: fBNC - https://bnc4free.com)
[04:36:18] *** Joins: Byteflux (~byte@byteflux.net)
[04:36:46] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[04:41:19] *** Quits: AmR (~AmREiSa@156.199.67.136) (Quit: Konversation terminated!)
[04:42:59] *** Joins: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a)
[04:43:53] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[04:44:21] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:46:29] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:47:35] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 272 seconds)
[04:48:51] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:53:43] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:53:46] *** Joins: korg815 (~korg815@user/korg815)
[05:04:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[05:05:37] *** Joins: frost (~frost@user/frost)
[05:06:03] *** Joins: xel_ (~xel@user/xel/x-9645307)
[05:18:02] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 250 seconds)
[05:20:55] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 256 seconds)
[05:24:35] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[05:25:31] *** Joins: freakazoid343 (~matt@35.136.233.205)
[05:26:25] *** Quits: xel_ (~xel@user/xel/x-9645307) (Quit: Leaving)
[05:26:42] *** Joins: xel_ (~xel@user/xel/x-9645307)
[05:28:03] *** Quits: freakazoid333 (~matt@2603-9000-cf03-86c3-1969-b2f2-78aa-e2f9.inf6.spectrum.com) (Ping timeout: 256 seconds)
[05:29:57] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[05:31:19] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[05:34:13] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:34:25] *** Joins: vysn (~vysn@user/vysn)
[05:43:51] *** xel_ is now known as xel
[05:44:36] *** Joins: sh0ne (~sh0ne@178.237.217.108)
[05:46:14] *** Quits: xel (~xel@user/xel/x-9645307) (Changing host)
[05:46:14] *** Joins: xel (~xel@user/xel)
[05:50:17] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[05:55:20] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 272 seconds)
[05:59:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:59:39] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:03:12] *** Joins: pnbeast (~pnbeast@2601:140:4280:3800::1)
[06:03:38] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 260 seconds)
[06:03:58] *** Quits: sh0ne (~sh0ne@178.237.217.108) (Quit: Leaving)
[06:06:12] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[06:06:49] *** Joins: justAstache (~justache@user/justache)
[06:07:43] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:07:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:07:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:07:57] *** Joins: wroathe (~wroathe@user/wroathe)
[06:13:54] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[06:14:19] *** Joins: joev (~joev@user/joev)
[06:17:54] *** Joins: Rynn (~rynn@216.30.158.198)
[06:24:20] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:27:31] *** Joins: freakazoid12345 (~matt@2603:9000:cf03:86c3:71ff:88fc:711e:30d9)
[06:30:03] *** Quits: freakazoid343 (~matt@35.136.233.205) (Ping timeout: 256 seconds)
[06:31:20] *** Quits: freakazoid12345 (~matt@2603:9000:cf03:86c3:71ff:88fc:711e:30d9) (Client Quit)
[06:32:23] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:32:28] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Changing host)
[06:32:28] *** Joins: tusko (~yeurt@user/tusko)
[06:33:44] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:37:28] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Quit: Leaving)
[06:40:11] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[06:42:50] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 272 seconds)
[06:45:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:50:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[06:51:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[06:53:22] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:37] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Ping timeout: 240 seconds)
[06:55:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:59:02] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[06:59:37] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:c5a6:da8d:b74b:6ce8) (Ping timeout: 240 seconds)
[07:00:02] *** Quits: zuplex (~zuplex@202.51.76.195) (Read error: Connection reset by peer)
[07:00:27] *** Quits: gry (~quassel@botters/gry) (Quit: пока)
[07:00:47] *** Joins: slidercrank (~slidercra@user/slidercrank)
[07:03:29] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:44f1:f0bc:ff4d:4e0)
[07:04:51] *** Joins: gry (~quassel@botters/gry)
[07:06:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:06:47] *** Joins: skapata (~Skapata@user/skapata)
[07:07:29] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:51] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:15:11] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:19:22] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[07:21:33] *** Joins: beejjorgensen1 (~Thunderbi@h67-204-180-53.bendor.broadband.dynamic.tds.net)
[07:23:02] *** Parts: beejjorgensen1 (~Thunderbi@h67-204-180-53.bendor.broadband.dynamic.tds.net) ()
[07:24:17] *** Telvana is now known as yuuup
[07:24:36] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[07:27:43] *** yuuup is now known as Telvana
[07:34:07] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[07:34:23] *** Quits: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a) (Quit: Leaving)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:55] *** Joins: CaCode- (~CaCode@user/cacode)
[07:39:00] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[07:41:24] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[07:41:43] *** Joins: zer0x (~zer0x@58.186.123.149)
[07:41:44] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[07:42:26] *** Joins: circd (~TODO@142.167.143.188)
[07:43:04] *** Joins: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net)
[07:43:15] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:45:33] *** Quits: circd (~TODO@142.167.143.188) (Remote host closed the connection)
[07:46:39] *** Quits: zer0x (~zer0x@58.186.123.149) (Remote host closed the connection)
[07:49:57] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[07:49:59] *** Joins: zer0x (~zer0x@58.186.123.149)
[07:50:10] *** Joins: cul8r (~cul8r@76.113.95.199)
[07:50:32] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[07:54:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:55:49] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:c5e:8bc0:7367:5b6e)
[07:56:12] *** Quits: nehsou^ (~nehsou@50.233.120.162) (Ping timeout: 240 seconds)
[07:56:43] *** Joins: SaltHilStroller_ (~SaltHillS@198-84-207-146.cpe.teksavvy.com)
[07:56:43] *** Joins: SaltHillStroller (~SaltHillS@198-84-207-146.cpe.teksavvy.com)
[07:57:32] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[07:58:15] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[07:58:16] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[07:58:16] *** Joins: nortoh (~nortoh@user/nortoh)
[08:01:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:01:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:01:18] *** Joins: wroathe (~wroathe@user/wroathe)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:02:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:03:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:03:50] *** Quits: SaltHilStroller_ (~SaltHillS@198-84-207-146.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[08:03:50] *** Quits: SaltHillStroller (~SaltHillS@198-84-207-146.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[08:04:17] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:06:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[08:09:20] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:13:37] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 240 seconds)
[08:23:48] *** Joins: xel_ (~xel@user/xel)
[08:25:47] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:26:12] *** Quits: xel (~xel@user/xel) (Ping timeout: 240 seconds)
[08:27:24] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[08:27:49] *** Joins: joev (~joev@user/joev)
[08:30:15] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:37:25] *** Joins: xel64 (~xel@user/xel)
[08:37:51] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[08:38:13] *** Quits: xel64 (~xel@user/xel) (Client Quit)
[08:38:30] *** Joins: xel (~xel@user/xel)
[08:40:26] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:40:57] *** Quits: xel_ (~xel@user/xel) (Ping timeout: 256 seconds)
[08:41:00] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[08:41:02] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[08:41:25] *** Joins: joev (~joev@user/joev)
[08:41:52] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:42:42] *** Joins: malloy (~jimery@116.30.220.175)
[08:46:37] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[08:46:58] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[08:46:58] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[08:47:03] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:47:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:47:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:47:38] *** Joins: wroathe (~wroathe@user/wroathe)
[08:49:55] *** Joins: kuber (~kuber@75-172-76-245.tukw.qwest.net)
[08:50:26] *** Joins: lichliu (~lichliu@219.142.145.152)
[08:51:21] *** Joins: crashrep (~crashrep@user/crashrep)
[08:51:54] *** Quits: miqztee (~username@user/miqztee) (Quit: Leaving)
[08:52:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[08:56:22] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[08:56:37] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[08:56:59] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:57:01] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[08:59:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:02:36] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:03:15] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[09:03:20] *** Quits: joev (~joev@user/joev) (Remote host closed the connection)
[09:03:38] *** Joins: teepee (~teepee@openscad/teepee)
[09:03:44] *** Joins: joev (~joev@user/joev)
[09:05:00] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[09:10:42] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[09:14:17] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[09:14:54] *** Joins: z4kpi (~z4kpi@user/zacts)
[09:24:31] *** Joins: sebbu (~sebbu@user/sebbu)
[09:25:23] *** Quits: kuber (~kuber@75-172-76-245.tukw.qwest.net) (Quit: leaving)
[09:28:19] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[09:29:12] *** Joins: crashrep (~crashrep@user/crashrep)
[09:32:49] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[09:33:28] *** Joins: Hercules (~Hercules@user/hercules)
[09:33:29] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[09:33:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[09:34:03] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[09:35:28] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[09:35:59] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[09:37:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[09:37:23] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[09:37:30] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[09:37:44] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[09:38:50] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[09:39:23] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[09:43:53] *** Joins: Limits (~Limits@user/Limits)
[09:46:16] *** Joins: meator (~meator@user/meator)
[09:55:31] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[09:56:07] *** Joins: kts (~kts@103.73.237.124)
[09:56:38] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[09:56:38] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[09:57:16] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[09:59:00] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[10:00:03] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[10:01:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:02:18] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:08:07] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:c5e:8bc0:7367:5b6e) (Remote host closed the connection)
[10:08:25] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83)
[10:09:41] *** Joins: masoudd (~masoudd@user/masoudd)
[10:13:34] *** Joins: euouae (~euouae@user/euouae)
[10:13:53] <euouae> Hello if I have a library with a global variable `int i;`, is it part of my program if I link the library?
[10:14:22] <euouae> e.g. extern int i; int main() { printf("%d\n", i); return 0; } is fine?
[10:14:48] <euouae> each dynamic linking gets its own copy of `i`, right?
[10:17:18] *** Joins: bzng (~bzng4@91-115-30-192.adsl.highway.telekom.at)
[10:17:34] <nitrix> There must be single symbol with the name `i` amongst all of the translation units that gets linked into a final executable, whether that happens statically or dynamically.
[10:17:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:19:56] <nitrix> Overly simplified: declarations finds symbols while definitions creates them.
[10:21:13] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:22:36] *** Quits: meator (~meator@user/meator) (Ping timeout: 272 seconds)
[10:23:23] *** Joins: suss (~user@user/suss)
[10:23:36] <chiselfuse> if function() returns a pointer to a struct, can i do   `struct header result = &function();`  ?
[10:23:44] <chiselfuse> errr
[10:24:23] <chiselfuse> `struct header result = *function();`
[10:24:29] <nitrix> Yes.
[10:24:29] <sham1> Yes
[10:24:35] <chiselfuse> oki
[10:26:58] <suss> im new to c, a question: how do u compile c program in your project at most of the time, writing makefile manually / cmake /other tools?
[10:27:12] *** Quits: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[10:27:21] <nitrix> All these answers.
[10:27:50] <suss> it means that depends ?
[10:27:59] <chiselfuse> yes
[10:28:31] <chiselfuse> you most likely want a makefile
[10:28:35] <nitrix> Not everyone agrees on the tools they want to use and new tools are still being developed.
[10:28:42] <suss> i viewed the emacs Makefile,its big and complicated, so i had the question
[10:29:16] <sham1> That's also autogenerated
[10:29:40] <suss> should be it
[10:29:59] <ChoHag> nitrix: The same tool be being redeveloped over and over again.
[10:30:09] <nitrix> Which one?
[10:30:12] <ChoHag> Make.
[10:30:22] <euouae>  nitrix, but that doesn't answer my question
[10:30:28] <ChoHag> Each one more "this time it'll be done right" than the last.
[10:31:05] <euouae> You're presupposing knowledge of how linking works, but I think I understand now what the answer to my question is
[10:32:04] <ChoHag> suss: To compile a single file with no libraries is simply 'cc -o foo foo.c'
[10:32:14] <ChoHag> No makefile needed.
[10:32:21] <nitrix> euouae, You had two logically opposite questions, making it impossible for me to answer by either yes or no. I compromised until you can clarify.
[10:32:45] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83) (Quit: Leaving)
[10:32:51] <euouae> nitrix there is no demand to answer both at the same time
[10:33:02] <euouae> in fact such a requirement is bizzare
[10:33:08] <nitrix> Which one would you prefer to begin with?
[10:33:16] <ChoHag> Or 'cc foo.c' if you like the default output filename which is probably a.out.
[10:33:19] <euouae> I don't think I wish to waste my time
[10:33:25] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[10:33:41] <ChoHag> If you have a library with a global variable 'i' I'd say you are wasting your time already.
[10:33:59] <suss> sure ChoHag, I've been looking at some necessary stuff procedure(configure.in/ac, makefile.am/in, automake)
[10:34:02] <euouae> ChoHag How so?
[10:34:10] <nitrix> It'd be pretty hard to have a global variable since C doesn't have such thing.
[10:34:23] *** Joins: gce108 (~gce@user/gce108)
[10:34:49] <nitrix> Scoping is one thing. Translation units are another. Internal and external linkage is yet another. But there aren't global variables.
[10:34:50] <euouae> nitrix willfully obtuse.
[10:35:19] <ChoHag> euouae: It's not the greatest variable name to use over the reduced scope of a loop counter. The more widely used (and outside your own code is as wide as it gets) a variable is the better should be its name.
[10:35:38] <ChoHag> This is introductory level stuff. If your library author doesn't know that how bad is everything else?
[10:35:40] <euouae> ChoHag I'm simplifying, why would the variable name be important? anyway. forget about it.
[10:35:46] <euouae> _my_ library author?
[10:35:56] <ChoHag> The author of your library.
[10:36:03] <euouae> Why do you assume they're mine? What sort of ridiculous pompous attitude is this?
[10:36:09] * ChoHag sighs
[10:36:19] <ChoHag> Are you foreign? That would be a good excuse.
[10:36:24] <euouae> Racist too?
[10:36:26] <ChoHag> The author of the library you are currently using.
[10:36:27] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:36:33] <ChoHag> ie. "Your library's author".
[10:36:38] <ChoHag> English, motherfucker. Do you speak it?
[10:36:49] <Amun-Ra> calm down
[10:36:51] <nitrix> The answer to your question is C11 6.2.2p2, but even if I were to quote it, it'll be explained using the terms I've brought up, so you wont be any wiser.
[10:37:23] <nitrix> Hence my taking the approach of trying to give you an understanding of those things so you can understand the whole on your own.
[10:37:36] <euouae> nitrix look up what willfully obtuse means
[10:37:46] <ChoHag> It's alright we can see.
[10:37:47] <nitrix> ,define willfully obtuse
[10:37:48] <candide> nitrix: There are no definitions for willfully obtuse.
[10:37:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[10:37:50] <euouae> I'm done, thanks for wasting my time
[10:37:53] *** Parts: euouae (~euouae@user/euouae) ( )
[10:38:10] <ChoHag> Invigorating. I'm awake now.
[10:39:15] <chiselfuse> lmao
[10:39:31] <ChoHag> What a useless prat. "You didn't answer my question nicely enough so fuck you I'm out (and still ignorant) *slams door*".
[10:39:57] <nitrix> Ego is "The Great Filter" for knowledge.
[10:40:29] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[10:41:28] *** Joins: tejr (~tejr@user/tejr)
[10:42:13] <pragma-> ,add portability https://begriffs.com/posts/2018-11-15-c-portability.html
[10:42:13] <candide> portability already exists for #c.
[10:42:17] <pragma-> oh ok
[10:42:33] <sham1> ,portability
[10:42:33] <candide> portability is very important: http://clc-wiki.net/wiki/C_community:comp.lang.c:Portability_attitude
[10:42:37] <ChoHag> #c's been ported 3 times so far right?
[10:42:55] <pragma-> ,add weird-machines https://begriffs.com/posts/2018-11-15-c-portability.html
[10:42:56] <candide> weird-machines added to #c.
[10:43:05] <nitrix> ,factinfo portability
[10:43:05] <candide> portability: Factoid submitted by n00p for #c on Tue Jan 19 13:31:56 2010 [12y36d ago], referenced 16 times (last by sham1!~sham1@212-146-44-107.aboa.net on Mon Feb 21 23:12:33 2022 [32s ago])
[10:43:14] <nitrix> Yeah, 12 years old, I wouldn't touch it.
[10:43:24] <pragma-> ,portability
[10:43:25] <candide> portability is very important: http://clc-wiki.net/wiki/C_community:comp.lang.c:Portability_attitude
[10:43:29] * pragma- shrugs
[10:43:49] <nitrix> Didn't get many uses in this many years. I ought to remember that one.
[10:43:52] <pragma-> oh i missed sham1 doing that
[10:43:56] <pragma-> i was in another window
[10:45:01] *** Joins: vysn (~vysn@user/vysn)
[10:45:06] *** Quits: shantaram (shan@cyblog/maintainer/shan) (Remote host closed the connection)
[10:48:28] <sham1> Porting C to a Symbolics machine seems both very interesting and also like heresy
[10:48:55] <ChoHag> Eh they've already ported it to Javascript.
[10:48:57] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[10:49:01] <ChoHag> The heretics are running the show.
[10:51:33] <shiroyasha> (Re: "The heretics are running the show.") Indeed. `true` and `false` becoming keywords for C23 was a betrayal, for example.
[10:53:38] <pragma-> not _True and _False?
[10:54:10] <pragma-> bit surprising to hear about all these changes departing from backwards compatibility
[10:54:50] *** Joins: xa0s (~xa0s@mab.sdf.org)
[10:54:57] <pragma-> why would they add true and false as keywords when they added them to stdbool.h as macros recently?
[10:55:40] <shiroyasha> Link to orange site:  https://news.ycombinator.com/item?id=30395016
[10:55:41] <candide> Title of shiroyasha's link: C meeting is over. C23 added: | Hacker News
[10:55:45] <sham1> Recently, as in 20 years ago
[10:55:52] <pragma-> that's recent!
[10:56:00] *** Joins: shan (shan@cyblog/maintainer/shan)
[10:56:45] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:58:47] <chiselfuse> how can i express an array literal?
[10:59:02] <chiselfuse> wait
[10:59:21] <chiselfuse> i know how to do that but
[10:59:35] <ChoHag> 2s complement only now eh?
[10:59:51] <chiselfuse> what?
[11:00:17] <ChoHag> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2412.pdf
[11:00:31] <ChoHag> Only a modification request at this stage by the looks of it.
[11:01:08] <chiselfuse> is this related to my discussion by any chance?
[11:01:19] <chiselfuse> i quite dumb
[11:01:22] <chiselfuse> am*
[11:01:32] <ChoHag> No. Discussion was regarding C going woke.
[11:01:42] <chiselfuse> i heard about this
[11:02:07] <chiselfuse> so are we sticking to older standards from now on?
[11:02:21] <ChoHag> I would. There will be a few years of drama. Give it until about 2027.
[11:03:15] <ChoHag> Someone's jumped on the "popular" bandwagon and they need to jump off.
[11:04:24] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 272 seconds)
[11:05:22] <chiselfuse> i just hope it doesn't go to shit for real
[11:05:28] <ChoHag> Oh and you want braces: int x[] = { 10, 20, 30 };
[11:05:40] <chiselfuse> yeah about that...
[11:05:54] <pragma-> smh, there are weirdos that stick to c89 even though c99 is decent
[11:06:02] <chiselfuse> that's not exactly my question, or at least i think so, but let me rephrase it
[11:06:17] <chiselfuse> "rephrase it" by giving an example
[11:06:37] <chiselfuse> "example" by what i literally want to do
[11:07:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[11:07:37] <chiselfuse> char cmbuf[CMSG_SPACE(sizeof(struct in_pktinfo))];   struct msghdr mh;  mh.msg_control = cmbuf;
[11:07:41] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:07:53] <chiselfuse> i want to not use the symbol cmbuf
[11:08:13] <chiselfuse> so i want to define it literally for mh.msg_control
[11:08:47] <ChoHag> You can't. It needs a pointer which means you need to store your array somewhere that can be pointed at.
[11:08:56] <ChoHag> Well you may be able to do something ugly but I wouldn't.
[11:09:15] <sham1> mh.msg_control = (char [CMSG_SPACE(sizeof(struct in_pktinfo))]){}; maybe
[11:09:21] <snappy> what's wrong with sticking to only 2s complement? I don't know of any implementations where 2 complement isn't the case
[11:10:04] <chiselfuse> ChoHag: can you show me the ugly for educational purpose?
[11:10:13] <chiselfuse> or is it sham1's answer?
[11:10:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[11:10:18] <ChoHag> No idea.
[11:10:25] <sham1> Try it
[11:10:39] <ChoHag> There will be braces, casts, and rereferences. It will look like perl.
[11:10:53] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[11:11:13] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[11:11:19] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:12:07] <chiselfuse> i think i'm more attracted to it looking like perl than having that useless defined symbol like that, it makese me think that it's used for something other than allocating some space
[11:12:18] <ChoHag> That is what it's used for.
[11:12:31] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[11:12:45] <ChoHag> All the inline variant would be is an uglier version of what will ultimately become the same code.
[11:12:46] <chiselfuse> i might "fix" this by naming it temp or something...
[11:13:38] <ChoHag> int x = 42; foo(x); and foo(42); are practically indistinguishable, except the former lets you name the magic constant.
[11:13:51] *** Joins: skapata (~Skapata@user/skapata)
[11:13:55] <ChoHag> (Note "practically", purists)
[11:14:31] *** Quits: brdb (~alarm@24.61.226.255) (Ping timeout: 256 seconds)
[11:14:59] <chiselfuse> sham1: can you explain what you did there?
[11:15:01] <chiselfuse> (){}
[11:15:30] <sham1> That's a compound literal… I think that's what it's called, anyhow
[11:15:52] <sham1> Oh ues
[11:16:30] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[11:17:00] <sham1> The compound literal looks like a cast, but it's not
[11:17:22] *** Joins: joev (~joev@user/joev)
[11:19:34] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[11:20:11] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Ping timeout: 256 seconds)
[11:22:05] *** Joins: gry_ (~quassel@botters/gry)
[11:22:08] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 272 seconds)
[11:23:48] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[11:25:02] <masoudd> ,c11 6.5.2.5
[11:25:04] <candide> http://www.iso-9899.info/n1570.html#6.5.2.5 [Compound literals] 1 The type name shall specify a complete object type or an array of unknown size, but not a variable length array type. 2 All the constraints for initializer lists in 6.7.9 also apply to compound literals. Semantics 3 A postfix expression that consists of a parenthesized type name followed by a brace- enclosed list of initializers is a compou... <truncated; https://0x0.st/oKNh.txt>
[11:26:09] *** Joins: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl)
[11:29:03] <masoudd> Like this char *ptr = (char[SIZE]){0};
[11:32:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Excess Flood)
[11:32:23] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:32:32] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[11:32:33] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[11:33:14] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:33:39] *** Joins: CaCode (~CaCode@user/cacode)
[11:34:58] *** Joins: hashfunc461 (~user@162.254.115.155)
[11:35:20] <chiselfuse> what does "array of unknown size
[11:35:25] <chiselfuse> what does "array of unknown size" mean?
[11:35:53] *** Joins: CaCode_ (~CaCode@user/cacode)
[11:37:14] <masoudd> I'm not sure but I think it's this: char *ptr = (char[]){'a', 'b', 'c'};
[11:39:01] *** Joins: brdb (~alarm@24.61.226.255)
[11:39:11] <chiselfuse> masoudd: why did you add {0} in the previous example
[11:39:15] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 272 seconds)
[11:39:15] <chiselfuse> instead of {}
[11:39:22] <masoudd> because of this:
[11:39:33] <masoudd> ,cc char *ptr = (char[10]){};
[11:39:35] <candide> masoudd: [warning: ISO C forbids empty initializer braces [-Wpedantic]] no output: ptr = 0x7fffffffe30e ""
[11:40:01] <sham1> You're lucky it only happened to contain zeroes
[11:40:23] <sham1> Or at least that the first char was '\0'
[11:40:36] <sham1> But yeah, you need to add something in there
[11:41:00] <chiselfuse> what now about the zeros?
[11:41:09] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[11:41:09] <sham1> mh.msg_control = (char [CMSG_SPACE(sizeof(struct in_pktinfo))]){0};
[11:41:17] <chiselfuse> firstly, will it compile at all with {}?
[11:41:21] <sham1> That's the "pedantically correct" version
[11:41:25] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[11:42:02] <chiselfuse> sham1: i didn't understand your point about zeroes
[11:42:17] *** Quits: joev (~joev@user/joev) (Remote host closed the connection)
[11:42:35] <sham1> My point about zeroes is that you need to make sure that the array is initialised properly before accessing it
[11:42:39] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[11:42:41] *** Joins: joev (~joev@user/joev)
[11:42:44] <sham1> Well, reading from it
[11:43:02] <chiselfuse> but i don't care, i just want it to allocate space
[11:43:14] <chiselfuse> i'll write to it
[11:43:50] <sham1> Well you still need to initialise it somehow, because as the warning above says: ISO C forbids empty initialized braces
[11:44:08] <chiselfuse> hmm
[11:44:17] *** Quits: Limits (~Limits@user/Limits) (Ping timeout: 240 seconds)
[11:44:45] <chiselfuse> how is "0" interpreted over the width of char[SIZE]?
[11:45:05] <chiselfuse> what if it were "1" or "3"
[11:45:35] <dave0> chiselfuse: same as   char temp[SIZE] = { 0 };
[11:45:49] <dave0> chiselfuse: if you initialize any element, the rest get set to zero
[11:46:11] <chiselfuse> oki
[11:46:24] *** Joins: Limits (~Limits@user/Limits)
[11:46:31] <sham1> ,cc int foo[3] = {0};
[11:46:33] <candide> sham1: no output: foo = {0, 0, 0}
[11:46:35] <sham1> ,cc int foo[3] = {1};
[11:46:37] <candide> sham1: no output: foo = {1, 0, 0}
[11:46:46] <dave0> ,cc enum { SIZE = 10 }; int temp[SIZE] = { 1,2,3 };
[11:46:46] <masoudd> ,c11 6.5.2.5.5
[11:46:47] <candide> No such section '6.5.2.5.5' in C11 Draft Standard (n1570).
[11:46:48] <candide> dave0: no output: SIZE = SIZE; temp = {1, 2, 3, 0, 0, 0, 0, 0, 0, 0}
[11:47:03] <sham1> ,c11 6.5.2.5p5
[11:47:03] <candide> http://www.iso-9899.info/n1570.html#6.5.2.5p5 [Compound literals] The value of the compound literal is that of an unnamed object initialized by the initializer list. If the compound literal occurs outside the body of a function, the object has static storage duration; otherwise, it has automatic storage duration associated with the enclosing block.
[11:47:36] <masoudd> I about the storage duration
[11:47:49] *** Joins: aradesh (~aradesh@user/aradesh)
[11:47:54] <masoudd> it's not dynamically allocated
[11:48:14] <dave0> no, it's entirely like a variable except no name
[11:48:22] *** Joins: Rounin (~david@84.212.130.215)
[11:48:37] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[11:49:23] <chiselfuse> there was an example about that in some standard
[11:49:34] <chiselfuse> the storage duration of compound literals
[11:49:55] <dave0> sham1 quoted the standard
[11:50:11] <dave0> static storage if outside a function, automatic if in
[11:50:15] <dave0> just like a regular variable
[11:52:09] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[11:52:11] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[11:54:14] *** Joins: vb (~vb@185.19.132.205)
[11:54:37] *** Joins: cadmio (~cadmio@151.35.52.134)
[11:54:39] <cadmio> Hello
[11:54:40] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:55:31] <masoudd> oh hello my gnome user friend :)
[11:55:32] *** Parts: vb (~vb@185.19.132.205) ()
[11:55:46] <cadmio> ;)
[11:56:58] <cadmio> here https://paste.gnome.org/pfjnw9ubk#line-66 instead of using a global variable I'd like another way to understand whether the function open_file_complete  was called by openFromTemplate or open_dialog
[11:58:55] *** Joins: savolla (~quassel@95.10.204.117)
[12:00:21] <masoudd> it's not global. It inside "gpointer userData" argument given to open_file_complete(). See line 1 and 5: struct lit *litos = (struct lit*)userData;
[12:01:28] <cadmio> yes, I needed to add a new member to the struct specifically for the purpose
[12:01:41] <cadmio> I don't know if there's a method to understand which function is the caller
[12:02:29] <Amun-Ra> cadmio: create struct with any number of fields you like and pass it as user data
[12:03:13] <sham1> Also no need to cast a gpointer since that's just a void * in disguise
[12:04:26] <masoudd> A function can't know who called it. You have to give it the information. Either global variable or pass it something that tells it.
[12:04:52] *** Joins: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[12:05:53] *** Joins: Klinda (~superleag@user/klinda)
[12:07:16] <cadmio> ok. Apparently litos->template is always FALSE
[12:07:22] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:07:32] *** Joins: frost (~frost@user/frost)
[12:07:48] <cadmio> l.175 should set it to FALSE after opening the file
[12:11:35] *** Joins: Livio (~livio@user/livio)
[12:11:37] *** Quits: kplant (~kplant@user/kplant) (Ping timeout: 240 seconds)
[12:12:19] <masoudd> wait, open_file_complete() is a callback for a signal?
[12:13:17] *** Joins: kplant (~kplant@user/kplant)
[12:13:41] <cadmio> there's a chain "open" signal -> app_open_cb -> open_file -> open_file_complete()
[12:14:35] <cadmio> that variable is initialized here https://paste.gnome.org/pnmrchcou#line-47
[12:14:39] <cadmio> in the main
[12:20:13] *** Joins: inlight (~n0ise@user/inlight)
[12:22:21] <cadmio> I moved that   litos->template = FALSE; inside the if block an now it correclty evaluated as true
[12:22:29] <masoudd> I don't think I know enough about the way signals work to be able to help. One suggestion: Don't set it to FALSE in line 175. Put that before calling open_file() in line 129
[12:22:41] <masoudd> hmm strange
[12:24:55] *** Quits: pnbeast (~pnbeast@2601:140:4280:3800::1) (Quit: WeeChat 2.7.1)
[12:25:46] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Remote host closed the connection)
[12:26:34] *** Joins: inlight_ (~n0ise@user/inlight)
[12:26:36] *** Quits: kts (~kts@103.73.237.124) (Quit: Konversation terminated!)
[12:26:56] <chiselfuse> mh.msg_control = (char [CMSG_SPACE(sizeof(struct in_pktinfo))]){0};
[12:27:03] <chiselfuse> but this is a VLA, isn't it?
[12:27:10] <chiselfuse> so it can't work?
[12:27:14] *** Quits: inlight_ (~n0ise@user/inlight) (Client Quit)
[12:27:30] <masoudd> hmm I think it depends what CMSG_SPACE is
[12:27:36] <chiselfuse> yup
[12:27:46] <chiselfuse> it looks like a macro
[12:28:06] <sham1> Yeah, there'd be no reason for that to be a VLA
[12:28:07] <chiselfuse> CMSG(3)
[12:28:16] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[12:28:39] <chiselfuse> from CMSG(3): *  CMSG_SPACE() returns the number of bytes an ancillary element with payload
[12:28:46] <chiselfuse> of the passed data length occupies.  This is a constant expression.
[12:29:14] <chiselfuse> i think that it hints that it's just some arithetic macro
[12:29:17] *** Quits: inlight (~n0ise@user/inlight) (Ping timeout: 240 seconds)
[12:29:26] <chiselfuse> "constant expression"
[12:29:27] <chiselfuse> oki
[12:29:39] <masoudd> then it's not VLA
[12:30:09] *** Quits: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1) (Quit: You have been kicked for being idle)
[12:35:20] <chiselfuse> 100 mh.msg_control = (char [CMSG_SPACE(sizeof(struct in_pktinfo))]){0};
[12:35:20] <chiselfuse> 101 mh.msg_controllen = sizeof(mh.msg_control);
[12:35:26] <chiselfuse> second line, is there a prettier way of defining the size?
[12:35:34] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:35:56] *** Parts: cadmio (~cadmio@151.35.52.134) (WeeChat 3.0)
[12:36:38] <chiselfuse> but i'm worried, will that get the size of the array or not? because .msg_control is a void *
[12:38:01] <masoudd> hmm
[12:38:24] *** Joins: kts (~kts@103.73.237.124)
[12:38:49] <chiselfuse> i could repeat the entire expression but that wouldn't look too nice
[12:39:27] <masoudd> ,cc void *ptr = (char[42]){0}; int i = sizeof(ptr);
[12:39:29] <candide> masoudd: no output: ptr = 0x7fffffffe2e0; i = 8
[12:39:50] <chiselfuse> hmm
[12:40:24] <chiselfuse> ,cc int i = sizeof((char[42]){0});
[12:40:26] <candide> chiselfuse: no output: i = 42
[12:40:49] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:40:58] <masoudd> wouldn't that create another unused array?
[12:41:06] *** Joins: tejr (~tejr@user/tejr)
[12:41:13] <chiselfuse> nope
[12:41:43] <chiselfuse> mh.msg_controllen = sizeof(CMSG_SPACE(sizeof(struct in_pktinfo))]){0});
[12:41:53] <masoudd> anonymous array just lingering around in your storage duration?
[12:42:05] <chiselfuse> how?
[12:42:33] <masoudd> (char[42]){0} is compound literal
[12:42:37] *** Quits: kts (~kts@103.73.237.124) (Client Quit)
[12:42:42] <masoudd> it exists!
[12:42:44] <chiselfuse> you mean that the compound literal creates an array, yes it does, the point was trying to not use a *symbol*
[12:43:09] <masoudd> I don't know maybe compiler magic will optimize it away
[12:43:25] <sham1> It will
[12:43:37] <sham1> Just like how for example sizeof(42), the 42 doesn't linger about
[12:43:41] <sham1> ,cc sizeof(42)
[12:43:42] <ChoHag> We were there 1½ hours ago.
[12:43:43] <candide> sham1: no output: sizeof(42) = 4
[12:44:02] <ChoHag> Already spent more time arguing than the cost of the symbol is worth.
[12:44:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[12:45:29] <chiselfuse> that was wrong though
[12:45:34] <chiselfuse> what i did
[12:45:47] <chiselfuse> mh.msg_controllen = CMSG_SPACE(sizeof(struct in_pktinfo))]){0};
[12:45:54] <chiselfuse> no
[12:45:58] <chiselfuse> errr
[12:46:11] <chiselfuse> mh.msg_controllen = CMSG_SPACE(sizeof(struct in_pktinfo));
[12:46:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:47:03] *** Joins: pony (sid524992@smol/hors)
[12:47:48] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[12:48:54] <chiselfuse> ChoHag: it's not about cost of symbol
[12:49:33] <chiselfuse> i feel like a symbol here obstructs code clarity that's all
[12:50:02] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[12:51:10] *** Joins: cart_ (~cart@185.191.86.4)
[12:51:19] *** Joins: mrig (~mrig@user/mrig)
[12:51:25] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[12:52:02] <masoudd> we can bikeshed all day about that but the generated code will be the same. Personally I'd do a size_t size = ...
[12:52:17] *** Quits: Limits (~Limits@user/Limits) (Ping timeout: 240 seconds)
[12:52:42] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[12:54:38] <chiselfuse> the thing is, that struct with all its members and submembers and weired ways to access its memory make a bit of a mess already, so having stuff like size_t size = ... etc makes it confusing af to read imo
[12:55:34] <chiselfuse> i'd rather shift the confusion to reading that compound literal then give impressions that there's meaning to that symbol other than memory allocation
[12:55:46] <chiselfuse> s/then/than
[12:57:51] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8c05:d57e:b0ce:2212) (Quit: Quit)
[12:59:36] *** Joins: plastico (~plastico@neomutt/plastico)
[12:59:48] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[13:01:50] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[13:02:48] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:02:59] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[13:03:11] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[13:11:00] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:11:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:11:40] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[13:12:02] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:16:09] *** Joins: scaramanga (~scara@1.239.35.120)
[13:18:04] *** Quits: suss (~user@user/suss) (Ping timeout: 272 seconds)
[13:18:28] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[13:18:48] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:20:11] *** Joins: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83)
[13:23:17] *** Joins: jinie (~jimmy@195.254.169.70)
[13:23:49] *** Quits: jinie (~jimmy@195.254.169.70) (Client Quit)
[13:24:15] *** Joins: banc- (banc@gateway/vpn/airvpn/banc)
[13:26:54] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 272 seconds)
[13:27:07] *** Quits: Livio (~livio@user/livio) (Ping timeout: 256 seconds)
[13:27:51] *** gry_ is now known as gry
[13:29:11] *** Joins: Livio (~livio@user/livio)
[13:30:24] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[13:33:00] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[13:34:29] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[13:35:08] *** Quits: hashfunc461 (~user@162.254.115.155) (Ping timeout: 272 seconds)
[13:35:20] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 256 seconds)
[13:35:28] *** Parts: pony (sid524992@smol/hors) ()
[13:36:58] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[13:37:03] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 272 seconds)
[13:38:15] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[13:38:27] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:39:28] *** Joins: frost (~frost@user/frost)
[13:40:29] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[13:40:46] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[13:41:51] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[13:42:16] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[13:43:37] *** Joins: mrig (~mrig@user/mrig)
[13:44:32] *** Joins: kts (~kts@103.73.237.124)
[13:47:34] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:51:07] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[13:52:09] *** Joins: Limits (~Limits@user/Limits)
[13:52:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[13:56:59] *** Joins: pulse (~pulse@user/pulse)
[13:57:34] *** Parts: ifreund (2940d10f8b@user/ifreund) (WeeChat 3.4)
[13:58:25] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:02:17] *** Joins: banc- (banc@gateway/vpn/airvpn/banc)
[14:03:41] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 245 seconds)
[14:03:48] *** Quits: hinata (~hinata@2409:4042:2c17:28ca:79dd:3847:fcd6:3a83) (Ping timeout: 240 seconds)
[14:05:32] <chiselfuse> < chiselfuse> if function() returns a pointer to a struct, can i do   `struct header result = *function();`  ?
[14:05:51] <chiselfuse> but then that's not too good practice if the function returns null for error
[14:06:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:07:04] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Ping timeout: 256 seconds)
[14:08:18] <ChoHag> re. code clarity. You're right. When I see what you're trying to achieve in source code, I know not to look for any.
[14:08:33] *** Quits: Limits (~Limits@user/Limits) (Quit: WeeChat 3.4)
[14:08:57] <chiselfuse> :P
[14:08:58] <ChoHag> More magic == less readable.
[14:09:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:09:46] * CatButts sprinkles some magic numbers for good measure
[14:09:50] <chiselfuse> i already explained where i saw the confusion and why i decided to do that way, that is my opinion
[14:10:06] <dave0> chiselfuse: you could return a struct directly, no pointers involved
[14:10:38] <chiselfuse> i don't get to define the function there
[14:10:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[14:11:01] <caze> Why don't you just check the pointer for NULL before dereferencing it?
[14:11:12] <chiselfuse> hmm how?
[14:11:23] <chiselfuse> ternary?
[14:11:46] <CatButts> if (ptr && ptr->thing)
[14:11:48] <caze> if
[14:11:59] <ChoHag> res = foo(); if (res == NULL) abort(); frobnicate(res);
[14:12:07] <dave0> they're saying assign the result to a varaib .. right
[14:12:10] <NRK> functions returning pointers is bit of a mess. is it allocated? do i need to free it? etc.
[14:12:29] <chiselfuse> dave0 yes :P
[14:12:52] <ChoHag> NRK: It's for clarity, see...
[14:13:08] <sham1> Any function that returns a pointer needs to be documented explicitly as to who owns the pointed data
[14:13:32] <chiselfuse> it's CMSG_FIRSTHDR, there, go have at it
[14:13:34] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[14:13:35] <NRK> not all libs have "good" docs... unfortunate reality
[14:13:43] <rcf> s/"good"//
[14:13:49] <NRK> kek
[14:13:51] <CatButts> char fullPath[MAX_PATH];
[14:13:52] <CatButts> if (!os_appendPath(os_getParentFolder(os_getSelfName(fullPath, MAX_PATH)), relPath, MAX_PATH)) return NULL;
[14:13:53] <chiselfuse> sham1: in CMSG(3)
[14:13:56] <CatButts> haha
[14:14:44] <sham1> rcf: I'd argue that no docs is a subset of non-good docs
[14:15:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Client Quit)
[14:15:28] <sham1> Yeah, CMSG_DATA documents it clearly that it just returns a pointer to the data portion of cmsghdr
[14:15:30] <sham1> So it's not allocated
[14:15:37] <chiselfuse> yep
[14:15:56] <sham1> It's also interesting that there's no 3p version of the man-page at least on my machine
[14:16:13] <chiselfuse> what's 3p?
[14:16:20] <chiselfuse> 3p vs just 3
[14:16:37] <sham1> 3p is the POSIX while 3 is stuff for more system-dependent stuff
[14:17:10] <chiselfuse> i don't have a 3p section either
[14:17:47] <ChoHag> 3p is perl here.
[14:18:20] <sham1> Yeah, it does depend on the system
[14:18:21] <rcf> sham1: for typical Linux it's under sys_socket.h; POSIX doesn't bother defining CMSG_* by themselves.
[14:18:34] <sham1> Hum
[14:18:38] <ChoHag> sham1: Are you using unix?
[14:18:46] <sham1> I'm using Linux stuff, so no
[14:19:01] <sham1> No UNIX for me. Can't afford it
[14:19:06] <ChoHag> Since when did linux separate out posix?
[14:19:13] <chiselfuse> sham1: it says that For portability, ancillary data should be accessed using only the macros described here.  CMSG_ALIGN() is a Linux extension and should not be used in portable programs.
[14:20:25] *** Joins: soul-d (~uknown@user/soul-d)
[14:20:29] <sham1> ChoHag: for example I have printf(3) and printf(3p) where printf(3) describes GNU stuff while printf(3p) stays with the POSIX which in turn refers back to C1999, although the printf(3p) page for me is rather empty
[14:20:36] <sham1> This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page
[14:20:38] <sham1>        for details of Linux behavior), or the interface may not be implemented on Linux.
[14:21:02] *** Joins: nuxil (~nuxil@141.195.51.213)
[14:21:12] <sham1> Indeed, the printf(3p) tells me to refer back to fprintf(3p)
[14:22:00] <rcf> ChoHag: it's not that they're separated based on whether or not something is POSIX, but rather there's the linux manpages (for this specific implementation) and then a supplemental package with the actual POSIX documents as manpages.
[14:22:11] <sham1> And that in turn gives me stuff about how fprintf works on POSIX systems, while fprintf(3) tells me about that plus all the various GNUisms
[14:22:31] <ChoHag> Oh. They never bothered to do that back in the day.
[14:22:36] <dave0> did someone already post this?    https://begriffs.com/posts/2018-11-15-c-portability.html    https://news.ycombinator.com/item?id=30417802
[14:22:37] <candide> Title of dave0's link: C Portability Lessons from Weird Machines
[14:22:37] <candide> Title of dave0's link: C Portability Lessons from Weird Machines | Hacker News
[14:22:46] <sham1> dave0: pragma- did
[14:22:49] <sham1> ,weird-machines
[14:22:49] <candide> weird-machines is https://begriffs.com/posts/2018-11-15-c-portability.html
[14:22:55] <dave0> ah cool
[14:23:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:23:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:24:02] *** Joins: Burgundy (~NA@86.121.143.206)
[14:24:05] <rcf> ChoHag: it varies based on distribution, many don't include them by default or even package them all even now.
[14:24:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:24:54] <sham1> Fedora at least combines them both
[14:25:14] <rcf> (as they're just nice to have, not necessary; the Linux manpages are usually good enough about delineating standard versus extended functionality)
[14:28:36] *** Quits: foul_owl (~kerry@23.82.193.88) (Ping timeout: 256 seconds)
[14:29:00] <rcf> And of course back in the truly old days they would have had to pay for POSIX so it wasn't happening even it would have been desirable.
[14:31:32] *** Joins: freepp (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[14:33:25] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 272 seconds)
[14:33:25] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[14:33:35] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[14:34:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:34:40] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[14:34:42] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:38:01] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:41:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[14:42:03] *** Joins: zuplex (~zuplex@202.51.76.195)
[14:42:44] *** Joins: foul_owl (~kerry@23.82.193.89)
[14:52:48] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9)
[14:53:21] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[14:53:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[14:53:47] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[14:56:09] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:57:11] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Read error: Connection reset by peer)
[14:59:38] *** Joins: lisbeths (uid135845@id-135845.lymington.irccloud.com)
[15:00:18] <lisbeths>  /join #archlinux
[15:01:49] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[15:02:31] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:02:36] *** Quits: kilolympus (~kilolympu@vpn-fn-229.net.ed.ac.uk) (Ping timeout: 256 seconds)
[15:03:51] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[15:04:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[15:05:43] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:08:50] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[15:11:19] *** Joins: pokhu (~rishi@103.206.114.112)
[15:14:19] *** Joins: kish` (~aqua@user/aqua)
[15:15:22] *** Joins: raym (~raym@user/raym)
[15:18:11] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[15:21:48] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[15:22:38] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:23:00] *** Joins: joev (~joev@user/joev)
[15:26:03] <anshupatia> Can anyone tell me why GCC on MSYS2 produces executables with excessive gunk code along with the program instructions?
[15:26:30] <CatButts> I think you need -s
[15:26:33] <CatButts> flag
[15:26:37] <CatButts> strip
[15:29:45] *** Joins: onla (~onla@85-76-48-233-nat.elisa-mobile.fi)
[15:30:02] *** Parts: onla (~onla@85-76-48-233-nat.elisa-mobile.fi) ()
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:32:31] *** Joins: strajder (~strajder@user/strajder)
[15:32:42] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[15:32:51] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:33:22] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:28] *** Joins: kurahaupo (~kurahaupo@pa49-182-7-84.pa.qld.optusnet.com.au)
[15:38:39] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 252 seconds)
[15:38:58] *** Joins: angelacrust (~angelacru@122.161.32.177)
[15:38:59] *** Quits: fcresende_ (fcresende@2605:6400:20:434:e11e:4d17:e9ec:e5b4) (Ping timeout: 250 seconds)
[15:39:12] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (Ping timeout: 252 seconds)
[15:39:54] <angelacrust> https://bpa.st/EFQQ is failing the last test case... what's going wrong?
[15:40:34] <clarity> my crystal ball says you have a bug
[15:40:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:59] <NRK> `    fgets(buff, 10002, stdin);`
[15:41:00] <angelacrust> yep, I changed the size of the array to 10002 and it works
[15:41:34] <NRK> you shouldn't be hardcoding shit like that anyways.
[15:41:42] <NRK> for char arrays you can use sizeof()
[15:41:48] <angelacrust> Yes, NRK, shouldn't we assign `SIZE + 1` to the fgets param
[15:42:01] <angelacrust> Nope, but the size in the question is given: 10000
[15:42:11] <fizzie> Why would you give SIZE+1 to fgets, if SIZE is the size of the array?
[15:42:20] <clarity> So that you can overflow it.
[15:42:49] <angelacrust> because `fgets()` only reads `n - 1` characters?
[15:43:17] <fizzie> Yeah, in order to leave space for the terminating '\0' *after* those n-1 characters.
[15:43:28] <NRK> the "solution" to that is to increase the size of the buffer by one
[15:43:42] <NRK> not SIZE+1, which will just overflow the buffr
[15:43:42] <angelacrust> yep, I increased the size of the buffer by 2
[15:43:46] <angelacrust> Right
[15:43:55] <angelacrust> So that's a huge mistake?
[15:44:04] <NRK> yes
[15:44:31] <NRK> try compiling your stuff with `-fsanitize=address -g` it will catch alot of these problems
[15:44:49] <angelacrust> I don't have the permission to do that
[15:44:54] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[15:45:05] <angelacrust> btw, `buff[10001]` is failing the test case too
[15:45:13] <angelacrust> And `buff[10002]` is working correctly
[15:45:19] <NRK> (#x_x)
[15:46:54] <angelacrust> should I paste the last test case?
[15:47:18] <clarity> How is it that you have permission to chat on irc and post code online in pastebins but don't have permission to pass flags to your compiler :(
[15:47:32] <angelacrust> because it's an Online Judge...
[15:47:41] <clarity> ???
[15:48:03] <angelacrust> I can only run my code and check whether it's correct or not
[15:48:10] <fizzie> Surely you can run these things on your own machine *as well*, when debugging?
[15:48:23] <angelacrust> Yes
[15:49:13] <fizzie> Well, use as many warning and runtime-checking flags as possible when you're doing that, is I think what the suggestion was.
[15:49:24] <angelacrust> Gotcha
[15:50:04] <NRK> i've recently incorporated cppcheck into my build systems
[15:50:15] <NRK> don't regret it
[15:50:32] <fizzie> Anyway, if the test case needs a buffer of 10002, sounds like the most likely reason is it needs to handle a line that contains 10000 characters, followed by '\n' to terminate the line, followed by '\0' to make it a string.
[15:50:42] <NRK> apart from it being a bit bitchy when using --enable=style
[15:51:13] <angelacrust> ?
[15:51:54] <dave0> angelacrust: you don't really need   buff[strcspn(buff, "\n")] = 0;   because you don't treat it as a string in the printf's
[15:52:14] <dave0> just do   int size = strcspn(buff, "\n");
[15:52:22] <angelacrust> Oh
[15:52:46] <angelacrust> Okay, I will do that
[15:52:58] <dave0> also there's a profound lack of error checking
[15:53:50] <anshupatia> decompiling my exe file gives this https://pastebin.com/NbWqY0R0
[15:54:13] <anshupatia> oh sorry it got deleted
[15:54:42] *** Joins: M-blaise (~M-blaise@105.112.138.38)
[15:55:08] <anshupatia> https://paste.centos.org/view/fd236320
[15:55:19] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:55:28] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[15:55:45] <anshupatia> while the actual program is just #include <stdio.h>
[15:55:45] <anshupatia> main() { printf("Hello world\n"); }
[15:56:17] <anshupatia> any idea why gcc produces that extra code and how i can get rid of it?
[15:56:39] <dave0> it looks like the output from a machine
[15:56:47] <clarity> Link statically, avoid libc
[15:56:55] <clarity> Avoid start files even
[15:57:00] <clarity> And then good luck
[15:57:07] <fizzie> My idea would be to stop worrying about it.
[15:57:09] <clarity> Because you're reinventing stuff the platform does fot you
[15:57:10] <anshupatia> yeah gcc .c -> .exe file -> decompile/disassemble to .c
[15:57:25] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[15:57:27] <anshupatia> that extra code is just bloat
[15:57:42] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[15:57:51] <dave0> there's a bunch of code to set up your program to conform with the language
[15:58:05] <NRK> well, have u ever written a hello world in Go? :p
[15:58:10] <dave0> if you really want it minimal, write it in assembler and make direct syscalls to you os
[15:58:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[15:58:55] <fizzie> I mean, you can do the latter even while sticking with C, it's just a matter of `-nostdlib` (in the case of GCC).
[15:58:59] <dave0> does windows still run .com files?
[15:59:13] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:59:32] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[16:00:02] <dave0> .com are the purest of them all
[16:00:17] <dave0> map the binary directly into memory and jump to the first location
[16:00:19] <anshupatia> is it possible to make the program minimal while using c/gcc?
[16:00:20] <dave0> simplicity
[16:01:14] <fizzie> Yes, use the `-nostdlib` and write your own `_start` function. And don't call any C library functions, of course. So `printf` is definitely out of the picture.
[16:01:32] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[16:02:40] <angelacrust> so, do you still write SIZE + 1 in fgets() if you've already increased the size of the array by 1? also, I compiled the code with `-fsanitize=address -g` and the compiler did not report any errors
[16:02:56] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:03:02] <clarity> angelacrust: I'd recommend you think about this for a moment
[16:03:15] <clarity> angelacrust: And if you're not sure, take a look at the documentation for fgets
[16:03:19] *** Joins: joev (~joev@user/joev)
[16:03:38] <angelacrust> okay, I'll go through the documentation first
[16:04:13] <fizzie> Just don't get re-confused by the "reads one less than" bit, because that's the number of characters it *reads* from the file, not the number of characters it *writes* to the array.
[16:07:35] <dave0> you could use sizeof
[16:07:58] <dave0> char buff[10002]; fgets(buff, sizeof(buff), stdin);
[16:08:11] <dave0> did someone already say that?
[16:08:27] <fizzie> Yes, a while ago, though not as explicitly.
[16:08:59] <fizzie> I felt compelled (but resisted) to mention the unnecessary parentheses then, but couldn't stay silent now.
[16:09:06] <dave0> oh lol
[16:09:36] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (Quit: ZNC 1.8.2 - https://znc.in)
[16:09:50] <dave0> you'll be sad to know i rolled my own isdigit     static inline int isdigit(int c) { return(c >= '0' && c <= '9'); }
[16:10:06] <fizzie> I feel slightly ill.
[16:10:24] <angelacrust> yep, the docs are difficult to understand, but I tried
[16:10:29] <fizzie> At any rate. If you have an array of SIZE bytes, most standard library functions you'll want to pass SIZE to; a couple (strncpy, strncat, although they're terrible) you might need to pass SIZE-1 to; I can't think of any you'd pass SIZE+1 to.
[16:10:41] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[16:10:58] <dave0> fizzie: i couldn't bring myself to cast to unsigned char to use ctype.h :-(
[16:11:12] <dave0> c has some stupid stuff but ctype sheesh
[16:11:44] <clarity> angelacrust: So one thing you must know by now is that you should never overflow a buffer.  If your buffer is 100 bytes, you pass 100 bytes for size, and the docs say fgets reads one less than size, you know it reads 99 bytes.  And you also know what NUL termination is; so one byte is added.  Thus a total of 100 bytes are stored.
[16:12:18] <clarity> Does that make sense?
[16:12:25] <angelacrust> It does make sense
[16:12:51] <dave0> you really need to use some error checking
[16:13:13] <dave0> if(sscanf(buff, "%d", &tt) != 1) { perror("bad number"); }
[16:13:21] <angelacrust> oh
[16:13:32] <angelacrust> yes, but the tt is always >= 2
[16:13:57] <angelacrust> nvm...
[16:14:13] <dave0> the 1 is how many format doodahs were read
[16:14:21] <angelacrust> yeah
[16:14:55] <dave0> if(fgets(buff, sizeof(buff), stdin) == 0) { perror("bad line"); }
[16:15:19] <angelacrust> hm
[16:15:38] <angelacrust> sizeof(buff) is 10002 (in this case)?
[16:15:50] <dave0> yeah whatever you made your array
[16:15:52] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (Quit: ZNC 1.8.2 - https://znc.in)
[16:16:02] <dave0> ,fgetsidiom
[16:16:07] <dave0> ,fgets.idiom
[16:16:08] <candide> fgets.idiom is while (fgets(line, sizeof line, stdin)) { /* process line */ }
[16:16:14] <dave0> ooh
[16:16:17] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[16:16:20] <angelacrust>  I'm saving all the advice I've received today in a notepad file
[16:16:27] <clarity> :)
[16:16:43] <dave0> ,info fgets.idiom
[16:16:43] <candide> fgets.idiom: Factoid submitted by prec for #c on Wed Jan 26 11:31:35 2005 [17y31d ago], referenced 23 times (last by dave0!~davezero@069.d.003.ncl.iprimus.net.au on Tue Feb 22 04:46:07 2022 [35s ago])
[16:16:55] <dave0> nice 17 years
[16:17:03] <angelacrust> dave0 should I also use error checking for really small programs?
[16:17:04] <dave0> as fresh as the day it was forged
[16:17:10] <dave0> angelacrust: of course
[16:17:25] <clarity> The answer depends on what the program is gor
[16:17:26] <clarity> for*
[16:17:28] <clarity> Not so much about its size
[16:17:44] <dave0> even if thy fingers become bloody from typing
[16:17:45] <angelacrust>  the test cases are already defined, so I need not implement error checking
[16:18:02] <clarity> You can certainly write throwaway programs that only consume input you control, under your watch.. rigorous error checking can be a waste of time in that case
[16:18:31] <clarity> The key is to know your footguns
[16:18:38] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:19:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[16:19:07] <dave0> if(foo) { perror("bar"); }   is in my muscle memory
[16:19:28] <angelacrust> yeah right
[16:20:00] *** Joins: Enitin (~Enitin@82.102.22.86)
[16:20:23] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[16:21:35] *** Joins: seninha (~chatzilla@user/seninha)
[16:22:02] <angelacrust> fgets reads `n - 1` chars, writes them and add the terminating `\0` at the end (n chars written so far).  Increase the size of the array by 1. and pass the same size, ie. `n` to fgets() because it is reading at max n chars, but writing n + 1 chars. Is that correct?
[16:24:07] <dave0> the 2nd argument to fgets is the size of your array ... it guarantees to write a \0 so that takes up one spot
[16:24:25] <dave0> it doesn't remove the \n so that takes up another spot
[16:24:41] <dave0> but the 2nd argument is always the size of your array
[16:24:44] <clarity> angelacrust: fgets writes no more than whatever you pass for size
[16:26:29] <dave0> you can add a different kind of checking...     if(fgets(buff, sizeof buff, stdin) == 0) { perror("fgets"); } if(strchr(buff, '\n') == 0) { perror("line too long"); }
[16:26:33] *** Quits: alphabeta (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[16:26:52] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[16:27:00] <dave0> ie. if there's no \n in the buffer, fgets truncated the line
[16:27:10] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[16:27:17] *** Quits: cart_ (~cart@185.191.86.4) (Quit: Konversation terminated!)
[16:27:20] <dave0> maybe   perror("truncated line");   is a better message
[16:27:39] *** Joins: cart_ (~cart@185.191.86.4)
[16:28:30] <dave0> it's definately a possibility, and it's a rather subtle bug, even in a 24 line program
[16:29:10] <angelacrust> Out of 10k chars, fgets() will read 9999 chars but I want it to write the remaining char as well, that's why I have to also pass `n + 1` to fgets()?  with `\0` - n chars written, + remaining char = n + 1 chars
[16:29:21] <dave0> increase the size of your array
[16:29:29] <dave0> always pass the size of your array to fgets
[16:30:13] <dave0> if you want to put a comment    char buff[10000+1+1]; /* plus one for \0, plus one for \n */
[16:30:40] <angelacrust> 10000 chars, 1 `\0`, and 1 `\n`
[16:30:50] <dave0> yep
[16:31:25] <angelacrust> So am I understanding it correctly then? "out of 10k chars..."
[16:32:09] <dave0> just use 20000
[16:32:13] <dave0> and forget about it
[16:32:22] <angelacrust> nope, that wouldn't be morally right...
[16:32:45] <angelacrust> I have to save some space too
[16:33:03] <rcf> It's perfectly fine, if you want immoral code you use gets()
[16:34:02] <angelacrust> :O
[16:35:04] <dave0> there's plenty of time to shave some bytes after your program is working correctly
[16:35:17] <angelacrust> it's working correctly at 10002
[16:35:21] <angelacrust> but not at 10001
[16:35:31] <angelacrust> and the given size in question is 10000
[16:35:53] <dave0> i hate the internet and i think it hates me back
[16:36:01] <angelacrust> ?
[16:36:06] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[16:36:10] *** Joins: monchi (~joints@143.198.92.132)
[16:36:26] <dave0> you're being obtuse and it's sucking the life from me
[16:36:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:36:49] <angelacrust> I'm sorry
[16:36:54] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 260 seconds)
[16:37:08] <angelacrust> I want to understand why it's not working at 10001
[16:37:20] *** Joins: Rynn (~rynn@216.30.158.198)
[16:37:44] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[16:39:07] *** Joins: aradesh (~aradesh@user/aradesh)
[16:39:49] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:41:18] <fizzie> What does your problem statement say, exactly?
[16:42:26] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[16:42:28] <fizzie> Because if it says your program needs to be able to process a line of 4 characters (for example, "abcd"), you need an array of 4+2 bytes ('a', 'b', 'c', 'd', '\n', '\0').
[16:42:45] <angelacrust> `For each string, print the even-indexed characters, followed by a space, followed by its odd-indexed characters.`
[16:42:45] <fizzie> Likewise, if it says you need to handle a 10000-character line, it needs a 10002-byte buffer.
[16:42:55] <fizzie> Yes, yes, but what does it say about the *size*?
[16:43:17] <angelacrust> `2 <= size <= 10000`
[16:44:13] <fizzie> Well, if that's supposed to be the length of the line (same as your `size` variable), there you go. 10000 characters *in* the line, plus a newline, plus a '\0'. 10002 in total.
[16:44:58] *** Joins: jjido (~Denis@94.4.149.217)
[16:46:03] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[16:46:10] <fizzie> If you use a buffer of size 10001, the call to fgets(buffer, 10001, stdin) will only be able to read the 10000 characters of the line, leaving the "\n" in the input stream. Then the *next* call to fgets will hit that newline and treat it as an empty line.
[16:46:23] <angelacrust> Ohh
[16:48:06] *** Quits: kurahaupo (~kurahaupo@pa49-182-7-84.pa.qld.optusnet.com.au) (Ping timeout: 260 seconds)
[16:48:08] <angelacrust> I understand it now
[16:48:11] *** Quits: kts (~kts@103.73.237.124) (Quit: Konversation terminated!)
[16:50:14] <angelacrust> Thanks to everyone who endured my stupidity
[16:51:28] *** Quits: zer0x (~zer0x@58.186.123.149) (Ping timeout: 272 seconds)
[16:54:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Remote host closed the connection)
[16:57:21] *** Quits: Livio (~livio@user/livio) (Ping timeout: 256 seconds)
[17:01:47] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:02:06] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:05:53] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[17:08:52] *** Quits: lisbeths (uid135845@id-135845.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:09:56] *** Quits: frost (~frost@user/frost) (Ping timeout: 245 seconds)
[17:13:05] *** Quits: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Remote host closed the connection)
[17:13:20] <clarity> meow.
[17:13:30] *** Joins: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b)
[17:15:01] *** Quits: zuplex (~zuplex@202.51.76.195) (Remote host closed the connection)
[17:15:53] *** Quits: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Read error: Connection reset by peer)
[17:16:00] *** Joins: beco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b)
[17:16:40] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:18:53] *** flooded is now known as _flood
[17:21:33] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[17:22:12] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[17:23:25] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:24:24] *** Quits: angelacrust (~angelacru@122.161.32.177) (Quit: Client closed)
[17:24:48] *** Joins: teepee (~teepee@openscad/teepee)
[17:28:38] *** Joins: SaltHillStroller (~SaltHillS@198-84-207-146.cpe.teksavvy.com)
[17:28:38] *** Joins: SaltHilStroller_ (~SaltHillS@198-84-207-146.cpe.teksavvy.com)
[17:28:53] *** Joins: Klinda (~superleag@user/klinda)
[17:32:06] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[17:35:57] *** Quits: SaltHillStroller (~SaltHillS@198-84-207-146.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[17:35:57] *** Quits: SaltHilStroller_ (~SaltHillS@198-84-207-146.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[17:36:13] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[17:36:13] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[17:41:19] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:42:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:46:08] *** Joins: komikat (~komikat@183.82.154.239)
[17:47:36] <the_lanetly_052> Hi, i do have void* mem =  malloc(1024); then I do mem = realloc(512); what will happen in this case? does allocator free half of mem?
[17:48:19] <CatButts> maybe, maybe not
[17:48:33] <CatButts> maybe it uses same memory page
[17:48:39] *** Joins: meator (~meator@user/meator)
[17:48:58] <CatButts> nothing can be assumed of the memory after reallocation size
[17:49:36] <CatButts> maybe it shoves something else after 512 in there
[17:50:02] <CatButts> or maybe not, if it works on whole memory pages
[17:50:17] <CatButts> probs 64kb
[17:51:00] <CatButts> allocator is runtime dependent
[17:51:16] <CatButts> gets compiled into exe
[17:51:32] <CatButts> if you use malloc/calloc
[17:51:47] <CatButts> or something like that
[17:52:00] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[17:52:14] *** Joins: meandrain (~meandrain@89.39.95.133)
[17:52:15] *** Joins: Sadale (~Sadale@user/sadale)
[17:53:24] <the_lanetly_052> I wonder that does this process cause memory leak?
[17:53:44] <CatButts> question unclear, please restate
[17:53:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:53:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:53:56] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:32] <the_lanetly_052> void* mem =  malloc(1024); mem = realloc(512); does this process cause memory leak ? for e.g malloc doesn't do free half(512 bytes) of 1024 bytes after realloc?
[17:55:18] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[17:55:37] <NRK> from your point of view, it's just a 512 byte buffer after the realloc
[17:55:47] <NRK> the other half has already been "freed"
[17:56:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[17:56:27] <the_lanetly_052> yes got it thanks for explanation NRK and CatButts
[17:56:39] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[17:56:50] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:57:00] <CatButts> there is no memory leak
[17:57:16] <the_lanetly_052> yes i understood thanks :)
[17:57:20] <CatButts> maybe there is memory fragmentation
[17:57:26] <CatButts> maybe not
[17:57:38] <CatButts> depends on malloc implementation!
[17:57:48] <NRK> the allocator may not actually free the memory, and reuse it when you ask for memory again.
[17:58:15] <NRK> but that's none of your concern, as far as correctness goes.
[17:58:26] *** Joins: Sadale (~Sadale@user/sadale)
[17:58:41] <Xgc> or the memory could be marked "available" and re-covered by the system at some point.. or reused by the application again.
[18:01:20] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:01:45] *** Quits: Sadale (~Sadale@user/sadale) (Client Quit)
[18:02:08] *** Quits: M-blaise (~M-blaise@105.112.138.38) (Quit: WeeChat 2.8)
[18:02:29] *** Joins: Sadale (~Sadale@user/sadale)
[18:03:35] *** Joins: aqua (~aqua@user/aqua)
[18:04:57] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[18:05:05] *** Quits: bzng (~bzng4@91-115-30-192.adsl.highway.telekom.at) (Quit: Leaving)
[18:05:55] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[18:06:55] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[18:06:56] *** aqua is now known as kish`
[18:07:32] *** Joins: pulse (~pulse@user/pulse)
[18:09:22] *** Quits: savolla (~quassel@95.10.204.117) (Ping timeout: 272 seconds)
[18:11:19] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:11:52] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[18:16:41] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[18:20:22] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[18:20:24] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[18:21:17] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[18:24:54] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[18:25:09] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:25:45] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[18:27:24] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 240 seconds)
[18:28:23] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.255)
[18:29:38] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[18:30:36] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Ping timeout: 240 seconds)
[18:31:07] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[18:32:23] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[18:32:47] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[18:34:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:35:48] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[18:36:56] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9) (Remote host closed the connection)
[18:37:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9)
[18:37:43] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[18:38:41] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[18:39:20] <the_lanetly_052_> I checked realloc and malloc with gdb - as we said malloc inserts old half of malloc to binlist: https://bpa.st/TNHA
[18:40:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[18:41:04] *** Joins: moog_ (~moog@107.77.244.141)
[18:41:55] <CatButts> is this optimisation or curiosity?
[18:42:26] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[18:42:42] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[18:43:36] *** Quits: moog (~moog@107.77.244.141) (Ping timeout: 256 seconds)
[18:43:44] <the_lanetly_052_> just a curiosity
[18:46:57] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Read error: Connection reset by peer)
[18:48:33] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 250 seconds)
[18:48:35] *** Quits: _wovixo_ (~wovixo@128.104.205.49) (Quit: Leaving)
[18:48:50] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:49:56] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 245 seconds)
[18:50:35] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:51:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[18:52:00] *** Joins: mahmutov (~mahmutov@37.155.93.183)
[18:55:12] *** Parts: pokhu (~rishi@103.206.114.112) ()
[18:55:34] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (Remote host closed the connection)
[18:56:00] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[18:58:26] *** Joins: meator (~meator@user/meator)
[19:00:54] *** Joins: fcresende_ (fcresende@fcresende.jujube.ircnow.org)
[19:01:10] *** Joins: Livio (~livio@user/livio)
[19:04:49] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[19:06:09] *** Joins: kts (~kts@103.73.237.103)
[19:06:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fde8:44d1:927a:3cf9)
[19:06:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fde8:44d1:927a:3cf9) (Changing host)
[19:06:32] *** Joins: skapata (~Skapata@user/skapata)
[19:10:31] *** Joins: paulo (paulo@user/paulo/x-9032687)
[19:10:45] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:10:45] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[19:11:51] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[19:12:09] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[19:12:43] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[19:14:02] *** Joins: crashrep (~crashrep@user/crashrep)
[19:16:59] *** Joins: seninha (~chatzilla@user/seninha)
[19:19:45] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[19:23:10] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[19:24:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:28:53] <SaltHillStroller> What happens when you call a C function in assembly? Is the compiler smart enough to not clobber the registers used in the assembly?
[19:29:11] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.255) (Ping timeout: 272 seconds)
[19:29:30] <CatButts> SaltHillStroller, calling convention happens
[19:29:41] <CatButts> no, it is not smart enough
[19:30:01] *** Quits: kts (~kts@103.73.237.103) (Quit: Konversation terminated!)
[19:30:06] <CatButts> if you call function of one convention, assuming another conventionn, you get borked stack
[19:30:29] *** Joins: kuber (~kuber@75-172-76-245.tukw.qwest.net)
[19:30:32] <CatButts> cdecl and stdcall are main two ones
[19:30:48] <CatButts> oh, assembly
[19:31:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[19:31:16] *** Quits: meandrain (~meandrain@89.39.95.133) (Ping timeout: 250 seconds)
[19:31:18] <CatButts> you have to follow convention in assembly too, on calling side
[19:31:28] <CatButts> if you call from assembly, into C
[19:31:37] <CatButts> and viceversa
[19:31:52] <SaltHillStroller> Interesting
[19:32:54] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:33:03] *** Quits: beco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Quit: Leaving)
[19:33:35] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[19:33:36] <CatButts> a bit more complicated, because you have to follow it manually
[19:33:55] <SaltHillStroller> Do you have a link to somewhere I could read about the details?
[19:34:42] <CatButts> https://en.wikipedia.org/wiki/Calling_convention#x86_(32-bit) probs here
[19:35:00] *** Joins: goodfella (~archer@user/tessio)
[19:35:16] <CatButts> parameter pushing order in stack and callee-vs-caller cleanup come to mind
[19:35:34] *** Quits: KevinX (~KevinX@user/KevinX) (Remote host closed the connection)
[19:36:20] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[19:36:23] *** MrMobius_ is now known as MrMobius
[19:36:36] <CatButts> also, which registers are available for clobbering on call(and which must be preserved), and which for return(typically EAX)
[19:37:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[19:37:16] <CatButts> https://en.wikipedia.org/wiki/X86_calling_conventions#List_of_x86_calling_conventions
[19:37:20] <CatButts> ah, better page
[19:38:17] <SaltHillStroller> CatButts: Thanks! I appreciate it
[19:42:48] <SaltHillStroller> CatButts: One thing I don't see details on is what the compiler will handle for me. I'm on ARM32 for reference. In my assembly, I call `bl func`. So that will presumably branch to the function address. But will the compiler have compiled by function to handle these calling convertions with regards to pushing the registers to the stack and such?
[19:43:32] <CatButts> oh, ARM
[19:43:47] <CatButts> derp
[19:43:49] <masoudd> you mean assembler?
[19:44:06] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:45:17] <SaltHillStroller> masoudd: I'm not sure? I would have thought the C function compiled to assembly by GCC
[19:45:38] <SaltHillStroller> CatButts: All good, I found the corresponding ARM wiki
[19:50:13] *** Joins: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b)
[19:51:48] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[19:52:53] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:55:58] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[19:56:06] *** Joins: jennie (~jennie@bras-base-wndson1290w-grc-11-184-148-17-161.dsl.bell.ca)
[19:56:07] *** Quits: jennie (~jennie@bras-base-wndson1290w-grc-11-184-148-17-161.dsl.bell.ca) (Changing host)
[19:56:07] *** Joins: jennie (~jennie@user/jennie)
[19:56:42] <rcf> SaltHillStroller: in some cases what the compiler will handle for you changes and breaks inline assembly as a result.
[19:56:47] * rcf glares at arm gcc
[19:57:25] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[19:57:38] <CatButts> then you have some bullshit about softfloat vs hardfloat
[19:58:08] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.63)
[19:58:43] <jennie> hi, I am trying to modify this 20 line program but I am running into issues, can someone tell me if its possible to do this in  or not  https://bpa.st/LZNQ
[19:58:43] <jennie> all i want to do is wiggle the mouse automatically every 5 minutes
[19:59:54] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[20:00:11] *** Joins: suss (~user@user/suss)
[20:00:14] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[20:00:17] <CatButts> ask in #winapi for winapi related stuff
[20:00:32] <SaltHillStroller> So I'm looking at this post: https://stackoverflow.com/questions/261419/what-registers-to-save-in-the-arm-c-calling-convention . Does that mean that for 32bit, I need to save everything marked callee-save registers?
[20:00:47] <SaltHillStroller> As they are potentially clobbered by the compiler?
[20:00:56] <masoudd> jennie, I don't think the cursor here is referring to mouse
[20:01:10] <rcf> SaltHillStroller: that is indeed what that means.
[20:01:23] <rcf> SaltHillStroller: wait no, the opposite
[20:01:25] <rcf> Never mind.
[20:01:46] <SaltHillStroller> rcf: Haha. Ok. In that case, I need to ensure r0, r1, etc are saved.
[20:02:10] <rcf> Anything marked callee-saved will not be clobbered. You are the caller.
[20:03:40] *** Quits: ka80 (~ka80@user/ka80) (Quit: Leaving)
[20:04:18] <SaltHillStroller> rcf: Okay. Curious though, if I'm calling a function that does not take in parameters, would it be safe to assume R0/R1 would not be clobbered?
[20:05:09] <rcf> IF you really want fun, though, you go for x86 Windows, where there are multiple calling conventions in common use even within the same codebases.
[20:05:59] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[20:06:28] <rcf> If they are not designated as callee saved, you can't assume that
[20:08:49] *** Joins: magla (~gelignite@55d4d6c3.access.ecotel.net)
[20:19:33] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:20:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[20:20:26] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[20:23:41] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[20:23:55] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[20:24:22] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[20:25:55] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[20:27:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[20:28:11] *** Quits: suss (~user@user/suss) (Remote host closed the connection)
[20:28:31] *** Joins: suss (~user@user/suss)
[20:29:34] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[20:31:13] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:44f1:f0bc:ff4d:4e0) (Quit: fe23)
[20:32:03] *** Joins: stblaha (~stblaha@user/stblaha)
[20:32:03] *** Quits: stblaha (~stblaha@user/stblaha) (Client Quit)
[20:32:09] *** Joins: stblaha_ (~stblaha@user/stblaha)
[20:37:22] *** Quits: stblaha_ (~stblaha@user/stblaha) (Quit: leaving)
[20:38:03] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[20:40:31] *** Joins: seninha (~chatzilla@user/seninha)
[20:41:25] *** Joins: CATS (~apic@brezn2.muc.ccc.de)
[20:42:14] *** Quits: kuber (~kuber@75-172-76-245.tukw.qwest.net) (Quit: leaving)
[20:42:38] *** CatButts is now known as BUTTS
[20:43:05] *** Quits: suss (~user@user/suss) (Remote host closed the connection)
[20:43:18] *** Joins: suss (~user@user/suss)
[20:43:28] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[20:45:48] *** Quits: X-Scale (~ARM@46.50.1.149) (Ping timeout: 272 seconds)
[20:45:49] *** X-Scale` is now known as X-Scale
[20:47:39] *** Joins: KevinX (~KevinX@user/KevinX)
[20:49:50] *** Quits: mweckbecker (~matthias@weckbecker.name) (Ping timeout: 260 seconds)
[20:50:01] *** Joins: System_Error (~SystemErr@user/systemerror)
[20:50:10] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[20:52:04] *** Joins: malloy (~jimery@116.30.220.175)
[20:53:28] *** Joins: cadmio (~cadmio@151.57.102.26)
[20:53:30] <cadmio> HEllo
[20:53:35] <sham1> Hello
[20:53:38] <BUTTS> uhllo
[20:54:01] <cadmio> How can I get the basis name of "/home/user/file.c" I need only file.c
[20:54:05] <cadmio> also with glib functions
[20:55:03] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (Quit: ZNC 1.8.2 - https://znc.in)
[20:55:04] <sham1> IIRC glib does have its own version of basename
[20:55:13] <sham1> Which is what you need for this
[20:56:16] <cadmio> I know this g_file_get_basename (file);
[20:56:27] *** Joins: mweckbecker (~matthias@weckbecker.name)
[20:56:31] <cadmio> but it applies to a GFile; but here I've a char
[20:56:59] <pragma-> you could just strrchr for '/'
[20:57:02] <sham1> "/home/user/file.c" isn't a char
[20:57:20] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 256 seconds)
[20:57:24] *** Joins: elves-upstate (~elves-ups@129-2-180-37.wireless.umd.edu)
[20:57:41] <cadmio> I've a char *filename
[20:58:35] <sham1> Well you could create a GFile based on that and then use g_file_get_basename
[20:58:44] *** Quits: joev (~joev@user/joev) (Ping timeout: 252 seconds)
[20:59:01] *** Quits: elves-upstate (~elves-ups@129-2-180-37.wireless.umd.edu) (Client Quit)
[20:59:14] *** Quits: Matt|home (~matt@adsl-74-233-58-148.mia.bellsouth.net) (Killed (NickServ (GHOST command used by matt|lib!~matt|lib@12.188.116.55)))
[20:59:35] <supakeen> g_file_new_for_path(...)
[20:59:39] *** Joins: joev (~joev@user/joev)
[20:59:48] *** Joins: matt_ (~matt@adsl-74-233-58-148.mia.bellsouth.net)
[21:00:03] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a)
[21:00:06] <cadmio> interesting that could also solve a problem of mine of saving a file asynchronously
[21:00:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:02:06] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[21:02:40] *** Joins: oxymoron93 (~oxymoron9@212.62.38.106)
[21:03:02] <masoudd> https://docs.gtk.org/glib/func.path_get_basename.html
[21:03:03] <oxymoron93> ,prec (int)(a->b)[0]
[21:03:04] <candide> oxymoron93: (int) ((a->b)[0])
[21:03:11] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[21:03:27] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[21:04:30] *** Quits: oxymoron93 (~oxymoron9@212.62.38.106) (Client Quit)
[21:08:03] <cadmio> masoudd: thanks, exaclty that
[21:08:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[21:08:36] <nitrix> ,cc const char *basename(const char *filepath) { const char *location = strrchr(filepath, '/'); return location ? location + 1 : filepath; } printf("%s", basename("/home/user/file.c"));
[21:08:38] <candide> nitrix: file.c
[21:08:50] <nitrix> ,cc const char *basename(const char *filepath) { const char *location = strrchr(filepath, '/'); return location ? location + 1 : filepath; } printf("%s", basename("file.c"));
[21:08:52] <candide> nitrix: file.c
[21:09:16] <masoudd> nitrix, what if the path is c:\User\Desktop\file.c
[21:11:14] <nitrix> Then the output will be c:\User\Desktop\file.c
[21:12:19] <cadmio> it's not working for me
[21:13:51] <masoudd> what if it has any unicode in this format: u+xx2F
[21:14:26] <masoudd> So no ȯ in filenames for example?
[21:14:50] <ioxzev1z> I don't think '/' will fail with unicode
[21:15:07] <nitrix> You're answering your own questions.
[21:15:26] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[21:16:33] <masoudd> ,cc char *s = "Я"; while (*s) { putchar(s++);}
[21:16:34] <candide> masoudd: [warning: passing argument 1 of 'putchar' makes integer from pointer without a cast [-Wint-conversion] note: expected 'int' but argument is of type 'char *'] illegal backslash escape sequence in string, at character offset 30 (before "\\303\\220\\302\\257...") at /usr/local/bin/guest-gdb line 147, <GEN1> line 50.
[21:16:48] <pragma-> hmm
[21:16:53] <masoudd> ,cc char *s = "Я"; while (*s) { putchar(*s); s++;}
[21:16:55] <candide> masoudd: illegal backslash escape sequence in string, at character offset 30 (before "\\303\\220\\302\\257...") at /usr/local/bin/guest-gdb line 147, <GEN1> line 50.
[21:17:04] <masoudd> omg you get the idea
[21:17:23] <sham1> What I'm wondering is why is it escaping
[21:17:51] <masoudd> don't know what is the locale on candide's environment
[21:17:58] <sham1> ,cc #include<uchar.h> char8_t *s = u8"Я"; while(*s) { putchar(*s++;); }
[21:17:59] <candide> sham1: error: unknown type name 'char8_t'; did you mean 'wchar_t'?
[21:18:34] <pragma-> https://github.com/pragma-/pbot/blob/master/applets/pbot-vm/guest/bin/guest-gdb#L147
[21:18:35] <sham1> Oh, it actually is char
[21:18:38] <sham1> ,cc #include<uchar.h> char *s = u8"Я"; while(*s) { putchar(*s++;); }
[21:18:39] <candide> sham1: error: expected ')' before ';' token
[21:18:45] <sham1> ,cc #include<uchar.h> char *s = u8"Я"; while(*s) { putchar(*s++); }
[21:18:46] <candide> sham1: illegal backslash escape sequence in string, at character offset 31 (before "\\303\\220\\302\\257...") at /usr/local/bin/guest-gdb line 147, <GEN1> line 22.
[21:18:57] <pragma-> The json library does not like the backwards R or something.
[21:19:12] * pragma- shall investigate later.
[21:19:16] <sham1> It's a shite JSON library if it chokes on a UTF-8 coded codepoint
[21:19:22] <pragma-> indeed
[21:19:39] <pragma-> Maybe I forgot to make it unicode or something, somewhere.
[21:19:45] <sham1> Considering that JSON requires UTF-8 support, that's unforgivable
[21:20:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-029-040.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:23:14] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[21:25:07] *** Joins: phrix (~phrix@185.76.176.45)
[21:26:43] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[21:27:26] *** matt_ is now known as matt|home
[21:28:33] *** Quits: arcadiancomp (~anon626@96-91-245-193-static.hfc.comcastbusiness.net) (Quit: Leaving)
[21:28:34] *** Quits: cadmio (~cadmio@151.57.102.26) (Read error: Connection reset by peer)
[21:29:00] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.63) (Ping timeout: 240 seconds)
[21:29:07] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[21:33:02] <masoudd> ,cc puts((char[]){0xd0, 0xaf, 0});
[21:33:04] <candide> masoudd: [warning: overflow in conversion from 'int' to 'char' changes value from '208' to '-48' [-Woverflow]  warning: overflow in conversion from 'int' to 'char' changes value from '175' to '-81' [-Woverflow]] Я
[21:33:10] *** Joins: cadmio (~cadmio@151.37.117.149)
[21:33:35] *** Joins: tiotags (~tiotags@user/tiotags)
[21:33:36] <masoudd> it can output utf-8
[21:34:34] *** Quits: cart_ (~cart@185.191.86.4) (Ping timeout: 272 seconds)
[21:35:59] <fizzie> pragma-: Entirely unrelated to that, but there's nowadays a weirdo `Languages::c11=HASH(0x5561c0429e98)` at the start of pasted things.
[21:36:01] <fizzie> ,cc -paste puts("hello");
[21:36:04] <candide> fizzie: https://0x0.st/oKAY.txt
[21:36:15] <pragma-> true, I noticed that too. I've been too lazy to fix it. I'll take care of that too.
[21:37:19] <pragma-> I completely rewrote most of the pbot-vm scripts recently.
[21:37:26] <pragma-> Guess I was a tad sloppy. :)
[21:37:31] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[21:37:47] *** Quits: cadmio (~cadmio@151.37.117.149) (Client Quit)
[21:38:21] <nitrix> pragma-, Where's JIRA when we need to log regression bugs. How many story points?
[21:39:58] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[21:40:02] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[21:40:31] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Quit: Thanks)
[21:40:34] <nitrix> Gosh that felt horrible to write.
[21:40:47] *** Joins: NEYi (~NEYi@109.251.216.38)
[21:41:16] <masoudd> I just realized no utf-8 character other than '/' has 0x2f in its entire encoding.
[21:42:23] <LeoNerd> Indeed; the way UTF-8 works means that you never get "false matches" of a valid string, within another
[21:42:38] <System_Error> masoudd: maybe its why linux fs can swallow "arbitrary" UTF8 as they can swallow anything except NULL (0x0) and slash in name.
[21:42:41] <ChoHag> No valid ASCII character will be.
[21:43:37] <masoudd> yeah. utf-16 though will have 0x2f in it. Я does in utf-16
[21:43:45] *** Joins: Akuli (~Akuli@82-203-160-215.bb.dnainternet.fi)
[21:44:05] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[21:44:39] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:44:58] *** Joins: joev (~joev@user/joev)
[21:47:32] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[21:47:55] <ChoHag> What kinds of pointer is an intptr_t capable and incapable of casting to/from?
[21:47:59] *** Joins: Akiva (~Akiva@user/Akiva)
[21:49:02] <nitrix> Any pointer to void.
[21:49:28] <ChoHag> Does that include all data pointers?
[21:49:46] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 272 seconds)
[21:49:46] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 272 seconds)
[21:49:47] <nitrix> Sure, but they have to be converted to a `void *` before hand.
[21:50:21] <nitrix> The gotcha is that your implementation may not have a intptr_t or uintptr_t, they're optional.
[21:50:28] <ChoHag> ffs.
[21:51:03] <ChoHag> Well at least I'd be able to define it if it ever came up.
[21:51:28] *** Joins: analognoise (~analognoi@185.202.221.26)
[21:52:16] *** Joins: inlight (~n0ise@user/inlight)
[21:52:26] <fizzie> It's maybe a little obvious, but just for the record, you also have to start from a valid `void *`. You can't start from an arbitrary `intptr_t` integer value, and expect to be able to convert it to `void *` and back. (People sometimes try to do that to smuggle integer values via APIs that have a `void *userdata`.)
[21:52:47] <ioxzev1z> Just curious but I assumed all pointer sizes were the same on a platform, any example of two pointer types of different sizes on something like x86 ?
[21:52:50] <ChoHag> Code/function pointers aside, can an intptr_t theoretically be defined on those which *could* be cast to/from any void*?
[21:53:08] <ChoHag> fizzie: Yes I'm only going from pointer to storage and back.
[21:53:40] <ChoHag> OK yeah I'm doing that but only on one place because I was too lazy to define a better interface.
[21:54:08] <fizzie> ioxzev1z: Does x86-16 go? Because a lot of MS-DOS compilers supported various memory models, some of which (medium & compact) had sizeof (void *) != sizeof (void (*)(void)).
[21:54:10] <ChoHag> And actually it's a pointer-which-is-being-treated-as-an-integer anyway.
[21:54:17] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:54:22] <fizzie> s/go/count/, where did that "go" come from?
[21:54:36] *** Joins: ckdCreations (~ckdCreati@147.55.130.38)
[21:55:04] <ioxzev1z> fizzie, just curious, the memory is an array of cells, no? So any indexing to any cell should theoretically be the same size
[21:55:04] <ChoHag> Pike attack!
[21:55:29] *** Joins: skapata (~Skapata@user/skapata)
[21:55:47] <ChoHag> ioxzev1z: Usually, these days, yes.
[21:56:06] <ioxzev1z> I get that ++ on int * is a bigger step than char *, for example
[21:56:20] <ChoHag> Although pointer *arithmetic* works as though pointers point to cells of varying size.
[21:56:23] <ioxzev1z> But int * and char * should both be the same size with regard to the value they hold
[21:56:55] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[21:56:56] <ChoHag> That is an int* and a char* will both point to a byte but incrementing such a pointer will not increment each by 1.
[21:56:58] <fizzie> Well, in the x86-16 case, it's a segmented memory architecture. You can have "near" (offset) and "far" (segment + offset) pointers, and in the compact / medium memory models, you have multiple segments of one type (code/data) but only one of the other, so data pointers have a different size than object pointers.
[21:57:04] <ChoHag> Also, FSVO "will".
[21:57:58] <ChoHag> ioxzev1z: Consider that function pointers, conceptually at least, encode their argument and return signatures.
[21:58:10] <fizzie> As for `int *` and `char *`, the conventional hypothetical for why *those* two might be different is an architecture where memory is addressed in larger-than-byte units, and therefore `int *` just needs an address, but `char *` needs both an address and an offset within a word.
[21:58:42] <ChoHag> It's in theory "impossible" to case a void(*)(void) to a void(*)(int) --- the notion simply makes no sense.
[21:58:48] <ChoHag> cast
[21:58:49] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[21:59:16] *** Quits: goodfella (~archer@user/tessio) (Ping timeout: 272 seconds)
[21:59:17] <fizzie> Uh... it's in fact entirely *allowed* to cast `void(*)(void)` to `void(*)(int)`, as long as you cast it back to the right type again before calling.
[21:59:30] <ChoHag> It's "just so happens" that the actual numeric value at runtime on common architectures of all pointer types is the same size.
[21:59:56] <ChoHag> Right but that's dragons territory.
[22:00:32] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[22:00:34] <ChoHag> fizzie: Is it still possible with, say, differring numbers of arguments?
[22:00:39] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[22:00:39] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[22:00:41] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:00:41] <ChoHag> differing
[22:00:42] <fizzie> Yes.
[22:00:45] <fizzie> C11 6.3.2.3p8: "A pointer to a function of one type may be converted to a pointer to a function of another type and back again; the result shall compare equal to the original pointer."
[22:01:44] <ChoHag> Hmm so they've somehow managed to require that all "function pointers" fit within the same size?
[22:02:08] *** Quits: magla (~gelignite@55d4d6c3.access.ecotel.net) (Read error: Connection reset by peer)
[22:02:27] *** Joins: magla (~gelignite@55d4d6c3.access.ecotel.net)
[22:02:40] <sham1> Well unlike with data pointers, I don't see any reason why function pointers would need to be different sizes
[22:02:57] <sham1> Considering that all you can do with them is call them
[22:03:29] *** Joins: meator (~meator@user/meator)
[22:03:32] <ChoHag> Well at compile time at least the function signatures matter.
[22:04:09] <ChoHag> You can tell I've not looked into the details...
[22:05:59] *** Joins: circd (~TODO@142.167.143.188)
[22:06:12] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[22:06:12] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[22:06:14] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 272 seconds)
[22:06:24] *** Quits: circd (~TODO@142.167.143.188) (Remote host closed the connection)
[22:06:34] <ChoHag> Oh no it's not a pointer that ends up being cast to a void*. It was but I had to change the interface.
[22:06:55] <fizzie> There's also some more obscure examples at http://c-faq.com/null/machexamp.html "Seriously, have any actual machines really used nonzero null pointers, or different representations for pointers to different types?" (More of the former, but also a few of the latter.)
[22:07:00] <ChoHag> Bah I was hoping I could add a "nothing to see here" comment. Instead it has to be "TODO" :(
[22:09:04] <fizzie> Oh, and in the DSP/embedded case there's often different memory regions of different sizes, and as a result possibly different-sized pointers, but I think those tend to get handled via nonstandard extensions (like additional qualifiers), since it's usually not the case that you'd want to segregate them by type (other than perhaps on the data vs. code level).
[22:10:21] <fizzie> I feel like there was a TR on trying to standardize that.
[22:11:44] *** Joins: crashrep (~crashrep@user/crashrep)
[22:12:00] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[22:12:02] <fizzie> Right, http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1169.pdf aka ISO/IEC TR 18037, "Programming languages - C - Extensions to support embedded processors". Named address spaces, specifically. But that's not "regular" C.
[22:12:02] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[22:12:40] *** Joins: vysn (~vysn@user/vysn)
[22:17:25] *** Quits: mahmutov (~mahmutov@37.155.93.183) (Ping timeout: 250 seconds)
[22:17:31] *** Quits: inlight (~n0ise@user/inlight) (Remote host closed the connection)
[22:17:33] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:19:46] *** Joins: X-Scale` (~ARM@83.223.225.19)
[22:19:58] *** Joins: inlight (~n0ise@user/inlight)
[22:22:04] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[22:22:05] *** X-Scale` is now known as X-Scale
[22:23:01] *** Joins: suss` (~user@user/suss)
[22:23:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:307c:c02a:5304:58a9) (Quit: Quit)
[22:25:14] *** Quits: suss (~user@user/suss) (Ping timeout: 272 seconds)
[22:28:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:436f:e6b2:c8c4:a5a1) (Ping timeout: 240 seconds)
[22:31:31] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:fb55:f4b:9349:d06d)
[22:32:11] <rcf> The real mode x86 near/far distinction comes to mind.
[22:33:15] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[22:35:36] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[22:36:54] *** Joins: cart_ (~cart@2a00:23c7:9990:d701:10e8:8cb7:3f73:acde)
[22:39:03] *** Joins: strajder (~strajder@user/strajder)
[22:42:46] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[22:44:58] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[22:45:03] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:05] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[22:45:57] *** Joins: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com)
[22:47:30] *** Joins: vicfred (~vicfred@user/vicfred)
[22:48:25] *** Joins: Betal (~Betal@user/betal)
[22:49:18] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 272 seconds)
[22:50:01] *** Joins: seninha (~chatzilla@user/seninha)
[22:50:54] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Remote host closed the connection)
[22:57:09] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:59:48] *** Quits: inlight (~n0ise@user/inlight) (Ping timeout: 240 seconds)
[23:01:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:01:57] *** Joins: inlight (~n0ise@user/inlight)
[23:02:34] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[23:03:17] *** Joins: joev (~joev@user/joev)
[23:03:56] *** Quits: inlight (~n0ise@user/inlight) (Client Quit)
[23:04:52] *** Joins: crashrep (~crashrep@user/crashrep)
[23:05:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:05:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:05:26] *** Joins: wroathe (~wroathe@user/wroathe)
[23:07:01] *** imm__ is now known as imm_
[23:10:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[23:10:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:13:54] *** Quits: nkiz (~nki@adsl-89-217-141-227.adslplus.ch) (Ping timeout: 256 seconds)
[23:14:02] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:14:28] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[23:15:14] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:15:19] *** Joins: nkiz (~nki@adsl-89-217-141-227.adslplus.ch)
[23:15:46] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:16:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:16:31] *** Lord_of_Life_ is now known as Lord_of_Life
[23:19:34] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:21:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:26:18] *** Joins: crashrep (~crashrep@user/crashrep)
[23:26:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:28:59] *** Joins: System_Error (~SystemErr@user/systemerror)
[23:29:22] <gtlsgamr> Is there a way to get more info on why a segmentation fault occurs?
[23:29:27] <xel> anybody have any tips on how to properly optimize libpcap?
[23:30:01] <xel> Currently trying to read and do operations on every packet system-wide (not network wide), using the callbacks and using a bit too much CPU for my liking
[23:31:31] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[23:31:52] *** Joins: Charadon (~Charadon@155.138.164.183)
[23:32:36] *** Quits: Livio (~livio@user/livio) (Ping timeout: 256 seconds)
[23:33:03] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:35:03] *** Joins: Viewday11 (~Viewday@user/viewday)
[23:36:32] <NRK> gtlsgamr: `-fsanitize=address`
[23:36:36] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:39:17] *** Joins: mahmutov (~mahmutov@37.155.63.68)
[23:40:26] *** Joins: Livio (~livio@user/livio)
[23:41:00] <nightstrike> If I declare a function as static, is it correct to say that I should not include 'static' when defining it?
[23:44:20] <sham1> You should add a `static` in both places, if for no other reason than clarity
[23:44:24] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[23:44:28] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[23:44:30] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 256 seconds)
[23:45:43] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[23:46:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[23:47:29] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[23:47:32] <Dean> hello
[23:47:47] <sham1> hello
[23:47:50] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[23:50:16] *** Joins: skapata (~Skapata@user/skapata)
[23:51:10] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[23:52:39] <pragma-> esselfe: tabarnak
[23:55:45] <nitrix> nightstrike, There's also the possibility of re-organizing the ordering of the functions such that the static ones appear before the regular ones.
[23:55:49] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220219201334])
[23:56:13] <nitrix> I usually only write declarations in .h files when I intention functions to be "public".
[23:56:29] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[23:56:50] *** Quits: alex11 (~alex11@user/alex11) (Remote host closed the connection)
[23:56:56] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[23:57:00] *** Quits: cart_ (~cart@2a00:23c7:9990:d701:10e8:8cb7:3f73:acde) (Quit: Konversation terminated!)
[23:57:46] <nitrix> I also try very hard to not have mutually dependent structs or functions that would force me to add declarations.
[23:58:26] *** Quits: noobiewan (~noobiewan@bras-base-blolpq2201w-grc-32-74-15-106-102.dsl.bell.ca) (Remote host closed the connection)
