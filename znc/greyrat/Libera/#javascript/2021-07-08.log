[00:00:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[00:01:25] *** Gustavo6046_ is now known as Gustavo6046
[00:02:29] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 252 seconds)
[00:03:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:06:43] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[00:08:42] *** Quits: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl) (Ping timeout: 252 seconds)
[00:10:28] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:11:13] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Client Quit)
[00:11:17] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 252 seconds)
[00:14:40] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[00:15:59] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[00:16:12] *** Joins: wyclif (~wyclif@user/wyclif)
[00:20:35] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 256 seconds)
[00:21:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[00:24:52] *** Joins: epolanski (uid312403@id-312403.brockwell.irccloud.com)
[00:25:01] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[00:26:01] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[00:29:28] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 246 seconds)
[00:31:46] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 240 seconds)
[00:33:02] *** Joins: wyclif (~wyclif@user/wyclif)
[00:33:49] *** Joins: sillyslux__ (~silly@user/silly)
[00:34:10] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[00:37:35] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 252 seconds)
[00:38:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:38:34] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 240 seconds)
[00:43:18] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[00:48:02] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 252 seconds)
[00:51:03] *** Joins: wyclif (~wyclif@user/wyclif)
[00:52:21] * ThePendulum is undefined
[00:52:26] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[00:52:52] <GreenJello> mood
[00:56:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:56:46] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 246 seconds)
[01:01:22] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[01:01:59] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[01:03:43] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[01:05:27] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[01:06:52] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 268 seconds)
[01:08:19] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:444f:6ca0:74ed:49ab:e02d) (Ping timeout: 246 seconds)
[01:09:00] *** Joins: wyclif (~wyclif@user/wyclif)
[01:11:08] *** Quits: gggkmp (~gggkmp@114.245.111.21) (Ping timeout: 252 seconds)
[01:11:19] *** Joins: gggkmp (~gggkmp@60.10.23.164)
[01:14:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[01:15:15] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[01:15:46] *** Quits: KevinX (~KevinX@94.140.11.16) (Ping timeout: 240 seconds)
[01:16:44] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[01:18:59] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[01:19:54] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[01:23:33] *** Joins: wyclif (~wyclif@user/wyclif)
[01:29:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[01:32:43] *** Joins: fkm (~fkm@user/fkm)
[01:34:37] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[01:37:42] *** Quits: gggkmp (~gggkmp@60.10.23.164) (Ping timeout: 268 seconds)
[01:38:56] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 268 seconds)
[01:38:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[01:39:33] *** Quits: tfe (~tfe@213.195.125.255) (Remote host closed the connection)
[01:41:17] *** Joins: wyclif (~wyclif@user/wyclif)
[01:46:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[01:47:26] *** Quits: chonkbit (~chonkbit@2600:1700:2150:1d40:86c5:a6ff:fe3b:ae7a) (Ping timeout: 252 seconds)
[01:48:43] *** Joins: wyclif (~wyclif@user/wyclif)
[01:49:21] *** Joins: iffraff (~quassel@136.49.178.170)
[01:51:42] * stenno is nullish
[01:51:50] <ThePendulum> ??
[01:51:59] <stenno> ?.
[01:53:17] *** Joins: silly_ (~silly@user/silly)
[01:53:49] *** Quits: Harlin (~DonQixote@216.80.0.10) (Remote host closed the connection)
[01:53:50] <naeluh> hey does anyone know how to speed up vagrant on a mac ?
[01:53:52] <naeluh> hahaa
[01:53:59] <naeluh> mine is soooo slow
[01:56:29] *** Joins: Celeo (~Celeo@user/celeo)
[01:56:40] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:56:47] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 252 seconds)
[01:57:06] <cthulchu> local storage. Does it depend on TLD like cookies do?
[01:58:28] <cthulchu> can I touch a local storage item that was set on a different domain? By a different piece of code?
[01:59:13] <entuland_> not only it depends on the domain, it also depends on the protocol
[01:59:18] <entuland_> https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage
[01:59:22] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[02:01:14] *** entuland_ is now known as entuland
[02:01:37] <entuland> you're definitely not supposed to be able to touch the localstorage associated to a different domain
[02:02:48] <stenno> i found that the use cases for localstorage are surprisingly few
[02:05:34] <entuland> aye, very specific cases
[02:10:53] <systemfault> If you want to store a "little" then cookies are enough... if you want to store a lot then localStorage is bad because it's sync...
[02:11:06] <systemfault> So, it's not that great for anything...
[02:11:37] <l__q> Do have firebase a limit of dailt queries?
[02:11:54] <l__q> In free plan
[02:12:10] <stenno> l__q: this channel is about javascript
[02:12:34] <l__q> sorry
[02:13:33] <stenno> this is a question you can just ask google like that
[02:16:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:16:41] *** Quits: Lope (~lope@user/lope) (Ping timeout: 252 seconds)
[02:23:00] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[02:23:47] *** Joins: austincheney (~austinche@2600:1700:1220:76c8:e56a:ef77:ddf7:7aa)
[02:24:00] *** Quits: happymeal (~happymeal@user/happymeal) (Read error: Connection reset by peer)
[02:26:02] *** Quits: federico_it (~textual@151.51.82.235) (Quit: Textual IRC Client: www.textualapp.com)
[02:26:49] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:444f:3014:2dfe:6fe7:46ad)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:27] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:50] *** Joins: zebrag (~chris@user/zebrag)
[02:34:03] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[02:35:57] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:36:03] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:37:14] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[02:38:33] *** Joins: gggpkm (~gggpkm@221.219.77.87)
[02:39:07] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[02:40:20] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[02:40:22] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 246 seconds)
[02:40:34] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[02:40:52] *** Quits: Treefingers (~Glassbox@103.162.189.80.dyn.plus.net) (Quit: Leaving)
[02:40:53] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[02:40:56] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[02:42:11] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[02:42:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[02:44:31] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[02:44:35] *** Quits: nepeat (~nepeat@79.110.170.62) (Read error: Connection reset by peer)
[02:44:38] *** Quits: Ziyan (~ziyan@112.134.170.234) (Ping timeout: 252 seconds)
[02:45:21] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[02:46:19] *** Joins: nepeat (~nepeat@79.110.170.62)
[02:46:23] *** Joins: Ziyan (~ziyan@112.134.171.17)
[02:46:41] *** Joins: irthewinner (~null@bzq-79-180-153-70.red.bezeqint.net)
[02:59:14] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:444f:3014:2dfe:6fe7:46ad) (Quit: Leaving)
[03:00:11] *** Quits: Celeo (~Celeo@user/celeo) (Read error: Connection reset by peer)
[03:04:32] *** Joins: wyclif (~wyclif@user/wyclif)
[03:07:03] *** Joins: dibber (~altdev@c-73-14-187-235.hsd1.co.comcast.net)
[03:08:06] *** Quits: gde33 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[03:09:02] *** Joins: Lope (~lope@user/lope)
[03:09:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:13:04] *** Joins: Black (~Benett@2a03:4000:1a:7aa::2)
[03:13:17] *** Quits: Benett (~Benett@xnetx.de) (Ping timeout: 268 seconds)
[03:13:53] *** Quits: Lope (~lope@user/lope) (Ping timeout: 252 seconds)
[03:18:49] *** Joins: sillyslux__ (~silly@user/silly)
[03:22:35] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 265 seconds)
[03:22:58] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[03:23:18] *** Joins: silly_ (~silly@user/silly)
[03:23:42] *** Joins: wyclif (~wyclif@user/wyclif)
[03:24:30] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[03:26:59] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 252 seconds)
[03:27:22] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[03:27:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:28:08] *** Quits: Ziyan (~ziyan@112.134.171.17) (Quit: Textual IRC Client: www.textualapp.com)
[03:28:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[03:31:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:41:22] *** Joins: wyclif (~wyclif@user/wyclif)
[03:42:53] *** Joins: Atum__ (~IRC@user/atum/x-2392232)
[03:43:01] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Ping timeout: 246 seconds)
[03:44:03] *** Joins: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl)
[03:46:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:46:53] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 252 seconds)
[03:47:02] <austincheney> this is the most quiet I have ever seen the channel
[03:48:31] <wroathe> austincheney: And you ruined it
[03:48:34] <wroathe> austincheney: Nice work
[03:49:15] <austincheney> boo
[03:55:40] *** Quits: tnsi (~tnsi@024-247-183-183.res.spectrum.com) (Ping timeout: 252 seconds)
[03:59:23] *** Joins: wyclif (~wyclif@user/wyclif)
[04:02:44] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 252 seconds)
[04:04:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:05:24] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[04:06:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:07:35] *** Quits: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:09:56] *** Joins: Jigsy (~Jigsy@user/jigsy)
[04:10:43] *** Joins: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl)
[04:11:47] *** Joins: gggpkm_ (~gggpkm@221.219.70.176)
[04:14:11] *** Quits: gggpkm (~gggpkm@221.219.77.87) (Ping timeout: 258 seconds)
[04:14:17] *** Joins: onosendi (~onosendi@user/onosendi)
[04:15:22] *** Quits: irthewinner (~null@bzq-79-180-153-70.red.bezeqint.net) (Ping timeout: 240 seconds)
[04:17:48] *** Joins: wyclif (~wyclif@user/wyclif)
[04:19:56] *** Joins: sillyslux__ (~silly@user/silly)
[04:22:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[04:23:16] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 246 seconds)
[04:27:09] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[04:27:22] *** Quits: incognito (~relativit@user/incognito) (Ping timeout: 240 seconds)
[04:29:37] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[04:29:41] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Ping timeout: 252 seconds)
[04:34:22] *** Joins: mtr (~mtr@136-24-229-190.cab.webpass.net)
[04:34:32] *** Joins: wyclif (~wyclif@user/wyclif)
[04:38:07] <bambanxx> what is the god of the objects on browser?
[04:38:10] <bambanxx> window?
[04:39:15] <GreenJello> what a strange question
[04:39:21] <bambanxx> hehe
[04:39:22] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[04:39:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[04:39:37] <bambanxx> i mean the top father object
[04:39:43] <robertmaxrees> bambanxx you mean the global object?
[04:39:45] <bambanxx> the very top
[04:39:48] <bambanxx> yeah
[04:39:54] <sheetjs> austincheney: welcome to the future
[04:40:08] <robertmaxrees> bambanxx https://developer.mozilla.org/en-US/docs/Web/API/Window
[04:40:24] <bambanxx> root is not an object of js?
[04:40:48] <robertmaxrees> ??
[04:41:11] <robertmaxrees> bambanxx are you talking node or in browsers?
[04:41:25] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[04:41:27] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[04:41:37] <bambanxx> i see on css they put body or root sometimes, those are objects of js browsers?
[04:41:50] <robertmaxrees> css and js are two different things.
[04:41:54] <bambanxx> i know
[04:42:08] <bambanxx> but try to understand my questions is not easy for me write on english
[04:42:10] <robertmaxrees> :root is a psuedo-class.
[04:42:14] <bambanxx> ok
[04:42:18] <bambanxx> thanks you
[04:42:19] <robertmaxrees> https://developer.mozilla.org/en-US/docs/Web/CSS/:root
[04:47:22] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8037:4ed1:bab8:2916) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:50:33] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 265 seconds)
[04:50:46] *** Joins: trufas (~trufas@177.240.218.218)
[04:50:52] *** Joins: wyclif (~wyclif@user/wyclif)
[04:51:23] *** Quits: Atum__ (~IRC@user/atum/x-2392232) (Quit: Atum__)
[04:56:12] *** Quits: Deide (~Deide@user/deide) (Quit: Seeee yaaaa)
[04:56:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[04:58:10] *** Joins: mud (~mud@user/kadoban)
[05:01:39] <bambanxx> how i can fix this error folks (react) https://codesandbox.io/s/icy-morning-nr6dp?file=/src/App.js
[05:02:40] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[05:02:47] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[05:04:43] *** Joins: WishBoy (~WishBoy@user/wishboy)
[05:04:43] <wroathe> If I had to guess, I'd guess that Window is a Satanist.
[05:05:14] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.1)
[05:05:30] <bambanxx> wroathe hahaha
[05:06:24] <bambanxx> how i can cancel onKeyDown event when someone press a vowel ?
[05:07:12] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[05:08:26] *** Joins: wyclif (~wyclif@user/wyclif)
[05:09:06] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[05:10:31] *** Quits: gggpkm_ (~gggpkm@221.219.70.176) (Ping timeout: 246 seconds)
[05:10:36] <mtr> the event passed to your onKeyDown method will have a property for which key was pressed, and you can check that property and ignore the event (with event.preventDefault()) if the key was a vowel
[05:11:23] *** Quits: Heraes__ (~Heraes@119.12.203.77.rev.sfr.net) (Quit: Leaving)
[05:12:34] <bambanxx> ok
[05:12:38] <bambanxx> thanks
[05:13:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[05:18:02] *** Quits: pizdets (~pizdets@183.182.111.24) (Ping timeout: 272 seconds)
[05:18:31] *** Joins: Dorward_ (~dorward@daviddorward.plus.com)
[05:18:54] *** Joins: pizdets (~pizdets@183.182.115.100)
[05:19:04] *** Quits: Dorward (~dorward@daviddorward.plus.com) (Ping timeout: 265 seconds)
[05:22:02] *** Quits: blez (~blez@213.91.182.96) ()
[05:26:35] *** Quits: GreenJello (~GreenJell@user/greenjello) (Remote host closed the connection)
[05:27:18] *** Joins: wyclif (~wyclif@user/wyclif)
[05:27:18] *** Joins: GreenJello_ (~GreenJell@user/greenjello)
[05:28:34] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 240 seconds)
[05:30:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[05:33:35] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:bd11:e5f5:4ef9:b465) (Quit: WeeChat 3.2)
[05:34:41] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 252 seconds)
[05:41:17] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 252 seconds)
[05:42:22] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[05:42:30] *** Joins: wyclif (~wyclif@user/wyclif)
[05:47:58] *** Joins: mud (~mud@user/kadoban)
[05:49:21] *** GreenJello_ is now known as GreenJello
[05:50:59] *** Quits: CryptoDavid (uid14990@id-14990.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[05:55:09] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[06:01:17] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[06:16:45] *** Quits: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:17:17] *** Joins: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl)
[06:18:08] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 252 seconds)
[06:18:43] *** Joins: mud (~mud@user/kadoban)
[06:21:01] *** Quits: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl) (Client Quit)
[06:25:18] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[06:25:42] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[06:25:48] *** Parts: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) ()
[06:27:14] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[06:27:42] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[06:27:46] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 240 seconds)
[06:33:45] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[06:34:35] *** Joins: l__q (~modinfo@user/modinfo)
[06:36:59] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[06:41:02] *** Joins: de-facto (~de-facto@user/de-facto)
[06:42:59] *** Joins: gggpkm (~gggpkm@221.219.70.176)
[06:44:40] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[06:45:26] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[06:45:26] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[06:47:38] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[06:48:44] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:ecf4:1450:6bc2:8872)
[06:50:41] *** Joins: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl)
[06:57:52] *** Quits: mtr (~mtr@136-24-229-190.cab.webpass.net) (Quit: Leaving...)
[07:02:12] *** Joins: kadobanana (~mud@user/kadoban)
[07:02:23] *** Quits: mud (~mud@user/kadoban) (Read error: Connection reset by peer)
[07:08:18] *** Joins: Croves (~Croves@2804:14c:578b:9102:d14b:203:315c:7152)
[07:12:50] *** Joins: TheFireSwamp (~root@159.65.182.108)
[07:13:08] <Croves> I'm trying to build a chat application just like Slack. I'm saving the messages on a DynamoDB table. How can I make my application to fetch new messages every time a new one is submitted? Is there some event I can listen to in this case?
[07:13:13] *** Joins: gggkmp_ (~gggkmp@221.219.68.57)
[07:13:35] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Ping timeout: 252 seconds)
[07:15:46] *** Quits: EdFletcher (~EdFletche@user/edfletcher) (Ping timeout: 240 seconds)
[07:16:35] <wroathe> Croves: You want your chat app to react to new messages being saved into your database?
[07:17:29] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 268 seconds)
[07:17:55] <Croves> wroathe well, yes.. I mean this is my first time trying to build something rather than a todo list so I'm not sure how it works exactly
[07:18:22] <Croves> If the chat app reacts to new messages, or if the database should trigger something in my app after it receives a new message
[07:18:31] *** gggkmp_ is now known as gggkmp
[07:19:27] <wroathe> Croves: The browser on the user's machine won't have access to that machine by default. You'll need to set up that line of communication yourself.
[07:19:36] <wroathe> Croves: I'd recommend websockets for this
[07:20:00] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Remote host closed the connection)
[07:20:02] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[07:20:04] <wroathe> Croves: The idea is to keep a long running websocket connection around, and to have the server push updates to the client as they come in
[07:20:24] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[07:20:40] <Croves> wroathe hm... I see
[07:20:44] <wroathe> The other option is to poll for updates, but in this case I think the push model is cleaner/better
[07:23:08] <wroathe> won't have access to that information* by default, I meant
[07:26:57] *** Joins: optimist (~optimist@122.163.159.222)
[07:28:24] <banana_> yo question in your project how do you organize your post/get/delete ajax calls
[07:29:09] <banana_> do you have a module with get/delete/post etc exported and import those functions in your react app. just wondering I guess
[07:30:08] *** Joins: irthewinner (~null@bzq-79-180-153-70.red.bezeqint.net)
[07:30:22] <banana_> or someone have an example project they can link. sorry if it's a weird question
[07:32:27] <wroathe> banana_: It depends on the size and scale of the project. For a very large enterprise I'd try to get the API servers set up with a machine readable specification like Open API, and then use that to generate an HTTP client for each API as a separate node module.
[07:32:46] *** Joins: gggpkm_ (~gggpkm@221.219.68.57)
[07:33:03] <banana_> efff. ok option B
[07:33:12] <banana_> but damn that sounds cool.
[07:33:21] <wroathe> For option B I'd just organize them into a module
[07:33:45] <banana_> k. yeah I probably messed up in my work project.
[07:34:20] <banana_> moved them to a DI service (get, post, delete methods). and use that everywhere.
[07:34:37] <wroathe> If it's a particularly large API with lots of endpoints I might use multiple modules, and then export them all in an index.js within a dedicated module directory for that API
[07:34:50] *** Joins: Celeo (~Celeo@user/celeo)
[07:34:52] <banana_> was thinking I could have just used a module maybe with some headers saved in the closure.
[07:35:04] *** Quits: gggpkm (~gggpkm@221.219.70.176) (Ping timeout: 246 seconds)
[07:35:20] <wroathe> What kind of headers?
[07:35:26] *** Joins: Tempesta (Tempesta@user/tempesta)
[07:35:28] <banana_> the worst
[07:35:35] <banana_> like one custom one and a bearer
[07:36:32] <banana_> yeah I'm just interested in maybe seeing how someone did there's. i'm in that mental phase rn of "hmmm did I mess up? wonder how someone else wouldve done it"
[07:37:07] <banana_> I don't think I messed up but yeah might have liked just exporting and using regular functions. idk I think the difference wouldve be arbitrary.
[07:37:11] <banana_> *been
[07:38:11] <banana_> I probably just have to work somewhere else eventually and see how a better project does it and feel guilty that way.
[07:38:42] <wroathe> Well, in general AJAX functions lend themselves well to wrappers that specialize and customize.
[07:39:16] <wroathe> banana_: For example: https://gist.github.com/brigand/118c9025d128c576172bd234a47cae90
[07:39:44] <wroathe> banana_: The idea behind this being that the interface is the same as normal fetch, but it's now slightly specialized for the use case of requesting and handling JSON
[07:39:58] <wroathe> banana_: The same applies to wrapping your HTTP client to handle authentication
[07:40:05] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[07:40:42] <banana_> I basically did that but the js framework thing I have uses DI so e.g. fetchJson's a method in a singleton
[07:40:52] <wroathe> Gross
[07:41:23] <banana_> lol yeah dude I suck.
[07:41:44] <banana_> well, kinda, I was the only one that made what we were doing before less repetitive.
[07:42:18] <wroathe> banana_: With modules there's never any reason to use a "singleton" pattern.
[07:42:27] <wroathe> banana_: A module is already a singleton
[07:42:42] <ljharb> right but that means modules are a singleton pattern when used that way
[07:42:53] <ljharb> but it’s weird to have a pure function be attached to an object.
[07:43:07] <ljharb> DI should just be “function arguments”
[07:43:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[07:43:57] *** Joins: Crassus (~Crassus@user/crassus)
[07:44:25] <banana_> so for that fetchJson example if you didn't want to pass headers that had to be included for all requests and header-values was dynamic.
[07:44:45] <banana_> ^ you would just save the dynamic header-values in that module's state
[07:44:47] <banana_> ?
[07:45:19] <banana_> the module's... closure state?
[07:45:27] <ljharb> no state. You pass it every time.
[07:45:50] <wroathe> Huh? I'm not following
[07:45:53] <ljharb> if needed, you make another module that wraps it and passes the headers, and you have everything import *that*
[07:45:56] <wroathe> Do you have example?
[07:46:11] <banana_> ^
[07:46:18] <ljharb> no state, whatsoever
[07:46:28] <wroathe> The point of these specialized wrappers is that they're scoped to just what they need to do
[07:46:49] <wroathe> If you've got some headers that apply to some requests, but not to others, you would create a new wrapper that sets those headers
[07:46:55] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[07:47:10] <banana_> So you'd pass them all the time but then make another module where it's past there... again what if one of the header-values was dependent on some return value on an initial request in your app.
[07:47:13] <wroathe> fetchJsonAuth (for including the authentication headers)
[07:47:47] <banana_> like the initial requests wouldnt need that header-value but it returns a value that you need for all the other requests' header-value
[07:48:36] <ljharb> banana_: you’d avoid state, that sounds like a bad design
[07:48:38] <banana_> the initial request*
[07:48:42] <ljharb> put that in a cookie so it’s sent automatically
[07:48:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:49:09] <wroathe> That one's a bit tricker. What I might do is make these fetch functions take a third parameter, "context", that has a default value that points to an object shared between all of these
[07:49:50] <banana_> ah ok so you basically maintain state in the modules' closure. in this case the state would be a reference value.
[07:50:14] <wroathe> import requestContext from './request-context.js'; const fetchAuth = (url, options, context = requestContext) => { ... }
[07:50:15] <banana_> in your suggestion/guess I mean
[07:51:11] <banana_> requestContext would be a variable with a reference type. how would you set that variable in that module. you'd have to update the module's state right?
[07:51:44] <wroathe> banana_: Just simply export default {};
[07:52:46] <banana_> so that last thing ^ is the object shared between those other hypothetical modules?
[07:52:53] <wroathe> banana_: Yes
[07:53:03] <banana_> how would you update that exported object then?
[07:53:11] <banana_> you would update that module's state right?
[07:53:19] <wroathe> banana_: No
[07:53:50] <banana_>  `export default {};` <-- you wouldn't mutate that object?
[07:53:55] <wroathe> Just import requestContext from './request-context.js'; ... requestContext.defaultHeaders.Authentication = 'Bearer ...';
[07:54:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[07:54:15] <banana_> ok so you'd mutate it.
[07:54:26] <banana_> got it. but yeah that's way cleaner
[07:54:32] <wroathe> banana_: Yes, but in whatever module needs to mutate it (for example application initialization routines that do things like requesting auth tokens)
[07:54:51] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:54:52] <wroathe> banana_: export default { defaultHeaders: {} } in this example, btw
[07:55:07] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:55:15] <wroathe> banana_: It also lets you override these context properties in a testing situation
[07:55:24] <wroathe> banana_: Because context is just a parameter like any other
[07:56:14] <wroathe> banana_: fetchAuth('http://foo.com', { ... }, { defaultHeaders: { Authentication: 'Bearer my-test-bearer-token' } });
[07:56:54] <wroathe> banana_: Get it, got it, good?
[07:56:59] <banana_> Effffffff
[07:57:10] <banana_> yeah that's beautiful way better than what I did.
[07:57:22] <banana_> so just so I got that right.
[07:59:04] <banana_> you'd provide a default object exported in one place. and you'd allow it to be mutated. but like you said, it would be the default value of some parameter so the object and/or object properties could easily be overrided.
[07:59:44] <wroathe> banana_: Yeah, but the case for overriding in application code would be very minimal (and in this example that's what the second "options" parameter is for anyway)
[07:59:56] <banana_> so any module that needed that default object would import it and possible mutate it if necessary.
[07:59:56] <wroathe> banana_: The overriding would be mainly useful in a testing situation
[08:00:15] <wroathe> banana_: In an application this is just about sharing state between functions
[08:00:22] <wroathe> banana_: A convention that I often call a "context"
[08:00:28] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[08:00:40] <wroathe> banana_: Yes
[08:00:40] <banana_> damn I wish I thought of that. that's beautiful
[08:01:06] <wroathe> banana_: Just free your mind of all of the OOP garbage you know, and the pathway to salvation will lay before you :)
[08:01:32] <banana_> so when you said your DI should be function expressions
[08:01:46] <banana_> you mean you'd inject a function as the DI value right?
[08:01:59] <banana_> if you had to use DI I guess
[08:02:16] <wroathe> banana_: You'd have to be specific on what you mean by DI.
[08:02:54] <wroathe> banana_: You can inject dependencies through function arguments, and then return new functions that have those arguments in their enclosing scope, for example
[08:02:56] <banana_> like if you had to use objects in some crappy js framework, like a controller object. you'd just inject functions for a dependency value.
[08:03:29] <banana_> so a property in a controller object would have a function expression injected in it.
[08:03:42] <banana_> ah inject that way. yeah
[08:03:47] <wroathe> banana_: Could be. I'd probably have to look at a concrete example to make a recommendation.
[08:05:06] <wroathe> brb
[08:05:39] <banana_> ok yeah I would but it's a work project. damn though definitely not the worst thing in this project but one of those things.
[08:06:34] *** Quits: Croves (~Croves@2804:14c:578b:9102:d14b:203:315c:7152) (Quit: Client closed)
[08:08:28] <wroathe> banana_: Well, if it's a real problem you could copy some of it and change the identifiers around
[08:09:14] <wroathe> banana_: But if it's tightly bound to whatever framework you're using you may not have functional options available to you (because they would require you to fight against the established patterns of the framework)
[08:15:17] <banana_> I think I could have avoided DI entirely I think.
[08:15:49] <banana_> well idk unit testing in the framework might've been tough then.
[08:16:09] *** Quits: kmh (~kmh@p200300df5f2f120075f9d28b18545808.dip0.t-ipconnect.de) (Quit: Leaving)
[08:16:29] <banana_> hmmm yea but I like the idea of exporting an object of those functions.
[08:18:09] <banana_> like in your https://gist.github.com/brigand/118c9025d128c576172bd234a47cae90 example would you have another module that would import fetchJson that defined and exported for example `export { delete, put, post, get }`
[08:18:38] <wroathe> Doesn't necessarily need to be an entirely new module
[08:18:49] <wroathe> That follows from the wrapper thing I was talking about. The idea is that you keep specializing.
[08:18:51] <banana_>  that would import fetchJson, define other function and export those*
[08:18:59] <wroathe> getJson, putJson, patchJson
[08:19:19] <wroathe> vs get, put, patch (which aren't specialized for just JSON)
[08:19:33] <wroathe> It depends on what you want your interface to look like, and whether or not you're ok with having lots of functions around.
[08:20:05] <sheetjs> getJson or getJSON ?
[08:20:25] <banana_> ah ok
[08:20:48] <wroathe> sheetjs: Well, when I initially defined that routine banana_ linked I used fetchJSON, but GreenJello thought he was being cool by changing the casing to suit his preferences) :P
[08:21:18] <sheetjs> ah fair enough
[08:23:06] <wroathe> banana_: This is where auto-generating a client from an API specification comes in handy. You no longer need generic get/put/patch because it's implicit in the operation you're performing: i.e. import { getAllProducts } from '@corp/api/products';
[08:23:08] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[08:23:24] <wroathe> banana_: But we're on option B, so wrappers it is. Most of them will be one-liners anyway if you do it right.
[08:24:41] <banana_> damn
[08:24:54] <banana_> I definitely didn't XD
[08:25:28] <banana_> maybe I'll be able to revisit it one day. good to know for next time for sure
[08:26:21] <wroathe> banana_: Well, option A is really only appropriate in contexts where you're in a large integrated team and you can get the API developers to play ball.
[08:26:30] <wroathe> banana_: I just mentioned it for posterity
[08:26:48] <banana_> I meant the option B.
[08:27:21] <banana_> yeah for my wrappers, the way I did, not all of the are one-liners
[08:27:22] <wroathe> banana_: Again, if you set option B up right it'll amount to one or more modules that export lots of functions that are all essentially one liners (that build on top of eachother to specialize fetch or w/e client you're using more and more)
[08:27:33] *** Joins: kmh (~kmh@p200300df5f2f12002c82c639a9d34e57.dip0.t-ipconnect.de)
[08:27:52] <banana_> massage return data?
[08:28:19] <wroathe> hrm?
[08:28:24] <banana_> idk how that would be a one liner, massaging return data
[08:28:49] <wroathe> I would argue that that has no reason to be in your HTTP request modules
[08:28:58] <banana_> like if you had a wrapped function for a get call that returns an list of resource objects, that you needed to update for your app
[08:29:20] <wroathe> Massing return data is more of an application-level concern, rather than being an api-level concern
[08:29:23] <wroathe> Massaging*
[08:29:27] <banana_> ah ok but it could be in your other non-http modules that calls the http-module function
[08:29:36] <wroathe> Yes
[08:29:39] *** Joins: Rockwood (~Rocky@user/rocky)
[08:29:43] <banana_> got it
[08:30:05] <wroathe> getFoo(...).then(mapProductsToCatalogs).then(...)
[08:32:09] <wroathe> banana_: The overarching point here with functional programming is to not be afraid of letting functions only handle a single specific task, and to not be afraid of then looking for opportunities to compose them together.
[08:32:59] *** Quits: bambanxx (~bambanx@181-163-45-7.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:34:23] <banana_> for sure. I sorta did that but didn't take advantage of js modules when implementing.
[08:35:17] <banana_> but for sure on application-level operations I should've done that more.
[08:36:26] *** Joins: dunkeln (~dunkeln@188.70.10.207)
[08:37:07] <wroathe> banana_: I just got an idea for a fun routine that shows this methodology off a bit more
[08:37:38] <banana_> ok let me know
[08:37:44] <banana_> sounds good
[08:38:12] <wroathe> Uno momento
[08:40:10] *** Quits: Zauberfisch (~Zauberfis@cm83-180.liwest.at) (Ping timeout: 240 seconds)
[08:41:05] *** Joins: Zauberfisch (~Zauberfis@cm83-180.liwest.at)
[08:42:35] <Rockwood> cheers everyone
[08:43:04] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8922:75:3a92:e0b2) (Quit: Leaving)
[08:43:10] <Rockwood> why 2 .then?
[08:48:13] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 246 seconds)
[08:49:32] <wroathe> banana_: Not really tested, but here: https://jsfiddle.net/rdsetfxc/
[08:50:24] <wroathe> banana_: With this you could compose together all sorts of specialized fetch functions
[08:54:02] <banana_> damn neat. I bookmarked that
[08:54:45] <banana_> every function is small but super understandable
[08:54:53] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[08:57:47] <wroathe> banana_: Making that thread a context parameter through the reqFns is left as an exercise for the reader ;)
[08:58:55] *** Joins: The_Blode (~Blode@92.40.181.36.threembb.co.uk)
[08:59:30] *** Joins: Rockwood (~Rocky@user/rocky)
[09:00:00] *** Quits: gggpkm_ (~gggpkm@221.219.68.57) (Remote host closed the connection)
[09:02:22] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[09:03:11] <banana_> you could require the client of composeFetch to support a second parameter for the first function element in reqFns
[09:03:50] *** Joins: gggpkm (~gggpkm@221.219.70.176)
[09:04:21] <banana_> and pass the headers that way. unless there's some automatic way if you assign some property through the request object instantiation.
[09:04:38] *** Quits: gggpkm (~gggpkm@221.219.70.176) (Remote host closed the connection)
[09:04:45] <banana_> good mental exercise though
[09:05:12] <wroathe> banana_: Nah. You'd want to extend compose to make it pass in a second parameter at each step
[09:05:14] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[09:05:20] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[09:05:49] <banana_> or that
[09:06:05] <wroathe> banana_: Or I'd also accept grouping the request object and the context parameter into an object and leaving compose alone
[09:07:21] <wroathe> So each of the composed functions would be like const setAuth = ({ req, context }) => { req.headers.set('Authentication', context.defaultHeaders.Authentication); return req }
[09:07:36] <wroathe> err, whoops, return { req, context }
[09:08:00] <wroathe> But making compose smarter would allow you to avoid the need for destructuring parameters and returning the context
[09:08:44] <wroathe> So that approach would just look like const setAuth = (req, context) => { req.headers.set('Authentication', context.defaultHeaders.Authentication); return req }
[09:09:28] <wroathe> And obviously const fetchJsonAuth = composeFetch([ acceptJson, setAuth ], [ demandJson ]);
[09:09:37] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[09:10:05] *** Quits: The_Blode (~Blode@92.40.181.36.threembb.co.uk) (Changing host)
[09:10:05] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:12:04] <banana_> yeah I see what I missed before you'd have to update `const compose2 = (f, g) => x => g(f(x));`
[09:12:33] <wroathe> banana_: Yup.
[09:12:37] <banana_> have it return a function with (x, y) parameter or like you said group them as properties
[09:13:48] <banana_> i.e. have it return a function `(x, y) => g(f(x, y));`
[09:13:58] <banana_> or the grouping thing you said.
[09:19:04] <systemfault> I missed the beginning of the convo... but that looks like "pipe", not "compose"
[09:19:19] <banana_> wroathe: updated your function with the respFns paramter. https://jsfiddle.net/kbqc3z6w/8/ you had to call .flat() because you were doing `...respFns` on that paramter
[09:20:55] <wroathe> systemfault: It's function composition
[09:21:22] <systemfault> Usually, "compose" is classical "right to left composition"
[09:21:27] <systemfault> Anyway.. whatever.
[09:22:26] <banana_> yeah I think he's right
[09:22:29] *** Quits: optimist (~optimist@122.163.159.222) (Remote host closed the connection)
[09:22:31] <wroathe> banana_: Huh? Check the original link I sent you
[09:22:35] <banana_> whatever though `const compose2 = (f, g) => x => g(f(x));`
[09:22:50] <banana_> f is the accumulation
[09:23:17] <wroathe> banana_: The original link I sent you should have .flat() there
[09:23:51] <banana_> so the output of the last function would be the input of the next function. I think he's right that would be a pipe
[09:24:20] <wroathe> systemfault: Yeah, I've heard that in some contexts people differentiate between f of g and g of f. I wasn't too concerned with that distinction here.
[09:24:24] <banana_> wroathe: yeah I removed it, also I updated that parameter from ...respFns to just respFns
[09:25:04] <wroathe> banana_: Why?
[09:27:57] <banana_> doing a spread on an array parameter value is going wraps that array in another one
[09:28:06] <banana_> n>((a, ...b) => b)(null, [1, 2, 3])
[09:28:07] <jellobot> (okay) [ [ 1, 2, 3 ] ]
[09:28:31] <banana_> wraps that array in another one*
[09:28:45] <wroathe> banana_: You forgot flat
[09:28:49] <banana_> so your code was doing this to fix it.
[09:28:59] <banana_> n>((a, ...b) => b.flat())(null, [1, 2, 3])
[09:28:59] <wroathe> banana_: No, I did that intentionally
[09:29:00] <jellobot> (okay) [ 1, 2, 3 ]
[09:29:24] <banana_> yeah but why didnt you just do
[09:29:35] <banana_> n>((a, b) => b.)(null, [1, 2, 3])
[09:29:35] <jellobot> (fail) SyntaxError: Unexpected token ')'
[09:29:43] <banana_> n>((a, b) => b)(null, [1, 2, 3])
[09:29:43] <jellobot> (okay) [ 1, 2, 3 ]
[09:30:02] <banana_> oh to copy it?
[09:30:05] <wroathe> banana_: So that the user could choose between foo(a, b, [c, d]); foo([a, b, c, d]); foo(a, b, c, d)
[09:30:22] <wroathe> banana_: No, it's just flexibility.
[09:31:04] <wroathe> banana_: composeFetch([...], demandJson, parseJson) vs composeFetch([...], [demandJson, parseJson])
[09:31:18] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[09:31:33] <wroathe> banana_: Same reason I do ...fns and fns.flat() in compose
[09:31:35] <banana_> ah ok cool. yeah good example
[09:32:02] <banana_> I see that too
[09:32:28] <wroathe> banana_: Can't do that with the reqFns, because there'd be no way to tell where the request functions stop and the response functions start.
[09:32:46] <wroathe> banana_: So reqFns is limited to always being an array, but respFns can be arguments or arrays
[09:35:13] <banana_> yeah I get that
[09:37:21] <banana_> that's why all those libraries support the end parameters like that.
[09:37:35] <banana_> like .concat(...) etc
[09:38:37] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 246 seconds)
[09:39:53] <wroathe> banana_: Well, it was always possible to do this in JS, just a lot more manual and error-prone. Now that rest parameters and .flat exists though it couldn't be easier.
[09:46:35] *** Quits: ryzokuken (~ryzokuken@fanzine2.igalia.com) (Ping timeout: 252 seconds)
[09:48:31] <banana_> right on
[09:50:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:50:33] *** Joins: ryzokuken (~ryzokuken@fanzine2.igalia.com)
[09:52:04] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:57:14] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[09:57:54] <wroathe> banana_: https://jsfiddle.net/x2qvgs9w/
[09:58:10] <wroathe> banana_: I _think_ that's correct, but it's getting late and I'm getting tired.
[09:58:22] <wroathe> banana_: Also, I made it handle async composition
[09:58:34] <banana_> sweet man I'm going to bookmark that too
[10:00:55] *** Joins: wyclif (~wyclif@user/wyclif)
[10:01:16] <wroathe> Anyway, nite
[10:03:55] *** Joins: optimist (~optimist@122.163.159.222)
[10:04:21] <banana_> thanks!
[10:04:53] <banana_> definitely bookmarked it to read it more. confused on the async/await part for the request/response functions
[10:05:23] <banana_> unless it''s because fetch requires a promie.
[10:05:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[10:05:58] *** Joins: wyclif_ (~wyclif@user/wyclif)
[10:07:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 246 seconds)
[10:07:44] *** Joins: gggpkm (~gggpkm@123.113.190.118)
[10:08:23] <banana_> or maybe that's a fancy way to chain the request/response headers
[10:08:46] <banana_> cool stuff will look at later for sure. thanks again appreciate it
[10:12:25] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[10:12:55] *** Quits: dibber (~altdev@c-73-14-187-235.hsd1.co.comcast.net) (Ping timeout: 246 seconds)
[10:14:27] *** Quits: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Read error: Connection reset by peer)
[10:15:00] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:15:33] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[10:16:44] *** Quits: debsan (~debsan@2800:810:471:2ee::1000) (Ping timeout: 252 seconds)
[10:17:35] *** Quits: gggpkm (~gggpkm@123.113.190.118) (Ping timeout: 258 seconds)
[10:19:28] *** Quits: irthewinner (~null@bzq-79-180-153-70.red.bezeqint.net) (Quit: Leaving)
[10:23:07] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Remote host closed the connection)
[10:23:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:28:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 246 seconds)
[10:28:50] *** Quits: dunkeln (~dunkeln@188.70.10.207) (Ping timeout: 252 seconds)
[10:30:32] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[10:39:00] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:41:21] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[10:43:20] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:45:19] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[10:46:11] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 256 seconds)
[10:47:17] *** Joins: fef (~thedawn@user/thedawn)
[10:54:33] *** Joins: austincheney_ (~austinche@104-189-235-24.lightspeed.rcsntx.sbcglobal.net)
[10:54:48] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[10:55:14] *** Quits: austincheney (~austinche@2600:1700:1220:76c8:e56a:ef77:ddf7:7aa) (Ping timeout: 252 seconds)
[10:58:56] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[11:00:42] *** Joins: de-facto (~de-facto@user/de-facto)
[11:08:58] *** Joins: Dorward (~dorward@daviddorward.plus.com)
[11:12:17] *** Quits: Dorward_ (~dorward@daviddorward.plus.com) (Ping timeout: 252 seconds)
[11:17:32] *** Joins: pycode (~pycode@2001:b07:5d28:551:c78b:bddf:d04e:46cf)
[11:18:01] *** Joins: dunkeln_ (~dunkeln@188.70.10.207)
[11:21:26] *** Joins: Kol (~Kol@d75-157-122-186.bchsia.telus.net)
[11:24:04] *** Joins: stenno (~stenno@user/stenno)
[11:28:33] *** Joins: gggkmp (~gggkmp@221.219.68.57)
[11:31:59] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[11:32:22] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: restarting)
[11:33:01] *** Quits: sagax (~sagax@213.138.71.146) (Excess Flood)
[11:33:11] *** Quits: dunkeln_ (~dunkeln@188.70.10.207) (Ping timeout: 252 seconds)
[11:33:15] *** Joins: litharge (litharge@libera/bot/litharge)
[11:33:43] *** Joins: dunkeln_ (~dunkeln@188.70.10.207)
[11:34:07] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[11:35:30] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[11:37:08] <gggkmp> why does function treated as class
[11:43:55] <rifl> anyone uses flow type checking?
[11:45:29] *** Quits: gggkmp (~gggkmp@221.219.68.57) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:45:44] <Cork> gggkmp: class is a syntax sugger. javascript uses constructors and constructors are functions. Not sure if this is what your asking but ya.
[11:46:34] *** Joins: kmh_ (~kmh@p200300df5f198e006147b5ce666b84fa.dip0.t-ipconnect.de)
[11:48:07] *** Quits: kmh (~kmh@p200300df5f2f12002c82c639a9d34e57.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[11:49:53] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[11:50:46] *** Joins: epolanski (uid312403@id-312403.brockwell.irccloud.com)
[11:51:26] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 252 seconds)
[11:57:55] *** Joins: incognito (~relativit@user/incognito)
[12:00:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a8ee:bddc:3a29:edaa)
[12:03:07] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:03:22] *** Joins: mickey (~user@user/mickey)
[12:04:23] <gggpkm> Cork, thanks
[12:04:57] <gggpkm> Cork,  when to use __proto__ and prototype ,got confused
[12:05:31] <gggpkm> you mean the core of js is constructors ? and the functions is compiled as  constructors
[12:05:35] <gggpkm> ?
[12:05:37] *** Joins: Booster2ooo (~Booster2o@91.183.83.5)
[12:06:38] <Cork> gggpkm: class is a fairly new syntax in javascript, it is just a parser change though the underlying code is still the old constroctor => prototype structure
[12:06:44] <gggpkm> what is the relation of Object and function
[12:06:58] <gggpkm> please give a explain
[12:07:19] <Cork> new Object()
[12:07:30] <Cork> it is basically the same as {}
[12:08:20] <Cork> gggpkm: what classes does is the same thing it just have syntax sugger to make the language more reccognizable to developers used to class structures
[12:09:13] *** Joins: dimi1947 (~dimi1947@2a02:1388:2089:c0f0:34d8:2d49:b35:66e7)
[12:09:32] *** Quits: wyclif_ (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[12:10:42] <Cork> gggpkm: these two are identical https://jsfiddle.net/o4293pgm/
[12:11:26] <Cork> Test1 is the new class syntax, the later is the older constructor
[12:13:56] <gggpkm> Cork, what is the relation of Object and function
[12:14:16] <Cork> gggpkm: everything in js except a few primitives are objects
[12:15:53] <gggpkm> Cork, function is also object type ?
[12:16:05] <Cork> gggpkm: everything inherits from object
[12:16:14] <Cork> it isn't directly from object
[12:17:01] *** Quits: optimist (~optimist@122.163.159.222) (Remote host closed the connection)
[12:17:34] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[12:17:56] <gggpkm> how does it do "indirectly" ?
[12:18:44] <Cork> not sure what you mean
[12:19:52] <gggpkm> you said "it isn't directly from object"
[12:20:03] <gggpkm> so how does it indirectly
[12:20:07] <gggpkm> way
[12:21:12] <Cork> well the func.constructor.name isn't object, but it behaves like an object
[12:21:18] <Cork> you can set values on it and what not
[12:21:50] <Cork> n> var a = function() { return 'yes'; }; a.other = false; a.other
[12:21:51] <jellobot> (okay) false
[12:25:20] <stenno> javascript just has first-class function objects like many other OO languages
[12:25:40] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:26:38] <Cork> and just for the giggles (don't do this)
[12:26:40] <Cork> n> var a = function() { return arguments.callee.other; }; a.other = false; a()
[12:26:41] <jellobot> (okay) false
[12:29:07] <gggpkm> func.a === func.constructor.name.a  // true?
[12:29:57] *** Joins: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de)
[12:30:32] <Cork> constructor.name is the name of the constructor creating the object
[12:30:48] <Cork> n> var a = function() {}; a.constructor.name
[12:30:49] <jellobot> (okay) 'Function'
[12:32:29] <Cork> n> var a = function() { return "old value" }; (new a.constructor("return 'new value'"))()
[12:32:30] <jellobot> (okay) 'new value'
[12:32:43] <Cork> or just new Function('new value')()
[12:32:51] <Cork> * or just new Function("return 'new value'")()
[12:35:47] *** Joins: dev4449 (~dev4449@164.215.212.127)
[12:36:26] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:36:59] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 252 seconds)
[12:38:33] <dev4449> hi. good day.
[12:38:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:31] *** Quits: dev4449 (~dev4449@164.215.212.127) (Quit: Client closed)
[12:39:42] *** Joins: jonifen (~jonifen@user/jonifen)
[12:39:55] *** Joins: dev4449 (~dev4449@164.215.212.127)
[12:40:08] <dev4449> does #javascript have an offtopic channel?
[12:41:14] <ashnur> this one
[12:41:25] *** Joins: wyclif (~wyclif@user/wyclif)
[12:41:39] <ashnur> but it's not intentional
[12:41:40] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Ping timeout: 246 seconds)
[12:45:59] *** Joins: bodiccea_ (~bodiccea@user/bodiccea)
[12:46:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[12:46:34] *** Quits: bodiccea (~bodiccea@user/bodiccea) (Ping timeout: 240 seconds)
[12:49:11] *** Quits: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:49:24] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:50:18] <rifl> what kindofofftopic do u want
[12:50:53] <rifl> my js2-mode for emacs is broken,does anyone have encountered this?
[12:51:03] <dev4449> okay. I'm in a situation in which I might migrate to some other country in the near future, maybe in six months or 1 year. And I'm preparing for front-end developer job. my question is, when I become a front-end dev, how can I work while it's not clear if I stay in the country I currently live or not?
[12:53:06] *** Joins: mantis (~user@2406:5a00:f001:c600:c42e:b26:3a31:7eb)
[12:53:24] <dev4449> Employers usually employ developers for 6 months /1 year/ 2 year. my problem is, it's not clear how long I will stay.
[12:53:59] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[12:54:36] <undefined_bob> work as a freelancer
[12:54:42] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Read error: Connection reset by peer)
[12:56:32] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 252 seconds)
[12:57:13] *** Joins: wyclif (~wyclif@user/wyclif)
[12:57:17] *** Joins: TheAceOfHearts_ (~TheAceOfH@24.41.239.76)
[12:58:30] *** Joins: Naan (~Naan@user/naan)
[13:02:10] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[13:02:17] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 252 seconds)
[13:02:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:04:31] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 265 seconds)
[13:12:23] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[13:12:43] <dev4449> undefined_bob: but no employer wants their employee to move abroad
[13:13:26] *** Quits: rifl (~user@user/rifl) (Remote host closed the connection)
[13:13:32] *** Joins: whatcq (~whatcq@183.67.44.98)
[13:14:21] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[13:14:21] *** Joins: wyclif (~wyclif@user/wyclif)
[13:17:29] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[13:19:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:19:28] *** Joins: Alina-ma- (~Alina-mal@37.252.80.255)
[13:19:40] *** Joins: realies- (~realies@178-169-218-119.haskovo.ddns.bulsat.com)
[13:20:09] *** Joins: seed0 (~seed0@li1647-214.members.linode.com)
[13:20:09] *** Quits: seed0 (~seed0@li1647-214.members.linode.com) (Changing host)
[13:20:09] *** Joins: seed0 (~seed0@user/seed0)
[13:20:46] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:20:46] *** Quits: realies (~realies@user/realies) (Remote host closed the connection)
[13:20:46] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[13:20:46] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 272 seconds)
[13:20:46] *** Quits: seed0_ (~seed0@li1647-214.members.linode.com) (Ping timeout: 272 seconds)
[13:20:46] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[13:20:46] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[13:21:20] *** Joins: sri19 (~Srain@240-205-21-31.ftth.glasoperator.nl)
[13:22:17] *** Quits: Alina-ma- (~Alina-mal@37.252.80.255) (Remote host closed the connection)
[13:22:33] <undefined_bob> dev4449: read up what a freelancer is
[13:24:25] <dev4449> undefined_bob: I get what you mean.
[13:24:46] <undefined_bob> ^^
[13:26:49] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 246 seconds)
[13:28:56] <sri19> I'm experimenting with building a rick single page app with vanilla javascript. Call it framework fatigue, but I want to see if moderm JS is all I need for a rather non-trivial application. JS native support for `classes` was all I ever needed. And yes I know I might just end up inventing a framework / library of my own unintentionally, but I am stupid enough to think I can do a better job for my needs. Now if I was a young 20 yr old
[13:28:56] <sri19> programmer, this type of confidence fueled by ignorace would be expected. But I am OLD and I still think I can pull this off.
[13:29:12] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[13:31:08] <dev4449>  undefined_bob: okay, thanks.
[13:32:48] *** Joins: wyclif (~wyclif@user/wyclif)
[13:32:58] <sri19> np
[13:36:47] *** Joins: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[13:37:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[13:42:01] *** Joins: gggpkm (~gggpkm@221.219.77.87)
[13:42:06] <gggpkm> ?
[13:42:11] *** Joins: stenno (~stenno@user/stenno)
[13:43:05] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 252 seconds)
[13:44:49] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[13:45:23] *** Joins: jazzy (~jaziz@2600:380:8653:59ba:edff:946b:89ad:7dd5)
[13:46:59] *** Joins: Crassus (~Crassus@user/crassus)
[13:47:17] *** Joins: systemmessages (~systemmes@pa49-195-143-152.pa.nsw.optusnet.com.au)
[13:47:23] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 252 seconds)
[13:47:31] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 256 seconds)
[13:47:48] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[13:49:07] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) ()
[13:49:33] *** Joins: stenno (~stenno@user/stenno)
[13:49:41] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[13:50:27] *** Joins: wyclif (~wyclif@user/wyclif)
[13:50:41] *** Quits: APic (apic@apic.name) (Ping timeout: 252 seconds)
[13:52:20] *** Quits: dev4449 (~dev4449@164.215.212.127) (Quit: Client closed)
[13:54:06] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[13:55:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:57:40] *** Joins: Lope (~lope@user/lope)
[13:59:38] *** Joins: federico_it (~textual@151.51.82.235)
[14:01:02] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[14:01:50] *** Quits: gggpkm (~gggpkm@221.219.77.87) (Ping timeout: 258 seconds)
[14:02:53] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[14:03:40] *** Joins: wyclif (~wyclif@user/wyclif)
[14:05:06] *** Joins: dev4449 (~dev4449@46.246.3.205)
[14:07:14] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[14:08:15] *** Joins: thiras (~thiras@user/thiras)
[14:09:24] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[14:10:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[14:11:01] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[14:12:29] *** Joins: earendel (uid498179@user/earendel)
[14:17:26] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 268 seconds)
[14:18:56] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[14:20:30] *** Joins: wyclif (~wyclif@user/wyclif)
[14:21:47] *** Joins: entuland (~entuland@user/entuland)
[14:22:08] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 252 seconds)
[14:24:55] <ashnur> dev4449, depends on the countries involved, but generally speaking US and UK companies can give relatively good salary (something that's competitive in those countries) to anyone, been there and I know other people  who work from for example hungary to tesco in the uk as contractors
[14:27:51] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:28:32] *** Joins: fef (~thedawn@user/thedawn)
[14:30:12] *** Quits: systemmessages (~systemmes@pa49-195-143-152.pa.nsw.optusnet.com.au) (Quit: Leaving)
[14:30:35] *** fedorafan is now known as FedOrafan
[14:30:55] *** FedOrafan is now known as fedorafan
[14:31:55] <dev4449> ashnur: okay
[14:32:55] *** Joins: gggkmp_ (~gggkmp@221.219.70.176)
[14:35:22] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[14:38:01] <pycode> hello
[14:38:25] <pycode> how can i load a json from an url? i usually do JSON.parse() but i cant put an URL there
[14:40:07] <pycode> https://zetcode.com/javascript/jsonurl/
[14:40:09] <pycode> with fetch() ?
[14:41:06] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[14:41:48] <entuland> the page you have linked shows an example using fetch, did you try it?
[14:42:35] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[14:42:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[14:43:09] <pycode> yes yes i am saying that, i am using it it works, but should i return inside then() ? (where there is "out")
[14:43:11] <pycode> i need a json
[14:43:13] <pycode> not a promise
[14:44:19] *** Quits: mantis (~user@2406:5a00:f001:c600:c42e:b26:3a31:7eb) (Remote host closed the connection)
[14:44:29] <sri19> pycode: look up axios .. or with fetch you can do something like fetch(url).then(res => res.json).then(json => console.log(json));
[14:45:58] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[14:47:21] *** Quits: Naan (~Naan@user/naan) (Remote host closed the connection)
[14:47:55] *** Joins: Naan (~Naan@user/naan)
[14:48:43] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[14:52:17] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[14:52:39] <pycode> ok so if i need that json to create a chart i can put inside the ...then().. the createChart(json)
[14:52:40] <pycode> right ?
[14:52:46] <pycode> something like that i mean
[14:52:58] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 240 seconds)
[14:56:20] *** Joins: wyclif (~wyclif@user/wyclif)
[14:56:28] <entuland> sounds about correct, and it's easy to test
[14:56:46] <pycode> ok
[14:56:49] <pycode> thanks
[14:56:52] <entuland> yw
[14:57:12] *** Joins: rritoch (~kvirc@222.127.246.55)
[15:01:24] <rritoch> Hi, I'm trying to come up with a decent architecture for making a typescript react redux action creator that can handle a promise. I believe this would be called a thunk.  Is there anything fundamentally wrong with doing it this way or is there a better way without using redux toolkit? https://pastebin.com/ZxakgsR2 . I can't find any decent examples but this seems to work.
[15:01:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[15:02:13] *** Joins: Naan` (~Naan@user/naan)
[15:03:16] *** Joins: Intelo (~Intelo@88.246.74.132)
[15:04:52] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[15:05:22] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 240 seconds)
[15:06:02] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[15:06:20] <Intelo> Hi, I am using webpack and react with scss. I want to load different css rules for each user (preferences come from database once user logins in to site). How c I cdo that? Challenge is that the build is made once for all users. and it already has the css rules in it. I am not able to load dynamic css rules for each user that will affect all the
[15:06:20] <Intelo> website. ?
[15:08:19] *** Quits: gggkmp_ (~gggkmp@221.219.70.176) (Ping timeout: 246 seconds)
[15:09:03] <entuland> Intelo, how are you not able to load dynamic css rules?
[15:09:14] <entuland> just appending a stylesheet with the overrides should work
[15:09:32] <Intelo> entuland as I wrote above, the bundle is made once via webpack
[15:09:50] <Intelo> entuland append the stylesheet? but where?
[15:09:51] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 268 seconds)
[15:10:00] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[15:10:32] <entuland> I ignore the details of what you are using, but in the end, it's just an HTML page with stylesheets, no?
[15:11:05] <Intelo> yes, but where "exactly" to put css fules?
[15:11:06] <Intelo> rules
[15:11:28] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[15:11:49] <Intelo> where exactly to append
[15:11:57] <entuland> could be a <style> tag, a <link rel="stylesheet"> or you could mangle the stylesheet directly with JS on the client side
[15:12:18] <Intelo> so it will not go in .bundle.js?
[15:12:31] <entuland> I ignore the _means_ in your scenario
[15:12:39] <entuland> sorry
[15:12:45] <Intelo> I didn't get it
[15:12:55] <Intelo> can you elaborate the steps
[15:12:58] <entuland> I mean, I am explaining what you should be aiming for as end result
[15:13:12] <Intelo> ok. yes. me too but the proceedure is the issue
[15:13:15] <entuland> but since I don't know webpack and react, I don't know where you should put these things in your code
[15:13:19] <Intelo> what steps to do and for what
[15:14:01] <entuland> you can try and see if there is a channel for react if no one chips in here and if you can't find out looking up the docs or the alike
[15:14:14] <rritoch> Intelo: Since your rules are coming from the database, can you add an API endpoint to return the CSS rules (ex: {pageHeader: { fontWeight: 800; }}) and then just reference those rules in the elements? <div style={dynCss.pageHeader}>Some header text</div> , rendering scss via db seems a little messy to me.
[15:16:04] <rritoch> Intelo: If you really are desperate to inject css at runtime than you can likely do it using refs. That gives you access to the dom and then you create your link tag in the header. Its far from ideal, but it is possible.
[15:16:11] <Intelo> hm ya
[15:17:56] <Intelo> rritoch yes that part is clear but dynCss.pageHeader will be loaded and its value will be preserved in bundle.js for "all" users. But I want it to be more dynamic and different for each user. So what should I do?
[15:18:26] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 272 seconds)
[15:18:43] <rritoch> Intelo: My point is that dynCss is loaded from an API request, such as via fetch()
[15:18:50] <Intelo> rritoch its only 5-6 css rules that will dictate the rest of the site. e.g the base color theme lets say
[15:19:27] <rritoch> Intelo: So you create your dynCss with the default values, and you replace them with the values from the database when the response is received.
[15:20:26] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233)
[15:20:29] <Intelo> rritoch alread but in that case I will not be able to take advantage of the pure scss syntaxt. If you know, scss rules make the flow like water flow. the children get base color from super parent varialbes. e.g red is base color. then the child button will dim red or mix with yellow and make button and other element colors. Now you change base
[15:20:29] <Intelo> color from red to blue and all the site changes
[15:20:40] <Intelo> I am looking forward to change the base colors dynamically as per use
[15:20:41] <Intelo> r
[15:20:45] <Intelo> user settings
[15:21:45] *** Joins: wyclif (~wyclif@user/wyclif)
[15:21:59] *** Quits: pycode (~pycode@2001:b07:5d28:551:c78b:bddf:d04e:46cf) (Ping timeout: 252 seconds)
[15:25:21] <rritoch> Intelo: Browsers don't support scss, it gets compiled into css when you build. You can try to compile it yourself using Sass.js https://github.com/medialize/sass.js , but that is far less efficient than the other two methods I suggested.
[15:26:00] *** Joins: sickdyd (~sickd@fl1-119-239-103-161.tky.mesh.ad.jp)
[15:26:31] *** Joins: Heraes (~Heraes@user/romarain)
[15:26:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[15:27:38] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:29:03] *** Quits: sri19 (~Srain@240-205-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[15:29:37] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 258 seconds)
[15:30:29] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[15:33:01] <rritoch> Intelo: You can always use a dynamic className and provide (or generate) diferent selectors for each different style option. Ex: header800 (\n\tpageHeader (\n\t\tfontWeigth:800\n\t)\n) that is far more reasonable than compiling scss client-side.
[15:33:46] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:35:24] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[15:36:31] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 258 seconds)
[15:37:04] <Intelo> so there is no way to go with this via webpack and scss?
[15:37:43] <Intelo> rritoch since webpack and scss compbiles and bundles things. These styles cannot be dynamic for each user?
[15:37:48] *** Joins: wyclif (~wyclif@user/wyclif)
[15:39:01] <pikapika> Is react usable inside an electron? My understanding from outside is that its just an fe lib so there's no reason it can't be used in electron
[15:42:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[15:43:15] <rritoch> Intelo: The compiler turns the scss into css which is then loaded by the browser, so unless you are going to make a seperate build per user it doesn't seem possible.
[15:45:27] *** Joins: Pajus (~Pajus@user/pajus)
[15:45:50] <rritoch> Intelo: You can use dynaic style or className attributes, or you can try to compile the scss client side, or you can make a seperate build per user, those are the only options I can think of.
[15:47:22] *** Quits: Pajus (~Pajus@user/pajus) (Remote host closed the connection)
[15:48:11] <rritoch> Intelo: dynamic style attributes is basically the standard for React Native, dynamic className is a fairly common practice also. Compiling css client side or making a seperate build per user is in most cases an extremly inefficient option. The build per user option has the additional problem that you need to rebuild anytime the user settings change.
[15:48:21] *** Kirjava is now known as cake
[15:48:57] <Intelo> ya, separate build per user is not the way
[15:49:38] *** Joins: stenno (~stenno@user/stenno)
[15:49:42] *** Joins: nomic2 (~nomic@host86-146-217-198.range86-146.btcentralplus.com)
[15:50:08] <Intelo> rritoch what if I want to provide all the users with , lets say 7 themes. They can choose any. So I have to build 7 bundle.js
[15:50:18] <Intelo> but that I can do anytime. Just once
[15:50:23] <Intelo> In this case, is that possible?
[15:51:13] *** Joins: gggkmp (~gggkmp@221.219.70.176)
[15:51:19] <rritoch> Intelo: That is probably possible using refs which give you direct access to the DOM allowing you to select which js bundle to load at runtime.
[15:51:50] <Intelo> hm
[15:51:55] <rritoch> Intelo: Correction, you wouldn't be loading the bundle.js you would be loading the generated css file
[15:52:05] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[15:52:15] <Intelo> to my info, webpack embeds css code in it
[15:52:20] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233) (Ping timeout: 252 seconds)
[15:52:25] <rritoch> Intelo: the bundle.js is needed to access refs in the first place.
[15:52:38] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[15:52:39] <gggpkm> function a(){};a.b=1; //does this add one property  to a
[15:53:18] <Intelo> rritoch but webpack embeds css code in it
[15:53:42] <stenno> gggpkm: yes
[15:54:09] <gggpkm> function a(){};a.b=1;console.log(a) // why log does not print the value of a.b
[15:54:14] <gggpkm> stenno, ^
[15:54:33] <stenno> because of how functions are stringified
[15:54:44] <gggpkm> stenno, what does that mean
[15:55:02] <rritoch> Intelo: Ok, I see. In mine it generates one <style> tag per scss file so in that case it seems you would need to dynamically remove all the styles that aren't associated with your theme.
[15:55:14] <stenno> gggpkm: because of how a function is represented as a string when you output it
[15:55:19] <gggpkm> tostring() ?
[15:55:26] <stenno> n> console.log(() => 3)
[15:55:27] <jellobot> (okay) [Function (anonymous)]
[15:55:36] <gggpkm> does it use the tostring?
[15:55:50] <gggpkm> n> console.log(()=>1)
[15:55:51] <jellobot> (okay) [Function (anonymous)]
[15:56:01] <Intelo> rritoch yes i get it but in this case, there is no scss here then
[15:56:11] <stenno> n> (() => 1).toString()
[15:56:12] <jellobot> (okay) '() => 1'
[15:56:25] <rritoch> Intelo: Either way you are trying to do something that react is not designed to do so there is no guarantee of future compatiblity (or backwards compatiblity) the style and className attributes are part of the spec and guaranteed to work.
[15:56:38] <gggpkm> stenno, seem some magic
[15:56:39] *** Joins: CoderGuy (~CoderGuy@user/coderguy)
[15:56:56] *** Joins: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de)
[15:56:57] <Intelo> rritoch ya but I guess this is not about react I guess. More about webpack and scss
[15:57:03] <stenno> n> const foo = () => 23; foo.bla = 42; console.log(foo)
[15:57:04] <jellobot> (okay) [Function: foo] { bla: 42 }
[15:57:14] <CoderGuy> i'm trying to list out all possible functions/methods of a class object, but it's not listing every single one is there something i'm missing?
[15:57:32] <stenno> CoderGuy: there are functions which are not enumerable, for example
[15:57:33] <gggpkm> stenno, why does it print bla here
[15:57:45] <CoderGuy> stenno, how do I list those?
[15:58:06] <CoderGuy> I just want a carbon copy list of everything inside the class object, variables/methods
[15:58:09] <gggpkm> how do I mod the stringify of object
[15:58:22] <stenno> gggpkm: you can overload it but you shouldn't
[15:58:42] <gggpkm> stringify is a function ?
[15:58:51] <gggpkm> object.stringify?
[15:59:04] <gggpkm> n>Object()
[15:59:05] <jellobot> (okay) {}
[15:59:06] <stenno> CoderGuy: try getOwnPropertyNames
[15:59:11] *** Joins: wyclif (~wyclif@user/wyclif)
[15:59:16] <gggpkm> n>Object().stringify
[15:59:17] <jellobot> (okay) undefined
[15:59:18] <CoderGuy> yeah that's missing as well i'm doing that one
[15:59:36] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 272 seconds)
[15:59:39] <stenno> gggpkm: no.
[15:59:51] <gggpkm> what is that work internally
[15:59:54] <CoderGuy> ohh wait
[15:59:58] <CoderGuy> console.log(Object.getOwnPropertyNames(Object.getPrototypeOf(m)));  that worked
[16:00:26] <CoderGuy> sooo getOwnPropertyNames of the object itself was limited, but this one has all of it, why is that?
[16:01:17] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[16:01:31] *** Quits: gggkmp (~gggkmp@221.219.70.176) (Ping timeout: 246 seconds)
[16:01:32] <stenno> CoderGuy: because getOwnPropertyNames will only list the properties of the object without considering the prototype chain
[16:01:44] <CoderGuy> oh
[16:01:52] <stenno> CoderGuy: compare https://stackoverflow.com/a/8024294
[16:02:08] *** Quits: federico_it (~textual@151.51.82.235) (Ping timeout: 272 seconds)
[16:03:26] <CoderGuy> oh wow that one is the best
[16:03:32] <CoderGuy> wow so many more methods
[16:03:40] <CoderGuy> thx stenno :D
[16:03:44] <stenno> np :)
[16:04:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[16:05:42] *** Quits: rritoch (~kvirc@222.127.246.55) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[16:05:57] <CoderGuy> does that exist but for variables instead of methods?
[16:06:23] <stenno> i don't think there is a way to list the variables of the current scope
[16:06:34] <CoderGuy> oh ok
[16:06:37] <CoderGuy> well it's fine for now
[16:06:54] <CoderGuy> i'm looking at printing out the properties of my object, but it's looking like I might have to create a list based on the object
[16:07:17] <CoderGuy> similar to how toString() works
[16:07:25] <CoderGuy> in other languages of course
[16:07:49] *** nomic2 is now known as nomic
[16:07:54] *** Quits: sickdyd (~sickd@fl1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 252 seconds)
[16:08:36] <CoderGuy> yeah cuz my original approach was thinking "oh it's just the variables" but actually it's the known style variables based on the stylesheet
[16:08:55] *** Joins: gggpkm_ (~gggpkm@221.219.68.57)
[16:08:55] *** Joins: federico_it (~textual@151.51.82.235)
[16:08:56] <stenno> wait, make sure to not confuse variable with object properties
[16:09:12] <CoderGuy> well yeah of course i'm just saying
[16:09:22] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Read error: Connection reset by peer)
[16:09:33] <CoderGuy> in my mind I was like "oh obviously we just list out the known properties, but now i'm seeing i'm more interested in stylesheet things
[16:09:53] <CoderGuy> but like a documentation program seems to know everything that a class object has so I was also wondering how it reads that
[16:10:12] <CoderGuy> so this works beautifully to look at all the methods and I was curious okay what if it has variable though
[16:10:39] <CoderGuy> but for my purpose I am going to be listing how something is styled, not so much everything but I geuss dom inspector wise it does show everything
[16:11:29] *** Quits: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:11:42] <CoderGuy> yeah like on chrome it lists under properties not just the functions but also the callers etc, idk how that's done
[16:12:11] *** cake is now known as Kirjava
[16:12:34] *** Quits: dimi1947 (~dimi1947@2a02:1388:2089:c0f0:34d8:2d49:b35:66e7) (Ping timeout: 240 seconds)
[16:12:54] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[16:12:58] <stenno> caller of a function?
[16:13:20] <stenno> n> function foo() { console.log(arguments.caller); } foo()
[16:13:21] <jellobot> (okay) undefined
[16:13:24] <stenno> fail
[16:13:30] <stenno> but something like that
[16:14:06] <Cork> n> function foo() { console.log(arguments.callee.name); } foo()
[16:14:08] <jellobot> (okay) foo
[16:14:22] <stenno> but caller should exist too right
[16:14:24] <Lope> does anyone here use FireMonkey?
[16:14:31] <Lope> and do you know how to use updateURL ?
[16:14:35] <Cork> it used to i think they optimized it away in later versions
[16:14:46] <Cork> (it has to keep the backtrace for the one calling it
[16:14:52] <stenno> ah
[16:15:19] <Cork> n> function bar() { console.log(arguments.caller.name); }; function foo() { bar(); } foo()
[16:15:19] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[16:15:19] <jellobot> (fail) TypeError: Cannot read property 'name' of undefined
[16:15:21] <Cork> ioos
[16:16:01] <CoderGuy> stenno so do they have a bunch of things that list each property, that must be it huh
[16:16:17] <Cork> n> function bar() { console.log(arguments.callee.caller.name); }; function foo() { bar(); } foo()
[16:16:18] <jellobot> (okay) foo
[16:17:03] *** Joins: blez (~blez@213.91.182.96)
[16:17:10] *** Quits: dev4449 (~dev4449@46.246.3.205) (Ping timeout: 246 seconds)
[16:17:12] <CoderGuy> stenno so like accessKey, assignedSlot, attributeStyleMap  these things are agreed upon before hand and then it populates for each element?
[16:17:35] <CoderGuy> and then when there's a function it has arguments,caller,length etc and that populates as well for each one?
[16:17:38] *** Quits: dunkeln_ (~dunkeln@188.70.10.207) (Ping timeout: 252 seconds)
[16:17:49] <CoderGuy> this is for chromes dom inspector
[16:18:14] <CoderGuy> hmm I never thought about it this way, but that does make sense now
[16:19:14] *** Quits: federico_it (~textual@151.51.82.235) (Ping timeout: 272 seconds)
[16:19:14] <CoderGuy> okay I see, so I have to come up with a list of things that I want inside the properties etc okay cool thx for all the help stenno I got this :D
[16:19:24] <Lope> I've not had much luck with the whole arguments.callee thing
[16:19:32] <Lope> Isn't support for it haphazard?
[16:19:39] <CoderGuy> Lope yeah it's generally empty even in the dom inspector
[16:19:44] <Lope> between node.js and browsers
[16:19:48] <Lope> yeah, I just said fuckit.
[16:19:53] <CoderGuy> Lope but it's there, I was just curious why and I think it's just things that can show up
[16:19:58] <Lope> I don't bother with stuff that half works.
[16:20:14] <CoderGuy> yeah, so I gotta think of the things I want displayed for this, i'm building basically a styling tool
[16:20:37] <Cork> Lope: callee should work, but ya they are there to not break old webpages, not really for future use
[16:20:51] <CoderGuy> also i've wanted to do documentation stuff and I was curious how everyone else is able to build such nice documentation
[16:21:07] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:21:11] <CoderGuy> obviously the documentation tool handles this, but I was curious how
[16:21:33] <Lope> Haha "should work" hahahahah
[16:21:41] <Lope> love that phrase on computers.
[16:21:52] <Cork> Lope: when they started to jit javascript caller and callee started to cause big problems for them, so they muched around with it a lot
[16:21:54] <Lope> I just hear toilet flushing sounds when I see that phrase.
[16:22:25] <CoderGuy> it's interesting how I can code for so long and not know like "ya know with these functions/tools there is actually a lot of info on your code you don't know about"
[16:22:40] <CoderGuy> so i'm just building some tools to help out with that
[16:24:30] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[16:26:03] <stenno> Lope: keep in mind you don't have the `arguments` object for big arrow functions
[16:26:10] <stenno> or fat arrow
[16:26:24] <Lope> yeah
[16:26:36] <Lope> not sure what you mean by big/fat arrow
[16:26:45] <Lope> I thought there's only () => {};
[16:26:52] <stenno> thats fat arrow
[16:27:04] <Lope> haha, what's big arrow then?
[16:27:07] <stenno> its the same
[16:27:20] <stenno> i call it big arrow but apparently its called fat arrow
[16:27:24] <stenno> sorry for the confusion
[16:27:26] <Lope> wtf?
[16:27:32] <Lope> it's just arrow?
[16:27:40] <Lope> it's neither big nor small, nor fat.
[16:27:43] <Cork> arrow would be ->
[16:27:47] <Lope> there's only 1 arrow function in JS
[16:27:48] <Cork> and fat arrow is =>
[16:27:55] <stenno> Lope: you are correct
[16:27:55] <Lope> -> doesn't exist in JS?
[16:28:04] <stenno> correct
[16:28:10] <Cork> ya, but from when they speced it they called it fat arrow cause it is "fatter"
[16:28:11] <Lope> yeah, cork you're talking out your ass.
[16:28:23] <Cork> i never said thin arrow exists...
[16:28:30] <Cork> just explained where the name came from
[16:28:38] <Lope> okay.
[16:28:39] <stenno> they are called 'arrow function definition' in the specs
[16:29:13] <stenno> i assume that the name 'big/fat arrow' was taken from languages which already had that feature
[16:29:18] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:29:31] <stenno> for example in perl there is -> and =>
[16:29:35] <Lope> Anyone use FireMonkey ?
[16:29:39] <stenno> so maybe in perl its called fat arrow
[16:29:57] <stenno> and the community just took over the name even though in JS there is only one arrow
[16:30:09] *** Joins: federico_it (~textual@151.51.82.235)
[16:30:25] <stenno> would be my guess
[16:31:10] <Cork> think the working name was fat arrow, and it just stuck even though it changed name in the spec
[16:31:23] <Cork> i remember the blogs talking about the standardization calling it fat arrow
[16:31:37] <stenno> right
[16:32:14] *** Joins: wyclif (~wyclif@user/wyclif)
[16:34:03] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[16:36:46] *** Joins: gggkmp_ (~gggkmp@221.219.77.87)
[16:36:53] *** gggpkm_ is now known as gggpkm
[16:37:36] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[16:37:50] <gggpkm> ƒ create() { [native code] }
[16:38:05] <gggpkm> what is the exact mean of native code
[16:38:34] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 240 seconds)
[16:38:38] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 265 seconds)
[16:41:45] *** Joins: pulse (~pulse@user/pulse)
[16:42:27] <Maxdamantus> It means the code is foreign.
[16:42:45] <Maxdamantus> Not implemented in JS.
[16:47:58] *** Quits: fedorafan (~fedorafan@user/fedorafan) (Remote host closed the connection)
[16:49:35] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[16:49:42] *** Joins: wyclif (~wyclif@user/wyclif)
[16:49:45] *** Joins: fedorafan (~fedorafan@user/fedorafan)
[16:50:29] *** Joins: APic (apic@apic.name)
[16:51:05] *** Joins: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de)
[16:51:42] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[16:52:18] *** Joins: debsan (~debsan@2800:810:471:2ee::1000)
[16:53:34] *** Quits: gggkmp_ (~gggkmp@221.219.77.87) (Ping timeout: 258 seconds)
[16:55:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[16:55:55] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Remote host closed the connection)
[16:56:47] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[16:56:52] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[16:57:01] *** Quits: SoF (~skius@user/skius) (Quit: Ping timeout (120 seconds))
[16:57:20] *** Joins: SoF (~skius@user/skius)
[16:59:14] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[17:06:55] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[17:07:51] *** Joins: wyclif (~wyclif@user/wyclif)
[17:09:14] *** Quits: gggpkm (~gggpkm@221.219.68.57) (Ping timeout: 252 seconds)
[17:12:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[17:18:44] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[17:19:20] *** gggkmp_ is now known as gggkmp
[17:23:24] *** Joins: stenno (~stenno@user/stenno)
[17:25:00] *** Joins: CryptoDavid (uid14990@id-14990.highgate.irccloud.com)
[17:25:46] *** Joins: wyclif (~wyclif@user/wyclif)
[17:27:17] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:30:15] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[17:30:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[17:30:38] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[17:32:04] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[17:32:07] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[17:32:17] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[17:32:20] *** gggkmp_ is now known as gggkmp
[17:32:49] *** Joins: optimist (~optimist@122.163.159.222)
[17:34:42] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[17:34:53] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[17:36:38] <gggkmp> what is the window.target
[17:38:02] <hassoon> gggkmp: where did you see that ??
[17:38:52] <gggkmp> hassoon vuejs source code
[17:40:18] *** Quits: CiaoSen (~Jura@p200300c95722a400dbe4133b387f39b9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:42:55] <hassoon> gggkmp: then that's vuejs specific variable
[17:43:04] <hassoon> not a standard window property
[17:44:41] <gggkmp> hassoon can it be used as a global variable ?
[17:45:05] *** Joins: wyclif (~wyclif@user/wyclif)
[17:45:40] <hassoon> gggkmp: i don't know about vuejs, i suggest you refer to its docs and see what this window.target is made for
[17:46:22] <hassoon> gggkmp: also, in a vue.js environment, you can see if window.target exists in runtime and try to undertand what it's used for
[17:46:53] <gggkmp> hassoon how can i inspect the runtime
[17:47:02] <hassoon> gggkmp: devtools is your friend
[17:47:15] <gggkmp> hassoon you mean chrome devtools ?
[17:47:29] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[17:47:32] <hassoon> gggkmp: yep, firefox's one counts too
[17:47:43] * hassoon pets firefox
[17:47:59] *** Joins: naan (~Naan@user/naan)
[17:48:16] <gggkmp> ah
[17:49:40] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 246 seconds)
[17:49:57] *** Quits: iffraff (~quassel@136.49.178.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:50:01] *** Quits: federico_it (~textual@151.51.82.235) (Ping timeout: 246 seconds)
[17:50:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[17:51:45] *** Quits: jazzy (~jaziz@2600:380:8653:59ba:edff:946b:89ad:7dd5) (Ping timeout: 256 seconds)
[17:54:16] *** Joins: gggpkm_ (~gggpkm@221.219.70.176)
[17:55:20] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[17:56:05] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 252 seconds)
[17:56:46] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[17:56:50] *** Joins: pycode (~pycode@2001:b07:5d28:551:6ec3:a669:57be:8f6e)
[18:00:21] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[18:01:55] *** Quits: gggpkm_ (~gggpkm@221.219.70.176) (Ping timeout: 246 seconds)
[18:03:12] *** Joins: wyclif (~wyclif@user/wyclif)
[18:03:27] *** Joins: gggpkm_ (~gggpkm@221.219.77.87)
[18:04:49] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[18:05:43] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[18:05:59] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 252 seconds)
[18:06:13] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[18:06:20] *** Joins: Kofid (~Kofid@2601:404:d300:5a0:e84e:59b4:2f65:76c2)
[18:06:54] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[18:07:04] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 252 seconds)
[18:07:59] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:ecf4:1450:6bc2:8872) (Remote host closed the connection)
[18:08:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[18:08:23] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c53e:e94d:8e10:acd1)
[18:08:34] *** Joins: happymeal (~happymeal@user/happymeal)
[18:09:07] *** Joins: The_Blode (~Blode@92.40.181.36.threembb.co.uk)
[18:10:39] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[18:12:32] *** Quits: gggpkm_ (~gggpkm@221.219.77.87) (Ping timeout: 258 seconds)
[18:12:54] *** Parts: realies- (~realies@178-169-218-119.haskovo.ddns.bulsat.com) ()
[18:12:59] <cthulchu> .getDate() can return a NaN?
[18:13:26] <cthulchu> I'm getting NaNs sometimes from this: (pickUpDate.getDate()).toString()
[18:14:04] <cthulchu> NaN.getDate() wouldn't return anything since it just throws an exception.
[18:14:24] <cthulchu> and NaN.toString() will just be "NaN", which is what I see
[18:14:33] <cthulchu> in data...
[18:15:38] *** Joins: ray (~ray@user/re)
[18:21:01] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[18:21:07] *** Joins: wyclif (~wyclif@user/wyclif)
[18:22:17] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[18:23:01] <Cork> n> (new Date("")).getDate()
[18:23:02] *** Joins: dunkeln (~dunkeln@94.129.65.28)
[18:23:02] <jellobot> (okay) NaN
[18:23:11] <Cork> so check what value you give to Date
[18:24:05] *** Quits: nomic (~nomic@host86-146-217-198.range86-146.btcentralplus.com) (Quit: Leaving)
[18:24:06] *** Joins: gggpkm_ (~gggpkm@123.113.182.70)
[18:24:22] <cthulchu> OMG
[18:24:29] <Cork> n> (new Date(""))
[18:24:30] <jellobot> (okay) Invalid Date
[18:24:32] <Cork> just to be clear
[18:24:40] <cthulchu> yes
[18:24:42] <cthulchu> thank you
[18:24:57] <cthulchu> I'm doing something like this: dropOffDate = new Date(_analytics.reservation.dropOff.date + " " + _analytics.reservation.dropOff.time);
[18:25:02] *** Quits: gggpkm_ (~gggpkm@123.113.182.70) (Remote host closed the connection)
[18:25:06] <cthulchu> and it works fine... sometimes...
[18:25:17] <Cork> lol nice statement :D
[18:25:22] <cthulchu> hehe
[18:25:28] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[18:25:34] <cthulchu> I'm not sure how I can make it safer though
[18:25:42] <cthulchu> FE gives me date and time. I concat them.
[18:26:06] *** Quits: kmh_ (~kmh@p200300df5f198e006147b5ce666b84fa.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:26:10] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[18:26:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[18:27:07] <Cork> well something like dropOffDate = new Date(_analytics.reservation.dropOff.date + " " + _analytics.reservation.dropOff.time);; if(isNaN(dropOffDate) { validation error }
[18:27:10] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:27:15] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[18:27:25] <Cork> opps
[18:27:39] <Cork> well something like dropOffDate = new Date(_analytics.reservation.dropOff.date + " " + _analytics.reservation.dropOff.time);; if(isNaN(dropOffDate.getDate()) { validation error }
[18:28:03] *** Quits: fedorafan (~fedorafan@user/fedorafan) (Quit: Textual IRC Client: www.textualapp.com)
[18:28:36] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Quit: Leaving)
[18:28:36] *** Quits: luny (~luny@52.178.89.202) (Remote host closed the connection)
[18:28:40] <cthulchu> the problem is, I don't need the error
[18:28:50] <cthulchu> I can't reproduce the issue live
[18:28:56] <cthulchu> it happens to some users sometimes...
[18:29:19] <Cork> cthulchu: so catch when it happens grab the two input values and push it to the server
[18:29:41] <Cork> or in the if case give the input date and ask them to report it, up to you
[18:29:45] <cthulchu> yes, this is a good idea
[18:29:54] <cthulchu> thanks
[18:29:58] <Cork> np
[18:31:36] *** naan is now known as Naan
[18:32:22] <cthulchu> now I want a NaN T-shirt
[18:32:33] <cthulchu> should get a bunch of JS t-shirts
[18:33:33] *** Joins: de-facto (~de-facto@user/de-facto)
[18:35:56] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[18:36:41] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 252 seconds)
[18:37:46] *** Joins: wyclif (~wyclif@user/wyclif)
[18:40:34] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[18:42:37] *** Joins: stenno (~stenno@user/stenno)
[18:42:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:43:24] *** Quits: dunkeln (~dunkeln@94.129.65.28) (Quit: leaving)
[18:44:03] *** Joins: kmh (~kmh@p200300df5f198e00daf0d5d59210689d.dip0.t-ipconnect.de)
[18:48:53] *** Joins: gggpkm (~gggpkm@221.219.70.176)
[18:49:54] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:50:36] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[18:51:16] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[18:56:14] *** Joins: wyclif (~wyclif@user/wyclif)
[18:56:21] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[18:57:56] *** Joins: iffraff (~quassel@136.49.178.170)
[19:00:16] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:01:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:01:22] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[19:01:50] <pikapika> cthulchu, nice name
[19:02:17] *** Joins: _wovixo_ (~wovixo@146.151.192.66)
[19:02:26] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[19:03:16] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[19:03:54] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[19:04:01] <gggkmp> Is a function  created as a object with the function as constructor ?
[19:04:55] *** Quits: gggpkm (~gggpkm@221.219.70.176) (Ping timeout: 246 seconds)
[19:05:48] *** Quits: wovixo (~wovixo@128.104.205.49) (Ping timeout: 272 seconds)
[19:07:06] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Remote host closed the connection)
[19:07:17] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[19:07:22] *** austincheney_ is now known as austincheney
[19:07:50] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[19:12:25] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Quit: WeeChat 1.5)
[19:12:26] *** Joins: wyclif (~wyclif@user/wyclif)
[19:13:46] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[19:15:26] *** Joins: onosendi (~onosendi@user/onosendi)
[19:17:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[19:19:35] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[19:19:41] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 252 seconds)
[19:20:17] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[19:21:42] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:22:58] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[19:24:01] *** Joins: cbleslie2 (~cbleslie@47.148.37.14)
[19:24:08] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[19:24:18] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 240 seconds)
[19:24:33] *** cbleslie2 is now known as cbleslie
[19:26:15] *** Joins: silly (~silly@user/silly)
[19:27:01] <entuland> gggkmp, yes, you can use instantiate functions and use their body as constructor for their own instances
[19:27:17] <entuland> s/can use instantiate/can instantiate
[19:27:45] <gggkmp> entuland what is behind the scene
[19:28:39] *** Joins: wyclif (~wyclif@user/wyclif)
[19:29:24] *** Joins: setuid (sid191390@id-191390.stonehaven.irccloud.com)
[19:30:32] <entuland> not sure I get what you're asking exactly: https://jsfiddle.net/hf2v10te/
[19:32:42] *** Joins: gggpkm (~gggpkm@221.219.70.176)
[19:33:10] <entuland> uh
[19:33:14] <stenno> i am getting help vampire vibes btw
[19:33:26] <stenno> just for your consideration
[19:33:44] <entuland> gggkmp, is gggpkm an alt of yours?
[19:33:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:33:58] <entuland> stenno, what about vampires?
[19:34:28] <stenno> entuland: see symptoms https://communitymgt.fandom.com/wiki/Help_Vampire
[19:34:33] <pycode> hello, i have a list of list like : matrix = [[1,2,3], [10,20,30], [100,200,300]] is it possible to get a slice of the matrix getting the SAME length with with a different number of "columns" this matrix has length 3 then i would like to pick [1:]
[19:34:35] *** mikebald_ is now known as mikebald
[19:34:37] <pycode> is this possible?
[19:34:45] <stenno> entuland: i see at least 4 matches
[19:34:53] <entuland> ahaahah, now I see :P
[19:35:13] <entuland> I used to call them "lazy sponges"
[19:35:19] *** Quits: ormaaj2 (~6174bb9b@user/ormaaj) (Quit: https://mibbit.com Online IRC Client)
[19:35:21] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[19:35:24] <stenno> pycode: you want [1,10,100] as a result then?
[19:35:28] <stenno> or what should the result be
[19:35:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:35:55] <pycode> stenno, no i need [[2,3], [20,30], [200,300]]
[19:36:02] *** Joins: ray (~ray@user/re)
[19:36:13] <stenno> ah
[19:36:20] <stenno> its not done with a simple operator
[19:36:24] <entuland> pycode, you could proxy the call to slice and build the result iteratively
[19:36:31] <stenno> it has to be a map call on the matrix and then slice
[19:36:37] <stenno> yeah or proxy but...
[19:36:42] <stenno> i like proxy but...
[19:36:46] <entuland> mapping the call is just fine
[19:37:00] <pycode> could you give me an example please?
[19:37:32] <entuland> matrix.map(function(entry) { return entry.slice(2); }) or the alike
[19:37:40] <entuland> using arrow functions or the alike
[19:37:55] <stenno> [[1,2,3], [10,20,30], [100,200,300]].map(row => row.slice(2))
[19:37:57] <stenno> yep
[19:38:13] <entuland> if you need the indices to be variable depending on the various needs just create a wrapper that takes the index
[19:38:19] *** Joins: gggkmp_ (~gggkmp@60.10.23.164)
[19:38:30] <entuland> so that you don't have to litter your code with map calls
[19:38:51] <stenno> n> const mslice = (matrix, start, end) => matrix.map(row => row.slice(start,end))
[19:38:52] <jellobot> (okay) undefined
[19:38:58] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[19:39:06] <stenno> something like that
[19:39:15] <stenno> could curry here maybe
[19:39:50] <pycode> ok
[19:41:29] *** Joins: WishBoy (~WishBoy@user/wishboy)
[19:41:46] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[19:42:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:42:54] *** niko is now known as o
[19:43:46] *** Quits: gggpkm (~gggpkm@221.219.70.176) (Ping timeout: 246 seconds)
[19:44:14] *** Quits: Lope (~lope@user/lope) (Quit: Leaving)
[19:44:54] *** Joins: wyclif (~wyclif@user/wyclif)
[19:49:06] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 240 seconds)
[19:49:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:50:29] *** Joins: federico_it (~textual@151.51.82.235)
[19:51:14] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[19:51:29] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 255 seconds)
[19:51:43] <gggkmp_> undefined and undeclared ,which is super
[19:52:28] *** Joins: octav1a (~quassel@173.195.145.98)
[19:53:04] <octav1a> Is there a separate channel for d3 or is it fine to ask about it here?
[19:54:44] *** Joins: gggkmp (~gggkmp@125.33.90.215)
[19:55:15] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[19:55:51] <silly> !ded
[19:55:51] <jellobot> silly, #angularjs - ##bootstrap - #browserify - #coffeescript - #css - #d3.js - #dojo - #emberjs  - #express - #grunt - #gulpjs - #jquery - #knockoutjs - #node.js - #reactjs (also tools used in react.js projects) - #requirejs - #socket.io - #three.js - #webgl - ##typescript
[19:56:10] <GreenJello> that factoid hasn't been updated for libera
[19:56:36] *** Quits: gggkmp_ (~gggkmp@60.10.23.164) (Ping timeout: 268 seconds)
[19:56:44] <GreenJello> it's fine to ask about it here, or you could see if #d3 is a thing
[19:56:44] <octav1a> okay, thank you.
[19:56:47] <entuland> what does ded stand for, there?
[19:56:54] <GreenJello> dedicated
[19:57:06] <entuland> gotcha
[19:57:13] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Ping timeout: 268 seconds)
[19:57:46] *** Joins: wovixo_ (~wovixo@128.104.205.49)
[19:58:34] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[19:59:11] *** Quits: gggkmp (~gggkmp@125.33.90.215) (Ping timeout: 252 seconds)
[20:00:56] *** Quits: _wovixo_ (~wovixo@146.151.192.66) (Ping timeout: 252 seconds)
[20:01:52] *** Parts: setuid (sid191390@id-191390.stonehaven.irccloud.com) ()
[20:02:14] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[20:02:40] <Kirjava> the d3 channel is #d3.js
[20:02:56] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 258 seconds)
[20:03:13] *** Joins: wyclif (~wyclif@user/wyclif)
[20:03:19] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[20:03:26] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 272 seconds)
[20:04:24] *** Joins: ormaaj2 (~6174bb9b@user/ormaaj)
[20:06:19] *** Joins: _wovixo_ (~wovixo@146.151.192.66)
[20:08:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[20:09:22] *** Quits: wovixo_ (~wovixo@128.104.205.49) (Ping timeout: 240 seconds)
[20:09:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[20:10:40] *** Joins: stenno (~stenno@user/stenno)
[20:11:29] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[20:14:24] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:15:34] *** Joins: chao (~stenno@user/stenno)
[20:15:58] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 258 seconds)
[20:16:11] <gggkmp> can I run nodejs on phone
[20:16:35] *** Quits: optimist (~optimist@122.163.159.222) (Quit: Leaving...)
[20:16:51] <chao> gggkmp: you should get used to using google
[20:17:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233)
[20:17:16] *** stenno is now known as Guest4755
[20:17:16] *** Quits: Guest4755 (~stenno@user/stenno) (Killed (calcium.libera.chat (Nickname regained by services)))
[20:17:16] *** chao is now known as stenno
[20:17:45] <stenno> gggkmp: try to google your questions first before asking them in this channel
[20:18:46] *** Quits: pycode (~pycode@2001:b07:5d28:551:6ec3:a669:57be:8f6e) (Ping timeout: 246 seconds)
[20:18:54] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:21:06] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[20:21:17] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[20:21:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:21:56] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[20:22:58] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 240 seconds)
[20:23:42] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[20:24:51] *** Quits: iffraff (~quassel@136.49.178.170) (Read error: Connection reset by peer)
[20:26:14] <entuland> or any channel for that matter :P
[20:27:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[20:29:22] *** gggpkm_ is now known as gggpkm
[20:30:58] *** Joins: iffraff (~quassel@136.49.178.170)
[20:31:47] <wroathe> GreenJello: After some discussion last night with banana I ended up making a more flexible version of that fetch wrapper you liked that could potentially be the start of an entire client built on composition: https://jsfiddle.net/nqjdwspa/
[20:32:25] *** Joins: Rockwood (~Rocky@user/rocky)
[20:33:00] *** Joins: Rockwood_ (~Rocky@user/rocky)
[20:33:37] <iffraff> GreenJello: if you are on, I'm totally blocked on this god foresaken typscript in node setup.  You tend to have a pretty extensive knowledge about ... everything.  you got a sec?
[20:34:23] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[20:34:31] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[20:34:50] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[20:34:55] *** Quits: ormaaj2 (~6174bb9b@user/ormaaj) (Quit: https://mibbit.com Online IRC Client)
[20:35:20] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[20:35:31] <GreenJello> wroathe, looks decent aside from the error handling
[20:35:57] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 265 seconds)
[20:35:58] <wroathe> GreenJello: Hmm?
[20:36:17] <GreenJello> iffraff, I know very little about the native ESM stuff in node, and the ts-node readme doesn't seem to mention the thing you're doing
[20:36:29] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 255 seconds)
[20:36:56] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 255 seconds)
[20:36:56] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[20:37:09] <iffraff> well, for once we are on (somewhat) equal footing.  Although I'm learning a hell of alot, none of it is useful and none of it makes me happy.
[20:37:17] <GreenJello> wroathe, the errors are all over the place.  Sometimes you get a SyntaxError which is an Error, and other times you just get a Response, that may or may not have had its body consumed already
[20:37:36] <GreenJello> it's unclear how you're supposed to handle errors here
[20:38:08] *** Rockwood_ is now known as Rockwood
[20:38:17] <wroathe> GreenJello: Yeah, it's up to the user to set up the error handling how they want. This just sets you up with the tools to compose that together.
[20:38:45] <wroathe> GreenJello: For example, throw resp could be throw a new UnexpectedContentTypeError with the resp as a property
[20:38:53] <GreenJello> iffraff, oh it does mention it if I ctrl-f, but you also need to read the ESM section for required config changes
[20:39:03] <Intelo> reasking: Hi, I am using webpack and react with scss. I want to load different css rules for each user (preferences come from database once user logins in to site). How c I cdo that? Challenge is that the build is made once for all users. and it already has the css rules in it. I am not able to load dynamic css rules for each user that will affect
[20:39:03] <Intelo> all the website. ?
[20:39:11] <GreenJello> you didn't mention if you configured it for that
[20:39:49] *** Joins: wyclif (~wyclif@user/wyclif)
[20:39:59] *** Quits: cismee (~cisme_@user/cisme/x-1186982) (Ping timeout: 252 seconds)
[20:40:13] <Kirjava> n> [...Array(30)].map((_,i) => '.·˙'[(Math.sin(++i)*2|0)+1]).join`` + ':>'
[20:40:14] <jellobot> (okay) '˙˙·..·˙˙·...·˙˙·..·˙˙·..·˙˙·..:>'
[20:40:27] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[20:41:16] *** Quits: incognito (~relativit@user/incognito) (Ping timeout: 258 seconds)
[20:42:29] *** Joins: chao (~stenno@user/stenno)
[20:42:45] <onosendi> Is this the correct way to use submit outside of <form> ? https://dpaste.org/YjpO
[20:42:51] <chao> nice one Kirjava
[20:43:09] <chao> i wonder why the second thingy has three ...
[20:43:30] <chao> rounding 'error'
[20:43:36] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Remote host closed the connection)
[20:43:41] <Kirjava> yea just a precision thing
[20:44:24] <Kirjava> onosendi: it's a way
[20:44:33] *** Joins: gggkmp (~gggkmp@221.219.70.176)
[20:44:43] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[20:45:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[20:45:06] <wroathe> Intelo: If you've got user-dependent skins depending on some attribute of your users the simple way would be to just put a class on the body element reflecting what the current skin is
[20:45:08] <GreenJello> wroathe, sure, it looks like you can do that with the code here, but you might also want the request object in the respFns to produced better contextual errors
[20:45:14] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 272 seconds)
[20:45:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[20:45:42] <wroathe> GreenJello: Potentially. That's easy enough to add.
[20:45:49] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[20:46:23] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[20:46:28] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:46:33] <GreenJello> also there doesn't seem to be a way to implement a retry with the current API
[20:46:54] <wroathe> GreenJello: I would think you would want that at a new layer of abstraction
[20:47:01] <wroathe> GreenJello: That uses this aPI
[20:47:04] <wroathe> API*
[20:47:38] <wroathe> retry(3, () => fetchAuthJson(...)).then(...)
[20:47:40] <wroathe> Or some such
[20:48:25] <GreenJello> retries are usually conditional, so to do it externally you'd need to know about all of the error types the client can produce and match on them
[20:49:13] <chao> 'repeat something until a condition is met' is pretty difficult without using loops :P
[20:49:37] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[20:49:37] <GreenJello> the other situation is where you want to produce just the response body from the returned promise
[20:49:48] <chao> guess you have to do the .reduce promise chain trick or async generators
[20:50:01] <GreenJello> you could do both of those if you fold the respFns instead of executing them for side effects
[20:50:17] <wroathe> GreenJello: There's all sorts of ideas you could add to it to make it a full client :P
[20:50:25] <wroathe> GreenJello: Glad to see you're enthusiastic :P
[20:50:55] <wroathe> GreenJello: And to your retry point: there's no reason that retry function couldn't take a predicate function
[20:51:07] <wroathe> GreenJello: The point is just to keep composing your way to success
[20:52:37] *** Joins: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[20:53:22] <wroathe> GreenJello: Producing the response body only isn't something I would personally add to this. If you need that, add a wrapper.
[20:54:29] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 255 seconds)
[20:54:45] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[20:56:22] *** Joins: gggkmp_ (~gggkmp@60.10.194.47)
[20:56:55] *** Quits: gggkmp (~gggkmp@221.219.70.176) (Ping timeout: 246 seconds)
[20:57:02] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 268 seconds)
[20:57:11] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[20:58:17] *** Joins: wyclif (~wyclif@user/wyclif)
[20:58:42] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[20:58:44] <Intelo> wroathe ya but how to make it dynamic
[20:58:53] <Intelo> the main issue is webpack and scss
[20:59:09] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 265 seconds)
[20:59:39] <wroathe> Intelo: Do you mean dynamic in the sense of dynamically _loading_ the CSS, or dynamically changing what CSS gets applied at runtime?
[20:59:52] *** Quits: jonifen (~jonifen@user/jonifen) (Quit: Leaving)
[21:00:03] <wroathe> Intelo: Because if the payload is small enough you can just load all of the skins in your bundle. The skins that aren't active won't hurt anything.
[21:00:18] <wroathe> Intelo: It's then just a matter of conditionally changing that body class depending on the user's preference
[21:00:30] <Intelo> wroathe both
[21:00:41] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[21:00:51] <wroathe> className={user.darkMode ? 'dark-mode' : 'light-mode'}
[21:01:11] <wroathe> Intelo: If the size of the individual skins isn't very large I wouldn't even bother with dynamically loading the CSS.
[21:01:34] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[21:01:38] <Intelo> its not about themes/ skins only. each user can override the color of a button only
[21:01:40] <wroathe> And a large amount of your CSS shouldn't be skin dependent anyway
[21:01:44] <Intelo> and each user will see different color
[21:02:01] <Intelo> in that case, I cannot just compile .scss with empty placeholder for buttons
[21:02:10] *** Joins: relic (~Username@50-25-40-44.kntncmtc01.res.dyn.suddenlink.net)
[21:02:39] <wroathe> Then that has nothing to do with Webpack. If they can really change it to any color you'll need to store that data in your database and set the `style` property based on what is loaded
[21:02:58] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 240 seconds)
[21:02:58] <wroathe> Or dynamically generate CSS on the server side for each user
[21:03:07] <wroathe> This is a much larger task
[21:03:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:03:30] *** Quits: gggkmp_ (~gggkmp@60.10.194.47) (Ping timeout: 265 seconds)
[21:04:05] <Intelo> wroathe the main color values will be in database for each user. thats not a problem. the injecting that into scss is the issue
[21:06:34] <iffraff> GreenJello: fwiw I have found that ts-node is not picking up my ts config which could explain a lot but ts-node/esm is not letting me specify the tsconfig.  fun
[21:07:32] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 255 seconds)
[21:07:36] <iffraff> ah you have to do it in the env vars.
[21:07:46] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[21:08:08] *** Quits: xse (~xse@user/xse) (Quit: mwah)
[21:08:37] *** Quits: Booster2ooo (~Booster2o@91.183.83.5) (Read error: Connection reset by peer)
[21:10:10] *** Quits: Popzi_ (~Popzi@2.29.154.83) (Ping timeout: 240 seconds)
[21:10:12] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[21:10:32] <wroathe> Intelo: Injecting it into the SCSS is certainly one approach, but that would need to be done on the server and not as part of your webpack build for the UI
[21:11:05] *** Joins: wyclif (~wyclif@user/wyclif)
[21:11:06] <wroathe> Intelo: Generally speaking your client-side build is for thing that can be statically known. Once you're dealing with dynamic user input you can't just rebuild the entire UI each time.
[21:11:52] <wroathe> Intelo: But you could use SCSS as a means of dynamically generating CSS on the server - although that would be quite a heavy approach, and might not scale well depending on the number of users you expect and the number of distinct stylistic differences
[21:12:03] *** Joins: Popzi (~Popzi@2.29.154.83)
[21:12:26] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 252 seconds)
[21:12:27] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Ping timeout: 268 seconds)
[21:12:33] <wroathe> Intelo: Also, unless you carefully design it to be so, you'd quite likely end up regenerating and serving CSS that is in no way dependent on the values the user is supplying.
[21:12:46] <wroathe> Intelo: So that's why I said this is a more challenging task.
[21:15:31] *** Joins: realies (~realies@user/realies)
[21:15:41] <realies> n> true
[21:15:42] <jellobot> (okay) true
[21:15:53] <Intelo> wroathelet me know exactly how to use css --var in scss
[21:16:00] <Intelo> wroathe
[21:16:00] <realies> n> "asda@#$*(&.wav".replace(/[\W_\\\\.]/g, "-")
[21:16:01] <jellobot> (okay) 'asda-------wav'
[21:16:10] <realies> how to match dot in that regex
[21:16:18] <realies> n> "asda@#$*(&.wav".replace(/[\W_\\.]/g, "-")
[21:16:18] <jellobot> (okay) 'asda-------wav'
[21:16:27] <wroathe> Intelo: It's been years since I used SCSS. The details are something you'll have to look up yourself.
[21:16:42] <Intelo> np
[21:16:57] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[21:17:03] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[21:17:08] <realies> n> "asda@#$*(&.wav".replace(/[^\w_.]/g, "-")
[21:17:09] <jellobot> (okay) 'asda------.wav'
[21:17:12] <realies> oh
[21:17:13] <Rockwood> scss outdated stuff?
[21:17:15] *** Joins: Naan (~Naan@user/naan)
[21:17:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[21:17:36] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[21:19:19] *** Joins: Croves (~Croves@2804:14c:578b:9102:b1c6:fb69:47f1:6720)
[21:20:24] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:20:25] <Kirjava> n> Intl.NumberFormat('th-TH-u-nu-thai',{minimumSignificantDigits:2}).format``.replace((+11e20+[])[-~+[]],new Intl.PluralRules('ar-EG').select(-~-~+[])[-~+[]])
[21:20:25] <jellobot> (okay) '๐w๐'
[21:20:59] <Donitz> for webgl, could you store 3d models in a format which would require "reverse engineering" to extract
[21:21:25] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 246 seconds)
[21:21:27] <Donitz> if those are the requirements in the model license
[21:24:15] *** Joins: xse (~xse@user/xse)
[21:24:30] <wroathe> Intelo: Regardless, you probably don't want to involve Webpack or any SCSS command line interfaces in this. If there are SASS library bindings available for your server side language, I'd probably prefer that.
[21:24:50] <Intelo> hm
[21:25:15] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[21:26:10] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[21:26:32] *** Parts: Croves (~Croves@2804:14c:578b:9102:b1c6:fb69:47f1:6720) ()
[21:28:46] *** Joins: wyclif (~wyclif@user/wyclif)
[21:29:30] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[21:30:43] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 258 seconds)
[21:31:21] *** Joins: Deide (~Deide@217.155.19.23)
[21:31:21] *** Quits: Deide (~Deide@217.155.19.23) (Changing host)
[21:31:21] *** Joins: Deide (~Deide@user/deide)
[21:32:13] *** Joins: chao (~stenno@user/stenno)
[21:32:20] <wroathe> GreenJello: Attaching the request to the response was a good idea: https://jsfiddle.net/ex4ojr51/
[21:33:22] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Ping timeout: 272 seconds)
[21:34:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:34:57] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[21:35:38] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[21:36:21] *** Joins: Pajus (~Pajus@user/pajus)
[21:37:29] *** Joins: gggkmp (~gggkmp@60.10.194.47)
[21:39:23] <realies> Kirjava, lol
[21:39:29] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 255 seconds)
[21:39:38] *** Quits: The_Blode (~Blode@92.40.181.36.threembb.co.uk) (Changing host)
[21:39:38] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[21:39:50] *** Joins: funhouse (~Guest99@24.244.23.149)
[21:40:12] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 268 seconds)
[21:40:31] <Intelo> Is there a way to just create an .scss bundle file that will have all my .scss files and .css files data?  Note that I am wanting .scss. Not transpiled css. <-webpack?
[21:41:48] <wroathe> I don't understand this thing you're making :P
[21:45:19] *** Joins: wyclif (~wyclif@user/wyclif)
[21:46:13] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Remote host closed the connection)
[21:46:36] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[21:49:12] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 272 seconds)
[21:49:33] *** Joins: pavonia (~user@user/siracusa)
[21:50:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:50:35] *** Joins: onosendi (~onosendi@user/onosendi)
[21:52:05] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 255 seconds)
[21:52:59] *** Quits: gggkmp (~gggkmp@60.10.194.47) (Ping timeout: 255 seconds)
[21:53:27] <Intelo> wroathe I will transpile on server side
[21:53:30] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[21:53:49] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:54:16] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 272 seconds)
[21:55:33] <Intelo> In webpack Is there a way to just create an .scss bundle file that will have all my .scss files and .css files data?  Note that I am wanting .scss. Not transpiled css.
[21:56:27] *** Quits: Pajus (~Pajus@user/pajus) (Quit: leaving)
[21:56:46] *** Joins: Pajus (~Pajus@user/pajus)
[21:57:25] <birkoff> how can I build a table in two columns and a header of 2-3 separate rows spanning both columns that would turn into one column for slimmer screens ?
[21:57:51] *** Quits: CryptoDavid (uid14990@id-14990.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[21:57:56] *** Joins: Pajus_ (~Pajus@user/pajus)
[21:58:03] *** Quits: Pajus_ (~Pajus@user/pajus) (Client Quit)
[21:58:42] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 272 seconds)
[22:02:40] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[22:03:02] *** Joins: wyclif (~wyclif@user/wyclif)
[22:03:33] <GreenJello> birkoff, not exactly sure what you're describing. Maybe start with a mockup showing both versions
[22:04:13] *** Quits: Pajus (~Pajus@user/pajus) (Quit: Lost terminal)
[22:04:16] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[22:04:29] *** Joins: cisme_ (~cisme_@108-218-190-101.lightspeed.frsnca.sbcglobal.net)
[22:05:46] <birkoff> er I forgot to mention a form in a table
[22:05:54] <birkoff> with pairs of label:input
[22:07:23] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 255 seconds)
[22:08:00] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:2042:a71:4322:6233) (Quit: Leaving)
[22:08:13] *** Quits: funhouse (~Guest99@24.244.23.149) (Ping timeout: 246 seconds)
[22:11:06] *** Quits: happymeal (~happymeal@user/happymeal) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[22:11:45] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[22:12:02] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.1)
[22:12:54] <austincheney> any idea how in node to send a websocket message to a port and path on localhost?  Creating a socket looks like net.createConnection but it does not seem that allows specifying a path and a port
[22:13:37] <GreenJello> austincheney, https://github.com/websockets/ws
[22:14:07] <GreenJello> the protocol isn't trivial to implement on top of a TCP socket
[22:14:18] <austincheney> thanks
[22:16:23] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 255 seconds)
[22:20:30] <birkoff> https://i.postimg.cc/FKBXC3Ry/Drawing.png
[22:20:53] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[22:21:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:22:31] <birkoff> GreenJello: ^
[22:23:12] <birkoff> and for one column all the label+input rows would just stack on top of one another
[22:23:42] <GreenJello> this doesn't look like it should be a table
[22:24:23] <GreenJello> why are you using one?
[22:25:23] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 255 seconds)
[22:26:46] <birkoff> easier to write I guess as opposed to flexbox widths and layouts
[22:27:52] <GreenJello> it's going to be easier to do this with flexbox or css-grid
[22:28:33] <GreenJello> and a media query for switching to single column would be fine
[22:29:37] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Izem)
[22:30:01] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[22:30:36] <GreenJello> the alternative would be to display: contents; a bunch of stuff on small screens, and display: block; on the td elements
[22:30:45] *** Joins: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be)
[22:31:27] <GreenJello> but using table for layout fell out of style a decade ago, or more
[22:31:43] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[22:31:45] <birkoff> even for forms ?
[22:31:51] <birkoff> alone
[22:31:59] *** Parts: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) ()
[22:32:26] *** Quits: ray (~ray@user/re) (Ping timeout: 265 seconds)
[22:32:37] <GreenJello> for everything
[22:33:19] *** Joins: ray (~ray@user/re)
[22:33:33] <GreenJello> and part of the reason is that it's really bad for responsive design
[22:33:42] <GreenJello> which you're running into here
[22:34:08] *** Joins: happymeal (~happymeal@user/happymeal)
[22:34:50] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 255 seconds)
[22:34:59] *** Joins: wyclif (~wyclif@user/wyclif)
[22:37:37] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[22:39:06] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[22:39:15] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[22:39:29] *** Joins: caleb (sid225275@user/ace)
[22:40:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[22:43:38] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 252 seconds)
[22:44:38] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[22:45:48] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:70ea:eb3b:d5a4:82bf) (Quit: Textual IRC Client: www.textualapp.com)
[22:47:17] *** Joins: Betal (~Beta@user/betal)
[22:48:48] <caleb> on the topic of memory management and garbage collection profiling, there's a disconnect between what the Chrome Task Manager shows as memory usage vs what a heap snapshot shows in the memory profiler.
[22:49:10] *** Quits: surfer91 (~surfer91@102.67.16.112) (Ping timeout: 246 seconds)
[22:49:11] <caleb> is the task manager simply showing all memory that Chrome is using for the tab
[22:49:30] <caleb> and the heap snapshot is what the js is using itself?
[22:51:22] *** Joins: dolor_avis (~dolor_avi@user-5-173-14-171.play-internet.pl)
[22:51:24] *** Joins: wyclif (~wyclif@user/wyclif)
[22:51:47] <GreenJello> that's what I'd expect (task manager using RSS of the tab process), but not 100% sure
[22:55:22] <GreenJello> this suggests there's a "process private memory usage" value that chrome tracks, but I'm not familiar with the term https://developer.chrome.com/docs/extensions/reference/processes/#type-Process
[22:55:45] *** Quits: happymeal (~happymeal@user/happymeal) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[22:56:12] <GreenJello> https://www.chromium.org/developers/memory-usage-backgrounder defines "Private Working Set" as "Resident pages which are private only to this process"
[22:56:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[22:58:08] *** Joins: happymeal (~happymeal@user/happymeal)
[22:59:33] *** chao is now known as stenno
[23:06:47] *** Joins: thiras (~thiras@user/thiras)
[23:07:44] *** Joins: wyclif (~wyclif@user/wyclif)
[23:08:30] *** Joins: wovixo_ (~wovixo@128.104.205.49)
[23:08:59] *** Quits: happymeal (~happymeal@user/happymeal) (Read error: Connection reset by peer)
[23:09:55] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 246 seconds)
[23:10:09] <caleb> iiinteresting
[23:10:41] <rustyshackleford> every time I configure eslint and prettier I want to hang myself
[23:11:05] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:11:37] <GreenJello> rustyshackleford, I just cp from another project
[23:11:49] <rustyshackleford> I'm trying but some projects use flow
[23:11:51] <rustyshackleford> some us ts
[23:12:08] <rustyshackleford> personal project I start with airbnb
[23:12:11] *** Quits: _wovixo_ (~wovixo@146.151.192.66) (Ping timeout: 255 seconds)
[23:12:12] *** Joins: altdev (~altdev@c-73-14-187-235.hsd1.co.comcast.net)
[23:12:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:13:50] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[23:14:37] *** Quits: altdev (~altdev@c-73-14-187-235.hsd1.co.comcast.net) (Client Quit)
[23:16:38] *** Quits: dolor_avis (~dolor_avi@user-5-173-14-171.play-internet.pl) (Quit: dolor_avis)
[23:18:29] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 255 seconds)
[23:19:27] *** Quits: iffraff (~quassel@136.49.178.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:19:30] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:20:04] <wroathe> rustyshackleford: You could keep a repo on github that has a node module with plugins for the different baseline configuration you use
[23:20:18] <rustyshackleford> yeah... I'll need a couple
[23:20:23] <rustyshackleford> I think I got it sorted out
[23:20:33] <wroathe> rustyshackleford: Then starting a new project would be as simple as adding that as a dependency to your package.json and adding an .eslintrc that extends one of your configurations in that module
[23:20:35] <rustyshackleford> trying to extend a handful of configs, and they start clashing with eachother
[23:20:46] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[23:20:59] <rustyshackleford> the difference between plugins and extends is kind of confusing
[23:21:34] *** Joins: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net)
[23:22:32] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[23:22:54] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[23:23:08] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[23:24:38] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[23:25:01] *** jmcantre1 is now known as jmcantrell
[23:25:23] *** Joins: wyclif (~wyclif@user/wyclif)
[23:27:03] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:27:30] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[23:27:32] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 265 seconds)
[23:27:56] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 255 seconds)
[23:28:35] *** Joins: The_Blode (~Blode@92.40.180.149.threembb.co.uk)
[23:29:34] *** jmcantrell is now known as Guest1325
[23:29:35] *** Quits: Guest1325 (~weechat@user/jmcantrell) (Killed (sodium.libera.chat (Nickname regained by services)))
[23:29:35] *** __jmcantrell__ is now known as jmcantrell
[23:30:12] *** Quits: The_Blode (~Blode@92.40.180.149.threembb.co.uk) (Changing host)
[23:30:12] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[23:32:08] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[23:33:18] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:33:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:33:27] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Killed (calcium.libera.chat (Nickname regained by services)))
[23:33:27] *** __jmcantrell__ is now known as jmcantrell
[23:33:59] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:33:59] *** jmcantrell is now known as Guest218
[23:33:59] *** __jmcantrell__ is now known as jmcantrell
[23:34:10] *** Joins: ttys000 (~ttys000@user/ttys000)
[23:36:52] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 272 seconds)
[23:37:09] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:3c73:1ee4:f38f:e0fb)
[23:38:17] *** Quits: Guest218 (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[23:38:29] *** Quits: TheAceOfHearts_ (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[23:40:55] <wroathe> GreenJello: Alright, last one. Now with error handling that pins and the request and response, if available, on the error object: https://jsfiddle.net/3f567dxn/1/
[23:41:14] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[23:41:37] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[23:42:33] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:3c73:1ee4:f38f:e0fb) (Quit: Textual IRC Client: www.textualapp.com)
[23:45:14] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.2)
[23:45:18] *** Joins: wyclif (~wyclif@user/wyclif)
[23:46:22] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 272 seconds)
[23:46:41] *** Quits: Heraes (~Heraes@user/romarain) (Quit: Leaving)
[23:48:05] *** Quits: Intelo (~Intelo@88.246.74.132) (Quit: Client closed)
[23:50:18] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
[23:50:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 255 seconds)
[23:54:19] *** Quits: wovixo_ (~wovixo@128.104.205.49) (Quit: Leaving)
[23:54:43] *** Quits: comatory_ (~ondrejsyn@93.99.127.7) (Ping timeout: 246 seconds)
[23:55:49] *** Joins: fedorafan (~fedorafan@user/fedorafan)
[23:59:25] *** Joins: comatory_ (~ondrejsyn@93.99.127.7)
