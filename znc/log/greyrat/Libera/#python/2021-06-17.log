[00:00:10] <theseb> python-pip-whl : Breaks: python3-virtualenv (< 20.0.17-1ubuntu0.3) but 20.0.17-1 is to be installed
[00:00:47] *** Quits: philipp64|work (~philipp64@174.27.8.12) (Remote host closed the connection)
[00:01:06] *** Joins: alguien (~alguien@user/alguien)
[00:01:22] *** Quits: browniebroke (uid501792@id-501792.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:01:24] *** Quits: Laibsch (~leggewie@dynamic-093-131-166-036.93.131.pool.telefonica.de) (Ping timeout: 268 seconds)
[00:01:26] *** Joins: philipp64|work (~philipp64@174.27.8.12)
[00:02:07] *** Joins: sedeki (~textual@user/sedeki)
[00:02:41] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 272 seconds)
[00:03:21] <SnoopJ> theseb, do you have packages that depend on python-pip-whl? I would think you'd have better luck with python3-pip and python3-wheel
[00:03:58] <theseb> SnoopJ: i don't know
[00:04:00] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (Quit: Bye bye!)
[00:04:13] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[00:04:22] <theseb> SnoopJ: can i perhaps delete python-pip-whl and switch to python3-wheel?
[00:04:38] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130)
[00:04:48] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[00:05:36] *** Quits: y04nn (~y04nn@81.17.24.204) (Ping timeout: 268 seconds)
[00:06:29] *** Quits: Narrat (~omnius@p200300df5f0a430006ea56fffe2e7cdc.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[00:07:14] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Quit: Lost terminal)
[00:07:24] *** Quits: jpic_ (~jpic@82.142.9.26) (Quit: leaving)
[00:07:40] *** Joins: jpic (~jpic@82.142.9.26)
[00:07:54] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[00:08:23] *** Joins: thiras (~thiras@user/thiras)
[00:08:33] *** Quits: otto (~otto@109.255.216.213) (Changing host)
[00:08:33] *** Joins: otto (~otto@user/otto)
[00:08:41] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[00:09:25] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 268 seconds)
[00:10:47] *** Joins: Fiji- (~Fiji@user/fiji)
[00:11:33] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[00:11:46] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 268 seconds)
[00:12:00] *** Joins: f1se4 (~f1se4@213.195.98.55)
[00:12:31] <SnoopJ> theseb, maybe; `apt show python-pip-whl` should tell you if any other packages depend on it
[00:12:38] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 244 seconds)
[00:12:55] *** Joins: jpic (~jpic@82.142.9.26)
[00:13:16] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[00:13:20] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[00:13:31] *** Joins: jpic (~jpic@82.142.9.26)
[00:13:46] *** Joins: Narrat (~omnius@p200300df5f0a430006ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:14:11] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 244 seconds)
[00:16:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[00:16:37] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[00:18:19] *** Quits: Narrat (~omnius@p200300df5f0a430006ea56fffe2e7cdc.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[00:18:22] *** Quits: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.1)
[00:18:42] *** Leonarbro_ is now known as Leonarbro
[00:18:46] <sco1> xaltsc: mypy follows imports
[00:19:00] <sco1> Unless you tell it not to
[00:19:22] <xaltsc> sco1: precisely, mypy reports errors for files that are not imported in the specified file
[00:19:30] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[00:19:54] <xaltsc> I even tested on a file that has no imports whatsoever
[00:21:20] <sco1> Can you provide a functional example? I can't reproduce this
[00:21:23] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[00:21:38] <xaltsc> Hum, actually, I have some imports in the __init__.py of the root folder, so maybe that's it ?
[00:21:48] <teut> https://stackoverflow.com/questions/11697887/converting-django-queryset-to-pandas-dataframe
[00:21:52] <xaltsc> Commenting them seems to resolve the problem
[00:22:09] <teut> here the first answer clearly says that tuples are efficient than dicts
[00:22:20] *** Quits: scadman (~scadman@cpc145252-maid8-2-0-cust473.20-1.cable.virginm.net) (Quit: Konversation terminated!)
[00:22:28] <teut> yesterday someone said that namedtuples are bad
[00:22:37] <teut> can I get a reason?
[00:22:48] <gcbirzan> heh
[00:22:54] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[00:23:03] <gcbirzan> bad compared to what?
[00:23:06] <gcbirzan> dataclasses?
[00:23:21] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[00:23:31] <teut> I dont exactly remember
[00:23:44] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[00:23:49] *** Joins: HalfAShark (~HalfAShar@user/halfashark)
[00:23:53] <teut> yesterday I was answering a question and someone said to me
[00:23:53] *** Quits: milosz__ (~milosz@user/milosz) (Remote host closed the connection)
[00:23:59] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[00:24:00] *** Joins: Narrat (~omnius@p200300df5f0a430006ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:24:28] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[00:24:31] <bjs> teut: namedtuples are just bad classes
[00:24:36] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[00:24:40] <sco1> lol
[00:24:45] <grym> where's the joke
[00:24:52] <emerent> namedtuples are good when you have an api that needs tuples but you want to give them better names
[00:24:56] <bjs> teut: there used to be many places in the stdlib that returned tuples with fields
[00:24:58] <teut> yes grym said
[00:25:03] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[00:25:04] <grym> emerent: yep!  that's just pretty rare
[00:25:13] <bjs> teut: but people realised they wanted to return classes.  But it was too late,  the stdlib was already returning tuples.
[00:25:16] <emerent> if they don't need to be tuples, don't use namedtuples
[00:25:19] <bjs> teut: hence, namedtuple. it's a class, but it's also a tuple.
[00:25:27] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[00:25:36] <emerent> because you get all the tuple behavior with it like immutability and iterability
[00:25:39] <bjs> teut: modern APIs never return tuples, they just return classes, so there's no need for namedtuple these days
[00:25:43] *** Joins: sudomann (~sudomann@c-69-255-78-244.hsd1.va.comcast.net)
[00:25:44] <alguien> SnoopJ, but I can't just put the .pth somewhere in my source code
[00:26:13] <emerent> yeah, so use classes (dataclasses maybe) unless you're constrained by an existing api
[00:26:38] <dwt_> I'd argue that a little. Especially with typing.NamedTuple, and especially if you prefer to write more functional code and use a type-checker like mypy, named tuples are exactly what you want when you want a record type that's just a "bag of data" with no interesting invariants or associated methods.
[00:26:45] <teut> well tuples are immutable so for just Read only operations why arent they good bjs?
[00:26:50] <bjs> dwt_: except for the tuple thing
[00:26:55] <teut> over classes
[00:27:00] <bjs> teut: because they're tuples
[00:27:02] <nedbat> dwt_: aren't dataclasses better for that?
[00:27:30] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 240 seconds)
[00:27:33] *** Quits: rhax (~yannick@user/rhax) (Quit: Leaving)
[00:27:40] <teut> arent tuples better than lists?
[00:27:43] *** Joins: Adoi (~Adoi@user/adoi)
[00:27:44] <teut> for read only
[00:27:46] <nedbat> teut: they are different
[00:27:55] <teut> for read only
[00:28:01] <dwt_> nedbat: I like the minimalism of named tuples, especially if I'm going to create thousands of the buggers, mostly for efficiency reasons. If I need more complex validation logic, I'll use a dataclass with frozen=True and a __post_init__ hook
[00:28:13] <bjs> teut: tuples aren't really designed for "immutable lists"
[00:28:18] *** Quits: ssbr (~ssbr@c-174-61-157-141.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[00:28:24] <teut> then?
[00:28:31] <nedbat> dwt_: it doesn't bother you that t1==t2 even if t1 and t2 are different "classes" of namedtuple?
[00:28:32] <bjs> teut: and an "immutable list" isn't a good use for a namedtuple either (why would a homogenous collection need names)
[00:28:39] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[00:28:46] <dwt_> nedbat: but frozen=True is a runtime mechanism, which means more overhead. TLDR version is if I want immutability, I'd rather start with something immutable (a tuple/named tuple) than something mutable and try to take mutability away
[00:28:48] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[00:29:04] <bjs> teut: you quite often do not want all of the tuple behaviours,  you want __eq__/__hash__ that understands what type it is,  you do not want iteration over unrelated fields,  you don't want indexing with random numbers to access fields.
[00:29:06] <nedbat> dwt_: i agree that it's awkward to add immutability to a dataclass
[00:29:15] <dwt_> nedbat: everything about Python's runtime type "system" bothers me, but I run mypy aggressively to stop me from doing those kinds of things in the first place
[00:29:17] <teut> well I mean its confusion , like if you forget the order in a tuple
[00:29:23] <teut> so names help
[00:29:29] <bjs> teut: yes so why do you want a tuple?
[00:29:30] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com) (Ping timeout: 240 seconds)
[00:29:45] <bjs> namedtuples are tuples,  just don't make things tuples then the order doesn't matter.
[00:30:04] <alguien> anyone know how to specify a local directory as the source for a library in the pipfile instead of the default one?
[00:30:28] <nedbat> dwt_: ok, it sounds like you've thought it all through
[00:30:32] <bjs> teut: if I were making a modern API that returned objects with a fixed set of names, i'd use a class (probably an attrs/dataclass class). Since it's very rare to actually want to return a tuple
[00:31:20] <teut> well classes are good but if your data is in a fixed format like parsing some csv
[00:31:27] <dwt_> nedbat: maybe! take it with a grain of salt, though, I'm more of a Haskell programmer trapped in a Pythonizing world, so I often find myself "ice skating uphill".
[00:31:40] <teut> then it just feels like named tuples would be perfect
[00:31:41] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[00:32:19] <teut> api returning tuple?
[00:32:30] <teut> tuple is only a python thing
[00:32:37] <iphone> a tuple is a combination of one or more values. Can be any type
[00:32:43] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[00:32:44] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[00:32:48] <teut> maybe few other languages have it but not javascript
[00:32:50] <bjs> teut: well no,  many languages have the concept of a tuple
[00:32:51] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[00:32:51] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[00:33:01] <nedbat> dwt_: i've known a few people in your situation :)
[00:33:10] <teut> ok java has , they call it `pair`
[00:33:20] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[00:33:30] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[00:33:36] <bjs> teut: but the point is,  a tuple is a data structure that is very much designed as a fixed collection of fields of different types.  They're a very very old idea.
[00:34:05] <emerent> teut: that pair is not just a tuple of 2?
[00:34:30] <bjs> teut: (mathematics has had things called "tuples" for hundreds of years, where did you think the name came from)
[00:34:30] <teut> i dont know, i just helped a friend do some assignment emerent
[00:34:37] <teut> I dont know java
[00:35:11] <teut> yes bjs I had read about that , tuples were mathematical objects
[00:35:20] <teut> but I forgot where
[00:35:49] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[00:36:00] <teut> but tuples  save more memory than classes
[00:36:03] <bjs> teut: the problem is that tuples don't have names,  and instead only have indexes (the first thing in the tuple, the second thing etc).  Classes let you have names without indexing and order (and all the things that come with that in Python)
[00:36:05] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[00:36:11] <bjs> teut: why would you say that?
[00:36:36] <teut> lists only have names too
[00:36:43] <bjs> teut: lists don't have names
[00:36:43] <teut> indices*
[00:36:49] <bjs> teut: yes lists only have indices
[00:37:08] *** Joins: SebastianM (~seba@user/sebastianm)
[00:37:09] <teut> so tuple over list is better , can I atleast say that?
[00:37:14] <nedbat> it's very very very rare to care about the memory or time differences between list and tuple
[00:37:19] *** Joins: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net)
[00:37:20] <bjs> teut: no they're for different purposes
[00:37:24] *** Joins: ewdwasright (~ewdwasrig@108.210.81.181)
[00:37:28] <teut> for read only
[00:37:35] <bjs> teut: one is a fixed collection of fields, one is a variable-length sequence
[00:37:48] <bjs> teut: even if they were both mutable they'd be different
[00:37:50] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[00:38:08] <bjs> teut: some languages have lists and tuples and both are read-only!
[00:38:23] <bjs> (e.g. Haskell)
[00:38:54] <vbgunz> I find python annotations incredibly frustrating. it's almost a mini language all by itself. even when I get it right it can make matters wildly ugly. is there a way to put all that extra information and get the benefits of annotations using docstring instead? If so, where is a good place to kind of break this down?
[00:39:25] <vrt3> bjs: What's the difference between both when both are read-only?
[00:39:29] <teut> what is variable length sequence?
[00:39:38] <dwt_> I tend to focus on heterogeneous/fixed-length/named vs. homogeneous/variable-length/anonymous rather than immutable vs. mutable for the reasons bjs mentions. I make people write types though and strongly discourage heterogeneous lists (or at least insist that they're typed as List[Union[whatever]])
[00:39:47] <bjs> vrt3: they're for different purposes.  e.g. a list is a variable-length collection of same-type things.
[00:40:04] <bjs> vrt3: whereas a tuple is like a record, or structure. A fixed set of fields of different types.
[00:40:20] *** ewdwasright is now known as tbotty2702
[00:40:47] *** tbotty2702 is now known as ewdwasright
[00:40:52] <vrt3> bjs: Yes, that's how I see it in Python. But if lists are read-only too in Haskell, aren't they fixed-length too? And as such effectively the same as tuples?
[00:40:57] <bjs> teut: it means usually in a program you want a list to be a sequence of values that you add to or remove from as the program goes.
[00:40:58] <teut> list   multi-types container
[00:41:07] *** Joins: cedric (~cedric@2a01:cb11:867:c200:e2cd:70bc:8d6f:d541)
[00:41:23] <bjs> vrt3: no because you have functions that make new lists with more/fewer values in it
[00:41:26] <teut> thats mutability
[00:41:28] *** Joins: RBEL (~jigubigul@2001:1c06:19c3:7000:8cf7:4fd9:eebb:da89)
[00:41:47] *** Quits: fluffyballoon (~fluffybal@pat-verona-l.epic.com) (Quit: Client closed)
[00:41:55] <teut> let me check the interfaces of the 2
[00:42:11] *** Quits: magla (~gelignite@55d48585.access.ecotel.net) (Quit: Stay safe!)
[00:42:18] *** Joins: fluffyballoon (~fluffybal@pat-verona-l.epic.com)
[00:42:27] <vrt3> bjs: That sounds the same as tuples, but that's probably my complete lack of knowledge of Haskell speaking.
[00:42:36] *** Quits: ntdll_ (~ntdll@user/ntdll) (Ping timeout: 244 seconds)
[00:43:11] <sco1> vbgunz: As far as I'm aware there aren't any type checkers that will parse docstrings rather than type hints/comments
[00:43:35] <bjs> vrt3: the important thing is how they're used and how the entire type and functions are geared towards a particular use.  Lists are homogenous sequences, they contain some number of elements of all the same type.  You don't use a list like it was a class or object, you use it to hold a bunch of "like" data and iterate over it
[00:44:20] <teut> if you have a 10000  items  queryset in django, storing items in tuples would save a lot of space
[00:44:27] <bjs> vrt3: tuples get used like classes or structs or records or whatever,  they have a set number of fixed fields and get passed around like that.  In Haskell there is no function that "appends" to a tuple for example
[00:44:29] <bjs> teut: why would it?
[00:45:03] <teut> a dictionary will need  3x same amount of spaces as tuples
[00:45:06] *** Quits: Haxxa (~Haxxa@122.199.47.41) (Quit: Haxxa flies away.)
[00:45:18] <bjs> teut: who said dict?
[00:45:28] <teut> then class?
[00:45:32] <vrt3> bjs: Yes, thanks, I think I get it.
[00:45:42] <bjs> teut: classes have names, lists don't have names for all the fields
[00:45:51] <bjs> teut: they're just different.
[00:46:24] <teut> and I dont need them too since django is automaticcally giving me the data in order
[00:46:31] <kosh> a class is a wrapper around a dict plus some other stuff (except when using slots)
[00:46:45] <kosh> but honestly 10,000 items is not very many things
[00:46:57] <teut> 1000000  is that ij then?
[00:47:00] <bjs> teut: you worry too much about how much space something uses
[00:47:00] <teut> ok*
[00:47:08] <bjs> teut: and for e.g. list vs tuple the amount of space will be approximately the same
[00:47:13] <kosh> if you have that many items you get them from the db in batches instead of all at once
[00:47:17] <bjs> and for class vs tuple, the class might even use less
[00:47:34] <vbgunz> sco1: yeah, I hope they end up creating a docstring way of doing this
[00:47:37] <bjs> (depending on e.g. slots)
[00:47:43] *** Quits: ewdwasright (~ewdwasrig@108.210.81.181) (Quit: Leaving)
[00:47:48] <teut> I need to process 3 gbs of data every 5 minutes
[00:47:52] <teut> on a server
[00:48:05] <teut> with 16 gbs of ram
[00:48:18] <teut> around 200 users
[00:48:21] <kosh> then you stream it from the db instead of holding it all in memory at the same time
[00:48:23] <teut> on localnetwork
[00:48:45] *** Joins: Haxxa (~Haxxa@122.199.47.41)
[00:49:03] <teut> ya, I ll use a task queue
[00:49:08] <teut> celery
[00:49:17] *** Quits: sudomann (~sudomann@c-69-255-78-244.hsd1.va.comcast.net) (Ping timeout: 252 seconds)
[00:49:24] <kosh> one way or another you can't process that much data in a cpu at a time so you have to be streaming it in and out
[00:49:26] *** Quits: MrAwesomeRocks (~MrAwesome@c-24-12-109-233.hsd1.il.comcast.net) (Changing host)
[00:49:26] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[00:49:26] <sco1> vbgunz: By "they" do you mean CPython? I think that would be extremely unlikely.
[00:49:41] <teut> but then too until the data is not processed  the admin cant print the reports
[00:49:43] <sco1> It would be a lot of effort for not really much gain
[00:49:51] <teut> so they want it fast
[00:49:52] <kosh> vbgunz, why do you want docstrings instead of the type system that already exists?
[00:49:56] <sco1> I don't see the gain at all, tbh
[00:50:46] <kosh> teut, if you need it processed super fast and using very little memory using c,c++, rust etc
[00:50:46] *** Joins: toropisco_ (~toropisco@user/toropisco)
[00:51:04] <kosh> assuming your bottleneck is not the database and IO
[00:51:05] <vbgunz> kosh: I find the current type system unwieldy and ugly, it would just be nice to move all that noise into the docstring is possible and I was hoping it was possible
[00:51:28] *** Joins: ssbr (~ssbr@2620:15c:10f:203:9118:3e43:e4c3:d896)
[00:51:46] <teut> kosh that would be scray for me
[00:51:51] <teut> scary*
[00:52:04] <teut> I barely know the basics of 1st two languages
[00:52:06] <kosh> vbgunz, def greeting(name: str) -> str  so you don't like that kind of thing?
[00:52:21] <kosh> teut, then the fastest you can do is stream it in and process as you go
[00:52:24] <teut> rust I just have heard the name
[00:52:31] <kosh> teut, what kind of processing do you have to do?
[00:52:50] <teut> well a 3 gb file would be uploaded
[00:53:37] <teut> it would be a hsv and its unstructured even after that
[00:53:42] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[00:53:43] <jinsun> vbgunz: why would you want to put them in strings? you'll have to write extra "quotes" in addition to writing the type, you have an option of not putting those kints at all if theey are annoying
[00:53:47] <teut> so first the db has to be updated
[00:54:01] <jinsun> *hints
[00:54:08] <vbgunz> I find longer parameter names with more complicated objects, gets overwhelming. maybe for a machine it's great. but going over it with human eyes gets exhausting quick. I avoid it but want to do it but every time I think to stop, like I said earlier, it's a mini language I'm not finding easy to get a grip on
[00:54:13] <teut> then the admin needs to me notified that db is refreeshed  , he can print the reports
[00:54:13] <kosh> teut, what do you have to actually do with the data though, what kind of actual processing?
[00:54:29] *** Quits: toropisco (~toropisco@user/toropisco) (Ping timeout: 244 seconds)
[00:54:33] <vbgunz> I was curious if I could get the benefits of annotations just using docstrings
[00:54:36] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[00:54:40] <kosh> vbgunz, sorry no
[00:54:56] *** Joins: dme86 (~dan@user/dan86)
[00:54:59] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:55:20] <kosh> I actually expect type hints to make python faster later
[00:55:22] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: node-irc says goodbye)
[00:55:24] <teut> for every employee the admin selects  , get the list of transactions(a dango mmodel)  for each employee
[00:55:53] <teut> then create a csv corresponding to each user
[00:55:55] <kosh> microsoft is funding speed upgrades for python
[00:56:07] <teut> zip it and throw at admins face
[00:56:08] <chance> i'm driving by. does the db support concurrent connections? that is, when you said "every 5 minutes," does it matter if the last job's done yet? (teut)
[00:56:09] <jinsun> vbgunz: just format your code with black it makes long type signatures split so that each variable is in a separate line, which makes it easy to read
[00:56:17] *** Quits: sathyabhat (~sathyabha@188.25.147.213) (Read error: Connection reset by peer)
[00:56:25] <chance> i guess those are two questions but one implies the other
[00:56:26] <kosh> teut, that sounds like it is just db bound and there should be very little processing
[00:56:29] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[00:56:35] <teut> Ino idea of those complexities
[00:56:44] <chance> what db are you using?
[00:56:47] *** Quits: Akuli (~Akuli@82-203-166-235.bb.dnainternet.fi) (Quit: Leaving)
[00:56:49] <vbgunz> is there a site that makes understanding annotations easier? my biggest problem with them is when I'm returning complicated objects
[00:56:50] <teut> postgres
[00:56:52] *** Quits: unyu (~pyon@user/pyon) (Remote host closed the connection)
[00:57:31] *** Joins: aslicedbanjo (~aslicedba@host31-52-124-202.range31-52.btcentralplus.com)
[00:58:12] <kosh> this looks like it will just be IO bound for the database
[00:58:20] <kosh> lots of queries and queries as a response to queries etc
[00:58:29] <teut> yes
[00:58:35] *** Joins: unyu (~pyon@user/pyon)
[00:58:49] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[00:58:54] <teut> and they are saying me  do versioning of the db
[00:59:01] <teut> that sounds complicated
[00:59:12] <teut> maybe they need an event driven design
[00:59:18] <teut> I just learned about it
[00:59:24] <teut> from goto; talks
[00:59:34] *** Quits: f1se4 (~f1se4@213.195.98.55) (Quit: WeeChat 2.8)
[00:59:42] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 264 seconds)
[01:00:04] <chance> that's basically what async functions are doing underneath
[01:00:08] <jinsun> vbgunz: example?
[01:00:19] <teut> what is an event driven db?
[01:00:28] <teut> I mean example
[01:00:34] <kosh> I don't see how event driven changes this
[01:00:49] <kosh> you have data coming in and it needs to be uploaded to the db with some basic processing
[01:00:50] <teut> that solves the second problem
[01:00:59] <teut> the versioning
[01:01:23] <chance> the db isn't what'd be event driven, an event driven program would be accessing the db. but i don't see how it'd help with versioning either
[01:01:32] <vbgunz> jinsun: I use PyCharm and I'm trying to return a http.client.HTTPResponse object ... PyCharm is kind of brilliant but I can't figure out how to say I'm returning a http.client.HTTPResponse object without importing it... so I put it in a string but that doesn't work. it's always something like this
[01:01:39] *** Quits: Overflwn (~Overflwn@2a02:8070:c3b7:5b00::ea80) (Remote host closed the connection)
[01:01:39] <teut> so do I store strings and  json?
[01:01:52] <teut> so do I store json  */
[01:01:54] <teut> ?
[01:02:11] *** Parts: tunixman (~tunixman@45.32.228.130) ()
[01:02:35] <teut> events  give the exact  events  like what happened , when the state was changed etc
[01:02:45] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 244 seconds)
[01:03:06] <nedbat> vbgunz: what version of Python are you using?
[01:03:11] <grym> vbgunz: that's not a pycharm thing, you just have to import names to use them i think
[01:03:30] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 240 seconds)
[01:03:30] <teut> I need to create a query string all the time   "Initial state :<some json>  changed to    final_state:<some json>"
[01:03:34] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[01:03:49] <teut> omit query*
[01:03:59] <vbgunz> Python 3.9.5
[01:04:37] <nedbat> vbgunz: hmm, "from __future__ import annotations" avoids some need for strings, but perhaps not this need.
[01:05:21] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:05:27] <vbgunz> PyCharm is brilliant. if I say from http.client import HTTPResponse I can say -> HTTPResponse in the annotation *but* I don't know how to do this without importing objects unless I'm supposed to import them
[01:05:33] *** Quits: GadgetNerd (~GadgetNer@136.244.21.145) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[01:05:37] <sco1> You're supposed to import them
[01:06:18] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 264 seconds)
[01:06:21] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[01:06:42] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[01:06:53] <nedbat> i thought we were going to get inference, and didn't need to annotate everything
[01:07:16] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 268 seconds)
[01:07:21] *** Joins: GadgetNerd (~GadgetNer@136.244.21.145)
[01:07:49] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[01:07:59] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[01:08:21] *** Quits: RBEL (~jigubigul@2001:1c06:19c3:7000:8cf7:4fd9:eebb:da89) (Quit: WeeChat 3.2)
[01:08:36] *** Joins: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net)
[01:09:09] *** Quits: Fiji- (~Fiji@user/fiji) (Quit: Leaving)
[01:10:08] *** Quits: frostschutz (~frostschu@2a01:c23:7c64:6000:a5bb:997b:9a36:d875) (Quit: Leaving)
[01:10:46] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:11:01] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Ping timeout: 244 seconds)
[01:12:18] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[01:12:54] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[01:13:30] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 264 seconds)
[01:15:06] <graingert> vbgunz: make sure you also check your code with mypy
[01:16:31] *** Quits: qlixed (~qlixed@host60.181-13-74.telecom.net.ar) (Ping timeout: 268 seconds)
[01:17:29] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Quit: Leaving)
[01:17:50] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:18:59] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[01:20:26] <jinsun> vbgunz: ya importing them is required, and I realize the pain, at work I'm still stuck on python 3.7 so every file has to import stuff from typing
[01:20:46] <jinsun> plus I "waste" some lines to define aliases for complex types, which annoys people who don't want to have type hints at all and have "cleaner" code
[01:20:59] *** Joins: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net)
[01:21:27] *** Joins: Adoi (~Adoi@user/adoi)
[01:23:47] *** Quits: otto (~otto@user/otto) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[01:24:21] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-160-103.austin.res.rr.com)
[01:26:18] <HurricaneHarry> teut: temporal database maybe ?
[01:26:18] <jinsun> but in any other language you have to import to use the type in annotations, there will be too much magic required to figure out the types without importing
[01:26:27] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[01:26:48] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[01:27:09] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:27:22] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[01:27:32] <HurricaneHarry> teut: probably advanced since but still a good read on it https://wiki.postgresql.org/images/6/64/Fosdem20150130PostgresqlTemporal.pdf
[01:27:41] <teut> easy to say but difficult to implement
[01:28:09] <teut> that looks some good stuff thanks HurricaneHarry
[01:29:44] *** Quits: Barones (~Barones@2804:48dc:8500:0:6861:5616:aec5:ddb0) (Remote host closed the connection)
[01:30:02] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[01:30:07] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:31:03] *** Joins: dtg01100 (~dtg01100@199.21.141.37)
[01:32:33] *** Quits: aklis (~aklis@user/aklis) (Ping timeout: 268 seconds)
[01:34:28] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Quit: Lost terminal)
[01:36:24] *** Joins: otto (~otto@user/otto)
[01:36:36] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[01:36:58] *** Joins: Barones (~Barones@2804:48dc:8500:0:9d7a:5ce0:8e66:14dc)
[01:38:35] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[01:40:00] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[01:40:39] *** Quits: mekhami (~lawrence@135.84.115.18) (Quit: WeeChat 2.8)
[01:40:59] *** Quits: aslicedbanjo (~aslicedba@host31-52-124-202.range31-52.btcentralplus.com) (Quit: Leaving.)
[01:41:30] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[01:42:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[01:42:13] *** Quits: yogoyo (~weechat@user/yogoyo) (Remote host closed the connection)
[01:42:22] *** Joins: cul8r (~cul8r@c-73-26-110-61.hsd1.nm.comcast.net)
[01:42:40] *** Quits: jfb4 (~user@2a01:4b00:8935:d600:76d0:2bff:fe7f:543d) (Remote host closed the connection)
[01:43:39] <graingert> jinsun: use `from __future__ import annotations`
[01:43:49] <graingert> jinsun: it lets you use the 3.10 syntax
[01:46:50] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[01:47:03] <emerent> oh, even the type union stuff?
[01:47:15] <graingert> emerent: especially the type union stuff
[01:47:34] <emerent> niiice
[01:47:37] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:50:02] *** Joins: pnoud (~pnoud@user/pnoud)
[01:50:09] *** Joins: dieth (~dieth@user/dieth)
[01:50:17] *** Quits: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net) (Remote host closed the connection)
[01:50:36] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[01:51:43] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[01:52:29] <jinsun> graingert: oh yes I could use that, I somehow avoid and forget about the __future__ stuff, but now that I that I realized it will even allow the new type union syntax I'll probably switch
[01:52:36] *** Quits: bluesmonk (uid318026@id-318026.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[01:52:43] <graingert> jinsun: use isort and pyupgrade
[01:52:53] <graingert> or reorder-python-imports
[01:53:22] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[01:53:23] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 244 seconds)
[01:53:28] <graingert> jinsun: https://adamj.eu/tech/2021/05/15/python-type-hints-future-annotations/#adding-to-all-files
[01:54:10] <graingert> adamchainz: it's tricky to link to fragments on your blog, I'd like to be able to mouse over headings to see an anchor
[01:54:49] <jinsun> graingert: oh nice, I didn't know isort could do that, I use it already just for basic sorting of import
[01:55:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 264 seconds)
[01:57:54] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[01:58:06] *** Joins: palasso (~palasso@user/palasso)
[01:58:17] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[01:58:58] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[01:59:35] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:59:48] *** Joins: Tykling (~tykling@irc.tyknet.dk)
[02:03:38] *** Joins: salpynx (~salpynx@121.73.84.248)
[02:04:51] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[02:05:08] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[02:06:15] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Client Quit)
[02:06:23] <jinsun> graingert: will pyupgrade "fix" the Unions?
[02:06:34] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[02:07:03] <graingert> jinsun: it's supposed to
[02:07:22] <jinsun> even if I use --py37-plus?
[02:07:41] <jinsun> I don't want it to change non typing stuff
[02:08:01] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[02:08:23] <graingert> jinsun: It will change everything it can that's valid in py37+
[02:08:34] <graingert> Run it and see what it does
[02:09:24] *** Quits: node1 (~node1@user/node1) (Ping timeout: 244 seconds)
[02:09:46] <jinsun> ok let me see, I was thinkiing I'll have to do --py310-plus to get the new syntax
[02:11:27] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:12:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:12:11] <Adoi> hello! my solution is rejected by the online interpreter. I downloaded the interpreter's own solution in order to compare it to mine, and their single difference is that the former prints the hexadecimals in uppercase, and my output has them in lowercase. could this be a reason for my code to have failed in "test cases" ?
[02:13:00] *** Quits: aw1 (~aw1@203.171.246.186) (Remote host closed the connection)
[02:13:47] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 272 seconds)
[02:13:57] <p-i-> How hard is it to set up a websocket relay? So that I can connect it to a remote server, and once auth'd it just pings to keepalive and can run forever. And then my local client app (which is always starting and stopping) can just subscribe to it.
[02:14:03] <p-i-> I guess it would be a websocket proxy.
[02:14:03] <vrt3> Adoi: Sounds plausible
[02:15:14] <Adoi> it was, vrt3
[02:15:23] <Adoi> I changed them to uppercase and it is accepted :)
[02:15:29] *** Joins: ionface (~ionface@user/ionface)
[02:17:54] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[02:18:00] <Adoi> ...and then you go on to discover that your 18-line solution can be reduced down to 5 lines :)
[02:18:23] <Linkandzelda> hi, could someone help me out with where im going wrong with this? https://hastebin.com/zuyogitepa.sql
[02:19:10] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[02:19:40] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[02:19:57] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[02:20:05] *** Quits: toropisco_ (~toropisco@user/toropisco) (Quit: Quitting)
[02:20:30] <ChrisWarrick> Linkandzelda: `import import_test` gives you __init__.py
[02:20:55] <ChrisWarrick> Linkandzelda: try `from import_test import import_test`, or `import import_test.import_test` (requires changing usage)
[02:20:57] *** Joins: vimart (~vimart@185.69.145.204)
[02:21:02] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[02:21:17] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 244 seconds)
[02:21:21] *** Quits: Jormungandr89 (~brad@136.49.61.2) (Quit: Konversation terminated!)
[02:21:23] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 272 seconds)
[02:21:53] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[02:22:31] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:22:54] <Linkandzelda> ChrisWarrick: thanks, did the trick! is there some way to make config available in the __init__.py so I can do "import import_test" and then use it like "x = import_test.ClassName()" ?
[02:23:31] <ChrisWarrick> Linkandzelda: you could put `from import_test.import_test import ClassName` in `__init__.py` — or depending on what you’re doing, perhaps you could just put the class in init
[02:24:42] <vrt3> Linkandzelda: Or perhaps make a simple module instead of a full package
[02:24:55] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[02:24:58] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Ping timeout: 268 seconds)
[02:25:05] *** Quits: kmh (~kmh@p200300df5f1f61005730715439573d24.dip0.t-ipconnect.de) (Quit: Leaving)
[02:25:51] <Linkandzelda> i was going to declare all the classes needed + the main class in the module.py, but, I could just do that outside a sub directory
[02:25:51] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[02:26:01] <Linkandzelda> also wow, freenode, rip
[02:26:23] <hexology> https://mypy-play.net/?mypy=latest&python=3.9&gist=34ce75d41310db76621cefbfd861827e is this a mypy bug? it seems to think `enumerate` isn't `Callable`
[02:26:34] <Linkandzelda> some guy (not sure if he's here) was helping me in freenode and suddenly got banned out of nowhere
[02:26:51] <Tashtari> That's what happens when you mention Libera.chat there, apparently
[02:26:55] <grym> Linkandzelda: the entire channel got nuked eventually
[02:26:57] <vrt3> Linkandzelda: there are lots of stories like that
[02:27:02] <Tashtari> I got banned too.
[02:27:13] *** Joins: p-i-_ (~Ohmu@node-n9d.pool-118-173.dynamic.totinternet.net)
[02:27:16] <Linkandzelda> Tashtari: you, i saw you get banned
[02:27:19] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[02:27:21] <grym> Linkandzelda: anyway, meet the new #python, same as the old #python
[02:27:28] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[02:27:42] <Linkandzelda> glad to be here
[02:27:56] *** Quits: otto (~otto@user/otto) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[02:28:10] <vrt3> Apparently even for saying things like "I don't like libera.chat". Automated simplistic bot.
[02:28:19] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[02:28:38] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[02:29:08] <Linkandzelda> thats actually terrible and beyond words
[02:29:21] *** Quits: p-i- (~Ohmu@node-owh.pool-118-173.dynamic.totinternet.net) (Ping timeout: 244 seconds)
[02:29:27] <vrt3> yes
[02:30:16] <grym> i keep telling people regex is only so cool, but do they listen? noooooo
[02:30:49] <Linkandzelda> thats one to completely kill an entire network and send entirely the wrong messages
[02:30:51] <jinsun> hexology: you want enumereate[_T]
[02:31:05] *** Quits: Narrat (~omnius@p200300df5f0a430006ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:31:30] <hexology> jinsun: where?
[02:31:39] <jinsun> in map fisr argument
[02:31:44] <jinsun> *first
[02:31:55] *** Joins: pnoud (~pnoud@user/pnoud)
[02:32:06] <jinsun> return product(*map(enumerate[_T], iterables))
[02:32:13] <hexology> ...that works, bizarrely
[02:32:23] <hexology> i can see why it works, but i hate it
[02:32:24] *** Quits: teut (~teut@182.69.85.39) (Quit: Connection closed)
[02:32:42] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 264 seconds)
[02:34:36] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:35:12] <rockSTONE> are there any decently mature async-based redis libs with direct support for RedisJSON extension ?
[02:35:18] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:35:37] <hexology> jinsun, why doesn't this fail if a pass a Callable[[Any], Any] to map() in the same situation?
[02:36:28] <jinsun> hexology: it doesn't fail if you pass enumereate[Any] either
[02:36:46] <hexology> well that does seem like a bug, doesn't it
[02:37:07] <bjs> shouldn't enumerate and enumerate[Any] be the same thing
[02:37:11] <jinsun> by default it treats it like enumerate[unknown]
[02:37:11] <Linkandzelda> is there a better way of handling this? self.full_path = os.path.expanduser(self.config_path)
[02:37:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[02:37:34] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[02:38:30] <jinsun> well pyright does that, I'm guessing mypy too based on the behavior
[02:40:14] <grym> Linkandzelda: pathlib's pretty nice
[02:40:50] <grym> Linkandzelda: which would be `self.full_path = pathlib.Path(self.config_path).resolve()` (wrap that in str() if you _really_ need the string, but it's often worth it to go full pathlib internally)
[02:41:19] <grym> or maybe .expanduser().resolve(), if you want to be double super duper sure :)
[02:41:55] <Linkandzelda> grym: resolve resolves it to a file or something? im just very used to the ordered workflow of 1. get full path 2. check it exists 3. load it or write to it/whatever
[02:42:43] *** Joins: easior (~easior@61.155.142.70)
[02:42:45] *** Leonarbro_ is now known as Leonarbro
[02:42:50] <Linkandzelda> i will give it a go and see
[02:43:07] *** Joins: audiocat (~audio@2603-8081-1800-0062-c574-3dd0-68c8-791e.res6.spectrum.com)
[02:43:08] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[02:44:19] <Linkandzelda> grym: very cool!
[02:44:20] <vrt3> Linkandzelda: it's better to skip your step 2. Checking the existence of files before reading/writing leads to races: by the time you start reading it, it might not exist anymore.
[02:44:27] *** Joins: jpic_ (~jpic@82-64-233-31.subs.proxad.net)
[02:44:34] <vrt3> Best just to read/write wrapped in try/except
[02:44:47] <grym> Linkandzelda: resolve walks symlinks
[02:45:06] <grym> expanduser() does the right thing if your string is `~/foo`
[02:45:14] <Linkandzelda> vrt3: that makes sense
[02:45:15] <grym> or %HOME%/foo
[02:45:18] *** Quits: dieth (~dieth@user/dieth) (Ping timeout: 264 seconds)
[02:45:40] <Linkandzelda> grym: yea, i use ~ a lot but sometimes dont, and like to allow for both cases
[02:45:54] <grym> Linkandzelda: some more pathlib goodies: `pathlib.Path('foo.txt').write_text("hello, world!"`
[02:45:54] *** Quits: jpic (~jpic@82.142.9.26) (Ping timeout: 264 seconds)
[02:45:56] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[02:45:58] <Linkandzelda> it seems even without expanduser it got the full path
[02:45:59] <grym> er, but with the last )
[02:46:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[02:46:26] <Yhg1s> Linkandzelda: if you're passing it as an argument from a shell, it's likely the shell expanded it (if the '~' was at the start of a word)
[02:46:54] <Linkandzelda> grym: im writing a yaml config class that lets me load config files, merge config files, and write config files. i guess i could use yaml's str to write_text function
[02:47:14] *** Quits: fluffyballoon (~fluffybal@pat-verona-l.epic.com) (Ping timeout: 250 seconds)
[02:47:19] <grym> Linkandzelda: yeah, i find myself doing somepath.write_text(json.dumps(...)) a lot
[02:47:19] *** Quits: ATAD (ATAD@user/atad) (Remote host closed the connection)
[02:47:35] *** Joins: ATAD (ATAD@user/atad)
[02:47:45] <grym> yaml's no different
[02:47:57] *** Quits: ATAD (ATAD@user/atad) (Remote host closed the connection)
[02:48:13] *** Joins: ATAD (ATAD@user/atad)
[02:48:15] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:48:23] <Linkandzelda> cool then, so far i like pathlib
[02:48:41] <grym> it's pretty great
[02:49:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[02:49:26] *** Joins: jpic (~jpic@82.142.9.26)
[02:49:30] *** Quits: jpic_ (~jpic@82-64-233-31.subs.proxad.net) (Ping timeout: 240 seconds)
[02:49:36] *** Joins: dieth (~dieth@user/dieth)
[02:50:12] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:50:29] *** Joins: swork (~Guest70@047-044-188-029.biz.spectrum.com)
[02:51:28] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[02:51:30] *** Joins: drew (~drew@user/drew)
[02:51:47] *** Quits: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net) (Quit: Quitting)
[02:52:06] *** Joins: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net)
[02:53:28] *** Joins: easior_ (~easior@61.155.142.70)
[02:54:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[02:54:34] *** Quits: easior (~easior@61.155.142.70) (Ping timeout: 268 seconds)
[02:55:08] *** Joins: dme86 (~dan@user/dan86)
[02:55:09] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[02:57:45] *** Joins: ksr (~KSR@124.197.12.15)
[02:57:47] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:58:58] *** Quits: jdc (~jdc@cpe-96-28-210-220.kya.res.rr.com) (Read error: Connection reset by peer)
[03:00:02] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 244 seconds)
[03:00:02] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[03:00:06] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.1)
[03:00:33] *** Quits: swork (~Guest70@047-044-188-029.biz.spectrum.com) (Quit: Client closed)
[03:02:06] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[03:02:29] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[03:04:24] *** Quits: jpic (~jpic@82.142.9.26) (Quit: leaving)
[03:04:40] *** Joins: jpic (~jpic@82.142.9.26)
[03:04:53] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[03:04:54] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[03:05:35] *** Joins: jpic (~jpic@82.142.9.26)
[03:05:47] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 268 seconds)
[03:06:56] <glik22> how can i make it easy for contributors to my project to install requirements? right now i have requirements.txt and requirments-dev.txt files. the dev one inherits everyting from requirements.txt. i also see tox and flit being used and feel like there's definitely overlap
[03:07:50] <BtbN> Have them in your setup.py
[03:08:07] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[03:08:22] *** Joins: jpic (~jpic@82.142.9.26)
[03:08:37] *** Quits: cedric (~cedric@2a01:cb11:867:c200:e2cd:70bc:8d6f:d541) (Quit: Konversation terminated!)
[03:09:18] *** Quits: kolcon (~kolcon@v.kolouch.org) (Ping timeout: 264 seconds)
[03:09:32] *** Quits: tvm (~tom@ip-89-103-250-229.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[03:09:54] *** Quits: encukou (~quassel@nat-pool-brq-t.redhat.com) (Ping timeout: 264 seconds)
[03:10:17] *** Joins: encukou (~quassel@nat-pool-brq-t.redhat.com)
[03:10:25] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[03:10:36] *** Joins: kolcon (~kolcon@v.kolouch.org)
[03:10:40] *** Joins: jpic (~jpic@82.142.9.26)
[03:11:10] *** Joins: tvm (~tom@ip-89-103-250-229.net.upcbroadband.cz)
[03:11:20] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[03:11:46] *** Joins: easior (~easior@61.155.142.67)
[03:12:18] *** Quits: easior_ (~easior@61.155.142.70) (Ping timeout: 240 seconds)
[03:12:26] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 244 seconds)
[03:13:38] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:13:55] *** Quits: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) (Remote host closed the connection)
[03:14:15] <graingert> glik22: You might like peotry
[03:14:32] <graingert> Poetry*
[03:15:13] <glik22> does setup.py allow you to test on different python versions?
[03:15:26] <graingert> glik22: not on its own
[03:15:33] <graingert> You'd need tox or something
[03:15:50] <graingert> glik22: is this something public on GitHub
[03:15:55] <glik22> got it. so i could remove my requirements info from tox.ini
[03:16:12] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[03:16:14] <glik22> graingert: yea https://github.com/stickperson/wordclock/tree/master/code/python
[03:16:49] <graingert> glik22: https://github.com/cjolowicz/hypermodern-python is nice
[03:17:28] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[03:17:43] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 264 seconds)
[03:17:54] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[03:18:04] <graingert> glik22: tox and flit are great too
[03:18:14] <glik22> graingert: cool, will look into that. i've heard conflicting reports about poetry
[03:18:19] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[03:19:05] <graingert> glik22: here's an example flit and tox setup https://github.com/PyCQA/modernize/blob/master/pyproject.toml
[03:19:07] *** Quits: vrt3 (~vrt3@d54C5733D.access.telenet.be) (Quit: Leaving)
[03:21:10] <glik22> i like tox but don't necessary want to have all the different python envs installed to run tests (3.6, 3.7 etc).
[03:21:10] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[03:21:21] *** Joins: chance (~chance@50.47.109.175)
[03:21:30] <Linkandzelda> i just had my nick deregistered on freenode for no reason
[03:21:40] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:22:20] <glik22> Linkandzelda: there's a reason we're here :)
[03:22:50] <Yhg1s> Linkandzelda: everyone did, yes. https://www.reddit.com/r/irc/comments/o01tmv/
[03:23:30] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:23:47] *** Joins: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net)
[03:24:17] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[03:24:50] *** Quits: dakh7_ (~dakh7@ip98-169-201-138.dc.dc.cox.net) (Ping timeout: 244 seconds)
[03:26:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[03:26:22] <Linkandzelda> crazy
[03:26:53] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:26:58] <grym> Linkandzelda: "i am ozymandias, king of kings / look upon my works, ye mighty, and despair!"
[03:27:20] *** Joins: ice9 (~ice9@user/ice9)
[03:27:21] <grym> as if he'd recognize shelley, but hey
[03:27:33] *** Joins: jmcantrell (~weechat@86.106.143.201)
[03:28:02] <grym> (quoted slightly wrong, but hey)
[03:28:52] *** Quits: fflam (~mdt@pool-96-253-99-54.rcmdva.fios.verizon.net) (Quit: WeeChat 3.2)
[03:29:06] *** Quits: ras_manny (~ras_manny@196.24.141.56) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:29:50] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:30:07] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[03:31:30] *** Quits: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net) (Ping timeout: 264 seconds)
[03:31:47] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:31:58] *** Joins: jazzy (~jaziz@2600:380:4547:d128:38:64a:a78c:84e5)
[03:34:11] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[03:34:47] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[03:35:16] *** Quits: jmcantrell (~weechat@86.106.143.201) (Ping timeout: 268 seconds)
[03:36:47] *** Joins: jmcantrell (~weechat@86.106.121.201)
[03:37:14] *** Joins: easior__ (~easior@61.155.142.67)
[03:37:26] *** Quits: Ivyy (~Ivyy@2001:a62:41d:fa01:b6b3:aa7c:7e25:abb1) (Remote host closed the connection)
[03:38:34] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[03:38:36] *** Joins: bindu (bindu@user/bindu)
[03:38:40] *** Parts: bindu (bindu@user/bindu) ()
[03:39:27] *** Joins: Umimaso (~James@host81-131-202-193.range81-131.btcentralplus.com)
[03:39:35] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[03:40:07] *** Joins: ajkerzner (~ajkerzner@user/ajkerzner)
[03:40:37] *** ajkerzner is now known as ak
[03:41:00] *** ak is now known as ajkerzner
[03:41:22] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[03:41:42] *** ajkerzner is now known as Kretzek
[03:42:32] *** Quits: easior__ (~easior@61.155.142.67) (Ping timeout: 252 seconds)
[03:42:54] *** Quits: ssbr (~ssbr@2620:15c:10f:203:9118:3e43:e4c3:d896) (Ping timeout: 264 seconds)
[03:43:35] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:43:53] *** Kretzek is now known as ajkerzner
[03:44:23] *** Quits: Umimaso (~James@host81-131-202-193.range81-131.btcentralplus.com) (Quit: Konversation terminated!)
[03:44:48] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[03:44:49] *** Parts: ajkerzner (~ajkerzner@user/ajkerzner) ()
[03:45:41] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:46:19] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:48:07] *** Joins: death916_lap (~Death916@user/death916)
[03:48:45] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:48:47] *** Joins: guardian (~guardian@planet-d.net)
[03:49:27] *** sqrrl is now known as squirrel
[03:51:43] *** Joins: redir (~textual@2600:1700:b770:53d0:b924:96ed:cd5d:4aca)
[03:51:55] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[03:52:30] *** Quits: easior (~easior@61.155.142.67) (Quit: Leaving)
[03:53:06] *** Quits: death916_lap (~Death916@user/death916) (Ping timeout: 240 seconds)
[03:53:51] *** Joins: easior__ (~easior@61.155.142.67)
[03:53:56] *** Quits: redir (~textual@2600:1700:b770:53d0:b924:96ed:cd5d:4aca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:54:08] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:55:07] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (Ping timeout: 268 seconds)
[03:55:49] *** Joins: easior_ (~easior@61.155.142.67)
[03:56:13] <Linkandzelda> grym: anything better than this? pathlib.Path(self.full_path.parents[0)).mkdir(parents=True, exist_ok=True)
[03:56:44] <Linkandzelda> thats to create the parent directories before writing the content of the file when it doesnt exist
[03:57:58] *** Joins: tims (~tims@193-119-75-93.tpgi.com.au)
[03:59:19] *** Quits: easior__ (~easior@61.155.142.67) (Ping timeout: 268 seconds)
[04:00:02] *** Joins: ssbr (~ssbr@2620:15c:10f:203:6eec:65ac:5c34:94cc)
[04:04:32] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:4869:933b:e3e7:8719)
[04:04:49] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:05:00] <jinsun_> Linkandzelda, you can just use parent instead of parents[0]
[04:05:06] <willthechill> Perl > Python, change my mind!  ;-)   intro to Perl data types:  https://youtu.be/go7Ru3QQYYs
[04:05:16] <Linkandzelda> jinsun_: useful
[04:07:32] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[04:07:48] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.1)
[04:07:50] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[04:09:21] <habnabit_> willthechill, no
[04:09:52] *** Joins: tvrtko (~tvrtko@93-138-113-251.adsl.net.t-com.hr)
[04:12:42] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 240 seconds)
[04:12:42] *** Quits: candy (~tvrtko@93-138-114-158.adsl.net.t-com.hr) (Ping timeout: 240 seconds)
[04:13:05] *** Quits: atomroflor (~atomroflo@53-13-142-46.pool.kielnet.net) (Read error: Connection reset by peer)
[04:14:59] *** Quits: mxp (~mxp@82.98.30.69) (Ping timeout: 252 seconds)
[04:16:18] *** Joins: easior__ (~easior@61.155.142.70)
[04:18:26] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[04:18:33] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[04:19:40] *** Quits: easior_ (~easior@61.155.142.67) (Ping timeout: 268 seconds)
[04:19:56] *** Quits: brownan (~brownan@136.56.137.143) (Ping timeout: 252 seconds)
[04:21:55] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-d88a-0d46-4103-a0ae.res6.spectrum.com)
[04:22:19] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[04:23:04] *** Joins: easior (~easior@61.155.142.70)
[04:23:42] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[04:25:14] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[04:25:17] *** Quits: easior__ (~easior@61.155.142.70) (Ping timeout: 244 seconds)
[04:26:37] *** Joins: mxp (~mxp@82.98.30.69)
[04:28:30] *** Quits: jazzy (~jaziz@2600:380:4547:d128:38:64a:a78c:84e5) (Ping timeout: 264 seconds)
[04:30:38] *** Joins: heco (~redrum@user/redrum88)
[04:31:15] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:32:44] *** Joins: pnoud (~pnoud@user/pnoud)
[04:33:31] *** Quits: synic (~squish@li74-118.members.linode.com) (Quit: WeeChat 3.0.1)
[04:33:38] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:33:45] *** Joins: Jormungandr89 (~brad@136.49.61.2)
[04:33:59] *** Joins: ssbr_ (~ssbr@2620:15c:10f:203:6eec:65ac:5c34:94cc)
[04:34:11] *** Quits: ssbr (~ssbr@2620:15c:10f:203:6eec:65ac:5c34:94cc) (Remote host closed the connection)
[04:37:12] <nedbat> willthechill: we are glad you like Perl
[04:37:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[04:37:53] <willthechill> nedbat: thanks, me too!  :-)
[04:40:01] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[04:41:00] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Quit: Leaving)
[04:42:41] *** Joins: fflam (~mdt@pool-96-253-99-54.rcmdva.fios.verizon.net)
[04:42:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:43:04] *** Joins: umimaso_ (~umimaso@188.166.147.131)
[04:43:06] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[04:43:15] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[04:43:34] *** Joins: CombatVet (~c4@user/combatvet)
[04:43:38] *** Quits: Affliction (affliction@user/affliction) (Remote host closed the connection)
[04:44:08] *** Joins: Affliction (~Afflictio@user/affliction)
[04:45:37] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[04:46:16] *** Joins: feriman (~feriman@188.163.113.127)
[04:47:03] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[04:48:38] *** Joins: ksr (~KSR@124.197.12.15)
[04:48:46] *** Quits: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[04:50:47] *** Joins: civillian (~nick@ppp118-208-162-15.cbr-trn-nor-bras39.tpg.internode.on.net)
[04:53:59] *** umimaso_ is now known as umimaso
[04:54:20] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:a0e9:5ac8:9436:b228) (Remote host closed the connection)
[04:55:17] *** Joins: dme86 (~dan@user/dan86)
[04:56:48] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 244 seconds)
[04:57:18] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 264 seconds)
[04:58:18] *** Quits: pkapp (~pkapp@2601:58c:c500:6900:5844:e0cb:a4f9:f6cd) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[04:59:59] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[05:00:22] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 268 seconds)
[05:00:23] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3-dev)
[05:01:38] <themill> tarfile can "read and write" archives, but can it delete a file from an archive?
[05:01:54] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[05:03:22] <cul8r> no i dont believe it can
[05:03:27] *** Quits: salpynx (~salpynx@121.73.84.248) (Ping timeout: 268 seconds)
[05:03:54] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[05:04:19] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[05:04:41] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 268 seconds)
[05:05:26] <KirkMcDonald> I believe that would require rewriting the entire archive, following the removed file.
[05:05:29] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[05:05:39] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[05:05:40] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[05:07:16] *** Joins: Sir_Andrei (~andrei@r186-54-7-212.dialup.adsl.anteldata.net.uy)
[05:07:18] <Sir_Andrei> Hello
[05:08:53] *** Quits: kofuyu (~kofuyu@user/kofuyu) (Ping timeout: 252 seconds)
[05:10:02] <Sir_Andrei> So this is the new channel
[05:10:03] <Sir_Andrei> Crazy
[05:14:01] <nedbat> Sir_Andrei: the gang's all here!
[05:14:24] <Sir_Andrei> Yea
[05:14:33] *** Joins: kofuyu (~kofuyu@user/kofuyu)
[05:14:33] <Sir_Andrei> You are connected here all day?
[05:14:49] <nedbat> Sir_Andrei: through a bouncer, yes
[05:14:51] <Sir_Andrei> I mean, always I come here I saw you @nedbat and altendky, and a bunch of others
[05:15:06] <nedbat> i don't talk 24 hours, but i'm here
[05:15:33] <Sir_Andrei> I connect myself manually through irssi when I have something to ask that I cannot found easily on google. What are you, Python core developers?
[05:15:38] <Sir_Andrei> First time that this hit my curiosity
[05:16:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[05:17:29] <nedbat> there are a few Python core devs here sometimes. I am not one.
[05:18:24] <Sir_Andrei> Ah, just hobbists & developers like me.
[05:18:37] *** Joins: death916 (~death916@user/death916)
[05:19:38] <Sir_Andrei> Well, I guess its time to install a bouncer, it is a good thing to participate more in the community of the language that now brings food to my table.
[05:20:52] <themill> cul8r, KirkMcDonald: indeed. GNU tar can do this for you (it has --delete options). I might just end up with a temp directory for this
[05:20:58] *** Joins: redir (~redir@2600:1700:b770:53d0:b924:96ed:cd5d:4aca)
[05:21:25] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[05:22:06] <cul8r> themill: what are you trying to do?
[05:22:12] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[05:23:52] <themill> cul8r: remove a file from a tarball. Quite literally that.
[05:23:56] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[05:24:06] <cul8r> oh lol
[05:24:08] <themill> I'll end up doing it in bash
[05:24:22] <themill> (or sh, really)
[05:24:32] <cul8r> yeah thats definitely simpler
[05:27:07] *** Quits: vimart (~vimart@185.69.145.204) (Quit: WeeChat 2.8)
[05:27:31] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[05:27:54] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:28:07] *** Joins: jazzy (~jaziz@2600:380:4547:d128:38:64a:a78c:84e5)
[05:29:30] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[05:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:35] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[05:31:32] *** Joins: ______GOD______ (~GOD@189.174.198.176)
[05:31:33] *** Joins: nneonneo (~b2xiao@wikipedia/nneonneo)
[05:32:33] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[05:32:49] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[05:34:19] *** Quits: b2xiao (~b2xiao@wikipedia/nneonneo) (Ping timeout: 244 seconds)
[05:34:33] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 272 seconds)
[05:34:44] *** Quits: redir (~redir@2600:1700:b770:53d0:b924:96ed:cd5d:4aca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:35:06] *** Joins: vlm (~vlm@user/vlm)
[05:36:05] *** Joins: ksr (~KSR@124.197.12.15)
[05:36:16] *** Joins: kadobanana (~mud@user/kadoban)
[05:36:23] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[05:36:52] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 268 seconds)
[05:37:37] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 244 seconds)
[05:38:38] *** Quits: jabberwock (~lidless@user/jabberwock) (Remote host closed the connection)
[05:39:23] *** Joins: jabberwock (~lidless@user/jabberwock)
[05:39:36] *** Quits: |7| (~kvirc@user/seachdamh) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[05:40:50] *** Quits: jmcantrell (~weechat@86.106.121.201) (Quit: WeeChat 3.2)
[05:40:57] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[05:43:11] *** Quits: DaNeenjah (~jake@adsl-74-230-10-74.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[05:43:32] *** Quits: Pedaleando (~Admin@ip188-178-64-186.ct.co.cr) (Ping timeout: 252 seconds)
[05:46:17] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 252 seconds)
[05:47:04] *** Joins: easior_ (~easior@61.155.142.67)
[05:47:05] *** Joins: jmcantrell (~weechat@86.106.121.201)
[05:48:22] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Remote host closed the connection)
[05:48:28] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[05:49:49] *** Quits: easior (~easior@61.155.142.70) (Ping timeout: 268 seconds)
[05:50:26] *** Quits: jmcantrell (~weechat@86.106.121.201) (Client Quit)
[05:51:11] *** Quits: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net) (Quit: Client closed)
[05:53:05] *** Quits: P1RATEZ (piratez@user/p1ratez) (Quit: https://mitchmurder.bandcamp.com)
[05:53:51] *** Quits: nbin_ (~nbin@user/nbin) (Quit: ZNC - https://znc.in)
[05:54:26] *** Joins: nbin (~nbin@user/nbin)
[05:55:12] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com) (Read error: Connection reset by peer)
[05:56:20] *** Joins: tkj1028 (~tkj@user/tkj1028)
[06:00:48] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Ping timeout: 268 seconds)
[06:00:48] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:01:15] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[06:01:48] *** Joins: chandankumar (~raukadah@2401:4900:3626:9011:f2a4:8e18:163d:eeb3)
[06:02:22] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:02:59] *** Joins: c10l (~c10l@89.34.167.207)
[06:04:29] *** Joins: Guddu (~Guddu@117.222.80.236)
[06:06:51] *** Joins: salpynx (~salpynx@121.73.84.248)
[06:07:01] *** Joins: raukadah (~raukadah@110.44.96.144)
[06:07:13] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[06:07:48] *** Joins: easior__ (~easior@61.155.142.70)
[06:08:06] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 264 seconds)
[06:10:02] *** Quits: chandankumar (~raukadah@2401:4900:3626:9011:f2a4:8e18:163d:eeb3) (Ping timeout: 272 seconds)
[06:10:42] *** Quits: easior_ (~easior@61.155.142.67) (Ping timeout: 240 seconds)
[06:11:54] *** Quits: pete443 (~pete@user/pete443) (Ping timeout: 268 seconds)
[06:12:34] *** Joins: pete443 (~pete@user/pete443)
[06:14:17] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:14:49] *** Quits: easior__ (~easior@61.155.142.70) (Ping timeout: 244 seconds)
[06:14:49] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[06:16:59] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[06:18:04] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[06:19:15] *** byzandula1 is now known as byzandula
[06:19:36] *** Joins: jmcantrell (~weechat@86.106.121.201)
[06:19:59] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[06:20:02] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[06:23:11] *** Joins: et_ (~et@user/et)
[06:24:39] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[06:24:47] *** Quits: et (~et@user/et) (Ping timeout: 272 seconds)
[06:24:47] *** et_ is now known as et
[06:25:04] *** Quits: cul8r (~cul8r@c-73-26-110-61.hsd1.nm.comcast.net) (Quit: abducted by aliens)
[06:26:12] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[06:28:32] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:30:24] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 268 seconds)
[06:31:58] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[06:32:44] *** Joins: jazzy2 (~jaziz@2607:fb90:a68f:d3a4:80de:3203:f0a3:73c3)
[06:33:33] *** Joins: pnoud (~pnoud@user/pnoud)
[06:34:18] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:35:30] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[06:35:32] *** Quits: jabberwock (~lidless@user/jabberwock) (Quit: WeeChat 2.8)
[06:35:42] *** Quits: jazzy (~jaziz@2600:380:4547:d128:38:64a:a78c:84e5) (Ping timeout: 264 seconds)
[06:35:56] *** jazzy2 is now known as jazzy
[06:36:22] *** Joins: jabberwock (~lidless@user/jabberwock)
[06:37:11] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[06:37:53] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 272 seconds)
[06:38:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 264 seconds)
[06:38:44] *** Joins: cjb (~cjb@user/cjb)
[06:39:51] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[06:41:03] *** Quits: tkj1028 (~tkj@user/tkj1028) (Ping timeout: 272 seconds)
[06:41:30] *** Joins: tkj1028 (~tkj@user/tkj1028)
[06:41:35] *** Quits: Zer0xFF (michael@matrix.michaelsasser.org) (Remote host closed the connection)
[06:42:33] *** Quits: jabberwock (~lidless@user/jabberwock) (Quit: WeeChat 2.8)
[06:42:46] *** Quits: dtg01100 (~dtg01100@199.21.141.37) (Quit: dtg01100)
[06:43:07] *** Joins: dtg01100 (~dtg01100@199.21.141.37)
[06:43:22] *** Joins: Zer0xFF (michael@matrix.michaelsasser.org)
[06:47:24] *** Quits: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Quit: Leaving)
[06:48:54] *** Quits: Sir_Andrei (~andrei@r186-54-7-212.dialup.adsl.anteldata.net.uy) (Ping timeout: 268 seconds)
[06:49:07] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:49:18] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[06:49:51] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[06:52:05] *** Joins: sn1tch3r_ (~sn1tch3r@185.153.176.22)
[06:52:30] *** Quits: sn1tch3r_ (~sn1tch3r@185.153.176.22) (Client Quit)
[06:53:07] *** Quits: jazzy (~jaziz@2607:fb90:a68f:d3a4:80de:3203:f0a3:73c3) (Ping timeout: 264 seconds)
[06:53:08] *** Joins: sn1tch3r_ (~sn1tch3r@185.153.176.22)
[06:53:42] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[06:53:50] *** Quits: iomari891 (~iomari891@197.210.77.213) (Ping timeout: 268 seconds)
[06:54:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[06:54:16] *** Quits: sn1tch3r_ (~sn1tch3r@185.153.176.22) (Client Quit)
[06:54:21] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[06:54:35] *** Joins: sn1tch3r_ (~sn1tch3r@185.153.176.22)
[06:54:49] *** Quits: sn1tch3r_ (~sn1tch3r@185.153.176.22) (Remote host closed the connection)
[06:55:17] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[06:55:22] *** Joins: sn1tch3r_ (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[06:55:48] *** Joins: dme86 (~dan@user/dan86)
[06:56:06] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[06:56:27] *** sn1tch3r_ is now known as sn1tch3r
[06:56:31] *** Quits: Milos (~Milos@user/milos) (Quit: ZNC 1.8.2 - https://znc.in)
[06:56:47] *** Joins: Milos (~Milos@user/milos)
[06:58:49] *** Joins: P1RATEZ (piratez@user/p1ratez)
[06:59:01] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[06:59:06] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:59:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (strontium.libera.chat (Nickname regained by services)))
[06:59:06] *** finn_elija is now known as FinnElija
[06:59:37] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[07:00:14] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:400:215:5dff:fefb:804) (Read error: Connection reset by peer)
[07:00:44] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 268 seconds)
[07:02:58] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[07:04:23] *** Joins: sn1tch3r_ (~sn1tch3r@185.153.176.243)
[07:04:48] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:06:27] *** RuthsturbatorGB is now known as Roey
[07:06:35] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-d88a-0d46-4103-a0ae.res6.spectrum.com) (Quit: jarthur)
[07:07:31] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[07:07:36] *** sn1tch3r_ is now known as sn1tch3r
[07:09:52] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[07:13:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:13:54] *** Quits: ssbr_ (~ssbr@2620:15c:10f:203:6eec:65ac:5c34:94cc) (Ping timeout: 240 seconds)
[07:14:01] *** Joins: chance (~chance@50.47.109.175)
[07:14:11] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[07:14:11] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[07:14:55] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 268 seconds)
[07:15:25] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[07:15:55] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[07:16:15] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[07:16:19] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:16:39] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[07:17:55] *** Quits: sn1tch3r (~sn1tch3r@185.153.176.243) (Remote host closed the connection)
[07:18:38] *** Joins: sn1tch3r (~sn1tch3r@185.153.176.243)
[07:18:54] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[07:18:58] <glik22> is there a way to integrate flit and tox so that i can specify dev dependencies in tool.flit.metadata.requires-extra and not have to re-specify them for testing?
[07:19:30] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[07:19:31] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[07:21:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:22:26] *** Joins: i0e (~is0ke3@user/is0ke3)
[07:23:43] *** Quits: cdown_ (~cdown@163.114.131.1) (Ping timeout: 264 seconds)
[07:25:12] *** Quits: sn1tch3r (~sn1tch3r@185.153.176.243) (Quit: Leaving)
[07:26:11] *** Joins: Wulf (~Wulf@user/wulf)
[07:26:26] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[07:27:23] *** Joins: sn1tch3r (~sn1tch3r@192.154.198.14)
[07:31:06] *** Quits: dragonmaster (rotering@user/dragonmaster) (Quit: WeeChat 2.9)
[07:31:20] *** Joins: dragonmaster (rotering@user/dragonmaster)
[07:31:41] *** Quits: uKi` (~kochi@user/uki/x-9954492) (Quit: leaving)
[07:32:08] *** Joins: uKi` (~kochi@user/uki/x-9954492)
[07:32:20] <FunkyBob> glik22: does tox understand pyproject.toml yet?  iirc that can list dev dependencies
[07:33:18] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 268 seconds)
[07:33:44] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[07:33:55] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[07:34:02] *** Quits: uKi` (~kochi@user/uki/x-9954492) (Client Quit)
[07:34:19] *** Joins: jlang (~jlang@user/jlang)
[07:34:42] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[07:37:02] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:37:12] *** Joins: i0e (~is0ke3@user/is0ke3)
[07:37:25] *** Joins: exciteabletom (~tom@14-203-158-110.static.tpgi.com.au)
[07:37:37] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[07:38:28] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[07:38:42] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 264 seconds)
[07:39:31] *** Joins: raxor2k (~raxor2k@ti0043a400-5959.bb.online.no)
[07:39:50] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[07:40:35] <Linkandzelda> grym: im absolutely loving pathlib! thanks, its exactly what i wanted to bridge the gap between files paths and files themselves
[07:41:05] <raxor2k> Im trying to make a simple IF statement to check if a CSV contains a string/data, but this doesnt work?? https://bpa.st/6PHA
[07:41:17] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:41:37] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[07:41:39] <FunkyBob> raxor2k: you appear to have forgotten to mention  you're using Pandas
[07:42:19] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 264 seconds)
[07:43:30] <BrenBarn> Well, first of all, that "CSV" file is separated by semicolons, not commas
[07:44:34] <raxor2k> Funkybob: sorry, i saw that now. here is update: https://bpa.st/5L2A
[07:44:39] <raxor2k> BrenBarn: ye and ?
[07:44:59] <raxor2k> I should still be able to use that IF sentence. It works pretty well with dicts/etc
[07:45:02] <BrenBarn> do you just want to check if the string "timestamp" is present anywhere in the file?  Like you don't care how or where?
[07:45:10] <raxor2k> BrenBarn: correct
[07:45:12] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[07:45:22] <BrenBarn> then there's no real reason to read it as CSV at all
[07:46:32] <BrenBarn> just open the file and read the contents in and do `if 'timestamp' in contents` (or loop over it like `for line in f` and check on each line, if the file is really big)
[07:46:35] <raxor2k> BrenBarn: you may be right here.. just me over complicating things
[07:47:16] <BrenBarn> you don't need to read it as CSV unless you want to make use of the CSV structure (like access/manipulate things by row or column somehow, basically)
[07:47:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[07:47:58] *** HalfAShark is now known as HalfAShark|EAT
[07:48:23] *** Joins: R24 (~R24@103.201.150.213)
[07:49:01] *** Quits: R24 (~R24@103.201.150.213) (Client Quit)
[07:49:30] *** Quits: emerent (~quassel@p200300cd5703bb9dba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:49:47] *** Joins: emerent (~quassel@p200300cd5703bba5ba27ebfffed28a59.dip0.t-ipconnect.de)
[07:49:48] <rock2X> raxor2k: you can also specify the delimiter in your call, read_csv('prediction_data.csv', delimiter=';')
[07:49:59] <raxor2k> BrenBarn: thanks for answer
[07:50:41] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[07:51:02] *** Quits: sn1tch3r (~sn1tch3r@192.154.198.14) (Remote host closed the connection)
[07:51:33] *** Joins: ksr (~KSR@124.197.12.15)
[07:51:41] *** Joins: kitsu (~Kitsune@107.13.181.89)
[07:52:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:52:15] *** Joins: derelict (~derelict@user/derelict)
[07:52:59] *** Quits: khile (cacambo@triton.blinkenshell.org) (Ping timeout: 244 seconds)
[07:54:13] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:54:16] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:56:30] *** Joins: tkj1028_ (~tkj@user/tkj1028)
[07:56:42] *** Quits: tkj1028 (~tkj@user/tkj1028) (Ping timeout: 240 seconds)
[07:57:54] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 240 seconds)
[07:58:40] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[07:59:31] *** Joins: jazzy (~jaziz@172.58.35.233)
[07:59:57] *** Joins: pwnd_sfw1 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[08:00:26] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[08:00:27] *** pwnd_sfw1 is now known as pwnd_sfw
[08:00:40] *** Joins: jazzy2 (~jaziz@2607:fb90:a68f:d3a4:a155:fbed:d538:b5e5)
[08:01:15] <Linkandzelda> how is it seen passing a class instance to the constructor of class objects it creates? e.g. ItemManager creates Item object and Item gets ItemManager instance in each one?
[08:03:58] <yitz> item = Item(manager=self, ...)
[08:04:52] *** Quits: jazzy (~jaziz@172.58.35.233) (Ping timeout: 268 seconds)
[08:05:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[08:05:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[08:05:33] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:05:52] *** Quits: jlang (~jlang@user/jlang) (Quit: WeeChat 3.1)
[08:06:45] *** Lord_of_Life_ is now known as Lord_of_Life
[08:07:02] *** Joins: jimbobco (~Guest47@c-73-153-4-171.hsd1.co.comcast.net)
[08:07:15] *** Quits: jimbobco (~Guest47@c-73-153-4-171.hsd1.co.comcast.net) (Client Quit)
[08:07:51] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[08:08:14] <Linkandzelda> yitz: i know how to do it, just not sure if its a good practice?
[08:08:51] *** Joins: iomari891 (~iomari891@197.210.77.229)
[08:08:54] <yitz> In terms of circular references or whatnot? I think it's fine
[08:09:16] *** Joins: jimbobco (~default@c-73-153-4-171.hsd1.co.comcast.net)
[08:10:29] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:10:41] <Linkandzelda> yea, i was taught circular dependancies should be avoided to keep coupling low
[08:11:37] *** Quits: jimbobco (~default@c-73-153-4-171.hsd1.co.comcast.net) (Remote host closed the connection)
[08:11:53] *** Joins: jimbobco (~default@c-73-153-4-171.hsd1.co.comcast.net)
[08:11:54] <BrenBarn> it's not uncommon to see stuff like that
[08:12:18] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 264 seconds)
[08:12:58] *** Joins: chilifinger (~chilifing@69-152-169-128.lightspeed.jcvlfl.sbcglobal.net)
[08:15:09] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:16:25] <yitz> it's not actually a dependency
[08:16:47] <yitz> just try to minimize interactions from one item to another. that can get pretty messy
[08:17:02] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[08:17:10] *** Quits: jimbobco (~default@c-73-153-4-171.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[08:18:56] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[08:19:01] <yitz> though if you try to define those in different files, then you could run into issues with circular dependencies
[08:19:43] <yitz> (depending what else your calling etc)
[08:20:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:20:52] *** Joins: matrixskp (~matrixskp@219-89-195-34.adsl.xtra.co.nz)
[08:20:54] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[08:21:58] <Linkandzelda> yitz: for now i am just passing what the Item needs from the Manager, until Item actually needs Manager. i'm really thinking if the Items need to know anything or if the manager should do its named job: manage all items, hehe
[08:22:16] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[08:23:27] *** Joins: ksr (~KSR@124.197.12.15)
[08:25:49] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[08:26:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 244 seconds)
[08:27:01] *** HalfAShark|EAT is now known as HalfAShark
[08:27:43] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[08:27:59] *** Quits: kitsu (~Kitsune@107.13.181.89) (Ping timeout: 252 seconds)
[08:28:16] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[08:28:43] *** jazzy2 is now known as jazzy
[08:28:50] *** Joins: i0e (~is0ke3@user/is0ke3)
[08:30:01] *** Quits: chilifinger (~chilifing@69-152-169-128.lightspeed.jcvlfl.sbcglobal.net) (Remote host closed the connection)
[08:30:37] *** Joins: upsala (~zcb@185.213.155.160)
[08:31:36] *** Quits: montybanksnyc (~montybank@2601:86:600:a2a:c47b:ba3d:d2be:1da8) (Read error: Connection reset by peer)
[08:32:34] *** Quits: maxtimbo (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (Remote host closed the connection)
[08:32:42] *** Quits: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (Remote host closed the connection)
[08:33:05] *** Joins: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[08:34:20] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:34:24] *** Joins: pnoud (~pnoud@user/pnoud)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:13] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:38:56] *** Joins: kaleozhou (~kaleozhou@81.69.37.166)
[08:39:14] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Quit: Gone)
[08:39:54] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[08:40:18] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[08:40:32] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[08:40:59] *** Joins: jdwidari (~jdwidari@173.38.117.76)
[08:41:02] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[08:42:32] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:44:45] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[08:45:10] *** Quits: jdwidari (~jdwidari@173.38.117.76) (Ping timeout: 244 seconds)
[08:46:41] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[08:49:19] <kaleozhou> ..
[08:50:36] *** Joins: jdwidari (~jdwidari@173.38.117.76)
[08:51:00] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[08:51:34] *** Parts: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) ()
[08:51:44] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[08:54:18] <maxtim> ..
[08:54:52] *** Quits: matrixskp (~matrixskp@219-89-195-34.adsl.xtra.co.nz) (Quit: My comp has gone to sleep to save energy. ZZZzzz…)
[08:54:52] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[08:55:19] *** Quits: jdwidari (~jdwidari@173.38.117.76) (Ping timeout: 268 seconds)
[08:55:37] *** Joins: dme86 (~dan@user/dan86)
[08:56:03] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[08:58:42] *** Joins: SebastianM (~seba@user/sebastianm)
[09:00:55] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 264 seconds)
[09:03:54] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Ping timeout: 264 seconds)
[09:04:18] *** Quits: raxor2k (~raxor2k@ti0043a400-5959.bb.online.no) ()
[09:06:07] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[09:06:50] *** Joins: upsala (~zcb@185.213.155.160)
[09:09:30] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[09:09:32] *** Joins: Einstein (~einstein@108.5.219.168)
[09:09:51] *** Joins: iflema (~ian@user/iflema)
[09:10:53] *** Quits: tkj1028_ (~tkj@user/tkj1028) (Ping timeout: 252 seconds)
[09:14:33] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 268 seconds)
[09:14:44] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[09:15:16] *** Joins: pnoud (~pnoud@user/pnoud)
[09:15:35] *** Quits: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com) (Ping timeout: 272 seconds)
[09:19:53] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:21:34] <kaleozhou> maxtim: ..
[09:21:45] <kaleozhou> whois maxtim
[09:22:41] *** Parts: kaleozhou (~kaleozhou@81.69.37.166) ()
[09:23:19] *** Joins: tkj1028_ (~tkj@user/tkj1028)
[09:23:25] *** Joins: tester (~tester@2600:1700:7e41:2c10:7410:6330:1e87:40f5)
[09:24:04] *** Joins: upsala1 (~zcb@193.32.127.240)
[09:24:55] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[09:25:01] *** Quits: upsala (~zcb@185.213.155.160) (Read error: Connection reset by peer)
[09:25:17] *** Joins: upsala2 (~zcb@185.213.155.160)
[09:28:34] *** Quits: upsala1 (~zcb@193.32.127.240) (Ping timeout: 244 seconds)
[09:28:39] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[09:29:13] *** Joins: chance (~chance@50.47.109.175)
[09:30:09] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:31:37] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[09:32:24] *** Quits: P1RATEZ (piratez@user/p1ratez) ()
[09:32:42] *** Isthmusi is now known as Zal
[09:33:31] *** Joins: CollinZrj (~CollinZrj@8.212.12.63)
[09:36:01] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[09:37:50] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 252 seconds)
[09:38:38] *** Quits: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net) (Quit: Lost terminal)
[09:39:37] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[09:40:07] <NeilRG> hello
[09:40:18] <mefistofeles> hey
[09:40:21] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[09:40:27] <NeilRG> what do you guys think of f(y=1, *args) vs f(*args, y=1)?
[09:41:06] <tester> the former, please.
[09:41:12] *** HalfAShark is now known as Hal
[09:41:13] <mefistofeles> I think the "style recommendation" is that keyword args should come later
[09:41:18] *** Hal is now known as HalfAShark
[09:41:19] <mefistofeles> tester: really?
[09:41:46] <tester> *args and **kwargs are for extra things. extra things should come last.
[09:41:47] <NeilRG> mefistofeles: I agree
[09:42:23] <NeilRG> tester: okay, but in which order do you expect g and h to be called?   f(y=g(), *h())
[09:43:04] <tester> I would rewrite the code in a way that is clear. What you've written there made my brain explode.
[09:43:55] *** Quits: Celeo (~Celeo@2603-8001-3301-2e00-8c77-d35a-f4b2-66eb.res6.spectrum.com) (Quit: Leaving)
[09:43:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:43:57] <NeilRG> tester: I know, but it's a weird quirk of Python
[09:44:12] <NeilRG> normally function arguments are evaluated from left to right
[09:44:33] <NeilRG> except when a positional unpacking comes after a keyword argument
[09:44:43] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[09:46:26] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:46:27] *** Quits: shailangsa (~shailangs@host86-186-177-181.range86-186.btcentralplus.com) (Ping timeout: 244 seconds)
[09:46:30] <NeilRG> Anyway, was just asking to get a feel for what Pythoners think
[09:46:37] <NeilRG> I submitted an issue to pylint: https://github.com/PyCQA/pylint/issues/4586
[09:47:16] *** Quits: CollinZrj (~CollinZrj@8.212.12.63) (Quit: Client closed)
[09:47:21] *** Joins: wei2912 (~wei2912@112.199.250.21)
[09:48:12] *** Quits: binarymutt_ (~binarymut@c-98-194-153-108.hsd1.tx.comcast.net) (Ping timeout: 244 seconds)
[09:48:27] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:48:34] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:50:14] *** Joins: x3 (~enix@user/x3)
[09:50:18] *** Parts: x3 (~enix@user/x3) (WeeChat 2.9)
[09:50:29] *** Joins: x3 (~enix@user/x3)
[09:50:43] *** Parts: x3 (~enix@user/x3) (WeeChat 2.9)
[09:51:35] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[09:51:41] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:4869:933b:e3e7:8719) (Ping timeout: 272 seconds)
[09:51:51] *** Joins: rk04 (~rk04@user/rajk)
[09:52:22] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Quit: The Lounge - https://thelounge.chat)
[09:52:23] *** Joins: Gudddu (~Guddu@117.222.80.236)
[09:53:04] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[09:55:26] *** Quits: Guddu (~Guddu@117.222.80.236) (Ping timeout: 252 seconds)
[09:56:29] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:56:39] <jinsun> I didn't even know f(y=1, *args) was possible
[09:57:13] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[09:57:19] *** Joins: shailangsa (~shailangs@host86-145-14-23.range86-145.btcentralplus.com)
[09:58:32] <NeilRG> jinsun: that's encouraging :)
[10:00:26] <glik22> FunkyBob: sorry, super late seeing your reply. tox does support pyproject.toml. it's not immediately clear how to get the extras (https://tox.readthedocs.io/en/latest/config.html#conf-extras) option working though
[10:01:21] *** Quits: upsala2 (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[10:02:10] *** Joins: upsala (~zcb@185.213.155.160)
[10:02:13] *** Joins: Tat (~Tat@137-025-218-069.res.spectrum.com)
[10:03:36] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:04:38] *** Joins: dvx (~dvx@185.63.97.64)
[10:09:05] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:11:06] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 264 seconds)
[10:11:21] *** Quits: rk04 (~rk04@user/rajk) (Quit: rk04)
[10:13:01] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[10:13:53] *** Joins: mkv (~znc@ubuntu/member/m4v)
[10:15:35] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 244 seconds)
[10:15:35] *** mkv is now known as m4v
[10:16:43] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 268 seconds)
[10:18:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[10:18:49] <Linkandzelda> whats the best way to recursively validate dicts?
[10:19:11] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[10:19:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[10:21:45] *** Quits: dtg01100 (~dtg01100@199.21.141.37) (Quit: dtg01100)
[10:22:16] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[10:22:56] *** Joins: wyclif (~wyclif@user/wyclif)
[10:23:06] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 264 seconds)
[10:24:40] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.2-dev)
[10:25:28] *** Quits: Gudddu (~Guddu@117.222.80.236) (Read error: Connection reset by peer)
[10:25:43] <NeilRG> Linkandzelda: with a recursive function?
[10:26:26] *** Quits: tester (~tester@2600:1700:7e41:2c10:7410:6330:1e87:40f5) (Ping timeout: 244 seconds)
[10:26:30] <Linkandzelda> NeilRG: i am wondering if its quicker to write a function to validate my data object, or write a library to validate and check recursive dict structures. but im falling on the first
[10:26:33] *** Joins: r3m (~launch@user/r3m)
[10:28:52] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580)
[10:29:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:30:13] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:31:11] *** Quits: raukadah (~raukadah@110.44.96.144) (Ping timeout: 252 seconds)
[10:31:51] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580) (Client Quit)
[10:32:08] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580)
[10:32:44] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580) (Read error: Connection reset by peer)
[10:33:36] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580)
[10:33:57] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580) (Read error: Connection reset by peer)
[10:34:10] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580)
[10:35:01] *** Joins: gusto (~Augustus@109.255.100.54)
[10:35:42] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580) (Client Quit)
[10:35:58] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580)
[10:36:31] *** Joins: palasso (~palasso@user/palasso)
[10:36:36] *** Quits: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com) (Ping timeout: 252 seconds)
[10:38:09] *** Joins: manti7 (~manti7@176.10.104.94)
[10:39:28] *** Joins: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com)
[10:40:09] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[10:41:01] *** Joins: kosh (~kosh@user/kosh)
[10:44:36] <NeilRG> Linkandzelda: fwiw you could use jax.tree_util.tree_map and tree_reduce to validate an arbitrary data structure
[10:45:04] <Linkandzelda> NeilRG: could you give me an example
[10:45:42] <NeilRG> is_valid = tree_reduce(operator.and, tree_map(validate_function, structure))
[10:46:12] <NeilRG> validation_function validates an element of your structure and returns a Boolean
[10:46:48] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:47:26] *** Joins: seednode (~seednode@user/seednode)
[10:48:07] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[10:49:22] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[10:49:52] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[10:50:24] *** Joins: CollinZrj (~CollinZrj@101.231.169.226)
[10:53:50] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[10:54:00] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[10:54:20] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[10:55:49] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:56:22] *** Joins: Naan (~Naan@user/naan)
[10:57:09] *** Joins: pneff (~pneff@81.6.40.205)
[10:57:19] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 252 seconds)
[10:57:30] *** Joins: maroloccio (~marolocci@200.243.99.194)
[10:59:27] *** Quits: CollinZrj (~CollinZrj@101.231.169.226) (Remote host closed the connection)
[11:00:02] *** Quits: salpynx (~salpynx@121.73.84.248) (Quit: Connection closed)
[11:00:58] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[11:01:26] <raek> Linkandzelda: if you start with some unstructured or semi-structured data (for example key-value paris where both a strings) and you want to populate some kind of data classes with that data, then Pydantic might be a good tool for the job: https://pydantic-docs.helpmanual.io/
[11:01:32] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:01:40] <raek> *both are
[11:02:45] *** Joins: ksr (~KSR@124.197.12.15)
[11:03:08] <raek> it provides functions to load from nested dicts and store back into nested dicts (or json)
[11:03:19] *** Joins: Auron (Auron956@user/auron)
[11:03:25] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Read error: Connection reset by peer)
[11:03:41] *** Joins: CombatVet (~c4@user/combatvet)
[11:04:05] <Linkandzelda> raek: i will take a look, thanks
[11:05:34] <raek> it'll convert values like "123" to 123 if a filed is of type int. if ruling out "123" as a valid input is important to you, then pydantic is probably not the best fit (I think there are other libraries that fits that use case better)
[11:09:39] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[11:09:57] *** Joins: CollinZrj (~CollinZrj@101.231.169.226)
[11:12:10] *** Quits: CollinZrj (~CollinZrj@101.231.169.226) (Remote host closed the connection)
[11:12:18] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 240 seconds)
[11:12:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[11:12:51] *** Joins: yogoyo (~weechat@user/yogoyo)
[11:13:31] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[11:14:05] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[11:15:37] *** Joins: Trieste (~T@user/pilgrim)
[11:15:49] <Linkandzelda> raek: im going to validate best i can, but since im writing a wrapper to a commandline tool i feel that doing too much is just doing the job twice. so im just making sure the basics are validated like not empty. the tool itself will error out on any invalid data and that will be fed back to the program for the logs to be read and understand what went wrong
[11:15:52] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[11:16:50] *** Joins: magla (~gelignite@55d4811a.access.ecotel.net)
[11:17:30] <Linkandzelda> my Config class takes a yaml (even empty) and populates it with a built in set of defaults, or defaults defined in another config file. that ensures all configs even with a single value set get populated with no missing basic default values
[11:18:18] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[11:18:24] <Linkandzelda> that goes also for the 2 possible lists of key value pairs
[11:19:08] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 244 seconds)
[11:19:53] <mcint> I've got a project using click to define a bunch of subcommands. How might I handle an argument before the subcommand, I could handle it as an option, but would like to be able to use it unqualified (for a (distinctive) filename)?
[11:21:36] *** Quits: maroloccio (~marolocci@200.243.99.194) (Ping timeout: 250 seconds)
[11:21:49] *** Joins: milosz (~milosz@user/milosz)
[11:22:05] *** Joins: Tas-sos (~Tas-sos@ppp079167217163.access.hol.gr)
[11:23:00] <habnabit_> mcint, add the argument to your main function, so @click.group() @click.argument(..) def main(..):
[11:23:32] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[11:28:15] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[11:28:18] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[11:28:23] <Evolver> Finally finished moving #pydata-news from Fleenode, with its bots
[11:29:12] <kosh> grats
[11:29:15] <mcint> thanks habnabit_
[11:29:33] <mcint> hmm, for click, how do i have it respond to -h vs just --help
[11:29:35] <kosh> although it is not like they gave people a choice about moving, pretty impressive the way they blew themselves up
[11:29:44] <habnabit_> mcint, the click docs cover this somewhere
[11:30:02] <mcint> ok, poking though them already
[11:30:03] <habnabit_> mcint, look for 'help options' or such
[11:31:02] <mcint> https://click.palletsprojects.com/en/7.x/documentation/#help-parameter-customization
[11:31:09] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[11:31:40] <mcint> thank you
[11:32:04] *** Quits: jpic (~jpic@82.142.9.26) (Ping timeout: 268 seconds)
[11:33:43] <Evolver> I have been using Python to generate reasonably complex Presto SQL jobs for big data transformation. That's not using an ORM because it's not an application like that.
[11:34:09] *** Joins: maroloccio (~marolocci@200.243.99.194)
[11:36:15] *** Quits: tkj1028_ (~tkj@user/tkj1028) (Quit: godspeed)
[11:37:39] <Evolver> habnabit_: hey you can replace https://j.mp/MCAhYx in the channel topic with https://j.mp/PyTut
[11:38:15] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 244 seconds)
[11:39:03] *** Joins: alguien (~alguien@user/alguien)
[11:39:34] *** Joins: ssbr_ (~ssbr@c-174-61-157-141.hsd1.wa.comcast.net)
[11:40:49] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[11:43:44] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (Ping timeout: 244 seconds)
[11:44:14] *** Joins: dme86 (~dan@user/dan86)
[11:44:23] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:44:54] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 268 seconds)
[11:46:34] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[11:46:50] *** Quits: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net) (Ping timeout: 244 seconds)
[11:46:58] *** Joins: jheblu (~user@116.68.98.40)
[11:47:00] <habnabit_> Evolver, is the difference just the spelling of the short url?
[11:47:12] *** Joins: wm (~wmy@2a01:4f8:1c1c:7918::1)
[11:47:20] <Evolver> habnabit_: yes. The same kind of change was done previously for the psf-coc link
[11:47:53] <habnabit_> the 'new programmer' link should get one too
[11:48:03] *** ChanServ sets mode: +o habnabit_
[11:48:20] <MikachuPi> Oh, I don't know who maintains the site, but it looks like the about link on bpa.st return a 404 error: https://bpa.st/about
[11:48:31] <habnabit_> supakeen, ^
[11:49:00] *** habnabit_ changes topic to 'Anything Python is on-topic. | Don't paste, use https://bpa.st/+python | Welcome to Libera, our new home. Questions about this channel? https://www.pound-python.org | CoC: https://j.mp/psf-coc | Tutorial: https://j.mp/PyTut | New programmer? https://j.mp/23X7emF | Ops: #python-ops'
[11:49:05] *** habnabit_ sets mode: -o habnabit_
[11:49:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 244 seconds)
[11:50:11] *** Joins: matjazv (~matjazv@84-255-196-218.static.t-2.net)
[11:50:11] *** Joins: death916_lap (~Death916@user/death916)
[11:50:14] <Evolver> habnabit_: here: https://j.mp/tpy2ed
[11:50:44] *** Quits: death916_lap (~Death916@user/death916) (Client Quit)
[11:51:06] <habnabit_> honestly that looks like short url gibberish haha
[11:51:11] <habnabit_> i get what you're going for
[11:51:27] <Evolver> well I had no choice. Others were already taken
[11:51:41] <Evolver> I took what I could get
[11:52:08] *** Quits: matjazv (~matjazv@84-255-196-218.static.t-2.net) (Client Quit)
[11:52:16] <habnabit_> i think that one is a little less compelling and i need to go presently anyway
[11:52:18] *** Quits: exciteabletom (~tom@14-203-158-110.static.tpgi.com.au) (Ping timeout: 268 seconds)
[11:52:48] <Evolver> ok. can later save a character by removing s from https if it runs short
[11:53:05] <Evolver> so that's the other motivation
[11:53:40] <supakeen> MikachuPi, thank you I'll fix that :)
[11:54:05] *** Joins: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net)
[11:54:11] *** Joins: wyclif (~wyclif@user/wyclif)
[11:54:48] <MikachuPi> supakeen: ;)
[11:54:54] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[11:54:57] <TML> Evolver: bit.ly/think-py
[11:56:10] *** Quits: DTE (~DTE@nat-pool-fab-t.redhat.com) (Quit: ZNC 1.8.2 - https://znc.in)
[11:56:25] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[11:57:49] *** Joins: raukadah (~raukadah@110.44.96.144)
[11:58:24] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:59:53] *** Joins: rendar (~rendar@user/rendar)
[12:01:09] *** Joins: DTE (~DTE@nat-pool-fab-t.redhat.com)
[12:05:34] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:05:36] *** Joins: chele (~chele@user/chele)
[12:07:20] *** Joins: raukadah__ (~raukadah@110.44.96.144)
[12:07:30] *** raukadah__ is now known as chandankumar
[12:07:41] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:09:13] *** Joins: Vonter (~Vonter@user/vonter)
[12:10:11] *** Quits: raukadah (~raukadah@110.44.96.144) (Ping timeout: 268 seconds)
[12:11:21] *** Joins: badsektor (~badsektor@user/badsektor)
[12:12:38] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[12:12:53] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Client Quit)
[12:13:23] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[12:14:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:16] *** Joins: pnoud (~pnoud@user/pnoud)
[12:16:09] *** Joins: Deneb (~johnch@195.213.86.93)
[12:17:19] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[12:17:53] *** Joins: Jormungandr (~brad@136.49.61.2)
[12:17:54] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 240 seconds)
[12:17:55] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[12:18:12] *** Quits: Jormungandr89 (~brad@136.49.61.2) (Ping timeout: 268 seconds)
[12:18:31] *** Joins: Adoi (~Adoi@user/adoi)
[12:20:06] *** Joins: Schnouki (~schnouki@user/schnouki)
[12:20:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:20:50] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com)
[12:21:10] *** Joins: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu)
[12:22:10] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[12:22:50] *** Joins: easior (~easior@61.155.142.67)
[12:23:36] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130)
[12:24:06] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Remote host closed the connection)
[12:24:24] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[12:24:32] *** Joins: sebastianos (~sebastian@user/sebastianos)
[12:24:44] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:25:57] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[12:25:58] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[12:26:47] *** Quits: Reventlov (~remy@user/reventlov) (Quit: WeeChat 2.3)
[12:27:13] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Quit: Leaving)
[12:27:53] *** Joins: egon_ (~egon@user/egon)
[12:27:58] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[12:30:18] *** Joins: exciteabletom (~tom@58-7-218-64.dyn.iinet.net.au)
[12:30:59] *** Quits: sebastianos (~sebastian@user/sebastianos) (Read error: Connection reset by peer)
[12:31:06] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 240 seconds)
[12:32:44] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[12:33:31] <no_gravity> Is this the best way to add a list to a list of lists if it does not yet exist? if not k in l: l[k] = []
[12:33:34] *** Joins: sebastianos (~sebastian@user/sebastianos)
[12:33:54] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[12:34:40] *** Joins: __jmcantrell__ (~weechat@86.106.121.162)
[12:35:29] *** Quits: egon_ (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:35:50] *** Joins: easior_ (~easior@61.155.142.70)
[12:35:53] *** Joins: egon_ (~egon@user/egon)
[12:35:59] *** Joins: tims1 (~tims@2001:8004:5100:8bc:146d:5c18:b755:6bca)
[12:36:24] <jinsun> no_gravity: what is k there?
[12:36:41] <no_gravity> jinsun: Oh, its not a list of lists but a dict of dicts.
[12:36:52] <no_gravity> k is the key. Let me try again ...
[12:36:53] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:11] <no_gravity> Is this the best way to add a dict to a dict of dicts if it does not yet exist? if not k in l: l[k] = {}
[12:37:18] <KirkMcDonald> no_gravity: It is possible that it would be more convenient to use a collections.defaultdict(list)
[12:37:30] <KirkMcDonald> Or collections.defaultdict(dict), if that's the case.
[12:37:40] *** Quits: jmcantrell (~weechat@86.106.121.201) (Ping timeout: 244 seconds)
[12:37:40] <no_gravity> KirkMcDonald: Why not just use {}?
[12:38:00] <KirkMcDonald> This will create missing keys as required.
[12:38:11] *** Parts: sigint (sigint@user/sigint) ()
[12:38:13] <no_gravity> KirkMcDonald: What are missing keys?
[12:38:33] *** Quits: easior (~easior@61.155.142.67) (Ping timeout: 268 seconds)
[12:38:33] <KirkMcDonald> When you access a key, and it does not exist.
[12:39:06] <no_gravity> KirkMcDonald: v = d['hello'] will create an entry 'hello' in d?
[12:39:20] *** Joins: matrixskp (~matrixskp@122-60-56-84-adsl.sparkbb.co.nz)
[12:39:20] <KirkMcDonald> Yes.
[12:39:30] <no_gravity> I can't believe that. Let me try ...
[12:39:45] *** __jmcantrell__ is now known as jmcantrell
[12:39:52] *** Quits: matrixskp (~matrixskp@122-60-56-84-adsl.sparkbb.co.nz) (Client Quit)
[12:40:06] *** Joins: easior__ (~easior@61.155.142.70)
[12:40:10] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:40:23] *** Joins: kmh (~kmh@p200300df5f1f6100ccf3735bd098c7df.dip0.t-ipconnect.de)
[12:40:31] <no_gravity> KirkMcDonald: It does not: https://www.online-python.com/V8vmqnjBfb
[12:41:04] <jinsun> no_gravity: you didn't use defaultdict
[12:41:12] <KirkMcDonald> no_gravity: https://bpa.st/SX4A
[12:41:47] *** o is now known as niko
[12:42:10] *** Quits: egon_ (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:42:20] <no_gravity> I see.
[12:42:33] <no_gravity> Looks nicer then the normal dict.
[12:42:54] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[12:43:18] *** Joins: slav0nic (slav0nic@python.su)
[12:43:29] *** Quits: easior_ (~easior@61.155.142.70) (Ping timeout: 268 seconds)
[12:44:04] <no_gravity> Let me play around with it ..
[12:44:15] *** Joins: waxfire23 (~waxfire@65.119.2.240)
[12:44:27] *** Joins: matrixskp (~matrixskp@122-60-56-84-adsl.sparkbb.co.nz)
[12:44:40] *** Joins: easior (~easior@61.155.142.73)
[12:44:55] *** Quits: matrixskp (~matrixskp@122-60-56-84-adsl.sparkbb.co.nz) (Client Quit)
[12:45:08] *** Quits: waxfire2 (~waxfire@65.119.2.240) (Read error: Connection reset by peer)
[12:45:08] *** waxfire23 is now known as waxfire2
[12:45:20] <no_gravity> It's just a crazy amount of characters just to create a dict.
[12:45:23] *** Quits: easior__ (~easior@61.155.142.70) (Ping timeout: 252 seconds)
[12:46:00] <KirkMcDonald> from collections import defaultdict as dd; d = dd(dict)
[12:46:02] <no_gravity> And it does not help too much.
[12:46:09] *** Joins: wattux (~wattux@212.51.23.106)
[12:46:15] <KirkMcDonald> But, another alternative is to use setdefault.
[12:46:25] *** Joins: Padawan (~Padawan@user/padawan)
[12:46:33] <KirkMcDonald> d = {}; v = d.setdefault(k, {})
[12:46:55] <no_gravity> KirkMcDonald: But would it make this shorter? if not k in d: d[k] = {}
[12:47:01] <no_gravity> I think that is hard to beat.
[12:47:03] *** Joins: easior_ (~easior@61.155.142.73)
[12:47:21] <KirkMcDonald> Using the defaultdict (or setdefault) eliminates the need to do the check yourself.
[12:47:37] <KirkMcDonald> You just retrieve the value as needed, and it is created as needed.
[12:47:38] <no_gravity> Let me try ...
[12:47:45] *** Joins: feriman (~feriman@188.163.113.127)
[12:47:48] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[12:48:06] <no_gravity> I see
[12:48:37] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi)
[12:49:14] <kevr> how do i get a method like getattr(cls, attr_name)?
[12:49:39] *** Quits: easior (~easior@61.155.142.73) (Ping timeout: 272 seconds)
[12:50:32] <KirkMcDonald> kevr: I'm unclear on what you're asking.
[12:50:59] <KirkMcDonald> kevr: But, is the answer, "Exactly like that"?
[12:51:00] <kevr> KirkMcDonald: A.some_method, I need to name some_method via string
[12:51:16] <tims1> kevr: same way
[12:51:20] <tims1> use getattr
[12:51:51] *** Joins: kixx (~kixx@user/kixx)
[12:52:13] *** Joins: Berg (~chatzilla@user/berg)
[12:52:22] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[12:52:24] <kevr> hm.
[12:52:35] <Berg> hay guys whats a good lib that has working examples of sasl?
[12:52:39] *** Quits: Tas-sos (~Tas-sos@ppp079167217163.access.hol.gr) (Ping timeout: 244 seconds)
[12:53:39] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[12:53:59] <alguien> Long shot: Does anyone see where this response attribute is coming from? https://gitlab.com/meltano/tap-gitlab/-/blob/master/tap_gitlab/__init__.py#L217 From what I understand about the backoff library, it will pass ResourceInaccessible here, and I don't see that ResourceInaccessible it has the attribute
[12:54:24] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:55:30] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[12:56:04] *** Joins: easior__ (~easior@61.155.142.67)
[12:56:21] *** Joins: Naan (~Naan@user/naan)
[12:56:28] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[12:56:36] *** Joins: dodobrain__ (~dodobrain@user/dodobrain)
[12:57:07] *** Joins: aslicedbanjo (~aslicedba@host86-150-115-58.range86-150.btcentralplus.com)
[12:57:24] *** Joins: Disavowed (~chomp@user/disavowed)
[12:57:33] *** Joins: zaquest (~notzaques@5.128.210.178)
[12:58:13] <The-Compiler> alguien: https://github.com/litl/backoff says "The giveup keyword arg can be used to specify a function which accepts the exception"
[12:58:32] *** Quits: easior__ (~easior@61.155.142.67) (Client Quit)
[12:59:17] <The-Compiler> alguien: so it gets the requests.exceptions.RequestException object, which seems to have that attribute: https://docs.python-requests.org/en/latest/_modules/requests/exceptions/#RequestException
[12:59:23] <Disavowed> Evening all. Helping a friend authenticate an IRC bot on Libera (which has to be via SASL) in Python. He's not keen on Sopel; I don't suppose anyone has any recommendations for an easy library with which to do this?
[12:59:30] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[13:01:11] *** Joins: SebastianM (~seba@user/sebastianm)
[13:01:15] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[13:01:43] <alguien> The-Compiler, oh you're saying there's a native exception that has the attribute. But the function's also throwing its own exception, ResourceInaccessible, which does not have the attribute. Wouldn't giveup processing it cause a crash?
[13:01:48] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[13:01:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:02:43] <The-Compiler> alguien: if I understand the library correctly, @backoff.on_exception(..., (requests.exceptions.RequestException), ...) would only retry on that exception
[13:03:31] <The-Compiler> alguien: ResourceInaccessible gets raised for 401 and 403 (unauthorized/forbidden) - it wouldn't make any sense to retry for those cases, if the server doesn't allow accessing a resource, trying again isn't going to change that
[13:03:43] *** Quits: yogoyo (~weechat@user/yogoyo) (Quit: WeeChat 3.0.1)
[13:03:43] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:06:55] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[13:07:38] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:09:14] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:412f:83fa:4c40:a575)
[13:09:15] *** Quits: feriman (~feriman@188.163.113.127) (Quit: WeeChat 3.2)
[13:10:09] *** Joins: easior__ (~easior@61.155.142.67)
[13:13:19] *** Quits: easior_ (~easior@61.155.142.73) (Ping timeout: 244 seconds)
[13:13:52] *** Joins: JPT (~jpt@classified.name)
[13:14:57] *** Quits: cjb (~cjb@user/cjb) (Quit: end of day)
[13:15:21] *** Joins: browniebroke (uid501792@id-501792.tinside.irccloud.com)
[13:16:42] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 240 seconds)
[13:16:52] *** Joins: Mija (~Mija@user/mija)
[13:17:31] *** Joins: TFKyle (~kyle@64.201.205.70)
[13:18:45] *** Joins: Trieste (T@user/pilgrim)
[13:18:52] <rud0lf> i've heard they removed all servers of freenode along with nickserv
[13:19:59] <Berg> freenode is broken wasted thing we all regret loosing but hay
[13:20:28] <The-Compiler> rud0lf, Berg: this should probably go to #python-offtopic (but yes)
[13:21:00] <rud0lf> sorry i thought it's another channel, The-Compiler
[13:21:08] <Berg> no worried i reply nothing me im looking for a solution for sasl to irc a bot in python
[13:21:46] <Berg> lotsd of the libs out there seem unfinnished
[13:23:47] *** Joins: dme86 (~dan@user/dan86)
[13:25:51] *** Joins: easior (~easior@61.155.142.73)
[13:26:14] <mcint> hmm, for click I want to allow the first argument to be either the subcommand or a file/path. right now it can be parsed as both... i guess i can filter out the command words explicitly http://ix.io/3qcM just fiddle with Context explicity  whee
[13:27:26] <tims1> Berg: the aiosasl library looks fairly complete, although your code would need to be async
[13:27:44] *** Joins: eddi (~textual@chemap24.chem.uzh.ch)
[13:27:53] <Disavowed> Berg: I can help you with that
[13:27:57] <Disavowed> tims1: thank you so much
[13:28:03] <Berg> aiosasl thanks ill look
[13:28:30] <Disavowed> You're going to hate async in Python but I'll give you a hand. Let's try that
[13:28:31] *** Quits: easior__ (~easior@61.155.142.67) (Ping timeout: 264 seconds)
[13:28:34] *** Parts: Disavowed (~chomp@user/disavowed) ()
[13:30:21] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 268 seconds)
[13:33:38] *** Quits: eddi (~textual@chemap24.chem.uzh.ch) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:33:42] <alguien> The-Compiler, right, I totally missed the fact that it only catches RequestException-s here, thanks
[13:34:26] <alguien> The-Compiler, does the fact that it processes 401 and 403 means for these particular 4xx statuses RequestExceptions are not raised?
[13:34:47] <alguien> s/it/the function/ s/processes/manually processes/
[13:35:06] <alguien> is there a list for which they are raised and for which they aren't?
[13:36:32] *** Quits: justBull (~justache@user/justache) (Read error: Connection reset by peer)
[13:36:32] <The-Compiler> alguien: I don't fully understand the code really, its error handling is certainly a bit weird
[13:36:43] *** Joins: varaindemian (~varaindem@82.76.227.153)
[13:36:59] <alguien> The-Compiler, what I can tell you for sure is that a 429 Too Many Requests status ends up in the else branch
[13:37:09] <The-Compiler> alguien: requests won't raise for a non-successfull HTTP status (unless you call .raise_for_status()), so such an exception would only happen for things like timeouts
[13:37:35] <The-Compiler> alguien: but then I don't understand the giveup clause there, I wouldn't expect there to be a response attribute for most (if not all) cases where such an exception is raised
[13:37:45] <alguien> thanks again, can you do me one last favor: link me to docs where this is stated?
[13:37:55] *** Joins: justBull (~justache@user/justache)
[13:38:46] <alguien> The-Compiler, it only catches RequestExceptions, and all of them have the response attribute right? The exception raised by the function itself (ResourceInaccessible) is just passed through, not caught by backoff
[13:38:58] *** Quits: maroloccio (~marolocci@200.243.99.194) (Ping timeout: 250 seconds)
[13:39:06] <alguien> (i thought you explained this to _me_ heh)
[13:39:11] <The-Compiler> alguien: they do have a response attribute, but it's probably going to be None for most/all errors
[13:39:30] <The-Compiler> alguien: not much I can point to in the docs, just an educated guess :)
[13:39:51] <The-Compiler> alguien: https://docs.python-requests.org/en/master/_modules/requests/exceptions/ for one - for many of those exceptions, the response isn't available yet
[13:40:00] <alguien> Aha, well alrgiht, it says for any super duper exceptions, throw. Others - process manually.
[13:40:11] <The-Compiler> alguien: also, https://docs.python-requests.org/en/latest/api/#requests.Response.raise_for_status kind of implying that a HTTP error won't raise an exception automatically
[13:40:13] <alguien> Though manual processing is a bit simplistic
[13:41:37] *** Quits: kixx (~kixx@user/kixx) (Read error: Connection reset by peer)
[13:41:44] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247)
[13:42:16] *** Joins: Krail (~Krail@user/alexdelarge)
[13:42:18] *** Joins: kixx (~kixx@user/kixx)
[13:42:32] *** Joins: HighlyCurious (~HighlyCur@2600:1700:38d0:8250:e570:3d0d:9539:d73a)
[13:43:02] <HighlyCurious> Hi could someone help me with the query ? Does gevent.select support xlist ? In the gevent documentation, it states:
[13:43:15] <HighlyCurious> "xlist is ignored" - http://www.gevent.org/api/gevent.select.html
[13:43:15] <alguien> The-Compiler, but yeah it's weird how they use backoff, retry if ResponseException is thrown that's not a 4xx
[13:43:34] *** Quits: kixx (~kixx@user/kixx) (Read error: Connection reset by peer)
[13:44:04] *** Quits: p-i-_ (~Ohmu@node-n9d.pool-118-173.dynamic.totinternet.net) (Remote host closed the connection)
[13:44:20] *** Joins: p-i- (~Ohmu@node-n9d.pool-118-173.dynamic.totinternet.net)
[13:45:02] *** Parts: Krail (~Krail@user/alexdelarge) ()
[13:48:01] <alguien> The-Compiler, thanks for the docs, now I thoroughly get what you're saying
[13:48:20] *** dodobrain__ is now known as dodobrain
[13:50:09] *** Quits: HighlyCurious (~HighlyCur@2600:1700:38d0:8250:e570:3d0d:9539:d73a) (Quit: Client closed)
[13:50:32] *** Parts: Berg (~chatzilla@user/berg) ()
[13:50:59] *** Joins: kixx (~kixx@user/kixx)
[13:51:08] *** Quits: kixx (~kixx@user/kixx) (Read error: Connection reset by peer)
[13:51:56] *** Quits: tims1 (~tims@2001:8004:5100:8bc:146d:5c18:b755:6bca) (Ping timeout: 252 seconds)
[13:54:12] *** Quits: magla (~gelignite@55d4811a.access.ecotel.net) (Quit: Stay safe!)
[13:55:08] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 268 seconds)
[13:55:53] *** Joins: gareppa (~gareppa@user/gareppa)
[13:56:14] *** Joins: feriman (~feriman@188.163.113.127)
[13:58:07] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[13:59:00] *** Joins: Snyp (~rksht@49.207.192.68)
[13:59:24] *** Quits: rigid (~rigid@ip4d169c7e.dynamic.kabel-deutschland.de) (Quit: +++ ATH)
[13:59:33] <rubin55> hey all, discovering setuptools for the first time. I created a setup.cfg and pyproject.toml and I can python -m build which will result in a package. I have my source in a src/ subdirectory and specified that in setup.cfg, which more or less works as expected.
[14:00:06] <rubin55> Question: Why do I get a foopackage.egg-info directory both in the root of the project AND in the src/ subdirectory? is that expected behaviour?
[14:00:22] *** Joins: dme86 (~dan@user/dan86)
[14:02:33] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:02:55] *** cvmn is now known as caveman
[14:03:54] *** Quits: iomari891 (~iomari891@197.210.77.229) (Ping timeout: 240 seconds)
[14:04:46] <jinsun> rubin55: doesn't seem like expected behaviour, I get it in src and not root location
[14:04:55] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[14:06:02] <rubin55> jinsun: thanks, I thought so.. what does your setup.cfg look like? I'm using the find: stuff to not have to specify packages manually in setup.cfg, maybe that's causing this somehow
[14:06:04] *** Joins: doev (~doev@mobile.bpv-consult.net)
[14:06:35] *** Joins: iomari891 (~iomari891@197.210.53.216)
[14:06:44] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[14:07:22] <doev> is there a way to pass a dict to a function() and then have access to the keys/values with normla variables?
[14:07:31] <jinsun> rubin55: I have find: too, and where = src in options.packages.find
[14:07:58] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[14:08:13] *** Joins: Xat` (~Xat`@ns300217.ip-91-121-29.eu)
[14:08:21] <jinsun> rubin55: have you tried deleting both and rebuilding, do they both come back?
[14:08:32] <Xat`> hi guys
[14:08:34] <bjs> doev: in general there is no way to turn a dicts keys into normal variables
[14:08:42] <gitesh> Hi Xat`
[14:08:55] <bjs> doev: because you don't know what keys the dict will have, so you don't know what variables to make.
[14:08:55] *** Quits: saschi (~saschi@user/saschi) (Read error: Connection reset by peer)
[14:09:30] *** Quits: audiocat (~audio@2603-8081-1800-0062-c574-3dd0-68c8-791e.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:09:32] *** Joins: saschi (~saschi@user/saschi)
[14:10:03] *** Joins: zeenk (~zeenk@188.26.30.39)
[14:10:05] *** Quits: Padawan (~Padawan@user/padawan) (Ping timeout: 252 seconds)
[14:11:42] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 264 seconds)
[14:12:06] <rendar> `"square{square} -- {item}\n"` if i have this string, what is the best way to get N of these strings concatenated, with those square and item be the items of a zip(squares, items) list?
[14:12:35] <KirkMcDonald> doev: If you know the set of names a priori, then you can e.g. https://bpa.st/TZ6A
[14:12:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 264 seconds)
[14:13:27] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[14:13:31] *** Quits: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net) (Ping timeout: 268 seconds)
[14:13:56] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:15:46] <Xat`> how can I handle the removal of item from a list when I am currently looping over the list ? https://paste.ee/p/KXFNU
[14:16:15] <doev> bjs, ok thought so. Even if you unpack a dict function(**dict) you only can fetch it with **kwargs
[14:16:43] *** Joins: easior_ (~easior@61.155.142.70)
[14:17:18] <bjs> doev: well if you know the keys, then you you can have `def function(name, location): print(name, location)` then `function(**{"name": "bjs", "location": "#python"})` will work
[14:17:29] *** Joins: masoudd (~masoudd@user/masoudd)
[14:17:46] <bjs> doev: but if you don't know what the keys are, then you can't (easily) turn them into variables
[14:18:16] *** Joins: pnoud (~pnoud@user/pnoud)
[14:18:19] *** Quits: easior (~easior@61.155.142.73) (Ping timeout: 272 seconds)
[14:20:13] <Repiphany> Xat`: https://bpa.st/T3IQ looping over a copy of the list instead
[14:20:14] *** Joins: Darylgolden (~Darylgold@user/darylgolden)
[14:20:27] *** Joins: malina (~malina@user/malina)
[14:21:29] *** Quits: anp (~anp@user/anp) (Ping timeout: 272 seconds)
[14:21:30] <malina> heya, anyone would likes to do pygtk, or so? have a small fix and im rather buys but ill do it if i have to. I/we already do the functionality but want  what is maybe 20 lines? or somehting to patch a simple checkbox in a pref box, to be dependent on the value of one of ht eother check boxe sand that sit
[14:21:36] <rubin55> jinsun: yes, they do both come back
[14:21:50] <malina> the gui exists, it's all there, even the 2 chec boxes, so it's almost no work at all for someon who knows their things (and mightbe bored).
[14:22:20] <Repiphany> Or just list comprehension [file for file in files if f['type'] != 'tree']
[14:22:29] <malina> suprising that a irc servr of linux ppl can be lacking in so many either abilities or sense of fun, of doing such things lol
[14:23:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[14:23:33] <mgedmin> I need my lawn mowed for free, it'll be fun!
[14:24:29] *** Joins: Pickchea (~private@user/pickchea)
[14:24:58] *** Joins: wyclif (~wyclif@user/wyclif)
[14:25:46] *** Joins: bluesmonk (uid318026@id-318026.brockwell.irccloud.com)
[14:26:12] *** Joins: guavahabanero (~gavin@78-27-72-93.bb.dnainternet.fi)
[14:27:34] *** Joins: gareppa (~gareppa@user/gareppa)
[14:27:36] <malina> jesu christ
[14:27:41] <malina> this is 'linux world
[14:28:19] <nedbat> malina: maybe i misunderstood: were you surprised that no one volunteered to help within one minute of your message?
[14:28:20] <Xat`> Repiphany: alright ! I didn't know about `list[:]` syntax
[14:28:56] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[14:29:07] <malina> irc: nothign but really thick di.. sticks
[14:29:21] <malina> no, I was hoping that there are some
[14:29:25] <malina> maybe students on the freenode
[14:29:38] <malina> or libera now, which actually like doing little things in the world of scripting etc
[14:29:57] <malina> I been running a distro for 4-5 yrs, I do enough work and can do this too, but would be nice to see if maybe someonw would wanna
[14:30:04] <malina> OH your opoor OMG MAYBE I HAVE OT WKR FOR 1 minute
[14:30:05] <malina> in coding
[14:30:25] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[14:30:35] <nedbat> malina: you shouldn't claim to know other people's minds.
[14:30:49] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:30:49] <malina> oh, am I claiming now
[14:31:03] <The-Compiler> malina: What outcome are you hoping for if you join a channel, ask people to write your code, and then start insulting people and some ranting within a minute or two?
[14:31:10] *** Parts: malina (~malina@user/malina) ()
[14:31:15] <nedbat> malina: ask for help, people might help
[14:31:24] <The-Compiler> ¯\_(ツ)_/¯
[14:31:26] <guavahabanero> She seemed nice.
[14:32:29] *** Quits: guavahabanero (~gavin@78-27-72-93.bb.dnainternet.fi) (Quit: leaving)
[14:32:42] *** Joins: Adois (~Adoi@user/adoi)
[14:33:31] *** Joins: entuland (~entuland@user/entuland)
[14:34:14] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[14:34:15] *** Joins: Meteorhead (~Meteorhea@static-qvn-qvs-164225.business.bouyguestelecom.com)
[14:35:28] *** Quits: Meteorhead (~Meteorhea@static-qvn-qvs-164225.business.bouyguestelecom.com) (Client Quit)
[14:35:43] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[14:36:25] *** Joins: eddi (~textual@chemap24.chem.uzh.ch)
[14:38:29] *** Joins: GiLgAmEzH (~gilgamezh@186.19.69.139)
[14:40:07] *** Quits: Tat (~Tat@137-025-218-069.res.spectrum.com) (Ping timeout: 244 seconds)
[14:41:16] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[14:41:26] *** Quits: exciteabletom (~tom@58-7-218-64.dyn.iinet.net.au) (Ping timeout: 252 seconds)
[14:42:40] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[14:42:42] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247) (Quit: Connection closed)
[14:42:46] *** Joins: Meteorhead (~Meteorhea@static-qvn-qvs-164225.business.bouyguestelecom.com)
[14:44:11] *** Quits: jmcantrell (~weechat@86.106.121.162) (Ping timeout: 252 seconds)
[14:44:11] *** Quits: zeenk (~zeenk@188.26.30.39) (Read error: Connection reset by peer)
[14:44:30] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the ##end of the abyss)
[14:45:14] *** Joins: zeenk (~zeenk@188.26.30.39)
[14:45:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:46:39] *** Joins: Deadly_Alive (Deadly_Ali@user/deadly-alive/x-7001497)
[14:50:05] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[14:50:07] *** Quits: TFKyle (~kyle@64.201.205.70) (Quit: :q!)
[14:50:58] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Ping timeout: 244 seconds)
[14:55:27] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[14:55:47] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[14:57:11] *** Joins: thiras (~thiras@user/thiras)
[14:57:57] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[14:58:11] *** Joins: easior__ (~easior@61.155.142.67)
[14:59:39] <Habbie> right now i use requirements.txt to pull in a few things during my build (of a non-Python project, but we use some python during the build)
[14:59:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[14:59:59] <Habbie> i'd like to "lock" the pulled in versions, to make things more reproducible, and protect against compromise of pypi projects
[15:00:19] <Habbie> what should I do? i saw that pipenv makes a nice Pipfile.lock
[15:00:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:49] <mgedmin> I've used pip-compile from https://pypi.org/project/pip-tools/ for this
[15:01:05] <The-Compiler> there's also https://python-poetry.org/ which seems somewhat popular
[15:01:06] *** Quits: easior_ (~easior@61.155.142.70) (Ping timeout: 240 seconds)
[15:01:14] <mgedmin> and I've also used pip freeze > requirements.txt when I encountered pip-tools bugs that broke my use cases
[15:01:33] <mgedmin> the main thing is you want both a requirements list without version pins, and one with
[15:01:51] <mgedmin> I'm not sure if there's a common convention; I generally use requirements.in (no pins) vs requiremens.txt (with pins)
[15:02:21] *** Quits: easior__ (~easior@61.155.142.67) (Read error: Connection reset by peer)
[15:02:31] <mgedmin> I'm not sure pipenv/poetry would work for a non-Python project?
[15:02:32] <nedbat> at work we also use .in for unpinned, and .txt for pinned.
[15:03:16] <Habbie> mgedmin, the python bits are individual venvs, i'm not too worried about pipenv (haven't tried poetry)
[15:03:27] <Habbie> mgedmin, nedbat, but does .txt for pinned also give me verified hashes?
[15:03:31] <nedbat> and it's all open source if you want to look at tooling
[15:03:41] <nedbat> Habbie: i think it could have hashes, but we don't have them.
[15:03:47] <Habbie> i see - the hashes are key for me :)
[15:04:10] <Habbie> sorry if that was unclear
[15:04:29] *** Joins: rsx (~dummy@ppp-188-174-134-210.dynamic.mnet-online.de)
[15:04:35] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[15:05:13] <Habbie> going to look at pip-compile and poetry, thanks
[15:05:14] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:05:17] <mgedmin> pip-compile supports --generate-hashes
[15:06:22] <jinsun> rubin55: you can compare your setup with this one https://github.com/pypa/sampleproject, I get a single egg-info in src folder with this too
[15:07:05] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[15:07:39] *** Joins: exciteabletom (~tom@180.150.82.109)
[15:08:06] *** Joins: masber (~masber@vpn-84.cscs.ch)
[15:09:33] <Habbie> mgedmin, ah, and pip install -r requirements.txt will check them!
[15:09:50] <Habbie> mgedmin, nice, so i don't even need additional tools at build time
[15:10:00] <Habbie> (i don't even need pip-tools at build time)
[15:10:31] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[15:10:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:11:07] *** Quits: tims (~tims@193-119-75-93.tpgi.com.au) (Ping timeout: 244 seconds)
[15:11:37] <masber> hi, I am trying to install a package using pip but it is giving me errors regarding verioning and ssl?
[15:11:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:12:31] <masber> https://dpaste.com/6Y9MJZ8UY.txt
[15:13:37] <BtbN> Is that on some ancient distro, that hasn't updated its ca-certs in a decade?
[15:13:58] *** Joins: maxz (~user@fsf/member/maxz)
[15:14:08] *** Joins: tims (~tims@27-32-34-159.tpgi.com.au)
[15:14:31] <mgedmin> "unknown error" is a lovely error message :/
[15:14:48] <mgedmin> could be some very old system openssl version that doesn't support TLS 1.2?
[15:15:03] <BtbN> Try updating pip and setuptools and certifi. But make sure to be in a venv. Don't update those globally
[15:15:17] <mgedmin> difficult to upgrade pip when pip can't talk to pypi.org
[15:15:37] <BtbN> Just tell it to temporarily ignore tls errors
[15:15:41] *** Joins: __that__ (~Guest77@195.59.168.126)
[15:16:08] <__that__> Hi all
[15:16:49] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:18:15] *** Joins: arash (~arash@5.124.30.120)
[15:19:14] <arash> Hello, anybody knows what is pdb file extension use for ? is it related to python language or its for other programming language ?
[15:19:23] <masber> I did installed pip using `python3 -m ensurepip --default-pip`
[15:19:40] <mgedmin> masber: what distro and version?
[15:19:51] <BtbN> arash, MSVC debugging symbols
[15:20:02] <masber> suse 15.1
[15:20:58] <mgedmin> that sounds modern (google tells me this was released in april 2021)
[15:21:07] <masber> SUSE Linux Enterprise Server 15 SP1
[15:21:14] <BtbN> Well, it's a modern release of a fairly old distro
[15:21:19] <BtbN> so it not supporting latest TLS seems likely
[15:21:32] <arash> BtbN, so its python ?
[15:21:33] *** Joins: easior (~easior@61.155.142.67)
[15:21:35] <BtbN> It's had its freeze like 3 or 4 years ago.
[15:21:39] <mgedmin> can tools like curl or wget talk to https://pypi.org/ ?
[15:21:58] <BtbN> arash, no, it's debugging symbols MSVC produced.
[15:22:00] <mgedmin> this could rule out possible problems with system ca certificates of openssl versions
[15:22:02] <masber> yes curl return html
[15:22:03] <BtbN> It doesn't embed them like gcc/clang does
[15:22:05] <grawity> isn't supporting 1.2 kind of an enterprise requirement now? like if you have to talk to payment sites etc.
[15:22:21] <BtbN> One would hope so
[15:22:38] <BtbN> And then you get companies using Java versions in production that don't support TLS 1.1 yet.
[15:22:49] *** Joins: Haydos (uid356478@id-356478.tooting.irccloud.com)
[15:23:38] <masber> mmm can I install it offline?
[15:23:56] <mgedmin> masber: https://github.com/pypa/warehouse/issues/3645 may be interesting?
[15:24:27] <mgedmin> mentions both ssl unknown error and suse, albeit in different comments by different people using different distributions
[15:24:34] <mgedmin> and the suse mentioned was 12
[15:24:45] <mgedmin> what pip version did python -m ensurepip install?
[15:25:08] <__that__> I want to add a prefix to the logging messages of a Python library we work with - it is developed internally. I think I many know how to do that however I just want to do this for the calls I do to that library and not for the rest of the code. what is the recommended way to do that?
[15:25:53] <masber> ok, I updated pip from scripts and it now works
[15:26:00] <__that__> I could create a context manager to 'put' back the original logger settings once the call to the library is finished - it is only done once in the whole code. Not sure what the best way or canonical way of doing this is
[15:26:10] <mgedmin> __that__: if your library follows the convention of using logging.getLogger(__name__), you can set up some configuration for just that subhierarchy of loggers
[15:26:31] <masber> so I guess python3 ensurepip --default-pip is not the right way to install it
[15:26:59] <__that__> mgedmin, could you please point me out to "some configuration for just that subhierarchy of loggers"?
[15:27:43] <__that__> this is the bit  have more troubles with. I thought getLogger was a singleton and all changes you do to the the logger would actually be reflected back on subsequent calls
[15:27:54] *** Quits: drew (~drew@user/drew) (Ping timeout: 264 seconds)
[15:28:13] <mgedmin> yes
[15:28:45] *** Quits: eddi (~textual@chemap24.chem.uzh.ch) (Ping timeout: 268 seconds)
[15:29:42] <mgedmin> supposing your library is 'foo' (sorry for my lack of imagination), and you have a foo.bar module doing logging.getLogger(__name__).info("something happen")
[15:30:00] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[15:30:36] <mgedmin> you could configure a handler for 'foo' to log to sys.stderr with a formatter that uses 'prefix: %(message)s', and set propagate=False so the messages won't bubble up to the root logger that has a handler with format '%(message)s'
[15:30:57] <mgedmin> then you'd get 'prefix: something happen', but logging.getLogger('something-else').info('nope') would log just 'nope' with no prefix
[15:31:20] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 268 seconds)
[15:31:22] <mgedmin> the problem here is that setting up handlers is something that should be done by the application, not something that should be done by a library
[15:31:40] <mgedmin> another thing I would like to point out is https://docs.python.org/3/howto/logging-cookbook.html#context-info
[15:31:54] <mgedmin> but I've never used LoggerAdapters and I'm not entirely sure they would be helpful here
[15:32:13] <mgedmin> a context manager to fiddle with global state is just wrong
[15:32:33] <mgedmin> would break if you use threads, would break if your library code invokes something from outside your library that also logs
[15:33:05] <ronny> Context managers and object local loggers help
[15:33:35] <ronny> Depending on what you want to do structlog or Eliot may be useful
[15:33:42] *** Joins: easior_ (~easior@61.155.142.70)
[15:34:39] <mgedmin> __that__: hmm or actually maybe all you need is a filter?
[15:34:46] <mgedmin> https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information
[15:34:58] <mgedmin> you could do record.message = 'prefix: ' + record.message
[15:34:59] *** Joins: Joene (~Joene@cust-158-98-110-94.dyn.as47377.net)
[15:35:11] *** Joins: mickey3 (~user@user/mickey)
[15:35:15] <mgedmin> and then logging.getLogger('foo').addFilter(AddMyPrefixFilter())
[15:35:22] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:35:22] *** mickey3 is now known as mickey
[15:36:06] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[15:36:25] <__that__> mgedmin, thanks. I think I have enough elements now to try various solutions
[15:36:51] *** Quits: easior (~easior@61.155.142.67) (Ping timeout: 272 seconds)
[15:37:41] *** Quits: maxz (~user@fsf/member/maxz) (Quit: Leaving.)
[15:38:59] *** Joins: Pickchea (~private@user/pickchea)
[15:39:58] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 268 seconds)
[15:43:01] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi)
[15:43:02] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[15:44:28] *** Quits: __that__ (~Guest77@195.59.168.126) (Quit: Client closed)
[15:44:29] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[15:45:03] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[15:45:31] *** Joins: skeels (~singurty@110.44.124.171)
[15:47:27] *** Joins: botfather (~botfather@botd.io)
[15:48:30] *** Quits: varaindemian (~varaindem@82.76.227.153) (Quit: Client closed)
[15:49:25] <skeels> i want to execute multiple commands (like subprocess.run) in parallel and create a loop to check if anyone of them throw an error and log that error. how can i achieve this?
[15:49:26] *** Joins: manti7 (~manti7@176.10.104.94)
[15:50:10] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[15:50:35] *** Joins: maroloccio (~marolocci@200.243.99.194)
[15:50:36] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[15:51:00] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:51:34] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[15:53:24] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[15:55:06] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[15:55:33] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[15:55:34] <raek> is there a way to use matplotlib without the global state thing?
[15:56:08] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[15:57:03] *** Joins: wattux (~wattux@212.51.23.106)
[15:57:20] <raek> skeels: if you use Popen instead of run subprocess does not wait for it to complete, but returns a Popen object instead. that ob ject has methods to check if it has completed, etc
[15:57:24] <raek> https://docs.python.org/3/library/subprocess.html#subprocess.Popen.poll
[15:58:17] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[15:58:28] <raek> you may need to set up stderr to a PIPE in the Popen call to capture the error output
[15:58:53] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[15:58:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[15:59:41] <skeels> so i should create a popen for each process and keep checking if anyone of them has thrown an error?
[15:59:42] <mgedmin> beware: if the subprocess prints more than 4 KB of error messages to stderr, it'll block until you actually start reading from the pipe
[15:59:42] <jinsun> raek: the object oriented API for matplotlib is okayish, rarely used global state https://matplotlib.org/stable/api/index.html#the-object-oriented-api
[16:00:25] *** Joins: brickfat (~brickfat@user/brickfat)
[16:00:37] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:00:48] <skeels> 4 KB for each command right? that won't be a problem
[16:00:59] <raek> jinsun: thanks!
[16:02:21] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:04:00] <mgedmin> skeels: I did it with threads and concurrent.futures in ghcloneall
[16:04:48] *** Joins: mrwick (~mrwick@user/mrwick)
[16:04:57] <mgedmin> https://github.com/mgedmin/ghcloneall/blob/master/ghcloneall.py#L709-L737
[16:05:21] <mgedmin> my goal was a bit different: have up to N parallel processes running, start new ones as soon as one of the old ones exits
[16:06:33] <mgedmin> I see I used Popen() + .communicate() + .wait(), but that was written for older Python versions; today I would probably do a subprocess.run()
[16:06:48] <skeels> i want a limit on number of parallel processes too but i think i can create a list of popens and check it's count
[16:06:58] *** Joins: varaindemian (~varaindem@82.76.227.153)
[16:07:11] <jinsun> mgedmin: I got that 4 kb problem with Popen recently with pylint in our custom pre-commit hooks, my coworkers wrote such bad code that pylint printed more than 4kb of messages :D
[16:08:19] *** Joins: Payam (~Payam@138.106.57.131)
[16:09:11] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[16:09:39] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[16:09:48] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Client Quit)
[16:09:51] <Payam> hi, Can I reach an instance variable from a class variable ? https://bpa.st/FWTQ
[16:10:25] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[16:10:34] <mgedmin> Payam: no
[16:10:49] <jinsun> Payam: no, maybe you want @property
[16:10:53] <nedbat> Payam: there is no self at that point.
[16:11:02] <mgedmin> how would it know which instance you want?
[16:11:04] <Payam> jinsun property? how?
[16:11:15] *** Joins: faceface (~faceface@user/faceface)
[16:11:18] <faceface> hello
[16:11:22] <nedbat> Payam: maybe you should tell us more about what you want to happen first
[16:11:24] <nedbat> faceface: hey there
[16:11:28] <faceface> hi nedbat
[16:12:00] <faceface> I'm always worried that I'm somehow 'doing python wrong'... Here is some code I just spent about 1-2 hours writing: https://gist.github.com/CholoTook/070896cca14f1aa6889c2c4df0fd139f
[16:12:22] <faceface> I think I could have written it quicker, but it would have been full of 'random' column indexes and less... idk
[16:12:32] <Payam> I use a instance variable I thing instead
[16:13:26] *** Joins: cdown (~cdown@163.114.131.1)
[16:13:36] *** Joins: zeden (~zeden@user/zeden)
[16:13:56] <faceface> I /think/ I should be using pandas... at least it seems to have a 'csv to dict' type function that I'm cludging there
[16:14:49] <faceface> https://gist.github.com/CholoTook/070896cca14f1aa6889c2c4df0fd139f#file-convert_to_canfam_3-py-L35 <- Is that pythonic?
[16:18:11] *** Joins: lacrymol2gy (~lacrymolo@5.225.8.199)
[16:18:39] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 272 seconds)
[16:19:04] *** Quits: exciteabletom (~tom@180.150.82.109) (Read error: Connection reset by peer)
[16:19:08] *** Joins: pnoud (~pnoud@user/pnoud)
[16:19:15] *** Joins: exciteabletom (~tom@180.150.82.109)
[16:19:30] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 264 seconds)
[16:20:46] <graingert> faceface: if you already have pandas installed you should definitely use it for csv parsing
[16:20:49] <graingert> it's great at that
[16:21:00] <faceface> cool
[16:21:03] *** Quits: maroloccio (~marolocci@200.243.99.194) (Quit: Ping timeout (120 seconds))
[16:21:14] <lacrymol2gy> habnabit_: bjs: IDK if you remember the whole `running async stuff in a sync context` debacle a few days back, but I just realized I was dev'ing on the wrong python version. We've got 3.6, hence no `asyncio.run` :facepalm:
[16:21:15] <faceface> This sounds a bit weird, but can I import a function 'from below'?
[16:21:18] <graingert> of course it's overkill if you don't already have it
[16:21:19] <Repiphany> zip might be neater than col_names[j], row[j]
[16:21:23] <faceface> graingert: k
[16:21:29] <graingert> lacrymol2gy: use anyio.run
[16:21:32] *** Joins: nemexis (~nemexis@193-62-201-31.ftth.glasoperator.nl)
[16:21:33] <graingert> lacrymol2gy: it works on 3.6
[16:21:41] *** Joins: Trieste (~T@user/pilgrim)
[16:21:43] *** Quits: lacrymol2gy (~lacrymolo@5.225.8.199) (Client Quit)
[16:21:47] <faceface> from below import long_function
[16:21:48] <graingert> (it's got a backport of asyncio.run)
[16:21:59] <lacrymol1gy> sorry, I had two open clients
[16:22:12] *** Joins: easior (~easior@61.155.142.70)
[16:22:22] <graingert> faceface: ?
[16:22:35] *** Quits: lacrymol1gy (~lacrymolo@5.225.8.199) (Quit: leaving)
[16:22:36] *** Joins: Ivyy (~Ivyy@85.10.56.104)
[16:22:41] <lacrymology> sorry, I had THREE open clients XD
[16:22:43] <faceface> I don't want submodules, but I do want to improve readability
[16:22:46] <faceface> meh
[16:22:51] <graingert> faceface: ?
[16:23:02] <graingert> you can use pandas with or without submodules
[16:23:08] *** Joins: dez (uid92154@user/dez)
[16:23:09] <faceface> graingert: new question
[16:23:11] <Repiphany> {col_name: row_value for col_name, row_value in zip(col_names, row)}
[16:23:12] <graingert> lacrymology: did you try anyio.run?
[16:23:23] <faceface> graingert: the submodules question is a new question, sorry
[16:23:42] <graingert> faceface: what sort of submodules are you referring to and why don't you want them?
[16:23:54] <Repiphany> or just dict(zip(col_names, row))
[16:24:11] *** Joins: Julian (~tos9@151.66.53.132)
[16:24:15] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[16:24:18] *** Quits: easior_ (~easior@61.155.142.70) (Ping timeout: 240 seconds)
[16:24:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:25:36] <faceface> graingert: in my code snippet on gist, there is a long function called get_coord_map that sits between two lines which read 1) coord_file = 'Data/CanineHD_B.csv' 2) coord_map = get_coord_map(coord_file)"
[16:26:03] <faceface> Those two lines are clearly a step 1, step 2 type thing, and it's easy to read
[16:26:12] *** Joins: noteness (noteness@user/noteness)
[16:26:22] <faceface> but I have a great big honking function in-between... I should put that function into a separate file (I think...)
[16:26:43] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 268 seconds)
[16:26:44] <faceface> I'll try using __main__...
[16:27:39] <faceface> but I like having those 'options' type arguments at the top of the file... ah well
[16:28:14] <lacrymology> graingert: not even 5 minutes went by, and sadly I need to consult with the team before introducing a new library
[16:28:27] <noteness> Hello. I have a buffer with binary data of arbitary length. I want to convert that into a uint16 array. How would I do that?
[16:28:31] <graingert> lacrymology: what libraries do you currently depend?
[16:29:04] <Repiphany> noteness: https://docs.python.org/3/library/struct.html#struct.iter_unpack
[16:29:11] <graingert> lacrymology: you might already be pulling anyio in
[16:29:14] <graingert> or will be soon
[16:29:38] <lacrymology> graingert: it's python 3.6 and no async code that we know of. I'll run a freeze and check
[16:30:12] <lacrymology> nope
[16:30:21] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[16:30:35] *** Joins: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net)
[16:32:41] *** Joins: brownan (~brownan@136.56.137.143)
[16:32:53] *** Quits: Julian (~tos9@151.66.53.132) (Ping timeout: 268 seconds)
[16:33:29] *** Joins: Julian (~tos9@151.66.53.132)
[16:33:29] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[16:33:37] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[16:33:46] <noteness> Repiphany, >The buffer’s size in bytes must be a multiple of the size required by the format. How can I ensure that? And could you tell me a format for that says uint16 array? I cannot understand that docs :/
[16:33:50] *** Quits: JavaBean (~JavaBean@user/javabean) (Read error: Connection reset by peer)
[16:34:10] * noteness has been looking at struct docs for sometime :/
[16:34:42] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 240 seconds)
[16:34:42] <varaindemian> https://pastebin.com/sireZSzK -> I have the code here and I want to send data using flask based on the input in the form. I described in the top comments what I want to accomplish by doing this
[16:35:10] *** Joins: easior__ (~easior@61.155.142.73)
[16:35:21] <Repiphany> If you have uint16 your buffer has to be a multiple of 2 bytes otherwise you're missing data or clipping something wrongly
[16:35:41] <noteness> Would something like struct.unpack(uint16format, *struct.pack(uint16format, *initial_data)) work?
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:52] <noteness> Repiphany, the data is not guaranteed to be uint16. I want to convert it into uint16. so padding is ok, but i don't know how to safely pad and unpad
[16:37:08] <varaindemian> ## I want this command to be executed based on the input: ./move.sh https://my-link.com GPU-0.DP-2 ->
[16:37:39] *** Quits: easior (~easior@61.155.142.70) (Ping timeout: 272 seconds)
[16:38:18] <varaindemian> https://pastebin.com/RDCXJMB6
[16:38:20] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:39:28] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Ping timeout: 244 seconds)
[16:39:40] <mgedmin> varaindemian: you'll want subprocess.run(["./move.sh", FormValue, "GPU-0.DP-2"])
[16:40:03] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[16:40:30] <mgedmin> or is your question "how to get form values"?
[16:40:37] <varaindemian> mgedmin thanks! I still don't know how to take the value of the form
[16:40:49] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[16:40:49] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[16:41:00] <mgedmin> flask.request.form['field_name']
[16:41:18] <mgedmin> where field_name is e.g. display6_name
[16:41:20] *** Quits: leosilva (~leosilva@canonical/leosilva) (Remote host closed the connection)
[16:41:23] <pizza> this might sound silly but how accurate is the sleep command? after a certain point does it lose accuracy, or if i tell my script to sleep for 86400 (1 day/24 hours) will it still keep time to the second?
[16:41:41] *** Quits: zeenk (~zeenk@188.26.30.39) (Quit: Konversation terminated!)
[16:42:03] <mgedmin> since you have different forms submitting to the same route, you'll have to check what fields were actually submitted
[16:42:04] *** Joins: leosilva (~leosilva@canonical/leosilva)
[16:42:08] *** Joins: sintax (~sintax@4.4.61.62)
[16:42:45] <raek> faceface: functions in a file can call each other no matter which they written
[16:42:59] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:43:05] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 244 seconds)
[16:43:12] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[16:43:17] <dav1d> pizza, just going by the docs, I would say it is accurate to the second
[16:43:42] *** Quits: doev (~doev@mobile.bpv-consult.net) (Quit: Client closed)
[16:43:49] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[16:44:10] <raek> faceface: but each line of code at the top level in the file (outside the "defs") can only call functions that has been define above it (the rest of the lines of the files has not been parsed yet)
[16:44:24] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:7421:bafd:df5f:9185)
[16:44:27] <varaindemian> mgedmin okay, and how can I do that can you show me the code for one example in my case?
[16:44:31] <Repiphany> noteness: You could just try: struct.iter_unpack('H', buffer); except struct.error: struct.iter_unpack('H', buffer[:-1])
[16:44:43] <transhumanist> what pastebin is recommended here?
[16:44:45] *** Quits: Vision (~Vision@047-034-097-066.res.spectrum.com) (Read error: Connection reset by peer)
[16:44:54] <raek> faceface: so what you can do is to move all your top level code into a main() function and then call main() at the bottom of the file. then you can split up main() into smalle function and order them any way you want
[16:44:55] <mgedmin> varaindemian: what code?  if 'display6_name' in flask.request.form:?
[16:45:07] <mgedmin> transhumanist: see /topic
[16:45:07] *** Joins: Vision (~Vision@047-034-097-066.res.spectrum.com)
[16:45:07] <raek> as long as the call to main() remains at the bottom
[16:45:27] <raek> faceface: was that what you wanted to know?
[16:45:54] *** Joins: dme86 (~dan@user/dan86)
[16:46:02] <varaindemian> mgedmin like in the top of the page I have @app.route('/links'). What sould I add and where? https://pastebin.com/RDCXJMB6
[16:46:20] <varaindemian> mgedmin in order to handle what you said
[16:47:08] <transhumanist> hi! this piece of code returns the following https://bpa.st/VIHA Anyone able to tell me what I am doing wrong?
[16:47:43] <transhumanist> ah thanks mgedmin:  they used to post it in the join text
[16:47:52] <Repiphany> action='store_true' doesn't take any arguments, it sets a boolean flag
[16:48:09] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[16:48:37] <mgedmin> transhumanist: default="False" is suspect!  "False" is a non-empty string that evaluates to true in a boolean context
[16:49:36] <mgedmin> also, you'll want a parser.add_argument("input_file") so it'll accept non-option arguments
[16:49:53] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[16:49:57] *** Joins: resmo (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[16:49:58] <resmo> hi
[16:50:00] <mgedmin> and a parser.add_argument("output_file"), if the usage string doesn't lie, but then why do you also have a -o option?
[16:50:25] <resmo> does anyone know a similar thing of https://github.com/hashicorp/go-getter for python?
[16:50:41] *** Joins: JavaBean (~JavaBean@user/javabean)
[16:50:53] <nemexis> @resmo: requests ?
[16:51:10] <nemexis> @resmo: https://pypi.org/project/requests/
[16:51:30] <transhumanist> ok thank you very much mgedmin
[16:52:49] <resmo> nemexis, it's more high level, not only supporting http, but also git, local files, s3, ...
[16:52:58] *** Joins: olivier2727 (~olivier@serveur.elbac.fr)
[16:54:44] *** Joins: ras_manny (~ras_manny@196.24.141.56)
[16:56:01] *** Joins: Payam46 (~Payam@138.106.57.131)
[16:56:34] <nemexis> @resmo: ahh you mean like an aggregator. I am not aware of such a package in python
[16:56:39] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[16:56:54] <nedbat> transhumanist: the issue might have to do with how you are calling parse_command_line.  Can you link us to the full program?
[16:57:00] <Payam46> How do I in simplest and most intelligent way change the string `v9.8.1` to `v10.0.0`?
[16:57:26] <mgedmin> string = 'v10.0.0'
[16:57:29] <nedbat> Payam46: you use a version number library to do it.
[16:57:37] <mgedmin> or do you want to find v9.8.1 in a longer string and replace just that part?
[16:57:50] <mgedmin> or do you want to parse an arbitrary version and increment the major component, then set the other two to 0s?
[16:58:11] <nedbat> transhumanist: also, you are calling parse_args() on line 7, before you define your options!
[16:58:12] <Payam46> yes mgedmin
[16:58:23] <Payam46> nedbat I want to keep it very simple
[16:58:30] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[16:58:33] <Payam46> without using so many libs
[16:58:35] <nedbat> Payam46: it's really simple to let other people do the hard work
[16:59:24] *** Quits: ras_manny (~ras_manny@196.24.141.56) (Ping timeout: 268 seconds)
[16:59:29] <mgedmin> (it isn't)
[16:59:40] <Payam46> nedbat do you mean me? or do you mean that it is wise to use libraries? I just need to change a string in a file. so I read that file and increment it and write it.
[17:00:01] <Payam46> I have that line but I want to learn new ways of doing things
[17:00:17] <nedbat> Payam46: in general, and for your particular case, it's good to use libraries that solve problems for you.
[17:00:30] <nedbat> Payam46: will you also need to sometimes increment the minor version?
[17:00:34] <Payam46> nedbat what library are you speaking about?
[17:00:42] *** Joins: Overflwn (~Overflwn@2a02:8070:c3b7:5b00::c639)
[17:00:46] <Payam46> nedbat no. only to major version
[17:01:06] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 240 seconds)
[17:01:14] <olivier2727> string_new = string_old.replace("v9.8.1", "v10.0.0")
[17:01:36] <olivier2727> stringNew = stringOld.replace("v9.8.1", "v10.0.0")
[17:01:59] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[17:02:13] <nedbat> olivier2727: hilarious. :(
[17:02:29] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[17:02:44] <Payam46> olivier2727 v9.8.1 and 10.0.0 were examples.
[17:02:56] <olivier2727> ;-)
[17:03:04] <Payam46> you have to calculate the next version
[17:03:14] <Payam46> nedbat what library would you recommend?
[17:03:45] *** Joins: easior_ (~easior@61.155.142.70)
[17:03:46] <nedbat> Payam46: use regex to find the major number, increment it, add some zeros: m = re.search(r"^v(\d+)\.\d+\.\d+", that_string); if m: new_string = f"v{int(m[1])+1}.0.0"
[17:03:50] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[17:04:05] *** Joins: cthulchu (~Cthulchu@94.153.66.220)
[17:04:11] <nedbat> Payam46: i don't know of a particular one, and a quick search isn't turning up an obvious candidate, unfortunately.
[17:04:36] *** Quits: Deneb (~johnch@195.213.86.93) (Quit: Leaving)
[17:04:58] <Payam46> hmm. thanks. I did already it with RE. I think I go with it any way
[17:05:01] <mgedmin> https://pypi.org/project/packaging/ implements PEP-440 compatible version handling
[17:05:20] <nedbat> mgedmin: ah, cool!
[17:05:25] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[17:05:33] <mgedmin> might be overkill if the version tags you have are simple vN.N.N with no -beta6 suffixes etc
[17:05:48] *** Quits: p-i- (~Ohmu@node-n9d.pool-118-173.dynamic.totinternet.net) (Remote host closed the connection)
[17:05:50] *** Joins: Naan (~Naan@user/naan)
[17:06:18] *** Quits: easior__ (~easior@61.155.142.73) (Ping timeout: 268 seconds)
[17:06:19] *** Joins: kosh (~kosh@user/kosh)
[17:06:36] <sco1> I like bump2version, or versioneer but that's probably overkill here
[17:07:12] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[17:07:13] <sco1> (for a CLI interface)
[17:07:15] *** Joins: Adoi (~Adoi@user/adoi)
[17:07:54] *** Joins: Vonter (~Vonter@user/vonter)
[17:08:03] *** Joins: nyah (~nyah@90.221.186.180)
[17:08:24] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 244 seconds)
[17:08:25] *** Quits: easior_ (~easior@61.155.142.70) (Client Quit)
[17:09:18] *** Quits: thoas_ (~thoas@167.71.76.85) (Quit: leaving)
[17:10:32] *** Joins: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com)
[17:11:28] *** Joins: yogoyo (~weechat@user/yogoyo)
[17:13:31] *** Joins: pneff_ (~pneff@81.6.40.205)
[17:15:59] *** Quits: iomari891 (~iomari891@197.210.53.216) (Ping timeout: 252 seconds)
[17:16:03] *** Quits: pneff (~pneff@81.6.40.205) (Ping timeout: 268 seconds)
[17:17:27] *** Joins: iomari891 (~iomari891@197.210.76.164)
[17:21:50] *** Quits: cthulchu (~Cthulchu@94.153.66.220) (Ping timeout: 244 seconds)
[17:23:01] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[17:25:58] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:26:10] *** Quits: Mija (~Mija@user/mija) (Quit: Mija)
[17:28:05] *** Joins: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com)
[17:28:23] *** Quits: Ivyy (~Ivyy@85.10.56.104) (Ping timeout: 268 seconds)
[17:30:35] *** Joins: ice9 (~ice9@user/ice9)
[17:31:15] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[17:31:35] *** Quits: iomari891 (~iomari891@197.210.76.164) (Ping timeout: 268 seconds)
[17:31:41] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[17:32:16] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi)
[17:32:29] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:33:48] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[17:33:50] *** Joins: iomari891 (~iomari891@197.210.53.216)
[17:35:39] *** Joins: dme86 (~dan@user/dan86)
[17:36:35] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Read error: Connection reset by peer)
[17:36:43] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Updating details, brb)
[17:36:47] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[17:36:55] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:37:13] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[17:37:38] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[17:37:48] <varaindemian> not sure why I get this error: https://pastebin.com/pniht7uw
[17:38:05] <varaindemian> NameError: name 'request_method' is not defined
[17:38:10] <varaindemian> already imported requests
[17:38:11] *** Joins: maroloccio (~marolocci@200.243.99.194)
[17:38:25] *** Quits: Darylgolden (~Darylgold@user/darylgolden) (Read error: Connection reset by peer)
[17:38:43] <Yhg1s> varaindemian: 'import requests' gives you the name 'requests', not the name 'request_method'. Did you mean 'request.method'?
[17:38:48] <noteness> Repiphany, Thank you. I opted to pad with 5 bytes.
[17:39:32] <varaindemian> Yhg1s I used from flask import Flask,render_template,request
[17:39:54] <Yhg1s> varaindemian: that still gives you the name 'request', nor 'request_method'. 'request.method' and 'request_method' are not the same thing.
[17:40:20] *** Quits: masber (~masber@vpn-84.cscs.ch) (Quit: Ping timeout (120 seconds))
[17:40:28] *** Quits: Naan (~Naan@user/naan) (Remote host closed the connection)
[17:41:02] *** Joins: Naan (~Naan@user/naan)
[17:41:28] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 244 seconds)
[17:41:48] <varaindemian> so what should I import then?
[17:42:23] <Yhg1s> varaindemian: to do what? Where did you expect 'request_method' to come from? Are you sure you didn't' mean 'request.method'?
[17:42:52] *** Joins: laretta (~laretta@user/laretta)
[17:43:21] <varaindemian> Yhg1s I copy pasted my code and error above. Here: https://pastebin.com/pniht7uw
[17:43:48] <Yhg1s> varaindemian: yes. That doesn't tell me where you think 'request_method' should come from, or why you're using 'request_method' instead of 'request.method'.
[17:43:49] <varaindemian> Yhg1s when I click on a submit form I get that error
[17:44:09] <Yhg1s> varaindemian: you use 'request.method' on line 3, and 'request_method' on line 5. What is line 5 supposed to do?
[17:44:38] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[17:45:30] <varaindemian> Yhg1s GOD I don;t wanna talk about this error anymore. Thank you!
[17:45:46] <varaindemian> Yhg1s I don't know how I missed that
[17:45:47] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Updating details, brb)
[17:45:57] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:46:12] <varaindemian> Yhg1s and if I want to now open the page ina new tab once the POST request is sent?
[17:46:20] <varaindemian> to not open*
[17:47:05] *** Joins: upsala (~zcb@185.213.155.160)
[17:47:23] <Yhg1s> varaindemian: that's not controlled by any of the code you pasted. that's either part of the links.html template, or of the HTML reference *to* this page.
[17:48:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:48:05] *** Quits: Schnouki (~schnouki@user/schnouki) (Remote host closed the connection)
[17:50:13] *** Joins: doev (~doev@mobile.bpv-consult.net)
[17:53:23] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[17:54:09] *** Joins: Schnouki (~schnouki@user/schnouki)
[18:00:45] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[18:01:02] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[18:03:50] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:04:52] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:05:23] *** Quits: Julian (~tos9@151.66.53.132) (Ping timeout: 268 seconds)
[18:06:37] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (Ping timeout: 268 seconds)
[18:06:50] *** Joins: davidlowryduda (~davidlowr@73.61.9.57)
[18:07:13] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[18:07:34] *** Joins: montybanksnyc (~montybank@2601:86:600:a2a:21b1:eda2:1fcf:578f)
[18:07:41] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 252 seconds)
[18:08:09] *** Joins: __that__ (~Guest36@195.59.168.125)
[18:08:13] <__that__> HI all
[18:08:20] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 244 seconds)
[18:09:02] *** Joins: p-i- (~Ohmu@node-n9d.pool-118-173.dynamic.totinternet.net)
[18:09:48] <varaindemian> https://pastebin.com/MsguXkRc
[18:10:02] <varaindemian> anybody know how to accomplish this for each button?
[18:10:19] <__that__> My third party library is defining the format of the logging however it seems to be getting my app's format. Does anyone why is that please? https://bpa.st/KZBA
[18:11:56] <Yhg1s> __that__: logging.basicConfig() isn't something your library should call. It can only be called once. It's there to configure the root logger, and if the root logger is already configured it does nothing.
[18:12:17] <Yhg1s> __that__: so if your application configures logging, your library's logger won't be configured to use its own format.
[18:12:28] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 244 seconds)
[18:12:41] *** Joins: pwnd_sfw6 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[18:12:52] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[18:12:52] *** pwnd_sfw6 is now known as pwnd_sfw
[18:13:01] <__that__> Yhg1s that makes sense. I didn't actually do that. It is someone's else code.
[18:13:08] <__that__> but I am glad this is like this
[18:15:15] *** Quits: olivier2727 (~olivier@serveur.elbac.fr) (Remote host closed the connection)
[18:15:52] <varaindemian> anyone?
[18:16:04] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[18:16:19] <varaindemian> How can I define a POST request for each button below? e.g. Creating a POST each time the button is pressed and sending only the data that exists in that particular form. The "FormValue" will be always be a link -> subprocess.run(["./move.sh", FormValue, "GPU-0.DP-2"]). e.g. FormValue = http://examle.com
[18:16:28] *** Joins: cthulchu (~Cthulchu@94.153.66.220)
[18:16:43] *** Joins: mborus (~mborus@2001:16b8:6f74:3600:e9b9:273a:d4d3:cf47)
[18:17:56] *** Joins: skapata (~Skapata@user/skapata)
[18:18:38] <__that__> Yhg1s I am trying to add a prefix to the message that that third party library logs. Something like 'Calling App Name: message from third party library'. What I don't understand well is if the LogingAdapater is modifying the logger instance on my app or all those instances being used after it, whether third party libraries or root app. Given that
[18:18:38] <__that__> GetLogger is a singleton I guess that anything you change in the logger it would be seen by subsequent calls to it
[18:18:57] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[18:18:59] *** Joins: Julian (~tos9@151.66.53.132)
[18:19:34] *** Quits: {HD} (~{HD}@191.96.185.171) (Ping timeout: 268 seconds)
[18:19:44] <__that__> varaindemian... I recall from Flask that you can actually call a different route and that Jinja2 allowed you to pass that info in the html with a helper
[18:19:56] <Yhg1s> __that__: each logger *for a given name* (the argument to GetLogger) is a singleton, yes.
[18:20:00] *** Joins: pnoud (~pnoud@user/pnoud)
[18:20:06] <Yhg1s> eh, getLogger.
[18:20:22] <Yhg1s> varaindemian: you may have better luck asking your question in a flask channel, to be honest. (I can't help you with Flask)
[18:20:38] <__that__> I see, *for a given name* that is the key
[18:21:32] <Yhg1s> __that__: the loggers form a hierarchy based on the name. the root logger's name is ''.
[18:21:48] <Yhg1s> __that__: each logger can do something with the message, or pass it to the parent logger.
[18:21:59] <Yhg1s> (loggers can also inherit things, like logging levels, from parent loggers)
[18:22:10] *** Joins: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca)
[18:22:21] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[18:22:24] *** Quits: nemexis (~nemexis@193-62-201-31.ftth.glasoperator.nl) ()
[18:23:20] *** Quits: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca) (Remote host closed the connection)
[18:23:42] *** Quits: cthulchu (~Cthulchu@94.153.66.220) (Ping timeout: 264 seconds)
[18:23:52] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[18:24:56] <__that__> Yhg1s sure I understand that. However what I would like to do is to add a prefix on each message logged by a third party library called from my app. I know that I can change my app format to be  "%(asctime)s - %(levelname)s - %(extra_dict_keys) -%(message)s" but then a) I don't know how not to print the any extra info in my app logger - the calling
[18:24:56] <__that__> app - and b) how to do for the third party library to print that extra information all the time without having to modify the third party library so that the logger.info looks like logger.info(msg, extra={...})
[18:25:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3-dev)
[18:25:06] *** Joins: {HD} (~{HD}@102.165.16.142)
[18:25:07] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[18:25:42] <__that__> In other words. I don't know how to pass on contextual data from my app that is always  printed on the thrid party library but not on my app, without touching the third party library at all
[18:26:18] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[18:26:21] *** Joins: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de)
[18:26:26] <__that__> I am pretty sure this is a very common case so there must be a solution to do this.
[18:26:42] *** Quits: doev (~doev@mobile.bpv-consult.net) (Ping timeout: 250 seconds)
[18:27:10] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[18:28:11] *** Joins: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca)
[18:29:17] <bancroft> how do I convert a binary file into python? so I can do return b"\xff\xd8... "
[18:29:28] <Yhg1s> __that__: if you need the logging call to pass extra information, you can't do that without changing the logging call. If this is information you have *before* the call (like at configuration time), you can pass a custom handler or formatter that provides the extra information. https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial has some examples of how to do that kind of thing.
[18:29:48] <Yhg1s> bancroft: convert it from what into what?
[18:30:09] *** Joins: guy (~guy@IGLD-84-228-87-161.inter.net.il)
[18:30:14] <guy> hello
[18:30:15] <guy> clear
[18:30:19] <bancroft> Yhg1s: it's an image file, I want to be able to return the image in a function instead of doing open
[18:30:24] *** Quits: guy (~guy@IGLD-84-228-87-161.inter.net.il) (Client Quit)
[18:30:26] *** Joins: alguien (~alguien@user/alguien)
[18:30:43] <Yhg1s> bancroft: if you want to read data from the file, you usually have to open it. In what way do you need to 'return the image'?
[18:31:05] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[18:31:06] <bancroft> Yhg1s: I want to return the bytes, not open a file. myfunc() -> bytes:
[18:31:19] <Yhg1s> bancroft: where would you get the bytes, if you don't want to open the file?
[18:31:20] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[18:31:29] <bancroft> Yhg1s: are you trolling?
[18:31:45] *** Joins: Ysoccio (~Guest57@2001:d08:db:a64d:4da1:b788:cd61:9072)
[18:31:45] <Yhg1s> bancroft: no. you said you don't want to open the file. How would you get the bytes if you don't open the file?
[18:32:04] <bancroft> Yhg1s: I want to convert it to python code, I don't want to open it. I want it baked into the code.
[18:32:15] <Yhg1s> bancroft: okay, so *where would you get the bytes*?
[18:32:39] <bancroft> Yhg1s: Are you serious?
[18:32:52] <bjs> bancroft: i'm a little confused too, did you want the function to read the file and return the bytes?
[18:32:59] <bancroft> No
[18:33:00] <bjs> bancroft: or hardcode the bytes somehow? `return b"abc"`
[18:33:17] <Yhg1s> bancroft: I'm very serious, yes. I'm trying to help you here, but it's difficult if it isn't clear what you actually want to do.
[18:33:33] <bjs> bancroft: you can open() the file to get the bytes and then copy/paste them into your code, if that's what you really want
[18:33:43] <bancroft> You used to be able to do print(binascii.hexlify(content)) but the output is not right
[18:33:52] *** Quits: asd (~noname@user/asd) (Ping timeout: 268 seconds)
[18:34:11] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[18:34:19] *** Joins: ganchan (~thomas_w@user/ganchan)
[18:34:21] <Yhg1s> bancroft: what is 'content', and what do you want to print there? binascii.hexlify() will print a hex-encoded representation of the bytes.
[18:34:24] *** Roey is now known as Rettichlieb
[18:34:50] *** Quits: Ysoccio (~Guest57@2001:d08:db:a64d:4da1:b788:cd61:9072) (Quit: Client closed)
[18:35:19] *** Joins: dme86 (~dan@user/dan86)
[18:35:19] <bjs> bancroft: one way would be to open() it, base64 the bytes and then copy/paste the base64 string into your function. Then the function can base64 decode it and return the bytes.  If you wanted hard-coded data for the function to return.
[18:35:40] <bancroft> xxd my_file.jpg all the 00000000: ffd8 ffe0 0010 4a46 4946 0001 0101 0048... I want my function to litterally just be return b"\xff\xd8\x00 ...
[18:35:42] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[18:35:43] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 268 seconds)
[18:35:47] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[18:35:52] <Yhg1s> bancroft: okay! What's stopping you from doing literally that, then?
[18:35:53] *** Rettichlieb is now known as Rettichkrise
[18:36:12] <Repiphany> open('my_file.jpg', 'rb').read()
[18:36:58] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:37:11] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[18:37:22] <grym> bancroft: you may want io.BytesIO(), if you want to pass "something that looks like a file but isn't really" that has the image file contents in it
[18:38:17] *** Joins: Jenkens (~Jenkens@user/jenkens)
[18:38:49] *** iphone is now known as snake_case
[18:39:02] *** Joins: fofoni (~fofoni@user/fofoni)
[18:40:03] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:40:18] *** Joins: asd (~noname@user/asd)
[18:42:04] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:42:42] *** Joins: jdmark (~jdmark@67.8.137.130)
[18:43:13] *** Parts: snake_case (~iphone@user/iphone) ()
[18:43:25] <nedbat> bancroft: something like this: https://gist.github.com/nedbat/8b949c8b45d11f190bf7c834c8751337
[18:43:26] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 252 seconds)
[18:44:06] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[18:44:16] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[18:44:26] *** Joins: fofoni (~fofoni@user/fofoni)
[18:44:41] *** Joins: camel_case (~iphone@user/iphone)
[18:45:52] *** Joins: user2001 (~trace@196.240.57.60)
[18:46:14] *** Quits: adder` (~adder@user/adder) (Remote host closed the connection)
[18:46:18] *** Quits: user2001 (~trace@196.240.57.60) (Read error: Connection reset by peer)
[18:47:42] <jiffe> I have a python package which uses setuptools and I want to incorporate unit testing into this, are there standard tool(s) and framework(s) to accomplish this?
[18:48:02] *** Joins: adde9708 (uid139358@id-139358.tinside.irccloud.com)
[18:48:40] *** Quits: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[18:50:30] <grym> jiffe: pytest is extremely well regarded
[18:50:35] *** Joins: fluffyballoon (~fluffybal@131.93.208.196)
[18:52:10] *** Joins: fluffyballoon11 (~fluffybal@199.204.58.62)
[18:53:45] <WhyNotHugo> How can I convert an async generator into a list? `list(await my_generator)` doesn't seem to work.
[18:54:22] *** Quits: iomari891 (~iomari891@197.210.53.216) (Read error: Connection reset by peer)
[18:55:18] *** Quits: fluffyballoon (~fluffybal@131.93.208.196) (Ping timeout: 250 seconds)
[18:58:25] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[18:58:35] *** Joins: jkl (~jkl@12.216.111.80)
[18:58:42] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:59:07] *** fluffyballoon11 is now known as fluffyballoon
[18:59:08] *** Joins: SebastianM (~seba@user/sebastianm)
[18:59:29] *** Quits: skeels (~singurty@110.44.124.171) (Ping timeout: 244 seconds)
[19:00:01] *** Joins: Joene_ (~Joene@cust-158-98-110-94.dyn.as47377.net)
[19:00:03] *** Joins: iomari891 (~iomari891@197.210.52.159)
[19:01:03] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:01:26] *** Joins: enyc (~enyc@muddle.enyc.org.uk)
[19:01:32] <enyc> oooo new channel!
[19:02:09] <grym> same as the old channel in all important regards
[19:02:15] <grym> the channel of theseus
[19:02:41] <__that__> nedbat and then you use eval or similar?
[19:03:06] *** Quits: Payam (~Payam@138.106.57.131) (Ping timeout: 250 seconds)
[19:03:15] *** Quits: LucaTM (~LucaTM@user/lucatm) (Remote host closed the connection)
[19:03:32] *** Quits: Payam46 (~Payam@138.106.57.131) (Ping timeout: 250 seconds)
[19:03:38] *** Joins: LucaTM (~LucaTM@user/lucatm)
[19:03:58] *** Quits: Joene (~Joene@cust-158-98-110-94.dyn.as47377.net) (Ping timeout: 268 seconds)
[19:04:00] <Yhg1s> WhyNotHugo: I dont think there's a particularly straightforward way to do it. 'async for item in my_generator: result.append(item)'
[19:04:04] <kosh> welcome to the new channel, same as the old channel
[19:04:29] *** Quits: ganchan (~thomas_w@user/ganchan) (Read error: Connection reset by peer)
[19:04:42] <grym> kosh: funniest thing is that my channel ordering and whatnot all got saved in my irssi layout, so "switching networks" more or less feels like a noop
[19:04:55] *** Joins: cthulchu (~Cthulchu@94.153.66.220)
[19:05:01] *** Rettichkrise is now known as TheRadishCrisis
[19:05:06] <kosh> grym, yeah it was a pretty trivial switch
[19:05:19] <grym> could almost have done it with sed
[19:06:04] *** Joins: DrNostril (~DrNostril@217.138.219.144)
[19:06:08] *** Joins: ExeciN (~ExeciN@user/nicexe)
[19:06:16] <DrNostril> hey anybody online?
[19:06:17] <graingert> WhyNotHugo: aiostream has a tool for it
[19:06:28] <DrNostril> got a simple question about random state seeds
[19:06:36] <kosh> lots of people are here
[19:06:40] <DrNostril> great
[19:06:43] *** Joins: wons (~wons@user/wons)
[19:06:49] <graingert> WhyNotHugo: https://aiostream.readthedocs.io/en/stable/operators.html#aiostream.stream.list
[19:06:56] *** Joins: solarjoe4 (~solarjoe4@p57ab252b.dip0.t-ipconnect.de)
[19:07:03] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 268 seconds)
[19:08:03] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[19:08:06] *** Quits: arash (~arash@5.124.30.120) (Ping timeout: 264 seconds)
[19:08:17] <solarjoe4> does someone know a software to estimate the impact of changes in code, e.g. if a certain line or some variables changes, to calculate some metric how big the impact on the whole code base is?
[19:08:31] <graingert> solarjoe4: coverage helps
[19:08:38] <DrNostril> okay.... i'll just ask..........
[19:08:59] <graingert> solarjoe4: you can use pytest-cov to work out which tests cover what lines
[19:09:16] <DrNostril> using jupyter, rendering figures, slightly different every time i run a block. how can i set a random seed so i know what to expect?
[19:09:19] <graingert> And then you can use that to work out which tests are likely to hit your changed line
[19:09:21] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:09:32] <solarjoe4> graingert, ah, ok, but that's only to see if a line is tested, right?
[19:09:43] *** Joins: audiocat (~audio@2603-8081-1800-0062-da2a-56e6-92b0-31dc.res6.spectrum.com)
[19:09:49] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:09:54] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[19:10:31] <supakeen> DrNostril, generally by running with `PYTHONHASHSEED=0` or such in your environment.
[19:10:44] <supakeen> Or did you mean for the `random` module itself? That one has a `.seed` method.
[19:10:59] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[19:11:05] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[19:11:59] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[19:13:50] *** Quits: cthulchu (~Cthulchu@94.153.66.220) (Ping timeout: 268 seconds)
[19:13:50] *** Quits: iomari891 (~iomari891@197.210.52.159) (Ping timeout: 268 seconds)
[19:15:00] *** Joins: onu_ (~onufn@gibbs.uberspace.de)
[19:15:35] *** Joins: iomari891 (~iomari891@197.210.52.159)
[19:15:49] *** Quits: onu (~onufn@gibbs.uberspace.de) (Ping timeout: 244 seconds)
[19:15:49] *** onu_ is now known as onu
[19:16:22] <DrNostril> Thanks supakeen
[19:16:43] <DrNostril> not allowed to use R for this project........
[19:16:53] <DrNostril> Smell you later everybody!
[19:17:18] <randall> DrNostril: Can't smell me if you have corona
[19:18:05] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[19:18:44] <DrNostril> i don't! :p
[19:20:07] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[19:20:52] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[19:22:51] *** Joins: oskaro (~oskaro@ti0006q161-3905.bb.online.no)
[19:23:37] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[19:23:42] *** Quits: iomari891 (~iomari891@197.210.52.159) (Ping timeout: 268 seconds)
[19:24:04] *** Joins: Deneb (~johnch@195.213.86.93)
[19:25:30] *** Joins: JanC (~janc@user/janc)
[19:26:47] *** Quits: tims (~tims@27-32-34-159.tpgi.com.au) (Ping timeout: 268 seconds)
[19:27:06] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Quit: brylie)
[19:27:26] *** Quits: Einstein (~einstein@108.5.219.168) ()
[19:28:07] *** Joins: iomari891 (~iomari891@197.210.52.10)
[19:28:08] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[19:28:45] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[19:29:21] *** Joins: Adoi (~Adoi@user/adoi)
[19:30:17] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Remote host closed the connection)
[19:30:53] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[19:31:52] *** Quits: oskaro (~oskaro@ti0006q161-3905.bb.online.no) (Quit: leaving)
[19:33:13] *** Quits: bluesmonk (uid318026@id-318026.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[19:35:25] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Ping timeout: 268 seconds)
[19:36:56] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:38:40] <p-i-> Is there any one-liner to do `u = x['foo']['bar']['quux'] else None` without a helper involving a try/except?
[19:39:04] <p-i-> e.g. 'bar' may not exist
[19:39:18] <p-i-> x.get('foo', None) does one level
[19:39:21] *** Joins: waynew (~wayne@user/waynew)
[19:39:40] <supakeen> `u = x.get("foo", {}).get("bar", {}).get("quux")`
[19:39:42] <supakeen> But I don't really like it :)
[19:39:51] <InPhase> p-i-: x.get('foo', {}).get('bar', {})...  yeah, that.
[19:40:26] *** Quits: ExeciN (~ExeciN@user/nicexe) (Quit: Client closed)
[19:40:57] *** Quits: solarjoe4 (~solarjoe4@p57ab252b.dip0.t-ipconnect.de) (Quit: Leaving)
[19:42:27] *** Joins: synic (~squish@li74-118.members.linode.com)
[19:42:27] *** Joins: khile (cacambo@triton.blinkenshell.org)
[19:43:16] *** Joins: ice9 (~ice9@user/ice9)
[19:43:24] *** Joins: plancksconstant (~plancksco@103.98.128.96)
[19:43:26] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[19:43:37] <habnabit_> lacrymology, alas
[19:44:53] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[19:45:20] *** Joins: chance (~chance@50.47.109.175)
[19:45:59] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Ping timeout: 244 seconds)
[19:47:20] <Yhg1s> p-i-: you may be looking for a collections.defaultdict()
[19:48:23] <grym> p-i-: glom is the tool i use for deep data structure inspection
[19:48:56] *** Quits: hays (rootvegeta@user/hays) (Changing host)
[19:48:56] *** Joins: hays (rootvegeta@fsf/member/hays)
[19:49:03] <grym> which would be `u = glom.glom('foo.bar.quux',x)`
[19:50:41] *** Parts: plancksconstant (~plancksco@103.98.128.96) ()
[19:50:57] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[19:51:14] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[19:51:23] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:52:18] <grym> p-i-: https://bpa.st/FMMA
[19:53:25] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[19:53:27] *** Joins: zebrag (~chris@user/zebrag)
[19:53:49] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:54:13] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:55:16] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[19:56:41] *** Joins: alguien (~alguien@user/alguien)
[19:58:07] <p-i-> ooo I knew Python libs would have something
[19:58:09] <p-i-> Thanks!
[19:58:21] *** Quits: Julian (~tos9@151.66.53.132) (Ping timeout: 268 seconds)
[19:58:22] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[19:58:58] <p-i-> code_sanity *= 2
[19:58:58] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 268 seconds)
[19:59:10] *** Joins: |7| (~kvirc@user/seachdamh)
[19:59:23] <grym> glom needs documentation comments the way regex does
[19:59:25] <grym> but it's very good
[20:00:05] *** Quits: Joene_ (~Joene@cust-158-98-110-94.dyn.as47377.net) (Ping timeout: 268 seconds)
[20:00:18] *** Joins: mbryant (~mbryantms@1612740-v109.1116-static.plfdilaa.metronetinc.net)
[20:00:18] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[20:00:31] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[20:00:42] *** Quits: ddavis (~user@143.244.170.159) (Ping timeout: 268 seconds)
[20:01:45] *** Joins: Polyblank_ (~Polyblank@user/polyblank)
[20:03:00] *** Quits: chandankumar (~raukadah@110.44.96.144) (Quit: Leaving)
[20:03:03] *** Quits: |7| (~kvirc@user/seachdamh) (Read error: Connection reset by peer)
[20:03:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:03:21] *** Quits: Polyblank_ (~Polyblank@user/polyblank) (Quit: Leaving)
[20:03:26] *** Joins: |7| (~kvirc@user/seachdamh)
[20:03:34] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[20:04:08] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[20:04:11] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:04:17] *** Quits: Schnouki (~schnouki@user/schnouki) (Ping timeout: 252 seconds)
[20:04:17] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 252 seconds)
[20:04:44] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[20:04:56] *** Joins: zebrag (~chris@user/zebrag)
[20:05:28] *** Joins: Blankspace (~abcd@user/blankspace)
[20:06:55] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: why did you ban me)
[20:07:23] *** Quits: Meteorhead (~Meteorhea@static-qvn-qvs-164225.business.bouyguestelecom.com) (Quit: Client closed)
[20:07:28] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[20:07:35] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[20:09:12] *** Joins: kixx (~kixx@user/kixx)
[20:09:47] *** Joins: Julian (~tos9@151.66.53.132)
[20:09:48] *** Joins: Xano (~Xano@2a00:23c4:420c:d700:3c6a:2ab8:80dc:7028)
[20:09:55] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[20:10:06] <Xano> Hiya! I'm packaging an application with PyInstaller. Running from source works as expected on Windows, but running the packaged .exe gives "UnicodeEncodeError: 'charmap' codec can't encode character '\u2191' in position 1710: character maps to <undefined>". PYTHONUTF8=1. What are other known causes of this problem under Windows
[20:10:11] <Xano> PyInstaller 4.3, that is
[20:10:30] *** Quits: GeorgeK (~GeorgeK@cpe-70-92-5-228.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:10:34] *** Joins: feriman (~feriman@188.163.113.127)
[20:12:22] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 272 seconds)
[20:12:27] *** Quits: kmh (~kmh@p200300df5f1f6100ccf3735bd098c7df.dip0.t-ipconnect.de) (Quit: Leaving)
[20:12:42] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:14:32] *** Joins: Adoi (~Adoi@user/adoi)
[20:14:54] <grym> Xano: latin-1 or cp1251 instead of utf?
[20:14:58] <grym> utf8
[20:15:14] *** Quits: feriman (~feriman@188.163.113.127) (Read error: Connection reset by peer)
[20:16:24] *** Quits: someguy123 (~someguy@user/someguy123) (Ping timeout: 265 seconds)
[20:16:31] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[20:16:33] *** Quits: DrNostril (~DrNostril@217.138.219.144) (Remote host closed the connection)
[20:16:42] *** Joins: feriman (~feriman@188.163.113.127)
[20:19:49] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[20:20:05] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 244 seconds)
[20:20:15] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[20:20:36] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 244 seconds)
[20:20:43] *** Quits: wons (~wons@user/wons) (Quit: WeeChat 3.2)
[20:20:47] *** Joins: pnoud (~pnoud@user/pnoud)
[20:21:54] <Xano> grym, So a bit of context, sorry about omitting that, this is when parsing JSON responses from Wikipedia. I'll double-check if the aiohttp Request headers are different on Windows in a bit (am being called away)
[20:22:53] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:23:28] *** Joins: argento (~argent0@168-227-96-53.ptr.westnet.com.ar)
[20:26:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[20:26:40] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:27:25] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[20:28:10] <grym> Xano: glom and json go together amazinglyw ell
[20:29:19] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[20:29:26] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[20:30:20] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:31:26] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[20:31:33] *** Joins: lorogue (~lorogue@5.103.210.179.dhcp.fibianet.dk)
[20:31:39] *** Quits: __that__ (~Guest36@195.59.168.125) (Quit: Client closed)
[20:32:29] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[20:32:44] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[20:32:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:33:23] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 268 seconds)
[20:33:45] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[20:33:50] <enyc> hrrm, who needs to update  https://www.python.org/community/irc/   for the #pyar  cannel refenece?
[20:33:53] *** Joins: Celeo (~Celeo@2603-8001-3301-2e00-9587-1e0e-3592-6345.res6.spectrum.com)
[20:34:16] <habnabit_> enyc, you might have better luck in #python-dev
[20:36:08] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:36:28] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 268 seconds)
[20:36:39] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[20:37:02] *** Joins: jkl (~jkl@12.216.111.80)
[20:37:19] <nedbat> enyc: thanks for pointing it out, we'll get it sorted
[20:37:49] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[20:38:25] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:38:39] *** Parts: Foucault (~Foucault@user/foucault) (Bye!)
[20:39:34] *** Joins: dme86 (~dan@user/dan86)
[20:39:44] *** Quits: maroloccio (~marolocci@200.243.99.194) (Ping timeout: 250 seconds)
[20:40:02] *** Quits: exciteabletom (~tom@180.150.82.109) (Ping timeout: 252 seconds)
[20:40:29] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[20:40:35] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 252 seconds)
[20:41:08] *** Quits: jazzy (~jaziz@2607:fb90:a68f:d3a4:a155:fbed:d538:b5e5) (Ping timeout: 252 seconds)
[20:41:59] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:42:17] *** Joins: jabberwock (~lidless@user/jabberwock)
[20:43:03] *** Joins: xkuru (~xkuru@user/xkuru)
[20:43:40] *** Quits: Overflwn (~Overflwn@2a02:8070:c3b7:5b00::c639) (Remote host closed the connection)
[20:43:41] *** Joins: t0e (~t0e@37.19.212.133)
[20:44:05] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[20:44:21] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Remote host closed the connection)
[20:44:22] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 244 seconds)
[20:45:12] *** Joins: GenericUser584 (~GenericUs@n112119177136.netvigator.com)
[20:45:24] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[20:46:56] *** Quits: GenericUser584 (~GenericUs@n112119177136.netvigator.com) (Quit: GenericUser584)
[20:47:27] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[20:49:45] <camel_case> can I do 'a = value if a = None'
[20:49:53] <camel_case> to set a default value?
[20:49:53] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi) (Quit: Leaving)
[20:50:09] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[20:50:22] <jinsun> camel_case: a = a or value ?
[20:50:26] <nedbat> enyc: it's fixed now, thanks: https://www.python.org/community/irc/
[20:50:36] <camel_case> jinsun: even better!
[20:50:40] <habnabit_> camel_case, `a = a if a is not None else value`
[20:51:11] <habnabit_> camel_case, the `or` trick only supports a limited number of cases. don't do it for any mutable objects
[20:51:23] <enyc> nedbat: not for me  mayxe its' cached somewhere
[20:51:57] <camel_case> hey, can I ask questions about my pet snake here? My dad is here but my ball python is STILL shedding since 3 days ago!
[20:52:05] <camel_case> he wants to hold the snek
[20:53:06] <bjs> camel_case: please stop :)
[20:54:07] <sco1> Now that's a joke nobody's ever heard before
[20:54:55] *** Quits: sharksauce (sharksauce@user/sharksauce) (Quit: WeeChat 2.8)
[20:55:16] <nedbat> as my wife says, "that's a joke that never gets new"
[20:55:28] <habnabit_> nedbat, ha! now that is a good joke
[20:55:49] <sco1> Adding that to the repertoire
[20:55:50] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:56:13] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:56:20] *** Joins: dme86 (~dan@user/dan86)
[20:56:35] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:26] *** Joins: tunixman (~tunixman@45.32.228.130)
[20:58:18] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 240 seconds)
[20:59:19] <p-i-> camel_case: You need to put some damp moss in a box. On which subject, my camel has got a case of the hump... any ideas?
[20:59:28] *** Joins: viktorivan (~ivan@2806:101e:7:b2aa:fc33:d68d:169b:523b)
[20:59:29] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[20:59:59] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[21:00:53] <p-i-> I've created a websocket server on localhost. But if I try to connect with `async with open_websocket_url(WSProxy.PROXY_IP, use_ssl=False) as sock:` I get 'Address already in use'. There must be something I'm missing about websockets.
[21:00:57] *** Quits: ffledgling (~textual@2620:10d:c090:400::5:e865) (Quit: Textual IRC Client: www.textualapp.com)
[21:01:04] <p-i-> Any ideas?
[21:01:23] <habnabit_> p-i-, pastebin the full traceback.. i would find it very strange if that line produces that error
[21:01:44] <The-Compiler> camel_case: you've been told to stop repeatedly yesterday (as "iphone") - if you go on with this, I'm not going to ask nicely again
[21:02:02] <habnabit_> i wondered if that was the same person
[21:02:23] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[21:02:48] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:02:56] <p-i-> habnabit_: https://bpa.st/AGKA
[21:03:40] <habnabit_> p-i-, did you see the error comes from nursery.start_soon(self.run_local_socket_server) ?
[21:04:17] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[21:04:39] <mike18> hi do you also have some sort of multistage build for a python docker? https://gist.github.com/praveenweb/9cabe480c1811b85337de988e43b8633
[21:04:46] <mike18> when you deploy your python app?
[21:05:04] <habnabit_> mike18, yep. multi-stage builds are great
[21:05:15] <mike18> can you show me an example you use?
[21:05:26] <habnabit_> mike18, https://github.com/pound-python/infobob/blob/master/Dockerfile
[21:05:26] <mike18> that gist is a bit outdated...
[21:05:26] <p-i-> ok now I'm confused. I actually forgot to make an instance of my class and run it. So I don't see why I get ANY output at all!
[21:05:37] <mike18> pypy:2 ?
[21:05:40] <habnabit_> p-i-, perhaps you should show your code
[21:05:53] <p-i-> habnabit_: It's in the paste
[21:06:12] <habnabit_> p-i-, it isn't; the code you pasted will do nothing when run
[21:06:14] <mike18> habnabit_: is it pushing that docker image somewhere and than you use that img to run it?
[21:06:17] <habnabit_> p-i-, it iwll define a class and then exit
[21:06:17] <p-i-> ohhh sorry
[21:06:21] *** Joins: naitsabes (~naitsabes@user/naitsabes)
[21:06:26] *** Joins: arunkhattri (~arunkhatt@117.99.191.104)
[21:06:32] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[21:06:40] <p-i-> gah going too fast. I forgot to `if __name__=='__main__'` in the other file
[21:06:57] <habnabit_> mike18, i'm not sure what you're asking. a dockerfile doesn't define anything about pushing
[21:07:06] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:07:09] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:07:18] <mike18> you dont run that docker multistage build when you run your docker?
[21:07:19] *** Joins: Blankspace (~abcd@user/blankspace)
[21:07:29] <mike18> that must be part of deployment process - no?
[21:07:34] <habnabit_> mike18, a multistage build defines how the image is _built_, not _deployed_
[21:07:34] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:07:45] <habnabit_> mike18, you only have to build it once
[21:07:53] <mike18> yeah
[21:08:26] <mike18> what is INFOBOB_COMMIT ?
[21:08:49] *** Quits: viktorivan (~ivan@2806:101e:7:b2aa:fc33:d68d:169b:523b) (Remote host closed the connection)
[21:09:12] *** Joins: binarymutt_ (~binarymut@c-98-194-153-108.hsd1.tx.comcast.net)
[21:09:32] <habnabit_> mike18, the git hash
[21:09:34] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:09:41] *** Quits: cmagina (~cmagina@user/cmagina) (Quit: ZNC 1.8.2 - https://znc.in)
[21:10:30] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:fd68:b163:35ec:5580) (Ping timeout: 268 seconds)
[21:11:15] *** Joins: manti7 (~manti7@176.10.104.94)
[21:11:35] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[21:12:40] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[21:12:42] *** Quits: aslicedbanjo (~aslicedba@host86-150-115-58.range86-150.btcentralplus.com) (Quit: Leaving.)
[21:13:17] *** Quits: rsx (~dummy@ppp-188-174-134-210.dynamic.mnet-online.de) (Quit: rsx)
[21:13:30] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[21:13:52] *** Joins: cmagina (~cmagina@user/cmagina)
[21:14:59] *** Joins: jenhsun (uid342237@id-342237.stonehaven.irccloud.com)
[21:16:17] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[21:16:31] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[21:16:58] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[21:17:01] *** Quits: sadg (~odd@45.83.220.210) (Quit: WeeChat 3.0.1)
[21:17:31] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Remote host closed the connection)
[21:17:35] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:19:08] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[21:20:15] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[21:21:03] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[21:21:32] *** Quits: jenhsun (uid342237@id-342237.stonehaven.irccloud.com) ()
[21:22:16] *** moto is now known as motro
[21:22:25] *** motro is now known as moto
[21:22:26] *** Joins: rhax (~yannick@user/rhax)
[21:22:40] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi)
[21:23:06] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 264 seconds)
[21:23:14] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[21:24:02] *** Quits: Celeo (~Celeo@2603-8001-3301-2e00-9587-1e0e-3592-6345.res6.spectrum.com) (Quit: Leaving)
[21:24:35] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 252 seconds)
[21:25:08] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[21:27:00] *** Quits: rhax (~yannick@user/rhax) (Read error: Connection reset by peer)
[21:27:06] *** Quits: Xano (~Xano@2a00:23c4:420c:d700:3c6a:2ab8:80dc:7028) (Remote host closed the connection)
[21:27:24] *** Joins: Xano (~Xano@2a00:23c4:420c:d700:e35f:ea13:eb4f:d6ee)
[21:28:36] *** Quits: taeaad (~taeaad@user/taeaad) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:29:17] *** Joins: taeaad (~taeaad@user/taeaad)
[21:29:41] *** Joins: Pickchea (~private@user/pickchea)
[21:33:30] *** Joins: cecep (~weechat@dynamic-089-012-134-129.89.12.pool.telefonica.de)
[21:33:48] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[21:33:52] *** Quits: cecep (~weechat@dynamic-089-012-134-129.89.12.pool.telefonica.de) (Quit: WeeChat 3.2)
[21:35:20] *** Joins: greedom (~greedom@2001:16b8:326f:5100:6427:5e2c:e3c4:ff7a)
[21:35:25] <mike18> is pypy:2 python 3.9.5 ?
[21:35:34] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:36:18] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[21:36:56] <mike18> habnabit_: also it still uses old setup: https://github.com/pound-python/infobob/blob/master/setup.py
[21:37:23] *** Quits: greedom (~greedom@2001:16b8:326f:5100:6427:5e2c:e3c4:ff7a) (Remote host closed the connection)
[21:38:13] *** Joins: greedom (~greedom@2001:16b8:326f:5100:6427:5e2c:e3c4:ff7a)
[21:38:20] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:38:23] *** Joins: goldfish (~goldfish@user/goldfish)
[21:38:45] <mike18> https://pythonspeed.com/articles/alpine-docker-python/ ... Using Alpine can make Python Docker builds 50× slower ?
[21:38:47] <mike18> really/
[21:39:05] *** Joins: vrt3 (~vrt3@d54C5733D.access.telenet.be)
[21:39:30] *** Quits: jheblu (~user@116.68.98.40) (Quit: ERC (IRC client for Emacs 27.2))
[21:39:45] <Habbie> mike18, the article clearly explains why this is so
[21:39:53] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[21:40:06] <mike18> do you recommend alpine?
[21:40:41] <Habbie> I think alpine is a very fine base for many things; for the Python case, the article looks sensible to me, so maybe no
[21:41:00] <Habbie> do note the 'An update' bit near the bottom
[21:41:06] *** Joins: cthulchu_ (~Cthulchu@143.244.149.171)
[21:41:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:41:36] *** Joins: qlixed (~qlixed@181.44.129.13)
[21:42:06] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi) (Quit: WeeChat 3.2)
[21:42:06] <WeblordPepe> alpine is awesome
[21:42:26] <WeblordPepe> its kinda sad that everyone uses it for containers all the time. but i think thats cos containers are sad
[21:42:43] *** Joins: teut (~teut@182.69.85.39)
[21:42:53] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:43:02] <esro> WeblordPepe: Linus said it best ;-)
[21:43:04] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[21:43:16] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[21:43:27] <WeblordPepe> esro: yeah? what'd he say? im not up to speed with latest linus news
[21:44:04] <esro> it was before he got schooled about vaccines and being PC(unt)
[21:44:22] *** Joins: zeenk (~zeenk@188.26.30.39)
[21:44:27] <esro> bassically his opinions on cgroups and containers is - similiar to his stands about sym links
[21:44:39] *** Joins: Overflwn (~Overflwn@2a02:8070:c3b7:5b00::c639)
[21:44:49] *** Quits: iomari891 (~iomari891@197.210.52.10) (Ping timeout: 272 seconds)
[21:45:02] <esro> tl;dr: stupid idea of solving problem which should be solved in frame of system
[21:45:08] *** Joins: brickfat (~brickfat@user/brickfat)
[21:45:21] *** Quits: rendar (~rendar@user/rendar) ()
[21:45:32] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[21:46:08] <esro> meaning - its misguided over compensation. and state of kubernetes, also k8s product team (not calling it development team on purpose here).
[21:46:19] <WeblordPepe> oh yeah. thats how i feel as well. operating systems already have virtual memory.
[21:46:34] <TML> I didn't know Linus had a negative opinion of symlinks
[21:46:35] <WeblordPepe> this is an interesting web page about alpine & python
[21:46:45] <esro> https://www.theregister.com/2015/08/19/linuxcon_torvalds_qa/
[21:46:53] <WeblordPepe> i guess it goes to show you gotta be careful when packaging stuff against libraries even if its the standard c library
[21:47:03] <WeblordPepe> TML: neither did i
[21:47:08] <esro> TML: try automation. its not negative opinion. Its statement of fact. objective diagnosis
[21:47:30] *** Joins: recursion (uid504862@id-504862.charlton.irccloud.com)
[21:47:36] <nedbat> esro: let's not get into a debate about symlinks (or containers etc)
[21:47:46] <esro> bassically there was massive arguement in community about symlinks. its just anomaly
[21:47:50] *** Joins: cth (~Cthulchu@193.194.107.250)
[21:47:57] <esro> nedbat: why not ?
[21:48:08] <TML> WeblordPepe: FTR, I use alpine on hundreds of servers across scores of clients and while it's true that you have to build an occasional package because there's not a wheel for it, you can actually build your own wheels and distribute them :)
[21:48:21] *** Joins: akaWolf (~akaWolf@akawolf.org)
[21:48:25] <nedbat> esro: because 1) it's off-topic, and 2) as soon as you claim something is objective fact, it's going to get heated.
[21:48:30] *** Quits: Blankspace (~abcd@user/blankspace) (Quit: why did you ban me)
[21:48:34] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:48:53] <esro> nedbat: are you operator  /  mod / someone who can punish me ? :D
[21:49:09] <nedbat> esro: 1) yes, 2) should it matter?
[21:49:34] <nedbat> esro: i'm asking you nicely to keep the channel working well.
[21:49:35] <esro> yea. because - as you can see - only you had issue with it. shutting up then :)
[21:49:54] *** Quits: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:50:07] <tunixman> Just because he was the only one to speak up doesn't mean he was the only one wanting us to stay on topic.
[21:50:15] <tunixman> and thank you :)
[21:50:50] *** Joins: cecep (~weechat@dynamic-089-012-134-129.89.12.pool.telefonica.de)
[21:51:20] <WeblordPepe> i must confess i am noob at python so im here to learn
[21:51:26] <nedbat> WeblordPepe: great, welcome! :)
[21:51:32] <WeblordPepe> learn, whinge - but mostly learn.
[21:51:33] *** Quits: cecep (~weechat@dynamic-089-012-134-129.89.12.pool.telefonica.de) (Client Quit)
[21:51:40] <nedbat> WeblordPepe: I am an expert at Python, and I am also here to learn :)
[21:51:42] <WeblordPepe> thank you :)
[21:51:49] *** Quits: cthulchu_ (~Cthulchu@143.244.149.171) (Ping timeout: 268 seconds)
[21:52:09] <WeblordPepe> i come from planet strongly typed language, where we strongly type and declare everything. i am here to learn of your duck typing ways
[21:52:30] <nedbat> WeblordPepe: ironically, many of us are trying to figure out how to use Python's type hinting :)
[21:52:58] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[21:53:13] *** Quits: Julian (~tos9@151.66.53.132) (Quit: leaving)
[21:53:14] <recursion> I used to use python daily but have since moved to go for my daily use cases, python is still awesome
[21:53:32] <vrt3> WeblordPepe: make no mistake: Python is also strongly typed. But not statically typed as you're probably used to.
[21:54:56] *** Joins: Celeo (~Celeo@2603-8001-3301-2e00-2169-6a0a-8676-2862.res6.spectrum.com)
[21:56:24] *** Joins: pwnd_sfw5 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[21:56:24] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[21:56:24] *** pwnd_sfw5 is now known as pwnd_sfw
[21:57:29] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[21:57:30] *** Quits: arunkhattri (~arunkhatt@117.99.191.104) (Remote host closed the connection)
[21:58:25] <WeblordPepe> yeah. im used to my IDE yelling at me about wrong types as a form of safety and im sorta wobbling on my rollerskates figuring out python
[21:59:07] <WeblordPepe> i'll get there with practice. im mainly here for the machine learning and science libraries :) and how you can iterate through more than one variable at a time in a for loop
[21:59:14] <WeblordPepe> whoever invented that was smoking the right stuff
[22:00:01] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:00:07] <jinsun> use vscode with pylance + strict type checking mode and you get an IDE that yells about wrong types all the time
[22:00:14] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Write error: Broken pipe)
[22:00:32] *** Quits: jabberwock (~lidless@user/jabberwock) (Quit: WeeChat 2.8)
[22:00:35] <jinsun> the only problem is many libraries are not typed yet
[22:00:47] *** Joins: SebastianM (~seba@user/sebastianm)
[22:01:37] *** Joins: joseba (~joseba@193.9.4.11)
[22:02:03] <TML> I am constantly mystified at this discussion - I cannot recall ever once having a bug come up in Python because I used the wrong type.
[22:02:56] *** Joins: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[22:03:06] <sco1> That's impressive
[22:03:18] <TML> I don't even know what such a bug would LOOK like
[22:03:24] <Linkandzelda> how do I make argparse stop the program when no valid arguments are given?
[22:03:28] <Tashtari> I suspect that at least part of it is that people who come from staticly (statically?) typed languages just can't fathom life without them.
[22:03:46] <Vornicus> I've never messed up "use the right type" per se but I'll very often forget what the heck my variables are and boy it doesn't like when I index integers
[22:04:03] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:04:04] <supakeen> Anything that takes an argument and tries to do some operations on it like `def f(a): return a.startswith("b")` -> TypeError: NoneType has no attribute ...
[22:04:06] <supakeen> Etc.
[22:04:28] <supakeen> For a sufficiently large codebase it's pretty hard to keep all the types in mind at all times and all permutations of those.
[22:04:32] *** Quits: Deadly_Alive (Deadly_Ali@user/deadly-alive/x-7001497) (Quit: A wise old Chinese man once said - Man who goes to bed with finger in bum, wakes up with smelly fingers!)
[22:05:30] *** Joins: curiouz (~User@user/curiouz)
[22:05:40] <supakeen> And it's even slightly worse when you're a new programmer coming into a project that hasn't internalized all of that information yet.
[22:05:43] <TML> You don't know if you're passing in a None? I don't know - I guess I'm just writing fundamentally different code than everyone else is :)
[22:05:55] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[22:06:54] <jinsun> if you test it propoerly you'll eventually find out most of those I guess, the benefit is that your IDE tells you while you are typing
[22:06:56] <TML> not trying to say I'm better than anyone else - it genuinely makes me feel like I'm just doing something really, fundamentally wrong that I don't ever run into this problem
[22:07:14] <supakeen> It's nice to assert that your code won't be used with the wrong types leading to runtime errors.
[22:07:25] *** Quits: curiouz (~User@user/curiouz) (Quit: Konversation terminated!)
[22:07:32] <TML> jinsun: I don't use an IDE - they'll have to pry vi out of my cold, dead fingers :)
[22:07:35] <supakeen> Aside from that you get free documentation with it.
[22:07:48] <TML> supakeen: How so?
[22:08:04] <supakeen> TML, if I'm using your code do I have to go look at a function to see what all it could return?
[22:08:35] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 244 seconds)
[22:08:42] <TML> supakeen: Well, you could either look at the code, or the documentation.
[22:08:49] <TML> we write the documentation first
[22:09:00] <WeblordPepe> its a safety thing. there's no way on earth i'd be able to keep symantic consistency without an IDE being able to look at all the relevant valid things i can put into a function
[22:09:02] <TML> then write the code to satisfy the documentation
[22:09:03] <supakeen> Yep, and the type annotations are a nice way to document what arguments something expects and what it returns.
[22:09:37] <sco1> How do you check that the function & documentation match?
[22:09:42] <supakeen> With the added benefit that you can use a static analyzer to make sure you didn't change a type somewhere inadvertently.
[22:09:52] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:09:54] <TML> sco1: Tests
[22:09:59] <sco1> You test your documentation?
[22:10:04] <supakeen> If you're already writing it down anyways :)
[22:10:18] <jinsun> TML: writing test + docs is much harder than writing type hints
[22:10:23] <WeblordPepe> hmm i dont like tests as an answer to that
[22:10:29] *** Quits: Deneb (~johnch@195.213.86.93) (Quit: Leaving)
[22:10:42] <supakeen> It's pretty rare that people actually test non-expected types in their tests, non-expected logic yes.
[22:10:44] <TML> sco1: one developer writes the code to the documentation, one developer writes the tests to the documentation; if the code passes the tests, it is a validate of sorts that the code meets the spec
[22:10:46] <supakeen> But you could.
[22:10:50] <supakeen> It's just a bunch more effort.
[22:10:53] <sco1> Yes, I understand how the process works.
[22:10:58] <supakeen> Anyways -> bbl.
[22:11:31] <TML> jinsun: I can see how that's the case, but type hints don't solve the same problems as tests+documentation
[22:12:05] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:12:24] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[22:12:34] <WeblordPepe> at the moment im having a hell of a time working out what sort of functions i can supply as arguments to javascript functions
[22:13:01] *** Joins: Adoi (~Adoi@user/adoi)
[22:13:03] <WeblordPepe> if it specified an interface say like how c# or java does, it'd be easy. and the IDE can create an anonymous function in line
[22:13:04] *** Joins: cthulchu (~Cthulchu@193.194.107.188)
[22:13:11] <WeblordPepe> its just hard for me cos im new
[22:13:30] <WeblordPepe> i dont know how others are able to just go in and do it without concern
[22:13:49] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Quit: afk)
[22:13:53] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[22:13:55] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[22:14:12] <WeblordPepe> i'm used to the IDE yelling at me about not supplying the right stuff into a function as a means to guide me on how to give the function correct input so it wont break
[22:14:38] *** Quits: bss (bss@rie.incorporeal.org) (Quit: brb)
[22:14:54] *** Joins: armandokeller (~armandoke@200.159.170.169)
[22:14:57] <WeblordPepe> jinsun: thank you for letting me know about pylace and stuff. is 'strict type checking mode' an additional thing i should look for? like a setting
[22:15:20] <jinsun> WeblordPepe: yes you can enable that in vscode settings after you install pylance
[22:15:55] *** Joins: bss (bss@rie.incorporeal.org)
[22:15:56] <jinsun> "python.analysis.typeCheckingMode": "strict"
[22:15:58] <TML> jinsun: And, as I said, for reasons I cannot explain, I've never actually SEEN the problem that everyone is worrying about. I've never had my own code do it, I've never had any 3rd party code do it. Just seems odd.
[22:16:03] <WeblordPepe> coooool thanks. would it make me an awkward python programmer who cant play with the other python kids? or is it good practice
[22:16:30] <sco1> I'm extremely skeptical that you've never encountered runtime errors at any time in your life from passing in the wrong type of argument
[22:16:43] <WeblordPepe> TML: maybe its a bottom up versus top down way of looking at stuff
[22:16:54] *** Joins: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de)
[22:16:58] <sco1> But if your process generates testing that's this comprehensive then more power to you
[22:17:46] *** Quits: zebrag (~chris@user/zebrag) (Read error: Connection reset by peer)
[22:17:47] *** Joins: magla (~gelignite@55d4d6c1.access.ecotel.net)
[22:17:58] <sco1> I'd be in heaven if more of my contractors would do it whatever way this is
[22:18:07] *** Joins: zebrag (~chris@user/zebrag)
[22:18:08] <WeblordPepe> yeah it seems odd to me to have to wait till runtime to learn that you've given a function the wrong stuff. i guess thats the best way to describe my confusion. its the sorta thing that seems wrong but i know there must be a different approach that im not understanding
[22:18:20] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[22:18:29] <TML> sco1: Where do the wrong types tend to come from? Incorrectly validated user input? APIs not returning what was documented?
[22:18:40] <WeblordPepe> so thats kinda why im here :) to cry and be comforted by people who can python properly
[22:18:45] <jinsun> TML: one example from my past is that I didn't know subprocess stdout is bytes, I was assuming it was str, but while I was typing the red underlines told me that I am trying to use bytes where str is expected
[22:18:46] *** Joins: d3vyL (d3vyL@host-82-51-45-133.retail.telecomitalia.it)
[22:19:03] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[22:19:06] *** Parts: d3vyL (d3vyL@host-82-51-45-133.retail.telecomitalia.it) ()
[22:19:06] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[22:19:12] *** Joins: d3vyL (d3vyL@host-82-51-45-133.retail.telecomitalia.it)
[22:19:29] *** Joins: GvP (~GvP@ip70-162-85-176.ph.ph.cox.net)
[22:19:57] <WeblordPepe> jinsun: ahhhh this is a horror story that i was afraid i might run into. is that the kinda stuff that happens with python devs?
[22:20:00] *** Joins: et_ (~et@user/et)
[22:20:07] <jinsun> TML: and then putting encoding arrgument in the subprocess call converted those to strings and then all errors went away, I didn't have to run any code at all
[22:20:19] <WeblordPepe> oooooh
[22:20:22] <sco1> TML: All of the above. Also user error. Also code, documentation, and/or spec deviating. Also incomplete tests. And on, and on
[22:20:27] <WeblordPepe> checked exceptions.
[22:20:48] *** Quits: et (~et@user/et) (Ping timeout: 268 seconds)
[22:20:48] *** Quits: ______GOD______ (~GOD@189.174.198.176) (Ping timeout: 268 seconds)
[22:20:48] *** et_ is now known as et
[22:21:32] <WeblordPepe> fascinating
[22:21:37] *** Joins: pnoud (~pnoud@user/pnoud)
[22:22:01] <WeblordPepe> man its nearly 6am and i still havent slept. im gonna give it another shot. thank you humans. this has been productive and fun
[22:22:06] *** Quits: Celeo (~Celeo@2603-8001-3301-2e00-2169-6a0a-8676-2862.res6.spectrum.com) (Quit: Leaving)
[22:22:30] *** Quits: audiocat (~audio@2603-8081-1800-0062-da2a-56e6-92b0-31dc.res6.spectrum.com) (Ping timeout: 264 seconds)
[22:22:38] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi)
[22:22:46] * WeblordPepe returns to his liquid form & slithers under the door
[22:22:57] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[22:23:04] <jinsun> WeblordPepe: it is not too bad, even without type hints usually you can find out those issues the first time you test it, but I like fixing my code without even writing tests or even manually running it
[22:23:07] *** Quits: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[22:23:40] <WeblordPepe> yeah same
[22:23:41] *** Joins: diverdude (~undodre@216.201.150.178)
[22:23:54] <WeblordPepe> i think i come from an age of programmers who would fix stuff by staring at it
[22:24:07] <diverdude> why is this not giving me an error? np.array((1,2,3))[1:20]
[22:25:03] <WeblordPepe> i consider testing to be surplus to my ability to write good code. tests should be in addition to what i can eyeball as good/faulty
[22:25:13] <sco1> diverdude: what error are you expecting?
[22:25:14] *** Joins: cecep (~weechat@dynamic-089-012-134-129.89.12.pool.telefonica.de)
[22:25:16] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[22:25:21] <WeblordPepe> otherwise its not external to me
[22:25:22] <diverdude> sco1: out of bounds error
[22:25:32] <sco1> Why?
[22:25:50] *** Joins: ______GOD______ (~GOD@187.155.136.158)
[22:25:56] <sco1> Python slicing, in general, doesn't do that
[22:26:02] <diverdude> sco1: because i am asking for all values from index 1 to 20 in an array with only 3 elements
[22:26:23] *** Quits: cecep (~weechat@dynamic-089-012-134-129.89.12.pool.telefonica.de) (Client Quit)
[22:26:40] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[22:29:32] *** Parts: d3vyL (d3vyL@host-82-51-45-133.retail.telecomitalia.it) ()
[22:31:02] *** Joins: cthulchu_ (~Cthulchu@157.245.121.241)
[22:33:21] <Jenkens> left field question: anyone here have experience with zope/plone
[22:33:28] *** Quits: Vision (~Vision@047-034-097-066.res.spectrum.com) (Quit: Leaving)
[22:34:12] <altendky> is there an official statement about `setup.py install` and `setup.py build` (and running `setup.py` in general) being deprecated or not preferred or such?  i'm not yet sure what's happening in https://github.com/twisted/towncrier/issues/351 but that's the first thing that jumps out to me.
[22:34:52] *** Quits: cthulchu (~Cthulchu@193.194.107.188) (Ping timeout: 268 seconds)
[22:35:30] <jinsun> diverdude: wel it seems slicing is defined that way, your 20 gets converted to 3 https://docs.python.org/3/library/stdtypes.html#common-sequence-operations (note 4)
[22:36:07] *** Joins: cth (~Cthulchu@193.194.107.188)
[22:36:34] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:36:52] *** Quits: DTE (~DTE@nat-pool-fab-t.redhat.com) (Quit: ZNC 1.8.2 - https://znc.in)
[22:37:02] *** Joins: ponadm (pony@gateway/vpn/protonvpn/ponadm)
[22:37:32] *** Joins: Julian (~tos9@151.66.53.132)
[22:37:32] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi) (Quit: WeeChat 3.2)
[22:37:35] *** Quits: Julian (~tos9@151.66.53.132) (Client Quit)
[22:39:48] *** Quits: cthulchu_ (~Cthulchu@157.245.121.241) (Ping timeout: 268 seconds)
[22:39:57] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[22:40:14] *** Joins: DeeJay2 (~deejay2@199-114-234-216.pool.interplex.ca)
[22:42:30] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Client Quit)
[22:42:45] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[22:43:19] <Adoi> hello! ideally I have to be getting an output in the file here, but I cant make it work, and couldnt find sufficient information on the net..can you please hint me at it?
[22:43:22] <Adoi> https://www.pastebin.cz/raw/fjBnDNQ
[22:44:20] <zware> altendky: I don't know of anything official, but I don't expect it to be going away for several years yet.  There do seem to be efforts to try to move away from `setup.py`, though
[22:44:41] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Client Quit)
[22:44:46] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[22:44:51] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[22:45:28] <grym> altendky: i don't know where to quote chapter and verse that says "thou shalt `venv/bin/python -m pip install somedir` and thou shalt not `venv/bin/python somedir/setup.py install`, sadly.
[22:45:30] <altendky> it's been a not great choice for years already and many projects already have it just for `--editable` and other corner case compatibility because it's simpler to put the two lines of code in there than deal with the questions.  :]  but yeah, it will persist
[22:45:33] <grym> but i believe it's canon anyway :D
[22:45:37] *** Quits: chance (~chance@50.47.109.175) (Quit: Client closed)
[22:46:01] <zware> altendky: The traceback in the posted issue looks like it's just the wrong version of setuptools (too old) installed
[22:46:19] <grym> i have approximately no compunctions about having "real" setup.pys, i just drive them with pip (except for torch, but we don't talk about torch in public, it's profane)
[22:46:35] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Ping timeout: 268 seconds)
[22:48:07] <altendky> zware: mm, i need to figure out why this is coming up mid-pytest...
[22:48:18] *** Joins: menace (~someone@user/menace)
[22:48:26] *** Quits: varaindemian (~varaindem@82.76.227.153) (Ping timeout: 250 seconds)
[22:50:20] <zware> altendky: I'd guess because the wrong version of setuptools is installed ;)  (And pytest isn't checking early enough?  Idk, I'm not a fan of pytest)
[22:50:58] <p-i-> Suppose I want to run the same code in 3 threads. Can I split the print() output into 3 files without fiddling the innards?
[22:50:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:51:19] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Ping timeout: 272 seconds)
[22:51:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Client Quit)
[22:51:44] <altendky> zware: the `F` at the beginning comes before a file but after another `.` which is usually a test indicator as well.  i need to refresh myself on the towncrier test setup for anything funny there.
[22:52:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:52:28] <zware> p-i-: See the `file=` argument to `print`
[22:52:36] <Adoi> oh ok the problem is likely not about the path
[22:52:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Client Quit)
[22:52:40] <sco1> Adoi: what is "solve"?
[22:52:51] *** Parts: wilk (~wilk@user/wilk) ()
[22:52:55] *** Joins: wilk (~wilk@user/wilk)
[22:52:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:53:08] <Adoi> sco1, solve is the function above the paste. I only pasted the problematic part, but I think I was wrong. the problem doesnt relate to the part I posted
[22:53:20] <Adoi> I may be able to solve it soon :)
[22:53:33] *** Quits: ______GOD______ (~GOD@187.155.136.158) (Ping timeout: 244 seconds)
[22:53:42] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 264 seconds)
[22:53:45] *** Quits: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) (Quit: Leaving.)
[22:53:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Client Quit)
[22:54:06] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 268 seconds)
[22:54:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:54:44] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[22:56:24] *** Joins: wattux (~wattux@2a02:810a:1140:4b6c::f428)
[22:56:54] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[22:57:22] *** Joins: KindOne_ (kindone@user/kindone)
[22:57:32] <p-i-> zware: So I _DO_ need to fiddle the innards... thanks!
[22:58:25] *** Quits: KindOne (kindone@user/kindone) (Ping timeout: 268 seconds)
[22:58:37] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[22:59:33] *** KindOne_ is now known as KindOne
[22:59:33] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[23:01:41] <Adoi> ok, solved, thank you
[23:02:12] *** Joins: moonwhisper (~tyler.lub@99-152-114-229.lightspeed.sntcca.sbcglobal.net)
[23:02:48] *** Joins: Akuli (~Akuli@87-94-111-251.bb.dnainternet.fi)
[23:04:10] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi)
[23:05:01] *** Joins: HighlyCurious (~HighlyCur@2600:1700:38d0:8250:e570:3d0d:9539:d73a)
[23:05:08] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[23:05:22] *** Joins: ______GOD______ (~GOD@187.155.149.127)
[23:05:34] *** Joins: SebastianM (~seba@user/sebastianm)
[23:05:39] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[23:08:26] *** Joins: rememberYou (~user@user/rememberyou)
[23:09:06] *** Joins: draeath (~draeath@user/draeath)
[23:09:54] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 264 seconds)
[23:10:07] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:10:20] <mborus> in case you need something to watch now: The Italian PyFest (https://pyfest.online/) is streaming. It's free and later today there's an interview with Sebastián Ramírez (the creator of FastAPI)
[23:10:24] *** Quits: rememberYou (~user@user/rememberyou) (Client Quit)
[23:11:23] *** Quits: {HD} (~{HD}@102.165.16.142) (Ping timeout: 268 seconds)
[23:12:24] <grym> oo.  SnoopJ ^
[23:12:30] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[23:12:36] *** Quits: KeiraT (~unknown@lulzsec.co.uk) (Ping timeout: 268 seconds)
[23:12:44] *** Joins: senilio (~merde@2a01:4f9:c010:c477::1)
[23:12:55] <teut> ya there was a good talk on  Kafta and Event driven too recently
[23:13:22] *** Joins: Betal (~Beta@user/betal)
[23:13:34] <teut> kafka*
[23:13:38] *** Joins: jkl (~jkl@12.216.111.80)
[23:14:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[23:14:29] *** Quits: lambda (~lambda@cyka.blyat.vodka) (Quit: WeeChat 3.1)
[23:14:49] *** Joins: lambda (~weechat@cyka.blyat.vodka)
[23:14:51] *** Joins: vlm (~vlm@user/vlm)
[23:15:30] *** Joins: KeiraT (~unknown@lulzsec.co.uk)
[23:15:40] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[23:15:46] *** Quits: vlm (~vlm@user/vlm) (Remote host closed the connection)
[23:16:15] *** Joins: vlm (~vlm@user/vlm)
[23:16:21] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[23:17:37] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Quit: brylie)
[23:17:42] *** Joins: aslicedbanjo (~aslicedba@host86-150-115-58.range86-150.btcentralplus.com)
[23:18:41] *** Quits: draeath (~draeath@user/draeath) (Quit: WeeChat 3.1)
[23:18:53] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:19:44] *** Joins: dodobrain__ (~dodobrain@user/dodobrain)
[23:19:52] <graingert> nedbat: you seem to be involved in a lot of 3.10 traceback bpos, does this interest you? https://bugs.python.org/issue44446
[23:20:10] *** Joins: areicogi (~koning@c-24-5-121-76.hsd1.ca.comcast.net)
[23:20:17] <graingert> nedbat: actually this makes more sense on #python-dev
[23:20:54] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[23:22:34] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[23:23:29] *** Quits: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi) (Quit: WeeChat 3.2)
[23:23:35] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 268 seconds)
[23:24:12] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[23:25:27] *** Joins: draeath (~draeath@user/draeath)
[23:25:33] *** Quits: zeenk (~zeenk@188.26.30.39) (Ping timeout: 268 seconds)
[23:27:20] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[23:27:49] *** Joins: vlm (~vlm@user/vlm)
[23:28:57] *** Joins: Schnouki (~schnouki@user/schnouki)
[23:29:44] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Remote host closed the connection)
[23:31:34] *** Joins: {HD} (~{HD}@37.19.197.211)
[23:31:43] *** Quits: ______GOD______ (~GOD@187.155.149.127) (Ping timeout: 268 seconds)
[23:32:51] *** Joins: SebastianM (~seba@user/sebastianm)
[23:32:58] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[23:35:04] *** Quits: HighlyCurious (~HighlyCur@2600:1700:38d0:8250:e570:3d0d:9539:d73a) (Quit: Client closed)
[23:35:10] *** Quits: browniebroke (uid501792@id-501792.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:36:32] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 268 seconds)
[23:36:33] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[23:38:08] *** Joins: RoadRunner (~kvirc@S010600fc8db51093.vc.shawcable.net)
[23:38:14] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Ping timeout: 252 seconds)
[23:39:50] *** Joins: chha (~chhs@user/chha)
[23:39:54] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[23:40:08] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[23:40:12] *** Quits: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) (Quit: Leaving.)
[23:41:02] <RoadRunner> why does PyCharm have to index all files in my home dir? It takes an app a long time to get ready because of it. Is there a way to turn this indexing off?
[23:41:21] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Ping timeout: 272 seconds)
[23:44:52] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi)
[23:45:16] *** Parts: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi) ()
[23:45:34] *** Joins: emilrwx (~emilrwx@dsl-tkubng12-54f955-62.dhcp.inet.fi)
[23:48:03] *** Joins: fcjsx (~fcjsx@2800:a4:819:a100:a017:5639:4f5f:dbb2)
[23:48:33] *** Quits: fcjsx (~fcjsx@2800:a4:819:a100:a017:5639:4f5f:dbb2) (Client Quit)
[23:49:30] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Ping timeout: 264 seconds)
[23:50:05] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[23:50:14] *** Joins: kickingvegas (~cchoi@c-24-130-175-68.hsd1.ca.comcast.net)
[23:53:10] *** Quits: greedom (~greedom@2001:16b8:326f:5100:6427:5e2c:e3c4:ff7a) (Remote host closed the connection)
[23:53:22] *** Joins: geli (~gelignite@55d463ac.access.ecotel.net)
[23:53:36] *** Quits: vrt3 (~vrt3@d54C5733D.access.telenet.be) (Quit: Leaving)
[23:53:55] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[23:54:52] *** Joins: ntdll_ (~ntdll@user/ntdll)
[23:55:01] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 244 seconds)
[23:55:10] *** Joins: greedom (~greedom@2001:16b8:326f:5100:6427:5e2c:e3c4:ff7a)
[23:56:06] *** Quits: magla (~gelignite@55d4d6c1.access.ecotel.net) (Ping timeout: 264 seconds)
[23:56:40] *** Quits: mickey (~user@user/mickey) (Ping timeout: 252 seconds)
[23:56:44] *** Quits: lazypeon (~lazypeon@www.ezid.rs) (Quit: Leaving.)
[23:57:21] <grym> running projects out of ~ seems like an odd choice
[23:58:15] *** Quits: GiLgAmEzH (~gilgamezh@186.19.69.139) (Ping timeout: 268 seconds)
[23:58:19] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
