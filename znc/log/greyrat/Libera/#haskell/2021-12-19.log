[00:02:09] *** Joins: notzmv (~zmv@user/notzmv)
[00:03:07] <EvanR> so if I had, let's say, a big Data.Map which will not change. Then use Data.Compact to get the compact version of it. Then I want to union in additional smaller maps that don't overlap with the big map... can I just do it and it will utilize the compact region?
[00:03:35] <EvanR> or would it be better to hold two maps, the small dynamic ones and the large compact one and manually check both
[00:03:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[00:06:02] <EvanR> I'm thinking merging a compact map and a non compact map may begin to copy stuff out of the compact region and defeat the purpose
[00:07:21] <geekosaur> I think that'd only copy the spine out, keys and values would stay put as long as there's no overlap?
[00:07:36] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[00:08:58] <EvanR> if keys and values are small, wouldn't the spine constitute a big % of the space
[00:09:38] <geekosaur> yes, but they'd both have to be pretty small
[00:10:01] <geekosaur> bad idea for Map Int Int, less so for Map String String
[00:10:04] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[00:10:35] <EvanR> or IntMap BasicADTWithAFewInts
[00:10:41] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[00:11:24] <EvanR> that the keys and values stay in the compact region is good
[00:11:46] <geekosaur> IntMap probably breaks that since it'd be possible to UNPACK the keys into the spine
[00:11:49] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[00:11:52] <EvanR> oof
[00:12:24] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Remote host closed the connection)
[00:12:57] * EvanR hmms
[00:13:47] <EvanR> i will stop premature optimizing for now
[00:13:51] *** Joins: cosimone (~user@93-34-133-159.ip49.fastwebnet.it)
[00:14:31] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[00:17:15] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[00:21:12] *** Joins: pavonia (~user@user/siracusa)
[00:22:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:22:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:22:32] *** Joins: wroathe (~wroathe@user/wroathe)
[00:22:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[00:24:02] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:24:02] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:25:40] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:25:41] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:28:20] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[00:28:48] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:28:49] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:29:26] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:29:26] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:29:41] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[00:30:09] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:30:10] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:30:25] <__monty__> Hmm, I use Criterion to benchmark my Advent of Code solutions and yesterday's assignement is throwing me for a loop. The benchmark errors out on me with "Too many open files." What's the usual fix for this? Am I accidentally using lazy IO and the file's not clos... Yep, that was it (file not closing not sure it's actually lazy IO), wasn't parsing until eof >.<
[00:30:37] <__monty__> Thanks for rubber ducking! <3
[00:31:17] *** Quits: jonathanx (~jonathan@94.234.53.6) (Ping timeout: 240 seconds)
[00:31:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:32:18] *** Quits: Alex_test (~al_test@178.34.163.82) (Ping timeout: 256 seconds)
[00:32:47] <xb0o2> You're welcome... to where do we send the invoice?
[00:32:51] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:32:52] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:33:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:33:08] <c_wraith> __monty__: benchmarking is better when it doesn't include the file IO anyway.  You'd probably get more actionable results if you read the input first and then passed it to all the test cases
[00:33:36] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:33:37] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:33:37] *** Quits: AlexZenon (~alzenon@178.34.163.82) (Ping timeout: 240 seconds)
[00:34:31] <__monty__> c_wraith: I know these numbers aren't very meaningful. (I don't even bother making sure the load on my machine isn't already high before running them.) It's just the number I want to know : )
[00:34:47] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:36:17] *** Joins: Alex_test (~al_test@178.34.163.82)
[00:36:54] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: closed)
[00:37:05] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[00:37:08] *** Joins: neurocyte0132889 (~neurocyte@94.46.66.157)
[00:37:08] *** Quits: neurocyte0132889 (~neurocyte@94.46.66.157) (Changing host)
[00:37:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:39:03] *** Joins: AlexZenon (~alzenon@178.34.163.82)
[00:40:55] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[00:41:30] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[00:41:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 245 seconds)
[00:47:20] *** Joins: acidjnk (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de)
[00:47:45] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[00:48:07] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[00:48:59] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:49:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[00:49:39] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[00:49:57] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:53:30] *** Quits: cosimone (~user@93-34-133-159.ip49.fastwebnet.it) (Remote host closed the connection)
[00:54:24] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[00:57:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[01:04:36] *** Quits: benin (~benin@183.82.27.121) (Ping timeout: 256 seconds)
[01:07:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:10:56] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[01:11:07] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[01:13:57] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:13:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:13:57] *** Joins: wroathe (~wroathe@user/wroathe)
[01:14:20] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:16:41] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[01:18:56] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[01:19:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[01:23:18] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[01:26:06] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:28:10] *** Joins: benin (~benin@183.82.27.121)
[01:42:30] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 260 seconds)
[01:44:50] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[01:45:38] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:47:09] *** Joins: xsperry (~xs@user/xsperry)
[01:48:10] *** Joins: son0p (~ff@181.136.122.143)
[01:48:27] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[01:49:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758)
[01:54:31] <dmj`> xb0o2: lol
[01:59:57] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[02:02:09] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Quit: ZNC 1.8.2+cygwin2 - https://znc.in)
[02:02:52] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[02:04:12] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Quit: coot)
[02:05:48] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:08:23] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[02:16:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:17:44] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[02:18:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:18:25] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:18:26] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[02:18:38] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:21:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:30:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758) (Remote host closed the connection)
[02:40:21] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:40:22] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[02:42:47] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:48:58] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:49:03] <zero> can someone help me understand where I should put my class constraints when i use forall.?
[02:49:36] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[02:49:57] <zero> frequencies :: (Foldable f, Ord a) => forall a. f a -> Map a Int  -- does this make sense?
[02:49:57] <EvanR> forall usually goes all the way to the right
[02:50:04] <EvanR> ~~~~~~
[02:50:06] <EvanR> to the left
[02:50:22] <EvanR> forall is only somewhere in the middle when doing RankN types
[02:50:33] <hpc> the way to remember is forall brings things into scope
[02:50:43] *** Joins: zaquest (~notzaques@5.130.79.72)
[02:50:57] <hpc> it's like writing "x \x -> stuff"
[02:51:24] <EvanR> forall f a . (Foldable f, Ord a) => f a -> Map a Int
[02:52:10] <zero> fair enough. and we need the f beacause we lost the implicit quantification, right?
[02:53:04] <EvanR> if you're doing ScopedTypeVariables you have to name them all
[02:53:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:53:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:53:04] *** Joins: wroathe (~wroathe@user/wroathe)
[02:53:31] <EvanR> unless they we're already introduced by an enclosing forall
[02:54:06] <EvanR> name em all or name none
[02:55:38] <monochrom> One forall to bind them all. :)
[02:55:47] <dsal> I did the "number my tree" thing for last night's thing using traverse in a State monad and was trying to see if I could do something fancier with partsOf/biplate, but all attempts are worse.
[02:55:54] <dsal> I need to just get around to learning how to make a zipper.
[02:57:16] <EvanR> numbers...
[02:57:50] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[02:58:29] <dsal> This is not actually that bad:  `number = flip evalState 0 . traverse (\x -> (,x) <$> (id <+= 1))`
[02:58:32] <dsal> but the solution kind of sucks.
[03:02:49] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[03:03:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:09:57] *** Quits: acidjnk (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:14:59] *** Quits: max22- (~maxime@2a01cb088335980062ccec88c4c3abad.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:16:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:17:01] *** Quits: Jing_ (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[03:17:34] *** Joins: Jing (~hedgehog@2604:a840:3::103e)
[03:19:52] *** Quits: snake (~snake@user/snake) (Quit: Quitting)
[03:22:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[03:22:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 245 seconds)
[03:22:57] *** Quits: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de) (Quit: WeeChat 3.3)
[03:25:14] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[03:25:53] *** Joins: snake (~snake@user/snake)
[03:30:28] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[03:32:36] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[03:33:46] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:35:49] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[03:36:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:38:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:39:57] *** jpds1 is now known as jpds
[03:40:53] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:43:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Remote host closed the connection)
[03:49:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[03:49:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:50:17] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[03:50:52] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[03:54:08] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[03:54:27] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 268 seconds)
[03:54:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[03:57:38] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:57:55] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[03:58:51] *** Quits: vincenz (~poucet@104.134.21.7) (Remote host closed the connection)
[04:02:15] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[04:03:49] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1941:a480:a6d8:8bc5)
[04:22:19] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[04:22:32] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:26:15] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[04:27:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 245 seconds)
[04:28:12] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[04:29:35] *** Joins: img (~img@user/img)
[04:34:12] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::745c)
[04:36:01] *** Joins: kranius (~kranius@222.186.245.213.rev.sfr.net)
[04:36:29] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[04:39:47] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[04:41:33] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:45:16] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:45:51] *** Parts: delYsid (~user@84-115-55-45.cable.dynamic.surfer.at) (ERC (IRC client for Emacs 27.1.50))
[04:47:11] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:47:17] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[04:47:40] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:55] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[04:56:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[05:01:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[05:02:15] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[05:02:38] <Inst> hello
[05:02:54] <Inst> can you help me out? I need to know how to call ghci so :set +s is set previously, without messing with the .conf file
[05:04:53] <geekosaur> is adding another conf file acceptable? -ghci-script
[05:06:00] *** Quits: kranius (~kranius@222.186.245.213.rev.sfr.net) (Ping timeout: 256 seconds)
[05:06:22] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1941:a480:a6d8:8bc5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:06:32] <koz> How does one create a literal value of type Word#?
[05:07:01] <geekosaur> % :set -XMagicHash
[05:07:02] <yahb> geekosaur: 
[05:07:08] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:07:08] <geekosaur> :t 8#
[05:07:09] <lambdabot> GHC.Prim.Int#
[05:07:12] <koz> Oh, nice.
[05:07:14] <geekosaur> hm
[05:07:24] <geekosaur> not quite though, it's Int# not Word#
[05:07:34] <geekosaur> :t 8##
[05:07:35] <lambdabot> GHC.Prim.Word#
[05:07:41] <geekosaur> there we go
[05:07:51] <koz> If in doubt, sprinkle on more magic hashes.
[05:08:51] <zero> :t 8###
[05:08:52] <lambdabot> error:
[05:08:52] <lambdabot>     parse error (possibly incorrect indentation or mismatched brackets)
[05:08:59] * zero shrugs
[05:09:34] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[05:10:19] <geekosaur> oh, heh, intended to send those to yahb. didn't know lambdabot did MagicHash
[05:11:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[05:13:01] * geekosaur wonders how this works in 9.2, where everything is sized
[05:13:24] <geekosaur> mm, think it's 8##8 etc.
[05:13:41] <zero> nice
[05:18:45] <hpc> ghc should accept MuggleHash as a synonym for NoMagicHash :D
[05:19:16] <koz> Also, does eqWord8# give 0## if mismatch, 1## if match?
[05:19:29] <koz> 0# and 1# I mean.
[05:20:55] <geekosaur> % eqWord8 (W8# 8##) (W8# 9##)
[05:20:56] <yahb> geekosaur: False
[05:21:08] <geekosaur> oh wait
[05:21:13] <geekosaur> % eqWord8# (W8# 8##) (W8# 9##)
[05:21:13] <yahb> geekosaur: ; <interactive>:188:11: error:; * Couldn't match expected type `Word8#' with actual type `Word8'; * In the first argument of `eqWord8#', namely `(W8# 8##)'; In the expression: eqWord8# (W8# 8##) (W8# 9##); In an equation for `it': it = eqWord8# (W8# 8##) (W8# 9##); <interactive>:188:21: error:; * Couldn't match expected type `Word8#' with actual type `Word8'; * In the second a
[05:21:37] <geekosaur> % eqWord8# 8## 9##
[05:21:38] <yahb> geekosaur: ; <interactive>:189:10: error:; * Couldn't match expected type `Word8#' with actual type `Word#'; * In the first argument of `eqWord8#', namely `8##'; In the expression: eqWord8# 8## 9##; In an equation for `it': it = eqWord8# 8## 9##; <interactive>:189:14: error:; * Couldn't match expected type `Word8#' with actual type `Word#'; * In the second argument of `eqWord8#', namely 
[05:21:53] <geekosaur> % eqWord8# 8##8 9##8
[05:21:53] <yahb> geekosaur: ; <interactive>:190:1: error:; * Couldn't match expected type `Word# -> t0 -> t' with actual type `Int#'; * The function `eqWord8#' is applied to four value arguments, but its type `Word8# -> Word8# -> Int#' has only two; In the expression: eqWord8# 8## 8 9## 8; In an equation for `it': it = eqWord8# 8## 8 9## 8; * Relevant bindings include it :: t (bound at <interactive>:190:1)
[05:21:59] <geekosaur> blegh
[05:22:20] <geekosaur> :t eqWord8#
[05:22:21] <lambdabot> error: Variable not in scope: eqWord8#
[05:22:26] <geekosaur> % :t eqWord8#
[05:22:26] <yahb> geekosaur: Word8# -> Word8# -> Int#
[05:25:51] *** Quits: mmhat (~mmh@55d47734.access.ecotel.net) (Quit: WeeChat 3.3)
[05:29:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[05:34:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:34:38] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[05:37:04] <hololeap> Word8##4#8#9#INT#*69
[05:37:56] <geekosaur> yeh I have no idea how you get a Wird8# literal, at least in 9.0.1
[05:39:37] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:8490:5949:caf8:c808) (Ping timeout: 240 seconds)
[05:39:42] *** Joins: pfurla_ (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974)
[05:42:36] <hololeap> reminds me what I used to see as a kid when I would telnet over dialup
[05:45:50] <EvanR> if you'd like to speak to a GHC prims representative press #
[05:51:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:58:48] <hololeap> holy crap, some of these still have phone numbers: https://www.telnetbbsguide.com/connection/dial-up/
[06:01:56] * geekosaur wonders if ncoast is still around
[06:01:59] *** Joins: ub (~Thunderbi@p200300ecdf0a5d10d9ff0243dc33f2a7.dip0.t-ipconnect.de)
[06:02:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:03:11] <geekosaur> huh, I get both an ip4 and a SERVFAIL
[06:03:22] *** Quits: ubert (~Thunderbi@p200300ecdf0a5d68805dbf0fab6de770.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:03:22] *** ub is now known as ubert
[06:07:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[06:08:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[06:09:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:14:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:15:30] *** Quits: benin (~benin@183.82.27.121) (Ping timeout: 260 seconds)
[06:18:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[06:22:13] *** Joins: benin (~benin@183.82.27.121)
[06:25:02] *** Joins: lechner (~lechner@debian/lechner)
[06:27:06] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[06:28:10] *** Quits: xff0x (~xff0x@port-92-195-110-215.dynamic.as20676.net) (Ping timeout: 256 seconds)
[06:30:06] *** Joins: xff0x (~xff0x@2001:1a81:53d2:9000:3d5f:aef0:61ba:f866)
[06:35:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:39:17] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[06:40:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:40:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[06:43:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:44:05] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[06:44:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:45:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:46:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:47:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:47:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:48:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:49:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:50:50] *** Quits: td_ (~td@94.134.91.199) (Ping timeout: 256 seconds)
[06:50:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:51:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:52:39] *** Joins: td_ (~td@muedsl-82-207-238-128.citykom.de)
[06:53:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:53:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:55:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:55:42] *** Joins: Sobhan (~Sobhan@modemcable039.128-131-66.mc.videotron.ca)
[06:55:44] <Sobhan> Hi
[06:55:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:57:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:57:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[06:59:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[06:59:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:01:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:01:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:02:53] <Sobhan> what would be the equivalent of a short circuiting fold over infinite lists for monads? right now i'm using this monstrosity ```haskell
[07:02:53] <Sobhan> tW :: Monad m => (t -> a -> (Bool, t)) -> t -> m a -> m t
[07:02:54] <Sobhan> tW f acc mo = do { a <- mo;  let (b, acc1) = f acc a in if b then return acc1 else tW f acc1 mo}
[07:02:54] <Sobhan> ```
[07:03:23] <Sobhan> where f both has the termination condition and some sort of accumulator
[07:03:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:04:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:04:59] <hololeap> Sobhan: you could use `MaybeT (State s) ()` then use mapM_
[07:05:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:06:11] <hololeap> you'll end up with (Nothing,s) when you short circuit by calling `empty`, with `s' as its most recent state
[07:06:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[07:07:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:08:19] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:08:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[07:09:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:10:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:11:12] <Inst> also, quick question
[07:11:21] <Inst> is there a way to save your edits in GHCi?
[07:11:37] <Inst> there's :load to load modules, but not necessarily :save to save your history
[07:11:40] <Inst> and how do you delete old lines?
[07:12:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:13:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:13:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[07:14:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:15:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:15:58] <hololeap> Inst, not sure but I see ~/.ghc/ghci_history
[07:16:08] <hololeap> maybe you can just manipulate that directly
[07:16:14] <Inst> why must I do this?
[07:16:24] <Inst> this is dumb, I hear there's complaints about Haskell tooling being terrible
[07:16:37] *** Joins: ssray (~textual@2601:c2:97f:4590:61ac:5742:1693:b1c2)
[07:16:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:16:50] <hololeap> haha I'm literally one person who is giving you a partial answer and being totally honest about it
[07:17:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:17:20] <hololeap> because I don't know the full answer
[07:18:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:19:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:19:40] <hololeap> Sobhan: for instance this: http://sprunge.us/wf9Sec
[07:20:37] <hololeap> MaybeT is underrated
[07:20:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:21:45] <hololeap> oh, that should be `put t'` ... forgot the ' hehe
[07:21:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:22:17] <hololeap> although I don't think the `t' is in scope there so it wouldn't compile instead of giving you the incorrect result
[07:22:51] *** Parts: ssray (~textual@2601:c2:97f:4590:61ac:5742:1693:b1c2) (Textual IRC Client: www.textualapp.com)
[07:22:58] <Sobhan> hololeap that's neat, thanks!
[07:23:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:23:49] <hololeap> np, although it's bound to be buggy because I didn't test it
[07:23:59] <hololeap> I hope I communicated the idea, though
[07:24:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:26:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:26:18] *** Joins: BrokenClutch (~pioneer@2804:d41:c251:8e00:2f95:d3cd:d94f:7520)
[07:27:08] <BrokenClutch> Uh. Is the STRef truly mutable? Like, it correspond to the same address after the change of value?
[07:28:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:28:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:29:29] *** Joins: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com)
[07:29:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:30:07] *** Quits: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com) (Client Quit)
[07:30:08] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:30:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:30:08] *** Joins: wroathe (~wroathe@user/wroathe)
[07:30:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:32:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:33:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:34:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:35:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:37:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:37:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:39:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:40:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:41:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[07:41:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:42:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:43:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:44:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:44:26] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 252 seconds)
[07:44:38] *** Quits: xff0x (~xff0x@2001:1a81:53d2:9000:3d5f:aef0:61ba:f866) (Ping timeout: 260 seconds)
[07:44:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:44:59] *** Joins: yaroot (~yaroot@175.0.30.125.dy.iij4u.or.jp)
[07:45:17] *** Joins: xff0x (~xff0x@2001:1a81:53d2:9000:1181:abfc:439c:19e)
[07:46:04] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[07:46:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:46:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::745c) (Ping timeout: 240 seconds)
[07:47:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:48:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[07:48:44] *** Quits: koz (~koz@121.99.240.58) (Quit: ZNC 1.7.5 - https://znc.in)
[07:48:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[07:48:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:50:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:50:33] *** Joins: koz (~Srain@2404:4408:436c:a700:6891:399a:2191:3ae0)
[07:51:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:52:08] *** Joins: koz_ (~koz@2404:4408:436c:a700:6891:399a:2191:3ae0)
[07:53:04] *** Quits: koz (~Srain@2404:4408:436c:a700:6891:399a:2191:3ae0) (Remote host closed the connection)
[07:53:10] *** koz_ is now known as koz
[07:53:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[07:55:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[07:56:31] *** Quits: koz (~koz@2404:4408:436c:a700:6891:399a:2191:3ae0) (Client Quit)
[07:57:24] *** Joins: koz (~koz@2404:4408:436c:a700:6891:399a:2191:3ae0)
[07:57:56] <EvanR> BrokenClutch, you don't change the STRef
[07:58:04] <EvanR> you change whatever it refers to
[07:58:15] <EvanR> same as IORef
[08:00:31] <BrokenClutch> yeah, but when i change what's referred
[08:00:50] <EvanR> like you have a box, and you swap out what's in the box, same box
[08:00:51] <BrokenClutch> what's going inside? Am I allocating new memory?
[08:01:18] <EvanR> good question, what are you putting in
[08:01:28] <BrokenClutch> Int
[08:01:56] *** Quits: kaizen (sid501599@id-501599.helmsley.irccloud.com) ()
[08:02:28] <EvanR> if you have an Int, you put it in the box
[08:02:41] <EvanR> that's not a memory allocation
[08:03:37] <EvanR> (though the Int may actually be a big lazy computation that, when forced, uses a bunch of memory to get the value)
[08:05:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:05:13] <BrokenClutch> So, it would not be evaluated because the language is lazy? But where's stored the data? It's faster to use a STRef or a StateT on a more demanding algorithm?
[08:07:13] <EvanR> stuff is lazy by default, you can choose to (and probably should) evaluate the Int upon storing it
[08:07:27] <EvanR> or some time prior if it's convenient
[08:08:26] <monochrom> It is more nuanced than "am I allocating new memory or not".
[08:08:51] <monochrom> I can answer "no" but it is a very narrow answer.
[08:09:09] <monochrom> An STRef always refers to a heap object.
[08:09:22] <monochrom> A heap object always came from allocation.
[08:09:57] <monochrom> But it doesn't always mean "new". Perhaps the heap object was already created long ago. Or perhaps it is created just now.
[08:09:57] <EvanR> I should have said "but that's a big If" after "if you have an Int" xD
[08:10:14] <monochrom> Yeah.
[08:10:17] <EvanR> doing the equivalent of x = x + 1 is still going to spawn a new Int
[08:11:08] <monochrom> So suppose you have "f x = ... writeSTRef myref x ...".  Well someone else had to create a heap object and pass it as x to you.  You are sharing that heap object.
[08:11:10] <BrokenClutch> And I'm reading that the GHC sometimes uses equivalents thunks to avoid a repetition of a computation
[08:11:49] <monochrom> But suppose you have "writeSTRef myref (3+4+5)" well that's a new heap object to store (3+4+5) right there.
[08:11:50] <BrokenClutch> monochrom: is there a form to check the address of the allocation?
[08:11:58] <monochrom> No.
[08:12:47] <EvanR> this line of questioning doesn't seem on the right track
[08:12:47] <monochrom> Err 3+4+5 is a bad example since the whole program lifetime just needs one copy of it and share it.
[08:12:51] <BrokenClutch> man, strict imperative programming made me lazy (haha, joke)
[08:13:11] <EvanR> if your concerned about memory allocations, addresses aren't where to look
[08:13:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:13:16] <monochrom> "writeSTRef myref (x+y+z)" is a better example, if x, y, z is dfferent every time.
[08:13:26] <EvanR> heap objects move around 
[08:14:07] <BrokenClutch> by the OS?
[08:14:12] <monochrom> x::Int is also a heap object to support both laziness and polymorphism.
[08:14:32] <EvanR> the garbage collector moves things
[08:14:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:15:04] <BrokenClutch> even after the first move from nursery?
[08:15:11] <EvanR> sure
[08:15:17] <monochrom> "STRef a" would too hard and error-prone to implement if "sometimes it stores data, some other times it stores pointer to data".
[08:15:21] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[08:15:21] <EvanR> heap compaction etc
[08:15:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:16:02] <BrokenClutch> I think i've got it
[08:16:05] <EvanR> certain things can be pinned and won't move
[08:16:15] <EvanR> for optimization purposes or FFI
[08:16:16] <monochrom> But why should you care?
[08:16:30] <monochrom> If you're wondering about speed, you can always benchmark.
[08:16:38] <BrokenClutch> I'm just curious
[08:17:06] <monochrom> But some of us have already done similar benchmarks.  A recursive Int function is faster than using STRef Int.
[08:17:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:17:33] <BrokenClutch> I was comparing with how C/C++ and rust with Haskell (and Scheme) handles this kind of stuff
[08:18:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:18:24] <monochrom> Compiler optimizations can put that Int in a register for the recursive Int function. But it will not optimize the STRef away.  You end up perpetual indirection.
[08:18:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:18:37] <BrokenClutch> monochrom: The garbage collector do some impressive stuff, It's like it knows what I'm doing better than myself
[08:18:53] <monochrom> Yes.
[08:19:35] <monochrom> Both GHC and GCC perform code optimizations that 1st-year CS students, even some 4th-year students, haven't thought of.
[08:19:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:19:50] <monochrom> Most programmers' "bare metal" models are wrong.
[08:20:06] <BrokenClutch> So I should be more careful and test more when working with those kind of stuff with haskell. It can be predicted very well. Am I right?
[08:20:21] <BrokenClutch> It can't be predicted*
[08:20:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:21:14] <monochrom> It takes half a year to learn what the compiler actually does. This is true of both Haskell and C. As said, a lot of people get C wrong, too.
[08:21:24] <monochrom> Until then, shut up and benchmark.
[08:21:47] <BrokenClutch> You all were very helpful, many thanks
[08:22:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:22:15] *** Joins: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com)
[08:22:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:23:07] <int-e> monochrom: don't stop benchmarking :)
[08:23:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[08:23:23] <monochrom> Yeah.
[08:23:50] <monochrom> Code optimizers are also pretty fragile. You change a little thing that you think shouldn't matter, oh but it does.
[08:24:20] <monochrom> They will always surprise you both ways once in a while. Make faster code than you expect. Then make slower code than you expect.
[08:24:21] <EvanR> I make sure all my variables names are 1 letter and close to the beginning of the alphabet for extra speed
[08:24:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:24:50] <EvanR> like a pro
[08:25:03] <int-e> one poorly chosen loop breaker, one unfortunate inlining decision... that can make a huge difference sometimes
[08:25:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:25:47] <int-e> So I guess it's because I know a bit of what the compiler does that I keep benchmarking ;)
[08:26:12] <BrokenClutch> gonna foreign import malloc, me smart boi.
[08:26:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[08:27:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[08:27:45] <EvanR> you don't have to, that's in the FFI 
[08:28:16] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 268 seconds)
[08:28:23] <EvanR> you even get nice brackets to clean up pointers when you're done
[08:28:28] <EvanR> Ptr a
[08:28:38] <monochrom> Yeah, Foreign.Marshal.Alloc's malloc is already C's malloc. It is guaranteed.
[08:28:47] <monochrom> But I also recongize that you were just joking.
[08:30:12] <BrokenClutch> monochrom: Didn't know that
[08:30:26] <BrokenClutch> Thank you all for the help. It's 2AM here, gonna sleep
[08:30:32] <BrokenClutch> goodnight
[08:31:54] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[08:34:05] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[08:35:46] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Client Quit)
[08:36:45] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::745c)
[08:39:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[08:43:19] *** Parts: BrokenClutch (~pioneer@2804:d41:c251:8e00:2f95:d3cd:d94f:7520) ()
[08:43:32] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:44:55] *** Joins: img (~img@user/img)
[08:53:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:53:55] *** Joins: marperia (~marperia@176.59.129.201)
[08:55:10] *** Quits: marperia (~marperia@176.59.129.201) (Remote host closed the connection)
[08:56:18] *** Joins: marperia (~marperia@176.59.129.201)
[08:58:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[08:58:29] *** Quits: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[09:03:43] *** Joins: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com)
[09:05:00] *** Quits: marperia (~marperia@176.59.129.201) (Quit: Client closed)
[09:06:54] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:17:57] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 240 seconds)
[09:20:33] *** Quits: koz (~koz@2404:4408:436c:a700:6891:399a:2191:3ae0) (Quit: koz)
[09:23:07] *** Joins: exbios (~exbios@fixed-189-203-104-178.totalplay.net)
[09:24:12] *** Quits: exbios (~exbios@fixed-189-203-104-178.totalplay.net) (Quit: -a- IRC for Android 2.1.59)
[09:27:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[09:27:44] *** Joins: Topsi (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de)
[09:33:00] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:34:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[09:38:04] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[09:40:59] *** Joins: koz_ (~koz@2404:4408:436c:a700:6891:399a:2191:3ae0)
[09:44:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:45:58] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 260 seconds)
[09:46:38] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[09:51:48] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[09:52:56] *** Joins: rembo10 (~rembo10@remulis.com)
[09:59:20] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[10:03:09] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[10:03:16] *** Joins: juhp (~juhp@128.106.188.82)
[10:03:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[10:05:22] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:05:49] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[10:08:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 260 seconds)
[10:14:37] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 240 seconds)
[10:17:44] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[10:24:01] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[10:26:12] *** Joins: puke (~puke@user/puke)
[10:30:41] *** Joins: jonathanx (~jonathan@c-5eea3547-74736162.cust.telenor.se)
[10:32:29] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:34:04] *** Joins: Akiva (~Akiva@user/Akiva)
[10:34:27] *** Joins: nautical (~nautical@2601:602:900:1630::97df)
[10:35:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:36:22] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[10:37:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[10:38:55] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:39:20] *** Quits: nautical (~nautical@2601:602:900:1630::97df) (Client Quit)
[10:42:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[10:43:57] *** Quits: gentauro_ (~gentauro@185.107.12.141) (Quit: leaving)
[10:44:17] *** Joins: gentauro_ (~gentauro@185.107.12.141)
[10:45:08] *** Quits: gentauro (~gentauro@user/gentauro) (Remote host closed the connection)
[10:45:30] *** Quits: gentauro_ (~gentauro@185.107.12.141) (Remote host closed the connection)
[10:50:16] *** Joins: knudLeopold (~knudLeopo@187.168.218.49)
[10:50:37] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[10:52:12] *** Joins: gentauro (~gentauro@user/gentauro)
[10:53:14] *** Quits: knudLeopold (~knudLeopo@187.168.218.49) (Client Quit)
[10:56:45] *** Joins: knudLeopold (~knudLeopo@187.168.218.49)
[11:05:17] *** Quits: knudLeopold (~knudLeopo@187.168.218.49) (Quit: Leaving)
[11:06:09] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:98ca:4368:fd5e:1ee0)
[11:08:44] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:09:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:12:55] <Inst_> how's whatsupdoc been doing?
[11:13:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:14:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[11:17:02] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[11:17:56] *** Quits: m4lvin (~m4lvin@w4eg.de) (Quit: m4lvin)
[11:18:19] *** Joins: snek` (~user@88.160.31.174)
[11:18:24] *** Joins: m4lvin (~m4lvin@w4eg.de)
[11:18:42] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[11:18:43] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[11:19:13] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: closed)
[11:19:18] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[11:19:41] *** Quits: snek` (~user@88.160.31.174) (Remote host closed the connection)
[11:19:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 260 seconds)
[11:21:22] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[11:22:33] *** Quits: puke (~puke@user/puke) (Quit: puke)
[11:24:33] *** Joins: puke (~puke@user/puke)
[11:29:04] *** Quits: jonathanx (~jonathan@c-5eea3547-74736162.cust.telenor.se) (Ping timeout: 256 seconds)
[11:30:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:32:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[11:34:42] *** Joins: fef (~thedawn@user/thedawn)
[11:34:56] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[11:34:58] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:36:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:41:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[11:42:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::745c) (Ping timeout: 240 seconds)
[11:43:36] *** Joins: acidjnk (~acidjnk@p200300d0c7271e774586c8f7f876c3d9.dip0.t-ipconnect.de)
[11:46:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:47:58] *** Quits: pfurla_ (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974) (Quit: gone to sleep. ZZZzzz…)
[11:50:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[11:50:36] *** Joins: thevishy (~Nishant@2405:201:f005:c007:851a:8f84:501c:8bd1)
[11:54:34] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[11:54:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[11:55:55] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:56:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:59:57] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 240 seconds)
[12:13:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:13:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:13:46] *** Joins: wroathe (~wroathe@user/wroathe)
[12:18:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:22:17] *** Joins: python476 (~user@88.160.31.174)
[12:24:04] *** Joins: max22- (~maxime@2a01cb08833598005fdfc488429f8659.ipv6.abo.wanadoo.fr)
[12:25:57] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[12:26:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[12:26:21] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[12:30:08] *** Quits: asdofindia-m (~akshaymat@2001:470:69fc:105::831) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (Quit: You have been kicked for being idle)
[12:30:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:30:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:31:34] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[12:31:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[12:32:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:32:21] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:32:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Remote host closed the connection)
[12:32:42] *** Joins: cosimone (~user@93-44-185-127.ip98.fastwebnet.it)
[12:32:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:33:24] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[12:34:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:34:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:36:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:36:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[12:36:54] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[12:37:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:37:41] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[12:38:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:39:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:39:16] *** Quits: tubogram (~tubogram@user/tubogram) (Quit: See ya later!)
[12:39:18] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[12:40:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:41:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:41:24] *** Joins: tubogram4 (~tubogram@user/tubogram)
[12:42:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:42:52] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:43:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:44:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:45:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:46:50] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:46:55] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:47:35] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:47:57] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:48:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:49:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:49:23] *** Quits: tubogram4 (~tubogram@user/tubogram) (Quit: See ya later!)
[12:49:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:51:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:51:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:52:11] *** Joins: tubogram4 (~tubogram@user/tubogram)
[12:53:07] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:53:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:53:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[12:55:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:55:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:57:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[12:57:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[12:58:25] <int-e> > unwords $ map (\x -> printf "%.2f" (191-x/38)) [7139,7120,7058,6994,6901,6859,6800,6750,6681,6538] -- tired of waiting
[12:58:27] <lambdabot>  "3.13 3.63 5.26 6.95 9.39 10.50 12.05 13.37 15.18 18.95"
[12:58:28] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:59:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:00:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:01:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:02:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:03:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:04:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:05:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:06:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:06:26] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:07:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:07:57] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:08:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:10:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:10:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:11:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[13:12:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:12:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:14:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:14:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:16:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:17:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[13:18:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:19:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:20:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:21:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:23:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:23:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:24:19] <pavonia> int-e: This is at least the third time I see you posting this calculation here. What is this?
[13:24:38] <Athas> So this thing about 'cabal install' ignoring anything that 'cabal build' did and just rebuilding from scratch... is there a way to make it not do that?
[13:25:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:25:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:27:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:27:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:27:56] <int-e> pavonia: It's taking glguy's Advent of Code leader board, and computing average rank for all the stars so far for the top 10. It's a silly thing, it'll stop after the 25th :)
[13:28:21] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[13:28:54] <pavonia> I see
[13:29:18] <int-e> (the numbers are: 191: number of participants, plus 1; 38: number of stars so far; 7139 etc.: points on the board)
[13:29:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:29:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[13:29:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[13:29:34] *** Joins: wroathe (~wroathe@user/wroathe)
[13:29:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:30:22] <hololeap> why does it matter? (legit question)
[13:31:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:31:29] <hololeap> or I suppose the proper question is why does it matter to you int-e ?
[13:32:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:32:40] <hololeap> Inst_: the last time they said anything was nov 4, according to my logs
[13:32:53] <[exa]> Athas: incompatible install environment perhaps? (guessing)
[13:32:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[13:33:18] *** Joins: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com)
[13:33:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:34:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:34:12] <int-e> hololeap: it's entertaining
[13:34:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[13:35:17] <hololeap> I just don't understand what the metric tells us
[13:35:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:36:15] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:36:29] <int-e> you can put these numbers in relation with the best conceivable average, which is 1
[13:36:30] <[exa]> pls share the entertaining factor
[13:36:50] <int-e> it's much harder to do that with the scores
[13:37:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Ping timeout: 240 seconds)
[13:37:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:38:20] <hololeap> so if someone was in 1st place for every round they would have an average of 1?
[13:38:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:39:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:40:28] <int-e> yes
[13:40:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:41:14] <hololeap> ok I see. not sure if I find it entertaining, but I understand what it means at least :)
[13:42:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:42:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:43:47] <hololeap> Inst_: [Whois] whatsupdoc is online via molybdenum.libera.chat (Sun Dec 19 07:43:13 2021).
[13:44:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:44:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:46:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:46:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:46:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:48:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:48:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:48:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:50:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:51:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:52:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:53:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:54:43] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[13:54:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:55:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[13:56:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:57:19] *** Joins: gensyst (gensyst@user/gensyst)
[13:57:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[13:59:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[13:59:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:00:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:00:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:00:20] *** Joins: wroathe (~wroathe@user/wroathe)
[14:01:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:01:34] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:01:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:03:27] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:04:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:04:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:05:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:06:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:07:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:08:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:08:37] <gensyst> I have a standard project with a lib and src. The lib has the library, the EDSL. The src has Main.hs, which uses the EDSL. Most heavy lifting takes place from the code of lib.
[14:08:45] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[14:09:28] <gensyst> lib is rarely compiled. Main.hs is compiled over and over again (user of EDSL doing experiments). Therefore: Can I compile the lib part with -O2 and Main.hs with no optimization?
[14:09:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:10:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:11:20] <hololeap> you could with cabal
[14:11:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:12:05] <hololeap> you can set different ghc-options for the library and executable sections
[14:12:08] <Athas> [exa]: from what I can see, 'cabal install' creates an sdist and builds from that, so it looks like its by design.
[14:12:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:13:00] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[14:14:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:14:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:15:20] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:16:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:16:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:18:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:18:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:20:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:20:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:22:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:23:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:23:09] <tomsmeding> Athas: symlink $(cabal list-bin yourprojectname) somewhere in your PATH?
[14:23:55] <tomsmeding> or s/symlink/copy/ as appropriate
[14:24:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:25:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:25:37] <tomsmeding> or $(cabal-plan list-bin yourprojectname) if your cabal is older
[14:25:53] <Athas> tomsmeding: that is very fiddly.  Is that what people normally do?
[14:26:07] <tomsmeding> I wouldn't know :p
[14:26:25] <tomsmeding> it's what _I_ would do, but I'm not usual
[14:26:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:27:02] <int-e> doesn't cabal-install put symlinks to executables into ~/.cabal/bin  by default?
[14:27:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:27:38] <tomsmeding> only after 'cabal install --overwrite-policy=always'
[14:27:44] <gensyst> hololeap, thanks - although in my case Main.hs is currently small and there doesn't seem to be any difference in -O0 and -O2 compilation time. so i guess most of these 5 seconds of compile time is spent in non-optimization parts
[14:27:56] <int-e> . o O ( all those problems that I'll have when I finally switch away from v1 commands )
[14:28:03] <gensyst> (i was hoping for an instantaneous feedback, sort of like in GHCi)
[14:28:18] <gensyst> so why is ghci so fast exactly?
[14:28:20] <tomsmeding> gensyst: type checking feedback, or running feedback?
[14:28:52] <hololeap> gensyst: you might like using ghcid or haskell-language-server for development
[14:28:54] <tomsmeding> also check out 'ghcid' (note: that's not a typo)
[14:28:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:29:13] <tomsmeding> ghcid is basically a hot-reloading ghci
[14:29:21] <gensyst> I mean, compile time.
[14:29:27] <tomsmeding> though it doesn't give you a shell
[14:29:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:29:47] <tomsmeding> gensyst: what about just opening a ghci and doing :r
[14:30:38] <tomsmeding> also try 'runghc Main.hs'
[14:30:38] *** Quits: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03) (Read error: Connection reset by peer)
[14:30:49] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974)
[14:30:51] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:31:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:31:08] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[14:31:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[14:31:08] *** Joins: wroathe (~wroathe@user/wroathe)
[14:31:34] <gensyst> tomsmeding, how do you open a project in ghci? and does it respect -O2 for the library (the EDSL, as I said above)
[14:31:35] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:31:47] <tomsmeding> cabal repl, or stack ghci
[14:32:01] *** Quits: phma (phma@2001:5b0:210f:398:45c4:2d78:79ea:d21b) (Read error: Connection reset by peer)
[14:32:15] <tomsmeding> that will load dependencies as compiled code and the component you're loading as interpreted code
[14:32:27] <tomsmeding> which should thus respect -O2 for the library, if you open the repl on the executable
[14:32:37] <tomsmeding> might need 'cabal repl exe:yourproject' or something
[14:33:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:33:25] *** Joins: phma (phma@2001:5b0:211f:b348:59d8:7cb7:9451:9394)
[14:33:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:33:57] <gensyst> tomsmeding, ok now that is *instantaneous*! :)
[14:34:00] <gensyst> the :r, I mean
[14:34:20] *** Quits: koz_ (~koz@2404:4408:436c:a700:6891:399a:2191:3ae0) (Quit: koz_)
[14:34:35] <tomsmeding> for more ergonomics, ':def R :r' so you can type :R and don't have to release the shift key in-between
[14:34:42] <gensyst> very nice. So this suggests that most of the 5 seconds that "cabal build" needs (when rebuilding Main.hs because only Main.hs has changed), is overhead that GHCi already did when OPENING UP.
[14:34:50] <gensyst> right?
[14:34:58] <gensyst> nice :D
[14:35:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:35:19] <tomsmeding> well it's also that for ghci, it doesn't have to generate machine code
[14:35:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:36:02] <gensyst> tomsmeding, ah. but that shouldn't be a problem if bulk of work is spent by the EDSL (compiled with -O2) right?
[14:36:13] <int-e> Won't `cabal build` create a new install plan every time? So it'll read the *hackage* package database (well, the index)... stuff that ghc(i) don't even care about
[14:36:17] <gensyst> Main.hs (user of EDSL) just calls those heavy routines.
[14:36:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[14:36:40] <int-e> so there's that overhead, and then there's the overhead from compiling to binary code and linking
[14:37:06] <int-e> (ghci has to link too but that uses the highly optimized system's dynamic linker)
[14:37:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:37:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:38:19] <gensyst> int-e yes it's doing all sorts of stuff (including warning me about how i should run "cabal update" ;))
[14:38:29] <gensyst> ok so for interactivitiy, ghci is a MUST
[14:39:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:39:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:40:05] <hololeap> do you know of haskell-language-server? it's really quite nice as it gives you realtime diagnostics as you write code, as long as your client can support it
[14:41:08] <gensyst> hololeap, yeah it's baked into vscode and it's great. however that's for helping me developing. Not exactly about compiling and running Main.hs (many times during the day as I keep changing Main.hs) as fast as possible.
[14:41:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:41:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[14:42:43] <int-e> Yeah I tend to use runhaskell once it type-checks, unless that takes more than a second or two to run.
[14:43:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:43:46] <int-e> (runhaskell is a symlink to runghc)
[14:44:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:44:39] <hololeap> maybe setting up a test that just runs Main and using ghcid to trigger it would be faster than runhaskell
[14:44:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:45:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:46:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:47:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:47:56] *** Joins: Topsi1 (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de)
[14:48:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:48:25] *** Joins: Topsi2 (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de)
[14:48:28] <gensyst> what's the proper way to call runghc for a project (execute Main.hs and respect -O2 for the library)
[14:48:43] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974) (Quit: gone to sleep. ZZZzzz…)
[14:49:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[14:49:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:50:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:51:10] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[14:51:49] *** Quits: Topsi (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[14:51:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:52:12] *** Quits: Topsi1 (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de) (Ping timeout: 240 seconds)
[14:52:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:52:57] <opqdonut> I'm pretty proud of my AoC solution today: https://github.com/opqdonut/adventofcode21/blob/master/Day19.hs
[14:54:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:54:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:56:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:56:32] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[14:56:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:58:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:58:29] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[14:58:29] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[14:58:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:58:52] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[14:59:55] *** Joins: hololeap (~hololeap@user/hololeap)
[15:00:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:00:24] <tomsmeding> gensyst: try this: cabal repl --repl-options -e --repl-options ':set prog Main.hs' --repl-options -e --repl-options ':main'
[15:00:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:00:57] <tomsmeding> from looking at the ghc sources, this is basically what runghc is doing -- except with plain ghci instead of cabal
[15:01:04] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[15:02:10] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:02:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:02:55] <gensyst> tomsmeding, that gives me the error "Main.hs:0:53: error: Variable not in scope: main :: IO a0"
[15:03:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:03:03] <gensyst> (ran your command from the project dir)
[15:03:20] <gensyst> maybe i should just use ghci lol
[15:03:24] <tomsmeding> replace that Main.hs with the actual file name of your executable, which should have a 'main' definition :p
[15:04:35] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:04:36] <gensyst> that is the name
[15:04:48] <gensyst> even tried ./app/Main.hs, same error
[15:05:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:06:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:07:11] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:07:23] <tomsmeding> and that file does have a 'main' definition?
[15:07:37] <tomsmeding> it worked for me in a project with a similar setup: library and executable
[15:08:31] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[15:08:36] <hololeap> you might need to add the "target" which would be something like "myproject:exe:main"
[15:08:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:09:08] <hololeap> depends on what the executable is called in the .cabal file
[15:09:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:10:11] <tomsmeding> oh right
[15:10:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:11:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:12:20] <tomsmeding> gensyst: yeah add projectname:exe:executablename before those repl-options arguments
[15:13:03] <gensyst> that works. however i'm back to "cabal build" times
[15:13:15] <gensyst> i guess it's some sort of overhead that ghci avoids somehow
[15:13:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:13:26] <gensyst> ":r" in ghci is super fast
[15:13:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:15:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:15:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:16:31] *** Joins: mmhat (~mmh@55d46556.access.ecotel.net)
[15:16:49] <tomsmeding> gensyst: try 'cabal repl yourexecutablename -v | grep interactive', copy that huge ghc command, and append: -e :main
[15:17:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:17:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:18:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:18:50] <gensyst> tomsmeding, that's much faster :D
[15:19:10] <gensyst> seems like some non-standard thing to do, otherwise it'd be baked into cabal right?
[15:19:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:19:24] <int-e> oh in that case, can you do... --ghci-options='-e :main' ?
[15:19:40] *** Joins: __monty__ (~toonn@user/toonn)
[15:19:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:19:59] <int-e> (though I guess the point is to avoid rerunning `cabal`
[15:20:03] <int-e> so never mind)
[15:21:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:21:33] <tomsmeding> gensyst: cabal checks if there were changes in your project source files, project config, the global package index, and perhaps other things. That command might get outdated whenever you change any of those things. But if you don't, then it might continue to work :)
[15:21:46] <tomsmeding> in particular, just changing Main.hs and not changing any dependencies should work
[15:22:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:23:18] <gensyst> sure :)
[15:23:20] <gensyst> now finally
[15:23:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:23:36] <gensyst> Forgive me but "runghc allows you to run Haskell programs without first having to compile them." sounds STRANGE.
[15:23:44] <gensyst> magic?
[15:23:57] <int-e> gensyst: the same magic as ghci
[15:24:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:24:42] <tomsmeding> interpreting != compiling
[15:24:44] <int-e> it's morally (maybe even technically, I don't know) the same as   ghci P.hs -e ':main'
[15:25:11] <int-e> and it does compile, of course, but on the fly and to bytecode
[15:25:20] <tomsmeding> int-e: it is :p https://gitlab.haskell.org/ghc/ghc/-/blob/master/utils/runghc/Main.hs#L156
[15:25:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:26:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[15:26:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:27:40] <gensyst> ok i see
[15:27:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:28:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:29:46] <gensyst> I should just have RTFM, but at least now I know what to look for. https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html "So it pays to compile the parts of a program that aren’t changing very often, and use the interpreter for the code being actively developed."
[15:29:47] <gensyst> thanks guys
[15:30:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:30:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:31:31] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[15:31:40] *** Quits: mmhat (~mmh@55d46556.access.ecotel.net) (Quit: WeeChat 3.3)
[15:32:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:32:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:34:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:34:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:35:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[15:35:32] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[15:35:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:38:21] *** Joins: whatif (~user@114.250.136.140)
[15:38:39] <whatif> could ghc take {- code -} as comment?
[15:38:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[15:39:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Ping timeout: 240 seconds)
[15:39:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[15:39:51] <whatif> I know we use -- as comment, but a vim plugin nerdcommenter use {- -} as comment for .hs
[15:40:01] <whatif> so I wonder
[15:40:34] <int-e> Yes, `{- ... -}` is a comment in Haskell; it can span several lines
[15:43:46] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[15:43:50] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Read error: Connection reset by peer)
[15:44:09] <whatif> ok
[15:45:55] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:46:21] *** Joins: fef (~thedawn@user/thedawn)
[15:47:37] <tomsmeding> and what's more, it nests!
[15:47:50] <tomsmeding> > 1 + {- comment {- within a {- comment -} -} -} 2
[15:47:52] <lambdabot>  3
[15:50:48] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[15:51:17] *** Quits: xff0x (~xff0x@2001:1a81:53d2:9000:1181:abfc:439c:19e) (Ping timeout: 240 seconds)
[15:51:23] *** Joins: Topsi (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de)
[15:52:28] *** Joins: xff0x (~xff0x@2001:1a81:53d2:9000:eec8:750b:6133:d894)
[15:52:43] <hololeap> much like the mighty sparrow
[15:53:00] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Remote host closed the connection)
[15:53:25] *** Quits: Topsi2 (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de) (Ping timeout: 240 seconds)
[16:00:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:00:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:00:41] *** Joins: wroathe (~wroathe@user/wroathe)
[16:03:11] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974)
[16:05:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[16:06:41] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[16:07:57] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 240 seconds)
[16:15:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:19:53] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[16:19:58] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974) (Quit: gone to sleep. ZZZzzz…)
[16:20:54] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[16:22:03] *** Joins: polezaivsani` (~polezaivs@orangeshoelaces.net)
[16:23:54] *** Quits: polezaivsani` (~polezaivs@orangeshoelaces.net) (Client Quit)
[16:24:57] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 240 seconds)
[16:25:03] *** Joins: polezaivsani` (~polezaivs@orangeshoelaces.net)
[16:25:08] *** Quits: polezaivsani` (~polezaivs@orangeshoelaces.net) (Client Quit)
[16:28:54] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[16:29:33] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[16:34:13] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Remote host closed the connection)
[16:36:16] *** Joins: kaction (~kaction@pool-71-191-91-40.washdc.fios.verizon.net)
[16:38:00] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[16:38:31] *** Quits: max22- (~maxime@2a01cb08833598005fdfc488429f8659.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:39:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com) (Ping timeout: 240 seconds)
[16:45:14] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[16:45:38] <jumper149> What is the inlining behaviour of derived instances?
[16:46:47] <int-e> . o O ( unpredictable )
[16:48:40] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 256 seconds)
[16:49:44] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[16:50:04] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:50:23] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:51:59] <int-e> jumper149: I think if you want a serious answer you'll have to narrow that question down quite a bit.
[16:53:52] <jumper149> int-e: Understandable, I was hoping for some documentation. Maybe something in GHC manual?
[16:54:33] <jumper149> I'm currently abusing DerivingVia quite a lot with monad transformers and was wondering about performance implications.
[16:56:17] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 240 seconds)
[16:56:50] <int-e> I'm not sure where to look either. The story starts with type checking; as far as instantiations are visible to the type checker, they are also candidates for inlining... so things get better the more concrete the types are. But then you have the usual problem of predicting whether ghc will actually take the opportunity.
[16:58:27] <jumper149> int-e: Uhh, I guess chances are kinda bad then :(
[16:59:06] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:59:13] <Athas> When I try to use 'haskellPackagesNew.quickcheck-instances_0_3_27' in my .nix file, I get 'error: infinite recursion encountered' (naturally pointing at some internal file I have never even heard about before).  I use this pattern to get new versions of many other obsolete Hackage packages in Nixpkgs.  Is quickcheck-instances known to be particularly fragile for some reason?
[16:59:25] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[16:59:39] <int-e> jumper149: the `via` part is cheap though; that's basically a coercion (actually one per class method) to wrap/unwrap a newtype
[16:59:40] <Athas> This is how I do it for various other packages: https://github.com/diku-dk/futhark/blob/master/default.nix#L23-L42
[17:02:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:08:35] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[17:10:57] *** Quits: remedan_ (~remedan@balak.me) (Quit: Bye!)
[17:15:21] <whatif> how to change the function call behavior by every same call? same call, different result every time
[17:15:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:18:31] *** Joins: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com)
[17:20:24] <jumper149> whatif: Do you want an impure function?
[17:22:09] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f)
[17:22:17] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:22:22] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f) (Client Quit)
[17:22:38] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f)
[17:24:11] <whatif> jumper149: is possible?
[17:24:22] *** Joins: remedan (~remedan@octo.cafe)
[17:25:10] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974)
[17:25:12] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:25:44] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:1075:b21:7fd0:c974) (Client Quit)
[17:25:54] <jumper149> whatif: No, but that's what monads are for ;)
[17:26:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:26:54] <whatif> jumper149: see what this python with closure to archive, it change a function's behavior after every call, it can do a map with a changing function, https://paste.tomsmeding.com/GAVSCKAx   
[17:27:39] <whatif> of course, it can be done with an object way
[17:27:55] <jumper149> Take the IO monad for example: f = do { x <- readFile "filename"; writeFile "filename" (x ++ "appended text"); return x }
[17:27:58] <whatif> change the object's attribute after every object's method call
[17:28:45] <whatif> so I wonder if we can do that with State or whatever else
[17:29:56] <jumper149> whatif: Yes. That is possible to do with the `State` monad.
[17:30:11] <whatif> jumper149: for example?
[17:31:05] <jumper149> The type signature should be something like: `gc :: State Integer Integer`
[17:33:29] <jumper149> And then to use that function: `evalState (traverse gc [1,2,3]) 0`
[17:34:05] <jumper149> whatif: Read through this documentation: https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html
[17:35:20] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[17:35:26] <jumper149> Oops, actually the type signature is: `gc :: Integer -> State Integer Integer`
[17:36:21] <whatif> jumper149: could you paste the whole code?
[17:36:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[17:37:03] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:37:56] *** Joins: notzmv (~zmv@user/notzmv)
[17:38:08] <jumper149> I left out the implementation of `gc` as an exercise ;)
[17:38:29] <jumper149> Honestly, if you want to undestand how it works, you should really try to implement that yourself.
[17:39:13] <jumper149> Everything you need will be available in `Control.Monad.State` from the mtl package.
[17:39:37] <whatif> jumper149: but I don't think that's possible in haskell
[17:40:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Ping timeout: 240 seconds)
[17:40:43] <whatif> gc = gc _ _
[17:42:48] <jumper149> You don't need recursion here. Write `gc` exactly like `inner` from your python example.
[17:44:15] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Remote host closed the connection)
[17:44:31] <whatif> but that inner function take a outside variable, and change it
[17:44:46] <whatif> how haskell can change a outside variable inside a function
[17:45:01] <jumper149> Yes, did you see that I corrected myself: `gc :: Integer -> State Integer Integer`
[17:45:38] <jumper149> Oh you mean the outside variable `n`...
[17:45:45] <whatif> yes
[17:45:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:48ee:b2a3:80ed:d885)
[17:45:47] <jumper149> That is our state!
[17:45:56] *** Joins: ksqsf (~ksqsf@134.209.106.31)
[17:46:21] <jumper149> You can use `get` and `put` from https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:StateT
[17:46:40] <jumper149> That will allow you to read and change that state
[17:46:45] <ksqsf> hi all. where is the code for deriving class instances located in ghc?
[17:47:18] <whatif> jumper149: after the change, where you store it?
[17:47:25] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[17:47:29] <whatif> store the return value, the result
[17:48:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:49:07] <jumper149> whatif: In the state again. That's what `put` is for.
[17:49:44] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:50:00] <whatif> jumper149: you mean the put the whole code inside the one state?
[17:50:28] <jumper149> That went over my head.
[17:51:00] <ksqsf> ok, I found it: GHC.Tc.Deriv.
[17:51:26] <whatif> jumper149: so I would like to see the full code...
[17:51:34] <jumper149> You use `get` to read out the state. Then you use `put` to store your new state. Then you use `return` to give return the same value that you return in `inner`.
[17:51:39] <jumper149> whatif: ok, sec
[17:52:05] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[17:52:51] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[17:55:26] <jumper149> http://ix.io/3IQK
[17:55:55] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Ping timeout: 250 seconds)
[17:58:55] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[18:08:35] *** Joins: max22- (~maxime@2a01cb0883359800a97032845f824a07.ipv6.abo.wanadoo.fr)
[18:14:03] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:14:30] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:16:11] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:16:33] <whatif> jumper149: thanks :)
[18:19:20] <Heffalump[m]> Is there a way to get ghc --make to print the compilation time of each file?
[18:19:33] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:22:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:23:36] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Remote host closed the connection)
[18:26:21] *** Quits: ksqsf (~ksqsf@134.209.106.31) (Quit: Leaving...)
[18:26:49] *** Joins: ksqsf (~ksqsf@134.209.106.31)
[18:27:53] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:28:05] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:28:17] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 240 seconds)
[18:31:46] *** Joins: gdd (~gdd@129.199.146.230)
[18:34:34] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[18:34:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[18:36:34] *** Joins: unyu (~pyon@user/pyon)
[18:39:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[18:40:36] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 240 seconds)
[18:44:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[18:45:33] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:45:40] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[18:46:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[18:46:34] *** Joins: Topsi1 (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de)
[18:47:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:47:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:47:28] *** Joins: wroathe (~wroathe@user/wroathe)
[18:48:37] *** Quits: Topsi (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de) (Ping timeout: 240 seconds)
[18:49:06] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[18:50:25] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[18:50:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:53:45] *** Joins: Topsi (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de)
[18:54:15] <Athas> Why, after 'choco install -y ghc --version=8.10.7 --allow-downgrade', do I have ghc 9.2.1 installed?
[18:54:17] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f)
[18:54:19] <Athas> I am so tired of computers.
[18:56:44] *** Quits: Topsi1 (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de) (Ping timeout: 256 seconds)
[18:57:07] <jumper149> Athas: Multiple package managers?
[18:57:46] <Athas> jumper149: unless the 'windows-2019' image provided by GA comes with a new version of GHC preinstalled, I don't think so.
[18:58:19] <jumper149> Oh, no idea about windows, sry :(
[18:58:50] <Athas> Yeah, me too.  Maybe I should just stop pretending to support it.
[19:00:22] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[19:00:41] <darchitect> hey guys, does anyone know how to quickly visualise folds in ghci ?
[19:01:20] <geekosaur> ghc-vis?
[19:01:33] <darchitect> what is that 
[19:01:36] <darchitect> never heard of it before 
[19:01:38] <geekosaur> depends on how you want them to be visualized
[19:01:45] <geekosaur> @hackage ghc-vis
[19:01:45] <lambdabot> https://hackage.haskell.org/package/ghc-vis
[19:02:23] <geekosaur> I think there's also a website which visualizes folds, but that's not in ghci
[19:02:35] *** Joins: gensyst (gensyst@user/gensyst)
[19:02:42] <darchitect> wow thanks a bunch man 
[19:02:44] <geekosaur> there's also
[19:02:45] <darchitect> will have a look at it
[19:02:55] <geekosaur> > foldr f z [a,b,c]
[19:02:57] <lambdabot>  f a (f b (f c z))
[19:03:05] <geekosaur> courtesy of the simple-reflect package
[19:03:05] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:04:37] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 240 seconds)
[19:04:39] *** Quits: acidjnk (~acidjnk@p200300d0c7271e774586c8f7f876c3d9.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[19:04:59] <darchitect> ghc-viz looks sick 
[19:05:06] *** Joins: dsp (~dsp@cpc152107-haye27-2-0-cust227.17-4.cable.virginm.net)
[19:05:44] <darchitect> I thought Haskell had a rather esoteric and stagnated eco-system but I stand corrected 
[19:05:46] <darchitect> thanks again 
[19:06:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:06:37] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[19:08:33] *** Joins: u0_a184 (~u0_a184@120.242.179.14)
[19:08:38] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:08:48] <Athas> It's old but I don't think it's esoteric by modern standards.  And it's certainly not stagnant; it's changing faster than I've seen before.
[19:09:02] <dsp> I have a beginner question: I have two maybe's and want to result of an "or" operation, e.g. Just a OP Nothing should return Just a, and vice versa, is ther a liberary function for that?
[19:09:34] <geekosaur> > Just 5 <|> Nothing
[19:09:36] <lambdabot>  Just 5
[19:09:43] <geekosaur> > Nothing <|> Just 5
[19:09:45] <lambdabot>  Just 5
[19:10:03] <geekosaur> if you want a generalization to multiple values, it's `asum`
[19:10:23] <dsp> thank you. Hm, variable <|> not in scope, let me see waht i need to import to get it
[19:10:43] <geekosaur> Control.Applicative probably
[19:11:05] <dsp> very much so, thank you geekosaur!
[19:14:50] *** Quits: xff0x (~xff0x@2001:1a81:53d2:9000:eec8:750b:6133:d894) (Ping timeout: 260 seconds)
[19:15:38] *** Joins: xff0x (~xff0x@2001:1a81:53d2:9000:f325:fa80:d018:3e1f)
[19:16:11] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Ping timeout: 245 seconds)
[19:17:57] *** Quits: u0_a184 (~u0_a184@120.242.179.14) (Quit: WeeChat 3.0.1)
[19:18:27] *** Joins: KnifeFire (~Knifefire@120.242.179.14)
[19:18:38] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[19:19:39] *** Quits: leah2 (~leah@vuxu.org) (Remote host closed the connection)
[19:20:03] *** Quits: KnifeFire (~Knifefire@120.242.179.14) (Client Quit)
[19:21:55] *** Joins: leah2 (~leah@vuxu.org)
[19:23:28] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Remote host closed the connection)
[19:24:12] *** Joins: slack1256 (~slack1256@191.126.99.78)
[19:28:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:48ee:b2a3:80ed:d885) (Ping timeout: 240 seconds)
[19:29:34] *** Joins: averell (~averell@user/averell)
[19:33:21] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[19:36:11] *** Quits: ksqsf (~ksqsf@134.209.106.31) (Remote host closed the connection)
[19:37:14] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[19:37:37] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 240 seconds)
[19:37:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[19:38:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[19:42:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Ping timeout: 240 seconds)
[19:43:02] *** Joins: ksqsf (~ksqsf@134.209.106.31)
[19:44:02] *** Quits: xff0x (~xff0x@2001:1a81:53d2:9000:f325:fa80:d018:3e1f) (Ping timeout: 240 seconds)
[19:44:49] *** Joins: xff0x (~xff0x@2001:1a81:53d2:9000:624c:90f8:cb96:14ab)
[19:46:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:49:42] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[19:49:49] *** Quits: ksqsf (~ksqsf@134.209.106.31) (Quit: Leaving...)
[19:50:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[19:50:40] *** Joins: ksqsf (~user@134.209.106.31)
[19:52:58] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[19:54:45] *** Joins: sndr (~sander@user/sander)
[19:55:23] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[19:55:29] *** sndr is now known as sander
[19:56:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi)
[19:58:57] *** Quits: xff0x (~xff0x@2001:1a81:53d2:9000:624c:90f8:cb96:14ab) (Ping timeout: 240 seconds)
[20:00:00] *** Joins: xff0x (~xff0x@2001:1a81:53d2:9000:e615:4a02:5110:222)
[20:00:56] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:04:01] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:11e0:2623:c59:6cb7)
[20:04:39] *** Joins: son0p- (~ff@181.136.122.143)
[20:06:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[20:06:53] <gensyst> I "open my project (library and executable)" with GHCi using this command: "cabal repl exe:projectname-exe". Then I call "import Some.Module.Inside.Library" and now I have access to it.
[20:07:26] <gensyst> However this library module is not listed when I call ":show modules". Why not? I want to double-check that the library module is not interpreted.
[20:07:34] <gensyst> I want to make sure it's using compiled .o
[20:09:55] *** Quits: whatif (~user@114.250.136.140) (Quit: ERC (IRC client for Emacs 26.3))
[20:10:35] <gensyst> Let me put it this way: In GHCi, how do I check if a particular thing is coming from interpreted code or compiled code?
[20:11:05] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[20:16:23] <slack1256> gensyst: The only interpreted code on your ghci session should be what you implicit pass an argument to `cabal v2-repl` AFAIK.
[20:17:10] <slack1256> If in my project I run `cabal v2-run lib:my-project` only that target (plus its dependencies on cabal.project) will get interpreted.
[20:17:21] <slack1256> I don't know how to do that inside of a ghci session.
[20:18:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[20:18:26] <slack1256> gensyst: I got. `:show linker` inside ghci!
[20:18:55] <slack1256> It will show pkgs vs loaded objects.
[20:19:25] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[20:19:50] <pfurla-matrix> `:show modules` shows that is interpreted or compiled
[20:19:57] <gensyst> slack1256, when running ":show linker", the project's own library is listed in Pkgs, but both Objs and BCOs are empty.
[20:19:58] <pfurla-matrix> that = what
[20:20:34] <gensyst> pfurla-matrix, yes but apparently that's only for what you explicitly pass into cabal repl (as slack1256 said)
[20:20:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:20:44] <pfurla-matrix> what is BCOs?
[20:21:31] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:22:15] <gensyst> no idea
[20:22:42] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[20:23:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[20:24:13] <pfurla-matrix> "Byte Code Objects (BCOs). BCOs are heap objects which correspond to top-level bindings, and let and case expressions" from https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/GHCi
[20:26:53] *** Joins: coot (~coot@2a02:a310:e03f:8500:7248:52ac:817b:7fb4)
[20:27:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:28:22] <gensyst> Can I go by this rule? Rule: (1) If it's listed as "interpreted" in ":show modules", it's interpreted. (2) If it's listed as ".o" in ":show modules", it's compiled. (3) If it isn't listed at all in ":show modules", it's also compiled.
[20:28:56] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[20:29:58] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[20:34:52] *** Joins: euouae (~euouae@user/euouae)
[20:37:26] <euouae> Hello how would you write `append :: [a] -> [a] -> [a]` for which `append xs ys` is just `xs ++ ys`? One solution seems to be to recurse like `x :: append xs ys` and another is by using a tail-call optimized reverse-append. The second option requires traversing the list twice but doesn't require O(n) in stack. Is that betteR?
[20:38:54] <gensyst> euouae, beautiful nickname.. thought i wa sreading greek at first. am i dyslexic?
[20:39:49] <monochrom> You can write "append xs ys = xs ++ ys" literally.
[20:40:11] <euouae> gensyst, no but you may be an oracular
[20:40:18] <pfurla-matrix> it's aenone if rotated 180o, isn't it?
[20:40:21] <monochrom> If you mean you want to write your own recursive algorithm, tail recursion is bad for this.
[20:40:33] <euouae> monochrom yes I'm asking about writing my own algorithm
[20:41:13] <monochrom> This is a test case you want to pass:
[20:41:27] <monochrom> > take 1 ("x" ++ undefined)
[20:41:28] <lambdabot>  "x"
[20:41:43] <monochrom> The standard tail-recursive algorithm will fail that.
[20:41:43] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:41:48] *** Joins: koz (~koz@121.99.240.58)
[20:42:07] <euouae> hmm I didn't realize monochrom, I should've added that I wish the algorithm to be strict
[20:42:45] <euouae> I don't know what the 'standard' algorithm is; I do know how to have a function f xs ys == (reverse xs) ++ ys
[20:42:53] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f)
[20:43:48] <euouae> which has the tail-call optimization. So I could do `f (f xs []) ys` as my `append xs ys`, that's what I had in mind.
[20:44:22] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[20:44:24] <euouae> Which traverses xs twice, but it seems a better option than using O(n) of the stack? I'm just wondering if these are correct considerations and if there's anything better
[20:46:23] <monochrom> Are you saying that using the standard library's ++, x++y uses linear space for finite strings? Therefore uses infinite space for infinite strings?
[20:46:56] <monochrom> Because take 1 (repeat 'x' ++ repeat 'y') takes only constant time, therefore no way it can use infinite space or even linear space.
[20:47:05] <monochrom> > take 1 (repeat 'x' ++ repeat 'y')
[20:47:07] <lambdabot>  "x"
[20:47:30] <monochrom> This destroys your model of how recursion uses space.
[20:47:34] <euouae> No I'm saying that the implementation for `append` I wrote above seems to use linear space if strict
[20:47:50] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[20:47:50] <monochrom> OK, so this is not Haskell?
[20:47:53] <euouae> append (x::xs) ys = x :: (append xs ys)
[20:49:30] <euouae> I'm trying to understand how that translates into machine code but unfortunately I'm not good enough to know how to compile it and disassemble it with gdb
[20:51:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:51:48] <pfurla-matrix> `::` is not haskell cons
[20:52:05] <euouae> oh I meant `:` you are right 
[20:53:45] <monochrom> OK so this is Haskell.
[20:54:18] *** Joins: Erutuon (~Erutuon@user/erutuon)
[20:54:25] *** Quits: thevishy (~Nishant@2405:201:f005:c007:851a:8f84:501c:8bd1) (Quit: Leaving)
[20:54:29] *** Quits: koz (~koz@121.99.240.58) (Quit: koz)
[20:55:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[20:55:19] <monochrom> "append (x::xs) ys = x : (append xs ys)" is non-strict in xs and in ys.
[20:56:12] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Remote host closed the connection)
[20:56:21] <pfurla-matrix> if you really want to see things with gdb you should have a look at https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/debug-info.html if you haven't already. 
[20:56:27] <monochrom> and in the recursive term (append xs ys)
[20:57:07] <pfurla-matrix> but it might be more useful to learn how haskell lazyness works instead of going all the way down to asm
[20:57:37] <monochrom> https://github.com/takenobu-hs/haskell-ghc-illustrated is a good presentation of the low level story.
[20:58:36] <monochrom> But yeah most of the time, or most people, do not need that low level. (And not ready for it anyway.)
[20:59:23] <pfurla-matrix> tagless g-machine :)
[20:59:58] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[21:00:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[21:05:21] <euouae> I guess I'm just trying to understand if append (x:xs) = x : (append xs ys) uses O(n) of the stack
[21:05:26] <euouae> where n is the length of xs
[21:06:39] *** Joins: KnifeFire (~Knifefire@120.242.179.14)
[21:07:00] <euouae> both the pdf you linked to and the debug-info link on gdb seem too advanced, but on a rudimentary level I wonder if I can get an answer to the above or is that also a big story?
[21:07:01] *** Quits: xff0x (~xff0x@2001:1a81:53d2:9000:e615:4a02:5110:222) (Ping timeout: 245 seconds)
[21:08:10] *** Joins: xff0x (~xff0x@2001:1a81:53d2:9000:941d:3a25:9fc5:6e77)
[21:08:26] <euouae> or even easier to ask, can haskell code overflow the stack?
[21:08:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:08:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:08:32] *** Joins: wroathe (~wroathe@user/wroathe)
[21:08:43] *** Quits: KnifeFire (~Knifefire@120.242.179.14) (Client Quit)
[21:08:59] <pfurla-matrix> lol, just found this https://stackoverflow.com/questions/43265198/do-stack-overflow-errors-occur-in-haskell, didn't read it, no idea if it's useful
[21:09:05] <ksqsf> euouae: haskell does not actually use system stacks for user functions iiuc
[21:09:54] <ksqsf> thread (haskell's green threads) stacks are heap objects
[21:10:09] <euouae> ksqsf that is starting to make sense...
[21:10:25] <darchitect> doesn't haskell use the stack at all ?
[21:11:23] *** Quits: Topsi (~Tobias@dyndsl-095-033-094-113.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[21:12:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:13:22] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 260 seconds)
[21:18:04] *** Quits: coot (~coot@2a02:a310:e03f:8500:7248:52ac:817b:7fb4) (Quit: coot)
[21:18:20] <euouae> okay, great. thank you for the answers
[21:19:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:19:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:19:00] *** Joins: wroathe (~wroathe@user/wroathe)
[21:22:06] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[21:23:22] <pfurla-matrix> >  foldl (+) 0 [1..10**8]
[21:23:31] <lambdabot>  mueval.real: ExitFailure 1
[21:24:00] <pfurla-matrix> in my local ghci I get a stack overflow
[21:24:29] <pfurla-matrix> * > foldl' (+)
[21:24:38] *** Quits: son0p- (~ff@181.136.122.143) (Ping timeout: 256 seconds)
[21:24:47] <pfurla-matrix> > foldl' (+) 0 [1..10**8]
[21:24:53] <lambdabot>  5.00000005e15
[21:25:18] <darchitect> stackoverflow here as well
[21:25:21] <geekosaur> haskell doesn't have a traditional stack. there is a pattern match stack which is part of how lazy evaluation occurs
[21:26:33] <geekosaur> > foldl f z [a,b,c]
[21:26:34] <lambdabot>  f (f (f z a) b) c
[21:29:04] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[21:29:15] <monochrom> There is still a difference between "how much stack does this code use?" and "so this code uses linear stack, my question is..."
[21:29:37] <monochrom> Especially when the premise "so this code uses linear stack" is wrong.
[21:29:55] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[21:29:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[21:30:02] <pfurla-matrix> what is f, z, a, b, and c ?
[21:30:20] <hpc> they're placeholder values that pretty-print as "f", "z", etc etc
[21:30:23] <geekosaur> that was for something I was going to do and changed my mind, sorry
[21:30:26] <geekosaur> look at
[21:30:33] <geekosaur> @hackage simple-reflect
[21:30:33] <lambdabot> https://hackage.haskell.org/package/simple-reflect
[21:30:39] <hpc> in a way that looks like how their combination as an expression would look
[21:30:44] <pfurla-matrix> hpc that's pretty cool
[21:30:44] <geekosaur> it's a pretty clever package
[21:31:01] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[21:31:32] <monochrom> For maximum confusion:
[21:31:41] <monochrom> > foldl f z [e, f]
[21:31:42] <lambdabot>  f (f z e) f
[21:31:42] <pfurla-matrix> I was using simple-reflect the other day, couldn't make it work with global stack, ditched stack for cabal... and finally completely for what I wanted from simple-reflect
[21:31:43] <APic> Gesundheit.
[21:32:35] <hpc> > (f 5, f (2 + 3)) -- it gets even more cleverer :D
[21:32:36] <lambdabot>  error:
[21:32:36] <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M404042824880...
[21:32:36] <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
[21:32:38] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:32:54] <hpc> cleverer than ghc :(
[21:33:06] <hpc> with enough type signatures that prints "(f 5, f 5)"
[21:34:30] <pfurla-matrix> > :t f
[21:34:32] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[21:34:45] <monochrom> > (f 5, f (2 + 3)) :: (Expr, Expr)
[21:34:46] <lambdabot>  (f 5,f 5)
[21:35:08] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[21:35:31] <pfurla-matrix> > (f 5, f ( (lift 2) + 3)) :: (Expr, Expr)
[21:35:33] <lambdabot>  error:
[21:35:33] <lambdabot>      • Ambiguous type variables ‘t0’, ‘m0’,
[21:35:33] <lambdabot>                                 ‘a0’ arising from a use of ‘f’
[21:35:42] <monochrom> You will have to say ":t f" or "@type f", in both cases no "> "
[21:35:56] <pfurla-matrix> :t f
[21:35:58] <lambdabot> FromExpr a => a
[21:36:17] <pfurla-matrix> thanks, forgot how to use lambdabot
[21:37:25] *** Joins: deadmarshal (~deadmarsh@95.38.116.51)
[21:39:52] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:39:59] <darchitect> what is lambdabot ?
[21:40:17] <geekosaur> @version
[21:40:18] <lambdabot> lambdabot 5.3.0.1
[21:40:18] <lambdabot> git clone https://github.com/lambdabot/lambdabot
[21:40:34] <pfurla-matrix> > "I am lambdabot, nice to meet'ya"
[21:40:36] <lambdabot>  "I am lambdabot, nice to meet'ya"
[21:42:02] <darchitect> sick 
[21:44:05] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[21:48:12] <hpc> % "yahb is also pretty neat"
[21:48:12] <yahb> hpc: "yahb is also pretty neat"
[21:48:46] <hpc> (yahb gives you a full ghci session, IO and all, but doesn't have other neat stuff like djinn)
[21:49:17] <geekosaur> lambdabot is based around mueval, which is an internal sandboxing mechanism. yahb is ghci running in an external sandbox
[21:51:50] <zero> is it possible to do a bfs as elegantly as this dfs? https://paste.jrvieira.com/1639938024209
[21:52:40] <monochrom> You need a queue. Or you need iterative deepening.
[21:53:11] <zero> what do you mean by iterative deepening?
[21:53:11] *** Joins: econo (uid147250@user/econo)
[21:53:17] <monochrom> Iterative deepening code can look pretty close to dfs.
[21:53:23] <monochrom> Look it up.
[21:54:23] <zero> reading. thanks
[21:54:33] <pfurla-matrix> hpc: can't find much about yahb
[22:01:28] <gensyst> Are these rules for GHCi accurate? (1) If it's listed as "interpreted" in ":show modules", it's interpreted. (2) If it's listed as ".o" in ":show modules", it's compiled. (3) If it isn't listed at all in ":show modules", it's compiled.
[22:01:58] <monochrom> Yes.
[22:02:20] <monochrom> (3) can be strengthened to: from a library.
[22:02:28] <gensyst> monochrom, Is there a way to figure out the optimization level from that level, or do I basically have to look at the .cabal file of each compiled package?
[22:02:45] <monochrom> That information is lost.
[22:02:55] <gensyst> thanks!
[22:03:06] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:03:22] <enyc> DATE
[22:03:24] <enyc> oops
[22:03:39] <gensyst> <monochrom> (3) can be strengthened to: from a library.    Do you mean, "compiled from a library"?
[22:03:49] <monochrom> yes
[22:03:53] <gensyst> thanks!
[22:04:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[22:04:08] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[22:06:13] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 240 seconds)
[22:06:22] *** Joins: Noinia (~Frank@77-162-168-71.fixed.kpn.net)
[22:07:32] *** Joins: Jing_ (~hedgehog@2604:a840:3::103b)
[22:07:34] *** Quits: sleblanc (~sleblanc@user/sleblanc) (Quit: Leaving)
[22:08:33] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:08:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[22:09:57] *** Quits: Jing (~hedgehog@2604:a840:3::103e) (Ping timeout: 240 seconds)
[22:09:59] *** Joins: wolfshappen (~waff@irc.furworks.de)
[22:10:36] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:12:52] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:11e0:2623:c59:6cb7) (Quit: gone to sleep. ZZZzzz…)
[22:13:39] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:14:09] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:14:10] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:14:17] *** Joins: sleblanc (~sleblanc@user/sleblanc)
[22:14:39] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:14:39] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:14:45] <Noinia> is anyone successfully using HLS in a multi-cabal-project setup? I'm getting some strange error stating that it cannot parse the output form cabal (since cabal suposedly crashed; see https://controlc.com/778b78ab). Everything just builds fine when I run 'cabal build' on commandline. 
[22:16:04] *** Joins: jijimofo (~cmo@S010610561191f5d6.lb.shawcable.net)
[22:16:30] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:16:30] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:16:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:17:05] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:17:07] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:17:25] *** Joins: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com)
[22:18:00] <gensyst> Noinia, shouldn't one be putting a .hie file or something to tell it where all the projects are?
[22:18:05] <gensyst> otherwise it can get confused
[22:18:10] <gensyst> however this info may be obsolete by now
[22:18:16] <gensyst> sorry, i meant hie.yaml
[22:18:51] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:18:52] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:19:53] <Noinia> I thought that was suposed to be obsolete by now indeed. I guess I can try actually generating one manually again.
[22:20:34] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:20:35] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:20:44] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 256 seconds)
[22:21:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[22:21:51] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:21:52] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:21:58] <jijimofo> hi. i'm confused by stack's behavior. when i don't specify 'src' in my executables 'source-dirs:' i get an error about how it can't find BasicSDLLib.hs. when i do put 'src' in the 'source-dirs' it says 'specified source-dir "app src" doesn't exist'. can someone help me understand what i'm doing wrong?
[22:22:15] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:22:16] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:22:48] <tomsmeding> perhaps 'app, src'?
[22:23:31] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:24:10] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:24:11] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:24:47] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[22:25:03] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:25:03] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:25:17] <jijimofo> tomsmeding: i get 'specified source-dir "app, src" does not exist'
[22:25:53] <tomsmeding> is this in stack.yaml or a .cabal file?
[22:26:27] <jijimofo> in stack.yaml. i usually use cabal but i decided to give stack a try
[22:26:42] <geekosaur> keep in mind that stack still uses cabal files
[22:27:05] <geekosaur> the cabal equivalent of stack.yaml is cabal.project, not <projectname>.cabal
[22:27:41] <jijimofo> weirdly when i specify the source-dir field wrong the code gets compiled
[22:27:43] <tomsmeding> can't find anything about "source-dirs" in the stack documentation; where did you get that key from?
[22:28:10] <jijimofo> i used 'stack new' i think
[22:29:06] * tomsmeding used 'stack new' and 'source-dir' doesn't occur in the generated stack.yaml file
[22:29:19] <tomsmeding> OH package.yaml
[22:29:29] <tomsmeding> there's a huge difference between package.yaml and stack.yaml jijimofo 
[22:29:32] *** Quits: python476 (~user@88.160.31.174) (Read error: Connection reset by peer)
[22:29:34] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:29:34] <geekosaur> mm, right, still does that
[22:29:34] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:29:57] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:29:59] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:31:23] <tomsmeding> it's a yaml file, so perhaps 'source-dirs: [app, src]'
[22:31:26] <tomsmeding> jijimofo: ^
[22:31:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Remote host closed the connection)
[22:31:38] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:31:39] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:31:43] <tomsmeding> or, source-dirs:\n- app\n- src
[22:31:54] *** Joins: python476 (~user@88.160.31.174)
[22:32:18] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:32:19] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:32:40] <jijimofo> ok i will try a new blank project and copy my sources over. i tried the 'stack new' command again and i don't remember seeing the stuff about templates so i mustve used 'stack init' or something
[22:33:30] <jijimofo> tomsmeding: that's the syntax, thank you. i guess i need to go slower when reading docs
[22:33:37] <tomsmeding> docs don't mention this
[22:33:48] <tomsmeding> they assume you somehow know yaml syntax by heart
[22:33:51] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:33:52] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:33:59] <tomsmeding> yaml has a native concept of lists, and they reuse that here
[22:34:15] <tomsmeding> s/native/built-in/
[22:35:15] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:35:16] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:35:26] *** Quits: max22- (~maxime@2a01cb0883359800a97032845f824a07.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[22:35:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:35:36] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:35:37] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:36:36] *** Quits: deadmarshal (~deadmarsh@95.38.116.51) (Ping timeout: 256 seconds)
[22:37:33] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[22:38:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[22:39:46] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:39:47] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:42:16] *** Joins: wroathe (~wroathe@user/wroathe)
[22:42:40] *** Joins: coot (~coot@2a02:a310:e03f:8500:7248:52ac:817b:7fb4)
[22:43:00] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[22:44:40] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:44:41] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:44:45] *** Joins: Guest3076 (~Guest30@66.115.252.46)
[22:44:46] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[22:46:42] *** Joins: ksqsf (~user@134.209.106.31)
[22:47:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:48:13] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:48:13] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:48:33] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:48:33] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:50:27] *** Joins: Akiva (~Akiva@user/Akiva)
[22:50:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:51:37] *** Quits: dsp (~dsp@cpc152107-haye27-2-0-cust227.17-4.cable.virginm.net) (Ping timeout: 240 seconds)
[22:55:14] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:55:15] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:55:34] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[22:55:35] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:56:27] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[22:57:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[22:57:54] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[22:58:52] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[23:00:15] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[23:01:29] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[23:02:23] *** Quits: justSleigh (~justache@user/justache) (Remote host closed the connection)
[23:06:26] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:06:27] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:07:29] *** Quits: Guest9348 (~mike@2406:d500:6:1:216:3cff:fe36:651) (Ping timeout: 250 seconds)
[23:10:24] *** Joins: max22- (~maxime@2a01cb08833598001a2c7d9873db9006.ipv6.abo.wanadoo.fr)
[23:12:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[23:14:33] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[23:16:38] *** Joins: justSleigh (~justache@user/justache)
[23:16:55] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[23:19:26] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[23:20:47] *** Joins: xkuru (~xkuru@user/xkuru)
[23:21:07] *** Joins: Guest9348 (~mike@user/feetwind)
[23:21:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Remote host closed the connection)
[23:21:11] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[23:21:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-90d6-5589-2ed3-af73.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:21:59] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[23:22:35] *** Joins: img (~img@user/img)
[23:25:36] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:25:37] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:26:07] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[23:26:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d)
[23:27:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:28:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:28:15] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[23:30:03] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d8a9:a97b:f226:606f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:31:40] *** Joins: jkaye (~jkaye@2601:281:8300:7530:76ff:6d0a:27ec:c880)
[23:33:18] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7cf1:85e9:3000:4f4d) (Remote host closed the connection)
[23:33:23] *** Quits: coot (~coot@2a02:a310:e03f:8500:7248:52ac:817b:7fb4) (Quit: coot)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:41] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:20] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:38:21] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:39:07] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:43:17] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[23:43:39] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[23:47:15] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:59:15] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:59:15] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:59:15] *** Joins: wroathe (~wroathe@user/wroathe)
