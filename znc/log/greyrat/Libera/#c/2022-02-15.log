[00:00:06] <nitrix> You might not have a uint8_t, it's optional.
[00:00:18] <SaltHillStroller> True, but assuming I do have uint8_t :D
[00:00:32] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 272 seconds)
[00:00:58] <nitrix> Then I wrote my reasoning as the first sentence.
[00:01:29] <SaltHillStroller> nitrix: Are there such systems where 1 byte != 8 bits?
[00:02:10] <ChoHag> Not many.
[00:04:19] *** Joins: Viewday113 (~Viewday@user/viewday)
[00:04:58] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[00:05:28] <caze> SaltHillStroller: What is a "serialized buffer pointer"?
[00:05:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:05:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:05:48] *** Viewday113 is now known as Viewday11
[00:06:16] <SaltHillStroller> caze: Bad wording. I'm memcpy'ing structs to some buffer. As I went to create the buffer I just wondered about uint8_t vs char
[00:06:41] *** Joins: Akuli2 (~Akuli2@82-203-164-73.bb.dnainternet.fi)
[00:06:58] <nitrix> I assumed they meant a pointer to a buffer that's meant to contain packet data from the network. Hopefully they aren't memcpy-ing the pointer itself and sending it.
[00:07:02] *** Parts: langley_iskander (~langleyis@2001:470:69fc:105::1:bd3a) ()
[00:07:35] *** Quits: Akuli2 (~Akuli2@82-203-164-73.bb.dnainternet.fi) (Client Quit)
[00:08:53] <nitrix> There's no meaningful way to serialize a pointer. uintptr_t sort of, slightly, as long as it's used solely with things that would otherwise work perfectly well with integers.
[00:09:31] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[00:10:10] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[00:10:57] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[00:14:13] <ChoHag> void (*foo)(void) = thing; void *bar = malloc(big); memcpy(bar, &foo, sizeof (&foo));
[00:15:02] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[00:17:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:17:47] *** Joins: Betal (~Betal@user/betal)
[00:17:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:18:33] *** Quits: AmR (~AmREiSa@102.44.191.232) (Quit: Konversation terminated!)
[00:20:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:24:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 272 seconds)
[00:24:37] *** Quits: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi) (Quit: Akuli)
[00:25:15] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[00:25:15] *** Joins: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi)
[00:25:16] *** Quits: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi) (Max SendQ exceeded)
[00:25:19] *** Quits: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877) (Ping timeout: 250 seconds)
[00:25:30] *** Joins: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi)
[00:25:31] *** Quits: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi) (Max SendQ exceeded)
[00:26:32] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[00:27:17] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Client Quit)
[00:27:22] *** Joins: calamari (~jjohnston@209.104.4.210)
[00:28:26] *** Joins: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi)
[00:29:28] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (Quit: WeeChat 2.3)
[00:29:43] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[00:29:45] *** Quits: eroux (~eroux@102-65-81-186.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:31:07] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[00:31:37] *** Joins: wyre (~wyre@user/wyre)
[00:31:51] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[00:32:43] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[00:32:57] <calamari> I have a call to vsnprintf that is incorrectly using the first argument value for both %s's of "%s %s"'s only if another printf line is present in the function. If I move that other printf to its own function (forcing it not to be inlined), then the problem "goes away". Obviously, that's not a reasonable fix. My first thought was that I screwed up a pointer somewhere, but I've searched extensively, and even checked things with gdb, valgrind, etc, and I
[00:32:57] <calamari> haven't found that. Any other ideas? (sorry I can't share the code)
[00:34:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:34:49] <calamari> What I observed with gdb is that in the bowls of one of the internal __printf's, that va_arg simply gave the same argument address twice. However, in the initial call, gdb shows it to be two different addresses.
[00:35:43] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:36:26] <calamari> I'm not using va_start recursively, and I'm careful to make sure that va_end is always called, even on an error condition.
[00:37:21] *** Quits: smoke_ (~smoke@user/smoke) (Ping timeout: 252 seconds)
[00:37:27] *** Quits: foul_owl (~kerry@207.244.125.36) (Ping timeout: 250 seconds)
[00:38:14] *** Joins: geeknix (~pi@2001:e68:5432:a291:c354:1aa:688f:1ab0)
[00:38:31] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:38:42] <nitrix> There's no point digging in the printf guts, millions of applications are go through all of its code paths everyday. The bugs people are reporting are a LOT of subtle that what you're describing.
[00:39:25] <nitrix> Yours just sounds like you used it improperly or you UB earlier go unnoticed.
[00:39:47] <nitrix> calamari, Are you on linux or windows?
[00:39:50] <calamari> nitrix: that's true, but in this case I thought it might be worthwhile, since it's an embedded tI implementation of printf
[00:39:57] <nitrix> Oh.
[00:40:42] <nitrix> Have you tried with -fsanitize=undefined,address already?
[00:40:44] <kplant> this sounds vaguely familiar
[00:42:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:42:31] *** Quits: lispy (~lispy@user/lispy) (Remote host closed the connection)
[00:43:52] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[00:44:21] *** Quits: \o\ (~i.am@187.112.46.243) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[00:44:24] *** Joins: seninha (~seninha@user/seninha)
[00:44:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[00:44:55] <kplant> any chance we can see the function containing the call to vsnpritnf() after you answer nitrix's question?
[00:45:34] <calamari> kplant: sorry, I'd like to. Still trying to figure out their answer.. I really hate cmake :)
[00:46:08] *** Quits: ekathva (~ekathva@n3k05e951yzy0eo5x-1.v6.elisa-mobile.fi) (Quit: Leaving)
[00:48:54] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 252 seconds)
[00:49:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:49:46] *** Joins: gry (~quassel@botters/gry)
[00:52:46] *** Joins: foul_owl (~kerry@207.244.125.36)
[00:58:12] *** Quits: nabaiste^ (~nabaiste@50.235.176.163) (Ping timeout: 240 seconds)
[00:59:09] <calamari> nitrix, sorry, I really don't know. Probably not, although I'm not sure how to add it either :)
[01:02:26] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b)
[01:05:49] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[01:07:46] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[01:08:32] <calamari> nitrix, okay I added it. would I expect a compilation error if it found a problem?
[01:10:17] *** Joins: nabaiste^ (~nabaiste@50.235.176.163)
[01:11:13] *** Joins: cousteau (~cousteau@user/cousteau)
[01:12:46] *** Quits: agoodm (~alan@2a00:23a8:4440:7fb:8f5c:cc2f:6765:526d) (Remote host closed the connection)
[01:13:37] *** Joins: immibis (~hexchat@62.156.144.218)
[01:15:17] <calamari> kplant, looking into the docs, I'm not sure if I can use fsanitize.. this is embedded, it's not like it can printf to a terminal. (I was using an sprintf variant)
[01:16:35] <cousteau> back in the day I wanted to use fsanitize on an embedded system.  I *think* you can make fsanitize use the output you want; maybe you can make the "print error messages" function simply print to a memory address and halt the program
[01:16:49] <cousteau> didn't look much into it... but I think the possibility exists
[01:16:53] <calamari> cool
[01:20:52] <SaltHillStroller> Does anyone have a reference on good practices for interfacing with a thread? I.e. I have a thread with a tight loop. I want to disable the thread programatically. Ideally I want to avoid using a mutex to not incur the lock overhead on every loop
[01:21:19] <calamari> cousteau, thanks for the tip, I'm going to try with -fsanitize-undefined-trap-on-error hope it finds something!
[01:21:36] *** Quits: abraxis (~abraxis@user/abraxis) (Ping timeout: 272 seconds)
[01:21:54] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 252 seconds)
[01:22:05] <cousteau> cool!  Glad that I could at least provide inspiration
[01:28:30] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[01:32:41] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:33:10] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[01:33:13] *** Quits: Neutron7 (~monopolys@96.73.191.185) (Remote host closed the connection)
[01:33:23] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[01:33:41] <nitrix> calamari, You have to compile with the flags, then run the program to manifest the problem.
[01:33:56] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[01:34:41] *** Joins: Core8567 (~Core8567@105.67.133.201)
[01:34:52] <nitrix> calamari, It injects checks inline in-between your instructions. It's a more reliable method than how valgrind does things (but Valgrind has the advantage of maturity with rare edge cases).
[01:35:04] <calamari> nitrix, yep. looks like it didn't find anything, or -fsanitize-undefined-trap-on-error wasn't enough to cause a watchdog reset
[01:35:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:35:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:35:05] *** Joins: wroathe (~wroathe@user/wroathe)
[01:35:20] *** Quits: magla (~gelignite@55d42258.access.ecotel.net) (Quit: Stay safe!)
[01:35:33] <calamari> nitrix, I expected valgrind not to do much, as I'm not using malloc anywhere
[01:36:03] <nitrix> Valgrind has an UB detector, but it's not as well known as its leak detector.
[01:36:08] <calamari> (but I did try it with a modified copy on linux)
[01:36:33] <calamari> of course me modifying it to work on linux kinda invalidates the test too :)
[01:36:41] *** Joins: magla (~gelignite@55d42258.access.ecotel.net)
[01:37:00] <nitrix> So you tried -fsanitize-undefined-trap-on-error, what about -fsanitize=undefined,address?
[01:37:10] <nitrix> It can be a bad memory operation that goes out of bounds.
[01:37:16] *** Quits: magla (~gelignite@55d42258.access.ecotel.net) (Remote host closed the connection)
[01:37:17] <calamari> nitrix, yes both at the same time
[01:37:25] *** Joins: Devinn (~Devinn@searspoint.nvidia.com)
[01:37:49] <calamari> nitrix, -fsanitize-undefined-trap-on-error is for embedded because there's no way to print out an error
[01:38:01] <nitrix> Crap :/ I was hoping it was something corrupting an important value on the stack that printf internally relied on.
[01:38:52] <nitrix> Can you share the surrounding code a little?
[01:39:07] <calamari> well, dropping down to -O1 "fixes" it. (this feels like the classic recompile with debugging symbols and the problem goes away)
[01:40:03] *** Quits: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com) (Ping timeout: 252 seconds)
[01:40:47] <nitrix> How quick is your development cycle? We can try a couple of different -O1 + some O2 flags until we can reproduce it.
[01:41:08] <calamari> nitrix, do you happen to have a list of -O2 flags?
[01:41:36] <calamari> oh, I just found one
[01:41:39] <nitrix> calamari, https://gist.github.com/nitrix/94889bcd1465bf2d3dd91f5a2ecdfb9a
[01:41:44] <calamari> https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
[01:42:20] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:42:25] <calamari> I can do a log(n) on those and hopefully narrow it down
[01:42:35] <nitrix> Usual culprits could be -finline-functions, -fpartial-inlining, -fexpensive-optimizations and the dreaded -fstrict-aliasing.
[01:42:53] <calamari> thanks, I'll try those first
[01:43:57] *** Joins: abf (~abf@user/abf)
[01:44:07] <nitrix> It doesn't give us much information, but if it's strict aliasing we can look at pointer usages around the area, inlining maybe what's on the stack, etc.
[01:44:47] <nitrix> That's not a fun situation to be in if even the sanitizers don't pick it up and nothing's obvious with the code.
[01:45:40] *** Quits: Core8567 (~Core8567@105.67.133.201) (Remote host closed the connection)
[01:47:57] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[01:48:04] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:49:57] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[01:50:15] *** Joins: hashfunc1aa5 (~user@162.254.115.155)
[01:52:03] <Dean> What is the best sorting algorithm to put an array in alphabetical order in c? Quick sort or Shell sort?
[01:52:09] <Jenna16bit> qemu/mips branch can run irix, albeit only a headless install - no gfx emulation
[01:54:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:55:35] *** Joins: Atque (~Atque@user/atque)
[01:58:02] *** Joins: pulse (~pulse@user/pulse)
[01:58:23] *** Joins: monkey_ (~user@190.104.116.153)
[01:59:48] <caze> Dean: What is your criteria for "best"? What does the language being C have to do with your choice of algorithm?
[02:00:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[02:01:24] *** Quits: alch (~alch@151.34.194.43) (Ping timeout: 240 seconds)
[02:02:53] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:03:29] *** Joins: alch (~alch@151.68.204.115)
[02:05:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:05:18] <Dean> caze I am new to C. I want to try and learn it as efficiently as I possibly can. I have an array that I'd like to sort alphabetically with the quickest algorithm I can learn. I was thinking quick sort looks very efficient so I wanted to go with that.
[02:05:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:05:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:05:57] *** Joins: wroathe (~wroathe@user/wroathe)
[02:06:10] <caze> Dean: Maybe learn some basic C first.
[02:06:15] <Dean> My code is very micky but I don't want to apply for a job knowing that my code will be inefficient.
[02:06:16] <calamari> Dean: Note that quicksort is not a stable sort. Sometimes that's important: https://stackoverflow.com/questions/1517793/what-is-stability-in-sorting-algorithms-and-why-is-it-important
[02:06:23] <caze> ,kr1-17
[02:06:24] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-17. Write a program to print all input lines that are longer than 80 characters.
[02:06:32] <caze> Dean: Can you do this^
[02:06:39] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[02:06:52] *** Joins: niko3 (~mmk@198-200-92-92.cpe.distributel.net)
[02:07:00] *** Quits: malina (~malina@user/malina) (Ping timeout: 252 seconds)
[02:07:10] <Dean> caze it it a string? i can give it a go.
[02:07:37] <caze> Dean: Do you know how stdin and stdout streams work in C?
[02:08:02] <Dean> no the course gives a custom library that has get input functions. but i think i want to learn about input streams.
[02:08:17] <Dean> i will do that now. thank you caze
[02:09:36] <caze> Dean: https://ideone.com/81STNK This is a program that reads from stdin, and echoes back to stdout.
[02:10:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[02:13:20] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:15:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[02:16:18] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:18:36] *** Parts: niko3 (~mmk@198-200-92-92.cpe.distributel.net) (Leaving)
[02:19:02] <Dean> caze I am fascinated by stable/unstable sorting algorithms. thank you very much. i didn't even know this was a thing.
[02:19:55] <Dean> caze the snippet you share did you write it?
[02:20:12] <caze> Dean: I wasn't the one to tell you about stable sorts.
[02:20:28] <caze> Dean: Yes, I wrote the code snippet. Do you understand it?
[02:21:05] <Dean> calamari thank you for teaching me about stable/unstable sorts!
[02:21:20] <Dean> caze no, i don't. thank you very much. i will now go learn it.
[02:22:38] *** Joins: kuber (~kuber@97-113-220-65.tukw.qwest.net)
[02:23:48] *** Quits: mahmutov (~mahmutov@5.176.27.2) (Ping timeout: 240 seconds)
[02:24:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:25:28] *** Quits: bick (~kotaman@94.46.203.147) (Quit: Lost terminal)
[02:28:42] <Dean> excellent. researching c strings got me to some place i never wanted to go.
[02:30:50] <caze> Dean: There are no strings in this.
[02:31:14] <Dean> i should not look at scanf?
[02:31:32] <caze> Dean: To do this exercise? No.
[02:31:53] <caze> Dean: Start with my example and modify it.
[02:32:46] *** Quits: pizdets (~pizdets@183.182.111.175) (Ping timeout: 250 seconds)
[02:33:20] *** Quits: calamari (~jjohnston@209.104.4.210) (Quit: Leaving)
[02:33:28] *** Quits: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi) (Quit: Akuli)
[02:33:53] *** Joins: pizdets (~pizdets@183.182.115.222)
[02:34:01] <caze> Dean: How would you do it with scanf?
[02:34:59] <Dean> ok i will modify your exercise. i don't know scanf. it was my first time trying to use. one moment please.
[02:35:03] <ChoHag> Don't tease him. Dean: Don't use scanf.
[02:35:12] *** Quits: voidsync (~void@user/voidsync) (Quit: voidsync)
[02:36:30] <Dean> ChoHag hello!
[02:36:59] <ChoHag> Hello, world.
[02:39:20] <Dean> caze if i understand correct. i stop reading input after 80 characters?
[02:39:34] <caze> Dean: No.
[02:39:43] <ChoHag> No you stop checking whether you should fill the buffer up or not.
[02:40:01] <caze> Dean: You only print lines that are longer than 80 characters.
[02:40:11] <caze> Dean: If the line is shorter than 80 characters, you don't print it.
[02:40:28] <Dean> ah, ok ok. so i take all of the inputs separated by enter key and then print back only ones of 80 length.
[02:40:36] <ChoHag> 80+
[02:40:36] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[02:40:37] <Dean> or longer. ok
[02:40:43] <Dean> ok thank you.
[02:41:25] <caze> gtg
[02:42:03] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Quit: WeeChat 3.3)
[02:42:15] <Dean> bye caze thank you
[02:42:43] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:44:13] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[02:45:26] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[02:45:48] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:48:34] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[02:48:48] *** Quits: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com) (Ping timeout: 252 seconds)
[02:49:21] <gry> hello
[02:49:55] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[02:50:12] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[02:51:00] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[02:51:27] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:51:31] *** Joins: pulse_ (~pulse@user/pulse)
[02:54:18] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[02:55:19] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:58:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:58:18] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:59:13] *** pulse_ is now known as pulse
[03:01:14] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Read error: Connection reset by peer)
[03:01:21] *** Joins: superboot (~agentgasm@user/superboot)
[03:03:55] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:05:39] *** Joins: soapsudsxx (~soapsudsx@209.221.40.136)
[03:10:59] *** Quits: Dsee4 (~DSee@173.237.207.67) (Ping timeout: 256 seconds)
[03:11:22] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[03:16:43] <Dean> ChoHag would it be something like this? https://paste.debian.net/1230916/
[03:17:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Read error: Connection reset by peer)
[03:18:16] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:ad66:4f1c:f9e8:2233)
[03:18:16] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:ad66:4f1c:f9e8:2233) (Changing host)
[03:18:16] *** Joins: skapata (~Skapata@user/skapata)
[03:19:31] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[03:19:54] *** Joins: Preddy (~Preddy@92.44.103.122)
[03:21:12] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:24:21] *** Joins: chung (uid498429@id-498429.helmsley.irccloud.com)
[03:24:43] *** Joins: crashrep (~crashrep@user/crashrep)
[03:25:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:27:49] *** Quits: kuber (~kuber@97-113-220-65.tukw.qwest.net) (Quit: leaving)
[03:29:06] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:33:01] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:33:37] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 240 seconds)
[03:33:54] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 252 seconds)
[03:34:47] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Ping timeout: 256 seconds)
[03:35:06] *** Joins: hanzo (uid532183@user/hanzo)
[03:35:21] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (Ping timeout: 256 seconds)
[03:35:24] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[03:37:03] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:37:44] *** Quits: chung (uid498429@id-498429.helmsley.irccloud.com) ()
[03:38:11] *** Joins: asdflkj_sh (asdflkj@2605:6400:10:fe:bebd:57ba:41a5:636d)
[03:39:50] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Quit: Lost terminal)
[03:40:18] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:40:30] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 252 seconds)
[03:41:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[03:42:03] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[03:44:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:49:42] *** Joins: seninha (~seninha@user/seninha)
[03:50:24] *** Joins: paulo (paulo@user/paulo/x-9032687)
[03:50:40] *** Joins: sandman13 (sandman13@sandman13.jujube.ircnow.org)
[03:51:02] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[03:54:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:55:19] *** Joins: ferdna (~ferdna@user/ferdna)
[03:55:58] *** Joins: SudoBash (~SudoBash@45.43.99.99)
[03:56:04] *** Joins: Wulf (~Wulf@user/wulf)
[03:57:18] *** Quits: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com) (Changing host)
[03:57:18] *** Joins: abraxis (~abraxis@user/abraxis)
[03:57:41] *** Parts: abraxis (~abraxis@user/abraxis) ()
[03:57:58] *** Joins: abraxis (~abraxis@user/abraxis)
[03:59:33] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:59:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:59:33] *** Joins: wroathe (~wroathe@user/wroathe)
[04:01:00] *** Quits: Devinn (~Devinn@searspoint.nvidia.com) (Ping timeout: 240 seconds)
[04:03:43] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 250 seconds)
[04:05:57] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:06:25] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:08:32] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[04:08:48] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[04:10:12] *** Quits: Preddy (~Preddy@92.44.103.122) (Quit: Leaving)
[04:10:33] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b)
[04:13:11] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: â™« I can't forget the day I shot that network down â™«)
[04:18:30] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-a8bd-9389-6663-3ff5.fixed6.kpn.net)
[04:18:58] *** Joins: cousteau (~cousteau@user/cousteau)
[04:21:41] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.134)
[04:21:52] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-33.cspire.com)
[04:22:47] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-a8bd-9389-6663-3ff5.fixed6.kpn.net) (Ping timeout: 250 seconds)
[04:28:12] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.134) (Ping timeout: 240 seconds)
[04:30:46] *** Quits: Zenton (~user@user/zenton) (Ping timeout: 245 seconds)
[04:31:10] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:34:08] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 272 seconds)
[04:34:24] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 252 seconds)
[04:34:25] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-33.cspire.com) (Read error: Connection reset by peer)
[04:35:23] *** Joins: Zenton (~user@user/zenton)
[04:36:32] *** Quits: SudoBash (~SudoBash@45.43.99.99) (Quit: Connection closed)
[04:36:45] *** Joins: Betal (~Betal@user/betal)
[04:40:56] *** Joins: gnoo (gnoo@user/gnoo)
[04:41:02] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.139)
[04:42:22] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[04:44:19] *** Joins: Fl1pFl0p (~FlipFlop@user/fl1pfl0p)
[04:46:05] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[04:46:45] *** Joins: gry (~quassel@botters/gry)
[04:47:37] *** Quits: Zenton (~user@user/zenton) (Read error: Connection reset by peer)
[04:47:50] *** Joins: Zenton (~user@user/zenton)
[04:47:57] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[04:48:42] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.139) (Ping timeout: 272 seconds)
[04:51:34] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.134)
[04:52:34] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-d449-2685-1032-d72e.res6.spectrum.com) (Remote host closed the connection)
[04:52:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[04:54:54] *** Joins: Rynn (~rynn@216.30.158.198)
[04:55:08] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:00:15] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.134) (Ping timeout: 252 seconds)
[05:00:48] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 252 seconds)
[05:02:19] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.137)
[05:06:02] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:08:28] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[05:09:03] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.137) (Ping timeout: 252 seconds)
[05:09:03] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 252 seconds)
[05:12:30] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.139)
[05:15:44] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:19:44] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.139) (Ping timeout: 272 seconds)
[05:20:30] *** Joins: fstd_ (~fstd@xdsl-81-173-174-103.nc.de)
[05:21:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:23:06] *** Quits: slavfox (~slavfox@93.158.232.111) (Quit: ZNC 1.8.2 - https://znc.in)
[05:23:39] *** Quits: fstd (~fstd@xdsl-87-79-44-63.nc.de) (Ping timeout: 250 seconds)
[05:23:54] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[05:23:56] *** Joins: slavfox (~slavfox@93.158.232.111)
[05:25:24] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[05:25:42] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[05:26:53] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.139)
[05:30:30] *** Joins: segnior (segnior@user/segnior)
[05:31:36] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.139) (Ping timeout: 252 seconds)
[05:32:38] *** Joins: Devinn (~Devinn@searspoint.nvidia.com)
[05:34:48] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.140)
[05:35:03] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[05:35:16] *** Joins: superbomba (~superbomb@189.63.201.201)
[05:40:23] *** Joins: vysn (~vysn@user/vysn)
[05:41:24] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.140) (Ping timeout: 240 seconds)
[05:43:41] *** Joins: karakedi (~eAC53C340@user/karakedi)
[05:43:44] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[05:44:59] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:45:05] *** Joins: oxfuxxx (~oxfuxxx@185.153.176.137)
[05:48:40] *** Quits: Zenton (~user@user/zenton) (Read error: Connection reset by peer)
[05:48:54] *** Joins: Zenton (~user@user/zenton)
[05:49:18] *** Joins: elves-upstate (~elves-ups@129-2-180-37.wireless.umd.edu)
[05:51:48] *** Quits: oxfuxxx (~oxfuxxx@185.153.176.137) (Ping timeout: 240 seconds)
[05:58:12] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:58:56] *** Quits: alch (~alch@151.68.204.115) (Read error: Connection reset by peer)
[06:01:14] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[06:01:28] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[06:03:47] *** Joins: alch (~alch@151.34.196.167)
[06:08:05] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[06:10:53] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Remote host closed the connection)
[06:12:35] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Remote host closed the connection)
[06:12:55] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[06:12:56] *** Quits: Devinn (~Devinn@searspoint.nvidia.com) (Ping timeout: 272 seconds)
[06:13:14] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[06:18:25] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:20:01] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[06:22:21] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[06:23:11] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[06:30:12] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 240 seconds)
[06:31:24] *** Joins: gry (~quassel@botters/gry)
[06:33:17] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:33:20] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:35:38] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[06:35:58] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:37:21] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[06:43:28] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:44:01] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[06:45:22] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:46:12] *** Joins: nitrix (~nitrix@user/nitrix)
[06:48:06] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[06:48:21] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:48:39] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[06:49:08] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:744d:d33e:d157:deba)
[06:49:35] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:49:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:52:24] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:15] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[06:53:34] *** Joins: System_Error (~SystemErr@user/systemerror)
[06:55:21] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:55:47] *** Joins: nitrix (~nitrix@user/nitrix)
[06:58:18] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:58:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:58:18] *** Joins: wroathe (~wroathe@user/wroathe)
[06:59:20] *** Joins: jerware (~jerware@c-107-3-54-201.hsd1.ct.comcast.net)
[06:59:22] <jerware> Hello.
[07:00:45] <omegatron> o/
[07:02:25] *** Joins: l0rd_hex (~jubjub@upperbound.ca)
[07:02:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[07:03:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:03:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:03:32] *** Joins: wroathe (~wroathe@user/wroathe)
[07:03:59] <l0rd_hex> Greetings all, I have a program that does a fork and then execvp which works fine, I do some other code and do another fork then execvp but that ones doesn't appear to run (I never see output from that second command) -- do I need to wait() all of my forks or something?
[07:04:04] <l0rd_hex> This is under Linux
[07:05:21] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[07:05:36] *** Quits: elves-upstate (~elves-ups@129-2-180-37.wireless.umd.edu) (Remote host closed the connection)
[07:05:57] *** Joins: nitrix (~nitrix@user/nitrix)
[07:06:46] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[07:06:56] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: â™« I can't forget the day I shot that network down â™«)
[07:07:31] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:10:12] <l0rd_hex> weirdly enough it's as if the second execvp doesn't happen as it continues to execute some code after that
[07:10:21] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[07:10:29] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 250 seconds)
[07:10:36] *** Quits: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8) (Quit: Leaving)
[07:10:56] *** Joins: nitrix (~nitrix@user/nitrix)
[07:11:24] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b) (Ping timeout: 240 seconds)
[07:13:03] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:5cbe:f31d:a30b:eccd)
[07:13:17] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:17:22] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:19:09] <Maxdamantus> l0rd_hex: you know that `execvp` replaces the current process, right? so unless `execvp` fails, any code directly following it will not be executed.
[07:20:21] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[07:20:31] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:20:36] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 240 seconds)
[07:21:48] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[07:24:43] <l0rd_hex> Maxdamantus: yes, that's why I thought it was quite strange -- I actually figured out the issue, execvp was returning -1 and errno was set to bad address ... turns out I had "NULL" not NULL in my execvp args :|
[07:24:44] <wroathe> Maxdamantus: I assume they mean they're execvp'ing the forked process
[07:25:35] <vysn> nitrix: it was off topic
[07:25:36] <l0rd_hex> wroathe: that's correct, the child process was running execvp but because execvp was returning -1 it was continuing to operate
[07:25:49] <l0rd_hex> sorry for the noise folks :)
[07:26:20] <Maxdamantus> wroathe: sure, my concern was just about the second `fork` being done again from the process that didn't do the first `execvp`.
[07:28:26] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[07:29:58] *** Quits: nabaiste^ (~nabaiste@50.235.176.163) (Remote host closed the connection)
[07:31:49] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[07:34:56] *** Joins: joolma (uid527699@id-527699.uxbridge.irccloud.com)
[07:35:37] *** Joins: angelacrust (~angelacru@182.68.208.211)
[07:35:47] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-c16d-1c85-12d9-4c1b.fixed6.kpn.net)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:10] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) (Client Quit)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:32] *** Joins: joolma (uid527699@id-527699.uxbridge.irccloud.com)
[07:39:48] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-c16d-1c85-12d9-4c1b.fixed6.kpn.net) (Ping timeout: 240 seconds)
[07:41:04] *** Quits: angelacrust (~angelacru@182.68.208.211) (Quit: Client closed)
[07:42:44] *** Joins: angelacrust (~angelacru@182.68.208.211)
[07:49:40] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[07:49:45] *** Joins: off^ (~off@50.235.176.163)
[07:52:13] *** Quits: reset (~reset@user/reset) (Quit: reset)
[07:54:54] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[07:55:05] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:55:13] *** Quits: kts (~kts@103.73.237.56) (Quit: Konversation terminated!)
[07:57:07] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:d82c:b1bb:14ef:c184)
[07:58:55] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:03:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[08:04:30] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[08:05:40] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 272 seconds)
[08:06:40] *** Joins: smoke_ (~smoke@user/smoke)
[08:08:55] *** Quits: smoke_ (~smoke@user/smoke) (Client Quit)
[08:09:09] *** Joins: smoke_ (~smoke@user/smoke)
[08:09:55] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:10:08] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:12:26] *** Quits: smoke_ (~smoke@user/smoke) (Client Quit)
[08:12:41] *** Joins: smoke_ (~smoke@user/smoke)
[08:13:49] *** Quits: smoke_ (~smoke@user/smoke) (Client Quit)
[08:13:58] *** Joins: smoke_ (~smoke@user/smoke)
[08:13:58] *** Quits: smoke_ (~smoke@user/smoke) (Client Quit)
[08:18:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:18:58] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 272 seconds)
[08:25:07] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:26:51] *** Quits: superbomba (~superbomb@189.63.201.201) (Quit: Client closed)
[08:28:16] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[08:29:44] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 272 seconds)
[08:29:53] *** Joins: LangerJan (~jan@user/langerjan)
[08:32:10] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:40:34] *** Joins: morph (~morph@31.134.244.23)
[08:45:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[08:48:57] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:5cbe:f31d:a30b:eccd) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:55:26] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Remote host closed the connection)
[08:57:00] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[08:58:56] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951)
[08:59:12] *** Joins: ekathva (~ekathva@n3k04mk1g2jsn5ncy-1.v6.elisa-mobile.fi)
[09:02:15] *** Joins: kuber (~kuber@97-113-220-65.tukw.qwest.net)
[09:03:03] *** Joins: blueagain (~blueagain@user/blueagain)
[09:06:41] *** Quits: Grell (~john@ool-4579c605.dyn.optonline.net) (Remote host closed the connection)
[09:07:08] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:10:39] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[09:11:38] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:12:59] *** Quits: kuber (~kuber@97-113-220-65.tukw.qwest.net) (Quit: leaving)
[09:18:57] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.186)
[09:25:25] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: quitter)
[09:26:41] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[09:32:53] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[09:34:06] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Remote host closed the connection)
[09:34:23] *** Joins: Inline (~Inline@2a02:908:1252:7a80::d7)
[09:36:36] <the_lanetly_052> Hi, does it make sense to use i & 0xffffffff instead of i % 0xffffffff to do wrap around of int32
[09:37:43] <dave0> the_lanetly_052: they are not eqivalent, but no, it wont work because 0xffffffff is not representable in int32_t
[09:38:10] <dave0> wait that's not quite right
[09:38:46] <the_lanetly_052> i meant using with uint32
[09:39:21] <sham1> As said, AND 0xffffffff is not the same as REM 0xffffffff
[09:39:22] <dave0> oh uint32_t yeah there's no problem with overflow there ... you don't need to & 0xffffffff at all with a uint32_t
[09:39:36] <sham1> You might need it with uint_least32_t
[09:39:42] <sham1> But that's not in use, soâ€¦
[09:40:49] <sham1> AND 0xffffffff is however the same as REM 0x100000000 for an unsigned integer
[09:41:14] <dave0> the_lanetly_052: c says that uint32_t is guaranteed to wrap, and & 0xffffffff is a no-op .. you may wish to use & as sort of documentation (eg. tell the reader that you're expecting it to wrap) but it's not required
[09:41:16] <the_lanetly_052> dave0: you mean that CPU does it anyway?
[09:41:47] <dave0> the_lanetly_052: c requires it, so it makes the cpu do it, yes
[09:41:51] <sham1> And depending on the context, I'd either use the reminder version or the AND, but I do prefer the reminder because it's closer to a modulo than an AND, even if the modulo would be compiled to an AND
[09:41:56] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) (Ping timeout: 272 seconds)
[09:42:04] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:42:45] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[09:42:57] <the_lanetly_052> maybe AND should be used on the specific architectures because of integer overflow exception
[09:43:15] <dave0> the_lanetly_052: unsigned doesn't overflow, it is guaranteed to wrap
[09:43:39] <dave0> the_lanetly_052: and uint32_t specifies a guaranteed size, so & 0xffffffff is a no-op
[09:45:07] <dave0> if it makes your code clearer, go ahead and &
[09:45:13] <dave0> it wont hurt
[09:45:29] <caze> It'll only hurt other people reading your code.
[09:46:05] *** Joins: P_Dumbledore (~Prof_Dumb@2409:4042:4d4d:4ea3:ff80:ff98:3389:6ecf)
[09:48:27] *** Joins: Grell (~john@ool-4579c605.dyn.optonline.net)
[09:49:38] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[09:50:36] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Ping timeout: 240 seconds)
[09:50:41] <sham1> It hurts me when people try to be clever with modulos of powers of 2, using AND for them instead of just doing the modulo
[09:52:09] <sham1> Well, reminder because C doesn't have a modulo operator
[09:55:54] *** Joins: euouae (~euouae@user/euouae)
[09:56:05] <the_lanetly_052> yes dave0 that makes sense with uint instructions only affect Carry flag
[09:56:56] <caze> C doesn't have a carry flag.
[09:56:58] <euouae> Hello
[09:57:11] <the_lanetly_052> CPU does have
[09:57:17] <euouae> What does `static` in `static foo_t f() { .. }` mean?
[09:57:28] <sham1> euouae: It means static linkage
[09:57:36] <euouae> got it, thank you
[09:57:38] <sham1> That is, the `f` is not exposed outside of the current translation unit
[09:57:43] <caze> the_lanetly_052: That is irrelevant.
[09:57:53] <sham1> C does not care about your CPUs
[09:58:24] <caze> (doubly so, because unsigned wrap around doesn't have any use for a carry flag)
[09:59:16] <sham1> If you're doing stuff that relies on certain architecture things, you're not really writing C as much as writing a dialect related to C which happens to know about a given architecture
[09:59:35] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[10:00:29] <the_lanetly_052> caze: are you sure about that? "because unsigned wrap around doesn't have any use for a carry flag"
[10:00:46] <caze> the_lanetly_052: Yes.
[10:00:59] <the_lanetly_052> when I do mov eax, 0xffffffff add eax, 1 it does set CF
[10:01:06] <sham1> C doesn't care
[10:01:24] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (Ping timeout: 240 seconds)
[10:01:32] <sham1> C doesn't concern itself with the instructions, for it only specifies an abstract machine
[10:01:34] <the_lanetly_052> I understood C doesn't care I am talking on the CPU lvl :D
[10:01:36] <euouae> why do you keep saying C doesn't care?
[10:01:49] <euouae> Isn't #C a general channel, all-things-C-related?
[10:02:21] <caze> the_lanetly_052: Do you call that wrap-around?
[10:02:24] <euouae> I'm asking because now I have a question related to debugging but I'll hold off to it if this is ISO-C only...
[10:02:29] <caze> the_lanetly_052: Most people call that overflow.
[10:02:48] <the_lanetly_052> caze: Yes it is wrap-around operation
[10:02:50] *** Quits: alch (~alch@151.34.196.167) (Ping timeout: 272 seconds)
[10:03:04] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[10:03:19] *** Joins: lleo (~leo@188.206.65.250)
[10:03:28] <sham1> It's overflow at the CPU level, but it does indeed wrap around if you only look at EAX. Things would get interesting with RAX though
[10:03:46] <caze> the_lanetly_052: Did you know that the designers of the C language wrote the spec to accomodate architectures that do not have such a feature?
[10:04:07] *** Joins: alch (~alch@151.68.151.0)
[10:04:14] <dave0> your computer is a PDP-11
[10:04:52] <euouae> my question is this, I want to debug the gpg binary of my Fedora distribution using gdb. How should I do this?
[10:05:05] <sham1> You install the debug info
[10:05:17] <euouae> sham1 and then how can I set a breakpoint at a source line?
[10:05:20] <sham1> dnf debuginfo-install gpg with the version set
[10:05:25] <sham1> euouae: with the b command
[10:05:36] <sham1> Because the debug information comes with debug sources
[10:05:40] <the_lanetly_052> caze: I just trying to understand it at the CPU level that's why I am asking mostly about that
[10:05:41] <euouae> ah!
[10:05:45] <euouae> That's great, thank you sham1
[10:05:45] <caze> Anyhow,  <the_lanetly_052> yes dave0 that makes sense with uint instructions only affect Carry flag
[10:06:00] *** Joins: teepee (~teepee@openscad/teepee)
[10:06:06] <caze> That does not make sense. A carry flag is not needed for that operation.
[10:06:37] <sham1> Yeah, the carry flag is irrelevant for that, unless one was doing bignum arithmetic in which case they'd be hand-rolling assembly anyway
[10:06:44] <sham1> Or using checked integers of some sort
[10:07:00] <caze> the_lanetly_052: Maybe try to understand it at the C level first? Then you can try to understand how various implementations use their native architectures to attempt to fullfill the requirements as dictated by the C spec.
[10:08:21] <dave0> you could argue that c specifies some cpu, but the compiler translates that to your actual cpu
[10:08:26] <the_lanetly_052> yes make sense
[10:08:51] <dave0> c's machine doesn't have a notion of carry flag
[10:09:14] <sham1> The C machine would be a weird CPU
[10:09:21] <caze> the_lanetly_052: For instance, the spec actually says this: "... the value is converted by repeatedly adding or subtracting one more than the maximum value that can be represented in the new type until the value is in the range of the new type."
[10:10:12] <caze> the_lanetly_052: In the case where you have for example, int i = INT_MAX; unsigned char u = i;
[10:11:19] <caze> the_lanetly_052: In this case, 256 is repeatedly subtracted from INT_MAX until you get a value that unsigned char can hold.
[10:11:44] <sham1> mod 2^8
[10:12:15] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[10:13:57] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[10:13:59] <the_lanetly_052> caze: Is this stuff done by C yes?
[10:14:24] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Client Quit)
[10:14:36] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[10:15:00] *** Quits: hashfunc1aa5 (~user@162.254.115.155) (Ping timeout: 240 seconds)
[10:15:33] <dave0> the_lanetly_052: the c spec says what happens and the compiler writes machine code for your computer to do it
[10:15:57] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[10:16:07] <dave0> the_lanetly_052: you as the programmer must also follow the c spec .. c spec tells you what you must do aswell
[10:16:40] <dave0> otherwise it's anarchy
[10:17:13] <apotheon> nothing wrong with anarchy
[10:17:16] <apotheon> and with that: g'night
[10:17:25] <the_lanetly_052> yes :D I understood thanks dave0 and caze for clear explanation
[10:17:32] <dave0> nite apotheon
[10:19:05] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[10:19:52] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[10:20:03] <euouae> sham1, but can I run gdb on a running process?
[10:20:18] <euouae> or should I restart gpg-agent with a gdb instance?
[10:20:31] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:20:42] <the_lanetly_052> yes use gdb --pid=123 passing your process id instead of 123
[10:20:43] <sham1> euouae: attach
[10:20:48] <euouae> nice, thanks
[10:20:48] <sham1> That works as well
[10:22:22] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[10:24:25] *** Quits: lleo (~leo@188.206.65.250) (Quit: butterflies in 1024 bits mobius trumpets)
[10:26:18] <angelacrust> Does anyone here use Vim for C programming? What's your setup like?
[10:29:29] <the_lanetly_052> yes I use but with simple setup
[10:29:39] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[10:29:49] <angelacrust> Do you have the integrated terminal enabled?
[10:29:55] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:30:20] <angelacrust> Or like, how do run c files from vim?
[10:30:23] <angelacrust> *you
[10:31:28] *** int is now known as Ox4
[10:32:27] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 252 seconds)
[10:32:39] <the_lanetly_052> no, i just use tmux with two windows one window is to use vim other is to run
[10:32:47] <nomagno> ^
[10:32:48] <angelacrust> oh i see
[10:33:00] <nomagno> In my case I just open a new i3 terminal window but yeah
[10:33:18] <euouae> angelacrust https://jonasdevlieghere.com/vim-lsp-clangd/
[10:33:31] <euouae> I use doom-emacs myself
[10:33:31] *** Quits: P_Dumbledore (~Prof_Dumb@2409:4042:4d4d:4ea3:ff80:ff98:3389:6ecf) (Quit: Leaving)
[10:33:55] <angelacrust> thanks so much
[10:34:05] <angelacrust> but I'm using coc.nvim for now
[10:34:51] <angelacrust> It would take too much time to configure the lsp client
[10:35:58] *** Joins: malina (~malina@user/malina)
[10:38:35] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:38:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:39:34] <euouae> really?
[10:39:40] <euouae> I think it works out of the box on doom emacs
[10:39:40] <angelacrust> yep
[10:40:03] <angelacrust> I believe I have to write some code in lua in order to run the lsp client
[10:40:16] <angelacrust> And coc.nvim works fine without any hassle
[10:40:32] <angelacrust> You just have to do `:CocInstall <lsp-server>`
[10:45:26] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:48:35] <goated> on https://en.wikipedia.org/wiki/C_data_types it says that a signed 16 bit int decimal range is âˆ’32767 to +32767 but 2^15 is 32768, some sites also say -32768 to 32767 or -32768 to 32768. isn't it -32768 to 32768?
[10:49:20] *** Joins: ekathva_ (~ekathva@n3k06ap29nlro92ao-1.v6.elisa-mobile.fi)
[10:49:28] *** Quits: ekathva_ (~ekathva@n3k06ap29nlro92ao-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[10:49:40] <sham1> goated: it depends on if you have sign&magnitude, 1's complement or 2's complement for your signed representation
[10:50:01] <ChoHag> It's INT_MIN .. INT_MAX.
[10:50:01] <sham1> The standard only gives the least restrictive guarantees about the bounds
[10:50:06] <sham1> Soâ€¦ that, yes
[10:50:30] *** Joins: eddybilley (~freddieti@217.119.232.174)
[10:50:58] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[10:51:09] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[10:51:23] <goated> oh I've heard of those terms but haven't read about them
[10:51:23] <angelacrust> The general rule is that the range varies from -2^n to 2^n - 1 where is the number of bits. IIRC
[10:51:24] <goated> thanks
[10:51:48] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[10:51:59] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:52:38] *** lukedashjr is now known as luke-jr
[10:52:56] *** Quits: eddybilley (~freddieti@217.119.232.174) (Read error: Connection reset by peer)
[10:55:18] *** Joins: eddybilley (~freddieti@217.119.232.174)
[10:55:49] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[10:56:31] <dave0> goated: it is for compatibility with machines that don't exist anymore
[10:57:07] <ChoHag> *Mostly* don't exist.
[10:57:30] <sham1> C2023 is getting rid of non-2's complement
[10:57:32] <sham1> Rejoice!
[10:57:49] <ChoHag> Some of them do. And some of them still run your bank or insurance company or military widget.
[11:01:00] *** Joins: savolla (~quassel@84.44.28.28)
[11:01:20] *** Joins: raym (~raym@user/raym)
[11:02:49] <euouae> goated you can't fix -2^n..2^n in n+1 bits
[11:03:19] <euouae> fit*
[11:03:56] *** Joins: kts (~kts@103.73.237.99)
[11:04:56] <goated> oh
[11:05:27] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 252 seconds)
[11:05:39] *** Quits: morph (~morph@31.134.244.23) (Quit: leaving)
[11:06:06] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:07:25] <novns> what would be a proper name for a function that returns the content of a buffer and resets the buffer
[11:08:02] *** Joins: jellie (~luv_panda@user/jellie)
[11:08:39] <novns> dequeue?
[11:09:02] <dave0> naming stuff is hard :-(
[11:09:03] <euouae> scoop
[11:09:36] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[11:09:39] <novns> let it be deq()
[11:09:51] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[11:10:05] <euouae> deq is a pretty bad name imho, at least go with a complete word
[11:10:21] <novns> dequeueueue then
[11:12:49] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[11:13:12] <Beastie> return_buffer_contents_and_reset() ?
[11:13:51] <Beastie> would not be better to have two functions for that (one to return buffer contents and the other to reset it)?
[11:15:40] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 272 seconds)
[11:16:46] <dave0> depends if reading the buffer is destructive
[11:17:21] <sham1> Could still be decomposed into two operations internall
[11:17:22] <dave0> the terminal is like that.. you can't poll for a character without consuming the character
[11:17:58] <novns> Beastie, there will be get() and reset() too, but you need to call the both too often
[11:18:05] <dave0> have to set up a buffer
[11:18:21] <novns> *them both
[11:19:04] <Beastie> then call it get_n_reset()
[11:19:20] <dave0> get'n'forget
[11:19:40] <novns> rock_n_roll()
[11:19:44] <Beastie> get_n_destroy() :)
[11:19:54] <Beastie> get_n_kill()
[11:20:10] <novns> snatch() is the perfect name
[11:20:11] <Beastie> I like the name rock_n_roll()
[11:20:27] <Beastie> call it apsifjapsfa()
[11:20:58] <novns> or grab()
[11:21:03] <Beastie> there should be a website to solve all these problems.
[11:22:16] <Beastie> that site could be used also to select a proper password in a standard and uniform manner :)
[11:23:21] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:27:09] *** Parts: l0rd_hex (~jubjub@upperbound.ca) ()
[11:27:27] *** Quits: malina (~malina@user/malina) (Ping timeout: 252 seconds)
[11:28:19] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[11:30:04] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:30:29] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:33:18] *** Joins: mrig (~mrig@user/mrig)
[11:39:44] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[11:39:51] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (Ping timeout: 256 seconds)
[11:39:57] *** yagamisa1o is now known as newblue
[11:40:50] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[11:43:47] *** Joins: |7| (~seachdamh@user/seachdamh)
[11:43:48] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:44:21] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[11:45:16] <shiroyasha> novns: I use the `consume` term for that kind of "read-and-destroy" operations, but I might be using it wrong.
[11:45:34] *** Joins: aradesh (~aradesh@user/aradesh)
[11:45:41] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:48:15] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 250 seconds)
[11:49:18] *** Joins: evanextreme_ (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03)
[11:49:33] *** Joins: Rounin (~david@84.212.130.215)
[11:51:07] *** Quits: evanextreme_ (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[11:51:34] *** Joins: evanextreme_ (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03)
[11:52:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:00:06] *** evanextreme_ is now known as evanextreme[away
[12:00:06] *** Quits: evanextreme[away (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:03:13] *** Quits: synbiose (~synbiose@user/synbiose) (Read error: Connection reset by peer)
[12:06:50] *** Joins: darkoccultist (~darkone@user/darkoccultist)
[12:07:22] *** Quits: newblue (~SingSong@120.197.255.246) (Changing host)
[12:07:22] *** Joins: newblue (~SingSong@user/yagamisato)
[12:09:04] *** Joins: teepee_ (~teepee@openscad/teepee)
[12:09:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:09:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:09:57] *** Joins: wroathe (~wroathe@user/wroathe)
[12:10:55] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[12:10:56] *** teepee_ is now known as teepee
[12:11:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:14:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:16:20] *** Joins: jinsl (~jinsl@180.88.96.21)
[12:16:26] *** Joins: evanextreme (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03)
[12:19:11] *** Joins: Telvana2 (~capo@user/telvana)
[12:19:15] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 256 seconds)
[12:21:04] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:23:20] *** Joins: Darkcoal (~user@user/Darkcoal)
[12:27:51] *** Quits: ckdCreations (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[12:28:17] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[12:30:10] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: You have been kicked for being idle)
[12:31:41] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[12:34:14] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:34:33] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[12:36:00] *** Quits: evanextreme (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: Heading out, seeya!)
[12:36:41] *** Joins: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[12:36:51] *** Joins: voidsync (~void@user/voidsync)
[12:38:03] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:42:55] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[12:43:00] <Dean> hello
[12:45:05] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[12:46:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:47:52] *** goated is now known as Xeroine
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:30] *** Quits: SoF (~skius@user/skius) (Quit: Ping timeout (120 seconds))
[12:48:30] *** Quits: skyfall (~skyfall@user/skyfall) (Quit: Ping timeout (120 seconds))
[12:48:42] *** Joins: skyfall (~skyfall@user/skyfall)
[12:48:44] *** Joins: rany0 (~rany@user/rany)
[12:48:44] *** Quits: rany (~rany@user/rany) (Killed (lead.libera.chat (Nickname regained by services)))
[12:48:44] *** rany0 is now known as rany
[12:48:49] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:48:51] *** Joins: SoF (~skius@user/skius)
[12:49:24] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[12:52:42] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[12:53:17] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:53:42] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:d82c:b1bb:14ef:c184) (Quit: Leaving)
[12:53:56] *** Quits: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:54:34] <gry> Dean: hello
[12:54:43] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl)
[12:55:10] *** Joins: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[12:55:48] <vysn> o/
[12:57:21] *** Joins: plastico (~plastico@neomutt/plastico)
[12:57:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[12:59:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c) (Quit: Quit)
[13:01:21] *** Quits: kts (~kts@103.73.237.99) (Quit: Konversation terminated!)
[13:01:52] *** evanextreme is now known as evanextreme[away
[13:01:52] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:03:41] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[13:04:24] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[13:09:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:10:39] *** Joins: libc (~archer@user/tessio)
[13:11:01] <libc> is the new standard character functions are in practical use today ?
[13:11:07] <libc> or it's just like thread.h ?
[13:11:22] <libc> i mean the s_putchar and friends
[13:15:09] *** Quits: jinsl (~jinsl@180.88.96.21) (Quit: Client closed)
[13:22:57] *** Joins: malina (~malina@user/malina)
[13:23:01] *** Quits: asd (~noname@user/asd) (Ping timeout: 240 seconds)
[13:25:04] *** Joins: asd (~noname@user/asd)
[13:25:32] *** Joins: eroux (~eroux@102-65-81-186.ftth.web.africa)
[13:27:26] *** Quits: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se) (Ping timeout: 260 seconds)
[13:27:50] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:29:20] *** Joins: ncrowl (~ncrowl@89-160-83-30.cust.bredband2.com)
[13:34:36] *** Quits: asd (~noname@user/asd) (Ping timeout: 240 seconds)
[13:36:22] *** Joins: cosimone (~user@93-44-187-99.ip98.fastwebnet.it)
[13:36:50] *** Joins: asd (~noname@user/asd)
[13:38:29] <Dean> hello gry
[13:38:34] <Dean> hello vysn
[13:39:28] *** Joins: jellie (~luv_panda@user/jellie)
[13:40:16] <gry> hi
[13:44:36] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[13:50:51] *** Joins: NEYi (~NEYi@109.251.216.38)
[13:51:37] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:d82c:b1bb:14ef:c184)
[13:52:12] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[13:54:06] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[13:57:26] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[13:57:32] *** Joins: \o\ (~i.am@187.112.46.243)
[13:57:56] <libc> in the book it says that we use int variable to store the returned value of getchar() becase it must be big enough to hold EOF.
[13:57:58] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:57:59] <libc> but i don't get it ...
[13:58:17] <libc> the top printable character in ascii is 126
[13:58:43] <libc> and signed char is -128 127
[13:59:07] <libc> even in unsigned character it could work (and it is)
[13:59:34] <supakeen> what is guaranteeing the ascii bits? :)
[13:59:50] <libc> you have enough range
[13:59:56] <libc> for all characters including EOF
[13:59:59] <libc> in char
[14:00:04] <libc> so why use int ?
[14:00:07] <vdamewood> What about Ã©?
[14:00:34] <supakeen> ascii is not the entire set of possible bytes that getchar can get, which would be 0-255; in which case you *do* need a wider type to communicate EOF
[14:01:27] *** Quits: alch (~alch@151.68.151.0) (Ping timeout: 252 seconds)
[14:01:41] <libc> supakeen: my program runs well even with unsigned char
[14:01:49] *** Joins: immibis_ (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de)
[14:02:14] *** Joins: kts (~kts@103.73.237.160)
[14:02:34] <dave0> libc: it needs int to store the range of unsigned char, plus 1 extra value of EOF (EOF is not a character, it's a condition of the FILE)
[14:03:05] <sham1> And if you assign getchar's value to an unsigned char, the EOF will get wrapped into the unsigned char's range
[14:03:22] *** Joins: alch (~alch@151.34.193.137)
[14:03:23] <vdamewood> And there will be one byte that can be confused for EOF.
[14:03:29] <sham1> Yes
[14:03:30] <dave0> libc: assuming unsigned char is 8 bits, getchar needs to return 0-255 plus one more value, which is just big enough to not fit in char
[14:04:12] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[14:04:12] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[14:04:54] <libc> http://ix.io/3PFg   i still don't get how i can EOF is identified in this program
[14:04:55] <dave0> in a sense it's like malloc .. malloc returns a pointer or one additional value of NULL... but in malloc's case, you lose the ability to allocate memory at location 0
[14:04:57] <supakeen> which just means sometimes your 'well running program' will not do so well
[14:05:15] <supakeen> if that ever happens on your inputs, dunno, but it won't run well always
[14:05:37] <sham1> libc: it just happens that you aren't getting a byte 0xFF from your stdin
[14:05:38] <fizzie> libc: It's not, on my system.
[14:05:41] <libc> i don't get how i can terminate this program with EOF
[14:05:45] <fizzie> I can't.
[14:05:49] <sham1> ^D
[14:06:03] <fizzie> If I do a ^D, it just ends up in an infinite loop.
[14:06:18] <dave0> libc: http://www.c-faq.com/stdio/getcharc.html
[14:06:24] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:06:26] <sham1> That's odd
[14:06:26] <fizzie> Likewise if I do `echo foo | ./tmp`, it ends up in an infinite loop.
[14:06:30] <libc> fizzie: do ^C
[14:06:35] <fizzie> ^C is not EOF.
[14:06:55] <fizzie> ^C is a signal to terminate the program abruptly, and just kills it, and has nothing to do with the check for EOF.
[14:06:56] <libc> right it's a signal sent from the OS to close the program ...
[14:06:57] <sham1> But yes, using int for this avoids all the issues
[14:06:58] <libc> i forgot
[14:07:06] <dave0> sham1: nope, c is unsigned, EOF is negative, never equal
[14:07:19] <libc> fizzie: right ^D is not closing
[14:07:35] <supakeen> libc: Correct, because your unsigned char c can never be negative, and EOF is negative.
[14:07:41] <sham1> ,cc (unsigned char)-1
[14:07:44] <candide> sham1: no output: (unsigned char)-1 = 255 '\377'
[14:07:47] <supakeen> So I don't think your program runs well :)
[14:07:48] <sham1> ,cc (unsigned char)-1; EOF;
[14:07:51] <candide> sham1: no output: EOF = -1
[14:07:53] <libc> yeah i know
[14:08:04] <libc> i just wanted to test what happenes when there is no EOF (-1)
[14:08:08] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[14:08:08] <fizzie> ,cc unsigned char c = getchar(); if (c == EOF) puts("EOF"); // you can even get a warning for it if you crank the flags enough
[14:08:10] <candide> fizzie: [warning: comparison is always false due to limited range of data type [-Wtype-limits]] no output: c = 81 'Q'
[14:08:16] <dave0> libc: it's just another silly rule you have to learn :-/
[14:08:34] <libc> fizzie: but for me there is no infinite loop ... it's just ignore (^D)
[14:08:48] <libc> it's implementation defineed ?
[14:08:53] <libc> or UB ?
[14:09:06] <sham1> Or, hm
[14:09:12] <supakeen> there is an infinite loop as the condition can never be true
[14:09:19] <dave0> old unix just crashed if you used an 8-bit character like Â·
[14:09:38] <sham1> Oh yes, that is indeed always an infinite loop because comparison with EOF wouldn't cast EOF to unsigned char
[14:09:55] <supakeen> you could do very bad things like `while(c != (unsigned char) EOF)` but just don't.
[14:10:12] <supakeen> use the `int`
[14:10:21] <libc> ok there is a loop
[14:10:34] <libc> after pressing ^D, it's output nothing
[14:10:51] <libc> damn im not even on section 2 and already have problems
[14:10:53] <libc>  :D
[14:11:01] <libc> but i like it
[14:11:16] <supakeen> probably because you're going on assumptions you have which turn out to be wrong :)
[14:11:47] <vdamewood> Assuming a spherical cow in a vacuum...
[14:11:50] <supakeen> today you learned that reading a 'character' means reading a byte, which means you ain't dealing with ascii.
[14:11:57] <dave0> but in a bad way.. you expect something that reads characters to work with the type `char`
[14:12:17] <supakeen> the C type `char` means `byte`, as a tl;dr
[14:12:20] <dave0> getchar says that right on the box. reads a char
[14:12:50] *** Joins: jellie (~luv_panda@user/jellie)
[14:13:50] <libc> ok i know why unsigned char not working
[14:14:03] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[14:15:32] *** Quits: foul_owl (~kerry@207.244.125.36) (Ping timeout: 272 seconds)
[14:15:33] <libc> brb
[14:16:05] <sham1> Inside your loop you will be able to cast it to an unsigned char, because then you know it's not an EOF
[14:21:21] *** Joins: shivesh (~shivesh@user/shivesh)
[14:24:27] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[14:26:45] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 252 seconds)
[14:27:48] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[14:32:09] *** Joins: angelacrust91 (~angelacru@182.68.208.211)
[14:34:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:34:26] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:32] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[14:34:41] *** Quits: angelacrust (~angelacru@182.68.208.211) (Ping timeout: 256 seconds)
[14:37:12] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[14:37:21] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:38:32] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:39:19] *** Joins: strajder (~strajder@user/strajder)
[14:39:42] *** Joins: foul_owl (~kerry@207.244.125.36)
[14:41:08] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[14:42:02] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[14:47:00] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 240 seconds)
[14:48:10] *** Joins: CaCode (~CaCode@user/cacode)
[14:48:12] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[14:48:39] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:49:00] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:49:24] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[14:49:45] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:50:12] *** Joins: jellie (~luv_panda@user/jellie)
[14:50:14] *** Joins: eddybilley (~freddieti@217.119.232.174)
[14:53:23] *** Quits: baltazar (~baltazar@87-97-81-70.pool.digikabel.hu) (Ping timeout: 256 seconds)
[14:54:48] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 252 seconds)
[14:55:07] *** Joins: baltazar (~baltazar@178-164-240-26.pool.digikabel.hu)
[14:55:27] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[14:55:57] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:00:36] *** Joins: seninha (~seninha@user/seninha)
[15:01:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:3c70:5798:e730:7b29)
[15:01:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:3c70:5798:e730:7b29) (Changing host)
[15:01:32] *** Joins: skapata (~Skapata@user/skapata)
[15:04:26] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.186) (Remote host closed the connection)
[15:04:47] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.186)
[15:05:48] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[15:07:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:07:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:07:25] *** Joins: wroathe (~wroathe@user/wroathe)
[15:10:30] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:12:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[15:13:54] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:14:36] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.186) (Ping timeout: 252 seconds)
[15:15:36] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[15:16:15] <sokan> b = a + b-- will cause undefined error right?
[15:16:17] *** Quits: angelacrust91 (~angelacru@182.68.208.211) (Quit: Client closed)
[15:17:28] *** Joins: eddybilley (~freddieti@217.119.232.174)
[15:19:37] *** Joins: LucaTM (~LucaTM@user/lucatm)
[15:20:14] <dave0> sokan: correct
[15:20:45] <dave0> sokan: keep it simple.. b = a + b - 1;
[15:21:10] <sokan> dave0: I am considering our profs example but b = a + b-- is confusing
[15:21:12] *** Quits: cosimone (~user@93-44-187-99.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[15:21:19] <sokan> what will C do first? @_@
[15:21:55] <dave0> it's something about modifying b twice between sequence points ... but i only know the words "sequence point" from here, it has some special meaning in the c standard
[15:22:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:22:24] <LeoNerd> ;   is a sequence point
[15:22:27] <LeoNerd> ,   is a sequence point
[15:22:29] <LeoNerd> Other operators are not
[15:22:32] <candide> Lï»¿eoNerd, It would seem so.
[15:22:36] <dave0> ? is
[15:22:40] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:22:47] <dave0> && ||
[15:22:50] <sokan> LeoNerd: so basically it does 2 things in b at the same sequence point?
[15:22:54] <LeoNerd> Ohreally? So you can   a++ ? a : 0   and that's fine?
[15:22:56] <sokan> b = this and b--?
[15:23:00] <dave0> LeoNerd: yep
[15:23:06] <LeoNerd> Ah, cute. I didn't realise :)
[15:23:10] <sokan> lol
[15:23:21] <sokan> fun fact: ; is ? in greek XD
[15:23:48] <supakeen> is that actually undefined, the expression is `a + b++` on the rhs, and there's no multiple modification of a value there
[15:23:53] <libc> back
[15:24:13] <libc> ok i know why unsigned char is not a good idea ... but why we would usr int instead of char ?
[15:24:20] <supakeen> i was always taught that, for example, `b++ + b++` is the undefined part because you modify something twice between points
[15:24:54] <dave0> libc: int has enough range to represent an unsigned char (0...255) plus the special extra value EOF
[15:25:02] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[15:25:11] <dave0> supakeen: b = something also modifys b
[15:25:33] <libc> dave0: but we don't really need all the 0...255 range
[15:25:37] <supakeen> mrm, i need to read up some more then, i thought the rhs was evaluated and then assigned to the lhs
[15:25:41] <libc> printable characters in ascii are from 32 to 126
[15:25:46] <supakeen> that it doesn't do what you (possibly) want, sure
[15:25:53] <supakeen> but that it's undefined i did not know :)
[15:26:05] <libc> i missing something and i don't know what ...
[15:26:09] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[15:26:11] <dave0> libc: that is unix thinking... "no one will ever use something besides ascii"
[15:26:13] <sokan> how can I get the bot to do run me some code here?
[15:26:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:768b:56a2:a787:5841) (Ping timeout: 240 seconds)
[15:26:43] <dave0> i don't think the rule is "modifys twice" because i've seen real code that is invalid:   array[i++] = i;
[15:26:54] <libc> dave0: ok if that's your game .. why wouldn't we use long int for UTF characters as well
[15:26:56] <dave0> fizzie will know what the standard says about it
[15:27:06] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[15:27:12] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23)
[15:27:22] <dave0> libc: we have a special type for that...  wchar_t   for wide characters
[15:28:04] <libc> i confused ...
[15:28:28] <libc> i just want to know what im doing
[15:28:55] <dave0> libc: it's a silly thing that you just have to memorize... when you use getchar(), use an int
[15:29:08] <supakeen> dave0: that might be my misconception then :)
[15:29:43] <dave0> i don't know the rules, i go by "rule of thumb"
[15:29:58] <fizzie> The way the rules are phrased (though not really the code that's valid/invalid) changed between C99 and C11, probably as a side effect of introducing the thread model.
[15:30:02] <fizzie> The C99 wording was the more well-known one: C99 6.5p2 "Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored."
[15:30:11] <dave0> hey fizzie :-)
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:39] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:30:52] <fizzie> The C11 version is still 6.5p2, but reads: "If a side effect on a scalar object is unsequenced relative to either a different side effect on the same scalar object or a value computation using the value of the same scalar object, the behavior is undefined."
[15:31:01] *** Joins: csrf (~csrf@user/csrf)
[15:31:21] <dave0> it sounds like legalese
[15:31:31] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:31:50] <fizzie> (Which builds on the "sequenced before" relation of C11 5.1.2.3p3.)
[15:32:59] *** Joins: inlight (~thomas@82.221.128.46)
[15:32:59] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[15:32:59] *** Joins: inlight (~thomas@user/inlight)
[15:33:07] <libc> how does getchar even knows what is a "character" ?
[15:33:21] <dave0> i work around it by limiting my use of ++ and -- because i don't know the rules
[15:33:36] <libc> or at least give point me to where to read
[15:33:46] <NRK> libc: it's all just bytes in memory ;)
[15:33:56] <fizzie> Anyway, `array[i++] = i` is invalid because the side effect of the subexpression `i++` is unsequenced relative to the value computation of the other `i`. (Everything is unsequenced unless there's a specific rule that makes it sequenced, or a sequence point: 6.5p3 "Except as specified later, side effects and value computations of subexpressions are unsequenced.")
[15:33:57] <dave0> libc: in c (and unix) these things (stdin stdout stderr) are just streams of bytes
[15:34:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:35:38] <libc> it doesn't say much about how getchar knows about the length of character or more accurately.. where getchar() function finishes
[15:35:40] <fizzie> For assignment, 6.5.16p3: "The side effect of updating the stored value of the left operand is sequenced after the value computations of the left and right operands. The evaluations of the operands are unsequenced." Meaning `i = i + 1;` is fine because the side effect of `=` updating the value of `i` is sequenced after the value computation in the `i + 1` operand. But the problem in `arr[i++] = i;` is
[15:35:42] <fizzie> the side effect of the ++, not the =.
[15:35:47] <dave0> libc: it's unix-centric .. the terminal sends you bytes that corresponds to keys from the keyboard.. sameish if it was a serial device.. when it's a file it's bytes (if the file is text, you get ascii codes like a terminal)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:16] <fizzie> And... what was the original example? `b = a + b--;`? Yes, same situation: the side effect of `b--` is unsequenced w.r.t. the side effect of the `b = ...`, so it's undefined.
[15:37:34] <dave0> libc: getchar doesn't deal with variable-width-codes like utf-8 ... c predates unicode
[15:38:03] <sokan> https://bpa.st/ZRPA <-- can someonen explain to me why on Earth b = 6?? It's supposed to be 5 no?
[15:38:26] <fizzie> Undefined behavior isn't "supposed" to be anything.
[15:38:52] <libc> dave0
[15:39:03] <dave0> sokan: think of is as dividing by zero... there's no meaningful result
[15:39:07] <libc> ill just keep learning .. maybe it will be clearer when i have more experience
[15:39:09] <libc> thanks
[15:39:41] <dave0> libc: okay.. yeah the explanations are technical :-(
[15:39:58] <dave0> libc: keep in mind that c exists because unix
[15:40:49] <fizzie> Ooh, clang (at least on this system) has -Wunsequenced on by default.
[15:41:04] <fizzie> ,clang int a = 3, b = 3; b = a + b--; // not really a demonstration since candide has all those flags by default, but still
[15:41:06] <candide> fizzie: [warning: multiple unsequenced modifications to 'b' [-Wunsequenced]]
[15:41:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[15:42:11] *** Joins: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de)
[15:42:26] <dave0> sokan: the problem is the compiler is not obligated to tell you when you do that
[15:42:44] <dave0> but yeah clang seems to have an option which is nice
[15:42:50] *** Quits: immibis_ (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[15:43:28] <dave0> it's probably not required to tell you when you divide by 0 either, but it's the same kind of severity with c
[15:44:47] <fizzie> The (not particularly useful) answer to the "why is it 6?" question is "because the code generated by the compiler caused to be 6".
[15:44:49] *** Quits: ekathva (~ekathva@n3k04mk1g2jsn5ncy-1.v6.elisa-mobile.fi) (Quit: Leaving)
[15:46:36] *** Quits: X-Scale (~ARM@31.22.144.77) (Ping timeout: 240 seconds)
[15:48:03] *** Joins: X-Scale (~ARM@92.250.97.81)
[15:48:26] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[15:51:04] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:f176:8e10:ce55:2631)
[15:56:46] *** Quits: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[15:56:54] *** Joins: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de)
[16:00:54] *** Quits: voidsync (~void@user/voidsync) ()
[16:03:05] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[16:04:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[16:06:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[16:06:35] *** Joins: vysn (~vysn@user/vysn)
[16:14:39] <sokan> fizzie: based on calculations I did it should be 5 no?
[16:15:14] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 272 seconds)
[16:15:29] *** Quits: libc (~archer@user/tessio) (Quit: WeeChat 3.4)
[16:15:39] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 252 seconds)
[16:17:06] <sokan> b = a + b-- in my head goes something like: 3 + 3 (since a = 3 and b = 3 from previous calculation of the code), and then we have b - 1 (due to b--). So it's 3 + 2. And that then is assigned to b.
[16:17:22] *** Quits: kts (~kts@103.73.237.160) (Quit: Konversation terminated!)
[16:17:41] <sokan> the other thing I have in mind is that a + b = 6 is assigned to b and then it is lessed by one.
[16:17:46] <sokan> which means again 5
[16:18:18] <sokan> https://upload.vaa.red/eGe4B#53ab9c25b668b89b3dd49842ac7733a7
[16:18:20] <candide> Title of sokan's link: upload vaa â€“ client-side encrypted file upload
[16:18:35] <sokan> I don't get why we have 6 in 3rd printf
[16:19:02] <dave0> sokan: there's no rule on the order of those things.. it would be nice if there was, but that's life
[16:19:47] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[16:19:49] *** Joins: polyrob_ (~rob@user/polyrob)
[16:20:24] <fizzie> Undefined is undefined.
[16:20:45] <fizzie> If you must have an explanation, clang -O0 on this machine generates from `b = a + b--;` the equivalent of `t1 = a; t2 = b; t3 = t2 - 1; b = t3; t1 = t1 + t2; b = t1;` which, if you work through it, will (if a == 3, b == 3) first set b to 2 (from the b--), then set b to 6 (from computing a + old value of b).
[16:20:51] <sokan> my logic isn't flawed I hope :S
[16:20:59] <fizzie> But that's just one possible thing it may do.
[16:21:57] <sokan> my own implementation is another possible one right?
[16:22:21] <fizzie> Since it's undefined, *anything* is a valid answer.
[16:22:27] <sokan> cool cool
[16:22:32] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 240 seconds)
[16:22:32] *** polyrob_ is now known as polyrob
[16:22:43] <dave0> sokan: you could fix it by introducing a new variable...   c = a + b--; b = c;
[16:22:43] <sokan> so happy undefined will not be a valid choice :/
[16:23:15] <fizzie> But your "3 + 2" logic is pretty dubious, because the whole point of the postfix ++ is that its evaluated value is the one *before* decrementing.
[16:23:32] <sokan> I avoid ++ and -- alltogether personally. I only use them on while, for loops etc, for incrementing them as counters.
[16:23:32] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:24:11] <fizzie> If you had done `c = a + b--` it would no longer be undefined and would have to set c == 5 (and b == 2).
[16:24:27] <fizzie> Er, c == 6 I mean.
[16:24:50] <sokan> c = a + b, with b's value the one BEFORE the ++
[16:26:05] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[16:26:25] <dave0> sokan: you could also do    b--; b = a + b;    there's a couple possibilities but you have to break it down into simpler steps
[16:27:53] *** Parts: niko3 (~mmk@198-200-74-246.cpe.distributel.net) ()
[16:27:57] <sokan> Got it :)
[16:27:57] <dave0> recognizing it is the hard part
[16:28:24] <sokan> Me figuring out mistakes of our prof = me understanding C better than him
[16:28:27] <sokan> Thanks to #c :D
[16:28:38] *** Joins: hxztnxt (~hxztnxt@145.red-80-59-28.staticip.rima-tde.net)
[16:28:52] <kplant> easy now, don't be one of those
[16:28:52] <dave0> maybe it just always worked the way the professor thought it did
[16:29:03] <sokan> kplant: :P
[16:29:05] <dave0> for the professors compiler :-)
[16:29:59] <sokan> aye
[16:30:01] <sokan> ah well
[16:30:12] <sokan> Not going to bother more with his example. As long as I learn I'm good :)
[16:30:32] *** Quits: hxztnxt (~hxztnxt@145.red-80-59-28.staticip.rima-tde.net) (Client Quit)
[16:36:29] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:38:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[16:39:51] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 252 seconds)
[16:42:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:42:51] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it) (Read error: Connection reset by peer)
[16:44:45] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[16:45:36] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:45:54] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[16:48:58] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[16:49:36] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[16:54:58] *** Joins: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs)
[16:58:26] *** test_ is now known as _flood
[16:59:58] <NRK> the blind leading the blind...
[17:01:07] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:d82c:b1bb:14ef:c184) (Quit: Leaving)
[17:01:28] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Ping timeout: 272 seconds)
[17:01:35] <clarity> thie hind trailing the anterior..
[17:01:49] *** Joins: joshua (~joshua@user/morguea)
[17:03:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[17:03:29] *** Quits: joshua (~joshua@user/morguea) (Quit: WeeChat 3.4)
[17:04:32] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:07:21] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl) (Ping timeout: 252 seconds)
[17:07:48] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[17:08:29] *** Joins: libc (~archer@user/tessio)
[17:09:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[17:10:13] <libc> !cc
[17:10:28] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[17:11:38] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[17:13:54] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:13:55] <libc> it is the terminal who sends EOF ?
[17:14:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:14:43] <LeoNerd> ?
[17:15:19] <libc> i have a counter loop and when i press ^D when doing some characters before it wouldn't show the output
[17:15:24] <libc> until i ^D on a empty line
[17:15:35] *** Joins: bilbo (~bilbo@host-37-191-190-173.lynet.no)
[17:15:36] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 252 seconds)
[17:15:52] *** Quits: Jong (~Jong@2620:10d:c090:400::5:8039) (Ping timeout: 250 seconds)
[17:16:32] *** Joins: wyfnt (~wyfnt1232@103.214.137.74)
[17:16:35] *** Joins: AmR (~AmREiSa@156.207.156.230)
[17:16:41] <libc> so i suspect getchar() doesn't see ^D because ( the terminal\shell ) don't send it when ^D is not the first "character"
[17:17:32] <libc> am i too noob for #C ?
[17:17:35] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[17:19:50] <supakeen> the answer is just very long
[17:20:00] <supakeen> but you're generally correct yes
[17:20:15] <supakeen> the terminal won't close the pipe until it sees ^D on an empty line
[17:20:41] <supakeen> remember that EOF is not a 'character'
[17:20:53] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[17:21:58] <libc> ok thanks
[17:23:46] *** Joins: pulse (~pulse@user/pulse)
[17:25:06] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:29:31] <ChoHag> It is when you press Ctrl-D.
[17:29:34] <ChoHag> ASCII 0x04.
[17:29:55] <ChoHag> Then the terminal does weird things to it.
[17:31:15] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[17:31:16] *** Joins: voidsync (~void@user/voidsync)
[17:33:02] <ChoHag> I've been trying to find a reasonably good description of the oddity that I read the other day but no joy.
[17:33:20] *** bilbo is now known as talin
[17:34:03] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-230.cspire.com)
[17:34:42] <supakeen> ChoHag: from the perspective of the program it doesn't receive a character, it's that the line discipline is set a specific way which interprets a single ^D on an empty line as a command to close the underlying fd
[17:34:44] <supakeen> afaik
[17:35:03] <ChoHag> Yeah that's what it explained.
[17:36:11] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[17:37:58] *** Joins: slidercrank (~slidercra@user/slidercrank)
[17:40:37] *** Quits: ndorf (~nd@ob.noxio.us) (Ping timeout: 240 seconds)
[17:41:41] *** Joins: ndorf (~nd@ob.noxio.us)
[17:43:31] <fizzie> (You can often also press ^D consecutively on a non-empty line to do an EOF without a trailing newline.)
[17:43:55] <fizzie> (+ "twice" somewhere in that sentence.)
[17:45:20] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[17:46:37] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[17:46:38] *** Joins: Viewday117 (~Viewday@user/viewday)
[17:46:38] *** Viewday117 is now known as Viewday11
[17:47:15] <libc> fizzie: thanks
[17:48:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:48:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:48:58] *** Joins: wroathe (~wroathe@user/wroathe)
[17:49:57] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:690a:d027:b8ea:dcab)
[17:50:35] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[17:51:23] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:5c57:7f45:b808:8adb) (Ping timeout: 250 seconds)
[17:52:32] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:53:33] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 252 seconds)
[17:54:41] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[17:54:51] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:690a:d027:b8ea:dcab) (Ping timeout: 250 seconds)
[17:56:23] *** Joins: masterbuilder (~user@user/masterbuilder)
[17:58:33] *** Joins: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[18:00:12] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:f176:8e10:ce55:2631) (Ping timeout: 240 seconds)
[18:00:27] *** Quits: alch (~alch@151.34.193.137) (Read error: Connection reset by peer)
[18:00:39] *** Joins: joev (~joev@user/joev)
[18:02:28] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[18:03:48] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[18:03:48] *** Joins: alch (~alch@151.34.183.120)
[18:05:00] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[18:05:43] *** Joins: random-nick (~random-ni@87.116.181.150)
[18:05:58] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl)
[18:06:38] *** Joins: masterbuilder (~user@user/masterbuilder)
[18:07:30] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6)
[18:07:42] <NRK> .oO( hmm, you can use strchr() to "cast" const away )
[18:09:07] *** Joins: reset (~reset@user/reset)
[18:10:39] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[18:10:55] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[18:13:17] *** Joins: Devinn (~Devinn@searspoint.nvidia.com)
[18:15:04] <sham1> NRK: sounds horrible
[18:15:14] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6)
[18:16:22] <sham1> Can't really understand why the returned pointer is non-const
[18:16:57] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6) (Ping timeout: 250 seconds)
[18:17:34] *** Joins: malina (~malina@user/malina)
[18:17:53] *** Quits: \o\ (~i.am@187.112.46.243) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:20:16] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[18:22:51] <pragma-> Because C isn't about being a logical rational programming language. It's about being a tool to get a job done. It was cobbled together to meet an immediate need and all the dumb decisions are enshrined in the name of backwards-compatability.
[18:23:36] <pragma-> C is the most redneck-engineered programming languages of them all.
[18:23:42] *** Joins: chung (uid498429@id-498429.helmsley.irccloud.com)
[18:23:43] <pragma-> language
[18:24:29] *** Quits: savolla (~quassel@84.44.28.28) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:24:35] <blueagain> pragma-: dude, you have never seen a single line of code in PHP.
[18:24:45] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[18:25:20] <NRK> lol
[18:25:24] <apotheon> har
[18:25:31] <apotheon> no no no
[18:25:42] <apotheon> PHP isn't pragmatic enough to be "redneck".
[18:25:45] <sham1> Wanna hash a string by its length?
[18:25:53] <sham1> If so, PHP is for you!
[18:25:54] <apotheon> It would need to have more thought put into it to be pragmatic.
[18:25:55] <NRK> i guess you could return an offset rather than a pointer which would resolve the `const` issue
[18:26:11] <NRK> but that creates a new issue, how do you report error
[18:26:32] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:27:03] *** Joins: clamiax (~clamiax@net-93-65-240-243.cust.vodafonedsl.it)
[18:27:06] *** Joins: bick (~kotaman@94.46.203.147)
[18:27:21] *** Joins: steales (~steales@79-67-157-147.dynamic.dsl.as9105.com)
[18:27:51] *** Quits: steales (~steales@79-67-157-147.dynamic.dsl.as9105.com) (Client Quit)
[18:28:24] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951)
[18:30:17] <NRK> .oO( just report it via errno; `size_t n = strchr(s, '\0'); if (errno) error();` )
[18:30:36] <NRK> that'd have actually been horrible
[18:31:18] *** Quits: talin (~bilbo@host-37-191-190-173.lynet.no) (Quit: Client closed)
[18:31:37] <sham1> Oh, like strtoull!
[18:31:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:32:08] <sham1> Although one would then have to think what kind of an errno code to return
[18:33:41] *** Joins: Klinda (~superleag@user/klinda)
[18:33:44] <clarity> strchr returning a const pointer would just be another brand of braindead imo
[18:34:25] <sham1> Not really, it matches the argument. And if you want to use it as a way to find an offset to a mutable string buffer, then it can be done while it's const
[18:35:12] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[18:35:26] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:35:54] <clarity> I think const in C is broken and the lack of type-level programming makes it hard to use well
[18:36:01] <clarity> I don't see why it should inherently match the argument
[18:36:08] <clarity> The argument may say that strchr won't modify your string
[18:36:09] <NRK> can be done, but just creates extra boiler plate to write. i agree with clarity that it would've been braindead.
[18:36:17] <clarity> But whether you modify it, is a different question altogether
[18:36:30] <clarity> And C has no means to express such in declarators
[18:36:50] *** Parts: chung (uid498429@id-498429.helmsley.irccloud.com) ()
[18:38:04] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[18:38:19] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:38:28] <libc> how to count blanks in C ?
[18:38:40] <LeoNerd> "count blanks" ?
[18:39:03] <markand> isblank
[18:39:12] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[18:40:05] <kurahaupo> NRK: having strchr return an offset â†’ return -1 for error (ssize_t) or return the length of the string (the offset of the null byte at the end)
[18:40:07] <libc> while((c = getchar()) != EOF)
[18:40:17] <markand> const in C is more like readonly that immutable
[18:40:23] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:40:26] <libc> in what case i can generate blank in this regard ?
[18:41:11] <sham1> What do you mean "generate blank in this regard"
[18:41:13] <libc> oh my bad
[18:41:25] <libc> i searched in google a blank character in C
[18:41:38] <libc> i thought that blank != space
[18:42:13] <kurahaupo> libc: blank is a category that includes the normal space but also some others such as tab
[18:42:23] <NRK> isn't blank line just "\n\n" ?
[18:42:44] <kurahaupo> NRK: that would be two blank lines
[18:42:45] <NRK> or does "\n\t\n" count as blank line as well
[18:42:46] <sham1> That is indeed how I'd understand an empty line
[18:43:08] <sham1> A line is always ended by a newline, and thus for example, the last character of a text file better be a newline
[18:43:21] *** Joins: shugo_ (~shugo@user/shugo)
[18:43:25] <sham1> Although that's me speaking from the point of view of POSIX
[18:43:54] <NRK> kurahaupo: there might be stuff before the first \n
[18:43:54] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[18:43:56] <libc> kurahaupo: indeed... google "blank character in C" gave that up
[18:43:57] <kurahaupo> (the trailing newline is part of the line, therefore \n on its own represents a single blank line)
[18:44:04] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Ping timeout: 272 seconds)
[18:44:15] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:44:19] <sham1> NRK: at least POSIX has a difference between a blank line and an empty line
[18:44:26] *** Quits: van (~van@46.23.94.214) (Quit: WeeChat 3.1)
[18:44:44] <sham1> A blank line can contain any number of <blank> characters (plus the trailing newline) while an empty line is just the newline
[18:44:48] <kurahaupo> NRK: If there is stuff before the first \n in your example, then that part is by definition not a properly formed text file
[18:45:06] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[18:45:18] <sham1> So foo\n\n, the second newline indicates an empty line, while foo\n\t\n the second newline is part of a blank line
[18:45:20] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 272 seconds)
[18:45:42] *** Joins: Nutte35 (~Nutte@202.153.81.149)
[18:46:24] <libc> it probably wouldn't come as a surprise here but the book 'C programming Language' is pretty good
[18:46:25] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951) (Remote host closed the connection)
[18:47:27] <NRK> *nods*
[18:47:38] <sham1> Yes
[18:47:47] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951)
[18:48:53] <sokan> https://bpa.st/SEYQ <--- why is there ( char *) here?
[18:49:22] <sham1> It shouldn't be
[18:49:26] <sham1> You can just get rid of it
[18:49:37] <sokan> and %u is the unicode of the string?
[18:49:39] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[18:49:46] <shugo_> hi, so i want to make a dictionary and there are two ways i can think of a dictinary directory where each word is stored as a file with its meaning as the files content or a single file with all words. first question can someone suggest any better way to store a dictionary which is efficient; second question which of 2 methods suggested by me is more faster to access ?
[18:49:57] <kurahaupo> NRK: If you add \n\n to the end of a POSIX compliant text file then you've always added two empty lines.
[18:49:57] <sham1> No. %u is just an unsigned integer
[18:50:32] <sokan> So what does it print? o.O
[18:50:38] <sokan> a random integer?
[18:50:41] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[18:50:53] <sham1> sokan: the value of the pointer `str` as an unsigned int
[18:51:17] <NRK> kurahaupo: what i mean was this "[sometext]\n\n"
[18:51:26] <sokan> sham1: ty
[18:52:06] <kurahaupo> sokan: That code has casts on malloc (where they're unnecessary), and fails to cast (unsigned int) str inside the printf statement, thus eliciting the dreaded undefined behaviour.
[18:52:54] <NRK> sokan: you should use %p for printing pointers, not %u
[18:52:56] <sham1> As per POSIX: 3.403 Text File "A file that contains characters organized into zero or more lines."
[18:53:00] <kurahaupo> NRK: If your "[sometext]" does not already end with a newline, it's not a valid text file
[18:53:05] <sham1> Yeah
[18:53:22] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[18:53:25] *** Joins: oxfuxxx (~oxfuxxx@5.253.207.221)
[18:53:34] <sham1> Having just "[sometext]" in a file instead of "[sometext]\n" in a file makes it not a text file
[18:53:40] <libc> is xlib still the preferred api over xcb ? ( at least in dwm it's xlib )
[18:53:49] <sham1> I prefer xcb
[18:53:56] <sham1> It's nice and asynchronous
[18:54:09] <NRK> also strcpy and strcat aren't functions you should be using either sokan
[18:54:12] <kurahaupo> NRK: Your suggested definition would mean that \n would sometimes represent an empty line and sometimes not. I regard that as an unhelpful starting point
[18:54:17] <libc> ok but generally speaking ... xlib is still in a wider use right ?
[18:54:21] <sham1> There are some things you need xlib for (notably OpenGL) but that can be done while having XCB do the majority of the work
[18:54:31] <sham1> xcb is more used by the toolkits
[18:55:04] <NRK> libc: when dwm was developed, i don't think xcb existed
[18:55:14] <sham1> kurahaupo:  3.145 Empty Line "A line consisting of only a <newline>; see also Blank Line."
[18:55:23] <libc> dwm is pretty new toy ...
[18:55:39] <sham1> I don't think the Suckless people would enjoy using xcb
[18:55:40] <libc> is a
[18:55:50] <NRK> hmm... we're talking about suckless's dwm, no?
[18:56:14] <sham1> Well it's either that or Windows' dwm, but the latter probably doesn't use xlib or xcb
[18:56:32] <NRK> the initial (suckless) dwm import goes back to 2006
[18:56:56] <NRK> and afaik it was based on wmii or smth like that
[18:56:57] <libc> xcb initial release == 2001  dwm initial release == 2006
[18:57:27] <libc> why i ask this ? because i have some old xlib books
[18:57:40] <NRK> ahh, so xcb DID exist back then. my bad.
[18:57:40] *** Joins: Jong (~Jong@163.114.132.5)
[18:58:09] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:58:18] <NRK> sham1: why do you think that? re: suckless and xcb
[18:58:19] *** Joins: inlight (~thomas@82.221.128.46)
[18:58:19] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[18:58:19] *** Joins: inlight (~thomas@user/inlight)
[18:59:41] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au)
[18:59:54] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[19:00:13] *** Quits: oxfuxxx (~oxfuxxx@5.253.207.221) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[19:00:33] *** Joins: oxfuxxx (~oxfuxxx@5.253.207.221)
[19:00:47] <sham1> Well it comes down to the way Suckless as a project works. The project is rather conservative with the way it handles things. And none of their projects seem to use xcb
[19:01:21] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[19:03:33] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[19:03:48] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[19:03:57] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 252 seconds)
[19:06:27] *** Joins: kts (~kts@103.73.237.47)
[19:07:23] *** Quits: kts (~kts@103.73.237.47) (Client Quit)
[19:07:45] *** Joins: Viewday117 (~Viewday@user/viewday)
[19:08:06] *** Joins: inlight (~thomas@user/inlight)
[19:08:17] *** Joins: Alhazred (~Alhazred@86.106.74.37)
[19:09:00] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[19:09:45] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:09:45] *** Viewday117 is now known as Viewday11
[19:10:54] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:16:50] *** Joins: elves-upstate (~elves-ups@129-2-180-41.wireless.umd.edu)
[19:17:08] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[19:18:24] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[19:27:03] *** Quits: oxfuxxx (~oxfuxxx@5.253.207.221) (Ping timeout: 252 seconds)
[19:28:13] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Ping timeout: 256 seconds)
[19:31:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:31:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:31:53] *** Joins: wroathe (~wroathe@user/wroathe)
[19:34:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[19:34:12] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[19:34:15] *** Joins: gpanders_ (~gpanders@user/gpanders)
[19:35:20] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:35:55] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[19:36:06] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[19:39:52] *** Joins: inlight (~thomas@157.35.88.185)
[19:39:52] *** Quits: inlight (~thomas@157.35.88.185) (Changing host)
[19:39:52] *** Joins: inlight (~thomas@user/inlight)
[19:40:00] *** Joins: magla (~gelignite@d536370e.access.ecotel.net)
[19:40:08] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:744d:d33e:d157:deba) (Quit: fe23)
[19:40:48] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[19:41:00] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (Ping timeout: 240 seconds)
[19:41:47] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[19:42:08] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[19:42:12] *** Parts: Ranhir (~Ranhir@157.97.53.139) (Once you know what it is you want to be true, instinct is a very useful device for enabling you to know that it is)
[19:42:38] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[19:42:52] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-230.cspire.com) (Read error: Connection reset by peer)
[19:43:04] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[19:43:22] *** Joins: strajder (~strajder@user/strajder)
[19:43:23] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[19:44:02] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[19:44:18] *** Joins: savolla (~quassel@95.10.207.85)
[19:45:13] *** Quits: Guest3567 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Quit: Reconnecting)
[19:45:25] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[19:45:49] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (Ping timeout: 240 seconds)
[19:45:49] *** sudden is now known as Guest402
[19:46:01] *** Joins: Viewday114 (~Viewday@user/viewday)
[19:46:15] *** Quits: Guest402 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[19:46:15] *** Joins: Guest402 (~cat@user/sudden)
[19:46:17] *** Joins: megeve (sid523379@id-523379.hampstead.irccloud.com)
[19:47:04] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[19:47:55] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:47:55] *** Viewday114 is now known as Viewday11
[19:49:18] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (Ping timeout: 272 seconds)
[19:49:45] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[19:51:24] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[19:51:50] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 272 seconds)
[19:55:30] *** Quits: Nutte35 (~Nutte@202.153.81.149) (Read error: Connection reset by peer)
[19:55:38] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[19:56:29] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:58:24] *** Quits: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[19:58:50] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[19:59:11] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-230.cspire.com)
[19:59:37] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[20:00:05] *** Joins: seninha_ (~seninha@user/seninha)
[20:00:14] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[20:01:11] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[20:02:03] *** Quits: ik (uid540109@id-540109.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:03:08] *** Joins: seninha (~chatzilla@user/seninha)
[20:05:08] *** Joins: nb-ben (~ben@user/nb-ben)
[20:06:31] <nb-ben> are there compilation flags that would make sure that structures are initialized with zeroed memory?
[20:08:02] <NRK> why do you need a compilation flag for that? `struct s a = {0};`
[20:08:16] <NRK> or use `calloc` if dynamically allocating it.
[20:08:36] <nb-ben> I have a library that I'm loading both with the JVM and an executable
[20:08:48] *** Quits: wyfnt (~wyfnt1232@103.214.137.74) (Quit: Leaving)
[20:09:05] <nb-ben> when loading in the JVM, I get segmentation faults because structures are initialized with "
[20:09:09] <nb-ben> "random" values
[20:09:23] <nb-ben> but in the executable, the structures are zeroed
[20:09:54] <nb-ben> this is an external library, and so I wish to avoid making any modifications to the code because that would make it difficult to pull from upstream
[20:11:05] <nb-ben> this is obviously bogus code but unfortunately I must use it
[20:11:09] <sham1> Could always contribute back upstream
[20:12:17] <nb-ben> I don't have a problem with that of course, but they tend to leave pull requests hanging
[20:12:28] <pragma-> It's easier to paddle downstream than up.
[20:12:41] <pragma-> Fork all the things!
[20:13:53] <nb-ben> I want to know why it's always zero'ed when I run from the executable and almost never zeroed when I in the JVM space
[20:14:12] *** Joins: mahmutov (~mahmutov@37.155.52.92)
[20:15:00] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[20:15:25] <sham1> pragma-: I have too much of a NIH going on that that's a bad idea
[20:15:55] <nb-ben> I'm gonna try dirtying some of the memory before running the thing in the executable
[20:18:11] *** Joins: inlight (~thomas@157.35.88.185)
[20:18:11] *** Quits: inlight (~thomas@157.35.88.185) (Changing host)
[20:18:11] *** Joins: inlight (~thomas@user/inlight)
[20:20:57] *** Quits: absentia (~absentia@user/absentia) (Quit: WeeChat 3.4)
[20:21:09] *** Joins: angelacrust (~angelacru@182.68.208.211)
[20:21:38] <apotheon> It's just as easy to paddle upstream as downstream, but you won't make as much progress if you're paddling upstream.
[20:22:47] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-d569-b31b-39c6-bea7.fixed6.kpn.net)
[20:23:28] *** Joins: superboot (~agentgasm@user/superboot)
[20:25:03] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220211225827])
[20:25:50] *** Joins: seninha (~chatzilla@user/seninha)
[20:27:33] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-d569-b31b-39c6-bea7.fixed6.kpn.net) (Ping timeout: 252 seconds)
[20:28:34] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[20:29:04] *** Joins: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8)
[20:29:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[20:30:28] *** Quits: pizdets (~pizdets@183.182.115.222) (Ping timeout: 272 seconds)
[20:30:46] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[20:30:51] *** Joins: pizdets_ (~pizdets@183.182.111.58)
[20:31:41] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:31:42] *** Joins: diamondbond (~diamondbo@175.157.50.34)
[20:33:01] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951) (Ping timeout: 250 seconds)
[20:35:48] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (Ping timeout: 252 seconds)
[20:38:04] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (Ping timeout: 272 seconds)
[20:38:09] *** Quits: diamondbond (~diamondbo@175.157.50.34) (Quit: Leaving)
[20:38:20] *** Joins: bebyx (~Thunderbi@user/bebyx)
[20:38:54] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[20:40:51] *** Quits: inlight (~thomas@user/inlight) (Quit: WeeChat 3.3)
[20:41:07] *** Joins: inlight (~thomas@user/inlight)
[20:44:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[20:45:39] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[20:49:00] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 240 seconds)
[20:49:38] *** Joins: kilobyte_ch (~kbch@213.55.224.175)
[20:49:41] *** Joins: Akiva (~Akiva@user/Akiva)
[20:50:05] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:52:00] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[20:52:06] *** Joins: bick (~kotaman@94.46.203.147)
[20:52:09] *** Joins: rgrinberg (~textual@187.194.14.9)
[20:54:41] *** Joins: serbest (~ike@user/serbest)
[20:54:48] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:55:18] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[20:57:00] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[20:59:27] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[21:00:00] *** Quits: mahmutov (~mahmutov@37.155.52.92) (Ping timeout: 252 seconds)
[21:00:25] *** Joins: mahmutov (~mahmutov@37.155.52.92)
[21:01:06] *** Quits: kilobyte_ch (~kbch@213.55.224.175) (Ping timeout: 252 seconds)
[21:02:09] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[21:02:18] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[21:03:25] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[21:08:43] *** Joins: Viewday116 (~Viewday@user/viewday)
[21:09:06] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[21:09:07] *** Viewday116 is now known as Viewday11
[21:09:08] *** Joins: arinov_ (~arinov@213.194.126.155)
[21:10:08] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:12:45] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:14:07] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:15:13] *** Joins: phrix (~phrix@185.76.176.45)
[21:15:19] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[21:15:50] *** Joins: immibis_ (~hexchat@dynamic-089-204-138-014.89.204.138.pool.telefonica.de)
[21:18:07] *** Joins: mahmutov_ (~mahmutov@37.155.20.217)
[21:18:30] *** Joins: mongrel (uid508343@id-508343.ilkley.irccloud.com)
[21:18:36] *** Quits: immibis (~hexchat@dynamic-046-114-038-006.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[21:18:47] *** Joins: masoudd (~masoudd@user/masoudd)
[21:19:15] *** Quits: mahmutov (~mahmutov@37.155.52.92) (Ping timeout: 252 seconds)
[21:19:26] *** Quits: myon98 (~myon98@user/myon98) (Ping timeout: 250 seconds)
[21:20:21] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[21:22:19] *** Joins: crashrep (~crashrep@user/crashrep)
[21:23:31] *** Quits: libc (~archer@user/tessio) (Ping timeout: 256 seconds)
[21:24:47] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:26:12] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 272 seconds)
[21:31:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:32:05] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:34:44] *** mahmutov_ is now known as mahmutov
[21:39:35] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[21:40:24] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[21:44:05] *** Quits: angelacrust (~angelacru@182.68.208.211) (Quit: Client closed)
[21:45:56] *** Joins: libc (~archer@user/tessio)
[21:46:00] *** Joins: Viewday111 (~Viewday@user/viewday)
[21:47:06] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (Ping timeout: 272 seconds)
[21:47:24] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[21:47:25] *** Viewday111 is now known as Viewday11
[21:47:39] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:47:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:49:24] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[21:49:52] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[21:50:54] *** Quits: malina (~malina@user/malina) (Ping timeout: 272 seconds)
[21:52:01] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[21:52:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:56:17] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:57:46] *** Quits: AmR (~AmREiSa@156.207.156.230) (Quit: Konversation terminated!)
[21:57:53] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[21:58:46] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[21:59:22] *** Quits: magla (~gelignite@d536370e.access.ecotel.net) (Quit: Stay safe!)
[22:00:49] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[22:02:56] *** Quits: alch (~alch@151.34.183.120) (Ping timeout: 272 seconds)
[22:04:04] *** Joins: alch (~alch@151.34.162.135)
[22:04:50] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) (Ping timeout: 272 seconds)
[22:05:06] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[22:06:22] *** Telvana2 is now known as Telvana
[22:10:54] *** Joins: freakazoid333 (~matt@2603-9000-cf03-86c3-1969-b2f2-78aa-e2f9.inf6.spectrum.com)
[22:10:59] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:11:08] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:21:24] *** Quits: ncrowl (~ncrowl@89-160-83-30.cust.bredband2.com) (Ping timeout: 240 seconds)
[22:22:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:23:21] *** Joins: ncrowl (~ncrowl@31-208-206-123.cust.bredband2.com)
[22:29:40] *** Joins: Charadon (~Charadon@155.138.164.183)
[22:29:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[22:30:29] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220211225827])
[22:30:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:31:00] *** Joins: crashrep (~crashrep@user/crashrep)
[22:33:39] <pragma-> OKAY!
[22:33:43] <pragma-> I've done it.
[22:33:53] <pragma-> I've refactored candide's virtual machine scripts to hell and back.
[22:33:59] <pragma-> ,sh -vm=foo id
[22:34:00] <candide> pragma-: Unknown machine 'foo'; available machines are: fedora-amd64, test
[22:34:06] <pragma-> ,sh -vm=test id
[22:34:07] <candide> pragma-: uid=1000(vm) gid=1000(vm) groups=1000(vm) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
[22:34:14] <esselfe> great job pragma-
[22:34:15] <pragma-> Now I can start adding custom vms.
[22:34:16] <ChoHag> ,sh - vm=test uname -a
[22:34:17] <candide> ChoHag: prog.sh: line 1: -: command not found
[22:34:23] <ChoHag> ,sh -vm=test uname -a
[22:34:23] <candide> ChoHag: Linux fedora 5.17.0-0.rc3.89.fc36.x86_64 #1 SMP PREEMPT Mon Feb 7 14:58:45 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
[22:35:16] <ChoHag> Is that over serial or vwhatever?
[22:35:22] <ChoHag> vsocket?
[22:36:19] <pragma-> both. if the vm doesn't support vsock it'll fallback to serial
[22:36:27] *** Joins: seninha (~chatzilla@user/seninha)
[22:36:38] <kplant> is it protected against flooding itself off irc?
[22:36:39] <pragma-> so if it's not a linux vm with vsock, it'll use serial
[22:36:50] <kplant> aka something annoying like find / -exec ls {} \;
[22:36:53] <pragma-> kplant: the bot is, yes.
[22:37:10] <pragma-> ,sh ls -l /bin
[22:37:10] <candide> pragma-: lrwxrwxrwx. 1 root root 7 Jan 19 19:04 /bin -> usr/bin
[22:37:12] <ChoHag> kplant: The correct way is to try it and see what happens.
[22:37:17] <pragma-> well, that's not what i expected
[22:37:22] <ChoHag> pragma-: Linux.
[22:37:22] <pragma-> i expected files
[22:37:29] <kplant> ,sh ls -lah /bin/
[22:37:29] <pragma-> ,sh ls -l /usr/bin
[22:37:39] <candide> kplant: total 117M dr-xr-xr-x. 1 root root   11K Feb  4 12:01 . drwxr-xr-x. 1 root root   100 Feb  4 11:25 .. -rwxr-xr-x. 1 root root   57K Jan 19 15:57 [ -rwxr-xr-x. 1 root root   61K Feb  1 01:05 ab -rwxr-xr-x. 1 root root   26K Jan 19 14:39 addr2line -rwxr-xr-x. 1 root root    33 Jan 19 14:15 alias lrwxrwxrwx. 1 root root    26 Feb  4 11:59 alt-java -> /etc/alternatives/alt-java -rwxr-xr-x. 1 root root... <truncated; https://0x0.st/o8me.txt>
[22:37:40] <candide> pragma-: [Timed-out]
[22:37:46] <pragma-> i guess kplant won that one
[22:38:07] <pragma-> right now fedora-amd64 is NOT using vsock
[22:38:09] <ChoHag> ,sh df -h
[22:38:09] <candide> ChoHag: Virtual machine is resetting, try again soon.
[22:38:16] <kplant> oof
[22:38:18] <pragma-> it's using serial, so that's why my command timed-out
[22:38:29] <pragma-> yeah, it resets if it times out
[22:38:39] <kplant> are you intercepting any syscalls or do you not care if someone fills up the disk
[22:38:41] <ChoHag> ,sh -vm=test df -h
[22:38:41] <candide> ChoHag: Filesystem      Size  Used Avail Use% Mounted on devtmpfs        4.0M     0  4.0M   0% /dev tmpfs           987M     0  987M   0% /dev/shm tmpfs           395M  712K  394M   1% /run /dev/vda2        11G  803M  9.8G   8% / /dev/vda2        11G  803M  9.8G   8% /home /dev/vda1       974M  113M  794M  13% /boot tmpfs           987M  4.0K  987M   1% /tmp tmpfs           198M     0  198M   0% /run/user/0
[22:38:45] <ChoHag> eesh
[22:38:51] <pragma-> but when i switch fedora-amd64 over to vsock (as test is using) it'll be able to run multiple commands simultaneously
[22:39:18] <pragma-> ,sh -vm=test -paste df -h
[22:39:18] <candide> pragma-: No output.
[22:39:21] <pragma-> hm.
[22:39:34] <pragma-> need to fix -paste option.
[22:39:42] <kplant> ,sh -paste df -h
[22:39:43] <candide> kplant: No output.
[22:39:55] <kplant> ,sh bash -c "df -h" -paste
[22:39:55] <candide> kplant: No output.
[22:39:58] <kplant> lol
[22:39:59] <pragma-> My refactoring renamed a function and I forgot to update it.
[22:40:07] <pragma-> Will fix in a bit.
[22:40:15] *** Joins: angelacrust (~angelacru@182.68.208.211)
[22:40:20] <kplant> ,sh echo $_
[22:40:21] <candide> kplant: /usr/bin/sh
[22:41:38] <pragma-> okay, i need operating systems and CPUs to emulate
[22:41:59] <kplant> templeos
[22:42:01] <kplant> obviously
[22:42:40] <pragma-> i am considering solaris-sparc and to use ebcdic for it if i can
[22:43:15] * sham1 squints at EBCDIC
[22:43:17] <sham1> Ew
[22:43:24] * pragma- dreams about `cc -vm=solaris-sparc some pitfull code example`
[22:43:42] *** Joins: kuber (~kuber@97-113-220-65.tukw.qwest.net)
[22:44:01] <ChoHag> EBCDIC isn't that good an encryption scheme.
[22:44:05] <pragma-> sham1: yeah! the point is to demonstrate pitfalls and gotchas!
[22:44:14] <pragma-> "this is why you shouldn't assume ascii"
[22:44:42] *** Joins: Betal (~Betal@user/betal)
[22:44:58] <ChoHag> Are you saying all the world's not a VAX?
[22:45:05] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:08] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:45:23] <ChoHag> These days that would be a Linux I guess...
[22:45:37] <Amun-Ra> we need more stuff for 36-bit cpus
[22:45:46] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[22:46:42] <sham1> Please no. I don't want to deal with octal
[22:47:24] <ChoHag> But think of the factors! 9! 3! 4! 6!
[22:47:39] <Amun-Ra> you can't go wrong
[22:48:01] <ChoHag> *15* spare bits in a unicodepoint.
[22:48:30] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:49:00] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[22:50:27] *** Joins: inlight (~thomas@157.35.88.185)
[22:50:27] *** Quits: inlight (~thomas@157.35.88.185) (Changing host)
[22:50:27] *** Joins: inlight (~thomas@user/inlight)
[22:53:59] *** Quits: angelacrust (~angelacru@182.68.208.211) (Quit: Client closed)
[22:54:06] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[22:54:18] *** Joins: angelacrust (~angelacru@182.68.208.211)
[22:54:56] <libc> is '\b' stands for our regular bacspace character ?
[22:55:34] *** Joins: Burgundy (~NA@86.121.143.206)
[22:57:56] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220211225827])
[22:58:32] <libc> if c == '\b' printf("\\b");
[22:58:58] <libc> but \b is never printed on the screen
[22:59:14] *** Joins: seninha (~seninha@user/seninha)
[23:00:15] *** Quits: bick (~kotaman@94.46.203.147) (Quit: Lost terminal)
[23:00:33] <ChoHag> It's pushed out on the stream as a byte and interpreted by the terminal to move the cursor.
[23:01:08] <libc> again ... that terminal
[23:03:39] <sham1> No it isn't
[23:03:55] <libc> ChoHag: can you elaborate more ? isn't it should be interpreted by C as a backspace ?
[23:03:59] <sham1> "\\b" should just print the literal character sequence of \b
[23:04:10] <sham1> The real issue is buffering if I had to guess
[23:04:22] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Ping timeout: 272 seconds)
[23:04:28] <ChoHag> \b in a string literal is interpreted as the byte 0x7f (or possibly not on an EBCDIC platform).
[23:04:41] <ChoHag> What a receiving application or driver does with that is up to it.
[23:04:57] <ChoHag> No is that ^H?
[23:05:11] <libc> hmm...
[23:05:16] <libc> i see what you mean ..
[23:05:17] <ChoHag> Anyway whatever value it represents, \b is one byte.
[23:05:51] <libc> however... why C isn't deleting any character ?
[23:05:57] <sham1> That still doesn't explain why printf("\\b") apparently doesn't get displayed
[23:06:18] <sham1> Meanwhile buffered IO does
[23:06:39] <libc> ok it is deleting my bad
[23:07:15] <ChoHag> printf("\b") reveals byte 0x08 here.
[23:07:25] <ChoHag> ,cc printf("\b")
[23:07:27] <candide> ChoHag: No output.
[23:07:30] <ChoHag> Liar.
[23:07:38] *** Joins: Viewday114 (~Viewday@user/viewday)
[23:07:55] <ChoHag> ,sh perl -E 'printf "\b"' | hexdump -C
[23:07:56] <candide> ChoHag: 00000000  08                                                |.| 00000001
[23:07:57] <libc> no ...
[23:08:06] <libc> ill post my code
[23:08:26] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:08:57] <libc> http://ix.io/3PHH
[23:08:58] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:08:59] *** Viewday114 is now known as Viewday11
[23:09:08] <libc> i commented the '\b' part to see what's the difference
[23:09:17] <libc> there is no difference visually
[23:09:23] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[23:09:43] <sham1> Yeah, as I said, you're getting bitten by buffered IO
[23:09:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:09:47] <sham1> Try to use fflush
[23:10:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[23:10:13] <ChoHag> Yeah that.
[23:10:15] <libc> sham1: you might be right. but fflush is not yet learned in the book
[23:10:22] <ChoHag> Learn it early.
[23:10:34] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[23:10:54] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[23:10:55] <ChoHag> fflush(NULL) at the end of your loop will probably be enough for now.
[23:11:14] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[23:11:15] <libc> there must be another way
[23:11:21] <ChoHag> There are many.
[23:11:31] <libc> yeah let's try those
[23:11:39] <libc> it's impossible that a book ask you to do things oyu didn't learned about
[23:11:46] <ChoHag> No it's not.
[23:12:01] <libc> especially a book with so many good ratings like 'The C programming Language'
[23:12:01] <ChoHag> That would be called a *good* book.
[23:12:26] <libc> so are you saying THIS what they expect ? explore other options ?
[23:12:27] *** Lord_of_Life_ is now known as Lord_of_Life
[23:12:36] <libc> yeah ... could be
[23:12:44] <ChoHag> They expect you to learn.
[23:12:53] <ChoHag> What you have there is an *old* book.
[23:13:26] <libc> ok .. let's learn
[23:13:37] <libc> what is buffering and why it responsible for this phenomena
[23:13:53] <sham1> So, C doesn't want to output every write to the output stream immediately
[23:13:59] <sham1> That would be wasteful and time consuming
[23:14:01] *** Quits: moose (~moose@user/moose) (Quit: Hop)
[23:14:03] <ChoHag> Collecting data into a (fast) blob of memory before sending it all into a (slow) I/O channel at once.
[23:14:06] <sham1> ^
[23:14:10] <ChoHag> Usually/often on \n.
[23:14:21] <sham1> I think that's almost always the thing that triggers a flush
[23:17:00] <libc> i still confuse as to how it's relate to the fact that '\b' is not printed
[23:17:25] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[23:17:27] <libc> \b
[23:17:31] <sham1> It's because printing the string "\\b" doesn't flush
[23:17:41] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[23:17:49] <sham1> The buffer is not full yet, nor have you encountered a \n yet
[23:17:54] <libc> but \n should .. along with \\b
[23:18:38] <libc> after running the program i type random keys on the keyboard and then Backspace
[23:18:51] <libc> and after that Enter (ie \n)
[23:19:18] <libc> and i expected to see \b in the places i entered Backspace
[23:19:23] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:19:35] <ChoHag> Your terminal probably trapped them.
[23:19:44] <ChoHag> Did you see the character you pressed before pressing backspace?
[23:20:15] <ChoHag> It also sends things a line at a time unless instructed otherwise.
[23:21:00] <libc> no pressing backspace behave the same as out of the program
[23:21:04] <libc> it just delete characters
[23:21:11] * ChoHag sighs
[23:21:29] <ChoHag> Run your program. Type in A B BACKSPACE C. Do you see A B C or A C?
[23:21:34] <libc> oh no, the character is deleted
[23:21:38] <ChoHag> Right.
[23:21:43] <ChoHag> Your terminal is trapping it.
[23:21:50] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[23:21:52] <ChoHag> Your program never sees the B because it isn't sent.
[23:22:25] *** Joins: niko3 (~mmk@198-200-74-246.cpe.distributel.net)
[23:22:29] <libc> there is no chance that in 1990 the book author will anticipate this and want me to solve something like this right ? :)
[23:22:53] <ChoHag> Some.
[23:23:04] *** Joins: Betal (~Betal@user/betal)
[23:23:17] <ChoHag> Apparently they were too busy writing unix though.
[23:23:29] <ChoHag> Wait. 1990?
[23:23:53] <libc> according to amazon it's 1988
[23:24:19] <ChoHag> Oh the reprint.
[23:24:32] <ChoHag> No, it's older than that. 70s.
[23:25:08] <libc> ChoHag: please elaborate on the terminal trapping thing
[23:25:13] <pragma-> For a more modern book on C, I'd recommend ,{knk}
[23:25:14] <candide> 'C Programming: A Modern Approach' by K. N. King (2nd Ed, 2008) is a recommended C book that teaches both C89 and C99. http://knking.com/books/c2/index.html
[23:25:16] <libc> it's chinease for me
[23:25:16] *** Quits: Devinn (~Devinn@searspoint.nvidia.com) (Ping timeout: 272 seconds)
[23:25:34] <ChoHag> libc: Your 'getchar' function doesn't return until the user (you) presses enter.
[23:25:57] <ChoHag> At that point it returns the first character of the line you just typed in and you loop over whatever the terminal decided you ultimately typed as that line.
[23:26:07] *** Quits: savolla (~quassel@95.10.207.85) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:27:06] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[23:27:23] <ChoHag> So your loop isn't running continuously, it's running a whole bunch of times in one go every time you press enter, and until you press enter the terminal adds and deletes characters to the buffer it's eventually going to send.
[23:27:27] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[23:29:06] <ChoHag> You can poke various bits in the terminal driver to make it send a byte (ie. return from getchar) on every keypress but that's not the default.
[23:29:26] *** Quits: kuber (~kuber@97-113-220-65.tukw.qwest.net) (Quit: leaving)
[23:29:35] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:30:45] <sham1> What you could do is have a file with all these special characters in it
[23:30:55] <sham1> And then pipe it to your program
[23:31:56] *** Joins: Devinn (~Devinn@searspoint.nvidia.com)
[23:32:44] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:35:05] <libc> is there some C debugger i can see what's going on in here ?
[23:35:20] <cryptonector> anyone know of a good autoconf macro for checking if time_t is integral and, if so, if it's signed?
[23:38:19] <libc> ChoHag: i hope the video about that exercise im watching in youtube is using liunx
[23:39:46] *** Joins: Betal (~Betal@user/betal)
[23:39:51] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[23:40:01] <cryptonector> well, shit, I'm going to have to write my own macro
[23:40:29] <sham1> cryptonector: I don't think there is any good way of checking whether time_t is integral
[23:40:54] <sham1> How crucial is that?
[23:43:32] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-d569-b31b-39c6-bea7.fixed6.kpn.net)
[23:44:21] <cryptonector> it's... not
[23:44:39] <cryptonector> AX_CHECK_SIGN https://www.gnu.org/software/autoconf-archive/ax_check_sign.html
[23:44:44] <cryptonector> takes care of signedness
[23:44:57] *** Joins: crankslider (~slidercra@user/slidercrank)
[23:46:03] *** Joins: Viewday111 (~Viewday@user/viewday)
[23:47:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:47:33] *** Viewday111 is now known as Viewday11
[23:47:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:47:36] <libc> ok
[23:47:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:47:49] <libc> words set in stone ChoHag
[23:47:51] <libc> https://www.daniweb.com/programming/software-development/threads/360365/k-r-exercise-1-10-problem#post1539347
[23:48:45] <libc> i still find it hard to believe that Dennis Ritchie wrote the book so you be familiar with unix rather than with C
[23:49:42] <libc> but ok
[23:49:44] <libc> let
[23:49:52] <libc> ill continue
[23:50:05] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:50:36] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-d569-b31b-39c6-bea7.fixed6.kpn.net) (Ping timeout: 240 seconds)
[23:56:25] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[23:56:43] *** Joins: teepee (~teepee@openscad/teepee)
[23:56:51] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:57:27] *** Joins: magla (~gelignite@d536370e.access.ecotel.net)
[23:59:01] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
