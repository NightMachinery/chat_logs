[00:00:11] <sm> which of those takes less of a cut ?
[00:00:36] <fendor[m]> we do have an open collective, it is the official one: https://opencollective.com/haskell-language-server
[00:01:10] <fendor[m]> and we do have some budget, it is just, I don't think there is a real plan what to do with them
[00:01:21] <sm> who administers the github and opencollective contributions, and how do you allocate them ? or are they just piling up, as in my project ?
[00:01:27] <fendor[m]> Currently, it looks like we are going to finance every year a summer of hls
[00:02:02] <fendor[m]> m pickering is the administer, iirc
[00:02:13] <sm> nod.. I guess it's more encouraging to sponsor when you see that funds are being used, and how
[00:03:02] <fendor[m]> we haven't updated it properly, since there is at least one more blog post about how funds are spent
[00:03:24] <jneira[m]> https://opencollective.com/haskell-language-server#category-BUDGET
[00:03:29] <jneira[m]> ?
[00:05:21] <sm> I love opencollective. Hopefully the fees are reasonable, I forget what they are
[00:05:40] <jneira[m]> afaik most work here is volunteer or indirectly founded via allowing open source work in office hours 
[00:06:10] <fendor[m]> true, and some are paid by their employers too. 
[00:06:36] <jneira[m]> also
[00:07:44] * sm estimates two heavy and a dozen occasional hls contributors right now
[00:09:11] <jneira[m]> locs and number of commits are not always representative, in this case it does not :-) 
[00:09:38] <jneira[m]> well in my case i mean :-P 
[00:10:19] <fendor[m]> according to the pulse, our top three contributors: pepe, jneira, mergify[bot] üòÄ 
[00:10:31] <sm> phew.. my CI jobs are still running. That is waay too much work for a casual WIP push to my private fork :)
[00:11:11] <fendor[m]> HLS is huge... building and testing is a big undertaking!
[00:13:58] <jneira[m]> 7 ghc versions * 3 os's
[00:15:11] <sm> contributors will naturally push to master. I tend to put heavy CI tests in their own special branches
[00:20:59] <sm> jneira, I missed your comment - are you a paid contributor (part time ?)
[00:21:08] <sm> and pepe too ?
[00:25:01] <jneira[m]> i am a volunteer and i personally prefer it that way (at least for now and in the foreseable future)
[00:26:15] <jneira[m]> but i respect very much all kind of contributions, it is my pure personal choice
[00:27:03] <sm> ok, I misread. Of course, thank you (all) for your work
[00:27:03] <fendor[m]> and pepe works for facebook, and I think they pay to make hls work on their codebase
[00:27:35] <sm> once funding comes in, it's good to understand who is paid for what, it helps in discussions
[00:28:47] <fendor[m]> I am unclear though how much work pepe puts in is for fb or voluntarily
[00:32:53] <jneira[m]> i really liked this tweet from him: https://twitter.com/IborraPepe/status/1465684102837854211
[00:34:43] <fendor[m]> I agree with one of the responses, very healthy indeed!
[00:59:09] <sm> it's not always quite so easy
[01:00:00] <sm> jneira, I have an update ready for stack-9.0.1.. I pushed to a feature branch to avoid triggering the CI prematurely. Would you know how I can make a PR from that branch to the main repo (not my master) ?
[01:13:40] <sm> ohh.. the way I created my fork (vs code publish to github + push to..) made it disconnected from upstream.
[01:13:57] <jneira[m]> hmm i usually go to the branch and click the `contribute` link
[01:16:25] <sm> and that's why github was running CI, I think it disables the workflows when you fork normally
[01:22:47] <sm> next adventure.. get hls working on hls
[01:23:49] <sm> if I open haskell-language-server in vs code and open random .hs files, is hls expected to work, eg by using an implicit cradle ?
[01:25:12] <sm> perhaps this is for another day
[01:26:29] <fendor[m]> I have a "cradle: { cabal: }" hie.yaml and that works well
[01:28:42] <sm> should one of those be included in the repo ? And would a stack user have to replace it with a stack cradle ? I was wondering if it's possible for one hie.yaml file to serve both
[01:29:20] <sm> also is it possible for a stack cradle to specify one of the non-default stack yaml files ?
[01:31:13] <jneira[m]> yep see https://github.com/haskell/hie-bios#stack
[01:32:02] <sm> thanks! I missed that (hard to find the right place)
[01:32:49] <jneira[m]> fendor: would not hls work with the impicit hie and stack?
[01:33:07] <sm> I think one hie.yaml file can't work for both cabal and stack users, so the ideal is to have none and rely on the implicit cradle working
[01:34:45] <jneira[m]> yeah, that is my general advise, try without explicit hie.yaml and only use it if that does not work
[01:35:44] <sm> and in haskell-language-server, that means it will try to use stack, with the default stack.yaml
[01:36:21] <sm> if stack is not installed, does it then try cabal.project ?
[01:36:37] * sm is reading https://github.com/haskell/hie-bios#priority
[01:38:57] <jneira[m]> actually the order is chosen by implicit-hie, which overrides the raw hie-bios one
[01:40:43] <sm> jneira: https://hackage.haskell.org/package/implicit-hie ?
[01:40:59] <sm> is it called dynamically somehow, without writing a hie.yaml ?
[01:41:24] <jneira[m]> yeah, not sure if the discovery order is documented (i am afrid it will not)
[01:41:28] <jneira[m]> and it should
[01:42:19] <jneira[m]> but implicit-hie was supposed to be replaced in the short range (you know for years :-P )
[01:42:49] <sm> implicit-hie-cradle is mixed up in this too somehow
[01:43:16] <jneira[m]> wait it says
[01:43:16] <jneira[m]> > The config type (cabal or stack) is determined by the existence of dist-newstyle, .stack-work, stack.yaml, if none are found the default is cabal.
[01:43:26] <sm> where's that ?
[01:43:37] <jneira[m]> https://hackage.haskell.org/package/implicit-hie
[01:43:40] <jneira[m]> :-)
[01:43:57] <sm> thanks!
[01:44:00] <jneira[m]> not terrible precise and complete but well..
[01:44:12] <jneira[m]> s/terrible/terribly/
[01:45:18] <sm> just so I'm clear, and stop me if I'm asking too many questions.. when hls starts up, it runs gen-hie and uses the output (without writing a hie.yaml) ?
[01:45:30] <sm> roughly speaking ?
[01:46:10] <jneira[m]> yeah
[01:47:22] <sm> I have some old version of gen-hie in .local/bin, but I imagine hls has a newer version built in, or vscode Haskell extension provides one
[01:47:27] <sm> that looks rather useful
[01:49:39] <jneira[m]> sure, you can see what hls will use implicitly, useful if it does not work to see why and to have a base to write a working hie.yaml
[01:49:53] <sm> last question for today, I promise. What tool could I run at command line to mimic hls' first discovery steps in a project ? eg, not haskell-language-server-1.5.1-darwin-9.0.1, I assume there's something earlier, before it knows which ghc version is involved
[01:50:25] <sm> I should look at the Haskell extension's source I suppose
[01:50:34] <jneira[m]> `haskell-language-server-wrapper --project-ghc-version`
[01:50:47] <sm> thanks, jneira
[01:56:53] <jneira[m]> np happy to help you (who usually help so many others :-) )
[02:16:57] <fendor[m]> <jneira[m]> "fendor: would not hls work..." <- never checked, for me this works most reliable since it uses cabal directly and not that .cabal parsing
[03:19:35] *** Joins: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com)
[06:33:50] *** Joins: hjulle[m] (~hjullemat@2001:470:69fc:105::1dd)
[07:14:36] *** Joins: libertyprime (~libertypr@203.211.78.24)
[08:00:55] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 256 seconds)
[08:38:38] *** Joins: libertyprime (~libertypr@203.211.78.24)
[09:08:13] *** Joins: arrowd (~arr@2.94.236.140)
[11:35:54] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[11:36:20] *** Joins: hololeap_ (~hololeap@user/hololeap)
[11:43:50] <Philonous> jneira[m], haskell-language-server in lsp-mode (not in stand-alone mode) used 100% CPU (but was still responsive). And I found this in the logs: ¬ªfinish: AlternateNumberFormat.CollectLiterals (took 1m32s)¬´ 
[11:44:17] <Philonous> Here's a slightly longer excerpt from the logs: https://gist.github.com/Philonous/7dae19e3ec1158ba7cc90f92d25f8b2f
[11:44:28] <jneira[m]> hmm
[11:45:01] <Philonous> It seemed to produce one of those minute-long "finish" lines for every literal in my source code
[11:45:22] <jneira[m]> ugh
[11:45:51] <jneira[m]> many numeric literals in the module? is it big?
[11:46:25] <jneira[m]> thanks for noting it, as it is gonna be included in the next release planned for this month
[11:47:43] <Philonous> 350 lines, pretty normal code, but some TH (I use $logDebug splices ). Few literals
[11:48:24] <Philonous> Unfortunately I can't post it, it belongs to my customer
[11:49:02] <jneira[m]> yeah, no problem
[11:49:18] <jneira[m]> i've pinged the plugin author
[11:49:19] <fendor[m]> The AST traversal is probably really expensive ‚òπÔ∏è
[11:49:50] <fendor[m]> maybe CollectLiterals needs to desugar the TH?
[11:49:52] <jneira[m]> wow, so expensive? for 350 lines?
[11:50:02] <Philonous> Shouldn't I open a ticket?
[11:50:14] <jneira[m]> Philonous: please do
[11:50:59] <fendor[m]> Unsure what CollectLiterals uses, maybe it is just a small oversight, but this expensive for a side-feature is a bit sad ‚òπÔ∏è
[11:56:59] <fendor[m]> wth... my git is german suddenly...
[12:06:15] <Philonous> https://github.com/haskell/haskell-language-server/issues/2490
[12:24:33] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:44:21] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 252 seconds)
[13:57:31] *** Joins: libertyprime (~libertypr@203.211.78.24)
[14:30:12] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[15:03:54] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[15:04:05] *** Joins: hololeap_ (~hololeap@user/hololeap)
[15:37:29] *** Quits: arrowd (~arr@2.94.236.140) ()
[15:48:45] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[15:49:55] *** Joins: hololeap_ (~hololeap@user/hololeap)
[15:58:13] <michaelpj[m]> jneira: lsp repo has a lot of `stack.yaml`s. I'm not sure they're being maintained. Should we keep them? maybe just one?
[15:58:37] <michaelpj[m]> they're not tested in CI, so they're going to bitrot
[16:57:18] <jneira[m]> michaelpj: hmm i guess we could keep one for now, lsp is not tied to ghc as hls/ghcide is
[16:57:49] <michaelpj[m]> yeah, that's what I thought: it's not such a big deal to meticulously maintain configurations for every GHC
[16:58:08] <jneira[m]> üëçÔ∏è 
[16:58:45] <jneira[m]> or two, as fendor suggested yesterday one with last lts and other with nightly
[16:58:51] <jneira[m]> but one would be fine
[16:58:54] <jneira[m]> as you consider
[16:59:41] <jneira[m]> jneira[m]: with lts, it changes less frequently
[17:10:05] <michaelpj[m]> jneira: given that the stack.yaml isn't there for user installation or for testing different versions of GHC, I think we could get away with one. Maybe 8.10.7 (LTS)?
[17:10:27] <jneira[m]> yeah
[18:20:42] *** Quits: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:55:47] *** Joins: arrowd (~arr@2.94.236.140)
[19:18:30] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:19:05] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:34:31] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 252 seconds)
[21:19:57] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:25:48] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[22:27:11] *** Joins: hololeap_ (~hololeap@user/hololeap)
[22:32:47] *** Quits: arrowd (~arr@2.94.236.140) ()
[22:35:58] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:42:04] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:54:07] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[23:12:10] <sm> jneira, thanks for merging that. I thought next I might reduce the three ghc 8.10 stack yamls to one. Would you be interested in making the ghc 9.0 one the default, also ?
[23:21:22] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:28:34] <sm> in https://bpa.st/WKKA, why does hls not find the component for src/Ide/Main.hs, given the hie.yaml file below ?
[23:34:47] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[23:35:07] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:38:02] *** Joins: juhp (~juhp@128.106.188.82)
[23:41:54] *** Joins: hololeap_ (~hololeap@user/hololeap)
[23:46:24] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[23:47:08] <jneira[m]> <sm> "jneira, thanks for merging that...." <- well the problem with 9.0.1 is hls does not include all plugins for that ghc version and last lts is not 9.0.1 yest, so i would keep it on 8.10.7 
[23:48:00] <jneira[m]> afaics master only have two stack-8.10.*.yaml 
[23:48:32] <sm> jneira, there's also stack.yaml
[23:48:59] <sm> I'd propose dropping the two stack-8.10* and letting stack.yaml be the 8.10
[23:49:12] <jneira[m]> also i would keep one stack for supported ghc version, for consistency and cause install.hs script uses it to define what ghc versions you can install with the script 
[23:49:36] <jneira[m]> sm: still we need them for the install.hs script
[23:49:59] <sm> the script needs them to be named stack-X.Y.yaml ?
[23:50:22] <jneira[m]> yep, and if there is no stack-X.Y.yaml it does not let you install it
[23:50:37] <sm> ok, could stack.yaml become a symlink ?
[23:50:39] <jneira[m]> i dont like it and i tried to change long long time ago but ü§∑
[23:50:52] <jneira[m]> sm: in windows too :-P ?
[23:51:19] <jneira[m]> it supports symlinks nowadays but it has to be activated with admin perms etcetc
[23:51:27] <sm> I have a feeling that might work on windows these days. If not, how many hls devs are there needing the default stack.yaml on windows ?
[23:51:59] <sm> the current status quo means duplication and extra maintenance work, exactly what you don't want
[23:52:55] <sm> last resort, it could be a copy of stack-8.10* with a comment saying "this is a copy of stack-8.10*, please keep it that way" ?
[23:53:55] <sm> or, how do you think it could be resolved ?
