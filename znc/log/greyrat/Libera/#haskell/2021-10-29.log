[00:00:49] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[00:02:10] *** Quits: trog (~trog@user/trog) (Ping timeout: 260 seconds)
[00:03:51] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Changing host)
[00:03:51] *** Joins: zfnmxt (~zfnmxtzfn@user/zfnmxt)
[00:09:40] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:18:42] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:19:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[00:23:17] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:24:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 245 seconds)
[00:24:31] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[00:24:44] *** Joins: cheater (~Username@user/cheater)
[00:27:36] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:28:35] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Quit: leaving)
[00:30:45] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[00:31:09] *** Joins: cheater (~Username@user/cheater)
[00:35:13] *** Joins: fusion86 (~fusion@2a02-a44c-e6e5-1-2dd3-247f-2e63-c814.fixed6.kpn.net)
[00:35:25] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[00:37:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[00:38:55] <fusion86> Is there a difference between using the `const` function and simply throwing an argument away using `_`? Ex. https://paste.tomsmeding.com/1McA4jHv
[00:39:55] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[00:40:50] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[00:42:34] *** Joins: hseg (~gesh@185.120.126.13)
[00:42:34] *** Quits: hseg (~gesh@185.120.126.13) (Client Quit)
[00:42:49] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[00:42:49] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[00:42:52] *** allbery_b is now known as geekosaur
[00:42:59] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[00:45:21] <geekosaur> there is no direct difference between const and discarding the argument. but there is a difference between `foo = ...` where `...` consumes an argument (here via `const`) and `foo _ = ...`, because of the monomorphism restriction
[00:46:14] *** Joins: MoC (~moc@user/moc)
[00:47:40] <monochrom> If no constraints are involved, the monomorphism restriction is not triggered.
[00:49:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:52:09] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[00:58:03] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[00:58:14] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 246 seconds)
[00:59:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:00:14] *** Joins: faultline (~christian@nat-eduroam-01.scc.kit.edu)
[01:03:33] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[01:03:33] *** Joins: Cajun (~Cajun@user/cajun)
[01:05:51] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:13:06] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:19:10] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 260 seconds)
[01:23:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[01:30:32] *** Quits: akspecs__ (~akspecs@user/akspecs) (Read error: Connection reset by peer)
[01:35:11] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[01:36:14] *** Joins: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net)
[01:36:14] *** Quits: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net) (Changing host)
[01:36:14] *** Joins: akspecs__ (~akspecs@user/akspecs)
[01:41:34] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[01:41:40] *** Quits: ubert (~Thunderbi@178.115.57.1.wireless.dyn.drei.com) (Remote host closed the connection)
[01:42:23] *** Joins: MarsIronPI (~MarsIronP@166.205.153.209)
[01:47:10] *** Quits: MarsIronPI (~MarsIronP@166.205.153.209) (Ping timeout: 260 seconds)
[01:48:43] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[01:51:19] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 260 seconds)
[01:52:49] *** Joins: Xatenev (~xatenev@user/xatenev)
[01:53:02] *** Parts: Xatenev (~xatenev@user/xatenev) ()
[01:53:27] *** Quits: michalz (~michalz@185.246.204.109) (Remote host closed the connection)
[01:54:23] *** Quits: fusion86 (~fusion@2a02-a44c-e6e5-1-2dd3-247f-2e63-c814.fixed6.kpn.net) (Quit: Leaving)
[01:54:51] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[01:57:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:57:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:57:47] *** Joins: wroathe (~wroathe@user/wroathe)
[02:00:02] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[02:02:46] *** Quits: johnjay (~pi@192.142.100.50) (Quit: WeeChat 2.3)
[02:04:35] *** Joins: jess (~jess@libera/staff/jess)
[02:05:12] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[02:07:11] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 260 seconds)
[02:08:47] *** Joins: johnjay (~pi@192.142.100.50)
[02:09:00] *** Joins: gdd (~gdd@129.199.146.230)
[02:10:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:15:16] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:15:32] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[02:16:04] <aegon> hmm, i'm having my first sequencing problem with laziness. i have this block which calls a 2 handlers in succession within do notation
[02:16:14] <aegon> and for whatever reason the 2nd statement is happening first even with $! in there
[02:16:21] <aegon> pastebinning it up
[02:19:26] <aegon> rcs found"
[02:19:37] <aegon> https://paste.tomsmeding.com/vLXi3kp7
[02:20:52] <monochrom> This leaves open multiple questions.
[02:20:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Remote host closed the connection)
[02:21:19] <monochrom> Is "ByteString" from Data.ByteString or is it from Data.ByteString.Lazy?
[02:21:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[02:21:55] <monochrom> What's an actual h that does what you observed?
[02:22:10] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[02:22:27] <monochrom> What actual observation caused you to conclude your conclusion?
[02:22:42] <aegon> monochrom: i filled that in as a dummy to prevent overcomplicating things, the actually sigs of onSync takes a tuple of a bunch of stuff, and on sequence takes a Seq.Seq of tuples
[02:22:55] <aegon> both these callbacks mutate an MVar
[02:23:01] <aegon> i put print statemetns inside the moutation and on either end of it
[02:23:07] <monochrom> If you use Debug.Trace and insert a few of those traceMfoo thingies, does that still corroborate with your story?
[02:23:15] <aegon> and when the first statement is called, the 2nd statement is already in the mutex and processed in its handler
[02:23:45] <aegon> never done, how would iuse traceMfoo stuffs
[02:23:57] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:24:12] <aegon> i've been using print which might be further confusing things, but then again the observation of the data in the MVar within the modifyMVar_ corroberates the 2nds happening first
[02:24:23] <aegon> at least at the mutex taking level
[02:24:44] <aegon> let me try to get a fuller picture on paste
[02:25:23] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:25:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[02:26:37] <aegon> hmm, trying to simplify stuff down to printing but this happens in different threads so thats not a great source of truth either
[02:26:37] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[02:27:02] <monochrom> See this is why I am unconvinced until I see an actual h.
[02:27:11] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[02:27:40] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Client Quit)
[02:27:54] <monochrom> If the onSync field contains a "forkIO", no one should be surprised by "unexpected" order.
[02:28:51] <monochrom> The ultimate scientific question is how do you know you have ruled out all other explanations.
[02:28:52] <aegon> well ok so the full picture is a parentThread creates a bunch of handlers and shoves a mutex into them for state accumulation
[02:29:03] <aegon> it then forkIO's a child, which calls those handlers in a given order
[02:29:29] <aegon> the parent thread for whatever reason processes the handler calls out of order from what i can tell by observig what data has been put into the state at the time the mutex is aquired by each handler
[02:30:21] <monochrom> How do you know that your observation is not explained by interleaving two handlers?
[02:30:36] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:30:47] <aegon> the flow should be, package handlers -> fork (fork process calles handlerA once then handlerB 3 times and enters its recursive loop)
[02:31:10] <aegon> i would think that the parent handler A being called from the child thread should finish before handler b is called from the child thread
[02:31:27] <aegon> given the first thing they both do is grab a mutex to the state wit modifyMVar_
[02:31:41] <aegon> but what i'm seeing is that handlerb processes 3 times, then handler a processes
[02:32:06] <aegon> but the call doesn't return till its completely done with processing, theres no forking within the call
[02:32:51] <aegon> so even if a child thread calls A, B, B, B, which actually isn't happening between threads afaik now that i'm saying it out load, its invoking those continuations on the child thread
[02:33:30] <aegon> hmm :\ i'm gonna try to delete a bonch of extra stuff and git a minimum reproducable thing going
[02:33:56] <aegon> i was hoping someone would see the convention and be like, AH! thats laziness cauing it like this *tadaaa* :P
[02:34:09] <monochrom> But IO is not lazy.
[02:34:39] *** Joins: jespada (~jespada@181.28.253.200)
[02:34:46] <monochrom> If you say so much as "do { print 1; print 2 }" you will never observe out-of-order.
[02:34:51] <aegon> yeah its wierd, a do block should definitely be sequenced, which is why i came runing here
[02:35:10] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:35:11] <aegon> afaik this code is taking do {print 1: print 2} and then at runtime going, print 2; print 1
[02:35:51] <monochrom> But if you do "do {forkIO f; forkIO f} where f = do { print 1; print 2}", you may misinterpret an outcome as out-of-order.
[02:35:51] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[02:36:03] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[02:36:29] <monochrom> For example an outcome could be "1, 2, 1, 2" and then you fixate on the middle "2, 1" and call it out-of-order.
[02:36:54] <aegon> its \p1 p2 -> forkIO (do {p1; p2) and thats resulting in p2 being called before p1
[02:37:15] <aegon> but i'm definite missing somethign because that isn't how that should work
[02:38:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[02:38:13] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:39:12] <sm> just confirming, the paste looks ok 
[02:39:25] <sm> more realistic paste needed
[02:40:39] <aegon> more realistic paste in progress, changing the callbacks to incrimenting an int in a MVar and printing it
[02:41:23] <sm> or, well.. hmm.. does it make a difference if you `print <<=` before each action ? Forcing it to evaluate
[02:41:50] <sm> no, never mnid
[02:42:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:43:00] <aegon> hmm, this stuff is all happening pretty deep in this code from the entrypoint, i'm not sure how best to easily whip up an repro outside of the context
[02:43:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:43:43] <sm> sharing a repro is hard, maybe just simplifying your code in place is easier
[02:43:46] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:44:05] *** Joins: alzgh (~alzgh@user/alzgh)
[02:49:20] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[02:50:29] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d76b9ac87bdf676c186.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[02:52:06] *** Joins: brettgilio (~brettgili@x-node.gq)
[02:52:11] <aegon> here's a closer version but i'm worried i missed something in that simplification
[02:52:14] <aegon> https://paste.tomsmeding.com/S2jOauqM
[02:52:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:53:42] <aegon> it might need some liberal $ thrown in places to compile but thats the calling order and the mvar behavior
[02:54:46] *** Joins: Skyfire (~pyon@user/pyon)
[02:56:03] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:56:10] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:56:21] *** Quits: Inst__ (~Inst@2601:6c4:4080:3f80:258f:7b54:f932:b719) (Ping timeout: 245 seconds)
[02:57:35] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[02:58:22] <Axman6> what's modyfMVar?
[02:58:39] <aegon> modifyMVar_
[02:59:24] <aegon> typed by hands that are having synchronization issues
[02:59:48] <sm> I find that not easy to understand. If it's still happening, I'd simplify more (list the actions explicitly in a do sequence)
[02:59:55] <aegon> and dropping charaters
[03:00:30] <Axman6> @hoogle modifyMVar_
[03:00:30] <lambdabot> Control.Concurrent.MVar modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()
[03:00:30] <lambdabot> GHC.Conc.Sync modifyMVar_ :: MVar a -> (a -> IO a) -> IO ()
[03:00:31] <lambdabot> Control.Concurrent.MVar.Lifted modifyMVar_ :: (MonadBaseControl IO m) => MVar a -> (a -> m a) -> m ()
[03:00:44] <Axman6> so you're missing a lambda there?
[03:00:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[03:01:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:03:07] <Axman6> FYI, $! isn't going to change the ordering that things are executed in IO, it jujst forced the IO expression itself, it doesn't have anything to do with evaluation
[03:03:22] <Axman6> uh, misread, ignore me
[03:04:11] <Axman6> I'm struggling to follow this because this code doesn't type check
[03:04:42] <Axman6> but ifyou are getting the behaviour you're claiming, the IO monad is fundamentally broken, and that seem unlikely
[03:04:48] *** Quits: jespada (~jespada@181.28.253.200) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:06:13] <aegon> yeah this is really wierd, there must be something else going on here. the only way i can get the intended behavior is to do it twice
[03:06:28] <aegon> the first call to the first handler always gets evaluated first
[03:06:32] <aegon> regaurdless of do call order
[03:06:53] <Axman6> do you have actual code you can share?
[03:06:59] <sm> my 2c: this is much too complicated, simplify further
[03:07:32] <monochrom> Ugh Sink vs Sync
[03:07:45] <sm> at some point it'll stop having the unexpected sequence
[03:08:10] <Axman6> then copy and paste that code and never question it again, like a true software engineer
[03:08:30] <aegon> balls, i cant share the whole thing, :| i'm gonna try ripping things out till it sequences as expected, this might be too big of a rabbit hole to pick at, maybe just taking these sequences out of this funciton might change things? don't know i'm going to try  nonesense changes till i see different behavior
[03:09:30] <aegon> if you don't Sync your Sinks and pass your Sources via Sinks before sending via sources, well ... your Sunk
[03:09:43] <aegon> i see no problems with these names :P
[03:09:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e) (Ping timeout: 264 seconds)
[03:10:27] <aegon> ok, i'll shut up for a while and try stepping along the routes you guys have laid out, hopefully back with some sort of finding in a bit
[03:10:32] <monochrom> No problem, except it looks like one of them is a typo of the other.
[03:11:41] <Axman6> IMO, I would add some debug logging... everywhere and see what is actually being executed where
[03:11:51] <aegon> do be clear, i was being sarcastic, your absolutely right the names are confusing
[03:12:08] <aegon> Axman6: i'm using print but i don't think print order is garunteed between threads right? is there a better tool for this type of stuff?
[03:12:13] *** Joins: pavonia (~user@user/siracusa)
[03:12:33] <aegon> print is just putStrLn . show right?
[03:12:46] <Axman6> no it's not but that shouldn't be affecting what you're claiming since the calls are coming in the same thread
[03:12:50] <Axman6> yes
[03:13:22] <monochrom> This is why I raised the "do {forkIO f; forkIO f} where f = do { print 1; print 2}" "1, 2, 1, 2" example.
[03:13:50] <Axman6> or 1 1 2 , both are totally ok
[03:14:03] <Axman6> so, give threads ids so you know which thread printed what
[03:14:14] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[03:16:29] *** Joins: xsperry (~xs@user/xsperry)
[03:17:10] *** Joins: Cajun (~Cajun@user/cajun)
[03:17:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:17:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:17:59] *** Joins: wroathe (~wroathe@user/wroathe)
[03:19:41] <aegon> oh man :X i'm gonna have egg on my face for a while i think
[03:19:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:19:55] <sm> stick trace everywhere
[03:20:09] <sm> always a good move :)
[03:20:15] <monochrom> I prefer cake or pie.
[03:20:21] <aegon> no i found it... :|
[03:20:32] <aegon> i wasn't following the rest of the thread
[03:20:40] <aegon> later on theres an erronious extra call to sync
[03:20:50] <aegon> io is working fine, my eyes aren't
[03:21:50] <aegon> thanks for taking a look at the examples
[03:22:12] * aegon puts on the dunce cap for the day
[03:22:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:22:56] <sm> sounds like a haskell programmer :)
[03:23:49] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::d3fb)
[03:24:12] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[03:24:25] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[03:28:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[03:30:39] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Quit: Leaving)
[03:35:05] <aegon> i shouldn't have put any sort of initial set of calls in the same place as creating the other half of the continuations, another tick in my worry bucket about making IO accessable too many places
[03:36:55] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: Ping timeout (120 seconds))
[03:37:54] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[03:38:07] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:21d2:19c0:e01b:f66c)
[03:38:22] <remexre> is there a way to get either tuple syntax or list syntax for hlists?
[03:38:40] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 268 seconds)
[03:39:03] <remexre> or are hlists "dead" and do people use something else to get generic computations over tuples of unknown length
[03:40:13] <awpr> you mean make `[5, "hi"]` work as an `HList [Int, String]`?  not currently.  I've been considering making a GHC plugin that could do that, but it's vaporware and would take substantial work even if I did decide to prioritize it
[03:40:38] <awpr>  I should say, not that I know of
[03:41:02] <remexre> I guess alternatively-and-isomorphically, is there a good way to get n-ary curried functions?
[03:41:25] *** Joins: dajoer (~david@user/gvx)
[03:41:36] <remexre> in this case, where each argument has a certain trait, and the final return is polymorphic (but doesn't depend on the arg types)
[03:41:41] <remexre> er, typeclass*
[03:41:41] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[03:41:58] <remexre> I've been writing Rust for the last couple years instead of Haskell :)
[03:42:01] <awpr> there's the trick used by `printf` where it always returns a `forall r. FormatResult r => r` at each step, or something to that effect
[03:42:10] <awpr> sounds like it has some hope of being applicable here
[03:42:23] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[03:42:30] <remexre> I'll take a look at that; is that Text.Printf.printf?
[03:42:52] <awpr> yeah, s/FormatResult/PrintfType/
[03:43:36] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 268 seconds)
[03:43:36] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[03:43:57] <remexre> huh, okay, its approach makes sense, I think
[03:44:01] <remexre> I'll try that, thanks!
[03:45:31] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[03:47:27] *** Joins: Farzad (~FarzadBek@185.131.125.100)
[03:48:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:49:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:51:47] *** Lord_of_Life_ is now known as Lord_of_Life
[03:53:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[03:59:16] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Ping timeout: 245 seconds)
[04:01:00] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:21d2:19c0:e01b:f66c) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:01:40] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21d2:19c0:e01b:f66c)
[04:02:08] <remexre> oh ugh, breaks when the return type is a monad typeclass
[04:02:20] <remexre> because (a -> m ()) is a monad too
[04:02:32] <remexre> er
[04:03:17] <remexre> because typeclass resolution doesn't figure out that really only one instance matches
[04:03:54] <remexre> between  Func f => Func (a -> f)  and  (Func f, Monad m, a ~ ()) => Func (m a)
[04:07:08] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[04:07:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:08:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:08:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:09:59] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[04:10:08] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:10:09] <remexre> oh, right, {-# OVERLAPPING #-} exists
[04:11:34] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Quit: ZNC - https://znc.in)
[04:18:52] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[04:20:48] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:eba7:95bb:d099:a7d8)
[04:21:40] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:24:27] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[04:25:11] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[04:25:29] *** Joins: CannibisIndica (~herb@user/mesaboogie)
[04:28:02] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[04:29:55] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[04:31:54] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:33:48] *** Quits: alx741 (~alx741@186.178.109.79) (Quit: alx741)
[04:38:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:42:35] *** Quits: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl) (Ping timeout: 246 seconds)
[04:43:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[04:43:43] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:44:27] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[04:46:50] *** Quits: mmhat (~mmh@55d4b856.access.ecotel.net) (Ping timeout: 260 seconds)
[04:49:50] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:50:39] *** Joins: MoC_ (~moc@user/moc)
[04:51:21] *** Quits: MoC (~moc@user/moc) (Ping timeout: 245 seconds)
[04:53:23] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[05:00:20] *** Joins: mmhat (~mmh@55d4bea4.access.ecotel.net)
[05:06:45] *** Quits: Farzad (~FarzadBek@185.131.125.100) (Quit: Leaving)
[05:08:26] *** Quits: mmhat (~mmh@55d4bea4.access.ecotel.net) (Ping timeout: 245 seconds)
[05:13:07] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:15:15] *** Quits: xff0x (~xff0x@2001:1a81:525b:da00:1097:4d57:43e2:986f) (Ping timeout: 260 seconds)
[05:16:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:17:01] *** Joins: xff0x (~xff0x@2001:1a81:529e:f300:b22f:69e6:aa77:fd2f)
[05:21:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[05:22:15] *** Joins: alzgh (~alzgh@user/alzgh)
[05:25:19] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:31:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:33:39] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:47:23] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[05:48:05] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[05:50:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:54:30] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 260 seconds)
[05:55:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:55:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:55:49] *** Joins: wroathe (~wroathe@user/wroathe)
[05:56:47] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[05:58:12] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[06:00:25] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[06:00:51] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[06:08:47] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:10:20] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:21:45] *** Joins: mbuf (~Shakthi@171.61.174.60)
[06:24:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[06:24:19] *** Quits: td_ (~td@94.134.91.221) (Ping timeout: 260 seconds)
[06:25:57] *** Joins: td_ (~td@muedsl-82-207-238-132.citykom.de)
[06:26:00] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[06:27:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Remote host closed the connection)
[06:42:26] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[06:47:22] *** Joins: Guest3764 (~fedora@59.98.57.201)
[06:49:06] *** Quits: Guest3764 (~fedora@59.98.57.201) (Client Quit)
[06:49:13] *** zzz is now known as onion
[06:56:29] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[06:56:47] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Ping timeout: 264 seconds)
[06:59:52] *** Joins: nikshalark (~nikshalar@c-73-110-102-193.hsd1.in.comcast.net)
[07:25:32] *** Joins: bgamari (~bgamari@64.223.157.117)
[07:25:49] *** Quits: bgamari_ (~bgamari@64.223.175.225) (Ping timeout: 252 seconds)
[07:26:26] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[07:28:25] *** Quits: bgamari (~bgamari@64.223.157.117) (Client Quit)
[07:30:56] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 245 seconds)
[07:32:20] *** Joins: bgamari (~bgamari@64.223.227.106)
[07:40:24] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[07:41:01] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[07:51:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[07:53:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:53:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:53:31] *** Joins: wroathe (~wroathe@user/wroathe)
[08:01:43] *** Joins: v01d4lph4 (~v01d4lph4@223.190.95.48)
[08:01:43] *** Quits: v01d4lph4 (~v01d4lph4@223.190.95.48) (Changing host)
[08:01:43] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[08:05:10] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[08:08:10] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[08:13:14] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:20:23] *** Quits: nikshalark (~nikshalar@c-73-110-102-193.hsd1.in.comcast.net) (Quit: Lost terminal)
[08:20:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:30:19] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[08:31:09] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[08:32:09] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:55:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[08:56:41] *** Quits: idnar (sid12240@debian/mithrandi) (Read error: Connection reset by peer)
[08:56:47] *** Quits: gonz___ (sid304396@lymington.irccloud.com) (Ping timeout: 264 seconds)
[08:56:47] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 264 seconds)
[08:56:47] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 264 seconds)
[08:56:47] *** Quits: scav (sid309693@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:56:47] *** Quits: tnks (sid412124@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:56:49] *** Quits: gmc (sid58314@ilkley.irccloud.com) (Read error: Connection reset by peer)
[08:56:50] *** Joins: idnar (sid12240@debian/mithrandi)
[08:56:58] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[08:56:58] *** Joins: Guest39 (~Guest39@103.142.31.135)
[08:57:06] *** Quits: SanchayanMaity (sid478177@hampstead.irccloud.com) (Read error: Connection reset by peer)
[08:57:07] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Read error: Connection reset by peer)
[08:57:14] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[08:57:14] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[08:57:16] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[08:57:18] *** Joins: bjs (sid190364@user/bjs)
[08:57:23] *** Quits: ysh (sid6017@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[08:57:23] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[08:57:23] *** Quits: taktoa[c] (sid282096@tinside.irccloud.com) (Ping timeout: 264 seconds)
[08:57:51] <Guest39> When testing a function with HUnit how do I mock the database connection and the query response
[08:57:59] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[08:57:59] *** Quits: cbarrett (sid192934@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:57:59] *** Quits: lightandlight (sid135476@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:57:59] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[08:57:59] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (Ping timeout: 264 seconds)
[08:58:16] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[08:58:22] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[08:58:35] *** Quits: alinab (sid468903@helmsley.irccloud.com) (Read error: Connection reset by peer)
[08:58:35] *** Quits: edmundnoble (sid229620@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:58:35] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Ping timeout: 264 seconds)
[08:58:40] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[08:58:43] *** Joins: alinab (sid468903@id-468903.helmsley.irccloud.com)
[08:58:48] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[08:58:49] *** Joins: gonz___ (sid304396@id-304396.lymington.irccloud.com)
[08:58:51] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (Ping timeout: 245 seconds)
[08:58:59] *** Joins: bw (sid2730@user/betawaffle)
[08:59:04] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[08:59:10] *** Joins: lightandlight (sid135476@id-135476.helmsley.irccloud.com)
[08:59:12] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[08:59:14] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[08:59:14] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[08:59:15] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[08:59:45] *** Joins: tnks (sid412124@id-412124.helmsley.irccloud.com)
[08:59:47] *** Quits: hamishmack (sid389057@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[08:59:47] *** Quits: awpr (uid446117@lymington.irccloud.com) (Ping timeout: 264 seconds)
[09:00:02] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[09:00:23] *** Quits: integral (sid296274@user/integral) (Ping timeout: 264 seconds)
[09:00:23] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 264 seconds)
[09:00:43] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[09:01:20] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[09:02:17] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[09:02:38] <Axman6> mocking a database cnnection seems difficult. mocking queries to the database seems doable though
[09:02:59] <Guest39> could you tell me how I can accomplish that
[09:02:59] *** Joins: hamishmack (sid389057@id-389057.hampstead.irccloud.com)
[09:03:10] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:03:10] <Axman6> it would very much depend on your codebase
[09:03:29] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[09:03:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[09:03:59] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[09:04:59] *** Joins: integral (sid296274@user/integral)
[09:04:59] <Guest39> well iam just getting started learning so
[09:05:11] <Guest39> I used postgresql-simple
[09:06:43] *** Quits: obviyus (sid415299@user/obviyus) (Read error: Connection reset by peer)
[09:06:50] <Axman6> A common way to do this is to define a type class that contains functions which define the interface you need, and then make instances for that type class against the databse and as a mock instance
[09:06:52] *** Joins: obviyus (sid415299@user/obviyus)
[09:08:18] <Guest39> Understood I then create have mock implementation for everything that iam goingto use from the actual  library
[09:08:36] *** Joins: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com)
[09:08:45] <Guest39> but wont the code still be importing the library functions 
[09:09:00] <Guest39> how do i make it use my mock implementation temporarily
[09:09:32] <Guest39> I mean only while running the test casess
[09:15:00] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:17:45] <Axman6> I haven't read the article, but skimming this looks like it may be a good introduction: https://making.pusher.com/unit-testing-io-in-haskell/
[09:18:51] <Axman6> maybe this is a better one https://lexi-lambda.github.io/blog/2017/06/29/unit-testing-effectful-haskell-with-monad-mock/
[09:19:42] <Axman6> this looks pretty cool actually
[09:19:50] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[09:22:07] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[09:25:00] <Guest39> thank you
[09:25:25] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[09:27:08] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:28:46] *** Quits: phma (~phma@host-67-44-208-16.hnremote.net) (Read error: Connection reset by peer)
[09:32:14] *** Joins: _xor (~xor@72.49.199.147)
[09:32:45] *** Joins: phma (~phma@host-67-44-208-251.hnremote.net)
[09:38:05] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[09:41:19] *** Joins: sagax (~sagax_nb@user/sagax)
[09:42:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[09:46:19] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[09:49:10] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[09:49:38] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[09:49:59] *** Joins: Sgeo (~Sgeo@user/sgeo)
[09:59:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:59:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:59:13] *** Joins: wroathe (~wroathe@user/wroathe)
[10:03:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[10:04:11] *** Quits: fendor (~fendor@178.165.166.121.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[10:04:16] *** Joins: michalz (~michalz@185.246.204.109)
[10:06:39] *** Joins: fendor (~fendor@178.165.166.121.wireless.dyn.drei.com)
[10:07:58] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[10:11:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:12:06] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[10:14:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:18:15] *** Quits: Guest39 (~Guest39@103.142.31.135) (Quit: Client closed)
[10:19:26] *** Joins: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr)
[10:25:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:25:39] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:27:53] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.22)
[10:27:53] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.22) (Changing host)
[10:27:53] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[10:27:54] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[10:28:32] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[10:28:41] *** Joins: comandingo (~drever@ipb218f985.dynamic.kabel-deutschland.de)
[10:29:03] *** Quits: comandingo (~drever@ipb218f985.dynamic.kabel-deutschland.de) (Client Quit)
[10:30:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[10:37:06] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:38:05] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[10:41:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:49:10] *** Joins: hololeap (~hololeap@user/hololeap)
[10:52:15] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[10:55:51] *** Quits: MoC_ (~moc@user/moc) (Quit: Konversation terminated!)
[10:57:10] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:57:17] *** Joins: MoC (~moc@user/moc)
[10:59:49] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[11:00:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[11:00:53] *** Joins: chele (~chele@user/chele)
[11:01:53] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[11:02:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[11:04:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[11:05:15] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[11:05:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[11:08:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:08:19] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d78f12f2b4aa168a17a.dip0.t-ipconnect.de)
[11:09:41] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:13:14] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[11:17:55] *** Joins: jumper149 (~jumper149@80.240.31.34)
[11:21:58] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[11:28:27] *** Joins: ubert (~Thunderbi@178.165.162.187.wireless.dyn.drei.com)
[11:30:05] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[11:30:45] *** Quits: fendor (~fendor@178.165.166.121.wireless.dyn.drei.com) (Remote host closed the connection)
[11:36:55] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:42:30] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[11:44:38] *** Joins: d0ku (~d0ku@178.43.150.25.ipv4.supernova.orange.pl)
[11:46:46] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[11:46:54] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[11:47:38] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:48:09] *** Joins: hololeap (~hololeap@user/hololeap)
[11:50:51] *** bontaq` is now known as bontaq
[11:57:16] *** Quits: phma (~phma@host-67-44-208-251.hnremote.net) (Read error: Connection reset by peer)
[11:58:32] *** Joins: phma (~phma@host-67-44-208-63.hnremote.net)
[12:02:36] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:02:58] *** Joins: vpan (~0@212.117.1.172)
[12:05:17] *** Joins: cfricke (~cfricke@user/cfricke)
[12:08:20] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 258 seconds)
[12:10:42] *** Joins: alzgh (~alzgh@user/alzgh)
[12:10:52] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[12:12:53] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:37:01] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:41:26] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[12:42:07] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[12:42:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[12:47:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 264 seconds)
[12:49:15] *** Quits: jumper149 (~jumper149@80.240.31.34) (Ping timeout: 260 seconds)
[12:49:59] *** Joins: jumper149 (~jumper149@80.240.31.34)
[12:51:15] *** Joins: mmhat (~mmh@55d4be4b.access.ecotel.net)
[12:52:22] *** gehmehgeh_ is now known as gehmehgeh
[12:53:04] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[12:55:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[12:55:16] *** Quits: poljar (~poljar@93-139-113-226.adsl.net.t-com.hr) (Ping timeout: 252 seconds)
[12:55:57] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:56:05] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[12:56:57] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:57:13] *** Joins: poljar (~poljar@78-3-31-140.adsl.net.t-com.hr)
[13:08:29] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 264 seconds)
[13:12:33] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[13:14:10] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:15:12] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[13:15:31] *** Joins: alzgh (~alzgh@user/alzgh)
[13:27:59] *** Quits: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[13:32:11] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 264 seconds)
[13:41:17] *** Joins: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr)
[13:42:08] *** Joins: __monty__ (~toonn@user/toonn)
[13:42:58] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[13:46:04] *** Joins: wonko (~wjc@user/wonko)
[13:47:53] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[13:48:42] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:51:19] *** Joins: jjrol (~jjrol@n122-104-58-147.sun4.vic.optusnet.com.au)
[13:52:21] *** Parts: jjrol (~jjrol@n122-104-58-147.sun4.vic.optusnet.com.au) ()
[13:54:32] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:05:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:06:05] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d78f12f2b4aa168a17a.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[14:06:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:09:35] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[14:12:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:12:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:15:31] *** Joins: dcl^ (~dcl@wsip-98-188-242-6.mc.at.cox.net)
[14:16:22] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[14:17:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:18:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:18:23] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[14:23:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:24:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:25:55] *** Quits: ubert (~Thunderbi@178.165.162.187.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[14:26:24] *** Joins: Cajun (~Cajun@user/cajun)
[14:27:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:31:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[14:33:02] *** Quits: faultline (~christian@nat-eduroam-01.scc.kit.edu) (Ping timeout: 246 seconds)
[14:33:46] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[14:33:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:35:09] *** Joins: img (~img@user/img)
[14:35:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:42:48] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.209)
[14:44:35] *** Quits: Alex_test (~al_test@178.34.150.219) (Ping timeout: 260 seconds)
[14:45:05] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:45:32] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[14:45:49] *** Quits: AlexNoo_ (~AlexNoo@178.34.163.209) (Client Quit)
[14:45:59] *** Quits: AlexZenon (~alzenon@178.34.150.219) (Ping timeout: 260 seconds)
[14:46:03] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.209)
[14:46:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:46:35] *** Quits: AlexNoo (~AlexNoo@178.34.150.219) (Ping timeout: 264 seconds)
[14:46:48] *** Joins: AlexZenon (~alzenon@178.34.163.209)
[14:46:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:46:59] *** Joins: Alex_test (~al_test@178.34.163.209)
[14:47:31] *** Joins: ubert (~Thunderbi@178.165.162.187.wireless.dyn.drei.com)
[14:47:50] *** AlexNoo_ is now known as AlexNoo
[14:49:16] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 245 seconds)
[14:49:19] *** Joins: talismanick (~talismani@76.78.246.111)
[14:50:01] <talismanick> Realized I didn't have Haskell yet on my computer, so I curl'd ghcup, ran it, and got... an error?
[14:50:10] <maerwald> talismanick: which one
[14:50:51] <talismanick> maerwald: Version of ghcup? Whichever's latest from the website - I didn't pipe directly to sh, but into a script which I then executed
[14:51:06] <maerwald> which error
[14:51:25] <talismanick> I looked at config.log in /tmp, and it was calling GCC with flags which don't exist, like -V
[14:51:58] <maerwald> that's not ghcup, that's the GHC configure script
[14:52:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:52:14] <maerwald> so it failed during installing the bindist?
[14:52:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:52:43] <talismanick> yeah
[14:52:57] <maerwald> can you reproduce the error when running configure?
[14:53:25] <talismanick> maerwald: Correct. I tried it 2x.
[14:53:42] <maerwald> what's the exact error then?
[14:54:01] <maerwald> not all errors in config.log are fatal
[14:54:48] <talismanick> https://0x0.st/-nTw.log
[14:55:15] <talismanick> maerwald: Yeah, but it does list 2 errors as "fatal"
[14:55:46] <maerwald> it's just probing your gcc for cli flags afaik
[14:56:04] <maerwald> error: cannot run C compiled programs.
[14:56:07] <maerwald> this looks relevant
[14:56:59] <tomsmeding> in particular that "permission denied"
[14:57:13] <tomsmeding> is your /tmp on a partition which does not allow executing executables?
[14:57:13] <talismanick> I don't remember running it with sudo
[14:57:26] * tomsmeding thinks that's the noexec mount option, but might remember incorrectly
[14:58:03] <talismanick> tomsmeding: Well, I remember setting tmp with "nosuid" in /etc/fstab not long ago
[14:58:09] <talismanick> Here's the whole line: tmpfs /tmp tmpfs defaults,nosuid,nodev 0 0
[14:58:13] <maerwald> talismanick: run the script with TMPDIR=$HOME/.ghcup-tmp or so set
[14:58:49] <maerwald> I believe cabal itself will bail out badly too if it can't execute binaries in /tmp
[14:58:51] *** Joins: johnjay (~pi@192.142.100.50)
[14:59:08] <tomsmeding> talismanick: try what maerwald suggests; if that does work, 'mount | grep /tmp' and see what flags are there (I have nosuid too, works fine)
[14:59:15] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[15:00:37] *** Joins: img (~img@user/img)
[15:01:11] <talismanick> tomsmeding: Good call - there is indeed a noexec flag set
[15:01:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:01:29] <tomsmeding> no idea how that might end up there, but that's probably the issue here
[15:01:43] <maerwald> it's an odd choice
[15:01:54] <maerwald> I don't see that improving security
[15:02:12] <talismanick> tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noexec,noatime,size=6291456k,inode64)
[15:02:38] <talismanick> I don't remember ever writing that explicitly - could it be that btrfs put it there?
[15:02:38] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:02:51] *** Quits: dcl^ (~dcl@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[15:03:00] <maerwald> at any rate, check out https://www.haskell.org/ghcup/guide/#env-variables
[15:03:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:03:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:05:06] <talismanick> maerwald: I think I've seen that at some point - I have the XDG option set in ~/.bash_profile already
[15:05:13] <hpc> it stops a lot of lazy malware - /tmp is one of those places every user needs to write to, so it's a good place to drop the next stage of an attack after you have disk access
[15:06:14] <maerwald> malware?
[15:06:20] <maerwald> like ghcup? :D
[15:06:40] <hpc> like php :D
[15:06:51] <talismanick> write and compile hello_world.c => "Windows detected malware and deleted it"
[15:09:44] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net)
[15:10:02] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[15:14:25] <bontaq> lmao
[15:15:29] <talismanick> Anyways, I remounted /tmp with "exec" in the args, and it works fine now
[15:16:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:18:46] * tomsmeding wonders why a tmpfs has noatime set -- that's for increasing performance due to not performing additional non-sequential writes for each file update, right? But tmpfs is an in-memory file system, so that shouldn't matter much
[15:19:36] <hpc> atime is access time?
[15:19:43] <hpc> it probably improves read performance enough to be worth it
[15:19:46] <geekosaur> tmpfs is more complicated than that iirc. in particular it can use otherwise free swap space
[15:20:18] <tomsmeding> ah
[15:20:20] <talismanick> hpc: Don't ask me, I don't know why. I posted the tmpfs line in /etc/fstab, which is roughly what you'd expect
[15:20:28] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[15:20:38] <tomsmeding> talismanick: hpc responded to me I think :p
[15:20:48] <talismanick> oh, duh
[15:20:50] <talismanick> tired
[15:20:56] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[15:21:20] *** Joins: oxide (~lambda@user/oxide)
[15:23:02] <hpc> :P
[15:29:20] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:29:29] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[15:29:34] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:29:53] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[15:30:27] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Client Quit)
[15:30:44] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[15:34:54] *** Joins: guniberas (~guniberas@42.191.188.121)
[15:36:33] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[15:49:59] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[15:51:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:54:41] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 264 seconds)
[15:57:39] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:01:22] *** Joins: cfricke (~cfricke@user/cfricke)
[16:01:27] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[16:02:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:06:04] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[16:07:27] *** Joins: img (~img@user/img)
[16:08:56] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:12:44] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[16:14:40] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[16:26:41] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:26:55] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:27:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:28:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:28:59] *** Joins: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi)
[16:31:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[16:35:47] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 264 seconds)
[16:36:58] <maerwald> I can't coerce if the target data constructor is not in scope?
[16:37:26] <merijn> maerwald: You mean newtype constructor, presumably? And correct
[16:37:35] <maerwald> yes
[16:37:39] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[16:38:05] <merijn> Can't coerce without visible constructor (to allow abstract datatypes that can't be coerced)
[16:38:21] <maerwald> is there a hack to make it work?
[16:38:27] <merijn> unsafeCoerce? :p
[16:39:05] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 260 seconds)
[16:40:53] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[16:41:02] *** Joins: kn07_ (~kn07_@86.121.23.168)
[16:42:07] <maerwald> well, that was easy
[16:42:22] <maerwald> packages not exposing internal modules are annoying
[16:44:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:45:33] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[16:45:39] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:46:01] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:47:53] <Tisoxin> There aren't any laws for the Alternative type class, are there?
[16:48:19] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:49:27] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[16:50:14] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[16:53:09] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[16:53:30] <Tisoxin> nvm
[16:54:57] *** Joins: hendursa1 (~weechat@user/hendursaga)
[16:57:40] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[16:58:19] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:06:21] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[17:07:17] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[17:08:29] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:08:30] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[17:08:44] *** Parts: amazigh (~amirouche@user/amirouche) (WeeChat 2.8)
[17:09:17] *** Joins: fendor (~fendor@178.115.69.86.wireless.dyn.drei.com)
[17:09:50] <lortabac> Tisoxin: that's a good question, I would say it should have the same laws as Monoid, but perhaps different laws are also possible and no agreement has been reached
[17:10:11] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 246 seconds)
[17:11:00] <lortabac> it would be interesting to read the discussions that led to the absence of laws in the documentation
[17:12:16] <lortabac> maybe, given the superclass constraint, the Applicative laws are enough?
[17:13:40] <merijn> Alternative laws are associativity + identity
[17:13:42] <merijn> So same as monoid
[17:13:51] <merijn> That part is uncontroversial, afaik
[17:14:02] <merijn> The controversy is the relation between Alternative/MonadPlus
[17:14:08] <maerwald> anyone tried GHC under wine?
[17:14:28] <lortabac> merijn: but why aren't they mentioned in the documentation?
[17:14:29] <maerwald> I'm getting tired of coding inside a windows VM
[17:15:28] <merijn> lortabac: They are? "A monoid on applicative functors." and empty says "The identity of <|>" and <|> says "An associative binary operation"
[17:15:38] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[17:16:07] <merijn> lortabac: The real controversy is mzero/mplus
[17:16:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[17:16:33] <merijn> lortabac: Specifically the docs say: "v >> mzero = mzero" but does that mean the effects of 'v' happened or not?
[17:16:55] <lortabac> merijn: right, I was looking for an explicit list of laws as the other classes
[17:17:25] <merijn> lortabac: Yeah, I recall that existing in the past (but maybe I imagined it?), should be easy for someone to add that, though
[17:18:31] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[17:19:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Quit: restart)
[17:20:31] <geekosaur> might check the Typeclassopedia
[17:21:01] <geekosaur> although if it's there then someone should really add it to the class docs
[17:21:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:22:51] <lortabac> I'm reading the Typeclassopedia, it explains the problem well
[17:26:29] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 264 seconds)
[17:28:40] *** Quits: ubert (~Thunderbi@178.165.162.187.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[17:30:33] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[17:30:59] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[17:33:59] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 260 seconds)
[17:37:49] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[17:39:32] *** Quits: lortabac (~lortabac@atoulouse-256-1-14-70.w92-136.abo.wanadoo.fr) (Quit: WeeChat 2.8)
[17:42:16] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d78f12f2b4aa168a17a.dip0.t-ipconnect.de)
[17:43:08] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:47:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[17:51:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Ping timeout: 245 seconds)
[17:52:59] *** Joins: faultline (~christian@193.27.14.21)
[17:54:31] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[17:55:16] <Tisoxin> <merijn> "lortabac: Specifically the..." <- i stumpled upon this controvery due to megaparsecs ParsecT: https://hackage.haskell.org/package/megaparsec-9.2.0/docs/Text-Megaparsec.html#t:ParsecT
[17:57:20] <merijn> Well, it's not a law in the docs, because people can't agree on it :p
[17:57:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Quit: relog)
[17:57:56] <Tisoxin> yeah
[18:00:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:02:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:06:53] <adamCS> maerwald: Thanks again for all the help yesterday!  Using the ByteString functions as a Streamly unfold ends up 3 times faster than Text.hGetline.  I can see from all your fine tuned inline pragmas that there's some subtlety to inlining well for streamly.  Any place you would go to read/learn about that? I'm onto to optimizing another bit that I would like to fuse as nicely as possible...
[18:07:57] <maerwald> adamCS: https://github.com/composewell/streamly/blob/master/docs/optimizing.md
[18:08:53] <maerwald> what do you mean with "ByteString functions as Streamly unfold"? Did you use streamly-bytestring with the elemIndex?
[18:09:21] <adamCS> No.  Just used your function to feed Streamly.Unfold.unfoldr
[18:09:23] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:09:24] <adamCS> more or less
[18:09:56] <maerwald> https://hackage.haskell.org/package/streamly-0.8.0/docs/Streamly-Prelude.html#v:unfoldr
[18:09:59] <maerwald> that way?
[18:10:40] <maerwald> I still feel it's kinda a hack
[18:10:52] <maerwald> Because we're relying on lazy bytestring
[18:11:00] <adamCS> https://gist.github.com/adamConnerSax/f115bb26a15e597d1199d42af2645568
[18:11:41] <adamCS> Sure.  I'm just trying to make a thing faster though, so it's a win.  10 times faster than Pipes using Pipes.Text and feeding Pipes via that same function didn't speed that up much.  Which is confusing.
[18:11:50] <maerwald> yeah, but we're not using streamly to read the file now, which is sad
[18:12:33] <maerwald> although we could: https://hackage.haskell.org/package/streamly-bytestring-0.1.3/docs/Streamly-External-ByteString-Lazy.html
[18:12:43] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 260 seconds)
[18:12:48] <merijn> adamCS: I mean, bytestring being faster than Text is kinda obvious, though? You save a lot of effort if you don't bother decoding the data
[18:12:59] <maerwald> merijn: not necessarily
[18:12:59] *** Quits: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[18:13:09] <maerwald> the reason it's faster is only because we use `elemIndex` and nothing else
[18:13:09] <merijn> maerwald: Not necessarily what?
[18:13:15] <maerwald> which uses memchr
[18:13:21] <adamCS> merijn: But I do decode it, after it's broken into lines as ByteString
[18:13:23] <maerwald> some other bytestring functions don't
[18:13:47] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:13:50] <maerwald> in fact, most bytestring functions have their own hot loop with pointer aritmetic
[18:13:55] <maerwald> which is much slower than memchr
[18:14:33] <maerwald> abusing elemIndex is also how chris made the fast xml parser: https://chrisdone.com/posts/fast-haskell-c-parsing-xml/
[18:14:46] <maerwald> which is faster than most C implementations even
[18:15:02] <maerwald> now... if we could trick streamly into using elemIndex in our parser
[18:15:21] <maerwald> that would be really cool... because then we have the speed of the xeno approach, but with an API that doesn't suck
[18:15:48] <maerwald> (internal API, but still... did you look at the xeno code? ugh.)
[18:17:21] <maerwald> but I'm susprised that a very simple char-by-char Fold in streamly is faster than attoparsec
[18:17:30] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[18:17:38] *** Joins: max22- (~maxime@2a01cb08833598004910fadca795f245.ipv6.abo.wanadoo.fr)
[18:17:51] <maerwald> but it's true this feels more like experimentation than a stable API
[18:18:41] <adamCS> Yeah.  I'm going to be sad if Unfold disappears.  Is to be replaced by "Producer" or something else?  Just the move from 0.7 to 0.8 was sorta painful.  My own fault for using all sorts of "Internal" modules.
[18:19:20] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[18:19:21] <maerwald> they don't have funding for streamly... this is something HF should address imo
[18:19:31] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:19:31] <maerwald> it needs a lot of work
[18:19:53] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[18:20:58] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[18:21:07] <adamCS> And I find the performance good but mysterious.  I worked for a bit yesterday to take a thing I do a lot: load from csv to Text lines, turn each text line into a Vinyl record, transform the record into a different record, possibly filtering, so (Record rs -> Maybe (Record rs')) and then load that into Frames in-core AoS representation. 
[18:21:57] <adamCS> Each step is streamly, unfold to Text, scan to process headers and then tokenize and convert the lines, map to do the transformation and then a fold into the AoS structure.
[18:22:05] *** Quits: kn07_ (~kn07_@86.121.23.168) (Quit: Leaving)
[18:22:32] <adamCS> But the version that uses separate functions is faster.  Which is inexplicable to me unless I have an inlining issue. Which I probably do.
[18:22:49] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[18:23:12] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[18:28:45] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[18:30:08] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:35:35] <maerwald> adamCS: I still think there's a problem that needs to be solved in streamly. Namely chunked parsing... because you can only say "backtrack an entire element", but you can't say "drop the element, but then prepend this to the input of the next parser"
[18:36:09] <maerwald> I think this is due to how nested backtracking works
[18:36:32] <maerwald> I briefly lookd at the code and it doesn't seem there's an easy hack
[18:36:46] <adamCS> Yes.  That seems like it would be useful, that the next element you process should be produced by a function of the current state and the next element in the stream.
[18:37:42] <maerwald> my suspicion is that using elemIndex within chunk boundaries and then forwarding to the next chunk will be as fast as the same on lazy ByteString
[18:38:32] <maerwald> also, Folds will get a monadic interface 
[18:38:50] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[18:38:51] <maerwald> they seem to be generally faster than parsers, probably due to lack of backtracking
[18:39:11] <maerwald> (even if you don't use the backtracking)
[18:50:38] *** Quits: acidjnk_new (~acidjnk@p200300d0c7238d78f12f2b4aa168a17a.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[18:54:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[18:58:24] *** Joins: cfricke (~cfricke@user/cfricke)
[19:01:43] <Boarders> is there a way to get around "Unrecognised pragma for {#- HLINT ignore #-} ?
[19:02:19] <merijn> Not currently
[19:02:27] <merijn> Besides "don't use the pragma syntax"
[19:02:50] <Boarders> I'll see if hlint has an option to turn off all checks in a module using yaml
[19:03:17] <Boarders> I think it does
[19:03:24] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[19:04:22] <monochrom> Which program is giving the "Unrecognised pragma" message? GHC? hlint?
[19:04:32] <Boarders> GHC via ghcid
[19:05:04] <merijn> GHC
[19:05:20] <geekosaur> it's a warning, I believe
[19:05:27] <merijn> Anything using the {-# #-} pragma syntax that GHC doesn't know produces a warning
[19:06:07] <merijn> There was a big discussion on how to handle tool pragmas like hlint a while (several years, possibly) ago, but not sure what the end conclusion was
[19:06:59] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 264 seconds)
[19:07:21] <geekosaur> the battle between the tools folks and the LANGAUGE folks :þ
[19:07:38] <monochrom> haha
[19:08:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[19:08:52] <remexre> am I understanding correctly if it seems like (in the "instance resolution is Prolog" metaphor) every rule has a cut?
[19:09:09] *** Joins: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi)
[19:09:16] <monochrom> Yes.
[19:09:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca)
[19:09:43] <remexre> is there a way to... not have that?
[19:09:50] <monochrom> No.
[19:10:59] <remexre> any suggestings for making a printf-like that "finally" returns an arbitrary MonadIO? Right now I have instances {-# OVERLAPPING #-} (LogFunction func, ToJSON a) => LogFunction (a -> func) and {-# OVERLAPPABLE #-} (MonadIO m, a ~ ()) => LogFunction (m a)
[19:11:00] <monochrom> Or yes if you reimagine Haskell to defer resolution to link time and therefore you enjoy a CWA therefore backtracking makes sense again.
[19:11:09] <remexre> CWA?
[19:11:15] <monochrom> closed-world assumption
[19:11:25] <monochrom> the anti-thesis to separate compilation
[19:11:39] <monochrom> You do know Prolog, right? RIGHT?
[19:11:49] <remexre> yes, but not for AI, for logic :P
[19:11:59] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (Remote host closed the connection)
[19:12:12] <monochrom> I learned CWA in the context of "prolog as a logic" too.
[19:12:42] <monochrom> It is why "negation" "makes" "sense" in Prolog.
[19:12:45] <remexre> I've heard the term (though idk if it was from Prolog or general AI stuff), but never seen the acronym before, prolog or otherwise... anyway
[19:12:47] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[19:12:54] <remexre> I guess I'd need something to prevent a (MonadIO (r -> a)) instance from being written
[19:13:06] <remexre> er, (MonadIO ((->) r)))
[19:15:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:15:48] <monochrom> Often we create newtypes to get it going.
[19:15:56] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 245 seconds)
[19:17:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[19:18:19] <remexre> hm, any way to do that without changing the signature? This works with a concrete IO instead of the MonadIO, but avoiding needing to use liftIO every time is "the point"
[19:19:26] *** Quits: d0ku (~d0ku@178.43.150.25.ipv4.supernova.orange.pl) (Remote host closed the connection)
[19:22:28] *** Joins: fendor_ (~fendor@178.115.69.81.wireless.dyn.drei.com)
[19:24:15] <monochrom> onoes GHC 9.2.1
[19:24:20] <monochrom> I mean oyes :)
[19:24:55] <shapr> oyes!
[19:24:55] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[19:25:02] *** Quits: fendor (~fendor@178.115.69.86.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[19:25:13] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[19:26:10] <monochrom> Haha GHC2021 in lieu of Haskell2021
[19:26:23] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[19:28:17] <monochrom> Ben ends the message with "happy testing". This is how confident the GHC devs are about this haha.
[19:29:00] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[19:29:01] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:29:14] <sprout> I can relate!
[19:29:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:29:36] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[19:30:08] *** Quits: monadfritz[m] (~ahdytmatr@2001:470:69fc:105::e1f1) (Quit: You have been kicked for being idle)
[19:32:06] <monochrom> I am now tempted to end all my emails with "Good luck with that, \n <my name>"
[19:32:40] <monochrom> Example:
[19:32:51] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:33:36] <monochrom> A student emails me to ask "is it OK for me to use do-notation on the exam, even though you didn't teach it?"
[19:33:58] <monochrom> Reply: "Yes you may. \n \n Good luck with that, \n <my name>"
[19:34:55] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 258 seconds)
[19:41:04] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:41:05] *** Quits: talismanick (~talismani@76.78.246.111) (Remote host closed the connection)
[19:42:48] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[19:45:00] *** Joins: igghibu (~igghibu@37.120.201.125)
[19:46:55] *** Parts: igghibu (~igghibu@37.120.201.125) ()
[19:50:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:50:11] <myShoggoth> "Govern yourself accordingly,"
[19:50:46] *** Joins: hyiltiz (~quassel@31.220.5.250)
[19:51:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:53:07] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[19:57:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[19:57:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:02:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[20:03:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:04:09] *** Quits: MidAutumnMoon (~MidAutumn@user/midautumnmoon) (Quit: Ping timeout (120 seconds))
[20:04:10] *** Joins: chexum_ (~quassel@gateway/tor-sasl/chexum)
[20:04:20] *** Joins: MidAutumnMoon (~MidAutumn@user/midautumnmoon)
[20:04:32] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 244 seconds)
[20:04:32] *** Quits: mrianbloom (sid350277@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[20:04:32] *** Quits: vito (sid1962@user/vito) (Ping timeout: 244 seconds)
[20:04:33] *** Quits: supersven (sid501114@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[20:04:43] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[20:05:04] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[20:05:04] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 244 seconds)
[20:05:04] *** Quits: hendi (sid489601@lymington.irccloud.com) (Ping timeout: 244 seconds)
[20:05:10] *** Quits: orcus (~orcus@user/brprice) (Quit: ZNC 1.8.1 - https://znc.in)
[20:05:29] *** Joins: orcus (~orcus@user/brprice)
[20:05:35] *** Quits: sa1 (sid7690@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[20:05:35] *** Quits: bradparker (sid262931@uxbridge.irccloud.com) (Ping timeout: 244 seconds)
[20:06:36] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[20:06:37] *** Joins: vito (sid1962@user/vito)
[20:06:44] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[20:06:48] *** Joins: sa1 (sid7690@id-7690.ilkley.irccloud.com)
[20:06:56] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[20:07:42] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[20:07:43] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[20:08:14] *** Joins: S11001001 (sid42510@id-42510.ilkley.irccloud.com)
[20:08:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:09:46] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 252 seconds)
[20:10:45] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Ping timeout: 244 seconds)
[20:11:42] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[20:12:20] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[20:12:41] *** Joins: aegon (~mike@174.127.249.180)
[20:15:36] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[20:19:13] *** Joins: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk)
[20:25:13] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:25:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:26:11] *** fendor_ is now known as fendor
[20:27:09] *** Joins: Bleant (~Bleant@2804:7f7:d68c:6ec3:f145:b950:2a0e:7ea8)
[20:28:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:28:27] *** Quits: Bleant (~Bleant@2804:7f7:d68c:6ec3:f145:b950:2a0e:7ea8) (Remote host closed the connection)
[20:29:57] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[20:33:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[20:34:12] *** Joins: hiruji (~hiruji@user/hiruji)
[20:34:59] *** Joins: Katarushisu5 (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[20:35:51] *** Joins: agander_m_ (sid407952@id-407952.tinside.irccloud.com)
[20:35:52] *** Joins: meinside_ (uid24933@id-24933.helmsley.irccloud.com)
[20:35:52] *** Joins: manicennui_ (uid349235@id-349235.tinside.irccloud.com)
[20:35:52] *** Joins: pepeiborra_ (sid443799@id-443799.ilkley.irccloud.com)
[20:35:52] *** Joins: aria_ (sid380617@id-380617.lymington.irccloud.com)
[20:35:55] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[20:36:15] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 258 seconds)
[20:37:15] *** Joins: carbolymer_ (~carbolyme@dropacid.net)
[20:38:06] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[20:38:19] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 260 seconds)
[20:38:48] *** Joins: motherfs1 (~motherfsc@user/motherfsck)
[20:40:06] *** Joins: Guest6 (~Guest6@2a01cb0d04e290000a0027fffe32ed70.ipv6.abo.wanadoo.fr)
[20:41:20] *** Quits: peterhil (~peterhil@mobile-access-5672f1-161.dhcp.inet.fi) (Ping timeout: 265 seconds)
[20:43:19] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[20:43:19] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (*.net *.split)
[20:43:19] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[20:43:19] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[20:43:19] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[20:43:19] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (*.net *.split)
[20:43:20] *** Quits: manicennui (uid349235@tinside.irccloud.com) (*.net *.split)
[20:43:20] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[20:43:20] *** Quits: meinside (uid24933@helmsley.irccloud.com) (*.net *.split)
[20:43:20] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[20:43:20] *** Quits: dpratt_ (sid193493@helmsley.irccloud.com) (*.net *.split)
[20:43:20] *** dpratt__ is now known as dpratt_
[20:43:20] *** pepeiborra_ is now known as pepeiborra
[20:43:20] *** meinside_ is now known as meinside
[20:43:20] *** manicennui_ is now known as manicennui
[20:43:20] *** Katarushisu5 is now known as Katarushisu
[20:43:20] *** aria_ is now known as aria
[20:43:20] *** agander_m_ is now known as agander_m
[20:45:00] *** Joins: Ekho- (~Ekho@user/ekho)
[20:46:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:46:28] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[20:51:00] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Ping timeout: 265 seconds)
[20:53:11] *** Joins: Pickchea (~private@user/pickchea)
[20:53:15] *** Joins: econo (uid147250@user/econo)
[20:53:41] *** Ekho- is now known as Ekho
[21:01:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:02:39] <lbseale> can I automatically derive NFData for an arbitrary record type?
[21:03:03] <maerwald> with Generic 
[21:03:22] <lbseale> nice
[21:03:58] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:90ed:9a10:88ac:8dca) (Remote host closed the connection)
[21:04:34] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[21:04:40] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: djvksd)
[21:05:46] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Ping timeout: 258 seconds)
[21:09:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:10:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:10:58] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:11:11] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 264 seconds)
[21:11:46] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:b600:12c3:7bff:fe6d:d374)
[21:13:14] *** Joins: jil (~user@160.155.45.49)
[21:13:19] <jil> hello
[21:14:29] <jil> I'm a begginer, learning haskell and I would like to define a type for different sets of digit.
[21:16:43] <pavonia> Welcome
[21:17:57] <jil> I could do `data Digit2 = Zero | One` or `data Digit6 = Zero | One | ... | Five`  but I would like a more generic approche using Exiting Int or Char.  For exemple `data Digits n` would be '0' | '1' | ... | nth -1 symbol of a predefined sequence
[21:18:17] *** Quits: Guest6 (~Guest6@2a01cb0d04e290000a0027fffe32ed70.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[21:19:20] <jil> How do I do that ? and Why can't I do `data Digit2 = 0 | 1` ?  I want a Digit2 to be an Int and it's successor .
[21:19:29] <jil> hello pavonia 
[21:19:58] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[21:20:06] <jil> or Digit2 to be two successive Char
[21:20:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[21:21:10] <yrlnry> `Data` defines a new data type.  If it let you `data Digit2 = 0 | 1`, then when the Haskell compiler saw a `0` in your code, it wouldn't know whether you meant the Data2 value 0 or the integer value 0.
[21:22:40] <yrlnry> You can do `Data2 = D0 | D1`.  Or you can tell Haskell that `Data2` is an instance of `Num`, and then define a `fromInteger` function for it that says how Haskell should interpret a `0` or a `1` that is being used in a place where it expected a `Digit2`.
[21:23:16] <dsal> That gets partial if it's not modular, though.  Because what does      `4 :: Digit2` mean?
[21:23:35] <awpr> it means "good luck debugging this with no stack trace" :)
[21:23:54] <awpr> partial Num instances cause unbounded pain
[21:23:58] <yrlnry> Presumably for this application partial is acceptable, it should complain `4 is not a permitted digit` or something.
[21:24:41] <dsal> Partial functions are more desirable in the beginning.  :)
[21:24:47] <monochrom> Worse than that. Most Num methods make no sense for the "digit" concept.
[21:25:14] <awpr> an error sounds okay at first glance, but there's no way to find out where the problem came from without making a profiling build and using the RTS' stack traces
[21:25:34] <yrlnry> What would be a better approach?
[21:25:40] <awpr> not having a Num instance
[21:25:57] <monochrom> Don't make the digit type a Num instance in the first place.
[21:26:05] <jil> ok
[21:26:07] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:26:07] <dsal> You can make an e-Num type.  That's more high tech anyway.
[21:26:12] <monochrom> Enum ought to be enough for that.
[21:26:42] <awpr> I wrote this entire library and GHC plugin fueled by frustration with exactly this problem: https://hackage.haskell.org/package/dependent-literals-plugin
[21:27:02] <yrlnry> Enum is probably a better idea, thanks.
[21:27:16] <awpr> to make it possible to make numeric literals work with Fin, without ruining somebody's week whenever someone uses an out-of-range literal
[21:27:48] <monochrom> Enum is precisely for "my type is just 10 constructors flat".
[21:27:55] <awpr> (incidentally, `DigitN` is `Fin N`)
[21:28:25] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Ping timeout: 260 seconds)
[21:29:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk) (Remote host closed the connection)
[21:29:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[21:29:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk)
[21:30:11] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[21:30:57] <monochrom> Haha now I understand the e-Num joke.
[21:32:30] *** Joins: hololeap (~hololeap@user/hololeap)
[21:33:41] <pavonia> @quote beginner
[21:33:41] <lambdabot> JohnHughes says: I would guess that the majority if compiler runs for beginners (and perhaps for the rest of us too!) end in a type error
[21:34:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[21:34:46] <pavonia> Wasn't there a quote about beginners asking an innocent question and being overwhelmed with type theory answers?
[21:34:55] * awpr hides
[21:36:00] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[21:37:53] *** Quits: max22- (~maxime@2a01cb08833598004910fadca795f245.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[21:37:54] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[21:38:20] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[21:38:31] *** Joins: Farzad (~FarzadBek@37.49.150.10)
[21:38:42] <geekosaur> @quote type.theory
[21:38:42] <lambdabot> ggVGc says: haskell also has the gotcha of starting to write a program and ending up with a ultra-generic library for some new type theory concepts you just learnt
[21:38:49] <geekosaur> @quote type.theory
[21:38:49] <lambdabot> ggVGc says: haskell also has the gotcha of starting to write a program and ending up with a ultra-generic library for some new type theory concepts you just learnt
[21:38:53] <geekosaur> hm
[21:39:57] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:39:58] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[21:40:08] <shapr> @quote first-year
[21:40:08] <lambdabot> TacticalGrace says: #haskell in action: discussion about first-year teaching turns into an argument about CT and Kan extensions
[21:40:11] <shapr> that one?
[21:40:23] *** Quits: mbuf (~Shakthi@171.61.174.60) (Quit: Leaving)
[21:40:34] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[21:40:57] <shapr> @quote category theory
[21:40:57] <lambdabot> No quotes for this person. You untyped fool!
[21:40:59] <shapr> @quote category.theory
[21:41:00] <lambdabot> mjrosenb says: <3 #haskell; "why doesn't this program typecheck?" ;  5 hours of category theory later, op left 4 hours ago
[21:41:05] <shapr> @quote category.theory
[21:41:05] <lambdabot> Botje says: the line between madness and category theory is a fine one indeed.
[21:41:13] <shapr> too many category theory quotes
[21:41:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:41:54] <earthy> there's no such thing as to many category theory... is there? :)
[21:42:30] <monochrom> 2-many 2-category theory
[21:44:14] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[21:44:17] <jil> awpr it's not clear exactly how to use you librari but I will try.  I think It answer my question.
[21:44:54] <pavonia> shapr: Hhm, maybe it was this first-year quote
[21:45:07] <jil> I have another innocent beginner question.  
[21:45:13] <awpr> tbh it's probably too complicated for this use case if you're not willing to go to great lengths to get literals working
[21:45:31] <jil> how do yo know in what package to find a specific function ?
[21:45:33] *** Joins: hololeap (~hololeap@user/hololeap)
[21:46:11] <geekosaur> hoogle
[21:46:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[21:46:17] <awpr> hmm, if I added a `Wrapped Finite` impl, it might actually become easy...
[21:46:27] <jil> in ghci :doc read will point to readMaybe.  If one does not have acess to internet how can he find readMaybe is in Data.Text (from memory)
[21:47:13] <awpr> `data Digit2 = D0 | D1 deriving Generic deriving Finite via Wrapped Generic Digit2 deriving HasIntLiterals via Wrapped Finite Digit2` isn't too bad.
[21:47:25] <sm> jil, you can do what you just said, in ghci ?
[21:47:27] <jil> wouhao !
[21:47:33] <sm> you can also set up hoogle to work locally
[21:48:00] <awpr> but I still think dependent-literals is overkill for this, honestly.  I'd probably just use D0 and D1 directly
[21:48:25] <jil> awpr but what about Fin 16, Fin 32 ect..
[21:48:33] <jil> :doc read
[21:49:00] <jil> points to readMaybe
[21:49:06] <sm> or you can set up a more fancy local docs tool like `dash` or similar
[21:49:11] <awpr> yeah, those are a bit more meaningful.  if you want a lot of different radixes, I'd maybe find an existing Fin library (e.g. `fin-int` is one I maintain)
[21:50:06] <jil> sm ok, I need a better IDE setup.  any suggestion for a ghci runing in emacs ?
[21:50:20] <sm> M-x shell, ghci 
[21:50:29] <jil> I'm not familliar with dash.
[21:50:36] <awpr> that comes with dependent-literals support, but you can also just say `fin 5` if you don't want to deal with the plugin.  (and that has a HasCallStack constraint, so if you call it on an out-of-range number, it'll at least tell you where)
[21:50:37] <jil> sm That's what I use
[21:50:50] <sm> also don't miss ghcid, it's great
[21:51:09] <jil> ok sm.  Thank you.
[21:53:19] <sm> jil I also recommend spending a half hour to skim the haddocks for all of base and a few other main libraries (containers, mtl, text, safe, ...) - most of us did not do it and it can save a lot of time
[21:53:41] <sm> likewise for the GHC user guide
[21:54:45] *** Joins: thblt (~thblt@user/thblt)
[21:54:47] <jil> :) ok.
[21:54:56] <sm> oh and the stack and cabal user guides :)
[21:55:08] <sm> THEN you'll be fine
[21:56:30] <thblt> Is there a file manipulation library in Haskell that signals errors with types rather than exceptions? (Eg open :: FilePath -> IO (Either FileError Handle))
[21:57:16] <monochrom> You can use Control.Exception's "try".
[21:57:17] <jil> sm I'm trying to finish Hutton_G_Programming_in_Haskell-Cambridge_University_Press_2018.pdf
[21:57:39] <sm> good one
[21:57:59] <sm> he has more recent lessons on youtube also
[21:58:48] <sm>  @where HTAC
[21:58:48] <sm> is also good
[21:59:22] <sm> @where HTAC , I say
[21:59:22] <lambdabot> "Haskell Tutorial and Cookbook" by Mark Watson in 2017-09-04 at <https://leanpub.com/haskell-cookbook>
[22:00:22] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[22:01:48] *** Joins: alx741 (~alx741@186.178.109.79)
[22:04:29] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:05:15] <thblt> monochrom:  thanks
[22:06:03] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[22:06:24] *** Joins: max22- (~maxime@2a01cb0883359800df57ac14517550fc.ipv6.abo.wanadoo.fr)
[22:07:40] *** Joins: ubert (~Thunderbi@178.115.53.120.wireless.dyn.drei.com)
[22:09:47] *** Joins: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk)
[22:14:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[22:15:59] *** Quits: motherfs1 (~motherfsc@user/motherfsck) (Quit: quit)
[22:17:15] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[22:19:13] *** Joins: ubert1 (~Thunderbi@178.115.53.120.wireless.dyn.drei.com)
[22:19:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[22:29:06] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[22:31:43] *** Joins: vicfred (~vicfred@user/vicfred)
[22:31:54] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:32:03] <maerwald> whats  the conversion from `NominalDiffTime` to `EpochTime`? fromIntegral?
[22:34:01] <monochrom> I have a feeling that realToFrac is closer.
[22:34:10] <maerwald> doesn't work
[22:34:23] <maerwald> No Instance for Fractional Epochtime
[22:34:35] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[22:34:48] <monochrom> Ah right. But NominalDiffTime is not Integral either.
[22:37:00] <monochrom> Perhaps truncate or round. NominalDiffTime is sub-seconds, but its integral part means seconds.
[22:37:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3)
[22:37:43] <maerwald> that doesn't sound too sure :D
[22:38:06] <maerwald> there's `nominalDiffTimeToSeconds`, but then I got Pico, wtf
[22:38:15] <monochrom> Well, in the first place, I am not sure that NominalDiffTime and EpochTime stand for the same idea.
[22:39:24] <monochrom> One is a duration, the other is an absolute point.
[22:39:44] <monochrom> Although you could wing it and say "I just mean CTime"
[22:39:45] <maerwald> well, type POSIXTime = NominalDiffTime
[22:40:05] <maerwald> I have UTCTime and want EpochTime (which is CTime)
[22:40:12] <maerwald> so: utcTimeToPOSIXSeconds :: UTCTime -> POSIXTime
[22:40:18] <maerwald> then I'm stuck with NominalDiffTime
[22:40:43] <maerwald> CTime is Real and Num
[22:40:44] <monochrom> Pico is just another Fractional instance that you can use truncate/round on.
[22:41:38] <maerwald> well, then I have an Integral
[22:41:40] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:41:50] <maerwald> CTime isn't
[22:41:52] <monochrom> Well, on all known GHC platforms that have System.Posix, CTime is also just a newtype around Int64.
[22:42:28] <maerwald> I wish there was a time library that isn't awful
[22:42:56] <monochrom> Plus, "According to POSIX, it shall be an integer type." from a linux man page about time_t
[22:43:03] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:43:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[22:43:17] <monochrom> Me, I wish there were no pretended abstractions like this.
[22:43:32] <maerwald> `fromInteger . floor . nominalDiffTimeToSeconds . utcTimeToPOSIXSeconds`
[22:43:38] <maerwald> but now I really have no idea what that does
[22:43:46] <monochrom> "Oh CTime is platform-dependent we can't tell you it's an integer".  Platform-dependent my ass.
[22:44:00] <maerwald> I'm just gonna assume it's correct
[22:44:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[22:44:30] *** Joins: hololeap (~hololeap@user/hololeap)
[22:44:52] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[22:45:18] <maerwald> this is where I miss javascript
[22:45:30] <maerwald> don't care, just throw it in, it'll be fine!
[22:47:36] <monochrom> Pretty sure you don't need nominalDiffTimeToSeconds
[22:48:01] <monochrom> NomimalDiffTime is just a newtype around Pico.  nominalDiffTimeToSeconds just unwraps.
[22:48:29] <monochrom> This is why whereas Pico is Fractional, so is NominalDiffTime.
[22:50:28] <maerwald> those are all really interesing things... but why can't we have a simple tables with those conversions, which also clearly indicates if you lose precision etc.
[22:51:30] <monochrom> FWIW why do you have UTCTime in the first place?  If you called getCurrentTime, perhaps replace with epochTime?
[22:52:11] <maerwald> EpochTime is unix-specific isn't it?
[22:52:22] <maerwald> I want to be cross-platform
[22:53:09] <monochrom> OK, you are converting something to EpochTime for cross-platform?
[22:53:30] <maerwald> yes, that's the unix module
[22:53:36] <maerwald> but the type must not leak
[22:53:38] <monochrom> I would think sticking to UTCTime and NominalDiffTime was the cross-platform way.
[22:53:45] <monochrom> Ah OK.
[22:54:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-040.wadham.ox.ac.uk)
[22:54:47] <maerwald> I'm becoming a fan of DList
[22:54:57] <monochrom> Oh well yeah use rounding and use the "forbidden" knowledge that EpochTime = CTime = newtype of Int32/64/doesn't matter.
[22:55:19] <maerwald> `fromInteger . floor . utcTimeToPOSIXSeconds` typechecks
[22:55:39] <maerwald> users will tell me if it does the correct thing after their systems crashed
[22:57:23] *** Quits: emf (~emf@2620:10d:c090:400::5:5ca4) (Ping timeout: 264 seconds)
[22:57:23] <monochrom> But yeah a table would be nice.
[22:57:47] <maerwald> DList.toList is nicely lazy, so you can append in O(1) in your fold and then turn it back almost zero-cost, right?
[22:58:04] <maerwald> neglecting the memory overhead
[22:59:05] <monochrom> Yes, to a large extent, all those "ByteString.Builder" "Text.Builder" "Foo.Builder" "Bar.Builder" are DLists.
[22:59:30] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[22:59:36] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Client Quit)
[23:01:00] *** Quits: Farzad (~FarzadBek@37.49.150.10) (Quit: Leaving)
[23:04:03] <hololeap> I'm running on Gentoo with the haskell repo and so I have all of my packages installed at a system level (ultimately using cabal packages converted to gentoo packages)
[23:04:27] <hololeap> I'm experimenting with running hoogle as a systemd service
[23:05:05] <hololeap> when a package is done installing, I have a hook that runs: /usr/bin/hoogle generate --local -- $n
[23:05:16] <hololeap> where $n is the name of the cabal package
[23:05:25] <shapr> hololeap: I'm running hoogle in nix and working my way towards nix-copy-closure to 'deploy' the server.
[23:06:01] <hololeap> the problem is that hoogle crashes when I try to connect after this and only resumes after doing a full generate
[23:06:02] <shapr> and yeah, a systemd service for restarting
[23:06:39] <shapr> hololeap: I switched to nix because stack hoogle things have several layers of broken
[23:06:42] <shapr> are you using cabal?
[23:07:11] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 246 seconds)
[23:07:20] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[23:07:27] <hololeap> shapr: sort of kind of? gentoo uses Setup.hs behind the scenes to run configure, build, test, etc
[23:08:36] <hololeap> I'm wondering how hoogle.haskell.org updates when there is a new version/package pushed to hackage
[23:08:56] <hololeap> because it doesn't seem to like this style of incremental update
[23:09:02] <shapr> We have 500kloc (excluding whitespace lines) of Haskell in our monorepo, a hoogle server makes it easier to find things.
[23:09:26] <shapr> oh, your question is whether hoogle supports incremental updates?
[23:09:31] <shapr> I always have to do a full rebuild.
[23:09:34] <hololeap> more or less
[23:09:50] <monochrom> I don't know hoogle, but I would think the safe default thing to do is: kill the server before generate, start the server after.
[23:10:04] <shapr> I'd bet changing haddocks could be done incrementally, but I don't know about reindexing to build the hoogle db
[23:11:34] <hololeap> monochrom: the package manager doesn't have permission to do this, I don't think. maybe that could be changed...
[23:11:34] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[23:11:59] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[23:12:02] <hololeap> *to kill/start the hoogle server running through systemd
[23:12:44] <hololeap> actually the hook system must be running as root
[23:13:14] <hololeap> I could try it, but so far it seems like you have to re-index _everything_ after something has been changed
[23:15:47] <monochrom> I'm thinking of this other Goldberg machine: The hoogle server is watched over by a watchdog, this watchdog waits for DB change and restarts the hoogle server.
[23:16:12] <monochrom> With some luck, this watchdog can be written in systemd syntax too.
[23:16:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[23:16:34] <monochrom> or s/can be written/may be writable/
[23:16:50] <hololeap> monochrom: that's kind of how I have it set up now, just because it crashes after I update a single package
[23:17:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:18:27] <monochrom> Hrm haha, do you mean that I can skip the step "wait for changes"? >:)
[23:19:00] <hololeap> pretty much
[23:19:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[23:19:05] <monochrom> "the server crashes" serves as notification for "now is a good time to respawn"
[23:19:35] *** Quits: xff0x (~xff0x@2001:1a81:529e:f300:b22f:69e6:aa77:fd2f) (Ping timeout: 264 seconds)
[23:19:43] <monochrom> This is consistent with my policy of "don't work until it's really urgent" >:)
[23:20:37] <hololeap> https://github.com/gentoo-haskell/gentoo-haskell/blob/bb70927ef3bc753bc899f589b69586b34b90d0f9/dev-util/hoogle/files/hoogle.service
[23:20:44] <hololeap> https://github.com/gentoo-haskell/gentoo-haskell/blob/bb70927ef3bc753bc899f589b69586b34b90d0f9/dev-util/hoogle/files/hoogle-generate.service
[23:21:21] <hololeap> since I have Restart=always and Requires=hoogle-generate.service, when hoogle crashes it regenerates the DB and restarts the service
[23:21:29] *** Joins: hiruji (~hiruji@user/hiruji)
[23:22:17] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[23:23:35] <hololeap> but this takes longer and longer each time I add a new package to the system
[23:24:21] <hololeap> I asked in #haskell-infrastructure ... maybe someone in there knows how the main hoogle service operates
[23:35:11] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 264 seconds)
[23:37:00] *** Joins: juhp (~juhp@128.106.188.220)
[23:38:25] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:39:07] *** Joins: acidjnk_new (~acidjnk@p200300d0c7238d89cc95ba723fa3afc9.dip0.t-ipconnect.de)
[23:44:05] *** Joins: xff0x (~xff0x@2001:1a81:529e:f300:b22f:69e6:aa77:fd2f)
[23:45:41] *** Quits: alx741 (~alx741@186.178.109.79) (Ping timeout: 264 seconds)
[23:47:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[23:51:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[23:55:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e) (Remote host closed the connection)
[23:55:35] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:45df:961b:bdc0:266e)
[23:55:55] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:57:19] *** Joins: fluffyballoon (~user@131.93.208.196)
[23:59:10] *** Joins: alx741 (~alx741@181.196.69.253)
