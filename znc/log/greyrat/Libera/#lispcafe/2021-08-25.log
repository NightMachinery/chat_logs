[00:00:53] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:01:39] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[00:07:17] *** Joins: selwyn (~selwyn@user/selwyn)
[00:08:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:08:28] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[00:13:23] <gilberth> Any idea how to simulate/verify setup and hold time requirements with Verilog?
[00:18:22] <shka> *sigh*
[00:18:31] <shka> gilberth: you do verilog as well?
[00:20:19] <gilberth> I need a break from CLIM and attend to my itty bitty 32-bit TTL CPU project again.
[00:20:38] <selwyn> itty bitty ttl(ty) committee
[00:21:28] <gilberth> And before I get a workshop and heat up the soldering iron, I simulate with Verilog.
[00:24:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[00:31:31] <selwyn> shka: there are also thought to be not enough turkeys for christmas
[00:31:37] <selwyn> in addition to the other shortages
[00:33:43] * gilberth will trade turkeys for 74F181SC's.
[00:34:22] <gilberth> Note the 'SC'. It's the SMD part.
[00:35:09] <selwyn> i got interested in silicon design today
[00:36:15] <gilberth> You want to etch chips?
[00:36:43] <selwyn> not personally
[00:37:59] <selwyn> but there is a company i am thinking of applying for which partners with a ´tier-one foundry´ to do the fabrication
[00:38:04] <selwyn> for quantum computing applications
[00:38:31] <gilberth> Anyhow, bbl, my cousin decided to get rid of old stuff and pull everything out of the cupboards and the little attic in the kitchen. Now, as he has trouble to throw stuff away, asked me to essentially say: "Out!" "You'll never need that." "Into the trash!"
[00:38:34] <shka> have a good night song https://www.youtube.com/watch?v=u-BWoAPXTCE
[00:38:35] -ixelp- Atheist - Water[Remastered] - YouTube
[00:38:42] <selwyn> bye gilberth
[00:39:15] <gilberth> selwyn: That sounds very exciting!
[00:39:20] <selwyn> it is
[00:42:17] <selwyn> we are fortunate that silicon has such special optical properties
[00:42:24] <selwyn> considering that we have been optimising how to manufacture things with silicon for decades
[00:43:00] <selwyn> for other purposes
[00:52:49] <contrapunctus> gilberth: I don't know why I thought that the CLIM user guide and the spec were largely identical. The user guide has helped me understand a lot of things. Thanks!
[00:58:31] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:01:20] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:03:28] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:05:13] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb)
[01:06:21] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:17:10] *** Quits: easye (~user@oxi.slack.net) (Remote host closed the connection)
[01:19:58] *** Joins: christophergray (~christoph@190.148.50.214)
[01:35:57] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:40:21] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:01:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:04:07] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:30:04] *** Joins: makomo (~makomo@user/makomo)
[02:51:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:52:22] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[02:56:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[03:05:31] <gilberth> Ok. We managed to get rid of perhaps a cubic meter of stuff. Progress.
[03:09:11] <hayley> https://www.youtube.com/watch?v=gIDKl1eGy8Y
[03:09:11] -ixelp- Something's In The House (Live 79) - YouTube
[03:09:13] <selwyn> i hate throwing stuff away
[03:10:10] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:10:37] <gilberth> Me too. But when you haven't used sth for a decade, you don't need that anymore. The exception are things that are not easy to get.
[03:12:37] <gilberth> Other stuff could just go into the basement, just in case. The kitchen here isn't all too large.
[03:13:23] <gilberth> However I have no idea what to do, would I eventually get rid of my own house and move into a much smaller flat.
[03:24:33] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[03:40:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:41:26] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:43:16] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 268 seconds)
[03:44:09] *** Joins: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:45:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[04:08:47] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:10:35] <hayley> new SBC for the Spreadshit: https://www.youtube.com/watch?v=k1hJoalcK68
[04:10:36] -ixelp- Single Board Relay Computer - YouTube
[04:19:16] *** Quits: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 252 seconds)
[04:19:51] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[04:21:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:28:59] *** Quits: christophergray (~christoph@190.148.50.214) (Quit: WeeChat 3.2)
[04:35:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:45:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[04:47:58] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[04:49:19] *** Joins: selwyn (~selwyn@user/selwyn)
[04:51:12] <gilberth> SBC is boring: <https://www.youtube.com/watch?v=z71h9XZbAWY>
[04:51:12] -ixelp- Megaprocessor Tour 1 - (fixed audio) - YouTube
[04:52:05] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[04:52:08] <hayley> Can we have 864 of these?
[04:52:26] <gilberth> Also <https://www.youtube.com/watch?v=lNa9bQRPMB8>
[04:52:26] -ixelp- MegaProcessor - Computerphile - YouTube
[04:52:29] *** Joins: selwyn (~selwyn@user/selwyn)
[04:52:40] <gilberth> hayley: What is so special about 864?
[04:53:03] <hayley> gilberth: I need 864 cores for the authentic NonBlockingHashMap experience
[04:53:52] <gilberth> Why don't you just simulate them?
[04:53:53] <hayley> (Did you know SBCL internally uses something like Clozure's mostly-lock-free hash table, which is the default thread-shared table, and both are NBHM ripoffs?)
[04:54:22] <hayley> Doesn't really work like that; you don't feel false sharing between 864 cores.
[04:54:33] <gilberth> Anyhow, I would love to build a valve computer, if it were not for the costs and space and energy bill.
[04:54:59] <selwyn> valve?
[04:55:06] <gilberth> tubes.
[04:55:06] <selwyn> like before transistors?
[04:55:39] <selwyn> well, glhf
[04:55:54] <gilberth> glhf?
[04:56:01] <hayley> Good luck, have fun
[04:57:04] <hayley> https://www.youtube.com/watch?v=cb40gv3BXRw
[04:57:05] -ixelp- Messages (Live at the Museum of Liverpool) - YouTube
[04:57:31] <gilberth> selwyn: This is in no way realistic.
[04:57:46] * hayley re-read the "FeArLeSs CoNcUrEnCy" introduction again for some reason.
[04:57:48] <selwyn> i know, i am joking
[04:58:01] <hayley> So if you have mutable references to everything, anything you do is atomic. Sure, cool. But if you have mutable references to everything, you have a mostly sequential program. i.e. why fucking bother in that case?
[04:58:39] <hayley> I missed an inference step: if you have mutable references, then you probably got a whole bunch of locks (which also paves the way for deadlock but okay).
[05:03:57] <selwyn> can
[05:04:00] <selwyn> can´t sleep
[05:05:14] <gilberth> Though sth like an LPG-30 would feasible, but that has a drum for storage also for registers. Wikipedia says it has 113 vacuum tubes and 1350 diodes. See one in operation: <https://www.youtube.com/watch?v=7WaYYNUCWMY>
[05:05:14] -ixelp- Warming up the LGP-30 - YouTube
[05:05:42] <gilberth> You might want to skip ahead a little.
[05:06:05] <hayley> Did I miss something? Still SOL for fine-grained locking?
[05:07:43] <gilberth> As this is a serial design, I love the debug display at 3:18. The data fly by from the drum while serially processed. Quite an elegant design.
[05:09:00] <gilberth> "RECHNET" = "IS COMPUTING" :)
[05:09:58] <hayley> https://www.youtube.com/watch?v=LqZCwY69XLA
[05:09:58] -ixelp- Only Good For Conversation - YouTube
[05:10:37] <gilberth> But I have no idea how to get such a ferro-magnetic drum.
[05:10:45] <selwyn> what is it computing
[05:10:48] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[05:11:30] <dave0> maw
[05:12:56] <gilberth> selwyn: I'd listen and see if they say sth. The printout mentions a lunar lander. Hmm.
[05:14:15] <lotuseater> hi there dave0 
[05:14:18] <selwyn> they are planning to make the control chip for the quantum computer in dresden
[05:14:31] <dave0> maw lotuseater 
[05:15:42] <gilberth> selwyn: Usually I hate German videos posted here, but this one is the best showing the machine in operation, I found.
[05:15:51] <lotuseater> *mawmaw back*
[05:15:56] <selwyn> why do you hate them
[05:19:44] <gilberth> selywn: They don't say, what they compute. Maybe it's a lunar lander game? Who knows?
[05:20:17] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:20:39] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:20:42] <gilberth> I like the sound of the drum spinning up. :) Could be dangerous though, if it is not well balanced and escapes.
[05:21:52] <gilberth> selwyn: Because nobody could make out what is said.
[05:24:00] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[05:24:20] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:41:47] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:42:04] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:43:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[05:51:57] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[05:52:18] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[06:11:44] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[06:12:42] <hayley> https://www.youtube.com/watch?v=llurwNphwnk
[06:12:42] -ixelp- I Just Can't Be Happy Today - YouTube
[06:33:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:36:19] *** Joins: robin (~robin@user/terpri)
[06:41:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[07:45:43] *** Joins: nihaal (~nihaal@122.164.143.87)
[07:51:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[08:15:05] *** Joins: easye (~user@oxi.slack.net)
[08:36:47] *** Quits: nihaal (~nihaal@122.164.143.87) (Ping timeout: 240 seconds)
[08:45:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:46:10] *** Joins: nihaal (~nihaal@122.164.143.87)
[08:49:08] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3d20)
[08:55:07] <hayley> https://www.youtube.com/watch?v=sgWHrkDX35o
[08:55:08] -ixelp- SHUT THE FUCK UP FRIDAY! - YouTube
[09:00:02] <lotuseater> hayley: Do you still have your Eratosthenes code laying around? I wonder how you've done it.
[09:00:36] <humasect> i named my new cat Plato 
[09:00:39] <hayley> I do, but it is not very interesting.
[09:00:49] <lotuseater> humasect: cool name :)
[09:01:19] <lotuseater> hayley: it would be for me, but i just wanted to ask politely
[09:01:22] <hayley> lotuseater: https://gist.github.com/no-defun-allowed/f2ce6a914cb1c64d5dc98971bf915b00
[09:01:23] -ixelp- segmented sieve · GitHub
[09:01:38] <lotuseater> ok thx, just for my personal educational purposes
[09:01:43] <humasect> ty. they are both cool characters =) and also what an interesting computer system from the 60s
[09:02:04] <lotuseater> oh that system i wasn't aware of
[09:03:45] <lotuseater> hayley: and I remembered where I adapted this poor style with using #n= in real file code if you remember from some days ago. from the Let over Lambda book, but this behavior is now banned out of my head
[09:04:12] <lotuseater> humasect: another one could be named Socrates
[09:04:15] <hayley> TL/DR: compute the first segment of sqrt(n) bits serially, then use those to eliminate composites in every other segment in parallel
[09:04:42] <humasect> lotuseater: plato is my third favorite computer system. after next and lisp ofc
[09:05:05] <humasect> lotuseater: good friend had a cat years ago named Socrates. didnt know this until i told him about Plato 
[09:05:11] <humasect> (irl friend)
[09:05:26] <hayley> "Do you know Python is one of the world's most popular programming languages? In fact, it is now more popular than ever! Are you interested to start Python programming soon?"
[09:05:30] <lotuseater> is it a big difference using BIT instead of SBIT when knowing in advance it's with a bit-vector of fixed length?
[09:05:37] <humasect> hayley: i just looked at an ocaml version. interesting the different approaches
[09:05:41] <hayley> "Do you know billions of flies eat shit? In fact, there are more flies than ever! Are you interested to start eating shit?"
[09:06:11] <hayley> lotuseater: BIT/SBIT matters if you know the array is not displaced. But the compiler is fine inferring that would you call MAKE-ARRAY in the same function.
[09:06:31] <lotuseater> hayley: :D
[09:06:38] <hayley> What the fuck, there is a "blockchain club" too?
[09:06:57] <hayley> That is disgusting.
[09:07:23] <lotuseater> okay what it specifically means for an array to be displaced I should get soon. maybe looking again in the recipes chapter
[09:07:27] <hayley> At least I can report the sign-up form for spam.
[09:07:51] <hayley> Loosely speaking, a displaced array takes its elements from another array, often with some offset.
[09:08:20] <hayley> SBIT rather means you have a SIMPLE-BIT-VECTOR (not displaced, not adjustable, no fill pointer) whereas BIT means you just have a BIT-VECTOR (you don't know any of that).
[09:08:22] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:08:23] <humasect> heard today: "if work was really valuable, the rich would horde it all to themselves"
[09:08:50] <dave0> maw
[09:09:27] <lotuseater> hey dave0 you're back again :)
[09:09:30] <humasect> i would like to prettify-symbols for common CL symbols. CL tends to quite horizontal 
[09:09:46] <dave0> hey lotuseater... i went for a walk :-)
[09:10:12] <lotuseater> ah wait they work also on bit-arrays indeed
[09:10:34] <lotuseater> dave0: yes some kind of a ritual of yours i guess :)
[09:10:46] <dave0> exercise!
[09:11:03] <dave0> you're still allowed to go out for exercise during covid lockdown
[09:11:05] <lotuseater> right, that was included
[09:12:28] <hayley> What is more disgusting really is that they have a building literally called a "blockchain innovation hub".
[09:12:46] <lotuseater> nice
[09:13:05] <lotuseater> so innovate yours today and get rich fast
[09:13:16] <hayley> Who knows, if they are really that dumb, I will just say the replicated event log I made is a blockchain, and take over it.
[09:14:07] <lotuseater> surely my line was very sarcastic again
[09:14:15] <hayley> One can also get a Master's degree in "blockchain enabled business".
[09:16:22] <lotuseater> I met enough people with a "master of blub" degree that seemed dumb from just talking literally 5min to them.
[09:16:41] <hayley> https://www.youtube.com/watch?v=gZM1WQKwpl0
[09:16:42] -ixelp- Pigs (Three Different Ones) - YouTube
[09:17:20] <lotuseater> I didn't see much Eigenthinking.
[09:17:41] <lotuseater> okay this is totally a neologism now :D
[09:18:01] <lotuseater> or word combination but I hope you get the meaning
[09:18:40] <hayley> Huh, it's only a 1.5 year course, but you still pay AU$32,640 for it. 
[09:19:02] <hayley> US$23,500 if you aren't used to $1 = 1 banana
[09:19:58] <lotuseater> that's a lot of money
[09:20:19] *** Quits: nihaal (~nihaal@122.164.143.87) (Ping timeout: 250 seconds)
[09:20:31] <lotuseater> hm I'm now interested to see how AU money looks like
[09:20:57] <lotuseater> since the Euro the money here isn't so nice anymore
[09:20:58] <hayley> How cute, you make decentralised applications too. And, knowing how well the SQL course went, you are going to cause people to lose some millions of dollars.
[09:21:39] <lotuseater> the last 10 Deutsche Mark paper for example had Gauss on its front and his heliotrop on the back
[09:22:35] * hayley wonders if she liked this university or the old one more. At least the old teachers looked at her unidiomatic code and said "hah, generic functions, how cute. 100% then"
[09:23:34] <lotuseater> why only cute?
[09:25:16] <hayley> Well, it didn't really go like that. Once I had a back and forth with a teacher, arguing that there was a discrepancy between terminal emulators on whether or not some character was 1 or 2 ems wide, which screwed up some ASCII art.
[09:25:17] <kakuhen> generic functions are generic and cute, so there is only one thing to say about them
[09:26:26] <hayley> But as I had done some of the "extension" work, still got 100% in the end, so it was pointless, other than I wasn't happy with setting a precedent that I am supposed to know every quirk of PuTTY.
[09:26:29] <lotuseater> kakuhen: right of course, they are cute, but also to be taken seriously :)
[09:26:45] <kakuhen> unrelated, but, i swear someone is baiting me on #macdev and im on the edge of my patience with them
[09:26:46] <hayley> A "generic function" in the Java sense, i.e. parametric polymorphism.
[09:26:58] <lotuseater> so leave
[09:27:10] <lotuseater> and stay with us :)
[09:27:37] <lotuseater> oh right what else, Java
[09:28:54] <lotuseater> okay in Haskell polymorphism is also parametric, but algebraically
[09:29:04] <kakuhen> oh man, if someone were testing output of a terminal program in PuTTY of all things, I would have told them "try it in an actual terminal next time"
[09:29:24] <kakuhen> of course 'actual terminal' is vague and ill-defined, but that's my point :3c 
[09:33:12] <hayley> https://www.youtube.com/watch?v=IcwezGIzGQY
[09:33:13] -ixelp- Gary Numan (London 1981) [14]. She's Got Claws - YouTube
[09:34:57] <lotuseater> kakuhen: i wonder if someone ports DOOM Eternal to Linux terminal in ASCII Art one would see a difference to the new Nintendo Switch port xDD
[09:35:32] <kakuhen> port doom eternal to mezzano
[09:35:37] <kakuhen> loooots of things to add, I know, so let's get on it
[09:35:58] <lotuseater> maybe start with original DOOM engine
[09:36:44] <hayley> There's already Doom and Quake on Mezzano though.
[09:36:55] <lotuseater> there is this: https://github.com/rainbyte/frag
[09:36:56] -ixelp- GitHub - rainbyte/frag: Frag is a 3D first person shooting game written in Haskell, by Mun Hon Cheong
[09:37:34] <lotuseater> but i never got it to run actually, even with this cabal and stack stuff with Nix it is a backwards compatibility pain
[09:37:46] <humasect> i got doom quake1+2 duke3d etc on my 3ds. what a lovely little piece of hardware! 
[09:37:52] <lotuseater> hayley: oh wow cool :)
[09:39:10] <kakuhen> hayley: i thought doom eternal was some new version
[09:39:13] <lotuseater> humasect: it is indeed. but steam deck will be a good concurrence, providing you more freedom. okay, i will never buy one of those or a PS5 just if some wonder happens
[09:39:23] <hayley> kakuhen: Yes, I was referring to Doom 1.
[09:39:46] <kakuhen> i dont really play games so i don't know the differences to begin with
[09:39:52] <kakuhen> but i guessed doom eternal would be sufficiently distinct from doom itself
[09:40:02] <lotuseater> wasn't the last made open ID tech version 4? the one for DOOM 3
[09:40:22] <kakuhen> ok i lied; i do play games (rarely chess, sometimes mahjong), video games is a different story though.
[09:40:35] <lotuseater> kakuhen: DOOM 1 is from 1993 and had evolutionary impact
[09:40:36] <hayley> Yes.
[09:40:43] <kakuhen> but yeah, i recall seeing doom and quake on mezzano
[09:41:16] <kakuhen> i was more interested in the mcclim demos though :)
[09:41:20] <humasect> lotuseater: wonder?
[09:41:23] <lotuseater> from what i saw on YT recently it looked like they're about to release a fresh made version of Quake 1
[09:41:29] <humasect> nah ID Tech 7 now i think
[09:41:36] <lotuseater> humasect: yes, in my life
[09:41:42] <humasect> but its not Id Software since around Tech 4 afaik
[09:42:05] <lotuseater> humasect: yes that is the most actual, but i meant the last one they made open
[09:42:07] <kakuhen> i've had someone tell me wild things about mcclim e.g. "it only works with sbcl+x11 on linux"... but the demos seem to run just fine on mezzano
[09:42:25] <lotuseater> ehm it is, they just were bought by a publisher
[09:42:25] <kakuhen> last i checked, mezzano is not linux, nor does it use x11, or maybe im wrong idk
[09:43:10] <hayley> Yes, they ported McCLIM.
[09:43:21] <lotuseater> as long as you have a backend that supports it. but i saw a post even you don't need necessarily a backend
[09:43:22] <hayley> But it works on any CL and X server from experience.
[09:43:30] <lotuseater> or having McCLIM in Emacs
[09:43:54] <kakuhen> yeah, i pointed out the mezzano thing to this person and replied with something vague like uh
[09:44:01] <kakuhen> "oh idk i recall having issues with floats or something outside of sbcl"
[09:44:15] <kakuhen> i need to stop talking with so many randos on the internet x.x
[09:44:27] <lotuseater> i should play on this week at my DOOM Eternal campaign. or finishing the last levels at Crash Bandicoot 4
[09:45:38] <lotuseater> or could retry running Mezzano in a virtual machine on my new laptop
[09:45:50] <kakuhen> mezzano eats my battery fast
[09:46:08] <kakuhen> i forgot how i ran it, but i recall using qemu, and it was emulating stuff
[09:46:12] <lotuseater> haha okay good to know
[09:46:21] <kakuhen> if you use desktop then this shouldnt be a problem
[09:46:49] <lotuseater> on NixOS the compiling with SBCL worked well but something got bad when trying to run it actually, idk
[09:47:07] <kakuhen> oh wtf you can run in virtualbox now
[09:47:21] <lotuseater> hm for that there are pluggin ins
[09:47:53] <lotuseater> yeah or KVM
[09:48:34] <kakuhen> i really hate the japanese ime on mac os -- it's somehow worse than the microsoft one
[09:48:55] <kakuhen> i wanted to find a specific kaomoji and typed the obvious thing... instead I get  a million irrelevant emojis
[09:49:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[09:49:25] <lotuseater> I have much respect for the Mezzano project.
[09:50:00] <lotuseater> kakuhen: on what Mac hardware generation do you run?
[09:50:12] <kakuhen> me too; maybe over the long run it can get close to being a "modernized" OpenGenera
[09:51:42] <kakuhen> lotuseater: macbookpro16,1
[09:52:00] <kakuhen> my first regret was not getting 32 gb ram
[09:52:07] <kakuhen> my second regret was staying with US English keyboard
[09:52:24] <kakuhen> my third regret was trying out the IME and expecting it to be decent
[09:53:03] <lotuseater> i found out about this Tangram Puzzle Solver as another interesting CLIM application one presented at ELS21 but it's only written for LW, ACL and MCL back from 2004
[09:53:29] <lotuseater> i ran some time on a mac book air from 2012
[09:53:30] <kakuhen> Suppose I want to switch between Japanese and English (yes this happens often) in Emacs. Oh I can't do that because the keybind to change keyboard is C-Shift-J (and back is C-Shift-;) and Emacs captures both keybinds and any alternatives I could possibly come up with.
[09:54:07] * hayley uses Alt-Space to switch to a Greek keyboard and the other Alt-Space to switch back. Yes, she does bump them by accident.
[09:54:24] <kakuhen> also there is this default emacs keybind that will, ironically, be intercepted by mac os and bring up a dialog to choose a keyboard.
[09:54:25] <lotuseater> since I'm using sometimes also APL symbols the windows key is not wasted to trigger that :)
[09:54:29] <kakuhen> I encountered it by just following emacs tutorial..
[09:54:38] <kakuhen> let me try finding it right now
[09:55:52] <lotuseater> hm i bought a new main keyboard some days ago (Logitech G213) cause it first was 50€, then 40€ and then some weeks later 25€, and now I should switch to another layout like neo2 or bone as I promised to myself ...
[09:56:29] <lotuseater> some interesting mathy layers
[09:58:10] * moon-child ♥kinesis
[09:59:30] <kakuhen> https://a.uguu.se/KDqcgPbx.png
[09:59:34] <kakuhen> C-<SPC> does this
[10:00:00] <kakuhen> oh but I cannot do C-Shift-J to switch to hiragana input and C-Shift-; to return to English input >.>
[10:01:00] <kakuhen> well, at least I have a clunky alternative I guess...it's a shame C-<SPC> is a useful keybind in Emacs.
[10:02:17] <lotuseater> or getting a mandarin keyboard with 10000 keys or so :D
[10:03:41] <moon-child> no pinyin?
[10:03:56] <humasect> kakuhen: isn't it C-\ ?
[10:04:21] <humasect> i've done a bunch of JP in emacs and hebrew (but bidirectional support sucks)
[10:05:02] <humasect> lotuseater: http://xahlee.info/kbd/chinese_drum_keyboard.html
[10:05:57] <lotuseater> damn those things are real :D
[10:06:09] <kakuhen> C-\ gives me "input method," which admittedly I have never tried.
[10:06:50] <kakuhen> unfortunately, it doesn't behave exactly like other IMEs
[10:07:02] <kakuhen> やばlつ
[10:07:08] <kakuhen> intended output: やばっ
[10:07:22] <hayley> Seriously, the Python thing was a Google developer student club?
[10:07:51] <hayley> That is the most disgusting thing I have seen out of the university to be honest.
[10:08:40] <hayley> "Every developer dreams about working at Google..." I don't. Leave me alone!
[10:09:39] <amirouche> Google for the win!!!
[10:09:41] <amirouche> 1
[10:10:43] <lotuseater> ⊤⍵≠¯⎕⌸↓⍶⍣⍶≡⍪∥
[10:10:46] <kakuhen> i dream of a world where companies make it easy to report bugs in their  shitty proprietary software
[10:10:58] <lotuseater> hayley: good :)
[10:11:13] <hayley> Either lotuseater has written code for Conway's Game of Life, or a dot product. There are no other known uses of APL.
[10:11:17] <kakuhen> I counted like 2 bugs on an Android version of Slack and 5 on the iOS version. Unfortunately, there is no other choice, so I am stuck with Slack and its bugs.
[10:11:43] * moon-child feels tempted to link the apl-compiler-on-a-shirt
[10:11:53] <lotuseater> hayley: lol I hope that was meant dramatically sarcastic :D
[10:12:02] <hayley> lotuseater: I'm kidding.
[10:12:31] <lotuseater> hayley: okay good :) so like "LISP can just be interpreted, slow and has no types"
[10:12:38] <hayley> lotuseater: Yes.
[10:13:12] <lotuseater> but yes it can indeed happen that you write a real program by accident on hammering random keys :D
[10:13:29] <moon-child> 'garbage collection is unsuitable for mission-critical programs'
[10:13:53] * hayley uploaded an image: (357KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/OPApCBSmrTFZVhljxfbfEKIA/gun-baker.jpeg >
[10:14:05] <lotuseater> kakuhen: do you must use Slack? THAT kills your battery
[10:14:20] <kakuhen> That's why I use emacs-slack on my Mac 
[10:14:24] <lotuseater> moon-child: like in a operating system -> Mezzano
[10:14:31] <kakuhen> The electron client fuckign activates my discrete graphics card
[10:14:58] <hayley> lotuseater: No, you can't use a GC in a AAA video game, and btw that is the only soft real-time domain that has ever been studied apparently.
[10:14:59] <kakuhen> Why would a stupid website with a bunch of flat, corporate color scheme and mundane  animations that were possibly with jQuery since forever need my fuckign discrete graphics card
[10:15:02] <kakuhen> >.<
[10:15:09] <lotuseater> hayley: another of your meme that got me laughing :D thanks
[10:16:22] <kakuhen> oh, the front page of github, for whatever reason, needs to activate my GPU because they wanted to animate some stupid globe with transparent paths forming and disappearing 
[10:17:01] <kakuhen> then i have to restart my entire web browser so mac os can get a clue and realize i dont need my discrete gpu anymore 
[10:17:24] <kakuhen> closing github tab or moving out of the home page should be enough of a hint, but it keeps the gpu on
[10:17:25] <hayley> lotuseater: Also the more streamlined version: https://i.redd.it/77dqctmegaq61.jpg
[10:17:26] <moon-child> about:config: webgl.disabled -> true
[10:17:44] <lotuseater> kakuhen: it's kind of a strategy "make people think they need buy 'better' hardware every year to keep up with this by flooding such trivial programs with unnecessary work" so it just fooles you it does a lot of work
[10:18:03] <lotuseater> :D
[10:18:57] <kakuhen> oh btw Slack is dropping support for Windows 10 LTSC
[10:19:06] <kakuhen> despite the fact that the latest Chromium supports Windows 10 LTSC
[10:19:20] <kakuhen> planned obsolescence at its finest.
[10:19:49] <humasect> kakuhen: don't need the 'l' for little tsu, just ttsu
[10:19:55] <kakuhen> windows 7 support is going away as well, but Chromium *is* dropping support by the end of this year so that kinda makes sense.
[10:19:59] <humasect> windows IME has its own kinda way 
[10:20:24] <lotuseater> A bit like this "oh but on the new device with increased version number you have 3 pixels more at your camera so buy fast"
[10:20:36] <kakuhen> humasect: i see; thanks! For most of my life I used 'l' precisely because that was the behavior I got on the Google IME and Microsoft one, heh.
[10:21:34] <humasect> kakuhen: cool np =) i think the 'l' convention was from older times (windows)
[10:21:38] <hayley> lotuseater: actually I lied, see https://www.reddit.com/r/GCSolidarity/comments/mtnxtf/finally_evidence_refcounting_is_faster_than/
[10:21:39] -ixelp- finally evidence refcounting is faster than tracing GC : GCSolidarity
[10:21:44] <humasect> can't remember.
[10:21:52] <humasect> hayley: oh wut
[10:22:12] <humasect> eh -----_-----
[10:22:33] <lotuseater> i wouldn't call that lying
[10:22:36] <kakuhen> reference counting is garbage collection, checmate
[10:22:38] <kakuhen> checkmate*
[10:22:46] <hayley> It is not tracing though.
[10:22:50] <kakuhen> Yeah I know
[10:22:58] <kakuhen> but C-niles dont know the difference and will tell me "Swift is garbage collected"
[10:23:00] <humasect> i been pushing refcount in here because 
[10:23:08] <lotuseater> i nearly don't know anything about this
[10:23:12] <kakuhen> you dont know how much i wish swift were garbage collected
[10:23:19] <humasect> kakuhen: its not ?
[10:23:21] <kakuhen> their refcounting impl is heavily synchronous and ugly.
[10:23:33] <kakuhen> id much prefer an actual tracing GC over "ARC"
[10:23:36] <lotuseater> kakuhen: get swifty!
[10:23:41] <humasect> ohhh right. its taking after Objective-C
[10:23:46] <lotuseater> "SHOW ME WHAT YOU GOT"
[10:23:55] <humasect> swift says its auto refcount
[10:24:00] <kakuhen> humasect: technically, Swift *is* garbage collected since refcounting is a form of GC, but when people say GC they usually mean tracing GC.
[10:24:15] <kakuhen> hence hayley saying "It is not tracing though."
[10:24:45] * gilberth doesn't consider refcounting as a GC.
[10:25:00] <hayley> gilberth: Well, the Handbook covers refcounting.
[10:25:00] <humasect> tracing just means preventing cycles, doesn't it? thats really only a serious problem in LISP eh
[10:25:04] <lotuseater> oh gilberth you're awake (again or still?)
[10:25:24] <gilberth> Still.
[10:25:30] <hayley> It's a problem in any language with mutation.
[10:25:31] <kakuhen> hayley: one of the selling points of automatic refcounting back in 2010 was quite literally "you'll never get yourself in cycles  again!"
[10:25:36] <kakuhen> retain cycles*
[10:25:58] <moon-child> hayley: and pure languages, if they have laziness!
[10:26:11] <kakuhen> maintaining a non-ARC mac app is just about the most pain you could possibly ask for when using Objective-C.
[10:26:14] <gilberth> How does that work? By magic?
[10:26:18] <hayley> kakuhen: Well, some people say that good programs don't have cycles. But how do you write a damn tree without making the parent link or the child link weak (which is, as the name suggests, a weak cop-out)?
[10:26:28] <moon-child> parent vectors
[10:26:34] <hayley> moon-child: "Haskell is rife with mutation under the hood" - someone on GHC
[10:26:35] <humasect> its tracing vs. refcount , the two families of GC 
[10:26:44] <moon-child> humasect: stop-n-copy?
[10:27:08] <humasect> kakuhen: i love Obj-C! did lot of NeXT nd iOS/OSX coding. and GNUstep ]
[10:27:13] <kakuhen> fun!
[10:27:16] <humasect> moon-child: no stopping =) 
[10:27:16] <kakuhen> I like Objective-C, too
[10:27:35] <kakuhen> but I will admit ARC is a great blessing, as are a bunch of other features added in 2010-2011
[10:27:49] <gilberth> Anyhow, when I need to handle cycles in a special way, it's no automatic memory management.
[10:28:07] <humasect> i really like it. made my own lang that mixed Smalltalk with it in same file, fun stuff. i enjoyed refcount, gave me a good mind graph of what was going on. i never had many memory problems in C though, lots of space in my head
[10:28:24] <humasect> swift looks okay, i might try it. since i've got apple stuff now 
[10:29:13] <hayley> Aha, it was https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/local-gc.pdf page 2
[10:29:23] <kakuhen> I actually dont like Swift
[10:29:24] <humasect> FoundationKit has NSAutoreleasePool, which can be nested.  just {with pool do: {create/retain stuff: }} then release pool all the stuff in the pool is release
[10:29:53] <kakuhen> SwiftUI is kinda fun to mess around with, but Swift as a whole is the antithesis to what made Objective-C great in my eyes
[10:30:10] <humasect> if i were to make serious mac/ios app i would pick obj-c. its a beautiful workflow and environment. sorry emacs but i would use Xcode also. 
[10:30:15] <hayley> Also see https://i.redd.it/a8k7az85m5871.jpg for people who want to blow themselves up.
[10:30:30] <kakuhen> also if you compare Swift with Rust, you'll notice Mozilla did Apple's ideas a bit better :)
[10:30:34] <humasect> (had app license back in the day, half way done a game project, 3d graphics blender rpg, lost it!)
[10:30:39] <kakuhen> I'm sorry, I should have said ru5t
[10:30:44] <humasect> ehhh i really dont like rust
[10:30:47] <humasect> **
[10:31:03] <kakuhen> well you wont like swift much either then
[10:31:07] <moon-child> nor I.  Linear types are nice enough.  But you don't make _everything_ use them and then pay a terrible penalty if you ever want to sahre anything, ever
[10:31:19] <kakuhen> most of the syntactic sugar either influenced rust or rust influenced swift's
[10:31:23] <humasect> kakuhen: false, it is very superficial dislike, syntax
[10:31:30] <humasect> <<:<::::>:>>::<<><<:<>:>:>>>>><:<:::::::
[10:31:51] <kakuhen> humasect: my point is that a lot of common syntactical sugar you find in swift is very similar, if no identical, to that of rust
[10:32:01] <kakuhen> so if you didnt like rust syntax, you probably will not like swift syntax either.
[10:32:20] <humasect> got to press shift every dang two letters! this is why i use :::::: https://github.com/anmonteiro/snoopy-mode  (reverses symbols. i use them a lot more than numbers in the row)
[10:32:21] -ixelp- GitHub - anmonteiro/snoopy-mode: Minor mode for number row unshifted character insertion in Emacs
[10:32:30] <kakuhen> some of the most unreadable code ive seen in my life was written in swift, unsurprisingly.
[10:33:11] <lotuseater> kakuhen: maybe the unreadability is their design decision for security reasons
[10:33:12] <humasect> kakuhen: nahh, i really can't see it. it looks more like a cross between javascript and objc, with a sprinkling of ocaml 
[10:34:07] <humasect> i see it does have similar ideas as rust 
[10:34:29] <humasect> reword: looks a bit like typescript more so. 
[10:34:40] <kakuhen> humasect: look at how it unwraps optionals or treats generics
[10:34:48] <humasect> yep i did 
[10:35:11] <kakuhen> in many cases, valid swift code for both of those things will also be valid rust
[10:35:15] <humasect> i see the rust version, that looks alright too =) (and you are right it looks simlar)
[10:35:15] <kakuhen> also the closure syntax is freaking awful
[10:35:19] <kakuhen> they basically copied how kotlin does it
[10:35:38] <humasect> but the rust code in the wild i have seen, Oh::<Lord T>::how<<&ref>>this:::what?
[10:35:46] <kakuhen> ok that's true
[10:35:49] <humasect> how many times did i press shift to type that 
[10:35:56] <kakuhen> it is easier to expose pointer in rust than it is in swift
[10:36:03] <kakuhen> among other things
[10:36:09] <moon-child> that's like saying, most of the lisp code in the wild you've seen is (so:many (pare (nthe (ses))))
[10:36:31] <humasect> snoopy-mode is great for lisp. the only symbol really being '90' oops i meant '()' forgot to shift. usually typing those things unshifted. what a relief and so much less stress
[10:36:38] <kakuhen> moon-child: (scheme is (pretty nice))
[10:36:58] <humasect> moon-child: no its not. 
[10:37:00] <kakuhen> (then we :have `(,'common-lisp))
[10:37:36] <humasect> moon-child: i am talking about pressing the shift key and all the :: and the <<>> . LISP is no more terse --- it just-uses-more-words
[10:37:52] <moon-child> humasect: only insofar as lisp syntax is in good taste and rust syntax is not
[10:38:02] <humasect> hyphen, `, ', ,, (, ), -- all typed without shift. except #
[10:38:03] <moon-child> do you need to press the shift key any less for (?
[10:38:17] <moon-child> how do you type () without shift?
[10:38:18] <humasect> no, because i am using snoopy-mode, as above
[10:38:44] <humasect> moon-child: yes, exactly, i have been typing exactpy this. wrote a bunch about it just up there
[10:39:03] * gilberth has ( ) and [ ], as well as / and - swapped in his keyboard layout.
[10:39:09] <kakuhen> :, # and ,@ are the immediately things in my head  that needs shift
[10:39:14] <humasect> gilberth: interesting! how come?
[10:39:35] <gilberth> I need less shifts?
[10:39:38] <humasect> kakuhen: oh yeah colon, i forgot. i really have a problem with those
[10:40:10] <humasect> gilberth: oh, i see what you mean. i thought you meant swapped the parens from ( to ) and ) to ( etc =) 
[10:40:31] <humasect> - and / dont need shift though 
[10:40:43] <humasect> often i will use [] in irc just because i dont like pressing shift 
[10:41:05] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[10:41:09] <gilberth> But "-" would-and-i-like-it-unshifted-at-the-pinky-for-lisp-symbols.
[10:41:20] <humasect> ahhh, right sir
[10:41:36] <kakuhen> JustDontUseKebabCase
[10:41:48] <kakuhen> actually there's a better solution in my mind
[10:42:06] <gilberth> kakuhen: That would be even more use of the shift key!
[10:42:08] <humasect> hmmm. okay that and camelCase i will make exception. because i really like how they look, being a very visual programmer, hyphens are a lot harder to read 
[10:42:21] <humasect> gilberth: i think thats what he meant =) 
[10:42:37] <kakuhen> (defun kebab-case (s) (substitute #\- #\Space (string-upcase s)))
[10:42:49] <kakuhen> now make tons of macros for defining functions and classes 
[10:42:50] <gilberth> IFindHyphensWayEasierToRead.
[10:42:55] <kakuhen> simply supply a string "like this"
[10:42:59] <kakuhen> to get a function or class named like-this
[10:43:30] <lotuseater> kakuhen: you could have a look at the STR library
[10:43:40] <kakuhen> gilberth: NSBloat  has ruined my programming eyes
[10:43:51] <gilberth> lol
[10:44:37] <humasect> gilberth: it is my only problem with lisp. when i see a word i read it right away at once, not left to right. lisp reads a bit more like prose
[10:45:01] <humasect> *NSLove
[10:45:29] <gilberth> You love nazis?
[10:45:42] <kakuhen> oh gilberth you speak german right
[10:45:53] <kakuhen> I wonder how the first time seeing NSUInteger must've felt ;)
[10:45:54] <gilberth> By accident, yes.
[10:46:24] <lotuseater> phew
[10:46:39] <gilberth> kakuhen: As a German you're trained to avoid "NS" as well as "SS", so I really needed some time to get over it.
[10:46:54] <humasect> oh why NS? (half german but uh not germany)
[10:47:56] <gilberth> Nationalsozialismus.
[10:47:57] <lotuseater> NS := NationalSozialismus
[10:48:10] <humasect> here has some of those. like KKK or uh now BLM and um Anon
[10:48:16] <kakuhen> and NSU is something like "national socialist underground" right
[10:48:19] <humasect> ah
[10:48:43] <kakuhen> wow my mind made an awful joke just now
[10:49:00] <lotuseater> humasect: where is that?
[10:49:04] <gilberth> NSU is a car brand.
[10:50:09] <humasect> lotuseater: north america 
[10:50:16] <lotuseater> ah okay
[10:50:39] <humasect> idk how to call both countries together. hmm.
[10:50:40] <kakuhen> hayley: that gc picture is cursed
[10:50:40] <lotuseater> and here HH should only stand for Hansestadt Hamburg
[10:51:02] <hayley> kakuhen: It's cursed cause it's true.
[10:51:06] <kakuhen> are you familiar with the template of two people pointing at something?
[10:51:11] <hayley> Yes.
[10:51:23] <kakuhen> someone needs to draw dennis ritchie and ken thompson as them and point at the research paper
[10:51:30] <kakuhen> then just use the meme against anyone posting "GC bad"
[10:51:48] <humasect> garbage is bad tho
[10:51:59] <humasect> collecting it is good
[10:52:17] <hayley> The thing about moving collectors is they don't even touch the garbage.
[10:52:22] <humasect> are they basically saying they want to do garbageman job (which is fun and fulfilling and noble btw)
[10:52:28] <humasect> aha
[10:52:43] <humasect> garbageman uses gloves and just touches the container and tosses 
[10:53:35] <lotuseater> as I heard it's a well paid job at least here
[10:53:39] <kakuhen> i have been enlightened by this conversation
[10:53:39] <gilberth> Well, we are friendly to the environment and in case of compacting collectors give the free bits back to nature.
[10:54:25] <kakuhen> a garbage collector for C is impractical because the entire software is garbage 
[10:55:25] <lotuseater> tell that Linus Torvalds
[10:55:34] <kakuhen> alright, what's his email
[10:55:50] <gilberth> Heh, that would make the implementation trivial. Let's call the compiler GCCC then.
[10:56:17] <humasect> i learned today that flies are very important. decompose and put into soil. also the pollinate flowers. they are good guys but dont kill them, if you do put their carcass into the soil. also dont kill them in australia
[10:56:34] <lotuseater> GCCC := Garbage Collected Compiled C ?
[10:57:39] <gilberth> Think again.
[10:57:42] <humasect> doesnt C already stand for Compiled. or, what is uncompiled C? source code?
[10:57:59] <dave0> line noise
[10:58:00] <humasect> Garbage Collected GNU Compiler Collection for Compiling Garbage C (GCGCCCGC)
[10:58:17] <dave0> it would be better as a palindrome
[10:58:38] <gilberth> In theory C could be interpreted,
[10:58:38] <lotuseater> humasect: now that looks like uncomplete DNA string
[10:58:42] <kakuhen> (A)bhorrent, (B)ad, (C)rap, (C)rap(++), (D)isaster
[10:58:44] <kakuhen> gee I wonder what comes next.
[10:59:08] <kakuhen> (E)macs Lisp?
[10:59:08] <dave0> Excrement!
[11:00:34] <hayley> Wait, what the fuck? The Hertz-Berger paper (tldr: "SIX TIMES AS MUCH MEMORY!!!11!!one") paper runs on a machine with so little memory, that anything over a 80% overhead pages to hell and back, apparently.
[11:00:56] <gilberth> And C stands for ++B. Hasnt' anybody noticed that C++==C is true?
[11:01:24] <kakuhen> dude, we tried running python on a STM32 microcontroller and it was like... kinda slow, dude... but C wasn't! therefore GC bad.
[11:01:43] <hayley> kakuhen: Don't mention MicroPython to gilberth.
[11:01:53] <kakuhen> w-what happens if i do
[11:02:37] <gilberth> hayley: I was about to ask where my favorite benchmark is.
[11:02:50] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[11:03:52] <gilberth> kakuhen: Hayley once posted a talk about MicroPython. Benchmark was how fast it is toggling a GPIO pin. Spoiler: The end result was inline assembler.
[11:04:21] <lotuseater> https://trash.randomerror.de/bwtkf/morpheus_c_lattenzaun.jpg
[11:04:32] <gilberth> Besides GPIO usually sits on a slower bus anyway.
[11:04:37] <kakuhen> lotuseater: that is genius
[11:04:48] <lotuseater> kakuhen: haha yes :D
[11:05:25] <kakuhen> blinking LED with micropython, :|
[11:05:32] <kakuhen> blinking LED with C, :O this is the superior language!!
[11:05:44] <lotuseater> and as Guy Steele once said about Java "We were after the C++ programmers and got them halfway to Lisp."
[11:05:54] *** Joins: nihaal (~nihaal@122.164.143.87)
[11:05:58] <gilberth> Howabout blinking LEDs with a PWM?
[11:06:44] <kakuhen> :|
[11:07:31] <lotuseater> and then doing benchmarks with that
[11:09:16] <kakuhen> Ru5t is Effort Free programming paradigm, just sort of thingk about what ur doing then the compiler informs u how to do the rest
[11:09:24] <kakuhen> it is the future
[11:10:27] <lotuseater> https://trash.randomerror.de/qu2dg/shakespeare.jpg
[11:13:55] *** Joins: shka (~herr@109.231.62.239)
[11:28:20] <humasect> https://tapeuniversity.com
[11:28:22] -ixelp- Tape University™ - Online learning resource for all things tape
[11:28:38] <humasect> kakuhen: nah thats ocaml type inference =) =) with merlin =) 
[11:28:50] <humasect> (its realtime inemacs)
[11:54:24] <humasect> https://www.aicrowd.com/challenges/neurips-2021-the-nethack-challenge 
[11:54:26] -ixelp- AIcrowd | NeurIPS 2021 - The NetHack Challenge | Challenges
[11:54:38] <humasect> lets make a team. 20k prizez
[11:54:59] <kakuhen> im not good at challenges
[11:56:36] <humasect> eh its much too complicated 
[11:57:35] <humasect> lots of neat compos especially game jams, but i am terrible with competition or temporal stressors
[11:58:29] <kakuhen> the game i am currently working on with a friend started with the lisp game jam
[11:58:34] <kakuhen> we're still nowhere near completion but i kept on going anyway
[11:58:49] <kakuhen> i've been taking a break since we reached a problem that is way too hard for me to solve, for now.
[11:59:22] <humasect> its fun =) as soon as i started to get paid to code and doing it for work, i did less and less for fun on hobby projects and fun projects with randos
[11:59:37] <kakuhen> so i was able to implement composable effects on a character, but now i want to be able to arbitrarily remove them; we made an object-oriented events API that may or may not help, but it's overall a tricky situation
[11:59:56] <kakuhen> just to give a hint at how cursed my ideas are: we implement character effects as funcallable standard objects.
[12:00:40] <kakuhen> you mix in a "character-effect" class at run time, which gives the character a slot consisting of a list of these funcallable standard objects
[12:00:44] <humasect> ahhh eh, often when an OO event api comes about, things are .....
[12:00:55] <moon-child> https://github.com/krajj7/bothack  nethack bot that managed to win
[12:00:55] -ixelp- GitHub - krajj7/BotHack: BotHack – A Nethack Bot Framework
[12:01:01] <humasect> (ie. that entity system ppl dont understand)
[12:01:29] <kakuhen> anyway, i have decided to focus on a flac decoder this past week, since my friend has been taking a break from coding
[12:01:40] <kakuhen> and i was the only person working on the game for an entire week or two.
[12:01:45] <humasect> moon-child: ohh =) 
[12:02:08] <moon-child> (but the fb people are trying to do it with nns, which is a whole other kettle of fish)
[12:02:17] <humasect> coding is like a fun game 
[12:02:21] <humasect> big puzzle
[12:02:39] <humasect> moon-child: ah i see. i had thought the compo was over (its next month until oct)
[12:02:57] <humasect> teams applying will be experienced in whatever that nns fb stuff is 
[12:03:35] <humasect> not at all interested in the neural whatnot
[12:04:26] <kakuhen> https://developer.apple.com/forums/thread/681907
[12:04:30] <humasect> ive wanted to make an emulator or a fantasy console/computer as fun project. but i am looking for work first (starting today) 
[12:04:48] <kakuhen> i wonder how long it'll take for them to get rid of the system-wide apache server, mysql service, and rails installation that are horribly out-of-date and never used by anyone
[12:05:34] <humasect> someone somewhere uses them, probably companies and such
[12:06:03] <humasect> better to install fresh when it comes to open source anyway, especially if they are your dev tools 
[12:06:13] <humasect> sharpen ur knives if you wanna make some cuts
[12:06:47] *** Quits: nihaal (~nihaal@122.164.143.87) (Ping timeout: 240 seconds)
[12:07:38] <kakuhen> they should make every mac ship with a copy of SBCL
[12:08:23] <kakuhen> mac os 12.0 is unreleased for now, so technically, i can use the argument "you already have php, mysql, rails, apache, TCL!!!!!!!!!!, python, ruby, perl, ... and you already use TinySCHEME for configuring app sandboxes; SBCL wouldn't hurt"
[12:09:54] *** Joins: selwyn (~selwyn@user/selwyn)
[12:12:01] <lotuseater> you mean CCL ;)
[12:12:16] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[12:13:31] *** Joins: aeth (~aeth@user/aeth)
[12:13:37] <kakuhen> I am very partial towards CCL but the truth is that SBCL is the most popular impl
[12:13:43] <kakuhen> so it'd make more sense to ship sbcl system-wide
[12:14:06] <kakuhen> utilities like roswell will instantly pull in a copy of sbcl if you start them without first specifying the location of your lisp
[12:14:07] <humasect> sbcl installed right away, right after emacs =) 
[12:14:22] <lotuseater> in the begin of this year someone ported SBCL to M1
[12:14:29] <kakuhen> oh that's even more important
[12:14:29] *** Joins: ln43 (~ln43@user/ln43)
[12:14:47] <kakuhen> CCL has ARM32 support but not M1, somehow. The ARM32 support is from 2010 and allegedly works on those old iPhone models.
[12:15:00] <kakuhen> And you can find pretty funny stuff in the lisp kernel code for iPhone
[12:15:35] <ln43> M1 is for the new apple?
[12:16:36] <lotuseater> yes
[12:16:47] <ln43> hello lotus...
[12:16:50] <ln43> hi all
[12:17:02] <lotuseater> hey ln43 
[12:17:12] <ln43> how is it going ?
[12:17:15] <lotuseater> Apple finally got away from Intel
[12:17:15] <kakuhen> my brain cant help but see "natural log of 43"
[12:17:40] <lotuseater> kakuhen: mine also :)
[12:17:50] <kakuhen> one of my math professors was really based
[12:17:53] <ln43> yes ln are the initials of a name lihe hp :)
[12:17:56] <lotuseater> but I don't like this notation with ln
[12:17:58] <kakuhen> he would write log(x) since the only base you should use for logarithms is e :)
[12:18:09] <lotuseater> kakuhen: right
[12:18:10] <ln43> high performance right computing
[12:18:52] <ln43> anyway here today is really hot climate
[12:19:28] <ln43> here where i am ...
[12:19:36] <lotuseater> Euler used to use a hooky looking small "l" for it
[12:19:49] <lotuseater> phew I like it more cold
[12:20:03] <ln43> ln should be small l or not ?
[12:20:10] <lotuseater> or with what my body seems to come along better
[12:20:12] <ln43> at least on the hand calculators
[12:20:28] <lotuseater> ehm
[12:20:34] <lotuseater> log
[12:20:47] <ln43> ah
[12:20:49] <ln43> ok
[12:21:18] <ln43> but i changed a lot of nicknames during the years ...
[12:21:18] <lotuseater> I just mentioned what Euler used
[12:21:25] <lotuseater> ah that's okay
[12:22:21] <ln43> i'm trying to digest each day a small portion of CL
[12:22:30] <selwyn> does anyone actually use lg for binary log
[12:22:34] <ln43> today i was beginning to look at drakma and hunchentoot
[12:22:38] <selwyn> because it is never used in maths
[12:22:47] <lotuseater> ln43: a big cake :)
[12:22:53] <ln43> of what ?
[12:23:13] <ln43> not just really for easy things...and basically following the book
[12:23:14] <lotuseater> CL is a big cake you can eat long time from
[12:23:25] <ln43> yes but i'm still not much used to it
[12:23:34] <ln43> to use it in a consistent way
[12:23:36] <ln43> i mean
[12:23:52] <lotuseater> selwyn: in The Art of Computer Programming Knuth uses lg or lb, I would have to look again
[12:24:37] <ln43> did you read all the serie ?
[12:24:42] <ln43> all the volumes
[12:24:57] <kakuhen> if CL were a food, it'd probably be polar bear
[12:24:57] <lotuseater> no
[12:25:04] <kakuhen> eating any non-trivial amount would overwhelm you !
[12:25:27] <lotuseater> you mean all volumes which are readable
[12:25:37] <ln43> yes those
[12:26:07] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[12:26:09] <lotuseater> just some parts some times
[12:26:50] <lotuseater> just reading is not enough, so I like more to say "no"
[12:27:03] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3d20) (Quit: Leaving...)
[12:27:33] <hayley> https://www.youtube.com/watch?v=2PoLaX4IA_0
[12:27:33] -ixelp- Bike - YouTube
[12:27:59] <ln43> and nothing ...
[12:29:19] <ln43> hello hayley
[12:30:30] <ln43> of course, using Cl is not so easy at the beginning
[12:30:49] <ln43> but whith a bit of practice in a few years should be possible for me too
[12:32:30] <selwyn> it shouldn´t take that long to learn common lisp
[12:32:48] <ln43> yesterday i was considering one thing
[12:33:22] <ln43> why i should use (eval +) that has the sme result of * on the repl?
[12:33:32] <susam> I think what we need are some guides that provide a quick tour of common lisp. That would help beginners get started with CL more quickly.
[12:33:37] <ln43> that eval on a non quoted symbol is strange
[12:33:55] <shka> you eat polar bear?
[12:34:07] <lotuseater> selwyn: but the whole story does indeed
[12:34:13] <shka> it is... evil
[12:34:30] <selwyn> the liver is poisonous
[12:34:32] <shka> https://www.youtube.com/watch?v=-hk1LzKELoo
[12:34:33] -ixelp- Megadeth - Countdown To Extinction - YouTube
[12:34:36] <kakuhen> shka: no, but is something you shouldnt eat
[12:34:40] <ln43> susam: there is practical coomon lisp
[12:34:44] <kakuhen> any non-trivial amounts eaten will blow away your liver 
[12:34:45] <susam> When I began learning CL, the Common Lisp Cookbook (used to be on Sourceforge back then), was quite helpful to quickly get an overview of what it is that I need to know.
[12:34:48] <lotuseater> hm i nwever 
[12:34:51] <gilberth> #.+ is like !! in /bin/sh
[12:34:52] <selwyn> you get vitamin a poisoning and your bones grow painful nodules
[12:34:55] <lotuseater> never use eval directly
[12:36:03] <susam> ln43: Practical Common Lisp is a fantastic book. However, it takes at least 4 chapters to start discussing the fundamental concepts. I don't think there is a K&R style book for CL that first provides a quick tour of the language in chapter 1 and then starts with the fundamentals from chapter 2 itself.
[12:36:30] <shka> selwyn: as should, endangered species eating asshole
[12:36:32] <shka> :P
[12:37:01] <selwyn> yes
[12:37:09] <ln43> yes it requires a special bliss
[12:37:16] <ln43> be proficient with CL
[12:37:53] <selwyn> practical common lisp is great but the examples are hilariously 2005
[12:37:57] <selwyn> tf is a shoutcast server
[12:38:43] <shka> ... it is a streaming server
[12:39:10] <selwyn> i mean, i can look up what it is
[12:39:18] <ck_> it casts shouts
[12:39:18] <selwyn> but it seems like a strange thing to want to build nowadays
[12:39:25] <kakuhen> wait, shoutcast servers are not 2021? :(
[12:39:47] <shka> selwyn: it can be worse
[12:39:54] <shka> the best book about OO in lisp?
[12:40:02] <shka> uses tape storage examples
[12:40:10] <ln43> which one os it ?
[12:40:12] <ln43> is
[12:40:14] <selwyn> lol
[12:40:17] <shka> anyway
[12:40:26] <lotuseater> shka: for learning? the one by Sonya Keene
[12:40:31] <susam> Yes, I do book club meetups with the PCL book and everytime we go through its examples, I have to prefix them with, "You know this book was written in 2005, so the examples may look outdated. Let us focus more on the concepts and let us practice the concepts without focussing too much on the examples."
[12:40:32] <ln43> ah ok
[12:40:38] <shka> selwyn: shoutcast/icecast servers are still in use
[12:40:43] <shka> lotuseater: yeah
[12:40:54] <lotuseater> or a first glimpse of it via Common Lisp Recipes or ANSI Common Lisp
[12:41:27] <lotuseater> susam: oh cool if you have people near you that do this with you
[12:41:40] <ln43> yes right common lisp recipes was not bad
[12:41:55] <selwyn> iirc there are some plans to update pcl at some point
[12:42:00] <ln43> ansi common lisp is still a must
[12:42:28] <susam> lotuseater: No, sadly nobody near me who do this. I used to do it over Zoom and these days I am trying out it on Twitch too.
[12:43:01] <shka> damn twitch book streamers
[12:43:37] <lotuseater> susam: I know that situation VERY good. some friends hear me out when we talk about stuff and i say "ah then that's like this and that". or "no, I would just reprogram the language to fit that"
[12:44:01] <lotuseater> selwyn: I heard of an upcoming Common Lisp Recipes 2
[12:44:05] <susam> I started the book club as a way to make the pandemic time more productive. I was skeptical before. I had never done book clubs before. We began it with the study of Introduction to Analytic Number Theory, a very daunting book, in my opinion.
[12:44:40] <susam> Despite the initial skepticism, it was the best thing I have done during the pandemic times. The IANT book has a close knit community of readers. And I have learnt a lot more from the book by interacting with others than I would have if I were reading that book alone.
[12:44:40] <lotuseater> susam: if you want some time, we could try it via Jitsi, so nobody needs an account or something like that
[12:45:09] <ln43> yes it's better work in group 
[12:45:20] <susam> lotuseater: Sure. I have read about Jitsi. Need to try it out.
[12:45:28] <ln43> and read book togheter and comment about  and share opinions
[12:45:34] <kakuhen> I use Jitsi
[12:45:39] <shka> susam: wow, this is awesome!
[12:45:41] <kakuhen> It's fine but WebRTC is a pain
[12:45:44] <kakuhen> only Chromium properly implements it
[12:46:00] <lotuseater> oh wait, by which author is the analytic number theory book? :)
[12:46:16] <susam> lotuseater: That is by Apostol (published 1976).
[12:46:23] <lotuseater> ah that one :)
[12:46:42] <kakuhen> anyone want to do a reading course on topos theory with me this fall :3c 
[12:46:45] <lotuseater> I tried to remember this also very good one in German by ...
[12:46:51] <kakuhen> i should send an email to that prof soon ;^^
[12:47:06] <lotuseater> no topology is not my interest field
[12:47:20] *** Quits: razzy (razzy@user/razzy) (Ping timeout: 250 seconds)
[12:47:34] <lotuseater> ah right, Jörg Brüdern
[12:48:43] <ln43> susam: but why are you so interested in mathematic ?
[12:48:57] <ln43> is it just an hobby or more ?
[12:49:01] <lotuseater> what's that for a type of question?
[12:49:15] *** Joins: razzy (~razzy@user/razzy)
[12:49:15] <susam> ln43: I don't know. Hobby would indeed be the right way to describe it.
[12:49:24] <lotuseater> for me too
[12:49:29] <ln43> ah good
[12:49:51] <ln43> ok, consider that knuth als is a self declared hobbist in hs field
[12:49:53] <ln43> declared and proclaimed
[12:49:59] <ln43> also
[12:51:12] <lotuseater> he is, for mostly Concrete Mathematics
[12:51:29] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[12:52:08] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[12:52:39] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 250 seconds)
[12:52:53] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[12:52:59] <lotuseater> kakuhen: :)
[12:53:28] <kakuhen> my internet connection has some problems
[12:54:01] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[12:54:13] <lotuseater> it's ok :)
[12:55:05] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[12:55:47] <ln43> there is any newest alternative respect to the REST apis ?
[12:56:29] <lotuseater> okay of those things I don't have a clue at all ^^
[12:56:42] <ln43> or maybe any altenative more prefarable and preferred ?
[12:56:57] *** Joins: razzy (razzy@user/razzy)
[12:57:09] <ln43> ok but .. it's better to be exposed to new concepts to develop confidence over time
[12:57:26] <ln43> each day should be a new concept at least otherwhise there is no progression
[12:57:52] <ln43> so i ask to know and being exposed is better for the growth
[12:58:41] <lotuseater> yes but never deepen some of this will get none
[12:59:34] <ln43> mmh ... quite right
[12:59:50] <ln43> but there is no measure to define what you mean by deep
[12:59:56] <ln43> so it's an abstract idea
[13:00:04] <lotuseater> yes kind of
[13:00:14] <ln43> yes , quantificable on the basis of the progresses
[13:00:35] <ln43> but how to ecvaluate them ?
[13:00:46] <ln43> yes for me is difficult
[13:01:27] <lotuseater> there is a difference between just knowing something, thinking you understand something and really understanding
[13:01:36] <ln43> of course
[13:03:02] <ln43> from what i understood the rest concept was a way to simplify the iterfaces and accessin / retrival /modification of datas between clients / servers and so on
[13:03:17] <ln43> ok but it's of course a general view point
[13:03:29] <lotuseater> ok
[13:03:44] <lotuseater> I'm not into web stuff.
[13:03:52] <ln43> me too
[13:05:54] <ln43> maybe, ok... if i had enough time to invest the sector i would like more about Cs could be related to new algorithms development
[13:06:08] <ln43> but it's ok, only an idea
[13:07:09] <ln43> anyway yes, mostly theoretical with only the need for a computer lab to put in practice the ideas
[13:07:16] <ln43> mostly no commercial activity
[13:07:18] <ln43> no profit
[13:07:39] <ln43> but there is no free lunch and that is a quote that i hate
[13:09:48] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[13:11:00] <selwyn> sigh
[13:11:05] *** Quits: razzy (razzy@user/razzy) (Ping timeout: 248 seconds)
[13:11:21] <lotuseater> selwyn: why exactly now? ^^
[13:11:26] <selwyn> well
[13:11:35] <lotuseater> this with the free lunch is not just a quote
[13:11:42] <selwyn> i was about to complain about the state of automatic differentiation libraries in general
[13:11:52] <lotuseater> hehe
[13:12:03] <selwyn> https://github.com/google/jax this looks quite powerful though
[13:12:04] -ixelp- GitHub - google/jax: Composable transformations of Python+NumPy programs: differentiate, vectorize, JIT to GPU/TPU, and  [...]
[13:12:47] *** Joins: razzy (~razzy@user/razzy)
[13:13:09] <lotuseater> one year ago Edi Weitz made a video about that, or why Lisp is especially good at also those symbolic things
[13:14:31] <lotuseater> ah vectorizing :)
[13:15:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:20:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[13:21:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: Lost terminal)
[13:21:27] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 240 seconds)
[13:23:31] *** Joins: razzy (~razzy@user/razzy)
[13:33:29] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[13:35:04] *** Joins: makomo (~makomo@user/makomo)
[13:35:13] *** Joins: razzy (~razzy@user/razzy)
[13:49:22] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[13:49:57] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:52:09] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[14:00:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:03:30] *** Joins: aeth_ (~aeth@user/aeth)
[14:05:07] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[14:05:45] *** Joins: nihaal (~nihaal@122.164.143.87)
[14:17:49] <kakuhen> lotuseater: i attempted a crc checksum with the ugliest loop ive ever written
[14:18:02] <kakuhen> https://plaster.tymoon.eu/view/2607#2607
[14:18:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:18:24] <kakuhen> what'd be a good first step to make this not ugly
[14:19:28] <lotuseater> i'll have a look
[14:20:32] <lotuseater> i prefer writing the loop keywords as real keywords, so they will get syntax highlighted :) (loop :for i :from ...)
[14:21:11] <kakuhen> oh i dont like that w
[14:21:13] <lotuseater> and you don't have to write the :DO clause multiple times
[14:21:22] <lotuseater> it's ok, do as you wish
[14:21:49] <kakuhen> oh but i didnt know about the latter part
[14:21:58] <lotuseater> when iterating over a vector you can use ACROSS
[14:22:34] <lotuseater> yes you could do also "do (progn ...)"
[14:22:57] <lotuseater> what does crc stand for?
[14:24:01] <hayley> Cyclic redundancy check
[14:24:04] <kakuhen> yeah that
[14:24:14] <kakuhen> I'm only writing this because FLAC is full of these things
[14:24:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:24:23] <kakuhen> and rather than working on rice partition stuff... i decided to do something easier
[14:24:51] <lotuseater> and when you know for sure your sequence is one of bytes you could type with (declare (type (simple-array (unsigned-byte 8) (*)) data))
[14:25:26] <lotuseater> cause sequence is very general, including vectors and lists
[14:25:40] <lotuseater> hayley: thx :)
[14:25:53] <kakuhen> yeah my intention is to use this with the vector of bytes outputted by read-sequence
[14:26:01] <kakuhen> but i dont mind allowing lists, too
[14:26:37] <lotuseater> hm yes but be specific if it helps :)
[14:27:33] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[14:28:43] <kakuhen> sure
[14:29:00] <kakuhen> that declaration only works for vectors with 8-bit unsigned-byte right?
[14:30:03] <lotuseater> and wouldn't be the polynomial representation the other way around? I'm just curious.
[14:30:13] <lotuseater> or wait no
[14:30:22] <kakuhen> idk i just copied wikipedia
[14:30:33] <kakuhen> it seems like they use the opposite notation I would for polynomials, you are right
[14:30:33] <lotuseater> no no it's alright
[14:30:49] <kakuhen> I would encode Σ a_i x^i as (a_1, a_2, ...)
[14:31:00] <kakuhen> but yeah, computers seem happier with the opposite
[14:31:07] <kakuhen> (and the polynomial being finite of course)
[14:31:12] <kakuhen> finite sum*
[14:31:13] <lotuseater> cause you specify a binary number, so the highest power is left, not right as with a vector
[14:31:30] <kakuhen> yeah
[14:31:47] <lotuseater> but good we talked about
[14:32:37] <kakuhen> and the (logand #xFF ...) part is me trying to mimick the behavior i found in someone's C implementation w
[14:32:44] <kakuhen> i saw someone cast to uint8_t and thought "ok i will do this too"
[14:32:52] <lotuseater> in which wiki article does it stand?
[14:33:44] <kakuhen> https://en.wikipedia.org/wiki/Computation_of_cyclic_redundancy_checks
[14:33:58] <lotuseater> yeah if you really need some mimicking any time you could use cffi
[14:34:34] <kakuhen> oh id rather use as little literal C code as possible :)
[14:34:52] <kakuhen> rather than rewriting C in Ru5t, I will rewrite it in Common Lisp, for better or worse...
[14:35:04] <kakuhen> if I can use FFI, then my mind tells me "ok just link against libFLAC and be done with this"
[14:35:15] <kakuhen> so I am forcing myself to use nothing but pure CL :)
[14:36:15] <kakuhen> ok i lied im actually going to use some wrappers for OpenAL to see if I can "portably" feed PCM samples to an output device
[14:36:20] <kakuhen> but that's it
[14:36:27] <lotuseater> with SBCL you can also do things for when C abstracts too much away :D
[14:37:28] <lotuseater> ah hm the pseudocode in the article uses indexing from 1
[14:39:10] <kakuhen> [1,n]\cap\mathbb{Z}\cong[0,n)\cap\mathbb{Z}
[14:39:36] <kakuhen> anyway, thanks for the feedback -- i changed my code accordingly
[14:40:40] <lotuseater> the "across" is sometimes quite useful, like "in" for iterating over lists
[14:41:14] <kakuhen> yeah i like being able to get the element directly if I can
[14:41:49] <lotuseater> so that provides it to you
[14:43:14] <lotuseater> and when you want to start a counter in parallel for which you don't know where it's end is you can do (loop for i from 0 for element across vector ...)
[14:43:28] <kakuhen> anyway, i am going to attempt sleeping "early" tonight... good night and thanks again for the help
[14:43:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:49:39] <dave0> nite all
[14:49:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:19:29] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:06:49] <hayley> https://www.youtube.com/watch?v=Ocxczi-CvRQ
[16:06:50] -ixelp- TLA+: Viewed from 40,000 Feet and Ground Level - YouTube
[16:11:27] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[16:12:26] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:12:32] <ck_> neat, mr LaTeX himself
[16:12:44] *** Joins: razzy (~razzy@user/razzy)
[16:13:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[16:14:10] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:16:13] <hayley> Of course there is a TLA+ → LaTeX pretty printer.
[16:17:04] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 250 seconds)
[16:17:23] *** Joins: razzy (razzy@user/razzy)
[16:28:20] *** Quits: razzy (razzy@user/razzy) (Ping timeout: 250 seconds)
[16:30:11] *** Joins: razzy (~razzy@user/razzy)
[16:34:09] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:39:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:44:06] <hayley> It is interesting that the attitude is that having better tools to think is better than having better tools to act, in a way. Which is true, if you have a better strategy, you can outperform any micro-optimised algorithm changes.
[16:44:49] <shka> one should never underestimate the power of thought 
[16:47:14] <hayley> So...it's not as if all the shit we like makes programming less complex (okay, it does when you have design patterns and language workarounds, but other than that), it's more that they make the complexity comprehensible. Is it really "complexity" then?
[16:50:05] <shka> hayley: my theory is that there is the inherent complexity, and then there is the tools overhead
[16:52:06] <hayley> What would you call modelling the "inherent complexity" in a way which makes it more reasonable?
[16:52:33] <hayley> I don't think there is a well defined "inherent" or "minimum".
[16:52:37] <shka> i am not sure actually
[16:54:05] <shka> however, working with azure APIs gave mi this impression
[16:54:38] <hayley> Like, in context of the video, this system I might design has N states. With a model, I may produce all the states from log(N) equations.
[17:21:27] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 240 seconds)
[17:23:35] *** Joins: razzy (~razzy@user/razzy)
[17:31:17] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[17:50:21] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[18:10:48] *** aeth_ is now known as aeth
[18:17:13] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[18:18:59] *** Joins: razzy (~razzy@user/razzy)
[18:32:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:36:19] <pl> Brooks talked about complexity inherent to the problem and accidental complexity 
[18:42:22] *** Joins: makomo (~makomo@user/makomo)
[18:55:51] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[18:57:11] <shka> pl: this makes sense to me
[18:57:17] <shka> somehow
[19:10:07] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 240 seconds)
[19:12:23] *** Joins: razzy (~razzy@user/razzy)
[19:22:39] <pl> shka: if you haven't yet, get a hold of second edition of Mythical Man-Month and read it ;-)
[19:22:55] <shka> i may just do that
[19:56:10] <aeth> I've noticed that Old Reddit now breaks every URL link with _ in it, turning the _ into \_ which is kept, directing people to the wrong (and probably invalid) web page
[19:56:39] <aeth> I guess the time is near, where Reddit is officially a dead website, since Old Reddit's just going to bitrot more and more because they want to shove more ads down your throat.
[19:57:10] <aeth> Not like the comment quality is even 10% of what it was in 2011, anyway...
[19:57:33] <aeth> This was bound to happen because different versions of Reddit have different Markdown parsers/renderers.
[19:57:58] <aeth> This is just the most broken of this sort of incompatibility so far.
[20:18:17] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 248 seconds)
[20:20:02] *** Joins: razzy (~razzy@user/razzy)
[20:54:28] *** Joins: ln43 (~ln43@user/ln43)
[20:56:32] <ln43> i was trying to use with sbcl save-lisp-and-die but with many threads it is not possible (and the sbcl manual page doesn't open too) ... 
[20:57:12] <ln43> ok maybe because i'm within the repl, so possibly from the command line should work
[20:57:33] <ln43> at least i hope so ... but again, not being able to open the docs it's a bit hard to immagine 
[20:57:56] <ln43> (the reason why it's not possible)
[21:00:17] <ln43> yes i was inside the swank repl ...
[21:01:27] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 250 seconds)
[21:03:18] *** Joins: razzy (~razzy@user/razzy)
[21:06:09] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:14:01] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 252 seconds)
[21:15:34] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[21:33:04] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:34:50] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[21:34:50] *** ChanServ sets mode: +o MichaelRaskin
[21:54:28] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:01:34] <gilberth> Good morning #lispcafe!
[22:02:35] <Gnuxie> hi gilberth 
[22:02:54] <ck_> hello there
[22:08:59] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[22:10:43] *** Quits: nihaal (~nihaal@122.164.143.87) (Quit: nihaal)
[22:16:59] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:20:19] *** Quits: razzy (~razzy@user/razzy) (Ping timeout: 250 seconds)
[22:22:41] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:34:37] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[22:35:04] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[22:37:17] <susam> Hello gilberth!
[22:38:20] <susam> I wonder what the average local time is in this channel. Guessing by the activity trends in this channel, I have a suspicion that the average local time may be evening here.
[22:45:03] <shka> well, the most active users in the channel are hayley which is australia, me (poland), gilberth (germany), aeth (america i think)
[22:45:31] <shka> so it only lack Asia for full global coverage :P
[22:46:25] <edgar-rft> I don't want to destroy your illusions but I'm on irc at totally random day- or nighttimes.
[22:47:52] <edgar-rft> I'm in germay, too, if that helps.
[22:48:09] <gilberth> My personal local time is shifted to somewhere around Greenland.
[22:48:39] <ck_> it all depends on whether we scale by bodyweight, number of characters typed, or something else
[22:49:50] <gilberth> Body weight? That would put me to a disadvantage. :(
[22:50:38] <ck_> don't worry, you'll win out at volume of text typed
[22:51:33] <edgar-rft> Let's make our favourite local time dependent on the color of our country :-)
[22:51:43] <ck_> it is now blue o'clock
[22:52:13] <gilberth> Countries have colour?
[22:53:40] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Ping timeout: 240 seconds)
[22:54:01] <edgar-rft> apparenty yes, gilberth's local time is greenland, ck_'s is blueland.
[22:54:23] <shka> can i have indigo?
[22:54:51] <edgar-rft> depends on how much you pay :-)
[22:55:12] <gilberth> edgar-rft: How much do you bid for indigo?
[22:56:21] <edgar-rft> gilberth: shka wanted to have indigo, not me
[22:57:16] <gilberth> edgar-rft: So which colour do you choose then?
[22:57:37] <edgar-rft> I'm a black-and-white person.
[22:57:54] <gilberth> That would mix to gray.
[22:58:05] <gilberth> Depressing.
[22:59:02] <edgar-rft> that's what the doctors say, too
[22:59:28] <gilberth> Then don't listen to the doctors.
[23:00:16] <edgar-rft> gilberth: you sound like a doctor, should I listen to you?
[23:01:01] *** Joins: razzy (razzy@user/razzy)
[23:01:56] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:01:56] <ck_> his calls for beige alert
[23:01:59] <ck_> this*
[23:03:02] <gilberth> edgar-rft: Tell me more about doctors.
[23:03:55] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:05:38] <edgar-rft> gilberth: gimme some seconds, will ask M-x doctor...
[23:06:49] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 248 seconds)
[23:07:21] <amirouche> https://github.com/kokizzu/list-of-tech-migrations#2005
[23:07:22] -ixelp- GitHub - kokizzu/list-of-tech-migrations: list of public tech migrations
[23:07:23] <amirouche> =(
[23:11:24] <edgar-rft> Reddit is full of shit, so Python is the only adequate programming language. Where's the problem?
[23:12:31] <ck_> at *red*dit
[23:16:18] <edgar-rft> Imagine you meet someone on the street: "You do Common Lisp? What's that? Ah, I know, Reddit is written in Common Lisp!" Maximum embarrassing. Would you really want that to happen?
[23:19:16] <ck_> meeting people on the street? no way
[23:20:13] <edgar-rft> wait, what's people, and what's a street?
[23:27:22] <ck_> exactly. now if you will excuse me, my wise men have discovered the secret of ALPHABET, I have to go build a granary
[23:27:23] <gilberth> People are entities which move around by using so called legs. They do that on streets and at times use sound waves for communication.
[23:31:08] *** Joins: razzy_ (razzy@user/razzy)
[23:34:07] *** Quits: razzy (razzy@user/razzy) (Ping timeout: 240 seconds)
[23:35:00] <edgar-rft> gilberth: that sounds strange, is that so in the world where you live?
[23:35:55] <gilberth> edgar-rft: I don't live at that kind of place.
[23:44:07] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[23:46:22] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:51:04] <edgar-rft> gilberth: do you live at a setf-able place?
[23:57:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
