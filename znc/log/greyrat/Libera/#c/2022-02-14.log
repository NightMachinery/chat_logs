[00:00:40] *** Quits: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com) (Ping timeout: 256 seconds)
[00:01:42] *** Quits: Beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.4)
[00:02:45] <pragma-> nightstrike: ,defaultarguments
[00:02:46] <candide> nightstrike: { void f(int x, int y /* default 42 */, char *z /* default "foo" */) { printf("[%d, %d, %s]\n", x, y, z); } #define F1(...) f(__VA_ARGS__, 42, "foo")\n #define F2(...) f(__VA_ARGS__, "foo")\n #define F3(...) f(__VA_ARGS__)\n #define FX(_1, _2, _3, n, ...) n\n #define f(...) FX(__VA_ARGS__, F3(__VA_ARGS__), F2(__VA_ARGS__), F1(__VA_ARGS__), 0)\n f(2); f(4, 8); f(16, 32, "bar"); }
[00:02:50] *** Quits: pulsar12 (~quassel@a95-92-49-154.cpe.netcabo.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:07:20] *** Joins: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com)
[00:10:40] *** Joins: shailangsa_ (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[00:11:39] *** Joins: crashrep (~crashrep@user/crashrep)
[00:13:26] <newpy> fizzie, ty it was a case/caps issue
[00:14:34] *** Joins: Beastie (~lcu@user/thebeastie)
[00:14:37] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[00:16:23] *** Quits: magla (~gelignite@d536720f.access.ecotel.net) (Quit: Stay safe!)
[00:19:46] *** Joins: Fairy (~Fairy@2001:464a:4992:0:6111:c808:a47f:41)
[00:21:53] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:6111:c808:a47f:41) (Ping timeout: 250 seconds)
[00:22:11] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[00:22:39] *** Quits: cosimone (~user@93-34-133-235.ip49.fastwebnet.it) (Read error: Connection reset by peer)
[00:22:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:23:13] <nightstrike> That's some fun macro magic
[00:24:01] *** Joins: jellie (~luv_panda@user/jellie)
[00:25:10] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:25:33] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[00:26:20] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[00:28:33] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[00:28:50] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 272 seconds)
[00:29:02] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:29:21] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[00:32:28] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:36:57] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[00:40:32] <Dean> hey
[00:40:49] <ChoHag> Hay is for horses.
[00:42:18] <Dean> Hello ChoHag!
[00:42:30] <ChoHag> Hey.
[00:42:59] <tusko> How can I find the return value of open() when a file fails to open I tried man open
[00:43:14] <ChoHag> Assign it to something.
[00:43:24] <ChoHag> ret = open(...);
[00:45:01] <Dean> I am very new to C. Can I use C for the backend of a website? LIke with html/css/javascript?
[00:45:18] <ChoHag> That is possible.
[00:45:31] <Amun-Ra> possible, highly not recommended
[00:45:47] <Dean> What kind of programs would I write with C if not websites?
[00:46:01] <ChoHag> Kernels, virtual machines, compilers, filters.
[00:46:02] <Dean> Like having C run on the server is not a good idea? Why? What is better?
[00:46:10] <ChoHag> Things which really care about their memory.
[00:46:26] <Amun-Ra> embedded stuff
[00:47:01] *** Quits: shailangsa_ (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[00:47:02] <ChoHag> It's not C on the server that's the problem, it's C in the IDE.
[00:47:12] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[00:47:36] <ChoHag> It's not the right language for that sort of processing. It concerns itself with mostly machine-dependent issues.
[00:48:09] <ChoHag> Development would be a constant case of handling concerns irrelevant to websites.
[00:50:16] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 268 seconds)
[00:50:48] <Dean> ChoHag thank you. In order to become a good C developer, apart from learning the language, what else should I have knowledge of?
[00:51:26] <Amun-Ra> the holy standard
[00:51:36] <ChoHag> Dean: Everything is pointers.
[00:52:02] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[00:52:08] <Amun-Ra> ChoHag: everything is an object
[00:52:42] <Amun-Ra> or a pointer
[00:52:42] <ChoHag> Only on RISC.
[00:52:50] <Amun-Ra> no, in C standrad
[00:53:06] <ChoHag> Dean: Never mind him. Everything is a pointer.
[00:53:16] <ChoHag> He's right but that's not important.
[00:53:32] <ChoHag> It will be but not now.
[00:53:33] <Amun-Ra> Dean: check /topic for books
[00:55:14] <ChoHag> Dean: Learn unix.
[00:55:30] <Amun-Ra> oh come on
[00:55:32] <ChoHag> C was designed to make everything else emulate a PDP-11 so that they could run unix.
[00:55:48] <ChoHag> FSVO designed.
[00:55:57] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.101) (Ping timeout: 256 seconds)
[00:56:00] <ChoHag> Or was it a PDP-7?
[00:56:34] <ChoHag> Anyway snark aside C works everywhere but it's *for* unix. It's a much better learning environment even if you don't program in it.
[00:57:09] <ChoHag> Learn unix, read the C and posix standards, code until the compiler shuts up.
[00:57:10] <Amun-Ra> I'd say linux is much better dev env for programming than unix nowadays
[00:57:12] <Dean> ChoHag is unix like linux?
[00:57:24] <ChoHag> Linux is beginner's unix.
[00:57:29] <Amun-Ra> let's just stay in the middle and say posix
[00:57:47] <ChoHag> Dive in at the deep end. Go BSD.
[00:57:48] <Dean> Which flavor of Linux would you recommend?
[00:58:38] <ChoHag> If you want the hardcore experience go with openbsd otherwise freebsd is nicer to noobs. Linux, just grab whatever's the flavour of the month.
[00:59:04] <Dean> I'm a super noob. Like barely literate.
[00:59:50] <ChoHag> Well I tend to start games on hard mode, or nightmare mode if they have it, so I'd recommend openbsd.
[00:59:54] <ChoHag> But YMMV.
[00:59:56] <Amun-Ra> Dean: if you're a newbie go linux or freebsd (the only bsd worth of a look tbh)
[01:00:15] <ChoHag> They do have excellent documentation for C programmers.
[01:00:23] <Dean> ChoHag like 'The Evil Within'?
[01:00:34] <Dean> Thank you Amun-Ra and ChoHag. Your answers guide me.
[01:01:25] <ChoHag> Dean: The default openbsd (not sure about the other BSDs) includes a fully working C environment by default.
[01:01:41] <ChoHag> You can install then login and cc foo.c && ./a.out from the bat.
[01:01:46] <Amun-Ra> Dean: pick any linux distro for new users and any of the books mentioned in the /topic; don't go bsd for starters
[01:02:16] <Dean> Ok, thank you.
[01:02:21] <Amun-Ra> Dean: you can (and will) switch later
[01:02:37] <ChoHag> Bugger that. Dive in at the deep end.
[01:02:50] <Dean> What kind of job would I be looking for if I was a C programmer?
[01:03:29] <Dean> ChoHag go hard or go home kinda user.
[01:04:06] <pragma-> if you really were a go hard or go home user you would be googling and reading docs and learning waht you need to know instaed of asking inane questions
[01:04:37] <ChoHag> pragma-: Chill. If you were that hardcore you wouldn't know what a google is.
[01:04:42] <Dean> I said ChoHag is a go hard or go home kinda user.
[01:04:48] <pragma-> oh
[01:04:51] <ChoHag> (Upstarts is what they are)
[01:05:29] <ChoHag> Dean: He's right though.
[01:05:40] <ChoHag> Open a text editor and start hacking out code, or go home.
[01:05:47] <tusko> Is there a lower level call than fgets()?
[01:05:53] <Dean> about that lol.
[01:05:55] <tusko> that takes a file descriptor
[01:06:25] <pragma-> tusko: read() but it doesn't have fgets semantics.
[01:06:48] <ChoHag> Dean: I keep a file /tmp/wtf.c and whenever I need to recall how C does something I can do a quick 'cc /tmp/wtf.c && ./a.out'.
[01:06:55] <tusko> maybe I want gets()
[01:06:59] <ChoHag> Might help you avoid struggling with makefiles for a while.
[01:07:26] <ChoHag> Or keep it in your current directory or whatever.
[01:07:51] <Dean> ChoHag is that a custom file you made? I keep a sandpit folder... my code is pretty trivial atm.
[01:07:57] <ChoHag> Point is, iterate over code quickly. Write it, run it, see what it does, rinse & repeat.
[01:08:19] <pragma-> It's really incredibly stupid that glibc/gcc keep gets() around so old programs still compile. I mean, what? It's insecure and broken! "But the old programs! Won't somebody please think of them?" What about the security of my current system?
[01:08:35] <ChoHag> Dean: No. /tmp is the system's temporary directory. wtf.c is a name I picked. a.out is the default output filename from the C compiler.
[01:08:59] <Dean> So you put your own custom snippets in your wtf.c file. Got it.
[01:09:24] <ChoHag> Yes. #include a bunch of things, define some vars and write a main.
[01:09:49] <Dean> That's what I do in my sandpit file. I'm still proud that I can write mergesort from heart now. LOL
[01:09:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:09:52] <ChoHag> Get your hello world greeting all and sundry and then go from there.
[01:10:28] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[01:13:06] <ChoHag> code
[01:13:10] <ChoHag> Oops.
[01:13:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ed4e:5979:adfa:bb7b) (Ping timeout: 240 seconds)
[01:14:05] *** Quits: mahmutov (~mahmutov@5.176.8.28) (Ping timeout: 256 seconds)
[01:14:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[01:15:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:16:55] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[01:20:00] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[01:20:47] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:20:49] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[01:23:56] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Client Quit)
[01:24:09] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:24:17] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[01:24:34] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[01:26:15] *** Quits: Dean (~Dean@165-73-119-36.ip.afrihost.capetown) (Changing host)
[01:26:15] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[01:26:32] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:27:13] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:27:44] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[01:30:58] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[01:31:45] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[01:34:38] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[01:35:44] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:38:36] *** Joins: LangerJan (~jan@user/langerjan)
[01:40:18] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[01:43:55] *** Quits: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com) (Quit: The true sign of intelligence is not knowledge but imagination.)
[01:44:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:6b1f:6eca:5f0f:4111) (Ping timeout: 240 seconds)
[01:45:11] *** Joins: zwr (~zwr@2804:d45:b966:fb00:768b:56a2:a787:5841)
[01:46:08] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933)
[01:47:11] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[01:48:34] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Ping timeout: 250 seconds)
[01:48:51] *** Joins: Torr (~Torr@user/torr)
[01:49:26] *** Quits: Akuli (~Akuli@82-203-160-67.bb.dnainternet.fi) (Quit: Akuli)
[01:49:40] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[01:51:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[01:54:09] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au)
[01:54:19] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[01:57:22] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[02:00:07] *** Quits: Torr (~Torr@user/torr) ()
[02:00:18] *** Joins: Torr (~Torr@user/torr)
[02:03:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:04:08] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Quit: Lost terminal)
[02:04:22] <Amun-Ra> pragma-: C programming is already pretty go hard option
[02:05:01] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:08:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:08:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:08:52] *** Joins: wroathe (~wroathe@user/wroathe)
[02:09:02] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[02:15:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[02:16:24] *** Joins: Rynn (~rynn@216.30.158.198)
[02:18:08] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:20:51] *** Joins: bebyx (~Thunderbi@user/bebyx)
[02:21:28] *** Joins: seninha (~seninha@user/seninha)
[02:21:46] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:23:13] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:24:44] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.104)
[02:25:32] *** Quits: dsrt^ (~dsrt@50.235.176.163) (Remote host closed the connection)
[02:27:59] *** Joins: dsrt^ (~dsrt@50.235.176.163)
[02:28:27] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[02:29:01] *** Joins: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8)
[02:29:08] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.104) (Ping timeout: 256 seconds)
[02:30:12] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[02:30:31] <tusko> When opening a file with open() is there a way to prevent writing past the beginning or end of the file?
[02:31:32] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.101)
[02:32:31] *** Joins: malloy (~jimery@116.30.220.175)
[02:33:22] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[02:33:41] *** Joins: pizdets (~pizdets@183.182.111.175)
[02:33:52] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:33:53] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[02:34:14] *** Quits: pizdets_ (~pizdets@183.182.115.101) (Ping timeout: 272 seconds)
[02:35:42] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:36:59] *** Quits: Beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.4)
[02:37:48] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[02:38:15] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[02:38:31] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.101) (Ping timeout: 256 seconds)
[02:39:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[02:39:28] *** Joins: mad_enz (~mad_enz@192-0-176-69.cpe.teksavvy.com)
[02:40:32] *** Joins: Beastie (~lcu@user/thebeastie)
[02:41:28] *** Joins: wroathe (~wroathe@user/wroathe)
[02:42:26] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.104)
[02:43:08] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[02:48:09] *** Quits: Torr (~Torr@user/torr) ()
[02:49:32] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.104) (Ping timeout: 256 seconds)
[02:50:42] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 272 seconds)
[02:52:07] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[02:54:12] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[02:56:46] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[02:57:25] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:58:50] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:01:05] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933)
[03:05:23] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Read error: Connection reset by peer)
[03:05:49] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:06:16] *** Joins: test_ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[03:06:28] *** Joins: pulse_ (~pulse@user/pulse)
[03:06:30] *** Quits: newpy (~newpy@206.168.231.90) (Remote host closed the connection)
[03:06:32] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 272 seconds)
[03:06:48] *** Joins: newpy (~newpy@206.168.231.90)
[03:07:27] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:07:43] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:09:22] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 256 seconds)
[03:09:22] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[03:09:31] *** Joins: LangerJan (~jan@user/langerjan)
[03:09:41] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[03:10:01] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (Ping timeout: 250 seconds)
[03:10:01] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Ping timeout: 250 seconds)
[03:10:01] *** Quits: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b) (Ping timeout: 250 seconds)
[03:10:01] *** Quits: NRK (~nrkmatrix@2001:470:69fc:105::4e30) (Ping timeout: 250 seconds)
[03:10:01] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 250 seconds)
[03:10:01] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (Ping timeout: 250 seconds)
[03:10:01] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Ping timeout: 250 seconds)
[03:10:01] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Ping timeout: 250 seconds)
[03:10:20] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[03:10:25] *** pulse_ is now known as pulse
[03:15:10] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[03:16:44] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[03:17:22] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[03:17:56] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[03:18:31] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[03:18:58] *** Joins: psydroid (~psydroid@user/psydroid)
[03:21:43] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[03:24:07] *** Joins: Al-Khwarizmi (~Al-Khwari@d72-38-18-130.commercial1.cgocable.net)
[03:24:11] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Client Quit)
[03:24:25] <Al-Khwarizmi> What is the difference between a language 'binding' and a library?
[03:24:40] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Ping timeout: 256 seconds)
[03:24:55] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[03:25:01] *** Joins: Roman[m] (~wrongt@2001:470:69fc:105::341e)
[03:25:01] *** Joins: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b)
[03:25:03] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[03:25:03] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[03:25:18] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[03:25:55] *** Quits: wovixo (~wovixo@144.92.194.67) (Read error: Connection reset by peer)
[03:26:18] *** Joins: wovixo (~wovixo@144.92.194.67)
[03:27:50] *** Joins: NRK (~nrkmatrix@2001:470:69fc:105::4e30)
[03:30:07] *** Quits: edk (edk@libera/staff/edk) (Read error: Connection reset by peer)
[03:30:19] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:27] *** Joins: oxfuxxx (~oxfuxxx@131.255.4.84)
[03:30:44] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:51] *** Joins: edk (edk@libera/staff/edk)
[03:33:12] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:34:52] *** Quits: oxfuxxx (~oxfuxxx@131.255.4.84) (Ping timeout: 256 seconds)
[03:35:42] <perro_> bindings wrap a lib to make it available in another
[03:36:47] <perro_> ...langugage
[03:37:32] <Al-Khwarizmi> ah, thanks.
[03:37:36] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:38:12] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[03:38:26] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[03:40:06] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Quit: Leaving)
[03:40:55] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-98-119.mobile.abo.orange.fr)
[03:41:00] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[03:41:48] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:44:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:45:38] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-98-119.mobile.abo.orange.fr) (Ping timeout: 256 seconds)
[03:45:51] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[03:48:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[03:53:42] *** Quits: AmR (~AmREiSa@102.44.191.232) (Quit: Konversation terminated!)
[03:54:54] *** Quits: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:7485:8b77:1db6:876e) (Quit: Leaving)
[03:55:18] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:56:53] *** Joins: Wulf (~Wulf@user/wulf)
[03:58:27] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:59:19] *** Joins: quartz (~user_name@user/quartz)
[04:04:53] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[04:05:07] *** Joins: ferdna (~ferdna@user/ferdna)
[04:05:08] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[04:10:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:14:02] *** Joins: Soni (~quassel@autistic.space)
[04:14:32] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[04:14:33] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[04:14:42] <quartz> Hello. I'm trying to iterate through an array of ints by using pointers only. A seperate function takes the parameters: void sort_integer_array(int *begin, int *end, int ascending). I have a basic sort function set up here, but I"m not sure how to implement it properly using int *begin, int *end
[04:14:50] <quartz> https://www.godbolt.org/z/Mr8joea63
[04:16:29] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Read error: Connection reset by peer)
[04:17:12] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[04:17:40] <fizzie> If you want to reduce it to the already solved case, just do `ptrdiff_t n = end - begin;` to get the length, and then use `begin[i]` in place of `a[i]`.
[04:20:24] <quartz> Ahhh
[04:20:24] *** Quits: mad_enz (~mad_enz@192-0-176-69.cpe.teksavvy.com) (Read error: Connection reset by peer)
[04:20:57] <quartz> fizzie: But what would I pass into the sort_integer_array ?
[04:21:00] <quartz> For begin, end
[04:21:09] *** Joins: kingfightboy (~kingfight@218.23.109.195)
[04:22:23] <fizzie> `arr` for begin, `arr + 5` for end.
[04:22:41] <fizzie> Or `arr + sizeof arr / sizeof *arr` or something else equivalent.
[04:22:41] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[04:22:55] *** Joins: de-facto (~de-facto@user/de-facto)
[04:23:14] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[04:24:13] <fizzie> (At least that's the usual convention, where the `end` is pointing to just past the end of the range of interest.)
[04:25:44] <quartz> Right
[04:26:12] *** Joins: jkotra_ (~jkotra@117.98.194.182)
[04:26:31] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[04:26:44] *** Quits: jkotra (~jkotra@223.230.127.157) (Ping timeout: 250 seconds)
[04:26:44] *** jkotra_ is now known as jkotra
[04:26:55] *** Joins: System_Error (~SystemErr@user/systemerror)
[04:28:20] <quartz> I'm sorry fizze but I must have done something wrong, because the output is incorrect: https://www.godbolt.org/z/Ehvjd9Gx3
[04:29:19] *** Joins: Charadon (~Charadon@155.138.164.183)
[04:29:30] <quartz> Ohhh my bad
[04:30:07] <quartz> I thought I could print the entire array using printf("%d", arr);
[04:30:35] *** Parts: kingfightboy (~kingfight@218.23.109.195) (Leaving)
[04:33:09] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[04:35:45] <quartz> fizzie: Sorry bro, the sorting function does not work and I can't figure out why: https://www.godbolt.org/z/n3s9fGWG6
[04:37:25] <fizzie> You're printing `i`, not `arr[i]`.
[04:37:38] <fizzie> (That's why there's a 0 in the output in the first place.)
[04:37:46] <tusko> will lseek() accept a negative offset?
[04:38:08] *** Quits: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8) (Quit: Leaving)
[04:38:08] <quartz> LOL
[04:38:10] <quartz> omg
[04:39:43] <quartz> fizzie: Thanks
[04:42:03] <fizzie> tusko: You can usefully use a negative offset with the SEEK_CUR / SEEK_END anchors, but you can't generally seek to the region before the start of a file, no. (POSIX for example requires lseek to return EINVAL if "the resulting file offset would be negative for a regular file, block special file, or directory".)
[04:43:02] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[04:47:40] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ed4e:5979:adfa:bb7b)
[04:48:12] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[04:50:14] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-2907-a733-67e3-11b3.fixed6.kpn.net)
[04:50:33] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[04:51:01] *** Joins: System_Error (~SystemErr@user/systemerror)
[04:51:41] *** Quits: foul_owl (~kerry@174-21-76-71.tukw.qwest.net) (Ping timeout: 256 seconds)
[04:53:37] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[04:54:17] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-2907-a733-67e3-11b3.fixed6.kpn.net) (Ping timeout: 240 seconds)
[04:55:39] <tusko> Ok, cool that makes perfect sense
[04:56:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:57:21] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[05:01:22] *** Joins: Guest11 (~Guest11@pool-100-16-120-209.bltmmd.fios.verizon.net)
[05:01:40] <Guest11> I have two files called x.c and y.c, each have their own respective x.h and y.h
[05:01:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:01:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:01:50] *** Joins: wroathe (~wroathe@user/wroathe)
[05:02:03] <Guest11> y.h includes a typedef struct y
[05:02:40] <Guest11> and I want to reference the typedef struct y in x.h, but if i #include "y.h" in x.h, it complains i'm redefining everything
[05:02:47] <Guest11> what do I do?
[05:03:50] *** Quits: quartz (~user_name@user/quartz) (Quit: WeeChat 3.4)
[05:04:09] *** Joins: drbeco (~beco@2804:351c:dd01:6600:e4a2:7a5d:e23f:1fd8)
[05:05:30] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[05:05:31] *** Joins: magic_ninja (~sparkie1@ip24-255-216-15.ks.ks.cox.net)
[05:05:43] <fizzie> With proper use of header guards (#ifndef FOO_H_ / #define FOO_H_ / #endif) and only putting non-definition declarations in headers, there shouldn't usually be any problems of that nature even when including headers from other headers. I don't think you can get much more precise than that without actually seeing the code and the complaints.
[05:06:21] *** Joins: foul_owl (~kerry@94.140.8.89)
[05:08:23] <Guest11> fizzie, I'm not sure how that would work
[05:08:39] <Guest11> I might be able to write up something similar
[05:08:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:09:38] *** Quits: absentia (~absentia@user/absentia) (Quit: WeeChat 3.4)
[05:11:28] <Guest11> https://pastebin.com/XEpgXTZd
[05:12:01] <Guest11> I also have x.c that includes x.h and y.c that includes y.h
[05:13:39] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:14:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:14:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:14:52] *** Joins: wroathe (~wroathe@user/wroathe)
[05:14:57] *** Joins: Viewday113 (~Viewday@user/viewday)
[05:15:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:16:25] <fizzie> Well, *that* specific arrangement is pretty impossible. You need to have both typedefs `x` and `y` in scope before both the declaration of `char blahx2(x *, y *);` in x.h and `char blahy2(y *, x *);` in y.h. You'll need some sort of a rearrangement: just using a single header (if they're really that tightly coupled), or giving the structs tags so that the other file can do a `typedef struct x x;`
[05:16:27] <fizzie> without defining the struct contents (leaving it an incomplete type).
[05:16:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:16:53] *** Viewday113 is now known as Viewday11
[05:17:55] <fizzie> I guess it's just borderline possible you could make x.h + y.h work by having header guards in place, and having x.h #include y.h *and* y.h #include x.h *between* the typedef and the function declarations, so that in effect including either will get first the typedefs and then the functions. But that'd be pretty bizarre.
[05:18:16] *** Quits: magic_ninja (~sparkie1@ip24-255-216-15.ks.ks.cox.net) (Ping timeout: 272 seconds)
[05:18:32] <Guest11> I'd prefer not to use a single header file
[05:19:22] <Guest11> so I could do a "if not include" then "include" in both files?
[05:20:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[05:20:19] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[05:22:25] <fizzie> Well, the problem is, at least the way you've written those examples, you can't have *either* header come first.
[05:22:50] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:23:37] *** Joins: Rynn (~rynn@216.30.158.198)
[05:24:17] <fizzie> Because if x.h is included first, then `typedef ... y;` will not be in scope for the `char blahx2(x *, y *);` declaration, but if y.h is included first, then `typedef ... x;` will not be in scope for the `char blahy2(y *, x *);` declaration.
[05:24:35] <Guest11> i tried just doing an extern struct
[05:24:37] <Guest11> and that didn't work
[05:24:56] <fizzie> I'm not sure what "an extern struct" would be.
[05:25:26] <Guest11> i tried claiming in x.h that y was an extern struct and just ignore what it actually was
[05:25:41] <Guest11> but that might be problematic
[05:25:50] <Guest11> alright, i'll just combine the header files
[05:26:03] <Guest11> lemme try that and see what happens
[05:26:12] <caze> Guest11: You could have a pointer to the struct.
[05:26:23] <Guest11> i did have a pointer to the struct
[05:26:25] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[05:26:31] <caze> Then what's the problem?
[05:26:43] <fizzie> These are structs with no tags for them. Just a `typedef struct { ... } x;` and so on.
[05:27:08] <fizzie> You can't have a `x *` without the typedef.
[05:27:15] <Guest11> if i put an '#include "y.h"' in x.h, it complains I'm re-defining everything
[05:27:32] <Guest11> if i don't, it complains that it doesn't know what 'y *' means
[05:29:43] <caze> Myabe what you need is a third header file.
[05:30:04] <Guest11> well, as fizzie pointed out, I could combine x.h and y.h into a single header file
[05:30:08] <Guest11> and that would fix the problem
[05:30:27] <Guest11> it's not the solution i like, but it's the solution that will likely work
[05:30:34] <Guest11> gimme a few minutes and i'll try it
[05:30:38] <fizzie> You can also have a third header with just the types, and have both x.h and y.h include that, if you didn't like the idea of not having x.h and y.h.
[05:30:44] <caze> Or you could keep them separate, and just have the struct typedefs in a third file that's included in both.
[05:31:03] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Ping timeout: 256 seconds)
[05:31:08] <Guest11> caze, if i'm going to go with 3 files, i might as well just do 1
[05:32:18] <fizzie> I suspect (though can't be quite sure) the "complains I'm re-defining everything" bit is about a case where you include both y.h and x.h (and therefore end up getting y.h twice if x.h includes it), which would be "fixable" with header guards (since that will just skip y.h the second time it's being included), but the pasted example has more problems than that.
[05:33:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:33:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:33:15] *** Joins: wroathe (~wroathe@user/wroathe)
[05:35:03] *** Dsee4 is now known as DSee
[05:35:58] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[05:35:59] <Guest11> i'm getting a bunch of errors now, but I think I resolved that issue...
[05:35:59] <SamuelMarks> hi
[05:36:04] <fizzie> For the pasted case, https://0x0.st/o8on.txt would *technically* work, but it'd be a really bizarre way of wiring things up, and sounds quite likely the real situation isn't exactly that anyway.
[05:36:35] *** Parts: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) ()
[05:36:43] <Guest11> fizzie, okay, that makes sense... ugly but makes sense
[05:37:11] <Guest11> let me work on de-erroring
[05:37:25] *** Joins: vysn (~vysn@user/vysn)
[05:38:11] <caze> Guest11: Why do you want them to be in separate files in the first place?
[05:38:44] <Guest11> caze, let me try to explain... I am writing code to interface to certain sensors
[05:38:59] <Guest11> i have one .c and one .h file for each sensor
[05:39:00] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-c0be-54b3-db2c-85e9.res6.spectrum.com) (Remote host closed the connection)
[05:39:08] *** Joins: Charadon (~Charadon@155.138.164.183)
[05:39:11] <Guest11> each sensor has a structure associated with it
[05:39:22] <Guest11> but one sensor needs data off a different sensor
[05:39:45] <Guest11> so it needs to read into the structure associated with the other sensor
[05:40:27] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:40:32] <Guest11> the other way to do it would be to have the calling function pass just some of the data rather than the structure
[05:40:45] <caze> Guest11: Have you thought of getting rid of the typedef?
[05:41:06] <Guest11> getting rid of it and replacing it with what
[05:41:12] <caze> Just the struct.
[05:41:55] <Guest11> i mean i could have everything as a global but that's ugly
[05:42:10] <Guest11> if it;s not a global how would i pass a pointer to the structure
[05:42:15] <Guest11> if it's not typedefed
[05:42:24] <SamuelMarks> starting to mess with measuring how much malloc allocates (with `_msize` or `malloc_usable_size`)
[05:42:26] <caze> That's orthogonal to have the typedef.
[05:42:26] <fizzie> No, as in... if you have a `struct foo { ...; };`, then any other file can just have a declaration like `struct foo;` and use `struct foo *` to declare a pointer to it.
[05:43:03] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[05:43:53] <Guest11> if struct foo is defined in y.h, how would the compiler know what struct foo * means in x.h
[05:44:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:44:13] <caze> Guest11: It doesn't need to know.
[05:44:23] <caze> Guest11: Only the function definition needs to know.
[05:44:35] <caze> Guest11: Your main program that calls the function does not need to know.
[05:44:38] *** Quits: Dotz0cat (~Dotz0cat@h77.175.40.162.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[05:44:42] <caze> Guest11: https://ideone.com/xGTvdN
[05:45:06] <fizzie> You're allowed to have a pointer to an incomplete type.
[05:45:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:45:26] <caze> Guest11: The struct definition on lines 13-17 is not visible to the main function. Yet main is able to call the alloc function, and store its return value into a struct mystruct pointer.
[05:46:49] <caze> Guest11: All that is required is the incomplete definition on line 4. "struct mystruct;"
[05:47:03] <fizzie> And if your x.c file needs access to the struct's actual definition (to refer to fields in it, for example), it can #include both x.h and y.h.
[05:47:07] *** Joins: Dotz0cat (~Dotz0cat@173.186.192.244)
[05:47:39] *** Joins: magic_ninja (~sparkie1@ip24-255-209-102.ks.ks.cox.net)
[05:48:21] <Guest11> ok, i'm getting confused... I am okay with a single header file and it seems to have fixed the problem, let me work on getting it to compile
[05:49:09] <caze> Guest11: If you have the time, it is worth spending the effort to understand what I wrote and what fizzie and I have talked about, because this is typically the way things like this are done in C.
[05:49:21] <Guest11> ok
[05:49:25] <Guest11> give me a few minutes
[05:49:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[05:50:31] <caze> In fact, I'll add some comments to that paste.
[05:52:50] *** Joins: Torr (~Torr@user/torr)
[05:52:58] <Guest11> thanks
[05:54:09] <caze> Guest11: By structuring the file the way I did (namely putting the things I did below the main function), I've effectively hidden them from main. They are effectively, in a separate file, as notated in the comments.
[05:54:20] *** Parts: Al-Khwarizmi (~Al-Khwari@d72-38-18-130.commercial1.cgocable.net) ()
[05:56:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[05:57:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:57:47] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[05:59:59] *** Joins: kurahaupo (~martin@115.69.27.211)
[06:01:29] <Guest11> ok, it compiles now
[06:03:02] <Guest11> ok, looking at your code
[06:03:13] <Guest11> i'm not sure what alloc() does, I've never heard of it.
[06:04:11] <Guest11> i might need some better explanation of this... it seems kind of C++ like, like you're making a constructor.
[06:04:16] *** Joins: gry (~quassel@botters/gry)
[06:04:34] *** Joins: Viewday111 (~Viewday@user/viewday)
[06:05:43] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:06:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:06:11] *** Viewday111 is now known as Viewday11
[06:06:53] *** Joins: nitrix (~nitrix@user/nitrix)
[06:08:05] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Remote host closed the connection)
[06:08:18] *** Quits: magic_ninja (~sparkie1@ip24-255-209-102.ks.ks.cox.net) (Ping timeout: 272 seconds)
[06:08:43] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[06:09:55] <tusko> ugh I have this gross bug
[06:10:19] <tusko> Is there some reason repeatedly using fgets to grab the line from stdin to the same buffer should cause a segfault?
[06:10:53] <caze> Guest11: alloc is a function that I made, it is defined on lines 23-25.
[06:11:42] <Guest11> caze, ok, so you call alloc to malloc the memory for the structure and pass back a pointer to the structure?
[06:12:02] <caze> Guest11: Yes. I can't call malloc directly from main.
[06:12:26] <caze> Guest11: Do you know why?
[06:12:34] <Guest11> no, why?
[06:12:46] <caze> Guest11: What size would I tell malloc to allocate?
[06:13:36] <Guest11> ahh, i see
[06:13:52] <caze> The struct definition hasn't been seen yet, so sizeof won't work.
[06:13:58] <Guest11> since mystruct is defined in mystruct.c main.c is ignorant of it
[06:14:19] <caze> Yes. main.c also does not know the names of any of the members a, b, or c.
[06:14:22] <caze> Or their types.
[06:14:53] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:15:16] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:15:25] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:a77a:575:562:5f94:3a18)
[06:15:38] <scaramanga> tusko, have you tried valgrind?
[06:16:19] <scaramanga> i can assure you that it is possible to repeatedly fgets in to the same buffer safely
[06:17:17] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[06:18:43] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:19:58] <tusko> I don't even know what valgrind is
[06:20:14] <tusko> scaramanga, will you help me?
[06:20:20] <tusko> its a very simple program really
[06:23:19] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[06:23:30] *** Joins: magic_ninja (~sparkie1@162-202-44-35.lightspeed.tpkaks.sbcglobal.net)
[06:23:33] <scaramanga> just run: valgrind program args..
[06:23:41] <scaramanga> it will tell you what's going wrong
[06:25:33] *** Joins: Rynn (~rynn@216.30.158.198)
[06:27:19] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-5c4e-92cc-80de-49d9.res6.spectrum.com)
[06:29:25] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:30:11] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:31:02] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:395a:706a:3029:1fc6)
[06:31:06] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) (Ping timeout: 272 seconds)
[06:31:26] *** Joins: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net)
[06:32:48] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:33:38] *** Joins: myusername (~myusernam@user/myusername)
[06:33:54] <caze> tusko: You're doing it wrong.
[06:33:56] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:33:56] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:07] <tusko> oh
[06:34:31] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[06:34:49] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 256 seconds)
[06:35:10] <tusko> woah
[06:36:23] <tusko> am I allowed to be doing this?
[06:38:18] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[06:39:46] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[06:40:51] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-5c4e-92cc-80de-49d9.res6.spectrum.com) (Remote host closed the connection)
[06:41:48] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[06:42:24] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[06:43:30] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:44:42] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:45:32] *** dansan_ is now known as dansan
[06:47:06] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:47:28] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[06:50:28] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:52:19] <caze> tusko: What you are attempting to do and what you are currently doing are two different things.
[06:53:03] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:53:46] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:53:48] <tusko> Ok, what do you mean?
[06:54:26] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:13] <caze> Just what I wrote.
[06:55:52] <caze> What you described you are trying to do is fine. If you're getting a segfault, then you're either not doing what you've described, or your problem is somewhere else.
[06:56:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[06:57:05] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 250 seconds)
[06:58:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[06:58:36] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[06:58:52] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[07:00:52] *** Joins: malloy (~jimery@116.30.220.175)
[07:01:39] *** Quits: gry (~quassel@botters/gry) (Quit: Ð¿Ð¾ÐºÐ°)
[07:03:15] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[07:03:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:03:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:03:54] *** Joins: wroathe (~wroathe@user/wroathe)
[07:03:57] *** Joins: gry (~quassel@botters/gry)
[07:04:49] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[07:05:54] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[07:07:26] *** Joins: Azem (~haise01@user/haise01)
[07:08:03] <tusko> Valgrind is telling me its an invalid write of size 1
[07:08:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[07:09:00] <caze> Do you know what that means?
[07:09:06] <tusko> I don't
[07:09:23] <tusko> I'm thinking perhaps I need to reset the buffer somehow. Maybe it has a cursor that is overflowing
[07:09:35] <caze> Well you'd better find out.
[07:10:31] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:11:16] *** Joins: nitrix (~nitrix@user/nitrix)
[07:11:59] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:12:03] <SamuelMarks> hi
[07:12:46] *** Joins: drin (~Geezabisc@user/geezabiscuit)
[07:13:07] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 250 seconds)
[07:13:38] <SamuelMarks> Trying to debug my `realloc`, why would `malloc_usable_size`/`malloc_size` give 0 after the `realloc` and `_msize` (MSVC) crash after `realloc`? - What am I doing wrong? - https://gist.github.com/SamuelMarks/3f386b61be78895ab8e93ad57b41e802#file-server_attempt_6-c-L131
[07:13:39] <candide> Title of SamuelMarks's link: Experiments with simple HTTP socket server in C Â· GitHub
[07:15:09] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:16:46] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. ðŸ’¤)
[07:18:27] *** Joins: de-facto (~de-facto@user/de-facto)
[07:19:15] <caze> SamuelMarks: Where do you perform that division?
[07:20:24] <SamuelMarks> `#define malloc_usable_size malloc_size`?
[07:21:43] *** Quits: DSee (~DSee@c-73-21-250-78.hsd1.fl.comcast.net) (Quit: Quit)
[07:23:02] *** Quits: drin (~Geezabisc@user/geezabiscuit) (Quit: ZNC - https://znc.in)
[07:24:14] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[07:24:33] <caze> Your code is too anoying to read.
[07:25:23] <tusko> mine? :(
[07:25:29] <tusko> you're so mean to me##!
[07:26:01] *** Joins: Dsee4 (~DSee@173.237.207.67)
[07:26:10] <SamuelMarks> caze - Oh right yeah I fixed MSVC support then got back to my debugging of malloc and memcpy
[07:26:25] *** Joins: cthi (~cthi@99-12-166-26.lightspeed.rlghnc.sbcglobal.net)
[07:27:44] <caze> tusko: What are you talking about? You haven't shown any code.
[07:28:07] *** Quits: Syroth (~Syroth@pool-96-244-212-50.bltmmd.fios.verizon.net) (Quit: Leaving)
[07:28:15] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:30:00] *** Quits: Luke (~ldm@hacksoc/member) (Quit: o/ 4w 6d 23h 59m 16s)
[07:30:10] <tusko> caze, https://bpa.st/T4LQ
[07:30:35] <tusko> I think the problem is definitely that I'm overworking that buffffer without doing some extra handling
[07:31:05] <tusko> Maybe I should use free(buff) and reallocate another buffer each time I need one.
[07:31:17] *** Quits: foul_owl (~kerry@94.140.8.89) (Ping timeout: 240 seconds)
[07:31:47] <caze> read(file, &buff
[07:33:33] <tusko> That's how I should be filling the buffer instead of fgets?
[07:33:41] *** Joins: Luke (~ldm@hacksoc/member)
[07:34:02] <caze> No, that is likely to be wrong in your code.
[07:34:04] <Xgc> tusko: No.  That's the problem.
[07:34:18] <Xgc> tusko: Also the write.
[07:34:28] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[07:35:06] <tusko> are there other functions I should use?
[07:35:20] <caze> tusko: What does &buff mean?
[07:35:29] <Xgc> tusko: That won't matter until you fix your understanding of pointers.
[07:35:39] <tusko> It passes the address of the buff variable
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:03] <caze> tusko: But then why don't you have fgets(&buff...?
[07:36:25] <tusko> ah I see, it wants a pointer and I should just give it a pointer
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:32] <tusko> not a pointer to a pointer
[07:37:27] <SamuelMarks> caze - What do you mean where do I perform division?
[07:37:46] <caze> `malloc_usable_size`/`malloc_size`
[07:37:59] <SamuelMarks> Oh I meant depending on the libc I'n using
[07:38:01] <SamuelMarks> Either of those
[07:38:06] <caze> tusko: You're telling read to write to the location of the buff pointer variable.
[07:38:39] <tusko> I got rid of that and its working a lot better now. No more seg faulting
[07:38:42] <tusko> :)
[07:38:45] <caze> tusko: This is not the same as telling read to write to the location that the buff pointer variable points to.
[07:40:03] <SamuelMarks> caze Maybe the pipe would be better, it uses: `malloc_usable_size`|`malloc_size`|`_msize`
[07:40:17] <caze> SamuelMarks: Or just not have stupid macros.
[07:40:37] <caze> SamuelMarks: Where is the function defined?
[07:40:37] <SamuelMarks> It's just so I can debug the `realloc` to try and find why it's failing
[07:40:42] <SamuelMarks> malloc.h
[07:41:34] <caze> Functions don't typically get defined in header files.
[07:41:46] <SamuelMarks> It's built into libc
[07:42:02] <SamuelMarks> nonstandard which is why I `#define` the different ones
[07:42:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[07:43:09] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:43:49] <caze> SamuelMarks: The old pointer can become invalid after a realloc.
[07:44:00] <dave0> maw
[07:44:19] <caze> SamuelMarks: Try it on response_buf.
[07:45:32] <tusko> caze, do I write c code like a moron or just a newbie?
[07:45:42] <caze> tusko: A little of both.
[07:46:20] <caze> Things like casting calloc, writing sizeof(char).
[07:47:03] <SamuelMarks> ah gotcha, thx caze
[07:47:07] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[07:47:12] <SamuelMarks> Ok so it's hanging but not because of the realloc. Hmmmmmm
[07:47:14] <caze> Initializing resp when you don't use the value until after you've assigned to it.
[07:47:55] <caze> Oh wait, you do read it.
[07:47:56] <SamuelMarks> Ok now to figure out how to debug `memcpy`
[07:49:42] *** Joins: foul_owl (~kerry@217.114.38.246)
[07:51:19] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[07:51:46] <tusko> caze, I go between initializing all my variables and leaving them default
[07:51:55] <tusko> sometimes I get weird errors in both cases.
[07:52:20] <tusko> I usually opt for default if I assign before use. But, then I feel its hard to go wrong by setting sane defaults.
[07:53:50] <dave0> tusko: the nicest feature of c99 is that you can declare variables anywhere in a block, so you can put variables right next to where they're used
[07:53:53] <SamuelMarks> caze - Any clue why it would be hanging?
[07:54:19] <SamuelMarks> tusk0 / dave0 - nah go C89â€¦ tis way better supported than C99
[07:54:36] * pragma- stares.
[07:54:38] <SamuelMarks> :P
[07:56:31] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:d0fe:88f9:ed5b:12df)
[07:58:51] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:00:49] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:02:15] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-d449-2685-1032-d72e.res6.spectrum.com)
[08:03:13] *** Quits: Guest11 (~Guest11@pool-100-16-120-209.bltmmd.fios.verizon.net) (Ping timeout: 256 seconds)
[08:03:34] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[08:04:09] *** Joins: Viewday118 (~Viewday@user/viewday)
[08:04:25] <tusko> what should I use instead of sizeof(char)? sizeof(int)?
[08:04:59] <dave0> tusko: the number 1 ... sizeof(char) is the number 1 by definition
[08:05:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:05:33] <tusko> how embarrasing
[08:05:44] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:05:45] *** Viewday118 is now known as Viewday11
[08:06:34] <dave0> eh it's not so bad
[08:09:43] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[08:11:14] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:13:13] *** Joins: malloy (~jimery@116.30.220.175)
[08:13:41] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:15:43] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Remote host closed the connection)
[08:16:35] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:23:03] *** Quits: abraxis (~abraxis@user/abraxis) (Ping timeout: 256 seconds)
[08:24:01] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[08:29:51] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[08:30:06] *** Quits: foul_owl (~kerry@217.114.38.246) (Ping timeout: 256 seconds)
[08:30:06] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[08:33:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[08:40:18] *** Quits: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com) (Ping timeout: 256 seconds)
[08:40:32] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[08:41:32] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:a77a:575:562:5f94:3a18) (Ping timeout: 250 seconds)
[08:44:10] *** Joins: foul_owl (~kerry@207.244.125.36)
[08:44:17] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (Ping timeout: 256 seconds)
[08:46:04] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[08:47:35] *** Joins: savolla (~quassel@84.44.28.28)
[08:48:08] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[08:52:58] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[08:53:42] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:55:32] *** Joins: malloy (~jimery@116.30.220.175)
[08:55:33] *** Joins: ASUS (~ASUS@user/ASUS)
[08:56:00] *** Joins: kish` (~aqua@user/aqua)
[08:56:17] * kurahaupo wishes for typedef float size_t; sizeof(_Bool)==0.125
[08:56:23] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:413f:5e23:7b3e:933) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:57:07] *** Quits: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com) (Ping timeout: 250 seconds)
[08:58:24] *** Joins: ekathva (~ekathva@n3k05e951yzy0eo5x-1.v6.elisa-mobile.fi)
[08:58:41] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[09:02:58] *** Quits: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com) (Ping timeout: 256 seconds)
[09:03:48] *** Joins: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com)
[09:05:02] * vdamewood hands kurahaupo 1/8 of a char
[09:06:14] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:10:54] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[09:12:23] <dave0> sizeof(_Bool)==0.111 with 9 bit chars
[09:14:24] * kurahaupo contemplates having int foo[2] and then asking for foo[0.5]
[09:14:58] <vdamewood> I want to code on a system with CHAR_BIT == 24, and sizeof(short) sizeof(int) and sizeof(long) all == 1
[09:15:34] <vdamewood> Alas, all the DSPs I can find have char_bit=8 and 'normal'(ish) sizes for the other types.
[09:16:37] *** Quits: greenbagels (~gb@user/greenbagels) (Remote host closed the connection)
[09:16:51] <dave0> vdamewood: ooh 24 bit is perfect for unicode
[09:16:58] *** Joins: greenbagels (~gb@user/greenbagels)
[09:17:27] <vdamewood> dave0: I've always wondered why UTF-24 isn't a thing, but UTF-32 is.
[09:21:46] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[09:21:46] *** Quits: merced (merced@user/merced) (*.net *.split)
[09:21:46] *** Quits: kassle (~kassle@107.175.32.53) (*.net *.split)
[09:21:46] *** Quits: mbarbar (~mbarbar@oak.xen.prgmr.com) (*.net *.split)
[09:21:46] *** Quits: ASUS (~ASUS@user/ASUS) (*.net *.split)
[09:21:46] *** Quits: savolla (~quassel@84.44.28.28) (*.net *.split)
[09:21:46] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[09:21:46] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (*.net *.split)
[09:21:46] *** Quits: Dsee4 (~DSee@173.237.207.67) (*.net *.split)
[09:21:46] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (*.net *.split)
[09:21:46] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (*.net *.split)
[09:21:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:21:46] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[09:21:46] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[09:21:46] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (*.net *.split)
[09:21:46] *** Quits: beencubed (~beencubed@209.131.238.248) (*.net *.split)
[09:21:46] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (*.net *.split)
[09:21:46] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:21:46] *** Quits: nuxil_ (~nuxil@141.195.51.213) (*.net *.split)
[09:21:46] *** Quits: csrf (~csrf@user/csrf) (*.net *.split)
[09:21:46] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (*.net *.split)
[09:21:46] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (*.net *.split)
[09:21:46] *** Quits: X-Scale (~ARM@92.250.98.59) (*.net *.split)
[09:21:46] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:21:46] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[09:21:46] *** Quits: m4v (~znc@ubuntu/member/m4v) (*.net *.split)
[09:21:46] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (*.net *.split)
[09:21:46] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[09:21:46] *** Quits: Myth (~pi@173.233.125.203) (*.net *.split)
[09:21:46] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (*.net *.split)
[09:21:46] *** Quits: Thedarkb-Desktop (~Thedarkb@78.141.240.26) (*.net *.split)
[09:21:46] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[09:21:46] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (*.net *.split)
[09:21:46] *** Quits: KevinX (~KevinX@user/KevinX) (*.net *.split)
[09:21:46] *** Quits: cryptonector (~nico@24.28.108.183) (*.net *.split)
[09:21:46] *** Quits: BGL (sixty@75-149-171-58-Washington.hfc.comcastbusiness.net) (*.net *.split)
[09:21:46] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (*.net *.split)
[09:21:46] *** Quits: silky (~silkworks@ctrl-c.club) (*.net *.split)
[09:21:46] *** Quits: moose (~moose@user/moose) (*.net *.split)
[09:21:46] *** Quits: mrec (~markus@sundtek.de) (*.net *.split)
[09:21:46] *** Quits: keur2 (~keur@segfault.fun) (*.net *.split)
[09:21:46] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[09:21:46] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[09:21:46] *** Quits: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de) (*.net *.split)
[09:21:46] *** Quits: overrider (~overrider@user/overrider) (*.net *.split)
[09:21:46] *** Quits: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net) (*.net *.split)
[09:21:46] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[09:21:46] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[09:21:46] *** Quits: ullbeking_ (sid5364@ilkley.irccloud.com) (*.net *.split)
[09:21:46] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[09:21:46] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[09:21:46] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[09:21:46] *** Quits: lowin (~lowin@user/lowin) (*.net *.split)
[09:21:46] *** Quits: ho4x (~jh@vps2023712.fastwebserver.de) (*.net *.split)
[09:21:46] *** Quits: sandman13 (sandman13@jujube.ircnow.org) (*.net *.split)
[09:21:46] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (*.net *.split)
[09:21:46] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (*.net *.split)
[09:21:46] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[09:21:46] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[09:21:46] *** Quits: sebito91 (~sborza@45.55.74.66) (*.net *.split)
[09:21:46] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[09:21:46] *** Quits: blinky42 (~quassel@user/blinky42) (*.net *.split)
[09:21:46] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (*.net *.split)
[09:21:46] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[09:21:46] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[09:21:46] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:21:46] *** Quits: andjjj23_ (~irc@107.170.228.47) (*.net *.split)
[09:21:46] *** Quits: les_ (~whome@user/les) (*.net *.split)
[09:21:46] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (*.net *.split)
[09:21:46] *** Quits: corelax (~corelax@user/corelax) (*.net *.split)
[09:21:46] *** Quits: ntdll_ (~ntdll@shion.saiban.me) (*.net *.split)
[09:21:46] *** Quits: aesin_ (~aesin@81.211.127.107) (*.net *.split)
[09:21:46] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[09:21:46] *** Quits: koollman (~samson_t@user/koollman) (*.net *.split)
[09:21:46] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[09:21:46] *** Quits: eeerik8 (~eeerik8@95.179.149.48) (*.net *.split)
[09:21:46] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[09:21:46] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:22:18] *** Joins: bjs (sid190364@user/bjs)
[09:22:22] *** Joins: merced (merced@user/merced)
[09:22:23] *** Joins: ASUS (~ASUS@user/ASUS)
[09:22:23] *** Joins: savolla (~quassel@84.44.28.28)
[09:22:23] *** Joins: Viewday11 (~Viewday@user/viewday)
[09:22:23] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:22:23] *** Joins: Dsee4 (~DSee@173.237.207.67)
[09:22:23] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[09:22:23] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:22:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:22:23] *** Joins: Wulf (~Wulf@user/wulf)
[09:22:23] *** Joins: Betal (~Betal@user/betal)
[09:22:23] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[09:22:23] *** Joins: beencubed (~beencubed@209.131.238.248)
[09:22:23] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[09:22:23] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[09:22:23] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[09:22:23] *** Joins: csrf (~csrf@user/csrf)
[09:22:23] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[09:22:23] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[09:22:23] *** Joins: X-Scale (~ARM@92.250.98.59)
[09:22:23] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[09:22:23] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[09:22:23] *** Joins: m4v (~znc@ubuntu/member/m4v)
[09:22:23] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[09:22:23] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[09:22:23] *** Joins: Myth (~pi@173.233.125.203)
[09:22:23] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[09:22:23] *** Joins: mbarbar (~mbarbar@oak.xen.prgmr.com)
[09:22:23] *** Joins: kassle (~kassle@107.175.32.53)
[09:22:23] *** Joins: Thedarkb-Desktop (~Thedarkb@78.141.240.26)
[09:22:23] *** Joins: somlis (~somlis@user/somlis)
[09:22:23] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[09:22:23] *** Joins: KevinX (~KevinX@user/KevinX)
[09:22:23] *** Joins: BGL (sixty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[09:22:23] *** Joins: cryptonector (~nico@24.28.108.183)
[09:22:23] *** Joins: keur2 (~keur@segfault.fun)
[09:22:23] *** Joins: flynn (~mcbloch@user/flynn)
[09:22:23] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[09:22:23] *** Joins: eeerik8 (~eeerik8@95.179.149.48)
[09:22:23] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[09:22:23] *** Joins: koollman (~samson_t@user/koollman)
[09:22:23] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[09:22:23] *** Joins: aesin_ (~aesin@81.211.127.107)
[09:22:23] *** Joins: ntdll_ (~ntdll@shion.saiban.me)
[09:22:23] *** Joins: corelax (~corelax@user/corelax)
[09:22:23] *** Joins: les_ (~whome@user/les)
[09:22:23] *** Joins: andjjj23_ (~irc@107.170.228.47)
[09:22:23] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[09:22:23] *** Joins: n1000 (~n1000@user/n1000)
[09:22:23] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[09:22:23] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[09:22:23] *** Joins: blinky42 (~quassel@user/blinky42)
[09:22:23] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[09:22:23] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[09:22:23] *** Joins: sebito91 (~sborza@45.55.74.66)
[09:22:23] *** Joins: cehteh (~ct@git.pipapo.org)
[09:22:23] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[09:22:23] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[09:22:23] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[09:22:23] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[09:22:23] *** Joins: ho4x (~jh@vps2023712.fastwebserver.de)
[09:22:23] *** Joins: lowin (~lowin@user/lowin)
[09:22:23] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[09:22:23] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[09:22:23] *** Joins: abraham (~abraham@143.244.185.86)
[09:22:23] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[09:22:23] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[09:22:23] *** Joins: shachaf (~shachaf@user/shachaf)
[09:22:23] *** Joins: Forty-Bot (~kvirc@pool-108-18-137-133.washdc.fios.verizon.net)
[09:22:23] *** Joins: overrider (~overrider@user/overrider)
[09:22:23] *** Joins: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de)
[09:22:23] *** Joins: s1b1 (~s1b1@user/s1b1)
[09:22:23] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[09:22:23] *** Joins: mrec (~markus@sundtek.de)
[09:22:23] *** Joins: moose (~moose@user/moose)
[09:22:23] *** Joins: silky (~silkworks@ctrl-c.club)
[09:22:23] *** Joins: kilobyte_ch (~kbch@77.109.171.85)
[09:22:44] *** Quits: kurahaupo (~martin@115.69.27.211) (Quit: Leaving.)
[09:23:02] *** Joins: elichai2 (sid212594@2a03:5180:f:4::3:3e72)
[09:23:07] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 256 seconds)
[09:23:08] *** Joins: choosetheforce (~aen@75-23-239-136.lightspeed.cornca.sbcglobal.net)
[09:23:51] *** Quits: Viewday11 (~Viewday@user/viewday) (Max SendQ exceeded)
[09:24:26] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[09:24:33] *** Joins: Viewday11 (~Viewday@user/viewday)
[09:25:03] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[09:25:03] *** Quits: gl (~x@pwn.lu) (*.net *.split)
[09:25:03] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[09:25:03] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[09:25:10] *** Joins: zinc (~zinc@163.ip-51-254-203.eu)
[09:25:50] *** Joins: voldial (~user@195.179.201.175)
[09:27:41] *** Joins: laris (undead@37.221.209.36)
[09:28:49] *** Joins: kanin (~kanin@112.41.64.39)
[09:28:58] *** Quits: kish` (~aqua@user/aqua) (*.net *.split)
[09:28:58] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[09:28:58] *** Quits: System_Error (~SystemErr@user/systemerror) (*.net *.split)
[09:28:58] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (*.net *.split)
[09:28:58] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[09:28:58] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (*.net *.split)
[09:28:58] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[09:28:58] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (*.net *.split)
[09:28:58] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[09:28:58] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (*.net *.split)
[09:28:58] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[09:28:58] *** Quits: diiirt (~diiirt@user/diiirt) (*.net *.split)
[09:28:58] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (*.net *.split)
[09:30:18] *** Joins: de-facto (~de-facto@user/de-facto)
[09:30:19] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[09:30:20] *** Joins: bindu (~bindu@user/bindu)
[09:30:21] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[09:30:24] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[09:30:33] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[09:30:33] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[09:30:39] *** Joins: kish` (~aqua@user/aqua)
[09:31:25] *** Joins: nitrix (~nitrix@user/nitrix)
[09:32:47] *** Joins: teepee (~teepee@openscad/teepee)
[09:34:25] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[09:34:30] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:42:19] <scaramanga> pastebin the valgrind output?
[09:42:34] <scaramanga> oh i was scroleld way up
[09:42:39] <scaramanga> hah, guess u solved it tusko?
[09:44:40] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[09:48:56] <vdamewood> Yum, scrollback.
[09:52:04] <ChoHag> UTF-32 is mostly useful because it matches a machine word. If there was a system with 3-byte words there would probably be utf-24 (or utf-21).
[09:52:07] <dave0> hmmm utf-24 is 25% more efficient than utf-32
[09:52:33] <dave0> you can pack three 21 bit numbers in one 64 bit number
[09:52:36] <ChoHag> On the other hand you have an extra 11 bits to fool around with.
[09:52:48] <Maxdamantus> UTF-32 is only really useful as a concept.
[09:53:32] <ChoHag> It's useful for internal processing too.
[09:53:50] <Maxdamantus> There are some applications which have some rudimentary support for Unicode involving passing individual characters as 32-bit numbers, but whenever you have a string (sequence of characters), UTF-32 is not useful.
[09:55:03] <ChoHag> eg. character-by-character comparison can, after decoding, always return a 32-bit int.
[09:55:22] <Maxdamantus> (eg, I'm thinking of something like a terminal emulator which might use a 32-bit integer to represent the character in each cell. `st` does that, and it ends up with rudimentary support, doesn't work properly with combining characters for example.
[09:55:33] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:55:46] <ChoHag> In theory that doesn't actually need to be utf-32 since the 1-4 bytes that wre utf-8 could be packed into the same space and still each would be unique.
[09:56:02] <ChoHag> But that sounds like a silly idea.
[09:56:06] <Maxdamantus> Right, so when you're iterating over code points, it makes sense for the iterator to return a 32-bit int, because that's a normal integer width and it's capable of representingh all code points.
[09:57:00] <dave0> i like how in the olden days they packed five 7 bit ascii characters into one 36 bit word
[09:57:05] <Maxdamantus> If you look at the API of any library that does special things with Unicode (eg, HarfBuzz), it will probably just take UTF-8 or UTF-16, depending on the environment.
[09:57:33] <Maxdamantus> Dunno what HarfBuzz does internally, though I'd be slightly surprised if it maintains a UTF-32 representation.
[09:58:21] <ChoHag> But why not take utf-32? Because its inclusion (largely the identity function) would pollute the code or because nobody wants it?
[09:58:31] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 256 seconds)
[09:58:34] <Maxdamantus> Because it doesn't actually solve anything.
[09:58:49] <Maxdamantus> What do you think it achieves over UTF-8?
[09:59:07] <ChoHag> Simplicity.
[09:59:35] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[09:59:46] <Maxdamantus> Noone uses UTF-32 externally. It's simpler to just pass around UTF-8 bytes, since that's what a program normally consumes and produces.
[10:00:00] <ChoHag> Yes.
[10:00:01] <Maxdamantus> Next?
[10:00:13] <Maxdamantus> afk a sec
[10:00:18] <zwr> boy I just nonchalantly wrote `return -!ret;`, it looks so weird
[10:02:54] *** Joins: teepee (~teepee@openscad/teepee)
[10:03:02] *** Quits: kanin (~kanin@112.41.64.39) (Ping timeout: 256 seconds)
[10:04:19] *** Joins: Viewday112 (~Viewday@user/viewday)
[10:05:33] <ChoHag> Is ret a pointer, to round out the operator abuse?
[10:06:07] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[10:06:08] *** Viewday112 is now known as Viewday11
[10:06:46] <Grell> hellom what is a good C programming forum out there?
[10:07:08] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[10:07:13] <ChoHag> Why are so many sites popping up which are a clone of wikipedia? What are they hoping to gain by becoming another gatekeeper to a public resource? Apart from irritating me with search results full of the same wikipedia page.
[10:09:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:09:52] <vdamewood> ChoHag: Because wikimedia makes its software available for download.
[10:10:21] <pragma-> gatekeeper?
[10:10:37] <ChoHag> *Another* gatekeeper.
[10:11:02] <ChoHag> They put up a gate but cannot stop all the other gates, so what do they gain by paying for the gate?
[10:11:06] <zwr> ret is an int, I'm hurting myself with the Windows API, there's a function that returns nonzero on success
[10:11:52] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[10:11:53] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:d0fe:88f9:ed5b:12df) (Read error: Connection reset by peer)
[10:12:10] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:d0fe:88f9:ed5b:12df)
[10:12:20] <ChoHag> vdamewood: That explains how, it doesn't explain why.
[10:12:39] <vdamewood> ChoHag: The software is there, therefore people must download it and use it.
[10:12:53] <ChoHag> Step 1, install fancy gate on public square; step 2, ???; step 3, Profit!
[10:13:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:14:35] <vdamewood> Step 3 is optional.
[10:14:43] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:15:13] <ChoHag> At first I thought they might be adding some value somewhere, eg. one I found was "for programmers" so maybe it concentrates on and improves related articles, but nope. Straight copy.
[10:17:17] <pragma-> Oh, you mean sites actually duplicating Wikipedia's content? I thought you were talking about sites using MediaWiki for their own content, like Wiktionary.
[10:18:02] <ChoHag> Yes. Using the software makes sense but what value has the data?
[10:20:28] *** Joins: chung (uid498429@id-498429.helmsley.irccloud.com)
[10:25:25] <sham1> Better UI?
[10:25:37] <sham1> For example, that's the reason behind WikiWand
[10:26:57] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (Ping timeout: 240 seconds)
[10:27:18] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:31:29] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:32:36] <tusko> scaramanga, for the most part. I actually came to realize that all my bounds checking makes it not such a great test program.
[10:32:40] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au)
[10:32:53] <tusko> I'll need to modify it to do no bounds testing when I write the device driver.
[10:36:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[10:40:05] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.220)
[10:43:57] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[10:45:17] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[10:52:45] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:53:58] *** Parts: abraxis (~abraxis@66-175-215-36.ip.linodeusercontent.com) ()
[10:54:14] *** Quits: cthi (~cthi@99-12-166-26.lightspeed.rlghnc.sbcglobal.net) (Quit: leaving)
[10:54:59] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Client Quit)
[10:55:12] *** Quits: chung (uid498429@id-498429.helmsley.irccloud.com) ()
[10:55:12] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-2-50.pa.qld.optusnet.com.au) (Ping timeout: 272 seconds)
[10:55:22] *** Joins: abraxis (~abraxis@user/abraxis)
[10:55:29] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:57:45] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[10:58:22] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[10:59:47] *** Joins: arinov_ (~arinov@213.194.126.155)
[10:59:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[11:00:29] *** Joins: JanC_ (~janc@user/janc)
[11:00:37] *** Quits: JanC (~janc@user/janc) (Killed (lead.libera.chat (Nickname regained by services)))
[11:00:37] *** JanC_ is now known as JanC
[11:01:47] *** Joins: kanin (~kanin@112.41.64.39)
[11:03:48] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.220) (Ping timeout: 240 seconds)
[11:03:59] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[11:04:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:04:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:04:59] *** Joins: wroathe (~wroathe@user/wroathe)
[11:05:58] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[11:06:14] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[11:09:59] *** Quits: ZenWalker (~r00t@cafe/developer/ZenWalker) (Ping timeout: 256 seconds)
[11:10:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[11:10:32] *** Joins: cosimone (~user@93-44-187-99.ip98.fastwebnet.it)
[11:10:50] *** Quits: cosimone (~user@93-44-187-99.ip98.fastwebnet.it) (Remote host closed the connection)
[11:11:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:11:37] <Grell> Are there any simple projects or tasks on Linux/BSD that need C coders to contribute to?  I'd like to help out.
[11:16:35] *** Joins: leo__ (~leo@188-206-65-250.mobile.kpn.net)
[11:19:30] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:21:50] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[11:22:10] *** Joins: supakeen (~user@python/site-packages/supakeen)
[11:22:56] *** Quits: KevinX (~KevinX@user/KevinX) (Ping timeout: 256 seconds)
[11:24:58] <tarzeau> Grell: so many! there's debian gnu/kfreebsd for example where you could help lemon.debian.net and see their irc channel
[11:25:18] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[11:26:26] <sham1> I'd say that most projects except the largest ones would be ecstatic due to contributions
[11:26:44] <sham1> Since most projects are just one person affairs
[11:27:00] *** Quits: leo__ (~leo@188-206-65-250.mobile.kpn.net) (Ping timeout: 252 seconds)
[11:31:01] <gry> Grell: hello :)
[11:31:28] <gry> Grell: are you ok with obj-c? I have a few bugs that need fixing in "gnustep" apps
[11:31:49] <sham1> And developing WindowMaker is also okay, and that's in straight C
[11:31:56] <gry> yes :)
[11:32:06] <Grell> tbh, i'm a beginner
[11:32:10] <Grell> i know some C
[11:32:19] <Grell> I'm looking to get better
[11:32:22] <sham1> Learning by doing is how humans get better
[11:32:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[11:33:03] <Grell> I coded one cool thing years ago
[11:33:07] <gry> I am beginner too. my task in C is, for Xorg, create an application similar to xkill, that when I click a window, tells me what debian package it belongs to
[11:33:10] <supakeen> there's a good filter and that is to search on github for the tags 'good first issue' and 'help wanted' for C projects
[11:33:22] <supakeen> usually maintainers that add those tags are willing to help
[11:33:26] <gry> Grell, what is your time zone if I may ask?
[11:33:43] <Grell> I'm in EST
[11:33:45] <gry> and have you used a linux distribution before?
[11:33:52] <Grell> yeah I'm on FreeBSD
[11:33:53] <supakeen> for example i usually keep semi-trivial issues that are well defined but not important open for people to pick up, though I have no current C projects I maintain
[11:33:58] <Grell> I coded this in 2012 https://packetstormsecurity.com/files/115275/Thrip-Port-Scanner.html
[11:34:01] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[11:34:05] <gry> isn't it 3am in EST?
[11:34:07] *** Joins: lleo (~leo@188-206-65-250.mobile.kpn.net)
[11:34:09] <Grell> yeah
[11:34:11] <Grell> im up late
[11:34:16] <gry> okay
[11:34:29] <gry> did you do perl before?
[11:34:40] <gry> or sysadmin?
[11:34:45] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:35:12] <Grell> not really
[11:35:51] <Grell> I'll look at your code though
[11:35:51] <gry> that is a nice program, a bit of networking
[11:36:07] <gry> right, so last two days I am stuck on this: https://ikiwiki.info/forum/problems_with_git_push_on_openbsd/ it is openbsd related, and not C related
[11:38:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:39:13] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:41:56] *** Joins: ZenWalker (~r00t@47.pool85-56-150.dynamic.orange.es)
[11:43:22] <gry> Grell: and if you like applications, there is http://wiki.gnustep.org/index.php/Application_wish_list
[11:43:39] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[11:43:53] <gry> Grell: each one of them, even if a short small start is made, someone may hop in and continue together
[11:44:14] <gry> Grell: also bsd friendly, I think they do good packages
[11:44:18] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[11:44:20] <Grell> cool man
[11:44:25] *** Joins: KevinX (~KevinX@user/KevinX)
[11:44:31] <Grell> i'll have to check those out
[11:45:19] *** Quits: myusername (~myusernam@user/myusername) (Quit: Leaving)
[11:45:38] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[11:45:47] <Grell> i'm going to install Linux too
[11:45:57] <ChoHag> gry: How do you plan to go from window id to (presumably) process name in order to have something to locate?
[11:45:58] <Grell> it helps to have that around
[11:46:12] *** Joins: vysn (~vysn@user/vysn)
[11:46:29] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[11:47:21] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[11:47:25] *** Joins: Rounin (~david@84.212.130.215)
[11:48:07] <ChoHag> gry: Also, you need exactly 1 thing in your .profile to locate perl libraries. Not entirely sure what that *300KB* of perl is trying to do.
[11:48:21] <ChoHag> export PERL5LIB=/home/path/to/modules
[11:48:33] *** Joins: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl)
[11:49:40] *** Joins: krissmaster (~kriss@213.239.83.90)
[11:51:09] *** Joins: the_lanetly_052_ (~the_lanet@185.30.89.52)
[11:51:22] *** Quits: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl) (Client Quit)
[11:51:33] <gry> ChoHag: not all application and not all window managers follow it, but 'xprop' gives a PID as part of window properties
[11:51:33] <ChoHag> If you want to use local::lib, which you probably do, install p5-local-lib and it should read eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)" as per local::lib(3) instead.
[11:51:48] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[11:54:51] <gry> ChoHag: where did you get 300KB from? and I think there are two places, one where ikiwiki put its modules in /home/w/usr/usr/local/libdata/perl5/ , and one where cpanm did in ~/perl5
[11:55:07] <ChoHag> ftp -o- http://cpanmin.us | wc
[11:55:52] <ChoHag> 300KB of random shite off the internet fed into perl. What could go wrong?
[11:56:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:56:18] *** Joins: aradesh (~aradesh@user/aradesh)
[11:56:30] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[11:57:39] <ChoHag> I suggest you strip out all your perl and start again without using that monstrosity. Install local::lib, from cpan or packages, use that to install ikiwiki, profit.
[11:57:41] *** Joins: adip_ (~adip@crd88.neoplus.adsl.tpnet.pl)
[11:58:15] <ChoHag> And by "use that to install ikiwiki" I mean that by having set local::lib up correctly in your .profile, ikiwiki's installer (Makefile.PL) will use local::lib to install itself.
[11:58:44] *** Joins: mrig (~mrig@user/mrig)
[11:59:40] *** Joins: gl (~x@pwn.lu)
[11:59:44] *** Joins: cosimone (~user@93-44-187-99.ip98.fastwebnet.it)
[12:00:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[12:00:50] <gry> ChoHag: oh, it is a stadard snippet to install cpanm without using package repositories. I guess I could forget about it and use the p5-local-lib package. just did that. started installing something with 'cpan'. it asked what method to use. i wrote 'local::lib'. its first response: permission denied putting something in /usr. how is this p5-local-lib package going to work, then, and why didn't it set up my user's environment correctly?
[12:01:07] <gry> and if it didn't, then how do i do that?
[12:01:16] <ChoHag> Oh and using DESTDIR is wrong. If a file wants to install to /usr/local/bar then DESTDIR=/foo gets it installed at /foo/usr/local/bar
[12:01:19] <gry> by 'standard', i mean it's linked from cpanm's home page
[12:01:46] <ChoHag> I find it helpful to set DESTDIR to /tmp/something to see what's going to happen to my /. This, btw, is a convention that's closely followed but not guaranteed.
[12:02:12] <ChoHag> gry: There are no standards in perl.
[12:02:28] *** Joins: random-nick (~random-ni@87.116.181.150)
[12:02:35] <gry> that's ok, i'm now just wondering what that package did and what is left for me to do now
[12:02:44] <ChoHag> The "way to use perl modules" has changed every time I've gone to figure it out over the last ~25 years.
[12:03:31] <ChoHag> As soon as you figure out what's "standard" somebody will develop a new distribution tool so just use whatever works for you today.
[12:03:55] <ChoHag> This goes for most languages in fact, perl's just been around a bit.
[12:04:10] *** Joins: Viewday119 (~Viewday@user/viewday)
[12:04:59] <ChoHag> gry: apropos pkg
[12:05:24] <ChoHag> Openbsd has extremely good documentation. Use t.
[12:05:25] <ChoHag> it
[12:05:35] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:05:35] *** Viewday119 is now known as Viewday11
[12:05:59] *** Quits: lleo (~leo@188-206-65-250.mobile.kpn.net) (Remote host closed the connection)
[12:06:02] <gry> it's a package manager... once p5-local-lib is installed, what do I need it for?
[12:06:11] <gry> I did look at its output, but lost the purpose
[12:06:20] *** Joins: lleo (~leo@188-206-65-250.mobile.kpn.net)
[12:06:30] <ChoHag> Perl and most of cpan also has extremely good documentation.
[12:11:37] *** Quits: cosimone (~user@93-44-187-99.ip98.fastwebnet.it) (Remote host closed the connection)
[12:11:51] *** Joins: kts (~kts@103.73.237.0)
[12:12:26] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[12:13:01] *** Quits: lleo (~leo@188-206-65-250.mobile.kpn.net) (Read error: Connection reset by peer)
[12:13:14] *** Joins: lleo (~leo@188-206-65-250.mobile.kpn.net)
[12:13:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:14:22] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[12:14:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[12:15:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:16:44] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:17:24] *** Quits: lleo (~leo@188-206-65-250.mobile.kpn.net) (Ping timeout: 240 seconds)
[12:18:18] *** Quits: ZenWalker (~r00t@47.pool85-56-150.dynamic.orange.es) (Remote host closed the connection)
[12:19:57] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[12:22:24] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[12:23:57] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:395a:706a:3029:1fc6) (Ping timeout: 240 seconds)
[12:25:24] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[12:26:10] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[12:26:19] *** Joins: kts_ (~kts@103.73.237.22)
[12:27:02] *** Quits: kts (~kts@103.73.237.0) (Ping timeout: 272 seconds)
[12:28:14] *** Quits: Xgc (~Xgc@user/xgc) (Read error: Connection reset by peer)
[12:28:20] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:29:21] *** Joins: Atque (~Atque@user/atque)
[12:30:05] *** Quits: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718) (Quit: You have been kicked for being idle)
[12:30:06] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: You have been kicked for being idle)
[12:32:02] *** Joins: ASUS_ (~ASUS@user/ASUS)
[12:33:31] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[12:34:02] *** Joins: oxfuxxx (~oxfuxxx@131.255.4.84)
[12:34:28] *** Joins: ironman (~ironman@103.124.143.138)
[12:35:42] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:36:20] *** Quits: kts_ (~kts@103.73.237.22) (Quit: Konversation terminated!)
[12:38:39] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:39:52] *** Quits: ASUS_ (~ASUS@user/ASUS) (Remote host closed the connection)
[12:40:36] *** Quits: oxfuxxx (~oxfuxxx@131.255.4.84) (Ping timeout: 240 seconds)
[12:41:10] *** Joins: jellie (~luv_panda@user/jellie)
[12:42:21] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 252 seconds)
[12:42:55] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[12:43:27] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[12:43:48] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[12:43:54] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[12:44:30] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[12:44:38] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[12:45:05] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[12:45:53] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[12:47:13] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.104)
[12:48:12] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[12:48:15] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Client Quit)
[12:48:33] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[12:48:54] *** Joins: kts (~kts@103.73.237.22)
[12:49:16] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:50:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:51:42] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.104) (Ping timeout: 252 seconds)
[12:52:45] *** Quits: KevinX (~KevinX@user/KevinX) (Read error: Connection reset by peer)
[12:53:10] *** Joins: KevinX (~KevinX@user/KevinX)
[12:53:52] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[12:54:20] *** Joins: kts_ (~kts@103.73.237.217)
[12:54:38] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[12:55:32] *** Quits: kts (~kts@103.73.237.22) (Ping timeout: 272 seconds)
[12:58:47] *** Quits: kts_ (~kts@103.73.237.217) (Client Quit)
[12:58:57] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[13:00:15] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 240 seconds)
[13:00:43] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[13:00:55] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[13:01:09] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:d0fe:88f9:ed5b:12df) (Quit: Leaving)
[13:01:14] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[13:01:14] *** Joins: de-facto (~de-facto@user/de-facto)
[13:01:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:02:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[13:02:36] *** Joins: kts (~kts@103.73.237.217)
[13:04:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:04:40] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[13:06:03] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[13:07:45] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[13:08:14] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:14:35] *** Joins: myon98 (~myon98@user/myon98)
[13:17:07] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Quit: leaving)
[13:18:40] *** Joins: System_Error (~SystemErr@user/systemerror)
[13:20:24] *** Joins: plastico (~plastico@neomutt/plastico)
[13:20:33] *** Joins: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se)
[13:22:25] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[13:22:47] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[13:23:36] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[13:23:54] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[13:24:09] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 252 seconds)
[13:24:13] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[13:24:59] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[13:25:59] *** Joins: eroux (~eroux@102-65-81-186.ftth.web.africa)
[13:27:16] *** Joins: john99 (~john99@101.246.103.34.bc.googleusercontent.com)
[13:28:16] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[13:28:34] <john99> Hi guys, someone know how i can force that gcc have multiple exit point in one function? even with -Og the call are replazed by jump to only one exit point
[13:29:35] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:32:58] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.101)
[13:34:26] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[13:34:42] <sham1> What for?
[13:34:48] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 272 seconds)
[13:34:57] <john99> https://godbolt.org/z/s719GsP1W
[13:35:22] <john99> i am trying that __cyg_profile_func_exit return the exit point
[13:36:23] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Quit: Konversation terminated!)
[13:36:32] <sham1> Hm
[13:36:39] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[13:36:44] <sham1> I still don't get the reason, but I also don't have any good advice
[13:37:33] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[13:37:51] *** Quits: kts (~kts@103.73.237.217) (Quit: Konversation terminated!)
[13:37:56] *** Quits: stilbruch (~stilbruch@157.245.122.124) (Quit: bye)
[13:37:58] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.101) (Ping timeout: 272 seconds)
[13:38:15] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[13:38:17] *** Joins: X-Scale` (~ARM@66.26.54.77.rev.vodafone.pt)
[13:38:19] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[13:38:31] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[13:39:07] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:c1e6:fcc3:ea5e:488e)
[13:39:15] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.104)
[13:39:50] <john99> umm, its a poor man traze XD
[13:40:01] <john99> https://mcuoneclipse.com/2015/04/04/poor-mans-trace-free-of-charge-function-entryexit-trace-with-gnu-tools/
[13:40:04] *** Quits: X-Scale (~ARM@92.250.98.59) (Ping timeout: 256 seconds)
[13:40:06] *** X-Scale` is now known as X-Scale
[13:40:10] <john99> but i am trying to put that a bit far
[13:40:10] *** Joins: kts (~kts@103.73.237.217)
[13:40:23] *** Joins: System_Error (~SystemErr@user/systemerror)
[13:42:31] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:42:51] *** Joins: malina (~malina@user/malina)
[13:42:58] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.104) (Client Quit)
[13:45:02] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Quit: Konversation terminated!)
[13:45:49] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ed4e:5979:adfa:bb7b) (Ping timeout: 256 seconds)
[13:49:39] *** Joins: gry (~quassel@botters/gry)
[13:51:39] <AStorm> hey, I need a decent code coverage tool to sum coverage over multiple oldschool executable tests, any guide how to achieve that?
[13:51:50] <AStorm> it's all plain C executables
[13:51:59] <AStorm> needs some exclude support
[13:52:12] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:53:06] <AStorm> there's gcov of course, but maybe there's something more potent or convenient?
[13:53:45] *** Joins: hinata (~hinata@2409:4042:2ea3:e72b:d0fe:88f9:ed5b:12df)
[14:01:47] *** Joins: \o\ (~i.am@187.112.46.243)
[14:01:53] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:04:05] *** Joins: Viewday116 (~Viewday@user/viewday)
[14:05:35] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:05:35] *** Viewday116 is now known as Viewday11
[14:10:54] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 272 seconds)
[14:11:12] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[14:11:40] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[14:17:30] *** Joins: seninha (~seninha@user/seninha)
[14:19:49] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[14:20:36] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[14:22:48] *** Joins: jellie (~luv_panda@user/jellie)
[14:26:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[14:27:10] <System_Error> vdamewood: if you want smth strange and common, AVRs could do. ACR-GCC could happily do 16-bit "int". IIRC they also can't technically dereference less than 16-bit word in flash.
[14:27:59] <vdamewood> System_Error: It's no 24-bit DSP, but it still looks interesting.
[14:28:06] <vdamewood> Thanks.
[14:28:12] <System_Error> I can also remember some DSPs had 16 bit as min unit hardwired so badly char been like 16-bit.
[14:28:29] <System_Error> but it's exotic and I've not dealt with it
[14:28:48] <System_Error> vdamewood: it also HARVARD so IIRC there can be smth strange about addressing.
[14:28:55] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:29:12] <fizzie> vdamewood: DSP56k is a 24-bit DSP, with sizeof (char), (short), (int) == 1, sizeof (long) == 2.
[14:29:29] <vdamewood> Is a long 48 bits?
[14:29:31] <fizzie> And a CHAR_BIT == 24, of course.
[14:29:40] <fizzie> Yes. The standard requires >= 32, after all.
[14:30:04] <vdamewood> Oh, I didn't realize the minimum was that high.
[14:30:55] <vdamewood> fizzie: Does NXP still make them?
[14:31:35] <System_Error> as for utf-24, guess 32 better aligned on "common" platforms. But utf8 apparently got more use for many reasons.
[14:32:02] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[14:32:05] <fizzie> I don't know, I've only ever used one back in university for a DSP course maybe 15 years ago.
[14:32:37] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[14:33:01] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[14:34:28] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:34] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:36] <vdamewood> fizzie: So back when Motorola was still Motorola.
[14:36:12] <sham1> System_Error: UTF-8 is just the best thing for doing the information interchange. Meanwhile UTF-32 is best for actually looking at codepoints
[14:36:16] <sham1> As for UTF-16? No
[14:36:52] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[14:42:59] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:43:13] <tdmm> What's the deal with "unsafe dependent memory operations in loop" in Clang?  It's refusing to compile basic array reversal code.
[14:43:21] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 252 seconds)
[14:43:26] <ChoHag> System_Error: Harvard simply means data and instructions do not share the same address space.
[14:43:26] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:43:46] <tdmm> for (size_t i = 0; i < len / 2; i++) { uint32_t t = array[i]; array[i] = array[len - i - 1]; array[len - i - 1] = t; }
[14:45:17] <ChoHag> sham1: For the most part UTF-16 can be treated as fixed-width.
[14:47:18] *** Joins: cursey (~cursey@user/cursey)
[14:47:59] *** Joins: blyat-73 (~hjgkjhgkj@46.235.97.89)
[14:48:04] <DarkUranium> fizzie: pretty sure CHAR_BIT == 32 DSPs are also fairly common.
[14:48:18] <ChoHag> It's main downside is that also for the most part, every other byte is zero.
[14:52:16] *** Quits: blyat-73 (~hjgkjhgkj@46.235.97.89) (Client Quit)
[14:52:49] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[14:52:52] <Dean> Hello everyone.
[14:54:54] *** Joins: Klinda (~superleag@user/klinda)
[14:56:00] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[14:56:50] * clarity meow.
[14:58:07] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:06:29] <fizzie> Analog Devices' SHARC was the CHAR_BIT == 32 platform on that same course. :)
[15:06:52] <fizzie> (And TI TMS320C54x was the CHAR_BIT == 16 one. Not sure if they had intentionally picked three different word sizes.)
[15:09:27] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[15:09:58] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[15:12:58] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 272 seconds)
[15:12:59] *** Quits: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se) (Read error: Connection reset by peer)
[15:16:31] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[15:16:58] *** Joins: Atque (~Atque@user/atque)
[15:20:45] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:23:44] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 272 seconds)
[15:25:50] *** Joins: vysn (~vysn@user/vysn)
[15:27:08] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.103)
[15:27:27] *** Joins: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se)
[15:29:49] *** Quits: john99 (~john99@101.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:00] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:a77a:575:562:5f94:3a18)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:31:22] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[15:31:58] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.103) (Ping timeout: 272 seconds)
[15:32:40] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[15:34:26] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:06] *** Joins: john99 (~john99@101.246.103.34.bc.googleusercontent.com)
[15:36:08] *** Joins: savolla (~quassel@84.44.28.28)
[15:36:26] *** Quits: savolla (~quassel@84.44.28.28) (Client Quit)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:09] *** Joins: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs)
[15:39:02] *** Joins: dhamla (~dp@2401:4900:1916:1020:9eb1:7ab2:f366:b79c)
[15:39:16] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:10] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[15:45:13] *** Quits: john99 (~john99@101.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[15:45:30] *** Joins: X-Scale` (~ARM@31.22.144.77)
[15:45:34] *** Joins: voidsync (~void@user/voidsync)
[15:47:24] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[15:47:42] *** Quits: X-Scale (~ARM@66.26.54.77.rev.vodafone.pt) (Ping timeout: 252 seconds)
[15:47:42] *** X-Scale` is now known as X-Scale
[15:48:02] *** Parts: dhamla (~dp@2401:4900:1916:1020:9eb1:7ab2:f366:b79c) (Leaving)
[15:48:14] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[15:53:37] *** Joins: kts_ (~kts@103.73.237.147)
[15:54:08] *** Quits: kts (~kts@103.73.237.217) (Ping timeout: 272 seconds)
[15:57:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:58:09] *** Quits: kts_ (~kts@103.73.237.147) (Ping timeout: 252 seconds)
[15:59:37] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[15:59:57] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:00:22] *** Joins: kts (~kts@103.73.237.155)
[16:00:49] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:157b:b0a6:78b4:a5b2)
[16:00:49] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:157b:b0a6:78b4:a5b2) (Changing host)
[16:00:49] *** Joins: skapata (~Skapata@user/skapata)
[16:04:08] *** Joins: Viewday111 (~Viewday@user/viewday)
[16:05:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:05:40] *** Viewday111 is now known as Viewday11
[16:08:31] *** Joins: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[16:09:04] <retr0> can C typecast an object but for an entire scope
[16:09:43] <ioxzev1z> retr0, what do you mean?
[16:09:50] <retr0> (int)address156{ ... }
[16:10:13] <retr0> now you only need to do address inside of the braces
[16:10:24] <retr0> not (int)address
[16:10:48] <Svitkona> assign it to another variable
[16:11:37] <retr0> hmm
[16:11:53] <retr0> maybe a macro can do it
[16:14:36] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[16:15:57] <AStorm> or you could assign it to a pointer or a variable
[16:16:06] <ioxzev1z> iirc C doesn't have named scopes other than functions. e.g. void foo() { { inner scope } blah... }, not sure how you could have a named scope like void foo() { address156 { address156 scope } }
[16:16:12] <ioxzev1z> Maybe I misunderstand
[16:16:43] *** Joins: jellie (~luv_panda@user/jellie)
[16:16:46] <AStorm> no, that's not how it works, you would have int address156 = (int)something_that_gets_address156();
[16:16:49] <retr0> its a scope but for to typecast stuff
[16:17:25] <retr0> ok what if its a literal
[16:17:36] <retr0> (int)0x156
[16:17:56] <retr0> {...}
[16:18:00] <AStorm> with a literal it's typically unnecessary to cast
[16:18:13] <AStorm> there are suffixes for numbers
[16:18:26] <AStorm> also probably for something more exotic like wchar_t
[16:18:27] <retr0> what if you want to convert the format of a literal
[16:18:41] <retr0> say from hex to ternary
[16:18:53] <AStorm> yes you cast it, you can assign the result of a cast to a variable
[16:18:59] <AStorm> (or even a constant, as may be)
[16:19:07] <retr0> you gotta typecast it to int to increment an address
[16:19:16] <AStorm> uh no
[16:19:20] <retr0> hrm ok
[16:19:21] <AStorm> you should use ptrdiff_t
[16:19:31] <sham1> Or uintptr_t
[16:20:17] <AStorm> if these don't exist on your platform, you get to figure out what the pointer type is
[16:20:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:20:36] <AStorm> (then again that means it's some ancient pre-C99)
[16:21:52] <kplant> (u)intptr_t shouldn't be used for pointer arithmetic
[16:22:11] <kplant> it's guarantees are about storage, not modification
[16:22:14] <kplant> its*
[16:22:21] <AStorm> yes, which is why I said ptrdiff_t :)
[16:22:26] <AStorm> that one is for arithmetic
[16:22:39] <sham1> You can still do arithmetic with them
[16:22:46] <retr0> never heard of that
[16:22:48] <kplant> you shouldn't if you want your code to be portable
[16:22:49] <AStorm> it's not guaranteed to work correctly
[16:23:06] <AStorm> uintptr_t in particular can cause issues when subtracting
[16:23:08] <sham1> Hm, peculiar. Should probably look into that
[16:23:18] <AStorm> being unsigned and all
[16:24:36] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[16:25:19] <mort> Random question: Does C somehow know that an integer literal in a uint64_t array is supposed to be 64 bit? I would have expected the literal in `uint64_t foo[] = { 0x88229933ff88f734 }` to be truncated, but gcc isn't warning about that
[16:26:12] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[16:26:23] <clarity> It uses the smallest integer type that can represent the constant
[16:26:28] *** Joins: seninha (~seninha@user/seninha)
[16:26:33] <clarity> (But no smaller than int)
[16:26:35] <AStorm> you're supposed to use the suffix on the literal
[16:26:36] <retr0> the fpu is 80 bits
[16:26:50] <mort> see those two replies are contradictory
[16:26:52] <AStorm> 0x88ULL for example is uint64_t
[16:27:06] <AStorm> 0x88229999999999 without suffix is truncated to int
[16:27:11] <clarity> Nope
[16:27:23] <AStorm> actually unsigned long long not uint64_t but close enough ;)
[16:27:32] <clarity> You don't need a suffix unless you want to force a specific type
[16:27:37] <clarity> It will not truncate
[16:28:02] <AStorm> that is correct... though you do get a warning in certain instances
[16:28:08] <sham1> One can also do stuff like UIN64_C() to force a literal to be uint64_t
[16:28:43] <mort> https://godbolt.org/z/cPdnzzE4j clarity seems correct
[16:29:00] *** Quits: kts (~kts@103.73.237.155) (Quit: Konversation terminated!)
[16:29:01] <mort> 0x8877665544332211 is an 8-bit type, 0x44332211 is 4-bit
[16:29:08] <retr0> bbl
[16:29:14] <AStorm> the what
[16:29:15] <mort> TIL
[16:29:27] <AStorm> that is a hex literal
[16:29:37] <mort> yes
[16:29:52] <AStorm> that's bytes my dude ;)
[16:30:11] <sham1> It's just a number
[16:30:20] <AStorm> well sizeof returns bytes
[16:30:31] <mort> sorry, I meant 8-byte and 4-byte, yes
[16:30:55] <sham1> Yes, sizeof returns bytes. Of course a byte need not be an octet
[16:31:00] <AStorm> then there are bit literals, and fun with enums
[16:31:21] <mort> the point is, 0x8877665544332211 isn't truncated
[16:31:44] <ioxzev1z> ...
[16:31:47] <sham1> Indeed, and it shouldn't be
[16:33:02] <AStorm> unless you miss an x and it happens to be correct in octal and you fool yourself
[16:33:13] *** Quits: jkotra (~jkotra@117.98.194.182) (Ping timeout: 256 seconds)
[16:33:20] <AStorm> automatic octal in C is such a crock
[16:33:21] *** Quits: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[16:33:39] *** Quits: retr0 (~retr0@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[16:34:27] *** Joins: jkotra (~jkotra@117.98.201.12)
[16:35:02] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:35:10] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:35:41] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[16:35:52] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) ()
[16:37:15] <sham1> Octal should have been 0o123
[16:37:23] <sham1> Although the o does look like 0
[16:37:57] <ioxzev1z> Isn't much of a problem with C, any number starting with 0 is octal
[16:38:58] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:39:40] <sham1> Unless followed by X for hexadecimal or b for binary
[16:39:59] <ioxzev1z> sham1, right, but I was referring to the "automatic octal in C is such a crock" comment
[16:40:34] <sham1> Well it is, because if one doesn't notice it, it can get annoying even if a little bit
[16:41:14] <sham1> For example, 0x12 is 18 while 012 is 10. One can notice that fairly easily but it's still annoying
[16:41:28] <AStorm> sham1: 012345 is an octal
[16:41:45] <sham1> Yes?
[16:41:46] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:42:15] <AStorm> yeah could be better if they removed it some day, forcing 0o or whatever the notation
[16:42:20] <sham1> I know how integer literals work
[16:42:31] <clarity> I think they're called integer constants
[16:42:33] <ioxzev1z> Still waiting for 0b
[16:43:17] <NRK> wasn't there some library/header that defined all the 0b ?
[16:44:32] <sham1> That'd be nice. Thankfully with C2023 that can be done away with, and bitmasks will finally make sense
[16:45:46] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:46:33] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[16:47:21] *** Joins: jellie (~luv_panda@user/jellie)
[16:47:37] *** Quits: ironman (~ironman@103.124.143.138) (Remote host closed the connection)
[16:48:01] *** Joins: ironman (~ironman@103.124.143.138)
[16:48:15] *** Quits: BinarySavior_ (~BinarySav@josh.vet) (Remote host closed the connection)
[16:48:32] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[16:51:47] <sham1> For example, while it is a one-time thing to figure out the masks and such for UTF-8 for example, I'd rather use 0b01000000 and 0b11000000 rather than the hexadecimal equivalents. It makes the code more expressive
[16:54:33] *** Joins: kriss (~kriss@213.239.83.90)
[16:56:17] *** Quits: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877) (Ping timeout: 240 seconds)
[17:03:10] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[17:04:57] *** Quits: ironman (~ironman@103.124.143.138) (Quit: Leaving)
[17:05:43] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[17:06:09] *** Quits: hinata (~hinata@2409:4042:2ea3:e72b:d0fe:88f9:ed5b:12df) (Quit: Leaving)
[17:07:20] *** Joins: strajder (~strajder@user/strajder)
[17:09:05] <goated> Hello, I wanted to find out how long by default int is without specifying short, long, signed or unsigned and the biggest number I could get before it overflows is 2,147,483,647 which is a signed long. I wanted to know if this default length is the same in most envrionments and found this https://stackoverflow.com/questions/3618011/c-what-is-the-default-length-of-an-int and it has answers saying that it depends
[17:09:11] <goated> on the CPU and/or the compiler and some answers saying that int is no shorter than short and no longer than long.
[17:10:33] <goated> is it true that int by default will always be no shorter than short and no longer than long on all OSs and CPUs?
[17:11:24] <goated> and if I want to make my programs compatible with other OSs, CPUs or compilers should I set the length manually or does it even matter?
[17:12:20] <sham1> Well an int is at least 16 bits as is short int
[17:12:40] <clarity> It is true that it is no shorter than short and no longer than long
[17:13:58] <sham1> Yeah, so char â‰¤ short int â‰¤ int â‰¤ long int â‰¤ long long int, and that's the most one can rely on
[17:14:12] <NRK> goated: you have minimums
[17:14:18] <sham1> Aside from the minimum required lengths of the types
[17:14:27] <NRK> if you want exact width ints you can use <stdint.h>
[17:15:18] <sham1> Although for extra special portable code, one would use the least versions there
[17:16:02] <NRK> also you don't need to do any overflow to check that, there's <limit.h> which defines UINT_MAX
[17:16:19] <goated> sham1: what do you mean by versions? like short, long, unsigned, signed?
[17:16:28] *** Joins: soapsudsxx (~soapsudsx@209.221.40.136)
[17:16:43] <goated> oh thanks NRK
[17:17:04] <clarity> uint_least32_t etc
[17:17:10] <sham1> uint_least32_t instead of uint32_t for example. Same for signed, except it's int_least32_t and such
[17:17:42] <goated> oh
[17:17:44] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 272 seconds)
[17:19:03] *** Joins: jellie (~luv_panda@user/jellie)
[17:20:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[17:21:00] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[17:21:46] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[17:22:49] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[17:24:12] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[17:24:17] <goated> btw I don't have stdint.h included but I can use __uint32_t for example. am I supposed to include stdint.h anyways?
[17:24:35] <sham1> You are
[17:24:59] <goated> oh, what's the difference tho?
[17:25:13] <sham1> One is portable, the other isn't
[17:25:34] <sham1> __uint32_t is also a reserved name
[17:26:14] *** Joins: kts (~kts@103.73.237.56)
[17:27:13] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:27:41] <goated> alright, how come I am able to use __uint32_t without including anything? is it just a part of the language then?
[17:27:57] <sham1> It's part of your specific implementation you're using
[17:29:34] <goated> alright thanks for the help
[17:40:27] *** Joins: geeknix (~pi@2001:e68:5432:ee11:f781:3a04:b549:b877)
[17:40:38] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:41:03] *** Joins: seninha (~seninha@user/seninha)
[17:42:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:42:26] *** Quits: soapsudsxx (~soapsudsx@209.221.40.136) (Remote host closed the connection)
[17:43:03] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[17:43:10] *** Parts: ASUS (~ASUS@user/ASUS) (Leaving)
[17:43:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[17:49:24] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 272 seconds)
[17:50:37] <goated> btw if using stdint.h is supposed to make code more portable why isn't it use more often?
[17:50:46] *** Joins: jellie (~luv_panda@user/jellie)
[17:51:00] <goated> are there any reasons not to use it?
[17:51:12] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:51:42] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:51:57] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:52:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[17:52:49] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[17:53:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[17:53:35] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[17:53:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:53:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:53:43] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:26] <clarity> goated: It's not about making your code more portable
[17:55:27] <goated> what do you mean?
[17:55:29] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:56:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:56:29] <clarity> goated: It provides you with some types
[17:56:33] *** Quits: user282069 (~user@li1512-248.members.linode.com) (Quit: WeeChat 2.3)
[17:56:34] <clarity> That has nothing to do with portability per es
[17:57:00] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[17:57:49] <goated> clarity: but those types will have the same size on all architectures, no?
[17:57:58] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:58:21] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:58:25] <goated> unlike using the built in unsiged, signed, long and short
[17:58:31] <goated> right?
[17:58:46] *** Joins: seninha (~seninha@user/seninha)
[17:59:02] <clarity> Well, the exact width ones do, yes
[17:59:25] <kplant> many of those types are not guaranteed to exist on all architectures
[17:59:32] <kplant> (intX_t)
[17:59:41] <goated> well yea
[18:00:40] *** Joins: AmR (~AmREiSa@102.44.191.232)
[18:02:07] <goated> so when should I use stdint.h instead of the built in types?
[18:02:45] <goated> if they both can be bad or good for portability?
[18:02:48] <goated> how do you even decide?
[18:02:51] <clarity> Whenever you need one of the types it provides
[18:04:16] *** Joins: Viewday112 (~Viewday@user/viewday)
[18:04:57] <clarity> Or whenever you find it convenient enough to use them and disregard any effect it may have on portability
[18:05:02] *** Joins: oxfuxxx (~oxfuxxx@188.95.55.94)
[18:05:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[18:05:49] *** Viewday112 is now known as Viewday11
[18:06:58] <clarity> For example, maybe I need to do modular arithmetic on a 64-bit unsigned type.  Using an exact width type for that is rather convenient compared to the alternative.
[18:07:02] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[18:07:03] <goated> clarity: all the types in stdint.h are possible to be made with built in types aren't they? like uint64_t is just unsigned long long int
[18:07:17] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[18:07:35] <goated> oh
[18:08:35] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[18:09:01] <twkm> no.
[18:09:23] <goated> can you please elaborate? no what? what types aren't available?
[18:09:24] <twkm> then again one seldom actually needs exact width.
[18:09:38] <goated> or did you not respond to me?
[18:09:44] <clarity> goated: I don't think exact width types need to correspond to the standard integer types
[18:09:53] <twkm> unsigned long long might be other than 64 bits wide.
[18:10:32] <twkm> it must be at least 64 bits wide, where uint64_t must be exactly.
[18:10:35] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[18:11:48] *** Quits: oxfuxxx (~oxfuxxx@188.95.55.94) (Ping timeout: 252 seconds)
[18:11:51] *** Quits: Dotz0cat (~Dotz0cat@173.186.192.244) (Read error: Connection reset by peer)
[18:11:52] <twkm> so uint64_t might be just unsigned long long, but it might not.
[18:11:58] <goated> so on all CPUs unsigned long long will be 64 bits or wider if the CPU supports 64 bit ints?
[18:12:06] <goated> it can't be shorter?
[18:12:28] <edk> it can't ever be shorter anywhere or the language is not C
[18:12:35] <goated> oh
[18:12:36] <twkm> it cannot be narrower, at least not if it wants to conform with the language.
[18:13:11] <twkm> whether it is wider is a guess, that might be false today but true tomorrow.
[18:13:42] <edk> (if you wanted to implement C99 on an arch without 64-bit arithmetic you'd have to emulate it in software just like you had to emulate 32-bit arithmetic back in the day)
[18:14:29] <AStorm> no, the type is optional
[18:14:36] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[18:14:51] <AStorm> even in C11
[18:15:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[18:15:37] <edk> uint64_t is optional, but unsigned long long isn't
[18:15:51] <AStorm> it has to be provided if machine architecture can handle it
[18:16:04] <AStorm> yeah, but unsigned long long may be shorter than you'd expect :)
[18:16:10] <edk> no it may not
[18:16:15] *** Joins: Xgc (~Xgc@user/xgc)
[18:16:41] <AStorm> also ULL might not be provided either I think, I'll check
[18:17:22] <AStorm> it is specified but optional I think, digging through standard to not lie
[18:18:14] *** Joins: Dotz0cat (~Dotz0cat@98.19.251.149)
[18:18:33] <AStorm> (oh also it may be longer :P )
[18:19:26] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[18:19:51] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Excess Flood)
[18:19:59] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[18:20:29] <goated> it depends on CPU architecture then if a unsigned long long might be longer than 64 bits?
[18:20:44] <AStorm> yes, though longer is rare
[18:20:53] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:20:53] <goated> ah
[18:21:04] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 272 seconds)
[18:21:05] *** Joins: ASUS_ (~ASUS@user/ASUS)
[18:21:08] *** Quits: ASUS_ (~ASUS@user/ASUS) (Client Quit)
[18:21:58] <goated> but does it matter if it's longer than 64 bits only when you need to do something with the number in binary?
[18:22:02] <AStorm> unsigned long long int being alias to uint_least64_t... which is optional
[18:22:30] *** Joins: jellie (~luv_panda@user/jellie)
[18:22:50] <goated> or are there any other reasons why you wouldn't want an unsigned long long int to be longer than 64 bits?
[18:23:11] <clarity> What if I want 128 bit integers and want to map them to standard types?
[18:23:14] <AStorm> performance and memory use mostly
[18:23:42] <goated> oh okay
[18:23:44] <goated> thanks
[18:23:47] <AStorm> if you have 128-bit integers, then they probably are available under uint_least64_t (or some extension like __int128_t)
[18:24:15] <koollman> I want 128bits chars and to be done with all that nonsense :)
[18:24:18] <AStorm> you should probably always use a sizeof with these "at least" sized types when bit twiddling them
[18:25:47] <AStorm> there's also uintmax_t which potentially might be different from even uint_least64_t
[18:26:17] <AStorm> then again, this is some Kraken territory, dragons and nasal demons abound
[18:29:05] <AStorm> if you need it, standard method for checking for unsigned long long besides trying to compile program with it is to check for ULLONG_MAX in limits.h
[18:29:20] <twkm> AStorm: fasts and leasts for 8, 16, 32 and 64 are not optional.  exacts are sort of optional: they are required when the criteria are present otherwise must not exist.
[18:30:59] <AStorm> fasts and leasts are optional, that was clarified after the draft; there was a consistency issue with C++11
[18:31:41] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[18:32:00] <AStorm> C++11 had some funny thing about whether they had to exist, see LWG issue 2820
[18:32:18] <AStorm> they or the defines, there was some monkey business
[18:33:21] <NRK> c++ is monkey business
[18:33:29] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:34:44] <AStorm> the legalists of C++ exactly interpreted the C11 standard like twkm
[18:34:57] <ioxzev1z> What is the difference between fast and normal int?
[18:35:02] <twkm> you mean they could read?
[18:35:05] <AStorm> so they made uint_fast64_t a... 32-bit type when there's no 64-bit type.
[18:35:13] <AStorm> it's hilarious
[18:35:39] <twkm> fast suggests that some arithmetic operation is quicker with that type that the alternative.
[18:35:41] <AStorm> because it says "unsigned integer type"
[18:36:35] *** Joins: teepee (~teepee@openscad/teepee)
[18:36:36] <sham1> fast should be like least except fast
[18:36:57] <twkm> indeed, least but for something it is faster.
[18:37:29] <sham1> Which is why {u,}int_fast{16,32,64}_t in AMD64 is all {u,}int64_t
[18:37:45] <sham1> The only one that isn't is {u,}int_fast8_t
[18:37:57] <sham1> ,cc ptype("uint_fast32_t");
[18:37:59] <candide> sham1:  "uint_fast32_t" = char [14]
[18:38:08] <AStorm> compiler may also be funny when optimizing things that use uint_fast*_t sometimes
[18:38:09] <sham1> Oh wait, damn it
[18:38:15] <sham1> ,cc ptype(uint_fast32_t);
[18:38:17] <candide> sham1:  uint_fast32_t = unsigned long
[18:38:17] <AStorm> as-is rule is pretty good
[18:38:19] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.4)
[18:38:25] <sham1> ,cc sizeof(unsigned long)
[18:38:27] <candide> sham1: no output: sizeof(unsigned long) = 8
[18:38:34] <twkm> itym, as-if.
[18:38:38] <AStorm> uh, as-if yes
[18:39:28] <AStorm> there's a good reason to never use the _least and _fast types in public ABI really
[18:41:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[18:44:06] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[18:44:10] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[18:44:33] <AStorm> theoretically you have to provide all of unsigned long long and the least64 and fast64
[18:44:48] <AStorm> however... standards vs embedded breaking the standards with a compile option
[18:45:04] <AStorm> (because the type will induce slow emulation)
[18:45:15] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 256 seconds)
[18:46:18] <twkm> *boggle*
[18:47:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:47:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:47:34] *** Joins: wroathe (~wroathe@user/wroathe)
[18:48:12] <cuppajoe> I am trying to free() a dynamic array of dynamic strings, by first looping through and freeing each string and then freeing the main array. However, I am getting the error `free(): double free detected in tchache 2.
[18:50:27] <clarity> You probably did something wrong.
[18:50:30] <twkm> perhaps one of those pointers was a copy, not a fresh malloc.
[18:50:30] *** Joins: vysn (~vysn@user/vysn)
[18:51:13] <cuppajoe> clarity: that was my first thought as well
[18:51:55] <clarity> What was the second thought?
[18:51:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:52:15] <cuppajoe> I malloc'd them in the same way that I freed them. First I allocated the number of strings, and then I allocated each string.
[18:52:32] <kplant> show us some code
[18:52:56] <twkm> except that one.  an allocation debugger can help.
[18:53:49] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[18:55:59] <twkm> e.g., mempatrol, purify, or valgrind.  or ... damn, oh well.
[18:57:56] <vysn> in the middle ages used to drink ground up mummies as a health juice.
[18:58:05] <vysn> oops, wrong channel sry
[18:58:59] <NRK> apology not accepted, you must pay with blood
[18:59:42] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 272 seconds)
[19:00:20] *** Quits: KevinX (~KevinX@user/KevinX) (Ping timeout: 272 seconds)
[19:01:45] *** Joins: KevinX (~KevinX@user/KevinX)
[19:01:45] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[19:02:31] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0)
[19:04:29] <vysn> it was meant for a discussion in ##Programming
[19:04:46] *** Joins: yagamisa1o (~SingSong@120.197.255.246)
[19:05:06] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0) (Client Quit)
[19:07:46] *** Joins: iomari891 (~iomari891@105.112.138.38)
[19:09:45] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[19:09:59] *** Joins: meator (~meator@user/meator)
[19:14:16] *** Quits: boB_K7IQ (~boB_K7IQ@174-26-254-41.phnx.qwest.net) (Ping timeout: 272 seconds)
[19:14:51] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[19:15:00] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[19:15:00] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[19:17:08] *** Joins: iomari891 (~iomari891@102.89.3.240)
[19:18:38] *** Joins: absentia (~absentia@user/absentia)
[19:20:48] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[19:21:12] *** Quits: dsrt^ (~dsrt@50.235.176.163) (Remote host closed the connection)
[19:21:29] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[19:22:45] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[19:23:11] *** Joins: mahmutov (~mahmutov@37.155.38.37)
[19:24:49] *** Joins: jellie (~luv_panda@user/jellie)
[19:25:01] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[19:28:26] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:34:36] *** Quits: iomari891 (~iomari891@102.89.3.240) (Read error: Connection reset by peer)
[19:35:09] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[19:38:12] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 240 seconds)
[19:38:34] *** Joins: dsrt^ (~dsrt@50.235.176.163)
[19:39:23] *** Joins: lispy (~lispy@user/lispy)
[19:39:58] *** Joins: iomari891 (~iomari891@105.112.138.38)
[19:40:34] *** Joins: pulse (~pulse@user/pulse)
[19:43:23] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[19:44:31] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:47:13] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[19:47:28] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[19:49:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[19:53:33] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[19:54:59] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[20:03:09] *** Quits: magic_ninja (~sparkie1@162-202-44-35.lightspeed.tpkaks.sbcglobal.net) (Ping timeout: 250 seconds)
[20:04:23] *** Joins: Viewday116 (~Viewday@user/viewday)
[20:05:12] *** Joins: jellie (~luv_panda@user/jellie)
[20:05:17] *** Parts: choosetheforce (~aen@75-23-239-136.lightspeed.cornca.sbcglobal.net) ()
[20:05:58] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[20:05:58] *** Viewday116 is now known as Viewday11
[20:06:20] *** Joins: magic_ninja (~sparkie1@2600:1700:3ab0:e9f0:2a65:85ea:282b:a802)
[20:11:10] *** Joins: Sqaure (~a@user/square)
[20:11:16] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[20:11:54] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[20:11:54] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[20:11:54] *** Joins: nortoh (~nortoh@user/nortoh)
[20:12:02] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[20:13:30] *** Joins: magla (~gelignite@55d42258.access.ecotel.net)
[20:15:47] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:20:57] *** Quits: pgib (~textual@173.38.117.82) (Ping timeout: 240 seconds)
[20:21:57] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:22:29] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0)
[20:24:32] <pinheadmz> can anyone recomend videos or a lecture about basic toolchain stuff? Looking to learn difference between .h and .c, compiling vs linking, and the roles of autogen / config / make
[20:28:37] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: reboot)
[20:29:38] *** Quits: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[20:31:00] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.186)
[20:32:15] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[20:32:16] *** Joins: smoke_ (~smoke@user/smoke)
[20:32:36] *** Quits: the_lanetly_052_ (~the_lanet@185.30.89.52) (Ping timeout: 252 seconds)
[20:32:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ed4e:5979:adfa:bb7b)
[20:32:45] <novns> pinheadmz, books
[20:32:49] <novns> read them
[20:33:04] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[20:33:07] <novns> videos are not the proper source for education
[20:33:19] <pinheadmz> that's like, just your opinion, man
[20:33:23] <novns> no
[20:33:35] <novns> videos are dumb
[20:33:47] <novns> you can learn very little from videos
[20:34:16] <pinheadmz> you cant possibly know that about me
[20:34:24] <novns> it's not about you
[20:34:47] <pinheadmz> ok reco me some books then, mind-reader
[20:35:18] <novns> k&r, modern c
[20:35:24] <pinheadmz> Ive been writing C and using the toolchain for years. I just need more abstract ways of thinking about it, and explaining it to others
[20:35:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:35:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:35:30] *** Joins: wroathe (~wroathe@user/wroathe)
[20:36:01] <nitrix> <vysn> in the middle ages used to drink ground up mummies as a health juice.
[20:36:01] <nitrix> <vysn> it was meant for a discussion in ##Programming
[20:36:06] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[20:36:07] <nitrix> What kind of programming is that...
[20:36:25] <novns> .h is just a header file for inclusion by preprocessor
[20:36:39] <supakeen> neither of those books goes into the toolchain
[20:36:41] <novns> and nothing more
[20:36:49] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[20:36:54] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[20:37:28] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[20:37:33] <novns> compiling compiles modules to object files, linking links those object files to an executable or to a library
[20:37:56] <supakeen> pinheadmz: ##workingset might be a channel to get answers about this
[20:38:10] <pinheadmz> thanks ill ask there too
[20:38:26] <novns> make is a tool for automation of compiling and linking
[20:38:26] <nitrix> It's organizational. The .c files contains the definitions and the .h file contains the declarations. This way, translation units can include the declarations and become aware of externally available definitions in other translation units.
[20:38:46] <novns> autotools are tools for creating makefiles easier
[20:38:57] <novns> that's it
[20:39:09] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ed4e:5979:adfa:bb7b) (Quit: Quit)
[20:39:22] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[20:39:30] <nitrix> Source files are compiled independently, they don't know about each other. That choice explains a lot of other consequential things after.
[20:39:40] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Remote host closed the connection)
[20:39:57] <nitrix> pinheadmz, ^
[20:40:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[20:40:47] <pinheadmz> thanks nitrix for your helpful answers
[20:41:01] <novns> pinheadmz, you will never find a video that explains these things.  99% of videos are just copypaste examples from stackoverflow with dummy comments
[20:41:04] *** Joins: seninha (~seninha@user/seninha)
[20:41:40] <novns> pinheadmz, and you can start with https://beej.us/guide/bgc/
[20:41:41] <candide> Title of novns's link: Beej's Guide to C Programming
[20:41:47] <novns> though it have some issues
[20:42:05] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:42:24] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[20:42:31] <supakeen> it'd help if you actually linked things about the toolchain
[20:42:40] <nitrix> Most tutorials are created by people that barely just finally figured it out themselves. They are good shortcuts, but they aren't learning material.
[20:42:40] <supakeen> instead of introductionary C books and courses
[20:42:53] *** Joins: terminalpusher (~terminalp@2a01:586:9b7e:1:b838:4759:b1b5:e8b0)
[20:42:54] <novns> pinheadmz, and https://gustedt.gitlabpages.inria.fr/modern-c/ will clear your mind about C things
[20:43:23] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[20:43:27] <novns> and k&r book is still relevant
[20:44:24] <nitrix> Effective C isn't in the list of books, but I've had good success when recommending it. (https://nostarch.com/Effective_C)
[20:44:32] <phyto> hey all. wondering how to defer stringification in a macro properly. i tried this: https://bpa.st/EMPA but it doesn't evaluate the expression given. anyone know?
[20:45:12] <nitrix> phyto, Macros expand their arguments before the body gets substituted -- unless -- the operators # and ## are used.
[20:45:33] *** Joins: Akiva (~Akiva@user/Akiva)
[20:45:54] <phyto> right, and i thought that's what the indirection from ANSI_ESC_CURSOR_POS to ANSI_ESC_CURSOR_POS_ would do, but it seems to have done nothing
[20:46:08] <nitrix> phyto, People that want to keep the substitution end up creating wrapper macros that substitute first, otherwise the other one wouldn't.
[20:46:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:46:59] <phyto> nitrix, so what am i doing wrong in the code snippet?
[20:47:21] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[20:48:03] <nitrix> Hard to tell. I have an idea of want you mean by "defer", but without proper examples of expect/actual outputs, it'll be tricky to pinpoint.
[20:48:17] <phyto> ok let me show my invocation of the macro and what i expect to see.
[20:48:25] <nitrix> That'll help a lot :)
[20:49:48] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[20:49:54] <phyto> https://bpa.st/G5IQ i expect to see "Hello" roughly centered, and instead am seeing 'indow_size.rows / 2);(window_size.cols / 2)HHello'
[20:50:19] <phyto> sorry, without the parentheses. my clipboard didn't update
[20:50:45] *** Joins: cherrry9 (~jan@aein251.neoplus.adsl.tpnet.pl)
[20:51:39] <fizzie> The #X preprocessor operator just stringizes the given operand tokens. There's no way it could evaluate expressions like `window_size.rows / 2`.
[20:51:52] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[20:52:15] <fizzie> (It has to yield a string literal after preprocessing, and those values aren't known until runtime.)
[20:52:40] <phyto> oh i feel a bit silly now. yeah that makes sense. i will construct the string using a function then :)
[20:52:50] <phyto> thanks fizzie
[20:53:25] *** Quits: aradesh (~aradesh@user/aradesh) (Ping timeout: 250 seconds)
[20:55:53] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: WeeChat 3.4)
[20:56:12] *** Joins: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[20:58:12] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 240 seconds)
[21:00:11] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[21:00:15] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[21:00:58] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[21:02:14] *** Quits: phyto (~phyto@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: WeeChat 3.4)
[21:04:30] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 252 seconds)
[21:04:51] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Quit: leaving)
[21:05:24] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[21:06:29] *** Joins: masoudd (~masoudd@user/masoudd)
[21:09:02] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[21:09:49] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[21:10:02] *** Joins: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com)
[21:10:54] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:dcfd:93ee:4384:4372)
[21:11:21] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Remote host closed the connection)
[21:11:31] *** Joins: phrix (~phrix@185.76.176.47)
[21:11:45] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[21:12:52] *** Joins: bick (~kotaman@94.46.203.147)
[21:13:19] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Remote host closed the connection)
[21:14:20] *** Joins: aradesh (~aradesh@user/aradesh)
[21:16:30] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.186) (Ping timeout: 272 seconds)
[21:18:30] *** Quits: phrix (~phrix@185.76.176.47) (Quit: Leaving)
[21:18:47] *** Joins: phrix (~phrix@185.76.176.47)
[21:20:16] *** Joins: savolla (~quassel@95.10.207.85)
[21:22:50] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 272 seconds)
[21:23:02] *** Joins: sokan_ (~sokan@athedsl-303940.home.otenet.gr)
[21:23:16] *** Quits: sokan (~sokan@2a02:587:9e0b:9500:227:eff:fe16:865d) (Ping timeout: 245 seconds)
[21:23:23] <goated> btw does anyone know what the t after int64_ stands for?
[21:23:24] *** sokan_ is now known as sokan
[21:24:07] <Inline> type
[21:24:21] <goated> oh
[21:24:22] <goated> thx
[21:24:31] <Inline> int64_t int64 type
[21:24:47] *** Quits: phrix (~phrix@185.76.176.47) (Quit: Leaving)
[21:25:10] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:c1e6:fcc3:ea5e:488e) (Quit: fe23)
[21:25:41] <emias> :q
[21:25:44] <emias> Sorry.
[21:26:00] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 272 seconds)
[21:26:53] <NRK> goated: btw, don't use the "_t" suffix for your own types
[21:27:01] <NRK> just fyi
[21:27:09] <goated> alright
[21:27:18] <ChoHag> Did the standards people claim it or is that just advice?
[21:27:42] <NRK> it's reserved by posix afaik
[21:27:48] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:28:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[21:28:42] *** Quits: mahmutov (~mahmutov@37.155.38.37) (Ping timeout: 252 seconds)
[21:29:42] <goated> "    printf("%ld\n", INT64_MAX);
[21:29:45] <goated> shit
[21:31:22] <goated> wait
[21:31:57] <goated> https://bpa.st/NMVQ how come using %ld I can print INT64_MAX if INT64_MAX is like a long long?
[21:32:26] <goated> signed long long*
[21:32:35] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0) (Read error: Connection reset by peer)
[21:32:57] <sham1> ,cc ptype(int64_t)
[21:32:59] <candide> sham1:  int64_t = long
[21:33:02] <sham1> That's why
[21:33:34] <sham1> At least on the architecture the bot is running on, which is probably the same as yours, AMD64
[21:33:53] *** Joins: mahmutov (~mahmutov@5.176.27.2)
[21:34:03] <goated> oh
[21:34:10] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0)
[21:35:28] <pragma-> ,cc -m32 ptype(int64_t)
[21:35:29] <candide> pragma-:  int64_t = long long
[21:35:48] <ChoHag> Can it do non-intel archs?
[21:36:03] *** Joins: alch (~alch@151.68.181.102)
[21:37:02] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[21:37:09] <masoudd> ,cc printf("value: %" PRId64, INT64_MAX);
[21:37:11] <candide> masoudd: value: 9223372036854775807
[21:37:43] <pragma-> if i'm properly motiviated i could set up various virtual machines with different operating systems and archs and provide an option flag to ,cc to select from them
[21:38:10] <ChoHag> Are you so motivated?
[21:38:13] <pragma-> maybe
[21:38:28] <pragma-> what operating system/arch are you interested in?
[21:38:48] <ChoHag> I can't remember; a question I had (to myself, not in here) the other day.
[21:38:54] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[21:39:16] <ChoHag> Most likely to compare with a big-endian machine.
[21:39:33] <masoudd> maybe the new M1 mac cpu thing?
[21:40:01] <ChoHag> Isn't that just Intel|ARM surrounded by an apple-on-a-chip?
[21:40:15] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 252 seconds)
[21:40:49] <masoudd> I have no idea
[21:41:05] <goated> does anyone know from where the bot got the library that provides the ptype function?
[21:41:08] *** Quits: TheCoffeMaker_ (~TheCoffeM@200.126.129.149) (Quit: So long and thanks for all the fish)
[21:41:29] *** Joins: constxd (~brad@142.134.79.191)
[21:41:30] <ChoHag> Yeah the pedia says arm 8.
[21:41:33] <constxd> kings
[21:41:55] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:42:05] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:43:02] *** Quits: ckdCreations (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[21:43:54] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[21:45:48] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[21:45:53] <fizzie> pragma-: At a minimum, a SunOS/SPARC and a IRIX/MIPS, please.
[21:53:20] *** Joins: crashrep (~crashrep@user/crashrep)
[21:54:57] <ChoHag> Interesting. I'd have ARM would be the first choice but I think I'd go with those two also.
[21:55:07] <ChoHag> At least the cpu. Not so bothered by the OS.
[21:55:19] <ChoHag> s/have/& thought/
[21:55:40] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[21:55:42] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:247c:2205:328f:87d0) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:55:59] <ChoHag> I might use it then. It's much too easy to compile on x86 without bothering the bot to bother.
[21:56:11] <ChoHag> ... rarely.
[21:56:26] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[21:56:28] *** Joins: phrix (~phrix@185.76.176.47)
[22:00:09] *** Joins: rgrinberg (~textual@187.194.14.9)
[22:01:00] *** Quits: alch (~alch@151.68.181.102) (Ping timeout: 240 seconds)
[22:03:11] *** Joins: alch (~alch@151.34.194.43)
[22:03:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[22:03:47] *** Quits: phrix (~phrix@185.76.176.47) (Quit: Leaving)
[22:04:16] *** Joins: Viewday116 (~Viewday@user/viewday)
[22:05:16] *** Quits: dsrt^ (~dsrt@50.235.176.163) (Ping timeout: 272 seconds)
[22:05:39] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[22:05:39] *** Viewday116 is now known as Viewday11
[22:09:00] <pragma-> fizzie: noted
[22:10:32] <pragma-> fizzie: is solaris 10 acceptable?
[22:11:55] * pragma- squints at http://defcon.no/sysadm/playing-with-sunos-4-1-4-on-qemu/
[22:13:06] <pragma-> fizzie: wait, wait, you're joking, aren't you?
[22:13:18] * pragma- squints at the IRIX ISOs.
[22:13:36] <ChoHag> Yeah good luck with that.
[22:14:32] *** Joins: bick (~kotaman@94.46.203.147)
[22:14:51] *** nuxil_ is now known as nuxil
[22:15:26] <nitrix> pragma-, Can we get an esoteric PDP-11 or 10 in there? Something where CHAR_BIT != 8 or int == long.
[22:16:08] <nitrix> If you end up doing it, it could be fun to demonstrate how diversified C hosts can be.
[22:16:26] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:16:44] <ChoHag> pragma-: You'll probably do well using NetBSD as the OS.
[22:16:51] <ChoHag> Runs on practically everything.
[22:17:03] <ChoHag> Qemu has already given you the isolation you need.
[22:17:33] <pragma-> I certainly have the hardware to spare to set up 2 or 3 more VMs for candide to connect to, but... like... I have to be able to actually install and set them up!
[22:17:38] <ChoHag> Happy to help if you're not a bsd hacker.
[22:17:55] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-a8bd-9389-6663-3ff5.fixed6.kpn.net)
[22:19:22] <pragma-> What will NetBSD provide for ,cc that ,cc doesn't already do now?
[22:19:45] <ChoHag> It's a unix which is almost certain to run on any machine you try to throw it at.
[22:19:53] *** Joins: mrig (~mrig@user/mrig)
[22:20:18] <ChoHag> Given that I assume it's also pretty lightweight by default; openbsd which is based on it back in the mists of time certainly is.
[22:20:22] <sham1> As for what it will bring for ",cc", well it'll bring multiple platforms
[22:20:38] <sham1> Platforms to demonstrate certain quirks on
[22:21:36] <ChoHag> pragma-: I can speak more for open than net, but moving to bsd from linux was like moving from London to literally anywhere else with trees and green things.
[22:21:58] <pragma-> Right now ,cc runs on Fedora/AMD64. If I set up another VM, it should be a platform that showcases significantly different C semantics or something.
[22:21:59] <ChoHag> I realised I hadn't been breathing "air" at all...
[22:22:15] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-a8bd-9389-6663-3ff5.fixed6.kpn.net) (Ping timeout: 250 seconds)
[22:22:21] <ChoHag> There's much less bullshit after getting over the learning curve.
[22:22:58] <ChoHag> The differences would come from the CPU. Having a basically-the-same OS would be more helpful rather than less.
[22:24:10] <ChoHag> Oh and it comes with a complete compiler by default so setting it up should be little more than installing the base image, perhaps a few libraries and installing whatever your bot runs.
[22:24:32] <pragma-> sparc is big-endian
[22:25:51] <goated> integer suffixes are there to set the minimum about of bits for an integer? like "signed long x = 10" would be 1010 in binary but "signed long x = 10l" would be {28 0s}1010 in binary?
[22:26:06] <ChoHag> pragma-: Since I don't really know net I'll suggest openbsd; as you obviously know how to wrangle qemu get an openbsd installer and stick it on an amd64 vm. It's stupid easy.
[22:26:29] <pragma-> openbsd doesn't support VM socket
[22:26:45] <ChoHag> Incidentally I wrote an extremely minimal wrapper around (command-line) qemu years ago called nbsvm. Has some nifty zfs or lvm volume management built in. You might like it.
[22:27:03] <pragma-> I recently refactored candide's VM scripts to prefer VM socket and fallback to serial.
[22:27:13] <pragma-> ATM only Linux seems to support AF_VSOCK
[22:27:22] <Rounin> goated: We~ll, long might be a lot more than 32 bits, and I believe the suffix also affects the type of the number, not just the value... But something along those lines
[22:27:29] <pragma-> VM sockets are so much better than serial.
[22:27:54] <ChoHag> What about ethernet?
[22:28:04] <ChoHag> The overhead is high but the protocols are well supported.
[22:28:04] *** Quits: crudo (~crudo@livredigital.com) (Quit: BitchX: take the red pill)
[22:28:28] *** Quits: msk (~Thunderbi@89.205.124.40) (Remote host closed the connection)
[22:29:01] <ChoHag> I would avoid serial. Its proven flaky on qemu in the past.
[22:29:20] *** Joins: crudo (~crudo@livredigital.com)
[22:30:45] <pragma-> The VM has networking disabled to prevent abuse. It was simpler to configure qemu's serial emulation than to figure out how to configure a private and invisible ethernet side channel
[22:30:55] *** Quits: smoke_ (~smoke@user/smoke) (Remote host closed the connection)
[22:30:58] <ChoHag> Ah OK.
[22:31:12] *** Joins: smoke_ (~smoke@user/smoke)
[22:31:13] <ChoHag> There are ways but that's a sound design decision.
[22:31:16] <pragma-> but, as mentioned, I've recently refactored to prefer VM socket if they are available.
[22:31:49] <goated> Rounin: it's really confusing https://stackoverflow.com/questions/59256576/suffixes-for-integer-types here an answer says that it can determine the type but not change the type. I don't get it. also I get that it can be more than 32 bits I just thought for the example I could assume it's 32 bits.
[22:31:50] <pragma-> https://vmsplice.net/~stefan/stefanha-kvm-forum-2015.pdf
[22:32:26] <ChoHag> Zero configuration my arse.
[22:33:13] <ChoHag> You're losing packets, blocking or maintaining a (dynamic) buffer.
[22:33:51] <Rounin> goated: Let's say you type "double a = 3.0L;" (or is it l?) Anyway, it might compile, but your double won't become a long.., But the type of the 3.0L is still long
[22:34:06] <Rounin> I didn't read the post, though, but that might be what it means
[22:36:02] <goated> okay it's type doesn't change but what does adding "l" or "L" at the end do?
[22:36:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:36:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:36:17] *** Joins: wroathe (~wroathe@user/wroathe)
[22:36:25] <ChoHag> Indicate that the number should occupy wider storage than may be implied.
[22:36:40] <ChoHag> Also potentially it's signedness.
[22:36:56] *** Joins: tiotags (~tiotags@user/tiotags)
[22:37:03] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Quit: (  *  y  *  ))
[22:37:18] <ChoHag> 1 could be stored in a char. 1l could not. The case of the L is irrelevant.
[22:37:23] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[22:37:27] <goated> why would you need to occupy wider storage than the type can hold?
[22:37:40] <ChoHag> To avoid truncation of a partial result, mostly.
[22:38:20] <goated> partial result?
[22:38:33] <ChoHag> A mathematical expression with multiple operators.
[22:38:36] <ChoHag> a + b * c - d.
[22:39:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[22:40:17] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[22:40:37] <goated> alright I don't get it but thanks anyways
[22:41:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[22:41:37] <ChoHag> The result of adding or multiplying two numbers together may result in a number wider than the width of either of the operands.
[22:41:41] *** Joins: Charadon (~Charadon@155.138.164.183)
[22:41:49] <sham1> Well, one could write the expression ChoHag wrote as: x_1 = b * c; x_2 = a - x_1; x_3 = x_2 - d;
[22:41:50] <ChoHag> eg. in base 10, 99 + 99 could not fit within 2 digits.
[22:41:58] <sham1> Those are the partial results
[22:42:11] <sham1> And you want to have them to be wide so you don't necessarily truncate and lose information
[22:42:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:c1ac:1d08:39a0:9507)
[22:42:56] <ChoHag> So if the compiler tries to interpret x+y as adding together two ints, if both is near the limit of an int the result won't fit in an int. It should promote each argument and the result to a long to perform the addition.
[22:43:01] *** Joins: gog (~ada@user/gog)
[22:44:49] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[22:44:57] <caze> Are you guys crazy? Integer constants don't use storage.
[22:45:04] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:09] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[22:45:19] *** Joins: Akuli (~Akuli@82-203-164-73.bb.dnainternet.fi)
[22:45:33] <ChoHag> They most certainly do.
[22:45:40] *** Joins: Guest49 (~Guest49@188.147.101.242.nat.umts.dynamic.t-mobile.pl)
[22:45:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:46:08] <ChoHag> At base they may only be "in" the instruction stream but they're somewhere.
[22:46:21] <caze> ChoHag: Then you're no longer talking about C.
[22:46:59] <caze> Also, int i = 3 + 5;
[22:47:15] <caze> You're saying that storage must be made for both 3 and 5?
[22:47:17] <ChoHag> 3 and 5 are both in 8.
[22:47:20] *** Quits: Guest49 (~Guest49@188.147.101.242.nat.umts.dynamic.t-mobile.pl) (Client Quit)
[22:47:24] <caze> No they are not.
[22:47:41] <ChoHag> Setting aside storage for 8 will be enough.
[22:47:48] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[22:48:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:48:25] <caze> You are not able to decompose 8 into the components 3 and 5 in a way that distinguishes them from any other possible sum of integers that make 8.
[22:48:43] <ChoHag> I can.
[22:48:44] <caze> Yes, but that's not what you said.
[22:48:51] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:48:53] *** Joins: msk (~Thunderbi@89.205.124.7)
[22:49:01] <ChoHag> You may not be able to perform arithmetic on numbers under 10 but I'm OK with that.
[22:49:03] <gog> question re: va_list semantics. the standard says it's not ok to pass it into a function by value without subsequently using va_end on it. it does say that passing it as a pointer is fine, but on x86_64 the compiler complains with note: expected â€˜__va_list_tag (*)[1]â€™ but argument is of type â€˜__va_list_tag **
[22:49:23] <caze> ChoHag: You cannot unless you retain the information about which two numbers were used to compose the value of 8.
[22:49:29] <ChoHag> Or: You are splitting this hair too fine.
[22:49:36] <edk> ah yes the great va_list hack thing
[22:49:43] <gog> oh hey edk :p
[22:49:59] <gog> should i just be doing va_copy every time i need to pass it around?
[22:50:03] <sham1> What is this, a cross-over episode?
[22:50:09] <sham1> And yes, please va_copy it
[22:50:14] <sham1> It'll be better that way
[22:50:15] *** Quits: terminalpusher (~terminalp@2a01:586:9b7e:1:b838:4759:b1b5:e8b0) (Remote host closed the connection)
[22:50:15] <caze> ChoHag: Again, if you're not interested in this discussion, kindly be quiet.
[22:50:18] <goated> ChoHag: so if signed short = 16 bits does adding l to like 32767 and 1 "signed short x = 32767l + 1l" allow x to be promoted to long?
[22:50:19] *** Quits: msk (~Thunderbi@89.205.124.7) (Remote host closed the connection)
[22:50:26] <sokan> we have int *pa. *((pa++) + 2) means that we move pa +1 and then +2?
[22:50:50] <edk> yes, declaring a new va_list and va_copying into it is the way to be portable, although it shouldn't be necessary
[22:50:51] <ChoHag> Within the addition operation they would be, then the result would be truncated to x's short.
[22:51:01] <ChoHag> Possibly with undefined behaviour.
[22:51:04] <sham1> sokan: you read from pa + 2 and then after the read, at the next sequence point, you increment pa
[22:51:07] <caze> goated: There is no promotion. That is just its type.
[22:51:32] <goated> so what would you have to do for it to be prompoted?
[22:51:41] <goated> promoted*
[22:51:51] <ChoHag> Declare x as large enough to fit the result.
[22:51:58] *** Joins: msk (~Thunderbi@89.205.124.7)
[22:51:59] <sokan> sham1: so pa ++ is an increment that happens AFTER pa + 2
[22:52:01] <caze> goated: Objects typically do not change types in C.
[22:52:04] <sham1> sokan: yes
[22:52:25] <goated> sigh
[22:52:41] <caze> goated: What are you trying to do?
[22:52:44] <sokan> in conparison *((++pa) + 5) means that pa gets incremented by one then then moves by + 5
[22:52:53] *** Quits: msk (~Thunderbi@89.205.124.7) (Remote host closed the connection)
[22:52:58] <edk> "moves by" seems needlessly ambiguous
[22:53:15] <sokan> increments by 5?
[22:53:18] <goated> caze: understand what the integer suffix is for
[22:53:22] <ChoHag> pa moves by one then evaluates to an address 5 pa-sized objects higher.
[22:53:40] <edk> but in general operators which update their operand's value yield a value and also arrange for their operand to be updated
[22:53:49] <ChoHag> Then dereferences.
[22:53:53] <edk> these are independent and you don't know when the operand being updated will happen
[22:53:56] <caze> goated: It give the constant a type.
[22:54:10] <caze> goated: Constants don't use storage.
[22:54:30] <ChoHag> Constants don't use *heap or stack* storage.
[22:54:42] <caze> No, they don't use storage at all.
[22:54:46] <ChoHag> Constants use storage. Everything uses storage.
[22:54:57] <edk> ChoHag: in C they just don't use storage
[22:55:00] <caze> ChoHag: Please be quiet.
[22:55:08] *** Joins: msk (~Thunderbi@89.205.124.7)
[22:55:16] <goated> caze: why does the constant need a type?
[22:55:19] <caze> ChoHag: You're not interested in discussing C, you just don't realize yet.
[22:55:20] <ChoHag> Oh I'm sorry am I being too precise for C?
[22:55:29] <edk> you're being too imprecise
[22:55:30] <ChoHag> Should I not disambiguate between the instructions and the data?
[22:55:40] <caze> ChoHag: You are literally not talking about C at all.
[22:55:58] <ChoHag> Are we up in the ivory tower then?
[22:56:03] <ChoHag> Does C not exist on actual CPUs?
[22:56:09] <sham1> No
[22:56:33] <edk> whatever point you think you're making i really don't think it's helpful to anyone at any level
[22:56:41] <goated> caze: I mean if the variable type determines what you can put in the variable why give the literal/constant a type
[22:56:43] <edk> i feel like you're just finding an excuse to be pedantically correct about something
[22:56:45] <caze> goated: It affects how promotions are performed when the constant is involved in operations.
[22:56:58] <ChoHag> This entire discussion is pointless. Why not?
[22:57:25] <edk> if that's how you feel maybe it's time to take a step back
[22:57:41] <caze> > ChoHag: Again, if you're not interested in this discussion, kindly be quiet.
[22:57:54] <ChoHag> goated the noob was asking about the width of variables then caze chimed in about how constants don't take up space, which is true but neither relevant nor useful.
[22:57:59] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:58:15] <ChoHag> Width of values, I should say.
[22:58:17] <caze> He was asking about the width of constants.
[22:58:26] <nitrix> In case it's now known yet, objects don't actually have a type. They are storage for values and the values have a type.
[22:59:39] <caze> goated: If you perform an operation *before* the value gets stored in a variable with a particular range limitation for its type, you might lose range before the assignment is done.
[22:59:44] <edk> sokan: so anyway: in *((++pa) + 5) the actual incrementing is not guaranteed to happen before (or after) the dereference, which may not be relevant here unless pa + 6 points into itself, but is good to keep in mind in general
[22:59:56] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:00:22] <edk> if you did ++pa + pa or something you'd get inconsistent results
[23:00:25] <caze> ,cc unsigned long long x = UINT_MAX + 1;
[23:00:27] <candide> caze: no output: x = 0
[23:00:34] <caze> ,cc unsigned long long x = UINT_MAX + 1ULL;
[23:00:36] <candide> caze: no output: x = 4294967296
[23:00:42] <caze> goated: ^
[23:00:53] <goated> caze: oh I think I get it now lol
[23:01:02] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[23:01:03] <sokan> edk: undifined error case?
[23:01:20] <edk> yes it'd be undefined
[23:01:29] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[23:01:30] <edk> compilers will probably catch that particular one
[23:04:56] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[23:05:11] *** Quits: msk (~Thunderbi@89.205.124.7) (Remote host closed the connection)
[23:05:26] *** Joins: msk (~Thunderbi@89.205.124.7)
[23:05:28] <gog> ok, addendum to my prior question, how do i keep the states of the original and the copy of the va_list synchronized? am i going to have to keep a count of many times va_arg was called on the copy and then do that on the master?
[23:05:50] *** Joins: nabaiste^ (~nabaiste@50.235.176.163)
[23:06:07] <goated> caze: thanks so much bro
[23:07:01] <edk> gog: well you can just use the one copy for everything
[23:07:21] *** Quits: msk (~Thunderbi@89.205.124.7) (Remote host closed the connection)
[23:08:08] <caze> goated: no prob bro
[23:08:13] <gog> the copy will have to be discarded after every time it's passed though?
[23:08:45] <edk> why? you're passing pointers to it, i thought?
[23:08:53] <gog> that doesn't work right
[23:08:58] <edk> like this: https://github.com/edk0/tprintf/blob/master/tprintf.c#L314
[23:09:15] *** Joins: agoodm (~alan@2a00:23a8:4440:7fb:8f5c:cc2f:6765:526d)
[23:09:44] <gog> oh i understand now!
[23:09:47] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:c1ac:1d08:39a0:9507) (Quit: Quit)
[23:09:51] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:09:54] <gog> lemme give that a try
[23:10:15] <theseb> Can someone explain how this allows you to pass functions as args?...typedef int (* const decorableFnType)(int paramOne, int paramTwo);
[23:10:23] <theseb> it was from https://vilimpoc.org/blog/2010/12/24/decorators-in-c/
[23:10:27] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[23:10:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:10:50] <theseb> is the const necessary?
[23:10:53] <edk> no
[23:11:05] <edk> that specific typedef is kinda gross but the general idea is to use function pointers, and that's a typedef for a function pointer type
[23:11:10] <theseb> typedef int *myfunc(int a, int b); ok too?
[23:11:19] <edk> that won't be a function pointer
[23:11:20] <theseb> ok
[23:11:21] <theseb> nice!
[23:11:33] <theseb> edk: if that is gross how would you clean it up?
[23:11:39] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[23:11:40] <agoodm> hello all, further to chatter on here a few days ago I found a way to cause LibRaw to output uninitalized memory.  I reported this here: https://github.com/LibRaw/LibRaw/issues/451 however it feels like they dismissed my report.  The memory comes from malloc, so its contents is not defined I guess, but on my dev VM the contents is *always* nulls, even after 10k runs or so...  Is there some kind of O/S behavior going on to cause this?
[23:12:08] <edk> to typedef a function pointer like that you'd do: typeef int (*myfunc)(int a, int b); but that's still relatively gross. i'd argue that you should pretty much never include top-level pointiness as part of your typedef
[23:12:20] <edk> so typedef the function type: typedef int myfunc(int a, int b);
[23:12:47] <edk> then to talk about a function pointer you'd declare it like any other pointer: myfunc *a_pointer_to_myfunc;
[23:13:08] <fizzie> pragma-: Well, yes, it was kind of a jokey suggestion. I think (some versions of) Solaris do run on QEMU/SPARC, though. IRIX... well, maybe not.
[23:13:24] <bch> agoodm: depends on the allocator and/or allocator config I suspect.
[23:13:39] <theseb> edk: thanks
[23:13:57] <agoodm> bch, malloc in whatever its default configuration is on ubuntu 20.04?
[23:14:03] <gog> edk: okay, so this va_copy then pass pointer trick worked perfectly
[23:14:08] <edk> \o/
[23:14:26] <pragma-> It would certainly be interesting to have an "unusual" system for demonstrationing certain pitfalls and gotchas.
[23:14:27] <gog> thanks :D
[23:14:57] <pragma-> But I'm not sure if I'm going to be able to install a PDP-11 system as nitrix would like.
[23:18:00] *** Quits: smoke_ (~smoke@user/smoke) (Remote host closed the connection)
[23:18:20] *** Joins: smoke_ (~smoke@user/smoke)
[23:18:50] *** Parts: gog (~ada@user/gog) (byee)
[23:19:50] <nitrix> Just think of all the stories you'll have once that gets moved in the middle of your living room.
[23:20:16] * pragma- squints at "demonstrationing"
[23:21:05] <rcf> pragma-: try a PDP-10 instead, muh 36-bit words
[23:21:14] <nitrix> ,urban demonstrationing
[23:21:17] <candide> 1/10: (+30/-4) 1.To prove or show something by giving any evidence. 2.To make actions,to tell that you've a particular quality. 3.To make actions to show that how to do something. 4.To take part in a protest or an event that is supporting something. Â«1.she showed his blooded shirt just to demonstrate that he has been killed!!!! 2.He was trynna show that he could dance good by dancing in front of me in th... <truncated; https://0x0.st/o8Px.txt>
[23:21:45] <nitrix> Close enough. They have an RFC, next English version will include it.
[23:22:11] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:22:16] <edk> then people will start demonstrationingationing
[23:22:43] *** Quits: rgrinberg (~textual@187.194.14.9) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:23:15] <clarity> ,urban angelstrationing
[23:23:17] <candide> (+1/-0) Da opposite of "demonstrate". Â«Wonder what da opposite action of "demonstrate" would actually be, since merely showing how good something is or how it works is not always a "demonic" or horrible undertaking? Maybe to "angelstrate" something is where you merely claim dat a product or practice will work well, and others trustingly view you as being such an "angel" dat they do not ask you to actuall... <truncated; https://0x0.st/o8Pg.txt>
[23:23:35] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[23:23:53] <edk> congratulations that's the stupidest thing i've ever seen
[23:24:21] <nitrix> I like it. Make English Great Again. MEGA.
[23:24:45] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[23:24:57] *** Quits: savolla (~quassel@95.10.207.85) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:26:36] *** Quits: smoke_ (~smoke@user/smoke) (Quit: Leaving)
[23:26:52] *** Joins: smoke_ (~smoke@user/smoke)
[23:27:29] <agoodm> https://askubuntu.com/questions/608885/abnormal-behaviour-of-malloc-fuction <-- based on the answer here, it seems if I were to craft my input to allocate far less memory I would be more likely to get non null output?
[23:29:48] <caze> agoodm: What were you expecting?
[23:30:09] *** Quits: slidercrank (~slidercra@user/slidercrank) (Read error: Connection reset by peer)
[23:33:45] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:33:48] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[23:33:58] <agoodm> caze, I was expecting that if I found a bug which caused uninitialized memory to get into the output; I would get garbage data
[23:34:13] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[23:34:16] <caze> agoodm: What makes you think that isn't garbage data?
[23:34:26] <agoodm> but it seems the memory it initialized to 0 'somewhere else' as leaked memory is always nulls, at least in the 10k or so runs I've completed
[23:35:10] <caze> agoodm: Storage returned by malloc has "indeterminate" value. If you have an expectationg of what "indeterminate" values look like, then you don't really know what indeterminate means.
[23:35:43] <agoodm> I was expecting it to vary, but so far (in my limited experience) I only see nulls?
[23:35:51] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[23:36:09] <caze> agoodm: Why were you expecting it to vary? Indeterminate doesn't mean random, as in, random throw of dice.
[23:36:18] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 252 seconds)
[23:36:51] <agoodm> because I was expecting to get whatever was in ram at that location, which might be nulls, but could also feasibly be other data related to other process that previously used that location?
[23:37:26] <caze> agoodm: That is possible, but not required.
[23:37:53] <caze> agoodm: The concept is that there is no requirement for what is there.
[23:38:01] <agoodm> so my thought it 'something' else is zeroing the memory? Perhaps the kernel per that link?
[23:38:10] <caze> agoodm: Also possible.
[23:38:28] <agoodm> so therefore if I crafted an input to use less memory I may see different results?
[23:38:29] <caze> agoodm: There is no requirement for any particular pattern to be there.
[23:38:46] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[23:39:37] <caze> agoodm: I didn't look at your program, but in general, if you have a buffer, and you aren't using all of it, then you need a variable to keep track of how much of it is in use, and only read from that region.
[23:41:18] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:41:30] <caze> > agoodm: The concept is that there is no requirement for what is there.
[23:41:49] <caze> This leads to the corollary that there can't be a prohibition on any particular pattern being there.
[23:42:04] <caze> So you shouldn't be surprised by *anything* that happens to be there.
[23:42:19] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:5c57:7f45:b808:8adb)
[23:45:53] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:dcfd:93ee:4384:4372) (Ping timeout: 250 seconds)
[23:46:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[23:47:08] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:48:29] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:49:21] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[23:50:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:50:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:51:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:52:04] *** Joins: wroathe (~wroathe@user/wroathe)
[23:53:37] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b524:42ea:a6:2b1c)
[23:54:54] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:89c:f82b:eb69:d057)
[23:56:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:56:41] <SaltHillStroller> Probably meaningless question, but thoughts on char* vs uint8_t* for serialized buffer pointers
[23:57:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:58:26] <masoudd> char doesn't have to be 8 bits. So there is a difference there
[23:58:42] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:89c:f82b:eb69:d057) (Client Quit)
[23:59:31] <clarity> char may be signed, which is annoying
[23:59:56] <nitrix> I prefer `unsigned char *`, it's guaranteed to be addressable (as the smallest unit of storage) and the operations on it work well.
