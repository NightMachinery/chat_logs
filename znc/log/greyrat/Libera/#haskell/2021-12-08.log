[00:01:51] *** Joins: Techcable (~Techcable@168.235.93.147)
[00:02:09] *** Quits: ftzm (~ftzm@085081036237.dynamic.telenor.dk) (Quit: Client closed)
[00:02:47] *** Quits: deadmarshal (~deadmarsh@95.38.118.214) (Ping timeout: 265 seconds)
[00:04:54] <nfd> (and, of course, if you're using `volatile` to do much other than device memory mapping/some very particular synchronization stuff, You're Doing It Wrong. computer systems for space travel actually use two different guidance systems from different vendors, cleanroom separated in their development, tied to the same clock, and then the results are checked for agreement. if one chip's wrong, they turn it off 
[00:05:00] <nfd> and keep flying with the rest. or at least this is what i recall from my concurrency class in uni)
[00:05:55] <EvanR> ah the byzantine dynamic duo problem
[00:06:29] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Remote host closed the connection)
[00:06:37] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[00:06:40] <nfd> so i guess haskell *could* be ready for space travel in one of the HDL/embedded behavior-style DSLs, in principle. you're gonna use a supervisor anyway :D
[00:06:50] *** Quits: xacktm (xacktm@user/xacktm) (Ping timeout: 252 seconds)
[00:06:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[00:07:08] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[00:07:14] <monochrom> I was joking!
[00:07:20] <nfd> small systems like that shouldn't be messing with stuff like heaps when there's strict realtime constraints so your joke wasn't wrong
[00:07:29] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[00:08:12] <geekosaur> there is at least one haskell compiler that would work well for such systems (jhc)
[00:08:29] <dsal> Apparently haskell is used for Tesla car stuff.
[00:08:35] <dsal> Just not the runtime.
[00:09:26] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Quit: fBNC - https://bnc4free.com)
[00:09:33] <geekosaur> there's a fair amount of haskell *producing* runtimes via clash or atm or etc.
[00:09:41] <nfd> Hume hasn't seen any attention for a while iirc but it seemed like a fun concept to me
[00:09:51] <geekosaur> *atom
[00:18:31] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[00:21:25] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7f00:863f:6855:4758:14df)
[00:22:42] <oats> yay day 5 https://github.com/oatberry/aoc2021-haskell/blob/main/src/Day5.hs
[00:23:19] <oats> not very fast, takes about a second on my system
[00:23:46] <oats> I still don't really have a great sense for predicting performance of my haskel lcode
[00:23:51] <tomsmeding> should have used an array
[00:23:52] <EvanR> I macguyvered some pretty click bingo parsers using only a basic split
[00:24:05] <tomsmeding> https://git.tomsmeding.com/AOC/tree/2021/5.hs 31ms on my system
[00:24:06] *** Joins: Pickchea (~private@user/pickchea)
[00:24:16] <EvanR> yeah vector rocks
[00:24:18] <tomsmeding> (code quality is less though :p )
[00:24:32] <oats> tomsmeding, ah yeh, I didn't take into consideration that it might be bounded-size
[00:24:33] <EvanR> when switching from list to vector I didn't really have to change much
[00:24:37] <oats> the diagram
[00:24:59] *** Quits: user01 (~aj@154.0.137.32) (Quit: Leaving.)
[00:25:00] *** Joins: slac85734 (~slack1256@191.125.99.72)
[00:25:04] <tomsmeding> oats: I just made the array from minimum coordinates through maximum coordinates, after observing that the numbers weren't _too_ far out
[00:25:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[00:26:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[00:27:01] *** Quits: slack1256 (~slack1256@191.125.99.210) (Ping timeout: 240 seconds)
[00:27:23] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[00:27:43] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[00:28:15] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[00:29:00] *** Joins: vicfred (~vicfred@user/vicfred)
[00:30:14] <kennyd> this is some cool shit.. self learning table tennis robot https://www.youtube.com/watch?v=u3L8vGMDYD8
[00:30:41] <dsal> oats: We have some big inputs.  I'm doing 5ms on one the larger ones.
[00:30:50] <dminuoso> monochrom: Ah thanks for the pointers.
[00:30:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:31:05] *** Quits: InternetCitizen (~fuzzypixe@ensi-libre-service-019.ensimag.fr) (Ping timeout: 256 seconds)
[00:31:14] <dsal> oats: want to learn a couple new weird things?  :)
[00:31:30] <oats> dsal, hell yeah, do your worst
[00:31:36] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:31:54] <dsal> oats: So, the big inputs are here:  https://the-tk.com/project/aoc2021-bigboys.html
[00:31:55] <dminuoso> I guess at the end I can use `<- pure` as a poor mans let-binding in ApplicativeDo
[00:32:48] <oats> dsal, haha, this is great
[00:32:48] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[00:33:17] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[00:33:23] <dsal> Oh no, I lost my benches for the big ones...
[00:34:15] <EvanR> this is funny and spoilery for day 7
[00:34:32] <EvanR> the right location for part 1 is the median and part 2 is average?
[00:34:43] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[00:35:00] *** Joins: xacktm (xacktm@user/xacktm)
[00:35:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[00:36:18] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[00:36:21] <EvanR> lies damn lies and statistics
[00:36:27] <dsal> EvanR: approximately, yeah.
[00:36:49] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e23ace56c846c004ca7.dip0.t-ipconnect.de)
[00:36:50] <juri_> where do unit tests come in on that benchmark?
[00:37:02] <dsal> oats: Never mind, I'm off by a couple orders of magnitude.  The 20k is taking me 3-4s not ms.
[00:37:21] <oats> hehe
[00:37:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:38:19] <dsal> Anyway, a couple interesting things:  One:  I made my input a functor which I parse into an `Input [(Point, Point)]` and then expand that into an `Input [Int]` where the points are completely flattened.
[00:38:29] <dsal> There are two very different algorithms for solving this.  I'm still discussing the dumb one.
[00:39:08] <dsal> So, first neat thing:  If you have an arbitrary bounded thing, you can bidirectionally map it to Int pretty easily with Data.Ix
[00:40:27] <dsal> This is how stuff like Array works.  But it gives you a thing that's a lot easier to think about indexing.  It's just 0-N instead of  (x,y) - (x',y').
[00:40:53] <dsal> The first thing I did was put that in an IntMap.  Then I just got rid of the IntMap.
[00:41:31] <dsal> The question degrades to "how many duplicate numbers are in this list?"
[00:43:17] <dsal> I did that by just sorting them and counting how often the same thing occurs more than once (approximately (length . filter ((> 0) . length) . group . sort), though my "obviously better" version isn't actually that much faster).
[00:43:26] <dsal> Next up:  Do it without sorting at all.
[00:43:39] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:44:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:45:26] <dsal> If you want to go hard, you can do it without expanding all of the points.  The largest input would require more than a computer's worth of RAM to remember all the points on all the lines.
[00:58:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:58:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[01:01:36] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6e92:54cb:12e7:3fa1)
[01:02:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:05:05] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:05:33] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[01:05:57] <oats> maybe I'll give it a shot in the far future lol
[01:06:05] <oats> it's a lot to take in
[01:07:42] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[01:09:21] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:09:21] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:09:21] *** Joins: wroathe (~wroathe@user/wroathe)
[01:09:43] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[01:10:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:10:46] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[01:12:23] *** Quits: n3t (n3t@s45.mydevil.net) (Changing host)
[01:12:23] *** Joins: n3t (n3t@user/n3t)
[01:14:44] <dsal> Ix makes it pretty easy to use ST as well.  :)
[01:16:23] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[01:16:57] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[01:17:12] <EvanR> apparently the sort is the slowest part and so vector algorithms destroys that question
[01:18:03] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[01:19:11] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:19:40] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[01:20:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:20:52] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[01:21:19] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[01:21:45] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[01:22:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:25:01] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[01:26:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[01:27:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[01:27:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[01:28:05] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[01:29:04] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[01:30:08] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[01:30:16] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 265 seconds)
[01:32:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[01:33:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[01:33:12] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:35:01] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[01:37:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:37:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:37:16] *** Joins: wroathe (~wroathe@user/wroathe)
[01:38:59] *** Joins: Widget (~widget@2a04:ee41:6:70cd:e189:3667:bb4:f6ac)
[01:40:19] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:41:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:45:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:45:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:45:50] <maerwald> is there an Either with a 3rd constructor?
[01:46:17] <[exa]> Left, Center, Right?
[01:46:21] <dminuoso> Do you mean These?
[01:46:24] <maerwald> no, not These
[01:46:28] <maerwald> that has different meaning
[01:46:32] <maerwald> [exa]: yeah
[01:46:34] <dminuoso> I dont know what meaning you are looking for
[01:47:10] <maerwald> These has 2 type variables
[01:47:17] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:47:32] <maerwald> I want 3
[01:47:45] <dminuoso> You didn't state that in the initial question. :P
[01:47:50] <[exa]> maerwald: so Center should be "neutral middle choice that acts as a kinda default when nothing interesting happened" right?
[01:47:55] <maerwald> dminuoso: it's more mysterious that way
[01:48:04] <[exa]> s/right/checks/ :D
[01:48:08] <dminuoso> maerwald: Okay. Then the answer is yes.
[01:48:18] <slac85734> I want to corroborate something about the LLVM backend on linux. It seems to me that when using the `-fllvm` option, we compile with `llc` but we link with the gnu linker. Is that right?
[01:48:22] <maerwald> [exa]: not sure... I have 3 alternatives and am too lazy to think up names that make sense
[01:48:23] <dminuoso> For mystery reasons I will keep details to myself.
[01:48:23] *** slac85734 is now known as slack1256
[01:48:28] <dminuoso> :o)
[01:48:31] <[exa]> maerwald: jain logic?
[01:48:43] <maerwald> it's a mystery, really
[01:49:49] <[exa]> maerwald: would it be isomorphic to`Either (Either l r) center` ?
[01:49:53] <AndreasK> slack1256: Doesn't ghc use the gold linker by now on linux?
[01:50:08] <hpc> maerwald: just write your dependent sum on Ordering instead of Bool :D
[01:50:20] <maerwald> [exa]: obviously
[01:50:29] <[exa]> hpc: +1
[01:50:59] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[01:51:00] <slack1256> AndreasK: Right. The gold linker is included in binutils thought.
[01:51:15] <slack1256> But on MacOs it should use the LLVM linker right?
[01:51:17] *** Joins: notzmv (~zmv@user/notzmv)
[01:51:26] <AndreasK> slack1256: You can check what exactly is invoked by passing -v to ghc iirc
[01:51:29] <hpc> one of these days i want to write a type-level math package where 2 = Bool, 3 = Ordering, 4 = IOMode, etc
[01:51:54] <slack1256> AndreasK: :-O
[01:51:55] <geekosaur> it uses the mach-o linker, I believe
[01:52:21] <geekosaur> are you looking for something in particular?
[01:53:18] *** Quits: michalz (~michalz@185.246.204.62) (Remote host closed the connection)
[01:53:32] <slack1256> Yeah. On the company I work a partner uses an M1 macbook and he is having problems compiling our project.
[01:54:05] <slack1256> He uses the llvm backend but gets an error like: `pixura-indexer> [ 4 of 72] Compiling Pixura.Indexer.Index
[01:54:08] <slack1256> pixura-indexer> <command line>: dlopen(/Users/koloz/Documents/superrare/repos/pixura-backend/.stack-work/install/x86_64-osx/25cc8bfe483a5d26226136b4f70e481c7477be16d3f0d6d7c8837fd6cbc8e641/8.10.7/lib/x86_64-osx-ghc-8.10.7/libHSpixura-models-0.1.0.0-85icpJLsgeHGfI1Ygzp720-ghc8.10.7.dylib, 0x0005): symbol not found in flat namespace '_rarestzmcontractszm0zi1zi0zi0zmKX2iXgyAgAwAOvKj5Nv0rzz_RarestContractsziContractsziSuperRareBazzaar_zdfToJSONAuctionBidzu
[01:54:08] <slack1256> zdctoJSON_closure'.
[01:54:36] <slack1256> That looked like an linker issue to me!
[01:54:41] <janus> hpc: isn't that just `Vec n Unit` ?
[01:54:50] <slack1256> Sorry for the warped paste.
[01:55:06] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[01:55:15] <janus> :P
[01:55:21] <geekosaur> that's the dynamic linker built into the bytecode backend, failing to load a shared object needed for Template Haskell
[01:55:24] <hpc> janus: yes, but not as awesome
[01:55:31] <hpc> don't forget i am the author of acme-php :D
[01:56:00] <geekosaur> not using either gold nor lld nor MacOS ld
[01:56:21] <geekosaur> "dlopen" is the key here
[01:56:31] <slack1256> :-O That is weird!
[01:57:33] <slack1256> It seems his machine is case insensitive. That can be it.
[01:58:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[01:58:13] <geekosaur> hr. thought Apple refused to support case-insensitive installs these days
[01:58:28] <geekosaur> (since 10.3 or thenabouts)
[01:59:36] <raehik> Can I write/export a "kind synonym"? I have Type1 and Type2 which are both TypeLikes in their kind signature, and I want to ease referring to TypeLikes
[02:00:10] <raehik> I tried standalone kind sigs, but I misunderstood its use -- it's for defining the kind of an accompanying type. not a sort of reusable synonym
[02:01:05] <geekosaur> I think you need ConstraintKinds to do that?
[02:02:29] <yin> why am i geting an error on a simple [MyCustomDataConstructor..AnotherAndYesIDerivedEnum]
[02:02:46] <raehik> geekosaur: yes that looks likely by a glance. looking at how I could use it
[02:02:59] <geekosaur> because it's parsed as (MyCustomDataConstructor..)
[02:03:04] <geekosaur> use spaces
[02:03:13] <yin> oh no
[02:03:24] <geekosaur> (that is, it's looking for operator . in package MyCustomDataConstructor)
[02:03:41] <yin> i hate dot syntaxes :(
[02:03:48] <yin> thank you
[02:03:49] <yin> my bad
[02:04:22] <raehik> wait actually, I *was* just writing a type synonym! lol
[02:04:46] <raehik> ConstraintKinds would solve a similar problem tho
[02:05:17] <geekosaur> I think it enables type synonym syntax to also represent kind synonyms
[02:05:39] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.3)
[02:07:49] <raehik> I'm probably mixing up my terminology. I did type TypeLike = A -> B -> C and can use it like `class UseTypeLike (a :: TypeLike) ...` :)
[02:09:55] <geekosaur> the first is the one I think needs ConstraintKinds; the second I think is KindSignatures
[02:10:39] <raehik> haha I can't tell, I have KindSigs on by default but not ConstraintKinds buuut it's probably implied by my 20 defaults.
[02:11:04] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[02:11:36] *** Joins: jakalx (~jakalx@base.jakalx.net)
[02:16:41] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:17:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:18:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:18:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:19:15] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Quit: Leaving)
[02:20:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:21:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:22:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:23:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:24:46] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:27:54] *** Joins: sciencentistguy (~sciencent@hacksoc/ordinary-member)
[02:29:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:30:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:33:10] <monochrom> dminuoso: Some users of ApplicativeDo use the ugly trick of "pure (let y=x+1 etc in ...)". Maybe you won't mind it as a compromise.
[02:33:14] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:33:44] <dminuoso> monochrom: Oh, that will work? o.o
[02:33:53] <dminuoso> I definitely wont mind. Thanks for the tip
[02:34:10] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:34:14] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 252 seconds)
[02:34:35] <monochrom> It is a bit ugly, especially considering the dilemma of how to even layout multiple bindings in the first place.
[02:35:31] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:37:12] *** Quits: max22- (~maxime@2a01cb08833598007f53408425037c9d.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:38:45] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[02:39:20] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[02:39:48] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:41:20] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[02:42:32] <dminuoso> Since I frequently layout like that, it seems fine with me
[02:42:50] *** Joins: img (~img@user/img)
[02:43:06] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[02:44:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[02:44:22] *** Quits: img (~img@user/img) (Client Quit)
[02:44:36] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:45:48] *** Joins: img (~img@user/img)
[02:47:24] <Axman6> edwardk: I made a thing which allows you do use discrimination with generics-sop, and wondered if there was a better way to do this: https://paste.tomsmeding.com/jovB7kDq. I know it's redundant given the current implementation's GHC.Generics support, but fun nonetheless, and might end up being faster if https://github.com/well-typed/generics-sop/pull/129 ever gets merged. I'm mostly wondering if there's a way to avoid the Maybe in the SmallArray (Maybe (m (b -
[02:47:24] <Axman6> > m ())))
[02:47:26] <lambdabot>  <hint>:1:5: error: parse error on input â€˜)â€™
[02:47:58] <Axman6> ... did that message get split right at the '>'?
[02:48:57] <geekosaur> yep
[02:49:05] <Axman6> That's amazing
[02:50:04] <Axman6> glguy: how hard do you thnk it would be for glirc to highlight where messages would be split while typing? not a super useful feature, but kinda fun
[02:50:50] <glguy> I guess we just need to decide what it would look like
[02:50:58] <glguy> the message splitting happens pretty late in the pipeline
[02:51:21] <glguy> so we'd need to get the information needed up into the textbox renderer
[02:52:23] <Axman6> how is that length decided? is it a protocol thing, a server setting?
[02:52:59] <glguy> The protocol says messages can be 512 bytes long. So you have to consider UTF-8 encoding, your nickname, username, and hostname, the channel you're sending to
[02:53:20] <Axman6> hmm, interesting, yeah that is a little more difficult
[02:54:07] <glguy> so there's some code in there to avoid splitting in the middle of a UTF-8 encoded codepoint and some stuff to track what the client things your username, nickname, and hostname are
[02:54:31] <dminuoso> glguy: By the way, is there a reason you chose `*` over `-` for config-value?
[02:54:48] <dminuoso> In some way, `-` would have been nice because that would have enabled various YAML tooling to smoothly interoperate with it.
[02:55:14] <dminuoso> Say YAML-based syntax highlighting, or even using `yq`
[02:55:16] <glguy> YAML's horible treatment of strings would make it a bit fussy to use across
[02:55:33] <janus> where can 'where' blocks go? does it change with BlockArguments?
[02:55:37] <dminuoso> Well, it seems at first glance with `-` any config-value file would at least be valid YAML
[02:55:39] <dminuoso> Nothing more
[02:55:49] <glguy> I don't remember if there was a reason for picking one over the other at this point
[02:56:27] <geekosaur> janus, at the end of any declaration: "module", "class", "instance", function definition equation, etc.
[02:56:35] <geekosaur> BlockArguments does not affect this
[02:56:51] <glguy> I use -- for comments (a la Haskell) so maybe at the time I was trying to be sufficiently distinct from that?
[02:57:00] <janus> geekosaur: but what is the motivation for now allowing it anywhere let..in can go?
[02:57:00] <glguy> otherwise there's probably not any particular reason
[02:57:29] <geekosaur> janus, so it can scope over guards in a function/equation definition
[02:57:31] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Ping timeout: 252 seconds)
[02:57:47] <glguy> dminuoso: I have syntax highlighting for Vim, at least :) (no I don't think that resolves your issue)
[02:57:49] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 240 seconds)
[02:59:10] <geekosaur> also so it is consistent with all other uses of "where"
[02:59:13] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[02:59:36] <dminuoso> Would alex/happy allow for parametrizing over a token, such that a user could customize it with some kind of `parseWithOpts (defaultOpts { listChar = '-' })?
[03:00:01] <dminuoso> Im completely unfamiliar with these tools, so I wouldn't even know where to look
[03:00:23] <glguy> dminuoso: ehh, I not really, but what you can do is like what GHC does, parse everything and then reject some stuff later
[03:00:45] <glguy> making bare - lex the same way as * , or as an alt* token and putting that in the parser would work
[03:01:08] <oats> aha, I found the magic data structure to make Day 6 veryfast. multiset \o/
[03:01:27] <glguy> I don't mind supporting both styles at the same time; i'd want to think about it for a moment to decide that I wasn't boxing myself out of some other use of - later
[03:01:47] <glguy> I think some markdowns support more than one list element delimiter
[03:01:54] <dminuoso> glguy: So if I was to bolt this on, a separate token seems more useful, as we could have a backwards compatible mode and let the user simply decide which style they want
[03:02:18] <dsal> oats: Is taht faster than an IntSet?
[03:02:30] <dsal> Er, IntMap
[03:02:31] <dminuoso> Though this is edge case thinking, it seems at worst we would just suddenly enable parsing previously invalid config files
[03:02:33] <glguy> dminuoso: are you using config-value for something already?
[03:02:41] <oats> dsal, no idea, I'd have to try
[03:02:41] <dminuoso> glguy: Im using config-schema everywhere! :)
[03:03:41] <dminuoso> Each tool comes with a `config-help` optparse applicative command, giving you interactive and always-up-to-date configuration documentation.
[03:04:02] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[03:04:19] <glguy> What's that do with optparse applicative?
[03:04:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 265 seconds)
[03:05:21] <dminuoso> Nothing really, Im just saying that each command line tool that takes a config also has some mode where it prints out the result of generateDocs
[03:05:28] <dminuoso> Which is the main selling point to me.
[03:05:37] <dminuoso> Tools that document their configuration themselves
[03:05:52] <dminuoso> No need to keep some CONFIG.md up-to-date with my code
[03:06:00] <glguy> yeah, having glirc being able to tell me all of its configuration fields is important to me remembering how to use it
[03:06:29] <glguy> way better than hoping I can remember what smart name I used for everything the first time
[03:06:34] <dminuoso> Indeed. :)
[03:06:53] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[03:06:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[03:07:18] <dminuoso> And I find humans are terrible at keeping this kind of documentation up to date, so over time you get drift and typos
[03:07:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:07:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:08:40] <oats> dsal, `IntMultiSet` is just an `IntMap Int` under the hood lol
[03:08:47] <oats> just with some convenience functions on top
[03:09:16] <dsal> Oh I see.  Yeah.
[03:09:49] <dminuoso> glguy: Ah by the way, it seems that adding a hyphen would disallow it being inside an atom.
[03:09:55] <dminuoso> Mmm.
[03:09:55] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[03:10:04] <glguy> err, why?
[03:10:29] <glguy> atoms never start with -
[03:10:31] <dsal> oats:  My breeder is just this:  https://www.irccloud.com/pastebin/eYZijgwl/breed.hs
[03:10:51] <dminuoso> Ahh I misread
[03:11:05] <dminuoso> glguy: If you're in principle happy with the idea, Ill make the necessary PR
[03:11:14] <glguy> negative numbers can start with -, but they have to have more than just a bare -
[03:11:58] <oats> dsal, https://github.com/oatberry/aoc2021-haskell/blob/main/src/Day6.hs
[03:12:23] <oats> I tried, like, all the listy monads hoping one would be performant :P
[03:12:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[03:13:02] <dsal> oats: well that's nice
[03:13:06] <glguy> dminuoso: I think I'd be OK with just adding this line below line 68: "-"                     { token_ Bullet                 }
[03:13:20] <oats> I thought so too ðŸ˜Š
[03:13:25] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7f00:863f:6855:4758:14df) (Ping timeout: 240 seconds)
[03:14:24] <dminuoso> glguy: My thinking is it's nice to have no ambiguous syntax. It might look odd if `- foo\n* bar\n- quux` was permisseable.
[03:14:37] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7f00:65a:88aa:1a84:9da4)
[03:14:58] <dminuoso> Plus, if we tokenize it as a separate character, we can defer the choice to the user.
[03:15:01] <glguy> dminuoso: to me "ambiguous syntax" means there are multiple interpretations
[03:15:07] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:15:11] <dminuoso> Perhaps I misused that term here.
[03:15:14] <glguy> and deferring it to the user means making the parser API more complicated
[03:15:35] <dminuoso> If everything has a default mode, it wont make it more complicated unless you opt-in
[03:15:58] <dminuoso> Say if you had `parse :: Text -> Either ParseError (Value Position); parse = parseWith defaultOpts`
[03:16:41] <glguy> In markdown you can use (from my current reading) + - *
[03:16:55] <glguy> and maybe you'd want to mix those up to make it easier to distinguish levels
[03:17:20] <glguy> I guess we could require each list to use all of one bullet token
[03:17:38] <glguy> thus making it easier to specify nested lists
[03:18:14] <dminuoso> Heh, for a while I was wishing for nix-style nested sections
[03:18:55] <dminuoso> After an hour or so I decided to restructure the config schema
[03:19:27] <dminuoso> Nested lists dont appear to have comfortable solutions, so this seems sensible
[03:20:40] <dsal> oats: this API is kind of weird.  It looks like it's just here to solve this problem.
[03:21:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:21:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:23:21] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[03:23:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:24:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:24:39] *** Quits: teo (~teo@user/teo) (Ping timeout: 252 seconds)
[03:26:50] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[03:26:59] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[03:27:11] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[03:27:25] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 240 seconds)
[03:28:13] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[03:28:23] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[03:28:44] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[03:30:53] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7f00:65a:88aa:1a84:9da4) (Ping timeout: 252 seconds)
[03:32:21] <dsal> oats: It's actually faster than mine.  Neat.
[03:32:48] *** Joins: xff0x (~xff0x@2001:1a81:52dd:ce00:6ce:d182:5c9e:e129)
[03:34:06] <oats> dsal, the API for multiset?
[03:34:31] <oats> https://en.wikipedia.org/wiki/Multiset
[03:34:55] <dsal> Yeah, I've known about such a thing for a while, but it's never felt like something useful.
[03:35:50] <janus> seems like you can even have 'where' on case cases
[03:35:54] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:36:12] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[03:36:12] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Client Quit)
[03:36:30] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[03:38:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:40:55] <EvanR> really I thought where was only declarations
[03:41:01] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e23ace56c846c004ca7.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:41:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:41:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:42:12] <monochrom> Sometimes it's joyful to take a look at the Haskell Report and discover extra things it supports :)
[03:44:10] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[03:45:07] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 265 seconds)
[03:48:35] <janus> % :t \case {() | n -> 0 where n = True}
[03:48:35] <yahb> janus: Num p => () -> p
[03:48:43] *** Joins: cyphase (~cyphase@user/cyphase)
[03:48:57] <janus> :t \case {() | n -> 0; () | not n -> 1 where n = True}
[03:48:58] <lambdabot> error:
[03:48:58] <lambdabot>     â€¢ Couldn't match expected type â€˜Boolâ€™ with actual type â€˜Exprâ€™
[03:48:58] <lambdabot>     â€¢ In the expression: n
[03:49:15] <janus> how do i use where across cases with semicolon and brace based syntax?
[03:50:32] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[03:50:37] *** Joins: Topsi (~Tobias@dyndsl-095-033-088-108.ewe-ip-backbone.de)
[03:51:00] <geekosaur> isn't the where on each case alternative?
[03:51:01] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 240 seconds)
[03:51:10] <geekosaur> so the first one is using the n from simple-reflect
[03:51:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[03:51:58] <janus> oh
[03:51:59] <geekosaur> :t \case { () | n = 0 where n = True; () | not n -> 1 where n = True}
[03:52:00] <lambdabot> error: parse error on input â€˜=â€™
[03:52:11] <geekosaur> :t \case { () | n -> 0 where n = True; () | not n -> 1 where n = True}
[03:52:12] <lambdabot> error: parse error on input â€˜->â€™
[03:52:21] <janus> so in this case i would actually need to use let..in to achieve the desired effect of using a shared biding in guards
[03:52:29] <geekosaur> yeh
[03:52:47] <geekosaur> although I too seem to be doing something wrong
[03:53:01] <geekosaur> :t \case { () | n -> 0 where {n = True}; () | not n -> 1 where {n = True}}
[03:53:02] <lambdabot> Num p => () -> p
[03:53:27] <janus> aaah right, like with the let. gotta remember that around anything that uses ..=.. syntax i guess...
[03:53:57] <geekosaur> any time you have nested layouts (here case vs. where)
[03:54:04] <geekosaur> more commonly with do vs. let
[03:54:46] *** Joins: k60 (~user@static.100.218.46.78.clients.your-server.de)
[03:55:33] <janus> ah right, the case doesn't use equals but it still uses layout
[03:56:58] <geekosaur> do vs. case can also happen and doesn't involve = at all
[03:59:44] *** Joins: pavonia (~user@user/siracusa)
[04:00:51] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[04:01:01] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[04:02:02] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[04:02:29] *** Joins: k60` (~user@94.25.169.9)
[04:03:25] *** Quits: k60 (~user@static.100.218.46.78.clients.your-server.de) (Ping timeout: 240 seconds)
[04:05:49] *** Joins: juri_ (~juri@178.63.35.222)
[04:07:33] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 252 seconds)
[04:08:09] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[04:09:15] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[04:11:14] *** Joins: cyphase (~cyphase@user/cyphase)
[04:20:26] <monochrom> janus: There is not supposed to be a semicolon between "| guard1 -> e1" and "| guard2 -> e2"
[04:21:35] <monochrom> Corollary: The two "|"s do not have to be aligned.
[04:21:57] <EvanR> according this article on STG certain function applications involve a check for stack overflow before pushing arguments, so it can maybe grow stack space
[04:22:13] <EvanR> seems like the kind of thing you could use a page fault for
[04:22:51] <EvanR> have the cpu do the check
[04:22:57] <monochrom> Next, "| guard1 -> e1" and "| guard2 -> e2" shares the same "where", if you have a "where".
[04:23:23] <geekosaur> notice that they actually made separate case clauses
[04:23:44] <monochrom> OK yeah. But one doesn't need to.
[04:25:46] <dminuoso> glguy: How strongly do you feel about not providing some `parse = parseWith defaultOpts` and `parseWith :: ParseOpts -> T.Text -> Either ParseError (Value Position)`
[04:25:57] <dminuoso> Asking because I think I have it carved out
[04:26:24] <monochrom> Page fault may be too expensive.
[04:26:44] <geekosaur> it's how C does it
[04:26:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:27:02] <geekosaur> every function has a stack probe which may incur a page fault that rows the stack segment
[04:27:07] <geekosaur> *grows
[04:27:12] <dminuoso> The grammar is glued in as well, supporting only a singular style at a given level
[04:27:12] <monochrom> Also the fear of "what if someone ports GHC to a platform that doesn't have it" but I guess I don't know how important it is.
[04:27:24] <dminuoso> So mixing -/+/* in a list is not possible
[04:27:42] <geekosaur> this said, the stack probe method does not play well with per-thread stacks
[04:28:12] <geekosaur> (typically C threads other than the main thread start with fixed stack sizes that cannot be grown dynamically)
[04:28:28] <monochrom> That is very sad.
[04:28:40] <EvanR> mildly flabbergasted
[04:33:49] <monochrom> Err no, not sad, I have always coded in C without relying on growable stack.
[04:34:07] <monochrom> If you have given up hope, nothing disappoints you any more.
[04:34:25] *** Quits: xff0x (~xff0x@2001:1a81:52dd:ce00:6ce:d182:5c9e:e129) (Ping timeout: 265 seconds)
[04:34:59] *** Joins: xff0x (~xff0x@2001:1a81:52dd:ce00:6a6c:bf95:6ade:ac72)
[04:36:21] *** Joins: dmenz (~daniel@2804:14d:5cd4:5e94::d)
[04:36:53] <AndreasK> EvanR: These checks are also used to stop threads. The runtime sets available stack/heap to zero. The function checks, and calls into the rts for gc if there is not enough space. The RTS can suspend the thread.
[04:37:17] <AndreasK> Not that you couldn't also do that with probes. It's what the JVM does iirc.
[04:38:59] <EvanR> a thread can also suspend when it tries to push something on the stack?
[04:39:34] <AndreasK> EvanR: Kinda. For any given piece of code you know how much stack space it needs
[04:39:49] <AndreasK> so we check for available space first, then do all the pushing
[04:39:55] <monochrom> Well, last time, we discussed that the time's-up handler fakes "heap full". Perhaps it also fakes "stack full", too.
[04:40:21] <AndreasK> Yeah iirc it fakes both
[04:40:32] <monochrom> But it is true that GHC-generated asm code does do "if stack full then call GC else push"
[04:41:04] <monochrom> in addition to "if heap full then call GC else store data"
[04:41:22] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:41:46] <monochrom> where "call GC" plays the double role of making space and switching to another thread.
[04:41:49] <EvanR> hopefully the gc doesn't help you with the full stack by removing parts xD
[04:41:57] <AndreasK> I was mistaken, we only fake the Hp so I guess we can't stop threads on entering stack-using code.
[04:42:56] <glguy> dminuoso: How about this? https://github.com/glguy/config-value/pull/9
[04:43:52] <AndreasK> EvanR: I think there is some kind of optimization ("Stack squeezin") that can safely remove things from your stack for haskell applications.
[04:43:56] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:44:06] <dminuoso> glguy: Ah, I did not know you could have parametrized production rules. This is cool
[04:44:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:44:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:44:52] *** Joins: wroathe (~wroathe@user/wroathe)
[04:44:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[04:44:54] <EvanR> how does that not violate stack invariant
[04:45:20] <AndreasK> EvanR: What invariant exactly?
[04:45:49] <EvanR> N pops after N pushes leaves you with the original stack, I guess
[04:45:56] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[04:48:05] <monochrom> Is that like TCO but done during run time and after unnecessary data have been pushed?
[04:48:28] <AndreasK> I'm trying to find out what it does atm. It's been a while :D
[04:49:29] <glguy> dminuoso: happy's pretty great ^_^
[04:50:20] <dminuoso> But yeah, the PR looks good
[04:52:07] <monochrom> + - * bullet points form a ring.  <duck>
[04:52:51] <dminuoso> Algebra of lists
[04:54:43] <AndreasK> monochrom: Seems to be about collapsing multiple update frames next to each other into a single frame.
[04:55:27] <monochrom> Hrm, update frames, I have a vague memory of those.
[04:57:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:58:18] <monochrom> I think https://github.com/quchen/stgi explains it.
[04:58:39] <AndreasK> Squeezing or the frames?
[04:59:20] <monochrom> The update frames.
[05:00:08] <AndreasK> Got my hopes up for a moment :D
[05:00:37] <monochrom> Oh, merging them is "just engineering" >:)
[05:00:53] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[05:01:34] <AndreasK> It seems stack squeezing transforms [Update T1, Update T2, Update T3] into [Update T1] and in the Heap [T2 = T1, T3 = T1].
[05:01:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[05:02:28] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Quit: Updating details, brb)
[05:02:41] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[05:03:41] <AndreasK> And then we can  shift up all the frames below Update T3 by however many bytes the removed update frames took up.
[05:03:58] <AndreasK> And GC will remove the indirections in the heap.
[05:04:02] *** Quits: slack1256 (~slack1256@191.125.99.72) (Remote host closed the connection)
[05:04:12] <AndreasK> Surprised it's worth it
[05:04:15] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[05:05:21] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[05:05:21] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 265 seconds)
[05:05:42] <AndreasK> EvanR: I guess the key thing being then that nothing is changed *within* any stack frame. So to some code that runs your invariant seems to hold.
[05:05:49] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 240 seconds)
[05:06:35] <geekosaur> sounds like something from the bad old days of 4GB machines :)
[05:06:37] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[05:06:59] <geekosaur> (or even older days but I doubt any variety of haskell ran on those machines :)
[05:07:07] <AndreasK> I guess this happens if you have foo = bar; bar = baz; baz = urk; urk = whatever.
[05:07:23] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[05:07:24] *** Joins: hololeap (~hololeap@user/hololeap)
[05:08:33] <EvanR> haskell is from the year 1990 right, was 32bit even a thing yet ? xD
[05:09:28] <dsal> I had a bug in some ocaml code back in the day because ints were 30 bit.
[05:09:33] <geekosaur> 68020 existed so yes
[05:09:35] <dsal> then I had a bug in the same code because of 31 bits.
[05:09:45] <int-e> EvanR: yes, even in x86 land
[05:09:52] <dsal> By the time I hit 32 bits, it wasn't my bug anymore.
[05:10:37] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[05:11:08] <EvanR> 30 bits, to conveniently store groups of 10 bits for decimals no doubt
[05:11:31] <geekosaur> 2 bits stolen for GC
[05:11:36] <EvanR> right just kidding
[05:11:58] <geekosaur> takes only 4 bits to represent decimals
[05:12:14] <geekosaur> (oh god, BCD)
[05:12:36] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 265 seconds)
[05:12:43] <AndreasK> Using the highest bit to indicate if something is an object or an int was  (is?) popular. I think the haskell report even says Int's are "at least 30 bit's wide"
[05:12:49] <geekosaur> when did intel finally jettison ABCD or whatever the instruction was?
[05:12:52] <int-e> geekosaur: what a waste though when you can stuff 9 digits into 30 bits
[05:13:10] <EvanR> decimal arithmetic is not supported in 64bit mode
[05:13:13] <geekosaur> AndreasK, yes and I almost mentioned that
[05:13:28] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[05:13:47] <int-e> . o O ( The best thing BCD ever gave me was the AAA mnemonic. )
[05:13:49] *** Quits: dmenz (~daniel@2804:14d:5cd4:5e94::d) (Ping timeout: 240 seconds)
[05:14:56] <int-e> Which, actually, is for unpacked BCD, a byte per digit. What a weird thing to have hardware support for :P
[05:15:00] <dsal> int-e: what's that?
[05:15:26] <geekosaur> COBOL used to offer that one too
[05:15:31] <geekosaur> unpacked decimal
[05:15:43] <int-e> dsal: i386 ... it takes the result of adding two unpacked BCD numbers and does the carry propagation (so some adjustment when the lower byte is larger than 9)
[05:16:04] <dsal> What's the "AAA" though?
[05:16:05] <int-e> s/i386/80x86/
[05:16:11] <dsal> I assume that means something very different to me.
[05:16:17] <geekosaur> right, so that was the intel version of the one I mentioned earlier which was probably the zilog mnemonic
[05:16:18] <int-e> "ASCII Adjust after Addition"
[05:16:27] <dsal> I didn't even know BCD was a thing in Intel.  I didn't use them much.
[05:16:31] <AndreasK> It seems we only check the last chunk of a stack for squeezing, and only when we pause the thread. So I guess checking for it isn't that expensive. And every update you squeeze out is one less execution of the thunk update code
[05:16:34] <dsal> Oh interesting.  AAaA
[05:17:05] * AndreasK heads of to check how often we actually squeeze
[05:17:26] <geekosaur> I think DECIMAL was unpacked decimal, COMPUTATIONAL was packed decimal, COMPUTATIONAL-3 was binary?
[05:17:39] <EvanR> AAAAAaaaaaaaa....
[05:17:43] <dsal> nix collect-garbage deletes gmp and libffi which are apparently required.
[05:17:52] <geekosaur> reasonable reaction to COBOL :Ã¾
[05:17:55] <monochrom> Hrm, why is it 3 for binary?
[05:18:08] <geekosaur> ask IBM, 'twas their idea
[05:18:16] <monochrom> Heh OK!
[05:18:21] <int-e> Yeah there seems to be an unwritten rule that every architecture needs its own mnemonic for assembly language.
[05:18:33] * monochrom conjures jokes about 3-value logics
[05:18:39] <geekosaur> I had no idea, just knew that COMP-3 was what every other language used for numbers
[05:18:43] <EvanR> true false filenotfound
[05:18:50] * dsal thought the same
[05:19:24] <jackdk> http://www.coboloncogs.org/INDEX.HTM I'm sure you've seen this joke because it is old
[05:19:25] <monochrom> But yes Intel floating point has native hardware support for 10-digit BCD.
[05:19:28] <int-e> monochrom: wouldn't it be fun if balanced ternary was the standard hardware number representation
[05:19:50] <monochrom> \âˆ©/ Cantor sets
[05:19:59] <geekosaur> I think I was the first one to post it here, back 2007ish
[05:20:01] <int-e> (no sign bits!)
[05:20:08] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[05:20:31] <EvanR> unum arithmetic!
[05:21:26] <dsal> Is there any meaningful way to "see" rules being applied?
[05:21:33] <dsal> (other than, I guess, core)
[05:22:57] <geekosaur> -ddump-rule-firings?
[05:23:33] <int-e> and -ddump-rule-rewrites
[05:23:34] <dsal> Oh nice!  Thanks
[05:23:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:25:12] <dsal> Tiny file.  Lots of rewrites.
[05:25:40] <int-e> Oh there's a -drule-check that's supposed to tell you why a rule doesn't fire, I wonder how that works. https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/debugging.html is a fun read
[05:26:01] *** Quits: emf_ (~emf@2620:10d:c091:480::1:102a) (Ping timeout: 268 seconds)
[05:26:12] <dsal> Oh cool.  It's doing a thing I thought it might do, but couldn't find something that suggested it should.
[05:26:42] <dsal> I'm doing a length of a filter and was considering rewriting it to a foldr, but GHC already thought of that.
[05:27:27] *** Quits: mmhat (~mmh@55d4422a.access.ecotel.net) (Quit: WeeChat 3.3)
[05:28:09] <int-e> yeah build/foldr fusion should be able to do that :P
[05:28:35] <int-e> but can it go the extra mile and make a foldl'...
[05:29:01] <dsal> This is an incredibly large amount of output. heh.
[05:30:14] <int-e> Just for completeness, if you are just interested in which rules are relevant, -ddump-rules is enough.
[05:30:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:30:31] <int-e> Uh
[05:30:50] <int-e> Sorry, that would be -ddump-rules-firings and that was already mentioned.
[05:31:12] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[05:31:25] *** Joins: trillp (~user@69.233.98.238)
[05:31:40] <dsal> Yeah, though it's a bit harder to understand.
[05:31:42] <dsal> Rule fired: filter (GHC.List)
[05:31:42] <dsal> Rule fired: length (GHC.List)
[05:31:42] <dsal> Rule fired: fold/build (GHC.Base)
[05:33:17] <dsal> core's a little noisy to read, but it's neat to see what those rules actually do.
[05:36:32] <dsal> Actually, yeah, that's not too bad as long as I have source available.
[05:37:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:37:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:37:25] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:38:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:39:54] <dsal> Thanks.  I've now confirmed the code was already doing exactly what I was about to rewrite the code to do.
[05:43:01] *** Quits: xff0x (~xff0x@2001:1a81:52dd:ce00:6a6c:bf95:6ade:ac72) (Ping timeout: 240 seconds)
[05:44:50] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Remote host closed the connection)
[05:45:10] *** Joins: xff0x (~xff0x@2001:1a81:52f0:d600:c9ec:7be2:e073:b0e)
[05:47:50] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:48:19] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[05:58:03] *** Quits: incertia (~incertia@d4-50-26-103.nap.wideopenwest.com) (Ping timeout: 256 seconds)
[06:09:05] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:09:35] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[06:10:54] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[06:11:50] *** Joins: genieliu (~genieliu@103.37.140.38)
[06:11:54] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[06:12:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:12:16] *** Quits: tito (tito@tilde.team) (Ping timeout: 268 seconds)
[06:13:26] *** Joins: incertia (~incertia@d4-50-26-103.nap.wideopenwest.com)
[06:15:10] *** Joins: tito (tito@tilde.team)
[06:19:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:19:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:22:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[06:23:13] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6e92:54cb:12e7:3fa1) (Ping timeout: 252 seconds)
[06:23:37] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:23:54] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[06:24:16] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Client Quit)
[06:24:35] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[06:24:52] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[06:29:31] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[06:29:49] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[06:30:03] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:30:37] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzzâ€¦)
[06:31:01] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:31:32] *** Joins: sander (~sander@user/sander)
[06:32:50] *** Quits: tito (tito@tilde.team) (Ping timeout: 265 seconds)
[06:35:34] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[06:35:49] *** Joins: tito (tito@tilde.team)
[06:38:14] *** Joins: pfurla (~pfurla@201.17.118.230)
[06:47:43] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:47:43] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:47:43] *** finn_elija is now known as FinnElija
[06:50:45] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:51:37] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[06:55:57] *** Joins: dmenz (~dmenz@2804:14d:5cd4:5e94::d)
[06:56:05] *** Joins: dmenezes (~dmenz@2804:14d:5cd4:5e94::d)
[06:56:24] *** Quits: dmenezes (~dmenz@2804:14d:5cd4:5e94::d) (Remote host closed the connection)
[07:02:10] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[07:02:31] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[07:02:37] *** Quits: td_ (~td@94.134.91.180) (Ping timeout: 240 seconds)
[07:02:38] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[07:04:29] *** Joins: td_ (~td@94.134.91.212)
[07:04:50] *** Joins: mbuf (~Shakthi@223.178.121.64)
[07:07:09] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[07:07:11] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[07:07:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:07:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:07:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:08:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:08:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:08:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:08:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:09:03] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 252 seconds)
[07:12:26] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:39] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:18:53] <glguy> dminuoso: do you use/know-about the macro expansion stuff in config-value?
[07:24:37] *** Quits: tito (tito@tilde.team) (Ping timeout: 240 seconds)
[07:25:05] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[07:26:31] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:26:46] *** Joins: tito (tito@tilde.team)
[07:29:25] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 240 seconds)
[07:32:53] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[07:39:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:43:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[07:50:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:52:13] *** Quits: tito (tito@tilde.team) (Ping timeout: 240 seconds)
[07:53:27] *** Joins: tito (tito@tilde.team)
[07:55:28] *** Joins: user0 (~aj@langw.roketelkom.co.ug)
[08:03:32] *** Quits: Topsi (~Tobias@dyndsl-095-033-088-108.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[08:03:53] *** Joins: user01 (~aj@154.0.137.32)
[08:04:46] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzzâ€¦)
[08:05:01] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 240 seconds)
[08:06:07] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 265 seconds)
[08:07:01] *** Quits: user0 (~aj@langw.roketelkom.co.ug) (Ping timeout: 240 seconds)
[08:07:52] *** Joins: user0 (~aj@129.205.7.82)
[08:08:32] *** Quits: user01 (~aj@154.0.137.32) (Ping timeout: 265 seconds)
[08:08:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:09:27] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:10:37] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[08:11:26] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:12:07] *** Quits: user0 (~aj@129.205.7.82) (Ping timeout: 252 seconds)
[08:12:08] *** Joins: user01 (~aj@129.205.7.82)
[08:15:06] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[08:15:45] *** Joins: nfd (~nfd@user/nfd)
[08:16:11] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[08:16:14] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[08:21:25] *** Quits: xff0x (~xff0x@2001:1a81:52f0:d600:c9ec:7be2:e073:b0e) (Ping timeout: 240 seconds)
[08:22:22] *** Joins: xff0x (~xff0x@2001:1a81:52f0:d600:cda8:efb:cccc:cf1c)
[08:22:33] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 250 seconds)
[08:24:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:24:35] *** Quits: user01 (~aj@129.205.7.82) (Ping timeout: 252 seconds)
[08:24:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:24:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:25:14] *** Joins: user0 (~aj@154.0.137.32)
[08:31:18] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:33:40] *** Joins: genieliu (~genieliu@103.37.140.38)
[08:34:13] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:39:01] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[08:43:17] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 252 seconds)
[08:43:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[08:44:46] *** Joins: img (~img@user/img)
[08:55:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:56:07] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[08:56:44] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:57:49] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[08:59:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[09:09:50] *** Joins: genieliu (~genieliu@103.37.140.24)
[09:13:03] *** Joins: monochrom (trebla@216.138.220.146)
[09:18:13] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[09:20:09] *** Joins: jinsun (~quassel@user/jinsun)
[09:22:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[09:23:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[09:26:03] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:26:39] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[09:26:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[09:30:05] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[09:31:19] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[09:32:53] *** res0nat0r8 is now known as res0nat0r
[09:33:54] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:34:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[09:39:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:43:42] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[09:43:49] *** Joins: michalz (~michalz@185.246.204.40)
[09:44:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[09:47:25] *** Joins: Everything (~Everythin@37.115.210.35)
[09:48:13] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:48:48] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[09:50:43] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:788b:37b5:7592:32b4)
[09:52:31] *** Joins: vicfred (~vicfred@user/vicfred)
[09:55:49] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 240 seconds)
[10:00:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:01:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:01:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:01:22] *** Joins: wroathe (~wroathe@user/wroathe)
[10:06:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[10:15:40] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:25:39] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[10:27:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[10:31:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Ping timeout: 240 seconds)
[10:35:29] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 252 seconds)
[10:35:46] *** Quits: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com) (Ping timeout: 245 seconds)
[10:36:02] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[10:39:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:41:16] <int-e> > unwords $ map (\x -> printf "%.2f" (191 - x/16)) [3011,2989,2965,2944,2934,2886,2875,2863,2851,2850]
[10:41:17] <lambdabot>  "2.81 4.19 5.69 7.00 7.62 10.62 11.31 12.06 12.81 12.88"
[10:41:53] <xerox> I fell from 12.66 to 12.88, yikes! :)
[10:45:33] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[10:50:02] *** Joins: Merfont (~Kaiepi@156.34.44.192)
[10:50:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[10:51:32] <int-e> somehow part 2 is really messing with people :)
[10:52:13] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Ping timeout: 240 seconds)
[10:52:38] <xerox> it messed with me too, I didn't even realize it started snowing ðŸ˜³
[10:52:47] <int-e> almost 2 1/2 hours in and there's still more silver stars (not counting gold stars) than gold stars
[10:53:35] <int-e> (globally)
[10:56:29] *** Quits: dmenz (~dmenz@2804:14d:5cd4:5e94::d) (Quit: Leaving)
[10:58:28] <iqubic> Why doesn't Data.Set have a symetric set difference functon?
[10:58:34] <iqubic> I'd really like that now.
[11:00:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:05:07] <int-e> It has come up but with little activity (at least recently) to make it (or some generization thereof) happen https://mail.haskell.org/pipermail/libraries/2020-June/030633.html
[11:05:35] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:06:12] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[11:07:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[11:08:02] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[11:11:03] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[11:13:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:15:01] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[11:16:54] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[11:19:49] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[11:23:44] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:26:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[11:27:29] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:29:27] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:35:44] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[11:36:52] *** Joins: zaquest (~notzaques@5.130.79.72)
[11:37:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:39:17] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:39:35] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:39:58] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:42:20] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:44:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:44:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:44:55] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e233cc6a7b9846dd72b.dip0.t-ipconnect.de)
[11:46:07] *** Joins: max22- (~maxime@2a01cb08833598006f80219c43541139.ipv6.abo.wanadoo.fr)
[11:48:37] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:48:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:50:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:50:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:52:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:53:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:54:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:55:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:56:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:57:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:58:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:59:01] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374)
[11:59:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:02:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:03:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:06:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:07:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:08:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:09:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:11:23] *** Joins: notzmv (~zmv@user/notzmv)
[12:11:35] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[12:11:47] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[12:14:24] *** Joins: ftzm (~ftzm@178.249.51.108)
[12:15:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:17:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:17:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:19:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:19:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:20:14] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[12:27:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[12:28:01] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14)
[12:29:31] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[12:31:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:31:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Ping timeout: 252 seconds)
[12:31:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:33:24] <dminuoso> glguy: I actually did not. Especially the file loading macro seems useful.
[12:35:18] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[12:35:22] <dminuoso> The freedom you have with expandMacros' seems interest as well, since you could give @load some interesting behavior.
[12:36:28] <dminuoso> So Im writing a tool right now, that I hope will gain some users outside the Haskell world. Broadly speaking its a configurable authentication proxy for some service, and I've been wondering how to potentially allow JSON configuration in the mix of this.
[12:37:31] *** Quits: trillp (~user@69.233.98.238) (Remote host closed the connection)
[12:39:04] *** Joins: cfricke (~cfricke@user/cfricke)
[12:39:11] <dminuoso> With expandMacros' I could have a neat hook to allow mixing JSON into a config. The config might have some mostly static configuration, and then some more dynamic portion that the user could specify via JSON-encoded config-schema, which then could be mixed in via expandMacros'
[12:40:01] <dminuoso> With some custom @load that translates the JSON-encoded stuff into config-schema first
[12:40:05] <dminuoso> I like it.
[12:40:55] *** Joins: teo (~teo@user/teo)
[12:41:16] <dminuoso> s/config-schema/config-value/
[12:41:32] <dminuoso> These two libraries really are some of my favourite ones on hackage. :)
[12:44:56] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[12:45:48] *** Joins: xkuru (~xkuru@user/xkuru)
[12:47:34] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:37] *** allbery_b is now known as geekosaur
[12:48:33] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[12:51:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:51:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:54:43] *** Quits: ftzm (~ftzm@178.249.51.108) (Quit: Client closed)
[12:55:58] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[12:57:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:57:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:58:59] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:91cd:1543:8918:bc14) (Quit: gone to sleep. ZZZzzzâ€¦)
[13:02:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:02:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:04:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:04:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:06:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:06:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:06:34] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[13:07:19] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[13:08:39] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[13:10:43] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:10:55] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2cfd:b00:73ba:1137)
[13:11:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:11:25] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:14:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[13:16:52] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[13:17:57] *** Joins: wolfshappen (~waff@irc.furworks.de)
[13:18:25] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:19:58] <lortabac> I have a thread that provides a non-essential feature, currently if an exception occurs in that thread it bubbles up to the toplevel and makes the application crash
[13:20:25] <lortabac> how can I make it just log a message and kill the thread?
[13:20:59] <[exa]> can you catch the exception in the thread and let it kill itself?
[13:22:25] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[13:22:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:25:02] <dminuoso> lortabac:  setUncaughtExceptionHandler?
[13:26:37] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[13:27:37] <lortabac> [exa]: that's what I'm trying to do, but for some reason the exceptions is not caught in the thread
[13:27:43] <lortabac> *exception
[13:27:49] <dminuoso> lortabac: Is this an async exception perhaps?
[13:28:23] <dminuoso> If you're using unliftio/safe-exceptions you couldn't recover from them unless with manual fiddlery
[13:28:35] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:29:08] <lortabac> the thread starts a Prometheus scraping server, in order to test exception handling I'm starting it on a busy port
[13:29:59] <lortabac> it doesn't look like an async exception to me, but to be honest I don't know
[13:30:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:30:27] <dminuoso> lortabac: Which catch facility are you using? Control.Exception?
[13:30:39] <dminuoso> Or Control.Exception.Safe/UnliftIO.Exception?
[13:30:41] <lortabac> I tried replacing unliftio with exceptions and I still have the same result
[13:30:46] <lortabac> I'm using catchAll
[13:30:59] <dminuoso> lortabac: Ah so if you're using unliftio catch/catchAll, then I suspect you have an async exception
[13:31:16] <dminuoso> Because they're specifically designed to not be able to recover from async exceptions
[13:31:29] <dminuoso> You can verify using https://hackage.haskell.org/package/unliftio-0.2.20/docs/UnliftIO-Exception.html#v:isAsyncException
[13:32:43] <lortabac> I would like to verify, but how do I get the exception in the first place? :D
[13:32:56] <lortabac> if I can't catch it I can't pass it to that function
[13:33:32] <dminuoso> Use onException
[13:33:49] *** Joins: tom_ (~tom@host86-151-99-97.range86-151.btcentralplus.com)
[13:33:50] *** Quits: michalz (~michalz@185.246.204.40) (Remote host closed the connection)
[13:34:20] <lortabac> perhaps withException?
[13:34:31] <dminuoso> Ah, yeah
[13:36:15] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Ping timeout: 252 seconds)
[13:36:18] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[13:36:36] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Ping timeout: 245 seconds)
[13:37:30] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[13:38:29] *** Joins: zincy (~tom@2a00:23c8:970c:4801:2c67:e51d:1302:54d3)
[13:38:45] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[13:40:48] <lortabac> the exception handler is never reached
[13:40:54] <lortabac> I need to investigate more
[13:41:04] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 265 seconds)
[13:41:04] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:41:09] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:41:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:42:42] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:d0b4:48a4:6b63:b6a2)
[13:43:14] <dminuoso> Perhaps there's some exception handler somewhere that directly calls exit(2)?
[13:43:52] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:43:52] *** Lord_of_Life_ is now known as Lord_of_Life
[13:44:10] <lortabac> dminuoso: that's possible, I'm still not familiar with all the corners of the code base
[13:44:59] <lortabac> alternatively, I can make the Prometheus mandatory and let it crash, but now I'm curious to understand anyway
[13:45:16] <lortabac> *the Prometheus scraping server
[13:45:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[13:45:58] <dminuoso> lortabac: You can try looking for `foreign import ccall unsafe "exit"` or `exitImmediately`
[13:46:14] <dminuoso> But really, only that thread dies?
[13:46:21] <dminuoso> Or wait, you say the entire process dies right?
[13:46:42] <lortabac> yes, whatever I put in the handler is never executed
[13:46:42] <dminuoso> Then I suspect something is calling exit(2) using one of the two methods above
[13:46:49] <lortabac> and the whole process dies instead
[13:47:14] <dminuoso> Yeah, look for the above ffi import or uses of `exitImmediately`
[13:47:25] <dminuoso> Though this could also be hidden inside some dependency
[13:47:28] <dminuoso> Ugly.
[13:48:10] <lortabac> yes, I can't find it in our code base
[13:50:25] <dminuoso> lortabac: Another thing that might be happening is that your main/top thread gets killed away.
[13:50:45] <dminuoso> Say if there's some inner exception handler that throws an async exception at the main thread.
[13:51:05] <dminuoso> That is, your spawned thread has some exception handler that signals the main/top thread.
[13:51:12] <lortabac> this seems quite likely
[13:51:25] <lortabac> maybe warp does this?
[13:51:26] <tomsmeding> non-serious suggestion: write a C program that redefines exit(3) and _exit(3), compile that to a shared library, and LD_PRELOAD it so that you can break on that in a debugger
[13:53:00] <dminuoso> lortabac: Oh I have a theory!
[13:53:18] <dminuoso> I've tripped into this situation 3 times in tests. And every time I forget about it.
[13:53:33] <lortabac> maybe it's me who is doing something stupid, I certainly don't exclude this possibility :)
[13:55:43] <dminuoso> Is your code publically visible or can you share the structure of the test code here?
[13:56:28] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[13:57:35] <lortabac> I can't share the full code because it's work, but I can paste just the relevant bits
[14:00:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:00:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:00:52] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:01:22] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[14:03:35] <lortabac> dminuoso: https://paste.tomsmeding.com/52npg0c7
[14:03:39] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[14:04:41] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[14:06:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:06:41] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 265 seconds)
[14:06:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:08:45] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[14:09:40] *** Joins: genieliu (~genieliu@103.37.140.24)
[14:10:17] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[14:11:46] *** Joins: kuribas (~user@ptr-25vy0i9qa16kzbd65yl.18120a2.ip6.access.telenet.be)
[14:12:31] *** Joins: mmhat (~mmh@55d44a9c.access.ecotel.net)
[14:14:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:15:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:16:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:17:03] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[14:17:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:23:48] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[14:25:01] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[14:25:23] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:27:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:28:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:28:20] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:29:20] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[14:31:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:32:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:33:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:34:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:37:42] *** Quits: user0 (~aj@154.0.137.32) (Ping timeout: 256 seconds)
[14:39:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[14:42:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:42:56] *** Joins: user0 (~aj@154.0.137.32)
[14:43:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:44:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[14:45:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:46:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[14:47:20] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[14:48:15] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[14:48:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:51:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:51:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:53:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:53:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:58:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:58:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:00:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:00:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:05:52] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:11:13] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 252 seconds)
[15:11:58] *** Joins: wolfshappen (~waff@irc.furworks.de)
[15:13:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:14:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[15:16:37] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 240 seconds)
[15:17:22] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 256 seconds)
[15:18:43] *** Joins: genieliu (~genieliu@103.37.140.24)
[15:19:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[15:19:28] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[15:22:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:22:39] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[15:22:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:25:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:26:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d013:2c25:702e:efd1)
[15:26:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:27:00] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[15:28:49] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:29:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:30:47] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:31:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:31:30] <dminuoso> lortabac: Mmm no clue. I'd add careful logging to test some implied assertions you make.
[15:31:35] <dminuoso> That is, is that thing even called?
[15:31:46] <dminuoso> Wrap `run` with logging, see if it finished perhaps
[15:32:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:32:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:34:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:35:06] <lortabac> dminuoso: yes, I'm sure it's called because it works properly with the right port setting
[15:35:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:36:01] <dminuoso> lortabac: Do you ever get past `run`?
[15:36:15] <dminuoso> i.e. if you do something like `run ... >> hPutStrLn stderr "foo"`, do you get output?
[15:37:08] <dminuoso> And then I'd also try `run ... `onException` hPutStrLn "exception thrown"`
[15:37:19] <dminuoso> The intention is to understand how control flow is working here
[15:37:53] <dminuoso> In addition, you can try customizing `setUncaughtExceptionHandler` on the main thread 
[15:38:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:38:09] <dminuoso> (Try doing this as late as possible, to avoid any library doing this for you)
[15:38:17] <dminuoso> Or rather, overwriting any potential library handler that is being installed
[15:38:17] <lortabac> the actual 'run' is called by the prometheus library, I only call it indirectly through 'serveMetrics'
[15:38:29] <dminuoso> Sure, then `serveMetrics >> hPutStrLn stderr "foo"`
[15:38:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:38:49] <dminuoso> And: serveMetrics `onException` hPutStrLn stderr "exception thrown"
[15:40:37] <dminuoso> Also, something like: setUncaughtExceptionHandler (\e -> when (isAsyncException e) (hPutStrLn stderr "main thread killed by async exception") >> hPutStrLn (displayException e)) >> void (async ... serveMetrics)` 
[15:43:49] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:43:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:44:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:44:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:47:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:48:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:49:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:50:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:50:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:50:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:51:35] *** Joins: __monty__ (~toonn@user/toonn)
[15:53:22] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[15:55:18] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:56:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:56:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:58:30] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:00:43] <lortabac> dminuoso: I think I solved the mystery
[16:00:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:01:27] <lortabac> let me do another couple of tests
[16:03:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:03:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:04:39] <lortabac> ok, so everything works as expected, the problem was just my test
[16:05:38] <lortabac> in order to trigger an exception I ran the metrics server on the same port as another service, but in fact the other service started **later**
[16:07:02] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 265 seconds)
[16:07:03] <lortabac> if I choose a port that is actually busy the exception is caught in the thread as expected
[16:08:00] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 265 seconds)
[16:11:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:11:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:15:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:15:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:17:52] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[16:19:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:19:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:21:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:24:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:24:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:24:44] *** Joins: lechner (~lechner@debian/lechner)
[16:28:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:28:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:30:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:30:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:32:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:32:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:33:37] *** Quits: max22- (~maxime@2a01cb08833598006f80219c43541139.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[16:33:59] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:36:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:36:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:38:33] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:38:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:42:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:43:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:44:03] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:44:39] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[16:46:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:47:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:47:05] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:47:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:47:41] *** Joins: mncheck (~mncheck@193.224.205.254)
[16:48:00] *** Quits: zaquest (~notzaques@5.130.79.72) (Read error: Connection reset by peer)
[16:49:25] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[16:49:27] *** Joins: zaquest (~notzaques@5.130.79.72)
[16:51:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[16:54:59] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[16:58:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:01:19] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:02:45] *** Joins: simendsjo (~user@84.211.91.241)
[17:04:49] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:06:58] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e233cc6a7b9846dd72b.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[17:09:21] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[17:10:58] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d013:2c25:702e:efd1) (Quit: gone to sleep. ZZZzzzâ€¦)
[17:13:12] <merijn> heh
[17:13:18] <merijn> Set has a map, but no traverse?
[17:13:56] <merijn> That's annoying
[17:14:13] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 265 seconds)
[17:14:37] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 240 seconds)
[17:16:33] <maerwald> hmm
[17:16:34] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e233cc6a7b9846dd72b.dip0.t-ipconnect.de)
[17:17:07] <maerwald> merijn: https://github.com/haskell/containers/pull/592
[17:17:12] <Franciman> :t traverse
[17:17:13] <lambdabot> (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[17:17:21] *** Quits: vgtw_ (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 252 seconds)
[17:17:41] <maerwald> merijn: tldr: don't try to add anything to containers
[17:17:45] *** Joins: max22- (~maxime@2a01cb088335980011e17f1477c78e4b.ipv6.abo.wanadoo.fr)
[17:17:52] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[17:17:57] <Franciman> lol
[17:18:30] <maerwald> took a year to get useful input and then it ended in bikeshedding about CPP pragmas
[17:18:57] <maerwald> but the fastest version is in that PR
[17:19:15] <merijn> tbh, I don't really care about speed anyway
[17:19:20] <maerwald> traverse f s0 = fmap (GHCExts.fromListN (size s0)) . Prelude.traverse f . toList $ s0
[17:19:40] <maerwald> that seems to fuse well or so
[17:22:13] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[17:23:04] <Franciman> if you don't care about speed what's the point of using set?
[17:23:06] <Franciman> x.x
[17:23:25] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[17:23:43] <merijn> Franciman: Semantics?
[17:23:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:24:08] <Franciman> no i mean
[17:24:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[17:24:10] <Franciman> you can use map
[17:24:13] <Franciman> it has traverse
[17:24:22] <merijn> Franciman: On values, not on keys
[17:24:25] <Franciman> https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Strict.html#v:traverseWithKey
[17:24:43] <merijn> Franciman: How would you reconstruct the semantics of "traversing Set" using that?
[17:25:02] <Franciman> i don't care tbf
[17:25:07] <Franciman> ops wrong channel
[17:25:10] <Franciman> merijn: I see
[17:25:15] <Franciman> I read the type wrongly
[17:25:19] <Franciman> sorry
[17:25:29] <Franciman> then you can use a list
[17:25:36] <Franciman> and continuously traverse it
[17:25:46] <Franciman> O(n^n)
[17:25:48] <Franciman> ~
[17:26:40] *** Quits: caubert (~caubert@136.244.111.235) (Quit: WeeChat 3.3)
[17:26:44] <Franciman> https://hackage.haskell.org/package/data-ordlist-0.4.7.0/docs/Data-List-Ordered.html merijn ejony
[17:26:54] <dminuoso> maerwald: Uh, whats the tldr for that pull request?
[17:27:38] <dminuoso> Im not sure I understand the claim that this does not add functionality.
[17:28:04] <dminuoso> Especially given `map f = fromList . List.map f . toList`
[17:28:07] <maerwald> dminuoso: that contributing to containers is annoying
[17:28:13] <dminuoso> How does that make it into containers but traverse not?
[17:28:42] <maerwald> there was some bikeshedding about CPP and ancient GHC versions and then I got no further input on what to do
[17:31:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[17:34:03] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (Remote host closed the connection)
[17:34:03] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (Remote host closed the connection)
[17:34:03] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (Remote host closed the connection)
[17:34:04] *** Quits: jakzale (6291399afa@user/jakzale) (Remote host closed the connection)
[17:35:20] <Franciman> btw the semantics of a traverse on set are not so clear. If you don't care about speed
[17:35:22] <Franciman> just do
[17:35:32] <Franciman> traverse . toList
[17:35:40] <Franciman> do your traverse and rebuild your set
[17:36:02] <Franciman> provlem solved
[17:36:06] <Franciman> i suppose
[17:36:12] <maerwald> Franciman: that's what I just posted above
[17:36:14] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (Remote host closed the connection)
[17:36:14] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (Remote host closed the connection)
[17:36:14] *** Quits: nickdaly-away (45ce440a48@2604:bf00:561:2000::e2) (Remote host closed the connection)
[17:36:14] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[17:36:14] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (Remote host closed the connection)
[17:36:20] <maerwald> that IS the fastest version
[17:36:23] <Franciman> sorry maerwald I didn't read it
[17:36:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Ping timeout: 265 seconds)
[17:36:33] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[17:36:35] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[17:36:35] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[17:36:36] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[17:36:40] <Franciman> ah nice
[17:36:43] *** Joins: nickdaly-away (45ce440a48@2604:bf00:561:2000::e2)
[17:36:43] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[17:36:43] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[17:36:44] <Franciman> then what are we talking about?
[17:36:47] <Franciman> I am losing time as usual
[17:36:49] <Franciman> bye
[17:36:49] *** Joins: sm2n (ae95cb1267@user/sm2n)
[17:36:50] *** Joins: jakzale (6291399afa@user/jakzale)
[17:36:53] <Franciman> thanks
[17:38:27] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[17:39:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[17:40:36] <Franciman> maerwald: sorry is it very efficient because of laziness?
[17:40:55] <maerwald> I guess it fuses well
[17:40:58] <Franciman> i think it can be made at least as efficient, without changing the ease of composition with explicit codata and polarisation
[17:41:10] <Franciman> can't wait to try
[17:41:22] <Franciman> imagine a streaming list implementation
[17:41:30] <Franciman> who gives you the elements of the set on demand
[17:41:45] <Franciman> with linearity you can also get fusion, I believe
[17:41:49] <Franciman> no more ghc vodoo
[17:41:51] <Franciman> OH OHHH
[17:41:55] <dminuoso> "
[17:41:57] <Franciman> who knows if this makes sense
[17:42:05] <Franciman> I do wonder
[17:42:17] <dminuoso> Found type wildcard '_' standing for '_'
[17:42:19] <dminuoso> Thanks GHC!
[17:42:22] <Franciman> ^^
[17:42:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:44:09] *** Joins: caubert (~caubert@136.244.111.235)
[17:47:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[17:49:34] *** Joins: xdej (~xdej@quatramaran.salle-s.org)
[17:50:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:51:37] *** Joins: jkaye (~jkaye@c-71-205-220-154.hsd1.co.comcast.net)
[17:57:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[17:58:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[17:58:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:59:10] *** Joins: gaff (~gaff@49.207.205.24)
[17:59:30] <gaff> i have some code at https://paste.ofcode.org/3bCeaTekdDQTadp8CPRwV65
[18:00:26] *** Quits: k60` (~user@94.25.169.9) (Read error: No route to host)
[18:00:30] <gaff> to test this code using quickcheck, do you randomly generate leap years then check if the function returns true?
[18:01:17] *** Joins: k60`` (~user@94.25.169.9)
[18:01:28] <gaff> i ask this question because one of the pitfalls of using quickcheck is that if you are not careful, you end up duplicating the source code in your tests.
[18:01:30] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:02:19] <gaff> appreciate your help
[18:03:02] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:04:41] <[exa]> gaff: property test are much better for code where it is not very obvious that the implementation follows the "defining property". Here the defining property is basically same as implementation so I wouldn't care much, the only "gain" you get here is that you are less likely to do the same code error in both the test and code
[18:05:26] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[18:05:40] <[exa]> "normal" tests that throw in a few years that should be leap and few that should not, just to make sure that the function is sane, would make better sense here to me
[18:06:54] *** Quits: k60`` (~user@94.25.169.9) (Ping timeout: 265 seconds)
[18:06:59] <[exa]> if you'd go with quickcheck, you might test that against some kind of standard library that can calculate leap years, but then the question is why not use the library in the first place :]
[18:07:23] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 265 seconds)
[18:08:07] <gaff> [exa]: ok, i am just trying to learn how to write good properties with quickcheck.  in this case, which is deliberately simple, quickcheck can test some invariants, like if `x` is a leap year, so must `4 * x`, etc
[18:08:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:08:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:08:20] *** Joins: wroathe (~wroathe@user/wroathe)
[18:09:09] <merijn> Man...today's AoC is surprisingly tricky
[18:09:26] <gaff> also, quickcheck can generate a whole set of random leap years, so perhaps you can have more confidence in your tests.  so that's the plus i see.  plus, i learn to write some properties.
[18:09:38] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[18:10:24] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[18:11:26] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:11:47] <[exa]> merijn: the first part looks very prologish
[18:11:59] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[18:12:07] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-3090-ba98-2dba-9449.fixed6.kpn.net)
[18:12:26] <[exa]> gaff: ah yes practicing this would probably make sense
[18:12:46] <merijn> [exa]: The first part is the non-prolog-y part
[18:12:51] <merijn> it's the second one that is
[18:12:54] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[18:13:02] <merijn> Feels very "the tip of my tongue"-y
[18:13:19] <merijn> I think maybe my problem is that my solution is trying to be overly generic
[18:14:09] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[18:14:18] <gaff> [exa]: ok 
[18:15:09] *** Joins: Guest40 (~Guest40@ec2-54-215-90-243.us-west-1.compute.amazonaws.com)
[18:15:23] <gaff> [exa]: what bugs me is that almost all talks on quickcheck start with the same hackneyed example: reverse (reverse xs) = xs
[18:17:42] *** Joins: genieliu (~genieliu@111.193.167.10)
[18:18:19] <gaff> [exa]: also, quickcheck properties, if you can write them, are good if you don't know what exactly may be the output of an operation for a random input.
[18:18:30] *** Quits: alx741 (~alx741@186.178.108.36) (Ping timeout: 265 seconds)
[18:19:40] <dminuoso> Can someone explain to me why GHC complains that `pat0` is ambiguous here? https://gist.github.com/dminuoso/7ca1d473e20c70b1ddb98fc714f4391c
[18:20:46] <tomsmeding> dminuoso: type family Inner tag field = r | r -> field where
[18:20:55] <tomsmeding> with TypeFamilyDependencies
[18:21:13] <tomsmeding> crucial bit: "NB: â€˜Innerâ€™ is a non-injective type family"
[18:21:46] <dminuoso> tomsmeding: that does not work, that would violate injectivity
[18:21:58] <dminuoso> See: Inner Descr f = T.Text
[18:22:04] <tomsmeding> oh
[18:22:17] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[18:22:20] <tomsmeding> oh fair point
[18:22:24] *** Guest40 is now known as toeinriver
[18:23:01] *** Quits: genieliu (~genieliu@111.193.167.10) (Ping timeout: 240 seconds)
[18:23:05] *** Quits: gaff (~gaff@49.207.205.24) ()
[18:23:20] <tomsmeding> the point is that if you call hasPerm, say as 'hasPerm u f t', then from the types of u, f and t, ghc can infer what 'Inner mode [Authorization tok pat]' should be, but from that it can't infer what tok and pat should be
[18:23:31] <tomsmeding> tok can be inferred from the final return type, but pat appears nowhere else
[18:23:39] <tomsmeding> so it's precisely the non-injectivity that makes it fail here
[18:23:46] <dminuoso> I want it to not care what `pat` is
[18:24:18] <dminuoso> So previously I had: hasPerm :: (Show tok, Show pat) => [Authorization tok pat] -> T.Text -> GerdM tok
[18:24:35] <dminuoso> And I turned it into: hasPerm :: User -> PermSelector tok pat -> T.Text -> GerdM tok
[18:26:35] * tomsmeding doesn't know how to get what you want; would say it is impossible but not sure
[18:26:41] <tomsmeding> add a Proxy :p
[18:26:53] <dminuoso> Yeah I dont know how to do that
[18:27:08] <tomsmeding> how to add a proxy to fix this?
[18:27:15] <tomsmeding> hasPerm :: Proxy pat -> User -> ...
[18:27:22] <dminuoso> Uh, but why would that..
[18:27:40] <tomsmeding> then the signature gets accepted, and at a call site you have to choose a type for 'pat'
[18:28:10] <tomsmeding> the point was that from knowing Inner mode [Authorization tok pat] ~ t for some concrete t, ghc can't get a concrete type for pat
[18:28:16] <tomsmeding> and ghc needs concrete types for everything
[18:28:22] <tomsmeding> Proxy is a data type, so is injective
[18:28:27] <dminuoso> But if that type variable is not used anywhere, why does it matter in the first place?
[18:28:56] * tomsmeding has to go, sorry
[18:29:02] <dminuoso> No worries, thanks for your help!
[18:29:11] <tomsmeding> that's precisely the NoAllowAmbiguousTypes restriction I believe
[18:29:43] <oats> https://paste.xinu.at/z2e3Dv/
[18:29:43] <oats> anyone able to help me figure out why this parser can't parse Day 8? it's something to do with the " | " separator, but I can't figure it out exactly in my testing...
[18:30:17] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:32:09] <merijn> oats: The space combinator consumes the space in front of " | " and doesn't backtrack
[18:32:35] <oats> oof, that's a little counterintuitive
[18:32:37] <oats> thanks :)
[18:34:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[18:35:05] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 252 seconds)
[18:35:42] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[18:36:21] <dminuoso> space = void $ takeWhileP (Just "white space") isSpace
[18:36:30] <dminuoso> And takeWhileP does not backtrack?
[18:36:33] *** Joins: k60`` (~user@94.25.169.9)
[18:36:40] <dminuoso> The documentation says differently, what am I missing merijn?
[18:37:04] <merijn> dminuoso: sepBy doesn't backtrack, though
[18:37:33] <merijn> dminuoso: It doesn't wrap the separator in a try
[18:37:38] *** Joins: gustik (~gustik@2a01:c844:242f:ba20:72e:7030:46bf:1353)
[18:38:10] * dminuoso finds megaparsec confusing
[18:38:20] <merijn> In general the backtracking behaviour of megaparsec is poorly explained/documented
[18:38:24] <merijn> Which is a bummer
[18:38:32] <merijn> So I mostly debug it via guessing
[18:38:49] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[18:39:01] <oats> is there a generally agreed upon better megaparsec?
[18:39:09] <merijn> Part of the reason is the splitting off of parser-combinators
[18:39:11] <merijn> oats: No
[18:39:22] <dminuoso> Everything Ive seen in alex/happy looked nice so far
[18:39:26] <merijn> So parser-combinators has to be parser implementation agnostic
[18:40:03] <dminuoso> For for something like AoC alex/happy seem like drastic overkill
[18:40:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[18:40:54] <merijn> At least your parser not working protects you from the rest of today's excercise >.>
[18:41:28] * dminuoso dwindled away into type progamming lands
[18:41:37] *** Joins: alx741 (~alx741@186.178.108.192)
[18:41:39] <oats> merijn, uh oh
[18:41:43] <dminuoso> And it seems my enchanted swork broke when fighting the water daemon of GHC.
[18:41:51] <merijn> I was trying a nice generic constraint solver, but that's not encoding enough information :\
[18:41:55] <dminuoso> The type error diagnostics are slowly defeating me. :(
[18:42:13] <merijn> and naming things for today is hard :\
[18:42:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[18:43:25] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 240 seconds)
[18:44:03] * oats attempts to build a map
[18:45:25] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 240 seconds)
[18:47:57] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:540e:67c2:47ff:b4e3)
[18:48:59] *** Quits: toeinriver (~Guest40@ec2-54-215-90-243.us-west-1.compute.amazonaws.com) (Quit: Client closed)
[18:50:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:50:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:51:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:51:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:51:56] *** Joins: wroathe (~wroathe@user/wroathe)
[18:53:36] <__monty__> merijn: Maybe you're overthinking it? I'm using such stellar names as "zero" and "four".
[18:53:54] <merijn> __monty__: More for my constraint computation
[18:53:57] <merijn> Also
[18:54:06] <merijn> A pox upon the lack of symmetric difference in containers
[18:54:43] <merijn> Leaving me to compute myself...*again*
[18:55:25] <__monty__> Doing two differences isn't *that* bad though. Just constant factors ; )
[18:55:40] <merijn> It's not two differences, though?
[18:55:51] <merijn> You need to union, intersect, then difference
[18:56:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:57:25] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[18:58:03] <__monty__> Isn't that disjointUnion?
[18:58:12] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:540e:67c2:47ff:b4e3) (Quit: gone to sleep. ZZZzzzâ€¦)
[18:58:33] <merijn> No
[18:58:40] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:540e:67c2:47ff:b4e3)
[18:59:09] <merijn> __monty__: At least the type signature and example of disjointUnion look *nothing* like symmetric difference
[18:59:24] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:59:46] <merijn> Symmetric difference is something like:
[18:59:47] <merijn> symmDiff s1 s2 = (s1 `S.union` s2) `S.difference` (s1 `S.intersection` s2)
[19:00:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:00:27] <dminuoso> tomsmeding: Ohh its starting to slowly hit me.
[19:01:07] <dminuoso> type PermSelector tok pat = forall mode. PermsF mode -> Inner mode [Authorization tok pat]
[19:01:52] <dminuoso> Even if use `PermSelector () ()`, the `tok` and `pat` in the resulting part are still ambiguous, because Inner is non-injective. And indeed, if we consider the Descr branch of Inner, I start to see why
[19:03:08] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:540e:67c2:47ff:b4e3) (Ping timeout: 252 seconds)
[19:03:13] <dminuoso> I guess the crux is trying to make PermSelector polymorphic over `mode`
[19:03:15] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[19:03:22] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[19:03:48] <dminuoso> Seems like I cant ergonomically have a universally quantified type, if that quantified type goes into into a non-injective type family
[19:04:00] <dminuoso> It hinders type inference completely
[19:04:50] <__monty__> merijn: You're right of course. My brain saw what it wanted to see.
[19:04:52] <dminuoso> So I have an idea. Instead of using `Inner Descr a = T.Text`, I could use `Inner Descr a = Const Text a`
[19:05:00] <dminuoso> Then I could get the injectivity back
[19:05:49] *** Joins: ystael (~ystael@user/ystael)
[19:08:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:08:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:09:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[19:10:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:12:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:12:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:12:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:12:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:12:47] *** Joins: wroathe (~wroathe@user/wroathe)
[19:16:20] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[19:17:11] <boxscape> Hmm is there any value/prior work in thinking about strictness like an Applicative functor, such that `f <$> Strict x <*> Strict y` is `f $! x $! y`?
[19:17:20] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[19:17:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[19:17:43] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:18:16] <boxscape> (The only reason I'm thinking about this is because I was thinking "Idris's ! notation could also instead be used to indicate that an argument should be evaluated before application" and then was thinking "but maybe you can combine those")
[19:18:21] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[19:19:52] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[19:20:51] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 265 seconds)
[19:21:20] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:21:36] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[19:22:45] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 252 seconds)
[19:23:18] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:24:20] <sprout_> merijn: https://github.com/egel-lang/aoc-2021/blob/main/day8/task2.eg <- task 2.  took me 3 or 4 hours..
[19:24:36] <sprout_> not haskell but close enough,  I guess
[19:24:46] <merijn> I can't look yet, I'm still solving it :p But I think I had the necessary epiphany so it's "just programming"  now :p
[19:25:02] <sprout_> good luck!
[19:27:09] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e233cc6a7b9846dd72b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[19:27:27] *** Quits: mbuf (~Shakthi@223.178.121.64) (Quit: Leaving)
[19:29:33] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:32:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:32:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:33:42] <tomsmeding> dminuoso: what you say sounds right to me
[19:33:47] <tomsmeding> the Const hack is a hack though :p
[19:33:51] <tomsmeding> then I'd prefer a Proxy
[19:34:07] <dminuoso> tomsmeding: Doesnt work.
[19:34:09] <tomsmeding> at least that doesn't imply that you're doing anything fancy with the Const, just fixing a type parameter
[19:34:20] <tomsmeding> (can also add the Proxy argument to the PermSelector instead of hasPerms
[19:34:21] <tomsmeding> )
[19:34:28] <dminuoso> Or rather, it has to be so ubiquitously present with explicit types..
[19:34:33] <tomsmeding> right
[19:34:54] <dminuoso> tomsmeding: With Tagged (which I prefer over Const for this), this becomes visible only in one small part of the code basis where I extract text for visualization
[19:35:03] <dminuoso> Which means it has much less impact on the general code
[19:35:24] <tomsmeding> what's Tagged? just 'data Tagged tag a = Tagged a'?
[19:35:29] <dminuoso> Yeah
[19:35:36] <tomsmeding> yeah feels semantically better to me
[19:35:40] <tomsmeding> than Const, that is
[19:35:53] <dminuoso> Yup, I mean you can omap over it if you like
[19:36:07] <dminuoso> Not that I really want, but Tagged conveys the intent much better
[19:36:11] <tomsmeding> assuming that you correctly assessed that a Proxy is unworkable, which I readily assume you did :)
[19:36:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[19:36:35] <dminuoso> tomsmeding: I would have had to pass proxy over a hundred times.
[19:36:43] <tomsmeding> or if carrying the tag type variable actually makes some semantic sense
[19:36:57] <dminuoso> With Tagged it's just 4 places that become aware of it
[19:37:13] <tomsmeding> and in all those hundred times, can the type variable be inferred if you just write 'Proxy' at the call site?
[19:37:25] <dminuoso> tomsmeding: no
[19:37:43] <dminuoso> Inference broke everywhere
[19:37:49] <tomsmeding> ah, then indeed it's unworkable
[19:37:55] <dminuoso> Basically I had this situation:
[19:38:06] *** Joins: shailangsa (~shailangs@host86-161-220-126.range86-161.btcentralplus.com)
[19:38:25] <dminuoso> f :: PermSelector tok () -> tok; f sel = somethingElse sel
[19:38:38] <dminuoso> And inference for `somethingElse sel` broke on pat being ambiguous
[19:38:57] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2cfd:b00:73ba:1137) (Quit: WeeChat 2.8)
[19:39:13] <dminuoso> Which seemed ridiculous initially, but the problem was not that I set the second type argument to (), but inside of `type PermSelector` there was this type family
[19:39:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:39:34] <dminuoso> type PermSelector tok pat = forall mode. PermsF mode -> Inner mode [Authorization tok pat]
[19:40:01] <tomsmeding> right, f's type signature fixes the output of that type family
[19:40:04] <tomsmeding> and only that
[19:40:13] <tomsmeding> and 'sel' fixes 'mode', which doesn't help here
[19:40:27] <dminuoso> no, sel does not fix mode
[19:40:30] <dminuoso> which is the crux of the probel
[19:40:52] <tomsmeding> ok, "fix" as in relate the type variable to some explicit quantifier
[19:41:05] <tomsmeding> it's not yet monomorphic, true, but not ambiguous anymore
[19:41:06] <dminuoso> Ah yeah
[19:41:17] <tomsmeding> pat, on the other hand, is ambigiuous still
[19:41:34] <tomsmeding> I think you analysed the problem correctly and should just use Tagged :p
[19:41:58] <dminuoso> tomsmeding: I hope I do, I dont really understand it, its just some very lose sense of "I think I have an understanding"
[19:42:00] <tomsmeding> even if my gut doesn't like it for some reason
[19:42:12] <dminuoso> Well, with Tagged + tyfam fundeps everything just works out
[19:42:30] <dminuoso> And the pain is little, so I guess it doesnt matter
[19:42:57] <dminuoso> I need to reduce this into a simplistic reproducer and fight my way through type inference
[19:42:57] <tomsmeding> I'm fairly sure I understand where the error is coming from, technically (which allows me to suggest a _possible_ fix), but I'm also fairly sure I have no idea how this issue fits in the more general framework of my understanding of haskell -- and that latter thing is what should motivate the _correct_ fix
[19:43:34] *** Joins: gaff (~gaff@49.207.205.24)
[19:43:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:43:42] <tomsmeding> s,correct,correct/idiomatic,
[19:43:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:44:21] <dminuoso> I gotta run for now. Ill make a smaller testcase, and then we can perhaps continue this
[19:44:29] <dminuoso> I'd really like to fully understand what's going on here
[19:44:35] <tomsmeding> cheers :)
[19:44:50] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:48:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:48:24] *** Joins: rookie101 (~rookie@165.232.121.13)
[19:50:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[19:50:34] *** Joins: son0p (~ff@181.136.122.143)
[19:51:26] *** Quits: alx741 (~alx741@186.178.108.192) (Quit: alx741)
[19:52:38] *** Joins: alx741 (~alx741@186.178.108.192)
[19:55:35] *** Quits: gaff (~gaff@49.207.205.24) (Quit: Bye ...)
[19:56:23] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[19:59:43] *** Quits: lyxia (~lyxia@poisson.chat) (Quit: WeeChat 3.3)
[19:59:59] *** Joins: lyxia (~lyxia@poisson.chat)
[20:01:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:01:44] *** Quits: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy) (Quit: server died; rip)
[20:03:11] *** Joins: Axma10079 (~Axman6@user/axman6)
[20:04:31] *** Joins: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy)
[20:05:28] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[20:05:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:07:31] *** Joins: Techcable (~Techcable@168.235.93.147)
[20:08:42] *** Joins: MoC (~moc@user/moc)
[20:09:10] <merijn> oof
[20:09:14] <merijn> Finally done with today
[20:09:58] <MoC> I fully agree with that sentiment.
[20:10:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[20:10:09] <merijn> Now I need to clean up the nightmare mess that is the code I used to get there xD
[20:10:58] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[20:12:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:14:43] <sprout_> yah,  I don't feel cleaning up the code either...
[20:15:01] <merijn> oh, now that I have a working solution that part is fairly easy
[20:15:17] <merijn> Main problem is that I took a lot of shortcuts violating my own rules :p
[20:15:24] <sprout_> with me it's just moving the packing/unpacking around
[20:15:55] <merijn> I need to get all the error handling fixed
[20:16:19] <sprout_> I worked incrementally towards a solution but in the end it's just creating a 'word -> word'  and 'word -> int' mapping
[20:17:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[20:17:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:17:15] <sprout_> the idea is that you only need to create the 'word -> word' permutation map once
[20:17:21] <sprout_> then it's easy
[20:18:10] <merijn> Well yeah, but still :p
[20:18:54] <c_wraith> ....  holy crap.  after all that time I spent on it last night, I just figured out how to do it as dumb as rocks but actually easy to code.
[20:19:44] <merijn> c_wraith: My solution isn't super complicated (any more), but I wouldn't call my final solution dumb as rocks, so I'm curious what the dumb as rocks solution is
[20:19:48] <c_wraith> ...  that should have taken me 15 minutes, not the roughly 23 it's going to end up
[20:19:55] <c_wraith> 23 *hours*, that is
[20:20:18] <c_wraith> I'll send you a private message
[20:21:49] <darchitect> I've heard Simon Payton talk about elegant internal language which Haskell compiles down to 
[20:22:03] <darchitect> (presumably lambda calc)
[20:22:20] <darchitect> does anyone know how to get this representation from ghc ? (for learning purposes)
[20:22:21] <c_wraith> there are a few levels of internal languages GHC uses
[20:22:26] <c_wraith> he probably was talking about core
[20:22:42] <merijn> I would assume he was talking about System F_omega in a talk
[20:22:56] <c_wraith> well, that the elegant language that core aspires to be :)
[20:23:01] <c_wraith> *that's
[20:23:39] <darchitect> I am currently going through the Haskell Book and the first chapter is on lambda calculus, which made me think about my programs in a rather different way 
[20:24:16] <darchitect> and was wondering if I can get a haskell proram to compile down to pure lambda calc
[20:24:24] <darchitect> but I guess that's not the case ?
[20:24:31] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:24:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:25:11] <shapr> darchitect: you could produce STG ? https://github.com/quchen/stgi
[20:25:24] <merijn> darchitect: tbh, mostly it is. Not to the simply-typed/untyped lambda calculus shown in the Haskell Book
[20:25:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[20:25:51] <monochrom> "pure lambda calculus" does not have built-in integers, it uses huge functions to mimick huge integers. It is utterly impractical to compile Haskell or any useful language to "pure lambda calculus".
[20:26:10] <merijn> Well, depends on how you define "pure" lambda calculus
[20:26:38] <monochrom> Sure, but "the Haskell Book" is cited. We all know what's in its Chapter 1. Or rather, what's not in.
[20:27:12] <darchitect> yeah yeah there is a mention in the book where they say you can derive numbers with lambda calculus but it was ommited 
[20:27:17] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:27:30] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:27:33] <merijn> darchitect: I mean, compiling to untyped lambda calculus is fairly straightforward, but rather impractical, so nobody bothers with that
[20:27:42] <monochrom> But if you allow yourself to add integers and characters and user-defined data types, GHC does that.
[20:28:10] *** Joins: dmenz (~dmenz@2804:14d:5cd4:5e94::d)
[20:28:47] <monochrom> I mean if you allow a practical lambda calculus that already comes with those types.
[20:29:01] <darchitect> yeah I don't have any restrictions just want to play around with the ideas from Chapter 1 and see how they are represented in Haskell 
[20:29:18] <darchitect> can you give me an example representation of a simple haskell program ?
[20:30:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:30:50] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:31:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:32:22] <merijn> tbh, I'm not really sure how to answer that :)
[20:32:30] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:32:37] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:c8d5:dc72:c642:445d)
[20:34:35] <darchitect> yeah, no worries I reckon the question is a bit vague anyway :d
[20:34:47] *** Joins: Dansk31 (~Dansk31@147.114.141.88.rev.sfr.net)
[20:35:03] <darchitect> nothing important, I just wanted to see if someone has done it before
[20:35:36] <merijn> darchitect: So one insight is that there isn't really a single "lambda calculus"
[20:35:57] <merijn> darchitect: Instead there's nearly infinite different lambda calculi based around the rough ideas
[20:36:04] <darchitect> o.O
[20:36:05] <boxscape> darchitect: Church encodings are one way to encode data in lambda calculus, but Haskell doesn't actually use it - it has a way to construct data types build in on top of lambda calculus, since it's more efficient https://en.wikipedia.org/wiki/Church_encoding#Church_numerals
[20:36:15] <merijn> iirc, Haskell Book mostly deals with the "untyped lambda calculus"
[20:36:21] <boxscape> I guess monochrom more or less said that
[20:36:30] <monochrom> (There is not even a single "the set of all natural numbers". There are two.)
[20:36:51] <merijn> darchitect: But there's the Simply Typed Lambda Calculus, etc. All variations of the base idea of the untyped one extended with more toys
[20:36:54] <monochrom> (More practically, there is not a single "C language" either.)
[20:37:07] <darchitect> haha thanks guys
[20:37:08] <merijn> darchitect: The untyped LC is the most popular because it has the smallest number of primitives
[20:37:11] <darchitect> will look into both 
[20:37:14] <darchitect> of the above
[20:37:18] <merijn> darchitect: Which makes it mathematically easy to deal with
[20:37:19] <boxscape> darchitect: you can also compile a program with -ddump-simpl to see the intermediate representation in the Core language (which SPJ was likely talking about), but it's not super readable, since it's not meant for human consumption
[20:37:27] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 268 seconds)
[20:37:35] <merijn> darchitect: But also makes it *hopelessly* painful for actual, you know, computation
[20:37:50] <monochrom> This is what happens to social constructs. https://xkcd.com/927/
[20:38:02] <darchitect> ... should have joined irc earlier in my life 
[20:38:04] <merijn> darchitect: So you get ideas like "well, what if instead of having just lambdas and applications, we also have numbers and operations on them?"
[20:38:23] <merijn> darchitect: You *can* implement numbers and math using just untyped LC, but that sucks
[20:39:05] <darchitect> got it
[20:39:08] <darchitect> thanks again 
[20:39:35] <merijn> whereas untyped LC + numbers is drastically more efficient with only a fairly small number of extra primitives. In the end "System F_omega" is the language GHC uses internally, which is a lambda calculus that's extended with a whole bunch of stuff like datatypes, types, and what not
[20:39:54] <merijn> darchitect: But it still looks a hell of a lot like the untyped LC if you squint a bit
[20:40:19] *** Quits: pfurla (~pfurla@2804:14d:5c5a:9a78:c8d5:dc72:c642:445d) (Quit: gone to sleep. ZZZzzzâ€¦)
[20:40:34] <merijn> And converting it into untyped LC basically just means finding LC translations for the extra/added primitives (which we know is doable, we just cannot be bothered)
[20:41:12] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:41:23] <__monty__> >.< Introduced a newline in my input and suddenly my combinator parser required over 10 GB of memory (killed) : s
[20:41:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[20:42:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:42:22] <monochrom> \âˆ©/ O(1)-input DoS attacks
[20:42:56] <__monty__> This is a bit of a sobering experience tbh. I thought I had *some* grasp of parser combinators.
[20:43:26] <__monty__> Dunning-Kruger effect eliminated.
[20:43:27] <Dansk31> Hi, are IRC channels the best way to chat anonymously ? 
[20:43:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[20:43:52] *** Joins: nfd (~nfd@user/nfd)
[20:43:54] <monochrom> Do you absolutely need "best" or is good enough good enough?
[20:43:55] <merijn> Define anonymously
[20:44:00] <__monty__> Dansk31: Really not the right channel for such a question. Depends a lot on your definition of anonymous.
[20:44:26] <monochrom> IRC is good enough. I don't know what "best" means.
[20:44:36] <monochrom> Err, I know. The best way to win is not to play.
[20:44:48] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[20:44:53] <monochrom> Indeed, I don't even have a Facebook account.
[20:45:41] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[20:46:11] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[20:46:28] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:49:39] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Remote host closed the connection)
[20:50:47] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:51:29] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[20:51:48] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:53:06] *** Quits: srk (~sorki@user/srk) (Remote host closed the connection)
[20:53:21] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[20:53:24] *** Joins: srk (~sorki@user/srk)
[20:53:47] <Dansk31> Thank you for your answers ! 
[20:54:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:54:53] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[20:56:27] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:56:44] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[20:57:04] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[20:57:19] <oats> the best way to chat anonymously is in-person, in a soundproofed faraday cage
[20:57:45] <geekosaur> define anonymously
[20:58:14] <oats> oh wait anonymously, I interpreted that as "securely" somehow
[20:58:19] <geekosaur> that5's not so much anonymous as untappabvle. anonymous probably means the other person doesn't know who you are, which that fails on
[20:58:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:58:39] <oats> the best way to chat anonymously is message-in-a-bottle
[20:59:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:00:45] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[21:02:07] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:02:09] <geekosaur> anyway I would say IRC is not particularly anonymous, although you can provide any user info you want other people can see things like the server's idea of your IP address (unless you have a cloak, but then IRC ops know your IP address and possibly other information for you to get that cloak)
[21:02:45] <geekosaur> there might be e.g. discord servers oriented around anonymity
[21:03:31] <Dansk31> Yep I will check that 
[21:03:36] <Franciman> don't they get banned?
[21:03:41] *** Joins: zhakupov (~zhakupov@static.90.189.158.74.sinor.ru)
[21:03:41] *** Quits: alx741 (~alx741@186.178.108.192) (Quit: alx741)
[21:03:53] *** Quits: Dansk31 (~Dansk31@147.114.141.88.rev.sfr.net) ()
[21:04:59] <geekosaur> federated discord servers likely, but I imagine there are others
[21:05:21] <geekosaur> or servers federated into networks around anonymity
[21:08:28] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com)
[21:10:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:10:22] *** Joins: emf_ (~emf@2620:10d:c091:480::1:7b30)
[21:11:02] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com) (Read error: Connection reset by peer)
[21:12:59] *** Joins: Dansk31 (~Dansk31@147.114.141.88.rev.sfr.net)
[21:14:26] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:d0b4:48a4:6b63:b6a2) (Remote host closed the connection)
[21:15:49] *** Joins: Guest48 (~Guest48@wireless-student-pt3-241-129.lut.ac.uk)
[21:16:04] <Guest48> Hey, is this chat still active?
[21:16:14] <geekosaur> yes?
[21:16:32] <DigitalKiwi> no, never
[21:17:09] <DigitalKiwi> don't listen to geekosaur or any of the other 700+ people that might say otherwise
[21:17:10] *** Quits: Guest48 (~Guest48@wireless-student-pt3-241-129.lut.ac.uk) (Client Quit)
[21:17:53] <sm> shhh
[21:17:53] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[21:19:01] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 240 seconds)
[21:19:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:20:25] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:20:29] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[21:22:07] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[21:22:13] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:22:18] *** Quits: Dansk31 (~Dansk31@147.114.141.88.rev.sfr.net) ()
[21:25:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:27:36] <DigitalKiwi> i have been shhh'd twice by as many people in 10 minutes
[21:27:41] <DigitalKiwi> apparently i'm being onery today
[21:31:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:32:18] *** zer0bitz_ is now known as zer0bitz
[21:33:14] *** Joins: simendsjo (~user@84.211.91.241)
[21:34:05] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[21:35:45] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:36:21] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[21:37:17] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:37:38] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[21:39:41] <EvanR> am I on the right track that learning logic programming would have applications to day 8 of AoC
[21:42:29] *** Joins: georgy (~bc8165b6@cerf.good1.com)
[21:44:24] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 265 seconds)
[21:44:32] *** Joins: alx741 (~alx741@186.178.108.192)
[21:46:03] *** Joins: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71)
[21:47:28] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:47:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:47:37] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:48:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:48:44] *** Joins: pfurla (~pfurla@2804:14d:5c5a:9a78:10e5:165:b849:664a)
[21:50:52] <tomsmeding> I find it funny that Guest48 immediately left after getting that response
[21:52:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:53:18] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Remote host closed the connection)
[21:53:27] <johnjay> i mean. you told him not to listen to geekosaur at all
[21:53:51] <johnjay> i guess he won't get help now!
[21:55:10] *** Joins: econo (uid147250@user/econo)
[21:55:49] <shapr> tomsmeding: maybe they were disappointed?
[21:56:00] <tomsmeding> that the chat was active?
[21:56:05] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[21:56:10] <tomsmeding> I mean, they got replies from two different people within 2 minutes
[21:56:13] <tomsmeding> sounds active
[21:56:24] <tomsmeding> contents of the replies notwithstanding :)
[21:56:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:56:38] <monochrom> I doubt that they were even looking for Haskell chat.
[21:57:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:57:51] *** Quits: ProofTechnique (sid79547@5.254.36.60) (Ping timeout: 245 seconds)
[21:57:51] *** Quits: integral (sid296274@user/integral) (Ping timeout: 245 seconds)
[21:57:51] *** Quits: nrr__ (sid20938@lymington.irccloud.com) (Ping timeout: 245 seconds)
[21:57:51] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[21:57:51] *** Quits: agander_m (sid407952@tinside.irccloud.com) (Ping timeout: 245 seconds)
[21:58:11] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (Read error: Connection reset by peer)
[21:58:12] *** Quits: aria (sid380617@lymington.irccloud.com) (Read error: Connection reset by peer)
[21:58:16] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[21:58:16] *** Quits: gmc_ (sid58314@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[21:58:16] *** Quits: cln (sid336875@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[21:58:24] *** Quits: alinab (sid468903@helmsley.irccloud.com) (Read error: Connection reset by peer)
[21:58:32] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[21:58:40] *** Quits: truckasaurus (sid457088@helmsley.irccloud.com) (Read error: Connection reset by peer)
[21:59:00] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[21:59:07] *** Joins: integral (sid296274@user/integral)
[21:59:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:59:08] *** Joins: gmc_ (sid58314@id-58314.ilkley.irccloud.com)
[21:59:10] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[21:59:12] *** Joins: jonrh (sid5185@id-5185.ilkley.irccloud.com)
[21:59:12] *** Joins: aria (sid380617@id-380617.lymington.irccloud.com)
[21:59:13] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[21:59:13] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[21:59:13] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[21:59:14] *** Joins: alinab (sid468903@id-468903.helmsley.irccloud.com)
[21:59:28] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[21:59:31] *** Joins: nrr__ (sid20938@id-20938.lymington.irccloud.com)
[22:00:04] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[22:00:08] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[22:00:19] *** gmc_ is now known as gmc
[22:01:12] *** Quits: kuribas (~user@ptr-25vy0i9qa16kzbd65yl.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[22:01:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:01:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:01:53] *** Joins: wroathe (~wroathe@user/wroathe)
[22:04:21] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:05:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:05:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:05:55] <dsal> EvanR: list monad is pretty easy
[22:06:10] <EvanR> :thonk:
[22:06:42] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[22:10:22] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:12:56] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[22:13:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:13:32] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[22:16:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:16:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:17:14] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[22:17:50] *** Quits: dmenz (~dmenz@2804:14d:5cd4:5e94::d) (Ping timeout: 252 seconds)
[22:17:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:18:13] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[22:21:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:21:54] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:22:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:22:13] *** Quits: deadmarshal (~deadmarsh@95.38.228.30) (Ping timeout: 240 seconds)
[22:24:08] <glguy> dminuoso: https://hackage.haskell.org/package/config-value-0.8.2/changelog
[22:24:59] <tomsmeding> merijn: day 8 was so easy, part 2 worked on the first compile
[22:25:48] <tomsmeding> takes 80ms though, probably got c_wraith's "dumb" solution
[22:25:57] <tomsmeding> hint: 7! is not that large
[22:26:15] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[22:26:32] <dsal> I'm not entirely sure why mine's so slow.  Guess I should profile.  It's taking me around 4s on the big input.
[22:26:33] <merijn> tomsmeding: Yes, but I took offensive to brute force
[22:26:42] <tomsmeding> :p can relate
[22:26:45] <merijn> tomsmeding: Which was also c_wraith's solution
[22:27:07] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[22:27:11] <merijn> tomsmeding: I've got a working (and mostly) cleaned up version which doesn't result to brute force
[22:27:22] <tomsmeding> cool!
[22:27:49] <merijn> tomsmeding: (spoilers, obviously) https://github.com/merijn/AdventOfCode/blob/master/Day8.hs
[22:28:02] <tomsmeding> merijn: (also spoilers) https://git.tomsmeding.com/AOC/tree/2021/8.hs
[22:28:08] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:28:14] <merijn> tomsmeding: Mostly I wanna still clean up simplifyConstraints which currently will just loop infinitely if there's an input with no solutions
[22:28:14] <jkaye> AoC spoiler question: were there any math-based (or inductive) solutions to today's AoC puzzle? I solved it using a simple rule-based deduction, but I'm thinking there was probably something more elegant
[22:28:15] <tomsmeding> well, less I gues
[22:29:05] <merijn> jkaye: I did constraint solving without any hard coded rules
[22:29:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:29:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:29:27] *** Joins: wroathe (~wroathe@user/wroathe)
[22:29:59] <merijn> I guess I should also remove the hack solution for the 1st part
[22:31:16] <merijn> Since it can trivially be reformulated using my current solution
[22:31:59] <bitmapper> anyone have any ideas of how to do a membership constraint on type level lists? i did this https://gist.github.com/bitmappergit/dccfbce2ff7ca2bc66d51be187f77928
[22:32:35] <jkaye> Interesting
[22:32:37] *** Quits: max22- (~maxime@2a01cb088335980011e17f1477c78e4b.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:32:51] <merijn> jkaye: You can check my link from earlier (spoilers, obviously)
[22:32:57] <dsal> build with --profile doesn't work on my mac, so I guess I'll profile on LInux
[22:32:57] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[22:33:14] <EvanR> bitmapper, yes there's a type class based way to say it, I recall from looking at one of the libs
[22:33:24] <merijn> dsal: Hmm? How/where are you specifying --profile?
[22:33:28] <jkaye> I basically just wrote a bitwise rule for each number, realizing that regardless of order/value, the bitwise relationships between the numbers always hold
[22:33:34] <merijn> dsal: Works fine on my mac
[22:33:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:33:58] <jkaye> I'll stop now so I don't spoil it for anyone
[22:34:00] <jkaye> Thanks for sharing
[22:34:06] <monochrom> There is no single "mac"... >:)
[22:34:20] <EvanR> for day 8 I made it play clue
[22:34:22] <merijn> monochrom: Well, hence the question of "how/where"
[22:34:35] * tomsmeding is too tired/lazy to fully understand merijn's code
[22:34:37] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[22:34:37] <dsal> merijn: `stack build --profile`
[22:34:38] <merijn> Clearly today's puzzle was just to make the prolog programmers happy :p
[22:34:42] <EvanR> ^
[22:34:45] <dsal> I'm not going to look into it just yet.
[22:34:50] <merijn> dsal: Shouldn't that be "--enable-profiling"?
[22:34:55] <tomsmeding> isn't that cabal
[22:35:13] <dsal> merijn: I think it works typically.  It's failing to compile some dependencies.
[22:35:15] <merijn> tomsmeding: Sure, but that flag is interpreted by Cabal, so non-zero chance of the same in stack :p
[22:35:24] <tomsmeding> ah
[22:35:25] <merijn> dsal: could be, I don't use stack :p
[22:35:31] <dsal> colour               >     Could not find module â€˜Preludeâ€™
[22:35:31] <dsal> colour               >     Perhaps you haven't installed the profiling libraries for package â€˜base-4.14.3.0â€™?
[22:35:34] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:35:37] <dsal> No idea what led to that thing.
[22:35:37] <tomsmeding> '--profile' has worked for me before
[22:35:44] <tomsmeding> dsal: how have you installed haskell, system package manager?
[22:35:46] <merijn> dsal: oh, you have  broken GHC install without profiling libs
[22:35:46] <tomsmeding> use ghcup instead
[22:35:49] <monochrom> I have long learned to stop guessing how to use stack.
[22:35:52] <dsal> tomsmeding: Everything insane.  :)
[22:35:58] <bitmapper> merijn: hahaha i was considering pulling out curry!
[22:36:00] <dsal> The only stuff that works for me right now is nix + stack, and just barely.
[22:36:14] <tomsmeding> oh wait this is stack of course
[22:36:20] * tomsmeding flees from nix
[22:36:48] <tomsmeding> but yeah your ghc installation is broken and misses profiling libs
[22:36:52] <merijn> dsal: If base has no profiling libs, then your GHC install is one without profiling libs, which means either stack or Nix installed a GHC without profiling libs and screwed you
[22:37:00] <tomsmeding> ^
[22:37:03] <dsal> ah, that makes sense.
[22:37:17] <dsal> I used to have this working, and then nothing worked at all, and then it started working some.  So maybe it's not done yet.
[22:37:55] <monochrom> Is your mac an arm mac, not an intel mac?
[22:37:59] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:38:12] <dsal> Yes, it's the fanciest ARM
[22:38:36] <dsal>   Chip:	Apple M1 Max  Total Number of Cores:	10 (8 performance and 2 efficiency)
[22:38:55] <merijn> I'm glad I'm not you :D
[22:38:57] <dsal> When I got it, I was having to run all the intel builds.
[22:39:13] <dsal> My linux machine is pretty plain and boring.  It's building all the things right now.
[22:39:34] <merijn> tbh, it's great that Apple is forcing large parts of tech to support something other than Intel
[22:39:47] <merijn> But I'm happy I'm not trying to be on that cutting edge xD
[22:39:51] <dsal> I really like almost everything, but transitions are rough.
[22:40:06] <dsal> I can run Ableton Live built natively as long as I don't want most of my plugins to work.
[22:40:21] <janus> amazon is offering gravitron (or whatever its called) too
[22:40:28] <janus> risc-v is picking up steam
[22:40:34] <dsal> Oh neat.
[22:40:46] * janus refuses to accept that apple is improving anything :P
[22:41:05] <dsal> I used to run all my stuff at home on weird ARM-based Linux machines that had almost no support for anything and could build stuff.  I'd do GHC builds under QEMU just to get a program I could run on the things.
[22:43:18] <joeyh> did ghc 9.0.1 change something about forall embedded inside a type, eg type Foo = forall a. (Bar -> a) -> a
[22:43:35] <DigitalKiwi> hey joeyh!
[22:43:39] <joeyh> I had to expand such a Foo to make it accept it in a type signature, where it was accepted before
[22:43:41] <joeyh> hello
[22:43:48] <tomsmeding> yes, keyword is "simplified subsumption"
[22:44:06] <tomsmeding> or, hm, you're talking about types
[22:44:15] <DigitalKiwi> joeyh: how's your arduino project?
[22:44:29] <tomsmeding> yuo mean expanding the type signature, or having to eta-expand terms of that type?
[22:44:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Remote host closed the connection)
[22:45:08] *** Joins: deadmarshal (~deadmarsh@95.38.228.30)
[22:45:19] <monochrom> Still, take a look at "simplified subsumption".
[22:45:26] <joeyh> tomsmeding: I mean I expanded foo :: X -> Foo to foo :: forall a. X -> (Bar -> a) -> a
[22:45:55] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:46:13] <monochrom> "Did it change something about forall in type aliases?" may be barking up the wrong tree because the other tree is the use site of your type alias.
[22:46:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:46:59] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 252 seconds)
[22:47:03] <joeyh> DigitalKiwi: it works. I've been thinking about expanding the idea to https://zephyrproject.org/ to support a lot more boards
[22:47:08] <tomsmeding> joeyh: if I write 'data Bar' ; 'type Foo = forall a. (Bar -> a) -> a' ; 'foo :: Int -> Foo; foo = undefined' then ghci-9.0 shouts at me. If I instead write 'foo _ = undefined' then all is fine
[22:47:17] <monochrom> One of the things simplified subsumption explicitly talks about is that "X -> forall a. Y" is no longer indistinguishable from "forall a. X -> Y"
[22:47:28] <DigitalKiwi> joeyh: i haven't played with it in a while i should again
[22:47:53] <joeyh> tomsmeding: sounds like what I sa
[22:48:05] <tomsmeding> so the point is not the type, but having to eta-expand foo
[22:48:08] <monochrom> which is going to affect type aliases because if you say "type T = forall a. Y" then it means "X -> T" is distinguishable from "forall a. X -> Y"
[22:48:19] <tomsmeding> so this actually is the effect of simplified subsumption
[22:48:33] <tomsmeding> oh, what monochrom says
[22:48:54] <joeyh> ok, seems intentional breakage then
[22:48:59] <tomsmeding> yes
[22:49:11] <tomsmeding> but (almost) always fixable using eta expansion
[22:49:12] <monochrom> But it is not like, technically strictly speaking, changing the semantics and legality of "type T = forall a. Y". No change there.
[22:50:23] <DigitalKiwi> https://hackage.haskell.org/package/arduino-copilot for observers wondering what joeyh and i are talking about
[22:50:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:51:06] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 265 seconds)
[22:51:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:51:36] <joeyh> DigitalKiwi: I think that copilot is supposed to be getting some better support for typing in the DSL eventually, eg phantom types or something like that. The main thing I feel it needs to be more useful
[22:52:46] <DigitalKiwi> https://www.dropbox.com/s/2czxqdv8yddll0e/2020-02-27%2011.57.04.mp4?dl=0 this arduino was programmed with haskell
[22:53:54] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:55:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:56:49] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 268 seconds)
[22:57:23] <joeyh> in arduino-copilot? code would be: main = arduino $ do { b <- input pin12; led := b; pin13 := b }
[22:58:11] *** Joins: nfd (~nfd@user/nfd)
[22:59:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[23:00:56] <dsal> I'm really surprised parMap isn't using a lot more cores.
[23:01:25] <dsal> Do I need to do something to make it parMap harder?
[23:03:43] *** Joins: rusty (~rustyboy@2a02:2f0e:5610:ab00:b16b:f583:26df:4061)
[23:04:07] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-3090-ba98-2dba-9449.fixed6.kpn.net) (Quit: Leaving)
[23:05:01] <dsal> It speeds stuff up in the small case, but not the large case.  Really weird.
[23:10:00] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:12:29] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:15:48] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:16:02] <oats> folds are fun, but sometimes you just wanna `go`
[23:17:09] <monochrom> haha
[23:17:32] *** Joins: gaff (~gaff@49.207.205.24)
[23:17:40] *** Quits: gaff (~gaff@49.207.205.24) (Client Quit)
[23:18:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:19:02] *** Quits: k60`` (~user@94.25.169.9) (Ping timeout: 256 seconds)
[23:20:06] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:22:50] <dminuoso> tomsmeding: https://gist.github.com/dminuoso/ea39c159219afcb4ba56fef01307da12
[23:22:53] <dminuoso> This is a small reproducer
[23:24:39] <tomsmeding> dsal: using sufficiently high +RTS -N? Are your threads allocating once in a while?
[23:25:45] *** Joins: k60`` (~user@static.100.218.46.78.clients.your-server.de)
[23:27:52] <tomsmeding> dminuoso: you need some -XDataKinds :p
[23:28:06] <dminuoso> tomsmeding: Uh, my copy paste skills elude me.
[23:28:18] <dminuoso> Guess I wasnt entirely scrolled up in my editor there
[23:31:19] *** Joins: jonas39 (~jonas@pool-108-49-252-36.bstnma.fios.verizon.net)
[23:31:50] <jonas39> Is it accurate to say that monads are an abstraction on function composition?
[23:32:00] <tomsmeding> dminuoso: and what's your question about this? why this error or how to fix it nicely?
[23:32:28] <c_wraith> jonas39: it's more accurate to say that monads are a generalization of function composition
[23:32:47] <c_wraith> jonas39: or rather that Kleisli categories are, but those are the same thing as monads
[23:32:57] <dminuoso> tomsmeding: So its funny, as I was staring at it, I begin to realize why I had so much confusion at the end.
[23:33:14] <dminuoso> There was a spurious AllowAmbiguousTypes, which made me scratch my head so much..
[23:33:30] <tomsmeding> which allows the definition but postpones the trouble to call time :p
[23:34:17] <jonas39> c_wraith: I realized this after learning about kleisli arrows. It is becoming more clear now thanks.
[23:34:29] <dminuoso> tomsmeding: Right! So roughly what I had was another function `f :: Sel Char -> String; f sel = doc sel`, and GHC kept giving me ambiguitiy errors on `doc sel`
[23:34:49] <dminuoso> And it seemed to make absolutely no sense, because my `Sel` was already monomorphizeable
[23:35:15] <dminuoso> Hold on..
[23:35:17] <dminuoso> No this works.
[23:35:20] <dminuoso> Okay Im baffled now.
[23:35:28] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:13] <tomsmeding> doesn't seem to typecheck for me
[23:36:16] <tomsmeding> even with AAT
[23:36:31] <dminuoso> Hold on
[23:36:48] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:49] <dminuoso> Try this https://gist.github.com/dminuoso/6b9181446eaffac9ceb0771a0e013d3b
[23:37:00] *** Joins: mrckndt8 (~mrckndt@user/mrckndt)
[23:37:00] <dminuoso> I mean it seems obvious that this should even type check
[23:37:14] *** Quits: jonas39 (~jonas@pool-108-49-252-36.bstnma.fios.verizon.net) (Quit: Client closed)
[23:37:40] *** Joins: tired- (~tired@user/tired)
[23:37:44] *** Joins: exarkun_ (~exarkun@user/exarkun)
[23:38:04] *** Joins: acro_ (~acro@user/acro)
[23:38:23] <tomsmeding> dminuoso: that also typechecks without AAT for me
[23:39:41] <tomsmeding> dminuoso: added some Proxy to your previous paste https://paste.tomsmeding.com/75qOA3xD
[23:39:49] <tomsmeding> oh crap wrong code
[23:39:54] *** Joins: tristanC_ (~tristanC@163.172.94.116)
[23:40:10] <tomsmeding> dminuoso: this one https://paste.tomsmeding.com/gPdxCvQ6
[23:40:24] *** Joins: df_ (~ben@justworks.xyz)
[23:40:35] *** Joins: platz_ (~platz@40.122.118.113)
[23:40:42] *** Joins: Ankhers_ (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com)
[23:41:23] <dminuoso> tomsmeding: The reproducer was bad.
[23:41:26] <dminuoso> Let me try and recreate it again
[23:42:51] *** Quits: simendsjo (~user@84.211.91.241) (Remote host closed the connection)
[23:43:30] *** Joins: relrod_ (~relrod@redhat/ansible.staff.relrod)
[23:44:30] *** Quits: mrckndt (~mrckndt@user/mrckndt) (Quit: Ping timeout (120 seconds))
[23:44:30] *** Quits: tired (~tired@user/tired) (Quit: /)
[23:44:30] *** Quits: acro (~acro@user/acro) (Quit: Bye.)
[23:44:30] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:44:31] *** Quits: w1gz (~do@159.89.11.133) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: exarkun (~exarkun@user/exarkun) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: tristanC (~tristanC@user/tristanc) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: platz (~platz@user/platz) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: df (~ben@justworks.xyz) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (Ping timeout: 260 seconds)
[23:44:31] *** mrckndt8 is now known as mrckndt
[23:44:31] *** acro_ is now known as acro
[23:44:31] *** Ankhers_ is now known as Ankhers
[23:45:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc)
[23:45:27] *** Joins: Akiva (~Akiva@user/Akiva)
[23:47:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:48:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:49:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:49:38] *** Quits: zhakupov (~zhakupov@static.90.189.158.74.sinor.ru) (Ping timeout: 256 seconds)
[23:49:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5e5:6571:976d:7afc) (Ping timeout: 252 seconds)
[23:51:41] <dminuoso> tomsmeding: https://gist.github.com/dminuoso/9144f5a72f645896a8a9f7c3d90eb423
[23:52:08] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:53:03] <tomsmeding> I was going b.hs, c.hs locally, now you jump all the way ahead to f, we can't have that
[23:53:29] <dminuoso> Haha
[23:53:40] <dminuoso> f.hs is such muscle memory for gist
[23:53:57] <dminuoso> Let me try and reduce it a bit further
[23:55:26] <dminuoso> Updated.
[23:55:32] <dminuoso> yeah, this captures the issue I had very well
[23:56:41] <tomsmeding> yeah this can be fixed with a proxy
[23:56:53] <tomsmeding> but indeed ghc can't infer which proxy you mean
[23:57:26] <dminuoso> I guess by proxy you mean specifying `f (Proxy @Field) sel` right?
[23:57:32] <dminuoso> It seems the problem is that you end up with:
[23:57:38] <dminuoso> `Sel () ~ forall. mode. ArgF mode -> Inner mode ()`
[23:57:41] <tomsmeding> https://paste.tomsmeding.com/KaBp8hul
[23:58:04] <tomsmeding> oh the ScopedTypeVariables is not needed of course
[23:58:13] <tomsmeding> was for your earlier, non-reduced example
[23:58:24] <dminuoso> Or this right
[23:58:52] <dminuoso> Maybe Im just thrown off by the error message 
[23:59:05] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[23:59:29] <tomsmeding> the issue is that you have a 'sel :: forall mode. ArgF mode -> Inner mode pat', and you're passing it to an argument which has type "forall mode'. ArgF mode' -> Inner mode' pat'" for some pat'
