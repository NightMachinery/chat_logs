[00:00:13] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Ping timeout: 252 seconds)
[00:00:13] *** Flonk7 is now known as Flonk
[00:00:20] <aplainzetakind> It's not strictly necessary, just makes things cleaner and more structured. It's better practice to write many small and easily readible things then combine them in again small and easily readible things, as opposed to writing a huge expression.
[00:01:07] <WilliamJ> ok so, for indentSeq, we should have it as 0 then after each rectangle, we add the value of w to it
[00:01:29] <aplainzetakind> You can write addOneToDouble = 2 * x + 1, and in that toy example of course there's no gain in readibility in using where.
[00:01:31] <aplainzetakind> Yes.
[00:02:15] <WilliamJ> Ok so, I'm going to pastebin to show you what I currently have if that is ok
[00:02:20] <aplainzetakind> Sure.
[00:02:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[00:02:42] *** Joins: deadmarshal (~deadmarsh@95.38.230.89)
[00:02:49] <WilliamJ> https://paste.tomsmeding.com/V9aT8LHO
[00:03:24] <WilliamJ> so for Indentseq, I should do indentseq = 0 + w correct? Or have I missed something?
[00:03:51] <aplainzetakind> That would give you a single number. You want a List.
[00:04:15] <aplainzetakind> > [1..10]
[00:04:17] <lambdabot>  [1,2,3,4,5,6,7,8,9,10]
[00:04:25] <aplainzetakind> ^ You are familiar with this notation?
[00:04:37] <WilliamJ> Yes, I have used that a few times when we practiced list comprehensions
[00:04:52] <aplainzetakind> > [1,7..100]
[00:04:53] <lambdabot>  [1,7,13,19,25,31,37,43,49,55,61,67,73,79,85,91,97]
[00:04:57] <aplainzetakind> ^ This too?
[00:05:12] <WilliamJ> mhm, not that one
[00:05:23] <aplainzetakind> Well, no you know.
[00:05:29] <aplainzetakind> now you know*
[00:05:37] <WilliamJ> so does it take the difference of the first 2 numbers and add it to every number afterwards
[00:05:56] <aplainzetakind> Yes.
[00:05:57] <geekosaur> yes
[00:05:58] *** Quits: Kevin578 (~Kevin578@pool-96-237-112-198.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[00:06:05] <geekosaur> it's also called enumFromThenTo
[00:06:28] <WilliamJ> so for indentseq, would we do something online the lines of [0..w+w]?
[00:06:37] <WilliamJ> along*
[00:06:52] *** Joins: Kevin578 (~Kevin578@pool-96-237-112-198.bstnma.fios.verizon.net)
[00:07:06] *** Quits: deadmarshal (~deadmarsh@95.38.230.89) (Ping timeout: 256 seconds)
[00:07:06] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[00:07:15] <aplainzetakind> Try it in the repl with concrete numbers to see what gives you what you want.
[00:07:30] <monochrom> You can try [0 .. 4+4] and see what you get.
[00:07:50] <WilliamJ> ok, that is not what i want that gives me numbers up 8
[00:07:57] <WilliamJ> I see why it is doing it
[00:07:59] *** Joins: k60`` (~user@static.100.218.46.78.clients.your-server.de)
[00:08:44] <aplainzetakind> Does the indentation increase by the width or the step parameter?
[00:09:37] <WilliamJ> width, so for example if we had rectangles 3 2 3, the indentation would be 0,3,6
[00:09:53] <WilliamJ> due to that being the width of the last rectangle
[00:10:19] <aplainzetakind> By the way, you don't need to specify an end. For example [0,2..] is the infinite list of all even positive integers.
[00:10:41] <WilliamJ> sounds good
[00:10:54] <aplainzetakind> I thought we said both the width and the indentation increase by the step parameter.
[00:11:23] <monochrom> The step parameter is how many rectangles to make.
[00:11:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:11:31] <WilliamJ> step parameter is how many rectangles there is, did I not say before? Sorry if I didnt
[00:12:57] <monochrom> I am surprised the teacher didn't word it as "count" or "numRects" or "n".
[00:13:05] <aplainzetakind> so for `rectangles 2 5 7`, there are 7 rectangles, each of height 2, with widths 5,10,15, ... and indented such that they touch at the corners?
[00:13:24] <WilliamJ> yeah that is correct
[00:13:33] <WilliamJ> monochrom i'll admit, it did confuse me at the start too
[00:13:38] *** Quits: stevenxl (~stevenxl@174.128.182.199) (Quit: leaving)
[00:14:07] <aplainzetakind> So indentation depends on width. First write widthseq then.
[00:14:28] <int-e> :t scanl
[00:14:29] <lambdabot> (b -> a -> b) -> b -> [a] -> [b]
[00:14:32] <WilliamJ> so for width, we will start with w
[00:14:32] <monochrom> If you look at BASIC or FORTRAN "for i = 1 to 100 step 3" no one would ever guess "it means 3 iterations".
[00:15:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[00:15:06] <int-e> monochrom: hmm, why not though
[00:15:07] <aplainzetakind> WilliamJ: And the next one in line is?
[00:15:21] <WilliamJ> w+w
[00:15:32] <aplainzetakind> Yes.
[00:15:45] <aplainzetakind> Are you familiar with take?
[00:15:46] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Ping timeout: 245 seconds)
[00:15:48] <aplainzetakind> :t take
[00:15:49] <lambdabot> Int -> [a] -> [a]
[00:15:50] <WilliamJ> but as I saw before, w+w inside the list doesnt add it
[00:15:56] <WilliamJ> Yes, we have used it
[00:16:03] <aplainzetakind> You put it in the wrong spot.
[00:16:05] *** Quits: Benzi-Junior (~BenziJuni@88-149-66-61.du.xdsl.is) (Remote host closed the connection)
[00:16:08] <WilliamJ> oh
[00:16:13] <aplainzetakind> > [1..7]
[00:16:14] <lambdabot>  [1,2,3,4,5,6,7]
[00:16:21] *** Joins: Benzi-Junior (~BenziJuni@88-149-66-61.du.xdsl.is)
[00:16:21] <aplainzetakind> > [1,7..]
[00:16:22] <lambdabot>  [1,7,13,19,25,31,37,43,49,55,61,67,73,79,85,91,97,103,109,115,121,127,133,13...
[00:16:26] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[00:16:30] <aplainzetakind> (infinite list)
[00:16:36] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (Read error: Connection reset by peer)
[00:16:39] <WilliamJ> so for take, would take the last index and add w
[00:16:55] <aplainzetakind> Don't jump to take for now.
[00:16:55] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Ping timeout: 268 seconds)
[00:16:55] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (Ping timeout: 268 seconds)
[00:16:55] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Ping timeout: 268 seconds)
[00:16:55] *** Quits: Deide (~deide@user/deide) (Ping timeout: 268 seconds)
[00:16:59] <WilliamJ> ok
[00:17:25] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Ping timeout: 240 seconds)
[00:17:26] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Ping timeout: 245 seconds)
[00:17:26] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Ping timeout: 245 seconds)
[00:17:26] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Ping timeout: 245 seconds)
[00:17:32] *** Quits: acco[m] (~accotedom@2001:470:69fc:105::1:3236) (Ping timeout: 240 seconds)
[00:17:32] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Ping timeout: 240 seconds)
[00:17:35] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Ping timeout: 250 seconds)
[00:17:35] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Ping timeout: 250 seconds)
[00:17:36] <aplainzetakind> subtask: create an infinite list of multiples of w: [w, 2*w, 3*w, etc.]
[00:17:38] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 252 seconds)
[00:17:45] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[00:17:46] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (Ping timeout: 260 seconds)
[00:17:46] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Ping timeout: 260 seconds)
[00:17:46] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Ping timeout: 260 seconds)
[00:17:47] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Ping timeout: 260 seconds)
[00:17:47] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Ping timeout: 260 seconds)
[00:17:48] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (Ping timeout: 250 seconds)
[00:17:54] <raehik> Every time I generate Hackage docs to upload, it ends up not linking types like Functor, Eq correctly to their definitions. I'm invoking the v2 cabal command Hackage tells me to. Any potential pointers?
[00:18:02] *** Quits: siraben (~siraben@user/siraben) (Ping timeout: 240 seconds)
[00:18:02] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (Ping timeout: 240 seconds)
[00:18:02] *** Quits: benjamin[m]12 (~benjaminm@2001:470:69fc:105::1:3f2f) (Ping timeout: 240 seconds)
[00:18:02] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Ping timeout: 240 seconds)
[00:18:02] <raehik> example https://hackage.haskell.org/package/fortran-src-0.7.0/docs/Language-Fortran-AST.html
[00:18:02] *** Quits: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405) (Ping timeout: 240 seconds)
[00:18:13] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Ping timeout: 240 seconds)
[00:18:14] *** Quits: thedward[m] (~thedwardm@2001:470:69fc:105::f79) (Ping timeout: 250 seconds)
[00:18:14] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Ping timeout: 250 seconds)
[00:18:14] *** Quits: boxscape (~boxscape@user/boxscape) (Ping timeout: 260 seconds)
[00:18:16] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (Ping timeout: 245 seconds)
[00:18:27] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Ping timeout: 250 seconds)
[00:18:27] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Ping timeout: 250 seconds)
[00:18:27] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (Ping timeout: 250 seconds)
[00:18:27] *** Quits: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2) (Ping timeout: 250 seconds)
[00:18:34] <WilliamJ> ok i'll give that a go now and report back in a minute or 2 if i figure out how to get it to work
[00:18:42] *** Quits: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) (Ping timeout: 260 seconds)
[00:18:42] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (Ping timeout: 260 seconds)
[00:18:42] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (Ping timeout: 260 seconds)
[00:18:44] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Ping timeout: 252 seconds)
[00:19:05] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (Ping timeout: 250 seconds)
[00:19:06] *** Quits: shiraeeshi[m] (~shiraeesh@2001:470:69fc:105::1:77) (Ping timeout: 245 seconds)
[00:19:06] *** Quits: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203) (Ping timeout: 245 seconds)
[00:19:06] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Ping timeout: 245 seconds)
[00:19:06] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Ping timeout: 245 seconds)
[00:19:17] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Ping timeout: 252 seconds)
[00:19:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Ping timeout: 252 seconds)
[00:19:19] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Ping timeout: 250 seconds)
[00:19:19] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Ping timeout: 250 seconds)
[00:19:31] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Ping timeout: 245 seconds)
[00:19:31] *** Quits: asdofindia-m (~akshaymat@2001:470:69fc:105::831) (Ping timeout: 245 seconds)
[00:19:31] *** Quits: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (Ping timeout: 240 seconds)
[00:19:32] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Ping timeout: 240 seconds)
[00:19:32] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Ping timeout: 240 seconds)
[00:19:32] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Ping timeout: 240 seconds)
[00:19:32] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Ping timeout: 240 seconds)
[00:19:38] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (Ping timeout: 260 seconds)
[00:19:38] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Ping timeout: 260 seconds)
[00:19:39] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (Ping timeout: 260 seconds)
[00:19:45] *** Quits: alex[m]121 (~alexchete@2001:470:69fc:105::1:1001) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 250 seconds)
[00:19:45] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Ping timeout: 250 seconds)
[00:19:50] <WilliamJ> Ok, it isnt with w's, but I found a way to multiply each index by 2 but not going up in 1
[00:19:50] *** Quits: moats (~oats@user/oats) (Ping timeout: 252 seconds)
[00:19:50] <aplainzetakind> WilliamJ: If you write something like [1..] in the repl it will flood with infinite numbers, so do things like `take 20 [1..]` so that you can see what's going on.
[00:19:53] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Ping timeout: 265 seconds)
[00:19:57] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (Ping timeout: 250 seconds)
[00:20:02] *** Quits: sm (~sm@plaintextaccounting/sm) (Ping timeout: 240 seconds)
[00:20:02] *** Quits: Tisoxin (~ikosit@user/ikosit) (Ping timeout: 240 seconds)
[00:20:02] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 240 seconds)
[00:20:06] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Ping timeout: 260 seconds)
[00:20:06] *** Quits: kadoban (~kadoban@user/kadoban) (Ping timeout: 260 seconds)
[00:20:07] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Ping timeout: 260 seconds)
[00:20:07] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Ping timeout: 260 seconds)
[00:20:17] <aplainzetakind> WilliamJ: What do you mean? Can you paste the expression here?
[00:20:22] *** Quits: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9) (Ping timeout: 265 seconds)
[00:20:27] <WilliamJ> map (*2) [1..5]
[00:20:34] <WilliamJ> gives me [2,4,6,8,10]
[00:20:37] *** Quits: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248) (Ping timeout: 268 seconds)
[00:20:37] *** Quits: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534) (Ping timeout: 268 seconds)
[00:20:37] *** Quits: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71) (Ping timeout: 250 seconds)
[00:20:38] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Ping timeout: 268 seconds)
[00:20:40] <aplainzetakind> That's also good.
[00:20:50] <aplainzetakind> So you can replace 2 by ...
[00:21:03] <WilliamJ> but like you said, w: [w, 2*w, 3*w, etc.] I am not sure how to make it go up each time
[00:21:20] <aplainzetakind> What you did does go up each time, just by 2 and not w.
[00:21:31] <WilliamJ> wait, i sde
[00:21:32] <WilliamJ> see
[00:21:38] <WilliamJ> so if i replace 2 with w
[00:21:51] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (Ping timeout: 268 seconds)
[00:21:51] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Ping timeout: 268 seconds)
[00:21:51] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Ping timeout: 268 seconds)
[00:21:51] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Ping timeout: 268 seconds)
[00:21:51] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Ping timeout: 268 seconds)
[00:22:15] *** Joins: WilliamJ17 (~WilliamJ@wireless-student-pt10-182-232.lut.ac.uk)
[00:22:20] *** Joins: acidjnk_new (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de)
[00:22:22] <WilliamJ17> I got disconnected sorry
[00:22:23] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:25b5:2708:65a9:4e7d)
[00:22:24] <aplainzetakind> Also you want s numbers and not 5.
[00:22:27] <WilliamJ17> yes
[00:22:28] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Ping timeout: 268 seconds)
[00:22:44] <WilliamJ17> I was thinking map (*w) [1..s]
[00:22:52] *** Joins: pavonia (~user@user/siracusa)
[00:22:58] <aplainzetakind> That is correct.
[00:23:20] <WilliamJ17> widthseq = map (*w) [1..s] is what I have then
[00:23:33] <aplainzetakind> Now write out the first few terms of indentseq
[00:23:43] <aplainzetakind> Yes that's good.
[00:23:55] <WilliamJ17> so is it the same, but starts at 0 and is s-1?
[00:24:02] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[00:24:03] <aplainzetakind> Yes.
[00:24:43] <WilliamJ17> indentseq :: [Int]
[00:24:43] <WilliamJ17>  indentseq = map (*w) [1..s-1]
[00:24:44] <WilliamJ17>  widthseq :: [Int]
[00:24:44] <WilliamJ17>  widthseq = map (*w) [1..s]
[00:24:45] <WilliamJ17> is what I have
[00:24:56] <WilliamJ17> should be 0 not 1 in indentseq
[00:25:23] <aplainzetakind> Now you need a way to call your other rectangle function on these somehow.
[00:25:29] <aplainzetakind> :t zipWith
[00:25:30] <lambdabot> (a -> b -> c) -> [a] -> [b] -> [c]
[00:25:43] *** Joins: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534)
[00:25:44] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[00:25:46] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[00:25:47] <aplainzetakind> Study this type signature and figure out how to make use of this function.
[00:25:51] <WilliamJ17> I have seen zip before, but not zipwith
[00:26:02] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[00:26:18] *** Quits: WilliamJ (~WilliamJ@wireless-student-pt10-182-232.lut.ac.uk) (Ping timeout: 256 seconds)
[00:26:28] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[00:26:46] <WilliamJ17> so it takes 3 parameters and puts them into lists?
[00:27:09] <WilliamJ17> wait bo
[00:27:11] <WilliamJ17> no
[00:27:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:27:25] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[00:27:36] <aplainzetakind> No, (a -> b -> c) is a function type.
[00:27:46] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[00:28:00] <aplainzetakind> It is a function which takes an a and a b and gives you a c.
[00:28:07] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[00:28:07] <WilliamJ17> Ok
[00:28:17] <WilliamJ17> So the c would be a list
[00:28:21] <aplainzetakind> No.
[00:28:26] <WilliamJ17> why not?
[00:28:31] <aplainzetakind> c can be anything.
[00:28:35] <WilliamJ17> ok
[00:28:53] <WilliamJ17> so
[00:28:57] <aplainzetakind> An example to inspect:
[00:29:02] <WilliamJ17> ok
[00:29:25] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[00:29:48] <aplainzetakind> > zipWith take [1,3,5] ["sdofijoi", "wqwqwqwq", "qwertyuio"]
[00:29:49] <lambdabot>  ["s","wqw","qwert"]
[00:30:01] <aplainzetakind> :t take
[00:30:04] <lambdabot> Int -> [a] -> [a]
[00:30:06] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[00:30:18] <WilliamJ17> so its taking the first, first 3 and first 5 elements of each index
[00:30:39] <aplainzetakind> Yes.
[00:31:14] <WilliamJ17> so for us, would we be using it to get each length, width and indentation for each rectangle?
[00:31:45] <aplainzetakind> ...of the string at the corresponding index would be a more precise way to put it.
[00:31:48] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[00:32:00] <WilliamJ17> Ok
[00:32:06] <aplainzetakind> You mean height, width and indentation?
[00:32:12] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[00:32:21] <WilliamJ17> Yes, sorry for saying length keep saying it since that is what I wrote in the first place
[00:32:41] <aplainzetakind> We always have the same height, so that's fixed. we have created our lists of the indentations and widths.
[00:33:18] <aplainzetakind> Now we want a function of two parameters, width and indentation, but the function you already wrote takes three.
[00:33:30] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[00:33:38] <WilliamJ17> yes, this one
[00:33:38] *** Joins: kadoban (~kadoban@user/kadoban)
[00:33:38] <WilliamJ17> rectangle :: Int -> Int -> Int -> String
[00:33:39] <WilliamJ17> rectangle i m n  = unlines replicate m (replicate i ' ' ++ (replicate n '*'))
[00:33:46] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[00:34:29] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:34:31] *** Joins: moats (~oats@user/oats)
[00:35:02] <WilliamJ17> so can we just get rid of m?
[00:35:03] <aplainzetakind> If you change `rectangle i m n` to `rectangle m i n` on the left hand side of the definition to change the order of the argument, the first parameter becomes the height right?
[00:35:11] <WilliamJ17> i shall give it a go
[00:35:33] <aplainzetakind> No you can't get rid of it, you will pass h to it in the other function.
[00:35:45] <WilliamJ17> ok
[00:36:01] *** Joins: psydroid (~psydroid@user/psydroid)
[00:36:11] <WilliamJ17> ok slight problem, when I am trying to run I am getting a parse error due to where. I can comment this out for the time being right?
[00:36:24] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[00:36:27] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[00:36:47] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[00:36:54] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[00:36:59] <WilliamJ17> and Yes it will become the height
[00:37:00] <aplainzetakind> When you rearrange the parameter in the way I said, `rectangle 5`, for instance, becomes a function of two parameters, indentation and width, fit to be used in zipWith.
[00:37:27] <aplainzetakind> Just indent the lines following where more than where itself.
[00:37:28] <WilliamJ17> ok, I get you
[00:37:41] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[00:38:20] <WilliamJ17> https://paste.tomsmeding.com/pvtHk3yv what I currently have
[00:39:17] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[00:39:22] <aplainzetakind> Now assemble all those things we mentioned in an expression to replace that `undefined` to produce a list of results of appropriate calls to `rectangle`..
[00:39:30] <WilliamJ17> ok
[00:39:47] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[00:39:47] <WilliamJ17> so, we need a zipWith function
[00:40:19] <aplainzetakind> You already have it.
[00:40:32] <aplainzetakind> Yo give appropriate parameters to it.
[00:40:42] *** Joins: Deide (~deide@user/deide)
[00:40:46] <aplainzetakind> First is a function, then two lists.
[00:40:50] <WilliamJ17> Ok
[00:40:53] <WilliamJ17> I understand now
[00:40:54] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[00:41:05] <WilliamJ17> So
[00:41:11] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[00:41:58] <aplainzetakind> You will get a type error because we are not done yet. Temporarily comment out the type signature of rectangles to avoid the complaints.
[00:42:18] <WilliamJ17> I am slightly confused, might seem like a rookie error. We need to do zip each corresponding index in widthseq and indentseq correct?
[00:42:25] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[00:42:45] <aplainzetakind> Yes.
[00:42:57] <aplainzetakind> zipWith rather.
[00:43:07] *** Joins: acco[m] (~accotedom@2001:470:69fc:105::1:3236)
[00:43:38] *** Joins: deadmarshal (~deadmarsh@95.38.230.89)
[00:43:50] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[00:43:58] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[00:43:59] <WilliamJ17> Since I'm used to imperative languages, I keep thinkign I can just write i for each index, but in haskell that is not the case
[00:44:54] <EvanR> haskell is not opinionated on how you label your items hehe
[00:45:14] <aplainzetakind> You don't need to introduce any new names. You have all the building blocks now.
[00:45:22] <WilliamJ17> yeah lol im just trying to think what to put to make it so each index is zipped with one another
[00:45:42] <aplainzetakind> That's what zipWith does. You don't need to do anything.
[00:45:53] <EvanR> > zip [0..] "supercalifragilistic"
[00:45:54] <lambdabot>  [(0,'s'),(1,'u'),(2,'p'),(3,'e'),(4,'r'),(5,'c'),(6,'a'),(7,'l'),(8,'i'),(9,...
[00:45:55] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[00:46:04] <WilliamJ17> yeah like that
[00:46:25] <WilliamJ17> but with zipWith, you need a function first correct?
[00:46:29] <WilliamJ17> before the 2 lists
[00:46:31] <aplainzetakind> Yes.
[00:46:58] <WilliamJ17> I'm just confused what to put there, as I just saw with zip it has done it
[00:47:02] <EvanR> yeah then you avoid a tuple if you don't want one
[00:47:28] <aplainzetakind> The elements of the first list are used as the first parameter to the function, those of second for the second parameter of the function, and the resulting list is the list of the results of the function.
[00:48:22] <WilliamJ17> so is it just as simple as zipWith indentseq widthseq?
[00:48:31] <WilliamJ17> I dont think it is
[00:48:32] <aplainzetakind> zipWith f [x1, x2, x3] [y1, y2, y3] gives you [f x1 y1, f x2 y2, f x3 y3]
[00:48:41] <WilliamJ17> Yeah
[00:48:46] <aplainzetakind> zipWith needs a function to zip "With".
[00:49:01] <WilliamJ17> Yeah, thats what I'm stumped on since Im not sure what it is
[00:49:08] <WilliamJ17> is it just rectangle?
[00:49:10] <aplainzetakind> What function do you want to feed your widths and indentations into?
[00:49:27] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[00:49:37] <WilliamJ17> zipWith rectangle widthseq indentseq?
[00:49:41] <aplainzetakind> Almost, why did we reorder the parameters of `rectangle`?
[00:49:55] <WilliamJ17> so we got m first which was the height
[00:49:59] <aplainzetakind> How many parameters does rectangle take? How many are appropriate for zipWith?
[00:50:02] <WilliamJ17> so its m?
[00:50:20] <WilliamJ17> zipWith m widthseq indentseq?
[00:50:36] <aplainzetakind> m is not a function. (rectangle an_integer) however, is.
[00:50:59] <aplainzetakind> Do you have a good understanding of currying?
[00:51:02] <WilliamJ17> zipWith (rectangle m) widthseq indentseq
[00:51:14] <WilliamJ17> We have looked at it
[00:51:26] <aplainzetakind> Almost, except m is out of scope in where you want to put this. What do you need m to be?
[00:51:34] *** Joins: river (~My_user_n@tilde.team/user/river)
[00:51:36] <river> hiy
[00:51:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 265 seconds)
[00:52:01] <WilliamJ17> wait
[00:52:25] <WilliamJ17> we made m as h here
[00:52:30] <aplainzetakind> Yes.
[00:52:42] <WilliamJ17> so is it just zipWith (rectangles h) widthseq indentseq?
[00:52:51] <aplainzetakind> rectangle h, not rectangles.
[00:52:54] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[00:53:13] <WilliamJ17> ok, but why does that work if we havent input h in the rectangle function
[00:53:22] <aplainzetakind> Make sure the type signature is commented out.
[00:53:24] <WilliamJ17> its part of the rectangles function
[00:54:07] <dsal> Does ghc inline stuff within the same module by default?
[00:54:08] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[00:54:18] <sshine> is there a standard way to perform modular arithmetic in small spaces? e.g. if I do Z_{2^{32}} arithmetic directly in Word32, that's fine. but if I do Z_N arithmetic where N < 2^32 in Word32, then e.g. multiplication would overflow at the wrong place. is there a way to compensate either before or after multiplying if N is prime?
[00:54:19] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[00:54:19] <aplainzetakind> Those are variable names. When you write f x = x + 1 and then write f y, it takes whatever y is and adds 1 to it.
[00:54:32] <WilliamJ17> ok
[00:54:59] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[00:55:02] <WilliamJ17> so I've commented out rectangles type signature, but I dont think if I run this, it will give me the solution?
[00:55:10] <WilliamJ17> still feel theres something else to do
[00:55:11] <aplainzetakind> The letters are not parts of the function, they represent places where things can be put.
[00:55:19] <aplainzetakind> Yes, see what this gives you first.
[00:55:21] *** Joins: Pickchea (~private@user/pickchea)
[00:55:24] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[00:55:31] <aplainzetakind> Running it is not a huge chore I suppose.
[00:55:35] <WilliamJ17> yeah lol
[00:55:49] <WilliamJ17> Ok, It's given me an error on rectangle since we changed the order
[00:56:01] <geekosaur> dsal, yes as long as it's not recursive (and a few other rules)
[00:56:05] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[00:56:08] <WilliamJ17> https://paste.tomsmeding.com/4WpSDX8w
[00:56:49] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[00:57:00] <geekosaur> dsal, https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/pragmas.html#inline-pragma
[00:57:02] <WilliamJ17> I am confused as to why this has happened as all we did was change the order or i and m
[00:57:40] <aplainzetakind> You removed parentheses after unlines.
[00:57:42] <dsal> geekosaur: Thanks.  My mental model is "ghc doesn't like inlining"
[00:57:52] <WilliamJ17> ok
[00:58:16] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[00:58:17] <geekosaur> dsal, mine is "ghc inlines anything it thinks won't explode on it"
[00:58:19] <WilliamJ17> Ok, I have gotten the same error as I did before on this I think
[00:58:32] <WilliamJ17> https://paste.tomsmeding.com/dMRlFJe6
[00:58:40] <geekosaur> you can either force it to inline anyway or fine-tune its notion of "won't explode"
[00:58:50] *** Joins: lally (sid388228@id-388228.uxbridge.irccloud.com)
[00:59:45] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[00:59:51] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[01:00:08] <aplainzetakind> I told you twice to comment out the type signature for rectangles, because we're not done yet.
[01:00:21] <WilliamJ17> oh sorry, I commented out it in rectangle
[01:00:23] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[01:00:25] <aplainzetakind> It doesn't yet give what you declared in the signature.
[01:00:29] *** Quits: xff0x (~xff0x@2001:1a81:5338:9c00:d04b:38a4:ed4b:d288) (Ping timeout: 265 seconds)
[01:01:01] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[01:01:03] *** Joins: xff0x (~xff0x@2001:1a81:5338:9c00:9209:5fa4:fe4c:a1bd)
[01:01:17] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[01:01:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[01:01:34] <WilliamJ17> Ok
[01:01:43] <WilliamJ17> ["  \n  \n  \n","    **\n    **\n    **\n","      ****\n      ****\n      ****\n"] is my output
[01:01:54] <WilliamJ17> when I ran the function not in a putStr function
[01:02:14] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:02:42] <aplainzetakind> Can you paste the code?
[01:02:44] <[exa]> dsal: ghc _loves_ inlining but widely avoids all these kinds of traps and spikes
[01:02:45] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[01:02:58] <WilliamJ17> https://paste.tomsmeding.com/vfemMaf0
[01:04:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:04:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:04:39] <aplainzetakind> Well you see that the firs string in your list is rectangles of width 0, indented by 2 spaces, as opposed to rectangles of width 2 indented by zero spaces. Why ever could that be?
[01:04:50] <dsal> [exa]: I've had issues across modules where dumping INLINE directives everywhere helped.
[01:05:12] <[exa]> dumping as in "removing" or "adding"? :D
[01:05:13] <geekosaur> cross-module is another thing
[01:05:13] <WilliamJ17> is it because I've done widthseq and indentseq the wrong way round?
[01:05:25] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[01:05:43] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[01:05:48] <aplainzetakind> WilliamJ17: https://twitter.com/ThePracticalDev/status/720257210161311744
[01:06:06] <[exa]> anyway yeah that's actually one thing I wanted to ask a long time ago, is the (expectable) content of .hi files documented?
[01:06:12] <WilliamJ17> Ok, I've tried it and I get a different output which looks more like it should
[01:06:13] *** Quits: WHatever666 (~fuzzypixe@tchebychev.ensimag.fr) (Ping timeout: 240 seconds)
[01:06:14] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:06:19] <WilliamJ17> ["**\n**\n**\n","  ****\n  ****\n  ****\n","    ******\n    ******\n    ******\n"]
[01:06:56] <[exa]> WilliamJ17: btw what's the target of the exercise?
[01:07:02] *** Joins: asdofindia-m (~akshaymat@2001:470:69fc:105::831)
[01:07:03] <aplainzetakind> Yes. Now what you have is [String] instead of String.
[01:07:07] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[01:07:12] <dsal> [exa]: littering my files with demands of INLINEs :)
[01:07:20] <aplainzetakind> Of course String is [Char].
[01:07:20] <WilliamJ17> [exa] it;s kind of an ascii art thing
[01:07:22] <dsal> I was just trying them here in this one module and it had no effect.
[01:07:35] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[01:07:36] <[exa]> WilliamJ17: yeah I noticed but where's the hardness, I'd say
[01:07:47] <WilliamJ17> I'm a beginner
[01:08:11] <aplainzetakind> So you have [[Char]] when you need [Char].
[01:08:22] <WilliamJ17> Ok
[01:08:35] <[exa]> :t concat
[01:08:36] <lambdabot> Foldable t => t [a] -> [a]
[01:08:37] *** Parts: river (~My_user_n@tilde.team/user/river) (WeeChat 2.3)
[01:08:51] <WilliamJ17> what does foldable mean?
[01:08:55] <aplainzetakind> https://hoogle.haskell.org/ this lets you search in Haskell libraries. Among other things, by type signatures.
[01:09:01] <geekosaur> % :t concat @[]
[01:09:01] <yahb> geekosaur: [[a]] -> [a]
[01:09:09] <WilliamJ17> (y)
[01:09:14] <aplainzetakind> Go there and search for [[a]] -> [a]
[01:09:20] <[exa]> WilliamJ17: 't' in there is any type that can be folded, e.g. a list (or a set, vector, ...)
[01:09:38] <WilliamJ17> ok so it concats a list of lists
[01:09:47] <geekosaur> Foldable means anything that you can do a foldl or foldr on. I just asked the other bot to give the type of concat with lists as the Foldable
[01:10:03] <geekosaur> (lambdabot doesn't yet understand that syntax)
[01:10:10] <WilliamJ17> Ok, I read about foldl and foldr but havent been introduced to them yet on the course
[01:10:13] <fizbin> Or a Vector of lists, or a Set of lists, or a ....
[01:10:48] <[exa]> WilliamJ17: anyway since it does [[a]] -> [a] and you need [[Char]] -> [Char], I hoped that it could help.
[01:10:50] <fizbin> But basically, yeah, it concats a (some container) of lists, because nearly any sensible container will have a Foldable instance.
[01:11:19] <aplainzetakind> WilliamJ17: So concat is what you need, but please note how to find "something that does whatever" on hoogle by putting in an appropriate type signature.
[01:11:35] <[exa]> dsal: that stuff is complicated, actually I have no idea if you can force-inline something across modules
[01:11:39] <aplainzetakind> Most things already exist.
[01:11:41] *** Joins: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311)
[01:11:42] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[01:11:44] <WilliamJ17> Ok I appreciate you showing me hoogle, I didn't know about it
[01:11:55] <[exa]> hoogle is top
[01:12:06] <aplainzetakind> So concat what you have, and you're done.
[01:12:32] <WilliamJ17> So do I just concat the zipWith function?
[01:12:45] *** Joins: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0)
[01:12:46] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[01:12:47] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[01:13:05] <aplainzetakind> You could concat the zipWith function if the zipWith function were a list of lists of things.
[01:13:09] <[exa]> WilliamJ17: you mean the result of it, right?
[01:13:14] <aplainzetakind> You will concat the entire expression.
[01:13:21] *** Joins: Tisoxin (~ikosit@user/ikosit)
[01:13:27] <WilliamJ17> ok, I got it working
[01:13:33] <WilliamJ17> putStr (rectangles 2 3 4)
[01:13:34] <WilliamJ17> ***
[01:13:34] <WilliamJ17> ***
[01:13:35] <WilliamJ17>    ******
[01:13:35] <WilliamJ17>    ******
[01:13:36] <WilliamJ17>       *********
[01:13:36] <WilliamJ17>       *********
[01:13:37] <WilliamJ17>          ************
[01:13:37] <WilliamJ17>          ************
[01:13:40] <[exa]> oh noes
[01:13:55] <WilliamJ17> Thank you for being patient with me aplainzetakind
[01:13:58] <aplainzetakind> `concat $ ...` or `concat (...)`
[01:14:08] <aplainzetakind> But is this the intended behaviour?
[01:14:12] <WilliamJ17> Yeah
[01:14:16] <aplainzetakind> Really?
[01:14:26] <WilliamJ17> Thats what it looks like on the examples given on the exercise sheet
[01:14:30] <[exa]> WilliamJ17: please don't paste too many lines at once to IRC, you might get pwned by ops
[01:14:36] <WilliamJ17> (y)
[01:15:10] <WilliamJ17> If I per say wanted to create a mirror of it going in the other direction once its done all the rectangles, would that be possible?
[01:15:21] <aplainzetakind> Try changing to `indentseq = scanl (+) 0 widthseq`
[01:15:23] <WilliamJ17> so going back down to 0 on indentation
[01:15:31] <aplainzetakind> That would be nicer behaviour I think.
[01:15:33] <WilliamJ17> i'll give it a go to see what happens
[01:15:36] <aplainzetakind> And you're welcome.
[01:15:39] <WilliamJ17> what does scanl do>
[01:15:40] <WilliamJ17> ?
[01:15:40] <[exa]> WilliamJ17: just expand the lists that you have there with more specifications?
[01:15:44] <aplainzetakind> Figure it out.
[01:15:51] <[exa]> :t scanl
[01:15:52] <lambdabot> (b -> a -> b) -> b -> [a] -> [b]
[01:16:15] <WilliamJ17> so it essentially feeds it onto the next
[01:16:17] *** Quits: deadmarshal (~deadmarsh@95.38.230.89) (Ping timeout: 250 seconds)
[01:16:26] <[exa]> yap
[01:16:32] <WilliamJ17> [exa] Yeah I'm going to try that
[01:16:38] <WilliamJ17> Want to try test myself
[01:16:56] *** Quits: smartin (~Thunderbi@88.135.18.171) (Quit: smartin)
[01:17:07] *** Joins: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248)
[01:17:12] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[01:17:16] <WilliamJ17> so I'd have to make the lists go back down to 0
[01:17:27] <int-e> [exa]: scroll back one hour ;-)
[01:18:19] <aplainzetakind> A design improvement could be to remove unlines from rectangle, so it gives you a list of the lines. Then you can call lines at the end to the result of concat.
[01:18:34] <[exa]> int-e: ayay.
[01:18:45] <hololeap> sshine: this first example looks like what you're looking for, although it's written in C: https://en.wikipedia.org/wiki/Modular_arithmetic#Example_implementations
[01:18:51] <WilliamJ17> unlines gives the new lines doesnt it or did i read into the function wrong
[01:19:04] <aplainzetakind> Then if you `fmap reverse` before that last unlines is applied, you'll get each line recersed.
[01:19:20] *** Joins: boxscape (~boxscape@user/boxscape)
[01:19:24] <WilliamJ17> (y)
[01:19:31] <WilliamJ17> what is the difference between fmap and map?
[01:19:38] <[exa]> WilliamJ17: yeah but you can keep the lines nicely separate for longer, then smash them together with one big unlines
[01:19:51] <WilliamJ17> I see
[01:19:55] <aplainzetakind> map is lists only fmap is polymorphic.
[01:20:01] <aplainzetakind> Or is it?
[01:20:08] <[exa]> likely saving a bit of code
[01:20:11] <aplainzetakind> > fmap succ $ Just 1
[01:20:12] <lambdabot>  Just 2
[01:20:17] <aplainzetakind> > map succ $ Just 1
[01:20:19] <lambdabot>  error:
[01:20:19] <lambdabot>      • Couldn't match expected type ‘[b]’ with actual type ‘Maybe a0’
[01:20:19] <lambdabot>      • In the second argument of ‘($)’, namely ‘Just 1’
[01:20:22] <aplainzetakind> Yes.
[01:20:25] <WilliamJ17> Ok
[01:20:38] <WilliamJ17> is "Just" a built in function within haskell
[01:20:50] <[exa]> no
[01:20:53] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[01:20:55] <aplainzetakind> It's a data constructor of the type Maybe.
[01:21:09] <[exa]> it's in the standard library, but not "built in" per se
[01:21:13] <WilliamJ17> Ok what is it used for?
[01:21:22] <[exa]> for distinguishing stuff from Nothing
[01:21:31] <aplainzetakind> To model computations which may not return meaningful results.
[01:21:38] <geekosaur> some languages call it "optional"
[01:22:01] <WilliamJ17> Ok, I kind of understand that
[01:22:02] <aplainzetakind> Something like safeDiv x y = if y == 0 then Nothing else Just (x / y)
[01:22:10] <WilliamJ17> ah right
[01:22:22] <dsal> Some languages call it "null pointer exception"
[01:22:22] <WilliamJ17> so its essentially a blank line
[01:22:37] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[01:22:38] *** Joins: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405)
[01:22:39] <[exa]> blank value, yes.
[01:22:40] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[01:23:03] *** Joins: sm (~sm@plaintextaccounting/sm)
[01:23:06] *** Joins: siraben (~siraben@user/siraben)
[01:23:13] <WilliamJ17> I see
[01:23:26] <aplainzetakind> WilliamJ17: I suggest reading lyah.
[01:23:28] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[01:23:38] <dsal> If you think about it in terms of value cardinality, Maybe adds one additional value to whatever type it's applied to.  So if you have a Maybe Bool, there are now three possibilities.    Nothing, Just  True, and Just False.
[01:23:45] <WilliamJ17> learn you a haskell? I have been looking at it when doing previous exercises
[01:23:52] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:25:04] <aplainzetakind> Are those exercises for a course?
[01:25:10] <aplainzetakind> Where do they come from?
[01:25:23] <WilliamJ17> they're weekly exercises set by our lecturer
[01:25:29] *** Joins: benjamin[m]12 (~benjaminm@2001:470:69fc:105::1:3f2f)
[01:25:37] <WilliamJ17> for practice
[01:25:41] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:25:51] <dsal> Advent of Code is currently giving us daily exercises that are pretty fun.
[01:26:21] <WilliamJ17> I come from an imperative background so I have been trying to do some AoC in python whenever I can
[01:26:37] *** Joins: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320)
[01:26:48] <dsal> Your background can be repaired with time and practice.
[01:27:34] <WilliamJ17> I have used functional concepts such as lambdas before when doing exercises on per say hackerrank so I did run into it before I did start the course
[01:28:23] <dsal> I'm not sure I'd call lambda a particularly significant functional concept, but nobody can agree on what functional programming is.  heh
[01:29:22] <WilliamJ17> I thought haskell is based upon the lambda? Or am I being silly
[01:29:38] *** Joins: vicfred (~vicfred@user/vicfred)
[01:29:50] <[exa]> you mean lambda calculus?
[01:30:11] <[exa]> (in that case, yeah, mostly, but that's by far not only lambdas)
[01:30:41] <int-e> > (\f g x -> f x + g x) (\x -> 2 * x) (\x -> 3 - x) 42
[01:30:43] <lambdabot>  45
[01:30:48] <dsal> Yeah, lambda calculus, but if you didn't have lambda in haskell, you'd still be able to do all the functional things.  Just some stuff would be annoying because you'd have to name things you didn't' want to name.
[01:31:16] <exarkun> WilliamJ17: If you are thinking of "lambda" from Python then it's really just syntactic sugar for a certain subset of "regular" Python functions.  It doesn't have much to do with anything Haskell is based on.
[01:31:40] <WilliamJ17> yeah I must mean lambda calculus
[01:31:50] <WilliamJ17> exarkun ah I see
[01:32:19] <dsal> At a high level, functional programming (to me), is more about telling the computer what you want done without telling it all the details of how to do it.
[01:32:19] <int-e> there are lambda abstractions but it's often useful to name functions... so they're kind of rare
[01:32:49] <exarkun> dsal: Like what we do in SQL, right
[01:32:49] <int-e> (it's also a matter of style; some people use them more than others)
[01:33:08] <dsal> exarkun: Yeah, kind of.
[01:33:09] *** Joins: dmenz (~dmenz@2804:14d:5cd4:5e94::1)
[01:33:54] *** Joins: MOTERF (~MOTERF@105.66.3.166)
[01:34:19] <int-e> There's also useful operators that avoid lambdas. Function composition is a commone one: `f . g` can be used instead of `\x -> f (g x)`.
[01:34:31] <WilliamJ17> Yeah I read about function composition
[01:34:40] <WilliamJ17> Haven't used it though yet
[01:34:41] <xsperry> also partial application and setions
[01:34:49] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[01:34:56] <xsperry> instead of (\x -> x + 1) you can just do (+1)
[01:34:56] <int-e> *sections
[01:35:03] <xsperry> ^^
[01:35:10] <dsal> A friend of mine is trying to do some of the AoC stuff in Haskell with ~no FP background.  His first attempt at the first problem was pages of code opening a file and reading it line by line while trying to convert stuff and accumulate it and all this other junk.  It was a screenful of code to do something like `map read . words <$> readFile p`
[01:35:33] <dsal> One of the greatest things we get from FP is being able to actually compose things.
[01:35:44] <int-e> :t interact
[01:35:45] <lambdabot> (String -> String) -> IO ()
[01:36:12] <dsal> It takes so much planning to be able to do any sort of composition in most languages.
[01:36:20] <WilliamJ17> I have found since I started the FP course that in haskell and maybe FP in general, everything does seem shorter
[01:36:29] <int-e> (it's my get-out-of-IO-for-free card ;-)
[01:37:06] <dsal> WilliamJ17: It's not so much shorter, it's just that you write the parts you care about and don't have to spend as much effort describing *how* to do all the things (at least, not in the same place).
[01:37:09] *** Joins: nebu (~user@user/wavion)
[01:37:15] <xsperry> > map (\xs -> map (\x -> x * 10) xs) [[1,2,3],[4,5,6]]
[01:37:16] <lambdabot>  [[10,20,30],[40,50,60]]
[01:37:21] <xsperry> now compare that to:
[01:37:25] <int-e> FP is really good at abstraction
[01:37:28] *** Joins: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9)
[01:37:29] <xsperry> > map (map (*10)) [[1,2,3],[4,5,6]]
[01:37:30] <lambdabot>  [[10,20,30],[40,50,60]]
[01:38:18] <dsal> > [[1,2,3],[4,5,6]] & traversed . traversed *~ 10
[01:38:19] <lambdabot>  [[10,20,30],[40,50,60]]
[01:38:27] <dsal> If you want clarity, you have to use lens.
[01:38:49] <int-e> ...after spending years of mastering the vocabulary
[01:38:59] <exarkun> int-e++
[01:39:02] <dsal> You only need that to read it.
[01:39:02] *** Joins: kennyd (~bc8147f2@cerf.good1.com)
[01:39:35] <WilliamJ17> mhm that looks quite complex dsal to me at least
[01:39:36] *** Quits: MOTERF (~MOTERF@105.66.3.166) (Remote host closed the connection)
[01:39:59] *** Quits: dmenz (~dmenz@2804:14d:5cd4:5e94::1) (Quit: Leaving)
[01:40:06] <dsal> WilliamJ17: It's a whole category of concepts that you aren't expected to care about.
[01:40:12] <WilliamJ17> ah
[01:40:26] <int-e> > ((10*) <$>) <$> [[1,2,3],[4,5,6]] -- needed more sections
[01:40:28] <lambdabot>  [[10,20,30],[40,50,60]]
[01:40:32] <dsal> It solves a class of problems, but has overlap with other solutions that may fit better.  Such as (fmap.fmap)
[01:40:57] <dsal> @pl (((10*) <$>) <$>)
[01:40:57] <lambdabot> (((10 *) <$>) <$>)
[01:41:06] <dsal> not even pl can make that worse
[01:41:11] <int-e> <$> is too new for pl
[01:42:23] <dsal> > let (<$$>) = (fmap.fmap) in     (10 *) <$$>  [[10,20,30],[40,50,60]]
[01:42:25] <lambdabot>  [[100,200,300],[400,500,600]]
[01:42:33] <dsal> oops, pasted the wrong input
[01:43:14] <kennyd> I'd prefer <<$>>
[01:43:28] <dsal> > let (<<$>>) = (fmap.fmap) in     (10 *) <<$>>  [[10,20,30],[40,50,60]]
[01:43:29] <lambdabot>  [[100,200,300],[400,500,600]]
[01:43:33] <dsal> Yeah, that makes sense.
[01:43:58] <dsal> I've never written one of those.  Starts getting bad once you start getting really deep, though.
[01:44:16] <kennyd> yeah, we are approaching caaddr
[01:44:18] <geekosaur> next someone'll drag in type level programming
[01:44:21] <dsal> > let (<<<$>>>) = (fmap.fmap.fmap) in     (10 *) <<<$>>>  cycle [[10,20,30],[40,50,60]]
[01:44:22] <lambdabot>  error:
[01:44:22] <lambdabot>      • Ambiguous type variable ‘f0’ arising from a use of ‘show_M827152648093...
[01:44:23] <lambdabot>        prevents the constraint ‘(Show (f0 Integer))’ from being solved.
[01:44:40] <dsal> > let (<<<$>>>) = (fmap.fmap.fmap) in     (10 *) <<<$>>>  repeat [[10,20,30],[40,50,60]]
[01:44:41] <lambdabot>  [[[100,200,300],[400,500,600]],[[100,200,300],[400,500,600]],[[100,200,300],...
[01:47:45] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[01:47:55] <kennyd> hopefully we didn't scare WilliamJ17 away with these silly examples. :P
[01:48:02] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:48:35] <dsal> I think structured learning is more helpful than just seeing random stuff and asking questions about how to say French idioms in Japanese.
[01:48:52] <dsal> Imperative instincts are hard to unlearn.
[01:49:22] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[01:50:38] <kennyd> that's true. but curiosity and interest is often sparked by the first two, before deciding to spend more time learning something
[01:51:54] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:52:04] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Write error: Connection reset by peer)
[01:52:04] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Read error: Connection reset by peer)
[01:52:05] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Read error: Connection reset by peer)
[01:52:05] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (Read error: Connection reset by peer)
[01:52:05] *** Quits: sm (~sm@plaintextaccounting/sm) (Write error: Connection reset by peer)
[01:52:05] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Write error: Connection reset by peer)
[01:52:05] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Read error: Connection reset by peer)
[01:52:05] *** Quits: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405) (Write error: Connection reset by peer)
[01:52:05] *** Quits: benjamin[m]12 (~benjaminm@2001:470:69fc:105::1:3f2f) (Write error: Connection reset by peer)
[01:52:06] *** Quits: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9) (Read error: Connection reset by peer)
[01:52:06] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Write error: Connection reset by peer)
[01:52:06] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Read error: Connection reset by peer)
[01:52:06] *** Quits: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534) (Write error: Connection reset by peer)
[01:52:06] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (Read error: Connection reset by peer)
[01:52:06] *** Quits: boxscape (~boxscape@user/boxscape) (Write error: Connection reset by peer)
[01:52:06] *** Quits: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248) (Write error: Connection reset by peer)
[01:52:06] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Write error: Connection reset by peer)
[01:52:06] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Write error: Connection reset by peer)
[01:52:06] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Write error: Connection reset by peer)
[01:52:06] *** Quits: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311) (Write error: Connection reset by peer)
[01:52:06] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Read error: Connection reset by peer)
[01:52:06] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (Write error: Connection reset by peer)
[01:52:07] *** Quits: jinsun_ (~jinsun@user/jinsun) (Write error: Connection reset by peer)
[01:52:07] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Read error: Connection reset by peer)
[01:52:07] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (Write error: Connection reset by peer)
[01:52:07] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Read error: Connection reset by peer)
[01:52:07] *** Quits: Deide (~deide@user/deide) (Read error: Connection reset by peer)
[01:52:07] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Write error: Connection reset by peer)
[01:52:07] *** Quits: moats (~oats@user/oats) (Write error: Connection reset by peer)
[01:52:07] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (Write error: Connection reset by peer)
[01:52:07] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Read error: Connection reset by peer)
[01:52:07] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Read error: Connection reset by peer)
[01:52:07] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Write error: Connection reset by peer)
[01:52:07] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Write error: Connection reset by peer)
[01:52:07] *** Quits: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0) (Read error: Connection reset by peer)
[01:52:07] *** Quits: acco[m] (~accotedom@2001:470:69fc:105::1:3236) (Read error: Connection reset by peer)
[01:52:07] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Read error: Connection reset by peer)
[01:52:07] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Write error: Connection reset by peer)
[01:52:08] *** Quits: kadoban (~kadoban@user/kadoban) (Read error: Connection reset by peer)
[01:52:08] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Write error: Connection reset by peer)
[01:52:08] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (Write error: Connection reset by peer)
[01:52:08] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (Write error: Connection reset by peer)
[01:52:08] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Write error: Connection reset by peer)
[01:52:08] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Read error: Connection reset by peer)
[01:52:08] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (Read error: Connection reset by peer)
[01:52:08] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Read error: Connection reset by peer)
[01:52:08] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Write error: Connection reset by peer)
[01:52:09] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Read error: Connection reset by peer)
[01:52:09] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Write error: Connection reset by peer)
[01:52:09] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Read error: Connection reset by peer)
[01:52:09] *** Quits: Tisoxin (~ikosit@user/ikosit) (Write error: Connection reset by peer)
[01:52:09] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[01:52:09] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Write error: Connection reset by peer)
[01:52:09] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Read error: Connection reset by peer)
[01:52:09] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Read error: Connection reset by peer)
[01:52:09] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (Write error: Connection reset by peer)
[01:52:09] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Write error: Connection reset by peer)
[01:52:09] *** Quits: asdofindia-m (~akshaymat@2001:470:69fc:105::831) (Write error: Connection reset by peer)
[01:52:09] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (Read error: Connection reset by peer)
[01:52:09] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Read error: Connection reset by peer)
[01:52:10] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Read error: Connection reset by peer)
[01:52:10] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Read error: Connection reset by peer)
[01:52:10] *** Quits: siraben (~siraben@user/siraben) (Write error: Connection reset by peer)
[01:52:10] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Write error: Connection reset by peer)
[01:52:10] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Read error: Connection reset by peer)
[01:52:12] <dsal> Yeah.  It's possibly counterintuitive, but I like working in Haskell because it's easier than just about any other language I've worked in.
[01:52:26] <dsal> Which is a rather long list.
[01:53:39] *** Quits: michalz (~michalz@185.246.204.55) (Remote host closed the connection)
[01:54:44] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[01:56:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[01:59:41] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:36fe:413:d066:5593) (Quit: WeeChat 2.8)
[01:59:41] <monochrom> Yeah, "shorter code" is a very first impression but is also just a side effect. The benefit of Haskell I go for is "less micromanagement".
[01:59:41] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[01:59:42] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[01:59:42] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[01:59:42] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:59:42] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[01:59:56] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[01:59:56] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[01:59:56] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[01:59:57] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[01:59:57] *** Joins: moats (~oats@user/oats)
[01:59:57] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[01:59:58] <Square> Right, thats what im trying  say to my colleagues at work. But they assume its just massive extra work. 
[02:00:06] <Square> to*
[02:00:09] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[02:00:09] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[02:00:22] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[02:00:22] *** Joins: kadoban (~kadoban@user/kadoban)
[02:00:22] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[02:00:23] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[02:00:23] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[02:00:23] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[02:00:23] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[02:00:23] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[02:00:23] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[02:00:35] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[02:00:35] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[02:00:36] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[02:00:48] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[02:00:48] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[02:00:49] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[02:00:49] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:00:49] <monochrom> But self-selection bias implies that programmers are control freaks. Good luck telling them to even learn to let go.
[02:01:01] *** Joins: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab)
[02:01:16] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[02:01:16] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[02:01:16] *** Joins: sm (~sm@plaintextaccounting/sm)
[02:01:30] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[02:01:36] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[02:01:41] <hpc> on a mac they are command freaks
[02:01:42] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[02:01:45] <monochrom> Or at least, self-selection bias of von-Neumann-model (so, mainstream languages, the lot of them) programmers.
[02:01:54] <monochrom> hahaha
[02:01:54] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[02:01:55] *** Joins: Deide (~deide@user/deide)
[02:01:55] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[02:01:55] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[02:01:55] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[02:01:55] *** Joins: psydroid (~psydroid@user/psydroid)
[02:02:07] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[02:02:08] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[02:02:22] *** Joins: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[02:02:22] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[02:02:22] *** Joins: asdofindia-m (~akshaymat@2001:470:69fc:105::831)
[02:02:23] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[02:02:23] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[02:02:23] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[02:02:23] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[02:02:23] *** Joins: siraben (~siraben@user/siraben)
[02:02:23] *** Joins: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2)
[02:02:24] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[02:02:24] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[02:02:24] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[02:02:24] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[02:02:24] *** Joins: Tisoxin (~ikosit@user/ikosit)
[02:02:24] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[02:02:24] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[02:02:24] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[02:02:24] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[02:02:28] <hpc> anecdote along the same lines: i wanted to mess around with one of those quantum programming simulators
[02:02:37] *** Joins: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248)
[02:02:38] <monochrom> You know I'm telling the truth because every Haskell beginner begins by asking "so how do I say c=c+1"
[02:02:42] <hpc> i tried microsoft's Q# thing, ran into an endless parade of python issues
[02:02:50] *** Joins: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0)
[02:02:50] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[02:02:50] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[02:02:50] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[02:02:50] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[02:02:50] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[02:02:52] <monochrom> micromanagement mentality right there.
[02:02:53] <hpc> then just finally went "screw it", switched to haskell
[02:02:57] <hpc> looked at the time first
[02:03:04] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[02:03:09] <hpc> went to hackage, installed the first package i could find, wrote some code, built and ran it
[02:03:12] <hpc> done in under an hour
[02:03:16] *** Joins: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405)
[02:03:30] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[02:03:30] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[02:03:40] <EvanR> c=c+1, 0=1, programmer gets a punishing shock from the type checker
[02:03:42] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[02:03:42] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[02:03:42] *** Joins: jinsun_ (~jinsun@user/jinsun)
[02:03:57] *** Joins: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f)
[02:04:09] <hpc> that's just refusing to approach the language on its own terms
[02:04:09] *** Joins: acco[m] (~accotedom@2001:470:69fc:105::1:3236)
[02:04:09] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[02:04:09] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[02:04:10] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[02:04:10] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[02:04:10] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[02:04:10] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[02:04:10] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[02:04:22] <hpc> it's like writing
[02:04:22] *** Joins: thedward[m] (~thedwardm@2001:470:69fc:105::f79)
[02:04:22] *** Joins: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311)
[02:04:30] <hpc> % putStrLn("abc")
[02:04:30] <yahb> hpc: abc
[02:04:34] *** Joins: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045)
[02:04:34] <monochrom> BTW is it "micromanagement" as one word or is it 2 words "micro management"?
[02:04:34] *** Joins: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534)
[02:04:35] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[02:04:43] * monochrom micro-managers his language >:)
[02:04:45] <EvanR> it's one word
[02:04:46] *** Joins: shiraeeshi[m] (~shiraeesh@2001:470:69fc:105::1:77)
[02:04:46] *** Joins: boxscape (~boxscape@user/boxscape)
[02:04:47] <hpc> or trying to find the lambdas in java, or the types in javascript
[02:04:52] <dsal> Lisp programmers are macromanagers
[02:04:56] <monochrom> hahaha
[02:04:59] *** Joins: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203)
[02:05:05] <hpc> lol
[02:05:10] <monochrom> @remember dsal Lisp programmers are macromanagers
[02:05:10] <lambdabot> It is stored.
[02:05:11] *** Joins: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71)
[02:05:24] *** Joins: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9)
[02:05:25] <hpc> java programmers are SingletonManagers
[02:05:36] <dsal> A whole factory of them
[02:06:13] * dsal suddenly wonders how many singleton factories there are
[02:07:00] <hpc> i searched for "singleton factory" and the first result is a stack overflow question, "singleton factories, good or bad?"
[02:07:09] <EvanR> a singleton factory sounds like a contradiction
[02:07:33] <monochrom> NFT factory
[02:08:31] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 268 seconds)
[02:09:39] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[02:12:29] <kennyd> hpc, I'm pretty sure new java has lambda
[02:13:13] <hpc> sure, but everyone's going to be on 1.8 for at least the next 10 years :P
[02:13:16] <dsal> You probably have to give them really long names, though.
[02:13:25] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1b4:2cec:47c3:871e) (Ping timeout: 240 seconds)
[02:13:49] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[02:14:23] <kennyd> not bad! https://www.w3schools.com/java/java_lambda.asp
[02:14:57] <dsal> OMG.  Is Java copying JavaScript now?
[02:16:21] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Client limit exceeded: 20000)
[02:16:28] <Pickchea> Hello! In the Hindley-Milner type system, the expression `\f.((g (f 0)) (f "foo")) (\x.x)' cannot be typed because `\x.x' would have to be monomorphic in order for the application inference rule to apply. This restriction exists because type inference in polymorphic lambda calculus is not decidable. But I can do that in Haskell and Haskell type inference in Haskell is decidable. So what gives?
[02:16:34] *** Quits: siraben (~siraben@user/siraben) (Quit: Client limit exceeded: 20000)
[02:16:37] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[02:16:41] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (Quit: Client limit exceeded: 20000)
[02:16:42] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Quit: Client limit exceeded: 20000)
[02:16:49] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[02:16:52] *** Joins: siraben (~siraben@user/siraben)
[02:16:54] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Client limit exceeded: 20000)
[02:16:58] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Client limit exceeded: 20000)
[02:17:01] <hpc> :t \x -> x
[02:17:02] <lambdabot> p -> p
[02:17:04] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Client limit exceeded: 20000)
[02:17:05] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[02:17:06] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Client limit exceeded: 20000)
[02:17:11] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Client limit exceeded: 20000)
[02:17:16] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[02:17:18] *** Joins: kadoban (~kadoban@user/kadoban)
[02:17:20] <hpc> er, somehow i read that as \x -> x x
[02:17:21] <monochrom> You cannot do \f.((g (f 0)) (f "foo")) (\x.x) in Haskell either.
[02:17:27] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Client limit exceeded: 20000)
[02:17:28] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (Quit: Client limit exceeded: 20000)
[02:17:30] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[02:17:31] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[02:17:31] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (Quit: Client limit exceeded: 20000)
[02:17:31] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Client limit exceeded: 20000)
[02:17:31] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[02:17:33] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Client limit exceeded: 20000)
[02:17:33] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[02:17:33] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[02:17:34] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Client limit exceeded: 20000)
[02:17:36] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (Quit: Client limit exceeded: 20000)
[02:17:36] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Quit: Client limit exceeded: 20000)
[02:17:45] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Client limit exceeded: 20000)
[02:17:47] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[02:17:48] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[02:17:51] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Client limit exceeded: 20000)
[02:17:56] *** Quits: boxscape (~boxscape@user/boxscape) (Quit: Client limit exceeded: 20000)
[02:17:59] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Client limit exceeded: 20000)
[02:17:59] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Client limit exceeded: 20000)
[02:18:00] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:18:02] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:18:08] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Client limit exceeded: 20000)
[02:18:09] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: Client limit exceeded: 20000)
[02:18:14] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[02:18:15] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Client limit exceeded: 20000)
[02:18:19] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:18:26] <monochrom> What you can do, and this is right from HM again, is "let f = \x.x in ((g (f 0)) (f "foo"))". So, a "let" construct that polymorphizes "f = \x.x".
[02:18:29] *** Joins: Tisoxin (~ikosit@user/ikosit)
[02:18:29] *** Quits: Deide (~deide@user/deide) (Quit: Client limit exceeded: 20000)
[02:18:30] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Client limit exceeded: 20000)
[02:18:40] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[02:18:40] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Client limit exceeded: 20000)
[02:18:43] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[02:18:49] <hpc> wouldn't that work if the lambda was rank-2?
[02:18:53] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Client limit exceeded: 20000)
[02:18:54] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[02:18:54] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[02:18:57] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Quit: Client limit exceeded: 20000)
[02:18:58] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Client limit exceeded: 20000)
[02:19:02] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Client limit exceeded: 20000)
[02:19:03] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[02:19:07] <monochrom> Yes but you have to hand-write some type annotations.
[02:19:08] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[02:19:08] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Client limit exceeded: 20000)
[02:19:09] <hpc> (granted, that's haskell deviating from H-M)
[02:19:15] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[02:19:21] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[02:19:22] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[02:19:27] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Quit: Client limit exceeded: 20000)
[02:19:29] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[02:19:29] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[02:19:36] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: Client limit exceeded: 20000)
[02:19:39] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[02:19:39] <monochrom> Even in Haskell, you have to write at least "\(f :: forall a. a -> a)"
[02:19:40] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Client limit exceeded: 20000)
[02:19:43] *** Joins: boxscape (~boxscape@user/boxscape)
[02:19:45] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Client limit exceeded: 20000)
[02:19:53] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[02:19:56] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[02:20:06] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (Quit: Client limit exceeded: 20000)
[02:20:08] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[02:20:12] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[02:20:13] *** Joins: Deide (~deide@user/deide)
[02:20:16] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (Quit: Client limit exceeded: 20000)
[02:20:17] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (Quit: Client limit exceeded: 20000)
[02:20:28] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[02:20:34] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[02:20:38] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Client limit exceeded: 20000)
[02:20:40] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[02:20:40] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[02:20:53] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[02:20:58] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 260 seconds)
[02:20:59] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Client limit exceeded: 20000)
[02:21:02] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Client limit exceeded: 20000)
[02:21:02] *** Quits: moats (~oats@user/oats) (Quit: Client limit exceeded: 20000)
[02:21:03] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Client limit exceeded: 20000)
[02:21:05] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Client limit exceeded: 20000)
[02:21:07] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[02:21:07] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[02:21:08] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Client limit exceeded: 20000)
[02:21:19] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[02:21:53] * geekosaur wonders how long before they do something about that "Client limit exceeded" error on the bridge
[02:22:01] <geekosaur> 20000 is clearly too small
[02:22:08] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (Quit: Client limit exceeded: 20000)
[02:22:08] *** Joins: moats (~oats@user/oats)
[02:22:10] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Client limit exceeded: 20000)
[02:22:22] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[02:22:22] <EvanR> oof
[02:22:31] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (Quit: Client limit exceeded: 20000)
[02:22:36] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[02:22:36] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[02:22:37] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[02:22:50] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[02:23:21] <hpc> wouldn't they have at least matched the limit they set on freenode?
[02:23:56] <geekosaur> presumably they did. but I gather a lot of folks switched to matrix to get a more modern ux
[02:24:24] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Quit: Client limit exceeded: 20000)
[02:24:32] <geekosaur> for example there was a fair amount of talk about #ghc switching to matrix, and discussing other folks who were doing so
[02:24:48] <hpc> ah
[02:24:51] <perro> I've never understsood matrix dev
[02:25:02] <Pickchea> monochrom, right, I actually can't do that in Haskell, I thought wrong!
[02:25:07] <perro> it's just never seemed consistent to me
[02:25:46] <mniip> (not on our side btw)
[02:25:57] <dsal> I've wanted to try matrix, but it seems like I either have to do a tremendous amount of work with a static IP address and stuff, or just like, use a different central service.
[02:25:59] * dsal misses xmpp
[02:26:26] <perro> that's what I don't get. xmpp existed if you wanted to make a better system work off that
[02:26:30] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:26:37] <perro> the bikeshedding ti has taken to get to where it is is like wow
[02:26:42] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[02:27:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:27:14] <perro> it would be one thing if it was actually noticably superior and simpler but.... /me hushes
[02:28:06] <dsal> https://xkcd.com/927/
[02:28:54] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:29:38] <geekosaur> matrix fairly obviously wanted to be a better irc, not a different paradigm
[02:29:50] <geekosaur> although I guess this is -offtopic fodder
[02:31:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[02:32:38] <monochrom> Bikeshedding is just a symptom. The underlying mentality is not-invented-here.
[02:33:16] <geekosaur> "I can do it better!" aka that xkcd
[02:34:16] <monochrom> Indeed, even the whole notion of "web forum" was created out of a few PHP programmers wanting an excuse to reinvent something, as opposed to, like, why not build upon NNTP.
[02:35:11] <monochrom> Corollary: Since they're PHP fanatics, of course they couldn't grok the tree model of a discussion thread.
[02:35:38] <perro> yowch
[02:35:42] <perro> to be fair, progress is hard
[02:35:46] <monochrom> It took humanity about 10 years to rediscover the fact that a thread is really a tree, i.e., until Reddit came about.
[02:37:49] *** Joins: jeetelongname (~jeet@eduroam-public-20.nat.port.ac.uk)
[02:38:01] <monochrom> Progress is hard, but one would think that stagnation would be easier than regress.
[02:38:15] *** Quits: emf (~emf@2620:10d:c091:480::1:58ea) (Ping timeout: 252 seconds)
[02:38:28] <geekosaur> ask Alan Cox about that one
[02:38:47] <perro> we're still working on really small timescales
[02:38:51] <geekosaur> (ex-Linux networking guru)
[02:41:30] *** Quits: nebu (~user@user/wavion) (Ping timeout: 260 seconds)
[02:42:50] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[02:46:13] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:46:30] <boxscape> <dsal> You probably have to give them really long names, though -- close enough: lambdas don't have type inference in Java, so unless you pass one as a monomorphic argument you always have to specify the type, e.g. Function<Int, Bool>, or Predicte<Int>, etc (there's not one function type like Haskell's (->), there's as many different ones as you want)
[02:46:54] <EvanR> wait a thread is really a tree?
[02:46:59] <EvanR> that sounds random
[02:48:07] <geekosaur> huh?
[02:50:53] <monochrom> I'm OK if you say "online discussion is a social construct, so it is random". >:)
[02:51:01] *** Quits: user01 (~aj@154.0.137.32) (Quit: Leaving.)
[02:51:19] <perro> is the ambiguity "thread"?
[02:51:26] <EvanR> oh
[02:51:28] <EvanR> reddit
[02:51:33] <EvanR> not concurrency
[02:51:38] <perro> ha
[02:52:15] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (Quit: Client limit exceeded: 20000)
[02:52:19] <monochrom> You know what, it is concurrency that causes a tree. Mutiple people reply to the same post concurrently...
[02:52:42] <EvanR> and when you make retroactive edits, it becomes a general graph
[02:54:49] <monochrom> sheafification of reddit fibre bundles
[02:55:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[02:56:45] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:56:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[02:58:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:00:51] *** Joins: nebu (~user@user/wavion)
[03:01:09] <geekosaur> yeh, read back a few more lines and you find "discussion thread"
[03:01:13] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[03:05:59] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[03:11:33] *** Quits: nebu (~user@user/wavion) (Ping timeout: 250 seconds)
[03:13:00] *** Joins: nebu (~user@user/wavion)
[03:15:44] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9808:86a6:acca:9c5)
[03:18:26] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[03:19:46] *** Quits: nebu (~user@user/wavion) (Ping timeout: 260 seconds)
[03:19:49] *** Joins: genieliu (~genieliu@111.193.167.10)
[03:21:27] *** Quits: WilliamJ17 (~WilliamJ@wireless-student-pt10-182-232.lut.ac.uk) (Quit: Client closed)
[03:25:57] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[03:26:58] <dsal> EvanR: I discuss things in parallel because I type with both hands.
[03:27:28] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 268 seconds)
[03:28:40] <monochrom> If there are two projects due, my left hand and left eye work on one, my right hand and right eye work on the other.
[03:29:10] <hpc> dsal: but you have 10 fingers :P
[03:29:30] <hpc> you could be 5 times faster
[03:29:37] <dsal> hpc: there's a lot of contention.  Managing the mutex at that level is too hard.
[03:29:54] <monochrom> All 10 fingers fight for the Z key.
[03:30:17] <dsal> The work is parallelized, but they have to agree on timing.  It's kind of a hard problem and doesn't work super reliably.
[03:30:26] <hpc> sometimes it's more efficient to just have one really long finger
[03:31:09] <hpc> https://theinfosphere.org/images/thumb/b/be/Farnsworth-finglonger1.jpg/225px-Farnsworth-finglonger1.jpg
[03:31:19] <dsal> My head already showed me that picture.
[03:31:26] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:31:30] <monochrom> One really long finger is great for glissando on a piano :)
[03:31:40] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:32:00] *** Quits: jeetelongname (~jeet@eduroam-public-20.nat.port.ac.uk) (Remote host closed the connection)
[03:32:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[03:34:09] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:37:11] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[03:38:25] *** Quits: genieliu (~genieliu@111.193.167.10) (Ping timeout: 250 seconds)
[03:41:53] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:43:13] *** Joins: user0 (~aj@154.0.137.32)
[03:44:20] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 265 seconds)
[03:48:07] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[03:49:16] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[03:51:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[03:51:51] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 250 seconds)
[03:51:57] *** Quits: k60`` (~user@static.100.218.46.78.clients.your-server.de) (Ping timeout: 252 seconds)
[03:52:24] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[03:56:13] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:56:37] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[03:58:31] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:03:09] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: Client limit exceeded: 20000)
[04:04:23] *** Quits: puke (~puke@user/puke) (Quit: puke)
[04:10:37] *** Joins: neverfindme (~hayden@72.92.246.5)
[04:11:09] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[04:11:34] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:15:37] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[04:17:56] *** Joins: puke (~puke@user/puke)
[04:19:06] <dsal> Kind of annoyed that moving this code into a different module has such a large impact on performance.  I need fancier whole program optimization.
[04:19:20] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[04:19:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:26:05] *** Quits: acidjnk_new (~acidjnk@pd9e0bdc0.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:26:08] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Remote host closed the connection)
[04:28:13] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[04:28:17] *** Joins: k60`` (~user@static.100.218.46.78.clients.your-server.de)
[04:29:18] <int-e> . o O ( if you want performance you have to get inline )
[04:29:34] <int-e> bad pun, but also kind of true, sadly
[04:30:42] *** Quits: k60`` (~user@static.100.218.46.78.clients.your-server.de) (Remote host closed the connection)
[04:32:22] <dsal> I've found just moving a bit of code into a function has had quite noticeable impact even in the same module regardless of how hard I tell it to inline.  I'm guessing it didn't notice it could fuse.
[04:34:51] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:25b5:2708:65a9:4e7d) (Quit: gone to sleep. ZZZzzz…)
[04:36:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:36:44] <johnw> dsal: https://hackage.haskell.org/package/inspection-testing is a nice way to defend against that kind of performance regression
[04:37:27] *** Joins: pfurla (~pfurla@201.17.118.230)
[04:38:09] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:38:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:38:10] *** Joins: wroathe (~wroathe@user/wroathe)
[04:38:12] <dsal> Oh neat.
[04:38:44] <dsal> I think this was a case where it could actually do the right thing, but wasn't because of what I thought might be a tiny difference that ended up being some unexpected overhead.
[04:39:02] <dsal> Basically, I made my `Thing` a `Thing a` with a conversion function attached and that had a huge impact.
[04:39:14] <johnw> yes, things like creating a non-saturated function have ruined my day in a similar way before
[04:41:05] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 252 seconds)
[04:42:55] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[04:43:40] *** Joins: Guest66 (~textual@98.13.6.21)
[04:45:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[04:48:39] *** Quits: neverfindme (~hayden@72.92.246.5) (Quit: Leaving)
[04:52:25] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[04:58:35] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 250 seconds)
[05:03:02] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1cce:ad41:7c5b:4355)
[05:03:08] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[05:05:04] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Remote host closed the connection)
[05:07:05] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[05:14:08] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[05:15:34] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:18:47] *** Quits: user0 (~aj@154.0.137.32) (Quit: Leaving.)
[05:19:36] *** Joins: user0 (~aj@154.0.137.32)
[05:21:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[05:21:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:21:37] *** Quits: user0 (~aj@154.0.137.32) (Client Quit)
[05:23:32] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:25:50] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:28:09] *** Joins: k60`` (~user@static.100.218.46.78.clients.your-server.de)
[05:29:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:31:15] *** Joins: user0 (~aj@154.0.137.32)
[05:31:28] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[05:32:59] *** Quits: user0 (~aj@154.0.137.32) (Client Quit)
[05:38:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[05:39:00] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[05:41:29] *** Quits: xff0x (~xff0x@2001:1a81:5338:9c00:9209:5fa4:fe4c:a1bd) (Ping timeout: 250 seconds)
[05:43:16] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:97ca:7ac8:9d9f:cfb2)
[05:44:22] *** Joins: k60``` (~user@94.25.169.9)
[05:44:54] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 260 seconds)
[05:46:32] *** Quits: k60`` (~user@static.100.218.46.78.clients.your-server.de) (Ping timeout: 256 seconds)
[05:52:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:53:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[05:56:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:02:13] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[06:02:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:02:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:02:14] *** Joins: wroathe (~wroathe@user/wroathe)
[06:02:49] *** Joins: genieliu (~genieliu@103.37.140.38)
[06:03:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:13:02] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba2c03cbcafca2ab2631d.dip0.t-ipconnect.de)
[06:14:34] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2f664fe176011d10d59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:14:35] *** ubert1 is now known as ubert
[06:15:12] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com)
[06:16:42] *** Joins: ub1 (~Thunderbi@p200300ecdf0ba2c0b11d357caa48ef17.dip0.t-ipconnect.de)
[06:18:16] *** Quits: ub (~Thunderbi@p200300ecdf0ba2f69d45b59a7f50dcfc.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:18:59] *** ub1 is now known as ub
[06:19:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 240 seconds)
[06:24:11] *** Joins: alex[m]1 (~alexchete@2001:470:69fc:105::1:1001)
[06:24:11] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[06:24:23] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[06:24:23] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[06:24:37] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[06:24:49] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[06:24:49] *** Joins: jinsun_ (~jinsun@user/jinsun)
[06:24:49] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[06:24:49] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[06:25:04] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[06:25:04] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[06:27:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:27:39] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:97ca:7ac8:9d9f:cfb2) (Ping timeout: 250 seconds)
[06:28:28] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:d6d6:fa6f:b314:a474)
[06:31:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:32:10] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com) (Quit: emf)
[06:32:50] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[06:32:55] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1cce:ad41:7c5b:4355) (Ping timeout: 252 seconds)
[06:33:08] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com)
[06:38:27] *** Joins: jeetelongname (~jeet@eduroam-public-20.nat.port.ac.uk)
[06:39:45] *** Quits: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534) (Quit: Client limit exceeded: 20000)
[06:40:03] <jackdk> in 2017, ocharles wrote an article that can be summarised as "here's a recipe to make MonadFoo classes that are usable by both mtl and effect systems, by making a class whose only method is a `liftFoo :: Free (Coyoneda SomeGADTOfOperations) a -> m a`: https://blog.ocharles.org.uk/posts/2017-08-23-extensible-effects-and-transformers.html
[06:40:15] *** Joins: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534)
[06:40:44] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Quit: nunggu)
[06:42:05] <jackdk> I'm trying to extend it to support things like `local`, in that I have constructors of the GADT like `Reconfigure :: Foo -> MyGADT a -> MyGADT a`. But then the straightfoward lifting goes away, because you want to expose operations like `reconfigure :: MonadFoo m => Foo -> m a -> m a`, at which point I get stuck on that `m a` in negative position. Has anyone here successfully extended this technique in this way?
[06:45:07] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[06:46:47] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:46:47] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:46:47] *** finn_elija is now known as FinnElija
[06:48:18] *** Quits: nfd (~nfd@user/nfd) (Ping timeout: 256 seconds)
[06:48:27] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com) (Quit: emf)
[06:50:14] *** Quits: k60``` (~user@94.25.169.9) (Ping timeout: 260 seconds)
[06:50:29] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[06:51:26] <jackdk> I could change the GADT constructor to be `Reconfigure :: MonadFoo m => Foo -> m a -> MyGADT a` but I suspect that's gonna play poorly at the use site.
[07:00:13] *** Quits: td_ (~td@muedsl-82-207-238-085.citykom.de) (Ping timeout: 240 seconds)
[07:02:03] *** Joins: td_ (~td@94.134.91.156)
[07:04:15] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:05:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[07:08:06] *** Quits: Kevin578 (~Kevin578@pool-96-237-112-198.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[07:09:20] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[07:12:10] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[07:12:58] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:12] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:18:41] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:5d2f:a515:1834:3924)
[07:21:44] *** Joins: k60``` (~user@94.25.169.9)
[07:22:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:24:49] *** Joins: nfd (~nfd@user/nfd)
[07:29:29] <jackdk> yeah this is bad - if i put an `m a` into the GADT like that I can't prove that it's the same `m` that I want to interpret into
[07:32:30] *** Quits: k60``` (~user@94.25.169.9) (Ping timeout: 256 seconds)
[07:34:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:34:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:34:24] *** Joins: wroathe (~wroathe@user/wroathe)
[07:37:30] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[07:37:39] <Axman6> isn;t this one of the reasons why effects in polysemy are also passed the effects it's running with? (being very loose with my language, I'm sure)
[07:39:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:40:25] <jackdk> I expect so, because this is a "bracket-ish" operation. spoiler: since AWST is a clumsy monad transformer and rightfully departing in amazonka-2.0, I'm trying to build a replacement internally that I will opensource once it's proven. I'm digging around to see if I can make something that's a good base for both mtl and effect systems in the ocharles style, but it isn't looking good so far
[07:43:30] <jackdk> I suppose you can implement things like `within :: MonadAmazonka m => Region -> m a -> m a` outside of the GADT by (in MTL) using `local` since you know you have a reader inside your `AmazonkaT`, but the best I can think of in `freer-simple` is to interpret the stuff you want to run in some other region separately, which feels pretty awkward
[07:46:27] *** Joins: Topsi (~Tobias@dyndsl-095-033-020-172.ewe-ip-backbone.de)
[07:47:10] <jackdk> Axman6: I particularly welcome your thoughts since I know you used to do a bunch of amazonkoid stuff
[07:48:27] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 250 seconds)
[07:48:34] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 260 seconds)
[07:49:01] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 240 seconds)
[07:49:54] *** Joins: zebrag (~chris@user/zebrag)
[07:51:18] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[07:57:06] <Axman6> it feels like the missing thing is some constraint that you have some reader/state which you can change the Region in, but I have no idea how to fix that
[07:59:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:00:32] *** Quits: jeetelongname (~jeet@eduroam-public-20.nat.port.ac.uk) (Ping timeout: 240 seconds)
[08:01:04] <Axman6> can liftWithin :: Region -> Free (Coyodneda Foo) a -> m a also be a part of the interface?
[08:01:48] <Axman6> feels like a bad hack
[08:02:50] <Axman6> something like liftLocal :: (Env -> Env) -> Free (Coyodneda Foo) a -> m a might be useful I guess
[08:03:44] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 268 seconds)
[08:04:09] *** Joins: k60``` (~user@94.25.169.9)
[08:05:49] <jackdk> yeah because I don't want to tie myself to amazonka's Env at the abstract GADT definition stage
[08:06:19] <jackdk> I considered storing Free (Coyo Foo) a in the GADT but then you can do Amazonka operations AND NOTHING ELSE
[08:06:41] <Axman6> having m a -> m a feels wrong to me, since this only applies to your Free thing
[08:07:20] <Axman6> feels like reading isovector's posts on the design of polysemy might be useful, even if it doesn't contain the answer
[08:08:13] <jackdk> indeed. similar problem if you try a higher rank type: `Within :: Region -> (forall m . MonadFoo m => m a) -> Foo a` lets us choose what `m` is, but at the cost of telling library clients they can't do anything inside that region which isn't only a MonadFoo
[08:09:06] *** Quits: k60``` (~user@94.25.169.9) (Ping timeout: 260 seconds)
[08:09:15] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:11:00] <jackdk> I've read some of isovector's writing, and it seems like there are only a few contenders: freer-simple if you don't want too much galaxybrain, polysemy if you're willing to use GHC plugins and go all in on galactic haskell, fused-effects if you really really want performance, and eff might be a thing later when the delimited continuation primops appear in widely-used GHCs
[08:11:36] <jackdk> and not many of them let you write `bracket`-ish things
[08:12:00] <jackdk> so I'm thinking I may as well abandon this, just write a really good MTL-style lib for now, and let the effects world catch up?
[08:12:59] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:d6d6:fa6f:b314:a474) (Ping timeout: 268 seconds)
[08:13:42] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:9578:51b0:7e3f:b293)
[08:17:03] *** Joins: genieliu (~genieliu@103.37.140.38)
[08:18:33] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:18:55] *** Joins: user0 (~aj@154.0.137.32)
[08:21:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[08:21:24] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[08:21:49] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:25:26] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[08:25:52] *** Joins: Axma33016 (~Axman6@user/axman6)
[08:28:02] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[08:31:32] *** Joins: user01 (~aj@154.0.137.32)
[08:31:43] *** Quits: user0 (~aj@154.0.137.32) (Ping timeout: 252 seconds)
[08:32:20] <user01> tesr
[08:33:37] <jackdk> received user01 
[08:33:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[08:38:12] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Remote host closed the connection)
[08:38:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:41:29] *** Joins: awjchen (~awjchen@node-1w7jr9y54rj7c0bzal2n5rlib.ipv6.telus.net)
[08:43:02] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:9578:51b0:7e3f:b293) (Ping timeout: 240 seconds)
[08:43:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[08:43:53] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:d5b4:3c9d:ec95:16b3)
[08:47:54] *** Axma33016 is now known as Axman6
[08:48:26] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 256 seconds)
[08:57:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[08:58:00] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[08:59:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:59:57] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 252 seconds)
[09:00:55] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[09:00:56] *** Joins: Topsi1 (~Tobias@dyndsl-095-033-094-234.ewe-ip-backbone.de)
[09:01:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 252 seconds)
[09:01:25] *** Quits: Topsi (~Tobias@dyndsl-095-033-020-172.ewe-ip-backbone.de) (Ping timeout: 252 seconds)
[09:04:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[09:07:49] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[09:09:27] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[09:09:54] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:5d2f:a515:1834:3924) (Remote host closed the connection)
[09:10:15] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:b66e:c3b4:4ab3:f161)
[09:15:13] *** Parts: awjchen (~awjchen@node-1w7jr9y54rj7c0bzal2n5rlib.ipv6.telus.net) ()
[09:15:28] <Axman6> Sadly, there was no SYN
[09:16:50] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Quit: WeeChat 3.3)
[09:23:52] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[09:28:43] *** Joins: genieliu (~genieliu@103.37.140.38)
[09:29:00] <jackdk> you mean ACK
[09:30:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[09:30:44] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:31:33] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:33:55] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[09:35:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[09:37:27] <Axman6> Nah, you SYNACK'd
[09:37:37] <Axman6> uh, right, yes
[09:37:51] <Axman6> no wonder all my TCP connections were going backwards
[09:38:18] <Axman6> I guess we live in a world where we do not ACK our SYNs
[09:39:04] <int-e> RST RST RST
[09:39:40] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[09:45:00] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:45:24] <int-e> > unwords $ map (\x -> printf "%.2f" (190 - x/20)) [3738,3728,3693,3672,3602,3581,3580,3576,3546,3539]
[09:45:26] <lambdabot>  "3.10 3.60 5.35 6.40 9.90 10.95 11.00 11.20 12.70 13.05"
[09:47:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:47:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[09:47:22] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[09:51:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[09:51:49] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[09:52:03] <xerox> when cyphase decided do it I did end up off the list but there am I back again in the int-e official scoring :D
[09:52:12] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:54:02] <cyphase> \o/
[09:54:20] <cyphase> had to get it in before 24hrs had passed at least
[09:56:59] <int-e> xerox: Heh, I don't make the order though.
[09:58:29] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:3700:12c3:7bff:fe6d:d374)
[09:59:42] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 260 seconds)
[10:01:55] <xerox> int-e: anything fun from your take on it today?
[10:03:46] <int-e> too much cut&paste
[10:04:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[10:04:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[10:06:26] *** Joins: k60``` (~user@94.25.169.9)
[10:08:54] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[10:11:22] *** Quits: k60``` (~user@94.25.169.9) (Ping timeout: 268 seconds)
[10:13:37] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 250 seconds)
[10:13:50] *** Joins: hololeap (~hololeap@user/hololeap)
[10:16:46] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[10:18:06] *** Joins: hololeap (~hololeap@user/hololeap)
[10:24:12] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:25:30] *** Joins: genieliu (~genieliu@103.37.140.24)
[10:27:54] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:30:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:32:36] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[10:35:22] *** Joins: michalz (~michalz@185.246.204.61)
[10:35:26] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 268 seconds)
[10:36:18] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[10:37:02] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 260 seconds)
[10:38:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[10:39:01] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 240 seconds)
[10:39:33] *** Joins: genieliu (~genieliu@103.37.140.38)
[10:39:50] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:40:49] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[10:44:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 252 seconds)
[10:49:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[10:57:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[10:59:30] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:25b5:2708:65a9:4e7d)
[11:01:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[11:02:02] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[11:02:17] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[11:03:05] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:9c45:ef7f:f3cf:1dd6)
[11:03:47] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:04:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[11:04:45] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[11:06:04] *** Joins: hololeap (~hololeap@user/hololeap)
[11:08:11] *** Quits: hololeap (~hololeap@user/hololeap) (Client Quit)
[11:08:26] *** Joins: hololeap (~hololeap@user/hololeap)
[11:09:59] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[11:11:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:11:51] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:12:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:12:39] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[11:13:24] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:13:43] *** Joins: featurebug (~Username@49.205.122.91)
[11:14:42] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[11:14:50] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[11:21:24] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:26:03] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[11:26:21] *** Quits: kennyd (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:28:05] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[11:28:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:30:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Remote host closed the connection)
[11:30:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[11:31:59] *** Quits: featurebug (~Username@49.205.122.91) (Quit: Going offline, see ya! (www.adiirc.com))
[11:32:59] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[11:33:15] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[11:35:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[11:35:55] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[11:36:06] *** Joins: vpan (~0@212.117.1.172)
[11:37:03] *** Parts: user01 (~aj@154.0.137.32) ()
[11:40:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:44:17] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:48:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[11:52:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[11:53:23] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:53:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[11:55:04] *** Joins: chele (~chele@user/chele)
[11:57:16] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:58:01] *** Joins: Pickchea (~private@user/pickchea)
[12:06:10] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 260 seconds)
[12:11:21] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[12:14:23] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:14:52] *** Joins: notzmv (~zmv@user/notzmv)
[12:21:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[12:25:35] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e96496b0bacdae081f8.dip0.t-ipconnect.de)
[12:26:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 260 seconds)
[12:29:05] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:30:05] *** Joins: cfricke (~cfricke@user/cfricke)
[12:30:20] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:30:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[12:31:09] *** Joins: k60``` (~user@94.25.169.9)
[12:36:12] <aplainzetakind> How do I silence a warning at a particular location in code?
[12:36:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Ping timeout: 252 seconds)
[12:36:29] <dminuoso> You cant.
[12:36:36] <aplainzetakind> :(
[12:36:46] <dminuoso> best you can do is set {-# OPTIONS_GHC -fno-warn-foo #-} module wide
[12:36:50] <dminuoso> Or via .cabal file
[12:37:17] <dminuoso> There was an issue about it in GHC about 10 years ago that was bikeshedded fairly quickly
[12:38:10] <aplainzetakind> OPTIONS_GHC will do then.
[12:38:11] <aplainzetakind> Thanks.
[12:38:31] <aplainzetakind> And incomplete-patterns misfires sometimes right?
[12:39:00] <dminuoso> aplainzetakind: With lower your guards it have substantially smaller false negatives
[12:39:12] <dminuoso> So it depends a bit on your GHC version
[12:39:25] <dminuoso> If you're still running on relatively old versions, you dont have LYG implemented yet.
[12:39:49] <dminuoso> And back then, the incomplete patterns was horribly broken - few things have produced as many bug reports as that.
[12:40:09] <aplainzetakind> I'm on 8.10
[12:40:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[12:40:31] <dminuoso> It was a gradual process, I think you'll have to ask the GHC folks how far it was in 8.10
[12:40:47] <dminuoso> If memory serves right, it's largely implemented in 9.x
[12:40:59] <aplainzetakind> OK then. I'll shut it up too.
[12:47:34] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:37] *** allbery_b is now known as geekosaur
[12:49:15] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[12:53:55] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:59:22] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 260 seconds)
[13:02:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:04:03] *** Joins: genieliu (~genieliu@103.37.140.24)
[13:05:03] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:06:42] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (Read error: Connection reset by peer)
[13:07:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 240 seconds)
[13:08:03] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 250 seconds)
[13:08:37] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 240 seconds)
[13:12:54] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[13:13:33] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[13:17:47] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 250 seconds)
[13:18:18] *** Joins: teo (~teo@user/teo)
[13:18:37] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:19:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:19:58] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[13:23:01] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (Remote host closed the connection)
[13:24:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[13:30:29] *** Joins: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320)
[13:32:51] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[13:34:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:35:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:35:50] *** Quits: puke (~puke@user/puke) (Read error: Connection reset by peer)
[13:36:04] *** Joins: puke (~puke@user/puke)
[13:36:25] *** Quits: k60``` (~user@94.25.169.9) (Ping timeout: 250 seconds)
[13:37:02] <dminuoso> Mmm, is there a combinator like `IO a -> (a -> IO b) -> (SomeException -> IO b) -> IO b` in base that Im not seeing?
[13:38:09] <merijn> catch? :p
[13:38:12] <merijn> :t catch
[13:38:13] <lambdabot> Exception e => IO a -> (e -> IO a) -> IO a
[13:38:21] <merijn> I mean, you need 1 extra step
[13:38:30] <merijn> But that seems fairbairn threshold-y :p
[13:39:00] <dminuoso> Mmm
[13:39:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 252 seconds)
[13:40:27] <dminuoso> I mean I know I can do `f a h e = fmap (either id id) $ (Left <$> a) `catch` (fmap Right . h)
[13:40:30] <dminuoso> Or some such
[13:40:40] <dminuoso> merijn: Is it, really?
[13:40:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:41:14] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:41:51] <dminuoso> The naive attempt at doing `f =<< x `catch` f` is not the same.
[13:42:11] <dminuoso> I want to catch an exception on `x`, but on if it comes from `f`, and then simply *not* proceed.
[13:42:23] <dminuoso> The IO exception version of `maybe`, if you want
[13:42:34] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:42:40] <merijn> only if it comes from 'f'?
[13:42:52] <dminuoso> Sorry, not if it comes from `f`
[13:43:15] <merijn> I mean... "\x f h -> (x `catch` h) >>= f"?
[13:43:27] <dminuoso> merijn: Yeah still not the same.
[13:43:32] <merijn> oh, wait, yeah
[13:43:42] <int-e> ((Left <$> a) `catch` (fmap Right . e)) >>= either h pure
[13:43:45] <dminuoso> You have to do the above and fiddle an Either through
[13:43:47] <dminuoso> yeah
[13:44:11] <dminuoso> Naively it seems this would be a very useful or desirable thing
[13:44:37] <int-e> so yeah, icky enough to warrant a definition... but maybe too specialized to warrant inclusion in base
[13:45:13] <int-e> (I realize it's perfect for CPS style programming, but I think many people don't find CPS natural at all)
[13:46:11] <dminuoso> % exception e h a = ((Left <$> a) `catch` (fmap Right . e)) >>= either h pure
[13:46:11] <yahb> dminuoso: 
[13:46:13] <dminuoso> % :t exception
[13:46:13] <yahb> dminuoso: Exception e => (e -> IO b) -> (a -> IO b) -> IO a -> IO b
[13:47:34] <int-e> % :t handle
[13:47:34] <yahb> int-e: Exception e => (e -> IO a) -> IO a -> IO a
[13:47:36] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[13:47:38] <int-e> % :t catch
[13:47:38] <yahb> int-e: Exception e => IO a -> (e -> IO a) -> IO a
[13:47:42] <int-e> :-/
[13:48:37] *** Joins: zaquest (~notzaques@5.130.79.72)
[13:48:49] <dminuoso> You could even define handle/catch in terms of exception, as `handle h = exception h pure`
[13:49:04] <dminuoso> int-e: It seems to fit more in line with `either`, `maybe` and those operators.
[13:49:34] <dminuoso> Im not sure this about CPS programming. 
[13:50:07] <dminuoso> In some traditional languages you could have an exception handler that simply uses a return() or throws an exception itself to shortcircuit the rest of the function. But we cant do this in Haskell
[13:50:26] <int-e> dminuoso: you're providing a continuation for the exception case and another one for the successful case
[13:50:30] <dminuoso> Think its the other way around, you have to use CPS to get the effect of `exception` without its existance
[13:51:20] <int-e> `catch` happens to be what the RTS implements
[13:51:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[13:51:35] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[13:51:42] <dminuoso> int-e: Do you think its more idiomatic to do something like `r <- handle (const (pure Nothing)) e; case r of Nothing -> closeSocket ...; Just x -> proceed ...`?
[13:52:13] <dminuoso> Given how with Maybe equivalent we'd just write `maybe closeSocket proceed x` instead
[13:52:36] <dminuoso> That "CPS" style seems in line with what we usually write
[13:52:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[13:52:48] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:52:52] <dminuoso> Oh, and I was missing some `Just <$> e` in that
[13:53:53] <int-e> dminuoso: I have no opinion... superficially, `closeSocket` sounds like a job for `bracket`
[13:54:19] <int-e> well, I have an opinion which is that exception handling is unidiomatic no matter how you do it :P
[13:54:32] <dminuoso> int-e: Sure. I mean specifically Im using websockets, and I want to close the socket with a particular error code.
[13:55:01] <dminuoso> And a file not exist exception on the very first IO action would produce something akin to a 404, whereas further file not exist exceptions would be something akin to 500
[13:55:42] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:55:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 260 seconds)
[13:57:05] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[13:57:17] <dminuoso> So for bracket to work here, Id have to catch the first file not exist exception, and rethrow as some `FirstFileNotFoundException`
[13:58:54] <int-e> did I mention that I was being superficial
[13:59:02] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 240 seconds)
[13:59:47] <dminuoso> Fair enough. :)
[14:02:50] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[14:06:25] <int-e> dminuoso: Oh, actually... in that `exception`, should `e :: e -> IO b` be run as an exception handler (async exceptions blocked) or as ordinary code? because we seem to differ on that...
[14:07:27] <dminuoso> int-e: exception handler with async exceptions blocked.
[14:07:39] <int-e> (basically, if you want to cope with async exceptions, `handle (const (pure Nothing))` is almost never going to be the right thing)
[14:08:04] <dminuoso> I adopt the unliftio/safe-exceptions mind model that async exceptions should, in general, never be blocked.
[14:08:08] <dminuoso> Or recovered from.
[14:08:32] <int-e> but you are in a resource cleanup scenario, aren't you?
[14:08:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[14:10:16] <dminuoso> So what I have is that some client opens a websocket at /foo/1, and my software will deserialize the file files/1.json, and do something with it. But on the occasion that file does not exist, I want to reject the websocket from the get go. to avoid a toctou race, I will simply use eitherDecodeFileStrict' from aeson
[14:11:10] <int-e> Oh maybe not. You don't need more than `catch` in that case because the handler should just rethrow the exception (so there's no return type to worry about; execution doesn't continue)
[14:11:15] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:11:20] <dminuoso> handler pid pending = do { f =<< decode pid; handle f =<< acceptRequest pending }
[14:11:26] <dminuoso> something along these lines
[14:11:52] <dminuoso> Uh, hold on
[14:12:03] <dminuoso> handler pid pending = do { f <- process =<< decode pid; handle f =<< acceptRequest pending }
[14:12:11] <dminuoso> Now the key is, `process` will also access the file system
[14:12:19] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:12:51] <dminuoso> And depending on whether decode or whether process throws a file not exist exception, I want the socket closed differently
[14:13:10] <dminuoso> (or rather I mean, the pending request will be rejected differently)
[14:13:21] <dminuoso> but this distinction is not relevant
[14:13:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[14:13:57] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Quit: ZNC - https://znc.in)
[14:14:12] *** Joins: mmhat (~mmh@55d44db9.access.ecotel.net)
[14:21:04] *** Joins: jonathanx (~jonathan@dyn-2-sc.cdg.chalmers.se)
[14:21:23] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[14:23:05] <int-e> dminuoso: this is kind of horrible, but perhaps the least invasive approach with respect to exception handling would be to track how far you've progressed in a mutable variable (IOVar)?
[14:23:57] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Client Quit)
[14:25:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[14:25:55] <dminuoso> int-e: Mmm, that seems a bit overkill too
[14:25:57] <dminuoso> https://gist.github.com/dminuoso/66872130a9312fb7106afc1662c90124
[14:26:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:26:11] <dminuoso> So this is quickly written sketch (not tested yet, might be typos in there)
[14:26:13] <dminuoso> of my intent
[14:29:01] <dminuoso> Guess the surprising thing is that all our exception recovery join the branches back together
[14:29:21] <dminuoso> both the exception and happy branch 
[14:29:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 250 seconds)
[14:30:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:31:24] <int-e> except when the exception is rethrown (which a bunch of things actually do)
[14:32:28] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:25b5:2708:65a9:4e7d) (Quit: gone to sleep. ZZZzzz…)
[14:34:22] <vpan> https://cabal.readthedocs.io/en/3.6/intro.html#similar-systems says there are 5000 packages on hackage, while https://hackage.haskell.org/packages/browse reports 16248. Assuming 16k is the correct number of packages currently on hackage, 3x looks like a significant understatement. Should this be fixed or am I the only one bothered by that? :)
[14:35:07] *** Joins: Pickchea (~private@user/pickchea)
[14:38:51] *** Quits: phma (~phma@host-67-44-209-94.hnremote.net) (Read error: Connection reset by peer)
[14:40:02] *** Joins: phma (phma@2001:5b0:2172:c188:a9eb:c095:74b0:11cc)
[14:40:05] <int-e> % :t let f a h e = join (fmap h a `catch` (fmap pure . e)) in f
[14:40:05] <yahb> int-e: Exception e => IO a1 -> (a1 -> IO a2) -> (e -> IO a2) -> IO a2
[14:41:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[14:42:01] <int-e> dminuoso: ^^ no clue whether this is better in any objective way, but it's free of Either
[14:42:43] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:46:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[14:46:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:48:53] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[14:50:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[14:54:07] *** Joins: __monty__ (~toonn@user/toonn)
[14:54:52] *** Joins: k60``` (~user@94.25.169.9)
[14:59:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[15:04:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95) (Ping timeout: 268 seconds)
[15:04:19] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:08:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[15:09:02] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[15:11:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[15:12:08] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[15:14:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[15:15:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:37] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[15:18:24] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[15:27:18] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:31:32] *** Quits: jonathanx (~jonathan@dyn-2-sc.cdg.chalmers.se) (Ping timeout: 240 seconds)
[15:32:45] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[15:33:10] *** Joins: __monty__ (~toonn@user/toonn)
[15:39:09] *** Quits: sweater (~sweater@206.81.18.26) (Remote host closed the connection)
[15:39:29] *** Joins: sweater (~sweater@206.81.18.26)
[15:42:54] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[15:43:48] *** Quits: sweater (~sweater@206.81.18.26) (Client Quit)
[15:43:59] *** Joins: sweater (~sweater@206.81.18.26)
[15:44:29] *** Quits: sweater (~sweater@206.81.18.26) (Client Quit)
[15:44:42] *** Joins: sweater (~sweater@206.81.18.26)
[15:48:47] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[15:50:23] *** Joins: alx741 (~alx741@186.178.108.192)
[15:51:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:52:25] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[15:57:52] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[16:01:52] *** Joins: xkuru (~xkuru@user/xkuru)
[16:06:23] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:06:44] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[16:07:51] *** Quits: alx741 (~alx741@186.178.108.192) (Ping timeout: 252 seconds)
[16:10:53] *** Quits: k60``` (~user@94.25.169.9) (Ping timeout: 268 seconds)
[16:11:53] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[16:17:37] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Quit: Client closed)
[16:18:48] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[16:23:15] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 252 seconds)
[16:23:46] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[16:23:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:30:26] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:31:11] *** Joins: genieliu (~genieliu@111.193.167.10)
[16:32:10] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:33:13] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 250 seconds)
[16:36:37] *** Joins: xkuru (~xkuru@user/xkuru)
[16:38:38] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:d5b4:3c9d:ec95:16b3) (Ping timeout: 268 seconds)
[16:39:01] *** Quits: genieliu (~genieliu@111.193.167.10) (Ping timeout: 252 seconds)
[16:39:16] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[16:39:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:40:05] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 265 seconds)
[16:41:59] *** Joins: genieliu (~genieliu@111.193.167.10)
[16:44:06] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:45:05] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:d5b4:3c9d:ec95:16b3)
[16:47:18] *** Joins: k60``` (~user@94.25.169.9)
[16:47:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:49:36] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:51:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[16:53:28] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[16:54:18] <dminuoso> int-e: You were absolutely right. My head was stuck in CPS.
[16:54:21] <dminuoso> For no good reason.
[16:54:38] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:54:57] <dminuoso> All I needed was `getManifest :: Int -> IO Manifest; getManifest pid = handle noSuchFile ...`
[16:55:06] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[16:58:46] *** Quits: deadmarshal (~deadmarsh@95.38.116.82) (Ping timeout: 260 seconds)
[17:01:35] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[17:01:38] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:e582:2d42:b0b2:720b)
[17:03:09] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[17:03:11] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[17:07:44] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[17:08:30] *** Joins: alx741 (~alx741@186.178.108.192)
[17:08:35] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[17:09:50] *** Joins: deadmarshal (~deadmarsh@95.38.116.82)
[17:10:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:10:56] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:10:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:17:08] *** Quits: genieliu (~genieliu@111.193.167.10) (Quit: Lost terminal)
[17:17:09] *** Joins: jakalx (~jakalx@base.jakalx.net)
[17:17:45] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[17:18:11] *** Joins: sluigi (~sluigi@18.31.9.184)
[17:19:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:21:26] <raehik> What's the difference between Proxy# and Proxy? I know of the words "boxing/unboxing", but I don't really know what they mean
[17:21:42] <raehik> I can see that Proxy# is more like Void, it can't be constructed on the Value level
[17:22:31] *** Joins: cosimone` (~user@93-47-230-227.ip115.fastwebnet.it)
[17:22:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[17:24:01] *** Joins: max22- (~maxime@2a01cb0883359800d7eef028cd7b4d10.ipv6.abo.wanadoo.fr)
[17:26:59] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[17:27:43] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com)
[17:27:58] <timCF> Hello! Does anyone know what's the purpose of irrefutable patterns in Haskell? I think I do understand how it works, but I don't understand why it's needed and what are good use cases for this
[17:28:38] *** Quits: max22- (~maxime@2a01cb0883359800d7eef028cd7b4d10.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[17:31:05] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:31:58] *** Quits: sluigi (~sluigi@18.31.9.184) (Ping timeout: 256 seconds)
[17:32:54] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-0007.res6.spectrum.com) (Ping timeout: 268 seconds)
[17:33:07] *** Quits: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[17:33:34] <boxscape> raehik: proxy# is a value of type Proxy#. It's just an alternative to Proxy that has zero runtime cost
[17:33:59] <geekosaur> timCF, they're lazy patterns instead of strict
[17:34:02] *** Joins: emf (~emf@2620:10d:c091:480::1:ff4b)
[17:34:40] <timCF> geekosaur: I thought data and functions in Haskell are lazy by default anyway?
[17:35:10] <timCF> I mean not only functions, any expressions (like pattern matching)
[17:36:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[17:36:09] <geekosaur> pattern matching is strict by default at top level (but not in let). *something* has to be strict or no evaluation would ever happen at all
[17:36:33] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bc2d:ca62:1f76:4faa)
[17:36:40] <boxscape> e.g. `f (x, y) = ()` is strict in its argument, i.e. if `x` is bottom, then so is `f x`.
[17:37:02] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e96496b0bacdae081f8.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:37:26] <timCF> got it, thanks!
[17:38:12] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:40:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Ping timeout: 252 seconds)
[17:42:39] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[17:44:12] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[17:45:41] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[17:48:04] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:49:30] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 250 seconds)
[17:53:23] *** Joins: ub1 (~Thunderbi@p548c998b.dip0.t-ipconnect.de)
[17:53:24] *** Joins: ubert1 (~Thunderbi@p200300ecdf1abb7bed76e28c4fd34537.dip0.t-ipconnect.de)
[17:53:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[17:54:46] *** Quits: ub (~Thunderbi@p200300ecdf0ba2c0b11d357caa48ef17.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:55:14] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2c03cbcafca2ab2631d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:55:14] *** ub1 is now known as ubert
[18:01:31] *** Joins: neverfindme (~hayden@158.123.160.43)
[18:04:37] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:04:37] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[18:06:40] *** Quits: chele (~chele@user/chele) (Quit: Leaving)
[18:08:52] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[18:09:22] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[18:10:05] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[18:13:22] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:13:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[18:18:16] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[18:20:32] *** Quits: vpan (~0@212.117.1.172) (Ping timeout: 240 seconds)
[18:25:42] *** Joins: max22- (~maxime@2a01cb0883359800942e2037ffd67664.ipv6.abo.wanadoo.fr)
[18:31:22] *** Quits: Jing (~hedgehog@2604:a840:3::1001) (Remote host closed the connection)
[18:31:24] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[18:31:25] *** Joins: maplike (~maplike@31.209.100.216)
[18:31:42] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:9c45:ef7f:f3cf:1dd6) (Quit: WeeChat 2.8)
[18:31:57] *** Joins: Jing (~hedgehog@2604:a840:3::1001)
[18:34:26] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19) (Quit: gone to sleep. ZZZzzz…)
[18:35:56] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:36:54] *** Joins: xsperry (~xs@user/xsperry)
[18:38:11] *** Joins: mimmy (~mimmy@184.94.118.194)
[18:38:57] <raehik> boxscape: sry for delay, thank you. I will keep it in mind when I need to do type ferrying from now, I only knew about Proxy
[18:39:05] <maplike> can someone show a canonical or just concise (very short yet illustrative) example, that is not _factorial_, of first solving with corecursion/recursion, then ana/cata and then hylo?
[18:40:02] *** Quits: alx741 (~alx741@186.178.108.192) (Ping timeout: 260 seconds)
[18:44:24] <xerox> is there a cabal command to list all possible targets?
[18:45:09] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[18:47:01] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:51:35] <yushyin> something like that would be nice, but there is a target syntax for specific modules/files and listing _all_ wouldn't be that useful i guess?
[18:52:57] *** Joins: alx741 (~alx741@186.178.109.174)
[18:54:01] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:54:32] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[18:56:48] *** nickdaly-away is now known as nickdaly
[18:56:53] *** Quits: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de) (Quit: Leaving)
[18:57:44] *** Joins: fr33domlover (~fr33@2.55.41.192)
[18:58:14] *** Quits: alx741 (~alx741@186.178.109.174) (Ping timeout: 260 seconds)
[18:58:29] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:01:02] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:01:42] *** Quits: EvanR (~evan@user/evanr) (Remote host closed the connection)
[19:01:59] *** Joins: EvanR (~evan@2600:1700:ba69:10:1e6b:60f7:fab1:30bf)
[19:02:18] *** Quits: EvanR (~evan@2600:1700:ba69:10:1e6b:60f7:fab1:30bf) (Changing host)
[19:02:18] *** Joins: EvanR (~evan@user/evanr)
[19:02:43] *** Joins: mimmy_ (~mimmy@66.115.145.34)
[19:03:07] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9808:86a6:acca:9c5) (Ping timeout: 252 seconds)
[19:03:32] *** Quits: mimmy (~mimmy@184.94.118.194) (Ping timeout: 240 seconds)
[19:04:39] *** Joins: Guest|14 (~Guest|14@201-43-221-14.dsl.telesp.net.br)
[19:04:49] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[19:04:54] *** Quits: Guest|14 (~Guest|14@201-43-221-14.dsl.telesp.net.br) (Client Quit)
[19:05:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f0cf:5664:8ee5:8e87)
[19:07:43] *** Quits: mimmy_ (~mimmy@66.115.145.34) (Ping timeout: 250 seconds)
[19:09:02] *** Joins: mimmy_ (~mimmy@184.94.118.194)
[19:10:48] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[19:11:51] *** Joins: alx741 (~alx741@157.100.93.160)
[19:11:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:15:40] <boxscape> raehik: there's also something to be said about using `proxy a` instead of either `Proxy a` or `Proxy# a` - that allows the caller of the function to supply any (lifted) type. You lose out on the zero runtime cost though (unless you introduce levity polymorphism I think... but that's probably not worth it)
[19:18:19] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 250 seconds)
[19:19:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[19:21:26] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:21:26] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[19:21:43] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:29:20] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[19:29:48] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:30:14] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[19:33:09] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[19:35:35] <oats> https://www.youtube.com/watch?v=nY1BCv3xn24
[19:35:42] <oats> this is a really fascinating talk
[19:44:23] <oats> I don't think I've ever seen a non-fascinating talk from George Wilson
[19:44:38] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[19:49:10] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 256 seconds)
[19:49:14] <timCF> Hello! I'm leaning "singletons" design patterns from tutorial made by jle` where he is using a lot of "strange" syntax like `data Door :: DoorState -> Type where; UnsafeMkDoor :: { doorMaterial :: String } -> Door s` in examples. I'm thinking what's the point of using "data" expression where clearly could be used parametrized "newtype" which is more efficient for free, optimized by GHC (I guess) and have 
[19:49:20] <timCF> free stuff like "coerce"?
[19:50:07] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:50:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:50:59] *** Joins: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[19:52:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:52:58] *** Quits: ubert1 (~Thunderbi@p200300ecdf1abb7bed76e28c4fd34537.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:53:59] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:56:59] <geekosaur> GADTs are not normal "data" types
[19:58:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Remote host closed the connection)
[19:58:22] <geekosaur> in particular, that describes a type which is "tagged" by a type "s"
[19:58:50] <geekosaur> (I think you could do that particular case with a non-GADT, but it would still need to be a "data" to accomplish that tagging)
[19:59:26] <timCF> geekosaur: I mean why not `newtype Door (a :: DoorState) = Door String`?
[19:59:36] <geekosaur> and part of the point of the tagging is you do not want to simply coerce values
[19:59:49] <geekosaur> it's not a Door String, it's a Door DoorState
[19:59:54] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:7701:94ac:10aa:c878)
[20:00:25] <timCF> geekosaur: and then in somewhere in code `let door = Door @'Open "Oak"`
[20:00:31] <geekosaur> and you do *not* want to be able to cheaply coerce to different DoorState values, since the point of DoorState is to keep you from changing the state under the wrong conditions
[20:00:51] <geekosaur> jle`'s stuff should explain this, I've been through it a few times
[20:01:31] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[20:02:06] <geekosaur> I'm not great with type level stuff but the DoorState examples at least made sense to me
[20:04:46] <timCF> geekosaur: Yes, examples totally make sense, I'm just trying to understand reasoning behind of using "data" instead of "newtype" in examples. Newtypes also could have phantom type and kind parameters like data.
[20:06:01] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[20:08:10] <geekosaur> usually you have more than one parameter
[20:08:53] <geekosaur> and you keep showing simpler ways to do things. but the whole point of this is to *not* be simple, but to force you to jump through the right hoops that maintain invariants
[20:09:25] <geekosaur> you wouldn't need to do this with type level stuff at all otherwise
[20:13:12] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:13:53] *** Quits: oats (~thomas@user/oats) (Quit: until later, my friends)
[20:14:09] <timCF> I guess, I have to try stuff like `newtype Door (a :: DoorState) = UnsafeMkDoor { doorMaterial :: String }` instead of similar "data" expression and see why it's not working on actual examples
[20:14:35] *** Joins: oats (~thomas@user/oats)
[20:15:39] <timCF> If it's even there is "coerce" for newtypes - I just don't use it, and use proper type-level computations instead, not sure will it be any difference then
[20:17:03] *** Quits: cosimone` (~user@93-47-230-227.ip115.fastwebnet.it) (Ping timeout: 250 seconds)
[20:17:18] *** Joins: smartin (~Thunderbi@88.135.18.171)
[20:17:30] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:17:45] *** Quits: oats (~thomas@user/oats) (Client Quit)
[20:18:03] *** Joins: oats (~thomas@user/oats)
[20:20:45] *** Quits: oats (~thomas@user/oats) (Client Quit)
[20:21:14] *** Joins: oats (~thomas@user/oats)
[20:21:28] *** Quits: oats (~thomas@user/oats) (Remote host closed the connection)
[20:21:51] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[20:21:52] *** Joins: oats (~thomas@user/oats)
[20:23:11] *** Quits: oats (~thomas@user/oats) (Client Quit)
[20:24:10] <Franciman> see you!
[20:24:12] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.3)
[20:24:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:25:57] *** Joins: oats (~thomas@user/oats)
[20:26:48] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[20:27:04] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:29:10] <oats> https://nitter.net/GabriellaG439/status/1465908026662010882
[20:31:07] *** Quits: emf (~emf@2620:10d:c091:480::1:ff4b) (Ping timeout: 252 seconds)
[20:31:17] <geekosaur> timCF, if it lets you openj a door without unlocking it first, it's failing to maintain the invariant in jle`'s example
[20:31:48] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[20:34:02] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[20:34:11] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[20:34:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:36:00] <jle`> timCF: i don't think in this case there's any reason to not use a newtype in this case, it's not really a GADT, it's just using GADT syntax
[20:36:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:36:52] <jle`> timCF: i think the idea was to be more "general", in many real cases you might have more than one field
[20:37:52] <timCF> geekosaur: jle`: thanks for reply! Yes, I'm using product types for sure, but 50% of my types are usually just newtypes, which I want to continue to use with singletons as well.
[20:38:41] <geekosaur> I mentioned the multiple fields thing earlier
[20:38:57] <jle`> yup yeah, there is no reason to use data over newtype in that case. i think maybe i originally wrote the tutorial with a data type with multiple fields and removed a field to simplify it
[20:39:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[20:41:01] <sprout> https://github.com/egel-lang/aoc-2021/blob/main/day10/task2.eg <- day 10 task 2 of advent of code in egel
[20:42:05] <timCF> jle`: thanks for tutorial as well! I've used phantom kind parameters for a while, but always had a trouble in lifting/unlifting stuff between type, kind and value levels.. Usually used type class approach, but it's very ugly to use
[20:42:45] <jle`> np!
[20:43:19] <jle`> i think i have to update the tutorial for the major version bump of singletons that happened last year
[20:43:31] <jle`> where Sing is now an injective type family instead of a data family
[20:43:39] <jle`> two years ago?
[20:43:58] <jle`> the ecosystem marches on
[20:44:42] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Remote host closed the connection)
[20:46:58] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[20:47:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[20:47:50] *** Quits: phma (phma@2001:5b0:2172:c188:a9eb:c095:74b0:11cc) (Read error: Connection reset by peer)
[20:47:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[20:48:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[20:49:15] *** Joins: phma (phma@2001:5b0:210f:6be8:16f7:aafd:70ba:5696)
[20:49:39] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[20:51:03] *** Joins: Pickchea (~private@user/pickchea)
[20:52:28] *** Quits: alx741 (~alx741@157.100.93.160) (Quit: alx741)
[20:53:38] *** Joins: alx741 (~alx741@181.199.42.79)
[20:54:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:57:38] *** Quits: xff0x (~xff0x@2001:1a81:537e:3f00:d5b4:3c9d:ec95:16b3) (Ping timeout: 268 seconds)
[20:57:48] *** Quits: k60``` (~user@94.25.169.9) (Remote host closed the connection)
[20:58:04] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:7701:94ac:10aa:c878) (Quit: WeeChat 2.8)
[20:58:25] *** Joins: xff0x (~xff0x@2001:1a81:537e:3f00:6b1a:2a67:475e:9b5f)
[20:59:05] *** Joins: k60``` (~user@static.100.218.46.78.clients.your-server.de)
[21:00:07] *** Joins: nvmd (~nvmd@user/nvmd)
[21:02:23] *** Quits: Guest66 (~textual@98.13.6.21) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:02:58] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:04:22] *** Joins: Guest66 (~textual@98.13.6.21)
[21:05:07] *** Quits: Guest66 (~textual@98.13.6.21) (Client Quit)
[21:06:13] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 240 seconds)
[21:07:07] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:07:07] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:07:07] *** Joins: turlando (~turlando@user/turlando)
[21:07:30] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:08:27] <dsal> This code is very satisfying:   repair chunk = fix missing ""
[21:09:50] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:10:26] <monochrom> hahaha nice
[21:10:28] <xerox> how'd you coerce fix into that
[21:11:04] <dsal> It's just regular fix.
[21:11:13] <geekosaur> > fix _ ""
[21:11:16] <lambdabot>  error:
[21:11:16] <lambdabot>      • Found hole: _ :: ([Char] -> t) -> [Char] -> t
[21:11:16] <lambdabot>        Where: ‘t’ is a rigid type variable bound by
[21:11:25] <xerox> I mean into doing your bidding
[21:11:35] <monochrom> Convert your vanilla recursive function into using fix.
[21:11:39] <dsal> Missing tries to parse the input and if it fails, the error says what was missing and it shoves it in there.
[21:12:37] <dsal> It's not better or worse in this particular situation.  It just reads nicely.
[21:13:00] <xerox> alright, just getting the recursive call as an arg
[21:13:08] <xerox> it does read awfully nice
[21:13:19] <dsal> I just couldn't have something called repair that didn't call fix.
[21:13:38] <EvanR> wreck-it ralph would be proud
[21:14:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:18:12] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:18:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Remote host closed the connection)
[21:19:15] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[21:20:29] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[21:24:37] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[21:28:48] *** Joins: econo (uid147250@user/econo)
[21:29:21] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[21:35:29] *** Quits: fr33domlover (~fr33@2.55.41.192) (Ping timeout: 250 seconds)
[21:35:52] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[21:39:26] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:40:34] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[21:41:41] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[21:41:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:45:20] *** Joins: Akiva (~Akiva@user/Akiva)
[21:46:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:50:14] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:50:21] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 245 seconds)
[21:51:41] <sprout> dsal: +1
[21:55:09] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[21:59:46] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[22:01:46] *** Quits: mimmy_ (~mimmy@184.94.118.194) (Ping timeout: 268 seconds)
[22:04:43] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[22:09:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[22:10:11] *** Quits: Megant (megant@user/megant) (Ping timeout: 256 seconds)
[22:10:54] *** Joins: mimmy_ (~mimmy@184.94.118.194)
[22:11:37] *** Joins: Megant (megant@user/megant)
[22:19:15] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 250 seconds)
[22:21:51] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[22:23:19] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[22:23:44] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:31:21] *** Joins: emf (~emf@2620:10d:c091:480::1:a9a4)
[22:31:51] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[22:33:14] *** Quits: max22- (~maxime@2a01cb0883359800942e2037ffd67664.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:33:37] <xerox> @src foldM
[22:33:37] <lambdabot> foldM _ a []     = return a
[22:33:37] <lambdabot> foldM f a (x:xs) = f a x >>= \fax -> foldM f fax xs
[22:34:00] <xerox> still using fax'es
[22:36:38] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[22:38:20] <sshine> heh
[22:38:21] <sshine> what?
[22:38:38] <sshine> oh.
[22:39:09] <monochrom> Want me to fax you a category theory paper? Just tell me your phone number! >:)
[22:41:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:43:46] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:44:17] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[22:45:21] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:46:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:54:34] *** Joins: darkstarx (~darkstard@50.39.115.145)
[22:55:40] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[22:56:03] *** Joins: darkstarx (~darkstard@50.39.115.145)
[22:56:05] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:57:13] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:57:30] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[23:01:36] *** Quits: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Remote host closed the connection)
[23:07:37] *** Joins: pfurla (~pfurla@201.17.118.230)
[23:13:46] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:17:30] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[23:18:10] *** Joins: beka (~beka@104.193.170.240)
[23:19:37] *** Joins: max22- (~maxime@2a01cb0883359800b0bf91f12c0fefae.ipv6.abo.wanadoo.fr)
[23:20:12] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:22:09] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[23:25:17] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:29:21] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 268 seconds)
[23:29:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:31:45] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:34:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[23:35:30] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 268 seconds)
[23:36:11] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:37:15] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:15] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[23:38:00] *** Joins: alx741 (~alx741@157.100.93.160)
[23:40:53] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:44:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:45:23] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[23:47:29] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[23:47:58] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[23:49:54] *** Quits: mimmy_ (~mimmy@184.94.118.194) (Ping timeout: 260 seconds)
[23:50:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:51:08] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:654d:199b:4253:3c19)
[23:53:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26) (Remote host closed the connection)
[23:58:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f80d:43f5:ddf4:fb26)
[23:58:35] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
