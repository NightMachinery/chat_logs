[00:07:57] *** Joins: Pythayr (~pither195@64.42.181.51)
[00:08:44] *** Quits: Pythayr (~pither195@64.42.181.51) (Read error: Connection reset by peer)
[00:10:41] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[00:11:48] *** Joins: ivii (~ivan@user/ivii)
[00:12:11] *** Joins: Pythayr (~pither195@64.42.181.51)
[00:17:59] <TimMc> I hope that works, because that's what I was planning on doing.
[00:25:49] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:26:37] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[00:32:55] <maroon> for the openssl mod-exp bug link above, i cant find other details on openssl's site about it, is there a test vector for a DH key that gets calculated wrong?
[00:34:00] <joe7057> I would assume it does as long as you do it far enough in advance that the new, longer keys become the commonly used one before the shorter one is actually insecure.
[00:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:38:44] <caveman> Alipha: i've been thinking about your suggestion (merkle trees).  should all transactions be sorted by `wallet_id.wallet_timestamp'?  because, one problem that might be bothering is that if people use the tree's root as an anchor to prove their transactions, then slightly out-of-sync people won't be able to prove their transactions, because the root will change too fast (7000 times per second, if
[00:38:46] <caveman> this cryptocurrency replaces VISA).
[00:39:39] *** Quits: pergaminho (~pergaminh@user/pergaminho) ()
[00:40:45] <caveman> but, if transactions are sorted in that order, then there will be parts of the tree that don't change often, and if we go deep enough we will see parts that only change if a wallet makes a transaction.
[00:40:52] <joe7057> caveman: scaling is a very common issue with cryptocurrencies. Bitcoin has it with block size.
[00:41:02] <joe7057> as well as the coin limit
[00:41:19] <caveman> coin limit?
[00:41:33] <Alipha> caveman: I would think that if you wanted to verify transactions, you would keep track of all blocks created in a small timeframe
[00:42:21] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[00:43:25] <caveman> so, the ledger is not only showing the latest state, but the n-past ledger states, where n is deep enough to tolerate those who are slightly out of sync?
[00:43:30] *** Joins: ivii (~ivan@user/ivii)
[00:43:30] <Alipha> caveman: also, I realized that using a merkle tree to point to your account balance in a specific block as proof of your balance is flawed because your balance may have changed in a newer block.
[00:43:43] <Alipha> Yes
[00:46:45] <Alipha> Also, I'm curious how you intend to get 7000 transactions/sec
[00:47:24] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[00:48:56] <rk4> with whips, massive massive whips
[00:52:52] <caveman> Alipha: so far my thought is this:  let people send each other money, without waiting for confirmations.  instead, let there be 'wallet endorsers' that have big-enough security deposits (e.g. 500k usd?) for long-enough periods (1 year?) and long enough notice period (1 year?).  then, if a person wants to get his payments accepted, he will have to get an endorser for his wallet.  then it's the job
[00:52:53] <caveman> of endorsers to persuade people to not cheat, similar to how governments persuade people to not counterfeit fiats, except that this cryptocurrency does not allow for printing new money (a key problem we dislike about central banks).
[00:54:28] <caveman> the parameters for the security deposits are negotiated by supply/demand by people (not hardcoded in the algorithm).  e.g. endorsers will not good enough deposit parameters will not make get people asking them to endorse them, because their deposits are not strong enough to persuade others to accept their payments.
[00:56:19] <caveman> the endorsers are needed only until the transactions make it into the global ledger.  once transactions are in the ledger, money is is not going to run away, and a person is sure about his balance.  the endorsers help to offer confidence for transactions for the initial phase where the transaction is still not into the master ledger yet.
[00:58:38] <caveman> oh, and my other thought to avoid a too-massive ledger is this:  the ledger will only have some top hashes as 'proof anchors'.  then, it's the job of the wallet owner to hold proofs that link his money from 'genesis' until the proof anchors in the ledger.  so the ledger is not responsible to hold the proofs.
[00:58:49] <Alipha> and the incentive for someone to endorse is... they get a cut of each transaction they endorse? and the incentive for someone who is endorsed to not over-spend is... they lose their endorsement? 
[01:00:57] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[01:01:09] <caveman> yes.  endorsement fees is an option.  the endorser can have his own endorsement contracts out of the cryptocurrency too.  e.g. he can say ``give me a gold security deposit for me to trust you''.  he can also say ``and for every transaction that you use me as an endorser, you should pay me X coins''.  the endorsements will have activation/termination conditions.
[01:02:20] <caveman> the incentive for the person to not over-spend is possibly not to lose their endorsement, but also possibly to not lose other things, such as whatever he agreed with the endorser (e.g. if he deposited physical things to him).  another incentive is:  keeping an ethical wallet surviving long enough is good for him to pave his path to become a reliable wallet, which may allow him one day to be used as
[01:02:21] <caveman> a trusty endorser (means he can sell endorsement/banking services).
[01:02:52] <halosghost> so
[01:03:04] <halosghost> this is probably partly why cryptocurrency talk is considered off-topic here
[01:03:10] <halosghost> because it has a tendency to take over ☺
[01:03:19] <halosghost> though, I will say that I've found the discussion somewhat interesting
[01:03:22] <caveman> Alipha: not sure how good the idea is.  but my intuition is:  can we use game theory to allow for postponing solving the double-spending problem?
[01:05:23] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[01:05:28] <caveman> halosghost: imo, not all cryptocurrency talk is off-topic to cryptography.  e.g. cryptocurrency papers get published in cryptography journals for a reason.  it's just that cryptography is awesome that it allows for solving many problems, such as trust, money, etc.
[01:06:15] *** Joins: ivii (~ivan@user/ivii)
[01:07:13] <Alipha> well, this endorsement concept is more of a social issue rather than a cryptographical one, so i'm not sure how much of the current conversation is on-topic. the discussion of merkle trees and their use i would call on-topic though.
[01:08:14] <Alipha> and not to say caveman's security deposit and endorsement idea isn't workable, but i'm not a huge fan of the concept, so i don't really have any input into it, other than just saying i don't like it, heh.
[01:09:35] <joe7057> Alipa: true. I suppose it would be if the issue were how to prove the endorsement though. But obviously the answer is signatures, so not really a complex issue.
[01:11:46] <Alipha> as far as a cryptocurrency that is truly decentralized, can handle high volume, and in theory could provide real-time confirmation of transactions, i'm really bullish on the technology behind Zilliqa, and i'm sadden that it seems to have mostly flopped.
[01:12:17] <MacGyver> So to use game theory to "solve" double spending, what you do is, you make double-spending *so* costly for the double-spender that they're ruined if they get caught. You could, for example, take away all their money. Maybe even isolate them from society together with other people who have done the same thing.
[01:12:24] <MacGyver> We can have a nifty name for it.
[01:12:41] <MacGyver> I like the sound "dzjale" makes.
[01:12:56] <caveman> Alipha: yeah.  it's an annoying approach, mainly because i forgot to clarify a few other points.  the answer that i gave you was about the aspect concerning functionality without needing internet (i.e. mobile ad-hoc networks).  the other aspect, when we have fast-enough internet is to use proof-of-stake, but i still didn't dig into the details yet on how to achieve consensus fast yet..
[01:13:19] <MacGyver> Alipha: I find myself disagreeing with the *premisse* too much to engage at any serious technical level.
[01:15:10] <caveman> when we don't have internet, or any established network infrastructure, it would be neat if we could have a cryptocurrency where people pay to each other by using their mobile devices via, say, bluetooth/nfc/direct-wifi/usb cable/usb stick/etc.  such networks may have large delays, such as weeks, months, or even years, and this will need an endorsement infrastructure.  but, for the normal case when
[01:15:11] <caveman> we have the internet, we can ignore endorsers altogether since we can wait a few seconds to get the confirmations.
[01:15:44] <rk4> i think if there could be more to having cryptocurrency excluded from here. cryptography is a respectable and empirically useful field, cryptocurrency is neither of those things, but i concede it's possible that one day it might move beyond it's current state of waste of resources || scams
[01:17:36] <caveman> rk4: i think today's cryptocurrencies are not currencies at all.  more like cryptogambling or cryptomining.  because of their terrible speed and/or because of their terrible space scalability, they cannot be used to replace fiat.
[01:18:53] <caveman> e.g. while people look at bitcoin as a success, i think most of them forget that bitcoin is a massive failure as a currency.  it only succeeded to be a cryptographic 'mineral' to mine, or a gambling game.
[01:19:44] <caveman> these issues were known from the beginning.  iirc the 1st reply to bitcoin's email in the mailing list was pointing out the scalability issues.
[01:19:54] <caveman> bitcoin's email = satoshi's email.
[01:20:50] *** Quits: deusexbeer (~hedeo@37-146-227-150.broadband.corbina.ru) (Quit: Konversation terminated!)
[01:21:08] <rk4> so i presume...at the moment, you're seeking to make a useful cryptocurrency?
[01:21:16] <MacGyver> And bitcoin isn't even in its by-design deflationary stage yet, can you imagine what it'll be like in 120 years.
[01:21:47] <caveman> rk4: yeah.  or just make a cryptocurrency.  because today's cryptocurrencies are -imo- not cryptocurrencies but rather 'cryptominerals'.
[01:21:51] <MacGyver> If you actually want to make a usable *currency*, you may want to look up what "printing money" actually is. And why that's not a bug.
[01:23:31] <caveman> true.  printing money is not a bug.  right amount of printing can be even healthy for economical growth.
[01:23:46] <rk4> the thing is...which is a tad unfortunate...culturally cryptography is strongly adverse to snake oil, after we had a pile of bespoke ciphers. conversations about new cryptocurrencies all fall into the new snake oil bucket for me 
[01:24:44] <rk4> and i think to date it's been 100% snake oil, so excluding cryptocurrency from the channel...might be sensible
[01:25:53] <caveman> i agree.  but i'd rather call them ``early experiments to define cryptocurrency''.  imo calling every failing experiment ``snake oil'' is possibly unfair, as we don't know their intentions.  logically, i think the intentions of the popular cryptocurrencies are honest.  
[01:26:13] <Alipha> minus dogecoin ;-)
[01:26:39] <caveman> lel.
[01:27:28] <Alipha> and i think the technology can be interesting and can be appropriate for discussion here... as i'm still thinking about using merkle trees to enable "stateless" mining
[01:28:45] *** Quits: Tykling (~tykling@irc.tyknet.dk) (Quit: leaving)
[01:30:07] <Alipha> which, i think i have a working solution in my head... but it has the problem that then the burden is on the users who wish to transact to be able to provide a correct merkle tree proof of their account balance, which would involve knowing the complete history between now and the last time they transacted.
[01:31:17] <Alipha> (and block history between now and the recipient's last transaction)
[01:32:16] <caveman> my latest thought is this:  today's ``block chains'' have a flaw in that they offer 2 features:  (1) the latest state, and (2) the proof for every wallet's balance.  i think we must decouple the two, such that point (2) becomes the a responsibility of the person owning the money.  e.g. if i own some money, it's my responsibility to store the proofs for my money.
[01:32:17] <caveman> then, eventually over time, as people will share common history roots, people may not need to prove all the way since the genesis transaction.  e.g. i may store full proof in a chest in my home as backup, but keep only a short proof in my mobile devices for the past 1 or 2 years to pay people as i shop, because almost everyone is at least sync-ed since 1 or 2 years.
[01:32:52] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:ac63:f3f7:89ad:2997)
[01:33:27] <caveman> ideally (space-wise) the ledger must be the hash of the merkle root only.  and people who spend their coins, supply the proof their coins relative to a common-agreed branch, that eventually allows full linkage between the genesis hash, until the root hash.
[01:36:18] <Alipha> the fundamental issue here though is that any proof that is stored may not be current. i can give you a proof that i had $100 last week and conveniently neglect the fact that i spent $90 yesterday
[01:36:21] <caveman> ^ space-wise for the ledger.  but not sure how good is this for money spenders (how big will their proofs become?)
[01:36:32] <Alipha> which is the issue with offline proofs
[01:37:26] <Alipha> which i realize is what you're trying to solve with endorsements
[01:39:40] <caveman> yeah.  assuming that your proof links to a ledger state that is 1 day old, then it's a proof until yesterday only.
[01:40:10] <maroon> wow, taylor swift endorsed this guy, he must be honest
[01:44:45] *** Joins: tykling (~tykling@irc.tyknet.dk)
[01:44:47] <caveman> maroon: depends on the endorser's reputation.  e.g. if an endorser has a bad reputation, people will not buy endorsement services from him, so he will be out of business.  a historically successful endorser is probably going to do something clever to persuade people to not cheat/double-spend based on whatever works for them in the region.  e.g. some may use legal contracts to sell their properties.
[01:45:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:45:58] <maroon> there needs to be a defense against "all i need is 1 big score"
[01:46:09] <caveman> but the idea of needing an endorser is not pleasant, and i plan it to be used only when we don't have internet at all, such as in a ww3-like scenario.  but generally, when we have an internet connection, it's better to just make the protocol fast to obtain confirmations within a few seconds, so that endorsements are not needed.  endorsements are needed only when confirmations delay for long times.
[01:51:09] <maroon> and a defense against the endorser claiming 'i was hacked'
[01:51:28] <maroon> i.e. the standard claim anytime someone says something dumb on twitter
[01:51:49] <caveman> <Alipha> caveman: also, I realized that using a merkle tree to point to your account balance in a specific block as proof of your balance is flawed because your balance may have changed in a newer block.    <---    what if everything is just 1 big fat block?   
[01:51:51] <caveman> e.g. all transactions are flatly laid down and sorted by `wallet_pk.wallet_timestamp`?   i guess this way, all proofs will have log2(n) complexity, where n is total number of transactions in the world.  
[01:52:26] <ivii> Is it a good time to buy the dip?
[01:53:00] <caveman> ivii: ##altcoins for non-cryto aspects.
[01:53:14] <caveman> non-crypto*
[01:56:38] <Alipha> caveman: yeah, my new thought i hadn't explained yet was more or less that. but not lay out the transactions, but simply the wallets and current wallet balances
[01:58:56] <caveman> one of my latest thoughts about such current balances, is:  why not only simply put the latest hash?  i.e. without the balance.  then, as i prove my balance to someone, he will learn it as it computes to that hash.  this way, the ledger will be even smaller, plus i won't have my balance needlessly exposed.
[02:00:21] <caveman> a question about your idea:  do you mean that a merkle tree will be made by the wallet owner, and the ledger will be a merkle tree on the latest hash/state over all wallets?
[02:03:18] <caveman> err, to rephrase:  a wallet owner makes a merkle tree to hash his own transactions, to obtain the hash of his wallet's latest state.  then, the ledger builds a merkle tree on those latest wallet state hashes.
[02:04:45] <caveman> one optimisation idea i'm exploring is:  if a wallet reaches balance zero, the public ledger should delete its entry instead of putting the new state hash (which was produced when balance became 0).
[02:06:20] <caveman> as for double-spending, i am thinking:  why not record double-spending as a negative balance (i.e. debt)?  such negative balance will indicate bad behaviour of wallets, and will also allow us to use their endorsers (if any) to automatically pay such debts as per their endorsement contract.
[02:10:30] <ms7821> maybe you should explore these ideas in a blockchain forum or something
[02:12:16] <ivii> blockchain uses cryptography
[02:12:20] <ivii> deal with it
[02:12:41] <ms7821> yes, but interminable discussions about financial incentives are off topic
[02:12:51] <kashire> ivii: Today is canceled. Go back to bed.
[02:13:31] <ms7821> mmorpgs use cryptography but you don't expect endless gamer chat in this channel
[02:14:12] <ivii> if I was a crypto whizz kid I'd just make a shitcoin 
[02:14:47] <kashire> You don't need to be a "whizz", it is a trivial thing to do. Just look at merkle trees and then figure out the marketing.
[02:15:01] <caveman> ms7821: my question is mainly about use of merkle tree at the moment, to allow fast insertion/verification.
[02:20:03] *** PJBoy is now known as Guest7020
[02:20:03] *** Quits: Guest7020 (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[02:20:20] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:28:23] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:30:49] <sshine> caveman, I don't have time right now to read back as I'm going to bed (you wrote quite a lot), but: fast insertion: merkle mountain ranges. fast verification: sparse merkle proofs.
[02:31:55] <caveman> thanks.  i'll note it down to read about it.
[02:32:35] <sshine> caveman, for pruning the ledger when balances become 0: trick is: never put balance on ledger, put hashes of zero-knowledge commitments.
[02:33:23] <sshine> caveman, https://aszepieniec.github.io/stark-anatomy/ :)
[02:37:05] <sshine> caveman, https://docs.grin.mw/wiki/chain-state/merkle-mountain-range/ -- https://www.wealdtech.com/articles/understanding-sparse-merkle-multiproofs/ -- https://www.comsys.rwth-aachen.de/fileadmin/papers/2020/2020-matzutt-coinprune.pdf
[02:38:55] <caveman> wow.  neat (re: zero-knowledge proof).
[02:39:05] <caveman> will read the other links, thanks a lot.
[02:39:13] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:ac63:f3f7:89ad:2997) (Quit: Leaving)
[02:40:42] *** Joins: cwebber (~user@user/cwebber)
[02:40:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[02:40:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[02:41:34] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 260 seconds)
[02:42:07] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[02:43:34] *** Lord_of_Life_ is now known as Lord_of_Life
[02:44:05] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[02:45:26] *** Joins: System_Error (~SystemErr@user/systemerror)
[02:47:36] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:49:57] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:50:41] <TimMc> I'd be interested if anyone has an answer to joe7057's question from 20:21Z about upgrading signing keys -- just sufficient to sign the new key with the old one?
[02:55:51] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:57:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:57:30] <Alipha> caveman: hopefully this diagram explains things. The purpose of including the balances and the merkle tree paths in the transaction is to enable the miner/verifier to verify that the transaction is valid using only the knowledge of the current block's merkle root and the information in the transaction: https://alipha.ddns.net/merkle_tree.png Also, I realized just now that Alice also needs to find Bob's and
[02:57:32] <Alipha> Charlie's latest balances.
[02:57:40] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[02:58:54] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[03:04:30] *** Quits: jhed9 (~jhed9@113.189.225.35.bc.googleusercontent.com) (Quit: ZNC 1.8.2 - https://znc.in)
[03:04:49] *** Joins: jhed9 (~jhed9@113.189.225.35.bc.googleusercontent.com)
[03:07:49] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[03:07:56] *** Quits: madage (~madage@user/madage) (Quit: leaving)
[03:17:12] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:19:13] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.4)
[03:24:22] *** Quits: The_Tablet (~tablet@user/the-tablet) (Remote host closed the connection)
[03:26:44] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[03:39:26] *** Joins: d1cor (~diego@179.63.242.120)
[03:49:55] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:57:32] <caveman> Alipha: can't we achieve the same if, instead of the balance, we just put the hash of the last state?  then when alice wants to send money, she can prove it by revealing the balance that makes the output hash identical to the hash in the final state?
[04:04:09] *** Joins: gabriel1__ (~gabriel1@37.172.221.131)
[04:04:51] <Alipha> caveman: sure, though note that the number of possible balances is likely to be small enough that someone could brute force reverse the hash, if they really cared to figure out what your balance is
[04:06:14] *** Joins: madage (~madage@user/madage)
[04:06:31] *** Quits: gabriel1_ (~gabriel1@37.170.71.1) (Ping timeout: 256 seconds)
[04:08:50] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[04:09:13] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[04:10:25] *** Joins: Wulf (~Wulf@user/wulf)
[04:13:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[04:14:06] *** Quits: d1cor (~diego@179.63.242.120) (Ping timeout: 256 seconds)
[04:14:39] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl - moving to 'caveman' nick.)
[04:24:09] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.4)
[04:29:25] <joe7057> TimMC: I think that the problem lies in proving that the signature was made prior to the old key being compromised. So lets say that you are using a 512-bit key, and this is all fine and good, since it's the 90s and no computer exists that can crack such a long key. But you are, of course, well-versed in Moore's law, and know that eventually computers your nice 512-bit key will be possible to
[04:29:27] <joe7057> break. So, you set January 1st, 2004 as the day you will publish a new, 2048-bit key to the world, and let everyone know that that is the key to use. Everything goes swimmingly, and your new keys are published on schedule, signed by your current, still-secure 512-bit key. But now it is 2022, and while everyone is now using your 2048-bit key, your 512-bit key has long been considered insecure. But,
[04:29:29] <joe7057> still, the only thing that you can offer as proof that your 2048-bit key is really from you is the signature from the 512-bit key.
[04:29:40] <joe7057> So the problem seems to be the question of "
[04:30:19] <joe7057> "how can I prove that this signature was made in 2005, and not 2022, with a compromised version of the old key?"
[04:31:14] <sarnold> well, there's also all the other things that TimMc has signed with the 2048 bit key in the meantime
[04:31:40] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:31:44] <joe7057> Aside from blockchain tech, which requires a massive network of people, I am not aware of anything that can prove such a fact. And even in the case of blockchain, it would be entirely possible to fabricate a full blockchain history back to 2005. Its assurance exists only in the number of people with the same copy, who say they have had it since 2005.
[04:32:54] <joe7057> sarnold: But since the attacker could have theoretically generated his own 2048-bit key and signed it with the now-broken 512-bit key, he could just as easily have taken the plaintext of all of those and signed them with that 2048-bit key.
[04:33:43] <joe7057> I guess the point is that unless we can somehow prove WHEN a signature was made, in a way that cannot be forged after the fact, there is always a theoretical level of uncertainty.
[04:34:15] <TimMc> Blockchains would allow you to establish a "not created after" date pinned to the past.
[04:34:27] <TimMc> So would a trusted notary who was already using a 2048 bit key. :-)
[04:35:04] <TimMc> But I think the important thing is that the new key get distributed *soon after* the signature is created.
[04:35:18] <joe7057> Fortunately in the case of a project of any size, the uncertainty remains theoretical. And we are all already used to a small amount of uncertainty, since all crypto is based on an assumption that a certain problem is NP-hard.
[04:35:32] <TimMc> People's computers can remember in 2022 that the verification happened in 2005.
[04:35:38] <joe7057> TimMC: yep. It comes down to trust.
[04:36:19] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[04:36:28] <joe7057> indeed, which is why I say the problem is only theoretical. Since for a small project, or an application where the signature may not be stored as a matter of course, it would theoretically be possible to fake such things.
[04:36:45] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[04:36:53] <joe7057> It was mainly just an interesting theoretical problem I was thinking about: How can we prove something was done before a certain period in time. 
[04:37:18] <joe7057> Since we can prove it was done after a certain period of time by using soem world event that had not happened before that. 
[04:37:30] <TimMc> yep
[04:38:24] <TimMc> So yeah, comes down to blockchains (and other Merkle-y things).
[04:38:33] <joe7057> And yes, I think the correct approach is to create the new key long before the old one is insecure, so everyone is moved over to the new key before the old one becomes untrusted
[04:38:35] <TimMc> Or... just having really good key distribution.
[04:39:33] <TimMc> The social media protocol I'm working on is planned to have a key gossip protocol so that people's computers hear about key changes and communicate the signature forward to others.
[04:39:54] <joe7057> Well, in reality for many things it comes down to some form of root trust (e.g. the SSL certificate root authorities)
[04:40:16] <joe7057> huh interesting. That seems like it could be a useful feature.
[04:40:34] <joe7057> A way to take the PGP web of trust idea and actually distribute it. 
[04:41:09] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:41:11] <TimMc> The primary role of the key gossip is to pre-distribute keys a hop or two away so that by the time you come across someone's journal, you may already have a key/URL signature to rely on. Trust before first use. :-)
[04:41:23] *** Joins: cryomon (~user@gateway/tor-sasl/cryomon)
[04:41:35] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:42:02] <joe7057> thats quite an interesting idea. 
[04:42:24] <joe7057> Of course the main trouble with that is getting key attestations from people who actually know each other. 
[04:43:08] <TimMc> I'm giving up on the idea of key signing.
[04:43:10] <joe7057> But if it were made easy, i.e. "scan this qr code to verify that the person who is showing it is the person claimed in the key identity" then it could potentially work quite well.
[04:43:29] <TimMc> Your average user is not going to do it.
[04:43:53] <TimMc> Like, maybe if you gamified it somehow, but they'd already have to be using the software *first* for that to work.
[04:43:56] <joe7057> then how do people trust the key? Or is it going for "this post is by the same person" rather than "this post is by this person"
[04:43:58] <TimMc> (probably)
[04:44:00] <caveman> TimMc: by 'key signing', do you mean the idea of signing the new key by the old key?  (newly joined, i don't have backlog)
[04:44:13] <TimMc> caveman: As in key signing parties.
[04:44:24] <joe7057> caveman I think he means the idea of getting other people to prove your key is yours. Like with the PGP web of trust.
[04:44:27] <TimMc> ambiguous, yes, given the original question :-)
[04:45:08] <caveman> will gossipers in your key gossip feature sign keys that they gossip?
[04:45:18] <TimMc> No one will be signing keys, per se.
[04:45:33] <joe7057> TimMC: maybe abstract away the whole key thing entirely for the average user (obviously make it just out of sight, to not annoy people who know how it works). Just have it be something like "help your friend verify their account" or something.
[04:45:41] <TimMc> In my system, everyone has a URL (yeah, I know, this is a part I need to optimize the hell out of) and a key, but they don't really know about their key.
[04:46:20] <TimMc> The journal at their URL will say "this is my key", accompanied by a signature by the key saying "this is the right URL as of $TIMESTAMP". There will be mechanisms for rotating keys and URLs.
[04:46:32] <joe7057> TimMc you should probably at least give them the option to import/export their keys. That could be useful for people who already have a well-trusted key, or who have an online profile with an associated key
[04:46:45] <joe7057> of course, they could just use their current key to sign the one for your platform
[04:46:51] <TimMc> People will basically just know about the URLs. What the keys will do is help with URL transitions.
[04:46:58] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:47:20] <caveman> is a person_i a tuple:  <public_key_i, url_i>?
[04:47:22] <TimMc> Oh, no need to export the keys -- the private key never leaves the user's desktop.
[04:47:37] <TimMc> caveman: Yeah, bipartite identity: Network location + cryptographic.
[04:47:46] *** Quits: towel_ (~towel@user/towel) (Quit: ZNC - https://znc.in)
[04:47:53] <TimMc> Each half can assist in a transition of the other.
[04:48:00] *** Joins: towel (~towel@user/towel)
[04:48:14] <joe7057> well, I've gotta sign off. Good luck with your project.
[04:48:18] <TimMc> I have notes on most of this at <https://gitlab.com/timmc/cavern> although some of it needs to be upodated or better organized.
[04:48:37] <TimMc> o/
[04:49:31] <caveman> did you read my messaging protocol?  very rought draft, but has same tuple to identify people.  but nothing about key gossiping.
[04:49:55] <TimMc> I haven't, no!
[04:50:04] *** Quits: moose (~moose@user/moose) (Quit: System has requested shutdown due to maintenance.)
[04:50:29] <caveman> not sure if it's related to your idea of gossiping (i just joined this discussion).  but it's this:  https://github.com/al-cavmean/hillarymail (ignore the name)
[04:51:25] *** Quits: cryomon (~user@gateway/tor-sasl/cryomon) (Quit: Konversation terminated!)
[04:51:28] <caveman> i was thinking that people will use some separate address book app/protocol to map public_key @ url (possibly onion url)
[04:52:56] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:54:46] <TimMc> ah, typo in username
[04:54:50] <TimMc> but found it
[04:55:19] <caveman> nowadays, i wonder if the messaging protocol should be simply a 'note' feature in a cryptocurrency.  e.g. we pay transaction fees to send notes to people.  for public announcements, we pay transaction fees to miners to put our notes in their blocks, so that people read them.  this way, we can have a decentralised chat/news/ads built-in.
[04:56:19] <caveman> since messaging needs payment of fees, it will have no spamming.  so people are free to publish their public keys, without being afraid of getting spammed.
[04:56:22] <TimMc> So yeah, a big problem with secure mail is that there's no "API" for talking to someone else's mail client; you can only do stuff through this narrow pipe of SMTP that doesn't know about your protocol. You can send people mail, that's it.
[04:58:15] <TimMc> If you could configure an arbitrary MX server to "host" some attributes for you, maybe abuse some kind of vcard feature, *then* you could do all sorts of delightful things.
[04:58:38] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 268 seconds)
[04:58:55] <TimMc> But as it is, it's just too narrow. And that's why I think secure email isn't really going to work.
[04:59:39] <TimMc> But if you can get some kind of standard going for mail servers to host a little chunk of JSON or whatever? Now we're talkin'.
[05:00:06] <TimMc> (Email has other problems too, but I think this is one of the biggest.)
[05:05:38] *** Joins: epony (epony@user/epony)
[05:05:38] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:07:04] *** Quits: gabriel1__ (~gabriel1@37.172.221.131) (Remote host closed the connection)
[05:09:30] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[05:14:44] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:15:39] *** Joins: System_Error (~SystemErr@user/systemerror)
[05:19:57] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: rebooting...)
[05:21:09] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:21:42] <TimMc> caveman: I haven't looked in detail at your payments scheme, but I think it's a good idea to explore.
[05:21:58] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:22:43] <TimMc> Regarding another protocol entirely (ActivityPub, maybe?) I saw some proposal for a similar pay-to-message scheme, but with the idea that messages *always* come with payment -- you just refund messages from people you trust. :-)
[05:23:21] <TimMc> (If someone's not refunding your messages, well! Maybe you don't want to send them too many more.)
[05:24:13] <Alipha> There's at least one messaging protocol that's built on top of blockchain...
[05:25:12] <TimMc> (I think the ActivityPub system worked with some kind of in-system "currency" that you can't actually accumulate or buy more of. Not real money. Just a moderately scarce resource.)
[05:28:54] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:35:07] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:35:47] <caveman> imo, if a cryptocurrency has a forwarding fee, then there is no reason why it shouldn't be also used as a messaging protocol.  e.g. if message is too big, then forwarders may drop it unless its fee is big enough.
[05:56:40] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:05:52] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[06:06:55] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[06:19:31] *** Joins: deusexbeer (~hedeo@37-146-227-150.broadband.corbina.ru)
[06:31:39] *** Joins: frost (~frost@user/frost)
[06:33:02] *** Quits: frost (~frost@user/frost) (Client Quit)
[06:35:33] *** Quits: lithiumpt (~lithiumpt@195.216.219.150) (Ping timeout: 256 seconds)
[06:38:14] *** Malvolio is now known as Guest8601
[06:38:14] *** Quits: Guest8601 (~Malvolio@user/malvolio) (Killed (strontium.libera.chat (Nickname regained by services)))
[06:39:07] *** Joins: Malvolio (~Malvolio@user/malvolio)
[06:42:24] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[06:51:57] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:58:16] *** Quits: hqdruxn08_ (~hqdruxn08@user/hqdruxn08) (Ping timeout: 268 seconds)
[07:03:19] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:14:07] <FlorianBad> Is there a great and simple tool to analyze the entropy of a file? Not just the occurrence of each byte but also at what modulo position they occur
[07:14:27] <FlorianBad> I was starting to write one but then I thought it most likely already exists
[07:16:31] <sm2n> gzip?
[07:16:51] <FlorianBad> What I'm writing analyses the occurrence of each 256 bytes for each modulo 2 to 512 (configurable max), then it will not just show a % of variable from the ideal, but also a bar with dashes ---- in the terminal to visualize that easily
[07:17:10] <sm2n> oh
[07:17:12] <FlorianBad> sm2n: no lol, a real tool for analytics
[07:31:12] *** Joins: crabby (~crabby@2600:8801:f200:27:34a9:6a83:f5ea:8688)
[07:32:00] <maroon> FlorianBad, i've not tested this yet https://www.atelierweb.com/products/went/
[07:35:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[07:35:42] <maroon> 'ent' is somewhat old, and practrand is a newer test for analyzing rng's
[07:36:53] <maroon> apparently it's easy to make things look random even when they're not
[07:40:01] <FlorianBad> hmm, ok will have a look :)
[07:40:42] <FlorianBad> Ah, well, I don't have any windows
[07:41:23] <FlorianBad> I guess I'll continue writing my own then, and analyze patterns in many different ways
[07:49:52] <maroon> i think practrand can compile for various os's
[07:57:11] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[07:59:24] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[07:59:41] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[08:38:52] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:41:15] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[08:44:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[08:46:17] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:33:24] *** Joins: lithiumpt (~lithiumpt@195.216.219.72)
[09:41:34] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 260 seconds)
[09:46:40] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[09:46:47] *** Joins: ravan_ (~ravan@42.201.198.151)
[09:46:47] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[09:46:47] *** Joins: ravan_ (~ravan@user/ravan)
[09:51:44] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 250 seconds)
[09:59:42] *** Joins: ravan (~ravan@42.201.198.151)
[09:59:42] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[09:59:42] *** Joins: ravan (~ravan@user/ravan)
[10:00:07] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 256 seconds)
[10:04:43] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[10:28:21] *** Quits: crabby (~crabby@2600:8801:f200:27:34a9:6a83:f5ea:8688) (Quit: Leaving)
[10:30:55] *** Quits: tent4053 (~tent405@2600:1700:8150:214f:cd83:7f15:76fd:3738) (Ping timeout: 250 seconds)
[10:32:03] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[10:33:04] *** Joins: tent4053 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[10:34:41] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 256 seconds)
[10:39:04] *** Joins: hqdruxn08 (~hqdruxn08@user/hqdruxn08)
[10:41:28] *** Joins: ravan (~ravan@42.201.198.151)
[10:41:28] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[10:41:28] *** Joins: ravan (~ravan@user/ravan)
[10:55:28] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:35:17] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[11:35:40] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:37:31] *** Joins: Major_Biscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl)
[11:39:12] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:41:19] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 268 seconds)
[11:46:44] *** Quits: aleck (~aleck@user/aleck) (Read error: Connection reset by peer)
[12:01:57] *** Quits: hqdruxn08 (~hqdruxn08@user/hqdruxn08) (Ping timeout: 240 seconds)
[12:02:30] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:08:08] *** Joins: frost (~frost@user/frost)
[12:10:11] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[12:10:53] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:11:22] *** Joins: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de)
[12:11:35] *** Quits: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de) (Changing host)
[12:11:35] *** Joins: menace (~someone@user/menace)
[12:12:44] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[12:20:04] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:23:40] *** Joins: andreasbuhr (~quassel@p549db65a.dip0.t-ipconnect.de)
[12:31:04] *** Joins: boxframes_ (~Saloframe@2607:9000:2000:15::a45d)
[12:31:19] *** Quits: boxframes (~Saloframe@2607:9000:2000:15::a45d) (Remote host closed the connection)
[12:32:47] *** Joins: hqdruxn08 (~hqdruxn08@user/hqdruxn08)
[12:55:04] *** Quits: Major_Biscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[12:57:31] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl)
[12:58:20] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:00:58] *** Quits: br1ck (~br1ck@150.140.193.82) (Remote host closed the connection)
[13:02:03] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[13:02:09] *** Joins: aleck (~aleck@user/aleck)
[13:08:26] *** Joins: br1ck (~br1ck@150.140.193.82)
[13:22:25] *** Joins: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320)
[13:40:37] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (Ping timeout: 240 seconds)
[13:40:44] *** Joins: boxframes__ (~Saloframe@2607:9000:2000:15::a45d)
[13:40:57] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:41:44] *** Joins: sonOfRa_ (sonOfRa@user/sonofra)
[13:41:47] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[13:41:48] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[13:41:48] *** Joins: blarnath (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[13:41:57] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: voker57 (~quassel@2a06:1700:0:24::) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: Colti (Miramar-FL@user/host-pond) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: Peng_ (~mnordhoff@user/Peng) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: boxframes_ (~Saloframe@2607:9000:2000:15::a45d) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 240 seconds)
[13:42:42] *** Joins: cwebber (~user@user/cwebber)
[13:42:48] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[13:42:56] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[13:42:57] *** Quits: aleck (~aleck@user/aleck) (Remote host closed the connection)
[13:42:58] *** Parts: Guyver2_ (Guyver@guyver2.xs4all.nl) ()
[13:42:59] *** Joins: voker57 (~quassel@2a06:1700:0:24::)
[13:43:09] *** Joins: aleck (~aleck@user/aleck)
[13:43:13] *** Joins: holgersson (~quassel@user/holgersson)
[13:44:09] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[13:44:46] *** Joins: Colti (Miramar-FL@user/host-pond)
[13:44:58] *** Joins: lithium_pt (~lithiumpt@195.216.219.72)
[13:45:20] *** Joins: Peng_ (~mnordhoff@user/Peng)
[13:45:39] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: lithiumpt (~lithiumpt@195.216.219.72) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: deusexbeer (~hedeo@37-146-227-150.broadband.corbina.ru) (Ping timeout: 256 seconds)
[13:56:09] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[14:15:11] *** Quits: hendi (sid489601@2a03:5180:f:2::7:7881) (Ping timeout: 250 seconds)
[14:15:30] *** Joins: MyWay` (~MyWay@2001:41d0:8:be9a::1)
[14:15:37] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:15:50] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[14:16:02] *** Joins: thomas25- (thomas25@brought.to.you.by.bnc4free.com)
[14:16:05] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[14:16:14] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[14:16:29] *** Quits: MyWay (~MyWay@2001:41d0:8:be9a::1) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: Fusl (fusl@1.0.0.127.in-addr.arpa.li) (Ping timeout: 250 seconds)
[14:16:29] *** MyWay` is now known as MyWay
[14:16:44] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[14:16:55] *** Quits: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: Histausse (~histausse@2001:470:69fc:105::1:711b) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: FelixFish[m] (~felixfish@2001:470:69fc:105::1:2e23) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: dusk (~quassel@suki.ds7s.nl) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: thomas25 (thomas25@brought.to.you.by.bnc4free.com) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[14:17:28] *** Joins: SoniEx2 (~quassel@autistic.space)
[14:17:39] *** Joins: dusk (~quassel@suki.ds7s.nl)
[14:18:30] *** Joins: gabriel1_ (~gabriel1@mail.virebent.art)
[14:19:02] *** Joins: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04)
[14:21:21] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 256 seconds)
[14:21:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:22:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:23:18] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[14:23:56] *** Joins: igemnace (~ian@user/igemnace)
[14:24:38] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[14:29:21] *** Joins: Fusl (fusl@1.0.0.127.in-addr.arpa.li)
[14:30:07] *** Joins: FelixFish[m] (~felixfish@2001:470:69fc:105::1:2e23)
[14:37:10] *** Joins: Histausse (~histausse@2001:470:69fc:105::1:711b)
[14:45:07] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[15:03:38] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: cacu[m] (~cacuconve@2001:470:69fc:105::b9df) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: duckie (~duckie@user/duckie) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: saolof[m] (~saolofenv@2001:470:69fc:105::1:6188) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: FelixFish[m] (~felixfish@2001:470:69fc:105::1:2e23) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: Halver[m] (~hoverhalv@2001:470:69fc:105::d0fe) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: Histausse (~histausse@2001:470:69fc:105::1:711b) (Quit: Bridge terminating on SIGTERM)
[15:07:54] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 268 seconds)
[15:10:33] *** Joins: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c)
[15:11:55] *** Joins: holgersson (~quassel@user/holgersson)
[15:17:42] *** Quits: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c) (Remote host closed the connection)
[15:18:03] *** sonOfRa_ is now known as sonOfRa
[15:20:54] *** Joins: Vitto (~Vitto@se-14.nat.univ-paris4.fr)
[15:22:23] *** Quits: gabriel1_ (~gabriel1@mail.virebent.art) (Remote host closed the connection)
[15:22:31] *** Joins: gabriel1_ (~gabriel1@mail.virebent.art)
[15:22:46] *** Joins: defiant (~defiant@user/defiant)
[15:26:36] <Vitto> Hello, world!
[15:27:21] *** Quits: gabriel1_ (~gabriel1@mail.virebent.art) (Remote host closed the connection)
[15:29:35] *** Quits: Vitto (~Vitto@se-14.nat.univ-paris4.fr) (Quit: Leaving.)
[15:30:09] *** Joins: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c)
[15:32:43] *** Quits: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c) (Remote host closed the connection)
[15:34:21] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[15:34:25] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Ping timeout: 268 seconds)
[15:34:39] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[15:35:21] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[15:35:40] *** Joins: kish` (~aqua@user/aqua)
[15:35:59] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[15:36:25] *** Joins: kish` (~aqua@user/aqua)
[15:36:41] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[15:37:24] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[15:37:32] *** Joins: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c)
[15:38:15] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[15:39:43] *** Joins: System_Error (~SystemErr@user/systemerror)
[15:39:44] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[15:40:39] *** Quits: menace (~someone@user/menace) (Quit: menace)
[15:47:00] *** Joins: Halver[m] (~hoverhalv@2001:470:69fc:105::d0fe)
[15:47:00] *** Joins: saolof[m] (~saolofenv@2001:470:69fc:105::1:6188)
[15:47:00] *** Joins: cacu[m] (~cacuconve@2001:470:69fc:105::b9df)
[15:47:00] *** Joins: FelixFish[m] (~felixfish@2001:470:69fc:105::1:2e23)
[15:47:00] *** Joins: Histausse (~histausse@2001:470:69fc:105::1:711b)
[15:47:00] *** Joins: duckie (~duckie@user/duckie)
[15:47:00] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[15:54:35] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Remote host closed the connection)
[16:00:41] *** Quits: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c) (Quit: You% have% been% kicked% for% being% idle)
[16:00:50] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[16:01:41] *** Joins: d1cor (~diego@179.63.242.120)
[16:03:45] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[16:06:29] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 268 seconds)
[16:06:30] *** Quits: saolof[m] (~saolofenv@2001:470:69fc:105::1:6188) (Quit: Client limit exceeded: 20000)
[16:06:56] *** Quits: FelixFish[m] (~felixfish@2001:470:69fc:105::1:2e23) (Quit: Client limit exceeded: 20000)
[16:08:24] *** Joins: holgersson (~quassel@user/holgersson)
[16:08:50] *** Joins: System_Error (~SystemErr@user/systemerror)
[16:10:16] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[16:10:46] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:15:12] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[16:17:27] *** Quits: Halver[m] (~hoverhalv@2001:470:69fc:105::d0fe) (Quit: Client limit exceeded: 20000)
[16:21:12] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[16:21:14] *** Quits: Histausse (~histausse@2001:470:69fc:105::1:711b) (Quit: Client limit exceeded: 20000)
[16:26:12] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[16:31:34] <TimMc> Back on the topic of key rotation... it obviously makes sense for the old key to sign a statement of "use $NEW_KEY instead". But would there be any benefit from the new key signing a "this replaces $OLD_KEY" statement?
[16:31:46] *** Joins: KellerHusky[m] (~kellerhus@2001:470:69fc:105::478c)
[16:31:58] *** Joins: Halver[m] (~hoverhalv@2001:470:69fc:105::d0fe)
[16:32:11] *** Joins: saolof[m] (~saolofenv@2001:470:69fc:105::1:6188)
[16:32:11] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[16:32:11] *** Joins: FelixFish[m] (~felixfish@2001:470:69fc:105::1:2e23)
[16:32:20] <MacGyver> No.
[16:32:23] *** Joins: Histausse (~histausse@2001:470:69fc:105::1:711b)
[16:32:24] *** Quits: cacu[m] (~cacuconve@2001:470:69fc:105::b9df) (Quit: Client limit exceeded: 20000)
[16:33:08] <MacGyver> Also it doesn't *obviously* make sense to sign a statement pointing to the new key.
[16:33:19] <TimMc> Hmm, no?
[16:33:20] *** Joins: cacu[m] (~cacuconve@2001:470:69fc:105::b9df)
[16:33:36] *** Joins: inlight (~inlight@157.35.83.140)
[16:33:36] *** Quits: inlight (~inlight@157.35.83.140) (Changing host)
[16:33:36] *** Joins: inlight (~inlight@user/inlight)
[16:33:54] <MacGyver> If I have control over your key for a few minutes I can sign such a statement.
[16:34:10] <MacGyver> The subtleties of this aren't obvious at all.
[16:34:17] <TimMc> heh
[16:34:53] <TimMc> One might then say that such a signature should not be trusted absolutely, but should still be provided.
[16:35:03] <MacGyver> That, I can agree with.
[16:35:18] <ms7821> double ratchet exists
[16:36:08] <TimMc> Double ratchet doesn't do backward signing though, right?
[16:36:31] <inlight> Hello
[16:36:45] <MacGyver> Nor forward signing in the way you just put it.
[16:36:59] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[16:37:28] <TimMc> Well, not signing. Conveying over an authenticated channel?
[16:37:47] <ms7821> OK, I suppose my point is traditional key rotation in the style of gpg is pretty dated
[16:38:37] <MacGyver> Well you still need to switch phones every once in a while.
[16:38:50] <TimMc> Anyway, I'm thinking there could be some obscure situation where it's like... if I say "my new address is ..." and I give someone else's address, there's probably a way to cause mischief with that.
[16:38:53] <MacGyver> And the DNSSEC keys are rotated every so often.
[16:39:01] <ms7821> yeah, and maybe gpg would work better if it used phone numbers as trust anchors
[16:39:05] <MacGyver> And TLS root certs also need rotation.
[16:39:21] <MacGyver> It's not as though key rotation is never needed because we now have ratchets.
[16:39:55] <ms7821> TLS root certs don't rotate by signing their successor, they have another OOB mechanism (the root programmes)
[16:40:03] <edk> signing the new key with the old key is about the best thing you can do if you don't have a trusted channel
[16:40:07] <MacGyver> Yes. And that was *my* point.
[16:40:13] <edk> it's not a problem that ratchets solve
[16:40:23] <MacGyver> You do need key rotation. But signing the new key with the old one doesn't get you very far.
[16:40:37] <MacGyver> Even under GPG that was not very useful, which is why nobody ever rotates their key.
[16:40:44] <edk> sure it does; people just need to remember when they saw it
[16:41:11] <sm2n> strict key rotation kind of sucks
[16:41:26] <sm2n> even for gpg, that's why there is a key hierarchy of sorts
[16:42:03] <ms7821> and the interesting thing about double ratchet is that a key can be a very quickly moving target, only useful for a tiny chain of messages
[16:42:04] <MacGyver> Yeah, rotate the subkeys, keep the master.
[16:42:04] <sm2n> you can keep your master key mostly airgapped, and use it to sign new keys that you actually use as often as you want
[16:42:11] <edk> if you use your old key to sign your new key, wait a year for people to notice, then revoke your old key, people who saw the signature before the revocation can be relatively confident
[16:42:18] <MacGyver> Nobody ever did that either because it's a pain to work with.
[16:42:22] <MacGyver> But it's possible.
[16:42:27] <sm2n> but of course if the master key is lost you have the same issue
[16:42:45] <edk> likewise if you sign an RSA-2n key a few years before RSA-n is considered insecure
[16:42:52] <MacGyver> edk: Can they? Why did you revoke it? Maybe you only noticed you lost control a year later.
[16:43:30] <MacGyver> You really need confirmation signatures on that new key.
[16:43:36] <edk> by that argument they also can't be confident in any messages you signed with the old key
[16:43:59] <sm2n> Ideally you could make an announcement in an obvious way, so that if anyone was going to dissent, they had time to
[16:44:10] <sm2n> s/you could/you'd/
[16:44:22] <ms7821> if people have full confidence in the old key, why are you rotating it?
[16:44:31] <edk> because you think they won't have full confidence in it soon
[16:44:39] *** Quits: duckie (~duckie@user/duckie) (Quit: Client limit exceeded: 20000)
[16:44:45] <MacGyver> ms7821: Because you created it in 1992 when RSA-1024 was still in vogue.
[16:44:54] <ms7821> OK, fair
[16:44:59] *** Joins: duckie (~duckie@user/duckie)
[16:45:28] <ms7821> so what we really need is an append-only log to prove the new key was signed before the old one was compromised
[16:45:39] <MacGyver> But anchoring trust on the new key *through* the old key is really not very good; you need to go through a modicum of re-authentication.
[16:46:10] <MacGyver> Otherwise the web of trust becomes basically a stale root cert store.
[16:46:46] <MacGyver> (Regardless of whether you think WoT works in the first place)
[16:47:50] <MacGyver> So in the case of TLS, that's the root cert store being updated, in the case of DNSSEC that's the key ceremonies, and in the case of PGP, that's meeting your PGP-buddies and telling them to sign your new key with your new fingerprint.
[17:00:10] *** Joins: zro (~zro@user/zro)
[17:01:34] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Remote host closed the connection)
[17:02:02] *** Joins: somlis (~somlis@user/somlis)
[17:07:23] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 256 seconds)
[17:20:40] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[17:27:30] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[17:28:07] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[17:37:03] * TimMc reads backscroll
[17:37:21] <TimMc> .oO("DNSSEC should use phone numbers as trust anchors")
[17:38:03] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:42:29] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[17:46:01] <TimMc> I think I've identified why I feel like backward signing has value, and it's kind of silly but kind of not.
[17:46:06] <TimMc> Session fixation attacks!
[17:46:22] <TimMc> Not because I think they're *related*, but because when I first learned about them it was a surprise.
[17:47:16] <TimMc> I had always been focused on session *theft*; a session ID was something to be kept secret, to be gained and not shared, to take and then to do something with.
[17:47:54] *** A_Dragon is now known as NotAFurry
[17:47:57] <TimMc> But session fixation attacks are the opposite -- you adversarially give a session ID to someone else without them noticing, and hijinks ensue.
[17:48:43] <TimMc> So I think that gave me a general heuristic of "don't always assume attacks involving a secret involve taking it".
[17:49:07] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:52:07] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:54:53] *** NotAFurry is now known as A_Dragon
[17:55:12] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[17:57:16] *** Quits: LordOfLive (uid538075@id-538075.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[18:00:17] <iz> yeah, there were a bunch of java frameworks that were notably vuln to session fixation attacks...  it's still a problem w/ keeping your sessionID secret, it's just you aren't the first to know the session ID
[18:00:24] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[18:16:50] <TimMc> :-)
[18:18:03] <TimMc> I think I could come up with a somewhat contrived situation that would parallel that for keys.
[18:20:34] <TimMc> Maybe Alice knows Bob's key (B123) and is exposed to Carol's key (C456) as well. Carol publishes a rotation "C456 is now B123", and Alice's computer sees it. Maybe Alice's computer, unwisely, *accepts this as true* and thinks "OK, C456 is an older key of Bob's". Carol then signs something with C456, timestamped to before the "rotation"; maybe Alice's computer will accept it as an old signature of Bob's.
[18:21:36] <TimMc> It would be wrong of Alice's client to do this, but requiring a backward signature on the rotation would protect against this type of vulnerability.
[18:37:48] *** blarnath is now known as d34dh0r53
[18:40:10] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[18:40:22] *** Joins: hlauk (~hlauk@176.33.108.116)
[18:40:34] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[18:58:08] <TimMc> (Something else with a similar feel: You can't just give someone a repo on Github, they have to accept as well.)
[18:58:34] <TimMc> I don't know if this heuristic actually applies to key rotations, though.
[18:59:42] <ms7821> yeah, that's more about abuse
[19:02:36] *** Quits: hlauk (~hlauk@176.33.108.116) (Quit: Leaving)
[19:07:25] <TimMc> *nod*
[19:23:03] *** Quits: d1cor (~diego@179.63.242.120) (Ping timeout: 250 seconds)
[19:30:11] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[19:30:40] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[19:33:59] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[19:34:15] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[19:35:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:37:10] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[19:45:11] *** Joins: crabby (~crabby@2600:8801:f200:27:55b1:d457:5786:860a)
[19:48:30] *** Joins: mouseghost (~draco@user/mouseghost)
[20:07:34] *** Quits: Malvolio (~Malvolio@user/malvolio) (Killed (iridium.libera.chat (Nickname regained by services)))
[20:08:51] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[20:09:19] *** Joins: Malvolio (~Malvolio@user/malvolio)
[20:13:03] *** Joins: LordOfLive (uid538075@id-538075.tinside.irccloud.com)
[20:13:10] *** Joins: son0p (~ff@181.136.122.143)
[20:13:27] *** LordOfLive is now known as Guest2664
[20:27:46] *** Joins: Ruzon (~Ruzon@2804:7f7:a587:c782:d608:f92:6a16:895b)
[20:29:31] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:41:57] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[20:46:30] *** Quits: Ruzon (~Ruzon@2804:7f7:a587:c782:d608:f92:6a16:895b) (Quit: Iridium IRC Client)
[20:48:55] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8900:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[20:49:09] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[20:56:04] *** Joins: igemnace (~ian@user/igemnace)
[20:59:45] *** Joins: inlight (~inlight@157.35.19.27)
[20:59:45] *** Quits: inlight (~inlight@157.35.19.27) (Changing host)
[20:59:45] *** Joins: inlight (~inlight@user/inlight)
[21:03:32] *** Joins: fanis30 (~anon@adsl-236.37.6.163.tellas.gr)
[21:10:19] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[21:19:06] *** Joins: tex (~super@user/dix)
[21:19:33] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 256 seconds)
[21:20:19] *** Joins: chomwitt (~chomwitt@athedsl-02411.home.otenet.gr)
[21:21:47] *** Joins: neiluj (~neiluj@2a01:e0a:1f2:d960:99e9:7de:5246:4de7)
[21:24:42] *** Quits: fanis30 (~anon@adsl-236.37.6.163.tellas.gr) (Quit: WeeChat 3.4)
[21:25:02] <Guest2664> Anyone know how to get like 100$ quick?? I’m stuck in a bad spot and only got my phone
[21:25:53] *** Guest2664 is now known as LordOfLive
[21:26:02] <LordOfLive> …
[21:27:11] <kashire> A what now 
[21:27:21] <kashire> Your phone is probably worth $100
[21:27:53] <kashire> If its really dire, do a payday loan, LordOfLive 
[21:28:04] <kashire> But then you'll really, really be screwing over your future self. 
[21:28:14] <kashire> Anyways, what does that have to do with cryptology
[21:28:35] <kashire> 1,1I am just concerned that this is some cryptocurrency related conversation.
[21:28:41] <halosghost> kashire: is cryptology like astrology but for cryptography instead of astronomy?
[21:29:05] <kashire> halosghost: crytography is in the set of cryptology.
[21:29:10] <kashire> er
[21:29:17] <kashire> That's probably a good way to put it.
[21:29:24] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:29:56] <halosghost> wikipedia, which I think we all know is AlwaysCorrect™, calls them synonyms
[21:30:03] <kashire> classic.
[21:30:28] <halosghost> kashire: on-the-level though, I'm not aware of the distinction (having never heard of cryptology before this point I don't think)
[21:30:37] <kashire> cryptology = ['cryptography', 'cryptanalysis']
[21:30:37] <halosghost> what, roughly is fine, is cryptology?
[21:30:41] <halosghost> ahh
[21:32:35] <TimMc> From the roots, I would say that cryptography is secret writing, and cryptanalysis is the breaking apart of the secrets. :-)
[21:32:44] <kashire> TimMc: Exactly
[21:32:49] <TimMc> Cryptology would be the knowledge or study of secrets.
[21:32:58] <TimMc> secrets/hidden things
[21:33:07] <TimMc> but etymology is not usage
[21:33:16] <halosghost> TimMc: or, of ceremonial graves
[21:33:21] <kashire> ha
[21:33:32] <TimMc> cryptanalysis: gravedigging
[21:34:39] *** Joins: d1cor (~diego@179.63.242.120)
[21:34:48] <halosghost> TimMc: “digging” is such a pejorative term; I prefer “excavation”
[21:35:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[21:37:16] *** Joins: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de)
[21:37:44] *** Quits: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de) (Changing host)
[21:37:44] *** Joins: menace (~someone@user/menace)
[21:37:56] *** menace is now known as Deknos
[21:38:09] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[21:38:20] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[21:41:10] <neiluj> Hi! When sieving for the Quadratic Sieve we try to find B-smooth numbers in a given range by finding the highest power of a prime p_i in the factor base such that Q(x)=x^2-n=0 mod p_i^beta has solutions x1,x2 in the range of S={Q(x)}_x. We also keep S_x which are initialized to Q(x) at first. Then we can divide S_x1 by the highest powers of p_i and also the S_(x1+k*p_i) for some k (same for S_x2).
[21:41:12] <neiluj> What I don't get is that why we don't check if Q(x)=0 mod pi^beta (highest beta) by computing the mod, then S_x<-S_x/pi^beta and so on.. since we know which x yields Q(x) (by definition of S). 
[21:42:38] <neiluj> or maybe missed something?
[21:44:11] *** Joins: mouseghost (~draco@user/mouseghost)
[21:50:26] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[21:51:26] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[21:51:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:01:13] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[22:06:06] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 276 seconds)
[22:11:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:12:31] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[22:17:23] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Remote host closed the connection)
[22:18:21] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[22:24:46] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[22:26:22] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.4)
[22:30:09] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[22:40:05] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[22:41:47] *** Joins: ivii (~ivan@user/ivii)
[22:43:10] *** Joins: System_Error (~SystemErr@user/systemerror)
[22:47:46] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[22:52:52] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:55:22] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:01:04] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[23:02:19] *** Joins: ivii (~ivan@user/ivii)
[23:11:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:12:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:13:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:14:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:16:11] *** Quits: d1cor (~diego@179.63.242.120) (Ping timeout: 245 seconds)
[23:35:20] *** Joins: zro (~zro@user/zro)
[23:47:56] *** Joins: deusexbeer (~hedeo@37-146-227-150.broadband.corbina.ru)
