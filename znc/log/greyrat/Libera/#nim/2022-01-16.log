[00:12:23] *** Joins: ad-absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net)
[00:19:56] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MiX
[00:20:09] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3MiX" => "https://play.nim-lang.org/#ix=3MiY"
[00:52:23] <FromDiscord> <Isofruit> Does a Data object always contain another data object?
[00:53:07] <FromDiscord> <Isofruit> Like, somewhere that thing must stop, when?
[00:53:20] <FromDiscord> <haxscramper> `ref object`
[00:53:23] <FromDiscord> <haxscramper> `Data = ref object`
[00:53:40] <FromDiscord> <Patitotective> its for my parser: when there are nested sequences i need to save the parent to retake it after the nested sequence ends
[00:53:43] <FromDiscord> <haxscramper> Or you can get smarter with DOD etc., but that depends on what do you use exactly
[00:54:03] <FromDiscord> <haxscramper> In reply to @Patitotective "its for my parser:": so it is an AST basically?
[00:54:08] <FromDiscord> <haxscramper> WIth "up" pointer?
[00:54:21] <FromDiscord> <Patitotective> In reply to @haxscramper "so it is an": _npeg_, or idk what do you mean
[00:54:28] <FromDiscord> <mratsim> In reply to @Patitotective "its for my parser:": make it a ref object
[00:54:32] <FromDiscord> <Patitotective> In reply to @Isofruit "Like, somewhere that thing": the first object does not have a parent
[00:54:46] <FromDiscord> <Isofruit> Then you should express that with Option[Data]
[00:54:55] <FromDiscord> <mratsim> no a ref
[00:54:57] <FromDiscord> <Isofruit> (Imo, not too sure hwat you're trying to do)
[00:54:58] <FromDiscord> <haxscramper> it would have the same illegal recursion error
[00:55:20] <FromDiscord> <haxscramper> make it a reference, because it looks like you can have cycles
[00:55:27] <FromDiscord> <mratsim> you have a tree here, with child keeping a reference to their parent, if it exists.
[00:56:09] <FromDiscord> <mratsim> you can use Option[Data] if Data is a ref object, but it doesn't solve the underlying problem
[00:56:23] <FromDiscord> <mratsim> which is choosing between reference and value types.
[00:56:23] <FromDiscord> <Patitotective> what is option?
[00:56:31] <FromDiscord> <haxscramper> `std/options.Option`
[00:56:35] <FromDiscord> <Isofruit> Option is an alternative representation of nil
[00:56:45] <FromDiscord> <Isofruit> Where you can express that a value might be there or not instead of using nil
[00:56:59] <FromDiscord> <Patitotective> ooh, thats cool
[00:57:04] <FromDiscord> <haxscramper> close but `Option` also allows to do this for non-ref objects
[00:57:13] <FromDiscord> <haxscramper> whereas `nil` requires `ref` or `ptr` data
[00:57:22] <FromDiscord> <haxscramper> but idea is the same - represent optionality
[00:57:35] <FromDiscord> <Isofruit> Yeah, effectively you absolutely positively never want to have to use nil
[00:57:51] <FromDiscord> <Isofruit> Because you can never know when a value is supposed to be able to be nil or not
[00:58:12] <FromDiscord> <Isofruit> With Option you express that "does not exist" is a possibility right then and there, explicitly.
[00:58:31] <FromDiscord> <Isofruit> And force yourself (and others using your code) to at east acknowledge that nil can happen.
[00:58:47] <FromDiscord> <Patitotective> In reply to @haxscramper "`std/options.Option`": that looks no nimmy, will use `std/options` only
[00:59:06] <FromDiscord> <Isofruit> I'm actually not sure where options come from, functional programming language stuff?
[00:59:33] <FromDiscord> <haxscramper> yes
[00:59:38] <FromDiscord> <haxscramper> Option/Either/Result
[00:59:54] <FromDiscord> <yallxe> how do I get the full windows `%appdata%` path? i tried `expandFilename("%appdata%")` but it does not return what i need
[01:00:07] <FromDiscord> <haxscramper> `Option[T]`, `Either[A, B]` and `Result[Err, Ok]`
[01:00:08] <FromDiscord> <yallxe> expandFilename uses current directory
[01:00:14] <FromDiscord> <haxscramper> stdlib only has `Option`
[01:00:25] <FromDiscord> <Isofruit> I was 2 seconds away from being surprised we have Result
[01:00:31] <FromDiscord> <Isofruit> (edit) "being" => "writing that I am"
[01:02:08] <FromDiscord> <Patitotective> Thank you all guys 🙃
[01:02:59] <FromDiscord> <Isofruit> In reply to @yallxe "expandFilename uses current directory": Sadly I haven't written a single line of code for windows in ages. But isn't appdata an environmental variable? If that's the case, shouldn't it possible to access it as such?
[01:03:36] <FromDiscord> <yallxe> maybe there is some better solution
[01:03:49] <FromDiscord> <yallxe> then getting it throught env vars
[01:03:55] <FromDiscord> <yallxe> (edit) "then" => "thnn"
[01:03:58] <FromDiscord> <yallxe> (edit) "thnn" => "than"
[01:04:28] <FromDiscord> <Isofruit> Fair, but at the very least it provides a base solution which might not be nice but at least means you aren't completely stuck, which is a good first starting point 😄
[01:04:32] <FromDiscord> <yallxe> well there is getHomeDir()
[01:04:54] <FromDiscord> <yallxe> which will return smth like C:\Users\yallxe\
[01:05:28] <FromDiscord> <Isofruit> There's also https://nim-lang.org/docs/os.html#getCacheDir
[01:05:43] <FromDiscord> <Isofruit> Which gives you LOCALAPPDATA
[01:07:04] <FromDiscord> <Isofruit> Also https://nim-lang.org/docs/os.html#getAppDir, but that gives you the directory of the executable, not the appdata environmental variable
[01:07:53] <FromDiscord> <Isofruit> And that's all I could find in the os lib, which is the only place where I'd assume this type of proc to be
[01:08:59] <FromDiscord> <yallxe> In reply to @Isofruit "Which gives you LOCALAPPDATA": oh, this one will be great
[01:09:01] <FromDiscord> <yallxe> thanks
[01:09:22] <FromDiscord> <yallxe> i was thinking that it is path to temp or smth
[01:11:50] <FromDiscord> <Isofruit> shrugs, CTRL+F is a powerful tool 😄
[01:20:17] <FromDiscord> <C7c3r0> hello, can someone guide me on how to import libraries used in python such as `import json` or `import shutil` ?↵I've been googling since yesterday but can't find anything relevant.
[01:20:18] <FromDiscord> <C7c3r0> thank you!
[01:21:01] <FromDiscord> <Isofruit> You're trying to use python libraries in nim code?
[01:21:03] <FromDiscord> <yallxe> In reply to @C7c3r0 "hello, can someone guide": wdym?
[01:21:24] <FromDiscord> <C7c3r0> I am trying to port a python program to nim
[01:21:33] <FromDiscord> <yallxe> In reply to @C7c3r0 "I am trying to": 👀
[01:21:35] <FromDiscord> <yallxe> but
[01:21:36] <FromDiscord> <yallxe> how
[01:21:49] <FromDiscord> <yallxe> are you literally using the whole python interpreter in nim
[01:21:59] <FromDiscord> <Isofruit> And to do so you want to access python libs and compile them into your nim binary?
[01:22:30] <FromDiscord> <C7c3r0> precisely, I have found the opposite for importing nim libraries to python, but can't find the opposite 😦
[01:22:41] <FromDiscord> <yallxe> i dont think there is the opposite
[01:22:49] <FromDiscord> <yallxe> well you can import the whole interpreter
[01:22:54] <FromDiscord> <C7c3r0> me too, thus I am asking the community.
[01:22:57] <FromDiscord> <yallxe> like python3.x.dll or smth
[01:23:21] <FromDiscord> <Isofruit> The reason python can wrap nim is because you can turn nim into a binary and call that from python. You can't really compile python in a similar manner
[01:23:28] <FromDiscord> <Isofruit> Well, you can
[01:23:30] <FromDiscord> <Isofruit> Sort of
[01:23:37] <FromDiscord> <Isofruit> But that's not generally what you do in pytho
[01:23:39] <FromDiscord> <Isofruit> (edit) "pytho" => "python"
[01:23:41] <FromDiscord> <C7c3r0> if I code it, which is extensive work as it is....
[01:24:04] <FromDiscord> <yallxe> are you from windows?
[01:24:05] <FromDiscord> <yallxe> or linux
[01:24:09] <FromDiscord> <C7c3r0> linux
[01:24:13] <FromDiscord> <yallxe> shit
[01:24:18] <FromDiscord> <C7c3r0> I know
[01:24:25] <FromDiscord> <C7c3r0> cause you mentioned .dll
[01:24:46] <FromDiscord> <yallxe> check it out https://github.com/call-042PE/PyInjector
[01:24:53] <FromDiscord> <yallxe> it is not what you need exactly
[01:25:11] <FromDiscord> <yallxe> but it is like the external injection of python into python process
[01:25:24] <FromDiscord> <yallxe> i dont know how to do this on linux
[01:25:28] <FromDiscord> <yallxe> but maybe you know
[01:26:03] <FromDiscord> <Isofruit> Curiosity quesiton, what do you have to achieve from wrapping python code that executes as python code in nim?↵Is this a piece of a larger project that is written in nim and re-coding that particular section would be too much of a pain in the keister?
[01:26:10] <FromDiscord> <Isofruit> (edit) "have" => "wish"
[01:27:02] <FromDiscord> <yallxe> In reply to @yallxe "check it out https://github.com/call-042PE/PyInject": what it actually does it takes python's dll from process and executing python code through it's functions
[01:27:12] <FromDiscord> <C7c3r0> it is for my understanding of Nim and it's objects.↵It is from an older project and will help me create better rapture with the language itself.
[01:27:36] <FromDiscord> <Isofruit> Ahhh it's something for you to get used to nim, check
[01:28:33] <FromDiscord> <C7c3r0> some `imports` I'm using are not present in Nim, and it is really a versatile language from what I read yesterday.↵I was looking to go for `Julia-Lang` but eventually got my eyes here.
[01:28:35] <FromDiscord> <yallxe> well i have an idea how to execute python code in nim
[01:28:36] <FromDiscord> <yallxe> but on windows
[01:29:24] <FromDiscord> <C7c3r0> i really need to make that port for all OS.↵If C is prevalent in an OS Nim will compile and execute as I've come to understand.
[01:29:49] <FromDiscord> <Isofruit> Pretty much, the compilation step goes pretty much nim --> C --> binary
[01:30:18] <FromDiscord> <Isofruit> (if you want binaries, you can of course also compile to JS and other stuff, there's tons of options)
[01:31:10] <FromDiscord> <C7c3r0> C# or CPP?
[01:31:28] <FromDiscord> <Isofruit> The mother of em all, just pure C as far as I'm aware
[01:32:20] <FromDiscord> <Elegantbeef> C is a rather good language for a IR since there are so many devices with either a C/C++ compiler
[01:32:40] <FromDiscord> <Isofruit> By default it uses the C compiler that your OS uses by default, I was taught pretty much the same information on a convo in the offtopic channel not too long ago
[01:32:41] <FromDiscord> <Isofruit> one sec
[01:32:45] <FromDiscord> <Elegantbeef> But there is also `nlvm` which uses llvm as a backend
[01:33:35] <FromDiscord> <Isofruit> https://discord.com/channels/371759389889003530/371759607934353448/931284029939007549↵You can start reading from there and read your way down a lot of the comments from leorize and Yardanico, they are a lot more knowledgeable about this stuff than I
[01:33:47] <FromDiscord> <C7c3r0> Thank you Isofruit.
[01:35:20] <FromDiscord> <Isofruit> Glad to share what I've been taught, though the thanks belongs more to Yardanico and leorize
[01:35:36] <FromDiscord> <leorize> are you looking for this? https://github.com/yglukhov/nimpy↵(@C7c3r0)
[01:36:31] <FromDiscord> <C7c3r0> GOD yas!
[01:36:48] <FromDiscord> <Isofruit> sports commentator voice↵And out of left field comes leorize, and he comes with a solution!
[01:39:14] <FromDiscord> <pmunch> Note, if you're porting a Python library to Nim you should probably use the equivalent Nim modules instead of delegating to Python
[01:41:16] <FromDiscord> <C7c3r0> these bots are awesome!
[01:41:28] <FromDiscord> <Elegantbeef> Quite possibly not bots
[01:41:38] <FromDiscord> <Isofruit> Shush beef, accept your bot life
[01:41:44] <FromDiscord> <Elegantbeef> The jury is still out though i hear pmunch occasionally "beep boop"
[01:41:46] <FromDiscord> <C7c3r0> is this AI?
[01:41:55] <FromDiscord> <C7c3r0> is this convergence ?
[01:41:55] <FromDiscord> <Isofruit> Nah, they're using a different client
[01:42:01] <FromDiscord> <C7c3r0> ❤️
[01:42:03] <FromDiscord> <Isofruit> matrix IIRC
[01:42:10] <FromDiscord> <vindaar> @C7c3r0\: as you mentioned julia earlier, there's also https://github.com/Clonkk/nimjl
[01:42:18] <FromDiscord> <Elegantbeef> It's emergent intelligence, 4 billion years ago life started and over time brains developed
[01:42:34] <FromDiscord> <Elegantbeef> Eventually those brains decided to use matrix/irc instead of discord
[01:42:44] <FromDiscord> <vindaar> no, I'm an AGI of course
[01:43:05] <FromDiscord> <Isofruit> y'all just GPT3 on a couple ego trips
[01:44:46] <FromDiscord> <Elegantbeef> You know it
[01:44:55] <FromDiscord> <Elegantbeef> GPT3 constructor comes out tomorrow 😛
[01:46:43] <FromDiscord> <Isofruit> Sidenote, constructor did not yet blow up in my face even though I've thrown it at like... 30 different models or sth, am very satisfied, I managed to delete at least 200-300 lines of code thanks to it
[01:47:54] <FromDiscord> <Isofruit> 4.5/5, full rating if it also manages to cook breakfast for me
[01:51:43] <FromDiscord> <Isofruit> Unrelated sidenote, because I'm wondering whether I should just have these warnings suppressed or not
[01:52:41] <FromDiscord> <Isofruit> I've got procs that delete/insert/update entries in a database using norm. The procs norm provides are decidedly not gc-safe
[01:53:39] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Mjj
[01:54:04] <FromDiscord> <Isofruit> What I get in return is repeatedly the compiler warning:↵`'createEntry' is not GC-safe as it calls 'insert' [GcUnsafe2]`
[01:54:50] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Mjk
[01:54:55] <FromDiscord> <Elegantbeef> But there is the question of "why would you lie" 😛
[01:56:17] <FromDiscord> <Elegantbeef> Guess it depends on which gc you want to support
[01:56:23] <FromDiscord> <leorize> one of the few case I wished ormin works \:p
[01:56:38] <FromDiscord> <Isofruit> I was less wondering how to shut the compiler up and more whether the compiler's warning is like an old grandmother telling me to put a second jacket over the first because it's cold outside at 6°C, or whether the compiler right now is telling me I'm 5 cm away from falling down the abyss
[01:56:56] <FromDiscord> <Elegantbeef> It's more about threading + GV
[01:57:00] <FromDiscord> <Elegantbeef> ● GC \
[01:57:16] <FromDiscord> <leorize> what does generic have to do with gcsafe?
[01:57:25] <FromDiscord> <leorize> I suppose you are calling this stuff in async procs?
[01:57:57] <FromDiscord> <Isofruit> I recalled that if I didn't have them here I'd have them all over my individual repositories (which do barely more than call procs of the generic repository, but with explicit types)
[01:58:16] <FromDiscord> <Isofruit> (edit) "I recalled that if I didn't have them here I'd have them ... all" 03added "(the warnings)"
[01:58:20] <FromDiscord> <Isofruit> let me see what happens if I remove them now
[01:59:05] <FromDiscord> <Isofruit> Never mind, my stuff straight up no longer compiles if I remove the "gcsafe" pragma from my generic delete proc
[01:59:32] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Mjl
[02:00:06] <FromDiscord> <Elegantbeef> Well `getDatabaseConnection` is a sure fire way of being gc unsafe 😀
[02:00:12] <FromDiscord> <Isofruit> leorize: Pretty much
[02:01:02] <FromDiscord> <Isofruit> Would it make things worse if I revealed I haven't yet implemented connection pooling, so "getDatabaseConnection" creates a new database connection to my sqlite file all the time?
[02:01:30] <FromDiscord> <leorize> looks like it uses the exact same connection, hence gcsafe warnings
[02:02:11] <FromDiscord> <Elegantbeef> Not really, the issue is that `getDatabaseConnection()` i assume uses GC'd memory which means it's unsafe
[02:02:19] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Mjn
[02:02:25] <FromDiscord> <leorize> obviously the way out is to use cps which doesn't care about gcsafe /s
[02:02:41] <FromDiscord> <leorize> oh then yea that will open a new database everytime↵(@Isofruit)
[02:02:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:02:48] <FromDiscord> <leorize> your issue is that you are accessing a global
[02:03:32] <FromDiscord> <Isofruit> I eventually wanted to move over to connection pools since I recall that being a standard implemented in every web framework I ever used
[02:03:56] <FromDiscord> <Isofruit> Just didn't get around to that yet because busy implementing other stuff
[02:05:18] <FromDiscord> <Isofruit> In reply to @leorize "oh then yea that": So the gcsafe warnings are the compiler not knowing I have a very silly implementation there?
[02:05:54] <FromDiscord> <Elegantbeef> Yea using that global GC'd memory is always going to be an issue
[02:06:21] <FromDiscord> <Elegantbeef> The GC warnings are basically saying "This is not thread safe"
[02:06:46] <FromDiscord> <Elegantbeef> If you arent multi threading you can use the cast above to hide the errors, which is fine on Orc/Arc
[02:07:10] <FromDiscord> <Elegantbeef> If you are using refc + multithreading you'd have to properly share the variable across the threads
[02:07:16] <FromDiscord> <Isofruit> Nah, I likely am not multi threading but this is also for learning purposes, so doing it the "right" way there is the way to go for me
[02:07:43] <FromDiscord> <Isofruit> Wait, wouldn't a connection pool address exactly that issue?
[02:07:47] <FromDiscord> <leorize> it's a stupid warning, you don't have to care too much about it \:p
[02:08:01] <FromDiscord> <Elegantbeef> A connection pool would be global GC'd memory still
[02:08:06] <FromDiscord> <Elegantbeef> It's the same issue just more sophisticated
[02:08:44] <FromDiscord> <Elegantbeef> Comically in the compiler there is a note of "Hey if it's gcsafe it's threadsafe" which tells you everything you need to know about gcsafe 😛
[02:09:21] <FromDiscord> <Elegantbeef> Nim's async doesnt use a second thread afaik so you dont need to worry about threadsafe afaiik
[02:09:22] <FromDiscord> <Isofruit> Ohh, so effectively it's saying "you're giving this memory back, but I can't guarantee that this memory will be allocated by your program the entire time you're using it" ?
[02:09:51] <FromDiscord> <Isofruit> (edit) "giving" => "passing" | "back," => "location from the proc to your caller,"
[02:10:06] <FromDiscord> <Isofruit> (edit) "time you're using it"" => "runtime of your program""
[02:10:29] <FromDiscord> <Elegantbeef> Eh i dont get gc unsafe procs much, generally just ignore them unless i'm multi threading
[02:10:36] <FromDiscord> <Isofruit> In reply to @leorize "it's a stupid warning,": It spams across my terminal every compilation! It annoys me!
[02:11:02] <FromDiscord> <Isofruit> ~~Literally the only reason I actually remove unused imports~~
[02:11:04] <FromDiscord> <Elegantbeef> Like i said you can {.cast(gcsafe).}\:\`
[02:11:50] <FromDiscord> <Isofruit> Yeh but that circumvents my chance to actually learn a bit more what's going on there and how I'd solve it if I wanted to multithread
[02:12:05] <FromDiscord> <Elegantbeef> I mean depending on your GC that's a multithread solution
[02:12:47] <FromDiscord> <Isofruit> gcsafe just states that it isn't safe for all gcs, but is for some?
[02:13:07] <FromDiscord> <Elegantbeef> Well Orc/Arc have a shared heap
[02:13:23] <FromDiscord> <Elegantbeef> So as long as you know the variable isnt going to get collected it's gcsafe
[02:14:03] <FromDiscord> <Elegantbeef> The one solution you could do is pass a data base connection down i think, but i dont know i generally ignore gcsafe warnings unless i'm doing thread stuff
[02:15:19] <FromDiscord> <leorize> atm gcsafe is more noise than helpful, unfortunately
[02:15:43] <arkanoid> how can I call a function on a result of collect without storing it first in a variable?
[02:16:09] <arkanoid> (collect(newSeq): for x in y: x).len doesn't work
[02:16:12] <FromDiscord> <Isofruit> have the procs first parameter be seq[whatever you were collecting] ?
[02:17:33] <FromDiscord> <leorize> https://play.nim-lang.org/#ix=3Mjr
[02:17:56] <FromDiscord> <leorize> if you need more than one parameter, you have to store it in a variable
[02:19:20] <arkanoid> what is happening here? using len as a block?
[02:21:23] <FromDiscord> <Isofruit> In reply to @Elegantbeef "So as long as": I think I'm still getting stuck on where the compiler thinks this might be dangerous.↵regardless of the way I'm reference counting, the `DbConn` variable always has a reference in the one proc that it is called in. ↵Is the danger here that I might have 2 DbConns to the same database and the compiler is warning me "if both of these are firing a delete I don't know what'll happen" ?
[02:21:38] <FromDiscord> <Isofruit> (edit) "In reply to @Elegantbeef "So as long as": I think I'm still getting stuck on where the compiler thinks this might be dangerous.↵regardless of the way I'm reference counting, the `DbConn` variable always has a reference in the one proc that it is called in. ↵Is the danger here that I might have 2 DbConns to the same database and the compiler is warning me "if both of these are firing a delete ... I" 03added "in parallel"
[02:21:51] <FromDiscord> <leorize> it's the expression-block syntax
[02:21:59] <FromDiscord> <leorize> typically used with templates/macros
[02:22:07] <FromDiscord> <leorize> but it works with anything
[02:23:40] <FromDiscord> <leorize> I think the fault lies in your applicationSettings, which I imagine is a ref↵(@Isofruit)
[02:24:10] <FromDiscord> <Isofruit> > const database = "db.sqlite3"
[02:25:24] <arkanoid> So the "block" keyword is used only when assigning variables? Can I use that syntax with any 1 arg function? Sweet
[02:25:48] <FromDiscord> <leorize> you can use that syntax for the last parameter of any function
[02:26:05] <FromDiscord> <leorize> not necessarily 1 arg, similar to templates/macros
[02:26:26] <arkanoid> last? ok, just like body
[02:26:30] <arkanoid> got it
[02:26:49] <arkanoid> not sure if idiomatic, but I like this with collect
[02:27:36] <FromDiscord> <leorize> idiomatic enough \:p I abuse this syntax all the time when writing macros
[02:28:17] <FromDiscord> <Isofruit> So the string is heap allocated and thus a reference type. I think my lack of knowledge with closer-to-the-metal languages is showing here, I'm failing to bring that logic chain to the conclusion "and that's why it's potentially problematic under some multithreadng-circumstances"
[02:28:17] <FromDiscord> <leorize> the danger is that accessing the same `ref` in two threads is not safe and is undefined behavior↵(@Isofruit)
[02:28:32] <FromDiscord> <Isofruit> But it's a const and thus read only, wouldn't the compiler know that?
[02:28:35] <FromDiscord> <leorize> this warning strictly act on `ref`
[02:28:51] <FromDiscord> <leorize> if it doesn't have `ref` in its definition, it doesn't count
[02:29:19] <FromDiscord> <leorize> string is a value type in nim, don't worry
[02:30:15] <arkanoid> I'm quite sad that there's no GUI lib/binding for nim on to the same level used for professional looking programs. I've just messed up with nimx and nimqml, but both lacks what the industry expects. Wnim is windows only, maybe I try gintro
[02:30:40] <FromDiscord> <leorize> gintro is great for linux, not so much on windows, though
[02:31:12] <arkanoid> qt was my best bet, but there's not enough love for it within nim community
[02:32:01] <FromDiscord> <Isofruit> Weren't gtk and Qt very wrappable?
[02:32:13] <FromDiscord> <leorize> qt is the opposite of wrappable \:p
[02:32:38] <arkanoid> not sure how other large libraries are doint it
[02:32:50] <arkanoid> *large languages/communities
[02:32:57] <arkanoid> rust/go/etc
[02:32:58] <FromDiscord> <Isofruit> My frontend coding consists of HTML CSS and JS, I know of gtk and qt, haven't worked with them (yet)
[02:33:54] <arkanoid> Isofruit, but do you do also desktop application? I'm struggling in findind the sweet spot to keep using nim instead of python for a kinda data-analysis desktop app
[02:34:44] <FromDiscord> <leorize> they all have specially created generators to wrap those apis
[02:35:06] <FromDiscord> <Isofruit> I do not dare call anything related to HTML CSS and JS as desktop application, even though I think I strictly speaking could. As such, I've done mostly CLI stuff on desktop when it wasn't a server
[02:35:21] <FromDiscord> <Isofruit> (edit) "a server" => "web stuff"
[02:35:57] <FromDiscord> <leorize> qt qml is usable in nim iirc
[02:36:23] <arkanoid> yeah but I have to present lot's of tables and also maps, so while doing electron-like desktop app is feasible, I wantes to stick with real native stuff for performance
[02:36:40] <FromDiscord> <leorize> https://github.com/status-im/status-desktop \<- this is an app using qml in nim
[02:37:36] <arkanoid> leorize, yeah, I'm using it right, here's my toy project https://github.com/arkanoid87/nimmap
[02:37:51] <arkanoid> is status-desktop using nimqml?
[02:38:35] <FromDiscord> <Isofruit> I assume so https://media.discordapp.net/attachments/371759389889003532/932048650643857408/Screenshot_from_2022-01-16_00-08-21.png
[02:38:39] <arkanoid> point is that nimqml is one-man project, also is composed of 2 libraries: dotherside (cpp -> c), and nimqml (c -> nim)
[02:39:08] <FromDiscord> <Isofruit> Oh you were asking nimqml the lib, not just qml
[02:39:11] <FromDiscord> <Isofruit> Nevermind my post
[02:39:43] <FromDiscord> <leorize> they use their own fork\: https://github.com/status-im/nimqml
[02:39:44] <arkanoid> well, they apparently do use NimQml
[02:40:04] <arkanoid>  This branch is 56 commits ahead, 8 commits behind filcuc:master. Interesting
[02:41:29] <arkanoid> thanks, this is very interesting. I'm testing nimqml right now but the memory model is not documented, and I'm experiencing leaks
[02:41:42] <arkanoid> I have to find out what's the proper use pattern
[02:42:53] <arkanoid> thanks leorize for nimqml by status link, I was not aware of it, this boost my confidence
[02:45:22] <FromDiscord> <Isofruit> sent a long message, see http://ix.io/3Mjy
[02:45:57] <FromDiscord> <Isofruit> (edit) "http://ix.io/3Mjy" => "http://ix.io/3Mjz"
[02:45:59] <FromDiscord> <leorize> uh... no
[02:46:05] <FromDiscord> <leorize> your bug have nothing to do with that string
[02:46:13] <FromDiscord> <leorize> I thought applicationSettings was a ref
[02:46:14] <FromDiscord> <Isofruit> (edit) "http://ix.io/3Mjz" => "http://ix.io/3MjA"
[02:46:22] <FromDiscord> <leorize> but since it's a const, it's not the issue here
[02:47:26] <FromDiscord> <Isofruit> Ahhhh okay, resetting mind and contemplating where else that potential issue might be. And chances are it's not as the warning says something with insert?
[02:47:42] <arkanoid> hooray, I've just found that status is dealing with the same object creation/delete of nimqml I was figuring out. Good news!
[02:48:02] <FromDiscord> <Isofruit> As the warning goes "since insert/delete/updatre isn't gc-safe, your proc can't be gc-safe either"
[02:48:07] <FromDiscord> <Isofruit> (edit) "insert/delete/updatre" => "insert/delete/update"
[02:48:21] <FromDiscord> <leorize> I guess you found your issue \:p
[02:48:24] <FromDiscord> <ajusa> Anyone know if beef's constructor works with default values?↵`proc initField(label = "", default = "", widget = defaultInput): Field {.constr.} = discard` gives me a segfault, though the manual version where I set each field works fine.
[02:48:29] <FromDiscord> <leorize> it's in those insert/delete/etc.
[02:48:43] <FromDiscord> <leorize> not sure what is used in there but if the compiler said so it must be due to that
[02:49:18] <FromDiscord> <leorize> summon the man is the best way \:P [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)↵(@ajusa)
[02:50:42] <FromDiscord> <Isofruit> as someone who also uses beefs constructor, I'm not sure I see your goal, why not use the "newField" proc the call of "implDefaults(Field)" will have created for you?
[02:50:56] <FromDiscord> <Elegantbeef> It should work with defaults
[02:51:01] <FromDiscord> <Elegantbeef> If it doesnt it needs fixed
[02:51:02] <FromDiscord> <Isofruit> (I'll just go ahead and assume you use constructor/defaults)
[02:51:20] <FromDiscord> <ajusa> I don't use constructor/defaults, do I need to for this behavior?
[02:52:15] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3MjB
[02:52:42] <arkanoid> I find object + plain initObject + plain list of getters quite boring to setup (like here https://github.com/status-im/status-desktop/blob/8dace226c549a1e5a357c6c99f51a7b52e226b13/src/app/modules/startup/onboarding/item.nim) do you know if there's an existing widely used macro to handle this?
[02:53:13] <FromDiscord> <leorize> constructor solve one part of it
[02:53:26] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3MjC
[02:55:08] <FromDiscord> <ajusa> Should I open an issue, or did I misunderstand what you meant when you said "It should work with defaults"?
[02:56:23] <FromDiscord> <Elegantbeef> open an issue that should work
[02:57:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[02:58:22] <FromDiscord> <Elegantbeef> Lol whoops my recent constructor repo has a `echo result.repr` mybad 😀
[02:59:41] <FromDiscord> <Isofruit> In reply to @arkanoid "I find object +": https://github.com/beef331/constructor if you're searching for the way to get init functions built for you
[03:00:14] <FromDiscord> <ajusa> opened the issue, sorry for lack of MWE. hopefully it's just a simple fix though
[03:03:57] <FromDiscord> <Elegantbeef> What nim version are you on?
[03:04:13] <FromDiscord> <ajusa> 1.6.0
[03:04:50] <FromDiscord> <Elegantbeef> I dont get the segfault but i do get a bug
[03:05:49] <FromDiscord> <ajusa> the segfault happens in my own code when it tries accessing and using one of the fields, I assume it's being set to nil
[03:05:56] <FromDiscord> <Elegantbeef> Yea it is
[03:06:04] <FromDiscord> <Elegantbeef> I dont think i handled exported fields
[03:06:28] <FromDiscord> <Elegantbeef> Yea that's iit
[03:07:01] <FromDiscord> <Elegantbeef> I was a dumb dumb
[03:07:31] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3MjH
[03:08:17] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3MjH" => "https://play.nim-lang.org/#ix=3MjI"
[03:08:19] <FromDiscord> <Elegantbeef> @ajusa\: `1.0.1` is your golden goose
[03:09:01] <FromDiscord> <ajusa> works! thanks you so much 😄
[03:09:51] <FromDiscord> <Elegantbeef> No problem
[03:15:36] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3MjN
[03:16:00] <FromDiscord> <Isofruit> I tend to have types with a lot more fields 😛
[03:16:19] <FromDiscord> <Elegantbeef> And now with `1.0.2` you can just do `proc initField(label = "", default = "", widget = defaultInput): Field {.constr.}`
[03:16:29] <FromDiscord> <Elegantbeef> We can abuse forward declare syntax to make that work!
[03:16:56] <FromDiscord> <ajusa> so you got rid of the discard + =? neato, guess I'm updating
[03:18:14] <FromDiscord> <Isofruit> Issues to tackle tomorrow maybe:↵file upload↵basic signal system↵image-conversion signal
[03:19:22] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3MjP
[03:19:56] <FromDiscord> <Isofruit> ... that counts as abuse?
[03:20:04] <FromDiscord> <ajusa> 141 char line vs two lines, the hardest choices require the strongest wills
[03:20:10] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MjQ
[03:21:13] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3MjR
[03:21:49] <FromDiscord> <Elegantbeef> ah sorry should be named `opts`
[03:21:49] <FromDiscord> <Elegantbeef> or something other than the field name
[03:22:32] <FromDiscord> <Elegantbeef> Well i'm off to get some food, so dont abuse constr too much 😛
[03:22:53] <FromDiscord> <ajusa> ah gotcha, that works. have a nice meal!
[03:29:25] <FromDiscord> <C7c3r0> hi again, I see that I can declare floats in NIM, but I don't see any reference as to how doubles are declared
[03:30:13] <FromDiscord> <ajusa> In reply to @C7c3r0 "hi again, I see": float64, though I believe float by default is a double
[03:30:43] <FromDiscord> <ajusa> if you're looking for a float the way Java defines it I think you'd want a float32
[03:30:50] <FromDiscord> <C7c3r0> thank you!
[03:35:47] <FromDiscord> <leorize> small nit\: Nim is a word, please use normal casing for it \:p
[03:49:20] <arkanoid> Isofruit, thanks!
[03:52:46] <FromDiscord> <ajusa> In reply to @Elegantbeef "Well i'm off to": Hm, I think I have another bug with constr? Renaming the field doesn't seem to have worked, so it seems that the `result.field = default` syntax doesn't actually work at all?
[03:53:17] <FromDiscord> <Elegantbeef> Are you sure?
[03:54:18] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Mk0
[03:54:43] <FromDiscord> <ajusa> hope that's not a bug on my end
[03:54:44] <FromDiscord> <Elegantbeef> Can you give me an example i can run 🙂
[03:55:07] <FromDiscord> <ajusa> Yeah, that would be helpful wouldn't it. Give me a sec 😄
[03:57:35] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Mk1
[04:03:56] <FromDiscord> <Elegantbeef> Hmm yea weird AST here
[04:22:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:00:44] <FromDiscord> <retkid> is there any 3d plottig libraris
[05:00:47] <FromDiscord> <retkid> (edit) "libraris" => "libraries"
[05:00:49] <FromDiscord> <retkid> (edit) "plottig" => "plotting"
[05:01:00] <FromDiscord> <retkid> Jesus i need to stop editing sorry
[05:02:12] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:3356:ec29:a6b4:1c74) (Remote host closed the connection)
[05:02:55] *** Joins: adigitoleo (~adigitole@139.168.64.98)
[05:07:55] <arkanoid> any1 has experience with nimqml here? I've a simple question
[05:15:17] <FromDiscord> <Elegantbeef> @ajusa\: 1.0.3  is out now should resolve your issues
[05:15:23] <FromDiscord> <Elegantbeef> Hopefully there arent any more issues
[05:18:19] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:36:03] <FromDiscord> <The Bron Jame (real)> How to make the default output source not the vscode output window
[05:36:13] <FromDiscord> <The Bron Jame (real)> i cant enter anything with the output window
[05:40:48] <FromDiscord> <Elegantbeef> What do you mean?
[05:46:50] <FromDiscord> <huantian> try the terminal option in your launch.json https://media.discordapp.net/attachments/371759389889003532/932096024833572934/unknown.png
[05:47:03] <FromDiscord> <huantian> assuming that's what you mean
[05:55:08] *** Joins: neurocyte0917095 (~neurocyte@user/neurocyte)
[05:57:24] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:57:24] *** neurocyte0917095 is now known as neurocyte091709
[06:06:31] <FromDiscord> <ynfle> sent a code paste, see https://paste.rs/wMx
[06:22:33] <NimEventer> New Nimble package! grab - grab statement for importing Nimble packages, similar to Groovy's Grape, see https://github.com/hlaaftana/grab
[06:22:33] <NimEventer> New Nimble package! astdot - Prints a dot graph of a nim ast dumped using the `dumpTree` macro., see https://github.com/Rekihyt/astdot
[06:25:32] <FromDiscord> <ynfle> In reply to @ynfle "<@!696333749570371585> (Which is the": I guess that's the wrong one
[06:27:23] <FromDiscord> <Elegantbeef> I think he's been using matrix a bit so you've probably pinged him
[06:33:46] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:35:45] <arkanoid> is defer a good idiom or should I avoid it
[06:35:47] <arkanoid> ?
[06:36:24] <FromDiscord> <Elegantbeef> I think it's fine, though i dont generally use it
[06:37:24] <arkanoid> k
[06:45:43] *** Quits: adigitoleo (~adigitole@139.168.64.98) (Read error: Connection reset by peer)
[06:46:08] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:218c:f4b8:49ff:7faf)
[07:15:11] <nixfreaknim[m]> How would you create a proc for converting Celcius to Fahrenheit ? Does it make sense to try to create a proc ?
[07:16:07] <FromDiscord> <Elegantbeef> Depending on what you're after might want to use distincts
[07:18:38] <nixfreaknim[m]> just a simple gui , label  , textbox  label, textbox , user inputs a number and calculate to Fahrenheit
[07:19:00] <FromDiscord> <Elegantbeef> Ah then yea a proc is fine
[07:20:23] <nixfreaknim[m]> ok so proc cToF*(c: int): = ?
[07:20:39] <nixfreaknim[m]> then var the formula
[07:23:16] <FromDiscord> <that_dude> I mean consider using a float instead of int
[07:23:24] <FromDiscord> <that_dude> (edit) "I mean" => "I'd"
[07:25:12] <nixfreaknim[m]> Its a user so I was thinking int then parseFloat
[07:26:39] <FromDiscord> <Elegantbeef> What i'd do is https://play.nim-lang.org/#ix=3Mlm cause i'm a silly bastard that likes distincts 😛
[07:26:42] <FromDiscord> <that_dude> Why not just keep it float? it allows much better accuracy if needed/wanted
[07:29:48] <nixfreaknim[m]> oh lol , ok so you can put the formula in the proc
[07:30:07] <FromDiscord> <Elegantbeef> Have you written Nim before?
[07:30:23] <FromDiscord> <huantian> In reply to @Elegantbeef "What i'd do is": I mean distincts are pretty neato
[07:30:27] <nixfreaknim[m]> yep , just not formulas in the proc
[07:30:47] <FromDiscord> <Elegantbeef> Well they're callable code
[07:30:58] <FromDiscord> <Elegantbeef> Yea i love distincts huan
[07:31:09] <FromDiscord> <Elegantbeef> Which reminds me  @SirOlaf have you got any further?
[07:31:21] <nixfreaknim[m]> I just thought there was a better way
[07:32:27] <FromDiscord> <Elegantbeef> nah procs are for when you want to put a nice package on callable code
[07:34:15] <nixfreaknim[m]> great
[07:34:32] <nixfreaknim[m]> thanks for clearing that up for me
[07:35:05] <FromDiscord> <that_dude> I still struggle to find reasons to use distincts :/ I just use their nondistinct versions or custom objects.
[07:35:06] *** Joins: Guest10 (~Guest10@45.233.0.10)
[07:35:32] <FromDiscord> <Elegantbeef> I use them all the time they have so many different usages
[07:35:53] <FromDiscord> <Elegantbeef> Dont want to pass a `isX` flag make two distincts
[07:36:21] <FromDiscord> <that_dude> I guess I don't use overloading much either tbh
[07:36:27] <FromDiscord> <that_dude> I don't use a lot of things lol
[07:36:45] <FromDiscord> <huantian> overloading is great↵also `type or type` and `when is` is also fun
[07:36:59] <FromDiscord> <Elegantbeef> I typically use distinct for safety or clarity
[07:37:11] <FromDiscord> <Elegantbeef> Like for instance a trig function that takes radian
[07:37:18] <FromDiscord> <Rika> i dont use distincts too often
[07:37:27] <FromDiscord> <Elegantbeef> Clarity and safety, no one can accidently pass the wrong value in
[07:38:17] <FromDiscord> <Elegantbeef> I cant overstate how much i love them
[07:38:47] <FromDiscord> <Rika> if you overuse them they can be annoying
[07:39:05] <FromDiscord> <Elegantbeef> I think that's not overused and incorrectly used
[07:39:05] *** Quits: Guest10 (~Guest10@45.233.0.10) (Client Quit)
[07:39:15] <FromDiscord> <Rika> overuse is incorrect use.................
[07:39:34] <FromDiscord> <Elegantbeef> Tomato tomato
[07:39:48] <FromDiscord> <Rika> pomegranate pomme grenade?
[07:40:12] <FromDiscord> <huantian> POM Granite table top
[07:40:57] <FromDiscord> <Elegantbeef> Anywho they're lovely, and use them where they make sense and you make a nicer API/happier coders
[07:41:29] <FromDiscord> <Elegantbeef> To me `script: NimScriptFile or NimScriptPath` instead of `script: string, isFile: bool` is just a much nicer api
[07:43:14] <arkanoid> I'm using collect to loop a JsonNode that's a sequence of nodes and return a filtered JsonNode, what should I put in place of newSeq?
[07:43:43] <FromDiscord> <Elegantbeef> `newJsObject()`?
[07:43:53] <FromDiscord> <Elegantbeef> I dont know if collect can be used on non generic procedures, dont recall
[07:44:18] <arkanoid> wait, just found it's newJArray
[07:44:54] <arkanoid> wait, no, it doesnt like it
[07:44:54] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Mly
[07:54:11] <arkanoid> thanks! it works even with newJArray instead of newJObject (not sure about the difference here)
[08:10:46] <FromDiscord> <treeform> In reply to @arkanoid "is defer a good": https://github.com/nim-lang/RFCs/issues/236
[08:16:57] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Quit: Leaving)
[08:18:14] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[08:20:22] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[08:23:02] *** Joins: adigitoleo_ (~adigitole@2001:8004:1d00:62d6:8743:f40f:2d4d:81b2)
[08:23:31] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:218c:f4b8:49ff:7faf) (Ping timeout: 250 seconds)
[08:43:44] <arkanoid> treeform, oh, that's something important
[08:46:03] <FromDiscord> <Rika> Please read the whole discussion though xd
[08:52:59] *** adigitoleo_ is now known as adigitoleo
[09:12:46] <FromDiscord> <Bung> @ElegantBeef  I see new update, what about procs in fields ?
[09:17:30] *** Joins: adigitoleo_ (~adigitole@2001:8003:1d19:4500:218c:f4b8:49ff:7faf)
[09:18:55] <FromDiscord> <Elegantbeef> They're nil'd on conversion
[09:18:59] *** Quits: adigitoleo (~adigitole@2001:8004:1d00:62d6:8743:f40f:2d4d:81b2) (Ping timeout: 250 seconds)
[09:20:30] *** Quits: adigitoleo_ (~adigitole@2001:8003:1d19:4500:218c:f4b8:49ff:7faf) (Remote host closed the connection)
[09:21:13] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:6d6b:7ec9:9e7a:96c3)
[09:22:00] <FromDiscord> <Elegantbeef> I messed up a bit, now they're properly Nil'd
[09:22:14] <FromDiscord> <Bung> okay it haven't been done right ? I'd like to what happen after that
[09:22:28] <FromDiscord> <Elegantbeef> What do you mean?
[09:22:50] <FromDiscord> <Bung> oh , I see you push code 37 seconds ago
[09:23:08] <FromDiscord> <Elegantbeef> Yea i thought i had them working but i realized just now i didnt handle them properly
[09:23:17] <FromDiscord> <Elegantbeef> need to make a test for it
[09:25:07] *** Joins: ad_absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net)
[09:27:08] *** Quits: ad-absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net) (Ping timeout: 250 seconds)
[09:27:16] <FromDiscord> <Bung> found new error `/Users/bung/.nimble/pkgs/karax-#master/karax/vdom.nim(159, 5) Error: Nimscripter cannot support objects that use when statments. A proc that uses this object is the issue.`
[09:28:12] <FromDiscord> <Bung> sent a code paste, see https://paste.rs/HL8
[09:29:27] <FromDiscord> <Elegantbeef> When statements are complicated to support, i do need to make `parseObject` not messy but i stand by that error atm
[09:30:41] <FromDiscord> <Bung> can simply ignore this part as `when false` ?
[09:30:52] <FromDiscord> <Elegantbeef> I guess i can technically support `when false` or `when true` but the issue is that there are no guarantees that objects on both sides match signatures after the when statement goes through
[09:31:37] <FromDiscord> <Elegantbeef> Indeed in this case
[09:38:39] <FromDiscord> <Bung> another thinking , with ast parser I think the returnType can be automatically filled
[09:38:55] <FromDiscord> <Elegantbeef> How can the returnType be filled?
[09:39:07] <FromDiscord> <Elegantbeef> It can only be filled in the case you supply do `addCallable`
[09:39:42] <FromDiscord> <Elegantbeef> I mean you're sorta right i guess it can be filled but the Nim programs types do not match the VM's types
[09:39:54] <FromDiscord> <Elegantbeef> So you can technically have different names and it'll work fine
[09:41:04] <FromDiscord> <Bung> in this case can assuming they're same name in both side.
[09:41:25] <FromDiscord> <Elegantbeef> I mean that cannot be done anyway
[09:41:36] <FromDiscord> <Elegantbeef> The types on Nim have to be statically known
[09:42:50] <FromDiscord> <Elegantbeef> Remember the that nimscript program is 100% detatched from the Nim program
[09:43:05] <FromDiscord> <Elegantbeef> There is no way to intuit the type from a program you dont have at CT
[09:49:02] <FromDiscord> <Bung> I dont know , I think you can attach a pragma to handle this or just emit same name on script side
[09:50:30] <FromDiscord> <Elegantbeef> Or just manually supply the return type so we can have multiple nimscript modules implemented and dont have to track where they are
[09:52:26] <FromDiscord> <Bung> yeah , nvm , handle `when false` first.
[09:54:27] <FromDiscord> <Elegantbeef> Well that was done but i was trying to support `when true` aswell but that's nobueno
[09:55:32] <FromDiscord> <Bung> oh god, so quick
[09:57:58] <FromDiscord> <Bung> ` Error: type mismatch: got 'NimNode' for '↵nil' but expected 'Node = ref Node:ObjectType'`
[09:58:46] <FromDiscord> <Elegantbeef> You distracted me with the demanding tone 😛
[09:59:55] <FromDiscord> <Elegantbeef> Actually i dont know what code causes that
[10:00:00] <FromDiscord> <Bung> is this suppose to be error or bug ?
[10:00:08] <FromDiscord> <Elegantbeef> My test passes
[10:00:28] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/Jf5
[10:01:00] <FromDiscord> <Bung> I think it occurs when handle `dom: Node`
[10:03:02] <FromDiscord> <Elegantbeef> Well i guess i dont properly handle these complex objects still
[10:03:20] <FromDiscord> <Elegantbeef> Someone gets to rewrite my parsing logic soon i suppose
[10:04:02] <FromDiscord> <Bung> okay, that's a bug
[10:05:11] <FromDiscord> <Elegantbeef> Well the parsing should work on any object
[10:06:14] <FromDiscord> <Bung> Do u think I can done my project with nimscripter ? I dont know what problem I'll face to
[10:06:24] *** Quits: ad_absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net) (Quit: Leaving)
[10:07:02] <FromDiscord> <Elegantbeef> I mean it's worked fine for my stuff, but it's always been less complex
[10:07:39] <FromDiscord> <Elegantbeef> Large complex objects are good tests for the interface
[10:07:57] <FromDiscord> <Bung> okay, I'll be your test man
[10:08:42] <FromDiscord> <Bung> anyway ,I dont have alternative solution.
[10:09:39] <FromDiscord> <Elegantbeef> Well you could use another  scripting language 😛
[10:10:26] <FromDiscord> <Bung> I dont know any other script language intergrate well with ni m
[10:10:55] <FromDiscord> <Rika> Lua
[10:11:02] <FromDiscord> <Bung> also use nim both sides cooler.
[10:11:04] <FromDiscord> <Rika> Lua works relatively well
[10:11:27] <FromDiscord> <Bung> which lib ?
[10:11:33] <FromDiscord> <Rika> In reply to @Bung "also use nim both": I mean yes sure but if you have requirements you don’t really have a choice no?
[10:11:55] <FromDiscord> <Bung> yeah, I also interested in
[10:12:13] <FromDiscord> <Elegantbeef> Technically Nimscript isnt that magical here all i've done is use macros to automate the bridge
[10:12:19] <FromDiscord> <Elegantbeef> You can do the same thing with any VM
[10:14:15] <FromDiscord> <Bung> that's harder , as nimscripter provide simple api for me.
[10:15:06] <FromDiscord> <Elegantbeef> Yea i mean ideally nimscripter works, but you clearly like to hit the wall of what it can presently handle 😀
[10:15:53] <FromDiscord> <Elegantbeef> I can say for certainty it does handle JSON now 😀
[10:19:51] <FromDiscord> <Bung> that's wonderfull thing
[11:10:24] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[11:10:52] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[12:16:15] <FromDiscord> <evil> is there a format proc that takes in a string and a seq[string]?
[12:21:13] <FromDiscord> <Rika> https://nim-lang.org/docs/strutils.html#%25%2Cstring%2CopenArray%5Bstring%5D
[12:59:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[12:59:49] *** Joins: krux02_ (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[13:14:58] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3Mpe
[13:15:23] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3Mpe" => "https://play.nim-lang.org/#ix=3Mpf"
[13:15:58] <FromDiscord> <Rika> You can always use the hack called “compiles”
[13:16:13] <FromDiscord> <Isofruit> That... is actually fair
[13:16:16] <FromDiscord> <Isofruit> Not beautiful
[13:16:17] <FromDiscord> <Isofruit> But fair
[13:16:53] <FromDiscord> <Rika> Well unfortunately I don’t know of any other way or method to do what you want
[13:19:22] <FromDiscord> <Elegantbeef> You can do some funky stuff like `proc(id: T)(triggerDeleteSignals)`
[13:19:44] <FromDiscord> <Elegantbeef> It's still a when
[13:20:17] <FromDiscord> <Isofruit> What happens in that block? I don't think I'm familiar with that syntax
[13:20:41] <FromDiscord> <Elegantbeef> I have an example in nimscripter somewhere
[13:20:46] <FromDiscord> <Elegantbeef> One second
[13:22:50] <FromDiscord> <Elegantbeef> You can do `when declared(triggerDeleteSignals) and (proc(id: T)(triggerDeleteSignals)) != nil:` i think
[13:23:24] <FromDiscord> <Elegantbeef> Is that any better than when compiles probably not
[13:25:12] <FromDiscord> <Isofruit> but what does this `proc(id: T)(triggerDeleteSignals)` say? A proc in brackets directly after an unfinished proc signature?
[13:25:26] <FromDiscord> <Elegantbeef> Converts the symbol to that proc if it can
[13:26:52] <FromDiscord> <Isofruit> And nil if it can't i assume, so "when there is any proc called "triggerDeleteSignals" declared and my proc(id:T) can be converted to "triggerDeleteSignals" , then do XY" ?
[13:27:31] <FromDiscord> <Elegantbeef> Yea
[13:27:46] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Mpm
[13:29:02] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Mpn
[13:29:27] <FromDiscord> <Isofruit> Now on to philosophize about what has the better readability
[13:29:41] <FromDiscord> <Rika> If you comment it the latter could be better
[13:30:02] <FromDiscord> <Elegantbeef> Personally i'm of party just use `when compiles`
[13:31:48] <FromDiscord> <Isofruit> I'm tempted to, simply because the above is the simplified version. I'm trying to imitate Django's signal system so I'll likely have at least 2 signal calls every time
[13:32:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:32:12] <FromDiscord> <Isofruit> Which means less reading with "when compiles"
[13:32:17] <FromDiscord> <mratsim> In reply to @Isofruit "Is there a when-check": https://github.com/numforge/laser/blob/master/laser/lux_compiler/frontend/lux_sigmatch.nim#L18
[13:32:38] <FromDiscord> <Elegantbeef> Yea a macro also works
[13:33:27] <FromDiscord> <Elegantbeef> You also could add a new overload `deleteEntry[Character](entryId, SignalDelete)`
[13:34:02] <FromDiscord> <Elegantbeef> Where signal delete is `type SignalDelete = distinct void` just cause fuck yea distinct! 😛
[13:34:22] <FromDiscord> <Elegantbeef> Or name it `deleteEntryWithSignal` If you prefer that
[13:34:46] <FromDiscord> <Isofruit> I was about to have a SignalType enum
[13:35:20] <FromDiscord> <Isofruit> And pass that as first parameter, which could have `preDelete, postDelete, preCreate, postCreate, preUpdate, postUpdate` values
[13:35:42] <FromDiscord> <Rika> Ew
[13:36:26] <FromDiscord> <Elegantbeef> So what you'd send a set
[13:37:23] <FromDiscord> <Isofruit> signal(signalType, ... wait no that idea is silly, the Django way is likely highly inefficient since they literally cycle over a list of signals and filter them out based in these inputs
[13:37:36] <FromDiscord> <Isofruit> While I can just insert the right one with generics
[13:37:38] <FromDiscord> <Elegantbeef> I mean you can do it statically
[13:38:19] <FromDiscord> <Elegantbeef> You can do `signal(sigTyp: static SignalType)` and do `when sigType == preDelete`
[13:38:21] <FromDiscord> <Isofruit> In reply to @Elegantbeef "Or name it `deleteEntryWithSignal`": The goal is for me to not have to think about signals for the most part, that bit of Django magic I'd like to replicate
[13:38:34] <FromDiscord> <Elegantbeef> This isnt shit i know so i dont know
[13:38:51] <FromDiscord> <Rika> “I don’t know so I don’t know”: what you just said
[13:39:06] <FromDiscord> <Elegantbeef> Thanks capt
[13:53:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[13:54:04] <FromDiscord> <ynfle> Is the only way to write at compiel time staticexec?
[13:54:36] <FromDiscord> <evoalg> I'm glad I'm not the only one who doesn't like defer ... I only saw it a few days ago and I thought to me myself "I'm not gonna use that because it's horrible"
[13:55:38] <FromDiscord> <Rika> In reply to @evoalg "I'm glad I'm not": Why?
[13:57:09] <FromDiscord> <ynfle> Is there any issue with writefile and compile time? why do we have staticread then?
[13:59:21] <FromDiscord> <Rika> Afaik it’s fine to do static: write
[13:59:25] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3MpG
[13:59:36] <FromDiscord> <Rika> In reply to @Isofruit "<@!259277943275126785>  <@!145405730571288577> ": Congratulations
[13:59:44] <FromDiscord> <evoalg> In reply to @Rika "Why?": The reason I didn't like it was because it made things unclear (to me) as opposed to some sort of block (like try finally), and if I didn't use it in a proc it wouldn't close for ages etc ... and that's bad enough, but then I found out today it doesn't have a new scope (like try finally does)
[13:59:46] <FromDiscord> <Isofruit> (edit) "https://play.nim-lang.org/#ix=3MpG" => "https://play.nim-lang.org/#ix=3MpH"
[14:00:33] <FromDiscord> <Rika> I don’t like either, I’d prefer RAII
[14:00:43] <FromDiscord> <Rika> And destructors are pretty close to it
[14:00:45] <FromDiscord> <Rika> Hehe close
[14:01:25] <FromDiscord> <evoalg> RAII?
[14:01:49] <FromDiscord> <Elegantbeef> Arc basically
[14:01:59] <FromDiscord> <Elegantbeef> Where you have destructors that are called when objects are done with
[14:02:30] <FromDiscord> <evoalg> ohhh
[14:02:36] <FromDiscord> <Rika> When something goes out of scope it also does close and stuff is how I explain
[14:02:55] <FromDiscord> <Rika> “Resource allocation is instantiation” or something
[14:03:02] <FromDiscord> <evoalg> nice 🙂
[14:03:06] <FromDiscord> <Rika> Making variables == using resource
[14:03:08] <FromDiscord> <Elegantbeef> intialization?
[14:03:21] <FromDiscord> <Rika> Whatever, same banana
[14:04:18] <FromDiscord> <evoalg> I've also gone off `collect` for the same reason
[14:13:14] <FromDiscord> <Isofruit> Is this not how you're supposed to get the compiler to shut up about unreachable code:↵{.hint[UnreachableCode]: off.} ?
[14:23:53] <FromDiscord> <evoalg> I suspect a template has it's own scope, even though it's all in-lined into the place it's called
[14:24:36] <FromDiscord> <evoalg> and that's why it's var aren't accessible ... but I also suspect it's more complicated than that
[14:24:58] <FromDiscord> <Rika> “Own scope” no
[14:25:18] <FromDiscord> <Rika> “It’s variables are essentially inaccessible from the outside unless forced to” yes
[14:25:27] <FromDiscord> <evoalg> ok
[14:25:47] <FromDiscord> <Rika> The variable names are “obfuscated”
[14:26:10] <FromDiscord> <evoalg> ok I see ... and they aren't freed
[14:26:15] <FromDiscord> <evoalg> of mem
[14:27:43] <FromDiscord> <Rika> It’s usually negligible anyway
[14:28:29] <FromDiscord> <evoalg> ok thx!
[14:54:01] <FromDiscord> <01> when interoping with Python/Java, can i also use pip installed modules, and java packages from maven central?
[14:54:49] <FromDiscord> <01> (edit) "Python/Java," => "Python/Java (pynim, jnim),"
[14:54:54] <FromDiscord> <01> (edit) "(pynim," => "(nimpy,"
[14:56:17] <FromDiscord> <Recruit_main707> i think you can with nimpy at least
[14:58:52] <FromDiscord> <01> what about C interop, can i just work with regular functions in C file, or do i need a DLL?
[14:59:43] <FromDiscord> <Recruit_main707> you can do both
[15:03:42] <FromDiscord> <01> neat
[15:04:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[15:53:09] <NimEventer> New Nimble package! nimkov - Text generator, based on Markov Chains (Markov text generator), see https://github.com/bit0r1n/nimkov
[16:29:29] <adigitoleo> how can I go from `r"\tfoo"` to `"\tfoo"` (applying the escaping rules to the raw string)
[16:30:54] <adigitoleo> raw string is coming in from a stream
[16:39:41] <adigitoleo> use case is reading single byte char from command line into an option argument
[16:44:07] <FromDiscord> <demotomohiro> How about to replace "\\t" to "\t" using some proc in strutils module.
[16:44:35] <FromDiscord> <demotomohiro> "\\\\t" to "\t"
[16:47:47] <FromDiscord> <demotomohiro> !eval import strutils; echo r"foo\tbar".replace("\\\\t", "\t")
[16:47:52] <NimBot> foo\tbar
[16:49:09] <FromDiscord> <demotomohiro> !eval import strutils; echo r"foo\tbar".replace("\\t", "\t")
[16:49:14] <NimBot> foo	bar
[16:52:11] <FromDiscord> <demotomohiro> Discord automatically convert "\\\\t" to "\t" and Nimbot takes text as I wrote. It confusing.
[16:57:16] <adigitoleo> yeah thanks for the tips, looks like it could work once I clean up some other bugs I just found in my code :)
[17:07:02] <adigitoleo> I guess what I really want to do is `r"foo\tbar".replace("\\\\t", '\t')` but there's no method, I'll have to detect the `\` and replace `t` instead. Not too bad I suppose
[17:13:29] <NimEventer> New thread by Piyushrungta25: Program does not compile with ARC/ORC, see https://forum.nim-lang.org/t/8812
[17:31:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:54:32] *** Joins: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de)
[18:01:04] <FromDiscord> <auxym> Anyone know if there's a way to get the nimcache path in a static/compile-time context? Like getting a macro or compiletime proc to write a file in the nimcache dir?
[18:01:51] <FromDiscord> <xflywind> In reply to @auxym "Anyone know if there's": https://nim-lang.org/docs/compilesettings.html#querySetting%2CSingleValueSetting
[18:03:07] <FromDiscord> <auxym> thanks @xflywind
[18:03:22] <FromDiscord> <xflywind> no problem
[18:28:30] *** Joins: arkurious (~arkurious@user/arkurious)
[19:10:31] <FromDiscord> <enthus1ast> i wish there where a resonable orm for nim, or at least a\: map db return strings to objects thing
[19:10:45] <FromDiscord> <enthus1ast> databases with nim are terrible imho
[19:12:11] <FromDiscord> <enthus1ast> best is to still write everything by hand, also map everything by hand \:/
[19:15:15] *** Joins: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de)
[19:22:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[19:23:11] <FromDiscord> <Isofruit> ?↵Like, I know norm has its limitations, but it's at lot saner in my eyes than parsing your entire db input by hand
[19:24:10] <FromDiscord> <Isofruit> The only "hash" limitation I see currently is that you can't properly fetch across multiple many-to-many relationships in one go
[19:24:15] <FromDiscord> <Isofruit> (edit) ""hash"" => ""harsh""
[19:25:50] <FromDiscord> <Isofruit> But I guess that's from the standpoint that you only use norm for DML and do DDL by hand
[19:26:45] <FromDiscord> <Isofruit> (edit) "that's" => "my position is"
[19:32:04] <FromDiscord> <enthus1ast> norm is full of hacks; buggy/different between sqlite and postgres; ormin would be nice when some more "manual" queries would be allowed
[19:32:17] <FromDiscord> <enthus1ast> i'll try gatebase now, lets see what this can offer
[19:33:24] <FromDiscord> <enthus1ast> in general, i find it quite amusing, that in todays world, databases still are that $hit to use, everything is string, but all the applications use structures and objects etc...
[19:34:18] <FromDiscord> <enthus1ast> databases do not reflect the normal useage at all its funny
[19:35:48] <FromDiscord> <leorize> ndb is a db module that lets you get non-string out of db
[19:43:40] <yann-kaelig> Hello
[19:45:11] <yann-kaelig> Well, so I'm learning C++ and Nim in parallel as a beginner in both languages, I found a very good course in my native language for C++ and my idea is to port it to Nim as possible.
[19:46:12] <yann-kaelig> A very good pedagogical book I'm going to use as material for the Nim language. 
[19:51:51] <yann-kaelig> So, this book start with the header file <iostream> I suppose that in Nim it's : system/io 
[19:52:09] <FromDiscord> <Rika> no
[19:52:19] <FromDiscord> <Rika> you do not import system or io manually in nim
[19:52:28] <FromDiscord> <Rika> they are implicitly imported
[19:58:19] <FromDiscord> <demotomohiro> You can use echo or stdout without importing system/io.
[19:58:25] <NimEventer> New thread by Aquachain: Closure and for loop problem, see https://forum.nim-lang.org/t/8813
[19:58:31] <FromDiscord> <demotomohiro> !eval stdout.write("Hello world")
[19:58:35] <NimBot> Hello world
[20:01:06] <yann-kaelig> That was exaclty my next questions. First I found this link about stdout https://nim-lang.org/docs/io.html#stdout but I don't find the stdout.write, where it comes from ? And second , maybe it's a stupid question because I'm noob, but what's the difference between echo and stdout.write
[20:02:07] <FromDiscord> <Rika> echo also adds line end \n
[20:02:12] <FromDiscord> <Rika> and has a few other differences
[20:02:24] <FromDiscord> <Rika> here is write https://nim-lang.org/docs/io.html#write%2CFile%2Cvarargs%5Bstring%2C%5D
[20:05:58] <FromDiscord> <demotomohiro> echo is a proc you can easily print message on stdout. `write` proc is for write text to file.
[20:06:49] <FromDiscord> <enthus1ast> write can also print on stdout, but does not append a newline, good for prompts etc
[20:08:52] <yann-kaelig> well, I missed something because how do you know that you can construct stdout.write. Each VARS can be completed with a PROCS with a form VARS.PROCS ? Where is this explained
[20:09:50] <FromDiscord> <Rika> https://nim-lang.org/docs/manual.html#procedures-method-call-syntax
[20:13:01] <FromDiscord> <demotomohiro> !eval echo("foo"); "foo".echo; echo "foo"; echo"foo"
[20:13:05] <NimBot> foo↵foo↵foo↵foo
[20:13:11] <FromDiscord> <Rika> "foo".echo is so cursed
[20:15:01] <FromDiscord> <demotomohiro> If you learn C++ and Nim in parallel, you will encounter same words used in different meaning.↵Template in C++ is similar to generics in Nim.↵Template in Nim is similar to macro in C++.↵As far as I know, there is nothing in C++ that corresponding to the macro in Nim.
[20:16:21] <FromDiscord> <Rika> brand new custom preprocessor :inatehe:
[20:36:12] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[20:56:41] <Amun-Ra> demotomohiro: like a definition of object in C and… everywhere else ;)
[21:25:46] <yann-kaelig> So, I'm testing this code stdout.writeline 'CDE' which is wrong and I understand that but I was curious to see the error output during the compilation and I get that: "Error: missing closing ' for character literal" The poitn is that  Ido not understand what does that mean, there is nothing missing in my point of view about the signle quotes ?! 
[21:26:13] <yann-kaelig> single*
[21:30:09] <Amun-Ra> hm?
[21:30:18] <yann-kaelig> the same error message output happen if I run echo 'ABC'
[21:32:01] <yann-kaelig> run/compile my code
[21:32:04] <Amun-Ra> multi-character literals are not supported in Nim
[21:33:53] <Amun-Ra> (they were inherited in C from B, and are, thankfully, long gone)
[21:35:25] <Amun-Ra> yann-kaelig: a character literal is a sequence of charactes/escape sequences enclosed in single quotation mars, the number of allowed characters enclosed in Nim is 1
[21:36:24] <yann-kaelig> ok, I see.  Also is there any difference in Nim between echo "A" and echo 'A' or also stdout.write "B" and stdout.write 'B' 
[21:36:47] <Amun-Ra> 'A' is char, "A" is string
[21:37:06] <Amun-Ra> there's no difference when echoing
[21:37:21] <Amun-Ra> well, almost no difference
[21:37:48] <Amun-Ra> proc echo*(x: varargs[typed, `$`]) {.magic: "Echo", benign, sideEffect.}
[21:40:40] <FromDiscord> <demotomohiro> !eval typeof('A'), " ", typeof("A")
[21:40:43] <NimBot> Compile failed: /usercode/in.nim(1, 12) Error: invalid indentation
[21:41:09] <FromDiscord> <demotomohiro> !eval echo typeof('A'), " ", typeof("A")
[21:41:13] <NimBot> char string
[21:41:35] <FromDiscord> <demotomohiro> !eval echo typeof("A"[0])
[21:41:39] <NimBot> char
[21:42:15] <FromDiscord> <demotomohiro> So string is like array of chars.
[21:42:22] <FromDiscord> <mlokis> In reply to @demotomohiro "!eval echo typeof("A"[0])": what? shouldn't that be a byte? or char is alias for byte here
[21:43:08] <Amun-Ra> mlokis: byte is an alias for uint8
[21:43:23] <Amun-Ra> chars and bytes are different kind of octets
[21:43:40] <FromDiscord> <mlokis> I just remembered that nim does not have char as u32
[21:44:15] <FromDiscord> <demotomohiro> !eval echo char.low, " ", byte.low
[21:44:47] <FromDiscord> <mlokis> In reply to @Amun-Ra "chars and bytes are": whats the difference? they are both 8bit wide, is there a sign difference?
[21:45:33] <FromDiscord> <mlokis> !eval askjdalskdjl
[21:45:35] <NimBot> Compile failed: /usercode/in.nim(1, 1) Error: undeclared identifier: 'askjdalskdjl'
[21:45:55] <FromDiscord> <mlokis> !eval echo char.low
[21:46:08] <FromDiscord> <mlokis> hmmm?
[21:46:17] <FromDiscord> <mlokis> bot has a bug i guess
[21:46:40] <FromDiscord> <demotomohiro> !eval echo char.low.int, " ", char.high.int
[21:46:40] <nrds> <06Prestige99> maybe it's down?
[21:46:44] <NimBot> 0 255
[21:46:50] <nrds> <06Prestige99> oh weird
[21:47:40] <Amun-Ra> mlokis: the difference is pretty a type
[21:47:48] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3MtY does not output anything lol
[21:47:59] <FromDiscord> <demotomohiro> Output of `echo char.low` is empty and NimBot do nothing?
[21:48:19] <FromDiscord> <demotomohiro> !eval char.low
[21:48:22] <NimBot> Compile failed: /usercode/in.nim(1, 5) Error: expression 'low(char)' is of type 'char' and has to be used (or discarded)
[21:48:22] <Amun-Ra> mlokis: a char is kinda distinct uint8
[21:48:30] <FromDiscord> <demotomohiro> !eval char.low.int
[21:48:33] <NimBot> Compile failed: /usercode/in.nim(1, 9) Error: expression 'int(low(char))' is of type 'int' and has to be used (or discarded)
[21:48:46] <FromDiscord> <demotomohiro> !eval echo char.low
[21:48:57] <FromDiscord> <demotomohiro> !eval echo char.low.int
[21:49:00] <NimBot> 0
[21:52:55] <FromDiscord> <mlokis> In reply to @Amun-Ra "<@343028072095809536>: a char is": well, what i have done in my language is that when you use `'c'` it will be the UTF code-point but it will have type `uint32` might that be a bad thing? this makes adding code-points more natural at least but mainly its simpler.
[21:53:27] <FromDiscord> <mlokis> (edit) "`uint32` might" => "`uint32`. Can"
[21:55:18] <FromDiscord> <demotomohiro> That sound like char in rust lang.
[21:55:54] <FromDiscord> <mlokis> sent a code paste, see https://play.nim-lang.org/#ix=3Mu7
[21:56:55] <FromDiscord> <mlokis> In reply to @demotomohiro "That sound like char": well it would make 'č' invalid if it were byte
[21:57:05] <FromDiscord> <mlokis> (edit) "'č'" => "`'č'`"
[21:57:37] <FromDiscord> <mlokis> !eval import osproc
[21:57:42] <NimBot> <no output>
[21:58:09] <FromDiscord> <mlokis> !eval import osproc;runCmd("echo hello")
[21:58:13] <NimBot> Compile failed: /usercode/in.nim(1, 15) Error: undeclared identifier: 'runCmd'
[21:58:23] <FromDiscord> <demotomohiro> !eval import osproc; execCmd("echo hello")
[21:58:27] <NimBot> Compile failed: /usercode/in.nim(1, 23) Error: expression 'execCmd("echo hello")' is of type 'int' and has to be used (or discarded)
[21:58:43] <FromDiscord> <mlokis> !eval import osproc; discard execCmd("echo hello")
[21:58:48] <NimBot> hello
[21:59:06] <FromDiscord> <mlokis> hmm what if i use little bit more agressive command
[21:59:19] <FromDiscord> <mlokis> !eval import osproc; discard execCmd("echo exit")
[21:59:23] <NimBot> exit
[21:59:33] <FromDiscord> <mlokis> !eval import osproc; discard execCmd("exit")
[21:59:36] <NimBot> <no output>
[21:59:52] <FromDiscord> <mlokis> too bad
[22:00:30] <FromDiscord> <demotomohiro> exit command just quits shell
[22:01:04] <FromDiscord> <mlokis> well i guess it runs it in separate environment
[22:01:57] <FromDiscord> <mlokis> !eval import osproc; discard execCmd("cd \\ | rm -rf")
[22:02:00] <NimBot> sh: cd: line 1: can't cd to  
[22:02:25] <FromDiscord> <demotomohiro> !eval import osproc; echo execProcess("nim", args = ["-v"], options = {poUsePath})
[22:02:30] <NimBot> Compile failed: Nim Compiler Version 1.4.8 [Linux: amd64]↵Compiled at 2022-01-14↵Copyright (c) 2006-2021 by Andreas Rumpf↵↵git hash: 44e653a9314e1b8503f0fa4a8a34c3380b26fff3↵active boot switches: -d:release↵
[22:03:11] <FromDiscord> <mlokis> !eval import osproc; discard execCmd("cd / | rm -rf")
[22:03:12] <FromDiscord> <demotomohiro> !eval echo NimVersion
[22:03:15] <NimBot> 1.4.8
[22:03:17] <NimBot> <no output>
[22:03:40] <FromDiscord> <mlokis> !eval import osproc; echo execCmd("cd / | rm -rf")
[22:03:44] <NimBot> 0
[22:04:10] <FromDiscord> <mlokis> is this a right command, well i guess its in virtual enviroment
[22:04:30] <FromDiscord> <mlokis> it would be really unfortunate
[22:04:30] <FromDiscord> <Rika> its a docker container
[22:04:38] <FromDiscord> <Rika> not much you can do from there
[22:04:56] <FromDiscord> <mlokis> In reply to @Rika "not much you can": thats goot i just hed some fun
[22:05:05] <FromDiscord> <mlokis> (edit) "hed" => "had"
[22:05:17] <FromDiscord> <mlokis> (edit) "thats goot" => "that's good"
[22:06:40] <FromDiscord> <mlokis> !eval import osproc; discard execCmd("cat > program.txt")
[22:06:45] <NimBot> sh: can't create program.txt: Permission denied
[22:06:55] <FromDiscord> <mlokis> oh no
[22:11:52] <FromDiscord> <demotomohiro> !eval echo staticExec("gcc -v")
[22:11:55] <NimBot> Compile failed: /usercode/in.nim(1, 16) Error: 'staticExec' can only be used in compile-time context
[22:12:15] <FromDiscord> <demotomohiro> !eval static: echo staticExec("gcc -v")
[22:12:19] <NimBot> <no output>
[22:14:23] <FromDiscord> <demotomohiro> !eval echo static staticExec("gcc -v")
[22:14:27] <NimBot> Using built-in specs.↵COLLECT_GCC=gcc↵COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-alpine-linux-musl/6.4.0/lto-wrapper↵Target: x86_64-alpine-linux-musl↵Configured with: /home/buildozer/aports/main/gcc/src/gcc-6.4.0/configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --build=x86_64-alpine-linux-musl --host=x86_64-alpine-linux-musl --target=x86_64-alpine-linux-musl --with-pkgversion='Alpine 6.4.0' --enable-checking=relea...
[22:16:04] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[22:23:01] <yann-kaelig> Something which I'm not sure I'm interpreting correctly.1) echo len "abc" > the lenght of the string, right?. 2) echo len {'a', 'b', 'c'} > the lenght of ? What's the brackets meaning ? 3) echo len 'a' > Error: type mismatch: got <char>. Is it possible to get the lenght of a char ? 
[22:24:28] <yann-kaelig> I was expecting that echo len 'a' gives me something like 1, but it's not the case
[22:26:10] <Amun-Ra> len != sizeof
[22:27:07] <Amun-Ra> {…} is a set
[22:27:37] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[22:27:40] <FromDiscord> <huantian> Chars are always 1 char so len has no meaning
[22:27:58] <FromDiscord> <huantian> Or rather is useless
[22:31:54] <yann-kaelig> That was I guessed before I run the compilation, but now I don't understand in this case why it is seen as an error even if it's useless.
[22:32:49] <FromDiscord> <huantian> Because there is no len price defined for char
[22:32:55] <FromDiscord> <huantian> proc
[22:33:54] <FromDiscord> <demotomohiro> !eval echo typeof({'a', 'b'})
[22:33:57] <NimBot> set[char]
[22:34:20] <Amun-Ra> !eval typeof({'a'})
[22:34:23] <NimBot> Compile failed: /usercode/in.nim(1, 7) Error: expression 'typeof({'a'})' is of type 'type set[char]' and has to be used (or discarded)
[22:35:16] <FromDiscord> <demotomohiro> !eval echo len {'a', 'b', 'a', 'b'}
[22:35:20] <NimBot> 2
[22:35:28] <Amun-Ra> fairen enough (just wanted to check whether echo is the default)
[22:37:03] <FromDiscord> <demotomohiro> If you want to learn about set type: https://nim-lang.org/docs/manual.html#types-set-type
[22:39:52] <NimEventer> New thread by Jf1: Cleanup at program end - open files automatically closed?, see https://forum.nim-lang.org/t/8814
[22:45:33] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[23:04:02] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[23:19:45] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[23:24:17] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:27:31] <yann-kaelig> pretty nice that in Nim a division of two integer like 9 / 2 give a floating point result. I can not find how to use modulo in Nim
[23:28:10] <yann-kaelig> 9 % 2 doesn't work
[23:32:08] <FromDiscord> <that_dude> It's mod not %
[23:33:08] <FromDiscord> <that_dude> So 9 mod 2
[23:34:30] <FromDiscord> <huantian> And floor division is div
[23:34:47] <FromDiscord> <huantian> In case you wanted that too
[23:35:05] <FromDiscord> <that_dude> Actually though, why isn't % mapped to mod?
[23:43:03] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[23:44:20] <FromDiscord> <yallxe> In reply to @that_dude "Actually though, why isn't": i think mod is like more readable
[23:49:47] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
