[00:07:37] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 240 seconds)
[00:08:08] *** Joins: beco (~beco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76)
[00:10:50] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:11:10] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:12:03] <pa> is there a way to iterate a ::map and remove elements during the iteration?
[00:13:22] <pa> for example like some qt way    for (k in map.keys()) {...}
[00:13:22] <cbreak> pa: sure. that's what https://en.cppreference.com/w/cpp/container/map/erase_if is for
[00:13:30] <pa> ah thanks checking
[00:13:31] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:13:38] <TinoDidriksen> Yes, .erase() returns the new iterator.
[00:13:50] <TinoDidriksen> Use a normal for loop, not range-for.
[00:14:13] <cbreak> if you want to do it the old-school way, yes: https://en.cppreference.com/w/cpp/container/map/erase
[00:14:25] <cbreak> you'd either ++ the iterator, or replace it with the result from erase
[00:15:32] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[00:15:37] *** Quits: Guest5267 (~Marurucha@47.185.63.177) (Ping timeout: 240 seconds)
[00:15:43] <PJBoy> +1 for std::erase_if
[00:16:11] <PJBoy> even if you're not C++20, I'd copy the cppreference implementation and use your own erase_if clone
[00:21:09] *** Joins: sbrothy (~sbrothy@192038134048.mbb.telenor.dk)
[00:22:44] *** Joins: Guest5267 (~Marurucha@47.185.63.177)
[00:26:01] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[00:27:39] *** Quits: sbrothy (~sbrothy@192038134048.mbb.telenor.dk) (Quit: leaving)
[00:30:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:702c:f538:99a2:cdd0)
[00:30:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:702c:f538:99a2:cdd0) (Changing host)
[00:30:20] *** Joins: skapata (~Skapata@user/skapata)
[00:32:59] <anyone> pa: "k in map.keys()" is pretty inefficient. First you extract all keys (essentially iterating over all buckets), then iterating _again_ over that set...
[00:33:56] *** Joins: sbrothy (~sbrothy@192038134048.mbb.telenor.dk)
[00:34:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:25] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:34:40] *** Joins: ultsllt (~ultsllt@50.231.5.242)
[00:35:01] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:40:21] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:40:34] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[00:40:41] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[00:41:29] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[00:41:50] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:6405:7d50:9b0e:b742)
[00:41:50] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:6405:7d50:9b0e:b742) (Changing host)
[00:41:50] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:52:32] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Ping timeout: 240 seconds)
[00:53:20] *** Quits: beco (~beco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76) (Quit: Leaving)
[00:56:49] *** Quits: Guest5267 (~Marurucha@47.185.63.177) (Ping timeout: 256 seconds)
[00:57:43] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[00:58:25] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:01:01] *** Quits: c4017w__ (~c4017@2605:8d80:4e1:336:6462:cec4:311f:f3ce) (Ping timeout: 240 seconds)
[01:04:32] *** Joins: MatSharrow (~matthew@55.20.9.51.dyn.plus.net)
[01:06:52] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Read error: Connection reset by peer)
[01:07:08] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[01:14:04] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 250 seconds)
[01:14:19] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[01:14:28] *** Joins: c4017w (~c4017@209.52.68.8)
[01:16:03] *** Joins: thad_the_man_2 (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[01:16:48] *** Quits: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Remote host closed the connection)
[01:18:27] *** Quits: magla (~gelignite@55d450c5.access.ecotel.net) (Quit: Stay safe!)
[01:18:57] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 240 seconds)
[01:19:37] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 240 seconds)
[01:23:19] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:24:28] *** Joins: Telvana (~capo@user/telvana)
[01:28:06] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:30:38] *** Joins: Markow (~Markow@176.122.215.103)
[01:32:01] *** Quits: Markow (~Markow@176.122.215.103) (Remote host closed the connection)
[01:33:43] *** Joins: Markow (~Markow@176.122.215.103)
[01:35:02] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[01:35:34] *** Quits: Markow (~Markow@176.122.215.103) (Remote host closed the connection)
[01:35:49] *** Quits: andreasbuhr (~quassel@p549db3ef.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:36:10] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[01:40:40] <evelyette> Why does this work https://godbolt.org/z/h1P471K9E if the std::string_view is immediately destroyed ?
[01:40:47] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:41:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:42] *** ChanServ sets mode: +v npaperbot
[01:42:06] <evelyette> Why does https://www.youtube.com/watch?v=d_E-VLyUnz say that string_view can safely outlive their parent?
[01:42:26] *** Joins: Guest5267 (~Marurucha@47.185.63.177)
[01:43:32] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[01:43:56] <kalven> that youtube link doesn't seem to work
[01:44:03] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:45:32] *** Quits: Guest5267 (~Marurucha@47.185.63.177) (Client Quit)
[01:46:02] <AliceMeows> It doesn't work because its missing a character
[01:46:44] <imMute> evelyette: it works because the place that the string_view points to is the buffer managed by the std::string, which didn't move somewhere else in that time
[01:47:08] <evelyette> https://www.youtube.com/watch?v=d_E-VLyUnzc
[01:47:49] <evelyette> The author of the video says that some types can safely outlive their parent, like std::string_view and std::span.
[01:47:53] <evelyette> But I'm not sure why
[01:47:56] *** Joins: leeyefei (~leeyefei@223.81.207.2)
[01:48:46] <imMute> they can't, legally
[01:50:28] <ville> you just can't do much with them
[01:52:00] <evelyette> What does an author mean by that then?
[01:53:10] <evelyette> Why would it be useful to have dangling string_view and why is it useful to declare them std::ranges::enable_borrowed_range (this will return a dangling iterator not a std::ranges::dangling)
[01:54:37] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Ping timeout: 240 seconds)
[01:55:30] *** Quits: stanrifkin_ (~stanrifki@p508d4eab.dip0.t-ipconnect.de) (Quit: Leaving)
[01:57:07] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Remote host closed the connection)
[01:57:25] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[02:02:02] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:03:40] *** Quits: Leone (~Leo@216.154.23.229) (Read error: Connection reset by peer)
[02:04:17] *** Joins: ic3blx_ (~ic3blx___@87.116.166.221)
[02:04:17] *** Quits: ic3blx_ (~ic3blx___@87.116.166.221) (Changing host)
[02:04:17] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[02:05:12] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[02:06:25] *** Joins: Markow (~Markow@176.122.215.103)
[02:07:14] *** Quits: Markow (~Markow@176.122.215.103) (Remote host closed the connection)
[02:07:39] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:08:01] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Remote host closed the connection)
[02:10:21] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[02:11:09] *** Joins: pulse (~pulse@user/pulse)
[02:13:20] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[02:14:48] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:15:02] *** Quits: darksis (~user@user/darksis) (Ping timeout: 256 seconds)
[02:18:25] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:26:01] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[02:26:04] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:27:20] <PJBoy> I've never thought about keeping string_view and span iterators about after the view/span dies
[02:27:44] <PJBoy> as far as I can tell they seem to be valid
[02:28:18] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:28:32] <PJBoy> the iterators of containers like vector et al are invalid after those containers die because their elements are destroyed and the memory deallocated
[02:28:53] <PJBoy> but string_view and span don't do anything to their elements when they die
[02:29:42] <PJBoy> and I guess that's formalised in the standard by opting into enable_borrowed_range
[02:30:29] *** Joins: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036)
[02:33:43] *** Quits: pizdets_ (~pizdets@183.182.115.221) (Ping timeout: 256 seconds)
[02:34:10] *** Joins: pizdets (~pizdets@183.182.114.221)
[02:35:56] *** Joins: pulse_ (~pulse@user/pulse)
[02:38:49] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[02:39:57] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[02:41:24] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[02:43:09] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:43:49] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:45:03] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:45:03] *** Quits: p|q (~plq@94.54.154.86) (Ping timeout: 256 seconds)
[02:45:45] *** Joins: f0xb4t (~mac@jebsie.pl)
[02:45:48] <f0xb4t> hey
[02:46:26] <ic3blx_> yoo
[02:54:10] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[02:54:17] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:54:33] *** Quits: ultsllt (~ultsllt@50.231.5.242) (Remote host closed the connection)
[02:54:34] *** Quits: smach (~savio@177.12.44.211) (Read error: Connection reset by peer)
[02:54:41] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[02:55:40] <f0xb4t> with code as follows: https://ideone.com/elnxRN is it guaranteed that it will be always continous block of memory https://ideone.com/elnxRN starting from *(*result) ?
[02:56:02] *** Joins: kit_ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[02:56:33] <f0xb4t> I think that it not, but not so sure
[02:56:42] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:56:49] <f0xb4t> s/not/doesn't
[02:57:16] *** Joins: Markow (~ejm@176.122.215.103)
[02:57:53] <f0xb4t> when every element of **result[] can in fact point to any memory address
[02:58:37] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:59:01] *** Quits: Markow (~ejm@176.122.215.103) (Remote host closed the connection)
[02:59:22] *** Quits: kit-ten (~u0_a391@2600:380:8815:93a5:db4b:61ad:43f8:6363) (Ping timeout: 250 seconds)
[03:00:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Quit: Leaving)
[03:01:12] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:01:16] *** Joins: Markow (~ejm@176.122.215.103)
[03:01:43] *** Quits: jsbach (~jsbach@2a01:c22:b1a3:2100:1231:a644:6bb9:9dd9) (Quit: Leaving)
[03:02:19] *** Joins: jsbach (~jsbach@2a01:c22:b1a3:2100:1231:a644:6bb9:9dd9)
[03:02:43] *** Quits: Markow (~ejm@176.122.215.103) (Remote host closed the connection)
[03:03:03] *** Joins: AmR (~AmREiSa@156.199.9.4)
[03:03:23] <PJBoy> absolutely not guaranteed
[03:04:33] <f0xb4t> then to be able to send such a 2d table through MPI I need to flatten it before to get continuous block?
[03:04:58] *** Quits: cosimone (~user@93-44-185-255.ip98.fastwebnet.it) (Ping timeout: 268 seconds)
[03:05:12] <Oxyd> Yes.
[03:05:18] <Oxyd> Or just have a flat array to begin with.
[03:05:58] <f0xb4t> unfortunately external implementation that provides input data send it in such way with array of pointers to pointers
[03:06:23] <PJBoy> fyi https://ideone.com/6O0l2E
[03:07:03] <Oxyd> Then your question is a bit pointless, because whether or not your data is going to be stored contiguously depends on whether or not the external implementation stores it contiguously. So you should consult that implementation's manual.
[03:07:11] <PJBoy> you can allocate a flat array and just calculate the pointers to each row
[03:08:01] *** Joins: c4017w (~c4017@209.52.68.8)
[03:09:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8d4d:eeb3:fd66:5d10) (Ping timeout: 240 seconds)
[03:09:59] *** Quits: sbrothy (~sbrothy@192038134048.mbb.telenor.dk) (Read error: Connection reset by peer)
[03:10:32] <f0xb4t> Oxyd: I know that is is not guaranteed in such situation
[03:10:43] <f0xb4t> PJBoy: I'm not sure what do you mean?
[03:11:11] <PJBoy> f0xb4t, like so https://ideone.com/e5HQNQ
[03:11:12] *** Quits: kit_ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Quit: WeeChat 3.0.1)
[03:11:30] *** Joins: Markow (~ejm@176.122.215.103)
[03:11:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:939:6a42:860e:8603)
[03:12:03] *** Quits: Markow (~ejm@176.122.215.103) (Remote host closed the connection)
[03:12:31] <PJBoy> `result` is an array of pointers to a row of doubles
[03:12:40] <f0xb4t> PJBoy: oh right, now I gget what you mean
[03:12:41] <PJBoy> those rows of doubles being contiguous data in `buffer`
[03:12:47] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[03:13:09] <PJBoy> of course now result and buffer are in two different places, but eh
[03:13:30] <f0xb4t> just populate 'rows' array of pointers to pointers with pointers to next rows but from continuous big array
[03:13:38] <PJBoy> but if you care, you could allocate the buffer and result together, with one after the other in memory
[03:13:48] <PJBoy> yeah
[03:14:30] <PJBoy> actually forget that allocating them together thing
[03:14:46] <PJBoy> it's good enough as is
[03:14:51] <f0xb4t> but in such situation I can provide to MPI &result which in fact gives me pointer to buffer
[03:23:06] *** Parts: Kit (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com) (https://kit.osmarks.net/note.php?irc)
[03:27:37] *** Joins: AmR| (~AmREiSa@156.199.9.4)
[03:27:58] *** Quits: AmR (~AmREiSa@156.199.9.4) (Ping timeout: 250 seconds)
[03:29:49] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:30:36] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[03:31:09] *** Quits: clime (~clime@78-80-113-95.customers.tmcz.cz) (Quit: WeeChat 3.3)
[03:31:40] *** Joins: karakedi (~eAC53C340@user/karakedi)
[03:31:47] *** AmR| is now known as AmR
[03:34:57] *** Joins: regreg (~regreg@2a02:2f09:500b:8000:3502:5982:40f9:22bb)
[03:35:56] *** Joins: jkaye (~jkaye@2601:281:8300:7530:cf1a:5f6d:9faa:a84e)
[03:38:02] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Remote host closed the connection)
[03:40:52] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:41:20] *** Quits: samuelbernardo (~samuelber@194.210.119.251) (Quit: ZNC 1.8.2 - https://znc.in)
[03:41:35] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[03:44:02] *** Joins: Markow (~ejm@176.122.215.103)
[03:48:38] *** Joins: ic3blx_ (~ic3blx___@87.116.166.221)
[03:48:38] *** Quits: ic3blx_ (~ic3blx___@87.116.166.221) (Changing host)
[03:48:38] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[03:49:58] *** Quits: Markow (~ejm@176.122.215.103) (Quit: Leaving)
[03:53:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:939:6a42:860e:8603) (Ping timeout: 240 seconds)
[03:54:57] *** Joins: Markow (~ejm@176.122.215.103)
[03:55:39] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Remote host closed the connection)
[03:57:03] *** Quits: regreg (~regreg@2a02:2f09:500b:8000:3502:5982:40f9:22bb) (Read error: Connection reset by peer)
[03:58:03] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:58:56] *** Joins: regreg (~regreg@2a02:2f09:500b:8000:2c46:a2e6:76aa:adf3)
[04:05:23] *** Joins: ic3blx_ (~ic3blx___@87.116.179.30)
[04:05:24] *** Quits: ic3blx_ (~ic3blx___@87.116.179.30) (Changing host)
[04:05:24] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[04:05:31] *** Joins: Betal (~Betal@user/betal)
[04:08:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:08:53] *** Joins: ferdna (~ferdna@user/ferdna)
[04:10:15] *** Quits: slidercrank (~slidercra@user/slidercrank) (Read error: Connection reset by peer)
[04:11:00] *** Quits: Markow (~ejm@176.122.215.103) (Quit: Leaving)
[04:12:19] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:13:54] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[04:20:57] *** Quits: MatSharrow (~matthew@55.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[04:21:00] *** pulse_ is now known as pulse
[04:21:19] *** Joins: Markow (~ejm@176.122.215.103)
[04:22:32] *** Joins: chenqisu1 (~bhca7d@183.217.200.249)
[04:22:46] *** Quits: Markow (~ejm@176.122.215.103) (Remote host closed the connection)
[04:24:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[04:25:17] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[04:26:14] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-65df-a0f5-02cd-1378.res6.spectrum.com) (Remote host closed the connection)
[04:28:34] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:29:33] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b52d:73d3:33d2:6e5)
[04:29:54] *** Quits: sigma_ (~sigma@164.215.210.250) (Quit: Konversation terminated!)
[04:32:21] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c)
[04:32:26] *** Quits: regreg (~regreg@2a02:2f09:500b:8000:2c46:a2e6:76aa:adf3) (Ping timeout: 260 seconds)
[04:33:45] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:36:37] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[04:37:57] <f0xb4t> thanks guys
[04:37:58] *** Joins: Markow (~Markow@176.122.215.103)
[04:39:54] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Remote host closed the connection)
[04:40:59] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:41:43] *** Joins: seres (~reptile_3@2601:14f:8004:ca60::6)
[04:44:36] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[04:45:12] *** Quits: seres (~reptile_3@2601:14f:8004:ca60::6) (Quit: Leaving)
[04:45:33] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[04:46:26] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Read error: Connection reset by peer)
[04:46:45] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[04:47:11] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[04:51:59] *** Joins: Markow (~Markow@176.122.215.103)
[04:52:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[05:02:56] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:05:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b52d:73d3:33d2:6e5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:06:43] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[05:09:00] *** Quits: Markow (~Markow@176.122.215.103) (Remote host closed the connection)
[05:09:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:09:51] *** Joins: Markow (~Markow@176.122.215.103)
[05:12:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:20:24] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:26:22] *** Joins: peoliye (~peoliye@205.251.233.182)
[05:27:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:cf1a:5f6d:9faa:a84e) (Ping timeout: 240 seconds)
[05:31:37] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600d4131a7310185ff6.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[05:34:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:34:30] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[05:38:23] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[05:40:26] *** Joins: Markow (~Markow@176.122.215.103)
[05:41:27] *** Joins: ic3blx_ (~ic3blx___@87.116.166.221)
[05:41:27] *** Quits: ic3blx_ (~ic3blx___@87.116.166.221) (Changing host)
[05:41:27] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[05:41:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:42] *** ChanServ sets mode: +v npaperbot
[05:42:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[05:51:28] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[05:53:05] *** Joins: Markow (~Markow@176.122.215.103)
[05:57:29] *** Quits: Markow (~Markow@176.122.215.103) (Client Quit)
[05:59:21] *** Quits: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573) (Quit: Konversation terminated!)
[06:02:06] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:05:27] *** Joins: Markow (~Markow@176.122.215.103)
[06:09:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:11:17] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 240 seconds)
[06:12:35] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:13:35] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:13:48] *** Joins: Betal (~Betal@user/betal)
[06:14:22] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 250 seconds)
[06:19:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:22:34] <AliceMeows> https://godbolt.org/z/PcjWbYnMq is this code legal or not?
[06:23:02] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 250 seconds)
[06:23:49] <anyone> is there a reason to believe it's not?
[06:24:01] <AliceMeows> gcc refuses to accept it
[06:24:06] <AliceMeows> I wasn't sure if its a bug or not
[06:26:37] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:26:59] <anyone> You've got me there.
[06:29:06] *** Quits: foul_owl (~kerry@174-21-143-101.tukw.qwest.net) (Ping timeout: 250 seconds)
[06:29:37] *** Joins: Atque (~Atque@user/atque)
[06:34:37] *** Quits: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[06:34:58] *** Joins: neet (~neet@rrcs-98-6-15-18.sw.biz.rr.com)
[06:35:18] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:36:38] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:40:50] <leeyefei> https://ftp.bmp.ovh/imgs/2022/01/c41aebc6c46cfc69.png
[06:42:26] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[06:43:09] *** Joins: foul_owl (~kerry@94.140.8.105)
[06:46:01] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:46:57] *** Joins: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com)
[06:47:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:48:19] *** Joins: tesuji_ (~quassel@2a02:908:180:9500:a0da:e697:f0fa:d750)
[06:50:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[06:51:38] *** Quits: tesuji (~quassel@2a02:908:180:9500:ccb5:e540:a362:3cbf) (Ping timeout: 250 seconds)
[06:57:37] *** Quits: proller (~p@2a02:6b8:b081:8832::1:8) (Ping timeout: 240 seconds)
[07:00:29] *** Quits: equinox[m] (~momoshiki@2001:470:69fc:105::fe92) (Quit: Client limit exceeded: 20000)
[07:02:49] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:06:48] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 250 seconds)
[07:07:24] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[07:10:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:13:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:14:21] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:16:41] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[07:18:33] *** Quits: neet (~neet@rrcs-98-6-15-18.sw.biz.rr.com) (Ping timeout: 256 seconds)
[07:21:05] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[07:24:13] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[07:24:38] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[07:25:02] *** Joins: frost (~frost@user/frost)
[07:25:49] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 268 seconds)
[07:29:18] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[07:31:00] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:36:46] <AliceMeows> How portable is it to copy a struct that has standard layout to some buffer?
[07:36:47] *** Joins: equinox[m] (~momoshiki@2001:470:69fc:105::fe92)
[07:39:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[07:39:29] <Alipha> ideally, you'd do memberwise proper serialization/deserialization
[07:41:03] <AliceMeows> I just wanted to preserve alignment but I guess not
[07:42:42] <AliceMeows> I could just hack it up with offsetof but I'm not gonna bother its too much of a pain as it is already
[07:45:02] *** Quits: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036) (Ping timeout: 240 seconds)
[07:47:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:48:23] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:49:36] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:52:06] *** Joins: regreg (~regreg@2a02:2f09:500b:8000:b086:9dc7:c98e:4f69)
[07:55:11] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:56:20] *** Joins: Atque (~Atque@user/atque)
[07:58:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:00:41] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[08:02:49] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:04:23] *** Joins: walterwhip (~www@user/walterwhip)
[08:04:49] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:09:03] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c)
[08:10:24] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[08:10:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:14:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[08:15:30] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[08:21:40] <ville> 14: https://timsong-cpp.github.io/cppwp/n4140/temp.expl.spec#2 17: https://timsong-cpp.github.io/cppwp/n4659/temp.expl.spec#2
[08:22:09] <ville> seems like it should be alright since 17
[08:22:54] *** Joins: millido (~millido@84.210.150.128)
[08:27:13] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[08:29:37] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[08:31:48] *** Quits: jsbach (~jsbach@2a01:c22:b1a3:2100:1231:a644:6bb9:9dd9) (Ping timeout: 268 seconds)
[08:33:11] *** Joins: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022)
[08:35:22] <leeyefei> 这里有用中文交流的吗
[08:35:52] *** Joins: frost (~frost@user/frost)
[08:39:37] <RandomReader> no, english ... sorry :(
[08:39:39] *** Joins: AssKoala (~asskoala@user/asskoala)
[08:41:44] *** Joins: Viewday116 (~Viewday@user/viewday)
[08:41:54] <leeyefei> 好吧
[08:41:58] <leeyefei> 明白了
[08:42:16] <leeyefei> 大家主要用什么linux系统
[08:43:19] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:43:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[08:43:32] *** Viewday116 is now known as Viewday11
[08:44:19] *** Joins: jsbach (~jsbach@2a01:c23:6050:ea00:c1f4:19f5:bcd2:3ab7)
[08:47:39] *** ChanServ sets mode: +o ville
[08:48:04] *** leeyefei was kicked by ville (english)
[08:51:38] *** Joins: walterwhip (~www@user/walterwhip)
[08:52:36] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[08:56:35] *** Joins: walterwhip (~www@user/walterwhip)
[08:57:11] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:58:13] *** Quits: walterwhip (~www@user/walterwhip) (Max SendQ exceeded)
[09:01:12] *** ville sets mode: -o ville
[09:01:30] *** Joins: Burgundy (~NA@86.121.143.206)
[09:09:34] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:11:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:12:12] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Quit: symb0l)
[09:12:28] *** Joins: Viewday112 (~Viewday@user/viewday)
[09:13:41] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[09:14:03] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:14:03] *** Viewday112 is now known as Viewday11
[09:14:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[09:16:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:18:33] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Quit: symb0l)
[09:20:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[09:24:07] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:24d0:1b76:7dc4:51ff)
[09:24:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:25:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[09:25:39] *** Quits: TOB_CyxoB (~TOB_CyxoB@gateway/tor-sasl/tobcyxob/x-83841022) (Quit: Leaving)
[09:29:42] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[09:31:51] *** Joins: pottsy (~pottsy@129.227.183.244)
[09:35:19] *** Quits: Shikadi (~Shikadi@50.125.190.237) (Ping timeout: 256 seconds)
[09:36:22] <pottsy> Hi folks. I'm using this trick: https://stackoverflow.com/a/45001134/303662 to make sure some condition is used by the optimiser
[09:36:55] <pottsy> How can I ask clang to give more details (i.e. a real stacktrace) on when the compiler fails to optimise out a condition?
[09:38:02] <pottsy> For example, in https://gcc.godbolt.org/z/faeY74axW I'd like it to point to line 21 as well as line 13
[09:40:43] <AssKoala> why exactly are you trying to optimize this? will it actually make any difference when you run it?
[09:41:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:43] *** ChanServ sets mode: +v npaperbot
[09:41:48] <pottsy> I have a somewhat niche use-case but essentially I need to tell the compiler that some conditions will never occur at runtime
[09:42:15] <AssKoala> why not just #if them out instead of relying on the optimizer to maybe do it?
[09:42:30] <pottsy> it's not an option
[09:42:45] <pottsy> the code still has to be there, it just must be removed by the optimiser
[09:43:00] <TinoDidriksen> Why?
[09:43:02] <AssKoala> what happens if its not removed?
[09:43:16] <AssKoala> I mean, is it a security issue? a perf issue? etc?
[09:43:25] <pottsy> for some context I'm using a custom gcc+clang-based compiler to write FPGA stuff
[09:43:43] <TinoDidriksen> If it's removed by the optimizer, then it's removed. Same as #if
[09:44:00] <AssKoala> what TinoDidriksen said
[09:44:26] <pottsy> it's more like I need to do `assert(index < size)` somewhere to tell the compiler something
[09:44:31] *** Joins: Viewday112 (~Viewday@user/viewday)
[09:44:59] <pottsy> `if (index >= size) { __builtin_unreachable(); }`    <-- I need to do this but check that the compiler propagates the condition upwards
[09:45:03] <pottsy> the latter part is what I'm stuck on
[09:46:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:46:40] *** Viewday112 is now known as Viewday11
[09:46:50] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:48:07] <AssKoala> wait a second, you need to make sure it doesn't optimize it out?
[09:48:25] <AssKoala> like you need to call a function at runtime for unreachable code?
[09:48:26] <TinoDidriksen> So, you want the side effect of the compilation, but not the resulting code.
[09:48:49] <pottsy> TinoDidriksen: yes exactly
[09:49:44] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.32) (Ping timeout: 250 seconds)
[09:51:33] <TinoDidriksen> __builtin_unreachable or throw is a fair way to do that, but none are guaranteed to elide the code.
[09:54:30] *** Quits: emerent (~quassel@p200300cd5704433eba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:54:35] *** Joins: emerent_ (~quassel@p200300cd57044312ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:54:35] *** emerent_ is now known as emerent
[09:56:42] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Quit: Leaving)
[09:58:06] <pottsy> okay, thanks
[09:58:23] <pottsy> related: how can I express that dereferencing some pointer is valid?
[09:58:48] <pottsy> i.e. for `char foo[10];` I can do `assert(index < 10);` but for some `char* foo`, what can I do?
[09:59:13] <pottsy> wait. it's already UB to deref a bad pointer so I guess I don't need to
[09:59:25] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[09:59:54] <TinoDidriksen> You can deref it.
[10:00:08] <TinoDidriksen> There was a famous bug regarding exactly that optimization.
[10:00:35] <AssKoala>  lol
[10:08:47] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[10:11:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:11:47] *** Joins: Viewday116 (~Viewday@user/viewday)
[10:12:42] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 250 seconds)
[10:13:27] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[10:13:27] *** Viewday116 is now known as Viewday11
[10:15:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:15:27] *** Quits: wielding (~wielding@user/wielding) (Quit: Client limit exceeded: 20000)
[10:18:34] *** Joins: p|q (~plq@94.54.154.86)
[10:20:07] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:21:37] *** Quits: chozorho (~chozorho@2601:146:300:c30::1e6f) (Ping timeout: 240 seconds)
[10:22:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:22:53] *** Joins: chozorho (~chozorho@2601:146:300:c30::5869)
[10:24:03] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[10:24:51] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[10:44:31] *** Joins: evelyette (~Eleanor@178.79.105.181)
[10:45:36] *** Quits: mattf_ (~mattf@li908-138.members.linode.com) (Ping timeout: 256 seconds)
[10:45:38] *** Joins: sam113102 (~sam@modemcable229.128-202-24.mc.videotron.ca)
[10:46:29] *** Quits: blinky42 (~quassel@user/blinky42) (Quit: No Ping reply in 180 seconds.)
[10:46:30] *** Joins: nurupo_ (~nurupo.ga@user/nurupo)
[10:46:32] *** Joins: BinarySavior_ (~BinarySav@josh.vet)
[10:46:32] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[10:46:44] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Ping timeout: 256 seconds)
[10:46:44] *** Quits: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca) (Ping timeout: 256 seconds)
[10:46:46] *** sam113102 is now known as sam113101
[10:47:18] *** Quits: edr (~edr@user/edr) (Ping timeout: 256 seconds)
[10:47:18] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Ping timeout: 256 seconds)
[10:49:08] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[10:49:09] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[10:49:09] *** Joins: blinky42 (~quassel@user/blinky42)
[10:50:01] *** nurupo_ is now known as nurupo
[10:52:28] *** Joins: edr (~edr@enlo.co)
[10:52:28] *** Quits: edr (~edr@enlo.co) (Changing host)
[10:52:28] *** Joins: edr (~edr@user/edr)
[10:56:07] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:00:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:06:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:08:10] *** Quits: peoliye (~peoliye@205.251.233.182) (Quit: Client closed)
[11:12:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:12:15] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[11:13:42] *** Joins: rendar (~rendar@user/rendar)
[11:14:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:15:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[11:20:56] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[11:21:47] *** Joins: Uswald (~leandre@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr)
[11:21:47] *** Quits: Uswald (~leandre@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr) (Changing host)
[11:21:47] *** Joins: Uswald (~leandre@user/Uswald)
[11:22:22] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:24:09] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[11:25:22] *** tayy_ is now known as tayy
[11:29:20] <fluter> hi, how can i reset a variant to initial state?
[11:29:21] *** Joins: wielding (~wielding@user/wielding)
[11:30:22] <megaTherion> fluter: assignment?
[11:30:35] <fluter> megaTherion: assign to what?
[11:30:40] <megaTherion> identity?
[11:30:49] <fluter> i mean reset to the state that it doesn't contain any object
[11:30:52] <fiesh> x = decltype(x){}
[11:30:56] <fluter> what is identity?
[11:31:01] <megaTherion> wouldnt x = {} suffice?
[11:31:07] <fiesh> oh yeah indeed
[11:31:30] <fluter> what does std::varaint<int,std::string> x; x={}; do?
[11:31:35] <fluter> it set x = 0 ??
[11:31:39] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[11:32:02] <megaTherion> it does the thing you wanted
[11:32:13] <fiesh> geordi: std::variant<int, std::string> x; x = {}; SHOW(x);
[11:32:13] <geordi> error: 'x' does not name a type
[11:32:22] <fiesh> oh only works for types, what's it, PRINT?
[11:32:41] <fluter> why can't there be x.reset() ?
[11:33:00] <megaTherion> fluter: https://en.cppreference.com/w/cpp/utility/variant/variant <- I guess that would be 2)
[11:34:07] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:34:42] <fluter> also why this method: valueless_by_exception
[11:34:49] <fluter> it's name is very strange
[11:35:04] <fluter> isn't x.empty() better?
[11:35:32] <megaTherion> fluter: I think you come from a Java background? You imply some OOP style here
[11:35:37] <megaTherion> but a variant is absolutly nothing about OOP
[11:35:55] <fluter> megaTherion: why not?
[11:36:11] <megaTherion> its more a functional concept (or at least coming from that background)
[11:36:15] <fluter> It's an object that holds staff
[11:36:21] <megaTherion> wrong thinking, its a type
[11:36:26] <megaTherion> as all the other types :)
[11:37:03] <megaTherion> of course you can program OOP without problems in C++, but the language itself holds a lot of concepts not coming from a strict OOP background
[11:37:26] <fluter> hmm allright
[11:37:47] *** Joins: bobb_ (~bobb_@dslb-088-066-131-071.088.066.pools.vodafone-ip.de)
[11:38:01] <fluter> hmm, how can i check that if a variant does not hold any valid data? valueless_by_exception is only about constructions it looks
[11:38:21] <fluter> std::variant<int, std::string> x;  x.index() returns 0
[11:38:29] <fluter> i expect it to be some kindof -1
[11:38:50] <megaTherion> fluter: do you confuse variant with optional?
[11:39:08] <fluter> what do you mean?
[11:39:24] <megaTherion> https://en.cppreference.com/w/cpp/utility/variant/variant_npos
[11:39:28] <fluter> std::variant<int, std::string> x;   what does this mean?
[11:39:31] <megaTherion> you can use this of course, but not sure if that would be a good thing
[11:39:39] *** Joins: luizfrds (~Luiz@152.250.243.147)
[11:39:57] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[11:39:58] <megaTherion> fluter: dont rely on unassigned variables (or member variables)
[11:40:25] <osse> fluter: v.index() == std::variant_npos
[11:40:32] <fluter> so I need to supply a variant to a callback, how do i know it is set properly after it returns?
[11:40:39] <osse> and you're right, it is actually -1
[11:40:52] <fluter> osse: std::variant<int, std::string> x;  x.index() returns 0 , it is not equal to variant_npos
[11:41:11] <megaTherion> fluter: use std::optional<T>
[11:41:18] <osse> huh, strange
[11:41:39] <fluter> optional is on single type, variant is on multiple types, which is my case
[11:41:48] <fluter> i have variant of 6 types
[11:41:49] <megaTherion> fluter: optional of your variant type
[11:41:50] <osse> fluter: oh, the default constructor constructs the first alternative...
[11:42:02] <fluter> osse: :( why it do that??
[11:42:11] <osse> dunno'
[11:42:15] <megaTherion> because relying on unassignment (UB)  is error prone
[11:42:23] <megaTherion> its bad concept to reason for a variant to have nothing
[11:42:27] <megaTherion> thats what optional is for
[11:42:45] <fluter> hmmmm
[11:42:49] <fluter> okay
[11:42:52] <osse> std::variant<std::monostate, int, stdd:string>
[11:42:54] <osse> yaay
[11:42:58] <fluter> let me try optional
[11:43:02] <fluter> ooooh!
[11:43:13] <osse> but I think optional is better for your usecase
[11:43:42] <megaTherion> fluter: if types get too long, use aliases like using MyVariant = std::variant<int, std::string>
[11:44:11] <fluter> megaTherion: right, good idea, will change to alias
[11:45:24] <AliceMeows> https://godbolt.org/z/K6T3bKr57 gcc breaks with internal error
[11:45:26] *** Joins: jellie (~luv_panda@user/jellie)
[11:45:48] <AliceMeows> Older gcc actually compiles it
[11:46:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:50:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[11:53:45] *** Joins: cosimone (~user@93-44-184-251.ip98.fastwebnet.it)
[11:57:36] <Kerr> If I want to implement a stack datastructure, should I just use std::vector, or should I encapsulate std::vector and only allow my stack to be accessed in the ways it's meant to in my program? It's to be a part of a larger object.
[11:58:52] <markand> even though some people hate that, I would inherit from std::vector if I really need to add additional functions
[11:59:24] <fiesh> I would hate that, there's a broader consensus on "composition over inheritance"
[11:59:45] <fluter> hmm, is it good practice to have variant of types with difference sizes?
[11:59:48] <fiesh> Kerr: I'd use std::stack (which uses std::vector anyhow iirc), but if that's not an option, I'd encapsulate the std::vector
[11:59:59] <markand> sure, but the good thing is that you can just pass this collection to standard algorithms as well
[12:00:30] <Kerr> fiesh: Ty, I'm new to C++ and didn't know that std::stack existed.
[12:01:21] <fiesh> Kerr: yw -- it defaults to std::deque btw, just checked, but you can also make it use std::vector instead
[12:01:22] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:01:32] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:01:50] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[12:07:28] <Kerr> std::deque is perfectly fine for my purpose. thanks again :)
[12:07:46] *** Quits: regreg (~regreg@2a02:2f09:500b:8000:b086:9dc7:c98e:4f69) (Read error: Connection reset by peer)
[12:09:03] <megaTherion> fluter: sure its size shouldnt matter. By size you mean amount of types it can represent?
[12:09:31] <fluter> megaTherion: no, i mean the sizeof(T) of each alternative types
[12:09:48] <megaTherion> wouldnt bother
[12:09:59] <fluter> megaTherion: like std::variant<int, BigType> where BigType is 100 bytes
[12:10:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Read error: Connection reset by peer)
[12:10:10] <fluter> i found that each variant is more than 100 bytes,
[12:10:16] <fluter> even when it does not hold BigType
[12:10:45] <megaTherion> why would you care about N bytes?
[12:11:24] *** Quits: chozorho (~chozorho@2601:146:300:c30::5869) (Quit: WeeChat 3.0)
[12:11:30] <fluter> not really, im' just wondering will there be any issues, like performance etc
[12:11:31] *** Joins: regreg (~regreg@2a02:2f09:500b:8000:4598:d534:fe43:8800)
[12:11:37] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Quit: Leaving)
[12:11:47] <leduyquang753> A union has to be as big as the biggest type.
[12:12:29] <fluter> for union i know, variant is a class type
[12:12:44] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:12:57] <leduyquang753> Which is just a wrapper around union.
[12:13:01] <megaTherion> fluter: if your target architecture is a 386...well... I dont know - too much decades ago for me :D
[12:13:35] <fluter> i'm on x64 linux with gcc9 :D so i guess nothing to worry!
[12:16:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:23:03] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:23:42] <ville> fluter: you do have things to worry
[12:24:05] <fluter> ville: what is that?
[12:24:49] <ville> fluter: if you have multiple instances (N) of some type and you perform some operation on "all" of them then larger the N the more important it likely becomes you don't waste bytes
[12:25:32] <ville> fluter: if your operation only touches subset of bytes on each instance then you're wasting memory bandwidth.
[12:25:38] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[12:26:35] <fluter> ville: this is like a streaming processing, i keep reading data from socket, deserialize and construct a variant of the message, and pass the variant down for each down stream processors to handle
[12:26:36] <ville> fluter: as a silly example if you have a bool member on a type and that's all you touch, then you're wasting 87.5% of your memory bandwidth
[12:26:49] <fluter> does this look a valid use case of variant
[12:27:30] <fluter> i just take a closer look, the types in the variant varies from 50 byts to 500 bytes in size
[12:27:37] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:28:10] <ville> everything is valid* until you have a running system you can measure
[12:29:02] <fluter> heh okk
[12:29:31] <ville> i guess a more fun example if you have struct aa { foat x, y, z; big_type w; }; and your operation only touches x, y, z. you're wasting sizeof(big_type)/sizeof(aa) of your memory bandwidth then on that operation
[12:29:54] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:30:08] *** Quits: sielicki1 (~sielickim@2001:470:69fc:105::f45) (Quit: You have been kicked for being idle)
[12:30:51] <ville> if your message handling takes 1% of the complete processing time of the system then it's sort of pointless to spend any time thinking what would be "the best way"
[12:31:36] *** Joins: clime (~clime@78-80-113-95.customers.tmcz.cz)
[12:32:34] <ville> with out a running system you can only make educated guesses about where an actual implementation of the system will bottleneck
[12:33:39] <ville> taken in isolation it is possibly reasonable to say it's "bad" that you have a union over types where some are 5 bytes and others are 500 bytes. taken in context of an actual running system it may br competely irrelevant point
[12:36:24] <ville> fluter: you may enjoy this video: https://player.vimeo.com/video/649009599 yes it's completely different programming language but the lessons apply
[12:37:11] * fluter watches
[12:37:26] <ville> if nothing else the only lesson to take away from it is that they had a running system and they measured it
[12:47:18] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.32)
[12:59:17] *** Joins: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:02:17] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.32) (Remote host closed the connection)
[13:07:25] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[13:09:06] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[13:09:42] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:09:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:10:37] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:12:30] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:13:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:13:25] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[13:13:54] *** Joins: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960)
[13:15:05] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:53] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[13:17:34] *** Joins: pottsy (~pottsy@129.227.183.244)
[13:20:11] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[13:26:04] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:29:26] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[13:29:52] *** Joins: Uswald` (~user@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr)
[13:29:59] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:30:01] *** Quits: Uswald` (~user@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:34:41] *** Uswald is now known as Uswald`
[13:34:59] *** Uswald` is now known as Uswald
[13:35:22] *** Joins: Uswald` (~user@user/Uswald)
[13:38:04] *** Joins: ivii (~ivan@2001:a62:4c3:8e01:fcf:cfae:b40d:7881)
[13:38:25] *** Joins: NEYi (~NEYi@109.251.216.38)
[13:39:14] *** Joins: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036)
[13:39:49] *** Quits: Uswald` (~user@user/Uswald) (Read error: Connection reset by peer)
[13:39:59] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:40:19] *** Quits: ivii (~ivan@2001:a62:4c3:8e01:fcf:cfae:b40d:7881) (Changing host)
[13:40:19] *** Joins: ivii (~ivan@user/ivii)
[13:40:27] *** Joins: Uswald` (~user@user/Uswald)
[13:40:56] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:41:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:43] *** ChanServ sets mode: +v npaperbot
[13:43:39] *** Joins: neure (~TimoSuora@dzpy88q4yyyyyyyyyyyyt-3.rev.dnainternet.fi)
[13:44:24] *** Joins: furrymcgee (~devuan@cgn-89-1-211-231.nc.de)
[13:44:27] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:46:12] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[13:48:51] *** Quits: Uswald` (~user@user/Uswald) (Read error: Connection reset by peer)
[13:56:18] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[13:57:05] *** Joins: Uswald` (~user@user/Uswald)
[13:58:50] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:59:33] *** Quits: Uswald` (~user@user/Uswald) (Read error: Connection reset by peer)
[14:03:00] *** Joins: seninha (~seninha@user/seninha)
[14:04:44] *** Joins: Uswald` (~user@user/Uswald)
[14:05:38] *** Quits: chenqisu1 (~bhca7d@183.217.200.249) (Ping timeout: 256 seconds)
[14:06:11] *** Joins: raekye2 (~raekye@creatifcubed.com)
[14:06:15] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:07:01] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:07:11] *** Quits: Uswald` (~user@user/Uswald) (Read error: Connection reset by peer)
[14:07:29] *** Joins: marlboro (~i.am@user/marlboro)
[14:08:15] *** Quits: raekye (~raekye@creatifcubed.com) (Ping timeout: 256 seconds)
[14:08:15] *** raekye2 is now known as raekye
[14:08:43] <AliceMeows> Is it possible to dynamic_cast memory buffer to T?
[14:09:20] *** Joins: Uswald` (~user@user/Uswald)
[14:09:44] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[14:10:05] <TinoDidriksen> Going from char* to T* requires reinterpret_cast. void* to T* can be done with static_cast
[14:10:37] <TinoDidriksen> dynamic_cast only makes sense when the runtime knows the polymorphic type, which it doesn't for char* or void*
[14:11:47] *** Quits: Uswald` (~user@user/Uswald) (Read error: Connection reset by peer)
[14:12:20] <anyone> dynamic_cast only makes sense when the type _is_ part of a polymorphic type hierarchy (that isn't the case for char/void) and the object actually is made from it (which is doubtful though not impossible when it's char/void)
[14:13:13] <AliceMeows> That's what I figured
[14:13:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:15:15] <AliceMeows> I'll probably have to hack something with type_index
[14:15:44] <anyone> for every untyped object you need to have a side channel of some sort to give yourself the info that it is (at the very least) a type of some poly hierarchy
[14:16:14] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[14:17:09] <anyone> e.g. reinterpret_cast<Base *>(buf) - if indeed all the bufs you will access contain Base -, then followed by dynamic_cast<Derived *>()
[14:17:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:17:51] <AliceMeows> The idea is to store data linearly in memory which the language does not permit so I'm hacking it to get it done and so far it works, I'm just trying to add some proper safety so it'll be less hackish
[14:18:55] <anyone> build with UBSAN, which will tell you problems you did not necessarily observe yet
[14:20:11] <TinoDidriksen> The language absolutely permits that? That's what vector does. That's what placement new is for.
[14:20:17] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[14:20:27] <AliceMeows> Not directly
[14:20:54] <AliceMeows> You can't just call emplace_back on a vector and have it accept any type with varying sizes
[14:21:02] <TinoDidriksen> Also, instead of hacking that, maybe just use a different allocator that automatically pools? There's many very good ones that can even be preloaded without changing the binary.
[14:21:27] <AliceMeows> Its more of a challenge really, I don't intend to use it for anything
[14:21:39] <Eelis> *facepalm*
[14:21:41] <AliceMeows> I just want to attempt to implement python's list
[14:22:09] <Shell> python's list is a list of pointers to objects. :p
[14:22:18] <Eelis> probably basically std::vector<std::any>
[14:22:43] <AliceMeows> I know it is but I'm trying to do the *impossible*
[14:23:35] <Eelis> seems misguided
[14:25:28] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[14:30:41] *** Joins: Uswald` (~user@user/Uswald)
[14:31:24] *** Quits: Uswald` (~user@user/Uswald) (Remote host closed the connection)
[14:35:42] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 3.4)
[14:35:42] *** Joins: pingpongball (~pingpongb@27.34.47.129)
[14:35:59] <pingpongball> Hey c++ guys
[14:36:09] <pingpongball> can i install qt6 in docker and run through that?
[14:37:14] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:a9ef:8cb1:3f34:9694)
[14:43:16] *** Joins: Markow (~Markow@176.122.215.103)
[14:52:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[14:57:31] <TinoDidriksen> pingpongball, off topic - ask #qt or #C++-general instead.
[15:01:01] *** Joins: jehelset (~jeh@2001:700:302:10::32)
[15:02:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[15:03:13] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[15:04:20] *** Joins: nshire_ (~nshire@47.146.41.156)
[15:05:54] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[15:06:04] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[15:06:37] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 240 seconds)
[15:09:53] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[15:12:45] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[15:14:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:15:38] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[15:18:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[15:18:19] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.32)
[15:20:07] *** Quits: pingpongball (~pingpongb@27.34.47.129) (Quit: Client closed)
[15:20:20] *** Joins: pingpongball (~pingpongb@27.34.47.129)
[15:22:52] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[15:27:49] *** Joins: sbrothy (~sbrothy@192038134048.mbb.telenor.dk)
[15:28:41] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Ping timeout: 245 seconds)
[15:31:22] *** Quits: jehelset (~jeh@2001:700:302:10::32) (Ping timeout: 260 seconds)
[15:33:12] *** Joins: pulse (~pulse@user/pulse)
[15:33:31] *** Joins: gareppa (~gareppa@user/gareppa)
[15:33:35] *** Joins: dracolide (~dracolide@203.189.118.253)
[15:33:55] *** Joins: Guest_2211 (~Guest_221@106.209.139.74)
[15:33:59] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:34:29] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[15:36:56] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:37:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:38:47] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[15:39:02] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[15:44:19] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[15:44:43] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:50:40] *** Joins: proller (~p@2a02:6b8:b081:a408::1:15)
[15:55:27] *** Quits: regreg (~regreg@2a02:2f09:500b:8000:4598:d534:fe43:8800) (Read error: Connection reset by peer)
[15:58:56] *** Quits: proller (~p@2a02:6b8:b081:a408::1:15) (Ping timeout: 250 seconds)
[16:02:20] *** Joins: Atque (~Atque@user/atque)
[16:04:05] *** Quits: pingpongball (~pingpongb@27.34.47.129) (Quit: pingpongball)
[16:05:46] *** Joins: Leone (~Leo@216.154.23.229)
[16:06:24] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[16:07:00] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:08:12] *** Quits: bobb_ (~bobb_@dslb-088-066-131-071.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[16:08:48] *** Joins: xkuru (~xkuru@user/xkuru)
[16:10:29] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Client Quit)
[16:10:54] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:14:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:17:40] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:18:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[16:19:51] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 268 seconds)
[16:20:15] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[16:20:37] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:24d0:1b76:7dc4:51ff) (Quit: Client closed)
[16:23:33] *** Joins: proller (~p@2a02:6b8:0:40c:da98:35d8:72d6:f735)
[16:30:30] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:34:47] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:41:52] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[16:46:02] *** Joins: pingpongball (~pingpongb@27.34.47.249)
[16:49:26] *** Quits: pingpongball (~pingpongb@27.34.47.249) (Client Quit)
[16:50:05] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[16:52:03] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:01:17] *** Joins: roadt (~roadt@36.5.93.137)
[17:03:25] *** Joins: Markow (~Markow@176.122.215.103)
[17:05:56] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[17:06:23] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:07:03] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:08:40] *** Joins: regreg (~regreg@2a02:2f09:500b:8000:dc:42d0:262e:3f86)
[17:10:57] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:12:17] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[17:14:38] *** Joins: lxsameer (lxsameer@user/lxsameer)
[17:15:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:15:25] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:18:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[17:20:23] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:51a2:6d65:9550:cfbf)
[17:24:32] *** Quits: sbrothy (~sbrothy@192038134048.mbb.telenor.dk) (Ping timeout: 240 seconds)
[17:25:27] <zen_coder> I want to invoke a function via template parameter, is this possible?
[17:26:11] <PJBoy> yeah why not
[17:26:20] <zen_coder> helper<func1, func2>(value);
[17:26:23] *** Joins: tradar (~tradar@user/tradar)
[17:26:24] <zen_coder> something like that?
[17:26:36] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[17:26:43] <PJBoy> { g<f>(); } void f() { BARK; } template<auto F> void g() { F(); }
[17:26:43] <geordi> f()
[17:26:56] <PJBoy> yeah something like that
[17:27:05] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:27:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:30:01] <zen_coder> PJBoy: I got a compile error here: https://ideone.com/iTR0lN
[17:31:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:32:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:33:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:34:45] <zen_coder> seems to work only when using "auto"
[17:34:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:35:42] <PJBoy> right
[17:35:46] <leduyquang753> Because you put a `typename` there.
[17:35:49] <PJBoy> because functions aren't types, they're objects
[17:36:01] <PJBoy> `auto` is a placeholder for an object
[17:36:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:36:06] <PJBoy> `typename` is a placeholder for a type
[17:37:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:37:47] <cbreak> zen_coder: normally callables are passed by value, in case they have state, see all the std::algorithms
[17:37:48] <zen_coder> PJBoy: since which standard can I use "auto"?
[17:38:02] <PJBoy> geordi, use --2014
[17:38:02] <geordi> error: 'auto' parameter not permitted in this context
[17:38:04] <PJBoy> geordi, use --2017
[17:38:05] <geordi> f()
[17:38:09] <PJBoy> C++17 apparently
[17:38:11] <cbreak> template<typename F> void foo(F f) { f(); } // like this
[17:38:29] <cbreak> this will work with lambdas that have captures too
[17:38:29] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:38:36] <cbreak> or bind expressions
[17:38:37] *** Quits: proller (~p@2a02:6b8:0:40c:da98:35d8:72d6:f735) (Ping timeout: 240 seconds)
[17:38:48] <zen_coder> so before c++17 I have to pass the function as paramter?
[17:39:14] <PJBoy> really depends on your goal tbh
[17:39:15] <cbreak> zen_coder: you'll have to write a type
[17:39:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:39:46] <zen_coder> cbreak: how does this type then look like?
[17:39:56] <cbreak> c++ types for functions are not fun to write...
[17:40:12] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[17:40:13] <PJBoy> { do_invoke<decltype(bark), bark>(); } void bark() { BARK; } template<typename F, F f> void do_invoke() { f(); } // there's this variation
[17:40:14] <geordi> bark()
[17:40:15] <cbreak> PJBoy's f is void(*)()
[17:40:58] <cbreak> { g<f>(); } void f() { BARK; } template<void(*F)()> void g() { F(); } // let's see if I got this right
[17:40:59] <geordi> f()
[17:41:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:41:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:38] <PJBoy> { g<f>(); } void f() { BARK; } template<void F()> void g() { F(); }
[17:41:39] <geordi> f()
[17:41:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:46] *** ChanServ sets mode: +v npaperbot
[17:42:01] <PJBoy> pointer is optional apparently
[17:42:05] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:43:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:44:03] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Quit: Leaving)
[17:44:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:45:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:45:57] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[17:46:18] *** Quits: p|q (~plq@94.54.154.86) (Remote host closed the connection)
[17:46:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:47:16] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:48:08] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[17:48:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:49:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:50:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:52:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:52:18] *** Quits: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 260 seconds)
[17:53:14] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 252 seconds)
[17:53:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:54:38] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:56:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:57:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:57:54] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[17:58:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:59:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:00:14] <CarloWood> I don't know why, but I keep trying to do:
[18:00:16] <CarloWood> { using S = N::S; } namespace N { static constexpr int S = 1; }
[18:00:16] <geordi> error: 'S' in namespace 'N' does not name a type
[18:00:35] <CarloWood> Hmm.
[18:00:48] <CarloWood> geordi: remove S =
[18:00:48] <geordi> error: String `S =` occurs multiple times.
[18:00:54] <CarloWood> geordi: remove first S =
[18:00:55] <geordi>  
[18:01:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:01:30] <CarloWood> But what if I want an alias with a different name? I have to use a reference? :/
[18:01:52] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[18:01:54] <CarloWood> { int const& S = N::Shift; } namespace N { static constexpr int Shift = 1; }
[18:01:55] <geordi>  
[18:02:05] <CarloWood> Is 'S' still a constexpr here?
[18:02:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:02:36] <megaTherion> I think its constexpr enough, since its a reference to one :D
[18:03:19] <megaTherion> you could just auto&& and leave all the decision to the compiler in the end
[18:03:44] <CarloWood> Hmm
[18:03:53] <CarloWood> Or just auto without &&?
[18:04:03] <megaTherion> that would be an explicit copy?
[18:04:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:04:13] <CarloWood> yeah, that would be mutable...
[18:05:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:06:36] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[18:06:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:07:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:08:00] *** Joins: Uswald (~leandre@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr)
[18:08:00] *** Quits: Uswald (~leandre@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr) (Changing host)
[18:08:00] *** Joins: Uswald (~leandre@user/Uswald)
[18:08:10] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:09:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:10:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:10:50] <Alipha> { int const& S = N::Shift; tuple<int, int> t{4, 8}; cout << get<S>(t); } namespace N { static constexpr int Shift = 1; }
[18:10:51] <geordi> 8
[18:11:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:12:02] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:12:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:14:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:15:24] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[18:15:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:15:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:15:50] *** Joins: jkaye (~jkaye@2601:281:8300:7530:ca78:9af1:544b:8917)
[18:16:41] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[18:17:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:17:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[18:18:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:19:08] *** Quits: ERROH (~mama@user/mama) (Remote host closed the connection)
[18:19:20] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[18:19:29] <ville> PJBoy: http://www.eelis.net/c++draft/intro.object#note-1
[18:19:50] <PJBoy> <_<
[18:20:00] <ville> (pointer-to-function is an object and a function implicitly converts to one)
[18:20:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:20:31] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[18:21:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:21:10] <PJBoy> explains why NTTPs are "non-type template parameter" rather than "object template parameter"
[18:22:25] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[18:22:50] *** Joins: fukuda (~fukuda@2804:431:c7f5:a3c3:9fdb:d7d3:c39f:3ce6)
[18:22:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:23:06] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[18:23:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:25:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:26:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:28:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:29:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:29:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Read error: Connection reset by peer)
[18:30:14] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:30:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:31:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:33:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:34:03] *** Quits: neure (~TimoSuora@dzpy88q4yyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[18:34:04] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[18:34:16] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:34:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:35:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:35:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:36:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:37:35] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:38:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:39:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:41:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:42:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:43:38] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[18:43:42] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:44:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:44:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:44:54] *** Joins: proller (~p@2a02:6b8:0:40c:d8bd:6086:1763:b64b)
[18:46:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:47:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:47:54] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[18:48:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:49:30] *** Joins: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[18:49:45] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[18:49:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:51:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:52:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:53:59] *** Joins: Atque (~Atque@user/atque)
[18:54:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:54:24] *** Joins: Guma (~Guma@185.203.219.174)
[18:55:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:55:52] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:56:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:57:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[18:57:59] *** Joins: frost (~frost@user/frost)
[18:59:01] *** Quits: dracolide (~dracolide@203.189.118.253) (Quit: Leaving)
[18:59:21] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[18:59:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:59:30] <Guma> I am trying to help one 3rd part provider to track their bug with their application on Linux. I do not have source and will not get it since I asked. They can not reproduce it and I get out of memory / machine lockups. Any suggestions what might be best way to handle this?
[19:00:10] *** Quits: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (Quit: Bye!)
[19:00:19] *** Joins: jbalint (~jbalint@097-090-242-068.res.spectrum.com)
[19:00:25] <megaTherion> Guma: no dice
[19:00:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:00:45] <megaTherion> they dont want you to help obviously
[19:02:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:02:15] *** Joins: RakoonBoy (~user@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr)
[19:02:22] *** Quits: RakoonBoy (~user@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[19:02:39] <Guma> I was hoping there might be some memory allocators that I can preload and trace allocations and at least have dresses and sizes
[19:03:12] *** Joins: pingpongball (~pingpongb@27.34.47.155)
[19:03:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:03:33] <megaTherion> Guma: it would be rather their job to apply some debug output/functions which then can be run on your machine producing more output
[19:04:13] <megaTherion> is it like a segfault, or memory leak - what kind of bug is this?
[19:04:31] <Guma> megaTherion I know I know :) but it has been 2 months and they trying. But can not get it working.
[19:04:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:05:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:05:56] <Guma> I believe it is a Qt application. I will try to look at symbols in it. But on start it allocates all memory on my machine. 64G RAM. So machine becomes very very slow and stops responding. So I have to reboot
[19:06:37] <megaTherion> *lol* at start... that should be easy to find? :D
[19:06:42] <Guma> I have very wide monitor. Their app have UI. When I change resolution to something much smaller then it starts and works fine
[19:06:46] <megaTherion> you see an UI or even before that?
[19:07:12] <megaTherion> oh ok... well that should be suggestions enough for them - I guess you can reproduce it on another machine?
[19:07:15] <megaTherion> maybe even in a VM?
[19:07:16] <Guma> So my workaround is to after boot change resolution, start app and change resolution back. It works
[19:07:26] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:07:41] <megaTherion> Guma: my next suggestion is, apply for a job position and tell them you are much better in debugging then they are :)
[19:07:52] <megaTherion> they cannot not accept this
[19:08:20] <Guma> I see frame only but client area of that window do not repair. So I am not sure if it is trying to resize to max size but desktop stops repainting and responding
[19:08:20] <megaTherion> ... then you simply sign the NDA, work one month and wonder on
[19:08:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:08:59] <Guma> megaTherion Awesome suggestion. You made my day :)
[19:10:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:10:37] <megaTherion> Guma: well.... of course you could install Qt debug libs, you could profile their application - maybe figure out which function consumes all the RAM... you might get an hex address for this
[19:10:57] <megaTherion> they could compare it with their executable... but Im not so sure how helpful this is without working with a debug executable
[19:11:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:11:34] <Guma> megaTherion I actually did fire such email with your suggestion. I also asked about debug build for same reason you suggested
[19:12:24] <Guma> My guess is it is something with Qt/Compiz/ultra wide resolution
[19:12:47] <Guma> I am running on Mate 20.04 by the way. Just a side note
[19:12:51] <megaTherion> but they dont really want to help you or? I mean like you gave them enough hints already but they are not corporating?
[19:12:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:13:09] <megaTherion> can you reproduce it in a VM? you could provide your VM image for them?
[19:13:49] <Guma> Well it is corporation. And you know how theses suckers work. Layers and managers.... == corporate firewall
[19:13:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:14:15] *** Joins: chozorho (~chozorho@2601:146:300:c30::2e50)
[19:15:36] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[19:15:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:15:45] <Guma> Well I never did think about VM. But I am thinking what would that provide. The issue is only when I am starting application in native monitor resolution. It is not the aspect ratio of the monitor since at lower resolution I found to keep the same aspect ratio it is not happening
[19:16:07] <megaTherion> well but as you said, its due the resolution - basically you can emulate any resolution in the VM as well
[19:16:14] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:16:17] <megaTherion> (as long as it fits on your screen?) Im thinking about like a virtualbox image or so
[19:16:36] <Guma> "49" CHG90 QLED Gaming Monitor"
[19:16:40] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:16:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:17:44] <Guma> Ok please reason about your VM idea. What would that prove. Are you thinking about clean image and perhaps there is something on my system? Try different bistro like vanilla Ubuntu 20.04?
[19:17:47] *** Joins: jellie (~luv_panda@user/jellie)
[19:18:11] <megaTherion> Guma: that would prove that you can reproduce it on a vm image - which you could transfer somewhere... like a generic environment
[19:18:25] <megaTherion> of course they can just get a 49 CHG90 or you could send it as a gift to them :D
[19:18:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:18:43] <Guma> Perhaps this conversation should be taken to other channel. This is C++ :) I do not want to be noise here about a different topic
[19:19:39] <Guma> I actually did send them my model and also exported copiz settings I exported, list of "apt list --installed" output and few more
[19:19:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:20:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[19:20:07] <megaTherion> Yeah its off topic...
[19:20:49] <Guma> Anyway. I was looking for allocator / some tool. So I will keep looking and trying. Maybe they will respond to my email. Anyway. Tx for a chat
[19:21:15] *** Joins: RakoonBoy (~user@user/Uswald)
[19:21:19] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:21:36] <megaTherion> Guma: as said, profiling - it is a way of figuring out which function consumes the most RAM...
[19:21:43] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[19:21:44] *** Quits: adder`` (~adder@user/adder) (Read error: Connection reset by peer)
[19:21:49] <megaTherion> you dont *require* a debug build... you'll get function addresses
[19:22:23] <megaTherion> there is of course no magic tool which provides you debug information you never received
[19:22:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:22:35] *** Joins: magla (~gelignite@55d4248d.access.ecotel.net)
[19:23:23] *** Joins: adder`` (~adder@user/adder)
[19:23:32] <Guma> I was thinking bout valgrind. But not sure if it applies here. I always used with source. But valgrind is is already CPU hog. All I was looking fora dress and size outout
[19:23:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:24:59] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:25:42] *** Joins: Markow (~Markow@176.122.215.103)
[19:26:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:27:17] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:27:30] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[19:27:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:29:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:30:22] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:30:48] *** Joins: ERROH (~mama@user/mama)
[19:31:32] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:33:59] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c)
[19:35:21] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:51a2:6d65:9550:cfbf) (Quit: Konversation terminated!)
[19:37:55] *** Quits: Guma (~Guma@185.203.219.174) (Quit: Good Night Everyone...)
[19:42:54] *** Joins: Shikadi (~Shikadi@50.125.190.237)
[19:48:13] *** Quits: Guest_2211 (~Guest_221@106.209.139.74) ()
[19:49:54] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 250 seconds)
[19:51:02] *** Joins: jellie (~luv_panda@user/jellie)
[19:53:26] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[19:53:44] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Read error: Connection reset by peer)
[19:54:19] *** Quits: cosimone (~user@93-44-184-251.ip98.fastwebnet.it) (Remote host closed the connection)
[19:54:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:55:47] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[19:56:05] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Read error: Connection reset by peer)
[19:57:32] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[19:57:47] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[19:58:50] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Remote host closed the connection)
[19:59:18] *** Joins: jellie (~luv_panda@user/jellie)
[20:00:59] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:02:24] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[20:03:16] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:03:41] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[20:06:40] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:09:24] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 250 seconds)
[20:09:28] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:09:52] *** Quits: RakoonBoy (~user@user/Uswald) (Ping timeout: 268 seconds)
[20:11:55] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[20:12:34] *** Quits: regreg (~regreg@2a02:2f09:500b:8000:dc:42d0:262e:3f86) (Quit: Leaving)
[20:13:09] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:13:55] *** Quits: rg (~r-g@51.159.55.86) (Quit: rg)
[20:16:05] *** Quits: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036) (Ping timeout: 250 seconds)
[20:16:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:20:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:21:29] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Quit: symb0l)
[20:21:46] *** Quits: pingpongball (~pingpongb@27.34.47.155) (Quit: Client closed)
[20:25:26] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[20:27:10] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.32) (Ping timeout: 250 seconds)
[20:27:49] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[20:29:08] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:29:30] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:35:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[20:37:48] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:39:14] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[20:40:03] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[20:45:40] *** Joins: seninha (~seninha@user/seninha)
[20:45:46] *** Joins: nomn (nomn@user/nomn)
[20:47:17] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[20:48:50] *** Quits: Major_Biscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 250 seconds)
[20:54:49] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[20:55:08] *** Joins: dllcache (~about@2401:4900:382e:de22:1:1:a6c8:d95)
[20:55:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[20:58:02] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 240 seconds)
[21:08:30] *** Quits: zeenk (~zeenk@2a02:2f04:a208:c500:649e:b5e2:d15c:7960) (Quit: Konversation terminated!)
[21:10:39] *** Quits: dllcache (~about@2401:4900:382e:de22:1:1:a6c8:d95) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[21:11:38] *** Joins: bobb_ (~bobb_@dslb-088-066-131-071.088.066.pools.vodafone-ip.de)
[21:12:04] *** Joins: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d)
[21:14:39] *** Joins: symb0l_ (~symb0l@user/symb0l)
[21:15:57] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: Textual IRC Client: www.textualapp.com)
[21:16:52] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[21:17:13] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:20:54] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[21:21:03] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c)
[21:23:32] *** Quits: pottsy (~pottsy@129.227.183.244) (Ping timeout: 250 seconds)
[21:24:18] *** Joins: pottsy (~pottsy@129.227.183.244)
[21:24:30] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[21:26:40] *** Joins: letto (~letto@86.120.81.105)
[21:28:57] *** Quits: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d) (Ping timeout: 240 seconds)
[21:29:25] *** Quits: letto (~letto@86.120.81.105) (Client Quit)
[21:29:54] *** Joins: letto (~letto@86.120.81.105)
[21:31:35] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 252 seconds)
[21:33:12] *** Joins: pingpongball (~pingpongb@27.34.47.155)
[21:33:33] *** Joins: jellie (~luv_panda@user/jellie)
[21:35:05] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Remote host closed the connection)
[21:35:19] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:24d0:1b76:7dc4:51ff)
[21:35:23] *** Quits: symb0l_ (~symb0l@user/symb0l) (Quit: symb0l_)
[21:37:32] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:38:36] *** Quits: pingpongball (~pingpongb@27.34.47.155) (Quit: Client closed)
[21:41:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:45] *** ChanServ sets mode: +v npaperbot
[21:42:05] *** Joins: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d)
[21:43:38] *** Quits: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d) (Client Quit)
[21:44:18] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 250 seconds)
[21:45:13] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4014:1b4f:f962:d9d9)
[21:45:13] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4014:1b4f:f962:d9d9) (Changing host)
[21:45:13] *** Joins: skapata (~Skapata@user/skapata)
[21:46:31] *** gentooclimax is now known as climax
[21:46:54] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[21:49:09] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 268 seconds)
[21:53:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[21:58:10] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Ping timeout: 250 seconds)
[21:58:54] *** Joins: tmm88 (~tmm88@user/tmm88)
[21:59:20] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[22:00:23] *** Joins: pulse (~pulse@user/pulse)
[22:00:44] *** Joins: sbrothy (~sbrothy@192038134048.mbb.telenor.dk)
[22:02:23] *** Quits: proller (~p@2a02:6b8:0:40c:d8bd:6086:1763:b64b) (Ping timeout: 252 seconds)
[22:02:47] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:03:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[22:04:00] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:04:58] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:05:44] *** Joins: RakoonBoy (~user@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr)
[22:08:07] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:09:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:09:57] *** Quits: RakoonBoy (~user@2a01cb040075f90080c5f313e1e329e0.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:10:01] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[22:12:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:12:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:14:36] *** Joins: useretail (~useretail@185.132.19.151)
[22:14:36] *** Quits: useretail (~useretail@185.132.19.151) (Client Quit)
[22:14:50] *** Joins: useretail (~useretail@185.132.19.151)
[22:14:58] *** climax is now known as gentooclimax
[22:15:55] *** Joins: tmm88_ (~tmm88@bl22-240-102.dsl.telepac.pt)
[22:17:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:18:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[22:21:08] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:21:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:23:42] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[22:23:44] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:30:50] *** Joins: peoliye (~peoliye@54-240-198-35.amazon.com)
[22:31:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:33:01] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:33:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:34:32] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[22:34:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:36:15] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[22:36:36] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[22:37:58] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:39:36] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:39:55] *** Quits: jkaye (~jkaye@2601:281:8300:7530:ca78:9af1:544b:8917) (Quit: Leaving)
[22:40:19] *** Quits: Cahaan (~Cahaan@user/cahaan) (Read error: Connection reset by peer)
[22:40:48] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:cd48:6f73:4bfa:ecd8)
[22:40:48] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:cd48:6f73:4bfa:ecd8) (Changing host)
[22:40:48] *** Joins: skapate (~Skapata@user/skapata)
[22:41:39] *** Quits: bobb_ (~bobb_@dslb-088-066-131-071.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[22:44:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[22:47:10] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[22:48:15] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[22:50:03] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[22:51:25] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[22:51:26] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600d4131a7310185ff6.ipv6.abo.wanadoo.fr)
[22:52:04] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:52:47] *** Joins: vicfred (~vicfred@user/vicfred)
[23:00:25] *** gentooclimax is now known as climax
[23:00:46] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:24d0:1b76:7dc4:51ff) (Quit: Client closed)
[23:02:19] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[23:02:36] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:2e92:133b:16d9:1409)
[23:02:43] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Leaving)
[23:04:02] *** Joins: ivii (~ivan@user/ivii)
[23:05:25] *** Joins: jackk (~jackiii@93-44-188-69.ip98.fastwebnet.it)
[23:05:59] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:28] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:6598:2294:f787:fa6c)
[23:08:48] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Ping timeout: 250 seconds)
[23:09:18] *** Joins: dsrt^ (~dsrt@50.231.5.242)
[23:10:00] *** Joins: stanrifkin (~stanrifki@p200300dbcf1a730043efbd2f467074e8.dip0.t-ipconnect.de)
[23:11:25] *** Joins: proller (~p@2a02:6b8:b081:8812::1:16)
[23:12:56] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[23:15:52] *** Quits: tmm88_ (~tmm88@bl22-240-102.dsl.telepac.pt) (Ping timeout: 256 seconds)
[23:16:25] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[23:17:27] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[23:18:15] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:21:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[23:22:27] *** Joins: andreasbuhr (~quassel@p549db532.dip0.t-ipconnect.de)
[23:23:01] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Ping timeout: 256 seconds)
[23:24:37] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[23:26:19] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:30:02] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:2e92:133b:16d9:1409) (Quit: Client closed)
[23:30:02] *** Joins: Kerr_ (~AdminUser@2601:602:ce01:1f0:2e92:133b:16d9:1409)
[23:30:05] *** Quits: Kerr_ (~AdminUser@2601:602:ce01:1f0:2e92:133b:16d9:1409) (Client Quit)
[23:30:25] *** Joins: Kerr (~AdminUser@2601:602:ce01:1f0:2e92:133b:16d9:1409)
[23:35:41] *** climax is now known as gentooclimax
[23:37:39] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[23:38:13] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:40:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[23:43:10] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R/2R->0)
[23:45:41] *** Joins: symb0l_ (~symb0l@user/symb0l)
[23:47:35] *** Joins: tmm88_ (~tmm88@bl22-240-102.dsl.telepac.pt)
[23:48:29] *** Quits: andreasbuhr (~quassel@p549db532.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:48:57] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[23:50:39] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:50:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:58:32] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
