[00:12:17] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[00:16:23] *** Quits: magla (~gelignite@d536720f.access.ecotel.net) (Quit: Stay safe!)
[00:55:11] *** Quits: genom (~g@37.214.44.190) (Remote host closed the connection)
[01:03:21] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[01:12:58] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[01:14:25] *** Quits: ianthrive (~ianthrive@166.70.191.9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:21:18] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:22:08] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:24:17] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[01:24:59] *** Quits: guido (~weechat@host-87-6-250-63.retail.telecomitalia.it) (Quit: WeeChat 3.4)
[01:47:22] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[02:11:25] *** Joins: ianthrive (~ianthrive@166.70.191.9)
[02:16:30] *** Quits: axisys_ (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com) (Quit: leaving)
[02:16:47] *** Joins: axisys (~axisys@ec2-52-207-123-244.compute-1.amazonaws.com)
[02:17:32] *** Quits: filename (~kilitary@185.193.143.131) (Remote host closed the connection)
[02:24:40] *** Joins: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se)
[02:34:03] *** Joins: filename (~kilitary@185.193.143.131)
[02:35:28] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[02:43:47] *** Quits: filename (~kilitary@185.193.143.131) (Quit: joined libera)
[02:45:29] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[02:51:47] *** Joins: davetoo_ (~davetoo@2600:8802:5704:c900:d858:642a:bea1:eac9)
[02:57:01] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 245 seconds)
[02:58:08] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[03:00:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:05:49] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:07:58] *** Quits: Hash (~Hash@hashsecurity.org) (Remote host closed the connection)
[03:08:18] *** Joins: Hash (~Hash@hashsecurity.org)
[03:09:06] *** Quits: Teraii (~teraii@juraii-s1-1.teraii.net) (Ping timeout: 245 seconds)
[03:09:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:10:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:11:28] *** Joins: filename (~kilitary@185.193.143.131)
[03:15:59] *** Joins: Teraii (~teraii@185.219.206.44)
[03:25:55] *** Quits: wovixo (~wovixo@144.92.194.67) (Read error: Connection reset by peer)
[03:29:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:32:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:32:32] <entropy_> is there a framework for php that i should know as a web dev?
[03:32:53] <sm> laravel and symfony
[03:33:17] <sm> should know of them. You don't have to use them.
[03:34:39] <entropy_> thnx
[03:34:54] <__adrian> i'd say you should also know about zend framework (laminas)
[03:35:45] <__adrian> and the various "micro" versions of there frameworks - slim, lumen, silex, etc.
[03:35:53] <sm> what's the history/current place of zend in php world, and what is laminas, __adrian ?
[03:35:54] <__adrian> *these
[03:38:01] <__adrian> ZF as renamed to "laminas" a while back. they're different iterations of the same project.
[03:44:52] <entropy_> is it possible to get a job without knowing about php frameworks and bootstrap?
[03:45:16] <entropy_> i usually make my sites from scratch
[03:45:24] <entropy_> is that not a good idea?
[03:45:44] <__adrian> avoiding knowing how to use frameworks, libraries, and other tools is not good, no.
[03:46:00] <__adrian> should you pick a framework and do only that? absolutely not.
[03:46:22] <entropy_> hmm
[03:46:46] <entropy_> is there a list i can look at as a web dev to-know list?
[03:46:48] <__adrian> but you should be familiar with how the major ones work. and more importantly, knowing HOW to pick up some library or component and integrate it with something you're building is a CRITICAL skill.
[03:47:44] <__adrian> if you've never worked with a framework, look at those we just listed. go through their examples and tutorials. pick the one that makes the most sense to you and try it.
[03:47:48] <__adrian> rinse and repeat.
[03:47:57] <entropy_> ok
[03:49:04] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[03:49:08] <__adrian> also remember that if you're using a framework... that doesn't mean you have to use it always, for everything. the framework you choose should not be the big thing you notice about your project. and good frameworks, you can pick and choose the parts you actually need.
[03:49:21] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 256 seconds)
[03:52:23] <entropy_> ok __adrian can you link me to what i *should* learn abou web dev?
[03:52:44] <entropy_> i found
[03:52:45] <entropy_> https://symfony.com/download
[03:52:49] <__adrian> that's pretty vague  ;)
[03:52:53] <entropy_> but i cannoth find a download for windows
[03:53:02] <__adrian> .__·
[03:53:17] <deltab> entropy_: it's php, it's not Windows-specific
[03:53:19] <__adrian> are you writing websites/apps that will be hosted on windows?
[03:53:31] *** Quits: bobdobbs (~user@2406:5a00:4456:db00:49a8:6d1a:9d96:e909) (Read error: Connection reset by peer)
[03:53:54] <entropy_> no i don't think so
[03:54:42] <__adrian> then don't develop on windows, especially on the windows desktop (as i assume you mean). make a dev env that looks like your production target - i.e., likely, a lamp stack.
[03:54:57] <__adrian> docker/wsl is a good place to start there
[03:55:36] <__adrian> but like deltab says, it's php. there's no "windows version" of most (any?) framewroks.
[03:55:56] <__adrian> that would be incredibly counterproductive.
[03:59:19] <__adrian> also, if you're looking for a "downloads page" then i'd advise you learn how to use composer.  http://getcomposer.org
[03:59:44] <deltab> where there is Windows-specific stuff (file/directory handling, process management, etc.) it's handled within the component libraries
[04:00:32] <deltab> it's not something special that you need to download unless it's really Windows-specific, like Registry or COM or something
[04:00:55] <__adrian> sure, there's a good example. i knew there'd be something.
[04:05:07] *** Joins: ferdna (~ferdna@user/ferdna)
[04:06:08] *** Quits: ianthrive (~ianthrive@166.70.191.9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:03] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[04:14:38] *** Quits: ms49434 (~ms49434@user/ms49434) (Quit: Leaving)
[04:15:33] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:16:28] *** Joins: bobdobbs (~user@2406:5a00:4456:db00:590e:8805:26aa:69cb)
[04:17:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:18:08] <entropy_> __adrian what should i learn first?
[04:18:15] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 256 seconds)
[04:18:26] <entropy_> is there an order i should learn these frameworks/etc?
[04:18:40] <deltab> about frameworks: if you write multiple websites they'll very likely have some things in common, such as login/logout/checking authorization, handling forms, preventing CSRF, accessing a database, handling errors, logging, templating, config, etc. That's a framework, the foundation on which each site is built. You can develop your own framework, or use one that others develop, which saves you time as long as
[04:18:46] <deltab> you pick a suitable one
[04:19:16] <entropy_> ok thanks
[04:20:05] <deltab> I built my own of several of those things, but I've switched to using Symfony's because they're (mostly) better
[04:20:29] <__adrian> "pick the one that makes the most sense to you and try it"
[04:20:35] <deltab> yep
[04:21:19] <__adrian> start with the easiest (to understand). learning the first one will help you learn the others
[04:21:53] <deltab> different frameworks suit different projects: the foundations for a shed won't suit a house or a skyscraper
[04:22:41] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[04:22:42] <__adrian> i'd caution just a little bit against that, at least as a rule of thumb
[04:22:55] *** Joins: de-facto (~de-facto@user/de-facto)
[04:23:54] <__adrian> most any framework should be fine for most any job. yes, you'll have better/worse choices with specialized functionality or with matching with other code, but the idea that "i'm doing a {something} website so {some framework} is best" is nonsense.
[04:23:56] *** Quits: doubleplusuncool (~doubleplu@user/doubleplusuncool) (Quit: bye)
[04:24:16] <__adrian> most any *decent framework
[04:24:21] <deltab> yeah, I overstated that
[04:24:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:27:26] <deltab> look at some frameworks, see what they do, see how they divide up the things that need to be done
[04:28:35] <deltab> a common pattern is to have a 'router' for instance, to look at the requested URL and decide which part of your code to run to generate a response
[04:30:02] <deltab> that way you can have one entry point that everything goes through, which means one place to check that the user's logged in, etc.
[04:33:26] <entropy_> ok well i don't have linux... is there a Symfony i can use on windows?
[04:33:45] <__adrian> entropy_: "__adrian> docker/wsl is a good place to start there"
[04:33:46] <forgotmynick> can fpm's slowlog be sent to syslog?
[04:33:51] <entropy_> ok
[04:33:53] <entropy_> thank you
[04:33:54] <__adrian> you don't need to USE linux as your desktop
[04:34:05] <__adrian> you need to have a dev environment.
[04:34:06] <deltab> entropy_: have you already done web stuff on Windows?
[04:34:12] <entropy_> yes
[04:34:14] *** Quits: newwebdev132 (~newwebdev@78.135.92.22) (Quit: Leaving)
[04:34:38] <deltab> do you have a web server able to run PHP cpde?
[04:34:46] <__adrian> if you like windows, stay on windows. run a dev env (e.g., a lamp stack) using docker or wsl.
[04:34:47] <entropy_> yes i use xampp
[04:34:50] <__adrian> !+xampp
[04:34:50] <php-bot> Don’t use XAMPP or WAMP. Use a real dev server on a VM, docker, or WSL2. Install docker and check out https://tecadmin.net/tutorial/docker-php-example
[04:36:48] *** Quits: ordos (~ordos@user/ordos) (Read error: Connection reset by peer)
[04:37:42] <deltab> yeah, though it is technically possible to use Windows for web dev, I'd recommend using Linux because it's easier and for the experience
[04:38:00] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 250 seconds)
[04:38:07] <__adrian> i don't use windows, but it's certainly completely practical to do so.
[04:38:41] <__adrian> there's absolutely no need to change your daily OS.
[04:38:55] <deltab> right, run Linux in a virtual machine
[04:39:16] <entropy_> be right back
[04:39:19] *** Quits: entropy_ (~ent@user/entropy/x-9891564) (Remote host closed the connection)
[04:39:31] <__adrian> should distinguish here between your desktop OS and the OS your dev env is running
[04:39:36] <deltab> yeah
[04:40:01] <__adrian> YES, your dev env will/should almost certainly be running some server-oriented variety of linux
[04:40:14] <__adrian> NO, your desktop doesn't have to. use what you like.
[04:40:42] * deltab waits for entropy_ to return
[04:45:10] *** Joins: entropy_ (~ent@user/entropy/x-9891564)
[04:50:23] *** Quits: entropy_ (~ent@user/entropy/x-9891564) (Remote host closed the connection)
[04:51:15] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[05:02:07] *** Joins: tccki (~tccki@box.webslate.co.nz)
[05:17:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:19:02] *** Joins: remolej7 (~kenoba@user/kenoba)
[05:19:10] *** Quits: remolej (~kenoba@user/kenoba) (Read error: Connection reset by peer)
[05:19:10] *** remolej7 is now known as remolej
[05:30:16] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:43:36] *** Joins: entropy_ (~ent@user/entropy/x-9891564)
[05:44:10] *** Joins: filename (~kilitary@185.193.143.131)
[05:44:57] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 240 seconds)
[05:49:15] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[05:49:56] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[05:53:36] *** Joins: tccki (~tccki@box.webslate.co.nz)
[05:56:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[05:58:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:09:47] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[06:15:48] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:19:47] *** Joins: Hiccup (cHoy@user/hiccup)
[06:20:17] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[06:30:38] *** Joins: ianthrive (~ianthrive@166.70.191.9)
[06:30:42] *** Joins: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:31:22] *** Quits: ianthrive (~ianthrive@166.70.191.9) (Client Quit)
[06:32:33] *** Joins: vlm (~vlm@user/vlm)
[06:32:48] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:34:01] *** Quits: vlm (~vlm@user/vlm) (Client Quit)
[06:45:14] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:50:59] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:52:19] *** Joins: Rockwood (~Rocky@user/rocky)
[06:53:16] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:53:34] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:53:46] *** Quits: nwulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:54:33] *** Quits: filename (~kilitary@185.193.143.131) (Remote host closed the connection)
[06:56:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[06:58:29] *** Joins: vlm (~vlm@user/vlm)
[07:16:46] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[07:18:27] *** Joins: de-facto (~de-facto@user/de-facto)
[07:27:01] *** Joins: filename (~kilitary@185.193.143.131)
[07:27:41] *** Joins: doubleplusuncool (~doubleplu@user/doubleplusuncool)
[07:34:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[07:45:20] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 256 seconds)
[07:52:10] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[07:52:33] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[08:06:36] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:15:50] *** Joins: filename (~kilitary@185.193.143.131)
[08:18:32] *** Quits: filename (~kilitary@185.193.143.131) (Read error: Connection reset by peer)
[08:37:46] *** Quits: Alex8532 (~Alex8532@user/alex8532) (Quit: Going offline, see ya! (www.adiirc.com))
[08:40:51] *** Joins: filename (~kilitary@185.193.143.131)
[08:59:27] *** Quits: ham5 (iamfive@user/ham5) (Remote host closed the connection)
[09:04:43] *** Joins: ham5 (~iamfive@user/ham5)
[09:13:14] *** Quits: ham5 (~iamfive@user/ham5) (Quit: ham5)
[09:15:32] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[09:16:41] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[09:21:46] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (*.net *.split)
[09:21:46] *** Quits: tccki (~tccki@box.webslate.co.nz) (*.net *.split)
[09:21:46] *** Quits: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle) (*.net *.split)
[09:21:46] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:21:46] *** Quits: uhu (~uhu@static.101.168.216.95.clients.your-server.de) (*.net *.split)
[09:21:46] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[09:21:46] *** Quits: yaraju (~yaraju@user/yaraju) (*.net *.split)
[09:21:46] *** Quits: c17r (~c17r@c17r.com) (*.net *.split)
[09:21:46] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[09:21:46] *** Quits: cosine (~cosine@vpn.mashio.net) (*.net *.split)
[09:21:46] *** Quits: ypszilon (~Ypszilon@user/ypszilon) (*.net *.split)
[09:21:46] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (*.net *.split)
[09:21:46] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[09:21:46] *** Quits: DoubleJ (~DoubleJ@user/doublej) (*.net *.split)
[09:22:01] *** Joins: ham5 (iamfive@user/ham5)
[09:22:24] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[09:22:24] *** Joins: tccki (~tccki@box.webslate.co.nz)
[09:22:24] *** Joins: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle)
[09:22:24] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[09:22:24] *** Joins: uhu (~uhu@static.101.168.216.95.clients.your-server.de)
[09:22:24] *** Joins: wolfshappen (~waff@irc.furworks.de)
[09:22:24] *** Joins: yaraju (~yaraju@user/yaraju)
[09:22:24] *** Joins: DoubleJ (~DoubleJ@user/doublej)
[09:22:24] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[09:22:24] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[09:22:24] *** Joins: cosine (~cosine@vpn.mashio.net)
[09:22:24] *** Joins: s1b1 (~s1b1@user/s1b1)
[09:22:24] *** Joins: c17r (~c17r@c17r.com)
[09:22:24] *** Joins: ypszilon (~Ypszilon@user/ypszilon)
[09:24:39] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:25:03] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[09:25:03] *** Quits: FatBoyXPC (~FatBoyXPC@user/fatboyxpc) (*.net *.split)
[09:25:03] *** Quits: dag (~d@user/dag) (*.net *.split)
[09:25:18] *** Joins: dag (~d@user/dag)
[09:25:19] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[09:25:44] *** Joins: FatBoyXPC (~FatBoyXPC@user/fatboyxpc)
[09:27:33] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[09:28:21] *** Joins: guido (~weechat@host-87-20-248-58.retail.telecomitalia.it)
[09:28:26] *** Quits: filename (~kilitary@185.193.143.131) (Ping timeout: 272 seconds)
[09:28:58] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[09:28:58] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[09:30:18] *** Joins: de-facto (~de-facto@user/de-facto)
[09:30:33] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[09:54:20] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[09:54:32] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 256 seconds)
[10:06:50] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::e3bb)
[10:14:09] *** Joins: fef (~thedawn@user/thedawn)
[10:34:11] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::e3bb) (Remote host closed the connection)
[10:48:51] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[10:49:24] *** Quits: guido (~weechat@host-87-20-248-58.retail.telecomitalia.it) (Quit: WeeChat 3.4)
[10:53:20] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[10:54:11] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::e3bb)
[11:11:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:13:48] *** Joins: guido (~weechat@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[11:17:01] *** Joins: _Andrew (~andrew@user/andrew/x-3325075)
[11:19:34] *** Joins: luigibu (~luigi@93.176.155.54)
[11:20:33] *** Joins: tercaL (~tercaL@user/tercal)
[11:22:32] *** Quits: _Andrew (~andrew@user/andrew/x-3325075) (Quit: Leaving)
[11:25:03] *** Joins: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl)
[11:54:44] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[11:55:22] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[11:57:02] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: upgrade)
[11:58:33] *** Joins: litharge (litharge@libera/bot/litharge)
[12:04:03] *** Quits: led_belly (~led_belly@37.120.197.46) (Ping timeout: 256 seconds)
[12:09:10] *** Joins: led_belly (~led_belly@37.120.197.45)
[12:12:09] *** Joins: richardjh (~Thunderbi@92.40.162.242.threembb.co.uk)
[12:16:10] *** Joins: richardjh1 (~Thunderbi@92.40.162.165.threembb.co.uk)
[12:18:36] *** Quits: richardjh (~Thunderbi@92.40.162.242.threembb.co.uk) (Ping timeout: 240 seconds)
[12:18:36] *** richardjh1 is now known as richardjh
[12:21:32] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:417c:95d2:471b:6570)
[12:36:13] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[12:49:37] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:00:15] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 240 seconds)
[13:01:14] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[13:01:14] *** Joins: de-facto (~de-facto@user/de-facto)
[13:02:51] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:08:19] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:29:57] *** Joins: ms49434 (~ms49434@user/ms49434)
[13:35:15] *** Quits: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl) (Quit: GoldLeader87)
[13:38:57] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[13:42:04] *** Joins: stenno (~stenno@user/stenno)
[13:45:22] *** Joins: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl)
[13:45:46] *** Quits: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl) (Client Quit)
[13:52:43] *** Joins: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl)
[13:56:03] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 252 seconds)
[13:56:14] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[14:22:11] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[14:26:36] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 240 seconds)
[14:30:25] *** Joins: newwebdev13 (~newwebdev@78.135.92.22)
[14:31:56] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:32:23] *** Joins: fef (~thedawn@user/thedawn)
[14:41:50] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 256 seconds)
[14:47:06] *** Joins: tccki (~tccki@box.webslate.co.nz)
[14:49:14] *** Quits: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl) (Quit: GoldLeader87)
[14:51:33] *** Joins: tccki_ (~tccki@box.webslate.co.nz)
[14:51:36] *** Joins: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl)
[14:52:36] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 240 seconds)
[14:53:00] *** tccki_ is now known as tccki
[14:53:00] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[14:53:42] *** Quits: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl) (Client Quit)
[14:54:15] *** Joins: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl)
[15:03:46] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[15:10:36] *** Joins: tccki_ (~tccki@box.webslate.co.nz)
[15:12:20] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 272 seconds)
[15:12:21] *** tccki_ is now known as tccki
[15:13:32] *** Joins: stenno (~stenno@user/stenno)
[15:14:42] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:15:00] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:18:39] *** Quits: Hiccup (cHoy@user/hiccup) (Remote host closed the connection)
[15:22:27] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:22:46] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:25:30] *** Quits: guido (~weechat@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.4)
[15:31:43] *** Joins: mintoyatsu_ (~mint@user/mintoyatsu)
[15:32:06] *** Quits: stan_man_can (~stanley@d66-183-88-69.bchsia.telus.net) (Quit: ZNC - https://znc.in)
[15:33:43] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Ping timeout: 256 seconds)
[15:33:50] *** mintoyatsu_ is now known as mintoyatsu
[15:39:00] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[15:41:04] *** Joins: pmercado (~pmercado@186.107.49.217)
[15:43:59] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:46:01] *** Joins: olle (~olle@i5E866D85.versanet.de)
[15:57:56] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 272 seconds)
[15:59:29] *** Joins: guido (~weechat@host-87-18-251-79.retail.telecomitalia.it)
[16:00:28] *** Joins: Stanley (~stanley@d66-183-88-69.bchsia.telus.net)
[16:02:38] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[16:07:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[16:18:36] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 240 seconds)
[16:20:48] *** Joins: fef (~thedawn@user/thedawn)
[16:20:49] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[16:21:37] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:21:58] <tercaL> I've a line in my php file, like: $buffy .= '<div class="tdb-head-date-txt">' .  echo show_mydate('j F Y, l');    ' </div>';
[16:22:14] <tercaL> And I receive; Parse error: syntax error, unexpected token "echo" in /tmp/d6nlr6pdkzmp3of8/tester.php on line 52 - any idea please?
[16:22:34] <tercaL> I'd like to output show_mydate within the div above.
[16:23:02] <tercaL> P.S: function show_mydate() is already defined correctly at the top of the php
[16:24:11] <VectorX> tercaL take out the echo
[16:24:59] <VectorX> $buffy .= '<div class="tdb-head-date-txt">' . show_mydate('j F Y, l') . '</div>';
[16:26:56] <AllenJB> echo / print should only be used when you want to output something now. Don't use them when you want to store values in variables.
[16:34:29] <__adrian> more importantly, echo is a language construct that needs to be the first thing in a statement. `print` would not be a syntax error, but also wouldn't do what you expect.
[16:35:52] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) ()
[16:41:05] <tercaL> thank you all. gonna read further on all these.
[16:44:10] *** Joins: chao (~stenno@user/stenno)
[16:46:51] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[17:06:09] *** Joins: thiras (~thiras@user/thiras)
[17:08:13] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[17:10:56] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[17:10:57] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[17:13:07] *** Quits: olle (~olle@i5E866D85.versanet.de) (Remote host closed the connection)
[17:39:05] *** Joins: Junxter (~Junxter@222.95.164.193)
[17:44:37] *** Joins: harpia (~harpia@2804:fc:8de2:e700:f59b:322e:48e2:b259)
[17:46:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:50:13] *** Joins: d[-_-]b (~stenno@user/stenno)
[17:52:12] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 240 seconds)
[17:58:06] *** Joins: evilbug (~evilbug@136.144.35.249)
[17:59:26] *** Joins: olle (~olle@213.61.81.133)
[18:05:45] *** Quits: olle (~olle@213.61.81.133) (Read error: Connection reset by peer)
[18:09:36] *** Quits: d[-_-]b (~stenno@user/stenno) (Ping timeout: 252 seconds)
[18:15:35] *** Joins: travisghansen1 (~travisgha@192.74.130.86)
[18:16:37] *** Quits: travisghansen (~travisgha@192.74.130.86) (Ping timeout: 240 seconds)
[18:16:37] *** travisghansen1 is now known as travisghansen
[18:18:27] <DevAntoine> I've just discovered php-runtime
[18:18:37] <DevAntoine> Does someone here use it?
[18:19:03] <DevAntoine> https://github.com/php-runtime/runtime
[18:19:23] *** Joins: ThePhilgrim2 (~ThePhilgr@151.40.115.120)
[18:19:42] <DevAntoine> So for instance if I use php-fpm runtime I still need to have php-fpm on the machine but my application is "isolated" for the rest of the machine's environment?
[18:20:27] *** Joins: luva5 (~luva@146.70.62.252)
[18:20:47] <Naktibalda>  there is no php-fpm runtime on the list :)
[18:21:06] *** Quits: ThePhilgrim2 (~ThePhilgr@151.40.115.120) (Remote host closed the connection)
[18:21:19] <DevAntoine> https://github.com/php-runtime/runtime#php-fpm-and-traditional-web-servers
[18:21:26] *** Joins: ThePhilgrim2 (~ThePhilgr@151.40.115.120)
[18:22:00] <DevAntoine> Sorry my mistake
[18:22:09] <DevAntoine> It's not a php-fpm runtime but a runtime which runs on php-fpm
[18:22:14] <DevAntoine> I'm very confused about all of this
[18:22:20] *** Quits: ThePhilgrim2 (~ThePhilgr@151.40.115.120) (Client Quit)
[18:22:45] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:23:03] *** Quits: harpia (~harpia@2804:fc:8de2:e700:f59b:322e:48e2:b259) (Quit: harpia)
[18:23:30] <__adrian> i've not used it, but the idea seems to be isolating the application from php's normal global state
[18:23:30] *** Quits: luva (~luva@37.120.197.38) (Ping timeout: 250 seconds)
[18:23:30] *** luva5 is now known as luva
[18:24:21] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Client Quit)
[18:24:42] <__adrian> i.e., so you can run it from various sapis (php-fpm, cli, etc.) without worrying about having to pick between $_POST and $argv, etc.
[18:25:39] *** Joins: Fubbe (~ThePhilgr@151.40.115.120)
[18:26:13] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[18:26:15] <Naktibalda> they use CLI as example, but it looks like there is no CLI runtime
[18:27:23] <DevAntoine> __adrian: that's what I understood
[18:28:32] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:28:38] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Client Quit)
[18:30:54] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:31:30] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Client Quit)
[18:33:16] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:33:38] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Client Quit)
[18:34:16] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:34:23] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Client Quit)
[18:35:39] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:35:44] *** Quits: ThePhilgrim (~ThePhilgr@151.40.115.120) (Client Quit)
[18:37:34] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:37:42] *** ThePhilgrim is now known as Fubbe
[18:37:51] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[18:38:51] *** Joins: Fubbe (~ThePhilgr@151.40.115.120)
[18:38:57] *** Joins: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net)
[18:39:46] *** Quits: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net) (Client Quit)
[18:40:01] *** Joins: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net)
[18:40:24] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::e3bb) (Ping timeout: 252 seconds)
[18:40:40] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[18:41:15] *** Joins: Fubbe (~ThePhilgr@151.40.115.120)
[18:41:22] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[18:41:52] *** Joins: Fubbe (~ThePhilgr@151.40.115.120)
[18:42:08] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[18:47:38] <judah> https://support.magento.com/hc/en-us/articles/4426353041293-Security-updates-available-for-Adobe-Commerce-APSB22-12-
[18:47:50] <judah> no auth zero day for your Monday morning
[18:48:20] <AllenJB> Only if you use Adobe Commerce or Magento
[18:48:31] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[18:48:42] *** ThePhilgrim is now known as Fubbe
[18:49:01] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Remote host closed the connection)
[18:49:11] <judah> Yup. Which you shouldnt be. But if you are, good luck
[18:49:28] <judah> Im sure our clients who are still using 7.1/7.2 will get right on it
[18:50:30] *** Quits: mactron (~mactron@cpe-146-212-96-217.dynamic.amis.net) (Quit: WeeChat 3.4)
[18:56:31] *** Joins: luva7 (~luva@185.168.9.232)
[18:59:39] *** Quits: luva (~luva@146.70.62.252) (Ping timeout: 252 seconds)
[18:59:39] *** luva7 is now known as luva
[19:06:04] *** Quits: evilbug (~evilbug@136.144.35.249) (Quit: Connection closed)
[19:15:51] *** Joins: olle (~olle@213.61.81.133)
[19:18:31] *** Joins: hh (~g@37.214.44.190)
[19:25:19] *** Joins: WishBoy (~WishBoy@user/wishboy)
[19:36:40] *** Joins: spinningCat (~spinningC@about/web/muscles)
[19:38:43] *** Joins: Rockwood (~Rocky@user/rocky)
[19:39:08] *** Quits: GoldLeader87 (~GoldLeade@D57D084A.static.ziggozakelijk.nl) (Quit: GoldLeader87)
[19:54:59] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[19:55:56] *** Joins: ThePhilgrim (~ThePhilgr@151.40.115.120)
[19:56:15] *** ThePhilgrim is now known as Fubbe
[19:56:28] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[20:02:13] *** Quits: Junxter (~Junxter@222.95.164.193) (Read error: Connection reset by peer)
[20:02:15] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[20:02:37] *** Joins: Junxter (~Junxter@222.95.164.193)
[20:10:42] *** Quits: luigibu (~luigi@93.176.155.54) (Quit: WeeChat 3.4)
[20:11:16] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[20:13:30] *** Joins: magla (~gelignite@55d42258.access.ecotel.net)
[20:17:22] *** Joins: pycode (~pycode3@2001:b07:5d28:551:df1d:1fae:7e01:7602)
[20:17:24] <pycode> hello
[20:17:41] <pycode> does anyone use docker to run php? i do not udnerstand why i cannot read the entire logs
[20:18:22] <Naktibalda> do you mean that you can only read the logs since your last restart?
[20:18:54] <pycode> no i basically see no errors... for example
[20:19:27] <pycode> php_1  | 172.22.0.4 -  14/Feb/2022:16:49:12 +0000 "POST /index.php" 400
[20:19:35] <pycode> so there was an error but i see no details
[20:20:16] <Naktibalda> that's not an error, that's status code
[20:20:35] <Naktibalda> probably your PHP returned response about validation error
[20:20:48] <pycode> cakephp is returning bad request because of its security component but i would like to read more
[20:21:40] <Naktibalda> do you use php-fpm?
[20:21:50] <da_wunder> so where is that cakephp writing those logs?
[20:22:25] <pycode> Naktibalda, yes
[20:23:02] <pycode> da_wunder, it is inside a docker container i cannot read them directly...maybe i have to setup it somehow
[20:23:38] <Naktibalda> if I remember correctly, you have to change your log destination to /dev/stderr
[20:23:52] <da_wunder> pycode: sure you can, just open shell to that docker container and eg. use plain old `tail -f somefile`
[20:24:33] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[20:24:40] *** Joins: luva7 (~luva@146.70.62.252)
[20:24:57] <da_wunder> but the correct answer is to write those logs to `php://stderr` then you should see those directly on your container
[20:25:27] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[20:28:12] *** Quits: luva (~luva@185.168.9.232) (Ping timeout: 252 seconds)
[20:28:12] *** luva7 is now known as luva
[20:28:35] <pycode> i have to understand how to do that
[20:28:56] <da_wunder> I would start with documentation - https://book.cakephp.org/3/en/core-libraries/logging.html
[20:30:20] <da_wunder> and looks like someone asked that year ago - https://discourse.cakephp.org/t/how-to-output-cakephp-4-0-log-to-stdout/8878 - no answers
[20:31:54] <pycode> perfect
[20:31:57] <pycode> i am looged in
[20:31:59] <pycode> i can read the logs!
[20:32:00] <pycode> thanks
[20:32:06] <da_wunder> so I would just get bash to that container and use that plain old `tail -f logfile`
[20:32:07] <pycode> da_wunder, nono wait
[20:32:10] <pycode> it is a docker problem
[20:32:15] <pycode> i know where are the logs
[20:32:16] <pycode> eheh
[20:32:32] <pycode> i did not know that i can log-in in a docker container
[20:32:36] <pycode> i did not know how
[20:32:37] <pycode> :D
[20:33:47] <da_wunder> for that just use `docker exec -it _container_id_ bash` and to get that _container_id_ use `docker ps`
[20:34:09] <Naktibalda> you can use    tail /path/to/file  instead of bash in that command
[20:34:20] <da_wunder> and that too
[20:34:21] <pycode> yeah thats perfect my mistake...i set the cakephp dir on a volumes but i did not see any changes to the logs so i suppose docker changes it internally
[20:34:22] <pycode> ok
[20:37:51] *** Joins: ordos (~ordos@user/ordos)
[20:42:42] *** Joins: GoldLeader87 (~GoldLeade@2a10:3781:6b:1:5d1a:2284:84d7:9d53)
[20:46:20] *** Quits: kristijonas (~kristijon@78-56-32-39.static.zebra.lt) (Remote host closed the connection)
[20:46:20] *** Quits: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt) (Remote host closed the connection)
[20:47:27] *** Quits: GoldLeader87 (~GoldLeade@2a10:3781:6b:1:5d1a:2284:84d7:9d53) (Ping timeout: 252 seconds)
[20:52:41] <olle> I did post my ideas of wrapping side-effects in lambdas to delay them on reddit: https://old.reddit.com/r/PHP/comments/sr4kd5/no_one_did_a_state_container_for_php/
[20:52:56] <olle> It's not *exactly* like event sourcing, but it's in the same ballpark I think
[20:53:08] <olle> Much simpler, of course.
[20:54:08] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[20:55:10] <olle> An effect DSL, of sorts :)
[20:59:04] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:417c:95d2:471b:6570) (Remote host closed the connection)
[21:01:26] <TML> olle: I can't really see a huge demand for that, given that almost every PHP application in history is going to be stateless
[21:03:14] <olle> TML: For event sourcing? Or for my DSL?
[21:03:35] <Naktibalda> how is event sourcing related to state container thing?
[21:04:06] <TML> olle: I'm referring to the "State container for PHP" topic
[21:04:35] <olle> Naktibalda: Isn't an event source a kind of state container?
[21:04:40] <olle> With added message passing?
[21:05:17] <TML> No
[21:05:38] <TML> I mean, a state container may be one possible way to achieve event sourcing
[21:05:54] <Naktibalda> even source is kind of blockchain, there all state changes are recorded and immutable
[21:05:54] <olle> Hm
[21:05:55] <TML> But there are any number of ways to do event sourcing that don't involve using a state container
[21:06:11] <olle> Naktibalda: Eh, blockchain enforces a lot of other variants...
[21:06:27] <olle> invariants*
[21:06:57] <TML> but you could use the blockchain to implement event sourcing, if you didn't care about doing things nicely
[21:07:01] <Naktibalda> yes, but as far as I know event sourcing is about storage, not about application state
[21:07:02] <olle> Maybe my idea is more of an "effect container". Or just "effect queue".
[21:07:30] <TML> I don't know what you mean by either of those names
[21:07:40] <Sammitch> both of you, put a dollar in the "blockchain" jar and reflect on your actions.
[21:07:54] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[21:08:07] <olle> TML: Just an array of lambdas that contain IO effects, like writing to file or db
[21:08:43] <TML> Sammitch: Hey, I pointed out that it would be "if you didn't care about doing things nicely"
[21:09:47] <TML> olle: I don't understand the whole "array of lambdas" thing - lambdas can't be meaningfully serialized, and event sourcing is explicitly about serialization
[21:10:00] <Naktibalda> olle: have you looked at async frameworks?
[21:10:27] <Naktibalda> TML: if you missed it, he wants to delay IO until shutdown handler
[21:10:33] <olle> TML: Good point. Guess it's not about event sourcing then.
[21:10:41] <TML> Naktibalda: Yes, I missed that
[21:10:45] <TML> Why?
[21:10:50] <olle> Naktibalda: I know a little about Amphp, but need to read up on their new fiber stuff
[21:10:53] <__adrian> "...delay"  there's pitfalls, there
[21:11:06] <Sammitch> "here be dragons"
[21:11:11] <olle> TML: To make more functions pure
[21:11:23] <olle> And increase the ratio of unit tests in the test suite
[21:11:23] <TML> olle: That's not really an answer, though
[21:11:40] <olle> It might be possible to get rid of mocking that way.
[21:11:48] <TML> sounds like you're trying to make PHP into ML
[21:11:53] <olle> Ha!
[21:12:14] <TML> If you want to write in ML, you should just write in ML, instead of trying to write in PHP as if PHP were ML.
[21:12:21] <__adrian> a well-designed system is testable, but that doesn't mean that test-ability is THE measure of a well-designed system (or that it should be the driving factor in designing the system in the first place)
[21:12:21] <olle> Yes, the idea comes from Haskell mostly, with their monadic stuff. But it can't be transfered to PHP due to syntax restrictions.
[21:12:27] <Naktibalda> are you going to create lambdas in pure functions or in dirty functions?
[21:12:38] <olle> TML: I don't need a test suite in ML, I need one in PHP :) Legacy code.
[21:12:41] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:417c:95d2:471b:6570)
[21:12:45] *** Joins: thiras (~thiras@user/thiras)
[21:13:11] <olle> Naktibalda: If I put IO stuff into lambdas, the functions become pure.
[21:13:28] <__adrian> ._.
[21:13:35] <olle> __adrian: Correct, yes.
[21:13:38] <Naktibalda> functions that emit lambdas?
[21:13:53] <Naktibalda> delated lambda is a side effect
[21:13:57] <TML> except that PHP doesn't provide any of the safety features that languages with truly pure functions provide to make such work meaningful
[21:14:16] <olle> Naktibalda: Hm, you can return an effect queue, or you inject some kind of state object that collects lambdas to be run later. Before view rendering.
[21:14:49] *** Quits: richardjh (~Thunderbi@92.40.162.165.threembb.co.uk) (Quit: richardjh)
[21:14:49] <__adrian> so, a lambda (an anon function, i.e., a Closure instance) is not a function, and therefore isn't a "dirty" function... ok
[21:14:55] <TML> you'd be spinning your wheels, writing code no other PHP developer would be able to maintain
[21:14:57] <olle> TML: The success is measured in the complexity of the mocking code... :d
[21:15:01] <__adrian> BUT conceptually, it is
[21:15:23] <olle> __adrian: It's only dirty/effectful when it's executed, not when it's passed around.
[21:15:52] <olle> TML: Yeah, I'm not gonna apply it in production code, as you say, too many "wtf" :)
[21:16:01] <Naktibalda> how is this better than hexagonal architecture?
[21:16:02] <__adrian> that's still largely semantics imo
[21:16:18] <__adrian> see TML's comment about being "meaningful"
[21:16:29] <olle> Naktibalda: It's not, it's the same thing, I think? Functional core, bla bla.
[21:16:35] <TML> this whole thing just sounds like the code equivalent of masturbation to me
[21:17:01] <__adrian> (new Eye)->out();
[21:17:09] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:417c:95d2:471b:6570) (Ping timeout: 252 seconds)
[21:17:31] <TML> Naktibalda: I keep hearing about that "hexagonal architecture" thing, I should probably read up on it
[21:17:32] <olle> TML: Until you write 100 lines of mocks for one test
[21:17:39] <olle> But might be bad code in another way
[21:17:42] <TML> olle: I don't know what you mean
[21:18:10] <olle> Just my own experience of mocking.
[21:18:20] <olle> Mocking is in fact a DSL
[21:18:38] <TML> You keep brining up mocking, and I don't see how mocking has any correlation to the ideas of pure functions or delaying IO until the shutdown handler runs
[21:19:11] <TML> I haven't ever seen anyone writing their mocks in a DSL, but ok
[21:19:56] <olle> TML: Pure functions rarely need to be mocked
[21:20:07] <Naktibalda> in hexagonal architecture domain code does not depend on any code that does input/output or has side effects, but you have to provide mocks of interfaces in the tests.
[21:20:18] <TML> olle: I agree, that's why I don't understand why you're conflating those topics
[21:20:40] <olle> TML: The more pure functions you have, the less mocking you need to do in your code. Right?
[21:20:44] <olle> test code*
[21:20:49] <Naktibalda> IndulgenceJS - makes your dirty functions pure
[21:20:51] <__adrian> TML: you might know it as "ports and adapters" or simply the idea of loose coupling and segregating services/components via interfaces
[21:21:14] <Sammitch> "this rock keeps tigers away"
[21:21:15] <TML> __adrian: Oh, sure - I'm familiar with loose coupling.
[21:21:16] <__adrian> the "hex" part is an arbitrary name
[21:21:24] <__adrian> and n-sided polygon
[21:21:27] <__adrian> *any
[21:21:31] <Naktibalda> your approach is questionable and could be illegal
[21:21:43] <TML> olle: No…
[21:22:09] <TML> olle: I think you mean the inverse
[21:22:25] <TML> "The fewer impure functions you have, the less mocking you need to do in your code"
[21:22:41] <TML> adding more pure functions does not equate to removing impure functions
[21:22:54] <olle> TML: Sure, I mean the ratio, of course :)
[21:23:21] <olle> So you can invent or apply a number of strategies to purify effectful code
[21:23:55] <TML> olle: But I don't understand why you correlate that to "delaying IO until the shutdown handler runs"
[21:24:19] <TML> Wrapping all your stateful actions in lambdas isn't going to magically make the code more pure
[21:24:20] <olle> TML: That's _one_ way to create purity
[21:24:26] <TML> No
[21:24:32] <TML> it's a way to PRETEND it's pure
[21:24:37] <olle> Hehe
[21:24:40] <olle> Well
[21:24:57] <TML> It would only actually MAKE the code pure if PHP provided the kinds of safeguards languages like Haskell and ML provide
[21:25:01] <olle> Pretending might be good enough
[21:25:28] <Naktibalda> so your unit tests wouldn't test side effects
[21:25:39] <TML> Given the lack of language-level support for these safeguards, putting everything in a bunch of lambdas is nonsensical and only provides the most superficial kind of pretense at having "pure functions"
[21:25:44] <olle> Naktibalda: Exactly, only integrity tests would.
[21:25:56] <da_wunder> static analyzers might help you there, like phpstan, psalm etc.
[21:26:11] <olle> True, Psalm has @psalm-pure
[21:26:33] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: If you think nobody cares, try missing a few payments)
[21:26:40] <olle> I actually had to correct Psalm so they wouldn't report lambdas as impure unless they were executed :)
[21:26:54] <olle> Or rather, former maintainer fixed it after I nagged
[21:27:47] <olle> TML: Superficial or not, it's the complexity of the test code that tells you if it's working or not. I mean, as long as the actual code is readable.
[21:27:56] <olle> But yeah, not all IO can be delayed.
[21:28:06] <olle> Logging, e..
[21:28:07] <olle> e.g.*
[21:28:27] <judah> How to edit a page in Magento in a nutshell: Search for a semi-unique string on the page. You will have a few dozen results. For each of those results search for what layouts call those templates. For each of those dozens of results cross-check each of the several update handles. For each of those now literal hundreds of files to search through, test each of them to see if its being rendered or not. Once you find the one being rendered, all you need to do is
[21:28:28] <judah> track down which of the dozens of layout files is affecting it.
[21:29:01] <judah> Why people use this software is beyond me. Its stupid beyond comprehension.
[21:29:01] <TML> olle: Test code that is superfically accurate because it's not testing the things it needs to test is test code you should just delete from the codebase because it's not serving any meaningful purpose.
[21:29:10] <olle> Counter argument could be that I've just switched mocking DSL (PHPUnit mock builder) to effect DSL (lambda builder thing)
[21:29:12] <TML> Just replace it a function that returns true
[21:30:15] <TML> I'm not a huge believer in putting wubbies in my test code
[21:30:38] <TML> "But I have 100% coverage now" is not an argument that buys any credit in my bank
[21:30:40] <olle> wubbies?
[21:30:45] <TML> olle: Warm fuzzies
[21:30:49] <olle> Hm
[21:30:55] <TML> useless tests that don't actually validate the things that matter
[21:31:23] <TML> I would rather have code with 3% code coverage testing all the I/O paths than 100% code coverage testing none of the I/O paths
[21:31:26] <olle> TML: https://gist.github.com/olleharstedt/5480aa4efc669dcdc99bd1ee909c143f?permalink_comment_id=4063430#gistcomment-4063430
[21:31:39] <olle> Tiny use-case for a function that creates x number of dummy users
[21:33:55] <TML> I don't grasp the use-case, sorry
[21:34:07] <TML> what's the value of this test?
[21:34:19] <olle> TML: Removing $user->save()
[21:34:35] <olle> No need to inject user factory or to mock user class
[21:34:41] <TML> olle: That doesn't answer my question - you explained the machanic, not the value
[21:34:44] <__adrian> that describes what it does, not its benefit
[21:34:57] <TML> What good is this test?
[21:35:03] <olle> The benefit is simplified test code
[21:35:04] <TML> What does it prove/test?
[21:35:14] <TML> olle: No
[21:35:22] <TML> What is the value of the __TEST__?
[21:35:27] <olle> The unit test can replace $user->save() with true
[21:35:32] <olle> Oh, the test itself?
[21:35:34] <TML> YES
[21:35:41] <TML> Why does this test exist?
[21:35:45] <TML> What does it prove?
[21:36:10] <TML> if you didn't test the I/O, what does it matter if the PHP code ran to completion?
[21:36:20] <olle> Basic sanity test, I guess. I've omitted lots of logic from the original code (random password, random user name, etc)
[21:36:45] *** Quits: pycode (~pycode3@2001:b07:5d28:551:df1d:1fae:7e01:7602) (Ping timeout: 250 seconds)
[21:36:45] <TML> olle: Right - and that's what I was saying earlier; I don't believe in "basic sanity tests"
[21:36:49] <__adrian> testing fewer parts ≠ more coverage
[21:36:53] <olle> You can also test that IF the db write fails, it will not include it as success. Etc.
[21:37:01] <TML> I only believe in testing things that have meaningful side-effects
[21:37:11] <olle> OK, that's another question. :)
[21:37:19] <TML> "the code ran to completion" isn't a test I care about
[21:37:46] <TML> you're writing a bunch of "warm fuzzy" tests
[21:37:57] <olle> I mean, our current test coverage is 0,5%
[21:37:58] <Sammitch> "one of your lambdas failed, good luck locating the code that actually generated it"
[21:38:13] <TML> so that you'll FEEL like the code is "high quality", even though you have no idea if any of the meaningful parts of the code were ever executed
[21:38:14] <olle> Sammitch: Yep, harder debugging is a valid counter argument, absolutely.
[21:38:28] <TML> I don't like that
[21:38:42] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[21:38:53] <TML> I would rather hand over code with no coverage at all than code that APPEARS to have 100% coverage but doesn't actually do anything meaningful in thests
[21:38:59] <TML> s/thests/the tests/
[21:39:37] <TML> "Test code that is superfically accurate because it's not testing the things it needs to test is test code you should just delete from the codebase because it's not serving any meaningful purpose."
[21:39:49] <__adrian> "TML> I only believe in testing things that have meaningful side-effects"  don't worry - if you don't believe in the tests, they can't hurt you
[21:39:57] <TML> __adrian: LOL - sure they can
[21:40:07] <TML> The false sense of security can be incredibly harmful
[21:40:09] <TML> :)
[21:40:40] <TML> we're scooping the loop snooper here
[21:41:22] <olle> TML: Hm, the point is to exclude things you should assume to work. $user->save() is framework code (active record). But yeah, you need integrity tests *also*.
[21:42:01] <Sammitch> I have an inkling that unit and integration tests are also being conflated
[21:42:17] <TML> olle: I don't understand what that test you showed me is testing that falls outside the bounds of "things you should assume to work"
[21:42:42] <olle> TML: Uh, that's because the code is made trivial. Original code is bigger, as I said.
[21:43:15] <olle> TML: Also remember - tests are there to make sure code continues to work *after* you're done with it, when other people start changing it. :D
[21:43:32] <Sammitch> uhhhhhh
[21:43:54] <Sammitch> tests are there to make sure that YOU have not shipped a bad code
[21:44:05] <Sammitch> other people will write their own tests for what they do with it
[21:45:27] <olle> Sammitch: We have 300+ contributors to our code base, 15 yo
[21:45:41] <olle> The code is 15 yo, not the devs xD
[21:46:36] <Sammitch> and...?
[21:47:20] <olle> Sammitch: So future guarantee is a big motivator for me personally. When I nag on people to write tests.
[21:47:31] <olle> You never know what a random PR can do...
[21:48:55] <Sammitch> cool, but writing tests to cover what someone else _might_ do with your code is a fool's errand and/or path to madness. if your devs can't be arsed to write tests/do their jobs, then that's a problem handled via HR, not code.
[21:49:05] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:417c:95d2:471b:6570)
[21:49:49] <Sammitch> you're trying to import stuff from haskell into PHP just to wrangle your ungovernable devs?
[21:50:29] <olle> Sammitch: Nooo, not really, I want a fast test suite. It's now at 15 min on github actions, and it doesn't cover 1% of the software.
[21:50:32] *** Joins: nullkit (~nullkit@user/nullkit)
[21:51:00] <olle> But a more modern framework would enable us to do more mocking
[21:51:17] <nullkit> i want to make a multi language website, what technology i should use ?
[21:52:38] <sm> ALIEN TECHNOLOGY
[21:52:59] <nullkit> im asking how to do it sm
[21:53:13] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:417c:95d2:471b:6570) (Ping timeout: 250 seconds)
[21:53:26] <olle> Sammitch: About future guarantee, it's about making sure the features don't break by mistake.
[21:53:40] <olle> nullkit: Depends on the size and complexity of the site
[21:53:44] <Sammitch> nullkit: multiple human languages, right?
[21:53:46] <olle> But: Wordpress?
[21:54:15] <nullkit> Sammitch: yes
[21:54:31] <da_wunder> nullkit: one _big_ question - are those language translations static OR can your users change those ?
[21:54:33] <nullkit> olle: not wordpress, im making it with php
[21:54:54] <Sammitch> brain still smooth this morning, what's the library that has _() as a function alias again?
[21:55:04] <nullkit> da_wunder: users should change them
[21:55:29] <da_wunder> nullkit: then you need to store those to database
[21:56:08] <__adrian> Sammitch: gettext()
[21:56:18] <da_wunder> simple structure like; tag (id, tag), tag_translation (id, tag_id, language, content)
[21:56:24] <Sammitch> nullkit: https://www.php.net/manual/en/book.gettext.php
[21:56:25] <nullkit> da_wunder: what about if those be statics ?
[21:57:23] <da_wunder> if those are static - then you could eg. use static json files for those, like en.json, someotherlanguage.json and just read that json content and use it directly
[21:57:38] <Sammitch> lord  no
[21:58:26] <Sammitch> please do not roll your own localization
[21:58:46] *** Parts: davetoo_ (~davetoo@2600:8802:5704:c900:d858:642a:bea1:eac9) (Leaving...)
[21:58:47] <da_wunder> eg. I have used this library on frontend side - https://github.com/ngx-translate/core and that is using static json files
[21:58:58] <Sammitch> gettext is battle-tested and is like... _right there_
[22:00:01] <nullkit> da_wunder, Sammitch thank you guys
[22:00:37] <__adrian> re: gettext: whatever, if you like to be miserable.
[22:00:54] <__adrian> https://php.net/messageformatter
[22:01:06] <da_wunder> gettext is also good one, with that you need to generate those translation php files everytime those changes - and that might be quite hard if you use docker
[22:02:09] *** Quits: olle (~olle@213.61.81.133) (Remote host closed the connection)
[22:02:34] <Sammitch> that's what CI pipelines are for
[22:03:38] <da_wunder> Sammitch: yes, but when those users change that text content in that application - then you need to invalidate that previously one - and with that your CI should have access to that production DB to build that correctly
[22:04:11] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[22:04:36] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 240 seconds)
[22:04:48] <Sammitch> user-submitted translations is a whole other warehouse of cans of worms
[22:05:31] <da_wunder> 20:25 < nullkit> da_wunder: users should change them
[22:06:08] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[22:06:11] <da_wunder> that is why asked that first, because that makes translations stuff a whole different animal
[22:07:40] <nullkit> i will look at this https://github.com/ngx-translate/core
[22:07:44] <nullkit> thanks
[22:08:02] <da_wunder> note that is for angular frontend
[22:08:08] *** Joins: luva3 (~luva@185.168.9.231)
[22:09:06] <da_wunder> if you're looking for PHP solution, I would recommend you to check eg. symfony/translation component - https://github.com/symfony/translation
[22:09:26] <da_wunder> with that you could use db to store those and lots of more
[22:10:11] <nullkit> da_wunder: does Laravel have samething ?
[22:10:27] <da_wunder> most likely, just google it
[22:10:42] <entropy_> ok so i'm runing docker in windows but i can't figure out how to get started
[22:10:43] <nullkit> ok thanks buddy
[22:10:51] <entropy_> and why i need this thing
[22:11:16] <da_wunder> nullkit: literally first google hit - https://laravel.com/docs/9.x/localization
[22:12:14] *** Quits: luva (~luva@146.70.62.252) (Ping timeout: 272 seconds)
[22:12:15] *** luva3 is now known as luva
[22:14:22] *** Joins: funhouse (~funhouse@user/funhouse)
[22:15:52] *** Joins: stenno (~stenno@user/stenno)
[22:21:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[22:56:18] *** Joins: kristijonas (~kristijon@81-7-103-234.static.zebra.lt)
[23:37:42] *** Quits: hh (~g@37.214.44.190) (Remote host closed the connection)
[23:39:31] *** Joins: Fubbe (~ThePhilgr@151.40.115.120)
[23:40:09] *** Quits: guido (~weechat@host-87-18-251-79.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[23:40:16] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[23:41:45] *** Joins: guido (~weechat@host-95-238-252-12.retail.telecomitalia.it)
[23:42:22] <funhouse> Ok to ask a laravel question here? Its more of a directory structure question.
[23:42:48] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 272 seconds)
[23:48:20] *** Joins: Fubbe (~ThePhilgr@151.40.115.120)
[23:48:50] <Albright> You can try but I'd try #laravel first.
[23:53:20] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Quit: Fubbe)
[23:53:54] *** Joins: Fubbe (~ThePhilgr@151.40.115.120)
[23:54:15] *** Quits: Fubbe (~ThePhilgr@151.40.115.120) (Client Quit)
[23:54:25] <__adrian> rule of thumb: can you ask the question without mentioning laravel, and get a useful answer from someone who's never heard of laravel?
[23:56:13] <da_wunder> directory structure, should not be some framework specific - if framework is forcing you to use certain structure, then you're most likely using wrong framework
[23:56:42] <Albright> Well, a lot of frameworks expect modules/plugins to be in a certain directory.
[23:56:59] <__adrian> true enough on both counts  :)
[23:57:24] <Albright> At least ones that came of age before Composer/autoload.php changed everything
[23:57:24] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:57:34] <da_wunder> by default yes - but if you cannot change that as you like - that is bad thing
[23:58:24] <da_wunder> eg. with symfony you could use whatever directory structure you like - all what you need to do is to make some configuration, so that your DI works as expected
