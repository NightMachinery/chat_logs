[00:00:44] <chair1> I see, it becomes a pointer to array, dunno, how's that a problem at all, I read online there's no conversion to pointer to pointer or pointer to array
[00:01:31] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:01:51] <chair1> `score_text` is also a true array when passed to the function, not an actual pointer
[00:01:54] *** Quits: Kerr17 (~Kerr@2601:602:ce01:1f0:b2e1:d9dd:d9c3:4489) (Quit: Client closed)
[00:02:32] *** Quits: youssef (~youssef@26.173.112.78.rev.sfr.net) (Ping timeout: 240 seconds)
[00:02:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[00:02:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[00:03:28] <rcf> chair1: there is no such thing as passing a true array to a function, they are always converted.
[00:03:33] <fizzie> The problem is with the `const`, not the pointerness. You can pass `score_text` (with no &) to a function accepting a `char **`.
[00:03:48] <fizzie> It's just that there's no implicit conversion from `char **` to `const char **`, because it's not always safe.
[00:05:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:05:19] <fizzie> ,cc void f(char **strings) { puts(strings[1]); }  char *strings[3] = {"foo", "bar", "baz"}; f(strings); // no problems here
[00:05:22] <candide> fizzie: bar
[00:05:38] <chair1> Oh lemme try
[00:05:53] <fizzie> ,cc void f(const char **strings) { puts(strings[1]); }  char *strings[3] = {"foo", "bar", "baz"}; f(strings); // this isn't allowed, though
[00:05:55] <candide> fizzie: [warning: passing argument 1 of 'f' from incompatible pointer type [-Wincompatible-pointer-types]  note: expected 'const char **' but argument is of type 'char **'] bar
[00:06:13] *** Quits: h4zel (~hazel@user/h4zel) (Ping timeout: 240 seconds)
[00:06:38] <fizzie> (Of course in that example, it could just as well be `const char *strings[3]`, especially since the pointers are pointing at string literals and therefore unmodifiable.
[00:06:44] <chair1> ,cc void f(char **strings) { puts(*(strings++); } char score_text = "Your score is 0!"; f(&score_text);
[00:06:46] <candide> chair1:  In function 'f':  error: expected ')' before ';' token
[00:06:56] <chair1> ,cc void f(char **strings) { puts(*(strings++)); } char score_text = "Your score is 0!"; f(&score_text);
[00:07:01] <candide> chair1: [warning: initialization of 'char' from 'char *' makes integer from pointer without a cast [-Wint-conversion]  warning: passing argument 1 of 'f' from incompatible pointer type [-Wincompatible-pointer-types]  note: expected 'char **' but argument is of type 'char *']  runtime error: load of misaligned address for type 'char *', which requires 8 byte alignment   Program received signal SIGSEGV, Seg... <truncated; https://0x0.st/oodQ.txt>
[00:07:12] *** Joins: h4zel (~hazel@user/h4zel)
[00:07:21] <chair1> I know my error
[00:07:32] <chair1> Lemme triple-check and read your example
[00:07:35] <fizzie> Oh, I missed the fact that you said you have a single string.
[00:07:40] <chair1> Yep
[00:07:51] <chair1> ,cc void f(char **strings) { puts(*(strings++)); } char score_text[] = "Your score is 0!"; f(&score_text);
[00:07:55] <candide> chair1: [warning: passing argument 1 of 'f' from incompatible pointer type [-Wincompatible-pointer-types]  note: expected 'char **' but argument is of type 'char (*)[17]']  Program received signal SIGSEGV, Segmentation fault in __strlen_sse2 () called by puts () called by f (strings=0x7fffffffe288) at statement: puts(*(strings++)); called by main () at statement: f(&score_text)
[00:08:01] <fizzie> That's just not possible. A `char **` must point at a `char *` object somewhere. There's no pointer object in that scenario.
[00:08:04] <fizzie> Unless you make one.
[00:08:05] <chair1> That's the error I'm getting
[00:08:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:08:18] <fizzie> Yeah. You need a pointer for the `char **` to point at.
[00:08:32] *** Quits: cytokine` (~user@47.29.245.7) (Ping timeout: 240 seconds)
[00:09:14] <trenka> ,cc void f(char **strings) { puts(*(strings++)); } char *score_text = "Your score is 0!"; f(&score_text);
[00:09:17] <candide> trenka: Your score is 0!
[00:09:38] <fizzie> ,cc void f(char **strings) { puts(*(strings++)); } char score_text[] = "Your score is 0!"; char *ptr = score_text; f(&ptr); // or this
[00:09:40] <candide> fizzie: Your score is 0!
[00:10:03] <fizzie> (I imagine there's a reason it's an array. For example, maybe the contents get replaced.)
[00:10:30] *** Parts: meator (~meator@user/meator) (Leaving)
[00:10:32] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[00:10:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:10:54] <trenka> ,cc void f(char **strings) { puts(*(strings++)); } char score_text[] = "Your score is 0!"; char *str = score_text; f(&str);
[00:10:57] <candide> trenka: Your score is 0!
[00:11:35] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 256 seconds)
[00:11:47] <chair1> Yep, there's another argument of array of strings where NULL is replaced by `score_text` and other strings in the list, and `score_text` needs to be a buffer because it is used by sprintf()
[00:12:08] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[00:12:15] <chair1> I need to start making pastes to waste less time :(
[00:12:37] <fizzie> At any rate, `f` needs a `char **`, so the only valid values it can be called with are either a null pointer, or the address of a `char *` object somewhere. A `char score_text[] = "...";` can be *converted* (implicitly) into a `char *` value, but it's not a pointer.
[00:13:43] <chair1> Hmmm yeah, &(char *)score_text unfortunately doesn't work
[00:13:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:2055:673d:3155:da63) (Ping timeout: 250 seconds)
[00:14:34] <fizzie> A compound literal will work, though. `&(char *){score_text}`, that is.
[00:14:58] <chair1> Or (char *[]){score_text} :P
[00:15:00] <fizzie> Not that there's really any difference between that and the `(char*[]){score_text}` you mentioned already.
[00:15:22] <chair1> Wait, & can dereference compound literals? Okay
[00:15:41] <chair1> I heard here you can also assign to it, anyway...
[00:15:44] <fizzie> Yes. They're objects (with automatic storage duration at block scope, or static storage duration at file scope).
[00:16:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[00:16:12] <fizzie> I'm still looking for an actual use case for assigning to a compound literal, but yes, you can.
[00:16:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:16:31] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:16:31] *** Joins: wroathe (~wroathe@user/wroathe)
[00:16:45] <chair1> Ugly code always finds a use case
[00:17:24] *** Joins: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b)
[00:20:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:21:09] *** Joins: ozoned (~odoood@2601:c8:c000:c4e0::4)
[00:21:31] <chair1> Imma leave a comment that &score_text won't work, otherwise the unaware will question why not
[00:23:00] <chair1> I just wondered if a KLUDGES file wouldn't be useful, so that in code you just comment "See KLUDGE014"
[00:23:02] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 240 seconds)
[00:23:22] *** Quits: magla (~gelignite@55d4ee32.access.ecotel.net) (Quit: Stay safe!)
[00:23:33] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[00:23:38] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[00:26:45] <chair1> Taking advantage I'm here, I've been thinking if I should have a data.c and data.h file with all enums, #defines, structs and static const data there.
[00:28:49] <chair1> E.g., I have a state machine controlling if you are on the main menu, playing, paused, game over etc., this belongs to game.{h,c}. But for each state there's a different (optional) menu, that belongs to paint.{h,c}, so I have the association state<->menu split apart.
[00:28:49] *** Quits: alch (~alch@151.38.109.191) (Read error: Connection reset by peer)
[00:29:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[00:31:04] <chair1> Keeping everything at data.{h,c} or common.{h,c}, dunno how to call, would require a lot of changes, better think about this when I'm finished with this assignment
[00:32:56] *** Quits: mahmutov (~mahmutov@37.155.74.145) (Ping timeout: 250 seconds)
[00:32:57] *** Joins: alch (~alch@151.36.111.78)
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:38] <chair1> I could keep everything at game.{h,c} and make paint.{h,c} generic enough to display any menu without knowledge of the game's state, but then that would add a lot of unnecessary pipework
[00:35:19] *** lua is now known as pony
[00:35:51] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[00:37:52] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:39:10] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:39:44] <sokan> my code: http://dpaste.com/9MBN3JX8S, doolittle_hydrophobe.txt: http://dpaste.com/EE3HYC2A9 and aa_3to1_letter_code.txt http://dpaste.com/DVUH7GUPB. I don't get why my code doesn't print(or read) from aa_3to1*.txt the capital one letter (e.g. A, V, etc)
[00:41:37] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[00:43:32] <chair1> Uuuh quick guess: aren't you missing a ":" from the format string?
[00:43:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[00:44:44] *** ozoned is now known as odoood
[00:48:14] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[00:48:39] <fizzie> %s matches ':' as well. But I'm not sure why you would expect a "%*s %*s %s\n" format match input like "Ala: A\n".
[00:49:30] <fizzie> The first (discarded) %*s will match "Ala:", the second (discarded) %*s will match "A" and there's no more non-whitespace characters left for the third non-discarded %s conversion specifier to match to.
[00:49:34] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[00:49:48] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:50:19] <chair1> What is %f?
[00:50:33] <fizzie> Also, it's not valid to use %s with a single `char` as the destination, as it will always (when it succeeds) write at least two characters. If it matches the single-character string "X", it will write a 'X' and a '\'0'.
[00:50:37] <chair1> I'm losing all my neurons, ignore me
[00:51:00] *** Joins: kit-ten (~u0_a391@2600:380:881b:c026:717d:69af:9a4c:d636)
[00:51:12] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:51:15] *** Quits: chair1 (~nero@177.23.12.223) (Quit: Goodbye, thanks for the help)
[00:51:48] <fizzie> ,cc char one; sscanf("Ala: A\n", "%*s %c", &one); printf("one = %c", one); // this would be a plausible format
[00:51:51] <candide> fizzie: one = A
[00:52:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:53:13] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[00:53:30] <fizzie> (For some definitions of "plausible". It will discard any leading whitespace in the string, then match and discard one or more non-whitespace characters, then discard the following whitespace and put to `one` the first non-whitespace character. Then it will stop and ignore whatever's after that in the string.)
[00:54:39] *** Quits: kit_ten (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[00:54:48] *** Quits: beg (~begriffs@user/begriffs) (Quit: Leaving)
[00:56:59] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[00:57:29] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:58:03] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:59:02] *** Joins: Byzantine (~Byzantine@2a02:587:a84:3f6b:7868:ef2b:ddc8:771)
[00:59:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[01:01:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[01:04:01] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:08:54] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[01:11:47] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:15:31] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:6816:2795:9c3:9492)
[01:17:06] *** Joins: chair1 (~nero@177.23.12.223)
[01:20:02] *** Joins: kurahaupo (~kurahaupo@pa49-197-98-26.pa.qld.optusnet.com.au)
[01:20:56] *** Quits: kuber (~kuber@97-113-209-119.tukw.qwest.net) (Quit: leaving)
[01:22:09] <sokan> fizzie: so something like sscanf(line, "%*s %c\n", &aminoacid_in[i].one);
[01:22:23] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:24:05] <sokan> I made that change and my output is still empty from aminoacid_in[0].one
[01:26:23] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Ping timeout: 256 seconds)
[01:27:02] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[01:27:03] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[01:27:08] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[01:28:32] <fizzie> I imagine you would also want to use `j`, not `i`. Since `j` is the one you increment. `i` has whatever value it's got left from the earlier loop.
[01:28:58] <sokan> I really hate debugging
[01:29:07] <sokan> Especially when it comes to small mistakes like that
[01:29:12] <megaTherion> sokan: then C is not for you :O
[01:29:19] <megaTherion> there are so many small mistakes one can do
[01:29:25] <fizzie> Also, FWIW, no need for the "\n" in the format string. Not that it really hurts, either. It's just a little misleading: a "\n" in a *scanf format string does not mean "match a newline", it means the same thing as any other whitespace: match any amount of optional whitespace.
[01:30:05] <sokan> megaTherion: I think this happens with all programming languages :P
[01:30:05] *** Joins: missogra (~missogra@dynamic-077-003-205-073.77.3.pool.telefonica.de)
[01:30:11] <sokan> fizzie: noted
[01:30:13] <megaTherion> sokan: but not all have UB :)
[01:30:23] <sokan> UB?
[01:30:28] <megaTherion> Undefined Behaviour
[01:30:33] <fizzie> You might want to consider scoping the iterators to the loop. As in: `for (int i = 0; fgets(line, sizeof line, in_3code); i++) sscanf(line, "%*s %c", &aminoacid_in[i].one);` - that way you at least can't accidentally refer to it after the loop.
[01:31:01] <sokan> yash! It works just fine now :3
[01:31:02] <fizzie> (Hmm, maybe it doesn't really count as an "iterator" in that context. Counter, maybe? Anyway.)
[01:32:02] <Byzantine> undefined behaviour
[01:32:08] <sokan> oh yeah. That thing
[01:32:38] <Byzantine> undefined behavior
[01:32:38] <sokan> tbh, C makes more sense than python for me
[01:32:48] <sokan> it has some sort of structure/rules.
[01:32:53] <sokan> python seems so random
[01:32:59] <megaTherion> python is really not random
[01:33:03] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:54cf:67b3:a660:d71c) (Quit: Client closed)
[01:33:09] * sokan shrugs
[01:33:12] *** Joins: crashrep (~crashrep@user/crashrep)
[01:33:14] <megaTherion> can you give an example?
[01:33:16] <sham1> Python has structure. It just has weird structure. Also its lexical scoping is odd
[01:33:22] <megaTherion> ;)
[01:33:31] <sokan> megaTherion: not really :(
[01:33:37] <sham1> I sure love having "global" and "nonlocal"
[01:33:39] <sokan> probably what sham1 said
[01:34:06] <ChoHag_> C is perfectly clear and logical if you don't ask too much of it.
[01:34:17] *** Quits: brad_mssw|mac (~bhouse@172.110.173.1) (Ping timeout: 240 seconds)
[01:35:10] <sham1> C is perfectly logical. You just need to read the included instruction booklet which BTW costs an arm and a leg for a regular consumer (or the draft)
[01:35:33] <megaTherion> "just" ;)
[01:35:40] <sham1> The standard isn't expensive but it is a big investment
[01:35:43] <megaTherion> at least C progresses super slowly soo.. you are always up to date kinda
[01:35:56] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:36:05] <rcf> Someone should introduce cocaine to WG14
[01:36:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[01:36:10] <rcf> See what happens
[01:36:12] <megaTherion> you can get along with C99 just nicely.. C has no claims to become anything which it shouldnt be - thats kinda nice
[01:36:48] <sham1> That is true, it progresses slowly enough that one can absorb the standard at least partially. And it of course *has* a standard which is a neat selling point
[01:36:57] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[01:36:58] *** Joins: pyook (~pyook@user/puke)
[01:37:00] * rcf glares at rust
[01:37:08] <sokan> irrelevant question: is it a bad habbit to write a lot of functions (for example to open and do different stuff with a file) in order to have a minimal main() "body" (no idea what the commands in main are called as whole)?
[01:37:23] <megaTherion> no thats perfectly valid thing to do
[01:37:39] <sham1> Yep, Rust is my prototypical example of a language without a standard. It doesn't need to be like an ISO or IEEE or whatever standard. Just some document that lays out what the thing is other than "just look at the implementation lol"
[01:37:51] <Byzantine> sokan: it's just style, and i also think that smaller bespoke functions are better than longer ones
[01:37:55] <sham1> Although to be fair for them, they have tried
[01:37:56] <rcf> sokan: many consider limiting function length to be very good style.
[01:38:20] <rcf> Lets you read the entire thing without needless scrolling in your editor, for example.
[01:38:35] *** Joins: serbest (~serbest@user/serbest)
[01:38:48] <sham1> IIRC the Linux guidelines at some point had this thing (well either the guidelines or just Linus being Linus) where the ideal max length of a function was 3 "standard screenfuls" where a screen is 80x25
[01:38:52] <sham1> Character cells
[01:39:25] <sokan> Cool, cool. And functions are best written in the beginning or the end of the program? (In the beginning they have to be declared one way or another)
[01:39:25] <sham1> At least they've relaxed the column width rule
[01:39:32] <sokan> sham1: lol
[01:39:45] <sokan> by best, I mean easier for the reader/coder
[01:39:53] <sokan> to read
[01:39:59] <sham1> Well the idea is that a function should do one thing
[01:40:03] <sham1> (And do it well)
[01:40:42] <sham1> It improves readability in some sense but it also does add some burden on the developer since they need to split the functionality up into multiple functions
[01:41:19] <sham1> As for where functions go? Down in the file, after declarations of various things like types and such
[01:41:40] <clarity> It also adds burden on the reader because they need to jump around functions to figure out what they *actually* do ;P
[01:41:41] <sham1> And if one needs forward declarations, I'd put them before any of the definitions
[01:42:00] <sham1> clarity: that's true, but that's why one adds docs to increase the clarity
[01:42:08] <clarity> You can't increase me
[01:42:09] <sokan> so types and declaration on top, and function definition down below?
[01:42:19] <sham1> I'd do that, yeah
[01:42:20] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:221:6bff:fe3b:cee4) (Quit: awwww)
[01:42:38] <sokan> I presume it's a matter of style as well
[01:42:57] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[01:43:19] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[01:46:39] <fizzie> Function scope is weird. JS's mixture of `var` variables having function scope, while `let` and `const` variables have block scope, is doubly weird. But that's what you get from having historyâ„¢.
[01:50:21] *** Quits: Byzantine (~Byzantine@2a02:587:a84:3f6b:7868:ef2b:ddc8:771) (Remote host closed the connection)
[01:50:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:51:57] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[01:52:24] *** Joins: Guest89 (~Guest89@36.83.183.219)
[01:52:42] *** Joins: malina (~malina@user/malina)
[01:52:45] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[01:54:16] *** Joins: crashrep (~crashrep@user/crashrep)
[01:55:17] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[01:55:39] *** Joins: thelma (uid509475@id-509475.lymington.irccloud.com)
[01:56:34] *** Quits: Akuli (~Akuli@87-94-108-71.bb.dnainternet.fi) (Quit: Akuli)
[01:56:51] *** Joins: Torr (~Torr@user/torr)
[01:57:03] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[01:57:44] <CodeAgain> Heyy... Do you think it'd be an ugly code someone written a switch(0) or a switch(NULL) and compare with a sequence of function returns?
[01:58:05] <Guest89> guys
[01:58:07] <Guest89> https://t.me/worldhacker_org
[01:58:10] <Guest89> wanna join ?
[01:58:30] <kurahaupo> CodeAgain: the values for cases in a switch statement have to be compile time constants
[01:58:34] <Guest89> did you guys got the book from https://facebook.com/worldhacker.org ?
[01:58:52] <CodeAgain> kurahaupo ohhhh, I forgot that
[01:59:07] <CodeAgain> That's why I never seen it
[01:59:26] <kurahaupo> CodeAgain: The point is to build a jump table at compile time, that runs as just a few machine instructions
[02:00:05] <CodeAgain> Thanks, kurahaupo
[02:00:13] <kurahaupo> A switch statement is NOT a series of comparisons. However a compiler could potentially offer that as an extension
[02:00:23] <ChoHag_> Well it is somewhere.
[02:00:25] *** Guest89 is now known as skraito
[02:00:28] <ChoHag_> Partially at compile time.
[02:00:34] *** Quits: skraito (~Guest89@36.83.183.219) (Changing host)
[02:00:34] *** Joins: skraito (~Guest89@user/skraito)
[02:00:36] <ChoHag_> But not literally.
[02:00:37] *** Quits: skraito (~Guest89@user/skraito) (K-Lined)
[02:00:44] <fizzie> (The controlling statement and cases must also have integer type, meaning `NULL` isn't necessarily something you could use, depending on how it's defined.)
[02:00:57] <kurahaupo> CodeAgain: You can certainly write code like that in, say, Bash
[02:01:08] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[02:01:31] <ChoHag_> As a general rule though if you think you're being clever with switch, you're not.
[02:02:28] <CodeAgain> Indeed, that seems pretty right ChoHag_
[02:05:15] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[02:06:16] *** Joins: begriffs (~begriffs@user/begriffs)
[02:06:23] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Quit: Leaving)
[02:06:28] *** Quits: h4zel (~hazel@user/h4zel) (Quit: WeeChat 3.0.1)
[02:06:36] *** Joins: selk (~selkfoste@user/selkfoster)
[02:06:59] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:08:21] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[02:09:22] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: your partner prefers dildos)
[02:11:44] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[02:13:54] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[02:13:57] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 240 seconds)
[02:14:23] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[02:15:57] *** Joins: h4zel (~hazel@user/h4zel)
[02:16:16] *** Quits: h4zel (~hazel@user/h4zel) (Client Quit)
[02:16:26] *** Joins: h4zel (~hazel@user/h4zel)
[02:21:53] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[02:23:21] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[02:26:31] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:28:06] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:29:00] *** Quits: chair1 (~nero@177.23.12.223) (Quit: leaving)
[02:29:11] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[02:29:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Client Quit)
[02:30:03] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[02:30:30] *** Joins: coruja (~coruja@user/coruja)
[02:31:49] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:33:23] *** Joins: cousteau (~cousteau@user/cousteau)
[02:33:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[02:33:31] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[02:34:05] *** Joins: pizdets_ (~pizdets@183.182.115.221)
[02:34:32] *** Joins: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net)
[02:34:44] *** Quits: pizdets (~pizdets@183.182.111.206) (Ping timeout: 250 seconds)
[02:34:46] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:34:55] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[02:35:17] *** Quits: missogra (~missogra@dynamic-077-003-205-073.77.3.pool.telefonica.de) (Quit: Leaving)
[02:38:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Client Quit)
[02:38:51] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:43:02] <kurahaupo> NRK[m]: POSIX Make does not require all the source in one dir, you just need to put the paths to the sources in the Makefile. but considering the directory structure imposed by, say, Java, that's pretty minor.
[02:43:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[02:43:55] *** Quits: blindguard (~blindguar@2a02:908:1864:c200:e9df:eeac:1563:f38a) (Quit: Konversation terminated!)
[02:45:34] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[02:45:37] *** Quits: wlperdue (~wlperdue@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[02:49:00] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[02:52:35] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:52:36] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:55:28] *** Joins: loganlee (~Thunderbi@user/loganlee)
[02:58:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:01:01] *** Quits: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net) (Ping timeout: 256 seconds)
[03:02:34] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Remote host closed the connection)
[03:03:13] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[03:07:18] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:10:19] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:39:04] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[03:40:49] *** Joins: inlight (~thomas@157.35.22.192)
[03:40:49] *** Quits: inlight (~thomas@157.35.22.192) (Client Quit)
[03:41:31] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:43:44] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[03:44:58] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[03:47:27] *** Quits: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483) (Quit: Leaving)
[03:47:31] <ka80> In this example https://0x0.st/oonE.txt I am trying to return a pointer to either a char* or a uint8_t*. I used void** as the parameter type, but the compiler complains that void** doesn't match char** (or uint8_t**). It is possible to cast any pointer to a void*, so I thought it would be fine to cast any double pointer to void**. Apparently this isn't the case? Does anybody know what I need as a parameter in this function to make it work?
[03:49:35] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[03:50:06] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[03:50:27] <fizzie> There's no "generic pointer to pointer" type.
[03:50:29] <lwhjp> Try returning (void*) - one star, instead of two; that can be a pointer to anything, including (char*) and (uint8_t*).
[03:50:37] *** Joins: crashrep (~crashrep@user/crashrep)
[03:51:28] <fizzie> If for some reason you can't have it return the new pointer, it's possible to call exactly that function too, you'll just have to jump through extra hoops: `{ void *ret; f(STR, &ret); x = ret; }` for example.
[03:51:37] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:53:40] <fizzie> You can *convert* any (object) pointer type to `void *`, but that doesn't make all pointers compatible. The only thing a `void **` can point at is a `void *` object. Hence you can't convert an `int **` (that points at an `int *`) into a `void **` (that's expected to point at an `void *`, which may hypothetically have an entirely different representation than `int *`).
[03:53:55] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:57:23] <fizzie> Or http://c-faq.com/ptrs/genericpp.html for the same thing in rather more words.
[03:59:47] <ka80> OK, thanks for the help. I think I got it to work with like this: https://0x0.st/oonk.txt
[04:00:41] <klys> void** sis = malloc( sizeof( void* ) );  // does this work?
[04:00:42] <fizzie> It's not any more strictly conforming like that.
[04:01:13] <fizzie> As in, it falls in the same "Not portably. Code like this may work --" category described in the FAQ.
[04:01:17] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:01:21] <ka80> If I am reading that FAQ page correctly, this should be portable... right? (famous last words?)
[04:01:58] <fizzie> No. You're passing to the function the address of a `char *` object (`&x`), and then pretending it's the address of a `void *` object (when you dereference `bar`).
[04:02:51] <fizzie> You're just replacing the FAQ example's `(void **)` cast by going `char **` -> `void *` -> `void **`, which also defeats the static type checks.
[04:03:15] *** Joins: dsrt^ (~dsrt@96-86-240-178-static.hfc.comcastbusiness.net)
[04:04:49] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:05:41] <fizzie> (The FAQ might be a little bit understating it when it says different representations for different pointer types are "rare today, but not unheard of". So chances of it working are very high. But if you're aiming for a strictly conforming program, it's not one.)
[04:06:55] <fizzie> This would be another strictly conforming option, FWIW: https://ideone.com/EUwwGM
[04:07:26] <fizzie> Note the difference: in that case, in the `f` function, the pointer is converted back to the correct type before it's used.
[04:08:30] *** Joins: pert (~pert@fsf/member/pert)
[04:08:30] <fizzie> But really as lwhjp said, unless there's something preventing you from doing it, actually returning the pointer is definitely the simplest and cleanest way. You said it yourself, in the question: "I am trying to return a pointer --". So, *return* a pointer, rather than taking an out-parameter.
[04:08:44] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[04:09:26] <fizzie> Compare https://ideone.com/o5lWAV
[04:11:40] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:13:44] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:15:01] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:16:55] *** Joins: asdafasskadkasda (~asdafassk@151.210.137.134)
[04:16:57] *** Quits: asdafasskadkasda (~asdafassk@151.210.137.134) (Client Quit)
[04:16:59] *** Joins: Wulf (~Wulf@user/wulf)
[04:18:00] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[04:20:39] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[04:23:50] *** Joins: noarb (~noarb@user/noarb)
[04:26:09] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[04:26:10] <ka80> Thanks for the help. I think I understand the issues better now. I agree that returning the pointer directly is the more elegant solution.
[04:27:01] *** Joins: gco (~gco@2601:647:4c80:2424:8d36:e592:b781:7480)
[04:29:18] *** Quits: alch (~alch@151.36.111.78) (Read error: Connection reset by peer)
[04:33:19] *** Joins: alch (~alch@151.36.109.222)
[04:33:54] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-87-21.pa.qld.optusnet.com.au)
[04:34:45] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[04:35:02] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7d62-2d2-3a32-97de.fixed6.kpn.net) (Ping timeout: 240 seconds)
[04:36:13] *** Quits: kurahaupo (~kurahaupo@pa49-197-98-26.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[04:37:38] *** Joins: treble (~treble@user/treble)
[04:41:07] <CodeAgain> Heyy, I have a doubt about fread's documentation... At least in my system, fread is supposed to read "nmemb items of data, each size bytes long"
[04:41:40] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 250 seconds)
[04:41:59] <CodeAgain> In practice, does it means that it calls read or equivallent system call reding "size" bytes and does it nmemb times?
[04:42:02] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 240 seconds)
[04:42:10] *** Quits: h4zel (~hazel@user/h4zel) (Quit: WeeChat 3.0.1)
[04:42:17] <CodeAgain> Or it reads at once size * nmemb times?
[04:45:34] *** Quits: ChoHag_ (~mking@81.187.183.71) (Ping timeout: 268 seconds)
[04:45:38] <fizzie> In practice, I think it's usually just one call for size * nmemb bytes. (Of course in terms of the standard, there's no such thing as a `read` system call.)
[04:46:34] <fizzie> It might also very easily be 0 times, if the stream is buffered, and the buffer already has sufficient bytes to satisfy the request.
[04:47:06] *** Joins: ChoHag (~mking@81.187.183.71)
[04:47:33] <fizzie> Easy enough to `strace` empirically on your implementation (and in your specific circumstances), which is the only thing you could really make definitive statements anyway.
[04:48:51] *** Joins: hanzo (uid532183@user/hanzo)
[04:50:11] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[04:52:40] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: â™« I can't forget the day I shot that network down â™«)
[04:53:19] <fizzie> One big and one small read in here, for example, presumably rounded based on the default buffer size: https://0x0.st/oo5X.txt
[04:53:36] <fizzie> https://0x0.st/oo58.txt -- I mean.
[04:53:45] <fizzie> (Did /dev/null instead of /dev/zero first by accident.)
[04:54:34] *** Joins: pert (~pert@fsf/member/pert)
[04:54:37] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[04:54:40] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[04:58:19] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[04:59:07] <CodeAgain> Ohhh, I see
[04:59:23] <CodeAgain> I better not count on anything like that then...
[04:59:37] <CodeAgain> The calls to read were very irregular
[05:00:43] <fizzie> Well, they're reasonable enough. 1021 * 1021 = 1042441 (0xfe809) first got rounded down to 1040384 (0xfe000) and presumably given directly the address of the buffer passed to `fread`, followed by another read of 4096 (0x1000) bytes most likely into the stream's internal buffer, from which the leftovers got copied. But yeah, there's definitely no direct mapping.
[05:00:55] <fizzie> (Except for an unbuffered stream, maybe.)
[05:01:04] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[05:01:10] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 250 seconds)
[05:01:31] <CodeAgain> I think I'm gonna read the whole file (it's expected to be small files) and parse the whole buffer then
[05:01:53] *** Joins: cpuid (~cpuid@co5.at)
[05:01:53] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[05:01:53] *** Joins: cpuid (~cpuid@user/cpuid)
[05:01:55] <CodeAgain> Yes, yes, for the way I was thinking it was irregular, I mean
[05:02:33] *** Joins: vysn (~vysn@user/vysn)
[05:03:42] <CodeAgain> As I'm reading files that are, theoretically, hexadecimal notation of some data, I was expecting to read every 2 bytes and then sscanf it, but I think I was doing something way more complicated than it should be
[05:04:38] <CodeAgain> And less resilient to errors like, i.e., an unexpected space messing everything up
[05:05:17] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[05:08:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:08:52] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:09:38] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[05:09:56] <CodeAgain> Ohhh gosh, not just that, everything I was doing was way more complicated than it should, now I noticed I was trying to allocate memory to read the whole file, but I actually don't need it at all as I might just write right into the output file
[05:10:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[05:20:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:20:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:20:58] *** Joins: wroathe (~wroathe@user/wroathe)
[05:21:26] *** Joins: Sos (~Sos@d107-222.icpnet.pl)
[05:24:30] *** Quits: Hickey_z (~zzy@user/Hickey-z/x-8824799) (Quit: leaving)
[05:24:41] *** Joins: g2anj (~v@58.228.230.4)
[05:24:56] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[05:25:40] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[05:27:50] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[05:28:01] *** Joins: liba (~liba@user/liba)
[05:29:20] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[05:29:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[05:29:35] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[05:32:19] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[05:32:33] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[05:32:48] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[05:33:39] *** Quits: clockworkgirl (sophie@user/clockworkgirl) (Quit: leaving)
[05:33:49] *** Joins: clockworkgirl (sophie@funkykitty.net)
[05:33:49] *** Quits: clockworkgirl (sophie@funkykitty.net) (Changing host)
[05:33:49] *** Joins: clockworkgirl (sophie@user/clockworkgirl)
[05:35:42] *** Joins: cytokine` (~user@47.29.78.181)
[05:36:51] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[05:38:45] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:46:53] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08e4-8030-e2cd-d870.res6.spectrum.com)
[05:48:45] *** Quits: cytokine` (~user@47.29.78.181) (Ping timeout: 256 seconds)
[05:50:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:52:53] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Read error: Connection reset by peer)
[05:57:55] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:00:23] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[06:01:31] *** Joins: fe23 (~fe23@2409:8a34:461:9470:f0f9:23ae:5bbf:556b)
[06:05:48] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[06:06:34] *** Quits: thelma (uid509475@id-509475.lymington.irccloud.com) ()
[06:06:35] *** Joins: kit_ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[06:07:35] *** Quits: gco (~gco@2601:647:4c80:2424:8d36:e592:b781:7480) (Quit: ZZZzzzâ€¦)
[06:07:58] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:6816:2795:9c3:9492) (Read error: Connection reset by peer)
[06:10:30] *** Quits: kit-ten (~u0_a391@2600:380:881b:c026:717d:69af:9a4c:d636) (Ping timeout: 250 seconds)
[06:15:23] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[06:20:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:22:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:23:21] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08e4-8030-e2cd-d870.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[06:23:27] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:24:00] *** Joins: Rounin (~david@84.212.130.215)
[06:28:51] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:32:38] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[06:33:45] *** Joins: thelma (uid509475@id-509475.lymington.irccloud.com)
[06:34:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 250 seconds)
[06:34:20] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 250 seconds)
[06:34:22] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[06:37:19] *** Quits: serbest (~serbest@user/serbest) (Quit: Leaving)
[06:39:59] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:42:01] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:44:59] *** Quits: zlg_ (~zlg@user/zlg) (Quit: WeeChat 2.8)
[06:49:37] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[06:50:35] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[06:51:29] *** Quits: vinleod (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:52:00] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:52:40] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:37] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[06:54:53] *** Joins: Nutte35 (~Nutte@202.153.81.155)
[06:56:58] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:17:41] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[07:18:04] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[07:19:24] *** Joins: stanrifkin (~stanrifki@p200300dbcf1e7000d97ad5902cc7dd2c.dip0.t-ipconnect.de)
[07:23:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08e4-8030-e2cd-d870.res6.spectrum.com)
[07:24:33] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08e4-8030-e2cd-d870.res6.spectrum.com) (Client Quit)
[07:31:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:33:42] *** Joins: Darkcoal (~user@130.164.162.247)
[07:34:08] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[07:34:44] *** Joins: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2)
[07:34:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:25] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:17] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:38:14] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:38:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:38:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:38:24] *** Joins: wroathe (~wroathe@user/wroathe)
[07:43:07] *** Joins: joomla5 (uid527699@id-527699.uxbridge.irccloud.com)
[07:45:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[07:46:42] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-87-21.pa.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[07:47:59] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:51:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:52:19] *** Joins: stanrifkin_ (~stanrifki@p508d4eab.dip0.t-ipconnect.de)
[07:54:32] *** Quits: stanrifkin (~stanrifki@p200300dbcf1e7000d97ad5902cc7dd2c.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:55:08] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:56:14] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[07:59:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:59:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:59:29] *** Joins: wroathe (~wroathe@user/wroathe)
[08:01:35] *** Joins: kurahaupo (~kurahaupo@pa49-197-100-162.pa.qld.optusnet.com.au)
[08:01:57] *** Joins: barthandelous (~cbrzezins@gateway/tor-sasl/barthandelous)
[08:03:25] *** Joins: Atque (~Atque@user/atque)
[08:03:36] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:54cf:67b3:a660:d71c)
[08:04:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:04:45] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:05:22] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-112-209.pa.qld.optusnet.com.au)
[08:05:32] *** Quits: kurahaupo (~kurahaupo@pa49-197-100-162.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[08:05:54] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[08:07:27] *** vdamewood is now known as Guest2444
[08:07:27] *** Quits: Guest2444 (~vdamewood@fedora/vdamewood) (Killed (lithium.libera.chat (Nickname regained by services)))
[08:07:27] *** vinleod is now known as vdamewood
[08:13:32] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-112-209.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[08:16:54] *** Quits: barthandelous (~cbrzezins@gateway/tor-sasl/barthandelous) (Ping timeout: 276 seconds)
[08:22:07] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Ping timeout: 256 seconds)
[08:23:49] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:54cf:67b3:a660:d71c) (Ping timeout: 256 seconds)
[08:24:06] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:24:42] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[08:28:37] *** Quits: alch (~alch@151.36.109.222) (Read error: Connection reset by peer)
[08:29:53] *** Joins: kurahaupo (~kurahaupo@pa49-182-112-209.pa.qld.optusnet.com.au)
[08:30:28] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:32:42] *** Joins: alch (~alch@151.36.120.185)
[08:33:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[08:34:21] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[08:37:58] *** Quits: selk (~selkfoste@user/selkfoster) ()
[08:39:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[08:40:51] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:41:37] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Ping timeout: 240 seconds)
[08:43:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:43:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:43:20] *** Joins: wroathe (~wroathe@user/wroathe)
[08:43:34] *** Quits: Sos (~Sos@d107-222.icpnet.pl) (Quit: Leaving)
[08:47:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:48:39] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[08:52:17] *** Quits: Darkcoal (~user@130.164.162.247) (Ping timeout: 240 seconds)
[08:54:28] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:114:d372:8c0a:4f04)
[08:59:02] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[09:01:10] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:01:16] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[09:01:32] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:114:d372:8c0a:4f04) (Ping timeout: 240 seconds)
[09:03:38] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:a74:5a4:87c5:8d1)
[09:04:55] *** Joins: sonny (~user@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[09:05:06] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:07:51] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:08:53] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.166)
[09:10:04] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[09:10:46] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:a74:5a4:87c5:8d1) (Ping timeout: 250 seconds)
[09:11:06] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[09:11:09] *** Joins: Darkcoal (~user@130.164.162.247)
[09:12:01] *** Joins: badsektor (~badsektor@user/badsektor)
[09:12:47] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[09:13:17] *** Quits: badsektor (~badsektor@user/badsektor) (Client Quit)
[09:13:50] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[09:16:01] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:16:43] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[09:22:49] *** Joins: ickk (~ickk@user/ickk)
[09:23:07] *** Quits: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740) (Quit: Leaving)
[09:24:42] *** Joins: aaron (~aaron@dsl-katy-207-70-135-154.consolidated.net)
[09:27:33] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[09:28:55] *** Quits: sonny (~user@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[09:30:53] *** Quits: aaron (~aaron@dsl-katy-207-70-135-154.consolidated.net) (Quit: aaron)
[09:31:17] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[09:34:16] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Client Quit)
[09:34:41] *** Joins: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net)
[09:36:34] *** Joins: bliminse_ (~bliminse@host86-188-36-166.range86-188.btcentralplus.com)
[09:36:55] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Ping timeout: 256 seconds)
[09:37:15] *** Quits: Darkcoal (~user@130.164.162.247) (Ping timeout: 268 seconds)
[09:38:32] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:174d:c1ee:c5ba:4bef)
[09:42:11] *** Quits: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net) (Ping timeout: 268 seconds)
[09:49:19] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äœis.)
[09:50:38] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[09:53:38] *** Quits: symb0l (~symb0l@dsl-katy-207-70-135-154.consolidated.net) (Quit: symb0l)
[09:55:38] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[09:55:43] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:56:10] *** Joins: oldtopman (~oldtopman@c-71-205-4-123.hsd1.co.comcast.net)
[09:58:17] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[09:58:18] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:59:03] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:09:19] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:174d:c1ee:c5ba:4bef) (Ping timeout: 268 seconds)
[10:10:34] *** Joins: kubrickdave_ (~kubrickda@194-166-168-169.adsl.highway.telekom.at)
[10:11:00] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[10:11:01] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:12:53] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:13:32] *** Quits: kubrickdave (~kubrickda@80-121-13-33.adsl.highway.telekom.at) (Ping timeout: 240 seconds)
[10:17:44] <nightstrike> I don't understand the rationale for #elifdef...   I thought you could do... #ifdef X  ..  #else Y     such that "#else Y" is the same as the new "#elifdef Y"
[10:19:32] *** Joins: wootz (~wootz@89.46.114.30)
[10:19:34] <Rounin> There's an #elifdef? Someone must have really loved syntactic sugar
[10:20:05] <Rounin> I mean... Regular #ifdef is at least understandable
[10:20:40] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:21:42] <Rounin> I wish there had been a link-time one, though... Like #if exist(qsort) == false int qsort(char* etc. etc)
[10:22:02] <Rounin> So we could do polyfills without thousands of build tools
[10:22:16] <Rounin> A guy can dream.
[10:22:44] <dave0> ooh
[10:22:47] <dave0> google says
[10:22:54] <dave0> #elifndef
[10:24:19] <nightstrike> I was referring to https://en.cppreference.com/w/c/preprocessor/conditional
[10:24:23] <nightstrike> They're both there in C23
[10:24:39] <nightstrike> just seems superfluous in a language that gets very little changed in it
[10:26:10] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[10:26:16] <ChoHag> Think how much time will be saved without having to type that superfluous 'ined' and the extra space.
[10:26:38] *** Joins: selk (~selkfoste@user/selkfoster)
[10:26:39] <ChoHag> Maybe almost as much time as it took to discuss the feature!
[10:27:01] <dave0> #elifndef isn't very "c"-ie .. should it be #elif!def ?
[10:28:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:29:56] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:30:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[10:33:36] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[10:39:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:44:02] *** Quits: wootz (~wootz@89.46.114.30) (Read error: Connection reset by peer)
[10:44:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:44:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:44:08] *** Joins: wroathe (~wroathe@user/wroathe)
[10:44:22] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[10:49:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[10:49:35] <vdamewood> dave0: It matches #ifndef
[10:51:34] <dave0> i hope it's U.B. to use #elifdef without first an #if #ifdef or #ifndef
[10:52:14] <vdamewood> It will probably be a syntax error
[10:52:39] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[10:52:53] <vdamewood> like it is with #else
[10:53:05] <dave0> too much of a burden on the implementor
[10:56:10] <ChoHag> It expands mechanically to else if[n]def so there won't be many difficulties implementing it.
[10:56:14] <ChoHag> Kind of pointless though.
[10:57:11] *** Joins: Windshield (~Windshiel@120.20.31.231)
[10:57:32] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:59:19] <vdamewood> ChoHag: Velcro darts are also pointless, but people still make them.
[10:59:32] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[11:07:42] *** Joins: oriba (~oriba@77.11.223.152)
[11:08:26] *** Joins: liba (~liba@user/liba)
[11:08:37] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:15:01] *** Joins: hayden (~hayden@2601:1c0:8101:7310::144a)
[11:16:00] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[11:17:05] *** hayden is now known as Chewt
[11:17:23] <NRK[m]> kurahaupo: yes, which is pain.
[11:17:38] <NRK[m]> and at that point i'd just use GNU make.
[11:20:07] *** Quits: Windshield (~Windshiel@120.20.31.231) (Read error: No route to host)
[11:21:05] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-1594-34f8-5136-bd7a.fixed6.kpn.net)
[11:21:56] *** Joins: Windshield (~Windshiel@120.20.31.231)
[11:23:34] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[11:23:39] *** Quits: Windshield (~Windshiel@120.20.31.231) (Read error: Connection reset by peer)
[11:23:59] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:24:24] *** Joins: Windshield (~Windshiel@120.20.31.231)
[11:25:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[11:25:24] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Quit: institute budget)
[11:25:39] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-1594-34f8-5136-bd7a.fixed6.kpn.net) (Client Quit)
[11:27:14] *** Joins: Atque (~Atque@user/atque)
[11:27:17] *** Quits: Windshield (~Windshiel@120.20.31.231) (Read error: No route to host)
[11:27:32] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:27:45] *** Joins: Windshield (~Windshiel@120.20.31.231)
[11:28:06] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[11:28:10] *** Quits: Windshield (~Windshiel@120.20.31.231) (Read error: No route to host)
[11:29:29] *** Joins: cosimone (~user@93-44-185-255.ip98.fastwebnet.it)
[11:31:32] *** Joins: diophantoz (~diophanto@user/diophantoz)
[11:33:34] *** Quits: iomari891 (~iomari891@105.112.138.38) (Remote host closed the connection)
[11:36:05] *** Joins: vysn (~vysn@user/vysn)
[11:38:35] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:40:41] *** Quits: Cienisty (Cienisty@user/cienisty) (Ping timeout: 250 seconds)
[11:42:22] *** Joins: aradesh (~aradesh@user/aradesh)
[11:42:31] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-58b1-4e88-f873-517a.fixed6.kpn.net)
[11:49:28] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:49:49] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[11:56:25] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[11:56:45] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:56:52] *** Quits: Nutte35 (~Nutte@202.153.81.155) (Read error: Connection reset by peer)
[11:56:57] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[11:57:21] *** Joins: Nutte35 (~Nutte@202.153.81.155)
[11:59:03] *** Joins: fluter (~fluter@user/fluter)
[12:01:25] *** Quits: Nutte35 (~Nutte@202.153.81.155) (Ping timeout: 240 seconds)
[12:05:20] *** Joins: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483)
[12:08:20] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 268 seconds)
[12:10:04] *** Joins: Cienisty (Cienisty@user/cienisty)
[12:13:40] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[12:14:02] *** Quits: thelma (uid509475@id-509475.lymington.irccloud.com) ()
[12:15:24] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[12:15:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[12:16:10] *** Joins: Klinda (~superleag@user/klinda)
[12:16:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Client Quit)
[12:17:17] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:17:25] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[12:18:41] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[12:18:58] *** Joins: bindu (~bindu@user/bindu)
[12:19:38] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:21:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5d44:edfe:270d:6900) (Ping timeout: 240 seconds)
[12:22:17] *** Joins: zwr (~zwr@2804:d45:b966:fb00:1974:a2f:e75f:4c0b)
[12:23:41] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: your partner prefers dildos)
[12:29:18] *** Quits: alch (~alch@151.36.120.185) (Read error: Connection reset by peer)
[12:30:06] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (Quit: You have been kicked for being idle)
[12:31:22] *** Joins: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl)
[12:32:28] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[12:33:07] *** Joins: alch (~alch@151.38.180.216)
[12:33:36] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:33:52] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:35:01] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[12:36:42] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[12:40:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:41:12] *** Joins: jellie (~luv_panda@user/jellie)
[12:42:17] *** Joins: fwg (~fwg@user/fwg)
[12:43:02] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[12:44:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[12:44:48] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:47:27] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:48:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[12:51:14] *** Quits: selk (~selkfoste@user/selkfoster) ()
[12:51:17] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[12:52:37] *** Joins: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net)
[12:53:38] <lisbeths> I am trying to understand the consequences of flat memory not always being able to be supported.
[12:55:15] <supakeen> The consequences to the programmer are usually not noticeable.
[12:57:34] <lisbeths> I am trying to write very portable code and I am trying to implement a language with dynamic memory and trees of clojures
[12:58:21] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[12:58:23] *** Joins: hsv_ (~unknown@user/hsv)
[12:59:03] <lisbeths> If possible I want my language to be loose with no typechecking and to be able to manpulate memory directly.
[12:59:18] <dave0> just say Forth
[13:00:44] <lisbeths> Forth
[13:02:28] *** Quits: cosimone (~user@93-44-185-255.ip98.fastwebnet.it) (Remote host closed the connection)
[13:05:38] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[13:06:11] <hsv_> What's the right way to initialise an array of char ptrs to all null, char *a[10] = {0}; or char *a[10] = {NULL};  ?
[13:06:27] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[13:07:27] <dave0> hsv_: {0} always works.. NULL maybe
[13:08:02] *** Joins: inlight (~thomas@157.35.22.110)
[13:08:02] *** Quits: inlight (~thomas@157.35.22.110) (Changing host)
[13:08:02] *** Joins: inlight (~thomas@user/inlight)
[13:08:08] <dave0> {0} always works for everything
[13:09:44] <hsv_> thanks. sorry, on second thoughts can i do: char *a[10] = { [0..9] = "" }; ?
[13:10:15] <dave0> that's different and non-standard
[13:10:32] <hsv_> it's global scope so naturally will be null.
[13:10:33] <dave0> the 0...9 syntax is a gcc extension
[13:11:15] <dave0> "" is not null.. that initializes a[] to point to empty strings, possibly the same address, but not a NULL address
[13:12:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:40] <hsv_> yes, i get that.  sorry i was thinking out loud.
[13:14:00] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:14:46] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:15:48] *** Joins: Burgundy (~NA@86.121.143.206)
[13:17:17] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Ping timeout: 240 seconds)
[13:22:35] *** Joins: seninha (~seninha@user/seninha)
[13:23:13] *** Quits: vboykox (~user@95.134.25.162) (Ping timeout: 256 seconds)
[13:23:48] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:23:48] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[13:24:43] *** Joins: vboykox (~user@121-57-134-95.pool.ukrtel.net)
[13:27:38] <baltazar> hi! can you specify fixed-size integral types in printf format strings?
[13:27:48] <sham1> Yes
[13:27:49] <hsv_> baltazar: yes
[13:27:53] <baltazar> how?
[13:28:09] <sham1> ,cc int32_t a = 5; printf("%"PRId32, a);
[13:28:12] <candide> sham1: 5
[13:28:13] <ChoHag> inttypes.h
[13:28:39] <baltazar> ah, thanks!
[13:29:43] <hsv_> it's ugly though, i often just cast the args to native types.
[13:30:17] <baltazar> hsv_: I don't want to accidentally narrow my ints
[13:30:24] <dave0> good old int..
[13:30:47] <hsv_> baltazar: that's fine, just saying.
[13:32:26] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:33:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:35:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 268 seconds)
[13:38:19] *** Quits: DreamweaverN (~Dreamweav@37.48.111.199) (Ping timeout: 250 seconds)
[13:38:46] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[13:39:40] <NRK[m]> hsv_: why bother if it's static storage duration?
[13:40:16] *** Joins: DreamweaverN (~Dreamweav@2001:1af8:4700:b0d0:a800::)
[13:40:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[13:40:27] <hsv_> NRK[m]: because i wasn't thinking straight.
[13:43:45] <hsv_> What i had planned to do was have a lookup array of character escapes, something like: const char escapes[256] = { ['\0'] = "\\0", ['\n'] = "\\n", ... };
[13:46:02] *** Joins: cosimone (~user@93-44-185-255.ip98.fastwebnet.it)
[13:46:59] *** Joins: Atque (~Atque@user/atque)
[13:47:17] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 240 seconds)
[13:48:34] *** Joins: inlight (~thomas@157.35.43.235)
[13:48:34] *** Quits: inlight (~thomas@157.35.43.235) (Changing host)
[13:48:34] *** Joins: inlight (~thomas@user/inlight)
[13:49:32] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[13:49:49] *** Joins: inlight (~thomas@157.35.43.235)
[13:49:49] *** Quits: inlight (~thomas@157.35.43.235) (Changing host)
[13:49:49] *** Joins: inlight (~thomas@user/inlight)
[13:51:16] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[13:52:41] *** Joins: inlight (~thomas@157.35.43.235)
[13:52:41] *** Quits: inlight (~thomas@157.35.43.235) (Changing host)
[13:52:41] *** Joins: inlight (~thomas@user/inlight)
[13:53:22] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:53:31] <dave0> i think all the escapes are < 32 .. ie. the ascii control characters
[13:53:42] <stanrifkin_> hsv_: and indexing with escapes['\0'] ? or how is it supposed to be used?
[13:54:01] <dave0> but also you can specify octal or hex escapes too
[13:54:35] <ChoHag> And 127/0x7f.
[13:55:03] <hsv_> it's in thinking how it would be used i decided to take a different approach ;)
[13:56:59] <dave0> ChoHag: i don't think there's an escape for that?
[13:58:02] <hsv_> if (escapes[c]) printf("%s", escapes[c]); else if isprint(c) putchar(c); else printf("\\x%02x", (unsigned)c);
[13:58:56] *** Joins: bbju (~bbju@103.144.149.220)
[13:59:10] <hsv_> it would have been nice for the lookup to encompass all 256 chars to simplify the run-time code.
[13:59:34] <caze> hsv_: How many escapes will you deal with?
[13:59:45] <hsv_> anything that is not printable.
[14:01:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:01:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:01:56] *** Joins: wroathe (~wroathe@user/wroathe)
[14:01:59] <caze> What problem are you trying to solve?
[14:02:08] *** Joins: marlboro (~i.am@user/marlboro)
[14:03:21] <hsv_> to print some unchecked arbitrary data as a "string", accounting for it may include unprintable characters.
[14:04:03] <hsv_> i don't much care for the format, although valid C syntax would be nice.
[14:04:18] <ChoHag> hsv_: iscntrl(3)
[14:04:48] <ChoHag> On openbsd at least this is implemented with a 256-byte array: https://cvsweb.openbsd.org/src/lib/libc/gen/ctype_.c?rev=1.12&content-type=text/x-cvsweb-markup
[14:05:57] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[14:06:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:07:19] <ChoHag> Actually for some reason it's 257 bytes...
[14:07:39] <hsv_> ,cc char c = 255; if (iscntrl(c)) printf("\\x%02x", (unsigned)c); else putchar(c);
[14:07:42] <candide> hsv_: No output.
[14:07:44] <stanrifkin_> hsv_: scan over the input string and strcpy to a new string
[14:09:35] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[14:09:46] <caze> hsv_: What will you do for characters for which there is no control character?
[14:09:51] <hsv_> ,cc char c = 255; if (isprint(c)) putchar(c); else printf("\\x%02x", (unsigned)c);
[14:09:54] <candide> hsv_: [warning: overflow in conversion from 'int' to 'char' changes value from '255' to '-1' [-Woverflow]] \xffffffff
[14:10:14] <hsv_> candide: output "\xNN"
[14:10:15] <candide> [#bash] What do you want the file to contain? Write the EXACT thing you want it to contain on one line in your IRC client and then press <ENTER>. Put NOTHING else on this line.
[14:10:23] *** Joins: bbju (~bbju@103.144.149.220)
[14:10:50] <ChoHag> hsv_: Nothing above 127 is ascii.
[14:11:13] <caze> hsv_: The spec requires only seven control characters.
[14:14:04] <hsv_> caze: that is why i print anything else with "\xNN" escaping.
[14:15:43] <caze> hsv_: Are you going to write a program to generate the table for you?
[14:16:17] *** Quits: davros (~davros@host86-184-180-214.range86-184.btcentralplus.com) (Ping timeout: 240 seconds)
[14:16:20] <hsv_> caze: no.
[14:19:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:19:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:21:14] <caze> hsv_: Why not?
[14:21:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:22:12] <hsv_> caze: that's a strange question.  because it's uneccessary?
[14:22:47] <caze> hsv_: It would save a lot of hand work.
[14:23:30] *** Joins: Viewday11 (~Viewday@user/viewday)
[14:23:34] <hsv_> caze: i'm not a fan of auto-generated code, it's one more thing to maintain.
[14:24:04] <caze> hsv_: Beats maintaining a 256 entry table.
[14:24:17] <dave0> hsv_: you must cast the argument to the is* functions... eg.     if(isprint((unsigned char)c)) { ... }
[14:24:25] <hsv_> caze: maybe there is some macro wizardry to do it, but i'm nt going there either unless it's really obvious.
[14:27:19] <hsv_> caze: yes, that's why i'm not using a 256 entry table ;)
[14:27:29] <caze> hsv_: What are you using then?
[14:27:46] <hsv_> it's lost up there somewhere ^
[14:28:32] *** Joins: bilbo (~bilbo@host-37-191-190-173.lynet.no)
[14:29:09] *** Joins: davros (~davros@host86-184-82-149.range86-184.btcentralplus.com)
[14:29:36] <caze> Nested ifs with the character classification functions?
[14:29:57] <hsv_> yes.  untested.
[14:30:48] <bilbo> hello. does anyone know how to use g_set_error with glib? i am looking at an application that uses it, but i don't know how to see the error messages at runtime
[14:31:29] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[14:31:41] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:32:44] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Ping timeout: 250 seconds)
[14:33:44] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:34:02] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:34:12] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[14:34:47] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:36:19] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:37:30] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:41:24] *** Joins: kish` (~aqua@user/aqua)
[14:42:13] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[14:42:27] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:42:47] <fizzie> `g_set_error` is just the equivalent of `g_error_new` with a different calling convention. How you'd "see" the error message depends on what it does with the `GError *` that it gets out of those functions. The message is just a field in it.
[14:43:01] *** Joins: aqua (~aqua@user/aqua)
[14:44:31] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[14:47:16] *** Quits: dsrt^ (~dsrt@96-86-240-178-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[14:47:42] <bilbo> fizzie: right. i am guessing that there is some environment variable you start the program with to enable printing of them
[14:47:48] *** Joins: badsektor (~badsektor@user/badsektor)
[14:50:25] <badsektor> i reached 130 stars in adventofcode
[14:50:48] *** Quits: aqua (~aqua@user/aqua) (Ping timeout: 276 seconds)
[14:50:49] <fizzie> As far as I know, only if the program explicitly does something like that. What the library provides is just a data type and a set of conventions.
[14:51:07] <fizzie> As in, it's not like a logging system.
[14:51:59] <fizzie> It's just a mechanism for reporting errors from function A to whatever function B that called it.
[14:53:13] *** Quits: puke (~puke@user/puke) (Quit: puke)
[14:54:28] <fizzie> (`g_log` and its associated functions would be the GLib mechanism for the other kind of messages.)
[14:54:48] <bilbo> fizzie: thank you :)  that helps a lot
[14:58:26] *** Joins: kish` (~aqua@user/aqua)
[14:58:53] *** Joins: shivesh (~shivesh@user/shivesh)
[15:00:51] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:03:10] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[15:04:58] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:06:51] *** Joins: badsektor (~badsektor@user/badsektor)
[15:09:25] *** Joins: on^ (~on@96-86-240-178-static.hfc.comcastbusiness.net)
[15:10:16] *** Joins: puke (~puke@user/puke)
[15:12:06] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 268 seconds)
[15:16:38] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[15:16:46] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[15:19:29] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:20:29] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[15:22:12] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34)
[15:25:01] *** Joins: mjoerg (~user@user/mjoerg)
[15:25:01] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34) (Client Quit)
[15:25:01] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[15:25:22] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[15:26:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[15:26:50] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[15:27:43] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[15:28:37] *** Joins: vysn (~vysn@user/vysn)
[15:29:34] *** Joins: kit-ten (~u0_a391@2600:380:8815:93a5:db4b:61ad:43f8:6363)
[15:29:44] *** Joins: Klinda (~superleag@user/klinda)
[15:30:24] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:09] *** Joins: csrf (~csrf@user/csrf)
[15:32:17] *** Quits: kit_ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:32:46] *** Joins: soul-d (~uknown@user/soul-d)
[15:33:04] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[15:33:53] *** Joins: azed (~azed@197.16.189.73)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:10] *** Parts: stanrifkin_ (~stanrifki@p508d4eab.dip0.t-ipconnect.de) (Leaving)
[15:39:56] *** Quits: ickk (~ickk@user/ickk) (Ping timeout: 260 seconds)
[15:40:51] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:41:12] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 250 seconds)
[15:41:25] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:41:57] *** Quits: vboykox (~user@121-57-134-95.pool.ukrtel.net) (Ping timeout: 240 seconds)
[15:42:06] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[15:43:09] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Quit: oof.)
[15:44:53] *** Joins: bbju (~bbju@103.144.149.220)
[15:45:10] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[15:49:20] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[15:56:10] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[15:57:36] *** kit-ten is now known as kit-dog
[15:59:51] *** kit-dog is now known as kit-ten
[16:00:09] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[16:05:26] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:07:18] *** Joins: Viewday11 (~Viewday@user/viewday)
[16:10:32] *** kit-ten is now known as kit-kat
[16:11:26] *** kit-kat is now known as kit-ten
[16:13:03] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:14:18] <jkotra> Not related to C but i have a question about VSCode
[16:15:11] *** Joins: Viewday11 (~Viewday@user/viewday)
[16:15:15] <jkotra> Since a few day, a new tab called Tasks keeps appearing on my terminal area and combined with it. I searched everywhere but there's no option to remove it
[16:15:22] <jkotra> Any one has any idea?
[16:15:28] <jkotra> Its really annoyit
[16:15:34] <jkotra> *annoying
[16:17:25] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:18:22] <vysn> https://imgur.com/b8f7aAj
[16:18:46] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[16:19:19] <ChoHag> Complete its side-quest?
[16:19:31] *** Joins: Viewday11 (~Viewday@user/viewday)
[16:20:52] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[16:22:11] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[16:23:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:23:47] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:fc4f:93d6:1583:8a42)
[16:25:39] *** Joins: bbju20 (~bbju@103.144.149.220)
[16:25:43] *** Joins: Viewday11 (~Viewday@user/viewday)
[16:26:34] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.4)
[16:28:31] *** Quits: alch (~alch@151.38.180.216) (Read error: Connection reset by peer)
[16:30:09] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:31:21] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 256 seconds)
[16:32:12] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[16:32:25] *** Joins: alch (~alch@151.38.133.171)
[16:36:54] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[16:37:07] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[16:37:13] *** Joins: Echoz (~chris@user/echoz)
[16:38:50] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[16:38:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:41:34] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[16:43:47] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[16:45:52] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[16:48:13] *** Joins: pulse (~pulse@user/pulse)
[16:48:32] *** Quits: Major_Biscuit (~MajorBisc@c-001-019-027.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[16:49:48] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:50:58] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[16:51:50] <gtlsgamr> Hi there. I am learning C from a book and there is a practice question. I don't understand what exactly the question is trying to say and was hoping someone could explain it. Here is the statement. --> // Write a program detab that replaces tabs in the input with the proper number of blanks to space to the next tab stop. Assume a fixed set of tab stops, say every n columns. Should n be a variable or a
[16:51:56] <gtlsgamr> symbolic parameter?
[16:52:02] <gtlsgamr> I don't want answers, just want to understand the question.
[16:52:41] <dave0> gtlsgamr: do you know the unix command   expand   ? it wants you to write that
[16:53:36] <gtlsgamr> dave0: So basically convert \t to n number of spaces right?
[16:53:50] <dave0> gtlsgamr: yep
[16:53:56] <gtlsgamr> Alright thanks Dave!
[16:54:25] <dave0> gtlsgamr: but it's a little tricker because say it's   hello <tab> world    that tab should only expand to 3 spaces (assuming tabs every 8 spaces)
[16:54:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:55:15] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:56:10] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[16:57:29] <gtlsgamr> so assume that _ is a space. Then 'HELLO__\t___WORLD' should become 'HELLO________WORLD' i.e. the tab should become 3 spaces, and the rest of the spaces remain the same
[16:57:33] <gtlsgamr> is that correct?
[16:58:17] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[16:58:27] <dave0> i think so
[16:58:32] <koollman> the most tricky part is that almost nobody uses tab stops that way anymore :)
[16:59:36] <gtlsgamr> I guess the question was written with use case of that time in mind. I will still attempt this, just for learning purposes.
[16:59:37] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:59:54] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:00:08] <dave0> did you do the exercise where it counts words? that's like unix command   wc
[17:00:29] <dave0> so you can test your answer against the unix programs
[17:05:44] <ski> gtlsgamr : ".. i.e. the tab should become 3 spaces, and the rest of the spaces remain the same","is that correct?" -- no
[17:06:21] <ski> but i think, using the same notation, that dave0 had `HELLO\tWORLD' to `HELLO___WORLD' in mind
[17:06:42] <gtlsgamr> ski: so just convert the tabs to spaces. that's all
[17:07:02] <ski> (`HELLO' is five characters, so if we start at the first tab stop, it takes three spaces to fill to the next, assuming it's every eight)
[17:07:30] <ski> well, you can't just convert every horizontal tabulation character to `n' spaces
[17:08:22] <ski> (that would give you `HELLO________WORLD')
[17:08:26] <gtlsgamr> hmm.. I am not sure I understand.
[17:08:32] <koollman> not just convert, because you have to count from the start of the line and imagine the 'tab stops'. each tab is like "add space until the next tab stop"
[17:09:54] <gtlsgamr> I found a nice explanation online
[17:09:55] <gtlsgamr> http://www.learntosolveit.com/cprogramming/Ex_1.20_detab.html
[17:09:56] <candide> Title of gtlsgamr's link: Exercise 1.20 - detab, replaces tabs with spaces â€” Learn To Solve It
[17:10:18] <koollman> say n==3, then hello\tworld is displayed as hello_world, or with tab stops as |, hel|lo_|wor|ld . now, if n=4, that same string is hell|o___|worl|d
[17:10:27] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 256 seconds)
[17:11:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:12:53] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[17:13:32] *** Quits: azed (~azed@197.16.189.73) (Quit: WeeChat 3.4)
[17:13:55] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca)
[17:14:54] *** Quits: Viewday11 (~Viewday@user/viewday) (Quit: The Lounge - https://thelounge.chat)
[17:16:20] *** Quits: GyrosGeier (~geier@185.27.255.155) (Remote host closed the connection)
[17:18:36] <ChoHag> Why does it say "Should n be a variable or a symbolic parameter?" Did you add that or is it part of the question?
[17:19:19] <gtlsgamr> It is a part of the question.
[17:19:42] <gtlsgamr> I think it is trying to get the reader to "think" about those concepts.
[17:20:00] <ski> yea, where does `n' "come from" ?
[17:20:17] <ski> who determines the value of `n'. what is reasonable to expect ?
[17:20:33] <gtlsgamr> I think the n can be an arbitary value.
[17:21:01] <gtlsgamr> suppose n is 4. what happens if "H\tELLO' is given as input?
[17:21:08] <ski> would it be okay if you wrote `const int n = 10;' in your code ?
[17:21:25] <gtlsgamr> I think so.. #define NUMBER 10
[17:21:32] <ski> yea, or that
[17:22:59] <ski> well, the `H' moves past the initial tab stop. so then the `\t' will add the appropriate number of spaces to move the position to the next tab stop, at which point we'll resume with `ELLO'
[17:23:16] <ski> so, with `n = 4', that gives `H___ELLO'
[17:23:51] <dave0> you can see it in your text editor when you press tab ... you can use tabs to line things up which gives you a hint on how to do the exercise
[17:24:46] <ski> gtlsgamr : i guess one way of thinking about is, is getting into the habit of imagining yourself as a user/customer of your own program. how would you, as a user, prefer the handling/choice of `n' to be dealt with ?
[17:25:40] <ski> would it e.g. be okay for you, as a user, to have the author/implementor (that's you, with another hat on) arbitrarily decide on the value of `n' ? does it matter if you (as user) think their choice of `n' is reasonable or not ?
[17:26:07] <tk> Hi kids, remember that argc can be 0 and argv[0] can be NULL.
[17:26:18] <tk> Just so you don't introduce the next major vulnerability.
[17:27:23] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:f8d5:8af2:5390:e10e)
[17:27:32] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:fc4f:93d6:1583:8a42) (Ping timeout: 240 seconds)
[17:28:01] <sham1> Isn't that against POSIX
[17:28:04] <ski> ("user" could be someone who's just starting the program, either from a command-line interface, or by clicking/tapping some icon or menu item. or, whenever you're writing code in a program, and you call a function, you're a user of that function. so, thinking of the user experience is also thinking about the interface of the function, how it's to be called, what information is passed, and how it's passed)
[17:28:29] <tk> sham1: quite possibly, but that doesn't stop multiple popular operating systems from allowing you to execute programs with no argv[0]
[17:28:44] <fizzie> It's only sort of "mildly" against POSIX.
[17:29:33] <fizzie> https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/functions/execve.html "Early proposals required that the value of argc passed to main() be "one or greater". This was driven by the same requirement in drafts of the ISO C standard. -- This requirement was removed from the ISO C standard and subsequently removed from this volume of POSIX.1-2017 as well."
[17:30:21] <sham1> At least it says that argv[0] *should* be a path
[17:30:34] <sham1> > The value in argv[0] should point to a filename string that is associated with the process being started by one of the exec functions.
[17:30:35] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:30:41] <fizzie> Yeah, but "should" means a feature or behavior that is recommended but not mandatory".
[17:30:53] <sham1> True
[17:30:56] <pragma-> GDB/MI is weird. It's nearly almost JSON-parseable except they use `foo="bar"` instead of `"foo": "bar"`. With a simple `s/([\w-]+)=/"$1":/g;` regex I can now parse the GDB/MI output with a pre-existing JSON parser. Why didn't they just make it straight-up JSON to begin with. So weird.
[17:31:11] <sham1> GNu
[17:31:13] <sham1> Don't ask
[17:31:14] <pragma-> s/regex/substitution/
[17:31:23] <koollman> because it existed before json ? :)
[17:32:09] <sham1> Could also be that
[17:32:40] <fizzie> So my reading is, a "Strictly Conforming POSIX Application" must ensure that argc >= 1 and argv[0] != NULL when it executes a program with `execve` or friends (because such a program must follow all the "should"s), but POSIX doesn't quite go as far as to guarantee argv[0] != NULL in all situations.
[17:34:01] <sham1> So yeah, I suppose one should still check that the spawning program isn't being naughty
[17:37:02] <koollman> pragma-: gdb/mi was first released with gdb 5.1, November 21, 2001. json was devised 'between 2002 and 2005'. Sure, they *could* make a new output setting or version. But they do have a pretty decent excuse for not starting with it :)
[17:37:32] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca) (Ping timeout: 240 seconds)
[17:40:00] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[17:41:27] <pragma-> yeah but they've made mi2 and mi3 since then
[17:41:42] <pragma-> and everyone's life would be easier if they could just use a json library instead of writing their own parsers
[17:41:51] <pragma-> mi4 should totally have an option to use real json
[17:41:54] * pragma- nods
[17:43:01] <pragma-> Well, it turned out to be simple enough for me in Perl:
[17:43:06] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[17:43:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[17:43:11] <pragma->  74 sub gdbmi_to_json($text) {
[17:43:12] <pragma->  75     $text =~ s/([\w-]+)=/"$1":/g;    # is it really this easy? seems to be!
[17:43:14] <pragma->  76     return decode_json("{$text}");   # why didn't they just make it JSON?
[17:43:15] <pragma->  77 }
[17:43:15] * pragma- nods.
[17:43:19] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Quit: leaving)
[17:43:39] <pragma-> Has passed all my tests so far.
[17:43:57] *** Joins: constxd (~brad@142.167.170.88)
[17:44:04] <tk> isn't there a MI parser for perl?
[17:44:12] <pragma-> Not a good one.
[17:44:16] <constxd> kings
[17:45:17] <constxd> anyone know good hair products for fine, thin, dry hair
[17:45:23] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:45:24] <constxd> my hair feels like straw
[17:45:27] <pragma-> constxd: clippers
[17:45:37] <constxd> no i'm not at that stage yet
[17:46:03] <sham1> A lot of men wish they could have hair like that
[17:46:25] <constxd> oily hair is healthy
[17:46:30] <constxd> it shouldn't be like this
[17:46:32] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:46:38] <supakeen> I focus on my beard instead of the rest of my head.
[17:46:45] <supakeen> Small victories, etc.
[17:47:11] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: brb)
[17:47:36] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[17:47:36] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Client Quit)
[17:47:39] <constxd> based
[17:47:48] <constxd> do u put minoxidil on your beard
[17:47:54] <constxd> if not you should start
[17:48:01] <sham1> Meanwhile I can't grow a beard at all, but I have a lot of hair. Anyway, it's a bit outside of the scope this is
[17:48:14] <constxd> well on your face, not on your beard
[17:48:22] <constxd> sham1: try minoxidil
[17:48:45] <constxd> https://old.reddit.com/r/minoxbeards
[17:48:49] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-202.dsl.bell.ca)
[17:49:32] <constxd> unleash your true potential
[17:49:48] <pragma-> tk: I looked at Devel::GDB but these test failures are not promising: https://www.cpantesters.org/distro/D/Devel-GDB.html?oncpan=1&distmat=1&version=2.02&grade=3
[17:50:11] <candide> Title of pragma-'s link: CPAN Testers Reports: Reports for Devel-GDB
[17:50:14] <pragma-> I don't want a dependency anyway.
[17:50:20] <pragma-> I'm tired of dependencies.
[17:50:21] *** Joins: elPuma (~elPuma@2600:1700:40b0:7830:271a:90d0:ff08:c539)
[17:51:28] <pragma-> GDB/MI isn't that complex.
[17:51:44] <constxd> pragma-: u tried parsec/attoparsec?
[17:52:03] <pragma-> Sounds like Haskell
[17:52:09] <constxd> yes
[17:52:46] <tk> pragma- is writing perl
[17:52:47] <constxd> if u play with attoparsec u will realize pbot needs to be rewritten in haskell
[17:52:47] *** Joins: Nutte35 (~Nutte@202.153.82.163)
[17:53:40] <pragma-> I chose Perl because at the time it was the best fit for a text-processing bot. But now I really regret not having static types and ML-like pattern matching and stuff.
[17:53:54] <pragma-> I really want static types.
[17:54:37] <pragma-> I hope Perl someday adds some kind of gradual typing like Python with Mypy/Pytype/pyright/pylance/etc.
[17:54:45] <pragma-> I really, really want some static typing!
[17:54:49] <constxd> lol
[17:55:13] <pragma-> I guess the Perl way would be to use something Moose-like.
[17:55:24] <constxd> i am not convinced that gradual typing shit adds any value
[17:55:26] <pragma-> But I never really liked Moose's style, the syntax.
[17:55:27] <constxd> ruby just added it too
[17:55:33] <constxd> and i think php has something similar
[17:55:52] <constxd> all the dynamically typed languages are adding half-baked optional "static" typing
[17:55:54] <constxd> just bolting it on
[17:56:02] <constxd> cringe man
[17:56:20] <constxd> embrace dynamism
[17:56:33] <supakeen> Eh, it's a bit of both, they can't turn their languages into being dependent on annotations that easily and want to provide both idioms.
[17:56:42] <supakeen> So it's all 'documentation' and 'external analyzer' stuff.
[17:57:22] <constxd> or in other words, "it's bloat"
[17:57:58] <supakeen> Depends, if you care about catching certain errors before runtime in a dynamic language then it's not bloat.
[17:58:35] <pragma-> I care about this very much.
[17:58:48] <pragma-> I am so sick of not noticing I typoed something until that function randomly gets called somehow, hours later.
[17:58:51] <supakeen> I don't see it as much different from the old comments that included the types of the arguments.
[17:59:00] <supakeen> Except with some sugar over it.
[17:59:20] <constxd> yes
[17:59:25] <pragma-> Or that I forgot to update another related function when I do a type change somewhere else.
[17:59:38] <pragma-> And Perl doesn't tell me until the user somehow manages to go down that code path.
[17:59:42] <constxd> the problem is
[17:59:43] <pragma-> Annoying af.
[18:00:01] <supakeen> And I'm OK with either form, the type comments in Python were exactly that, comments, before annotation syntax and introspection around it was added.
[18:00:13] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-14e7-49c4-8e85-9c7b.res6.spectrum.com)
[18:00:22] <constxd> unless you add a super expressive and based type system, it will inevitably just get in the way and force you to write worse code
[18:00:32] <pragma-> I don't want to write 500 tests for every little thing!
[18:00:34] <constxd> and if you do add a super expressive and based type system then compilation time skyrockets
[18:00:38] <pragma-> Static typing is The Way.
[18:00:42] <supakeen> Alternatively a limited type system forces you to write simple code? :p
[18:00:53] <constxd> no i don't think that's true
[18:01:07] <pragma-> Dynamic typing is only good for tiny scripts!
[18:01:39] <constxd> no u just haven;t used a good dynamic language like Ty
[18:01:41] <scaramanga> also, at least in python, you can use "Protocol" to annotate duck-typing, so you can still embrace dynamism to a large extent
[18:01:53] <supakeen> In any case I'm happy that the current set of popular languages do not shy away of trying out new things.
[18:02:07] <supakeen> If that set of languages is still the popular set in a decade, dunno :)
[18:02:30] <scaramanga> and it has kinds of typevars so you can do generics, and covariant types, and what not
[18:02:35] <edk> they're still remarkably conservative when it comes to trying out things that people think might be a bit too much like fp
[18:02:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:02:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:02:41] *** Joins: wroathe (~wroathe@user/wroathe)
[18:02:46] <constxd> in 10 years the most popular language will be typescript or Go i think
[18:02:56] <scaramanga> that makes it a lot more helpful when ur retrofitting to very pythonic existing codebase
[18:03:13] <pragma-> Or Plang.
[18:03:30] <sham1> pragma-: iirc Raku has some gradual typing
[18:03:32] <supakeen> I quite like Go, I'm slowly replacing at least all my personal Python stuff with it where possible. It's a nice stable language that you don't hear too much about, it's in a good place.
[18:03:32] <scaramanga> what is plang?
[18:03:36] <koollman> in python I like using pydantic module, to catch most obvious errors at the 'right' time (well, right for a dynamic language at least)
[18:03:37] <pragma-> scaramanga: lol, a joke.
[18:03:43] <supakeen> But it's all still mostly C/Python all the way :)
[18:03:51] <scaramanga> aah lol, cos i wrote a compiler for a language called that ages ago
[18:03:59] <pragma-> scaramanga: I tinkered a bit with experiementing with writing a scripting language: https://github.com/pragma-/Plang
[18:04:00] <candide> Title of pragma-'s link: GitHub - pragma-/Plang: A pragmatic scripting language
[18:04:27] <scaramanga> ah right, hah, i'm not as original with naming as i thought :)
[18:04:30] <pragma-> https://github.com/pragma-/Plang/tree/master/test has some scripts that show about as far as I got
[18:04:32] <candide> Title of pragma-'s link: Plang/test at master Â· pragma-/Plang Â· GitHub
[18:04:36] <scaramanga> it was always a placeholder name but i never changed it :)
[18:04:39] <pragma-> same
[18:04:58] <scaramanga> https://github.com/giannitedesco/resynth - my current language project is in rust, and it's for generating network packets :)
[18:05:00] <candide> Title of scaramanga's link: GitHub - giannitedesco/resynth: A network packet synthesis language
[18:05:11] *** Joins: meator (~meator@user/meator)
[18:05:12] <ntwk> A code name.
[18:05:17] <pragma-> one of these days I'll be forced to learn Rust properly
[18:05:19] <ntwk> Ba dum tss!
[18:05:41] <scaramanga> pragma-, looks cool, you've got a lot there
[18:05:55] <cehteh> what is the definiiton of properly?
[18:06:05] <pragma-> scaramanga: most of it is just wrappers around Perl's own implementation.
[18:06:17] <constxd> Rust is the most baroque language man it's worse than C++ aesthetically
[18:06:27] <constxd> and that is impressive
[18:06:44] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[18:06:44] <scaramanga> you tranlate in to sth that gets eval'd or rather you just build a tree of closures or something?
[18:06:55] <sham1> It's still better than COBOL but that's not saying much
[18:07:05] <scaramanga> resynth is actually my first real project in rust, i wrote a compression utility before that, but i'm still pretty fresh with it
[18:07:23] <scaramanga> picking it up as i go along
[18:07:59] <pragma-> It's just a naive AST walker/evaluator at this early point. I had started reading https://craftinginterpreters.com/ and I figured I could do something like that too.
[18:08:54] <sham1> GC?
[18:08:56] <ntwk> pragma: That book has come across my radar.  How would you rate it so far?
[18:09:07] <sham1> That book is nothing short of amazing
[18:09:10] <elPuma> Why do we say that an identifier with file scope that is declared with the "static" qualifier has internal linkage? What distinguishes this from an identifier with no linkage?
[18:09:22] <pragma-> Pretty good. It's not a Dragon book, but it covers high-level things pretty thoroughly and entertainingly.
[18:09:33] <scaramanga> ah i see, yea you walk the tree with like swithc/case statements and eval like that, got it
[18:09:40] <ntwk> I believe the online version is free, too?
[18:09:44] <sham1> I'd say it's better than the Dragon book, since the Dragon book is antiquated in many ways
[18:09:45] <pragma-> You can jump to Pierce's Types book or the Dragon book after reading this, though.
[18:09:56] <constxd> skip dragon book
[18:10:06] <scaramanga> it's pretty much how resynth interpreter there works, too, but it's a very simple language with only 3 different kinds of statement really
[18:10:27] <scaramanga> and only one operator
[18:10:44] <pragma-> scaramanga: I actually use an array with instructions as indices as a sort of jump table. Computed gotos were the inspiration for that.
[18:10:49] <scaramanga> it doesnt look like brainfuck, but it's only a step or so above it, hah
[18:10:59] <constxd> read Engineering a Compiler + Garbage Collection Handbook
[18:11:05] <scaramanga> aye, my ability to read perl is not great
[18:11:14] <constxd> TAPL if u want to make cringe ivory tower shit
[18:11:36] <scaramanga> dragon book is great, but the best material in it is a lot about lexers and parsers
[18:11:49] <scaramanga> a lot of the practical stuff i'm not so sure, but maybe i just need to take time to read it cover to cover
[18:12:04] <pragma-> All these books keep saying "lexing and parsing is the most boring part so we'll rush through this section" but to me it's really fascinating.
[18:12:19] <scaramanga> yea i like it too, i wrote a few compiler compilers
[18:12:34] <scaramanga> my parser in resynth is fun if you like LR parsing
[18:12:40] <scaramanga> it's a hand written shift/reduce parser
[18:12:49] *** Joins: Filystyn (~piotr@user/filystyn)
[18:12:51] <Filystyn> hello
[18:12:57] <constxd> my lexer and parser started out really simple and now i genuinely don't understand how it works and when i get weird parsing bugs i just change random shit until it works
[18:13:06] <scaramanga> i wrote a BNF, then manually converted it to a graph in a dot file, and then wrote that out
[18:13:15] <pragma-> ,grab constxd
[18:13:16] <candide> Quote grabbed: 2136: <cï»¿onstxd> my lexer and parser started out really simple and now i genuinely don't understand how it works and when i get weird parsing bugs i just change random shit until it works
[18:13:20] <scaramanga> i wish i could get a compiler generator to generate something as "readable"
[18:13:21] *** Quits: on^ (~on@96-86-240-178-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:13:30] <scaramanga> i mean, it's more readable than the crap those things usually output :)
[18:13:37] <scaramanga> but it's still quite tedious
[18:13:56] <scaramanga> https://github.com/giannitedesco/resynth/blob/trunk/src/parse.rs
[18:14:16] <constxd> the lexing rules change depending on whether it's in infix/prefix context, and when you change context the lexer rewinds to an earlier state
[18:14:23] *** Parts: meator (~meator@user/meator) (Leaving)
[18:14:32] <constxd> ever since i added that i run into weird behavior a lot
[18:14:35] <sham1> Pratt parsing is just so nice for non-lisps
[18:14:38] <pragma-> Yeah, I wish I was using a language that a lot more zero-cost abstractions. I have to be mindful of Perl's performance when I write Perl because Perl doesn't have very many optimizers.
[18:14:52] <pragma-> So I end up writing some things in slightly less readable ways just to get a bit more performance.
[18:14:55] * pragma- mutters.
[18:15:04] <scaramanga> yeah, same experience in python
[18:15:10] <scaramanga> i learned to embrace using regex for my lexers
[18:15:22] <sham1> At least python can be run through pypy
[18:15:23] <constxd> man i will say
[18:15:39] <scaramanga> i used to think it was a hack, but since it is a regular language it's literally identical, but you're doing the actual lexing in fast c code then
[18:15:46] <constxd> despite being painful for writing the higher level stuff, C is perfect for writing lexers
[18:15:47] <scaramanga> pypy isn't great
[18:16:06] <constxd> my lexer is more readable in C than it would be if i wrote a self-hosting one i think
[18:16:14] <scaramanga> i ended up just learning optimisation esoterica for python
[18:16:23] <scaramanga> for cpython*
[18:16:39] <scaramanga> eg. https://giannitedesco.github.io/2020/12/14/a-faster-partition-function.html
[18:16:39] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[18:17:32] *** Quits: Dotz0cat (~Dotz0cat@98.22.179.189) (Ping timeout: 240 seconds)
[18:17:40] <constxd> i hate this
[18:17:50] <pragma-> "pythonistas" "parsimonious"
[18:17:50] <constxd> f = x.append; for a in b: f(a)
[18:18:13] <pragma-> There's something about people saying "parsimonious" that makes me give them side-eye.
[18:18:23] <constxd> in Ty that would be a lot faster as well and i wish it wasn't necessary
[18:18:31] <scaramanga> haha
[18:18:48] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[18:18:51] <scaramanga> yeah C is great for lexers
[18:18:55] <constxd> should do some analysis to see that x never changes so x.append will never change
[18:18:59] <scaramanga> DFA type things lend itself well to C
[18:19:05] <constxd> right now i don't do any optimization really
[18:19:10] <scaramanga> any other language the idea of iterating over bytes...
[18:20:21] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[18:21:26] <pragma-> lol, in Perl you often see things like while (/(.)/g) to work with characters. I've been guilty of doing that myself.
[18:21:35] <NRK[m]> meh, zero cost abstraction doesn't exist
[18:21:49] <NRK[m]> you've just moved the cost from runtime performance to compile speed
[18:21:59] <pragma-> NRK[m]: the Rust lang devs sure seem to think they're capable of achieving it
[18:22:01] *** Joins: diophantoz (~diophanto@user/diophantoz)
[18:22:31] <pragma-> I'd rather have longer compiles than slower programs.
[18:22:43] <cehteh> zero cost is meant as in the abstractions in rust wont have more runtime cost than some hand optimized code
[18:22:46] <NRK[m]> meme lang
[18:22:49] <pragma-> I can go stand on a chair and joust with someone.
[18:23:02] <NRK[m]> also funny u mention rust. becuase rust compile times are abomination.
[18:23:33] <cehteh> yeah, still when it compiles often the code also works well
[18:23:42] <cehteh> at least its free of memory bugs
[18:24:07] <sham1> Heh
[18:24:21] <NRK[m]> pretty sure you can create memeory bugs in rust just fine
[18:24:34] <NRK[m]> just need to play a little bit of game with the compiler
[18:25:00] <sham1> And of course the focus on memory bugs leads to a slight neglect of logic errors
[18:25:16] *** Joins: Satin (uid193953@user/Seten)
[18:26:09] *** Joins: Dotz0cat (~Dotz0cat@151.213.94.135)
[18:26:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:27:40] <cehteh> at least with safe code memory bugs are pretty much impossible, would be a compiler bug and even when its not totally impossible that those dont exist, its really hard to trigger such with normal code
[18:28:34] *** Joins: eliasy (~user@2804:14c:4e6:85ba:8e12:ccb6:d537:9fe6)
[18:30:30] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:31:07] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:32:06] <BtbN> Remember when someone thought a TLS lib in rust would be automatically secure? And it got completely destroyed by crypto specialists on pretty much day one?
[18:32:30] <pragma-> at least it didn't have any memory errors, right?
[18:33:07] <cehteh> iirc it had a lot unsafe/asm stuff
[18:33:34] <veltas> If I write C a certain way there are no memory bugs either
[18:33:58] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:34:06] <Filystyn> 9if I don't make bugs... ;-)
[18:34:12] <BtbN> It's almost like telling people to not worry about proper code leads to shit code
[18:34:16] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R/2R->0)
[18:34:38] *** Quits: Filystyn (~piotr@user/filystyn) (Quit: Lost terminal)
[18:34:58] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Ping timeout: 250 seconds)
[18:35:31] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:35:46] <cehteh> its surprising how much C code in the wild just works by chance (since years or decades) but on a closer inspection isnt really safe, it just happens that the races/cornercases are not triggered
[18:36:07] <cehteh> and often enough thats rather not deliberately but overseen
[18:36:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:36:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-14e7-49c4-8e85-9c7b.res6.spectrum.com) (Remote host closed the connection)
[18:37:00] <veltas> cehteh: example
[18:37:08] <cehteh> and then we see some root exploits like the policykit things today which just happend because some programmer thught his code is good
[18:37:11] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[18:37:13] *** Joins: X-Scale` (~ARM@218.92.108.93.rev.vodafone.pt)
[18:37:36] <BtbN> That root exploit happened because the programmer didn't think argv could be straight up NULL
[18:37:47] <cehteh> check CVE's i say 95% of those are sloppy unsafe implementations
[18:37:53] <cehteh> yeah
[18:37:58] <cehteh> but these bugs happen
[18:38:11] <BtbN> There's A LOT of programs out there that don't check argv for NULL, because it's not an assumption you usually make
[18:38:17] <cehteh> out of bound, off by one, read after free, double free
[18:38:35] <sham1> Oh my sweet ~~Caroline~~ ASan
[18:38:39] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:38:39] *** X-Scale` is now known as X-Scale
[18:39:01] <BtbN> asan would not find this either. Under normal conditions, argv is never NULL
[18:39:04] <cehteh> yeah and all fixes are retroactive
[18:39:22] <veltas> According to standard argv is not NULL
[18:39:32] <BtbN> According to Linux, it can be
[18:39:39] <BtbN> On BSDs, it can't be
[18:39:42] <sham1> Not the argv but double frees and such
[18:40:03] <sham1> Also the fixes have to be retroactive to a certain degree
[18:40:11] <cehteh> well most are out of bounds or use after free (or simple math bugs)
[18:40:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[18:40:20] <sham1> Otherwise one is solving the halting problem and we all know how that works
[18:40:45] <cehteh> fixes dont need to be retroactive when the types system/compiler can outrule certain classes of bugs
[18:41:19] <sham1> Indeed, except that then you need weird stuff like RC
[18:41:36] <sham1> Because, again, the compiler cannot figure out everything ahead of time
[18:41:42] <cehteh> rust's borrow checker is overly restrictive .. thats sometimes pita
[18:41:45] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[18:42:29] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:42:59] *** bliminse_ is now known as bliminse
[18:43:19] <cehteh> well when you have a sane model (as restrictive as rust does) you can make 100% sure memory bugs doesnt exist
[18:43:52] <sham1> But you can still leak
[18:43:58] <cehteh> problem is that you cant use this model for everything, self referential datastructures for example dont work
[18:44:01] <sham1> And that's eve regarded as safe
[18:44:06] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:44:15] <veltas> BtbN: Is there a situation where you can cause argv to be null without having ability to execute programs locally?
[18:44:21] <cehteh> yes leaking *is* safe it wont crash a program or cause UB
[18:44:45] <BtbN> veltas, hm?
[18:44:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Client Quit)
[18:44:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:44:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:44:49] *** Joins: wroathe (~wroathe@user/wroathe)
[18:45:01] <sham1> Oh but it certainly can crash the program
[18:45:06] <veltas> This sounds like a defect in glibc honestly, it should not invoke main with argv==NULL
[18:45:08] <cehteh> it may be a bug, rust doesnt claim that programs are bug free once sucessfully compiled
[18:45:14] <pragma-> lol, I was googling to find that new argv NULL CVE but I came across this one instead: https://github.blog/2021-06-10-privilege-escalation-polkit-root-on-linux-with-bug/#exploitation
[18:45:16] <pragma-> amazing
[18:45:24] <pragma-> just ^C a dbus-send and boom you're root.
[18:45:30] <cehteh> it can not crash (panic/abort is a controlled exit)
[18:45:49] <veltas> tomato tomato
[18:45:52] <sham1> Segfault on OOM isn't controlled
[18:45:57] <cehteh> it is
[18:46:37] <cehteh> whats not controlled is when you can exploit the program and do something unintended by triggering a bug
[18:47:13] <cehteh> aborting/segfault is some last resort emergency brake, its unfortunate but it is not UB
[18:47:28] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[18:47:32] <cehteh> and when your progam panics then it is certainly a bug
[18:47:57] <cehteh> but no memory safety/ub violated
[18:48:02] *** segfault[m] is now known as nopenope[m]
[18:49:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:51:18] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Quit: Client limit exceeded: 20000)
[18:51:36] *** Joins: remavas (~Remavas@user/remavas)
[18:51:56] *** Quits: remavas (~Remavas@user/remavas) (Client Quit)
[18:52:52] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 268 seconds)
[18:56:30] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:58:23] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[18:58:24] <veltas> It's just interesting that the example of some kind of place where the C model allows problems is a situation where the *environment* violated C's model
[18:58:36] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[18:58:40] <veltas> The same kind of issue can happen to rust
[18:59:35] *** Joins: inlight (~thomas@157.35.43.235)
[18:59:35] *** Quits: inlight (~thomas@157.35.43.235) (Changing host)
[18:59:35] *** Joins: inlight (~thomas@user/inlight)
[19:00:41] <tk> yes, indeed, there's nothing stopping rust's runtime from fucking this up
[19:01:04] <tk> although I guess in the case of rust, only one runtime has to get it right
[19:02:12] *** Joins: NEYi (~NEYi@109.251.216.38)
[19:05:42] <veltas> It's the same with C though, glibc has to get it right (and doesn't, if convo is accurate)
[19:06:13] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[19:06:21] <veltas> Reading about this I'm not sure it's doing anything wrong though, maybe this is about argv[0] being NULL rather than argv?
[19:06:55] <amosbird> Hi! Do we have method to remove a file and gets its hardlink refcount upon success?
[19:06:57] <veltas> Well I say glibc, not sure who is responsible for the code that calls main
[19:07:36] <cehteh> amosbird: open/unlink/fstat
[19:07:40] <edk> argv[0] being NULL seems correct according to standards
[19:07:42] <Common-Lisp> veltas: you're right...on systems that use glibc, anyway.
[19:07:43] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:07:49] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Ping timeout: 240 seconds)
[19:08:12] <cehteh> but note that this can be always racy someone else may create or unlink concurrently
[19:08:18] <veltas> edk: Yes, people were saying argv being NULL which would violate C's rules for a host environment
[19:08:38] <edk> if those people were talking about the recent exploit i think they were just wrong
[19:09:17] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[19:09:27] <veltas> Probably yeah
[19:09:32] <veltas> Frankly, if you have permission to execute a program in weird ways, then I don't see what the 'exploit' is, if you can execute weird ways you're already able to... execute weird ways. Rust or C.
[19:09:36] <edk> there's a related but ultimately irrelevant point about linux accepting execv("foo", NULL) when it shouldn't, but it just translates it to an empty argv
[19:10:04] <veltas> Yeah if you look at the ABIs, linux provides the argument data in a way where it has to be an array
[19:10:20] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:10:25] <tk> argv can be null for some bizarre reason if you pass just NULLs as argv and envp, I encountered this today and it was weird indeed
[19:10:27] <veltas> It's not a pointer after all, it's memory in the child process so it has to be allocated in a buffer regardless
[19:10:35] <tk> (on linux)
[19:10:57] <amosbird> cehteh: interesting! thanks
[19:11:08] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1c53:1d56:3b63:1825)
[19:11:08] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1c53:1d56:3b63:1825) (Changing host)
[19:11:08] *** Joins: skapata (~Skapata@user/skapata)
[19:11:11] *** Quits: inlight (~thomas@user/inlight) (Quit: leaving)
[19:11:27] <tk> ,cc if (argv) execve("/proc/self/exe", NULL, NULL); puts("hi");
[19:11:27] *** Joins: inlight (~thomas@user/inlight)
[19:11:37] <candide> tk: [warning: argument 2 null where non-null expected [-Wnonnull] note: in a call to function 'execve' declared 'nonnull']  runtime error: null pointer passed as argument 2, which is declared to never be null  runtime error: null pointer passed as argument 3, which is declared to never be null process 56424 is executing new program: prog
[19:12:02] <edk> need to defeat ubsan
[19:12:28] <cehteh> note that such lowlevle/OS interfaces are unsafe in rust, to carry that over to safe rust the runtime (or you when you are an implementor) should do runtime checks. and references in rust can never be invalid, pointers can, but no one uses pointers for that, besides dereferencing pointers again is unsafe
[19:12:34] <tk> yes, without ubsan it does weird things
[19:12:44] <tk> weirdly enough, the execve page on linux documents passing NULL, NULL
[19:12:53] <tk> let's try with arrays, I can't remember if it worked there too
[19:13:08] <tk> ,cc if (argv) execve("/proc/self/exe", (char *[]){ NULL }, (char *[]){ NULL }); puts("hi");
[19:13:12] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[19:13:17] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[19:13:19] <candide> tk: process 56476 is executing new program: prog
[19:13:25] <tk> hmm
[19:13:40] <cehteh> amosbird: what are you doing why do you need the refcount after the delete?
[19:13:49] <tk> I wonder if it's because it gets passed to getopt first
[19:14:05] <edk> well passing empty lists is obviously correct
[19:14:21] *** Quits: bbju20 (~bbju@103.144.149.220) (Ping timeout: 256 seconds)
[19:14:49] <edk> allegedly morally wrong, according to people i've been arguing with all day, but it seems allowed by posix and it's definitely acceptable to C
[19:16:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 268 seconds)
[19:17:11] *** Quits: AsenMx (~asen@user/asenmx) (Ping timeout: 256 seconds)
[19:17:21] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[19:17:29] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Read error: Connection reset by peer)
[19:17:44] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:19:24] <tk> ah, never mind, I'm stupid, I misread the code where I found the issue
[19:20:35] <tk> it was argv[1] when argc is 0 pointing at a random stray 1 (presumably some stack variable)
[19:20:55] <tk> I was reading it as argv + 1 resulting in a pointer to 1
[19:21:00] <tk> meaning that argv was NULL
[19:21:07] <amosbird> cehteh: The local file is a link to remote storage (S3 blob). There are hardlinks and I'd like to make the last removal to also remove the object in s3
[19:21:25] <cehteh> argv and even more environ is a total mess esp in presence of threads
[19:21:59] <amosbird> btw, is there a way to do mv and unlink instead of unlink? Since the removal might be unsuccessful, I'd like to keep the last file so that retry is possible
[19:22:51] <cehteh> in theory it should be possible but i wont put my bets that S3 interfaces are 100% posix filesystem conforming
[19:23:17] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Quit: Client limit exceeded: 20000)
[19:24:40] *** Joins: strajder (~strajder@user/strajder)
[19:24:45] <amosbird> cehteh: it doesn't need to be posix file system conforming
[19:24:58] <amosbird> It's just a local file storing the S3 object key
[19:25:01] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[19:25:01] <veltas> This CVE actually goes ahead and explains what args look like on stack at beginning of program https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt
[19:25:15] <amosbird> `rename` will keep links...
[19:25:16] <veltas> If anyone doesn't understand what I meant earlier
[19:25:17] <amosbird> hmm
[19:25:22] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[19:26:52] *** Quits: Nutte35 (~Nutte@202.153.82.163) (Read error: Connection reset by peer)
[19:27:08] *** Joins: Narrat (~omnius@p200300df5f4aae4f06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[19:27:19] <bparker> veltas: there's already like 10 different exploits for it on github too, in different languages
[19:27:40] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[19:28:36] <veltas> Well we're at coordinated release date now so it shouldn't hurt
[19:28:51] <veltas> I'm sure it will though lol
[19:28:57] <bparker> because everyone keeps up with the news and updates judiciously
[19:29:02] <bparker> :p
[19:29:57] <edk> i'm not sure who the coordinated release was for
[19:30:27] *** Joins: bbju (~bbju@103.144.149.220)
[19:30:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[19:30:44] *** Quits: Common-Lisp (~common_li@12.2.190.242) (Remote host closed the connection)
[19:31:30] <veltas> bparker: You'd hope all sysadmins would, or at least have auto security updates, but in practice I have found they don't
[19:33:16] <pragma-> Once the system is working, nobody touch it!
[19:33:16] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[19:34:01] <pragma-> "Oh it's just a security update, it won't affect anything!"
[19:34:27] <pragma-> famous last words
[19:34:40] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:34:55] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:35:24] <veltas> Well... depending on how high brow it is don't just have auto updates
[19:35:30] <veltas> But auto updates are good for plebs like me
[19:35:47] <veltas> Otherwise you need to subscribe to security updates
[19:35:52] <veltas> update/info etc
[19:35:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[19:37:00] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[19:37:44] *** Joins: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d)
[19:41:05] *** Joins: meator (~meator@user/meator)
[19:41:17] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6113:ea6a:978:6ef4)
[19:41:17] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6113:ea6a:978:6ef4) (Changing host)
[19:41:17] *** Joins: skapata (~Skapata@user/skapata)
[19:41:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[19:42:34] *** Quits: meator (~meator@user/meator) (Client Quit)
[19:42:53] *** Joins: meator (~meator@user/meator)
[19:42:54] *** Joins: AsenMx (~asen@user/asenmx)
[19:43:13] *** Quits: meator (~meator@user/meator) (Client Quit)
[19:45:18] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:45:57] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[19:51:08] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:56:02] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[20:00:30] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[20:02:30] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[20:03:29] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:04:27] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[20:05:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[20:06:42] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Quit: leaving)
[20:08:15] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[20:08:17] *** Quits: nicode (~nic@2607:f2c0:93a9:8b00:5166:d484:415f:54b7) (Ping timeout: 240 seconds)
[20:09:12] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[20:10:36] *** Joins: nicode (~nic@2607:f2c0:948c:c300:d115:fc66:1a1:1b6c)
[20:11:34] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[20:11:34] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[20:11:34] *** Joins: nortoh (~nortoh@user/nortoh)
[20:13:58] *** Joins: lleo (~leo@188-206-74-47.mobile.kpn.net)
[20:17:27] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[20:17:31] *** Joins: mahmutov (~mahmutov@37.155.23.91)
[20:18:18] *** Joins: Akiva (~Akiva@user/Akiva)
[20:20:21] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[20:21:03] *** Joins: effexzi (uid474242@id-474242.ilkley.irccloud.com)
[20:22:55] *** Joins: frytaped (~frytaped@user/go4godvin)
[20:25:14] *** Joins: Guest96fd (~Guest96fd@206.223.160.26)
[20:25:53] <Guest96fd> Hey, quick question. Is it possible to provide a `/dev/null`-esque pointer to memcpy? I.e. I have a buffer library I'm using, and I'd like to pop data without allocating a buffer for it
[20:26:55] <sham1> What do you mean "pop data"
[20:27:23] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:28:44] <Guest96fd> I have a library function that I unfortunately cannot modify. It accepts a buffer pointer to write data into, i.e. memcpy(queue_src, buffer_dest, len). I want to pop the data to free up space in the queue but without allocating a buffer for the potentially large data as I am memory constrained
[20:29:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[20:30:11] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[20:30:48] *** Quits: inlight (~thomas@user/inlight) (Quit: leaving)
[20:30:55] *** Joins: Akuli (~Akuli@82-203-160-13.bb.dnainternet.fi)
[20:31:03] *** Quits: alch (~alch@151.38.133.171) (Ping timeout: 256 seconds)
[20:31:49] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[20:32:45] *** Joins: alch (~alch@151.38.138.135)
[20:36:09] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 256 seconds)
[20:38:59] *** Quits: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net) (Remote host closed the connection)
[20:39:58] *** Quits: shokara (8a599707f6@198.108.77.17) (Quit: Gateway shutdown)
[20:41:58] *** Joins: Inline__ (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[20:42:23] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:44:56] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[20:45:06] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:47:35] *** Quits: fe23 (~fe23@2409:8a34:461:9470:f0f9:23ae:5bbf:556b) (Quit: fe23)
[20:49:57] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[20:54:49] *** Quits: frytaped (~frytaped@user/go4godvin) (Quit: frytaped)
[20:58:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[21:02:17] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:02:32] *** Quits: thomas_ (~thomas@2a02:a03f:666e:c500:92eb:d341:15bc:3f3d) (Quit: Leaving)
[21:05:57] *** Joins: van3ll0pe (~van3ll0pe@37.166.11.28)
[21:06:13] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:07:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[21:08:14] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[21:08:22] *** Quits: Inline__ (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[21:08:31] <pragma-> look to see if it has another library function that removes the entry without copying it
[21:08:51] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[21:09:35] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:11:43] <ChoHag> Guest96fd: #define cheekymemcpy(D,S,L) (((D) != NULL && (S) != NULL) ? memcpy((D),(S),(L)) : NULL)
[21:12:10] *** Parts: puke (~puke@user/puke) ()
[21:12:37] *** Quits: Common-Lisp (~common_li@12.2.190.242) (Remote host closed the connection)
[21:13:11] *** Joins: vicfred (~vicfred@user/vicfred)
[21:14:53] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[21:14:57] *** Joins: inlight (~thomas@157.35.43.235)
[21:14:57] *** Quits: inlight (~thomas@157.35.43.235) (Changing host)
[21:14:57] *** Joins: inlight (~thomas@user/inlight)
[21:15:56] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[21:15:59] *** Quits: inlight (~thomas@user/inlight) (Client Quit)
[21:16:15] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[21:16:27] *** Joins: bnchs (~bnchs@105.155.66.165)
[21:17:47] <bnchs> is HN biased towards rust?
[21:17:47] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 268 seconds)
[21:20:34] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[21:20:52] *** Joins: bindu (~bindu@user/bindu)
[21:22:10] *** Joins: Atque (~Atque@user/atque)
[21:27:56] *** Joins: Alhazred (~Alhazred@86.106.74.41)
[21:28:24] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886)
[21:30:17] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[21:30:42] *** Joins: magla (~gelignite@55d450c5.access.ecotel.net)
[21:32:30] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[21:32:37] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[21:32:48] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (Quit: Client limit exceeded: 20000)
[21:37:55] *** Quits: bnchs (~bnchs@105.155.66.165) (Ping timeout: 256 seconds)
[21:38:14] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:38:25] *** Joins: bnchs (~bnchs@105.155.66.165)
[21:38:37] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 240 seconds)
[21:42:59] *** Joins: inlight (~thomas@157.35.43.235)
[21:43:00] *** Quits: inlight (~thomas@157.35.43.235) (Changing host)
[21:43:00] *** Joins: inlight (~thomas@user/inlight)
[21:43:01] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:44:37] *** Quits: van3ll0pe (~van3ll0pe@37.166.11.28) (Ping timeout: 240 seconds)
[21:45:03] *** Joins: van3ll0pe (~van3ll0pe@37.166.11.28)
[21:45:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:47:23] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[21:48:11] *** Joins: Nutte35 (~Nutte@202.153.82.163)
[21:48:22] *** Quits: Nutte35 (~Nutte@202.153.82.163) (Read error: Connection reset by peer)
[21:48:44] *** Joins: Nutte35 (~Nutte@202.153.82.163)
[21:48:55] *** Quits: Nutte35 (~Nutte@202.153.82.163) (Remote host closed the connection)
[21:49:09] *** Joins: Nutte35 (~Nutte@202.153.82.163)
[21:49:32] *** Quits: van3ll0pe (~van3ll0pe@37.166.11.28) (Ping timeout: 250 seconds)
[21:50:30] *** Quits: Nutte35 (~Nutte@202.153.82.163) (Read error: Connection reset by peer)
[21:51:27] <apotheon> bnchs: probably
[21:51:37] <apotheon> bnchs: perhaps also biased against, though
[21:51:39] *** Joins: Trashlord (~trash@user/trashlord)
[21:51:42] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[21:52:57] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[21:53:19] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[21:54:15] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[21:57:41] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[21:59:57] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[22:00:26] *** Joins: novns (~novns@user/novns)
[22:02:05] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[22:04:18] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[22:06:22] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.32)
[22:06:35] *** Joins: crashrep (~crashrep@user/crashrep)
[22:09:02] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.166) (Ping timeout: 250 seconds)
[22:10:37] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:12:17] *** Quits: lleo (~leo@188-206-74-47.mobile.kpn.net) (Ping timeout: 240 seconds)
[22:14:31] *** Joins: nvmd (~nvmd@user/nvmd)
[22:14:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[22:20:59] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[22:22:11] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[22:23:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:23:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:23:07] *** Joins: wroathe (~wroathe@user/wroathe)
[22:24:59] *** Joins: tiotags (~tiotags@user/tiotags)
[22:25:48] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:26:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[22:27:13] *** Quits: bnchs (~bnchs@105.155.66.165) (Ping timeout: 256 seconds)
[22:27:27] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:27:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:29:19] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[22:29:35] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[22:30:15] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[22:30:17] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[22:30:51] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[22:31:05] *** Joins: Atque (~Atque@user/atque)
[22:31:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[22:31:59] *** Joins: bnchs (~bnchs@105.155.66.165)
[22:33:55] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:33:57] *** Quits: eliasy (~user@2804:14c:4e6:85ba:8e12:ccb6:d537:9fe6) (Read error: Connection reset by peer)
[22:33:59] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:35:12] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[22:37:39] *** Quits: Guest96fd (~Guest96fd@206.223.160.26) (Quit: Client closed)
[22:44:07] *** Quits: elPuma (~elPuma@2600:1700:40b0:7830:271a:90d0:ff08:c539) (Quit: Client closed)
[22:44:09] <mixfix41> 2
[22:45:04] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:47:56] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:48:39] *** Quits: mahmutov (~mahmutov@37.155.23.91) (Ping timeout: 250 seconds)
[22:50:55] *** Joins: Akiva (~Akiva@user/Akiva)
[22:51:28] *** Joins: inlight_ (~thomas@157.35.43.235)
[22:52:05] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[22:54:11] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[22:54:25] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[22:54:43] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Client Quit)
[22:55:57] *** Quits: inlight_ (~thomas@157.35.43.235) (Ping timeout: 240 seconds)
[22:56:20] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[22:56:27] *** Joins: inlight (~thomas@157.35.43.235)
[22:56:27] *** Quits: inlight (~thomas@157.35.43.235) (Changing host)
[22:56:27] *** Joins: inlight (~thomas@user/inlight)
[22:58:39] *** Quits: alch (~alch@151.38.138.135) (Read error: Connection reset by peer)
[23:00:36] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[23:01:35] *** Joins: alch (~alch@151.36.183.131)
[23:02:39] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[23:03:16] *** Joins: mahmutov (~mahmutov@5.176.46.201)
[23:06:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:07:23] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[23:07:57] *** Quits: dj_pi (~dj_pi@d4-50-214-166.col.wideopenwest.com) (Ping timeout: 240 seconds)
[23:08:26] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[23:12:59] *** Joins: ultsllt (~ultsllt@50.231.5.242)
[23:13:06] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[23:13:46] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:14:40] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[23:15:15] *** Joins: dj_pi (~dj_pi@d4-50-214-166.col.wideopenwest.com)
[23:15:52] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Changing host)
[23:15:52] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[23:17:23] *** Joins: ic3blx_ (~ic3blx___@87.116.166.221)
[23:17:23] *** Quits: ic3blx_ (~ic3blx___@87.116.166.221) (Changing host)
[23:17:23] *** Joins: ic3blx_ (~ic3blx___@user/ic3blx/x-0942740)
[23:24:30] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[23:28:39] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:30:10] *** Joins: terminalpusher (~terminalp@2a01:586:1347:1:24d9:fe07:2585:32f7)
[23:30:36] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886)
[23:31:43] *** Quits: Jong (~Jong@2620:10d:c090:400::5:78f7) (Quit: Textual IRC Client: www.textualapp.com)
[23:32:37] *** Quits: Narrat (~omnius@p200300df5f4aae4f06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[23:33:14] <clarity> woof
[23:33:27] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[23:33:27] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[23:33:29] * kit-ten meows
[23:34:05] *** Joins: bnchs__ (~bnchs@41.251.90.215)
[23:34:11] *** Joins: vboykox (~user@121-57-134-95.pool.ukrtel.net)
[23:34:32] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[23:35:29] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[23:36:34] *** Quits: bnchs (~bnchs@105.155.66.165) (Ping timeout: 250 seconds)
[23:37:37] * ChoHag codes.
[23:38:04] * kit-ten bites chohag
[23:39:15] *** Joins: croberts (~quassel@nat-pool-232-132.redhat.com)
[23:40:24] *** Parts: croberts (~quassel@nat-pool-232-132.redhat.com) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:41:15] <sham1> kit-ten: that's not very nice
[23:41:38] * kit-ten bites sham1
[23:41:42] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:41:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:41:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:41:59] *** Joins: wroathe (~wroathe@user/wroathe)
[23:42:38] <ChoHag> Kittens don't hurt.
[23:42:56] * kit-ten takes out a gun and shoots chohag
[23:43:34] <ChoHag> See?
[23:44:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:45:34] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:45:44] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:46:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:47:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:54:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Ping timeout: 240 seconds)
[23:55:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[23:55:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[23:56:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[23:57:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[23:59:47] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[23:59:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
