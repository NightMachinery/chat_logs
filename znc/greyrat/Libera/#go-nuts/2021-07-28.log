[00:00:26] <Tv_> seebs: yeah frankly time.Parse was not designed for high-performance parsing, and that's fine
[00:00:39] <Tv_> for that, you're gonna get a much bigger win by handrolling the parser
[00:03:02] *** Quits: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091) (Ping timeout: 255 seconds)
[00:03:20] *** Joins: zwr (~zwr@2804:14c:5bc5:8b2c:3553:691d:7df4:8081)
[00:05:59] <tristero> I wonder if one could write a sufficiently general time-format-to-regexp function
[00:06:41] <seebs> i think it would be a pretty bad idea. and yeah, hand-rolled parsers can work, but it still feels like Extra Hassle.
[00:06:49] <seebs> on the other hand, the layout thing really IS very convenient.
[00:09:04] <Tv_> imho the hard part of parsing calendar dates just ain't the textual parsing, it's because you're dealing with datetimes and timezones
[00:09:37] <Tv_> and when you need more speed than time.Parse can provide, you generally know what parts of the whole complex thing you can skip
[00:10:31] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 250 seconds)
[00:11:18] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:18:45] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 250 seconds)
[00:19:02] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 258 seconds)
[00:19:15] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:20:28] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[00:26:33] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 250 seconds)
[00:26:47] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:27:15] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[00:28:31] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[00:28:41] <cornfeedhobo> is there a limit to literal string lengths?
[00:28:49] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:28:59] *** Joins: mickey (~user@user/mickey)
[00:29:45] <foobaz> yes, 2^63 bytes, or 2^31 on 32-bit platforms
[00:31:29] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:32:15] <Tv_> heh good luck putting that string literal in a file first
[00:32:41] <cornfeedhobo> interesting. what drives the use of powers? i assume because some paging structure or something?
[00:32:41] <lungaro> would it require that much ram to compile? =P
[00:32:46] <cornfeedhobo> lol
[00:32:51] <Tv_> cornfeedhobo: computers
[00:33:03] <Tv_> lungaro: probably more by some multiplier
[00:33:07] <cornfeedhobo> Tv_: obviously. but i'm looking for a kind soul to connect the dots :D
[00:33:41] <ikke> integer sizes are powers of 2
[00:33:46] <Tv_> cornfeedhobo: your typical current day computer has a 64-bit CPU. it can address 64 bits of memory. size of anything stored in memory is thus <2**64
[00:33:46] <foobaz> cornfeedhobo: internally, a string is represented as a pointer + a length
[00:33:54] <foobaz> the length is a signed integer
[00:34:27] <cornfeedhobo> okay. i think i understand better. thanks! :)
[00:35:04] <Tv_> foobaz: psst usize, "u"
[00:37:21] <foobaz> but len() returns a signed integer, it must do an unsafe conversion then
[00:37:42] <foobaz> unsafe meaning integer overflow not like the package
[00:38:28] <Tv_> foobaz: i mean, once you hit 2**48, everything falls apart anyway, so not really relevant
[00:38:59] <ikke> due to 48-bits address sizes?
[00:39:00] <foobaz> but what about all those developers who need 3GB strings on their pentium 4s
[00:39:06] <Tv_> but yeah i semi-hate the plan9/go people for insisting on signed numbers for things that can never be negative. the loop argument is.. fine.. but not inspiring.
[00:39:31] <Tv_> ikke: i believe every 64-bit arch uses 48-bit addresses
[00:39:59] <foobaz> i kind of like C's undefined behavior for signed integer overflow
[00:40:10] <foobaz> but go would probably never pursue such aggressive optimization anyway
[00:40:21] <ikke> Tv_: yea, that's what I recall as well
[00:40:33] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[00:41:13] <cornfeedhobo> can someone expand on the 48 bit addresses. obviously i get that 64 != 48, but... why do that and why are they needed?
[00:41:34] <ikke> memory is address with .. adresses
[00:41:48] <cornfeedhobo> yeah that makes sense
[00:41:49] <foobaz> so-called 64-bit CPUs actually store and transmit addresses using only 48 bits, because nothing needs more than that
[00:42:09] <ikke> 32-bits addresses gives you ~4GB of addressable memory
[00:42:15] <foobaz> integer math is true 64-bit though
[00:42:36] <ikke> every extra bits gives you twice as much
[00:43:14] <foobaz> this shortcut makes CPUs faster and more power efficient, but someday we may need true 64-bit and will need to start making CPUs accordingly
[00:44:12] <cornfeedhobo> okay. very interesting. was there yet another related aspect that made everyone conclude that 48 bits was right? why not 32, or go all the way to 64 to start? were the speed and power gains that good of a trade off?
[00:44:21] <ikke> btw, Ben Eater has a nice series on youtube about making a computer from scratch with breadboards
[00:44:36] <ikke> cornfeedhobo: We already ran into 32-bits limitations
[00:44:36] <cornfeedhobo> i might check that out!
[00:44:37] <Tv_> well if you have 1-byte ants, apparently 2**48 isn't enough to simulate them on a single-host!
[00:45:01] <cornfeedhobo> lol wat
[00:45:03] <Tv_> cornfeedhobo: i think it's just that 64-16=48, and 16 is a nice round figure in the right ballpark
[00:45:10] <Tv_> https://en.wikipedia.org/wiki/Orders_of_magnitude_(numbers)#1015
[00:45:11] <ikke> cornfeedhobo: https://www.youtube.com/watch?v=HyznrdDSSGM&list=PLowKtXNTBypGqImE405J2565dvjafglHU
[00:45:12] <foobaz> 48 is the most round number between 32 and 64, and yes the gains were that good of a trade off
[00:45:13] <seebs> I don't think there's anything especially magic about 32, it's probably just that "another 16 bits is easier to build than a non-power-of-2 would be"
[00:45:22] <cornfeedhobo> Tv_: that kinda makes sense. yeah,
[00:45:26] <cornfeedhobo> yeah.*
[00:45:49] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[00:45:56] <cornfeedhobo> thanks everyone for the break down. i really appreciate it!
[00:46:00] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 256 seconds)
[00:46:18] *** Quits: independent56 (~independe@2.25.26.77) (Ping timeout: 240 seconds)
[00:47:28] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[00:48:02] *** Joins: jinie (~jimmy@188.114.173.37)
[00:48:04] <foobaz> i'm so paranoid about overflow i always do "if len() <= 0" instead of "if len() == 0"
[00:48:05] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:48:08] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:1c44:fbd1:c1a7:af) (Quit: Leaving)
[00:49:03] <foobaz> and i wish we had syntactic sugar for math/big types
[00:49:32] <fizzie> The 48-bit thing isn't true any more, I've been told.
[00:50:01] <ryu`> fizzie : and if i also want to have the ms displayed, and not rounded up to the nearest second? :o
[00:50:29] <foobaz> would also be nice to have 2-value integer operations that expose the CPU overflow bit like "total, overflow = a + b"
[00:50:30] *** Joins: independent56 (~independe@2.25.26.77)
[00:50:41] <fizzie> Specifically, https://en.wikipedia.org/wiki/Intel_5-level_paging extends the virtual address size to 57 bits.
[00:51:20] <ikke> ewww, 57-bits :P
[00:51:39] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[00:51:55] *** Quits: crowbar (~crowbar@user/crowbar) (Ping timeout: 268 seconds)
[00:52:15] <Tv_> fizzie: oh wow
[00:52:32] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Ping timeout: 255 seconds)
[00:52:33] *** Quits: CommunistWolf (~gulag@user/communistwolf) (Ping timeout: 250 seconds)
[00:52:33] *** Joins: crowbar (~crowbar@user/crowbar)
[00:53:01] *** Joins: cold__ (cold@user/lost)
[00:53:09] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[00:53:16] <Tv_> somebody had a very interesting workload.. i'm gonna guess hpc-style remotely-addressable memory maybe?
[00:53:46] *** Quits: jemaclus (~jemaclus@64.227.108.73) (Ping timeout: 268 seconds)
[00:53:46] *** Quits: Lost (cold@user/lost) (Ping timeout: 268 seconds)
[00:53:58] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[00:54:15] <Tv_> fizzie: aaand https://lwn.net/Articles/717293/ refers to the breakage i was expecting ;)
[00:54:21] <foobaz> does this mean the NSA has a supercomputer with >2^48 B RAM?
[00:54:30] <Tv_> lots of things encode data in "unused" pointer bits
[00:54:34] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[00:54:47] <Tv_> foobaz: it's less amazing when you realize modern supercomputers are just pools of linux boxes...
[00:55:20] <foobaz> back in the late '80s macos did that, 24-bit addresses with 8 bits of metadata
[00:55:21] <fizzie> 2^48 isn't *that* much memory, anyway. It's just 256 TiB.
[00:55:40] *** Joins: CommunistWolf (~gulag@user/communistwolf)
[00:56:01] <foobaz> it only lasted a couple years before they needed more memory and everyone had to rewrite code to make it "32-bit clean" with no metadata
[00:58:45] *** Joins: jemaclus (~jemaclus@64.227.108.73)
[00:59:32] *** Joins: bpalmer (~user@user/bpalmer)
[01:01:06] <fizzie> A while back (6-7 years?) when I was still at a university doing science™, our objectively crummy local cluster had a couple of "fat nodes" with 1 or 2 TiB of RAM on a single box, so extrapolating from there, 256 TiB doesn't sound unreasonable for special purposes.
[01:03:04] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[01:03:44] *** Joins: jinie (~jimmy@188.114.173.37)
[01:05:28] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Izem)
[01:06:36] <ryu`> fizzie : forget it, saw the "The Go Playground" link you've sent. It is on my part, why the time is rounded upwards in my table / cell (InfluxDBv2)
[01:06:40] *** Quits: usr123 (~usr123@27.255.220.196) (Read error: Connection reset by peer)
[01:07:03] *** Joins: usr123 (~usr123@124.253.111.8)
[01:09:26] <seebs> there were a lot of people who assumed that, since systems had under 2GB of memory, the top bits of pointers were safe to use for type-punning
[01:09:48] <seebs> but at least one 680x0 machine decided to use 0x80000000 as the start of a physical memory region just for convenience in wiring
[01:16:04] <bpalmer> I don't know why , but I've seen more tag bits use the bottom bits than the top; maybe just to avoid conditionalizing the masks for each platform.
[01:16:33] <ikke> deossification?
[01:17:23] <zsnes> hey maybe with 256TiB of memory you could run Lotus Domino and clamd with a few GB left to spare
[01:17:40] <ikke> Would be tight
[01:17:44] <foobaz> but doesn't x86 allow unaligned memory accesses?
[01:18:39] <foobaz> and single-byte memory accesses, which would not technically be unaligned at odd addresses
[01:18:40] <keeganza> * [ ] The engineering owner has investigated the report and found it to be **NOT a security concern for customers** according to our security policy (https://about.sourcegraph.com/security#how-to-report-a-security-vulnerability):
[01:18:41] <keeganza> * [ ] The security-owner/maintainer has assigned this issue to an appropriate engineering owner.
[01:18:41] <keeganza> * [ ] An explanation of why the report is invalid has been written as a comment on this issue.
[01:18:41] <keeganza> * [ ] This issue has been assigned back to the original creator for them to follow up with the original reporter and inform them.
[01:18:41] <keeganza> * [ ] We have followed up with the original reporter and informed them it is not a security vulnerability (close this issue).
[01:18:41] <keeganza> * [ ] The engineering owner of this issue has investigated the report and found **IT IS a security concern for customers** according to our security policy (hts://about.sourcegraph.com/security#how-to-report-a-security-vulnerability):
[01:18:42] <keeganza> * [ ] An explanation of why the report is valid has been written as a comment on this issue.
[01:18:42] <keeganza> * [ ] The original reporter has been informed we agree the report is valid, are investigating, and will follow-up when we have more information.
[01:18:43] <keeganza> * [ ] The engineering owner has identified which versions and configurations of Sourcegraph are affected, indicated by a comment on this issue.
[01:18:43] <keeganza> * [ ] The engineering owner has identified the impact this vulnerability could have on customers, indicated by a comment on this issue.
[01:18:44] <keeganza>   - [ ] CHANGELOG entry
[01:18:44] <keeganza> :q
[01:18:45] <keeganza> :q
[01:18:45] <keeganza> ed if a bounty will be awarded or not.
[01:18:48] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 276 seconds)
[01:18:50] <ikke> ..
[01:19:01] <ikke> I guess a mispaste
[01:19:08] *** cold__ is now known as Lost
[01:19:12] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[01:19:19] <keeganza> yup sorry
[01:19:45] <Tv_> foobaz: yeah, but a lisp can decide all its interesting data is 8-aligned and then use bottom pointers for type
[01:20:59] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[01:32:42] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[01:34:20] *** Quits: amahl (~amahl@84.251.202.64) (Remote host closed the connection)
[01:34:37] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:41:31] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:43:44] <seebs> oh hey is that the keegan i remember from sourcegraph? if so, hi, long time no see!
[01:46:30] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[01:46:33] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[01:46:33] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[01:47:43] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297)
[01:52:27] *** Joins: CoolerX (~CoolerX@user/coolerx)
[01:53:18] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:54:03] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[02:00:03] <dr0n> Hello, quick question. I am trying to return an error in (https://pastebin.com/gVdjcY5r) ; however, if I execute go run ./health-check.go ddd google.com 53 it looks like the request is automatically converted to udp dst port 53
[02:00:18] <dr0n> maybe there is a simple explanation that I don't see/understand
[02:00:22] <dr0n> thank you in advance
[02:01:09] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[02:01:24] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[02:02:12] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 245 seconds)
[02:02:43] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[02:02:44] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 255 seconds)
[02:04:39] <b0nn> ls
[02:05:52] <b0nn> dr0n: line 32, what is the value of err?
[02:06:02] <b0nn> or line 31 sorry
[02:06:04] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[02:06:58] *** Quits: src (~src@user/src) (Ping timeout: 240 seconds)
[02:07:54] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[02:08:17] <dr0n> b0nn: I thought err implements the error
[02:08:31] <dr0n> do I need a value?
[02:08:57] <b0nn> so, err is a variable, like any other, and it's set when you call net.LookupHost()
[02:09:18] <b0nn> except that call returns nil, because there was no error
[02:09:30] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 276 seconds)
[02:09:58] <b0nn> so you are returning the error generated by the net.LookupHost() call, (which may be nil)
[02:10:03] <dr0n> b0nn: the net.LookupHost is for hostname; I meant to check if 'network' variable is using the correct values
[02:10:11] <b0nn> yes
[02:10:28] <b0nn> so, return an error appropriate for the network variable
[02:10:38] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[02:10:53] <b0nn> something like `return fmt.Errorf("the network wasn't set")
[02:11:02] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[02:11:10] <b0nn> or wrong value or whatever takes your fancy
[02:12:01] <dr0n> tried that earlier and what happens is that else statement never get to be used
[02:12:20] <dr0n> looked it under wireshark, and that request is turned into tcp/dns request
[02:13:43] <b0nn> when I tried it on my machine I put a fmt.Printf("else block, returning error %v", err) into the else block, and saw nil
[02:14:06] <j416> dr0n: is the question about the behaviour of net, or about returning an error?
[02:14:24] <dr0n> j416: sorry, it's about the else statement (sorry for the last misleading statement)
[02:14:25] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Ping timeout: 258 seconds)
[02:14:53] <j416> I see two else statements; do you mean the first one?
[02:15:15] <dr0n> j416: line 31
[02:15:28] <dr0n> and line 30
[02:15:34] <j416> right
[02:15:50] <j416> and the question is?
[02:16:18] <j416> sorry I don't quite follow
[02:16:19] <dr0n> why if i type 'health-check.go ddd google.com 53'
[02:16:32] <dr0n> it doesn't generate an error and stops
[02:17:08] <dr0n> why does it takes the 'ddd' as valid 'network' variable
[02:17:51] <j416> your code after the host lookup err check says: if udp, then do nothing and return nil
[02:18:17] <j416> is that intended?
[02:19:19] <b0nn> dron - it doesn't
[02:19:44] <b0nn> you are returning the err value generated by the net.LookupHost() call, err is set by it
[02:19:49] <b0nn> and that's nil
[02:19:54] <dr0n> ah!
[02:20:13] <dr0n> j416: I dont think I wanted to do that
[02:20:17] <j416> dr0n: :D
[02:20:38] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 256 seconds)
[02:20:50] <j416> dr0n: also, is there a reason that you are assigning the same value to the network variable?
[02:21:14] <j416> dr0n: you're saying, if network is "tcp", set it to "tcp". seems pointless.
[02:21:23] <dr0n> j416: you are right!
[02:21:25] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[02:22:04] <j416> I'm not sure what you're trying to do
[02:23:19] <dr0n> i was trying to ensure if an empty string is given to network, it will use 'tcp'. Also to lock down only tcp and udp to be the only two options for network
[02:23:22] <dr0n> that was my intention
[02:23:38] <dr0n> obviously - very poor execution from my end
[02:23:40] <j416> inspect your logic; the only logic there is is effectively: if network != "tcp" { return nil }
[02:23:55] <j416> which explains your what about "ddd" confusion above
[02:24:10] <b0nn> dr0n: have you heard about switch statements
[02:24:19] <dr0n> b0nn:  yes, never used it, thou
[02:24:22] <b0nn> They're just if/else - but look prettier
[02:24:44] <dr0n> b0nn: i was planning to try to write the basic functionality and at one point to do some improvements
[02:24:58] <dr0n> for example, I think using 'flags' should be better than os.Args
[02:25:19] <dr0n> but just starting writting it; and wanted to just get it working and then look for ways to improve it
[02:25:35] <dr0n> but I've seen switch statements code and you are probably right
[02:25:35] <j416> dr0n: something like, https://play.golang.org/p/Vcl1jWkiK5m
[02:26:30] <j416> dr0n: you could also write it something like https://play.golang.org/p/vy1Ztakl0Ze
[02:26:34] *** Quits: n3tgh0st (~n3t@209-112-185-154-radius.dynamic.acsalaska.net) (Quit: Leaving)
[02:26:38] <dr0n> j416: stupid question, what is the difference between fmt.Errorf and errors.New()
[02:26:50] <dr0n> why you used errors.New
[02:27:00] <j416> dr0n: one is a plain string, the other uses a format string to add a value
[02:27:16] <dr0n> ah...
[02:27:21] <dr0n> nice!
[02:27:24] <dr0n> let me try it out
[02:27:40] <j416> dr0n: I moved the check for network first, because it is the first parameter to the function, and because it's cheaper (faster) than net.LookupHost
[02:28:21] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[02:29:02] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[02:30:04] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:31:00] <dr0n> https://pastebin.com/4SFS7ReM
[02:31:20] <dr0n> not sure if its a lack of sleep but I am still getting
[02:31:26] <dr0n> PS C:\Go\src\health-check> go run .\health-check.go ddd google.com 53
[02:31:28] <dr0n> host: google.com and port: 53 is down
[02:31:31] <dr0n> PS C:\Go\src\health-check>
[02:31:38] <j416> playground is nice
[02:31:46] <j416> and doesn't have ads and stuff
[02:31:50] *** Joins: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net)
[02:31:52] <dr0n> ah, sorry - I forgot
[02:31:56] *** Joins: dyslexicat (~dyslexica@212.253.36.231)
[02:32:01] <dr0n> it's an old habit to use pastebin
[02:32:29] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[02:33:34] <j416> does google run a DNS service on google.com ?
[02:33:40] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 268 seconds)
[02:34:12] *** Joins: Torr (~Torr@user/torr)
[02:34:18] <dr0n> I don't think
[02:34:31] <j416> then the response seems just appropriate, does it not
[02:34:51] <dr0n> but if you see I am using as a network a varible 'ddd'
[02:34:55] <dr0n> not tcp/ not udp
[02:35:37] <j416> yes
[02:35:57] <dr0n> that should return error, instead of nil ?
[02:35:59] <j416> if there's an error from TestConn, you're running line 48
[02:36:03] <j416> it does
[02:36:17] <j416> "host: google.com and port: 53 is down"
[02:36:20] <j416> you wrote so yourself
[02:36:45] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Ping timeout: 268 seconds)
[02:36:59] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[02:37:12] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[02:37:30] <j416> perhaps this makes it more clear https://play.golang.org/p/PMPqWEDhb2n
[02:38:01] <dr0n> I think I understand what you are saying
[02:38:13] <dr0n> I am returning an error, hence I am giving back hostdown
[02:38:16] <j416> yes
[02:39:46] <j416> it'd give an error for "ddd" (sorry didn't spot that first), or if it can't connect to the host
[02:39:54] *** Quits: zwr (~zwr@2804:14c:5bc5:8b2c:3553:691d:7df4:8081) (Ping timeout: 256 seconds)
[02:40:00] <dr0n> j416: how would I implement this to actually use the fmt.Errorf("unsupported protocol"..) part
[02:40:06] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 258 seconds)
[02:40:17] <dr0n> I think in my head, I imagined I would simply bring a message saying 'unsupported protocol'
[02:40:25] <j416> dr0n: did you see the link I sent?
[02:40:28] <dr0n> and os.Exit() , for example
[02:40:37] <dr0n> sorry, let me check it
[02:41:58] <dr0n> wow, okey
[02:42:19] <j416> it's convention to call variables containing errors "err"
[02:42:52] <j416> of course the name doesn't matter, but it makes it a bit more clear.
[02:44:12] <dr0n> took me 5sec to spot the difference
[02:44:22] <dr0n> thanks, learnt something !
[02:44:30] <dr0n> b0nn: thank you as well!
[02:45:19] <j416> o/
[02:45:54] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 276 seconds)
[02:45:58] <j416> dr0n: did you run through the tutorial? might be of use https://tour.golang.org/
[02:46:36] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:46:58] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[02:47:37] <dr0n> j416: not all of it, but I am using it
[02:48:13] <j416> is Go your first language?
[02:48:32] <dr0n> yes, but studying only in the evenings, like 1h in the evenings
[02:48:49] <j416> right
[02:49:25] <j416> if you're a book person, The Go Programming Language by Donovan & Kernighan might be of use, too.
[02:49:56] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[02:50:18] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:50:32] *** Quits: dalan6 (~dalan@59-102-56-163.tpgi.com.au) (Quit: dalan6)
[02:50:57] *** Joins: dalan6 (~dalan@59-102-56-163.tpgi.com.au)
[02:51:21] <Tv_> that book assumes prior programming knowledge tho
[02:51:27] <dr0n> j416: I have it; but I find "Learning Go" by Jon Bodner easier for me to read
[02:51:40] <Tv_> i don't think anyone's really written a "Learn programming and Go at the same time" book
[02:51:43] <j416> there's Effective Go (google that and you'll find it) and the language specification, but they're quite dense and perhaps a bit overwhelming. They don't go into much depth explaining concepts that may e new to those who haven't done much programming before. I think abovementioned book is a little bit easier there.
[02:52:10] <j416> Tv_: ah, I was under the impression that it was quite basic and unassuming in the beginning. I have only skimmed through it.
[02:52:20] <Tv_> also, Go may not be a great first programming language, at all. a lot of the documentation assumes you know the basics.
[02:52:25] <Izem> Tv_: that's what the Go book is?
[02:52:26] <dr0n> tried few more books (I think I have about 5 or 6 books) and only two of them are easier for me to digest
[02:52:30] <Tv_> j416: for someone coming from C, it's easy breezy
[02:52:33] <Izem> unless you mean introductory programming
[02:52:38] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[02:52:46] <Tv_> Izem: gopl.io does not teach you to program
[02:52:49] <j416> dr0n: I don't know that. If you're happy with it, perhaps good.
[02:53:59] <dr0n> j416: yes, as a begginer I find it a bit more easier to read
[02:55:32] <j416> Tv_: that's a rather bold thing to claim, but I can see how it may have some truth. Are you saying that because of lack of documentation, or are you referring to the language itself, too?
[02:55:46] <Tv_> j416: sure, we'll go with bot
[02:55:48] <Tv_> *both
[02:55:51] <j416> haha.
[02:56:01] <dr0n> :)
[02:56:06] <j416> it's a bit of an oddball compared to other languages, indeed.
[02:56:20] <j416> it shares a lot of concepts, but others are very different.
[02:56:22] <Tv_> j416: more than "lack of documentation", though -- the general assumption is that it is not the job of a Go library to explain *what exact a map is*
[02:56:39] <j416> nod
[02:56:58] <Tv_> Go is very much like a C with conventions, libraries and tooling -- it started out life as practically a rewrite of such ;)
[02:57:11] <Izem> yeah
[02:57:14] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[02:57:27] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[02:57:30] <Izem> though people seem to forget what else it was inspired by :P
[02:57:32] <Tv_> gopl.io is a book very much in that style too. it'll tell you what to expect of a map, but not explain the concepts of key and value.
[02:57:45] <j416> I suppose, Go was created with the assumption that most who learn it have some kind of background in basic CS, with all what that entails. Perhaps Java or the like.
[02:58:01] <Tv_> Izem: the stuff Go was inspired by was inspired by the things you are probably thinking of ;)
[02:58:22] <Izem> haha yeah
[02:58:35] <Tv_> Go is very much a redo of the Plan9/Inferno/Alef stuff, dropping the idea of a separate OS and focusing just on the language part
[02:58:55] <j416> dr0n: if you find yourself stuck, you may be able to pick up concepts elsewhere, and then compare that to how Go does it. A lot of it will be identical, some will be a bit different.
[02:59:12] <Tv_> j416: actually even more so, i find Go unapologetically assumes you know what a pointer is; Java doesn't really teach that
[02:59:45] <dr0n> j416: I think my problem is - the lack of time to practice
[03:00:03] <Tv_> as for languages meant for learning, Python is a significant comparatively recent (as in, it's not a scheme/smalltalk) language that was explicitly intended as a vehicle for learning to program
[03:00:16] <Tv_> very different from Go, but plenty of basics are universal
[03:00:17] <dr0n> j416: what I am doing right now is - I am trying to write something (like a little project) e.g. health check app
[03:00:18] <j416> dr0n: an hour a day sounds like a great start.
[03:00:40] <dr0n> j416: it doesn't feel to be honest ;< also, I do forget after a week if I stop coding
[03:00:40] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:00:52] <j416> :)
[03:00:56] <j416> keep having fun.
[03:01:04] <dr0n> tell me about it ;-)
[03:01:18] <j416> you'll figure things out eventually
[03:01:35] <dr0n> the cool thing is.. things start making more and more sense
[03:01:38] <j416> keep it simple.
[03:02:04] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[03:02:13] <dr0n> i wil try, thank you a lot
[03:02:15] <j416> when unsure, try to extract the specific part and make a small example out of it to experiment; at least for me this is a great way to learn
[03:02:29] <j416> I do it all the time, even though I've been at this for quite a while now
[03:04:34] <dr0n> j416: I agree, but it will take time
[03:04:39] <j416> of course.
[03:04:44] <j416> and you'll fail a lot.
[03:05:00] <j416> don't be afraid to restart.
[03:05:02] <j416> :)
[03:05:32] <dr0n> so, I have now this quite complex task (For me to do)
[03:05:51] <dr0n> this health check supposed to get quite large; so I hope this to keep me busy for .. a while
[03:07:26] *** Quits: usr123 (~usr123@124.253.111.8) (Read error: Connection reset by peer)
[03:07:49] *** Joins: usr123 (~usr123@27.255.249.48)
[03:11:54] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 252 seconds)
[03:12:04] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[03:13:52] *** Joins: meinside_ (uid24933@id-24933.brockwell.irccloud.com)
[03:14:34] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:18:40] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[03:28:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[03:28:32] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[03:29:05] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[03:30:54] *** Joins: zwr (~zwr@2804:14c:5bc5:8b2c:3553:691d:7df4:8081)
[03:31:32] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:54] *** Joins: jsrnop (~mark@user/jsrnop)
[03:37:13] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 250 seconds)
[03:37:38] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[03:42:13] *** Joins: dyslexicat (~dyslexica@212.253.36.231)
[03:42:54] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[03:44:09] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[03:44:27] *** Quits: yakiza (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net) (Quit: Client closed)
[03:45:03] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 276 seconds)
[03:46:23] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[03:46:37] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[03:47:03] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Ping timeout: 268 seconds)
[03:48:27] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 245 seconds)
[03:48:59] *** Joins: gggp_ (~gggp@60.10.194.43)
[03:49:31] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:51:04] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[03:54:33] *** Joins: milosz_ (~milosz@user/milosz)
[03:58:18] *** Quits: milosz (~milosz@user/milosz) (Ping timeout: 258 seconds)
[03:59:28] *** Joins: gggp (~gggp@60.10.23.160)
[04:01:03] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[04:01:46] *** Joins: gggp_ (~gggp@60.10.194.43)
[04:04:38] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Izem)
[04:04:42] *** Quits: gggp (~gggp@60.10.23.160) (Ping timeout: 252 seconds)
[04:04:58] *** Joins: Izem (~Izem@65.95.172.41)
[04:07:07] *** Quits: independent56 (~independe@2.25.26.77) (Ping timeout: 258 seconds)
[04:09:22] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[04:18:28] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[04:20:16] *** Joins: gggp__ (~gggp@60.10.194.43)
[04:23:35] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[04:33:20] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[04:37:58] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:56:07] *** gggp__ is now known as gggp
[05:02:22] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[05:02:35] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[05:02:47] *** Quits: Izem (~Izem@65.95.172.41) (Quit: Izem)
[05:04:56] <gggp> is channel r/w operation atomic ?
[05:07:11] <Tv_> gggp: the question is too vague to answer
[05:07:39] <Tv_> gggp: a channel can be sent to and received from in many goroutines concurrently
[05:07:45] *** Quits: usr123 (~usr123@27.255.249.48) (Read error: Connection reset by peer)
[05:08:08] *** Joins: usr123 (~usr123@124.253.109.111)
[05:18:46] <foobaz> new() was a mistake, there is no situation where the same logic can't be expressed without a keyword
[05:22:33] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:22:56] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[05:25:07] *** Joins: nitrix (~nitrix@ns569831.ip-51-79-81.net)
[05:25:07] *** Quits: nitrix (~nitrix@ns569831.ip-51-79-81.net) (Changing host)
[05:25:07] *** Joins: nitrix (~nitrix@user/nitrix)
[05:25:57] <Tv_> foobaz: fwiw i believe &T{} didn't exist at the time
[05:28:17] <foobaz> they should have taken it out for go 1.0, i want to use it for variable/function names
[05:28:19] <gggp> Does goroutine pass value of global variable to local with register?
[05:33:01] *** Joins: stmuk__ (~steve@15.43.187.81.in-addr.arpa)
[05:34:34] *** Quits: stmuk_ (~steve@15.43.187.81.in-addr.arpa) (Ping timeout: 240 seconds)
[05:38:41] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Quit: Leaving)
[05:42:28] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[05:47:29] *** Quits: revolve (~u0_a227@82-132-244-109.dab.02.net) (Read error: Connection reset by peer)
[05:50:16] *** Joins: califax- (~califax@user/califx)
[05:52:35] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:52:36] *** califax- is now known as califax
[05:58:24] *** Joins: revolve (~u0_a227@82-132-245-101.dab.02.net)
[06:03:47] *** Joins: oxum (~oxum@106.203.221.241)
[06:04:46] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[06:06:45] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 276 seconds)
[06:08:24] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[06:08:38] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 258 seconds)
[06:08:38] *** Joins: mickey (~user@user/mickey)
[06:10:41] *** Quits: vladimiroff (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:10:53] *** Joins: kiril (~kiril@85.91.153.163)
[06:11:35] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:13:13] *** Quits: hposca (~hposca@node-1w7jr9phoke2t9sajlv8zcl7c.ipv6.telus.net) (Remote host closed the connection)
[06:13:31] *** Joins: hposca (~hposca@node-1w7jr9phoke2t3ov4z0ok1wpo.ipv6.telus.net)
[06:22:45] *** Parts: d1z (~gt@2001:19f0:9002:6dc:42e5:a008:491c:b050) ()
[06:26:07] *** Quits: hposca (~hposca@node-1w7jr9phoke2t3ov4z0ok1wpo.ipv6.telus.net) (Remote host closed the connection)
[06:34:28] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[06:39:04] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[06:54:38] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Quit: ZNC 1.8.2 - https://znc.in)
[07:07:54] *** Quits: usr123 (~usr123@124.253.109.111) (Read error: Connection reset by peer)
[07:08:20] *** Joins: usr123 (~usr123@27.255.251.180)
[07:10:47] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[07:13:55] * bpalmer wishes the contrary: that new would grow to accept a second parameter, so that code like 'new(int, 3)' can be used instead of 'var x int = 3; &x'
[07:15:23] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:16:39] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 252 seconds)
[07:19:17] <seebs> i have no idea what the question about "pass value of global variable to local with register" is even supposed to mean
[07:19:34] <seebs> and i sort of agree with bpalmer on new(), although i'd also accept &int{3}.
[07:24:21] *** Quits: nperez (~nperez@86-93-223-59.fixed.kpn.net) (Ping timeout: 252 seconds)
[07:31:34] <A_Dragon> bah we need the cursed option
[07:31:35] <fizzie> C compound literals can be of any type, not just structs and arrays (there's no slices or maps, of course); I'd like Go's composite literals to follow suit just for that reason.
[07:31:39] <A_Dragon> `x := &3`
[07:33:46] <A_Dragon> foobaz: new isnt a keyword and you can shadow it fine. https://goplay.space/#0ERFcznrLv1
[07:33:54] <KirkMcDonald> Also &int(3), rather than &int{3}
[07:34:34] <KirkMcDonald> It makes more sense to me to expand the address-of operator syntax, rather than the composite literal syntax.
[07:35:49] <gggp> does goroutine copy outside value or use its address
[07:36:09] <A_Dragon> that is far too little info to answer that
[07:36:18] <A_Dragon> can you provide a code example of what you're doing?
[07:36:57] <A_Dragon> if its `for i... { go func(){ doAThing(i) }() }` then that will have results you dont expect
[07:37:11] <gggp> so ?
[07:37:17] <gggp> i is not copied
[07:37:29] <A_Dragon> Show me what you want to do
[07:37:34] <A_Dragon> and Ill tell you what happens
[07:37:49] <A_Dragon> theres no "it is or isnt", goroutines arent special, they're just normal functions
[07:37:59] <A_Dragon> thus normal rules apply. Closures do weird things
[07:38:05] <gggp> https://pastebin.com/xWH2gA9Z
[07:38:41] <gggp> is this code safe
[07:38:44] <A_Dragon> in future you should use the go playground
[07:38:56] <A_Dragon> but its syuncronised so its probably fine
[07:39:08] <gggp> how is it synced
[07:39:24] <A_Dragon> By channel. You should probably give the go tour a read
[07:39:32] <gggp> the 2 goroutine are not synced with each other
[07:39:40] <gggp> they are syned with main
[07:39:56] *** Joins: gaurav_ (~usr123@49.156.120.220)
[07:40:20] <A_Dragon> yes, the code is racy based on what starts first.
[07:40:30] <A_Dragon> see: https://play.golang.org/p/_9XK14KLuzL
[07:41:11] <gggp> what you mean by "racy"
[07:41:16] <A_Dragon> In *THIS* case, i is available to the goroutines because they're closures and have access to values in their upper scope
[07:41:18] <gggp> which is on racy
[07:41:27] <A_Dragon> Its racy, ie, it contains a data race
[07:41:48] <gggp> this is not same as for i ?
[07:42:00] <A_Dragon> different issue, similar results
[07:42:23] <A_Dragon> in general if you want to copy something such that it wont be changed by your other code, pass it to your function, dont use it from the outer scope
[07:42:47] <gggp> why the two print of a always happen before print of b?
[07:43:10] <A_Dragon> they wont, it depends on the scheduler
[07:43:12] <A_Dragon> for me b is always first
[07:43:35] <gggp> why the two print of b always happen before print of a?
[07:43:41] <gggp> why not a b a b
[07:43:55] <A_Dragon> they can do that, one can happen first, the other can happen first
[07:43:57] <A_Dragon> they're concurrent
[07:44:08] *** Quits: usr123 (~usr123@27.255.251.180) (Ping timeout: 272 seconds)
[07:44:25] <gggp> but my execution always is " b b a a "
[07:44:25] <A_Dragon> the only time main and either side is synced is in the channel send. Otherwise what happens when is anyones guess
[07:44:45] <A_Dragon> theres no promise that b even sends to the channel second, it could go first easily
[07:45:21] <gggp> a a b b , a b b a , possible?
[07:45:31] <A_Dragon> Any combination is possible
[07:45:43] <gggp> oh , my result is always bbaa
[07:45:47] <A_Dragon> You should go read though the tour of go.
[07:45:48] <gggp> :(
[07:46:06] <gggp> which part to read
[07:46:08] <A_Dragon> and on the go playground after the first execution it will be the same because of how the go playground works
[07:46:37] <A_Dragon> there is no promise of any order when you do that, unless you use some other synconization primitive
[07:47:19] <A_Dragon> https://tour.golang.org I suggest you go though the tour, or at least https://tour.golang.org/concurrency/1 the concurrency section thereof
[08:00:11] *** Joins: ac5tin (~ac5tin@user/ac5tin)
[08:13:10] <gggp> is go func started as a  closure
[08:14:23] <A_Dragon> the nested function is a closure(*)
[08:14:34] <A_Dragon> its no different from any other function
[08:14:50] <gggp> go func {} is not clouse ?
[08:16:15] <A_Dragon> `go` is a keyword
[08:16:19] <A_Dragon> func is also a keyword
[08:16:35] <A_Dragon> `go func` mixes the two, starts an anonymous function
[08:16:40] *** Quits: moto (~moto@user/moto) (Ping timeout: 258 seconds)
[08:23:02] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Izem)
[08:23:07] <gggp> A_Dragon, https://play.golang.org/p/Gawvam3lv2H
[08:23:16] *** Joins: moto (~moto@user/moto)
[08:23:25] <gggp> is this code safe for concurrent
[08:23:43] <A_Dragon> Don't use busy loops for that
[08:23:54] <A_Dragon> in general busy loops are bad
[08:24:28] <A_Dragon> is it "safe"? that depends on what you want to do.
[08:24:42] <A_Dragon> Use a lock if the data you're modifying isnt goroutine safe
[08:35:07] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[08:39:49] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[08:49:43] <gggp> A_Dragon, can i use bool value to do sync between goroutines like this code
[08:49:54] <A_Dragon> No, use a lock.
[08:50:04] <A_Dragon> or a channel, if you're just passing data around
[08:50:21] <A_Dragon> using busy loops like that will WORK but it burns CPU time for no reason
[08:50:28] <A_Dragon> you should NEVER use busy loops
[08:51:11] <gggp> mutex use atomic cpu instructions ,right ?
[08:51:26] <seebs> mutex uses Something That Works
[08:51:30] <A_Dragon> depends on system and a bunch of other things. Dont worry about how they work
[08:51:34] <A_Dragon> they just do
[08:51:43] <A_Dragon> and wont burn CPU time like a busy loop will
[08:52:59] <ikke> Or a waitgroup
[08:53:03] <seebs> yeah, what mutexes use isn't defined and isn't *supposed* to be defined.
[08:53:25] <A_Dragon> how they behave is defined, all that matters
[08:53:28] <seebs> you are promised that m.Lock/m.Unlock work as documented. how this is achieved is Not Specified.
[08:53:31] <ikke> if you just want to make sure one or more goroutines are finished
[08:53:56] <seebs> if you want synchronization, you should almost always be using channels or mutexes.
[08:54:45] <seebs> also, the example with `for !b {}` isn't safe, and it's not just sort of questionably unsafe, it's "there are no guarantees at all" unsafe.
[08:55:06] <ikke> https://pkg.go.dev/sync#WaitGroup
[08:55:11] <seebs> in particular, i don't think go makes any promises that access to a after checking the value of b will "work".
[08:55:13] <A_Dragon> insert joke here about infinite loops being undefined behaviour and therefore can be compiled out
[08:55:17] <seebs> no synchronization -> no promises
[08:55:47] <A_Dragon> also, the for !b {} could go forever, given some quirks in the scheduler and fast loops
[08:55:58] <A_Dragon> in fact I think that does flat out never exit in some older versions
[08:56:10] <A_Dragon> I remember seeing something about safe places to park goroutines etc
[08:56:20] <A_Dragon> assuming a single core system and execution, mind
[08:58:05] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 255 seconds)
[08:58:10] <seebs> in general, the short answer is, don't think about this stuff, follow the rules, use synchronization, and stay WAY the heck away from all the dangerous stuff.
[08:58:40] <seebs> if you do stuff like that, and it seems to work, and then it stops working, and you file a bug report, they will *absolutely* point and laugh
[08:59:48] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[09:01:23] <gggp> but , does channel internally use mutex though
[09:01:35] <A_Dragon> It doesnt matter.
[09:01:39] <gggp> r/w to channel is atomic ?
[09:01:53] <A_Dragon> Read the tour of go
[09:01:57] <A_Dragon> it covers all of that
[09:02:00] <ikke> A channel is one directional only
[09:02:01] <gggp> okay
[09:03:45] <ikke> Hmm, that's not true, sorry
[09:10:42] <seebs> "atomic" is the wrong question
[09:10:54] <seebs> when you write to a channel, exactly one reader gets any given write
[09:11:32] *** Quits: gggp (~gggp@60.10.194.43) (Remote host closed the connection)
[09:11:55] *** Joins: gggp (~gggp@111.63.14.119)
[09:13:06] *** Joins: gggp_ (~gggp@60.10.194.43)
[09:17:14] *** Quits: gggp (~gggp@111.63.14.119) (Ping timeout: 272 seconds)
[09:26:06] *** Joins: arcatech_ (~arcatech@user/arcatech)
[09:27:22] *** Quits: arcatech_ (~arcatech@user/arcatech) (Client Quit)
[09:29:54] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 272 seconds)
[09:33:36] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[09:36:03] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 276 seconds)
[09:38:07] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[09:43:56] *** Quits: gaurav_ (~usr123@49.156.120.220) (Read error: Connection reset by peer)
[09:44:20] *** Joins: gaurav_ (~usr123@124.253.244.35)
[09:53:18] *** Joins: gggp__ (~gggp@60.10.194.43)
[09:56:18] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[09:56:42] *** Joins: gggp (~gggp@60.10.194.43)
[09:59:18] *** Quits: gggp__ (~gggp@60.10.194.43) (Ping timeout: 265 seconds)
[09:59:45] *** Joins: gggp_ (~gggp@60.10.194.43)
[09:59:51] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:01:21] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[10:02:12] *** Quits: revolve (~u0_a227@82-132-245-101.dab.02.net) (Ping timeout: 265 seconds)
[10:02:53] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 250 seconds)
[10:06:14] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[10:06:22] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Write error: Broken pipe)
[10:06:33] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[10:07:12] *** Joins: revolve (~u0_a227@82-132-245-101.dab.02.net)
[10:11:10] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[10:14:51] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[10:15:42] <bpalmer> Well, it is atomic in that exactly the value you send to a channel will be received, if anything does receive it.
[10:16:21] <bpalmer> You don't have to worry about two goroutines A and B crossing over as they send their data, and delivering a half-human, half-fly on the other side of the channel.
[10:18:00] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[10:18:22] *** Parts: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) ()
[10:19:13] *** LSD is now known as acidsys
[10:22:39] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:26:56] *** Joins: nperez (~nperez@2a02-a45b-17c4-1-a00-27ff-feab-4723.fixed6.kpn.net)
[10:35:51] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[10:37:19] *** Joins: dyslexicat (~dyslexica@212.253.36.231)
[10:38:23] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[10:41:49] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[10:46:31] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[10:53:57] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[10:56:05] *** Joins: c10l (~c10l@89.34.167.207)
[11:04:19] <b0nn> bpalmer: You should never let the two streams cross!
[11:04:47] <b0nn> https://www.youtube.com/watch?v=wyKQe_i9yyo
[11:09:05] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:09:17] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[11:12:01] *** Joins: kochchef (~quassel@80.146.255.46)
[11:13:04] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:14:05] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[11:14:10] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:18:03] *** Joins: mrig (~mrig@user/mrig)
[11:20:40] *** Quits: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4) (Ping timeout: 256 seconds)
[11:20:47] *** Joins: xsteadfastx (~marv@94.31.101.21)
[11:23:16] *** Quits: iivvoo (~l@m3r.nl) (Quit: The Lounge - https://thelounge.chat)
[11:23:42] *** Joins: iivvoo (~l@m3r.nl)
[11:29:11] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[11:30:00] *** DaftCheets is now known as cheets
[11:32:52] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[11:37:33] *** Joins: shka (~herr@109.231.62.239)
[11:39:00] *** Joins: justicefries (~justicefr@2603-7081-7001-866e-d121-fbb5-3a3b-98b1.res6.spectrum.com)
[11:44:34] *** Joins: gaurav__ (~usr123@124.253.109.42)
[11:46:06] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[11:47:05] *** Joins: oxum (~oxum@106.203.221.241)
[11:47:16] *** Joins: gggp__ (~gggp@60.10.194.43)
[11:48:10] *** Quits: gaurav_ (~usr123@124.253.244.35) (Ping timeout: 240 seconds)
[11:50:18] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[11:50:32] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 245 seconds)
[11:51:19] *** Joins: independent56 (~independe@2.25.26.77)
[11:51:31] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[11:52:33] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 276 seconds)
[11:54:06] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2)
[12:01:29] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[12:01:31] *** gggp__ is now known as gggp
[12:03:41] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[12:06:38] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[12:09:49] *** Quits: aerona (~aerona@2600:6c54:4600:f300:85b8:3678:dd3f:eeda) (Read error: Connection reset by peer)
[12:14:35] *** kai6 is now known as kai
[12:18:03] *** Quits: revolve (~u0_a227@82-132-245-101.dab.02.net) (Read error: Connection reset by peer)
[12:18:14] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:19:45] *** Joins: revolve (~u0_a227@82-132-245-89.dab.02.net)
[12:22:27] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 252 seconds)
[12:23:31] *** Joins: oxum (~oxum@106.203.221.241)
[12:23:52] <bookworm> related: https://research.swtch.com/gomm
[12:24:54] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[12:27:13] <ikke> Is something like this possible at all? https://play.golang.org/p/o70_clLiZA9
[12:27:28] <ikke> A function accepting []fmt.Stringer
[12:28:08] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[12:28:10] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 265 seconds)
[12:34:49] <KirkMcDonald> ikke: Certainly: https://play.golang.org/p/DGMPqLbAb7b
[12:36:02] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 256 seconds)
[12:37:10] <ikke> Ok, but the list already needs to me of type fmt.Stringer
[12:37:34] <ikke> So I cannot use any other pre-existing lists without explictly creating a new list
[12:38:16] <KirkMcDonald> It needs to be a slice of that type.
[12:39:19] <ikke> Yes, so I basically have to wait for generics to make something like that work as a general funciton
[12:39:21] <ikke> function*
[12:42:06] <KirkMcDonald> Or use reflection.
[12:42:56] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[12:47:37] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[12:47:48] *** Joins: normen_ (~normen@p200300d7173dc90075d8aff6066479e5.dip0.t-ipconnect.de)
[12:50:09] *** Quits: normen (~normen@p200300d7173dc90075d8aff6066479e5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:50:10] *** normen_ is now known as normen
[12:50:14] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[12:50:53] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[12:52:45] *** Joins: Jad (~Nashmi@user/jad)
[12:53:08] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 252 seconds)
[12:53:32] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[12:55:31] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[12:55:50] *** Joins: independent56 (~independe@2.25.26.77)
[12:58:31] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[12:58:50] *** Joins: independent56 (~independe@2.25.26.77)
[12:59:11] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Ping timeout: 252 seconds)
[13:02:35] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[13:09:06] <j416> or type assertion if you know what types to expect beforehand
[13:11:33] <j416> ikke: you could, https://play.golang.org/p/97_BR9qey8P
[13:12:11] <j416> ikke: but in the case of fmt.Stringer, fmt.Sprintf will figure that out anyway so https://play.golang.org/p/3ntF_NiGY0H
[13:13:00] <j416> ikke: or you could of course constrain to https://play.golang.org/p/h-ttGYn7jZt
[13:13:52] <j416> ah, KirkMcDonald already had that example. sorry, overlooked.
[13:16:09] <ikke> The problem is that I don't have a []fmt.Stringer or []interface{}
[13:16:28] <ikke> In this case I manually create it, but in practice, I just get a []Foo
[13:17:37] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 245 seconds)
[13:17:41] <j416> right. no easy way to convert it, except looping and appending to a new list.
[13:18:02] <j416> afaik.
[13:18:45] <j416> you at least know the size of it so you can pre-allocate.
[13:19:15] *** Joins: gggp_ (~gggp@60.10.194.43)
[13:19:49] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[13:19:51] <ikke> Yes, but at that point I could just as well do the formatting directly instead of outsourcing it
[13:20:39] <j416> what I meant with type switching if you know the types beforehand; not very pretty but, https://play.golang.org/p/LA1Bkm2hNJf
[13:21:19] <ikke> Yes, but the body of each case would be exactly the same
[13:21:28] <ikke> So, hardly any benefit
[13:22:18] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[13:22:44] <bookworm> that case is even in the faqs
[13:22:51] <j416> sounds like reflection then.
[13:22:56] <j416> D:
[13:23:07] <bookworm> not having the same memory representation kinda makes the conversion dance necessary
[13:23:16] *** Joins: gggp__ (~gggp@111.63.14.119)
[13:23:45] <bookworm> the compiler could make that transparent, but as it's quite expensive (or can be) I personally find it good that you need to explicitly do it
[13:24:26] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[13:24:55] <ikke> cannot wait for generics to be there
[13:26:18] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[13:27:48] <j416> would have been neat to be able to do this, but I suppose there's a catch with it where it won't know the type to be able to map it properly compile-time https://play.golang.org/p/9BtGvHBpiDP
[13:28:41] <j416> generics would be handy for this indeed.
[13:30:57] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[13:33:25] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 265 seconds)
[13:34:00] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:39:44] *** Joins: Atque (~Atque@user/atque)
[13:44:19] *** Quits: gaurav__ (~usr123@124.253.109.42) (Read error: Connection reset by peer)
[13:44:43] *** Joins: gaurav__ (~usr123@27.255.250.209)
[13:45:00] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 276 seconds)
[13:47:05] *** Quits: gaurav__ (~usr123@27.255.250.209) (Client Quit)
[13:57:33] *** Joins: Giedrius (~giedrius@78-58-156-248.static.zebra.lt)
[14:00:16] *** Joins: gggp_ (~gggp@111.63.14.119)
[14:00:17] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[14:04:08] *** Quits: gggp__ (~gggp@111.63.14.119) (Ping timeout: 272 seconds)
[14:06:48] *** Joins: src (~src@user/src)
[14:11:53] *** Joins: gggp__ (~gggp@60.10.194.43)
[14:15:05] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 258 seconds)
[14:16:11] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:23:31] *** Quits: justicefries (~justicefr@2603-7081-7001-866e-d121-fbb5-3a3b-98b1.res6.spectrum.com) (Quit: Client closed)
[14:23:58] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:26:09] *** Joins: getz[m] (~getz@2001:470:69fc:105::c85e)
[14:32:12] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 256 seconds)
[14:32:23] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[14:36:52] *** Joins: teasea3 (~teasea@user/teasea)
[14:36:54] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:f426:2423:b305:d90d) (Quit: WeeChat 3.2)
[14:37:41] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:8998:2b72:a720:8d88)
[14:37:42] *** Quits: teasea (~teasea@user/teasea) (Ping timeout: 258 seconds)
[14:37:42] *** teasea3 is now known as teasea
[14:37:45] *** Joins: CoolerX (~CoolerX@user/coolerx)
[14:42:27] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:42:43] *** Joins: mickey (~user@user/mickey)
[14:44:33] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 250 seconds)
[14:44:38] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:195c:4692:dcd8:dcc6)
[14:44:45] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[14:47:27] *** Joins: lebster (sid17131@id-17131.stonehaven.irccloud.com)
[14:48:20] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 265 seconds)
[14:48:26] *** Joins: mrniranjan (~mniranja@103.208.71.44)
[14:52:29] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 252 seconds)
[14:54:03] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[15:11:12] *** Joins: sysh (~sysh@212.237.182.120)
[15:13:45] *** zwindl is now known as abc
[15:13:56] *** abc is now known as zwindl
[15:16:58] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[15:20:09] *** Joins: Giedrius_ (~giedrius@5.133.65.65)
[15:21:07] *** Joins: independent_ (~independe@2.25.26.77)
[15:23:08] *** Quits: Giedrius (~giedrius@78-58-156-248.static.zebra.lt) (Ping timeout: 265 seconds)
[15:24:28] *** Quits: independent56 (~independe@2.25.26.77) (Ping timeout: 258 seconds)
[15:24:35] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[15:26:33] *** Joins: darkapex (~darkapex@user/darkapex)
[15:28:57] *** Quits: independent_ (~independe@2.25.26.77) (Remote host closed the connection)
[15:29:03] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[15:29:15] *** Joins: independent_ (~independe@2.25.26.77)
[15:30:59] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 258 seconds)
[15:35:30] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 240 seconds)
[15:37:24] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[15:40:32] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[15:43:36] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: You have been idle for 30+ days)
[15:43:40] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Quit: You have been idle for 30+ days)
[15:48:16] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[15:51:05] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[16:00:00] <ryu`> I have an event log. Each event adds a new line / a new JSON object. Each line is a valid JSON. Having just 1 event / line, everything works. Having more events, results in this error: "Error in plugin: invalid character '{' after top-level value" - why? Some more information; https://pastebin.com/KkzG0ahk
[16:00:48] <ryu`> (I have no idea if this is the right channel for this, but hey, don't ask to ask, just ask ;-))
[16:01:11] <ikke> need more context, what is parsing this json?
[16:01:30] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 268 seconds)
[16:01:34] <ryu`> https://github.com/influxdata/telegraf/tree/master/plugins/inputs/file
[16:01:45] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[16:02:12] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[16:03:43] <ryu`> https://github.com/influxdata/telegraf/tree/master/plugins/parsers/json
[16:04:01] <ryu`> aaand, two sec, i'll paste my config ..
[16:04:08] <fizzie> You can't just *assume* something will use newline-delimited JSON if it doesn't *say* it does.
[16:05:27] <fizzie> "The file plugin parses the complete contents of a file every interval using the selected input data format."
[16:05:28] <ryu`> https://pastebin.com/t1YDkR7z
[16:05:29] <fizzie> Probably use the `tail` plugin instead, if you want to have it parse newly appended lines only, and go line by line.
[16:08:17] <ryu`> https://github.com/influxdata/telegraf/tree/release-1.19/plugins/inputs/tail - ok
[16:16:51] *** Quits: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Remote host closed the connection)
[16:17:15] *** Joins: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr)
[16:22:49] *** Joins: Guest82 (~Guest82@87.116.167.181)
[16:23:12] *** Quits: Guest82 (~Guest82@87.116.167.181) (Client Quit)
[16:23:27] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[16:29:15] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 258 seconds)
[16:30:03] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:31:00] *** Joins: jespada (~jespada@90.254.247.46)
[16:33:13] *** Quits: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr) (Remote host closed the connection)
[16:33:37] *** Joins: rthur (~arthur@lfbn-idf1-1-912-97.w86-238.abo.wanadoo.fr)
[16:39:46] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:41:22] *** Joins: yoonkn (~user@175.197.208.79)
[16:51:37] *** Joins: leonardo (~leonardo@user/leonardo)
[16:51:46] *** Quits: leonardo (~leonardo@user/leonardo) (Quit: WeeChat 3.1)
[16:54:06] *** Joins: sleetdrop (~sleetdrop@61.135.152.135)
[16:58:26] *** Joins: leonardo (~leonardo@user/leonardo)
[16:58:41] *** Joins: Torr (~Torr@user/torr)
[17:01:57] *** Quits: fm (~fm@user/fm) (Remote host closed the connection)
[17:11:33] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[17:11:40] *** Parts: Giedrius_ (~giedrius@5.133.65.65) ()
[17:11:42] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:12:06] *** Joins: burningserenity_ (~burningse@2603:9001:f01:ad99::1002)
[17:15:57] <burningserenity_> Hey everyone! I'm trying to make a simple TLS socket connection to an Apache webserver I have running in a virtual machine. I'm using fprintf to write a GET request on the socket connection. The server returns 400, and when I check the Apache logs, it looks like ""\x16\x03\x01\x02", why is this? My code is here: https://pastebin.com/Xcf7Dqxb
[17:18:21] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 252 seconds)
[17:18:21] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Ping timeout: 252 seconds)
[17:19:25] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[17:20:35] *** Quits: tristero (~nobody@user/tristero) (Ping timeout: 265 seconds)
[17:23:53] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[17:29:01] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:29:52] *** Joins: dyslexicat (~dyslexica@212.253.36.231)
[17:30:28] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[17:34:47] *** Quits: sleetdrop (~sleetdrop@61.135.152.135) (Quit: Textual IRC Client: www.textualapp.com)
[17:41:03] <ryu`> fizzie : thank you, it worked.
[17:44:29] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:47:34] <ryu`> hmm -- and to further break down the anomaly section, how would go about to configure my tag_keys? ,"dest_port","anomaly.type","anomaly.event" -- etc.? I'll just try to figure this out.. https://pastebin.com/KkzG0ahk
[17:47:38] *** Quits: gggp__ (~gggp@60.10.194.43) (Read error: Connection reset by peer)
[17:48:44] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[17:55:07] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 245 seconds)
[17:58:32] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 255 seconds)
[17:59:34] *** Joins: BUSY (~BUSY@user/busy)
[18:00:00] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[18:05:06] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Ping timeout: 252 seconds)
[18:05:26] *** Joins: gggpkm_ (~gggpkm@123.113.186.218)
[18:08:09] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Ping timeout: 258 seconds)
[18:10:06] *** Joins: arcatech (~arcatech@user/arcatech)
[18:11:47] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 245 seconds)
[18:22:02] *** Joins: dyslexicat (~dyslexica@212.253.36.231)
[18:23:14] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[18:24:38] *** Joins: arcatech (~arcatech@user/arcatech)
[18:26:56] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Ping timeout: 258 seconds)
[18:27:34] *** Quits: revolve (~u0_a227@82-132-245-89.dab.02.net) (Read error: Connection reset by peer)
[18:28:06] *** Joins: dyslexicat (~dyslexica@212.253.36.231)
[18:32:00] *** Joins: nyah (~nyah@90.221.186.180)
[18:35:47] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[18:35:59] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[18:36:10] *** Quits: xsteadfastx (~marv@94.31.101.21) (Ping timeout: 240 seconds)
[18:38:11] *** Joins: revolve (~u0_a227@82-132-245-89.dab.02.net)
[18:38:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[18:40:50] *** Quits: independent_ (~independe@2.25.26.77) (Read error: Connection reset by peer)
[18:41:11] *** Joins: independent56 (~independe@2.25.26.77)
[18:44:06] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from free­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[18:44:46] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:46:05] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:48:00] *** Quits: revolve (~u0_a227@82-132-245-89.dab.02.net) (Ping timeout: 252 seconds)
[18:48:14] <nevivurn> burningserenity_: that could be tls client hello, at least the 0x160301. Maybe the server is not expecting TLS on that port?
[18:48:44] <nevivurn> burningserenity_: see https://tls.ulfheim.net/ "client hello"
[18:49:41] *** Joins: revolve (~u0_a227@82-132-245-13.dab.02.net)
[18:50:49] *** Joins: pots (~pots@20.51.220.66)
[18:54:06] <burningserenity_> nevivurn I can access this address and port using HTTPS in Firefox, or by using golang's http client. I'm fairly certain the server is expecting TLS on that port, but I'm new at configuring Apache, so it's possible I did something wrong.
[18:55:08] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Ping timeout: 256 seconds)
[18:55:49] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:02:17] *** Joins: tristero (~nobody@user/tristero)
[19:07:17] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:09:50] *** gggpkm_ is now known as gggpkm
[19:09:55] <gggpkm> channel communication somehow like actor
[19:12:57] *** Joins: dyslexicat (~dyslexica@212.253.36.231)
[19:14:18] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:14:38] <sztanpet> no, actor is a design pattern
[19:16:48] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:17:32] <sztanpet> channels were modelled on https://en.wikipedia.org/wiki/Communicating_sequential_processes
[19:17:42] *** Joins: andlabs (~andlabs@2607:fb90:f802:68ab:791b:f4e7:bc33:e00e)
[19:18:40] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[19:18:56] *** Quits: RayS (~raysl@sdf1.xen.prgmr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[19:19:16] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[19:20:53] *** Joins: RayS (~raysl@sdf1.xen.prgmr.com)
[19:21:15] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[19:21:16] <gggpkm_> Does grpc wrap  remote method's name and args as string ?
[19:21:42] *** Quits: gggpkm (~gggpkm@123.113.186.218) (Ping timeout: 276 seconds)
[19:23:05] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:23:37] <Tv_> gggpkm_: method goes in url, args in protobuf body
[19:23:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[19:24:07] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[19:24:10] <Tv_> gggpkm_: ponder its streaming support versus how you thought it worked
[19:24:44] *** Joins: arcatech (~arcatech@user/arcatech)
[19:28:17] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[19:29:47] <gggpkm> missing msgs
[19:29:52] <gggpkm> missed msgs
[19:30:01] *** Joins: fef (~thedawn@user/thedawn)
[19:30:07] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 250 seconds)
[19:34:38] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Remote host closed the connection)
[19:37:25] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:37:51] *** Joins: marlinc (~marlinc@user/marlinc)
[19:38:56] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[19:41:27] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:42:29] *** Joins: _sysh (~sysh@212.237.182.120)
[19:43:46] *** Quits: sysh (~sysh@212.237.182.120) (Ping timeout: 240 seconds)
[19:47:04] *** Joins: gggp (~gggp@125.33.89.68)
[19:51:23] *** Quits: zanshin (~zanshin@user/zanshin) (Ping timeout: 265 seconds)
[19:54:37] *** Quits: andlabs (~andlabs@2607:fb90:f802:68ab:791b:f4e7:bc33:e00e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:55:12] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 256 seconds)
[20:10:44] <mrig> Hello :)
[20:12:09] <mrig> What would you recommend for using the encoding/xml package for fmt type pretty printing, if I would like to modify a file, I was thinking that using the token offset would be the way to go about this, does this seem lucid?
[20:13:12] <Sam> mrig: I don't understand what you're trying to do, sorry. Are you trying to indent an XML file?
[20:14:49] <mrig> I am making a parse tree so that I can modify the file, but would like to maintain user white space such as line breaks.
[20:15:49] <mrig> I would just pretty print the tree, but if I don't have the information as to where newlines are inserted I will lose that info.
[20:16:02] <Tv_> mrig: well then you can't use encoding/xml to parse it in the first place
[20:16:16] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[20:16:30] <Sam> I think you'd just keep chardata tokens for the whitespace in the tree and when pretty-printing the tree ignore them (but when writing it out as XML keep them), no? Maybe I'm still not understanding the problem
[20:16:31] <mrig> Could I not use that to make a map of where the elements are was my thought?
[20:16:34] <Tv_> it's pretty rare for an xml parser to remember what the original source code really looked like, that's typically not needed
[20:16:48] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297) (Quit: Leaving)
[20:17:05] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297)
[20:17:29] <Sam> If you're using encoding/xml you'll also lose some information (such as whether a tag was self-closing or not) either way too, so if you really need byte precision in the output you might not want to use encoding/xml
[20:17:41] <mrig> Right yes, but we do have the option to remember the offset, that is my thought at the moment, is it worth exploring this to keep tally of newline characters.
[20:17:52] <Tv_> mrig: consider &foo; vs the real thing; does encoding/xml preserve that for you
[20:18:28] <mrig> My requirement are a very limited subset of xml, I really only want to pretty print svg.
[20:18:56] <Tv_> mrig: i'd personally just pretty-print it reproducible, regardless of input layout
[20:19:09] <mrig> Is there perhaps a better parse package for this job?
[20:19:30] *** Quits: LiftLeft (~LiftLeft@138.199.10.80) (Ping timeout: 240 seconds)
[20:19:50] <mrig> lower level rather not better, I suppose the string primitives on the scanner as as good as I really need for svg though.
[20:20:00] <Sam> Maybe I'm misunderstanding what you mean by "pretty print". If you just want to re-tab the XML you don't need to remember whitespace at all
[20:20:47] <mrig> Sam: if the original text has a line break in the middle of the an attributes array of data, I'd like to keep it.
[20:21:18] <mrig> This is for a tool to use whilst hand writing svg.
[20:22:12] <Sam> Ah, I see, yes I was forgetting about attributes. That makes sense and there won't really be a good way to use encoding/xml to remember that.
[20:22:22] <mrig> The tab indentation is fine, it is only those lines that are broken for layout reasons.
[20:22:30] <Sam> I mean, as you said, you could do some hacks and read the byte stream through something else that keeps track of newlines, but that's going to be a pain.
[20:26:10] <mrig> thank you, I shall take a little look at using that as a temporary solution, but with a mind to replacing the lexer.
[20:26:43] <Sam> I'm not sure if it will help you or not, but I wrote https://pkg.go.dev/mellium.im/xmlstream to be the io package but for XML tokens. It has some formatting and what not that might be useful to you.
[20:27:03] <mrig> Thank you, I will take a look.
[20:27:52] <Sam> Maybe I'll add an option to preserve whitespace to the Fmt transformer
[20:30:07] <mrig> Oh that would be cool :)
[20:30:54] <mrig> the main reason that im writing this code is that the svg output of inkscape is quite incoherent.
[20:33:11] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:33:12] *** Quits: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex) (Ping timeout: 252 seconds)
[20:33:20] *** Quits: jiqiren (~jiqiren@oh-hi.org) (Ping timeout: 255 seconds)
[20:33:29] *** Quits: sebito91 (~sborza@45.55.74.66) (Ping timeout: 252 seconds)
[20:33:30] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 240 seconds)
[20:33:54] *** Quits: thiccdaddy (~OwO@thiccdaddy.sexy) (Ping timeout: 240 seconds)
[20:34:14] *** Quits: losinggeneration (~quassel@64.225.54.254) (Ping timeout: 255 seconds)
[20:34:18] *** Quits: Teckla (~Teckla@user/teckla) (Ping timeout: 256 seconds)
[20:34:27] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Client Quit)
[20:35:21] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[20:36:03] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[20:39:12] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:40:32] *** Joins: sebito91 (~sborza@45.55.74.66)
[20:40:55] <lungaro_> i'm annoyed by the ordering of fields when i serialize them in json. Is there a way to control it?
[20:40:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[20:41:09] *** Joins: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex)
[20:41:10] <lungaro_> i'll even take yaml, both have the same issue
[20:41:20] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[20:41:36] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Client Quit)
[20:41:41] <Tv_> lungaro_: encoding/json sorts maps alphabetically. can't remember what it does with structs?
[20:41:54] <lungaro_> yeah I am not a fan of that. Its almost never what you want
[20:42:04] <lungaro_> atleast its consistent
[20:42:22] <Tv_> that's the whole point
[20:42:38] <Tv_> lungaro_: but why aren't you using structs then
[20:42:49] <Tv_> struct fields come out in source order
[20:43:05] *** Joins: losinggeneration (~quassel@64.225.54.254)
[20:43:29] *** Joins: thiccdaddy (~OwO@thiccdaddy.sexy)
[20:43:39] <ikke> maps have no pre-defined order of keys
[20:43:44] <ikke> so it must sort them
[20:43:46] <lungaro_> i am, its just that ordering is not ideal for consumption
[20:43:51] <ikke> or otherwise, it owuld be random
[20:44:04] <Tv_> lungaro_: if the struct field order is "wrong", change the struct field order?
[20:44:29] *** Quits: dyslexicat (~dyslexica@212.253.36.231) (Quit: leaving)
[20:44:46] <lungaro_> its sorting the struct fields alphabetically, so that's not helping
[20:45:05] <Tv_> lungaro_: that's about maps, you just said you're using structs
[20:45:36] <Tv_> straight from encoding/json docs: https://play.golang.org/p/fSv0o3u915f
[20:45:40] <lungaro_> i am using structs, doesn't seem to come out in source order
[20:45:41] <lungaro_> hmmmm
[20:45:47] *** Joins: Teckla (~Teckla@user/teckla)
[20:48:44] <lungaro_> dang, its probably the swagger tool screwing my order then
[20:49:34] <Tv_> the rule of thumb is all webshit is shit...
[20:50:12] <lungaro_> Totally, fail.
[20:50:25] <lungaro_> every time i touch swagger it pisses me off
[20:50:34] <lungaro_> reason #5432 now
[20:52:30] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[20:54:07] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[20:54:42] <lungaro_> https://github.com/go-swagger/go-swagger/issues/1960
[20:54:49] <lungaro_> damn it, why
[20:55:37] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:55:57] <Tv_> lungaro_: why? likely because the actual code is full of map[string]interface{}
[20:56:08] <lungaro_> yeah, the json spec is a  { }
[20:56:11] <lungaro_> so they lose order
[20:56:22] <lungaro_> wonderfully awful
[20:56:52] <lungaro_> i'm gonna just pretend i dont care about this
[20:56:52] <Tv_> it's really implementing things the lazy way
[20:56:58] <Tv_> which is the endemic of the webshit
[20:57:16] <Tv_> nobody writes things *intended to be good libraries*, they write things to get from point A to point B and everything else be damned
[20:58:00] <Tv_> s/is the/is/
[21:05:56] <A_Dragon> I will say that I continue to find map iteration order irksome
[21:06:04] <Tv_> good!
[21:06:04] *** Quits: revolve (~u0_a227@82-132-245-13.dab.02.net) (Read error: Connection reset by peer)
[21:06:09] <Tv_> don't rely on it
[21:06:16] <A_Dragon> I'd honestly prefer "its not promised to be any way" but consistent *sometimes* anyway
[21:06:20] <A_Dragon> oh I dont rely on it
[21:06:26] <Tv_> sounds like you do, though
[21:06:32] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[21:06:45] <A_Dragon> I just get annoyed when working with it for some things (generally reading shit in a debugger) and finding my keys in wild ordering that can change
[21:07:01] <A_Dragon> I'd like an insertion order but meh
[21:07:16] <A_Dragon> honestly if there was a nice keys method I wouldnt be as annoyed
[21:07:23] <Tv_> insertion order has a cost
[21:07:26] <A_Dragon> yes!
[21:07:38] <A_Dragon> so does randomising the order every iter :P though less so of one
[21:07:48] <Tv_> a better argument might be "i want go to have generics so maps can be a library, and then i can use library that implements insertion order"
[21:08:01] <tuskkk____> Hello, have a very strange scenario, I am validating some images using the http client - fire the HEAD call and check if the header is one of png, jpeg etc. For one of the URLs, locally the validation works, but on one of my servers, a png image is being detected as text/html
[21:08:01] <Tv_> A_Dragon: starting at a random bucket is a very tiny cost
[21:08:10] <tuskkk____> from postman, I see its png as well
[21:08:12] <A_Dragon> couldnt be a lib, cant implement accessors in a struct
[21:08:18] <tuskkk____> how should I probe this?
[21:08:37] <A_Dragon> tuskkk____: your server will be sending what its told, it wont magically guess what the filetype is*
[21:08:37] <Tv_> A_Dragon: sure, it'd look like m.Get
[21:08:46] <A_Dragon> Tv_: which is awful ux.
[21:08:53] * Tv_ glances at rust
[21:08:56] <A_Dragon> compared to m[key]
[21:09:01] <tuskkk____> A_Dragon: what do you mean?
[21:09:40] <A_Dragon> tuskkk____: headers dont detect types, they're set to whatever. So, something is sending text/html rather than image/png
[21:09:59] <A_Dragon> Tv_: using rust as an example is a bit silly :P
[21:10:03] <A_Dragon> but yes I get your point
[21:10:11] <tuskkk____> A_Dragon: like for example what?
[21:10:14] <A_Dragon> honestly I wouldnt mind [] being sugar
[21:10:24] <tuskkk____> and why not using postman or from local copy
[21:10:28] <A_Dragon> tuskkk____: ...whatever is sending the data
[21:10:44] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:10:52] <Tv_> A_Dragon: rust is an example of a seemingly popular language where map looks like m.insert(k, v) etc
[21:11:03] <A_Dragon> theres like five million different reasons for what you have descibed, unless you're *setting* the header yourself and for some reason the behaviour is different
[21:11:21] <A_Dragon> Tv_: yes, but thats just annoying when it could easily be a tiny bit of sugar
[21:11:24] *** Joins: fef (~thedawn@user/thedawn)
[21:11:45] <Tv_> tuskkk____: what's you "validation", are you checking the content-type header, are you looking at the body and guessing filetype from that, etc.
[21:11:58] <A_Dragon> ^ yes this is what I should have asked
[21:12:11] <Tv_> A_Dragon: yes. and giving libraries that tiny bit of sugar (defining operators) is a big headache.
[21:12:38] <A_Dragon> Tv_: yes but I (personally) think it'd be nice. I know it gos against gos intent and the wider community
[21:12:46] <Tv_> witness a python library that defines the division operator to be file path join
[21:12:57] <A_Dragon> hey I like pathlib :P
[21:13:13] <A_Dragon> just remember, in scala, you can use *anything* as an operator
[21:13:22] <A_Dragon> including as infix operators
[21:13:35] <A_Dragon> someList map x => x.y
[21:13:47] *** Joins: revolve (~u0_a227@82-132-245-13.dab.02.net)
[21:14:03] <A_Dragon> someList `some operator with spaces in it` someOtherList
[21:14:12] <tuskkk____> Tv_: no, its just a HEAD call, just checking the content type header
[21:14:20] <A_Dragon> but thats just convention for how calling is done, the inverse is true too, 1.+(2)
[21:14:21] *** Quits: _sysh (~sysh@212.237.182.120) (Remote host closed the connection)
[21:14:41] <A_Dragon> tuskkk____: then as I sad, wherever you're getting your header is setting it to that
[21:14:43] <fizzie> The new (well, it was new not so long ago) C++ filesystem library defines the / and + operators as two slightly different ways of joining paths. (One ensures a directory separator between the elements, the other doesn't.)
[21:14:58] <A_Dragon> its not magically set based on the file
[21:15:06] <A_Dragon> if you want to verify a file is as expected, check for magic numbers
[21:15:10] <A_Dragon> fizzie: ew.
[21:15:19] <Tv_> tuskkk____: and you're saying your server gives a different content-type than what you expected
[21:15:35] <Tv_> tuskkk____: next question, are you telling your server the content-type, or are you making it guess
[21:15:56] <Tv_> A_Dragon: fwiw that came from haskell
[21:16:04] <Tv_> A_Dragon: and has lead to horrors
[21:16:07] <A_Dragon> Tv_: which one?
[21:16:11] <A_Dragon> + vs /?
[21:16:20] <A_Dragon> or the way scala does methods?
[21:16:31] <Tv_> A_Dragon: anything `can_be_an_operator` ugh
[21:16:36] <A_Dragon> yes
[21:16:38] <A_Dragon> its a giant footgun
[21:16:47] <A_Dragon> its wonderful, but easily abused
[21:17:00] <A_Dragon> scala already makes me write giant oneliners :D
[21:17:09] <Tv_> and the idea of custom operators leads to spaceships
[21:17:22] <A_Dragon> but I wouldnt _mind_ some sort of tightly controlled method to allowing go structs to have some kind of operator
[21:17:38] <A_Dragon> even if only indexing
[21:17:51] <tuskkk____> Tv_: the request is just this,
[21:17:52] <tuskkk____> ```
[21:17:52] <tuskkk____>                 req, _ := http.NewRequest("HEAD", url, nil)
[21:17:52] <tuskkk____> 		req = req.WithContext(ctx)
[21:17:52] <tuskkk____> 		resp, err := client.Do(req)
[21:17:52] <tuskkk____> ```
[21:18:01] <Tv_> tuskkk____: i asked about the server
[21:18:03] <A_Dragon> tuskkk____: we need to know about the server
[21:18:20] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[21:18:26] <tuskkk____> oh its a pod running somewhere I don't have access to, nor I know much about it
[21:18:31] <A_Dragon> Tv_: idk its a weird slippery slope that can end with all sorts of silliness
[21:18:36] <A_Dragon> tuskkk____: then dont assume content type is okay
[21:18:42] <A_Dragon> download the file and check for magic numbers
[21:18:48] <A_Dragon> not that those promise a file is valid either
[21:18:58] <Tv_> tuskkk____: so you're asking us to explain its behavior of a black box you don't know anything about?
[21:19:40] <tuskkk____> not really, bewildered by this
[21:19:41] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[21:19:46] <A_Dragon> why?
[21:19:49] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[21:19:50] <tuskkk____> say I got access to this pod, what should I do
[21:19:56] <A_Dragon> we have no idea
[21:20:05] <A_Dragon> we dont even know what HTTP server its running
[21:20:15] <A_Dragon> the answer is "content-type isnt a promise, its a maybe"
[21:20:26] <tuskkk____> I see
[21:20:44] <Tv_> ehh it was meant to be a promise
[21:20:45] <A_Dragon> because your png could quite easily be sent as application/octet or whatever "its just binary data"
[21:20:55] <A_Dragon> it was but in practice almost never is
[21:20:55] <Tv_> it's just that the server is likely looking at the beginning of the file and guessing, and gets it wrong
[21:21:01] <A_Dragon> ^
[21:21:06] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:21:06] <ikke> nginx for example has a list of extensions and maps content-type based on that
[21:21:11] <A_Dragon> or has been configured to just always say text/http
[21:21:17] <tuskkk____> wow, but then how come its not doing that locally?
[21:21:21] <tuskkk____> or via postman
[21:21:25] <ikke> what is not?
[21:21:26] <Tv_> tuskkk____: doing *what* locally
[21:21:41] <tuskkk____> sending out the error, `content-type not supported: text/html `
[21:21:42] <Tv_> tuskkk____: are you asking why program A and program B behave differently, when they have nothing in common?
[21:21:52] <A_Dragon> ^
[21:22:04] <tuskkk____> program A is the exact copy of program B, just running in different places
[21:22:12] <A_Dragon> or why two instances of program A behave differently when you cant see the configs for one?
[21:22:18] <Tv_> 10:48 <tuskkk____> oh its a pod running somewhere I don't have access to, nor I know much about it
[21:22:19] <A_Dragon> tuskkk____: content-type comes from the SERVER
[21:22:23] <A_Dragon> not the client
[21:22:49] <tuskkk____> wait, so from the server where this image is hosted right?
[21:22:56] <ikke> yes
[21:22:59] <A_Dragon> yes
[21:23:00] <ikke> It's a server header
[21:23:08] <Tv_> what *other* servers are involved?
[21:23:23] <tuskkk____> and when I run program A locally, it calls the same server where image is hosted, this time it gets the correct header
[21:23:25] <A_Dragon> its a note from the server to you that says "this might be this", or originally, it was supposed to be "this is what this is"
[21:23:43] <A_Dragon> tuskkk____: reasons, dragons, cookies, mars is in retrograde, we dont know :D
[21:24:01] <eric_hill> dragons?
[21:24:08] <A_Dragon> dragons, :P
[21:24:13] <tuskkk____> let this be a mystery then :)
[21:24:37] <A_Dragon> your answer tuskkk____ is pretty much "dont rely on content-type if you want to verify stuff"
[21:24:57] <A_Dragon> as I said if you want to truly verify what it is, download it and check magic numbers
[21:25:05] <A_Dragon> and even that isnt a promise
[21:25:23] <tuskkk____> well, this is more like a pre validator, actual validation also downloads and checks it
[21:25:26] <Tv_> it's very much not a promise
[21:25:34] <tuskkk____> call it a filter
[21:25:40] <Tv_> but the browser content guessing algo is standardized, if you want to guess the same way a browser would
[21:25:42] <A_Dragon> even content-length isnt a promise
[21:25:55] <A_Dragon> (though it really ought to be)
[21:26:37] <Tv_> A_Dragon: eh short body is an error and a long body will be read as the next response; content-length *is* a promise
[21:26:58] <tuskkk____> I just wish the behaviour was consistent though
[21:27:02] <A_Dragon> yeah okay I should better say, content-length being there, isnt a promise
[21:27:11] <A_Dragon> if its there use it, otherwise here be (not this) dragons
[21:27:16] <Tv_> tuskkk____: you still haven't actually managed to describe the whole system
[21:27:20] <Tv_> tuskkk____: we don't know what's happening
[21:27:52] <Tv_> last i looked, you claimed *the same software* run locally vs in a k8s pod, behaves differently
[21:28:20] <Tv_> that sounds less likely, and there's likely some difference in either the software setup, or how you're observing it
[21:28:22] <tuskkk____> Tv_: if this helps, this is the piece of code with the dual behavior, https://play.golang.org/p/T-HlM3ivYCK
[21:28:28] <Tv_> but we won't know until you describe the whole thing
[21:28:42] <A_Dragon> tuskkk____: this is client code
[21:28:46] <A_Dragon> we need to know about the server
[21:28:47] <Tv_> tuskkk____: we're asking you questions about the server only
[21:28:54] <A_Dragon> the client is doing exactly what you told it to
[21:28:58] <A_Dragon> its behaving correctly
[21:29:04] <tuskkk____> I agree
[21:29:29] <tuskkk____> server is kubernetes cluster hosted on GCP, where one of the workloads is running this code
[21:29:48] <tuskkk____> or you mean the server where image is hosted?
[21:30:00] <A_Dragon> what httpd
[21:30:02] <A_Dragon> is in use?
[21:30:14] <tuskkk____> what is httpd?
[21:30:34] <A_Dragon> http server
[21:30:36] <A_Dragon> the daemon in use
[21:31:37] <tuskkk____> I know its based on an alpine image
[21:31:48] <A_Dragon> this.... tells me nothing
[21:31:55] <tuskkk____> don't know on top of my head about the deamon
[21:31:56] <A_Dragon> you could install anything on alpine
[21:32:17] <tuskkk____> true
[21:32:48] <tuskkk____> I think I will give up here. Thanks a lot for you time and effort in answering me!
[21:34:19] <A_Dragon> good luck with your testing!
[21:38:52] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[21:43:41] *** Joins: aerona (~aerona@2600:6c54:4600:f300:d46d:5152:c0fc:6ad9)
[21:43:53] *** Quits: mrniranjan (~mniranja@103.208.71.44) (Ping timeout: 252 seconds)
[21:44:21] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[21:48:27] *** Quits: gggp (~gggp@125.33.89.68) (Read error: Connection reset by peer)
[21:56:40] *** Joins: Torr (~Torr@user/torr)
[21:58:22] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[21:59:40] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Excess Flood)
[22:00:03] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[22:06:14] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 265 seconds)
[22:14:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[22:15:34] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[22:24:23] *** Joins: xsteadfastx (~marv@94.31.101.21)
[22:30:21] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:32:51] *** Joins: embik (~embik@user/embik)
[22:36:33] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[22:36:52] *** Joins: independent56 (~independe@2.25.26.77)
[22:39:33] *** Quits: independent56 (~independe@2.25.26.77) (Remote host closed the connection)
[22:39:52] *** Joins: independent56 (~independe@2.25.26.77)
[22:43:47] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Quit: Gateway shutdown)
[22:44:03] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[22:44:44] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[22:46:53] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[22:48:12] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[22:48:26] *** Joins: rbn (~rbn@sferic.eu)
[22:48:27] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[22:49:46] *** Quits: embik (~embik@user/embik) (Ping timeout: 240 seconds)
[22:53:07] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Ping timeout: 246 seconds)
[22:53:21] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[22:54:56] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[22:59:21] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[23:03:33] *** Joins: oxum (~oxum@106.203.221.241)
[23:03:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:04:21] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:06:48] *** Quits: raktajino (~raktajino@callisto.raktajino.club) (Quit: WeeChat 2.4)
[23:07:40] *** Joins: raktajino (~raktajino@callisto.raktajino.club)
[23:08:48] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[23:12:34] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:13:37] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:13:47] *** Quits: justache (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[23:14:30] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:15:16] *** Joins: justache (~justache@user/justache)
[23:15:18] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 252 seconds)
[23:16:44] *** Quits: xsteadfastx (~marv@94.31.101.21) (Ping timeout: 258 seconds)
[23:17:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:19:30] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:24:13] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (Remote host closed the connection)
[23:24:30] *** Joins: loosh (~jason@vultr.bastion.pnj1.us.zj.is)
[23:24:48] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (Remote host closed the connection)
[23:25:04] *** Joins: loosh (~jason@vultr.bastion.pnj1.us.zj.is)
[23:26:40] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[23:26:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:27:25] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:28:37] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[23:28:51] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[23:28:55] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:29:49] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 268 seconds)
[23:30:38] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[23:31:46] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:32:25] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:37:31] *** Quits: foobaz212 (~foobaz212@82.33.219.124) (Quit: Client closed)
[23:37:46] *** Joins: foobaz212 (~foobaz212@82.33.219.124)
[23:37:52] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:40:41] *** Joins: embik (~embik@user/embik)
[23:40:46] *** Joins: goldfish (~goldfish@user/goldfish)
[23:44:28] *** Joins: pepee (~user@user/pepee)
[23:45:52] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 258 seconds)
[23:46:19] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:46:58] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[23:47:38] *** Quits: embik (~embik@user/embik) (Quit: WeeChat 3.2)
[23:48:00] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:57:19] *** Quits: zutt (~zutt@user/zutt) (Read error: Connection reset by peer)
