[00:00:25] *** Quits: Cork[m] (~corkmatri@2001:470:69fc:105::3458) (Read error: Connection reset by peer)
[00:00:25] *** Quits: repo[m] (~repo@user/repo) (Read error: Connection reset by peer)
[00:00:26] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (Read error: Connection reset by peer)
[00:00:26] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Read error: Connection reset by peer)
[00:00:26] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (Read error: Connection reset by peer)
[00:00:26] *** Quits: kadoban (~kadoban@user/kadoban) (Write error: Connection reset by peer)
[00:00:28] *** Quits: nicoty[m] (~nicoty@user/nicoty) (Read error: Connection reset by peer)
[00:00:28] *** Quits: seabass (~seabassfo@2001:470:69fc:105::187) (Read error: Connection reset by peer)
[00:00:29] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (Read error: Connection reset by peer)
[00:00:29] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (Read error: Connection reset by peer)
[00:03:02] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[00:03:28] *** Joins: pavonia (~user@user/siracusa)
[00:04:05] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[00:05:20] *** Quits: Guest6174 (~mogad0n@2a03:4000:53:64::) (Ping timeout: 272 seconds)
[00:05:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 245 seconds)
[00:06:09] *** Joins: Guest6174 (~mogad0n@user/mogad0n)
[00:06:31] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[00:07:54] *** Joins: Northwoods (~Northwood@2409:4055:2e1a:afc7:38b7:f9a0:6ace:621b)
[00:08:03] <jaawerth> I haven't yet gotten around to swapping out CoC for nvim-lsp yet (just laziness), but I'll let you know when I do. as for tree-sitter, that should be pretty easy to set up via their official helper plugin
[00:08:22] <jaawerth> well, it depends on what you want to do with it
[00:08:28] <jaawerth> the basic stuff is very easy to set up
[00:08:57] *** Joins: summersault (~summersau@179.221.251.16)
[00:11:08] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 256 seconds)
[00:13:06] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:14:26] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 250 seconds)
[00:15:01] <jaawerth> ashnur: ^ (forgot I was joining the convo late)
[00:15:59] <ashnur> easy for someone in the knows
[00:16:14] <ashnur> in my experience, you can do 1 out of 3
[00:17:40] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca)
[00:22:59] <jaawerth> 1 out of 3 what?
[00:24:55] <jaawerth> tree-sitter can get pretty complicated if you want to do fancy stuff. but for the core features it was just a matter of using the small boilerplate in the nvim-treesitter readme to get things up and running, then installing a TS-friendly syntax theme so it takes advantage of the better highlighting
[00:30:08] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[00:32:54] *** Joins: nuncanada (~dude@179.235.162.215)
[00:32:55] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[00:33:04] *** Quits: nuncanada (~dude@179.235.162.215) (Remote host closed the connection)
[00:35:31] <ashnur> either frontend and you go typescript, or node.js or vanilla js for libraries, but if you want to switch, half of your dev env needs to switch, can't use same eslint etc.
[00:39:37] <onosendi> How do you use refs for dynamic form inputs? This should illustrate what I mean: https://dpaste.org/ONEU
[00:39:52] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:40:47] <entuland> onosendi, you don't need to stash all the info in the same param
[00:41:27] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[00:41:56] <onosendi> entuland: name={`price-${item-id}`} ?
[00:42:22] <entuland> yeah thinking about that again, it's good to have the IDs there to differentiate the names as you may have more, ignore that
[00:42:33] <entuland> not sure I get the question though
[00:42:39] <onosendi> Yeah, they need to be unique for the backend.
[00:42:40] <entuland> isn't that code doing what you want?
[00:42:57] <onosendi> entuland: the see the comments in `handleChange`
[00:43:37] <onosendi> Is this something where I don't use refs, and would resort to `querySelector` on the `name` prop?
[00:44:06] <entuland> you can get the value out of the target element
[00:44:07] *** Joins: summersault (~summersau@179.221.251.16)
[00:44:14] <entuland> no need to query again
[00:44:34] *** Quits: federico_it (~textual@151.51.82.235) (Ping timeout: 256 seconds)
[00:44:45] <onosendi> entuland: if `quantity` triggers `handleChange`, the target for `price` isn't available on that event.
[00:45:08] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:09] <entuland> oh, so you want to get _both_ when _either_ changes
[00:45:20] <onosendi> Indeed.
[00:45:20] *** Quits: l__q (~modinfo@user/modinfo) (Quit: interet cut off, write me memo! it will be send to my mail!)
[00:45:21] <entuland> yes, you'll need a lookup if you're not keeping references anywhere
[00:46:06] <onosendi> 'if you're not using references' - is it possible to use refs here?
[00:46:53] *** Joins: lf94 (~lf94@178.128.239.88)
[00:47:10] <entuland> not building the markup like that, no, unless you query and add such references beforehand, so that the change handlers find the references pre-set
[00:47:15] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[00:47:18] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[00:47:47] <entuland> if you create the elements separately and append them, you'd get the references which you can store in the context of the handler itself
[00:49:02] <entuland> no idea how you'd do that in... is that react?
[00:49:26] <onosendi> Ah, yes, I guess I could `createElement`.
[00:49:48] <entuland> yep, if you create the elements you can keep references without any lookup
[00:52:03] *** Joins: federico_it (~textual@151.51.82.235)
[00:54:16] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:55:08] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[00:56:13] <onosendi> https://dpaste.org/q49G - I think this is what I needed.
[00:58:42] *** Joins: Northwoods_ (~Northwood@223.130.30.165)
[01:00:15] *** Joins: gggpkm (~gggpkm@123.113.189.194)
[01:02:01] *** Quits: Northwoods (~Northwood@2409:4055:2e1a:afc7:38b7:f9a0:6ace:621b) (Ping timeout: 246 seconds)
[01:02:06] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[01:02:19] <onosendi> entuland: thanks for your help
[01:04:47] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[01:06:42] *** Quits: FabioP (~fabio@151.15.203.143) (Read error: Connection reset by peer)
[01:07:55] <entuland> yw
[01:09:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 276 seconds)
[01:09:56] *** Quits: aexijh (~aexijh@bras-vprn-unvlon5573w-lp130-07-174-93-47-157.dsl.bell.ca) (Ping timeout: 272 seconds)
[01:10:29] *** Joins: aexijh (~aexijh@bras-vprn-unvlon5573w-lp130-07-174-93-47-157.dsl.bell.ca)
[01:10:48] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[01:11:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[01:13:11] <jaawerth> ashnur: well, for eslint what you'd typically do is have a shared base-config and then a frontend-specific one that extends and overrides it
[01:13:28] *** Quits: gggpkm (~gggpkm@123.113.189.194) (Ping timeout: 256 seconds)
[01:13:50] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[01:14:40] <jaawerth> e.g. eslint-config-airbnb extends eslint-config-airbnb-base and throws in all the react stuff
[01:15:03] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[01:15:19] <jaawerth> not sure what that has to do with tree-sitter though, it's not something you'd share a team/project config for
[01:15:48] <jaawerth> ohh "half your dev env needs to switch" not "half your devs"
[01:16:07] <jaawerth> still, the extension thing applies, and tree-sitter should more or less Just Work if you've got the parsers installed for the languages you want to use it with
[01:16:21] <jaawerth> anyway, I'll stop since this is more for #neovim
[01:16:59] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[01:18:31] *** Quits: mearp (~mearp@154.13.1.102) (Quit: leaving)
[01:19:08] <graingert> Where is the nodeback API defined?
[01:19:13] <graingert> Eg error then value
[01:19:47] *** Joins: paule32 (~paule32@user/paule32)
[01:19:47] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[01:21:15] *** Quits: prometh (uid425119@id-425119.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:22:08] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[01:23:49] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[01:23:49] *** Joins: Kamui (~kamui-ren@2001:470:69fc:105::f74)
[01:23:49] *** Joins: repo[m] (~repo@user/repo)
[01:23:49] *** Joins: seabass (~seabassfo@2001:470:69fc:105::187)
[01:23:49] *** Joins: nicoty[m] (~nicoty@user/nicoty)
[01:23:50] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[01:23:50] *** Joins: kadoban (~kadoban@user/kadoban)
[01:23:50] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[01:24:01] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[01:24:02] *** Joins: Cork[m] (~corkmatri@2001:470:69fc:105::3458)
[01:24:48] *** Joins: gggpkm_ (~gggpkm@221.219.74.140)
[01:27:13] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 246 seconds)
[01:28:34] *** Joins: skunk (~skunk@pool-70-104-163-4.norf.east.verizon.net)
[01:29:56] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[01:32:38] *** Quits: skunk (~skunk@pool-70-104-163-4.norf.east.verizon.net) (Client Quit)
[01:33:00] *** Quits: Drgonz0 (Drgonz0@107-179-254-222.cpe.teksavvy.com) ()
[01:33:17] *** Joins: Drgonz0 (Drgonz0@107-179-254-222.cpe.teksavvy.com)
[01:36:55] *** Joins: summersault (~summersau@179.221.251.16)
[01:36:56] *** Quits: eXistenZ (~biskit@bzq-79-182-134-28.red.bezeqint.net) (Quit: Leaving)
[01:41:07] *** Joins: tazle (tazle@kapsi.fi)
[01:41:13] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 246 seconds)
[01:43:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[01:44:15] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:45:59] *** Joins: Naan (~naan@user/naan)
[01:53:32] *** Joins: summersault (~summersau@179.221.251.16)
[01:54:40] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[01:54:50] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[01:56:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 272 seconds)
[01:56:38] *** Quits: Akimb (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[01:59:24] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 255 seconds)
[02:03:51] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[02:05:15] *** Quits: chonkbit (~chonkbit@2600:1700:2150:1d40:86c5:a6ff:fe3b:ae7a) (Ping timeout: 255 seconds)
[02:05:34] *** Quits: federico_it (~textual@151.51.82.235) (Quit: Textual IRC Client: www.textualapp.com)
[02:06:10] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 256 seconds)
[02:06:46] <hassoon> "evening
[02:08:53] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:4481:3282:6da6:9a8e) (Quit: Textual IRC Client: www.textualapp.com)
[02:11:06] <onosendi> Is there a throwaway variable for deconstructing, like: https://dpaste.org/C4br
[02:11:51] <sheetjs> n> const [,y] = [1,2]; y
[02:11:51] <jellobot> (okay) 2
[02:12:27] <sheetjs> onosendi: no throwaway required in JS
[02:12:46] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[02:13:01] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[02:13:36] <onosendi> Ah
[02:14:28] *** Quits: Northwoods_ (~Northwood@223.130.30.165) (Ping timeout: 246 seconds)
[02:14:40] <sheetjs> n> [,2]
[02:14:41] <jellobot> (okay) [ <1 empty item>, 2 ]
[02:14:48] <sheetjs> that's just an array where the second element is 2
[02:15:38] <onosendi> n> [,2,]
[02:15:39] <jellobot> (okay) [ <1 empty item>, 2 ]
[02:16:18] <sheetjs> need an additional comma
[02:16:21] <sheetjs> n> [,2,,]
[02:16:22] <jellobot> (okay) [ <1 empty item>, 2, <1 empty item> ]
[02:16:44] <onosendi> n> const [, two,,four] = ['one', 'two', 'three', 'four']; four
[02:16:45] <sheetjs> (the comma after the last element is optional)
[02:16:45] <jellobot> (okay) 'four'
[02:16:58] <onosendi> Ah, got it. Thanks.
[02:18:51] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[02:20:07] *** Quits: gggpkm_ (~gggpkm@221.219.74.140) (Ping timeout: 245 seconds)
[02:20:18] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[02:23:13] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 246 seconds)
[02:25:40] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[02:25:58] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[02:27:56] * banana_ planks
[02:29:49] *** Joins: fbandov_ (~fbandov@2a02:8109:b6c0:ae7c:344d:6fd0:16d0:3b4a)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:07] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[02:30:27] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:48] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 255 seconds)
[02:32:58] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca) (Ping timeout: 268 seconds)
[02:35:35] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[02:37:06] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[02:38:37] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[02:40:20] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[02:41:53] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Client Quit)
[02:45:09] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[02:46:20] *** Joins: summersault (~summersau@179.221.251.16)
[02:47:49] *** Joins: kid_goth (~kid_goth@dynamic-190-24-59-79.dynamic.etb.net.co)
[02:49:17] *** Quits: xisop_ (~xisop@138.68.233.232) (Ping timeout: 245 seconds)
[02:49:21] *** Joins: entuland (~entuland@user/entuland)
[02:50:48] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[02:51:05] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:51:27] *** Joins: thiras (~thiras@user/thiras)
[02:53:19] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 246 seconds)
[02:53:45] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[02:57:36] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[02:59:15] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Ping timeout: 255 seconds)
[03:02:06] *** Joins: jazzy (~jaziz@2600:380:c114:2d85:8093:7182:dd7:1044)
[03:05:31] *** Quits: fbandov_ (~fbandov@2a02:8109:b6c0:ae7c:344d:6fd0:16d0:3b4a) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:05:40] *** Quits: enoq (~enoq@194-208-146-143.lampert.tv) (Quit: enoq)
[03:06:09] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[03:09:06] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[03:09:31] *** Joins: ferdna (~ferdna@user/ferdna)
[03:11:22] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[03:11:58] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[03:12:36] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 244 seconds)
[03:12:48] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[03:12:57] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[03:13:09] *** Joins: summersault (~summersau@179.221.251.16)
[03:15:20] *** Joins: de-facto (~de-facto@user/de-facto)
[03:15:44] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[03:15:51] *** Joins: l__q (~modinfo@user/modinfo)
[03:15:52] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[03:16:36] *** Joins: de-facto (~de-facto@user/de-facto)
[03:16:42] <l__q> Can you advise what I can make better in my small library? https://github.com/skorotkiewicz/SimHok I now change from class to functions
[03:17:02] *** Joins: pavonia_ (~user@user/siracusa)
[03:17:50] <ljharb> l__q: tbh i'd say, make separate packages
[03:17:57] <ljharb> a big bag of things like lodash is passe
[03:18:16] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 272 seconds)
[03:18:19] *** pavonia_ is now known as pavonia
[03:18:59] <l__q> ljharb: seperate pacage for log()?
[03:19:11] <l__q> it only console.log()
[03:19:36] *** ross_ is now known as ross
[03:19:49] <ljharb> then why does it need to exist, since console.log does
[03:20:09] <l__q> simplicity :P
[03:20:39] <l__q> like abs(), it toggles positive and negatives numbers
[03:21:11] <ljharb> Math.abs exists tho
[03:21:12] <l__q> but doing im right with exports my functions?
[03:21:15] <ljharb> it's not simpler to reinvent builtin functions
[03:21:26] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 272 seconds)
[03:21:42] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[03:21:56] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[03:22:19] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[03:22:48] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[03:23:37] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[03:24:59] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[03:25:00] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[03:25:00] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Remote host closed the connection)
[03:25:10] *** Joins: Trieste (T@user/pilgrim)
[03:25:18] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[03:26:28] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 252 seconds)
[03:27:07] <entuland> uh... is your abs(42) going to return -42? if so, why?
[03:27:13] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[03:27:42] <ljharb> also that ^ that'd be wrong
[03:27:45] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[03:27:48] <ljharb> abs only ever returns a positive number
[03:27:53] <ljharb> `-` is how you toggle the sign
[03:28:58] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[03:29:07] <entuland> aye, you look at the number with this specific grin `-` and the number becomes negative out of sheer fear
[03:31:10] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[03:32:22] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Quit: rewrit3)
[03:32:52] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 246 seconds)
[03:33:27] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[03:33:42] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[03:33:48] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[03:34:52] <entuland> having a split() function that doesn't do what String.split() does, and behaves as a slice() instead, is also quite confusing
[03:35:36] <wroathe> l__q: Most of these either 1. Already exist on String's prototype, or 2. Already exist in another library
[03:36:21] <wroathe> l__q: Like String.prototype.startsWith and String.prototype.endsWith, for example
[03:36:22] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 246 seconds)
[03:37:38] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 265 seconds)
[03:39:15] <jacekowski> there is worse thing, isFinite(); is different to Number.isFinite();
[03:40:00] <entuland> uhm... where is that?
[03:40:29] <jacekowski> javascript
[03:40:54] <jacekowski> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
[03:40:58] <entuland> oh I thought you meant there was a isFinite() function in the library we were discussing above
[03:41:02] <entuland> I can't see it there
[03:41:18] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 272 seconds)
[03:42:52] *** Joins: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp)
[03:42:54] *** Joins: summersault (~summersau@179.221.251.16)
[03:44:10] <entuland> doesn't look all that bad, the difference of behavior kinda makes sense there
[03:44:59] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[03:44:59] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[03:44:59] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[03:46:41] <ljharb> jacekowski: those are close tho
[03:46:57] <ljharb> jacekowski: literally the only difference is that `Number.isFinite = x => isFinite(+x)`
[03:47:53] <entuland> uh... that looks wrong to me
[03:47:56] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[03:48:28] <entuland> n> Number.isFinite("0")
[03:48:29] <jellobot> (okay) false
[03:48:54] <entuland> n> x = "0"; isFinite(+x)
[03:48:55] <jellobot> (okay) true
[03:49:31] <ljharb> hm, let me double check
[03:49:35] <ljharb> oh right sorry
[03:49:37] <entuland> the additional check that Number.isFinite() does is bailing out with false if the param isn't a number
[03:49:46] <ljharb> `isFinite = x => Number.isFinite(+x)`
[03:49:51] <ljharb> the other way around
[03:49:59] <entuland> yep, that looks good :P
[03:50:18] <ljharb> or `Number.isFinite = x => typeof x === 'number' && isFinite(x)`
[03:50:22] *** Quits: sickdyd (~sickd@FL1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 258 seconds)
[03:50:48] <entuland> yep, that's the polyfill pointed out in the docs as well
[03:51:01] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 268 seconds)
[03:53:29] *** Joins: gggpkm (~gggpkm@123.113.186.51)
[03:55:31] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[03:55:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:56:46] *** Quits: c4017w (~c4017@209.52.68.8) (Killed (NickServ (GHOST command used by c4017w_)))
[03:57:09] *** c4017w_ is now known as c4017w
[04:03:13] *** Joins: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl)
[04:04:52] *** Quits: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl) (Client Quit)
[04:05:59] *** Joins: summersault (~summersau@179.221.251.16)
[04:09:06] *** Joins: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl)
[04:11:24] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 256 seconds)
[04:12:20] *** Joins: zebrag (~chris@user/zebrag)
[04:12:36] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 276 seconds)
[04:12:44] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[04:14:35] *** Quits: jess (~jess@libera/staff/jess) ()
[04:18:44] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[04:19:00] *** Quits: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[04:21:24] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[04:22:40] *** Joins: Dorward_ (~dorward@daviddorward.plus.com)
[04:22:57] *** Quits: Dorward (~dorward@daviddorward.plus.com) (Ping timeout: 255 seconds)
[04:23:46] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[04:25:19] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[04:25:44] *** Quits: Atum__ (IRC@user/atum/x-2392232) (Quit: Atum__)
[04:26:33] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 255 seconds)
[04:28:21] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 255 seconds)
[04:28:53] *** Joins: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl)
[04:29:23] *** Joins: onosendi (~onosendi@user/onosendi)
[04:30:15] *** Joins: sickdyd (~sickd@fl1-119-239-103-161.tky.mesh.ad.jp)
[04:38:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Quit: Lost terminal)
[04:39:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:40:37] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:41:30] *** Joins: summersault (~summersau@179.221.251.16)
[04:46:18] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[04:46:59] *** Quits: toretto (~0xe3b7@user/toretto) (Ping timeout: 255 seconds)
[04:47:21] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[04:49:10] *** Joins: toretto (~0xe3b7@bras-vprn-toroon4834w-lp130-08-174-91-44-103.dsl.bell.ca)
[04:50:22] *** Quits: toretto (~0xe3b7@bras-vprn-toroon4834w-lp130-08-174-91-44-103.dsl.bell.ca) (Read error: Connection reset by peer)
[04:54:11] *** Joins: toretto (~0xe3b7@45.15.16.60)
[04:54:20] <sheetjs> n> n = Number.isFinite; [123, {valueOf:()=>123}].map(x => [n, isFinite].map(f => f(x)))
[04:54:20] <jellobot> (okay) [ [ true, true ], [ false, true ] ]
[04:59:24] *** Quits: Heraes (~Heraes@user/romarain) (Quit: Leaving)
[04:59:51] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 255 seconds)
[05:02:02] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:09:09] <Donitz> n> Array.from(5);
[05:09:09] <jellobot> (okay) []
[05:09:11] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[05:11:08] <sheetjs> n> Array.from({length: 5}) @ Donitz
[05:11:09] <jellobot> Donitz, [ undefined, undefined, undefined, undefined, undefined ]
[05:11:16] <Donitz> I know
[05:11:22] <Donitz> I just wondered if there was a shorter way
[05:11:28] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5d41:413a:9f14:e64d) (Ping timeout: 256 seconds)
[05:12:19] <sheetjs> n> Array(5)
[05:12:20] <jellobot> (okay) [ <5 empty items> ]
[05:12:29] <sheetjs> but that's not quite the same
[05:12:45] <Donitz> what does that even mean anyway
[05:12:57] <Donitz> if I say
[05:13:00] <Donitz> n> Array(500)
[05:13:01] <jellobot> (okay) [ <500 empty items> ]
[05:13:10] <Donitz> n> a = Array(500); a[499] = 1;
[05:13:11] <jellobot> (okay) 1
[05:13:14] <Donitz> is that a packed array?
[05:13:15] <sheetjs> n> Object.keys(Array(500))
[05:13:15] <jellobot> (okay) []
[05:13:25] <sheetjs> n> Object.keys(Array.from({length:5}))
[05:13:25] <jellobot> (okay) [ '0', '1', '2', '3', '4' ]
[05:13:26] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Remote host closed the connection)
[05:13:35] <sheetjs> Arrays are objects
[05:13:50] <sheetjs> it just creates an array object and sets the length to 500 or 5 or w/e
[05:14:14] <sheetjs> Array.from creates the array and sets the values of each key from 0 to length - 1
[05:15:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Remote host closed the connection)
[05:15:31] <sheetjs> n> var x = Array(); x.length = 500; x
[05:15:32] <jellobot> (okay) [ <500 empty items> ]
[05:17:00] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:20:39] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:23:51] <systemfault> n> var x = Array(); x.length = 500; x.map(x => x * 2)
[05:23:52] <jellobot> (okay) [ <500 empty items> ]
[05:23:56] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[05:29:24] *** Joins: summersault (~summersau@179.221.251.16)
[05:32:46] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 268 seconds)
[05:33:42] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 252 seconds)
[05:34:16] <Donitz> what is the shortest way to move every element in an array by one
[05:34:22] <Donitz> putting the first element last
[05:34:47] <sheetjs> n> var x = [1,2,3,4,5]; x.push(x.shift()); x
[05:34:48] <jellobot> (okay) [ 2, 3, 4, 5, 1 ]
[05:34:54] <Donitz> ah right
[05:35:00] <sheetjs> n> var x = [1,2,3,4,5]; x.unshift(x.pop()); x
[05:35:00] <jellobot> (okay) [ 5, 1, 2, 3, 4 ]
[05:35:18] <sheetjs> postscript has the right idea with roll
[05:35:49] <Donitz> yeah
[05:38:03] <sheetjs> n> Array.prototype.roll = function(n, dir) { if(dir > 0) this.push(this.shift()); else if(dir < 0) this.unshift(this.pop()); return n <= 0 ? this : this.roll(n-1, dir); }; [1,2,3,4,5].roll(2,-1)
[05:38:04] <jellobot> (okay) [ 3, 4, 5, 1, 2 ]
[05:43:12] *** Joins: Celeo (~Celeo@user/celeo)
[05:44:51] *** Joins: toretto_ (~0xe3b7@ca1-1.azirevpn.net)
[05:44:56] <ashnur> move?
[05:45:03] <ashnur> where?
[05:45:53] <ljharb> Donitz: `arr.slice(-1).concat(arr.slice(0, -1))`
[05:46:35] *** Joins: summersault (~summersau@179.221.251.16)
[05:47:27] *** Quits: toretto_ (~0xe3b7@ca1-1.azirevpn.net) (Client Quit)
[05:47:39] *** Quits: toretto (~0xe3b7@45.15.16.60) (Ping timeout: 265 seconds)
[05:48:23] *** xisop is now known as tyrion
[05:49:07] *** Joins: Dev0n (~Dev0n@user/dev0n)
[05:49:40] <bambanxx> any tutorial of promises and observables for really beginners? like when you teach your kid
[05:50:00] *** tyrion is now known as xisop
[05:51:17] <ashnur> observables, no
[05:51:56] <ashnur> promises maybe, i don't have a kid, how old should I imagine the "kid" is? :D
[05:55:02] *** Parts: xisop (~xisop@bnull.net) ()
[05:57:35] <ljharb> !promises intro @ bambanxx
[05:57:35] <jellobot> bambanxx, Promises are placeholders for values that'll be provided in the future. They allow composing asynchronous operations like synchronous ones. See http://robotlolita.me/2015/11/15/how-do-promises-work.html and https://blog.domenic.me/youre-missing-the-point-of-promises/. Contrast with !cps & see https://bevacqua.github.io/promisees/. Another guide: http://www.javascriptkit.com/javatutors/javascriptpromises.shtml
[05:58:38] <bambanxx> thanks ljharb
[05:58:50] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[05:59:08] *** Joins: xisop (~xisop@bnull.net)
[06:08:14] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[06:08:59] <rustyshackleford> any best practices with index files?
[06:09:14] <rustyshackleford> er well, I have a project and I've been using one function per file
[06:09:47] <rustyshackleford> it makes for super easy mocks in unit tests, and prevents any one file from getting too huge. scales well
[06:10:06] <rustyshackleford> but now the importing between all of the different files is kind of annoying
[06:16:21] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 255 seconds)
[06:17:15] *** Joins: onosendi (~onosendi@user/onosendi)
[06:21:07] *** Joins: kmh_ (~kmh@p200300df5f08b90090b8c32c2ae74bf4.dip0.t-ipconnect.de)
[06:21:13] <ljharb> rustyshackleford: how is it annoying
[06:21:23] <ljharb> each file grabbing only precisely what it needs is great
[06:21:35] *** Quits: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[06:21:54] <ljharb> when you say "index files", i think you mean "manifest" or "barrel" exports files - all that does is make your program slower/bundle larger, and force you to use treeshaking to only *mostly* recover the lost size
[06:21:56] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 272 seconds)
[06:22:07] <rustyshackleford> I guess I'm trying to do something like a recursive export
[06:22:14] <ashnur> what
[06:22:18] <rustyshackleford> but yeah... maybe that's not a great idea
[06:22:25] <ashnur> how would that work
[06:22:49] <rustyshackleford> foo/bar/somefile.js
[06:22:50] *** Quits: kmh (~kmh@p200300df5f0f420090b8c32c2ae74bf4.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[06:23:09] <rustyshackleford> and there would be a foo/index.js that exported stuff from all of the subdirectories
[06:23:21] <rustyshackleford> but this is seeming like a stupid idea as I type it out
[06:24:30] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:26:40] *** Joins: Rockwood (~Rocky@user/rocky)
[06:27:17] <ljharb> rustyshackleford: right, it's not a good idea
[06:27:25] <ashnur> automatic namespacing is a self-defeating concept to me, only reason i ever do similar stuff is when i just want some huge list of modules loaded indiscriminately, but that's importing, not exporting
[06:27:37] <ljharb> rustyshackleford: it's relatively common, and people's usual justification is "treeshaking", but that can never 100% remove the bloat you just added
[06:28:15] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 265 seconds)
[06:28:17] <rustyshackleford> I better google treeshaking
[06:29:11] <rustyshackleford> ljharb: I feel like its sort of a common pattern
[06:29:20] <ljharb> rustyshackleford: it's a way for bundlers to *try* and guess which code isn't used, and delete it
[06:29:21] <rustyshackleford> especially in scaffolding type of tools
[06:29:25] <ljharb> rustyshackleford: it is common. but that doesn't mean it's good.
[06:29:48] <ashnur> it's not a convention :D
[06:29:51] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:30:07] <ashnur> because ljharb doesn't convene :D sorry, i couldn't not say it
[06:30:10] <rustyshackleford> google create-index
[06:30:30] <rustyshackleford> considered using this for a second by I'm reconsidering
[06:30:34] <ljharb> ashnur: clearly you missed out on your ticket to ljharbcon
[06:30:45] <ashnur> :(
[06:30:53] <rustyshackleford> sorry sir, you're not on the list
[06:30:57] <ljharb> rustyshackleford: definitely do not make a single file that completely destroys many of the benefits of having things in separate files.
[06:30:59] <ashnur> maybe next time?
[06:32:20] <Rockwood> o/
[06:32:42] <ashnur> anyway, rustyshackleford, when would someone benefit from this? like importing everything at once?
[06:32:44] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[06:33:02] <rustyshackleford> ashnur: so I built a bunch of parts
[06:33:13] <rustyshackleford> and there's a layer that consumes/orchestrates these parts
[06:33:24] *** Joins: onosendi (~onosendi@user/onosendi)
[06:33:28] <rustyshackleford> and so I want to import a bunch of them basically
[06:35:20] <ashnur> yeah, so the thing that is responsible for the group should import them once and export them together
[06:35:27] <ashnur> my2cents
[06:37:37] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 245 seconds)
[06:41:31] <DPA> I just realized that I don't need JS to write games. CSS and HTML are often strong enough. Here is some tic-tac-toe I just wrote without any JS: https://dpa.li/tic-tac-toe.html
[06:44:10] <ashnur> how does that compare to d2r?
[06:47:49] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[06:48:19] <DPA> Well, I can only do stateful/logic and puzzle games (myst like stuff) like this. But that's the only really good stuff anyway.
[06:57:30] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[06:58:05] *** Joins: LSD (~LSD@2.lsd.systems)
[06:58:39] *** Joins: summersault (~summersau@179.221.251.16)
[07:01:31] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:02:04] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[07:06:17] *** Joins: onosendi (~onosendi@user/onosendi)
[07:09:48] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[07:12:23] *** Quits: gggpkm (~gggpkm@123.113.186.51) (Ping timeout: 258 seconds)
[07:12:56] *** Joins: Rockwood_ (~Rocky@user/rocky)
[07:13:18] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[07:13:31] *** Quits: bin4ry (~bin4ry@128.199.135.148) (Quit: The Lounge - https://thelounge.chat)
[07:14:37] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:15:59] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[07:16:12] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 255 seconds)
[07:17:11] *** Joins: bin4ry (~bin4ry@128.199.135.148)
[07:18:14] *** Quits: bin4ry (~bin4ry@128.199.135.148) (Client Quit)
[07:18:58] *** Joins: bin4ry (~bin4ry@128.199.135.148)
[07:19:27] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Ping timeout: 268 seconds)
[07:22:21] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 258 seconds)
[07:31:10] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 268 seconds)
[07:31:56] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 258 seconds)
[07:32:51] *** Quits: jazzy (~jaziz@2600:380:c114:2d85:8093:7182:dd7:1044) (Ping timeout: 255 seconds)
[07:34:39] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:39:09] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[07:39:11] *** Joins: howdoi (uid224@id-224.tooting.irccloud.com)
[07:47:00] *** Rockwood_ is now known as Rockwood
[07:47:18] *** Joins: summersault (~summersau@179.221.251.16)
[07:50:40] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[07:53:19] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[08:12:19] *** LSD is now known as acidsys
[08:14:56] *** Joins: gggpkm (~gggpkm@60.10.23.164)
[08:16:14] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 255 seconds)
[08:17:45] *** Joins: onosendi (~onosendi@user/onosendi)
[08:22:54] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 272 seconds)
[08:35:19] *** Joins: onosendi (~onosendi@user/onosendi)
[08:40:00] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 272 seconds)
[08:41:48] *** Quits: jellobot (~jellobot@104.248.16.142) (Read error: Connection reset by peer)
[08:41:51] *** Joins: jellobot2 (~jellobot@104.248.16.142)
[08:41:51] *** ChanServ sets mode: +v jellobot2
[08:41:51] *** jellobot2 is now known as jellobot
[08:48:04] *** Quits: debsan (~debsan@2800:810:471:2ee::1000) (Remote host closed the connection)
[08:50:29] *** Joins: debsan (~debsan@2800:810:471:2ee::1000)
[08:50:29] *** Joins: switchnode (~switchnod@2601:240:d200:fef:82fa:5bff:fe19:f8e4)
[08:52:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:54:50] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[08:56:12] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:57:54] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Ping timeout: 255 seconds)
[08:59:58] <switchnode> i wish to get a Date representing the last 11 pm--that is, 11 pm today between 11 and midnight, 11 pm yesterday between midnight and 11. is there a more intelligent/idiomatic way to do this (without using external dependencies) than starting with `(new Date()).setHours(23, 0, 0, 0)` and comparing it to the current time to decide whether to subtract a day?
[09:03:09] <ljharb> switchnode: don't use Date at all
[09:03:16] <ljharb> use moment.js, and eventually, JS will have Temporal available
[09:07:35] <ashnur> date-fns f2w
[09:09:14] <switchnode> as i said, i would prefer not to use external dependencies
[09:09:17] <switchnode> thanks though; i will keep an eye out for temporal
[09:09:18] *** Parts: switchnode (~switchnod@2601:240:d200:fef:82fa:5bff:fe19:f8e4) (ollies out)
[09:11:25] <ashnur> you like to use internal dependencies instead? :D
[09:11:35] <ashnur> ljharb, what do you think? https://www.npmjs.com/package/geta-random-word :D
[09:16:32] <ljharb> lol i mean, if you have a use case
[09:17:58] *** Joins: onosendi (~onosendi@user/onosendi)
[09:18:19] *** Quits: debsan (~debsan@2800:810:471:2ee::1000) (Ping timeout: 246 seconds)
[09:22:12] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 245 seconds)
[09:25:48] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[09:25:48] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 255 seconds)
[09:30:04] *** Joins: The_Blode (~Blode@92.40.180.219.threembb.co.uk)
[09:30:27] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 276 seconds)
[09:33:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[09:38:41] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 265 seconds)
[09:43:30] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[09:44:55] *** Quits: The_Blode (~Blode@92.40.180.219.threembb.co.uk) (Changing host)
[09:44:55] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:44:57] *** Joins: gry (~quassel@botters/gry)
[09:46:28] *** Joins: onosendi (~onosendi@user/onosendi)
[09:48:57] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:50:32] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[09:51:00] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 255 seconds)
[09:51:31] *** Joins: codebam (~codebam@user/codebam)
[09:53:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 258 seconds)
[09:56:50] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[09:58:16] *** Joins: codebam (~codebam@user/codebam)
[10:00:47] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[10:00:54] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 255 seconds)
[10:01:49] *** Quits: Drgonz0 (Drgonz0@107-179-254-222.cpe.teksavvy.com) ()
[10:03:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 245 seconds)
[10:03:53] *** Joins: gry (~quassel@botters/gry)
[10:17:51] *** Joins: onosendi (~onosendi@user/onosendi)
[10:18:13] *** Quits: xsperry (~as@user/xsperry) ()
[10:18:27] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 255 seconds)
[10:19:52] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[10:22:12] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 245 seconds)
[10:24:21] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[10:26:13] *** Joins: xsperry (~as@user/xsperry)
[10:28:21] *** Parts: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) ()
[10:31:01] *** Joins: stenno (~stenno@user/stenno)
[10:31:13] *** Quits: kid_goth (~kid_goth@dynamic-190-24-59-79.dynamic.etb.net.co) (Remote host closed the connection)
[10:32:13] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[10:32:15] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[10:35:09] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[10:37:10] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[10:37:44] *** Joins: onosendi (~onosendi@user/onosendi)
[10:42:04] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 252 seconds)
[10:43:52] *** Joins: pycode (~pycode@2001:b07:5d28:551:d32a:34dd:f8ef:945c)
[10:44:13] *** Quits: pizdets_ (~pizdets@183.182.110.194) (Quit: pizdets)
[10:44:53] *** Joins: pizdets (~pizdets@183.182.110.194)
[10:49:07] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[10:52:35] *** Joins: gggpkm (~gggpkm@117.61.17.58)
[10:52:56] *** Quits: gggpkm (~gggpkm@117.61.17.58) (Remote host closed the connection)
[10:53:55] *** Joins: gggpkm (~gggpkm@117.61.17.58)
[10:54:07] *** Joins: hygl (uid16621@id-16621.tinside.irccloud.com)
[10:55:36] *** Joins: gggpkm_ (~gggpkm@117.61.17.58)
[10:57:10] *** Quits: gggpkm (~gggpkm@117.61.17.58) (Read error: Connection reset by peer)
[11:10:54] *** Joins: onosendi (~onosendi@user/onosendi)
[11:12:46] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Quit: Leaving...)
[11:13:50] *** Joins: N4buc0 (~N4buc0@2001:1284:f016:620f:93c1:5a54:7b3a:2820)
[11:15:25] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 258 seconds)
[11:34:07] *** Quits: gry (~quassel@botters/gry) (Quit: No Ping reply in 210 seconds.)
[11:34:44] *** Joins: gry (~quassel@botters/gry)
[11:37:27] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[11:48:32] *** Quits: gry (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[11:49:04] *** Joins: gry (~quassel@botters/gry)
[11:50:10] *** Joins: epolanski (uid312403@id-312403.brockwell.irccloud.com)
[11:54:12] *** Joins: fef (~thedawn@user/thedawn)
[11:57:05] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:344d:6fd0:16d0:3b4a)
[11:57:25] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:59:38] *** Quits: Tempesta (Tempesta@user/tempesta) (Read error: Connection reset by peer)
[11:59:57] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:344d:6fd0:16d0:3b4a) (Client Quit)
[12:00:21] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[12:02:37] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[12:04:00] *** Joins: Tempesta (Tempesta@user/tempesta)
[12:15:10] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:23:57] *** Quits: g00fy (~g00fy@user/g00fy) (Quit: The Lounge - https://thelounge.chat)
[12:25:40] *** Joins: g00fy (~g00fy@user/g00fy)
[12:26:26] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[12:33:15] *** Joins: fbandov (~fbandov@217.110.80.4)
[12:36:15] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:52] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:29] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 255 seconds)
[12:42:05] *** Joins: jazzy (~jaziz@2600:380:8451:9914:745f:c6b0:8b18:af60)
[12:42:34] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 272 seconds)
[12:44:21] *** Joins: pulse (~pulse@user/pulse)
[12:46:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:50:26] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:50:26] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[12:50:26] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[12:51:40] *** Joins: Northwoods (~Northwood@223.130.30.165)
[12:51:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[12:54:20] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 255 seconds)
[12:55:20] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[12:55:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:58:45] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[13:00:30] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[13:05:32] *** Joins: Naan (~Naan@user/naan)
[13:06:31] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[13:09:07] *** Quits: Northwoods (~Northwood@223.130.30.165) (Quit: Leaving)
[13:11:39] *** Joins: onosendi (~onosendi@user/onosendi)
[13:16:46] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 272 seconds)
[13:25:05] <ashnur> :D
[13:28:23] *** Quits: ashnur (~rak@178.62.59.177) (Changing host)
[13:28:23] *** Joins: ashnur (~rak@user/ashnur)
[13:28:37] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[13:32:36] *** Quits: gggpkm_ (~gggpkm@117.61.17.58) (Read error: Connection reset by peer)
[13:33:11] *** Joins: gggpkm (~gggpkm@117.61.17.58)
[13:35:40] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[13:36:26] *** Joins: gggpkm_ (~gggpkm@117.61.29.201)
[13:38:42] *** Quits: gggpkm (~gggpkm@117.61.17.58) (Ping timeout: 255 seconds)
[13:38:44] *** Quits: gggpkm_ (~gggpkm@117.61.29.201) (Remote host closed the connection)
[13:40:15] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[13:42:24] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[13:43:38] <jacekowski>                           if (typeof schema.attributes.DisplayName !== 'undefined') {
[13:43:41] <jacekowski>                               yAxis.axisName = schema.attributes.DisplayName;
[13:43:54] <jacekowski> why does this fail if schema.attributes is undefined?
[13:43:57] <jacekowski> and how to fix it
[13:44:43] <siyb> because !== does a typecheck and undefined is undefined and 'undefined' is a string
[13:46:28] <jacekowski> i don't think so
[13:46:41] <jacekowski> i mean, that is probably a problem as well
[13:46:43] <jacekowski> but
[13:46:44] <jacekowski> TypeError: Cannot read property 'DisplayName' of undefined at InfluxFetch.js:155
[13:47:16] <jacekowski> so it's failing because attributes is undefined
[13:48:17] <jacekowski> i could check if attributes exists before checking for elements within it, but, if i was 20 levels deep i would have to check each object on the way there and i would like to think there is a better solution
[13:49:12] *** Joins: gggpkm (~gggpkm@117.61.29.201)
[13:52:04] <theskillwithin> n> !!'undefined'
[13:52:04] <jellobot> (okay) true
[13:52:14] <theskillwithin> n> !!undefined
[13:52:14] <jellobot> (okay) false
[13:52:45] <hassoon> 'morning
[13:54:27] <theskillwithin> o/
[13:54:40] <theskillwithin> jacekowski 'undefined' is in fact a string
[13:55:03] <undefined_bob> I'm undefined
[13:55:20] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[13:57:47] <theskillwithin> n> 'undefined' === 'undefined'
[13:57:48] <jellobot> (okay) true
[13:59:38] *** Joins: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1)
[13:59:41] <dan01> hi
[14:00:34] <dan01> I have in HTML an iframe element, that doesn't contain a src url but instead nests a html page like <iframe> #documnet <html> ... </html> </iframe>
[14:00:52] <dan01> and I want with document.querySelector to get the title element from within the iframe
[14:01:13] <dan01> I tried document.querySelector("iframe[id='myId']") it works fine
[14:01:18] <dan01> but then when I do a:
[14:01:36] <dan01> document.querySelector("iframe[id='myId'] > title") it doesn't return anything :(
[14:01:48] <theskillwithin> an iframe creates a shadow dom
[14:02:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 245 seconds)
[14:02:43] <dan01> theskillwithin: ok
[14:03:01] <dan01> theskillwithin: So do I query it differently or?
[14:04:06] <theskillwithin> I don't think there is a way to selector inside of it
[14:04:07] *** Joins: fef (~thedawn@user/thedawn)
[14:04:16] <theskillwithin> if there is, then idk about it
[14:04:55] <theskillwithin> well thats why they call it the shadow DOM
[14:05:22] *** Quits: Guest6174 (~mogad0n@user/mogad0n) (Quit: Guest6174)
[14:05:43] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:08:15] <jacekowski> theskillwithin: aaaa.bbbb.cccc.ddd === undefined
[14:08:16] <jacekowski> VM66:1 Uncaught ReferenceError: aaaa is not defined at <anonymous>:1:1
[14:08:57] <theskillwithin> !aaaa?.bbbb?.cccc?.ddd
[14:09:29] *** Joins: gggpkm_ (~gggpkm@117.61.25.14)
[14:09:34] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[14:10:36] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 272 seconds)
[14:11:52] *** Quits: gggpkm (~gggpkm@117.61.29.201) (Ping timeout: 272 seconds)
[14:13:50] *** Joins: koolazer (~koo@user/koolazer)
[14:15:33] <jacekowski> !aaaa?.bbbb?.cccc?.ddd
[14:15:35] <jacekowski> VM169:1 Uncaught ReferenceError: aaaa is not defined at <anonymous>:1:1
[14:17:50] <Cork> the first object always have to exist
[14:17:54] <Cork> else you get name error
[14:18:16] <Cork> n> let aaaa=null; aaaa?.bbbb?.cccc?.ddd
[14:18:17] <jellobot> (okay) undefined
[14:18:22] <Cork> n> aaaa?.bbbb?.cccc?.ddd
[14:18:22] <jellobot> (fail) ReferenceError: aaaa is not defined
[14:19:30] <Cork> s/object/variable/
[14:19:52] *** Joins: stenno (~stenno@user/stenno)
[14:24:07] *** Joins: thiras (~thiras@user/thiras)
[14:24:27] *** Joins: entuland (~entuland@user/entuland)
[14:25:55] *** Joins: gggpkm (~gggpkm@117.61.24.11)
[14:26:19] *** Quits: gggpkm_ (~gggpkm@117.61.25.14) (Ping timeout: 258 seconds)
[14:34:11] *** Joins: gehn (~gehn@user/gehn)
[14:35:51] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:38:34] *** Quits: sickdyd (~sickd@fl1-119-239-103-161.tky.mesh.ad.jp) (Ping timeout: 252 seconds)
[14:42:18] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:42:54] *** Joins: fef (~thedawn@user/thedawn)
[14:45:36] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 265 seconds)
[14:45:46] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[14:55:08] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[14:56:36] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[14:56:37] *** Quits: ormaaj2 (~6174bb9b@user/ormaaj) (Quit: https://mibbit.com Online IRC Client)
[14:56:47] *** Quits: pycode (~pycode@2001:b07:5d28:551:d32a:34dd:f8ef:945c) (Ping timeout: 245 seconds)
[14:57:06] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[14:57:07] *** Quits: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1) (Ping timeout: 246 seconds)
[14:58:37] *** Joins: ormaaj2 (~6174bb9b@user/ormaaj)
[15:01:52] *** Joins: hygl (uid16621@id-16621.tinside.irccloud.com)
[15:02:48] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:60c2:6b20:449d:8d91)
[15:10:37] *** Quits: fbandov (~fbandov@217.110.80.4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:11:48] *** Joins: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1)
[15:12:25] *** Joins: onosendi (~onosendi@user/onosendi)
[15:16:47] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 245 seconds)
[15:22:22] *** Joins: mearp (~mearp@154.13.1.41)
[15:29:09] *** Quits: mearp (~mearp@154.13.1.41) (Quit: leaving)
[15:32:30] *** Joins: mearp (~mearp@154.13.1.31)
[15:39:14] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:39:15] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 265 seconds)
[15:39:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 255 seconds)
[15:42:18] *** Joins: stenno (~stenno@user/stenno)
[15:43:50] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 252 seconds)
[15:45:48] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:46:56] *** Joins: koolazer (~koo@user/koolazer)
[15:47:42] *** Joins: fbandov (~fbandov@217.110.80.4)
[15:50:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:54:33] *** Joins: xse (~xse@user/xse)
[16:02:41] *** Quits: xse (~xse@user/xse) (Quit: mwah)
[16:03:41] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[16:03:41] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[16:03:45] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[16:04:05] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[16:05:42] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[16:10:05] *** Quits: Kol (~Kol@d75-157-122-186.bchsia.telus.net) ()
[16:12:01] <cthulchu> how do we do contextless functions in ES5? Will it count as one if we just don't name it?
[16:12:24] <stenno> not sure what you mean with contextless here
[16:12:24] <cthulchu> no, function(){} still adds context.
[16:12:35] <cthulchu> well one that doesn't create it's own this
[16:12:39] <cthulchu> like arrow functions
[16:13:18] <stenno> back then we used to do `var that = this;` to do something which looks like lexical scoping
[16:13:36] <stenno> var that = this; function foo() { console.log(that.x); }
[16:14:03] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[16:14:35] <cthulchu> and you would not need this in an arrow function since it doesn't have it's own this
[16:14:40] *** Joins: cbleslie (~cbleslie@47.148.37.14)
[16:14:41] <cthulchu> it uses parent's this
[16:14:51] <cthulchu> my question is what is the analog in ES5.
[16:16:21] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[16:17:23] *** Joins: xse (~xse@user/xse)
[16:18:46] <stenno> this was the analog
[16:18:53] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 265 seconds)
[16:18:56] <stenno> this in arrow functions is lexically scoped
[16:19:08] <stenno> `this` in arrow functions is lexically scoped
[16:19:24] <stenno> and `that` is a lexically scoped `this`
[16:23:09] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:25:19] <cthulchu> I see
[16:26:01] <stenno> (more or less)
[16:26:01] *** Joins: pycode (~pycode@2001:b07:5d28:551:5008:4a07:d41f:882d)
[16:26:06] <stenno> (best we can do)
[16:26:17] <cthulchu> another question :) can we do Nth element in css selectors? like document.querySelector("div#pew>div[8]")?
[16:26:18] <stenno> also you can always .bind a function to any context you like
[16:26:30] <cthulchu> oh, right, ind
[16:26:38] <cthulchu> bind looks better than that :)
[16:26:42] <stenno> check nth-child or nth-of-type
[16:26:46] <stenno> re: css
[16:27:41] <stenno> n> const foo = function() { return this.x; }; foo.bind({ x: 42})()
[16:27:42] <jellobot> (okay) 42
[16:32:12] *** Joins: Heraes (~Heraes@119.12.203.77.rev.sfr.net)
[16:32:12] *** Quits: Heraes (~Heraes@119.12.203.77.rev.sfr.net) (Changing host)
[16:32:12] *** Joins: Heraes (~Heraes@user/romarain)
[16:32:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[16:35:13] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:39:24] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 256 seconds)
[16:39:27] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:39:47] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 255 seconds)
[16:39:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:40:39] *** Joins: rwtrecs (~rewrit3@user/rewrit3)
[16:40:43] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Ping timeout: 246 seconds)
[16:41:08] *** Quits: N4buc0 (~N4buc0@2001:1284:f016:620f:93c1:5a54:7b3a:2820) (Quit: Leaving)
[16:42:35] *** Quits: rwtrecs (~rewrit3@user/rewrit3) (Client Quit)
[16:45:36] <paulcarroty> arrow function fixed bind addiction
[16:46:14] <stenno> and `that = this` pattern
[16:47:21] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[16:48:22] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 265 seconds)
[16:48:46] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:49:49] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 246 seconds)
[16:51:16] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[16:52:43] *** Joins: codebam (~codebam@user/codebam)
[16:57:21] <cthulchu> and it's completely fine to have mixed signatures in functions? So like it can take an object and then it does this, but if it's an integer, then it does this
[16:57:54] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 252 seconds)
[16:58:23] <cthulchu> it's just this library has this function: _satellite.cookie.set("favoriteThing", "kittens", { expires: 1 }); and I really don't like the last argument, I keep giving it just 1 and it keeps not working as I expect.
[16:58:53] <entuland> completely fine probably depends on what the function does
[16:59:47] *** Dorward_ is now known as Dorward
[17:00:42] <entuland> did you check the docs for that specific function in that library to see what's supposed to do?
[17:01:03] *** Joins: happymeal (~happymeal@user/happymeal)
[17:02:05] *** Joins: Akimbas (~Akimb@82-135-197-171.static.zebra.lt)
[17:02:19] *** Quits: gggpkm (~gggpkm@117.61.24.11) (Remote host closed the connection)
[17:04:03] *** Joins: codebam (~codebam@user/codebam)
[17:04:58] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:05:15] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Ping timeout: 255 seconds)
[17:05:32] *** Joins: fef (~thedawn@user/thedawn)
[17:06:12] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:06:49] *** Joins: fef (~thedawn@user/thedawn)
[17:07:15] <cthulchu> oh, sure I did
[17:07:50] <cthulchu> and there's no need in the object. they do it only to show what the last argument does for anyone who would look at the function call, which nobody does.
[17:08:18] <cthulchu> an odd idea of a junior dev
[17:09:00] <gehn> cthulchu, numerous standard library APIs do exactly this
[17:09:16] *** Joins: debsan (~debsan@2800:810:471:2ee::1000)
[17:09:45] <entuland> cthulchu, could you give a link to the docs you're checking?
[17:10:12] <entuland> I've found _one_ satellite.js and I wasn't able to find any reference to that function, probably a fork or something completely different
[17:11:09] <cthulchu> this: https://techdocs.searchdiscovery.com/adobe-solutions/dtm-to-launch-migration/most-common-issues/_satellite.setcookie
[17:12:23] <cthulchu> gehn, I would understand if it was a simulation of keyed args. I actually like keyed args and I hate that JS doesn't have it
[17:12:39] <cthulchu> or if the last param was just a bunch of options. that makes sense too
[17:12:41] <Alexendoo> It's a completely typical  options object...
[17:12:46] <entuland> uhm... those docs point out at those functions being deprecated
[17:12:54] <entuland> they use past tense in the actual page
[17:12:55] <cthulchu> but encapsulating one parameter in an object... just awkwad af
[17:13:09] *** Joins: onosendi (~onosendi@user/onosendi)
[17:13:16] <cthulchu> entuland, the setCookie is deprecated. the last one is the new shiny way
[17:13:20] <cthulchu> just bad documentation.
[17:13:24] <cthulchu> Adobe...
[17:13:37] <entuland> ah yes, my bad, I misread it
[17:13:39] <cthulchu> Alexendoo, with one option?..
[17:13:47] <Alexendoo> It literally links to https://www.npmjs.com/package/js-cookie#basic-usage
[17:14:12] <entuland> yep, so that's the docs you have to check, the link above ^^
[17:14:19] <cthulchu> oh, thank you
[17:14:25] <cthulchu> that looks a lot better.
[17:14:28] <cthulchu> my bad.
[17:14:46] <entuland> by the way, your code should be working at a glance
[17:15:03] <entuland> you may need to explain what you mean with "not working as I expect"
[17:17:24] <cthulchu> well if I supply integer and it expects object, the integer is just being ignored
[17:17:37] <cthulchu> so it sets the cookie for a year regardless of what I supply
[17:17:45] *** Joins: koolazer (~koo@user/koolazer)
[17:17:51] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 255 seconds)
[17:18:00] <cthulchu> which they could have added a shortcut for, since it's the way it worked in the deprecated function
[17:18:03] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[17:18:18] <cthulchu> I left a request for them to do that
[17:18:39] <entuland> the deprecated function was probably completely different stuff, then they moved to that js-cookie, which had a different syntax
[17:19:24] <entuland> so the code you have pasted in your message above _works_, but you want it to work passing "1" instead of "{expiry: 1}"
[17:19:32] <entuland> that wasn't really clear, now it is
[17:19:44] *** Joins: codebam (~codebam@user/codebam)
[17:19:44] <entuland> s/expiry/expires
[17:19:59] <cthulchu> ye
[17:20:22] <entuland> honestly, doubt they'd change it
[17:20:48] <entuland> as the whole point of having an object there is to let the user provide expires, path, domain and whatnot
[17:21:11] <cthulchu> in vast majority of cases, we don't need to provide path, domain and other stuff
[17:21:40] <cthulchu> expires is almost as vital as the name and the value of the cookie
[17:21:49] <entuland> yep, but it's not like you are going to litter your codebase with those calls
[17:21:53] <entuland> and you could proxy it
[17:21:59] <cthulchu> not really
[17:22:03] <entuland> why not?
[17:22:08] <cthulchu> I have a bunch of clients who use that library
[17:22:14] <cthulchu> I'm not gonna build proxies for each
[17:22:18] <entuland> oh I see
[17:22:49] <entuland> well, if the original setCookie is going deprecated, you'll have to alter your codebase anyways
[17:22:54] <cthulchu> moreover, I see a lot of devs making the same mistake. I even stopped using their function and started using the document's api for it.
[17:23:01] <entuland> at that point, decouple it and centralize the dependency
[17:23:11] <cthulchu> yes, but the habits stay
[17:23:21] <entuland> aye, but something has to give
[17:23:34] <entuland> just pick the least evil of the compromises
[17:23:40] <cthulchu> if they add a simple type check, then everyone is happy
[17:24:22] <entuland> you could as well just replace that function in the library before any of your clients uses it :P
[17:25:22] <entuland> so that you don't have to change the codebase at all, just inject your variant, if you can
[17:26:02] <cthulchu> I can override the native libraries, but I don't wanna do it since the next dev who comes to work to it wouldn't expect it
[17:26:12] *** Quits: kmh_ (~kmh@p200300df5f08b90090b8c32c2ae74bf4.dip0.t-ipconnect.de) (Quit: Leaving)
[17:27:29] <entuland> well, then if they don't pick up the advice and add such an alternative syntax, you're left with just complying
[17:27:34] *** Joins: keypusher (keypusher@user/keypusher)
[17:27:55] <Alexendoo> If you see a lot of people making that error it'd be worth opening a PR to js-cookie that throws on the wrong type
[17:28:43] *** Joins: kmh (~kmh@p200300df5f08b900e4768008ae6d95c6.dip0.t-ipconnect.de)
[17:28:53] <entuland> yep, providing them with the code that does what you want (or at least throws to cut wrong code out as heads up) may have better chances of getting merged
[17:31:48] *** Joins: keypushe- (keypusher@user/keypusher)
[17:31:49] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[17:32:31] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 246 seconds)
[17:33:28] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[17:34:12] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[17:35:04] *** keypushe- is now known as keypusher
[17:35:53] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:35:54] *** Joins: Liblx (~Alex@2a02:810c:280:59c:4960:d906:b2df:18)
[17:36:40] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[17:39:00] *** Quits: mearp (~mearp@154.13.1.31) (Ping timeout: 255 seconds)
[17:41:58] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 246 seconds)
[17:42:27] *** Joins: keypusher (keypusher@user/keypusher)
[17:45:28] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 246 seconds)
[17:47:11] *** Joins: codebam (~codebam@user/codebam)
[17:50:32] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 245 seconds)
[17:52:04] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:52:57] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Ping timeout: 255 seconds)
[17:53:02] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 268 seconds)
[17:54:09] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:54:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:56:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Client Quit)
[17:56:52] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[17:56:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:59:17] *** Quits: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1) (Ping timeout: 245 seconds)
[17:59:20] *** Joins: codebam (~codebam@user/codebam)
[18:03:42] *** Joins: Naan` (~Naan@user/naan)
[18:04:28] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:05:19] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[18:05:38] *** Joins: white_wabbit (~white_wab@efaa-4747-76ea-9085-2880-8c5d-07d0-2001.dyn.estpak.ee)
[18:06:49] *** Joins: silly (~silly@user/silly)
[18:07:12] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 245 seconds)
[18:18:36] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[18:19:15] *** Quits: Akimbas (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[18:23:10] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[18:24:10] <tct> I have an accordion which uses the class="active" to fold out the active item. Using javascript's document.getElementByID() I am adding that dynamically. I see in the DOM that "active" was added to the class list but the accordion element didn't fold out.
[18:24:13] <tct> what am I missing here?
[18:24:44] *** Quits: cbleslie (~cbleslie@47.148.37.14) (Read error: Connection reset by peer)
[18:24:50] *** Joins: cbleslie8 (~cbleslie@47.148.37.14)
[18:24:53] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:25:07] <entuland> tct, hard to say without seeing the actual markup / css / code
[18:25:32] <tct> is there something where I need to ensure that the document finished loading or something? or manually trigger an event?
[18:25:56] <entuland> nope, you already see that the element is getting the class
[18:26:09] <tct> hmm
[18:26:15] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:60c2:6b20:449d:8d91) (Ping timeout: 255 seconds)
[18:26:15] <entuland> what you need to check is whether there actually is any CSS matching that class
[18:26:45] <tct> yes, there is. if I manually click on an accordion event it works
[18:26:59] <tct> I can't click on the one that already has the "active" class added by JS but that makes sense
[18:27:09] <tct> it just doesn't fold out
[18:27:13] <tct> (when loading the page)
[18:27:19] <entuland> then it's using JS to do something more other than just adding the class
[18:27:31] <entuland> check the docs of the accordion you're using
[18:27:48] <entuland> you may be supposed to run a JS function / trigger an event / something else and not just add the class
[18:27:59] <tct> I see
[18:28:08] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:28:16] <entuland> the class may not be the trigger but just a consequence
[18:28:42] <entuland> as in, you may not even need to add the active class yourself at all
[18:28:47] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Remote host closed the connection)
[18:30:29] *** Quits: jazzy (~jaziz@2600:380:8451:9914:745f:c6b0:8b18:af60) (Ping timeout: 255 seconds)
[18:34:17] <tct> entuland, I found this in the javascript that shipped with the template: https://pastebin.com/wKmehBuk
[18:34:41] <tct> entuland, I add my `active` class via JS after that script was executed. so I take it I have to call that function?
[18:34:55] *** Quits: happymeal (~happymeal@user/happymeal) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:35:11] <entuland> accrodion? odd spelling
[18:35:21] <tct> I agree
[18:35:24] <tct> templates these days...
[18:35:26] <entuland> looking at that code, you may need to trigger the "click" event
[18:35:50] <entuland> so that the jquery there runs its own "on('click')" handler
[18:37:30] <entuland> should be just matter of running ".click()" on that element via jquery
[18:37:41] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[18:38:13] <entuland> and doing that _instead_ of adding the class - don't touch the class at all, just trigger the click to pretend it's the user clicking on it
[18:38:51] *** Joins: happymeal (~happymeal@user/happymeal)
[18:38:55] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[18:39:22] <tct> can I do .click() with vanilla JS (not jquery)?
[18:41:07] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:41:22] *** Joins: mickey (~user@user/mickey)
[18:41:56] <entuland> I don't see why should should, since you have jquery there already, but yes, you can dispatch events just in the same way
[18:42:06] *** Joins: wadammar (~wadammar@pool-100-12-209-172.nycmny.fios.verizon.net)
[18:42:31] <entuland> just different syntax https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
[18:43:04] <entuland> s/why should should/why you should
[18:43:47] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:44:25] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:44:32] <tct> so this would be:  myDomElement.dispatchEvent(new Event("click"));   ?
[18:44:37] <tct> entuland ^
[18:45:12] *** Joins: summersault (~summersau@179.221.251.16)
[18:45:23] <tct> doesn't seem to do the trick
[18:45:36] <tct> (I removed manually setting the active class)
[18:46:19] <entuland> well, I pretty much never used jQuery and I kinda assume they're binding the event with the event listener behind the scenes
[18:47:05] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[18:47:06] <entuland> in theory your code should work, if you triggered it on the correct element
[18:47:08] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Client Quit)
[18:47:35] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 255 seconds)
[18:47:41] <entuland> are you sure myDomElement refers to the same element that the accordion system binds to?
[18:47:43] *** Joins: Atum_ (IRC@user/atum/x-2392232)
[18:47:48] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[18:48:02] <tct> I trigger the click event on the same DOM element that receives the "active" class when I manually click on it
[18:49:07] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[18:49:11] <entuland> check the code again
[18:49:19] *** Joins: codebam (~codebam@user/codebam)
[18:49:22] <tct> I did that before asking ;-)
[18:49:23] <entuland> the listener is added to .accrodion-title
[18:49:40] <entuland> the active class is added to the grandparent
[18:49:57] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Client Quit)
[18:50:13] <tct> you're right
[18:52:00] <tct> thank you entuland
[18:52:04] <entuland> yw
[18:53:18] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[18:53:52] *** Joins: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com)
[18:55:01] *** Quits: wadammar (~wadammar@pool-100-12-209-172.nycmny.fios.verizon.net) (Quit: Leaving)
[18:55:48] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:5ca4:fa04:b487:ba6e)
[18:56:09] *** Joins: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1)
[18:56:22] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[18:59:09] *** Joins: Akimb (~Akimb@86.100.13.100)
[19:02:08] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[19:02:12] *** Joins: Lyn (~Lyn@user/law)
[19:03:12] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[19:04:11] *** Joins: codebam (~codebam@user/codebam)
[19:04:27] <Lyn> with Hooks in ReactJS, is it still necessary to pass state from child components to a common parent component in order to use the state in other child components?
[19:04:34] *** Quits: Akimb (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[19:06:09] *** cbleslie8 is now known as cbleslie
[19:06:53] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[19:06:56] *** __jmcantrell__ is now known as jmcantrell
[19:07:20] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[19:10:57] <entuland> Lyn, there are many FAQs in this list mentioning "state", have a look to see if it answers your question: https://reactjs.org/docs/hooks-faq.html
[19:11:17] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:12:10] *** Parts: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (Leaving)
[19:12:38] *** Joins: wadammar (~wadammar@pool-100-12-209-172.nycmny.fios.verizon.net)
[19:13:00] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:13:54] *** Joins: onosendi (~onosendi@user/onosendi)
[19:13:55] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:14:24] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[19:16:01] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[19:18:21] *** Joins: WishBoy (~WishBoy@user/wishboy)
[19:18:27] <samsch> Lyn, "Lifting state" remains exactly the same as a solution with hooks and classes.
[19:18:27] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 255 seconds)
[19:20:17] <cthulchu> how do we call numbers and letters as a value?
[19:20:28] <cthulchu> such a value that can have numbers and letters.
[19:20:35] <cthulchu> omg, can't remember the word
[19:21:44] <samsch> strings?
[19:21:45] <cthulchu> alphanumerical!
[19:22:04] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 265 seconds)
[19:23:11] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:23:21] *** Joins: codebam (~codebam@user/codebam)
[19:24:56] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 255 seconds)
[19:25:30] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[19:26:24] *** Joins: koolazer (~koo@user/koolazer)
[19:32:07] *** Joins: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl)
[19:33:31] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Read error: Connection reset by peer)
[19:33:49] *** Quits: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl) (Client Quit)
[19:34:05] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[19:34:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:34:57] *** Joins: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl)
[19:35:30] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[19:36:53] *** Joins: codebam (~codebam@user/codebam)
[19:41:34] <Lyn> thanks guys, as a side note it's a bit confusing to read ReactJS documentation since most of it still uses classes :S
[19:42:34] *** Joins: Akimb (~Akimb@86.100.13.100)
[19:43:35] *** Quits: white_wabbit (~white_wab@efaa-4747-76ea-9085-2880-8c5d-07d0-2001.dyn.estpak.ee) (Quit: Client closed)
[19:43:41] <velix> hmm... do you thing vue and svelve will survive or die the death of angular1 ?
[19:45:12] *** Quits: Akimb (~Akimb@86.100.13.100) (Read error: Connection reset by peer)
[19:48:07] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[19:48:15] <samsch> Lyn, Welcome to the last 2.5 years of React.
[19:48:22] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:48:46] <Lyn> shouldn't they have had the time to update docs lol
[19:48:55] <samsch> Yep
[19:49:19] <samsch> They're supposedly doing it *now*, 2 years later.
[19:49:58] <samsch> But that decision basically broke one of the best things React had going for it. But, "too big to fail" and all that
[19:51:23] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[19:52:45] *** Joins: summersault (~summersau@179.221.251.16)
[19:54:06] <wroathe> I suspect that when any well-known library migrates from an OOP API to an FP API there are worries about a possible potential PR nightmare. OOP is still very deeply rooted in the programming community at large.
[19:57:05] <samsch> Well, 1) 2.5 years, and it was pretty well accepted such that everybody wanted to switch pretty much ASAP 2) the class-based components weren't meaningfully OOP, nor are function components meaningfully FP.
[19:57:20] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[19:57:44] *** Joins: KevinX (~KevinX@2.56.190.208)
[19:58:16] <wroathe> Define "meaningfully OOP"
[19:58:55] <samsch> React components were hijacking the class syntax for the purpose of components, not using OOP-based programming methods.
[19:59:26] <samsch> Kinda like "using functions" doesn't make something FP, using class syntax doesn't making something OOP.
[19:59:36] *** Joins: irrgit (~irrgit@192.241.175.183)
[19:59:41] <wroathe> Sure they were: setState, lifecycle methods, a constructor
[20:00:18] <cthulchu> well, yes, real OOP implies a lot more than just structure
[20:00:37] <wroathe> So you've got encapsulation, patterns, inheritance
[20:00:43] <samsch> By that reasoning, class components were FP, because those are all functions.
[20:00:43] <wroathe> I fail to see how that's not "real OOP"
[20:01:29] <cthulchu> I believe that's about how the surface OOP interface is actually working on the memory level
[20:01:32] <wroathe> Hell, you've even got the confusing fight over function context when binding event listeners
[20:01:38] <wroathe> The cast of characters is all there
[20:01:45] <cthulchu> yes
[20:02:34] <wroathe> And by this logic no UI framework on the front end has ever done "real OOP"
[20:02:34] <Donitz> tssk tssk
[20:02:38] <Donitz> arguing semantics?
[20:02:46] <cthulchu> no
[20:03:34] <cthulchu> I don't think JS implies "real OOP"
[20:03:42] <cthulchu> not sure about Java.
[20:04:05] <Donitz> sure, for all practical reasons it's like oop
[20:04:07] <Donitz> but it's not real oop
[20:04:17] <Donitz> because spending life whining about that is productive
[20:04:21] * wroathe is waiting for a definition of "real OOP"
[20:04:25] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 258 seconds)
[20:04:45] <gehn> inb4 Alan Kay
[20:04:49] <cthulchu> no one's whining and not for all practical reasons.
[20:05:33] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[20:06:41] <cthulchu> it always confused me how in Java you can declare a string and a String. One's primitive and one's an object.
[20:07:30] <stenno> boxing ftw
[20:07:38] <stenno> autoboxing rather
[20:07:47] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[20:07:48] <stenno> n> 1..toString()
[20:07:49] <jellobot> (okay) '1'
[20:07:50] <stenno> magic
[20:08:14] <stenno> cthulchu: also using 'new String' will create a string object, not a primitive in JS
[20:08:26] <cthulchu> right.
[20:08:27] <stenno> so JS is just as guilty as java
[20:08:33] <cthulchu> ye
[20:08:53] <cthulchu> but I think it's worse in Java
[20:08:58] <stenno> fair
[20:09:06] <cthulchu> like some String methods would be missing for string or something
[20:09:30] <stenno> your linter config should shout at you anyway for using `new String` :P
[20:10:13] <Donitz> I'm sure there is a good reason
[20:10:21] <Donitz> n> s = new String('a');
[20:10:22] <jellobot> (okay) [String: 'a']
[20:10:29] <stenno> there is no good reason
[20:10:33] <Donitz> n> s = new String('a'); s[0] = 'b';
[20:10:34] <jellobot> (okay) 'b'
[20:10:44] <stenno> n> s = new String('a'); s[0] = 'b'; s
[20:10:44] <jellobot> (okay) [String: 'a']
[20:10:48] <stenno> still immutable
[20:10:57] <stenno> this is just the object version of the primitive
[20:11:05] <stenno> which you should never see in your code
[20:11:15] <stenno> its just whats used for autoboxing (?)
[20:11:31] <stenno> it shouldn't be exposed to the developer but yet it is
[20:11:45] *** Joins: cajiga (~john@45.130.83.177)
[20:12:26] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:14:40] <wroathe> I think maybe where the confusion came from above is that so much of what I pointed out is boilerplate nonsense, and so it probably feels offensive to compare that to "real OOP", but the truth of the matter "real OOP" is basically boilerplate nonsense
[20:15:04] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[20:15:56] <stenno> i found it to be useful to just talk about 'class-based OOP' to differenciate it from the stuff JS does
[20:20:35] *** Quits: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1) (Read error: Connection reset by peer)
[20:20:59] *** Joins: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1)
[20:21:54] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[20:22:29] *** Joins: onosendi (~onosendi@user/onosendi)
[20:23:10] *** Quits: Blackpajamas (~Blackpaja@167.167.46.2) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:23:46] <Donitz> what boilerplate nonsense exists in JS OOP?
[20:25:38] <systemfault> The nonsense died with the introduction of classes...
[20:25:38] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Quit: WeeChat 2.8)
[20:25:40] *** Joins: Blackpajamas (~Blackpaja@167.167.46.2)
[20:26:35] <Donitz> indeed
[20:26:46] <Donitz> and that nonsense was a bunch of different ways of implementing classes
[20:27:02] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 258 seconds)
[20:27:26] <systemfault> There was a "standard one"... but it was so painful to use that every framework invented their own custom way to do them
[20:27:54] <systemfault> function Point(x, y){ this.x = x; this.y = y} Point.prototype.blah = ....
[20:28:23] <wroathe> super(), inheritance generally, calling .bind to change event listener context
[20:28:39] <wroathe> pointless encapsulation
[20:28:41] <wroathe> to name a few
[20:29:33] <systemfault> I haven't personally used .bind in years... The rest is typical class-based OOP crap.
[20:29:40] <wroathe> Yup
[20:29:50] <wroathe> aka "boilerplate nonsense"
[20:29:55] <Donitz> I don't mind super
[20:30:01] <Donitz> I find it helpful in controlling the order of events
[20:30:13] <Donitz> for example, when cleaning up objects, I may want to reverse the call order
[20:30:16] <Donitz> so I put super last
[20:30:21] <systemfault> wroathe: I personally agree but that non-sense is pretty much the standard
[20:30:42] <wroathe> systemfault: Sure, but that's what I meant above by there being a PR nightmare in trying to move away from it
[20:31:05] <Donitz> but yeah
[20:31:09] <wroathe> systemfault: OOP is so deeply rooted that a significant portion of your user base would throw a fit if you just wholesale moved away from classes
[20:31:13] <Donitz> event listener removal is bloody awful
[20:31:20] <Donitz> having to keep track of the original binded functions
[20:31:24] <Donitz> awful
[20:31:43] <systemfault> Donitz: Make yourself a mini wrapper
[20:31:57] <wroathe> context is just generally awfully
[20:32:11] <Kirjava> n> MutString=t=>{const n=[...t];return new Proxy({},{get:(t,e,i)=>e===Symbol.toPrimitive?()=>n.join(""):"function"==typeof String.prototype[e]?String.prototype[e].bind(n.join("")):1/e?n[e]:"length"===e?n.length:Reflect.get(new String(n.join("")),e,i),set(t,e,i){n.splice(e,1,...String(i)),n.splice(0,n.length,...n.filter(t=>t))}})}; o = MutString('test'); o[2] = 'x'; `${o}`
[20:32:12] <jellobot> (okay) 'text'
[20:32:37] <wroathe> generally awful*
[20:32:40] <Donitz> well, when you want an event to call a class method, you pretty much have to use bind
[20:32:49] <Donitz> I like to have functions such as handleResize in my classes
[20:32:54] <Donitz> bound to window resize
[20:33:18] <Donitz> annoys me that I can't call it onResize
[20:33:21] <Donitz> but that's incorrect afaik
[20:34:14] *** Quits: doji (~doji@user/doji) (Ping timeout: 252 seconds)
[20:34:32] <systemfault> elem.addEventListener('whatever', () => { this.onWhatever() }) ?
[20:34:41] *** Joins: xsperry (~as@user/xsperry)
[20:34:45] <systemfault> Or is the extra closure too annoying?
[20:35:15] *** Joins: doji (~doji@user/doji)
[20:35:44] <Donitz> that makes it even harder to remove
[20:35:49] <Donitz> I like to do this
[20:35:53] <systemfault> But. in general, yes... having to always take into consideration that if you're not careful, you can easily lose the context... is annoying
[20:36:16] <wroathe> 11:02 < Donitz> well, when you want an event to call a class method, you pretty much have to use bind
[20:36:19] <wroathe> Donitz: Seeing a pattern here?
[20:36:22] <systemfault> Donitz: You could write a two lines wrapper... a bit like
[20:36:23] <systemfault> const addEventListener = (elem, name, callback) => {elem.addEventListener(name, callback); return () => elem.removeEventListener(name, callback) }
[20:36:25] <Donitz> this.handleResizeBound = this.handleResize.bind(this); addEventListener('resize', this.handleResizeBound);
[20:36:54] <systemfault> Ah ok
[20:37:04] <Donitz> but so ugly
[20:37:40] <wroathe> Or just: addEventListener('resize', handleResize);
[20:37:49] <systemfault> You'd have the same issues without classes... as long as you use "this"
[20:37:52] <Donitz> it's inside the constructor of a class
[20:38:16] <wroathe> systemfault: But you wouldn't use `this`
[20:38:19] <wroathe> systemfault: That's the point
[20:38:29] <systemfault> I don't :p But most people do
[20:38:33] <wroathe> systemfault: Classes and context are just hurting you here
[20:38:37] <systemfault> I abuse FP in my code...
[20:38:47] <wroathe> systemfault: Good man
[20:41:51] *** Quits: wadammar (~wadammar@pool-100-12-209-172.nycmny.fios.verizon.net) (Quit: Client closed)
[20:47:52] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[20:50:19] *** Joins: stenno (~stenno@user/stenno)
[20:50:57] *** Quits: pycode (~pycode@2001:b07:5d28:551:5008:4a07:d41f:882d) (Ping timeout: 245 seconds)
[20:52:32] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[20:58:22] *** Quits: bambanxx (~bambanx@181-163-43-244.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[20:58:28] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:5ca4:fa04:b487:ba6e) (Quit: Textual IRC Client: www.textualapp.com)
[20:59:42] *** Quits: Brianmancer (~Neuromanc@user/briandamag) (Ping timeout: 255 seconds)
[21:00:32] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 245 seconds)
[21:05:05] *** Joins: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx)
[21:05:59] *** Quits: dan01 (~dan01@2a02:2f09:3416:2500:1896:2662:f197:8ca1) (Read error: Connection reset by peer)
[21:06:18] *** Joins: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net)
[21:09:26] *** Quits: yaalon (~yaalon@189.202.79.66.cable.dyn.cableonline.com.mx) (Ping timeout: 252 seconds)
[21:09:38] *** Joins: codebam (~codebam@user/codebam)
[21:11:11] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:11:24] *** Quits: Atum_ (IRC@user/atum/x-2392232) (Ping timeout: 255 seconds)
[21:11:36] *** Joins: Rockwood (~Rocky@user/rocky)
[21:21:11] *** Quits: dualbus (~dualbus@2604:3d08:837f:faeb:b62e:99ff:fe30:7d62) (Ping timeout: 252 seconds)
[21:21:30] *** Joins: dualbus (~dualbus@2604:3d08:837f:faeb:b62e:99ff:fe30:7d62)
[21:23:23] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:27:22] *** Quits: doji (~doji@user/doji) (Ping timeout: 268 seconds)
[21:36:27] *** Quits: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com) ()
[21:38:25] *** Joins: Betal (~Beta@user/betal)
[21:41:42] *** Quits: merced (merced@user/merced) (Ping timeout: 276 seconds)
[21:44:19] *** Joins: Atum_ (IRC@user/atum/x-2392232)
[21:46:32] *** Joins: merced (merced@user/merced)
[21:49:50] *** Joins: koolazer (~koo@user/koolazer)
[21:50:57] *** Quits: yaalon_ (~yaalon@201.171.90.143.dsl.dyn.telnor.net) (Remote host closed the connection)
[21:51:07] *** Joins: P1RATEZ (piratez@user/p1ratez)
[21:51:32] *** Joins: yaalon (~yaalon@201.171.90.143.dsl.dyn.telnor.net)
[21:52:32] *** Quits: yaalon (~yaalon@201.171.90.143.dsl.dyn.telnor.net) (Read error: Connection reset by peer)
[21:52:50] *** Joins: doji (~doji@user/doji)
[21:53:37] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:59:16] *** Joins: howdoi (uid224@id-224.tooting.irccloud.com)
[21:59:24] <howdoi> n> (1).toString() - "12"
[21:59:24] <jellobot> (okay) -11
[22:03:15] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:5ca4:fa04:b487:ba6e)
[22:03:30] *** Quits: P1RATEZ (piratez@user/p1ratez) (Ping timeout: 265 seconds)
[22:04:25] <howdoi> trying to find the spec text for that behavior
[22:04:57] <ljharb> howdoi: for unary minus?
[22:05:03] <ljharb> or subtraction sorry
[22:05:19] <howdoi> yes, subtraction
[22:05:24] <entuland> isn't that just a consequence of conversion to number?
[22:05:35] *** Joins: Deide (~Deide@217.155.19.23)
[22:05:35] *** Quits: Deide (~Deide@217.155.19.23) (Changing host)
[22:05:35] *** Joins: Deide (~Deide@user/deide)
[22:05:38] <ljharb> howdoi: https://tc39.es/ecma262/#sec-subtraction-operator-minus -> https://tc39.es/ecma262/#sec-evaluatestringornumericbinaryexpression -> https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator
[22:05:39] <howdoi> >  If Type(lprim) is String or Type(rprim) is String, then a. Return the String that is the result of concatenating ToString( lprim) followed by ToString(rprim).
[22:05:50] <howdoi> this makes sense for "1" + "12"
[22:05:56] <ljharb> the last link is your answer
[22:06:04] <ljharb> since the operator isn't +, it's a numeric operation
[22:06:09] <ljharb> so both are converted ToNumeric
[22:06:16] <ljharb> and then they're subtracted
[22:06:42] <entuland> n>"1" + "12"
[22:06:43] <jellobot> (okay) '112'
[22:06:51] <entuland> n>"1" - "12"
[22:06:52] <jellobot> (okay) -11
[22:07:17] *** Joins: Tempesta_ (Tempesta@183.98.39.112)
[22:07:17] *** Quits: Tempesta_ (Tempesta@183.98.39.112) (Changing host)
[22:07:17] *** Joins: Tempesta_ (Tempesta@user/tempesta)
[22:07:23] *** Quits: Tempesta_ (Tempesta@user/tempesta) (Remote host closed the connection)
[22:07:39] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[22:07:52] <howdoi> > 8. Let operation be the abstract operation associated with opText in the following table
[22:08:52] *** Joins: johtso (~johtso@92.40.194.147.threembb.co.uk)
[22:09:20] <howdoi> If it is + and one of them string it will do a toString on each and contact
[22:09:39] *** Joins: l__q (~modinfo@user/modinfo)
[22:09:51] *** Quits: fbandov (~fbandov@217.110.80.4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:10:00] <entuland> uhm... doesn't the order matter there?
[22:10:05] *** Quits: Tempesta (Tempesta@user/tempesta) (Ping timeout: 245 seconds)
[22:10:12] <entuland> n>1 + "1"
[22:10:13] <jellobot> (okay) '11'
[22:10:25] <entuland> ah no, bad memory about that
[22:10:44] <howdoi> no the other should matter
[22:10:55] <entuland> n>"1" + 1
[22:10:56] <jellobot> (okay) '11'
[22:11:10] <entuland> what's "the other"?
[22:11:23] <howdoi> n> [1-"11", 11-"1", 1+"11", "11" + 1]
[22:11:24] <jellobot> (okay) [ -10, 10, '111', '111' ]
[22:11:50] <l__q> how to remove comments from declaration files in typescript? ""removeComments": true, " removed comments in declarations and compiled js, but only declarations should without comments
[22:12:19] <wroathe> l__q: Sounds like a question for the typescript channel
[22:12:27] <l__q> ok, sorry
[22:13:34] <l__q> My JSDocs is bigger then my code o_o
[22:14:55] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[22:18:30] <howdoi> > 6. If Type(lnum) is different from Type(rnum), throw a TypeError exception.
[22:18:44] <howdoi> n> [1+null, null+1, null-"1"]
[22:18:44] <jellobot> (okay) [ 1, 1, -1 ]
[22:18:48] <howdoi> ljharb: ^
[22:19:12] <howdoi> because toNumeric of null is 0?
[22:19:53] <howdoi> n> null - "null"
[22:19:54] <jellobot> (okay) NaN
[22:20:15] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d8:e438:5eed:837b)
[22:21:46] <ljharb> n> +null
[22:21:47] <jellobot> (okay) 0
[22:21:57] <ljharb> n> +'null'
[22:21:58] <jellobot> (okay) NaN
[22:22:03] <ljharb> howdoi: ^
[22:22:14] <howdoi> yup, got it
[22:22:20] <howdoi> thanks :)
[22:23:05] <howdoi> https://tc39.es/ecma262/#sec-tonumeric had that table
[22:23:06] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[22:23:14] *** Joins: onosendi (~onosendi@user/onosendi)
[22:24:04] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 246 seconds)
[22:24:10] <howdoi> when would the TypeError happen though?
[22:24:51] <howdoi> Type(lnum) is different from Type(rnum)
[22:25:06] <howdoi> n> Symbol(1) - 1
[22:25:07] <jellobot> (fail) TypeError: Cannot convert a Symbol value to a number
[22:25:09] <howdoi> nice
[22:27:32] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 252 seconds)
[22:27:46] *** Quits: Atum_ (IRC@user/atum/x-2392232) (Quit: Atum_)
[22:31:10] *** Joins: Tempesta (Tempesta@user/tempesta)
[22:31:17] *** Joins: Atum_ (IRC@user/atum/x-2392232)
[22:35:07] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 245 seconds)
[22:39:25] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[22:40:22] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[22:40:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a4d8:e438:5eed:837b) (Ping timeout: 245 seconds)
[22:42:11] *** Joins: stenno (~stenno@user/stenno)
[22:42:15] *** Joins: teut (~teut@106.214.16.139)
[22:47:27] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[22:52:14] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[22:53:43] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[22:58:25] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:03:11] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[23:04:40] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:05:00] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[23:05:17] *** Joins: Akimb (~Akimb@86.100.13.100)
[23:05:41] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Client Quit)
[23:05:43] *** Quits: cajiga (~john@45.130.83.177) (Quit: WeeChat 2.8)
[23:06:00] *** Quits: codebam (~codebam@user/codebam) (Read error: Connection reset by peer)
[23:06:26] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[23:08:28] *** Joins: codebam1 (~codebam@user/codebam)
[23:14:38] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[23:15:09] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 255 seconds)
[23:16:58] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[23:23:52] *** Quits: codebam1 (~codebam@user/codebam) (Ping timeout: 245 seconds)
[23:27:23] *** Joins: WishBoy (~WishBoy@user/wishboy)
[23:28:33] *** Quits: Heraes (~Heraes@user/romarain) (Quit: Leaving)
[23:28:59] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0) (Quit: Leaving)
[23:32:11] *** Joins: onosendi (~onosendi@user/onosendi)
[23:36:57] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:a6ea:d549:1785:23d0)
[23:37:39] *** Joins: koolazer (~koo@user/koolazer)
[23:38:01] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[23:40:46] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[23:44:53] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 268 seconds)
[23:46:43] *** Quits: EgonX (~EgonX@2601:2c6:47f:8884:3539:3594:1223:ea5a) (Quit: Textual IRC Client: www.textualapp.com)
[23:50:19] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
