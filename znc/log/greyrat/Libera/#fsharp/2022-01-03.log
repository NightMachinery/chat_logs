[01:21:21] *** Joins: Deide (~deide@user/deide)
[01:42:51] *** Joins: pdz1[m] (~pdz1matri@2001:470:69fc:105::1:20f3)
[01:42:51] *** Joins: akronymus[m] (~akronymus@2001:470:69fc:105::f7be)
[01:42:51] *** Joins: jinsun_ (~jinsun@user/jinsun)
[01:46:19] *** Quits: akronymus[m] (~akronymus@2001:470:69fc:105::f7be) (Quit: Client limit exceeded: 20000)
[01:46:21] *** Quits: Deide (~deide@user/deide) (Quit: Client limit exceeded: 20000)
[01:46:43] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[01:47:05] *** Quits: pdz1[m] (~pdz1matri@2001:470:69fc:105::1:20f3) (Quit: Client limit exceeded: 20000)
[11:08:11] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 256 seconds)
[12:54:50] <biberu> MatthiasVance: i'm feeling a bit conflicted atm, writing something in a functional style in c# that would've been much nicer in f#, but hoping that it might help to make others curious about the ideas :)
[13:04:59] <MatthiasVance> biberu: Yeah I mostly write functional style in C# :D .. so much cleaner
[13:05:14] <MatthiasVance> I see people using double for loops and then an if to set something
[13:05:23] <MatthiasVance> I think .. do it the other way around it's much cleaner!
[13:06:25] <biberu> indeed
[13:19:54] <xeno> I don't use C#, but I write in functional style in Java - but it's very tricky due to the mutation based collections. Dunno how that is in C#? 
[13:30:41] <biberu> xeno: there are immutable collections and ready only interfaces for common use cases and it's easy to make immutable classes, but the general environment has a lot of things that rely on mutability
[13:31:13] <biberu> xeno: local mutability can be hard to avoid, but it's often possible to hide
[13:31:25] <xeno> yeah, that's what I do in java
[13:31:32] <xeno> pseudo functional 
[13:32:15] <xeno> but meh, all of it hides a CPU and instruction set that is purely based on mutation anyways - can't do 1+1 without mutating 
[13:32:45] <biberu> yeah, as long as it's local you can still reason about the code
[13:47:33] *** Joins: chao (~stenno@user/stenno)
[13:52:13] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 240 seconds)
[13:54:18] *** Joins: chao (~stenno@user/stenno)
[14:10:52] <MatthiasVance> So I have this type Model that contains a list of Property
[14:11:19] <MatthiasVance> But to store it in the DB I need some extra info like TenantId / Deleted
[14:11:37] <MatthiasVance> So that's a different type, that has all the same properties I think, but you can't easily map from one to the other right
[14:11:42] <MatthiasVance> Except with the usual mapping code
[14:12:05] <MatthiasVance> I am not sure if F# is the *right* tool
[14:33:27] *** chao is now known as stenno
[14:45:47] <biberu> MatthiasVance: hm, why not?
[14:46:14] <MatthiasVance> Because I don't know enough to solve it idiomatically
[14:46:19] <MatthiasVance> And it might become a mess
[15:04:25] <biberu> MatthiasVance: sorry, was on the phone
[15:05:04] <MatthiasVance> My expectations for replies are "whenever you have time and energy and are willing to"
[15:05:07] <MatthiasVance> :D
[15:05:39] <biberu> MatthiasVance: sounds like i'd just have a domain entity and a db entity and plain functions to map between the two, if mapping from domain to db takes data that isn't available in the domain add more (perhaps partially applied) arguments for those?
[15:06:22] <biberu> MatthiasVance: that's the way i do it in c# too btw, ef entities are internal ^^
[15:15:19] <MatthiasVance> That's exactly how I was doing it in C# too but in C# I could inherit from the domain model :P
[15:15:34] <MatthiasVance> Here I have to copy all properties - which is not a worse solution of course
[15:16:05] <biberu> hm, i wonder if i used inheritance in c# in 2021
[15:16:31] <MatthiasVance> I hardly ever use it as well
[15:17:04] <biberu> ideally the domain model would look very different from the db side anyhow
[15:17:15] <MatthiasVance> yes indeed
[15:17:44] <biberu> class User { Username Name { get; } } <-> class UserEntity { string Name { get; set; } }
[15:32:17] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[16:14:23] <biberu> nice, two new functional books in the mail
[16:14:53] *** Joins: stenno (~stenno@user/stenno)
[16:30:35] <MatthiasVance> I buy books
[16:30:36] <MatthiasVance> But don't read them
[16:31:16] <biberu> are you at least displaying them in an intimidating bookcase?
[16:52:25] <MatthiasVance> No they are all virtual
[16:52:28] <MatthiasVance> Maybe that is the problem
[16:56:08] <biberu> i mix reading print and ebooks, but only on an ereader that's free from distractions
[16:56:13] <MatthiasVance> biberu: Since the result of using proper models per task is that you don't use CRUD .. I see no use for a REST API
[16:56:24] <MatthiasVance> Should I check out gRPC?
[16:56:29] <MatthiasVance> Or just make everything POST :D
[16:57:32] <biberu> didn't try grpc yet, i usually just map everything at the edges and expose rest apis there
[17:27:45] <MatthiasVance> Yeah same
[17:28:09] <MatthiasVance> I was thinking more about instead of doing a POST you'd do a CreateModelCommand (Model is a domain term)
[17:29:14] *** Joins: beepbeep (~beepbeep@78-23-136-231.access.telenet.be)
[17:29:21] <beepbeep> o/
[17:29:42] <MatthiasVance> beep beep beepbeep 
[17:30:46] <MatthiasVance> biberu: And instead of having "id" in the URL you'd POST it as part of the command
[17:30:49] <MatthiasVance> (for updating, for example)
[17:34:54] <biberu> MatthiasVance: nah, i'd just grab it from the path or query, effectively treating them as simple dtos to map from
[17:36:07] <biberu> suppose you have something that gets a resource, like GetResourceQuery :: ResourceId -> Resource
[17:36:55] <biberu> then api/resource/1 -> take 1 as resource id -> call the query -> map the result back to whatever goes on the wire
[17:41:23] <biberu> extension methods <3
[17:41:35] <biberu> i'd really like a |> in c# though
[17:42:54] <biberu> and apparently hkts ><
[17:45:50] <MatthiasVance> biberu: Ah yes but when you give back a collection you need the ids as well
[17:46:13] <MatthiasVance> biberu: As in people requesting an entire list, so that needs to be a separate thing then when you leave it out of the model
[17:46:30] <biberu> you don't include the id in the model?
[17:46:53] <MatthiasVance> That question is a bit ambiguous :P
[17:47:00] <MatthiasVance> Are you telling me I shouldn't or asking me if I don't
[17:47:09] <biberu> i'm asking you if you don't
[17:47:17] <biberu> (i do include it in the model)
[17:47:39] <MatthiasVance> Ah yes I do include it in the model so I was thinking "what's it doing in the URL then"
[17:47:55] <biberu> ah
[17:48:29] <biberu> if it was a POST i guess you'd have e.g. a type GetResourceRequest?
[17:49:05] <MatthiasVance> usually some kind that contains less info than the domain model (as in, no id) 
[17:49:11] <MatthiasVance> *kind->type
[17:49:18] <biberu> sure, for creating and such?
[17:49:25] <biberu> but for lookups?
[17:49:44] <biberu> anyway, i just consider that request type implicit in the path example, and map the parameter straight to an id
[17:50:08] <biberu> if it's just an int i might just forward it, depends on how strict i am
[17:50:34] <biberu> but the fence is there regardless
[17:51:03] <beepbeep> for simple lookups we also simply map to int or guid and pass the parsed int or guid to the function responsible for fetching and hydrating the data.
[17:51:40] <MatthiasVance> The default scaffolded ASP.NET API Controller type thing does either, but does a compare for URI id == model id
[17:51:59] <MatthiasVance> Ah for getting, then yes you only use the URI id 
[17:52:03] <MatthiasVance> Since that's all you have
[17:52:48] <biberu> welcome beepbeep :)
[17:52:58] <beepbeep> hi o/
[17:52:59] <biberu> nice with more people here :)
[17:56:33] <beepbeep> Is this channel active?
[17:56:48] <biberu> depends on the day, but kinda
[17:57:09] <beepbeep> Cool. Might stick around for a while then :-)
[17:57:36] <beepbeep> Really think slack is the wrong tool for a community chat.
[17:59:11] <biberu> i've been on irc for so long i can't really imagine anything else :>
[18:08:28] <biberu> nice, probably been an hours since i ran the last test, and it just works \o/
[18:22:50] <MatthiasVance> beepbeep: If you think Slack is bad wait until you discover the official C# Discord :D
[18:24:21] <beepbeep> biberu, the problem is always side effects. For example executing a query in a database. Or executing an API call. Compiler won't save you. :D
[18:24:44] <biberu> sure it will
[18:25:19] <beepbeep> Maybe if you are using a type provider. No experience with those.
[18:34:32] <biberu> beepbeep: well, you've got to model the data from external sources and map to that somehow, and account the possibility that the mapping may fail
[18:35:04] <biberu> that's literally what i'm doing right now :)
[18:35:14] <beepbeep> Sure. You can model map failure. But often times that's a bug.
[18:35:58] <biberu> that the data is incorrectly formatted?
[18:36:43] <beepbeep> That sounds like input parsing to me, which is a completely different from reading data from your own database.
[18:37:12] <biberu> i don't really regard those as different
[18:38:24] <biberu> from the db you'll still get relatively primitive types, like strings and ints, possibly nullable too, and it can be useful to map those to more meaningful types (and check that business rules for complex types are valid) before letting them into the rest of your application
[18:39:31] <beepbeep> They're different. Let's say I'm editing my profile data and I input an e-mail address that does not pass basic validation. The system gives me feedback and I am able to do something about it. Now let's say you read an input that is incorrectly formatted in the db. In a lot of cases, there is absolutely nothing the user can and should do about
[18:39:32] <beepbeep> this. A developer needs to fix the bug.
[18:40:15] <biberu> that the db contains garbage data is no reason to allow it into the domain
[18:41:06] <biberu> in the email case you might have a type Email, not a string, and that should only contain values that pass basic validation
[18:41:15] <beepbeep> I'm not saying that. I'm saying that even though both parsing from user input and database yields parse errors or whatever you call those, they are completely different use cases.
[18:41:42] <beepbeep> I agree with everything you say. I'm just saying that when you fail to parse from db, it's a bug and when you fail to parse from user input, it is not.
[18:41:44] <biberu> you'd have to handle them differently, sure
[18:42:35] <biberu> i doubt i'd classify it as a bug though, at least not in the application logic
[18:43:00] <biberu> possibly some other component has been writing trash to the db, could be a bug there
[18:43:16] <biberu> maybe someone updated it manually
[18:43:28] <biberu> either way the reader is handling it correctly by failing
[18:43:34] <beepbeep> Well your definition of a bug might be different from mine. If a user is not able to perform a certain task in the app and there is nothing he or she can do about it, it's a bug :D
[18:43:48] <beepbeep> In my opinion at least.
[18:44:12] <biberu> i don't know if they would be, maybe we're just iterating over a list of something and expect to drop invalid entries :)
[18:44:33] <biberu> if it prevents a user from doing what he should that sounds like a bug somewhere, yeah :)
[18:46:57] <beepbeep> Ye. A bug somewhere. Right. 'Y know, I've been in so many situations where an external team makes a breaking change resulting in an inaccessible screen/action in one of the apps maintained by our teams.. In those situations, you can shout however hard you like, customer still thinks it's your fault. It doesn't even matter where the bug is rly :D
[18:47:31] <biberu> obviously i wouldn't be disputing that with a client :)
[18:48:26] <beepbeep> Haha. I once saw a front-end developed by a team that used a lot of values and expressions over statements and exceptions etc.
[18:48:58] <beepbeep> Dno what lang they were using. Might've been TypeScript. Anyway. They showed this message (the api team failed again, we also don't know what's going on, here's the link to the stack trace, call them)
[18:49:45] <beepbeep> They probably considered their app to be bug-free. And in a way it was. But that doesn't mean that it wasn't total garbage :D
[18:50:17] <biberu> their app may well be bug free, but perhaps they should be more helpful, i dunno :)
[18:51:46] <beepbeep> It's pretty funny how you can do everything right and still end up producing something that does not work.'
[18:53:10] <MatthiasVance> Wow time to reprimand a few people for throwing another team under the bus
[18:54:28] <beepbeep> :D
[19:23:35] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[20:00:18] *** Quits: beepbeep (~beepbeep@78-23-136-231.access.telenet.be) (Ping timeout: 256 seconds)
[20:08:06] *** Joins: jinsun (~quassel@user/jinsun)
[20:38:21] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[20:41:10] *** Joins: jinsun (~quassel@user/jinsun)
