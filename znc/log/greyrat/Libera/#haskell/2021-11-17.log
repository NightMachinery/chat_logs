[00:01:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:01:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:01:02] *** Joins: wroathe (~wroathe@user/wroathe)
[00:01:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:01:53] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[00:03:04] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[00:04:31] *** Joins: carter (sid14827@helmsley.irccloud.com)
[00:04:46] *** Quits: nrr__ (sid20938@lymington.irccloud.com) (Ping timeout: 256 seconds)
[00:06:09] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[00:06:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[00:06:52] <boxscape_> Am I seeing this right that I cannot have {-# OVERLAPPING #-} instances for classes with associated types, because GHC would always complain about conflicting family instance declarations?
[00:07:06] <boxscape_> (i.e. I would have to make it a non-associated type family?)
[00:07:45] <c_wraith> Well, you can't create conflicting type families.  Doesn't matter whether you put them inside a class or not.
[00:08:03] <boxscape_> but GHC won't let me compile it :(
[00:08:09] <boxscape_> oh wait
[00:08:13] <boxscape_> I thought you wrote "can"
[00:08:37] <boxscape_> I know I can't do it anyway, it's just that the type family instances happen to match for the overlapping and the overlapped instance
[00:08:47] <boxscape_> so separating it out would work in this case, I think
[00:13:08] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[00:16:29] *** Joins: werner100 (~werner100@2601:2c2:400:4440:517c:b3d6:3517:bdd4)
[00:18:59] *** Joins: mimmy (~mimmy@146.70.75.156)
[00:19:48] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[00:24:06] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[00:24:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[00:25:36] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[00:26:12] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[00:26:31] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[00:26:35] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[00:28:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:31:26] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[00:32:30] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[00:33:11] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[00:34:20] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[00:35:37] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[00:35:54] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[00:37:38] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[00:37:38] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[00:37:58] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[00:38:32] *** Joins: obviyus (sid415299@user/obviyus)
[00:39:21] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[00:40:40] *** Joins: coolnickname (~omg@user/coolnickname)
[00:41:32] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:46:16] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:46:43] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:48:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-035.wadham.ox.ac.uk)
[00:52:14] *** Quits: werner100 (~werner100@2601:2c2:400:4440:517c:b3d6:3517:bdd4) (Quit: Ping timeout (120 seconds))
[00:53:25] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[00:53:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:53:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:53:53] *** Joins: wroathe (~wroathe@user/wroathe)
[00:54:34] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[00:56:46] *** Joins: jurjen (~jurjen@62-133-96-120.mobile.kpn.net)
[00:57:02] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[00:58:14] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[01:02:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:02:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[01:05:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:06:56] *** Joins: son0p (~ff@181.136.122.143)
[01:08:52] *** Joins: Pickchea (~private@user/pickchea)
[01:10:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[01:12:45] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:19:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:19:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:19:29] *** Joins: wroathe (~wroathe@user/wroathe)
[01:24:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[01:26:23] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[01:29:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Remote host closed the connection)
[01:29:38] *** Quits: jurjen (~jurjen@62-133-96-120.mobile.kpn.net) (Read error: Connection reset by peer)
[01:30:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:33:11] <__monty__> Has anyone written up the potential for confusion of $?
[01:33:18] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[01:34:00] <dsal> :t ($?)
[01:34:01] <lambdabot> error:
[01:34:01] <lambdabot>     • Variable not in scope: $?
[01:34:01] <lambdabot>     • Perhaps you meant one of these:
[01:34:58] <monochrom> I think it would be just one short sentence.
[01:35:17] <monochrom> I mean, if there were any confusion in the first place.
[01:35:32] <dsal> What is the confusion?
[01:35:49] <int-e> ($) is just an ordinary infix operator
[01:36:02] <int-e> `otherwise` is a Prelude function defined as True
[01:36:36] <int-e> what other things do we have that could be mistaken for syntax but really aren't?
[01:36:38] <dsal> `otherwise` has confused me a few times.
[01:36:41] <geekosaur> newcomers often get confused about (.) vs. ($)?
[01:37:22] <int-e> newcomers need to learn about types
[01:37:27] <int-e> so... that's expected
[01:37:51] <dsal> I find people tend to just put $ everywhere because it often does what they expect as a `(` kind of thing.
[01:37:52] <monochrom> To be sure, I speak against overused of ($) too, but the root issue is people going out of their way to hate parentheses, and digging deeper, people going out of their way to hate math. If ($) didn't exist, people would still find other ways to hate math (and they do).
[01:38:08] <dsal> I just hate money.
[01:38:16] <int-e> @src ($)
[01:38:16] <lambdabot> f $ x = f x
[01:38:55] <maerwald> monochrom: people also think using lambdas (the core of our language) is uncool
[01:41:07] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 250 seconds)
[01:41:36] <monochrom> Regarding being confused about (.) vs ($): I see that as comparable to math newcomers confusing "x*(y+z) = x*y + x*z" with "sqrt(y+z) = sqrt(y) + sqrt(z)", too.  Does that mean the former is confusing, therefore we should just never teach distributivity, period?
[01:41:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[01:42:41] <monochrom> People always look for oversimplifications to comfort themselves. They will always confused by facts.
[01:43:40] * Axman6 needs to remember to return otherwise more often, and also use it as a binder name sometimes
[01:44:23] <geekosaur> meh. we're writing haskell, not perl
[01:44:36] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:49:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-035.wadham.ox.ac.uk) (Remote host closed the connection)
[01:49:34] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[01:49:43] *** Joins: burnsidesLlama (~burnsides@client-8-84.eduroam.oxuni.org.uk)
[01:50:12] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:51:55] <dsal> The thing that's a little confusing about operators is that their precedence is invisible.
[01:52:27] <maerwald> if unsure about precedence, use ($) :D
[01:54:05] *** Quits: burnsidesLlama (~burnsides@client-8-84.eduroam.oxuni.org.uk) (Ping timeout: 265 seconds)
[01:56:46] <int-e> > ((succ $ 2) + (pred $ 3))
[01:56:47] <lambdabot>  5
[01:57:02] <int-e> (better safe than sorry)
[01:57:38] <monochrom> > (((succ) $ (2)) + ((pred) $ (3)))  -- really, really safe >:)
[01:57:39] <lambdabot>  5
[01:57:56] <hpc> this is why i always write ((-)1) instead of (-1)
[01:58:06] <monochrom> heh
[01:58:15] <kronicmage> int-e: "($) is just an infix operator" I thought there was special casing for higher rank types?
[01:58:20] <monochrom> But you should write ((-) (1)) >:)
[01:58:35] <kronicmage> So you can't actually define your own ($) that works the same way
[01:58:48] <hpc> ((-) ( ) (1)), just to be sure
[01:59:04] <monochrom> haha that's the best
[01:59:24] <janus> kronicmage: the workaround has been removed with the new quick look impredicativity i think?
[01:59:48] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[01:59:51] <int-e> kronicmage: Yes there is an ad-hoc hack that makes  runST $ foo  work
[02:00:02] <janus> int-e: even in 9.2? why?
[02:00:05] <geekosaur> supposedly the only part that remains is that ($) is alway simpredicative
[02:00:06] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:00:26] <int-e> janus: Sorry I checked 8.10.7
[02:01:48] *** Quits: michalz (~michalz@185.246.204.41) (Remote host closed the connection)
[02:02:07] <int-e> And now 9.0.1 as well...
[02:02:24] <int-e> 9.2 is way too new :P
[02:02:47] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[02:03:51] <hpc> maybe a dependent-typed ($) will fix runST
[02:03:59] <hpc> just wait for ghc 10
[02:06:06] *** Joins: mimmy (~mimmy@146.70.75.156)
[02:06:42] <maerwald> hpc: hopefully we'll get the long awaited No-Neq patch by then
[02:07:12] *** Quits: jkaye (~jkaye@BELVEDERE-T.ear2.Denver1.Level3.net) (Quit: Leaving)
[02:08:54] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[02:09:15] *** Joins: alzgh (alzgh@user/alzgh)
[02:11:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[02:15:17] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[02:16:16] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[02:17:15] <monochrom> No-Neq is a little bit of witch-hunting IMO. Although, it's a pretty small issue either way, so I won't make a big fuss about it.
[02:17:47] <monochrom> But if they try to apply the same thinking to the "redundant" methods of Ord, now that will be very alarming.
[02:17:47] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Remote host closed the connection)
[02:18:08] <maerwald> No-Neq is irrelevant as a proposal
[02:18:16] <maerwald> but the discussion is relevant
[02:18:31] <monochrom> Yeah that's true.
[02:18:41] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[02:18:59] <maerwald> Not that I envy the CLC stepping into that discussion on their first decision, haha
[02:19:32] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[02:19:54] <maerwald> like on a landmine
[02:20:19] <maerwald> "this probably won't be controversial..."
[02:20:23] *** Joins: alzgh (~alzgh@user/alzgh)
[02:20:24] <unit73e> I need to simplify this: https://paste.tomsmeding.com/iDgRrIMF
[02:20:32] <unit73e> all that occurs to me is mapAccumR
[02:20:41] <[exa]> wth, like removing /= from the typeclass?
[02:21:03] <monochrom> Oh, every ideology believer also believes that their ideology is uncontroverial.
[02:21:04] <hpc> we should save our brainpower for more important proposals, like (<>) = getLine like every other sane language has
[02:21:50] <monochrom> Yes I'm saying that No-Neq is driven by ideology. It's why I conclude that it's witch-hunting.
[02:22:07] <monochrom> haha hpc
[02:22:32] <monochrom> Yes [exa].
[02:23:07] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:23:31] <[exa]> actually in hs you lose functionality if you remove either of == or /= right? (for partial results)
[02:23:49] <[exa]> s/partial results/non-total comparisons)
[02:25:44] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:26:24] <unit73e> nvm I was being dumb, as usual
[02:27:08] <int-e> janus: 9.2 does the same thing (runST $ return ()  type-checks; replacing $ by a custom operator doesn't)
[02:27:08] *** Quits: Pickchea (~private@user/pickchea) (Remote host closed the connection)
[02:27:34] <int-e> (that's without enabling any extra extensions)
[02:30:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[02:30:06] *** Quits: adium (adium@user/adium) (Ping timeout: 260 seconds)
[02:30:35] <monochrom> unit73e: I think it's a foldr
[02:31:34] <unit73e> monochrom, yeah seems like it. I'm converting that.
[02:31:45] <unit73e> but I'll do the newbie way first
[02:32:22] <monochrom> It is also OK to leave the code as is. We don't need to foldr-ize everything that can be foldr-ized.
[02:33:21] <unit73e> I just don't like that empty list function there doing nothing
[02:33:28] *** Quits: ystael (~ystael@user/ystael) (Read error: Connection reset by peer)
[02:34:25] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 250 seconds)
[02:34:42] <monochrom> Ah. Maybe you like this middle ground: renderSprites' r t xs p = go xs  where  go [] = return (); go (x:xs) = do ... ; go xs
[02:36:07] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[02:36:10] <monochrom> (I'm too lazy to type out "renderer", "position", etc.  You should still stick to the longer, better names :) )
[02:36:21] <unit73e> that's fine I get it lol thanks
[02:36:37] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[02:37:11] <unit73e> this is just for an example to print all "idle" animation sprites in sequence anyway
[02:37:16] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[02:37:21] <unit73e> it's not going to be used in pratice
[02:37:58] <unit73e> maybe I should just print the texture positions instead
[02:38:01] <monochrom> Ho hrm, it may be actually a mapM_
[02:38:31] <unit73e> the problem with mapM_ is I need to accumulate the sum of points
[02:38:32] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:38:46] <unit73e> but I can first convert the list
[02:38:50] <unit73e> and then use mapM_
[02:39:12] <unit73e> which makes more sense than that thing I pulled off
[02:39:20] <monochrom> Oh oops, I forgot that position is not pos.
[02:39:27] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[02:39:42] <unit73e> but you know what? I'll just print the texture positions lol
[02:39:49] <monochrom> haha OK
[02:39:56] <unit73e> since it doesn't really matter lol
[02:40:13] <janus> int-e: but what is the 'same thing'? geekosaur said that there still is a workaround that forces ($) to always be impredicative, probably even if the (fixed) extension ImpredicativeTypes is off
[02:40:40] <geekosaur> that is my understanding, yes
[02:41:22] <geekosaur> the main difference is ImpredicativeTypes always had a very vague specification, and by itself it wasn't always sufficient to make ($) impredicative even when turned on, so there was a hack to always make it work
[02:41:25] <int-e> janus: so there's still an ad-hoc hack of some kind
[02:42:03] <geekosaur> with QuickLook, there is now a sane impredicative types story *and* it makes ($) work as expected, so the hack has been reduced to always making it impredicative even whne quicklook is disabled
[02:42:24] <janus> hehe imagine if ghc devs forced everybody to turn ImpredicativeTypes on by removing this hack :P
[02:42:34] <janus> would be an even larger outcry than for the not-eq stuff :O
[02:42:43] <geekosaur> runST isn't used *that* often, I think
[02:42:44] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:42:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[02:43:06] <geekosaur> but still, they do at least try to avoid breaking older programs
[02:43:23] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[02:43:29] <int-e> geekosaur: oh but when I use it, doing   runST $ do [...]   is a very common pattern
[02:43:31] <geekosaur> (which is one reason there's a shitstorm brewing over neq)
[02:45:03] <monochrom> BlockArguments was a solution to "runST do", but people decided to hate it.
[02:45:06] <int-e> There's the BlockArguments thing too and I hate it.
[02:45:13] <monochrom> See? :)
[02:45:18] <hpc> what's wrong with block arguments?
[02:45:19] <geekosaur> nice timing
[02:45:22] <int-e> monochrom: Happy to confirm.
[02:46:59] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[02:47:09] <glguy> hpc: what's wrong is I have to them them on all the time to use them rather than just getting the better syntax
[02:47:17] <int-e> hpc: it's irrational, it goes against decades of training and habits :P
[02:47:44] <glguy> I learned that they were a good idea from writing Agda
[02:48:19] <monochrom> Hrm, is BlockArguments included in GHC2021?
[02:48:24] <int-e> hpc: the way things are, when I see   runST do   I read `do` as a variable and then I have to resolve a clash between that and it being a keyword. This is *not* the case for the *familiar*  runST $ do
[02:48:31] <int-e> habits die hard
[02:48:38] <hpc> heh, that's fair
[02:48:45] <yushyin> monochrom: no :/
[02:48:46] <monochrom> sob sob no
[02:49:02] <janus> hmm you have the same situation with all kinda of other keywords
[02:49:11] <geekosaur> I don't have that problem but I'm conditioned to see do as a keyword. It just looks weird
[02:49:13] <monochrom> Well, at least ScopedTypeVariables is in.
[02:49:17] <janus> keywords always need special casing in your brain , and syntax highlighting helps with that
[02:49:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:49:22] <glguy> > 1 * do 3 + 4
[02:49:24] <lambdabot>  7
[02:49:57] <janus> int-e: i think you just turned me into a BlockArguments fan ;)
[02:50:20] * int-e shrugs
[02:50:38] <monochrom> I'm OK with BlockArguments when there are line breaks to help, e.g., "x = runST do \n", "y = withYYY \h -> \n".
[02:50:39] <janus> i thought there would be some elaborate argument about how it makes it harder to parse or something :P
[02:50:58] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced) (Quit: gone to sleep. ZZZzzz…)
[02:51:03] <monochrom> If you don't have those \n's, the code is harder to eyeball, yes.
[02:51:26] <monochrom> But who would omit those \n's in practice?
[02:51:55] <glguy> f \x -> x + 1
[02:52:02] <int-e> janus: Well it's harder to parse for me personally. I'm grown-up to realize that this is not the case for everyone. And I usually don't care how hard things are to parse for a compiler; if I did I wouldn't touch Haskell at all, the whole indentation story is crazy from that perspective.
[02:52:06] <glguy> function applied to lambdas
[02:52:07] *** Joins: Pickchea (~private@user/pickchea)
[02:52:08] <geekosaur> janus, it's actually easier
[02:52:12] *** Quits: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de) (Quit: WeeChat 3.3)
[02:52:13] <janus> monochrom: there was a person here a couple of months ago who removed all the spacing he could ;)
[02:52:17] <int-e> s/grown-up to/grown-up enough to/
[02:52:21] <geekosaur> it eliminates an unnecessary production rule in the grammar
[02:52:30] <monochrom> "f \x -> x + 1" is short enough that I would support "f (\x -> x + 1)".
[02:52:45] <monochrom> For longer examples you would have line breaks in the first place.
[02:52:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:53:04] <geekosaur> but as monochrom shows, some uses are harder for *people* to parse
[02:53:08] <glguy> monochrom: It works well to have something like:   thing \x y z -> \n function body
[02:53:35] <glguy> It's silly to argue that is harder to parse because you're not used to it; that's just how things go when change happens and then you get used to it
[02:54:14] <janus> we must sample the innocent purescript programmers who have never lived the NoBlockArguments life to find out how their brains work
[02:55:22] <Rembane_> Quite well thank you.
[02:55:26] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:55:31] <monochrom> haha
[02:55:51] <int-e> janus: does it involve electrodes
[02:55:57] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[02:56:21] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced)
[02:57:19] <janus> only if you include 'tesla coil' in your definition of electrodes. *evil merkel/burns pose*
[02:57:44] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: No route to host)
[02:58:08] <monochrom> "GHC2021 is used by GHC if neither Haskell98 nor Haskell2010 is turned on explicitly."  Haha, I'm surprised no one made a bigger fuss about this than about no-/=
[02:58:43] <monochrom> (I just tried in ghci-9.2, "data F a = F a a deriving Functor" is gladly accepted under default settings)
[02:58:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:59:53] <monochrom> Ugh why is PostfixOperators included?!
[03:01:00] <int-e> > let (!) = product . enumFromTo 1 in (5!)
[03:01:01] <geekosaur> I think nobody made a fuss because people normally use cabal files and cabal defaults to haskell2010. but that's supposed to change in an upcoming cabal version and *then* we may hear about it
[03:01:02] <lambdabot>  120
[03:01:08] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[03:01:17] *** Quits: mark__ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:01:26] <janus> monochrome: there is still time for Snoyman to get annoyed by a GHC2021 extension and choose to set Haskell2010 by default in stack ;)
[03:01:42] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:04:36] <int-e> monochrom: Have you been bitten by PostfixOperators? (It's just an eta reduction in the desugaring of (foo ?), right? Which is one of those things that is usually fine...)
[03:04:56] <monochrom> No.
[03:05:23] <monochrom> I haven't been bitten by PostfixOperators.
[03:06:20] <int-e> I mean it's not all that useful either... I'd never write the above in real code.
[03:06:39] <monochrom> Right, I don't think people actually use it.
[03:06:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:07:18] <monochrom> I guess the selection criterion was simply "widely agreed to be totally harmless".
[03:08:23] <janus> would it make it possible to have a postfix lift that is exclamation mark?
[03:08:29] <janus> then haskell would look like rust :P
[03:08:38] <janus> if used with e.g. ExceptT
[03:08:48] <janus> oh my, the calamity
[03:08:52] <monochrom> I use that criterion too to argue against people who make a big fuss about "why is 'let {} in 5' legal? this makes no sense!"
[03:09:20] <geekosaur> let (!) = liftIO in ...
[03:09:39] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[03:09:57] <monochrom> Heh
[03:10:01] <geekosaur> or unsafePerformIO if you really want to call out the dogs :)
[03:10:24] *** Joins: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net)
[03:10:40] <janus> oh no, i meant question mark. which is used in rust to escalate the error of their Either (called Result)
[03:10:47] <int-e> janus: it's a bit of a misnomer because the ? in (foo ?) isn't really a standalone postfix operator; the parentheses are required
[03:11:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[03:11:10] <geekosaur> because it's a special case of an operator section
[03:11:34] <janus> oh, then it's harder to use and misuse
[03:11:34] <int-e> so no, it won't look like Rust.
[03:11:51] <monochrom> It looks like (Rust!) :)
[03:11:54] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8de2:1993:a832:eced) (Ping timeout: 265 seconds)
[03:12:10] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:12:29] <int-e> EtaReducedLeftSections
[03:15:35] *** Quits: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net) (Ping timeout: 250 seconds)
[03:16:15] *** Quits: max22- (~maxime@2a01cb0883359800fa2f4e7c9f6204ba.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:17:38] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[03:18:17] *** Quits: glguy (x@libera/staff/glguy) (Quit: Quit)
[03:20:30] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f)
[03:21:51] *** Joins: glguy (x@libera/staff/glguy)
[03:24:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:24:43] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:25:36] *** Joins: mark__ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de)
[03:32:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[03:35:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:36:14] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:36:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:38:03] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:40:51] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[03:43:48] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[03:44:14] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[03:45:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:46:06] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[03:46:22] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:49:33] *** Joins: EvanR (~evan@user/evanr)
[03:49:59] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[03:50:19] *** Joins: alzgh (~alzgh@user/alzgh)
[03:50:58] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:51:59] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[03:59:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[04:00:13] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[04:00:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:01:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[04:01:45] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:04:59] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:08:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:08:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:08:27] *** Joins: wroathe (~wroathe@user/wroathe)
[04:08:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:13:00] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:13:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[04:14:24] *** Quits: _________ (~nobody@user/noodly) (Ping timeout: 268 seconds)
[04:14:47] *** Quits: mark__ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[04:15:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[04:15:25] *** Joins: _________ (~nobody@user/noodly)
[04:16:39] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:19:47] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[04:22:17] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[04:26:19] *** Joins: mark__ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de)
[04:28:26] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[04:30:55] *** Joins: EvanR (~evan@user/evanr)
[04:31:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:41:52] *** Quits: alx741 (~alx741@181.196.68.87) (Ping timeout: 256 seconds)
[04:42:20] <remexre> is there a type family of kind Nat -> Symbol?
[04:46:51] <EvanR> ehm what would that do, print the thing out in base ten or something xD
[04:47:32] <remexre> yeah
[04:47:34] <remexre> exactly that
[04:47:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:48:47] <EvanR> I'm sure it's possible
[04:49:02] <awpr> it probably became possible to write in base-4.16.0.0 with the addition of AppendSymbol and ConsSymbol
[04:49:44] <awpr> it's not gonna be super well-behaved in polymorphic contexts, though
[04:50:57] <dsal> If you want to print in base10, you're going to have to wait for at least 6 more major releases.
[04:56:11] *** Joins: alx741 (~alx741@181.196.69.19)
[04:56:18] *** Quits: moet (~moet@mobile-166-171-249-243.mycingular.net) (Ping timeout: 265 seconds)
[04:57:58] *** Joins: moet (~moet@mobile-166-170-38-150.mycingular.net)
[05:00:16] <remexre> oh, can you not use ConsSymbol in instances?
[05:00:27] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 250 seconds)
[05:02:40] *** Joins: jbox (~jbox@user/jbox)
[05:06:20] <awpr> on the RHS of a type family instance?  probably just needs UndecidableInstances
[05:08:03] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:09:06] <remexre> looks like no
[05:09:30] <moet> t
[05:10:53] *** Joins: mimmy_ (~mimmy@72.142.88.18)
[05:12:02] <ozzloy_> https://paste.tomsmeding.com/qEdr8PSc line 64, i created an answer for finding the minimum and maximum.  i'd like to improve on it.
[05:12:59] <ozzloy_> for example, one thing i'd like to do is use foldr, but i'm not sure how to create the function to send to foldr
[05:13:04] <awpr> remexre: AppendSymbol in a type family instance RHS worked fine for me (I tried on a GHC version before ConsSymbol was added, so couldn't try that).  what's the error?
[05:13:26] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[05:13:27] <remexre> Illegal type synonym family application ‘ConsSymbol'_' (ToString n)’ in instance: HasField (ConsSymbol '_' (ToString n)) a b
[05:13:36] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 256 seconds)
[05:13:43] <ozzloy_> line 59 seems like a good function, but i'd have to turn the initial list into a list of pairs
[05:15:44] <jackdk> Is there a common name for this trick: writing `instance a ~ X => FooClass (Bar a)` instead of `instance FooClass (Bar X)`?
[05:15:52] <EvanR> ozzloy_, you've nerd sniped me
[05:17:42] <ozzloy_> EvanR, cool!
[05:17:52] <awpr> oh, that's not the RHS of an instance but an instance head.  yeah, you can't have type families in instance heads (presumably because GHC would have to compute the inverse of the type family to figure out whether the instance matched)
[05:18:02] <ozzloy_> the code at the bottom was from someone in here.  i should have written the name
[05:18:11] <ozzloy_> from 85 and below
[05:18:27] <ozzloy_> i'm not sure what it means, exactly, but i believe it addresses this problem
[05:18:32] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[05:18:33] <remexre> awpr: hm, is there any way to like, get it to do that :P (at least for ConsSymbol and (1 +))
[05:21:03] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[05:21:21] <awpr> I don't think so, without changing the underlying kind to something that has cons/succ as data constructors
[05:22:23] <awpr> for `HasField`, seems like you're kinda stuck since it's built into `base`.  for things involving arithmetic, peano naturals tend to behave better than the built-in `Nat`s in that regard
[05:23:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:25:58] <ozzloy_> https://paste.tomsmeding.com/Z0USB0gg everyK, line 109, is there a pattern matching way to say the two arguments are the same value?
[05:28:56] <monochrom> No.
[05:29:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:30:53] <EvanR> heh, "non-linear pattern"
[05:31:27] <sm> I think it must be f a b | a==b = ...
[05:32:20] <EvanR> you gotta admit that feature would be interesting, among other cool pattern match ideas not implemented in haskell
[05:34:06] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[05:38:06] *** Quits: alx741 (~alx741@181.196.69.19) (Quit: alx741)
[05:40:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:40:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:40:13] *** Joins: wroathe (~wroathe@user/wroathe)
[05:42:24] <monochrom> Eh, I like Steve Buscemi too.
[05:43:31] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[05:44:55] *** Joins: zaquest (~notzaques@5.130.79.72)
[05:45:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[05:48:07] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[05:48:07] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[05:48:07] *** finn_elija is now known as FinnElija
[05:48:23] *** perrierjouet is now known as Charles_Attends
[05:54:20] *** Joins: alzgh (~alzgh@user/alzgh)
[06:02:57] <EvanR> wth
[06:04:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:04:15] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[06:07:43] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:09:08] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[06:10:06] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[06:10:44] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 265 seconds)
[06:11:16] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[06:17:53] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[06:18:42] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:18:57] *** Quits: xff0x (~xff0x@port-92-195-74-242.dynamic.as20676.net) (Ping timeout: 265 seconds)
[06:20:29] *** Joins: xff0x (~xff0x@2001:1a81:5370:a900:85a3:6303:a932:32a1)
[06:22:02] *** Quits: edwtjo (~edwtjo@user/edwtjo) (Ping timeout: 260 seconds)
[06:35:53] *** Joins: edwtjo (~edwtjo@h-109-228-137-133.A213.priv.bahnhof.se)
[06:35:53] *** Quits: edwtjo (~edwtjo@h-109-228-137-133.A213.priv.bahnhof.se) (Changing host)
[06:35:53] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[06:36:32] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 240 seconds)
[06:38:03] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c291:7247:e8a1:1137)
[06:39:15] *** Quits: boxscape_ (~boxscape_@i59F67A72.versanet.de) (Ping timeout: 265 seconds)
[06:39:18] *** Quits: mark__ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:44:28] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:44:53] <ozzloy_> https://paste.tomsmeding.com/0movjx2y when line 105 says "(Ord a)" the compiler says it should be "(Num a)" and when line 105 says "(Num a)" the compiler wants "(Ord a)"
[06:45:24] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f) (Quit: gone to sleep. ZZZzzz…)
[06:45:58] <ozzloy_> sm, oh, i'll try that
[06:46:00] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f)
[06:47:19] <geekosaur> you need both
[06:47:19] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 268 seconds)
[06:48:13] <geekosaur> (Num does *not* imply Ord, because of types like Complex Double which are Num but not meaningfully Ord. except we have an Ord for it anyway because Maps need it. meh)
[06:49:01] <dolio> People really shouldn't be using Complex Double as a map key.
[06:50:26] <ozzloy_> what's the syntax for putting in both?  i tried a few things.  also, what word or phrase would i search to find out how to specify both?
[06:50:27] <geekosaur> anyway you need Ord because you do a comparison via (<), and you need Num because you both substitute i with 0 and compute (i + 1)
[06:50:38] <geekosaur> (Num a, Ord a) => ...
[06:50:45] <ozzloy_> thanks!
[06:51:04] <ozzloy_> so let's say i didn't know that syntax.  what would i search for to find it?
[06:51:38] <geekosaur> the only thing I know is "constraint tuple" but just the phrase would give you the answer :(
[06:52:00] <ozzloy_> ah, so those things are called constraints
[06:52:08] <sm> ozzloy_: browsing the GHC user guide would be a good way
[06:52:09] <ozzloy_> 'which the error message does say
[06:52:22] <sm> browsing the haskell wiki would also find examples, possibly a bit quicker
[06:52:27] <ozzloy_> oh wait, no it doesn't
[06:52:30] <geekosaur> "haskell multiple constraints" seems to get decent answers
[06:52:36] <ozzloy_> i thought i remember seeing that phrase though
[06:52:38] <ozzloy_> thanks!
[06:52:46] <ozzloy_> s/phrase/term/
[06:53:04] <sm> browsing any large haskell codebase would be another way
[06:53:35] * sm meant haskell wikibook, not haskell wiki
[06:54:46] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[06:57:36] <monochrom> I read a proper tutorial back then. Today there are proper textbooks, even better.
[06:58:49] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:58:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:58:49] *** finn_elija is now known as FinnElija
[07:00:02] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[07:00:49] *** Joins: bliminse_ (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[07:00:55] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Ping timeout: 250 seconds)
[07:01:26] *** Quits: mimmy_ (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[07:02:37] <EvanR> the haskell report explains all syntax (except for extensions...)
[07:03:07] <ozzloy_> https://paste.tomsmeding.com/wzhWEcXe everyK now works!
[07:03:27] <ozzloy_> i have started "learn you a haskell' a couple times
[07:03:53] <monochrom> Pretty sure it covers that too somewhere.
[07:04:06] <ozzloy_> probably
[07:04:26] <ozzloy_> knowing that those are called "constraints" i think is going to be the most useful
[07:04:47] <ozzloy_> in terms of quickly finding the right syntax for related things in the future
[07:04:48] <monochrom> Maybe not exactly (Num a, Ord a) letter by letter, but surely the concept of having two constraints and the syntax for it.
[07:05:14] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[07:05:28] <monochrom> And maybe not the exact wording "constraint" but surely "(XXX a, YYY a)" in which XXX and YYY are classes.
[07:05:29] <ozzloy_> heh, it would be funny if it literally had "(Num a, Ord a) somewhere
[07:06:55] <ozzloy_> yeah, "haskell multiple classes" gave a stackoverflow with the right syntax
[07:07:03] <ozzloy_> thanks all
[07:08:32] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[07:12:47] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[07:12:54] <ozzloy_> https://paste.tomsmeding.com/4XINUqY3 lol, i'm trying to reverse the result of everyK, but when i search "haskell reverse" there's a bunch of results about how to write reverse.  so i guessed 'reverse l' and that worked
[07:13:57] <ozzloy_> also, should everyK 2 [1,2,3,4,5] return [2,4] or [1,3,5] ?  the problem statement doesn't say, so this is more of a "what's your opinion?".
[07:16:08] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:16:45] <EvanR> > reverse [2,3,5,7,11]
[07:16:46] <lambdabot>  [11,7,5,3,2]
[07:17:50] <ozzloy_> thanks
[07:18:02] <EvanR> even putting a number in for k and asking the question is problematic
[07:18:36] <EvanR> e.g. return every 2nd item, return every 1st item, return every 0th item?
[07:19:13] <EvanR> ok it says k is positive
[07:19:21] <ozzloy_> yeah, we need to switch as a species to 0 based indexing for everything
[07:20:51] *** Quits: moet (~moet@mobile-166-170-38-150.mycingular.net) (Ping timeout: 250 seconds)
[07:21:15] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:21:22] <EvanR> in [0..] every "5th item" is like 0, 5, 10, 15, ... my opinion xD
[07:22:17] <EvanR> even though, the 5th item (4) isn't there
[07:22:31] *** Joins: moet (~moet@mobile-166-170-38-148.mycingular.net)
[07:23:28] <EvanR> 4, 9, 14, 19 is just ridiculous!
[07:23:38] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[07:25:39] *** Quits: td_ (~td@94.134.91.233) (Ping timeout: 265 seconds)
[07:27:20] *** Joins: td_ (~td@94.134.91.227)
[07:29:31] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:a029:e568:3465:8d9f) (Quit: gone to sleep. ZZZzzz…)
[07:30:53] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[07:38:31] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:38:48] *** Joins: img (~img@user/img)
[07:39:31] <dsal> How come there's a reverse function but not a forward function?
[07:39:51] <dsal> :t forward
[07:39:52] <lambdabot> [a] -> [a]
[07:39:57] <dsal> > forward [1, 2, 3]
[07:39:58] <lambdabot>  [1,2,3]
[07:40:26] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[07:41:27] <EvanR> I know. There's even a "sideways"
[07:41:33] <EvanR> > transpose [1,2,3]
[07:41:34] <lambdabot>  error:
[07:41:34] <lambdabot>      • No instance for (Num [()]) arising from a use of ‘e_1123’
[07:41:35] <lambdabot>      • In the expression: e_1123
[07:41:43] <EvanR> shucks
[07:42:21] <dsal> Sideways is pretty neat.
[07:42:31] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c291:7247:e8a1:1137) (Ping timeout: 250 seconds)
[07:45:42] <Axman6> we have a filter, but where's unfilter? Give me back what's been taken!
[07:47:15] <EvanR> for that you need reversible computing, and we come full circle
[07:47:23] *** Quits: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com) (Quit: WeeChat 3.3)
[07:52:44] *** Joins: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com)
[07:54:16] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[07:54:21] <dsal> That sounds a little bit like something I did in a codebase...  What is that.
[07:57:22] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:57:33] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[07:57:34] <dsal> Oh yeah.  I use that for some enum mapping in postgres instances.  Given an `a -> ByteString` I could make a `ByteString -> Maybe a` for bidirectional coding.
[07:57:41] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:58:26] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[08:01:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:02:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:02:15] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:03:47] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 268 seconds)
[08:04:58] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[08:05:04] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:07:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:07:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:07:03] *** Joins: wroathe (~wroathe@user/wroathe)
[08:07:20] *** Joins: mbuf (~Shakthi@122.162.1.56)
[08:07:47] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[08:07:52] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:08:24] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[08:10:59] <sm> which is the best gui viewer for profiles currently ?
[08:14:35] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[08:15:21] *** Joins: deadmarshal (~deadmarsh@95.38.119.2)
[08:17:48] <sm> maybe maerwald will add it to ghcup, and I'll stop having to ask this
[08:21:05] *** Quits: MoC_ (~moc@user/moc) (Ping timeout: 250 seconds)
[08:21:13] *** Joins: MoC (~moc@user/moc)
[08:30:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[08:32:26] *** Joins: boxscape_ (~boxscape_@i59F67A8D.versanet.de)
[08:32:57] <ozzloy_> :t sidwats [1,2,3]
[08:32:58] <lambdabot> error:
[08:32:58] <lambdabot>     Variable not in scope: sidwats :: [a0] -> t
[08:33:16] <ozzloy_> :t sidways [1,2,3]
[08:33:17] <lambdabot> error:
[08:33:17] <lambdabot>     Variable not in scope: sidways :: [a0] -> t
[08:33:24] <ozzloy_> :t sideways [1,2,3]
[08:33:25] <lambdabot> error:
[08:33:25] <lambdabot>     Variable not in scope: sideways :: [a0] -> t
[08:33:49] <Axman6> ok, really dumb question - how do you run ghci so it can see pckages you have installed with cabal new-install foo
[08:34:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[08:34:41] <ozzloy_> :t transpose [[1],[2],[3]]
[08:34:42] <lambdabot> Num a => [[a]]
[08:35:02] <ozzloy_> > transpose [[1],[2],[3]]
[08:35:04] <lambdabot>  [[1,2,3]]
[08:35:18] <ozzloy_> transpose [[1,2,3]]
[08:35:25] <ozzloy_> > transpose [[1,2,3]]
[08:35:26] <lambdabot>  [[1],[2],[3]]
[08:35:45] <glguy> Axman6: I do: cabal repl --build-dep foo
[08:36:43] <Axman6> huh, ok, I have never done that
[08:37:09] <Axman6> I sense hacks: fake-package-0
[08:40:47] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[08:41:15] * sm discovers one command to generate a time-and-space profile from your default executable: 
[08:41:15] * sm stack run --profile --rts-options -p
[08:41:36] *** Joins: econo (uid147250@user/econo)
[08:42:05] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[08:42:29] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[08:48:07] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:48:07] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:48:07] *** Joins: wroathe (~wroathe@user/wroathe)
[08:52:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[08:53:49] <dsal> > transpose ["dog", "ole", "mem"]
[08:53:51] <lambdabot>  ["dom","ole","gem"]
[09:13:39] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[09:15:56] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 268 seconds)
[09:17:51] *** Quits: deadmarshal (~deadmarsh@95.38.119.2) (Ping timeout: 250 seconds)
[09:22:53] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[09:23:32] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:28:41] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[09:32:36] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[09:39:28] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: No route to host)
[09:40:26] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[09:40:47] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:44:41] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[09:46:47] *** Quits: moet (~moet@mobile-166-170-38-148.mycingular.net) (Ping timeout: 265 seconds)
[09:49:33] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[09:51:44] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:52:18] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[09:55:26] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[09:55:50] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[09:56:51] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[09:59:07] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:01:50] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[10:02:36] *** Quits: christiaanb (sid84827@lymington.irccloud.com) (Ping timeout: 256 seconds)
[10:04:02] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[10:04:11] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[10:05:49] *** Joins: christiaanb (sid84827@lymington.irccloud.com)
[10:06:59] *** Quits: philpax_ (sid516926@lymington.irccloud.com) (Ping timeout: 264 seconds)
[10:07:24] *** Joins: sagax (~sagax_nb@user/sagax)
[10:08:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:10:10] *** Joins: philpax_ (sid516926@lymington.irccloud.com)
[10:11:13] <ozzloy_> https://paste.tomsmeding.com/OfRIGoPO i'd like to rewrite minAndMax with foldr.  i wrote one version which uses foldr, but does 2n comparisons
[10:11:37] <ozzloy_> and i wrote a step function that would do 3n/2 comparisons instead
[10:11:49] <ozzloy_> that's minAndMaxHelper
[10:12:49] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:13:11] <ozzloy_> well, it's currently written as a function that takes 4 inputs, but it could easily be 2 tuples instead
[10:13:15] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:13:24] <ozzloy_> but i don't know how to convert the incoming list into a list of tuples
[10:13:44] <ozzloy_> even so, it feels like i'm missing something here
[10:14:44] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:16:13] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[10:19:02] *** Quits: mrianbloom (sid350277@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[10:19:02] *** Quits: teehemkay (sid14792@lymington.irccloud.com) (Ping timeout: 256 seconds)
[10:19:02] *** teehemkay_ is now known as teehemkay
[10:19:27] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Ping timeout: 268 seconds)
[10:19:27] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[10:20:00] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[10:22:12] *** Joins: mrianbloom (sid350277@ilkley.irccloud.com)
[10:22:26] *** Joins: teehemkay_ (sid14792@lymington.irccloud.com)
[10:22:39] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[10:24:26] *** Joins: deadmarshal (~deadmarsh@95.38.119.2)
[10:30:06] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Quit: WeeChat 3.3)
[10:30:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:31:31] *** Joins: rkrishnan (~user@122.167.19.65)
[10:40:16] *** Joins: mmhat (~mmh@55d47379.access.ecotel.net)
[10:40:44] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[10:40:51] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[10:43:30] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[10:44:00] *** Joins: aegon (~mike@174.127.249.180)
[10:45:45] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[10:53:31] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[10:53:55] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[10:56:39] *** Quits: deadmarshal (~deadmarsh@95.38.119.2) (Ping timeout: 250 seconds)
[11:01:34] <ozzloy_> anyone in here use spacemacs?
[11:04:26] *** Joins: michalz (~michalz@185.246.204.57)
[11:04:37] *** Joins: deadmarshal (~deadmarsh@95.38.119.2)
[11:05:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[11:05:11] *** Quits: xff0x (~xff0x@2001:1a81:5370:a900:85a3:6303:a932:32a1) (Ping timeout: 264 seconds)
[11:05:41] *** Joins: xff0x (~xff0x@2001:1a81:5370:a900:40b1:f398:28bb:45d6)
[11:07:39] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[11:08:47] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[11:09:39] *** Joins: neurocyte0132889 (~neurocyte@45.136.170.104)
[11:09:39] *** Quits: neurocyte0132889 (~neurocyte@45.136.170.104) (Changing host)
[11:09:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:11:15] *** Quits: DoseMeBoofy (~cads@ip-64-72-99-234.lasvegas.net) (Ping timeout: 268 seconds)
[11:17:04] *** Joins: retro_ (~retro@97e2ba2e.skybroadband.com)
[11:18:19] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[11:20:30] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[11:21:35] *** Joins: cads (~cads@ip-64-72-99-234.lasvegas.net)
[11:23:27] <johnjay> no
[11:23:41] <tomsmeding> ozzloy_: pairList (a:b:xs) = (a,b) : pairList xs ; pairList [] = [] ; pairList _ = error "odd length input"
[11:23:43] <tomsmeding> :p
[11:24:17] <tomsmeding> if you want to use one foldr reduction only, you could add a boolean to the state, indicating whether you're in the first or the second component of the pair
[11:24:38] <johnjay> is miranda similar to haskell? the paper i'm looking at has examples in miranda
[11:24:50] <ozzloy_> i ... could
[11:25:05] *** Joins: fef (~thedawn@user/thedawn)
[11:25:23] <ozzloy_> then i have to check that boolean, which seems like it defeats the 3n/2 thing
[11:25:41] <ozzloy_> tomsmeding, thanks for the feedback
[11:26:00] <tomsmeding> depending on whether you count that as a comparison :D
[11:26:19] <tomsmeding> johnjay: haskell is inspired by miranda iirc
[11:26:27] <ozzloy_> to check a boolean's value, doesn't something somewhere get compared with 0?
[11:26:42] <johnjay> ok.
[11:26:56] <tomsmeding> yeah, but to fold over a list, you also have to compare the top-level constructor with [] and with (:) each time ;)
[11:26:58] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:27:06] *** Joins: alzgh (~alzgh@user/alzgh)
[11:27:11] <tomsmeding> which happens implicitly in pattern matching
[11:27:20] <ozzloy_> ah
[11:27:38] <ozzloy_> it was always more than 3n/2
[11:27:39] <tomsmeding> and presumably that one doesn't count
[11:27:42] <ozzloy_> always has been
[11:27:48] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[11:27:49] <tomsmeding> always will be
[11:27:56] <ozzloy_> the mask falls away
[11:28:16] <tomsmeding> and the light reveals itself
[11:28:17] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:d1a7:a86b:c4f9:1801)
[11:29:21] <ozzloy_> thanks.  the truth is brutal, but i prefer living in reality
[11:29:31] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[11:30:01] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:30:19] <ozzloy_> well, for reals, thanks.  i'm off to bed
[11:30:35] <tomsmeding> have a good night :)
[11:32:37] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[11:37:17] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[11:38:43] *** Joins: hololeap (~hololeap@user/hololeap)
[11:39:17] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:41:49] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[11:42:08] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[11:44:14] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 265 seconds)
[11:44:53] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[11:46:08] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:51:57] *** Joins: chexum_ (~quassel@gateway/tor-sasl/chexum)
[11:51:58] *** Quits: deadmarshal (~deadmarsh@95.38.119.2) (Ping timeout: 256 seconds)
[11:51:59] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[11:52:00] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[11:52:51] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[11:54:52] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 265 seconds)
[11:55:18] *** Quits: boxscape_ (~boxscape_@i59F67A8D.versanet.de) (Quit: Connection closed)
[11:58:13] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:58:40] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[11:59:59] *** Joins: hololeap (~hololeap@user/hololeap)
[12:07:53] *** Joins: cfricke (~cfricke@user/cfricke)
[12:08:49] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:10:49] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:13:53] *** Joins: vysn (~vysn@user/vysn)
[12:17:13] <Profpatsch> If I export Foo(getFoo) instead of Foo(Foo, getFoo), will I still be able to construct Foo outside of the module?
[12:17:31] <Profpatsch> (I want to prevent that)
[12:17:36] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[12:20:19] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[12:22:31] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[12:22:35] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[12:23:06] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[12:24:14] <tomsmeding> no, because the constructor is not exported
[12:24:16] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[12:24:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:26:07] <tomsmeding> barring unsafeCoerce of course
[12:26:17] <tomsmeding> normal 'coerce' seems to be protected!
[12:27:34] <tomsmeding> Profpatsch: note that while not exporting the constructor prevents well-meaning people from constructing a Foo; malicious people can do unsafeCoerce and get a Foo anyway
[12:27:58] <boxscape_> :o how dare they
[12:28:21] <tomsmeding> still better than the enforcement of 'private' in C++ :p
[12:28:31] <boxscape_> true
[12:28:46] <tomsmeding> boxscape_: offtopic, I wonder, why the _
[12:29:02] <boxscape_> because I'm too lazy to log into matrix, where I'm logged in as boxscape
[12:29:12] <tomsmeding> ah :)
[12:30:07] *** Quits: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d) (Quit: You have been kicked for being idle)
[12:33:37] <lortabac> Profpatsch: you may still be able to construct a Foo if it is an instance of Num, IsString, IsList...
[12:35:43] <Profpatsch> tomsmeding: strange, it felt like Foo(getFoo) would also allow construction, at least I didn’t get an error.
[12:36:03] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[12:37:01] <tomsmeding> Profpatsch: seeing is believing
[12:37:50] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:38:13] <merijn> tomsmeding: Not with current levels of generative ML :p
[12:39:09] <kritzefitz> Profpatsch: Is "getFoo" a record field of "Foo"? In that case you can use it to update that field in existing "Foo"s outside of the module.
[12:39:53] *** Joins: chele (~chele@user/chele)
[12:41:51] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:43:08] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[12:45:57] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[12:46:37] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Client Quit)
[12:46:52] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[12:46:59] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:32] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:55:04] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:58:05] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:06:51] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[13:07:01] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:14:42] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 256 seconds)
[13:15:07] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:15:31] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[13:15:58] <Profpatsch> kritzefitz: yeah it is
[13:16:13] <Profpatsch> But it looked to me like (Foo "test") also worked
[13:20:16] <boxscape_> I finally understand how Applicative is a Monoid
[13:20:17] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[13:20:20] <boxscape_> pure :: Identity ~> f
[13:20:31] <boxscape_> (<*>) :: f `Day` f ~> f
[13:20:55] <boxscape_> (I think that's <*> anyway)
[13:21:20] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:22:08] <boxscape_> (type f ~> g = forall a . f a -> g a)
[13:24:02] <lortabac> boxscape_: I find this alternative formulation of Applicative simpler to understand: https://wiki.haskell.org/Typeclassopedia#Alternative_formulation
[13:24:27] <boxscape_> interesting
[13:24:33] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:25:16] *** Joins: deadmarshal (~deadmarsh@95.38.119.2)
[13:25:57] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[13:26:18] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[13:27:10] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[13:28:09] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:29:02] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:30:35] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:30:44] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:31:03] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[13:32:17] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:32:25] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:34:49] *** Quits: cads (~cads@ip-64-72-99-234.lasvegas.net) (Ping timeout: 250 seconds)
[13:35:45] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:35:53] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:37:13] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:37:20] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[13:37:21] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:37:40] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:37:47] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:37:50] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:38:04] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:38:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[13:39:26] <kuribas> dminuoso: good news, my pr was merged :)
[13:39:46] <kuribas> dminuoso: the one that adds the label to the error message in cassava.
[13:40:12] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[13:40:20] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:41:22] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[13:42:20] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[13:44:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 268 seconds)
[13:44:54] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[13:45:08] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[13:46:45] <dminuoso> kuribas: Yeah just saw.
[13:47:02] <dminuoso> Im tempted to just attoparsec through this csv instead though
[13:47:11] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[13:47:12] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[13:47:29] <dminuoso> With a first lexing phase, naively it seems rather simple
[13:47:34] *** Quits: davetapley (sid666@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[13:47:34] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[13:47:50] <dminuoso> Then I can simply use <?> to annotate parts
[13:48:08] *** Quits: gonz____ (sid304396@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: christiaanb (sid84827@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: awpr (uid446117@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:49:07] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Quit: Leaving.)
[13:49:14] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:49:40] *** Joins: bjs (sid190364@user/bjs)
[13:49:41] *** Joins: christiaanb (sid84827@lymington.irccloud.com)
[13:49:41] *** Joins: awpr (uid446117@lymington.irccloud.com)
[13:49:42] *** Joins: Pent (sid313808@lymington.irccloud.com)
[13:50:45] *** Joins: davetapley (sid666@uxbridge.irccloud.com)
[13:50:56] *** Joins: fef (~thedawn@user/thedawn)
[13:51:23] *** Joins: gonz____ (sid304396@lymington.irccloud.com)
[13:52:04] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:52:12] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:52:41] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[13:53:17] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:53:27] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:54:32] <kuribas> dminuoso: for my libraries, I am going to always use structured errors, instead of just `String`.
[13:55:09] *** Joins: alzgh (alzgh@user/alzgh)
[13:56:35] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[13:56:42] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:58:10] <Maxdamantus> Does that mean you're not allowed to change what errors are produced?
[13:58:31] <Maxdamantus> Since that would presumably be breaking your API.
[13:59:30] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[13:59:47] <Maxdamantus> (if the error just has an unstructured string, you should be able to change that because obviously noone is meant to match on a random string)
[14:00:17] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:00:41] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:01:55] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:02:04] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Client Quit)
[14:02:12] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:02:46] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:02:57] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:03:11] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:03:24] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:03:25] *** Joins: alzgh (~alzgh@user/alzgh)
[14:03:44] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:03:58] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:04:01] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:04:07] <kuribas> Maxdamantus: Typically I have "MyError c", with a data constructor "CustomErr c", so you can add your own error type.
[14:04:51] <kuribas> Maxdamantus: Or do you mean keeping backwards compatibility?
[14:05:28] <kuribas> No, I may add data constructors if necessary, potentially breaking code.
[14:05:51] <kuribas> Though it shouldn't change much once the API is stable.
[14:06:05] *** Joins: chele_ (~chele@user/chele)
[14:06:15] <Maxdamantus> Yes. Presumably the reason for structuring errors is that a user will match on the different errors, so they assume certain errors are produced under certain circumstances.
[14:06:56] <kuribas> Indeed.
[14:07:09] *** chele is now known as Guest6942
[14:07:09] *** chele_ is now known as chele
[14:07:17] <kuribas> But if the user only wants to catch some errors, it can be still backwards compatible.
[14:07:19] <Maxdamantus> Linux isn't allowed to decide to replace EPERM with a different set of more granular permission errors.
[14:08:02] <kuribas> like: case err of SomeErrorICareAbout foo bar -> process foo bar; _ -> otherCases
[14:08:45] *** Quits: Guest6942 (~chele@user/chele) (Ping timeout: 265 seconds)
[14:09:07] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:09:21] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[14:10:32] <kuribas> Maxdamantus: for my SQL library, the error messages haven't changed lately.
[14:10:32] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:12:17] <kuribas> Maxdamantus: https://hackage.haskell.org/package/hasqlator-mysql-0.1.0/docs/Database-MySQL-Hasqlator.html#t:SQLError
[14:12:25] *** Joins: mark___ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de)
[14:12:28] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[14:14:26] *** Joins: __monty__ (~toonn@user/toonn)
[14:16:16] *** Joins: gentauro (~gentauro@user/gentauro)
[14:17:27] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[14:18:17] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[14:18:17] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:20:22] <Maxdamantus> Does the `SQLError` data constructor include connection errors as well as errors produced by the SQL server (eg, SQL syntax error due to malformed query, or integrity constraint violation due to state of database)?
[14:20:57] <Maxdamantus> I'd probably be inclined to be more granular in that case, but yeah, at some point you just have to have a string.
[14:21:16] *** Joins: gentauro (~gentauro@user/gentauro)
[14:23:05] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:23:11] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[14:23:19] *** Joins: mastarija (~mastarija@2a05:4f46:e06:ff00:a943:a997:c897:f5b)
[14:23:55] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[14:24:30] <Maxdamantus> Oh, looks like there are different errors for those cases raised by mysql-haskell.
[14:24:56] <kuribas> Maxdamantus: hmm, it looks like I am never throwing that one.
[14:25:06] <kuribas> I might as well delete it then.
[14:25:23] <kuribas> I guess my original idea was to rethrow the ones from mysql-haskell.
[14:26:28] <kuribas> Maxdamantus: it's perhaps a bad example, because these are the kinds of errors you typically don't catch.
[14:26:46] <Maxdamantus> Errors you don't catch should just be strings imo.
[14:26:46] <kuribas> Maxdamantus: At least not in a granular way, you normally assume the queries are correct.
[14:27:48] <kuribas> Perhaps... But it's easy to go from structured to a string.  The other way is not true.
[14:28:11] *** Joins: pfurla (~pfurla@177.142.247.67)
[14:28:31] *** Joins: gentauro (~gentauro@user/gentauro)
[14:28:56] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:30:35] *** Joins: alx741 (~alx741@181.196.69.19)
[14:31:25] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[14:33:45] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:d1a7:a86b:c4f9:1801) (Ping timeout: 250 seconds)
[14:34:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:35:23] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[14:36:25] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:39:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[14:40:10] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[14:41:04] *** Quits: mastarija (~mastarija@2a05:4f46:e06:ff00:a943:a997:c897:f5b) (Quit: Leaving)
[14:41:53] *** Joins: gentauro (~gentauro@user/gentauro)
[14:43:50] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:44:58] *** Joins: pfurla_ (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[14:46:48] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[14:46:53] *** Joins: gentauro (~gentauro@user/gentauro)
[14:48:52] *** Quits: pfurla (~pfurla@177.142.247.67) (Ping timeout: 265 seconds)
[14:48:52] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:51:36] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:51:53] *** Joins: gentauro (~gentauro@user/gentauro)
[14:52:57] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:53:10] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:55:00] *** Quits: gonz____ (sid304396@lymington.irccloud.com) (Ping timeout: 256 seconds)
[14:55:06] *** Quits: acertain (sid470584@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[14:55:06] *** Quits: amir (sid22336@user/amir) (Ping timeout: 268 seconds)
[14:55:35] *** Quits: whez (sid470288@lymington.irccloud.com) (Ping timeout: 264 seconds)
[14:55:43] *** Quits: integral (sid296274@user/integral) (Ping timeout: 268 seconds)
[14:56:20] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 268 seconds)
[14:56:20] *** Quits: scav (sid309693@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[14:56:42] *** Quits: cln (sid336875@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[14:57:34] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[14:57:34] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Ping timeout: 268 seconds)
[14:57:48] *** Joins: cln (sid336875@ilkley.irccloud.com)
[14:57:56] *** Joins: cv (~cv@103.142.31.135)
[14:57:59] *** Joins: bw (sid2730@user/betawaffle)
[14:58:12] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 268 seconds)
[14:58:15] *** Joins: gonz____ (sid304396@lymington.irccloud.com)
[14:58:18] *** Joins: acertain (sid470584@hampstead.irccloud.com)
[14:58:18] *** Joins: amir (sid22336@user/amir)
[14:58:46] *** Joins: integral (sid296274@user/integral)
[14:58:47] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[14:58:48] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 268 seconds)
[14:58:52] *** Joins: scav (sid309693@helmsley.irccloud.com)
[14:59:08] *** Joins: gentauro (~gentauro@user/gentauro)
[14:59:31] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[14:59:52] *** Joins: astra` (sid289983@user/amish)
[14:59:53] *** Joins: idnar (sid12240@debian/mithrandi)
[15:00:22] *** Joins: glowcoil (sid3405@tinside.irccloud.com)
[15:00:29] *** Joins: whez (sid470288@lymington.irccloud.com)
[15:00:33] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:03:51] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:06:24] *** Joins: gentauro (~gentauro@user/gentauro)
[15:06:54] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[15:06:54] *** Quits: AndreasK__ (sid320732@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[15:07:28] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[15:09:09] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[15:09:22] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:2c29:7076:9399:3f2e)
[15:09:49] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[15:10:18] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:10:18] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:10:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:11:12] *** Joins: AndreasK__ (sid320732@uxbridge.irccloud.com)
[15:11:12] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Max SendQ exceeded)
[15:11:24] *** Joins: gentauro (~gentauro@user/gentauro)
[15:12:18] *** Joins: rubin55 (sid175221@hampstead.irccloud.com)
[15:13:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e14a:d90e:46d2:87c4) (Ping timeout: 265 seconds)
[15:13:02] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:15:23] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[15:15:38] *** Quits: michalz (~michalz@185.246.204.57) (Read error: No route to host)
[15:16:09] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:16:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:16:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:17:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:17:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:17:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:17:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:17:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:18:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:18:39] *** Joins: gentauro (~gentauro@user/gentauro)
[15:19:47] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[15:19:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:20:33] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[15:21:05] <cv> Iam wrting a simple API
[15:21:06] <cv> I am planning to have formatted logs with timestamp log level etc
[15:21:06] <cv> I am planning just write a simple function that takes some arguments and formats the message before printing it to  console or file
[15:21:07] <cv> Is this alright or should I use some library like hslogger
[15:21:51] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[15:22:06] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:26:44] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:27:44] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:32:15] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[15:33:26] <dminuoso> It's not really for us to say whether its alright.
[15:33:32] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:33:33] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[15:35:12] <dminuoso> Personally Im a fan of monad-logger because it provides a clean separation between the logging interface and the implementation. Sadly it just pulls in quite a few dependencies.
[15:35:19] *** Joins: tengu1 (~tengu1@cpe-70-121-244-14.neb.res.rr.com)
[15:36:19] <dminuoso> So even if I handrolled it, I would do the same.
[15:36:42] <dminuoso> newtype LoggingT m a = LoggingT { runLoggingT :: (Loc -> LogSource -> LogLevel -> LogStr -> IO ()) -> m a }
[15:36:47] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:93ca:4590:d6e0:969f)
[15:37:22] <dminuoso> That way your code that does the logging is completely decoupled from how logging occurs
[15:38:04] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:39:21] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:41:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:42:15] *** Quits: cv (~cv@103.142.31.135) (Quit: Client closed)
[15:42:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:44:18] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:45:07] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:47:21] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:47:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:48:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:49:46] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:50:55] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:53:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:53:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:53:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:53:54] *** Quits: bliminse_ (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[15:53:55] *** Quits: mark___ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:53:56] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:54:47] *** Quits: deadmarshal (~deadmarsh@95.38.119.2) (Ping timeout: 250 seconds)
[15:55:32] *** Joins: stef204 (~stef204@user/stef204)
[15:55:39] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[15:56:50] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[15:57:23] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[16:01:22] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[16:02:28] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:04:09] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[16:07:32] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:07:54] *** Joins: deadmarshal (~deadmarsh@95.38.119.2)
[16:08:17] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:10:37] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:12:38] *** Quits: deadmarshal (~deadmarsh@95.38.119.2) (Ping timeout: 256 seconds)
[16:12:58] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[16:14:03] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:16:02] *** Joins: mark___ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de)
[16:16:33] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[16:17:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:18:37] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[16:19:49] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:22:01] *** Quits: pfurla_ (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53) (Quit: gone to sleep. ZZZzzz…)
[16:22:47] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[16:23:50] *** Quits: Charles_Attends (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[16:24:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:24:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:25:03] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[16:25:37] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:26:24] *** Quits: mmhat (~mmh@55d47379.access.ecotel.net) (Quit: WeeChat 3.3)
[16:28:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[16:30:12] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:31:23] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:31:27] *** Joins: fef (~thedawn@user/thedawn)
[16:34:26] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[16:35:12] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[16:35:57] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[16:37:11] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:39:41] *** Joins: miled (~miled@37.211.46.14)
[16:39:51] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 250 seconds)
[16:40:10] <miled> Hey guys
[16:40:32] <miled> could anyone help me in the Test section 
[16:40:51] <miled> Uploaded file: https://uploads.kiwiirc.com/files/31e65220f6e6fa9172af43d86c4a8d60/pasted.txt
[16:41:37] <maerwald> what is the question
[16:42:06] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:42:16] <miled> I want to test the function myOr using generated inputs tests
[16:42:22] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53) (Quit: gone to sleep. ZZZzzz…)
[16:43:16] <maerwald> miled: https://www.stackbuilders.com/news/a-quickcheck-tutorial-generators
[16:44:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[16:46:13] *** Joins: deadmarshal (~deadmarsh@95.38.119.2)
[16:47:49] <kuribas> miled: your myOr function is not total.
[16:47:56] <kuribas> miled: try "myOr []"
[16:48:33] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[16:49:14] <kuribas> miled: also: 'x == True' == x
[16:49:26] <kuribas> > let x = True in x == True
[16:49:28] <lambdabot>  True
[16:49:31] <kuribas> > let x = True in x
[16:49:33] <lambdabot>  True
[16:50:15] <xddq[m]> Uhmm.. I want to convert a list of strings like ```["hello","world"]``` to [hello, world]
[16:50:15] <xddq[m]> Is there some simple function for this?
[16:50:15] <xddq[m]> ```show ["hello","world"]``` results in ```"[\"hello\",\"world\"]"``` which results in ```["hello","world"]``` when calling print on that string.
[16:50:42] <dminuoso> xddq[m]: readMaybe gives you roundtripping via show
[16:50:47] <dminuoso> At least if the instances behave correctly
[16:50:54] *** Quits: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8) (Quit: Leaving)
[16:50:58] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:51:30] <dminuoso> % import Text.Read (readMaybe)
[16:51:30] <yahb> dminuoso: 
[16:51:42] <dminuoso> % let x :: Maybe [String]; x = readMaybe (show ["hello", "world"]) in x
[16:51:42] <yahb> dminuoso: Just ["hello","world"]
[16:52:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:52:28] *** Joins: nschoe (~quassel@178.251.84.79)
[16:53:34] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[16:54:41] <xddq[m]> dminuoso: Thank you for the answer. But the result is ["hello","world"] and I want it to become [hello, world]
[16:55:05] <boxscape_> you want to print [hello, world] to the terminal?
[16:55:23] <xddq[m]> yeah, to a file
[16:55:51] <kuribas> > show ["hello", "world"]
[16:55:52] <lambdabot>  "[\"hello\",\"world\"]"
[16:56:18] <dminuoso> xddq[m]: Ideally just write this manually.
[16:56:19] <kuribas> xddq[m]: you want to remove the quotes?
[16:56:21] <boxscape_> > putStrLn $ "[" <> intercalate "," ["hello", "world"] <> "]"
[16:56:22] <lambdabot>  <IO ()>
[16:56:25] <boxscape_> % putStrLn $ "[" <> intercalate "," ["hello", "world"] <> "]"
[16:56:25] <yahb> boxscape_: [hello,world]
[16:56:34] <dminuoso> Neither `show` nor `read` are good mechanisms for actual serialization or deserializatoin
[16:56:41] <dminuoso> They are developer shortcuts for quick introspection at best
[16:56:49] <kuribas> > filter (/= '"') $ show ["hello", "world"]
[16:56:50] <lambdabot>  "[hello,world]"
[16:57:00] <dminuoso> kuribas: Yes, and if you have "hello\""? 
[16:57:12] <kuribas> > filter (/= '"') $ show ["hello\"", "world"]
[16:57:13] <lambdabot>  "[hello\\,world]"
[16:57:29] <boxscape_> % putStrLn $ "[" <> intercalate "," ["hello\"", "world"] <> "]"
[16:57:29] <yahb> boxscape_: [hello",world]
[16:58:42] <dminuoso> The solution is to simply do: let xs = ["hello", "world"] in "[" <> intercalate ", " <> "]"
[16:58:48] <xddq[m]> boxscape_: that's perfect, thank you! 
[16:58:50] <dminuoso> Yup, what boxscape_ wrote
[16:59:05] *** Joins: cv (~cv@103.142.31.135)
[16:59:24] <dminuoso> xddq[m]: Also, if you want to take full control of output, consider a prettyprinter library like `prettyprinter` or `pretty`
[16:59:33] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:59:41] <dminuoso> Very useful if you want to do some nice human readable formatting
[16:59:58] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:00:02] <dminuoso> But perfectly useable for machine readable content as well
[17:00:06] <dminuoso> We generate config files with it :)
[17:01:10] <dminuoso> (Altenative f, Foldable t) => t (f a) -> f a
[17:01:16] <dminuoso> Does this exist in base?
[17:01:53] *** Quits: miled (~miled@37.211.46.14) (Quit: Connection closed)
[17:02:09] <opqdonut> :t Control.Applicative.Alternative.asum
[17:02:10] <lambdabot> error:
[17:02:10] <lambdabot>     Not in scope: ‘Control.Applicative.Alternative.asum’
[17:02:10] <lambdabot>     No module named ‘Control.Applicative.Alternative’ is imported.
[17:02:20] <opqdonut> well anyway, asum :: (Foldable t, Alternative f) => t (f a) -> f a
[17:02:42] <opqdonut> oh huh that's from the monadplus package, I thought I was in base
[17:02:49] <kuribas> @hoogle asum
[17:02:49] <lambdabot> Data.Foldable asum :: (Foldable t, Alternative f) => t (f a) -> f a
[17:02:49] <lambdabot> Data.Conduit.Combinators asum :: (Monad m, Alternative f) => ConduitT (f a) o m (f a)
[17:02:49] <lambdabot> Protolude asum :: (Foldable t, Alternative f) => t (f a) -> f a
[17:02:53] <boxscape_> % newtype RawString = RawString {getRawString :: String}
[17:02:53] <yahb> boxscape_: 
[17:02:55] <dminuoso> opqdonut: Ah! Hoogle apparently failed when you switch those constraints around
[17:02:56] <boxscape_> % instance Show RawString where show = getRawString
[17:02:56] <yahb> boxscape_: 
[17:02:59] <kuribas> Pretty sure that's in base
[17:03:00] <dminuoso> Thanks.
[17:03:03] <boxscape_> % print . map RawString $ ["hello", "world"]
[17:03:03] <yahb> boxscape_: [hello,world]
[17:03:15] <dminuoso> opqdonut: And it's in base, its just not imported in yahb
[17:03:19] <dminuoso> Anyway. Thanks!
[17:03:30] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[17:03:31] <opqdonut> yeah so it seems
[17:03:41] <kuribas> https://hackage.haskell.org/package/base-4.15.0.0/docs/Data-Foldable.html#v:asum
[17:03:49] <boxscape_> (violating the unspoken Show law I suppose)
[17:03:54] <dminuoso> Oh the module specification is wrong
[17:03:57] <kuribas> :t Data.Foldable.asum
[17:03:58] <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
[17:03:58] <dminuoso> its either Data.Foldable or Control.Applicative
[17:04:42] <opqdonut> I ended up here from google: https://hackage.haskell.org/package/monadplus-1.4.2/docs/Control-Applicative-Alternative.html
[17:04:46] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:04:48] <opqdonut> trying to land in the control.applicative docs
[17:05:23] <xddq[m]> Why did you use "<>" instead of "++" for ```"[" <> intercalate ", " ["hello","world"] <> "]"``` ? Do you always use <> on lists? Is there a difference?
[17:05:35] <boxscape_> xddq[m] you can use either, <> is more general
[17:06:06] <boxscape_> google can be pretty terrible for searching hackage, I've been confused at times as to why the API is very different from what I expect, before realizing it took me to a ten-year old version of the library
[17:06:06] <dminuoso> <> being more general means less refactoring if you swap things out later
[17:06:22] <dminuoso> xddq[m]: Consider, if you later used prettyprinter, <> still remains the operator to concatenate two documents
[17:06:27] <dminuoso> But if you had used ++, you'd have to replace that
[17:06:47] <xddq[m]> interesting, thanks!
[17:06:56] <dminuoso> Added benefit of ++ is, if you're using variables, it's more obvious what the arguments types are
[17:06:59] <kuribas> boxscape_: doesn't ++ have better optimization?
[17:07:04] <kuribas> with rewrite rules?
[17:07:53] <dminuoso> If you're relying on rewrite rules on String for acceptable performance, you probably shouldn't be using String in the firstp lace
[17:08:08] <dminuoso> Or lists in general
[17:08:26] <dminuoso> So Ill file this under premature optimization
[17:08:33] <boxscape_> kuribas (<>) is defined as (++) and is being inlined, so I would expect the performance to be the same as long as it's clear that it's being instantiated to (++) at the call site, but I'm not super familiar with how RULES work so, idk
[17:08:46] <dminuoso> boxscape_: The inlining happens in the simplifier
[17:08:49] <dminuoso> Where do RULES fire?
[17:08:56] <boxscape_> I don't know
[17:09:13] <dminuoso> Ah, rules are applied in the simplifier
[17:09:29] <boxscape_> so should be equivalent then?
[17:09:35] <dminuoso> Yes? No?
[17:09:39] <boxscape_> ok :)
[17:09:39] <yushyin> Maybe?
[17:09:50] <dminuoso> The interaction between simplifier steps are incredibly subtle and they all influence each other
[17:11:55] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:11:59] <dminuoso> Can GHC inline recursive functions to a degree?
[17:12:33] <dminuoso> That is, would it ever turn `"a" ++ "bc" into "abc"?
[17:13:02] * dminuoso remembers GHC not inlining recursive things as a fundamental rule, but is not quite sure whether he misremembers
[17:14:07] <maerwald> dminuoso: top-level recursion yes
[17:14:29] <geekosaur> it doesn't inline when recursion is directly involved, and there's no direct recursion in "a" ++ "bc". but it also doesn't do constant folding
[17:14:47] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 264 seconds)
[17:14:48] <maerwald> e.g. https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.Base.html#map
[17:14:49] <boxscape_> just tested it, the Core only contains "abc"
[17:14:49] <dminuoso> geekosaur: The definition of (++) is recursive
[17:14:51] <maerwald> doesn't inline
[17:15:00] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[17:15:03] <maerwald> but there are rewrite rules
[17:15:15] <boxscape_> (in fact it only contains "abc"#)
[17:15:19] <geekosaur> right, but the definition doesn't matter here, the rewrite rule would be on ++ not its definition
[17:15:33] <geekosaur> huh, so it does constant fold
[17:15:38] <dminuoso> "++"    [~1] forall xs ys. xs ++ ys = augment (\c n -> foldr c n xs) ys
[17:15:40] <dminuoso> Ah
[17:16:14] *** Joins: michalz (~michalz@185.246.204.121)
[17:16:46] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[17:17:25] <cv> How do I convert base64 encoded string to png
[17:17:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:19:08] <maerwald> what did you encode? :D
[17:19:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[17:19:59] <boxscape_> also tested this: the core representation of two functions is identical if you use (<>) for one and (+) for the other. ( kuribas , dminuoso )
[17:20:45] <boxscape_> (...and when (<>) is instantiated to [], of course)
[17:21:24] <dminuoso> boxscape_: Perhaps, I still wouldn't rely on it.
[17:21:30] <boxscape_> that's fair
[17:21:46] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 256 seconds)
[17:21:56] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:22:03] *** Joins: drdo1 (~drdo@roach0.drdo.eu)
[17:22:05] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 265 seconds)
[17:22:08] <dminuoso> Use what is more expressive/maintainable, and worry about performance later iff profiling determines it to be a hot spot
[17:22:08] *** Quits: drdo (~drdo@roach0.drdo.eu) (Read error: Connection reset by peer)
[17:22:09] *** drdo1 is now known as drdo
[17:23:01] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Ping timeout: 245 seconds)
[17:23:15] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:23:57] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[17:24:15] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[17:24:37] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[17:25:23] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[17:25:49] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[17:26:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[17:27:16] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[17:27:37] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[17:27:53] *** Quits: deadmarshal (~deadmarsh@95.38.119.2) (Ping timeout: 265 seconds)
[17:27:57] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[17:29:20] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:30:18] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 265 seconds)
[17:33:26] *** Joins: ystael (~ystael@user/ystael)
[17:34:01] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[17:34:12] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[17:34:16] <boxscape_> % unpackCString# "foo"# -- what exactly happens here? Does GHC place a C String "foo\0" at address some address aliased to "foo"# when I use "foo"#? Or is the C String created by the call to unpackCString?
[17:34:16] <yahb> boxscape_: "foo"
[17:35:03] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:35:09] <boxscape_> in other words, if I use "foo"# for something other than unpackCString#, is the C String not created?
[17:35:41] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:37:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:37:25] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[17:39:35] <geekosaur> my knowledge is limited here but I gather "foo"# is a packed utf8 string with a nul at the end
[17:39:39] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[17:39:53] <geekosaur> so it just happens to work with unpackCString# as long as it doesn't have an embedded NUL
[17:39:56] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[17:40:06] <boxscape_> hm I see
[17:40:18] *** Joins: jkaye (~jkaye@2601:281:8300:7530:3845:93d:d6fd:67fb)
[17:40:18] <geekosaur> I don't know how the unboxed string rep works if there's a NUL in the middle; it may be encoded
[17:40:25] <boxscape_> I guess what's confusing me is that the type of "foo"# is Addr#, which doesn't sound very much like it's String-like
[17:40:51] <geekosaur> I do know for certain that ghc does not store string literals in their normal boxed form, but in a packed representation
[17:40:52] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:40:59] <boxscape_> ok
[17:41:18] <geekosaur> which is why IsString and friends were so easy to add
[17:41:39] <boxscape_> % unpackCString# "fo\0o"# -- geekosaur there you go
[17:41:39] <yahb> boxscape_: "fo"
[17:42:03] <geekosaur> right, as I said, it just happens to work as long as there's no embedded NUL
[17:42:04] <maerwald> geekosaur: IsString instance for String isn't even valid Haskell2010 :D
[17:42:08] <boxscape_> right, ok
[17:42:11] <opqdonut> I love how simple the source of unpackCString# is
[17:42:14] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[17:42:27] <geekosaur> but "fo\0"# used as a packed string literal doesn't choke on the \0
[17:42:28] <opqdonut> https://hackage.haskell.org/package/ghc-prim-0.8.0/docs/src/GHC.CString.html#unpackCString%23
[17:42:46] <opqdonut> just straightforward recursive list generation, not even using build
[17:42:49] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[17:44:49] <boxscape_> Okay so if I'm understanding correctly, "foo"# really is morally a String literal, not an address, and the reason its type is Addr# is just that the address is how you access the resulting String
[17:45:34] <geekosaur> the only place these literals live is in the initialized data segment of the executable, not the heap, so Addr# is the only way to represent their address
[17:45:34] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:45:49] <boxscape_> ok
[17:46:13] <geekosaur> (normally)
[17:46:36] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:46:42] <boxscape_> (I guess ideally I'd like to see them be of type `newtype String# = String# Addr#` or something)
[17:47:49] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:48:00] <geekosaur> I don't think newtypes exist at the level those strings are normally found (Core)
[17:48:03] <hippoid> is reading a csv from stdin and then creating a data type considered parsing?
[17:48:15] <geekosaur> it's a form of parsing, yes
[17:48:24] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53) (Quit: gone to sleep. ZZZzzz…)
[17:48:25] <boxscape_> geekosaur right but I can create them in surface haskell as well. I guess it's not a common thing though
[17:48:33] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:48:47] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:48:47] <geekosaur> that said, "csv" is really poorly defined and goes all over the place, you are better off using a library like cassava instead of trying to do it yourself
[17:48:55] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:49:43] <hippoid> ok thanks... going to check out cassava
[17:49:50] <geekosaur> boxscape_, right, but then we don't have newtype Int# either, the type of 3# is Int# which is primitive
[17:50:07] <geekosaur> because when these normally come up you're down in primitive-land
[17:50:21] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:50:30] <boxscape_> yes, but the type there makes much more sense to me - 3# is some sort of integer-like type. Whereas "foo"# is a string literal, not an address
[17:50:39] <boxscape_> s/type/value
[17:51:14] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:52:40] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:52:48] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:52:48] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:53:00] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:53:46] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[17:53:59] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:54:14] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:54:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:54:21] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:54:21] *** Joins: wroathe (~wroathe@user/wroathe)
[17:57:11] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Client Quit)
[17:57:52] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[17:59:36] *** Quits: cv (~cv@103.142.31.135) (Quit: Client closed)
[18:02:54] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 260 seconds)
[18:03:11] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[18:04:31] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[18:09:21] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[18:12:11] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[18:14:46] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:17:10] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[18:18:29] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:18:29] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:18:29] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[18:19:32] *** Joins: DNH (~DNH@2a02:8109:b740:2c4:5132:6531:a874:2df6)
[18:20:54] *** Joins: max22- (~maxime@2a01cb0883359800b81dd38911f0cee9.ipv6.abo.wanadoo.fr)
[18:23:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:24:19] *** Joins: pfurla (~pfurla@201.17.118.230)
[18:24:23] *** Quits: mark___ (~a@p200300ef973db186502293e1a26d2ca1.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[18:24:45] *** Joins: mark___ (~a@p200300ef973db1f2502293e1a26d2ca1.dip0.t-ipconnect.de)
[18:30:30] <merijn> boxscape_: String literals are already more primitive
[18:30:43] <boxscape_> more primitive than what?
[18:31:02] <merijn> boxscape_: String literals are stored as specific byte arrays in the binary that get converted to String lazily
[18:31:20] <merijn> boxscape_: Text uses this to have a more efficient conversion for String literals when using OverloadedStrings
[18:31:30] <boxscape_> okay
[18:32:26] <merijn> (basically it has a rewrite rule that converts "internalToString . stringToText" with "internalToText"
[18:33:35] <boxscape_> I see, interesting
[18:35:08] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Excess Flood)
[18:35:28] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:35:45] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:35:45] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:35:45] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[18:43:17] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[18:43:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[18:48:03] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[18:48:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 264 seconds)
[18:52:40] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[18:54:08] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[18:54:50] *** Quits: tengu1 (~tengu1@cpe-70-121-244-14.neb.res.rr.com) (Quit: Client closed)
[18:56:11] *** Joins: johnjay (~pi@192.142.100.50)
[19:11:33] *** Joins: xkuru (~xkuru@user/xkuru)
[19:18:41] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Quit: Client closed)
[19:19:21] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[19:23:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[19:26:16] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Quit: Connection closed)
[19:30:08] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (Quit: You have been kicked for being idle)
[19:32:40] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[19:34:08] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:36:00] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:38:54] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[19:40:30] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:41:10] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:41:16] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:93ca:4590:d6e0:969f) (Quit: WeeChat 2.8)
[19:47:24] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[19:47:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:47:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:47:46] *** Joins: wroathe (~wroathe@user/wroathe)
[19:51:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:53:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:53:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[19:54:05] *** Joins: zebrag (~chris@user/zebrag)
[19:55:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[19:56:24] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:58:50] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:59:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:03:03] *** Joins: EvanR (~evan@user/evanr)
[20:05:46] *** Joins: Lycurgus (~juan@98.4.112.204)
[20:09:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:12:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Remote host closed the connection)
[20:13:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:14:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:14:05] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[20:14:17] *** Quits: nschoe (~quassel@178.251.84.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:14:56] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:23:52] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[20:24:18] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[20:26:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:31:05] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:32:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:33:13] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[20:35:36] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:35:53] *** Joins: moet (~moet@mobile-166-171-251-63.mycingular.net)
[20:37:31] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[20:38:54] *** Joins: img (~img@user/img)
[20:39:03] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53)
[20:39:14] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[20:40:15] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[20:42:40] *** Quits: tired- (~tired@user/tired) (Quit: /)
[20:43:16] *** Joins: tired (~tired@user/tired)
[20:44:04] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:45:04] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[20:47:09] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:49:53] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[20:50:56] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[20:52:49] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[20:54:17] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:55:58] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:57:22] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Excess Flood)
[20:57:29] *** Quits: mbuf (~Shakthi@122.162.1.56) (Quit: Leaving)
[20:57:48] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[20:57:48] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[20:57:48] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[20:57:54] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[20:58:36] *** Quits: theproffesor (~theproffe@user/theproffesor) (Quit: Leaving)
[20:59:04] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[21:00:08] <oats> does `base` not contain any functions for working with directories?
[21:00:24] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:01:02] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[21:01:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:02:15] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[21:02:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:05:20] *** Joins: EvanR (~evan@user/evanr)
[21:07:35] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[21:08:07] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[21:10:00] <maerwald> no
[21:10:57] <maerwald> directories make for a poor cross-platform abstraction, so either you use unix/Win32 or you hope `directory` does what you think it does
[21:12:38] *** Quits: img (~img@user/img) (Ping timeout: 265 seconds)
[21:12:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[21:14:16] *** Joins: deadmarshal (~deadmarsh@95.38.119.2)
[21:14:33] <oats> gotcha
[21:14:40] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[21:15:39] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:16:44] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[21:17:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 268 seconds)
[21:18:38] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:20:51] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[21:22:18] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[21:26:27] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:27:23] *** Quits: jkaye (~jkaye@2601:281:8300:7530:3845:93d:d6fd:67fb) (Ping timeout: 264 seconds)
[21:27:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[21:27:48] <EvanR> this is encouraging... trying to update my old ghc by doing ghcup, curl complains about certs, and the link for more info is at haxx.se which is a redirect xD
[21:27:52] <EvanR> https://i.imgur.com/h6paSpY.png
[21:30:29] <jneira[m]> you always can add `-k` but the script does subsequent curl calls to haskell.org andthey will fail as well
[21:31:37] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[21:32:23] <EvanR> tried to add latest glfw-b as a dep, but base is too old gotta update ghc. curl is too old gotta update OSX I guess. OSX too old gotta buy a new Mac xD
[21:32:46] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:32:50] <jneira[m]> if i browse the url the certificate seems to be ok, with expired date `Thu, 27 Jan 2022 06:48:31 GMT`
[21:33:05] <monochrom> I cannot reproduce the certificate error.
[21:33:11] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[21:33:32] <monochrom> One of us has a compromised internet connection.
[21:33:57] *** Joins: alzgh (~alzgh@user/alzgh)
[21:34:15] <Successus> Hi, does ghc 8.8.4 use editline? I was trying to set up some keybindings in ~/.editrc but none of them work in ghci. For example I tried bind ^R em-next-word. Could you please tell me if there is some error, or does ghc not read that file?
[21:35:03] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[21:35:31] <EvanR> is haxx.se a normal thing to see in a curl error message
[21:35:32] <monochrom> It uses haskeline. I forgot where is the doc for the config.
[21:35:38] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 256 seconds)
[21:35:56] <monochrom> curl.haxx.se is curl's website.
[21:35:57] <awpr> I do remember haxx.se being the website for cURL
[21:36:29] <EvanR> ok good
[21:36:30] <Successus> yes it is the website of curl
[21:36:55] <EvanR> it redirects to curl.se which is saner looking
[21:36:57] <Successus> alright so I will find documentation for haskeline. Just to confirm it uses haskeline by default, no need to install it?
[21:37:03] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:37:13] <awpr> brb checking if backdoor.nsa.gov is available to register for a new crypto library
[21:37:28] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[21:37:46] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 265 seconds)
[21:37:59] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:38:05] <monochrom> https://github.com/judah/haskeline has links to how to config.
[21:38:26] <Successus> Alright, thank you very much!
[21:39:00] <EvanR> I wonder if this has to do with lets encrypt
[21:40:15] *** Joins: quarkyalice (~quarkyali@user/quarkyalice)
[21:40:20] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:41:44] <monochrom> Ah, missed one question. Yes, ghci already uses haskeline out of the box, nothing to install.
[21:41:52] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[21:41:56] <gentauro> 19:05 < monochrom> curl.haxx.se is curl's website
[21:42:03] *** Joins: jbox (~jbox@user/jbox)
[21:42:04] <gentauro> and where you can get mozillas CA's ;0
[21:42:06] <gentauro> ;)
[21:42:30] <monochrom> I don't understand the joke.
[21:42:50] <gentauro> `https://curl.haxx.se/ca/cacert.pem`
[21:43:06] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[21:43:11] <Successus> great to hear, thank you!
[21:43:19] <gentauro> `curl \     --remote-name \     --time-cond \     cacert.pem \     https://curl.haxx.se/ca/cacert.pem`
[21:43:22] <gentauro> :)
[21:43:45] <gentauro> I use those when I code my `http-clients` from scratch in Haskell (when I need support for TLS)
[21:44:03] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Ping timeout: 265 seconds)
[21:44:11] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[21:44:24] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:44:32] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[21:44:41] *** Joins: jkaye (~jkaye@2601:281:8300:7530:75fb:eacf:8ea0:5f8)
[21:44:44] *** Joins: alzgh (~alzgh@user/alzgh)
[21:45:23] <monochrom> OK I see, tangential.
[21:46:25] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:47:47] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[21:48:45] <maerwald> http-clients?
[21:48:52] <Successus> I found this if someone is interested http://trac.haskell.org/haskeline/wiki/UserPrefs
[21:49:00] <Successus> it's old link
[21:49:11] <geekosaur> isn't trac long gone?
[21:49:19] *** Joins: rusty (~rustyboy@82.77.237.221)
[21:49:22] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[21:52:07] *** Quits: dhruvasagar (~dhruvasag@49.207.218.36) (Quit: WeeChat 3.3)
[21:52:19] <maerwald> yeah, that link isn't useful
[21:52:35] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[21:54:30] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[21:56:03] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[21:57:40] <Successus> https://github.com/judah/haskeline/wiki/UserPreferences https://github.com/judah/haskeline/wiki/CustomKeyBindings https://blog.rcook.org/blog/2018/ghci-custom-key-bindings/
[21:59:22] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[21:59:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:00:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Remote host closed the connection)
[22:00:16] *** Joins: alzgh (~alzgh@user/alzgh)
[22:02:08] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[22:03:21] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[22:05:53] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Quit: Client closed)
[22:05:58] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[22:06:36] *** Joins: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de)
[22:10:55] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[22:12:05] *** Quits: deadmarshal (~deadmarsh@95.38.119.2) (Ping timeout: 265 seconds)
[22:12:43] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[22:13:16] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:14:02] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:16:01] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 268 seconds)
[22:17:13] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:22:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:22:17] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:22:29] *** Joins: alzgh (~alzgh@user/alzgh)
[22:22:38] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:23:20] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[22:33:11] *** Quits: tired (~tired@user/tired) (Quit: /)
[22:33:26] *** Quits: quarkyalice (~quarkyali@user/quarkyalice) (Ping timeout: 256 seconds)
[22:33:50] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[22:33:53] <energizer> in pattern matching, i could say `| x < 5 = 5 | x < 10 = 10 | otherwise = 99` or `| -inf < x < 5 = 5 | 5 <= x < 10 = 10 | otherwise = 99`. does anybody do the latter, or is that considered overly verbose bad style?
[22:34:37] <monochrom> The latter doesn't compile in the first place.
[22:34:43] *** Joins: tired (~tired@user/tired)
[22:35:11] <energizer> you know what i mean tho
[22:35:17] *** Quits: max22- (~maxime@2a01cb0883359800b81dd38911f0cee9.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[22:35:33] <monochrom> Yes, I know that you write what you mean, no more no less.
[22:35:57] <monochrom> Perhaps ask a math channel if you doesn't need your notation to compile.
[22:36:11] *** Joins: aegon (~mike@174.127.249.180)
[22:39:32] <shapr> energizer: I've never seen the latter used in production code.
[22:39:40] <energizer> shapr: thank you
[22:41:12] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[22:43:16] *** Quits: Guest80 (~Guest80@pd9ed7c7f.dip0.t-ipconnect.de) (Quit: Client closed)
[22:44:16] *** Joins: theproffesor (~theproffe@2601:282:847f:8010::390f)
[22:44:16] *** Quits: theproffesor (~theproffe@2601:282:847f:8010::390f) (Changing host)
[22:44:16] *** Joins: theproffesor (~theproffe@user/theproffesor)
[22:44:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 265 seconds)
[22:45:23] <EvanR> depending on who talk to, they may respond to IRC math notation as if they were a compiler xD
[22:45:35] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[22:46:40] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:46:54] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[22:47:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[22:48:39] <sm> ERROR missing word at 1:18
[22:49:51] *** Quits: tired (~tired@user/tired) (Quit: /)
[22:50:12] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:50:31] *** Joins: tired (~tired@user/tired)
[22:51:43] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[22:52:42] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[22:53:27] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:53:53] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:55:00] *** Quits: rusty (~rustyboy@82.77.237.221) (Remote host closed the connection)
[22:57:17] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[22:57:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:58:17] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[22:58:22] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[22:59:27] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[22:59:52] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[23:00:12] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[23:00:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9)
[23:00:43] <maerwald> is mingw32_HOST_OS define if you cross-compile for windows?
[23:00:49] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[23:02:14] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[23:03:43] *** Joins: max22- (~maxime@2a01cb0883359800ee51d0bfa17b1585.ipv6.abo.wanadoo.fr)
[23:04:07] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[23:05:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:85c4:4386:63fc:8e9) (Ping timeout: 264 seconds)
[23:08:33] *** Joins: adium (adium@user/adium)
[23:09:03] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[23:09:50] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[23:17:08] *** Joins: ubert (~Thunderbi@p200300ecdf0ba28041546fb5cdf9abd5.dip0.t-ipconnect.de)
[23:21:27] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:21:52] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[23:21:54] *** Joins: tfeb (~tfb@88.98.95.237)
[23:22:20] *** Joins: Pickchea (~private@user/pickchea)
[23:25:31] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Ping timeout: 245 seconds)
[23:25:34] *** Joins: tafama (~tafa@tafa.xyz)
[23:25:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[23:27:18] *** Joins: lyiriyah (~lyiriyah@user/lyiriyah)
[23:28:23] *** Quits: lyiriyah (~lyiriyah@user/lyiriyah) (Client Quit)
[23:30:34] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:31:48] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[23:31:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[23:32:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[23:33:37] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[23:35:12] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:30] <ProfSimm> I started writing a language and i finally understood why referential transparency matters.
[23:35:42] *** Joins: quarkyalice (~quarkyali@user/quarkyalice)
[23:35:47] <ProfSimm> I was quite the "this is bullshit for nerds" guy before, and using mutable var
[23:35:49] <ProfSimm> s*
[23:36:18] <ProfSimm> Specifically in my languages every expression is like a separate thread (green), everything is massively parallel
[23:36:22] <ProfSimm> Does Haskell have this/
[23:36:24] <ProfSimm> ?
[23:37:35] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[23:37:56] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:05] <shapr> ProfSimm: no, but you can do something close with the Control.Parallel libraries.
[23:38:33] <ProfSimm> Thanks
[23:38:47] <awpr> there isn't automatic massive parallelization, but if you squint really hard, it might look like a thunk is a suspended green thread, and forcing a thunk is the current thread yielding to the particular suspended thread it's blocked on
[23:38:57] <shapr> ProfSimm: there's overhead in creating a new computation for handing off to your other threads, so you probably want to use larger chunks than every expression
[23:39:04] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[23:39:04] <shapr> ProfSimm: but I want to hear about your language, sounds nifty
[23:39:10] <awpr> (but that's a really weird way of looking at thunks)
[23:39:11] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[23:39:12] <ProfSimm> awpr, yup
[23:39:45] <shapr> I've heard that Erlang is good at firing up a huge pile of tiny computations, but Erlang is also sort of single core last I checked (just really good at handing off work to other instances on other cores)
[23:40:13] <shapr> ProfSimm: is there a blog about your language?
[23:40:29] <ProfSimm> shapr, I need to have it take better shape. But I'll definitely come here when I have something to show
[23:40:36] <shapr> Also, there was related work around cloud haskell https://haskell-distributed.github.io/
[23:40:37] *** Quits: tafama (~tafa@tafa.xyz) (Ping timeout: 250 seconds)
[23:40:45] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[23:40:46] <shapr> but I dunno how related to what you describe
[23:41:55] <shapr> ProfSimm: in general it sounds like your language is based on graph reduction?
[23:42:03] <ProfSimm> In short, like LISP everything in my thing is a sequence (read: iterator). Iterators are move-only, so they don't need referential transparency per se. Expressions themselves are also a sequence that's being reduced left to right (apply current item as a function to the next item until one item left).
[23:42:18] <shapr> where you can then hand off chunks to be reduced to any free worker ?
[23:42:42] * shapr thinks about that
[23:43:39] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[23:43:54] <shapr> ProfSimm: is your language also lazy (non-strict) ?
[23:44:14] <awpr> sounds a bit like GHC's idea of spark-based parallelism: it can record that you want a particular thunk evaluated to WHNF, and go start doing that on any thread that's available
[23:44:31] <awpr> (the "spark" is the name for the task of evaluating a particular thunk for its own sake)
[23:44:55] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[23:45:03] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:45:24] <awpr> I think the language-level interface to that is the builtin `par` function that creates a spark for its first argument and then returns the second
[23:45:44] <shapr> yeah, you may want to read http://simonmar.github.io/pages/pcph.html or some of the related research papers.
[23:46:37] <ProfSimm> shapr, the dominant "shape" is a tree of sequences. An expression is a sequence I reduce (foo bar baz qux) but if you put commas (foo bar, baz qux) then it's seen as separate sub-expressions, and each is evaluated in parallel. You can also generate sequences programmatically (the output of every function is implicitly a sequence). However you can apply labels on values and refer then in other 
[23:46:37] <ProfSimm> subexpressions, in which case the referring expression suspends as a thunk until the value is available, for ex:  (x: 10, x + x)  calculates the list (10, 20), it tries in parallel, but second one blocks until first is done.
[23:46:48] <ProfSimm> And those "References" to vars, make it a graph in a way
[23:46:49] <ProfSimm> yes
[23:47:08] <EvanR> if expression, i.e. a tree, is being reduced "left to right", i.e. one child at a time, I imagine it is eager eval
[23:47:37] <shapr> can a 'sequence' have a tree shape?
[23:47:52] <ProfSimm> shachaf, by having subsequences yes
[23:48:18] *** Joins: tafa (~tafa@2a04:52c0:101:85c::1)
[23:48:50] <EvanR> (cond false (+ 1 2) (* 2 3)) => (cond false 3 (* 2 3)) => (cond false 3 6) => 6
[23:48:58] <shapr> ProfSimm: I think you have *many* wonderful adventures ahead of you
[23:49:05] <ProfSimm> shapr, EvanR, it's neither fully lazy, nor fully eager, in fact this is not finalized. But basically I leave something as a thunk or a sequence until it's "observed". But if a function as marked as having side effects it executes serially and eagerly
[23:49:21] <EvanR> ok like a suspend form
[23:49:26] <ProfSimm> Yes 
[23:49:45] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[23:49:48] <ProfSimm> shapr yeah :) it's a rabbit';s hole
[23:49:53] <shapr> oh man, I had some optimal lambda calculas reduction papers around here somewhere
[23:50:04] <ProfSimm> shapr, I'm dreaming the universe is made of evaluating sequences, it's getting nuts
[23:50:52] <shapr> ProfSimm: have you read up on lazy evaluation and flavors that do sharing?
[23:51:34] <awpr> there's actually a discussion of this just a bit ago in #haskell-beginners, incl. a book recommendation for implementing lazy evaluation efficiently on real hardware
[23:51:49] <ProfSimm> shapr, I have a probably somewhat superficial idea. I've been thinking of adding memoization to "pure" functions
[23:52:01] <EvanR> this book "the implementation of functional programming languages" (lazy) is pretty wild
[23:52:08] <awpr> yeah, that one
[23:52:24] <shapr> I consider the STG to be epic magic
[23:52:32] <ProfSimm> https://www.microsoft.com/en-us/research/uploads/prod/1987/01/slpj-book-1987.pdf 
[23:52:32] <EvanR> though maybe quite old at this point
[23:52:33] <ProfSimm> this/
[23:52:34] <awpr> seems perfect as a jumping-off point for novel variations on the evaluation model
[23:52:36] <awpr> yep
[23:52:57] <ProfSimm> Thanks folks
[23:53:02] <shapr> someone was recently telling me there are new developments in that area, but I forgot to ask for citations
[23:53:08] <awpr> it is quite old, and GHC has newer, fancier stuff.  but it's the best overview I've found of how the area generally works
[23:53:18] <shapr> ProfSimm: feel free to hang around and chat, lots of fun things here
[23:53:24] <ProfSimm> :D
[23:54:17] <shapr> oh, this is the most recent thing I ran across for STG things https://github.com/quchen/stgi#ghcs-current-stg
[23:54:49] <monochrom> Nice.
[23:54:55] *** Quits: tfeb (~tfb@88.98.95.237) (Ping timeout: 250 seconds)
[23:55:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:56:18] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[23:56:50] *** Joins: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk)
[23:56:58] *** Joins: neurocyte0132889 (~neurocyte@45.136.170.104)
[23:56:58] *** Quits: neurocyte0132889 (~neurocyte@45.136.170.104) (Changing host)
[23:56:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:57:58] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[23:59:02] <EvanR> the Scanning Tunneling G-machine
