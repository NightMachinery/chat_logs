[00:10:21] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:4079:d63d:6a1a:715e) (Ping timeout: 245 seconds)
[00:16:16] <kagevf> scymtym: 2 questions: "what does dpANS stand for?" and "how did you make those slides?"
[00:17:40] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:4079:d63d:6a1a:715e)
[00:20:03] <phoe> kagevf: draft preview American National Standard, re the first question
[00:20:45] <kagevf> phoe: thank you
[00:21:18] *** Quits: casionaut (~casionaut@user/casionaut) (Quit: o7)
[00:22:19] <yitzi> I think its actually "proposed?"
[00:22:41] <scymtym> kent pitman writes "draft proposed American National Standard"
[00:23:39] <scymtym> kagevf: i made the slides with org-mode and org-reveal (and various programs for the figures)
[00:25:03] <kagevf> scymtym: hmmm that sounds very familiar ... did you post a video about it recently? or maybe mention it in r/emacs?
[00:25:37] <scymtym> kagevf: i didn't
[00:26:45] <kagevf> scymtym: I see ... thank you for the info
[00:26:59] <scymtym> sure
[00:28:41] *** Joins: pjb (~pjb@user/pjb)
[00:29:32] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[00:30:15] <kagevf> scymtym: the slides are very nice ... appreciated how they support hjkl navigation ... and they looked good too!
[00:31:17] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[00:32:14] <scymtym> kagevf: thanks. i guess that praise should go towards reveal.js. org-mode with org-reveal is a quick way to make something decent in a sane format (for certain kinds of presentations)
[00:33:48] *** Joins: theothornhill (~user@80.203.5.250)
[00:38:10] <kagevf> I see ... good to know
[00:39:03] *** Quits: sloanr` (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[00:39:16] *** Joins: sloanr` (~user@70-59-70-189.mpls.qwest.net)
[00:43:24] *** Joins: notzmv (~zmv@user/notzmv)
[00:45:22] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[00:45:47] *** Joins: srhm (~srhm@user/srhm)
[00:46:38] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 260 seconds)
[00:52:48] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[00:53:13] *** Joins: srhm (~srhm@user/srhm)
[00:54:34] *** Quits: omr (~omr@user/omr) (Quit: WeeChat 3.3)
[01:00:14] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[01:00:39] *** Joins: srhm (~srhm@user/srhm)
[01:02:04] <phoe> yitzi: maybe, thanks
[01:02:10] * phoe updates cache
[01:03:15] *** Joins: cjb (~cjb@user/cjb)
[01:04:30] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:14:40] *** Quits: theothornhill (~user@80.203.5.250) (Remote host closed the connection)
[01:17:44] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[01:22:38] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:26:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[01:28:38] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f) (Ping timeout: 260 seconds)
[01:33:45] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[01:38:44] *** Quits: sloanr` (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[01:38:58] *** Joins: sloanr` (~user@70-59-70-189.mpls.qwest.net)
[01:47:51] *** Joins: pjb (~pjb@user/pjb)
[01:50:48] *** Quits: pve (~pve@37-136-225-24.rev.dnainternet.fi) (Quit: leaving)
[01:52:40] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[01:53:05] *** Joins: srhm (~srhm@user/srhm)
[02:01:28] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:07:58] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[02:09:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:12:42] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:17:36] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:18:20] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[02:20:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:22:50] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[02:23:00] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[02:23:35] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[02:25:22] *** Quits: cosimone (~user@93-44-185-127.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:29:43] *** Joins: VincentV` (~user@212.97.1.43)
[02:31:44] *** Quits: VincentVega (~user@212.97.1.43) (Ping timeout: 268 seconds)
[02:36:32] *** Quits: winningluser (~wl@2601:8c1:80:70d0::e17b) (Quit: nyaa~)
[02:38:56] *** Quits: sloanr` (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[02:39:08] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[02:39:09] *** Joins: sloanr` (~user@70-59-70-189.mpls.qwest.net)
[02:47:23] <engblom> @fml
[02:49:34] <engblom> Sorry, wrong channel
[02:50:42] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[02:59:47] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[03:00:00] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:00:15] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[03:10:36] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:4079:d63d:6a1a:715e) (Ping timeout: 268 seconds)
[03:17:02] *** Quits: Jing_ (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[03:17:37] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 240 seconds)
[03:17:44] *** Joins: Jing (~hedgehog@2604:a840:3::103b)
[03:23:06] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[03:23:29] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[03:23:43] *** Joins: srhm (~srhm@user/srhm)
[03:24:20] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[03:25:23] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[03:30:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:30:49] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[03:42:24] <rotateq> hello there :)
[03:43:27] <rotateq> i saw at a linux from scratch site that it says to compile CLISP, it's very portable and smaller, isn't it? not that my linux skills would now be good enough to do LFS, but one day maybe ^^
[03:43:53] *** Quits: amb007 (~a_bakic@cable-94-189-190-70.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[03:44:57] <hayley> I never found a version of libsigsegv that CLISP would build with, so I just bootstrap using ECL.
[03:45:07] *** Quits: sloanr` (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[03:45:20] *** Joins: sloanr` (~user@70-59-70-189.mpls.qwest.net)
[03:45:35] <rotateq> it even ran on Atari ST ^^
[03:45:44] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[03:45:45] <rotateq> hayley: oh
[03:45:53] <rotateq> good point of course
[03:46:02] <hayley> ...once I got ECL bootstrapped on a new RISC-V machine that you could SSH into. But I couldn't compile SBCL as it'd run out of memory building Unicode tables.
[03:46:09] *** Joins: srhm (~srhm@user/srhm)
[03:46:11] <rotateq> nice
[03:46:19] <rotateq> oh damn
[03:46:59] <rotateq> hayley: or maybe you write another kernel with Ru5t :D
[03:47:12] <hayley> Something like 768MB of memory, and someone else was running rustc at the same time. While it would have been funny to start a pkill cold war, I decided against it.
[03:47:35] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 268 seconds)
[03:48:13] <rotateq> yes it often needs many crates, time and resources to even compile simple applications with many dependencies
[03:51:49] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[03:51:54] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 268 seconds)
[03:58:18] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[04:00:10] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[04:00:46] *** Joins: srhm (~srhm@user/srhm)
[04:07:09] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:07:38] *** Joins: Alfr (~Alfr@user/alfr)
[04:19:44] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[04:22:29] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:23:47] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[04:24:16] *** Joins: srhm (~srhm@user/srhm)
[04:29:38] *** Quits: VincentV` (~user@212.97.1.43) (Remote host closed the connection)
[04:32:16] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[04:34:55] *** Joins: fmakuncertain (~fmakuncer@2603-8000-4102-9b00-ddff-8b0b-1a96-ed9a.res6.spectrum.com)
[04:35:47] *** Joins: Everything (~Everythin@128-124-10-123.mobile.vf-ua.net)
[04:37:23] <fiddlerwoaroof> rotateq: LFS is a good way to build linux skills :)
[04:38:02] <fiddlerwoaroof> Work through it in a VM and google the problems you run into along the way
[04:38:13] <fiddlerwoaroof> Anyways, does anyone here use sbcl from nix?
[04:40:14] <rotateq> fiddlerwoaroof: yes! much more than just following stupid gentoo instructions
[04:40:34] <rotateq> i did on the NixOS machine, why?
[04:41:59] <rotateq> fiddlerwoaroof: i should try starting Mezzano again in kvm too again. aroung two years ago everything compiled, then i started the image, nothing to see and when i clicked in it it crashed my xmonad
[04:44:22] <rotateq> what also could be very interesting, building a raw operating system really from scratch in assembly and c
[04:44:33] <fiddlerwoaroof> I'm running into issues with loading libraries using nix on Debian
[04:45:23] <rotateq> oh hm
[04:45:30] <rotateq> what does it say?
[04:45:32] <fiddlerwoaroof> nix basically rewrites the paths programs search for libraries in, from what I can tell and I'm wondering if anyone has encountered this and figured out a workaround.
[04:46:11] <fiddlerwoaroof> From their matrix channel: "Yes, we set the interpreter path and the rpath of the binaries to Nix store paths"
[04:46:23] <rotateq> i often had problems when lib had to load shared object files that it can't find cause some important paths are else arranged
[04:47:12] <rotateq> I'm honest, even to today I didn't really deeply get how to do nix things on my own.
[04:47:37] <fiddlerwoaroof> I guess I could setup LD_LIBRARY_PATH with a shell script to make system libraries available again, but that's sort of annoying
[04:48:28] <rotateq> good old shell scripting :P
[04:55:37] *** Quits: fmakuncertain (~fmakuncer@2603-8000-4102-9b00-ddff-8b0b-1a96-ed9a.res6.spectrum.com) (Ping timeout: 240 seconds)
[04:56:10] *** Quits: Jing (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[04:57:24] *** Joins: Jing (~hedgehog@2604:a840:3::103b)
[05:00:48] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[05:03:23] *** Joins: fmakuncertain (~fmakuncer@2603-8000-4102-9b00-61c7-28f2-7e99-fa0d.res6.spectrum.com)
[05:03:37] *** Joins: Oladon (~olad@98.43.81.226)
[05:18:05] <rotateq> do you also have issues now loading the STR system?
[05:18:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[05:18:58] <rotateq> it signals me an error "Failed to find TRUENAME of /usr/share/common-lisp/source/cl-ppcre/cl-ppcre-unicode/packages.lisp"
[05:23:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[05:25:14] <Xach> rotateq: sounds like you have some things installed by the os package system
[05:28:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:31:24] <rotateq> yes of course, it's about me again :)
[05:31:54] <rotateq> maybe trying to just remove that
[05:34:17] *** Quits: fmakuncertain (~fmakuncer@2603-8000-4102-9b00-61c7-28f2-7e99-fa0d.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:36:39] *** Joins: fmakuncertain (~fmakuncer@2603-8000-4102-9b00-7875-a8bd-1b4b-7d55.res6.spectrum.com)
[05:51:52] *** Quits: fmakuncertain (~fmakuncer@2603-8000-4102-9b00-7875-a8bd-1b4b-7d55.res6.spectrum.com) (Quit: disconnected)
[05:56:18] *** Quits: sloanr` (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[05:56:31] *** Joins: sloanr` (~user@70-59-70-189.mpls.qwest.net)
[05:58:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:03:25] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:06:29] *** Quits: sloanr` (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[06:06:36] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[06:06:42] *** Joins: sloanr` (~user@70-59-70-189.mpls.qwest.net)
[06:06:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:14:53] *** Joins: sloanr`` (~user@70-59-70-189.mpls.qwest.net)
[06:16:17] *** Quits: sloanr` (~user@70-59-70-189.mpls.qwest.net) (Ping timeout: 240 seconds)
[06:19:17] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[06:19:53] *** Joins: srhm (~srhm@user/srhm)
[06:30:30] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:31:29] *** Joins: notzmv (~zmv@user/notzmv)
[06:32:54] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[06:33:27] *** Joins: srhm (~srhm@user/srhm)
[06:33:36] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[06:36:57] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[06:38:37] *** Quits: sloanr`` (~user@70-59-70-189.mpls.qwest.net) (Ping timeout: 240 seconds)
[06:39:10] *** Joins: john__ (~john@dynamic-095-118-073-167.95.118.pool.telefonica.de)
[06:39:28] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[06:39:41] *** Joins: sloanr`` (~user@70-59-70-189.mpls.qwest.net)
[06:39:53] *** Joins: srhm (~srhm@user/srhm)
[06:41:40] *** Quits: gaqwas (~john@dynamic-077-004-151-143.77.4.pool.telefonica.de) (Ping timeout: 256 seconds)
[06:43:38] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:48:37] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 240 seconds)
[06:49:10] <Spawns> what are the variables after the function call part of the syntax called? parameter would be for functions, but what about if its for macros or let bindings for example
[06:49:29] <Spawns> (x y z) <- what are y and z called
[06:49:57] <Spawns> may be a dumb question but it's bothered me a bit
[06:50:06] <hayley> The HyperSpec includes names for syntactical elements.
[06:50:54] <hayley> e.g. LET has "var"iables, "declaration"s and a "body".
[06:53:50] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[06:54:30] <Spawns> maybe body is what I am thinking of. i am making a little tiny compiler and don't know what to name the method. for compiling, i take each list, and look at the first element and determine the type of expression (funcall, let, if, etc), then I handle any special cases, then I compile the rest of the elements in a much more generic way
[06:56:13] <Spawns> the rest of them just use a basic visitor pattern type thing, most things emit constants, symbols get replaced with local and global vars, and new lists start the whole process again recursively
[06:57:41] <Spawns> so I named the generic compile thing compile_values() but that name is not very good. it might seem silly to go through a bunch of trouble just for a function name, but I honestly can't think of a good name for it
[06:59:17] <hayley> https://gitlab.com/Theemacsshibe/slacker-compiler/-/blob/master/flatten.lisp FLATTEN-LAMBDAS does this process for me.
[06:59:51] <hayley> There are some names, as I pattern match, but LET is not a special form (and it is a macro expanding to LAMBDA).
[07:00:00] <Spawns>  is this your compiler hayley?
[07:01:31] <Spawns> i did not realize let was a macro
[07:01:42] <Spawns> also this file that you linked is very cool!
[07:05:57] <Spawns> i love seeing lisps made with lisp. its really elegant. i am not so good at writing lisp though
[07:08:52] <hayley> Yes, it is my compiler.
[07:09:10] <hayley> You can rewrite (let ((variable value) ...) body ...) to ((lambda (variable ...) body ...) value ...)
[07:10:22] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[07:11:06] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:12:13] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Remote host closed the connection)
[07:12:35] *** Joins: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net)
[07:12:57] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:07] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:13:48] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:13] <Spawns> very neat
[07:15:26] <Spawns> i don't have macros yet, or really much of anything actually
[07:15:58] <Spawns> my goal for now is to just get local vars and basic operations like + - / * and print finished
[07:17:07] <Spawns> once the internal lisp can actually do something semiuseful i will rewrite what I can in the language! I want to even do read macros in the language itself, if possible
[07:17:17] <hayley> Hypothetically, basic operations should just fall out if you can call foreign functions.
[07:17:34] <Spawns> what do you mean by fall out?
[07:17:57] *** Quits: fmakuncertain (~fmakuncer@ip98-164-196-153.oc.oc.cox.net) (Ping timeout: 240 seconds)
[07:18:05] <hayley> I mean having a way to call functions in the host language would mean you don't have to handle +, -, /, *, and print specially.
[07:18:22] <Spawns> right right, I was wondering about that
[07:19:19] <Spawns> how hard is it to setup basic ffi? I am using rust but it can expose a C ffi
[07:19:40] <Spawns> i'll have to do a lot of research on this
[07:19:51] <hayley> It's not "FFI" per se.
[07:20:16] <hayley> You'd have some sort of foreign function object, and the evaluator (probably in your apply[] function) would know how to call a foreign function.
[07:25:00] <Spawns> and it would call the + method in the host language?
[07:25:08] <Spawns> or something roughly like that
[07:25:48] <hayley> Right.
[07:28:22] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:29:56] *** Quits: Everything (~Everythin@128-124-10-123.mobile.vf-ua.net) (Quit: leaving)
[07:31:01] <beach> Good morning everyone!
[07:32:22] <beach> Spawns: The variables in the definition of a function are called "parameters", and the forms (which are not necessarily variables) following the function name in a function call are called "arguments".
[07:33:39] <beach> engblom: When you say things like "and it is using push now instead of rewriting the whole list", it sounds like you have a fundamental misunderstanding of how Common Lisp works.  In what way does ACONS "rewrite the whole list"?
[07:34:17] <beach> engblom: And in what way does PUSH not do the exact same thing as ACONS + SETF?
[07:35:34] <Spawns> thank you beach, i think I was overthinking this
[07:35:58] <beach> Oh?  In what way?
[07:36:17] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[07:36:30] *** Joins: Lycurgus (~juan@98.4.112.204)
[07:36:32] <Spawns> i should have just called it compile_parameters() and called it a day
[07:36:51] <Spawns> that is descriptive enough to let a reader understand roughly whats going on
[07:37:00] <Spawns> human reader >.<
[07:37:10] <beach> I think that's exactly the opposite of what I just said, no?
[07:37:34] <hayley> Well, stupid thought, why does it take multiple parameters? Are the semantics different to compiling each parameter individually in your implementation?
[07:37:36] <beach> The "parameters" are the variables you find in the function *definition*, not in the function *call*.
[07:37:44] <Spawns> oh my I see now
[07:37:53] <Spawns> yes you are right
[07:38:04] <Lycurgus> anybody know when the mccarthy thinking allowed interview/episode was filmed?
[07:40:32] *** Joins: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs)
[07:40:32] *** Quits: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[07:40:45] *** Joins: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs)
[07:41:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:44:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[07:45:14] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:48:28] <Lycurgus> also beach, while you and i find it deplorable, 'guys' is now commonly accepted to be unisex
[07:48:52] <Lycurgus> but not "dudes"
[07:50:25] <beach> I understand.  Thanks.
[07:54:36] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:58:05] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:59:22] *** Quits: john__ (~john@dynamic-095-118-073-167.95.118.pool.telefonica.de) (Remote host closed the connection)
[08:08:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[08:10:29] *** Joins: semz (~none@user/semz)
[08:10:54] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[08:11:19] *** Joins: srhm (~srhm@user/srhm)
[08:24:25] *** Joins: notzmv (~zmv@user/notzmv)
[08:27:14] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:31:33] *** Quits: sloanr`` (~user@70-59-70-189.mpls.qwest.net) (Remote host closed the connection)
[08:32:18] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[08:34:42] <fiddlerwoaroof> It's sort of amusing the errors you run into when you mess with printing
[08:35:49] <fiddlerwoaroof> doing things like using set-pprint-dispatch to override pretty printing for standard types or changing *print-case* break a lot of libraries
[08:36:05] <fiddlerwoaroof> especially libraries that try to make symbols out of strings without turning off *print-pretty*
[08:40:43] *** Joins: Lycurgus (~juan@98.4.112.204)
[08:42:32] * Lycurgus c. '97 implicitly by reference to deep blue vs kasparov
[08:49:52] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[09:00:30] *** Quits: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[09:11:57] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Ping timeout: 240 seconds)
[09:18:21] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[09:18:46] *** Joins: srhm (~srhm@user/srhm)
[09:22:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:25:38] *** Joins: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs)
[09:25:38] *** Quits: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[09:25:57] *** Joins: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs)
[09:26:05] *** Joins: sloanr (~user@70-59-70-189.mpls.qwest.net)
[09:43:47] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[09:44:12] *** Joins: srhm (~srhm@user/srhm)
[09:58:11] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[09:58:59] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[10:05:07] *** Joins: spiaggia (~user@2a01:cb19:150:3400:d48d:b9a:d80a:a0af)
[10:13:13] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[10:13:49] *** Joins: srhm (~srhm@user/srhm)
[10:16:24] *** Quits: engblom (~foo@user/engblom) (Read error: Connection reset by peer)
[10:17:29] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Ping timeout (120 seconds))
[10:18:12] *** Joins: treflip (~user@user/treflip)
[10:19:08] *** Joins: engblom (~foo@86-60-190-113.dynamic.lounea.fi)
[10:27:46] <spiaggia> engblom: Are you around?
[10:34:59] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[10:36:02] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 240 seconds)
[10:39:37] *** Joins: robin (~robin@user/terpri)
[10:42:43] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:53:05] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:53:37] *** Quits: sloanr (~user@70-59-70-189.mpls.qwest.net) (Ping timeout: 240 seconds)
[10:54:50] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:511a:60e3:c9b4:48a7:4885)
[10:55:14] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:57:36] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[10:58:37] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[10:59:56] <unixlisp> scymtym: "Produce new specifications without legal complications" bzflag.bz/~starseeker/Project_FreeSpec  dpANS copyright is not clear (whatever leave it alone)
[11:03:01] *** Joins: shka (~herr@109.231.0.226)
[11:04:25] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[11:05:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:08:21] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[11:09:29] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[11:10:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:13:57] <lisp123> (theoretical question) Is there a way to control the order of :around methods being applied via call-next-method?
[11:15:11] <lisp123> it may just be a stupid idea, I was just reading how it works so was curious
[11:17:22] <flip214> lisp123: the order is well-defined; https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node287.html
[11:17:26] <flip214> >  The default order for the primary methods is :most-specific-first. However, the order can be reversed by supplying :most-specific-last as the second argument to the :method-combination option.
[11:17:37] <flip214> and you can reorder your parent classes as well
[11:21:12] <lisp123> flip214: I was wondering if its possible to do without reordering the parent classes
[11:21:56] <lisp123> flip214: Thanks for the link and info, I didn't know about :most-specific-last
[11:24:09] <spiaggia> As I recall, the standard method combination does not take any arguments.
[11:25:43] <spiaggia> flip214: Where did you see that the standard method combination takes an argument?
[11:28:53] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:29:22] <flip214> spiaggia: https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node287.html
[11:29:37] <flip214> spiaggia: right, for the simple method combinations only
[11:36:16] *** Quits: spiaggia (~user@2a01:cb19:150:3400:d48d:b9a:d80a:a0af) (Quit: ERC (IRC client for Emacs 26.3))
[11:36:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:39:50] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[11:40:15] *** Joins: srhm (~srhm@user/srhm)
[11:41:16] <engblom> beach: I might have misunderstood something. What I imagine would happen with setf + acons is that acons create a new list (thus a copy of the whole list) and then when I "overwrite" the old list with setf, the reference is changed to the new list and the old list ends up in GC.
[11:42:44] <engblom> beach: I imagined that no new list would be made with push, but instead a new element is linked in to the old list
[11:44:41] <hayley> You aren't overwriting the list though; you are just overwriting the value in the relevant binding.
[11:46:01] <hayley> Suppose that you had another variable bound to the list; if you "overwrote" the list, it would be expected that the updates would be visible through the other variable.
[11:47:42] <engblom> hayley: Yes, it would because there is still a reference to it then, so nothing for GC to take care of. I know "overwrite" was the wrong term as the refence is just updated to point to a new list.
[11:47:54] <hayley> For the most part, you can think of object identity as the answers to a set of "what would happen if I did this destructive operation?" questions. So, suggesting that different effects occur by a particular operation implies that the identities are different.
[11:49:55] <hayley> By definition, the GC doesn't do anything that you can observe, as it only reclaims dead objects, so we don't need to talk about it. (This ignores the existence of finalizers, and effects on program execution relative to physical time and memory, but I don't think any languages say anything about real time and memory guarantees.)
[11:49:56] <engblom> The original question was whatever it is better to use (setf ... (acons ...)) or (push (cons ...) ...)
[11:50:17] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[11:50:40] <hayley> Tricky one, that. I would say the former, as it is more apparent that you are working on an alist to me.
[11:51:23] <hayley> (But if you are not working on an alist, use the latter then :)
[11:52:11] <engblom> I was thinking that as acons creates a new list with the cons linked in, that it would be slower than operating directly on the list with push.
[11:52:48] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[11:53:21] <engblom> Yes, it is alists that I working on. I wrote a function that recursively converts nested plists to alists.
[11:57:02] <unixlisp> engblom: equivalent. but PUSH nice.
[12:00:34] <beach> engblom: Common Lisp never implicitly copies anything.  That's what I feared you were thinking, and it is not the case.
[12:00:44] <unixlisp> acons DO create a new list, shared with old list (not copy it)
[12:01:32] <beach> engblom: In both cases, as I pointed out yesterday (UTC+1) a new CONS cell is created and prepended to the existing list.
[12:02:27] <engblom> Now I understand! Thank you!
[12:03:04] <beach> Sure.  It is important to understand stuff like this, because it is the very basis of the "uniform reference semantics" of Common Lisp.
[12:04:24] <engblom> beach: If you would use append, and then want to use setf to update the reference, what is then happening?
[12:04:56] <beach> engblom: APPEND copies all lists except the last one.
[12:05:11] <engblom> beach: OK, then I guessed right about that one
[12:05:38] <beach> But it is not "implicit".  The dictionary entry for APPEND states this fact explicitly.
[12:06:27] <beach> The destructive version of APPEND is NCONC.  It modifies the CDR of the last CONS cell of all list except the last one.  [I hope that's right]
[12:08:01] <engblom> Is it better to use nconc rather than what I am doing now. I am pushing one cons at the time and then when all are pushed I do reverse on the result so the plist-to-alist function I created maintain the original order.
[12:08:34] <beach> PUSH and then reverse at the end is more efficient.
[12:08:49] <beach> Each PUSH is O(1) and reverse is O(n).
[12:08:55] <engblom> Yep
[12:08:57] <mfiano> Or nreverse
[12:09:02] <beach> So the entire operation is O(n).
[12:09:14] <mfiano> But why create such a function when one already exists?
[12:09:51] <engblom> mfiano: I do not know about any such function that does it recursively. The one in alexandria does only do it for one level
[12:10:13] <engblom> The plist-alist from alexandria
[12:11:27] *** Joins: Krystof (~user@81.174.155.115)
[12:11:28] <engblom> imagine that you have (:a 1 :b (:c 2 :d (:e 3 :f 4)))
[12:22:17] <mfiano> I see, yes, that I'm not aware of, because most people would use proper data structures for that purpose.
[12:26:50] <unixlisp> engblom: use (loop ... collect...) without reverse or nreverse seems more efficient at sbcl
[12:28:41] <mfiano> It's still O(n) keeping references
[12:29:27] <unixlisp> SB-LOOP::LOOP-COLLECT-RPLACD efficient
[12:29:39] <mfiano> Right, keeping references
[12:29:55] <unixlisp> keep tail
[12:30:57] <engblom> mfiano: In this case I have some quite big configuration files that is supposed to be hand edited. As plists are easy to edit by hand I use them. They are not even proper plists as I use strings for keys, thus I need to convert them to something else. Alists allows to set test to equalp so I convert the "plist" to alist.
[12:31:52] <engblom> I was converting them to hash-tables, but while developing alists are easier to handle as they are human readable too.
[12:32:26] <mfiano> Hash tbales can be too
[12:32:57] <mfiano> https://gist.github.com/mfiano/39e0affc9d776d0e3fffa12f0050f350
[12:34:12] <engblom> How about nested hash-tables?
[12:34:43] <mfiano> I thought i just gave a solution
[12:35:23] <mfiano> https://gist.github.com/mfiano/6b8915f8b47aff0ce8cfe313dd17f106
[12:37:37] <engblom> Ah, ok. I am not at my computer at home, where I do lisp development so I never tested the function you pasted.
[12:38:50] <flip214> engblom: YAML is kind-of-nice to read and edit as well.
[12:39:58] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[12:41:06] <mfiano> Personally I would parse the structure into standard-objects to make use of generic protocols.
[12:41:19] <mfiano> Nested primitive structures are not very flexible.
[12:41:46] *** Quits: Jing (~hedgehog@2604:a840:3::103b) (Remote host closed the connection)
[12:42:02] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 240 seconds)
[12:42:26] *** Joins: Jing (~hedgehog@2604:a840:3::103b)
[12:42:51] <unixlisp> transparent
[12:43:05] <mfiano> unixlisp: Can you use complete sentences?
[12:43:34] <unixlisp> sorry. nested primitive structures are transparent
[12:43:57] <mfiano> That wasn't my argument.
[12:44:25] <unixlisp> yeah. your argument is right.
[12:45:46] *** Joins: igemnace (~ian@user/igemnace)
[12:56:30] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 260 seconds)
[12:59:37] *** Joins: pve (~pve@188-67-166-212.bb.dnainternet.fi)
[13:00:21] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[13:02:08] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[13:21:17] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[13:24:27] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[13:29:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:30:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[13:30:44] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[13:32:16] *** Joins: aeth (~aeth@user/aeth)
[13:43:27] <phantomics> A question if anyone knows: I was using SBCL 2.0.2 for a long time, then upgraded to 2.1.7 recently. Both were built from source on my computer. In 2.0.2 the array-rank-limit was 65529 (2^16-7), and in 2.1.7 the limit is 256. Does anyone know why? I don't know how often anyone uses such super-dimensional arrays, did they turn out to cause problems?
[13:46:29] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[13:47:33] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[13:47:53] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[13:48:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:49:34] <flip214> phantomics: https://github.com/sbcl/sbcl/commit/1ba3cfa9259f75a348dca17f8205a9b237ef3a47
[13:49:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:49:51] <flip214> was 10 in the meantime, then got bumped up again
[13:51:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:56:57] <phantomics> It seems they just reduced it to 129
[13:57:24] <phantomics> In the latest version, and it was moved from src/code/early-array.lisp to early-vm.lisp
[13:58:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[13:58:37] * rogersm is intrigued to know how phantomics discovered the change
[13:59:33] <rotateq> hi phantomics :) good to see lines of you again
[13:59:37] <phantomics> I just entered array-rank-limit on a whim
[13:59:45] <phantomics> Hey rotateq, good to hear from you
[14:00:08] <rotateq> thank you :) didn't want to interrupt
[14:04:50] <rogersm> oh! I though you had some 'interesting' code that required tens of thousands of dimensions.
[14:06:16] <jackdaniel> ccl has 4096, ecl has 64
[14:06:19] <jackdaniel> for comparison
[14:09:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:13:00] <phantomics> Here is the rationale for 129 from SBCL:  Since the array rank is stored as rank-1 in the array header, having it stop at 128 ensures that adding 1 produces an unsigned result.
[14:14:03] <phantomics> Does anyone know the rationales for 4096, 256 and 64? Different preferences for width of the rank value?
[14:14:25] <phantomics> Also the current version of Clasp has just 8, the ANSI minimum
[14:15:21] <phantomics> I'd be interested to hear of any use cases for really high-rank arrays, I heard some ML techniques can use dozens of dimensions but not hundreds
[14:16:27] <hayley> I think high-rank arrays appear in representing Markov chains, though most values are zero and thus you usually use a sparse representation.
[14:31:56] <phantomics> I.e. 0 0 0 0 ... 0 0 0 0⍴something? With a few nonzeroes thrown in?
[14:33:07] <hayley> If you had a language with N words, and wanted a chain of degree(?) C, then you would have (C⍴N)⍴something
[14:33:48] <hayley> ...or something like that. Each transition of a Markov chain is defined by mapping the last N words to a mapping of next words -> probability.
[14:34:39] <hayley> ...and hence why people use sparse representations, since almost all probabilities are zero.
[14:35:56] <phantomics> neat
[14:49:31] * rotateq didn't understand really yet the deeper difference of shape and rank in APL
[14:52:06] <rotateq> or even on their own :)
[14:54:18] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Quit: Leaving)
[14:55:20] <phantomics> how is the difference between shape and rank unclear?
[14:57:11] <rotateq> phantomics: for YOU all these concepts are clear now :)
[14:57:31] <phantomics> what do you see as unclear about it?
[14:58:15] <rotateq> that i first have to remember. but it would be for query
[14:58:41] <phantomics> Like you mean fetching elements of an array, giving the coordinates?
[14:59:03] <rotateq> öhm maybe? :D
[14:59:07] <phantomics> In terms of implementation, all arrays are really just vectors in funny suits
[14:59:27] <rotateq> sure
[15:00:06] <rotateq> or displaced arrays in other arrays ^^
[15:00:30] <phantomics> For an n-dimensional array, you take the coordinates for an element, multiply each coordinate by a set of factors determined by the array's dimensions, and then add the products to get the row-major index
[15:00:46] <phantomics> This is how (aref) works under the hood if you check out its source
[15:01:00] <phantomics> Every (aref) is really a (row-major-aref) in disguise
[15:02:06] <rotateq> again I would say not soo on-topic here :) but maybe in terms of how CL (implementations) handle arrays
[15:02:46] <phantomics> Although it would be interesting if there were some kind of exotic RAM that had a hardware-accelerated implementation of matrices or even 3D arrays... perhaps that would allow you to iterate over a given column index in the rows of a row-major matrix as quickly as you could iterate over each column index in a row
[15:02:54] <jackdaniel> phantomics: not necessarily true; in principle implementation could incorporate conformal displacement
[15:02:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:03:18] <jackdaniel> then there are some additional computations to compute the "real" index
[15:03:22] <phantomics> conformal displacement?
[15:03:40] <jackdaniel> here is a brief explanation: http://turtleware.eu/posts/Conformal-array-displacement.html
[15:03:49] <jackdaniel> afaik genera had such a thing
[15:04:01] <rotateq> phantomics: maybe possible to build with FPGA, who knows :D
[15:04:12] <rotateq> jackdaniel: uii
[15:04:39] <phantomics> Cool, thanks
[15:05:26] <jackdaniel> sure
[15:09:07] <hayley> phantomics: Pedantically DRAM is addressed as a 2D array of...some unit that I forgot, but it has "columns" and "rows". But, of course, those units are provided by the hardware manufacturer.
[15:12:15] <phantomics> That's natural given the structure of the semiconductor. I don't know if an array in memory could be aligned with that structure to give some kind of advantage in access time
[15:13:03] *** Joins: ldb (~user@user/ldb)
[15:18:03] *** Joins: omr (~omr@user/omr)
[15:34:23] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:36:40] <hayley> I haven't heard of such a technique, but it could work. At the least, I think reducing the number of "commands" to step en the major index would improve performance.
[15:39:17] *** Quits: ldb (~user@user/ldb) (Ping timeout: 240 seconds)
[15:45:09] *** Joins: ldb (~user@user/ldb)
[15:47:46] *** Joins: OlCe (~user@lfbn-nic-1-588-65.w90-118.abo.wanadoo.fr)
[15:49:24] *** Quits: ldb (~user@user/ldb) (Ping timeout: 240 seconds)
[16:01:35] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:17:21] <Lycurgus> unixlisp pointed out that Thinking Allowed had posted that the mccarthy interview was recorded in March 1989
[16:18:19] <Lycurgus> he (mccarthy) only says 'grand master' and not world champion and the actual first defeat of a high ranking player was in '87 with deep thought
[16:18:36] *** Joins: random-nick (~random-ni@87.116.180.98)
[16:20:52] <Lycurgus> also the difference between his appearance there and the '07 oral history where he's interviewed by nils nilson is more consistent with 20 than 10 years
[16:26:28] <jackdaniel> hello aver my old friend, dword and qword are not equal size again! :)
[16:26:55] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[16:27:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[16:29:07] <phoe> nice
[16:29:22] *** Joins: aeth (~aeth@user/aeth)
[16:32:59] <unixlisp> hi, Lycurgus  NETCLOS https://github.com/cpc26/netclos, do not know how to play with (testos &rest machines)
[16:34:28] <Lycurgus> that doesn't look different from the tarball posted on hotz's homepage
[16:36:57] <Lycurgus> except that it's incomplete and doesn't for example include the asdf defined test sys
[16:37:18] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[16:37:43] *** Joins: srhm (~srhm@user/srhm)
[16:39:07] <unixlisp>  (make-array 1 :weak t ...) in objectstore.lisp sbcl do not support :weat keyword.
[16:39:50] <Lycurgus> if you're referring to netclos, it's acl dependent
[16:40:28] <Lycurgus> jackdaniel, aver?
[16:40:40] <jackdaniel> that's an internal consistency check in sbcl
[16:40:45] <Lycurgus> ah
[16:41:34] <Lycurgus> sounds like a 32bit dingleberry
[16:41:48] *** Quits: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[16:42:09] *** Joins: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs)
[16:44:06] <unixlisp> so netclos may not work well in sbcl?
[16:44:07] *** Quits: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:45:30] <Lycurgus> i'm not actually sure everything in my working dir for netclos came from the tarball but there's a lot more than has made it to that github repo
[16:45:51] *** Joins: amb007 (~a_bakic@87.116.166.190)
[16:45:55] <Lycurgus> no, netclos won't work with sbcl without a lot of work and maybe not at all
[16:46:20] <unixlisp> ah. regret.
[16:46:49] <Lycurgus> btw is there any better implementation independence thing than roswell et. al.?
[16:47:11] <Lycurgus> working with a lot of ad hoc things at present
[16:47:44] <Lycurgus> otoh it will work with acl 10.1
[16:48:07] <Lycurgus> also you need the Chaco lib
[16:48:27] <Lycurgus> (maintained by sandia labs)
[16:49:12] <unixlisp> acl express version?
[16:50:01] <rotateq> unixlisp: weat xD
[16:51:04] <Lycurgus> unixlisp, yes
[16:51:16] *** Joins: Bike (~Glossina@71.69.170.70)
[16:51:16] *** ChanServ sets mode: +o Bike
[16:51:35] <unixlisp> Lycurgus: good news
[16:52:57] *** Joins: ebrasca (~user@librepanther.com)
[16:53:13] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[16:59:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:03:05] <Lycurgus> sfaik, unlike lw, the only restriction in acl express is the binary expiry and ofc you can't distribute it
[17:03:46] <Lycurgus> as far as base ACL
[17:08:43] <unixlisp> Chaco is c lib!
[17:08:45] <Lycurgus> s/maybe not at all/,more than you're likely up to/ since both things in question are fully open source
[17:09:12] <Lycurgus> yeah it's unproblematic, buildwise
[17:09:56] <Lycurgus> cl-actors is way simpler and more recently maintained but netclos is more consistent with the grandiosity of cl
[17:10:59] <Lycurgus> and i'm guessin lparallel is actually to most used
[17:11:09] <Lycurgus> *the most
[17:12:17] *** Quits: omr (~omr@user/omr) (Quit: WeeChat 3.3)
[17:12:51] <unixlisp> yeah. just wonder how CL faces parallel and concurrency.
[17:13:21] <unixlisp> cl-actors: It's implemented on top of Bordeaux-Threads
[17:14:21] <Lycurgus> yeah all 3 are solid pkgs, netclos is maybe over the top
[17:14:57] <Lycurgus> as well as being stale, unmaintained
[17:16:21] <Lycurgus> from a set of fortran subroutines to here: journey
[17:16:50] <unixlisp> good to know
[17:17:08] <unixlisp> It is a fear. http://xahlee.info/comp/Guy_Steele_parallel_computing.html Guy Steele Says: Don't Iterate, Recurse, and Get rid of cons!
[17:18:23] <Lycurgus> well all the thoughtless parallelism u prolly should want is already in modern hardware and base OS
[17:19:31] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 245 seconds)
[17:20:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:20:19] <unixlisp> do not need on the level of programming language?
[17:20:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:20:53] <Bike> i have a sort of draft specification for atomic operation semantics, but it would need implementation buy-in to go anywhere
[17:20:57] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[17:21:07] <Bike> (implementations do have atomics already, just not in any uniform way)
[17:21:14] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[17:21:25] <unixlisp> good advance
[17:22:51] <Lycurgus> unixlisp, no I meant that the level where you think about wether you need or can benefit from parallelism at all and then how is operative
[17:24:22] <unixlisp> that is, CL needs not fundamentally change?
[17:24:48] <Bike> no, i think you would need changes. bordeaux is already halfway to being a language extension.
[17:24:57] <Lycurgus> i dunno it's not a static lang
[17:25:22] <Lycurgus> at some point it might be addressed as seriously as the object system was
[17:25:34] <Lycurgus> or conditons or whatever
[17:26:05] <Lycurgus> inevitable maybe if cl lasts another 30 y
[17:26:42] <Bike> somebody has to put in the effort to do such "inevitable" things.
[17:27:19] <unixlisp> bordeaux more like on top of lisp, need not change spec.
[17:27:23] <jackdaniel> that's inevitable that someone will ! ;)
[17:27:59] <Bike> well, adding to a specification counts as a change in my book
[17:28:19] <Lycurgus> everything sags under the weight of the price system's senescence process, it's amazing how fast things moved in the so called golden age of capitalism
[17:28:24] <Bike> if you mean, would a parallelism extension entail changes to the uniprocessor language that already exist, probably not
[17:28:31] <Bike> exists
[17:29:16] <Bike> some of the semantics of it might need to be rewritten to accomodate concurrency, but i don't see any reason to break existing code that doesn't use concurrency
[17:36:47] <unixlisp> keeping compatibility is a big feature of CL. hope CL keeping peaceful with concurrency and parallel.
[17:40:15] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[17:44:11] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:48:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:48:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:55:36] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[17:56:36] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:59:02] *** Quits: amb007 (~a_bakic@87.116.166.190) (Ping timeout: 240 seconds)
[17:59:12] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 268 seconds)
[18:00:39] *** Joins: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs)
[18:02:58] *** Joins: Alfr (~Alfr@user/alfr)
[18:05:39] *** Quits: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[18:06:06] *** Joins: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs)
[18:12:47] *** Joins: sloanr (~user@mobile-166-170-222-23.mycingular.net)
[18:17:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:22:45] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[18:23:41] *** Joins: srhm (~srhm@user/srhm)
[18:30:32] *** Quits: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[18:31:19] *** Joins: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs)
[18:31:42] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[18:32:11] *** Joins: srhm (~srhm@user/srhm)
[18:33:22] *** Joins: igemnace (~ian@user/igemnace)
[18:34:39] *** Quits: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs) (Read error: Connection reset by peer)
[18:36:07] *** Joins: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs)
[18:36:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:995c:e86e:470c:8a37) (Ping timeout: 240 seconds)
[18:37:22] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[18:38:06] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 260 seconds)
[18:38:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:41:49] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[18:44:56] <aeth> to be fair, the only way you break compatibility in CL is if you mess with the reader in some way
[18:45:18] <aeth> because otherwise, even if you did release a new version of CL every year with 'breaking' changes, you could just version them behind CL2022, CL2023, CL2024, etc., packages.
[18:45:29] <aeth> implementation maintainers would hate you, though
[18:45:41] <rotateq> aeth: yes :D
[18:45:59] <Bike> i think that is an optimistic take on how well versioning works.
[18:46:02] <rotateq> i had such funny situation from time to time
[18:46:24] <aeth> oh, sorry, the reader or DEFPACKAGE, unfortunately
[18:46:29] <aeth> since DEFPACKAGE isn't the greatest
[18:46:34] <rotateq> implementation would fork you, but then with real forks in their hands xD
[18:46:41] <aeth> I guess you could just replace DEFPACKAGE, though
[18:46:47] <rotateq> ah right defpackage
[19:03:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[19:09:08] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:d92e:b02c:fce0:ca0b)
[19:09:08] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:511a:60e3:c9b4:48a7:4885) (Read error: Connection reset by peer)
[19:09:38] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:fd5f:768f:fc40:13a0)
[19:13:25] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:d92e:b02c:fce0:ca0b) (Ping timeout: 240 seconds)
[19:17:20] *** Quits: amb007 (~a_bakic@cable-94-189-177-94.dynamic.sbb.rs) (Read error: Connection reset by peer)
[19:20:26] *** Joins: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs)
[19:23:01] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:fd5f:768f:fc40:13a0) (Ping timeout: 240 seconds)
[19:25:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:29:38] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:fd5f:768f:fc40:13a0)
[19:30:38] *** Quits: sloanr (~user@mobile-166-170-222-23.mycingular.net) (Ping timeout: 256 seconds)
[19:31:04] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f1:511a:fc4b:d8fb:97ab:66d3)
[19:34:56] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:fd5f:768f:fc40:13a0) (Ping timeout: 252 seconds)
[19:37:42] *** Joins: convexferret (~igloo@185.133.203.243)
[19:37:44] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b7fd:fa95:80d6:f41)
[19:42:03] *** Quits: convexferret (~igloo@185.133.203.243) (Remote host closed the connection)
[19:42:04] *** Joins: VincentVega (~user@212.97.1.43)
[19:43:46] *** Joins: makomo (~makomo@user/makomo)
[19:46:56] *** Joins: ajoberstar (~user@97-116-72-197.mpls.qwest.net)
[19:53:49] <White_Flame> aeth: still just CL:DEFPACKAGE vs CL2022:DEFPACKAGE etc
[19:57:30] *** Quits: luis (~luis@lisp/luis) (Quit: The Lounge - https://thelounge.chat)
[19:58:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:01:25] <rotateq> ack I want things that can stand really the test of time and not changes every three years so much and got messed up
[20:02:03] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[20:02:16] *** Joins: treflip (~user@user/treflip)
[20:02:26] <phoe> so, like, ANSI CL? :D
[20:02:37] * phoe drops the mic and walks out
[20:02:53] *** Joins: luis (~luis@lisp/luis)
[20:02:53] *** ChanServ sets mode: +o luis
[20:03:07] <rotateq> phoe: the devil said you that!! :D
[20:03:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[20:04:16] <rotateq> or cthulu, it's the perfect creature to symbolize C++ :D
[20:04:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[20:10:18] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[20:10:43] <jackdaniel> some fun with implementing fast gf dispatch in ecl: https://imgur.com/9VC0xSR.png
[20:11:45] <jackdaniel> (using clim :)
[20:19:27] <Josh_2> jackdaniel: What am I looking at?
[20:20:38] <jackdaniel> at a procedure that eliminates branches from the generic function dispatch tree
[20:22:14] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[20:22:28] *** Joins: treflip (~user@user/treflip)
[20:23:41] <aeth> White_Flame: yes, but...
[20:23:57] <aeth> White_Flame: you need DEFPACKAGE to do this. Or IN-PACKAGE, I guess
[20:24:30] <aeth> So it's slightly circular and what the expected default FOO:DEFPACKAGE is will determine what people will put in there (e.g. package local nicknames)
[20:24:31] <White_Flame> you start off in a package.  If your default package is CL-USER, which USEs CL, vs CL2022-USER, which USEs CL2022...
[20:25:52] <aeth> I do have to say, though, that it's a good thing that people didn't decide to do this this year or they may have chosen CL21
[20:25:55] <aeth> which is taken
[20:26:23] <Josh_2> jackdaniel: very cool
[20:26:36] <jackdaniel> thanks, this is somewhat more clear: https://imgur.com/Jhiopnb.png
[20:26:50] <jackdaniel> columns marked "split" show the decision point
[20:29:43] *** Quits: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:29:56] *** Joins: amb007 (~a_bakic@net39-32-245-109.mbb.telenor.rs)
[20:31:52] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e0:8d2d:fc4b:d8fb:97ab:66d3)
[20:33:04] *** Joins: Catie (~user@user/catie)
[20:34:44] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:35:37] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:d101:cff8:e2d9:4ac2) (Ping timeout: 240 seconds)
[20:35:59] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f1:511a:fc4b:d8fb:97ab:66d3) (Ping timeout: 252 seconds)
[20:36:10] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:36:47] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:47:24] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[20:49:31] *** Joins: asarch (~asarch@2806:10ae:7:df13:69a6:740c:cec7:3e22)
[21:13:08] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:13:56] *** Joins: Oladon (~olad@98.43.81.226)
[21:16:38] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[21:18:15] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:19:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:27:48] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:57:00] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:09:04] *** Quits: treflip (~user@user/treflip) (Quit: good night ✨)
[22:20:34] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:24:13] <Josh_2> With bknr is there a general consensus for how often one should snapshot?
[22:25:38] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e0:8d2d:fc4b:d8fb:97ab:66d3) (Read error: Connection reset by peer)
[22:28:06] <Josh_2> ANONYMOUS-TRANSACTION-IN-TRANSACTION :( I am getting this condition inconsistently
[22:28:18] <Josh_2> from what I can see there are no nested transactions
[22:30:56] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[22:33:02] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:36:24] <Josh_2> Oops
[22:36:26] <Josh_2> I figured it out
[22:48:55] *** Joins: yewscion_ (~yewscion@2604:ca00:149:10ff::460:78a6)
[23:10:00] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[23:10:38] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Ping timeout: 268 seconds)
[23:15:40] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[23:18:36] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[23:27:27] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[23:30:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[23:40:53] *** Joins: VincentV` (~user@212.97.1.43)
[23:42:32] *** Quits: VincentVega (~user@212.97.1.43) (Ping timeout: 240 seconds)
[23:43:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:46:22] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[23:46:58] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[23:47:34] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:58:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
