[00:00:04] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[00:01:30] <cbreak> like having constructors / destructors for lifetime guarantee enforcement, having overloading / templates for writing generic algorithms
[00:01:39] <ville> cbreak: templates? static reflection. defer? static reflection.
[00:02:27] <cbreak> I have to work with python a lot at work, and I really miss overloading.
[00:02:46] <ville> but for ergonomic reasons you'd still probably want these things as actual language features
[00:02:51] <cbreak> it has reflection, but it's just not the same having to write my "overload dispatching" myself
[00:09:05] <ville> great_taste: uuid versions 3 and 5? they are namespace + name -based and should generate the same uuid given the same input pair
[00:12:07] <ville> but i guess just using md5 or sha-1 should give you what you want... sure you can generate collisions for md5 but may not be practical
[00:16:04] *** Quits: magla (~gelignite@55d4dfc1.access.ecotel.net) (Quit: Stay safe!)
[00:30:14] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:36:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[00:37:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:42:02] <yates_home> is there an open-source library for viewing/printing pdf files?
[00:42:44] *** Quits: rito_ (~rito_gh@45.112.243.219) (Quit: Leaving)
[00:52:22] *** Joins: noarb (~noarb@user/noarb)
[00:56:11] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:689e) (Quit: Leaving)
[00:56:24] <ville> poppler?
[01:01:06] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:01:41] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[01:06:15] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[01:26:49] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:38:35] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[01:40:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:18] *** ChanServ sets mode: +v npaperbot
[01:44:20] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[01:44:25] <rpav> xkoncek: note you can get type names pretty much however you want, it just doesn't really help unless you want to like hash on them or string compare, which also doesn't really help
[01:45:20] <rpav> or i mean, it can, but you're still like doing string hashing/comparison, and if you want it across DLL boundaries you still have some issues
[01:47:20] <rpav> having better type loading/resolution and guarantees about what code is getting executed where .. would be nice but still hard since inline is still a thing
[01:47:26] <rpav> or rather, inlining
[01:47:33] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 250 seconds)
[01:47:50] <rpav> c++ JIT when i guess
[01:54:41] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 268 seconds)
[01:57:36] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:00:05] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:00:43] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:06:37] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[02:07:56] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:11:21] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:19:35] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Ping timeout: 252 seconds)
[02:23:04] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[02:25:25] *** Joins: Simplar (~Simplar@188.163.93.76)
[02:27:44] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[02:40:28] *** Joins: ferdna (~ferdna@user/ferdna)
[02:40:56] <PJBoy> [P1609]
[02:40:56] <npaperbot> P1609R3: [SG7, EWGI] C++ Should Support Just-in-Time Compilation <https://wg21.link/p1609r3> (by Hal Finkel) (2020-01-13) (Related: https://wg21.link/p1609r3/github)
[02:41:16] <PJBoy> cling is C++ JIT
[02:43:04] <LordKalma> "should support it"
[02:43:13] <LordKalma> like, doesn't that pretty much break the compilation model?
[02:43:28] <LordKalma> *the separate compilation model?
[02:46:51] <kalven> how so?
[02:47:48] <LordKalma> how does JIT deal with the fact things are compiled in random places and put together with a linker
[02:49:03] <kalven> by having a runtime linker?
[02:50:15] <LordKalma> fair enough
[02:50:45] <PJBoy> there are some limitations
[02:51:14] <PJBoy> like some template A existing can affect some other template B in C++
[02:51:35] <PJBoy> and a JIT model can't cope with that without potentially recompiling everything
[02:52:00] <PJBoy> it's an open question in the paper of how to deal with that
[02:52:34] <PJBoy> but the assumption is that anyone crazy enough to write JIT C++ would bear these limitations in mind
[02:52:56] <PJBoy> ...I think
[02:54:12] <PJBoy> there are a handful of implementations of this
[02:54:18] <PJBoy> and a paper
[02:54:36] <PJBoy> so we're already doing much better than the garbage collection thing
[02:55:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:55:51] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[03:01:02] *** Joins: AmR| (~AmREiSa@156.199.202.96)
[03:02:32] *** Quits: AmR (~AmREiSa@156.207.248.243) (Ping timeout: 268 seconds)
[03:03:06] <LordKalma> honestly garbage collection could have had some use cases if done right
[03:03:29] <LordKalma> like the audio guys who write GCs to keep destructors out of the hot DSP threads
[03:04:29] <veverak> yup, "delayed destruction" is a good thing
[03:04:35] <veverak> (I mean, as a tool)
[03:05:01] <great_taste> batch destruction?
[03:05:26] <veverak> I always wondered if one could just make GC smart pointer, just as a library
[03:05:37] *** AmR| is now known as AmR
[03:05:46] *** Quits: AmR (~AmREiSa@156.199.202.96) (Client Quit)
[03:05:46] <LordKalma> I've seen a talk from that guy from JUCE and what they do is basically use shared_ptrs and have a thread on a timer checking if there's only one owner (itself). if yes, disown it, so it's destructored
[03:05:47] <great_taste> a custom allocator?
[03:06:01] <LordKalma> veverak, I think Herb Sutter has one of github
[03:06:03] <veverak> LordKalma: yup, something like that
[03:06:39] <LordKalma> veverak, https://github.com/hsutter/gcpp
[03:06:52] <great_taste> LordKalma hmm elegant simplicity :)
[03:07:48] <veverak> yeah but in the end shared_ptr won't be enough
[03:07:51] <veverak> you want customm allocator
[03:07:58] <LordKalma> why?
[03:08:01] <veverak> (so you can use this with vector/map...)
[03:08:02] <hnOsmium0001[m]> discussion question: do you guys use `std::literals::string_literals::operator""s` whenever possible in your projects?
[03:11:36] <ville> no
[03:12:51] <Alipha> veverak: I also wrote a gc_ptr, but I want to rewrite it to make it more usable
[03:12:56] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[03:13:04] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:13:10] <LordKalma> is std::string constructor constexpr in some standard?
[03:13:17] <LordKalma> because that would make ""s useless
[03:13:23] <cbreak> hnOsmium0001[m]: no
[03:13:24] <ville> LordKalma: if only there was a way to find out
[03:13:32] <LordKalma> !std::string
[03:13:33] *** Quits: Munnu (~timo@81-197-121-241.elisa-laajakaista.fi) (Ping timeout: 250 seconds)
[03:13:33] <nolyc> http://en.cppreference.com/w/cpp/string/basic_string
[03:13:47] <veverak> Alipha: it's one of the thing that I consider "good exercise"
[03:13:57] <veverak> same way I waste time with that static_vector of mine
[03:14:02] <veverak> one learns so many things...
[03:14:04] <LordKalma> oh, it is since C++20
[03:14:05] <LordKalma> cool
[03:14:30] <ville> LordKalma: doesn't necessarily onsolte it anyways, as it's less to write _s... once youve written more to make it usable
[03:14:37] <ville> obsolete
[03:14:43] <ville> err s
[03:15:38] <hnOsmium0001[m]> it also gets you directly a value of type std::string, which can help in heavily templated code
[03:17:18] <cbreak> std::string("blah") also does that
[03:17:22] <ville> which std::string("x") would do
[03:17:36] <hnOsmium0001[m]> longer to type than ""s :P
[03:17:59] <ville> hnOsmium0001[m]: and how many times do you have to use s to recoup the letters you spent on the using?
[03:18:01] <cbreak> but shorter to type than std::literals::string_literals::operator""s ("x")
[03:18:30] <cbreak> (and I'm not even sure if that's legal)
[03:19:12] <hnOsmium0001[m]> I don't think so, I've always just using namespace'd it if I want a bunch of string literals in a function
[03:21:18] <cbreak> << std::literals::string_literals::operator""s ("x")
[03:21:18] <geordi> error: no matching function for call to 'operator""s(const char [2])'
[03:21:31] <cbreak> looks like this is the wrong signature
[03:21:36] <RandomReader> I've used ""sv, but haven't had any particular urge to use ""s
[03:21:44] <cbreak> << std::literals::string_literals::operator""s ("x", 1)
[03:21:44] <geordi> x
[03:21:59] <cbreak> calling ""s directly is annoying :)
[03:22:24] <cbreak> but at least it doesn't have to traverse the string for to search for "\0"
[03:22:41] <cbreak> << "pizza\0zero"s
[03:22:41] <geordi> pizza[\NUL]zero
[03:22:48] <cbreak> << std::string("pizza\0zero")
[03:22:49] <geordi> pizza
[03:28:26] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[03:34:38] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:39:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3478:2738:1572:60f4) (Quit: Quit)
[03:40:01] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:45:33] <Alipha> If you're typing std::string("foo") more than a couple times, I think it's more readable to use s.
[04:01:48] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:04:09] *** Quits: rajkosto (~rajkosto@178.220.166.84) (Read error: Connection reset by peer)
[04:12:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3478:2738:1572:60f4)
[04:19:49] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Read error: Connection reset by peer)
[04:20:27] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[04:21:20] <PJBoy> string's ctor being constexpr doesn't make operator""s useless :/
[04:21:54] <PJBoy> operator""s *uses* string's ctor the exact same way you'd call string's ctor without that operator existing
[04:22:40] <PJBoy> (I'm not an hour late, you're all just an hour early)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:34:29] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:39:04] *** Quits: gothicserpent (~gothicser@2604:a880:2:d0::2204:b001) (Quit: WeeChat 3.2)
[04:39:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:39:40] *** Joins: gothicserpent (~gothicser@2604:a880:2:d0::2204:b001)
[04:40:27] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Read error: Connection reset by peer)
[04:40:52] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:41:08] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:5ddb:8a97:9351:9dc8)
[04:52:06] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:5ddb:8a97:9351:9dc8) (Remote host closed the connection)
[04:52:36] *** Joins: frost (~frost@user/frost)
[04:55:57] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 240 seconds)
[04:57:24] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[04:59:39] *** Joins: malloy (~jimery@116.30.221.255)
[05:02:02] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[05:08:59] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 252 seconds)
[05:14:38] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[05:16:36] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[05:16:40] *** Joins: frost (~frost@user/frost)
[05:21:01] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[05:21:16] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[05:21:56] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:39:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[05:40:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:18] *** ChanServ sets mode: +v npaperbot
[05:42:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[05:43:34] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:47:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:52:59] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 252 seconds)
[05:56:48] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[06:02:21] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 256 seconds)
[06:10:41] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[06:19:55] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:29:45] *** Quits: RandomReader (~RandomRea@user/randomreader) (Quit: RandomReader)
[06:32:33] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:cc19:3365:7e26:518d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:35:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:40:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[06:49:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1924:e8ea:9f2b:62f8)
[06:52:44] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[06:55:08] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[06:58:54] *** Joins: supernova (~quassel@2405:9800:ba11:6207:e81e:a17f:33c2:d6f8)
[07:00:33] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:05:49] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 256 seconds)
[07:13:59] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1924:e8ea:9f2b:62f8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:15:03] *** Joins: RandomReader (~RandomRea@user/randomreader)
[07:18:28] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[07:18:30] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:19:10] *** Joins: adeliktas8 (~adeliktas@i59F4A2E7.versanet.de)
[07:21:17] *** Quits: adeliktas (~adeliktas@i59F52E80.versanet.de) (Ping timeout: 240 seconds)
[07:21:17] *** adeliktas8 is now known as adeliktas
[07:22:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:30:03] *** Quits: supernova (~quassel@2405:9800:ba11:6207:e81e:a17f:33c2:d6f8) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:55:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:02:47] <yates_home> ville: thank you (re: poppler)
[08:06:47] *** Joins: nshire (~nshire@user/nshire)
[08:09:43] <yates_home> could someone please explain to me why the Qt developers chose to reimplement std::string as QString and propagate the constant hell that decision brings?
[08:09:57] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:f129:8ed3:b1ff:82ed) (Ping timeout: 240 seconds)
[08:12:09] <hnOsmium0001[m]> yates_home: more precisely, std::string chose to reimplement QString - in other words, QString was created before std::string became a thing
[08:12:25] <yates_home> say it isn't so!
[08:12:28] <hnOsmium0001[m]> or at least, became a thing that's even remotely usable across different compiler versions and implementations
[08:12:50] <yates_home> then i owe Qt an apology!
[08:25:41] <RandomReader> when C++ was starting to get popular in the 90s, one of the focuses for many folks was on application frameworks, since one of the obvious usages for a language good at abstraction was large desktop applications
[08:26:15] <RandomReader> Qt, Borland, etc were all in the mix during that time, but C++ and its library didn't become standardized until 1998, quite a bit after all these efforts started
[08:30:35] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[08:31:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[08:41:01] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:41:37] *** Joins: biberu\ (~biberu@user/biberu)
[08:45:33] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[08:45:33] *** biberu\ is now known as biberu
[08:54:52] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[08:56:49] *** Joins: malloy (~jimery@116.30.221.255)
[09:10:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Ping timeout: 252 seconds)
[09:15:01] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[09:15:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:18:53] *** Quits: p-i- (~Ohmu@2403:6200:8978:eb29:85a4:2121:8f52:ab6b) (Read error: Connection reset by peer)
[09:19:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:19:33] *** Joins: p-i- (~Ohmu@2403:6200:8978:35fc:2893:deb2:6991:2866)
[09:19:56] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Client Quit)
[09:20:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[09:22:42] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:24:18] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:30:05] *** Joins: kapil (~kapil@okweb.co.in)
[09:39:28] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Quit: Leaving)
[09:40:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:19] *** ChanServ sets mode: +v npaperbot
[09:52:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::e14e) (Ping timeout: 240 seconds)
[09:55:18] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[10:00:34] <ville> even if it came after having their own text type would still allow them to do things such unicode independent of committee's inaction
[10:07:31] <ville> and if your plan is to do internationalization then having your own text type is probably still the rigth choice. at the very least you don't want std::string, you'd want std::pmr::string-like
[10:12:25] <ville> and now if you're using anything from the standard library you probably want to pick the std::pmr:: version by default. at least then you're not stuck with the allocator in the type
[10:13:10] <ville> and what the hell. how is my ctrl-k not working anymore...
[10:13:33] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[10:16:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[10:18:17] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:19:51] <RandomReader> yeah, if I were doing an application framework, there isn't actually a lot of stdlib I'd want to build on
[10:22:10] <RandomReader> type traits, smart pointers, threads, a decent chunk of general language support are all useful .. some of diagnostics maybe .. probably containers/iterators/concepts
[10:23:16] <RandomReader> strings, localization, I/O, filesystem are not suitable
[10:23:43] <RandomReader> current chrono and some of numerics are probably useful, although I'm not sure about chrono's interface
[10:23:59] <RandomReader> but as something to build My Ideal Interface on, possible
[10:25:17] <RandomReader> containers/iterators/concepts are interesting because I wouldn't want to be incompatible, I'm just not sure I'd build anything more on top of them
[10:27:08] <RandomReader> I haven't explored ranges, so no opinion on that yet
[10:33:58] *** Joins: supernova (~quassel@2405:9800:ba11:6207:b5e7:2742:78e3:80ed)
[10:42:20] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[11:03:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:35fc:2893:deb2:6991:2866) (Ping timeout: 240 seconds)
[11:11:33] *** Joins: p-i- (~Ohmu@2001:44c8:4616:ce32:c99b:a4c2:c4ba:3ff4)
[11:12:39] *** Joins: p-i-_ (~Ohmu@182.232.229.219)
[11:14:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[11:15:51] *** Quits: p-i- (~Ohmu@2001:44c8:4616:ce32:c99b:a4c2:c4ba:3ff4) (Ping timeout: 250 seconds)
[11:16:51] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:17:16] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:17:41] *** Joins: aniketgm (~Aniket@49.36.107.251)
[11:24:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:28:03] *** Joins: ravan_ (~ravan@user/ravan)
[11:28:20] *** Joins: smoke (~smoke@user/smoke)
[11:28:48] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 268 seconds)
[11:31:08] *** Joins: ravan (~ravan@42.201.198.151)
[11:31:08] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[11:31:08] *** Joins: ravan (~ravan@user/ravan)
[11:32:43] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 256 seconds)
[11:33:14] *** Quits: aniketgm (~Aniket@49.36.107.251) (Quit: leaving)
[11:37:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:38:56] *** Quits: BluesBoy (~bboy@user/bluesboy) (Ping timeout: 252 seconds)
[11:39:16] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:39:52] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:40:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3478:2738:1572:60f4) (Quit: Quit)
[11:40:42] *** Joins: BluesBoy (~bboy@stotz2.com)
[11:40:42] *** Quits: BluesBoy (~bboy@stotz2.com) (Changing host)
[11:40:42] *** Joins: BluesBoy (~bboy@user/bluesboy)
[12:03:33] *** Joins: andreasbuhr (~quassel@p549dbd3f.dip0.t-ipconnect.de)
[12:08:49] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:14:01] *** Joins: p-i- (~Ohmu@2001:44c8:4616:ce32:290c:8704:ebb5:f11)
[12:14:39] *** Joins: p-i-__ (~Ohmu@mx-ll-180.183.72-213.dynamic.3bb.co.th)
[12:16:55] *** Quits: p-i-_ (~Ohmu@182.232.229.219) (Ping timeout: 256 seconds)
[12:18:32] *** Quits: p-i- (~Ohmu@2001:44c8:4616:ce32:290c:8704:ebb5:f11) (Ping timeout: 252 seconds)
[12:18:49] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[12:25:22] <manuels> Accessing a template function of base in derived ctor should work right?
[12:25:32] <manuels> I get Exc_bad_acces
[12:26:30] <manuels> The base template fn does a dynamic_cast which throws
[12:29:47] *** Joins: robod34 (Username@79.113.195.239)
[12:34:00] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[12:34:45] *** Joins: zmt01 (~zmt00@user/zmt00)
[12:35:52] <very_sneaky> !paste manuels
[12:35:53] <nolyc> very_sneaky: Error: "paste" is not a valid command.
[12:36:03] <ville> !give manuels testcase
[12:36:04] <nolyc> manuels: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[12:36:08] <very_sneaky> maybe i'm getting channels confused
[12:36:29] <very_sneaky> ville: ta
[12:36:43] <ville> manuels: but during construction nothhing about dynamic typing works
[12:44:22] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:47:28] <ville> manuels: http://www.eelis.net/c++draft/class.cdtor#6 seems i was slightly too over-eager in my statement
[12:48:11] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:49:22] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:49:38] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[12:52:27] <tsujp> trying to build a C++ project from microsoft here: https://github.com/microsoft/Windows-driver-samples/tree/master/video/IndirectDisplay/IddSampleDriver
[12:52:34] <tsujp> `lld-link: error: undefined symbol: memset`
[12:52:38] <tsujp> What's up with that? Anyone got any insight?
[13:04:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[13:11:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[13:11:58] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:15:37] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:20] <cbreak> tsujp: go find the place where memset is defined
[13:16:44] <cbreak> normally that'd be the C library
[13:16:54] <tsujp> yeah it's not that simple in Windows land
[13:16:56] <cbreak> but for a kernel driver? You might not be allowed to use it
[13:17:18] <tsujp> This is a driver (see the project link please) and so memset has to be linked from _somewhere_ (god knows where). If it wasn't a driver string.h or memory.h would suffice
[13:17:23] <comrad> usually the (linux) kernel has subsistutes for standard library functions
[13:17:35] <tsujp> I mean, this is a literal copy-paste from their example project. That project is from Microsoft
[13:17:43] <tsujp> I'm just trying to use CMake and not Visual Studio
[13:17:50] <cbreak> tsujp: you could try to switch to c++
[13:17:56] <tsujp> ... I am using C++
[13:17:56] <cbreak> and use std::fill instead of memset
[13:18:08] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[13:18:11] <cbreak> maybe that works better
[13:18:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:19:22] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:19:40] <cbreak> tsujp: does the original project compile and link? if it does, then you must have missed something while copy & pasting
[13:19:40] <ville> tsujp: first confirm that it works as they've specified it to be built using their preferred environment
[13:19:54] <tsujp> I'm now installing that stuff now, it's beaten me down that low
[13:20:16] <cbreak> you didn't install the toolchain and expect it to work? :O
[13:20:28] <tsujp> Visual Studio Build Tools is installed
[13:20:33] <ville> tsujp: but in general undefined symbols just means you're not linking to whatever defines the symbol. in this case you've somehow managed to avoid linking with the standard library
[13:20:41] <tsujp> Visual Studio the IDE isn't and that _should_ have nothing to do with _building_ the project
[13:20:46] <cbreak> I'd expect you to need the windows equivalent of the kernel SDK at least
[13:20:55] <tsujp> Yes I have the Windows WDK
[13:20:59] <cbreak> not the windows sdk
[13:21:05] <tsujp> Got that too
[13:21:15] <cbreak> the windows sdk is for userland stuff I think
[13:21:25] <tsujp> UMDF V2 drivers run in userland
[13:21:49] <ville> tsujp: so a good starting point is to look at the exact command you are using to invoke your compiler and linker
[13:22:25] <cbreak> display drivers too? I doubt that. Windows is a platform so dumb, they put font rendering into the kernel. They wouldn't put something actually performance critical, like a display driver, into userspace.
[13:22:52] <cbreak> (and yes, linux is even worse, they put web servers into the kernel...)
[13:23:04] <tsujp> command from cmake https://pastebin.com/raw/WqGHxMcB
[13:23:24] <tsujp> `lld-link: error: undefined symbol: memset`
[13:23:28] <tsujp> visual studio is downloading
[13:23:44] <ville> i am guessing but /C means compile, not link
[13:24:04] <tsujp> ctrl+f for link
[13:24:11] <tsujp> it's all one line copy-pasted verbatim
[13:24:17] <tsujp> and the error is ``lld-link: error: undefined symbol: memset``
[13:25:27] <cbreak>  /NODEFAULTLIB
[13:25:32] <ville> that'll do it
[13:26:27] <tsujp> Yeah so it's meant to be built with /NODEFAULTLIB because it's a driver
[13:26:58] <tsujp> Removing /NODEFAULTLIB means it cannot then find(getting error)
[13:27:19] <tsujp> `lld-link: error: undefined symbol: IddClientVersionHigherThanFramework`
[13:27:45] <tsujp> Which is imported in the header file and provided by microsoft
[13:28:32] <ville> mayeb you can tell the linker it's a weak symbol or some such. no clue what the windows equivalent is
[13:28:46] <cbreak>  /D_ATL_NO_WIN_SUPPORT /DUMDF_DRIVER /DIDDCX_VERSION_MAJOR=1 /DIDDCX_VERSION_MINOR=6 /DIDDCX_MINIMUM_VERSION_REQUIRED=4
[13:29:00] <RandomReader> a lot of this is probably off base
[13:29:49] <RandomReader> I haven't spent any time with UDMF specifically, but a couple things may be at play: memset can be an intrinsic if cl is instructed to use it instead, and tsujp appears to be trying to use clang, which also seems unlikely to work (unless MS has recently put compat effort into the UMDF)
[13:30:17] <RandomReader> so the earlier comment about making it work with the intended build environment is exactly the place to start
[13:30:22] <cbreak> clang, on windows? :O
[13:30:40] <cbreak> a lot has changed in the decade I've spent any time there it seems...
[13:30:53] <tsujp> clang-cl specifically, I desired the LLVM portability for other things I was writing in C and reused to toolchain but using MSVC proper I am on to now
[13:30:57] <RandomReader> current MS STL can build with clang (intentionally), but I don't know if they've done that with the driver kits
[13:31:33] <RandomReader> well, and the normal SDK too, that's how Chrome ships
[13:32:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:32:08] <tsujp> Hang on, "Windows Universal CRT SDK"
[13:32:21] <tsujp> That's a C Runtime Library for Universal (hope this means Universal Drivers) in this case...?
[13:32:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f562:1fa:c6e5:b53b)
[13:33:09] <RandomReader> the Universal CRT is just the name for the runtime that is serviced as part of Win10+ now, rather than as part of VS
[13:33:42] <tsujp> There does appear to be, at least on MSDN docs, a distinction between Universal C runtime and Universal C++ runtime
[13:33:53] <tsujp> I mention it because I was following the universal driver instructions on MSDN too
[13:34:12] <tsujp> So it's a universal windows driver for an indirect display device using the UMDF V2 object model
[13:34:17] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:34:21] <tsujp> all of which I learned about and of 2 days ago
[13:35:10] <tsujp> UMDF V2 drivers run in userland via some kernel reflector (which you cannot touch and is part of windows) meaning any instability in your driver etc doesn't cause system instability
[13:35:16] <tsujp> as opposed to KMDF drivers which run inside the kernel
[13:35:25] <tsujp> UMDF and KMDF are both WDM type drivers
[13:35:34] <tsujp> And there's a general framework for all that too called WDF I think
[13:35:43] <Stryyker> WDM is old fashioned
[13:35:44] <tsujp> Point is: there's a lot of stuff here
[13:36:29] <tsujp> Stryyker I do see `#import <wdm.h>` in their example project though so beats me
[13:36:40] <tsujp> Still downloading all the stuff to run visual studio with this gonna take a bit
[13:36:51] <tsujp> only 980 KB/s on my australian internet
[13:37:01] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:38:05] <RandomReader> the build tools + kits might be sufficient, but you'd need to use msbuild, not cmake
[13:38:47] <tsujp> Yeah
[13:40:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:19] *** ChanServ sets mode: +v npaperbot
[13:43:12] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[13:43:31] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:45:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[13:58:31] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[14:00:57] *** Quits: supernova (~quassel@2405:9800:ba11:6207:b5e7:2742:78e3:80ed) (Ping timeout: 240 seconds)
[14:02:30] *** Joins: AmR (~AmREiSa@156.199.202.96)
[14:18:53] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:19:53] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:20:17] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:20:19] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:29:50] <tsujp> So if I open the project it says `WindowsUserModeDriver10.0 (not installed)`
[14:30:11] <tsujp> But that cannot be true because I'm looking at the visual studio configuration page showing me the Windows 10 WDK is installed
[14:30:16] <tsujp> (and the SDK too)
[14:34:03] *** Joins: seninha (~seninha@user/seninha)
[14:34:24] <TinoDidriksen> tsujp, https://stackoverflow.com/a/59064073/145919 - try the VSIX installer. Several Google hits mention that when searching for WindowsUserModeDriver10.0
[14:37:02] <tsujp> I uninstalled 2019 and moved to 2022 to try and get everything up to snuff, I guess uninstalling 2022 and going back to 2019 now
[14:37:20] <TinoDidriksen> That shouldn't be necessary.
[14:37:33] <TinoDidriksen> Just install the matching WDK and its VSIX.
[14:37:33] <tsujp> It is because the VSIX installer says it only works with 2019
[14:37:45] <tsujp> Yeah the WDK for my W10 version is 2019 only
[14:37:50] <tsujp> It appears
[14:38:29] <tsujp> I'm on Windows 10.0.19041
[14:38:48] <tsujp> There's also a verion called 20H2 which is mine too
[14:39:05] <tsujp> When I installed the WDK I installed the 2004 one since that was the closest match on the product page
[14:39:10] <TinoDidriksen> Newer WDK can still target older Windows.
[14:41:40] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[14:44:33] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[14:44:34] <tsujp> Sec restarting my machine
[14:44:45] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[14:44:49] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[14:46:38] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[14:51:14] <tsujp> Okay installing the Visual Studio Build Tools 2019 again and then also the WDK afterwards.
[14:57:52] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f562:1fa:c6e5:b53b) (Ping timeout: 268 seconds)
[15:05:38] *** Joins: rito_ (~rito_gh@45.112.243.151)
[15:26:35] <tsujp> Okay back on 2019 everything I can actually run the VSIX installer this time
[15:28:05] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[15:30:03] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:35:15] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[15:37:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:37:56] <tsujp> Right it builds now, cool
[15:38:03] <tsujp> Now I want to.. not use Visual Studio
[15:38:16] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:bcc6:eca5:e6cf:61c4)
[15:38:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Client Quit)
[15:39:35] <tsujp> There must be a way to make Visual Studio output every single command it's calling when it's building this C++ solution so I can see what it's doing
[15:40:16] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[15:40:56] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[15:57:49] <cbreak> tsujp: there's a CLI build thingie for vs, I think... msbuild? not sure.
[15:59:50] <tsujp> I've gotten the CL.exe and LINK.exe commands from the build log
[15:59:56] <tsujp> So I can see what it's doing
[16:00:40] <tsujp> here they are https://pastebin.com/raw/CnLUJ4ed
[16:02:53] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:03:12] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[16:05:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:06:18] *** Joins: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu)
[16:08:33] *** Joins: pulse (~pulse@user/pulse)
[16:11:37] <ville> at least the /NODEFAULT lib parameters are different: "/NODEFAULTLIB" vs "/NODEFAULTLIB:kernel32.lib", and some others
[16:17:03] <tsujp> `idd_driver.cpp.obj : error LNK2019: unresolved external symbol __imp__invalid_parameter` im going to try and copy those options in
[16:17:13] <tsujp> CMake using Ninja as the generator gives that
[16:17:21] <tsujp> ofc the visual studio build works fine
[16:17:46] <tsujp> If I use CMake with the Visual Studio Generator I get an error about spectre mitigation, so im just gonna install those libs and see what happens
[16:26:02] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[16:29:07] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[16:46:07] <tsujp> Ooooooooooooooooooo we have a built DLL using ninja!!!
[16:46:25] <tsujp> I just copied every single argument in but it's using CMake and Ninja to generate the build files ooooooo
[16:46:45] <tsujp> (now to see if the DLL really works, but first... food)
[16:50:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:bcc6:eca5:e6cf:61c4) (Ping timeout: 240 seconds)
[16:53:32] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[16:55:34] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4890:dc4a:4e6c:df38)
[17:12:36] *** Joins: john99 (~john99@170.246.103.34.bc.googleusercontent.com)
[17:15:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a892:5f2f:3801:1e1e)
[17:15:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a892:5f2f:3801:1e1e) (Changing host)
[17:15:33] *** Joins: skapata (~Skapata@user/skapata)
[17:30:03] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 250 seconds)
[17:32:46] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:e4ef:c23f:2799:9ee2)
[17:35:47] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:37:54] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:40:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:20] *** ChanServ sets mode: +v npaperbot
[17:40:26] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:42:55] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[17:43:19] *** Quits: Guest1145 (~somewhere@202-63-76-134.ip4.superloop.com) (Ping timeout: 256 seconds)
[17:43:55] *** Joins: etolier (~somewhere@125-63-6-35.ip4.superloop.com)
[17:51:17] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[17:53:49] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:00:45] *** Joins: Miyu (~hackkitte@94.31.103.136)
[18:03:25] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 250 seconds)
[18:05:14] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:05:26] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:05:37] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:12:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:15:07] <john99>  Hi, i am trying to get ownership of a copy from a pointer that come from C
[18:15:08] <john99>  https://godbolt.org/z/ej16Ts6Me
[18:15:08] <john99> someone can help me to pass the raw pointer to unique_ptr?
[18:16:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[18:18:15] *** Miyu is now known as hackkitten
[18:19:01] *** PJBoy is now known as Guest6061
[18:19:01] *** Quits: Guest6061 (~PJBoy@user/pjboy) (Killed (osmium.libera.chat (Nickname regained by services)))
[18:19:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[18:19:05] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[18:19:31] *** Joins: PJBoy (~PJBoy@user/pjboy)
[18:23:25] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:e4ef:c23f:2799:9ee2) (Ping timeout: 240 seconds)
[18:24:50] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[18:25:45] <leduyquang753> Deleter here is pointer so the constructor takes more than just the object pointer.
[18:29:44] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:31:47] <john99> yes, answered in general
[18:31:51] <john99> ty anyway :)
[18:32:03] <PJBoy> this is general
[18:33:17] <john99> in the other
[18:33:25] <john99> i need a rest seriously XD
[18:41:47] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:42:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[18:45:54] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: ville)
[18:47:00] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[18:54:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68)
[19:00:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[19:04:11] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[19:04:43] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:07:27] *** Joins: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com)
[19:08:35] <yates> does anyone know of an open-source way to generate dependency graphs (I call them structure charts) from c/c++ source?
[19:09:38] <yates> i've found sourcetrail, but are there others? (under linux, btw)
[19:10:27] <yates> sourcetrail depends on qt 5.12.3, but this link was blocked by chrome: https://download.qt.io/official_releases/qt/5.12/5.12.3/qt-opensource-linux-x64-5.12.3.run
[19:10:47] <yates> stating something like "site is known to host malware". is this legit?
[19:13:54] <yates> yes, there is doxygen too. i guess..
[19:15:09] <yates> the code i want to analyze has a bunch of conditional compile labels which must be defined at the top, and i don't see a good way to do that with doxygen
[19:17:37] <ville> clang++ -S -emit-llvm main.cxx -o - | opt -analyze -std-link-opts -dot-callgraph
[19:18:00] <ville> you need llvm installed, not just clang++, for the opt command probably
[19:19:50] <yates> ville: thanks! let me give that a spin
[19:23:08] *** Joins: PJBoy (~PJBoy@user/pjboy)
[19:23:10] <yates> under ubuntu there are a ton of llvm versions available, up through 10. should i install 10?
[19:24:53] *** Quits: Tokamak (~Tokamak@172.58.188.174) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:25:06] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[19:27:12] <yates> ubuntu 18.04LTS
[19:31:07] *** Joins: Tokamak (~Tokamak@172.58.188.174)
[19:33:48] *** Quits: Tokamak (~Tokamak@172.58.188.174) (Client Quit)
[19:38:06] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[19:42:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[19:43:01] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:43:25] *** Joins: supernova (~quassel@2405:9800:ba11:6207:418b:9c79:9aa8:90d8)
[19:44:07] <supernova> Guys! Can you explain what exactly means this syntax? ( const string &name )
[19:44:14] <supernova> how can it be const and &?
[19:45:48] <ville> reference-to-const-string, guess which part corresponds to which
[19:48:10] <supernova> i suppose it used when you want to have right part to be constant, and left part to be modified, e.g ExampleName = name;
[19:48:51] <supernova> next question, what is the difference between pass by reference and pass by value?
[19:49:08] <Alipha> !give supernova books
[19:49:10] <nolyc> supernova: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[19:49:46] <supernova> :C
[19:49:57] <ville> supernova: pass by value copies, pass by reference doesn't
[19:50:14] <PJBoy> https://www.learncpp.com/cpp-tutorial/passing-arguments-by-reference/
[19:50:51] <supernova> i mean when one part is constant, why do we want to use pass by reference?
[19:50:51] <supernova> When we want to modify left part?
[19:50:58] <rpav> "copy" depends on your value
[19:51:13] <PJBoy> read the webpage
[19:51:34] <PJBoy> it covers pass by reference and const references
[19:51:39] <rpav> conceptually you will be working with a copy; realistically for various values you may get register-pass and it's faster than a ref
[19:51:42] <PJBoy> probably any followup questions too
[19:52:28] <supernova> i'm familiar with this topic, but i need to study more about it rn
[19:52:42] <rpav> const ref is probably similarly optimized these days so probably the safest option, except annoying if you want to modify it .. nothing consistent in C++
[19:53:20] <rpav> except "make everything skate around goals"
[19:55:19] <Alipha> supernova: https://wandbox.org/permlink/whR66YqyL0Xytove
[19:56:17] <supernova> is there a real value vs pass by value *passing arguments by value, the only way to return a value back to the caller is via the function’s return value.* ?
[19:56:31] <supernova> i mean does it have common usage?
[19:59:35] <Alipha> supernova: https://wandbox.org/permlink/8n5zJCMtxB1nV0bH
[20:02:05] <john99> nice answer, Alipha, the point that is faster that simply pass the pointer? someone check when is that case?
[20:03:06] <Alipha> john99: you're asking why pass by reference instead of pass by pointer?
[20:03:10] <john99> yes
[20:03:25] <PJBoy> https://www.learncpp.com/cpp-tutorial/passing-arguments-by-reference/ >_>
[20:03:59] <LordKalma> https://twitter.com/vzverovich/status/1475859371145846794/photo/1
[20:04:04] <LordKalma> ^what the hell happened?
[20:04:04] <supernova> Thanks guys, researching all links
[20:04:59] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:05:06] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:05:16] <PJBoy> looks like a shitpost to me
[20:05:38] <LordKalma> probably
[20:06:24] <PJBoy> bahahaha that one's good https://twitter.com/vzverovich/status/1475531294897438723
[20:06:45] <Alipha> john99: references have a nicer syntax and you never have to worry about them being null, so you should generally use references whenever you can. you'd use a pointer if you want to be able to pass in nullptr or if you need to modify where the pointer points to
[20:06:57] <PJBoy> dude this guy shitposts constantly
[20:07:13] <PJBoy> looks like you're supposed to not take anything he says seriously
[20:07:32] <LordKalma> oh shit I just looked who it is on the right
[20:07:34] <john99> Alipha, ok, ty, i lately have too much polymorphism then are all pointers anyway
[20:07:36] <LordKalma> the fmt::lib guy
[20:07:44] <PJBoy> yeah, you posted him before IIRC
[20:07:47] <Plazma> make sure to mark as unsafe per the rust documentation
[20:07:47] <LordKalma> we've already talked here how much of a shitposter he is
[20:07:55] <LordKalma> !rust
[20:07:56] <nolyc> Rust is composed of iron oxides. In colloquial usage, the term is applied to red oxides, formed by the reaction of iron and oxygen in the presence of water or air moisture.
[20:07:59] <jbalint> what are the three dots at the very end here? I'm having trouble understanding this: static constexpr Type tbl[] = {&Table<Ts, Ts...>::template visit<V, Value, Args...>...};
[20:08:04] <PJBoy> I don't remember his nick being such a catastrophe though
[20:08:26] <LordKalma> PJBoy, sounds like a football player I hear quite a lot on the news
[20:08:53] <PJBoy> jbalint, is there context code for that snippet?
[20:08:54] <supernova> Alipha, thanks! and since computing the sum does not modify the vector, we should mark v as a reference-to-const. Great answer
[20:09:30] <PJBoy> one of those template arguments must be a parameter pack
[20:09:34] <PJBoy> probably V
[20:10:01] <LordKalma> Ts... is one, Args.. is the other...
[20:10:06] <jbalint> PJBoy: i cant share too much of this code which isnt public yet. the Type is declared immediately preceding using decltype
[20:10:11] <LordKalma> but that shitty ::template syntax I never understood
[20:10:15] <PJBoy> and there's a third one
[20:10:30] <jbalint> the third one is outside of any template argument
[20:11:01] <PJBoy> could be an `auto...` potentially
[20:11:04] <LordKalma> visit</*whatever */>... seems to be a param pack to ::template ?
[20:11:34] <jbalint> yeah that's a bit confusing
[20:11:41] <PJBoy> oh
[20:11:47] <PJBoy> it's just that first Ts that's mentioned
[20:11:53] <yates> supernova: because of the size of the object, you may want to pass by reference rather than by value, and you may not want the callee to modify the object, just read it
[20:12:11] <PJBoy> the second Ts gets expanded immediately, the first Ts gets expanded later
[20:12:58] <PJBoy> the template keyword is needed there just because `Table` depends on those template arguments
[20:13:22] <PJBoy> so you need to tell C++ that Table::visit is a template, because it doesn't know until instantiation time
[20:13:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68) (Quit: Quit)
[20:13:24] <jbalint> is visit called here because it's a constexpr?
[20:13:55] <PJBoy> I'm sure there's other reasons to call visit
[20:14:14] <LordKalma> PJBoy, you explained that to me before and I never get it. Oh well. I'll do C# I guess, after this web-dev project haha
[20:14:43] <PJBoy> I'm gonna keep explaining it until you get it
[20:14:44] <jbalint> it seems liek visit is called to create the array contents
[20:14:57] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[20:15:27] <ville> john99: https://wolchok.org/posts/parameter-passing/
[20:15:34] <Alipha> supernova: https://wandbox.org/permlink/9aKreS9dFi2wPupq
[20:17:32] <Alipha> john99: passing by reference keeps the polymorphic behavior. and if you have a pointer (hopefully a smart pointer), you can still make your functions take references and just use * when you call them, e.g., foo(*p)
[20:17:59] <john99> ???
[20:18:00] <jbalint> wait no, visit is not called until runtime. so it's creating one function pointer for each of the args
[20:18:35] <john99> Alipha, can i pass a polimorfic class by reference ?
[20:18:42] <john99> ufff, google searching
[20:18:47] <Alipha> john99: yes
[20:18:49] <LordKalma> PJBoy, I'd hard to start doing TMP to understand it
[20:18:51] <LordKalma> only by doing
[20:19:07] <PJBoy> yeah
[20:19:19] <PJBoy> I said this last time too, having to specify that template keyword is pretty rare
[20:19:20] <rpav> yeah .. but do a bit and you'll find it's surprisingly easier than you might expect
[20:19:21] <Alipha> john99: void foo(const Base &b) { b.bar(); }  // will call Derived::bar
[20:19:41] <john99> UFFF now i ahve to rewrite a lot of code .....
[20:19:41] <jbalint> PJBoy: thanks for your help. i'll keep working through it
[20:19:57] <rpav> i think the main disconnect is understanding when you're working with _a type_ and what that really entails, and i guess the useful things you can do with it
[20:20:16] *** Quits: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu) (Quit: r-g)
[20:20:18] <john99> well, not too much becouse i still ahve the problem of the C pointer
[20:20:22] <PJBoy> jbalint, hope I did help somehow :D
[20:20:34] <PJBoy> trying to see if I can write some accompanying code from scratch
[20:20:59] <jbalint> i at least have a sense of it now. might just come back to it later. still some progress
[20:22:16] <Alipha> jbalint: yes, it's creating an array of function pointers, one for each type inside `Ts...`, where the `Ts` (not the `Ts...`) is different for each function pointer in `Table<Ts, Ts...>`, from what i can tell
[20:23:23] <jbalint> Alipha: the third expansion is what creates the array, right? what is being expanded there? Ts?
[20:24:26] <supernova> Alipha, what do you mean by "doubleElements"?
[20:25:12] <PJBoy> in the final expansion, everything before the final ... gets one of the Ts parameters substituted for that first Ts
[20:25:19] <Alipha> jbalint: yes. and `Ts` is expanded because it's a parameter pack but doesn't have the `...`
[20:25:24] <Alipha> jbalint: https://wandbox.org/permlink/3vdtt3rE8EuxeIr7
[20:25:54] <PJBoy> nice demo
[20:26:11] <Alipha> supernova: each of those functions is a different way to double each element in the vector. e.g., {3, 7, 10} becomes {6, 14, 20}
[20:26:41] <jbalint> Alipha: ok, thanks! but how did the "..." get all the way to the end there? :O
[20:27:32] <Alipha> jbalint: you put ... after the expression you want expanded. so this code wants to expand `&Table<Ts, Ts...>::template visit<V, Value, Args...>`
[20:28:00] <jbalint> ok, i'll read up on that a bit. thanks again
[20:28:32] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[20:28:39] <Alipha> jbalint: where else would you put the ... ? heh
[20:29:03] <jbalint> I'm used to seeing it right next to the template parameter name
[20:29:16] <Alipha> jbalint: https://wandbox.org/permlink/xIKGl3677Zfnx82p
[20:30:07] <jbalint> right, but how do we know the ... at the end doesn't apply to any other parameter such as V or Value ?
[20:30:24] <PJBoy> they're not parameter packs presumably
[20:31:10] <Alipha> and "parameter pack" is the term for `TemplateType...` btw, if that wasn't obvious. (ie, "variable-argument template parameters")
[20:31:58] <Alipha> PJBoy: though ... can expand two or more different parameter packs if they're the same length, right?
[20:33:48] <PJBoy> yeah
[20:34:33] <Alipha> so V and/or Value could also potentially be parameter packs of the same length as Ts
[20:34:48] <Alipha> though i would hope someone would name them better...
[20:34:50] <jbalint> so it will "zip" them?
[20:35:21] <Alipha> jbalint: yes
[20:36:13] <jbalint> ok, that actually made me think about it in a different way. it's making more sense
[20:36:33] <Alipha> jbalint: specifically, https://wandbox.org/permlink/73phYW6CzNbAuRZs
[20:37:16] <jbalint> right, interesting indeed. appreciate you explaining it with examples
[20:40:23] <PJBoy> simultaneous parameter pack expansion example https://wandbox.org/permlink/fPAGapxsYheItyxA
[20:42:41] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[20:44:39] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[20:46:03] <PJBoy> jbalint, and here's a nested expansion double expansion example https://wandbox.org/permlink/F0dQ08ks31Zxiy6j
[20:46:26] <PJBoy> uses a fold expression, but I think it gets the point across
[20:47:51] <PJBoy> you can see how "AB" is the result of the inner expansion, the outer expansion is then used to get those "A" and "B" suffices
[20:48:43] <PJBoy> there needs to be a C++ metaprogramming anime
[20:50:41] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[20:54:23] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[20:54:57] *** Quits: supernova (~quassel@2405:9800:ba11:6207:418b:9c79:9aa8:90d8) (Ping timeout: 240 seconds)
[20:59:10] *** Quits: andreasbuhr (~quassel@p549dbd3f.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:10:16] <LordKalma> PJBoy, well, compilation times in C++ are as long as Oliver took from the centre line to making a shot
[21:11:21] <PJBoy> is that a football reference?
[21:11:30] <LordKalma> Oliver and Benji... the anime?
[21:12:06] <PJBoy> ah the football anime
[21:12:11] <PJBoy> confirmed :D
[21:13:17] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:14:37] *** Quits: john99 (~john99@170.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[21:27:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a196:f21c:f656:4b68)
[21:31:49] <jbalint> PJBoy: very cool
[21:31:56] *** Joins: rajkosto (~rajkosto@93-86-92-233.dynamic.isp.telekom.rs)
[21:32:13] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[21:36:04] *** Joins: magla (~gelignite@55d4d2a6.access.ecotel.net)
[21:37:40] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[21:40:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:21] *** ChanServ sets mode: +v npaperbot
[21:41:26] *** Quits: AmR (~AmREiSa@156.199.202.96) (Quit: Konversation terminated!)
[21:52:16] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 268 seconds)
[21:53:52] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[21:54:57] *** Joins: AmR (~AmREiSa@156.199.202.96)
[21:58:15] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[21:59:02] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:01:24] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[22:01:52] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:02:02] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[22:04:45] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[22:05:36] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:08:44] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:09:47] *** Joins: n3rdy1 (~n3rdy1@c-73-14-53-56.hsd1.co.comcast.net)
[22:10:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:12:40] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:16:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[22:18:54] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:19:13] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[22:28:14] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[22:31:16] <oj> everyone says not to cast away const, but I have a use-case
[22:32:13] <oj> oh wait, no I don't
[22:35:02] <rpav> there are vanishingly few, and usually it's some other part of the language being annoying, and usually it doesn't even help that much
[22:35:09] <oj> or actually I kind of do
[22:35:33] <rpav> like implementing `T& foo(); const T& foo() const;` which are basically the same except for const
[22:35:51] <oj> I have a factory function that takes a reference to an array with a template argument for the length of the array, and passes the array to a constructor where it's copied
[22:36:18] <oj> and it would be a nicer interface if I can pass in r-value arrays
[22:36:21] <Plazma> oj: i like to cast everything to const always
[22:36:32] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[22:36:41] <oj> so I want it to be const in order to take the r-value references
[22:36:51] <oj> now
[22:37:03] <ville> &&?
[22:37:25] <PJBoy> you can take rvalue arrays
[22:37:33] <PJBoy> std::to_array does this
[22:37:47] <oj> the onlyu question is: is the r-value array still alive while the function call where it's defined is running?
[22:38:28] <oj> oh wait, I don't need to cast away const
[22:38:35] <rpav> so, r-value arrays are mighty useful they are, matey, arr
[22:38:36] <oj> I just need to make sure I do a copy
[22:38:38] <oj> doy
[22:38:40] <PJBoy> it's alive until the semicolon of the line constructing that array
[22:38:57] <oj> it's in the function call
[22:39:42] <PJBoy> so it will be alive until the end of the function call
[22:43:49] *** Joins: namo (~nomo@95.87.208.95)
[22:52:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:53:38] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:54:45] *** Quits: Leo_V (~Leo@157.52.18.77) ()
[23:08:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[23:15:17] <rpav> ccache is like the best thing ever bisecting
[23:15:28] <rpav> also a number of other things .. worktrees for feature branches
[23:25:12] *** Quits: urdh (~urdh@user/urdh) (Quit: Boom!)
[23:27:02] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 240 seconds)
[23:28:10] <cbreak> rpav: not rebuilding everything seems risky when bisecting
[23:28:48] <rpav> why would you rebuild things that you've already built
[23:31:59] *** Joins: apchar (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[23:32:29] <cbreak> because outside circumstances might have changed
[23:32:40] <rpav> o.O
[23:32:51] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[23:32:52] <rpav> maybe you have a weird build setup, but you should be aware of that
[23:32:53] <cbreak> it's fine usually on macos or linux, but on windows, making a clean build has fixed weird issues many times
[23:33:25] <rpav> imagine developing on windows ;/
[23:43:17] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:44:57] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 240 seconds)
[23:45:24] *** Joins: urdh (~urdh@user/urdh)
[23:45:46] *** Quits: urdh (~urdh@user/urdh) (Client Quit)
[23:47:05] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[23:49:59] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:52:12] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[23:53:37] *** Joins: urdh (~urdh@user/urdh)
[23:53:39] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[23:55:37] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[23:57:23] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[23:59:56] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 245 seconds)
