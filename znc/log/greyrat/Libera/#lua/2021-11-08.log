[00:02:26] <kakolainen[m]> yes the reference page has all you need but for learning simple examples are better like https://en.wikipedia.org/wiki/Lua_(programming_language)#Inheritance
[00:05:51] *** Quits: glguy (x@libera/staff/glguy) (Quit: Quit)
[00:05:55] <tumn> personally I don't recommend doing that with metatables
[00:06:04] <tumn> and the phrasing on that example is somewhat misleading
[00:06:12] <tumn> > "Lua supports using metatables to give Lua class inheritance.[13] In this example, we allow vectors to have their values multiplied by a constant in a derived class. "
[00:06:21] <tumn> lua supports no such thing
[00:06:24] *** Joins: glguy (x@libera/staff/glguy)
[00:06:44] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:07:00] <tumn> sure the example shows a mimicry of class behavior created using metatables, but it's a stretch to say this is supported by lua, a language that has no classes
[00:07:16] <tumn> metatables weren't designed with this usage in mind
[00:07:37] <tumn> or at least it's safe to assume they weren't
[00:08:33] <tumn> depending on where it's used it has a really big performance impact and the same behavior could be created using code that aligns better with the lua paradigm
[00:08:40] *** Joins: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy)
[00:09:22] <kakolainen[m]> it works fine and performance is good too
[00:09:48] <tumn> performance is good on what lua version?
[00:09:56] <tumn> luajit might optimize some of the problems away
[00:10:03] <tumn> but other versions I don't think so
[00:10:24] <tumn> every metatable lookup is an index, and then calling the metamethod is an extra function call
[00:11:08] <tumn> for each operation
[00:11:29] <tumn> which is even worse when there's chains of "classes"
[00:11:31] <kakolainen[m]> tested with quadtree where every point addition was done via multiple layers of metatables vs some simpler way and no huge difference
[00:12:33] <tumn> I'd be really curious to compare the bytecode generated by both methods of doing it
[00:14:21] <kakolainen[m]> I can try to find one other example which had even more surprising result and metatable was faster than anything else even when it shouldn't have been
[00:15:09] <tumn> and this was with 5.x? or luajit?
[00:18:16] <kakolainen[m]> Lua 5.4 but I don't think there is any difference even with Luajit
[00:18:32] *** Joins: rgrinberg (~textual@190.113.102.153)
[00:20:21] <kakolainen[m]> or maybe my test was testing one level of metatable vs multiple levels and there was no significant difference but against table without a metatable there might be
[00:25:21] <tumn> reusing code in ways that don't involve metatable hacks is still probably safer
[00:25:45] <tumn> which is why examples like that aren't in the lua reference manual
[00:27:38] <tumn> there is some basic prototyping behavior that can even be replicated by just returning a new vanilla table anonymously from a function
[00:30:00] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[00:35:12] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:36:42] *** Quits: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy) (Quit: Leaving)
[00:39:00] *** Joins: kiril (~kiril@85.91.153.163)
[00:42:36] <kakolainen[m]> just define prototype as a runtime modifable class and then everyone will be happy
[00:43:29] <tumn> there is no need 
[00:43:50] <tumn> it wouldn't be able to do anything that tables can't already
[00:44:05] <tumn> (usually without needing metatables)
[00:44:57] <tumn> I don't even think metatables are bad, I just think using them to mimic classes with inheritance is a huge faux pas
[00:46:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:46:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:47:34] <tumn> I think lua benefits a lot from being simple and having an amount of data types that you can count on your fingers
[00:49:01] <tumn> or at least 5.1 does, and everything that derives from 5.1 like luajit 
[00:50:07] <technomancy> using metatables to mimic classes is bad because classes are bad, not because metatables are bad =)
[00:50:08] <technomancy> if you're going to complicate your code with metatables at least you should get something better than classes in exchange!
[00:51:02] <tumn> technomancy said what I was afraid to say
[00:51:19] <technomancy> well, lua 5.1's support for metatables is kinda shit
[00:51:21] <technomancy> like they can't even iterate
[00:51:25] <tumn> that's true
[00:51:30] <tumn> __pairs is nice
[00:51:45] <tumn> but 5.1 is still my version of choice for a million other reasons
[00:51:52] <tumn> or luajit which even backports some features from 5.2
[00:52:04] <tumn> I don't think it has __pairs but who cares
[00:52:13] <technomancy> I like luajit, but it's a shame that luajit is keeping 5.1 alive, because it really needs to die so everyone can assume metatables work everywhere
[00:52:34] <tumn> it's immortal
[00:52:35] <kakolainen[m]>  __pairs don't really work when you have metatable __index which is maybe the biggest flaw with the inheritance
[00:52:40] <Habbie> don't metatables work in 5.1?
[00:52:49] <Habbie> (serious question, poorly phrased)
[00:52:49] <tumn> they do
[00:52:51] <technomancy> Habbie: only a very limited number of methods work
[00:52:55] <tumn> that's a stretch
[00:52:58] <tumn> most metamethods are in 5.1
[00:53:02] <Habbie> technomancy, is this about operator overloading?
[00:53:12] <tumn> there is a couple of metamethods that are implemented in later versions
[00:53:15] <tumn> that 5.1 odesn't support
[00:53:37] <technomancy> Habbie: it's impossible to use metatables to make (for example) a read-only table in 5.1 because as soon as you try to iterate over it, it will appear empty
[00:54:01] <Habbie> ah
[00:54:03] <tumn> that can be more-or-less solved by storing the length of the table in the table
[00:54:15] <technomancy> tumn: not in a useful awy
[00:54:17] <tumn> there's also __len
[00:54:45] <technomancy> tumn: then every function in your entire codebase has to be like "wait is this a real table or a funky wannabe broken table" and act differently in different circumstances
[00:54:49] <technomancy> you can't pass it off to 3rd-party code
[00:54:56] <technomancy> basically it breaks the entire idea of abstraction
[00:54:57] <tumn> solution 1: make everything a funky wannabe broken table
[00:55:03] <tumn> solution 2: don't (ab)use metatables
[00:55:11] <technomancy> so ... never use code that you didn't write yoruself, basically
[00:55:12] <technomancy> pass
[00:55:18] <tumn> sadly
[00:55:29] <technomancy> I mean, sure; you can do that. but I can't.
[00:56:43] <tumn> the only reason so many modules out there overuse metatables is because lua's ecosystem is overrun by javascriptbrains who can't understand a language that doesn't have complicated data types so they can explain their code using a bunch of buzzwords
[00:56:50] <tumn> that's the same reason javascript was invented to begin with
[00:56:56] <tumn> someone saw lua and thought "I can make this worse"
[00:57:03] <technomancy> I agree re: class systems in lua
[00:57:11] <technomancy> but read-only tables are super useful for sandboxing purposes
[00:57:19] <technomancy> and sandboxing is like ... something lua's supposed to be real good at!
[00:58:11] <tumn> the solution in 5.1 is would be to wrap every unsafe type individaully
[00:58:18] <tumn> then tables can just be real tables
[00:58:22] <tumn> which has benefits even in 5.2+
[00:58:35] <technomancy> by "wrap" do you mean copy?
[00:59:13] <technomancy> I mean, that works in some situations and fails in others
[00:59:30] <technomancy> my point is that there's no general-purpose way to abstract data
[00:59:34] <tumn> by wrap I mean in sandboxing terms, but I guess I'm thinking of implementations of lua that have lots of userdata and wonky libraries
[01:01:13] <tumn> the absolute best way to sandbox lua is probably to just not load unwanted libraries
[01:01:19] <tumn> from the C end
[01:02:00] <tumn> lua's capability for sandboxing goes hand-in-hand with its main purpose which is to be embedded
[01:02:19] <tumn> it's pretty easy to make it not do unwanted things when loading it with the C api
[01:03:24] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[01:03:30] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:03:59] <Habbie> luau really wants to spearhead sandboxing
[01:03:59] <tumn> in that case the abstraction can come from adding userdata types, you could even add a custom pairs() that works with whatever weird data types you want to be iteratable, or give them their own custom iterators
[01:04:19] <technomancy> IMO it's a huge red flag if you can't create an abstraction without using a different language
[01:04:32] <tumn> Habbie: luau is a great example because the roblox api is very complex
[01:04:51] <tumn> technomancy: not really, lua and C are one and the same - lua is written as a scripting supplement to C
[01:05:03] <technomancy> well I hate that
[01:05:09] <fcr> in any case requiring the use of  :pairs() / :ipairs() is not that ugly
[01:05:24] <technomancy> fcr: and edit every 3rd-party lib to do the same? no thanks
[01:05:40] <tumn> problems with 3rd party libs aren't problems with the language
[01:05:41] <fcr> (unless obviously you have a pairs attribute)
[01:05:50] <technomancy> tumn: hard disagree
[01:06:44] <technomancy> a language without an ecosystem is borderline useless
[01:09:28] <Habbie> i use lua as a scripting supplement to C++; some people use it as a scripting supplement to other languages
[01:09:42] <Habbie> but it is, to me, mostly, indeed a scripting supplement to -something-
[01:12:28] <Habbie> however, i don't agree Lua and C are one and the same
[01:13:05] <glguy> I'm not arguing that it's the norm, but my most recent Lua project uses Lua as the primary language. The main event loop is a small C program using ncurses and libuv, but all the logic is in Lua.
[01:13:39] <glguy> Lua's C API and the Lua language are pretty independent
[01:14:00] <glguy> and I've done a Lua implementation in Haskell; it's not key that it's in C
[01:19:38] <Habbie> yep
[01:19:52] <Habbie> glguy, did you implement Lua in Haskell? or write Haskell bindings for liblua?
[01:21:10] *** Quits: magla (~gelignite@55d4a5c9.access.ecotel.net) (Quit: Stay safe!)
[01:22:06] *** Joins: km (sid515529@user/km)
[01:35:16] <glguy> the former
[01:39:14] <Habbie> nice
[01:41:05] <tumn> the lua project and C go together by design (C++ too by extension) of course not including implementations of the vm in other languages
[01:41:29] <tumn> that's why the language has concepts in it like userdata and cclosures
[01:42:02] <glguy> userdata is a wrapper around a memory allocation, nothing particularly to do with C
[01:42:20] <tumn> it is to do with C because the lua project is written in C
[01:42:21] <glguy> closures are more about a wrapper around *Lua* upvalues, not C
[01:42:45] <tumn> there are even messages in lua that directly reference C e.g. trying to yield a cclosure throws "attempt to yield across metamethod/C-call boundary"
[01:43:53] <tumn> the main project is an embeddable language for C projects, of course there are other famous implementations but lua at core goes together with C
[01:44:02] <tumn> > closures are more about a wrapper around *Lua* upvalues, not C
[01:44:07] <tumn> there's a distinciton between cclosures and lclosures
[01:45:33] <glguy> "C closures" don't feature in Lua, they're part of the C API
[01:45:58] <tumn> the c api is packaged as one of the main parts of lua
[01:46:12] <glguy> that the reference implementation provides, and there's nothing about them that has to be implemented in C, just need a function pointer with the right calling convention
[01:46:14] <tumn> that's why all of the features that let you edit what your lua implementation can do are provided by the C api
[01:46:37] <tumn> of course - but you agree it's supposed to be embeddable right? regardless of the implementation language?
[01:47:19] <tumn> because technomancy's argument was that it's a bad sign if a language relies on using a different language to operate
[01:47:55] <tumn> but that's a weird argument for a language that's advertised as being an embedded language (with the reference implementation being in ansi C)
[01:48:19] <tumn> the language can't be separated from its API
[01:48:58] *** Quits: GNUHacker (~gnu@fsf/member/GNUHacker) (Quit: Leaving)
[01:50:56] <glguy> I didn't follow technomancy's argument. I think it's a strength of the language that it embeds so cleanly
[01:51:52] <DixieFlatline> metatables confuse me - I find it hard to think of writing a program in pure lua ... metatables in general make me think lua is lisp-like but with tables instead of lists and parens
[01:51:55] <tumn> I think it has the advantage of being designed from the ground up as being made for embedding
[01:52:05] <tumn> rather than some languages which are "oh yeah it's a standalone language but you can embed it I guess"
[01:54:36] *** Quits: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be) (Ping timeout: 244 seconds)
[01:54:36] <DixieFlatline> although that won't stop me from trying though
[02:06:05] <kakolainen[m]> technomanc is right it's a bad sign when you can't do some important thing with your programming language, like C is a shit language because you can't even do bignum with it since it's missing access to the carry flag
[02:09:20] <kakolainen[m]> and there is about zero CPUs whcih don't have the carry flag
[02:14:47] <glguy> C's meant to be embedded in an assembly program if you want access to the system-level stuff like that *nod*
[02:15:00] <glguy> You just write your high-level logic in C, of course
[02:16:42] <technomancy> it's not even that you have to rely on another language that's bad
[02:16:57] <technomancy> like ... needing to use C to call OS routines like sockets and stuff; whatever. understandable compromise
[02:17:17] <technomancy> it's when you can't do basic algorithmic abstractions that it's a bad sign
[02:17:24] <technomancy> thankfully fixed in 5.2+
[02:17:33] <tumn> basic algorithmic abstractions like what?
[02:17:46] <kakolainen[m]> what you can't do with Lua 5.4?
[02:17:49] <technomancy> like "this data structure is read-only"
[02:18:04] <technomancy> kakolainen[m]: I'm only talking about 5.1's pisspoor metamethod support
[02:19:34] <tumn> __index makes read-only tables easy, the only thing 5.1 is lacking is factoring __index into the # size when __index is a table
[02:20:08] <tumn> which, to be fair, isn't exactly expected behavior anyway, it's a convenience feature
[02:20:37] <tumn> __index is just "this will be used as a fallback when the table index is nil"
[02:21:25] <technomancy> tumn: read-only tables which can't be iterated aren't really tables
[02:21:41] <technomancy> if they don't act like tables they're a bad abstraction
[02:22:00] <tumn> you've got it backwards - "read-only tables" in lua aren't actually read-only
[02:22:24] <tumn> the real problem is in pairs() which does some weird internal thing to get the size of an array-like table and doesn't respect __len
[02:22:32] <tumn> (in 5.1)
[02:22:35] <technomancy> this is 100% not a problem in 5.2+
[02:22:49] <technomancy> you can create abstractions that work seamlessly with any code
[02:24:09] <technomancy> it honestly sounds like your argument is "5.1 is good enough for me so it should be good enough for anybody"
[02:24:15] <technomancy> but like... I've tried. it's not.
[02:25:40] *** Joins: lagash (lagash@lagash.freeirc.org)
[02:25:46] <tumn> the way 5.2 fixes it is by monkey-patching in behavior where you wouldn't expect it to be by reading the spec unless you were trying to do something very specific (like mimic a read-only table); a problem that isn't visible at first, but as we go up the lua versions and more and more one-off features are shoehorned into the language and the
[02:25:46] <tumn> standard library, the language turns into an unpredictable mess, like javascript
[02:25:51] <kakolainen[m]> with 5.4 bitoperators and string.pack I could stream anything which would be too slow to process with Lua to GPU with mooncl and process it there so nothing really limiting me except first would have to upgrade from 5.1 mess to 5.4
[02:27:27] <tumn> string.pack is great but it can be also created in luajit with ffi
[02:30:23] <kakolainen[m]> I need mooncl and moongl which need at least Lua 5.3 and someone more experienced said it's too much pain to upgrade from 5.1 so shitposting here it is instead of even trying
[02:32:37] *** Quits: pizdets (~pizdets@183.182.111.35) (Ping timeout: 250 seconds)
[02:33:48] *** Joins: pizdets (~pizdets@183.182.110.244)
[02:40:32] *** Quits: netlynx (~jan@94-226-69-15.access.telenet.be) (Quit: Leaving)
[02:41:54] <technomancy> it's very predictable
[02:55:45] <kakolainen[m]> someone made a snarky comment a while back that "it's why we are all here because we hate Lua" and that might be partly true since at least I would be coding Lua all day if not stuck with 5.1
[02:57:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[03:00:10] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[03:02:05] <tumn> I might be the only person here who loves lua then
[03:04:47] *** Quits: Elw3 (~Elw3@x59cc9925.dyn.telefonica.de) (Quit: Leaving)
[03:18:49] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 244 seconds)
[03:41:33] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[03:42:55] *** Joins: ano (~ano@user/ano)
[03:50:34] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:51:13] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:04:52] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[04:05:06] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Client Quit)
[04:09:08] *** Joins: rgrinberg (~textual@190.113.102.153)
[04:11:08] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[04:18:03] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[04:34:26] *** Quits: fcr (~fran@r186-48-73-166.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[04:36:42] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e59c-51ba-07e6-ca2d.res6.spectrum.com) (Read error: Connection reset by peer)
[04:42:52] *** Joins: fcr (~fran@r186-48-172-201.dialup.adsl.anteldata.net.uy)
[04:44:08] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[05:07:41] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[05:17:25] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[05:37:10] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[05:37:46] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 268 seconds)
[05:39:03] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:41:05] *** Joins: darkstardev13 (~darkstard@50.39.114.152)
[05:43:56] *** Quits: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx) (Ping timeout: 268 seconds)
[05:51:02] *** Parts: pony (sid524992@smol/hors) ()
[06:10:27] *** Quits: GoldenIvy (sid293767@2a03:5180:f:5::4:7b87) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: bbielsa (sid76145@2a03:5180:f:2::1:2971) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: km (sid515529@user/km) (Ping timeout: 268 seconds)
[06:12:06] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:13:31] *** Joins: km (sid515529@user/km)
[06:13:43] *** Joins: GoldenIvy (sid293767@uxbridge.irccloud.com)
[06:14:05] *** Joins: kiril (~kiril@85.91.153.163)
[06:26:01] *** Joins: bbielsa (sid76145@lymington.irccloud.com)
[06:49:41] *** Quits: DixieFlatline (~soryuu@73.112.84.37) (Ping timeout: 256 seconds)
[06:55:22] *** Joins: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be)
[07:14:35] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 268 seconds)
[07:18:17] *** Quits: ratchetfreak (~ratchetfr@d8D8779D9.access.telenet.be) (Quit: Leaving)
[07:25:33] *** Joins: zostj (~rue@1-162-45-243.dynamic-ip.hinet.net)
[07:31:59] *** Quits: GoldenIvy (sid293767@uxbridge.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: chewbranca (sid35447@couchdb/committer/chewbranca) (Ping timeout: 245 seconds)
[07:33:26] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Ping timeout: 245 seconds)
[07:33:27] *** Joins: chewbranca (sid35447@couchdb/committer/chewbranca)
[07:33:46] *** Joins: GoldenIvy (sid293767@2a03:5180:f:5::4:7b87)
[07:34:06] *** Quits: km (sid515529@user/km) (Ping timeout: 260 seconds)
[07:34:25] *** Joins: km (sid515529@user/km)
[07:35:05] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[08:20:45] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:23:13] *** Joins: reset (~reset@user/reset)
[09:05:09] *** Joins: password (~password@user/password2)
[09:07:13] *** Joins: uzi_ (~uzi@161.9.200.42)
[09:12:23] *** Quits: uzi_ (~uzi@161.9.200.42) (Read error: Connection reset by peer)
[09:12:23] *** Joins: uzi_ (~uzi@161.9.200.42)
[09:17:23] *** Quits: uzi_ (~uzi@161.9.200.42) (Ping timeout: 244 seconds)
[09:29:46] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 260 seconds)
[09:32:56] *** Joins: uzi_ (~uzi@161.9.200.42)
[09:34:59] *** Quits: MattJ (~MattJ@95.217.50.17) (*.net *.split)
[09:34:59] *** Quits: spanwysm[m] (~spanwysm@2001:470:69fc:105::e0a) (*.net *.split)
[09:34:59] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[09:34:59] *** Quits: theh (~theh@user/theh) (*.net *.split)
[09:34:59] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[09:34:59] *** Quits: sparked-- (~sparked--@ack.zs-zero.net) (*.net *.split)
[09:35:18] *** Joins: vancz (~vancz@user/vancz)
[09:35:51] *** Joins: theh (~theh@user/theh)
[09:36:12] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[09:38:10] *** Joins: spanwysm[m] (~spanwysm@2001:470:69fc:105::e0a)
[09:42:53] *** Quits: lnxw37d4[m] (~lnxw37d4m@2001:470:69fc:105::15fc) (*.net *.split)
[09:42:53] *** Quits: a12l (~a12l@2001:470:69fc:105::c08c) (*.net *.split)
[09:42:53] *** Quits: Oddmonger (~Oddmonger@user/oddmonger) (*.net *.split)
[09:42:53] *** Quits: bone (~bone@user/mbo) (*.net *.split)
[09:42:54] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[09:42:54] *** Quits: losinggeneration (~quassel@64.225.54.254) (*.net *.split)
[09:42:54] *** Quits: barpthewire (~barpthewi@aftr-62-216-206-66.dynamic.mnet-online.de) (*.net *.split)
[09:42:54] *** Quits: Sleepy_Coder (~zzZZzzZZz@Sade.random.sh) (*.net *.split)
[09:42:54] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:42:54] *** Quits: fullstop (~fullstop@user/fullstop) (*.net *.split)
[09:43:04] *** Joins: Sleepy_Coder (~zzZZzzZZz@Sade.random.sh)
[09:43:06] *** Joins: edr (~edr@enlo.co)
[09:43:07] *** Joins: harley_l (~quassel@64.225.54.254)
[09:43:12] *** Joins: bone (~bone@user/mbo)
[09:43:16] *** Joins: barpthewire (~barpthewi@aftr-62-216-206-66.dynamic.mnet-online.de)
[09:43:17] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:43:17] *** Joins: edr (~edr@user/edr)
[09:43:25] *** Joins: fullstop (~fullstop@user/fullstop)
[09:43:30] *** Joins: Oddmonger (~Oddmonger@mx1.gammaray.finiderire.com)
[09:43:34] *** Quits: Oddmonger (~Oddmonger@mx1.gammaray.finiderire.com) (Signing in (Oddmonger))
[09:43:34] *** Joins: Oddmonger (~Oddmonger@user/oddmonger)
[09:44:04] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[09:44:33] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[09:46:53] *** Joins: tertu (~tertu@user/tertu)
[09:47:34] *** Quits: tertu2 (~tertu@user/tertu) (Ping timeout: 260 seconds)
[09:50:37] *** Joins: a12l (~a12l@2001:470:69fc:105::c08c)
[09:50:54] *** Joins: lnxw37d4[m] (~lnxw37d4m@2001:470:69fc:105::15fc)
[09:51:36] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[09:54:19] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 268 seconds)
[10:00:51] *** Joins: dvx (~dvx@185.63.97.64)
[10:07:47] *** Joins: bgiannan (giann@2a01:4f8:141:1272::2)
[10:13:41] *** Quits: unclutter (~gentoo@60.81-166-246.customer.lyse.net) (Ping timeout: 256 seconds)
[10:23:54] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:24:48] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:26:11] *** Joins: sparked-- (~sparked--@ack.zs-zero.net)
[10:29:43] *** Quits: pizdets (~pizdets@183.182.110.244) (Ping timeout: 244 seconds)
[10:30:45] *** Joins: pizdets (~pizdets@183.182.111.232)
[10:35:20] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[10:39:41] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:40:29] *** Joins: unclutter (~gentoo@60.81-166-246.customer.lyse.net)
[11:40:30] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 244 seconds)
[11:54:27] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[12:04:13] *** Joins: ratchetfreak (~ratchetfr@d8d8779d9.access.telenet.be)
[12:35:17] *** Joins: arinov (~arinov@213.194.126.155)
[12:49:15] *** Quits: kurfen (~kurfen@45.152.181.20) (Read error: Connection reset by peer)
[12:50:33] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:51:32] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[12:53:50] *** Joins: kurfen (~kurfen@45.152.181.20)
[13:22:45] *** Joins: MattJ (~MattJ@95.217.50.17)
[13:53:34] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 268 seconds)
[13:57:14] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:05:16] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:14:59] *** Joins: Elw3 (~Elw3@dynamic-002-247-242-204.2.247.pool.telefonica.de)
[14:16:43] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:20:06] *** nheir_ is now known as nheir
[14:23:49] *** nheir is now known as nheird
[14:30:21] *** Quits: Elw3 (~Elw3@dynamic-002-247-242-204.2.247.pool.telefonica.de) (Quit: Leaving)
[14:32:01] *** Quits: password (~password@user/password2) (Quit: Connection closed)
[14:32:41] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:48] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:34:09] *** Joins: password (~password@user/password2)
[14:35:27] *** Quits: password (~password@user/password2) (Client Quit)
[14:43:30] *** Joins: password (~password@user/password2)
[14:47:57] *** Joins: cursey (~cursey@user/cursey)
[14:51:21] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:12:41] *** Joins: netlynx (~jan@94-226-69-15.access.telenet.be)
[15:31:56] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[15:43:04] *** Quits: Bombo (atom@user/bombo) (Ping timeout: 265 seconds)
[15:44:27] *** Joins: Bombo (atom@p4ff004db.dip0.t-ipconnect.de)
[15:44:27] *** Quits: Bombo (atom@p4ff004db.dip0.t-ipconnect.de) (Changing host)
[15:44:27] *** Joins: Bombo (atom@user/bombo)
[15:58:25] *** Joins: Elw3 (~Elw3@dynamic-002-247-242-253.2.247.pool.telefonica.de)
[16:20:01] *** Quits: Elw3 (~Elw3@dynamic-002-247-242-253.2.247.pool.telefonica.de) (Ping timeout: 244 seconds)
[16:28:05] *** Joins: Elw3 (~Elw3@dynamic-002-247-241-051.2.247.pool.telefonica.de)
[16:39:39] *** Quits: fcr (~fran@r186-48-172-201.dialup.adsl.anteldata.net.uy) (Ping timeout: 244 seconds)
[16:46:00] *** Joins: fcr (~fran@r186-48-174-176.dialup.adsl.anteldata.net.uy)
[16:46:36] *** Joins: mohab (~mohab@45.245.205.120)
[16:47:44] *** Quits: mohab (~mohab@45.245.205.120) (Client Quit)
[17:02:17] *** Joins: dvx_ (~dvx@5.181.92.64)
[17:04:02] *** Quits: dvx (~dvx@185.63.97.64) (Ping timeout: 240 seconds)
[17:05:32] *** Quits: w0ng (~w0ng@103.1.212.157) (Ping timeout: 260 seconds)
[17:23:28] *** Quits: password (~password@user/password2) (Remote host closed the connection)
[17:36:20] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[18:03:06] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:03:42] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e59c-51ba-07e6-ca2d.res6.spectrum.com)
[18:11:03] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:30:02] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[18:36:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d18c:8b69:3306:9a69)
[18:36:47] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d18c:8b69:3306:9a69) (Changing host)
[18:36:47] *** Joins: skapata (~Skapata@user/skapata)
[18:38:47] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[19:00:16] *** Joins: GNUHacker (~gnu@fsf/member/GNUHacker)
[19:03:23] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:10:39] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Quit: WeeChat 3.3)
[19:12:19] *** Joins: magla (~gelignite@55d431b8.access.ecotel.net)
[19:49:57] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:56:31] *** Quits: dvx_ (~dvx@5.181.92.64) (Remote host closed the connection)
[20:07:03] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[20:23:57] *** Quits: Elw3 (~Elw3@dynamic-002-247-241-051.2.247.pool.telefonica.de) (Ping timeout: 250 seconds)
[21:03:37] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:06:20] *** Quits: zostj (~rue@1-162-45-243.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[21:11:12] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[21:13:27] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[21:51:11] *** Quits: jprjr (~jprjr@2605:6400:10:158:150f:47b6:ec11:edfa) (Quit: ZNC 1.7.5 - https://znc.in)
[21:51:22] *** Joins: jprjr (~jprjr@2605:6400:10:158:150f:47b6:ec11:edfa)
[21:59:29] *** Joins: Elw3 (~Elw3@x59cc9b07.dyn.telefonica.de)
[22:12:45] *** Joins: rgrinberg (~textual@200.5.63.76)
[22:15:08] *** Joins: Guest40 (~Guest40@ip-86-49-248-30.net.upcbroadband.cz)
[22:25:54] *** Quits: Guest40 (~Guest40@ip-86-49-248-30.net.upcbroadband.cz) (Quit: Client closed)
[22:26:22] *** Joins: Capricorno82372 (~Capricorn@ip-86-49-248-30.net.upcbroadband.cz)
[22:53:39] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[22:56:09] *** Quits: Capricorno82372 (~Capricorn@ip-86-49-248-30.net.upcbroadband.cz) (Quit: Client closed)
[23:14:55] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:20:53] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:7d4d:58ea:ff3d:71a8) (Quit: Textual IRC Client: www.textualapp.com)
[23:30:02] *** Joins: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr)
[23:40:57] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:46:06] *** Quits: GNUHacker (~gnu@fsf/member/GNUHacker) (Quit: Leaving)
[23:47:55] *** Joins: GNUHacker (~gnu@fsf/member/GNUHacker)
[23:49:01] *** svm_invictvs_ is now known as svm_invictvs
