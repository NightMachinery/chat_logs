[00:02:04] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 250 seconds)
[00:03:18] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:04:15] *** Joins: flynn (~mcbloch@user/flynn)
[00:17:07] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Ping timeout: 252 seconds)
[00:17:52] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[00:24:20] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[00:26:23] *** Joins: silasfox (~sbv@xdsl-84-44-182-29.nc.de)
[00:28:07] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 252 seconds)
[00:30:06] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[01:02:52] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 256 seconds)
[01:16:31] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Ping timeout: 252 seconds)
[01:30:38] *** Joins: desantra (~skykanin@user/skykanin)
[01:41:04] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[01:54:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:55:20] *** Joins: flynn (~mcbloch@user/flynn)
[02:05:20] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Quit: WeeChat 3.2)
[02:05:29] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[02:14:24] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:16:15] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.2)
[02:26:50] *** Joins: cyberbanjo (~malik@2607:fb90:4287:39ea:6c14:1818:e14:20a7)
[02:51:06] *** Quits: uncleyear (~ian@pppoe.178-66-156-158.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[03:17:46] *** Joins: X-Scale` (~ARM@128.229.28.37.rev.vodafone.pt)
[03:18:34] *** Quits: X-Scale (~ARM@238.72.108.93.rev.vodafone.pt) (Ping timeout: 240 seconds)
[03:18:42] *** X-Scale` is now known as X-Scale
[04:08:34] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:09:32] *** Joins: flynn (~mcbloch@user/flynn)
[04:13:24] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (Ping timeout: 250 seconds)
[04:14:18] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[04:17:24] *** Joins: nivag (~gavin@103-76-144-176.ip.cis.gen.nz)
[04:25:32] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[04:25:49] *** Joins: silasfox (~sbv@xdsl-84-44-182-29.nc.de)
[04:29:19] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:30:16] *** Joins: flynn (~mcbloch@user/flynn)
[04:36:40] *** Quits: xsperry (~as@user/xsperry) (Ping timeout: 240 seconds)
[04:40:42] *** Quits: chujev (~chujev@88.103.226.7) (Ping timeout: 250 seconds)
[04:42:31] *** Joins: chujev (~chujev@88.103.235.238)
[04:54:55] *** Joins: chujev_ (~chujev@88.103.226.7)
[04:58:14] *** Quits: chujev (~chujev@88.103.235.238) (Ping timeout: 252 seconds)
[05:00:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[05:01:25] *** Joins: flynn (~mcbloch@user/flynn)
[05:35:41] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2c9d:2885:3ab4:eb30) (Quit: WeeChat 3.2)
[05:35:57] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1caf:1d6c:286e:abe2)
[05:53:20] *** Joins: cyberbanjo_ (~malik@d192-24-236-120.try.wideopenwest.com)
[05:54:10] *** Quits: cyberbanjo (~malik@2607:fb90:4287:39ea:6c14:1818:e14:20a7) (Ping timeout: 240 seconds)
[05:54:10] *** Quits: atw (~user@154.27.197.101) (Ping timeout: 240 seconds)
[06:29:10] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (Ping timeout: 240 seconds)
[06:29:34] *** Joins: nivag (~gavin@103-76-144-176.ip.cis.gen.nz)
[06:51:48] *** Joins: libertyprime (~libertypr@118.149.84.195)
[07:01:36] *** Joins: cyberbanjo (~malik@2607:fb90:4222:17a9:5f8a:c04b:188e:b6cb)
[07:04:44] *** Quits: cyberbanjo_ (~malik@d192-24-236-120.try.wideopenwest.com) (Ping timeout: 252 seconds)
[07:13:34] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[07:14:20] <AlaskanEmily> If I have a macro that generates a proxy, how would I have the macro generate code that uses 'this?
[07:18:08] *** Joins: sailorCa` (~user@p200300f6a70fadabe1ed31f3a7058ceb.dip0.t-ipconnect.de)
[07:32:14] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 252 seconds)
[07:35:42] *** Joins: jespada (~jespada@90.254.245.194)
[07:42:20] <dfreeman> Inside a method of your proxy defined in your macro, you can do ~'this 
[07:43:05] *** Parts: TimMc (~timmc@user/timmc) ()
[07:44:32] <dfreeman> https://gist.github.com/dannyfreeman/31569db0889eb895670062846e9cb316
[07:48:13] <dfreeman> If you just use this then it will try to resolve that symbol in the current namespace. So the macro will expand that symbol to something like user/this, which probably doesn't exist
[07:49:33] <dfreeman> ~'this will first have a plain, un-namespaced symbol called this and then unquote it. Results in a symbol with no namespace.
[07:50:14] <dfreeman> You can also do ~(symbol "this") in the macro too, maybe it is more clear what is happening
[07:54:45] <jeaye> AlaskanEmily ^
[07:56:47] *** Quits: RedNifre (~michael@dslb-002-203-247-205.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[07:58:48] *** Joins: RedNifre (~michael@dslb-002-201-038-001.002.201.pools.vodafone-ip.de)
[07:59:18] <AlaskanEmily> Thanks dfreeman
[07:59:32] <AlaskanEmily> Just dropping that into what I'm trying to do, I get: Attempting to call unbound fn: #'clojure.core/unquote
[08:01:59] <dfreeman> Make sure the form in your macro is quoted using ` and not '
[08:02:40] <dfreeman> the unquote symbol ~ only works inside of a syntax quote `
[08:04:04] <AlaskanEmily> Oh, OK let me check that
[08:04:42] <AlaskanEmily> I was just using (list ...) to construct things
[08:06:47] *** Joins: harrigan- (~harrigan@176.116.124.141)
[08:06:49] *** Quits: harrigan (~harrigan@176.116.124.141) (Ping timeout: 252 seconds)
[08:07:00] *** harrigan- is now known as harrigan
[08:09:00] <AlaskanEmily> This was the specific case: https://osdn.net/users/alaskanemily/pastebin/7252
[08:09:09] <AlaskanEmily> (Somewhat reduced)
[08:10:11] <dfreeman> Oh yeah. You won't be able to use list and get an un-namespaced symbol in a macro. The syntax quote is necessary for that
[08:10:47] <dfreeman> I think. If there is a way I don't know how you'd do it.
[08:22:41] <jeaye> Syntax quoting is generally the cleaner way of constructing code in macros.
[08:24:37] <AlaskanEmily> Yeah. It just might be kind of annoying either way since it's mixed between quoted and unqouted stuff
[08:26:23] <technomancy> clojure really wants you to not write macros which introduce non-gensym'd bindings, but proxy kinda forces you into it =(
[08:27:05] <technomancy> only one of several reasons to prefer reify where possible (but it's not always possible); I think by the point reify was added it was obvious in retrospect that the behavior of `this' in proxy was a problem.
[08:27:20] <technomancy> every language has its skeletons in the closet
[08:28:09] <dfreeman> This problem kind of creeps up in other contexts too. I have to use that ~' trick when working with macros that generate datomic/datscript queries. They cannot be namespaced
[08:28:34] <technomancy> wait wtf really?
[08:28:49] <technomancy> datomic has no excuse; they should have known better by that point
[08:29:06] <dfreeman> Yeah. If you have an lvar like ?my-entity you have to set that up in a macro like ~'?my-entity
[08:29:14] <technomancy> proxy gets a pass because it was written back when rocks were soft
[08:29:18] <dfreeman> lol
[08:31:42] <dfreeman> I'm not sure if there is a way around it in datomic. what is it supposed to do with user.queries/?my-entity ? Maybe it should strip the namespace out. Seems like a case where a reader macro would have been useful
[08:31:57] <technomancy> https://p.hagelb.org/haha-yes.jpg <- Schemers' perception of Clojure users writing anaphoric macros
[08:35:28] <dfreeman> ^ datomic dev's perception of me writing macros to generate queries
[08:35:48] <technomancy> hehe
[08:49:42] <AlaskanEmily> I'm explicitly trying not to use reify or gensym or anything else that would need compilation.
[08:50:08] <AlaskanEmily> Is there a better way to pass a field name that I want to get and set to a function, rather than using a macro?
[08:52:29] <technomancy> can you unpack that a little? you can't have any Clojure code without compilation. do you mean AOT compilation? neither reify nor gensym need AOT.
[08:53:28] <AlaskanEmily> Do they not? I thought that you specifically couldn't use reify to extend a Java class without compilation?
[08:53:55] <technomancy> the only feature I know which requires AOT is gen-class; is that what you're thinking of?
[08:53:57] <AlaskanEmily> Well, AOT compilation rather than JIT
[08:54:25] <AlaskanEmily> Hmm...I forget what, but there was something that I could do with proxy but not reify that required me to use it in the past for this, and I forget what it even was.
[08:55:07] <technomancy> yeah, reify is not a 100% replacement for proxy; I forget the details of the specific limitations but it's not related to AOT
[08:55:07] <AlaskanEmily> And I explicitly remember that genclass let you do certain things you couldn't do otherwise? But maybe I'm just confused, I haven't looked at that in a long time.
[08:55:29] <dfreeman> gensym is pretty simple at least. All it does is create a new symbol that won't clash. There shouldn't be anything to worry about there
[08:55:34] <AlaskanEmily> OK. It might have been related to extending classes and implementing Java interfaces at the same time or something.
[08:55:39] <technomancy> gen-class can also be used to solve some of the same problems as proxy/reify but in a more cumbersome way
[08:56:03] <AlaskanEmily> In this case, I'm really just using Clojure to talk to a Mercury codebase that is compiled to Java, in order to make a UI for it using the AWT.
[08:56:43] <AlaskanEmily> So for this, Java interop is sadly more important than things working nicely in a Clojure way :(
[08:59:38] <AlaskanEmily> I also can't do things like control the field names or a lot of the inheritance or interfaces, since those are defined by the compiled Mercury code.
[08:59:38] <technomancy> yeah proxy is probably best then. you just need to jump thru some hoops to make your macro emit references to `this'; it's not the end of the world. just awkward
[08:59:38] <technomancy> and yeah backtick is a better place to start
[08:59:45] <AlaskanEmily> Yeah.
[09:00:26] <AlaskanEmily> And probably try to put as much of it into defn rather than defmacro
[09:00:38] <technomancy> definitely
[09:00:46] <AlaskanEmily> I figured that part out already :)
[09:01:36] <technomancy> speaking of macros I just wrote a guide to macros and am looking for feedback. it's for Fennel instead of Clojure but most of the concepts carry over https://fennel-lang.org/macros
[09:01:58] <technomancy> if anyone has a chance to read it and share thoughts I'd appreciate that
[09:02:32] *** Joins: to-hu (~Thunderbi@p200300e9af022e0041bd0bee2bd57b1a.dip0.t-ipconnect.de)
[09:06:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1caf:1d6c:286e:abe2) (Ping timeout: 240 seconds)
[09:06:48] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (*.net *.split)
[09:06:48] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[09:07:01] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[09:07:19] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ffb9:2324:6d72:6629)
[09:08:02] *** Joins: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt)
[09:10:57] <dfreeman> technomancy does clojure have anything like assert-compile? That is nice
[09:11:15] *** Quits: jemoka_ (~jemoka@user/jemoka) (*.net *.split)
[09:11:15] *** Quits: fredmanglis (fredmangli@2a01:7e01::f03c:91ff:fe6b:16ca) (*.net *.split)
[09:11:15] *** Quits: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[09:11:15] *** Quits: broquaint (~dbrook@static.140.30.69.159.clients.your-server.de) (*.net *.split)
[09:11:15] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[09:11:15] *** Quits: victor (sid208353@user/victor) (*.net *.split)
[09:11:22] *** Joins: broquaint (~dbrook@static.140.30.69.159.clients.your-server.de)
[09:11:23] *** Joins: tomku (~tomku@user/tomku)
[09:11:25] <technomancy> dfreeman: Fennel's error messages are designed by taking a close look at what Clojure does and doing the opposite =D
[09:11:30] *** Joins: fredmanglis (~fredmangl@li1420-95.members.linode.com)
[09:11:42] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[09:11:50] *** Joins: victor (sid208353@user/victor)
[09:11:54] *** Joins: jemoka (~jemoka@user/jemoka)
[09:15:11] <dfreeman> I'm jealous. I'll have to play around with fennel sometime just to see that in action.
[09:16:44] <technomancy> drop by #fennel some time
[09:19:56] <technomancy> (actually they were designed more by looking at Elm and Rust)
[09:27:14] *** Quits: ridcully_ (~ridcully@p508ac428.dip0.t-ipconnect.de) (*.net *.split)
[09:27:14] *** Quits: andinus (andinus@tilde.institute) (*.net *.split)
[09:27:14] *** Quits: runejuhl (~runejuhl@user/runejuhl) (*.net *.split)
[09:27:14] *** Quits: hjst (~hjst@fedora/hjst) (*.net *.split)
[09:27:14] *** Quits: jinks (~jinks@104.161.79.77) (*.net *.split)
[09:27:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:27:14] *** Quits: maskd (~eu@user/maskd) (*.net *.split)
[09:27:14] *** Quits: justache (~justache@user/justache) (*.net *.split)
[09:27:14] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[09:27:14] *** Quits: harrow (~harrow@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:27:14] *** Quits: lockdown (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com) (*.net *.split)
[09:27:15] *** Quits: spirit (~spirit@233.ip-144-217-92.net) (*.net *.split)
[09:27:15] *** Quits: technomancy (~user@170.ip-158-69-211.net) (*.net *.split)
[09:27:15] *** Quits: madscientist_ (tpalohei@kapsi.fi) (*.net *.split)
[09:27:34] *** Joins: hjst (~hjst@fedora/hjst)
[09:27:35] *** Joins: ridcully_ (~ridcully@p508ac428.dip0.t-ipconnect.de)
[09:27:36] *** Joins: jinks (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac)
[09:27:38] *** Joins: madscientist` (tpalohei@kapsi.fi)
[09:27:47] *** Joins: runejuhl (~runejuhl@185.166.122.161)
[09:27:47] *** Joins: andinus (andinus@tilde.institute)
[09:28:22] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[09:28:38] *** Joins: technomancy (~user@170.ip-158-69-211.net)
[09:28:45] *** Joins: hexology (~hexology@user/hexology)
[09:29:09] *** Joins: justache (~justache@user/justache)
[09:29:21] *** Joins: maskd (~eu@user/maskd)
[09:29:24] *** Joins: spirit (~spirit@233.ip-144-217-92.net)
[09:29:49] *** Joins: struchu (~struchu@staticline-31-183-183-23.toya.net.pl)
[09:31:15] *** Joins: harrow (~harrow@static.38.6.217.95.clients.your-server.de)
[09:32:31] *** Joins: lockdown (~lockdown@ec2-3-236-147-4.compute-1.amazonaws.com)
[09:34:13] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Quit: Leaving)
[09:36:42] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ffb9:2324:6d72:6629) (Ping timeout: 245 seconds)
[09:38:10] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[09:39:07] *** Joins: flynn (~mcbloch@user/flynn)
[10:05:07] *** Quits: libertyprime (~libertypr@118.149.84.195) (Quit: leaving)
[10:05:19] *** Quits: to-hu (~Thunderbi@p200300e9af022e0041bd0bee2bd57b1a.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:27:30] *** Joins: uncleyear (~ian@pppoe.178-66-156-158.dynamic.avangarddsl.ru)
[10:36:24] *** Joins: Guest48 (~Guest48@109-236-83-68.hosted-by-worldstream.net)
[10:39:03] *** Parts: Guest48 (~Guest48@109-236-83-68.hosted-by-worldstream.net) ()
[10:48:18] *** Joins: l3dx (uid2250@id-2250.highgate.irccloud.com)
[10:58:24] *** Joins: arca0 (~tesuji@193.32.127.239)
[12:08:13] *** Joins: wonko (~wjc@62.115.229.50)
[12:16:39] *** Joins: vats (~vats@180.149.226.8)
[12:27:08] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:40:20] *** Quits: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt) (Read error: Connection reset by peer)
[13:20:46] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:42:05] <raek> technomancy: that sounds interesting... I need to check out error handling in fennel.
[13:42:56] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 252 seconds)
[13:43:27] <raek> (and the fennel language in general)
[13:47:07] <andreyorst> it's cool
[13:57:25] <EdwardIII> it's smol
[14:16:29] <raek> what's its startup time like?
[14:21:15] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:22:11] *** Joins: flynn (~mcbloch@user/flynn)
[14:23:40] *** Joins: xsperry (~as@user/xsperry)
[14:23:49] <ridcully_> it's lua... it's instant
[14:24:37] *** Joins: amk (~amk@109.255.169.126)
[14:25:47] <EdwardIII> just did a hello world and it was 0m0.062s
[14:53:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:54:21] *** Joins: flynn (~mcbloch@user/flynn)
[15:04:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:05:20] *** Joins: flynn (~mcbloch@user/flynn)
[15:12:41] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:13:39] *** Joins: flynn (~mcbloch@user/flynn)
[15:19:45] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:20:41] *** Joins: flynn (~mcbloch@user/flynn)
[15:45:10] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 260 seconds)
[15:48:12] *** Joins: flynn (~mcbloch@user/flynn)
[15:53:20] *** Joins: vats (~vats@180.149.226.8)
[16:20:48] <wink> ridcully_: what if you use luajit :P
[16:20:59] <wink> still instant, but slower instant? ;)
[16:22:47] <ridcully_> might also not be instant, if you run it on your toaster
[16:23:47] * wink goes to overclock the toaster
[16:24:00] <wink> just smile and ignore my failed jab at jits
[16:27:01] <ridcully_> no i gotcha... instant is quite relative.  i dont even care for the 0.6s til repl with clojure
[16:32:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:c3ab:c75d:f803:b354)
[16:35:51] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:37:07] *** Joins: vats (~vats@180.149.226.8)
[16:45:25] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:48:25] *** Joins: vats (~vats@180.149.226.8)
[17:08:48] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[17:14:05] *** Joins: yoonkn (~user@175.197.208.79)
[17:24:28] *** Joins: Bayes8 (~Bayes@ics177-97.icsincorporated.com)
[17:25:11] *** Quits: Bayes8 (~Bayes@ics177-97.icsincorporated.com) (Changing host)
[17:25:11] *** Joins: Bayes8 (~Bayes@user/bayes)
[17:30:34] *** Quits: Bayes8 (~Bayes@user/bayes) (Quit: Connection closed)
[17:31:31] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:40:51] <Para> I wonder if Lua will ever find main stream usage. It's quite popular as game engine scripting language, but that's very niche in the bigger picture.
[17:41:34] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[17:42:51] <Para> Also Clojure's exceptions and compilation errors are just...what :)
[17:43:00] *** Quits: struchu (~struchu@staticline-31-183-183-23.toya.net.pl) (Ping timeout: 260 seconds)
[17:44:24] <andreyorst> Para: lua is currently on hype in neovim community
[17:44:56] <andreyorst> a lot of new plugins written in Lua, and you can write your nvimrc in Lua as well
[17:45:29] <andreyorst> and since Fennel compiles to Lua, there finally a possibility to configure nvim in a lisp-like facion
[17:45:55] <andreyorst> still niche, though
[17:47:24] <andreyorst> I've been porting various Clojure features to Fennel, and I gonna say, Lua runtime is while minimal is really flexible
[17:48:04] <Para> That's my understanding as well, part of the reason why it's in a lot of game engines, that is.
[17:48:14] <Para> It's small and fast enough to be put on mobile game engines as well.
[17:48:28] <andreyorst> and databases
[17:48:52] <ridcully_> it's also easy to integrate - lots of things allow for scripting outside the game world
[17:49:04] <ridcully_> e.g. openresty/nginx, awesome-wm, ...
[17:49:14] <EdwardIII> i feel a bit like openresty has piquied some interest (it did for me)
[17:49:23] <EdwardIII> oops, slightly too slow
[17:49:30] <Para> Great minds etc.
[17:49:48] <Para> But yeah, now all we need is some kind of catalyst and Lua will gain dominance.
[17:49:58] <Para> Put Lua on Mars!
[17:50:11] <Para> They've already sent nodejs there, literally can only go up now.
[17:50:26] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (Ping timeout: 252 seconds)
[17:50:40] <ridcully_> it really is a good place to start if are following the "microservice" trend.  it's very micro.  especially if you have very trivial problems you want to turn into a rest-api
[17:50:40] <EdwardIII> really?
[17:50:57] <EdwardIII> yeah i'm on the lookout for an openresty use-case
[17:52:45] <andreyorst> I doubt Lua will gain dominance, because while it's good that Lua is small, it's also its curse
[17:53:02] <Para> Something to run on small computers like raspberries and such, perhaps.
[17:53:15] <Para> So home automation and other such low-Watt environments.
[17:53:26] <andreyorst> raspberry is not small by any means
[17:53:37] <EdwardIII> and python seems to dominate there
[17:53:50] <Para> andreyorst: Well, definitely not anymore :)
[17:56:09] <andreyorst> not every language meant to be good for every task, so I guess while Lua is not as widespread as it could be, it's defenitively good where it can be used
[17:56:42] <EdwardIII> didn't SCUMM use some lisp dialect for it's scripting?
[17:57:45] <EdwardIII> oh, just looked it up and i think they *were* going to do something lisp based but then changed their mind. i think someone actually did though. maybe naughtydog or someone 
[17:58:06] <EdwardIII> yes, that was it: https://en.wikipedia.org/wiki/Game_Oriented_Assembly_Lisp
[17:58:30] <Para> Man, eighties.
[17:59:18] <wink> Para: it's used in more niches than just gamedev, but .. niches
[17:59:43] <Para> Game engine is named SCUMM, SPIT manages front rendering, FLEM for defining rooms, MMUCAS is FLEM compiler, BYLE and CYST are animation and scaling tools...
[17:59:50] <Para> This wikipedia article is fun to read :)
[17:59:52] <EdwardIII> what's this about nodejs on mars? i couldn't find anything
[18:00:05] <EdwardIII> you can tell they had fun at lucasarts
[18:00:17] <Para> EdwardIII: I tried to look that as well, I wonder where I've read that now because I can't seem to relocate my source.
[18:00:41] <EdwardIII> Para: maybe there is hope :)
[18:01:08] <wink> at $job-- we used openresty/luajit for a web api thing that needed to respond in single-digit milliseconds
[18:01:10] <EdwardIII> if they think "that went well" and then use nodejs for all the air purifiers, our children will all definitely die of asphyxiation
[18:01:11] <Para> Well, I know for a fact that Finnish university students did send nodejs up to Earth orbit at least in a cubesat :)
[18:01:20] <EdwardIII> wink: how'd they/you like it?
[18:01:24] <EdwardIII> any big drawbacks?
[18:01:31] <Para> Hmm, which reminds me that said cubesat probably has since fallen from orbit...
[18:01:45] <wink> it was perfect unless for what we used it. with redis for caching. no DB access
[18:01:49] <wink> s/unless/
[18:02:20] <wink> the only annoying thing was having to build openresty ourselves and then at some point they changed some stuff with packaging and luarocks troubles
[18:02:27] <Para> Hmm, that could be an expandable use case in general. Sort of modern replacement for memcached/varnish.
[18:02:37] <EdwardIII> not heard of cubesat before. 50k for a lil satellite. that's very cool!
[18:02:50] <wink> it's been a few years. in my spare time I used lapis, it also worked great
[18:03:13] <EdwardIII> wink: you mean packaging your app for release? or needing 3rd party libs that your prod distro only had older versions of? 
[18:04:16] <wink> EdwardIII: ok, the details are a bit hazy. but you had to build lua, build openresty, pack them together and then it was still finicky to actually use luarocks. and then openresty stopped supporting luarocks and you had to hack a little more. no clue about 2020++ status.
[18:04:23] <EdwardIII> also, any drawbacks around testing? harder to write automated tests? i saw some of the openresty libs used `prove` somehow, which is cool 
[18:04:36] <wink> EdwardIII: i.e. it was a little effort to package openresty as .deb for our servers, but not overly so
[18:04:44] <EdwardIII> ah ha
[18:05:21] <wink> well we solved the 'tests' problem as you often do in web stuff. very light wrapper/controller as a frontend and test your backend decoupled from anything HTTP
[18:05:35] <wink> so in openresty there was jsut some "include x.lua" and not more
[18:06:21] <EdwardIII> :D no! everything is perfectly isolated and can be tested independently here! no database must be spun up for the tests! no no no, nothing to see here!
[18:06:22] <wink> there was some testing lib that worked fine except it threw weird stacktraces.
[18:06:44] <EdwardIII> don't look at the man behind the Dockerfile
[18:06:45] <wink> i didn't say we had 100% coverage. but redis was mocked and it worked fine
[18:06:57] <wink> it was actually pretty basic, to be fair
[18:07:00] <EdwardIII> do you still deploy as .deb?
[18:07:21] <EdwardIII> (just in general)
[18:07:25] <wink> well the company doesn't exist anymore ;) we did deployment with .deb via puppet and apt-get install. no zero-downtime etc.
[18:07:37] <wink> not perfect but in that case it was ok
[18:07:45] <wink> would not recommend per se
[18:08:24] <EdwardIII> if no zero downtime during deploys is ok, take full advantage of that fact by having very simple deploys :)
[18:08:45] <ridcully_> openresty have their own docker images nowawdays.  with matching OPM and luarocks etc.  so that is easier
[18:08:52] <EdwardIII> was thinking about wrapping my personal clojure project up in a deb for deploying to my personal vps (it needs to start at boot)
[18:09:27] <wink> docker wasn't as standard in prod in 2015
[18:09:43] <wink> ridcully_: ah, good to know. I think opm didnt even exist ;)
[18:09:49] <wink> I know it from later experiments
[18:10:09] <EdwardIII> what's OPM sorry?
[18:10:13] <ridcully_> yeah, that's why i mentioned it.  i'd _guess_ it became easier to deal with all of that
[18:10:20] <wink> openresty's package manager
[18:10:25] <EdwardIII> ahhh
[18:10:49] <ridcully_> on the other hand i had to use a "fork" of luafun for some reasons etc.
[18:11:12] <wink> oh, also prosody (jabber) is written in lua
[18:11:30] <wink> we had some lua BoFs at FOSDEM every year I went
[18:11:39] <wink> usually some good discussions and cool people
[18:13:50] <EdwardIII> BoF?
[18:17:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:20:49] <wink> oh, informal gathering, at FOSDEM called "Birds of a feather"
[18:21:16] <wink> as in contrast to tracks you could just grab a room for an hour and say "lua people meet sunday 14:00" or something
[18:22:06] <EdwardIII> ah ha
[18:22:16] <Para> Those are sometimes the most interesting ones.
[18:22:29] *** Joins: nivag (~gavin@103-76-144-176.ip.cis.gen.nz)
[18:22:38] <Para> One conference short talk I still remember after all these years focused entirely on how nodejs/v8 unrolls loops under the hood.
[18:24:57] <EdwardIII> sounds interesting. i should goto fosdem one year
[18:29:37] <EdwardIII> Para: although i'm assuming you are super highbrow and compiler design/optimisation is familiar ground to you, rather than a tech plummer like myself :)
[18:30:43] <Para> EdwardIII: Oh that's just an impression, I'm really an average Joe who needs to flip USB twice every time when plugging it in :)
[18:31:01] <Para> I do enjoy in-depth stuff though, even if most of it would just fly over my head.
[18:33:31] <EdwardIII> same
[18:33:36] <EdwardIII> those ben eater videos were pretty super
[18:46:34] *** Quits: arca0 (~tesuji@193.32.127.239) (Ping timeout: 252 seconds)
[18:53:03] *** Quits: yoonkn (~user@175.197.208.79) (Ping timeout: 265 seconds)
[19:01:57] <sobel> i have been an openresty fan for years but the stock containers they made always required i tweak them at least a little
[19:02:51] <sobel> i still wanna play with the clojure-nginx integration sometime but it's hard to prioritize such things
[19:03:41] <sobel> EdwardIII: i'm a blue-collar software/data nerd. a tech plumber.
[19:04:13] <Para> Data Engineers build processing pipelines...so they really are just Data Plumbers.
[19:04:21] <sobel> ^not lost on me
[19:04:52] <sobel> i got my current job via a programmer who is extremely good, but my plumbing handily matches his coding
[19:07:39] <sobel> deciding to learn clojure has definitely increased my exposure to CS topics that can affect my daily work, and i think that's pretty powerful
[19:16:12] *** Joins: yoonkn (~user@175.197.208.79)
[19:20:57] <EdwardIII> sobel: what kind of stuff?
[19:21:06] <EdwardIII> thinking about big-o?
[19:29:20] <sobel> actually, not having to think about big-o because that battle is almost pre-won with clojure
[19:29:23] <sobel> for a lot of what i do
[19:32:05] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 260 seconds)
[19:39:22] <sobel> EdwardIII: i used to use a lot of frameworks to avoid writing my own concurrent designs. clojure has made concurrent designs way easier to make.
[19:40:28] <EdwardIII> yeah the concurrency options in clojure are pretty good in my view
[19:40:54] <EdwardIII> i would have loathed to do real threading in other languages
[19:41:53] <sobel> if there are other languages with a transducer-like construct, i don't know of them
[19:42:23] <EdwardIII> i'll be honest i'm still not sure i fully understand transducers
[19:42:31] <EdwardIII> like why it's better than say a normal reduce
[19:45:00] <sobel> do you understand reduce/reducers?
[19:46:43] <EdwardIII> i use them fairly often :) (reduce + [1 2 3 4]) , i'd say i understand them yeah
[19:49:32] <sobel> so, you can get reduction with transformation from a transducer
[19:50:40] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[19:51:41] <sobel> i lack the fancy terminology to give a better explanation, but operating lazy sequences are where transducers really yield value.
[19:51:53] <sobel> operating ON
[19:53:16] *** Joins: seschwar (~seschwar@user/seschwar)
[19:53:35] <technomancy> EdwardIII: the best explanation I could find was that it saves some overhead of laziness by collapsing everything down to a single point of calculation
[19:53:43] <technomancy> which is like ... that solves a problem I have never once had, so ...?
[19:56:06] <sobel> i have a query that reads EDN text into clojure data, merges (reduces) the keys into a set, and operates on ~10k rows
[19:56:40] <sobel> it took minutes execute that naively. it runs in seconds with a transducer.
[19:56:58] <andreyorst> transducers allow writing algorithms that are agnostic of how to transport data
[19:57:11] <sobel> materializing the whole resultset then reducing it was super slow compared to the i/o scheduling transduce achieved
[19:57:13] <andreyorst> it's not just to avoid lazyness
[19:58:01] <technomancy> I've only ever had one situation in all my years where a Clojure program I was working on ran too slowly (other than startup time)
[19:58:03] <sobel> i consider transducer to be a critical tool for laziness. it won't all fit in memory.
[19:58:23] <technomancy> sobel: how on earth did 10k rows take minutes to calculate? that's nuts!
[19:58:31] <technomancy> was that running on a raspberry pi?
[19:58:32] *** Joins: libertyprime (~libertypr@118.149.78.102)
[19:58:56] <sobel> technomancy: wish i knew. i wanted to try out transduce anyway, but wasn't expecting quite that win.
[19:59:01] <andreyorst> technomancy: it's not about speed either
[19:59:46] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:00:04] <technomancy> andreyorst: haha well I did say that was the best explanation I could find; I didn't say it was accurate. transducers are a bit like monads in that learning how they work makes you bad at explaining them =P
[20:00:11] <sobel> technomancy: the task is, 10k rows, grab the edn column (text), parse, merge keys into a set (goal was a unique set of keys used by the 10k records) 
[20:00:38] <andreyorst> IDK transducer is just a reduce that abstracts away how to put stuff to the result
[20:00:55] <Para> Transducers don't chunk either.
[20:00:58] <andreyorst> (aside composition)
[20:01:25] <sobel> i guess its either jdbc or seq doing the chunking then?
[20:01:32] <sobel> aha i did set a chunk size on my query
[20:04:02] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:04:49] <sobel> are there stateful reducers or is that a transducer?
[20:05:18] <sobel> i've yet to write a stateful transducer but they look fairly useful.
[20:06:34] <Para> Accumulator is all you need for state, you can always remove excess state from it when reduction ends. There's `reduced?` to help with that.
[20:07:32] <EdwardIII> i mean i think my question is more really "why is the transducer example better than example #3" and it sounds like the answer is "performance reasons, sometimes?" https://stackoverflow.com/questions/26317325/can-someone-explain-clojure-transducers-to-me-in-simple-terms/26322910#26322910
[20:07:35] <Para> ...without the question mark...
[20:07:49] <sobel> ah yeah, makes sense. transducers just make it more explicit i guess.
[20:08:44] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:10:00] <technomancy> EdwardIII: this confirms my hypothesis that knowing transducers makes you bad at explaining them
[20:10:49] <sobel> seems like we're gonna need a team of experts to come up with an ELI5 version of transducer dockmentation
[20:12:52] <EdwardIII> technomancy: not necessarily, it could just be that i'm bad at learning them :)
[20:12:55] <technomancy> I mean, every explanation that actually makes sense is either about efficiency or core.async (again, solving problems I have never once had); then there's the one like this stackoverflow answer where it's like "well without transducers there are three ways to write this, and now with transducers you can do it like [nearly an exact copy of #2]"
[20:13:04] <technomancy> EdwardIII: I'm saying it's not just you =)
[20:13:23] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:13:43] <sobel> yeah, i did spend a zany amount of time one day just trying to pound the concept into my head enough that i could code one up
[20:14:04] <sobel> then i walked away from it, and it eventually settled on me, but not until i had working code
[20:14:27] <sobel> then i could feel assured that reasoning about working code would at least lead to a valid conclusion, if not the best conclusion
[20:14:49] <sobel> ...ascending the ole gradient, as it were
[20:14:58] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:14:59] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:15:28] <andreyorst> transducers solve the problem of needing to implement separate map for every kind of collection, like strams, channels, lazy sequences, e.t.c. Like in Elixir, they have map for Enums, and map for Streams, and that's are different maps which compose differently with the rest of functions
[20:15:52] <andreyorst> the fact that they are faster because they have no intermediate collection results is just a side effect of their implementation really
[20:16:27] <andreyorst> it can't be implemented differently tho
[20:16:29] <sobel> a highly valuable side effect
[20:16:51] <technomancy> andreyorst: but lazy sequences are already a universal abstraction (ignoring core.async)
[20:17:12] <andreyorst> and manifold streams
[20:17:47] <andreyorst> which makes it not universal, really, doesn't it? ;)
[20:18:32] <andreyorst> don't get me wrong, lazy sequences are amazing abstraction interface
[20:18:59] <andreyorst> it just doesn't always work
[20:19:02] <technomancy> I guess what I'm trying to say is it shouldn't be at all surprising if people are like "I have to use for transducers"
[20:19:59] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:20:36] <andreyorst> well, transducers equally work with lazy sequences, or async channels
[20:20:45] <andreyorst> which makes them truly universal
[20:20:46] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:21:52] <andreyorst> I need to make a transducer library for fennel
[20:21:53] <sobel> avoiding the memory churn from transforming a large collection seems like a pretty solid win
[20:22:08] <andreyorst> it is, yeah
[20:24:31] <andreyorst> but it's not always faster
[20:24:41] <andreyorst> you need to profile this for each usage, really
[20:25:07] <sobel> i will do exactly that the first time a transducer doesn't beat the pants off my naive implementation :)
[20:25:27] <sobel> i'll actually be really curious in that case
[20:26:13] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:27:18] <technomancy> afaict most people using core.async end up regretting it
[20:27:59] <technomancy> like it was really popular a few years ago but mostly people used it because it was the hot thing that everyone at conferences was talking about, not because they needed it
[20:28:39] <sobel> OT: how hard is it to sandbox clojure? like, if i wanted to use +-*/ and maybe abs in an expression evaluator, would it be dangerous to sandbox eval strings of linear expressions?
[20:28:56] <sobel> oh, would need grouping so also ()
[20:29:14] <Para> I'd use sci
[20:29:22] <Para> Previously the answer was hard/tricky but doable.
[20:29:33] <EdwardIII> technomancy: what would you prefer for some very io-bound thing, e.g. concurrent http requests?
[20:29:45] <Para> https://github.com/borkdude/sci
[20:30:09] <sobel> oh, i'll take a look at sci
[20:30:10] <sobel> TY
[20:30:22] <technomancy> EdwardIII: probably BEAM
[20:30:59] *** Joins: to-hu (~Thunderbi@p200300e9af022e003b796350d6158f2f.dip0.t-ipconnect.de)
[20:31:48] <technomancy> I mean, if you're so IO bound that your application logic isn't an appreciable chunk of the execution cost you can probably find something off the shelf; why even bring clojure into it in the first place?
[20:31:55] <sobel> Sci will fit nicely
[20:32:44] <technomancy> EdwardIII: I dunno. I've never once found a situation where that's happened so I couldn't say. but for an API that's mostly "route bytes from one place to another" I wouldn't use the JVM at all.
[20:32:49] <EdwardIII> BEAM the erlang vm?
[20:32:54] <technomancy> yeah
[20:32:55] <EdwardIII> i do tons of http sadly hehe
[20:33:01] <EdwardIII> everything i do is over the network
[20:33:28] <technomancy> sure but have you actually measured that threads are too costly?
[20:33:40] <technomancy> or is it just something you heard about async being good at?
[20:35:21] <Para> There's decades of misleading lore on JVM threads out there.
[20:35:38] <Para> Mainly because of general advancement and each comment being a snapshot of its time.
[20:35:38] <sobel> my current take is, threads are very coarse grains. netty+whatever goes on top seems to be the best way to do lots of i/o.
[20:35:58] <sobel> vertx has made me pretty happy, but http-kit did too
[20:36:13] <Para> ForkJoinPool with its work stealer algo is pretty much the best one can get. Of course a sensible layer on top of it is always a good thing.
[20:36:23] <sobel> Para: that, plus all the haters just repeating trash from jdk1.2 era
[20:36:27] <andreyorst> EdwardIII: try aleph.http maybe? They have async like channels, promises and callbacks API for doing asynchronous requests, and AFAIR it's pretty good
[20:36:49] <technomancy> I believe there could be places where threads are too much overhead but I would have to see cold hard data before making any chances like that to my own systems.
[20:37:01] <sobel> when nio hit the jvm, it was over for competitors that couldn't do the same
[20:37:05] <technomancy> *changes
[20:37:46] *** Quits: libertyprime (~libertypr@118.149.78.102) (Quit: leaving)
[20:37:59] <EdwardIII> technomancy: sometimes i have to do 200 http requests concurrently (in the workplace), but no i haven't actually verified threads would exhaust the system at that scale
[20:38:26] *** Joins: tcrawley (~tcrawley@2600:6c5e:467f:b0cb:2cce:ef92:c108:972f)
[20:38:37] <EdwardIII> i'm asking more out of curiosity really as i'm probably not going to be re-implementing those systems in clojure, but just interested in all viewpoints
[20:38:52] <technomancy> benchmarking is a lot cheaper than rewriting =)
[20:39:09] <sobel> 200 is small stakes
[20:39:21] <sobel> i hope you won't see much difference between approaches at that scale
[20:39:40] <EdwardIII> technomancy: well on that basis leaving a perfectly working system as-is is the cheapest option heh
[20:39:54] <sobel> going camping is the cheapest option there is
[20:40:13] <Para> https://dev.to/jeissonflorez29/project-loom-virtual-threads-in-java-418b
[20:40:17] <sobel> but somebody would miss a release deadline if i do
[20:40:39] <sobel> Loom sounds a lot like Verticles
[20:40:49] <Para> There's a lot of overlap conceptually.
[20:40:56] <EdwardIII> sobel: i better see your post "camping cheaper than threads or event loop" on hn tomorrow!
[20:41:04] <sobel> yep, and VertX in turn overlaps RxJava heavily
[20:41:06] <technomancy> EdwardIII: you'll never get a conference talk proposal accepted that way tho
[20:41:17] <EdwardIII> technomancy: haha true
[20:41:36] <EdwardIII> "why we're rewriting our perfectly fine stack in RUST wiht MICROSERVICES"
[20:41:45] <Para> Java originally had only green threads :)
[20:42:09] <Para> "Green threads refers to the name of the original thread library for the programming language Java (that was released in version 1.1 and then Green threads were abandoned in version 1.3 to native threads)."
[20:42:44] <Para> Oh yeah, there's Quasar as well.
[20:43:07] <Para> Bytecode manipulation to achieve pausable threads, work stealing and all kinds of trickery.
[20:45:10] *** Quits: silasfox (~sbv@xdsl-84-44-182-29.nc.de) (Ping timeout: 240 seconds)
[20:45:59] <sobel> Quarkus?
[20:46:07] <sobel> (built on VertX)
[20:46:38] <Para> It's a pile of turtles.
[20:46:43] <sobel> i almost worried that i couldn't decide whether to build my server on quarkus or vertx, before i knew quarkus was built on vertx
[20:46:53] <sobel> so i would start out pretty cozy there
[20:47:44] <sobel> i could waste more CPU on slightly easier servers but then it might not deploy on a t2.nano
[20:48:07] <sobel> this enterprise would probably work ok on a raspberry pi
[20:48:26] <sobel> i've been really stingy about CPU and i/o waste
[20:48:48] <Para> anyway, this one https://github.com/puniverse/quasar
[20:49:07] *** Parts: travv0 (sid293381@user/travv0) ()
[20:49:25] <Para> Pulsar is the Clojure wrapper for Quasar.
[20:49:40] <Para> I have _never_ used any of those though.
[20:49:48] <sobel> oh, that helps. i'd only found https://quasar.dev/
[20:50:47] <sobel> actors rank with monads, as structures that i keep seeing around but they don't stick in my head even when i read the discussion
[20:58:59] *** Joins: silasfox (~sbv@2001-4dd1-f945-0-a64c-1d11-b60c-5682.ipv6dyn.netcologne.de)
[21:08:12] *** Joins: Guest90 (~Guest90@88.215.96.234)
[21:10:40] *** Quits: silasfox (~sbv@2001-4dd1-f945-0-a64c-1d11-b60c-5682.ipv6dyn.netcologne.de) (Ping timeout: 260 seconds)
[21:13:59] <Para> If some scifi show would make an episode about an inescapable planet named Monad, I'd definitely watch that.
[21:18:17] <Guest90> Hi! I'm learning Clojure \o/ Please, consider `(def foo #(apply and %&))`. I know I cannot apply a macro – I've just learned that. But how do I "apply" `and` to a list? Thanks!
[21:20:18] <technomancy> Guest90: you'll need to use reduce for that since `and` is a special form
[21:21:21] <technomancy> number of arguments has to be known at compile time
[21:21:56] *** Joins: silasfox (~sbv@2001-4dd5-2366-0-10b3-fab8-33e1-994e.ipv6dyn.netcologne.de)
[21:24:41] <ridcully_> and is a macro not a special form?
[21:25:14] <technomancy> oh right; sure. works out the same either way tho?
[21:25:28] <ridcully_> `if`, that backs that and allows for the short-circuiting is
[21:28:54] <ridcully_> (every? identity ,,,) could be another option
[21:29:06] <technomancy> oh yeah great point
[21:29:21] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Remote host closed the connection)
[21:29:22] *** Quits: silasfox (~sbv@2001-4dd5-2366-0-10b3-fab8-33e1-994e.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[21:36:52] <Guest90> technomancy: gotcha. Thanks.
[21:58:32] <sobel> in other news, i've finally cleared the hurdle with SSO and it was mostly just trust that if i resolved every last warning in chrome it would Just Work(tm)
[21:58:32] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:59:08] <sobel> i might have taken a little extra time to get CORS figured out
[22:00:02] <sobel> i'm pretty sure i'd have the keycloak library working perfectly if it weren't for the terrible admin template i have, which has made a ridiculous complexity of its router
[22:00:55] <sobel> now i got THAT behind me i am racing for cljs via chestnut
[22:03:58] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[22:06:28] *** Joins: bleloch (bleloch@gateway/vpn/protonvpn/bleloch)
[22:09:56] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[22:12:25] *** Quits: Guest90 (~Guest90@88.215.96.234) (Quit: Client closed)
[22:13:14] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[22:15:26] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[22:24:54] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[22:29:02] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[22:36:58] *** Quits: l3dx (uid2250@id-2250.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[23:23:12] *** Joins: vats (~vats@42.111.21.216)
