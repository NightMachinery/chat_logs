[00:24:09] *** Joins: Anarchos (~Anarchos@arennes-655-1-1-251.w109-218.abo.wanadoo.fr)
[00:46:18] *** Quits: Anarchos (~Anarchos@arennes-655-1-1-251.w109-218.abo.wanadoo.fr) (Remote host closed the connection)
[00:50:30] *** Joins: Anarchos (~Anarchos@arennes-655-1-1-251.w109-218.abo.wanadoo.fr)
[01:10:57] *** Quits: Anarchos (~Anarchos@arennes-655-1-1-251.w109-218.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[01:23:19] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[01:35:42] *** Quits: bartholin (~bartholin@2a01cb088b00e6008ddaadae85e17ae0.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:45:38] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[03:32:47] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[03:38:02] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:42:51] <d_bot> <stab> Anyone know of a good library for manipulating and interacting with smt that can be parameterized by the backend solver? Looks like alt-ergo may be my best bet without knowing anything about the space. Just want to implement some generic algorithms over the SAT portions of SMT formula without binding the user to a specific theory or solver
[03:48:06] <companion_cube> if you want only SAT, there's more choice
[03:48:09] <companion_cube> and  the API is much smaller
[03:48:17] <companion_cube> idk of anything generic though
[03:48:37] <companion_cube> (maybe sattools?_
[03:50:53] <d_bot> <stab> Well so what I want is to only interact with the SAT portions of the formula regardless of the theories my clients are using. Ie. treat (a < b /\ c > d) as (u1 /\ u2) Perform some reorganizing of the SAT formula then pass the new SMT to a solver get some results and do it all over again
[03:51:32] <d_bot> <stab> Basically want to implement an algorithm that is useful regardless of the underlying theories and dont want to lock my clients of the lib into a theory or solver
[03:51:49] <d_bot> <stab> i guess really i could implement this binding between u1 and a<b myself potentially
[03:51:59] <companion_cube> you could functorize I guess
[03:52:12] <companion_cube> SMT solvers already do that kind of stuff internally, the SAT solver doesn't know about theories
[03:53:12] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[03:54:38] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Quit: Leaving)
[03:57:52] *** Joins: Soni (~quassel@autistic.space)
[04:02:38] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Remote host closed the connection)
[04:03:25] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[04:14:18] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Ping timeout: 260 seconds)
[04:23:23] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 268 seconds)
[04:37:12] <d_bot> <stab> yeah it's more like i need to make a series of smt queries that are modifiable by only transforming the SAT which i guess is how SAT+SMT solving works anyways
[04:37:14] <d_bot> <stab> lol
[04:39:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:23:02] <companion_cube> hmmm
[05:23:10] <companion_cube> typically you can't modify a formula once  the SMT solver knows about it
[05:23:24] <companion_cube> (not if it's incremental; otherwise if you just do n independent queries it's of course fine)
[05:23:29] <companion_cube> you can use assumptions though
[07:14:02] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[07:30:49] *** Joins: mbuf (~Shakthi@122.178.203.86)
[07:58:14] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[08:08:30] *** Joins: zebrag (~chris@user/zebrag)
[08:23:17] <d_bot> <gabenpls> i'm trying to run before i can walk, so i'm learning ocaml first before trying to create a compiler
[08:23:29] <d_bot> <gabenpls> and i've got to say, i'm loving ocaml
[08:23:44] <d_bot> <gabenpls> what a cool lang, sad i didn't discover it sooner
[08:24:00] <d_bot> <gabenpls> can't wait to do rescript
[08:35:59] <dmbaturin> Note that with reScript you will get stuck with an outdated OCaml backend.
[08:37:32] <dmbaturin> If you want to target JS with actual, up-to-date OCaml, you can try js_of_ocaml. It's a trans-compiler from OCaml bytecode to JS.
[08:38:33] *** Joins: xd1le (~xd1le@user/xd1le)
[08:42:52] <d_bot> <gabenpls> hmm i didn't plan on using rescript's ocaml backend, just rescript directly. do i have that right?
[08:46:25] <dmbaturin> I mean, reScript is a fork of OCaml 4.06 (last I checked). It's effectively a hard fork, a different language by now, and it locks you out of all new OCaml features added since 4.06.
[08:49:19] <d_bot> <gabenpls> got it
[08:51:32] <d_bot> <gabenpls> so what's the purpose of reasonml? just to make the syntax more easy for people with js background?
[08:51:34] <dmbaturin> ReasonML (now reScript) started as an alternative concrete syntax for OCaml, which created quite a bit of confusion among newcomers as to what it is and isn't. At some point its maintainers decided to position it as a standalone language, which I think is a right decision because it was never kept in sync with the OCaml compiler backend.
[08:53:17] <dmbaturin> Well, the BuckleScript (JS backend) part wasn't kept in sync. ReasonML the concrete syntax itself does work with recent OCaml versions I believe, but almost no one ever used it outside of the BuckleScript/JS stack.
[08:54:37] <dmbaturin> https://baturin.org/blog/if-you-think-reasonml-compiles-to-js-you-are-wrong/ This is a longer explanation, though I need to update it for the reScript situation.
[09:01:30] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:03:07] <d_bot> <gabenpls> ok that makes more sense
[09:04:47] <d_bot> <gabenpls> so what it comes down to is rescript vs js_of_ocaml, trying to figure out what's better. since i'm coming from a js/react background i'm guessing rescript
[09:06:47] <dmbaturin> For me, js_of_ocaml is a great way to opt out of the NPM nightmare^W ecosystem and produce effectively eternal JS blobs.
[09:09:03] <dmbaturin> If you want to use libraries from NPM a lot, you may want to use a tool that intentionally integrates with that ecosystem, like reScript. Or you may want to try js_of_ocaml as an alternative to that ecosystem.
[09:10:25] <d_bot> <gabenpls> i see. thanks.
[09:40:48] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Read error: Connection reset by peer)
[09:41:22] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[10:00:21] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Read error: Connection reset by peer)
[10:01:32] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[10:14:29] *** Quits: Guest5422 (~bobo@37.165.56.92) (Read error: Connection reset by peer)
[10:15:19] *** Joins: Guest5422 (~bobo@37.171.119.152)
[11:16:20] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Remote host closed the connection)
[11:17:30] *** Joins: rgrinberg (~textual@177.246.221.117)
[11:20:37] <d_bot> <zakkor> @gabenpls, dmbaturin: there is also the Melange project, which AFAIK tries to move away from rescript and wants to just make ReasonML an alternative syntax for OCaml, while leveraging the OCaml ecosystem going forward, instead of moving away from it
[11:20:41] <d_bot> <zakkor> <https://anmonteiro.com/2021/03/on-ocaml-and-the-js-platform/>
[11:30:23] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[11:30:41] *** Joins: bartholin (~bartholin@2a01cb088b00e6008ddaadae85e17ae0.ipv6.abo.wanadoo.fr)
[11:36:37] *** Joins: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de)
[11:37:19] *** Quits: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:49:18] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Ping timeout: 260 seconds)
[11:56:58] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:22:59] *** Quits: bartholin (~bartholin@2a01cb088b00e6008ddaadae85e17ae0.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[12:41:58] *** Quits: rgrinberg (~textual@177.246.221.117) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[12:57:23] *** Joins: reynir (root@user/reynir)
[13:02:38] *** Joins: kakadu (~kakadu@195.19.236.234)
[13:09:15] <d_bot> <Et7f3> And someone forked the fork to bump to latest ocaml https://github.com/melange-re/melange @gabenpls
[13:09:43] *** Joins: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de)
[13:11:52] <d_bot> <Et7f3> Esy reason codebase use recent feature. Esy is a real binary so it is native reason
[13:13:53] <d_bot> <Et7f3> (Oh Sorry for repost just so a different link but didn't opened it ü§¶üèª)
[13:14:43] <d_bot> <Et7f3> Why on IRC you have nickname: message does it kind of ping on discord or just conventions to know destination
[13:15:39] *** Joins: KvL (~KvL@user/KvL)
[13:18:41] *** Quits: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:33:58] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[14:04:52] *** Joins: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de)
[14:06:52] *** Quits: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:21:55] *** Joins: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de)
[14:22:40] *** Quits: mro (~mro@p200300d72f02c100b5fe758f7996b866.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:41:43] *** Joins: mro (~mro@p200300d72f0bf1003899e83faee16b3b.dip0.t-ipconnect.de)
[14:52:37] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.3)
[14:53:37] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 240 seconds)
[14:54:09] *** Joins: noddy (~user@user/noddy)
[14:54:37] *** Quits: mro (~mro@p200300d72f0bf1003899e83faee16b3b.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:57:52] *** Joins: KvL (~KvL@user/KvL)
[14:59:07] *** Quits: KvL (~KvL@user/KvL) (Client Quit)
[15:33:06] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Killed (NickServ (GHOST command used by jlrnick-)))
[15:33:55] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[15:33:55] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Killed (NickServ (GHOST command used by jlrnick-)))
[15:36:43] *** Joins: 040AADED3 (~josephler@42.118.113.78.rev.sfr.net)
[15:36:43] *** Joins: jlrnick (~josephler@42.118.113.78.rev.sfr.net)
[16:28:25] <d_bot> <VPhantom> Melange isn't specific to ReasonML: it still supports the ReScript syntax (until ReScript moves too far away from OCaml in the future) and most importantly: up-to-date OCaml syntax which ReScript dropped support for. Melange is specifically for compiling any of the syntaxes into clean and light JS, without sacrificing the ability to keep up with the latest OCaml version. That means let bindings and all the modern OCaml goodness.
[16:28:54] <d_bot> <VPhantom> Unlike ReScript however, Melange isn't sponsored at the moment, so progress is slow at best. Something I hope to help the author improve in the coming year.
[16:29:37] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-236.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[16:44:37] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[16:50:13] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-119.elisa-laajakaista.fi)
[17:40:00] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[17:42:14] *** Joins: sagax (~sagax_nb@user/sagax)
[17:47:39] *** Quits: Geekingfrog (geekingfro@2a01:7e01::f03c:92ff:fe48:8bdf) (Quit: ZNC 1.8.2 - https://znc.in)
[17:50:40] *** Joins: Geekingfrog (~geekingfr@li2156-64.members.linode.com)
[17:54:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:16:24] <d_bot> <stab> yeah it's pretty annoying to get incremental solving to work with this since then I need to make some assumptions about how the client is representing formula. Right now im just assuming independent queries but obviously that's bad
[18:16:49] <d_bot> <stab> Implementing a paper so im not completely off the reservation lol
[18:44:28] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[18:47:29] *** Quits: Geekingfrog (~geekingfr@li2156-64.members.linode.com) (Quit: ZNC 1.8.2 - https://znc.in)
[18:48:35] *** Joins: Geekingfrog (~geekingfr@li2156-64.members.linode.com)
[19:14:43] *** Joins: mro (~mro@p200300d72f0bf100183742ab4aaf63ef.dip0.t-ipconnect.de)
[19:16:55] *** Quits: mro (~mro@p200300d72f0bf100183742ab4aaf63ef.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:24:25] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[19:44:12] *** Quits: 040AADED3 (~josephler@42.118.113.78.rev.sfr.net) (Ping timeout: 240 seconds)
[19:44:17] *** Quits: jlrnick (~josephler@42.118.113.78.rev.sfr.net) (Ping timeout: 240 seconds)
[19:56:52] <d_bot> <Kakadu> Do you know, was OCaml syntax has ever been patched to support JSX? AFAIK ReasonML one was patched. Wondering, which issues patching OCaml syntax could discover: tooo many conflicts or something else?...
[20:02:49] *** Joins: spoofer (~spoofer@64.185.111.205)
[20:09:35] <d_bot> <VPhantom> ReasonML has JSX, and I bet ReScript probably does as well. In OCaml there isn't a direct equivalent. There's some PPX floating around but they're for specific APIs.
[20:18:53] <companion_cube> I don't think Xavier cares about JSX
[20:19:00] <companion_cube> The syntax has not changed
[20:21:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:41:38] *** Quits: mbuf (~Shakthi@122.178.203.86) (Quit: Leaving)
[20:48:04] <d_bot> <octachron> The ppx syntax has been amended to allow `{%jsx|...|}` as a shortcut for `[%jsx{|...|}]`.
[20:55:02] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:57:08] <d_bot> <EduardoRFS> problem with ppx with string is that ocamlformat just doesn't care about them
[20:59:17] <d_bot> <Kakadu> It would be great to have configurable parser where we can enable/disable JSX/metaOCaml/Reason syntaxes and metaOCaml would generate for us efficient recursive descent with error recovery
[21:13:51] <d_bot> <VPhantom> I'll admit, if inline HTML could simply resolve to hyperscript type function calls I'd happily use it for templating. (As it is, I use said hyperscript technique with a base `h` function and derived curried `h tagname` functions.)
[21:22:47] *** Quits: chrisz (o09666nv6f@55d425f6.access.ecotel.net) (Ping timeout: 250 seconds)
[21:23:41] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:24:25] *** Joins: chrisz (lbpjkgmx1q@55d4c283.access.ecotel.net)
[21:26:41] <d_bot> <VPhantom> Back in my JS days I created a compile-time templating scheme (<https://github.com/vphantom/node-jstc>) and I might be tempted to experiment with the concept with OCaml. In this old module each template file became a function which takes an environment object as its argument and returns a string of output. The basic idea of "string first, with OCaml interspersed" could be interesting, like PHP, ASP, JSP, etc. Of course I'd appen
[21:28:11] <d_bot> <VPhantom> Hyperscript, on the other hand, has the advantage of being OCaml directly and of providing more guarantees about the quality of the output (tags get closed automatically, for one thing).
[21:33:39] <d_bot> <VPhantom> (Huh, there was an Apache `mod_caml` around 2004. Loaded bytecode dynamically.)
[21:42:35] <dmbaturin> VPhantom: I was much more intrigued by a browser that could run OCaml applets: https://caml.inria.fr/pub/old_caml_site/~rouaix/mmm/
[21:44:04] <d_bot> <VPhantom> Nice! Though my heart still belongs to Oberon's "Juice" a.k.a. SLIM binaries (even though Java applets and now WASM won that race‚Ä¶)
[22:12:33] *** Joins: Everything (~Everythin@37.115.210.35)
[22:14:37] *** Quits: Guest5422 (~bobo@37.171.119.152) (Ping timeout: 240 seconds)
[22:14:44] *** Joins: Guest5422 (~bobo@37.173.182.224)
[22:19:12] *** Joins: chiastre (~chiastre@user/chiastre)
[22:19:48] *** Joins: bartholin (~bartholin@2a01:cb11:1ef:d800:4fc6:aec1:8fb8:a2e1)
[22:57:46] *** Joins: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044)
[23:00:09] *** Quits: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044) (Client Quit)
[23:58:06] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[23:58:17] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[23:58:32] *** Joins: Colt (~Colt@user/colt)
